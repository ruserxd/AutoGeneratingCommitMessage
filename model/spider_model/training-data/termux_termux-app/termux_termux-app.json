[
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/models/ReportInfo.java b/termux-shared/src/main/java/com/termux/shared/models/ReportInfo.java\n--- a/termux-shared/src/main/java/com/termux/shared/models/ReportInfo.java\n+++ b/termux-shared/src/main/java/com/termux/shared/models/ReportInfo.java\n@@ -1,5 +1,7 @@\n package com.termux.shared.models;\n \n+import androidx.annotation.Keep;\n+\n import com.termux.shared.markdown.MarkdownUtils;\n import com.termux.shared.android.AndroidUtils;\n \n@@ -10,6 +12,25 @@\n  */\n public class ReportInfo implements Serializable {\n \n+    /**\n+     * Explicitly define `serialVersionUID` to prevent exceptions on deserialization.\n+     *\n+     * Like when calling `Bundle.getSerializable()` on Android.\n+     * `android.os.BadParcelableException: Parcelable encountered IOException reading a Serializable object` (name = <class_name>)\n+     * `java.io.InvalidClassException: <class_name>; local class incompatible`\n+     *\n+     * The `@Keep` annotation is necessary to prevent the field from being removed by proguard when\n+     * app is compiled, even if its kept during library compilation.\n+     *\n+     * **See Also:**\n+     * - https://docs.oracle.com/javase/8/docs/platform/serialization/spec/version.html#a6678\n+     * - https://docs.oracle.com/javase/8/docs/platform/serialization/spec/class.html#a4100\n+     */\n+    @Keep\n+    private static final long serialVersionUID = 1L;\n+\n+\n+\n     /** The user action that was being processed for which the report was generated. */\n     public final String userAction;\n     /** The internal app component that sent the report. */\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/models/TextIOInfo.java b/termux-shared/src/main/java/com/termux/shared/models/TextIOInfo.java\n--- a/termux-shared/src/main/java/com/termux/shared/models/TextIOInfo.java\n+++ b/termux-shared/src/main/java/com/termux/shared/models/TextIOInfo.java\n@@ -3,6 +3,7 @@\n import android.graphics.Color;\n import android.graphics.Typeface;\n \n+import androidx.annotation.Keep;\n import androidx.annotation.NonNull;\n \n import com.termux.shared.activities.TextIOActivity;\n@@ -19,6 +20,25 @@\n  */\n public class TextIOInfo implements Serializable {\n \n+    /**\n+     * Explicitly define `serialVersionUID` to prevent exceptions on deserialization.\n+     *\n+     * Like when calling `Bundle.getSerializable()` on Android.\n+     * `android.os.BadParcelableException: Parcelable encountered IOException reading a Serializable object` (name = <class_name>)\n+     * `java.io.InvalidClassException: <class_name>; local class incompatible`\n+     *\n+     * The `@Keep` annotation is necessary to prevent the field from being removed by proguard when\n+     * app is compiled, even if its kept during library compilation.\n+     *\n+     * **See Also:**\n+     * - https://docs.oracle.com/javase/8/docs/platform/serialization/spec/version.html#a6678\n+     * - https://docs.oracle.com/javase/8/docs/platform/serialization/spec/class.html#a4100\n+     */\n+    @Keep\n+    private static final long serialVersionUID = 1L;\n+\n+\n+\n     public static final int GENERAL_DATA_SIZE_LIMIT_IN_BYTES = 1000;\n     public static final int LABEL_SIZE_LIMIT_IN_BYTES = 4000;\n     public static final int TEXT_SIZE_LIMIT_IN_BYTES = 100000 - GENERAL_DATA_SIZE_LIMIT_IN_BYTES - LABEL_SIZE_LIMIT_IN_BYTES; // < 100KB",
    "output": "Add explicit `serialVersionUID` to `Serializable` classes like `ReportInfo` and `TextIOInfo`"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -736,7 +736,7 @@ private void onResetTerminalSession(TerminalSession session) {\n \n     private void showStylingDialog() {\n         Intent stylingIntent = new Intent();\n-        stylingIntent.setClassName(TermuxConstants.TERMUX_STYLING_PACKAGE_NAME, TermuxConstants.TERMUX_STYLING.TERMUX_STYLING_ACTIVITY_NAME);\n+        stylingIntent.setClassName(TermuxConstants.TERMUX_STYLING_PACKAGE_NAME, TermuxConstants.TERMUX_STYLING_APP.TERMUX_STYLING_ACTIVITY_NAME);\n         try {\n             startActivity(stylingIntent);\n         } catch (ActivityNotFoundException | IllegalArgumentException e) {",
    "output": "Use `TERMUX_STYLING_APP` for `TERMUX_STYLING_ACTIVITY_NAME` as per 078eea2b"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/api/file/FileReceiverActivity.java b/app/src/main/java/com/termux/app/api/file/FileReceiverActivity.java\n--- a/app/src/main/java/com/termux/app/api/file/FileReceiverActivity.java\n+++ b/app/src/main/java/com/termux/app/api/file/FileReceiverActivity.java\n@@ -55,6 +55,8 @@ public class FileReceiverActivity extends AppCompatActivity {\n     private static final String LOG_TAG = \"FileReceiverActivity\";\n \n     static boolean isSharedTextAnUrl(String sharedText) {\n+        if (sharedText == null || sharedText.isEmpty()) return false;\n+\n         return Patterns.WEB_URL.matcher(sharedText).matches()\n             || Pattern.matches(\"magnet:\\\\?xt=urn:btih:.*?\", sharedText);\n     }",
    "output": "Fix tests added in b84dc703"
  },
  {
    "input": "diff --git a/app/src/test/java/com/termux/app/api/file/FileReceiverActivityTest.java b/app/src/test/java/com/termux/app/api/file/FileReceiverActivityTest.java\n--- a/app/src/test/java/com/termux/app/api/file/FileReceiverActivityTest.java\n+++ b/app/src/test/java/com/termux/app/api/file/FileReceiverActivityTest.java\n@@ -26,6 +26,8 @@ public void testIsSharedTextAnUrl() {\n \n         List<String> invalidUrls = new ArrayList<>();\n         invalidUrls.add(\"a test with example.com\");\n+        invalidUrls.add(\"\");\n+        invalidUrls.add(null);\n         for (String url : invalidUrls) {\n             Assert.assertFalse(FileReceiverActivity.isSharedTextAnUrl(url));\n         }",
    "output": "Add empty and null strings tests for invalid urls to `FileReceiverActivityTest`"
  },
  {
    "input": "diff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n@@ -1418,8 +1418,8 @@ private void doEsc(int b) {\n                 // http://www.vt100.net/docs/vt100-ug/chapter3.html: \"Move the active position to the same horizontal\n                 // position on the preceding line. If the active position is at the top margin, a scroll down is performed\".\n                 if (mCursorRow <= mTopMargin) {\n-                    mScreen.blockCopy(0, mTopMargin, mColumns, mBottomMargin - (mTopMargin + 1), 0, mTopMargin + 1);\n-                    blockClear(0, mTopMargin, mColumns);\n+                    mScreen.blockCopy(mLeftMargin, mTopMargin, mRightMargin - mLeftMargin, mBottomMargin - (mTopMargin + 1), mLeftMargin, mTopMargin + 1);\n+                    blockClear(mLeftMargin, mTopMargin, mRightMargin - mLeftMargin);\n                 } else {\n                     mCursorRow--;\n                 }\n@@ -1628,8 +1628,8 @@ private void doCsi(int b) {\n                     final int linesToScrollArg = getArg0(1);\n                     final int linesBetweenTopAndBottomMargins = mBottomMargin - mTopMargin;\n                     final int linesToScroll = Math.min(linesBetweenTopAndBottomMargins, linesToScrollArg);\n-                    mScreen.blockCopy(0, mTopMargin, mColumns, linesBetweenTopAndBottomMargins - linesToScroll, 0, mTopMargin + linesToScroll);\n-                    blockClear(0, mTopMargin, mColumns, linesToScroll);\n+                    mScreen.blockCopy(mLeftMargin, mTopMargin, mRightMargin - mLeftMargin, linesBetweenTopAndBottomMargins - linesToScroll, mLeftMargin, mTopMargin + linesToScroll);\n+                    blockClear(mLeftMargin, mTopMargin, mRightMargin - mLeftMargin, linesToScroll);\n                 } else {\n                     // \"${CSI}${func};${startx};${starty};${firstrow};${lastrow}T\" - initiate highlight mouse tracking.\n                     unimplementedSequence(b);\n\ndiff --git a/terminal-emulator/src/test/java/com/termux/terminal/ScrollRegionTest.java b/terminal-emulator/src/test/java/com/termux/terminal/ScrollRegionTest.java\n--- a/terminal-emulator/src/test/java/com/termux/terminal/ScrollRegionTest.java\n+++ b/terminal-emulator/src/test/java/com/termux/terminal/ScrollRegionTest.java\n@@ -75,6 +75,16 @@ public void testNELRespectsLeftMargin() {\n \t\twithTerminalSized(3, 3).enterString(\"\\033[?69h\\033[2sABC\\033[?6h\\033ED\").assertLinesAre(\"ABC\", \" D \", \"   \");\n \t}\n \n+\tpublic void testRiRespectsLeftMargin() {\n+\t\t// Reverse Index (RI), ${ESC}M, should respect horizontal margins:\n+\t\twithTerminalSized(4, 3).enterString(\"ABCD\\033[?69h\\033[2;3s\\033[?6h\\033M\").assertLinesAre(\"A  D\", \" BC \", \"    \");\n+\t}\n+\n+\tpublic void testSdRespectsLeftMargin() {\n+\t\t// Scroll Down (SD), ${CSI}${N}T, should respect horizontal margins:\n+\t\twithTerminalSized(4, 3).enterString(\"ABCD\\033[?69h\\033[2;3s\\033[?6h\\033[2T\").assertLinesAre(\"A  D\", \"    \", \" BC \");\n+\t}\n+\n \tpublic void testBackwardIndex() {\n \t\t// vttest \"Menu 11.3.2: VT420 Cursor-Movement Test\", test 7.\n \t\t// Without margins:",
    "output": "Make ScrollDown escape respect margins"
  },
  {
    "input": "diff --git a/terminal-view/src/main/java/com/termux/view/TerminalRenderer.java b/terminal-view/src/main/java/com/termux/view/TerminalRenderer.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalRenderer.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalRenderer.java\n@@ -233,7 +233,7 @@ private void drawTextRun(Canvas canvas, char[] text, int[] palette, float y, int\n             mTextPaint.setColor(foreColor);\n \n             // The text alignment is the default Paint.Align.LEFT.\n-            canvas.drawText(text, startCharIndex, runWidthChars, left, y - mFontLineSpacingAndAscent, mTextPaint);\n+            canvas.drawTextRun(text, startCharIndex, runWidthChars, startCharIndex, runWidthChars, left, y - mFontLineSpacingAndAscent, false, mTextPaint);\n         }\n \n         if (savedMatrix) canvas.restore();",
    "output": "Use Canvas.drawTextRun instead of drawText"
  },
  {
    "input": "diff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n@@ -126,11 +126,6 @@ public final class TerminalEmulator {\n     private String mTitle;\n     private final Stack<String> mTitleStack = new Stack<>();\n \n-    /** If processing first character of first parameter of {@link #ESC_CSI}. */\n-    private boolean mIsCSIStart;\n-    /** The last character processed of a parameter of {@link #ESC_CSI}. */\n-    private Integer mLastCSIArg;\n-\n     /** The cursor position. Between (0,0) and (mRows-1, mColumns-1). */\n     private int mCursorRow, mCursorCol;\n \n@@ -1393,8 +1388,6 @@ private void doEsc(int b) {\n                 break;\n             case '[':\n                 continueSequence(ESC_CSI);\n-                mIsCSIStart = true;\n-                mLastCSIArg = null;\n                 break;\n             case '=': // DECKPAM\n                 setDecsetinternalBit(DECSET_BIT_APPLICATION_KEYPAD, true);\n@@ -1765,7 +1758,7 @@ private void doCsi(int b) {\n     private void selectGraphicRendition() {\n         if (mArgIndex >= mArgs.length) mArgIndex = mArgs.length - 1;\n         for (int i = 0; i <= mArgIndex; i++) {\n-            int code = mArgs[i];\n+            int code = getArg(i, 0, false);\n             if (code < 0) {\n                 if (mArgIndex > 0) {\n                     continue;\n@@ -1823,7 +1816,10 @@ private void selectGraphicRendition() {\n                     if (i + 4 > mArgIndex) {\n                         Logger.logWarn(mClient, LOG_TAG, \"Too few CSI\" + code + \";2 RGB arguments\");\n                     } else {\n-                        int red = mArgs[i + 2], green = mArgs[i + 3], blue = mArgs[i + 4];\n+                        int red = getArg(i + 2, 0, false);\n+                        int green = getArg(i + 3, 0, false);\n+                        int blue = getArg(i + 4, 0, false);\n+\n                         if (red < 0 || green < 0 || blue < 0 || red > 255 || green > 255 || blue > 255) {\n                             finishSequenceAndLogError(\"Invalid RGB: \" + red + \",\" + green + \",\" + blue);\n                         } else {\n@@ -1837,7 +1833,7 @@ private void selectGraphicRendition() {\n                         i += 4; // \"2;P_r;P_g;P_r\"\n                     }\n                 } else if (firstArg == 5) {\n-                    int color = mArgs[i + 2];\n+                    int color = getArg(i + 2, 0, false);\n                     i += 2; // \"5;P_s\"\n                     if (color >= 0 && color < TextStyle.NUM_INDEXED_COLORS) {\n                         if (code == 38) {\n@@ -2116,44 +2112,29 @@ private void scrollDownOneLine() {\n      *\n      * https://vt100.net/docs/vt510-rm/chapter4.html#S4.3.3\n      * */\n-    private void parseArg(int inputByte) {\n-        int[] bytes = new int[]{inputByte};\n-        // Only doing this for ESC_CSI and not for other ESC_CSI_* since they seem to be using their\n-        // own defaults with getArg*() calls, but there may be missed cases\n-        if (mEscapeState == ESC_CSI) {\n-            if ((mIsCSIStart && inputByte == ';') || // If sequence starts with a ; character, like \\033[;m\n-                (!mIsCSIStart && mLastCSIArg != null && mLastCSIArg == ';'  && inputByte == ';')) {  // If sequence contains sequential ; characters, like \\033[;;m\n-                bytes = new int[]{'0', ';'}; // Assume 0 was passed\n-            }\n-        }\n-\n-        mIsCSIStart = false;\n-\n-        for (int b : bytes) {\n-            if (b >= '0' && b <= '9') {\n-                if (mArgIndex < mArgs.length) {\n-                    int oldValue = mArgs[mArgIndex];\n-                    int thisDigit = b - '0';\n-                    int value;\n-                    if (oldValue >= 0) {\n-                        value = oldValue * 10 + thisDigit;\n-                    } else {\n-                        value = thisDigit;\n-                    }\n-                    if (value > 9999)\n-                        value = 9999;\n-                    mArgs[mArgIndex] = value;\n-                }\n-                continueSequence(mEscapeState);\n-            } else if (b == ';') {\n-                if (mArgIndex < mArgs.length) {\n-                    mArgIndex++;\n+    private void parseArg(int b) {\n+        if (b >= '0' && b <= '9') {\n+            if (mArgIndex < mArgs.length) {\n+                int oldValue = mArgs[mArgIndex];\n+                int thisDigit = b - '0';\n+                int value;\n+                if (oldValue >= 0) {\n+                    value = oldValue * 10 + thisDigit;\n+                } else {\n+                    value = thisDigit;\n                 }\n-                continueSequence(mEscapeState);\n-            } else {\n-                unknownSequence(b);\n+                if (value > 9999)\n+                    value = 9999;\n+                mArgs[mArgIndex] = value;\n+            }\n+            continueSequence(mEscapeState);\n+        } else if (b == ';') {\n+            if (mArgIndex < mArgs.length) {\n+                mArgIndex++;\n             }\n-            mLastCSIArg = b;\n+            continueSequence(mEscapeState);\n+        } else {\n+            unknownSequence(b);\n         }\n     }\n \n\ndiff --git a/terminal-emulator/src/test/java/com/termux/terminal/TerminalTest.java b/terminal-emulator/src/test/java/com/termux/terminal/TerminalTest.java\n--- a/terminal-emulator/src/test/java/com/termux/terminal/TerminalTest.java\n+++ b/terminal-emulator/src/test/java/com/termux/terminal/TerminalTest.java\n@@ -163,6 +163,13 @@ public void testSelectGraphics() {\n         assertEquals(TextStyle.COLOR_INDEX_FOREGROUND, mTerminal.mForeColor);\n         enterString(\"\\033[31;;m\");\n         assertEquals(TextStyle.COLOR_INDEX_FOREGROUND, mTerminal.mForeColor);\n+        enterString(\"\\033[31;m\");\n+        assertEquals(TextStyle.COLOR_INDEX_FOREGROUND, mTerminal.mForeColor);\n+        enterString(\"\\033[31;;41m\");\n+        assertEquals(TextStyle.COLOR_INDEX_FOREGROUND, mTerminal.mForeColor);\n+        assertEquals(1, mTerminal.mBackColor);\n+        enterString(\"\\033[0m\");\n+        assertEquals(TextStyle.COLOR_INDEX_BACKGROUND, mTerminal.mBackColor);\n \n \t\t// 256 colors:\n \t\tenterString(\"\\033[38;5;119m\");\n@@ -178,10 +185,18 @@ public void testSelectGraphics() {\n \t\tassertEquals(129, mTerminal.mBackColor);\n \n \t\t// Multiple parameters at once:\n-\t\tenterString(\"\\033[38;5;178;48;5;179;m\");\n+\t\tenterString(\"\\033[38;5;178;48;5;179m\");\n \t\tassertEquals(178, mTerminal.mForeColor);\n \t\tassertEquals(179, mTerminal.mBackColor);\n \n+\t\t// Omitted parameter means zero:\n+\t\tenterString(\"\\033[38;5;m\");\n+\t\tassertEquals(0, mTerminal.mForeColor);\n+\t\tassertEquals(179, mTerminal.mBackColor);\n+\t\tenterString(\"\\033[48;5;m\");\n+\t\tassertEquals(0, mTerminal.mForeColor);\n+\t\tassertEquals(0, mTerminal.mBackColor);\n+\n \t\t// 24 bit colors:\n \t\tenterString((\"\\033[0m\")); // Reset fg and bg colors.\n \t\tenterString(\"\\033[38;2;255;127;2m\");\n@@ -205,6 +220,16 @@ public void testSelectGraphics() {\n \t\tenterString(\"\\033[38;2;300;127;2;48;2;1;300;254m\");\n \t\tassertEquals(expectedForeground, mTerminal.mForeColor);\n \t\tassertEquals(expectedBackground, mTerminal.mBackColor);\n+\n+\t\t// 24 bit colors, omitted parameter means zero:\n+\t\tenterString(\"\\033[38;2;255;127;m\");\n+\t\texpectedForeground = 0xff000000 | (255 << 16) | (127 << 8);\n+\t\tassertEquals(expectedForeground, mTerminal.mForeColor);\n+\t\tassertEquals(expectedBackground, mTerminal.mBackColor);\n+\t\tenterString(\"\\033[38;2;123;;77m\");\n+\t\texpectedForeground = 0xff000000 | (123 << 16) | 77;\n+\t\tassertEquals(expectedForeground, mTerminal.mForeColor);\n+\t\tassertEquals(expectedBackground, mTerminal.mBackColor);\n \t}\n \n \tpublic void testBackgroundColorErase() {",
    "output": "Improve handling of empty ';' SGR sequences"
  },
  {
    "input": "diff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n@@ -2092,13 +2092,14 @@ private void setCursorPosition(int x, int y) {\n \n     private void scrollDownOneLine() {\n         mScrollCounter++;\n+        long currentStyle = getStyle();\n         if (mLeftMargin != 0 || mRightMargin != mColumns) {\n             // Horizontal margin: Do not put anything into scroll history, just non-margin part of screen up.\n             mScreen.blockCopy(mLeftMargin, mTopMargin + 1, mRightMargin - mLeftMargin, mBottomMargin - mTopMargin - 1, mLeftMargin, mTopMargin);\n             // .. and blank bottom row between margins:\n-            mScreen.blockSet(mLeftMargin, mBottomMargin - 1, mRightMargin - mLeftMargin, 1, ' ', mEffect);\n+            mScreen.blockSet(mLeftMargin, mBottomMargin - 1, mRightMargin - mLeftMargin, 1, ' ', currentStyle);\n         } else {\n-            mScreen.scrollDownOneLine(mTopMargin, mBottomMargin, getStyle());\n+            mScreen.scrollDownOneLine(mTopMargin, mBottomMargin, currentStyle);\n         }\n     }\n \n\ndiff --git a/terminal-emulator/src/test/java/com/termux/terminal/ScrollRegionTest.java b/terminal-emulator/src/test/java/com/termux/terminal/ScrollRegionTest.java\n--- a/terminal-emulator/src/test/java/com/termux/terminal/ScrollRegionTest.java\n+++ b/terminal-emulator/src/test/java/com/termux/terminal/ScrollRegionTest.java\n@@ -127,4 +127,31 @@ public void testScrollRegionDoesNotLimitCursorMovement() {\n \t\t\t\t\"   xxx\"\n \t\t\t);\n \t}\n+\n+\t/**\n+\t * See <a href=\"https://github.com/termux/termux-packages/issues/12556\">reported issue</a>.\n+\t */\n+\tpublic void testClearingWhenScrollingWithMargins() {\n+\t\tint newForeground = 2;\n+\t\tint newBackground = 3;\n+\t\tint size = 3;\n+\t\tTerminalTestCase terminal = withTerminalSized(size, size)\n+\t\t\t// Enable horizontal margin and set left margin to 1:\n+\t\t\t.enterString(\"\\033[?69h\\033[2s\")\n+\t\t\t// Set foreground and background color:\n+\t\t\t.enterString(\"\\033[\" + (30 + newForeground) + \";\" + (40 + newBackground) + \"m\")\n+\t\t\t// Enter newlines to scroll down:\n+\t\t\t.enterString(\"\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\");\n+\t\tfor (int row = 0; row < size; row++) {\n+\t\t\tfor (int col = 0; col < size; col++) {\n+\t\t\t\t// The first column (outside of the scrolling area, due to us setting a left scroll\n+\t\t\t\t// margin of 1) should be unmodified, the others should use the current style:\n+\t\t\t\tint expectedForeground = col == 0 ? TextStyle.COLOR_INDEX_FOREGROUND : newForeground;\n+\t\t\t\tint expectedBackground = col == 0 ? TextStyle.COLOR_INDEX_BACKGROUND : newBackground;\n+\t\t\t\tterminal.assertForegroundColorAt(row, col, expectedForeground);\n+\t\t\t\tterminal.assertBackgroundColorAt(row, col, expectedBackground);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n }\n\ndiff --git a/terminal-emulator/src/test/java/com/termux/terminal/TerminalTestCase.java b/terminal-emulator/src/test/java/com/termux/terminal/TerminalTestCase.java\n--- a/terminal-emulator/src/test/java/com/termux/terminal/TerminalTestCase.java\n+++ b/terminal-emulator/src/test/java/com/termux/terminal/TerminalTestCase.java\n@@ -301,6 +301,11 @@ public void assertForegroundColorAt(int externalRow, int column, int color) {\n \t\tassertEquals(color, TextStyle.decodeForeColor(style));\n \t}\n \n+\tpublic void assertBackgroundColorAt(int externalRow, int column, int color) {\n+\t\tlong style = mTerminal.getScreen().mLines[mTerminal.getScreen().externalToInternalRow(externalRow)].getStyle(column);\n+\t\tassertEquals(color, TextStyle.decodeBackColor(style));\n+\t}\n+\n \tpublic TerminalTestCase assertColor(int colorIndex, int expected) {\n \t\tint actual = mTerminal.mColors.mCurrentColors[colorIndex];\n \t\tif (expected != actual) {",
    "output": "Use current bg color when scrolling with horizontal margins"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -590,7 +590,7 @@ private void setToggleKeyboardView() {\n         });\n \n         findViewById(R.id.toggle_keyboard_button).setOnLongClickListener(v -> {\n-            //toggleTerminalToolbar();\n+            toggleTerminalToolbar();\n             return true;\n         });\n     }",
    "output": "Fix toggle toolbar not working due to accidental comment of function in a56ed577"
  },
  {
    "input": "diff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -11,6 +11,7 @@\n import android.os.Build;\n import android.os.Handler;\n import android.os.Looper;\n+import android.os.SystemClock;\n import android.text.Editable;\n import android.text.InputType;\n import android.text.TextUtils;\n@@ -872,13 +873,36 @@ public boolean handleKeyCode(int keyCode, int keyMod) {\n         if (mEmulator != null)\n             mEmulator.setCursorBlinkState(true);\n \n+        if (handleKeyCodeAction(keyCode, keyMod))\n+            return true;\n+\n         TerminalEmulator term = mTermSession.getEmulator();\n         String code = KeyHandler.getCode(keyCode, keyMod, term.isCursorKeysApplicationMode(), term.isKeypadApplicationMode());\n         if (code == null) return false;\n         mTermSession.write(code);\n         return true;\n     }\n \n+    public boolean handleKeyCodeAction(int keyCode, int keyMod) {\n+        boolean shiftDown = (keyMod & KeyHandler.KEYMOD_SHIFT) != 0;\n+\n+        switch (keyCode) {\n+            case KeyEvent.KEYCODE_PAGE_UP:\n+            case KeyEvent.KEYCODE_PAGE_DOWN:\n+                // shift+page_up and shift+page_down should scroll scrollback history instead of\n+                // scrolling command history or changing pages\n+                if (shiftDown) {\n+                    long time = SystemClock.uptimeMillis();\n+                    MotionEvent motionEvent = MotionEvent.obtain(time, time, MotionEvent.ACTION_DOWN, 0, 0, 0);\n+                    doScroll(motionEvent, keyCode == KeyEvent.KEYCODE_PAGE_UP ? -1 : 1);\n+                    motionEvent.recycle();\n+                    return true;\n+                }\n+        }\n+\n+       return false;\n+    }\n+\n     /**\n      * Called when a key is released in the view.\n      *",
    "output": "Fix `SHIFT+PAGE_UP` and `SHIFT+PAGE_DOWN` behaviour to scroll `1` line of scrollback history instead of scrolling command history or changing pages"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/termux/extrakeys/ExtraKeysConstants.java b/termux-shared/src/main/java/com/termux/shared/termux/extrakeys/ExtraKeysConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/extrakeys/ExtraKeysConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/extrakeys/ExtraKeysConstants.java\n@@ -10,7 +10,10 @@\n public class ExtraKeysConstants {\n \n     /** Defines the repetitive keys that can be passed to {@link ExtraKeysView#setRepetitiveKeys(List)}. */\n-    public static List<String> PRIMARY_REPETITIVE_KEYS = Arrays.asList(\"UP\", \"DOWN\", \"LEFT\", \"RIGHT\", \"BKSP\", \"DEL\");\n+    public static List<String> PRIMARY_REPETITIVE_KEYS = Arrays.asList(\n+        \"UP\", \"DOWN\", \"LEFT\", \"RIGHT\",\n+        \"BKSP\", \"DEL\",\n+        \"PGUP\", \"PGDN\");\n \n \n ",
    "output": "Add `PGUP` and `PGDN` extra keys to repetitive keys so that long holding them triggers page scrolling instead of having to repeatedly press the key to change pages"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/termux/settings/preferences/TermuxAPIAppSharedPreferences.java b/termux-shared/src/main/java/com/termux/shared/termux/settings/preferences/TermuxAPIAppSharedPreferences.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/settings/preferences/TermuxAPIAppSharedPreferences.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/settings/preferences/TermuxAPIAppSharedPreferences.java\n@@ -72,4 +72,13 @@ public void setLogLevel(Context context, int logLevel, boolean commitToFile) {\n         SharedPreferenceUtils.setInt(mSharedPreferences, TERMUX_API_APP.KEY_LOG_LEVEL, logLevel, commitToFile);\n     }\n \n+\n+    public int getLastPendingIntentRequestCode() {\n+        return SharedPreferenceUtils.getInt(mSharedPreferences, TERMUX_API_APP.KEY_LAST_PENDING_INTENT_REQUEST_CODE, TERMUX_API_APP.DEFAULT_VALUE_KEY_LAST_PENDING_INTENT_REQUEST_CODE);\n+    }\n+\n+    public void setLastPendingIntentRequestCode(int lastPendingIntentRequestCode) {\n+        SharedPreferenceUtils.setInt(mSharedPreferences, TERMUX_API_APP.KEY_LAST_PENDING_INTENT_REQUEST_CODE, lastPendingIntentRequestCode, true);\n+    }\n+\n }\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/settings/preferences/TermuxPreferenceConstants.java b/termux-shared/src/main/java/com/termux/shared/termux/settings/preferences/TermuxPreferenceConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/settings/preferences/TermuxPreferenceConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/settings/preferences/TermuxPreferenceConstants.java\n@@ -194,6 +194,13 @@ public static final class TERMUX_API_APP {\n          */\n         public static final String KEY_LOG_LEVEL = \"log_level\";\n \n+\n+        /**\n+         * Defines the key for last used PendingIntent request code.\n+         */\n+        public static final String KEY_LAST_PENDING_INTENT_REQUEST_CODE = \"last_pending_intent_request_code\";\n+        public static final int DEFAULT_VALUE_KEY_LAST_PENDING_INTENT_REQUEST_CODE = 0;\n+\n     }\n \n ",
    "output": "Add `KEY_LAST_PENDING_INTENT_REQUEST_CODE` to `TermuxAPIAppSharedPreferences`"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/terminal/TermuxTerminalSessionActivityClient.java b/app/src/main/java/com/termux/app/terminal/TermuxTerminalSessionActivityClient.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxTerminalSessionActivityClient.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxTerminalSessionActivityClient.java\n@@ -183,20 +183,16 @@ public void onSessionFinished(@NonNull TerminalSession finishedSession) {\n     public void onCopyTextToClipboard(@NonNull TerminalSession session, String text) {\n         if (!mActivity.isVisible()) return;\n \n-        ClipboardManager clipboard = (ClipboardManager) mActivity.getSystemService(Context.CLIPBOARD_SERVICE);\n-        clipboard.setPrimaryClip(new ClipData(null, new String[]{\"text/plain\"}, new ClipData.Item(text)));\n+        ShareUtils.copyTextToClipboard(mActivity, text);\n     }\n \n     @Override\n     public void onPasteTextFromClipboard(@Nullable TerminalSession session) {\n         if (!mActivity.isVisible()) return;\n \n-        ClipboardManager clipboard = (ClipboardManager) mActivity.getSystemService(Context.CLIPBOARD_SERVICE);\n-        ClipData clipData = clipboard.getPrimaryClip();\n-        if (clipData != null) {\n-            CharSequence paste = clipData.getItemAt(0).coerceToText(mActivity);\n-            if (!TextUtils.isEmpty(paste)) mActivity.getTerminalView().mEmulator.paste(paste.toString());\n-        }\n+        String text = ShareUtils.getTextStringFromClipboardIfSet(mActivity, true);\n+        if (text != null)\n+            mActivity.getTerminalView().mEmulator.paste(text);\n     }\n \n     @Override\n\ndiff --git a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n@@ -702,9 +702,7 @@ public void showUrlSelection() {\n         // Click to copy url to clipboard:\n         final AlertDialog dialog = new AlertDialog.Builder(mActivity).setItems(urls, (di, which) -> {\n             String url = (String) urls[which];\n-            ClipboardManager clipboard = (ClipboardManager) mActivity.getSystemService(Context.CLIPBOARD_SERVICE);\n-            clipboard.setPrimaryClip(new ClipData(null, new String[]{\"text/plain\"}, new ClipData.Item(url)));\n-            Toast.makeText(mActivity, R.string.msg_select_url_copied_to_clipboard, Toast.LENGTH_LONG).show();\n+            ShareUtils.copyTextToClipboard(mActivity, url, mActivity.getString(R.string.msg_select_url_copied_to_clipboard));\n         }).setTitle(R.string.title_select_url_dialog).create();\n \n         // Long press to open URL:\n@@ -789,12 +787,9 @@ public void doPaste() {\n         if (session == null) return;\n         if (!session.isRunning()) return;\n \n-        ClipboardManager clipboard = (ClipboardManager) mActivity.getSystemService(Context.CLIPBOARD_SERVICE);\n-        ClipData clipData = clipboard.getPrimaryClip();\n-        if (clipData == null) return;\n-        CharSequence paste = clipData.getItemAt(0).coerceToText(mActivity);\n-        if (!TextUtils.isEmpty(paste))\n-            session.getEmulator().paste(paste.toString());\n+        String text = ShareUtils.getTextStringFromClipboardIfSet(mActivity, true);\n+        if (text != null)\n+            session.getEmulator().paste(text);\n     }\n \n }\n\ndiff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -566,11 +566,14 @@ public boolean onTouchEvent(MotionEvent event) {\n                 if (action == MotionEvent.ACTION_DOWN) showContextMenu();\n                 return true;\n             } else if (event.isButtonPressed(MotionEvent.BUTTON_TERTIARY)) {\n-                ClipboardManager clipboard = (ClipboardManager) getContext().getSystemService(Context.CLIPBOARD_SERVICE);\n-                ClipData clipData = clipboard.getPrimaryClip();\n+                ClipboardManager clipboardManager = (ClipboardManager) getContext().getSystemService(Context.CLIPBOARD_SERVICE);\n+                ClipData clipData = clipboardManager.getPrimaryClip();\n                 if (clipData != null) {\n-                    CharSequence paste = clipData.getItemAt(0).coerceToText(getContext());\n-                    if (!TextUtils.isEmpty(paste)) mEmulator.paste(paste.toString());\n+                    ClipData.Item clipItem = clipData.getItemAt(0);\n+                    if (clipItem != null) {\n+                        CharSequence text = clipItem.coerceToText(getContext());\n+                        if (!TextUtils.isEmpty(text)) mEmulator.paste(text.toString());\n+                    }\n                 }\n             } else if (mEmulator.isMouseTrackingActive()) { // BUTTON_PRIMARY.\n                 switch (event.getAction()) {\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/interact/ShareUtils.java b/termux-shared/src/main/java/com/termux/shared/interact/ShareUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/interact/ShareUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/interact/ShareUtils.java\n@@ -12,7 +12,6 @@\n import android.os.Environment;\n \n import androidx.appcompat.app.AppCompatActivity;\n-import androidx.core.content.ContextCompat;\n \n import com.termux.shared.R;\n import com.termux.shared.data.DataUtils;\n@@ -81,27 +80,82 @@ public static void shareText(final Context context, final String subject, final\n         openSystemAppChooser(context, shareTextIntent, DataUtils.isNullOrEmpty(title) ? context.getString(R.string.title_share_with) : title);\n     }\n \n+\n+\n+    /** Wrapper for {@link #copyTextToClipboard(Context, String, String, String)} with `null` `clipDataLabel` and `toastString`. */\n+    public static void copyTextToClipboard(Context context, final String text) {\n+        copyTextToClipboard(context, null, text, null);\n+    }\n+\n+    /** Wrapper for {@link #copyTextToClipboard(Context, String, String, String)} with `null` `clipDataLabel`. */\n+    public static void copyTextToClipboard(Context context, final String text, final String toastString) {\n+        copyTextToClipboard(context, null, text, toastString);\n+    }\n+\n     /**\n-     * Copy the text to clipboard.\n+     * Copy the text to primary clip of the clipboard.\n      *\n      * @param context The context for operations.\n+     * @param clipDataLabel The label to show to the user describing the copied text.\n      * @param text The text to copy.\n      * @param toastString If this is not {@code null} or empty, then a toast is shown if copying to\n      *                    clipboard is successful.\n      */\n-    public static void copyTextToClipboard(final Context context, final String text, final String toastString) {\n+    public static void copyTextToClipboard(Context context, @Nullable final String clipDataLabel,\n+                                           final String text, final String toastString) {\n         if (context == null || text == null) return;\n \n-        final ClipboardManager clipboardManager = ContextCompat.getSystemService(context, ClipboardManager.class);\n+        ClipboardManager clipboardManager = (ClipboardManager) context.getSystemService(Context.CLIPBOARD_SERVICE);\n+        if (clipboardManager == null) return;\n \n-        if (clipboardManager != null) {\n-            clipboardManager.setPrimaryClip(ClipData.newPlainText(null, DataUtils.getTruncatedCommandOutput(text, DataUtils.TRANSACTION_SIZE_LIMIT_IN_BYTES, true, false, false)));\n-            if (toastString != null && !toastString.isEmpty())\n-                Logger.showToast(context, toastString, true);\n-        }\n+        clipboardManager.setPrimaryClip(ClipData.newPlainText(clipDataLabel,\n+            DataUtils.getTruncatedCommandOutput(text, DataUtils.TRANSACTION_SIZE_LIMIT_IN_BYTES,\n+                true, false, false)));\n+\n+        if (toastString != null && !toastString.isEmpty())\n+            Logger.showToast(context, toastString, true);\n     }\n \n+\n+\n     /**\n+     * Wrapper for {@link #getTextFromClipboard(Context, boolean)} that returns primary text {@link String}\n+     * if its set and not empty.\n+     */\n+    @Nullable\n+    public static String getTextStringFromClipboardIfSet(Context context, boolean coerceToText) {\n+        CharSequence textCharSequence = getTextFromClipboard(context, coerceToText);\n+        if (textCharSequence == null) return null;\n+        String textString = textCharSequence.toString();\n+        return !textString.isEmpty() ? textString : null;\n+    }\n+\n+    /**\n+     * Get the text from primary clip of the clipboard.\n+     *\n+     * @param context The context for operations.\n+     * @param coerceToText Whether to call {@link ClipData.Item#coerceToText(Context)} to coerce\n+     *                     non-text data to text.\n+     * @return Returns the {@link CharSequence} of primary text. This will be `null` if failed to get it.\n+     */\n+    @Nullable\n+    public static CharSequence getTextFromClipboard(Context context, boolean coerceToText) {\n+        if (context == null) return null;\n+\n+        ClipboardManager clipboardManager = (ClipboardManager) context.getSystemService(Context.CLIPBOARD_SERVICE);\n+        if (clipboardManager == null) return null;\n+\n+        ClipData clipData = clipboardManager.getPrimaryClip();\n+        if (clipData == null) return null;\n+\n+        ClipData.Item clipItem = clipData.getItemAt(0);\n+        if (clipItem == null) return null;\n+\n+        return coerceToText ? clipItem.coerceToText(context) : clipItem.getText();\n+    }\n+\n+\n+\n      * Open a url.\n      *\n      * @param context The context for operations.",
    "output": "Use `ShareUtils` to copy and paste text and prevent potential `NPE`"
  },
  {
    "input": "diff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalBuffer.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalBuffer.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalBuffer.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalBuffer.java\n@@ -54,7 +54,7 @@ public String getSelectedText(int selX1, int selY1, int selX2, int selY2) {\n     }\n \n     public String getSelectedText(int selX1, int selY1, int selX2, int selY2, boolean joinBackLines) {\n-        return getSelectedText(selX1, selY1, selX2, selY2, true, false);\n+        return getSelectedText(selX1, selY1, selX2, selY2, joinBackLines, false);\n     }\n \n     public String getSelectedText(int selX1, int selY1, int selX2, int selY2, boolean joinBackLines, boolean joinFullLines) {",
    "output": "Fix shared terminal transcript joining back lines"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/terminal/io/TermuxTerminalExtraKeys.java b/app/src/main/java/com/termux/app/terminal/io/TermuxTerminalExtraKeys.java\n--- a/app/src/main/java/com/termux/app/terminal/io/TermuxTerminalExtraKeys.java\n+++ b/app/src/main/java/com/termux/app/terminal/io/TermuxTerminalExtraKeys.java\n@@ -96,6 +96,10 @@ public void onTerminalExtraKeyButtonClick(View view, String key, boolean ctrlDow\n         } else if (\"PASTE\".equals(key)) {\n             if(mTermuxTerminalSessionActivityClient != null)\n                 mTermuxTerminalSessionActivityClient.onPasteTextFromClipboard(null);\n+        }  else if (\"SCROLL\".equals(key)) {\n+            TerminalView terminalView = mTermuxTerminalViewClient.getActivity().getTerminalView();\n+            if (terminalView != null && terminalView.mEmulator != null)\n+                terminalView.mEmulator.toggleAutoScrollDisabled();\n         } else {\n             super.onTerminalExtraKeyButtonClick(view, key, ctrlDown, altDown, shiftDown, fnDown);\n         }\n\ndiff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n@@ -252,6 +252,9 @@ public final class TerminalEmulator {\n      */\n     private int mScrollCounter = 0;\n \n+    /** If automatic scrolling of terminal is disabled */\n+    private boolean mAutoScrollDisabled;\n+\n     private byte mUtf8ToFollow, mUtf8Index;\n     private final byte[] mUtf8InputBuffer = new byte[4];\n     private int mLastEmittedCodePoint = -1;\n@@ -2412,6 +2415,15 @@ public void clearScrollCounter() {\n         mScrollCounter = 0;\n     }\n \n+    public boolean isAutoScrollDisabled() {\n+        return mAutoScrollDisabled;\n+    }\n+\n+    public void toggleAutoScrollDisabled() {\n+        mAutoScrollDisabled = !mAutoScrollDisabled;\n+    }\n+\n+\n     /** Reset terminal state so user can interact with it regardless of present state. */\n     public void reset() {\n         setCursorStyle();\n\ndiff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -409,19 +409,29 @@ protected int computeVerticalScrollOffset() {\n     }\n \n     public void onScreenUpdated() {\n+        onScreenUpdated(false);\n+    }\n+\n+    public void onScreenUpdated(boolean skipScrolling) {\n         if (mEmulator == null) return;\n \n         int rowsInHistory = mEmulator.getScreen().getActiveTranscriptRows();\n         if (mTopRow < -rowsInHistory) mTopRow = -rowsInHistory;\n \n-        boolean skipScrolling = false;\n-        if (isSelectingText()) {\n+        if (isSelectingText() || mEmulator.isAutoScrollDisabled()) {\n+\n             // Do not scroll when selecting text.\n             int rowShift = mEmulator.getScrollCounter();\n             if (-mTopRow + rowShift > rowsInHistory) {\n                 // .. unless we're hitting the end of history transcript, in which\n                 // case we abort text selection and scroll to end.\n-                stopTextSelectionMode();\n+                if (isSelectingText())\n+                    stopTextSelectionMode();\n+\n+                if (mEmulator.isAutoScrollDisabled()) {\n+                    mTopRow = -rowsInHistory;\n+                    skipScrolling = true;\n+                }\n             } else {\n                 skipScrolling = true;\n                 mTopRow -= rowShift;\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/extrakeys/ExtraKeysConstants.java b/termux-shared/src/main/java/com/termux/shared/termux/extrakeys/ExtraKeysConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/extrakeys/ExtraKeysConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/extrakeys/ExtraKeysConstants.java\n@@ -90,6 +90,7 @@ public static class EXTRA_KEY_DISPLAY_MAPS {\n             put(\"DRAWER\", \"☰\"); // U+2630 ☰ TRIGRAM FOR HEAVEN not well known but easy to understand\n             put(\"KEYBOARD\", \"⌨\"); // U+2328 ⌨ KEYBOARD not well known but easy to understand\n             put(\"PASTE\", \"⎘\"); // U+2398\n+            put(\"SCROLL\", \"⇳\"); // U+21F3\n         }};\n \n         public static final ExtraKeyDisplayMap LESS_KNOWN_CHARACTERS_DISPLAY = new ExtraKeyDisplayMap() {{",
    "output": "Add `SCROLL` extra key to toggle auto scrolling of terminal to bottom on terminal text updates and termux activity return"
  },
  {
    "input": "diff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n@@ -126,6 +126,10 @@ public final class TerminalEmulator {\n     private String mTitle;\n     private final Stack<String> mTitleStack = new Stack<>();\n \n+    /** If processing first character of first parameter of {@link #ESC_CSI}. */\n+    private boolean mIsCSIStart;\n+    /** The last character processed of a parameter of {@link #ESC_CSI}. */\n+    private Integer mLastCSIArg;\n \n     /** The cursor position. Between (0,0) and (mRows-1, mColumns-1). */\n     private int mCursorRow, mCursorCol;\n@@ -1386,6 +1390,8 @@ private void doEsc(int b) {\n                 break;\n             case '[':\n                 continueSequence(ESC_CSI);\n+                mIsCSIStart = true;\n+                mLastCSIArg = null;\n                 break;\n             case '=': // DECKPAM\n                 setDecsetinternalBit(DECSET_BIT_APPLICATION_KEYPAD, true);\n@@ -2093,28 +2099,55 @@ private void scrollDownOneLine() {\n         }\n     }\n \n-    /** Process the next ASCII character of a parameter. */\n-    private void parseArg(int b) {\n-        if (b >= '0' && b <= '9') {\n-            if (mArgIndex < mArgs.length) {\n-                int oldValue = mArgs[mArgIndex];\n-                int thisDigit = b - '0';\n-                int value;\n-                if (oldValue >= 0) {\n-                    value = oldValue * 10 + thisDigit;\n-                } else {\n-                    value = thisDigit;\n-                }\n-                mArgs[mArgIndex] = value;\n+    /**\n+     * Process the next ASCII character of a parameter.\n+     *\n+     * Parameter characters modify the action or interpretation of the sequence. You can use up to\n+     * 16 parameters per sequence. You must use the ; character to separate parameters.\n+     * All parameters are unsigned, positive decimal integers, with the most significant\n+     * digit sent first. Any parameter greater than 9999 (decimal) is set to 9999\n+     * (decimal). If you do not specify a value, a 0 value is assumed. A 0 value\n+     * or omitted parameter indicates a default value for the sequence. For most\n+     * sequences, the default value is 1.\n+     *\n+     * https://vt100.net/docs/vt510-rm/chapter4.html#S4.3.3\n+     * */\n+    private void parseArg(int inputByte) {\n+        int[] bytes = new int[]{inputByte};\n+        // Only doing this for ESC_CSI and not for other ESC_CSI_* since they seem to be using their\n+        // own defaults with getArg*() calls, but there may be missed cases\n+        if (mEscapeState == ESC_CSI) {\n+            if ((mIsCSIStart && inputByte == ';') || // If sequence starts with a ; character, like \\033[;m\n+                (!mIsCSIStart && mLastCSIArg != null && mLastCSIArg == ';'  && inputByte == ';')) {  // If sequence contains sequential ; characters, like \\033[;;m\n+                bytes = new int[]{'0', ';'}; // Assume 0 was passed\n             }\n-            continueSequence(mEscapeState);\n-        } else if (b == ';') {\n-            if (mArgIndex < mArgs.length) {\n-                mArgIndex++;\n+        }\n+\n+        mIsCSIStart = false;\n+\n+        for (int b : bytes) {\n+            if (b >= '0' && b <= '9') {\n+                if (mArgIndex < mArgs.length) {\n+                    int oldValue = mArgs[mArgIndex];\n+                    int thisDigit = b - '0';\n+                    int value;\n+                    if (oldValue >= 0) {\n+                        value = oldValue * 10 + thisDigit;\n+                    } else {\n+                        value = thisDigit;\n+                    }\n+                    mArgs[mArgIndex] = value;\n+                }\n+                continueSequence(mEscapeState);\n+            } else if (b == ';') {\n+                if (mArgIndex < mArgs.length) {\n+                    mArgIndex++;\n+                }\n+                continueSequence(mEscapeState);\n+            } else {\n+                unknownSequence(b);\n             }\n-            continueSequence(mEscapeState);\n-        } else {\n-            unknownSequence(b);\n+            mLastCSIArg = b;\n         }\n     }\n \n\ndiff --git a/terminal-emulator/src/test/java/com/termux/terminal/TerminalTest.java b/terminal-emulator/src/test/java/com/termux/terminal/TerminalTest.java\n--- a/terminal-emulator/src/test/java/com/termux/terminal/TerminalTest.java\n+++ b/terminal-emulator/src/test/java/com/termux/terminal/TerminalTest.java\n@@ -151,6 +151,19 @@ public void testSelectGraphics() {\n \t\tassertEquals(TextStyle.COLOR_INDEX_FOREGROUND, mTerminal.mForeColor);\n \t\tassertEquals(TextStyle.COLOR_INDEX_BACKGROUND, mTerminal.mBackColor);\n \n+\t\t// Test CSI resetting to default if sequence starts with ; or has sequential ;;\n+        // Check TerminalEmulator.parseArg()\n+        enterString(\"\\033[31m\\033[m\");\n+        assertEquals(TextStyle.COLOR_INDEX_FOREGROUND, mTerminal.mForeColor);\n+        enterString(\"\\033[31m\\033[;m\");\n+        assertEquals(TextStyle.COLOR_INDEX_FOREGROUND, mTerminal.mForeColor);\n+        enterString(\"\\033[31m\\033[0m\");\n+        assertEquals(TextStyle.COLOR_INDEX_FOREGROUND, mTerminal.mForeColor);\n+        enterString(\"\\033[31m\\033[0;m\");\n+        assertEquals(TextStyle.COLOR_INDEX_FOREGROUND, mTerminal.mForeColor);\n+        enterString(\"\\033[31;;m\");\n+        assertEquals(TextStyle.COLOR_INDEX_FOREGROUND, mTerminal.mForeColor);\n+\n \t\t// 256 colors:\n \t\tenterString(\"\\033[38;5;119m\");\n \t\tassertEquals(119, mTerminal.mForeColor);",
    "output": "Fix CSI parameters parsing like for SGR sequences that start with a `;` or have sequential `;` characters"
  },
  {
    "input": "diff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalColorScheme.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalColorScheme.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalColorScheme.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalColorScheme.java\n@@ -71,6 +71,7 @@ private void reset() {\n \n     public void updateWith(Properties props) {\n         reset();\n+        boolean cursorPropExists = false;\n         for (Map.Entry<Object, Object> entries : props.entrySet()) {\n             String key = (String) entries.getKey();\n             String value = (String) entries.getValue();\n@@ -82,6 +83,7 @@ public void updateWith(Properties props) {\n                 colorIndex = TextStyle.COLOR_INDEX_BACKGROUND;\n             } else if (key.equals(\"cursor\")) {\n                 colorIndex = TextStyle.COLOR_INDEX_CURSOR;\n+                cursorPropExists = true;\n             } else if (key.startsWith(\"color\")) {\n                 try {\n                     colorIndex = Integer.parseInt(key.substring(5));\n@@ -98,6 +100,27 @@ public void updateWith(Properties props) {\n \n             mDefaultColors[colorIndex] = colorValue;\n         }\n+\n+        if (!cursorPropExists)\n+            setCursorColorForBackground();\n+    }\n+\n+    /**\n+     * If the \"cursor\" color is not set by user, we need to decide on the appropriate color that will\n+     * be visible on the current terminal background. White will not be visible on light backgrounds\n+     * and black won't be visible on dark backgrounds. So we find the perceived brightness of the\n+     * background color and if its below the threshold (too dark), we use white cursor and if its\n+     * above (too bright), we use black cursor.\n+     */\n+    public void setCursorColorForBackground() {\n+        int backgroundColor = mDefaultColors[TextStyle.COLOR_INDEX_BACKGROUND];\n+        int brightness = TerminalColors.getPerceivedBrightnessOfColor(backgroundColor);\n+        if (brightness > 0) {\n+            if (brightness < 130)\n+                mDefaultColors[TextStyle.COLOR_INDEX_CURSOR] = 0xffffffff;\n+            else\n+                mDefaultColors[TextStyle.COLOR_INDEX_CURSOR] = 0xff000000;\n+        }\n     }\n \n }\n\ndiff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalColors.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalColors.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalColors.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalColors.java\n@@ -1,5 +1,7 @@\n package com.termux.terminal;\n \n+import android.graphics.Color;\n+\n /** Current terminal colors (if different from default). */\n public final class TerminalColors {\n \n@@ -73,4 +75,22 @@ public void tryParseColor(int intoIndex, String textParameter) {\n         if (c != 0) mCurrentColors[intoIndex] = c;\n     }\n \n+    /**\n+     * Get the perceived brightness of the color based on its RGB components.\n+     *\n+     * https://www.nbdtech.com/Blog/archive/2008/04/27/Calculating-the-Perceived-Brightness-of-a-Color.aspx\n+     * http://alienryderflex.com/hsp.html\n+     *\n+     * @param color The color code int.\n+     * @return Returns value between 0-255.\n+     */\n+    public static int getPerceivedBrightnessOfColor(int color) {\n+        return (int)\n+            Math.floor(Math.sqrt(\n+                Math.pow(Color.red(color), 2) * 0.241 +\n+                    Math.pow(Color.green(color), 2) * 0.691 +\n+                    Math.pow(Color.blue(color), 2) * 0.068\n+            ));\n+    }\n+\n }",
    "output": "Use black or white cursor color based on terminal background instead of always white if colors.properties didn't have cursor color set"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/interact/MessageDialogUtils.java b/termux-shared/src/main/java/com/termux/shared/interact/MessageDialogUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/interact/MessageDialogUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/interact/MessageDialogUtils.java\n@@ -4,11 +4,14 @@\n import android.app.AlertDialog;\n import android.content.Context;\n import android.content.DialogInterface;\n+import android.graphics.Color;\n import android.view.LayoutInflater;\n import android.view.View;\n+import android.widget.Button;\n import android.widget.TextView;\n \n import com.termux.shared.R;\n+import com.termux.shared.logger.Logger;\n \n public class MessageDialogUtils {\n \n@@ -74,7 +77,19 @@ public static void showMessage(Context context, String titleText, String message\n         if (onDismiss != null)\n             builder.setOnDismissListener(onDismiss);\n \n-        builder.show();\n+        AlertDialog dialog = builder.create();\n+\n+        dialog.setOnShowListener(dialogInterface -> {\n+            Logger.logError(\"dialog\");\n+            Button button = dialog.getButton(AlertDialog.BUTTON_POSITIVE);\n+            if (button != null)\n+                button.setTextColor(Color.BLACK);\n+            button = dialog.getButton(AlertDialog.BUTTON_NEGATIVE);\n+            if (button != null)\n+                button.setTextColor(Color.BLACK);\n+        });\n+\n+        dialog.show();\n     }\n \n     public static void exitAppWithErrorMessage(Context context, String titleText, String messageText) {",
    "output": "Fix message dialog button text not showing in day mode due to white text"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/terminal/TermuxTerminalSessionServiceClient.java b/app/src/main/java/com/termux/app/terminal/TermuxTerminalSessionServiceClient.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxTerminalSessionServiceClient.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxTerminalSessionServiceClient.java\n@@ -21,4 +21,11 @@ public TermuxTerminalSessionServiceClient(TermuxService service) {\n         this.mService = service;\n     }\n \n+    @Override\n+    public void setTerminalShellPid(@NonNull TerminalSession terminalSession, int pid) {\n+        TermuxSession termuxSession = mService.getTermuxSessionForTerminalSession(terminalSession);\n+        if (termuxSession != null)\n+            termuxSession.getExecutionCommand().mPid = pid;\n+    }\n+\n }",
    "output": "Fix `ExecutionCommand.pid` not being set for first and background terminal sessions since `TermuxTerminalSessionClientBase` was still being used instead of `TermuxTerminalSessionActivityClient`"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/activities/SettingsActivity.java b/app/src/main/java/com/termux/app/activities/SettingsActivity.java\n--- a/app/src/main/java/com/termux/app/activities/SettingsActivity.java\n+++ b/app/src/main/java/com/termux/app/activities/SettingsActivity.java\n@@ -120,7 +120,7 @@ public void run() {\n \n                             StringBuilder aboutString = new StringBuilder();\n                             aboutString.append(TermuxUtils.getAppInfoMarkdownString(context, TermuxUtils.AppInfoMode.TERMUX_AND_PLUGIN_PACKAGES));\n-                            aboutString.append(\"\\n\\n\").append(AndroidUtils.getDeviceInfoMarkdownString(context));\n+                            aboutString.append(\"\\n\\n\").append(AndroidUtils.getDeviceInfoMarkdownString(context, true));\n                             aboutString.append(\"\\n\\n\").append(TermuxUtils.getImportantLinksMarkdownString(context));\n \n                             String userActionName = UserAction.ABOUT.getName();\n\ndiff --git a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n@@ -755,7 +755,7 @@ public void run() {\n                     reportString.append(\"\\n\\n\").append(TermuxUtils.getAppInfoMarkdownString(mActivity, TermuxUtils.AppInfoMode.TERMUX_PACKAGE));\n                 }\n \n-                reportString.append(\"\\n\\n\").append(AndroidUtils.getDeviceInfoMarkdownString(mActivity));\n+                reportString.append(\"\\n\\n\").append(AndroidUtils.getDeviceInfoMarkdownString(mActivity, true));\n \n                 if (TermuxBootstrap.isAppPackageManagerAPT()) {\n                     String termuxAptInfo = TermuxUtils.geAPTInfoMarkdownString(mActivity);\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/android/AndroidUtils.java b/termux-shared/src/main/java/com/termux/shared/android/AndroidUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/android/AndroidUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/android/AndroidUtils.java\n@@ -9,6 +9,7 @@\n import androidx.annotation.NonNull;\n \n import com.google.common.base.Joiner;\n+import com.termux.shared.R;\n import com.termux.shared.data.DataUtils;\n import com.termux.shared.logger.Logger;\n import com.termux.shared.markdown.MarkdownUtils;\n@@ -50,7 +51,7 @@ public static String getAppInfoMarkdownString(@NonNull final Context context) {\n             AndroidUtils.appendPropertyToMarkdown(markdownString,\"FILES_DIR\", filesDir);\n \n \n-        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.N ) {\n+        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n             Long userId = PackageUtils.getUserIdForPackage(context);\n             if (userId == null || userId != 0)\n                 AndroidUtils.appendPropertyToMarkdown(markdownString, \"USER_ID\", userId);\n@@ -99,13 +100,18 @@ public static String getAppInfoMarkdownString(@NonNull final Context context, @N\n         return markdownString.toString();\n     }\n \n+    public static String getDeviceInfoMarkdownString(@NonNull final Context context) {\n+        return getDeviceInfoMarkdownString(context, false);\n+    }\n+\n     /**\n      * Get a markdown {@link String} for the device info.\n      *\n      * @param context The context for operations.\n+     * @param addPhantomProcessesInfo If phantom processes info should be added on Android >= 12.\n      * @return Returns the markdown {@link String}.\n      */\n-    public static String getDeviceInfoMarkdownString(@NonNull final Context context) {\n+    public static String getDeviceInfoMarkdownString(@NonNull final Context context, boolean addPhantomProcessesInfo) {\n         // Some properties cannot be read with {@link System#getProperty(String)} but can be read\n         // directly by running getprop command\n         Properties systemProperties = getSystemProperties();\n@@ -133,8 +139,16 @@ public static String getDeviceInfoMarkdownString(@NonNull final Context context)\n         appendPropertyToMarkdown(markdownString, \"TAGS\", Build.TAGS);\n \n         // If on Android >= 12\n-        if (Build.VERSION.SDK_INT > Build.VERSION_CODES.R)\n-            appendPropertyToMarkdown(markdownString, \"MONITOR_PHANTOM_PROCS\", FeatureFlagUtils.getFeatureFlagValueString(context, FeatureFlagUtils.SETTINGS_ENABLE_MONITOR_PHANTOM_PROCS).getName());\n+        if (Build.VERSION.SDK_INT > Build.VERSION_CODES.R) {\n+            Integer maxPhantomProcesses = PhantomProcessUtils.getActivityManagerMaxPhantomProcesses(context);\n+            if (maxPhantomProcesses != null)\n+                appendPropertyToMarkdown(markdownString, \"MAX_PHANTOM_PROCESSES\", maxPhantomProcesses);\n+            else\n+                appendLiteralPropertyToMarkdown(markdownString, \"MAX_PHANTOM_PROCESSES\", \"- (*\" + context.getString(R.string.msg_requires_dump_and_package_usage_stats_permissions) + \"*)\");\n+\n+            appendPropertyToMarkdown(markdownString, \"MONITOR_PHANTOM_PROCS\", PhantomProcessUtils.getFeatureFlagMonitorPhantomProcsValueString(context).getName());\n+            appendPropertyToMarkdown(markdownString, \"DEVICE_CONFIG_SYNC_DISABLED\", PhantomProcessUtils.getSettingsGlobalDeviceConfigSyncDisabled(context));\n+        }\n \n         markdownString.append(\"\\n\\n### Hardware\\n\");\n         appendPropertyToMarkdown(markdownString, \"MANUFACTURER\", Build.MANUFACTURER);\n@@ -222,6 +236,14 @@ public static String getPropertyMarkdown(String label, Object value) {\n         return MarkdownUtils.getSingleLineMarkdownStringEntry(label, value, \"-\");\n     }\n \n+    public static void appendLiteralPropertyToMarkdown(StringBuilder markdownString, String label, Object value) {\n+        markdownString.append(\"\\n\").append(getLiteralPropertyMarkdown(label, value));\n+    }\n+\n+    public static String getLiteralPropertyMarkdown(String label, Object value) {\n+        return MarkdownUtils.getLiteralSingleLineMarkdownStringEntry(label, value, \"-\");\n+    }\n+\n \n \n     public static String getCurrentTimeStamp() {\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/markdown/MarkdownUtils.java b/termux-shared/src/main/java/com/termux/shared/markdown/MarkdownUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/markdown/MarkdownUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/markdown/MarkdownUtils.java\n@@ -106,6 +106,10 @@ public static int getMaxConsecutiveBackTicksCount(String string) {\n \n \n \n+    public static String getLiteralSingleLineMarkdownStringEntry(String label, Object object, String def) {\n+        return \"**\" + label + \"**: \" + (object != null ? object.toString() : def) +  \"  \";\n+    }\n+\n     public static String getSingleLineMarkdownStringEntry(String label, Object object, String def) {\n         if (object != null)\n             return \"**\" + label + \"**: \" + getMarkdownCodeForString(object.toString(), false) +  \"  \";\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/crash/TermuxCrashUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/crash/TermuxCrashUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/crash/TermuxCrashUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/crash/TermuxCrashUtils.java\n@@ -324,7 +324,7 @@ public static void sendCrashReportNotification(final Context currentPackageConte\n             reportString.append(\"\\n\\n\").append(TermuxUtils.getAppInfoMarkdownString(currentPackageContext, appInfoMode, currentPackageName));\n \n         if (addDeviceInfo)\n-            reportString.append(\"\\n\\n\").append(AndroidUtils.getDeviceInfoMarkdownString(currentPackageContext));\n+            reportString.append(\"\\n\\n\").append(AndroidUtils.getDeviceInfoMarkdownString(currentPackageContext, true));\n \n         String userActionName = UserAction.CRASH_REPORT.getName();\n \n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/plugins/TermuxPluginUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/plugins/TermuxPluginUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/plugins/TermuxPluginUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/plugins/TermuxPluginUtils.java\n@@ -362,7 +362,7 @@ public static void sendPluginCommandErrorNotification(Context currentPackageCont\n                 callingPackageName != null ? callingPackageName : currentPackageName));\n \n         if (addDeviceInfo)\n-            reportString.append(\"\\n\\n\").append(AndroidUtils.getDeviceInfoMarkdownString(currentPackageContext));\n+            reportString.append(\"\\n\\n\").append(AndroidUtils.getDeviceInfoMarkdownString(currentPackageContext, true));\n \n         String userActionName = UserAction.PLUGIN_EXECUTION_COMMAND.getName();\n ",
    "output": "Add `MAX_PHANTOM_PROCESSES` and `DEVICE_CONFIG_SYNC_DISABLED` value to device info output like shown in Termux About page"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/android/FeatureFlagUtils.java b/termux-shared/src/main/java/com/termux/shared/android/FeatureFlagUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/android/FeatureFlagUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/android/FeatureFlagUtils.java\n@@ -80,19 +80,6 @@ public String getName() {\n \n     public static final String FEATURE_FLAGS_CLASS = \"android.util.FeatureFlagUtils\";\n \n-    /**\n-     * If set to false, then will disable trimming of phantom process and processes using excessive\n-     * CPU. Flag is available on Pixel Android 12L beta 3 and Android 13. Availability on other\n-     * devices will depend on if other vendors merged the 09dcdad5 commit or not in their releases\n-     * and if they actually want to support the flag.\n-     *\n-     * https://github.com/termux/termux-app/issues/2366\n-     * https://issuetracker.google.com/u/1/issues/205156966#comment28\n-     * https://cs.android.com/android/_/android/platform/frameworks/base/+/09dcdad5\n-     * https://github.com/agnostic-apollo/Android-Docs/tree/master/ocs/apps/processes/phantom-cached-and-empty-processes.md\n-     */\n-    public static final String SETTINGS_ENABLE_MONITOR_PHANTOM_PROCS = \"settings_enable_monitor_phantom_procs\";\n-\n     private static final String LOG_TAG = \"FeatureFlagUtils\";\n \n     /**\n@@ -133,6 +120,7 @@ public static Boolean featureFlagExists(@NonNull String feature) {\n      * @param feature The {@link String} name for feature.\n      * @return Returns {@link FeatureFlagValue}.\n      */\n+    @NonNull\n     public static FeatureFlagValue getFeatureFlagValueString(@NonNull Context context, @NonNull String feature) {\n         Boolean featureFlagExists = featureFlagExists(feature);\n         if (featureFlagExists == null) {\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/android/PhantomProcessUtils.java b/termux-shared/src/main/java/com/termux/shared/android/PhantomProcessUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/android/PhantomProcessUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/android/PhantomProcessUtils.java\n@@ -0,0 +1,115 @@\n+package com.termux.shared.android;\n+\n+import android.Manifest;\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.termux.shared.logger.Logger;\n+import com.termux.shared.shell.command.environment.AndroidShellEnvironment;\n+import com.termux.shared.shell.command.ExecutionCommand;\n+import com.termux.shared.shell.command.runner.app.AppShell;\n+\n+/**\n+ * Utils for phantom processes added in android 12.\n+ *\n+ * https://github.com/termux/termux-app/issues/2366\n+ * https://issuetracker.google.com/u/1/issues/205156966#comment28\n+ * https://cs.android.com/android/_/android/platform/frameworks/base/+/09dcdad5\n+ * https://github.com/agnostic-apollo/Android-Docs/tree/master/ocs/apps/processes/phantom-cached-and-empty-processes.md\n+ */\n+public class PhantomProcessUtils {\n+\n+    private static final String LOG_TAG = \"PhantomProcessUtils\";\n+\n+    /**\n+     * If feature flag set to false, then will disable trimming of phantom process and processes using\n+     * excessive CPU. Flag is available on Pixel Android 12L beta 3 and Android 13. Availability on\n+     * other devices will depend on if other vendors merged the 09dcdad5 commit or not in their releases\n+     * and if they actually want to support the flag. Check {@link FeatureFlagUtils} javadocs for\n+     * more details.\n+     */\n+    public static final String FEATURE_FLAG_SETTINGS_ENABLE_MONITOR_PHANTOM_PROCS = \"settings_enable_monitor_phantom_procs\";\n+\n+    /**\n+     * Maximum number of allowed phantom processes. It is also used as the label for the currently\n+     * enforced ActivityManagerConstants MAX_PHANTOM_PROCESSES value in the `dumpsys activity settings`\n+     * output.\n+     *\n+     * https://cs.android.com/android/platform/superproject/+/android-12.0.0_r4:frameworks/base/services/core/java/com/android/server/am/ActivityManagerConstants.java;l=574\n+     * https://cs.android.com/android/platform/superproject/+/android-12.0.0_r4:frameworks/base/services/core/java/com/android/server/am/ActivityManagerConstants.java;l=172\n+     */\n+    public static final String KEY_MAX_PHANTOM_PROCESSES = \"max_phantom_processes\";\n+\n+    /**\n+     * Whether or not syncs (bulk set operations) for DeviceConfig are disabled currently. The value\n+     * is boolean (1 or 0). The value '1' means that DeviceConfig#setProperties(DeviceConfig.Properties)\n+     * will return {@code false}.\n+     *\n+     * https://cs.android.com/android/platform/superproject/+/android-12.0.0_r4:frameworks/base/core/java/android/provider/DeviceConfig.java\n+     * https://cs.android.com/android/platform/superproject/+/android-12.0.0_r4:frameworks/base/packages/SettingsProvider/src/com/android/providers/settings/SettingsProvider.java;l=1186\n+     * https://cs.android.com/android/platform/superproject/+/android-12.0.0_r4:frameworks/base/packages/SettingsProvider/src/com/android/providers/settings/SettingsProvider.java;l=1142\n+     */\n+    public static final String SETTINGS_GLOBAL_DEVICE_CONFIG_SYNC_DISABLED = \"device_config_sync_disabled\";\n+\n+    /**\n+     * Get {@link #FEATURE_FLAG_SETTINGS_ENABLE_MONITOR_PHANTOM_PROCS} feature flag value.\n+     *\n+     * @param context The {@link Context} for operations.\n+     * @return Returns {@link FeatureFlagUtils.FeatureFlagValue}.\n+     */\n+    @NonNull\n+    public static FeatureFlagUtils.FeatureFlagValue getFeatureFlagMonitorPhantomProcsValueString(@NonNull Context context) {\n+        return FeatureFlagUtils.getFeatureFlagValueString(context, FEATURE_FLAG_SETTINGS_ENABLE_MONITOR_PHANTOM_PROCS);\n+    }\n+\n+    /**\n+     * Get currently enforced ActivityManagerConstants MAX_PHANTOM_PROCESSES value, defaults to 32.\n+     * Can be changed by modifying device config activity_manager namespace \"max_phantom_processes\" value.\n+     *\n+     * @param context The {@link Context} for operations.\n+     * @return Returns {@link Integer}.\n+     */\n+    @Nullable\n+    public static Integer getActivityManagerMaxPhantomProcesses(@NonNull Context context) {\n+        if (!PermissionUtils.checkPermissions(context, new String[]{Manifest.permission.DUMP, Manifest.permission.PACKAGE_USAGE_STATS})) {\n+            return null;\n+        }\n+\n+        // Dumpsys logs the currently enforced MAX_PHANTOM_PROCESSES value and not the device config setting.\n+        String script = \"/system/bin/dumpsys activity settings | /system/bin/grep -iE '^[\\t ]+\" + KEY_MAX_PHANTOM_PROCESSES + \"=[0-9]+$' | /system/bin/cut -d = -f2\";\n+        ExecutionCommand executionCommand = new ExecutionCommand(-1, \"/system/bin/sh\", null,\n+            script + \"\\n\", \"/\", ExecutionCommand.Runner.APP_SHELL.getName(), true);\n+        executionCommand.commandLabel = \" ActivityManager \" + KEY_MAX_PHANTOM_PROCESSES + \" Command\";\n+        executionCommand.backgroundCustomLogLevel = Logger.LOG_LEVEL_OFF;\n+        AppShell appShell = AppShell.execute(context, executionCommand, null, new AndroidShellEnvironment(), null, true);\n+        boolean stderrSet = !executionCommand.resultData.stderr.toString().isEmpty();\n+        if (appShell == null || !executionCommand.isSuccessful() || executionCommand.resultData.exitCode != 0 || stderrSet) {\n+            Logger.logErrorExtended(LOG_TAG, executionCommand.toString());\n+            return null;\n+        }\n+\n+        try {\n+            return Integer.parseInt(executionCommand.resultData.stdout.toString().trim());\n+        } catch (NumberFormatException e) {\n+            Logger.logStackTraceWithMessage(LOG_TAG, \"The \" + executionCommand.commandLabel + \" did not return a valid integer\", e);\n+            Logger.logErrorExtended(LOG_TAG, executionCommand.toString());\n+        }\n+\n+        return null;\n+    }\n+\n+    /**\n+     * Get {@link #SETTINGS_GLOBAL_DEVICE_CONFIG_SYNC_DISABLED} settings value.\n+     *\n+     * @param context The {@link Context} for operations.\n+     * @return Returns {@link Integer}.\n+     */\n+    @Nullable\n+    public static Integer getSettingsGlobalDeviceConfigSyncDisabled(@NonNull Context context) {\n+        return (Integer) SettingsProviderUtils.getSettingsValue(context, SettingsProviderUtils.SettingNamespace.GLOBAL,\n+            SettingsProviderUtils.SettingType.INT, SETTINGS_GLOBAL_DEVICE_CONFIG_SYNC_DISABLED, null);\n+    }\n+\n+}",
    "output": "Add `PhantomProcessUtils` to get phantom processes related settings values"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/android/SettingsProviderUtils.java b/termux-shared/src/main/java/com/termux/shared/android/SettingsProviderUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/android/SettingsProviderUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/android/SettingsProviderUtils.java\n@@ -0,0 +1,99 @@\n+package com.termux.shared.android;\n+\n+import android.content.Context;\n+import android.provider.Settings;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.termux.shared.logger.Logger;\n+\n+public class SettingsProviderUtils {\n+\n+    private static final String LOG_TAG = \"SettingsProviderUtils\";\n+\n+    /** The namespaces for {@link Settings} provider. */\n+    public enum SettingNamespace {\n+        /** The {@link Settings.Global} namespace */\n+        GLOBAL,\n+\n+        /** The {@link Settings.Secure} namespace */\n+        SECURE,\n+\n+        /** The {@link Settings.System} namespace */\n+        SYSTEM\n+    }\n+\n+    /** The type of values for {@link Settings} provider. */\n+    public enum SettingType {\n+        FLOAT,\n+        INT,\n+        LONG,\n+        STRING,\n+        URI\n+    }\n+\n+    /**\n+     * Get settings key value from {@link SettingNamespace} namespace and of {@link SettingType} type.\n+     *\n+     * @param context The {@link Context} for operations.\n+     * @param namespace The {@link SettingNamespace} in which to get key value from.\n+     * @param type The {@link SettingType} for the key.\n+     * @param key The {@link String} name for key.\n+     * @param def The {@link Object} default value for key.\n+     * @return Returns the key value. This will be {@code null} if an exception is raised.\n+     */\n+    @Nullable\n+    public static Object getSettingsValue(@NonNull Context context, @NonNull SettingNamespace namespace,\n+                                          @NonNull SettingType type, @NonNull String key, @Nullable Object def) {\n+        try {\n+            switch (namespace) {\n+                case GLOBAL:\n+                    switch (type) {\n+                        case FLOAT:\n+                            return Settings.Global.getFloat(context.getContentResolver(), key);\n+                        case INT:\n+                            return Settings.Global.getInt(context.getContentResolver(), key);\n+                        case LONG:\n+                            return Settings.Global.getLong(context.getContentResolver(), key);\n+                        case STRING:\n+                            return Settings.Global.getString(context.getContentResolver(), key);\n+                        case URI:\n+                            return Settings.Global.getUriFor(key);\n+                    }\n+                case SECURE:\n+                    switch (type) {\n+                        case FLOAT:\n+                            return Settings.Secure.getFloat(context.getContentResolver(), key);\n+                        case INT:\n+                            return Settings.Secure.getInt(context.getContentResolver(), key);\n+                        case LONG:\n+                            return Settings.Secure.getLong(context.getContentResolver(), key);\n+                        case STRING:\n+                            return Settings.Secure.getString(context.getContentResolver(), key);\n+                        case URI:\n+                            return Settings.Secure.getUriFor(key);\n+                    }\n+                case SYSTEM:\n+                    switch (type) {\n+                        case FLOAT:\n+                            return Settings.System.getFloat(context.getContentResolver(), key);\n+                        case INT:\n+                            return Settings.System.getInt(context.getContentResolver(), key);\n+                        case LONG:\n+                            return Settings.System.getLong(context.getContentResolver(), key);\n+                        case STRING:\n+                            return Settings.System.getString(context.getContentResolver(), key);\n+                        case URI:\n+                            return Settings.System.getUriFor(key);\n+                    }\n+            }\n+        } catch (Settings.SettingNotFoundException e) {\n+            // Ignore\n+        } catch (Exception e) {\n+            Logger.logError(LOG_TAG, \"Failed to get \\\"\" + key + \"\\\" key value from settings \\\"\" + namespace.name() + \"\\\" namespace of type \\\"\" + type.name() + \"\\\"\");\n+        }\n+        return def;\n+    }\n+\n+}",
    "output": "Add `SettingsProviderUtils` to get `Setting` global, secure and system namespace values"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/shell/command/environment/UnixShellEnvironment.java b/termux-shared/src/main/java/com/termux/shared/shell/command/environment/UnixShellEnvironment.java\n--- a/termux-shared/src/main/java/com/termux/shared/shell/command/environment/UnixShellEnvironment.java\n+++ b/termux-shared/src/main/java/com/termux/shared/shell/command/environment/UnixShellEnvironment.java\n@@ -52,6 +52,9 @@ public abstract class UnixShellEnvironment implements IShellEnvironment {\n     public static final String ENV_TMPDIR = \"TMPDIR\";\n \n \n+    /** Names for common/supported login shell binaries. */\n+    public static final String[] LOGIN_SHELL_BINARIES = new String[]{\"login\", \"bash\", \"zsh\", \"fish\", \"sh\"};\n+\n \n \n     @NonNull\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/shell/command/runner/terminal/TermuxSession.java b/termux-shared/src/main/java/com/termux/shared/termux/shell/command/runner/terminal/TermuxSession.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/shell/command/runner/terminal/TermuxSession.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/shell/command/runner/terminal/TermuxSession.java\n@@ -93,7 +93,7 @@ public static TermuxSession execute(@NonNull final Context currentPackageContext\n         boolean isLoginShell = false;\n         if (executionCommand.executable == null) {\n             if (!executionCommand.isFailsafe) {\n-                for (String shellBinary : new String[]{\"login\", \"bash\", \"zsh\"}) {\n+                for (String shellBinary : UnixShellEnvironment.LOGIN_SHELL_BINARIES) {\n                     File shellFile = new File(defaultBinPath, shellBinary);\n                     if (shellFile.canExecute()) {\n                         executionCommand.executable = shellFile.getAbsolutePath();",
    "output": "Add `UnixShellEnvironment.LOGIN_SHELL_BINARIES` variable for common/supported login shell binaries searched and add `fish` and `sh` shell as additional backups"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java b/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n@@ -991,7 +991,7 @@ public static Error copyOrMoveFile(String label, final String srcFilePath, final\n                     return FileUtilsErrno.ERRNO_CANNOT_OVERWRITE_A_DIFFERENT_FILE_TYPE.getError(label + \"source file\", mode.toLowerCase(), srcFilePath, destFilePath, destFileType.getName(), srcFileType.getName());\n \n                 // Delete the destination file\n-                error = deleteFile(label + \"destination file\", destFilePath, true);\n+                error = deleteFile(label + \"destination\", destFilePath, true);\n                 if (error != null)\n                     return error;\n             }\n@@ -1038,7 +1038,7 @@ public static Error copyOrMoveFile(String label, final String srcFilePath, final\n                     } else {\n                         // read the target for the source file and create a symlink at dest\n                         // source file metadata will be lost\n-                        error = createSymlinkFile(label + \"dest file\", Os.readlink(srcFilePath), destFilePath);\n+                        error = createSymlinkFile(label + \"dest\", Os.readlink(srcFilePath), destFilePath);\n                         if (error != null)\n                             return error;\n                     }\n@@ -1055,7 +1055,7 @@ public static Error copyOrMoveFile(String label, final String srcFilePath, final\n             // If source file had to be moved\n             if (moveFile) {\n                 // Delete the source file since copying would have succeeded\n-                error = deleteFile(label + \"source file\", srcFilePath, true);\n+                error = deleteFile(label + \"source\", srcFilePath, true);\n                 if (error != null)\n                     return error;\n             }",
    "output": "Fix duplicate logging of `file` word in `FileUtils.copyOrMoveFile()`"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/android/AndroidUtils.java b/termux-shared/src/main/java/com/termux/shared/android/AndroidUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/android/AndroidUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/android/AndroidUtils.java\n@@ -9,6 +9,7 @@\n import androidx.annotation.NonNull;\n \n import com.google.common.base.Joiner;\n+import com.termux.shared.data.DataUtils;\n import com.termux.shared.logger.Logger;\n import com.termux.shared.markdown.MarkdownUtils;\n \n@@ -84,9 +85,17 @@ public static String getAppInfoMarkdownString(@NonNull final Context context, @N\n         AndroidUtils.appendPropertyToMarkdown(markdownString,\"IS_DEBUGGABLE_BUILD\", PackageUtils.isAppForPackageADebuggableBuild(applicationInfo));\n \n         if (PackageUtils.isAppInstalledOnExternalStorage(applicationInfo)) {\n+            AndroidUtils.appendPropertyToMarkdown(markdownString,\"APK_PATH\", PackageUtils.getBaseAPKPathForPackage(applicationInfo));\n             AndroidUtils.appendPropertyToMarkdown(markdownString,\"IS_INSTALLED_ON_EXTERNAL_STORAGE\", true);\n         }\n \n+        AndroidUtils.appendPropertyToMarkdown(markdownString,\"SE_PROCESS_CONTEXT\", SELinuxUtils.getContext());\n+        AndroidUtils.appendPropertyToMarkdown(markdownString,\"SE_FILE_CONTEXT\", SELinuxUtils.getFileContext(context.getFilesDir().getAbsolutePath()));\n+\n+        String seInfoUser = PackageUtils.getApplicationInfoSeInfoUserForPackage(applicationInfo);\n+        AndroidUtils.appendPropertyToMarkdown(markdownString,\"SE_INFO\", PackageUtils.getApplicationInfoSeInfoForPackage(applicationInfo) +\n+            (DataUtils.isNullOrEmpty(seInfoUser) ? \"\" : seInfoUser));\n+\n         return markdownString.toString();\n     }\n ",
    "output": "Add package `APK_PATH`, `SE_PROCESS_CONTEXT`, `SE_FILE_CONTEXT` and `SE_INFO` when generating app info markdown string"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/android/PackageUtils.java b/termux-shared/src/main/java/com/termux/shared/android/PackageUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/android/PackageUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/android/PackageUtils.java\n@@ -375,6 +375,28 @@ public static int getTargetSDKForPackage(@NonNull final ApplicationInfo applicat\n \n \n \n+    /**\n+     * Get the base apk path for the package associated with the {@code context}.\n+     *\n+     * @param context The {@link Context} for the package.\n+     * @return Returns the base apk path.\n+     */\n+    public static String getBaseAPKPathForPackage(@NonNull final Context context) {\n+        return getBaseAPKPathForPackage(context.getApplicationInfo());\n+    }\n+\n+    /**\n+     * Get the base apk path for the package associated with the {@code applicationInfo}.\n+     *\n+     * @param applicationInfo The {@link ApplicationInfo} for the package.\n+     * @return Returns the base apk path.\n+     */\n+    public static String getBaseAPKPathForPackage(@NonNull final ApplicationInfo applicationInfo) {\n+        return applicationInfo.publicSourceDir;\n+    }\n+\n+\n+\n     /**\n      * Check if the app associated with the {@code context} has {@link ApplicationInfo#FLAG_DEBUGGABLE}\n      * set.",
    "output": "Add functions to `PackageUtils` to get base APK path of package"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/android/PackageUtils.java b/termux-shared/src/main/java/com/termux/shared/android/PackageUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/android/PackageUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/android/PackageUtils.java\n@@ -196,6 +196,55 @@ public static Integer getApplicationInfoPrivateFlagsForPackage(@NonNull final Ap\n         }\n     }\n \n+    /**\n+     * Get the {@code seInfo} {@link Field} of the {@link ApplicationInfo} class.\n+     *\n+     * String retrieved from the seinfo tag found in selinux policy. This value can be set through\n+     * the mac_permissions.xml policy construct. This value is used for setting an SELinux security\n+     * context on the process as well as its data directory.\n+     *\n+     * https://cs.android.com/android/platform/superproject/+/android-7.1.0_r1:frameworks/base/core/java/android/content/pm/ApplicationInfo.java;l=609\n+     * https://cs.android.com/android/platform/superproject/+/android-12.0.0_r32:frameworks/base/core/java/android/content/pm/ApplicationInfo.java;l=981\n+     * https://cs.android.com/android/platform/superproject/+/android-7.0.0_r1:frameworks/base/services/core/java/com/android/server/pm/SELinuxMMAC.java;l=282\n+     * https://cs.android.com/android/platform/superproject/+/android-12.0.0_r32:frameworks/base/services/core/java/com/android/server/pm/SELinuxMMAC.java;l=375\n+     * https://cs.android.com/android/_/android/platform/frameworks/base/+/be0b8896d1bc385d4c8fb54c21929745935dcbea\n+     *\n+     * @param applicationInfo The {@link ApplicationInfo} for the package.\n+     * @return Returns the selinux info or {@code null} if an exception was raised.\n+     */\n+    @Nullable\n+    public static String getApplicationInfoSeInfoForPackage(@NonNull final ApplicationInfo applicationInfo) {\n+        ReflectionUtils.bypassHiddenAPIReflectionRestrictions();\n+        try {\n+            return (String) ReflectionUtils.invokeField(ApplicationInfo.class, Build.VERSION.SDK_INT < Build.VERSION_CODES.O ? \"seinfo\" : \"seInfo\", applicationInfo).value;\n+        } catch (Exception e) {\n+            // ClassCastException may be thrown\n+            Logger.logStackTraceWithMessage(LOG_TAG, \"Failed to get seInfo field value for ApplicationInfo class\", e);\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Get the {@code seInfoUser} {@link Field} of the {@link ApplicationInfo} class.\n+     *\n+     * Also check {@link #getApplicationInfoSeInfoForPackage(ApplicationInfo)}.\n+     *\n+     * @param applicationInfo The {@link ApplicationInfo} for the package.\n+     * @return Returns the selinux info user or {@code null} if an exception was raised.\n+     */\n+    @Nullable\n+    public static String getApplicationInfoSeInfoUserForPackage(@NonNull final ApplicationInfo applicationInfo) {\n+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) return null;\n+        ReflectionUtils.bypassHiddenAPIReflectionRestrictions();\n+        try {\n+            return (String) ReflectionUtils.invokeField(ApplicationInfo.class, \"seInfoUser\", applicationInfo).value;\n+        } catch (Exception e) {\n+            // ClassCastException may be thrown\n+            Logger.logStackTraceWithMessage(LOG_TAG, \"Failed to get seInfoUser field value for ApplicationInfo class\", e);\n+            return null;\n+        }\n+    }\n+\n     /**\n      * Get the {@code privateFlags} {@link Field} of the {@link ApplicationInfo} class.\n      *",
    "output": "Add functions to `PackageUtils` to get `seInfo` and `seInfoUser` of package"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/android/SELinuxUtils.java b/termux-shared/src/main/java/com/termux/shared/android/SELinuxUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/android/SELinuxUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/android/SELinuxUtils.java\n@@ -0,0 +1,96 @@\n+package com.termux.shared.android;\n+\n+import android.annotation.SuppressLint;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.termux.shared.logger.Logger;\n+import com.termux.shared.reflection.ReflectionUtils;\n+\n+import java.lang.reflect.Method;\n+\n+public class SELinuxUtils {\n+\n+    public static final String ANDROID_OS_SELINUX_CLASS = \"android.os.SELinux\";\n+\n+    private static final String LOG_TAG = \"SELinuxUtils\";\n+\n+    /**\n+     * Gets the security context of the current process.\n+     *\n+     * @return Returns a {@link String} representing the security context of the current process.\n+     * This will be {@code null} if an exception is raised.\n+     */\n+    @Nullable\n+    public static String getContext() {\n+        ReflectionUtils.bypassHiddenAPIReflectionRestrictions();\n+        String methodName = \"getContext\";\n+        try {\n+            @SuppressLint(\"PrivateApi\") Class<?> clazz = Class.forName(ANDROID_OS_SELINUX_CLASS);\n+            Method method = ReflectionUtils.getDeclaredMethod(clazz, methodName);\n+            if (method == null) {\n+                Logger.logError(LOG_TAG, \"Failed to get \" + methodName + \"() method of \" + ANDROID_OS_SELINUX_CLASS + \" class\");\n+                return null;\n+            }\n+\n+            return (String) ReflectionUtils.invokeMethod(method, null).value;\n+        } catch (Exception e) {\n+            Logger.logStackTraceWithMessage(LOG_TAG, \"Failed to call \" + methodName + \"() method of \" + ANDROID_OS_SELINUX_CLASS + \" class\", e);\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Get the security context of a given process id.\n+     *\n+     * @param pid The pid of process.\n+     * @return Returns a {@link String} representing the security context of the given pid.\n+     * This will be {@code null} if an exception is raised.\n+     */\n+    @Nullable\n+    public static String getPidContext(int pid) {\n+        ReflectionUtils.bypassHiddenAPIReflectionRestrictions();\n+        String methodName = \"getPidContext\";\n+        try {\n+            @SuppressLint(\"PrivateApi\") Class<?> clazz = Class.forName(ANDROID_OS_SELINUX_CLASS);\n+            Method method = ReflectionUtils.getDeclaredMethod(clazz, methodName, int.class);\n+            if (method == null) {\n+                Logger.logError(LOG_TAG, \"Failed to get \" + methodName + \"() method of \" + ANDROID_OS_SELINUX_CLASS + \" class\");\n+                return null;\n+            }\n+\n+            return (String) ReflectionUtils.invokeMethod(method, null, pid).value;\n+        } catch (Exception e) {\n+            Logger.logStackTraceWithMessage(LOG_TAG, \"Failed to call \" + methodName + \"() method of \" + ANDROID_OS_SELINUX_CLASS + \" class\", e);\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Get the security context of a file object.\n+     *\n+     * @param path The pathname of the file object.\n+     * @return Returns a {@link String} representing the security context of the file.\n+     * This will be {@code null} if an exception is raised.\n+     */\n+    @Nullable\n+    public static String getFileContext(@NonNull String path) {\n+        ReflectionUtils.bypassHiddenAPIReflectionRestrictions();\n+        String methodName = \"getFileContext\";\n+        try {\n+            @SuppressLint(\"PrivateApi\") Class<?> clazz = Class.forName(ANDROID_OS_SELINUX_CLASS);\n+            Method method = ReflectionUtils.getDeclaredMethod(clazz, methodName, String.class);\n+            if (method == null) {\n+                Logger.logError(LOG_TAG, \"Failed to get \" + methodName + \"() method of \" + ANDROID_OS_SELINUX_CLASS + \" class\");\n+                return null;\n+            }\n+\n+            return (String) ReflectionUtils.invokeMethod(method, null, path).value;\n+        } catch (Exception e) {\n+            Logger.logStackTraceWithMessage(LOG_TAG, \"Failed to call \" + methodName + \"() method of \" + ANDROID_OS_SELINUX_CLASS + \" class\", e);\n+            return null;\n+        }\n+    }\n+\n+}",
    "output": "Add `SELinuxUtils` to get process and file paths security contexts"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n@@ -11,7 +11,7 @@\n import java.util.List;\n \n /*\n- * Version: v0.46.0\n+ * Version: v0.47.0\n  * SPDX-License-Identifier: MIT\n  *\n  * Changelog\n@@ -257,6 +257,10 @@\n  *          `TERMUX_APP.RUN_COMMAND_SERVICE.EXTRA_SESSION_NAME` to `*.EXTRA_SHELL_NAME`,\n  *          `TERMUX_APP.TERMUX_SERVICE.EXTRA_SESSION_CREATE_MODE` to `*.EXTRA_SHELL_CREATE_MODE` and\n  *          `TERMUX_APP.RUN_COMMAND_SERVICE.EXTRA_SESSION_CREATE_MODE` to `*.EXTRA_SHELL_CREATE_MODE`.\n+ *\n+ * - 0.47.0 (2022-06-04)\n+ *      - Added `TERMUX_SITE` and `TERMUX_SITE_URL`.\n+ *      - Changed `TERMUX_DONATE_URL`.\n  */\n \n /**\n@@ -547,6 +551,12 @@ public final class TermuxConstants {\n      * Termux miscellaneous urls.\n      */\n \n+    /** Termux Site */\n+    public static final String TERMUX_SITE = TERMUX_APP_NAME + \" Site\"; // Default: \"Termux Site\"\n+\n+    /** Termux Site url */\n+    public static final String TERMUX_SITE_URL = \"https://termux.dev\"; // Default: \"https://termux.dev\"\n+\n     /** Termux Wiki */\n     public static final String TERMUX_WIKI = TERMUX_APP_NAME + \" Wiki\"; // Default: \"Termux Wiki\"\n \n@@ -575,7 +585,7 @@ public final class TermuxConstants {\n \n \n     /** Termux donate url */\n-    public static final String TERMUX_DONATE_URL = TERMUX_PACKAGES_GITHUB_REPO_URL + \"/wiki/Donate\"; // Default: \"https://github.com/termux/termux-packages/wiki/Donate\"\n+    public static final String TERMUX_DONATE_URL = TERMUX_SITE_URL + \"/donate\"; // Default: \"https://termux.dev/donate\"\n \n \n ",
    "output": "Add termux site url and change donate url to https://termux.dev/donate"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/android/PackageUtils.java b/termux-shared/src/main/java/com/termux/shared/android/PackageUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/android/PackageUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/android/PackageUtils.java\n@@ -31,18 +31,31 @@ public class PackageUtils {\n     private static final String LOG_TAG = \"PackageUtils\";\n \n     /**\n-     * Get the {@link Context} for the package name.\n+     * Get the {@link Context} for the package name with {@link Context#CONTEXT_RESTRICTED} flags.\n      *\n      * @param context The {@link Context} to use to get the {@link Context} of the {@code packageName}.\n      * @param packageName The package name whose {@link Context} to get.\n      * @return Returns the {@link Context}. This will {@code null} if an exception is raised.\n      */\n     @Nullable\n     public static Context getContextForPackage(@NonNull final Context context, String packageName) {\n+       return getContextForPackage(context, packageName, Context.CONTEXT_RESTRICTED);\n+    }\n+\n+    /**\n+     * Get the {@link Context} for the package name.\n+     *\n+     * @param context The {@link Context} to use to get the {@link Context} of the {@code packageName}.\n+     * @param packageName The package name whose {@link Context} to get.\n+     * @param flags The flags for {@link Context} type.\n+     * @return Returns the {@link Context}. This will {@code null} if an exception is raised.\n+     */\n+    @Nullable\n+    public static Context getContextForPackage(@NonNull final Context context, String packageName, int flags) {\n         try {\n-            return context.createPackageContext(packageName, Context.CONTEXT_RESTRICTED);\n+            return context.createPackageContext(packageName, flags);\n         } catch (Exception e) {\n-            Logger.logVerbose(LOG_TAG, \"Failed to get \\\"\" + packageName + \"\\\" package context: \" + e.getMessage());\n+            Logger.logVerbose(LOG_TAG, \"Failed to get \\\"\" + packageName + \"\\\" package context with flags \" + flags + \": \" + e.getMessage());\n             return null;\n         }\n     }\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n@@ -50,7 +50,8 @@ public enum AppInfoMode {\n     private static final String LOG_TAG = \"TermuxUtils\";\n \n     /**\n-     * Get the {@link Context} for {@link TermuxConstants#TERMUX_PACKAGE_NAME} package.\n+     * Get the {@link Context} for {@link TermuxConstants#TERMUX_PACKAGE_NAME} package with the\n+     * {@link Context#CONTEXT_RESTRICTED} flag.\n      *\n      * @param context The {@link Context} to use to get the {@link Context} of the package.\n      * @return Returns the {@link Context}. This will {@code null} if an exception is raised.\n@@ -59,6 +60,17 @@ public static Context getTermuxPackageContext(@NonNull Context context) {\n         return PackageUtils.getContextForPackage(context, TermuxConstants.TERMUX_PACKAGE_NAME);\n     }\n \n+    /**\n+     * Get the {@link Context} for {@link TermuxConstants#TERMUX_PACKAGE_NAME} package with the\n+     * {@link Context#CONTEXT_INCLUDE_CODE} flag.\n+     *\n+     * @param context The {@link Context} to use to get the {@link Context} of the package.\n+     * @return Returns the {@link Context}. This will {@code null} if an exception is raised.\n+     */\n+    public static Context getTermuxPackageContextWithCode(@NonNull Context context) {\n+        return PackageUtils.getContextForPackage(context, TermuxConstants.TERMUX_PACKAGE_NAME, Context.CONTEXT_INCLUDE_CODE);\n+    }\n+\n     /**\n      * Get the {@link Context} for {@link TermuxConstants#TERMUX_API_PACKAGE_NAME} package.\n      *",
    "output": "Add support to get termux app package context with code classloader for plugin usage"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n@@ -11,7 +11,7 @@\n import java.util.List;\n \n /*\n- * Version: v0.43.0\n+ * Version: v0.44.0\n  * SPDX-License-Identifier: MIT\n  *\n  * Changelog\n@@ -245,6 +245,9 @@\n  *\n  * - 0.43.0 (2022-05-29)\n  *      - Changed `TERMUX_SUPPORT_EMAIL_URL` to support@termux.dev.\n+ *\n+ * - 0.44.0 (2022-05-29)\n+ *      - Changed `TERMUX_APP.APPS_DIR_PATH` basename from `termux-app` to `com.termux`.\n  */\n \n /**\n@@ -896,10 +899,10 @@ public final class TermuxConstants {\n     public static final class TERMUX_APP {\n \n         /** Termux apps directory path */\n-        public static final String APPS_DIR_PATH = TERMUX_APPS_DIR_PATH + \"/termux-app\"; // Default: \"/data/data/com.termux/files/apps/termux-app\"\n+        public static final String APPS_DIR_PATH = TERMUX_APPS_DIR_PATH + \"/\" + TERMUX_PACKAGE_NAME; // Default: \"/data/data/com.termux/files/apps/com.termux\"\n \n         /** termux-am socket file path */\n-        public static final String TERMUX_AM_SOCKET_FILE_PATH = APPS_DIR_PATH + \"/termux-am/am.sock\"; // Default: \"/data/data/com.termux/files/apps/termux-app/termux-am/am.sock\"\n+        public static final String TERMUX_AM_SOCKET_FILE_PATH = APPS_DIR_PATH + \"/termux-am/am.sock\"; // Default: \"/data/data/com.termux/files/apps/com.termux/termux-am/am.sock\"\n \n \n         /** Termux app core activity name. */",
    "output": "Change `TERMUX_APP.APPS_DIR_PATH` basename from `termux-app` to `com.termux`"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/android/PermissionUtils.java b/termux-shared/src/main/java/com/termux/shared/android/PermissionUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/android/PermissionUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/android/PermissionUtils.java\n@@ -357,6 +357,11 @@ public static Error requestManageStorageExternalPermission(@NonNull Context cont\n         intent.addCategory(\"android.intent.category.DEFAULT\");\n         intent.setData(Uri.parse(\"package:\" + context.getPackageName()));\n \n+        // Flag must not be passed for activity contexts, otherwise onActivityResult() will not be called with permission grant result.\n+        // Flag must be passed for non-activity contexts like services, otherwise \"Calling startActivity() from outside of an Activity context requires the FLAG_ACTIVITY_NEW_TASK flag\" exception will be raised.\n+        if (!(context instanceof Activity))\n+            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n+\n         Error error;\n         if (requestCode >=0)\n             error = ActivityUtils.startActivityForResult(context, requestCode, intent, true, false);\n@@ -474,6 +479,11 @@ public static Error requestDisplayOverOtherAppsPermission(@NonNull Context conte\n         Intent intent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION);\n         intent.setData(Uri.parse(\"package:\" + context.getPackageName()));\n \n+        // Flag must not be passed for activity contexts, otherwise onActivityResult() will not be called with permission grant result.\n+        // Flag must be passed for non-activity contexts like services, otherwise \"Calling startActivity() from outside of an Activity context requires the FLAG_ACTIVITY_NEW_TASK flag\" exception will be raised.\n+        if (!(context instanceof Activity))\n+            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n+\n         if (requestCode >=0)\n             return ActivityUtils.startActivityForResult(context, requestCode, intent);\n         else\n@@ -549,6 +559,11 @@ public static Error requestDisableBatteryOptimizations(@NonNull Context context,\n         Intent intent = new Intent(Settings.ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS);\n         intent.setData(Uri.parse(\"package:\" + context.getPackageName()));\n \n+        // Flag must not be passed for activity contexts, otherwise onActivityResult() will not be called with permission grant result.\n+        // Flag must be passed for non-activity contexts like services, otherwise \"Calling startActivity() from outside of an Activity context requires the FLAG_ACTIVITY_NEW_TASK flag\" exception will be raised.\n+        if (!(context instanceof Activity))\n+            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n+\n         if (requestCode >=0)\n             return ActivityUtils.startActivityForResult(context, requestCode, intent);\n         else",
    "output": "Fix `Settings.ACTION_*` permission requests for non-activity contexts"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n@@ -11,7 +11,7 @@\n import java.util.List;\n \n /*\n- * Version: v0.42.0\n+ * Version: v0.43.0\n  * SPDX-License-Identifier: MIT\n  *\n  * Changelog\n@@ -242,6 +242,9 @@\n  *\n  * - 0.42.0 (2022-04-29)\n  *      - Added `APK_RELEASE_TERMUX_DEVS` and `APK_RELEASE_TERMUX_DEVS_SIGNING_CERTIFICATE_SHA256_DIGEST`.\n+ *\n+ * - 0.43.0 (2022-05-29)\n+ *      - Changed `TERMUX_SUPPORT_EMAIL_URL` to support@termux.dev.\n  */\n \n /**\n@@ -546,10 +549,10 @@ public final class TermuxConstants {\n \n \n     /** Termux support email url */\n-    public static final String TERMUX_SUPPORT_EMAIL_URL = \"termuxreports@groups.io\"; // Default: \"termuxreports@groups.io\"\n+    public static final String TERMUX_SUPPORT_EMAIL_URL = \"support@termux.dev\"; // Default: \"support@termux.dev\"\n \n     /** Termux support email mailto url */\n-    public static final String TERMUX_SUPPORT_EMAIL_MAILTO_URL = \"mailto:\" + TERMUX_SUPPORT_EMAIL_URL; // Default: \"mailto:termuxreports@groups.io\"\n+    public static final String TERMUX_SUPPORT_EMAIL_MAILTO_URL = \"mailto:\" + TERMUX_SUPPORT_EMAIL_URL; // Default: \"mailto:support@termux.dev\"\n \n \n     /** Termux Reddit subreddit */",
    "output": "Change termux support email from termuxreports@groups.io to support@termux.dev"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n@@ -11,7 +11,7 @@\n import java.util.List;\n \n /*\n- * Version: v0.41.0\n+ * Version: v0.42.0\n  * SPDX-License-Identifier: MIT\n  *\n  * Changelog\n@@ -239,6 +239,9 @@\n  *\n  * - 0.41.0 (2022-04-17)\n  *      - Added `TERMUX_APP.TERMUX_AM_SOCKET_FILE_PATH`.\n+ *\n+ * - 0.42.0 (2022-04-29)\n+ *      - Added `APK_RELEASE_TERMUX_DEVS` and `APK_RELEASE_TERMUX_DEVS_SIGNING_CERTIFICATE_SHA256_DIGEST`.\n  */\n \n /**\n@@ -450,6 +453,12 @@ public final class TermuxConstants {\n     /** Google Play Store APK release signing certificate SHA-256 digest */\n     public static final String APK_RELEASE_GOOGLE_PLAYSTORE_SIGNING_CERTIFICATE_SHA256_DIGEST = \"738F0A30A04D3C8A1BE304AF18D0779BCF3EA88FB60808F657A3521861C2EBF9\"; // Default: \"738F0A30A04D3C8A1BE304AF18D0779BCF3EA88FB60808F657A3521861C2EBF9\"\n \n+    /** Termux Devs APK release */\n+    public static final String APK_RELEASE_TERMUX_DEVS = \"Termux Devs\"; // Default: \"Termux Devs\"\n+\n+    /** Termux Devs APK release signing certificate SHA-256 digest */\n+    public static final String APK_RELEASE_TERMUX_DEVS_SIGNING_CERTIFICATE_SHA256_DIGEST = \"F7A038EB551F1BE8FDF388686B784ABAB4552A5D82DF423E3D8F1B5CBE1C69AE\"; // Default: \"F7A038EB551F1BE8FDF388686B784ABAB4552A5D82DF423E3D8F1B5CBE1C69AE\"\n+\n \n \n \n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n@@ -634,6 +634,8 @@ public static String getAPKRelease(String signingCertificateSHA256Digest) {\n                 return TermuxConstants.APK_RELEASE_GITHUB;\n             case TermuxConstants.APK_RELEASE_GOOGLE_PLAYSTORE_SIGNING_CERTIFICATE_SHA256_DIGEST:\n                 return TermuxConstants.APK_RELEASE_GOOGLE_PLAYSTORE;\n+            case TermuxConstants.APK_RELEASE_TERMUX_DEVS_SIGNING_CERTIFICATE_SHA256_DIGEST:\n+                return TermuxConstants.APK_RELEASE_TERMUX_DEVS;\n             default:\n                 return \"Unknown\";\n         }",
    "output": "Add TERMUX_DEVS key SHA-256 digest to official signing keys list"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxInstaller.java b/app/src/main/java/com/termux/app/TermuxInstaller.java\n--- a/app/src/main/java/com/termux/app/TermuxInstaller.java\n+++ b/app/src/main/java/com/termux/app/TermuxInstaller.java\n@@ -73,7 +73,8 @@ static void setupBootstrapIfNeeded(final Activity activity, final Runnable whenD\n         // Termux can only be run as the primary user (device owner) since only that\n         // account has the expected file system paths. Verify that:\n         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N && !PackageUtils.isCurrentUserThePrimaryUser(activity)) {\n-            bootstrapErrorMessage = activity.getString(R.string.bootstrap_error_not_primary_user_message, MarkdownUtils.getMarkdownCodeForString(TERMUX_PREFIX_DIR_PATH, false));\n+            bootstrapErrorMessage = activity.getString(R.string.bootstrap_error_not_primary_user_message,\n+                MarkdownUtils.getMarkdownCodeForString(TERMUX_PREFIX_DIR_PATH, false));\n             Logger.logError(LOG_TAG, \"isFilesDirectoryAccessible: \" + isFilesDirectoryAccessible);\n             Logger.logError(LOG_TAG, bootstrapErrorMessage);\n             sendBootstrapCrashReportNotification(activity, bootstrapErrorMessage);\n@@ -84,7 +85,14 @@ static void setupBootstrapIfNeeded(final Activity activity, final Runnable whenD\n         }\n \n         if (!isFilesDirectoryAccessible) {\n-            bootstrapErrorMessage = Error.getMinimalErrorString(filesDirectoryAccessibleError) + \"\\nTERMUX_FILES_DIR: \" + MarkdownUtils.getMarkdownCodeForString(TermuxConstants.TERMUX_FILES_DIR_PATH, false);\n+            bootstrapErrorMessage = Error.getMinimalErrorString(filesDirectoryAccessibleError);\n+            //noinspection SdCardPath\n+            if (PackageUtils.isAppInstalledOnExternalStorage(activity) &&\n+                !TermuxConstants.TERMUX_FILES_DIR_PATH.equals(activity.getFilesDir().getAbsolutePath().replaceAll(\"^/data/user/0/\", \"/data/data/\"))) {\n+                bootstrapErrorMessage += \"\\n\\n\" + activity.getString(R.string.bootstrap_error_installed_on_portable_sd,\n+                    MarkdownUtils.getMarkdownCodeForString(TERMUX_PREFIX_DIR_PATH, false));\n+            }\n+\n             Logger.logError(LOG_TAG, bootstrapErrorMessage);\n             sendBootstrapCrashReportNotification(activity, bootstrapErrorMessage);\n             MessageDialogUtils.showMessage(activity,",
    "output": "Add message to bootstrap error if user installed termux on portable/external/removable sd card since its not supported on some devices"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/android/resource/ResourceUtils.java b/termux-shared/src/main/java/com/termux/shared/android/resource/ResourceUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/android/resource/ResourceUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/android/resource/ResourceUtils.java\n@@ -0,0 +1,136 @@\n+package com.termux.shared.android.resource;\n+\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.termux.shared.data.DataUtils;\n+import com.termux.shared.logger.Logger;\n+\n+public class ResourceUtils {\n+\n+    public static final String RES_TYPE_COLOR = \"color\";\n+    public static final String RES_TYPE_DRAWABLE = \"drawable\";\n+    public static final String RES_TYPE_ID = \"id\";\n+    public static final String RES_TYPE_LAYOUT = \"layout\";\n+    public static final String RES_TYPE_STRING = \"string\";\n+    public static final String RES_TYPE_STYLE = \"style\";\n+\n+\n+    private static final String LOG_TAG = \"ResourceUtils\";\n+\n+\n+    /** Wrapper for {@link #getResourceId(Context, String, String, String, boolean)} without {@code defPackage}. */\n+    @Nullable\n+    public static Integer getResourceId(@NonNull Context context, String name,\n+                                        @Nullable String defType,\n+                                        boolean logErrorMessage) {\n+        return getResourceId(context, name, defType, null, logErrorMessage);\n+    }\n+\n+    /**\n+     * Get resource identifier for the given resource name. A fully qualified resource name is of\n+     * the form \"package:type/entry\".  The first two components (package and type) are optional if\n+     * defType and defPackage, respectively, are specified here.\n+     *\n+     * @param context The {@link Context} for operations.\n+     * @param name The name of the desired resource.\n+     * @param defType Optional default resource type to find, if \"type/\" is not included in the name.\n+     *                Can be null to require an explicit type.\n+     * @param defPackage Optional default package to find, if \"package:\" is not included in the name.\n+     *                   Can be null to require an explicit package.\n+     * @param logErrorMessage If an error message should be logged if failed to find resource.\n+     * @return Returns the resource identifier if found. Otherwise {@code null} if an exception was\n+     * raised or resource was not found.\n+     */\n+    @Nullable\n+    public static Integer getResourceId(@NonNull Context context, String name,\n+                                        @Nullable String defType, @Nullable String defPackage,\n+                                        boolean logErrorMessage) {\n+        if (DataUtils.isNullOrEmpty(name)) return null;\n+\n+        Integer resourceId = null;\n+        try {\n+            resourceId = context.getResources().getIdentifier(name, defType, defPackage);\n+            if (resourceId == 0) resourceId = null;\n+        } catch (Exception e) {\n+            // Ignore\n+        }\n+\n+        if (resourceId == null && logErrorMessage) {\n+            Logger.logError(LOG_TAG, \"Resource id not found. name: \\\"\" + name + \"\\\", type: \\\"\" + defType+ \"\\\", package: \\\"\" + defPackage + \"\\\", component \\\"\" + context.getClass().getName() + \"\\\"\");\n+        }\n+\n+        return resourceId;\n+    }\n+\n+\n+\n+    /**\n+     * Get resource identifier for the given {@link #RES_TYPE_COLOR} resource name.\n+     *\n+     * This is a wrapper for {@link #getResourceId(Context, String, String, String, boolean)}.\n+     */\n+    @Nullable\n+    public static Integer getColorResourceId(@NonNull Context context, String name,\n+                                             @Nullable String defPackage, boolean logErrorMessage) {\n+        return getResourceId(context, name, RES_TYPE_COLOR, defPackage, logErrorMessage);\n+    }\n+\n+    /**\n+     * Get resource identifier for the given {@link #RES_TYPE_DRAWABLE} resource name.\n+     *\n+     * This is a wrapper for {@link #getResourceId(Context, String, String, String, boolean)}.\n+     */\n+    @Nullable\n+    public static Integer getDrawableResourceId(@NonNull Context context, String name,\n+                                                @Nullable String defPackage, boolean logErrorMessage) {\n+        return getResourceId(context, name, RES_TYPE_DRAWABLE, defPackage, logErrorMessage);\n+    }\n+\n+    /**\n+     * Get resource identifier for the given {@link #RES_TYPE_ID} resource name.\n+     *\n+     * This is a wrapper for {@link #getResourceId(Context, String, String, String, boolean)}.\n+     */\n+    @Nullable\n+    public static Integer getIdResourceId(@NonNull Context context, String name,\n+                                          @Nullable String defPackage, boolean logErrorMessage) {\n+        return getResourceId(context, name, RES_TYPE_ID, defPackage, logErrorMessage);\n+    }\n+\n+    /**\n+     * Get resource identifier for the given {@link #RES_TYPE_LAYOUT} resource name.\n+     *\n+     * This is a wrapper for {@link #getResourceId(Context, String, String, String, boolean)}.\n+     */\n+    @Nullable\n+    public static Integer getLayoutResourceId(@NonNull Context context, String name,\n+                                              @Nullable String defPackage, boolean logErrorMessage) {\n+        return getResourceId(context, name, RES_TYPE_LAYOUT, defPackage, logErrorMessage);\n+    }\n+\n+    /**\n+     * Get resource identifier for the given {@link #RES_TYPE_STRING} resource name.\n+     *\n+     * This is a wrapper for {@link #getResourceId(Context, String, String, String, boolean)}.\n+     */\n+    @Nullable\n+    public static Integer getStringResourceId(@NonNull Context context, String name,\n+                                              @Nullable String defPackage, boolean logErrorMessage) {\n+        return getResourceId(context, name, RES_TYPE_STRING, defPackage, logErrorMessage);\n+    }\n+\n+    /**\n+     * Get resource identifier for the given {@link #RES_TYPE_STYLE} resource name.\n+     *\n+     * This is a wrapper for {@link #getResourceId(Context, String, String, String, boolean)}.\n+     */\n+    @Nullable\n+    public static Integer getStyleResourceId(@NonNull Context context, String name,\n+                                             @Nullable String defPackage, boolean logErrorMessage) {\n+        return getResourceId(context, name, RES_TYPE_STYLE, defPackage, logErrorMessage);\n+    }\n+\n+}",
    "output": "Add ResourceUtils to get resource ids from names"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/view/ViewUtils.java b/termux-shared/src/main/java/com/termux/shared/view/ViewUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/view/ViewUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/view/ViewUtils.java\n@@ -221,6 +221,10 @@ public static Activity getActivity(Context context) {\n     public static float dpToPx(Context context, float dp) {\n         return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, context.getResources().getDisplayMetrics());\n     }\n+\n+    /** Convert value in pixels (px) to device independent pixels (dp) units. */\n+    public static float pxToDp(Context context, float px) {\n+        return px / context.getResources().getDisplayMetrics().density;\n     }\n \n ",
    "output": "Add `ViewUtils.pxToDp()`"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/view/ViewUtils.java b/termux-shared/src/main/java/com/termux/shared/view/ViewUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/view/ViewUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/view/ViewUtils.java\n@@ -216,15 +216,18 @@ public static Activity getActivity(Context context) {\n         return null;\n     }\n \n+\n     /** Convert value in device independent pixels (dp) to pixels (px) units. */\n-    public static int dpToPx(Context context, int dp) {\n-        return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, context.getResources().getDisplayMetrics());\n+    public static float dpToPx(Context context, float dp) {\n+        return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, context.getResources().getDisplayMetrics());\n+    }\n     }\n \n \n     public static void setLayoutMarginsInDp(@NonNull View view, int left, int top, int right, int bottom) {\n         Context context = view.getContext();\n-        setLayoutMarginsInPixels(view, dpToPx(context, left), dpToPx(context, top), dpToPx(context, right), dpToPx(context, bottom));\n+        setLayoutMarginsInPixels(view, (int) dpToPx(context, left), (int) dpToPx(context, top),\n+            (int) dpToPx(context, right), (int) dpToPx(context, bottom));\n     }\n \n     public static void setLayoutMarginsInPixels(@NonNull View view, int left, int top, int right, int bottom) {",
    "output": "Use float dp parameter instead of int for `ViewUtils.dpToPx()` to not lose precision"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/jni/models/JniResult.java b/termux-shared/src/main/java/com/termux/shared/jni/models/JniResult.java\n--- a/termux-shared/src/main/java/com/termux/shared/jni/models/JniResult.java\n+++ b/termux-shared/src/main/java/com/termux/shared/jni/models/JniResult.java\n@@ -1,5 +1,6 @@\n package com.termux.shared.jni.models;\n \n+import androidx.annotation.Keep;\n import androidx.annotation.NonNull;\n \n import com.termux.shared.logger.Logger;\n@@ -11,6 +12,7 @@\n  * https://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/functions.html\n  * https://developer.android.com/training/articles/perf-jni\n  */\n+@Keep\n public class JniResult {\n \n     /**\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/net/socket/local/PeerCred.java b/termux-shared/src/main/java/com/termux/shared/net/socket/local/PeerCred.java\n--- a/termux-shared/src/main/java/com/termux/shared/net/socket/local/PeerCred.java\n+++ b/termux-shared/src/main/java/com/termux/shared/net/socket/local/PeerCred.java\n@@ -2,6 +2,7 @@\n \n import android.content.Context;\n \n+import androidx.annotation.Keep;\n import androidx.annotation.NonNull;\n \n import com.termux.shared.android.ProcessUtils;\n@@ -10,6 +11,7 @@\n import com.termux.shared.markdown.MarkdownUtils;\n \n /** The {@link PeerCred} of the {@link LocalClientSocket} containing info of client/peer. */\n+@Keep\n public class PeerCred {\n \n     public static final String LOG_TAG = \"PeerCred\";",
    "output": "Fix proguard removing JNI used methods for release builds"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/android/ProcessUtils.java b/termux-shared/src/main/java/com/termux/shared/android/ProcessUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/android/ProcessUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/android/ProcessUtils.java\n@@ -0,0 +1,58 @@\n+package com.termux.shared.android;\n+\n+import android.app.ActivityManager;\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.termux.shared.logger.Logger;\n+\n+import java.util.List;\n+\n+public class ProcessUtils {\n+\n+    public static final String LOG_TAG = \"ProcessUtils\";\n+\n+    /**\n+     * Get the app process name for a pid with a call to {@link ActivityManager#getRunningAppProcesses()}.\n+     *\n+     * This will not return child process names. Android did not keep track of them before android 12\n+     * phantom process addition, but there is no API via IActivityManager to get them.\n+     *\n+     * To get process name for pids of own app's child processes, check `get_process_name_from_cmdline()`\n+     * in `local-socket.cpp`.\n+     *\n+     * https://cs.android.com/android/platform/superproject/+/android-12.0.0_r32:frameworks/base/core/java/android/app/ActivityManager.java;l=3362\n+     * https://cs.android.com/android/platform/superproject/+/android-12.0.0_r32:frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java;l=8434\n+     * https://cs.android.com/android/_/android/platform/frameworks/base/+/refs/tags/android-12.0.0_r32:services/core/java/com/android/server/am/PhantomProcessList.java\n+     * https://cs.android.com/android/_/android/platform/frameworks/base/+/refs/tags/android-12.0.0_r32:services/core/java/com/android/server/am/PhantomProcessRecord.java\n+     *\n+     * @param context The {@link Context} for operations.\n+     * @param pid The pid of the process.\n+     * @return Returns the app process name if found, otherwise {@code null}.\n+     */\n+    @Nullable\n+    public static String getAppProcessNameForPid(@NonNull Context context, int pid) {\n+        if (pid < 0) return null;\n+\n+        ActivityManager activityManager = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);\n+        if (activityManager == null) return null;\n+        try {\n+            List<ActivityManager.RunningAppProcessInfo> runningApps = activityManager.getRunningAppProcesses();\n+            if (runningApps == null) {\n+                return null;\n+            }\n+            for (ActivityManager.RunningAppProcessInfo procInfo : runningApps) {\n+                if (procInfo.pid == pid) {\n+                    return procInfo.processName;\n+                }\n+            }\n+        } catch (Exception e) {\n+            Logger.logStackTraceWithMessage(LOG_TAG, \"Failed to get app process name for pid \" + pid, e);\n+        }\n+\n+        return null;\n+    }\n+\n+}",
    "output": "Add function to `ProcessUtils` to get app process name for a pid from `ActivityManager`"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/android/UserUtils.java b/termux-shared/src/main/java/com/termux/shared/android/UserUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/android/UserUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/android/UserUtils.java\n@@ -0,0 +1,143 @@\n+package com.termux.shared.android;\n+\n+import android.content.Context;\n+import android.content.pm.PackageManager;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.termux.shared.logger.Logger;\n+import com.termux.shared.reflection.ReflectionUtils;\n+\n+import java.lang.reflect.Method;\n+\n+public class UserUtils {\n+\n+    public static final String LOG_TAG = \"UserUtils\";\n+\n+    /**\n+     * Get the user name for user id with a call to {@link #getNameForUidFromPackageManager(Context, int)}\n+     * and if that fails, then a call to {@link #getNameForUidFromLibcore(int)}.\n+     *\n+     * @param context The {@link Context} for operations.\n+     * @param uid The user id.\n+     * @return Returns the user name if found, otherwise {@code null}.\n+     */\n+    @Nullable\n+    public static String getNameForUid(@NonNull Context context, int uid) {\n+        String name = getNameForUidFromPackageManager(context, uid);\n+        if (name == null)\n+            name = getNameForUidFromLibcore(uid);\n+        return name;\n+    }\n+\n+    /**\n+     * Get the user name for user id with a call to {@link PackageManager#getNameForUid(int)}.\n+     *\n+     * This will not return user names for non app user id like for root user 0, use {@link #getNameForUidFromLibcore(int)}\n+     * to get those.\n+     *\n+     * https://cs.android.com/android/platform/superproject/+/android-12.0.0_r32:frameworks/base/core/java/android/content/pm/PackageManager.java;l=5556\n+     * https://cs.android.com/android/platform/superproject/+/android-12.0.0_r32:frameworks/base/core/java/android/app/ApplicationPackageManager.java;l=1028\n+     * https://cs.android.com/android/platform/superproject/+/android-12.0.0_r32:frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java;l=10293\n+     *\n+     * @param context The {@link Context} for operations.\n+     * @param uid The user id.\n+     * @return Returns the user name if found, otherwise {@code null}.\n+     */\n+    @Nullable\n+    public static String getNameForUidFromPackageManager(@NonNull Context context, int uid) {\n+        if (uid < 0) return null;\n+\n+        try {\n+            String name = context.getPackageManager().getNameForUid(uid);\n+            if (name != null && name.endsWith(\":\" + uid))\n+                name = name.replaceAll(\":\" + uid + \"$\", \"\"); // Remove \":<uid>\" suffix\n+            return name;\n+        } catch (Exception e) {\n+            Logger.logStackTraceWithMessage(LOG_TAG, \"Failed to get name for uid \\\"\" + uid + \"\\\" from package manager\", e);\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Get the user name for user id with a call to `Libcore.os.getpwuid()`.\n+     *\n+     * This will return user names for non app user id like for root user 0 as well, but this call\n+     * is expensive due to usage of reflection, and requires hidden API bypass, check\n+     * {@link ReflectionUtils#bypassHiddenAPIReflectionRestrictions()} for details.\n+     *\n+     * `BlockGuardOs` implements the `Os` interface and its instance is stored in `Libcore` class static `os` field.\n+     * The `getpwuid` method is implemented by `ForwardingOs`, which is the super class of `BlockGuardOs`.\n+     * The `getpwuid` method returns `StructPasswd` object whose `pw_name` contains the user name for id.\n+     *\n+     * https://stackoverflow.com/a/28057167/14686958\n+     * https://cs.android.com/android/platform/superproject/+/android-12.0.0_r32:libcore/luni/src/main/java/libcore/io/Libcore.java;l=39\n+     * https://cs.android.com/android/platform/superproject/+/android-12.0.0_r32:libcore/luni/src/main/java/libcore/io/Os.java;l=279\n+     * https://cs.android.com/android/platform/superproject/+/android-12.0.0_r32:libcore/luni/src/main/java/libcore/io/BlockGuardOs.java\n+     * https://cs.android.com/android/platform/superproject/+/android-12.0.0_r32:libcore/luni/src/main/java/libcore/io/ForwardingOs.java;l=340\n+     * https://cs.android.com/android/platform/superproject/+/android-12.0.0_r32:libcore/luni/src/main/java/android/system/StructPasswd.java\n+     * https://cs.android.com/android/platform/superproject/+/android-12.0.0_r32:bionic/libc/bionic/grp_pwd.cpp;l=553\n+     * https://cs.android.com/android/platform/superproject/+/android-12.0.0_r32:system/core/libcutils/include/private/android_filesystem_config.h;l=43\n+     *\n+     * @param uid The user id.\n+     * @return Returns the user name if found, otherwise {@code null}.\n+     */\n+    @Nullable\n+    public static String getNameForUidFromLibcore(int uid) {\n+        if (uid < 0) return null;\n+\n+        ReflectionUtils.bypassHiddenAPIReflectionRestrictions();\n+        try {\n+            String libcoreClassName = \"libcore.io.Libcore\";\n+            Class<?> clazz = Class.forName(libcoreClassName);\n+            Object os; // libcore.io.BlockGuardOs\n+            try {\n+                os = ReflectionUtils.invokeField(Class.forName(libcoreClassName), \"os\", null).value;\n+            } catch (Exception e) {\n+                // ClassCastException may be thrown\n+                Logger.logStackTraceWithMessage(LOG_TAG, \"Failed to get \\\"os\\\" field value for \" + libcoreClassName + \" class\", e);\n+                return null;\n+            }\n+\n+            if (os == null) {\n+                Logger.logError(LOG_TAG, \"Failed to get BlockGuardOs class obj from Libcore\");\n+                return null;\n+            }\n+\n+            clazz = os.getClass().getSuperclass();  // libcore.io.ForwardingOs\n+            if (clazz == null) {\n+                Logger.logError(LOG_TAG, \"Failed to find super class ForwardingOs from object of class \" + os.getClass().getName());\n+                return null;\n+            }\n+\n+            Object structPasswd; // android.system.StructPasswd\n+            try {\n+                Method getpwuidMethod = ReflectionUtils.getDeclaredMethod(clazz, \"getpwuid\", int.class);\n+                if (getpwuidMethod == null) return null;\n+                structPasswd = ReflectionUtils.invokeMethod(getpwuidMethod, os, uid).value;\n+            } catch (Exception e) {\n+                Logger.logStackTraceWithMessage(LOG_TAG, \"Failed to invoke getpwuid() method of \" + clazz.getName() + \" class\", e);\n+                return null;\n+            }\n+\n+            if (structPasswd == null) {\n+                Logger.logError(LOG_TAG, \"Failed to get StructPasswd obj from call to ForwardingOs.getpwuid()\");\n+                return null;\n+            }\n+\n+            try {\n+                clazz = structPasswd.getClass();\n+                return (String) ReflectionUtils.invokeField(clazz, \"pw_name\", structPasswd).value;\n+            } catch (Exception e) {\n+                // ClassCastException may be thrown\n+                Logger.logStackTraceWithMessage(LOG_TAG, \"Failed to get \\\"pw_name\\\" field value for \" + clazz.getName() + \" class\", e);\n+                return null;\n+            }\n+        } catch (Exception e) {\n+            Logger.logStackTraceWithMessage(LOG_TAG, \"Failed to get name for uid \\\"\" + uid + \"\\\" from Libcore\", e);\n+            return null;\n+        }\n+    }\n+\n+}",
    "output": "Add functions to `UserUtils` to get user name for user id from `PackageManager` and `Libcore`"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxApplication.java b/app/src/main/java/com/termux/app/TermuxApplication.java\n--- a/app/src/main/java/com/termux/app/TermuxApplication.java\n+++ b/app/src/main/java/com/termux/app/TermuxApplication.java\n@@ -4,16 +4,20 @@\n import android.content.Context;\n \n import com.termux.am.Am;\n+import com.termux.shared.errors.Error;\n import com.termux.shared.logger.Logger;\n import com.termux.shared.shell.LocalSocketListener;\n import com.termux.shared.termux.TermuxConstants;\n import com.termux.shared.termux.crash.TermuxCrashUtils;\n+import com.termux.shared.termux.file.TermuxFileUtils;\n import com.termux.shared.termux.settings.preferences.TermuxAppSharedPreferences;\n import com.termux.shared.termux.settings.properties.TermuxAppSharedProperties;\n import com.termux.shared.termux.theme.TermuxThemeUtils;\n \n public class TermuxApplication extends Application {\n \n+    private static final String LOG_TAG = \"TermuxApplication\";\n+\n     public void onCreate() {\n         super.onCreate();\n \n@@ -33,6 +37,21 @@ public void onCreate() {\n         // Set NightMode.APP_NIGHT_MODE\n         TermuxThemeUtils.setAppNightMode(properties.getNightMode());\n \n+        // Check and create termux files directory. If failed to access it like in case of secondary\n+        // user or external sd card installation, then don't run files directory related code\n+        Error error = TermuxFileUtils.isTermuxFilesDirectoryAccessible(this, true, true);\n+        if (error != null) {\n+            Logger.logErrorExtended(LOG_TAG, \"Termux files directory is not accessible\\n\" + error);\n+        } else {\n+            Logger.logInfo(LOG_TAG, \"Termux files directory is accessible\");\n+\n+            error = TermuxFileUtils.isAppsTermuxAppDirectoryAccessible(true, true);\n+            if (error != null) {\n+                Logger.logErrorExtended(LOG_TAG, \"Create apps/termux-app directory failed\\n\" + error);\n+                return;\n+            }\n+        }\n+\n         if (LocalSocketListener.tryEstablishLocalSocketListener(this, (args, out, err) -> {\n             try {\n                 new Am(out, err, this).run(args);\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n@@ -11,7 +11,7 @@\n import java.util.List;\n \n /*\n- * Version: v0.39.0\n+ * Version: v0.40.0\n  * SPDX-License-Identifier: MIT\n  *\n  * Changelog\n@@ -216,10 +216,10 @@\n  *      - Added `TERMUX_PROPERTIES_FILE_PATHS_LIST` and `TERMUX_FLOAT_PROPERTIES_FILE_PATHS_LIST`.\n  *\n  * - 0.34.0 (2021-10-26)\n- *  - Move `RESULT_SENDER` to `com.termux.shared.shell.command.ShellCommandConstants`.\n+ *      - Move `RESULT_SENDER` to `com.termux.shared.shell.command.ShellCommandConstants`.\n  *\n  * - 0.35.0 (2022-01-28)\n- *  - Add `TERMUX_APP.TERMUX_ACTIVITY.EXTRA_RECREATE_ACTIVITY`.\n+ *      - Add `TERMUX_APP.TERMUX_ACTIVITY.EXTRA_RECREATE_ACTIVITY`.\n  *\n  * - 0.36.0 (2022-03-10)\n  *      - Added `TERMUX_APP.TERMUX_SERVICE.EXTRA_RUNNER` and `TERMUX_APP.RUN_COMMAND_SERVICE.EXTRA_RUNNER`\n@@ -233,6 +233,9 @@\n  * - 0.39.0 (2022-03-18)\n  *      - Added `TERMUX_APP.TERMUX_SERVICE.EXTRA_SESSION_NAME`, `TERMUX_APP.RUN_COMMAND_SERVICE.EXTRA_SESSION_NAME`,\n  *          `TERMUX_APP.TERMUX_SERVICE.EXTRA_SESSION_CREATE_MODE` and `TERMUX_APP.RUN_COMMAND_SERVICE.EXTRA_SESSION_CREATE_MODE`.\n+ *\n+ * - 0.40.0 (2022-04-17)\n+ *      - Added `TERMUX_APPS_DIR_PATH` and `TERMUX_APP.APPS_DIR_PATH`.\n  */\n \n /**\n@@ -657,6 +660,11 @@ public final class TermuxConstants {\n \n \n \n+    /** Termux and plugin apps directory path */\n+    public static final String TERMUX_APPS_DIR_PATH = TERMUX_FILES_DIR_PATH + \"/apps\"; // Default: \"/data/data/com.termux/files/apps\"\n+    /** Termux and plugin apps directory */\n+    public static final File TERMUX_APPS_DIR = new File(TERMUX_APPS_DIR_PATH);\n+\n \n \n     /*\n@@ -872,6 +880,10 @@ public final class TermuxConstants {\n      */\n     public static final class TERMUX_APP {\n \n+        /** Termux apps directory path */\n+        public static final String APPS_DIR_PATH = TERMUX_APPS_DIR_PATH + \"/termux-app\"; // Default: \"/data/data/com.termux/files/apps/termux-app\"\n+\n+\n         /** Termux app core activity name. */\n         public static final String TERMUX_ACTIVITY_NAME = TERMUX_PACKAGE_NAME + \".app.TermuxActivity\"; // Default: \"com.termux.app.TermuxActivity\"\n \n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/file/TermuxFileUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/file/TermuxFileUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/file/TermuxFileUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/file/TermuxFileUtils.java\n@@ -307,6 +307,24 @@ public static Error isTermuxPrefixStagingDirectoryAccessible(boolean createDirec\n             false, false);\n     }\n \n+    /**\n+     * Validate if {@link TermuxConstants.TERMUX_APP#APPS_DIR_PATH} exists and has\n+     * {@link FileUtils#APP_WORKING_DIRECTORY_PERMISSIONS} permissions.\n+     *\n+     * @param createDirectoryIfMissing The {@code boolean} that decides if directory file\n+     *                                 should be created if its missing.\n+     * @param setMissingPermissions The {@code boolean} that decides if permissions are to be\n+     *                              automatically set.\n+     * @return Returns the {@code error} if path is not a directory file, failed to create it,\n+     * or validating permissions failed, otherwise {@code null}.\n+     */\n+    public static Error isAppsTermuxAppDirectoryAccessible(boolean createDirectoryIfMissing, boolean setMissingPermissions) {\n+        return FileUtils.validateDirectoryFileExistenceAndPermissions(\"apps/termux-app directory\", TermuxConstants.TERMUX_APP.APPS_DIR_PATH,\n+            null, createDirectoryIfMissing,\n+            FileUtils.APP_WORKING_DIRECTORY_PERMISSIONS, setMissingPermissions, true,\n+            false, false);\n+    }\n+\n     /**\n      * Get a markdown {@link String} for stat output for various Termux app files paths.\n      *",
    "output": "Add `TERMUX_APPS_DIR_PATH` and `TERMUX_APP.APPS_DIR_PATH` and create them at application startup."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -455,8 +455,10 @@ public synchronized AppShell createTermuxTask(ExecutionCommand executionCommand)\n             // If the execution command was started for a plugin, then process the error\n             if (executionCommand.isPluginExecutionCommand)\n                 TermuxPluginUtils.processPluginExecutionCommandError(this, LOG_TAG, executionCommand, false);\n-            else\n-                Logger.logErrorExtended(LOG_TAG, executionCommand.toString());\n+            else {\n+                Logger.logError(LOG_TAG, \"Set log level to debug or higher to see error in logs\");\n+                Logger.logErrorPrivateExtended(LOG_TAG, executionCommand.toString());\n+            }\n             return null;\n         }\n \n@@ -576,8 +578,10 @@ public synchronized TermuxSession createTermuxSession(ExecutionCommand execution\n             // If the execution command was started for a plugin, then process the error\n             if (executionCommand.isPluginExecutionCommand)\n                 TermuxPluginUtils.processPluginExecutionCommandError(this, LOG_TAG, executionCommand, false);\n-            else\n-                Logger.logErrorExtended(LOG_TAG, executionCommand.toString());\n+            else {\n+                Logger.logError(LOG_TAG, \"Set log level to debug or higher to see error in logs\");\n+                Logger.logErrorPrivateExtended(LOG_TAG, executionCommand.toString());\n+            }\n             return null;\n         }\n \n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/logger/Logger.java b/termux-shared/src/main/java/com/termux/shared/logger/Logger.java\n--- a/termux-shared/src/main/java/com/termux/shared/logger/Logger.java\n+++ b/termux-shared/src/main/java/com/termux/shared/logger/Logger.java\n@@ -120,6 +120,28 @@ public static void logErrorExtended(String message) {\n \n \n \n+    public static void logErrorPrivate(String tag, String message) {\n+        if (CURRENT_LOG_LEVEL >= LOG_LEVEL_DEBUG)\n+            logMessage(Log.ERROR, tag, message);\n+    }\n+\n+    public static void logErrorPrivate(String message) {\n+        if (CURRENT_LOG_LEVEL >= LOG_LEVEL_DEBUG)\n+            logMessage(Log.ERROR, DEFAULT_LOG_TAG, message);\n+    }\n+\n+    public static void logErrorPrivateExtended(String tag, String message) {\n+        if (CURRENT_LOG_LEVEL >= LOG_LEVEL_DEBUG)\n+            logExtendedMessage(Log.ERROR, tag, message);\n+    }\n+\n+    public static void logErrorPrivateExtended(String message) {\n+        if (CURRENT_LOG_LEVEL >= LOG_LEVEL_DEBUG)\n+            logExtendedMessage(Log.ERROR, DEFAULT_LOG_TAG, message);\n+    }\n+\n+\n+\n     public static void logWarn(String tag, String message) {\n         logMessage(Log.WARN, tag, message);\n     }\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/plugins/TermuxPluginUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/plugins/TermuxPluginUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/plugins/TermuxPluginUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/plugins/TermuxPluginUtils.java\n@@ -144,7 +144,9 @@ public static void processPluginExecutionCommandError(final Context context, Str\n         boolean isExecutionCommandLoggingEnabled = Logger.shouldEnableLoggingForCustomLogLevel(executionCommand.backgroundCustomLogLevel);\n \n         // Log the error and any exception. ResultData should not be logged if pending result since ResultSender will do it\n-        Logger.logErrorExtended(logTag, ExecutionCommand.getExecutionOutputLogString(executionCommand, true,\n+        Logger.logError(logTag, \"Processing plugin execution error for:\\n\" + executionCommand.getCommandIdAndLabelLogString());\n+        Logger.logError(logTag, \"Set log level to debug or higher to see error in logs\");\n+        Logger.logErrorPrivateExtended(logTag, ExecutionCommand.getExecutionOutputLogString(executionCommand, true,\n             !isPluginExecutionCommandWithPendingResult, isExecutionCommandLoggingEnabled));\n \n         // If execution command was started by a plugin which expects the result back\n@@ -161,7 +163,7 @@ public static void processPluginExecutionCommandError(final Context context, Str\n             if (error != null) {\n                 // error will be added to existing Errors\n                 resultData.setStateFailed(error);\n-                Logger.logErrorExtended(logTag, ExecutionCommand.getExecutionOutputLogString(executionCommand, true, true, isExecutionCommandLoggingEnabled));\n+                Logger.logErrorPrivateExtended(logTag, ExecutionCommand.getExecutionOutputLogString(executionCommand, true, true, isExecutionCommandLoggingEnabled));\n                 forceNotification = true;\n             }\n ",
    "output": "Add `Logger.logErrorPrivate*()` functions which do not log errors that may contain potentially private info unless log level is debug or higher Execution commands and other errors that may contain potentially private info should not be logged unless user has explicitly allowed it since apps with `READ_LOGS` permission would be able to read the data. A notification for failed executions commands would still be shown if enabled and required."
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java b/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n@@ -1116,6 +1116,21 @@ public static Error deleteSymlinkFile(String label, final String filePath, final\n         return deleteFile(label, filePath, ignoreNonExistentFile, false, FileType.SYMLINK.getValue());\n     }\n \n+    /**\n+     * Delete socket file at path.\n+     *\n+     * This function is a wrapper for {@link #deleteFile(String, String, boolean, boolean, int)}.\n+     *\n+     * @param label The optional label for file to delete. This can optionally be {@code null}.\n+     * @param filePath The {@code path} for file to delete.\n+     * @param ignoreNonExistentFile The {@code boolean} that decides if it should be considered an\n+     *                              error if file to deleted doesn't exist.\n+     * @return Returns the {@code error} if deletion was not successful, otherwise {@code null}.\n+     */\n+    public static Error deleteSocketFile(String label, final String filePath, final boolean ignoreNonExistentFile) {\n+        return deleteFile(label, filePath, ignoreNonExistentFile, false, FileType.SOCKET.getValue());\n+    }\n+\n     /**\n      * Delete regular, directory or symlink file at path.\n      *\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/file/filesystem/FileAttributes.java b/termux-shared/src/main/java/com/termux/shared/file/filesystem/FileAttributes.java\n--- a/termux-shared/src/main/java/com/termux/shared/file/filesystem/FileAttributes.java\n+++ b/termux-shared/src/main/java/com/termux/shared/file/filesystem/FileAttributes.java\n@@ -202,6 +202,10 @@ public boolean isFifo() {\n         return ((st_mode & UnixConstants.S_IFMT) == UnixConstants.S_IFIFO);\n     }\n \n+    public boolean isSocket() {\n+        return ((st_mode & UnixConstants.S_IFMT) == UnixConstants.S_IFSOCK);\n+    }\n+\n     public boolean isBlock() {\n         return ((st_mode & UnixConstants.S_IFMT) == UnixConstants.S_IFBLK);\n     }\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/file/filesystem/FileType.java b/termux-shared/src/main/java/com/termux/shared/file/filesystem/FileType.java\n--- a/termux-shared/src/main/java/com/termux/shared/file/filesystem/FileType.java\n+++ b/termux-shared/src/main/java/com/termux/shared/file/filesystem/FileType.java\n@@ -3,14 +3,15 @@\n /** The {@link Enum} that defines file types. */\n public enum FileType {\n \n-    NO_EXIST(\"no exist\", 0),    // 0000000\n-    REGULAR(\"regular\", 1),      // 0000001\n-    DIRECTORY(\"directory\", 2),  // 0000010\n-    SYMLINK(\"symlink\", 4),      // 0000100\n-    CHARACTER(\"character\", 8),  // 0001000\n-    FIFO(\"fifo\", 16),           // 0010000\n-    BLOCK(\"block\", 32),         // 0100000\n-    UNKNOWN(\"unknown\", 64);     // 1000000\n+    NO_EXIST(\"no exist\", 0),    // 00000000\n+    REGULAR(\"regular\", 1),      // 00000001\n+    DIRECTORY(\"directory\", 2),  // 00000010\n+    SYMLINK(\"symlink\", 4),      // 00000100\n+    SOCKET(\"socket\", 8),        // 00001000\n+    CHARACTER(\"character\", 16), // 00010000\n+    FIFO(\"fifo\", 32),           // 00100000\n+    BLOCK(\"block\", 64),         // 01000000\n+    UNKNOWN(\"unknown\", 128);    // 10000000\n \n     private final String name;\n     private final int value;\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/file/filesystem/FileTypes.java b/termux-shared/src/main/java/com/termux/shared/file/filesystem/FileTypes.java\n--- a/termux-shared/src/main/java/com/termux/shared/file/filesystem/FileTypes.java\n+++ b/termux-shared/src/main/java/com/termux/shared/file/filesystem/FileTypes.java\n@@ -104,6 +104,8 @@ else if (fileAttributes.isDirectory())\n             return FileType.DIRECTORY;\n         else if (fileAttributes.isSymbolicLink())\n             return FileType.SYMLINK;\n+        else if (fileAttributes.isSocket())\n+            return FileType.SOCKET;\n         else if (fileAttributes.isCharacter())\n             return FileType.CHARACTER;\n         else if (fileAttributes.isFifo())\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/file/filesystem/UnixConstants.java b/termux-shared/src/main/java/com/termux/shared/file/filesystem/UnixConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/file/filesystem/UnixConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/file/filesystem/UnixConstants.java\n@@ -88,6 +88,8 @@ private UnixConstants() { }\n \n     static final int S_IFLNK = OsConstants.S_IFLNK;\n \n+    static final int S_IFSOCK = OsConstants.S_IFSOCK;\n+\n     static final int S_IFCHR = OsConstants.S_IFCHR;\n \n     static final int S_IFBLK = OsConstants.S_IFBLK;",
    "output": "Add `FileType.SOCKET` support and add `FileUtils.deleteSocketFile()` function"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/data/DataUtils.java b/termux-shared/src/main/java/com/termux/shared/data/DataUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/data/DataUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/data/DataUtils.java\n@@ -2,11 +2,15 @@\n \n import android.os.Bundle;\n \n+import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n \n+import com.google.common.base.Strings;\n+\n import java.io.ByteArrayOutputStream;\n import java.io.ObjectOutputStream;\n import java.io.Serializable;\n+import java.util.Collections;\n \n public class DataUtils {\n \n@@ -162,6 +166,51 @@ public static float rangedOrDefault(float value, float def, float min, float max\n \n \n \n+    /**\n+     * Add a space indent to a {@link String}. Each indent is 4 space characters long.\n+     *\n+     * @param string The {@link String} to add indent to.\n+     * @param count The indent count.\n+     * @return Returns the indented {@link String}.\n+     */\n+    public static String getSpaceIndentedString(String string, int count) {\n+        if (string == null || string.isEmpty())\n+            return string;\n+        else\n+            return getIndentedString(string, \"    \", count);\n+    }\n+\n+    /**\n+     * Add a tab indent to a {@link String}. Each indent is 1 tab character long.\n+     *\n+     * @param string The {@link String} to add indent to.\n+     * @param count The indent count.\n+     * @return Returns the indented {@link String}.\n+     */\n+    public static String getTabIndentedString(String string, int count) {\n+        if (string == null || string.isEmpty())\n+            return string;\n+        else\n+            return getIndentedString(string, \"\\t\", count);\n+    }\n+\n+    /**\n+     * Add an indent to a {@link String}.\n+     *\n+     * @param string The {@link String} to add indent to.\n+     * @param indent The indent characters.\n+     * @param count The indent count.\n+     * @return Returns the indented {@link String}.\n+     */\n+    public static String getIndentedString(String string, @NonNull String indent, int count) {\n+        if (string == null || string.isEmpty())\n+            return string;\n+        else\n+            return string.replaceAll(\"(?m)^\", Strings.repeat(indent, Math.max(count, 1)));\n+    }\n+\n+\n+\n     /**\n      * Get the object itself if it is not {@code null}, otherwise default.\n      *",
    "output": "Add functions to `DataUtils` to get generic, space and tab indented strings"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/crash/CrashHandler.java b/termux-shared/src/main/java/com/termux/shared/crash/CrashHandler.java\n--- a/termux-shared/src/main/java/com/termux/shared/crash/CrashHandler.java\n+++ b/termux-shared/src/main/java/com/termux/shared/crash/CrashHandler.java\n@@ -50,6 +50,20 @@ public static void setDefaultCrashHandler(@NonNull final Context context, @NonNu\n         }\n     }\n \n+    /**\n+     * Set uncaught crash handler of current non-main thread to {@link CrashHandler}.\n+     */\n+    public static void setCrashHandler(@NonNull final Context context, @NonNull final CrashHandlerClient crashHandlerClient) {\n+        Thread.currentThread().setUncaughtExceptionHandler(new CrashHandler(context, crashHandlerClient, false));\n+    }\n+\n+    /**\n+     * Get {@link CrashHandler} instance that can be set as uncaught crash handler of a non-main thread.\n+     */\n+    public static CrashHandler getCrashHandler(@NonNull final Context context, @NonNull final CrashHandlerClient crashHandlerClient) {\n+        return new CrashHandler(context, crashHandlerClient, false);\n+    }\n+\n     /**\n      * Log a crash in the crash log file at path returned by {@link CrashHandlerClient#getCrashLogFilePath(Context)}.\n      *\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/crash/TermuxCrashUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/crash/TermuxCrashUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/crash/TermuxCrashUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/crash/TermuxCrashUtils.java\n@@ -54,9 +54,21 @@ public enum TYPE {\n     public static void setDefaultCrashHandler(@NonNull final Context context) {\n         CrashHandler.setDefaultCrashHandler(context, new TermuxCrashUtils(TYPE.UNCAUGHT_EXCEPTION));\n     }\n+\n+    /**\n+     * Set uncaught crash handler of current non-main thread to {@link CrashHandler} for Termux app\n+     * and its plugins to log crashes at {@link TermuxConstants#TERMUX_CRASH_LOG_FILE_PATH}.\n      */\n     public static void setCrashHandler(@NonNull final Context context) {\n-        CrashHandler.setCrashHandler(context, new TermuxCrashUtils(TYPE.UNCAUGHT_EXCEPTION));\n+        CrashHandler.setCrashHandler(context, new TermuxCrashUtils(TYPE.CAUGHT_EXCEPTION));\n+    }\n+\n+    /**\n+     * Get {@link CrashHandler} for Termux app and its plugins that can be set as the uncaught\n+     * crash handler of a non-main thread to log crashes at {@link TermuxConstants#TERMUX_CRASH_LOG_FILE_PATH}.\n+     */\n+    public static CrashHandler getCrashHandler(@NonNull final Context context) {\n+        return CrashHandler.getCrashHandler(context, new TermuxCrashUtils(TYPE.CAUGHT_EXCEPTION));\n     }\n \n     /**",
    "output": "Add functions that can be used by non main threads to set `CrashHandler` as the `UncaughtExceptionHandler`"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/shell/command/ExecutionCommand.java b/termux-shared/src/main/java/com/termux/shared/shell/command/ExecutionCommand.java\n--- a/termux-shared/src/main/java/com/termux/shared/shell/command/ExecutionCommand.java\n+++ b/termux-shared/src/main/java/com/termux/shared/shell/command/ExecutionCommand.java\n@@ -472,7 +472,7 @@ public static String getExecutionCommandMarkdownString(final ExecutionCommand ex\n         markdownString.append(\"\\n\").append(MarkdownUtils.getSingleLineMarkdownStringEntry(\"Current State\", executionCommand.currentState.getName(), \"-\"));\n \n         markdownString.append(\"\\n\").append(MarkdownUtils.getSingleLineMarkdownStringEntry(\"Executable\", executionCommand.executable, \"-\"));\n-        markdownString.append(\"\\n\").append(getArgumentsMarkdownString(executionCommand.arguments));\n+        markdownString.append(\"\\n\").append(getArgumentsMarkdownString(\"Arguments\", executionCommand.arguments));\n         markdownString.append(\"\\n\").append(MarkdownUtils.getSingleLineMarkdownStringEntry(\"Working Directory\", executionCommand.workingDirectory, \"-\"));\n         markdownString.append(\"\\n\").append(MarkdownUtils.getSingleLineMarkdownStringEntry(\"Runner\", executionCommand.runner, \"-\"));\n         markdownString.append(\"\\n\").append(MarkdownUtils.getSingleLineMarkdownStringEntry(\"isFailsafe\", executionCommand.isFailsafe, \"-\"));\n@@ -547,7 +547,7 @@ public String getExecutableLogString() {\n     }\n \n     public String getArgumentsLogString() {\n-        return getArgumentsLogString(arguments);\n+        return getArgumentsLogString(\"Arguments\", arguments);\n     }\n \n     public String getWorkingDirectoryLogString() {\n@@ -623,8 +623,8 @@ public String getIsPluginExecutionCommandLogString() {\n      * @param argumentsArray The {@link String[]} argumentsArray to convert.\n      * @return Returns the log friendly {@link String}.\n      */\n-    public static String getArgumentsLogString(final String[] argumentsArray) {\n-        StringBuilder argumentsString = new StringBuilder(\"Arguments:\");\n+    public static String getArgumentsLogString(String label, final String[] argumentsArray) {\n+        StringBuilder argumentsString = new StringBuilder(label + \":\");\n \n         if (argumentsArray != null && argumentsArray.length != 0) {\n             argumentsString.append(\"\\n```\\n\");\n@@ -660,8 +660,8 @@ public static String getArgumentsLogString(final String[] argumentsArray) {\n      * @param argumentsArray The {@link String[]} argumentsArray to convert.\n      * @return Returns the markdown {@link String}.\n      */\n-    public static String getArgumentsMarkdownString(final String[] argumentsArray) {\n-        StringBuilder argumentsString = new StringBuilder(\"**Arguments:**\");\n+    public static String getArgumentsMarkdownString(String label, final String[] argumentsArray) {\n+        StringBuilder argumentsString = new StringBuilder(\"**\" + label + \":**\");\n \n         if (argumentsArray != null && argumentsArray.length != 0) {\n             argumentsString.append(\"\\n\");",
    "output": "Add label parameter to `ExecutionCommand` `getArgumentsLogString()` and `getArgumentsMarkdownString()` functions for external usage"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/android/PermissionUtils.java b/termux-shared/src/main/java/com/termux/shared/android/PermissionUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/android/PermissionUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/android/PermissionUtils.java\n@@ -352,7 +352,6 @@ public static Error requestManageStorageExternalPermission(@NonNull Context cont\n         Intent intent = new Intent(Settings.ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION);\n         intent.addCategory(\"android.intent.category.DEFAULT\");\n         intent.setData(Uri.parse(\"package:\" + context.getPackageName()));\n-        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n \n         Error error;\n         if (requestCode >=0)\n@@ -464,7 +463,6 @@ public static Error requestDisplayOverOtherAppsPermission(@NonNull Context conte\n \n         Intent intent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION);\n         intent.setData(Uri.parse(\"package:\" + context.getPackageName()));\n-        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n \n         if (requestCode >=0)\n             return ActivityUtils.startActivityForResult(context, requestCode, intent);\n@@ -534,7 +532,6 @@ public static Error requestDisableBatteryOptimizations(@NonNull Context context,\n \n         Intent intent = new Intent(Settings.ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS);\n         intent.setData(Uri.parse(\"package:\" + context.getPackageName()));\n-        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n \n         if (requestCode >=0)\n             return ActivityUtils.startActivityForResult(context, requestCode, intent);",
    "output": "Fix `Settings.ACTION_*` permission requests result callback"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n@@ -222,7 +222,7 @@ public boolean shouldUseCtrlSpaceWorkaround() {\n \n     @Override\n     public boolean isTerminalViewSelected() {\n-        return mActivity.getTerminalToolbarViewPager() == null || mActivity.isTerminalViewSelected();\n+        return mActivity.getTerminalToolbarViewPager() == null || mActivity.isTerminalViewSelected() || mActivity.getTerminalView().hasFocus();\n     }\n \n ",
    "output": "Fix wrong input type selected if toolbar is switched back to extra keys after tapping terminal if in text input mode"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxInstaller.java b/app/src/main/java/com/termux/app/TermuxInstaller.java\n--- a/app/src/main/java/com/termux/app/TermuxInstaller.java\n+++ b/app/src/main/java/com/termux/app/TermuxInstaller.java\n@@ -286,6 +286,7 @@ public void run() {\n \n                     Logger.logInfo(LOG_TAG, \"Setting up storage symlinks at ~/storage/shared, ~/storage/downloads, ~/storage/dcim, ~/storage/pictures, ~/storage/music and ~/storage/movies for directories in \\\"\" + Environment.getExternalStorageDirectory().getAbsolutePath() + \"\\\".\");\n \n+                    // Get primary storage root \"/storage/emulated/0\" symlink\n                     File sharedDir = Environment.getExternalStorageDirectory();\n                     Os.symlink(sharedDir.getAbsolutePath(), new File(storageDir, \"shared\").getAbsolutePath());\n \n@@ -315,9 +316,17 @@ public void run() {\n                         Os.symlink(audiobooksDir.getAbsolutePath(), new File(storageDir, \"audiobooks\").getAbsolutePath());\n                     }\n \n-                    final File[] dirs = context.getExternalFilesDirs(null);\n-                    if (dirs != null && dirs.length > 1) {\n-                        for (int i = 1; i < dirs.length; i++) {\n+                    // Dir 0 should ideally be for primary storage\n+                    // https://cs.android.com/android/platform/superproject/+/android-12.0.0_r32:frameworks/base/core/java/android/app/ContextImpl.java;l=818\n+                    // https://cs.android.com/android/platform/superproject/+/android-12.0.0_r32:frameworks/base/core/java/android/os/Environment.java;l=219\n+                    // https://cs.android.com/android/platform/superproject/+/android-12.0.0_r32:frameworks/base/core/java/android/os/Environment.java;l=181\n+                    // https://cs.android.com/android/platform/superproject/+/android-12.0.0_r32:frameworks/base/services/core/java/com/android/server/StorageManagerService.java;l=3796\n+                    // https://cs.android.com/android/platform/superproject/+/android-7.0.0_r36:frameworks/base/services/core/java/com/android/server/MountService.java;l=3053\n+\n+                    // Create \"Android/data/com.termux\" symlinks\n+                    File[] dirs = context.getExternalFilesDirs(null);\n+                    if (dirs != null && dirs.length > 0) {\n+                        for (int i = 0; i < dirs.length; i++) {\n                             File dir = dirs[i];\n                             if (dir == null) continue;\n                             String symlinkName = \"external-\" + i;\n@@ -326,6 +335,18 @@ public void run() {\n                         }\n                     }\n \n+                    // Create \"Android/media/com.termux\" symlinks\n+                    dirs = context.getExternalMediaDirs();\n+                    if (dirs != null && dirs.length > 0) {\n+                        for (int i = 0; i < dirs.length; i++) {\n+                            File dir = dirs[i];\n+                            if (dir == null) continue;\n+                            String symlinkName = \"media-\" + i;\n+                            Logger.logInfo(LOG_TAG, \"Setting up storage symlinks at ~/storage/\" + symlinkName + \" for \\\"\" + dir.getAbsolutePath() + \"\\\".\");\n+                            Os.symlink(dir.getAbsolutePath(), new File(storageDir, symlinkName).getAbsolutePath());\n+                        }\n+                    }\n+\n                     Logger.logInfo(LOG_TAG, \"Storage symlinks created successfully.\");\n                 } catch (Exception e) {\n                     Logger.logErrorAndShowToast(context, LOG_TAG, e.getMessage());",
    "output": "Add `media-*` symlinks to `Android/media` for all storages and `external-0` symlink to `Android/media` of primary storage"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxInstaller.java b/app/src/main/java/com/termux/app/TermuxInstaller.java\n--- a/app/src/main/java/com/termux/app/TermuxInstaller.java\n+++ b/app/src/main/java/com/termux/app/TermuxInstaller.java\n@@ -289,6 +289,9 @@ public void run() {\n                     File sharedDir = Environment.getExternalStorageDirectory();\n                     Os.symlink(sharedDir.getAbsolutePath(), new File(storageDir, \"shared\").getAbsolutePath());\n \n+                    File documentsDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS);\n+                    Os.symlink(documentsDir.getAbsolutePath(), new File(storageDir, \"documents\").getAbsolutePath());\n+\n                     File downloadsDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS);\n                     Os.symlink(downloadsDir.getAbsolutePath(), new File(storageDir, \"downloads\").getAbsolutePath());\n \n@@ -304,6 +307,14 @@ public void run() {\n                     File moviesDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_MOVIES);\n                     Os.symlink(moviesDir.getAbsolutePath(), new File(storageDir, \"movies\").getAbsolutePath());\n \n+                    File podcastsDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PODCASTS);\n+                    Os.symlink(podcastsDir.getAbsolutePath(), new File(storageDir, \"podcasts\").getAbsolutePath());\n+\n+                    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.Q) {\n+                        File audiobooksDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_AUDIOBOOKS);\n+                        Os.symlink(audiobooksDir.getAbsolutePath(), new File(storageDir, \"audiobooks\").getAbsolutePath());\n+                    }\n+\n                     final File[] dirs = context.getExternalFilesDirs(null);\n                     if (dirs != null && dirs.length > 1) {\n                         for (int i = 1; i < dirs.length; i++) {",
    "output": "Add `~/storage` symlinks for `documents`, `podcasts` and `audiobooks`"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/activities/SettingsActivity.java b/app/src/main/java/com/termux/app/activities/SettingsActivity.java\n--- a/app/src/main/java/com/termux/app/activities/SettingsActivity.java\n+++ b/app/src/main/java/com/termux/app/activities/SettingsActivity.java\n@@ -60,12 +60,17 @@ public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {\n \n             setPreferencesFromResource(R.xml.root_preferences, rootKey);\n \n-            configureTermuxAPIPreference(context);\n-            configureTermuxFloatPreference(context);\n-            configureTermuxTaskerPreference(context);\n-            configureTermuxWidgetPreference(context);\n-            configureAboutPreference(context);\n-            configureDonatePreference(context);\n+            new Thread() {\n+                @Override\n+                public void run() {\n+                    configureTermuxAPIPreference(context);\n+                    configureTermuxFloatPreference(context);\n+                    configureTermuxTaskerPreference(context);\n+                    configureTermuxWidgetPreference(context);\n+                    configureAboutPreference(context);\n+                    configureDonatePreference(context);\n+                }\n+            }.start();\n         }\n \n         private void configureTermuxAPIPreference(@NonNull Context context) {",
    "output": "Use thread to setup settings components"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -907,8 +907,9 @@ public static void updateTermuxActivityStyling(Context context, boolean recreate\n \n     private void registerTermuxActivityBroadcastReceiver() {\n         IntentFilter intentFilter = new IntentFilter();\n-        intentFilter.addAction(TERMUX_ACTIVITY.ACTION_REQUEST_PERMISSIONS);\n+        intentFilter.addAction(TERMUX_ACTIVITY.ACTION_NOTIFY_APP_CRASH);\n         intentFilter.addAction(TERMUX_ACTIVITY.ACTION_RELOAD_STYLE);\n+        intentFilter.addAction(TERMUX_ACTIVITY.ACTION_REQUEST_PERMISSIONS);\n \n         registerReceiver(mTermuxActivityBroadcastReceiver, intentFilter);\n     }\n@@ -936,14 +937,18 @@ public void onReceive(Context context, Intent intent) {\n                 fixTermuxActivityBroadcastReceieverIntent(intent);\n \n                 switch (intent.getAction()) {\n-                    case TERMUX_ACTIVITY.ACTION_REQUEST_PERMISSIONS:\n-                        Logger.logDebug(LOG_TAG, \"Received intent to request storage permissions\");\n-                        requestStoragePermission(false);\n+                    case TERMUX_ACTIVITY.ACTION_NOTIFY_APP_CRASH:\n+                        Logger.logDebug(LOG_TAG, \"Received intent to notify app crash\");\n+                        TermuxCrashUtils.notifyAppCrashFromCrashLogFile(context, LOG_TAG);\n                         return;\n                     case TERMUX_ACTIVITY.ACTION_RELOAD_STYLE:\n                         Logger.logDebug(LOG_TAG, \"Received intent to reload styling\");\n                         reloadActivityStyling(intent.getBooleanExtra(TERMUX_ACTIVITY.EXTRA_RECREATE_ACTIVITY, true));\n                         return;\n+                    case TERMUX_ACTIVITY.ACTION_REQUEST_PERMISSIONS:\n+                        Logger.logDebug(LOG_TAG, \"Received intent to request storage permissions\");\n+                        requestStoragePermission(false);\n+                        return;\n                     default:\n                 }\n             }\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n@@ -8,7 +8,7 @@\n import java.util.List;\n \n /*\n- * Version: v0.37.0\n+ * Version: v0.38.0\n  * SPDX-License-Identifier: MIT\n  *\n  * Changelog\n@@ -223,6 +223,9 @@\n  *\n  * - 0.37.0 (2022-03-15)\n  *  - Added `TERMUX_API_APT_*`.\n+ *\n+ * - 0.38.0 (2022-03-16)\n+ *      - Added `TERMUX_APP.TERMUX_ACTIVITY.ACTION_NOTIFY_APP_CRASH`.\n  */\n \n /**\n@@ -874,8 +877,9 @@ public static final class TERMUX_ACTIVITY {\n             public static final String EXTRA_FAILSAFE_SESSION = TermuxConstants.TERMUX_PACKAGE_NAME + \".app.failsafe_session\"; // Default: \"com.termux.app.failsafe_session\"\n \n \n-            /** Intent action to make termux request storage permissions */\n-            public static final String ACTION_REQUEST_PERMISSIONS = TermuxConstants.TERMUX_PACKAGE_NAME + \".app.request_storage_permissions\"; // Default: \"com.termux.app.request_storage_permissions\"\n+            /** Intent action to make termux app notify user that a crash happened. */\n+            public static final String ACTION_NOTIFY_APP_CRASH = TermuxConstants.TERMUX_PACKAGE_NAME + \".app.notify_app_crash\"; // Default: \"com.termux.app.notify_app_crash\"\n+\n \n             /** Intent action to make termux reload its termux session styling */\n             public static final String ACTION_RELOAD_STYLE = TermuxConstants.TERMUX_PACKAGE_NAME + \".app.reload_style\"; // Default: \"com.termux.app.reload_style\"\n@@ -886,6 +890,9 @@ public static final class TERMUX_ACTIVITY {\n             /**  Intent {@code boolean} extra for whether to recreate activity for the TERMUX_ACTIVITY.ACTION_RELOAD_STYLE intent. */\n             public static final String EXTRA_RECREATE_ACTIVITY = TERMUX_APP.TERMUX_ACTIVITY_NAME + \".EXTRA_RECREATE_ACTIVITY\"; // Default: \"com.termux.app.TermuxActivity.EXTRA_RECREATE_ACTIVITY\"\n \n+\n+            /** Intent action to make termux request storage permissions */\n+            public static final String ACTION_REQUEST_PERMISSIONS = TermuxConstants.TERMUX_PACKAGE_NAME + \".app.request_storage_permissions\"; // Default: \"com.termux.app.request_storage_permissions\"\n         }\n \n \n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/crash/TermuxCrashUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/crash/TermuxCrashUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/crash/TermuxCrashUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/crash/TermuxCrashUtils.java\n@@ -34,12 +34,70 @@\n \n public class TermuxCrashUtils implements CrashHandler.CrashHandlerClient {\n \n+    public enum TYPE {\n+        UNCAUGHT_EXCEPTION,\n+        CAUGHT_EXCEPTION;\n+    }\n+\n+    private final TYPE mType;\n+\n+    private static final String LOG_TAG = \"TermuxCrashUtils\";\n+\n+    TermuxCrashUtils(TYPE type) {\n+        mType = type;\n+    }\n+\n     /**\n      * Set default uncaught crash handler of current thread to {@link CrashHandler} for Termux app\n      * and its plugin to log crashes at {@link TermuxConstants#TERMUX_CRASH_LOG_FILE_PATH}.\n      */\n     public static void setCrashHandler(@NonNull final Context context) {\n-        CrashHandler.setCrashHandler(context, new TermuxCrashUtils());\n+        CrashHandler.setCrashHandler(context, new TermuxCrashUtils(TYPE.UNCAUGHT_EXCEPTION));\n+    }\n+\n+    /**\n+     * Log a crash to {@link TermuxConstants#TERMUX_CRASH_LOG_FILE_PATH} and notify termux app\n+     * by sending it the {@link TERMUX_APP.TERMUX_ACTIVITY#ACTION_NOTIFY_APP_CRASH} broadcast.\n+     *\n+     * @param context The {@link Context} for operations.\n+     * @param throwable The {@link Throwable} thrown for the crash.\n+     */\n+    public static void logCrash(@NonNull final Context context, final Throwable throwable) {\n+        if (throwable == null) return;\n+        CrashHandler.logCrash(context, new TermuxCrashUtils(TYPE.CAUGHT_EXCEPTION), Thread.currentThread(), throwable);\n+    }\n+\n+    @Override\n+    public boolean onPreLogCrash(Context context, Thread thread, Throwable throwable) {\n+        return false;\n+    }\n+\n+    @Override\n+    public void onPostLogCrash(final Context currentPackageContext, Thread thread, Throwable throwable) {\n+        if (currentPackageContext == null) return;\n+        String currentPackageName = currentPackageContext.getPackageName();\n+\n+        // Do not notify if is a non-termux app\n+        final Context context = TermuxUtils.getTermuxPackageContext(currentPackageContext);\n+        if (context == null) {\n+            Logger.logWarn(LOG_TAG, \"Ignoring call to onPostLogCrash() since failed to get \\\"\" + TermuxConstants.TERMUX_PACKAGE_NAME + \"\\\" package context from \\\"\" + currentPackageName + \"\\\" context\");\n+            return;\n+        }\n+\n+        // If an uncaught exception, then do not notify since the termux app itself would be crashing\n+        if (TYPE.UNCAUGHT_EXCEPTION.equals(mType) && TermuxConstants.TERMUX_PACKAGE_NAME.equals(currentPackageName))\n+            return;\n+\n+        String message = TERMUX_APP.TERMUX_ACTIVITY_NAME + \" that \\\"\" + currentPackageName + \"\\\" app crashed\";\n+\n+       try {\n+           Logger.logInfo(LOG_TAG, \"Sending broadcast to notify \" + message);\n+            Intent intent = new Intent(TERMUX_APP.TERMUX_ACTIVITY.ACTION_NOTIFY_APP_CRASH);\n+            intent.setPackage(TermuxConstants.TERMUX_PACKAGE_NAME);\n+            context.sendBroadcast(intent);\n+        } catch (Exception e) {\n+            Logger.logStackTraceWithMessage(LOG_TAG,\"Failed to notify \" + message, e);\n+        }\n     }\n \n     @NonNull",
    "output": "Add support for `ACTION_NOTIFY_APP_CRASH` in receiver registered by `TermuxActivity` to notify users of plugin app crashes"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/crash/CrashHandler.java b/termux-shared/src/main/java/com/termux/shared/crash/CrashHandler.java\n--- a/termux-shared/src/main/java/com/termux/shared/crash/CrashHandler.java\n+++ b/termux-shared/src/main/java/com/termux/shared/crash/CrashHandler.java\n@@ -30,7 +30,8 @@ private CrashHandler(@NonNull final Context context, @NonNull final CrashHandler\n     }\n \n     public void uncaughtException(@NonNull Thread thread, @NonNull Throwable throwable) {\n-        logCrash(mContext, mCrashHandlerClient, thread, throwable);\n+        Logger.logInfo(LOG_TAG, \"uncaughtException() for \" + thread +  \": \" + throwable.getMessage());\n+        logCrash(thread, throwable);\n         defaultUEH.uncaughtException(thread, throwable);\n     }\n \n@@ -44,14 +45,30 @@ public static void setCrashHandler(@NonNull final Context context, @NonNull fina\n     }\n \n     /**\n-     * Log a crash in the crash log file at {@code crashlogFilePath}.\n+     * Log a crash in the crash log file at path returned by {@link CrashHandlerClient#getCrashLogFilePath(Context)}.\n      *\n      * @param context The {@link Context} for operations.\n      * @param crashHandlerClient The {@link CrashHandlerClient} implementation.\n      * @param thread The {@link Thread} in which the crash happened.\n      * @param throwable The {@link Throwable} thrown for the crash.\n      */\n-    public static void logCrash(@NonNull final Context context, @NonNull final CrashHandlerClient crashHandlerClient, final Thread thread, final Throwable throwable) {\n+    public static void logCrash(@NonNull Context context,\n+                                @NonNull CrashHandlerClient crashHandlerClient,\n+                                @NonNull Thread thread,  @NonNull Throwable throwable) {\n+        Logger.logInfo(LOG_TAG, \"logCrash() for \" + thread +  \": \" + throwable.getMessage());\n+        new CrashHandler(context, crashHandlerClient).logCrash(thread, throwable);\n+    }\n+\n+    public void logCrash(@NonNull Thread thread, @NonNull Throwable throwable) {\n+        if (!mCrashHandlerClient.onPreLogCrash(mContext, thread, throwable)) {\n+            logCrashToFile(mContext, mCrashHandlerClient, thread, throwable);\n+            mCrashHandlerClient.onPostLogCrash(mContext, thread, throwable);\n+        }\n+    }\n+\n+    public void logCrashToFile(@NonNull Context context,\n+                               @NonNull CrashHandlerClient crashHandlerClient,\n+                               @NonNull Thread thread, @NonNull Throwable throwable) {\n         StringBuilder reportString = new StringBuilder();\n \n         reportString.append(\"## Crash Details\\n\");\n@@ -79,6 +96,26 @@ public static void logCrash(@NonNull final Context context, @NonNull final Crash\n \n     public interface CrashHandlerClient {\n \n+        /**\n+         * Called before {@link #logCrashToFile(Context, CrashHandlerClient, Thread, Throwable)} is called.\n+         *\n+         * @param context The {@link Context} passed to {@link CrashHandler#CrashHandler(Context, CrashHandlerClient)}.\n+         * @param thread The {@link Thread} in which the crash happened.\n+         * @param throwable The {@link Throwable} thrown for the crash.\n+         * @return Should return {@code true} if crash has been handled and should not be logged,\n+         * otherwise {@code false}.\n+         */\n+        boolean onPreLogCrash(Context context, Thread thread, Throwable throwable);\n+\n+        /**\n+         * Called after {@link #logCrashToFile(Context, CrashHandlerClient, Thread, Throwable)} is called.\n+         *\n+         * @param context The {@link Context} passed to {@link CrashHandler#CrashHandler(Context, CrashHandlerClient)}.\n+         * @param thread The {@link Thread} in which the crash happened.\n+         * @param throwable The {@link Throwable} thrown for the crash.\n+         */\n+        void onPostLogCrash(Context context, Thread thread, Throwable throwable);\n+\n         /**\n          * Get crash log file path.\n          *",
    "output": "Add support for `onPreLogCrash()` and `onPostLogCrash()` in `CrashHandler` so that `CrashHandlerClient` can decide which exceptions to log and add custom logic"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -648,7 +648,7 @@ private void startTermuxActivity() {\n         } else {\n             TermuxAppSharedPreferences preferences = TermuxAppSharedPreferences.build(this);\n             if (preferences == null) return;\n-            if (preferences.arePluginErrorNotificationsEnabled())\n+            if (preferences.arePluginErrorNotificationsEnabled(false))\n                 Logger.showToast(this, this.getString(R.string.error_display_over_other_apps_permission_not_granted), true);\n         }\n     }\n\ndiff --git a/app/src/main/java/com/termux/app/fragments/settings/termux/DebuggingPreferencesFragment.java b/app/src/main/java/com/termux/app/fragments/settings/termux/DebuggingPreferencesFragment.java\n--- a/app/src/main/java/com/termux/app/fragments/settings/termux/DebuggingPreferencesFragment.java\n+++ b/app/src/main/java/com/termux/app/fragments/settings/termux/DebuggingPreferencesFragment.java\n@@ -144,9 +144,9 @@ public boolean getBoolean(String key, boolean defValue) {\n             case \"terminal_view_key_logging_enabled\":\n                 return mPreferences.isTerminalViewKeyLoggingEnabled();\n             case \"plugin_error_notifications_enabled\":\n-                return mPreferences.arePluginErrorNotificationsEnabled();\n+                return mPreferences.arePluginErrorNotificationsEnabled(false);\n             case \"crash_report_notifications_enabled\":\n-                return mPreferences.areCrashReportNotificationsEnabled();\n+                return mPreferences.areCrashReportNotificationsEnabled(false);\n             default:\n                 return false;\n         }\n\ndiff --git a/app/src/main/java/com/termux/app/utils/PluginUtils.java b/app/src/main/java/com/termux/app/utils/PluginUtils.java\n--- a/app/src/main/java/com/termux/app/utils/PluginUtils.java\n+++ b/app/src/main/java/com/termux/app/utils/PluginUtils.java\n@@ -241,7 +241,7 @@ public static void sendPluginCommandErrorNotification(Context context, String lo\n         if (preferences == null) return;\n \n         // If user has disabled notifications for plugin commands, then just return\n-        if (!preferences.arePluginErrorNotificationsEnabled() && !forceNotification)\n+        if (!preferences.arePluginErrorNotificationsEnabled(true) && !forceNotification)\n             return;\n \n         logTag = DataUtils.getDefaultIfNull(logTag, LOG_TAG);\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/settings/preferences/TermuxAppSharedPreferences.java b/termux-shared/src/main/java/com/termux/shared/termux/settings/preferences/TermuxAppSharedPreferences.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/settings/preferences/TermuxAppSharedPreferences.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/settings/preferences/TermuxAppSharedPreferences.java\n@@ -20,6 +20,7 @@ public class TermuxAppSharedPreferences {\n \n     private final Context mContext;\n     private final SharedPreferences mSharedPreferences;\n+    private final SharedPreferences mMultiProcessSharedPreferences;\n \n     private int MIN_FONTSIZE;\n     private int MAX_FONTSIZE;\n@@ -30,6 +31,8 @@ public class TermuxAppSharedPreferences {\n     private TermuxAppSharedPreferences(@NonNull Context context) {\n         mContext = context;\n         mSharedPreferences = getPrivateSharedPreferences(mContext);\n+        mMultiProcessSharedPreferences = getPrivateAndMultiProcessSharedPreferences(mContext);\n+\n \n         setFontVariables(context);\n     }\n@@ -73,6 +76,12 @@ private static SharedPreferences getPrivateSharedPreferences(Context context) {\n     }\n \n \n+    private static SharedPreferences getPrivateAndMultiProcessSharedPreferences(Context context) {\n+        if (context == null) return null;\n+        return SharedPreferenceUtils.getPrivateAndMultiProcessSharedPreferences(context, TermuxConstants.TERMUX_DEFAULT_PREFERENCES_FILE_BASENAME_WITHOUT_EXTENSION);\n+    }\n+\n+\n \n     public boolean shouldShowTerminalToolbar() {\n         return SharedPreferenceUtils.getBoolean(mSharedPreferences, TERMUX_APP.KEY_SHOW_TERMINAL_TOOLBAR, TERMUX_APP.DEFAULT_VALUE_SHOW_TERMINAL_TOOLBAR);\n@@ -218,8 +227,11 @@ public void setTerminalViewKeyLoggingEnabled(boolean value) {\n \n \n \n-    public boolean arePluginErrorNotificationsEnabled() {\n-        return SharedPreferenceUtils.getBoolean(mSharedPreferences, TERMUX_APP.KEY_PLUGIN_ERROR_NOTIFICATIONS_ENABLED, TERMUX_APP.DEFAULT_VALUE_PLUGIN_ERROR_NOTIFICATIONS_ENABLED);\n+    public boolean arePluginErrorNotificationsEnabled(boolean readFromFile) {\n+        if (readFromFile)\n+            return SharedPreferenceUtils.getBoolean(mMultiProcessSharedPreferences, TERMUX_APP.KEY_PLUGIN_ERROR_NOTIFICATIONS_ENABLED, TERMUX_APP.DEFAULT_VALUE_PLUGIN_ERROR_NOTIFICATIONS_ENABLED);\n+        else\n+            return SharedPreferenceUtils.getBoolean(mSharedPreferences, TERMUX_APP.KEY_PLUGIN_ERROR_NOTIFICATIONS_ENABLED, TERMUX_APP.DEFAULT_VALUE_PLUGIN_ERROR_NOTIFICATIONS_ENABLED);\n     }\n \n     public void setPluginErrorNotificationsEnabled(boolean value) {\n@@ -228,8 +240,11 @@ public void setPluginErrorNotificationsEnabled(boolean value) {\n \n \n \n-    public boolean areCrashReportNotificationsEnabled() {\n-        return SharedPreferenceUtils.getBoolean(mSharedPreferences, TERMUX_APP.KEY_CRASH_REPORT_NOTIFICATIONS_ENABLED, TERMUX_APP.DEFAULT_VALUE_CRASH_REPORT_NOTIFICATIONS_ENABLED);\n+    public boolean areCrashReportNotificationsEnabled(boolean readFromFile) {\n+        if (readFromFile)\n+            return SharedPreferenceUtils.getBoolean(mMultiProcessSharedPreferences, TERMUX_APP.KEY_CRASH_REPORT_NOTIFICATIONS_ENABLED, TERMUX_APP.DEFAULT_VALUE_CRASH_REPORT_NOTIFICATIONS_ENABLED);\n+       else\n+            return SharedPreferenceUtils.getBoolean(mSharedPreferences, TERMUX_APP.KEY_CRASH_REPORT_NOTIFICATIONS_ENABLED, TERMUX_APP.DEFAULT_VALUE_CRASH_REPORT_NOTIFICATIONS_ENABLED);\n     }\n \n     public void setCrashReportNotificationsEnabled(boolean value) {",
    "output": "Add multi process support in `TermuxAppSharedPreferences` since plugin apps may need to read values modified by termux app process"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n@@ -37,6 +37,8 @@ public class TermuxUtils {\n     public enum AppInfoMode {\n         /** Get info for Termux app only. */\n         TERMUX_PACKAGE,\n+        /** Get info for Termux app and plugin app if context is of plugin app. */\n+        TERMUX_AND_PLUGIN_PACKAGE,\n         /** Get info for Termux app and its plugins listed in {@link TermuxConstants#TERMUX_PLUGIN_APP_PACKAGE_NAMES_LIST}. */\n         TERMUX_AND_PLUGIN_PACKAGES,\n         /* Get info for all the Termux app plugins listed in {@link TermuxConstants#TERMUX_PLUGIN_APP_PACKAGE_NAMES_LIST}. */\n@@ -259,6 +261,9 @@ public static String getAppInfoMarkdownString(final Context currentPackageContex\n             case TERMUX_PACKAGE:\n                 return getAppInfoMarkdownString(currentPackageContext, false);\n \n+            case TERMUX_AND_PLUGIN_PACKAGE:\n+                return getAppInfoMarkdownString(currentPackageContext, true);\n+\n             case TERMUX_AND_PLUGIN_PACKAGES:\n                 appInfo.append(TermuxUtils.getAppInfoMarkdownString(currentPackageContext, false));\n ",
    "output": "Add support for getting termux app and plugin app info only in `TermuxUtils.getAppInfoMarkdownString()`"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n@@ -8,7 +8,7 @@\n import java.util.List;\n \n /*\n- * Version: v0.36.0\n+ * Version: v0.37.0\n  * SPDX-License-Identifier: MIT\n  *\n  * Changelog\n@@ -220,6 +220,9 @@\n  *\n  * - 0.36.0 (2022-03-10)\n  *      - Added `TERMUX_APP.TERMUX_SERVICE.EXTRA_RUNNER` and `TERMUX_APP.RUN_COMMAND_SERVICE.EXTRA_RUNNER`\n+ *\n+ * - 0.37.0 (2022-03-15)\n+ *  - Added `TERMUX_API_APT_*`.\n  */\n \n /**\n@@ -487,6 +490,16 @@ public final class TermuxConstants {\n     public static final String TERMUX_X11_PACKAGES_GITHUB_ISSUES_REPO_URL = TERMUX_X11_PACKAGES_GITHUB_REPO_URL + \"/issues\"; // Default: \"https://github.com/termux/x11-packages/issues\"\n \n \n+    /** Termux API apt package name */\n+    public static final String TERMUX_API_APT_PACKAGE_NAME = \"termux-api\"; // Default: \"termux-api\"\n+    /** Termux API apt Github repo name */\n+    public static final String TERMUX_API_APT_GITHUB_REPO_NAME = \"termux-api-package\"; // Default: \"termux-api-package\"\n+    /** Termux API apt Github repo url */\n+    public static final String TERMUX_API_APT_GITHUB_REPO_URL = TERMUX_GITHUB_ORGANIZATION_URL + \"/\" + TERMUX_API_APT_GITHUB_REPO_NAME; // Default: \"https://github.com/termux/termux-api-package\"\n+    /** Termux API apt Github issues repo url */\n+    public static final String TERMUX_API_APT_GITHUB_ISSUES_REPO_URL = TERMUX_API_APT_GITHUB_REPO_URL + \"/issues\"; // Default: \"https://github.com/termux/termux-api-package/issues\"\n+\n+\n \n \n ",
    "output": "Add `TERMUX_API_APT_*` constants"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/android/PermissionUtils.java b/termux-shared/src/main/java/com/termux/shared/android/PermissionUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/android/PermissionUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/android/PermissionUtils.java\n@@ -133,9 +133,9 @@ public static boolean requestPermissions(@NonNull Context context, @NonNull Stri\n \n                 try {\n                     if (context instanceof AppCompatActivity)\n-                        ((AppCompatActivity) context).requestPermissions(new String[]{permission}, requestCode);\n+                        ((AppCompatActivity) context).requestPermissions(permissions, requestCode);\n                     else if (context instanceof Activity)\n-                        ((Activity) context).requestPermissions(new String[]{permission}, requestCode);\n+                        ((Activity) context).requestPermissions(permissions, requestCode);\n                     else {\n                         Error.logErrorAndShowToast(context, LOG_TAG,\n                             FunctionErrno.ERRNO_PARAMETER_NOT_INSTANCE_OF.getError(\"context\", \"requestPermissions\", \"Activity or AppCompatActivity\"));\n@@ -147,6 +147,8 @@ else if (context instanceof Activity)\n                     Logger.showToast(context, errmsg + \"\\n\" + e.getMessage(), true);\n                     return false;\n                 }\n+\n+                break;\n             }\n         }\n ",
    "output": "Fix `PermissionUtils.requestPermissions()` not requesting multiple permissions correctly"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/settings/properties/SharedProperties.java b/termux-shared/src/main/java/com/termux/shared/settings/properties/SharedProperties.java\n--- a/termux-shared/src/main/java/com/termux/shared/settings/properties/SharedProperties.java\n+++ b/termux-shared/src/main/java/com/termux/shared/settings/properties/SharedProperties.java\n@@ -91,7 +91,7 @@ public class SharedProperties {\n      * @param sharedPropertiesParser The implementation of the {@link SharedPropertiesParser} interface.\n      */\n     public SharedProperties(@NonNull Context context, @Nullable File propertiesFile, Set<String> propertiesList, @NonNull SharedPropertiesParser sharedPropertiesParser) {\n-        mContext = context;\n+        mContext = context.getApplicationContext();\n         mPropertiesFile = propertiesFile;\n         mPropertiesList = propertiesList;\n         mSharedPropertiesParser = sharedPropertiesParser;\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/settings/properties/TermuxSharedProperties.java b/termux-shared/src/main/java/com/termux/shared/termux/settings/properties/TermuxSharedProperties.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/settings/properties/TermuxSharedProperties.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/settings/properties/TermuxSharedProperties.java\n@@ -26,7 +26,7 @@ public abstract class TermuxSharedProperties {\n \n     public TermuxSharedProperties(@NonNull Context context, @NonNull String label, File propertiesFile,\n                                   @NonNull Set<String> propertiesList, @NonNull SharedPropertiesParser sharedPropertiesParser) {\n-        mContext = context;\n+        mContext = context.getApplicationContext();\n         mLabel = label;\n         mPropertiesFile = propertiesFile;\n         mSharedProperties = new SharedProperties(context, mPropertiesFile, propertiesList, sharedPropertiesParser);",
    "output": "Use application context for SharedProperties"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -830,7 +830,7 @@ public boolean isVisible() {\n         return mIsVisible;\n     }\n \n-    public boolean isIsOnResumeAfterOnCreate() {\n+    public boolean isOnResumeAfterOnCreate() {\n         return mIsOnResumeAfterOnCreate;\n     }\n ",
    "output": "Fix typo from 43858dfb"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -830,7 +830,7 @@ public boolean isVisible() {\n         return mIsVisible;\n     }\n \n-    public boolean ismIsOnResumeAfterOnCreate() {\n+    public boolean isIsOnResumeAfterOnCreate() {\n         return mIsOnResumeAfterOnCreate;\n     }\n ",
    "output": "Fix typo from 43858dfb"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -248,14 +248,24 @@ public void onCreate(Bundle savedInstanceState) {\n \n         registerForContextMenu(mTerminalView);\n \n-        // Start the {@link TermuxService} and make it run regardless of who is bound to it\n-        Intent serviceIntent = new Intent(this, TermuxService.class);\n-        startService(serviceIntent);\n-\n-        // Attempt to bind to the service, this will call the {@link #onServiceConnected(ComponentName, IBinder)}\n-        // callback if it succeeds.\n-        if (!bindService(serviceIntent, this, 0))\n-            throw new RuntimeException(\"bindService() failed\");\n+        try {\n+            // Start the {@link TermuxService} and make it run regardless of who is bound to it\n+            Intent serviceIntent = new Intent(this, TermuxService.class);\n+            startService(serviceIntent);\n+\n+            // Attempt to bind to the service, this will call the {@link #onServiceConnected(ComponentName, IBinder)}\n+            // callback if it succeeds.\n+            if (!bindService(serviceIntent, this, 0))\n+                throw new RuntimeException(\"bindService() failed\");\n+        } catch (Exception e) {\n+            Logger.logStackTraceWithMessage(LOG_TAG,\"TermuxActivity failed to start TermuxService\", e);\n+            Logger.showToast(this,\n+                getString(e.getMessage() != null && e.getMessage().contains(\"app is in background\") ?\n+                    R.string.error_termux_service_start_failed_bg : R.string.error_termux_service_start_failed_general),\n+                true);\n+            mIsInvalidState = true;\n+            return;\n+        }\n \n         // Send the {@link TermuxConstants#BROADCAST_TERMUX_OPENED} broadcast to notify apps that Termux\n         // app has been opened.",
    "output": "Fix app crash if failed to start TermuxService while in background due to android bg restrictions"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -153,6 +153,13 @@ public final class TermuxActivity extends AppCompatActivity implements ServiceCo\n      */\n     private boolean isOnResumeAfterOnCreate = false;\n \n+    /**\n+     * If activity was restarted like due to call to {@link #recreate()} after receiving\n+     * {@link TERMUX_ACTIVITY#ACTION_RELOAD_STYLE}, system dark night mode was changed or activity\n+     * was killed by android.\n+     */\n+    private boolean mIsActivityRecreated = false;\n+\n     /**\n      * The {@link TermuxActivity} is in an invalid state and must not be run.\n      */\n@@ -175,6 +182,7 @@ public final class TermuxActivity extends AppCompatActivity implements ServiceCo\n     private static final int CONTEXT_MENU_REPORT_ID = 9;\n \n     private static final String ARG_TERMINAL_TOOLBAR_TEXT_INPUT = \"terminal_toolbar_text_input\";\n+    private static final String ARG_ACTIVITY_RECREATED = \"activity_recreated\";\n \n     private static final String LOG_TAG = \"TermuxActivity\";\n \n@@ -183,6 +191,9 @@ public void onCreate(Bundle savedInstanceState) {\n         Logger.logDebug(LOG_TAG, \"onCreate\");\n         isOnResumeAfterOnCreate = true;\n \n+        if (savedInstanceState != null)\n+            mIsActivityRecreated = savedInstanceState.getBoolean(ARG_ACTIVITY_RECREATED, false);\n+\n         // Check if a crash happened on last run of the app and show a\n         // notification with the crash details if it did\n         CrashUtils.notifyAppCrashOnLastRun(this, LOG_TAG);\n@@ -339,6 +350,7 @@ public void onSaveInstanceState(@NonNull Bundle savedInstanceState) {\n \n         super.onSaveInstanceState(savedInstanceState);\n         saveTerminalToolbarTextInput(savedInstanceState);\n+        savedInstanceState.putBoolean(ARG_ACTIVITY_RECREATED, true);\n     }\n \n \n@@ -359,15 +371,17 @@ public void onServiceConnected(ComponentName componentName, IBinder service) {\n \n         setTermuxSessionsListView();\n \n+        final Intent intent = getIntent();\n+        setIntent(null);\n+\n         if (mTermuxService.isTermuxSessionsEmpty()) {\n             if (mIsVisible) {\n                 TermuxInstaller.setupBootstrapIfNeeded(TermuxActivity.this, () -> {\n                     if (mTermuxService == null) return; // Activity might have been destroyed.\n                     try {\n-                        Bundle bundle = getIntent().getExtras();\n                         boolean launchFailsafe = false;\n-                        if (bundle != null) {\n-                            launchFailsafe = bundle.getBoolean(TERMUX_ACTIVITY.EXTRA_FAILSAFE_SESSION, false);\n+                        if (intent != null && intent.getExtras() != null) {\n+                            launchFailsafe = intent.getExtras().getBoolean(TERMUX_ACTIVITY.EXTRA_FAILSAFE_SESSION, false);\n                         }\n                         mTermuxTerminalSessionClient.addNewSession(launchFailsafe, null);\n                     } catch (WindowManager.BadTokenException e) {\n@@ -379,10 +393,12 @@ public void onServiceConnected(ComponentName componentName, IBinder service) {\n                 finishActivityIfNotFinishing();\n             }\n         } else {\n-            Intent i = getIntent();\n-            if (i != null && Intent.ACTION_RUN.equals(i.getAction())) {\n+            // If termux was started from launcher \"New session\" shortcut and activity is recreated,\n+            // then the original intent will be re-delivered, resulting in a new session being re-added\n+            // each time.\n+            if (!mIsActivityRecreated && intent != null && Intent.ACTION_RUN.equals(intent.getAction())) {\n                 // Android 7.1 app shortcut from res/xml/shortcuts.xml.\n-                boolean isFailSafe = i.getBooleanExtra(TERMUX_ACTIVITY.EXTRA_FAILSAFE_SESSION, false);\n+                boolean isFailSafe = intent.getBooleanExtra(TERMUX_ACTIVITY.EXTRA_FAILSAFE_SESSION, false);\n                 mTermuxTerminalSessionClient.addNewSession(isFailSafe, null);\n             } else {\n                 mTermuxTerminalSessionClient.setCurrentSession(mTermuxTerminalSessionClient.getCurrentStoredSessionOrLast());\n@@ -541,7 +557,7 @@ private void setToggleKeyboardView() {\n         });\n \n         findViewById(R.id.toggle_keyboard_button).setOnLongClickListener(v -> {\n-            toggleTerminalToolbar();\n+            //toggleTerminalToolbar();\n             return true;\n         });\n     }\n@@ -808,6 +824,10 @@ public boolean isOnResumeAfterOnCreate() {\n         return isOnResumeAfterOnCreate;\n     }\n \n+    public boolean isActivityRecreated() {\n+        return mIsActivityRecreated;\n+    }\n+\n \n \n     public TermuxService getTermuxService() {\n\ndiff --git a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n@@ -105,7 +105,7 @@ public void onStart() {\n      */\n     public void onResume() {\n         // Show the soft keyboard if required\n-        setSoftKeyboardState(true, false);\n+        setSoftKeyboardState(true, mActivity.isActivityRecreated());\n \n         mTerminalCursorBlinkerStateAlreadySet = false;\n ",
    "output": "Fix terminal sessions being re-added if \"New Session\" shortcut or termux-reload-settings was used"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/shell/command/runner/app/AppShell.java b/termux-shared/src/main/java/com/termux/shared/shell/command/runner/app/AppShell.java\n--- a/termux-shared/src/main/java/com/termux/shared/shell/command/runner/app/AppShell.java\n+++ b/termux-shared/src/main/java/com/termux/shared/shell/command/runner/app/AppShell.java\n@@ -74,7 +74,7 @@ public static AppShell execute(@NonNull final Context context, @NonNull Executio\n         if (executionCommand.workingDirectory.isEmpty())\n             executionCommand.workingDirectory = \"/\";\n \n-        String[] env = shellEnvironmentClient.buildEnvironment(context, false, executionCommand.workingDirectory);\n+        String[] env = shellEnvironmentClient.buildEnvironment(context, executionCommand.isFailsafe, executionCommand.workingDirectory);\n \n         final String[] commandArray = shellEnvironmentClient.setupProcessArgs(executionCommand.executable, executionCommand.arguments);\n ",
    "output": "Fix AppShell failsafe env"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/settings/properties/TermuxAppSharedProperties.java b/app/src/main/java/com/termux/app/settings/properties/TermuxAppSharedProperties.java\n--- a/app/src/main/java/com/termux/app/settings/properties/TermuxAppSharedProperties.java\n+++ b/app/src/main/java/com/termux/app/settings/properties/TermuxAppSharedProperties.java\n@@ -22,7 +22,7 @@\n public class TermuxAppSharedProperties extends TermuxSharedProperties {\n \n     private ExtraKeysInfo mExtraKeysInfo;\n-    private List<KeyboardShortcut> mSessionShortcuts = new ArrayList<>();\n+    private List<KeyboardShortcut> mSessionShortcuts;\n \n     private static final String LOG_TAG = \"TermuxAppSharedProperties\";\n \n@@ -80,10 +80,7 @@ private void setExtraKeys() {\n      * Set the terminal sessions shortcuts.\n      */\n     private void setSessionShortcuts() {\n-        if (mSessionShortcuts == null)\n-            mSessionShortcuts = new ArrayList<>();\n-        else\n-            mSessionShortcuts.clear();\n+        mSessionShortcuts = new ArrayList<>();\n \n         // The {@link TermuxPropertyConstants#MAP_SESSION_SHORTCUTS} stores the session shortcut key and action pair\n         for (Map.Entry<String, Integer> entry : TermuxPropertyConstants.MAP_SESSION_SHORTCUTS.entrySet()) {",
    "output": "Fix termux session shortcuts not working after TermuxActivity recreation"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/interact/ShareUtils.java b/termux-shared/src/main/java/com/termux/shared/interact/ShareUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/interact/ShareUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/interact/ShareUtils.java\n@@ -34,7 +34,7 @@ public class ShareUtils {\n      * @param intent The intent that describes the choices that should be shown.\n      * @param title The title for choose menu.\n      */\n-    private static void openSystemAppChooser(final Context context, final Intent intent, final String title) {\n+    public static void openSystemAppChooser(final Context context, final Intent intent, final String title) {\n         if (context == null) return;\n \n         final Intent chooserIntent = new Intent(Intent.ACTION_CHOOSER);",
    "output": "Change ShareUtils.openSystemAppChooser() to public"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxOpenReceiver.java b/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n--- a/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n+++ b/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n@@ -35,7 +35,7 @@ public class TermuxOpenReceiver extends BroadcastReceiver {\n     public void onReceive(Context context, Intent intent) {\n         final Uri data = intent.getData();\n         if (data == null) {\n-            Logger.logError(LOG_TAG, \"termux-open: Called without intent data\");\n+            Logger.logError(LOG_TAG, \"Called without intent data\");\n             return;\n         }\n \n@@ -68,7 +68,7 @@ public void onReceive(Context context, Intent intent) {\n             try {\n                 context.startActivity(urlIntent);\n             } catch (ActivityNotFoundException e) {\n-                Logger.logError(LOG_TAG, \"termux-open: No app handles the url \" + data);\n+                Logger.logError(LOG_TAG, \"No app handles the url \" + data);\n             }\n             return;\n         }\n@@ -82,7 +82,7 @@ public void onReceive(Context context, Intent intent) {\n \n         final File fileToShare = new File(filePath);\n         if (!(fileToShare.isFile() && fileToShare.canRead())) {\n-            Logger.logError(LOG_TAG, \"termux-open: Not a readable file: '\" + fileToShare.getAbsolutePath() + \"'\");\n+            Logger.logError(LOG_TAG, \"Not a readable file: '\" + fileToShare.getAbsolutePath() + \"'\");\n             return;\n         }\n \n@@ -120,7 +120,7 @@ public void onReceive(Context context, Intent intent) {\n         try {\n             context.startActivity(sendIntent);\n         } catch (ActivityNotFoundException e) {\n-            Logger.logError(LOG_TAG, \"termux-open: No app handles the url \" + data);\n+            Logger.logError(LOG_TAG, \"No app handles the url \" + data);\n         }\n     }\n ",
    "output": "Remove duplicate log tag prefix from TermuxOpenReceiver"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/utils/PluginUtils.java b/app/src/main/java/com/termux/app/utils/PluginUtils.java\n--- a/app/src/main/java/com/termux/app/utils/PluginUtils.java\n+++ b/app/src/main/java/com/termux/app/utils/PluginUtils.java\n@@ -4,6 +4,7 @@\n import android.app.NotificationManager;\n import android.app.PendingIntent;\n import android.content.Context;\n+import android.os.Environment;\n \n import androidx.annotation.Nullable;\n ",
    "output": "Add accidentally removed import in 5252fbbe"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/activities/ReportActivity.java b/termux-shared/src/main/java/com/termux/shared/activities/ReportActivity.java\n--- a/termux-shared/src/main/java/com/termux/shared/activities/ReportActivity.java\n+++ b/termux-shared/src/main/java/com/termux/shared/activities/ReportActivity.java\n@@ -21,7 +21,7 @@\n import com.termux.shared.file.FileUtils;\n import com.termux.shared.file.filesystem.FileType;\n import com.termux.shared.logger.Logger;\n-import com.termux.shared.models.errors.Error;\n+import com.termux.shared.errors.Error;\n import com.termux.shared.termux.TermuxConstants;\n import com.termux.shared.markdown.MarkdownUtils;\n import com.termux.shared.interact.ShareUtils;\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/models/ReportInfo.java b/termux-shared/src/main/java/com/termux/shared/models/ReportInfo.java\n--- a/termux-shared/src/main/java/com/termux/shared/models/ReportInfo.java\n+++ b/termux-shared/src/main/java/com/termux/shared/models/ReportInfo.java\n@@ -1,7 +1,7 @@\n package com.termux.shared.models;\n \n import com.termux.shared.markdown.MarkdownUtils;\n-import com.termux.shared.termux.AndroidUtils;\n+import com.termux.shared.android.AndroidUtils;\n \n import java.io.Serializable;\n \n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/shell/command/ShellCommandConstants.java b/termux-shared/src/main/java/com/termux/shared/shell/command/ShellCommandConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/shell/command/ShellCommandConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/shell/command/ShellCommandConstants.java\n@@ -0,0 +1,75 @@\n+package com.termux.shared.shell.command;\n+\n+import com.termux.shared.errors.Errno;\n+import com.termux.shared.shell.command.result.ResultConfig;\n+\n+import java.util.Formatter;\n+import java.util.IllegalFormatException;\n+\n+public class ShellCommandConstants {\n+\n+    /**\n+     * Class to send back results of commands to their callers like plugin or 3rd party apps.\n+     */\n+    public static final class RESULT_SENDER {\n+\n+        /*\n+         * The default `Formatter` format strings to use for `ResultConfig#resultFileBasename`\n+         * if `ResultConfig#resultSingleFile` is `true`.\n+         */\n+\n+        /** The {@link Formatter} format string for success if only `stdout` needs to be written to\n+         * {@link ResultConfig#resultFileBasename} where `stdout` maps to `%1$s`.\n+         * This is used when `err` equals {@link Errno#ERRNO_SUCCESS} (-1) and `stderr` is empty\n+         * and `exit_code` equals `0` and {@link ResultConfig#resultFileOutputFormat} is not passed. */\n+        public static final String FORMAT_SUCCESS_STDOUT = \"%1$s%n\";\n+        /** The {@link Formatter} format string for success if `stdout` and `exit_code` need to be written to\n+         * {@link ResultConfig#resultFileBasename} where `stdout` maps to `%1$s` and `exit_code` to `%2$s`.\n+         * This is used when `err` equals {@link Errno#ERRNO_SUCCESS} (-1) and `stderr` is empty\n+         * and `exit_code` does not equal `0` and {@link ResultConfig#resultFileOutputFormat} is not passed.\n+         * The exit code will be placed in a markdown inline code. */\n+        public static final String FORMAT_SUCCESS_STDOUT__EXIT_CODE = \"%1$s%n%n%n%nexit_code=%2$s%n\";\n+        /** The {@link Formatter} format string for success if `stdout`, `stderr` and `exit_code` need to be\n+         * written to {@link ResultConfig#resultFileBasename} where `stdout` maps to `%1$s`, `stderr`\n+         * maps to `%2$s` and `exit_code` to `%3$s`.\n+         * This is used when `err` equals {@link Errno#ERRNO_SUCCESS} (-1) and `stderr` is not empty\n+         * and {@link ResultConfig#resultFileOutputFormat} is not passed.\n+         * The stdout and stderr will be placed in a markdown code block. The exit code will be placed\n+         * in a markdown inline code. The surrounding backticks will be 3 more than the consecutive\n+         * backticks in any parameter itself for code blocks. */\n+        public static final String FORMAT_SUCCESS_STDOUT__STDERR__EXIT_CODE = \"stdout=%n%1$s%n%n%n%nstderr=%n%2$s%n%n%n%nexit_code=%3$s%n\";\n+        /** The {@link Formatter} format string for failure if `err`, `errmsg`(`error`), `stdout`,\n+         * `stderr` and `exit_code` need to be written to {@link ResultConfig#resultFileBasename} where\n+         * `err` maps to `%1$s`, `errmsg` maps to `%2$s`, `stdout` maps\n+         * to `%3$s`, `stderr` to `%4$s` and `exit_code` maps to `%5$s`.\n+         * Do not define an argument greater than `5`, like `%6$s` if you change this value since it will\n+         * raise {@link IllegalFormatException}.\n+         * This is used when `err` does not equal {@link Errno#ERRNO_SUCCESS} (-1) and\n+         * {@link ResultConfig#resultFileErrorFormat} is not passed.\n+         * The errmsg, stdout and stderr will be placed in a markdown code block. The err and exit code\n+         * will be placed in a markdown inline code. The surrounding backticks will be 3 more than\n+         * the consecutive backticks in any parameter itself for code blocks. The stdout, stderr\n+         * and exit code may be empty without any surrounding backticks if not set. */\n+        public static final String FORMAT_FAILED_ERR__ERRMSG__STDOUT__STDERR__EXIT_CODE = \"err=%1$s%n%n%n%nerrmsg=%n%2$s%n%n%n%nstdout=%n%3$s%n%n%n%nstderr=%n%4$s%n%n%n%nexit_code=%5$s%n\";\n+\n+\n+\n+        /*\n+         * The default prefixes to use for result files under `ResultConfig#resultDirectoryPath`\n+         * if `ResultConfig#resultSingleFile` is `false`.\n+         */\n+\n+        /** The prefix for the err result file. */\n+        public static final String RESULT_FILE_ERR_PREFIX = \"err\";\n+        /** The prefix for the errmsg result file. */\n+        public static final String RESULT_FILE_ERRMSG_PREFIX = \"errmsg\";\n+        /** The prefix for the stdout result file. */\n+        public static final String RESULT_FILE_STDOUT_PREFIX = \"stdout\";\n+        /** The prefix for the stderr result file. */\n+        public static final String RESULT_FILE_STDERR_PREFIX = \"stderr\";\n+        /** The prefix for the exitCode result file. */\n+        public static final String RESULT_FILE_EXIT_CODE_PREFIX = \"exit_code\";\n+\n+    }\n+\n+}",
    "output": "Add uncommitted changes from 361bfb39"
  },
  {
    "input": "diff --git a/terminal-view/src/main/java/com/termux/view/textselection/TextSelectionCursorController.java b/terminal-view/src/main/java/com/termux/view/textselection/TextSelectionCursorController.java\n--- a/terminal-view/src/main/java/com/termux/view/textselection/TextSelectionCursorController.java\n+++ b/terminal-view/src/main/java/com/termux/view/textselection/TextSelectionCursorController.java\n@@ -1,12 +1,10 @@\n package com.termux.view.textselection;\n \n-import android.content.ClipData;\n import android.content.ClipboardManager;\n import android.content.Context;\n import android.graphics.Rect;\n import android.text.TextUtils;\n import android.view.ActionMode;\n-import android.view.InputDevice;\n import android.view.Menu;\n import android.view.MenuItem;\n import android.view.MotionEvent;",
    "output": "Remove unused imports"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/termux/extrakeys/ExtraKeysView.java b/termux-shared/src/main/java/com/termux/shared/termux/extrakeys/ExtraKeysView.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/extrakeys/ExtraKeysView.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/extrakeys/ExtraKeysView.java\n@@ -134,15 +134,15 @@ public interface IExtraKeysView {\n \n \n     /** The implementation of the {@link IExtraKeysView} that acts as a client for the {@link ExtraKeysView}. */\n-    private IExtraKeysView mExtraKeysViewClient;\n+    protected IExtraKeysView mExtraKeysViewClient;\n \n     /** The map for the {@link SpecialButton} and their {@link SpecialButtonState}. Defaults to\n      * the one returned by {@link #getDefaultSpecialButtons(ExtraKeysView)}. */\n-    private Map<SpecialButton, SpecialButtonState> mSpecialButtons;\n+    protected Map<SpecialButton, SpecialButtonState> mSpecialButtons;\n \n     /** The keys for the {@link SpecialButton} added to {@link #mSpecialButtons}. This is automatically\n      * set when the call to {@link #setSpecialButtons(Map)} is made. */\n-    private Set<String> mSpecialButtonsKeys;\n+    protected Set<String> mSpecialButtonsKeys;\n \n \n     /**\n@@ -151,22 +151,22 @@ public interface IExtraKeysView {\n      * every {@link #mLongPressRepeatDelay} seconds after {@link #mLongPressTimeout} has passed.\n      * The default keys are defined by {@link ExtraKeysConstants#PRIMARY_REPETITIVE_KEYS}.\n      */\n-    private List<String> mRepetitiveKeys;\n+    protected List<String> mRepetitiveKeys;\n \n \n     /** The text color for the extra keys button. Defaults to {@link #DEFAULT_BUTTON_TEXT_COLOR}. */\n-    private int mButtonTextColor;\n+    protected int mButtonTextColor;\n     /** The text color for the extra keys button when its active.\n      * Defaults to {@link #DEFAULT_BUTTON_ACTIVE_TEXT_COLOR}. */\n-    private int mButtonActiveTextColor;\n+    protected int mButtonActiveTextColor;\n     /** The background color for the extra keys button. Defaults to {@link #DEFAULT_BUTTON_BACKGROUND_COLOR}. */\n-    private int mButtonBackgroundColor;\n+    protected int mButtonBackgroundColor;\n     /** The background color for the extra keys button when its active. Defaults to\n      * {@link #DEFAULT_BUTTON_ACTIVE_BACKGROUND_COLOR}. */\n-    private int mButtonActiveBackgroundColor;\n+    protected int mButtonActiveBackgroundColor;\n \n     /** Defines whether text for the extra keys button should be all capitalized automatically. */\n-    private boolean mButtonTextAllCaps = true;\n+    protected boolean mButtonTextAllCaps = true;\n \n \n     /**\n@@ -176,25 +176,25 @@ public interface IExtraKeysView {\n      * The duration must be in between {@link #MIN_LONG_PRESS_DURATION} and {@link #MAX_LONG_PRESS_DURATION},\n      * otherwise {@link #FALLBACK_LONG_PRESS_DURATION} is used.\n      */\n-    private int mLongPressTimeout;\n+    protected int mLongPressTimeout;\n \n     /**\n      * Defines the duration in milliseconds for the delay between trigger of each repeat of\n      * {@link #mRepetitiveKeys}. The default value is defined by {@link #DEFAULT_LONG_PRESS_REPEAT_DELAY}.\n      * The duration must be in between {@link #MIN_LONG_PRESS__REPEAT_DELAY} and\n      * {@link #MAX_LONG_PRESS__REPEAT_DELAY}, otherwise {@link #DEFAULT_LONG_PRESS_REPEAT_DELAY} is used.\n      */\n-    private int mLongPressRepeatDelay;\n+    protected int mLongPressRepeatDelay;\n \n \n     /** The popup window shown if {@link ExtraKeyButton#getPopup()} returns a {@code non-null} value\n      * and a swipe up action is done on an extra key. */\n-    private PopupWindow mPopupWindow;\n+    protected PopupWindow mPopupWindow;\n \n-    private ScheduledExecutorService mScheduledExecutor;\n-    private Handler mHandler;\n-    private SpecialButtonsLongHoldRunnable mSpecialButtonsLongHoldRunnable;\n-    private int mLongPressCount;\n+    protected ScheduledExecutorService mScheduledExecutor;\n+    protected Handler mHandler;\n+    protected SpecialButtonsLongHoldRunnable mSpecialButtonsLongHoldRunnable;\n+    protected int mLongPressCount;\n \n \n     public ExtraKeysView(Context context, AttributeSet attrs) {\n@@ -465,12 +465,12 @@ public void reload(ExtraKeysInfo extraKeysInfo) {\n \n \n \n-    private void onExtraKeyButtonClick(View view, ExtraKeyButton buttonInfo, Button button) {\n+    public void onExtraKeyButtonClick(View view, ExtraKeyButton buttonInfo, MaterialButton button) {\n         if (mExtraKeysViewClient != null)\n             mExtraKeysViewClient.onExtraKeyButtonClick(view, buttonInfo, button);\n     }\n \n-    private void performExtraKeyButtonHapticFeedback(View view, ExtraKeyButton buttonInfo, Button button) {\n+    public void performExtraKeyButtonHapticFeedback(View view, ExtraKeyButton buttonInfo, MaterialButton button) {\n         if (mExtraKeysViewClient != null) {\n             // If client handled the feedback, then just return\n             if (mExtraKeysViewClient.performExtraKeyButtonHapticFeedback(view, buttonInfo, button))\n@@ -493,7 +493,7 @@ private void performExtraKeyButtonHapticFeedback(View view, ExtraKeyButton butto\n \n \n \n-    private void onAnyExtraKeyButtonClick(View view, @NonNull ExtraKeyButton buttonInfo, Button button) {\n+    public void onAnyExtraKeyButtonClick(View view, @NonNull ExtraKeyButton buttonInfo, MaterialButton button) {\n         if (isSpecialButton(buttonInfo)) {\n             if (mLongPressCount > 0) return;\n             SpecialButtonState state = mSpecialButtons.get(SpecialButton.valueOf(buttonInfo.getKey()));\n@@ -509,7 +509,7 @@ private void onAnyExtraKeyButtonClick(View view, @NonNull ExtraKeyButton buttonI\n     }\n \n \n-    private void startScheduledExecutors(View view, ExtraKeyButton buttonInfo, Button button) {\n+    public void startScheduledExecutors(View view, ExtraKeyButton buttonInfo, MaterialButton button) {\n         stopScheduledExecutors();\n         mLongPressCount = 0;\n         if (mRepetitiveKeys.contains(buttonInfo.getKey())) {\n@@ -534,7 +534,7 @@ private void startScheduledExecutors(View view, ExtraKeyButton buttonInfo, Butto\n         }\n     }\n \n-    private void stopScheduledExecutors() {\n+    public void stopScheduledExecutors() {\n         if (mScheduledExecutor != null) {\n             mScheduledExecutor.shutdownNow();\n             mScheduledExecutor = null;\n@@ -546,8 +546,8 @@ private void stopScheduledExecutors() {\n         }\n     }\n \n-    private class SpecialButtonsLongHoldRunnable implements Runnable {\n-        private final SpecialButtonState mState;\n+    public class SpecialButtonsLongHoldRunnable implements Runnable {\n+        public final SpecialButtonState mState;\n \n         public SpecialButtonsLongHoldRunnable(SpecialButtonState state) {\n             mState = state;\n@@ -593,7 +593,7 @@ void showPopup(View view, ExtraKeyButton extraButton) {\n         mPopupWindow.showAsDropDown(view, 0, -2 * height);\n     }\n \n-    private void dismissPopup() {\n+    public void dismissPopup() {\n         mPopupWindow.setContentView(null);\n         mPopupWindow.dismiss();\n         mPopupWindow = null;\n@@ -631,7 +631,7 @@ public Boolean readSpecialButton(SpecialButton specialButton, boolean autoSetInA\n         return true;\n     }\n \n-    private Button createSpecialButton(String buttonKey, boolean needUpdate) {\n+    public Button createSpecialButton(String buttonKey, boolean needUpdate) {\n         SpecialButtonState state = mSpecialButtons.get(SpecialButton.valueOf(buttonKey));\n         if (state == null) return null;\n         state.setIsCreated(true);\n@@ -648,7 +648,7 @@ private Button createSpecialButton(String buttonKey, boolean needUpdate) {\n     /**\n      * General util function to compute the longest column length in a matrix.\n      */\n-    static int maximumLength(Object[][] matrix) {\n+    public static int maximumLength(Object[][] matrix) {\n         int m = 0;\n         for (Object[] row : matrix)\n             m = Math.max(m, row.length);",
    "output": "Make ExtraKeysView private functions public and variables protected"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/logger/Logger.java b/termux-shared/src/main/java/com/termux/shared/logger/Logger.java\n--- a/termux-shared/src/main/java/com/termux/shared/logger/Logger.java\n+++ b/termux-shared/src/main/java/com/termux/shared/logger/Logger.java\n@@ -470,7 +470,9 @@ public static boolean isLogLevelValid(Integer logLevel) {\n     /** Check if custom log level is valid and >= {@link #CURRENT_LOG_LEVEL}. If custom log level is\n      * not valid then {@link #LOG_LEVEL_VERBOSE} must be >= {@link #CURRENT_LOG_LEVEL}. */\n     public static boolean shouldEnableLoggingForCustomLogLevel(Integer customLogLevel) {\n-        if (customLogLevel == null || CURRENT_LOG_LEVEL <= LOG_LEVEL_OFF || customLogLevel <= LOG_LEVEL_OFF) return false;\n+        if (CURRENT_LOG_LEVEL <= LOG_LEVEL_OFF) return false;\n+        if (customLogLevel == null) return CURRENT_LOG_LEVEL >= LOG_LEVEL_VERBOSE; // Use default app log level\n+        if (customLogLevel <= LOG_LEVEL_OFF) return false;\n         customLogLevel = Logger.isLogLevelValid(customLogLevel) ? customLogLevel: Logger.LOG_LEVEL_VERBOSE;\n         return (customLogLevel >= CURRENT_LOG_LEVEL);\n     }",
    "output": "Fix termux background command logging at verbose level if CUSTOM_LOG_LEVEL was not passed"
  },
  {
    "input": "diff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalBuffer.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalBuffer.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalBuffer.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalBuffer.java\n@@ -449,8 +449,8 @@ public TerminalRow allocateFullLineIfNecessary(int row) {\n     }\n \n     public void setChar(int column, int row, int codePoint, long style) {\n-        if (row >= mScreenRows || column >= mColumns)\n-            throw new IllegalArgumentException(\"row=\" + row + \", column=\" + column + \", mScreenRows=\" + mScreenRows + \", mColumns=\" + mColumns);\n+        if (row  < 0 || row >= mScreenRows || column < 0 || column >= mColumns)\n+            throw new IllegalArgumentException(\"TerminalBuffer.setChar(): row=\" + row + \", column=\" + column + \", mScreenRows=\" + mScreenRows + \", mColumns=\" + mColumns);\n         row = externalToInternalRow(row);\n         allocateFullLineIfNecessary(row).setChar(column, codePoint, style);\n     }\n\ndiff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n@@ -2332,7 +2332,14 @@ private void emitCodePoint(int codePoint) {\n         }\n \n         int offsetDueToCombiningChar = ((displayWidth <= 0 && mCursorCol > 0 && !mAboutToAutoWrap) ? 1 : 0);\n-        mScreen.setChar(mCursorCol - offsetDueToCombiningChar, mCursorRow, codePoint, getStyle());\n+        int column = mCursorCol - offsetDueToCombiningChar;\n+\n+        // Fix TerminalRow.setChar() ArrayIndexOutOfBoundsException index=-1 exception reported\n+        // The offsetDueToCombiningChar would never be 1 if mCursorCol was 0 to get column/index=-1,\n+        // so was mCursorCol changed after the offsetDueToCombiningChar conditional by another thread?\n+        // TODO: Check if there are thread synchronization issues with mCursorCol and mCursorRow, possibly causing others bugs too.\n+        if (column < 0) column = 0;\n+        mScreen.setChar(column, mCursorRow, codePoint, getStyle());\n \n         if (autoWrap && displayWidth > 0)\n             mAboutToAutoWrap = (mCursorCol == mRightMargin - displayWidth);\n\ndiff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalRow.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalRow.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalRow.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalRow.java\n@@ -124,6 +124,9 @@ public void clear(long style) {\n \n     // https://github.com/steven676/Android-Terminal-Emulator/commit/9a47042620bec87617f0b4f5d50568535668fe26\n     public void setChar(int columnToSet, int codePoint, long style) {\n+        if (columnToSet  < 0 || columnToSet >= mStyle.length)\n+            throw new IllegalArgumentException(\"TerminalRow.setChar(): columnToSet=\" + columnToSet + \", codePoint=\" + codePoint + \", style=\" + style);\n+\n         mStyle[columnToSet] = style;\n \n         final int newCodePointDisplayWidth = WcWidth.width(codePoint);",
    "output": "Fix ArrayIndexOutOfBoundsException when setting zero width terminal character"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -302,18 +302,8 @@ private void actionAcquireWakeLock() {\n         mWifiLock = wm.createWifiLock(WifiManager.WIFI_MODE_FULL_HIGH_PERF, TermuxConstants.TERMUX_APP_NAME.toLowerCase());\n         mWifiLock.acquire();\n \n-        String packageName = getPackageName();\n-        if (!pm.isIgnoringBatteryOptimizations(packageName)) {\n-            Intent whitelist = new Intent();\n-            whitelist.setAction(Settings.ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS);\n-            whitelist.setData(Uri.parse(\"package:\" + packageName));\n-            whitelist.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n-\n-            try {\n-                startActivity(whitelist);\n-            } catch (ActivityNotFoundException e) {\n-                Logger.logStackTraceWithMessage(LOG_TAG, \"Failed to call ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS\", e);\n-            }\n+        if (!PermissionUtils.checkIfBatteryOptimizationsDisabled(this)) {\n+            PermissionUtils.requestDisableBatteryOptimizations(this);\n         }\n \n         updateNotification();",
    "output": "Use PermissionUtils to request disabling battery optimizations in TermuxService"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/android/PermissionUtils.java b/termux-shared/src/main/java/com/termux/shared/android/PermissionUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/android/PermissionUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/android/PermissionUtils.java\n@@ -3,6 +3,7 @@\n import android.Manifest;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n+import android.app.Service;\n import android.content.Context;\n import android.content.Intent;\n import android.content.pm.PackageInfo;\n@@ -324,13 +325,20 @@ public static boolean requestLegacyStorageExternalPermission(@NonNull Context co\n         return requestPermission(context, Manifest.permission.WRITE_EXTERNAL_STORAGE, requestCode);\n     }\n \n+    /** Wrapper for {@link #requestManageStorageExternalPermission(Context, int)}. */\n+    public static Error requestManageStorageExternalPermission(@NonNull Context context) {\n+        return requestManageStorageExternalPermission(context, -1);\n+    }\n+\n     /**\n      * Request user to grant {@link Manifest.permission#MANAGE_EXTERNAL_STORAGE} permission to the app.\n      *\n-     * @param context The context for operations. It must be an instance of {@link Activity} or\n-     * {@link AppCompatActivity}.\n-     * @param requestCode The request code to use while asking for permission. It must be `>=0` or\n-     *                    will fail silently and will log an exception.\n+     * @param context The context for operations, like an {@link Activity} or {@link Service} context.\n+     *                It must be an instance of {@link Activity} or {@link AppCompatActivity} if\n+     *                result is required via the Activity#onActivityResult() callback and\n+     *                {@code requestCode} is `>=0`.\n+     * @param requestCode The request code to use while asking for permission. It must be `>=0` if\n+     *                    result it required.\n      * @return Returns the {@code error} if requesting the permission was not successful, otherwise {@code null}.\n      */\n     public static Error requestManageStorageExternalPermission(@NonNull Context context, int requestCode) {\n@@ -339,13 +347,22 @@ public static Error requestManageStorageExternalPermission(@NonNull Context cont\n         Intent intent = new Intent(Settings.ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION);\n         intent.addCategory(\"android.intent.category.DEFAULT\");\n         intent.setData(Uri.parse(\"package:\" + context.getPackageName()));\n-        Error error = ActivityUtils.startActivityForResult(context, requestCode, intent, true, false);\n+        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n+\n+        Error error;\n+        if (requestCode >=0)\n+            error = ActivityUtils.startActivityForResult(context, requestCode, intent, true, false);\n+        else\n+            error = ActivityUtils.startActivity(context, intent, true, false);\n \n         // Use fallback if matching Activity did not exist for ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION.\n         if (error != null) {\n             intent = new Intent();\n             intent.setAction(Settings.ACTION_MANAGE_ALL_FILES_ACCESS_PERMISSION);\n-            return ActivityUtils.startActivityForResult(context, requestCode, intent);\n+            if (requestCode >=0)\n+                return ActivityUtils.startActivityForResult(context, requestCode, intent);\n+            else\n+                return ActivityUtils.startActivity(context, intent);\n         }\n \n         return null;\n@@ -421,19 +438,33 @@ public static boolean checkDisplayOverOtherAppsPermission(@NonNull Context conte\n         return Settings.canDrawOverlays(context);\n     }\n \n+    /** Wrapper for {@link #requestDisplayOverOtherAppsPermission(Context, int)}. */\n+    public static Error requestDisplayOverOtherAppsPermission(@NonNull Context context) {\n+        return requestDisplayOverOtherAppsPermission(context, -1);\n+    }\n+\n     /**\n      * Request user to grant {@link Manifest.permission#SYSTEM_ALERT_WINDOW} permission to the app.\n      *\n-     * @param context The context for operations. It must be an instance of {@link Activity} or\n-     * {@link AppCompatActivity}.\n-     * @param requestCode The request code to use while asking for permission. It must be `>=0` or\n-     *                    will fail silently and will log an exception.\n+     * @param context The context for operations, like an {@link Activity} or {@link Service} context.\n+     *                It must be an instance of {@link Activity} or {@link AppCompatActivity} if\n+     *                result is required via the Activity#onActivityResult() callback and\n+     *                {@code requestCode} is `>=0`.\n+     * @param requestCode The request code to use while asking for permission. It must be `>=0` if\n+     *                    result it required.\n      * @return Returns the {@code error} if requesting the permission was not successful, otherwise {@code null}.\n      */\n     public static Error requestDisplayOverOtherAppsPermission(@NonNull Context context, int requestCode) {\n+        Logger.logInfo(LOG_TAG, \"Requesting display over apps permission\");\n+\n         Intent intent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION);\n         intent.setData(Uri.parse(\"package:\" + context.getPackageName()));\n-        return ActivityUtils.startActivityForResult(context, requestCode, intent);\n+        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n+\n+        if (requestCode >=0)\n+            return ActivityUtils.startActivityForResult(context, requestCode, intent);\n+        else\n+            return ActivityUtils.startActivity(context, intent);\n     }\n \n     /**\n@@ -475,21 +506,35 @@ public static boolean checkIfBatteryOptimizationsDisabled(@NonNull Context conte\n         return powerManager.isIgnoringBatteryOptimizations(context.getPackageName());\n     }\n \n+    /** Wrapper for {@link #requestDisableBatteryOptimizations(Context, int)}. */\n+    public static Error requestDisableBatteryOptimizations(@NonNull Context context) {\n+        return requestDisableBatteryOptimizations(context, -1);\n+    }\n+\n     /**\n      * Request user to grant {@link Manifest.permission#REQUEST_IGNORE_BATTERY_OPTIMIZATIONS}\n      * permission to the app.\n      *\n-     * @param context The context for operations. It must be an instance of {@link Activity} or\n-     * {@link AppCompatActivity}.\n-     * @param requestCode The request code to use while asking for permission. It must be `>=0` or\n-     *                    will fail silently and will log an exception.\n+     * @param context The context for operations, like an {@link Activity} or {@link Service} context.\n+     *                It must be an instance of {@link Activity} or {@link AppCompatActivity} if\n+     *                result is required via the Activity#onActivityResult() callback and\n+     *                {@code requestCode} is `>=0`.\n+     * @param requestCode The request code to use while asking for permission. It must be `>=0` if\n+     *                    result it required.\n      * @return Returns the {@code error} if requesting the permission was not successful, otherwise {@code null}.\n      */\n     @SuppressLint(\"BatteryLife\")\n     public static Error requestDisableBatteryOptimizations(@NonNull Context context, int requestCode) {\n+        Logger.logInfo(LOG_TAG, \"Requesting to disable battery optimizations\");\n+\n         Intent intent = new Intent(Settings.ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS);\n         intent.setData(Uri.parse(\"package:\" + context.getPackageName()));\n-        return ActivityUtils.startActivityForResult(context, requestCode, intent);\n+        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n+\n+        if (requestCode >=0)\n+            return ActivityUtils.startActivityForResult(context, requestCode, intent);\n+        else\n+            return ActivityUtils.startActivity(context, intent);\n     }\n \n }",
    "output": "Add support to request Settings.ACTION* permissions to be requested via Service context"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxApplication.java b/app/src/main/java/com/termux/app/TermuxApplication.java\n--- a/app/src/main/java/com/termux/app/TermuxApplication.java\n+++ b/app/src/main/java/com/termux/app/TermuxApplication.java\n@@ -1,7 +1,9 @@\n package com.termux.app;\n \n import android.app.Application;\n+import android.content.Context;\n \n+import com.termux.shared.termux.TermuxConstants;\n import com.termux.shared.termux.crash.TermuxCrashUtils;\n import com.termux.shared.termux.settings.preferences.TermuxAppSharedPreferences;\n import com.termux.shared.logger.Logger;\n@@ -14,16 +16,19 @@ public void onCreate() {\n         // Set crash handler for the app\n         TermuxCrashUtils.setCrashHandler(this);\n \n-        // Set log level for the app\n-        setLogLevel();\n+        // Set log config for the app\n+        setLogConfig(getApplicationContext());\n+\n+        Logger.logDebug(\"Starting Application\");\n     }\n \n-    private void setLogLevel() {\n+    public static void setLogConfig(Context context) {\n+        Logger.setDefaultLogTag(TermuxConstants.TERMUX_APP_NAME);\n+\n         // Load the log level from shared preferences and set it to the {@link Logger.CURRENT_LOG_LEVEL}\n-        TermuxAppSharedPreferences preferences = TermuxAppSharedPreferences.build(getApplicationContext());\n+        TermuxAppSharedPreferences preferences = TermuxAppSharedPreferences.build(context);\n         if (preferences == null) return;\n         preferences.setLogLevel(null, preferences.getLogLevel());\n-        Logger.logDebug(\"Starting Application\");\n     }\n }\n \n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/logger/Logger.java b/termux-shared/src/main/java/com/termux/shared/logger/Logger.java\n--- a/termux-shared/src/main/java/com/termux/shared/logger/Logger.java\n+++ b/termux-shared/src/main/java/com/termux/shared/logger/Logger.java\n@@ -6,9 +6,10 @@\n import android.util.Log;\n import android.widget.Toast;\n \n+import androidx.annotation.NonNull;\n+\n import com.termux.shared.R;\n import com.termux.shared.data.DataUtils;\n-import com.termux.shared.termux.TermuxConstants;\n \n import java.io.IOException;\n import java.io.PrintWriter;\n@@ -19,7 +20,7 @@\n \n public class Logger {\n \n-    public static final String DEFAULT_LOG_TAG = TermuxConstants.TERMUX_APP_NAME;\n+    private static String DEFAULT_LOG_TAG = \"Logger\";\n \n     public static final int LOG_LEVEL_OFF = 0; // log nothing\n     public static final int LOG_LEVEL_NORMAL = 1; // start logging error, warn and info messages and stacktraces\n@@ -419,6 +420,20 @@ public static String getLogLevelLabel(final Context context, final int logLevel,\n \n \n \n+    @NonNull\n+    public static String getDefaultLogTag() {\n+        return DEFAULT_LOG_TAG;\n+    }\n+\n+    /**\n+     * IllegalArgumentException will be thrown if tag.length() > 23 for Nougat (7.0) and prior releases.\n+     * https://developer.android.com/reference/android/util/Log#isLoggable(java.lang.String,%20int) */\n+    public static void setDefaultLogTag(@NonNull String defaultLogTag) {\n+        DEFAULT_LOG_TAG = defaultLogTag.length() >= 23 ? defaultLogTag.substring(0, 22) : defaultLogTag;\n+    }\n+\n+\n+\n     public static int getLogLevel() {\n         return CURRENT_LOG_LEVEL;\n     }\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/shell/StreamGobbler.java b/termux-shared/src/main/java/com/termux/shared/shell/StreamGobbler.java\n--- a/termux-shared/src/main/java/com/termux/shared/shell/StreamGobbler.java\n+++ b/termux-shared/src/main/java/com/termux/shared/shell/StreamGobbler.java\n@@ -190,7 +190,7 @@ public StreamGobbler(@NonNull String shell, @NonNull InputStream inputStream,\n \n     @Override\n     public void run() {\n-        String defaultLogTag = Logger.DEFAULT_LOG_TAG;\n+        String defaultLogTag = Logger.getDefaultLogTag();\n         boolean loggingEnabled = Logger.shouldEnableLoggingForCustomLogLevel(mLogLevel);\n         if (loggingEnabled)\n             Logger.logVerbose(LOG_TAG, \"Using custom log level: \" + mLogLevel + \", current log level: \" + Logger.getLogLevel());",
    "output": "Remove TermuxConstants reference from Logger and set DEFAULT_LOG_TAG at application startup Plugin apps must do the same"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxOpenReceiver.java b/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n--- a/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n+++ b/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n@@ -2,7 +2,6 @@\n \n import android.content.ActivityNotFoundException;\n import android.content.BroadcastReceiver;\n-import android.content.ContentResolver;\n import android.content.ContentValues;\n import android.content.Context;\n import android.content.Intent;\n@@ -16,8 +15,9 @@\n \n import com.termux.app.utils.PluginUtils;\n import com.termux.shared.data.IntentUtils;\n-import com.termux.shared.data.UriUtils;\n+import com.termux.shared.net.UriUtils;\n import com.termux.shared.logger.Logger;\n+import com.termux.shared.models.net.UriScheme;\n import com.termux.shared.termux.TermuxConstants;\n \n import java.io.File;\n@@ -55,7 +55,7 @@ public void onReceive(Context context, Intent intent) {\n         }\n \n         String scheme = data.getScheme();\n-        if (scheme != null && !ContentResolver.SCHEME_FILE.equals(scheme)) {\n+        if (scheme != null && !UriScheme.SCHEME_FILE.equals(scheme)) {\n             Intent urlIntent = new Intent(intentAction, data);\n             if (intentAction.equals(Intent.ACTION_SEND)) {\n                 urlIntent.putExtra(Intent.EXTRA_TEXT, data.toString());\n\ndiff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -26,7 +26,7 @@\n import com.termux.app.terminal.TermuxTerminalSessionClient;\n import com.termux.app.utils.PluginUtils;\n import com.termux.shared.data.IntentUtils;\n-import com.termux.shared.data.UriUtils;\n+import com.termux.shared.net.UriUtils;\n import com.termux.shared.models.errors.Errno;\n import com.termux.shared.shell.ShellUtils;\n import com.termux.shared.termux.shell.TermuxShellEnvironmentClient;\n\ndiff --git a/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java b/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java\n--- a/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java\n+++ b/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java\n@@ -1,7 +1,6 @@\n package com.termux.filepicker;\n \n import android.app.Activity;\n-import android.content.ContentResolver;\n import android.content.Intent;\n import android.database.Cursor;\n import android.net.Uri;\n@@ -13,8 +12,9 @@\n import com.termux.R;\n import com.termux.shared.data.DataUtils;\n import com.termux.shared.data.IntentUtils;\n-import com.termux.shared.data.UriUtils;\n+import com.termux.shared.net.UriUtils;\n import com.termux.shared.interact.MessageDialogUtils;\n+import com.termux.shared.models.net.UriScheme;\n import com.termux.shared.termux.interact.TextInputDialogUtils;\n import com.termux.shared.termux.TermuxConstants;\n import com.termux.shared.termux.TermuxConstants.TERMUX_APP.TERMUX_SERVICE;\n@@ -93,9 +93,9 @@ protected void onResume() {\n                 return;\n             }\n \n-            if (ContentResolver.SCHEME_CONTENT.equals(scheme)) {\n+            if (UriScheme.SCHEME_CONTENT.equals(scheme)) {\n                 handleContentUri(dataUri, sharedTitle);\n-            } else if (ContentResolver.SCHEME_FILE.equals(scheme)) {\n+            } else if (UriScheme.SCHEME_FILE.equals(scheme)) {\n                 Logger.logVerbose(LOG_TAG, \"uri: \\\"\" + dataUri + \"\\\", path: \\\"\" + dataUri.getPath() + \"\\\", fragment: \\\"\" + dataUri.getFragment() + \"\\\"\");\n \n                 // Get full path including fragment (anything after last \"#\")\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/models/net/UriScheme.java b/termux-shared/src/main/java/com/termux/shared/models/net/UriScheme.java\n--- a/termux-shared/src/main/java/com/termux/shared/models/net/UriScheme.java\n+++ b/termux-shared/src/main/java/com/termux/shared/models/net/UriScheme.java\n@@ -0,0 +1,28 @@\n+package com.termux.shared.models.net;\n+\n+import android.net.Uri;\n+\n+/**\n+ * The {@link Uri} schemes.\n+ *\n+ * https://www.iana.org/assignments/uri-schemes/uri-schemes.xhtml\n+ * https://en.wikipedia.org/wiki/List_of_URI_schemes\n+ */\n+public class UriScheme {\n+\n+    /** Android app resource. */\n+    public static final String SCHEME_ANDROID_RESOURCE = \"android.resource\";\n+\n+    /** Android content provider. https://www.iana.org/assignments/uri-schemes/prov/content. */\n+    public static final String SCHEME_CONTENT = \"content\";\n+\n+    /** Filesystem or android app asset. https://www.rfc-editor.org/rfc/rfc8089.html. */\n+    public static final String SCHEME_FILE = \"file\";\n+\n+    /* Hypertext Transfer Protocol. */\n+    public static final String SCHEME_HTTP = \"http\";\n+\n+    /* Hypertext Transfer Protocol Secure. */\n+    public static final String SCHEME_HTTPS = \"https\";\n+\n+}\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/net/UriUtils.java b/termux-shared/src/main/java/com/termux/shared/net/UriUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/net/UriUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/net/UriUtils.java\n@@ -1,25 +1,26 @@\n-package com.termux.shared.data;\n+package com.termux.shared.net;\n \n-import android.content.ContentResolver;\n import android.net.Uri;\n \n import androidx.annotation.NonNull;\n \n+import com.termux.shared.data.DataUtils;\n import com.termux.shared.file.FileUtils;\n+import com.termux.shared.models.net.UriScheme;\n \n public class UriUtils {\n \n     /**\n      * Get the full file path from a {@link Uri}.\n      *\n-     *  If the {@link Uri} was created from file path with {@link Uri#parse(String)}, like \"am\"\n-     *  command \"-d\" option does, and the path contained a \"#\", then anything after it would become\n-     *  the fragment and {@link Uri#getPath()} will only return the path before it, which would be\n-     *  invalid. The fragment must be manually appended to the path to get the full path.\n+     * If the {@link Uri} was created from file path with {@link Uri#parse(String)}, like \"am\"\n+     * command \"-d\" option does, and the path contained a \"#\", then anything after it would become\n+     * the fragment and {@link Uri#getPath()} will only return the path before it, which would be\n+     * invalid. The fragment must be manually appended to the path to get the full path.\n      *\n-     *  If the {@link Uri} was created with {@link Uri.Builder} and path was set\n-     *  with {@link Uri.Builder#path(String)}, then \"#\" will automatically be encoded to \"%23\"\n-     *  and separate fragment will not exist.\n+     * If the {@link Uri} was created with {@link Uri.Builder} and path was set\n+     * with {@link Uri.Builder#path(String)}, then \"#\" will automatically be encoded to \"%23\"\n+     * and separate fragment will not exist.\n      *\n      * @param uri The {@link Uri} to get basename from.\n      * @return Returns the file path if found, otherwise {@code null}.\n@@ -55,45 +56,45 @@ public static String getUriFileBasename(Uri uri, boolean withFragment) {\n     }\n \n     /**\n-     * Get {@link ContentResolver#SCHEME_FILE} {@link Uri} for path.\n+     * Get {@link UriScheme#SCHEME_FILE} {@link Uri} for path.\n      *\n      * @param path The path for the {@link Uri}.\n      * @return Returns the {@link Uri}.\n      */\n     public static Uri getFileUri(@NonNull String path) {\n-        return new Uri.Builder().scheme(ContentResolver.SCHEME_FILE).path(path).build();\n+        return new Uri.Builder().scheme(UriScheme.SCHEME_FILE).path(path).build();\n     }\n \n     /**\n-     * Get {@link ContentResolver#SCHEME_FILE} {@link Uri} for path.\n+     * Get {@link UriScheme#SCHEME_FILE} {@link Uri} for path.\n      *\n      * @param authority The authority for the {@link Uri}.\n      * @param path The path for the {@link Uri}.\n      * @return Returns the {@link Uri}.\n      */\n     public static Uri getFileUri(@NonNull String authority, @NonNull String path) {\n-        return new Uri.Builder().scheme(ContentResolver.SCHEME_FILE).authority(authority).path(path).build();\n+        return new Uri.Builder().scheme(UriScheme.SCHEME_FILE).authority(authority).path(path).build();\n     }\n \n     /**\n-     * Get {@link ContentResolver#SCHEME_CONTENT} {@link Uri} for path.\n+     * Get {@link UriScheme#SCHEME_CONTENT} {@link Uri} for path.\n      *\n      * @param path The path for the {@link Uri}.\n      * @return Returns the {@link Uri}.\n      */\n     public static Uri getContentUri(@NonNull String path) {\n-        return new Uri.Builder().scheme(ContentResolver.SCHEME_CONTENT).path(path).build();\n+        return new Uri.Builder().scheme(UriScheme.SCHEME_CONTENT).path(path).build();\n     }\n \n     /**\n-     * Get {@link ContentResolver#SCHEME_CONTENT} {@link Uri} for path.\n+     * Get {@link UriScheme#SCHEME_CONTENT} {@link Uri} for path.\n      *\n      * @param authority The authority for the {@link Uri}.\n      * @param path The path for the {@link Uri}.\n      * @return Returns the {@link Uri}.\n      */\n     public static Uri getContentUri(@NonNull String authority, @NonNull String path) {\n-        return new Uri.Builder().scheme(ContentResolver.SCHEME_CONTENT).authority(authority).path(path).build();\n+        return new Uri.Builder().scheme(UriScheme.SCHEME_CONTENT).authority(authority).path(path).build();\n     }\n \n }",
    "output": "Add UriScheme and move UriUtils to com.termux.shared.net package"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java b/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java\n--- a/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java\n+++ b/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java\n@@ -1,15 +1,19 @@\n package com.termux.filepicker;\n \n import android.app.Activity;\n+import android.content.ContentResolver;\n import android.content.Intent;\n import android.database.Cursor;\n import android.net.Uri;\n import android.provider.OpenableColumns;\n import android.util.Patterns;\n \n+import androidx.annotation.NonNull;\n+\n import com.termux.R;\n import com.termux.shared.data.DataUtils;\n import com.termux.shared.data.IntentUtils;\n+import com.termux.shared.data.UriUtils;\n import com.termux.shared.interact.MessageDialogUtils;\n import com.termux.shared.termux.interact.TextInputDialogUtils;\n import com.termux.shared.termux.TermuxConstants;\n@@ -89,11 +93,13 @@ protected void onResume() {\n                 return;\n             }\n \n-            if (\"content\".equals(scheme)) {\n+            if (ContentResolver.SCHEME_CONTENT.equals(scheme)) {\n                 handleContentUri(dataUri, sharedTitle);\n-            } else if (\"file\".equals(scheme)) {\n-                // When e.g. clicking on a downloaded apk:\n-                String path = dataUri.getPath();\n+            } else if (ContentResolver.SCHEME_FILE.equals(scheme)) {\n+                Logger.logVerbose(LOG_TAG, \"uri: \\\"\" + dataUri + \"\\\", path: \\\"\" + dataUri.getPath() + \"\\\", fragment: \\\"\" + dataUri.getFragment() + \"\\\"\");\n+\n+                // Get full path including fragment (anything after last \"#\")\n+                String path = UriUtils.getUriFilePath(dataUri);\n                 if (DataUtils.isNullOrEmpty(path)) {\n                     showErrorDialogAndQuit(\"File path from data uri is null, empty or invalid.\");\n                     return;\n@@ -121,8 +127,10 @@ void showErrorDialogAndQuit(String message) {\n             dialog -> finish());\n     }\n \n-    void handleContentUri(final Uri uri, String subjectFromIntent) {\n+    void handleContentUri(@NonNull final Uri uri, String subjectFromIntent) {\n         try {\n+            Logger.logVerbose(LOG_TAG, \"uri: \\\"\" + uri + \"\\\", path: \\\"\" + uri.getPath() + \"\\\", fragment: \\\"\" + uri.getFragment() + \"\\\"\");\n+\n             String attachmentFileName = null;\n \n             String[] projection = new String[]{OpenableColumns.DISPLAY_NAME};\n@@ -144,29 +152,30 @@ void handleContentUri(final Uri uri, String subjectFromIntent) {\n     }\n \n     void promptNameAndSave(final InputStream in, final String attachmentFileName) {\n-        TextInputDialogUtils.textInput(this, R.string.title_file_received, attachmentFileName, R.string.action_file_received_edit, text -> {\n-            File outFile = saveStreamWithName(in, text);\n-            if (outFile == null) return;\n-\n-            final File editorProgramFile = new File(EDITOR_PROGRAM);\n-            if (!editorProgramFile.isFile()) {\n-                showErrorDialogAndQuit(\"The following file does not exist:\\n$HOME/bin/termux-file-editor\\n\\n\"\n-                    + \"Create this file as a script or a symlink - it will be called with the received file as only argument.\");\n-                return;\n-            }\n+        TextInputDialogUtils.textInput(this, R.string.title_file_received, attachmentFileName,\n+            R.string.action_file_received_edit, text -> {\n+                File outFile = saveStreamWithName(in, text);\n+                if (outFile == null) return;\n+\n+                final File editorProgramFile = new File(EDITOR_PROGRAM);\n+                if (!editorProgramFile.isFile()) {\n+                    showErrorDialogAndQuit(\"The following file does not exist:\\n$HOME/bin/termux-file-editor\\n\\n\"\n+                        + \"Create this file as a script or a symlink - it will be called with the received file as only argument.\");\n+                    return;\n+                }\n \n-            // Do this for the user if necessary:\n-            //noinspection ResultOfMethodCallIgnored\n-            editorProgramFile.setExecutable(true);\n+                // Do this for the user if necessary:\n+                //noinspection ResultOfMethodCallIgnored\n+                editorProgramFile.setExecutable(true);\n \n-            final Uri scriptUri = new Uri.Builder().scheme(\"file\").path(EDITOR_PROGRAM).build();\n+                final Uri scriptUri = UriUtils.getFileUri(EDITOR_PROGRAM);\n \n-            Intent executeIntent = new Intent(TERMUX_SERVICE.ACTION_SERVICE_EXECUTE, scriptUri);\n-            executeIntent.setClass(TermuxFileReceiverActivity.this, TermuxService.class);\n-            executeIntent.putExtra(TERMUX_SERVICE.EXTRA_ARGUMENTS, new String[]{outFile.getAbsolutePath()});\n-            startService(executeIntent);\n-            finish();\n-        },\n+                Intent executeIntent = new Intent(TERMUX_SERVICE.ACTION_SERVICE_EXECUTE, scriptUri);\n+                executeIntent.setClass(TermuxFileReceiverActivity.this, TermuxService.class);\n+                executeIntent.putExtra(TERMUX_SERVICE.EXTRA_ARGUMENTS, new String[]{outFile.getAbsolutePath()});\n+                startService(executeIntent);\n+                finish();\n+            },\n             R.string.action_file_received_open_directory, text -> {\n                 if (saveStreamWithName(in, text) == null) return;\n \n@@ -223,7 +232,7 @@ void handleUrlAndFinish(final String url) {\n         //noinspection ResultOfMethodCallIgnored\n         urlOpenerProgramFile.setExecutable(true);\n \n-        final Uri urlOpenerProgramUri = new Uri.Builder().scheme(\"file\").path(URL_OPENER_PROGRAM).build();\n+        final Uri urlOpenerProgramUri = UriUtils.getFileUri(URL_OPENER_PROGRAM);\n \n         Intent executeIntent = new Intent(TERMUX_SERVICE.ACTION_SERVICE_EXECUTE, urlOpenerProgramUri);\n         executeIntent.setClass(TermuxFileReceiverActivity.this, TermuxService.class);",
    "output": "Fix TermuxFileReceiverActivity failing to open files with \"#\" and remove hardcoded \"content\" and \"file\" strings and fix indentation"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -26,6 +26,7 @@\n import com.termux.app.terminal.TermuxTerminalSessionClient;\n import com.termux.app.utils.PluginUtils;\n import com.termux.shared.data.IntentUtils;\n+import com.termux.shared.data.UriUtils;\n import com.termux.shared.models.errors.Errno;\n import com.termux.shared.shell.ShellUtils;\n import com.termux.shared.termux.shell.TermuxShellEnvironmentClient;\n@@ -360,7 +361,10 @@ private void actionServiceExecute(Intent intent) {\n         executionCommand.inBackground = intent.getBooleanExtra(TERMUX_SERVICE.EXTRA_BACKGROUND, false);\n \n         if (executionCommand.executableUri != null) {\n-            executionCommand.executable = executionCommand.executableUri.getPath();\n+            Logger.logVerbose(LOG_TAG, \"uri: \\\"\" + executionCommand.executableUri + \"\\\", path: \\\"\" + executionCommand.executableUri.getPath() + \"\\\", fragment: \\\"\" + executionCommand.executableUri.getFragment() + \"\\\"\");\n+\n+            // Get full path including fragment (anything after last \"#\")\n+            executionCommand.executable = UriUtils.getUriFilePath(executionCommand.executableUri);\n             executionCommand.arguments = IntentUtils.getStringArrayExtraIfSet(intent, TERMUX_SERVICE.EXTRA_ARGUMENTS, null);\n             if (executionCommand.inBackground)\n                 executionCommand.stdin = IntentUtils.getStringExtraIfSet(intent, TERMUX_SERVICE.EXTRA_STDIN, null);",
    "output": "Fix TermuxService failing to execute files with \"#\""
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxOpenReceiver.java b/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n--- a/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n+++ b/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n@@ -2,6 +2,7 @@\n \n import android.content.ActivityNotFoundException;\n import android.content.BroadcastReceiver;\n+import android.content.ContentResolver;\n import android.content.ContentValues;\n import android.content.Context;\n import android.content.Intent;\n@@ -15,6 +16,7 @@\n \n import com.termux.app.utils.PluginUtils;\n import com.termux.shared.data.IntentUtils;\n+import com.termux.shared.data.UriUtils;\n import com.termux.shared.logger.Logger;\n import com.termux.shared.termux.TermuxConstants;\n \n@@ -37,8 +39,8 @@ public void onReceive(Context context, Intent intent) {\n         }\n \n         Logger.logVerbose(LOG_TAG, \"Intent Received:\\n\" + IntentUtils.getIntentString(intent));\n+        Logger.logVerbose(LOG_TAG, \"uri: \\\"\" + data + \"\\\", path: \\\"\" + data.getPath() + \"\\\", fragment: \\\"\" + data.getFragment() + \"\\\"\");\n \n-        final String filePath = data.getPath();\n         final String contentTypeExtra = intent.getStringExtra(\"content-type\");\n         final boolean useChooser = intent.getBooleanExtra(\"chooser\", false);\n         final String intentAction = intent.getAction() == null ? Intent.ACTION_VIEW : intent.getAction();\n@@ -52,8 +54,8 @@ public void onReceive(Context context, Intent intent) {\n                 break;\n         }\n \n-        final boolean isExternalUrl = data.getScheme() != null && !data.getScheme().equals(\"file\");\n-        if (isExternalUrl) {\n+        String scheme = data.getScheme();\n+        if (scheme != null && !ContentResolver.SCHEME_FILE.equals(scheme)) {\n             Intent urlIntent = new Intent(intentAction, data);\n             if (intentAction.equals(Intent.ACTION_SEND)) {\n                 urlIntent.putExtra(Intent.EXTRA_TEXT, data.toString());\n@@ -70,6 +72,9 @@ public void onReceive(Context context, Intent intent) {\n             return;\n         }\n \n+        // Get full path including fragment (anything after last \"#\")\n+        String filePath = UriUtils.getUriFilePath(data);\n+\n         final File fileToShare = new File(filePath);\n         if (!(fileToShare.isFile() && fileToShare.canRead())) {\n             Logger.logError(LOG_TAG, \"termux-open: Not a readable file: '\" + fileToShare.getAbsolutePath() + \"'\");\n@@ -93,7 +98,8 @@ public void onReceive(Context context, Intent intent) {\n             contentTypeToUse = contentTypeExtra;\n         }\n \n-        Uri uriToShare = Uri.parse(\"content://\" + TermuxConstants.TERMUX_FILE_SHARE_URI_AUTHORITY + fileToShare.getAbsolutePath());\n+        // Do not create Uri with Uri.parse() and use Uri.Builder().path(), check UriUtils.getUriFilePath().\n+        Uri uriToShare = UriUtils.getContentUri(TermuxConstants.TERMUX_FILE_SHARE_URI_AUTHORITY, fileToShare.getAbsolutePath());\n \n         if (Intent.ACTION_SEND.equals(intentAction)) {\n             sendIntent.putExtra(Intent.EXTRA_STREAM, uriToShare);\n@@ -184,8 +190,8 @@ public ParcelFileDescriptor openFile(@NonNull Uri uri, @NonNull String mode) thr\n             File file = new File(uri.getPath());\n             try {\n                 String path = file.getCanonicalPath();\n-                String callingPackage = getCallingPackage();\n-                Logger.logDebug(LOG_TAG, \"Open file request received from \" + callingPackage + \" for \\\"\" + path + \"\\\" with mode \\\"\" + mode + \"\\\"\");\n+                String callingPackageName = getCallingPackage();\n+                Logger.logDebug(LOG_TAG, \"Open file request received from \" + callingPackageName + \" for \\\"\" + path + \"\\\" with mode \\\"\" + mode + \"\\\"\");\n                 String storagePath = Environment.getExternalStorageDirectory().getCanonicalPath();\n                 // See https://support.google.com/faqs/answer/7496913:\n                 if (!(path.startsWith(TermuxConstants.TERMUX_FILES_DIR_PATH) || path.startsWith(storagePath))) {\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/data/UriUtils.java b/termux-shared/src/main/java/com/termux/shared/data/UriUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/data/UriUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/data/UriUtils.java\n@@ -0,0 +1,75 @@\n+package com.termux.shared.data;\n+\n+import android.content.ContentResolver;\n+import android.net.Uri;\n+\n+import androidx.annotation.NonNull;\n+\n+public class UriUtils {\n+\n+    /**\n+     * Get the full file path from a {@link Uri}.\n+     *\n+     *  If the {@link Uri} was created from file path with {@link Uri#parse(String)}, like \"am\"\n+     *  command \"-d\" option does, and the path contained a \"#\", then anything after it would become\n+     *  the fragment and {@link Uri#getPath()} will only return the path before it, which would be\n+     *  invalid. The fragment must be manually appended to the path to get the full path.\n+     *\n+     *  If the {@link Uri} was created with {@link Uri.Builder} and path was set\n+     *  with {@link Uri.Builder#path(String)}, then \"#\" will automatically be encoded to \"%23\"\n+     *  and separate fragment will not exist.\n+     *\n+     * @param uri The {@link Uri} to get basename from.\n+     * @return Returns the file path if found, otherwise {@code null}.\n+     */\n+    public static String getUriFilePath(Uri uri) {\n+        if (uri == null) return null;\n+        String path = uri.getPath();\n+        if (DataUtils.isNullOrEmpty(path)) return null;\n+        String fragment = uri.getFragment();\n+        return path + (DataUtils.isNullOrEmpty(fragment) ? \"\" : \"#\" + fragment);\n+    }\n+\n+    /**\n+     * Get {@link ContentResolver#SCHEME_FILE} {@link Uri} for path.\n+     *\n+     * @param path The path for the {@link Uri}.\n+     * @return Returns the {@link Uri}.\n+     */\n+    public static Uri getFileUri(@NonNull String path) {\n+        return new Uri.Builder().scheme(ContentResolver.SCHEME_FILE).path(path).build();\n+    }\n+\n+    /**\n+     * Get {@link ContentResolver#SCHEME_FILE} {@link Uri} for path.\n+     *\n+     * @param authority The authority for the {@link Uri}.\n+     * @param path The path for the {@link Uri}.\n+     * @return Returns the {@link Uri}.\n+     */\n+    public static Uri getFileUri(@NonNull String authority, @NonNull String path) {\n+        return new Uri.Builder().scheme(ContentResolver.SCHEME_FILE).authority(authority).path(path).build();\n+    }\n+\n+    /**\n+     * Get {@link ContentResolver#SCHEME_CONTENT} {@link Uri} for path.\n+     *\n+     * @param path The path for the {@link Uri}.\n+     * @return Returns the {@link Uri}.\n+     */\n+    public static Uri getContentUri(@NonNull String path) {\n+        return new Uri.Builder().scheme(ContentResolver.SCHEME_CONTENT).path(path).build();\n+    }\n+\n+    /**\n+     * Get {@link ContentResolver#SCHEME_CONTENT} {@link Uri} for path.\n+     *\n+     * @param authority The authority for the {@link Uri}.\n+     * @param path The path for the {@link Uri}.\n+     * @return Returns the {@link Uri}.\n+     */\n+    public static Uri getContentUri(@NonNull String authority, @NonNull String path) {\n+        return new Uri.Builder().scheme(ContentResolver.SCHEME_CONTENT).authority(authority).path(path).build();\n+    }\n+\n+}",
    "output": "Fix termux-open failing to open files with \"#\" and remove hardcoded \"content\" and \"file\" strings"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java b/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n@@ -220,6 +220,20 @@ public static boolean symlinkFileExists(final String filePath) {\n         return getFileType(filePath, false) == FileType.SYMLINK;\n     }\n \n+    /**\n+     * Checks whether a regular or directory file exists at {@code filePath}.\n+     *\n+     * @param filePath The {@code path} for regular file to check.\n+     * @param followLinks The {@code boolean} that decides if symlinks will be followed while\n+     *                       finding if file exists. Check {@link #getFileType(String, boolean)}\n+     *                       for details.\n+     * @return Returns {@code true} if regular or directory file exists, otherwise {@code false}.\n+     */\n+    public static boolean regularOrDirectoryFileExists(final String filePath, final boolean followLinks) {\n+        FileType fileType = getFileType(filePath, followLinks);\n+        return fileType == FileType.REGULAR || fileType == FileType.DIRECTORY;\n+    }\n+\n     /**\n      * Checks whether any file exists at {@code filePath}.\n      *",
    "output": "Add FileUtils.regularOrDirectoryFileExists()"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java b/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n@@ -145,7 +145,7 @@ public static String sanitizeFileName(String fileName, boolean sanitizeWhitespac\n      * @return Returns {@code true} if path in {@code dirPath}, otherwise returns {@code false}.\n      */\n     public static boolean isPathInDirPath(String path, final String dirPath, final boolean ensureUnder) {\n-       return isPathInDirPaths(path, Collections.singletonList(dirPath), ensureUnder);\n+        return isPathInDirPaths(path, Collections.singletonList(dirPath), ensureUnder);\n     }\n \n     /**\n@@ -275,8 +275,8 @@ public static FileType getFileType(final String filePath, final boolean followLi\n      * failed, otherwise {@code null}.\n      */\n     public static Error validateRegularFileExistenceAndPermissions(String label, final String filePath, final String parentDirPath,\n-                                                                    final String permissionsToCheck, final boolean setPermissions, final boolean setMissingPermissionsOnly,\n-                                                                    final boolean ignoreErrorsIfPathIsUnderParentDirPath) {\n+                                                                   final String permissionsToCheck, final boolean setPermissions, final boolean setMissingPermissionsOnly,\n+                                                                   final boolean ignoreErrorsIfPathIsUnderParentDirPath) {\n         label = (label == null ? \"\" : label + \" \");\n         if (filePath == null || filePath.isEmpty()) return FunctionErrno.ERRNO_NULL_OR_EMPTY_PARAMETER.getError(label + \"regular file path\", \"validateRegularFileExistenceAndPermissions\");\n \n@@ -356,8 +356,8 @@ public static Error validateRegularFileExistenceAndPermissions(String label, fin\n      * or validating permissions failed, otherwise {@code null}.\n      */\n     public static Error validateDirectoryFileExistenceAndPermissions(String label, final String filePath, final String parentDirPath, final boolean createDirectoryIfMissing,\n-                                                                      final String permissionsToCheck, final boolean setPermissions, final boolean setMissingPermissionsOnly,\n-                                                                      final boolean ignoreErrorsIfPathIsInParentDirPath, final boolean ignoreIfNotExecutable) {\n+                                                                     final String permissionsToCheck, final boolean setPermissions, final boolean setMissingPermissionsOnly,\n+                                                                     final boolean ignoreErrorsIfPathIsInParentDirPath, final boolean ignoreIfNotExecutable) {\n         label = (label == null ? \"\" : label + \" \");\n         if (filePath == null || filePath.isEmpty()) return FunctionErrno.ERRNO_NULL_OR_EMPTY_PARAMETER.getError(label + \"directory file path\", \"validateDirectoryExistenceAndPermissions\");\n \n@@ -471,7 +471,7 @@ public static Error createRegularFile(final String label, final String filePath)\n      * or validating permissions failed, otherwise {@code null}.\n      */\n     public static Error createRegularFile(String label, final String filePath,\n-                                           final String permissionsToCheck, final boolean setPermissions, final boolean setMissingPermissionsOnly) {\n+                                          final String permissionsToCheck, final boolean setPermissions, final boolean setMissingPermissionsOnly) {\n         label = (label == null ? \"\" : label + \" \");\n         if (filePath == null || filePath.isEmpty()) return FunctionErrno.ERRNO_NULL_OR_EMPTY_PARAMETER.getError(label + \"file path\", \"createRegularFile\");\n \n@@ -583,7 +583,7 @@ public static Error createDirectoryFile(final String label, final String filePat\n      * or validating permissions failed, otherwise {@code null}.\n      */\n     public static Error createDirectoryFile(final String label, final String filePath,\n-                                             final String permissionsToCheck, final boolean setPermissions, final boolean setMissingPermissionsOnly) {\n+                                            final String permissionsToCheck, final boolean setPermissions, final boolean setMissingPermissionsOnly) {\n         return validateDirectoryFileExistenceAndPermissions(label, filePath,\n             null, true,\n             permissionsToCheck, setPermissions, setMissingPermissionsOnly,\n@@ -648,7 +648,7 @@ public static Error createSymlinkFile(String label, final String targetFilePath,\n      * or validating permissions failed, otherwise {@code null}.\n      */\n     public static Error createSymlinkFile(String label, final String targetFilePath, final String destFilePath,\n-                                           final boolean allowDangling, final boolean overwrite, final boolean overwriteOnlyIfDestIsASymlink) {\n+                                          final boolean allowDangling, final boolean overwrite, final boolean overwriteOnlyIfDestIsASymlink) {\n         label = (label == null ? \"\" : label + \" \");\n         if (targetFilePath == null || targetFilePath.isEmpty()) return FunctionErrno.ERRNO_NULL_OR_EMPTY_PARAMETER.getError(label + \"target file path\", \"createSymlinkFile\");\n         if (destFilePath == null || destFilePath.isEmpty()) return FunctionErrno.ERRNO_NULL_OR_EMPTY_PARAMETER.getError(label + \"destination file path\", \"createSymlinkFile\");\n@@ -920,8 +920,8 @@ public static Error moveFile(final String label, final String srcFilePath, final\n      * @return Returns the {@code error} if copy or move was not successful, otherwise {@code null}.\n      */\n     public static Error copyOrMoveFile(String label, final String srcFilePath, final String destFilePath,\n-                                        final boolean moveFile, final boolean ignoreNonExistentSrcFile, int allowedFileTypeFlags,\n-                                        final boolean overwrite, final boolean overwriteOnlyIfDestSameFileTypeAsSrc) {\n+                                       final boolean moveFile, final boolean ignoreNonExistentSrcFile, int allowedFileTypeFlags,\n+                                       final boolean overwrite, final boolean overwriteOnlyIfDestSameFileTypeAsSrc) {\n         label = (label == null ? \"\" : label + \" \");\n         if (srcFilePath == null || srcFilePath.isEmpty()) return FunctionErrno.ERRNO_NULL_OR_EMPTY_PARAMETER.getError(label + \"source file path\", \"copyOrMoveFile\");\n         if (destFilePath == null || destFilePath.isEmpty()) return FunctionErrno.ERRNO_NULL_OR_EMPTY_PARAMETER.getError(label + \"destination file path\", \"copyOrMoveFile\");\n@@ -1151,7 +1151,7 @@ public static Error deleteFile(String label, final String filePath, final boolea\n                 // If delete is to be ignored if file does not exist\n                 if (ignoreNonExistentFile)\n                     return null;\n-                // Else return with error\n+                    // Else return with error\n                 else {\n                     label += \"file meant to be deleted\";\n                     return FileUtilsErrno.ERRNO_FILE_NOT_FOUND_AT_PATH.getError(label, filePath).setLabel(label);\n@@ -1423,7 +1423,7 @@ public static Error readStringFromFile(String label, final String filePath, Char\n \n             Logger.logVerbose(LOG_TAG, Logger.getMultiLineLogStringEntry(\"String\", DataUtils.getTruncatedCommandOutput(dataStringBuilder.toString(), Logger.LOGGER_ENTRY_MAX_SAFE_PAYLOAD, true, false, true), \"-\"));\n         } catch (Exception e) {\n-            return FileUtilsErrno.ERRNO_READING_STRING_TO_FILE_FAILED_WITH_EXCEPTION.getError(e, label + \"file\", filePath, e.getMessage());\n+            return FileUtilsErrno.ERRNO_READING_STRING_FROM_FILE_FAILED_WITH_EXCEPTION.getError(e, label + \"file\", filePath, e.getMessage());\n         } finally {\n             closeCloseable(fileInputStream);\n             closeCloseable(bufferedReader);\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/models/errors/FileUtilsErrno.java b/termux-shared/src/main/java/com/termux/shared/models/errors/FileUtilsErrno.java\n--- a/termux-shared/src/main/java/com/termux/shared/models/errors/FileUtilsErrno.java\n+++ b/termux-shared/src/main/java/com/termux/shared/models/errors/FileUtilsErrno.java\n@@ -65,7 +65,7 @@ public class FileUtilsErrno extends Errno {\n \n \n     /* Errors for file reading and writing (350-400) */\n-    public static final Errno ERRNO_READING_STRING_TO_FILE_FAILED_WITH_EXCEPTION = new Errno(TYPE, 350, \"Reading string from %1$s at path \\\"%2$s\\\" failed.\\nException: %3$s\");\n+    public static final Errno ERRNO_READING_STRING_FROM_FILE_FAILED_WITH_EXCEPTION = new Errno(TYPE, 350, \"Reading string from %1$s at path \\\"%2$s\\\" failed.\\nException: %3$s\");\n     public static final Errno ERRNO_WRITING_STRING_TO_FILE_FAILED_WITH_EXCEPTION = new Errno(TYPE, 351, \"Writing string to %1$s at path \\\"%2$s\\\" failed.\\nException: %3$s\");\n     public static final Errno ERRNO_UNSUPPORTED_CHARSET = new Errno(TYPE, 352, \"Unsupported charset \\\"%1$s\\\"\");\n     public static final Errno ERRNO_CHECKING_IF_CHARSET_SUPPORTED_FAILED = new Errno(TYPE, 353, \"Checking if charset \\\"%1$s\\\" is supported failed.\\nException: %2$s\");",
    "output": "Fix minor typos in FileUtils and FileUtilsErrno"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java b/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n@@ -105,7 +105,7 @@ public static String normalizePath(String path) {\n         path = path.replaceAll(\"\\\\./\", \"\");\n \n         if (path.endsWith(\"/\")) {\n-            path = path.substring(0, path.length() - 1);\n+            path = path.replaceAll(\"/+$\", \"\");\n         }\n \n         return path;",
    "output": "Remove all trailing slashes when normalizing path"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java b/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n@@ -117,7 +117,7 @@ public static String normalizePath(String path) {\n      * @param fileName The name to sanitize.\n      * @param sanitizeWhitespaces If set to {@code true}, then white space characters ` \\t\\n` will be\n      *                            converted.\n-     * @param sanitizeWhitespaces If set to {@code true}, then file name will be converted to lowe case.\n+     * @param toLower If set to {@code true}, then file name will be converted to lower case.\n      * @return Returns the {@code sanitized name}.\n      */\n     public static String sanitizeFileName(String fileName, boolean sanitizeWhitespaces, boolean toLower) {\n@@ -1855,4 +1855,42 @@ public static Error getShortFileUtilsError(final Error error) {\n             return shortErrno.getError(throwables, error.getLabel(), \"file\");\n     }\n \n+\n+    /**\n+     * Get file dirname for file at {@code filePath}.\n+     *\n+     * @param filePath The {@code path} for file.\n+     * @return Returns the file dirname if not {@code null}.\n+     */\n+    public static String getFileDirname(String filePath) {\n+        if (DataUtils.isNullOrEmpty(filePath)) return null;\n+        int lastSlash = filePath.lastIndexOf('/');\n+        return (lastSlash == -1) ? null : filePath.substring(0, lastSlash);\n+    }\n+\n+    /**\n+     * Get file basename for file at {@code filePath}.\n+     *\n+     * @param filePath The {@code path} for file.\n+     * @return Returns the file basename if not {@code null}.\n+     */\n+    public static String getFileBasename(String filePath) {\n+        if (DataUtils.isNullOrEmpty(filePath)) return null;\n+        int lastSlash = filePath.lastIndexOf('/');\n+        return (lastSlash == -1) ? filePath : filePath.substring(lastSlash + 1);\n+    }\n+\n+    /**\n+     * Get file basename for file at {@code filePath} without extension.\n+     *\n+     * @param filePath The {@code path} for file.\n+     * @return Returns the file basename without extension if not {@code null}.\n+     */\n+    public static String getFileBasenameWithoutExtension(String filePath) {\n+        String fileBasename = getFileBasename(filePath);\n+        if (DataUtils.isNullOrEmpty(fileBasename)) return null;\n+        int lastDot = fileBasename.lastIndexOf('.');\n+        return (lastDot == -1) ? fileBasename : fileBasename.substring(0, lastDot);\n+    }\n+\n }\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/shell/ShellUtils.java b/termux-shared/src/main/java/com/termux/shared/shell/ShellUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/shell/ShellUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/shell/ShellUtils.java\n@@ -1,5 +1,6 @@\n package com.termux.shared.shell;\n \n+import com.termux.shared.file.FileUtils;\n import com.termux.terminal.TerminalBuffer;\n import com.termux.terminal.TerminalEmulator;\n import com.termux.terminal.TerminalSession;\n@@ -23,9 +24,7 @@ public static int getPid(Process p) {\n     }\n \n     public static String getExecutableBasename(String executable) {\n-        if (executable == null) return null;\n-        int lastSlash = executable.lastIndexOf('/');\n-        return (lastSlash == -1) ? executable : executable.substring(lastSlash + 1);\n+        return FileUtils.getFileBasename(executable);\n     }\n \n     public static String getTerminalSessionTranscriptText(TerminalSession terminalSession, boolean linesJoined, boolean trim) {",
    "output": "Add functions to get dirname and basename in FileUtils"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/models/errors/Error.java b/termux-shared/src/main/java/com/termux/shared/models/errors/Error.java\n--- a/termux-shared/src/main/java/com/termux/shared/models/errors/Error.java\n+++ b/termux-shared/src/main/java/com/termux/shared/models/errors/Error.java\n@@ -1,5 +1,7 @@\n package com.termux.shared.models.errors;\n \n+import android.content.Context;\n+\n import androidx.annotation.NonNull;\n \n import com.termux.shared.logger.Logger;\n@@ -171,6 +173,26 @@ public String toString() {\n         return getErrorLogString(this);\n     }\n \n+\n+\n+    /**\n+     * Log the {@link Error} and show a toast for the minimal {@link String} for the {@link Error}.\n+     *\n+     * @param context The {@link Context} for operations.\n+     * @param logTag The log tag to use for logging.\n+     * @param error The {@link Error} to convert.\n+     */\n+    public static void logErrorAndShowToast(Context context, String logTag, Error error) {\n+        if (error == null) return;\n+        error.logErrorAndShowToast(context, logTag);\n+    }\n+\n+    public void logErrorAndShowToast(Context context, String logTag) {\n+        Logger.logErrorExtended(logTag, getErrorLogString());\n+        Logger.showToast(context, getMinimalErrorLogString(), true);\n+    }\n+\n+\n     /**\n      * Get a log friendly {@link String} for {@link Error} error parameters.\n      *\n@@ -179,13 +201,16 @@ public String toString() {\n      */\n     public static String getErrorLogString(final Error error) {\n         if (error == null) return \"null\";\n+        return error.getErrorLogString();\n+    }\n \n+    public String getErrorLogString() {\n         StringBuilder logString = new StringBuilder();\n \n-        logString.append(error.getCodeString());\n-        logString.append(\"\\n\").append(error.getTypeAndMessageLogString());\n-        if (error.throwablesList != null)\n-            logString.append(\"\\n\").append(error.geStackTracesLogString());\n+        logString.append(getCodeString());\n+        logString.append(\"\\n\").append(getTypeAndMessageLogString());\n+        if (this.throwablesList != null)\n+            logString.append(\"\\n\").append(geStackTracesLogString());\n \n         return logString.toString();\n     }\n@@ -198,11 +223,14 @@ public static String getErrorLogString(final Error error) {\n      */\n     public static String getMinimalErrorLogString(final Error error) {\n         if (error == null) return \"null\";\n+        return error.getMinimalErrorLogString();\n+    }\n \n+    public String getMinimalErrorLogString() {\n         StringBuilder logString = new StringBuilder();\n \n-        logString.append(error.getCodeString());\n-        logString.append(error.getTypeAndMessageLogString());\n+        logString.append(getCodeString());\n+        logString.append(getTypeAndMessageLogString());\n \n         return logString.toString();\n     }\n@@ -215,11 +243,14 @@ public static String getMinimalErrorLogString(final Error error) {\n      */\n     public static String getMinimalErrorString(final Error error) {\n         if (error == null) return \"null\";\n+        return error.getMinimalErrorString();\n+    }\n \n+    public String getMinimalErrorString() {\n         StringBuilder logString = new StringBuilder();\n \n-        logString.append(\"(\").append(error.getCode()).append(\") \");\n-        logString.append(error.getType()).append(\": \").append(error.getMessage());\n+        logString.append(\"(\").append(getCode()).append(\") \");\n+        logString.append(getType()).append(\": \").append(getMessage());\n \n         return logString.toString();\n     }\n@@ -232,12 +263,16 @@ public static String getMinimalErrorString(final Error error) {\n      */\n     public static String getErrorMarkdownString(final Error error) {\n         if (error == null) return \"null\";\n+        return error.getErrorMarkdownString();\n+    }\n \n+    public String getErrorMarkdownString() {\n         StringBuilder markdownString = new StringBuilder();\n \n-        markdownString.append(MarkdownUtils.getSingleLineMarkdownStringEntry(\"Error Code\", error.getCode(), \"-\"));\n-        markdownString.append(\"\\n\").append(MarkdownUtils.getMultiLineMarkdownStringEntry((Errno.TYPE.equals(error.getType()) ? \"Error Message\" : \"Error Message (\" + error.getType() + \")\"), error.message, \"-\"));\n-        markdownString.append(\"\\n\\n\").append(error.geStackTracesMarkdownString());\n+        markdownString.append(MarkdownUtils.getSingleLineMarkdownStringEntry(\"Error Code\", getCode(), \"-\"));\n+        markdownString.append(\"\\n\").append(MarkdownUtils.getMultiLineMarkdownStringEntry(\n+            (Errno.TYPE.equals(getType()) ? \"Error Message\" : \"Error Message (\" + getType() + \")\"), message, \"-\"));\n+        markdownString.append(\"\\n\\n\").append(geStackTracesMarkdownString());\n \n         return markdownString.toString();\n     }",
    "output": "Add Error.logErrorAndShowToast() and provide non-static logging functions to be used when Error may not be null"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/logger/Logger.java b/termux-shared/src/main/java/com/termux/shared/logger/Logger.java\n--- a/termux-shared/src/main/java/com/termux/shared/logger/Logger.java\n+++ b/termux-shared/src/main/java/com/termux/shared/logger/Logger.java\n@@ -195,9 +195,20 @@ public static void logVerboseForce(String tag, String message) {\n \n \n \n-    public static void logErrorAndShowToast(Context context, String tag, String message) {\n-        if (context == null) return;\n+    public static void logInfoAndShowToast(Context context, String tag, String message) {\n+        if (CURRENT_LOG_LEVEL >= LOG_LEVEL_NORMAL) {\n+            logInfo(tag, message);\n+            showToast(context, message, true);\n+        }\n+    }\n \n+    public static void logInfoAndShowToast(Context context, String message) {\n+        logInfoAndShowToast(context, DEFAULT_LOG_TAG, message);\n+    }\n+\n+\n+\n+    public static void logErrorAndShowToast(Context context, String tag, String message) {\n         if (CURRENT_LOG_LEVEL >= LOG_LEVEL_NORMAL) {\n             logError(tag, message);\n             showToast(context, message, true);\n@@ -211,8 +222,6 @@ public static void logErrorAndShowToast(Context context, String message) {\n \n \n     public static void logDebugAndShowToast(Context context, String tag, String message) {\n-        if (context == null) return;\n-\n         if (CURRENT_LOG_LEVEL >= LOG_LEVEL_DEBUG) {\n             logDebug(tag, message);\n             showToast(context, message, true);",
    "output": "Add Logger.logInfoAndShowToast() and log messages even if not showing toast due to null Context"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/models/errors/FunctionErrno.java b/termux-shared/src/main/java/com/termux/shared/models/errors/FunctionErrno.java\n--- a/termux-shared/src/main/java/com/termux/shared/models/errors/FunctionErrno.java\n+++ b/termux-shared/src/main/java/com/termux/shared/models/errors/FunctionErrno.java\n@@ -12,6 +12,7 @@ public class FunctionErrno extends Errno {\n     public static final Errno ERRNO_UNSET_PARAMETER = new Errno(TYPE, 102, \"The %1$s parameter passed to \\\"%2$s\\\" must be set.\");\n     public static final Errno ERRNO_UNSET_PARAMETERS = new Errno(TYPE, 103, \"The %1$s parameters passed to \\\"%2$s\\\" must be set.\");\n     public static final Errno ERRNO_INVALID_PARAMETER = new Errno(TYPE, 104, \"The %1$s parameter passed to \\\"%2$s\\\" is invalid.\\\"%3$s\\\"\");\n+    public static final Errno ERRNO_PARAMETER_NOT_INSTANCE_OF = new Errno(TYPE, 104, \"The %1$s parameter passed to \\\"%2$s\\\" is not an instance of %3$s.\");\n \n \n     FunctionErrno(final String type, final int code, final String message) {\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/view/ActivityUtils.java b/termux-shared/src/main/java/com/termux/shared/view/ActivityUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/view/ActivityUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/view/ActivityUtils.java\n@@ -0,0 +1,86 @@\n+package com.termux.shared.view;\n+\n+import android.app.Activity;\n+import android.content.Context;\n+import android.content.Intent;\n+\n+import androidx.activity.result.ActivityResultLauncher;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.appcompat.app.AppCompatActivity;\n+\n+import com.termux.shared.R;\n+import com.termux.shared.logger.Logger;\n+import com.termux.shared.models.errors.Error;\n+import com.termux.shared.models.errors.FunctionErrno;\n+\n+\n+public class ActivityUtils {\n+\n+    private static final String LOG_TAG = \"ActivityUtils\";\n+\n+    /**\n+     * Wrapper for {@link #startActivityForResult(Context, int, Intent, boolean, boolean, ActivityResultLauncher)}.\n+     */\n+    public static boolean startActivityForResult(Context context, int requestCode, @NonNull Intent intent) {\n+        return startActivityForResult(context, requestCode, intent, true, true, null);\n+    }\n+\n+    /**\n+     * Wrapper for {@link #startActivityForResult(Context, int, Intent, boolean, boolean, ActivityResultLauncher)}.\n+     */\n+    public static boolean startActivityForResult(Context context, int requestCode, @NonNull Intent intent, boolean logErrorMessage, boolean showErrorMessage) {\n+        return startActivityForResult(context, requestCode, intent, logErrorMessage, showErrorMessage, null);\n+    }\n+\n+    /**\n+     * Start an {@link Activity} for result.\n+     *\n+     * @param context The context for operations. It must be an instance of {@link Activity} or\n+     *               {@link AppCompatActivity}. It is ignored if {@code activityResultLauncher}\n+     *                is not {@code null}.\n+     * @param requestCode The request code to use while sending intent. This must be >= 0, otherwise\n+     *                    exception will be raised. This is ignored if {@code activityResultLauncher}\n+     *                    is {@code null}.\n+     * @param intent The {@link Intent} to send to start the activity.\n+     * @param logErrorMessage If an error message should be logged if failed to start activity.\n+     * @param showErrorMessage If an error message toast should be shown if failed to start activity\n+     *                         in addition to logging a message.\n+     * @param activityResultLauncher The {@link ActivityResultLauncher<Intent>} to use for start the\n+     *                               activity. If this is {@code null}, then\n+     *                               {@link Activity#startActivity(Intent)} will be used instead.\n+     *                               Note that later is deprecated.\n+     * @return Returns {@code true} if starting activity was successful, otherwise {@code false}.\n+     */\n+    public static boolean startActivityForResult(@NonNull Context context, int requestCode, @NonNull Intent intent,\n+                                                 boolean logErrorMessage, boolean showErrorMessage, @Nullable ActivityResultLauncher<Intent> activityResultLauncher) {\n+        try {\n+            if (activityResultLauncher != null) {\n+                activityResultLauncher.launch(intent);\n+            } else {\n+                if (context instanceof AppCompatActivity)\n+                    ((AppCompatActivity) context).startActivityForResult(intent, requestCode);\n+                else if (context instanceof Activity)\n+                    ((Activity) context).startActivityForResult(intent, requestCode);\n+                else {\n+                    if (logErrorMessage)\n+                        Error.logErrorAndShowToast(showErrorMessage ? context : null, LOG_TAG,\n+                            FunctionErrno.ERRNO_PARAMETER_NOT_INSTANCE_OF.getError(\"context\", \"startActivityForResult\", \"Activity or AppCompatActivity\"));\n+                    return false;\n+                }\n+            }\n+        } catch (Exception e) {\n+            if (logErrorMessage) {\n+                String activityName = intent.getComponent() != null ? intent.getComponent().getShortClassName() : \"Unknown\";\n+                String errmsg = context.getString(R.string.error_failed_to_start_activity_for_result, activityName);\n+                Logger.logStackTraceWithMessage(LOG_TAG, errmsg, e);\n+                if (showErrorMessage)\n+                    Logger.showToast(context, errmsg + \": \" + e.getMessage(), true);\n+            }\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+}",
    "output": "Add ActivityUtils with functions to start activities for result"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java b/termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java\n@@ -254,9 +254,9 @@ public static int getTargetSDKForPackage(@NonNull final ApplicationInfo applicat\n      * set.\n      *\n      * @param context The {@link Context} for the package.\n-     * @return Returns the {@code versionName}. This will be {@code null} if an exception is raised.\n+     * @return Returns {@code true} if app is debuggable, otherwise {@code false}.\n      */\n-    public static Boolean isAppForPackageADebuggableBuild(@NonNull final Context context) {\n+    public static boolean isAppForPackageADebuggableBuild(@NonNull final Context context) {\n         return isAppForPackageADebuggableBuild(context.getApplicationInfo());\n     }\n \n@@ -265,9 +265,9 @@ public static Boolean isAppForPackageADebuggableBuild(@NonNull final Context con\n      * set.\n      *\n      * @param applicationInfo The {@link ApplicationInfo} for the package.\n-     * @return Returns the {@code versionName}. This will be {@code null} if an exception is raised.\n+     * @return Returns {@code true} if app is debuggable, otherwise {@code false}.\n      */\n-    public static Boolean isAppForPackageADebuggableBuild(@NonNull final ApplicationInfo applicationInfo) {\n+    public static boolean isAppForPackageADebuggableBuild(@NonNull final ApplicationInfo applicationInfo) {\n         return ( 0 != ( applicationInfo.flags & ApplicationInfo.FLAG_DEBUGGABLE ) );\n     }\n \n@@ -278,9 +278,9 @@ public static Boolean isAppForPackageADebuggableBuild(@NonNull final Application\n      * set.\n      *\n      * @param context The {@link Context} for the package.\n-     * @return Returns the {@code versionName}. This will be {@code null} if an exception is raised.\n+     * @return Returns {@code true} if app is installed on external storage, otherwise {@code false}.\n      */\n-    public static Boolean isAppInstalledOnExternalStorage(@NonNull final Context context) {\n+    public static boolean isAppInstalledOnExternalStorage(@NonNull final Context context) {\n         return isAppInstalledOnExternalStorage(context.getApplicationInfo());\n     }\n \n@@ -289,9 +289,9 @@ public static Boolean isAppInstalledOnExternalStorage(@NonNull final Context con\n      * set.\n      *\n      * @param applicationInfo The {@link ApplicationInfo} for the package.\n-     * @return Returns the {@code versionName}. This will be {@code null} if an exception is raised.\n+     * @return Returns {@code true} if app is installed on external storage, otherwise {@code false}.\n      */\n-    public static Boolean isAppInstalledOnExternalStorage(@NonNull final ApplicationInfo applicationInfo) {\n+    public static boolean isAppInstalledOnExternalStorage(@NonNull final ApplicationInfo applicationInfo) {\n         return ( 0 != ( applicationInfo.flags & ApplicationInfo.FLAG_EXTERNAL_STORAGE ) );\n     }\n \n@@ -328,7 +328,7 @@ public static Integer getVersionCodeForPackage(@NonNull final Context context, @\n      */\n     @Nullable\n     public static Integer getVersionCodeForPackage(@Nullable final PackageInfo packageInfo) {\n-        return packageInfo != null? packageInfo.versionCode : null;\n+        return packageInfo != null ? packageInfo.versionCode : null;\n     }\n \n \n@@ -365,7 +365,7 @@ public static String getVersionNameForPackage(@NonNull final Context context, @N\n      */\n     @Nullable\n     public static String getVersionNameForPackage(@Nullable final PackageInfo packageInfo) {\n-        return packageInfo != null? packageInfo.versionName : null;\n+        return packageInfo != null ? packageInfo.versionName : null;\n     }\n \n ",
    "output": "Fix typos is PackageUtils"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/net/UrlUtils.java b/termux-shared/src/main/java/com/termux/shared/net/UrlUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/net/UrlUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/net/UrlUtils.java\n@@ -0,0 +1,113 @@\n+package com.termux.shared.net;\n+\n+import androidx.annotation.Nullable;\n+\n+import com.termux.shared.data.DataUtils;\n+import com.termux.shared.logger.Logger;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n+public class UrlUtils {\n+\n+    /** The parts of a {@link URL}. */\n+    public enum UrlPart {\n+        AUTHORITY,\n+        FILE,\n+        HOST,\n+        REF,\n+        FRAGMENT,\n+        PATH,\n+        PORT,\n+        PROTOCOL,\n+        QUERY,\n+        USER_INFO\n+    }\n+\n+    private static final String LOG_TAG = \"UrlUtils\";\n+\n+    /**\n+     * Join a url base and destination.\n+     *\n+     * @param base The base url to open.\n+     * @param destination The destination url to open.\n+     * @param logError If an error message should be logged.\n+     * @return Returns the joined {@link String} Url, otherwise {@code null}.\n+     */\n+    @Nullable\n+    public static String joinUrl(final String base, String destination, boolean logError) {\n+        if (DataUtils.isNullOrEmpty(base)) return null;\n+        try {\n+            return new URL(new URL(base), destination).toString();\n+        } catch (MalformedURLException e) {\n+            if (logError)\n+                Logger.logError(LOG_TAG, \"Failed to join url base \\\"\" + base + \"\\\" and destination \\\"\" + destination + \"\\\": \" + e.getMessage());\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Get {@link URL} from url string.\n+     *\n+     * @param urlString The urlString string.\n+     * @return Returns the {@link URL} if a valid urlString, otherwise {@code null}.\n+     */\n+    @Nullable\n+    public static URL getUrl(String urlString) {\n+        if (DataUtils.isNullOrEmpty(urlString)) return null;\n+        try {\n+            return new URL(urlString);\n+        } catch (MalformedURLException e) {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Get a {@link URL} part from url string.\n+     *\n+     * @param urlString The urlString string.\n+     * @param urlPart The part to get.\n+     * @return Returns the {@link URL} part if a valid urlString and part, otherwise {@code null}.\n+     */\n+    @Nullable\n+    public static String getUrlPart(String urlString, UrlPart urlPart) {\n+        URL url = getUrl(urlString);\n+        if (url == null) return null;\n+        switch (urlPart) {\n+            case AUTHORITY:\n+                return url.getAuthority();\n+            case FILE:\n+                return url.getFile();\n+            case HOST:\n+                return url.getHost();\n+            case REF:\n+            case FRAGMENT:\n+                return url.getRef();\n+            case PATH:\n+                return url.getPath();\n+            case PORT:\n+                return String.valueOf(url.getPort());\n+            case PROTOCOL:\n+                return url.getProtocol();\n+            case QUERY:\n+                return url.getQuery();\n+            case USER_INFO:\n+                return url.getUserInfo();\n+            default:\n+                return null;\n+        }\n+    }\n+\n+    /** Remove \"https://www.\", \"https://\", \"www.\", etc */\n+    public static String removeProtocol(String urlString) {\n+        if (urlString == null) return null;\n+        return urlString.replaceFirst(\"^(http[s]?://www\\\\.|http[s]?://|www\\\\.)\",\"\");\n+    }\n+\n+    public static boolean areUrlsEqual(String url1, String url2) {\n+        if (url1 == null && url2 == null) return true;\n+        if (url1 == null || url2 == null) return false;\n+        return UrlUtils.removeProtocol(url1).replaceAll(\"/+$\", \"\").equals(UrlUtils.removeProtocol(url2).replaceAll(\"/+$\", \"\"));\n+    }\n+\n+}",
    "output": "Add UrlUtils"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java b/termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java\n@@ -316,11 +316,18 @@ public static Integer getVersionCodeForPackage(@NonNull final Context context) {\n      */\n     @Nullable\n     public static Integer getVersionCodeForPackage(@NonNull final Context context, @NonNull final String packageName) {\n-        try {\n-            return getPackageInfoForPackage(context, packageName).versionCode;\n-        } catch (final Exception e) {\n-            return null;\n-        }\n+        return getVersionCodeForPackage(getPackageInfoForPackage(context, packageName));\n+    }\n+\n+    /**\n+     * Get the {@code versionCode} for the {@code packageName}.\n+     *\n+     * @param packageInfo The {@link PackageInfo} for the package.\n+     * @return Returns the {@code versionCode}. This will be {@code null} if an exception is raised.\n+     */\n+    @Nullable\n+    public static Integer getVersionCodeForPackage(@Nullable final PackageInfo packageInfo) {\n+        return packageInfo != null? packageInfo.versionCode : null;\n     }\n \n \n@@ -335,6 +342,7 @@ public static Integer getVersionCodeForPackage(@NonNull final Context context, @\n     public static String getVersionNameForPackage(@NonNull final Context context) {\n         return getVersionNameForPackage(context, context.getPackageName());\n     }\n+\n     /**\n      * Get the {@code versionName} for the {@code packageName}.\n      *\n@@ -344,11 +352,19 @@ public static String getVersionNameForPackage(@NonNull final Context context) {\n      */\n     @Nullable\n     public static String getVersionNameForPackage(@NonNull final Context context, @NonNull final String packageName) {\n-        try {\n-            return getPackageInfoForPackage(context, packageName).versionName;\n-        } catch (final Exception e) {\n-            return null;\n-        }\n+        return getVersionNameForPackage(getPackageInfoForPackage(context, packageName));\n+    }\n+\n+    /**\n+     * Get the {@code versionName} for the {@code packageName}.\n+     *\n+     * @param packageInfo The {@link PackageInfo} for the package.\n+     * @return Returns the {@code versionName}. This will be {@code null} if an {@code packageInfo}\n+     * is {@code null}.\n+     */\n+    @Nullable\n+    public static String getVersionNameForPackage(@Nullable final PackageInfo packageInfo) {\n+        return packageInfo != null? packageInfo.versionName : null;\n     }\n \n \n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/AndroidUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/AndroidUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/AndroidUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/AndroidUtils.java\n@@ -3,6 +3,7 @@\n import android.annotation.SuppressLint;\n import android.content.Context;\n import android.content.pm.ApplicationInfo;\n+import android.content.pm.PackageInfo;\n import android.os.Build;\n \n import androidx.annotation.NonNull;\n@@ -65,15 +66,17 @@ public static String getAppInfoMarkdownString(@NonNull final Context context) {\n      * @return Returns the markdown {@link String}.\n      */\n     public static String getAppInfoMarkdownString(@NonNull final Context context, @NonNull final String packageName) {\n+        PackageInfo packageInfo = PackageUtils.getPackageInfoForPackage(context, packageName);\n+        if (packageInfo == null) return null;\n         ApplicationInfo applicationInfo = PackageUtils.getApplicationInfoForPackage(context, packageName);\n         if (applicationInfo == null) return null;\n \n         StringBuilder markdownString = new StringBuilder();\n \n         AndroidUtils.appendPropertyToMarkdown(markdownString,\"APP_NAME\", PackageUtils.getAppNameForPackage(context, applicationInfo));\n         AndroidUtils.appendPropertyToMarkdown(markdownString,\"PACKAGE_NAME\", PackageUtils.getPackageNameForPackage(applicationInfo));\n-        AndroidUtils.appendPropertyToMarkdown(markdownString,\"VERSION_NAME\", PackageUtils.getVersionNameForPackage(context, packageName));\n-        AndroidUtils.appendPropertyToMarkdown(markdownString,\"VERSION_CODE\", PackageUtils.getVersionCodeForPackage(context, packageName));\n+        AndroidUtils.appendPropertyToMarkdown(markdownString,\"VERSION_NAME\", PackageUtils.getVersionNameForPackage(packageInfo));\n+        AndroidUtils.appendPropertyToMarkdown(markdownString,\"VERSION_CODE\", PackageUtils.getVersionCodeForPackage(packageInfo));\n         AndroidUtils.appendPropertyToMarkdown(markdownString,\"UID\", PackageUtils.getUidForPackage(applicationInfo));\n         AndroidUtils.appendPropertyToMarkdown(markdownString,\"TARGET_SDK\", PackageUtils.getTargetSDKForPackage(applicationInfo));\n         AndroidUtils.appendPropertyToMarkdown(markdownString,\"IS_DEBUGGABLE_BUILD\", PackageUtils.isAppForPackageADebuggableBuild(applicationInfo));",
    "output": "Use cached PackageInfo while getting version code and name for app"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java b/termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java\n@@ -204,6 +204,28 @@ public static String getPackageNameForPackage(@NonNull final ApplicationInfo app\n \n \n \n+    /**\n+     * Get the uid for the package associated with the {@code context}.\n+     *\n+     * @param context The {@link Context} for the package.\n+     * @return Returns the uid.\n+     */\n+    public static int getUidForPackage(@NonNull final Context context) {\n+        return getUidForPackage(context.getApplicationInfo());\n+    }\n+\n+    /**\n+     * Get the uid for the package associated with the {@code applicationInfo}.\n+     *\n+     * @param applicationInfo The {@link ApplicationInfo} for the package.\n+     * @return Returns the uid.\n+     */\n+    public static int getUidForPackage(@NonNull final ApplicationInfo applicationInfo) {\n+        return applicationInfo.uid;\n+    }\n+\n+\n+\n     /**\n      * Get the {@code targetSdkVersion} for the package associated with the {@code context}.\n      *\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/AndroidUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/AndroidUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/AndroidUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/AndroidUtils.java\n@@ -74,6 +74,7 @@ public static String getAppInfoMarkdownString(@NonNull final Context context, @N\n         AndroidUtils.appendPropertyToMarkdown(markdownString,\"PACKAGE_NAME\", PackageUtils.getPackageNameForPackage(applicationInfo));\n         AndroidUtils.appendPropertyToMarkdown(markdownString,\"VERSION_NAME\", PackageUtils.getVersionNameForPackage(context, packageName));\n         AndroidUtils.appendPropertyToMarkdown(markdownString,\"VERSION_CODE\", PackageUtils.getVersionCodeForPackage(context, packageName));\n+        AndroidUtils.appendPropertyToMarkdown(markdownString,\"UID\", PackageUtils.getUidForPackage(applicationInfo));\n         AndroidUtils.appendPropertyToMarkdown(markdownString,\"TARGET_SDK\", PackageUtils.getTargetSDKForPackage(applicationInfo));\n         AndroidUtils.appendPropertyToMarkdown(markdownString,\"IS_DEBUGGABLE_BUILD\", PackageUtils.isAppForPackageADebuggableBuild(applicationInfo));\n ",
    "output": "Add uid to app info"
  },
  {
    "input": "diff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n@@ -796,7 +796,6 @@ public void processCodePoint(int b) {\n                             int columnsToDelete = Math.min(getArg0(1), columnsAfterCursor);\n                             int columnsToMove = columnsAfterCursor - columnsToDelete;\n                             mScreen.blockCopy(mCursorCol + columnsToDelete, 0, columnsToMove, mRows, mCursorCol, 0);\n-                            blockClear(mCursorRow + columnsToMove, 0, columnsToDelete, mRows);\n                         } else {\n                             unknownSequence(b);\n                         }",
    "output": "Fix CSI Delete Ps Column(s) (DECDC)"
  },
  {
    "input": "diff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalBuffer.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalBuffer.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalBuffer.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalBuffer.java\n@@ -93,8 +93,11 @@ public String getSelectedText(int selX1, int selY1, int selX2, int selY2, boolea\n                     if (c != ' ') lastPrintingCharIndex = i;\n                 }\n             }\n-            if (lastPrintingCharIndex != -1)\n-                builder.append(line, x1Index, lastPrintingCharIndex - x1Index + 1);\n+\n+            int len = lastPrintingCharIndex - x1Index + 1;\n+            if (lastPrintingCharIndex != -1 && len > 0)\n+                builder.append(line, x1Index, len);\n+\n             boolean lineFillsWidth = lastPrintingCharIndex == x2Index - 1;\n             if ((!joinBackLines || !rowLineWrap) && (!joinFullLines || !lineFillsWidth)\n                 && row < selY2 && row < mScreenRows - 1) builder.append('\\n');",
    "output": "Fix ArrayIndexOutOfBoundsException thrown because length was less than 0 when selecting text from terminal buffer"
  },
  {
    "input": "diff --git a/terminal-view/src/main/java/com/termux/view/textselection/TextSelectionCursorController.java b/terminal-view/src/main/java/com/termux/view/textselection/TextSelectionCursorController.java\n--- a/terminal-view/src/main/java/com/termux/view/textselection/TextSelectionCursorController.java\n+++ b/terminal-view/src/main/java/com/termux/view/textselection/TextSelectionCursorController.java\n@@ -183,14 +183,19 @@ public void onGetContentRect(ActionMode mode, View view, Rect outRect) {\n                 int y1 = Math.round((mSelY1 - 1 - terminalView.getTopRow()) * terminalView.mRenderer.getFontLineSpacing());\n                 int y2 = Math.round((mSelY2 + 1 - terminalView.getTopRow()) * terminalView.mRenderer.getFontLineSpacing());\n \n-\n                 if (x1 > x2) {\n                     int tmp = x1;\n                     x1 = x2;\n                     x2 = tmp;\n                 }\n \n-                outRect.set(x1, y1 + mHandleHeight, x2, y2 + mHandleHeight);\n+                int terminalBottom = terminalView.getBottom();\n+                int top = y1 + mHandleHeight;\n+                int bottom = y2 + mHandleHeight;\n+                if (top > terminalBottom) top = terminalBottom;\n+                if (bottom > terminalBottom) bottom = terminalBottom;\n+\n+                outRect.set(x1, top, x2, bottom);\n             }\n         }, ActionMode.TYPE_FLOATING);\n     }",
    "output": "Fix issue where menu wouldn't show when text on bottom row of terminal was selected"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxInstaller.java b/app/src/main/java/com/termux/app/TermuxInstaller.java\n--- a/app/src/main/java/com/termux/app/TermuxInstaller.java\n+++ b/app/src/main/java/com/termux/app/TermuxInstaller.java\n@@ -252,14 +252,19 @@ public static void showBootstrapErrorDialog(Activity activity, Runnable whenDone\n     }\n \n     private static void sendBootstrapCrashReportNotification(Activity activity, String message) {\n+        final String title = TermuxConstants.TERMUX_APP_NAME + \" Bootstrap Error\";\n+\n+        // Add info of all install Termux plugin apps as well since their target sdk or installation\n+        // on external/portable sd card can affect Termux app files directory access or exec.\n         CrashUtils.sendCrashReportNotification(activity, LOG_TAG,\n-            \"## Bootstrap Error\\n\\n\" + message + \"\\n\\n\" +\n+            title, null, \"## \" + title + \"\\n\\n\" + message + \"\\n\\n\" +\n                 TermuxUtils.getTermuxDebugMarkdownString(activity),\n-            true, true);\n+            true, false, TermuxUtils.AppInfoMode.TERMUX_AND_PLUGIN_PACKAGES, true);\n     }\n \n     static void setupStorageSymlinks(final Context context) {\n         final String LOG_TAG = \"termux-storage\";\n+        final String title = TermuxConstants.TERMUX_APP_NAME + \" Setup Storage Error\";\n \n         Logger.logInfo(LOG_TAG, \"Setting up storage symlinks.\");\n \n@@ -273,7 +278,9 @@ public void run() {\n                     if (error != null) {\n                         Logger.logErrorAndShowToast(context, LOG_TAG, error.getMessage());\n                         Logger.logErrorExtended(LOG_TAG, \"Setup Storage Error\\n\" + error.toString());\n-                        CrashUtils.sendCrashReportNotification(context, LOG_TAG, \"## Setup Storage Error\\n\\n\" + Error.getErrorMarkdownString(error), true, true);\n+                        CrashUtils.sendCrashReportNotification(context, LOG_TAG, title, null,\n+                            \"## \" + title + \"\\n\\n\" + Error.getErrorMarkdownString(error),\n+                            true, false, TermuxUtils.AppInfoMode.TERMUX_PACKAGE, true);\n                         return;\n                     }\n \n@@ -312,7 +319,9 @@ public void run() {\n                 } catch (Exception e) {\n                     Logger.logErrorAndShowToast(context, LOG_TAG, e.getMessage());\n                     Logger.logStackTraceWithMessage(LOG_TAG, \"Setup Storage Error: Error setting up link\", e);\n-                    CrashUtils.sendCrashReportNotification(context, LOG_TAG, \"## Setup Storage Error\\n\\n\" + Logger.getStackTracesMarkdownString(null, Logger.getStackTracesStringArray(e)), true, true);\n+                    CrashUtils.sendCrashReportNotification(context, LOG_TAG, title, null,\n+                        \"## \" + title + \"\\n\\n\" + Logger.getStackTracesMarkdownString(null, Logger.getStackTracesStringArray(e)),\n+                        true, false, TermuxUtils.AppInfoMode.TERMUX_PACKAGE, true);\n                 }\n             }\n         }.start();\n\ndiff --git a/app/src/main/java/com/termux/app/utils/CrashUtils.java b/app/src/main/java/com/termux/app/utils/CrashUtils.java\n--- a/app/src/main/java/com/termux/app/utils/CrashUtils.java\n+++ b/app/src/main/java/com/termux/app/utils/CrashUtils.java\n@@ -10,6 +10,7 @@\n \n import com.termux.R;\n import com.termux.shared.activities.ReportActivity;\n+import com.termux.shared.markdown.MarkdownUtils;\n import com.termux.shared.models.errors.Error;\n import com.termux.shared.notification.NotificationUtils;\n import com.termux.shared.file.FileUtils;\n@@ -87,7 +88,7 @@ public void run() {\n \n                 Logger.logDebug(logTag, \"A crash log file found at \\\"\" + TermuxConstants.TERMUX_CRASH_LOG_FILE_PATH +  \"\\\".\");\n \n-                sendCrashReportNotification(context, logTag, reportString, false, false);\n+                sendCrashReportNotification(context, logTag, null, null, reportString, false, false, null, false);\n             }\n         }.start();\n     }\n@@ -98,15 +99,25 @@ public void run() {\n      *\n      * @param context The {@link Context} for operations.\n      * @param logTag The log tag to use for logging.\n+     * @param title The title for the crash report and notification.\n+     * @param notificationTextString The text of the notification.\n      * @param message The message for the crash report.\n      * @param forceNotification If set to {@code true}, then a notification will be shown\n      *                          regardless of if pending intent is {@code null} or\n      *                          {@link TermuxPreferenceConstants.TERMUX_APP#KEY_CRASH_REPORT_NOTIFICATIONS_ENABLED}\n      *                          is {@code false}.\n-     * @param addAppAndDeviceInfo If set to {@code true}, then app and device info will be appended\n-     *                            to the message.\n+     * @param showToast If set to {@code true}, then a toast will be shown for {@code notificationTextString}.\n+     * @param appInfoMode The {@link TermuxUtils.AppInfoMode} to use to add app info to the message.\n+     *                    Set to {@code null} if app info should not be appended to the message.\n+     * @param addDeviceInfo If set to {@code true}, then device info should be appended to the message.\n      */\n-    public static void sendCrashReportNotification(final Context context, String logTag, String message, boolean forceNotification, boolean addAppAndDeviceInfo) {\n+    public static void sendCrashReportNotification(final Context context, String logTag,\n+                                                   CharSequence title,\n+                                                   String notificationTextString,\n+                                                   String message, boolean forceNotification,\n+                                                   boolean showToast,\n+                                                   TermuxUtils.AppInfoMode appInfoMode,\n+                                                   boolean addDeviceInfo) {\n         if (context == null) return;\n \n         TermuxAppSharedPreferences preferences = TermuxAppSharedPreferences.build(context);\n@@ -118,22 +129,27 @@ public static void sendCrashReportNotification(final Context context, String log\n \n         logTag = DataUtils.getDefaultIfNull(logTag, LOG_TAG);\n \n+        if (showToast)\n+            Logger.showToast(context, notificationTextString, true);\n+\n         // Send a notification to show the crash log which when clicked will open the {@link ReportActivity}\n         // to show the details of the crash\n-        String title = TermuxConstants.TERMUX_APP_NAME + \" Crash Report\";\n+        if (title == null || title.toString().isEmpty())\n+            title = TermuxConstants.TERMUX_APP_NAME + \" Crash Report\";\n \n         Logger.logDebug(logTag, \"Sending \\\"\" + title + \"\\\" notification.\");\n \n         StringBuilder reportString = new StringBuilder(message);\n \n-        if (addAppAndDeviceInfo) {\n-            reportString.append(\"\\n\\n\").append(TermuxUtils.getAppInfoMarkdownString(context, true));\n+        if (appInfoMode != null)\n+            reportString.append(\"\\n\\n\").append(TermuxUtils.getAppInfoMarkdownString(context, appInfoMode));\n+\n+        if (addDeviceInfo)\n             reportString.append(\"\\n\\n\").append(AndroidUtils.getDeviceInfoMarkdownString(context));\n-        }\n \n         String userActionName = UserAction.CRASH_REPORT.getName();\n         ReportActivity.NewInstanceResult result = ReportActivity.newInstance(context, new ReportInfo(userActionName,\n-            logTag, title, null, reportString.toString(),\n+            logTag, title.toString(), null, reportString.toString(),\n             \"\\n\\n\" + TermuxUtils.getReportIssueMarkdownString(context), true,\n             userActionName,\n             Environment.getExternalStorageDirectory() + \"/\" +\n@@ -152,9 +168,14 @@ public static void sendCrashReportNotification(final Context context, String log\n         // Setup the notification channel if not already set up\n         setupCrashReportsNotificationChannel(context);\n \n+        // Use markdown in notification\n+        CharSequence notificationTextCharSequence = MarkdownUtils.getSpannedMarkdownText(context, notificationTextString);\n+        //CharSequence notificationTextCharSequence = notificationTextString;\n+\n         // Build the notification\n-        Notification.Builder builder = getCrashReportsNotificationBuilder(context, title, null,\n-            null, contentIntent, deleteIntent, NotificationUtils.NOTIFICATION_MODE_VIBRATE);\n+        Notification.Builder builder = getCrashReportsNotificationBuilder(context, title,\n+            notificationTextCharSequence, notificationTextCharSequence, contentIntent, deleteIntent,\n+            NotificationUtils.NOTIFICATION_MODE_VIBRATE);\n         if (builder == null) return;\n \n         // Send the notification",
    "output": "Add info of all Termux plugins in bootstrap error reports and refactor notification functions"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/utils/PluginUtils.java b/app/src/main/java/com/termux/app/utils/PluginUtils.java\n--- a/app/src/main/java/com/termux/app/utils/PluginUtils.java\n+++ b/app/src/main/java/com/termux/app/utils/PluginUtils.java\n@@ -18,6 +18,7 @@\n import com.termux.shared.models.errors.Error;\n import com.termux.shared.notification.NotificationUtils;\n import com.termux.shared.notification.TermuxNotificationUtils;\n+import com.termux.shared.settings.preferences.TermuxPreferenceConstants;\n import com.termux.shared.shell.ResultSender;\n import com.termux.shared.shell.ShellUtils;\n import com.termux.shared.termux.AndroidUtils;\n@@ -89,8 +90,12 @@ public static void processPluginExecutionCommandResult(final Context context, St\n                 Logger.logDebugExtended(logTag, ExecutionCommand.getExecutionOutputLogString(executionCommand, true, true, isExecutionCommandLoggingEnabled));\n \n                 // Flash and send notification for the error\n-                Logger.showToast(context, ResultData.getErrorsListMinimalString(resultData), true);\n-                sendPluginCommandErrorNotification(context, logTag, executionCommand, ResultData.getErrorsListMinimalString(resultData));\n+                sendPluginCommandErrorNotification(context, logTag, null,\n+                    ResultData.getErrorsListMinimalString(resultData),\n+                    ExecutionCommand.getExecutionCommandMarkdownString(executionCommand),\n+                    false, true, TermuxUtils.AppInfoMode.TERMUX_AND_CALLING_PACKAGE,\n+                    executionCommand.resultConfig.resultPendingIntent != null ? executionCommand.resultConfig.resultPendingIntent.getCreatorPackage(): null,\n+                    true);\n             }\n \n         }\n@@ -165,17 +170,13 @@ public static void processPluginExecutionCommandError(final Context context, Str\n             if (!forceNotification) return;\n         }\n \n-        TermuxAppSharedPreferences preferences = TermuxAppSharedPreferences.build(context);\n-        if (preferences == null) return;\n-\n-        // If user has disabled notifications for plugin commands, then just return\n-        if (!preferences.arePluginErrorNotificationsEnabled() && !forceNotification)\n-            return;\n-\n         // Flash and send notification for the error\n-        Logger.showToast(context, ResultData.getErrorsListMinimalString(resultData), true);\n-        sendPluginCommandErrorNotification(context, logTag, executionCommand, ResultData.getErrorsListMinimalString(resultData));\n-\n+        sendPluginCommandErrorNotification(context, logTag, null,\n+            ResultData.getErrorsListMinimalString(resultData),\n+            ExecutionCommand.getExecutionCommandMarkdownString(executionCommand),\n+            forceNotification, true, TermuxUtils.AppInfoMode.TERMUX_AND_CALLING_PACKAGE,\n+            executionCommand.resultConfig.resultPendingIntent != null ? executionCommand.resultConfig.resultPendingIntent.getCreatorPackage(): null,\n+            true);\n     }\n \n     /** Set variables which will be used by {@link ResultSender#sendCommandResultData(Context, String, String, ResultConfig, ResultData, boolean)}\n@@ -213,23 +214,60 @@ public static void setPluginResultDirectoryVariables(ExecutionCommand executionC\n      * and {@link TermuxConstants#TERMUX_PLUGIN_COMMAND_ERRORS_NOTIFICATION_CHANNEL_NAME}.\n      *\n      * @param context The {@link Context} for operations.\n-     * @param executionCommand The {@link ExecutionCommand} that failed.\n+     * @param title The title for the error report and notification.\n      * @param notificationTextString The text of the notification.\n+     * @param message The message for the error report.\n+     * @param forceNotification If set to {@code true}, then a notification will be shown\n+     *                          regardless of if pending intent is {@code null} or\n+     *                          {@link TermuxPreferenceConstants.TERMUX_APP#KEY_PLUGIN_ERROR_NOTIFICATIONS_ENABLED}\n+     *                          is {@code false}.\n+     * @param showToast If set to {@code true}, then a toast will be shown for {@code notificationTextString}.\n+     * @param appInfoMode The {@link TermuxUtils.AppInfoMode} to use to add app info to the message.\n+     *                    Set to {@code null} if app info should not be appended to the message.\n+     * @param callingPackageName The optional package name of the app for which the plugin command\n+     *                           was run.\n+     * @param addDeviceInfo If set to {@code true}, then device info should be appended to the message.\n      */\n-    public static void sendPluginCommandErrorNotification(Context context, String logTag, ExecutionCommand executionCommand, String notificationTextString) {\n+    public static void sendPluginCommandErrorNotification(Context context, String logTag,\n+                                                          CharSequence title,\n+                                                          String notificationTextString,\n+                                                          String message, boolean forceNotification,\n+                                                          boolean showToast,\n+                                                          TermuxUtils.AppInfoMode appInfoMode,\n+                                                          String callingPackageName,\n+                                                          boolean addDeviceInfo) {\n+        if (context == null) return;\n+\n+        TermuxAppSharedPreferences preferences = TermuxAppSharedPreferences.build(context);\n+        if (preferences == null) return;\n+\n+        // If user has disabled notifications for plugin commands, then just return\n+        if (!preferences.arePluginErrorNotificationsEnabled() && !forceNotification)\n+            return;\n+\n+        logTag = DataUtils.getDefaultIfNull(logTag, LOG_TAG);\n+\n+        if (showToast)\n+            Logger.showToast(context, notificationTextString, true);\n+\n         // Send a notification to show the error which when clicked will open the ReportActivity\n         // to show the details of the error\n-        String title = TermuxConstants.TERMUX_APP_NAME + \" Plugin Execution Command Error\";\n+        if (title == null || title.toString().isEmpty())\n+            title = TermuxConstants.TERMUX_APP_NAME + \" Plugin Execution Command Error\";\n+\n+        Logger.logDebug(logTag, \"Sending \\\"\" + title + \"\\\" notification.\");\n+\n+        StringBuilder reportString = new StringBuilder(message);\n \n-        StringBuilder reportString = new StringBuilder();\n+        if (appInfoMode != null)\n+            reportString.append(\"\\n\\n\").append(TermuxUtils.getAppInfoMarkdownString(context, appInfoMode, callingPackageName));\n \n-        reportString.append(ExecutionCommand.getExecutionCommandMarkdownString(executionCommand));\n-        reportString.append(\"\\n\\n\").append(TermuxUtils.getAppInfoMarkdownString(context, true));\n-        reportString.append(\"\\n\\n\").append(AndroidUtils.getDeviceInfoMarkdownString(context));\n+        if (addDeviceInfo)\n+            reportString.append(\"\\n\\n\").append(AndroidUtils.getDeviceInfoMarkdownString(context));\n \n         String userActionName = UserAction.PLUGIN_EXECUTION_COMMAND.getName();\n         ReportActivity.NewInstanceResult result = ReportActivity.newInstance(context,\n-            new ReportInfo(userActionName, logTag, title, null,\n+            new ReportInfo(userActionName, logTag, title.toString(), null,\n                 reportString.toString(), null,true,\n                 userActionName,\n                 Environment.getExternalStorageDirectory() + \"/\" +\n@@ -254,7 +292,8 @@ public static void sendPluginCommandErrorNotification(Context context, String lo\n \n         // Build the notification\n         Notification.Builder builder = getPluginCommandErrorsNotificationBuilder(context, title,\n-            notificationTextCharSequence, notificationTextCharSequence, contentIntent, deleteIntent, NotificationUtils.NOTIFICATION_MODE_VIBRATE);\n+            notificationTextCharSequence, notificationTextCharSequence, contentIntent, deleteIntent,\n+            NotificationUtils.NOTIFICATION_MODE_VIBRATE);\n         if (builder == null) return;\n \n         // Send the notification",
    "output": "Add info of Termux API calling app in plugin command error reports and refactor notification functions"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n@@ -724,7 +724,12 @@ public void run() {\n                 reportString.append(\"\\n\").append(MarkdownUtils.getMarkdownCodeForString(transcriptText, true));\n                 reportString.append(\"\\n##\\n\");\n \n-                reportString.append(\"\\n\\n\").append(TermuxUtils.getAppInfoMarkdownString(mActivity, true));\n+                if (addTermuxDebugInfo) {\n+                    reportString.append(\"\\n\\n\").append(TermuxUtils.getAppInfoMarkdownString(mActivity, TermuxUtils.AppInfoMode.TERMUX_AND_PLUGIN_PACKAGES));\n+                } else {\n+                    reportString.append(\"\\n\\n\").append(TermuxUtils.getAppInfoMarkdownString(mActivity, TermuxUtils.AppInfoMode.TERMUX_PACKAGE));\n+                }\n+\n                 reportString.append(\"\\n\\n\").append(AndroidUtils.getDeviceInfoMarkdownString(mActivity));\n \n                 String termuxAptInfo = TermuxUtils.geAPTInfoMarkdownString(mActivity);",
    "output": "Add info of installed plugin apps when report issue report is generated with debug mode enabled"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/activities/SettingsActivity.java b/app/src/main/java/com/termux/app/activities/SettingsActivity.java\n--- a/app/src/main/java/com/termux/app/activities/SettingsActivity.java\n+++ b/app/src/main/java/com/termux/app/activities/SettingsActivity.java\n@@ -112,12 +112,7 @@ public void run() {\n                             String title = \"About\";\n \n                             StringBuilder aboutString = new StringBuilder();\n-                            aboutString.append(TermuxUtils.getAppInfoMarkdownString(context, false));\n-\n-                            String termuxPluginAppsInfo =  TermuxUtils.getTermuxPluginAppsInfoMarkdownString(context);\n-                            if (termuxPluginAppsInfo != null)\n-                                aboutString.append(\"\\n\\n\").append(termuxPluginAppsInfo);\n-\n+                            aboutString.append(TermuxUtils.getAppInfoMarkdownString(context, TermuxUtils.AppInfoMode.TERMUX_AND_PLUGIN_PACKAGES));\n                             aboutString.append(\"\\n\\n\").append(AndroidUtils.getDeviceInfoMarkdownString(context));\n                             aboutString.append(\"\\n\\n\").append(TermuxUtils.getImportantLinksMarkdownString(context));\n \n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n@@ -8,8 +8,10 @@\n import android.content.pm.ResolveInfo;\n \n import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n \n import com.termux.shared.R;\n+import com.termux.shared.data.DataUtils;\n import com.termux.shared.file.FileUtils;\n import com.termux.shared.file.TermuxFileUtils;\n import com.termux.shared.logger.Logger;\n@@ -30,6 +32,18 @@\n \n public class TermuxUtils {\n \n+    /** The modes used by {@link #getAppInfoMarkdownString(Context, AppInfoMode, String)}. */\n+    public enum AppInfoMode {\n+        /** Get info for Termux app only. */\n+        TERMUX_PACKAGE,\n+        /** Get info for Termux app and its plugins listed in {@link TermuxConstants#TERMUX_PLUGIN_APP_PACKAGE_NAMES_LIST}. */\n+        TERMUX_AND_PLUGIN_PACKAGES,\n+        /* Get info for all the Termux app plugins listed in {@link TermuxConstants#TERMUX_PLUGIN_APP_PACKAGE_NAMES_LIST}. */\n+        TERMUX_PLUGIN_PACKAGES,\n+        /* Get info for Termux app and the calling package that called a Termux API. */\n+        TERMUX_AND_CALLING_PACKAGE,\n+    }\n+\n     private static final String LOG_TAG = \"TermuxUtils\";\n \n     /**\n@@ -157,7 +171,7 @@ public static String isTermuxAPIAppInstalled(@NonNull final Context context) {\n      *\n      * @param currentPackageContext The context of current package.\n      * @return Returns {@code errmsg} if failed to get termux package {@link Context} or\n-     *         {@link TermuxConstants#TERMUX_PREFIX_DIR_PATH} is accessible, otherwise {@code null}.\n+     * {@link TermuxConstants#TERMUX_PREFIX_DIR_PATH} is accessible, otherwise {@code null}.\n      */\n     public static String isTermuxAppAccessible(@NonNull final Context currentPackageContext) {\n         String errmsg = isTermuxAppInstalled(currentPackageContext);\n@@ -206,6 +220,82 @@ public static void sendTermuxOpenedBroadcast(@NonNull Context context) {\n         }\n     }\n \n+\n+\n+    /**\n+     * Wrapper for {@link #getAppInfoMarkdownString(Context, AppInfoMode, String)}.\n+     *\n+     * @param currentPackageContext The context of current package.\n+     * @param appInfoMode The {@link AppInfoMode} to decide the app info required.\n+     * @return Returns the markdown {@link String}.\n+     */\n+    public static String getAppInfoMarkdownString(final Context currentPackageContext, final AppInfoMode appInfoMode) {\n+        return getAppInfoMarkdownString(currentPackageContext, appInfoMode, null);\n+    }\n+\n+    /**\n+     * Get a markdown {@link String} for the apps info of termux app, its installed plugin apps or\n+     * external apps that called a Termux API depending on {@link AppInfoMode} passed.\n+     *\n+     * Also check {@link PackageUtils#isAppInstalled(Context, String, String) if targetting targeting\n+     * sdk `30` (android `11`) since {@link PackageManager.NameNotFoundException} may be thrown while\n+     * getting info of {@code callingPackageName} app.\n+     *\n+     * @param currentPackageContext The context of current package.\n+     * @param appInfoMode The {@link AppInfoMode} to decide the app info required.\n+     * @param callingPackageName The optional package name for a plugin or external app.\n+     * @return Returns the markdown {@link String}.\n+     */\n+    public static String getAppInfoMarkdownString(final Context currentPackageContext, final AppInfoMode appInfoMode, @Nullable String callingPackageName) {\n+        if (appInfoMode == null) return null;\n+\n+        StringBuilder appInfo = new StringBuilder();\n+        switch (appInfoMode) {\n+            case TERMUX_PACKAGE:\n+                return getAppInfoMarkdownString(currentPackageContext, false);\n+\n+            case TERMUX_AND_PLUGIN_PACKAGES:\n+                appInfo.append(TermuxUtils.getAppInfoMarkdownString(currentPackageContext, false));\n+\n+                String termuxPluginAppsInfo =  TermuxUtils.getTermuxPluginAppsInfoMarkdownString(currentPackageContext);\n+                if (termuxPluginAppsInfo != null)\n+                    appInfo.append(\"\\n\\n\").append(termuxPluginAppsInfo);\n+                return appInfo.toString();\n+\n+            case TERMUX_PLUGIN_PACKAGES:\n+                return TermuxUtils.getTermuxPluginAppsInfoMarkdownString(currentPackageContext);\n+\n+            case TERMUX_AND_CALLING_PACKAGE:\n+                appInfo.append(TermuxUtils.getAppInfoMarkdownString(currentPackageContext, false));\n+                if (!DataUtils.isNullOrEmpty(callingPackageName)) {\n+                    String callingPackageAppInfo;\n+                    if (TermuxConstants.TERMUX_PLUGIN_APP_PACKAGE_NAMES_LIST.contains(callingPackageName)) {\n+                        Context termuxPluginAppContext = PackageUtils.getContextForPackage(currentPackageContext, callingPackageName);\n+                        if (termuxPluginAppContext != null)\n+                            callingPackageAppInfo = getAppInfoMarkdownString(termuxPluginAppContext, false);\n+                        else\n+                            callingPackageAppInfo = AndroidUtils.getAppInfoMarkdownString(currentPackageContext, callingPackageName);\n+                    } else {\n+                        callingPackageAppInfo = AndroidUtils.getAppInfoMarkdownString(currentPackageContext, callingPackageName);\n+                    }\n+\n+                    if (callingPackageAppInfo != null) {\n+                        ApplicationInfo applicationInfo = PackageUtils.getApplicationInfoForPackage(currentPackageContext, callingPackageName);\n+                        if (applicationInfo != null) {\n+                            appInfo.append(\"\\n\\n## \").append(PackageUtils.getAppNameForPackage(currentPackageContext, applicationInfo)).append(\" App Info\\n\");\n+                            appInfo.append(callingPackageAppInfo);\n+                            appInfo.append(\"\\n##\\n\");\n+                        }\n+                    }\n+                }\n+                return appInfo.toString();\n+\n+            default:\n+                return null;\n+        }\n+\n+    }\n+\n     /**\n      * Get a markdown {@link String} for the apps info of all/any termux plugin apps installed.\n      *\n@@ -274,13 +364,14 @@ public static String getAppInfoMarkdownString(final Context currentPackageContex\n         else\n             markdownString.append(\"## \").append(currentAppName).append(\" App Info\\n\");\n         markdownString.append(getAppInfoMarkdownStringInner(currentPackageContext));\n+        markdownString.append(\"\\n##\\n\");\n \n         if (returnTermuxPackageInfoToo && termuxPackageContext != null && !isTermuxPackage) {\n             markdownString.append(\"\\n\\n## \").append(termuxAppName).append(\" App Info\\n\");\n             markdownString.append(getAppInfoMarkdownStringInner(termuxPackageContext));\n+            markdownString.append(\"\\n##\\n\");\n         }\n \n-        markdownString.append(\"\\n##\\n\");\n \n         return markdownString.toString();\n     }",
    "output": "Add generic function TermuxUtils to get app info for termux app, its installed plugin apps and external apps"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/markdown/MarkdownUtils.java b/termux-shared/src/main/java/com/termux/shared/markdown/MarkdownUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/markdown/MarkdownUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/markdown/MarkdownUtils.java\n@@ -191,9 +191,8 @@ public void configureSpansFactory(@NonNull MarkwonSpansFactory.Builder builder)\n     }\n \n     public static Spanned getSpannedMarkdownText(Context context, String string) {\n-\n+        if (context == null || string == null) return null;\n         final Markwon markwon = getSpannedMarkwonBuilder(context);\n-\n         return markwon.toMarkdown(string);\n     }\n ",
    "output": "Fix NullPointerException when getting spanned markdown like for notification"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxSharedProperties.java b/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxSharedProperties.java\n--- a/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxSharedProperties.java\n+++ b/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxSharedProperties.java\n@@ -512,7 +512,7 @@ public static String getVolumeKeysBehaviourInternalPropertyValueFromValue(String\n \n \n     public boolean areHardwareKeyboardShortcutsDisabled() {\n-        return (boolean) getInternalPropertyValue(TermuxPropertyConstants.KEY_DISABLE_TERMINAL_SESSION_CHANGE_TOAST, true);\n+        return (boolean) getInternalPropertyValue(TermuxPropertyConstants.KEY_DISABLE_HARDWARE_KEYBOARD_SHORTCUTS, true);\n     }\n \n     public boolean areTerminalSessionChangeToastsDisabled() {",
    "output": "Fix copy&paste error in areHardwareKeyboardShortcutsDisabled"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/file/TermuxFileUtils.java b/termux-shared/src/main/java/com/termux/shared/file/TermuxFileUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/file/TermuxFileUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/file/TermuxFileUtils.java\n@@ -17,12 +17,31 @@\n import com.termux.shared.termux.TermuxUtils;\n \n import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.regex.Pattern;\n \n public class TermuxFileUtils {\n \n     private static final String LOG_TAG = \"TermuxFileUtils\";\n \n+    /**\n+     * Replace \"$PREFIX/\" or \"~/\" prefix with termux absolute paths.\n+     *\n+     * @param paths The {@code paths} to expand.\n+     * @return Returns the {@code expand paths}.\n+     */\n+    public static List<String> getExpandedTermuxPaths(List<String> paths) {\n+        if (paths == null) return null;\n+        List<String> expandedPaths = new ArrayList<>();\n+\n+        for (int i = 0; i < paths.size(); i++) {\n+            expandedPaths.add(getExpandedTermuxPath(paths.get(i)));\n+        }\n+\n+        return expandedPaths;\n+    }\n+\n     /**\n      * Replace \"$PREFIX/\" or \"~/\" prefix with termux absolute paths.\n      *\n@@ -40,6 +59,23 @@ public static String getExpandedTermuxPath(String path) {\n         return path;\n     }\n \n+    /**\n+     * Replace termux absolute paths with \"$PREFIX/\" or \"~/\" prefix.\n+     *\n+     * @param paths The {@code paths} to unexpand.\n+     * @return Returns the {@code unexpand paths}.\n+     */\n+    public static List<String> getUnExpandedTermuxPaths(List<String> paths) {\n+        if (paths == null) return null;\n+        List<String> unExpandedPaths = new ArrayList<>();\n+\n+        for (int i = 0; i < paths.size(); i++) {\n+            unExpandedPaths.add(getUnExpandedTermuxPath(paths.get(i)));\n+        }\n+\n+        return unExpandedPaths;\n+    }\n+\n     /**\n      * Replace termux absolute paths with \"$PREFIX/\" or \"~/\" prefix.\n      *",
    "output": "Add TermuxFileUtils.getExpandedTermuxPaths() and TermuxFileUtils.getUnExpandedTermuxPaths()"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java b/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n@@ -34,6 +34,7 @@\n import java.nio.file.LinkOption;\n import java.nio.file.StandardCopyOption;\n import java.util.Calendar;\n+import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n import java.util.regex.Pattern;\n@@ -144,20 +145,42 @@ public static String sanitizeFileName(String fileName, boolean sanitizeWhitespac\n      * @return Returns {@code true} if path in {@code dirPath}, otherwise returns {@code false}.\n      */\n     public static boolean isPathInDirPath(String path, final String dirPath, final boolean ensureUnder) {\n-        if (path == null || dirPath == null) return false;\n+       return isPathInDirPaths(path, Collections.singletonList(dirPath), ensureUnder);\n+    }\n+\n+    /**\n+     * Determines whether path is in one of the {@code dirPaths}. The {@code dirPaths} are not\n+     * canonicalized and only normalized.\n+     *\n+     * @param path The {@code path} to check.\n+     * @param dirPaths The {@code directory paths} to check in.\n+     * @param ensureUnder If set to {@code true}, then it will be ensured that {@code path} is\n+     *                    under the directories and does not equal it.\n+     * @return Returns {@code true} if path in {@code dirPaths}, otherwise returns {@code false}.\n+     */\n+    public static boolean isPathInDirPaths(String path, final List<String> dirPaths, final boolean ensureUnder) {\n+        if (path == null || path.isEmpty() || dirPaths == null || dirPaths.size() < 1) return false;\n \n         try {\n             path = new File(path).getCanonicalPath();\n         } catch(Exception e) {\n             return false;\n         }\n \n-        String normalizedDirPath = normalizePath(dirPath);\n+        boolean isPathInDirPaths;\n \n-        if (ensureUnder)\n-            return !path.equals(normalizedDirPath) && path.startsWith(normalizedDirPath + \"/\");\n-        else\n-            return path.startsWith(normalizedDirPath + \"/\");\n+        for (String dirPath : dirPaths) {\n+            String normalizedDirPath = normalizePath(dirPath);\n+\n+            if (ensureUnder)\n+                isPathInDirPaths = !path.equals(normalizedDirPath) && path.startsWith(normalizedDirPath + \"/\");\n+            else\n+                isPathInDirPaths = path.startsWith(normalizedDirPath + \"/\");\n+\n+            if (isPathInDirPaths) return true;\n+        }\n+\n+        return false;\n     }\n \n ",
    "output": "Add FileUtils.isPathInDirPaths()"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n@@ -12,7 +12,7 @@\n import java.util.List;\n \n /*\n- * Version: v0.31.0\n+ * Version: v0.32.0\n  *\n  * Changelog\n  *\n@@ -207,6 +207,10 @@\n  * - 0.31.0 (2021-09-09)\n  *      - Added following to `TERMUX_APP.TERMUX_SERVICE`:\n  *          `MIN_VALUE_EXTRA_SESSION_ACTION` and `MAX_VALUE_EXTRA_SESSION_ACTION`.\n+ *\n+ * - 0.32.0 (2021-09-23)\n+ *      - Added `TERMUX_API.TERMUX_API_ACTIVITY_NAME`, `TERMUX_TASKER.TERMUX_TASKER_ACTIVITY_NAME`\n+ *          and `TERMUX_WIDGET.TERMUX_WIDGET_ACTIVITY_NAME`.\n  */\n \n /**\n@@ -1123,6 +1127,20 @@ public static final class RESULT_SENDER {\n \n \n \n+    /**\n+     * Termux:API app constants.\n+     */\n+    public static final class TERMUX_API {\n+\n+        /** Termux:API app core activity name. */\n+        public static final String TERMUX_API_ACTIVITY_NAME = TERMUX_API_PACKAGE_NAME + \".activities.TermuxAPIActivity\"; // Default: \"com.termux.tasker.activities.TermuxAPIActivity\"\n+\n+    }\n+\n+\n+\n+\n+\n     /**\n      * Termux:Float app constants.\n      */\n@@ -1167,11 +1185,29 @@ public static final class TERMUX_STYLING {\n \n \n \n+    /**\n+     * Termux:Tasker app constants.\n+     */\n+    public static final class TERMUX_TASKER {\n+\n+        /** Termux:Tasker app core activity name. */\n+        public static final String TERMUX_TASKER_ACTIVITY_NAME = TERMUX_TASKER_PACKAGE_NAME + \".activities.TermuxTaskerActivity\"; // Default: \"com.termux.tasker.activities.TermuxTaskerActivity\"\n+\n+    }\n+\n+\n+\n+\n+\n     /**\n      * Termux:Widget app constants.\n      */\n     public static final class TERMUX_WIDGET {\n \n+        /** Termux:Widget app core activity name. */\n+        public static final String TERMUX_WIDGET_ACTIVITY_NAME = TERMUX_WIDGET_PACKAGE_NAME + \".activities.TermuxWidgetActivity\"; // Default: \"com.termux.widget.activities.TermuxWidgetActivity\"\n+\n+\n         /**  Intent {@code String} extra for the token of the Termux:Widget app shortcuts. */\n         public static final String EXTRA_TOKEN_NAME = TERMUX_PACKAGE_NAME + \".shortcut.token\"; // Default: \"com.termux.shortcut.token\"\n ",
    "output": "Add constants for launcher activities of termux plugins"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java b/termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java\n@@ -4,6 +4,7 @@\n import android.app.admin.DevicePolicyManager;\n import android.content.ComponentName;\n import android.content.Context;\n+import android.content.Intent;\n import android.content.pm.ApplicationInfo;\n import android.content.pm.PackageInfo;\n import android.content.pm.PackageManager;\n@@ -249,6 +250,8 @@ public static String getProfileOwnerPackageNameForUser(@NonNull Context context)\n         return null;\n     }\n \n+\n+\n     /**\n      * Get the process id of the main app process of a package. This will work for sharedUserId. Note\n      * that some apps have multiple processes for the app like with `android:process=\":background\"`\n@@ -275,6 +278,8 @@ public static String getPackagePID(final Context context, String packageName) {\n         return null;\n     }\n \n+\n+\n     /**\n      * Check if app is installed and enabled. This can be used by external apps that don't\n      * share `sharedUserId` with the an app.\n@@ -318,4 +323,97 @@ public static String isAppInstalled(@NonNull final Context context, String appNa\n         return errmsg;\n     }\n \n+\n+\n+    /**\n+     * Enable or disable a {@link ComponentName} with a call to\n+     * {@link PackageManager#setComponentEnabledSetting(ComponentName, int, int)}.\n+     *\n+     * @param context The {@link Context} for operations.\n+     * @param packageName The package name of the component.\n+     * @param className The {@link Class} name of the component.\n+     * @param state If component should be enabled or disabled.\n+     * @param toastString If this is not {@code null} or empty, then a toast before setting state.\n+     * @param showErrorMessage If an error message toast should be shown.\n+     * @return Returns the errmsg if failed to set state, otherwise {@code null}.\n+     */\n+    @Nullable\n+    public static String setComponentState(@NonNull final Context context, @NonNull String packageName,\n+                                         @NonNull String className, boolean state, String toastString,\n+                                         boolean showErrorMessage) {\n+        try {\n+            PackageManager packageManager = context.getPackageManager();\n+            if (packageManager != null) {\n+                ComponentName componentName = new ComponentName(packageName, className);\n+                if (toastString != null) Logger.showToast(context, toastString, true);\n+                packageManager.setComponentEnabledSetting(componentName,\n+                    state ? PackageManager.COMPONENT_ENABLED_STATE_ENABLED : PackageManager.COMPONENT_ENABLED_STATE_DISABLED,\n+                    PackageManager.DONT_KILL_APP);\n+            }\n+            return null;\n+        } catch (final Exception e) {\n+            String errmsg = context.getString(\n+                state ? R.string.error_enable_component_failed : R.string.error_disable_component_failed,\n+                packageName, className) + \": \" + e.getMessage();\n+            if (showErrorMessage)\n+                Logger.showToast(context, errmsg, true);\n+            return errmsg;\n+        }\n+    }\n+\n+    /**\n+     * Check if state of a {@link ComponentName} is {@link PackageManager#COMPONENT_ENABLED_STATE_DISABLED}\n+     * with a call to {@link PackageManager#getComponentEnabledSetting(ComponentName)}.\n+     *\n+     * @param context The {@link Context} for operations.\n+     * @param packageName The package name of the component.\n+     * @param className The {@link Class} name of the component.\n+     * @param logErrorMessage If an error message should be logged.\n+     * @return Returns {@code true} if disabled, {@code false} if not and {@code null} if failed to\n+     * get the state.\n+     */\n+    public static Boolean isComponentDisabled(@NonNull final Context context, @NonNull String packageName,\n+                                           @NonNull String className, boolean logErrorMessage) {\n+        try {\n+            PackageManager packageManager = context.getPackageManager();\n+            if (packageManager != null) {\n+                ComponentName componentName = new ComponentName(packageName, className);\n+                // Will throw IllegalArgumentException: Unknown component: ComponentInfo{} if app\n+                // for context is not installed or component does not exist.\n+                return packageManager.getComponentEnabledSetting(componentName) == PackageManager.COMPONENT_ENABLED_STATE_DISABLED;\n+            }\n+        } catch (final Exception e) {\n+            if (logErrorMessage)\n+                Logger.logStackTraceWithMessage(LOG_TAG, context.getString(R.string.error_get_component_state_failed, packageName, className), e);\n+        }\n+\n+        return null;\n+    }\n+\n+    /**\n+     * Check if an {@link android.app.Activity} {@link ComponentName} can be called by calling\n+     * {@link PackageManager#queryIntentActivities(Intent, int)}.\n+     *\n+     * @param context The {@link Context} for operations.\n+     * @param packageName The package name of the component.\n+     * @param className The {@link Class} name of the component.\n+     * @param flags The flags to filter results.\n+     * @return Returns {@code true} if it exists, otherwise {@code false}.\n+     */\n+    public static boolean doesActivityComponentExist(@NonNull final Context context, @NonNull String packageName,\n+                                              @NonNull String className, int flags) {\n+        try {\n+            PackageManager packageManager = context.getPackageManager();\n+            if (packageManager != null) {\n+                Intent intent = new Intent();\n+                intent.setClassName(packageName, className);\n+                return packageManager.queryIntentActivities(intent, flags).size() > 0;\n+            }\n+        } catch (final Exception e) {\n+            // ignore\n+        }\n+\n+        return false;\n+    }\n+\n }",
    "output": "Add functions to PackageUtils to check/modify app Component states"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/data/DataUtils.java b/termux-shared/src/main/java/com/termux/shared/data/DataUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/data/DataUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/data/DataUtils.java\n@@ -10,6 +10,8 @@\n \n public class DataUtils {\n \n+    /** Max safe limit of data size to prevent TransactionTooLargeException when transferring data\n+     * inside or to other apps via transactions. */\n     public static final int TRANSACTION_SIZE_LIMIT_IN_BYTES = 100 * 1024; // 100KB\n \n     private static final char[] HEX_ARRAY = \"0123456789ABCDEF\".toCharArray();\n@@ -171,6 +173,17 @@ public static <T> T getDefaultIfNull(@Nullable T object, @Nullable T def) {\n         return (object == null) ? def : object;\n     }\n \n+    /**\n+     * Get the {@link String} itself if it is not {@code null} or empty, otherwise default.\n+     *\n+     * @param value The {@link String} to check.\n+     * @param def The default {@link String}.\n+     * @return Returns {@code value} if it is not {@code null} or empty, otherwise returns {@code def}.\n+     */\n+    public static String getDefaultIfUnset(@Nullable String value, String def) {\n+        return (value == null || value.isEmpty()) ? def : value;\n+    }\n+\n     /** Check if a string is null or empty. */\n     public static boolean isNullOrEmpty(String string) {\n         return string == null || string.isEmpty();",
    "output": "Add getDefaultIfUnset() to DataUtils and update comment"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n@@ -12,7 +12,7 @@\n import java.util.List;\n \n /*\n- * Version: v0.30.0\n+ * Version: v0.31.0\n  *\n  * Changelog\n  *\n@@ -203,6 +203,10 @@\n  *      - Changed `APK_RELEASE_GITHUB_DEBUG_BUILD`to `APK_RELEASE_GITHUB` and\n  *          `APK_RELEASE_GITHUB_DEBUG_BUILD_SIGNING_CERTIFICATE_SHA256_DIGEST` to\n  *          `APK_RELEASE_GITHUB_SIGNING_CERTIFICATE_SHA256_DIGEST`.\n+ *\n+ * - 0.31.0 (2021-09-09)\n+ *      - Added following to `TERMUX_APP.TERMUX_SERVICE`:\n+ *          `MIN_VALUE_EXTRA_SESSION_ACTION` and `MAX_VALUE_EXTRA_SESSION_ACTION`.\n  */\n \n /**\n@@ -948,6 +952,11 @@ public static final class TERMUX_SERVICE {\n              */\n             public static final int VALUE_EXTRA_SESSION_ACTION_KEEP_CURRENT_SESSION_AND_DONT_OPEN_ACTIVITY = 3;\n \n+            /** The minimum allowed value for {@link #EXTRA_SESSION_ACTION}. */\n+            public static final int MIN_VALUE_EXTRA_SESSION_ACTION = VALUE_EXTRA_SESSION_ACTION_SWITCH_TO_NEW_SESSION_AND_OPEN_ACTIVITY;\n+\n+            /** The maximum allowed value for {@link #EXTRA_SESSION_ACTION}. */\n+            public static final int MAX_VALUE_EXTRA_SESSION_ACTION = VALUE_EXTRA_SESSION_ACTION_KEEP_CURRENT_SESSION_AND_DONT_OPEN_ACTIVITY;\n \n \n             /** Intent {@code Bundle} extra to store result of execute command that is sent back for the",
    "output": "Add MIN_VALUE_EXTRA_SESSION_ACTION and MAX_VALUE_EXTRA_SESSION_ACTION to TermuxConstants"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/shell/TermuxShellUtils.java b/termux-shared/src/main/java/com/termux/shared/shell/TermuxShellUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/shell/TermuxShellUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/shell/TermuxShellUtils.java\n@@ -25,6 +25,8 @@ public class TermuxShellUtils {\n     public static String TERMUX_APP_PID;\n     public static String TERMUX_APK_RELEASE;\n \n+    public static String TERMUX_API_VERSION_NAME;\n+\n     public static String getDefaultWorkingDirectoryPath() {\n         return TermuxConstants.TERMUX_HOME_DIR_PATH;\n     }\n@@ -52,6 +54,9 @@ public static String[] buildEnvironment(Context currentPackageContext, boolean i\n         if (TERMUX_APK_RELEASE != null)\n             environment.add(\"TERMUX_APK_RELEASE=\" + TERMUX_APK_RELEASE);\n \n+        if (TERMUX_API_VERSION_NAME != null)\n+            environment.add(\"TERMUX_API_VERSION=\" + TERMUX_API_VERSION_NAME);\n+\n         environment.add(\"TERM=xterm-256color\");\n         environment.add(\"COLORTERM=truecolor\");\n         environment.add(\"HOME=\" + TermuxConstants.TERMUX_HOME_DIR_PATH);\n@@ -180,6 +185,16 @@ public static void loadTermuxEnvVariables(Context currentPackageContext) {\n             }\n         }\n \n+\n+        TERMUX_API_VERSION_NAME = null;\n+\n+        // Check if Termux:API app is installed and not disabled\n+        if (TermuxUtils.isTermuxAPIAppInstalled(currentPackageContext) == null) {\n+            // This function may be called by a different package like a plugin, so we get version for Termux:API package via its context\n+            Context termuxAPIPackageContext = TermuxUtils.getTermuxAPIPackageContext(currentPackageContext);\n+            if (termuxAPIPackageContext != null)\n+                TERMUX_API_VERSION_NAME = PackageUtils.getVersionNameForPackage(termuxAPIPackageContext);\n+        }\n     }\n \n }\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n@@ -132,6 +132,18 @@ public static String isTermuxAppInstalled(@NonNull final Context context) {\n         return PackageUtils.isAppInstalled(context, TermuxConstants.TERMUX_APP_NAME, TermuxConstants.TERMUX_PACKAGE_NAME);\n     }\n \n+    /**\n+     * Check if Termux:API app is installed and enabled. This can be used by external apps that don't\n+     * share `sharedUserId` with the Termux:API app.\n+     *\n+     * @param context The context for operations.\n+     * @return Returns {@code errmsg} if {@link TermuxConstants#TERMUX_API_PACKAGE_NAME} is not installed\n+     * or disabled, otherwise {@code null}.\n+     */\n+    public static String isTermuxAPIAppInstalled(@NonNull final Context context) {\n+        return PackageUtils.isAppInstalled(context, TermuxConstants.TERMUX_API_APP_NAME, TermuxConstants.TERMUX_API_PACKAGE_NAME);\n+    }\n+\n     /**\n      * Check if Termux app is installed and accessible. This can only be used by apps that share\n      * `sharedUserId` with the Termux app.",
    "output": "Add TERMUX_API_VERSION to termux shell environment"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java b/termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java\n@@ -1,5 +1,6 @@\n package com.termux.shared.packages;\n \n+import android.app.ActivityManager;\n import android.app.admin.DevicePolicyManager;\n import android.content.ComponentName;\n import android.content.Context;\n@@ -248,4 +249,30 @@ public static String getProfileOwnerPackageNameForUser(@NonNull Context context)\n         return null;\n     }\n \n+    /**\n+     * Get the process id of the main app process of a package. This will work for sharedUserId. Note\n+     * that some apps have multiple processes for the app like with `android:process=\":background\"`\n+     * attribute in AndroidManifest.xml.\n+     *\n+     * @param context The {@link Context} for operations.\n+     * @param packageName The package name of the process.\n+     * @return Returns the process if found and running, otherwise {@code null}.\n+     */\n+    @Nullable\n+    public static String getPackagePID(final Context context, String packageName) {\n+        ActivityManager activityManager = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);\n+        if (activityManager != null) {\n+            List<ActivityManager.RunningAppProcessInfo> processInfos = activityManager.getRunningAppProcesses();\n+            if (processInfos != null) {\n+                ActivityManager.RunningAppProcessInfo processInfo;\n+                for (int i = 0; i < processInfos.size(); i++) {\n+                    processInfo = processInfos.get(i);\n+                    if (processInfo.processName.equals(packageName))\n+                        return String.valueOf(processInfo.pid);\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n }\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/shell/TermuxShellUtils.java b/termux-shared/src/main/java/com/termux/shared/shell/TermuxShellUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/shell/TermuxShellUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/shell/TermuxShellUtils.java\n@@ -20,6 +20,11 @@\n \n public class TermuxShellUtils {\n \n+    public static String TERMUX_VERSION_NAME;\n+    public static String TERMUX_IS_DEBUG_BUILD;\n+    public static String TERMUX_APK_RELEASE;\n+    public static String TERMUX_APP_PID;\n+\n     public static String getDefaultWorkingDirectoryPath() {\n         return TermuxConstants.TERMUX_HOME_DIR_PATH;\n     }\n@@ -36,13 +41,16 @@ public static String[] buildEnvironment(Context currentPackageContext, boolean i\n \n         List<String> environment = new ArrayList<>();\n \n-        // This function may be called by a different package like a plugin, so we get version for Termux package via its context\n-        Context termuxPackageContext = TermuxUtils.getTermuxPackageContext(currentPackageContext);\n-        if (termuxPackageContext != null) {\n-            String termuxVersionName = PackageUtils.getVersionNameForPackage(termuxPackageContext);\n-            if (termuxVersionName != null)\n-                environment.add(\"TERMUX_VERSION=\" + termuxVersionName);\n-        }\n+        loadTermuxEnvVariables(currentPackageContext);\n+\n+        if (TERMUX_VERSION_NAME != null)\n+            environment.add(\"TERMUX_VERSION=\" + TERMUX_VERSION_NAME);\n+        if (TERMUX_IS_DEBUG_BUILD != null)\n+            environment.add(\"TERMUX_IS_DEBUG_BUILD=\" + TERMUX_IS_DEBUG_BUILD);\n+        if (TERMUX_APK_RELEASE != null)\n+            environment.add(\"TERMUX_APK_RELEASE=\" + TERMUX_APK_RELEASE);\n+        if (TERMUX_APP_PID != null)\n+            environment.add(\"TERMUX_APP_PID=\" + TERMUX_APP_PID);\n \n         environment.add(\"TERM=xterm-256color\");\n         environment.add(\"COLORTERM=truecolor\");\n@@ -147,4 +155,21 @@ public static void clearTermuxTMPDIR(boolean onlyIfExists) {\n         }\n     }\n \n+    public static void loadTermuxEnvVariables(Context currentPackageContext) {\n+        TERMUX_VERSION_NAME = TERMUX_IS_DEBUG_BUILD = TERMUX_APK_RELEASE = TERMUX_APP_PID = null;\n+\n+        // This function may be called by a different package like a plugin, so we get version for Termux package via its context\n+        Context termuxPackageContext = TermuxUtils.getTermuxPackageContext(currentPackageContext);\n+        if (termuxPackageContext != null) {\n+            TERMUX_VERSION_NAME = PackageUtils.getVersionNameForPackage(termuxPackageContext);\n+            TERMUX_IS_DEBUG_BUILD = PackageUtils.isAppForPackageADebugBuild(termuxPackageContext) ? \"1\" : \"0\";\n+\n+            String signingCertificateSHA256Digest = PackageUtils.getSigningCertificateSHA256DigestForPackage(termuxPackageContext);\n+            if (signingCertificateSHA256Digest != null)\n+                TERMUX_APK_RELEASE = TermuxUtils.getAPKRelease(signingCertificateSHA256Digest).replaceAll(\"[^a-zA-Z]\", \"_\").toUpperCase();\n+\n+            TERMUX_APP_PID = TermuxUtils.getTermuxAppPID(currentPackageContext);\n+        }\n+    }\n+\n }\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n@@ -533,4 +533,16 @@ public static String getAPKRelease(String signingCertificateSHA256Digest) {\n         }\n     }\n \n+\n+    /**\n+     * Get a process id of the main app process of the {@link TermuxConstants#TERMUX_PACKAGE_NAME}\n+     * package.\n+     *\n+     * @param context The context for operations.\n+     * @return Returns the process if found and running, otherwise {@code null}.\n+     */\n+    public static String getTermuxAppPID(final Context context) {\n+        return PackageUtils.getPackagePID(context, TermuxConstants.TERMUX_PACKAGE_NAME);\n+    }\n+\n }",
    "output": "Add TERMUX_IS_DEBUG_BUILD, TERMUX_APK_RELEASE and TERMUX_APP_PID to termux shell environment"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/logger/Logger.java b/termux-shared/src/main/java/com/termux/shared/logger/Logger.java\n--- a/termux-shared/src/main/java/com/termux/shared/logger/Logger.java\n+++ b/termux-shared/src/main/java/com/termux/shared/logger/Logger.java\n@@ -439,7 +439,7 @@ public static boolean isLogLevelValid(Integer logLevel) {\n     /** Check if custom log level is valid and >= {@link #CURRENT_LOG_LEVEL}. If custom log level is\n      * not valid then {@link #LOG_LEVEL_VERBOSE} must be >= {@link #CURRENT_LOG_LEVEL}. */\n     public static boolean shouldEnableLoggingForCustomLogLevel(Integer customLogLevel) {\n-        if (customLogLevel == null || CURRENT_LOG_LEVEL == LOG_LEVEL_OFF) return false;\n+        if (customLogLevel == null || CURRENT_LOG_LEVEL <= LOG_LEVEL_OFF || customLogLevel <= LOG_LEVEL_OFF) return false;\n         customLogLevel = Logger.isLogLevelValid(customLogLevel) ? customLogLevel: Logger.LOG_LEVEL_VERBOSE;\n         return (customLogLevel >= CURRENT_LOG_LEVEL);\n     }",
    "output": "Make allowed custom log level added in 60f37bde to be more restrictive"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/settings/preferences/TermuxPreferenceConstants.java b/termux-shared/src/main/java/com/termux/shared/settings/preferences/TermuxPreferenceConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/settings/preferences/TermuxPreferenceConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/settings/preferences/TermuxPreferenceConstants.java\n@@ -1,7 +1,7 @@\n package com.termux.shared.settings.preferences;\n \n /*\n- * Version: v0.14.0\n+ * Version: v0.15.0\n  *\n  * Changelog\n  *\n@@ -61,6 +61,10 @@\n  *\n  * - 0.14.0 (2021-09-04)\n  *      - Added `TERMUX_WIDGET_APP.KEY_TOKEN`.\n+ *\n+ * - 0.15.0 (2021-09-05)\n+ *      - Added following to `TERMUX_TASKER_APP`:\n+ *          `KEY_LAST_PENDING_INTENT_REQUEST_CODE` and `DEFAULT_VALUE_KEY_LAST_PENDING_INTENT_REQUEST_CODE`.\n  */\n \n /**\n@@ -259,6 +263,13 @@ public static final class TERMUX_TASKER_APP {\n          */\n         public static final String KEY_LOG_LEVEL = \"log_level\";\n \n+\n+        /**\n+         * Defines the key for last used PendingIntent request code.\n+         */\n+        public static final String KEY_LAST_PENDING_INTENT_REQUEST_CODE = \"last_pending_intent_request_code\";\n+        public static final int DEFAULT_VALUE_KEY_LAST_PENDING_INTENT_REQUEST_CODE = 0;\n+\n     }\n \n \n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/settings/preferences/TermuxTaskerAppSharedPreferences.java b/termux-shared/src/main/java/com/termux/shared/settings/preferences/TermuxTaskerAppSharedPreferences.java\n--- a/termux-shared/src/main/java/com/termux/shared/settings/preferences/TermuxTaskerAppSharedPreferences.java\n+++ b/termux-shared/src/main/java/com/termux/shared/settings/preferences/TermuxTaskerAppSharedPreferences.java\n@@ -84,4 +84,14 @@ public void setLogLevel(Context context, int logLevel, boolean commitToFile) {\n         SharedPreferenceUtils.setInt(mSharedPreferences, TERMUX_TASKER_APP.KEY_LOG_LEVEL, logLevel, commitToFile);\n     }\n \n+\n+\n+    public int getLastPendingIntentRequestCode() {\n+        return SharedPreferenceUtils.getInt(mSharedPreferences, TERMUX_TASKER_APP.KEY_LAST_PENDING_INTENT_REQUEST_CODE, TERMUX_TASKER_APP.DEFAULT_VALUE_KEY_LAST_PENDING_INTENT_REQUEST_CODE);\n+    }\n+\n+    public void setLastPendingIntentRequestCode(int lastPendingIntentRequestCode) {\n+        SharedPreferenceUtils.setInt(mSharedPreferences, TERMUX_TASKER_APP.KEY_LAST_PENDING_INTENT_REQUEST_CODE, lastPendingIntentRequestCode, false);\n+    }\n+\n }",
    "output": "Add SharedPreferences KEY_LAST_PENDING_INTENT_REQUEST_CODE for termux-tasker"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/activities/SettingsActivity.java b/app/src/main/java/com/termux/app/activities/SettingsActivity.java\n--- a/app/src/main/java/com/termux/app/activities/SettingsActivity.java\n+++ b/app/src/main/java/com/termux/app/activities/SettingsActivity.java\n@@ -20,6 +20,7 @@\n import com.termux.shared.settings.preferences.TermuxAPIAppSharedPreferences;\n import com.termux.shared.settings.preferences.TermuxFloatAppSharedPreferences;\n import com.termux.shared.settings.preferences.TermuxTaskerAppSharedPreferences;\n+import com.termux.shared.settings.preferences.TermuxWidgetAppSharedPreferences;\n import com.termux.shared.termux.AndroidUtils;\n import com.termux.shared.termux.TermuxConstants;\n import com.termux.shared.termux.TermuxUtils;\n@@ -60,6 +61,7 @@ public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {\n             configureTermuxAPIPreference(context);\n             configureTermuxFloatPreference(context);\n             configureTermuxTaskerPreference(context);\n+            configureTermuxWidgetPreference(context);\n             configureAboutPreference(context);\n             configureDonatePreference(context);\n         }\n@@ -91,6 +93,15 @@ private void configureTermuxTaskerPreference(@NonNull Context context) {\n             }\n         }\n \n+        private void configureTermuxWidgetPreference(@NonNull Context context) {\n+            Preference termuxWidgetPreference = findPreference(\"termux_widget\");\n+            if (termuxWidgetPreference != null) {\n+                TermuxWidgetAppSharedPreferences preferences = TermuxWidgetAppSharedPreferences.build(context, false);\n+                // If failed to get app preferences, then likely app is not installed, so do not show its preference\n+                termuxWidgetPreference.setVisible(preferences != null);\n+            }\n+        }\n+\n         private void configureAboutPreference(@NonNull Context context) {\n             Preference aboutPreference = findPreference(\"about\");\n             if (aboutPreference != null) {\n\ndiff --git a/app/src/main/java/com/termux/app/fragments/settings/TermuxWidgetPreferencesFragment.java b/app/src/main/java/com/termux/app/fragments/settings/TermuxWidgetPreferencesFragment.java\n--- a/app/src/main/java/com/termux/app/fragments/settings/TermuxWidgetPreferencesFragment.java\n+++ b/app/src/main/java/com/termux/app/fragments/settings/TermuxWidgetPreferencesFragment.java\n@@ -0,0 +1,49 @@\n+package com.termux.app.fragments.settings;\n+\n+import android.content.Context;\n+import android.os.Bundle;\n+\n+import androidx.annotation.Keep;\n+import androidx.preference.PreferenceDataStore;\n+import androidx.preference.PreferenceFragmentCompat;\n+import androidx.preference.PreferenceManager;\n+\n+import com.termux.R;\n+import com.termux.shared.settings.preferences.TermuxWidgetAppSharedPreferences;\n+\n+@Keep\n+public class TermuxWidgetPreferencesFragment extends PreferenceFragmentCompat {\n+\n+    @Override\n+    public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {\n+        Context context = getContext();\n+        if (context == null) return;\n+\n+        PreferenceManager preferenceManager = getPreferenceManager();\n+        preferenceManager.setPreferenceDataStore(TermuxWidgetPreferencesDataStore.getInstance(context));\n+\n+        setPreferencesFromResource(R.xml.termux_widget_preferences, rootKey);\n+    }\n+\n+}\n+\n+class TermuxWidgetPreferencesDataStore extends PreferenceDataStore {\n+\n+    private final Context mContext;\n+    private final TermuxWidgetAppSharedPreferences mPreferences;\n+\n+    private static TermuxWidgetPreferencesDataStore mInstance;\n+\n+    private TermuxWidgetPreferencesDataStore(Context context) {\n+        mContext = context;\n+        mPreferences = TermuxWidgetAppSharedPreferences.build(context, true);\n+    }\n+\n+    public static synchronized TermuxWidgetPreferencesDataStore getInstance(Context context) {\n+        if (mInstance == null) {\n+            mInstance = new TermuxWidgetPreferencesDataStore(context);\n+        }\n+        return mInstance;\n+    }\n+\n+}\n\ndiff --git a/app/src/main/java/com/termux/app/fragments/settings/termux_widget/DebuggingPreferencesFragment.java b/app/src/main/java/com/termux/app/fragments/settings/termux_widget/DebuggingPreferencesFragment.java\n--- a/app/src/main/java/com/termux/app/fragments/settings/termux_widget/DebuggingPreferencesFragment.java\n+++ b/app/src/main/java/com/termux/app/fragments/settings/termux_widget/DebuggingPreferencesFragment.java\n@@ -0,0 +1,101 @@\n+package com.termux.app.fragments.settings.termux_widget;\n+\n+import android.content.Context;\n+import android.os.Bundle;\n+\n+import androidx.annotation.Keep;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.preference.ListPreference;\n+import androidx.preference.PreferenceCategory;\n+import androidx.preference.PreferenceDataStore;\n+import androidx.preference.PreferenceFragmentCompat;\n+import androidx.preference.PreferenceManager;\n+\n+import com.termux.R;\n+import com.termux.shared.settings.preferences.TermuxWidgetAppSharedPreferences;\n+\n+@Keep\n+public class DebuggingPreferencesFragment extends PreferenceFragmentCompat {\n+\n+    @Override\n+    public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {\n+        Context context = getContext();\n+        if (context == null) return;\n+\n+        PreferenceManager preferenceManager = getPreferenceManager();\n+        preferenceManager.setPreferenceDataStore(DebuggingPreferencesDataStore.getInstance(context));\n+\n+        setPreferencesFromResource(R.xml.termux_widget_debugging_preferences, rootKey);\n+\n+        configureLoggingPreferences(context);\n+    }\n+\n+    private void configureLoggingPreferences(@NonNull Context context) {\n+        PreferenceCategory loggingCategory = findPreference(\"logging\");\n+        if (loggingCategory == null) return;\n+\n+        ListPreference logLevelListPreference = findPreference(\"log_level\");\n+        if (logLevelListPreference != null) {\n+            TermuxWidgetAppSharedPreferences preferences = TermuxWidgetAppSharedPreferences.build(context, true);\n+            if (preferences == null) return;\n+\n+            com.termux.app.fragments.settings.termux.DebuggingPreferencesFragment.\n+                setLogLevelListPreferenceData(logLevelListPreference, context, preferences.getLogLevel(true));\n+            loggingCategory.addPreference(logLevelListPreference);\n+        }\n+    }\n+}\n+\n+class DebuggingPreferencesDataStore extends PreferenceDataStore {\n+\n+    private final Context mContext;\n+    private final TermuxWidgetAppSharedPreferences mPreferences;\n+\n+    private static DebuggingPreferencesDataStore mInstance;\n+\n+    private DebuggingPreferencesDataStore(Context context) {\n+        mContext = context;\n+        mPreferences = TermuxWidgetAppSharedPreferences.build(context, true);\n+    }\n+\n+    public static synchronized DebuggingPreferencesDataStore getInstance(Context context) {\n+        if (mInstance == null) {\n+            mInstance = new DebuggingPreferencesDataStore(context);\n+        }\n+        return mInstance;\n+    }\n+\n+\n+\n+    @Override\n+    @Nullable\n+    public String getString(String key, @Nullable String defValue) {\n+        if (mPreferences == null) return null;\n+        if (key == null) return null;\n+\n+        switch (key) {\n+            case \"log_level\":\n+                return String.valueOf(mPreferences.getLogLevel(true));\n+            default:\n+                return null;\n+        }\n+    }\n+\n+    @Override\n+    public void putString(String key, @Nullable String value) {\n+        if (mPreferences == null) return;\n+        if (key == null) return;\n+\n+        switch (key) {\n+            case \"log_level\":\n+                if (value != null) {\n+                    mPreferences.setLogLevel(mContext, Integer.parseInt(value), true);\n+                }\n+                break;\n+            default:\n+                break;\n+        }\n+    }\n+\n+}",
    "output": "Add log level setting in Termux Settings for termux-widget"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n@@ -3,11 +3,14 @@\n import android.content.ComponentName;\n import android.content.Context;\n import android.content.Intent;\n+import android.content.pm.ApplicationInfo;\n+import android.content.pm.PackageManager;\n import android.content.pm.ResolveInfo;\n \n import androidx.annotation.NonNull;\n \n import com.termux.shared.R;\n+import com.termux.shared.file.FileUtils;\n import com.termux.shared.file.TermuxFileUtils;\n import com.termux.shared.logger.Logger;\n import com.termux.shared.markdown.MarkdownUtils;\n@@ -101,6 +104,90 @@ public static Context getTermuxWidgetPackageContext(@NonNull Context context) {\n \n \n \n+    /**\n+     * Check if Termux app is installed and enabled. This can be used by external apps that don't\n+     * share `sharedUserId` with the Termux app.\n+     *\n+     * If your third-party app is targeting sdk `30` (android `11`), then it needs to add `com.termux`\n+     * package to the `queries` element or request `QUERY_ALL_PACKAGES` permission in its\n+     * `AndroidManifest.xml`. Otherwise it will get `PackageSetting{...... com.termux/......} BLOCKED`\n+     * errors in `logcat` and `RUN_COMMAND` won't work.\n+     * Check [package-visibility](https://developer.android.com/training/basics/intents/package-visibility#package-name),\n+     * `QUERY_ALL_PACKAGES` [googleplay policy](https://support.google.com/googleplay/android-developer/answer/10158779\n+     * and this [article](https://medium.com/androiddevelopers/working-with-package-visibility-dc252829de2d) for more info.\n+     *\n+     * {@code\n+     * <manifest\n+     *     <queries>\n+     *         <package android:name=\"com.termux\" />\n+     *    </queries>\n+     * </manifest>\n+     * }\n+     *\n+     * @param currentPackageContext The context of current package.\n+     * @return Returns {@code errmsg} if termux package is not installed or disabled, otherwise {@code null}.\n+     */\n+    public static String isTermuxAppInstalled(@NonNull final Context currentPackageContext) {\n+        String errmsg = null;\n+\n+        PackageManager packageManager = currentPackageContext.getPackageManager();\n+\n+        ApplicationInfo applicationInfo;\n+        try {\n+            applicationInfo = packageManager.getApplicationInfo(TermuxConstants.TERMUX_PACKAGE_NAME, 0);\n+        } catch (final PackageManager.NameNotFoundException e) {\n+            applicationInfo = null;\n+        }\n+        boolean termuxAppEnabled = (applicationInfo != null && applicationInfo.enabled);\n+\n+        // If Termux app is not installed or is disabled\n+        if (!termuxAppEnabled)\n+            errmsg = currentPackageContext.getString(R.string.error_termux_app_not_installed_or_disabled_warning);\n+\n+        return errmsg;\n+    }\n+\n+    /**\n+     * Check if Termux app is installed and accessible. This can only be used by apps that share\n+     * `sharedUserId` with the Termux app.\n+     *\n+     * This is done by checking if first checking if app is installed and enabled and then if\n+     * {@code currentPackageContext} can be used to get the {@link Context} of the app with\n+     * {@link TermuxConstants#TERMUX_PACKAGE_NAME} and then if\n+     * {@link TermuxConstants#TERMUX_PREFIX_DIR_PATH} exists and has\n+     * {@link FileUtils#APP_WORKING_DIRECTORY_PERMISSIONS} permissions. The directory will not\n+     * be automatically created and neither the missing permissions automatically set.\n+     *\n+     * @param currentPackageContext The context of current package.\n+     * @return Returns {@code errmsg} if failed to get termux package {@link Context} or\n+     *         {@link TermuxConstants#TERMUX_PREFIX_DIR_PATH} is accessible, otherwise {@code null}.\n+     */\n+    public static String isTermuxAppAccessible(@NonNull final Context currentPackageContext) {\n+        String errmsg = isTermuxAppInstalled(currentPackageContext);\n+        if (errmsg == null) {\n+            Context termuxPackageContext = TermuxUtils.getTermuxPackageContext(currentPackageContext);\n+            // If failed to get Termux app package context\n+            if (termuxPackageContext == null)\n+                errmsg = currentPackageContext.getString(R.string.error_termux_app_package_context_not_accessible);\n+\n+            if (errmsg == null) {\n+                // If TermuxConstants.TERMUX_PREFIX_DIR_PATH is not a directory or does not have required permissions\n+                Error error = TermuxFileUtils.isTermuxPrefixDirectoryAccessible(false, false);\n+                if (error != null)\n+                    errmsg = currentPackageContext.getString(R.string.error_termux_prefix_dir_path_not_accessible,\n+                        PackageUtils.getAppNameForPackage(currentPackageContext));\n+            }\n+        }\n+\n+        if (errmsg != null)\n+            return errmsg + \" \" + currentPackageContext.getString(R.string.msg_termux_app_required_by_app,\n+                PackageUtils.getAppNameForPackage(currentPackageContext));\n+        else\n+            return null;\n+    }\n+\n+\n+\n     /**\n      * Send the {@link TermuxConstants#BROADCAST_TERMUX_OPENED} broadcast to notify apps that Termux\n      * app has been opened.",
    "output": "Add isTermuxAppInstalled() and isTermuxAppAccessible() functions to TermuxUtils"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/settings/preferences/SharedPreferenceUtils.java b/termux-shared/src/main/java/com/termux/shared/settings/preferences/SharedPreferenceUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/settings/preferences/SharedPreferenceUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/settings/preferences/SharedPreferenceUtils.java\n@@ -245,17 +245,22 @@ public static void setLong(SharedPreferences sharedPreferences, String key, long\n      * @param sharedPreferences The {@link SharedPreferences} to get the value from.\n      * @param key The key for the value.\n      * @param def The default value if failed to read a valid value.\n+     * @param defIfEmpty If set to {@code true}, then {@code def} will be returned if value is empty.\n      * @return Returns the {@code String} value stored in {@link SharedPreferences}, otherwise returns\n      * default if failed to read a valid value, like in case of an exception.\n      */\n-    public static String getString(SharedPreferences sharedPreferences, String key, String def) {\n+    public static String getString(SharedPreferences sharedPreferences, String key, String def, boolean defIfEmpty) {\n         if (sharedPreferences == null) {\n             Logger.logError(LOG_TAG, \"Error getting String value for the \\\"\" + key + \"\\\" key from null shared preferences. Returning default value \\\"\" + def + \"\\\".\");\n             return def;\n         }\n \n         try {\n-            return sharedPreferences.getString(key, def);\n+            String value = sharedPreferences.getString(key, def);\n+            if (defIfEmpty && (value == null || value.isEmpty()))\n+                return def;\n+            else\n+                return value;\n         }\n         catch (ClassCastException e) {\n             Logger.logStackTraceWithMessage(LOG_TAG, \"Error getting String value for the \\\"\" + key + \"\\\" key from shared preferences. Returning default value \\\"\" + def + \"\\\".\", e);\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/settings/preferences/TermuxAppSharedPreferences.java b/termux-shared/src/main/java/com/termux/shared/settings/preferences/TermuxAppSharedPreferences.java\n--- a/termux-shared/src/main/java/com/termux/shared/settings/preferences/TermuxAppSharedPreferences.java\n+++ b/termux-shared/src/main/java/com/termux/shared/settings/preferences/TermuxAppSharedPreferences.java\n@@ -178,7 +178,7 @@ public void changeFontSize(boolean increase) {\n \n \n     public String getCurrentSession() {\n-        return SharedPreferenceUtils.getString(mSharedPreferences, TERMUX_APP.KEY_CURRENT_SESSION, null);\n+        return SharedPreferenceUtils.getString(mSharedPreferences, TERMUX_APP.KEY_CURRENT_SESSION, null, true);\n     }\n \n     public void setCurrentSession(String value) {",
    "output": "Add support to consider empty String values as null for SharedPreferences"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/activities/SettingsActivity.java b/app/src/main/java/com/termux/app/activities/SettingsActivity.java\n--- a/app/src/main/java/com/termux/app/activities/SettingsActivity.java\n+++ b/app/src/main/java/com/termux/app/activities/SettingsActivity.java\n@@ -18,6 +18,7 @@\n import com.termux.shared.interact.ShareUtils;\n import com.termux.shared.packages.PackageUtils;\n import com.termux.shared.settings.preferences.TermuxAPIAppSharedPreferences;\n+import com.termux.shared.settings.preferences.TermuxFloatAppSharedPreferences;\n import com.termux.shared.settings.preferences.TermuxTaskerAppSharedPreferences;\n import com.termux.shared.termux.AndroidUtils;\n import com.termux.shared.termux.TermuxConstants;\n@@ -57,6 +58,7 @@ public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {\n             setPreferencesFromResource(R.xml.root_preferences, rootKey);\n \n             configureTermuxAPIPreference(context);\n+            configureTermuxFloatPreference(context);\n             configureTermuxTaskerPreference(context);\n             configureAboutPreference(context);\n             configureDonatePreference(context);\n@@ -71,6 +73,15 @@ private void configureTermuxAPIPreference(@NonNull Context context) {\n             }\n         }\n \n+        private void configureTermuxFloatPreference(@NonNull Context context) {\n+            Preference termuxFloatPreference = findPreference(\"termux_float\");\n+            if (termuxFloatPreference != null) {\n+                TermuxFloatAppSharedPreferences preferences = TermuxFloatAppSharedPreferences.build(context, false);\n+                // If failed to get app preferences, then likely app is not installed, so do not show its preference\n+                termuxFloatPreference.setVisible(preferences != null);\n+            }\n+        }\n+\n         private void configureTermuxTaskerPreference(@NonNull Context context) {\n             Preference termuxTaskerPreference = findPreference(\"termux_tasker\");\n             if (termuxTaskerPreference != null) {\n\ndiff --git a/app/src/main/java/com/termux/app/fragments/settings/TermuxFloatPreferencesFragment.java b/app/src/main/java/com/termux/app/fragments/settings/TermuxFloatPreferencesFragment.java\n--- a/app/src/main/java/com/termux/app/fragments/settings/TermuxFloatPreferencesFragment.java\n+++ b/app/src/main/java/com/termux/app/fragments/settings/TermuxFloatPreferencesFragment.java\n@@ -0,0 +1,49 @@\n+package com.termux.app.fragments.settings;\n+\n+import android.content.Context;\n+import android.os.Bundle;\n+\n+import androidx.annotation.Keep;\n+import androidx.preference.PreferenceDataStore;\n+import androidx.preference.PreferenceFragmentCompat;\n+import androidx.preference.PreferenceManager;\n+\n+import com.termux.R;\n+import com.termux.shared.settings.preferences.TermuxFloatAppSharedPreferences;\n+\n+@Keep\n+public class TermuxFloatPreferencesFragment extends PreferenceFragmentCompat {\n+\n+    @Override\n+    public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {\n+        Context context = getContext();\n+        if (context == null) return;\n+\n+        PreferenceManager preferenceManager = getPreferenceManager();\n+        preferenceManager.setPreferenceDataStore(TermuxFloatPreferencesDataStore.getInstance(context));\n+\n+        setPreferencesFromResource(R.xml.termux_float_preferences, rootKey);\n+    }\n+\n+}\n+\n+class TermuxFloatPreferencesDataStore extends PreferenceDataStore {\n+\n+    private final Context mContext;\n+    private final TermuxFloatAppSharedPreferences mPreferences;\n+\n+    private static TermuxFloatPreferencesDataStore mInstance;\n+\n+    private TermuxFloatPreferencesDataStore(Context context) {\n+        mContext = context;\n+        mPreferences = TermuxFloatAppSharedPreferences.build(context, true);\n+    }\n+\n+    public static synchronized TermuxFloatPreferencesDataStore getInstance(Context context) {\n+        if (mInstance == null) {\n+            mInstance = new TermuxFloatPreferencesDataStore(context);\n+        }\n+        return mInstance;\n+    }\n+\n+}\n\ndiff --git a/app/src/main/java/com/termux/app/fragments/settings/termux_float/DebuggingPreferencesFragment.java b/app/src/main/java/com/termux/app/fragments/settings/termux_float/DebuggingPreferencesFragment.java\n--- a/app/src/main/java/com/termux/app/fragments/settings/termux_float/DebuggingPreferencesFragment.java\n+++ b/app/src/main/java/com/termux/app/fragments/settings/termux_float/DebuggingPreferencesFragment.java\n@@ -0,0 +1,126 @@\n+package com.termux.app.fragments.settings.termux_float;\n+\n+import android.content.Context;\n+import android.os.Bundle;\n+\n+import androidx.annotation.Keep;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.preference.ListPreference;\n+import androidx.preference.PreferenceCategory;\n+import androidx.preference.PreferenceDataStore;\n+import androidx.preference.PreferenceFragmentCompat;\n+import androidx.preference.PreferenceManager;\n+\n+import com.termux.R;\n+import com.termux.shared.settings.preferences.TermuxFloatAppSharedPreferences;\n+\n+@Keep\n+public class DebuggingPreferencesFragment extends PreferenceFragmentCompat {\n+\n+    @Override\n+    public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {\n+        Context context = getContext();\n+        if (context == null) return;\n+\n+        PreferenceManager preferenceManager = getPreferenceManager();\n+        preferenceManager.setPreferenceDataStore(DebuggingPreferencesDataStore.getInstance(context));\n+\n+        setPreferencesFromResource(R.xml.termux_float_debugging_preferences, rootKey);\n+\n+        configureLoggingPreferences(context);\n+    }\n+\n+    private void configureLoggingPreferences(@NonNull Context context) {\n+        PreferenceCategory loggingCategory = findPreference(\"logging\");\n+        if (loggingCategory == null) return;\n+\n+        ListPreference logLevelListPreference = findPreference(\"log_level\");\n+        if (logLevelListPreference != null) {\n+            TermuxFloatAppSharedPreferences preferences = TermuxFloatAppSharedPreferences.build(context, true);\n+            if (preferences == null) return;\n+\n+            com.termux.app.fragments.settings.termux.DebuggingPreferencesFragment.\n+                setLogLevelListPreferenceData(logLevelListPreference, context, preferences.getLogLevel(true));\n+            loggingCategory.addPreference(logLevelListPreference);\n+        }\n+    }\n+}\n+\n+class DebuggingPreferencesDataStore extends PreferenceDataStore {\n+\n+    private final Context mContext;\n+    private final TermuxFloatAppSharedPreferences mPreferences;\n+\n+    private static DebuggingPreferencesDataStore mInstance;\n+\n+    private DebuggingPreferencesDataStore(Context context) {\n+        mContext = context;\n+        mPreferences = TermuxFloatAppSharedPreferences.build(context, true);\n+    }\n+\n+    public static synchronized DebuggingPreferencesDataStore getInstance(Context context) {\n+        if (mInstance == null) {\n+            mInstance = new DebuggingPreferencesDataStore(context);\n+        }\n+        return mInstance;\n+    }\n+\n+\n+\n+    @Override\n+    @Nullable\n+    public String getString(String key, @Nullable String defValue) {\n+        if (mPreferences == null) return null;\n+        if (key == null) return null;\n+\n+        switch (key) {\n+            case \"log_level\":\n+                return String.valueOf(mPreferences.getLogLevel(true));\n+            default:\n+                return null;\n+        }\n+    }\n+\n+    @Override\n+    public void putString(String key, @Nullable String value) {\n+        if (mPreferences == null) return;\n+        if (key == null) return;\n+\n+        switch (key) {\n+            case \"log_level\":\n+                if (value != null) {\n+                    mPreferences.setLogLevel(mContext, Integer.parseInt(value), true);\n+                }\n+                break;\n+            default:\n+                break;\n+        }\n+    }\n+\n+    @Override\n+    public void putBoolean(String key, boolean value) {\n+        if (mPreferences == null) return;\n+        if (key == null) return;\n+\n+        switch (key) {\n+            case \"terminal_view_key_logging_enabled\":\n+                mPreferences.setTerminalViewKeyLoggingEnabled(value, true);\n+                break;\n+            default:\n+                break;\n+        }\n+    }\n+\n+    @Override\n+    public boolean getBoolean(String key, boolean defValue) {\n+        if (mPreferences == null) return false;\n+        switch (key) {\n+            case \"terminal_view_key_logging_enabled\":\n+                return mPreferences.isTerminalViewKeyLoggingEnabled(true);\n+            default:\n+                return false;\n+        }\n+    }\n+\n+}",
    "output": "Add termux-float log level settings in termux app settings"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n@@ -12,7 +12,7 @@\n import java.util.List;\n \n /*\n- * Version: v0.26.0\n+ * Version: v0.27.0\n  *\n  * Changelog\n  *\n@@ -182,6 +182,11 @@\n  * - 0.26.0 (2021-08-25)\n  *      - Changed `TERMUX_ACTIVITY.ACTION_FAILSAFE_SESSION` to `TERMUX_ACTIVITY.EXTRA_FAILSAFE_SESSION`.\n  *\n+ * - 0.27.0 (2021-09-02)\n+ *      - Added `TERMUX_FLOAT_APP_NOTIFICATION_CHANNEL_ID`, `TERMUX_FLOAT_APP_NOTIFICATION_CHANNEL_NAME`,\n+ *          `TERMUX_FLOAT_APP.TERMUX_FLOAT_SERVICE_NAME`.\n+ *      - Added following to `TERMUX_FLOAT_APP.TERMUX_FLOAT_SERVICE`:\n+ *          `ACTION_STOP_SERVICE`, `ACTION_SHOW`, `ACTION_HIDE`.\n  */\n \n /**\n@@ -719,6 +724,14 @@ public final class TermuxConstants {\n     public static final String TERMUX_CRASH_REPORTS_NOTIFICATION_CHANNEL_NAME = TermuxConstants.TERMUX_APP_NAME + \" Crash Reports\";\n \n \n+    /** Termux app notification channel id used by {@link TERMUX_FLOAT_APP.TERMUX_FLOAT_SERVICE} */\n+    public static final String TERMUX_FLOAT_APP_NOTIFICATION_CHANNEL_ID = \"termux_float_notification_channel\";\n+    /** Termux app notification channel name used by {@link TERMUX_FLOAT_APP.TERMUX_FLOAT_SERVICE} */\n+    public static final String TERMUX_FLOAT_APP_NOTIFICATION_CHANNEL_NAME = TermuxConstants.TERMUX_FLOAT_APP_NAME + \" App\";\n+    /** Termux app unique notification id used by {@link TERMUX_APP.TERMUX_SERVICE} */\n+    public static final int TERMUX_FLOAT_APP_NOTIFICATION_ID = 1339;\n+\n+\n \n \n \n@@ -1061,7 +1074,37 @@ public static final class RESULT_SENDER {\n \n \n     /**\n-     * Termux:Styling app constants.\n+     * Termux Float app constants.\n+     */\n+    public static final class TERMUX_FLOAT_APP {\n+\n+        /** Termux Float app core service name. */\n+        public static final String TERMUX_FLOAT_SERVICE_NAME = TERMUX_FLOAT_PACKAGE_NAME + \".TermuxFloatService\"; // Default: \"com.termux.window.TermuxFloatService\"\n+\n+        /**\n+         * Termux Float app core service.\n+         */\n+        public static final class TERMUX_FLOAT_SERVICE {\n+\n+            /** Intent action to stop TERMUX_FLOAT_SERVICE */\n+            public static final String ACTION_STOP_SERVICE = TERMUX_FLOAT_PACKAGE_NAME + \".stop_service\"; // Default: \"com.termux.window.stop_service\"\n+\n+            /** Intent action to show float window */\n+            public static final String ACTION_SHOW = TERMUX_FLOAT_PACKAGE_NAME + \".show\"; // Default: \"com.termux.window.show\"\n+\n+            /** Intent action to hide float window */\n+            public static final String ACTION_HIDE = TERMUX_FLOAT_PACKAGE_NAME + \".hide\"; // Default: \"com.termux.window.hide\"\n+\n+        }\n+\n+    }\n+\n+\n+\n+\n+\n+    /**\n+     * Termux Styling app constants.\n      */\n     public static final class TERMUX_STYLING {\n ",
    "output": "Add constants for termux-float in TermuxConstants"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java b/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java\n--- a/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java\n+++ b/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java\n@@ -1,14 +1,16 @@\n package com.termux.filepicker;\n \n import android.app.Activity;\n-import android.app.AlertDialog;\n import android.content.Intent;\n import android.database.Cursor;\n import android.net.Uri;\n import android.provider.OpenableColumns;\n import android.util.Patterns;\n \n import com.termux.R;\n+import com.termux.shared.data.DataUtils;\n+import com.termux.shared.data.IntentUtils;\n+import com.termux.shared.interact.MessageDialogUtils;\n import com.termux.shared.interact.TextInputDialogUtils;\n import com.termux.shared.termux.TermuxConstants;\n import com.termux.shared.termux.TermuxConstants.TERMUX_APP.TERMUX_SERVICE;\n@@ -39,6 +41,8 @@ public class TermuxFileReceiverActivity extends Activity {\n      */\n     boolean mFinishOnDismissNameDialog = true;\n \n+    private static final String API_TAG = TermuxConstants.TERMUX_APP_NAME + \"FileReceiver\";\n+\n     private static final String LOG_TAG = \"TermuxFileReceiverActivity\";\n \n     static boolean isSharedTextAnUrl(String sharedText) {\n@@ -55,44 +59,66 @@ protected void onResume() {\n         final String type = intent.getType();\n         final String scheme = intent.getScheme();\n \n+        Logger.logVerbose(LOG_TAG, \"Intent Received:\\n\" + IntentUtils.getIntentString(intent));\n+\n+        final String sharedTitle = IntentUtils.getStringExtraIfSet(intent, Intent.EXTRA_TITLE, null);\n+\n         if (Intent.ACTION_SEND.equals(action) && type != null) {\n             final String sharedText = intent.getStringExtra(Intent.EXTRA_TEXT);\n             final Uri sharedUri = intent.getParcelableExtra(Intent.EXTRA_STREAM);\n \n-            if (sharedText != null) {\n+            if (sharedUri != null) {\n+                handleContentUri(sharedUri, sharedTitle);\n+            } else if (sharedText != null) {\n                 if (isSharedTextAnUrl(sharedText)) {\n                     handleUrlAndFinish(sharedText);\n                 } else {\n-                    String subject = intent.getStringExtra(Intent.EXTRA_SUBJECT);\n-                    if (subject == null) subject = intent.getStringExtra(Intent.EXTRA_TITLE);\n+                    String subject = IntentUtils.getStringExtraIfSet(intent, Intent.EXTRA_SUBJECT, null);\n+                    if (subject == null) subject = sharedTitle;\n                     if (subject != null) subject += \".txt\";\n                     promptNameAndSave(new ByteArrayInputStream(sharedText.getBytes(StandardCharsets.UTF_8)), subject);\n                 }\n-            } else if (sharedUri != null) {\n-                handleContentUri(sharedUri, intent.getStringExtra(Intent.EXTRA_TITLE));\n             } else {\n                 showErrorDialogAndQuit(\"Send action without content - nothing to save.\");\n             }\n-        } else if (\"content\".equals(scheme)) {\n-            handleContentUri(intent.getData(), intent.getStringExtra(Intent.EXTRA_TITLE));\n-        } else if (\"file\".equals(scheme)) {\n-            // When e.g. clicking on a downloaded apk:\n-            String path = intent.getData().getPath();\n-            File file = new File(path);\n-            try {\n-                FileInputStream in = new FileInputStream(file);\n-                promptNameAndSave(in, file.getName());\n-            } catch (FileNotFoundException e) {\n-                showErrorDialogAndQuit(\"Cannot open file: \" + e.getMessage() + \".\");\n-            }\n         } else {\n-            showErrorDialogAndQuit(\"Unable to receive any file or URL.\");\n+            Uri dataUri = intent.getData();\n+\n+            if (dataUri == null) {\n+                showErrorDialogAndQuit(\"Data uri not passed.\");\n+                return;\n+            }\n+\n+            if (\"content\".equals(scheme)) {\n+                handleContentUri(dataUri, sharedTitle);\n+            } else if (\"file\".equals(scheme)) {\n+                // When e.g. clicking on a downloaded apk:\n+                String path = dataUri.getPath();\n+                if (DataUtils.isNullOrEmpty(path)) {\n+                    showErrorDialogAndQuit(\"File path from data uri is null, empty or invalid.\");\n+                    return;\n+                }\n+\n+                File file = new File(path);\n+                try {\n+                    FileInputStream in = new FileInputStream(file);\n+                    promptNameAndSave(in, file.getName());\n+                } catch (FileNotFoundException e) {\n+                    showErrorDialogAndQuit(\"Cannot open file: \" + e.getMessage() + \".\");\n+                }\n+            } else {\n+                showErrorDialogAndQuit(\"Unable to receive any file or URL.\");\n+            }\n         }\n     }\n \n     void showErrorDialogAndQuit(String message) {\n         mFinishOnDismissNameDialog = false;\n-        new AlertDialog.Builder(this).setMessage(message).setOnDismissListener(dialog -> finish()).setPositiveButton(android.R.string.ok, (dialog, which) -> finish()).show();\n+        MessageDialogUtils.showMessage(this,\n+            API_TAG, message,\n+            null, (dialog, which) -> finish(),\n+            null, null,\n+            dialog -> finish());\n     }\n \n     void handleContentUri(final Uri uri, String subjectFromIntent) {\n@@ -157,10 +183,17 @@ void promptNameAndSave(final InputStream in, final String attachmentFileName) {\n \n     public File saveStreamWithName(InputStream in, String attachmentFileName) {\n         File receiveDir = new File(TERMUX_RECEIVEDIR);\n+\n+        if (DataUtils.isNullOrEmpty(attachmentFileName)) {\n+            showErrorDialogAndQuit(\"File name cannot be null or empty\");\n+            return null;\n+        }\n+\n         if (!receiveDir.isDirectory() && !receiveDir.mkdirs()) {\n             showErrorDialogAndQuit(\"Cannot create directory: \" + receiveDir.getAbsolutePath());\n             return null;\n         }\n+\n         try {\n             final File outFile = new File(receiveDir, attachmentFileName);\n             try (FileOutputStream f = new FileOutputStream(outFile)) {\n@@ -182,7 +215,7 @@ void handleUrlAndFinish(final String url) {\n         final File urlOpenerProgramFile = new File(URL_OPENER_PROGRAM);\n         if (!urlOpenerProgramFile.isFile()) {\n             showErrorDialogAndQuit(\"The following file does not exist:\\n$HOME/bin/termux-url-opener\\n\\n\"\n-                + \"Create this file as a script or a symlink - it will be called with the shared URL as only argument.\");\n+                + \"Create this file as a script or a symlink - it will be called with the shared URL as the first argument.\");\n             return;\n         }\n ",
    "output": "Fix TermuxFileReceiverActivity incorrect handling of intent extras - If the `EXTRA_TEXT` value of the intent passed was empty instead of `null`, it was incorrectly assumed that text was passed, even though a valid `EXTRA_STREAM` may have been passed. Now `EXTRA_STREAM` will be checked first. - Added empty extra and empty/`null` filename checks before trying to create a file with an empty filename and failing. - Enable logging of intent passed at verbose log level. - Changed to a better error dialog. Closes #2247"
  },
  {
    "input": "diff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -764,6 +764,10 @@ public void inputCodePoint(int codePoint, boolean controlDownFromEvent, boolean\n \n         if (mTermSession == null) return;\n \n+        // Ensure cursor is shown when a key is pressed down like long hold on (arrow) keys\n+        if (mEmulator != null)\n+            mEmulator.setCursorBlinkState(true);\n+\n         final boolean controlDown = controlDownFromEvent || mClient.readControlKey();\n         final boolean altDown = leftAltDownFromEvent || mClient.readAltKey();\n ",
    "output": "Fix terminal cursor blinker not stopping when typing a character in non-gboard keyboards"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/file/TermuxFileUtils.java b/termux-shared/src/main/java/com/termux/shared/file/TermuxFileUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/file/TermuxFileUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/file/TermuxFileUtils.java\n@@ -230,7 +230,7 @@ public static Error isTermuxFilesDirectoryAccessible(@NonNull final Context cont\n      * @param context The context for operations.\n      * @return Returns the markdown {@link String}.\n      */\n-    public static String getTermuxFilesDirStatMarkdownString(@NonNull final Context context) {\n+    public static String getTermuxFilesStatMarkdownString(@NonNull final Context context) {\n         Context termuxPackageContext = TermuxUtils.getTermuxPackageContext(context);\n         if (termuxPackageContext == null) return null;\n \n@@ -241,7 +241,7 @@ public static String getTermuxFilesDirStatMarkdownString(@NonNull final Context\n         StringBuilder statScript = new StringBuilder();\n         statScript\n             .append(\"echo 'ls info:'\\n\")\n-            .append(\"/system/bin/ls -lhd\")\n+            .append(\"/system/bin/ls -lhdZ\")\n             .append(\" '/data/data'\")\n             .append(\" '/data/user/0'\")\n             .append(\" '\" + TermuxConstants.TERMUX_INTERNAL_PRIVATE_APP_DATA_DIR_PATH + \"'\")\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n@@ -368,7 +368,7 @@ public static String geAPTInfoMarkdownString(@NonNull final Context context) {\n      * @return Returns the markdown {@link String}.\n      */\n     public static String getTermuxDebugMarkdownString(@NonNull final Context context) {\n-        String statInfo = TermuxFileUtils.getTermuxFilesDirStatMarkdownString(context);\n+        String statInfo = TermuxFileUtils.getTermuxFilesStatMarkdownString(context);\n         String logcatInfo = getLogcatDumpMarkdownString(context);\n \n         if (statInfo != null && logcatInfo != null)",
    "output": "Add selinux context info to termux files info of debug output"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n@@ -297,6 +297,11 @@ public boolean readAltKey() {\n         return readExtraKeysSpecialButton(SpecialButton.ALT);\n     }\n \n+    @Override\n+    public boolean readShiftKey() {\n+        return readExtraKeysSpecialButton(SpecialButton.SHIFT);\n+    }\n+\n     public boolean readExtraKeysSpecialButton(SpecialButton specialButton) {\n         if (mActivity.getExtraKeysView() == null) return false;\n         Boolean state = mActivity.getExtraKeysView().readSpecialButton(specialButton, true);\n\ndiff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -598,12 +598,13 @@ public boolean onKeyDown(int keyCode, KeyEvent event) {\n         final int metaState = event.getMetaState();\n         final boolean controlDown = event.isCtrlPressed() || mClient.readControlKey();\n         final boolean leftAltDown = (metaState & KeyEvent.META_ALT_LEFT_ON) != 0 || mClient.readAltKey();\n+        final boolean shiftDown = event.isShiftPressed() || mClient.readShiftKey();\n         final boolean rightAltDownFromEvent = (metaState & KeyEvent.META_ALT_RIGHT_ON) != 0;\n \n         int keyMod = 0;\n         if (controlDown) keyMod |= KeyHandler.KEYMOD_CTRL;\n         if (event.isAltPressed() || leftAltDown) keyMod |= KeyHandler.KEYMOD_ALT;\n-        if (event.isShiftPressed()) keyMod |= KeyHandler.KEYMOD_SHIFT;\n+        if (shiftDown) keyMod |= KeyHandler.KEYMOD_SHIFT;\n         if (event.isNumLockOn()) keyMod |= KeyHandler.KEYMOD_NUM_LOCK;\n         if (!event.isFunctionPressed() && handleKeyCode(keyCode, keyMod)) {\n             if (TERMINAL_VIEW_KEY_LOGGING_ENABLED) mClient.logInfo(LOG_TAG, \"handleKeyCode() took key event\");\n@@ -620,6 +621,8 @@ public boolean onKeyDown(int keyCode, KeyEvent event) {\n         }\n         int effectiveMetaState = event.getMetaState() & ~bitsToClear;\n \n+        if (shiftDown) effectiveMetaState |= KeyEvent.META_SHIFT_ON | KeyEvent.META_SHIFT_LEFT_ON;\n+\n         int result = event.getUnicodeChar(effectiveMetaState);\n         if (TERMINAL_VIEW_KEY_LOGGING_ENABLED)\n             mClient.logInfo(LOG_TAG, \"KeyEvent#getUnicodeChar(\" + effectiveMetaState + \") returned: \" + result);\n\ndiff --git a/terminal-view/src/main/java/com/termux/view/TerminalViewClient.java b/terminal-view/src/main/java/com/termux/view/TerminalViewClient.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalViewClient.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalViewClient.java\n@@ -54,6 +54,9 @@ public interface TerminalViewClient {\n \n     boolean readAltKey();\n \n+    boolean readShiftKey();\n+\n+\n \n     boolean onCodePoint(int codePoint, boolean ctrlDown, TerminalSession session);\n \n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/terminal/TermuxTerminalViewClientBase.java b/termux-shared/src/main/java/com/termux/shared/terminal/TermuxTerminalViewClientBase.java\n--- a/termux-shared/src/main/java/com/termux/shared/terminal/TermuxTerminalViewClientBase.java\n+++ b/termux-shared/src/main/java/com/termux/shared/terminal/TermuxTerminalViewClientBase.java\n@@ -67,6 +67,12 @@ public boolean readAltKey() {\n         return false;\n     }\n \n+    public boolean readShiftKey() {\n+        return false;\n+    }\n+\n+\n+\n     @Override\n     public boolean onCodePoint(int codePoint, boolean ctrlDown, TerminalSession session) {\n         return false;\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/terminal/io/extrakeys/ExtraKeysConstants.java b/termux-shared/src/main/java/com/termux/shared/terminal/io/extrakeys/ExtraKeysConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/terminal/io/extrakeys/ExtraKeysConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/terminal/io/extrakeys/ExtraKeysConstants.java\n@@ -173,6 +173,7 @@ public static class EXTRA_KEY_DISPLAY_MAPS {\n     public static final ExtraKeyDisplayMap CONTROL_CHARS_ALIASES = new ExtraKeyDisplayMap() {{\n         put(\"ESCAPE\", \"ESC\");\n         put(\"CONTROL\", \"CTRL\");\n+        put(\"SHFT\", \"SHIFT\");\n         put(\"RETURN\", \"ENTER\"); // Technically different keys, but most applications won't see the difference\n         put(\"FUNCTION\", \"FN\");\n         // no alias for ALT",
    "output": "Add shift key support in extra keys and terminal with `SHIFT` or `SHFT`"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/settings/properties/SharedProperties.java b/termux-shared/src/main/java/com/termux/shared/settings/properties/SharedProperties.java\n--- a/termux-shared/src/main/java/com/termux/shared/settings/properties/SharedProperties.java\n+++ b/termux-shared/src/main/java/com/termux/shared/settings/properties/SharedProperties.java\n@@ -553,6 +553,17 @@ public static <T> T getDefaultIfNull(@androidx.annotation.Nullable T object, @an\n         return (object == null) ? def : object;\n     }\n \n+    /**\n+     * Get the {@link String} object itself if it is not {@code null} or empty, otherwise default.\n+     *\n+     * @param object The {@link String} to check.\n+     * @param def The default {@link String}.\n+     * @return Returns {@code object} if it is not {@code null}, otherwise returns {@code def}.\n+     */\n+    public static String getDefaultIfNullOrEmpty(@androidx.annotation.Nullable String object, @androidx.annotation.Nullable String def) {\n+        return (object == null || object.isEmpty()) ? def : object;\n+    }\n+\n     /**\n      * Covert the {@link String} value to lowercase.\n      *\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxSharedProperties.java b/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxSharedProperties.java\n--- a/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxSharedProperties.java\n+++ b/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxSharedProperties.java\n@@ -423,7 +423,7 @@ public static String getDefaultWorkingDirectoryInternalPropertyValueFromValue(St\n      * @return Returns the internal value for value.\n      */\n     public static String getExtraKeysInternalPropertyValueFromValue(String value) {\n-        return SharedProperties.getDefaultIfNull(value, TermuxPropertyConstants.DEFAULT_IVALUE_EXTRA_KEYS);\n+        return SharedProperties.getDefaultIfNullOrEmpty(value, TermuxPropertyConstants.DEFAULT_IVALUE_EXTRA_KEYS);\n     }\n \n     /**\n@@ -433,7 +433,7 @@ public static String getExtraKeysInternalPropertyValueFromValue(String value) {\n      * @return Returns the internal value for value.\n      */\n     public static String getExtraKeysStyleInternalPropertyValueFromValue(String value) {\n-        return SharedProperties.getDefaultIfNull(value, TermuxPropertyConstants.DEFAULT_IVALUE_EXTRA_KEYS_STYLE);\n+        return SharedProperties.getDefaultIfNullOrEmpty(value, TermuxPropertyConstants.DEFAULT_IVALUE_EXTRA_KEYS_STYLE);\n     }\n \n     /**",
    "output": "Use default values if extra-keys or extra-keys-style termux.properties values are empty"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/terminal/io/BellHandler.java b/app/src/main/java/com/termux/app/terminal/io/BellHandler.java\n--- a/app/src/main/java/com/termux/app/terminal/io/BellHandler.java\n+++ b/app/src/main/java/com/termux/app/terminal/io/BellHandler.java\n@@ -1,15 +1,21 @@\n package com.termux.app.terminal.io;\n \n import android.content.Context;\n+import android.os.Build;\n import android.os.Handler;\n import android.os.Looper;\n import android.os.SystemClock;\n+import android.os.VibrationEffect;\n import android.os.Vibrator;\n \n+import com.termux.shared.logger.Logger;\n+\n public class BellHandler {\n     private static BellHandler instance = null;\n     private static final Object lock = new Object();\n \n+    private static final String LOG_TAG = \"BellHandler\";\n+\n     public static BellHandler getInstance(Context context) {\n         if (instance == null) {\n             synchronized (lock) {\n@@ -34,7 +40,17 @@ private BellHandler(final Vibrator vibrator) {\n             @Override\n             public void run() {\n                 if (vibrator != null) {\n-                    vibrator.vibrate(DURATION);\n+                    try {\n+                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n+                            vibrator.vibrate(VibrationEffect.createOneShot(DURATION, VibrationEffect.DEFAULT_AMPLITUDE));\n+                        } else {\n+                            vibrator.vibrate(DURATION);\n+                        }\n+                    } catch (Exception e) {\n+                        // Issue on samsung devices on android 8\n+                        // java.lang.NullPointerException: Attempt to read from field 'android.os.VibrationEffect com.android.server.VibratorService$Vibration.mEffect' on a null object reference\n+                        Logger.logStackTraceWithMessage(LOG_TAG, \"Failed to run vibrator\", e);\n+                    }\n                 }\n             }\n         };",
    "output": "Fix NullPointerException when running bell/vibrate on Samsung devices on android 8 and handled deprecated code"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/RunCommandService.java b/app/src/main/java/com/termux/app/RunCommandService.java\n--- a/app/src/main/java/com/termux/app/RunCommandService.java\n+++ b/app/src/main/java/com/termux/app/RunCommandService.java\n@@ -189,7 +189,7 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n \n         executionCommand.executableUri = new Uri.Builder().scheme(TERMUX_SERVICE.URI_SCHEME_SERVICE_EXECUTE).path(executionCommand.executable).build();\n \n-        Logger.logVerbose(LOG_TAG, executionCommand.toString());\n+        Logger.logVerboseExtended(LOG_TAG, executionCommand.toString());\n \n         // Create execution intent with the action TERMUX_SERVICE#ACTION_SERVICE_EXECUTE to be sent to the TERMUX_SERVICE\n         Intent execIntent = new Intent(TERMUX_SERVICE.ACTION_SERVICE_EXECUTE, executionCommand.executableUri);\n\ndiff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -427,7 +427,7 @@ public synchronized TermuxTask createTermuxTask(ExecutionCommand executionComman\n         }\n \n         if (Logger.getLogLevel() >= Logger.LOG_LEVEL_VERBOSE)\n-            Logger.logVerbose(LOG_TAG, executionCommand.toString());\n+            Logger.logVerboseExtended(LOG_TAG, executionCommand.toString());\n \n         TermuxTask newTermuxTask = TermuxTask.execute(this, executionCommand, this, new TermuxShellEnvironmentClient(), false);\n         if (newTermuxTask == null) {\n@@ -519,7 +519,7 @@ public synchronized TermuxSession createTermuxSession(ExecutionCommand execution\n         }\n \n         if (Logger.getLogLevel() >= Logger.LOG_LEVEL_VERBOSE)\n-            Logger.logVerbose(LOG_TAG, executionCommand.toString());\n+            Logger.logVerboseExtended(LOG_TAG, executionCommand.toString());\n \n         // If the execution command was started for a plugin, only then will the stdout be set\n         // Otherwise if command was manually started by the user like by adding a new terminal session,\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/file/TermuxFileUtils.java b/termux-shared/src/main/java/com/termux/shared/file/TermuxFileUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/file/TermuxFileUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/file/TermuxFileUtils.java\n@@ -264,7 +264,7 @@ public static String getTermuxFilesDirStatMarkdownString(@NonNull final Context\n         executionCommand.backgroundCustomLogLevel = Logger.LOG_LEVEL_OFF;\n         TermuxTask termuxTask = TermuxTask.execute(context, executionCommand, null, new TermuxShellEnvironmentClient(), true);\n         if (termuxTask == null || !executionCommand.isSuccessful()) {\n-            Logger.logError(LOG_TAG, executionCommand.toString());\n+            Logger.logErrorExtended(LOG_TAG, executionCommand.toString());\n             return null;\n         }\n \n@@ -275,7 +275,7 @@ public static String getTermuxFilesDirStatMarkdownString(@NonNull final Context\n \n         boolean stderrSet = !executionCommand.resultData.stderr.toString().isEmpty();\n         if (executionCommand.resultData.exitCode != 0 || stderrSet) {\n-            Logger.logError(LOG_TAG, executionCommand.toString());\n+            Logger.logErrorExtended(LOG_TAG, executionCommand.toString());\n             if (stderrSet)\n                 statOutput.append(\"\\n\").append(executionCommand.resultData.stderr.toString());\n             statOutput.append(\"\\n\").append(\"exit code: \").append(executionCommand.resultData.exitCode.toString());\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/shell/TermuxSession.java b/termux-shared/src/main/java/com/termux/shared/shell/TermuxSession.java\n--- a/termux-shared/src/main/java/com/termux/shared/shell/TermuxSession.java\n+++ b/termux-shared/src/main/java/com/termux/shared/shell/TermuxSession.java\n@@ -125,7 +125,7 @@ public static TermuxSession execute(@NonNull final Context context, @NonNull Exe\n             return null;\n         }\n \n-        Logger.logDebug(LOG_TAG, executionCommand.toString());\n+        Logger.logDebugExtended(LOG_TAG, executionCommand.toString());\n \n         Logger.logDebug(LOG_TAG, \"Running \\\"\" + executionCommand.getCommandIdAndLabelLogString() + \"\\\" TermuxSession\");\n         TerminalSession terminalSession = new TerminalSession(executionCommand.executable, executionCommand.workingDirectory, executionCommand.arguments, environment, executionCommand.terminalTranscriptRows, terminalSessionClient);\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/shell/TermuxTask.java b/termux-shared/src/main/java/com/termux/shared/shell/TermuxTask.java\n--- a/termux-shared/src/main/java/com/termux/shared/shell/TermuxTask.java\n+++ b/termux-shared/src/main/java/com/termux/shared/shell/TermuxTask.java\n@@ -83,7 +83,7 @@ public static TermuxTask execute(@NonNull final Context context, @NonNull Execut\n \n         // No need to log stdin if logging is disabled, like for app internal scripts\n         int customLogLevel = Logger.isLogLevelValid(executionCommand.backgroundCustomLogLevel) ? executionCommand.backgroundCustomLogLevel: Logger.LOG_LEVEL_VERBOSE;\n-        Logger.logDebug(LOG_TAG, ExecutionCommand.getExecutionInputLogString(executionCommand, true, customLogLevel >= Logger.getLogLevel()));\n+        Logger.logDebugExtended(LOG_TAG, ExecutionCommand.getExecutionInputLogString(executionCommand, true, customLogLevel >= Logger.getLogLevel()));\n \n         String taskName = ShellUtils.getExecutableBasename(executionCommand.executable);\n \n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n@@ -345,12 +345,12 @@ public static String geAPTInfoMarkdownString(@NonNull final Context context) {\n         executionCommand.backgroundCustomLogLevel = Logger.LOG_LEVEL_OFF;\n         TermuxTask termuxTask = TermuxTask.execute(context, executionCommand, null, new TermuxShellEnvironmentClient(), true);\n         if (termuxTask == null || !executionCommand.isSuccessful() || executionCommand.resultData.exitCode != 0) {\n-            Logger.logError(LOG_TAG, executionCommand.toString());\n+            Logger.logErrorExtended(LOG_TAG, executionCommand.toString());\n             return null;\n         }\n \n         if (!executionCommand.resultData.stderr.toString().isEmpty())\n-            Logger.logError(LOG_TAG, executionCommand.toString());\n+            Logger.logErrorExtended(LOG_TAG, executionCommand.toString());\n \n         StringBuilder markdownString = new StringBuilder();\n \n@@ -403,7 +403,7 @@ public static String getLogcatDumpMarkdownString(@NonNull final Context context)\n         executionCommand.backgroundCustomLogLevel = Logger.LOG_LEVEL_OFF;\n         TermuxTask termuxTask = TermuxTask.execute(context, executionCommand, null, new TermuxShellEnvironmentClient(), true);\n         if (termuxTask == null || !executionCommand.isSuccessful()) {\n-            Logger.logError(LOG_TAG, executionCommand.toString());\n+            Logger.logErrorExtended(LOG_TAG, executionCommand.toString());\n             return null;\n         }\n \n@@ -414,7 +414,7 @@ public static String getLogcatDumpMarkdownString(@NonNull final Context context)\n \n         boolean stderrSet = !executionCommand.resultData.stderr.toString().isEmpty();\n         if (executionCommand.resultData.exitCode != 0 || stderrSet) {\n-            Logger.logError(LOG_TAG, executionCommand.toString());\n+            Logger.logErrorExtended(LOG_TAG, executionCommand.toString());\n             if (stderrSet)\n                 logcatOutput.append(\"\\n\").append(executionCommand.resultData.stderr.toString());\n             logcatOutput.append(\"\\n\").append(\"exit code: \").append(executionCommand.resultData.exitCode.toString());",
    "output": "Use extended version of Logger functions for logging execution commands"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/file/TermuxFileUtils.java b/termux-shared/src/main/java/com/termux/shared/file/TermuxFileUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/file/TermuxFileUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/file/TermuxFileUtils.java\n@@ -260,6 +260,7 @@ public static String getTermuxFilesDirStatMarkdownString(@NonNull final Context\n \n         // Run script\n         ExecutionCommand executionCommand = new ExecutionCommand(1, \"/system/bin/sh\", null, statScript.toString() + \"\\n\", \"/\", true, true);\n+        executionCommand.commandLabel = TermuxConstants.TERMUX_APP_NAME + \" Files Stat Command\";\n         executionCommand.backgroundCustomLogLevel = Logger.LOG_LEVEL_OFF;\n         TermuxTask termuxTask = TermuxTask.execute(context, executionCommand, null, new TermuxShellEnvironmentClient(), true);\n         if (termuxTask == null || !executionCommand.isSuccessful()) {\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n@@ -341,6 +341,7 @@ public static String geAPTInfoMarkdownString(@NonNull final Context context) {\n         aptInfoScript = aptInfoScript.replaceAll(Pattern.quote(\"@TERMUX_PREFIX@\"), TermuxConstants.TERMUX_PREFIX_DIR_PATH);\n \n         ExecutionCommand executionCommand = new ExecutionCommand(1, TermuxConstants.TERMUX_BIN_PREFIX_DIR_PATH + \"/bash\", null, aptInfoScript, null, true, false);\n+        executionCommand.commandLabel = \"APT Info Command\";\n         executionCommand.backgroundCustomLogLevel = Logger.LOG_LEVEL_OFF;\n         TermuxTask termuxTask = TermuxTask.execute(context, executionCommand, null, new TermuxShellEnvironmentClient(), true);\n         if (termuxTask == null || !executionCommand.isSuccessful() || executionCommand.resultData.exitCode != 0) {\n@@ -398,6 +399,7 @@ public static String getLogcatDumpMarkdownString(@NonNull final Context context)\n         // Run script\n         // Logging must be disabled for output of logcat command itself in StreamGobbler\n         ExecutionCommand executionCommand = new ExecutionCommand(1, \"/system/bin/sh\", null, logcatScript + \"\\n\", \"/\", true, true);\n+        executionCommand.commandLabel = \"Logcat dump command\";\n         executionCommand.backgroundCustomLogLevel = Logger.LOG_LEVEL_OFF;\n         TermuxTask termuxTask = TermuxTask.execute(context, executionCommand, null, new TermuxShellEnvironmentClient(), true);\n         if (termuxTask == null || !executionCommand.isSuccessful()) {",
    "output": "Add labels for ExecutionCommand for termux internal commands"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n@@ -241,7 +241,7 @@ public static String getReportIssueMarkdownString(@NonNull final Context context\n \n         markdownString.append(\"## Where To Report An Issue\");\n \n-        markdownString.append(\"\\n\\n\").append(context.getString(R.string.msg_report_issue)).append(\"\\n\");\n+        markdownString.append(\"\\n\\n\").append(context.getString(R.string.msg_report_issue, TermuxConstants.TERMUX_WIKI_URL)).append(\"\\n\");\n \n         markdownString.append(\"\\n\\n### Email\\n\");\n         markdownString.append(\"\\n\").append(MarkdownUtils.getLinkMarkdownString(TermuxConstants.TERMUX_SUPPORT_EMAIL_URL, TermuxConstants.TERMUX_SUPPORT_EMAIL_MAILTO_URL)).append(\"  \");",
    "output": "Add warning that hax support is not provided and asking questions will likely result in issue automatically closed or even ban"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/crash/CrashHandler.java b/termux-shared/src/main/java/com/termux/shared/crash/CrashHandler.java\n--- a/termux-shared/src/main/java/com/termux/shared/crash/CrashHandler.java\n+++ b/termux-shared/src/main/java/com/termux/shared/crash/CrashHandler.java\n@@ -56,7 +56,7 @@ public static void logCrash(@NonNull final Context context, @NonNull final Crash\n \n         reportString.append(\"## Crash Details\\n\");\n         reportString.append(\"\\n\").append(MarkdownUtils.getSingleLineMarkdownStringEntry(\"Crash Thread\", thread.toString(), \"-\"));\n-        reportString.append(\"\\n\").append(MarkdownUtils.getSingleLineMarkdownStringEntry(\"Crash Timestamp\", AndroidUtils.getCurrentTimeStamp(), \"-\"));\n+        reportString.append(\"\\n\").append(MarkdownUtils.getSingleLineMarkdownStringEntry(\"Crash Timestamp\", AndroidUtils.getCurrentMilliSecondUTCTimeStamp(), \"-\"));\n         reportString.append(\"\\n\\n\").append(MarkdownUtils.getMultiLineMarkdownStringEntry(\"Crash Message\", throwable.getMessage(), \"-\"));\n         reportString.append(\"\\n\\n\").append(Logger.getStackTracesMarkdownString(\"Stacktrace\", Logger.getStackTracesStringArray(throwable)));\n \n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/models/ReportInfo.java b/termux-shared/src/main/java/com/termux/shared/models/ReportInfo.java\n--- a/termux-shared/src/main/java/com/termux/shared/models/ReportInfo.java\n+++ b/termux-shared/src/main/java/com/termux/shared/models/ReportInfo.java\n@@ -34,7 +34,7 @@ public ReportInfo(String userAction, String sender, String reportTitle, String r\n         this.reportString = reportString;\n         this.reportStringSuffix = reportStringSuffix;\n         this.addReportInfoToMarkdown = addReportInfoToMarkdown;\n-        this.reportTimestamp = AndroidUtils.getCurrentTimeStamp();\n+        this.reportTimestamp = AndroidUtils.getCurrentMilliSecondUTCTimeStamp();\n     }\n \n     /**\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/AndroidUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/AndroidUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/AndroidUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/AndroidUtils.java\n@@ -182,6 +182,13 @@ public static String getCurrentTimeStamp() {\n         return df.format(new Date());\n     }\n \n+    public static String getCurrentMilliSecondUTCTimeStamp() {\n+        @SuppressLint(\"SimpleDateFormat\")\n+        final SimpleDateFormat df = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n+        df.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+        return df.format(new Date());\n+    }\n+\n     public static String getCurrentMilliSecondLocalTimeStamp() {\n         @SuppressLint(\"SimpleDateFormat\")\n         final SimpleDateFormat df = new SimpleDateFormat(\"yyyy-MM-dd_HH.mm.ss.SSS\");",
    "output": "Use millisecond timestamps for reports"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/markdown/MarkdownUtils.java b/termux-shared/src/main/java/com/termux/shared/markdown/MarkdownUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/markdown/MarkdownUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/markdown/MarkdownUtils.java\n@@ -119,9 +119,9 @@ public static String getMultiLineMarkdownStringEntry(String label, Object object\n             return \"**\" + label + \"**: \" + def + \"\\n\";\n     }\n \n-    public static String getLinkMarkdownString(String label, Object object) {\n-        if (object != null)\n-            return \"[\" + label + \"](\" + object +  \")\";\n+    public static String getLinkMarkdownString(String label, String url) {\n+        if (url != null)\n+            return \"[\" + label.replaceAll(\"]\", \"\\\\\\\\]\") + \"](\" + url.replaceAll(\"\\\\)\", \"\\\\\\\\)\") +  \")\";\n         else\n             return label;\n     }",
    "output": "Fix markdown link generation"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxInstaller.java b/app/src/main/java/com/termux/app/TermuxInstaller.java\n--- a/app/src/main/java/com/termux/app/TermuxInstaller.java\n+++ b/app/src/main/java/com/termux/app/TermuxInstaller.java\n@@ -171,7 +171,8 @@ public void run() {\n                                         while ((readBytes = zipInput.read(buffer)) != -1)\n                                             outStream.write(buffer, 0, readBytes);\n                                     }\n-                                    if (zipEntryName.startsWith(\"bin/\") || zipEntryName.startsWith(\"libexec\") || zipEntryName.startsWith(\"lib/apt/methods\")) {\n+                                    if (zipEntryName.startsWith(\"bin/\") || zipEntryName.startsWith(\"libexec\") ||\n+                                        zipEntryName.startsWith(\"lib/apt/apt-helper\") || zipEntryName.startsWith(\"lib/apt/methods\")) {\n                                         //noinspection OctalInteger\n                                         Os.chmod(targetFile.getAbsolutePath(), 0700);\n                                     }",
    "output": "Fix permissions for lib/apt/apt-helper"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -419,6 +419,11 @@ public synchronized TermuxTask createTermuxTask(ExecutionCommand executionComman\n         TermuxTask newTermuxTask = TermuxTask.execute(this, executionCommand, this, false);\n         if (newTermuxTask == null) {\n             Logger.logError(LOG_TAG, \"Failed to execute new TermuxTask command for:\\n\" + executionCommand.getCommandIdAndLabelLogString());\n+            // If the execution command was started for a plugin, then process the error\n+            if (executionCommand.isPluginExecutionCommand)\n+                PluginUtils.processPluginExecutionCommandError(this, LOG_TAG, executionCommand, false);\n+            else\n+                Logger.logStackTracesWithMessage(LOG_TAG, \"(\" + executionCommand.errCode + \") \" + executionCommand.errmsg, executionCommand.throwableList);\n             return null;\n         }\n \n@@ -510,6 +515,11 @@ public synchronized TermuxSession createTermuxSession(ExecutionCommand execution\n         TermuxSession newTermuxSession = TermuxSession.execute(this, executionCommand, getTermuxTerminalSessionClient(), this, sessionName, executionCommand.isPluginExecutionCommand);\n         if (newTermuxSession == null) {\n             Logger.logError(LOG_TAG, \"Failed to execute new TermuxSession command for:\\n\" + executionCommand.getCommandIdAndLabelLogString());\n+            // If the execution command was started for a plugin, then process the error\n+            if (executionCommand.isPluginExecutionCommand)\n+                PluginUtils.processPluginExecutionCommandError(this, LOG_TAG, executionCommand, false);\n+            else\n+                Logger.logStackTracesWithMessage(LOG_TAG, \"(\" + executionCommand.errCode + \") \" + executionCommand.errmsg, executionCommand.throwableList);\n             return null;\n         }\n \n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/shell/TermuxTask.java b/termux-shared/src/main/java/com/termux/shared/shell/TermuxTask.java\n--- a/termux-shared/src/main/java/com/termux/shared/shell/TermuxTask.java\n+++ b/termux-shared/src/main/java/com/termux/shared/shell/TermuxTask.java\n@@ -70,8 +70,11 @@ public static TermuxTask execute(@NonNull final Context context, @NonNull Execut\n \n         final String[] commandArray = ShellUtils.setupProcessArgs(executionCommand.executable, executionCommand.arguments);\n \n-        if (!executionCommand.setState(ExecutionState.EXECUTING))\n+        if (!executionCommand.setState(ExecutionState.EXECUTING)) {\n+            executionCommand.setStateFailed(ExecutionCommand.RESULT_CODE_FAILED, context.getString(R.string.error_failed_to_execute_termux_task_command, executionCommand.getCommandIdAndLabelLogString()), null);\n+            TermuxTask.processTermuxTaskResult(null, executionCommand);\n             return null;\n+        }\n \n         Logger.logDebug(LOG_TAG, executionCommand.toString());\n ",
    "output": "Fix execution commands exceptions not being logged or sent back to plugins The f62febbf commit mentioned that it solved \"the bug where Termux:Tasker would hang indefinitely if Runtime.getRuntime().exec raised an exception, like for invalid or missing interpreter errors and Termux:Tasker wasn't notified of it. Now the errmsg will be used to send any exceptions back to Termux:Tasker and other 3rd party calls.\" This however was still broken due to local design changes made to TermuxTask after testing was already done. This commit should solve that problem. Moreover, now a notification will be shown if execution commands **fail to start** that are run by plugins that don't expect the result back, like with Termux:Widget or RUN_COMMAND intent. This should make it easier for users to debug problems, since otherwise logcat needs to be looked. But logcat would still need to be looked if commands/scripts fail after they have started due to internal errors. Notifications can be disabled from Termux Settings by disabling the \"Plugin Error Notifications\" toggle."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -8,6 +8,7 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Set;\n import java.util.concurrent.Executors;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.ScheduledExecutorService;\n@@ -150,7 +151,7 @@ void toggle(boolean value) {\n         put(SpecialButton.FN, new SpecialButtonState());\n     }};\n \n-    private final List<String> specialButtonsKeys = specialButtons.keySet().stream().map(Enum::name).collect(Collectors.toList());\n+    private final Set<String> specialButtonsKeys = specialButtons.keySet().stream().map(Enum::name).collect(Collectors.toSet());\n \n     private boolean isSpecialButton(ExtraKeyButton button) {\n         return specialButtonsKeys.contains(button.getKey());",
    "output": "Use Set instead of List for special buttons keys"
  },
  {
    "input": "diff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -1547,8 +1547,8 @@ private Properties getProperties() {\n         };\n \n         propsFile = new File(possiblePropLocations[0]);\n-        int i = 1;\n-        while (!propsFile.exists() && i <= possiblePropLocations.length) {\n+        int i = 0;\n+        while (!propsFile.exists() && i < possiblePropLocations.length) {\n             propsFile = new File(possiblePropLocations[i]);\n             i += 1;\n         }",
    "output": "Fix array indexing"
  },
  {
    "input": "diff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -539,6 +539,8 @@ public boolean onTouchEvent(MotionEvent ev) {\n \n     @Override\n     public boolean onKeyPreIme(int keyCode, KeyEvent event) {\n+        Properties props = getProperties();\n+\n         if (LOG_KEY_EVENTS)\n             Log.i(EmulatorDebug.LOG_TAG, \"onKeyPreIme(keyCode=\" + keyCode + \", event=\" + event + \")\");\n         if (keyCode == KeyEvent.KEYCODE_BACK) {\n@@ -554,6 +556,11 @@ public boolean onKeyPreIme(int keyCode, KeyEvent event) {\n                         return onKeyUp(keyCode, event);\n                 }\n             }\n+        } else if (props.getProperty(\"ctrl-space-workaround\", \"false\").equals(\"true\") &&\n+                   keyCode == KeyEvent.KEYCODE_SPACE && event.isCtrlPressed()) {\n+            /* ctrl + space does not work on some ROMs without this workaround.\n+               However, this breaks it on devices where it works out of the box. */\n+            return onKeyDown(keyCode, event);\n         }\n         return super.onKeyPreIme(keyCode, event);\n     }",
    "output": "Add \"ctrl-space-workaround\" property Makes it possible to run ctrl+space with hardware keyboards on devices/ROMs where it otherwise is broken. On devices where it already works this workaround breaks ctrl+space though. Where to add this fix was investigated and found by @5bodnar."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/BackgroundJob.java b/app/src/main/java/com/termux/app/BackgroundJob.java\n--- a/app/src/main/java/com/termux/app/BackgroundJob.java\n+++ b/app/src/main/java/com/termux/app/BackgroundJob.java\n@@ -161,7 +161,7 @@ static String[] buildEnvironment(boolean failSafe, String cwd) {\n             environment.add(\"PATH= \" + System.getenv(\"PATH\"));\n         } else {\n             environment.add(\"LANG=en_US.UTF-8\");\n-            environment.add(\"PATH=\" + TermuxService.PREFIX_PATH + \"/bin:\" + TermuxService.PREFIX_PATH + \"/bin/applets\");\n+            environment.add(\"PATH=\" + TermuxService.PREFIX_PATH + \"/bin\");\n             environment.add(\"PWD=\" + cwd);\n             environment.add(\"TMPDIR=\" + TermuxService.PREFIX_PATH + \"/tmp\");\n         }",
    "output": "Add $PREFIX/bin/applets to $PATH busybox doesn't use that folder anymore, and is deprecated anyway"
  },
  {
    "input": "diff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n@@ -748,7 +748,7 @@ public void processCodePoint(int b) {\n                                 value = (mScreen == mAltBuffer) ? 1 : 2;\n                             } else {\n                                 int internalBit = mapDecSetBitToInternalBit(mode);\n-                                if (internalBit == -1) {\n+                                if (internalBit != -1) {\n                                     value = isDecsetInternalBitSet(internalBit) ? 1 : 2; // 1=set, 2=reset.\n                                 } else {\n                                     Log.e(EmulatorDebug.LOG_TAG, \"Got DECRQM for unrecognized private DEC mode=\" + mode);",
    "output": "Fix bug in DECRQM handling"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -106,7 +106,7 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n         } else if (ACTION_LOCK_WAKE.equals(action)) {\n             if (mWakeLock == null) {\n                 PowerManager pm = (PowerManager) getSystemService(Context.POWER_SERVICE);\n-                mWakeLock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, EmulatorDebug.LOG_TAG);\n+                mWakeLock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, EmulatorDebug.LOG_TAG + \":service-wakelock\");\n                 mWakeLock.acquire();\n \n                 // http://tools.android.com/tech-docs/lint-in-studio-2-3#TOC-WifiManager-Leak",
    "output": "Fix wakelock log tag"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -243,7 +243,7 @@ public void onDestroy() {\n             try {\n                 TermuxInstaller.deleteFolder(termuxTmpDir.getCanonicalFile());\n             } catch (Exception e) {\n-                Log.e(EmulatorDebug.LOG_TAG, \"Error while removing directory \" + termuxTmpDir.getAbsolutePath(), e);\n+                Log.e(EmulatorDebug.LOG_TAG, \"Error while removing file at \" + termuxTmpDir.getAbsolutePath(), e);\n             }\n \n             termuxTmpDir.mkdirs();",
    "output": "Fix for log message while removing tmpdir"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxPreferences.java b/app/src/main/java/com/termux/app/TermuxPreferences.java\n--- a/app/src/main/java/com/termux/app/TermuxPreferences.java\n+++ b/app/src/main/java/com/termux/app/TermuxPreferences.java\n@@ -157,7 +157,7 @@ void reloadFromProperties(Context context) {\n                 }\n             }\n         } catch (IOException e) {\n-            Toast.makeText(context, \"Could not open the propertiey file termux.properties.\", Toast.LENGTH_LONG).show();\n+            Toast.makeText(context, \"Could not open properties file termux.properties.\", Toast.LENGTH_LONG).show();\n             Log.e(\"termux\", \"Error loading props\", e);\n         }\n ",
    "output": "Fix a typo in TermuxPreferences"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxPreferences.java b/app/src/main/java/com/termux/app/TermuxPreferences.java\n--- a/app/src/main/java/com/termux/app/TermuxPreferences.java\n+++ b/app/src/main/java/com/termux/app/TermuxPreferences.java\n@@ -141,7 +141,7 @@ public void reloadFromProperties(Context context) {\n                     break;\n             }\n             \n-            JSONArray arr = new JSONArray(props.getProperty(\"extra-keys\", \"[[\\\"ESC\\\",\\\"CTRL\\\",\\\"ALT\\\",\\\"TAB\\\",\\\"-\\\",\\\"/\\\",\\\"|\\\"]]\"));\n+            JSONArray arr = new JSONArray(props.getProperty(\"extra-keys\", \"[['ESC','CTRL','ALT','TAB','-','/','|']]\"));\n             mExtraKeys = new String[arr.length()][];\n             for(int i = 0; i < arr.length(); i++) {\n                 JSONArray line = arr.getJSONArray(i);",
    "output": "Use ' instead of \\\" in default key string"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -296,7 +296,7 @@ public void run() {\n                 LayoutParams param = new GridLayout.LayoutParams();\n                 param.width = 0;\n                 if(Build.VERSION.SDK_INT == Build.VERSION_CODES.LOLLIPOP){  //special handle api 21\n-                    param.height = (int)(37.5 * getResources().getDisplayMetrics().density + 0.5); // 37.5 equal to R.id.viewpager layout_heihgt / rows in DP\n+                    param.height = (int)(37.5 * getResources().getDisplayMetrics().density + 0.5); // 37.5 equal to R.id.viewpager layout_height / rows in DP\n                 }else{\n                     param.height = 0;\n                 }",
    "output": "Fix typo"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -255,7 +255,7 @@ public void run() {\n                                 }\n                                 return true;\n                             case MotionEvent.ACTION_MOVE:\n-                                if (\"―/\".contains(buttonText)) {\n+                                if (\"―/-\".contains(buttonText)) {\n                                     if (popupWindow == null && event.getY() < 0) {\n                                         v.setBackgroundColor(BUTTON_COLOR);\n                                         String text = \"―\".equals(buttonText) ? \"|\" : \"\\\\\";\n@@ -276,7 +276,7 @@ public void run() {\n                                     scheduledExecutor = null;\n                                 }\n                                 if (longPressCount == 0) {\n-                                    if (popupWindow != null && \"―/\".contains(buttonText)) {\n+                                    if (popupWindow != null && \"―/-\".contains(buttonText)) {\n                                         popupWindow.setContentView(null);\n                                         popupWindow.dismiss();\n                                         popupWindow = null;",
    "output": "Make ― the same as - in some more places"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -174,15 +174,15 @@ void reload(final String[][] buttons) {\n         altButton = controlButton = fnButton = null;\n         removeAllViews();\n \n+        final int rows = buttons.length;\n         int mx = 0;\n         for (int row = 0; row < rows; row++) {\n             if(buttons[row].length > mx) mx = buttons[row].length;\n         }\n-        final int rows = buttons.length;\n         final int cols = mx;\n \n         setRowCount(rows);\n-        setColumnCount(cols[0]);\n+        setColumnCount(cols);\n \n         for (int row = 0; row < rows; row++) {\n             for (int col = 0; col < cols; col++) {",
    "output": "Fix rebase error"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -101,36 +101,48 @@ static void sendKey(View view, String keyName) {\n     private ToggleButton controlButton;\n     private ToggleButton altButton;\n     private ToggleButton fnButton;\n+    private boolean hasControlButton = false;\n+    private boolean hasAltButton = false;\n+    private boolean hasFnButton = false;\n     private ScheduledExecutorService scheduledExecutor;\n     private PopupWindow popupWindow;\n     private int longPressCount;\n \n     public boolean readControlButton() {\n-        if (controlButton.isPressed()) return true;\n-        boolean result = controlButton.isChecked();\n-        if (result) {\n-            controlButton.setChecked(false);\n-            controlButton.setTextColor(TEXT_COLOR);\n+        boolean result = false;\n+        if (hasControlButton) {\n+            if (controlButton.isPressed()) return true;\n+            result = controlButton.isChecked();\n+            if (result) {\n+                controlButton.setChecked(false);\n+                controlButton.setTextColor(TEXT_COLOR);\n+            }\n         }\n         return result;\n     }\n \n     public boolean readAltButton() {\n-        if (altButton.isPressed()) return true;\n-        boolean result = altButton.isChecked();\n-        if (result) {\n-            altButton.setChecked(false);\n-            altButton.setTextColor(TEXT_COLOR);\n+        boolean result = false;\n+        if (hasAltButton) {\n+            if (altButton.isPressed()) return true;\n+            result = altButton.isChecked();\n+            if (result) {\n+                altButton.setChecked(false);\n+                altButton.setTextColor(TEXT_COLOR);\n+            }\n         }\n         return result;\n     }\n \n     public boolean readFnButton() {\n-        if (fnButton.isPressed()) return true;\n-        boolean result = fnButton.isChecked();\n-        if (result) {\n-            fnButton.setChecked(false);\n-            fnButton.setTextColor(TEXT_COLOR);\n+        boolean result = false;\n+        if (hasFnButton) {\n+            if (fnButton.isPressed()) return true;\n+            result = fnButton.isChecked();\n+            if (result) {\n+                fnButton.setChecked(false);\n+                fnButton.setTextColor(TEXT_COLOR);\n+            }\n         }\n         return result;\n     }\n@@ -159,7 +171,7 @@ void popup(View view, String text) {\n     }\n \n     void reload(final String[][] buttons) {\n-        altButton = controlButton = null;\n+        altButton = controlButton = fnButton = null;\n         removeAllViews();\n \n         int mx = 0;\n@@ -179,14 +191,17 @@ void reload(final String[][] buttons) {\n                 Button button;\n                 switch (buttonText) {\n                     case \"CTRL\":\n+                        hasControlButton = true;\n                         button = controlButton = new ToggleButton(getContext(), null, android.R.attr.buttonBarButtonStyle);\n                         button.setClickable(true);\n                         break;\n                     case \"ALT\":\n+                        hasAltButton = true;\n                         button = altButton = new ToggleButton(getContext(), null, android.R.attr.buttonBarButtonStyle);\n                         button.setClickable(true);\n                         break;\n                     case \"FN\":\n+                        hasFnButton = true;\n                         button = fnButton = new ToggleButton(getContext(), null, android.R.attr.buttonBarButtonStyle);\n                         button.setClickable(true);\n                         break;",
    "output": "Fix so app doesn't crash if ctrl/alt aren't in extrakeys"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -57,6 +57,12 @@ static void sendKey(View view, String keyName) {\n             case \"PGDN\":\n                 keyCode = KeyEvent.KEYCODE_PAGE_DOWN;\n                 break;\n+            case \"INS\":\n+                keyCode = KeyEvent.KEYCODE_INSERT;\n+                break;\n+            case \"DEL\":\n+                keyCode = KeyEvent.KEYCODE_FORWARD_DEL;\n+                break;\n             case \"↑\":\n                 keyCode = KeyEvent.KEYCODE_DPAD_UP;\n                 break;\n@@ -69,9 +75,15 @@ static void sendKey(View view, String keyName) {\n             case \"↓\":\n                 keyCode = KeyEvent.KEYCODE_DPAD_DOWN;\n                 break;\n+            case \"↲\":\n+                keyCode = KeyEvent.KEYCODE_ENTER;\n+                break;\n             case \"―\":\n                 chars = \"-\";\n                 break;\n+            case \"-\":\n+                chars = \"-\";\n+                break;\n             default:\n                 chars = keyName;\n         }",
    "output": "Add possibility for insert, delete, enter and -"
  },
  {
    "input": "diff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -761,6 +761,7 @@ protected void onDraw(Canvas canvas) {\n         if (mEmulator == null) {\n             canvas.drawColor(0XFF000000);\n         } else {\n+            setContentDescription(getText());\n             mRenderer.render(mEmulator, canvas, mTopRow, mSelY1, mSelY2, mSelX1, mSelX2);\n \n             if (mIsSelectingText) {\n@@ -915,4 +916,8 @@ public TerminalSession getCurrentSession() {\n         return mTermSession;\n     }\n \n+    private CharSequence getText() {\n+        return mEmulator.getScreen().getSelectedText(0, mTopRow, mEmulator.mColumns, mTopRow +mEmulator.mRows);\n+    }\n+\n }",
    "output": "Add contentDescription to the view so accessibility"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/view/TerminalView.java b/app/src/main/java/com/termux/view/TerminalView.java\n--- a/app/src/main/java/com/termux/view/TerminalView.java\n+++ b/app/src/main/java/com/termux/view/TerminalView.java\n@@ -717,10 +717,10 @@ public void checkForTypeface() {\n \t\t\t@Override\n \t\t\tpublic void run() {\n \t\t\t\ttry {\n-\t\t\t\t\tFile fontFile = new File(getContext().getFilesDir().getPath() + \"/home/.termux/font.ttf\");\n+\t\t\t\t\tFile fontFile = new File(\"/data/data/com.termux/files/home/.termux/font.ttf\");\n \t\t\t\t\tfinal Typeface newTypeface = fontFile.exists() ? Typeface.createFromFile(fontFile) : Typeface.MONOSPACE;\n \t\t\t\t\tif (newTypeface != mRenderer.mTypeface) {\n-\t\t\t\t\t\t((Activity) getContext()).runOnUiThread(new Runnable() {\n+\t\t\t\t\t\tpost(new Runnable() {\n \t\t\t\t\t\t\t@Override\n \t\t\t\t\t\t\tpublic void run() {\n \t\t\t\t\t\t\t\ttry {\n@@ -745,14 +745,14 @@ public void checkForColors() {\n \t\t\t@Override\n \t\t\tpublic void run() {\n \t\t\t\ttry {\n-\t\t\t\t\tFile colorsFile = new File(getContext().getFilesDir().getPath() + \"/home/.termux/colors.properties\");\n+\t\t\t\t\tFile colorsFile = new File(\"/data/data/com.termux/files/home/.termux/colors.properties\");\n \t\t\t\t\tfinal Properties props = colorsFile.isFile() ? new Properties() : null;\n \t\t\t\t\tif (props != null) {\n \t\t\t\t\t\ttry (InputStream in = new FileInputStream(colorsFile)) {\n \t\t\t\t\t\t\tprops.load(in);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\t\t((Activity) getContext()).runOnUiThread(new Runnable() {\n+\t\t\t\t\tpost(new Runnable() {\n \t\t\t\t\t\t@Override\n \t\t\t\t\t\tpublic void run() {\n \t\t\t\t\t\t\ttry {",
    "output": "Make theming work for non-activities"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -580,12 +580,11 @@ public boolean onCreateOptionsMenu(Menu menu) {\n \t\treturn false;\n \t}\n \n-\tvoid showUrlSelection() {\n-\t\tString text = getCurrentTermSession().getEmulator().getScreen().getTranscriptText();\n+\tstatic LinkedHashSet<CharSequence> extractUrls(String text) {\n \t\t// Pattern for recognizing a URL, based off RFC 3986\n \t\t// http://stackoverflow.com/questions/5713558/detect-and-extract-url-from-a-string\n \t\tfinal Pattern urlPattern = Pattern.compile(\n-\t\t\t\t\"(?:^|[\\\\W])((ht|f)tp(s?):\\\\/\\\\/|www\\\\.)\" + \"(([\\\\w\\\\-]+\\\\.){1,}?([\\\\w\\\\-.~]+\\\\/?)*\" + \"[\\\\p{Alnum}.,%_=?&#\\\\-+()\\\\[\\\\]\\\\*$~@!:/{};']*)\",\n+\t\t\t\t\"(?:^|[\\\\W])((ht|f)tp(s?)://|www\\\\.)\" + \"(([\\\\w\\\\-]+\\\\.)+?([\\\\w\\\\-.~]+/?)*\" + \"[\\\\p{Alnum}.,%_=?&#\\\\-+()\\\\[\\\\]\\\\*$~@!:/{};']*)\",\n \t\t\t\tPattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL);\n \t\tLinkedHashSet<CharSequence> urlSet = new LinkedHashSet<>();\n \t\tMatcher matcher = urlPattern.matcher(text);\n@@ -595,7 +594,12 @@ void showUrlSelection() {\n \t\t\tString url = text.substring(matchStart, matchEnd);\n \t\t\turlSet.add(url);\n \t\t}\n+\t\treturn urlSet;\n+\t}\n \n+\tvoid showUrlSelection() {\n+\t\tString text = getCurrentTermSession().getEmulator().getScreen().getTranscriptText();\n+\t\tLinkedHashSet<CharSequence> urlSet = extractUrls(text);\n \t\tif (urlSet.isEmpty()) {\n \t\t\tnew AlertDialog.Builder(this).setMessage(R.string.select_url_no_found).show();\n \t\t\treturn;\n\ndiff --git a/app/src/test/java/com/termux/app/TermuxActivityTest.java b/app/src/test/java/com/termux/app/TermuxActivityTest.java\n--- a/app/src/test/java/com/termux/app/TermuxActivityTest.java\n+++ b/app/src/test/java/com/termux/app/TermuxActivityTest.java\n@@ -0,0 +1,24 @@\n+package com.termux.app;\n+\n+import junit.framework.TestCase;\n+\n+import java.util.LinkedHashSet;\n+\n+public class TermuxActivityTest extends TestCase {\n+\n+    private void assertUrlsAre(String text, String... urls) {\n+        LinkedHashSet<String> expected = new LinkedHashSet<>();\n+        for (String url : urls) expected.add(url);\n+        assertEquals(expected, TermuxActivity.extractUrls(text));\n+    }\n+\n+    public void testExtractUrls() {\n+        assertUrlsAre(\"hello http://example.com world\", \"http://example.com\");\n+\n+        assertUrlsAre(\"http://example.com\\nhttp://another.com\", \"http://example.com\", \"http://another.com\");\n+\n+        assertUrlsAre(\"hello http://example.com world and http://more.example.com with secure https://more.example.com\",\n+                \"http://example.com\", \"http://more.example.com\", \"https://more.example.com\");\n+    }\n+\n+}",
    "output": "Remove redundant escapes and add test"
  }
]