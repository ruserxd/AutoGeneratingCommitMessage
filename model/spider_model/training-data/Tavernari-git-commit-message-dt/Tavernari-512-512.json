[
  {
    "input": "diff --git a/src/main/java/com/thealgorithms/maths/Armstrong.java b/src/main/java/com/thealgorithms/maths/Armstrong.java\nindex ff4ae027a0b7..9a7a014ec99f 100644\n--- a/src/main/java/com/thealgorithms/maths/Armstrong.java\n+++ b/src/main/java/com/thealgorithms/maths/Armstrong.java\n@@ -10,6 +10,7 @@\n  * An Armstrong number is often called a Narcissistic number.\n  *\n  * @author satyabarghav\n+ * @modifier rahul katteda - (13/01/2025) - [updated the logic for getting total number of digits]\n  */\n public class Armstrong {\n \n@@ -20,14 +21,16 @@ public class Armstrong {\n      * @return {@code true} if the given number is an Armstrong number, {@code false} otherwise\n      */\n     public boolean isArmstrong(int number) {\n+        if (number < 0) {\n+            return false; // Negative numbers cannot be Armstrong numbers\n+        }\n         long sum = 0;\n-        String temp = Integer.toString(number); // Convert the given number to a string\n-        int power = temp.length(); // Extract the length of the number (number of digits)\n+        int totalDigits = (int) Math.log10(number) + 1; // get the length of the number (number of digits)\n         long originalNumber = number;\n \n         while (originalNumber > 0) {\n             long digit = originalNumber % 10;\n-            sum += (long) Math.pow(digit, power); // The digit raised to the power of the number of digits and added to the sum.\n+            sum += (long) Math.pow(digit, totalDigits); // The digit raised to the power of total number of digits and added to the sum.\n             originalNumber /= 10;\n         }",
    "output": "Enhance `isArmstrong` method in `Armstrong` class\n- Introduced a check for negative numbers, ensuring they are correctly handled.\n- Revised the calculation of the total number of digits for clarity and efficiency, using logarithm instead of string conversion.\n- Improved variable naming for better understanding of the code logic."
  },
  {
    "input": "diff --git a/src/main/java/com/thealgorithms/backtracking/ArrayCombination.java b/src/main/java/com/thealgorithms/backtracking/ArrayCombination.java\nindex 6569896bd1b7..f8cd0c40c20e 100644\n--- a/src/main/java/com/thealgorithms/backtracking/ArrayCombination.java\n+++ b/src/main/java/com/thealgorithms/backtracking/ArrayCombination.java\n@@ -48,7 +48,7 @@ private static void combine(List<List<Integer>> combinations, List<Integer> curr\n         for (int i = start; i < n; i++) {\n             current.add(i);\n             combine(combinations, current, i + 1, n, k);\n-            current.removeLast(); // Backtrack\n+            current.remove(current.size() - 1); // Backtrack\n         }\n     }\n }",
    "output": "Update backtracking element removal method\n- Replaced `current.removeLast()` with `current.remove(current.size() - 1)` to clarify the backtracking operation in the combination generation process.\n- Ensured that the removal operation is consistent with typical Java List operations, enhancing code readability."
  },
  {
    "input": "diff --git a/src/main/java/com/thealgorithms/strings/Upper.java b/src/main/java/com/thealgorithms/strings/Upper.java\nindex fa9a408416ea..5e248cb6ee39 100644\n--- a/src/main/java/com/thealgorithms/strings/Upper.java\n+++ b/src/main/java/com/thealgorithms/strings/Upper.java\n@@ -21,15 +21,19 @@ public static void main(String[] args) {\n      * @return the {@code String}, converted to uppercase.\n      */\n     public static String toUpperCase(String s) {\n-        if (s == null || s.isEmpty()) {\n+        if (s == null) {\n+            throw new IllegalArgumentException(\"Input string connot be null\");\n+        }\n+        if (s.isEmpty()) {\n             return s;\n         }\n-        char[] values = s.toCharArray();\n-        for (int i = 0; i < values.length; ++i) {\n-            if (Character.isLetter(values[i]) && Character.isLowerCase(values[i])) {\n-                values[i] = Character.toUpperCase(values[i]);\n+        StringBuilder result = new StringBuilder(s);\n+        for (int i = 0; i < result.length(); ++i) {\n+            char currentChar = result.charAt(i);\n+            if (Character.isLetter(currentChar) && Character.isLowerCase(currentChar)) {\n+                result.setCharAt(i, Character.toUpperCase(currentChar));\n             }\n         }\n-        return new String(values);\n+        return result.toString();\n     }\n }",
    "output": "Enhance `toUpperCase` method with better error handling\n- Added a null check that throws an `IllegalArgumentException` if the input string is null, improving reliability.\n- Changed how the method processes the string by using `StringBuilder`, optimizing performance during character manipulation.\n- Retained functionality for empty strings, returning them directly without converting."
  }
]