[
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java\n@@ -260,6 +260,7 @@ public String toString() {\n \t\t\t\tbuilder.append(\" urls=\").append(this.urlPatterns);\n \t\t\t}\n \t\t}\n+\t\tbuilder.append(\" order=\").append(getOrder());\n \t\treturn builder.toString();\n \t}\n ",
    "output": "Make it easier to determine each servlet filter's order"
  },
  {
    "input": "diff --git a/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-data-couchbase/src/main/java/smoketest/data/couchbase/User.java b/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-data-couchbase/src/main/java/smoketest/data/couchbase/User.java\n--- a/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-data-couchbase/src/main/java/smoketest/data/couchbase/User.java\n+++ b/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-data-couchbase/src/main/java/smoketest/data/couchbase/User.java\n@@ -59,8 +59,8 @@ public void setLastName(String lastName) {\n \n \t@Override\n \tpublic String toString() {\n-\t\treturn \"User{id='\" + this.id + '\\'' + \", firstName='\" + this.firstName + '\\'' + \", lastName='\"\n-\t\t\t\t+ this.lastName + '\\'' + '}';\n+\t\treturn \"User{id='\" + this.id + '\\'' + \", firstName='\" + this.firstName + '\\'' + \", lastName='\" + this.lastName\n+\t\t\t\t+ '\\'' + '}';\n \t}\n \n }",
    "output": "Fix formatting in Couchbase smoke tests"
  },
  {
    "input": "diff --git a/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-data-couchbase/src/main/java/smoketest/data/couchbase/User.java b/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-data-couchbase/src/main/java/smoketest/data/couchbase/User.java\n--- a/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-data-couchbase/src/main/java/smoketest/data/couchbase/User.java\n+++ b/spring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-data-couchbase/src/main/java/smoketest/data/couchbase/User.java\n@@ -59,8 +59,8 @@ public void setLastName(String lastName) {\n \n \t@Override\n \tpublic String toString() {\n-\t\treturn \"User{id='\" + this.id + '\\'' + \", firstName='\" + this.firstName + '\\'' + \", lastName='\"\n-\t\t\t\t+ this.lastName + '\\'' + '}';\n+\t\treturn \"User{id='\" + this.id + '\\'' + \", firstName='\" + this.firstName + '\\'' + \", lastName='\" + this.lastName\n+\t\t\t\t+ '\\'' + '}';\n \t}\n \n }",
    "output": "Fix formatting in Couchbase smoke tests"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n@@ -39,7 +39,7 @@\n public final class GradleCompatibilitySuite extends Suite {\n \n \tprivate static final List<String> GRADLE_VERSIONS = Arrays.asList(\"default\", \"4.5.1\", \"4.6\", \"4.7\", \"4.8.1\", \"4.9\",\n-\t\t\t\"4.10.3\", \"5.0\", \"5.1.1\", \"5.2.1\", \"5.3.1\", \"5.4.1\", \"5.5\");\n+\t\t\t\"4.10.3\", \"5.0\", \"5.1.1\", \"5.2.1\", \"5.3.1\", \"5.4.1\", \"5.5.1\");\n \n \tpublic GradleCompatibilitySuite(Class<?> clazz) throws InitializationError {\n \t\tsuper(clazz, createRunners(clazz));",
    "output": "Test the Gradle Plugin against Gradle 5.5.1"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n@@ -39,7 +39,7 @@\n public final class GradleCompatibilitySuite extends Suite {\n \n \tprivate static final List<String> GRADLE_VERSIONS = Arrays.asList(\"default\", \"4.5.1\", \"4.6\", \"4.7\", \"4.8.1\", \"4.9\",\n-\t\t\t\"4.10.3\", \"5.0\", \"5.1.1\", \"5.2.1\", \"5.3.1\", \"5.4.1\", \"5.5\");\n+\t\t\t\"4.10.3\", \"5.0\", \"5.1.1\", \"5.2.1\", \"5.3.1\", \"5.4.1\", \"5.5.1\");\n \n \tpublic GradleCompatibilitySuite(Class<?> clazz) throws InitializationError {\n \t\tsuper(clazz, createRunners(clazz));",
    "output": "Test the Gradle Plugin against Gradle 5.5.1"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\n@@ -69,7 +69,7 @@ static class WebFluxServerAutoConfiguration {\n \t\tRSocketWebSocketNettyRouteProvider rSocketWebsocketRouteProvider(RSocketProperties properties,\n \t\t\t\tRSocketMessageHandler messageHandler) {\n \t\t\treturn new RSocketWebSocketNettyRouteProvider(properties.getServer().getMappingPath(),\n-\t\t\t\t\tmessageHandler.serverAcceptor());\n+\t\t\t\t\tmessageHandler.serverResponder());\n \t\t}\n \n \t}\n@@ -101,7 +101,7 @@ RSocketServerFactory rSocketServerFactory(RSocketProperties properties, ReactorR\n \t\t@ConditionalOnMissingBean\n \t\tRSocketServerBootstrap rSocketServerBootstrap(RSocketServerFactory rSocketServerFactory,\n \t\t\t\tRSocketMessageHandler rSocketMessageHandler) {\n-\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.serverAcceptor());\n+\t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.serverResponder());\n \t\t}\n \n \t}",
    "output": "Fix upstream RSocket method renames\nAlign with the recent upstream Spring Framework changes triggered by\ntheir issue #23170."
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-test-support/src/main/java/org/springframework/boot/testsupport/context/package-info.java b/spring-boot-project/spring-boot-tools/spring-boot-test-support/src/main/java/org/springframework/boot/testsupport/context/package-info.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-test-support/src/main/java/org/springframework/boot/testsupport/context/package-info.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-test-support/src/main/java/org/springframework/boot/testsupport/context/package-info.java\n@@ -1,20 +0,0 @@\n-/*\n- * Copyright 2012-2017 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-/**\n- * Utilities to help test Spring contexts.\n- */\n-package org.springframework.boot.testsupport.context;",
    "output": "Remove folder that only contains package-info"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-test-support/src/main/java/org/springframework/boot/testsupport/context/package-info.java b/spring-boot-project/spring-boot-tools/spring-boot-test-support/src/main/java/org/springframework/boot/testsupport/context/package-info.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-test-support/src/main/java/org/springframework/boot/testsupport/context/package-info.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-test-support/src/main/java/org/springframework/boot/testsupport/context/package-info.java\n@@ -1,20 +0,0 @@\n-/*\n- * Copyright 2012-2017 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-/**\n- * Utilities to help test Spring contexts.\n- */\n-package org.springframework.boot.testsupport.context;",
    "output": "Remove folder that only contains package-info"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/java/JavaLoggingSystem.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/java/JavaLoggingSystem.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/java/JavaLoggingSystem.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/java/JavaLoggingSystem.java\n@@ -21,6 +21,7 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.Enumeration;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n import java.util.logging.Level;\n@@ -51,6 +52,8 @@ public class JavaLoggingSystem extends AbstractLoggingSystem {\n \n \tprivate static final LogLevels<Level> LEVELS = new LogLevels<>();\n \n+\tprivate final Set<Logger> configuredLoggers = Collections.synchronizedSet(new HashSet<>());\n+\n \tstatic {\n \t\tLEVELS.map(LogLevel.TRACE, Level.FINEST);\n \t\tLEVELS.map(LogLevel.DEBUG, Level.FINE);\n@@ -119,6 +122,7 @@ public void setLogLevel(String loggerName, LogLevel level) {\n \t\t}\n \t\tLogger logger = Logger.getLogger(loggerName);\n \t\tif (logger != null) {\n+\t\t\tthis.configuredLoggers.add(logger);\n \t\t\tlogger.setLevel(LEVELS.convertSystemToNative(level));\n \t\t}\n \t}\n@@ -159,6 +163,11 @@ public Runnable getShutdownHandler() {\n \t\treturn new ShutdownHandler();\n \t}\n \n+\t@Override\n+\tpublic void cleanUp() {\n+\t\tthis.configuredLoggers.clear();\n+\t}\n+\n \tprivate final class ShutdownHandler implements Runnable {\n \n \t\t@Override",
    "output": "Prevent JUL loggers from being GCed once their level has been set"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jPropertiesTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jPropertiesTests.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jPropertiesTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jPropertiesTests.java\n@@ -16,7 +16,8 @@\n \n package org.springframework.boot.autoconfigure.data.neo4j;\n \n-import com.hazelcast.util.Base64;\n+import java.util.Base64;\n+\n import org.junit.After;\n import org.junit.Test;\n import org.neo4j.ogm.config.AutoIndexMode;\n@@ -149,10 +150,8 @@ private static void assertCredentials(Configuration actual, String username, Str\n \t\t\tassertThat(credentials).isNotNull();\n \t\t\tObject content = credentials.credentials();\n \t\t\tassertThat(content).isInstanceOf(String.class);\n-\t\t\tString[] auth = new String(Base64.decode(((String) content).getBytes())).split(\":\");\n-\t\t\tassertThat(auth[0]).isEqualTo(username);\n-\t\t\tassertThat(auth[1]).isEqualTo(password);\n-\t\t\tassertThat(auth).hasSize(2);\n+\t\t\tString[] auth = new String(Base64.getDecoder().decode((String) content)).split(\":\");\n+\t\t\tassertThat(auth).containsExactly(username, password);\n \t\t}\n \t}\n ",
    "output": "Remove accidental usage of com.hazelcast.util.Base64"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java\n@@ -102,23 +102,12 @@ static class PooledDataSourceAvailableCondition extends SpringBootCondition {\n \t\t@Override\n \t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context, AnnotatedTypeMetadata metadata) {\n \t\t\tConditionMessage.Builder message = ConditionMessage.forCondition(\"PooledDataSource\");\n-\t\t\tif (getDataSourceClassLoader(context) != null) {\n+\t\t\tif (DataSourceBuilder.findType(context.getClassLoader()) != null) {\n \t\t\t\treturn ConditionOutcome.match(message.foundExactly(\"supported DataSource\"));\n \t\t\t}\n \t\t\treturn ConditionOutcome.noMatch(message.didNotFind(\"supported DataSource\").atAll());\n \t\t}\n \n-\t\t/**\n-\t\t * Returns the class loader for the {@link DataSource} class. Used to ensure that\n-\t\t * the driver class can actually be loaded by the data source.\n-\t\t * @param context the condition context\n-\t\t * @return the class loader\n-\t\t */\n-\t\tprivate ClassLoader getDataSourceClassLoader(ConditionContext context) {\n-\t\t\tClass<?> dataSourceClass = DataSourceBuilder.findType(context.getClassLoader());\n-\t\t\treturn (dataSourceClass != null) ? dataSourceClass.getClassLoader() : null;\n-\t\t}\n-\n \t}\n \n \t/**",
    "output": "Simplify class loading check in pooled DataSource condition"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilityExtension.java b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilityExtension.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilityExtension.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilityExtension.java\n@@ -20,6 +20,7 @@\n import java.util.List;\n import java.util.stream.Stream;\n \n+import org.junit.jupiter.api.TestTemplate;\n import org.junit.jupiter.api.extension.Extension;\n import org.junit.jupiter.api.extension.ExtensionContext;\n import org.junit.jupiter.api.extension.TestTemplateInvocationContext;\n@@ -30,7 +31,7 @@\n \n /**\n  * {@link Extension} that runs {@link TestTemplate templated tests} against multiple\n- * versions of Gradle. Test classes using the extension must have non-private and\n+ * versions of Gradle. Test classes using the extension must have a non-private and\n  * non-final {@link GradleBuild} field named {@code gradleBuild}.\n  *\n  * @author Andy Wilkinson",
    "output": "Polish GradleCompatibilityExtension's javadoc\nPolish GradleCompatibilityExtension's javadoc"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilityExtension.java b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilityExtension.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilityExtension.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilityExtension.java\n@@ -20,6 +20,7 @@\n import java.util.List;\n import java.util.stream.Stream;\n \n+import org.junit.jupiter.api.TestTemplate;\n import org.junit.jupiter.api.extension.Extension;\n import org.junit.jupiter.api.extension.ExtensionContext;\n import org.junit.jupiter.api.extension.TestTemplateInvocationContext;\n@@ -29,9 +30,9 @@\n import org.springframework.boot.gradle.testkit.GradleBuildExtension;\n \n /**\n- * {@link Extension} that runs {@link org.junit.jupiter.api.TestTemplate templated tests}\n- * against multiple versions of Gradle. Test classes using the extension must have a\n- * non-private and non-final {@link GradleBuild} field named {@code gradleBuild}.\n+ * {@link Extension} that runs {@link TestTemplate templated tests} against multiple\n+ * versions of Gradle. Test classes using the extension must have a non-private and\n+ * non-final {@link GradleBuild} field named {@code gradleBuild}.\n  *\n  * @author Andy Wilkinson\n  */",
    "output": "Polish GradleCompatibilityExtension's javadoc"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n@@ -39,7 +39,7 @@\n public final class GradleCompatibilitySuite extends Suite {\n \n \tprivate static final List<String> GRADLE_VERSIONS = Arrays.asList(\"default\", \"4.5.1\", \"4.6\", \"4.7\", \"4.8.1\", \"4.9\",\n-\t\t\t\"4.10.3\", \"5.0\", \"5.1.1\", \"5.2.1\", \"5.3.1\", \"5.4.1\");\n+\t\t\t\"4.10.3\", \"5.0\", \"5.1.1\", \"5.2.1\", \"5.3.1\", \"5.4.1\", \"5.5\");\n \n \tpublic GradleCompatibilitySuite(Class<?> clazz) throws InitializationError {\n \t\tsuper(clazz, createRunners(clazz));",
    "output": "Test the Gradle Plugin against Gradle 5.5"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/StringToEnumIgnoringCaseConverterFactory.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/StringToEnumIgnoringCaseConverterFactory.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/StringToEnumIgnoringCaseConverterFactory.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/convert/StringToEnumIgnoringCaseConverterFactory.java\n@@ -76,8 +76,8 @@ private T findEnum(String source) {\n \n \t\tprivate String getLettersAndDigits(String name) {\n \t\t\tStringBuilder canonicalName = new StringBuilder(name.length());\n-\t\t\tname.chars().map((c) -> (char) c).filter(Character::isLetterOrDigit).map(Character::toLowerCase)\n-\t\t\t\t\t.forEach(canonicalName::append);\n+\t\t\tname.chars().filter(Character::isLetterOrDigit).map(Character::toLowerCase)\n+\t\t\t\t\t.forEach((c) -> canonicalName.append((char) c));\n \t\t\treturn canonicalName.toString();\n \t\t}\n ",
    "output": "Append chars not ints in getLettersAndDigits\nUpdate `StringToEnumIgnoringCaseConverterFactory` so that the\n`getLettersAndDigits` method correctly appends `char` elements\nrather than `int` elements."
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/JavaBeanBinder.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/JavaBeanBinder.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/JavaBeanBinder.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/JavaBeanBinder.java\n@@ -45,7 +45,7 @@ class JavaBeanBinder implements DataObjectBinder {\n \t@Override\n \tpublic <T> T bind(ConfigurationPropertyName name, Bindable<T> target, Context context,\n \t\t\tDataObjectPropertyBinder propertyBinder) {\n-\t\tboolean hasKnownBindableProperties = hasKnownBindableProperties(name, context);\n+\t\tboolean hasKnownBindableProperties = target.getValue() != null && hasKnownBindableProperties(name, context);\n \t\tBean<T> bean = Bean.get(target, hasKnownBindableProperties);\n \t\tif (bean == null) {\n \t\t\treturn null;",
    "output": "Avoid bindable properties check when target has null value"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/JavaBeanBinder.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/JavaBeanBinder.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/JavaBeanBinder.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/JavaBeanBinder.java\n@@ -45,7 +45,7 @@ class JavaBeanBinder implements DataObjectBinder {\n \t@Override\n \tpublic <T> T bind(ConfigurationPropertyName name, Bindable<T> target, Context context,\n \t\t\tDataObjectPropertyBinder propertyBinder) {\n-\t\tboolean hasKnownBindableProperties = hasKnownBindableProperties(name, context);\n+\t\tboolean hasKnownBindableProperties = target.getValue() != null && hasKnownBindableProperties(name, context);\n \t\tBean<T> bean = Bean.get(target, hasKnownBindableProperties);\n \t\tif (bean == null) {\n \t\t\treturn null;",
    "output": "Avoid bindable properties check when target has null value"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n@@ -519,8 +519,6 @@ protected void configurePropertySources(ConfigurableEnvironment environment, Str\n \t * @see org.springframework.boot.context.config.ConfigFileApplicationListener\n \t */\n \tprotected void configureProfiles(ConfigurableEnvironment environment, String[] args) {\n-\t\tenvironment.getActiveProfiles(); // ensure they are initialized\n-\t\t// But these ones should go first (last wins in a property key clash)\n \t\tSet<String> profiles = new LinkedHashSet<>(this.additionalProfiles);\n \t\tprofiles.addAll(Arrays.asList(environment.getActiveProfiles()));\n \t\tenvironment.setActiveProfiles(StringUtils.toStringArray(profiles));",
    "output": "Remove redundant invocation of getActiveProfiles"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n@@ -519,8 +519,6 @@ protected void configurePropertySources(ConfigurableEnvironment environment, Str\n \t * @see org.springframework.boot.context.config.ConfigFileApplicationListener\n \t */\n \tprotected void configureProfiles(ConfigurableEnvironment environment, String[] args) {\n-\t\tenvironment.getActiveProfiles(); // ensure they are initialized\n-\t\t// But these ones should go first (last wins in a property key clash)\n \t\tSet<String> profiles = new LinkedHashSet<>(this.additionalProfiles);\n \t\tprofiles.addAll(Arrays.asList(environment.getActiveProfiles()));\n \t\tenvironment.setActiveProfiles(StringUtils.toStringArray(profiles));",
    "output": "Remove redundant invocation of getActiveProfiles"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/AbstractLoggingSystemTests.java b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/AbstractLoggingSystemTests.java\n--- a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/AbstractLoggingSystemTests.java\n+++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/AbstractLoggingSystemTests.java\n@@ -38,18 +38,18 @@ public abstract class AbstractLoggingSystemTests {\n \tprivate String originalTempFolder;\n \n \t@BeforeEach\n-\tpublic void configureTempDir(@TempDir Path temp) {\n+\tvoid configureTempDir(@TempDir Path temp) {\n \t\tthis.originalTempFolder = System.getProperty(JAVA_IO_TMPDIR);\n \t\tSystem.setProperty(JAVA_IO_TMPDIR, temp.toAbsolutePath().toString());\n \t}\n \n \t@AfterEach\n-\tpublic void reinstateTempDir() {\n+\tvoid reinstateTempDir() {\n \t\tSystem.setProperty(JAVA_IO_TMPDIR, this.originalTempFolder);\n \t}\n \n \t@AfterEach\n-\tpublic void clear() {\n+\tvoid clear() {\n \t\tSystem.clearProperty(LoggingSystemProperties.LOG_FILE);\n \t\tSystem.clearProperty(LoggingSystemProperties.PID_KEY);\n \t}",
    "output": "Migrate LogbackLoggingSystemTests to JUnit 5"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/kafka/KafkaAutoConfigurationIntegrationTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/kafka/KafkaAutoConfigurationIntegrationTests.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/kafka/KafkaAutoConfigurationIntegrationTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/kafka/KafkaAutoConfigurationIntegrationTests.java\n@@ -50,7 +50,7 @@\n @EmbeddedKafka(topics = KafkaAutoConfigurationIntegrationTests.TEST_TOPIC)\n class KafkaAutoConfigurationIntegrationTests {\n \n-\tpublic static final String TEST_TOPIC = \"testTopic\";\n+\tstatic final String TEST_TOPIC = \"testTopic\";\n \n \tprivate static final String ADMIN_CREATED_TOPIC = \"adminCreatedTopic\";\n ",
    "output": "Use @EmbeddedKafka for Integration Tests"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java\n--- a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java\n+++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java\n@@ -468,7 +468,6 @@ public void noDebugOutputIsProducedByDefault() {\n \t\tLogFile logFile = getLogFile(file.getPath(), null);\n \t\tthis.loggingSystem.initialize(this.initializationContext, null, logFile);\n \t\tString output = this.output.toString().trim();\n-\t\tSystem.out.println(output);\n \t\tassertThat(output).doesNotContain(\"LevelChangePropagator\").doesNotContain(\"SizeAndTimeBasedFNATP\");\n \t}\n ",
    "output": "Remove System.out.println() in a test"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java\n--- a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java\n+++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java\n@@ -468,7 +468,6 @@ public void noDebugOutputIsProducedByDefault() {\n \t\tLogFile logFile = getLogFile(file.getPath(), null);\n \t\tthis.loggingSystem.initialize(this.initializationContext, null, logFile);\n \t\tString output = this.output.toString().trim();\n-\t\tSystem.out.println(output);\n \t\tassertThat(output).doesNotContain(\"LevelChangePropagator\").doesNotContain(\"SizeAndTimeBasedFNATP\");\n \t}\n ",
    "output": "Remove System.out.println() in a test"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/logback/DebugLogbackConfigurator.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/logback/DebugLogbackConfigurator.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/logback/DebugLogbackConfigurator.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/logback/DebugLogbackConfigurator.java\n@@ -40,7 +40,7 @@ class DebugLogbackConfigurator extends LogbackConfigurator {\n \t@Override\n \t@SuppressWarnings(\"rawtypes\")\n \tpublic void conversionRule(String conversionWord, Class<? extends Converter> converterClass) {\n-\t\tinfo(\"Adding conversion rule of type '\" + converterClass.getName() + \"' for word '\" + conversionWord);\n+\t\tinfo(\"Adding conversion rule of type '\" + converterClass.getName() + \"' for word '\" + conversionWord + \"'\");\n \t\tsuper.conversionRule(conversionWord, converterClass);\n \t}\n ",
    "output": "Add a missing quote in DebugLogbackConfigurator"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/logback/DebugLogbackConfigurator.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/logback/DebugLogbackConfigurator.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/logback/DebugLogbackConfigurator.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/logback/DebugLogbackConfigurator.java\n@@ -40,7 +40,7 @@ class DebugLogbackConfigurator extends LogbackConfigurator {\n \t@Override\n \t@SuppressWarnings(\"rawtypes\")\n \tpublic void conversionRule(String conversionWord, Class<? extends Converter> converterClass) {\n-\t\tinfo(\"Adding conversion rule of type '\" + converterClass.getName() + \"' for word '\" + conversionWord);\n+\t\tinfo(\"Adding conversion rule of type '\" + converterClass.getName() + \"' for word '\" + conversionWord + \"'\");\n \t\tsuper.conversionRule(conversionWord, converterClass);\n \t}\n ",
    "output": "Add a missing quote in DebugLogbackConfigurator"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBean.java\n@@ -43,7 +43,7 @@\n  * @author Phillip Webb\n  * @since 1.5.22\n  */\n-public abstract class AbstractFilterRegistrationBean extends RegistrationBean {\n+public abstract class AbstractFilterRegistrationBean<T extends Filter> extends DynamicRegistrationBean<Dynamic> {\n \n \t/**\n \t * Filters that wrap the servlet request should be ordered less than or equal to this.",
    "output": "Fix AbstractFilterRegistrationBean merge error\nMerging 1.5.x accidentally broke `AbstractFilterRegistrationBean`"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\n@@ -98,6 +98,7 @@ public RSocketServerFactory rSocketServerFactory(RSocketProperties properties,\n \t\t}\n \n \t\t@Bean\n+\t\t@ConditionalOnMissingBean\n \t\tpublic RSocketServerBootstrap rSocketServerBootstrap(RSocketServerFactory rSocketServerFactory,\n \t\t\t\tRSocketMessageHandler rSocketMessageHandler) {\n \t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, rSocketMessageHandler.serverAcceptor());",
    "output": "Make rSocketServerBootstrap @ConditionalOnMissingBean"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointAutoConfiguration.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointAutoConfiguration.java\n@@ -52,7 +52,6 @@\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n-import org.springframework.http.MediaType;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for web {@link Endpoint @Endpoint}\n@@ -68,8 +67,7 @@\n @EnableConfigurationProperties(WebEndpointProperties.class)\n public class WebEndpointAutoConfiguration {\n \n-\tprivate static final List<String> MEDIA_TYPES = Arrays.asList(ActuatorMediaType.V2_JSON,\n-\t\t\tMediaType.APPLICATION_JSON_VALUE);\n+\tprivate static final List<String> MEDIA_TYPES = Arrays.asList(ActuatorMediaType.V2_JSON, \"application/json\");\n \n \tprivate final ApplicationContext applicationContext;\n ",
    "output": "Use constants for HTTP headers"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/PropertyMapperTests.java b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/PropertyMapperTests.java\n--- a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/PropertyMapperTests.java\n+++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/PropertyMapperTests.java\n@@ -197,12 +197,12 @@ void alwaysApplyingWhenNonNullShouldAlwaysApplyNonNullToSource() {\n \t}\n \n \t@Test\n-\tpublic void whenWhenValueNotMatchesShouldSupportChainedCalls() {\n+\tvoid whenWhenValueNotMatchesShouldSupportChainedCalls() {\n \t\tthis.map.from(\"123\").when(\"456\"::equals).when(\"123\"::equals).toCall(Assertions::fail);\n \t}\n \n \t@Test\n-\tpublic void whenWhenValueMatchesShouldSupportChainedCalls() {\n+\tvoid whenWhenValueMatchesShouldSupportChainedCalls() {\n \t\tString result = this.map.from(\"123\").when((s) -> s.contains(\"2\")).when(\"123\"::equals).toInstance(String::new);\n \t\tassertThat(result).isEqualTo(\"123\");\n \t}",
    "output": "Fix checkstyle violation"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/test/java/org/springframework/boot/cli/compiler/grape/AetherGrapeEngineTests.java b/spring-boot-cli/src/test/java/org/springframework/boot/cli/compiler/grape/AetherGrapeEngineTests.java\n--- a/spring-boot-cli/src/test/java/org/springframework/boot/cli/compiler/grape/AetherGrapeEngineTests.java\n+++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/compiler/grape/AetherGrapeEngineTests.java\n@@ -156,10 +156,13 @@ public void dependencyResolutionWithCustomClassLoader() {\n \n \t@Test\n \tpublic void resolutionWithCustomResolver() {\n-\t\tMap<String, Object> args = new HashMap<String, Object>();\n-\t\tAetherGrapeEngine grapeEngine = this.createGrapeEngine();\n-\t\tgrapeEngine.addResolver(createResolver(\"restlet.org\", \"https://maven.restlet.org\"));\n-\t\tgrapeEngine.grab(args, createDependency(\"org.restlet\", \"org.restlet\", \"1.1.6\"));\n+\t\tMap<String, Object> args = new HashMap<>();\n+\t\tAetherGrapeEngine grapeEngine = createGrapeEngine();\n+\t\tgrapeEngine.addResolver(createResolver(\"spring-releases\", \"https://repo.spring.io/release\"));\n+\t\tMap<String, Object> dependency = createDependency(\"io.spring.docresources\", \"spring-doc-resources\",\n+\t\t\t\t\"0.1.1.RELEASE\");\n+\t\tdependency.put(\"ext\", \"zip\");\n+\t\tgrapeEngine.grab(args, dependency);\n \t\tassertThat(this.groovyClassLoader.getURLs().length).isEqualTo(1);\n \t}\n ",
    "output": "Switch away from https://maven.restlet.org as it redirects to http"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketStrategiesAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketStrategiesAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketStrategiesAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketStrategiesAutoConfiguration.java\n@@ -62,7 +62,7 @@ public RSocketStrategies rSocketStrategies(ObjectProvider<RSocketStrategiesCusto\n \t\tbuilder.reactiveAdapterStrategy(ReactiveAdapterRegistry.getSharedInstance());\n \t\tcustomizers.orderedStream().forEach((customizer) -> customizer.customize(builder));\n \t\tbuilder.decoder(StringDecoder.textPlainOnly());\n-\t\tbuilder.encoder(CharSequenceEncoder.textPlainOnly());\n+\t\tbuilder.encoder(CharSequenceEncoder.allMimeTypes());\n \t\tbuilder.dataBufferFactory(new NettyDataBufferFactory(PooledByteBufAllocator.DEFAULT));\n \t\treturn builder.build();\n \t}",
    "output": "Enable encoding of message/x.rsocket.routing.v0 requests"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointAutoConfiguration.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointAutoConfiguration.java\n@@ -112,9 +112,8 @@ public ControllerEndpointDiscoverer controllerEndpointDiscoverer(ObjectProvider<\n \n \t@Bean\n \t@ConditionalOnMissingBean\n-\tpublic PathMappedEndpoints pathMappedEndpoints(Collection<EndpointsSupplier<?>> endpointSuppliers,\n-\t\t\tWebEndpointProperties webEndpointProperties) {\n-\t\treturn new PathMappedEndpoints(webEndpointProperties.getBasePath(), endpointSuppliers);\n+\tpublic PathMappedEndpoints pathMappedEndpoints(Collection<EndpointsSupplier<?>> endpointSuppliers) {\n+\t\treturn new PathMappedEndpoints(this.properties.getBasePath(), endpointSuppliers);\n \t}\n \n \t@Bean",
    "output": "Use existing properties field\nUse existing properties field"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointAutoConfiguration.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointAutoConfiguration.java\n@@ -113,7 +113,7 @@ public ControllerEndpointDiscoverer controllerEndpointDiscoverer(ObjectProvider<\n \t@Bean\n \t@ConditionalOnMissingBean\n \tpublic PathMappedEndpoints pathMappedEndpoints(Collection<EndpointsSupplier<?>> endpointSuppliers) {\n-\t\treturn new PathMappedEndpoints(properties.getBasePath(), endpointSuppliers);\n+\t\treturn new PathMappedEndpoints(this.properties.getBasePath(), endpointSuppliers);\n \t}\n \n \t@Bean",
    "output": "Use existing properties field"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointAutoConfiguration.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/WebEndpointAutoConfiguration.java\n@@ -112,9 +112,8 @@ public ControllerEndpointDiscoverer controllerEndpointDiscoverer(ObjectProvider<\n \n \t@Bean\n \t@ConditionalOnMissingBean\n-\tpublic PathMappedEndpoints pathMappedEndpoints(Collection<EndpointsSupplier<?>> endpointSuppliers,\n-\t\t\tWebEndpointProperties webEndpointProperties) {\n-\t\treturn new PathMappedEndpoints(webEndpointProperties.getBasePath(), endpointSuppliers);\n+\tpublic PathMappedEndpoints pathMappedEndpoints(Collection<EndpointsSupplier<?>> endpointSuppliers) {\n+\t\treturn new PathMappedEndpoints(properties.getBasePath(), endpointSuppliers);\n \t}\n \n \t@Bean",
    "output": "Use existing properties field"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfigurationServletContainerTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfigurationServletContainerTests.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfigurationServletContainerTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfigurationServletContainerTests.java\n@@ -67,12 +67,13 @@ void existingJerseyServletIsAmended(CapturedOutput output) {\n \t\t\tPropertyPlaceholderAutoConfiguration.class })\n \t@Import(ContainerConfiguration.class)\n \t@Path(\"/hello\")\n+\t@Configuration(proxyBeanMethods = false)\n \tpublic static class Application extends ResourceConfig {\n \n \t\t@Value(\"${message:World}\")\n \t\tprivate String msg;\n \n-\t\tpublic Application() {\n+\t\tApplication() {\n \t\t\tregister(Application.class);\n \t\t}\n ",
    "output": "Remove need for public constructor on inner-class"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java b/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java\n@@ -118,9 +118,15 @@ private JarFile(RandomAccessDataFile rootFile, String pathFromRoot, RandomAccess\n \t\tthis.pathFromRoot = pathFromRoot;\n \t\tCentralDirectoryParser parser = new CentralDirectoryParser();\n \t\tthis.entries = parser.addVisitor(new JarFileEntries(this, filter));\n-\t\tparser.addVisitor(centralDirectoryVisitor());\n-\t\tthis.data = parser.parse(data, filter == null);\n \t\tthis.type = type;\n+\t\tparser.addVisitor(centralDirectoryVisitor());\n+\t\ttry {\n+\t\t\tthis.data = parser.parse(data, filter == null);\n+\t\t}\n+\t\tcatch (RuntimeException ex) {\n+\t\t\tclose();\n+\t\t\tthrow ex;\n+\t\t}\n \t\tthis.manifestSupplier = (manifestSupplier != null) ? manifestSupplier : () -> {\n \t\t\ttry (InputStream inputStream = getInputStream(MANIFEST_NAME)) {\n \t\t\t\tif (inputStream == null) {",
    "output": "Close JarFile if failure occurs during construction"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/JarResourceManager.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/JarResourceManager.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/JarResourceManager.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/JarResourceManager.java\n@@ -26,6 +26,8 @@\n import io.undertow.server.handlers.resource.ResourceManager;\n import io.undertow.server.handlers.resource.URLResource;\n \n+import org.springframework.util.StringUtils;\n+\n /**\n  * {@link ResourceManager} for JAR resources.\n  *\n@@ -48,7 +50,7 @@ class JarResourceManager implements ResourceManager {\n \tpublic Resource getResource(String path) throws IOException {\n \t\tURL url = new URL(\"jar:file:\" + this.jarPath + \"!\" + (path.startsWith(\"/\") ? path : \"/\" + path));\n \t\tURLResource resource = new URLResource(url, path);\n-\t\tif (resource.getContentLength() < 0) {\n+\t\tif (StringUtils.hasText(path) && !\"/\".equals(path) && resource.getContentLength() < 0) {\n \t\t\treturn null;\n \t\t}\n \t\treturn resource;",
    "output": "Prevent URLResource and JarURLConnection from leaking an InputStream"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySourceTests.java b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySourceTests.java\n--- a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySourceTests.java\n+++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySourceTests.java\n@@ -179,8 +179,11 @@ void concurrentModificationExceptionInvalidatesCache() {\n \t\t\t\tDefaultPropertyMapper.INSTANCE);\n \t\tassertThat(adapter.stream().count()).isEqualTo(2);\n \t\tmap.setThrowException(true);\n+\t\tmap.put(\"key3\", \"value3\");\n+\t\tassertThat(adapter.stream().count()).isEqualTo(3);\n \t}\n \n+\t@Test\n \tpublic void originTrackedMapPropertySourceKeyAdditionInvalidatesCache() {\n \t\t// gh-13344\n \t\tMap<String, Object> map = new LinkedHashMap<>();\n@@ -194,6 +197,7 @@ public void originTrackedMapPropertySourceKeyAdditionInvalidatesCache() {\n \t\tassertThat(adapter.stream().count()).isEqualTo(3);\n \t}\n \n+\t@Test\n \tpublic void readOnlyOriginTrackedMapPropertySourceKeyAdditionDoesNotInvalidateCache() {\n \t\t// gh-16717\n \t\tMap<String, Object> map = new LinkedHashMap<>();",
    "output": "Add missing @Test annotations"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySourceTests.java b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySourceTests.java\n--- a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySourceTests.java\n+++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/SpringIterableConfigurationPropertySourceTests.java\n@@ -179,8 +179,11 @@ void concurrentModificationExceptionInvalidatesCache() {\n \t\t\t\tDefaultPropertyMapper.INSTANCE);\n \t\tassertThat(adapter.stream().count()).isEqualTo(2);\n \t\tmap.setThrowException(true);\n+\t\tmap.put(\"key3\", \"value3\");\n+\t\tassertThat(adapter.stream().count()).isEqualTo(3);\n \t}\n \n+\t@Test\n \tpublic void originTrackedMapPropertySourceKeyAdditionInvalidatesCache() {\n \t\t// gh-13344\n \t\tMap<String, Object> map = new LinkedHashMap<>();\n@@ -194,6 +197,7 @@ public void originTrackedMapPropertySourceKeyAdditionInvalidatesCache() {\n \t\tassertThat(adapter.stream().count()).isEqualTo(3);\n \t}\n \n+\t@Test\n \tpublic void readOnlyOriginTrackedMapPropertySourceKeyAdditionDoesNotInvalidateCache() {\n \t\t// gh-16717\n \t\tMap<String, Object> map = new LinkedHashMap<>();",
    "output": "Add missing @Test annotations\nThis commit also restores assertion accidentally removed in"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/reactor/core/ReactorCoreAutoConfigurationTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/reactor/core/ReactorCoreAutoConfigurationTests.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/reactor/core/ReactorCoreAutoConfigurationTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/reactor/core/ReactorCoreAutoConfigurationTests.java\n@@ -16,6 +16,7 @@\n \n package org.springframework.boot.autoconfigure.reactor.core;\n \n+import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import reactor.core.publisher.Hooks;\n@@ -39,6 +40,7 @@ class ReactorCoreAutoConfigurationTests {\n \t\t\t.withConfiguration(AutoConfigurations.of(ReactorCoreAutoConfiguration.class));\n \n \t@BeforeEach\n+\t@AfterEach\n \tvoid resetDebugFlag() {\n \t\tHooks.resetOnOperatorDebug();\n \t}",
    "output": "Reset flag after each test as well to avoid side effects"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/function/client/ClientHttpConnectorConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/function/client/ClientHttpConnectorConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/function/client/ClientHttpConnectorConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/function/client/ClientHttpConnectorConfiguration.java\n@@ -78,10 +78,7 @@ public JettyClientHttpConnector jettyClientHttpConnector(\n \t\t\t\tJettyResourceFactory jettyResourceFactory) {\n \t\t\tSslContextFactory sslContextFactory = new SslContextFactory.Client();\n \t\t\tHttpClient httpClient = new HttpClient(sslContextFactory);\n-\t\t\thttpClient.setExecutor(jettyResourceFactory.getExecutor());\n-\t\t\thttpClient.setByteBufferPool(jettyResourceFactory.getByteBufferPool());\n-\t\t\thttpClient.setScheduler(jettyResourceFactory.getScheduler());\n-\t\t\treturn new JettyClientHttpConnector(httpClient);\n+\t\t\treturn new JettyClientHttpConnector(httpClient, jettyResourceFactory);\n \t\t}\n \n \t}",
    "output": "Use new JettyClientHttpConnector constructor\nSimplify `ClientHttpConnectorConfiguration`by using the recently\nintroduced `JettyClientHttpConnector` constructor."
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/embedded/UndertowWebServerFactoryCustomizerTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/embedded/UndertowWebServerFactoryCustomizerTests.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/embedded/UndertowWebServerFactoryCustomizerTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/embedded/UndertowWebServerFactoryCustomizerTests.java\n@@ -100,6 +100,7 @@ public void customMaxHttpHeaderSizeIgnoredIfNegative() {\n \t\tassertThat(boundServerOption(UndertowOptions.MAX_HEADER_SIZE)).isNull();\n \t}\n \n+\t@Test\n \tpublic void customMaxHttpHeaderSizeIgnoredIfZero() {\n \t\tbind(\"server.max-http-header-size=0\");\n \t\tassertThat(boundServerOption(UndertowOptions.MAX_HEADER_SIZE)).isNull();",
    "output": "Add missing @Test annotation"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/embedded/UndertowWebServerFactoryCustomizerTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/embedded/UndertowWebServerFactoryCustomizerTests.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/embedded/UndertowWebServerFactoryCustomizerTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/embedded/UndertowWebServerFactoryCustomizerTests.java\n@@ -100,6 +100,7 @@ public void customMaxHttpHeaderSizeIgnoredIfNegative() {\n \t\tassertThat(boundServerOption(UndertowOptions.MAX_HEADER_SIZE)).isNull();\n \t}\n \n+\t@Test\n \tpublic void customMaxHttpHeaderSizeIgnoredIfZero() {\n \t\tbind(\"server.max-http-header-size=0\");\n \t\tassertThat(boundServerOption(UndertowOptions.MAX_HEADER_SIZE)).isNull();",
    "output": "Add missing @Test annotation"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/JavaBeanBinder.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/JavaBeanBinder.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/JavaBeanBinder.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/JavaBeanBinder.java\n@@ -133,9 +133,9 @@ protected void addProperties(Method[] declaredMethods, Field[] declaredFields) {\n \t\t\t}\n \t\t\tfor (Method method : declaredMethods) {\n \t\t\t\taddMethodIfPossible(method, \"get\", 0, BeanProperty::addGetter);\n+\t\t\t\taddMethodIfPossible(method, \"is\", 0, BeanProperty::addGetter);\n \t\t\t}\n \t\t\tfor (Method method : declaredMethods) {\n-\t\t\t\taddMethodIfPossible(method, \"is\", 0, BeanProperty::addGetter);\n \t\t\t\taddMethodIfPossible(method, \"set\", 1, BeanProperty::addSetter);\n \t\t\t}\n \t\t\tfor (Field field : declaredFields) {",
    "output": "Handle all getters first in JavaBeanBinder"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/JavaBeanBinder.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/JavaBeanBinder.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/JavaBeanBinder.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/JavaBeanBinder.java\n@@ -133,9 +133,9 @@ protected void addProperties(Method[] declaredMethods, Field[] declaredFields) {\n \t\t\t}\n \t\t\tfor (Method method : declaredMethods) {\n \t\t\t\taddMethodIfPossible(method, \"get\", 0, BeanProperty::addGetter);\n+\t\t\t\taddMethodIfPossible(method, \"is\", 0, BeanProperty::addGetter);\n \t\t\t}\n \t\t\tfor (Method method : declaredMethods) {\n-\t\t\t\taddMethodIfPossible(method, \"is\", 0, BeanProperty::addGetter);\n \t\t\t\taddMethodIfPossible(method, \"set\", 1, BeanProperty::addSetter);\n \t\t\t}\n \t\t\tfor (Field field : declaredFields) {",
    "output": "Handle all getters first in JavaBeanBinder\nUpdate `JavaBeanBinder.addProperties` to add both `get` and `is` methods\nbefore `set`."
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/JavaBeanBinderTests.java b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/JavaBeanBinderTests.java\n--- a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/JavaBeanBinderTests.java\n+++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/JavaBeanBinderTests.java\n@@ -511,6 +511,7 @@ public void bindToClassShouldCacheWithGenerics() {\n \t\tassertThat(bean.getBooleans().get(\"b\").getValue()).isEqualTo(true);\n \t}\n \n+\t@Test\n \tpublic void bindToClassWithOverloadedSetterShouldUseSetterThatMatchesField() {\n \t\t// gh-16206\n \t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n@@ -522,9 +523,8 @@ public void bindToClassWithOverloadedSetterShouldUseSetterThatMatchesField() {\n \t}\n \n \t@Test\n-\tpublic void beanProperiesPreferMatchingType() {\n+\tpublic void beanPropertiesPreferMatchingType() {\n \t\t// gh-16206\n-\n \t\tResolvableType type = ResolvableType.forClass(PropertyWithOverloadedSetter.class);\n \t\tBean<PropertyWithOverloadedSetter> bean = new Bean<PropertyWithOverloadedSetter>(\n \t\t\t\ttype, type.resolve()) {",
    "output": "Add a missing @Test in JavaBeanBinderTests"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/JavaBeanBinderTests.java b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/JavaBeanBinderTests.java\n--- a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/JavaBeanBinderTests.java\n+++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/JavaBeanBinderTests.java\n@@ -511,6 +511,7 @@ public void bindToClassShouldCacheWithGenerics() {\n \t\tassertThat(bean.getBooleans().get(\"b\").getValue()).isEqualTo(true);\n \t}\n \n+\t@Test\n \tpublic void bindToClassWithOverloadedSetterShouldUseSetterThatMatchesField() {\n \t\t// gh-16206\n \t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n@@ -522,9 +523,8 @@ public void bindToClassWithOverloadedSetterShouldUseSetterThatMatchesField() {\n \t}\n \n \t@Test\n-\tpublic void beanProperiesPreferMatchingType() {\n+\tpublic void beanPropertiesPreferMatchingType() {\n \t\t// gh-16206\n-\n \t\tResolvableType type = ResolvableType.forClass(PropertyWithOverloadedSetter.class);\n \t\tBean<PropertyWithOverloadedSetter> bean = new Bean<PropertyWithOverloadedSetter>(\n \t\t\t\ttype, type.resolve()) {",
    "output": "Add a missing @Test in JavaBeanBinderTests"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketStrategiesAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketStrategiesAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketStrategiesAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketStrategiesAutoConfiguration.java\n@@ -83,7 +83,7 @@ public RSocketStrategiesCustomizer jacksonCborStrategyCustomizer(\n \t\t\treturn (strategy) -> {\n \t\t\t\tObjectMapper objectMapper = builder.factory(new CBORFactory()).build();\n \t\t\t\tMediaType[] supportedTypes = new MediaType[] {\n-\t\t\t\t\t\tnew MediaType(\"application\", \"cbor\") };\n+\t\t\t\t\t\tMediaType.APPLICATION_CBOR };\n \t\t\t\tstrategy.decoder(new Jackson2CborDecoder(objectMapper, supportedTypes));\n \t\t\t\tstrategy.encoder(new Jackson2CborEncoder(objectMapper, supportedTypes));\n \t\t\t};",
    "output": "Use MediaType.APPLICATION_CBOR constant"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketStrategiesAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketStrategiesAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketStrategiesAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketStrategiesAutoConfiguration.java\n@@ -83,7 +83,7 @@ public RSocketStrategiesCustomizer jacksonCborStrategyCustomizer(\n \t\t\treturn (strategy) -> {\n \t\t\t\tObjectMapper objectMapper = builder.factory(new CBORFactory()).build();\n \t\t\t\tMediaType[] supportedTypes = new MediaType[] {\n-\t\t\t\t\t\tnew MediaType(\"application\", \"cbor\") };\n+\t\t\t\t\t\tMediaType.APPLICATION_CBOR };\n \t\t\t\tstrategy.decoder(new Jackson2CborDecoder(objectMapper, supportedTypes));\n \t\t\t\tstrategy.encoder(new Jackson2CborEncoder(objectMapper, supportedTypes));\n \t\t\t};",
    "output": "Use MediaType.APPLICATION_CBOR constant"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/ReactiveWebServerFactoryAutoConfigurationTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/ReactiveWebServerFactoryAutoConfigurationTests.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/ReactiveWebServerFactoryAutoConfigurationTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/ReactiveWebServerFactoryAutoConfigurationTests.java\n@@ -68,7 +68,7 @@ public void createFromConfigClass() {\n \t\t\t\t\tassertThat(context.getBeansOfType(ReactiveWebServerFactory.class))\n \t\t\t\t\t\t\t.hasSize(1);\n \t\t\t\t\tassertThat(context.getBeansOfType(WebServerFactoryCustomizer.class))\n-\t\t\t\t\t\t\t.hasSize(1);\n+\t\t\t\t\t\t\t.hasSize(2);\n \t\t\t\t\tassertThat(context\n \t\t\t\t\t\t\t.getBeansOfType(ReactiveWebServerFactoryCustomizer.class))\n \t\t\t\t\t\t\t\t\t.hasSize(1);",
    "output": "Fix test broken by additional customizer"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/TypeExcludeFilter.java b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/TypeExcludeFilter.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/TypeExcludeFilter.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/TypeExcludeFilter.java\n@@ -34,6 +34,7 @@ class TypeExcludeFilter {\n \n \tTypeExcludeFilter() {\n \t\tadd(\"com.zaxxer.hikari.IConnectionCustomizer\");\n+\t\tadd(\"groovy.lang.MetaClass\");\n \t\tadd(\"groovy.text.markup.MarkupTemplateEngine\");\n \t\tadd(\"java.io.Writer\");\n \t\tadd(\"java.io.PrintWriter\");",
    "output": "Exclude Groovy MetaClass from property meta-data\nUpdate `TypeExcludeFilter` to exclude `groovy.lang.MetaClass`."
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/error/DefaultErrorAttributes.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/error/DefaultErrorAttributes.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/error/DefaultErrorAttributes.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/error/DefaultErrorAttributes.java\n@@ -86,7 +86,7 @@ public Map<String, Object> getErrorAttributes(ServerRequest request,\n \t\terrorAttributes.put(\"status\", errorStatus.value());\n \t\terrorAttributes.put(\"error\", errorStatus.getReasonPhrase());\n \t\tString message = determineMessage(error);\n-\t\terrorAttributes.put(\"message\", message != null ? message : \"\");\n+\t\terrorAttributes.put(\"message\", (message != null) ? message : \"\");\n \t\thandleException(errorAttributes, determineException(error), includeStackTrace);\n \t\treturn errorAttributes;\n \t}",
    "output": "Fix checkstyle issue"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/error/DefaultErrorAttributes.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/error/DefaultErrorAttributes.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/error/DefaultErrorAttributes.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/error/DefaultErrorAttributes.java\n@@ -85,7 +85,8 @@ public Map<String, Object> getErrorAttributes(ServerRequest request,\n \t\tHttpStatus errorStatus = determineHttpStatus(error);\n \t\terrorAttributes.put(\"status\", errorStatus.value());\n \t\terrorAttributes.put(\"error\", errorStatus.getReasonPhrase());\n-\t\terrorAttributes.put(\"message\", determineMessage(error));\n+\t\tString message = determineMessage(error);\n+\t\terrorAttributes.put(\"message\", message != null ? message : \"\");\n \t\thandleException(errorAttributes, determineException(error), includeStackTrace);\n \t\treturn errorAttributes;\n \t}",
    "output": "Work around Framework regression in handling of null model values\n."
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/JavaBeanBinder.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/JavaBeanBinder.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/JavaBeanBinder.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/JavaBeanBinder.java\n@@ -192,12 +192,12 @@ public BeanSupplier<T> getSupplier(Bindable<T> target) {\n \t\t\t});\n \t\t}\n \n-\t\tprivate boolean isOfDifferentType(ResolvableType targetType) {\n+\t\tprivate boolean isOfDifferentType(ResolvableType targetType,\n+\t\t\t\tClass<?> resolvedType) {\n \t\t\tif (this.type.hasGenerics() || targetType.hasGenerics()) {\n \t\t\t\treturn !this.type.equals(targetType);\n \t\t\t}\n-\t\t\treturn this.resolvedType == null\n-\t\t\t\t\t|| !this.resolvedType.equals(targetType.resolve());\n+\t\t\treturn this.resolvedType == null || !this.resolvedType.equals(resolvedType);\n \t\t}\n \n \t\t@SuppressWarnings(\"unchecked\")\n@@ -214,7 +214,7 @@ public static <T> Bean<T> get(Bindable<T> bindable, boolean canCallGetValue) {\n \t\t\t\treturn null;\n \t\t\t}\n \t\t\tBean<?> bean = Bean.cached;\n-\t\t\tif (bean == null || bean.isOfDifferentType(type)) {\n+\t\t\tif (bean == null || bean.isOfDifferentType(type, resolvedType)) {\n \t\t\t\tbean = new Bean<>(type, resolvedType);\n \t\t\t\tcached = bean;\n \t\t\t}",
    "output": "Use actual resolvedType when checking Binder cache"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/error/DefaultErrorAttributes.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/error/DefaultErrorAttributes.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/error/DefaultErrorAttributes.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/error/DefaultErrorAttributes.java\n@@ -91,7 +91,8 @@ public Map<String, Object> getErrorAttributes(ServerRequest request,\n \t\tHttpStatus errorStatus = determineHttpStatus(error, responseStatusAnnotation);\n \t\terrorAttributes.put(\"status\", errorStatus.value());\n \t\terrorAttributes.put(\"error\", errorStatus.getReasonPhrase());\n-\t\terrorAttributes.put(\"message\", determineMessage(error, responseStatusAnnotation));\n+\t\tString message = determineMessage(error, responseStatusAnnotation);\n+\t\terrorAttributes.put(\"message\", (message != null) ? message : \"\");\n \t\terrorAttributes.put(\"requestId\", request.exchange().getRequest().getId());\n \t\thandleException(errorAttributes, determineException(error), includeStackTrace);\n \t\treturn errorAttributes;",
    "output": "Work around Framework regression in handling of null model values\n."
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandler.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandler.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandler.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandler.java\n@@ -105,6 +105,8 @@ protected RouterFunction<ServerResponse> getRoutingFunction(\n \t\t\t\tthis::renderErrorResponse);\n \t}\n \n+\tprivate static final MediaType HTML_CONTENT_TYPE =  MediaType.valueOf(MediaType.TEXT_HTML_VALUE+\";charset=UTF-8\");\n+\n \t/**\n \t * Render the error information as an HTML view.\n \t * @param request the current request\n@@ -115,7 +117,7 @@ protected Mono<ServerResponse> renderErrorView(ServerRequest request) {\n \t\tMap<String, Object> error = getErrorAttributes(request, includeStackTrace);\n \t\tHttpStatus errorStatus = getHttpStatus(error);\n \t\tServerResponse.BodyBuilder responseBody = ServerResponse.status(errorStatus)\n-\t\t\t\t.contentType(MediaType.TEXT_HTML);\n+\t\t\t\t.contentType(HTML_CONTENT_TYPE);\n \t\treturn Flux\n \t\t\t\t.just(\"error/\" + errorStatus.value(),\n \t\t\t\t\t\t\"error/\" + SERIES_VIEWS.get(errorStatus.series()), \"error/error\")",
    "output": "Set UTF-8 charset for whitelabel HTML error pages\nThis commit changes the HTTP response Content-Type for whitelabel\nerror pages with Spring WebFlux."
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java\n@@ -33,6 +33,7 @@\n import org.springframework.http.codec.json.Jackson2JsonDecoder;\n import org.springframework.http.codec.json.Jackson2JsonEncoder;\n import org.springframework.util.MimeType;\n+import org.springframework.web.reactive.function.client.WebClient;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for\n@@ -43,7 +44,7 @@\n  * @since 2.0.0\n  */\n @Configuration(proxyBeanMethods = false)\n-@ConditionalOnClass(CodecConfigurer.class)\n+@ConditionalOnClass({ CodecConfigurer.class, WebClient.class })\n @AutoConfigureAfter(JacksonAutoConfiguration.class)\n public class CodecsAutoConfiguration {\n ",
    "output": "Avoid codec auto-configuration when WebFlux is not present\nThis commit prevents the `CodecsAutoConfiguration` from being processed\nif spring-webflux is not on classpath, since it is only useful for the\nWebFlux server infrastructure or `WebClient`."
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringBootVersion.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringBootVersion.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringBootVersion.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringBootVersion.java\n@@ -21,6 +21,7 @@\n import java.net.JarURLConnection;\n import java.net.URL;\n import java.net.URLConnection;\n+import java.security.CodeSource;\n import java.util.jar.Attributes;\n import java.util.jar.Attributes.Name;\n import java.util.jar.JarFile;\n@@ -62,8 +63,12 @@ private static String determineSpringBootVersion() {\n \t\tif (implementationVersion != null) {\n \t\t\treturn implementationVersion;\n \t\t}\n-\t\tURL codeSourceLocation = SpringBootVersion.class.getProtectionDomain()\n-\t\t\t\t.getCodeSource().getLocation();\n+\t\tCodeSource codeSource = SpringBootVersion.class.getProtectionDomain()\n+\t\t\t\t.getCodeSource();\n+\t\tif (codeSource == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tURL codeSourceLocation = codeSource.getLocation();\n \t\ttry {\n \t\t\tURLConnection connection = codeSourceLocation.openConnection();\n \t\t\tif (connection instanceof JarURLConnection) {",
    "output": "Handle null CodeSource when determining Spring Boot version"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/ChangeableUrls.java b/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/ChangeableUrls.java\n--- a/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/ChangeableUrls.java\n+++ b/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/ChangeableUrls.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2018 the original author or authors.\n+ * Copyright 2012-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -178,7 +178,7 @@ private static List<URL> getUrlsFromManifestClassPathAttribute(URL jarUrl,\n \t\t\t}\n \t\t}\n \t\tif (!nonExistentEntries.isEmpty()) {\n-\t\t\tSystem.out.println(\"The Class-Path manifest attribute in \" + jarFile.getName()\n+\t\t\tlogger.info(\"The Class-Path manifest attribute in \" + jarFile.getName()\n \t\t\t\t\t+ \" referenced one or more files that do not exist: \"\n \t\t\t\t\t+ StringUtils.collectionToCommaDelimitedString(nonExistentEntries));\n \t\t}",
    "output": "Use deferred logging to report Class-Path manifest attribute problems"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-cli/src/test/java/org/springframework/boot/cli/command/install/GroovyGrabDependencyResolverTests.java b/spring-boot-project/spring-boot-cli/src/test/java/org/springframework/boot/cli/command/install/GroovyGrabDependencyResolverTests.java\n--- a/spring-boot-project/spring-boot-cli/src/test/java/org/springframework/boot/cli/command/install/GroovyGrabDependencyResolverTests.java\n+++ b/spring-boot-project/spring-boot-cli/src/test/java/org/springframework/boot/cli/command/install/GroovyGrabDependencyResolverTests.java\n@@ -121,9 +121,9 @@ public void resolveShorthandArtifactWithDependencies() throws Exception {\n \tpublic void resolveMultipleArtifacts() throws Exception {\n \t\tList<File> resolved = this.resolver.resolve(Arrays.asList(\"junit:junit:4.11\",\n \t\t\t\t\"commons-logging:commons-logging:1.1.3\"));\n-\t\tassertThat(resolved).hasSize(3);\n+\t\tassertThat(resolved).hasSize(4);\n \t\tassertThat(getNames(resolved)).containsOnly(\"junit-4.11.jar\",\n-\t\t\t\t\"commons-logging-1.1.3.jar\", \"hamcrest-core-1.3.jar\");\n+\t\t\t\t\"commons-logging-1.1.3.jar\", \"hamcrest-core-2.1.jar\", \"hamcrest-2.1.jar\");\n \t}\n \n \tpublic Set<String> getNames(Collection<File> files) {",
    "output": "Upgrade to Hamcrest 2.1, switch to hamcrest artifact from -core and -library"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/reactive/ReactiveSecurityAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/reactive/ReactiveSecurityAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/reactive/ReactiveSecurityAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/reactive/ReactiveSecurityAutoConfiguration.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2018 the original author or authors.\n+ * Copyright 2012-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -27,6 +27,7 @@\n import org.springframework.context.annotation.Configuration;\n import org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity;\n import org.springframework.security.web.server.WebFilterChainProxy;\n+import org.springframework.web.reactive.config.WebFluxConfigurer;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for Spring Security in a reactive\n@@ -40,8 +41,8 @@\n  */\n @Configuration\n @EnableConfigurationProperties(SecurityProperties.class)\n-@ConditionalOnClass({ Flux.class, EnableWebFluxSecurity.class,\n-\t\tWebFilterChainProxy.class })\n+@ConditionalOnClass({ Flux.class, EnableWebFluxSecurity.class, WebFilterChainProxy.class,\n+\t\tWebFluxConfigurer.class })\n public class ReactiveSecurityAutoConfiguration {\n \n \t@Configuration",
    "output": "Make ReactiveSecurityAutoConfiguration back off without spring-webflux"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/properties/PropertyMappingContextCustomizer.java b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/properties/PropertyMappingContextCustomizer.java\n--- a/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/properties/PropertyMappingContextCustomizer.java\n+++ b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/properties/PropertyMappingContextCustomizer.java\n@@ -93,10 +93,7 @@ public Object postProcessBeforeInitialization(Object bean, String beanName)\n \t\t}\n \n \t\tprivate Class<?> getRoot(MergedAnnotation<?> annotation) {\n-\t\t\twhile (annotation.getParent() != null) {\n-\t\t\t\tannotation = annotation.getParent();\n-\t\t\t}\n-\t\t\treturn annotation.getType();\n+\t\t\treturn annotation.getRoot().getType();\n \t\t}\n \n \t\tprivate String getAnnotationsDescription(Set<Class<?>> annotations) {",
    "output": "Use MergedAnnotation.getRoot() in PropertyMappingCheckBeanPostProcessor"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/properties/PropertyMappingContextCustomizer.java b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/properties/PropertyMappingContextCustomizer.java\n--- a/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/properties/PropertyMappingContextCustomizer.java\n+++ b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/properties/PropertyMappingContextCustomizer.java\n@@ -93,10 +93,7 @@ public Object postProcessBeforeInitialization(Object bean, String beanName)\n \t\t}\n \n \t\tprivate Class<?> getRoot(MergedAnnotation<?> annotation) {\n-\t\t\twhile (annotation.getParent() != null) {\n-\t\t\t\tannotation = annotation.getParent();\n-\t\t\t}\n-\t\t\treturn annotation.getType();\n+\t\t\treturn annotation.getRoot().getType();\n \t\t}\n \n \t\tprivate String getAnnotationsDescription(Set<Class<?>> annotations) {",
    "output": "Use MergedAnnotation.getRoot() in PropertyMappingCheckBeanPostProcessor"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/jdbc/DatabaseDriverClassNameTests.java b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/jdbc/DatabaseDriverClassNameTests.java\n--- a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/jdbc/DatabaseDriverClassNameTests.java\n+++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/jdbc/DatabaseDriverClassNameTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2018 the original author or authors.\n+ * Copyright 2012-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -46,7 +46,8 @@ public class DatabaseDriverClassNameTests {\n \tprivate static final Set<DatabaseDriver> EXCLUDED_DRIVERS = Collections\n \t\t\t.unmodifiableSet(EnumSet.of(DatabaseDriver.UNKNOWN, DatabaseDriver.ORACLE,\n \t\t\t\t\tDatabaseDriver.DB2, DatabaseDriver.DB2_AS400, DatabaseDriver.INFORMIX,\n-\t\t\t\t\tDatabaseDriver.HANA, DatabaseDriver.TERADATA));\n+\t\t\t\t\tDatabaseDriver.HANA, DatabaseDriver.TERADATA,\n+\t\t\t\t\tDatabaseDriver.REDSHIFT));\n \n \tprivate final String className;\n ",
    "output": "Ignore Redshift in DatabaseDriverClassNameTests"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/OnEnabledDevToolsConditionTests.java b/spring-boot-project/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/OnEnabledDevToolsConditionTests.java\n--- a/spring-boot-project/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/OnEnabledDevToolsConditionTests.java\n+++ b/spring-boot-project/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/OnEnabledDevToolsConditionTests.java\n@@ -16,6 +16,8 @@\n \n package org.springframework.boot.devtools.autoconfigure;\n \n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n import org.junit.Before;\n import org.junit.Test;\n \n@@ -43,13 +45,15 @@ public void setup() {\n \n \t@Test\n \tpublic void outcomeWhenDevtoolsShouldBeEnabledIsTrueShouldMatch() throws Exception {\n+\t\tAtomicBoolean containsBean = new AtomicBoolean();\n \t\tThread thread = new Thread(() -> {\n \t\t\tOnEnabledDevToolsConditionTests.this.context.refresh();\n-\t\t\tassertThat(OnEnabledDevToolsConditionTests.this.context.containsBean(\"test\"))\n-\t\t\t\t\t.isTrue();\n+\t\t\tcontainsBean.set(\n+\t\t\t\t\tOnEnabledDevToolsConditionTests.this.context.containsBean(\"test\"));\n \t\t});\n \t\tthread.start();\n \t\tthread.join();\n+\t\tassertThat(containsBean).isTrue();\n \t}\n \n \t@Test",
    "output": "Fix assertion for outcomeWhenDevtoolsShouldBeEnabledIsTrueShouldMatch()"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/OnEnabledDevToolsConditionTests.java b/spring-boot-project/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/OnEnabledDevToolsConditionTests.java\n--- a/spring-boot-project/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/OnEnabledDevToolsConditionTests.java\n+++ b/spring-boot-project/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/OnEnabledDevToolsConditionTests.java\n@@ -16,6 +16,8 @@\n \n package org.springframework.boot.devtools.autoconfigure;\n \n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n import org.junit.Before;\n import org.junit.Test;\n \n@@ -43,13 +45,15 @@ public void setup() {\n \n \t@Test\n \tpublic void outcomeWhenDevtoolsShouldBeEnabledIsTrueShouldMatch() throws Exception {\n+\t\tAtomicBoolean containsBean = new AtomicBoolean();\n \t\tThread thread = new Thread(() -> {\n \t\t\tOnEnabledDevToolsConditionTests.this.context.refresh();\n-\t\t\tassertThat(OnEnabledDevToolsConditionTests.this.context.containsBean(\"test\"))\n-\t\t\t\t\t.isTrue();\n+\t\t\tcontainsBean.set(\n+\t\t\t\t\tOnEnabledDevToolsConditionTests.this.context.containsBean(\"test\"));\n \t\t});\n \t\tthread.start();\n \t\tthread.join();\n+\t\tassertThat(containsBean).isTrue();\n \t}\n \n \t@Test",
    "output": "Fix assertion for outcomeWhenDevtoolsShouldBeEnabledIsTrueShouldMatch()"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RepackageMojo.java b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RepackageMojo.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RepackageMojo.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RepackageMojo.java\n@@ -193,7 +193,7 @@ public class RepackageMojo extends AbstractDependencyFilterMojo {\n \t * Exclude Spring Boot devtools from the repackaged archive.\n \t * @since 1.3\n \t */\n-\t@Parameter(defaultValue = \"true\")\n+\t@Parameter(property = \"spring-boot.repackage.excludeDevtools\", defaultValue = \"true\")\n \tprivate boolean excludeDevtools = true;\n \n \t/**",
    "output": "Make excludeDevtools available as a user property\nMake excludeDevtools available as a user property"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RepackageMojo.java b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RepackageMojo.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RepackageMojo.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RepackageMojo.java\n@@ -193,7 +193,7 @@ public class RepackageMojo extends AbstractDependencyFilterMojo {\n \t * Exclude Spring Boot devtools from the repackaged archive.\n \t * @since 1.3\n \t */\n-\t@Parameter(property = \"spring-boot.excludeDevtools\", defaultValue = \"true\")\n+\t@Parameter(property = \"spring-boot.repackage.excludeDevtools\", defaultValue = \"true\")\n \tprivate boolean excludeDevtools = true;\n \n \t/**",
    "output": "Make excludeDevtools available as a user property"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RepackageMojo.java b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RepackageMojo.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RepackageMojo.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RepackageMojo.java\n@@ -193,7 +193,7 @@ public class RepackageMojo extends AbstractDependencyFilterMojo {\n \t * Exclude Spring Boot devtools from the repackaged archive.\n \t * @since 1.3\n \t */\n-\t@Parameter(defaultValue = \"true\")\n+\t@Parameter(property = \"spring-boot.excludeDevtools\", defaultValue = \"true\")\n \tprivate boolean excludeDevtools = true;\n \n \t/**",
    "output": "Make excludeDevtools available as a user property"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-kafka/src/test/java/sample/kafka/SampleKafkaApplicationTests.java b/spring-boot-samples/spring-boot-sample-kafka/src/test/java/sample/kafka/SampleKafkaApplicationTests.java\n--- a/spring-boot-samples/spring-boot-sample-kafka/src/test/java/sample/kafka/SampleKafkaApplicationTests.java\n+++ b/spring-boot-samples/spring-boot-sample-kafka/src/test/java/sample/kafka/SampleKafkaApplicationTests.java\n@@ -41,7 +41,7 @@ class SampleKafkaApplicationTests {\n \n \t@Test\n \tvoid testVanillaExchange() throws Exception {\n-\t\tlong end = System.currentTimeMillis() + 10000;\n+\t\tlong end = System.currentTimeMillis() + 30000;\n \t\twhile (!this.output.toString().contains(\"A simple test message\")\n \t\t\t\t&& System.currentTimeMillis() < end) {\n \t\t\tThread.sleep(250);",
    "output": "Increase timeout for Kafka sample"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandlerIntegrationTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandlerIntegrationTests.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandlerIntegrationTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandlerIntegrationTests.java\n@@ -335,7 +335,7 @@ public Mono<String> badRequest() {\n \n \t\t\t@GetMapping(\"/commit\")\n \t\t\tpublic Mono<Void> commit(ServerWebExchange exchange) {\n-\t\t\t\treturn exchange.getResponse().writeWith(Mono.empty()).then(\n+\t\t\t\treturn exchange.getResponse().setComplete().then(\n \t\t\t\t\t\tMono.error(new IllegalStateException(\"already committed!\")));\n \t\t\t}\n ",
    "output": "Fix DefaultErrorWebExceptionHandler test"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/ConfigurationPropertiesScanTests.java b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/ConfigurationPropertiesScanTests.java\n--- a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/ConfigurationPropertiesScanTests.java\n+++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/ConfigurationPropertiesScanTests.java\n@@ -66,7 +66,7 @@ public void scanImportBeanRegistrarShouldBeEnvironmentAwareWithoutRequiredProfil\n \t\tload(TestConfiguration.class);\n \t\tassertThat(this.context.containsBean(\n \t\t\t\t\"profile-org.springframework.boot.context.properties.scan.valid.a.AScanConfiguration$MyProfileProperties\"))\n-\t\t\t\t.isFalse();\n+\t\t\t\t\t\t.isFalse();\n \t}\n \n \t@Test\n@@ -87,7 +87,7 @@ public void scanImportBeanRegistrarShouldBeResourceLoaderAwareWithoutRequiredRes\n \t\tload(TestConfiguration.class);\n \t\tassertThat(this.context.containsBean(\n \t\t\t\t\"resource-org.springframework.boot.context.properties.scan.valid.a.AScanConfiguration$MyResourceProperties\"))\n-\t\t\t\t.isFalse();\n+\t\t\t\t\t\t.isFalse();\n \t}\n \n \tprivate void load(Class<?>... classes) {",
    "output": "Add negative tests to ConfigurationPropertiesScanTests"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/rest/RestClientAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/rest/RestClientAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/rest/RestClientAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/rest/RestClientAutoConfiguration.java\n@@ -72,10 +72,10 @@ public RestClientBuilder restClientBuilder(RestClientProperties properties,\n \t\t});\n \t\tbuilder.setRequestConfigCallback((requestConfigBuilder) -> {\n \t\t\tmap.from(properties::getConnectionTimeout).whenNonNull()\n-\t\t\t\t\t.as(Duration::toMillis).asInt(Math::toIntExact)\n+\t\t\t\t\t.asInt(Duration::toMillis)\n \t\t\t\t\t.to(requestConfigBuilder::setConnectTimeout);\n-\t\t\tmap.from(properties::getReadTimeout).whenNonNull().as(Duration::toMillis)\n-\t\t\t\t\t.asInt(Math::toIntExact).to(requestConfigBuilder::setSocketTimeout);\n+\t\t\tmap.from(properties::getReadTimeout).whenNonNull().asInt(Duration::toMillis)\n+\t\t\t\t\t.to(requestConfigBuilder::setSocketTimeout);\n \t\t\treturn requestConfigBuilder;\n \t\t});\n \t\tbuilderCustomizers.orderedStream()",
    "output": "Consistent use of PropertyMapper::asInt"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/rest/RestClientAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/rest/RestClientAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/rest/RestClientAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/rest/RestClientAutoConfiguration.java\n@@ -72,10 +72,10 @@ public RestClientBuilder restClientBuilder(RestClientProperties properties,\n \t\t});\n \t\tbuilder.setRequestConfigCallback((requestConfigBuilder) -> {\n \t\t\tmap.from(properties::getConnectionTimeout).whenNonNull()\n-\t\t\t\t\t.as(Duration::toMillis).asInt(Math::toIntExact)\n+\t\t\t\t\t.asInt(Duration::toMillis)\n \t\t\t\t\t.to(requestConfigBuilder::setConnectTimeout);\n-\t\t\tmap.from(properties::getReadTimeout).whenNonNull().as(Duration::toMillis)\n-\t\t\t\t\t.asInt(Math::toIntExact).to(requestConfigBuilder::setSocketTimeout);\n+\t\t\tmap.from(properties::getReadTimeout).whenNonNull().asInt(Duration::toMillis)\n+\t\t\t\t\t.to(requestConfigBuilder::setSocketTimeout);\n \t\t\treturn requestConfigBuilder;\n \t\t});\n \t\tbuilderCustomizers.orderedStream()",
    "output": "Consistent use of PropertyMapper::asInt"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/env/DevToolsHomePropertiesPostProcessorTests.java b/spring-boot-project/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/env/DevToolsHomePropertiesPostProcessorTests.java\n--- a/spring-boot-project/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/env/DevToolsHomePropertiesPostProcessorTests.java\n+++ b/spring-boot-project/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/env/DevToolsHomePropertiesPostProcessorTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2017 the original author or authors.\n+ * Copyright 2012-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -73,9 +73,7 @@ public void ignoresMissingHomeProperties() throws Exception {\n \t}\n \n \tprotected void runPostProcessor(Runnable runnable) throws Exception {\n-\t\tThread thread = new Thread(() -> {\n-\t\t\trunnable.run();\n-\t\t});\n+\t\tThread thread = new Thread(runnable);\n \t\tthread.start();\n \t\tthread.join();\n \t}",
    "output": "Remove unnecessary latches in tests"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-test/src/test/java/org/springframework/boot/test/web/htmlunit/webdriver/LocalHostWebConnectionHtmlUnitDriverTests.java b/spring-boot-project/spring-boot-test/src/test/java/org/springframework/boot/test/web/htmlunit/webdriver/LocalHostWebConnectionHtmlUnitDriverTests.java\n--- a/spring-boot-project/spring-boot-test/src/test/java/org/springframework/boot/test/web/htmlunit/webdriver/LocalHostWebConnectionHtmlUnitDriverTests.java\n+++ b/spring-boot-project/spring-boot-test/src/test/java/org/springframework/boot/test/web/htmlunit/webdriver/LocalHostWebConnectionHtmlUnitDriverTests.java\n@@ -21,6 +21,7 @@\n import com.gargoylesoftware.htmlunit.BrowserVersion;\n import com.gargoylesoftware.htmlunit.WebClient;\n import com.gargoylesoftware.htmlunit.WebClientOptions;\n+import com.gargoylesoftware.htmlunit.WebConsole;\n import com.gargoylesoftware.htmlunit.WebRequest;\n import com.gargoylesoftware.htmlunit.WebWindow;\n import org.junit.jupiter.api.Test;\n@@ -52,6 +53,7 @@ public class LocalHostWebConnectionHtmlUnitDriverTests {\n \tpublic LocalHostWebConnectionHtmlUnitDriverTests() {\n \t\tMockitoAnnotations.initMocks(this);\n \t\tgiven(this.webClient.getOptions()).willReturn(new WebClientOptions());\n+\t\tgiven(this.webClient.getWebConsole()).willReturn(new WebConsole());\n \t}\n \n \t@Test",
    "output": "Align mock with Selenium HtmlUnit's new behaviour"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandlerIntegrationTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandlerIntegrationTests.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandlerIntegrationTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorWebExceptionHandlerIntegrationTests.java\n@@ -354,7 +354,7 @@ public Mono<String> badRequest() {\n \n \t\t\t@GetMapping(\"/commit\")\n \t\t\tpublic Mono<Void> commit(ServerWebExchange exchange) {\n-\t\t\t\treturn exchange.getResponse().writeWith(Mono.empty()).then(\n+\t\t\t\treturn exchange.getResponse().setComplete().then(\n \t\t\t\t\t\tMono.error(new IllegalStateException(\"already committed!\")));\n \t\t\t}\n ",
    "output": "Fix DefaultErrorWebExceptionHandler test"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\n@@ -106,7 +106,7 @@ public RSocketServerFactory rSocketServerFactory(RSocketProperties properties,\n \t\t}\n \n \t\t@Bean\n-\t\tpublic RSocketServerBootstrap nettyRSocketBootstrap(\n+\t\tpublic RSocketServerBootstrap rSocketServerBootstrap(\n \t\t\t\tRSocketServerFactory rSocketServerFactory,\n \t\t\t\tSocketAcceptor socketAcceptor) {\n \t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, socketAcceptor);",
    "output": "Polish RSocketServerBootstrap bean name"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\n@@ -106,7 +106,7 @@ public RSocketServerFactory rSocketServerFactory(RSocketProperties properties,\n \t\t}\n \n \t\t@Bean\n-\t\tpublic RSocketServerBootstrap nettyRSocketBootstrap(\n+\t\tpublic RSocketServerBootstrap rSocketServerBootstrap(\n \t\t\t\tRSocketServerFactory rSocketServerFactory,\n \t\t\t\tSocketAcceptor socketAcceptor) {\n \t\t\treturn new RSocketServerBootstrap(rSocketServerFactory, socketAcceptor);",
    "output": "Polish RSocketServerBootstrap bean name"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n@@ -40,7 +40,7 @@ public final class GradleCompatibilitySuite extends Suite {\n \n \tprivate static final List<String> GRADLE_VERSIONS = Arrays.asList(\"default\", \"4.5.1\",\n \t\t\t\"4.6\", \"4.7\", \"4.8.1\", \"4.9\", \"4.10.3\", \"5.0\", \"5.1.1\", \"5.2.1\", \"5.3.1\",\n-\t\t\t\"5.4\");\n+\t\t\t\"5.4.1\");\n \n \tpublic GradleCompatibilitySuite(Class<?> clazz) throws InitializationError {\n \t\tsuper(clazz, createRunners(clazz));",
    "output": "Test the Gradle Plugin against Gradle 5.4.1"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesScanRegistrar.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesScanRegistrar.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesScanRegistrar.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesScanRegistrar.java\n@@ -114,11 +114,8 @@ private void validateScanConfiguration(Class<?> type) {\n \t\t\t\t.from(type, MergedAnnotations.SearchStrategy.EXHAUSTIVE)\n \t\t\t\t.get(Component.class);\n \t\tif (component.isPresent()) {\n-\t\t\tMergedAnnotation<?> parent = component;\n-\t\t\twhile (parent.getParent() != null) {\n-\t\t\t\tparent = parent.getParent();\n-\t\t\t}\n-\t\t\tthrow new InvalidConfigurationPropertiesException(type, parent.getType());\n+\t\t\tthrow new InvalidConfigurationPropertiesException(type,\n+\t\t\t\t\tcomponent.getRoot().getType());\n \t\t}\n \t}\n ",
    "output": "Use MergedAnnotation.getRoot() method"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/logging/LoggingApplicationListener.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/logging/LoggingApplicationListener.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/logging/LoggingApplicationListener.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/logging/LoggingApplicationListener.java\n@@ -135,6 +135,7 @@ public class LoggingApplicationListener implements GenericApplicationListener {\n \t\t\t\t\"org.springframework.boot.web.servlet.ServletContextInitializerBeans\");\n \t\tloggers.add(\"sql\", \"org.springframework.jdbc.core\");\n \t\tloggers.add(\"sql\", \"org.hibernate.SQL\");\n+\t\tloggers.add(\"sql\", \"org.jooq.tools.LoggerListener\");\n \t\tDEFAULT_GROUP_LOGGERS = Collections.unmodifiableMap(loggers);\n \t}\n ",
    "output": "Add jOOQ to SQL logging group\nAdd jOOQ to SQL logging group"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/logging/LoggingApplicationListener.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/logging/LoggingApplicationListener.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/logging/LoggingApplicationListener.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/logging/LoggingApplicationListener.java\n@@ -135,6 +135,7 @@ public class LoggingApplicationListener implements GenericApplicationListener {\n \t\t\t\t\"org.springframework.boot.web.servlet.ServletContextInitializerBeans\");\n \t\tloggers.add(\"sql\", \"org.springframework.jdbc.core\");\n \t\tloggers.add(\"sql\", \"org.hibernate.SQL\");\n+\t\tloggers.add(\"sql\", \"org.jooq.tools.LoggerListener\");\n \t\tDEFAULT_GROUP_LOGGERS = Collections.unmodifiableMap(loggers);\n \t}\n ",
    "output": "Add jOOQ to SQL logging group"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/it/jar-exclude-artifact/src/main/java/org/test/SampleApplication.java b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/it/jar-exclude-artifact/src/main/java/org/test/SampleApplication.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/it/jar-exclude-artifact/src/main/java/org/test/SampleApplication.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/it/jar-exclude-artifact/src/main/java/org/test/SampleApplication.java\n@@ -1,24 +0,0 @@\n-/*\n- * Copyright 2012-2017 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.test;\n-\n-public class SampleApplication {\n-\n-\tpublic static void main(String[] args) {\n-\t}\n-\n-}",
    "output": "Polish Maven Plugin's tests\nPolish Maven Plugin's tests"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/it/jar-exclude-artifact/src/main/java/org/test/SampleApplication.java b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/it/jar-exclude-artifact/src/main/java/org/test/SampleApplication.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/it/jar-exclude-artifact/src/main/java/org/test/SampleApplication.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/it/jar-exclude-artifact/src/main/java/org/test/SampleApplication.java\n@@ -1,24 +0,0 @@\n-/*\n- * Copyright 2012-2017 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      https://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.test;\n-\n-public class SampleApplication {\n-\n-\tpublic static void main(String[] args) {\n-\t}\n-\n-}",
    "output": "Polish Maven Plugin's tests"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowWebServer.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowWebServer.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowWebServer.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowWebServer.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2018 the original author or authors.\n+ * Copyright 2012-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -49,7 +49,7 @@\n  */\n public class UndertowWebServer implements WebServer {\n \n-\tprivate static final Log logger = LogFactory.getLog(UndertowServletWebServer.class);\n+\tprivate static final Log logger = LogFactory.getLog(UndertowWebServer.class);\n \n \tprivate final Object monitor = new Object();\n ",
    "output": "Fix UndertowWebServer's logger name\nFix UndertowWebServer's logger name"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowWebServer.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowWebServer.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowWebServer.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowWebServer.java\n@@ -49,7 +49,7 @@\n  */\n public class UndertowWebServer implements WebServer {\n \n-\tprivate static final Log logger = LogFactory.getLog(UndertowServletWebServer.class);\n+\tprivate static final Log logger = LogFactory.getLog(UndertowWebServer.class);\n \n \tprivate final Object monitor = new Object();\n ",
    "output": "Fix UndertowWebServer's logger name"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/StartupInfoLogger.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/StartupInfoLogger.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/StartupInfoLogger.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/StartupInfoLogger.java\n@@ -157,7 +157,7 @@ private void append(StringBuilder message, String prefix, Callable<Object> call,\n \t\t\tvalue = defaultValue;\n \t\t}\n \t\tif (StringUtils.hasLength(value)) {\n-\t\t\tmessage.append(message.length() > 0 ? \" \" : \"\");\n+\t\t\tmessage.append((message.length() > 0) ? \" \" : \"\");\n \t\t\tmessage.append(prefix);\n \t\t\tmessage.append(value);\n \t\t}",
    "output": "Fix checkstyle violation"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/StartupInfoLogger.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/StartupInfoLogger.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/StartupInfoLogger.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/StartupInfoLogger.java\n@@ -157,7 +157,7 @@ private void append(StringBuilder message, String prefix, Callable<Object> call,\n \t\t\tvalue = defaultValue;\n \t\t}\n \t\tif (StringUtils.hasLength(value)) {\n-\t\t\tmessage.append(message.length() > 0 ? \" \" : \"\");\n+\t\t\tmessage.append((message.length() > 0) ? \" \" : \"\");\n \t\t\tmessage.append(prefix);\n \t\t\tmessage.append(value);\n \t\t}",
    "output": "Fix checkstyle violation"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/CompressionCustomizer.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/CompressionCustomizer.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/CompressionCustomizer.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/CompressionCustomizer.java\n@@ -17,7 +17,9 @@\n package org.springframework.boot.web.embedded.netty;\n \n import java.util.Arrays;\n+import java.util.List;\n import java.util.function.BiPredicate;\n+import java.util.stream.Collectors;\n \n import io.netty.handler.codec.http.HttpHeaderNames;\n import io.netty.handler.codec.http.HttpHeaders;\n@@ -67,14 +69,18 @@ private CompressionPredicate getMimeTypesPredicate(String[] mimeTypes) {\n \t\tif (ObjectUtils.isEmpty(mimeTypes)) {\n \t\t\treturn ALWAYS_COMPRESS;\n \t\t}\n+\n+\t\tList<MimeType> mimeTypeList = Arrays.stream(mimeTypes)\n+\t\t\t\t.map(MimeTypeUtils::parseMimeType).collect(Collectors.toList());\n+\n \t\treturn (request, response) -> {\n \t\t\tString contentType = response.responseHeaders()\n \t\t\t\t\t.get(HttpHeaderNames.CONTENT_TYPE);\n \t\t\tif (StringUtils.isEmpty(contentType)) {\n \t\t\t\treturn false;\n \t\t\t}\n \t\t\tMimeType contentMimeType = MimeTypeUtils.parseMimeType(contentType);\n-\t\t\treturn Arrays.stream(mimeTypes).map(MimeTypeUtils::parseMimeType)\n+\t\t\treturn mimeTypeList.stream()\n \t\t\t\t\t.anyMatch((candidate) -> candidate.isCompatibleWith(contentMimeType));\n \t\t};\n \t}",
    "output": "Cache MimeTypes to improve performance"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n@@ -39,7 +39,8 @@\n public final class GradleCompatibilitySuite extends Suite {\n \n \tprivate static final List<String> GRADLE_VERSIONS = Arrays.asList(\"default\", \"4.5.1\",\n-\t\t\t\"4.6\", \"4.7\", \"4.8.1\", \"4.9\", \"4.10.3\", \"5.0\", \"5.1.1\", \"5.2.1\", \"5.3.1\");\n+\t\t\t\"4.6\", \"4.7\", \"4.8.1\", \"4.9\", \"4.10.3\", \"5.0\", \"5.1.1\", \"5.2.1\", \"5.3.1\",\n+\t\t\t\"5.4\");\n \n \tpublic GradleCompatibilitySuite(Class<?> clazz) throws InitializationError {\n \t\tsuper(clazz, createRunners(clazz));",
    "output": "Test the Gradle plugin against Gradle 5.4"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/json/JsonTestersAutoConfiguration.java b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/json/JsonTestersAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/json/JsonTestersAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/json/JsonTestersAutoConfiguration.java\n@@ -118,7 +118,7 @@ public FactoryBean<JsonbTester<?>> jsonbTesterFactoryBean(Jsonb jsonb) {\n \t/**\n \t * {@link FactoryBean} used to create JSON Tester instances.\n \t */\n-\tprivate static class JsonTesterFactoryBean<T, M> implements FactoryBean<T> {\n+\tstatic class JsonTesterFactoryBean<T, M> implements FactoryBean<T> {\n \n \t\tprivate final Class<?> objectType;\n \n@@ -166,7 +166,7 @@ public Class<?> getObjectType() {\n \t/**\n \t * {@link BeanPostProcessor} used to initialize JSON testers.\n \t */\n-\tprivate static class JsonMarshalTestersBeanPostProcessor\n+\tstatic class JsonMarshalTestersBeanPostProcessor\n \t\t\textends InstantiationAwareBeanPostProcessorAdapter {\n \n \t\t@Override",
    "output": "Make nested classes in JsonTestersAutoConfiguration package private"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/elasticsearch/ElasticsearchHealthIndicator.java b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/elasticsearch/ElasticsearchHealthIndicator.java\n--- a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/elasticsearch/ElasticsearchHealthIndicator.java\n+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/elasticsearch/ElasticsearchHealthIndicator.java\n@@ -35,7 +35,9 @@\n  * @author Binwei Yang\n  * @author Andy Wilkinson\n  * @since 2.0.0\n+ * @deprecated the transport client support is deprecated in favor of other clients\n  */\n+@Deprecated\n public class ElasticsearchHealthIndicator extends AbstractHealthIndicator {\n \n \tprivate static final String[] ALL_INDICES = { \"_all\" };",
    "output": "Deprecate ElasticsearchHealthIndicator\nSince the transport client has been deprecated in , the health\nindicator for that should be deprecated as well."
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/elasticsearch/ElasticsearchHealthIndicatorTests.java b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/elasticsearch/ElasticsearchHealthIndicatorTests.java\n--- a/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/elasticsearch/ElasticsearchHealthIndicatorTests.java\n+++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/elasticsearch/ElasticsearchHealthIndicatorTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2018 the original author or authors.\n+ * Copyright 2012-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -176,7 +176,7 @@ private StubClusterHealthResponse(ClusterHealthStatus status) {\n \t\t\tsuper(\"test-cluster\", new String[0],\n \t\t\t\t\tnew ClusterState(null, 0, null, null, RoutingTable.builder().build(),\n \t\t\t\t\t\t\tDiscoveryNodes.builder().build(),\n-\t\t\t\t\t\t\tClusterBlocks.builder().build(), null, false));\n+\t\t\t\t\t\t\tClusterBlocks.builder().build(), null, 1, false));\n \t\t\tthis.status = status;\n \t\t}\n ",
    "output": "Upgrade to Elasticsearch 6.7.1"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/rsocket/RSocketServerAutoConfiguration.java\n@@ -34,8 +34,8 @@\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.boot.context.properties.PropertyMapper;\n-import org.springframework.boot.rsocket.server.RSocketServerBootstrap;\n import org.springframework.boot.rsocket.netty.NettyRSocketServerFactory;\n+import org.springframework.boot.rsocket.server.RSocketServerBootstrap;\n import org.springframework.boot.rsocket.server.RSocketServerFactory;\n import org.springframework.boot.rsocket.server.ServerRSocketFactoryCustomizer;\n import org.springframework.boot.web.embedded.netty.NettyReactiveWebServerFactory;",
    "output": "Fix imports ordering"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/reactive/AbstractWebFluxEndpointHandlerMapping.java b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/reactive/AbstractWebFluxEndpointHandlerMapping.java\n--- a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/reactive/AbstractWebFluxEndpointHandlerMapping.java\n+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/reactive/AbstractWebFluxEndpointHandlerMapping.java\n@@ -22,7 +22,6 @@\n import java.util.Collections;\n import java.util.LinkedHashMap;\n import java.util.Map;\n-import java.util.Set;\n import java.util.function.Supplier;\n \n import org.reactivestreams.Publisher;\n@@ -66,7 +65,6 @@\n import org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping;\n import org.springframework.web.server.ResponseStatusException;\n import org.springframework.web.server.ServerWebExchange;\n-import org.springframework.web.util.pattern.PathPattern;\n import org.springframework.web.util.pattern.PathPatternParser;\n \n /**\n@@ -214,11 +212,6 @@ protected RequestMappingInfo getMappingForMethod(Method method,\n \t\treturn null;\n \t}\n \n-\t@Override\n-\tprotected Set<PathPattern> getMappingPathPatterns(RequestMappingInfo mapping) {\n-\t\treturn mapping.getPatternsCondition().getPatterns();\n-\t}\n-\n \t/**\n \t * Return the Handler providing actuator links at the root endpoint.\n \t * @return the links handler",
    "output": "Overriding getMappingPathPatterns is not required\nAfter a hierarchy change in Spring Framework in ,\n`AbstractWebFluxEndpointHandlerMapping` doesn't need to override the\n`getMappingPathPatterns` method anymore."
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/reactive/AbstractWebFluxEndpointHandlerMapping.java b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/reactive/AbstractWebFluxEndpointHandlerMapping.java\n--- a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/reactive/AbstractWebFluxEndpointHandlerMapping.java\n+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/reactive/AbstractWebFluxEndpointHandlerMapping.java\n@@ -22,6 +22,7 @@\n import java.util.Collections;\n import java.util.LinkedHashMap;\n import java.util.Map;\n+import java.util.Set;\n import java.util.function.Supplier;\n \n import org.reactivestreams.Publisher;\n@@ -65,6 +66,7 @@\n import org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping;\n import org.springframework.web.server.ResponseStatusException;\n import org.springframework.web.server.ServerWebExchange;\n+import org.springframework.web.util.pattern.PathPattern;\n import org.springframework.web.util.pattern.PathPatternParser;\n \n /**\n@@ -212,6 +214,11 @@ protected RequestMappingInfo getMappingForMethod(Method method,\n \t\treturn null;\n \t}\n \n+\t@Override\n+\tprotected Set<PathPattern> getMappingPathPatterns(RequestMappingInfo mapping) {\n+\t\treturn mapping.getPatternsCondition().getPatterns();\n+\t}\n+\n \t/**\n \t * Return the Handler providing actuator links at the root endpoint.\n \t * @return the links handler",
    "output": "Fix compilation error"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/reactive/AbstractWebFluxEndpointHandlerMapping.java b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/reactive/AbstractWebFluxEndpointHandlerMapping.java\n--- a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/reactive/AbstractWebFluxEndpointHandlerMapping.java\n+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/reactive/AbstractWebFluxEndpointHandlerMapping.java\n@@ -22,6 +22,7 @@\n import java.util.Collections;\n import java.util.LinkedHashMap;\n import java.util.Map;\n+import java.util.Set;\n import java.util.function.Supplier;\n \n import org.reactivestreams.Publisher;\n@@ -65,6 +66,7 @@\n import org.springframework.web.reactive.result.method.RequestMappingInfoHandlerMapping;\n import org.springframework.web.server.ResponseStatusException;\n import org.springframework.web.server.ServerWebExchange;\n+import org.springframework.web.util.pattern.PathPattern;\n import org.springframework.web.util.pattern.PathPatternParser;\n \n /**\n@@ -212,6 +214,11 @@ protected RequestMappingInfo getMappingForMethod(Method method,\n \t\treturn null;\n \t}\n \n+\t@Override\n+\tprotected Set<PathPattern> getMappingPathPatterns(RequestMappingInfo mapping) {\n+\t\treturn mapping.getPatternsCondition().getPatterns();\n+\t}\n+\n \t/**\n \t * Return the Handler providing actuator links at the root endpoint.\n \t * @return the links handler",
    "output": "Fix compilation error"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/AbstractErrorWebExceptionHandler.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/AbstractErrorWebExceptionHandler.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/AbstractErrorWebExceptionHandler.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/AbstractErrorWebExceptionHandler.java\n@@ -279,7 +279,7 @@ private boolean isDisconnectedClientError(Throwable ex) {\n \t}\n \n \tprivate boolean isDisconnectedClientErrorMessage(String message) {\n-\t\tmessage = message != null ? message.toLowerCase() : \"\";\n+\t\tmessage = (message != null) ? message.toLowerCase() : \"\";\n \t\treturn (message.contains(\"broken pipe\")\n \t\t\t\t|| message.contains(\"connection reset by peer\"));\n \t}",
    "output": "Fix checkstyle violation"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/solr/city/City.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/solr/city/City.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/solr/city/City.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/solr/city/City.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2017 the original author or authors.\n+ * Copyright 2012-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -23,7 +23,7 @@\n /**\n  * @author Christoph Strobl\n  */\n-@SolrDocument(solrCoreName = \"collection1\")\n+@SolrDocument(collection = \"collection1\")\n public class City {\n \n \t@Id",
    "output": "Avoid using deprecated @SolrDocument#solrCoreName"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/solr/city/City.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/solr/city/City.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/solr/city/City.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/solr/city/City.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2017 the original author or authors.\n+ * Copyright 2012-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -23,7 +23,7 @@\n /**\n  * @author Christoph Strobl\n  */\n-@SolrDocument(solrCoreName = \"collection1\")\n+@SolrDocument(collection = \"collection1\")\n public class City {\n \n \t@Id",
    "output": "Avoid using deprecated @SolrDocument#solrCoreName"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-cli/src/test/java/org/springframework/boot/cli/compiler/grape/AetherGrapeEngineTests.java b/spring-boot-project/spring-boot-cli/src/test/java/org/springframework/boot/cli/compiler/grape/AetherGrapeEngineTests.java\n--- a/spring-boot-project/spring-boot-cli/src/test/java/org/springframework/boot/cli/compiler/grape/AetherGrapeEngineTests.java\n+++ b/spring-boot-project/spring-boot-cli/src/test/java/org/springframework/boot/cli/compiler/grape/AetherGrapeEngineTests.java\n@@ -141,9 +141,12 @@ public void dependencyResolutionWithCustomClassLoader() {\n \tpublic void resolutionWithCustomResolver() {\n \t\tMap<String, Object> args = new HashMap<>();\n \t\tAetherGrapeEngine grapeEngine = this.createGrapeEngine();\n-\t\tgrapeEngine\n-\t\t\t\t.addResolver(createResolver(\"restlet.org\", \"https://maven.restlet.org\"));\n-\t\tgrapeEngine.grab(args, createDependency(\"org.restlet\", \"org.restlet\", \"1.1.6\"));\n+\t\tgrapeEngine.addResolver(\n+\t\t\t\tcreateResolver(\"spring-releases\", \"https://repo.spring.io/release\"));\n+\t\tMap<String, Object> dependency = createDependency(\"io.spring.docresources\",\n+\t\t\t\t\"spring-doc-resources\", \"0.1.1.RELEASE\");\n+\t\tdependency.put(\"ext\", \"zip\");\n+\t\tgrapeEngine.grab(args, dependency);\n \t\tassertThat(this.groovyClassLoader.getURLs().length).isEqualTo(1);\n \t}\n ",
    "output": "Switch custom repository to one with JDK 9-friendly SSL certification chain"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n@@ -39,7 +39,7 @@\n public final class GradleCompatibilitySuite extends Suite {\n \n \tprivate static final List<String> GRADLE_VERSIONS = Arrays.asList(\"default\", \"4.5.1\",\n-\t\t\t\"4.6\", \"4.7\", \"4.8.1\", \"4.9\", \"4.10.3\", \"5.0\", \"5.1.1\", \"5.2.1\", \"5.3\");\n+\t\t\t\"4.6\", \"4.7\", \"4.8.1\", \"4.9\", \"4.10.3\", \"5.0\", \"5.1.1\", \"5.2.1\", \"5.3.1\");\n \n \tpublic GradleCompatibilitySuite(Class<?> clazz) throws InitializationError {\n \t\tsuper(clazz, createRunners(clazz));",
    "output": "Test against Gradle 5.3.1"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RepackageMojo.java b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RepackageMojo.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RepackageMojo.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RepackageMojo.java\n@@ -86,13 +86,6 @@ public class RepackageMojo extends AbstractDependencyFilterMojo {\n \t@Parameter(defaultValue = \"${project.build.directory}\", required = true)\n \tprivate File outputDirectory;\n \n-\t/**\n-\t * Name of the generated archive.\n-\t * @since 1.0\n-\t */\n-\t@Parameter(defaultValue = \"${project.build.finalName}\", readonly = true)\n-\tprivate String finalName;\n-\n \t/**\n \t * Skip the execution.\n \t * @since 1.2",
    "output": "Remove deprecated finalName attribute"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RepackageMojo.java b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RepackageMojo.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RepackageMojo.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RepackageMojo.java\n@@ -263,7 +263,8 @@ private File getTargetFile() {\n \t\tif (!this.outputDirectory.exists()) {\n \t\t\tthis.outputDirectory.mkdirs();\n \t\t}\n-\t\treturn new File(this.outputDirectory, this.finalName + classifier + \".\"\n+\t\tString finalName = this.project.getBuild().getFinalName();\n+\t\treturn new File(this.outputDirectory, finalName + classifier + \".\"\n \t\t\t\t+ this.project.getArtifact().getArtifactHandler().getExtension());\n \t}\n ",
    "output": "Make sure custom finalName is ignored\nA read-only plugin parameter can still be set by the user which leads\nto an invalid repackaged archive. This commit actually ignores the field\nand uses the standard attribute instead."
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java\n@@ -77,7 +77,7 @@\n  */\n @Configuration\n @EnableConfigurationProperties(ThymeleafProperties.class)\n-@ConditionalOnClass(TemplateMode.class)\n+@ConditionalOnClass({ TemplateMode.class, SpringTemplateEngine.class })\n @AutoConfigureAfter({ WebMvcAutoConfiguration.class, WebFluxAutoConfiguration.class })\n public class ThymeleafAutoConfiguration {\n ",
    "output": "Add missing class condition on thymeleaf-spring5"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jPropertiesTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jPropertiesTests.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jPropertiesTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jPropertiesTests.java\n@@ -112,7 +112,8 @@ public void credentialsAreSetFromUri() {\n \t\tNeo4jProperties properties = load(true,\n \t\t\t\t\"spring.data.neo4j.uri=https://user:secret@my-server:7474\");\n \t\tConfiguration configuration = properties.createConfiguration();\n-\t\tassertDriver(configuration, Neo4jProperties.HTTP_DRIVER, \"https://my-server:7474\");\n+\t\tassertDriver(configuration, Neo4jProperties.HTTP_DRIVER,\n+\t\t\t\t\"https://my-server:7474\");\n \t\tassertCredentials(configuration, \"user\", \"secret\");\n \t}\n ",
    "output": "Use HTTPS for external links wherever possible"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/TestJarCreator.java b/spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/TestJarCreator.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/TestJarCreator.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/TestJarCreator.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2018 the original author or authors.\n+ * Copyright 2012-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -95,6 +95,7 @@ private static byte[] getNestedJarData(boolean multiRelease) throws Exception {\n \t\t\twriteEntry(jarOutputStream, \"META-INF/versions/9/multi-release.dat\", 9);\n \t\t\twriteEntry(jarOutputStream, \"META-INF/versions/10/multi-release.dat\", 10);\n \t\t\twriteEntry(jarOutputStream, \"META-INF/versions/11/multi-release.dat\", 11);\n+\t\t\twriteEntry(jarOutputStream, \"META-INF/versions/12/multi-release.dat\", 12);\n \t\t}\n \t\telse {\n \t\t\twriteEntry(jarOutputStream, \"3.dat\", 3);",
    "output": "Upgrade multi release test jar to include Java 12"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n@@ -39,7 +39,7 @@\n public final class GradleCompatibilitySuite extends Suite {\n \n \tprivate static final List<String> GRADLE_VERSIONS = Arrays.asList(\"default\", \"4.5.1\",\n-\t\t\t\"4.6\", \"4.7\", \"4.8.1\", \"4.9\", \"4.10.3\", \"5.0\", \"5.1.1\", \"5.2.1\", \"5.3-rc-3\");\n+\t\t\t\"4.6\", \"4.7\", \"4.8.1\", \"4.9\", \"4.10.3\", \"5.0\", \"5.1.1\", \"5.2.1\", \"5.3\");\n \n \tpublic GradleCompatibilitySuite(Class<?> clazz) throws InitializationError {\n \t\tsuper(clazz, createRunners(clazz));",
    "output": "Test against Gradle 5.3"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n@@ -39,7 +39,7 @@\n public final class GradleCompatibilitySuite extends Suite {\n \n \tprivate static final List<String> GRADLE_VERSIONS = Arrays.asList(\"default\", \"4.5.1\",\n-\t\t\t\"4.6\", \"4.7\", \"4.8.1\", \"4.9\", \"4.10.3\", \"5.0\", \"5.1.1\", \"5.2.1\", \"5.3-rc-3\");\n+\t\t\t\"4.6\", \"4.7\", \"4.8.1\", \"4.9\", \"4.10.3\", \"5.0\", \"5.1.1\", \"5.2.1\", \"5.3\");\n \n \tpublic GradleCompatibilitySuite(Class<?> clazz) throws InitializationError {\n \t\tsuper(clazz, createRunners(clazz));",
    "output": "Test against Gradle 5.3"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n@@ -39,7 +39,7 @@\n public final class GradleCompatibilitySuite extends Suite {\n \n \tprivate static final List<String> GRADLE_VERSIONS = Arrays.asList(\"default\", \"4.5.1\",\n-\t\t\t\"4.6\", \"4.7\", \"4.8.1\", \"4.9\", \"4.10.3\", \"5.0\", \"5.1.1\", \"5.2.1\");\n+\t\t\t\"4.6\", \"4.7\", \"4.8.1\", \"4.9\", \"4.10.3\", \"5.0\", \"5.1.1\", \"5.2.1\", \"5.3-rc-3\");\n \n \tpublic GradleCompatibilitySuite(Class<?> clazz) throws InitializationError {\n \t\tsuper(clazz, createRunners(clazz));",
    "output": "Test the Gradle plugin against Gradle 5.3-rc-3"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration.java\n@@ -449,10 +449,9 @@ private List<Resource> resolveFaviconLocations() {\n \n \t\t}\n \n-\t\tprivate static final class FaviconRequestHandler\n-\t\t\t\textends ResourceHttpRequestHandler {\n+\t\tstatic final class FaviconRequestHandler extends ResourceHttpRequestHandler {\n \n-\t\t\tprivate FaviconRequestHandler(List<Resource> locations) {\n+\t\t\tFaviconRequestHandler(List<Resource> locations) {\n \t\t\t\tsetLocations(locations);\n \t\t\t}\n ",
    "output": "Switch FaviconRequestHandler visibility to package private"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfiguration.java\n@@ -449,10 +449,9 @@ private List<Resource> resolveFaviconLocations() {\n \n \t\t}\n \n-\t\tprivate static final class FaviconRequestHandler\n-\t\t\t\textends ResourceHttpRequestHandler {\n+\t\tstatic final class FaviconRequestHandler extends ResourceHttpRequestHandler {\n \n-\t\t\tprivate FaviconRequestHandler(List<Resource> locations) {\n+\t\t\tFaviconRequestHandler(List<Resource> locations) {\n \t\t\t\tsetLocations(locations);\n \t\t\t}\n ",
    "output": "Switch FaviconRequestHandler visibility to package private"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/jmx/DefaultEndpointObjectNameFactoryTests.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/jmx/DefaultEndpointObjectNameFactoryTests.java\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/jmx/DefaultEndpointObjectNameFactoryTests.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/jmx/DefaultEndpointObjectNameFactoryTests.java\n@@ -42,8 +42,7 @@ public class DefaultEndpointObjectNameFactoryTests {\n \n \tprivate final MockEnvironment environment = new MockEnvironment();\n \n-\tprivate final JmxEndpointProperties properties = new JmxEndpointProperties(\n-\t\t\tthis.environment);\n+\tprivate final JmxEndpointProperties properties = new JmxEndpointProperties();\n \n \tprivate final MBeanServer mBeanServer = mock(MBeanServer.class);\n ",
    "output": "Fix build failure"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/jmx/DefaultEndpointObjectNameFactory.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/jmx/DefaultEndpointObjectNameFactory.java\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/jmx/DefaultEndpointObjectNameFactory.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/jmx/DefaultEndpointObjectNameFactory.java\n@@ -81,7 +81,7 @@ private String determineDomain() {\n \t\treturn this.environment.getProperty(\"spring.jmx.default-domain\",\n \t\t\t\t\"org.springframework.boot\");\n \t}\n-\t\n+\n \tprivate boolean hasMBean(String baseObjectName) throws MalformedObjectNameException {\n \t\tObjectName query = new ObjectName(baseObjectName + \",*\");\n \t\treturn !this.mBeanServer.queryNames(query, null).isEmpty();",
    "output": "Fix checkstyle violation"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-configuration-docs/src/main/java/org/springframework/boot/configurationdocs/SingleKeyEntry.java b/spring-boot-project/spring-boot-tools/spring-boot-configuration-docs/src/main/java/org/springframework/boot/configurationdocs/SingleKeyEntry.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-configuration-docs/src/main/java/org/springframework/boot/configurationdocs/SingleKeyEntry.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-docs/src/main/java/org/springframework/boot/configurationdocs/SingleKeyEntry.java\n@@ -57,7 +57,7 @@ class SingleKeyEntry extends AbstractConfigurationEntry {\n \tpublic void writeAsciidoc(StringBuilder builder) {\n \t\tbuilder.append(\"|`+\").append(this.key).append(\"+`\").append(NEWLINE);\n \t\tString defaultValue = processDefaultValue();\n-\t\tif (defaultValue.length() > 0) {\n+\t\tif (!defaultValue.isEmpty()) {\n \t\t\tbuilder.append(\"|`+\").append(defaultValue).append(\"+`\").append(NEWLINE);\n \t\t}\n \t\telse {\n@@ -73,7 +73,7 @@ public void writeAsciidoc(StringBuilder builder) {\n \t}\n \n \tprivate String processDefaultValue() {\n-\t\tif (this.defaultValue != null && this.defaultValue.length() > 0) {\n+\t\tif (this.defaultValue != null && !this.defaultValue.isEmpty()) {\n \t\t\treturn this.defaultValue.replace(\"\\\\\", \"\\\\\\\\\").replace(\"|\",\n \t\t\t\t\t\"{vbar}\" + NEWLINE);\n \t\t}",
    "output": "Use isEmpty() where possible"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-configuration-docs/src/main/java/org/springframework/boot/configurationdocs/SingleKeyEntry.java b/spring-boot-project/spring-boot-tools/spring-boot-configuration-docs/src/main/java/org/springframework/boot/configurationdocs/SingleKeyEntry.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-configuration-docs/src/main/java/org/springframework/boot/configurationdocs/SingleKeyEntry.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-docs/src/main/java/org/springframework/boot/configurationdocs/SingleKeyEntry.java\n@@ -57,7 +57,7 @@ class SingleKeyEntry extends AbstractConfigurationEntry {\n \tpublic void writeAsciidoc(StringBuilder builder) {\n \t\tbuilder.append(\"|`+\").append(this.key).append(\"+`\").append(NEWLINE);\n \t\tString defaultValue = processDefaultValue();\n-\t\tif (defaultValue.length() > 0) {\n+\t\tif (!defaultValue.isEmpty()) {\n \t\t\tbuilder.append(\"|`+\").append(defaultValue).append(\"+`\").append(NEWLINE);\n \t\t}\n \t\telse {\n@@ -73,7 +73,7 @@ public void writeAsciidoc(StringBuilder builder) {\n \t}\n \n \tprivate String processDefaultValue() {\n-\t\tif (this.defaultValue != null && this.defaultValue.length() > 0) {\n+\t\tif (this.defaultValue != null && !this.defaultValue.isEmpty()) {\n \t\t\treturn this.defaultValue.replace(\"\\\\\", \"\\\\\\\\\").replace(\"|\",\n \t\t\t\t\t\"{vbar}\" + NEWLINE);\n \t\t}",
    "output": "Use isEmpty() where possible"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnClassCondition.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnClassCondition.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnClassCondition.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnClassCondition.java\n@@ -49,6 +49,25 @@ protected final ConditionOutcome[] getOutcomes(String[] autoConfigurationClasses\n \t\t// Split the work and perform half in a background thread. Using a single\n \t\t// additional thread seems to offer the best performance. More threads make\n \t\t// things worse\n+\t\tif (Runtime.getRuntime().availableProcessors() > 1) {\n+\t\t\treturn resolveOutcomesThreaded(autoConfigurationClasses,\n+\t\t\t\t\tautoConfigurationMetadata);\n+\t\t}\n+\t\telse {\n+\t\t\treturn resolveOutcomes(autoConfigurationClasses, autoConfigurationMetadata);\n+\t\t}\n+\t}\n+\n+\tprivate ConditionOutcome[] resolveOutcomes(String[] autoConfigurationClasses,\n+\t\t\tAutoConfigurationMetadata autoConfigurationMetadata) {\n+\t\tOutcomesResolver outcomesResolver = createOutcomesResolver(\n+\t\t\t\tautoConfigurationClasses, 0, autoConfigurationClasses.length,\n+\t\t\t\tautoConfigurationMetadata);\n+\t\treturn outcomesResolver.resolveOutcomes();\n+\t}\n+\n+\tprivate ConditionOutcome[] resolveOutcomesThreaded(String[] autoConfigurationClasses,\n+\t\t\tAutoConfigurationMetadata autoConfigurationMetadata) {\n \t\tint split = autoConfigurationClasses.length / 2;\n \t\tOutcomesResolver firstHalfResolver = createOutcomesResolver(\n \t\t\t\tautoConfigurationClasses, 0, split, autoConfigurationMetadata);",
    "output": "Check for multiple processors in OnClassCondition"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java\n--- a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java\n+++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java\n@@ -185,9 +185,9 @@ public void sourcesMustNotBeEmpty() {\n \n \t@Test\n \tpublic void sourcesMustBeAccessible() {\n-\t\tassertThatIllegalStateException().isThrownBy(\n+\t\tassertThatIllegalArgumentException().isThrownBy(\n \t\t\t\t() -> new SpringApplication(InaccessibleConfiguration.class).run())\n-\t\t\t\t.withMessageContaining(\"Cannot load configuration\");\n+\t\t\t\t.withMessageContaining(\"No visible constructors\");\n \t}\n \n \t@Test",
    "output": "Align test with change to exception in latest Framework snapshots"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactoryTests.java b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactoryTests.java\n--- a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactoryTests.java\n+++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactoryTests.java\n@@ -30,7 +30,6 @@\n import java.util.concurrent.atomic.AtomicReference;\n \n import javax.net.ssl.SSLException;\n-import javax.net.ssl.SSLHandshakeException;\n \n import io.undertow.Undertow.Builder;\n import io.undertow.servlet.api.DeploymentInfo;\n@@ -209,8 +208,8 @@ protected void addConnector(int port, AbstractServletWebServerFactory factory) {\n \n \t@Test\n \tpublic void sslRestrictedProtocolsEmptyCipherFailure() throws Exception {\n-\t\tthis.thrown.expect(anyOf(instanceOf(SSLHandshakeException.class),\n-\t\t\t\tinstanceOf(SocketException.class)));\n+\t\tthis.thrown.expect(\n+\t\t\t\tanyOf(instanceOf(SSLException.class), instanceOf(SocketException.class)));\n \t\ttestRestrictedSSLProtocolsAndCipherSuites(new String[] { \"TLSv1.2\" },\n \t\t\t\tnew String[] { \"TLS_EMPTY_RENEGOTIATION_INFO_SCSV\" });\n \t}",
    "output": "Polish Undertow tests"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/integrationtest/HttpTunnelIntegrationTests.java b/spring-boot-project/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/integrationtest/HttpTunnelIntegrationTests.java\n--- a/spring-boot-project/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/integrationtest/HttpTunnelIntegrationTests.java\n+++ b/spring-boot-project/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/integrationtest/HttpTunnelIntegrationTests.java\n@@ -128,7 +128,7 @@ public DispatcherFilter filter(\n \n \t}\n \n-\t@Configuration\n+\t@org.springframework.context.annotation.Configuration\n \tstatic class TunnelConfiguration {\n \n \t\t@Bean",
    "output": "Work around javac bug"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java\n--- a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java\n+++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java\n@@ -106,6 +106,7 @@ public void setup() {\n \tpublic void clear() {\n \t\tsuper.clear();\n \t\tthis.loggingSystem.cleanUp();\n+\t\t((LoggerContext) StaticLoggerBinder.getSingleton().getLoggerFactory()).stop();\n \t}\n \n \t@Test",
    "output": "Isolate LoggerContext state to each test"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java b/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2018 the original author or authors.\n+ * Copyright 2012-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -128,8 +128,9 @@ public void withFile() throws Exception {\n \t}\n \n \t@Test\n-\tpublic void testBasicConfigLocation() throws Exception {\n+\tpublic void defaultConfigConfiguresAConsoleAppender() throws Exception {\n \t\tthis.loggingSystem.beforeInitialize();\n+\t\tthis.loggingSystem.initialize(this.initializationContext, null, null);\n \t\tILoggerFactory factory = StaticLoggerBinder.getSingleton().getLoggerFactory();\n \t\tLoggerContext context = (LoggerContext) factory;\n \t\tLogger root = context.getLogger(org.slf4j.Logger.ROOT_LOGGER_NAME);",
    "output": "Remove reliance on side-effects in LogbackLoggingSystemTests"
  },
  {
    "input": "diff --git a/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/json/JsonExcludeFilter.java b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/json/JsonExcludeFilter.java\n--- a/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/json/JsonExcludeFilter.java\n+++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/json/JsonExcludeFilter.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2017 the original author or authors.\n+ * Copyright 2012-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -34,18 +34,20 @@\n  */\n class JsonExcludeFilter extends AnnotationCustomizableTypeExcludeFilter {\n \n+\tprivate static final String JACKSON_MODULE = \"com.fasterxml.jackson.databind.Module\";\n+\n \tprivate static final Set<Class<?>> DEFAULT_INCLUDES;\n \n \tstatic {\n \t\tSet<Class<?>> includes = new LinkedHashSet<Class<?>>();\n-\t\tincludes.add(JsonComponent.class);\n \t\ttry {\n-\t\t\tincludes.add(ClassUtils.forName(\"com.fasterxml.jackson.databind.Module\", null));\n-\t\t} catch (Exception ex) {\n-\t\t\t// Ignore\n+\t\t\tincludes.add(ClassUtils.forName(JACKSON_MODULE, null));\n+\t\t}\n+\t\tcatch (Exception ex) {\n \t\t}\n+\t\tincludes.add(JsonComponent.class);\n \t\tDEFAULT_INCLUDES = Collections.unmodifiableSet(includes);\n-\t};\n+\t}\n \n \tprivate final JsonTest annotation;\n ",
    "output": "Permit use of @JsonTest without Jackson"
  },
  {
    "input": "diff --git a/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/json/JsonExcludeFilter.java b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/json/JsonExcludeFilter.java\n--- a/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/json/JsonExcludeFilter.java\n+++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/json/JsonExcludeFilter.java\n@@ -20,13 +20,12 @@\n import java.util.LinkedHashSet;\n import java.util.Set;\n \n-import com.fasterxml.jackson.databind.Module;\n-\n import org.springframework.boot.context.TypeExcludeFilter;\n import org.springframework.boot.jackson.JsonComponent;\n import org.springframework.boot.test.autoconfigure.filter.AnnotationCustomizableTypeExcludeFilter;\n import org.springframework.context.annotation.ComponentScan.Filter;\n import org.springframework.core.annotation.AnnotatedElementUtils;\n+import org.springframework.util.ClassUtils;\n \n /**\n  * {@link TypeExcludeFilter} for {@link JsonTest @JsonTest}.\n@@ -39,8 +38,12 @@ class JsonExcludeFilter extends AnnotationCustomizableTypeExcludeFilter {\n \n \tstatic {\n \t\tSet<Class<?>> includes = new LinkedHashSet<Class<?>>();\n-\t\tincludes.add(Module.class);\n \t\tincludes.add(JsonComponent.class);\n+\t\ttry {\n+\t\t\tincludes.add(ClassUtils.forName(\"com.fasterxml.jackson.databind.Module\", null));\n+\t\t} catch (Exception ex) {\n+\t\t\t// Ignore\n+\t\t}\n \t\tDEFAULT_INCLUDES = Collections.unmodifiableSet(includes);\n \t};\n ",
    "output": "Permit use of @JsonTest without Jackson"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TldSkipPatterns.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TldSkipPatterns.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TldSkipPatterns.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TldSkipPatterns.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2017 the original author or authors.\n+ * Copyright 2012-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -50,6 +50,7 @@ final class TldSkipPatterns {\n \t\tpatterns.add(\"h2*.jar\");\n \t\tpatterns.add(\"hamcrest*.jar\");\n \t\tpatterns.add(\"hibernate*.jar\");\n+\t\tpatterns.add(\"jaxb-runtime-*.jar\");\n \t\tpatterns.add(\"jmx*.jar\");\n \t\tpatterns.add(\"jmx-tools-*.jar\");\n \t\tpatterns.add(\"jta*.jar\");",
    "output": "Add `jaxb-runtime` to TldSkipPatterns\nAdd `jaxb-runtime` to TldSkipPatterns"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TldSkipPatterns.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TldSkipPatterns.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TldSkipPatterns.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TldSkipPatterns.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2017 the original author or authors.\n+ * Copyright 2012-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -50,7 +50,7 @@ final class TldSkipPatterns {\n \t\tpatterns.add(\"h2*.jar\");\n \t\tpatterns.add(\"hamcrest*.jar\");\n \t\tpatterns.add(\"hibernate*.jar\");\n-\t\tpatterns.add(\"jaxb-*.jar\");\n+\t\tpatterns.add(\"jaxb-runtime-*.jar\");\n \t\tpatterns.add(\"jmx*.jar\");\n \t\tpatterns.add(\"jmx-tools-*.jar\");\n \t\tpatterns.add(\"jta*.jar\");",
    "output": "Add `jaxb-runtime` to TldSkipPatterns"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TldSkipPatterns.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TldSkipPatterns.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TldSkipPatterns.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TldSkipPatterns.java\n@@ -50,6 +50,7 @@ final class TldSkipPatterns {\n \t\tpatterns.add(\"h2*.jar\");\n \t\tpatterns.add(\"hamcrest*.jar\");\n \t\tpatterns.add(\"hibernate*.jar\");\n+\t\tpatterns.add(\"jaxb-*.jar\");\n \t\tpatterns.add(\"jmx*.jar\");\n \t\tpatterns.add(\"jmx-tools-*.jar\");\n \t\tpatterns.add(\"jta*.jar\");",
    "output": "Add `jaxb-runtime` to TldSkipPatterns"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java\n@@ -110,7 +110,6 @@ public Flyway flyway(FlywayProperties properties,\n \t\t\t\tDataSourceProperties dataSourceProperties, ResourceLoader resourceLoader,\n \t\t\t\tObjectProvider<DataSource> dataSource,\n \t\t\t\t@FlywayDataSource ObjectProvider<DataSource> flywayDataSource,\n-\t\t\t\tObjectProvider<FlywayMigrationStrategy> migrationStrategy,\n \t\t\t\tObjectProvider<FlywayConfigurationCustomizer> fluentConfigurationCustomizers,\n \t\t\t\tObjectProvider<Callback> callbacks,\n \t\t\t\tObjectProvider<FlywayCallback> flywayCallbacks) {",
    "output": "Remove unused constructor argument"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java\n@@ -110,7 +110,6 @@ public Flyway flyway(FlywayProperties properties,\n \t\t\t\tDataSourceProperties dataSourceProperties, ResourceLoader resourceLoader,\n \t\t\t\tObjectProvider<DataSource> dataSource,\n \t\t\t\t@FlywayDataSource ObjectProvider<DataSource> flywayDataSource,\n-\t\t\t\tObjectProvider<FlywayMigrationStrategy> migrationStrategy,\n \t\t\t\tObjectProvider<FlywayConfigurationCustomizer> fluentConfigurationCustomizers,\n \t\t\t\tObjectProvider<Callback> callbacks,\n \t\t\t\tObjectProvider<FlywayCallback> flywayCallbacks) {",
    "output": "Remove unused constructor argument"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java\n--- a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java\n+++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/logging/LoggingApplicationListenerTests.java\n@@ -317,12 +317,12 @@ public void parseDebugArg() {\n \n \t@Test\n \tpublic void parseDebugArgExpandGroups() {\n-\t\tTestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.context, \"debug\");\n+\t\taddPropertiesToEnvironment(this.context, \"debug\");\n \t\tthis.initializer.initialize(this.context.getEnvironment(),\n \t\t\t\tthis.context.getClassLoader());\n-\t\tthis.logFactory.getInstance(\"org.springframework.boot.actuate.endpoint.web\")\n+\t\tthis.loggerContext.getLogger(\"org.springframework.boot.actuate.endpoint.web\")\n \t\t\t\t.debug(\"testdebugwebgroup\");\n-\t\tthis.logFactory.getInstance(\"org.hibernate.SQL\").debug(\"testdebugsqlgroup\");\n+\t\tthis.loggerContext.getLogger(\"org.hibernate.SQL\").debug(\"testdebugsqlgroup\");\n \t\tassertThat(this.outputCapture.toString()).contains(\"testdebugwebgroup\");\n \t\tassertThat(this.outputCapture.toString()).contains(\"testdebugsqlgroup\");\n \t}",
    "output": "Fix build failure"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/task/TaskSchedulingAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/task/TaskSchedulingAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/task/TaskSchedulingAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/task/TaskSchedulingAutoConfiguration.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2018 the original author or authors.\n+ * Copyright 2012-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -19,6 +19,7 @@\n import java.util.concurrent.ScheduledExecutorService;\n \n import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n@@ -42,6 +43,7 @@\n @ConditionalOnClass(ThreadPoolTaskScheduler.class)\n @Configuration\n @EnableConfigurationProperties(TaskSchedulingProperties.class)\n+@AutoConfigureAfter(TaskExecutionAutoConfiguration.class)\n public class TaskSchedulingAutoConfiguration {\n \n \t@Bean",
    "output": "Polish contribution\nOrder TaskExecution auto-config before TaskScheduling auto-config"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/task/TaskSchedulingAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/task/TaskSchedulingAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/task/TaskSchedulingAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/task/TaskSchedulingAutoConfiguration.java\n@@ -19,6 +19,7 @@\n import java.util.concurrent.ScheduledExecutorService;\n \n import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n@@ -42,6 +43,7 @@\n @ConditionalOnClass(ThreadPoolTaskScheduler.class)\n @Configuration\n @EnableConfigurationProperties(TaskSchedulingProperties.class)\n+@AutoConfigureAfter(TaskExecutionAutoConfiguration.class)\n public class TaskSchedulingAutoConfiguration {\n \n \t@Bean",
    "output": "Order TaskExecution auto-config before TaskScheduling auto-config"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-jersey/src/test/java/sample/jersey/JerseyApplicationPathAndManagementPortTests.java b/spring-boot-samples/spring-boot-sample-jersey/src/test/java/sample/jersey/JerseyApplicationPathAndManagementPortTests.java\n--- a/spring-boot-samples/spring-boot-sample-jersey/src/test/java/sample/jersey/JerseyApplicationPathAndManagementPortTests.java\n+++ b/spring-boot-samples/spring-boot-sample-jersey/src/test/java/sample/jersey/JerseyApplicationPathAndManagementPortTests.java\n@@ -59,4 +59,3 @@ public void applicationPathShouldNotAffectActuators() {\n \t}\n \n }\n-",
    "output": "Fix formatting violations in sample"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/embedded/EmbeddedMongoAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/embedded/EmbeddedMongoAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/embedded/EmbeddedMongoAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/embedded/EmbeddedMongoAutoConfiguration.java\n@@ -212,7 +212,7 @@ public IRuntimeConfig embeddedMongoRuntimeConfig() {\n \t\t\t\t\t\t\t\"[console>]\", Processors.logTo(logger, Slf4jLevel.DEBUG)));\n \t\t\treturn new RuntimeConfigBuilder().defaultsWithLogger(Command.MongoD, logger)\n \t\t\t\t\t.processOutput(processOutput).artifactStore(getArtifactStore(logger))\n-\t\t\t\t\t.build();\n+\t\t\t\t\t.daemonProcess(false).build();\n \t\t}\n \n \t\tprivate ArtifactStoreBuilder getArtifactStore(Logger logger) {",
    "output": "Fix stopping of Embedded Mongo before context is closed"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/logback/SpringPropertyAction.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/logback/SpringPropertyAction.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/logback/SpringPropertyAction.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/logback/SpringPropertyAction.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2018 the original author or authors.\n+ * Copyright 2012-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -65,17 +65,7 @@ private String getValue(String source, String defaultValue) {\n \t\t\taddWarn(\"No Spring Environment available to resolve \" + source);\n \t\t\treturn defaultValue;\n \t\t}\n-\t\tString value = this.environment.getProperty(source);\n-\t\tif (value != null) {\n-\t\t\treturn value;\n-\t\t}\n-\t\tint lastDot = source.lastIndexOf('.');\n-\t\tif (lastDot > 0) {\n-\t\t\tString prefix = source.substring(0, lastDot + 1);\n-\t\t\treturn this.environment.getProperty(prefix + source.substring(lastDot + 1),\n-\t\t\t\t\tdefaultValue);\n-\t\t}\n-\t\treturn defaultValue;\n+\t\treturn this.environment.getProperty(source, defaultValue);\n \t}\n \n \t@Override",
    "output": "Clean up SpringPropertyAction.getValue()"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/logback/SpringPropertyAction.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/logback/SpringPropertyAction.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/logback/SpringPropertyAction.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/logback/SpringPropertyAction.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2018 the original author or authors.\n+ * Copyright 2012-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -65,17 +65,7 @@ private String getValue(String source, String defaultValue) {\n \t\t\taddWarn(\"No Spring Environment available to resolve \" + source);\n \t\t\treturn defaultValue;\n \t\t}\n-\t\tString value = this.environment.getProperty(source);\n-\t\tif (value != null) {\n-\t\t\treturn value;\n-\t\t}\n-\t\tint lastDot = source.lastIndexOf('.');\n-\t\tif (lastDot > 0) {\n-\t\t\tString prefix = source.substring(0, lastDot + 1);\n-\t\t\treturn this.environment.getProperty(prefix + source.substring(lastDot + 1),\n-\t\t\t\t\tdefaultValue);\n-\t\t}\n-\t\treturn defaultValue;\n+\t\treturn this.environment.getProperty(source, defaultValue);\n \t}\n \n \t@Override",
    "output": "Clean up SpringPropertyAction.getValue()"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n@@ -39,7 +39,7 @@\n public final class GradleCompatibilitySuite extends Suite {\n \n \tprivate static final List<String> GRADLE_VERSIONS = Arrays.asList(\"default\", \"4.5.1\",\n-\t\t\t\"4.6\", \"4.7\", \"4.8.1\", \"4.9\", \"4.10.3\", \"5.0\", \"5.1.1\");\n+\t\t\t\"4.6\", \"4.7\", \"4.8.1\", \"4.9\", \"4.10.3\", \"5.0\", \"5.1.1\", \"5.2.1\");\n \n \tpublic GradleCompatibilitySuite(Class<?> clazz) throws InitializationError {\n \t\tsuper(clazz, createRunners(clazz));",
    "output": "Test the Gradle plugin against Gradle 5.2.1"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactoryTests.java b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactoryTests.java\n--- a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactoryTests.java\n+++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactoryTests.java\n@@ -214,7 +214,8 @@ public void sslRestrictedProtocolsEmptyCipherFailure() throws Exception {\n \t\t\t\t.isThrownBy(() -> testRestrictedSSLProtocolsAndCipherSuites(\n \t\t\t\t\t\tnew String[] { \"TLSv1.2\" },\n \t\t\t\t\t\tnew String[] { \"TLS_EMPTY_RENEGOTIATION_INFO_SCSV\" }))\n-\t\t\t\t.isInstanceOfAny(SSLHandshakeException.class, SocketException.class);\n+\t\t\t\t.isInstanceOfAny(SSLException.class, SSLHandshakeException.class,\n+\t\t\t\t\t\tSocketException.class);\n \t}\n \n \t@Test",
    "output": "Upgrade to Californium-BUILD-SNAPSHOT"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/JspTemplateAvailabilityProvider.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/JspTemplateAvailabilityProvider.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/JspTemplateAvailabilityProvider.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/JspTemplateAvailabilityProvider.java\n@@ -17,6 +17,7 @@\n package org.springframework.boot.autoconfigure.web.servlet;\n \n import java.io.File;\n+import java.security.AccessControlException;\n \n import org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider;\n import org.springframework.core.env.Environment;\n@@ -42,7 +43,11 @@ public boolean isTemplateAvailable(String view, Environment environment,\n \t\t\tif (resourceLoader.getResource(resourceName).exists()) {\n \t\t\t\treturn true;\n \t\t\t}\n-\t\t\treturn new File(\"src/main/webapp\", resourceName).exists();\n+\t\t\ttry {\n+\t\t\t\treturn new File(\"src/main/webapp\", resourceName).exists();\n+\t\t\t}\n+\t\t\tcatch (AccessControlException ex) {\n+\t\t\t}\n \t\t}\n \t\treturn false;\n \t}",
    "output": "Handle AccessControlException in JspTemplateAvailabilityProvider\nHandle AccessControlException in JspTemplateAvailabilityProvider"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/JspTemplateAvailabilityProvider.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/JspTemplateAvailabilityProvider.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/JspTemplateAvailabilityProvider.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/JspTemplateAvailabilityProvider.java\n@@ -31,7 +31,6 @@\n  * @author Andy Wilkinson\n  * @author Stephane Nicoll\n  * @author Madhura Bhave\n- * @author Artsiom Yudovin\n  * @since 1.1.0\n  */\n public class JspTemplateAvailabilityProvider implements TemplateAvailabilityProvider {\n@@ -40,12 +39,10 @@ public class JspTemplateAvailabilityProvider implements TemplateAvailabilityProv\n \tpublic boolean isTemplateAvailable(String view, Environment environment,\n \t\t\tClassLoader classLoader, ResourceLoader resourceLoader) {\n \t\tif (ClassUtils.isPresent(\"org.apache.jasper.compiler.JspConfig\", classLoader)) {\n-\n \t\t\tString resourceName = getResourceName(view, environment);\n \t\t\tif (resourceLoader.getResource(resourceName).exists()) {\n \t\t\t\treturn true;\n \t\t\t}\n-\n \t\t\ttry {\n \t\t\t\treturn new File(\"src/main/webapp\", resourceName).exists();\n \t\t\t}",
    "output": "Handle AccessControlException in JspTemplateAvailabilityProvider"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/BeanPropertyName.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/BeanPropertyName.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/BeanPropertyName.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/BeanPropertyName.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2017 the original author or authors.\n+ * Copyright 2012-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -44,12 +44,12 @@ public static String toDashedForm(String name) {\n \t */\n \tpublic static String toDashedForm(String name, int start) {\n \t\tStringBuilder result = new StringBuilder();\n-\t\tchar[] chars = name.replace(\"_\", \"-\").toCharArray();\n-\t\tfor (int i = start; i < chars.length; i++) {\n-\t\t\tchar ch = chars[i];\n+\t\tString replaced = name.replace('_', '-');\n+\t\tfor (int i = start; i < replaced.length(); i++) {\n+\t\t\tchar ch = replaced.charAt(i);\n \t\t\tif (Character.isUpperCase(ch) && result.length() > 0\n \t\t\t\t\t&& result.charAt(result.length() - 1) != '-') {\n-\t\t\t\tresult.append(\"-\");\n+\t\t\t\tresult.append('-');\n \t\t\t}\n \t\t\tresult.append(Character.toLowerCase(ch));\n \t\t}",
    "output": "Optimize BeanPropertyName.toDashedForm()\nOptimize BeanPropertyName.toDashedForm()"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthWebEndpointResponseMapper.java b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthWebEndpointResponseMapper.java\n--- a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthWebEndpointResponseMapper.java\n+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthWebEndpointResponseMapper.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2018 the original author or authors.\n+ * Copyright 2012-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -88,10 +88,7 @@ public WebEndpointResponse<Health> map(Health health,\n \t */\n \tpublic WebEndpointResponse<Health> map(Health health, SecurityContext securityContext,\n \t\t\tShowDetails showDetails) {\n-\t\tif (showDetails == ShowDetails.NEVER\n-\t\t\t\t|| (showDetails == ShowDetails.WHEN_AUTHORIZED\n-\t\t\t\t\t\t&& (securityContext.getPrincipal() == null\n-\t\t\t\t\t\t\t\t|| !isUserInRole(securityContext)))) {\n+\t\tif (!canSeeDetails(securityContext, showDetails)) {\n \t\t\thealth = Health.status(health.getStatus()).build();\n \t\t}\n \t\treturn createWebEndpointResponse(health);",
    "output": "Remove duplicate code from HealthWebEndpointResponseMapper"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthWebEndpointResponseMapper.java b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthWebEndpointResponseMapper.java\n--- a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthWebEndpointResponseMapper.java\n+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthWebEndpointResponseMapper.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2018 the original author or authors.\n+ * Copyright 2012-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -88,10 +88,7 @@ public WebEndpointResponse<Health> map(Health health,\n \t */\n \tpublic WebEndpointResponse<Health> map(Health health, SecurityContext securityContext,\n \t\t\tShowDetails showDetails) {\n-\t\tif (showDetails == ShowDetails.NEVER\n-\t\t\t\t|| (showDetails == ShowDetails.WHEN_AUTHORIZED\n-\t\t\t\t\t\t&& (securityContext.getPrincipal() == null\n-\t\t\t\t\t\t\t\t|| !isUserInRole(securityContext)))) {\n+\t\tif (!canSeeDetails(securityContext, showDetails)) {\n \t\t\thealth = Health.status(health.getStatus()).build();\n \t\t}\n \t\treturn createWebEndpointResponse(health);",
    "output": "Remove duplicate code from HealthWebEndpointResponseMapper"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java\n--- a/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java\n+++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2018 the original author or authors.\n+ * Copyright 2012-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -96,7 +96,8 @@ public JsonContentAssert isEqualTo(Object expected) {\n \t\tif (expected instanceof Resource) {\n \t\t\treturn isEqualToJson((Resource) expected);\n \t\t}\n-\t\tthrow new AssertionError(\"Unsupport type for JSON assert \" + expected.getClass());\n+\t\tthrow new AssertionError(\n+\t\t\t\t\"Unsupported type for JSON assert \" + expected.getClass());\n \t}\n \n \t/**\n@@ -432,7 +433,8 @@ public JsonContentAssert isNotEqualTo(Object expected) {\n \t\tif (expected instanceof Resource) {\n \t\t\treturn isNotEqualToJson((Resource) expected);\n \t\t}\n-\t\tthrow new AssertionError(\"Unsupport type for JSON assert \" + expected.getClass());\n+\t\tthrow new AssertionError(\n+\t\t\t\t\"Unsupported type for JSON assert \" + expected.getClass());\n \t}\n \n \t/**",
    "output": "Fix typos in JsonContentAssert failure messages\nFix typos in JsonContentAssert failure messages"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java\n--- a/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java\n+++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java\n@@ -96,7 +96,8 @@ public JsonContentAssert isEqualTo(Object expected) {\n \t\tif (expected instanceof Resource) {\n \t\t\treturn isEqualToJson((Resource) expected);\n \t\t}\n-\t\tthrow new AssertionError(\"Unsupport type for JSON assert \" + expected.getClass());\n+\t\tthrow new AssertionError(\n+\t\t\t\t\"Unsupported type for JSON assert \" + expected.getClass());\n \t}\n \n \t/**\n@@ -432,7 +433,8 @@ public JsonContentAssert isNotEqualTo(Object expected) {\n \t\tif (expected instanceof Resource) {\n \t\t\treturn isNotEqualToJson((Resource) expected);\n \t\t}\n-\t\tthrow new AssertionError(\"Unsupport type for JSON assert \" + expected.getClass());\n+\t\tthrow new AssertionError(\n+\t\t\t\t\"Unsupported type for JSON assert \" + expected.getClass());\n \t}\n \n \t/**",
    "output": "Fix typos in JsonContentAssert failure messages"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/BackgroundPreinitializer.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/BackgroundPreinitializer.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/BackgroundPreinitializer.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/BackgroundPreinitializer.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2018 the original author or authors.\n+ * Copyright 2012-2019 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -70,7 +70,7 @@ public class BackgroundPreinitializer\n \t@Override\n \tpublic void onApplicationEvent(SpringApplicationEvent event) {\n \t\tif (!Boolean.getBoolean(IGNORE_BACKGROUNDPREINITIALIZER_PROPERTY_NAME)\n-\t\t\t\t&& event instanceof ApplicationStartingEvent\n+\t\t\t\t&& event instanceof ApplicationStartingEvent && multipleProcessors()\n \t\t\t\t&& preinitializationStarted.compareAndSet(false, true)) {\n \t\t\tperformPreinitialization();\n \t\t}\n@@ -86,6 +86,10 @@ public void onApplicationEvent(SpringApplicationEvent event) {\n \t\t}\n \t}\n \n+\tprivate boolean multipleProcessors() {\n+\t\treturn Runtime.getRuntime().availableProcessors() > 1;\n+\t}\n+\n \tprivate void performPreinitialization() {\n \t\ttry {\n \t\t\tThread thread = new Thread(new Runnable() {",
    "output": "Only perform background pre-init with multiple processors"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/RestarterTests.java b/spring-boot-project/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/RestarterTests.java\n--- a/spring-boot-project/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/RestarterTests.java\n+++ b/spring-boot-project/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/RestarterTests.java\n@@ -176,13 +176,6 @@ public void getInitialUrls() throws Exception {\n \t\tassertThat(Restarter.getInstance().getInitialUrls()).isEqualTo(urls);\n \t}\n \n-\t@FunctionalInterface\n-\tprivate interface WithMainAction {\n-\n-\t\tvoid perform() throws Exception;\n-\n-\t}\n-\n \t@Component\n \t@EnableScheduling\n \tpublic static class SampleApplication {",
    "output": "Remove an unused interface in RestarterTests"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-autoconfigure-processor/src/main/java/org/springframework/boot/autoconfigureprocessor/AutoConfigureAnnotationProcessor.java b/spring-boot-project/spring-boot-tools/spring-boot-autoconfigure-processor/src/main/java/org/springframework/boot/autoconfigureprocessor/AutoConfigureAnnotationProcessor.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-autoconfigure-processor/src/main/java/org/springframework/boot/autoconfigureprocessor/AutoConfigureAnnotationProcessor.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-autoconfigure-processor/src/main/java/org/springframework/boot/autoconfigureprocessor/AutoConfigureAnnotationProcessor.java\n@@ -285,7 +285,7 @@ private static class OnClassConditionValueExtractor extends NamedValuesExtractor\n \t\t@Override\n \t\tpublic List<Object> getValues(AnnotationMirror annotation) {\n \t\t\tList<Object> values = super.getValues(annotation);\n-\t\t\tCollections.sort(values, this::compare);\n+\t\t\tvalues.sort(this::compare);\n \t\t\treturn values;\n \t\t}\n ",
    "output": "Replace Collections sort with list sort() method"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-autoconfigure-processor/src/main/java/org/springframework/boot/autoconfigureprocessor/AutoConfigureAnnotationProcessor.java b/spring-boot-project/spring-boot-tools/spring-boot-autoconfigure-processor/src/main/java/org/springframework/boot/autoconfigureprocessor/AutoConfigureAnnotationProcessor.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-autoconfigure-processor/src/main/java/org/springframework/boot/autoconfigureprocessor/AutoConfigureAnnotationProcessor.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-autoconfigure-processor/src/main/java/org/springframework/boot/autoconfigureprocessor/AutoConfigureAnnotationProcessor.java\n@@ -285,7 +285,7 @@ private static class OnClassConditionValueExtractor extends NamedValuesExtractor\n \t\t@Override\n \t\tpublic List<Object> getValues(AnnotationMirror annotation) {\n \t\t\tList<Object> values = super.getValues(annotation);\n-\t\t\tCollections.sort(values, this::compare);\n+\t\t\tvalues.sort(this::compare);\n \t\t\treturn values;\n \t\t}\n ",
    "output": "Replace Collections sort with list sort() method"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/servlet/CompositeHandlerAdapter.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/servlet/CompositeHandlerAdapter.java\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/servlet/CompositeHandlerAdapter.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/servlet/CompositeHandlerAdapter.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2017 the original author or authors.\n+ * Copyright 2012-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -63,10 +63,9 @@ public ModelAndView handle(HttpServletRequest request, HttpServletResponse respo\n \t@Override\n \tpublic long getLastModified(HttpServletRequest request, Object handler) {\n \t\tOptional<HandlerAdapter> adapter = getAdapter(handler);\n-\t\tif (adapter.isPresent()) {\n-\t\t\treturn adapter.get().getLastModified(request, handler);\n-\t\t}\n-\t\treturn 0;\n+\t\treturn adapter\n+\t\t\t\t.map((handlerAdapter) -> handlerAdapter.getLastModified(request, handler))\n+\t\t\t\t.orElse(0L);\n \t}\n \n \tprivate Optional<HandlerAdapter> getAdapter(Object handler) {",
    "output": "Use Optional value in more functional style\nUse Optional value in more functional style"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/servlet/CompositeHandlerAdapter.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/servlet/CompositeHandlerAdapter.java\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/servlet/CompositeHandlerAdapter.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/servlet/CompositeHandlerAdapter.java\n@@ -63,10 +63,9 @@ public ModelAndView handle(HttpServletRequest request, HttpServletResponse respo\n \t@Override\n \tpublic long getLastModified(HttpServletRequest request, Object handler) {\n \t\tOptional<HandlerAdapter> adapter = getAdapter(handler);\n-\t\tif (adapter.isPresent()) {\n-\t\t\treturn adapter.get().getLastModified(request, handler);\n-\t\t}\n-\t\treturn 0;\n+\t\treturn adapter\n+\t\t\t\t.map((handlerAdapter) -> handlerAdapter.getLastModified(request, handler))\n+\t\t\t\t.orElse(0L);\n \t}\n \n \tprivate Optional<HandlerAdapter> getAdapter(Object handler) {",
    "output": "Use Optional value in more functional style"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONArray.java b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONArray.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONArray.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/json-shade/java/org/springframework/boot/configurationprocessor/json/JSONArray.java\n@@ -65,8 +65,8 @@ public JSONArray() {\n \tpublic JSONArray(Collection copyFrom) {\n \t\tthis();\n \t\tif (copyFrom != null) {\n-\t\t\tfor (Object value : copyFrom) {\n-\t\t\t\tput(JSONObject.wrap(value));\n+\t\t\tfor (Iterator it = copyFrom.iterator(); it.hasNext();) {\n+\t\t\t\tput(JSONObject.wrap(it.next()));\n \t\t\t}\n \t\t}\n \t}",
    "output": "Simplify code by using for-each loop"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/ConfigurableUndertowWebServerFactory.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/ConfigurableUndertowWebServerFactory.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/ConfigurableUndertowWebServerFactory.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/ConfigurableUndertowWebServerFactory.java\n@@ -68,9 +68,9 @@ public interface ConfigurableUndertowWebServerFactory\n \n \t/**\n \t * Set whether direct buffers should be used.\n-\t * @param useForwardHeaders whether direct buffers should be used\n+\t * @param useDirectBuffers whether direct buffers should be used\n \t */\n-\tvoid setUseDirectBuffers(Boolean useForwardHeaders);\n+\tvoid setUseDirectBuffers(Boolean useDirectBuffers);\n \n \t/**\n \t * Set the access log directory.",
    "output": "Polish javadoc of ConfigurableUndertowWebServerFactory method"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/ConfigurableUndertowWebServerFactory.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/ConfigurableUndertowWebServerFactory.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/ConfigurableUndertowWebServerFactory.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/ConfigurableUndertowWebServerFactory.java\n@@ -68,9 +68,9 @@ public interface ConfigurableUndertowWebServerFactory\n \n \t/**\n \t * Set whether direct buffers should be used.\n-\t * @param useForwardHeaders whether direct buffers should be used\n+\t * @param useDirectBuffers whether direct buffers should be used\n \t */\n-\tvoid setUseDirectBuffers(Boolean useForwardHeaders);\n+\tvoid setUseDirectBuffers(Boolean useDirectBuffers);\n \n \t/**\n \t * Set the access log directory.",
    "output": "Polish javadoc of ConfigurableUndertowWebServerFactory method"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceInitializerInvokerTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceInitializerInvokerTests.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceInitializerInvokerTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceInitializerInvokerTests.java\n@@ -233,9 +233,10 @@ public void multipleScriptsAppliedInLexicalOrder() {\n \t\t\t\t.withPropertyValues(\"spring.datasource.initialization-mode=always\",\n \t\t\t\t\t\t\"spring.datasource.url:jdbc:hsqldb:mem:testdb-\"\n \t\t\t\t\t\t\t\t+ new Random().nextInt(),\n-\t\t\t\t\t\t\"spring.datasource.schema:\"\n+\t\t\t\t\t\t\"spring.datasource.schema:classpath*:\"\n \t\t\t\t\t\t\t\t+ getRelativeLocationFor(\"lexical-schema-*.sql\"),\n-\t\t\t\t\t\t\"spring.datasource.data:\" + getRelativeLocationFor(\"data.sql\"))\n+\t\t\t\t\t\t\"spring.datasource.data:classpath*:\"\n+\t\t\t\t\t\t\t\t+ getRelativeLocationFor(\"data.sql\"))\n \t\t\t\t.run((context) -> {\n \t\t\t\t\tDataSource dataSource = context.getBean(DataSource.class);\n \t\t\t\t\tassertThat(dataSource).isInstanceOf(HikariDataSource.class);",
    "output": "Remove D…S…Init…InvokerTests' assumptions about classpath structure"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/LogFileTests.java b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/LogFileTests.java\n--- a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/LogFileTests.java\n+++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/LogFileTests.java\n@@ -93,7 +93,7 @@ private void testLoggingPath(PropertyResolver resolver) {\n \t\tassertThat(logFile.toString())\n \t\t\t\t.isEqualTo(\"logpath\" + File.separatorChar + \"spring.log\");\n \t\tassertThat(properties.getProperty(LoggingSystemProperties.LOG_FILE))\n-\t\t\t\t.isEqualTo(\"logpath/spring.log\");\n+\t\t\t\t.isEqualTo(\"logpath\" + File.separatorChar + \"spring.log\");\n \t\tassertThat(properties.getProperty(LoggingSystemProperties.LOG_PATH))\n \t\t\t\t.isEqualTo(\"logpath\");\n \t}",
    "output": "Remove remaining assumption about File separator from LogFileTests"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/LogFileTests.java b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/LogFileTests.java\n--- a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/LogFileTests.java\n+++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/LogFileTests.java\n@@ -16,6 +16,7 @@\n \n package org.springframework.boot.logging;\n \n+import java.io.File;\n import java.util.Collections;\n import java.util.LinkedHashMap;\n import java.util.Map;\n@@ -89,7 +90,8 @@ private void testLoggingPath(PropertyResolver resolver) {\n \t\tLogFile logFile = LogFile.get(resolver);\n \t\tProperties properties = new Properties();\n \t\tlogFile.applyTo(properties);\n-\t\tassertThat(logFile.toString()).isEqualTo(\"logpath/spring.log\");\n+\t\tassertThat(logFile.toString())\n+\t\t\t\t.isEqualTo(\"logpath\" + File.separatorChar + \"spring.log\");\n \t\tassertThat(properties.getProperty(LoggingSystemProperties.LOG_FILE))\n \t\t\t\t.isEqualTo(\"logpath/spring.log\");\n \t\tassertThat(properties.getProperty(LoggingSystemProperties.LOG_PATH))",
    "output": "Remove assumption about File separator from LogFileTests"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/RestarterTests.java b/spring-boot-project/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/RestarterTests.java\n--- a/spring-boot-project/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/RestarterTests.java\n+++ b/spring-boot-project/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/RestarterTests.java\n@@ -62,7 +62,7 @@ public class RestarterTests {\n \n \t@Before\n \tpublic void setup() {\n-\t\tRestarter.setInstance(new TestableRestarter());\n+\t\tRestarterInitializer.setRestarterInstance();\n \t}\n \n \t@After\n@@ -176,6 +176,13 @@ public void getInitialUrls() throws Exception {\n \t\tassertThat(Restarter.getInstance().getInitialUrls()).isEqualTo(urls);\n \t}\n \n+\t@FunctionalInterface\n+\tprivate interface WithMainAction {\n+\n+\t\tvoid perform() throws Exception;\n+\n+\t}\n+\n \t@Component\n \t@EnableScheduling\n \tpublic static class SampleApplication {\n@@ -272,4 +279,16 @@ public ClassLoader getRelaunchClassLoader() {\n \n \t}\n \n+\tstatic class RestarterInitializer {\n+\n+\t\tstatic void setRestarterInstance() {\n+\t\t\tmain(new String[0]);\n+\t\t}\n+\n+\t\tstatic void main(String[] args) {\n+\t\t\tRestarter.setInstance(new TestableRestarter());\n+\t\t}\n+\n+\t}\n+\n }",
    "output": "Do not rely on test runner using static main method in RestarterTests"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-test-support/src/main/java/org/springframework/boot/testsupport/testcontainers/ElasticsearchContainer.java b/spring-boot-project/spring-boot-tools/spring-boot-test-support/src/main/java/org/springframework/boot/testsupport/testcontainers/ElasticsearchContainer.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-test-support/src/main/java/org/springframework/boot/testsupport/testcontainers/ElasticsearchContainer.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-test-support/src/main/java/org/springframework/boot/testsupport/testcontainers/ElasticsearchContainer.java\n@@ -31,7 +31,8 @@ public class ElasticsearchContainer extends Container {\n \tpublic ElasticsearchContainer() {\n \t\tsuper(\"elasticsearch:6.4.3\", 9200,\n \t\t\t\t(container) -> container.withStartupTimeout(Duration.ofSeconds(120))\n-\t\t\t\t\t\t.withStartupAttempts(5).addExposedPort(9300));\n+\t\t\t\t\t\t.withStartupAttempts(5).withEnv(\"discovery.type\", \"single-node\")\n+\t\t\t\t\t\t.addExposedPort(9300));\n \t}\n \n \tpublic int getMappedTransportPort() {",
    "output": "Start Elasticsearch with single-node discovery type"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-test-support/src/main/java/org/springframework/boot/testsupport/testcontainers/ElasticsearchContainer.java b/spring-boot-project/spring-boot-tools/spring-boot-test-support/src/main/java/org/springframework/boot/testsupport/testcontainers/ElasticsearchContainer.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-test-support/src/main/java/org/springframework/boot/testsupport/testcontainers/ElasticsearchContainer.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-test-support/src/main/java/org/springframework/boot/testsupport/testcontainers/ElasticsearchContainer.java\n@@ -16,6 +16,8 @@\n \n package org.springframework.boot.testsupport.testcontainers;\n \n+import java.time.Duration;\n+\n import org.junit.runner.Description;\n import org.junit.runners.model.Statement;\n \n@@ -27,7 +29,9 @@\n public class ElasticsearchContainer extends Container {\n \n \tpublic ElasticsearchContainer() {\n-\t\tsuper(\"elasticsearch:6.4.3\", 9200, (container) -> container.addExposedPort(9300));\n+\t\tsuper(\"elasticsearch:6.4.3\", 9200,\n+\t\t\t\t(container) -> container.withStartupTimeout(Duration.ofSeconds(120))\n+\t\t\t\t\t\t.withStartupAttempts(5).addExposedPort(9300));\n \t}\n \n \tpublic int getMappedTransportPort() {",
    "output": "Allow more time for the Elasticsearch container to start"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/MappingsEndpointServletDocumentationTests.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/MappingsEndpointServletDocumentationTests.java\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/MappingsEndpointServletDocumentationTests.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/MappingsEndpointServletDocumentationTests.java\n@@ -150,12 +150,10 @@ public void mappings() throws Exception {\n \t\t\t\t\t\t.description(\"Details of the method, if any, \"\n \t\t\t\t\t\t\t\t+ \"that will handle requests to this mapping.\"),\n \t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.className\")\n-\t\t\t\t\t\t.type(JsonFieldType.STRING)\n \t\t\t\t\t\t.description(\"Fully qualified name of the class of the method.\"),\n \t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.name\")\n-\t\t\t\t\t\t.type(JsonFieldType.STRING).description(\"Name of the method.\"),\n+\t\t\t\t\t\t.description(\"Name of the method.\"),\n \t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.descriptor\")\n-\t\t\t\t\t\t.type(JsonFieldType.STRING)\n \t\t\t\t\t\t.description(\"Descriptor of the method as specified in the Java \"\n \t\t\t\t\t\t\t\t+ \"Language Specification.\"));\n \t\tdispatcherServletFields.addAll(handlerMethod);",
    "output": "Remove redundant field type configuration"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/MappingsEndpointServletDocumentationTests.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/MappingsEndpointServletDocumentationTests.java\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/MappingsEndpointServletDocumentationTests.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/MappingsEndpointServletDocumentationTests.java\n@@ -149,12 +149,12 @@ public void mappings() throws Exception {\n \t\t\t\t\t\t.type(JsonFieldType.OBJECT)\n \t\t\t\t\t\t.description(\"Details of the method, if any, \"\n \t\t\t\t\t\t\t\t+ \"that will handle requests to this mapping.\"),\n-\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.className\")\n+\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.className\").optional()\n \t\t\t\t\t\t.type(JsonFieldType.STRING)\n \t\t\t\t\t\t.description(\"Fully qualified name of the class of the method.\"),\n-\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.name\")\n+\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.name\").optional()\n \t\t\t\t\t\t.type(JsonFieldType.STRING).description(\"Name of the method.\"),\n-\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.descriptor\")\n+\t\t\t\tfieldWithPath(\"*.[].details.handlerMethod.descriptor\").optional()\n \t\t\t\t\t\t.type(JsonFieldType.STRING)\n \t\t\t\t\t\t.description(\"Descriptor of the method as specified in the Java \"\n \t\t\t\t\t\t\t\t+ \"Language Specification.\"));",
    "output": "Mark nested optional fields as optional"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/reactive/ReactiveOAuth2ResourceServerAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/reactive/ReactiveOAuth2ResourceServerAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/reactive/ReactiveOAuth2ResourceServerAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/reactive/ReactiveOAuth2ResourceServerAutoConfiguration.java\n@@ -25,7 +25,7 @@\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Import;\n import org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity;\n-import org.springframework.security.oauth2.jwt.JwtDecoder;\n+import org.springframework.security.oauth2.jwt.ReactiveJwtDecoder;\n import org.springframework.security.oauth2.server.resource.BearerTokenAuthenticationToken;\n \n /**\n@@ -39,7 +39,7 @@\n @AutoConfigureBefore(ReactiveSecurityAutoConfiguration.class)\n @EnableConfigurationProperties(OAuth2ResourceServerProperties.class)\n @ConditionalOnClass({ EnableWebFluxSecurity.class, BearerTokenAuthenticationToken.class,\n-\t\tJwtDecoder.class })\n+\t\tReactiveJwtDecoder.class })\n @ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.REACTIVE)\n @Import({ ReactiveOAuth2ResourceServerJwkConfiguration.class,\n \t\tReactiveOAuth2ResourceServerWebSecurityConfiguration.class })",
    "output": "Use the right class in @ConditionalOnClass"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/web/trace/reactive/TraceableServerHttpResponse.java b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/web/trace/reactive/TraceableServerHttpResponse.java\n--- a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/web/trace/reactive/TraceableServerHttpResponse.java\n+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/web/trace/reactive/TraceableServerHttpResponse.java\n@@ -21,6 +21,7 @@\n import java.util.Map;\n \n import org.springframework.boot.actuate.trace.http.TraceableResponse;\n+import org.springframework.http.HttpStatus;\n import org.springframework.http.server.reactive.ServerHttpResponse;\n \n /**\n@@ -38,8 +39,9 @@ class TraceableServerHttpResponse implements TraceableResponse {\n \n \t@Override\n \tpublic int getStatus() {\n-\t\treturn (this.response.getStatusCode() != null)\n-\t\t\t\t? this.response.getStatusCode().value() : 200;\n+\t\tHttpStatus status = (this.response.getStatusCode() != null)\n+\t\t\t\t? this.response.getStatusCode() : HttpStatus.OK;\n+\t\treturn status.value();\n \t}\n \n \t@Override",
    "output": "Replace magic number by HttpStatus\nReplace magic number by HttpStatus"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/web/trace/reactive/TraceableServerHttpResponse.java b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/web/trace/reactive/TraceableServerHttpResponse.java\n--- a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/web/trace/reactive/TraceableServerHttpResponse.java\n+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/web/trace/reactive/TraceableServerHttpResponse.java\n@@ -39,8 +39,9 @@ class TraceableServerHttpResponse implements TraceableResponse {\n \n \t@Override\n \tpublic int getStatus() {\n-\t\treturn (this.response.getStatusCode() != null)\n-\t\t\t\t? this.response.getStatusCode().value() : HttpStatus.OK.value();\n+\t\tHttpStatus status = (this.response.getStatusCode() != null)\n+\t\t\t\t? this.response.getStatusCode() : HttpStatus.OK;\n+\t\treturn status.value();\n \t}\n \n \t@Override",
    "output": "Replace magic number by HttpStatus"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/web/trace/reactive/TraceableServerHttpResponse.java b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/web/trace/reactive/TraceableServerHttpResponse.java\n--- a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/web/trace/reactive/TraceableServerHttpResponse.java\n+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/web/trace/reactive/TraceableServerHttpResponse.java\n@@ -21,6 +21,7 @@\n import java.util.Map;\n \n import org.springframework.boot.actuate.trace.http.TraceableResponse;\n+import org.springframework.http.HttpStatus;\n import org.springframework.http.server.reactive.ServerHttpResponse;\n \n /**\n@@ -39,7 +40,7 @@ class TraceableServerHttpResponse implements TraceableResponse {\n \t@Override\n \tpublic int getStatus() {\n \t\treturn (this.response.getStatusCode() != null)\n-\t\t\t\t? this.response.getStatusCode().value() : 200;\n+\t\t\t\t? this.response.getStatusCode().value() : HttpStatus.OK.value();\n \t}\n \n \t@Override",
    "output": "Replace magic number by HttpStatus"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/LoggingSystemProperties.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/LoggingSystemProperties.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/LoggingSystemProperties.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/LoggingSystemProperties.java\n@@ -117,10 +117,9 @@ public void apply(LogFile logFile) {\n \n \tprivate PropertyResolver getPropertyResolver() {\n \t\tif (this.environment instanceof ConfigurableEnvironment) {\n-\t\t\tPropertyResolver resolver = new PropertySourcesPropertyResolver(\n+\t\t\tPropertySourcesPropertyResolver resolver = new PropertySourcesPropertyResolver(\n \t\t\t\t\t((ConfigurableEnvironment) this.environment).getPropertySources());\n-\t\t\t((PropertySourcesPropertyResolver) resolver)\n-\t\t\t\t\t.setIgnoreUnresolvableNestedPlaceholders(true);\n+\t\t\tresolver.setIgnoreUnresolvableNestedPlaceholders(true);\n \t\t\treturn resolver;\n \t\t}\n \t\treturn this.environment;",
    "output": "Remove unnecessary cast in LoggingSystemProperties"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/LoggingSystemProperties.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/LoggingSystemProperties.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/LoggingSystemProperties.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/LoggingSystemProperties.java\n@@ -117,10 +117,9 @@ public void apply(LogFile logFile) {\n \n \tprivate PropertyResolver getPropertyResolver() {\n \t\tif (this.environment instanceof ConfigurableEnvironment) {\n-\t\t\tPropertyResolver resolver = new PropertySourcesPropertyResolver(\n+\t\t\tPropertySourcesPropertyResolver resolver = new PropertySourcesPropertyResolver(\n \t\t\t\t\t((ConfigurableEnvironment) this.environment).getPropertySources());\n-\t\t\t((PropertySourcesPropertyResolver) resolver)\n-\t\t\t\t\t.setIgnoreUnresolvableNestedPlaceholders(true);\n+\t\t\tresolver.setIgnoreUnresolvableNestedPlaceholders(true);\n \t\t\treturn resolver;\n \t\t}\n \t\treturn this.environment;",
    "output": "Remove unnecessary cast in LoggingSystemProperties"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java\n@@ -333,12 +333,12 @@ private Object bindBean(ConfigurationPropertyName name, Bindable<?> target,\n \t\t\t\t|| isUnbindableBean(name, target, context)) {\n \t\t\treturn null;\n \t\t}\n-\t\tBeanPropertyBinder propertyBinder = (propertyName, propertyTarget) -> bind(\n-\t\t\t\tname.append(propertyName), propertyTarget, handler, context, false);\n \t\tClass<?> type = target.getType().resolve(Object.class);\n \t\tif (!allowRecursiveBinding && context.hasBoundBean(type)) {\n \t\t\treturn null;\n \t\t}\n+\t\tBeanPropertyBinder propertyBinder = (propertyName, propertyTarget) -> bind(\n+\t\t\t\tname.append(propertyName), propertyTarget, handler, context, false);\n \t\treturn context.withBean(type, () -> {\n \t\t\tStream<?> boundBeans = BEAN_BINDERS.stream()\n \t\t\t\t\t.map((b) -> b.bind(name, target, context, propertyBinder));",
    "output": "Avoid instantiation of BeanPropertyBinder in Binder"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java\n@@ -333,12 +333,12 @@ private Object bindBean(ConfigurationPropertyName name, Bindable<?> target,\n \t\t\t\t|| isUnbindableBean(name, target, context)) {\n \t\t\treturn null;\n \t\t}\n-\t\tBeanPropertyBinder propertyBinder = (propertyName, propertyTarget) -> bind(\n-\t\t\t\tname.append(propertyName), propertyTarget, handler, context, false);\n \t\tClass<?> type = target.getType().resolve(Object.class);\n \t\tif (!allowRecursiveBinding && context.hasBoundBean(type)) {\n \t\t\treturn null;\n \t\t}\n+\t\tBeanPropertyBinder propertyBinder = (propertyName, propertyTarget) -> bind(\n+\t\t\t\tname.append(propertyName), propertyTarget, handler, context, false);\n \t\treturn context.withBean(type, () -> {\n \t\t\tStream<?> boundBeans = BEAN_BINDERS.stream()\n \t\t\t\t\t.map((b) -> b.bind(name, target, context, propertyBinder));",
    "output": "Avoid instantiation of BeanPropertyBinder in Binder"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/DefaultApplicationArguments.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/DefaultApplicationArguments.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/DefaultApplicationArguments.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/DefaultApplicationArguments.java\n@@ -37,7 +37,7 @@ public class DefaultApplicationArguments implements ApplicationArguments {\n \n \tprivate final String[] args;\n \n-\tpublic DefaultApplicationArguments(String[] args) {\n+\tpublic DefaultApplicationArguments(String... args) {\n \t\tAssert.notNull(args, \"Args must not be null\");\n \t\tthis.source = new Source(args);\n \t\tthis.args = args;\n\ndiff --git a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/DefaultApplicationArgumentsTests.java b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/DefaultApplicationArgumentsTests.java\n--- a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/DefaultApplicationArgumentsTests.java\n+++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/DefaultApplicationArgumentsTests.java\n@@ -80,8 +80,7 @@ public void getNonOptionArgs() {\n \n \t@Test\n \tpublic void getNoNonOptionArgs() {\n-\t\tApplicationArguments arguments = new DefaultApplicationArguments(\n-\t\t\t\tnew String[] { \"--debug\" });\n+\t\tApplicationArguments arguments = new DefaultApplicationArguments(\"--debug\");\n \t\tassertThat(arguments.getNonOptionArgs()).isEmpty();\n \t}\n ",
    "output": "Use varargs for DefaultApplicationArguments"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/DefaultApplicationArguments.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/DefaultApplicationArguments.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/DefaultApplicationArguments.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/DefaultApplicationArguments.java\n@@ -37,7 +37,7 @@ public class DefaultApplicationArguments implements ApplicationArguments {\n \n \tprivate final String[] args;\n \n-\tpublic DefaultApplicationArguments(String[] args) {\n+\tpublic DefaultApplicationArguments(String... args) {\n \t\tAssert.notNull(args, \"Args must not be null\");\n \t\tthis.source = new Source(args);\n \t\tthis.args = args;\n\ndiff --git a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/DefaultApplicationArgumentsTests.java b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/DefaultApplicationArgumentsTests.java\n--- a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/DefaultApplicationArgumentsTests.java\n+++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/DefaultApplicationArgumentsTests.java\n@@ -80,8 +80,7 @@ public void getNonOptionArgs() {\n \n \t@Test\n \tpublic void getNoNonOptionArgs() {\n-\t\tApplicationArguments arguments = new DefaultApplicationArguments(\n-\t\t\t\tnew String[] { \"--debug\" });\n+\t\tApplicationArguments arguments = new DefaultApplicationArguments(\"--debug\");\n \t\tassertThat(arguments.getNonOptionArgs()).isEmpty();\n \t}\n ",
    "output": "Use varargs for DefaultApplicationArguments"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/server/Ssl.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/server/Ssl.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/server/Ssl.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/server/Ssl.java\n@@ -69,8 +69,8 @@ public void setEnabled(boolean enabled) {\n \t}\n \n \t/**\n-\t * Return Whether client authentication is wanted (\"want\") or needed (\"need\").\n-\t * Requires a trust store.\n+\t * Return Whether client authentication is not wanted (\"none\"), wanted (\"want\") or\n+\t * needed (\"need\"). Requires a trust store.\n \t * @return the {@link ClientAuth} to use\n \t */\n \tpublic ClientAuth getClientAuth() {\n@@ -243,6 +243,11 @@ public void setProtocol(String protocol) {\n \t */\n \tpublic enum ClientAuth {\n \n+\t\t/**\n+\t\t * Client authentication is not wanted.\n+\t\t */\n+\t\tNONE,\n+\n \t\t/**\n \t\t * Client authentication is wanted but not mandatory.\n \t\t */",
    "output": "Polish contribution\nAllow to disable SSL client authentication on the management port"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfiguration.java\n@@ -65,7 +65,6 @@\n import org.springframework.util.StringUtils;\n import org.springframework.web.WebApplicationInitializer;\n import org.springframework.web.context.ServletContextAware;\n-import org.springframework.web.filter.RequestContextFilter;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for Jersey.\n@@ -124,16 +123,6 @@ private void customize() {\n \t\t\t\t.forEach((customizer) -> customizer.customize(this.config));\n \t}\n \n-\t@Bean\n-\t@ConditionalOnMissingBean\n-\tpublic FilterRegistrationBean<RequestContextFilter> requestContextFilter() {\n-\t\tFilterRegistrationBean<RequestContextFilter> registration = new FilterRegistrationBean<>();\n-\t\tregistration.setFilter(new RequestContextFilter());\n-\t\tregistration.setOrder(this.jersey.getFilter().getOrder() - 1);\n-\t\tregistration.setName(\"requestContextFilter\");\n-\t\treturn registration;\n-\t}\n-\n \t@Bean\n \t@ConditionalOnMissingBean(name = \"jerseyFilterRegistration\")\n \t@ConditionalOnProperty(prefix = \"spring.jersey\", name = \"type\", havingValue = \"filter\")",
    "output": "Remove auto-configuration of RequestContextFilter when using Jersey"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/logging/LoggingApplicationListener.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/logging/LoggingApplicationListener.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/logging/LoggingApplicationListener.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/logging/LoggingApplicationListener.java\n@@ -364,7 +364,7 @@ private void setLogLevel(LoggingSystem system, String[] names, String level) {\n \tprivate void setLogLevel(LoggingSystem system, String name, String level) {\n \t\ttry {\n \t\t\tname = name.equalsIgnoreCase(LoggingSystem.ROOT_LOGGER_NAME) ? null : name;\n-\t\t\tsystem.setLogLevel(name, coerceLogLevel(level));\n+\t\t\tsystem.setLogLevel(name, coerceLogLevel(level.trim()));\n \t\t}\n \t\tcatch (RuntimeException ex) {\n \t\t\tthis.logger.error(\"Cannot set level: \" + level + \" for '\" + name + \"'\");",
    "output": "Trim whitespace when coercing to a LogLevel"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n@@ -39,7 +39,7 @@\n public final class GradleCompatibilitySuite extends Suite {\n \n \tprivate static final List<String> GRADLE_VERSIONS = Arrays.asList(\"default\", \"4.5.1\",\n-\t\t\t\"4.6\", \"4.7\", \"4.8.1\", \"4.9\", \"4.10.2\", \"5.0-rc-5\");\n+\t\t\t\"4.6\", \"4.7\", \"4.8.1\", \"4.9\", \"4.10.2\", \"5.0\");\n \n \tpublic GradleCompatibilitySuite(Class<?> clazz) throws InitializationError {\n \t\tsuper(clazz, createRunners(clazz));",
    "output": "Test the Gradle plugin against Gradle 5.0"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterRegistryConfigurer.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterRegistryConfigurer.java\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterRegistryConfigurer.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterRegistryConfigurer.java\n@@ -30,9 +30,7 @@\n /**\n  * Configurer to apply {@link MeterRegistryCustomizer customizers}, {@link MeterFilter\n  * filters}, {@link MeterBinder binders} and {@link Metrics#addRegistry global\n- * registration} to {@link MeterRegistry meter registries}. This configurer intentionally\n- * skips {@link CompositeMeterRegistry} with the assumptions that the registries it\n- * contains are beans and will be customized directly.\n+ * registration} to {@link MeterRegistry meter registries}.\n  *\n  * @author Jon Schneider\n  * @author Phillip Webb\n@@ -58,6 +56,9 @@ class MeterRegistryConfigurer {\n \t}\n \n \tvoid configure(MeterRegistry registry) {\n+\t\tif (registry instanceof CompositeMeterRegistry) {\n+\t\t\treturn;\n+\t\t}\n \t\t// Customizers must be applied before binders, as they may add custom\n \t\t// tags or alter timer or summary configuration.\n \t\tcustomize(registry);",
    "output": "Align MeterRegistryConfigurer's javadoc with its implementation"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n@@ -39,7 +39,7 @@\n public final class GradleCompatibilitySuite extends Suite {\n \n \tprivate static final List<String> GRADLE_VERSIONS = Arrays.asList(\"default\", \"4.5.1\",\n-\t\t\t\"4.6\", \"4.7\", \"4.8.1\", \"4.9\", \"4.10.2\", \"5.0-rc-3\");\n+\t\t\t\"4.6\", \"4.7\", \"4.8.1\", \"4.9\", \"4.10.2\", \"5.0-rc-5\");\n \n \tpublic GradleCompatibilitySuite(Class<?> clazz) throws InitializationError {\n \t\tsuper(clazz, createRunners(clazz));",
    "output": "Test the Gradle Plugin against Gradle 5.0-rc-3"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfigurationTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfigurationTests.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfigurationTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfigurationTests.java\n@@ -85,6 +85,7 @@\n import org.springframework.web.servlet.i18n.FixedLocaleResolver;\n import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;\n import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;\n+import org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver;\n import org.springframework.web.servlet.resource.AppCacheManifestTransformer;\n import org.springframework.web.servlet.resource.CachingResourceResolver;\n import org.springframework.web.servlet.resource.CachingResourceTransformer;\n@@ -573,7 +574,8 @@ private ContextConsumer<AssertableWebApplicationContext> assertExceptionResolver\n \t\t\tList<HandlerExceptionResolver> delegates = ((HandlerExceptionResolverComposite) resolver)\n \t\t\t\t\t.getExceptionResolvers();\n \t\t\tfor (HandlerExceptionResolver delegate : delegates) {\n-\t\t\t\tif (delegate instanceof AbstractHandlerExceptionResolver) {\n+\t\t\t\tif (delegate instanceof AbstractHandlerExceptionResolver\n+\t\t\t\t\t\t&& !(delegate instanceof DefaultHandlerExceptionResolver)) {\n \t\t\t\t\tconsumer.accept(ReflectionTestUtils.getField(delegate, \"warnLogger\"));\n \t\t\t\t}\n \t\t\t}",
    "output": "Fix tests after HandlerExceptionResolver logging changes\nand"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletContextInitializerBeans.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletContextInitializerBeans.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletContextInitializerBeans.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletContextInitializerBeans.java\n@@ -256,8 +256,8 @@ private void logBeansInformation(\n \t\t\tfilterRegistrations.addAll(\n \t\t\t\t\tinitializers.getOrDefault(Filter.class, Collections.emptyList()));\n \t\t\tString filtersInfo = filterRegistrations.stream()\n-\t\t\t\t\t.map(FilterRegistrationBean.class::cast)\n-\t\t\t\t\t.map(FilterRegistrationBean::toString)\n+\t\t\t\t\t.map(AbstractFilterRegistrationBean.class::cast)\n+\t\t\t\t\t.map(AbstractFilterRegistrationBean::toString)\n \t\t\t\t\t.collect(Collectors.joining(\", \"));\n \t\t\tServletContextInitializerBeans.logger\n \t\t\t\t\t.debug(\"Mapping filters: \" + filtersInfo);",
    "output": "Fix class cast in ServletContextInitializerBeans"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFileEntries.java b/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFileEntries.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFileEntries.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFileEntries.java\n@@ -246,7 +246,7 @@ private RandomAccessData getEntryData(FileHeader entry) throws IOException {\n \tprivate <T extends FileHeader> T getEntry(CharSequence name, Class<T> type,\n \t\t\tboolean cacheEntry) {\n \t\tT entry = doGetEntry(name, type, cacheEntry, null);\n-\t\tif (isMultiReleaseJar() && !isMetaInfEntry(name)) {\n+\t\tif (!isMetaInfEntry(name) && isMultiReleaseJar()) {\n \t\t\tint version = RUNTIME_VERSION;\n \t\t\tAsciiBytes nameAlias = (entry instanceof JarEntry)\n \t\t\t\t\t? ((JarEntry) entry).getAsciiBytesName()",
    "output": "Polish multi-release jar support to avoid possible StackOverflowError"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n@@ -39,7 +39,7 @@\n public final class GradleCompatibilitySuite extends Suite {\n \n \tprivate static final List<String> GRADLE_VERSIONS = Arrays.asList(\"default\", \"4.5.1\",\n-\t\t\t\"4.6\", \"4.7\", \"4.8.1\", \"4.9\", \"4.10.2\", \"5.0-rc-1\");\n+\t\t\t\"4.6\", \"4.7\", \"4.8.1\", \"4.9\", \"4.10.2\", \"5.0-rc-3\");\n \n \tpublic GradleCompatibilitySuite(Class<?> clazz) throws InitializationError {\n \t\tsuper(clazz, createRunners(clazz));",
    "output": "Test the Gradle plugin against Gradle 5.0-rc-3"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/DatabaseLookupTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/DatabaseLookupTests.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/DatabaseLookupTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/orm/jpa/DatabaseLookupTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2017 the original author or authors.\n+ * Copyright 2012-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -91,6 +91,7 @@ public void getDatabaseWhenDb2ShouldReturnDb2() throws Exception {\n \tpublic void getDatabaseWhenInformixShouldReturnInformix() throws Exception {\n \t\ttestGetDatabase(\"jdbc:informix-sqli:\", Database.INFORMIX);\n \t}\n+\n \t@Test\n \tpublic void getDatabaseWhenSapShouldReturnHana() throws Exception {\n \t\ttestGetDatabase(\"jdbc:sap:\", Database.HANA);",
    "output": "Add HANA to the lookup of well-known databases"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jdbc/DatabaseDriver.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jdbc/DatabaseDriver.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jdbc/DatabaseDriver.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jdbc/DatabaseDriver.java\n@@ -104,7 +104,7 @@ public String getId() {\n \t * @since 2.1.0\n \t */\n \tHANA(\"HDB\", \"com.sap.db.jdbc.Driver\", \"com.sap.db.jdbcext.XADataSourceSAP\",\n-\t\t\t\"SELECT 1 FROM DUMMY\") {\n+\t\t\t\"SELECT 1 FROM SYS.DUMMY\") {\n \t\t@Override\n \t\tprotected Collection<String> getUrlPrefixes() {\n \t\t\treturn Collections.singleton(\"sap\");",
    "output": "Fix HANA validation query"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jdbc/DatabaseDriver.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jdbc/DatabaseDriver.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jdbc/DatabaseDriver.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/jdbc/DatabaseDriver.java\n@@ -104,7 +104,7 @@ public String getId() {\n \t * @since 2.1.0\n \t */\n \tHANA(\"HDB\", \"com.sap.db.jdbc.Driver\", \"com.sap.db.jdbcext.XADataSourceSAP\",\n-\t\t\t\"SELECT 1 FROM DUMMY\") {\n+\t\t\t\"SELECT 1 FROM SYS.DUMMY\") {\n \t\t@Override\n \t\tprotected Collection<String> getUrlPrefixes() {\n \t\t\treturn Collections.singleton(\"sap\");",
    "output": "Fix HANA validation query\nThis commit updates the validation query for HANA. It should use the\nfully qualified dummy table name (SYS.DUMMY) to avoid unexpected results\nif there is a local table named DUMMY."
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/AbstractErrorWebExceptionHandler.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/AbstractErrorWebExceptionHandler.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/AbstractErrorWebExceptionHandler.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/AbstractErrorWebExceptionHandler.java\n@@ -202,7 +202,7 @@ protected Mono<ServerResponse> renderDefaultErrorView(\n \t\t\tbuilder.append(\"<div>\").append(htmlEscape(message)).append(\"</div>\");\n \t\t}\n \t\tif (trace != null) {\n-\t\t\tbuilder.append(\"<div>\").append(htmlEscape(trace)).append(\"</div>\");\n+\t\t\tbuilder.append(\"<div style='white-space:pre-wrap;'>\").append(htmlEscape(trace)).append(\"</div>\");\n \t\t}\n \t\tbuilder.append(\"</body></html>\");\n \t\treturn responseBody.syncBody(builder.toString());",
    "output": "Fix stack-trace line breaks in whitelabel error views\nSince , the WebFlux whitelabel error view also shows the\nstacktrace information if it is available in the model.\nThis commit adds a CSS directive that preserves white spaces and breaks\nlines at newline characters."
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java\n@@ -379,6 +379,7 @@ public RestTemplateBuilder errorHandler(ResponseErrorHandler errorHandler) {\n \t * @deprecated since 2.1.0 in favor of\n \t * {@link #basicAuthentication(String username, String password)}\n \t */\n+\t@Deprecated\n \tpublic RestTemplateBuilder basicAuthorization(String username, String password) {\n \t\treturn basicAuthentication(username, password);\n \t}",
    "output": "Add missing @Deprecated annotation"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java\n@@ -379,6 +379,7 @@ public RestTemplateBuilder errorHandler(ResponseErrorHandler errorHandler) {\n \t * @deprecated since 2.1.0 in favor of\n \t * {@link #basicAuthentication(String username, String password)}\n \t */\n+\t@Deprecated\n \tpublic RestTemplateBuilder basicAuthorization(String username, String password) {\n \t\treturn basicAuthentication(username, password);\n \t}",
    "output": "Add missing @Deprecated annotation"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/servlet/ServletManagementChildContextConfiguration.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/servlet/ServletManagementChildContextConfiguration.java\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/servlet/ServletManagementChildContextConfiguration.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/servlet/ServletManagementChildContextConfiguration.java\n@@ -70,6 +70,7 @@ public ServletManagementWebServerFactoryCustomizer servletManagementWebServerFac\n \t}\n \n \t@Bean\n+\t@ConditionalOnClass(name = \"io.undertow.Undertow\")\n \tpublic UndertowAccessLogCustomizer undertowAccessLogCustomizer() {\n \t\treturn new UndertowAccessLogCustomizer();\n \t}",
    "output": "Make UndertowAccessLogCustomizer conditional on class"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n@@ -1304,8 +1304,7 @@ private static void close(ApplicationContext context) {\n \t}\n \n \tprivate static <E> Set<E> asUnmodifiableOrderedSet(Collection<E> elements) {\n-\t\tList<E> list = new ArrayList<>();\n-\t\tlist.addAll(elements);\n+\t\tList<E> list = new ArrayList<>(elements);\n \t\tlist.sort(AnnotationAwareOrderComparator.INSTANCE);\n \t\treturn new LinkedHashSet<>(list);\n \t}",
    "output": "Simplify ArrayList calling addAll() immediately"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n@@ -1304,8 +1304,7 @@ private static void close(ApplicationContext context) {\n \t}\n \n \tprivate static <E> Set<E> asUnmodifiableOrderedSet(Collection<E> elements) {\n-\t\tList<E> list = new ArrayList<>();\n-\t\tlist.addAll(elements);\n+\t\tList<E> list = new ArrayList<>(elements);\n \t\tlist.sort(AnnotationAwareOrderComparator.INSTANCE);\n \t\treturn new LinkedHashSet<>(list);\n \t}",
    "output": "Simplify ArrayList calling addAll() immediately"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n@@ -39,7 +39,7 @@\n public final class GradleCompatibilitySuite extends Suite {\n \n \tprivate static final List<String> GRADLE_VERSIONS = Arrays.asList(\"default\", \"4.5.1\",\n-\t\t\t\"4.6\", \"4.7\", \"4.8.1\", \"4.9\", \"4.10.2\", \"5.0-milestone-1\");\n+\t\t\t\"4.6\", \"4.7\", \"4.8.1\", \"4.9\", \"4.10.2\", \"5.0-rc-1\");\n \n \tpublic GradleCompatibilitySuite(Class<?> clazz) throws InitializationError {\n \t\tsuper(clazz, createRunners(clazz));",
    "output": "Test Gradle Plugin against Gradle 5.0-rc-1"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n@@ -39,7 +39,7 @@\n public final class GradleCompatibilitySuite extends Suite {\n \n \tprivate static final List<String> GRADLE_VERSIONS = Arrays.asList(\"default\", \"4.1\",\n-\t\t\t\"4.2\", \"4.3\", \"4.4.1\", \"4.5.1\", \"4.6\", \"4.7\", \"4.8.1\", \"4.9\", \"4.10\");\n+\t\t\t\"4.2\", \"4.3\", \"4.4.1\", \"4.5.1\", \"4.6\", \"4.7\", \"4.8.1\", \"4.9\", \"4.10.2\");\n \n \tpublic GradleCompatibilitySuite(Class<?> clazz) throws InitializationError {\n \t\tsuper(clazz, createRunners(clazz));",
    "output": "Test the Gradle Plugin against Gradle 4.10.2"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/task/TaskExecutionAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/task/TaskExecutionAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/task/TaskExecutionAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/task/TaskExecutionAutoConfiguration.java\n@@ -27,6 +27,7 @@\n import org.springframework.boot.task.TaskExecutorCustomizer;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Lazy;\n import org.springframework.core.task.TaskDecorator;\n import org.springframework.core.task.TaskExecutor;\n import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n@@ -77,6 +78,7 @@ public TaskExecutorBuilder taskExecutorBuilder() {\n \t\treturn builder;\n \t}\n \n+\t@Lazy\n \t@Bean(name = APPLICATION_TASK_EXECUTOR_BEAN_NAME)\n \t@ConditionalOnMissingBean(Executor.class)\n \tpublic ThreadPoolTaskExecutor applicationTaskExecutor(TaskExecutorBuilder builder) {",
    "output": "Make auto-configured applicationTaskExecutor bean lazy"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-properties-migrator/src/main/java/org/springframework/boot/context/properties/migrator/PropertiesMigrationReporter.java b/spring-boot-project/spring-boot-properties-migrator/src/main/java/org/springframework/boot/context/properties/migrator/PropertiesMigrationReporter.java\n--- a/spring-boot-project/spring-boot-properties-migrator/src/main/java/org/springframework/boot/context/properties/migrator/PropertiesMigrationReporter.java\n+++ b/spring-boot-project/spring-boot-properties-migrator/src/main/java/org/springframework/boot/context/properties/migrator/PropertiesMigrationReporter.java\n@@ -174,7 +174,6 @@ private Predicate<ConfigurationMetadataProperty> deprecatedFilter() {\n \n \tprivate Map<String, ConfigurationPropertySource> getPropertySourcesAsMap() {\n \t\tMap<String, ConfigurationPropertySource> map = new LinkedHashMap<>();\n-\t\tConfigurationPropertySources.get(this.environment);\n \t\tfor (ConfigurationPropertySource source : ConfigurationPropertySources\n \t\t\t\t.get(this.environment)) {\n \t\t\tmap.put(determinePropertySourceName(source), source);",
    "output": "Remove uncessary call in PropertiesMigrationReport"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/hazelcast/HazelcastAutoConfigurationClientTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/hazelcast/HazelcastAutoConfigurationClientTests.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/hazelcast/HazelcastAutoConfigurationClientTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/hazelcast/HazelcastAutoConfigurationClientTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2017 the original author or authors.\n+ * Copyright 2012-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -17,7 +17,7 @@\n package org.springframework.boot.autoconfigure.hazelcast;\n \n import com.hazelcast.client.config.ClientConfig;\n-import com.hazelcast.client.impl.HazelcastClientProxy;\n+import com.hazelcast.client.impl.clientside.HazelcastClientProxy;\n import com.hazelcast.config.Config;\n import com.hazelcast.core.Hazelcast;\n import com.hazelcast.core.HazelcastInstance;",
    "output": "Upgrade to Hazelcast 3.11"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/hazelcast/HazelcastAutoConfigurationClientTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/hazelcast/HazelcastAutoConfigurationClientTests.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/hazelcast/HazelcastAutoConfigurationClientTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/hazelcast/HazelcastAutoConfigurationClientTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2017 the original author or authors.\n+ * Copyright 2012-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -17,7 +17,7 @@\n package org.springframework.boot.autoconfigure.hazelcast;\n \n import com.hazelcast.client.config.ClientConfig;\n-import com.hazelcast.client.impl.HazelcastClientProxy;\n+import com.hazelcast.client.impl.clientside.HazelcastClientProxy;\n import com.hazelcast.config.Config;\n import com.hazelcast.core.Hazelcast;\n import com.hazelcast.core.HazelcastInstance;",
    "output": "Upgrade to Hazelcast 3.11"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/plugin/UnresolvedDependenciesAnalyzer.java b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/plugin/UnresolvedDependenciesAnalyzer.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/plugin/UnresolvedDependenciesAnalyzer.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/plugin/UnresolvedDependenciesAnalyzer.java\n@@ -17,6 +17,7 @@\n package org.springframework.boot.gradle.plugin;\n \n import java.util.HashSet;\n+import java.util.Set;\n import java.util.stream.Collectors;\n \n import io.spring.gradle.dependencymanagement.DependencyManagementPlugin;",
    "output": "Fix import error in 8376bc369"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/plugin/UnresolvedDependenciesAnalyzer.java b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/plugin/UnresolvedDependenciesAnalyzer.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/plugin/UnresolvedDependenciesAnalyzer.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/plugin/UnresolvedDependenciesAnalyzer.java\n@@ -17,14 +17,14 @@\n package org.springframework.boot.gradle.plugin;\n \n import java.util.HashSet;\n-import java.util.Set;\n import java.util.stream.Collectors;\n \n import io.spring.gradle.dependencymanagement.DependencyManagementPlugin;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n import org.gradle.api.Project;\n import org.gradle.api.artifacts.ModuleVersionSelector;\n import org.gradle.api.artifacts.UnresolvedDependency;\n-import org.slf4j.LoggerFactory;\n \n /**\n  * An analyzer for {@link UnresolvedDependency unresolvable dependencies} that logs a\n@@ -35,8 +35,7 @@\n  */\n class UnresolvedDependenciesAnalyzer {\n \n-\tprivate static final org.slf4j.Logger logger = LoggerFactory\n-\t\t\t.getLogger(SpringBootPlugin.class);\n+\tprivate static final Log logger = LogFactory.getLog(SpringBootPlugin.class);\n \n \tprivate Set<ModuleVersionSelector> dependenciesWithNoVersion = new HashSet<>();\n ",
    "output": "Fix build after checkstyle imports updates"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/servlet/WebMvcMetricsFilter.java b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/servlet/WebMvcMetricsFilter.java\n--- a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/servlet/WebMvcMetricsFilter.java\n+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/servlet/WebMvcMetricsFilter.java\n@@ -38,8 +38,8 @@\n import io.micrometer.core.instrument.Timer;\n import io.micrometer.core.instrument.Timer.Builder;\n import io.micrometer.core.instrument.Timer.Sample;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n \n import org.springframework.context.ApplicationContext;\n import org.springframework.core.annotation.AnnotationUtils;\n@@ -63,8 +63,7 @@\n  */\n public class WebMvcMetricsFilter extends OncePerRequestFilter {\n \n-\tprivate static final Logger logger = LoggerFactory\n-\t\t\t.getLogger(WebMvcMetricsFilter.class);\n+\tprivate static final Log logger = LogFactory.getLog(WebMvcMetricsFilter.class);\n \n \tprivate final ApplicationContext context;\n ",
    "output": "Fix WebMvcMetricsFilter logger imports\nDon't use SLF4J loggers in `WebMvcMetricsFilter`."
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-web-ui/src/main/java/sample/web/ui/mvc/MessageController.java b/spring-boot-samples/spring-boot-sample-web-ui/src/main/java/sample/web/ui/mvc/MessageController.java\n--- a/spring-boot-samples/spring-boot-sample-web-ui/src/main/java/sample/web/ui/mvc/MessageController.java\n+++ b/spring-boot-samples/spring-boot-sample-web-ui/src/main/java/sample/web/ui/mvc/MessageController.java\n@@ -64,7 +64,7 @@ public ModelAndView create(@Valid Message message, BindingResult result,\n \t\t\treturn new ModelAndView(\"messages/form\", \"formErrors\", result.getAllErrors());\n \t\t}\n \t\tmessage = this.messageRepository.save(message);\n-\t\tredirect.addFlashAttribute(\"globalMessage\", \"Successfully created a new message\");\n+\t\tredirect.addFlashAttribute(\"globalMessage\", \"view.success\");\n \t\treturn new ModelAndView(\"redirect:/{message.id}\", \"message.id\", message.getId());\n \t}\n ",
    "output": "Use message source in Web UI sample"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-web-ui/src/main/java/sample/web/ui/mvc/MessageController.java b/spring-boot-samples/spring-boot-sample-web-ui/src/main/java/sample/web/ui/mvc/MessageController.java\n--- a/spring-boot-samples/spring-boot-sample-web-ui/src/main/java/sample/web/ui/mvc/MessageController.java\n+++ b/spring-boot-samples/spring-boot-sample-web-ui/src/main/java/sample/web/ui/mvc/MessageController.java\n@@ -64,7 +64,7 @@ public ModelAndView create(@Valid Message message, BindingResult result,\n \t\t\treturn new ModelAndView(\"messages/form\", \"formErrors\", result.getAllErrors());\n \t\t}\n \t\tmessage = this.messageRepository.save(message);\n-\t\tredirect.addFlashAttribute(\"globalMessage\", \"Successfully created a new message\");\n+\t\tredirect.addFlashAttribute(\"globalMessage\", \"view.success\");\n \t\treturn new ModelAndView(\"redirect:/{message.id}\", \"message.id\", message.getId());\n \t}\n ",
    "output": "Use message source in Web UI sample\nUpdate the sample application to show how a message source can be\nused in the view tier."
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/DefaultRestartInitializer.java b/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/DefaultRestartInitializer.java\n--- a/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/DefaultRestartInitializer.java\n+++ b/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/DefaultRestartInitializer.java\n@@ -37,6 +37,7 @@ public class DefaultRestartInitializer implements RestartInitializer {\n \tstatic {\n \t\tSet<String> skipped = new LinkedHashSet<>();\n \t\tskipped.add(\"org.junit.runners.\");\n+\t\tskipped.add(\"org.junit.platform.\");\n \t\tskipped.add(\"org.springframework.boot.test.\");\n \t\tskipped.add(\"cucumber.runtime.\");\n \t\tSKIPPED_STACK_ELEMENTS = Collections.unmodifiableSet(skipped);",
    "output": "Skip restarter for JUnit5"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfigurationTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfigurationTests.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfigurationTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfigurationTests.java\n@@ -90,6 +90,7 @@\n import org.springframework.web.servlet.i18n.FixedLocaleResolver;\n import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;\n import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;\n+import org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver;\n import org.springframework.web.servlet.resource.AppCacheManifestTransformer;\n import org.springframework.web.servlet.resource.CachingResourceResolver;\n import org.springframework.web.servlet.resource.CachingResourceTransformer;\n@@ -646,7 +647,8 @@ private ContextConsumer<AssertableWebApplicationContext> assertExceptionResolver\n \t\t\tList<HandlerExceptionResolver> delegates = ((HandlerExceptionResolverComposite) resolver)\n \t\t\t\t\t.getExceptionResolvers();\n \t\t\tfor (HandlerExceptionResolver delegate : delegates) {\n-\t\t\t\tif (delegate instanceof AbstractHandlerExceptionResolver) {\n+\t\t\t\tif (delegate instanceof AbstractHandlerExceptionResolver\n+\t\t\t\t\t\t&& !(delegate instanceof DefaultHandlerExceptionResolver)) {\n \t\t\t\t\tconsumer.accept(ReflectionTestUtils.getField(delegate, \"warnLogger\"));\n \t\t\t\t}\n \t\t\t}",
    "output": "Fix tests after HandlerExceptionResolver logging changes"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/prometheus/PrometheusPushGatewayManager.java b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/prometheus/PrometheusPushGatewayManager.java\n--- a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/prometheus/PrometheusPushGatewayManager.java\n+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/prometheus/PrometheusPushGatewayManager.java\n@@ -25,8 +25,8 @@\n \n import io.prometheus.client.CollectorRegistry;\n import io.prometheus.client.exporter.PushGateway;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n \n import org.springframework.scheduling.TaskScheduler;\n import org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;\n@@ -44,8 +44,8 @@\n  */\n public class PrometheusPushGatewayManager {\n \n-\tprivate static final Logger logger = LoggerFactory\n-\t\t\t.getLogger(PrometheusPushGatewayManager.class);\n+\tprivate static final Log logger = LogFactory\n+\t\t\t.getLog(PrometheusPushGatewayManager.class);\n \n \tprivate final PushGateway pushGateway;\n ",
    "output": "Use Commons Logging for PrometheusPushGatewayManager"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/prometheus/PrometheusPushGatewayManager.java b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/prometheus/PrometheusPushGatewayManager.java\n--- a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/prometheus/PrometheusPushGatewayManager.java\n+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/prometheus/PrometheusPushGatewayManager.java\n@@ -25,8 +25,8 @@\n \n import io.prometheus.client.CollectorRegistry;\n import io.prometheus.client.exporter.PushGateway;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n \n import org.springframework.scheduling.TaskScheduler;\n import org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;\n@@ -44,8 +44,8 @@\n  */\n public class PrometheusPushGatewayManager {\n \n-\tprivate static final Logger logger = LoggerFactory\n-\t\t\t.getLogger(PrometheusPushGatewayManager.class);\n+\tprivate static final Log logger = LogFactory\n+\t\t\t.getLog(PrometheusPushGatewayManager.class);\n \n \tprivate final PushGateway pushGateway;\n ",
    "output": "Use Commons Logging for PrometheusPushGatewayManager"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfigurationServletIntegrationTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfigurationServletIntegrationTests.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfigurationServletIntegrationTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfigurationServletIntegrationTests.java\n@@ -113,8 +113,7 @@ public void customSuffix() throws Exception {\n \n \t@Test\n \tpublic void customTemplateLoaderPath() throws Exception {\n-\t\tload(\n-\t\t\t\t\"spring.freemarker.templateLoaderPath:classpath:/custom-templates/\");\n+\t\tload(\"spring.freemarker.templateLoaderPath:classpath:/custom-templates/\");\n \t\tMockHttpServletResponse response = render(\"custom\");\n \t\tString result = response.getContentAsString();\n \t\tassertThat(result).contains(\"custom\");",
    "output": "Fix formatting violation"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/StartMojo.java b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/StartMojo.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/StartMojo.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/StartMojo.java\n@@ -133,6 +133,7 @@ protected RunArguments resolveJvmArguments() {\n \t\t\tremoteJmxArguments.add(\"-Dcom.sun.management.jmxremote.port=\" + this.jmxPort);\n \t\t\tremoteJmxArguments.add(\"-Dcom.sun.management.jmxremote.authenticate=false\");\n \t\t\tremoteJmxArguments.add(\"-Dcom.sun.management.jmxremote.ssl=false\");\n+\t\t\tremoteJmxArguments.add(\"-Djava.rmi.server.hostname=127.0.0.1\");\n \t\t\tjvmArguments.getArgs().addAll(remoteJmxArguments);\n \t\t}\n \t\treturn jvmArguments;",
    "output": "Force JMX hostname to 127.0.0.1"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/StartMojo.java b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/StartMojo.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/StartMojo.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/StartMojo.java\n@@ -133,6 +133,7 @@ protected RunArguments resolveJvmArguments() {\n \t\t\tremoteJmxArguments.add(\"-Dcom.sun.management.jmxremote.port=\" + this.jmxPort);\n \t\t\tremoteJmxArguments.add(\"-Dcom.sun.management.jmxremote.authenticate=false\");\n \t\t\tremoteJmxArguments.add(\"-Dcom.sun.management.jmxremote.ssl=false\");\n+\t\t\tremoteJmxArguments.add(\"-Djava.rmi.server.hostname=127.0.0.1\");\n \t\t\tjvmArguments.getArgs().addAll(remoteJmxArguments);\n \t\t}\n \t\treturn jvmArguments;",
    "output": "Force JMX hostname to 127.0.0.1"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/client/RestTemplateBuilderTests.java b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/client/RestTemplateBuilderTests.java\n--- a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/client/RestTemplateBuilderTests.java\n+++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/client/RestTemplateBuilderTests.java\n@@ -330,6 +330,16 @@ public void basicAuthenticationShouldApply() {\n \t\tassertThat(interceptor).extracting(\"password\").containsExactly(\"boot\");\n \t}\n \n+\t@Test\n+\t@Deprecated\n+\tpublic void basicAuthorizationShouldApply() {\n+\t\tRestTemplate template = this.builder.basicAuthorization(\"spring\", \"boot\").build();\n+\t\tClientHttpRequestInterceptor interceptor = template.getInterceptors().get(0);\n+\t\tassertThat(interceptor).isInstanceOf(BasicAuthenticationInterceptor.class);\n+\t\tassertThat(interceptor).extracting(\"username\").containsExactly(\"spring\");\n+\t\tassertThat(interceptor).extracting(\"password\").containsExactly(\"boot\");\n+\t}\n+\n \t@Test\n \tpublic void customizersWhenCustomizersAreNullShouldThrowException() {\n \t\tassertThatIllegalArgumentException()",
    "output": "Remove usages of BasicAuthorizationInterceptor"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityPrerequisite.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityPrerequisite.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityPrerequisite.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityPrerequisite.java\n@@ -1,29 +0,0 @@\n-/*\n- * Copyright 2012-2018 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.springframework.boot.autoconfigure.security;\n-\n-/**\n- * Marker interface for beans that need to be initialized before any security\n- * configuration is evaluated.\n- *\n- * @author Dave Syer\n- * @deprecated since 2.0.6 since security prerequisites are not supported in Spring Boot 2\n- */\n-@Deprecated\n-public interface SecurityPrerequisite {\n-\n-}",
    "output": "Delete deprecated SecurityPrerequisite\nRemove `SecurityPrerequisite` which was deprecated in 2.0.6."
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/EndpointIdTests.java b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/EndpointIdTests.java\n--- a/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/EndpointIdTests.java\n+++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/EndpointIdTests.java\n@@ -33,7 +33,7 @@ public class EndpointIdTests {\n \tpublic ExpectedException thrown = ExpectedException.none();\n \n \t@Test\n-\tpublic void ofWhenNullThorowsException() {\n+\tpublic void ofWhenNullThrowsException() {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n \t\tthis.thrown.expectMessage(\"Value must not be empty\");\n \t\tEndpointId.of(null);",
    "output": "Fix typo in EndpointIdTests"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/EndpointIdTests.java b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/EndpointIdTests.java\n--- a/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/EndpointIdTests.java\n+++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/EndpointIdTests.java\n@@ -33,7 +33,7 @@ public class EndpointIdTests {\n \tpublic ExpectedException thrown = ExpectedException.none();\n \n \t@Test\n-\tpublic void ofWhenNullThorowsException() {\n+\tpublic void ofWhenNullThrowsException() {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n \t\tthis.thrown.expectMessage(\"Value must not be empty\");\n \t\tEndpointId.of(null);",
    "output": "Fix typo in EndpointIdTests"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConversionServiceDeducer.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConversionServiceDeducer.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConversionServiceDeducer.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/ConversionServiceDeducer.java\n@@ -58,18 +58,10 @@ public ConversionService getConversionService() {\n \n \tprivate static class Factory {\n \n-\t\t/**\n-\t\t * A list of custom converters (in addition to the defaults) to use when\n-\t\t * converting properties for binding.\n-\t\t */\n \t\t@SuppressWarnings(\"rawtypes\")\n-\t\tprivate List<Converter> converters;\n+\t\tprivate final List<Converter> converters;\n \n-\t\t/**\n-\t\t * A list of custom converters (in addition to the defaults) to use when\n-\t\t * converting properties for binding.\n-\t\t */\n-\t\tprivate List<GenericConverter> genericConverters;\n+\t\tprivate final List<GenericConverter> genericConverters;\n \n \t\tFactory(BeanFactory beanFactory) {\n \t\t\tthis.converters = beans(beanFactory, Converter.class,",
    "output": "Use non-reflective APIs to retrieve config prop binding converters"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/error/DefaultErrorAttributes.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/error/DefaultErrorAttributes.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/error/DefaultErrorAttributes.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/error/DefaultErrorAttributes.java\n@@ -94,33 +94,26 @@ private HttpStatus determineHttpStatus(Throwable error) {\n \t\tif (error instanceof ResponseStatusException) {\n \t\t\treturn ((ResponseStatusException) error).getStatus();\n \t\t}\n-\n \t\tResponseStatus responseStatus = AnnotatedElementUtils\n \t\t\t\t.findMergedAnnotation(error.getClass(), ResponseStatus.class);\n-\n \t\tif (responseStatus != null) {\n \t\t\treturn responseStatus.code();\n \t\t}\n-\n \t\treturn HttpStatus.INTERNAL_SERVER_ERROR;\n \t}\n \n \tprivate String determineMessage(Throwable error) {\n \t\tif (error instanceof WebExchangeBindException) {\n \t\t\treturn error.getMessage();\n \t\t}\n-\n \t\tif (error instanceof ResponseStatusException) {\n \t\t\treturn ((ResponseStatusException) error).getReason();\n \t\t}\n-\n \t\tResponseStatus responseStatus = AnnotatedElementUtils\n \t\t\t\t.findMergedAnnotation(error.getClass(), ResponseStatus.class);\n-\n \t\tif (responseStatus != null) {\n \t\t\treturn responseStatus.reason();\n \t\t}\n-\n \t\treturn error.getMessage();\n \t}\n ",
    "output": "Add support for @ResponseStatus in DefaultErrorAttributes"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/MetricsEndpoint.java b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/MetricsEndpoint.java\n--- a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/MetricsEndpoint.java\n+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/MetricsEndpoint.java\n@@ -16,7 +16,6 @@\n \n package org.springframework.boot.actuate.metrics;\n \n-import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;",
    "output": "Fix checkstyle violation\nFix unused import violation introduced during merge."
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/diagnostics/analyzer/NoSuchBeanDefinitionFailureAnalyzerTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/diagnostics/analyzer/NoSuchBeanDefinitionFailureAnalyzerTests.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/diagnostics/analyzer/NoSuchBeanDefinitionFailureAnalyzerTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/diagnostics/analyzer/NoSuchBeanDefinitionFailureAnalyzerTests.java\n@@ -200,8 +200,8 @@ public void failureAnalysisForNullBeanByType() {\n \tpublic void failureAnalysisForUnmatchedQualifier() {\n \t\tFailureAnalysis analysis = analyzeFailure(\n \t\t\t\tcreateFailure(QualifiedBeanConfiguration.class));\n-\t\tassertThat(analysis.getDescription()).contains(\n-\t\t\t\t\"@org.springframework.beans.factory.annotation.Qualifier(value=alpha)\");\n+\t\tassertThat(analysis.getDescription()).containsPattern(\n+\t\t\t\t\"@org.springframework.beans.factory.annotation.Qualifier\\\\(value=\\\"*alpha\\\"*\\\\)\");\n \t}\n \n \tprivate void assertDescriptionConstructorMissingType(FailureAnalysis analysis,",
    "output": "Tolerate different quoting of annotation attributes on Java 8 and 9+"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java\n@@ -149,7 +149,9 @@ else if (this.flywayDataSource != null) {\n \t\t\telse {\n \t\t\t\tflyway.setDataSource(this.dataSource);\n \t\t\t}\n-\t\t\tflyway.setCallbacks(this.flywayCallbacks.toArray(new FlywayCallback[0]));\n+\t\t\tif (!this.flywayCallbacks.isEmpty()) {\n+\t\t\t\tflyway.setCallbacks(this.flywayCallbacks.toArray(new FlywayCallback[0]));\n+\t\t\t}\n \t\t\tString[] locations = new LocationResolver(flyway.getDataSource())\n \t\t\t\t\t.resolveLocations(this.properties.getLocations());\n \t\t\tcheckLocationExists(locations);",
    "output": "Invoke Flyway#setCallbacks only if necessary"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/undertow/UndertowEmbeddedServletContainerFactory.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/undertow/UndertowEmbeddedServletContainerFactory.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/undertow/UndertowEmbeddedServletContainerFactory.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/undertow/UndertowEmbeddedServletContainerFactory.java\n@@ -483,7 +483,7 @@ private void registerServletContainerInitializerToDriveServletContextInitializer\n \t\t\tDeploymentInfo deployment, ServletContextInitializer... initializers) {\n \t\tServletContextInitializer[] mergedInitializers = mergeInitializers(initializers);\n \t\tInitializer initializer = new Initializer(mergedInitializers);\n-\t\tdeployment.addServletContainerInitalizer(new ServletContainerInitializerInfo(\n+\t\tdeployment.addServletContainerInitializer(new ServletContainerInitializerInfo(\n \t\t\t\tInitializer.class,\n \t\t\t\tnew ImmediateInstanceFactory<ServletContainerInitializer>(initializer),\n \t\t\t\tNO_CLASSES));",
    "output": "Upgrade to Undertow 1.4.26.Final"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitCommand.java b/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitCommand.java\n--- a/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitCommand.java\n+++ b/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitCommand.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2017 the original author or authors.\n+ * Copyright 2012-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -127,7 +127,7 @@ protected void options() {\n \t\t\tthis.target = option(Arrays.asList(\"target\"), \"URL of the service to use\")\n \t\t\t\t\t.withRequiredArg()\n \t\t\t\t\t.defaultsTo(ProjectGenerationRequest.DEFAULT_SERVICE_URL);\n-\t\t\tthis.listCapabilities = option(Arrays.asList(\"list\", \"l\"),\n+\t\t\tthis.listCapabilities = option(Arrays.asList(\"list\"),\n \t\t\t\t\t\"List the capabilities of the service. Use it to discover the \"\n \t\t\t\t\t\t\t+ \"dependencies and the types that are available\");\n \t\t\tprojectGenerationOptions();",
    "output": "Remove duplicate -l option for init command\nRemove duplicate -l option for init command"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitCommand.java b/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitCommand.java\n--- a/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitCommand.java\n+++ b/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitCommand.java\n@@ -127,7 +127,7 @@ protected void options() {\n \t\t\tthis.target = option(Arrays.asList(\"target\"), \"URL of the service to use\")\n \t\t\t\t\t.withRequiredArg()\n \t\t\t\t\t.defaultsTo(ProjectGenerationRequest.DEFAULT_SERVICE_URL);\n-\t\t\tthis.listCapabilities = option(Arrays.asList(\"list\", \"l\"),\n+\t\t\tthis.listCapabilities = option(Arrays.asList(\"list\"),\n \t\t\t\t\t\"List the capabilities of the service. Use it to discover the \"\n \t\t\t\t\t\t\t+ \"dependencies and the types that are available\");\n \t\t\tprojectGenerationOptions();",
    "output": "Remove duplicate -l option for init command"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jsonb/JsonbAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jsonb/JsonbAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jsonb/JsonbAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jsonb/JsonbAutoConfiguration.java\n@@ -34,7 +34,9 @@\n  */\n @Configuration\n @ConditionalOnClass(Jsonb.class)\n-@ConditionalOnResource(resources = \"classpath:META-INF/services/javax.json.bind.spi.JsonbProvider\")\n+@ConditionalOnResource(resources = {\n+\t\t\"classpath:META-INF/services/javax.json.bind.spi.JsonbProvider\",\n+\t\t\"classpath:META-INF/services/javax.json.spi.JsonProvider\" })\n public class JsonbAutoConfiguration {\n \n \t@Bean",
    "output": "Make JSON-B auto-config back of if no JSON-P implementation is available"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/PropertiesMeterFilter.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/PropertiesMeterFilter.java\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/PropertiesMeterFilter.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/PropertiesMeterFilter.java\n@@ -104,18 +104,17 @@ private <T> T lookup(Map<String, T> values, Id id, T defaultValue) {\n \t\tif (values.isEmpty()) {\n \t\t\treturn defaultValue;\n \t\t}\n-\t\treturn this.baseLookup(values, id, () -> defaultValue);\n+\t\treturn doLookup(values, id, () -> defaultValue);\n \t}\n \n \tprivate <T> T lookupWithFallbackToAll(Map<String, T> values, Id id, T defaultValue) {\n \t\tif (values.isEmpty()) {\n \t\t\treturn defaultValue;\n \t\t}\n-\t\treturn this.baseLookup(values, id,\n-\t\t\t\t() -> values.getOrDefault(\"all\", defaultValue));\n+\t\treturn doLookup(values, id, () -> values.getOrDefault(\"all\", defaultValue));\n \t}\n \n-\tprivate <T> T baseLookup(Map<String, T> values, Id id, Supplier<T> defaultValue) {\n+\tprivate <T> T doLookup(Map<String, T> values, Id id, Supplier<T> defaultValue) {\n \t\tString name = id.getName();\n \t\twhile (StringUtils.hasLength(name)) {\n \t\t\tT result = values.get(name);",
    "output": "Drop support for all\" from management.metrics.distribution.sla\""
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/PropertiesMeterFilterTests.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/PropertiesMeterFilterTests.java\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/PropertiesMeterFilterTests.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/PropertiesMeterFilterTests.java\n@@ -71,6 +71,14 @@ public void acceptWhenHasNoEnabledPropertiesShouldReturnNeutral() {\n \t\t\t\t.isEqualTo(MeterFilterReply.NEUTRAL);\n \t}\n \n+\t@Test\n+\tpublic void acceptWhenHasNoMatchingEnabledPropertyShouldReturnNeutral() {\n+\t\tPropertiesMeterFilter filter = new PropertiesMeterFilter(\n+\t\t\t\tcreateProperties(\"enable.something.else=false\"));\n+\t\tassertThat(filter.accept(createMeterId(\"spring.boot\")))\n+\t\t\t\t.isEqualTo(MeterFilterReply.NEUTRAL);\n+\t}\n+\n \t@Test\n \tpublic void acceptWhenHasEnableFalseShouldReturnDeny() {\n \t\tPropertiesMeterFilter filter = new PropertiesMeterFilter(",
    "output": "Improve test coverage of PropertiesMeterFilter"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n@@ -447,7 +447,7 @@ private <T> Collection<T> getSpringFactoriesInstances(Class<T> type) {\n \n \tprivate <T> Collection<T> getSpringFactoriesInstances(Class<T> type,\n \t\t\tClass<?>[] parameterTypes, Object... args) {\n-\t\tClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n+\t\tClassLoader classLoader = getClassLoader();\n \t\t// Use names and ensure unique to protect against duplicates\n \t\tSet<String> names = new LinkedHashSet<>(\n \t\t\t\tSpringFactoriesLoader.loadFactoryNames(type, classLoader));",
    "output": "Use ResourceLoader.getClassLoader() for factories\nUpdate `SpringApplication` to load and initialize `spring.factories`\nclasses using the `ResourceLoader.getClassLoader()`."
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/context/ReactiveWebServerApplicationContext.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/context/ReactiveWebServerApplicationContext.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/context/ReactiveWebServerApplicationContext.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/context/ReactiveWebServerApplicationContext.java\n@@ -227,14 +227,14 @@ public static WebServer getWebServer(ServerManager manager) {\n \n \t\tpublic static void start(ServerManager manager,\n \t\t\t\tSupplier<HttpHandler> handlerSupplier) {\n-\t\t\tif (manager != null) {\n+\t\t\tif (manager != null && manager.server != null) {\n \t\t\t\tmanager.handler = handlerSupplier.get();\n \t\t\t\tmanager.server.start();\n \t\t\t}\n \t\t}\n \n \t\tpublic static void stop(ServerManager manager) {\n-\t\t\tif (manager != null) {\n+\t\t\tif (manager != null && manager.server != null) {\n \t\t\t\ttry {\n \t\t\t\t\tmanager.server.stop();\n \t\t\t\t}",
    "output": "Fix Reactive...Context NPE\nFix possible NPE in `ReactiveWebServerApplicationContext`."
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java\n@@ -348,7 +348,7 @@ else if (ch1 != ch2) {\n \t\t}\n \t\twhile (i2 < l2) {\n \t\t\tchar ch2 = e2.charAt(i, i2++);\n-\t\t\tif (indexed2 || !ElementsParser.isAlphaNumeric(ch2)) {\n+\t\t\tif (indexed2 || ElementsParser.isAlphaNumeric(ch2)) {\n \t\t\t\treturn false;\n \t\t\t}\n \t\t}",
    "output": "Fix ConfigurationPropertyName.equals\nFix a regression in `ConfigurationPropertyName.equals` that was causing\nincorrect results."
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertyNameTests.java b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertyNameTests.java\n--- a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertyNameTests.java\n+++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/context/properties/source/ConfigurationPropertyNameTests.java\n@@ -582,6 +582,15 @@ public void equalsAndHashCode() {\n \t\tassertThat((Object) n14).isNotEqualTo(n15);\n \t}\n \n+\t@Test\n+\tpublic void equalsWhenStartsWith() {\n+\t\t// gh-14665\n+\t\tConfigurationPropertyName n1 = ConfigurationPropertyName.of(\"my.sources[0].xame\");\n+\t\tConfigurationPropertyName n2 = ConfigurationPropertyName\n+\t\t\t\t.of(\"my.sources[0].xamespace\");\n+\t\tassertThat(n1).isNotEqualTo(n2);\n+\t}\n+\n \t@Test\n \tpublic void isValidWhenValidShouldReturnTrue() {\n \t\tassertThat(ConfigurationPropertyName.isValid(\"\")).isTrue();",
    "output": "Add another ConfigurationPropertyName.equals test\nInclude an additional test to ensure that `.equals` works for names\nstarting with the same value."
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/filter/OrderedHiddenHttpMethodFilter.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/filter/OrderedHiddenHttpMethodFilter.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/filter/OrderedHiddenHttpMethodFilter.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/filter/OrderedHiddenHttpMethodFilter.java\n@@ -16,7 +16,6 @@\n \n package org.springframework.boot.web.reactive.filter;\n \n-import org.springframework.boot.web.servlet.FilterRegistrationBean;\n import org.springframework.core.Ordered;\n import org.springframework.web.filter.reactive.HiddenHttpMethodFilter;\n \n@@ -32,8 +31,7 @@ public class OrderedHiddenHttpMethodFilter extends HiddenHttpMethodFilter\n \t/**\n \t * The default order is high to ensure the filter is applied before Spring Security.\n \t */\n-\tpublic static final int DEFAULT_ORDER = FilterRegistrationBean.REQUEST_WRAPPER_FILTER_MAX_ORDER\n-\t\t\t- 10000;\n+\tpublic static final int DEFAULT_ORDER = -10000;\n \n \tprivate int order = DEFAULT_ORDER;\n ",
    "output": "Restore import-control checkstyle\nRestore checkstyle import control and fix a few violations in the\nprocess."
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/plugin/KotlinPluginActionIntegrationTests.java b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/plugin/KotlinPluginActionIntegrationTests.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/plugin/KotlinPluginActionIntegrationTests.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/plugin/KotlinPluginActionIntegrationTests.java\n@@ -44,9 +44,8 @@ public void noKotlinVersionPropertyWithoutKotlinPlugin() {\n \n \t@Test\n \tpublic void kotlinVersionMatchesKotlinPluginVersion() {\n-\t\tString output = this.gradleBuild\n-\t\t\t\t.build(\"kotlinVersion\", \"dependencies\", \"--configuration\", \"compile\")\n-\t\t\t\t.getOutput();\n+\t\tString output = this.gradleBuild.build(\"kotlinVersion\", \"dependencies\",\n+\t\t\t\t\"--configuration\", \"compileClasspath\").getOutput();\n \t\tassertThat(output).contains(\"Kotlin version: 1.2.10\");\n \t\tassertThat(output)\n \t\t\t\t.containsPattern(\"org.jetbrains.kotlin:kotlin-stdlib-jdk8:* -> 1.2.10\");",
    "output": "Move away from deprecated Gradle configurations"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/plugin/KotlinPluginActionIntegrationTests.java b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/plugin/KotlinPluginActionIntegrationTests.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/plugin/KotlinPluginActionIntegrationTests.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/plugin/KotlinPluginActionIntegrationTests.java\n@@ -44,9 +44,8 @@ public void noKotlinVersionPropertyWithoutKotlinPlugin() {\n \n \t@Test\n \tpublic void kotlinVersionMatchesKotlinPluginVersion() {\n-\t\tString output = this.gradleBuild\n-\t\t\t\t.build(\"kotlinVersion\", \"dependencies\", \"--configuration\", \"compile\")\n-\t\t\t\t.getOutput();\n+\t\tString output = this.gradleBuild.build(\"kotlinVersion\", \"dependencies\",\n+\t\t\t\t\"--configuration\", \"compileClasspath\").getOutput();\n \t\tassertThat(output).contains(\"Kotlin version: 1.2.10\");\n \t\tassertThat(output)\n \t\t\t\t.containsPattern(\"org.jetbrains.kotlin:kotlin-stdlib-jdk8:* -> 1.2.10\");",
    "output": "Move away from deprecated Gradle configurations"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsPropertyDefaultsPostProcessor.java b/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsPropertyDefaultsPostProcessor.java\n--- a/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsPropertyDefaultsPostProcessor.java\n+++ b/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsPropertyDefaultsPostProcessor.java\n@@ -121,7 +121,7 @@ private boolean isRemoteRestartEnabled(Environment environment) {\n \n \tprivate boolean isWebApplication(Environment environment) {\n \t\tfor (String candidate : WEB_ENVIRONMENT_CLASSES) {\n-\t\t\tClass<?> environmentClass = ClassUtils.resolveClassName(candidate,\n+\t\t\tClass<?> environmentClass = resolveClassName(candidate,\n \t\t\t\t\tenvironment.getClass().getClassLoader());\n \t\t\tif (environmentClass != null && environmentClass.isInstance(environment)) {\n \t\t\t\treturn true;\n@@ -130,4 +130,13 @@ private boolean isWebApplication(Environment environment) {\n \t\treturn false;\n \t}\n \n+\tprivate Class<?> resolveClassName(String candidate, ClassLoader classLoader) {\n+\t\ttry {\n+\t\t\treturn ClassUtils.resolveClassName(candidate, classLoader);\n+\t\t}\n+\t\tcatch (IllegalArgumentException ex) {\n+\t\t\treturn null;\n+\t\t}\n+\t}\n+\n }",
    "output": "Handle class not found"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/HealthEndpointDocumentationTests.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/HealthEndpointDocumentationTests.java\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/HealthEndpointDocumentationTests.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/HealthEndpointDocumentationTests.java\n@@ -40,6 +40,7 @@\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Import;\n import org.springframework.restdocs.payload.FieldDescriptor;\n+import org.springframework.util.unit.DataSize;\n \n import static org.springframework.restdocs.mockmvc.MockMvcRestDocumentation.document;\n import static org.springframework.restdocs.payload.PayloadDocumentation.fieldWithPath;\n@@ -105,7 +106,7 @@ public HealthEndpoint endpoint(Map<String, HealthIndicator> healthIndicators) {\n \n \t\t@Bean\n \t\tpublic DiskSpaceHealthIndicator diskSpaceHealthIndicator() {\n-\t\t\treturn new DiskSpaceHealthIndicator(new File(\".\"), 1024 * 1024 * 10);\n+\t\t\treturn new DiskSpaceHealthIndicator(new File(\".\"), DataSize.ofMegabytes(10));\n \t\t}\n \n \t\t@Bean",
    "output": "Upgrade example for disk space health indicator to use DataSize"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/AbstractRabbitListenerContainerFactoryConfigurer.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/AbstractRabbitListenerContainerFactoryConfigurer.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/AbstractRabbitListenerContainerFactoryConfigurer.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/AbstractRabbitListenerContainerFactoryConfigurer.java\n@@ -119,7 +119,7 @@ protected void configure(T factory, ConnectionFactory connectionFactory,\n \t\tfactory.setMissingQueuesFatal(configuration.isMissingQueuesFatal());\n \t\tListenerRetry retryConfig = configuration.getRetry();\n \t\tif (retryConfig.isEnabled()) {\n-\t\t\tRetryInterceptorBuilder<?> builder = (retryConfig.isStateless())\n+\t\t\tRetryInterceptorBuilder<?, ?> builder = (retryConfig.isStateless())\n \t\t\t\t\t? RetryInterceptorBuilder.stateless()\n \t\t\t\t\t: RetryInterceptorBuilder.stateful();\n \t\t\tRetryTemplate retryTemplate = new RetryTemplateFactory(",
    "output": "Upgrade to Spring AMQP 2.1.0.RC1"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/jdbc/DatabaseDriverClassNameTests.java b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/jdbc/DatabaseDriverClassNameTests.java\n--- a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/jdbc/DatabaseDriverClassNameTests.java\n+++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/jdbc/DatabaseDriverClassNameTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2017 the original author or authors.\n+ * Copyright 2012-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -46,7 +46,7 @@ public class DatabaseDriverClassNameTests {\n \tprivate static final Set<DatabaseDriver> EXCLUDED_DRIVERS = Collections\n \t\t\t.unmodifiableSet(EnumSet.of(DatabaseDriver.UNKNOWN, DatabaseDriver.ORACLE,\n \t\t\t\t\tDatabaseDriver.DB2, DatabaseDriver.DB2_AS400, DatabaseDriver.INFORMIX,\n-\t\t\t\t\tDatabaseDriver.TERADATA));\n+\t\t\t\t\tDatabaseDriver.SAP, DatabaseDriver.TERADATA));\n \n \tprivate final String className;\n ",
    "output": "Fix broken build"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/reactive/WebTestClientSecurityConfiguration.java b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/reactive/WebTestClientSecurityConfiguration.java\n--- a/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/reactive/WebTestClientSecurityConfiguration.java\n+++ b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/reactive/WebTestClientSecurityConfiguration.java\n@@ -33,7 +33,7 @@\n class WebTestClientSecurityConfiguration {\n \n \t@Bean\n-\tpublic MockServerConfigurer get() {\n+\tpublic MockServerConfigurer mockServerConfigurer() {\n \t\treturn SecurityMockServerConfigurers.springSecurity();\n \t}\n ",
    "output": "Use meaningful name for MockServerConfigurer bean"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/reactive/WebTestClientSecurityConfiguration.java b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/reactive/WebTestClientSecurityConfiguration.java\n--- a/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/reactive/WebTestClientSecurityConfiguration.java\n+++ b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/web/reactive/WebTestClientSecurityConfiguration.java\n@@ -33,7 +33,7 @@\n class WebTestClientSecurityConfiguration {\n \n \t@Bean\n-\tpublic MockServerConfigurer get() {\n+\tpublic MockServerConfigurer mockServerConfigurer() {\n \t\treturn SecurityMockServerConfigurers.springSecurity();\n \t}\n ",
    "output": "Use meaningful name for MockServerConfigurer bean"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/error/BasicErrorController.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/error/BasicErrorController.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/error/BasicErrorController.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/error/BasicErrorController.java\n@@ -82,7 +82,7 @@ public String getErrorPath() {\n \t\treturn this.errorProperties.getPath();\n \t}\n \n-\t@RequestMapping(produces = \"text/html\")\n+\t@RequestMapping(produces = MediaType.TEXT_HTML_VALUE)\n \tpublic ModelAndView errorHtml(HttpServletRequest request,\n \t\t\tHttpServletResponse response) {\n \t\tHttpStatus status = getStatus(request);",
    "output": "Use constant for produces attribute"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/error/BasicErrorController.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/error/BasicErrorController.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/error/BasicErrorController.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/error/BasicErrorController.java\n@@ -82,7 +82,7 @@ public String getErrorPath() {\n \t\treturn this.errorProperties.getPath();\n \t}\n \n-\t@RequestMapping(produces = \"text/html\")\n+\t@RequestMapping(produces = MediaType.TEXT_HTML_VALUE)\n \tpublic ModelAndView errorHtml(HttpServletRequest request,\n \t\t\tHttpServletResponse response) {\n \t\tHttpStatus status = getStatus(request);",
    "output": "Use constant for produces attribute"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/event/ApplicationContextInitializedEvent.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/event/ApplicationContextInitializedEvent.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/event/ApplicationContextInitializedEvent.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/event/ApplicationContextInitializedEvent.java\n@@ -36,7 +36,7 @@ public class ApplicationContextInitializedEvent extends SpringApplicationEvent {\n \t * Create a new {@link ApplicationContextInitializedEvent} instance.\n \t * @param application the current application\n \t * @param args the arguments the application is running with\n-\t * @param context the context that was being created (maybe null)\n+\t * @param context the context that has been initialized\n \t */\n \tpublic ApplicationContextInitializedEvent(SpringApplication application,\n \t\t\tString[] args, ConfigurableApplicationContext context) {\n@@ -48,7 +48,7 @@ public ApplicationContextInitializedEvent(SpringApplication application,\n \t * Return the application context.\n \t * @return the context\n \t */\n-\tpublic ConfigurableApplicationContext getContext() {\n+\tpublic ConfigurableApplicationContext getApplicationContext() {\n \t\treturn this.context;\n \t}\n ",
    "output": "Publish ApplicationContextInitializedEvent on contextPrepared"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/ExtendedGroovyClassLoader.java b/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/ExtendedGroovyClassLoader.java\n--- a/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/ExtendedGroovyClassLoader.java\n+++ b/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/ExtendedGroovyClassLoader.java\n@@ -18,13 +18,15 @@\n \n import java.io.ByteArrayInputStream;\n import java.io.File;\n+import java.io.IOException;\n import java.io.InputStream;\n import java.net.MalformedURLException;\n import java.net.URL;\n import java.net.URLClassLoader;\n import java.security.AccessController;\n import java.security.PrivilegedAction;\n import java.util.ArrayList;\n+import java.util.Enumeration;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Map;\n@@ -230,6 +232,11 @@ private boolean isGroovyJar(String entry) {\n \t\t\treturn false;\n \t\t}\n \n+\t\t@Override\n+\t\tpublic Enumeration<URL> getResources(String name) throws IOException {\n+\t\t\treturn this.groovyOnlyClassLoader.getResources(name);\n+\t\t}\n+\n \t\t@Override\n \t\tprotected Class<?> loadClass(String name, boolean resolve)\n \t\t\t\tthrows ClassNotFoundException {",
    "output": "Ensure classpath resource are also filtered\nUpdate `ExtendedGroovyClassLoader` to also filter resources."
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java\n@@ -70,6 +70,7 @@\n  * @author Kazuki Shimizu\n  * @author Eddú Meléndez\n  */\n+@Configuration\n @EnableConfigurationProperties(JpaProperties.class)\n @Import(DataSourceInitializedPublisher.Registrar.class)\n public abstract class JpaBaseConfiguration implements BeanFactoryAware {",
    "output": "Fix abstract configuration following SPR-16839 Spring Framework now requires that all nested configuration classes are contained within a `@Component` class (see SPR-16839). This means that our abstract `JpaBaseConfiguration` class should have a `@Configuration` annotation."
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n@@ -39,7 +39,7 @@\n public final class GradleCompatibilitySuite extends Suite {\n \n \tprivate static final List<String> GRADLE_VERSIONS = Arrays.asList(\"default\", \"4.1\",\n-\t\t\t\"4.2\", \"4.3\", \"4.4.1\", \"4.5.1\", \"4.6\", \"4.7\", \"4.8.1\", \"4.9\");\n+\t\t\t\"4.2\", \"4.3\", \"4.4.1\", \"4.5.1\", \"4.6\", \"4.7\", \"4.8.1\", \"4.9\", \"4.10\");\n \n \tpublic GradleCompatibilitySuite(Class<?> clazz) throws InitializationError {\n \t\tsuper(clazz, createRunners(clazz));",
    "output": "Test the Gradle plugin against Gradle 4.10"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/options/OptionHandler.java b/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/options/OptionHandler.java\n--- a/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/options/OptionHandler.java\n+++ b/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/options/OptionHandler.java\n@@ -58,7 +58,7 @@ public OptionSpecBuilder option(String name, String description) {\n \t\treturn getParser().accepts(name, description);\n \t}\n \n-\tpublic OptionSpecBuilder option(Collection<String> aliases, String description) {\n+\tpublic OptionSpecBuilder option(List<String> aliases, String description) {\n \t\treturn getParser().acceptsAll(aliases, description);\n \t}\n ",
    "output": "Upgrade to JOpt Simple 5.0.4"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsPropertyDefaultsPostProcessor.java b/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsPropertyDefaultsPostProcessor.java\n--- a/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsPropertyDefaultsPostProcessor.java\n+++ b/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsPropertyDefaultsPostProcessor.java\n@@ -59,9 +59,6 @@ public class DevToolsPropertyDefaultsPostProcessor implements EnvironmentPostPro\n \t\tdevToolsProperties.put(\"server.error.include-stacktrace\", \"ALWAYS\");\n \t\tdevToolsProperties.put(\"server.servlet.jsp.init-parameters.development\", \"true\");\n \t\tdevToolsProperties.put(\"spring.reactor.stacktrace-mode.enabled\", \"true\");\n-\t\tdevToolsProperties.put(\"logging.level.org.springframework.web\", \"DEBUG\");\n-\t\tdevToolsProperties.put(\"logging.level.org.springframework.core.codec\", \"DEBUG\");\n-\t\tdevToolsProperties.put(\"logging.level.org.springframework.http\", \"DEBUG\");\n \t\tPROPERTIES = Collections.unmodifiableMap(devToolsProperties);\n \t}\n ",
    "output": "Remove logging level changes from devtools\nUpdate `DevToolsPropertyDefaultsPostProcessor` to remove custom logging\nlevel configuration. Unfortunately it's not easy to back-off logging\noverrides when the user has a custom logback/log4j configuration."
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n@@ -39,7 +39,7 @@\n public final class GradleCompatibilitySuite extends Suite {\n \n \tprivate static final List<String> GRADLE_VERSIONS = Arrays.asList(\"default\", \"4.1\",\n-\t\t\t\"4.2\", \"4.3\", \"4.4.1\", \"4.5.1\", \"4.6\", \"4.7\", \"4.8.1\", \"4.9\");\n+\t\t\t\"4.2\", \"4.3\", \"4.4.1\", \"4.5.1\", \"4.6\", \"4.7\", \"4.8.1\", \"4.9\", \"4.10\");\n \n \tpublic GradleCompatibilitySuite(Class<?> clazz) throws InitializationError {\n \t\tsuper(clazz, createRunners(clazz));",
    "output": "Test the Gradle plugin against Gradle 4.10"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java\n@@ -1049,7 +1049,12 @@ private void customizeRedirectContextRoot(\n \n \t\t\t\t@Override\n \t\t\t\tpublic void customize(Context context) {\n-\t\t\t\t\tcontext.setMapperContextRootRedirectEnabled(redirectContextRoot);\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tcontext.setMapperContextRootRedirectEnabled(redirectContextRoot);\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (NoSuchMethodError ex) {\n+\t\t\t\t\t\t// Tomcat 7. Continue.\n+\t\t\t\t\t}\n \t\t\t\t}\n \n \t\t\t});",
    "output": "Tolerate context root redirect not being configurable on Tomcat 7"
  },
  {
    "input": "diff --git a/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockReset.java b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockReset.java\n--- a/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockReset.java\n+++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockReset.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2017 the original author or authors.\n+ * Copyright 2012-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -53,6 +53,9 @@ public enum MockReset {\n \t */\n \tNONE;\n \n+\tprivate static final boolean MOCKITO_PRESENT = ClassUtils\n+\t\t\t.isPresent(\"org.mockito.internal.util.MockUtil\", null);\n+\n \t/**\n \t * Create {@link MockSettings settings} to be used with mocks where reset should occur\n \t * before each test method runs.\n@@ -103,7 +106,7 @@ public static MockSettings apply(MockReset reset, MockSettings settings) {\n \t@SuppressWarnings(\"rawtypes\")\n \tstatic MockReset get(Object mock) {\n \t\tMockReset reset = MockReset.NONE;\n-\t\tif (ClassUtils.isPresent(\"org.mockito.internal.util.MockUtil\", null)) {\n+\t\tif (MOCKITO_PRESENT) {\n \t\t\tif (Mockito.mockingDetails(mock).isMock()) {\n \t\t\t\tMockCreationSettings settings = MockitoApi.get().getMockSettings(mock);\n \t\t\t\tList listeners = settings.getInvocationListeners();",
    "output": "Only check for Mockito once\nUpdate `MockReset` so that checking for Mockito only happens once."
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/EmbeddedWebServerFactoryCustomizerAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/EmbeddedWebServerFactoryCustomizerAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/EmbeddedWebServerFactoryCustomizerAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/embedded/EmbeddedWebServerFactoryCustomizerAutoConfiguration.java\n@@ -26,6 +26,7 @@\n \n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n import org.springframework.boot.autoconfigure.web.ServerProperties;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n@@ -40,6 +41,7 @@\n  * @since 2.0.0\n  */\n @Configuration\n+@ConditionalOnWebApplication\n @EnableConfigurationProperties(ServerProperties.class)\n public class EmbeddedWebServerFactoryCustomizerAutoConfiguration {\n ",
    "output": "Add missing condition"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/restdocs/MockMvcRestDocsAutoConfigurationAdvancedConfigurationIntegrationTests.java b/spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/restdocs/MockMvcRestDocsAutoConfigurationAdvancedConfigurationIntegrationTests.java\n--- a/spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/restdocs/MockMvcRestDocsAutoConfigurationAdvancedConfigurationIntegrationTests.java\n+++ b/spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/restdocs/MockMvcRestDocsAutoConfigurationAdvancedConfigurationIntegrationTests.java\n@@ -30,6 +30,7 @@\n import org.springframework.restdocs.mockmvc.MockMvcRestDocumentation;\n import org.springframework.restdocs.mockmvc.RestDocumentationResultHandler;\n import org.springframework.restdocs.templates.TemplateFormats;\n+import org.springframework.security.test.context.support.WithMockUser;\n import org.springframework.test.context.junit4.SpringRunner;\n import org.springframework.test.web.servlet.MockMvc;\n import org.springframework.util.FileSystemUtils;\n@@ -50,6 +51,7 @@\n  */\n @RunWith(SpringRunner.class)\n @WebMvcTest(controllers = RestDocsTestController.class)\n+@WithMockUser\n @AutoConfigureRestDocs\n public class MockMvcRestDocsAutoConfigurationAdvancedConfigurationIntegrationTests {\n ",
    "output": "Add @WithMockUser to tests"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/env/OriginTrackedYamlLoader.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/env/OriginTrackedYamlLoader.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/env/OriginTrackedYamlLoader.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/env/OriginTrackedYamlLoader.java\n@@ -124,7 +124,7 @@ private static class KeyScalarNode extends ScalarNode {\n \n \t\tKeyScalarNode(ScalarNode node) {\n \t\t\tsuper(node.getTag(), node.getValue(), node.getStartMark(), node.getEndMark(),\n-\t\t\t\t\tnode.getStyle());\n+\t\t\t\t\tnode.getScalarStyle());\n \t\t}\n \n \t\tpublic static NodeTuple get(NodeTuple nodeTuple) {",
    "output": "Upgrade to SnakeYAML 1.23"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/env/OriginTrackedYamlLoader.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/env/OriginTrackedYamlLoader.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/env/OriginTrackedYamlLoader.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/env/OriginTrackedYamlLoader.java\n@@ -124,7 +124,7 @@ private static class KeyScalarNode extends ScalarNode {\n \n \t\tKeyScalarNode(ScalarNode node) {\n \t\t\tsuper(node.getTag(), node.getValue(), node.getStartMark(), node.getEndMark(),\n-\t\t\t\t\tnode.getStyle());\n+\t\t\t\t\tnode.getScalarStyle());\n \t\t}\n \n \t\tpublic static NodeTuple get(NodeTuple nodeTuple) {",
    "output": "Upgrade to SnakeYAML 1.23"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/servlet/OAuth2WebSecurityConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/servlet/OAuth2WebSecurityConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/servlet/OAuth2WebSecurityConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/servlet/OAuth2WebSecurityConfiguration.java\n@@ -61,7 +61,7 @@ static class OAuth2WebSecurityConfigurerAdapter extends WebSecurityConfigurerAda\n \t\t@Override\n \t\tprotected void configure(HttpSecurity http) throws Exception {\n \t\t\thttp.authorizeRequests().anyRequest().authenticated().and().oauth2Login()\n-\t\t\t\t\t.and().oauth2Client().authorizationCodeGrant();\n+\t\t\t\t\t.and().oauth2Client();\n \t\t}\n \n \t}",
    "output": "Remove explicit call to `authorizationCodeGrant`"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/SslBuilderCustomizer.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/SslBuilderCustomizer.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/SslBuilderCustomizer.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/SslBuilderCustomizer.java\n@@ -84,10 +84,7 @@ public void customize(Undertow.Builder builder) {\n \t\t\t\t\t\tSequence.of(this.ssl.getCiphers()));\n \t\t\t}\n \t\t}\n-\t\tcatch (NoSuchAlgorithmException ex) {\n-\t\t\tthrow new IllegalStateException(ex);\n-\t\t}\n-\t\tcatch (KeyManagementException ex) {\n+\t\tcatch (NoSuchAlgorithmException | KeyManagementException ex) {\n \t\t\tthrow new IllegalStateException(ex);\n \t\t}\n \t}",
    "output": "Collapse identical catch blocks"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/SslBuilderCustomizer.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/SslBuilderCustomizer.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/SslBuilderCustomizer.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/SslBuilderCustomizer.java\n@@ -84,10 +84,7 @@ public void customize(Undertow.Builder builder) {\n \t\t\t\t\t\tSequence.of(this.ssl.getCiphers()));\n \t\t\t}\n \t\t}\n-\t\tcatch (NoSuchAlgorithmException ex) {\n-\t\t\tthrow new IllegalStateException(ex);\n-\t\t}\n-\t\tcatch (KeyManagementException ex) {\n+\t\tcatch (NoSuchAlgorithmException | KeyManagementException ex) {\n \t\t\tthrow new IllegalStateException(ex);\n \t\t}\n \t}",
    "output": "Collapse identical catch blocks"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurations.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurations.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurations.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurations.java\n@@ -16,6 +16,7 @@\n \n package org.springframework.boot.autoconfigure;\n \n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.List;\n@@ -51,7 +52,7 @@ protected Collection<Class<?>> sort(Collection<Class<?>> classes) {\n \t\tList<String> sorted = SORTER.getInPriorityOrder(names);\n \t\treturn sorted.stream()\n \t\t\t\t.map((className) -> ClassUtils.resolveClassName(className, null))\n-\t\t\t\t.collect(Collectors.toList());\n+\t\t\t\t.collect(Collectors.toCollection(ArrayList::new));\n \t}\n \n \t@Override",
    "output": "Polish some Collectors"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2ClientPropertiesTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2ClientPropertiesTests.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2ClientPropertiesTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2ClientPropertiesTests.java\n@@ -45,7 +45,7 @@ public void clientIdAbsentThrowsException() {\n \t}\n \n \t@Test\n-\tpublic void clientSecretAbsentNotThrowsException() {\n+\tpublic void clientSecretAbsentShouldNotThrowException() {\n \t\tOAuth2ClientProperties.Registration registration = new OAuth2ClientProperties.Registration();\n \t\tregistration.setClientId(\"foo\");\n \t\tregistration.setProvider(\"google\");",
    "output": "Oauth2 client secret should not be required"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfiguration.java\n@@ -29,6 +29,7 @@\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\n import org.springframework.boot.autoconfigure.condition.SearchStrategy;\n+import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\n import org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.EnvironmentAware;\n@@ -60,7 +61,7 @@\n @Configuration\n @ConditionalOnClass(EnableIntegration.class)\n @EnableConfigurationProperties(IntegrationProperties.class)\n-@AutoConfigureAfter(JmxAutoConfiguration.class)\n+@AutoConfigureAfter({ DataSourceAutoConfiguration.class, JmxAutoConfiguration.class })\n public class IntegrationAutoConfiguration {\n \n \t/**",
    "output": "Order IntegrationAutoConfiguration properly\nThis commit makes sure that the auto-configuration for Spring\nIntegration runs after the datasource has been auto-configured if\nnecessary as there is an optional part that can initialize the jdbc\nschema."
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java\n@@ -317,11 +317,11 @@ private static class RequestMatcherFactory {\n \n \t\tpublic RequestMatcher antPath(RequestMatcherProvider matcherProvider,\n \t\t\t\tString... parts) {\n-\t\t\tString pattern = this.prefix;\n+\t\t\tStringBuilder pattern = new StringBuilder(this.prefix);\n \t\t\tfor (String part : parts) {\n-\t\t\t\tpattern += part;\n+\t\t\t\tpattern.append(part);\n \t\t\t}\n-\t\t\treturn matcherProvider.getRequestMatcher(pattern);\n+\t\t\treturn matcherProvider.getRequestMatcher(pattern.toString());\n \t\t}\n \n \t}",
    "output": "Fix String concatenation in a loop\nFix String concatenation in a loop"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java\n@@ -317,7 +317,7 @@ private static class RequestMatcherFactory {\n \n \t\tpublic RequestMatcher antPath(RequestMatcherProvider matcherProvider,\n \t\t\t\tString... parts) {\n-\t\t\tStringBuffer pattern = new StringBuffer(this.prefix);\n+\t\t\tStringBuilder pattern = new StringBuilder(this.prefix);\n \t\t\tfor (String part : parts) {\n \t\t\t\tpattern.append(part);\n \t\t\t}",
    "output": "Fix String concatenation in a loop"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java\n@@ -317,11 +317,11 @@ private static class RequestMatcherFactory {\n \n \t\tpublic RequestMatcher antPath(RequestMatcherProvider matcherProvider,\n \t\t\t\tString... parts) {\n-\t\t\tString pattern = this.prefix;\n+\t\t\tStringBuffer pattern = new StringBuffer(this.prefix);\n \t\t\tfor (String part : parts) {\n-\t\t\t\tpattern += part;\n+\t\t\t\tpattern.append(part);\n \t\t\t}\n-\t\t\treturn matcherProvider.getRequestMatcher(pattern);\n+\t\t\treturn matcherProvider.getRequestMatcher(pattern.toString());\n \t\t}\n \n \t}",
    "output": "Fix String concatenation in a loop"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/validation/OriginTrackedFieldError.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/validation/OriginTrackedFieldError.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/validation/OriginTrackedFieldError.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/validation/OriginTrackedFieldError.java\n@@ -46,7 +46,7 @@ public Origin getOrigin() {\n \t@Override\n \tpublic String toString() {\n \t\tif (this.origin == null) {\n-\t\t\treturn toString();\n+\t\t\treturn super.toString();\n \t\t}\n \t\treturn super.toString() + \"; origin \" + this.origin;\n \t}",
    "output": "Fix potential infinite recursive loop in toString"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/validation/OriginTrackedFieldError.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/validation/OriginTrackedFieldError.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/validation/OriginTrackedFieldError.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/validation/OriginTrackedFieldError.java\n@@ -46,7 +46,7 @@ public Origin getOrigin() {\n \t@Override\n \tpublic String toString() {\n \t\tif (this.origin == null) {\n-\t\t\treturn toString();\n+\t\t\treturn super.toString();\n \t\t}\n \t\treturn super.toString() + \"; origin \" + this.origin;\n \t}",
    "output": "Fix potential infinite recursive loop in toString"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/TypeUtils.java b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/TypeUtils.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/TypeUtils.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/TypeUtils.java\n@@ -87,7 +87,7 @@ class TypeUtils {\n \tprivate TypeMirror getDeclaredType(Types types, Class<?> typeClass,\n \t\t\tint numberOfTypeArgs) {\n \t\tTypeMirror[] typeArgs = new TypeMirror[numberOfTypeArgs];\n-\t\tArrays.setAll(typeArgs, i -> types.getWildcardType(null, null));\n+\t\tArrays.setAll(typeArgs, (i) -> types.getWildcardType(null, null));\n \t\tTypeElement typeElement = this.env.getElementUtils()\n \t\t\t\t.getTypeElement(typeClass.getName());\n \t\ttry {",
    "output": "Fix checkstyle violation"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/TypeUtils.java b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/TypeUtils.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/TypeUtils.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/TypeUtils.java\n@@ -128,16 +128,6 @@ public boolean isCollectionOrMap(TypeMirror type) {\n \t\t\t\t|| this.env.getTypeUtils().isAssignable(type, this.mapType);\n \t}\n \n-\tpublic boolean isEnclosedIn(Element candidate, TypeElement element) {\n-\t\tif (candidate == null || element == null) {\n-\t\t\treturn false;\n-\t\t}\n-\t\tif (candidate.equals(element)) {\n-\t\t\treturn true;\n-\t\t}\n-\t\treturn isEnclosedIn(candidate.getEnclosingElement(), element);\n-\t}\n-\n \tpublic String getJavaDoc(Element element) {\n \t\tString javadoc = (element != null)\n \t\t\t\t? this.env.getElementUtils().getDocComment(element) : null;",
    "output": "Remove unused method in TypeUtils"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/TypeUtils.java b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/TypeUtils.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/TypeUtils.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/TypeUtils.java\n@@ -128,16 +128,6 @@ public boolean isCollectionOrMap(TypeMirror type) {\n \t\t\t\t|| this.env.getTypeUtils().isAssignable(type, this.mapType);\n \t}\n \n-\tpublic boolean isEnclosedIn(Element candidate, TypeElement element) {\n-\t\tif (candidate == null || element == null) {\n-\t\t\treturn false;\n-\t\t}\n-\t\tif (candidate.equals(element)) {\n-\t\t\treturn true;\n-\t\t}\n-\t\treturn isEnclosedIn(candidate.getEnclosingElement(), element);\n-\t}\n-\n \tpublic String getJavaDoc(Element element) {\n \t\tString javadoc = (element != null)\n \t\t\t\t? this.env.getElementUtils().getDocComment(element) : null;",
    "output": "Remove unused method in TypeUtils"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/servlet/DispatcherServletAutoConfigurationTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/servlet/DispatcherServletAutoConfigurationTests.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/servlet/DispatcherServletAutoConfigurationTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/servlet/DispatcherServletAutoConfigurationTests.java\n@@ -170,8 +170,6 @@ public void dispatcherServletDefaultConfig() {\n \t\tthis.contextRunner.run((context) -> {\n \t\t\tDispatcherServlet dispatcherServlet = context\n \t\t\t\t\t.getBean(DispatcherServlet.class);\n-\t\t\tassertThat(dispatcherServlet).extracting(\"shouldHandleFailure\")\n-\t\t\t\t\t.containsExactly(false);\n \t\t\tassertThat(dispatcherServlet).extracting(\"throwExceptionIfNoHandlerFound\")\n \t\t\t\t\t.containsExactly(false);\n \t\t\tassertThat(dispatcherServlet).extracting(\"dispatchOptionsRequest\")",
    "output": "Align with DispatcherServlet changes\nThe `shouldHandleFailure` configuration option has been removed from\n`DispatcherServlet`."
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/servlet/DispatcherServletAutoConfigurationTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/servlet/DispatcherServletAutoConfigurationTests.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/servlet/DispatcherServletAutoConfigurationTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/servlet/DispatcherServletAutoConfigurationTests.java\n@@ -171,7 +171,7 @@ public void dispatcherServletDefaultConfig() {\n \t\t\tDispatcherServlet dispatcherServlet = context\n \t\t\t\t\t.getBean(DispatcherServlet.class);\n \t\t\tassertThat(dispatcherServlet).extracting(\"shouldHandleFailure\")\n-\t\t\t\t\t.containsExactly(true);\n+\t\t\t\t\t.containsExactly(false);\n \t\t\tassertThat(dispatcherServlet).extracting(\"throwExceptionIfNoHandlerFound\")\n \t\t\t\t\t.containsExactly(false);\n \t\t\tassertThat(dispatcherServlet).extracting(\"dispatchOptionsRequest\")",
    "output": "Align test with changes made in ab1f5931"
  },
  {
    "input": "diff --git a/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/classloader/RestartClassLoaderTests.java b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/classloader/RestartClassLoaderTests.java\n--- a/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/classloader/RestartClassLoaderTests.java\n+++ b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/classloader/RestartClassLoaderTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2017 the original author or authors.\n+ * Copyright 2012-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -23,7 +23,7 @@\n import java.net.URL;\n import java.net.URLClassLoader;\n import java.nio.charset.Charset;\n-import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.Enumeration;\n import java.util.List;\n import java.util.jar.JarOutputStream;\n@@ -214,13 +214,8 @@ private String readString(InputStream in) throws IOException {\n \t}\n \n \tprivate <T> List<T> toList(Enumeration<T> enumeration) {\n-\t\tList<T> list = new ArrayList<T>();\n-\t\tif (enumeration != null) {\n-\t\t\twhile (enumeration.hasMoreElements()) {\n-\t\t\t\tlist.add(enumeration.nextElement());\n-\t\t\t}\n-\t\t}\n-\t\treturn list;\n+\t\treturn ((enumeration != null) ? Collections.list(enumeration)\n+\t\t\t\t: Collections.<T>emptyList());\n \t}\n \n }",
    "output": "Use Collections.list() where possible"
  },
  {
    "input": "diff --git a/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/classloader/RestartClassLoaderTests.java b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/classloader/RestartClassLoaderTests.java\n--- a/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/classloader/RestartClassLoaderTests.java\n+++ b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/classloader/RestartClassLoaderTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2017 the original author or authors.\n+ * Copyright 2012-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -23,7 +23,7 @@\n import java.net.URL;\n import java.net.URLClassLoader;\n import java.nio.charset.Charset;\n-import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.Enumeration;\n import java.util.List;\n import java.util.jar.JarOutputStream;\n@@ -214,13 +214,8 @@ private String readString(InputStream in) throws IOException {\n \t}\n \n \tprivate <T> List<T> toList(Enumeration<T> enumeration) {\n-\t\tList<T> list = new ArrayList<T>();\n-\t\tif (enumeration != null) {\n-\t\t\twhile (enumeration.hasMoreElements()) {\n-\t\t\t\tlist.add(enumeration.nextElement());\n-\t\t\t}\n-\t\t}\n-\t\treturn list;\n+\t\treturn ((enumeration != null) ? Collections.list(enumeration)\n+\t\t\t\t: Collections.<T>emptyList());\n \t}\n \n }",
    "output": "Use Collections.list() where possible"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/NettyWebServer.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/NettyWebServer.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/NettyWebServer.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/NettyWebServer.java\n@@ -22,7 +22,6 @@\n import org.apache.commons.logging.LogFactory;\n import reactor.netty.ChannelBindException;\n import reactor.netty.DisposableServer;\n-import reactor.netty.http.HttpResources;\n import reactor.netty.http.server.HttpServer;\n \n import org.springframework.boot.web.server.PortInUseException;\n@@ -122,8 +121,6 @@ public void stop() throws WebServerException {\n \t\t\telse {\n \t\t\t\tthis.disposableServer.disposeNow();\n \t\t\t}\n-\t\t\t// temporary fix for gh-9146\n-\t\t\tHttpResources.shutdown();\n \t\t\tthis.disposableServer = null;\n \t\t}\n \t}",
    "output": "Remove workaround for Netty resources cleanup"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2ClientPropertiesRegistrationAdapter.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2ClientPropertiesRegistrationAdapter.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2ClientPropertiesRegistrationAdapter.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2ClientPropertiesRegistrationAdapter.java\n@@ -85,7 +85,8 @@ private static Builder getBuilderFromIssuerIfPossible(String registrationId,\n \t\t\tString issuer = provider.getIssuerUri();\n \t\t\tif (issuer != null) {\n \t\t\t\tString cleanedIssuer = cleanIssuerPath(issuer);\n-\t\t\t\tBuilder builder = ClientRegistrations.fromOidcIssuerLocation(cleanedIssuer)\n+\t\t\t\tBuilder builder = ClientRegistrations\n+\t\t\t\t\t\t.fromOidcIssuerLocation(cleanedIssuer)\n \t\t\t\t\t\t.registrationId(registrationId);\n \t\t\t\treturn getBuilder(builder, provider);\n \t\t\t}",
    "output": "Upgrade OIDC configuration"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/servlet/OAuth2ResourceServerWebSecurityConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/servlet/OAuth2ResourceServerWebSecurityConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/servlet/OAuth2ResourceServerWebSecurityConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/servlet/OAuth2ResourceServerWebSecurityConfiguration.java\n@@ -35,6 +35,7 @@ class OAuth2ResourceServerWebSecurityConfiguration {\n \t@ConditionalOnBean(JwtDecoder.class)\n \tstatic class OAuth2WebSecurityConfigurerAdapter extends WebSecurityConfigurerAdapter {\n \n+\t\t@Override\n \t\tprotected void configure(HttpSecurity http) throws Exception {\n \t\t\thttp.authorizeRequests().anyRequest().authenticated().and().oauth2()\n \t\t\t\t\t.resourceServer().jwt();",
    "output": "Add missing @Override"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/servlet/OAuth2ResourceServerWebSecurityConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/servlet/OAuth2ResourceServerWebSecurityConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/servlet/OAuth2ResourceServerWebSecurityConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/servlet/OAuth2ResourceServerWebSecurityConfiguration.java\n@@ -35,6 +35,7 @@ class OAuth2ResourceServerWebSecurityConfiguration {\n \t@ConditionalOnBean(JwtDecoder.class)\n \tstatic class OAuth2WebSecurityConfigurerAdapter extends WebSecurityConfigurerAdapter {\n \n+\t\t@Override\n \t\tprotected void configure(HttpSecurity http) throws Exception {\n \t\t\thttp.authorizeRequests().anyRequest().authenticated().and().oauth2()\n \t\t\t\t\t.resourceServer().jwt();",
    "output": "Add missing @Override"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/util/LambdaSafe.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/util/LambdaSafe.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/util/LambdaSafe.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/util/LambdaSafe.java\n@@ -188,9 +188,22 @@ private boolean startsWithArgumentClassName(String message, Object argument) {\n \t\t\t\treturn false;\n \t\t\t}\n \t\t\tClass<? extends Object> argumentType = argument.getClass();\n+\t\t\t// On Java 8, the message starts with the class name: \"java.lang.String cannot\n+\t\t\t// be cast...\"\n \t\t\tif (message.startsWith(argumentType.getName())) {\n \t\t\t\treturn true;\n \t\t\t}\n+\t\t\t// On Java 11, the message starts with \"class ...\" a.k.a. Class.toString()\n+\t\t\tif (message.startsWith(argumentType.toString())) {\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t\t// On Java 9, the message used to contain the module name:\n+\t\t\t// \"java.base/java.lang.String cannot be cast...\"\n+\t\t\tint moduleSeparatorIndex = message.indexOf('/');\n+\t\t\tif (moduleSeparatorIndex != -1 && message.startsWith(argumentType.getName(),\n+\t\t\t\t\tmoduleSeparatorIndex + 1)) {\n+\t\t\t\treturn true;\n+\t\t\t}\n \t\t\tif (CLASS_GET_MODULE != null) {\n \t\t\t\tObject module = ReflectionUtils.invokeMethod(CLASS_GET_MODULE,\n \t\t\t\t\t\targumentType);",
    "output": "Fix ClassCastException message detection on Java 11\nThis commit also fixes the detection of a ClassCastException that can\nbe safely ignored on the module path with Java 9"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java\n@@ -332,7 +332,7 @@ public static class Tomcat {\n \t\t/**\n \t\t * Maximum amount of request body bytes to swallow.\n \t\t */\n-\t\tprivate int maxSwallowSize = 4096;\n+\t\tprivate int maxSwallowSize = 2097152;\n \n \t\t/**\n \t\t * Whether requests to the context root should be redirected by appending a / to",
    "output": "Align server.tomcat.max-swallow-size with Tomcat's default value"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java\n@@ -332,7 +332,7 @@ public static class Tomcat {\n \t\t/**\n \t\t * Maximum amount of request body bytes to swallow.\n \t\t */\n-\t\tprivate int maxSwallowSize = 4096;\n+\t\tprivate int maxSwallowSize = 2097152;\n \n \t\t/**\n \t\t * Whether requests to the context root should be redirected by appending a / to",
    "output": "Align server.tomcat.max-swallow-size with Tomcat's default value"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-reactive-oauth2-resource-server/src/test/java/sample/oauth2/resource/SampleReactiveOAuth2ResourceServerApplicationTests.java b/spring-boot-samples/spring-boot-sample-reactive-oauth2-resource-server/src/test/java/sample/oauth2/resource/SampleReactiveOAuth2ResourceServerApplicationTests.java\n--- a/spring-boot-samples/spring-boot-sample-reactive-oauth2-resource-server/src/test/java/sample/oauth2/resource/SampleReactiveOAuth2ResourceServerApplicationTests.java\n+++ b/spring-boot-samples/spring-boot-sample-reactive-oauth2-resource-server/src/test/java/sample/oauth2/resource/SampleReactiveOAuth2ResourceServerApplicationTests.java\n@@ -62,7 +62,7 @@ public static void shutdown() throws Exception {\n \t@Test\n \tpublic void getWhenValidTokenShouldBeOk() {\n \t\tthis.webTestClient.get().uri(\"/\")\n-\t\t\t\t.headers(headers -> headers.setBearerAuth(VALID_TOKEN)).exchange()\n+\t\t\t\t.headers((headers) -> headers.setBearerAuth(VALID_TOKEN)).exchange()\n \t\t\t\t.expectStatus().isOk().expectBody(String.class)\n \t\t\t\t.isEqualTo(\"Hello, subject!\");\n \t}",
    "output": "Fix checkstyle rule"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-oauth2-resource-server/src/test/java/sample/oauth2/resource/SampleOauth2ResourceServerApplicationTests.java b/spring-boot-samples/spring-boot-sample-oauth2-resource-server/src/test/java/sample/oauth2/resource/SampleOauth2ResourceServerApplicationTests.java\n--- a/spring-boot-samples/spring-boot-sample-oauth2-resource-server/src/test/java/sample/oauth2/resource/SampleOauth2ResourceServerApplicationTests.java\n+++ b/spring-boot-samples/spring-boot-sample-oauth2-resource-server/src/test/java/sample/oauth2/resource/SampleOauth2ResourceServerApplicationTests.java\n@@ -108,4 +108,4 @@ private static MockResponse mockResponse() {\n \t\t\t\t.setResponseCode(200).setBody(body);\n \t}\n \n-}\n\\ No newline at end of file\n+}",
    "output": "Fix checkstyle rule"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/PropertiesMeterFilter.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/PropertiesMeterFilter.java\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/PropertiesMeterFilter.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/PropertiesMeterFilter.java\n@@ -39,8 +39,6 @@\n  */\n public class PropertiesMeterFilter implements MeterFilter {\n \n-\tprivate static final ServiceLevelAgreementBoundary[] EMPTY_SLA = {};\n-\n \tprivate MetricsProperties properties;\n \n \tpublic PropertiesMeterFilter(MetricsProperties properties) {\n@@ -67,7 +65,10 @@ public DistributionStatisticConfig configure(Meter.Id id,\n \t}\n \n \tprivate long[] convertSla(Meter.Type meterType, ServiceLevelAgreementBoundary[] sla) {\n-\t\tlong[] converted = Arrays.stream((sla != null) ? sla : EMPTY_SLA)\n+\t\tif (sla == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tlong[] converted = Arrays.stream(sla)\n \t\t\t\t.map((candidate) -> candidate.getValue(meterType))\n \t\t\t\t.filter(Objects::nonNull).mapToLong(Long::longValue).toArray();\n \t\treturn (converted.length != 0) ? converted : null;",
    "output": "Return null immediately when sla is null in convertSla()"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/PropertiesMeterFilter.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/PropertiesMeterFilter.java\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/PropertiesMeterFilter.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/PropertiesMeterFilter.java\n@@ -39,8 +39,6 @@\n  */\n public class PropertiesMeterFilter implements MeterFilter {\n \n-\tprivate static final ServiceLevelAgreementBoundary[] EMPTY_SLA = {};\n-\n \tprivate MetricsProperties properties;\n \n \tpublic PropertiesMeterFilter(MetricsProperties properties) {\n@@ -67,7 +65,10 @@ public DistributionStatisticConfig configure(Meter.Id id,\n \t}\n \n \tprivate long[] convertSla(Meter.Type meterType, ServiceLevelAgreementBoundary[] sla) {\n-\t\tlong[] converted = Arrays.stream((sla != null) ? sla : EMPTY_SLA)\n+\t\tif (sla == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tlong[] converted = Arrays.stream(sla)\n \t\t\t\t.map((candidate) -> candidate.getValue(meterType))\n \t\t\t\t.filter(Objects::nonNull).mapToLong(Long::longValue).toArray();\n \t\treturn (converted.length != 0) ? converted : null;",
    "output": "Return null immediately when sla is null in convertSla()"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java\n@@ -169,10 +169,7 @@ else if (this.flywayDataSource != null) {\n \t\t\t\t\t\t\t\t\t+ \" One type must be used exclusively.\");\n \t\t\t\t}\n \t\t\t}\n-\t\t\tString[] locations = new LocationResolver(flyway.getDataSource())\n-\t\t\t\t\t.resolveLocations(this.properties.getLocations());\n-\t\t\tcheckLocationExists(locations);\n-\t\t\tflyway.setLocations(locations);\n+\t\t\tcheckLocationExists(flyway);\n \t\t\treturn flyway;\n \t\t}\n \n@@ -182,7 +179,9 @@ private String getProperty(Supplier<String> property,\n \t\t\treturn (value != null) ? value : defaultValue.get();\n \t\t}\n \n-\t\tprivate void checkLocationExists(String... locations) {\n+\t\tprivate void checkLocationExists(Flyway flyway) {\n+\t\t\tString[] locations = new LocationResolver(flyway.getDataSource())\n+\t\t\t\t\t.resolveLocations(this.properties.getLocations());\n \t\t\tif (this.properties.isCheckLocation()) {\n \t\t\t\tAssert.state(locations.length != 0,\n \t\t\t\t\t\t\"Migration script locations not configured\");",
    "output": "Avoid double binding of Flyway's locations"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java\n@@ -715,7 +715,8 @@ public static class Template {\n \t\tprivate String routingKey = \"\";\n \n \t\t/**\n-\t\t * Default queue name that will be used for synchronous receives.\n+\t\t * Name of the default queue to receive messages from when none is specified\n+\t\t * explicitly.\n \t\t */\n \t\tprivate String queue;\n \n@@ -764,12 +765,13 @@ public void setRoutingKey(String routingKey) {\n \t\t}\n \n \t\tpublic String getQueue() {\n-\t\t\treturn queue;\n+\t\t\treturn this.queue;\n \t\t}\n \n \t\tpublic void setQueue(String queue) {\n \t\t\tthis.queue = queue;\n \t\t}\n+\n \t}\n \n \tpublic static class Retry {",
    "output": "Make RabbitTemplate default receive queue configurable"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java\n@@ -365,8 +365,7 @@ private static class BeanSearchSpec {\n \t\t\tcollect(attributes, \"annotation\", this.annotations);\n \t\t\tcollect(attributes, \"ignored\", this.ignoredTypes);\n \t\t\tcollect(attributes, \"ignoredType\", this.ignoredTypes);\n-\t\t\tthis.strategy = (SearchStrategy) metadata\n-\t\t\t\t\t.getAnnotationAttributes(annotationType.getName()).get(\"search\");\n+\t\t\tthis.strategy = (SearchStrategy) attributes.getFirst(\"search\");\n \t\t\tBeanTypeDeductionException deductionException = null;\n \t\t\ttry {\n \t\t\t\tif (this.types.isEmpty() && this.names.isEmpty()) {",
    "output": "Avoid annotation attribute lookup in OnBeanCondition"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java\n@@ -365,8 +365,7 @@ private static class BeanSearchSpec {\n \t\t\tcollect(attributes, \"annotation\", this.annotations);\n \t\t\tcollect(attributes, \"ignored\", this.ignoredTypes);\n \t\t\tcollect(attributes, \"ignoredType\", this.ignoredTypes);\n-\t\t\tthis.strategy = (SearchStrategy) metadata\n-\t\t\t\t\t.getAnnotationAttributes(annotationType.getName()).get(\"search\");\n+\t\t\tthis.strategy = (SearchStrategy) attributes.getFirst(\"search\");\n \t\t\tBeanTypeDeductionException deductionException = null;\n \t\t\ttry {\n \t\t\t\tif (this.types.isEmpty() && this.names.isEmpty()) {",
    "output": "Avoid annotation attribute lookup in OnBeanCondition"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationImportSelector.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationImportSelector.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationImportSelector.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationImportSelector.java\n@@ -489,8 +489,8 @@ protected static class AutoConfigurationEntry {\n \t\tprivate final Set<String> exclusions;\n \n \t\tprivate AutoConfigurationEntry() {\n-\t\t\tthis.configurations = Collections.EMPTY_LIST;\n-\t\t\tthis.exclusions = Collections.EMPTY_SET;\n+\t\t\tthis.configurations = Collections.emptyList();\n+\t\t\tthis.exclusions = Collections.emptySet();\n \t\t}\n \n \t\t/**",
    "output": "Fix unchecked assignment in AutoConfigurationImportSelector"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationImportSelector.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationImportSelector.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationImportSelector.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationImportSelector.java\n@@ -489,8 +489,8 @@ protected static class AutoConfigurationEntry {\n \t\tprivate final Set<String> exclusions;\n \n \t\tprivate AutoConfigurationEntry() {\n-\t\t\tthis.configurations = Collections.EMPTY_LIST;\n-\t\t\tthis.exclusions = Collections.EMPTY_SET;\n+\t\t\tthis.configurations = Collections.emptyList();\n+\t\t\tthis.exclusions = Collections.emptySet();\n \t\t}\n \n \t\t/**",
    "output": "Fix unchecked assignment in AutoConfigurationImportSelector"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactory.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactory.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactory.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactory.java\n@@ -348,7 +348,7 @@ private void registerServletContainerInitializerToDriveServletContextInitializer\n \t\t\tDeploymentInfo deployment, ServletContextInitializer... initializers) {\n \t\tServletContextInitializer[] mergedInitializers = mergeInitializers(initializers);\n \t\tInitializer initializer = new Initializer(mergedInitializers);\n-\t\tdeployment.addServletContainerInitalizer(new ServletContainerInitializerInfo(\n+\t\tdeployment.addServletContainerInitializer(new ServletContainerInitializerInfo(\n \t\t\t\tInitializer.class,\n \t\t\t\tnew ImmediateInstanceFactory<ServletContainerInitializer>(initializer),\n \t\t\t\tNO_CLASSES));",
    "output": "Fix deprecation in UndertowServletWebServerFactory"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactory.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactory.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactory.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactory.java\n@@ -348,7 +348,7 @@ private void registerServletContainerInitializerToDriveServletContextInitializer\n \t\t\tDeploymentInfo deployment, ServletContextInitializer... initializers) {\n \t\tServletContextInitializer[] mergedInitializers = mergeInitializers(initializers);\n \t\tInitializer initializer = new Initializer(mergedInitializers);\n-\t\tdeployment.addServletContainerInitalizer(new ServletContainerInitializerInfo(\n+\t\tdeployment.addServletContainerInitializer(new ServletContainerInitializerInfo(\n \t\t\t\tInitializer.class,\n \t\t\t\tnew ImmediateInstanceFactory<ServletContainerInitializer>(initializer),\n \t\t\t\tNO_CLASSES));",
    "output": "Fix deprecation in UndertowServletWebServerFactory"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/NettyWebServer.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/NettyWebServer.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/NettyWebServer.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/NettyWebServer.java\n@@ -115,15 +115,14 @@ public void run() {\n \t@Override\n \tpublic void stop() throws WebServerException {\n \t\tif (this.disposableServer != null) {\n-\t\t\t// temporary fix for gh-9146\n-\t\t\tthis.disposableServer.onDispose()\n-\t\t\t\t\t.doFinally((signal) -> HttpResources.reset());\n \t\t\tif (this.lifecycleTimeout != null) {\n \t\t\t\tthis.disposableServer.disposeNow(this.lifecycleTimeout);\n \t\t\t}\n \t\t\telse {\n \t\t\t\tthis.disposableServer.disposeNow();\n \t\t\t}\n+\t\t\t// temporary fix for gh-9146\n+\t\t\tHttpResources.shutdown();\n \t\t\tthis.disposableServer = null;\n \t\t}\n \t}",
    "output": "Upgrade HttpResources cleaning for Reactor Netty This commit updates the workaround for issue"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/http/HttpExchangeTracer.java b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/http/HttpExchangeTracer.java\n--- a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/http/HttpExchangeTracer.java\n+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/http/HttpExchangeTracer.java\n@@ -25,6 +25,7 @@\n import java.util.function.Consumer;\n import java.util.function.Predicate;\n import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n \n import org.springframework.http.HttpHeaders;\n \n@@ -101,9 +102,9 @@ private Map<String, List<String>> getHeadersIfIncluded(Include include,\n \t\tif (!this.includes.contains(include)) {\n \t\t\treturn new LinkedHashMap<>();\n \t\t}\n-\t\tMap<String, List<String>> headers = headersSupplier.get();\n-\t\theaders.keySet().removeIf((header) -> !headerPredicate.test(header));\n-\t\treturn headers;\n+\t\treturn headersSupplier.get().entrySet().stream()\n+\t\t\t\t.filter((entry) -> headerPredicate.test(entry.getKey()))\n+\t\t\t\t.collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n \t}\n \n \tprivate final class FilteredTraceableRequest implements TraceableRequest {",
    "output": "Prevent headers to be mutated\nThis commit rework 1189ccc to prevent a mutate call on the original\nheaders map."
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/http/HttpExchangeTracer.java b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/http/HttpExchangeTracer.java\n--- a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/http/HttpExchangeTracer.java\n+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/http/HttpExchangeTracer.java\n@@ -18,7 +18,6 @@\n \n import java.net.URI;\n import java.security.Principal;\n-import java.util.Iterator;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n@@ -103,12 +102,7 @@ private Map<String, List<String>> getHeadersIfIncluded(Include include,\n \t\t\treturn new LinkedHashMap<>();\n \t\t}\n \t\tMap<String, List<String>> headers = headersSupplier.get();\n-\t\tIterator<String> keys = headers.keySet().iterator();\n-\t\twhile (keys.hasNext()) {\n-\t\t\tif (!headerPredicate.test(keys.next())) {\n-\t\t\t\tkeys.remove();\n-\t\t\t}\n-\t\t}\n+\t\theaders.keySet().removeIf((header) -> !headerPredicate.test(header));\n \t\treturn headers;\n \t}\n ",
    "output": "Use Collection.removeIf() where possible\nUse Collection.removeIf() where possible"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/http/HttpExchangeTracer.java b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/http/HttpExchangeTracer.java\n--- a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/http/HttpExchangeTracer.java\n+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/http/HttpExchangeTracer.java\n@@ -102,7 +102,7 @@ private Map<String, List<String>> getHeadersIfIncluded(Include include,\n \t\t\treturn new LinkedHashMap<>();\n \t\t}\n \t\tMap<String, List<String>> headers = headersSupplier.get();\n-\t\theaders.keySet().removeIf(s -> !headerPredicate.test(s));\n+\t\theaders.keySet().removeIf((header) -> !headerPredicate.test(header));\n \t\treturn headers;\n \t}\n ",
    "output": "Use Collection.removeIf() where possible"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/http/HttpExchangeTracer.java b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/http/HttpExchangeTracer.java\n--- a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/http/HttpExchangeTracer.java\n+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/http/HttpExchangeTracer.java\n@@ -18,7 +18,6 @@\n \n import java.net.URI;\n import java.security.Principal;\n-import java.util.Iterator;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n@@ -103,12 +102,7 @@ private Map<String, List<String>> getHeadersIfIncluded(Include include,\n \t\t\treturn new LinkedHashMap<>();\n \t\t}\n \t\tMap<String, List<String>> headers = headersSupplier.get();\n-\t\tIterator<String> keys = headers.keySet().iterator();\n-\t\twhile (keys.hasNext()) {\n-\t\t\tif (!headerPredicate.test(keys.next())) {\n-\t\t\t\tkeys.remove();\n-\t\t\t}\n-\t\t}\n+\t\theaders.keySet().removeIf(s -> !headerPredicate.test(s));\n \t\treturn headers;\n \t}\n ",
    "output": "Use Collection.removeIf() where possible"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/MetricsEndpointDocumentationTests.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/MetricsEndpointDocumentationTests.java\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/MetricsEndpointDocumentationTests.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/MetricsEndpointDocumentationTests.java\n@@ -54,7 +54,8 @@ public void metric() throws Exception {\n \t\t\t\t.andExpect(status().isOk())\n \t\t\t\t.andDo(document(\"metrics/metric\", responseFields(\n \t\t\t\t\t\tfieldWithPath(\"name\").description(\"Name of the metric\"),\n-\t\t\t\t\t\tfieldWithPath(\"description\").description(\"Description of the metric\"),\n+\t\t\t\t\t\tfieldWithPath(\"description\")\n+\t\t\t\t\t\t\t\t.description(\"Description of the metric\"),\n \t\t\t\t\t\tfieldWithPath(\"baseUnit\").description(\"Base unit of the metric\"),\n \t\t\t\t\t\tfieldWithPath(\"measurements\")\n \t\t\t\t\t\t\t\t.description(\"Measurements of the metric\"),",
    "output": "Add metric description and base unit to metrics endpoint"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java\n@@ -143,6 +143,7 @@ public class ConfigFileApplicationListener\n \t/**\n \t * Name of the application configuration {@link PropertySource}.\n \t */\n+\t@Deprecated\n \tpublic static final String APPLICATION_CONFIGURATION_PROPERTY_SOURCE_NAME = \"applicationConfigurationProperties\";\n \n \tprivate final DeferredLog logger = new DeferredLog();",
    "output": "Deprecate unused property"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SimpleMainTests.java b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SimpleMainTests.java\n--- a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SimpleMainTests.java\n+++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SimpleMainTests.java\n@@ -41,7 +41,7 @@ public class SimpleMainTests {\n \t@Rule\n \tpublic OutputCapture outputCapture = new OutputCapture();\n \n-\tprivate static final String SPRING_STARTUP = \"root of context hierarchy\";\n+\tprivate static final String SPRING_STARTUP = \"Started SpringApplication in\";\n \n \t@Test(expected = IllegalArgumentException.class)\n \tpublic void emptyApplicationContext() throws Exception {",
    "output": "Adapt assertion to logging change in Spring Framework"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/cassandra/CassandraDataAutoConfigurationIntegrationTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/cassandra/CassandraDataAutoConfigurationIntegrationTests.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/cassandra/CassandraDataAutoConfigurationIntegrationTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/cassandra/CassandraDataAutoConfigurationIntegrationTests.java\n@@ -50,7 +50,10 @@ public class CassandraDataAutoConfigurationIntegrationTests {\n \t@Before\n \tpublic void setUp() {\n \t\tthis.context = new AnnotationConfigApplicationContext();\n-\t\tTestPropertyValues.of(\"spring.data.cassandra.port=\" + cassandra.getMappedPort())\n+\t\tTestPropertyValues\n+\t\t\t\t.of(\"spring.data.cassandra.port=\" + cassandra.getMappedPort(),\n+\t\t\t\t\t\t\"spring.data.cassandra.read-timeout=24000\",\n+\t\t\t\t\t\t\"spring.data.cassandra.connect-timeout=10000\")\n \t\t\t\t.applyTo(this.context.getEnvironment());\n \t}\n ",
    "output": "Increase connect and read timeouts when testing against Cassandra"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-test-support/src/main/java/org/springframework/boot/testsupport/testcontainers/CassandraContainer.java b/spring-boot-project/spring-boot-tools/spring-boot-test-support/src/main/java/org/springframework/boot/testsupport/testcontainers/CassandraContainer.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-test-support/src/main/java/org/springframework/boot/testsupport/testcontainers/CassandraContainer.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-test-support/src/main/java/org/springframework/boot/testsupport/testcontainers/CassandraContainer.java\n@@ -40,8 +40,8 @@ public class CassandraContainer extends Container {\n \tpublic CassandraContainer() {\n \t\tsuper(\"cassandra:3.11.1\", PORT,\n \t\t\t\t(container) -> container.waitingFor(new WaitStrategy(container))\n-\t\t\t\t\t\t.withStartupAttempts(3)\n-\t\t\t\t\t\t.withStartupTimeout(Duration.ofSeconds(60)));\n+\t\t\t\t\t\t.withStartupAttempts(5)\n+\t\t\t\t\t\t.withStartupTimeout(Duration.ofSeconds(120)));\n \t}\n \n \tprivate static final class WaitStrategy extends HostPortWaitStrategy {",
    "output": "Improve reliability by give Cassandra more time and attempts to start"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/MessageSourceAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/MessageSourceAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/MessageSourceAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/context/MessageSourceAutoConfiguration.java\n@@ -64,8 +64,7 @@ public MessageSourceProperties messageSourceProperties() {\n \t}\n \n \t@Bean\n-\tpublic MessageSource messageSource() {\n-\t\tMessageSourceProperties properties = messageSourceProperties();\n+\tpublic MessageSource messageSource(MessageSourceProperties properties) {\n \t\tResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();\n \t\tif (StringUtils.hasText(properties.getBasename())) {\n \t\t\tmessageSource.setBasenames(StringUtils.commaDelimitedListToStringArray(",
    "output": "Avoid CGLIB requirement in MessageSourceAutoConfiguration"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n@@ -39,7 +39,7 @@\n public final class GradleCompatibilitySuite extends Suite {\n \n \tprivate static final List<String> GRADLE_VERSIONS = Arrays.asList(\"default\", \"4.1\",\n-\t\t\t\"4.2\", \"4.3\", \"4.4.1\", \"4.5.1\", \"4.6\", \"4.7\", \"4.8\", \"4.9\");\n+\t\t\t\"4.2\", \"4.3\", \"4.4.1\", \"4.5.1\", \"4.6\", \"4.7\", \"4.8.1\", \"4.9\");\n \n \tpublic GradleCompatibilitySuite(Class<?> clazz) throws InitializationError {\n \t\tsuper(clazz, createRunners(clazz));",
    "output": "Test the Gradle plugin against Gradle 4.8.1 instead of 4.8"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n@@ -39,7 +39,7 @@\n public final class GradleCompatibilitySuite extends Suite {\n \n \tprivate static final List<String> GRADLE_VERSIONS = Arrays.asList(\"default\", \"4.1\",\n-\t\t\t\"4.2\", \"4.3\", \"4.4.1\", \"4.5.1\", \"4.6\", \"4.7\", \"4.8\");\n+\t\t\t\"4.2\", \"4.3\", \"4.4.1\", \"4.5.1\", \"4.6\", \"4.7\", \"4.8\", \"4.9\");\n \n \tpublic GradleCompatibilitySuite(Class<?> clazz) throws InitializationError {\n \t\tsuper(clazz, createRunners(clazz));",
    "output": "Test the Gradle plugin against Gradle 4.9"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/security/reactive/ApplicationContextServerWebExchangeMatcher.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/security/reactive/ApplicationContextServerWebExchangeMatcher.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/security/reactive/ApplicationContextServerWebExchangeMatcher.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/security/reactive/ApplicationContextServerWebExchangeMatcher.java\n@@ -88,7 +88,7 @@ protected void initialized(Supplier<C> context) {\n \t@SuppressWarnings(\"unchecked\")\n \tprivate Supplier<C> createContext(ServerWebExchange exchange) {\n \t\tApplicationContext context = exchange.getApplicationContext();\n-\t\tAssert.state(context != null, \"No WebApplicationContext found.\");\n+\t\tAssert.state(context != null, \"No ApplicationContext found.\");\n \t\tif (this.contextClass.isInstance(context)) {\n \t\t\treturn () -> (C) context;\n \t\t}",
    "output": "Fix exception message"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/PropertiesMeterFilter.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/PropertiesMeterFilter.java\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/PropertiesMeterFilter.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/PropertiesMeterFilter.java\n@@ -74,6 +74,9 @@ private long[] convertSla(Meter.Type meterType, ServiceLevelAgreementBoundary[]\n \t}\n \n \tprivate <T> T lookup(Map<String, T> values, Id id, T defaultValue) {\n+\t\tif (values.isEmpty()) {\n+\t\t\treturn defaultValue;\n+\t\t}\n \t\tString name = id.getName();\n \t\twhile (StringUtils.hasLength(name)) {\n \t\t\tT result = values.get(name);",
    "output": "Add check for empty values for lookup"
  },
  {
    "input": "diff --git a/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/RestarterTests.java b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/RestarterTests.java\n--- a/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/RestarterTests.java\n+++ b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/RestarterTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2016 the original author or authors.\n+ * Copyright 2012-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -109,6 +109,7 @@ public void getOrAddAttributeWithNewAttribute() throws Exception {\n \t\tassertThat(attribute).isEqualTo(\"abc\");\n \t}\n \n+\t@Test\n \tpublic void addUrlsMustNotBeNull() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n \t\tthis.thrown.expectMessage(\"Urls must not be null\");",
    "output": "Add missing @Test in RestarterTests"
  },
  {
    "input": "diff --git a/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/RestarterTests.java b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/RestarterTests.java\n--- a/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/RestarterTests.java\n+++ b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/RestarterTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2016 the original author or authors.\n+ * Copyright 2012-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -109,6 +109,7 @@ public void getOrAddAttributeWithNewAttribute() throws Exception {\n \t\tassertThat(attribute).isEqualTo(\"abc\");\n \t}\n \n+\t@Test\n \tpublic void addUrlsMustNotBeNull() throws Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n \t\tthis.thrown.expectMessage(\"Urls must not be null\");",
    "output": "Add missing @Test in RestarterTests"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-session-webflux/src/test/java/sample/session/SampleSessionWebFluxApplicationTests.java b/spring-boot-samples/spring-boot-sample-session-webflux/src/test/java/sample/session/SampleSessionWebFluxApplicationTests.java\n--- a/spring-boot-samples/spring-boot-sample-session-webflux/src/test/java/sample/session/SampleSessionWebFluxApplicationTests.java\n+++ b/spring-boot-samples/spring-boot-sample-session-webflux/src/test/java/sample/session/SampleSessionWebFluxApplicationTests.java\n@@ -18,6 +18,7 @@\n \n import java.util.Base64;\n \n+import org.junit.Ignore;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n \n@@ -48,6 +49,7 @@ public class SampleSessionWebFluxApplicationTests {\n \tprivate WebClient.Builder webClientBuilder;\n \n \t@Test\n+\t@Ignore\n \tpublic void userDefinedMappingsSecureByDefault() throws Exception {\n \t\tWebClient webClient = this.webClientBuilder\n \t\t\t\t.baseUrl(\"http://localhost:\" + this.port + \"/\").build();",
    "output": "Ignore test affect by a regression in Spring Data Lovelace"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/CompositePropertySources.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/CompositePropertySources.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/CompositePropertySources.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/CompositePropertySources.java\n@@ -19,7 +19,6 @@\n import java.util.Arrays;\n import java.util.Iterator;\n import java.util.List;\n-import java.util.stream.Collectors;\n import java.util.stream.StreamSupport;\n \n import org.springframework.core.env.PropertySource;\n@@ -44,7 +43,7 @@ final class CompositePropertySources implements PropertySources {\n \tpublic Iterator<PropertySource<?>> iterator() {\n \t\treturn this.propertySources.stream()\n \t\t\t\t.flatMap((sources) -> StreamSupport.stream(sources.spliterator(), false))\n-\t\t\t\t.collect(Collectors.toList()).iterator();\n+\t\t\t\t.iterator();\n \t}\n \n \t@Override",
    "output": "Remove a List creation in CompositePropertySources.iterator()"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/CompositePropertySources.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/CompositePropertySources.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/CompositePropertySources.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/CompositePropertySources.java\n@@ -19,7 +19,6 @@\n import java.util.Arrays;\n import java.util.Iterator;\n import java.util.List;\n-import java.util.stream.Collectors;\n import java.util.stream.StreamSupport;\n \n import org.springframework.core.env.PropertySource;\n@@ -44,7 +43,7 @@ final class CompositePropertySources implements PropertySources {\n \tpublic Iterator<PropertySource<?>> iterator() {\n \t\treturn this.propertySources.stream()\n \t\t\t\t.flatMap((sources) -> StreamSupport.stream(sources.spliterator(), false))\n-\t\t\t\t.collect(Collectors.toList()).iterator();\n+\t\t\t\t.iterator();\n \t}\n \n \t@Override",
    "output": "Remove a List creation in CompositePropertySources.iterator()"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java\n@@ -299,12 +299,12 @@ private static class RequestMatcherFactory {\n \t\tList<RequestMatcher> antPath(String... parts) {\n \t\t\tList<RequestMatcher> matchers = new ArrayList<>();\n \t\t\tthis.servletPaths.stream().map((p) -> {\n-\t\t\t\tif (StringUtils.hasText(p)) {\n+\t\t\t\tif (StringUtils.hasText(p) && !p.equals(\"/\")) {\n \t\t\t\t\treturn p;\n \t\t\t\t}\n \t\t\t\treturn \"\";\n \t\t\t}).distinct().forEach((path) -> {\n-\t\t\t\tString pattern = (path.equals(\"/\") ? \"\" : path);\n+\t\t\t\tString pattern = path;\n \t\t\t\tfor (String part : parts) {\n \t\t\t\t\tpattern += part;\n \t\t\t\t}",
    "output": "Prevent duplicate RequestMatcher in RequestMatcherFactory.antPath()"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java\n@@ -299,12 +299,12 @@ private static class RequestMatcherFactory {\n \t\tList<RequestMatcher> antPath(String... parts) {\n \t\t\tList<RequestMatcher> matchers = new ArrayList<>();\n \t\t\tthis.servletPaths.stream().map((p) -> {\n-\t\t\t\tif (StringUtils.hasText(p)) {\n+\t\t\t\tif (StringUtils.hasText(p) && !p.equals(\"/\")) {\n \t\t\t\t\treturn p;\n \t\t\t\t}\n \t\t\t\treturn \"\";\n \t\t\t}).distinct().forEach((path) -> {\n-\t\t\t\tString pattern = (path.equals(\"/\") ? \"\" : path);\n+\t\t\t\tString pattern = path;\n \t\t\t\tfor (String part : parts) {\n \t\t\t\t\tpattern += part;\n \t\t\t\t}",
    "output": "Prevent duplicate RequestMatcher in RequestMatcherFactory.antPath()"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletRegistrationBean.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletRegistrationBean.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletRegistrationBean.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletRegistrationBean.java\n@@ -112,7 +112,6 @@ public void setServlet(T servlet) {\n \t/**\n \t * Return the servlet being registered.\n \t * @return the servlet\n-\t * @since 2.0.4\n \t */\n \tpublic T getServlet() {\n \t\treturn this.servlet;",
    "output": "Remove @since tag from getServlet()"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletRegistrationBean.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletRegistrationBean.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletRegistrationBean.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletRegistrationBean.java\n@@ -112,7 +112,6 @@ public void setServlet(T servlet) {\n \t/**\n \t * Return the servlet being registered.\n \t * @return the servlet\n-\t * @since 2.0.4\n \t */\n \tpublic T getServlet() {\n \t\treturn this.servlet;",
    "output": "Remove @since tag from getServlet()"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnBeanTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnBeanTests.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnBeanTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnBeanTests.java\n@@ -139,12 +139,14 @@ private void hasBarBean(AssertableApplicationContext context) {\n \n \t@Test\n \tpublic void conditionEvaluationConsidersChangeInTypeWhenBeanIsOverridden() {\n-\t\tthis.context.register(OriginalDefinition.class, OverridingDefinition.class,\n-\t\t\t\tConsumingConfiguration.class);\n-\t\tthis.context.refresh();\n-\t\tassertThat(this.context.containsBean(\"testBean\")).isTrue();\n-\t\tassertThat(this.context.getBean(Integer.class)).isEqualTo(1);\n-\t\tassertThat(this.context.getBeansOfType(ConsumingConfiguration.class)).isEmpty();\n+\t\tthis.contextRunner\n+\t\t\t\t.withUserConfiguration(OriginalDefinition.class,\n+\t\t\t\t\t\tOverridingDefinition.class, ConsumingConfiguration.class)\n+\t\t\t\t.run((context) -> {\n+\t\t\t\t\tassertThat(context).hasBean(\"testBean\");\n+\t\t\t\t\tassertThat(context).hasSingleBean(Integer.class);\n+\t\t\t\t\tassertThat(context).doesNotHaveBean(ConsumingConfiguration.class);\n+\t\t\t\t});\n \t}\n \n \t@Configuration",
    "output": "Polish test following forward merge"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/LocalDevToolsAutoConfigurationTests.java b/spring-boot-project/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/LocalDevToolsAutoConfigurationTests.java\n--- a/spring-boot-project/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/LocalDevToolsAutoConfigurationTests.java\n+++ b/spring-boot-project/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/LocalDevToolsAutoConfigurationTests.java\n@@ -33,6 +33,7 @@\n \n import org.springframework.beans.factory.NoSuchBeanDefinitionException;\n import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.ImportAutoConfiguration;\n import org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration;\n import org.springframework.boot.autoconfigure.web.ResourceProperties;\n import org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration;\n@@ -281,7 +282,7 @@ public static class Config {\n \t}\n \n \t@Configuration\n-\t@Import({ ServletWebServerFactoryAutoConfiguration.class,\n+\t@ImportAutoConfiguration({ ServletWebServerFactoryAutoConfiguration.class,\n \t\t\tLocalDevToolsAutoConfiguration.class, ThymeleafAutoConfiguration.class })\n \tpublic static class ConfigWithMockLiveReload {\n ",
    "output": "Polish DevTools auto-configuration tests to avoid bean overrides"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchAutoConfigurationTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchAutoConfigurationTests.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchAutoConfigurationTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchAutoConfigurationTests.java\n@@ -22,6 +22,7 @@\n import org.elasticsearch.client.transport.TransportClient;\n import org.elasticsearch.cluster.node.DiscoveryNode;\n import org.junit.After;\n+import org.junit.Ignore;\n import org.junit.Test;\n \n import org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration;\n@@ -63,6 +64,7 @@ public void useExistingClient() {\n \t}\n \n \t@Test\n+\t@Ignore(\"DATAES-470\")\n \tpublic void createTransportClient() {\n \t\tthis.context = new AnnotationConfigApplicationContext();\n \t\tnew ElasticsearchNodeTemplate().doWithNode((node) -> {",
    "output": "Ignore Data Elasticsearch test that fails due to DATAES-470"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/SslServerCustomizer.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/SslServerCustomizer.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/SslServerCustomizer.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/SslServerCustomizer.java\n@@ -26,6 +26,7 @@\n import io.netty.handler.ssl.ClientAuth;\n import io.netty.handler.ssl.SslContextBuilder;\n import reactor.netty.http.server.HttpServer;\n+import reactor.netty.tcp.SslProvider.DefaultConfigurationType;\n \n import org.springframework.boot.web.server.Ssl;\n import org.springframework.boot.web.server.SslStoreProvider;\n@@ -52,7 +53,8 @@ public SslServerCustomizer(Ssl ssl, SslStoreProvider sslStoreProvider) {\n \tpublic HttpServer apply(HttpServer server) {\n \t\ttry {\n \t\t\treturn server\n-\t\t\t\t\t.secure((contextSpec) -> contextSpec.sslContext(getContextBuilder()));\n+\t\t\t\t\t.secure((contextSpec) -> contextSpec.sslContext(getContextBuilder())\n+\t\t\t\t\t\t\t.defaultConfiguration(DefaultConfigurationType.NONE));\n \t\t}\n \t\tcatch (Exception ex) {\n \t\t\tthrow new IllegalStateException(ex);",
    "output": "Fix API adaptation changes for Reactor Netty"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/SslServerCustomizer.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/SslServerCustomizer.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/SslServerCustomizer.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/SslServerCustomizer.java\n@@ -26,6 +26,7 @@\n import io.netty.handler.ssl.ClientAuth;\n import io.netty.handler.ssl.SslContextBuilder;\n import reactor.netty.http.server.HttpServer;\n+import reactor.netty.tcp.SslProvider.DefaultConfigurationType;\n \n import org.springframework.boot.web.server.Ssl;\n import org.springframework.boot.web.server.SslStoreProvider;\n@@ -52,7 +53,8 @@ public SslServerCustomizer(Ssl ssl, SslStoreProvider sslStoreProvider) {\n \tpublic HttpServer apply(HttpServer server) {\n \t\ttry {\n \t\t\treturn server\n-\t\t\t\t\t.secure((contextSpec) -> contextSpec.sslContext(getContextBuilder()));\n+\t\t\t\t\t.secure((contextSpec) -> contextSpec.sslContext(getContextBuilder())\n+\t\t\t\t\t\t\t.defaultConfiguration(DefaultConfigurationType.NONE));\n \t\t}\n \t\tcatch (Exception ex) {\n \t\t\tthrow new IllegalStateException(ex);",
    "output": "Fix API adaptation changes for Reactor Netty"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/elasticsearch/jest/JestAutoConfigurationTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/elasticsearch/jest/JestAutoConfigurationTests.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/elasticsearch/jest/JestAutoConfigurationTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/elasticsearch/jest/JestAutoConfigurationTests.java\n@@ -147,6 +147,14 @@ public void jestCanCommunicateWithElasticsearchInstance() {\n \t}\n \n \tprivate JestResult execute(JestClient client, Action<? extends JestResult> action) {\n+\t\tfor (int i = 0; i < 2; i++) {\n+\t\t\ttry {\n+\t\t\t\treturn client.execute(action);\n+\t\t\t}\n+\t\t\tcatch (IOException ex) {\n+\t\t\t\t// Continue\n+\t\t\t}\n+\t\t}\n \t\ttry {\n \t\t\treturn client.execute(action);\n \t\t}",
    "output": "Try to make Jest auto-configuration tests more robust"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-jooq/src/main/java/sample/jooq/util/TangleFreeGeneratorStrategy.java b/spring-boot-samples/spring-boot-sample-jooq/src/main/java/sample/jooq/util/TangleFreeGeneratorStrategy.java\n--- a/spring-boot-samples/spring-boot-sample-jooq/src/main/java/sample/jooq/util/TangleFreeGeneratorStrategy.java\n+++ b/spring-boot-samples/spring-boot-sample-jooq/src/main/java/sample/jooq/util/TangleFreeGeneratorStrategy.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2016 the original author or authors.\n+ * Copyright 2012-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -16,8 +16,8 @@\n \n package sample.jooq.util;\n \n-import org.jooq.util.DefaultGeneratorStrategy;\n-import org.jooq.util.Definition;\n+import org.jooq.codegen.DefaultGeneratorStrategy;\n+import org.jooq.meta.Definition;\n \n /**\n  * Custom {@link DefaultGeneratorStrategy} that doesn't produce tangled packages. Too",
    "output": "Upgrade to Jooq 3.11.2"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/solr/SolrAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/solr/SolrAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/solr/SolrAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/solr/SolrAutoConfiguration.java\n@@ -16,6 +16,9 @@\n \n package org.springframework.boot.autoconfigure.solr;\n \n+import java.util.Arrays;\n+import java.util.Optional;\n+\n import org.apache.solr.client.solrj.SolrClient;\n import org.apache.solr.client.solrj.impl.CloudSolrClient;\n import org.apache.solr.client.solrj.impl.HttpSolrClient;\n@@ -56,8 +59,8 @@ public SolrClient solrClient() {\n \n \tprivate SolrClient createSolrClient() {\n \t\tif (StringUtils.hasText(this.properties.getZkHost())) {\n-\t\t\treturn new CloudSolrClient.Builder().withZkHost(this.properties.getZkHost())\n-\t\t\t\t\t.build();\n+\t\t\treturn new CloudSolrClient.Builder(Arrays.asList(this.properties.getZkHost()),\n+\t\t\t\t\tOptional.empty()).build();\n \t\t}\n \t\treturn new HttpSolrClient.Builder(this.properties.getHost()).build();\n \t}",
    "output": "Upgrade to Solr 7.4.0"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/artemis/ArtemisEmbeddedConfigurationFactory.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/artemis/ArtemisEmbeddedConfigurationFactory.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/artemis/ArtemisEmbeddedConfigurationFactory.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/artemis/ArtemisEmbeddedConfigurationFactory.java\n@@ -83,7 +83,7 @@ private CoreAddressConfiguration createAddressConfiguration(String name) {\n \t\treturn new CoreAddressConfiguration().setName(name)\n \t\t\t\t.addRoutingType(RoutingType.ANYCAST)\n \t\t\t\t.addQueueConfiguration(new CoreQueueConfiguration().setName(name)\n-\t\t\t\t\t\t.setRoutingType(RoutingType.ANYCAST));\n+\t\t\t\t\t\t.setRoutingType(RoutingType.ANYCAST).setAddress(name));\n \t}\n \n \tprivate String getDataDir() {",
    "output": "Upgrade to Artemis 2.6.2"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-test/src/test/java/org/springframework/boot/test/web/client/RootUriRequestExpectationManagerTests.java b/spring-boot-project/spring-boot-test/src/test/java/org/springframework/boot/test/web/client/RootUriRequestExpectationManagerTests.java\n--- a/spring-boot-project/spring-boot-test/src/test/java/org/springframework/boot/test/web/client/RootUriRequestExpectationManagerTests.java\n+++ b/spring-boot-project/spring-boot-test/src/test/java/org/springframework/boot/test/web/client/RootUriRequestExpectationManagerTests.java\n@@ -86,7 +86,7 @@ public void createWhenExpectationManagerIsNullShouldThrowException() {\n \n \t@Test\n \tpublic void expectRequestShouldDelegateToExpectationManager() {\n-\t\tExpectedCount count = mock(ExpectedCount.class);\n+\t\tExpectedCount count = ExpectedCount.once();\n \t\tRequestMatcher requestMatcher = mock(RequestMatcher.class);\n \t\tthis.manager.expectRequest(count, requestMatcher);\n \t\tverify(this.delegate).expectRequest(count, requestMatcher);",
    "output": "Stop mocking class that is final in latest Framework 5.1 snapshots"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/JspTemplateAvailabilityProvider.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/JspTemplateAvailabilityProvider.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/JspTemplateAvailabilityProvider.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/JspTemplateAvailabilityProvider.java\n@@ -38,7 +38,8 @@ public boolean isTemplateAvailable(String view, Environment environment,\n \t\t\tClassLoader classLoader, ResourceLoader resourceLoader) {\n \t\tif (ClassUtils.isPresent(\"org.apache.jasper.compiler.JspConfig\", classLoader)) {\n \t\t\tString resourceName = getResourceName(view, environment);\n-\t\t\treturn resourceLoader.getResource(resourceName).exists();\n+\t\t\treturn resourceLoader.getResource(resourceName).exists() ||\n+\t\t\t\t\tresourceLoader.getResource(\"file:./src/main/webapp\" + resourceName).exists();\n \t\t}\n \t\treturn false;\n \t}",
    "output": "Fix JSP availability check when not running as a packaged war"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/error/DefaultErrorViewResolver.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/error/DefaultErrorViewResolver.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/error/DefaultErrorViewResolver.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/error/DefaultErrorViewResolver.java\n@@ -102,7 +102,7 @@ public DefaultErrorViewResolver(ApplicationContext applicationContext,\n \t@Override\n \tpublic ModelAndView resolveErrorView(HttpServletRequest request, HttpStatus status,\n \t\t\tMap<String, Object> model) {\n-\t\tModelAndView modelAndView = resolve(String.valueOf(status), model);\n+\t\tModelAndView modelAndView = resolve(String.valueOf(status.value()), model);\n \t\tif (modelAndView == null && SERIES_VIEWS.containsKey(status.series())) {\n \t\t\tmodelAndView = resolve(SERIES_VIEWS.get(status.series()), model);\n \t\t}",
    "output": "Fix DefaultErrorViewResolver after HttpStatus changes\nSince SPR-16898, `HttpStatus.toString()` has changed and we should\ninstead rely on `HttpStatus.value()` to get the HTTP status number."
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/BackgroundPreinitializer.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/BackgroundPreinitializer.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/BackgroundPreinitializer.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/BackgroundPreinitializer.java\n@@ -16,7 +16,6 @@\n \n package org.springframework.boot.autoconfigure;\n \n-import java.nio.charset.Charset;\n import java.nio.charset.StandardCharsets;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.atomic.AtomicBoolean;\n@@ -173,7 +172,6 @@ private static class CharsetInitializer implements Runnable {\n \t\t@Override\n \t\tpublic void run() {\n \t\t\tStandardCharsets.UTF_8.name();\n-\t\t\tCharset.availableCharsets();\n \t\t}\n \n \t}",
    "output": "Stop calling Charset.availableCharsets() early\nThis is no longer required as Spring Framework has been updated to\ninvoke this method lazily as well."
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/RedisCacheConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/RedisCacheConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/RedisCacheConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/RedisCacheConfiguration.java\n@@ -23,6 +23,7 @@\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.cache.CacheProperties.Redis;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration;\n import org.springframework.cache.CacheManager;\n@@ -45,6 +46,7 @@\n  * @since 1.3.0\n  */\n @Configuration\n+@ConditionalOnClass(RedisConnectionFactory.class)\n @AutoConfigureAfter(RedisAutoConfiguration.class)\n @ConditionalOnBean(RedisConnectionFactory.class)\n @ConditionalOnMissingBean(CacheManager.class)",
    "output": "Add missing `@ConditionalOnClass` check on RedisCacheConfiguration"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/client/WebClientExchangeTags.java b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/client/WebClientExchangeTags.java\n--- a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/client/WebClientExchangeTags.java\n+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/client/WebClientExchangeTags.java\n@@ -45,6 +45,8 @@ public final class WebClientExchangeTags {\n \tprivate static final Pattern PATTERN_BEFORE_PATH = Pattern\n \t\t\t.compile(\"^https?://[^/]+/\");\n \n+\tprivate static final Tag CLIENT_NAME_NONE = Tag.of(\"clientName\", \"none\");\n+\n \tprivate WebClientExchangeTags() {\n \t}\n \n@@ -104,7 +106,7 @@ public static Tag status(Throwable throwable) {\n \tpublic static Tag clientName(ClientRequest request) {\n \t\tString host = request.url().getHost();\n \t\tif (host == null) {\n-\t\t\thost = \"none\";\n+\t\t\treturn CLIENT_NAME_NONE;\n \t\t}\n \t\treturn Tag.of(\"clientName\", host);\n \t}",
    "output": "Add CLIENT_NAME_NONE to WebClientExchangeTags"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/client/WebClientExchangeTags.java b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/client/WebClientExchangeTags.java\n--- a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/client/WebClientExchangeTags.java\n+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/client/WebClientExchangeTags.java\n@@ -45,6 +45,8 @@ public final class WebClientExchangeTags {\n \tprivate static final Pattern PATTERN_BEFORE_PATH = Pattern\n \t\t\t.compile(\"^https?://[^/]+/\");\n \n+\tprivate static final Tag CLIENT_NAME_NONE = Tag.of(\"clientName\", \"none\");\n+\n \tprivate WebClientExchangeTags() {\n \t}\n \n@@ -104,7 +106,7 @@ public static Tag status(Throwable throwable) {\n \tpublic static Tag clientName(ClientRequest request) {\n \t\tString host = request.url().getHost();\n \t\tif (host == null) {\n-\t\t\thost = \"none\";\n+\t\t\treturn CLIENT_NAME_NONE;\n \t\t}\n \t\treturn Tag.of(\"clientName\", host);\n \t}",
    "output": "Add CLIENT_NAME_NONE to WebClientExchangeTags"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/client/WebClientExchangeTags.java b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/client/WebClientExchangeTags.java\n--- a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/client/WebClientExchangeTags.java\n+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/client/WebClientExchangeTags.java\n@@ -17,6 +17,7 @@\n package org.springframework.boot.actuate.metrics.web.reactive.client;\n \n import java.io.IOException;\n+import java.util.regex.Pattern;\n \n import io.micrometer.core.instrument.Tag;\n \n@@ -41,6 +42,9 @@ public final class WebClientExchangeTags {\n \n \tprivate static final Tag CLIENT_ERROR = Tag.of(\"status\", \"CLIENT_ERROR\");\n \n+\tprivate static final Pattern PATTERN_BEFORE_PATH = Pattern\n+\t\t\t.compile(\"^https?://[^/]+/\");\n+\n \tprivate WebClientExchangeTags() {\n \t}\n \n@@ -66,7 +70,7 @@ public static Tag uri(ClientRequest request) {\n \t}\n \n \tprivate static String extractPath(String url) {\n-\t\tString path = url.replaceFirst(\"^https?://[^/]+/\", \"\");\n+\t\tString path = PATTERN_BEFORE_PATH.matcher(url).replaceFirst(\"\");\n \t\treturn (path.startsWith(\"/\") ? path : \"/\" + path);\n \t}\n ",
    "output": "Use a precompiled pattern in WebClientExchangeTags.extractPath()"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/client/WebClientExchangeTags.java b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/client/WebClientExchangeTags.java\n--- a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/client/WebClientExchangeTags.java\n+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/client/WebClientExchangeTags.java\n@@ -17,6 +17,7 @@\n package org.springframework.boot.actuate.metrics.web.reactive.client;\n \n import java.io.IOException;\n+import java.util.regex.Pattern;\n \n import io.micrometer.core.instrument.Tag;\n \n@@ -41,6 +42,9 @@ public final class WebClientExchangeTags {\n \n \tprivate static final Tag CLIENT_ERROR = Tag.of(\"status\", \"CLIENT_ERROR\");\n \n+\tprivate static final Pattern PATTERN_BEFORE_PATH = Pattern\n+\t\t\t.compile(\"^https?://[^/]+/\");\n+\n \tprivate WebClientExchangeTags() {\n \t}\n \n@@ -66,7 +70,7 @@ public static Tag uri(ClientRequest request) {\n \t}\n \n \tprivate static String extractPath(String url) {\n-\t\tString path = url.replaceFirst(\"^https?://[^/]+/\", \"\");\n+\t\tString path = PATTERN_BEFORE_PATH.matcher(url).replaceFirst(\"\");\n \t\treturn (path.startsWith(\"/\") ? path : \"/\" + path);\n \t}\n ",
    "output": "Use a precompiled pattern in WebClientExchangeTags.extractPath()"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n@@ -39,7 +39,7 @@\n public final class GradleCompatibilitySuite extends Suite {\n \n \tprivate static final List<String> GRADLE_VERSIONS = Arrays.asList(\"default\", \"4.1\",\n-\t\t\t\"4.2\", \"4.3\", \"4.4.1\", \"4.5.1\", \"4.6\", \"4.7\");\n+\t\t\t\"4.2\", \"4.3\", \"4.4.1\", \"4.5.1\", \"4.6\", \"4.7\", \"4.8\");\n \n \tpublic GradleCompatibilitySuite(Class<?> clazz) throws InitializationError {\n \t\tsuper(clazz, createRunners(clazz));",
    "output": "Test the Gradle plugin against Gradle 4.8"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringBootExceptionHandlerTests.java b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringBootExceptionHandlerTests.java\n--- a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringBootExceptionHandlerTests.java\n+++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringBootExceptionHandlerTests.java\n@@ -21,7 +21,6 @@\n \n import org.junit.Test;\n \n-import static org.mockito.Matchers.same;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.verifyZeroInteractions;\n@@ -55,7 +54,7 @@ public void uncaughtExceptionForwardsLogConfigurationErrorToParent() {\n \t\t\t\t\"[stuff] Logback configuration error detected [stuff]\");\n \t\tthis.handler.registerLoggedException(ex);\n \t\tthis.handler.uncaughtException(thread, ex);\n-\t\tverify(this.parent).uncaughtException(same(thread), same(ex));\n+\t\tverify(this.parent).uncaughtException(thread, ex);\n \t}\n \n \t@Test\n@@ -65,7 +64,7 @@ public void uncaughtExceptionForwardsWrappedLogConfigurationErrorToParent() {\n \t\t\t\t\"[stuff] Logback configuration error detected [stuff]\", new Exception()));\n \t\tthis.handler.registerLoggedException(ex);\n \t\tthis.handler.uncaughtException(thread, ex);\n-\t\tverify(this.parent).uncaughtException(same(thread), same(ex));\n+\t\tverify(this.parent).uncaughtException(thread, ex);\n \t}\n \n }",
    "output": "Remove usage of deprecated Matchers class"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringBootExceptionHandlerTests.java b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringBootExceptionHandlerTests.java\n--- a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringBootExceptionHandlerTests.java\n+++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/SpringBootExceptionHandlerTests.java\n@@ -21,7 +21,6 @@\n \n import org.junit.Test;\n \n-import static org.mockito.Matchers.same;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.verifyZeroInteractions;\n@@ -55,7 +54,7 @@ public void uncaughtExceptionForwardsLogConfigurationErrorToParent() {\n \t\t\t\t\"[stuff] Logback configuration error detected [stuff]\");\n \t\tthis.handler.registerLoggedException(ex);\n \t\tthis.handler.uncaughtException(thread, ex);\n-\t\tverify(this.parent).uncaughtException(same(thread), same(ex));\n+\t\tverify(this.parent).uncaughtException(thread, ex);\n \t}\n \n \t@Test\n@@ -65,7 +64,7 @@ public void uncaughtExceptionForwardsWrappedLogConfigurationErrorToParent() {\n \t\t\t\t\"[stuff] Logback configuration error detected [stuff]\", new Exception()));\n \t\tthis.handler.registerLoggedException(ex);\n \t\tthis.handler.uncaughtException(thread, ex);\n-\t\tverify(this.parent).uncaughtException(same(thread), same(ex));\n+\t\tverify(this.parent).uncaughtException(thread, ex);\n \t}\n \n }",
    "output": "Remove usage of deprecated Matchers class"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mail/MailProperties.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mail/MailProperties.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mail/MailProperties.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mail/MailProperties.java\n@@ -76,11 +76,6 @@ public class MailProperties {\n \t */\n \tprivate String jndiName;\n \n-\t/**\n-\t * Whether to test that the mail server is available on startup.\n-\t */\n-\tprivate boolean testConnection;\n-\n \tpublic String getHost() {\n \t\treturn this.host;\n \t}\n@@ -141,12 +136,4 @@ public String getJndiName() {\n \t\treturn this.jndiName;\n \t}\n \n-\tpublic boolean isTestConnection() {\n-\t\treturn this.testConnection;\n-\t}\n-\n-\tpublic void setTestConnection(boolean testConnection) {\n-\t\tthis.testConnection = testConnection;\n-\t}\n-\n }",
    "output": "Move unused property in code to metadata"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/client/RestTemplateBuilder.java\n@@ -72,8 +72,6 @@ public class RestTemplateBuilder {\n \t\t\t\t\"org.springframework.http.client.HttpComponentsClientHttpRequestFactory\");\n \t\tcandidates.put(\"okhttp3.OkHttpClient\",\n \t\t\t\t\"org.springframework.http.client.OkHttp3ClientHttpRequestFactory\");\n-\t\tcandidates.put(\"com.squareup.okhttp.OkHttpClient\",\n-\t\t\t\t\"org.springframework.http.client.OkHttpClientHttpRequestFactory\");\n \t\tREQUEST_FACTORY_CANDIDATES = Collections.unmodifiableMap(candidates);\n \t}\n ",
    "output": "Align RestTemplateBuilder with Framework's removal of OkHttp 2 support"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarURLConnectionTests.java b/spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarURLConnectionTests.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarURLConnectionTests.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarURLConnectionTests.java\n@@ -24,6 +24,7 @@\n import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n import org.junit.rules.TemporaryFolder;\n \n import org.springframework.boot.loader.TestJarCreator;\n@@ -43,6 +44,9 @@ public class JarURLConnectionTests {\n \t@Rule\n \tpublic TemporaryFolder temporaryFolder = new TemporaryFolder(new File(\"target\"));\n \n+\t@Rule\n+\tpublic ExpectedException thrown = ExpectedException.none();\n+\n \tprivate File rootJarFile;\n \n \tprivate JarFile jarFile;",
    "output": "Add missing ExpectedException rule\nAdd ExpectedException rule which was missed from the 1.5.x merge."
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/QuartzAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/QuartzAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/QuartzAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/QuartzAutoConfiguration.java\n@@ -145,7 +145,7 @@ public SchedulerFactoryBeanCustomizer dataSourceCustomizer(\n \t\t}\n \n \t\tprivate DataSource getDataSource(DataSource dataSource,\n-\t\t\t\t@QuartzDataSource ObjectProvider<DataSource> quartzDataSource) {\n+\t\t\t\tObjectProvider<DataSource> quartzDataSource) {\n \t\t\tDataSource dataSourceIfAvailable = quartzDataSource.getIfAvailable();\n \t\t\treturn (dataSourceIfAvailable != null ? dataSourceIfAvailable : dataSource);\n \t\t}",
    "output": "Remove an unnecessary @QuartzDataSource"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/QuartzAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/QuartzAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/QuartzAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/quartz/QuartzAutoConfiguration.java\n@@ -145,7 +145,7 @@ public SchedulerFactoryBeanCustomizer dataSourceCustomizer(\n \t\t}\n \n \t\tprivate DataSource getDataSource(DataSource dataSource,\n-\t\t\t\t@QuartzDataSource ObjectProvider<DataSource> quartzDataSource) {\n+\t\t\t\tObjectProvider<DataSource> quartzDataSource) {\n \t\t\tDataSource dataSourceIfAvailable = quartzDataSource.getIfAvailable();\n \t\t\treturn (dataSourceIfAvailable != null ? dataSourceIfAvailable : dataSource);\n \t\t}",
    "output": "Remove an unnecessary @QuartzDataSource"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/web/reactive/server/WebTestClientContextCustomizer.java b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/web/reactive/server/WebTestClientContextCustomizer.java\n--- a/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/web/reactive/server/WebTestClientContextCustomizer.java\n+++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/web/reactive/server/WebTestClientContextCustomizer.java\n@@ -65,7 +65,7 @@ public void customizeContext(ConfigurableApplicationContext context,\n \tprivate void registerWebTestClient(ConfigurableApplicationContext context) {\n \t\tConfigurableListableBeanFactory beanFactory = context.getBeanFactory();\n \t\tif (beanFactory instanceof BeanDefinitionRegistry) {\n-\t\t\tregisterWebTestClient((BeanDefinitionRegistry) context);\n+\t\t\tregisterWebTestClient((BeanDefinitionRegistry) beanFactory);\n \t\t}\n \t}\n ",
    "output": "Fix wrong reference in cast operation"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/web/reactive/server/WebTestClientContextCustomizer.java b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/web/reactive/server/WebTestClientContextCustomizer.java\n--- a/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/web/reactive/server/WebTestClientContextCustomizer.java\n+++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/web/reactive/server/WebTestClientContextCustomizer.java\n@@ -65,7 +65,7 @@ public void customizeContext(ConfigurableApplicationContext context,\n \tprivate void registerWebTestClient(ConfigurableApplicationContext context) {\n \t\tConfigurableListableBeanFactory beanFactory = context.getBeanFactory();\n \t\tif (beanFactory instanceof BeanDefinitionRegistry) {\n-\t\t\tregisterWebTestClient((BeanDefinitionRegistry) context);\n+\t\t\tregisterWebTestClient((BeanDefinitionRegistry) beanFactory);\n \t\t}\n \t}\n ",
    "output": "Fix wrong reference in cast operation"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfigurationTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfigurationTests.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfigurationTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfigurationTests.java\n@@ -208,7 +208,7 @@ public void integrationJdbcDataSourceInitializerEnabledByDefaultWithEmbeddedDb()\n \t\t\t\t\tassertThat(properties.getJdbc().getInitializeSchema())\n \t\t\t\t\t\t\t.isEqualTo(DataSourceInitializationMode.EMBEDDED);\n \t\t\t\t\tJdbcOperations jdbc = context.getBean(JdbcOperations.class);\n-\t\t\t\t\tjdbc.queryForList(\"select * from INT_MESSAGE\").isEmpty();\n+\t\t\t\t\tassertThat(jdbc.queryForList(\"select * from INT_MESSAGE\")).isEmpty();\n \t\t\t\t});\n \t}\n ",
    "output": "Add assertion in IntegrationAutoConfigurationTests"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfigurationTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfigurationTests.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfigurationTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/integration/IntegrationAutoConfigurationTests.java\n@@ -208,7 +208,7 @@ public void integrationJdbcDataSourceInitializerEnabledByDefaultWithEmbeddedDb()\n \t\t\t\t\tassertThat(properties.getJdbc().getInitializeSchema())\n \t\t\t\t\t\t\t.isEqualTo(DataSourceInitializationMode.EMBEDDED);\n \t\t\t\t\tJdbcOperations jdbc = context.getBean(JdbcOperations.class);\n-\t\t\t\t\tjdbc.queryForList(\"select * from INT_MESSAGE\").isEmpty();\n+\t\t\t\t\tassertThat(jdbc.queryForList(\"select * from INT_MESSAGE\")).isEmpty();\n \t\t\t\t});\n \t}\n ",
    "output": "Add assertion in IntegrationAutoConfigurationTests"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfiguration.java\n@@ -237,9 +237,8 @@ public ResourceConfigCustomizer resourceConfigCustomizer(\n \t\t\t\tfinal ObjectMapper objectMapper) {\n \t\t\taddJaxbAnnotationIntrospectorIfPresent(objectMapper);\n \t\t\treturn (ResourceConfig config) -> {\n-\t\t\t\tJerseyAutoConfiguration.this.config.register(JacksonFeature.class);\n-\t\t\t\tJerseyAutoConfiguration.this.config.register(\n-\t\t\t\t\t\tnew ObjectMapperContextResolver(objectMapper),\n+\t\t\t\tconfig.register(JacksonFeature.class);\n+\t\t\t\tconfig.register(new ObjectMapperContextResolver(objectMapper),\n \t\t\t\t\t\tContextResolver.class);\n \t\t\t};\n \t\t}",
    "output": "Fix merge error"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/builder/SpringApplicationBuilder.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/builder/SpringApplicationBuilder.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/builder/SpringApplicationBuilder.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/builder/SpringApplicationBuilder.java\n@@ -189,7 +189,7 @@ public SpringApplicationBuilder child(Class<?>... sources) {\n \t\t// It's not possible if embedded web server are enabled to support web contexts as\n \t\t// parents because the servlets cannot be initialized at the right point in\n \t\t// lifecycle.\n-\t\tweb(false);\n+\t\tweb(WebApplicationType.NONE);\n \n \t\t// Probably not interested in multiple banners\n \t\tbannerMode(Banner.Mode.OFF);\n@@ -208,8 +208,9 @@ public SpringApplicationBuilder child(Class<?>... sources) {\n \t */\n \tpublic SpringApplicationBuilder parent(Class<?>... sources) {\n \t\tif (this.parent == null) {\n-\t\t\tthis.parent = new SpringApplicationBuilder(sources).web(false)\n-\t\t\t\t\t.properties(this.defaultProperties).environment(this.environment);\n+\t\t\tthis.parent = new SpringApplicationBuilder(sources)\n+\t\t\t\t\t.web(WebApplicationType.NONE).properties(this.defaultProperties)\n+\t\t\t\t\t.environment(this.environment);\n \t\t}\n \t\telse {\n \t\t\tthis.parent.sources(sources);",
    "output": "Remove use of deprecated `web` methods"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ErrorProperties.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ErrorProperties.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ErrorProperties.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ErrorProperties.java\n@@ -44,7 +44,7 @@ public class ErrorProperties {\n \t */\n \tprivate IncludeStacktrace includeStacktrace = IncludeStacktrace.NEVER;\n \n-\tprivate Whitelabel whitelabel = new Whitelabel();\n+\tprivate final Whitelabel whitelabel = new Whitelabel();\n \n \tpublic String getPath() {\n \t\treturn this.path;\n@@ -74,10 +74,6 @@ public Whitelabel getWhitelabel() {\n \t\treturn this.whitelabel;\n \t}\n \n-\tpublic void setWhitelabel(Whitelabel whitelabel) {\n-\t\tthis.whitelabel = whitelabel;\n-\t}\n-\n \t/**\n \t * Include Stacktrace attribute options.\n \t */",
    "output": "Make ErrorProperties.whitelabel final"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ErrorProperties.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ErrorProperties.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ErrorProperties.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ErrorProperties.java\n@@ -44,7 +44,7 @@ public class ErrorProperties {\n \t */\n \tprivate IncludeStacktrace includeStacktrace = IncludeStacktrace.NEVER;\n \n-\tprivate Whitelabel whitelabel = new Whitelabel();\n+\tprivate final Whitelabel whitelabel = new Whitelabel();\n \n \tpublic String getPath() {\n \t\treturn this.path;\n@@ -74,10 +74,6 @@ public Whitelabel getWhitelabel() {\n \t\treturn this.whitelabel;\n \t}\n \n-\tpublic void setWhitelabel(Whitelabel whitelabel) {\n-\t\tthis.whitelabel = whitelabel;\n-\t}\n-\n \t/**\n \t * Include Stacktrace attribute options.\n \t */",
    "output": "Make ErrorProperties.whitelabel final"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/rest/RestClientAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/rest/RestClientAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/rest/RestClientAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/rest/RestClientAutoConfiguration.java\n@@ -62,12 +62,13 @@ public RestClientAutoConfiguration(RestClientProperties properties,\n \n \t@Bean(destroyMethod = \"close\")\n \t@ConditionalOnMissingBean\n-\tpublic RestClient restClient() {\n-\t\tRestClientBuilder builder = configureBuilder();\n+\tpublic RestClient restClient(RestClientBuilder builder) {\n \t\treturn builder.build();\n \t}\n \n-\tprotected RestClientBuilder configureBuilder() {\n+\t@Bean\n+\t@ConditionalOnMissingBean\n+\tpublic RestClientBuilder restClientBuilder() {\n \t\tHttpHost[] hosts = this.properties.getUris().stream().map(HttpHost::create)\n \t\t\t\t.toArray(HttpHost[]::new);\n \t\tRestClientBuilder builder = RestClient.builder(hosts);\n@@ -90,8 +91,9 @@ public static class RestHighLevelClientConfiguration {\n \n \t\t@Bean\n \t\t@ConditionalOnMissingBean\n-\t\tpublic RestHighLevelClient restHighLevelClient(RestClient restClient) {\n-\t\t\treturn new RestHighLevelClient(restClient);\n+\t\tpublic RestHighLevelClient restHighLevelClient(\n+\t\t\t\tRestClientBuilder restClientBuilder) {\n+\t\t\treturn new RestHighLevelClient(restClientBuilder);\n \t\t}\n \n \t}",
    "output": "Upgrade to Elasticsearch 6.2.4"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/MongoDataAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/MongoDataAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/MongoDataAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/MongoDataAutoConfiguration.java\n@@ -18,8 +18,10 @@\n \n import java.util.Collections;\n \n+import com.mongodb.ClientSessionOptions;\n import com.mongodb.DB;\n import com.mongodb.MongoClient;\n+import com.mongodb.client.ClientSession;\n import com.mongodb.client.MongoDatabase;\n \n import org.springframework.beans.BeanUtils;\n@@ -182,6 +184,16 @@ public DB getLegacyDb() {\n \t\t\treturn this.mongoDbFactory.getLegacyDb();\n \t\t}\n \n+\t\t@Override\n+\t\tpublic ClientSession getSession(ClientSessionOptions options) {\n+\t\t\treturn this.mongoDbFactory.getSession(options);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic MongoDbFactory withSession(ClientSession session) {\n+\t\t\treturn this.mongoDbFactory.withSession(session);\n+\t\t}\n+\n \t}\n \n }",
    "output": "Start building against Spring Data Lovelace M3 snapshots"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseProperties.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseProperties.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseProperties.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseProperties.java\n@@ -142,7 +142,6 @@ public int getKeyValue() {\n \t\t\treturn this.keyValue;\n \t\t}\n \n-\t\t@Deprecated\n \t\tpublic void setKeyValue(int keyValue) {\n \t\t\tthis.keyValue = keyValue;\n \t\t}",
    "output": "Remove @Deprecated on CouchbaseProperties.Endpoints.setKeyValue()"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseProperties.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseProperties.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseProperties.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseProperties.java\n@@ -142,7 +142,6 @@ public int getKeyValue() {\n \t\t\treturn this.keyValue;\n \t\t}\n \n-\t\t@Deprecated\n \t\tpublic void setKeyValue(int keyValue) {\n \t\t\tthis.keyValue = keyValue;\n \t\t}",
    "output": "Remove @Deprecated on CouchbaseProperties.Endpoints.setKeyValue()"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ldap/LdapAutoConfigurationTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ldap/LdapAutoConfigurationTests.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ldap/LdapAutoConfigurationTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ldap/LdapAutoConfigurationTests.java\n@@ -22,6 +22,7 @@\n import org.springframework.boot.test.context.runner.ApplicationContextRunner;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Primary;\n import org.springframework.ldap.core.ContextSource;\n import org.springframework.ldap.core.LdapTemplate;\n import org.springframework.ldap.core.support.LdapContextSource;\n@@ -120,14 +121,14 @@ public void contextSourceWithUserProvidedPooledContextSource() {\n \t\t\t\t\t\t\t\"urls\");\n \t\t\t\t\tassertThat(urls).containsExactly(\"ldap://localhost:389\");\n \t\t\t\t\tassertThat(contextSource.isAnonymousReadOnly()).isFalse();\n-\t\t\t\t\tcontext.getBean(PooledContextSource.class);\n \t\t\t\t});\n \t}\n \n \t@Configuration\n \tstatic class PooledContextSourceConfig {\n \n \t\t@Bean\n+\t\t@Primary\n \t\tpublic PooledContextSource pooledContextSource(\n \t\t\t\tLdapContextSource ldapContextSource) {\n \t\t\tPooledContextSource pooledContextSource = new PooledContextSource(",
    "output": "Improve LDAP auto-configuration conditions"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ldap/LdapAutoConfigurationTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ldap/LdapAutoConfigurationTests.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ldap/LdapAutoConfigurationTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/ldap/LdapAutoConfigurationTests.java\n@@ -101,8 +101,7 @@ public void contextSourceWithExtraCustomization() {\n \t@Test\n \tpublic void templateExists() {\n \t\tthis.contextRunner.withPropertyValues(\"spring.ldap.urls:ldap://localhost:389\")\n-\t\t\t\t.run(context -> assertThat(\n-\t\t\t\t\t\tcontext.getBeanNamesForType(LdapTemplate.class)).hasSize(1));\n+\t\t\t\t.run(context -> assertThat(context).hasSingleBean(LdapTemplate.class));\n \t}\n \n }",
    "output": "Improve LDAP auto-configuration"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfiguration.java\n@@ -118,7 +118,7 @@ private void resolveApplicationPath() {\n \t\t}\n \t\telse {\n \t\t\tthis.path = findApplicationPath(AnnotationUtils\n-\t\t\t\t\t.findAnnotation(this.config.getClass(), ApplicationPath.class));\n+\t\t\t\t\t.findAnnotation(this.config.getApplication().getClass(), ApplicationPath.class));\n \t\t}\n \t}\n ",
    "output": "Add support for Jersey WrappingResourceConfig"
  },
  {
    "input": "diff --git a/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java\n--- a/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java\n+++ b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java\n@@ -55,9 +55,10 @@ public class WarPackagingTests {\n \t\t\t\t\t\"jetty-servlets\", \"jetty-webapp-\", \"websocket-api\",\n \t\t\t\t\t\"javax.annotation-api\", \"jetty-plus\", \"javax-websocket-server-impl-\",\n \t\t\t\t\t\"apache-el\", \"asm-\", \"javax.websocket-api-\", \"asm-tree-\",\n-\t\t\t\t\t\"asm-commons-\", \"websocket-common-\", \"jetty-annotations-\",\n-\t\t\t\t\t\"javax-websocket-client-impl-\", \"websocket-client-\",\n-\t\t\t\t\t\"websocket-server-\", \"jetty-xml-\", \"websocket-servlet-\"));\n+\t\t\t\t\t\"asm-analysis-\", \"asm-commons-\", \"websocket-common-\",\n+\t\t\t\t\t\"jetty-annotations-\", \"javax-websocket-client-impl-\",\n+\t\t\t\t\t\"websocket-client-\", \"websocket-server-\", \"jetty-xml-\",\n+\t\t\t\t\t\"websocket-servlet-\"));\n \n \tprivate static final String BOOT_VERSION = Versions.getBootVersion();\n ",
    "output": "Upgrade Jetty war package test to expect new ASM transitive dependency"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/env/OriginTrackedYamlLoader.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/env/OriginTrackedYamlLoader.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/env/OriginTrackedYamlLoader.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/env/OriginTrackedYamlLoader.java\n@@ -23,6 +23,7 @@\n import java.util.stream.Collectors;\n \n import org.yaml.snakeyaml.DumperOptions;\n+import org.yaml.snakeyaml.LoaderOptions;\n import org.yaml.snakeyaml.Yaml;\n import org.yaml.snakeyaml.constructor.BaseConstructor;\n import org.yaml.snakeyaml.constructor.Constructor;\n@@ -64,7 +65,9 @@ protected Yaml createYaml() {\n \t\tRepresenter representer = new Representer();\n \t\tDumperOptions dumperOptions = new DumperOptions();\n \t\tLimitedResolver resolver = new LimitedResolver();\n-\t\treturn new Yaml(constructor, representer, dumperOptions, resolver);\n+\t\tLoaderOptions loaderOptions = new LoaderOptions();\n+\t\tloaderOptions.setAllowDuplicateKeys(false);\n+\t\treturn new Yaml(constructor, representer, dumperOptions, loaderOptions, resolver);\n \t}\n \n \tpublic List<Map<String, Object>> load() {\n@@ -76,7 +79,7 @@ public List<Map<String, Object>> load() {\n \t/**\n \t * {@link Constructor} that tracks property origins.\n \t */\n-\tprivate class OriginTrackingConstructor extends StrictMapAppenderConstructor {\n+\tprivate class OriginTrackingConstructor extends Constructor {\n \n \t\t@Override\n \t\tprotected Object constructObject(Node node) {",
    "output": "Fix deprecation warning in OriginTrackedYamlLoader"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/env/OriginTrackedYamlLoader.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/env/OriginTrackedYamlLoader.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/env/OriginTrackedYamlLoader.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/env/OriginTrackedYamlLoader.java\n@@ -23,6 +23,7 @@\n import java.util.stream.Collectors;\n \n import org.yaml.snakeyaml.DumperOptions;\n+import org.yaml.snakeyaml.LoaderOptions;\n import org.yaml.snakeyaml.Yaml;\n import org.yaml.snakeyaml.constructor.BaseConstructor;\n import org.yaml.snakeyaml.constructor.Constructor;\n@@ -64,7 +65,9 @@ protected Yaml createYaml() {\n \t\tRepresenter representer = new Representer();\n \t\tDumperOptions dumperOptions = new DumperOptions();\n \t\tLimitedResolver resolver = new LimitedResolver();\n-\t\treturn new Yaml(constructor, representer, dumperOptions, resolver);\n+\t\tLoaderOptions loaderOptions = new LoaderOptions();\n+\t\tloaderOptions.setAllowDuplicateKeys(false);\n+\t\treturn new Yaml(constructor, representer, dumperOptions, loaderOptions, resolver);\n \t}\n \n \tpublic List<Map<String, Object>> load() {\n@@ -76,7 +79,7 @@ public List<Map<String, Object>> load() {\n \t/**\n \t * {@link Constructor} that tracks property origins.\n \t */\n-\tprivate class OriginTrackingConstructor extends StrictMapAppenderConstructor {\n+\tprivate class OriginTrackingConstructor extends Constructor {\n \n \t\t@Override\n \t\tprotected Object constructObject(Node node) {",
    "output": "Fix deprecation warning in OriginTrackedYamlLoader"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/security/servlet/EndpointRequest.java\n@@ -115,12 +115,12 @@ public static LinksRequestMatcher toLinks() {\n \t/**\n \t * Base class for supported request matchers.\n \t */\n-\tprivate static abstract class AbstractRequestMatcher\n+\tprivate abstract static class AbstractRequestMatcher\n \t\t\textends ApplicationContextRequestMatcher<WebApplicationContext> {\n \n \t\tprivate volatile RequestMatcher delegate;\n \n-\t\tpublic AbstractRequestMatcher() {\n+\t\tAbstractRequestMatcher() {\n \t\t\tsuper(WebApplicationContext.class);\n \t\t}\n ",
    "output": "Fix checkstyle violations"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/kafka/KafkaProperties.java\n@@ -1002,6 +1002,7 @@ public Map<String, Object> buildProperties() {\n \t\t\t}\n \t\t\treturn properties;\n \t\t}\n+\n \t}\n \n \tpublic static class Jaas {",
    "output": "Complete SSL configuration for Kafka"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/tasks/bundling/BootJar.java b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/tasks/bundling/BootJar.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/tasks/bundling/BootJar.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/tasks/bundling/BootJar.java\n@@ -37,7 +37,7 @@\n  */\n public class BootJar extends Jar implements BootArchive {\n \n-\tprivate BootArchiveSupport support = new BootArchiveSupport(\n+\tprivate final BootArchiveSupport support = new BootArchiveSupport(\n \t\t\t\"org.springframework.boot.loader.JarLauncher\", this::resolveZipCompression);\n \n \tprivate FileCollection classpath;\n@@ -48,10 +48,8 @@ public class BootJar extends Jar implements BootArchive {\n \t * Creates a new {@code BootJar} task.\n \t */\n \tpublic BootJar() {\n-\t\tCopySpec bootInf = getRootSpec().addChildBeforeSpec(getMainSpec())\n-\t\t\t\t.into(\"BOOT-INF\");\n-\t\tbootInf.into(\"classes\", classpathFiles(File::isDirectory));\n-\t\tbootInf.into(\"lib\", classpathFiles(File::isFile));\n+\t\tinto(\"BOOT-INF/classes\", classpathFiles(File::isDirectory));\n+\t\tinto(\"BOOT-INF/lib\", classpathFiles(File::isFile));\n \t}\n \n \tprivate Action<CopySpec> classpathFiles(Spec<File> filter) {",
    "output": "Remove the use of internal API from Gradle Plugin's BootJar"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-test-support/src/main/java/org/springframework/boot/testsupport/testcontainers/CassandraContainer.java b/spring-boot-project/spring-boot-tools/spring-boot-test-support/src/main/java/org/springframework/boot/testsupport/testcontainers/CassandraContainer.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-test-support/src/main/java/org/springframework/boot/testsupport/testcontainers/CassandraContainer.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-test-support/src/main/java/org/springframework/boot/testsupport/testcontainers/CassandraContainer.java\n@@ -16,6 +16,7 @@\n \n package org.springframework.boot.testsupport.testcontainers;\n \n+import java.time.Duration;\n import java.util.concurrent.Callable;\n import java.util.concurrent.TimeUnit;\n \n@@ -37,10 +38,9 @@ public class CassandraContainer extends Container {\n \tprivate static final int PORT = 9042;\n \n \tpublic CassandraContainer() {\n-\t\tsuper(\"cassandra:3.11.1\", PORT,\n-\t\t\t\t(container) -> container\n-\t\t\t\t\t\t.waitingFor(new WaitStrategy(container.getMappedPort(PORT)))\n-\t\t\t\t\t\t.withStartupAttempts(3));\n+\t\tsuper(\"cassandra:3.11.1\", PORT, (container) -> container\n+\t\t\t\t.waitingFor(new WaitStrategy(container.getMappedPort(PORT)))\n+\t\t\t\t.withStartupAttempts(3).withStartupTimeout(Duration.ofSeconds(60)));\n \t}\n \n \tprivate static class WaitStrategy extends HostPortWaitStrategy {",
    "output": "Try to stabilize build by giving Cassandra longer to start"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n@@ -39,7 +39,7 @@\n public final class GradleCompatibilitySuite extends Suite {\n \n \tprivate static final List<String> GRADLE_VERSIONS = Arrays.asList(\"default\", \"4.1\",\n-\t\t\t\"4.2\", \"4.3\", \"4.4.1\", \"4.5.1\", \"4.6\");\n+\t\t\t\"4.2\", \"4.3\", \"4.4.1\", \"4.5.1\", \"4.6\", \"4.7\");\n \n \tpublic GradleCompatibilitySuite(Class<?> clazz) throws InitializationError {\n \t\tsuper(clazz, createRunners(clazz));",
    "output": "Test the Gradle plugin against Gradle 4.7"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/server/AbstractServletWebServerFactoryTests.java b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/server/AbstractServletWebServerFactoryTests.java\n--- a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/server/AbstractServletWebServerFactoryTests.java\n+++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/servlet/server/AbstractServletWebServerFactoryTests.java\n@@ -118,6 +118,7 @@\n import static org.junit.Assert.fail;\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.BDDMockito.given;\n+import static org.mockito.Mockito.atLeastOnce;\n import static org.mockito.Mockito.inOrder;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n@@ -619,8 +620,8 @@ public void sslWithCustomSslStoreProvider() throws Exception {\n \t\t\t\thttpClient);\n \t\tassertThat(getResponse(getLocalUrl(\"https\", \"/test.txt\"), requestFactory))\n \t\t\t\t.isEqualTo(\"test\");\n-\t\tverify(sslStoreProvider).getKeyStore();\n-\t\tverify(sslStoreProvider).getTrustStore();\n+\t\tverify(sslStoreProvider, atLeastOnce()).getKeyStore();\n+\t\tverify(sslStoreProvider, atLeastOnce()).getTrustStore();\n \t}\n \n \t@Test",
    "output": "Fix verify statements in tests"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RepackageMojo.java b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RepackageMojo.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RepackageMojo.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RepackageMojo.java\n@@ -86,7 +86,7 @@ public class RepackageMojo extends AbstractDependencyFilterMojo {\n \t * Name of the generated archive.\n \t * @since 1.0\n \t */\n-\t@Parameter(defaultValue = \"${project.build.finalName}\", required = true)\n+\t@Parameter(defaultValue = \"${project.build.finalName}\", readonly = true)\n \tprivate String finalName;\n \n \t/**",
    "output": "Make sure that finalName is read only"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java\n@@ -539,12 +539,12 @@ private void load(PropertySourceLoader loader, String location, Profile profile,\n \n \t\tprivate List<Document> loadDocuments(PropertySourceLoader loader, String name,\n \t\t\t\tResource resource) throws IOException {\n-\t\t\tloader.load(name, resource);\n \t\t\tDocumentsCacheKey cacheKey = new DocumentsCacheKey(loader, resource);\n \t\t\tList<Document> documents = this.loadDocumentsCache.get(cacheKey);\n \t\t\tif (documents == null) {\n \t\t\t\tList<PropertySource<?>> loaded = loader.load(name, resource);\n \t\t\t\tdocuments = asDocuments(loaded);\n+\t\t\t\tthis.loadDocumentsCache.put(cacheKey, documents);\n \t\t\t}\n \t\t\treturn documents;\n \t\t}",
    "output": "Populate cache in ConfigFileApplicationListener\nFix `ConfigFileApplicationListener` so that the loadDocumentsCache is\npopulated when documents are loaded."
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringConfigurationPropertySource.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringConfigurationPropertySource.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringConfigurationPropertySource.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/SpringConfigurationPropertySource.java\n@@ -77,7 +77,8 @@ class SpringConfigurationPropertySource implements ConfigurationPropertySource {\n \t\tAssert.notNull(propertySource, \"PropertySource must not be null\");\n \t\tAssert.notNull(mapper, \"Mapper must not be null\");\n \t\tthis.propertySource = propertySource;\n-\t\tthis.mapper = mapper;\n+\t\tthis.mapper = (mapper instanceof DelegatingPropertyMapper ? mapper\n+\t\t\t\t: new DelegatingPropertyMapper(mapper));\n \t\tthis.containsDescendantOf = (containsDescendantOf != null ? containsDescendantOf\n \t\t\t\t: (n) -> ConfigurationPropertyState.UNKNOWN);\n \t}",
    "output": "Make sure property mapping exception are swallowed"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jersey/JerseyAutoConfiguration.java\n@@ -35,7 +35,6 @@\n import com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n-import org.glassfish.jersey.CommonProperties;\n import org.glassfish.jersey.jackson.JacksonFeature;\n import org.glassfish.jersey.server.ResourceConfig;\n import org.glassfish.jersey.servlet.ServletContainer;\n@@ -213,9 +212,6 @@ public void setServletContext(ServletContext servletContext) {\n \t\t\t\t\t\t+ servletRegistrationName + \"'\");\n \t\t\t}\n \t\t\tregistration.setInitParameters(this.jersey.getInit());\n-\t\t\tregistration.setInitParameter(\n-\t\t\t\t\tCommonProperties.METAINF_SERVICES_LOOKUP_DISABLE,\n-\t\t\t\t\tBoolean.TRUE.toString());\n \t\t}\n \t}\n ",
    "output": "Remove misleading Jersey configuration property\nThis commit removes an override of a `ResourceConfig` property that was\nset as an init parameter property (and therefore ignored)."
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/RepositoryConfigurationFactory.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/RepositoryConfigurationFactory.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/RepositoryConfigurationFactory.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/RepositoryConfigurationFactory.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2015 the original author or authors.\n+ * Copyright 2012-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -45,10 +45,10 @@ public final class RepositoryConfigurationFactory {\n \t\t\t\"central\", URI.create(\"https://repo.maven.apache.org/maven2/\"), false);\n \n \tprivate static final RepositoryConfiguration SPRING_MILESTONE = new RepositoryConfiguration(\n-\t\t\t\"spring-milestone\", URI.create(\"http://repo.spring.io/milestone\"), false);\n+\t\t\t\"spring-milestone\", URI.create(\"https://repo.spring.io/milestone\"), false);\n \n \tprivate static final RepositoryConfiguration SPRING_SNAPSHOT = new RepositoryConfiguration(\n-\t\t\t\"spring-snapshot\", URI.create(\"http://repo.spring.io/snapshot\"), true);\n+\t\t\t\"spring-snapshot\", URI.create(\"https://repo.spring.io/snapshot\"), true);\n \n \tprivate RepositoryConfigurationFactory() {\n \t}",
    "output": "Use secure connection to repositories\nUse secure connection to repositories"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/RepositoryConfigurationFactory.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/RepositoryConfigurationFactory.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/RepositoryConfigurationFactory.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/RepositoryConfigurationFactory.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2015 the original author or authors.\n+ * Copyright 2012-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -45,10 +45,10 @@ public final class RepositoryConfigurationFactory {\n \t\t\t\"central\", URI.create(\"https://repo.maven.apache.org/maven2/\"), false);\n \n \tprivate static final RepositoryConfiguration SPRING_MILESTONE = new RepositoryConfiguration(\n-\t\t\t\"spring-milestone\", URI.create(\"http://repo.spring.io/milestone\"), false);\n+\t\t\t\"spring-milestone\", URI.create(\"https://repo.spring.io/milestone\"), false);\n \n \tprivate static final RepositoryConfiguration SPRING_SNAPSHOT = new RepositoryConfiguration(\n-\t\t\t\"spring-snapshot\", URI.create(\"http://repo.spring.io/snapshot\"), true);\n+\t\t\t\"spring-snapshot\", URI.create(\"https://repo.spring.io/snapshot\"), true);\n \n \tprivate RepositoryConfigurationFactory() {\n \t}",
    "output": "Use secure connection to repositories"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfigurationTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfigurationTests.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfigurationTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfigurationTests.java\n@@ -197,7 +197,7 @@ public void testRedisConfigurationWithSentinelAndDatabase() {\n \t\tthis.contextRunner\n \t\t\t\t.withPropertyValues(\"spring.redis.database:1\",\n \t\t\t\t\t\t\"spring.redis.sentinel.master:mymaster\",\n-\t\t\t\t\t\t\"spring.redis.sentinel.nodes:127.0.0.1:26379,  127.0.0.1:26380\")\n+\t\t\t\t\t\t\"spring.redis.sentinel.nodes:127.0.0.1:26379, 127.0.0.1:26380\")\n \t\t\t\t.run((context) -> {\n \t\t\t\t\tLettuceConnectionFactory connectionFactory = context\n \t\t\t\t\t\t\t.getBean(LettuceConnectionFactory.class);",
    "output": "Add Redis Sentinel database support"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringBootBanner.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringBootBanner.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringBootBanner.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringBootBanner.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2017 the original author or authors.\n+ * Copyright 2012-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -50,14 +50,14 @@ public void printBanner(Environment environment, Class<?> sourceClass,\n \t\t}\n \t\tString version = SpringBootVersion.getVersion();\n \t\tversion = (version == null ? \"\" : \" (v\" + version + \")\");\n-\t\tString padding = \"\";\n+\t\tStringBuilder padding = new StringBuilder();\n \t\twhile (padding.length() < STRAP_LINE_SIZE\n \t\t\t\t- (version.length() + SPRING_BOOT.length())) {\n-\t\t\tpadding += \" \";\n+\t\t\tpadding.append(\" \");\n \t\t}\n \n \t\tprintStream.println(AnsiOutput.toString(AnsiColor.GREEN, SPRING_BOOT,\n-\t\t\t\tAnsiColor.DEFAULT, padding, AnsiStyle.FAINT, version));\n+\t\t\t\tAnsiColor.DEFAULT, padding.toString(), AnsiStyle.FAINT, version));\n \t\tprintStream.println();\n \t}\n ",
    "output": "Avoid string copies in SpringBootBanner\nAvoid string copies in SpringBootBanner"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringBootBanner.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringBootBanner.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringBootBanner.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/SpringBootBanner.java\n@@ -50,14 +50,14 @@ public void printBanner(Environment environment, Class<?> sourceClass,\n \t\t}\n \t\tString version = SpringBootVersion.getVersion();\n \t\tversion = (version == null ? \"\" : \" (v\" + version + \")\");\n-\t\tString padding = \"\";\n+\t\tStringBuilder padding = new StringBuilder();\n \t\twhile (padding.length() < STRAP_LINE_SIZE\n \t\t\t\t- (version.length() + SPRING_BOOT.length())) {\n-\t\t\tpadding += \" \";\n+\t\t\tpadding.append(\" \");\n \t\t}\n \n \t\tprintStream.println(AnsiOutput.toString(AnsiColor.GREEN, SPRING_BOOT,\n-\t\t\t\tAnsiColor.DEFAULT, padding, AnsiStyle.FAINT, version));\n+\t\t\t\tAnsiColor.DEFAULT, padding.toString(), AnsiStyle.FAINT, version));\n \t\tprintStream.println();\n \t}\n ",
    "output": "Avoid string copies in SpringBootBanner"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/SummaryProgressReporter.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/SummaryProgressReporter.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/SummaryProgressReporter.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/SummaryProgressReporter.java\n@@ -23,7 +23,6 @@\n import org.eclipse.aether.DefaultRepositorySystemSession;\n import org.eclipse.aether.RepositoryEvent;\n import org.eclipse.aether.transfer.AbstractTransferListener;\n-import org.eclipse.aether.transfer.TransferCancelledException;\n import org.eclipse.aether.transfer.TransferEvent;\n \n /**\n@@ -53,14 +52,12 @@ final class SummaryProgressReporter implements ProgressReporter {\n \t\tsession.setTransferListener(new AbstractTransferListener() {\n \n \t\t\t@Override\n-\t\t\tpublic void transferStarted(TransferEvent event)\n-\t\t\t\t\tthrows TransferCancelledException {\n+\t\t\tpublic void transferStarted(TransferEvent event) {\n \t\t\t\treportProgress();\n \t\t\t}\n \n \t\t\t@Override\n-\t\t\tpublic void transferProgressed(TransferEvent event)\n-\t\t\t\t\tthrows TransferCancelledException {\n+\t\t\tpublic void transferProgressed(TransferEvent event) {\n \t\t\t\treportProgress();\n \t\t\t}\n \n@@ -95,7 +92,7 @@ else if (System.currentTimeMillis()\n \tpublic void finished() {\n \t\tif (this.started && !this.finished) {\n \t\t\tthis.finished = true;\n-\t\t\tSystem.out.println(\"\");\n+\t\t\tthis.out.println();\n \t\t}\n \t}\n ",
    "output": "Use this.out in SummaryProgressReporter.finished()"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystemTests.java b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystemTests.java\n--- a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystemTests.java\n+++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystemTests.java\n@@ -33,7 +33,6 @@\n import org.hamcrest.Matcher;\n import org.hamcrest.Matchers;\n import org.junit.Before;\n-import org.junit.Ignore;\n import org.junit.Rule;\n import org.junit.Test;\n \n@@ -189,7 +188,6 @@ public void setLevelOfUnconfiguredLoggerDoesNotAffectRootConfiguration() {\n \t}\n \n \t@Test\n-\t@Ignore(\"Fails on Bamboo\")\n \tpublic void loggingThatUsesJulIsCaptured() {\n \t\tthis.loggingSystem.beforeInitialize();\n \t\tthis.loggingSystem.initialize(null, null, null);",
    "output": "Unignore JUL logging test"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertySource.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertySource.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertySource.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertySource.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2017 the original author or authors.\n+ * Copyright 2012-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -50,7 +50,10 @@ public interface ConfigurationPropertySource {\n \t * @param name the name to check\n \t * @return if the source contains any descendants\n \t */\n-\tConfigurationPropertyState containsDescendantOf(ConfigurationPropertyName name);\n+\tdefault ConfigurationPropertyState containsDescendantOf(\n+\t\t\tConfigurationPropertyName name) {\n+\t\treturn ConfigurationPropertyState.UNKNOWN;\n+\t}\n \n \t/**\n \t * Return a filtered variant of this source, containing only names that match the",
    "output": "Make containsDescendantOf a default method\nChange `ConfigurationPropertySource.containsDescendantOf` to have a\ndefault implementation that return `UNKNOWN`."
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfigurationTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfigurationTests.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfigurationTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfigurationTests.java\n@@ -816,8 +816,8 @@ public void customConfigurerAppliedAfterAutoConfig() {\n \t\t\t\t.run((context) -> {\n \t\t\t\t\tContentNegotiationManager manager = context\n \t\t\t\t\t\t\t.getBean(ContentNegotiationManager.class);\n-\t\t\t\t\tassertThat(manager.getStrategies()).anyMatch(\n-\t\t\t\t\t\t\tstrategy -> WebMvcAutoConfiguration.OptionalPathExtensionContentNegotiationStrategy.class\n+\t\t\t\t\tassertThat(manager.getStrategies()).anyMatch((\n+\t\t\t\t\t\t\tstrategy) -> WebMvcAutoConfiguration.OptionalPathExtensionContentNegotiationStrategy.class\n \t\t\t\t\t\t\t\t\t.isAssignableFrom(strategy.getClass()));\n \t\t\t\t});\n \t}",
    "output": "Follow project convention for lambda expression\nFollow project convention for lambda expression"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfigurationTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfigurationTests.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfigurationTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfigurationTests.java\n@@ -816,8 +816,8 @@ public void customConfigurerAppliedAfterAutoConfig() {\n \t\t\t\t.run((context) -> {\n \t\t\t\t\tContentNegotiationManager manager = context\n \t\t\t\t\t\t\t.getBean(ContentNegotiationManager.class);\n-\t\t\t\t\tassertThat(manager.getStrategies()).anyMatch(\n-\t\t\t\t\t\t\t(strategy) -> WebMvcAutoConfiguration.OptionalPathExtensionContentNegotiationStrategy.class\n+\t\t\t\t\tassertThat(manager.getStrategies()).anyMatch((\n+\t\t\t\t\t\t\tstrategy) -> WebMvcAutoConfiguration.OptionalPathExtensionContentNegotiationStrategy.class\n \t\t\t\t\t\t\t\t\t.isAssignableFrom(strategy.getClass()));\n \t\t\t\t});\n \t}",
    "output": "Follow project convention for lambda expression\nC"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfigurationTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfigurationTests.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfigurationTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/servlet/WebMvcAutoConfigurationTests.java\n@@ -817,7 +817,7 @@ public void customConfigurerAppliedAfterAutoConfig() {\n \t\t\t\t\tContentNegotiationManager manager = context\n \t\t\t\t\t\t\t.getBean(ContentNegotiationManager.class);\n \t\t\t\t\tassertThat(manager.getStrategies()).anyMatch(\n-\t\t\t\t\t\t\tstrategy -> WebMvcAutoConfiguration.OptionalPathExtensionContentNegotiationStrategy.class\n+\t\t\t\t\t\t\t(strategy) -> WebMvcAutoConfiguration.OptionalPathExtensionContentNegotiationStrategy.class\n \t\t\t\t\t\t\t\t\t.isAssignableFrom(strategy.getClass()));\n \t\t\t\t});\n \t}",
    "output": "Follow project convention for lambda expression"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/web/client/TestRestTemplate.java b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/web/client/TestRestTemplate.java\n--- a/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/web/client/TestRestTemplate.java\n+++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/web/client/TestRestTemplate.java\n@@ -138,8 +138,8 @@ private TestRestTemplate(RestTemplate restTemplate, String username, String pass\n \t\t\tHttpClientOption... httpClientOptions) {\n \t\tAssert.notNull(restTemplate, \"RestTemplate must not be null\");\n \t\tthis.httpClientOptions = httpClientOptions;\n-\t\tif (getRequestFactoryClass(restTemplate).getName().equals(\n-\t\t\t\t\"org.springframework.http.client.HttpComponentsClientHttpRequestFactory\")) {\n+\t\tif (getRequestFactoryClass(restTemplate).isAssignableFrom(\n+\t\t\t\tHttpComponentsClientHttpRequestFactory.class)) {\n \t\t\trestTemplate.setRequestFactory(\n \t\t\t\t\tnew CustomHttpComponentsClientHttpRequestFactory(httpClientOptions));\n \t\t}",
    "output": "Avoid check class by string name"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/web/client/TestRestTemplate.java b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/web/client/TestRestTemplate.java\n--- a/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/web/client/TestRestTemplate.java\n+++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/web/client/TestRestTemplate.java\n@@ -138,8 +138,8 @@ private TestRestTemplate(RestTemplate restTemplate, String username, String pass\n \t\t\tHttpClientOption... httpClientOptions) {\n \t\tAssert.notNull(restTemplate, \"RestTemplate must not be null\");\n \t\tthis.httpClientOptions = httpClientOptions;\n-\t\tif (getRequestFactoryClass(restTemplate).getName().equals(\n-\t\t\t\t\"org.springframework.http.client.HttpComponentsClientHttpRequestFactory\")) {\n+\t\tif (getRequestFactoryClass(restTemplate).isAssignableFrom(\n+\t\t\t\tHttpComponentsClientHttpRequestFactory.class)) {\n \t\t\trestTemplate.setRequestFactory(\n \t\t\t\t\tnew CustomHttpComponentsClientHttpRequestFactory(httpClientOptions));\n \t\t}",
    "output": "Avoid check class by string name"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/web/mappings/servlet/DispatcherServletsMappingDescriptionProvider.java b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/web/mappings/servlet/DispatcherServletsMappingDescriptionProvider.java\n--- a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/web/mappings/servlet/DispatcherServletsMappingDescriptionProvider.java\n+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/web/mappings/servlet/DispatcherServletsMappingDescriptionProvider.java\n@@ -168,7 +168,7 @@ public List<DispatcherServletMappingDescription> describe(\n \n \t\tprivate DispatcherServletMappingDescription describe(\n \t\t\t\tEntry<String, Object> mapping) {\n-\t\t\treturn new DispatcherServletMappingDescription(mapping.getKey().toString(),\n+\t\t\treturn new DispatcherServletMappingDescription(mapping.getKey(),\n \t\t\t\t\tmapping.getValue().toString(), null);\n \t\t}\n ",
    "output": "\"tostring()\" should never be called on a String object"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/web/mappings/servlet/DispatcherServletsMappingDescriptionProvider.java b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/web/mappings/servlet/DispatcherServletsMappingDescriptionProvider.java\n--- a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/web/mappings/servlet/DispatcherServletsMappingDescriptionProvider.java\n+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/web/mappings/servlet/DispatcherServletsMappingDescriptionProvider.java\n@@ -168,7 +168,7 @@ public List<DispatcherServletMappingDescription> describe(\n \n \t\tprivate DispatcherServletMappingDescription describe(\n \t\t\t\tEntry<String, Object> mapping) {\n-\t\t\treturn new DispatcherServletMappingDescription(mapping.getKey().toString(),\n+\t\t\treturn new DispatcherServletMappingDescription(mapping.getKey(),\n \t\t\t\t\tmapping.getValue().toString(), null);\n \t\t}\n ",
    "output": "\"tostring()\" should never be called on a String object"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/tunnel/server/HttpTunnelServer.java b/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/tunnel/server/HttpTunnelServer.java\n--- a/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/tunnel/server/HttpTunnelServer.java\n+++ b/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/tunnel/server/HttpTunnelServer.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2017 the original author or authors.\n+ * Copyright 2012-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -107,7 +107,7 @@\n  */\n public class HttpTunnelServer {\n \n-\tprivate static final int DEFAULT_LONG_POLL_TIMEOUT = (int) TimeUnit.SECONDS.toMillis(10);\n+\tprivate static final long DEFAULT_LONG_POLL_TIMEOUT = TimeUnit.SECONDS.toMillis(10);\n \n \tprivate static final long DEFAULT_DISCONNECT_TIMEOUT = TimeUnit.SECONDS.toMillis(30);\n \n@@ -118,7 +118,7 @@ public class HttpTunnelServer {\n \n \tprivate final TargetServerConnection serverConnection;\n \n-\tprivate int longPollTimeout = DEFAULT_LONG_POLL_TIMEOUT;\n+\tprivate int longPollTimeout = (int) DEFAULT_LONG_POLL_TIMEOUT;\n \n \tprivate long disconnectTimeout = DEFAULT_DISCONNECT_TIMEOUT;\n ",
    "output": "Get rid of magic\" time constants\""
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/tunnel/server/HttpTunnelServer.java b/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/tunnel/server/HttpTunnelServer.java\n--- a/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/tunnel/server/HttpTunnelServer.java\n+++ b/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/tunnel/server/HttpTunnelServer.java\n@@ -23,6 +23,7 @@\n import java.util.ArrayDeque;\n import java.util.Deque;\n import java.util.Iterator;\n+import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicLong;\n \n import org.apache.commons.logging.Log;\n@@ -106,11 +107,9 @@\n  */\n public class HttpTunnelServer {\n \n-\tprivate static final int SECONDS = 1000;\n+\tprivate static final int DEFAULT_LONG_POLL_TIMEOUT = (int) TimeUnit.SECONDS.toMillis(10);\n \n-\tprivate static final int DEFAULT_LONG_POLL_TIMEOUT = 10 * SECONDS;\n-\n-\tprivate static final long DEFAULT_DISCONNECT_TIMEOUT = 30 * SECONDS;\n+\tprivate static final long DEFAULT_DISCONNECT_TIMEOUT = TimeUnit.SECONDS.toMillis(30);\n \n \tprivate static final MediaType DISCONNECT_MEDIA_TYPE = new MediaType(\"application\",\n \t\t\t\"x-disconnect\");",
    "output": "Get rid of \"magic\" time constants"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthWebEndpointResponseMapper.java b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthWebEndpointResponseMapper.java\n--- a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthWebEndpointResponseMapper.java\n+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthWebEndpointResponseMapper.java\n@@ -65,13 +65,13 @@ public WebEndpointResponse<Health> map(Health health,\n \t */\n \tpublic WebEndpointResponse<Health> map(Health health, SecurityContext securityContext,\n \t\t\tShowDetails showDetails) {\n-\t\tInteger status = this.statusHttpMapper.mapStatus(health.getStatus());\n \t\tif (showDetails == ShowDetails.NEVER\n \t\t\t\t|| (showDetails == ShowDetails.WHEN_AUTHORIZED\n \t\t\t\t\t\t&& (securityContext.getPrincipal() == null\n \t\t\t\t\t\t\t\t|| !isUserInRole(securityContext)))) {\n \t\t\thealth = Health.status(health.getStatus()).build();\n \t\t}\n+\t\tInteger status = this.statusHttpMapper.mapStatus(health.getStatus());\n \t\treturn new WebEndpointResponse<>(health, status);\n \t}\n ",
    "output": "Invoke mapStatus() only when necessary"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthWebEndpointResponseMapper.java b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthWebEndpointResponseMapper.java\n--- a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthWebEndpointResponseMapper.java\n+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/HealthWebEndpointResponseMapper.java\n@@ -65,13 +65,13 @@ public WebEndpointResponse<Health> map(Health health,\n \t */\n \tpublic WebEndpointResponse<Health> map(Health health, SecurityContext securityContext,\n \t\t\tShowDetails showDetails) {\n-\t\tInteger status = this.statusHttpMapper.mapStatus(health.getStatus());\n \t\tif (showDetails == ShowDetails.NEVER\n \t\t\t\t|| (showDetails == ShowDetails.WHEN_AUTHORIZED\n \t\t\t\t\t\t&& (securityContext.getPrincipal() == null\n \t\t\t\t\t\t\t\t|| !isUserInRole(securityContext)))) {\n \t\t\thealth = Health.status(health.getStatus()).build();\n \t\t}\n+\t\tInteger status = this.statusHttpMapper.mapStatus(health.getStatus());\n \t\treturn new WebEndpointResponse<>(health, status);\n \t}\n ",
    "output": "Invoke mapStatus() only when necessary"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/info/BuildPropertiesTests.java b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/info/BuildPropertiesTests.java\n--- a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/info/BuildPropertiesTests.java\n+++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/info/BuildPropertiesTests.java\n@@ -18,6 +18,7 @@\n \n import java.time.Instant;\n import java.time.format.DateTimeFormatter;\n+import java.time.temporal.ChronoUnit;\n import java.util.Properties;\n \n import org.junit.Test;\n@@ -39,7 +40,8 @@ public void basicInfo() {\n \t\tassertThat(properties.getGroup()).isEqualTo(\"com.example\");\n \t\tassertThat(properties.getArtifact()).isEqualTo(\"demo\");\n \t\tassertThat(properties.getVersion()).isEqualTo(\"0.0.1\");\n-\t\tassertThat(properties.getTime()).isEqualTo(instant);\n+\t\tassertThat(properties.getTime())\n+\t\t\t\t.isEqualTo(instant.truncatedTo(ChronoUnit.MILLIS));\n \t\tassertThat(properties.get(\"time\"))\n \t\t\t\t.isEqualTo(String.valueOf(instant.toEpochMilli()));\n \t}",
    "output": "Use millisecond precision for build time in BuildPropertiesTests"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RunArguments.java b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RunArguments.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RunArguments.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RunArguments.java\n@@ -17,6 +17,7 @@\n package org.springframework.boot.maven;\n \n import java.util.Arrays;\n+import java.util.Deque;\n import java.util.LinkedList;\n import java.util.Objects;\n \n@@ -44,7 +45,7 @@ class RunArguments {\n \t\t}\n \t}\n \n-\tpublic LinkedList<String> getArgs() {\n+\tpublic Deque<String> getArgs() {\n \t\treturn this.args;\n \t}\n ",
    "output": "Polish\nDeclarations should use Java collection interfaces such as \"Deque\" rather\nthan specific implementation classes such as \"LinkedList\"."
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaProperties.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaProperties.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaProperties.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaProperties.java\n@@ -21,8 +21,8 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.function.Supplier;\n \n-import javax.inject.Provider;\n import javax.sql.DataSource;\n \n import org.hibernate.boot.model.naming.ImplicitNamingStrategy;\n@@ -244,7 +244,7 @@ else if (!result.containsKey(USE_NEW_ID_GENERATOR_MAPPINGS)) {\n \t\t}\n \n \t\tprivate String determineDdlAuto(Map<String, String> existing,\n-\t\t\t\tProvider<String> defaultDdlAuto) {\n+\t\t\t\tSupplier<String> defaultDdlAuto) {\n \t\t\tif (!existing.containsKey(\"hibernate.hbm2ddl.auto\")) {\n \t\t\t\tString ddlAuto = (this.ddlAuto != null ? this.ddlAuto\n \t\t\t\t\t\t: defaultDdlAuto.get());",
    "output": "Fix wrong import"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/orm/jpa/TestDatabaseAutoConfigurationNoEmbeddedTests.java b/spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/orm/jpa/TestDatabaseAutoConfigurationNoEmbeddedTests.java\n--- a/spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/orm/jpa/TestDatabaseAutoConfigurationNoEmbeddedTests.java\n+++ b/spring-boot-project/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/orm/jpa/TestDatabaseAutoConfigurationNoEmbeddedTests.java\n@@ -58,7 +58,7 @@ public void applyAnyReplace() {\n \t\t\t\t.hasMessageContaining(\n \t\t\t\t\t\t\"If you want an embedded database please put a supported one on the classpath\")\n \t\t\t\t.hasMessageContaining(\n-\t\t\t\t\t\t\"or tune the replace attribute of @AutoconfigureTestDatabase.\"));\n+\t\t\t\t\t\t\"or tune the replace attribute of @AutoConfigureTestDatabase.\"));\n \t}\n \n \t@Test",
    "output": "Fix typo in TestDatabaseAutoConfiguration"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/jdbc/TestDatabaseAutoConfiguration.java b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/jdbc/TestDatabaseAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/jdbc/TestDatabaseAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/jdbc/TestDatabaseAutoConfiguration.java\n@@ -196,7 +196,7 @@ public EmbeddedDatabase getEmbeddedDatabase() {\n \t\t\t\t\t\"Failed to replace DataSource with an embedded database for tests. If \"\n \t\t\t\t\t\t\t+ \"you want an embedded database please put a supported one \"\n \t\t\t\t\t\t\t+ \"on the classpath or tune the replace attribute of \"\n-\t\t\t\t\t\t\t+ \"@AutoconfigureTestDatabase.\");\n+\t\t\t\t\t\t\t+ \"@AutoConfigureTestDatabase.\");\n \t\t\treturn new EmbeddedDatabaseBuilder().generateUniqueName(true)\n \t\t\t\t\t.setType(connection.getType()).build();\n \t\t}",
    "output": "Fix typo in TestDatabaseAutoConfiguration failure msg"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/plugin/KotlinPluginActionIntegrationTests.java b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/plugin/KotlinPluginActionIntegrationTests.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/plugin/KotlinPluginActionIntegrationTests.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/plugin/KotlinPluginActionIntegrationTests.java\n@@ -48,7 +48,8 @@ public void kotlinVersionMatchesKotlinPluginVersion() {\n \t\t\t\t.build(\"kotlinVersion\", \"dependencies\", \"--configuration\", \"compile\")\n \t\t\t\t.getOutput();\n \t\tassertThat(output).contains(\"Kotlin version: 1.2.10\");\n-\t\tassertThat(output).contains(\"org.jetbrains.kotlin:kotlin-stdlib-jdk8: -> 1.2.10\");\n+\t\tassertThat(output)\n+\t\t\t\t.containsPattern(\"org.jetbrains.kotlin:kotlin-stdlib-jdk8:* -> 1.2.10\");\n \t}\n \n }",
    "output": "Test the Gradle plugin against Gradle 4.6"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n@@ -39,7 +39,7 @@\n public final class GradleCompatibilitySuite extends Suite {\n \n \tprivate static final List<String> GRADLE_VERSIONS = Arrays.asList(\"default\", \"4.1\",\n-\t\t\t\"4.2\", \"4.3\", \"4.4.1\", \"4.5.1\");\n+\t\t\t\"4.2\", \"4.3\", \"4.4.1\", \"4.5.1\", \"4.6\");\n \n \tpublic GradleCompatibilitySuite(Class<?> clazz) throws InitializationError {\n \t\tsuper(clazz, createRunners(clazz));",
    "output": "Test the Gradle plugin against Gradle 4.6"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n@@ -39,7 +39,7 @@\n public final class GradleCompatibilitySuite extends Suite {\n \n \tprivate static final List<String> GRADLE_VERSIONS = Arrays.asList(\"default\", \"4.1\",\n-\t\t\t\"4.2\", \"4.3\", \"4.4.1\", \"4.5\");\n+\t\t\t\"4.2\", \"4.3\", \"4.4.1\", \"4.5.1\");\n \n \tpublic GradleCompatibilitySuite(Class<?> clazz) throws InitializationError {\n \t\tsuper(clazz, createRunners(clazz));",
    "output": "Test the Gradle plugin against Gradle 4.5.1"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/servlet/UserDetailsServiceAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/servlet/UserDetailsServiceAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/servlet/UserDetailsServiceAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/servlet/UserDetailsServiceAutoConfiguration.java\n@@ -75,7 +75,7 @@ public InMemoryUserDetailsManager inMemoryUserDetailsManager(\n \t\t\t\t.roles(StringUtils.toStringArray(roles)).build());\n \t}\n \n-\tpublic String getOrDeducePassword(SecurityProperties.User user,\n+\tprivate String getOrDeducePassword(SecurityProperties.User user,\n \t\t\tPasswordEncoder encoder) {\n \t\tString password = user.getPassword();\n \t\tif (user.isPasswordGenerated()) {",
    "output": "Make UserDetailsServiceAutoConfiguration.getOrDeducePassword() private"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/servlet/UserDetailsServiceAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/servlet/UserDetailsServiceAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/servlet/UserDetailsServiceAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/servlet/UserDetailsServiceAutoConfiguration.java\n@@ -75,7 +75,7 @@ public InMemoryUserDetailsManager inMemoryUserDetailsManager(\n \t\t\t\t.roles(StringUtils.toStringArray(roles)).build());\n \t}\n \n-\tpublic String getOrDeducePassword(SecurityProperties.User user,\n+\tprivate String getOrDeducePassword(SecurityProperties.User user,\n \t\t\tPasswordEncoder encoder) {\n \t\tString password = user.getPassword();\n \t\tif (user.isPasswordGenerated()) {",
    "output": "Make UserDetailsServiceAutoConfiguration.getOrDeducePassword() private"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/shell/ShellPrompts.java b/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/shell/ShellPrompts.java\n--- a/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/shell/ShellPrompts.java\n+++ b/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/shell/ShellPrompts.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2017 the original author or authors.\n+ * Copyright 2012-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -16,7 +16,8 @@\n \n package org.springframework.boot.cli.command.shell;\n \n-import java.util.Stack;\n+import java.util.ArrayDeque;\n+import java.util.Deque;\n \n /**\n  * Abstraction to manage a stack of prompts.\n@@ -27,7 +28,7 @@ public class ShellPrompts {\n \n \tprivate static final String DEFAULT_PROMPT = \"$ \";\n \n-\tprivate final Stack<String> prompts = new Stack<>();\n+\tprivate final Deque<String> prompts = new ArrayDeque<>();\n \n \t/**\n \t * Push a new prompt to be used by the shell.",
    "output": "Polish\nReplace class \"Stack\" by more modern \"Deque\""
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/embedded/JettyWebServerFactoryCustomizerTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/embedded/JettyWebServerFactoryCustomizerTests.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/embedded/JettyWebServerFactoryCustomizerTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/embedded/JettyWebServerFactoryCustomizerTests.java\n@@ -85,7 +85,8 @@ public void accessLogCanBeCustomized() throws IOException {\n \t\tFile logFile = File.createTempFile(\"jetty_log\", \".log\");\n \t\tString timezone = TimeZone.getDefault().getID();\n \t\tbind(\"server.jetty.accesslog.enabled=true\",\n-\t\t\t\t\"server.jetty.accesslog.filename=\" + logFile.getAbsolutePath(),\n+\t\t\t\t\"server.jetty.accesslog.filename=\"\n+\t\t\t\t\t\t+ logFile.getAbsolutePath().replace(\"\\\\\", \"\\\\\\\\\"),\n \t\t\t\t\"server.jetty.accesslog.file-date-format=yyyy-MM-dd\",\n \t\t\t\t\"server.jetty.accesslog.retention-period=42\",\n \t\t\t\t\"server.jetty.accesslog.append=true\",",
    "output": "Escape backslashes so they are preserved during Properties parsing"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/annotation/EndpointDiscoverer.java b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/annotation/EndpointDiscoverer.java\n--- a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/annotation/EndpointDiscoverer.java\n+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/annotation/EndpointDiscoverer.java\n@@ -26,7 +26,6 @@\n import java.util.Objects;\n import java.util.Set;\n import java.util.concurrent.ConcurrentHashMap;\n-import java.util.function.Function;\n import java.util.function.Supplier;\n import java.util.stream.Collectors;\n \n@@ -317,10 +316,6 @@ private boolean isFilterMatch(EndpointFilter<E> filter, E endpoint) {\n \t\t\t\t.get();\n \t}\n \n-\tpublic <A, B> void doIt(Function<A, B> x) {\n-\n-\t}\n-\n \tprivate E getFilterEndpoint(EndpointBean endpointBean) {\n \t\tE endpoint = this.filterEndpoints.get(endpointBean);\n \t\tif (endpoint == null) {",
    "output": "Remove an unnecessary method in EndpointDiscoverer"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/annotation/EndpointDiscoverer.java b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/annotation/EndpointDiscoverer.java\n--- a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/annotation/EndpointDiscoverer.java\n+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/annotation/EndpointDiscoverer.java\n@@ -26,7 +26,6 @@\n import java.util.Objects;\n import java.util.Set;\n import java.util.concurrent.ConcurrentHashMap;\n-import java.util.function.Function;\n import java.util.function.Supplier;\n import java.util.stream.Collectors;\n \n@@ -317,10 +316,6 @@ private boolean isFilterMatch(EndpointFilter<E> filter, E endpoint) {\n \t\t\t\t.get();\n \t}\n \n-\tpublic <A, B> void doIt(Function<A, B> x) {\n-\n-\t}\n-\n \tprivate E getFilterEndpoint(EndpointBean endpointBean) {\n \t\tE endpoint = this.filterEndpoints.get(endpointBean);\n \t\tif (endpoint == null) {",
    "output": "Remove an unnecessary method in EndpointDiscoverer"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/servlet/PathRequestTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/servlet/PathRequestTests.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/servlet/PathRequestTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/servlet/PathRequestTests.java\n@@ -21,6 +21,7 @@\n import org.assertj.core.api.AssertDelegateTarget;\n import org.junit.Test;\n \n+import org.springframework.boot.autoconfigure.h2.H2ConsoleProperties;\n import org.springframework.boot.autoconfigure.web.ServerProperties;\n import org.springframework.mock.web.MockHttpServletRequest;\n import org.springframework.mock.web.MockServletContext;\n@@ -54,6 +55,7 @@ public void toH2ConsoleShouldMatchH2ConsolePath() {\n \tprivate RequestMatcherAssert assertMatcher(RequestMatcher matcher) {\n \t\tStaticWebApplicationContext context = new StaticWebApplicationContext();\n \t\tcontext.registerBean(ServerProperties.class);\n+\t\tcontext.registerBean(H2ConsoleProperties.class);\n \t\treturn assertThat(new RequestMatcherAssert(context, matcher));\n \t}\n ",
    "output": "Fix failing PathRequestTests\nFix test failing due to commit d66496787d."
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/jdbc/DataSourcePoolMetricsAutoConfigurationTests.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/jdbc/DataSourcePoolMetricsAutoConfigurationTests.java\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/jdbc/DataSourcePoolMetricsAutoConfigurationTests.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/metrics/jdbc/DataSourcePoolMetricsAutoConfigurationTests.java\n@@ -114,13 +114,13 @@ public void autoConfiguredHikariDataSourceIsInstrumentedWhenUsingDataSourceIniti\n \t}\n \n \t@Test\n-\tpublic void failureToInstrumentHikariDataSourceIsTolerated() {\n+\tpublic void hikariCanBeInstrumentedAfterThePoolHasBeenSealed() {\n \t\tthis.contextRunner.withUserConfiguration(HikariSealingConfiguration.class)\n \t\t\t\t.run((context) -> {\n \t\t\t\t\tassertThat(context).hasNotFailed();\n \t\t\t\t\tcontext.getBean(DataSource.class).getConnection();\n \t\t\t\t\tMeterRegistry registry = context.getBean(MeterRegistry.class);\n-\t\t\t\t\tassertThat(registry.find(\"hikaricp.connections\").meter()).isNull();\n+\t\t\t\t\tassertThat(registry.find(\"hikaricp.connections\").meter()).isNotNull();\n \t\t\t\t});\n \t}\n ",
    "output": "Upgrade to Hikaricp 2.7.8"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/bind/RelaxedConversionServiceTests.java b/spring-boot/src/test/java/org/springframework/boot/bind/RelaxedConversionServiceTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/bind/RelaxedConversionServiceTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/bind/RelaxedConversionServiceTests.java\n@@ -36,10 +36,16 @@ public class RelaxedConversionServiceTests {\n \n \t@Test\n \tpublic void conversionServiceShouldAlwaysUseLocaleEnglish() {\n-\t\tLocale.setDefault(new Locale(\"tr\"));\n-\t\tTestEnum result = this.conversionService\n-\t\t\t\t.convert(\"accept-case-insensitive-properties\", TestEnum.class);\n-\t\tassertThat(result.equals(TestEnum.ACCEPT_CASE_INSENSITIVE_PROPERTIES));\n+\t\tLocale defaultLocale = Locale.getDefault();\n+\t\ttry {\n+\t\t\tLocale.setDefault(new Locale(\"tr\"));\n+\t\t\tTestEnum result = this.conversionService\n+\t\t\t\t\t.convert(\"accept-case-insensitive-properties\", TestEnum.class);\n+\t\t\tassertThat(result.equals(TestEnum.ACCEPT_CASE_INSENSITIVE_PROPERTIES));\n+\t\t}\n+\t\tfinally {\n+\t\t\tLocale.setDefault(defaultLocale);\n+\t\t}\n \t}\n \n \tenum TestEnum {",
    "output": "Reset default local after test completes"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/SecurityContext.java b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/SecurityContext.java\n--- a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/SecurityContext.java\n+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/SecurityContext.java\n@@ -29,7 +29,7 @@ public interface SecurityContext {\n \t/**\n \t * Empty security context.\n \t */\n-\tstatic SecurityContext NONE = new SecurityContext() {\n+\tSecurityContext NONE = new SecurityContext() {\n \n \t\t@Override\n \t\tpublic Principal getPrincipal() {",
    "output": "Fix checkstyle violation"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/SecurityContext.java b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/SecurityContext.java\n--- a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/SecurityContext.java\n+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/SecurityContext.java\n@@ -29,7 +29,7 @@ public interface SecurityContext {\n \t/**\n \t * Empty security context.\n \t */\n-\tpublic static SecurityContext NONE = new SecurityContext() {\n+\tstatic SecurityContext NONE = new SecurityContext() {\n \n \t\t@Override\n \t\tpublic Principal getPrincipal() {",
    "output": "Fix checkstyle violation"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/statsd/StatsdMetricsExportAutoConfiguration.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/statsd/StatsdMetricsExportAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/statsd/StatsdMetricsExportAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/statsd/StatsdMetricsExportAutoConfiguration.java\n@@ -20,6 +20,7 @@\n import io.micrometer.core.instrument.util.HierarchicalNameMapper;\n import io.micrometer.statsd.StatsdConfig;\n import io.micrometer.statsd.StatsdMeterRegistry;\n+import io.micrometer.statsd.StatsdMetrics;\n \n import org.springframework.boot.actuate.autoconfigure.metrics.CompositeMeterRegistryAutoConfiguration;\n import org.springframework.boot.actuate.autoconfigure.metrics.MetricsAutoConfiguration;\n@@ -70,4 +71,8 @@ public HierarchicalNameMapper hierarchicalNameMapper() {\n \t\treturn HierarchicalNameMapper.DEFAULT;\n \t}\n \n+\t@Bean\n+\tpublic StatsdMetrics statsdMetrics() {\n+\t\treturn new StatsdMetrics();\n+\t}\n }",
    "output": "Bind StatsD queue gauges"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/simple/SimpleMetricsExportAutoConfiguration.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/simple/SimpleMetricsExportAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/simple/SimpleMetricsExportAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/simple/SimpleMetricsExportAutoConfiguration.java\n@@ -47,7 +47,7 @@\n @ConditionalOnBean(Clock.class)\n @EnableConfigurationProperties(SimpleProperties.class)\n @ConditionalOnMissingBean(MeterRegistry.class)\n-@ConditionalOnProperty(name = \"management.metrics.export.simple.enabled\", havingValue = \"true\", matchIfMissing = true)\n+@ConditionalOnProperty(prefix = \"management.metrics.export.simple\", name = \"enabled\", havingValue = \"true\", matchIfMissing = true)\n public class SimpleMetricsExportAutoConfiguration {\n \n \t@Bean",
    "output": "Restore prefix in ConditionalOnProperty"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/signalfx/SignalFxProperties.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/signalfx/SignalFxProperties.java\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/signalfx/SignalFxProperties.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/signalfx/SignalFxProperties.java\n@@ -40,7 +40,8 @@ public class SignalFxProperties extends StepRegistryProperties {\n \tprivate String uri;\n \n \t/**\n-\t * Uniquely identifies the app instance that is publishing metrics to SignalFx. Defaults to the local host name.\n+\t * Uniquely identifies the app instance that is publishing metrics to SignalFx.\n+\t * Defaults to the local host name.\n \t */\n \tprivate String source;\n \n@@ -61,7 +62,7 @@ public void setUri(String uri) {\n \t}\n \n \tpublic String getSource() {\n-\t\treturn source;\n+\t\treturn this.source;\n \t}\n \n \tpublic void setSource(String source) {",
    "output": "Add SignalFxConfig source property"
  },
  {
    "input": "diff --git a/spring-boot-integration-tests/spring-boot-security-tests/spring-boot-security-test-web-helloworld/src/test/java/sample/HelloWebSecurityApplicationTests.java b/spring-boot-integration-tests/spring-boot-security-tests/spring-boot-security-test-web-helloworld/src/test/java/sample/HelloWebSecurityApplicationTests.java\n--- a/spring-boot-integration-tests/spring-boot-security-tests/spring-boot-security-test-web-helloworld/src/test/java/sample/HelloWebSecurityApplicationTests.java\n+++ b/spring-boot-integration-tests/spring-boot-security-tests/spring-boot-security-test-web-helloworld/src/test/java/sample/HelloWebSecurityApplicationTests.java\n@@ -56,13 +56,15 @@ public void setup() {\n \n \t@Test\n \tpublic void requiresAuthentication() throws Exception {\n+\t\tthis.request.setMethod(\"GET\");\n \t\tthis.springSecurityFilterChain.doFilter(this.request, this.response, this.chain);\n \t\tassertThat(this.response.getStatus())\n \t\t\t\t.isEqualTo(HttpServletResponse.SC_UNAUTHORIZED);\n \t}\n \n \t@Test\n \tpublic void userAuthenticates() throws Exception {\n+\t\tthis.request.setMethod(\"GET\");\n \t\tthis.request.addHeader(\"Authorization\",\n \t\t\t\t\"Basic \" + new String(Base64.encode(\"user:password\".getBytes(\"UTF-8\"))));\n ",
    "output": "Fix tests to use GET to bypass CsrfFilter"
  },
  {
    "input": "diff --git a/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java b/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java\n--- a/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java\n+++ b/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java\n@@ -223,7 +223,6 @@ public void launchWithRelativePidFolder() throws Exception {\n \t@Test\n \tpublic void pidFolderOwnership() throws Exception {\n \t\tString output = doTest(\"pid-folder-ownership.sh\");\n-\t\tSystem.err.println(output);\n \t\tassertThat(output).contains(\"phil root\");\n \t}\n \n@@ -239,6 +238,18 @@ public void logFileOwnership() throws Exception {\n \t\tassertThat(output).contains(\"phil root\");\n \t}\n \n+\t@Test\n+\tpublic void logFileOwnershipIsChangedWhenCreated() throws Exception {\n+\t\tString output = doTest(\"log-file-ownership-is-changed-when-created.sh\");\n+\t\tassertThat(output).contains(\"andy root\");\n+\t}\n+\n+\t@Test\n+\tpublic void logFileOwnershipIsUnchangedWhenExists() throws Exception {\n+\t\tString output = doTest(\"log-file-ownership-is-unchanged-when-exists.sh\");\n+\t\tassertThat(output).contains(\"root root\");\n+\t}\n+\n \t@Test\n \tpublic void launchWithRelativeLogFolder() throws Exception {\n \t\tString output = doTest(\"launch-with-relative-log-folder.sh\");",
    "output": "Change ownership when log file is created by launch script"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-actuator/src/test/java/sample/actuator/SampleActuatorApplicationTests.java b/spring-boot-samples/spring-boot-sample-actuator/src/test/java/sample/actuator/SampleActuatorApplicationTests.java\n--- a/spring-boot-samples/spring-boot-sample-actuator/src/test/java/sample/actuator/SampleActuatorApplicationTests.java\n+++ b/spring-boot-samples/spring-boot-sample-actuator/src/test/java/sample/actuator/SampleActuatorApplicationTests.java\n@@ -69,14 +69,14 @@ public void testHomeIsSecure() {\n \t@Test\n \tpublic void testMetricsIsSecure() {\n \t\t@SuppressWarnings(\"rawtypes\")\n-\t\tResponseEntity<Map> entity = this.restTemplate.getForEntity(\"/metrics\",\n+\t\tResponseEntity<Map> entity = this.restTemplate.getForEntity(\"/actuator/metrics\",\n \t\t\t\tMap.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED);\n-\t\tentity = this.restTemplate.getForEntity(\"/metrics/\", Map.class);\n+\t\tentity = this.restTemplate.getForEntity(\"/actuator/metrics/\", Map.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED);\n-\t\tentity = this.restTemplate.getForEntity(\"/metrics/foo\", Map.class);\n+\t\tentity = this.restTemplate.getForEntity(\"/actuator/metrics/foo\", Map.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED);\n-\t\tentity = this.restTemplate.getForEntity(\"/metrics.json\", Map.class);\n+\t\tentity = this.restTemplate.getForEntity(\"/actuator/metrics.json\", Map.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED);\n \t}\n ",
    "output": "Fix path in tests"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/MongoReactiveDataAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/MongoReactiveDataAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/MongoReactiveDataAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/mongo/MongoReactiveDataAutoConfiguration.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2017 the original author or authors.\n+ * Copyright 2012-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -48,7 +48,7 @@\n @Configuration\n @ConditionalOnClass({ MongoClient.class, ReactiveMongoTemplate.class })\n @EnableConfigurationProperties(MongoProperties.class)\n-@AutoConfigureAfter(MongoReactiveAutoConfiguration.class)\n+@AutoConfigureAfter({ MongoReactiveAutoConfiguration.class, MongoDataAutoConfiguration.class })\n public class MongoReactiveDataAutoConfiguration {\n \n \tprivate final MongoProperties properties;",
    "output": "Make an explicit link to MongoDataAutoConfiguration"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/jdbc/DatabaseDriver.java b/spring-boot/src/main/java/org/springframework/boot/jdbc/DatabaseDriver.java\n--- a/spring-boot/src/main/java/org/springframework/boot/jdbc/DatabaseDriver.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/jdbc/DatabaseDriver.java\n@@ -67,7 +67,7 @@ public enum DatabaseDriver {\n \t * MySQL.\n \t */\n \tMYSQL(\"MySQL\", \"com.mysql.jdbc.Driver\",\n-\t\t\t\"com.mysql.jdbc.jdbc2.optional.MysqlXADataSource\", \"SELECT 1\"),\n+\t\t\t\"com.mysql.jdbc.jdbc2.optional.MysqlXADataSource\", \"/* ping */ SELECT 1\"),\n \n \t/**\n \t * Maria DB.",
    "output": "Upgrade MySQL validation query to use lightweight ping"
  },
  {
    "input": "diff --git a/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java b/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java\n--- a/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java\n+++ b/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java\n@@ -220,6 +220,25 @@ public void launchWithRelativePidFolder() throws Exception {\n \t\t\t\tcoloredString(AnsiColor.GREEN, \"Stopped [\" + extractPid(output) + \"]\"));\n \t}\n \n+\t@Test\n+\tpublic void pidFolderOwnership() throws Exception {\n+\t\tString output = doTest(\"pid-folder-ownership.sh\");\n+\t\tSystem.err.println(output);\n+\t\tassertThat(output).contains(\"phil root\");\n+\t}\n+\n+\t@Test\n+\tpublic void pidFileOwnership() throws Exception {\n+\t\tString output = doTest(\"pid-file-ownership.sh\");\n+\t\tassertThat(output).contains(\"phil root\");\n+\t}\n+\n+\t@Test\n+\tpublic void logFileOwnership() throws Exception {\n+\t\tString output = doTest(\"log-file-ownership.sh\");\n+\t\tassertThat(output).contains(\"phil root\");\n+\t}\n+\n \t@Test\n \tpublic void launchWithRelativeLogFolder() throws Exception {\n \t\tString output = doTest(\"launch-with-relative-log-folder.sh\");",
    "output": "Protect against symlink attacks\nUpdate embedded launch script to no longer change ownership of files\nor folders that already exist."
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/context/runner/AbstractApplicationContextRunner.java b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/context/runner/AbstractApplicationContextRunner.java\n--- a/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/context/runner/AbstractApplicationContextRunner.java\n+++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/context/runner/AbstractApplicationContextRunner.java\n@@ -95,7 +95,7 @@\n  * @see ReactiveWebApplicationContextRunner\n  * @see ApplicationContextAssert\n  */\n-abstract class AbstractApplicationContextRunner<SELF extends AbstractApplicationContextRunner<SELF, C, A>, C extends ConfigurableApplicationContext, A extends ApplicationContextAssertProvider<C>> {\n+public abstract class AbstractApplicationContextRunner<SELF extends AbstractApplicationContextRunner<SELF, C, A>, C extends ConfigurableApplicationContext, A extends ApplicationContextAssertProvider<C>> {\n \n \tprivate final Supplier<C> contextFactory;\n ",
    "output": "Make AbstractApplicationContextRunner public"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/jdbc/DataSourceHealthIndicator.java b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/jdbc/DataSourceHealthIndicator.java\n--- a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/jdbc/DataSourceHealthIndicator.java\n+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/jdbc/DataSourceHealthIndicator.java\n@@ -86,7 +86,7 @@ public DataSourceHealthIndicator(DataSource dataSource, String query) {\n \t\tsuper(\"DataSource health check failed\");\n \t\tthis.dataSource = dataSource;\n \t\tthis.query = query;\n-\t\tthis.jdbcTemplate = new JdbcTemplate(dataSource);\n+\t\tthis.jdbcTemplate = (dataSource == null ? null : new JdbcTemplate(dataSource));\n \t}\n \n \t@Override",
    "output": "Fix DataSourceHealthIndicator test failure"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/invoke/reflect/ReflectiveOperationInvoker.java b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/invoke/reflect/ReflectiveOperationInvoker.java\n--- a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/invoke/reflect/ReflectiveOperationInvoker.java\n+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/invoke/reflect/ReflectiveOperationInvoker.java\n@@ -86,7 +86,7 @@ private void validateRequiredParameters(Map<String, Object> arguments) {\n \tprivate boolean isMissing(Map<String, Object> arguments,\n \t\t\tOperationParameter parameter) {\n \t\tif (!parameter.isMandatory()) {\n-\t\t\treturn true;\n+\t\t\treturn false;\n \t\t}\n \t\treturn arguments.get(parameter.getName()) == null;\n \t}",
    "output": "Third attempt to fix polish commit"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/invoke/convert/ConversionServiceParameterValueMapperTests.java b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/invoke/convert/ConversionServiceParameterValueMapperTests.java\n--- a/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/invoke/convert/ConversionServiceParameterValueMapperTests.java\n+++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/invoke/convert/ConversionServiceParameterValueMapperTests.java\n@@ -114,8 +114,8 @@ public Class<?> getType() {\n \t\t}\n \n \t\t@Override\n-\t\tpublic boolean isNullable() {\n-\t\t\treturn true;\n+\t\tpublic boolean isMandatory() {\n+\t\t\treturn false;\n \t\t}\n \n \t}",
    "output": "Fix compile error due to previous polish"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfigurationTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfigurationTests.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfigurationTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfigurationTests.java\n@@ -100,12 +100,6 @@ public void doubleModuleRegistration() {\n \t\t\t\t});\n \t}\n \n-\t/*\n-\t * ObjectMapper does not contain method to get the date format of the mapper. See\n-\t * https://github.com/FasterXML/jackson-databind/issues/559 If such a method will be\n-\t * provided below tests can be simplified.\n-\t */\n-\n \t@Test\n \tpublic void noCustomDateFormat() {\n \t\tthis.contextRunner.run((context) -> {",
    "output": "Remove obsolete comment"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfigurationTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfigurationTests.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfigurationTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfigurationTests.java\n@@ -100,12 +100,6 @@ public void doubleModuleRegistration() {\n \t\t\t\t});\n \t}\n \n-\t/*\n-\t * ObjectMapper does not contain method to get the date format of the mapper. See\n-\t * https://github.com/FasterXML/jackson-databind/issues/559 If such a method will be\n-\t * provided below tests can be simplified.\n-\t */\n-\n \t@Test\n \tpublic void noCustomDateFormat() {\n \t\tthis.contextRunner.run((context) -> {",
    "output": "Remove obsolete comment"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyServletWebServerFactory.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyServletWebServerFactory.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyServletWebServerFactory.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyServletWebServerFactory.java\n@@ -273,8 +273,6 @@ private void configureDocumentRoot(WebAppContext handler) {\n \t\t\t\t\troot == null ? rootResource : new LoaderHidingResource(rootResource));\n \t\t\tfor (URL resourceJarUrl : this.getUrlsOfJarsWithMetaInfResources()) {\n \t\t\t\tResource resource = createResource(resourceJarUrl);\n-\t\t\t\t// Jetty 9.2 and earlier do not support nested jars. See\n-\t\t\t\t// https://github.com/eclipse/jetty.project/issues/518\n \t\t\t\tif (resource.exists() && resource.isDirectory()) {\n \t\t\t\t\tresources.add(resource);\n \t\t\t\t}",
    "output": "Remove remaining references to no longer supported container versions"
  },
  {
    "input": "diff --git a/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java b/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java\n--- a/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java\n+++ b/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java\n@@ -220,6 +220,25 @@ public void launchWithRelativePidFolder() throws Exception {\n \t\t\t\tcoloredString(AnsiColor.GREEN, \"Stopped [\" + extractPid(output) + \"]\"));\n \t}\n \n+\t@Test\n+\tpublic void pidFolderOwnership() throws Exception {\n+\t\tString output = doTest(\"pid-folder-ownership.sh\");\n+\t\tSystem.err.println(output);\n+\t\tassertThat(output).contains(\"phil root\");\n+\t}\n+\n+\t@Test\n+\tpublic void pidFileOwnership() throws Exception {\n+\t\tString output = doTest(\"pid-file-ownership.sh\");\n+\t\tassertThat(output).contains(\"phil root\");\n+\t}\n+\n+\t@Test\n+\tpublic void logFileOwnership() throws Exception {\n+\t\tString output = doTest(\"log-file-ownership.sh\");\n+\t\tassertThat(output).contains(\"phil root\");\n+\t}\n+\n \t@Test\n \tpublic void launchWithRelativeLogFolder() throws Exception {\n \t\tString output = doTest(\"launch-with-relative-log-folder.sh\");",
    "output": "Protect against symlink attacks\nUpdate embedded launch script to no longer change ownership of files\nor folders that already exist."
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/TypeUtils.java b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/TypeUtils.java\n--- a/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/TypeUtils.java\n+++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/TypeUtils.java\n@@ -187,12 +187,18 @@ public String visitDeclared(DeclaredType type, Void none) {\n \t\t\t\treturn getQualifiedName(enclosingElement) + \"$\"\n \t\t\t\t\t\t+ type.asElement().getSimpleName().toString();\n \t\t\t}\n-\t\t\tStringBuilder name = new StringBuilder();\n-\t\t\tname.append(getQualifiedName(type.asElement()));\n-\t\t\tif (!type.getTypeArguments().isEmpty()) {\n-\t\t\t\tappendTypeArguments(type, name);\n+\t\t\tString qualifiedName = getQualifiedName(type.asElement());\n+\t\t\tif  (type.getTypeArguments().isEmpty()) {\n+\t\t\t\treturn qualifiedName;\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\tStringBuilder name = new StringBuilder();\n+\t\t\t\tname.append(qualifiedName);\n+\t\t\t\tif (!type.getTypeArguments().isEmpty()) {\n+\t\t\t\t\tappendTypeArguments(type, name);\n+\t\t\t\t}\n+\t\t\t\treturn name.toString();\n \t\t\t}\n-\t\t\treturn name.toString();\n \t\t}\n \n \t\tprivate void appendTypeArguments(DeclaredType type, StringBuilder name) {",
    "output": "Reduce StringBuilder creation in TypeExtractor.visitDeclared()"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-properties-migrator/src/main/java/org/springframework/boot/context/properties/migrator/PropertiesMigrationReport.java b/spring-boot-project/spring-boot-properties-migrator/src/main/java/org/springframework/boot/context/properties/migrator/PropertiesMigrationReport.java\n--- a/spring-boot-project/spring-boot-properties-migrator/src/main/java/org/springframework/boot/context/properties/migrator/PropertiesMigrationReport.java\n+++ b/spring-boot-project/spring-boot-properties-migrator/src/main/java/org/springframework/boot/context/properties/migrator/PropertiesMigrationReport.java\n@@ -86,14 +86,14 @@ public String getErrorReport() {\n \tprivate String determineReason(ConfigurationMetadataProperty metadata) {\n \t\tDeprecation deprecation = metadata.getDeprecation();\n \t\tif (StringUtils.hasText(deprecation.getShortReason())) {\n-\t\t\treturn deprecation.getShortReason();\n+\t\t\treturn \"Reason: \" + deprecation.getShortReason();\n \t\t}\n \t\tif (StringUtils.hasText(deprecation.getReplacement())) {\n \t\t\treturn String.format(\n \t\t\t\t\t\"Reason: Replacement key '%s' uses an incompatible \" + \"target type\",\n \t\t\t\t\tdeprecation.getReplacement());\n \t\t}\n-\t\treturn \"none\";\n+\t\treturn \"Reason: none\";\n \t}\n \n \tprivate Map<String, List<PropertyMigration>> getContent(",
    "output": "Restore \"Reason: \" prefix"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/client/MetricsClientHttpRequestInterceptor.java b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/client/MetricsClientHttpRequestInterceptor.java\n--- a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/client/MetricsClientHttpRequestInterceptor.java\n+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/client/MetricsClientHttpRequestInterceptor.java\n@@ -105,7 +105,7 @@ private Timer.Builder getTimeBuilder(HttpRequest request,\n \t}\n \n \tprivate String ensureLeadingSlash(String url) {\n-\t\treturn (url.startsWith(\"/\") ? url : \"/\" + url);\n+\t\treturn (url == null || url.startsWith(\"/\") ? url : \"/\" + url);\n \t}\n \n }",
    "output": "Fix NPE when normalizing client tag URIs"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/EndpointServlet.java b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/EndpointServlet.java\n--- a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/EndpointServlet.java\n+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/web/EndpointServlet.java\n@@ -61,9 +61,9 @@ public EndpointServlet withInitParameter(String name, String value) {\n \n \tpublic EndpointServlet withInitParameters(Map<String, String> initParameters) {\n \t\tAssert.notNull(initParameters, \"InitParameters must not be null\");\n-\t\tboolean hasEmptyKey = initParameters.values().stream()\n-\t\t\t\t.anyMatch((key) -> !StringUtils.hasText(key));\n-\t\tAssert.isTrue(!hasEmptyKey, \"InitParameters must not contain empty keys\");\n+\t\tboolean hasEmptyName = initParameters.keySet().stream()\n+\t\t\t\t.anyMatch((name) -> !StringUtils.hasText(name));\n+\t\tAssert.isTrue(!hasEmptyName, \"InitParameters must not contain empty names\");\n \t\tMap<String, String> mergedInitParameters = new LinkedHashMap<>(\n \t\t\t\tthis.initParameters);\n \t\tmergedInitParameters.putAll(initParameters);",
    "output": "Fix to assert parameter names in EndpointServlet.withInitParameters()"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n@@ -39,7 +39,7 @@\n public final class GradleCompatibilitySuite extends Suite {\n \n \tprivate static final List<String> GRADLE_VERSIONS = Arrays.asList(\"default\", \"4.1\",\n-\t\t\t\"4.2\", \"4.3\", \"4.4.1\");\n+\t\t\t\"4.2\", \"4.3\", \"4.4.1\", \"4.5\");\n \n \tpublic GradleCompatibilitySuite(Class<?> clazz) throws InitializationError {\n \t\tsuper(clazz, createRunners(clazz));",
    "output": "Test the Gradle plugin against Gradle 4.5"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/ImageBanner.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/ImageBanner.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/ImageBanner.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/ImageBanner.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2017 the original author or authors.\n+ * Copyright 2012-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -253,6 +253,7 @@ private void sleep(int delay) {\n \t\t\tThread.sleep(delay);\n \t\t}\n \t\tcatch (InterruptedException ex) {\n+\t\t\tThread.currentThread().interrupt();\n \t\t}\n \t}\n ",
    "output": "Mark thread as interrupted after catching InterruptedException\nMark thread as interrupted after catching InterruptedException"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/ImageBanner.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/ImageBanner.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/ImageBanner.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/ImageBanner.java\n@@ -253,6 +253,7 @@ private void sleep(int delay) {\n \t\t\tThread.sleep(delay);\n \t\t}\n \t\tcatch (InterruptedException ex) {\n+\t\t\tThread.currentThread().interrupt();\n \t\t}\n \t}\n ",
    "output": "Mark thread as interrupted after catching InterruptedException"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/web/trace/HttpTraceEndpointTests.java b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/web/trace/HttpTraceEndpointTests.java\n--- a/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/web/trace/HttpTraceEndpointTests.java\n+++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/web/trace/HttpTraceEndpointTests.java\n@@ -30,7 +30,7 @@\n  * @author Phillip Webb\n  * @author Andy Wilkinson\n  */\n-public class TraceEndpointTests {\n+public class HttpTraceEndpointTests {\n \n \t@Test\n \tpublic void trace() {",
    "output": "Align missed bits from trace endpoint changes"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/web/trace/HttpTraceEndpointTests.java b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/web/trace/HttpTraceEndpointTests.java\n--- a/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/web/trace/HttpTraceEndpointTests.java\n+++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/web/trace/HttpTraceEndpointTests.java\n@@ -30,7 +30,7 @@\n  * @author Phillip Webb\n  * @author Andy Wilkinson\n  */\n-public class TraceEndpointTests {\n+public class HttpTraceEndpointTests {\n \n \t@Test\n \tpublic void trace() {",
    "output": "Align missed bits from trace endpoint changes"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/ExtendedGroovyClassLoader.java b/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/ExtendedGroovyClassLoader.java\n--- a/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/ExtendedGroovyClassLoader.java\n+++ b/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/ExtendedGroovyClassLoader.java\n@@ -176,7 +176,7 @@ private static class DefaultScopeParentClassLoader extends ClassLoader {\n \t\tDefaultScopeParentClassLoader(ClassLoader parent) {\n \t\t\tsuper(parent);\n \t\t\tthis.groovyOnlyClassLoader = new URLClassLoader(getGroovyJars(parent),\n-\t\t\t\t\tparent.getParent().getParent());\n+\t\t\t\t\tgetClass().getClassLoader().getParent());\n \t\t}\n \n \t\tprivate URL[] getGroovyJars(ClassLoader parent) {",
    "output": "Determine parent ClassLoader in CLI in a more robust manner"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/Slf4JLoggingSystem.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/Slf4JLoggingSystem.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/Slf4JLoggingSystem.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/logging/Slf4JLoggingSystem.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2017 the original author or authors.\n+ * Copyright 2012-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -74,13 +74,7 @@ protected final boolean isBridgeHandlerAvailable() {\n \tprivate void removeJdkLoggingBridgeHandler() {\n \t\ttry {\n \t\t\tif (isBridgeHandlerAvailable()) {\n-\t\t\t\ttry {\n-\t\t\t\t\tSLF4JBridgeHandler.removeHandlersForRootLogger();\n-\t\t\t\t}\n-\t\t\t\tcatch (NoSuchMethodError ex) {\n-\t\t\t\t\t// Method missing in older versions of SLF4J like in JBoss AS 7.1\n-\t\t\t\t\tSLF4JBridgeHandler.uninstall();\n-\t\t\t\t}\n+\t\t\t\tSLF4JBridgeHandler.uninstall();\n \t\t\t}\n \t\t}\n \t\tcatch (Throwable ex) {",
    "output": "Use uninstall to remove SL4FJBridgeHandler"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/ExtendedGroovyClassLoader.java b/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/ExtendedGroovyClassLoader.java\n--- a/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/ExtendedGroovyClassLoader.java\n+++ b/spring-boot-project/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/ExtendedGroovyClassLoader.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2017 the original author or authors.\n+ * Copyright 2012-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -176,7 +176,7 @@ private static class DefaultScopeParentClassLoader extends ClassLoader {\n \t\tDefaultScopeParentClassLoader(ClassLoader parent) {\n \t\t\tsuper(parent);\n \t\t\tthis.groovyOnlyClassLoader = new URLClassLoader(getGroovyJars(parent),\n-\t\t\t\t\tparent.getParent());\n+\t\t\t\t\tparent.getParent().getParent());\n \t\t}\n \n \t\tprivate URL[] getGroovyJars(ClassLoader parent) {",
    "output": "Downgrade to Groovy 2.4.13\nThere's an extra ClassLoader in the hierarchy of the TCCL in Groovy\n2.4 vs Groovy 2.5 so we require an extra getParent() call to avoid\nbeing able to load classes that are visible to the launched URL\nclass loader."
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/MetricsWebFilter.java b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/MetricsWebFilter.java\n--- a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/MetricsWebFilter.java\n+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/reactive/server/MetricsWebFilter.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2017 the original author or authors.\n+ * Copyright 2012-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -23,6 +23,8 @@\n import org.reactivestreams.Publisher;\n import reactor.core.publisher.Mono;\n \n+import org.springframework.core.Ordered;\n+import org.springframework.core.annotation.Order;\n import org.springframework.web.server.ServerWebExchange;\n import org.springframework.web.server.WebFilter;\n import org.springframework.web.server.WebFilterChain;\n@@ -34,6 +36,7 @@\n  * @author Jon Schneider\n  * @since 2.0.0\n  */\n+@Order(Ordered.HIGHEST_PRECEDENCE + 1)\n public class MetricsWebFilter implements WebFilter {\n \n \tprivate final MeterRegistry registry;",
    "output": "Explicitly configure and document WebFilter orderings"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-test-support/src/main/java/org/springframework/boot/testsupport/testcontainers/CassandraContainer.java b/spring-boot-project/spring-boot-tools/spring-boot-test-support/src/main/java/org/springframework/boot/testsupport/testcontainers/CassandraContainer.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-test-support/src/main/java/org/springframework/boot/testsupport/testcontainers/CassandraContainer.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-test-support/src/main/java/org/springframework/boot/testsupport/testcontainers/CassandraContainer.java\n@@ -37,8 +37,8 @@ public class CassandraContainer extends Container {\n \tprivate static final int PORT = 9042;\n \n \tpublic CassandraContainer() {\n-\t\tsuper(\"cassandra:3.11.1\", PORT,\n-\t\t\t\t(container) -> container.waitingFor(new WaitStrategy()));\n+\t\tsuper(\"cassandra:3.11.1\", PORT, (container) -> container\n+\t\t\t\t.waitingFor(new WaitStrategy()).withStartupAttempts(3));\n \t}\n \n \tprivate static class WaitStrategy extends HostPortWaitStrategy {",
    "output": "Protect tests against Cassandra startup failures\nOn CI, Cassandra running inside the Docker container sometimes fails\nto start or the start times out. This has nothing to do with Boot so\nwe  attempt to protect our tests from the flakiness of the container\nby allowing 3 startup attempts."
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/context/embedded/CompressionTests.java b/spring-boot/src/test/java/org/springframework/boot/context/embedded/CompressionTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/context/embedded/CompressionTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/context/embedded/CompressionTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2017 the original author or authors.\n+ * Copyright 2012-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -18,6 +18,10 @@\n \n import org.apache.coyote.http11.Http11NioProtocol;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import org.springframework.boot.junit.runner.classpath.ClassPathOverrides;\n+import org.springframework.boot.junit.runner.classpath.ModifiedClassPathRunner;\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n@@ -26,6 +30,8 @@\n  *\n  * @author Andy Wilkinson\n  */\n+@RunWith(ModifiedClassPathRunner.class)\n+@ClassPathOverrides(\"org.apache.tomcat.embed:tomcat-embed-core:8.5.24\")\n public class CompressionTests {\n \n \t@Test",
    "output": "Test compression defaults against 8.5.24 as they changed in 8.5.27"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/InvalidConfigurationPropertyValueFailureAnalyzer.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/InvalidConfigurationPropertyValueFailureAnalyzer.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/InvalidConfigurationPropertyValueFailureAnalyzer.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/InvalidConfigurationPropertyValueFailureAnalyzer.java\n@@ -94,7 +94,8 @@ private void appendDetails(StringBuilder message,\n \tprivate void appendReason(StringBuilder message,\n \t\t\tInvalidConfigurationPropertyValueException cause) {\n \t\tif (StringUtils.hasText(cause.getReason())) {\n-\t\t\tmessage.append(\" Validation failed for the following reason:\\n\\n\");\n+\t\t\tmessage.append(String.format(\" Validation failed for the following \"\n+\t\t\t\t\t+ \"reason:%n%n\"));\n \t\t\tmessage.append(cause.getReason());\n \t\t}\n \t\telse {\n@@ -114,7 +115,7 @@ private void appendAdditionalProperties(StringBuilder message,\n \t\t\t\tmessage.append(\"\\t- In '\" + other.getPropertySource() + \"'\");\n \t\t\t\tmessage.append(\" with the value '\" + other.getValue() + \"'\");\n \t\t\t\tother.appendOrigin(message);\n-\t\t\t\tmessage.append(\".\\n\");\n+\t\t\t\tmessage.append(String.format(\".%n\"));\n \t\t\t}\n \t\t}\n \t}",
    "output": "Use the platform-specific line separator"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/InvalidConfigurationPropertyValueFailureAnalyzer.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/InvalidConfigurationPropertyValueFailureAnalyzer.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/InvalidConfigurationPropertyValueFailureAnalyzer.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/InvalidConfigurationPropertyValueFailureAnalyzer.java\n@@ -94,7 +94,8 @@ private void appendDetails(StringBuilder message,\n \tprivate void appendReason(StringBuilder message,\n \t\t\tInvalidConfigurationPropertyValueException cause) {\n \t\tif (StringUtils.hasText(cause.getReason())) {\n-\t\t\tmessage.append(\" Validation failed for the following reason:\\n\\n\");\n+\t\t\tmessage.append(String.format(\" Validation failed for the following \"\n+\t\t\t\t\t+ \"reason:%n%n\"));\n \t\t\tmessage.append(cause.getReason());\n \t\t}\n \t\telse {\n@@ -114,7 +115,7 @@ private void appendAdditionalProperties(StringBuilder message,\n \t\t\t\tmessage.append(\"\\t- In '\" + other.getPropertySource() + \"'\");\n \t\t\t\tmessage.append(\" with the value '\" + other.getValue() + \"'\");\n \t\t\t\tother.appendOrigin(message);\n-\t\t\t\tmessage.append(\".\\n\");\n+\t\t\t\tmessage.append(String.format(\".%n\"));\n \t\t\t}\n \t\t}\n \t}",
    "output": "Use the platform-specific line separator"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerPropertiesAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerPropertiesAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerPropertiesAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerPropertiesAutoConfiguration.java\n@@ -16,8 +16,6 @@\n \n package org.springframework.boot.autoconfigure.web;\n \n-import reactor.core.support.Assert;\n-\n import org.springframework.beans.BeansException;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n@@ -31,6 +29,7 @@\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.core.Ordered;\n+import org.springframework.util.Assert;\n import org.springframework.util.StringUtils;\n \n /**",
    "output": "Use correct Assert class in ServerPropertiesAutoConfiguration"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java\n--- a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java\n+++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/server/AbstractReactiveWebServerFactoryTests.java\n@@ -18,6 +18,7 @@\n \n import java.io.File;\n import java.io.FileInputStream;\n+import java.net.InetSocketAddress;\n import java.nio.charset.StandardCharsets;\n import java.security.KeyStore;\n import java.time.Duration;\n@@ -249,9 +250,11 @@ protected WebClient.Builder getWebClient() {\n \n \tprotected WebClient.Builder getWebClient(\n \t\t\tConsumer<? super HttpClientOptions.Builder> clientOptions) {\n+\t\tInetSocketAddress address = new InetSocketAddress(this.webServer.getPort());\n+\t\tString baseUrl = \"http://\" + address.getHostString() + \":\" + address.getPort();\n \t\treturn WebClient.builder()\n \t\t\t\t.clientConnector(new ReactorClientHttpConnector(clientOptions))\n-\t\t\t\t.baseUrl(\"http://localhost:\" + this.webServer.getPort());\n+\t\t\t\t.baseUrl(baseUrl);\n \t}\n \n \t@Test",
    "output": "Configure WebClient to use same address (IPv4 or IPv6) as server"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/context/AnnotationConfigReactiveWebServerApplicationContext.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/context/AnnotationConfigReactiveWebServerApplicationContext.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/context/AnnotationConfigReactiveWebServerApplicationContext.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/context/AnnotationConfigReactiveWebServerApplicationContext.java\n@@ -21,6 +21,7 @@\n import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n import org.springframework.context.annotation.AnnotatedBeanDefinitionReader;\n import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n+import org.springframework.context.annotation.AnnotationConfigRegistry;\n import org.springframework.context.annotation.AnnotationConfigUtils;\n import org.springframework.context.annotation.AnnotationScopeMetadataResolver;\n import org.springframework.context.annotation.ClassPathBeanDefinitionScanner;\n@@ -51,7 +52,7 @@\n  * @see AnnotationConfigApplicationContext\n  */\n public class AnnotationConfigReactiveWebServerApplicationContext\n-\t\textends ReactiveWebServerApplicationContext {\n+\t\textends ReactiveWebServerApplicationContext implements AnnotationConfigRegistry {\n \n \tprivate final AnnotatedBeanDefinitionReader reader;\n ",
    "output": "Make Context implement AnnotationConfigRegistry\nUpdate `AnnotationConfigReactiveWebServerApplicationContext` to\nimplement `AnnotationConfigRegistry`."
  },
  {
    "input": "diff --git a/spring-boot-test/src/main/java/org/springframework/boot/test/json/DuplicateJsonObjectContextCustomizerFactory.java b/spring-boot-test/src/main/java/org/springframework/boot/test/json/DuplicateJsonObjectContextCustomizerFactory.java\n--- a/spring-boot-test/src/main/java/org/springframework/boot/test/json/DuplicateJsonObjectContextCustomizerFactory.java\n+++ b/spring-boot-test/src/main/java/org/springframework/boot/test/json/DuplicateJsonObjectContextCustomizerFactory.java\n@@ -75,13 +75,13 @@ private List<URL> findJsonObjects() {\n \t\t}\n \n \t\tprivate void logDuplicateJsonObjectsWarning(List<URL> jsonObjects) {\n-\t\t\tStringBuilder message = new StringBuilder(\"\\n\\nFound multiple occurrences of\"\n-\t\t\t\t\t+ \" org.json.JSONObject on the class path:\\n\\n\");\n+\t\t\tStringBuilder message = new StringBuilder(String.format(\"%n%nFound multiple occurrences of\"\n+\t\t\t\t\t+ \" org.json.JSONObject on the class path:%n%n\"));\n \t\t\tfor (URL jsonObject : jsonObjects) {\n-\t\t\t\tmessage.append(\"\\t\" + jsonObject + \"\\n\");\n+\t\t\t\tmessage.append(String.format(\"\\t%s%n\", jsonObject));\n \t\t\t}\n-\t\t\tmessage.append(\"\\nYou may wish to exclude one of them to ensure\"\n-\t\t\t\t\t+ \" predictable runtime behaviour\\n\");\n+\t\t\tmessage.append(String.format(\"%nYou may wish to exclude one of them to ensure\"\n+\t\t\t\t\t+ \" predictable runtime behavior%n\"));\n \t\t\tthis.logger.warn(message);\n \t\t}\n ",
    "output": "Use the platform-specific line separator"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/NettyReactiveWebServerFactory.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/NettyReactiveWebServerFactory.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/NettyReactiveWebServerFactory.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/NettyReactiveWebServerFactory.java\n@@ -97,6 +97,7 @@ private HttpServer createHttpServer() {\n \t\t\tif (getCompression() != null && getCompression().getEnabled()) {\n \t\t\t\toptions.compression(getCompression().getMinResponseSize());\n \t\t\t}\n+\t\t\toptions.preferNative(false);\n \t\t\tapplyCustomizers(options);\n \t\t}).build();\n \t}",
    "output": "Disable Reactor Netty's use of kqueue/epoll\nThere is a suspicion that the use of epoll is causing the intermittent\nfailures being tracked by . This commit disables the use of\nepoll to see if it improves the situation."
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-quartz/src/test/java/sample/quartz/SampleQuartzApplicationTests.java b/spring-boot-samples/spring-boot-sample-quartz/src/test/java/sample/quartz/SampleQuartzApplicationTests.java\n--- a/spring-boot-samples/spring-boot-sample-quartz/src/test/java/sample/quartz/SampleQuartzApplicationTests.java\n+++ b/spring-boot-samples/spring-boot-sample-quartz/src/test/java/sample/quartz/SampleQuartzApplicationTests.java\n@@ -36,11 +36,15 @@ public class SampleQuartzApplicationTests {\n \tpublic OutputCapture outputCapture = new OutputCapture();\n \n \t@Test\n-\tpublic void test() {\n-\t\ttry (ConfigurableApplicationContext context = SpringApplication.run(\n-\t\t\t\tSampleQuartzApplication.class)) {\n-\t\t\tString output = this.outputCapture.toString();\n-\t\t\tassertThat(output).contains(\"Hello World!\");\n+\tpublic void quartzJobIsTriggered() throws InterruptedException {\n+\t\ttry (ConfigurableApplicationContext context = SpringApplication\n+\t\t\t\t.run(SampleQuartzApplication.class)) {\n+\t\t\tlong end = System.currentTimeMillis() + 5000;\n+\t\t\twhile ((!this.outputCapture.toString().contains(\"Hello World!\"))\n+\t\t\t\t\t&& System.currentTimeMillis() < end) {\n+\t\t\t\tThread.sleep(100);\n+\t\t\t}\n+\t\t\tassertThat(this.outputCapture.toString()).contains(\"Hello World!\");\n \t\t}\n \t}\n ",
    "output": "Fix race condition in SampleQuartzApplicationTests"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/context/AnnotationConfigServletWebServerApplicationContext.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/context/AnnotationConfigServletWebServerApplicationContext.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/context/AnnotationConfigServletWebServerApplicationContext.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/context/AnnotationConfigServletWebServerApplicationContext.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2017 the original author or authors.\n+ * Copyright 2012-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -20,6 +20,7 @@\n import org.springframework.beans.factory.support.BeanNameGenerator;\n import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n import org.springframework.context.annotation.AnnotatedBeanDefinitionReader;\n+import org.springframework.context.annotation.AnnotationConfigRegistry;\n import org.springframework.context.annotation.AnnotationConfigUtils;\n import org.springframework.context.annotation.AnnotationScopeMetadataResolver;\n import org.springframework.context.annotation.ClassPathBeanDefinitionScanner;\n@@ -48,7 +49,7 @@\n  * @see AnnotationConfigWebApplicationContext\n  */\n public class AnnotationConfigServletWebServerApplicationContext\n-\t\textends ServletWebServerApplicationContext {\n+\t\textends ServletWebServerApplicationContext implements AnnotationConfigRegistry {\n \n \tprivate final AnnotatedBeanDefinitionReader reader;\n ",
    "output": "Make AnnotationConfigSWSApp…Context implement AnnotationConfigRegistry"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-quartz/src/test/java/sample/quartz/SampleQuartzApplicationTests.java b/spring-boot-samples/spring-boot-sample-quartz/src/test/java/sample/quartz/SampleQuartzApplicationTests.java\n--- a/spring-boot-samples/spring-boot-sample-quartz/src/test/java/sample/quartz/SampleQuartzApplicationTests.java\n+++ b/spring-boot-samples/spring-boot-sample-quartz/src/test/java/sample/quartz/SampleQuartzApplicationTests.java\n@@ -19,7 +19,9 @@\n import org.junit.Rule;\n import org.junit.Test;\n \n+import org.springframework.boot.SpringApplication;\n import org.springframework.boot.test.rule.OutputCapture;\n+import org.springframework.context.ConfigurableApplicationContext;\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n@@ -35,9 +37,11 @@ public class SampleQuartzApplicationTests {\n \n \t@Test\n \tpublic void test() {\n-\t\tSampleQuartzApplication.main(new String[0]);\n-\t\tString output = this.outputCapture.toString();\n-\t\tassertThat(output).contains(\"Hello World!\");\n+\t\ttry (ConfigurableApplicationContext context = SpringApplication.run(\n+\t\t\t\tSampleQuartzApplication.class)) {\n+\t\t\tString output = this.outputCapture.toString();\n+\t\t\tassertThat(output).contains(\"Hello World!\");\n+\t\t}\n \t}\n \n }",
    "output": "Add test to spring-boot-sample-quartz"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoReactiveAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoReactiveAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoReactiveAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoReactiveAutoConfiguration.java\n@@ -16,14 +16,14 @@\n \n package org.springframework.boot.autoconfigure.mongo;\n \n-import java.nio.channels.SocketChannel;\n import java.util.List;\n \n import javax.annotation.PreDestroy;\n \n import com.mongodb.async.client.MongoClientSettings;\n import com.mongodb.connection.netty.NettyStreamFactoryFactory;\n import com.mongodb.reactivestreams.client.MongoClient;\n+import io.netty.channel.socket.SocketChannel;\n \n import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;",
    "output": "Fix a wrong import for SocketChannel"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoReactiveAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoReactiveAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoReactiveAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoReactiveAutoConfiguration.java\n@@ -16,14 +16,14 @@\n \n package org.springframework.boot.autoconfigure.mongo;\n \n-import java.nio.channels.SocketChannel;\n import java.util.List;\n \n import javax.annotation.PreDestroy;\n \n import com.mongodb.async.client.MongoClientSettings;\n import com.mongodb.connection.netty.NettyStreamFactoryFactory;\n import com.mongodb.reactivestreams.client.MongoClient;\n+import io.netty.channel.socket.SocketChannel;\n \n import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;",
    "output": "Fix a wrong import for SocketChannel"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n@@ -39,7 +39,7 @@\n public final class GradleCompatibilitySuite extends Suite {\n \n \tprivate static final List<String> GRADLE_VERSIONS = Arrays.asList(\"default\", \"4.1\",\n-\t\t\t\"4.2\", \"4.3\");\n+\t\t\t\"4.2\", \"4.3\", \"4.4.1\");\n \n \tpublic GradleCompatibilitySuite(Class<?> clazz) throws InitializationError {\n \t\tsuper(clazz, createRunners(clazz));",
    "output": "Test the Gradle plugin against Gradle 4.4.1"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/AbstractEndpointDocumentationTests.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/AbstractEndpointDocumentationTests.java\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/AbstractEndpointDocumentationTests.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/AbstractEndpointDocumentationTests.java\n@@ -61,9 +61,9 @@ public class AbstractEndpointDocumentationTests {\n \n \tprotected String describeEnumValues(Class<? extends Enum<?>> enumType) {\n \t\treturn StringUtils\n-\t\t\t\t.collectionToCommaDelimitedString(Stream.of(enumType.getEnumConstants())\n+\t\t\t\t.collectionToDelimitedString(Stream.of(enumType.getEnumConstants())\n \t\t\t\t\t\t.map((constant) -> \"`\" + constant.name() + \"`\")\n-\t\t\t\t\t\t.collect(Collectors.toList()));\n+\t\t\t\t\t\t.collect(Collectors.toList()), \", \");\n \t}\n \n \tprotected OperationPreprocessor limit(String... keys) {",
    "output": "Polish formatting in Actuator API documentation"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2017 the original author or authors.\n+ * Copyright 2012-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -24,6 +24,7 @@\n import javax.persistence.EntityManagerFactory;\n import javax.sql.DataSource;\n \n+import liquibase.change.DatabaseChange;\n import liquibase.exception.LiquibaseException;\n import liquibase.integration.spring.SpringLiquibase;\n \n@@ -60,7 +61,7 @@\n  * @since 1.1.0\n  */\n @Configuration\n-@ConditionalOnClass(SpringLiquibase.class)\n+@ConditionalOnClass({ SpringLiquibase.class, DatabaseChange.class })\n @ConditionalOnBean(DataSource.class)\n @ConditionalOnProperty(prefix = \"spring.liquibase\", name = \"enabled\", matchIfMissing = true)\n @AutoConfigureAfter({ DataSourceAutoConfiguration.class,",
    "output": "Tighten Liquibase auto-configuration to require Liquibase 3"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/DynamicRegistrationBean.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/DynamicRegistrationBean.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/DynamicRegistrationBean.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/DynamicRegistrationBean.java\n@@ -112,9 +112,6 @@ protected final void register(String description, ServletContext servletContext)\n \t\t\t\t\t+ \"(possibly already registered?)\");\n \t\t\treturn;\n \t\t}\n-\t\tAssert.state(registration != null,\n-\t\t\t\t() -> \"Registration is null. Was something already registered for \"\n-\t\t\t\t\t\t+ description + \"?\");\n \t\tconfigure(registration);\n \t}\n ",
    "output": "Remove an unnecessary assertion"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/DynamicRegistrationBean.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/DynamicRegistrationBean.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/DynamicRegistrationBean.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/servlet/DynamicRegistrationBean.java\n@@ -112,9 +112,6 @@ protected final void register(String description, ServletContext servletContext)\n \t\t\t\t\t+ \"(possibly already registered?)\");\n \t\t\treturn;\n \t\t}\n-\t\tAssert.state(registration != null,\n-\t\t\t\t() -> \"Registration is null. Was something already registered for \"\n-\t\t\t\t\t\t+ description + \"?\");\n \t\tconfigure(registration);\n \t}\n ",
    "output": "Remove an unnecessary assertion"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/gson/GsonAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/gson/GsonAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/gson/GsonAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/gson/GsonAutoConfiguration.java\n@@ -43,6 +43,7 @@\n public class GsonAutoConfiguration {\n \n \t@Bean\n+\t@ConditionalOnMissingBean(GsonBuilder.class)\n \tpublic GsonBuilder gsonBuilder(List<GsonBuilderCustomizer> customizers) {\n \t\tGsonBuilder builder = new GsonBuilder();\n \t\tcustomizers.forEach(c -> c.customize(builder));",
    "output": "Make GsonAutoConfiguration align with JacksonAutoConfiguration"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-test-support/src/main/java/org/springframework/boot/testsupport/testcontainers/Container.java b/spring-boot-project/spring-boot-tools/spring-boot-test-support/src/main/java/org/springframework/boot/testsupport/testcontainers/Container.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-test-support/src/main/java/org/springframework/boot/testsupport/testcontainers/Container.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-test-support/src/main/java/org/springframework/boot/testsupport/testcontainers/Container.java\n@@ -52,7 +52,9 @@ <T extends GenericContainer<T>> Container(String dockerImageName, int port,\n \t\tthis.containerFactory = () -> {\n \t\t\tT container = (T) new GenericContainer<>(dockerImageName)\n \t\t\t\t\t.withExposedPorts(port);\n-\t\t\tcustomizer.accept(container);\n+\t\t\tif (customizer != null) {\n+\t\t\t\tcustomizer.accept(container);\n+\t\t\t}\n \t\t\treturn container;\n \t\t};\n \t}",
    "output": "Fix NPE in test containers\nFix NPE accidentally introduced during refinement."
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/ReactiveMongoClientFactory.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/ReactiveMongoClientFactory.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/ReactiveMongoClientFactory.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/ReactiveMongoClientFactory.java\n@@ -142,7 +142,9 @@ private Builder createBuilder(MongoClientSettings settings,\n \t\tbuilder.clusterSettings(getClusterSettings(connection));\n \t\tbuilder.connectionPoolSettings(getConnectionPoolSettings(connection));\n \t\tbuilder.serverSettings(getServerSettings(connection));\n-\t\tbuilder.credential(connection.getCredential());\n+\t\tif (connection.getCredential() != null) {\n+\t\t\tbuilder.credential(connection.getCredential());\n+\t\t}\n \t\tbuilder.sslSettings(getSslSettings(connection));\n \t\tbuilder.socketSettings(getSocketSettings(connection));\n \t\tif (connection.getReadPreference() != null) {",
    "output": "Do not pass null credential from ConnectionString to Mongo builder"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2017 the original author or authors.\n+ * Copyright 2012-2018 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -409,12 +409,7 @@ else if (ch1 != ch2) {\n \t}\n \n \tprivate static boolean isIndexed(CharSequence element) {\n-\t\tint length = element.length();\n-\t\treturn charAt(element, 0) == '[' && charAt(element, length - 1) == ']';\n-\t}\n-\n-\tprivate static char charAt(CharSequence element, int index) {\n-\t\treturn (index < element.length() ? element.charAt(index) : 0);\n+\t\treturn element.charAt(0) == '[' && element.charAt(element.length() - 1) == ']';\n \t}\n \n \t/**",
    "output": "Upgrade copyright header Remove unnecessary condition in ConfigurationPropertyName"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/source/ConfigurationPropertyName.java\n@@ -409,12 +409,7 @@ else if (ch1 != ch2) {\n \t}\n \n \tprivate static boolean isIndexed(CharSequence element) {\n-\t\tint length = element.length();\n-\t\treturn charAt(element, 0) == '[' && charAt(element, length - 1) == ']';\n-\t}\n-\n-\tprivate static char charAt(CharSequence element, int index) {\n-\t\treturn (index < element.length() ? element.charAt(index) : 0);\n+\t\treturn element.charAt(0) == '[' && element.charAt(element.length() - 1) == ']';\n \t}\n \n \t/**",
    "output": "Remove unnecessary condition in ConfigurationPropertyName"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-session-webflux/src/test/java/sample/session/SampleSessionWebFluxApplicationTests.java b/spring-boot-samples/spring-boot-sample-session-webflux/src/test/java/sample/session/SampleSessionWebFluxApplicationTests.java\n--- a/spring-boot-samples/spring-boot-sample-session-webflux/src/test/java/sample/session/SampleSessionWebFluxApplicationTests.java\n+++ b/spring-boot-samples/spring-boot-sample-session-webflux/src/test/java/sample/session/SampleSessionWebFluxApplicationTests.java\n@@ -38,7 +38,7 @@\n  * @author Vedran Pavic\n  */\n @RunWith(SpringRunner.class)\n-@SpringBootTest(properties = \"server.session.timeout:1\", webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@SpringBootTest(properties = \"server.session.timeout:2\", webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n public class SampleSessionWebFluxApplicationTests {\n \n \t@LocalServerPort\n@@ -60,7 +60,7 @@ public void userDefinedMappingsSecureByDefault() throws Exception {\n \t\t\t\t.block();\n \t\tassertThat(response.statusCode()).isEqualTo(HttpStatus.OK);\n \t\tassertThat(response.bodyToMono(String.class).block()).isEqualTo(sessionId);\n-\t\tThread.sleep(1000);\n+\t\tThread.sleep(2000);\n \t\tresponse = webClient.get().cookie(\"SESSION\", sessionCookie.getValue()).exchange()\n \t\t\t\t.block();\n \t\tassertThat(response.statusCode()).isEqualTo(HttpStatus.UNAUTHORIZED);",
    "output": "Increase session timeout to prevent CI failures"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfiguration.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfiguration.java\n@@ -86,7 +86,7 @@\n  */\n @Configuration\n @ConditionalOnWebApplication\n-@ConditionalOnClass({ EnableWebSecurity.class })\n+@ConditionalOnClass({ EnableWebSecurity.class, RequestMatcher.class })\n @AutoConfigureAfter(SecurityAutoConfiguration.class)\n @AutoConfigureBefore(FallbackWebSecurityAutoConfiguration.class)\n @EnableConfigurationProperties",
    "output": "Make management web security back off without spring-security-web"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactoryTests.java b/spring-boot/src/test/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactoryTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactoryTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactoryTests.java\n@@ -382,6 +382,7 @@ protected JspServlet getJspServlet() throws Exception {\n \t\t\treturn null;\n \t\t}\n \t\tholder.start();\n+\t\tholder.initialize();\n \t\treturn (JspServlet) holder.getServlet();\n \t}\n ",
    "output": "Upgrade to Jetty 9.4.8.v20171121"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorAttributesTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorAttributesTests.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorAttributesTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/error/DefaultErrorAttributesTests.java\n@@ -176,7 +176,7 @@ private ServerRequest buildServerRequest(MockServerHttpRequest request,\n \t\treturn ServerRequest.create(exchange, this.readers);\n \t}\n \n-\tpublic int method() {\n+\tpublic int method(String firstParam) {\n \t\treturn 42;\n \t}\n ",
    "output": "Reinstate required parameter"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterBindersConfiguration.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterBindersConfiguration.java\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterBindersConfiguration.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterBindersConfiguration.java\n@@ -39,7 +39,7 @@\n class MeterBindersConfiguration {\n \n \t@Bean\n-\t@ConditionalOnProperty(value = \"spring.metrics.binders.jvm.enabled\", matchIfMissing = true)\n+\t@ConditionalOnProperty(value = \"management.metrics.binders.jvm.enabled\", matchIfMissing = true)\n \t@ConditionalOnMissingBean\n \tpublic JvmGcMetrics jvmGcMetrics() {\n \t\treturn new JvmGcMetrics();\n@@ -53,7 +53,7 @@ public JvmMemoryMetrics jvmMemoryMetrics() {\n \t}\n \n \t@Bean\n-\t@ConditionalOnProperty(value = \"spring.metrics.binders.jvm.enabled\", matchIfMissing = true)\n+\t@ConditionalOnProperty(value = \"management.metrics.binders.jvm.enabled\", matchIfMissing = true)\n \t@ConditionalOnMissingBean\n \tpublic JvmThreadMetrics jvmThreadMetrics() {\n \t\treturn new JvmThreadMetrics();",
    "output": "Fix property names in MeterBindersConfiguration"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterBindersConfiguration.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterBindersConfiguration.java\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterBindersConfiguration.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MeterBindersConfiguration.java\n@@ -39,7 +39,7 @@\n class MeterBindersConfiguration {\n \n \t@Bean\n-\t@ConditionalOnProperty(value = \"spring.metrics.binders.jvm.enabled\", matchIfMissing = true)\n+\t@ConditionalOnProperty(value = \"management.metrics.binders.jvm.enabled\", matchIfMissing = true)\n \t@ConditionalOnMissingBean\n \tpublic JvmGcMetrics jvmGcMetrics() {\n \t\treturn new JvmGcMetrics();\n@@ -53,7 +53,7 @@ public JvmMemoryMetrics jvmMemoryMetrics() {\n \t}\n \n \t@Bean\n-\t@ConditionalOnProperty(value = \"spring.metrics.binders.jvm.enabled\", matchIfMissing = true)\n+\t@ConditionalOnProperty(value = \"management.metrics.binders.jvm.enabled\", matchIfMissing = true)\n \t@ConditionalOnMissingBean\n \tpublic JvmThreadMetrics jvmThreadMetrics() {\n \t\treturn new JvmThreadMetrics();",
    "output": "Fix property names in MeterBindersConfiguration"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/JolokiaManagementContextConfigurationIntegrationTests.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/JolokiaManagementContextConfigurationIntegrationTests.java\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/JolokiaManagementContextConfigurationIntegrationTests.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/JolokiaManagementContextConfigurationIntegrationTests.java\n@@ -60,8 +60,7 @@\n @RunWith(SpringRunner.class)\n @SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)\n @DirtiesContext\n-@TestPropertySource(properties = { \"management.jolokia.enabled=true\",\n-\t\t\"management.security.enabled=false\" })\n+@TestPropertySource(properties = \"management.jolokia.enabled=true\")\n public class JolokiaManagementContextConfigurationIntegrationTests {\n \n \t@Autowired",
    "output": "Remove redundant property from tests"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/ReactiveMongoClientFactory.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/ReactiveMongoClientFactory.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/ReactiveMongoClientFactory.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/ReactiveMongoClientFactory.java\n@@ -95,11 +95,6 @@ private MongoClient createEmbeddedMongoClient(MongoClientSettings settings,\n \t\treturn createMongoClient(builder);\n \t}\n \n-\tprivate MongoClient createMongoClient(Builder builder) {\n-\t\tcustomize(builder);\n-\t\treturn MongoClients.create(builder.build());\n-\t}\n-\n \tprivate MongoClient createNetworkMongoClient(MongoClientSettings settings) {\n \t\tif (hasCustomAddress() || hasCustomCredentials()) {\n \t\t\treturn createCredentialNetworkMongoClient(settings);\n@@ -138,6 +133,11 @@ private <T> T getOrDefault(T value, T defaultValue) {\n \t\treturn (value == null ? defaultValue : value);\n \t}\n \n+\tprivate MongoClient createMongoClient(Builder builder) {\n+\t\tcustomize(builder);\n+\t\treturn MongoClients.create(builder.build());\n+\t}\n+\n \tprivate Builder createBuilder(MongoClientSettings settings,\n \t\t\tConnectionString connection) {\n \t\tBuilder builder = builder(settings);",
    "output": "Apply customize() to createCredentialNetworkMongoClient()"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/AbstractEndpointDocumentationTests.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/AbstractEndpointDocumentationTests.java\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/AbstractEndpointDocumentationTests.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/AbstractEndpointDocumentationTests.java\n@@ -26,7 +26,6 @@\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.SerializationFeature;\n-import org.flywaydb.core.internal.util.StringUtils;\n import org.junit.Before;\n import org.junit.Rule;\n import org.junit.runner.RunWith;\n@@ -50,6 +49,7 @@\n import org.springframework.test.context.junit4.SpringRunner;\n import org.springframework.test.web.servlet.MockMvc;\n import org.springframework.test.web.servlet.setup.MockMvcBuilders;\n+import org.springframework.util.StringUtils;\n import org.springframework.web.context.WebApplicationContext;\n \n /**",
    "output": "Remove org.flywaydb.core.internal.util.StringUtils import"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/AbstractEndpointDocumentationTests.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/AbstractEndpointDocumentationTests.java\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/AbstractEndpointDocumentationTests.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/AbstractEndpointDocumentationTests.java\n@@ -26,7 +26,6 @@\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.SerializationFeature;\n-import org.flywaydb.core.internal.util.StringUtils;\n import org.junit.Before;\n import org.junit.Rule;\n import org.junit.runner.RunWith;\n@@ -50,6 +49,7 @@\n import org.springframework.test.context.junit4.SpringRunner;\n import org.springframework.test.web.servlet.MockMvc;\n import org.springframework.test.web.servlet.setup.MockMvcBuilders;\n+import org.springframework.util.StringUtils;\n import org.springframework.web.context.WebApplicationContext;\n \n /**",
    "output": "Remove org.flywaydb.core.internal.util.StringUtils import"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfigurationTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfigurationTests.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfigurationTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfigurationTests.java\n@@ -116,6 +116,20 @@ public void testDefaultRabbitTemplateConfiguration() {\n \t\t\t\t});\n \t}\n \n+\t@Test\n+\tpublic void testDefaultConnectionFactoryConfiguration() {\n+\t\tthis.contextRunner.withUserConfiguration(TestConfiguration.class)\n+\t\t\t\t.run((context) -> {\n+\t\t\t\t\tRabbitProperties properties = new RabbitProperties();\n+\t\t\t\t\tcom.rabbitmq.client.ConnectionFactory rabbitConnectionFactory = getTargetConnectionFactory(\n+\t\t\t\t\t\t\tcontext);\n+\t\t\t\t\tassertThat(rabbitConnectionFactory.getUsername())\n+\t\t\t\t\t\t\t.isEqualTo(properties.getUsername());\n+\t\t\t\t\tassertThat(rabbitConnectionFactory.getPassword())\n+\t\t\t\t\t\t\t.isEqualTo(properties.getPassword());\n+\t\t\t\t});\n+\t}\n+\n \t@Test\n \tpublic void testConnectionFactoryWithOverrides() {\n \t\tthis.contextRunner.withUserConfiguration(TestConfiguration.class)",
    "output": "Expose default RabbitMQ credentials in the metadata"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/Restarter.java b/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/Restarter.java\n--- a/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/Restarter.java\n+++ b/spring-boot-project/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/Restarter.java\n@@ -46,6 +46,7 @@\n import org.springframework.boot.devtools.restart.classloader.ClassLoaderFiles;\n import org.springframework.boot.devtools.restart.classloader.RestartClassLoader;\n import org.springframework.boot.logging.DeferredLog;\n+import org.springframework.boot.system.JavaVersion;\n import org.springframework.cglib.core.ClassNameReader;\n import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.context.support.GenericApplicationContext;\n@@ -338,7 +339,9 @@ private void cleanupKnownCaches() throws Exception {\n \t\tclear(ReflectionUtils.class, \"declaredMethodsCache\");\n \t\tclear(AnnotationUtils.class, \"findAnnotationCache\");\n \t\tclear(AnnotationUtils.class, \"annotatedInterfaceCache\");\n-\t\tclear(\"com.sun.naming.internal.ResourceManager\", \"propertiesCache\");\n+\t\tif (!JavaVersion.getJavaVersion().isEqualOrNewerThan(JavaVersion.NINE)) {\n+\t\t\tclear(\"com.sun.naming.internal.ResourceManager\", \"propertiesCache\");\n+\t\t}\n \t}\n \n \tprivate void clear(String className, String fieldName) {",
    "output": "Do not attempt to clear ResourceManager's cache with Java9"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/Handler.java b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/Handler.java\n--- a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/Handler.java\n+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/Handler.java\n@@ -29,6 +29,7 @@\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n+import java.util.regex.Pattern;\n \n /**\n  * {@link URLStreamHandler} for Spring Boot loader {@link JarFile}s.\n@@ -50,6 +51,8 @@ public class Handler extends URLStreamHandler {\n \n \tprivate static final String CURRENT_DIR = \"/./\";\n \n+\tprivate static final Pattern CURRENT_DIR_PATTERN = Pattern.compile(CURRENT_DIR);\n+\n \tprivate static final String PARENT_DIR = \"/../\";\n \n \tprivate static final String[] FALLBACK_HANDLERS = {\n@@ -237,7 +240,7 @@ private String replaceParentDir(String file) {\n \t}\n \n \tprivate String replaceCurrentDir(String file) {\n-\t\treturn file.replace(CURRENT_DIR, \"/\");\n+\t\treturn CURRENT_DIR_PATTERN.matcher(file).replaceAll(\"/\");\n \t}\n \n \t@Override",
    "output": "Precompile current dir pattern in Handler"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/Handler.java b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/Handler.java\n--- a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/Handler.java\n+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/Handler.java\n@@ -29,6 +29,7 @@\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n+import java.util.regex.Pattern;\n \n /**\n  * {@link URLStreamHandler} for Spring Boot loader {@link JarFile}s.\n@@ -50,6 +51,8 @@ public class Handler extends URLStreamHandler {\n \n \tprivate static final String CURRENT_DIR = \"/./\";\n \n+\tprivate static final Pattern CURRENT_DIR_PATTERN = Pattern.compile(CURRENT_DIR);\n+\n \tprivate static final String PARENT_DIR = \"/../\";\n \n \tprivate static final String[] FALLBACK_HANDLERS = {\n@@ -237,7 +240,7 @@ private String replaceParentDir(String file) {\n \t}\n \n \tprivate String replaceCurrentDir(String file) {\n-\t\treturn file.replace(CURRENT_DIR, \"/\");\n+\t\treturn CURRENT_DIR_PATTERN.matcher(file).replaceAll(\"/\");\n \t}\n \n \t@Override",
    "output": "Precompile current dir pattern in Handler"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/client/MetricsRestTemplateCustomizer.java b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/client/MetricsRestTemplateCustomizer.java\n--- a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/client/MetricsRestTemplateCustomizer.java\n+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/client/MetricsRestTemplateCustomizer.java\n@@ -59,10 +59,13 @@ public void customize(RestTemplate restTemplate) {\n \t\tUriTemplateHandler templateHandler = restTemplate.getUriTemplateHandler();\n \t\ttemplateHandler = this.interceptor.createUriTemplateHandler(templateHandler);\n \t\trestTemplate.setUriTemplateHandler(templateHandler);\n+\t\tList<ClientHttpRequestInterceptor> existingInterceptors = restTemplate.getInterceptors();\n+\t\tif (!existingInterceptors.contains(this.interceptor)) {\n \t\tList<ClientHttpRequestInterceptor> interceptors = new ArrayList<>();\n-\t\tinterceptors.add(this.interceptor);\n-\t\tinterceptors.addAll(restTemplate.getInterceptors());\n-\t\trestTemplate.setInterceptors(interceptors);\n+\t\t\tinterceptors.add(this.interceptor);\n+\t\t\tinterceptors.addAll(existingInterceptors);\n+\t\t\trestTemplate.setInterceptors(interceptors);\n+\t\t}\n \t}\n \n }",
    "output": "Avoid duplicate Metrics HTTP interceptor registration"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/Handler.java b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/Handler.java\n--- a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/Handler.java\n+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/Handler.java\n@@ -159,7 +159,7 @@ private URLConnection openConnection(URLStreamHandler handler, URL url)\n \n \t@Override\n \tprotected void parseURL(URL context, String spec, int start, int limit) {\n-\t\tif (spec.toLowerCase().startsWith(JAR_PROTOCOL)) {\n+\t\tif (spec.regionMatches(true, 0, JAR_PROTOCOL, 0, JAR_PROTOCOL.length())) {\n \t\t\tsetFile(context, getFileFromSpec(spec.substring(start, limit)));\n \t\t}\n \t\telse {",
    "output": "Avoid allocations from lower-casing spec in JAR Handler"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/scheduling/ScheduledTasksEndpointAutoConfiguration.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/scheduling/ScheduledTasksEndpointAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/scheduling/ScheduledTasksEndpointAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/scheduling/ScheduledTasksEndpointAutoConfiguration.java\n@@ -25,6 +25,7 @@\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n import org.springframework.scheduling.config.ScheduledTaskHolder;\n \n /**\n@@ -33,6 +34,7 @@\n  * @author Andy Wilkinson\n  * @since 2.0.0\n  */\n+@Configuration\n public class ScheduledTasksEndpointAutoConfiguration {\n \n \t@Bean",
    "output": "Add @Configuration to ScheduledTasksEndpointAutoConfiguration"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/scheduling/ScheduledTasksEndpointAutoConfiguration.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/scheduling/ScheduledTasksEndpointAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/scheduling/ScheduledTasksEndpointAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/scheduling/ScheduledTasksEndpointAutoConfiguration.java\n@@ -25,6 +25,7 @@\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n import org.springframework.scheduling.config.ScheduledTaskHolder;\n \n /**\n@@ -33,6 +34,7 @@\n  * @author Andy Wilkinson\n  * @since 2.0.0\n  */\n+@Configuration\n public class ScheduledTasksEndpointAutoConfiguration {\n \n \t@Bean",
    "output": "Add @Configuration to ScheduledTasksEndpointAutoConfiguration"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactory.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactory.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactory.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/embedded/undertow/UndertowServletWebServerFactory.java\n@@ -292,7 +292,7 @@ private DeploymentManager createDeploymentManager(\n \t\tSessionManager sessionManager = manager.getDeployment().getSessionManager();\n \t\tint sessionTimeout = (getSessionTimeout() == null || getSessionTimeout().isZero()\n \t\t\t\t|| getSessionTimeout().isNegative() ? -1\n-\t\t\t\t\t\t: (int) getSessionTimeout().toMinutes());\n+\t\t\t\t\t\t: (int) getSessionTimeout().getSeconds());\n \t\tsessionManager.setDefaultSessionTimeout(sessionTimeout);\n \t\treturn manager;\n \t}",
    "output": "Fix session timeout conversion for Undertow"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HalBrowserMvcEndpointDisabledIntegrationTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HalBrowserMvcEndpointDisabledIntegrationTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HalBrowserMvcEndpointDisabledIntegrationTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HalBrowserMvcEndpointDisabledIntegrationTests.java\n@@ -16,7 +16,6 @@\n \n package org.springframework.boot.actuate.endpoint.mvc;\n \n-import com.google.common.net.HttpHeaders;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n@@ -26,6 +25,7 @@\n import org.springframework.boot.actuate.autoconfigure.MinimalActuatorHypermediaApplication;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.http.HttpHeaders;\n import org.springframework.http.MediaType;\n import org.springframework.test.annotation.DirtiesContext;\n import org.springframework.test.context.TestPropertySource;",
    "output": "Use Checkstyle to police accidental use of unwanted imports"
  },
  {
    "input": "diff --git a/spring-boot-integration-tests/spring-boot-integration-tests-embedded-servlet-container/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerIntegrationTests.java b/spring-boot-integration-tests/spring-boot-integration-tests-embedded-servlet-container/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerIntegrationTests.java\n--- a/spring-boot-integration-tests/spring-boot-integration-tests-embedded-servlet-container/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerIntegrationTests.java\n+++ b/spring-boot-integration-tests/spring-boot-integration-tests-embedded-servlet-container/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerIntegrationTests.java\n@@ -24,12 +24,12 @@\n import java.util.List;\n import java.util.Map;\n \n-import org.codehaus.plexus.util.StringUtils;\n import org.junit.ClassRule;\n import org.junit.Rule;\n import org.junit.rules.TemporaryFolder;\n \n import org.springframework.http.client.ClientHttpResponse;\n+import org.springframework.util.StringUtils;\n import org.springframework.web.client.ResponseErrorHandler;\n import org.springframework.web.client.RestTemplate;\n import org.springframework.web.util.UriTemplateHandler;\n@@ -73,7 +73,7 @@ private static List<Object> createParameters(String packaging, String container,\n \t\t\t\t\tAbstractApplicationLauncher launcher = launcherClass\n \t\t\t\t\t\t\t.getDeclaredConstructor(ApplicationBuilder.class)\n \t\t\t\t\t\t\t.newInstance(applicationBuilder);\n-\t\t\t\t\tString name = StringUtils.capitalise(container) + \" \" + version + \": \"\n+\t\t\t\t\tString name = StringUtils.capitalize(container) + \" \" + version + \": \"\n \t\t\t\t\t\t\t+ launcher.getDescription(packaging);\n \t\t\t\t\tparameters.add(new Object[] { name, launcher });\n \t\t\t\t}",
    "output": "Fix typo in StringUtils import"
  },
  {
    "input": "diff --git a/spring-boot-integration-tests/spring-boot-integration-tests-embedded-servlet-container/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerIntegrationTests.java b/spring-boot-integration-tests/spring-boot-integration-tests-embedded-servlet-container/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerIntegrationTests.java\n--- a/spring-boot-integration-tests/spring-boot-integration-tests-embedded-servlet-container/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerIntegrationTests.java\n+++ b/spring-boot-integration-tests/spring-boot-integration-tests-embedded-servlet-container/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerIntegrationTests.java\n@@ -24,12 +24,12 @@\n import java.util.List;\n import java.util.Map;\n \n-import org.codehaus.plexus.util.StringUtils;\n import org.junit.ClassRule;\n import org.junit.Rule;\n import org.junit.rules.TemporaryFolder;\n \n import org.springframework.http.client.ClientHttpResponse;\n+import org.springframework.util.StringUtils;\n import org.springframework.web.client.ResponseErrorHandler;\n import org.springframework.web.client.RestTemplate;\n import org.springframework.web.util.UriTemplateHandler;\n@@ -73,7 +73,7 @@ private static List<Object> createParameters(String packaging, String container,\n \t\t\t\t\tAbstractApplicationLauncher launcher = launcherClass\n \t\t\t\t\t\t\t.getDeclaredConstructor(ApplicationBuilder.class)\n \t\t\t\t\t\t\t.newInstance(applicationBuilder);\n-\t\t\t\t\tString name = StringUtils.capitalise(container) + \" \" + version + \": \"\n+\t\t\t\t\tString name = StringUtils.capitalize(container) + \" \" + version + \": \"\n \t\t\t\t\t\t\t+ launcher.getDescription(packaging);\n \t\t\t\t\tparameters.add(new Object[] { name, launcher });\n \t\t\t\t}",
    "output": "Fix typo in StringUtils import"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveTokenValidator.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveTokenValidator.java\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveTokenValidator.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/cloudfoundry/reactive/ReactiveTokenValidator.java\n@@ -23,6 +23,7 @@\n import java.security.Signature;\n import java.security.spec.InvalidKeySpecException;\n import java.security.spec.X509EncodedKeySpec;\n+import java.util.HashMap;\n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.TimeUnit;\n@@ -71,7 +72,8 @@ private Mono<Void> validateAlgorithm(Token token) {\n \n \tprivate Mono<Void> validateKeyIdAndSignature(Token token) {\n \t\tString keyId = token.getKeyId();\n-\t\treturn Mono.just(this.cachedTokenKeys)\n+\t\tMap<String, String> localCachedTokenKeys = new HashMap<>(this.cachedTokenKeys);\n+\t\treturn Mono.just(localCachedTokenKeys)\n \t\t\t\t.filter((tokenKeys) -> tokenKeys.containsKey(keyId))\n \t\t\t\t.switchIfEmpty(this.securityService.fetchTokenKeys()\n \t\t\t\t\t\t.doOnSuccess((fetchedTokenKeys) -> {",
    "output": "Prevent race condition in ReactiveTokenValidator"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-test/src/test/java/org/springframework/boot/test/util/TestPropertyValuesTests.java b/spring-boot-project/spring-boot-test/src/test/java/org/springframework/boot/test/util/TestPropertyValuesTests.java\n--- a/spring-boot-project/spring-boot-test/src/test/java/org/springframework/boot/test/util/TestPropertyValuesTests.java\n+++ b/spring-boot-project/spring-boot-test/src/test/java/org/springframework/boot/test/util/TestPropertyValuesTests.java\n@@ -58,7 +58,8 @@ public void applyToSystemPropertySource() throws Exception {\n \t\t\t\tType.SYSTEM_ENVIRONMENT);\n \t\tassertThat(this.environment.getProperty(\"foo.bar\")).isEqualTo(\"BAZ\");\n \t\tassertThat(this.environment.getPropertySources().contains(\n-\t\t\t\t\"test-\" + StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME)).isTrue();\n+\t\t\t\t\"test-\" + StandardEnvironment.SYSTEM_ENVIRONMENT_PROPERTY_SOURCE_NAME))\n+\t\t\t\t\t\t.isTrue();\n \t}\n \n \t@Test",
    "output": "Remove a redundant dash in TestPropertyValues.Type"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/couchbase/CouchbaseReactiveRepositoriesAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/couchbase/CouchbaseReactiveRepositoriesAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/couchbase/CouchbaseReactiveRepositoriesAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/couchbase/CouchbaseReactiveRepositoriesAutoConfiguration.java\n@@ -17,6 +17,7 @@\n package org.springframework.boot.autoconfigure.data.couchbase;\n \n import com.couchbase.client.java.Bucket;\n+import reactor.core.publisher.Flux;\n \n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n@@ -38,7 +39,7 @@\n  * @since 2.0.0\n  */\n @Configuration\n-@ConditionalOnClass({ Bucket.class, ReactiveCouchbaseRepository.class })\n+@ConditionalOnClass({ Bucket.class, ReactiveCouchbaseRepository.class, Flux.class })\n @ConditionalOnProperty(prefix = \"spring.data.couchbase.reactiverepositories\", name = \"enabled\", havingValue = \"true\", matchIfMissing = true)\n @ConditionalOnBean(ReactiveRepositoryOperationsMapping.class)\n @ConditionalOnMissingBean(ReactiveCouchbaseRepositoryFactoryBean.class)",
    "output": "Harmonize CouchbaseReactiveRepositoriesAutoConfiguration conditions"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/couchbase/CouchbaseReactiveRepositoriesAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/couchbase/CouchbaseReactiveRepositoriesAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/couchbase/CouchbaseReactiveRepositoriesAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/couchbase/CouchbaseReactiveRepositoriesAutoConfiguration.java\n@@ -17,6 +17,7 @@\n package org.springframework.boot.autoconfigure.data.couchbase;\n \n import com.couchbase.client.java.Bucket;\n+import reactor.core.publisher.Flux;\n \n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n@@ -38,7 +39,7 @@\n  * @since 2.0.0\n  */\n @Configuration\n-@ConditionalOnClass({ Bucket.class, ReactiveCouchbaseRepository.class })\n+@ConditionalOnClass({ Bucket.class, ReactiveCouchbaseRepository.class, Flux.class })\n @ConditionalOnProperty(prefix = \"spring.data.couchbase.reactiverepositories\", name = \"enabled\", havingValue = \"true\", matchIfMissing = true)\n @ConditionalOnBean(ReactiveRepositoryOperationsMapping.class)\n @ConditionalOnMissingBean(ReactiveCouchbaseRepositoryFactoryBean.class)",
    "output": "Harmonize CouchbaseReactiveRepositoriesAutoConfiguration conditions"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java\n@@ -171,9 +171,9 @@ private void appendMessageForMatches(StringBuilder reason,\n \t\t\t\t}\n \t\t\t\treason.append(\"found beans \");\n \t\t\t\treason.append(description);\n-\t\t\t\treason.append(\"'\");\n+\t\t\t\treason.append(\" '\");\n \t\t\t\treason.append(match.getKey());\n-\t\t\t\treason.append(\"'\");\n+\t\t\t\treason.append(\"' \");\n \t\t\t\treason.append(\n \t\t\t\t\t\tStringUtils.collectionToDelimitedString(match.getValue(), \", \"));\n \t\t\t}",
    "output": "Polish message for matching beans produced by OnBeanCondition"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfigurationTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfigurationTests.java\n@@ -182,6 +182,16 @@ public void checkLocationsAllExist() throws Exception {\n \t\t\t\tPropertyPlaceholderAutoConfiguration.class);\n \t}\n \n+\t@Test\n+\tpublic void checkLocationsAllExistWithImplicitClasspathPrefix() throws Exception {\n+\t\tEnvironmentTestUtils.addEnvironment(this.context,\n+\t\t\t\t\"flyway.locations:db/changelog,db/migration\",\n+\t\t\t\t\"flyway.check-location:true\");\n+\t\tregisterAndRefresh(EmbeddedDataSourceConfiguration.class,\n+\t\t\t\tFlywayAutoConfiguration.class,\n+\t\t\t\tPropertyPlaceholderAutoConfiguration.class);\n+\t}\n+\n \t@Test\n \tpublic void customFlywayMigrationStrategy() throws Exception {\n \t\tregisterAndRefresh(EmbeddedDataSourceConfiguration.class,",
    "output": "Test Flyway location checking with implicit classpath: prefix"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/ShutdownEndpointDocumentationTests.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/ShutdownEndpointDocumentationTests.java\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/ShutdownEndpointDocumentationTests.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/ShutdownEndpointDocumentationTests.java\n@@ -25,7 +25,6 @@\n import org.springframework.context.annotation.Import;\n import org.springframework.core.env.Environment;\n import org.springframework.restdocs.mockmvc.MockMvcRestDocumentation;\n-import org.springframework.test.context.TestPropertySource;\n \n import static org.springframework.restdocs.payload.PayloadDocumentation.fieldWithPath;\n import static org.springframework.restdocs.payload.PayloadDocumentation.responseFields;\n@@ -37,7 +36,6 @@\n  *\n  * @author Andy Wilkinson\n  */\n-@TestPropertySource(properties = \"endpoints.shutdown.enabled=true\")\n public class ShutdownEndpointDocumentationTests\n \t\textends AbstractEndpointDocumentationTests {\n ",
    "output": "Fix references to management related properties\nFix references to management related properties"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/ShutdownEndpointDocumentationTests.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/ShutdownEndpointDocumentationTests.java\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/ShutdownEndpointDocumentationTests.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/endpoint/web/documentation/ShutdownEndpointDocumentationTests.java\n@@ -25,7 +25,6 @@\n import org.springframework.context.annotation.Import;\n import org.springframework.core.env.Environment;\n import org.springframework.restdocs.mockmvc.MockMvcRestDocumentation;\n-import org.springframework.test.context.TestPropertySource;\n \n import static org.springframework.restdocs.payload.PayloadDocumentation.fieldWithPath;\n import static org.springframework.restdocs.payload.PayloadDocumentation.responseFields;\n@@ -37,7 +36,6 @@\n  *\n  * @author Andy Wilkinson\n  */\n-@TestPropertySource(properties = \"endpoints.shutdown.enabled=true\")\n public class ShutdownEndpointDocumentationTests\n \t\textends AbstractEndpointDocumentationTests {\n ",
    "output": "Fix references to management related properties"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-session-webflux/src/test/java/sample/session/SampleSessionWebFluxApplicationTests.java b/spring-boot-samples/spring-boot-sample-session-webflux/src/test/java/sample/session/SampleSessionWebFluxApplicationTests.java\n--- a/spring-boot-samples/spring-boot-sample-session-webflux/src/test/java/sample/session/SampleSessionWebFluxApplicationTests.java\n+++ b/spring-boot-samples/spring-boot-sample-session-webflux/src/test/java/sample/session/SampleSessionWebFluxApplicationTests.java\n@@ -51,20 +51,16 @@ public class SampleSessionWebFluxApplicationTests {\n \tpublic void userDefinedMappingsSecureByDefault() throws Exception {\n \t\tWebClient webClient = this.webClientBuilder\n \t\t\t\t.baseUrl(\"http://localhost:\" + this.port + \"/\").build();\n-\n \t\tClientResponse response = webClient.get().header(\"Authorization\", getBasicAuth())\n \t\t\t\t.exchange().block();\n \t\tassertThat(response.statusCode()).isEqualTo(HttpStatus.OK);\n \t\tResponseCookie sessionCookie = response.cookies().getFirst(\"SESSION\");\n \t\tString sessionId = response.bodyToMono(String.class).block();\n-\n- \t\tresponse = webClient.get().cookie(\"SESSION\", sessionCookie.getValue()).exchange()\n+\t\tresponse = webClient.get().cookie(\"SESSION\", sessionCookie.getValue()).exchange()\n \t\t\t\t.block();\n \t\tassertThat(response.statusCode()).isEqualTo(HttpStatus.OK);\n \t\tassertThat(response.bodyToMono(String.class).block()).isEqualTo(sessionId);\n-\n \t\tThread.sleep(1000);\n-\n \t\tresponse = webClient.get().cookie(\"SESSION\", sessionCookie.getValue()).exchange()\n \t\t\t\t.block();\n \t\tassertThat(response.statusCode()).isEqualTo(HttpStatus.UNAUTHORIZED);",
    "output": "Polish Spring Session WebFlux sample"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessorTests.java b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessorTests.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessorTests.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessorTests.java\n@@ -626,8 +626,8 @@ public void incrementalEndpointBuildEnableSpecificEndpoint() throws Exception {\n \tprivate Metadata.MetadataItemCondition enabledFlag(String endpointId,\n \t\t\tBoolean defaultValue) {\n \t\treturn Metadata.withEnabledFlag(\"management.endpoint.\" + endpointId + \".enabled\")\n-\t\t\t\t.withDefaultValue(defaultValue)\n-\t\t\t\t.withDescription(String.format(\"Enable the %s endpoint.\", endpointId));\n+\t\t\t\t.withDefaultValue(defaultValue).withDescription(\n+\t\t\t\t\t\tString.format(\"Whether to enable the %s endpoint.\", endpointId));\n \t}\n \n \tprivate Metadata.MetadataItemCondition cacheTtl(String endpointId) {",
    "output": "Align expectation with new endpoint enabled property description"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/MongoReactiveSessionConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/MongoReactiveSessionConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/MongoReactiveSessionConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/MongoReactiveSessionConfiguration.java\n@@ -27,6 +27,7 @@\n import org.springframework.context.annotation.Configuration;\n import org.springframework.data.mongodb.core.ReactiveMongoOperations;\n import org.springframework.session.ReactiveSessionRepository;\n+import org.springframework.session.data.mongo.ReactiveMongoOperationsSessionRepository;\n import org.springframework.session.data.mongo.config.annotation.web.reactive.ReactiveMongoWebSessionConfiguration;\n \n /**\n@@ -35,7 +36,8 @@\n  * @author Andy Wilkinson\n  */\n @Configuration\n-@ConditionalOnClass(ReactiveMongoWebSessionConfiguration.class)\n+@ConditionalOnClass({ ReactiveMongoOperations.class,\n+\t\tReactiveMongoOperationsSessionRepository.class })\n @ConditionalOnMissingBean(ReactiveSessionRepository.class)\n @ConditionalOnBean(ReactiveMongoOperations.class)\n @Conditional(ReactiveSessionCondition.class)",
    "output": "Align MongoReactiveSessionConfiguration conditions\nAlign `MongoReactiveSessionConfiguration` `@ConditionalOnClass` with\n`MongoSessionConfiguration`"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/MongoSessionConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/MongoSessionConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/MongoSessionConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/MongoSessionConfiguration.java\n@@ -27,6 +27,7 @@\n import org.springframework.context.annotation.Configuration;\n import org.springframework.data.mongodb.core.MongoOperations;\n import org.springframework.session.SessionRepository;\n+import org.springframework.session.data.mongo.MongoOperationsSessionRepository;\n import org.springframework.session.data.mongo.config.annotation.web.http.MongoHttpSessionConfiguration;\n \n /**\n@@ -36,7 +37,7 @@\n  * @author Stephane Nicoll\n  */\n @Configuration\n-@ConditionalOnClass(MongoHttpSessionConfiguration.class)\n+@ConditionalOnClass({ MongoOperations.class, MongoOperationsSessionRepository.class })\n @ConditionalOnMissingBean(SessionRepository.class)\n @ConditionalOnBean(MongoOperations.class)\n @Conditional(ServletSessionCondition.class)",
    "output": "Improve Spring Session auto-configuration tests"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/WebEndpointsAutoConfigurationIntegrationTests.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/WebEndpointsAutoConfigurationIntegrationTests.java\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/WebEndpointsAutoConfigurationIntegrationTests.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/test/java/org/springframework/boot/actuate/autoconfigure/integrationtest/WebEndpointsAutoConfigurationIntegrationTests.java\n@@ -81,13 +81,17 @@ public void statusEndpointReactiveWebExtensionIsAutoConfigured() {\n \t}\n \n \tprivate WebApplicationContextRunner servletWebRunner() {\n-\t\treturn new WebApplicationContextRunner().withConfiguration(\n-\t\t\t\tUserConfigurations.of(WebEndpointTestApplication.class));\n+\t\treturn new WebApplicationContextRunner()\n+\t\t\t\t.withConfiguration(\n+\t\t\t\t\t\tUserConfigurations.of(WebEndpointTestApplication.class))\n+\t\t\t\t.withPropertyValues(\"spring.metrics.export.statsd.enabled:false\");\n \t}\n \n \tprivate ReactiveWebApplicationContextRunner reactiveWebRunner() {\n-\t\treturn new ReactiveWebApplicationContextRunner().withConfiguration(\n-\t\t\t\tUserConfigurations.of(WebEndpointTestApplication.class));\n+\t\treturn new ReactiveWebApplicationContextRunner()\n+\t\t\t\t.withConfiguration(\n+\t\t\t\t\t\tUserConfigurations.of(WebEndpointTestApplication.class))\n+\t\t\t\t.withPropertyValues(\"spring.metrics.export.statsd.enabled:false\");\n \t}\n \n \t@EnableAutoConfiguration(exclude = { FlywayAutoConfiguration.class,",
    "output": "Reduce excessive logging by disabling Statsd metrics export"
  },
  {
    "input": "diff --git a/spring-boot-integration-tests/spring-boot-devtools-tests/src/test/java/org/springframework/boot/devtools/tests/JarFileRemoteApplicationLauncher.java b/spring-boot-integration-tests/spring-boot-devtools-tests/src/test/java/org/springframework/boot/devtools/tests/JarFileRemoteApplicationLauncher.java\n--- a/spring-boot-integration-tests/spring-boot-devtools-tests/src/test/java/org/springframework/boot/devtools/tests/JarFileRemoteApplicationLauncher.java\n+++ b/spring-boot-integration-tests/spring-boot-devtools-tests/src/test/java/org/springframework/boot/devtools/tests/JarFileRemoteApplicationLauncher.java\n@@ -72,7 +72,13 @@ private void addToJar(JarOutputStream output, File root, File current)\n \t\t\t\t\tfile.getAbsolutePath().substring(root.getAbsolutePath().length() + 1)\n \t\t\t\t\t\t\t.replace(\"\\\\\", \"/\") + (file.isDirectory() ? \"/\" : \"\")));\n \t\t\tif (file.isFile()) {\n-\t\t\t\tStreamUtils.copy(new FileInputStream(file), output);\n+\t\t\t\tFileInputStream input = new FileInputStream(file);\n+\t\t\t\ttry {\n+\t\t\t\t\tStreamUtils.copy(input, output);\n+\t\t\t\t}\n+\t\t\t\tfinally {\n+\t\t\t\t\tinput.close();\n+\t\t\t\t}\n \t\t\t}\n \t\t\toutput.closeEntry();\n \t\t}",
    "output": "Close input stream after adding entry to jar in DevTools tests"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/servlet/WebMvcMetrics.java b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/servlet/WebMvcMetrics.java\n--- a/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/servlet/WebMvcMetrics.java\n+++ b/spring-boot-project/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/servlet/WebMvcMetrics.java\n@@ -192,7 +192,8 @@ private Set<TimerConfig> timed(Object handler) {\n \t\tif (handler instanceof HandlerMethod) {\n \t\t\treturn timed((HandlerMethod) handler);\n \t\t}\n-\t\tif ((handler == null || handler instanceof ResourceHttpRequestHandler)\n+\t\tif ((handler == null || handler instanceof ResourceHttpRequestHandler\n+\t\t\t\t|| handler instanceof ParameterizableViewController)\n \t\t\t\t&& this.autoTimeRequests) {\n \t\t\treturn Collections.singleton(\n \t\t\t\t\tnew TimerConfig(getServerRequestName(), this.recordAsPercentiles));",
    "output": "Record metrics for request handled by ParameterizableViewController"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/plugin/JavaPluginActionIntegrationTests.java b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/plugin/JavaPluginActionIntegrationTests.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/plugin/JavaPluginActionIntegrationTests.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/plugin/JavaPluginActionIntegrationTests.java\n@@ -128,9 +128,10 @@ public void additionalMetadataLocationsConfiguredWhenProcessorIsPresent()\n \t\tassertThat(result.task(\":compileJava\").getOutcome())\n \t\t\t\t.isEqualTo(TaskOutcome.SUCCESS);\n \t\tassertThat(result.getOutput()).contains(\n-\t\t\t\t\"compileJava compiler args: [-parameters, -Aorg.springframework.boot.configurationprocessor.additionalMetadataLocations=\"\n-\t\t\t\t\t\t+ this.gradleBuild.getProjectDir().getCanonicalPath()\n-\t\t\t\t\t\t+ \"/src/main/resources]\");\n+\t\t\t\t\"compileJava compiler args: [-parameters, -Aorg.springframework.boot.\"\n+\t\t\t\t\t\t+ \"configurationprocessor.additionalMetadataLocations=\"\n+\t\t\t\t\t\t+ new File(this.gradleBuild.getProjectDir(), \"src/main/resources\")\n+\t\t\t\t\t\t\t\t.getCanonicalPath());\n \t}\n \n \t@Test",
    "output": "Remove assumption about file separator that is incorrect on Windows"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java\n@@ -219,7 +219,7 @@ private static class LocationResolver {\n \n \t\tprivate final DataSource dataSource;\n \n-\t\tpublic LocationResolver(DataSource dataSource) {\n+\t\tLocationResolver(DataSource dataSource) {\n \t\t\tthis.dataSource = dataSource;\n \t\t}\n ",
    "output": "Fix checkstyle violation\nFix public constructor accidentally"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-actuator-custom-security/src/test/java/sample/actuator/customsecurity/ManagementPortAndPathSampleActuatorApplicationTests.java b/spring-boot-samples/spring-boot-sample-actuator-custom-security/src/test/java/sample/actuator/customsecurity/ManagementPortAndPathSampleActuatorApplicationTests.java\n--- a/spring-boot-samples/spring-boot-sample-actuator-custom-security/src/test/java/sample/actuator/customsecurity/ManagementPortAndPathSampleActuatorApplicationTests.java\n+++ b/spring-boot-samples/spring-boot-sample-actuator-custom-security/src/test/java/sample/actuator/customsecurity/ManagementPortAndPathSampleActuatorApplicationTests.java\n@@ -39,7 +39,7 @@\n @RunWith(SpringRunner.class)\n @SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT, properties = {\n \t\t\"management.server.port=0\", \"management.server.context-path=/management\" })\n-public class InsecureManagementPortAndPathSampleActuatorApplicationTests {\n+public class ManagementPortAndPathSampleActuatorApplicationTests {\n \n \t@LocalServerPort\n \tprivate int port = 9010;",
    "output": "Rename test to a more suitable name"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/datadog/DatadogExportConfiguration.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/datadog/DatadogExportConfiguration.java\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/datadog/DatadogExportConfiguration.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/datadog/DatadogExportConfiguration.java\n@@ -36,7 +36,7 @@\n  */\n @Configuration\n @ConditionalOnClass(DatadogMeterRegistry.class)\n-@ConditionalOnProperty(\"spring.metrics.datadog.api-key\")\n+@ConditionalOnProperty(\"spring.metrics.export.datadog.api-key\")\n @EnableConfigurationProperties(DatadogProperties.class)\n public class DatadogExportConfiguration {\n ",
    "output": "Fix condition for Datadog's api key"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisProperties.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisProperties.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisProperties.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisProperties.java\n@@ -266,9 +266,9 @@ public static class Sentinel {\n \t\tprivate String master;\n \n \t\t/**\n-\t\t * Nodes as host:port pairs.\n+\t\t * Comma-separated list of \"host:port\" pairs.\n \t\t */\n-\t\tprivate String[] nodes;\n+\t\tprivate List<String> nodes;\n \n \t\tpublic String getMaster() {\n \t\t\treturn this.master;\n@@ -278,11 +278,11 @@ public void setMaster(String master) {\n \t\t\tthis.master = master;\n \t\t}\n \n-\t\tpublic String[] getNodes() {\n+\t\tpublic List<String> getNodes() {\n \t\t\treturn this.nodes;\n \t\t}\n \n-\t\tpublic void setNodes(String[] nodes) {\n+\t\tpublic void setNodes(List<String> nodes) {\n \t\t\tthis.nodes = nodes;\n \t\t}\n ",
    "output": "Use a List rather than an array for consistency"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-actuator/src/test/java/sample/actuator/ShutdownSampleActuatorApplicationTests.java b/spring-boot-samples/spring-boot-sample-actuator/src/test/java/sample/actuator/ShutdownSampleActuatorApplicationTests.java\n--- a/spring-boot-samples/spring-boot-sample-actuator/src/test/java/sample/actuator/ShutdownSampleActuatorApplicationTests.java\n+++ b/spring-boot-samples/spring-boot-sample-actuator/src/test/java/sample/actuator/ShutdownSampleActuatorApplicationTests.java\n@@ -27,6 +27,7 @@\n import org.springframework.boot.test.web.client.TestRestTemplate;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n+import org.springframework.test.annotation.DirtiesContext;\n import org.springframework.test.context.junit4.SpringRunner;\n \n import static org.assertj.core.api.Assertions.assertThat;\n@@ -55,6 +56,7 @@ public void testHome() throws Exception {\n \t}\n \n \t@Test\n+\t@DirtiesContext\n \tpublic void testShutdown() throws Exception {\n \t\t@SuppressWarnings(\"rawtypes\")\n \t\tResponseEntity<Map> entity = this.restTemplate",
    "output": "Reinstate @DirtiesContext on shutdown endpoint test"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-actuator/src/test/java/sample/actuator/SampleActuatorApplicationTests.java b/spring-boot-samples/spring-boot-sample-actuator/src/test/java/sample/actuator/SampleActuatorApplicationTests.java\n--- a/spring-boot-samples/spring-boot-sample-actuator/src/test/java/sample/actuator/SampleActuatorApplicationTests.java\n+++ b/spring-boot-samples/spring-boot-sample-actuator/src/test/java/sample/actuator/SampleActuatorApplicationTests.java\n@@ -219,8 +219,9 @@ public void testBeans() throws Exception {\n \t\t\t\t.withBasicAuth(\"user\", getPassword())\n \t\t\t\t.getForEntity(\"/application/beans\", Map.class);\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\n-\t\tassertThat(entity.getBody()).containsOnlyKeys(\"beans\", \"parent\", \"id\");\n-\t\tassertThat(((String) entity.getBody().get(\"id\"))).startsWith(\"application\");\n+\t\tassertThat(entity.getBody()).containsOnlyKeys(\"beans\", \"parent\", \"contextId\");\n+\t\tassertThat(((String) entity.getBody().get(\"contextId\")))\n+\t\t\t\t.startsWith(\"application\");\n \t}\n \n \t@SuppressWarnings(\"unchecked\")",
    "output": "Align Actuator sample's tests with endpoint contextId changes"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/ServletWebServerFactoryAutoConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/ServletWebServerFactoryAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/ServletWebServerFactoryAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/servlet/ServletWebServerFactoryAutoConfiguration.java\n@@ -21,6 +21,7 @@\n \n import io.undertow.Undertow;\n import org.apache.catalina.startup.Tomcat;\n+import org.apache.coyote.UpgradeProtocol;\n import org.eclipse.jetty.server.Server;\n import org.eclipse.jetty.util.Loader;\n import org.eclipse.jetty.webapp.WebAppContext;\n@@ -84,7 +85,7 @@ public DefaultServletWebServerFactoryCustomizer serverPropertiesWebServerFactory\n \t * Nested configuration if Tomcat is being used.\n \t */\n \t@Configuration\n-\t@ConditionalOnClass({ Servlet.class, Tomcat.class })\n+\t@ConditionalOnClass({ Servlet.class, Tomcat.class, UpgradeProtocol.class })\n \t@ConditionalOnMissingBean(value = ServletWebServerFactory.class, search = SearchStrategy.CURRENT)\n \tpublic static class EmbeddedTomcat {\n ",
    "output": "Make Tomcat auto-config back off when UpgradeProtocol is absent"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationSorter.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationSorter.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationSorter.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationSorter.java\n@@ -61,7 +61,7 @@ public List<String> getInPriorityOrder(Collection<String> classNames) {\n \t\torderedClassNames.sort((o1, o2) -> {\n \t\t\tint i1 = classes.get(o1).getOrder();\n \t\t\tint i2 = classes.get(o2).getOrder();\n-\t\t\treturn (i1 < i2) ? -1 : (i1 > i2) ? 1 : 0;\n+\t\t\treturn Integer.compare(i1, i2);\n \t\t});\n \t\t// Then respect @AutoConfigureBefore @AutoConfigureAfter\n \t\torderedClassNames = sortByAnnotation(classes, orderedClassNames);",
    "output": "Use Integer::compare in AutoConfigurationSorter"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationSorter.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationSorter.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationSorter.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationSorter.java\n@@ -61,7 +61,7 @@ public List<String> getInPriorityOrder(Collection<String> classNames) {\n \t\torderedClassNames.sort((o1, o2) -> {\n \t\t\tint i1 = classes.get(o1).getOrder();\n \t\t\tint i2 = classes.get(o2).getOrder();\n-\t\t\treturn (i1 < i2) ? -1 : (i1 > i2) ? 1 : 0;\n+\t\t\treturn Integer.compare(i1, i2);\n \t\t});\n \t\t// Then respect @AutoConfigureBefore @AutoConfigureAfter\n \t\torderedClassNames = sortByAnnotation(classes, orderedClassNames);",
    "output": "Use Integer::compare in AutoConfigurationSorter"
  },
  {
    "input": "diff --git a/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/filewatch/FileSystemWatcher.java b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/filewatch/FileSystemWatcher.java\n--- a/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/filewatch/FileSystemWatcher.java\n+++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/filewatch/FileSystemWatcher.java\n@@ -194,7 +194,7 @@ void stopAfter(int remainingScans) {\n \t\t\t}\n \t\t\tthis.watchThread = null;\n \t\t}\n-\t\tif (Thread.currentThread() != thread) {\n+\t\tif (thread != null && Thread.currentThread() != thread) {\n \t\t\ttry {\n \t\t\t\tthread.join();\n \t\t\t}",
    "output": "Add missing null check in FileSystemWatcher.stopAfter()"
  },
  {
    "input": "diff --git a/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/filewatch/FileSystemWatcher.java b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/filewatch/FileSystemWatcher.java\n--- a/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/filewatch/FileSystemWatcher.java\n+++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/filewatch/FileSystemWatcher.java\n@@ -194,7 +194,7 @@ void stopAfter(int remainingScans) {\n \t\t\t}\n \t\t\tthis.watchThread = null;\n \t\t}\n-\t\tif (Thread.currentThread() != thread) {\n+\t\tif (thread != null && Thread.currentThread() != thread) {\n \t\t\ttry {\n \t\t\t\tthread.join();\n \t\t\t}",
    "output": "Add missing null check in FileSystemWatcher.stopAfter()"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-autoconfigure-processor/src/main/java/org/springframework/boot/autoconfigureprocessor/AutoConfigureAnnotationProcessor.java b/spring-boot-tools/spring-boot-autoconfigure-processor/src/main/java/org/springframework/boot/autoconfigureprocessor/AutoConfigureAnnotationProcessor.java\n--- a/spring-boot-tools/spring-boot-autoconfigure-processor/src/main/java/org/springframework/boot/autoconfigureprocessor/AutoConfigureAnnotationProcessor.java\n+++ b/spring-boot-tools/spring-boot-autoconfigure-processor/src/main/java/org/springframework/boot/autoconfigureprocessor/AutoConfigureAnnotationProcessor.java\n@@ -29,6 +29,7 @@\n import javax.annotation.processing.AbstractProcessor;\n import javax.annotation.processing.RoundEnvironment;\n import javax.annotation.processing.SupportedAnnotationTypes;\n+import javax.lang.model.SourceVersion;\n import javax.lang.model.element.AnnotationMirror;\n import javax.lang.model.element.AnnotationValue;\n import javax.lang.model.element.Element;\n@@ -80,6 +81,11 @@ protected void addAnnotations(Map<String, String> annotations) {\n \t\t\t\t\"org.springframework.boot.autoconfigure.AutoConfigureOrder\");\n \t}\n \n+\t@Override\n+\tpublic SourceVersion getSupportedSourceVersion() {\n+\t\treturn SourceVersion.latestSupported();\n+\t}\n+\n \t@Override\n \tpublic boolean process(Set<? extends TypeElement> annotations,\n \t\t\tRoundEnvironment roundEnv) {",
    "output": "Add missing supported source version"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/context/properties/bind/Binder.java\n@@ -299,7 +299,6 @@ private Object bindBean(ConfigurationPropertyName name, Bindable<?> target,\n \t\t\t\tname.append(propertyName), propertyTarget, handler, context, true);\n \t\tClass<?> type = target.getType().resolve();\n \t\tif (skipIfHasBoundBean && context.hasBoundBean(type)) {\n-\t\t\tSystem.err.println(type + \" \" + name);\n \t\t\treturn null;\n \t\t}\n \t\treturn context.withBean(type, () -> {",
    "output": "Remove accidental System.out"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/context/SpringBootContextLoader.java b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/context/SpringBootContextLoader.java\n--- a/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/context/SpringBootContextLoader.java\n+++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/context/SpringBootContextLoader.java\n@@ -105,7 +105,7 @@ public ApplicationContext loadContext(MergedContextConfiguration config)\n \t\tapplication.setMainApplicationClass(config.getTestClass());\n \t\tapplication.addPrimarySources(Arrays.asList(configClasses));\n \t\tapplication.getSources().addAll(Arrays.asList(configLocations));\n-\t\tConfigurableEnvironment environment = new StandardEnvironment();\n+\t\tConfigurableEnvironment environment = getEnvironment();\n \t\tif (!ObjectUtils.isEmpty(config.getActiveProfiles())) {\n \t\t\tsetActiveProfiles(environment, config.getActiveProfiles());\n \t\t}\n@@ -148,6 +148,15 @@ protected SpringApplication getSpringApplication() {\n \t\treturn new SpringApplication();\n \t}\n \n+\t/**\n+\t * Builds a new {@link ConfigurableEnvironment} instance. You can override this method\n+\t * to return something other than {@link StandardEnvironment} if necessary.\n+\t * @return a {@link ConfigurableEnvironment} instance\n+\t */\n+\tprotected ConfigurableEnvironment getEnvironment() {\n+\t\treturn new StandardEnvironment();\n+\t}\n+\n \tprivate void setActiveProfiles(ConfigurableEnvironment environment,\n \t\t\tString[] profiles) {\n \t\tTestPropertyValues",
    "output": "Support custom SpringBootContextLoader environment"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/context/SpringBootContextLoader.java b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/context/SpringBootContextLoader.java\n--- a/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/context/SpringBootContextLoader.java\n+++ b/spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/context/SpringBootContextLoader.java\n@@ -105,7 +105,7 @@ public ApplicationContext loadContext(MergedContextConfiguration config)\n \t\tapplication.setMainApplicationClass(config.getTestClass());\n \t\tapplication.addPrimarySources(Arrays.asList(configClasses));\n \t\tapplication.getSources().addAll(Arrays.asList(configLocations));\n-\t\tConfigurableEnvironment environment = new StandardEnvironment();\n+\t\tConfigurableEnvironment environment = getEnvironment();\n \t\tif (!ObjectUtils.isEmpty(config.getActiveProfiles())) {\n \t\t\tsetActiveProfiles(environment, config.getActiveProfiles());\n \t\t}\n@@ -148,6 +148,15 @@ protected SpringApplication getSpringApplication() {\n \t\treturn new SpringApplication();\n \t}\n \n+\t/**\n+\t * Builds a new {@link ConfigurableEnvironment} instance. You can override this method\n+\t * to return something other than {@link StandardEnvironment} if necessary.\n+\t * @return a {@link ConfigurableEnvironment} instance\n+\t */\n+\tprotected ConfigurableEnvironment getEnvironment() {\n+\t\treturn new StandardEnvironment();\n+\t}\n+\n \tprivate void setActiveProfiles(ConfigurableEnvironment environment,\n \t\t\tString[] profiles) {\n \t\tTestPropertyValues",
    "output": "Support custom SpringBootContextLoader environment\nProvide a `getEnvironment` method in `SpringBootContextLoader` to allow\nspecialized `ConfigurableEnvironment` implementations to be used."
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n@@ -39,7 +39,7 @@\n public final class GradleCompatibilitySuite extends Suite {\n \n \tprivate static final List<String> GRADLE_VERSIONS = Arrays.asList(\"default\", \"4.1\",\n-\t\t\t\"4.2\", \"4.3-rc-4\");\n+\t\t\t\"4.2\", \"4.3\");\n \n \tpublic GradleCompatibilitySuite(Class<?> clazz) throws InitializationError {\n \t\tsuper(clazz, createRunners(clazz));",
    "output": "Test the Gradle plugin against Gradle 4.3"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/hateoas/HypermediaAutoConfigurationTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/hateoas/HypermediaAutoConfigurationTests.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/hateoas/HypermediaAutoConfigurationTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/hateoas/HypermediaAutoConfigurationTests.java\n@@ -140,7 +140,8 @@ public void customizationOfSupportedMediaTypesCanBeDisabled() {\n \t\tfor (HttpMessageConverter<?> converter : handlerAdapter.getMessageConverters()) {\n \t\t\tif (converter instanceof TypeConstrainedMappingJackson2HttpMessageConverter) {\n \t\t\t\tassertThat(converter.getSupportedMediaTypes())\n-\t\t\t\t\t\t.containsExactly(MediaTypes.HAL_JSON);\n+\t\t\t\t\t\t.containsExactly(MediaTypes.HAL_JSON, MediaType.parseMediaType(\n+\t\t\t\t\t\t\t\tMediaTypes.HAL_JSON_VALUE + \";charset=UTF-8\"));\n \t\t\t}\n \t\t}\n \t}",
    "output": "Upgrade test to align with media type change in HATEOAS 0.24"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2WebSecurityConfiguration.java b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2WebSecurityConfiguration.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2WebSecurityConfiguration.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2WebSecurityConfiguration.java\n@@ -49,7 +49,7 @@ static class OAuth2WebSecurityConfigurationAdapter\n \t\t@Override\n \t\tprotected void configure(HttpSecurity http) throws Exception {\n \t\t\thttp.authorizeRequests().anyRequest().authenticated().and().oauth2Login()\n-\t\t\t\t\t.clients(this.clientRegistrationRepository);\n+\t\t\t\t\t.clientRegistrationRepository(this.clientRegistrationRepository);\n \t\t}\n \n \t}",
    "output": "Adapt to Spring Security change"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/Sanitizer.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/Sanitizer.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/Sanitizer.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/Sanitizer.java\n@@ -79,9 +79,12 @@ private boolean isRegex(String value) {\n \t * @return the potentially sanitized value\n \t */\n \tpublic Object sanitize(String key, Object value) {\n+\t\tif (value == null) {\n+\t\t\treturn null;\n+\t\t}\n \t\tfor (Pattern pattern : this.keysToSanitize) {\n \t\t\tif (pattern.matcher(key).matches()) {\n-\t\t\t\treturn (value == null ? null : \"******\");\n+\t\t\t\treturn \"******\";\n \t\t\t}\n \t\t}\n \t\treturn value;",
    "output": "Handle null early in Sanitizer.sanitize()"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/Sanitizer.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/Sanitizer.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/Sanitizer.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/Sanitizer.java\n@@ -79,9 +79,12 @@ private boolean isRegex(String value) {\n \t * @return the potentially sanitized value\n \t */\n \tpublic Object sanitize(String key, Object value) {\n+\t\tif (value == null) {\n+\t\t\treturn null;\n+\t\t}\n \t\tfor (Pattern pattern : this.keysToSanitize) {\n \t\t\tif (pattern.matcher(key).matches()) {\n-\t\t\t\treturn (value == null ? null : \"******\");\n+\t\t\t\treturn \"******\";\n \t\t\t}\n \t\t}\n \t\treturn value;",
    "output": "Handle null early in Sanitizer.sanitize()"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n@@ -39,7 +39,7 @@\n public final class GradleCompatibilitySuite extends Suite {\n \n \tprivate static final List<String> GRADLE_VERSIONS = Arrays.asList(\"default\", \"4.1\",\n-\t\t\t\"4.2\", \"4.3-rc-3\");\n+\t\t\t\"4.2\", \"4.3-rc-4\");\n \n \tpublic GradleCompatibilitySuite(Class<?> clazz) throws InitializationError {\n \t\tsuper(clazz, createRunners(clazz));",
    "output": "Test the Gradle plugin against Gradle 4.3-rc-4"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-simple/src/main/java/sample/simple/SampleConfigurationProperties.java b/spring-boot-samples/spring-boot-sample-simple/src/main/java/sample/simple/SampleConfigurationProperties.java\n--- a/spring-boot-samples/spring-boot-sample-simple/src/main/java/sample/simple/SampleConfigurationProperties.java\n+++ b/spring-boot-samples/spring-boot-sample-simple/src/main/java/sample/simple/SampleConfigurationProperties.java\n@@ -20,7 +20,9 @@\n \n import org.springframework.boot.context.properties.ConfigurationProperties;\n import org.springframework.stereotype.Component;\n+import org.springframework.validation.annotation.Validated;\n \n+@Validated\n @Component\n @ConfigurationProperties(prefix = \"sample\")\n public class SampleConfigurationProperties {\n\ndiff --git a/spring-boot-samples/spring-boot-sample-simple/src/test/java/sample/simple/SampleSimpleApplicationTests.java b/spring-boot-samples/spring-boot-sample-simple/src/test/java/sample/simple/SampleSimpleApplicationTests.java\n--- a/spring-boot-samples/spring-boot-sample-simple/src/test/java/sample/simple/SampleSimpleApplicationTests.java\n+++ b/spring-boot-samples/spring-boot-sample-simple/src/test/java/sample/simple/SampleSimpleApplicationTests.java\n@@ -58,10 +58,6 @@ public void testDefaultSettings() throws Exception {\n \t\tSampleSimpleApplication.main(new String[0]);\n \t\tString output = this.outputCapture.toString();\n \t\tassertThat(output).contains(\"Hello Phil\");\n-\t\tassertThat(output).contains(\"The @ConfigurationProperties bean class \"\n-\t\t\t\t+ \"sample.simple.SampleConfigurationProperties contains \"\n-\t\t\t\t+ \"validation constraints but had not been annotated \"\n-\t\t\t\t+ \"with @Validated\");\n \t}\n \n \t@Test",
    "output": "Align simple sample with configuration properties validation change"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n@@ -39,7 +39,7 @@\n public final class GradleCompatibilitySuite extends Suite {\n \n \tprivate static final List<String> GRADLE_VERSIONS = Arrays.asList(\"default\", \"4.1\",\n-\t\t\t\"4.2\");\n+\t\t\t\"4.2\", \"4.3-rc-3\");\n \n \tpublic GradleCompatibilitySuite(Class<?> clazz) throws InitializationError {\n \t\tsuper(clazz, createRunners(clazz));",
    "output": "Test the Gradle plugin against Gradle 4.3-rc-3"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/MainClassFinder.java b/spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/MainClassFinder.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/MainClassFinder.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/MainClassFinder.java\n@@ -41,6 +41,7 @@\n import org.springframework.asm.ClassVisitor;\n import org.springframework.asm.MethodVisitor;\n import org.springframework.asm.Opcodes;\n+import org.springframework.asm.SpringAsmInfo;\n import org.springframework.asm.Type;\n \n /**\n@@ -298,7 +299,7 @@ private static class ClassDescriptor extends ClassVisitor {\n \t\tprivate boolean mainMethodFound;\n \n \t\tClassDescriptor() {\n-\t\t\tsuper(Opcodes.ASM4);\n+\t\t\tsuper(SpringAsmInfo.ASM_VERSION);\n \t\t}\n \n \t\t@Override",
    "output": "Bump ASM version to be Java 8+ compatible"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/result/view/MustacheViewTests.java b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/result/view/MustacheViewTests.java\n--- a/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/result/view/MustacheViewTests.java\n+++ b/spring-boot-project/spring-boot/src/test/java/org/springframework/boot/web/reactive/result/view/MustacheViewTests.java\n@@ -26,7 +26,7 @@\n import org.springframework.context.support.GenericApplicationContext;\n import org.springframework.http.MediaType;\n import org.springframework.mock.http.server.reactive.MockServerHttpRequest;\n-import org.springframework.mock.http.server.reactive.MockServerWebExchange;\n+import org.springframework.mock.web.server.MockServerWebExchange;\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n@@ -51,7 +51,7 @@ public void init() {\n \n \t@Test\n \tpublic void viewResolvesHandlebars() throws Exception {\n-\t\tthis.exchange = MockServerHttpRequest.get(\"/test\").toExchange();\n+\t\tthis.exchange = MockServerWebExchange.from(MockServerHttpRequest.get(\"/test\").build());\n \t\tMustacheView view = new MustacheView();\n \t\tview.setCompiler(Mustache.compiler());\n \t\tview.setUrl(this.templateUrl);",
    "output": "Build against Spring Framework 5.0.1.BUILD-SNAPSHOT"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/MetricsEndpointWebIntegrationTests.java b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/MetricsEndpointWebIntegrationTests.java\n--- a/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/MetricsEndpointWebIntegrationTests.java\n+++ b/spring-boot-project/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/metrics/MetricsEndpointWebIntegrationTests.java\n@@ -67,7 +67,7 @@ public void selectByName() throws IOException {\n \t@Test\n \tpublic void selectByTag() {\n \t\tMetricsEndpointWebIntegrationTests.client.get()\n-\t\t\t\t.uri(\"/application/metrics/jvm.memory.used?tag=id:PS%20Old%20Gen\")\n+\t\t\t\t.uri(\"/application/metrics/jvm.memory.used?tag=id:Compressed%20Class%20Space\")\n \t\t\t\t.exchange().expectStatus().isOk().expectBody().jsonPath(\"$.name\")\n \t\t\t\t.isEqualTo(\"jvm.memory.used\");\n \t}",
    "output": "Test metrics endpoint using tag available on Java 9 as well as 8"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/reactive/ReactiveManagementContextAutoConfiguration.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/reactive/ReactiveManagementContextAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/reactive/ReactiveManagementContextAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/reactive/ReactiveManagementContextAutoConfiguration.java\n@@ -16,7 +16,7 @@\n \n package org.springframework.boot.actuate.autoconfigure.web.reactive;\n \n-import javax.servlet.Servlet;\n+import reactor.core.publisher.Flux;\n \n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n@@ -33,7 +33,7 @@\n  * @since 2.0.0\n  */\n @Configuration\n-@ConditionalOnClass(Servlet.class)\n+@ConditionalOnClass(Flux.class)\n @ConditionalOnWebApplication(type = Type.REACTIVE)\n public class ReactiveManagementContextAutoConfiguration {\n ",
    "output": "Change @ConditionalOnClass from Servlet to Flux"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/reactive/ReactiveManagementContextAutoConfiguration.java b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/reactive/ReactiveManagementContextAutoConfiguration.java\n--- a/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/reactive/ReactiveManagementContextAutoConfiguration.java\n+++ b/spring-boot-project/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/web/reactive/ReactiveManagementContextAutoConfiguration.java\n@@ -16,7 +16,7 @@\n \n package org.springframework.boot.actuate.autoconfigure.web.reactive;\n \n-import javax.servlet.Servlet;\n+import reactor.core.publisher.Flux;\n \n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n@@ -33,7 +33,7 @@\n  * @since 2.0.0\n  */\n @Configuration\n-@ConditionalOnClass(Servlet.class)\n+@ConditionalOnClass(Flux.class)\n @ConditionalOnWebApplication(type = Type.REACTIVE)\n public class ReactiveManagementContextAutoConfiguration {\n ",
    "output": "Change @ConditionalOnClass from Servlet to Flux\nUpdate `ReactiveManagementContextAutoConfiguration` to check for a\n`Flux` class rather than `Servlet`."
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/context/ReactiveWebServerApplicationContext.java b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/context/ReactiveWebServerApplicationContext.java\n--- a/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/context/ReactiveWebServerApplicationContext.java\n+++ b/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/web/reactive/context/ReactiveWebServerApplicationContext.java\n@@ -89,6 +89,15 @@ private void createWebServer() {\n \t\tinitPropertySources();\n \t}\n \n+\t/**\n+\t * Returns the {@link WebServer} that was created by the context or {@code null} if\n+\t * the server has not yet been created.\n+\t * @return the web server\n+\t */\n+\tpublic WebServer getWebServer() {\n+\t\treturn this.webServer;\n+\t}\n+\n \t/**\n \t * Return the {@link ReactiveWebServerFactory} that should be used to create the\n \t * reactive web server. By default this method searches for a suitable bean in the",
    "output": "Expose webServer from ReactiveWebServerApplicationContext"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationJdbcTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationJdbcTests.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationJdbcTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationJdbcTests.java\n@@ -54,14 +54,13 @@ public class SessionAutoConfigurationJdbcTests\n \tprivate final WebApplicationContextRunner contextRunner = new WebApplicationContextRunner()\n \t\t\t.withConfiguration(AutoConfigurations.of(DataSourceAutoConfiguration.class,\n \t\t\t\t\tDataSourceTransactionManagerAutoConfiguration.class,\n+\t\t\t\t\tJdbcTemplateAutoConfiguration.class,\n \t\t\t\t\tSessionAutoConfiguration.class))\n \t\t\t.withPropertyValues(\"spring.datasource.generate-unique-name=true\");\n \n \t@Test\n \tpublic void defaultConfig() {\n \t\tthis.contextRunner.withPropertyValues(\"spring.session.store-type=jdbc\")\n-\t\t\t\t.withConfiguration(\n-\t\t\t\t\t\tAutoConfigurations.of(JdbcTemplateAutoConfiguration.class))\n \t\t\t\t.run(this::validateDefaultConfig);\n \t}\n \n@@ -72,8 +71,6 @@ public void defaultConfigWithUniqueStoreImplementation() {\n \t\t\t\t\t\tnew HideClassesClassLoader(HazelcastSessionRepository.class,\n \t\t\t\t\t\t\t\tMongoOperationsSessionRepository.class,\n \t\t\t\t\t\t\t\tRedisOperationsSessionRepository.class))\n-\t\t\t\t.withConfiguration(\n-\t\t\t\t\t\tAutoConfigurations.of(JdbcTemplateAutoConfiguration.class))\n \t\t\t\t.run(this::validateDefaultConfig);\n \t}\n ",
    "output": "Fix build failure\nSpring Session JDBC no longer providers a JdbcTemplate so our tests\nneed to make sure to include our own auto-configuration for it."
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafReactiveAutoConfigurationTests.java b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafReactiveAutoConfigurationTests.java\n--- a/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafReactiveAutoConfigurationTests.java\n+++ b/spring-boot-project/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafReactiveAutoConfigurationTests.java\n@@ -112,6 +112,14 @@ public void overrideViewNames() throws Exception {\n \t\tassertThat(views.getViewNames()).isEqualTo(new String[] { \"foo\", \"bar\" });\n \t}\n \n+\t@Test\n+\tpublic void overrideMaxChunkSize() throws Exception {\n+\t\tload(BaseConfiguration.class, \"spring.thymeleaf.reactive.maxChunkSize:8192\");\n+\t\tThymeleafReactiveViewResolver views = this.context\n+\t\t\t\t.getBean(ThymeleafReactiveViewResolver.class);\n+\t\tassertThat(views.getResponseMaxChunkSizeBytes()).isEqualTo(Integer.valueOf(8192));\n+\t}\n+\n \t@Test\n \tpublic void overrideFullModeViewNames() throws Exception {\n \t\tload(BaseConfiguration.class, \"spring.thymeleaf.reactive.fullModeViewNames:foo,bar\");",
    "output": "Add configuration test for spring.thymeleaf.reactive.max-chunk-size"
  },
  {
    "input": "diff --git a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/testkit/GradleBuild.java b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/testkit/GradleBuild.java\n--- a/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/testkit/GradleBuild.java\n+++ b/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/testkit/GradleBuild.java\n@@ -196,7 +196,7 @@ private static String evaluateExpression(String expression) {\n \t\t\tXPathFactory xPathFactory = XPathFactory.newInstance();\n \t\t\tXPath xpath = xPathFactory.newXPath();\n \t\t\tXPathExpression expr = xpath.compile(expression);\n-\t\t\tString version = expr.evaluate(new InputSource(new FileReader(\"pom.xml\")));\n+\t\t\tString version = expr.evaluate(new InputSource(new FileReader(\".flattened-pom.xml\")));\n \t\t\treturn version;\n \t\t}\n \t\tcatch (Exception ex) {",
    "output": "Fix Gradle to use flattened POM file\nUpdate the Gradle plugin to use version information from the\nflattened POM.xml files."
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetrics.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetrics.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetrics.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetrics.java\n@@ -189,8 +189,6 @@ private void addChannelSends(MeterRegistry registry, Iterable<Tag> tags,\n \n \t@Override\n \tpublic void afterSingletonsInstantiated() {\n-\t\t// FIXME better would be to use a BeanPostProcessor\n-\t\tthis.configurer.afterSingletonsInstantiated();\n \t\tthis.registries.forEach((registry) -> {\n \t\t\taddChannelMetrics(registry);\n \t\t\taddHandlerMetrics(registry);",
    "output": "Remove explicit call to afterSingletonsInstantiated"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jPropertiesTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jPropertiesTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jPropertiesTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jPropertiesTests.java\n@@ -157,7 +157,7 @@ private static void assertDriver(Configuration actual, String driver, String uri\n \tprivate static void assertCredentials(Configuration actual, String username,\n \t\t\tString password) {\n \t\tCredentials<?> credentials = actual.getCredentials();\n-\t\tif (username == null & password == null) {\n+\t\tif (username == null && password == null) {\n \t\t\tassertThat(credentials).isNull();\n \t\t}\n \t\telse {",
    "output": "Remove non short-circuit expression in Neo4jPropertiesTests"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jPropertiesTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jPropertiesTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jPropertiesTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jPropertiesTests.java\n@@ -157,7 +157,7 @@ private static void assertDriver(Configuration actual, String driver, String uri\n \tprivate static void assertCredentials(Configuration actual, String username,\n \t\t\tString password) {\n \t\tCredentials<?> credentials = actual.getCredentials();\n-\t\tif (username == null & password == null) {\n+\t\tif (username == null && password == null) {\n \t\t\tassertThat(credentials).isNull();\n \t\t}\n \t\telse {",
    "output": "Remove non short-circuit expression in Neo4jPropertiesTests"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/AbstractWebEndpointIntegrationTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/AbstractWebEndpointIntegrationTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/AbstractWebEndpointIntegrationTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/web/AbstractWebEndpointIntegrationTests.java\n@@ -16,6 +16,7 @@\n \n package org.springframework.boot.actuate.endpoint.web;\n \n+import java.time.Duration;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n@@ -62,6 +63,8 @@\n  */\n public abstract class AbstractWebEndpointIntegrationTests<T extends ConfigurableApplicationContext> {\n \n+\tprivate static final Duration TIMEOUT = Duration.ofSeconds(30);\n+\n \tprivate final Class<?> exporterConfiguration;\n \n \tprotected AbstractWebEndpointIntegrationTests(Class<?> exporterConfiguration) {\n@@ -311,11 +314,9 @@ private void load(Class<?> configuration, String endpointPath,\n \t\t\t\t\"test\", Collections.singletonMap(\"endpointPath\", endpointPath)));\n \t\tcontext.refresh();\n \t\ttry {\n-\t\t\tconsumer.accept(context,\n-\t\t\t\t\tWebTestClient.bindToServer()\n-\t\t\t\t\t\t\t.baseUrl(\n-\t\t\t\t\t\t\t\t\t\"http://localhost:\" + getPort(context) + endpointPath)\n-\t\t\t\t\t\t\t.build());\n+\t\t\tString url = \"http://localhost:\" + getPort(context) + endpointPath;\n+\t\t\tconsumer.accept(context, WebTestClient.bindToServer().baseUrl(url)\n+\t\t\t\t\t.responseTimeout(TIMEOUT).build());\n \t\t}\n \t\tfinally {\n \t\t\tcontext.close();",
    "output": "Increase WebClient testing timeout"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-atmosphere/src/main/java/sample/atmosphere/SampleAtmosphereApplication.java b/spring-boot-samples/spring-boot-sample-atmosphere/src/main/java/sample/atmosphere/SampleAtmosphereApplication.java\n--- a/spring-boot-samples/spring-boot-sample-atmosphere/src/main/java/sample/atmosphere/SampleAtmosphereApplication.java\n+++ b/spring-boot-samples/spring-boot-sample-atmosphere/src/main/java/sample/atmosphere/SampleAtmosphereApplication.java\n@@ -21,8 +21,8 @@\n import javax.servlet.ServletContext;\n import javax.servlet.ServletException;\n \n-import org.atmosphere.cpr.AtmosphereInitializer;\n import org.atmosphere.cpr.AtmosphereServlet;\n+import org.atmosphere.cpr.ContainerInitializer;\n \n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.SpringBootConfiguration;\n@@ -69,7 +69,7 @@ public void addViewControllers(ViewControllerRegistry registry) {\n \n \t}\n \n-\tprivate static class EmbeddedAtmosphereInitializer extends AtmosphereInitializer\n+\tprivate static class EmbeddedAtmosphereInitializer extends ContainerInitializer\n \t\t\timplements ServletContextInitializer {\n \n \t\t@Override",
    "output": "Upgrade sample to Atmosphere 2.4.14"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-atmosphere/src/main/java/sample/atmosphere/SampleAtmosphereApplication.java b/spring-boot-samples/spring-boot-sample-atmosphere/src/main/java/sample/atmosphere/SampleAtmosphereApplication.java\n--- a/spring-boot-samples/spring-boot-sample-atmosphere/src/main/java/sample/atmosphere/SampleAtmosphereApplication.java\n+++ b/spring-boot-samples/spring-boot-sample-atmosphere/src/main/java/sample/atmosphere/SampleAtmosphereApplication.java\n@@ -21,8 +21,8 @@\n import javax.servlet.ServletContext;\n import javax.servlet.ServletException;\n \n-import org.atmosphere.cpr.AtmosphereInitializer;\n import org.atmosphere.cpr.AtmosphereServlet;\n+import org.atmosphere.cpr.ContainerInitializer;\n \n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.SpringBootConfiguration;\n@@ -69,7 +69,7 @@ public void addViewControllers(ViewControllerRegistry registry) {\n \n \t}\n \n-\tprivate static class EmbeddedAtmosphereInitializer extends AtmosphereInitializer\n+\tprivate static class EmbeddedAtmosphereInitializer extends ContainerInitializer\n \t\t\timplements ServletContextInitializer {\n \n \t\t@Override",
    "output": "Upgrade sample to Atmosphere 2.4.14"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfigurationTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfigurationTests.java\n@@ -36,6 +36,8 @@\n import org.springframework.boot.jdbc.DataSourceBuilder;\n import org.springframework.boot.liquibase.CommonsLoggingLiquibaseLogger;\n import org.springframework.boot.liquibase.LiquibaseServiceLocatorApplicationListener;\n+import org.springframework.boot.system.JavaVersion;\n+import org.springframework.boot.test.Assume;\n import org.springframework.boot.test.context.assertj.AssertableApplicationContext;\n import org.springframework.boot.test.context.runner.ApplicationContextRunner;\n import org.springframework.boot.test.context.runner.ContextConsumer;\n@@ -112,6 +114,7 @@ public void changelogJson() {\n \n \t@Test\n \tpublic void changelogSql() {\n+\t\tAssume.javaVersion(JavaVersion.EIGHT);\n \t\tthis.contextRunner.withUserConfiguration(EmbeddedDataSourceConfiguration.class)\n \t\t\t\t.withPropertyValues(\n \t\t\t\t\t\t\"spring.liquibase.change-log:classpath:/db/changelog/db.changelog-override.sql\")",
    "output": "Fix LiquibaseAutoConfigurationTests with Java 9\nLiquibase does not currently work with Java 9. This commit disables on\ntest reproducing that behaviour when running with that version."
  },
  {
    "input": "diff --git a/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/simple/SimpleExportConfiguration.java b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/simple/SimpleExportConfiguration.java\n--- a/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/simple/SimpleExportConfiguration.java\n+++ b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/export/simple/SimpleExportConfiguration.java\n@@ -45,7 +45,7 @@ public MetricsExporter simpleExporter(Clock clock) {\n \n \t@Bean\n \t@ConditionalOnMissingBean\n-\tpublic Clock clock() {\n+\tpublic Clock micrometerClock() {\n \t\treturn Clock.SYSTEM;\n \t}\n ",
    "output": "Rename Micrometer Clock bean: clock -> micrometerClock"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfigurationTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfigurationTests.java\n@@ -18,7 +18,6 @@\n \n import java.security.NoSuchAlgorithmException;\n \n-import javax.net.SocketFactory;\n import javax.net.ssl.SSLSocketFactory;\n \n import com.rabbitmq.client.Address;\n@@ -522,9 +521,8 @@ public void noSslByDefault() {\n \t\t\t\t.run((context) -> {\n \t\t\t\t\tcom.rabbitmq.client.ConnectionFactory rabbitConnectionFactory = getTargetConnectionFactory(\n \t\t\t\t\t\t\tcontext);\n-\t\t\t\t\tassertThat(rabbitConnectionFactory.getSocketFactory())\n-\t\t\t\t\t\t\t.as(\"Must use default SocketFactory\")\n-\t\t\t\t\t\t\t.isEqualTo(SocketFactory.getDefault());\n+\t\t\t\t\tassertThat(rabbitConnectionFactory.getSocketFactory()).isNull();\n+\t\t\t\t\tassertThat(rabbitConnectionFactory.isSSL()).isFalse();\n \t\t\t\t});\n \t}\n \n@@ -534,6 +532,7 @@ public void enableSsl() {\n \t\t\t\t.withPropertyValues(\"spring.rabbitmq.ssl.enabled:true\").run((context) -> {\n \t\t\t\t\tcom.rabbitmq.client.ConnectionFactory rabbitConnectionFactory = getTargetConnectionFactory(\n \t\t\t\t\t\t\tcontext);\n+\t\t\t\t\tassertThat(rabbitConnectionFactory.isSSL()).isTrue();\n \t\t\t\t\tassertThat(rabbitConnectionFactory.getSocketFactory())\n \t\t\t\t\t\t\t.as(\"SocketFactory must use SSL\")\n \t\t\t\t\t\t\t.isInstanceOf(SSLSocketFactory.class);",
    "output": "Start building against snapshots for Spring AMQP 2.0.0.RELEASE"
  },
  {
    "input": "diff --git a/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/security/SecurityTestApplication.java b/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/security/SecurityTestApplication.java\n--- a/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/security/SecurityTestApplication.java\n+++ b/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/security/SecurityTestApplication.java\n@@ -35,7 +35,7 @@ public class SecurityTestApplication {\n \n \t@Bean\n \tpublic InMemoryUserDetailsManager inMemoryUserDetailsManager() throws Exception {\n-\t\treturn new InMemoryUserDetailsManager(User.withUsername(\"user\").password(\"password\").roles(\"USER\").build());\n+\t\treturn new InMemoryUserDetailsManager(User.withUsername(\"user\").password(\"secret\").roles(\"USER\").build());\n \t}\n \n \t@RestController",
    "output": "Fix user details"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/env/EnvironmentEndpoint.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/env/EnvironmentEndpoint.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/env/EnvironmentEndpoint.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/env/EnvironmentEndpoint.java\n@@ -167,7 +167,7 @@ private static class PropertySourcesPlaceholdersSanitizingResolver\n \n \t\tprivate final Sanitizer sanitizer;\n \n-\t\tpublic PropertySourcesPlaceholdersSanitizingResolver(\n+\t\tPropertySourcesPlaceholdersSanitizingResolver(\n \t\t\t\tIterable<PropertySource<?>> sources, Sanitizer sanitizer) {\n \t\t\tsuper(sources, new PropertyPlaceholderHelper(\n \t\t\t\t\tSystemPropertyUtils.PLACEHOLDER_PREFIX,",
    "output": "Fix checkstyle violation"
  },
  {
    "input": "diff --git a/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java b/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java\n--- a/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java\n+++ b/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java\n@@ -59,6 +59,7 @@\n  * Integration tests for Spring Boot's launch script on OSs that use SysVinit.\n  *\n  * @author Andy Wilkinson\n+ * @author Ali Shahbour\n  */\n @RunWith(Parameterized.class)\n public class SysVinitLaunchScriptIT {\n@@ -194,6 +195,11 @@ public void launchWithSingleJavaOpt() throws Exception {\n \t\tdoLaunch(\"launch-with-single-java-opt.sh\");\n \t}\n \n+\t@Test\n+\tpublic void launchWithDoubleLinkSingleJavaOpt() throws Exception {\n+\t\tdoLaunch(\"launch-with-double-link-single-java-opt.sh\");\n+\t}\n+\n \t@Test\n \tpublic void launchWithMultipleJavaOpts() throws Exception {\n \t\tdoLaunch(\"launch-with-multiple-java-opts.sh\");",
    "output": "Find .conf file next to symlink to jar that's using the launch script\nFind .conf file next to symlink to jar that's using the launch script"
  },
  {
    "input": "diff --git a/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java b/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java\n--- a/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java\n+++ b/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java\n@@ -200,7 +200,6 @@ public void launchWithDoubleLinkSingleJavaOpt() throws Exception {\n \t\tdoLaunch(\"launch-with-double-link-single-java-opt.sh\");\n \t}\n \n-\n \t@Test\n \tpublic void launchWithMultipleJavaOpts() throws Exception {\n \t\tdoLaunch(\"launch-with-multiple-java-opts.sh\");",
    "output": "Find .conf file next to symlink to jar that's using the launch script"
  },
  {
    "input": "diff --git a/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java b/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java\n--- a/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java\n+++ b/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java\n@@ -59,6 +59,7 @@\n  * Integration tests for Spring Boot's launch script on OSs that use SysVinit.\n  *\n  * @author Andy Wilkinson\n+ * @author Ali Shahbour\n  */\n @RunWith(Parameterized.class)\n public class SysVinitLaunchScriptIT {\n@@ -194,6 +195,12 @@ public void launchWithSingleJavaOpt() throws Exception {\n \t\tdoLaunch(\"launch-with-single-java-opt.sh\");\n \t}\n \n+\t@Test\n+\tpublic void launchWithDoubleLinkSingleJavaOpt() throws Exception {\n+\t\tdoLaunch(\"launch-with-double-link-single-java-opt.sh\");\n+\t}\n+\n+\n \t@Test\n \tpublic void launchWithMultipleJavaOpts() throws Exception {\n \t\tdoLaunch(\"launch-with-multiple-java-opts.sh\");",
    "output": "Find .conf file next to symlink to jar that's using the launch script"
  },
  {
    "input": "diff --git a/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/HateoasObjenesisCacheDisablerTests.java b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/HateoasObjenesisCacheDisablerTests.java\n--- a/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/HateoasObjenesisCacheDisablerTests.java\n+++ b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/HateoasObjenesisCacheDisablerTests.java\n@@ -41,6 +41,8 @@ public class HateoasObjenesisCacheDisablerTests {\n \t@Before\n \t@After\n \tpublic void resetCacheField() {\n+\t\tReflectionTestUtils.setField(HateoasObjenesisCacheDisabler.class, \"cacheDisabled\",\n+\t\t\t\tfalse);\n \t\tthis.objenesis = (ObjenesisStd) ReflectionTestUtils\n \t\t\t\t.getField(DummyInvocationUtils.class, \"OBJENESIS\");\n \t\tReflectionTestUtils.setField(this.objenesis, \"cache\",",
    "output": "Try to make HateoasObjenesisCacheDisablerTests more robust"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/BackgroundPreinitializer.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/BackgroundPreinitializer.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/BackgroundPreinitializer.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/BackgroundPreinitializer.java\n@@ -46,7 +46,8 @@\n public class BackgroundPreinitializer\n \t\timplements ApplicationListener<SpringApplicationEvent> {\n \n-\tprivate static final AtomicBoolean preinitializationStarted = new AtomicBoolean(false);\n+\tprivate static final AtomicBoolean preinitializationStarted = new AtomicBoolean(\n+\t\t\tfalse);\n \n \tprivate static final CountDownLatch preinitializationComplete = new CountDownLatch(1);\n \n@@ -57,8 +58,9 @@ public void onApplicationEvent(SpringApplicationEvent event) {\n \t\t\t\tperformPreinitialization();\n \t\t\t}\n \t\t}\n-\t\tif (event instanceof ApplicationReadyEvent\n-\t\t\t\t|| event instanceof ApplicationFailedEvent) {\n+\t\tif ((event instanceof ApplicationReadyEvent\n+\t\t\t\t|| event instanceof ApplicationFailedEvent)\n+\t\t\t\t&& preinitializationStarted.get()) {\n \t\t\ttry {\n \t\t\t\tpreinitializationComplete.await();\n \t\t\t}",
    "output": "Only wait for background preinit to complete when it has started"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/SessionAutoConfiguration.java\n@@ -113,6 +113,8 @@ public void checkAvailableImplementations() {\n \t\t\t\t\t\"org.springframework.session.hazelcast.HazelcastSessionRepository\");\n \t\t\taddCandidate(candidates,\n \t\t\t\t\t\"org.springframework.session.jdbc.JdbcOperationsSessionRepository\");\n+\t\t\taddCandidate(candidates,\n+\t\t\t\t\t\"org.springframework.session.data.mongo.MongoOperationsSessionRepository\");\n \t\t\taddCandidate(candidates,\n \t\t\t\t\t\"org.springframework.session.data.redis.RedisOperationsSessionRepository\");\n \t\t\tStoreType storeType = this.sessionProperties.getStoreType();",
    "output": "Consider MongoOperationsSessionRepository when checking for duplicates"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java b/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n--- a/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n@@ -38,8 +38,8 @@\n  */\n public final class GradleCompatibilitySuite extends Suite {\n \n-\tprivate static final List<String> GRADLE_VERSIONS = Arrays.asList(\"default\",\n-\t\t\t\"4.1-rc-1\");\n+\tprivate static final List<String> GRADLE_VERSIONS = Arrays.asList(\"default\", \"4.1\",\n+\t\t\t\"4.2\");\n \n \tpublic GradleCompatibilitySuite(Class<?> clazz) throws InitializationError {\n \t\tsuper(clazz, createRunners(clazz));",
    "output": "Test the Gradle plugin against Gradle 4.1 and 4.2"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java\n@@ -166,9 +166,7 @@ static class JacksonObjectMapperBuilderConfiguration {\n \n \t\tprivate final ApplicationContext applicationContext;\n \n-\t\tJacksonObjectMapperBuilderConfiguration(ApplicationContext applicationContext,\n-\t\t\t\tJacksonProperties jacksonProperties,\n-\t\t\t\tList<Jackson2ObjectMapperBuilderCustomizer> customizers) {\n+\t\tJacksonObjectMapperBuilderConfiguration(ApplicationContext applicationContext) {\n \t\t\tthis.applicationContext = applicationContext;\n \t\t}\n ",
    "output": "Polish JacksonAutoConfiguration\nThis commit removes unused constructor parameters introduced in 0c2ecb7."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/MongoSessionConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/MongoSessionConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/MongoSessionConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/MongoSessionConfiguration.java\n@@ -18,6 +18,7 @@\n \n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Conditional;\n@@ -33,6 +34,7 @@\n  * @author Stephane Nicoll\n  */\n @Configuration\n+@ConditionalOnClass(MongoHttpSessionConfiguration.class)\n @ConditionalOnMissingBean(SessionRepository.class)\n @ConditionalOnBean(MongoOperations.class)\n @Conditional(SessionCondition.class)",
    "output": "Ensure that MongoSessionConfiguration backs off when classes are missing"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-session/src/main/java/sample/session/SampleSessionApplication.java b/spring-boot-samples/spring-boot-sample-session/src/main/java/sample/session/SampleSessionApplication.java\n--- a/spring-boot-samples/spring-boot-sample-session/src/main/java/sample/session/SampleSessionApplication.java\n+++ b/spring-boot-samples/spring-boot-sample-session/src/main/java/sample/session/SampleSessionApplication.java\n@@ -26,6 +26,10 @@\n @SpringBootApplication\n public class SampleSessionApplication {\n \n+\tpublic static void main(String[] args) throws Exception {\n+\t\tSpringApplication.run(SampleSessionApplication.class);\n+\t}\n+\n \t@Bean\n \tpublic UserDetailsService userDetailsService() {\n \t\tInMemoryUserDetailsManager manager = new InMemoryUserDetailsManager();\n@@ -34,8 +38,4 @@ public UserDetailsService userDetailsService() {\n \t\treturn manager;\n \t}\n \n-\tpublic static void main(String[] args) throws Exception {\n-\t\tSpringApplication.run(SampleSessionApplication.class);\n-\t}\n-\n }",
    "output": "Add actuator endpoint for finding and deleting sessions"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/servlet/WebMvcMetrics.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/servlet/WebMvcMetrics.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/servlet/WebMvcMetrics.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/servlet/WebMvcMetrics.java\n@@ -85,7 +85,7 @@ public WebMvcMetrics(MeterRegistry registry, WebMvcTagsProvider tagsProvider,\n \t\tthis.recordAsPercentiles = recordAsPercentiles;\n \t}\n \n-\tvoid tagWithException(Throwable exception) {\n+\tpublic void tagWithException(Throwable exception) {\n \t\tRequestAttributes attributes = RequestContextHolder.getRequestAttributes();\n \t\tattributes.setAttribute(EXCEPTION_ATTRIBUTE, exception,\n \t\t\t\tRequestAttributes.SCOPE_REQUEST);",
    "output": "Make WebMvcMetrics#tagWithException public"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/servlet/WebMvcMetrics.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/servlet/WebMvcMetrics.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/servlet/WebMvcMetrics.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/servlet/WebMvcMetrics.java\n@@ -85,7 +85,7 @@ public WebMvcMetrics(MeterRegistry registry, WebMvcTagsProvider tagsProvider,\n \t\tthis.recordAsPercentiles = recordAsPercentiles;\n \t}\n \n-\tvoid tagWithException(Throwable exception) {\n+\tpublic void tagWithException(Throwable exception) {\n \t\tRequestAttributes attributes = RequestContextHolder.getRequestAttributes();\n \t\tattributes.setAttribute(EXCEPTION_ATTRIBUTE, exception,\n \t\t\t\tRequestAttributes.SCOPE_REQUEST);",
    "output": "Make WebMvcMetrics#tagWithException public"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/BinderTests.java b/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/BinderTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/BinderTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/BinderTests.java\n@@ -199,15 +199,15 @@ public void bindToJavaBeanShouldTriggerOnSuccess() throws Exception {\n \t@Test\n \tpublic void bindWhenHasMalformedDateShouldThrowException() throws Exception {\n \t\tthis.thrown.expectCause(instanceOf(ConversionFailedException.class));\n-\t\tthis.sources.add(new MockConfigurationPropertySource(\"foo\", \"2014-04-01\"));\n+\t\tthis.sources.add(new MockConfigurationPropertySource(\"foo\", \"2014-04-01T01:30:00.000-05:00\"));\n \t\tthis.binder.bind(\"foo\", Bindable.of(LocalDate.class));\n \t}\n \n \t@Test\n \tpublic void bindWhenHasAnnotationsShouldChangeConvertedValue() throws Exception {\n-\t\tthis.sources.add(new MockConfigurationPropertySource(\"foo\", \"2014-04-01\"));\n+\t\tthis.sources.add(new MockConfigurationPropertySource(\"foo\", \"2014-04-01T01:30:00.000-05:00\"));\n \t\tDateTimeFormat annotation = AnnotationUtils.synthesizeAnnotation(\n-\t\t\t\tCollections.singletonMap(\"iso\", DateTimeFormat.ISO.DATE),\n+\t\t\t\tCollections.singletonMap(\"iso\", DateTimeFormat.ISO.DATE_TIME),\n \t\t\t\tDateTimeFormat.class, null);\n \t\tLocalDate result = this.binder\n \t\t\t\t.bind(\"foo\", Bindable.of(LocalDate.class).withAnnotations(annotation))",
    "output": "Use date that fails with the fallback formatter"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/mongo/MongoPropertiesTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/mongo/MongoPropertiesTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/mongo/MongoPropertiesTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/mongo/MongoPropertiesTests.java\n@@ -49,6 +49,7 @@ public void canBindCharArrayPassword() {\n \t}\n \n \t@Test\n+\t@SuppressWarnings(\"deprecation\")\n \tpublic void allMongoClientOptionsCanBeSet() {\n \t\tMongoClientOptions.Builder builder = MongoClientOptions.builder();\n \t\tbuilder.alwaysUseMBeans(true);\n@@ -57,7 +58,7 @@ public void allMongoClientOptionsCanBeSet() {\n \t\tbuilder.cursorFinalizerEnabled(false);\n \t\tbuilder.description(\"test\");\n \t\tbuilder.maxWaitTime(120001);\n-\t\tbuilder.socketKeepAlive(true);\n+\t\tbuilder.socketKeepAlive(false);\n \t\tbuilder.socketTimeout(1000);\n \t\tbuilder.threadsAllowedToBlockForConnectionMultiplier(6);\n \t\tbuilder.minConnectionsPerHost(0);",
    "output": "Upgrade to Mongodb 3.5.0"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/client/MetricsClientHttpRequestInterceptor.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/client/MetricsClientHttpRequestInterceptor.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/client/MetricsClientHttpRequestInterceptor.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/web/client/MetricsClientHttpRequestInterceptor.java\n@@ -102,7 +102,7 @@ private Timer.Builder getTimeBuilder(HttpRequest request,\n \t\t\t\t.tags(this.tagProvider.getTags(urlTemplate.get(), request, response))\n \t\t\t\t.description(\"Timer of RestTemplate operation\");\n \t\tif (this.recordPercentiles) {\n-\t\t\tbuilder = builder.histogram(Histogram.percentiles());\n+\t\t\tbuilder = builder.histogram(Histogram.percentilesTime());\n \t\t}\n \t\treturn builder;\n \t}",
    "output": "Use correct `percentilesTime` call\nUpdate `MetricsClientHttpRequestInterceptor` to use `percentilesTime`\nrather than `percentiles`."
  },
  {
    "input": "diff --git a/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfiguration.java b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfiguration.java\n--- a/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfiguration.java\n+++ b/spring-boot-actuator-autoconfigure/src/main/java/org/springframework/boot/actuate/autoconfigure/metrics/MetricsAutoConfiguration.java\n@@ -114,10 +114,12 @@ static class MeterRegistryConfigurationSupport {\n \n \t\tMeterRegistryConfigurationSupport(MeterRegistry registry,\n \t\t\t\tObjectProvider<Collection<MeterRegistryConfigurer>> configurers,\n-\t\t\t\tMetricsProperties config, Collection<MeterBinder> binders) {\n+\t\t\t\tMetricsProperties config,\n+\t\t\t\tObjectProvider<Collection<MeterBinder>> binders) {\n \t\t\tconfigurers.getIfAvailable(Collections::emptyList)\n \t\t\t\t\t.forEach((configurer) -> configurer.configureRegistry(registry));\n-\t\t\tbinders.forEach((binder) -> binder.bindTo(registry));\n+\t\t\tbinders.getIfAvailable(Collections::emptyList)\n+\t\t\t\t\t.forEach((binder) -> binder.bindTo(registry));\n \t\t\tif (config.isUseGlobalRegistry()) {\n \t\t\t\tMetrics.addRegistry(registry);\n \t\t\t}",
    "output": "Add missing ObjectProvider for missing beans\nUpdate `MetricsAutoConfiguration` to use an `ObjectProvider` to guard\nagainst missing beans."
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/management/HeapDumpWebEndpoint.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/management/HeapDumpWebEndpoint.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/management/HeapDumpWebEndpoint.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/management/HeapDumpWebEndpoint.java\n@@ -40,7 +40,6 @@\n import org.springframework.boot.actuate.endpoint.annotation.Endpoint;\n import org.springframework.boot.actuate.endpoint.annotation.ReadOperation;\n import org.springframework.boot.actuate.endpoint.web.WebEndpointResponse;\n-import org.springframework.boot.context.properties.ConfigurationProperties;\n import org.springframework.core.io.FileSystemResource;\n import org.springframework.core.io.Resource;\n import org.springframework.http.HttpStatus;\n@@ -56,7 +55,6 @@\n  * @author Andy Wilkinson\n  * @since 2.0.0\n  */\n-@ConfigurationProperties(prefix = \"endpoints.heapdump\")\n @Endpoint(id = \"heapdump\", exposure = EndpointExposure.WEB)\n public class HeapDumpWebEndpoint {\n ",
    "output": "Remove useless ConfigurationProperties on HeapDumpEndpoint"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/web/reactive/result/view/MustacheView.java b/spring-boot/src/main/java/org/springframework/boot/web/reactive/result/view/MustacheView.java\n--- a/spring-boot/src/main/java/org/springframework/boot/web/reactive/result/view/MustacheView.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/web/reactive/result/view/MustacheView.java\n@@ -33,6 +33,7 @@\n \n import org.springframework.core.io.Resource;\n import org.springframework.core.io.buffer.DataBuffer;\n+import org.springframework.core.io.buffer.DataBufferUtils;\n import org.springframework.http.MediaType;\n import org.springframework.web.reactive.result.view.AbstractUrlBasedView;\n import org.springframework.web.reactive.result.view.View;\n@@ -91,7 +92,8 @@ protected Mono<Void> renderInternal(Map<String, Object> model, MediaType content\n \t\t\t\twriter.flush();\n \t\t\t}\n \t\t}\n-\t\tcatch (Throwable ex) {\n+\t\tcatch (Exception ex) {\n+\t\t\tDataBufferUtils.release(dataBuffer);\n \t\t\treturn Mono.error(ex);\n \t\t}\n \t\treturn exchange.getResponse().writeWith(Flux.just(dataBuffer));",
    "output": "Polish\nRelease allocated `DataBuffer` if an error happens during template\nprocessing. Otherwise, this buffer will be automatically released when\nwritten to the exchange."
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-jersey/src/test/java/sample/jersey/SampleJerseyApplicationTests.java b/spring-boot-samples/spring-boot-sample-jersey/src/test/java/sample/jersey/SampleJerseyApplicationTests.java\n--- a/spring-boot-samples/spring-boot-sample-jersey/src/test/java/sample/jersey/SampleJerseyApplicationTests.java\n+++ b/spring-boot-samples/spring-boot-sample-jersey/src/test/java/sample/jersey/SampleJerseyApplicationTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2016 the original author or authors.\n+ * Copyright 2012-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -58,4 +58,12 @@ public void validation() {\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.BAD_REQUEST);\n \t}\n \n+\t@Test\n+\tpublic void actuatorStatus() {\n+\t\tResponseEntity<String> entity = this.restTemplate\n+\t\t\t\t.getForEntity(\"/application/status\", String.class);\n+\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\n+\t\tassertThat(entity.getBody()).isEqualTo(\"{\\\"status\\\":\\\"UP\\\"}\");\n+\t}\n+\n }",
    "output": "Add actuator to jersey sample"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-webflux/src/test/java/sample/webflux/SampleWebFluxApplicationTests.java b/spring-boot-samples/spring-boot-sample-webflux/src/test/java/sample/webflux/SampleWebFluxApplicationTests.java\n--- a/spring-boot-samples/spring-boot-sample-webflux/src/test/java/sample/webflux/SampleWebFluxApplicationTests.java\n+++ b/spring-boot-samples/spring-boot-sample-webflux/src/test/java/sample/webflux/SampleWebFluxApplicationTests.java\n@@ -40,17 +40,24 @@ public class SampleWebFluxApplicationTests {\n \tprivate WebTestClient webClient;\n \n \t@Test\n-\tpublic void testWelcome() throws Exception {\n+\tpublic void testWelcome() {\n \t\tthis.webClient.get().uri(\"/\").accept(MediaType.TEXT_PLAIN).exchange()\n \t\t\t\t.expectBody(String.class).isEqualTo(\"Hello World\");\n \t}\n \n \t@Test\n-\tpublic void testEcho() throws Exception {\n+\tpublic void testEcho() {\n \t\tthis.webClient.post().uri(\"/echo\").contentType(MediaType.TEXT_PLAIN)\n \t\t\t\t.accept(MediaType.TEXT_PLAIN)\n \t\t\t\t.body(Mono.just(\"Hello WebFlux!\"), String.class).exchange()\n \t\t\t\t.expectBody(String.class).isEqualTo(\"Hello WebFlux!\");\n \t}\n \n+\t@Test\n+\tpublic void testActuatorStatus() {\n+\t\tthis.webClient.get().uri(\"/application/status\").accept(MediaType.APPLICATION_JSON)\n+\t\t\t\t.exchange().expectStatus().isOk().expectBody()\n+\t\t\t\t.json(\"{\\\"status\\\":\\\"UP\\\"}\");\n+\t}\n+\n }",
    "output": "Add actuator to webflux sample"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java\n--- a/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java\n+++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java\n@@ -74,8 +74,8 @@ public class ConfigurationMetadataAnnotationProcessor extends AbstractProcessor\n \tstatic final String DEPRECATED_CONFIGURATION_PROPERTY_ANNOTATION = \"org.springframework.boot.\"\n \t\t\t+ \"context.properties.DeprecatedConfigurationProperty\";\n \n-\tstatic final String ENDPOINT_ANNOTATION = \"org.springframework.boot.\"\n-\t\t\t+ \"endpoint.Endpoint\";\n+\tstatic final String ENDPOINT_ANNOTATION = \"org.springframework.boot.actuate.\"\n+\t\t\t+ \"endpoint.annotation.Endpoint\";\n \n \tstatic final String LOMBOK_DATA_ANNOTATION = \"lombok.Data\";\n ",
    "output": "Restore processing of Endpoint meta-data"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Repackager.java b/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Repackager.java\n--- a/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Repackager.java\n+++ b/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Repackager.java\n@@ -78,8 +78,12 @@ public Repackager(File source) {\n \t}\n \n \tpublic Repackager(File source, LayoutFactory layoutFactory) {\n-\t\tif (source == null || !source.exists() || !source.isFile()) {\n-\t\t\tthrow new IllegalArgumentException(\"Source must refer to an existing file\");\n+\t\tif (source == null) {\n+\t\t\tthrow new IllegalArgumentException(\"Source file must be provided\");\n+\t\t}\n+\t\tif (!source.exists() || !source.isFile()) {\n+\t\t\tthrow new IllegalArgumentException(\"Source must refer to an existing file, \"\n+\t\t\t\t\t+ \"got \" + source.getAbsolutePath());\n \t\t}\n \t\tthis.source = source.getAbsoluteFile();\n \t\tthis.layoutFactory = layoutFactory;",
    "output": "Improve exception message for invalid source\nImprove exception message for invalid source"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Repackager.java b/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Repackager.java\n--- a/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Repackager.java\n+++ b/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Repackager.java\n@@ -79,10 +79,11 @@ public Repackager(File source) {\n \n \tpublic Repackager(File source, LayoutFactory layoutFactory) {\n \t\tif (source == null) {\n-\t\t\tthrow new IllegalArgumentException(\"Source must refer to an existing file. No source file has been provided.\");\n+\t\t\tthrow new IllegalArgumentException(\"Source file must be provided\");\n \t\t}\n \t\tif (!source.exists() || !source.isFile()) {\n-\t\t\tthrow new IllegalArgumentException(\"Source must refer to an existing file. Provided value is \" + source.getAbsolutePath());\n+\t\t\tthrow new IllegalArgumentException(\"Source must refer to an existing file, \"\n+\t\t\t\t\t+ \"got \" + source.getAbsolutePath());\n \t\t}\n \t\tthis.source = source.getAbsoluteFile();\n \t\tthis.layoutFactory = layoutFactory;",
    "output": "Improve exception message for invalid source"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Repackager.java b/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Repackager.java\n--- a/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Repackager.java\n+++ b/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Repackager.java\n@@ -78,8 +78,11 @@ public Repackager(File source) {\n \t}\n \n \tpublic Repackager(File source, LayoutFactory layoutFactory) {\n-\t\tif (source == null || !source.exists() || !source.isFile()) {\n-\t\t\tthrow new IllegalArgumentException(\"Source must refer to an existing file\");\n+\t\tif (source == null) {\n+\t\t\tthrow new IllegalArgumentException(\"Source must refer to an existing file. No source file has been provided.\");\n+\t\t}\n+\t\tif (!source.exists() || !source.isFile()) {\n+\t\t\tthrow new IllegalArgumentException(\"Source must refer to an existing file. Provided value is \" + source.getAbsolutePath());\n \t\t}\n \t\tthis.source = source.getAbsoluteFile();\n \t\tthis.layoutFactory = layoutFactory;",
    "output": "Improve exception message for invalid source"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/EnvironmentEndpointTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/EnvironmentEndpointTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/EnvironmentEndpointTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/EnvironmentEndpointTests.java\n@@ -242,13 +242,6 @@ public void propertyEntry() {\n \t\t\t\t.isEqualTo(\"bar\");\n \t}\n \n-\t@Test\n-\tpublic void propertyEntryNoMatchReturnNull() {\n-\t\tEnvironmentDescriptor env = new EnvironmentEndpoint(new StandardEnvironment())\n-\t\t\t\t.environmentEntry(\"this.property.does-not-exist\");\n-\t\tassertThat(env).isNull();\n-\t}\n-\n \tprivate void clearSystemProperties(String... properties) {\n \t\tfor (String property : properties) {\n \t\t\tSystem.clearProperty(property);",
    "output": "Fix build failure"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CompositeReactiveHealthIndicator.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CompositeReactiveHealthIndicator.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CompositeReactiveHealthIndicator.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CompositeReactiveHealthIndicator.java\n@@ -94,7 +94,7 @@ public CompositeReactiveHealthIndicator timeoutStrategy(long timeout,\n \tpublic Mono<Health> health() {\n \t\treturn Flux.fromIterable(this.indicators.entrySet())\n \t\t\t\t.flatMap((entry) -> Mono.just(entry.getKey())\n-\t\t\t\t\t\t.and(entry.getValue().health().compose(this.timeoutCompose)))\n+\t\t\t\t\t\t.zipWith(entry.getValue().health().compose(this.timeoutCompose)))\n \t\t\t\t.collectMap(Tuple2::getT1, Tuple2::getT2)\n \t\t\t\t.map(this.healthAggregator::aggregate);\n \t}",
    "output": "Fix build failure"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2RestOperationsConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2RestOperationsConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2RestOperationsConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2RestOperationsConfiguration.java\n@@ -29,7 +29,6 @@\n import org.springframework.boot.autoconfigure.condition.NoneNestedConditions;\n import org.springframework.boot.autoconfigure.condition.SpringBootCondition;\n import org.springframework.boot.autoconfigure.security.SecurityProperties;\n-import org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2RestOperationsConfiguration.OAuth2ClientIdCondition;\n import org.springframework.boot.bind.RelaxedPropertyResolver;\n import org.springframework.boot.context.properties.ConfigurationProperties;\n import org.springframework.boot.web.servlet.FilterRegistrationBean;",
    "output": "Document JWK property"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/jdbc/DatabaseDriver.java b/spring-boot/src/main/java/org/springframework/boot/jdbc/DatabaseDriver.java\n--- a/spring-boot/src/main/java/org/springframework/boot/jdbc/DatabaseDriver.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/jdbc/DatabaseDriver.java\n@@ -123,7 +123,7 @@ protected boolean matchProductName(String productName) {\n \t * Firebird.\n \t */\n \tFIREBIRD(\"Firebird\", \"org.firebirdsql.jdbc.FBDriver\",\n-\t\t\t\"org.firebirdsql.pool.FBConnectionPoolDataSource\",\n+\t\t\t\"org.firebirdsql.ds.FBXADataSource\",\n \t\t\t\"SELECT 1 FROM RDB$DATABASE\") {\n \n \t\t@Override",
    "output": "Fix XA DataSource class name for Firebird"
  },
  {
    "input": "diff --git a/spring-boot-test/src/main/java/org/springframework/boot/test/util/TestPropertyValues.java b/spring-boot-test/src/main/java/org/springframework/boot/test/util/TestPropertyValues.java\n--- a/spring-boot-test/src/main/java/org/springframework/boot/test/util/TestPropertyValues.java\n+++ b/spring-boot-test/src/main/java/org/springframework/boot/test/util/TestPropertyValues.java\n@@ -24,8 +24,7 @@\n import java.util.Objects;\n import java.util.concurrent.Callable;\n import java.util.stream.Stream;\n-\n-import com.google.common.collect.Streams;\n+import java.util.stream.StreamSupport;\n \n import org.springframework.boot.context.properties.source.ConfigurationPropertySources;\n import org.springframework.context.ApplicationContext;\n@@ -179,7 +178,7 @@ public static TestPropertyValues of(Iterable<String> pairs) {\n \t\tif (pairs == null) {\n \t\t\treturn empty();\n \t\t}\n-\t\treturn of(Streams.stream(pairs));\n+\t\treturn of(StreamSupport.stream(pairs.spliterator(), false));\n \t}\n \n \t/**",
    "output": "Remove import on Guava"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/Neo4jHealthIndicator.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/Neo4jHealthIndicator.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/Neo4jHealthIndicator.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/Neo4jHealthIndicator.java\n@@ -27,6 +27,7 @@\n  * statement.\n  *\n  * @author Eric Spiegelberg\n+ * @author Stephane Nicoll\n  * @since 2.0.0\n  */\n public class Neo4jHealthIndicator extends AbstractHealthIndicator {\n@@ -51,8 +52,8 @@ public Neo4jHealthIndicator(SessionFactory sessionFactory) {\n \tprotected void doHealthCheck(Health.Builder builder) throws Exception {\n \t\tSession session = this.sessionFactory.openSession();\n \t\tResult result = session.query(CYPHER, Collections.emptyMap());\n-\t\tint nodes = (int) result.queryResults().iterator().next().get(\"nodes\");\n-\t\tbuilder.up().withDetail(\"nodes\", nodes);\n+\t\tbuilder.up().withDetail(\"nodes\", result.queryResults()\n+\t\t\t\t.iterator().next().get(\"nodes\"));\n \t}\n \n }",
    "output": "Remove useless cast\nThe number of nodes can be added to the details without the need to cast\nit."
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/infrastructure/JmxEndpointExporterProperties.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/infrastructure/JmxEndpointExporterProperties.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/infrastructure/JmxEndpointExporterProperties.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/endpoint/infrastructure/JmxEndpointExporterProperties.java\n@@ -28,7 +28,7 @@\n  * @author Stephane Nicoll\n  * @since 2.0.0\n  */\n-@ConfigurationProperties(\"management.jmx\")\n+@ConfigurationProperties(\"management.endpoints.jmx\")\n public class JmxEndpointExporterProperties {\n \n \t/**",
    "output": "Move management.jmx to management.endpoints.jmx\nFor consistency with #10053, this commit moves the JMX specific endpoint\nproperties to `management.endpoints.jmx`."
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/web/context/ServerPortInfoApplicationContextInitializer.java b/spring-boot/src/main/java/org/springframework/boot/web/context/ServerPortInfoApplicationContextInitializer.java\n--- a/spring-boot/src/main/java/org/springframework/boot/web/context/ServerPortInfoApplicationContextInitializer.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/web/context/ServerPortInfoApplicationContextInitializer.java\n@@ -23,6 +23,7 @@\n import org.springframework.boot.web.server.WebServer;\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.ApplicationContextInitializer;\n+import org.springframework.context.ApplicationListener;\n import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.core.env.ConfigurableEnvironment;\n import org.springframework.core.env.Environment;\n@@ -48,15 +49,15 @@\n  * @since 2.0.0\n  */\n public class ServerPortInfoApplicationContextInitializer\n-\t\timplements ApplicationContextInitializer<ConfigurableApplicationContext> {\n+\t\timplements ApplicationContextInitializer<ConfigurableApplicationContext>, ApplicationListener<WebServerInitializedEvent> {\n \n \t@Override\n \tpublic void initialize(ConfigurableApplicationContext applicationContext) {\n-\t\tapplicationContext.addApplicationListener(\n-\t\t\t\t(WebServerInitializedEvent event) -> onApplicationEvent(event));\n+\t\tapplicationContext.addApplicationListener(this);\n \t}\n \n-\tprotected void onApplicationEvent(WebServerInitializedEvent event) {\n+\t@Override\n+\tpublic void onApplicationEvent(WebServerInitializedEvent event) {\n \t\tString propertyName = \"local.\" + event.getServerId() + \".port\";\n \t\tsetPortProperty(event.getApplicationContext(), propertyName,\n \t\t\t\tevent.getWebServer().getPort());",
    "output": "Restore WebServerInitializedEvent listener registration\nThis commit fixes ServerPortInfoApplicationContextInitializer so that\nis registers a listener against `WebServerInitializedEvent`.\nA former polish to use a lambda actually introduced a regression as the\nlistener was registered as `ApplicationListener<?>`."
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyServletWebServerFactory.java b/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyServletWebServerFactory.java\n--- a/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyServletWebServerFactory.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/web/embedded/jetty/JettyServletWebServerFactory.java\n@@ -747,7 +747,7 @@ public boolean isContainedIn(Resource resource) throws MalformedURLException {\n \n \t\t@Override\n \t\tpublic void close() {\n-\t\t\tclose();\n+\t\t\tthis.delegate.close();\n \t\t}\n \n \t\t@Override",
    "output": "Calling delegate on LoaderHidingResource#close()"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfiguration.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2016 the original author or authors.\n+ * Copyright 2012-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -129,7 +129,7 @@ public FreeMarkerConfigurationFactoryBean freeMarkerConfiguration() {\n \t}\n \n \t@Configuration\n-\t@ConditionalOnClass(Servlet.class)\n+\t@ConditionalOnClass({ Servlet.class, FreeMarkerConfigurer.class })\n \t@ConditionalOnWebApplication\n \tpublic static class FreeMarkerWebConfiguration extends FreeMarkerConfiguration {\n ",
    "output": "Improve conditions on FreeMarkerWebConfiguration\nThis commit makes sure to prevent the Freemarker web auto-configuration\nto kick in if `spring-webmvc` is not on the classpath."
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/jta/narayana/NarayanaDataSourceBeanTests.java b/spring-boot/src/test/java/org/springframework/boot/jta/narayana/NarayanaDataSourceBeanTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/jta/narayana/NarayanaDataSourceBeanTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/jta/narayana/NarayanaDataSourceBeanTests.java\n@@ -83,7 +83,7 @@ public void shouldGetConnectionAndCommit() throws SQLException {\n \t\tConnection mockConnection = mock(Connection.class);\n \t\tXAConnection mockXaConnection = mock(XAConnection.class);\n \t\tgiven(mockXaConnection.getConnection()).willReturn(mockConnection);\n-\t\tgiven(this.dataSource.getXAConnection(\"\", \"\")).willReturn(mockXaConnection);\n+\t\tgiven(this.dataSource.getXAConnection()).willReturn(mockXaConnection);\n \n \t\tProperties properties = new Properties();\n \t\tproperties.put(TransactionalDriver.XADataSource, this.dataSource);\n@@ -93,7 +93,7 @@ public void shouldGetConnectionAndCommit() throws SQLException {\n \n \t\tconnection.commit();\n \n-\t\tverify(this.dataSource, times(1)).getXAConnection(\"\", \"\");\n+\t\tverify(this.dataSource, times(1)).getXAConnection();\n \t\tverify(mockXaConnection, times(1)).getConnection();\n \t\tverify(mockConnection, times(1)).commit();\n \t}",
    "output": "Upgrade to Narayana 5.5.30.Final"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/jta/narayana/NarayanaDataSourceBeanTests.java b/spring-boot/src/test/java/org/springframework/boot/jta/narayana/NarayanaDataSourceBeanTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/jta/narayana/NarayanaDataSourceBeanTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/jta/narayana/NarayanaDataSourceBeanTests.java\n@@ -83,7 +83,7 @@ public void shouldGetConnectionAndCommit() throws SQLException {\n \t\tConnection mockConnection = mock(Connection.class);\n \t\tXAConnection mockXaConnection = mock(XAConnection.class);\n \t\tgiven(mockXaConnection.getConnection()).willReturn(mockConnection);\n-\t\tgiven(this.dataSource.getXAConnection(\"\", \"\")).willReturn(mockXaConnection);\n+\t\tgiven(this.dataSource.getXAConnection()).willReturn(mockXaConnection);\n \n \t\tProperties properties = new Properties();\n \t\tproperties.put(TransactionalDriver.XADataSource, this.dataSource);\n@@ -93,7 +93,7 @@ public void shouldGetConnectionAndCommit() throws SQLException {\n \n \t\tconnection.commit();\n \n-\t\tverify(this.dataSource, times(1)).getXAConnection(\"\", \"\");\n+\t\tverify(this.dataSource, times(1)).getXAConnection();\n \t\tverify(mockXaConnection, times(1)).getConnection();\n \t\tverify(mockConnection, times(1)).commit();\n \t}",
    "output": "Upgrade to Narayana 5.5.30.Final"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/SpringBootCondition.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/SpringBootCondition.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/SpringBootCondition.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/SpringBootCondition.java\n@@ -158,4 +158,12 @@ protected final boolean matches(ConditionContext context,\n \t\treturn condition.matches(context, metadata);\n \t}\n \n+\t/**\n+\t * Return the {@link Log logger} used by this instance of the condition.\n+\t * @return the {@link Log logger}\n+\t */\n+\tprotected final Log getLogger() {\n+\t\treturn this.logger;\n+\t}\n+\n }",
    "output": "Expose SpringBootCondition's logger\nExpose SpringBootCondition's logger"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/SpringBootCondition.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/SpringBootCondition.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/SpringBootCondition.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/SpringBootCondition.java\n@@ -18,7 +18,7 @@\n \n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n-import org.slf4j.Logger;\n+\n import org.springframework.context.annotation.Condition;\n import org.springframework.context.annotation.ConditionContext;\n import org.springframework.core.type.AnnotatedTypeMetadata;\n@@ -159,11 +159,11 @@ protected final boolean matches(ConditionContext context,\n \t}\n \n \t/**\n-\t * Returns the instance of {@link Logger} used by this\n-\t * instance of the condition.\n-\t * @return instance of {@link Logger}\n+\t * Return the {@link Log logger} used by this instance of the condition.\n+\t * @return the {@link Log logger}\n \t */\n \tprotected final Log getLogger() {\n \t\treturn this.logger;\n \t}\n+\n }",
    "output": "Expose SpringBootCondition's logger"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/SpringBootCondition.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/SpringBootCondition.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/SpringBootCondition.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/SpringBootCondition.java\n@@ -18,7 +18,7 @@\n \n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n-\n+import org.slf4j.Logger;\n import org.springframework.context.annotation.Condition;\n import org.springframework.context.annotation.ConditionContext;\n import org.springframework.core.type.AnnotatedTypeMetadata;\n@@ -158,4 +158,12 @@ protected final boolean matches(ConditionContext context,\n \t\treturn condition.matches(context, metadata);\n \t}\n \n+\t/**\n+\t * Returns the instance of {@link Logger} used by this\n+\t * instance of the condition.\n+\t * @return instance of {@link Logger}\n+\t */\n+\tprotected final Log getLogger() {\n+\t\treturn this.logger;\n+\t}\n }",
    "output": "Expose SpringBootCondition's logger"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/test/java/org/springframework/boot/cli/SampleIntegrationTests.java b/spring-boot-cli/src/test/java/org/springframework/boot/cli/SampleIntegrationTests.java\n--- a/spring-boot-cli/src/test/java/org/springframework/boot/cli/SampleIntegrationTests.java\n+++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/SampleIntegrationTests.java\n@@ -74,8 +74,8 @@ public void jobSample() throws Exception {\n \t@Test\n \tpublic void oauth2Sample() throws Exception {\n \t\tString output = this.cli.run(\"oauth2.groovy\");\n-\t\tassertThat(output).contains(\"security.oauth2.client.clientId\");\n-\t\tassertThat(output).contains(\"security.oauth2.client.secret =\");\n+\t\tassertThat(output).contains(\"security.oauth2.client.client-id\");\n+\t\tassertThat(output).contains(\"security.oauth2.client.client-secret =\");\n \t}\n \n \t@Test",
    "output": "Fix OAuth2 sample integration test to expect corrected property names"
  },
  {
    "input": "diff --git a/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/properties/AnnotationsPropertySource.java b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/properties/AnnotationsPropertySource.java\n--- a/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/properties/AnnotationsPropertySource.java\n+++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/properties/AnnotationsPropertySource.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2016 the original author or authors.\n+ * Copyright 2012-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -85,10 +85,13 @@ private void collectProperties(Class<?> root, Class<?> source,\n \n \tprivate List<Annotation> getMergedAnnotations(Class<?> root, Class<?> source) {\n \t\tList<Annotation> mergedAnnotations = new ArrayList<Annotation>();\n-\t\tfor (Annotation annotation : AnnotationUtils.getAnnotations(source)) {\n-\t\t\tif (!AnnotationUtils.isInJavaLangAnnotationPackage(annotation)) {\n-\t\t\t\tmergedAnnotations\n-\t\t\t\t\t\t.add(findMergedAnnotation(root, annotation.annotationType()));\n+\t\tAnnotation[] annotations = AnnotationUtils.getAnnotations(source);\n+\t\tif (annotations != null) {\n+\t\t\tfor (Annotation annotation : annotations) {\n+\t\t\t\tif (!AnnotationUtils.isInJavaLangAnnotationPackage(annotation)) {\n+\t\t\t\t\tmergedAnnotations\n+\t\t\t\t\t\t\t.add(findMergedAnnotation(root, annotation.annotationType()));\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n \t\treturn mergedAnnotations;",
    "output": "Avoid NPE in AnnotationsPropertySource if getAnnotations returns null"
  },
  {
    "input": "diff --git a/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/properties/PropertyMappingContextCustomizer.java b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/properties/PropertyMappingContextCustomizer.java\n--- a/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/properties/PropertyMappingContextCustomizer.java\n+++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/properties/PropertyMappingContextCustomizer.java\n@@ -79,12 +79,15 @@ public Object postProcessBeforeInitialization(Object bean, String beanName)\n \t\t\tSet<Class<?>> components = new LinkedHashSet<Class<?>>();\n \t\t\tSet<Class<?>> propertyMappings = new LinkedHashSet<Class<?>>();\n \t\t\twhile (beanClass != null) {\n-\t\t\t\tfor (Annotation annotation : AnnotationUtils.getAnnotations(beanClass)) {\n-\t\t\t\t\tif (isAnnotated(annotation, Component.class)) {\n-\t\t\t\t\t\tcomponents.add(annotation.annotationType());\n-\t\t\t\t\t}\n-\t\t\t\t\tif (isAnnotated(annotation, PropertyMapping.class)) {\n-\t\t\t\t\t\tpropertyMappings.add(annotation.annotationType());\n+\t\t\t\tAnnotation[] annotations = AnnotationUtils.getAnnotations(beanClass);\n+\t\t\t\tif (annotations != null) {\n+\t\t\t\t\tfor (Annotation annotation : annotations) {\n+\t\t\t\t\t\tif (isAnnotated(annotation, Component.class)) {\n+\t\t\t\t\t\t\tcomponents.add(annotation.annotationType());\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tif (isAnnotated(annotation, PropertyMapping.class)) {\n+\t\t\t\t\t\t\tpropertyMappings.add(annotation.annotationType());\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tbeanClass = beanClass.getSuperclass();",
    "output": "Avoid NPE in PropertyMappingContextCustomizer"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/authserver/OAuth2AuthorizationServerConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/authserver/OAuth2AuthorizationServerConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/authserver/OAuth2AuthorizationServerConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/authserver/OAuth2AuthorizationServerConfiguration.java\n@@ -164,7 +164,8 @@ public void init() {\n \t\t\tString prefix = \"security.oauth2.client\";\n \t\t\tboolean defaultSecret = this.credentials.isDefaultSecret();\n \t\t\tlogger.info(String.format(\n-\t\t\t\t\t\"Initialized OAuth2 Client%n%n%s.clientId = %s%n%s.secret = %s%n%n\",\n+\t\t\t\t\t\"Initialized OAuth2 Client%n%n%s.client-id = %s%n\"\n+\t\t\t\t\t\t\t+ \"%s.client-secret = %s%n%n\",\n \t\t\t\t\tprefix, this.credentials.getClientId(), prefix,\n \t\t\t\t\tdefaultSecret ? this.credentials.getClientSecret() : \"****\"));\n \t\t}",
    "output": "Fix logged property names when initializing OAuth2 client\nFix logged property names when initializing OAuth2 client"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/authserver/OAuth2AuthorizationServerConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/authserver/OAuth2AuthorizationServerConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/authserver/OAuth2AuthorizationServerConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/authserver/OAuth2AuthorizationServerConfiguration.java\n@@ -164,7 +164,8 @@ public void init() {\n \t\t\tString prefix = \"security.oauth2.client\";\n \t\t\tboolean defaultSecret = this.credentials.isDefaultSecret();\n \t\t\tlogger.info(String.format(\n-\t\t\t\t\t\"Initialized OAuth2 Client%n%n%s.client-id = %s%n%s.client-secret = %s%n%n\",\n+\t\t\t\t\t\"Initialized OAuth2 Client%n%n%s.client-id = %s%n\"\n+\t\t\t\t\t\t\t+ \"%s.client-secret = %s%n%n\",\n \t\t\t\t\tprefix, this.credentials.getClientId(), prefix,\n \t\t\t\t\tdefaultSecret ? this.credentials.getClientSecret() : \"****\"));\n \t\t}",
    "output": "Fix logged property names when initializing OAuth2 client"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/authserver/OAuth2AuthorizationServerConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/authserver/OAuth2AuthorizationServerConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/authserver/OAuth2AuthorizationServerConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/authserver/OAuth2AuthorizationServerConfiguration.java\n@@ -164,7 +164,7 @@ public void init() {\n \t\t\tString prefix = \"security.oauth2.client\";\n \t\t\tboolean defaultSecret = this.credentials.isDefaultSecret();\n \t\t\tlogger.info(String.format(\n-\t\t\t\t\t\"Initialized OAuth2 Client%n%n%s.clientId = %s%n%s.secret = %s%n%n\",\n+\t\t\t\t\t\"Initialized OAuth2 Client%n%n%s.client-id = %s%n%s.client-secret = %s%n%n\",\n \t\t\t\t\tprefix, this.credentials.getClientId(), prefix,\n \t\t\t\t\tdefaultSecret ? this.credentials.getClientSecret() : \"****\"));\n \t\t}",
    "output": "Fix logged property names when initializing OAuth2 client"
  },
  {
    "input": "diff --git a/spring-boot-integration-tests/spring-boot-devtools-tests/src/test/java/org/springframework/boot/devtools/tests/JarFileRemoteApplicationLauncher.java b/spring-boot-integration-tests/spring-boot-devtools-tests/src/test/java/org/springframework/boot/devtools/tests/JarFileRemoteApplicationLauncher.java\n--- a/spring-boot-integration-tests/spring-boot-devtools-tests/src/test/java/org/springframework/boot/devtools/tests/JarFileRemoteApplicationLauncher.java\n+++ b/spring-boot-integration-tests/spring-boot-devtools-tests/src/test/java/org/springframework/boot/devtools/tests/JarFileRemoteApplicationLauncher.java\n@@ -42,7 +42,13 @@ public class JarFileRemoteApplicationLauncher extends RemoteApplicationLauncher\n \t@Override\n \tprotected String createApplicationClassPath() throws Exception {\n \t\tFile appDirectory = new File(\"target/app\");\n-\t\tFileSystemUtils.deleteRecursively(appDirectory);\n+\t\tif (appDirectory.isDirectory()) {\n+\t\t\tFileSystemUtils.deleteRecursively(appDirectory.toPath());\n+\t\t\tif (appDirectory.isDirectory()) {\n+\t\t\t\tthrow new IllegalStateException(\n+\t\t\t\t\t\t\"Failed to delete '\" + appDirectory.getAbsolutePath() + \"'\");\n+\t\t\t}\n+\t\t}\n \t\tappDirectory.mkdirs();\n \t\tManifest manifest = new Manifest();\n \t\tmanifest.getMainAttributes().put(Attributes.Name.MANIFEST_VERSION, \"1.0\");",
    "output": "Improve diagnostics for delete failures in DevTools integration tests"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/SpringApplicationHierarchyTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/SpringApplicationHierarchyTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/SpringApplicationHierarchyTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/SpringApplicationHierarchyTests.java\n@@ -50,15 +50,13 @@ public void after() {\n \t@Test\n \tpublic void testParent() {\n \t\tSpringApplicationBuilder builder = new SpringApplicationBuilder(Child.class);\n-\t\tbuilder.properties(\"spring.flyway.enabled=false\", \"spring.liquibase.enabled=false\");\n \t\tbuilder.parent(Parent.class);\n \t\tthis.context = builder.run(\"--server.port=0\");\n \t}\n \n \t@Test\n \tpublic void testChild() {\n \t\tSpringApplicationBuilder builder = new SpringApplicationBuilder(Parent.class);\n-\t\tbuilder.properties(\"spring.flyway.enabled=false\", \"spring.liquibase.enabled=false\");\n \t\tbuilder.child(Child.class);\n \t\tthis.context = builder.run(\"--server.port=0\");\n \t}",
    "output": "Remove unused properties from tests"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/transaction/jta/NarayanaJtaConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/transaction/jta/NarayanaJtaConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/transaction/jta/NarayanaJtaConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/transaction/jta/NarayanaJtaConfiguration.java\n@@ -22,6 +22,7 @@\n import javax.transaction.TransactionManager;\n import javax.transaction.UserTransaction;\n \n+import com.arjuna.ats.arjuna.recovery.RecoveryManager;\n import com.arjuna.ats.jbossatx.jta.RecoveryManagerService;\n import org.jboss.narayana.jta.jms.TransactionHelper;\n import org.jboss.tm.XAResourceRecoveryRegistry;\n@@ -115,6 +116,7 @@ public TransactionManager narayanaTransactionManager() {\n \t@Bean\n \t@DependsOn(\"narayanaConfiguration\")\n \tpublic RecoveryManagerService narayanaRecoveryManagerService() {\n+\t\tRecoveryManager.delayRecoveryManagerThread();\n \t\treturn new RecoveryManagerService();\n \t}\n ",
    "output": "Delay Narayana recovery manager until it's started explicitly"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/transaction/jta/NarayanaJtaConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/transaction/jta/NarayanaJtaConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/transaction/jta/NarayanaJtaConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/transaction/jta/NarayanaJtaConfiguration.java\n@@ -22,6 +22,7 @@\n import javax.transaction.TransactionManager;\n import javax.transaction.UserTransaction;\n \n+import com.arjuna.ats.arjuna.recovery.RecoveryManager;\n import com.arjuna.ats.jbossatx.jta.RecoveryManagerService;\n import org.jboss.narayana.jta.jms.TransactionHelper;\n import org.jboss.tm.XAResourceRecoveryRegistry;\n@@ -115,6 +116,7 @@ public TransactionManager narayanaTransactionManager() {\n \t@Bean\n \t@DependsOn(\"narayanaConfiguration\")\n \tpublic RecoveryManagerService narayanaRecoveryManagerService() {\n+\t\tRecoveryManager.delayRecoveryManagerThread();\n \t\treturn new RecoveryManagerService();\n \t}\n ",
    "output": "Delay Narayana recovery manager until it's started explicitly"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java\n@@ -114,7 +114,7 @@ public SimpleModule jodaDateTimeSerializationModule() {\n \t\t\tJacksonJodaDateFormat jacksonJodaFormat = getJacksonJodaDateFormat();\n \t\t\tif (jacksonJodaFormat != null) {\n \t\t\t\tmodule.addSerializer(DateTime.class,\n-\t\t\t\t\t\tnew DateTimeSerializer(jacksonJodaFormat));\n+\t\t\t\t\t\tnew DateTimeSerializer(jacksonJodaFormat, 0));\n \t\t\t}\n \t\t\treturn module;\n \t\t}",
    "output": "Upgrade to Jackson 2.9.0"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java\n@@ -114,7 +114,7 @@ public SimpleModule jodaDateTimeSerializationModule() {\n \t\t\tJacksonJodaDateFormat jacksonJodaFormat = getJacksonJodaDateFormat();\n \t\t\tif (jacksonJodaFormat != null) {\n \t\t\t\tmodule.addSerializer(DateTime.class,\n-\t\t\t\t\t\tnew DateTimeSerializer(jacksonJodaFormat));\n+\t\t\t\t\t\tnew DateTimeSerializer(jacksonJodaFormat, 0));\n \t\t\t}\n \t\t\treturn module;\n \t\t}",
    "output": "Upgrade to Jackson 2.9.0"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarURLConnection.java b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarURLConnection.java\n--- a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarURLConnection.java\n+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarURLConnection.java\n@@ -237,16 +237,15 @@ public Permission getPermission() throws IOException {\n \n \t@Override\n \tpublic long getLastModified() {\n-\t\tint defaultTime = 0;\n \t\tif (this.jarFile == null || this.jarEntryName.isEmpty()) {\n-\t\t\treturn defaultTime;\n+\t\t\treturn 0;\n \t\t}\n \t\ttry {\n \t\t\tJarEntry entry = getJarEntry();\n-\t\t\treturn (entry == null ? defaultTime : entry.getTime());\n+\t\t\treturn (entry == null ? 0 : entry.getTime());\n \t\t}\n \t\tcatch (IOException ex) {\n-\t\t\treturn defaultTime;\n+\t\t\treturn 0;\n \t\t}\n \t}\n ",
    "output": "Make JarURLConnection return entry's last modified time"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/testkit/GradleBuild.java b/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/testkit/GradleBuild.java\n--- a/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/testkit/GradleBuild.java\n+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/testkit/GradleBuild.java\n@@ -111,7 +111,7 @@ private void after() {\n \t}\n \n \tprivate String pluginClasspath() {\n-\t\treturn absolutePath(\"bin\") + \",\" + absolutePath(\"build/classes/main\") + \",\"\n+\t\treturn absolutePath(\"bin\") + \",\" + absolutePath(\"build/classes/java/main\") + \",\"\n \t\t\t\t+ absolutePath(\"build/resources/main\") + \",\"\n \t\t\t\t+ pathOfJarContaining(LaunchScript.class) + \",\"\n \t\t\t\t+ pathOfJarContaining(ClassVisitor.class) + \",\"",
    "output": "Look in the right place for plugin's classes during integration tests"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfigurationTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfigurationTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfigurationTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfigurationTests.java\n@@ -28,7 +28,6 @@\n import org.springframework.boot.actuate.metrics.dropwizard.DropwizardMetricServices;\n import org.springframework.boot.actuate.metrics.reader.MetricReader;\n import org.springframework.boot.actuate.metrics.reader.PrefixMetricReader;\n-import org.springframework.boot.autoconfigure.aop.AopAutoConfiguration;\n import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n@@ -70,7 +69,7 @@ public void createServices() throws Exception {\n \tpublic void dropwizardInstalledIfPresent() {\n \t\tthis.context = new AnnotationConfigApplicationContext(\n \t\t\t\tMetricsDropwizardAutoConfiguration.class,\n-\t\t\t\tMetricRepositoryAutoConfiguration.class, AopAutoConfiguration.class);\n+\t\t\t\tMetricRepositoryAutoConfiguration.class);\n \t\tGaugeService gaugeService = this.context.getBean(GaugeService.class);\n \t\tassertThat(gaugeService).isNotNull();\n \t\tgaugeService.submit(\"foo\", 2.7);",
    "output": "Fix build failure\nThis test definitely doesn't need Aspect processing since the project\ndoesn't have a dependency on `aspectjweaver`"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/aop/AopAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/aop/AopAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/aop/AopAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/aop/AopAutoConfiguration.java\n@@ -18,6 +18,7 @@\n \n import org.aspectj.lang.annotation.Aspect;\n import org.aspectj.lang.reflect.Advice;\n+import org.aspectj.weaver.AnnotatedElement;\n \n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n@@ -39,7 +40,7 @@\n  * @see EnableAspectJAutoProxy\n  */\n @Configuration\n-@ConditionalOnClass({ EnableAspectJAutoProxy.class, Aspect.class, Advice.class })\n+@ConditionalOnClass({ EnableAspectJAutoProxy.class, Aspect.class, Advice.class, AnnotatedElement.class })\n @ConditionalOnProperty(prefix = \"spring.aop\", name = \"auto\", havingValue = \"true\", matchIfMissing = true)\n public class AopAutoConfiguration {\n ",
    "output": "Disable Aop auto-config if aspectjweaver is not present\nThis commit adds an additional class check to AopAutoConfiguration as\nit is main role is to configure `@EnableAspectJAutoProxy` which won't\nwork properly if `aspectjweaver` is not present."
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/jta/narayana/NarayanaRecoveryManagerBean.java b/spring-boot/src/main/java/org/springframework/boot/jta/narayana/NarayanaRecoveryManagerBean.java\n--- a/spring-boot/src/main/java/org/springframework/boot/jta/narayana/NarayanaRecoveryManagerBean.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/jta/narayana/NarayanaRecoveryManagerBean.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2016 the original author or authors.\n+ * Copyright 2012-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -51,17 +51,19 @@ public void destroy() throws Exception {\n \t\tthis.recoveryManagerService.destroy();\n \t}\n \n-\tvoid registerXAResourceRecoveryHelper(XAResourceRecoveryHelper xaResourceRecoveryHelper) {\n+\tvoid registerXAResourceRecoveryHelper(\n+\t\t\tXAResourceRecoveryHelper xaResourceRecoveryHelper) {\n \t\tgetXARecoveryModule().addXAResourceRecoveryHelper(xaResourceRecoveryHelper);\n \t}\n \n \tprivate XARecoveryModule getXARecoveryModule() {\n-\t\tXARecoveryModule xaRecoveryModule = XARecoveryModule.getRegisteredXARecoveryModule();\n-\t\tif (xaRecoveryModule == null) {\n-\t\t\tthrow new IllegalStateException(\n-\t\t\t\t\t\"XARecoveryModule is not registered with recovery manager\");\n+\t\tXARecoveryModule xaRecoveryModule = XARecoveryModule\n+\t\t\t\t.getRegisteredXARecoveryModule();\n+\t\tif (xaRecoveryModule != null) {\n+\t\t\treturn xaRecoveryModule;\n \t\t}\n-\t\treturn xaRecoveryModule;\n+\t\tthrow new IllegalStateException(\n+\t\t\t\t\"XARecoveryModule is not registered with recovery manager\");\n \t}\n \n }",
    "output": "Simplify retrieval of Narayana XARecoveryModule"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/options/OptionHandler.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/options/OptionHandler.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/options/OptionHandler.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/options/OptionHandler.java\n@@ -130,8 +130,8 @@ private static class OptionHelpFormatter implements HelpFormatter {\n \n \t\t@Override\n \t\tpublic String format(Map<String, ? extends OptionDescriptor> options) {\n-\t\t\tComparator<OptionDescriptor> comparator = (first, second) -> first.options()\n-\t\t\t\t\t.iterator().next().compareTo(second.options().iterator().next());\n+\t\t\tComparator<OptionDescriptor> comparator = Comparator.comparing(\n+\t\t\t\t\t(optionDescriptor) -> optionDescriptor.options().iterator().next());\n \t\t\tSet<OptionDescriptor> sorted = new TreeSet<>(comparator);\n \t\t\tsorted.addAll(options.values());\n \t\t\tfor (OptionDescriptor descriptor : sorted) {",
    "output": "Simplify comparator implementation"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-junit-jupiter/src/main/java/sample/SampleJunitJupiterApplication.java b/spring-boot-samples/spring-boot-sample-junit-jupiter/src/main/java/sample/SampleJunitJupiterApplication.java\n--- a/spring-boot-samples/spring-boot-sample-junit-jupiter/src/main/java/sample/SampleJunitJupiterApplication.java\n+++ b/spring-boot-samples/spring-boot-sample-junit-jupiter/src/main/java/sample/SampleJunitJupiterApplication.java\n@@ -25,4 +25,5 @@ public class SampleJunitJupiterApplication {\n \tpublic static void main(String[] args) {\n \t\tSpringApplication.run(SampleJunitJupiterApplication.class, args);\n \t}\n+\n }",
    "output": "Add JUnit Jupiter sample application"
  },
  {
    "input": "diff --git a/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/SpringBootDependencyInjectionTestExecutionListener.java b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/SpringBootDependencyInjectionTestExecutionListener.java\n--- a/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/SpringBootDependencyInjectionTestExecutionListener.java\n+++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/SpringBootDependencyInjectionTestExecutionListener.java\n@@ -44,11 +44,15 @@ public void prepareTestInstance(TestContext testContext) throws Exception {\n \t\t\tsuper.prepareTestInstance(testContext);\n \t\t}\n \t\tcatch (Exception ex) {\n-\t\t\tApplicationContext context = testContext.getApplicationContext();\n-\t\t\tif (context instanceof ConfigurableApplicationContext) {\n-\t\t\t\tConditionEvaluationReport report = ConditionEvaluationReport\n-\t\t\t\t\t\t.get(((ConfigurableApplicationContext) context).getBeanFactory());\n-\t\t\t\tSystem.err.println(new ConditionEvaluationReportMessage(report));\n+\t\t\ttry {\n+\t\t\t\tApplicationContext context = testContext.getApplicationContext();\n+\t\t\t\tif (context instanceof ConfigurableApplicationContext) {\n+\t\t\t\t\tConditionEvaluationReport report = ConditionEvaluationReport\n+\t\t\t\t\t\t\t.get(((ConfigurableApplicationContext) context).getBeanFactory());\n+\t\t\t\t\tSystem.err.println(new ConditionEvaluationReportMessage(report));\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tcatch (Exception ignore) {\n \t\t\t}\n \t\t\tthrow ex;\n \t\t}",
    "output": "Ensure SpringBootDITEL fails with the original failure"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/transaction/jta/NarayanaJtaConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/transaction/jta/NarayanaJtaConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/transaction/jta/NarayanaJtaConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/transaction/jta/NarayanaJtaConfiguration.java\n@@ -119,6 +119,7 @@ public RecoveryManagerService narayanaRecoveryManagerService() {\n \t}\n \n \t@Bean\n+\t@ConditionalOnMissingBean\n \tpublic NarayanaRecoveryManagerBean narayanaRecoveryManager(\n \t\t\tRecoveryManagerService recoveryManagerService) {\n \t\treturn new NarayanaRecoveryManagerBean(recoveryManagerService);",
    "output": "Make NarayanaRecoveryManagerBean conditional on missing bean"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java\n@@ -165,7 +165,7 @@ private HttpStatus getStatus(Health health) {\n \tprivate Health getHealth(HttpServletRequest request, Principal principal) {\n \t\tHealth currentHealth = getCurrentHealth();\n \t\tif (exposeHealthDetails(request, principal)) {\n-\t\t\treturn this.cachedHealth.health;\n+\t\t\treturn currentHealth;\n \t\t}\n \t\treturn Health.status(currentHealth.getStatus()).build();\n \t}",
    "output": "Use currentHealth consistently in getHealth()"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java\n@@ -165,7 +165,7 @@ private HttpStatus getStatus(Health health) {\n \tprivate Health getHealth(HttpServletRequest request, Principal principal) {\n \t\tHealth currentHealth = getCurrentHealth();\n \t\tif (exposeHealthDetails(request, principal)) {\n-\t\t\treturn this.cachedHealth.health;\n+\t\t\treturn currentHealth;\n \t\t}\n \t\treturn Health.status(currentHealth.getStatus()).build();\n \t}",
    "output": "Use currentHealth consistently in getHealth()"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/AbstractRepositoryConfigurationSourceSupport.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/AbstractRepositoryConfigurationSourceSupport.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/AbstractRepositoryConfigurationSourceSupport.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/AbstractRepositoryConfigurationSourceSupport.java\n@@ -55,16 +55,17 @@ public abstract class AbstractRepositoryConfigurationSourceSupport\n \t@Override\n \tpublic void registerBeanDefinitions(AnnotationMetadata importingClassMetadata,\n \t\t\tBeanDefinitionRegistry registry) {\n-\t\tnew RepositoryConfigurationDelegate(getConfigurationSource(), this.resourceLoader,\n-\t\t\t\tthis.environment).registerRepositoriesIn(registry,\n+\t\tnew RepositoryConfigurationDelegate(getConfigurationSource(registry),\n+\t\t\t\tthis.resourceLoader, this.environment).registerRepositoriesIn(registry,\n \t\t\t\t\t\tgetRepositoryConfigurationExtension());\n \t}\n \n-\tprivate AnnotationRepositoryConfigurationSource getConfigurationSource() {\n+\tprivate AnnotationRepositoryConfigurationSource getConfigurationSource(\n+\t\t\tBeanDefinitionRegistry registry) {\n \t\tStandardAnnotationMetadata metadata = new StandardAnnotationMetadata(\n \t\t\t\tgetConfiguration(), true);\n \t\treturn new AnnotationRepositoryConfigurationSource(metadata, getAnnotation(),\n-\t\t\t\tthis.resourceLoader, this.environment) {\n+\t\t\t\tthis.resourceLoader, this.environment, registry) {\n \t\t\t@Override\n \t\t\tpublic java.lang.Iterable<String> getBasePackages() {\n \t\t\t\treturn AbstractRepositoryConfigurationSourceSupport.this",
    "output": "Adapt to breaking change in Spring Data"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/testkit/GradleBuild.java b/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/testkit/GradleBuild.java\n--- a/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/testkit/GradleBuild.java\n+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/testkit/GradleBuild.java\n@@ -156,7 +156,7 @@ public GradleRunner prepareRunner(String... arguments) throws IOException {\n \t\tFileCopyUtils.copy(scriptContent,\n \t\t\t\tnew FileWriter(new File(this.projectDir, \"build.gradle\")));\n \t\tGradleRunner gradleRunner = GradleRunner.create().withProjectDir(this.projectDir)\n-\t\t\t\t.forwardOutput();\n+\t\t\t\t.withDebug(true);\n \t\tif (this.gradleVersion != null) {\n \t\t\tgradleRunner.withGradleVersion(this.gradleVersion);\n \t\t}",
    "output": "Disable the use of Gradle's daemon when running compatility tests"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java b/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n--- a/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n@@ -39,7 +39,7 @@\n public final class GradleCompatibilitySuite extends Suite {\n \n \tprivate static final List<String> GRADLE_VERSIONS = Arrays.asList(\"default\", \"3.4.1\",\n-\t\t\t\"3.5\", \"4.0-rc-1\");\n+\t\t\t\"3.5\", \"3.5.1\", \"4.0\", \"4.0.1\", \"4.1-rc-1\");\n \n \tpublic GradleCompatibilitySuite(Class<?> clazz) throws InitializationError {\n \t\tsuper(clazz, createRunners(clazz));",
    "output": "Upgrade Gradle compatibility versions to cover 4.0.1 and 4.1-rc-1 Update Gradle versions to check compatibility with 3.5.1, 4.0, 4.1 M1"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java b/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n--- a/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n@@ -39,7 +39,7 @@\n public final class GradleCompatibilitySuite extends Suite {\n \n \tprivate static final List<String> GRADLE_VERSIONS = Arrays.asList(\"default\", \"3.4.1\",\n-\t\t\t\"3.5\", \"3.5.1\", \"4.0\", \"4.1-milestone-1\");\n+\t\t\t\"3.5\", \"3.5.1\", \"4.0\", \"4.0.1\", \"4.1-rc-1\");\n \n \tpublic GradleCompatibilitySuite(Class<?> clazz) throws InitializationError {\n \t\tsuper(clazz, createRunners(clazz));",
    "output": "Upgrade Gradle compatibility versions to cover 4.0.1 and 4.1-rc-1"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java b/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n--- a/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/junit/GradleCompatibilitySuite.java\n@@ -39,7 +39,7 @@\n public final class GradleCompatibilitySuite extends Suite {\n \n \tprivate static final List<String> GRADLE_VERSIONS = Arrays.asList(\"default\", \"3.4.1\",\n-\t\t\t\"3.5\", \"4.0-rc-1\");\n+\t\t\t\"3.5\", \"3.5.1\", \"4.0\", \"4.1-milestone-1\");\n \n \tpublic GradleCompatibilitySuite(Class<?> clazz) throws InitializationError {\n \t\tsuper(clazz, createRunners(clazz));",
    "output": "Upgrade Gradle versions to check compatibility with 3.5.1, 4.0, 4.1 M1"
  },
  {
    "input": "diff --git a/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/ChangeableUrls.java b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/ChangeableUrls.java\n--- a/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/ChangeableUrls.java\n+++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/ChangeableUrls.java\n@@ -147,7 +147,7 @@ private static List<URL> getUrlsFromManifestClassPathAttribute(JarFile jarFile)\n \t\t\t\t\turls.add(referenced.toURI().toURL());\n \t\t\t\t}\n \t\t\t\telse {\n-\t\t\t\t\tSystem.err.println(\"Ignoring Class-Path entry \" + entry + \" found in \"\n+\t\t\t\t\tSystem.out.println(\"Ignoring Class-Path entry \" + entry + \" found in \"\n \t\t\t\t\t\t\t+ jarFile.getName() + \" as \" + referenced\n \t\t\t\t\t\t\t+ \" does not exist\");\n \t\t\t\t}",
    "output": "Use System.out rather than err for ignored Class-Path entry message"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n@@ -66,6 +66,7 @@\n import org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProvider;\n import org.springframework.boot.autoconfigure.jdbc.metadata.DataSourcePoolMetadataProviders;\n import org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration;\n+import org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration;\n import org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration;\n import org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration;\n import org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration;\n@@ -95,7 +96,7 @@\n  */\n @Configuration\n @AutoConfigureBefore({ EndpointAutoConfiguration.class })\n-@AutoConfigureAfter({ CassandraAutoConfiguration.class,\n+@AutoConfigureAfter({ ActiveMQAutoConfiguration.class, CassandraAutoConfiguration.class,\n \t\tCassandraDataAutoConfiguration.class, CouchbaseDataAutoConfiguration.class,\n \t\tDataSourceAutoConfiguration.class, ElasticsearchAutoConfiguration.class,\n \t\tJestAutoConfiguration.class, JmsAutoConfiguration.class,",
    "output": "Add more HealthIndicatorAutoConfiguration ordering\nUpdate HealthIndicatorAutoConfiguration to ensure that it is configured\nafter ActiveMQAutoConfiguration."
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/dropwizard/DropwizardMetricServices.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/dropwizard/DropwizardMetricServices.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/dropwizard/DropwizardMetricServices.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/dropwizard/DropwizardMetricServices.java\n@@ -148,7 +148,7 @@ private <T extends Metric> T register(String name, MetricRegistrar<T> registrar)\n \t\t}\n \t\tcatch (IllegalArgumentException ex) {\n \t\t\tMetric added = this.registry.getMetrics().get(name);\n-\t\t\tregistrar.checkExisting(metric);\n+\t\t\tregistrar.checkExisting(added);\n \t\t\treturn (T) added;\n \t\t}\n \t}",
    "output": "Fix metric check in case of duplicate metric"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/dropwizard/DropwizardMetricServices.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/dropwizard/DropwizardMetricServices.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/dropwizard/DropwizardMetricServices.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/dropwizard/DropwizardMetricServices.java\n@@ -148,7 +148,7 @@ private <T extends Metric> T register(String name, MetricRegistrar<T> registrar)\n \t\t}\n \t\tcatch (IllegalArgumentException ex) {\n \t\t\tMetric added = this.registry.getMetrics().get(name);\n-\t\t\tregistrar.checkExisting(metric);\n+\t\t\tregistrar.checkExisting(added);\n \t\t\treturn (T) added;\n \t\t}\n \t}",
    "output": "Fix metric check in case of duplicate metric"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/NettyWebServer.java b/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/NettyWebServer.java\n--- a/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/NettyWebServer.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/web/embedded/netty/NettyWebServer.java\n@@ -20,6 +20,7 @@\n \n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n+import reactor.ipc.netty.http.HttpResources;\n import reactor.ipc.netty.http.server.HttpServer;\n import reactor.ipc.netty.tcp.BlockingNettyContext;\n \n@@ -98,6 +99,8 @@ public void run() {\n \tpublic void stop() throws WebServerException {\n \t\tif (this.nettyContext != null) {\n \t\t\tthis.nettyContext.shutdown();\n+\t\t\t// temporary fix for gh-9146\n+\t\t\tthis.nettyContext.getContext().onClose().doOnSuccess(aVoid -> HttpResources.reset()).block();\n \t\t\tthis.nettyContext = null;\n \t\t}\n \t}",
    "output": "Clean HTTP Resources when NettyWebServer stops\nThis commit is a temporary workaround for ; it cleans the HTTP\nresources associated with the Netty server."
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/web/embedded/netty/NettyWebServerTests.java b/spring-boot/src/test/java/org/springframework/boot/web/embedded/netty/NettyWebServerTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/web/embedded/netty/NettyWebServerTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/web/embedded/netty/NettyWebServerTests.java\n@@ -1,36 +0,0 @@\n-/*\n- * Copyright 2012-2017 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.springframework.boot.web.embedded.netty;\n-\n-import org.junit.Test;\n-\n-/**\n- * Tests for {@link NettyWebServer}.\n- *\n- * @author Madhura Bhave\n- */\n-public class NettyWebServerTests {\n-\n-\tprivate NettyWebServer server;\n-\n-\t@Test\n-\tpublic void stopWhenLatchIsNullShouldNotThrowException() throws Exception {\n-\t\tthis.server = new NettyWebServer(null, null);\n-\t\tthis.server.stop();\n-\t}\n-\n-}",
    "output": "Clean NettyWebServer tests\nRemove ununsed tests after"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/http/codec/CodecsAutoConfiguration.java\n@@ -55,9 +55,9 @@ static class JacksonCodecConfiguration {\n \t\tpublic CodecCustomizer jacksonCodecCustomizer(ObjectMapper objectMapper) {\n \t\t\treturn (configurer) -> {\n \t\t\t\tCodecConfigurer.DefaultCodecs defaults = configurer.defaultCodecs();\n-\t\t\t\tdefaults.jackson2Decoder(\n+\t\t\t\tdefaults.jackson2JsonDecoder(\n \t\t\t\t\t\tnew Jackson2JsonDecoder(objectMapper, EMPTY_MIME_TYPES));\n-\t\t\t\tdefaults.jackson2Encoder(\n+\t\t\t\tdefaults.jackson2JsonEncoder(\n \t\t\t\t\t\tnew Jackson2JsonEncoder(objectMapper, EMPTY_MIME_TYPES));\n \t\t\t};\n \t\t}",
    "output": "Fix CodecsAutoConfiguration following API change\nUpdate CodecsAutoConfiguration to align with the latest Spring Framework\nchanges."
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/cloud/CloudPlatform.java b/spring-boot/src/main/java/org/springframework/boot/cloud/CloudPlatform.java\n--- a/spring-boot/src/main/java/org/springframework/boot/cloud/CloudPlatform.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/cloud/CloudPlatform.java\n@@ -54,9 +54,9 @@ public boolean isActive(Environment environment) {\n \t},\n \n \t/**\n-\t * SAP Hana Cloud platform.\n+\t * SAP Cloud platform.\n \t */\n-\tHCP {\n+\tSAP {\n \n \t\t@Override\n \t\tpublic boolean isActive(Environment environment) {\n\ndiff --git a/spring-boot/src/test/java/org/springframework/boot/cloud/CloudPlatformTests.java b/spring-boot/src/test/java/org/springframework/boot/cloud/CloudPlatformTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/cloud/CloudPlatformTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/cloud/CloudPlatformTests.java\n@@ -72,11 +72,11 @@ public void getActiveWhenHasDynoShouldReturnHeroku() throws Exception {\n \t}\n \n \t@Test\n-\tpublic void getActiveWhenHasHcLandscapeShouldReturnHcp() throws Exception {\n+\tpublic void getActiveWhenHasHcLandscapeShouldReturnSap() throws Exception {\n \t\tEnvironment environment = new MockEnvironment().withProperty(\"HC_LANDSCAPE\",\n \t\t\t\t\"---\");\n \t\tCloudPlatform platform = CloudPlatform.getActive(environment);\n-\t\tassertThat(platform).isEqualTo(CloudPlatform.HCP);\n+\t\tassertThat(platform).isEqualTo(CloudPlatform.SAP);\n \t\tassertThat(platform.isActive(environment)).isTrue();\n \t}\n ",
    "output": "Rename HCP to SAP\nRename HCP to SAP"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/mongo/MongoDataAutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/mongo/MongoDataAutoConfigurationTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/mongo/MongoDataAutoConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/mongo/MongoDataAutoConfigurationTests.java\n@@ -18,7 +18,6 @@\n \n import java.time.LocalDateTime;\n import java.util.Arrays;\n-import java.util.Optional;\n import java.util.Set;\n \n import com.mongodb.Mongo;\n@@ -166,13 +165,9 @@ public void registersDefaultSimpleTypesWithMappingContext() {\n \t\t\t\tMongoDataAutoConfiguration.class);\n \t\tthis.context.refresh();\n \t\tMongoMappingContext context = this.context.getBean(MongoMappingContext.class);\n-\t\tOptional<BasicMongoPersistentEntity<?>> entity = context\n-\t\t\t\t.getPersistentEntity(Sample.class);\n-\t\tassertThat(entity).isPresent();\n-\t\tOptional<MongoPersistentProperty> dateProperty = entity.get()\n-\t\t\t\t.getPersistentProperty(\"date\");\n-\t\tassertThat(dateProperty).isPresent();\n-\t\tassertThat(dateProperty.get().isEntity()).isFalse();\n+\t\tBasicMongoPersistentEntity<?> entity = context.getPersistentEntity(Sample.class);\n+\t\tMongoPersistentProperty dateProperty = entity.getPersistentProperty(\"date\");\n+\t\tassertThat(dateProperty.isEntity()).isFalse();\n \t}\n \n \tpublic void testFieldNamingStrategy(String strategy,",
    "output": "Align with breaking API changes in Spring Data MongoDB"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/CollectionBinderTests.java b/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/CollectionBinderTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/CollectionBinderTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/CollectionBinderTests.java\n@@ -305,4 +305,30 @@ public void bindToImmutableCollectionShouldReturnPopulatedCollection()\n \t\tassertThat(result).hasSize(3);\n \t}\n \n+\t@Test\n+\tpublic void bindToCollectionShouldAlsoCallSetterIfPresent() throws Exception {\n+\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n+\t\tsource.put(\"foo.items\", \"a,b,c\");\n+\t\tthis.sources.add(source);\n+\t\tExampleCollectionBean result = this.binder\n+\t\t\t\t.bind(\"foo\", ExampleCollectionBean.class)\n+\t\t\t\t.get();\n+\t\tassertThat(result.getItems()).hasSize(4);\n+\t\tassertThat(result.getItems()).containsExactly(\"a\", \"b\", \"c\", \"d\");\n+\t}\n+\n+\tpublic static class ExampleCollectionBean {\n+\n+\t\tprivate List<String> items = new ArrayList<>();\n+\n+\t\tpublic List<String> getItems() {\n+\t\t\treturn this.items;\n+\t\t}\n+\n+\t\tpublic void setItems(List<String> items) {\n+\t\t\tthis.items.add(\"d\");\n+\t\t}\n+\n+\t}\n+\n }",
    "output": "Test case to prove binding to collection calls setter"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java\n@@ -420,7 +420,8 @@ public boolean supports(Class<?> type) {\n \t\t\tif (AnnotatedElementUtils.hasAnnotation(type, Validated.class)) {\n \t\t\t\treturn true;\n \t\t\t}\n-\t\t\tif (type.getPackage().getName().startsWith(\"org.springframework.boot\")) {\n+\t\t\tif (type.getPackage() != null &&\n+\t\t\t\t\ttype.getPackage().getName().startsWith(\"org.springframework.boot\")) {\n \t\t\t\treturn false;\n \t\t\t}\n \t\t\tif (getConstraintsForClass(type).isBeanConstrained()) {",
    "output": "Properly handle `null` package"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfigurationTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfigurationTests.java\n@@ -44,7 +44,6 @@\n import org.springframework.jdbc.datasource.SimpleDriverDataSource;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.mockito.ArgumentMatchers.contains;\n import static org.mockito.Mockito.mock;\n \n /**\n@@ -96,7 +95,7 @@ public void testBadUrl() throws Exception {\n \t@Test\n \tpublic void testBadDriverClass() throws Exception {\n \t\tthis.thrown.expect(BeanCreationException.class);\n-\t\tthis.thrown.expectMessage(contains(\"org.none.jdbcDriver\"));\n+\t\tthis.thrown.expectMessage(\"org.none.jdbcDriver\");\n \t\tload(\"spring.datasource.driverClassName:org.none.jdbcDriver\");\n \t}\n ",
    "output": "Fix wrong assertion"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/origin/SystemEnvironmentOrigin.java b/spring-boot/src/main/java/org/springframework/boot/origin/SystemEnvironmentOrigin.java\n--- a/spring-boot/src/main/java/org/springframework/boot/origin/SystemEnvironmentOrigin.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/origin/SystemEnvironmentOrigin.java\n@@ -47,9 +47,7 @@ public String toString() {\n \n \t@Override\n \tpublic int hashCode() {\n-\t\tint result = ObjectUtils.nullSafeHashCode(this.property);\n-\t\tresult = 31 * result + ObjectUtils.nullSafeHashCode(this.property);\n-\t\treturn result;\n+\t\treturn ObjectUtils.nullSafeHashCode(this.property);\n \t}\n \n \t@Override",
    "output": "Remove redundant hash code for the same field"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/origin/SystemEnvironmentOrigin.java b/spring-boot/src/main/java/org/springframework/boot/origin/SystemEnvironmentOrigin.java\n--- a/spring-boot/src/main/java/org/springframework/boot/origin/SystemEnvironmentOrigin.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/origin/SystemEnvironmentOrigin.java\n@@ -47,9 +47,7 @@ public String toString() {\n \n \t@Override\n \tpublic int hashCode() {\n-\t\tint result = ObjectUtils.nullSafeHashCode(this.property);\n-\t\tresult = 31 * result + ObjectUtils.nullSafeHashCode(this.property);\n-\t\treturn result;\n+\t\treturn ObjectUtils.nullSafeHashCode(this.property);\n \t}\n \n \t@Override",
    "output": "Remove redundant hash code for the same field"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/AbstractRepositoryConfigurationSourceSupport.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/AbstractRepositoryConfigurationSourceSupport.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/AbstractRepositoryConfigurationSourceSupport.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/AbstractRepositoryConfigurationSourceSupport.java\n@@ -56,16 +56,17 @@ public abstract class AbstractRepositoryConfigurationSourceSupport\n \t@Override\n \tpublic void registerBeanDefinitions(AnnotationMetadata importingClassMetadata,\n \t\t\tBeanDefinitionRegistry registry) {\n-\t\tnew RepositoryConfigurationDelegate(getConfigurationSource(), this.resourceLoader,\n-\t\t\t\tthis.environment).registerRepositoriesIn(registry,\n+\t\tnew RepositoryConfigurationDelegate(getConfigurationSource(registry),\n+\t\t\t\tthis.resourceLoader, this.environment).registerRepositoriesIn(registry,\n \t\t\t\t\t\tgetRepositoryConfigurationExtension());\n \t}\n \n-\tprivate AnnotationRepositoryConfigurationSource getConfigurationSource() {\n+\tprivate AnnotationRepositoryConfigurationSource getConfigurationSource(\n+\t\t\tBeanDefinitionRegistry beanDefinitionRegistry) {\n \t\tStandardAnnotationMetadata metadata = new StandardAnnotationMetadata(\n \t\t\t\tgetConfiguration(), true);\n \t\treturn new AnnotationRepositoryConfigurationSource(metadata, getAnnotation(),\n-\t\t\t\tthis.resourceLoader, this.environment) {\n+\t\t\t\tthis.resourceLoader, this.environment, beanDefinitionRegistry) {\n \t\t\t@Override\n \t\t\tpublic Streamable<String> getBasePackages() {\n \t\t\t\treturn AbstractRepositoryConfigurationSourceSupport.this",
    "output": "Adapt to API changes in Spring Data Commons"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2RestOperationsConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2RestOperationsConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2RestOperationsConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2RestOperationsConfiguration.java\n@@ -16,8 +16,7 @@\n \n package org.springframework.boot.autoconfigure.security.oauth2.client;\n \n-import javax.annotation.Resource;\n-\n+import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.boot.autoconfigure.condition.AnyNestedCondition;\n import org.springframework.boot.autoconfigure.condition.ConditionMessage;\n@@ -106,9 +105,12 @@ public FilterRegistrationBean oauth2ClientFilterRegistration(\n \t\t@Configuration\n \t\tprotected static class ClientContextConfiguration {\n \n-\t\t\t@Resource\n-\t\t\t@Qualifier(\"accessTokenRequest\")\n-\t\t\tprotected AccessTokenRequest accessTokenRequest;\n+\t\t\tprivate final AccessTokenRequest accessTokenRequest;\n+\n+\t\t\tpublic ClientContextConfiguration(@Qualifier(\"accessTokenRequest\")\n+\t\t\t\t\tObjectProvider<AccessTokenRequest> accessTokenRequest) {\n+\t\t\t\tthis.accessTokenRequest = accessTokenRequest.getIfAvailable();\n+\t\t\t}\n \n \t\t\t@Bean\n \t\t\t@Scope(value = \"session\", proxyMode = ScopedProxyMode.INTERFACES)",
    "output": "Remove use of 'javax.annotation.Resource'\nThis commit removes the only use of the `javax.annotation.Resource`\nannotation from the codebase. This ensures that injection point are\nonly defined with Spring's annotation model."
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n@@ -258,6 +258,7 @@ public HealthIndicator ldapHealthIndicator() {\n \t}\n \n \t@Configuration\n+\t@ConditionalOnClass(MongoTemplate.class)\n \t@ConditionalOnBean(MongoTemplate.class)\n \t@ConditionalOnEnabledHealthIndicator(\"mongo\")\n \tpublic static class MongoHealthIndicatorConfiguration extends",
    "output": "Add missing class check"
  },
  {
    "input": "diff --git a/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/ChangeableUrls.java b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/ChangeableUrls.java\n--- a/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/ChangeableUrls.java\n+++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/ChangeableUrls.java\n@@ -147,7 +147,7 @@ private static List<URL> getUrlsFromManifestClassPathAttribute(JarFile jarFile)\n \t\t\t\t\turls.add(referenced.toURI().toURL());\n \t\t\t\t}\n \t\t\t\telse {\n-\t\t\t\t\tSystem.err.println(\"Ignoring Class-Path entry \" + entry + \" found in\"\n+\t\t\t\t\tSystem.err.println(\"Ignoring Class-Path entry \" + entry + \" found in \"\n \t\t\t\t\t\t\t+ jarFile.getName() + \" as \" + referenced\n \t\t\t\t\t\t\t+ \" does not exist\");\n \t\t\t\t}",
    "output": "Add missing whitespace in log"
  },
  {
    "input": "diff --git a/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/ChangeableUrls.java b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/ChangeableUrls.java\n--- a/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/ChangeableUrls.java\n+++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/ChangeableUrls.java\n@@ -147,7 +147,7 @@ private static List<URL> getUrlsFromManifestClassPathAttribute(JarFile jarFile)\n \t\t\t\t\turls.add(referenced.toURI().toURL());\n \t\t\t\t}\n \t\t\t\telse {\n-\t\t\t\t\tSystem.err.println(\"Ignoring Class-Path entry \" + entry + \" found in\"\n+\t\t\t\t\tSystem.err.println(\"Ignoring Class-Path entry \" + entry + \" found in \"\n \t\t\t\t\t\t\t+ jarFile.getName() + \" as \" + referenced\n \t\t\t\t\t\t\t+ \" does not exist\");\n \t\t\t\t}",
    "output": "Add missing whitespace in log"
  },
  {
    "input": "diff --git a/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/ChangeableUrls.java b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/ChangeableUrls.java\n--- a/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/ChangeableUrls.java\n+++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/ChangeableUrls.java\n@@ -147,7 +147,7 @@ private static List<URL> getUrlsFromManifestClassPathAttribute(JarFile jarFile)\n \t\t\t\t\turls.add(referenced.toURI().toURL());\n \t\t\t\t}\n \t\t\t\telse {\n-\t\t\t\t\tSystem.err.println(\"Ignoring Class-Path entry \" + entry + \" found in\"\n+\t\t\t\t\tSystem.err.println(\"Ignoring Class-Path entry \" + entry + \" found in \"\n \t\t\t\t\t\t\t+ jarFile.getName() + \" as \" + referenced\n \t\t\t\t\t\t\t+ \" does not exist\");\n \t\t\t\t}",
    "output": "Add missing whitespace in log"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/tasks/bundling/AbstractBootArchiveIntegrationTests.java b/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/tasks/bundling/AbstractBootArchiveIntegrationTests.java\n--- a/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/tasks/bundling/AbstractBootArchiveIntegrationTests.java\n+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/tasks/bundling/AbstractBootArchiveIntegrationTests.java\n@@ -115,4 +115,10 @@ public void applicationPluginMainClassNameIsUsed() throws IOException {\n \n \t}\n \n+\t@Test\n+\tpublic void duplicatesAreHandledGracefully() throws IOException {\n+\t\tassertThat(this.gradleBuild.build(this.taskName).task(\":\" + this.taskName)\n+\t\t\t\t.getOutcome()).isEqualTo(TaskOutcome.SUCCESS);\n+\t}\n+\n }",
    "output": "Verify that bootJar and bootWar handle duplicates gracefully"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/LettuceConnectionConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/LettuceConnectionConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/LettuceConnectionConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/LettuceConnectionConfiguration.java\n@@ -90,6 +90,7 @@ private LettuceConnectionFactory createLettuceConnectionFactory(\n \t\t\t\t\t\tthis.properties.getLettuce().getPool(), clientResources)));\n \t}\n \n+\t@SuppressWarnings(\"deprecation\")\n \tprivate LettuceConnectionFactory applyProperties(\n \t\t\tLettuceConnectionFactory connectionFactory) {\n \t\tconnectionFactory",
    "output": "Suppress deprecation warning from LettuceConnectionFactory"
  },
  {
    "input": "diff --git a/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/DevToolsPooledDataSourceAutoConfigurationTests.java b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/DevToolsPooledDataSourceAutoConfigurationTests.java\n--- a/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/DevToolsPooledDataSourceAutoConfigurationTests.java\n+++ b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/DevToolsPooledDataSourceAutoConfigurationTests.java\n@@ -21,6 +21,8 @@\n \n import javax.sql.DataSource;\n \n+import org.junit.After;\n+import org.junit.Before;\n import org.junit.Test;\n \n import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\n@@ -37,6 +39,16 @@\n public class DevToolsPooledDataSourceAutoConfigurationTests\n \t\textends AbstractDevToolsDataSourceAutoConfigurationTests {\n \n+\t@Before\n+\tpublic void before() {\n+\t\tSystem.setProperty(\"derby.stream.error.file\", \"target/derby.log\");\n+\t}\n+\n+\t@After\n+\tpublic void after() {\n+\t\tSystem.clearProperty(\"derby.stream.error.file\");\n+\t}\n+\n \t@Test\n \tpublic void autoConfiguredInMemoryDataSourceIsShutdown() throws SQLException {\n \t\tConfigurableApplicationContext context = createContext(",
    "output": "Configure Derby to write its log in the target directory"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/web/reactive/result/view/MustacheViewResolver.java b/spring-boot/src/main/java/org/springframework/boot/web/reactive/result/view/MustacheViewResolver.java\n--- a/spring-boot/src/main/java/org/springframework/boot/web/reactive/result/view/MustacheViewResolver.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/web/reactive/result/view/MustacheViewResolver.java\n@@ -68,8 +68,8 @@ protected Class<?> requiredViewClass() {\n \t}\n \n \t@Override\n-\tprotected AbstractUrlBasedView createUrlBasedView(String viewName) {\n-\t\tMustacheView view = (MustacheView) super.createUrlBasedView(viewName);\n+\tprotected AbstractUrlBasedView createView(String viewName) {\n+\t\tMustacheView view = (MustacheView) super.createView(viewName);\n \t\tview.setCompiler(this.compiler);\n \t\tview.setCharset(this.charset);\n \t\treturn view;",
    "output": "Fix MustacheViewResolver following upstream change\nUpdate MustacheViewResolver following the upstream rename of\n`createUrlBasedView` to `createView`."
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/jta/narayana/NarayanaDataSourceBeanTests.java b/spring-boot/src/test/java/org/springframework/boot/jta/narayana/NarayanaDataSourceBeanTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/jta/narayana/NarayanaDataSourceBeanTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/jta/narayana/NarayanaDataSourceBeanTests.java\n@@ -83,7 +83,7 @@ public void shouldGetConnectionAndCommit() throws SQLException {\n \t\tConnection mockConnection = mock(Connection.class);\n \t\tXAConnection mockXaConnection = mock(XAConnection.class);\n \t\tgiven(mockXaConnection.getConnection()).willReturn(mockConnection);\n-\t\tgiven(this.dataSource.getXAConnection(\"\", \"\")).willReturn(mockXaConnection);\n+\t\tgiven(this.dataSource.getXAConnection()).willReturn(mockXaConnection);\n \n \t\tProperties properties = new Properties();\n \t\tproperties.put(TransactionalDriver.XADataSource, this.dataSource);\n@@ -93,7 +93,7 @@ public void shouldGetConnectionAndCommit() throws SQLException {\n \n \t\tconnection.commit();\n \n-\t\tverify(this.dataSource, times(1)).getXAConnection(\"\", \"\");\n+\t\tverify(this.dataSource, times(1)).getXAConnection();\n \t\tverify(mockXaConnection, times(1)).getConnection();\n \t\tverify(mockConnection, times(1)).commit();\n \t}",
    "output": "Upgrade to Narayana 5.6.1.Final"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/HikariDriverConfigurationFailureAnalyzer.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/HikariDriverConfigurationFailureAnalyzer.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/HikariDriverConfigurationFailureAnalyzer.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/HikariDriverConfigurationFailureAnalyzer.java\n@@ -18,6 +18,7 @@\n \n import org.springframework.boot.diagnostics.AbstractFailureAnalyzer;\n import org.springframework.boot.diagnostics.FailureAnalysis;\n+import org.springframework.jdbc.CannotGetJdbcConnectionException;\n \n /**\n  * An {@link AbstractFailureAnalyzer} that performs analysis of a Hikari configuration\n@@ -26,14 +27,14 @@\n  * @author Stephane Nicoll\n  */\n class HikariDriverConfigurationFailureAnalyzer\n-\t\textends AbstractFailureAnalyzer<IllegalStateException> {\n+\t\textends AbstractFailureAnalyzer<CannotGetJdbcConnectionException> {\n \n-\tprivate static final String EXPECTED_MESSAGE = \"cannot use driverClassName and \"\n-\t\t\t+ \"dataSourceClassName together.\";\n+\tprivate static final String EXPECTED_MESSAGE = \"Failed to obtain JDBC Connection:\"\n+\t\t\t+ \" cannot use driverClassName and dataSourceClassName together.\";\n \n \t@Override\n \tprotected FailureAnalysis analyze(Throwable rootFailure,\n-\t\t\tIllegalStateException cause) {\n+\t\t\tCannotGetJdbcConnectionException cause) {\n \t\tif (!EXPECTED_MESSAGE.equals(cause.getMessage())) {\n \t\t\treturn null;\n \t\t}",
    "output": "Align HikariDriverConfigurationFailureAnalyzer with latest Framework change\nThe Framework now throws a CannotGetJdbcConnectionException rather\nthan an IllegalStateException."
  },
  {
    "input": "diff --git a/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/test/MockClientHttpRequestFactory.java b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/test/MockClientHttpRequestFactory.java\n--- a/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/test/MockClientHttpRequestFactory.java\n+++ b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/test/MockClientHttpRequestFactory.java\n@@ -57,7 +57,7 @@ public ClientHttpRequest createRequest(URI uri, HttpMethod httpMethod)\n \n \tpublic void willRespond(HttpStatus... response) {\n \t\tfor (HttpStatus status : response) {\n-\t\t\tthis.responses.add(new Response(0, NO_DATA, status));\n+\t\t\tthis.responses.add(new Response(0, null, status));\n \t\t}\n \t}\n \n@@ -119,7 +119,7 @@ static class Response {\n \n \t\tpublic ClientHttpResponse asHttpResponse(AtomicLong seq) {\n \t\t\tMockClientHttpResponse httpResponse = new MockClientHttpResponse(\n-\t\t\t\t\tthis.payload == null ? new byte[0] : this.payload, this.status);\n+\t\t\t\t\tthis.payload == null ? NO_DATA : this.payload, this.status);\n \t\t\twaitForDelay();\n \t\t\tif (this.payload != null) {\n \t\t\t\thttpResponse.getHeaders().setContentLength(this.payload.length);",
    "output": "Fix HttpTunnelConnectionTests following changes for null handling"
  },
  {
    "input": "diff --git a/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/test/MockClientHttpRequestFactory.java b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/test/MockClientHttpRequestFactory.java\n--- a/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/test/MockClientHttpRequestFactory.java\n+++ b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/test/MockClientHttpRequestFactory.java\n@@ -118,8 +118,8 @@ static class Response {\n \t\t}\n \n \t\tpublic ClientHttpResponse asHttpResponse(AtomicLong seq) {\n-\t\t\tMockClientHttpResponse httpResponse = new MockClientHttpResponse(this.payload,\n-\t\t\t\t\tthis.status);\n+\t\t\tMockClientHttpResponse httpResponse = new MockClientHttpResponse(\n+\t\t\t\t\tthis.payload == null ? new byte[0] : this.payload, this.status);\n \t\t\twaitForDelay();\n \t\t\tif (this.payload != null) {\n \t\t\t\thttpResponse.getHeaders().setContentLength(this.payload.length);",
    "output": "Adapt to MockClientHttpResponse no longer accepting a null body"
  },
  {
    "input": "diff --git a/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/test/MockClientHttpRequestFactory.java b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/test/MockClientHttpRequestFactory.java\n--- a/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/test/MockClientHttpRequestFactory.java\n+++ b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/test/MockClientHttpRequestFactory.java\n@@ -41,6 +41,8 @@\n  */\n public class MockClientHttpRequestFactory implements ClientHttpRequestFactory {\n \n+\tprivate static final byte[] NO_DATA = {};\n+\n \tprivate AtomicLong seq = new AtomicLong();\n \n \tprivate Deque<Object> responses = new ArrayDeque<>();\n@@ -55,7 +57,7 @@ public ClientHttpRequest createRequest(URI uri, HttpMethod httpMethod)\n \n \tpublic void willRespond(HttpStatus... response) {\n \t\tfor (HttpStatus status : response) {\n-\t\t\tthis.responses.add(new Response(0, null, status));\n+\t\t\tthis.responses.add(new Response(0, NO_DATA, status));\n \t\t}\n \t}\n ",
    "output": "Fix unsupported null argument\nUpdate `MockClientHttpRequestFactory` following upstream Spring\nFramework changes that mean `null` is not a valid payload."
  },
  {
    "input": "diff --git a/spring-boot-test/src/main/java/org/springframework/boot/test/json/DuplicateJsonObjectContextCustomizerFactory.java b/spring-boot-test/src/main/java/org/springframework/boot/test/json/DuplicateJsonObjectContextCustomizerFactory.java\n--- a/spring-boot-test/src/main/java/org/springframework/boot/test/json/DuplicateJsonObjectContextCustomizerFactory.java\n+++ b/spring-boot-test/src/main/java/org/springframework/boot/test/json/DuplicateJsonObjectContextCustomizerFactory.java\n@@ -85,6 +85,19 @@ private void logDuplicateJsonObjectsWarning(List<URL> jsonObjects) {\n \t\t\tthis.logger.warn(message);\n \t\t}\n \n+\t\t@Override\n+\t\tpublic int hashCode() {\n+\t\t\treturn getClass().hashCode();\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic boolean equals(Object obj) {\n+\t\t\tif (obj == null || obj.getClass() != getClass()) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\treturn true;\n+\t\t}\n+\n \t}\n \n }",
    "output": "Stop DuplicateJsonObjectContextCustomizer breaking context caching"
  },
  {
    "input": "diff --git a/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java b/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java\n--- a/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java\n+++ b/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java\n@@ -247,7 +247,12 @@ public void onNext(Frame item) {\n \t\t\treturn output.toString();\n \t\t}\n \t\tfinally {\n-\t\t\tdocker.removeContainerCmd(container).exec();\n+\t\t\ttry {\n+\t\t\t\tdocker.removeContainerCmd(container).exec();\n+\t\t\t}\n+\t\t\tcatch (Exception ex) {\n+\t\t\t\t// Continue\n+\t\t\t}\n \t\t}\n \t}\n ",
    "output": "Do not allow failure to remove container to mask earlier failure"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-data-jpa/src/test/java/sample/data/jpa/SampleDataJpaApplicationTests.java b/spring-boot-samples/spring-boot-sample-data-jpa/src/test/java/sample/data/jpa/SampleDataJpaApplicationTests.java\n--- a/spring-boot-samples/spring-boot-sample-data-jpa/src/test/java/sample/data/jpa/SampleDataJpaApplicationTests.java\n+++ b/spring-boot-samples/spring-boot-sample-data-jpa/src/test/java/sample/data/jpa/SampleDataJpaApplicationTests.java\n@@ -73,7 +73,7 @@ public void testHome() throws Exception {\n \t@Test\n \tpublic void testJmx() throws Exception {\n \t\tassertThat(ManagementFactory.getPlatformMBeanServer()\n-\t\t\t\t.queryMBeans(new ObjectName(\"jpa.sample:type=ConnectionPool,*\"), null))\n+\t\t\t\t.queryMBeans(new ObjectName(\"jpa.sample:type=HikariDataSource,*\"), null))\n \t\t\t\t\t\t.hasSize(1);\n \t}\n ",
    "output": "Fix broken build"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java\n@@ -94,6 +94,7 @@ public static boolean containsAutoConfiguredDataSource(\n \t\t}\n \t}\n \n+\t@Configuration\n \t@Conditional(EmbeddedDatabaseCondition.class)\n \t@ConditionalOnMissingBean({ DataSource.class, XADataSource.class })\n \t@Import(EmbeddedDataSourceConfiguration.class)",
    "output": "Add missing `@Configuration` on `EmbeddedDatabaseConfiguration`"
  },
  {
    "input": "diff --git a/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/LocalDevToolsAutoConfiguration.java b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/LocalDevToolsAutoConfiguration.java\n--- a/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/LocalDevToolsAutoConfiguration.java\n+++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/LocalDevToolsAutoConfiguration.java\n@@ -58,6 +58,7 @@ public class LocalDevToolsAutoConfiguration {\n \t/**\n \t * Local LiveReload configuration.\n \t */\n+\t@Configuration\n \t@ConditionalOnProperty(prefix = \"spring.devtools.livereload\", name = \"enabled\", matchIfMissing = true)\n \tstatic class LiveReloadConfiguration {\n ",
    "output": "Fix OptionalLiveReloadServer create bean"
  },
  {
    "input": "diff --git a/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/LocalDevToolsAutoConfiguration.java b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/LocalDevToolsAutoConfiguration.java\n--- a/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/LocalDevToolsAutoConfiguration.java\n+++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/LocalDevToolsAutoConfiguration.java\n@@ -58,6 +58,7 @@ public class LocalDevToolsAutoConfiguration {\n \t/**\n \t * Local LiveReload configuration.\n \t */\n+\t@Configuration\n \t@ConditionalOnProperty(prefix = \"spring.devtools.livereload\", name = \"enabled\", matchIfMissing = true)\n \tstatic class LiveReloadConfiguration {\n ",
    "output": "Fix OptionalLiveReloadServer create bean"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/LoggersEndpointTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/LoggersEndpointTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/LoggersEndpointTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/LoggersEndpointTests.java\n@@ -65,6 +65,7 @@ public void invokeShouldReturnConfigurations() throws Exception {\n \t\t\t\tLogLevel.WARN, LogLevel.INFO, LogLevel.DEBUG, LogLevel.TRACE);\n \t}\n \n+\t@Test\n \tpublic void invokeWhenNameSpecifiedShouldReturnLevels() throws Exception {\n \t\tgiven(getLoggingSystem().getLoggerConfiguration(\"ROOT\"))\n \t\t\t\t.willReturn(new LoggerConfiguration(\"ROOT\", null, LogLevel.DEBUG));\n@@ -73,6 +74,7 @@ public void invokeWhenNameSpecifiedShouldReturnLevels() throws Exception {\n \t\tassertThat(levels.getEffectiveLevel()).isEqualTo(\"DEBUG\");\n \t}\n \n+\t@Test\n \tpublic void setLogLevelShouldSetLevelOnLoggingSystem() throws Exception {\n \t\tgetEndpointBean().setLogLevel(\"ROOT\", LogLevel.DEBUG);\n \t\tverify(getLoggingSystem()).setLogLevel(\"ROOT\", LogLevel.DEBUG);",
    "output": "Add missing @Test annotations"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\n--- a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\n+++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/data/RandomAccessDataFileTests.java\n@@ -333,7 +333,7 @@ public void seekFailuresDoNotPreventSubsequentReads() throws Exception {\n \t\t\tpublic RandomAccessFile answer(InvocationOnMock invocation) throws Throwable {\n \t\t\t\tRandomAccessFile originalFile = (RandomAccessFile) invocation\n \t\t\t\t\t\t.callRealMethod();\n-\t\t\t\tif (Mockito.isSpy(originalFile)) {\n+\t\t\t\tif (Mockito.mockingDetails(originalFile).isSpy()) {\n \t\t\t\t\treturn originalFile;\n \t\t\t\t}\n \t\t\t\tRandomAccessFile spiedFile = spy(originalFile);",
    "output": "Fix call to isSpy to be compatible with Mockito 2"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchDataAutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchDataAutoConfigurationTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchDataAutoConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/elasticsearch/ElasticsearchDataAutoConfigurationTests.java\n@@ -66,7 +66,7 @@ public void mappingContextExists() {\n \t\tTestPropertyValues.of(\n \t\t\t\t\"spring.data.elasticsearch.properties.path.data:target/data\",\n \t\t\t\t\"spring.data.elasticsearch.properties.path.logs:target/logs\")\n-\t\t\t\t.applyTo(this.context);;\n+\t\t\t\t.applyTo(this.context);\n \t\tthis.context.register(PropertyPlaceholderAutoConfiguration.class,\n \t\t\t\tElasticsearchAutoConfiguration.class,\n \t\t\t\tElasticsearchDataAutoConfiguration.class);",
    "output": "Fix checkstyle violation"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jPropertiesTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jPropertiesTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jPropertiesTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/neo4j/Neo4jPropertiesTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2016 the original author or authors.\n+ * Copyright 2012-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -104,7 +104,8 @@ public void credentialsAreSetFromUri() {\n \t\t\t\t\"spring.data.neo4j.uri=http://user:secret@my-server:7474\");\n \t\tConfiguration configuration = properties.createConfiguration();\n \t\tassertDriver(configuration, Neo4jProperties.HTTP_DRIVER,\n-\t\t\t\t\"http://user:secret@my-server:7474\");\n+\t\t\t\t\"http://my-server:7474\");\n+\t\tassertCredentials(configuration, \"user\", \"secret\");\n \t\tassertCredentials(configuration, \"user\", \"secret\");\n \t}\n ",
    "output": "Upgrade to Neo4J OGM 2.1.3"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/WebFluxAutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/WebFluxAutoConfigurationTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/WebFluxAutoConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/WebFluxAutoConfigurationTests.java\n@@ -19,7 +19,6 @@\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n-import java.util.Optional;\n \n import javax.validation.ValidatorFactory;\n \n@@ -359,8 +358,8 @@ protected static class ValidatorWebFluxConfigurer implements WebFluxConfigurer {\n \t\tprivate final Validator validator = mock(Validator.class);\n \n \t\t@Override\n-\t\tpublic Optional<Validator> getValidator() {\n-\t\t\treturn Optional.of(this.validator);\n+\t\tpublic Validator getValidator() {\n+\t\t\treturn this.validator;\n \t\t}\n \n \t}\n@@ -371,8 +370,8 @@ protected static class ValidatorJsr303WebFluxConfigurer implements WebFluxConfig\n \t\tprivate final LocalValidatorFactoryBean validator = new LocalValidatorFactoryBean();\n \n \t\t@Override\n-\t\tpublic Optional<Validator> getValidator() {\n-\t\t\treturn Optional.of(this.validator);\n+\t\tpublic Validator getValidator() {\n+\t\t\treturn this.validator;\n \t\t}\n \n \t}",
    "output": "Fix following upstream API change\nUpdate implementations of `WebFluxConfigurer` to no longer return an\n`Optional` validator."
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactoryTests.java b/spring-boot/src/test/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactoryTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactoryTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactoryTests.java\n@@ -60,7 +60,7 @@\n import org.springframework.http.HttpHeaders;\n \n import static org.assertj.core.api.Assertions.assertThat;\n-import static org.hamcrest.CoreMatchers.instanceOf;\n+import static org.hamcrest.CoreMatchers.any;\n import static org.mockito.Matchers.anyObject;\n import static org.mockito.Mockito.inOrder;\n import static org.mockito.Mockito.mock;\n@@ -337,7 +337,7 @@ public void customize(Server server) {\n \t\t\t}\n \n \t\t});\n-\t\tthis.thrown.expectCause(instanceOf(IllegalStateException.class));\n+\t\tthis.thrown.expectCause(any(IllegalStateException.class));\n \t\tfactory.getEmbeddedServletContainer().start();\n \t}\n ",
    "output": "Avoid limitation of javac's type inferencing"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/session/SessionAutoConfigurationTests.java\n@@ -61,8 +61,8 @@ public void contextFailsIfStoreTypeNotSet() {\n \tpublic void contextFailsIfStoreTypeNotAvailable() {\n \t\tthis.thrown.expect(BeanCreationException.class);\n \t\tthis.thrown.expectMessage(\"No session repository could be auto-configured\");\n-\t\tthis.thrown.expectMessage(\"session store type is 'mongo'\");\n-\t\tload(\"spring.session.store-type=mongo\");\n+\t\tthis.thrown.expectMessage(\"session store type is 'jdbc'\");\n+\t\tload(\"spring.session.store-type=jdbc\");\n \t}\n \n \t@Test",
    "output": "Fix build\nSpring Session's MongoDB store is no longer supported on master."
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/env/SpringApplicationJsonEnvironmentPostProcessor.java b/spring-boot/src/main/java/org/springframework/boot/env/SpringApplicationJsonEnvironmentPostProcessor.java\n--- a/spring-boot/src/main/java/org/springframework/boot/env/SpringApplicationJsonEnvironmentPostProcessor.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/env/SpringApplicationJsonEnvironmentPostProcessor.java\n@@ -106,8 +106,6 @@ private void processJson(ConfigurableEnvironment environment,\n \t/**\n \t * Flatten the map keys using period separator.\n \t * @param map The map that should be flattened\n-\t * @param source The property source for spring.application.json or\n-\t * SPRING_APPLICATION_JSON\n \t * @return the flattened map\n \t */\n \tprivate Map<String, Object> flatten(Map<String, Object> map) {",
    "output": "Fix checkstyle violation"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/AbstractHealthIndicator.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/AbstractHealthIndicator.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/AbstractHealthIndicator.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/AbstractHealthIndicator.java\n@@ -16,6 +16,9 @@\n \n package org.springframework.boot.actuate.health;\n \n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+\n import org.springframework.boot.actuate.health.Health.Builder;\n \n /**\n@@ -31,13 +34,16 @@\n  */\n public abstract class AbstractHealthIndicator implements HealthIndicator {\n \n+\tprivate final Log logger = LogFactory.getLog(getClass());\n+\n \t@Override\n \tpublic final Health health() {\n \t\tHealth.Builder builder = new Health.Builder();\n \t\ttry {\n \t\t\tdoHealthCheck(builder);\n \t\t}\n \t\tcatch (Exception ex) {\n+\t\t\tthis.logger.warn(\"Health check failed\", ex);\n \t\t\tbuilder.down(ex);\n \t\t}\n \t\treturn builder.build();",
    "output": "Log a warning if a health indicator throws an exception"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/AbstractHealthIndicator.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/AbstractHealthIndicator.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/AbstractHealthIndicator.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/AbstractHealthIndicator.java\n@@ -16,6 +16,9 @@\n \n package org.springframework.boot.actuate.health;\n \n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+\n import org.springframework.boot.actuate.health.Health.Builder;\n \n /**\n@@ -31,13 +34,16 @@\n  */\n public abstract class AbstractHealthIndicator implements HealthIndicator {\n \n+\tprivate final Log logger = LogFactory.getLog(getClass());\n+\n \t@Override\n \tpublic final Health health() {\n \t\tHealth.Builder builder = new Health.Builder();\n \t\ttry {\n \t\t\tdoHealthCheck(builder);\n \t\t}\n \t\tcatch (Exception ex) {\n+\t\t\tthis.logger.warn(\"Health check failed\", ex);\n \t\t\tbuilder.down(ex);\n \t\t}\n \t\treturn builder.build();",
    "output": "Log a warning if a health indicator throws an exception"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration.java\n@@ -117,17 +117,17 @@ public SpringLiquibase liquibase() {\n \n \t\tprivate SpringLiquibase createSpringLiquibase() {\n \t\t\tSpringLiquibase liquibase;\n-\t\t\tDataSource dataSource = getDataSource();\n-\t\t\tif (dataSource == null) {\n-\t\t\t\tdataSource = DataSourceBuilder.create().url(this.properties.getUrl())\n+\t\t\tDataSource dataSourceToUse = getDataSource();\n+\t\t\tif (dataSourceToUse == null) {\n+\t\t\t\tdataSourceToUse = DataSourceBuilder.create().url(this.properties.getUrl())\n \t\t\t\t\t\t.username(this.properties.getUser())\n \t\t\t\t\t\t.password(this.properties.getPassword()).build();\n \t\t\t\tliquibase = new DataSourceClosingSpringLiquibase();\n \t\t\t}\n \t\t\telse {\n \t\t\t\tliquibase = new SpringLiquibase();\n \t\t\t}\n-\t\t\tliquibase.setDataSource(dataSource);\n+\t\t\tliquibase.setDataSource(dataSourceToUse);\n \t\t\treturn liquibase;\n \t\t}\n ",
    "output": "Fix violation reported by Checkstyle"
  },
  {
    "input": "diff --git a/spring-boot-docs/src/test/java/org/springframework/boot/jdbc/BasicDataSourceExampleTests.java b/spring-boot-docs/src/test/java/org/springframework/boot/jdbc/BasicDataSourceExampleTests.java\n--- a/spring-boot-docs/src/test/java/org/springframework/boot/jdbc/BasicDataSourceExampleTests.java\n+++ b/spring-boot-docs/src/test/java/org/springframework/boot/jdbc/BasicDataSourceExampleTests.java\n@@ -37,7 +37,7 @@\n  * @author Stephane Nicoll\n  */\n @RunWith(SpringRunner.class)\n-@SpringBootTest(properties = \"app.datasource.url=jdbc:h2:mem:basic;DB_CLOSE_DELAY=-1\")\n+@SpringBootTest(properties = \"app.datasource.jdbcUrl=jdbc:h2:mem:basic;DB_CLOSE_DELAY=-1\")\n @Import(BasicDataSourceExample.BasicDataSourceConfiguration.class)\n public class BasicDataSourceExampleTests {\n ",
    "output": "Fix datasource example"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfigurationTests.java\n@@ -574,6 +574,7 @@ protected static class DataSourceConfig {\n \t\t@ConfigurationProperties(prefix = \"spring.datasource.test\")\n \t\tpublic DataSource testDataSource() {\n \t\t\treturn DataSourceBuilder.create()\n+\t\t\t\t\t.type(org.apache.tomcat.jdbc.pool.DataSource.class)\n \t\t\t\t\t.driverClassName(\"org.hsqldb.jdbc.JDBCDriver\")\n \t\t\t\t\t.url(\"jdbc:hsqldb:mem:test\").username(\"sa\").build();\n \t\t}",
    "output": "Fix build failure"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatServletWebServerFactory.java b/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatServletWebServerFactory.java\n--- a/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatServletWebServerFactory.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/web/embedded/tomcat/TomcatServletWebServerFactory.java\n@@ -252,7 +252,7 @@ private void addDefaultServlet(Context context) {\n \t\t// Otherwise the default location of a Spring DispatcherServlet cannot be set\n \t\tdefaultServlet.setOverridable(true);\n \t\tcontext.addChild(defaultServlet);\n-\t\taddServletMapping(context, \"/\", \"default\");\n+\t\tcontext.addServletMappingDecoded(\"/\", \"default\");\n \t}\n \n \tprivate void addJspServlet(Context context) {\n@@ -266,13 +266,8 @@ private void addJspServlet(Context context) {\n \t\t}\n \t\tjspServlet.setLoadOnStartup(3);\n \t\tcontext.addChild(jspServlet);\n-\t\taddServletMapping(context, \"*.jsp\", \"jsp\");\n-\t\taddServletMapping(context, \"*.jspx\", \"jsp\");\n-\t}\n-\n-\t@SuppressWarnings(\"deprecation\")\n-\tprivate void addServletMapping(Context context, String pattern, String name) {\n-\t\tcontext.addServletMapping(pattern, name);\n+\t\tcontext.addServletMappingDecoded(\"*.jsp\", \"jsp\");\n+\t\tcontext.addServletMappingDecoded(\"*.jspx\", \"jsp\");\n \t}\n \n \tprivate void addJasperInitializer(TomcatEmbeddedContext context) {",
    "output": "Remove use of deprecated API in TomcatServletWebServerFactory"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/properties/EnableConfigurationPropertiesImportSelector.java b/spring-boot/src/main/java/org/springframework/boot/context/properties/EnableConfigurationPropertiesImportSelector.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/properties/EnableConfigurationPropertiesImportSelector.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/EnableConfigurationPropertiesImportSelector.java\n@@ -45,7 +45,6 @@\n  * @author Christian Dupuis\n  * @author Stephane Nicoll\n  */\n-@Deprecated\n class EnableConfigurationPropertiesImportSelector implements ImportSelector {\n \n \t@Override",
    "output": "Remove accidental deprecaton of EnableConfigurationPropertiesImportSelector"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/jdbc/DatabaseDriver.java b/spring-boot/src/main/java/org/springframework/boot/jdbc/DatabaseDriver.java\n--- a/spring-boot/src/main/java/org/springframework/boot/jdbc/DatabaseDriver.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/jdbc/DatabaseDriver.java\n@@ -123,8 +123,7 @@ protected boolean matchProductName(String productName) {\n \t * Firebird.\n \t */\n \tFIREBIRD(\"Firebird\", \"org.firebirdsql.jdbc.FBDriver\",\n-\t\t\t\"org.firebirdsql.pool.FBConnectionPoolDataSource\",\n-\t\t\t\"SELECT 1 FROM RDB$DATABASE\") {\n+\t\t\t\"org.firebirdsql.ds.FBXADataSource\", \"SELECT 1 FROM RDB$DATABASE\") {\n \n \t\t@Override\n \t\tprotected Collection<String> getUrlPrefixes() {",
    "output": "Upgrade to Jaybird 3.0.0"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/EnvironmentMvcEndpointTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/EnvironmentMvcEndpointTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/EnvironmentMvcEndpointTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/EnvironmentMvcEndpointTests.java\n@@ -169,7 +169,7 @@ public void propertyWithTypeOtherThanStringShouldNotFail() throws Exception {\n \t\tMap<String, Object> source = new HashMap<String, Object>();\n \t\tsource.put(\"foo\", Collections.singletonMap(\"bar\", \"baz\"));\n \t\tpropertySources.addFirst(new MapPropertySource(\"test\", source));\n-\t\tthis.mvc.perform(get(\"/env/foo.*\")).andExpect(status().isOk())\n+\t\tthis.mvc.perform(get(\"/application/env/foo.*\")).andExpect(status().isOk())\n \t\t\t\t.andExpect(content().string(\"{\\\"foo\\\":{\\\"bar\\\":\\\"baz\\\"}}\"));\n \t}\n ",
    "output": "Fix actuator path used in tests"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/SpringBootPluginExtension.java b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/SpringBootPluginExtension.java\n--- a/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/SpringBootPluginExtension.java\n+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/SpringBootPluginExtension.java\n@@ -294,7 +294,7 @@ public void buildInfo(Closure<?> taskConfigurer) {\n \t/**\n \t * Layout Types.\n \t */\n-\tenum LayoutType {\n+\tpublic enum LayoutType {\n \n \t\tJAR(new Layouts.Jar()),\n ",
    "output": "Make LayoutType public"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/properties/source/DefaultPropertyMapper.java b/spring-boot/src/main/java/org/springframework/boot/context/properties/source/DefaultPropertyMapper.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/properties/source/DefaultPropertyMapper.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/source/DefaultPropertyMapper.java\n@@ -89,7 +89,7 @@ private static class Cache<K> extends LinkedHashMap<K, List<PropertyMapping>> {\n \n \t\t@Override\n \t\tprotected boolean removeEldestEntry(Map.Entry<K, List<PropertyMapping>> eldest) {\n-\t\t\treturn size() >= this.capacity;\n+\t\t\treturn size() > this.capacity;\n \n \t\t}\n ",
    "output": "Fix cache sizing bug\nFix a cache size bug in `DefaultPropertyMapper` which caused the\ncache to be purged immediately."
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/audit/InMemoryAuditEventRepository.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/audit/InMemoryAuditEventRepository.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/audit/InMemoryAuditEventRepository.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/audit/InMemoryAuditEventRepository.java\n@@ -31,7 +31,7 @@\n  */\n public class InMemoryAuditEventRepository implements AuditEventRepository {\n \n-\tprivate static final int DEFAULT_CAPACITY = 4000;\n+\tprivate static final int DEFAULT_CAPACITY = 1000;\n \n \tprivate final Object monitor = new Object();\n ",
    "output": "Reduce InMemoryAuditEventRepository default capacity\nLower the default capacity used in `InMemoryAuditEventRepository` from\n4000 to 1000. This should help reduce memory consumption."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mustache/MustacheProperties.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mustache/MustacheProperties.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mustache/MustacheProperties.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mustache/MustacheProperties.java\n@@ -30,7 +30,7 @@ public class MustacheProperties extends AbstractTemplateViewResolverProperties {\n \n \tpublic static final String DEFAULT_PREFIX = \"classpath:/templates/\";\n \n-\tpublic static final String DEFAULT_SUFFIX = \".html\";\n+\tpublic static final String DEFAULT_SUFFIX = \".mustache\";\n \n \t/**\n \t * Prefix to apply to template names.",
    "output": "Change default file extension for Mustache templates\nThis commit changes the default file extension for Mustache templates,\nfrom `.html` to `.mustache`, which is the file extension used in the\nofficial reference documentation and by most IDE plugins."
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/CollectionBinderTests.java b/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/CollectionBinderTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/CollectionBinderTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/context/properties/bind/CollectionBinderTests.java\n@@ -48,6 +48,9 @@ public class CollectionBinderTests {\n \tprivate static final Bindable<List<String>> STRING_LIST = Bindable\n \t\t\t.listOf(String.class);\n \n+\tprivate static final Bindable<Set<String>> STRING_SET = Bindable\n+\t\t\t.setOf(String.class);\n+\n \tprivate List<ConfigurationPropertySource> sources = new ArrayList<>();\n \n \tprivate Binder binder;\n@@ -68,6 +71,17 @@ public void bindToCollectionShouldReturnPopulatedCollection() throws Exception {\n \t\tassertThat(result).containsExactly(1, 2, 3);\n \t}\n \n+\t@Test\n+\tpublic void bindToSetShouldReturnPopulatedCollection() throws Exception {\n+\t\tMockConfigurationPropertySource source = new MockConfigurationPropertySource();\n+\t\tsource.put(\"foo[0]\", \"a\");\n+\t\tsource.put(\"foo[1]\", \"b\");\n+\t\tsource.put(\"foo[2]\", \"c\");\n+\t\tthis.sources.add(source);\n+\t\tSet<String> result = this.binder.bind(\"foo\", STRING_SET).get();\n+\t\tassertThat(result).containsExactly(\"a\", \"b\", \"c\");\n+\t}\n+\n \t@Test\n \tpublic void bindToCollectionWhenNestedShouldReturnPopulatedCollection()\n \t\t\tthrows Exception {",
    "output": "Test binding of Set\nAdd a test to ensure that the new binder can bind correctly to a\nSet."
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/bind/PropertySourcesPropertyValues.java b/spring-boot/src/main/java/org/springframework/boot/bind/PropertySourcesPropertyValues.java\n--- a/spring-boot/src/main/java/org/springframework/boot/bind/PropertySourcesPropertyValues.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertySourcesPropertyValues.java\n@@ -25,8 +25,10 @@\n import org.springframework.beans.MutablePropertyValues;\n import org.springframework.beans.PropertyValue;\n import org.springframework.beans.PropertyValues;\n+import org.springframework.boot.context.properties.source.ConfigurationPropertySources;\n import org.springframework.core.env.CompositePropertySource;\n import org.springframework.core.env.EnumerablePropertySource;\n+import org.springframework.core.env.MutablePropertySources;\n import org.springframework.core.env.PropertySource;\n import org.springframework.core.env.PropertySources;\n import org.springframework.core.env.PropertySourcesPropertyResolver;\n@@ -108,6 +110,10 @@ public PropertySourcesPropertyValues(PropertySources propertySources,\n \t\t\tPropertyNamePatternsMatcher includes, boolean resolvePlaceholders) {\n \t\tAssert.notNull(propertySources, \"PropertySources must not be null\");\n \t\tAssert.notNull(includes, \"Includes must not be null\");\n+\t\tMutablePropertySources mutablePropertySources = new MutablePropertySources(\n+\t\t\t\tpropertySources);\n+\t\tmutablePropertySources.remove(ConfigurationPropertySources.PROPERTY_SOURCE_NAME);\n+\t\tpropertySources = mutablePropertySources;\n \t\tthis.propertySources = propertySources;\n \t\tthis.nonEnumerableFallbackNames = nonEnumerableFallbackNames;\n \t\tthis.includes = includes;",
    "output": "Remove ConfigurationProperySource\nRemove `ConfigurationProperySource` from `PropertySourcesPropertyValues`\nso that the deprecated code to continues to work."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnWebApplicationCondition.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnWebApplicationCondition.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnWebApplicationCondition.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnWebApplicationCondition.java\n@@ -27,8 +27,8 @@\n import org.springframework.core.type.AnnotatedTypeMetadata;\n import org.springframework.util.ClassUtils;\n import org.springframework.util.ObjectUtils;\n+import org.springframework.web.context.ConfigurableWebEnvironment;\n import org.springframework.web.context.WebApplicationContext;\n-import org.springframework.web.context.support.StandardServletEnvironment;\n \n /**\n  * {@link Condition} that checks for the presence or absence of\n@@ -102,9 +102,9 @@ private ConditionOutcome isServletWebApplication(ConditionContext context) {\n \t\t\t\treturn ConditionOutcome.match(message.foundExactly(\"'session' scope\"));\n \t\t\t}\n \t\t}\n-\t\tif (context.getEnvironment() instanceof StandardServletEnvironment) {\n+\t\tif (context.getEnvironment() instanceof ConfigurableWebEnvironment) {\n \t\t\treturn ConditionOutcome\n-\t\t\t\t\t.match(message.foundExactly(\"StandardServletEnvironment\"));\n+\t\t\t\t\t.match(message.foundExactly(\"ConfigurableWebEnvironment\"));\n \t\t}\n \t\tif (context.getResourceLoader() instanceof WebApplicationContext) {\n \t\t\treturn ConditionOutcome.match(message.foundExactly(\"WebApplicationContext\"));",
    "output": "Polish OnWebApplicationCondition message"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/couchbase/SpringBootCouchbaseDataConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/couchbase/SpringBootCouchbaseDataConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/couchbase/SpringBootCouchbaseDataConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/couchbase/SpringBootCouchbaseDataConfiguration.java\n@@ -26,11 +26,11 @@\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.data.annotation.Persistent;\n+import org.springframework.data.convert.CustomConversions;\n import org.springframework.data.couchbase.config.AbstractCouchbaseDataConfiguration;\n import org.springframework.data.couchbase.config.BeanNames;\n import org.springframework.data.couchbase.config.CouchbaseConfigurer;\n import org.springframework.data.couchbase.core.CouchbaseTemplate;\n-import org.springframework.data.couchbase.core.convert.CustomConversions;\n import org.springframework.data.couchbase.core.mapping.Document;\n import org.springframework.data.couchbase.core.query.Consistency;\n import org.springframework.data.couchbase.repository.support.IndexManager;",
    "output": "Fix broken build"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/docs/RunningDocumentationTests.java b/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/docs/RunningDocumentationTests.java\n--- a/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/docs/RunningDocumentationTests.java\n+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/docs/RunningDocumentationTests.java\n@@ -16,6 +16,7 @@\n \n package org.springframework.boot.gradle.docs;\n \n+import java.io.File;\n import java.io.IOException;\n \n import org.junit.Rule;\n@@ -26,7 +27,7 @@\n import static org.assertj.core.api.Assertions.assertThat;\n \n /**\n- * Tests for the integrating with Actuator documentation.\n+ * Tests for the documentation about running a Spring Boot application.\n  *\n  * @author Andy Wilkinson\n  */\n@@ -54,7 +55,9 @@ public void applicationPluginMainClassName() throws IOException {\n \tpublic void bootRunSourceResources() throws IOException {\n \t\tassertThat(this.gradleBuild\n \t\t\t\t.script(\"src/main/gradle/running/boot-run-source-resources.gradle\")\n-\t\t\t\t.build(\"configuredClasspath\").getOutput()).contains(\"src/main/resources\");\n+\t\t\t\t.build(\"configuredClasspath\").getOutput()).contains(\n+\t\t\t\t\t\tnew File(this.gradleBuild.getProjectDir(), \"src/main/resources\")\n+\t\t\t\t\t\t\t\t.getAbsolutePath());\n \t}\n \n }",
    "output": "Make RunningDocumentationTests platform independent"
  },
  {
    "input": "diff --git a/spring-boot-test/src/test/java/org/springframework/boot/test/context/SpringBootTestWebEnvironmentContextHierarchyTests.java b/spring-boot-test/src/test/java/org/springframework/boot/test/context/SpringBootTestWebEnvironmentContextHierarchyTests.java\n--- a/spring-boot-test/src/test/java/org/springframework/boot/test/context/SpringBootTestWebEnvironmentContextHierarchyTests.java\n+++ b/spring-boot-test/src/test/java/org/springframework/boot/test/context/SpringBootTestWebEnvironmentContextHierarchyTests.java\n@@ -20,7 +20,7 @@\n import org.junit.runner.RunWith;\n \n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.boot.test.context.AbstractSpringBootTestEmbeddedWebEnvironmentTests.AbstractConfig;\n+import org.springframework.boot.test.context.AbstractSpringBootTestWebServerWebEnvironmentTests.AbstractConfig;\n import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;\n import org.springframework.boot.test.context.SpringBootTestWebEnvironmentContextHierarchyTests.ChildConfiguration;\n import org.springframework.boot.test.context.SpringBootTestWebEnvironmentContextHierarchyTests.ParentConfiguration;",
    "output": "Fix merge issue"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricFilterAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricFilterAutoConfiguration.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricFilterAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricFilterAutoConfiguration.java\n@@ -46,7 +46,7 @@\n @ConditionalOnClass({ Servlet.class, ServletRegistration.class,\n \t\tOncePerRequestFilter.class, HandlerMapping.class })\n @AutoConfigureAfter(MetricRepositoryAutoConfiguration.class)\n-@ConditionalOnProperty(prefix = \"endpoints.metrics.filter\", name=\"enabled\", matchIfMissing = true)\n+@ConditionalOnProperty(prefix = \"endpoints.metrics.filter\", name = \"enabled\", matchIfMissing = true)\n @EnableConfigurationProperties({ MetricFilterProperties.class })\n public class MetricFilterAutoConfiguration {\n ",
    "output": "Fix checkstyle violation"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/HttpHandlerAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/HttpHandlerAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/HttpHandlerAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/HttpHandlerAutoConfiguration.java\n@@ -115,10 +115,10 @@ public <T extends ServerResponse> HttpHandler httpHandler(\n \t\t\t\t\t.reduce(RouterFunction::and).get();\n \t\t\tHandlerStrategies.Builder strategiesBuilder = HandlerStrategies.builder();\n \t\t\tif (this.messageReaders != null) {\n-\t\t\t\tthis.messageReaders.forEach(strategiesBuilder::messageReader);\n+\t\t\t\tthis.messageReaders.forEach(strategiesBuilder::customMessageReader);\n \t\t\t}\n \t\t\tif (this.messageWriters != null) {\n-\t\t\t\tthis.messageWriters.forEach(strategiesBuilder::messageWriter);\n+\t\t\t\tthis.messageWriters.forEach(strategiesBuilder::customMessageWriter);\n \t\t\t}\n \t\t\tif (this.viewResolvers != null) {\n \t\t\t\tthis.viewResolvers.forEach(strategiesBuilder::viewResolver);",
    "output": "Fix API change in latest snapshot"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/LoggersMvcEndpoint.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/LoggersMvcEndpoint.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/LoggersMvcEndpoint.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/LoggersMvcEndpoint.java\n@@ -68,15 +68,17 @@ public Object set(@PathVariable String name,\n \t\t\t// disabled\n \t\t\treturn getDisabledResponse();\n \t\t}\n-\t\tString level = configuration.get(\"configuredLevel\");\n+\t\tLogLevel logLevel;\n \t\ttry {\n-\t\t\tLogLevel logLevel = level == null ? null : LogLevel.valueOf(level.toUpperCase());\n-\t\t\tthis.delegate.setLogLevel(name, logLevel);\n-\t\t\treturn ResponseEntity.ok().build();\n+\t\t\tString level = configuration.get(\"configuredLevel\");\n+\t\t\tlogLevel = level == null ? null : LogLevel.valueOf(level.toUpperCase());\n \t\t}\n \t\tcatch (IllegalArgumentException ex) {\n \t\t\treturn ResponseEntity.badRequest().build();\n \t\t}\n+\n+\t\tthis.delegate.setLogLevel(name, logLevel);\n+\t\treturn ResponseEntity.ok().build();\n \t}\n \n }",
    "output": "Fix http status code with unknown log level"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/SolrHealthIndicatorTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/SolrHealthIndicatorTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/SolrHealthIndicatorTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/SolrHealthIndicatorTests.java\n@@ -67,7 +67,7 @@ public void indicatorExists() {\n \t@Test\n \tpublic void solrIsUp() throws Exception {\n \t\tSolrClient solrClient = mock(SolrClient.class);\n-\t\tgiven(solrClient.request(any(CoreAdminRequest.class),isNull()))\n+\t\tgiven(solrClient.request(any(CoreAdminRequest.class), isNull()))\n \t\t\t.willReturn(mockResponse(0));\n \t\tSolrHealthIndicator healthIndicator = new SolrHealthIndicator(solrClient);\n \t\tHealth health = healthIndicator.health();",
    "output": "Fix checkstyle rule"
  },
  {
    "input": "diff --git a/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/AgentReloader.java b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/AgentReloader.java\n--- a/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/AgentReloader.java\n+++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/AgentReloader.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2015 the original author or authors.\n+ * Copyright 2012-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -36,6 +36,7 @@ public abstract class AgentReloader {\n \t\tSet<String> agentClasses = new LinkedHashSet<String>();\n \t\tagentClasses.add(\"org.zeroturnaround.javarebel.Integration\");\n \t\tagentClasses.add(\"org.zeroturnaround.javarebel.ReloaderFactory\");\n+\t\tagentClasses.add(\"org.hotswap.agent.HotswapAgent\");\n \t\tAGENT_CLASSES = Collections.unmodifiableSet(agentClasses);\n \t}\n ",
    "output": "Add support for HotSwapAgent to devtools\nAdd support for HotSwapAgent to devtools"
  },
  {
    "input": "diff --git a/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/AgentReloader.java b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/AgentReloader.java\n--- a/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/AgentReloader.java\n+++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/AgentReloader.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2015 the original author or authors.\n+ * Copyright 2012-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -36,7 +36,7 @@ public abstract class AgentReloader {\n \t\tSet<String> agentClasses = new LinkedHashSet<String>();\n \t\tagentClasses.add(\"org.zeroturnaround.javarebel.Integration\");\n \t\tagentClasses.add(\"org.zeroturnaround.javarebel.ReloaderFactory\");\n-\t\tagentClasses.add(\"org.hotswap.agent.HotswapAgent\"); // relevant for http://hotswapagent.org/ (https://github.com/HotswapProjects/HotswapAgent)\n+\t\tagentClasses.add(\"org.hotswap.agent.HotswapAgent\");\n \t\tAGENT_CLASSES = Collections.unmodifiableSet(agentClasses);\n \t}\n ",
    "output": "Add support for HotSwapAgent to devtools"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java b/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java\n@@ -457,7 +457,7 @@ private void validateProfilePrecedence(String... profiles) {\n \t}\n \n \tprivate void withDebugLogging(Runnable runnable) {\n-\t\tLoggerContext loggingContext = (LoggerContext) LogManager.getContext(true);\n+\t\tLoggerContext loggingContext = (LoggerContext) LogManager.getContext(false);\n \t\torg.apache.logging.log4j.core.config.Configuration configuration = loggingContext\n \t\t\t\t.getConfiguration();\n \t\tconfiguration.addLogger(ConfigFileApplicationListener.class.getName(),",
    "output": "Align test logging config with latest change in Spring Framework\nSee spring-projects/spring-framework@ea5cb26d750f"
  },
  {
    "input": "diff --git a/spring-boot-test/src/test/java/org/springframework/boot/test/web/htmlunit/webdriver/LocalHostWebConnectionHtmlUnitDriverTests.java b/spring-boot-test/src/test/java/org/springframework/boot/test/web/htmlunit/webdriver/LocalHostWebConnectionHtmlUnitDriverTests.java\n--- a/spring-boot-test/src/test/java/org/springframework/boot/test/web/htmlunit/webdriver/LocalHostWebConnectionHtmlUnitDriverTests.java\n+++ b/spring-boot-test/src/test/java/org/springframework/boot/test/web/htmlunit/webdriver/LocalHostWebConnectionHtmlUnitDriverTests.java\n@@ -87,7 +87,8 @@ public void createWithCapabilitiesWhenEnvironmentIsNullWillThrowException()\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n \t\tthis.thrown.expectMessage(\"Environment must not be null\");\n \t\tCapabilities capabilities = mock(Capabilities.class);\n-\t\tgiven(capabilities.getBrowserName()).willReturn(\"chrome\");\n+\t\tgiven(capabilities.getBrowserName()).willReturn(\"htmlunit\");\n+\t\tgiven(capabilities.getVersion()).willReturn(\"chrome\");\n \t\tnew LocalHostWebConnectionHtmlUnitDriver(null, capabilities);\n \t}\n ",
    "output": "Upgrade HtmlUnitDriver tests to align with HtmlUnit 2.26 and cb34189c66a21def2b5f79fcc13a61a3e5828e37"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/transaction/TransactionAutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/transaction/TransactionAutoConfigurationTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/transaction/TransactionAutoConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/transaction/TransactionAutoConfigurationTests.java\n@@ -69,7 +69,8 @@ public void noTransactionManager() {\n \t@Test\n \tpublic void singleTransactionManager() {\n \t\tload(new Class<?>[] { DataSourceAutoConfiguration.class,\n-\t\t\t\tDataSourceTransactionManagerAutoConfiguration.class });\n+\t\t\t\tDataSourceTransactionManagerAutoConfiguration.class },\n+\t\t\t\t\"spring.datasource.initialize:false\");\n \t\tPlatformTransactionManager transactionManager = this.context\n \t\t\t\t.getBean(PlatformTransactionManager.class);\n \t\tTransactionTemplate transactionTemplate = this.context",
    "output": "Disable unexpected datasource initialization\nThis commit restore the disabling of datasource initialization that was\naccidently removed in db33a75 so that other tests aren't affected by it."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/WebFluxAnnotationAutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/WebFluxAnnotationAutoConfigurationTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/WebFluxAnnotationAutoConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/reactive/WebFluxAnnotationAutoConfigurationTests.java\n@@ -91,7 +91,7 @@ public void shouldRegisterCustomHandlerMethodArgumentResolver() throws Exception\n \t\tload(CustomArgumentResolvers.class);\n \t\tRequestMappingHandlerAdapter adapter = this.context\n \t\t\t\t.getBean(RequestMappingHandlerAdapter.class);\n-\t\tassertThat(adapter.getArgumentResolvers()).contains(\n+\t\tassertThat(adapter.getCustomArgumentResolvers()).contains(\n \t\t\t\tthis.context.getBean(\"firstResolver\",\n \t\t\t\t\t\tHandlerMethodArgumentResolver.class),\n \t\t\t\tthis.context.getBean(\"secondResolver\",",
    "output": "Fix compilation error with latest webflux changes\nSee commit c5bcefbd in Spring Framework, which refactored\nthe RequestMappingHandlerAdapter."
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/env/OriginTrackedPropertiesLoaderTests.java b/spring-boot/src/test/java/org/springframework/boot/env/OriginTrackedPropertiesLoaderTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/env/OriginTrackedPropertiesLoaderTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/env/OriginTrackedPropertiesLoaderTests.java\n@@ -111,6 +111,13 @@ public void getPropertyWithValueComment() throws Exception {\n \t\tassertThat(getLocation(value)).isEqualTo(\"36:29\");\n \t}\n \n+\t@Test\n+\tpublic void getPropertyWithMultilineImmediateBang() {\n+\t\tOriginTrackedValue value = this.properties.get(\"test-multiline-immediate-bang\");\n+\t\tassertThat(getValue(value)).isEqualTo(\"!foo\");\n+\t\tassertThat(getLocation(value)).isEqualTo(\"39:1\");\n+\t}\n+\n \t@Test\n \tpublic void getPropertyWithCarriageReturn() throws Exception {\n \t\tOriginTrackedValue value = this.properties.get(\"test-return-property\");",
    "output": "Add a missing test for \"Fix properties parsing for comment chars\""
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/env/OriginTrackedPropertiesLoaderTests.java b/spring-boot/src/test/java/org/springframework/boot/env/OriginTrackedPropertiesLoaderTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/env/OriginTrackedPropertiesLoaderTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/env/OriginTrackedPropertiesLoaderTests.java\n@@ -111,6 +111,13 @@ public void getPropertyWithValueComment() throws Exception {\n \t\tassertThat(getLocation(value)).isEqualTo(\"36:29\");\n \t}\n \n+\t@Test\n+\tpublic void getPropertyWithMultilineImmediateBang() {\n+\t\tOriginTrackedValue value = this.properties.get(\"test-multiline-immediate-bang\");\n+\t\tassertThat(getValue(value)).isEqualTo(\"!foo\");\n+\t\tassertThat(getLocation(value)).isEqualTo(\"39:1\");\n+\t}\n+\n \t@Test\n \tpublic void getPropertyWithCarriageReturn() throws Exception {\n \t\tOriginTrackedValue value = this.properties.get(\"test-return-property\");",
    "output": "Add a missing test for \"Fix properties parsing for comment chars\""
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/WebRequestTraceFilter.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/WebRequestTraceFilter.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/WebRequestTraceFilter.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/WebRequestTraceFilter.java\n@@ -202,7 +202,7 @@ protected void postProcessRequestHeaders(Map<String, Object> headers) {\n \n \tprivate void addTimeTaken(long startTime, long endTime, Map<String, Object> trace) {\n \t\tlong timeTaken = endTime - startTime;\n-\t\tadd(trace, Include.TIME_TAKEN, \"timeTaken\", \"\" + timeTaken);\n+\t\tadd(trace, Include.TIME_TAKEN, \"timeTaken\", String.valueOf(timeTaken));\n \t}\n \n \t@SuppressWarnings(\"unchecked\")\n@@ -222,7 +222,7 @@ private Map<String, String> getResponseHeaders(HttpServletResponse response) {\n \t\tif (!isIncluded(Include.COOKIES)) {\n \t\t\theaders.remove(\"Set-Cookie\");\n \t\t}\n-\t\theaders.put(\"status\", \"\" + response.getStatus());\n+\t\theaders.put(\"status\", String.valueOf(response.getStatus()));\n \t\treturn headers;\n \t}\n ",
    "output": "Replace empty string concatenation with String.valueOf()"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/WebRequestTraceFilter.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/WebRequestTraceFilter.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/WebRequestTraceFilter.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/WebRequestTraceFilter.java\n@@ -202,7 +202,7 @@ protected void postProcessRequestHeaders(Map<String, Object> headers) {\n \n \tprivate void addTimeTaken(long startTime, long endTime, Map<String, Object> trace) {\n \t\tlong timeTaken = endTime - startTime;\n-\t\tadd(trace, Include.TIME_TAKEN, \"timeTaken\", \"\" + timeTaken);\n+\t\tadd(trace, Include.TIME_TAKEN, \"timeTaken\", String.valueOf(timeTaken));\n \t}\n \n \t@SuppressWarnings(\"unchecked\")\n@@ -222,7 +222,7 @@ private Map<String, String> getResponseHeaders(HttpServletResponse response) {\n \t\tif (!isIncluded(Include.COOKIES)) {\n \t\t\theaders.remove(\"Set-Cookie\");\n \t\t}\n-\t\theaders.put(\"status\", \"\" + response.getStatus());\n+\t\theaders.put(\"status\", String.valueOf(response.getStatus()));\n \t\treturn headers;\n \t}\n ",
    "output": "Replace empty string concatenation with String.valueOf()"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfigurationTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfigurationTests.java\n@@ -27,6 +27,7 @@\n import org.flywaydb.core.Flyway;\n import org.flywaydb.core.api.MigrationVersion;\n import org.flywaydb.core.api.callback.FlywayCallback;\n+import org.flywaydb.core.internal.callback.SqlScriptFlywayCallback;\n import org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform;\n import org.junit.After;\n import org.junit.Before;\n@@ -265,7 +266,9 @@ public void callbacksAreConfiguredAndOrdered() throws Exception {\n \t\t\t\tFlywayCallback.class);\n \t\tFlywayCallback callbackTwo = this.context.getBean(\"callbackTwo\",\n \t\t\t\tFlywayCallback.class);\n-\t\tassertThat(flyway.getCallbacks()).containsExactly(callbackTwo, callbackOne);\n+\t\tassertThat(flyway.getCallbacks()).hasSize(3);\n+\t\tassertThat(flyway.getCallbacks()).startsWith(callbackTwo, callbackOne);\n+\t\tassertThat(flyway.getCallbacks()[2]).isInstanceOf(SqlScriptFlywayCallback.class);\n \t\tInOrder orderedCallbacks = inOrder(callbackOne, callbackTwo);\n \t\torderedCallbacks.verify(callbackTwo).beforeMigrate(any(Connection.class));\n \t\torderedCallbacks.verify(callbackOne).beforeMigrate(any(Connection.class));",
    "output": "Upgrade to Flyway 4.1.2"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointMvcIntegrationTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointMvcIntegrationTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointMvcIntegrationTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointMvcIntegrationTests.java\n@@ -71,7 +71,7 @@\n  * @author Dave Syer\n  */\n @RunWith(SpringRunner.class)\n-@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)\n+@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT, properties = \"foo.bar=baz\")\n @DirtiesContext\n @TestPropertySource(properties = \"management.security.enabled=false\")\n public class EndpointMvcIntegrationTests {\n@@ -85,8 +85,8 @@ public class EndpointMvcIntegrationTests {\n \t@Test\n \tpublic void envEndpointNotHidden() throws InterruptedException {\n \t\tString body = new TestRestTemplate().getForObject(\n-\t\t\t\t\"http://localhost:\" + this.port + \"/env/user.dir\", String.class);\n-\t\tassertThat(body).isNotNull().contains(\"spring-boot-actuator\");\n+\t\t\t\t\"http://localhost:\" + this.port + \"/env/foo.bar\", String.class);\n+\t\tassertThat(body).isNotNull().contains(\"\\\"baz\\\"\");\n \t\tassertThat(this.interceptor.invoked()).isTrue();\n \t}\n ",
    "output": "Avoid problem caused by new mime mappings in Framework snapshots"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/RedisSessionConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/RedisSessionConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/RedisSessionConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/RedisSessionConfiguration.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2016 the original author or authors.\n+ * Copyright 2012-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -23,6 +23,7 @@\n \n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n@@ -38,10 +39,12 @@\n  * @author Tommy Ludwig\n  * @author Eddú Meléndez\n  * @author Stephane Nicoll\n+ * @author Vedran Pavic\n  */\n @Configuration\n+@ConditionalOnClass(RedisTemplate.class)\n @ConditionalOnMissingBean(SessionRepository.class)\n-@ConditionalOnBean({ RedisTemplate.class, RedisConnectionFactory.class })\n+@ConditionalOnBean(RedisConnectionFactory.class)\n @Conditional(SessionCondition.class)\n class RedisSessionConfiguration {\n ",
    "output": "Improve `RedisSessionConfiguration` conditions"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/RedisSessionConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/RedisSessionConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/RedisSessionConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/RedisSessionConfiguration.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2016 the original author or authors.\n+ * Copyright 2012-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -23,6 +23,7 @@\n \n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n@@ -38,10 +39,12 @@\n  * @author Tommy Ludwig\n  * @author Eddú Meléndez\n  * @author Stephane Nicoll\n+ * @author Vedran Pavic\n  */\n @Configuration\n+@ConditionalOnClass(RedisTemplate.class)\n @ConditionalOnMissingBean(SessionRepository.class)\n-@ConditionalOnBean({ RedisTemplate.class, RedisConnectionFactory.class })\n+@ConditionalOnBean(RedisConnectionFactory.class)\n @Conditional(SessionCondition.class)\n class RedisSessionConfiguration {\n ",
    "output": "Improve `RedisSessionConfiguration` conditions"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/domain/EntityScanPackages.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/domain/EntityScanPackages.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/domain/EntityScanPackages.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/domain/EntityScanPackages.java\n@@ -31,9 +31,7 @@\n import org.springframework.beans.factory.support.BeanDefinitionRegistry;\n import org.springframework.beans.factory.support.GenericBeanDefinition;\n import org.springframework.context.annotation.ImportBeanDefinitionRegistrar;\n-import org.springframework.core.Ordered;\n import org.springframework.core.annotation.AnnotationAttributes;\n-import org.springframework.core.annotation.Order;\n import org.springframework.core.type.AnnotationMetadata;\n import org.springframework.util.Assert;\n import org.springframework.util.ClassUtils;\n@@ -143,7 +141,6 @@ private static String[] addPackageNames(\n \t * {@link ImportBeanDefinitionRegistrar} to store the base package from the importing\n \t * configuration.\n \t */\n-\t@Order(Ordered.HIGHEST_PRECEDENCE)\n \tstatic class Registrar implements ImportBeanDefinitionRegistrar {\n \n \t\t@Override",
    "output": "Drop superfluous `@Order` annotation\nRemove `@Order` which has no effect on `ImportBeanDefinitionRegistrar`."
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/SpringBootVersion.java b/spring-boot/src/main/java/org/springframework/boot/SpringBootVersion.java\n--- a/spring-boot/src/main/java/org/springframework/boot/SpringBootVersion.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/SpringBootVersion.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2015 the original author or authors.\n+ * Copyright 2012-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -40,7 +40,7 @@ private SpringBootVersion() {\n \t * @see Package#getImplementationVersion()\n \t */\n \tpublic static String getVersion() {\n-\t\tPackage pkg = SpringApplication.class.getPackage();\n+\t\tPackage pkg = SpringBootVersion.class.getPackage();\n \t\treturn (pkg != null ? pkg.getImplementationVersion() : null);\n \t}\n ",
    "output": "Fix SpringBootVersion tangle\nUpdate `SpringBootVersion` to no longer reference `SpringApplication`\nfor the root package."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/webflux/HttpHandlerAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/webflux/HttpHandlerAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/webflux/HttpHandlerAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/webflux/HttpHandlerAutoConfiguration.java\n@@ -125,10 +125,7 @@ public HttpHandler httpHandler(List<RouterFunction> routerFunctions) {\n \t\t\t\t\tstrategiesBuilder.build());\n \t\t\tWebHttpHandlerBuilder builder = WebHttpHandlerBuilder.webHandler(webHandler)\n \t\t\t\t\t.sessionManager(this.webSessionManager);\n-\t\t\tif (this.webFilters != null) {\n-\t\t\t\tbuilder.filters(\n-\t\t\t\t\t\tthis.webFilters.toArray(new WebFilter[this.webFilters.size()]));\n-\t\t\t}\n+\t\t\tbuilder.filters(this.webFilters);\n \t\t\treturn builder.build();\n \t\t}\n ",
    "output": "Fix HttpHandlerAutoConfiguration\nFix HttpHandlerAutoConfiguration following upstream Spring Framework\nchanges."
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/SpringApplicationBannerPrinter.java b/spring-boot/src/main/java/org/springframework/boot/SpringApplicationBannerPrinter.java\n--- a/spring-boot/src/main/java/org/springframework/boot/SpringApplicationBannerPrinter.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplicationBannerPrinter.java\n@@ -56,7 +56,7 @@ class SpringApplicationBannerPrinter {\n \t}\n \n \tpublic Banner print(Environment environment, Class<?> sourceClass, Log logger) {\n-\t\tBanner banner = getBanner(environment, this.fallbackBanner);\n+\t\tBanner banner = getBanner(environment);\n \t\ttry {\n \t\t\tlogger.info(createStringFromBanner(banner, environment, sourceClass));\n \t\t}\n@@ -67,12 +67,12 @@ public Banner print(Environment environment, Class<?> sourceClass, Log logger) {\n \t}\n \n \tpublic Banner print(Environment environment, Class<?> sourceClass, PrintStream out) {\n-\t\tBanner banner = getBanner(environment, this.fallbackBanner);\n+\t\tBanner banner = getBanner(environment);\n \t\tbanner.printBanner(environment, sourceClass, out);\n \t\treturn new PrintedBanner(banner, sourceClass);\n \t}\n \n-\tprivate Banner getBanner(Environment environment, Banner definedBanner) {\n+\tprivate Banner getBanner(Environment environment) {\n \t\tBanners banners = new Banners();\n \t\tbanners.addIfNotNull(getImageBanner(environment));\n \t\tbanners.addIfNotNull(getTextBanner(environment));",
    "output": "Remove unused parameter"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/SpringApplicationBannerPrinter.java b/spring-boot/src/main/java/org/springframework/boot/SpringApplicationBannerPrinter.java\n--- a/spring-boot/src/main/java/org/springframework/boot/SpringApplicationBannerPrinter.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplicationBannerPrinter.java\n@@ -56,7 +56,7 @@ class SpringApplicationBannerPrinter {\n \t}\n \n \tpublic Banner print(Environment environment, Class<?> sourceClass, Log logger) {\n-\t\tBanner banner = getBanner(environment, this.fallbackBanner);\n+\t\tBanner banner = getBanner(environment);\n \t\ttry {\n \t\t\tlogger.info(createStringFromBanner(banner, environment, sourceClass));\n \t\t}\n@@ -67,12 +67,12 @@ public Banner print(Environment environment, Class<?> sourceClass, Log logger) {\n \t}\n \n \tpublic Banner print(Environment environment, Class<?> sourceClass, PrintStream out) {\n-\t\tBanner banner = getBanner(environment, this.fallbackBanner);\n+\t\tBanner banner = getBanner(environment);\n \t\tbanner.printBanner(environment, sourceClass, out);\n \t\treturn new PrintedBanner(banner, sourceClass);\n \t}\n \n-\tprivate Banner getBanner(Environment environment, Banner definedBanner) {\n+\tprivate Banner getBanner(Environment environment) {\n \t\tBanners banners = new Banners();\n \t\tbanners.addIfNotNull(getImageBanner(environment));\n \t\tbanners.addIfNotNull(getTextBanner(environment));",
    "output": "Remove unused parameter"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/ShutdownMvcEndpoint.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/ShutdownMvcEndpoint.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/ShutdownMvcEndpoint.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/ShutdownMvcEndpoint.java\n@@ -17,7 +17,6 @@\n package org.springframework.boot.actuate.endpoint.mvc;\n \n import java.util.Collections;\n-import java.util.Map;\n \n import org.springframework.boot.actuate.endpoint.ShutdownEndpoint;\n import org.springframework.boot.context.properties.ConfigurationProperties;\n\ndiff --git a/spring-boot/src/test/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBeanTests.java b/spring-boot/src/test/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBeanTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBeanTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/web/servlet/AbstractFilterRegistrationBeanTests.java\n@@ -26,7 +26,6 @@\n import javax.servlet.DispatcherType;\n import javax.servlet.Filter;\n import javax.servlet.FilterRegistration;\n-import javax.servlet.Servlet;\n import javax.servlet.ServletContext;\n \n import org.junit.Before;",
    "output": "Fix checkstyle errors"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/web/support/SpringBootServletInitializerTests.java b/spring-boot/src/test/java/org/springframework/boot/web/support/SpringBootServletInitializerTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/web/support/SpringBootServletInitializerTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/web/support/SpringBootServletInitializerTests.java\n@@ -26,8 +26,8 @@\n import org.springframework.beans.DirectFieldAccessor;\n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.builder.SpringApplicationBuilder;\n-import org.springframework.boot.context.embedded.EmbeddedServletContainer;\n import org.springframework.boot.context.embedded.EmbeddedServletContainerFactory;\n+import org.springframework.boot.context.embedded.EmbeddedWebServer;\n import org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory;\n import org.springframework.boot.web.servlet.ServletContextInitializer;\n import org.springframework.context.ConfigurableApplicationContext;\n@@ -96,8 +96,8 @@ public void mainClassHasSensibleDefault() throws Exception {\n \n \t@Test\n \tpublic void errorPageFilterRegistrationCanBeDisabled() throws Exception {\n-\t\tEmbeddedServletContainer container = new UndertowEmbeddedServletContainerFactory(\n-\t\t\t\t0).getEmbeddedServletContainer(new ServletContextInitializer() {\n+\t\tEmbeddedWebServer container = new UndertowEmbeddedServletContainerFactory(0)\n+\t\t\t\t.getEmbeddedServletContainer(new ServletContextInitializer() {\n \n \t\t\t\t\t@Override\n \t\t\t\t\tpublic void onStartup(ServletContext servletContext)",
    "output": "Polish forward merge to reflect renamed classes"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/validation/ValidationAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/validation/ValidationAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/validation/ValidationAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/validation/ValidationAutoConfiguration.java\n@@ -46,7 +46,7 @@ public class ValidationAutoConfiguration {\n \t@Bean\n \t@Role(BeanDefinition.ROLE_INFRASTRUCTURE)\n \t@ConditionalOnMissingBean\n-\tpublic static Validator validator() {\n+\tpublic static Validator jsr303Validator() {\n \t\tLocalValidatorFactoryBean factoryBean = new LocalValidatorFactoryBean();\n \t\tMessageInterpolatorFactory interpolatorFactory = new MessageInterpolatorFactory();\n \t\tfactoryBean.setMessageInterpolator(interpolatorFactory.getObject());",
    "output": "Rename JSR 303 Validator bean name"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TldSkipPatterns.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TldSkipPatterns.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TldSkipPatterns.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TldSkipPatterns.java\n@@ -86,7 +86,6 @@ final class TldSkipPatterns {\n \t\tpatterns.add(\"ehcache-core-*.jar\");\n \t\tpatterns.add(\"hibernate-core-*.jar\");\n \t\tpatterns.add(\"hibernate-commons-annotations-*.jar\");\n-\t\tpatterns.add(\"hibernate-entitymanager-*.jar\");\n \t\tpatterns.add(\"hibernate-jpa-2.1-api-*.jar\");\n \t\tpatterns.add(\"hibernate-validator-*.jar\");\n \t\tpatterns.add(\"hsqldb-*.jar\");",
    "output": "Remove dependency management for `hibernate-entitymanager`"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TldSkipPatterns.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TldSkipPatterns.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TldSkipPatterns.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TldSkipPatterns.java\n@@ -86,7 +86,6 @@ final class TldSkipPatterns {\n \t\tpatterns.add(\"ehcache-core-*.jar\");\n \t\tpatterns.add(\"hibernate-core-*.jar\");\n \t\tpatterns.add(\"hibernate-commons-annotations-*.jar\");\n-\t\tpatterns.add(\"hibernate-entitymanager-*.jar\");\n \t\tpatterns.add(\"hibernate-jpa-2.1-api-*.jar\");\n \t\tpatterns.add(\"hibernate-validator-*.jar\");\n \t\tpatterns.add(\"hsqldb-*.jar\");",
    "output": "Remove dependency management for `hibernate-entitymanager`"
  },
  {
    "input": "diff --git a/spring-boot-test/src/main/java/org/springframework/boot/test/context/ImportsContextCustomizer.java b/spring-boot-test/src/main/java/org/springframework/boot/test/context/ImportsContextCustomizer.java\n--- a/spring-boot-test/src/main/java/org/springframework/boot/test/context/ImportsContextCustomizer.java\n+++ b/spring-boot-test/src/main/java/org/springframework/boot/test/context/ImportsContextCustomizer.java\n@@ -324,8 +324,8 @@ private static final class SpockAnnotationFilter implements AnnotationFilter {\n \n \t\t@Override\n \t\tpublic boolean isIgnored(Annotation annotation) {\n-\t\t\treturn annotation.annotationType().getName()\n-\t\t\t\t\t.startsWith(\"org.spockframework.\");\n+\t\t\treturn annotation.annotationType().getName().startsWith(\"org.spockframework.\") ||\n+\t\t\t\tannotation.annotationType().getName().startsWith(\"spock.\");\n \t\t}\n \n \t}",
    "output": "Ignore spock.lang annotations when creating test context cache key"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HalBrowserMvcEndpoint.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HalBrowserMvcEndpoint.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HalBrowserMvcEndpoint.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HalBrowserMvcEndpoint.java\n@@ -54,7 +54,7 @@ public class HalBrowserMvcEndpoint extends HalJsonMvcEndpoint\n \t\t\tnew HalBrowserLocation(\"classpath:/META-INF/spring-data-rest/hal-browser/\",\n \t\t\t\t\t\"index.html\"),\n \t\t\tnew HalBrowserLocation(\n-\t\t\t\t\t\"classpath:/META-INF/resources/webjars/hal-browser/9f96c74/\",\n+\t\t\t\t\t\"classpath:/META-INF/resources/webjars/hal-browser/3325375/\",\n \t\t\t\t\t\"browser.html\") };\n \n \tprivate HalBrowserLocation location;",
    "output": "Correct HAL Browser location to reflect version of web jar"
  },
  {
    "input": "diff --git a/spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/SpyBeanWithNameOnTestFieldForMultipleExistingBeansTests.java b/spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/SpyBeanWithNameOnTestFieldForMultipleExistingBeansTests.java\n--- a/spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/SpyBeanWithNameOnTestFieldForMultipleExistingBeansTests.java\n+++ b/spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/SpyBeanWithNameOnTestFieldForMultipleExistingBeansTests.java\n@@ -42,8 +42,8 @@ public class SpyBeanWithNameOnTestFieldForMultipleExistingBeansTests {\n \n \t@Test\n \tpublic void testSpying() throws Exception {\n-\t\tassertThat(new MockUtil().isSpy(this.spy)).isTrue();\n-\t\tassertThat(new MockUtil().getMockName(this.spy).toString()).isEqualTo(\"two\");\n+\t\tassertThat(MockUtil.isSpy(this.spy)).isTrue();\n+\t\tassertThat(MockUtil.getMockName(this.spy).toString()).isEqualTo(\"two\");\n \t}\n \n \t@Configuration",
    "output": "Fix forward merge of new SpyBean test to use correct Mockito 2 API"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java\n@@ -259,10 +259,9 @@ private List<Object> sanitize(String prefix, List<Object> list) {\n \t\t\t\tsanitized.add(sanitize(prefix, (Map<String, Object>) item));\n \t\t\t}\n \t\t\telse if (item instanceof List) {\n-\t\t\t\tsanitize(prefix, (List<Object>) item);\n+\t\t\t\tsanitized.add(sanitize(prefix, (List<Object>) item));\n \t\t\t}\n \t\t\telse {\n-\t\t\t\titem = this.sanitizer.sanitize(prefix, item);\n \t\t\t\tsanitized.add(this.sanitizer.sanitize(prefix, item));\n \t\t\t}\n \t\t}",
    "output": "Ensure that entries in a list of lists are not lost during sanitization"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/BeansEndpoint.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/BeansEndpoint.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/BeansEndpoint.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/BeansEndpoint.java\n@@ -75,6 +75,9 @@ private void setLeafContext(ApplicationContext leafContext) {\n \n \t\t@Override\n \t\tpublic String getSnapshotAsJson() {\n+\t\t\tif (this.leafContext == null) {\n+\t\t\t\treturn super.getSnapshotAsJson();\n+\t\t\t}\n \t\t\treturn generateJson(getContextHierarchy());\n \t\t}\n ",
    "output": "Fall back to standard LiveBeansView behaviour when MBean is in use"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/SkipPatternJarScanner.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/SkipPatternJarScanner.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/SkipPatternJarScanner.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/SkipPatternJarScanner.java\n@@ -50,7 +50,7 @@ class SkipPatternJarScanner extends StandardJarScanner {\n \n \tSkipPatternJarScanner(JarScanner jarScanner, Set<String> patterns) {\n \t\tAssert.notNull(jarScanner, \"JarScanner must not be null\");\n-\t\tAssert.notNull(jarScanner, \"Patterns must not be null\");\n+\t\tAssert.notNull(patterns, \"Patterns must not be null\");\n \t\tthis.jarScanner = jarScanner;\n \t\tthis.patterns = patterns;\n \t\tsetPatternToTomcat8SkipFilter();",
    "output": "Fix an assertion in SkipPatternJarScanner"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/SkipPatternJarScanner.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/SkipPatternJarScanner.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/SkipPatternJarScanner.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/SkipPatternJarScanner.java\n@@ -50,7 +50,7 @@ class SkipPatternJarScanner extends StandardJarScanner {\n \n \tSkipPatternJarScanner(JarScanner jarScanner, Set<String> patterns) {\n \t\tAssert.notNull(jarScanner, \"JarScanner must not be null\");\n-\t\tAssert.notNull(jarScanner, \"Patterns must not be null\");\n+\t\tAssert.notNull(patterns, \"Patterns must not be null\");\n \t\tthis.jarScanner = jarScanner;\n \t\tthis.patterns = patterns;\n \t\tsetPatternToTomcat8SkipFilter();",
    "output": "Fix an assertion in SkipPatternJarScanner"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/liquibase/LiquibaseAutoConfiguration.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2016 the original author or authors.\n+ * Copyright 2012-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -76,11 +76,12 @@ public static class LiquibaseConfiguration {\n \t\tprivate final DataSource liquibaseDataSource;\n \n \t\tpublic LiquibaseConfiguration(LiquibaseProperties properties,\n-\t\t\t\tResourceLoader resourceLoader, DataSource dataSource,\n+\t\t\t\tResourceLoader resourceLoader,\n+\t\t\t\tObjectProvider<DataSource> dataSourceProvider,\n \t\t\t\t@LiquibaseDataSource ObjectProvider<DataSource> liquibaseDataSourceProvider) {\n \t\t\tthis.properties = properties;\n \t\t\tthis.resourceLoader = resourceLoader;\n-\t\t\tthis.dataSource = dataSource;\n+\t\t\tthis.dataSource = dataSourceProvider.getIfUnique();\n \t\t\tthis.liquibaseDataSource = liquibaseDataSourceProvider.getIfAvailable();\n \t\t}\n ",
    "output": "Document @LiquibaseDataSource feature"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-data-couchbase/src/test/java/sample/data/couchbase/SampleCouchbaseApplicationTests.java b/spring-boot-samples/spring-boot-sample-data-couchbase/src/test/java/sample/data/couchbase/SampleCouchbaseApplicationTests.java\n--- a/spring-boot-samples/spring-boot-sample-data-couchbase/src/test/java/sample/data/couchbase/SampleCouchbaseApplicationTests.java\n+++ b/spring-boot-samples/spring-boot-sample-data-couchbase/src/test/java/sample/data/couchbase/SampleCouchbaseApplicationTests.java\n@@ -17,6 +17,7 @@\n \n import java.net.ConnectException;\n \n+import org.junit.Ignore;\n import org.junit.Rule;\n import org.junit.Test;\n \n@@ -32,6 +33,7 @@ public class SampleCouchbaseApplicationTests {\n \tpublic OutputCapture outputCapture = new OutputCapture();\n \n \t@Test\n+\t@Ignore(\"See #8200\")\n \tpublic void testDefaultSettings() throws Exception {\n \t\ttry {\n \t\t\tnew SpringApplicationBuilder(SampleCouchbaseApplication.class)",
    "output": "Ignore test until couchbase support is restored\nThe changes required to restore our Couchbase support are too involved\nand we should hear from the data couchbase team first."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/HikariDriverConfigurationFailureAnalyzer.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/HikariDriverConfigurationFailureAnalyzer.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/HikariDriverConfigurationFailureAnalyzer.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/HikariDriverConfigurationFailureAnalyzer.java\n@@ -28,8 +28,8 @@\n class HikariDriverConfigurationFailureAnalyzer\n \t\textends AbstractFailureAnalyzer<IllegalStateException> {\n \n-\tprivate static final String EXPECTED_MESSAGE = \"both driverClassName and \"\n-\t\t\t+ \"dataSourceClassName are specified, one or the other should be used\";\n+\tprivate static final String EXPECTED_MESSAGE = \"cannot use driverClassName and \"\n+\t\t\t+ \"dataSourceClassName together.\";\n \n \t@Override\n \tprotected FailureAnalysis analyze(Throwable rootFailure,",
    "output": "Remove HikariCP-java6 dependency management"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java\n@@ -417,7 +417,7 @@ public boolean supports(Class<?> type) {\n \t\t\tif (!super.supports(type)) {\n \t\t\t\treturn false;\n \t\t\t}\n-\t\t\tif (AnnotatedElementUtils.isAnnotated(type, Validated.class)) {\n+\t\t\tif (AnnotatedElementUtils.hasAnnotation(type, Validated.class)) {\n \t\t\t\treturn true;\n \t\t\t}\n \t\t\tif (type.getPackage().getName().startsWith(\"org.springframework.boot\")) {",
    "output": "Consider hierarchy when searching for @Validated\nUpdate `ConfigurationPropertiesBindingPostProcessor` to use a more\nexhaustive hierarchy search when checking for `@Validated`."
  },
  {
    "input": "diff --git a/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/orm/jpa/TestEntityManagerTests.java b/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/orm/jpa/TestEntityManagerTests.java\n--- a/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/orm/jpa/TestEntityManagerTests.java\n+++ b/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/orm/jpa/TestEntityManagerTests.java\n@@ -191,8 +191,7 @@ public void getIdForTypeShouldGetId() throws Exception {\n \tpublic void getIdForTypeWhenTypeIsWrongShouldThrowException() throws Exception {\n \t\tTestEntity entity = new TestEntity();\n \t\tgiven(this.persistenceUnitUtil.getIdentifier(entity)).willReturn(123);\n-\t\tthis.thrown.expectMessage(\"ID mismatch Object of class [java.lang.Integer] \"\n-\t\t\t\t+ \"must be an instance of class java.lang.Long\");\n+\t\tthis.thrown.expectMessage(\"ID mismatch: java.lang.Integer\");\n \t\tthis.testEntityManager.getId(entity, Long.class);\n \t}\n ",
    "output": "Adapt to Assert.instanceOf changes\nSince SPR-15196, the behavior of `Assert` methods changed and some were\ndeprecated. This commit adapts to the new error mechanism implemented in\n`Assert.instanceOf`."
  },
  {
    "input": "diff --git a/spring-boot-test/src/test/java/org/springframework/boot/test/context/ImportsContextCustomizerTests.java b/spring-boot-test/src/test/java/org/springframework/boot/test/context/ImportsContextCustomizerTests.java\n--- a/spring-boot-test/src/test/java/org/springframework/boot/test/context/ImportsContextCustomizerTests.java\n+++ b/spring-boot-test/src/test/java/org/springframework/boot/test/context/ImportsContextCustomizerTests.java\n@@ -55,11 +55,6 @@ public void determinableImportSelector() throws Exception {\n \t\t\t\t\t\t\t\tSecondDeterminableImportSelectorAnnotatedClass.class));\n \t}\n \n-\t@Test\n-\tpublic void importAutoConfigurationCanIgnoreAdditionalAnnotations() throws Exception {\n-\n-\t}\n-\n \t@Test\n \tpublic void customizersForTestClassesWithDifferentKotlinMetadataAreEqual() {\n \t\tassertThat(new ImportsContextCustomizer(FirstKotlinAnnotatedTestClass.class))",
    "output": "Remove empty test\nThe caching behaviour when using ImportAutoConfiguration is covered\nby tests in spring-boot-test-auto-configuration, specifically by\nImportsContextCustomizerFactoryWithAutoConfigurationTests."
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java b/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java\n--- a/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java\n@@ -326,7 +326,8 @@ protected boolean matchClassName(String className) {\n \t/**\n \t * Source for Bean definitions defined in Groovy.\n \t */\n-\tinterface GroovyBeanDefinitionSource {\n+\t@FunctionalInterface\n+\tprotected interface GroovyBeanDefinitionSource {\n \n \t\tClosure<?> getBeans();\n ",
    "output": "Make GroovyBeanDefinitionSource accessible to the CLI again\nIt was made package-private in 31b0e817 but it needs to be protected\ndue to its use in the CLI's GroovyBeansTransformation."
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/jmx/EndpointMBeanExporterTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/jmx/EndpointMBeanExporterTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/jmx/EndpointMBeanExporterTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/jmx/EndpointMBeanExporterTests.java\n@@ -337,7 +337,7 @@ public static class JsonMapConversionEndpoint\n \t\t\textends AbstractEndpoint<Map<String, Object>> {\n \n \t\tpublic JsonMapConversionEndpoint() {\n-\t\t\tsuper(\"json-map-conversion\");\n+\t\t\tsuper(\"json_map_conversion\");\n \t\t}\n \n \t\t@Override\n@@ -353,7 +353,7 @@ public static class JsonListConversionEndpoint\n \t\t\textends AbstractEndpoint<List<Object>> {\n \n \t\tpublic JsonListConversionEndpoint() {\n-\t\t\tsuper(\"json-list-conversion\");\n+\t\t\tsuper(\"json_list_conversion\");\n \t\t}\n \n \t\t@Override",
    "output": "Fix endpoint id"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/jta/narayana/NarayanaDataSourceBeanTests.java b/spring-boot/src/test/java/org/springframework/boot/jta/narayana/NarayanaDataSourceBeanTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/jta/narayana/NarayanaDataSourceBeanTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/jta/narayana/NarayanaDataSourceBeanTests.java\n@@ -83,7 +83,7 @@ public void shouldGetConnectionAndCommit() throws SQLException {\n \t\tConnection mockConnection = mock(Connection.class);\n \t\tXAConnection mockXaConnection = mock(XAConnection.class);\n \t\tgiven(mockXaConnection.getConnection()).willReturn(mockConnection);\n-\t\tgiven(this.dataSource.getXAConnection()).willReturn(mockXaConnection);\n+\t\tgiven(this.dataSource.getXAConnection(\"\", \"\")).willReturn(mockXaConnection);\n \n \t\tProperties properties = new Properties();\n \t\tproperties.put(TransactionalDriver.XADataSource, this.dataSource);\n@@ -93,7 +93,7 @@ public void shouldGetConnectionAndCommit() throws SQLException {\n \n \t\tconnection.commit();\n \n-\t\tverify(this.dataSource, times(1)).getXAConnection();\n+\t\tverify(this.dataSource, times(1)).getXAConnection(\"\", \"\");\n \t\tverify(mockXaConnection, times(1)).getConnection();\n \t\tverify(mockConnection, times(1)).commit();\n \t}",
    "output": "Upgrade to Narayana 5.5.1.Final"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/CentralDirectoryParserTests.java b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/CentralDirectoryParserTests.java\n--- a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/CentralDirectoryParserTests.java\n+++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/CentralDirectoryParserTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2016 the original author or authors.\n+ * Copyright 2012-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -59,7 +59,7 @@ public void visitsInOrder() throws Exception {\n \t\tCentralDirectoryParser parser = new CentralDirectoryParser();\n \t\tparser.addVisitor(visitor);\n \t\tparser.parse(this.jarData, false);\n-\t\tList<String> invocations = visitor.invocations;\n+\t\tList<String> invocations = visitor.getInvocations();\n \t\tassertThat(invocations).startsWith(\"visitStart\").endsWith(\"visitEnd\")\n \t\t\t\t.contains(\"visitFileHeader\");\n \t}",
    "output": "Fix dead code warning in CentralDirectoryParserTests"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/bind/YamlConfigurationFactoryTests.java b/spring-boot/src/test/java/org/springframework/boot/bind/YamlConfigurationFactoryTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/bind/YamlConfigurationFactoryTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/bind/YamlConfigurationFactoryTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2016 the original author or authors.\n+ * Copyright 2012-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -44,6 +44,7 @@ public class YamlConfigurationFactoryTests {\n \n \tprivate final Map<Class<?>, Map<String, String>> aliases = new HashMap<Class<?>, Map<String, String>>();\n \n+\t@SuppressWarnings(\"deprecation\")\n \tprivate Foo createFoo(final String yaml) throws Exception {\n \t\tYamlConfigurationFactory<Foo> factory = new YamlConfigurationFactory<Foo>(\n \t\t\t\tFoo.class);\n@@ -56,6 +57,7 @@ private Foo createFoo(final String yaml) throws Exception {\n \t\treturn factory.getObject();\n \t}\n \n+\t@SuppressWarnings(\"deprecation\")\n \tprivate Jee createJee(final String yaml) throws Exception {\n \t\tYamlConfigurationFactory<Jee> factory = new YamlConfigurationFactory<Jee>(\n \t\t\t\tJee.class);",
    "output": "Silence deprecation warnings in YamlConfigurationFactoryTests"
  },
  {
    "input": "diff --git a/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/orm/jpa/TestDatabaseAutoConfigurationNoEmbeddedTests.java b/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/orm/jpa/TestDatabaseAutoConfigurationNoEmbeddedTests.java\n--- a/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/orm/jpa/TestDatabaseAutoConfigurationNoEmbeddedTests.java\n+++ b/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/orm/jpa/TestDatabaseAutoConfigurationNoEmbeddedTests.java\n@@ -23,9 +23,10 @@\n import org.junit.runner.RunWith;\n \n import org.springframework.beans.factory.BeanCreationException;\n+import org.springframework.boot.junit.runner.classpath.ClassPathExclusions;\n+import org.springframework.boot.junit.runner.classpath.ModifiedClassPathRunner;\n+import org.springframework.boot.test.autoconfigure.jdbc.TestDatabaseAutoConfiguration;\n import org.springframework.boot.test.util.EnvironmentTestUtils;\n-import org.springframework.boot.testutil.ClassPathExclusions;\n-import org.springframework.boot.testutil.FilteredClassPathRunner;\n import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n import org.springframework.context.annotation.Bean;\n@@ -40,7 +41,7 @@\n  *\n  * @author Stephane Nicoll\n  */\n-@RunWith(FilteredClassPathRunner.class)\n+@RunWith(ModifiedClassPathRunner.class)\n @ClassPathExclusions({ \"h2-*.jar\", \"hsqldb-*.jar\", \"derby-*.jar\" })\n public class TestDatabaseAutoConfigurationNoEmbeddedTests {\n ",
    "output": "Fix merge issue"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/DefaultLaunchScriptTests.java b/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/DefaultLaunchScriptTests.java\n--- a/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/DefaultLaunchScriptTests.java\n+++ b/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/DefaultLaunchScriptTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2016 the original author or authors.\n+ * Copyright 2012-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -71,6 +71,16 @@ public void initInfoRequiredStopCanBeReplaced() throws Exception {\n \t\tassertThatPlaceholderCanBeReplaced(\"initInfoRequiredStop\");\n \t}\n \n+\t@Test\n+\tpublic void initInfoDefaultStartCanBeReplaced() throws Exception {\n+\t\tassertThatPlaceholderCanBeReplaced(\"initInfoDefaultStart\");\n+\t}\n+\n+\t@Test\n+\tpublic void initInfoDefaultStopCanBeReplaced() throws Exception {\n+\t\tassertThatPlaceholderCanBeReplaced(\"initInfoDefaultStop\");\n+\t}\n+\n \t@Test\n \tpublic void initInfoShortDescriptionCanBeReplaced() throws Exception {\n \t\tassertThatPlaceholderCanBeReplaced(\"initInfoShortDescription\");",
    "output": "Make start/stop run-levels configurable in INIT-INFO of launch.script"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/DefaultLaunchScriptTests.java b/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/DefaultLaunchScriptTests.java\n--- a/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/DefaultLaunchScriptTests.java\n+++ b/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/DefaultLaunchScriptTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2016 the original author or authors.\n+ * Copyright 2012-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -71,6 +71,16 @@ public void initInfoRequiredStopCanBeReplaced() throws Exception {\n \t\tassertThatPlaceholderCanBeReplaced(\"initInfoRequiredStop\");\n \t}\n \n+\t@Test\n+\tpublic void initInfoDefaultStartCanBeReplaced() throws Exception {\n+\t\tassertThatPlaceholderCanBeReplaced(\"initInfoDefaultStart\");\n+\t}\n+\n+\t@Test\n+\tpublic void initInfoDefaultStopCanBeReplaced() throws Exception {\n+\t\tassertThatPlaceholderCanBeReplaced(\"initInfoDefaultStop\");\n+\t}\n+\n \t@Test\n \tpublic void initInfoShortDescriptionCanBeReplaced() throws Exception {\n \t\tassertThatPlaceholderCanBeReplaced(\"initInfoShortDescription\");",
    "output": "Make start/stop run-levels configurable in INIT-INFO of launch.script"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-integration/src/test/java/sample/integration/consumer/SampleIntegrationApplicationTests.java b/spring-boot-samples/spring-boot-sample-integration/src/test/java/sample/integration/consumer/SampleIntegrationApplicationTests.java\n--- a/spring-boot-samples/spring-boot-sample-integration/src/test/java/sample/integration/consumer/SampleIntegrationApplicationTests.java\n+++ b/spring-boot-samples/spring-boot-sample-integration/src/test/java/sample/integration/consumer/SampleIntegrationApplicationTests.java\n@@ -61,7 +61,7 @@ private void deleteIfExists(File directory) throws InterruptedException {\n \t\t\t\tif (FileSystemUtils.deleteRecursively(directory)) {\n \t\t\t\t\treturn;\n \t\t\t\t}\n-\t\t\t\tThread.sleep(100);\n+\t\t\t\tThread.sleep(500);\n \t\t\t}\n \t\t\tthrow new IllegalStateException(\"Failed to delete '\" + directory + \"'\");\n \t\t}",
    "output": "Give FileWritingMessageHandler more time to sort itself out\ndca3"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/UserInfoTokenServices.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/UserInfoTokenServices.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/UserInfoTokenServices.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/UserInfoTokenServices.java\n@@ -123,7 +123,7 @@ public OAuth2AccessToken readAccessToken(String accessToken) {\n \n \t@SuppressWarnings({ \"unchecked\" })\n \tprivate Map<String, Object> getMap(String path, String accessToken) {\n-\t\tthis.logger.info(\"Getting user info from: \" + path);\n+\t\tthis.logger.debug(\"Getting user info from: \" + path);\n \t\ttry {\n \t\t\tOAuth2RestOperations restTemplate = this.restTemplate;\n \t\t\tif (restTemplate == null) {\n@@ -142,7 +142,7 @@ private Map<String, Object> getMap(String path, String accessToken) {\n \t\t\treturn restTemplate.getForEntity(path, Map.class).getBody();\n \t\t}\n \t\tcatch (Exception ex) {\n-\t\t\tthis.logger.info(\"Could not fetch user details: \" + ex.getClass() + \", \"\n+\t\t\tthis.logger.warn(\"Could not fetch user details: \" + ex.getClass() + \", \"\n \t\t\t\t\t+ ex.getMessage());\n \t\t\treturn Collections.<String, Object>singletonMap(\"error\",\n \t\t\t\t\t\"Could not fetch user details\");",
    "output": "Improve `UserInfoTokenServices` logging"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/UserInfoTokenServices.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/UserInfoTokenServices.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/UserInfoTokenServices.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/UserInfoTokenServices.java\n@@ -123,7 +123,7 @@ public OAuth2AccessToken readAccessToken(String accessToken) {\n \n \t@SuppressWarnings({ \"unchecked\" })\n \tprivate Map<String, Object> getMap(String path, String accessToken) {\n-\t\tthis.logger.info(\"Getting user info from: \" + path);\n+\t\tthis.logger.debug(\"Getting user info from: \" + path);\n \t\ttry {\n \t\t\tOAuth2RestOperations restTemplate = this.restTemplate;\n \t\t\tif (restTemplate == null) {\n@@ -142,7 +142,7 @@ private Map<String, Object> getMap(String path, String accessToken) {\n \t\t\treturn restTemplate.getForEntity(path, Map.class).getBody();\n \t\t}\n \t\tcatch (Exception ex) {\n-\t\t\tthis.logger.info(\"Could not fetch user details: \" + ex.getClass() + \", \"\n+\t\t\tthis.logger.warn(\"Could not fetch user details: \" + ex.getClass() + \", \"\n \t\t\t\t\t+ ex.getMessage());\n \t\t\treturn Collections.<String, Object>singletonMap(\"error\",\n \t\t\t\t\t\"Could not fetch user details\");",
    "output": "Improve `UserInfoTokenServices` logging"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletContextInitializerBeans.java b/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletContextInitializerBeans.java\n--- a/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletContextInitializerBeans.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletContextInitializerBeans.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2016 the original author or authors.\n+ * Copyright 2012-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -121,7 +121,7 @@ else if (initializer instanceof ServletListenerRegistrationBean) {\n \t\t}\n \t\telse {\n \t\t\taddServletContextInitializerBean(ServletContextInitializer.class, beanName,\n-\t\t\t\t\tinitializer, beanFactory, null);\n+\t\t\t\t\tinitializer, beanFactory, initializer);\n \t\t}\n \t}\n ",
    "output": "Avoid double-reg when a Servlet or Filter implements ServletContextInitializer"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-devtools/src/test/java/sample/devtools/SampleDevToolsApplicationIntegrationTests.java b/spring-boot-samples/spring-boot-sample-devtools/src/test/java/sample/devtools/SampleDevToolsApplicationIntegrationTests.java\n--- a/spring-boot-samples/spring-boot-sample-devtools/src/test/java/sample/devtools/SampleDevToolsApplicationIntegrationTests.java\n+++ b/spring-boot-samples/spring-boot-sample-devtools/src/test/java/sample/devtools/SampleDevToolsApplicationIntegrationTests.java\n@@ -60,4 +60,11 @@ public void testPublicResource() throws Exception {\n \t\tassertThat(entity.getBody()).contains(\"public file\");\n \t}\n \n+\t@Test\n+\tpublic void testClassResource() throws Exception {\n+\t\tResponseEntity<String> entity = this.restTemplate\n+\t\t\t\t.getForEntity(\"/application.properties\", String.class);\n+\t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.NOT_FOUND);\n+\t}\n+\n }",
    "output": "Add test to check class resources aren't exposed"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/DefaultLaunchScriptTests.java b/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/DefaultLaunchScriptTests.java\n--- a/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/DefaultLaunchScriptTests.java\n+++ b/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/DefaultLaunchScriptTests.java\n@@ -134,7 +134,7 @@ public void defaultForModeIsAuto() throws Exception {\n \tpublic void defaultForStopWaitTimeIs60() throws Exception {\n \t\tDefaultLaunchScript script = new DefaultLaunchScript(null, null);\n \t\tString content = new String(script.toByteArray());\n-\t\tassertThat(content).contains(\"STOP_WAIT_TIME=60\");\n+\t\tassertThat(content).contains(\"STOP_WAIT_TIME=\\\"60\\\"\");\n \t}\n \n \t@Test",
    "output": "Upgrade test to reflect quoting of STOP_WAIT_TIME in launch.script"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/AsciiBytes.java b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/AsciiBytes.java\n--- a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/AsciiBytes.java\n+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/AsciiBytes.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2016 the original author or authors.\n+ * Copyright 2012-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -224,9 +224,8 @@ public static int hashCode(String string) {\n \t}\n \n \tpublic static int hashCode(int hash, String string) {\n-\t\tchar[] chars = string.toCharArray();\n-\t\tfor (int i = 0; i < chars.length; i++) {\n-\t\t\thash = 31 * hash + chars[i];\n+\t\tfor (int i = 0; i < string.length(); i++) {\n+\t\t\thash = 31 * hash + string.charAt(i);\n \t\t}\n \t\treturn hash;\n \t}",
    "output": "Reduce memory footprint of AsciiBytes.hashCode"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/AsciiBytes.java b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/AsciiBytes.java\n--- a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/AsciiBytes.java\n+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/AsciiBytes.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2016 the original author or authors.\n+ * Copyright 2012-2017 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -224,9 +224,8 @@ public static int hashCode(String string) {\n \t}\n \n \tpublic static int hashCode(int hash, String string) {\n-\t\tchar[] chars = string.toCharArray();\n-\t\tfor (int i = 0; i < chars.length; i++) {\n-\t\t\thash = 31 * hash + chars[i];\n+\t\tfor (int i = 0; i < string.length(); i++) {\n+\t\t\thash = 31 * hash + string.charAt(i);\n \t\t}\n \t\treturn hash;\n \t}",
    "output": "Reduce memory footprint of AsciiBytes.hashCode\nUpdate `AsciiBytes.hashCode(int hash, String string)` so that it no\nlonger copies the backing array of the string."
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java\n@@ -90,7 +90,7 @@ public MBeanServer mbeanServer() {\n \t@Bean\n \t@ConditionalOnBean(AuditEventRepository.class)\n \t@ConditionalOnEnabledEndpoint(\"auditevents\")\n-\tpublic AuditEventsJmxEndpoint abstractEndpointMBean(\n+\tpublic AuditEventsJmxEndpoint auditEventsEndpoint(\n \t\t\tAuditEventRepository auditEventRepository) {\n \t\treturn new AuditEventsJmxEndpoint(this.objectMapper, auditEventRepository);\n \t}",
    "output": "Fix AuditEventsJmxEndpoint bean name"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/repackage/ProjectLibraries.java b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/repackage/ProjectLibraries.java\n--- a/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/repackage/ProjectLibraries.java\n+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/repackage/ProjectLibraries.java\n@@ -127,8 +127,11 @@ private Set<GradleLibrary> getLibrariesForFileDependencies(\n \t\t\t}\n \t\t\telse if (dependency instanceof ProjectDependency) {\n \t\t\t\tProjectDependency projectDependency = (ProjectDependency) dependency;\n-\t\t\t\tlibraries.addAll(getLibrariesForFileDependencies(\n-\t\t\t\t\t\tprojectDependency.getProjectConfiguration(), scope));\n+\t\t\t\tConfiguration dependencyConfiguration = projectDependency\n+\t\t\t\t\t\t.getDependencyProject().getConfigurations()\n+\t\t\t\t\t\t.getByName(projectDependency.getConfiguration());\n+\t\t\t\tlibraries.addAll(\n+\t\t\t\t\t\tgetLibrariesForFileDependencies(dependencyConfiguration, scope));\n \t\t\t}\n \t\t}\n \t\treturn libraries;",
    "output": "Replace use of Gradle API that's bean deprecated in 3.x"
  },
  {
    "input": "diff --git a/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java b/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java\n--- a/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java\n+++ b/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java\n@@ -118,6 +118,14 @@ public void stopWhenStopped() throws Exception {\n \t\t\t\t.has(coloredString(AnsiColor.YELLOW, \"Not running (pidfile not found)\"));\n \t}\n \n+\t@Test\n+\tpublic void forceStopWhenStopped() throws Exception {\n+\t\tString output = doTest(\"force-stop-when-stopped.sh\");\n+\t\tassertThat(output).contains(\"Status: 0\");\n+\t\tassertThat(output)\n+\t\t\t\t.has(coloredString(AnsiColor.YELLOW, \"Not running (pidfile not found)\"));\n+\t}\n+\n \t@Test\n \tpublic void startWhenStarted() throws Exception {\n \t\tString output = doTest(\"start-when-started.sh\");",
    "output": "Add `force-stop` support to launch script"
  },
  {
    "input": "diff --git a/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java b/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java\n--- a/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java\n+++ b/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java\n@@ -118,6 +118,14 @@ public void stopWhenStopped() throws Exception {\n \t\t\t\t.has(coloredString(AnsiColor.YELLOW, \"Not running (pidfile not found)\"));\n \t}\n \n+\t@Test\n+\tpublic void forceStopWhenStopped() throws Exception {\n+\t\tString output = doTest(\"force-stop-when-stopped.sh\");\n+\t\tassertThat(output).contains(\"Status: 0\");\n+\t\tassertThat(output)\n+\t\t\t\t.has(coloredString(AnsiColor.YELLOW, \"Not running (pidfile not found)\"));\n+\t}\n+\n \t@Test\n \tpublic void startWhenStarted() throws Exception {\n \t\tString output = doTest(\"start-when-started.sh\");",
    "output": "Add `force-stop` support to launch script\nUpdate the embedded launch script to support `force-stop`."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/transaction/TransactionAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/transaction/TransactionAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/transaction/TransactionAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/transaction/TransactionAutoConfiguration.java\n@@ -21,7 +21,7 @@\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnSingleCandidate;\n import org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration;\n-import org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration;\n+import org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;\n import org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n@@ -38,7 +38,7 @@\n @Configuration\n @ConditionalOnClass({ TransactionTemplate.class, PlatformTransactionManager.class })\n @ConditionalOnSingleCandidate(PlatformTransactionManager.class)\n-@AutoConfigureAfter({ JtaAutoConfiguration.class, JpaBaseConfiguration.class,\n+@AutoConfigureAfter({ JtaAutoConfiguration.class, HibernateJpaAutoConfiguration.class,\n \t\tDataSourceTransactionManagerAutoConfiguration.class })\n public class TransactionAutoConfiguration {\n ",
    "output": "Fix auto-configuration class reference"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/PublicMetricsAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/PublicMetricsAutoConfiguration.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/PublicMetricsAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/PublicMetricsAutoConfiguration.java\n@@ -51,7 +51,7 @@\n import org.springframework.cache.CacheManager;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n-import org.springframework.integration.monitor.IntegrationMBeanExporter;\n+import org.springframework.integration.config.EnableIntegrationManagement;\n import org.springframework.integration.support.management.IntegrationManagementConfigurer;\n \n /**\n@@ -139,7 +139,7 @@ public CachePublicMetrics cachePublicMetrics() {\n \t}\n \n \t@Configuration\n-\t@ConditionalOnClass(IntegrationMBeanExporter.class)\n+\t@ConditionalOnClass(EnableIntegrationManagement.class)\n \tstatic class IntegrationMetricsConfiguration {\n \n \t\t@Bean(name = IntegrationManagementConfigurer.MANAGEMENT_CONFIGURER_NAME)",
    "output": "Fix merge issue"
  },
  {
    "input": "diff --git a/spring-boot-docs/src/main/java/org/springframework/boot/kafka/KafkaSpecialProducerConsumerConfigExample.java b/spring-boot-docs/src/main/java/org/springframework/boot/kafka/KafkaSpecialProducerConsumerConfigExample.java\n--- a/spring-boot-docs/src/main/java/org/springframework/boot/kafka/KafkaSpecialProducerConsumerConfigExample.java\n+++ b/spring-boot-docs/src/main/java/org/springframework/boot/kafka/KafkaSpecialProducerConsumerConfigExample.java\n@@ -64,11 +64,10 @@ public static class CustomKafkaBeans {\n \t\t */\n \t\t@Bean\n \t\tpublic ConsumerFactory<?, ?> kafkaConsumerFactory(KafkaProperties properties) {\n-\t\t\tMap<String, Object> consumererProperties = properties\n-\t\t\t\t\t.buildConsumerProperties();\n-\t\t\tconsumererProperties.put(CommonClientConfigs.METRIC_REPORTER_CLASSES_CONFIG,\n+\t\t\tMap<String, Object> consumerProperties = properties.buildConsumerProperties();\n+\t\t\tconsumerProperties.put(CommonClientConfigs.METRIC_REPORTER_CLASSES_CONFIG,\n \t\t\t\t\tMyConsumerMetricsReporter.class);\n-\t\t\treturn new DefaultKafkaConsumerFactory<Object, Object>(consumererProperties);\n+\t\t\treturn new DefaultKafkaConsumerFactory<Object, Object>(consumerProperties);\n \t\t}\n \n \t}",
    "output": "Fix typo in Kafka sample"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/logging/LoggingApplicationListenerTests.java b/spring-boot/src/test/java/org/springframework/boot/logging/LoggingApplicationListenerTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/logging/LoggingApplicationListenerTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/logging/LoggingApplicationListenerTests.java\n@@ -167,7 +167,7 @@ public void azureDefaultLoggingConfigDoesNotCauseAFailure() throws Exception {\n \t@Test\n \tpublic void tomcatNopLoggingConfigDoesNotCauseAFailure() throws Exception {\n \t\tTestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.context,\n-\t\t\t\t\"logging.config: -Dnop\");\n+\t\t\t\t\"LOGGING_CONFIG: -Dnop\");\n \t\tthis.initializer.initialize(this.context.getEnvironment(),\n \t\t\t\tthis.context.getClassLoader());\n \t\tthis.logger.info(\"Hello world\");",
    "output": "Refine LoggingApplicationListenerTests\nUpdate the Tomcat logging test to be more like the real scenario."
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/DefaultLaunchScriptTests.java b/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/DefaultLaunchScriptTests.java\n--- a/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/DefaultLaunchScriptTests.java\n+++ b/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/DefaultLaunchScriptTests.java\n@@ -111,6 +111,11 @@ public void confFolderCanBeReplaced() throws Exception {\n \t\tassertThatPlaceholderCanBeReplaced(\"confFolder\");\n \t}\n \n+\t@Test\n+\tpublic void stopWaitTimeCanBeReplaced() throws Exception {\n+\t\tassertThatPlaceholderCanBeReplaced(\"stopWaitTime\");\n+\t}\n+\n \t@Test\n \tpublic void defaultForUseStartStopDaemonIsTrue() throws Exception {\n \t\tDefaultLaunchScript script = new DefaultLaunchScript(null, null);\n@@ -125,6 +130,13 @@ public void defaultForModeIsAuto() throws Exception {\n \t\tassertThat(content).contains(\"MODE=\\\"auto\\\"\");\n \t}\n \n+\t@Test\n+\tpublic void defaultForStopWaitTimeIs60() throws Exception {\n+\t\tDefaultLaunchScript script = new DefaultLaunchScript(null, null);\n+\t\tString content = new String(script.toByteArray());\n+\t\tassertThat(content).contains(\"STOP_WAIT_TIME=60\");\n+\t}\n+\n \t@Test\n \tpublic void loadFromFile() throws Exception {\n \t\tFile file = this.temporaryFolder.newFile();",
    "output": "Make stop wait time in the launch script configurable"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/DefaultLaunchScriptTests.java b/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/DefaultLaunchScriptTests.java\n--- a/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/DefaultLaunchScriptTests.java\n+++ b/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/DefaultLaunchScriptTests.java\n@@ -111,6 +111,11 @@ public void confFolderCanBeReplaced() throws Exception {\n \t\tassertThatPlaceholderCanBeReplaced(\"confFolder\");\n \t}\n \n+\t@Test\n+\tpublic void stopWaitTimeCanBeReplaced() throws Exception {\n+\t\tassertThatPlaceholderCanBeReplaced(\"stopWaitTime\");\n+\t}\n+\n \t@Test\n \tpublic void defaultForUseStartStopDaemonIsTrue() throws Exception {\n \t\tDefaultLaunchScript script = new DefaultLaunchScript(null, null);\n@@ -125,6 +130,13 @@ public void defaultForModeIsAuto() throws Exception {\n \t\tassertThat(content).contains(\"MODE=\\\"auto\\\"\");\n \t}\n \n+\t@Test\n+\tpublic void defaultForStopWaitTimeIs60() throws Exception {\n+\t\tDefaultLaunchScript script = new DefaultLaunchScript(null, null);\n+\t\tString content = new String(script.toByteArray());\n+\t\tassertThat(content).contains(\"STOP_WAIT_TIME=60\");\n+\t}\n+\n \t@Test\n \tpublic void loadFromFile() throws Exception {\n \t\tFile file = this.temporaryFolder.newFile();",
    "output": "Make stop wait time in the launch script configurable\nCreate a parameter `STOP_WAIT_TIME` for the startup script\nthat configures the time in seconds to wait for a normal\nshutdown. Because of #4941 we also send a shutdown half\nway the countdown."
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/DefaultLaunchScriptTests.java b/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/DefaultLaunchScriptTests.java\n--- a/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/DefaultLaunchScriptTests.java\n+++ b/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/DefaultLaunchScriptTests.java\n@@ -61,6 +61,16 @@ public void initInfoProvidesCanBeReplaced() throws Exception {\n \t\tassertThatPlaceholderCanBeReplaced(\"initInfoProvides\");\n \t}\n \n+\t@Test\n+\tpublic void initInfoRequiredStartCanBeReplaced() throws Exception {\n+\t\tassertThatPlaceholderCanBeReplaced(\"initInfoRequiredStart\");\n+\t}\n+\n+\t@Test\n+\tpublic void initInfoRequiredStopCanBeReplaced() throws Exception {\n+\t\tassertThatPlaceholderCanBeReplaced(\"initInfoRequiredStop\");\n+\t}\n+\n \t@Test\n \tpublic void initInfoShortDescriptionCanBeReplaced() throws Exception {\n \t\tassertThatPlaceholderCanBeReplaced(\"initInfoShortDescription\");",
    "output": "Init INFO Required Start/Stop as embedded launch script properties"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/DefaultLaunchScriptTests.java b/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/DefaultLaunchScriptTests.java\n--- a/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/DefaultLaunchScriptTests.java\n+++ b/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/DefaultLaunchScriptTests.java\n@@ -61,6 +61,16 @@ public void initInfoProvidesCanBeReplaced() throws Exception {\n \t\tassertThatPlaceholderCanBeReplaced(\"initInfoProvides\");\n \t}\n \n+\t@Test\n+\tpublic void initInfoRequiredStartCanBeReplaced() throws Exception {\n+\t\tassertThatPlaceholderCanBeReplaced(\"initInfoRequiredStart\");\n+\t}\n+\n+\t@Test\n+\tpublic void initInfoRequiredStopCanBeReplaced() throws Exception {\n+\t\tassertThatPlaceholderCanBeReplaced(\"initInfoRequiredStop\");\n+\t}\n+\n \t@Test\n \tpublic void initInfoShortDescriptionCanBeReplaced() throws Exception {\n \t\tassertThatPlaceholderCanBeReplaced(\"initInfoShortDescription\");",
    "output": "Init INFO Required Start/Stop as embedded launch script properties Expose the Required-Start and Require-Stop lines in the launch script INIT INFO section as customizable embedded launch script properties. This way one can express dependencies fron other init services by simply changing the configuration in the build script."
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/logging/logback/DefaultLogbackConfiguration.java b/spring-boot/src/main/java/org/springframework/boot/logging/logback/DefaultLogbackConfiguration.java\n--- a/spring-boot/src/main/java/org/springframework/boot/logging/logback/DefaultLogbackConfiguration.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/logging/logback/DefaultLogbackConfiguration.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2015 the original author or authors.\n+ * Copyright 2012-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -26,6 +26,7 @@\n import ch.qos.logback.core.rolling.FixedWindowRollingPolicy;\n import ch.qos.logback.core.rolling.RollingFileAppender;\n import ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy;\n+import ch.qos.logback.core.util.FileSize;\n import ch.qos.logback.core.util.OptionHelper;\n \n import org.springframework.boot.bind.RelaxedPropertyResolver;\n@@ -142,7 +143,7 @@ private Appender<ILoggingEvent> fileAppender(LogbackConfigurator config,\n \t\tconfig.start(rollingPolicy);\n \n \t\tSizeBasedTriggeringPolicy<ILoggingEvent> triggeringPolicy = new SizeBasedTriggeringPolicy<ILoggingEvent>();\n-\t\ttriggeringPolicy.setMaxFileSize(\"10MB\");\n+\t\ttriggeringPolicy.setMaxFileSize(FileSize.valueOf(\"10MB\"));\n \t\tappender.setTriggeringPolicy(triggeringPolicy);\n \t\tconfig.start(triggeringPolicy);\n ",
    "output": "Upgrade to Logback 1.1.8"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/JolokiaMvcEndpointIntegrationTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/JolokiaMvcEndpointIntegrationTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/JolokiaMvcEndpointIntegrationTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/JolokiaMvcEndpointIntegrationTests.java\n@@ -53,7 +53,7 @@\n  * @author Dave Syer\n  */\n @RunWith(SpringRunner.class)\n-@SpringBootTest\n+@SpringBootTest(properties = \"management.security.enabled=false\")\n public class JolokiaMvcEndpointIntegrationTests {\n \n \t@Autowired",
    "output": "Disable management security when testing Jolokia endpoint"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/EnvironmentEndpointTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/EnvironmentEndpointTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/EnvironmentEndpointTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/EnvironmentEndpointTests.java\n@@ -19,6 +19,7 @@\n import java.util.Collections;\n import java.util.Map;\n \n+import org.junit.After;\n import org.junit.Test;\n \n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n@@ -45,6 +46,12 @@ public EnvironmentEndpointTests() {\n \t\tsuper(Config.class, EnvironmentEndpoint.class, \"env\", true, \"endpoints.env\");\n \t}\n \n+\t@Override\n+\t@After\n+\tpublic void close() {\n+\t\tSystem.clearProperty(\"VCAP_SERVICES\");\n+\t}\n+\n \t@Test\n \tpublic void invoke() throws Exception {\n \t\tassertThat(getEndpointBean().invoke()).isNotEmpty();",
    "output": "Clear VCAP_APPLICATION after tests\nSo that other CF tests do not fail."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CaffeineCacheConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CaffeineCacheConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CaffeineCacheConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CaffeineCacheConfiguration.java\n@@ -68,7 +68,7 @@ class CaffeineCacheConfiguration {\n \t}\n \n \t@Bean\n-\tpublic CaffeineCacheManager caffeineCacheManager() {\n+\tpublic CaffeineCacheManager cacheManager() {\n \t\tCaffeineCacheManager cacheManager = createCacheManager();\n \t\tList<String> cacheNames = this.cacheProperties.getCacheNames();\n \t\tif (!CollectionUtils.isEmpty(cacheNames)) {",
    "output": "Harmonize Caffeine CacheManager bean name"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/yaml/SpringProfileDocumentMatcher.java b/spring-boot/src/main/java/org/springframework/boot/yaml/SpringProfileDocumentMatcher.java\n--- a/spring-boot/src/main/java/org/springframework/boot/yaml/SpringProfileDocumentMatcher.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/yaml/SpringProfileDocumentMatcher.java\n@@ -30,7 +30,6 @@\n import org.springframework.beans.factory.config.YamlProcessor.MatchStatus;\n import org.springframework.boot.bind.PropertySourcesPropertyValues;\n import org.springframework.boot.bind.RelaxedDataBinder;\n-import org.springframework.boot.context.properties.ConfigurationProperties;\n import org.springframework.core.env.Environment;\n import org.springframework.core.env.MutablePropertySources;\n import org.springframework.core.env.PropertiesPropertySource;\n@@ -195,7 +194,6 @@ public MatchStatus doMatches(Set<String> springProfiles) {\n \t/**\n \t * Class for binding {@code spring.profiles} property.\n \t */\n-\t@ConfigurationProperties(\"spring\")\n \tstatic class SpringProperties {\n \n \t\tprivate List<String> profiles = new ArrayList<String>();",
    "output": "Remove redundant @ConfigurationProperties annotation"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/kafka/KafkaAutoConfigurationIntegrationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/kafka/KafkaAutoConfigurationIntegrationTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/kafka/KafkaAutoConfigurationIntegrationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/kafka/KafkaAutoConfigurationIntegrationTests.java\n@@ -67,7 +67,7 @@ public void testEndToEnd() throws Exception {\n \t\t\t\t.getBean(KafkaTemplate.class);\n \t\ttemplate.send(TEST_TOPIC, \"foo\", \"bar\");\n \t\tListener listener = this.context.getBean(Listener.class);\n-\t\tassertThat(listener.latch.await(10, TimeUnit.SECONDS)).isTrue();\n+\t\tassertThat(listener.latch.await(30, TimeUnit.SECONDS)).isTrue();\n \t\tassertThat(listener.key).isEqualTo(\"foo\");\n \t\tassertThat(listener.received).isEqualTo(\"bar\");\n \t}",
    "output": "Increate timeout in Kafka tests as Windows CI agents are very slow"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java\n--- a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java\n+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java\n@@ -536,11 +536,8 @@ public static String toCamelCase(CharSequence string) {\n \t\treturn builder.toString();\n \t}\n \n-\tprivate static Object capitalize(String str) {\n-\t\tStringBuilder sb = new StringBuilder(str.length());\n-\t\tsb.append(Character.toUpperCase(str.charAt(0)));\n-\t\tsb.append(str.substring(1));\n-\t\treturn sb.toString();\n+\tprivate static String capitalize(String str) {\n+\t\treturn Character.toUpperCase(str.charAt(0)) + str.substring(1);\n \t}\n \n \tprivate void log(String message) {",
    "output": "Remove redundant StringBuilder"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java\n--- a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java\n+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java\n@@ -536,11 +536,8 @@ public static String toCamelCase(CharSequence string) {\n \t\treturn builder.toString();\n \t}\n \n-\tprivate static Object capitalize(String str) {\n-\t\tStringBuilder sb = new StringBuilder(str.length());\n-\t\tsb.append(Character.toUpperCase(str.charAt(0)));\n-\t\tsb.append(str.substring(1));\n-\t\treturn sb.toString();\n+\tprivate static String capitalize(String str) {\n+\t\treturn Character.toUpperCase(str.charAt(0)) + str.substring(1);\n \t}\n \n \tprivate void log(String message) {",
    "output": "Remove redundant StringBuilder"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/env/YamlPropertySourceLoader.java b/spring-boot/src/main/java/org/springframework/boot/env/YamlPropertySourceLoader.java\n--- a/spring-boot/src/main/java/org/springframework/boot/env/YamlPropertySourceLoader.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/env/YamlPropertySourceLoader.java\n@@ -78,7 +78,7 @@ private static class Processor extends YamlProcessor {\n \t\t\t\tsetMatchDefault(false);\n \t\t\t\tsetDocumentMatchers(new SpringProfileDocumentMatcher(profile));\n \t\t\t}\n-\t\t\tsetResources(new Resource[] { resource });\n+\t\t\tsetResources(resource);\n \t\t}\n \n \t\t@Override",
    "output": "Remove redundant array creation for calling varargs method"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/env/YamlPropertySourceLoader.java b/spring-boot/src/main/java/org/springframework/boot/env/YamlPropertySourceLoader.java\n--- a/spring-boot/src/main/java/org/springframework/boot/env/YamlPropertySourceLoader.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/env/YamlPropertySourceLoader.java\n@@ -78,7 +78,7 @@ private static class Processor extends YamlProcessor {\n \t\t\t\tsetMatchDefault(false);\n \t\t\t\tsetDocumentMatchers(new SpringProfileDocumentMatcher(profile));\n \t\t\t}\n-\t\t\tsetResources(new Resource[] { resource });\n+\t\t\tsetResources(resource);\n \t\t}\n \n \t\t@Override",
    "output": "Remove redundant array creation for calling varargs method"
  },
  {
    "input": "diff --git a/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/ResetMocksTestExecutionListener.java b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/ResetMocksTestExecutionListener.java\n--- a/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/ResetMocksTestExecutionListener.java\n+++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/ResetMocksTestExecutionListener.java\n@@ -65,7 +65,7 @@ private void resetMocks(ConfigurableApplicationContext applicationContext,\n \t\tfor (String name : names) {\n \t\t\tBeanDefinition definition = beanFactory.getBeanDefinition(name);\n \t\t\tif (definition.isSingleton() && instantiatedSingletons.contains(name)) {\n-\t\t\t\tObject bean = beanFactory.getBean(name);\n+\t\t\t\tObject bean = beanFactory.getSingleton(name);\n \t\t\t\tif (reset.equals(MockReset.get(bean))) {\n \t\t\t\t\tMockito.reset(bean);\n \t\t\t\t}",
    "output": "Prevent a broken factory bean from breaking the resetting of mocks"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java b/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java\n@@ -536,6 +536,14 @@ public void yamlSetsMultiProfiles() throws Exception {\n \t\t\t\t\"healthcheck\");\n \t}\n \n+\t@Test\n+\tpublic void yamlSetsMultiProfilesWhenListProvided() throws Exception {\n+\t\tthis.initializer.setSearchNames(\"testsetmultiprofileslist\");\n+\t\tthis.initializer.postProcessEnvironment(this.environment, this.application);\n+\t\tassertThat(this.environment.getActiveProfiles()).containsExactly(\"dev\",\n+\t\t\t\t\"healthcheck\");\n+\t}\n+\n \t@Test\n \tpublic void yamlSetsMultiProfilesWithWhitespace() throws Exception {\n \t\tthis.initializer.setSearchNames(\"testsetmultiprofileswhitespace\");",
    "output": "Document and test array support for spring.profiles.*"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/undertow/FileSessionPersistence.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/undertow/FileSessionPersistence.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/undertow/FileSessionPersistence.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/undertow/FileSessionPersistence.java\n@@ -30,6 +30,8 @@\n import io.undertow.servlet.UndertowServletLogger;\n import io.undertow.servlet.api.SessionPersistenceManager;\n \n+import org.springframework.core.ConfigurableObjectInputStream;\n+\n /**\n  * {@link SessionPersistenceManager} that stores session information in a file.\n  *\n@@ -82,7 +84,7 @@ public Map<String, PersistentSession> loadSessionAttributes(String deploymentNam\n \t\ttry {\n \t\t\tFile file = getSessionFile(deploymentName);\n \t\t\tif (file.exists()) {\n-\t\t\t\treturn load(file);\n+\t\t\t\treturn load(file, classLoader);\n \t\t\t}\n \t\t}\n \t\tcatch (Exception ex) {\n@@ -91,9 +93,10 @@ public Map<String, PersistentSession> loadSessionAttributes(String deploymentNam\n \t\treturn null;\n \t}\n \n-\tprivate Map<String, PersistentSession> load(File file)\n+\tprivate Map<String, PersistentSession> load(File file, ClassLoader classLoader)\n \t\t\tthrows IOException, ClassNotFoundException {\n-\t\tObjectInputStream stream = new ObjectInputStream(new FileInputStream(file));\n+\t\tObjectInputStream stream = new ConfigurableObjectInputStream(\n+\t\t\t\tnew FileInputStream(file), classLoader);\n \t\ttry {\n \t\t\treturn load(stream);\n \t\t}",
    "output": "Fix undertow session persistence with spring-boot-devtools"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java\n@@ -44,7 +44,7 @@\n  * @since 1.4.0\n  */\n @Configuration\n-@ConditionalOnClass({ CouchbaseBucket.class, Cluster.class })\n+@ConditionalOnClass({ CouchbaseBucket.class, Cluster.class, CouchbaseConfigurer.class })\n @Conditional(CouchbaseAutoConfiguration.CouchbaseCondition.class)\n @EnableConfigurationProperties(CouchbaseProperties.class)\n public class CouchbaseAutoConfiguration {",
    "output": "Check for Spring Data before configuring Couchbase\nAdd guard to `CouchbaseAutoConfiguration` so ensure that Spring Data\nCouchbase is on the classpath."
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/DefaultLaunchScriptTests.java b/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/DefaultLaunchScriptTests.java\n--- a/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/DefaultLaunchScriptTests.java\n+++ b/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/DefaultLaunchScriptTests.java\n@@ -46,6 +46,16 @@ public void loadsDefaultScript() throws Exception {\n \t\tassertThat(content).contains(\"Spring Boot Startup Script\");\n \t}\n \n+\t@Test\n+\tpublic void logFilenameCanBeReplaced() throws Exception {\n+\t\tassertThatPlaceholderCanBeReplaced(\"logFilename\");\n+\t}\n+\n+\t@Test\n+\tpublic void pidFilenameCanBeReplaced() throws Exception {\n+\t\tassertThatPlaceholderCanBeReplaced(\"pidFilename\");\n+\t}\n+\n \t@Test\n \tpublic void initInfoProvidesCanBeReplaced() throws Exception {\n \t\tassertThatPlaceholderCanBeReplaced(\"initInfoProvides\");",
    "output": "Make launch script's logFilename and pidFilename configurable via properties"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/DefaultLaunchScriptTests.java b/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/DefaultLaunchScriptTests.java\n--- a/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/DefaultLaunchScriptTests.java\n+++ b/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/DefaultLaunchScriptTests.java\n@@ -46,6 +46,16 @@ public void loadsDefaultScript() throws Exception {\n \t\tassertThat(content).contains(\"Spring Boot Startup Script\");\n \t}\n \n+\t@Test\n+\tpublic void logFilenameCanBeReplaced() throws Exception {\n+\t\tassertThatPlaceholderCanBeReplaced(\"logFilename\");\n+\t}\n+\n+\t@Test\n+\tpublic void pidFilenameCanBeReplaced() throws Exception {\n+\t\tassertThatPlaceholderCanBeReplaced(\"pidFilename\");\n+\t}\n+\n \t@Test\n \tpublic void initInfoProvidesCanBeReplaced() throws Exception {\n \t\tassertThatPlaceholderCanBeReplaced(\"initInfoProvides\");",
    "output": "Make launch script's logFilename and pidFilename configurable via properties"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfigurationTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfigurationTests.java\n@@ -244,7 +244,8 @@ public void securityHeadersCanBeDisabled() throws Exception {\n \t@Test\n \tpublic void contentSecurityPolicyConfiguration() throws Exception {\n \t\tthis.context = SpringApplication.run(VanillaWebConfiguration.class,\n-\t\t\t\t\"--security.headers.content-security-policy=default-src 'self';\");\n+\t\t\t\t\"--security.headers.content-security-policy=default-src 'self';\",\n+\t\t\t\t\"--server.port=0\");\n \t\tMockMvc mockMvc = MockMvcBuilders\n \t\t\t\t.webAppContextSetup((WebApplicationContext) this.context)\n \t\t\t\t.addFilters((FilterChainProxy) this.context\n@@ -261,7 +262,8 @@ public void contentSecurityPolicyConfiguration() throws Exception {\n \tpublic void contentSecurityPolicyReportOnlyConfiguration() throws Exception {\n \t\tthis.context = SpringApplication.run(VanillaWebConfiguration.class,\n \t\t\t\t\"--security.headers.content-security-policy=default-src 'self';\",\n-\t\t\t\t\"--security.headers.content-security-policy-mode=report-only\");\n+\t\t\t\t\"--security.headers.content-security-policy-mode=report-only\",\n+\t\t\t\t\"--server.port=0\");\n \t\tMockMvc mockMvc = MockMvcBuilders\n \t\t\t\t.webAppContextSetup((WebApplicationContext) this.context)\n \t\t\t\t.addFilters((FilterChainProxy) this.context",
    "output": "Use a random port in new tests in SpringBootWebSecurityConfigurationTests"
  },
  {
    "input": "diff --git a/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/SpringBootMockUtil.java b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/SpringBootMockUtil.java\n--- a/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/SpringBootMockUtil.java\n+++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/SpringBootMockUtil.java\n@@ -36,7 +36,7 @@\n  *\n  * @author Andy Wilkinson\n  */\n-class SpringBootMockUtil {\n+final class SpringBootMockUtil {\n \n \tprivate static final MockUtilAdapter adapter;\n \n@@ -50,6 +50,10 @@ class SpringBootMockUtil {\n \t\t}\n \t}\n \n+\tprivate SpringBootMockUtil() {\n+\n+\t}\n+\n \tstatic MockCreationSettings<?> getMockSettings(Object mock) {\n \t\treturn adapter.getMockSettings(mock);\n \t}",
    "output": "Fix problems in SpringBootMockUtil reported by Checkstyle"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/jdbc/DatabaseDriverClassNameTests.java b/spring-boot/src/test/java/org/springframework/boot/jdbc/DatabaseDriverClassNameTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/jdbc/DatabaseDriverClassNameTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/jdbc/DatabaseDriverClassNameTests.java\n@@ -42,9 +42,8 @@\n public class DatabaseDriverClassNameTests {\n \n \tprivate static final EnumSet<DatabaseDriver> excludedDrivers = EnumSet.of(\n-\t\t\tDatabaseDriver.UNKNOWN, DatabaseDriver.ORACLE, DatabaseDriver.SQLSERVER,\n-\t\t\tDatabaseDriver.DB2, DatabaseDriver.DB2_AS400, DatabaseDriver.INFORMIX,\n-\t\t\tDatabaseDriver.TERADATA);\n+\t\t\tDatabaseDriver.UNKNOWN, DatabaseDriver.ORACLE, DatabaseDriver.DB2,\n+\t\t\tDatabaseDriver.DB2_AS400, DatabaseDriver.INFORMIX, DatabaseDriver.TERADATA);\n \n \tprivate final String className;\n ",
    "output": "Add dependency management for SQL Server's JDBC driver"
  },
  {
    "input": "diff --git a/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/ClassLoaderFilesResourcePatternResolver.java b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/ClassLoaderFilesResourcePatternResolver.java\n--- a/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/ClassLoaderFilesResourcePatternResolver.java\n+++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/ClassLoaderFilesResourcePatternResolver.java\n@@ -162,4 +162,4 @@ public InputStream getInputStream() throws IOException {\n \t\t\tthrow new IOException(this.name + \" has been deleted\");\n \t\t}\n \t}\n-}\n\\ No newline at end of file\n+}",
    "output": "Polishing: fix Checkstyle warning"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/web/support/ErrorPageFilter.java b/spring-boot/src/main/java/org/springframework/boot/web/support/ErrorPageFilter.java\n--- a/spring-boot/src/main/java/org/springframework/boot/web/support/ErrorPageFilter.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/web/support/ErrorPageFilter.java\n@@ -185,7 +185,7 @@ private void forwardToErrorPage(String path, HttpServletRequest request,\n \t\trequest.getRequestDispatcher(path).forward(request, response);\n \t}\n \n-\tprivate String getDescription(HttpServletRequest request) {\n+\tprotected String getDescription(HttpServletRequest request) {\n \t\treturn \"[\" + request.getServletPath()\n \t\t\t\t+ (request.getPathInfo() == null ? \"\" : request.getPathInfo()) + \"]\";\n \t}",
    "output": "Make ErrorPageFilter.getDescription protected\nMake `ErrorPageFilter#getDescription` `protected` instead of `private`\nto be able to customize the details for the request logged in case of\nan error."
  },
  {
    "input": "diff --git a/spring-boot-test/src/test/java/org/springframework/boot/test/web/htmlunit/webdriver/LocalHostWebConnectionHtmlUnitDriverTests.java b/spring-boot-test/src/test/java/org/springframework/boot/test/web/htmlunit/webdriver/LocalHostWebConnectionHtmlUnitDriverTests.java\n--- a/spring-boot-test/src/test/java/org/springframework/boot/test/web/htmlunit/webdriver/LocalHostWebConnectionHtmlUnitDriverTests.java\n+++ b/spring-boot-test/src/test/java/org/springframework/boot/test/web/htmlunit/webdriver/LocalHostWebConnectionHtmlUnitDriverTests.java\n@@ -81,7 +81,9 @@ public void createWithCapabilitiesWhenEnvironmentIsNullWillThrowException()\n \t\t\tthrows Exception {\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n \t\tthis.thrown.expectMessage(\"Environment must not be null\");\n-\t\tnew LocalHostWebConnectionHtmlUnitDriver(null, mock(Capabilities.class));\n+\t\tCapabilities capabilities = mock(Capabilities.class);\n+\t\tgiven(capabilities.getBrowserName()).willReturn(\"chrome\");\n+\t\tnew LocalHostWebConnectionHtmlUnitDriver(null, capabilities);\n \t}\n \n \t@Test",
    "output": "Upgrade to HTMLUnit 2.23 (+selenium module 2.23.2)"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/logging/logback/DefaultLogbackConfiguration.java b/spring-boot/src/main/java/org/springframework/boot/logging/logback/DefaultLogbackConfiguration.java\n--- a/spring-boot/src/main/java/org/springframework/boot/logging/logback/DefaultLogbackConfiguration.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/logging/logback/DefaultLogbackConfiguration.java\n@@ -95,7 +95,6 @@ private void base(LogbackConfigurator config) {\n \t\t\t\t\"org.springframework.boot\");\n \t\tconfig.start(debugRemapAppender);\n \t\tconfig.appender(\"DEBUG_LEVEL_REMAPPER\", debugRemapAppender);\n-\t\tconfig.logger(\"\", Level.ERROR);\n \t\tconfig.logger(\"org.apache.catalina.startup.DigesterFactory\", Level.ERROR);\n \t\tconfig.logger(\"org.apache.catalina.util.LifecycleBase\", Level.ERROR);\n \t\tconfig.logger(\"org.apache.coyote.http11.Http11NioProtocol\", Level.WARN);",
    "output": "Remove empty logger from default logback config\nRemove the empty logger as it was not also defined in `defaults.xml`\nand caused rendering issues with the new `/loggers` endpoint."
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/AbstractEndpointHandlerMappingTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/AbstractEndpointHandlerMappingTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/AbstractEndpointHandlerMappingTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/AbstractEndpointHandlerMappingTests.java\n@@ -42,7 +42,7 @@ public void pathNotMappedWhenGetPathReturnsNull() throws Exception {\n \t\tTestMvcEndpoint endpoint = new TestMvcEndpoint(new TestEndpoint(\"a\"));\n \t\tTestActionEndpoint other = new TestActionEndpoint(new TestEndpoint(\"b\"));\n \t\tAbstractEndpointHandlerMapping<?> mapping = new TestEndpointHandlerMapping<MvcEndpoint>(\n-\t\t\t\tArrays.asList(endpoint, other));\n+\t\t\t\tArrays.<MvcEndpoint>asList(endpoint, other));\n \t\tmapping.setApplicationContext(this.context);\n \t\tmapping.afterPropertiesSet();\n \t\tassertThat(mapping.getHandlerMethods()).hasSize(1);",
    "output": "Give javac's type inferencing a helping hand"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java b/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java\n--- a/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java\n@@ -176,7 +176,7 @@ protected void loadConfiguration(String location, LogFile logFile) {\n \t\t\tLoggerContext ctx = getLoggerContext();\n \t\t\tURL url = ResourceUtils.getURL(location);\n \t\t\tConfigurationSource source = getConfigurationSource(url);\n-\t\t\tctx.start(ConfigurationFactory.getInstance().getConfiguration(source));\n+\t\t\tctx.start(ConfigurationFactory.getInstance().getConfiguration(ctx, source));\n \t\t}\n \t\tcatch (Exception ex) {\n \t\t\tthrow new IllegalStateException(",
    "output": "Upgrade to Log4j 2.7"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java b/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java\n--- a/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystem.java\n@@ -176,7 +176,7 @@ protected void loadConfiguration(String location, LogFile logFile) {\n \t\t\tLoggerContext ctx = getLoggerContext();\n \t\t\tURL url = ResourceUtils.getURL(location);\n \t\t\tConfigurationSource source = getConfigurationSource(url);\n-\t\t\tctx.start(ConfigurationFactory.getInstance().getConfiguration(source));\n+\t\t\tctx.start(ConfigurationFactory.getInstance().getConfiguration(ctx, source));\n \t\t}\n \t\tcatch (Exception ex) {\n \t\t\tthrow new IllegalStateException(",
    "output": "Upgrade to Log4j 2.7"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/jta/bitronix/PoolingConnectionFactoryBean.java b/spring-boot/src/main/java/org/springframework/boot/jta/bitronix/PoolingConnectionFactoryBean.java\n--- a/spring-boot/src/main/java/org/springframework/boot/jta/bitronix/PoolingConnectionFactoryBean.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/jta/bitronix/PoolingConnectionFactoryBean.java\n@@ -148,7 +148,7 @@ public XAJMSContext createXAContext() {\n \n \t\t@Override\n \t\tpublic XAJMSContext createXAContext(String username, String password) {\n-\t\t\treturn this.createXAContext(username, password);\n+\t\t\treturn this.connectionFactory.createXAContext(username, password);\n \t\t}\n \n \t}",
    "output": "Fix implementation of PoolingConnectionFactoryBean.createXAContext()"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/jta/bitronix/PoolingConnectionFactoryBean.java b/spring-boot/src/main/java/org/springframework/boot/jta/bitronix/PoolingConnectionFactoryBean.java\n--- a/spring-boot/src/main/java/org/springframework/boot/jta/bitronix/PoolingConnectionFactoryBean.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/jta/bitronix/PoolingConnectionFactoryBean.java\n@@ -148,7 +148,7 @@ public XAJMSContext createXAContext() {\n \n \t\t@Override\n \t\tpublic XAJMSContext createXAContext(String username, String password) {\n-\t\t\treturn this.createXAContext(username, password);\n+\t\t\treturn this.connectionFactory.createXAContext(username, password);\n \t\t}\n \n \t}",
    "output": "Fix implementation of PoolingConnectionFactoryBean.createXAContext()"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/LaunchedURLClassLoader.java b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/LaunchedURLClassLoader.java\n--- a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/LaunchedURLClassLoader.java\n+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/LaunchedURLClassLoader.java\n@@ -27,6 +27,7 @@\n import java.util.jar.JarFile;\n \n import org.springframework.boot.loader.jar.Handler;\n+import org.springframework.lang.UsesJava7;\n \n /**\n  * {@link ClassLoader} used by the {@link Launcher}.\n@@ -38,7 +39,7 @@\n public class LaunchedURLClassLoader extends URLClassLoader {\n \n \tstatic {\n-\t\tClassLoader.registerAsParallelCapable();\n+\t\tperformParallelCapableRegistration();\n \t}\n \n \t/**\n@@ -186,4 +187,14 @@ private void clearCache(URLConnection connection) throws IOException {\n \t\t}\n \t}\n \n+\t@UsesJava7\n+\tprivate static void performParallelCapableRegistration() {\n+\t\ttry {\n+\t\t\tClassLoader.registerAsParallelCapable();\n+\t\t}\n+\t\tcatch (NoSuchMethodError ex) {\n+\t\t\t// Running on Java 6. Continue.\n+\t\t}\n+\t}\n+\n }",
    "output": "Make LaunchedURLClassLoader Java 6 compatible again"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/LaunchedURLClassLoader.java b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/LaunchedURLClassLoader.java\n--- a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/LaunchedURLClassLoader.java\n+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/LaunchedURLClassLoader.java\n@@ -37,6 +37,10 @@\n  */\n public class LaunchedURLClassLoader extends URLClassLoader {\n \n+\tstatic {\n+\t\tClassLoader.registerAsParallelCapable();\n+\t}\n+\n \t/**\n \t * Create a new {@link LaunchedURLClassLoader} instance.\n \t * @param urls the URLs from which to load classes and resources",
    "output": "Reinstate LaunchedURLClassLoader's registration  as parallel capable"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/LaunchedURLClassLoader.java b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/LaunchedURLClassLoader.java\n--- a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/LaunchedURLClassLoader.java\n+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/LaunchedURLClassLoader.java\n@@ -37,6 +37,10 @@\n  */\n public class LaunchedURLClassLoader extends URLClassLoader {\n \n+\tstatic {\n+\t\tClassLoader.registerAsParallelCapable();\n+\t}\n+\n \t/**\n \t * Create a new {@link LaunchedURLClassLoader} instance.\n \t * @param urls the URLs from which to load classes and resources",
    "output": "Reinstate LaunchedURLClassLoader's registration  as parallel capable"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/OnBeanConditionTypeDeductionFailureTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/OnBeanConditionTypeDeductionFailureTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/OnBeanConditionTypeDeductionFailureTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/OnBeanConditionTypeDeductionFailureTests.java\n@@ -49,20 +49,22 @@ public void conditionalOnMissingBeanWithDeducedTypeThatIsPartiallyMissingFromCla\n \t\t\tfail(\"Context refresh was successful\");\n \t\t}\n \t\tcatch (Exception ex) {\n-\t\t\tThrowable beanTypeDeductionException = findBeanTypeDeductionException(ex);\n+\t\t\tThrowable beanTypeDeductionException = findNestedCause(ex,\n+\t\t\t\t\tBeanTypeDeductionException.class);\n \t\t\tassertThat(beanTypeDeductionException)\n \t\t\t\t\t.hasMessage(\"Failed to deduce bean type for \"\n \t\t\t\t\t\t\t+ OnMissingBeanConfiguration.class.getName()\n \t\t\t\t\t\t\t+ \".objectMapper\");\n-\t\t\tassertThat(beanTypeDeductionException)\n-\t\t\t\t\t.hasCauseInstanceOf(NoClassDefFoundError.class);\n+\t\t\tassertThat(findNestedCause(beanTypeDeductionException,\n+\t\t\t\t\tNoClassDefFoundError.class)).isNotNull();\n+\n \t\t}\n \t}\n \n-\tprivate Throwable findBeanTypeDeductionException(Throwable ex) {\n+\tprivate Throwable findNestedCause(Throwable ex, Class<? extends Throwable> target) {\n \t\tThrowable candidate = ex;\n \t\twhile (candidate != null) {\n-\t\t\tif (candidate instanceof BeanTypeDeductionException) {\n+\t\t\tif (target.isInstance(candidate)) {\n \t\t\t\treturn candidate;\n \t\t\t}\n \t\t\tcandidate = candidate.getCause();",
    "output": "Relaxed test assertion"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/test/java/org/springframework/boot/cli/TestCommandIntegrationTests.java b/spring-boot-cli/src/test/java/org/springframework/boot/cli/TestCommandIntegrationTests.java\n--- a/spring-boot-cli/src/test/java/org/springframework/boot/cli/TestCommandIntegrationTests.java\n+++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/TestCommandIntegrationTests.java\n@@ -96,7 +96,7 @@ public void integrationAutoConfigEmbeddedTest() throws Exception {\n \n \t@Test\n \tpublic void integrationAutoConfigTest() throws Exception {\n-\t\tString output = this.cli.test(\"integration_auto_test.groovy\", \"jms.groovy\");\n+\t\tString output = this.cli.test(\"integration_auto_test.groovy\", \"app.groovy\");\n \t\tassertThat(output).contains(\"OK (1 test)\");\n \t}\n ",
    "output": "Simplify CLI integration auto-config test by removing use of Artemis\nArtemis seems to be a bit flakey which is causing sporadic build\nfailures, for example due to an NPE in Artemis' code."
  },
  {
    "input": "diff --git a/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/LocalDevToolsAutoConfigurationTests.java b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/LocalDevToolsAutoConfigurationTests.java\n--- a/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/LocalDevToolsAutoConfigurationTests.java\n+++ b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/LocalDevToolsAutoConfigurationTests.java\n@@ -289,6 +289,7 @@ public static class Config {\n \t@Configuration\n \t@Import({ EmbeddedServletContainerAutoConfiguration.class,\n \t\t\tLocalDevToolsAutoConfiguration.class, ThymeleafAutoConfiguration.class })\n+\t@EnableConfigurationProperties(ServerProperties.class)\n \tpublic static class ConfigWithMockLiveReload {\n \n \t\t@Bean\n@@ -301,6 +302,7 @@ public LiveReloadServer liveReloadServer() {\n \t@Configuration\n \t@Import({ EmbeddedServletContainerAutoConfiguration.class,\n \t\t\tLocalDevToolsAutoConfiguration.class, ResourceProperties.class })\n+\t@EnableConfigurationProperties(ServerProperties.class)\n \tpublic static class WebResourcesConfig {\n \n \t}",
    "output": "User random server port in devtools tests\nUpdate `LocalDevToolsAutoConfigurationTests` to ensure that a random\nserver port is used rather than 8080."
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/plugin/SpringBootPlugin.java b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/plugin/SpringBootPlugin.java\n--- a/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/plugin/SpringBootPlugin.java\n+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/plugin/SpringBootPlugin.java\n@@ -45,10 +45,10 @@ public class SpringBootPlugin implements Plugin<Project> {\n \n \t@Override\n \tpublic void apply(Project project) {\n-\t\tif (GradleVersion.current().compareTo(GradleVersion.version(\"2.8\")) < 0) {\n+\t\tif (GradleVersion.current().compareTo(GradleVersion.version(\"2.9\")) < 0) {\n \t\t\tlogger.warn(\"Spring Boot plugin's support for Gradle \"\n \t\t\t\t\t+ GradleVersion.current().getVersion()\n-\t\t\t\t\t+ \" is deprecated. Please upgrade to Gradle 2.8 or later.\");\n+\t\t\t\t\t+ \" is deprecated. Please upgrade to Gradle 2.9 or later.\");\n \t\t}\n \t\tproject.getExtensions().create(\"springBoot\", SpringBootPluginExtension.class,\n \t\t\t\tproject);",
    "output": "Correct minimum recommended version of Gradle to be 2.9 rather than 2.8"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringTestCompilerAutoConfiguration.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringTestCompilerAutoConfiguration.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringTestCompilerAutoConfiguration.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringTestCompilerAutoConfiguration.java\n@@ -69,6 +69,7 @@ public void applyImports(ImportCustomizer imports) throws CompilationFailedExcep\n \t\t\t\t\"org.springframework.boot.test.web.client\", \"org.springframework.http\",\n \t\t\t\t\"org.springframework.test.context.junit4\",\n \t\t\t\t\"org.springframework.test.annotation\").addImports(\n-\t\t\t\t\t\t\"org.springframework.boot.test.context.SpringBootTest.WebEnvironment\");\n+\t\t\t\t\t\t\"org.springframework.boot.test.context.SpringBootTest.WebEnvironment\",\n+\t\t\t\t\t\t\"org.springframework.boot.test.web.client.TestRestTemplate\");\n \t}\n }",
    "output": "Ensure that CLI-based tests automatically import new TestRestTemplate"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/LogFileMvcEndpoint.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/LogFileMvcEndpoint.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/LogFileMvcEndpoint.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/LogFileMvcEndpoint.java\n@@ -19,6 +19,7 @@\n import java.io.File;\n import java.io.IOException;\n \n+import javax.servlet.ServletContext;\n import javax.servlet.ServletException;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n@@ -82,7 +83,8 @@ public void invoke(HttpServletRequest request, HttpServletResponse response)\n \t\t\t}\n \t\t\tresource = null;\n \t\t}\n-\t\tnew Handler(resource).handleRequest(request, response);\n+\t\tHandler handler = new Handler(resource, request.getServletContext());\n+\t\thandler.handleRequest(request, response);\n \t}\n \n \tprivate Resource getLogFileResource() {\n@@ -104,10 +106,11 @@ private static class Handler extends ResourceHttpRequestHandler {\n \n \t\tprivate final Resource resource;\n \n-\t\tHandler(Resource resource) {\n+\t\tHandler(Resource resource, ServletContext servletContext) {\n \t\t\tthis.resource = resource;\n \t\t\tgetLocations().add(resource);\n \t\t\ttry {\n+\t\t\t\tsetServletContext(servletContext);\n \t\t\t\tafterPropertiesSet();\n \t\t\t}\n \t\t\tcatch (Exception ex) {",
    "output": "Fix ResourceHttpRequestHandler delegate\nFix ResourceHttpRequestHandler to set the ServletContext following the\nSpring Framework update for SPR-14851."
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/DependencyResolutionContext.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/DependencyResolutionContext.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/DependencyResolutionContext.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/DependencyResolutionContext.java\n@@ -79,7 +79,7 @@ private Dependency getManagedDependency(String group, String artifact) {\n \t\t\t\t.get(getIdentifier(group, artifact));\n \t}\n \n-\tvoid addManagedDependencies(List<Dependency> dependencies) {\n+\tpublic void addManagedDependencies(List<Dependency> dependencies) {\n \t\tthis.managedDependencies.addAll(dependencies);\n \t\tfor (Dependency dependency : dependencies) {\n \t\t\tthis.managedDependencyByGroupAndArtifact.put(getIdentifier(dependency),",
    "output": "Additionally make package method public"
  },
  {
    "input": "diff --git a/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockitoTestExecutionListener.java b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockitoTestExecutionListener.java\n--- a/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockitoTestExecutionListener.java\n+++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockitoTestExecutionListener.java\n@@ -37,8 +37,9 @@\n  * annotations.\n  *\n  * @author Phillip Webb\n+ * @since 1.4.2\n  */\n-class MockitoTestExecutionListener extends AbstractTestExecutionListener {\n+public class MockitoTestExecutionListener extends AbstractTestExecutionListener {\n \n \t@Override\n \tpublic void prepareTestInstance(TestContext testContext) throws Exception {",
    "output": "Make MockitoTestExecutionListener public"
  },
  {
    "input": "diff --git a/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/orm/jpa/TestDatabaseAutoConfiguration.java b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/orm/jpa/TestDatabaseAutoConfiguration.java\n--- a/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/orm/jpa/TestDatabaseAutoConfiguration.java\n+++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/orm/jpa/TestDatabaseAutoConfiguration.java\n@@ -118,6 +118,7 @@ private BeanDefinitionHolder getDataSourceBeanDefinition(\n \t\t\tif (ObjectUtils.isEmpty(beanNames)) {\n \t\t\t\tlogger.warn(\"No DataSource beans found, \"\n \t\t\t\t\t\t+ \"embedded version will not be used\");\n+\t\t\t\treturn null;\n \t\t\t}\n \t\t\tif (beanNames.length == 1) {\n \t\t\t\tString beanName = beanNames[0];",
    "output": "Add a missing return\nThis commit adds a missing`return` in `getDataSourceBeanDefinition()`."
  },
  {
    "input": "diff --git a/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java b/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java\n--- a/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java\n+++ b/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java\n@@ -207,7 +207,12 @@ public void launchWithRelativePidFolder() throws Exception {\n \t\t\t\tcoloredString(AnsiColor.GREEN, \"Running [\" + extractPid(output) + \"]\"));\n \t\tassertThat(output).has(\n \t\t\t\tcoloredString(AnsiColor.GREEN, \"Stopped [\" + extractPid(output) + \"]\"));\n+\t}\n \n+\t@Test\n+\tpublic void launchWithRelativeLogFolder() throws Exception {\n+\t\tString output = doTest(\"launch-with-relative-log-folder.sh\");\n+\t\tassertThat(output).contains(\"Log written\");\n \t}\n \n \tprivate void doLaunch(String script) throws Exception {",
    "output": "Make relative PID_FOLDER and LOG_FOLDER absolute using jar's directory"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnPropertyCondition.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnPropertyCondition.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnPropertyCondition.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnPropertyCondition.java\n@@ -26,7 +26,9 @@\n import org.springframework.boot.bind.RelaxedPropertyResolver;\n import org.springframework.context.annotation.Condition;\n import org.springframework.context.annotation.ConditionContext;\n+import org.springframework.core.Ordered;\n import org.springframework.core.annotation.AnnotationAttributes;\n+import org.springframework.core.annotation.Order;\n import org.springframework.core.env.PropertyResolver;\n import org.springframework.core.type.AnnotatedTypeMetadata;\n import org.springframework.util.Assert;\n@@ -43,6 +45,7 @@\n  * @since 1.1.0\n  * @see ConditionalOnProperty\n  */\n+@Order(Ordered.HIGHEST_PRECEDENCE + 40)\n class OnPropertyCondition extends SpringBootCondition {\n \n \t@Override",
    "output": "Assign on order to OnPropertyCondition"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnResourceCondition.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnResourceCondition.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnResourceCondition.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnResourceCondition.java\n@@ -22,6 +22,8 @@\n import org.springframework.boot.autoconfigure.condition.ConditionMessage.Style;\n import org.springframework.context.annotation.Condition;\n import org.springframework.context.annotation.ConditionContext;\n+import org.springframework.core.Ordered;\n+import org.springframework.core.annotation.Order;\n import org.springframework.core.io.DefaultResourceLoader;\n import org.springframework.core.io.ResourceLoader;\n import org.springframework.core.type.AnnotatedTypeMetadata;\n@@ -34,6 +36,7 @@\n  * @author Dave Syer\n  * @see ConditionalOnResource\n  */\n+@Order(Ordered.HIGHEST_PRECEDENCE + 20)\n class OnResourceCondition extends SpringBootCondition {\n \n \tprivate final ResourceLoader defaultResourceLoader = new DefaultResourceLoader();",
    "output": "Assign an order to OnResourceCondition"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcManagementContextConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcManagementContextConfiguration.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcManagementContextConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcManagementContextConfiguration.java\n@@ -83,12 +83,7 @@ public EndpointHandlerMapping endpointHandlerMapping() {\n \t\tCorsConfiguration corsConfiguration = getCorsConfiguration(this.corsProperties);\n \t\tEndpointHandlerMapping mapping = new EndpointHandlerMapping(endpoints,\n \t\t\t\tcorsConfiguration);\n-\t\tboolean disabled = this.managementServerProperties.getPort() != null\n-\t\t\t\t&& this.managementServerProperties.getPort() == -1;\n-\t\tmapping.setDisabled(disabled);\n-\t\tif (!disabled) {\n-\t\t\tmapping.setPrefix(this.managementServerProperties.getContextPath());\n-\t\t}\n+\t\tmapping.setPrefix(this.managementServerProperties.getContextPath());\n \t\tif (this.mappingCustomizers != null) {\n \t\t\tfor (EndpointHandlerMappingCustomizer customizer : this.mappingCustomizers) {\n \t\t\t\tcustomizer.customize(mapping);",
    "output": "Drop superfluous disabled check\nRemove EndpointWebMvcManagementContextConfiguration `disabled` logic\nsince the configuration should even be processed when the management\nport is `-1`."
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/jdbc/DatabaseDriver.java b/spring-boot/src/main/java/org/springframework/boot/jdbc/DatabaseDriver.java\n--- a/spring-boot/src/main/java/org/springframework/boot/jdbc/DatabaseDriver.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/jdbc/DatabaseDriver.java\n@@ -38,7 +38,8 @@ public enum DatabaseDriver {\n \t/**\n \t * Apache Derby.\n \t */\n-\tDERBY(\"Apache Derby\", \"org.apache.derby.jdbc.EmbeddedDriver\", null,\n+\tDERBY(\"Apache Derby\", \"org.apache.derby.jdbc.EmbeddedDriver\",\n+\t\t\t\"org.apache.derby.jdbc.EmbeddedXADataSource\",\n \t\t\t\"SELECT 1 FROM SYSIBM.SYSDUMMY1\"),\n \n \t/**",
    "output": "Add XA datasource for Apache Derby"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/diagnostics/analyzer/NoSuchBeanDefinitionFailureAnalyzerTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/diagnostics/analyzer/NoSuchBeanDefinitionFailureAnalyzerTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/diagnostics/analyzer/NoSuchBeanDefinitionFailureAnalyzerTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/diagnostics/analyzer/NoSuchBeanDefinitionFailureAnalyzerTests.java\n@@ -184,15 +184,14 @@ private void assertActionMissingName(FailureAnalysis analysis, String name) {\n \tprivate void assertBeanMethodDisabled(FailureAnalysis analysis, String description,\n \t\t\tClass<?> target, String methodName) {\n \t\tString expected = String.format(\"Bean method '%s' in '%s' not loaded because\",\n-\t\t\t\tmethodName, ClassUtils.getShortName(target), description);\n+\t\t\t\tmethodName, ClassUtils.getShortName(target));\n \t\tassertThat(analysis.getDescription()).contains(expected);\n \t\tassertThat(analysis.getDescription()).contains(description);\n \t}\n \n \tprivate void assertClassDisabled(FailureAnalysis analysis, String description,\n \t\t\tString methodName) {\n-\t\tString expected = String.format(\"Bean method '%s' not loaded because\", methodName,\n-\t\t\t\tdescription);\n+\t\tString expected = String.format(\"Bean method '%s' not loaded because\", methodName);\n \t\tassertThat(analysis.getDescription()).contains(expected);\n \t\tassertThat(analysis.getDescription()).contains(description);\n \t}",
    "output": "Remove unused parameters in String.format()"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/diagnostics/analyzer/NoSuchBeanDefinitionFailureAnalyzerTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/diagnostics/analyzer/NoSuchBeanDefinitionFailureAnalyzerTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/diagnostics/analyzer/NoSuchBeanDefinitionFailureAnalyzerTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/diagnostics/analyzer/NoSuchBeanDefinitionFailureAnalyzerTests.java\n@@ -184,15 +184,14 @@ private void assertActionMissingName(FailureAnalysis analysis, String name) {\n \tprivate void assertBeanMethodDisabled(FailureAnalysis analysis, String description,\n \t\t\tClass<?> target, String methodName) {\n \t\tString expected = String.format(\"Bean method '%s' in '%s' not loaded because\",\n-\t\t\t\tmethodName, ClassUtils.getShortName(target), description);\n+\t\t\t\tmethodName, ClassUtils.getShortName(target));\n \t\tassertThat(analysis.getDescription()).contains(expected);\n \t\tassertThat(analysis.getDescription()).contains(description);\n \t}\n \n \tprivate void assertClassDisabled(FailureAnalysis analysis, String description,\n \t\t\tString methodName) {\n-\t\tString expected = String.format(\"Bean method '%s' not loaded because\", methodName,\n-\t\t\t\tdescription);\n+\t\tString expected = String.format(\"Bean method '%s' not loaded because\", methodName);\n \t\tassertThat(analysis.getDescription()).contains(expected);\n \t\tassertThat(analysis.getDescription()).contains(description);\n \t}",
    "output": "Remove unused parameters in String.format()"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java\n@@ -196,6 +196,7 @@ public void setBeanFactory(BeanFactory beanFactory) throws BeansException {\n \t}\n \n \t@Override\n+\t@Deprecated\n \tpublic void setResourceLoader(ResourceLoader resourceLoader) {\n \t\tthis.resourceLoader = resourceLoader;\n \t}",
    "output": "Deprecate ResourceLoaderAware callback"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/jest/JestAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/jest/JestAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/jest/JestAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/jest/JestAutoConfiguration.java\n@@ -56,7 +56,7 @@ public JestAutoConfiguration(JestProperties properties,\n \t\tthis.gsonProvider = gsonProvider;\n \t}\n \n-\t@Bean\n+\t@Bean(destroyMethod = \"shutdownClient\")\n \t@ConditionalOnMissingBean\n \tpublic JestClient jestClient() {\n \t\tJestClientFactory factory = new JestClientFactory();",
    "output": "Close JestClient on shutdown"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/transaction/jta/NarayanaJtaConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/transaction/jta/NarayanaJtaConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/transaction/jta/NarayanaJtaConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/transaction/jta/NarayanaJtaConfiguration.java\n@@ -23,6 +23,7 @@\n import javax.transaction.UserTransaction;\n \n import com.arjuna.ats.jbossatx.jta.RecoveryManagerService;\n+import org.jboss.tm.XAResourceRecoveryRegistry;\n \n import org.springframework.boot.ApplicationHome;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n@@ -50,7 +51,7 @@\n  */\n @Configuration\n @ConditionalOnClass({ JtaTransactionManager.class,\n-\t\tcom.arjuna.ats.jta.UserTransaction.class })\n+\t\tcom.arjuna.ats.jta.UserTransaction.class, XAResourceRecoveryRegistry.class })\n @ConditionalOnMissingBean(PlatformTransactionManager.class)\n public class NarayanaJtaConfiguration {\n ",
    "output": "Make auto-config for Narayana back off when Transaction SPI not on classpath"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/test/java/org/springframework/boot/cli/SampleIntegrationTests.java b/spring-boot-cli/src/test/java/org/springframework/boot/cli/SampleIntegrationTests.java\n--- a/spring-boot-cli/src/test/java/org/springframework/boot/cli/SampleIntegrationTests.java\n+++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/SampleIntegrationTests.java\n@@ -145,7 +145,7 @@ public void txSample() throws Exception {\n \t@Test\n \tpublic void jmsSample() throws Exception {\n \t\tString output = this.cli.run(\"jms.groovy\");\n-\t\tassertThat(output).contains(\"Received Greetings from Spring Boot via HornetQ\");\n+\t\tassertThat(output).contains(\"Received Greetings from Spring Boot via Artemis\");\n \t}\n \n \t@Test",
    "output": "Upgrade samples to use Artemis in place of HornetQ"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CaffeineCacheConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CaffeineCacheConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CaffeineCacheConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CaffeineCacheConfiguration.java\n@@ -68,7 +68,7 @@ class CaffeineCacheConfiguration {\n \t}\n \n \t@Bean\n-\tpublic CaffeineCacheManager caffeineCacheManager() {\n+\tpublic CaffeineCacheManager cacheManager() {\n \t\tCaffeineCacheManager cacheManager = createCacheManager();\n \t\tList<String> cacheNames = this.cacheProperties.getCacheNames();\n \t\tif (!CollectionUtils.isEmpty(cacheNames)) {",
    "output": "Harmonize Caffeine CacheManager bean name"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-configuration-metadata/src/main/java/org/springframework/boot/configurationmetadata/ConfigurationMetadataProperty.java b/spring-boot-tools/spring-boot-configuration-metadata/src/main/java/org/springframework/boot/configurationmetadata/ConfigurationMetadataProperty.java\n--- a/spring-boot-tools/spring-boot-configuration-metadata/src/main/java/org/springframework/boot/configurationmetadata/ConfigurationMetadataProperty.java\n+++ b/spring-boot-tools/spring-boot-configuration-metadata/src/main/java/org/springframework/boot/configurationmetadata/ConfigurationMetadataProperty.java\n@@ -17,7 +17,6 @@\n package org.springframework.boot.configurationmetadata;\n \n import java.io.Serializable;\n-import java.util.List;\n \n /**\n  * Define a configuration property. Each property is fully identified by its",
    "output": "Fix checkstyle rule"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-hypermedia-jpa/src/test/java/sample/hypermedia/jpa/SampleHypermediaJpaApplicationIntegrationTests.java b/spring-boot-samples/spring-boot-sample-hypermedia-jpa/src/test/java/sample/hypermedia/jpa/SampleHypermediaJpaApplicationIntegrationTests.java\n--- a/spring-boot-samples/spring-boot-sample-hypermedia-jpa/src/test/java/sample/hypermedia/jpa/SampleHypermediaJpaApplicationIntegrationTests.java\n+++ b/spring-boot-samples/spring-boot-sample-hypermedia-jpa/src/test/java/sample/hypermedia/jpa/SampleHypermediaJpaApplicationIntegrationTests.java\n@@ -83,7 +83,7 @@ public void docs() throws Exception {\n \tpublic void browser() throws Exception {\n \t\tMvcResult response = this.mockMvc.perform(get(\"/\").accept(MediaType.TEXT_HTML))\n \t\t\t\t.andExpect(status().isFound()).andReturn();\n-\t\tassertEquals(\"/browser/index.html#\",\n+\t\tassertEquals(\"http://localhost/browser/index.html#/\",\n \t\t\t\tresponse.getResponse().getHeaders(\"location\").get(0));\n \t}\n ",
    "output": "Fix location url in test"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/TomcatDataSourceConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/TomcatDataSourceConfigurationTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/TomcatDataSourceConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/TomcatDataSourceConfigurationTests.java\n@@ -123,7 +123,7 @@ public void testDataSourceDefaultsPreserved() throws Exception {\n \t\tassertEquals(5000, ds.getTimeBetweenEvictionRunsMillis());\n \t\tassertEquals(60000, ds.getMinEvictableIdleTimeMillis());\n \t\tassertEquals(30000, ds.getMaxWait());\n-\t\tassertEquals(30000L, ds.getValidationInterval());\n+\t\tassertEquals(3000L, ds.getValidationInterval());\n \t}\n \n \t@SuppressWarnings(\"unchecked\")",
    "output": "Upgrade to Tomcat 8.0.37"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/DefaultApplicationArguments.java b/spring-boot/src/main/java/org/springframework/boot/DefaultApplicationArguments.java\n--- a/spring-boot/src/main/java/org/springframework/boot/DefaultApplicationArguments.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/DefaultApplicationArguments.java\n@@ -26,17 +26,18 @@\n import org.springframework.util.Assert;\n \n /**\n- * Default internal implementation of {@link ApplicationArguments}.\n+ * Default implementation of {@link ApplicationArguments}.\n  *\n  * @author Phillip Webb\n+ * @since 1.4.1\n  */\n-class DefaultApplicationArguments implements ApplicationArguments {\n+public class DefaultApplicationArguments implements ApplicationArguments {\n \n \tprivate final Source source;\n \n \tprivate final String[] args;\n \n-\tDefaultApplicationArguments(String[] args) {\n+\tpublic DefaultApplicationArguments(String[] args) {\n \t\tAssert.notNull(args, \"Args must not be null\");\n \t\tthis.source = new Source(args);\n \t\tthis.args = args;",
    "output": "Make DefaultApplicationArguments public"
  },
  {
    "input": "diff --git a/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java b/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java\n--- a/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java\n+++ b/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java\n@@ -233,7 +233,7 @@ public void onNext(Frame item) {\n \n \tprivate DockerClient createClient() {\n \t\tDockerClientConfig config = DockerClientConfig.createDefaultConfigBuilder()\n-\t\t\t\t.build();\n+\t\t\t\t.withVersion(\"1.19\").build();\n \t\tDockerClient docker = DockerClientBuilder.getInstance(config)\n \t\t\t\t.withDockerCmdExecFactory(this.commandExecFactory).build();\n \t\treturn docker;",
    "output": "Upgrade launch script integration tests to work with Docker 1.12 (I hope)"
  },
  {
    "input": "diff --git a/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/orm/jpa/TestDatabaseAutoConfiguration.java b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/orm/jpa/TestDatabaseAutoConfiguration.java\n--- a/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/orm/jpa/TestDatabaseAutoConfiguration.java\n+++ b/spring-boot-test-autoconfigure/src/main/java/org/springframework/boot/test/autoconfigure/orm/jpa/TestDatabaseAutoConfiguration.java\n@@ -186,6 +186,10 @@ public EmbeddedDatabase getEmbeddedDatabase() {\n \t\t\tif (EmbeddedDatabaseConnection.NONE.equals(connection)) {\n \t\t\t\tconnection = EmbeddedDatabaseConnection.get(getClass().getClassLoader());\n \t\t\t}\n+\t\t\tAssert.state(connection != EmbeddedDatabaseConnection.NONE,\n+\t\t\t\t\t\"Cannot determine embedded database for tests. If you want \"\n+\t\t\t\t\t\t\t+ \"an embedded database please put a supported one \"\n+\t\t\t\t\t\t\t+ \"on the classpath.\");\n \t\t\treturn new EmbeddedDatabaseBuilder().setType(connection.getType()).build();\n \t\t}\n ",
    "output": "Improve @AutoConfigureTestDatabase failure message"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/run/SpringApplicationRunner.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/run/SpringApplicationRunner.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/run/SpringApplicationRunner.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/run/SpringApplicationRunner.java\n@@ -80,7 +80,7 @@ else if (level <= Level.FINE.intValue()) {\n \t\t\tSystem.setProperty(\"debug\", \"true\");\n \t\t}\n \t\telse if (level == Level.OFF.intValue()) {\n-\t\t\tSystem.setProperty(\"spring.main.showBanner\", \"false\");\n+\t\t\tSystem.setProperty(\"spring.main.banner-mode\", \"OFF\");\n \t\t\tSystem.setProperty(\"logging.level.ROOT\", \"OFF\");\n \t\t}\n \t}",
    "output": "Fix banner property used in \"quiet\" mode"
  },
  {
    "input": "diff --git a/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/orm/jpa/AutoConfigureTestDatabaseWithNoDatabaseIntegrationTests.java b/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/orm/jpa/AutoConfigureTestDatabaseWithNoDatabaseIntegrationTests.java\n--- a/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/orm/jpa/AutoConfigureTestDatabaseWithNoDatabaseIntegrationTests.java\n+++ b/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/orm/jpa/AutoConfigureTestDatabaseWithNoDatabaseIntegrationTests.java\n@@ -16,6 +16,8 @@\n \n package org.springframework.boot.test.autoconfigure.orm.jpa;\n \n+import javax.sql.DataSource;\n+\n import org.junit.Test;\n import org.junit.runner.RunWith;\n \n@@ -42,6 +44,7 @@ public class AutoConfigureTestDatabaseWithNoDatabaseIntegrationTests {\n \tpublic void testContextLoades() throws Exception {\n \t\t// gh-6897\n \t\tassertThat(this.context).isNotNull();\n+\t\tassertThat(this.context.getBeanNamesForType(DataSource.class)).isNotEmpty();\n \t}\n \n \t@TestConfiguration",
    "output": "Fix @AutoConfigureTestDatabase imports\nUpdate `@AutoConfigureTestDatabase` so that it always imports\n`DataSourceAutoConfiguration`. Prior to this commit the annotation\ncould only be applied if something else also imported DataSource\nauto-configuration."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/TomcatDataSourceConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/TomcatDataSourceConfigurationTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/TomcatDataSourceConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/TomcatDataSourceConfigurationTests.java\n@@ -126,7 +126,7 @@ public void testDataSourceDefaultsPreserved() throws Exception {\n \t\tassertThat(ds.getTimeBetweenEvictionRunsMillis()).isEqualTo(5000);\n \t\tassertThat(ds.getMinEvictableIdleTimeMillis()).isEqualTo(60000);\n \t\tassertThat(ds.getMaxWait()).isEqualTo(30000);\n-\t\tassertThat(ds.getValidationInterval()).isEqualTo(30000L);\n+\t\tassertThat(ds.getValidationInterval()).isEqualTo(3000L);\n \t}\n \n \t@SuppressWarnings(\"unchecked\")",
    "output": "Fix failing test following Tomcat upgrade\nTomcat 8.5.5 has change the default value of `validationInterval` to\n3000. See https://bz.apache.org/bugzilla/show_bug.cgi?id=59923 for\ndetails."
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/JmsHealthIndicatorTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/JmsHealthIndicatorTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/JmsHealthIndicatorTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/JmsHealthIndicatorTests.java\n@@ -22,10 +22,10 @@\n import javax.jms.JMSException;\n \n import org.junit.Test;\n-import org.mockito.Mockito;\n \n import static org.junit.Assert.assertEquals;\n import static org.mockito.BDDMockito.given;\n+import static org.mockito.BDDMockito.willThrow;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n@@ -86,8 +86,8 @@ public void jmsBrokerUsesFailover() throws JMSException {\n \t\tgiven(connectionMetaData.getJMSProviderName()).willReturn(\"JMS test provider\");\n \t\tConnection connection = mock(Connection.class);\n \t\tgiven(connection.getMetaData()).willReturn(connectionMetaData);\n-\t\tMockito.doThrow(new JMSException(\"Could not start\", \"123\"))\n-\t\t\t\t.when(connection).start();\n+\t\twillThrow(new JMSException(\"Could not start\", \"123\"))\n+\t\t\t\t.given(connection).start();\n \t\tgiven(connectionFactory.createConnection())\n \t\t\t\t.willReturn(connection);\n \t\tJmsHealthIndicator indicator = new JmsHealthIndicator(connectionFactory);",
    "output": "Use BDD mockito"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/LogFileMvcEndpoint.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/LogFileMvcEndpoint.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/LogFileMvcEndpoint.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/LogFileMvcEndpoint.java\n@@ -106,6 +106,7 @@ private static class Handler extends ResourceHttpRequestHandler {\n \n \t\tHandler(Resource resource) {\n \t\t\tthis.resource = resource;\n+\t\t\tgetLocations().add(resource);\n \t\t\ttry {\n \t\t\t\tafterPropertiesSet();\n \t\t\t}\n@@ -114,6 +115,11 @@ private static class Handler extends ResourceHttpRequestHandler {\n \t\t\t}\n \t\t}\n \n+\t\t@Override\n+\t\tprotected void initAllowedLocations() {\n+\t\t\tthis.getLocations().clear();\n+\t\t}\n+\n \t\t@Override\n \t\tprotected Resource getResource(HttpServletRequest request) throws IOException {\n \t\t\treturn this.resource;",
    "output": "Prevent erroneous \"empty locations\" log warnings\nUpdate our `ResourceHttpRequestHandler` subclass so that the following\nwarning is no longer displayed:\n\"Locations list is empty. No resources will be served unless a\ncustom ResourceResolver is configured as an alternative to\nPathResourceResolver.\""
  },
  {
    "input": "diff --git a/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java\n--- a/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java\n+++ b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java\n@@ -54,8 +54,8 @@ public class WarPackagingTests {\n \t\t\t\t\t\"jetty-server-\", \"jetty-security-\", \"jetty-servlet-\",\n \t\t\t\t\t\"jetty-servlets\", \"jetty-webapp-\", \"websocket-api\",\n \t\t\t\t\t\"javax.annotation-api\", \"jetty-plus\", \"javax-websocket-server-impl-\",\n-\t\t\t\t\t\"asm-\", \"javax.websocket-api-\", \"asm-tree-\", \"asm-commons-\",\n-\t\t\t\t\t\"websocket-common-\", \"jetty-annotations-\",\n+\t\t\t\t\t\"apache-el\", \"asm-\", \"javax.websocket-api-\", \"asm-tree-\",\n+\t\t\t\t\t\"asm-commons-\", \"websocket-common-\", \"jetty-annotations-\",\n \t\t\t\t\t\"javax-websocket-client-impl-\", \"websocket-client-\",\n \t\t\t\t\t\"websocket-server-\", \"jetty-xml-\", \"websocket-servlet-\"));\n ",
    "output": "Fix broken Gradle test\nUpdate test broken by recent Jetty changes."
  },
  {
    "input": "diff --git a/spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/ResetMocksTestExecutionListenerTests.java b/spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/ResetMocksTestExecutionListenerTests.java\n--- a/spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/ResetMocksTestExecutionListenerTests.java\n+++ b/spring-boot-test/src/test/java/org/springframework/boot/test/mock/mockito/ResetMocksTestExecutionListenerTests.java\n@@ -75,16 +75,16 @@ public ExampleService before(MockitoBeans mockedBeans) {\n \n \t\t@Bean\n \t\tpublic ExampleService after(MockitoBeans mockedBeans) {\n-\t\t\tExampleService mock = mock(ExampleService.class, MockReset.before());\n+\t\t\tExampleService mock = mock(ExampleService.class, MockReset.after());\n \t\t\tmockedBeans.add(mock);\n \t\t\treturn mock;\n \t\t}\n \n \t\t@Bean\n \t\tpublic ExampleService none(MockitoBeans mockedBeans) {\n-\t\t\tExampleService mock = mock(ExampleService.class, MockReset.before());\n+\t\t\tExampleService mock = mock(ExampleService.class);\n \t\t\tmockedBeans.add(mock);\n-\t\t\treturn mock(ExampleService.class);\n+\t\t\treturn mock;\n \t\t}\n \n \t\t@Bean",
    "output": "Fix ResetMocksTestExecutionListenerTests\nAlign test implementation with names."
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletComponentRegisteringPostProcessor.java b/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletComponentRegisteringPostProcessor.java\n--- a/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletComponentRegisteringPostProcessor.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletComponentRegisteringPostProcessor.java\n@@ -95,6 +95,8 @@ private boolean isRunningInEmbeddedContainer() {\n \tprivate ClassPathScanningCandidateComponentProvider createComponentProvider() {\n \t\tClassPathScanningCandidateComponentProvider componentProvider = new ClassPathScanningCandidateComponentProvider(\n \t\t\t\tfalse);\n+\t\tcomponentProvider.setEnvironment(this.applicationContext.getEnvironment());\n+\t\tcomponentProvider.setResourceLoader(this.applicationContext);\n \t\tfor (ServletComponentHandler handler : HANDLERS) {\n \t\t\tcomponentProvider.addIncludeFilter(handler.getTypeFilter());\n \t\t}",
    "output": "Fix ClassPathScanningCandidateComponentProvider init"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnMissingBeanTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnMissingBeanTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnMissingBeanTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnMissingBeanTests.java\n@@ -282,7 +282,7 @@ public void currentContextIsIgnoredWhenUsingParentsStrategy() {\n \t\t\t\tOnBeanInParentsConfiguration.class);\n \t\tchild.setParent(this.context);\n \t\tchild.refresh();\n-\t\tassertThat(child.getBeansOfType(ExampleBean.class)).hasSize(1);\n+\t\tassertThat(child.getBeansOfType(ExampleBean.class)).hasSize(2);\n \t}\n \n \t@Configuration",
    "output": "Polishing\nFix mistake introduced during forward merge"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-logback/src/main/java/sample/logback/SampleLogbackApplication.java b/spring-boot-samples/spring-boot-sample-logback/src/main/java/sample/logback/SampleLogbackApplication.java\n--- a/spring-boot-samples/spring-boot-sample-logback/src/main/java/sample/logback/SampleLogbackApplication.java\n+++ b/spring-boot-samples/spring-boot-sample-logback/src/main/java/sample/logback/SampleLogbackApplication.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2015 the original author or authors.\n+ * Copyright 2012-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -37,7 +37,7 @@ public void logSomething() {\n \t}\n \n \tpublic static void main(String[] args) throws Exception {\n-\t\tSpringApplication.run(SampleLogbackApplication.class, args);\n+\t\tSpringApplication.run(SampleLogbackApplication.class, args).close();\n \t}\n \n }",
    "output": "Close context to ensure that logging system is cleaned up"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedNames.java b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedNames.java\n--- a/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedNames.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedNames.java\n@@ -200,23 +200,29 @@ public String apply(String value) {\n \n \t\t};\n \n+\t\tprivate static final char[] SUFFIXES = new char[] { '_', '-', '.' };\n+\n \t\tpublic abstract String apply(String value);\n \n \t\tprivate static String separatedToCamelCase(String value,\n \t\t\t\tboolean caseInsensitive) {\n+\t\t\tif (value.length() == 0) {\n+\t\t\t\treturn value;\n+\t\t\t}\n \t\t\tStringBuilder builder = new StringBuilder();\n \t\t\tfor (String field : SEPARATED_TO_CAMEL_CASE_PATTERN.split(value)) {\n \t\t\t\tfield = (caseInsensitive ? field.toLowerCase() : field);\n \t\t\t\tbuilder.append(\n \t\t\t\t\t\tbuilder.length() == 0 ? field : StringUtils.capitalize(field));\n \t\t\t}\n-\t\t\tfor (String suffix : new String[] { \"_\", \"-\", \".\" }) {\n-\t\t\t\tif (value.endsWith(suffix)) {\n+\t\t\tchar lastChar = value.charAt(value.length() - 1);\n+\t\t\tfor (char suffix : SUFFIXES) {\n+\t\t\t\tif (lastChar == suffix) {\n \t\t\t\t\tbuilder.append(suffix);\n+\t\t\t\t\tbreak;\n \t\t\t\t}\n \t\t\t}\n \t\t\treturn builder.toString();\n-\n \t\t}\n \t}\n ",
    "output": "Tweak performance of RelaxedNames.separatedToCamelCase"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedContext.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedContext.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedContext.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedContext.java\n@@ -19,6 +19,7 @@\n import org.apache.catalina.Container;\n import org.apache.catalina.Manager;\n import org.apache.catalina.core.StandardContext;\n+import org.apache.catalina.session.ManagerBase;\n \n import org.springframework.util.ClassUtils;\n import org.springframework.util.ReflectionUtils;\n@@ -52,8 +53,8 @@ public boolean loadOnStartup(Container[] children) {\n \n \t@Override\n \tpublic void setManager(Manager manager) {\n-\t\tif (manager != null) {\n-\t\t\tmanager.setSessionIdGenerator(new LazySessionIdGenerator());\n+\t\tif (manager instanceof ManagerBase) {\n+\t\t\t((ManagerBase) manager).setSessionIdGenerator(new LazySessionIdGenerator());\n \t\t}\n \t\tsuper.setManager(manager);\n \t}",
    "output": "Fix configuration of session ID generator on Tomcat 7"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/LaunchedURLClassLoaderTests.java b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/LaunchedURLClassLoaderTests.java\n--- a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/LaunchedURLClassLoaderTests.java\n+++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/LaunchedURLClassLoaderTests.java\n@@ -97,8 +97,8 @@ public void resolveFromNestedWhileThreadIsInterrupted() throws Exception {\n \t\ttry {\n \t\t\tThread.currentThread().interrupt();\n \t\t\tURL resource = loader.getResource(\"nested.jar!/3.dat\");\n-\t\t\tassertThat(resource.toString(), equalTo(url + \"nested.jar!/3.dat\"));\n-\t\t\tassertThat(resource.openConnection().getInputStream().read(), equalTo(3));\n+\t\t\tassertThat(resource.toString()).isEqualTo(url + \"nested.jar!/3.dat\");\n+\t\t\tassertThat(resource.openConnection().getInputStream().read()).isEqualTo(3);\n \t\t}\n \t\tfinally {\n \t\t\tThread.interrupted();",
    "output": "Polising\nFix botched merge"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/ImageBanner.java b/spring-boot/src/main/java/org/springframework/boot/ImageBanner.java\n--- a/spring-boot/src/main/java/org/springframework/boot/ImageBanner.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/ImageBanner.java\n@@ -75,9 +75,10 @@ public void printBanner(Environment environment, Class<?> sourceClass,\n \t\t\tSystem.setProperty(\"java.awt.headless\", \"true\");\n \t\t\tprintBanner(environment, out);\n \t\t}\n-\t\tcatch (Exception ex) {\n+\t\tcatch (Throwable ex) {\n \t\t\tlog.warn(\"Image banner not printable: \" + this.image + \" (\" + ex.getClass()\n-\t\t\t\t\t+ \": '\" + ex.getMessage() + \"')\", ex);\n+\t\t\t\t\t+ \": '\" + ex.getMessage() + \"')\");\n+\t\t\tlog.debug(\"Image banner printing failure\", ex);\n \t\t}\n \t\tfinally {\n \t\t\tif (headless == null) {",
    "output": "Ensure that AWTError from image banner does not prevent app starting"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/statsd/StatsdMetricWriter.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/statsd/StatsdMetricWriter.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/statsd/StatsdMetricWriter.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/statsd/StatsdMetricWriter.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2015 the original author or authors.\n+ * Copyright 2012-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -64,7 +64,7 @@ public StatsdMetricWriter(String host, int port) {\n \t */\n \tpublic StatsdMetricWriter(String prefix, String host, int port) {\n \t\tthis(new NonBlockingStatsDClient(trimPrefix(prefix), host, port,\n-\t\t\tnew LoggingStatsdErrorHandler()));\n+\t\t\t\tnew LoggingStatsdErrorHandler()));\n \t}\n \n \t/**",
    "output": "Polish “Allow injection of StatsDClient into StatsdMetricWriter”"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/RedisSessionConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/RedisSessionConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/RedisSessionConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/RedisSessionConfiguration.java\n@@ -18,8 +18,8 @@\n \n import javax.annotation.PostConstruct;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n \n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n@@ -45,8 +45,7 @@\n @Conditional(SessionCondition.class)\n class RedisSessionConfiguration {\n \n-\tprivate static final Logger logger = LoggerFactory\n-\t\t\t.getLogger(RedisSessionConfiguration.class);\n+\tprivate static final Log logger = LogFactory.getLog(RedisSessionConfiguration.class);\n \n \t@Configuration\n \tpublic static class SpringBootRedisHttpSessionConfiguration",
    "output": "Fix wrong use of slf4j"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/LogFileMvcEndpoint.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/LogFileMvcEndpoint.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/LogFileMvcEndpoint.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/LogFileMvcEndpoint.java\n@@ -147,6 +147,12 @@ private static class Handler extends ResourceHttpRequestHandler {\n \n \t\tHandler(Resource resource) {\n \t\t\tthis.resource = resource;\n+\t\t\ttry {\n+\t\t\t\tafterPropertiesSet();\n+\t\t\t}\n+\t\t\tcatch (Exception ex) {\n+\t\t\t\tthrow new IllegalStateException(ex);\n+\t\t\t}\n \t\t}\n \n \t\t@Override",
    "output": "Call afterProperties set in LogFileMvcEndpoint\nCall afterPropertiesSet on the delegate `ResourceHttpRequestHandler`\nto prevent an NPE. This change is required for compatibility with\nSpring Framework 4.3 following SPR-13834."
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitializrService.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitializrService.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitializrService.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitializrService.java\n@@ -76,7 +76,7 @@ class InitializrService {\n \n \tprotected CloseableHttpClient getHttp() {\n \t\tif (this.http == null) {\n-\t\t\tthis.http = HttpClientBuilder.create().build();\n+\t\t\tthis.http = HttpClientBuilder.create().useSystemProperties().build();\n \t\t}\n \t\treturn this.http;\n \t}",
    "output": "Apply sytem properties on HttpClient"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitializrService.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitializrService.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitializrService.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitializrService.java\n@@ -76,7 +76,7 @@ class InitializrService {\n \n \tprotected CloseableHttpClient getHttp() {\n \t\tif (this.http == null) {\n-\t\t\tthis.http = HttpClientBuilder.create().build();\n+\t\t\tthis.http = HttpClientBuilder.create().useSystemProperties().build();\n \t\t}\n \t\treturn this.http;\n \t}",
    "output": "Apply sytem properties on HttpClient"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/JdbcSessionDatabaseInitializer.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/JdbcSessionDatabaseInitializer.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/JdbcSessionDatabaseInitializer.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/JdbcSessionDatabaseInitializer.java\n@@ -45,7 +45,6 @@ public class JdbcSessionDatabaseInitializer {\n \t\taliases.put(\"apache derby\", \"derby\");\n \t\taliases.put(\"hsql database engine\", \"hsqldb\");\n \t\taliases.put(\"microsoft sql server\", \"sqlserver\");\n-\t\taliases.put(\"postgres\", \"postgresql\");\n \t\tALIASES = Collections.unmodifiableMap(aliases);\n \t}\n ",
    "output": "Remove useless postgresql alias"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/JdbcSessionDatabaseInitializer.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/JdbcSessionDatabaseInitializer.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/JdbcSessionDatabaseInitializer.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/JdbcSessionDatabaseInitializer.java\n@@ -42,7 +42,9 @@ public class JdbcSessionDatabaseInitializer {\n \n \tstatic {\n \t\tMap<String, String> aliases = new HashMap<String, String>();\n-\t\taliases.put(\"hsql\", \"hsqldb\");\n+\t\taliases.put(\"apache derby\", \"derby\");\n+\t\taliases.put(\"hsql database engine\", \"hsqldb\");\n+\t\taliases.put(\"microsoft sql server\", \"sqlserver\");\n \t\taliases.put(\"postgres\", \"postgresql\");\n \t\tALIASES = Collections.unmodifiableMap(aliases);\n \t}",
    "output": "Polish contribution\nFix aliases for database names in `JdbcSessionDatabaseInitializer`"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/JdbcSessionDatabaseInitializer.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/JdbcSessionDatabaseInitializer.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/JdbcSessionDatabaseInitializer.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/session/JdbcSessionDatabaseInitializer.java\n@@ -42,8 +42,9 @@ public class JdbcSessionDatabaseInitializer {\n \n \tstatic {\n \t\tMap<String, String> aliases = new HashMap<String, String>();\n-\t\taliases.put(\"hsql\", \"hsqldb\");\n-\t\taliases.put(\"postgres\", \"postgresql\");\n+\t\taliases.put(\"apache derby\", \"derby\");\n+\t\taliases.put(\"hsql database engine\", \"hsqldb\");\n+\t\taliases.put(\"microsoft sql server\", \"sqlserver\");\n \t\tALIASES = Collections.unmodifiableMap(aliases);\n \t}\n ",
    "output": "Fix aliases for database names in `JdbcSessionDatabaseInitializer`"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/JdbcTemplateAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/JdbcTemplateAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/JdbcTemplateAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/JdbcTemplateAutoConfiguration.java\n@@ -41,7 +41,7 @@\n  * @since 1.4.0\n  */\n @Configuration\n-@ConditionalOnClass(DataSource.class)\n+@ConditionalOnClass({ DataSource.class, JdbcTemplate.class })\n @ConditionalOnSingleCandidate(DataSource.class)\n @AutoConfigureAfter(DataSourceAutoConfiguration.class)\n public class JdbcTemplateAutoConfiguration {",
    "output": "Add missing type condition on JdbcTemplateAutoConfiguration"
  },
  {
    "input": "diff --git a/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java b/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java\n--- a/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java\n+++ b/spring-boot-test/src/main/java/org/springframework/boot/test/json/JsonContentAssert.java\n@@ -30,6 +30,7 @@\n import org.assertj.core.api.AbstractObjectAssert;\n import org.assertj.core.api.Assert;\n import org.assertj.core.api.Assertions;\n+import org.assertj.core.api.ObjectAssert;\n import org.skyscreamer.jsonassert.JSONCompare;\n import org.skyscreamer.jsonassert.JSONCompareMode;\n import org.skyscreamer.jsonassert.JSONCompareResult;\n@@ -935,7 +936,7 @@ public AbstractBooleanAssert<?> extractingJsonPathBooleanValue(\n \t * @throws AssertionError if the path is not valid or does not result in an array\n \t */\n \t@SuppressWarnings(\"unchecked\")\n-\tpublic AbstractListAssert<?, ?, Object> extractingJsonPathArrayValue(\n+\tpublic AbstractListAssert<?, ?, Object, ObjectAssert<Object>> extractingJsonPathArrayValue(\n \t\t\tCharSequence expression, Object... args) {\n \t\treturn Assertions.assertThat(\n \t\t\t\textractingJsonPathValue(expression, args, List.class, \"an array\"));",
    "output": "Upgrade to AssertJ 2.5.0"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/AbstractMvcEndpoint.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/AbstractMvcEndpoint.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/AbstractMvcEndpoint.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/AbstractMvcEndpoint.java\n@@ -42,7 +42,7 @@ public abstract class AbstractMvcEndpoint extends WebMvcConfigurerAdapter\n \t * Endpoint URL path.\n \t */\n \t@NotNull\n-\t@Pattern(regexp = \"/.*|^$\", message = \"Path must start with /\")\n+\t@Pattern(regexp = \"/.*|^$\", message = \"Path must start with / or be empty\")\n \tprivate String path;\n \n \t/**",
    "output": "Align message with regex for AbstractMvcEndpoint.path"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/AbstractMvcEndpoint.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/AbstractMvcEndpoint.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/AbstractMvcEndpoint.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/AbstractMvcEndpoint.java\n@@ -42,7 +42,7 @@ public abstract class AbstractMvcEndpoint extends WebMvcConfigurerAdapter\n \t * Endpoint URL path.\n \t */\n \t@NotNull\n-\t@Pattern(regexp = \"/.*|^$\", message = \"Path must start with /\")\n+\t@Pattern(regexp = \"/.*|^$\", message = \"Path must start with / or be empty\")\n \tprivate String path;\n \n \t/**",
    "output": "Align message with regex for AbstractMvcEndpoint.path"
  },
  {
    "input": "diff --git a/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/LimitedEnvironmentEndpoint.java b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/LimitedEnvironmentEndpoint.java\n--- a/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/LimitedEnvironmentEndpoint.java\n+++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/LimitedEnvironmentEndpoint.java\n@@ -67,7 +67,8 @@ public class LimitedEnvironmentEndpoint extends EnvironmentEndpoint {\n \t\tsystemEnvironment.add(\"DISPLAY\");\n \t\tsystemEnvironment.add(\"LOGNAME\");\n \t\tincludes.put(\"systemEnvironment\", systemEnvironment);\n-\t\tINCLUDES = new LinkedMultiValueMap<>(Collections.unmodifiableMap(includes));\n+\t\tINCLUDES = new LinkedMultiValueMap<String, String>(\n+\t\t\t\tCollections.unmodifiableMap(includes));\n \t}\n \n \t@Override",
    "output": "Fix Java 6 compatibility"
  },
  {
    "input": "diff --git a/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/ChangeableUrls.java b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/ChangeableUrls.java\n--- a/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/ChangeableUrls.java\n+++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/ChangeableUrls.java\n@@ -98,8 +98,8 @@ private static List<URL> getUrlsFromClassPathOfJarManifestIfPossible(URL url) {\n \t\t\t}\n \t\t\tcatch (IOException ex) {\n \t\t\t\tthrow new IllegalStateException(\n-\t\t\t\t\t\t\"Failed to read Class-Path attribute from manifest of jar \"\n-\t\t\t\t\t\t\t\t+ url);\n+\t\t\t\t\t\t\"Failed to read Class-Path attribute from manifest of jar \" + url,\n+\t\t\t\t\t\tex);\n \t\t\t}\n \t\t}\n \t\treturn Collections.<URL>emptyList();",
    "output": "Include cause when throwing exception due to unreadable manifest"
  },
  {
    "input": "diff --git a/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java\n--- a/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java\n+++ b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java\n@@ -46,8 +46,7 @@ public class WarPackagingTests {\n \n \tprivate static final Set<String> TOMCAT_EXPECTED_IN_WEB_INF_LIB_PROVIDED = new HashSet<String>(\n \t\t\tArrays.asList(\"spring-boot-starter-tomcat-\", \"tomcat-embed-core-\",\n-\t\t\t\t\t\"tomcat-embed-el-\", \"tomcat-embed-logging-juli-\",\n-\t\t\t\t\t\"tomcat-embed-websocket-\"));\n+\t\t\t\t\t\"tomcat-embed-el-\", \"tomcat-embed-websocket-\"));\n \n \tprivate static final Set<String> JETTY_EXPECTED_IN_WEB_INF_LIB_PROVIDED = new HashSet<String>(\n \t\t\tArrays.asList(\"spring-boot-starter-jetty-\", \"jetty-continuation\",",
    "output": "Fix broken `tomcat-juli` gradle test\nFix Gradle test broken when `tomcat-juli` was removed."
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java\n@@ -725,11 +725,12 @@ private void callMethod(Object target, String name, Object value, Class<?> type)\n \n \t/**\n \t * {@link LifecycleListener} that stores an empty merged web.xml. This is critical for\n-\t * Jasper to prevent warnings about missing web.xml files and to enable EL.\n+\t * Jasper on Tomcat 7 to prevent warnings about missing web.xml files and to enable\n+\t * EL.\n \t */\n \tprivate static class StoreMergedWebXmlListener implements LifecycleListener {\n \n-\t\tprivate final String MERGED_WEB_XML = org.apache.tomcat.util.scan.Constants.MERGED_WEB_XML;\n+\t\tprivate final String MERGED_WEB_XML = \"org.apache.tomcat.util.scan.MergedWebXml\";\n \n \t\t@Override\n \t\tpublic void lifecycleEvent(LifecycleEvent event) {",
    "output": "Fix deprecation warning"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletComponentScanRegistrar.java b/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletComponentScanRegistrar.java\n--- a/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletComponentScanRegistrar.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletComponentScanRegistrar.java\n@@ -76,8 +76,7 @@ private void addPostProcessor(BeanDefinitionRegistry registry,\n \tprivate Set<String> getPackagesToScan(AnnotationMetadata metadata) {\n \t\tAnnotationAttributes attributes = AnnotationAttributes.fromMap(\n \t\t\t\tmetadata.getAnnotationAttributes(ServletComponentScan.class.getName()));\n-\t\tString[] basePackages = attributes.getAliasedStringArray(\"basePackages\",\n-\t\t\t\tServletComponentScan.class, metadata.getClassName());\n+\t\tString[] basePackages = attributes.getStringArray(\"basePackages\");\n \t\tClass<?>[] basePackageClasses = attributes.getClassArray(\"basePackageClasses\");\n \t\tSet<String> packagesToScan = new LinkedHashSet<String>();\n \t\tpackagesToScan.addAll(Arrays.asList(basePackages));",
    "output": "Refactor from deprecated getAliasedStringArray\nUpdate ServletComponentScanRegistrar to make use of Spring Framework's\nupdated alias support with ASM reading."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/domain/EntityScanPackages.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/domain/EntityScanPackages.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/domain/EntityScanPackages.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/domain/EntityScanPackages.java\n@@ -155,8 +155,7 @@ public void registerBeanDefinitions(AnnotationMetadata metadata,\n \t\tprivate Set<String> getPackagesToScan(AnnotationMetadata metadata) {\n \t\t\tAnnotationAttributes attributes = AnnotationAttributes.fromMap(\n \t\t\t\t\tmetadata.getAnnotationAttributes(EntityScan.class.getName()));\n-\t\t\tString[] basePackages = attributes.getAliasedStringArray(\"basePackages\",\n-\t\t\t\t\tEntityScan.class, metadata.getClassName());\n+\t\t\tString[] basePackages = attributes.getStringArray(\"basePackages\");\n \t\t\tClass<?>[] basePackageClasses = attributes\n \t\t\t\t\t.getClassArray(\"basePackageClasses\");\n \t\t\tSet<String> packagesToScan = new LinkedHashSet<String>();",
    "output": "Refactor from deprecated getAliasedStringArray\nUpdate EntityScanPackages to make use of Spring Framework's updated\nalias support with ASM reading."
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/undertow/UndertowEmbeddedServletContainerFactory.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/undertow/UndertowEmbeddedServletContainerFactory.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/undertow/UndertowEmbeddedServletContainerFactory.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/undertow/UndertowEmbeddedServletContainerFactory.java\n@@ -294,14 +294,17 @@ private KeyManager[] getKeyManagers() {\n \t\t\t}\n \t\t\tKeyStore keyStore = KeyStore.getInstance(keyStoreType);\n \t\t\tURL url = ResourceUtils.getURL(ssl.getKeyStore());\n-\t\t\tkeyStore.load(url.openStream(), ssl.getKeyStorePassword().toCharArray());\n+\t\t\tchar[] keyStorePassword = ssl.getKeyStorePassword() != null\n+\t\t\t\t\t? ssl.getKeyStorePassword().toCharArray()\n+\t\t\t\t\t: null;\n+\t\t\tkeyStore.load(url.openStream(), keyStorePassword);\n \n \t\t\t// Get key manager to provide client credentials.\n \t\t\tKeyManagerFactory keyManagerFactory = KeyManagerFactory\n \t\t\t\t\t.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n \t\t\tchar[] keyPassword = ssl.getKeyPassword() != null\n \t\t\t\t\t? ssl.getKeyPassword().toCharArray()\n-\t\t\t\t\t: ssl.getKeyStorePassword().toCharArray();\n+\t\t\t\t\t: keyStorePassword;\n \t\t\tkeyManagerFactory.init(keyStore, keyPassword);\n \t\t\treturn keyManagerFactory.getKeyManagers();\n \t\t}",
    "output": "Be more defensive about a null password in Undertow SSL"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/plugin/SpringBootPlugin.java b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/plugin/SpringBootPlugin.java\n--- a/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/plugin/SpringBootPlugin.java\n+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/plugin/SpringBootPlugin.java\n@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package org.springframework.boot.gradle;\n+package org.springframework.boot.gradle.plugin;\n \n import org.gradle.api.Action;\n import org.gradle.api.Plugin;\n@@ -23,6 +23,7 @@\n import org.gradle.api.plugins.JavaPlugin;\n import org.gradle.api.tasks.compile.JavaCompile;\n \n+import org.springframework.boot.gradle.SpringBootPluginExtension;\n import org.springframework.boot.gradle.agent.AgentPluginFeatures;\n import org.springframework.boot.gradle.dependencymanagement.DependencyManagementPluginFeatures;\n import org.springframework.boot.gradle.repackage.RepackagePluginFeatures;",
    "output": "Fix spring-boot-gradle-plugin package tangle\nRelocate `SpringBootPlugin` to fix a package tangle."
  },
  {
    "input": "diff --git a/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockDefinition.java b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockDefinition.java\n--- a/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockDefinition.java\n+++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockDefinition.java\n@@ -24,6 +24,7 @@\n import org.mockito.Answers;\n import org.mockito.MockSettings;\n import org.mockito.Mockito;\n+import org.mockito.stubbing.Answer;\n \n import org.springframework.core.style.ToStringCreator;\n import org.springframework.util.Assert;\n@@ -151,11 +152,19 @@ public <T> T createMock(String name) {\n \t\tif (!this.extraInterfaces.isEmpty()) {\n \t\t\tsettings.extraInterfaces(this.extraInterfaces.toArray(new Class<?>[] {}));\n \t\t}\n-\t\tsettings.defaultAnswer(this.answer.get());\n+\t\tsettings.defaultAnswer(getAnswer(this.answer));\n \t\tif (this.serializable) {\n \t\t\tsettings.serializable();\n \t\t}\n \t\treturn (T) Mockito.mock(this.classToMock, settings);\n \t}\n \n+\tprivate Answer<?> getAnswer(Answers answer) {\n+\t\tif (Answer.class.isInstance(answer)) {\n+\t\t\t// With Mockito 2.0 we can directly cast the answer\n+\t\t\treturn (Answer<?>) ((Object) answer);\n+\t\t}\n+\t\treturn answer.get();\n+\t}\n+\n }",
    "output": "Fix compatibility with Mockito 2.0"
  },
  {
    "input": "diff --git a/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockDefinition.java b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockDefinition.java\n--- a/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockDefinition.java\n+++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockDefinition.java\n@@ -24,6 +24,7 @@\n import org.mockito.Answers;\n import org.mockito.MockSettings;\n import org.mockito.Mockito;\n+import org.mockito.stubbing.Answer;\n \n import org.springframework.core.style.ToStringCreator;\n import org.springframework.util.Assert;\n@@ -151,11 +152,19 @@ public <T> T createMock(String name) {\n \t\tif (!this.extraInterfaces.isEmpty()) {\n \t\t\tsettings.extraInterfaces(this.extraInterfaces.toArray(new Class<?>[] {}));\n \t\t}\n-\t\tsettings.defaultAnswer(this.answer.get());\n+\t\tsettings.defaultAnswer(getAnswer(this.answer));\n \t\tif (this.serializable) {\n \t\t\tsettings.serializable();\n \t\t}\n \t\treturn (T) Mockito.mock(this.classToMock, settings);\n \t}\n \n+\tprivate Answer<?> getAnswer(Answers answer) {\n+\t\tif (Answer.class.isInstance(answer)) {\n+\t\t\t// With Mockito 2.0 we can directly cast the answer\n+\t\t\treturn (Answer<?>) ((Object) answer);\n+\t\t}\n+\t\treturn answer.get();\n+\t}\n+\n }",
    "output": "Fix compatibility with Mockito 2.0\nUpdate MockDefinition to only call `Answers.get()` if a direct cast\nisn't possible. This provides compatibility with Mockito 2.0 (currently\n2.0.47-beta) without breaking support for Mockto 1.x."
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java\n@@ -308,8 +308,8 @@ public List<BeanPropertyWriter> changeProperties(SerializationConfig config,\n \t\t}\n \n \t\tprivate boolean isReadable(BeanDescription beanDesc, BeanPropertyWriter writer) {\n-\t\t\tString parentType = beanDesc.getType().getRawClass().getName();\n-\t\t\tString type = writer.getType().getTypeName();\n+\t\t\tClass<?> parentType = beanDesc.getType().getRawClass();\n+\t\t\tClass<?> type = writer.getType().getRawClass();\n \t\t\tAnnotatedMethod setter = findSetter(beanDesc, writer);\n \t\t\t// If there's a setter, we assume it's OK to report on the value,\n \t\t\t// similarly, if there's no setter but the package names match, we assume",
    "output": "Remove accidental usage of Type.getTypeName() which is a Java 8 API"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/artemis/ArtemisAutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/artemis/ArtemisAutoConfigurationTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/artemis/ArtemisAutoConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jms/artemis/ArtemisAutoConfigurationTests.java\n@@ -168,9 +168,9 @@ public void embeddedServerWithDestinations() {\n \t\tDestinationChecker checker = new DestinationChecker(this.context);\n \t\tchecker.checkQueue(\"Queue1\", true);\n \t\tchecker.checkQueue(\"Queue2\", true);\n-\t\tchecker.checkQueue(\"QueueDoesNotExist\", true);\n+\t\tchecker.checkQueue(\"QueueWillNotBeAutoCreated\", true);\n \t\tchecker.checkTopic(\"Topic1\", true);\n-\t\tchecker.checkTopic(\"TopicDoesNotExist\", false);\n+\t\tchecker.checkTopic(\"TopicWillBeAutoCreated\", true);\n \t}\n \n \t@Test",
    "output": "Upgrade to Artemis 1.3.0"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/audit/InMemoryAuditEventRepository.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/audit/InMemoryAuditEventRepository.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/audit/InMemoryAuditEventRepository.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/audit/InMemoryAuditEventRepository.java\n@@ -82,7 +82,7 @@ public List<AuditEvent> find(String principal, Date after) {\n \t@Override\n \tpublic List<AuditEvent> find(String principal, Date after, String type) {\n \t\tLinkedList<AuditEvent> events = new LinkedList<AuditEvent>();\n-\t\tsynchronized (this.events) {\n+\t\tsynchronized (this.monitor) {\n \t\t\tfor (int i = 0; i < this.events.length; i++) {\n \t\t\t\tAuditEvent event = resolveTailEvent(i);\n \t\t\t\tif (event != null && isMatch(principal, after, type, event)) {",
    "output": "Consistently synchronize on this.monitor in InMemoryAuditEventRepository"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n--- a/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n@@ -928,6 +928,15 @@ public void setMainApplicationClass(Class<?> mainApplicationClass) {\n \t\tthis.mainApplicationClass = mainApplicationClass;\n \t}\n \n+\t/**\n+\t * Returns whether this {@link SpringApplication} is running within a web environment.\n+\t * @return {@code true} if running within a web environment, otherwise {@code false}.\n+\t * @see #setWebEnvironment(boolean)\n+\t */\n+\tpublic boolean isWebEnvironment() {\n+\t\treturn this.webEnvironment;\n+\t}\n+\n \t/**\n \t * Sets if this application is running within a web environment. If not specified will\n \t * attempt to deduce the environment based on the classpath.",
    "output": "Add an accessor for webEnvironment to SpringApplication"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n--- a/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n@@ -928,6 +928,15 @@ public void setMainApplicationClass(Class<?> mainApplicationClass) {\n \t\tthis.mainApplicationClass = mainApplicationClass;\n \t}\n \n+\t/**\n+\t * Returns whether this {@link SpringApplication} is running within a web environment.\n+\t * @return {@code true} if running within a web environment, otherwise {@code false}.\n+\t * @see #setWebEnvironment(boolean)\n+\t */\n+\tpublic boolean isWebEnvironment() {\n+\t\treturn this.webEnvironment;\n+\t}\n+\n \t/**\n \t * Sets if this application is running within a web environment. If not specified will\n \t * attempt to deduce the environment based on the classpath.",
    "output": "Add an accessor for webEnvironment to SpringApplication"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java\n@@ -195,13 +195,6 @@ public InternalResourceViewResolver defaultViewResolver() {\n \t\t\treturn resolver;\n \t\t}\n \n-\t\t@Bean\n-\t\t@ConditionalOnMissingBean({ RequestContextListener.class,\n-\t\t\t\tRequestContextFilter.class })\n-\t\tpublic RequestContextFilter requestContextFilter() {\n-\t\t\treturn new OrderedRequestContextFilter();\n-\t\t}\n-\n \t\t@Bean\n \t\t@ConditionalOnBean(View.class)\n \t\t@ConditionalOnMissingBean\n@@ -312,6 +305,13 @@ public void addViewControllers(ViewControllerRegistry registry) {\n \t\t\t}\n \t\t}\n \n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean({ RequestContextListener.class,\n+\t\t\t\tRequestContextFilter.class })\n+\t\tpublic static RequestContextFilter requestContextFilter() {\n+\t\t\treturn new OrderedRequestContextFilter();\n+\t\t}\n+\n \t\t@Configuration\n \t\t@ConditionalOnProperty(value = \"spring.mvc.favicon.enabled\", matchIfMissing = true)\n \t\tpublic static class FaviconConfiguration {",
    "output": "Stop RequestContextFilter initializing config\nChange WebMvcAutoConfigurationAdapter.requestContextFilter() to a static\nmethod so that the configuration class isn't needed when creating it.\nThis helps to prevent early initialization of beans."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/cassandra/CassandraRepositoriesAutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/cassandra/CassandraRepositoriesAutoConfigurationTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/cassandra/CassandraRepositoriesAutoConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/data/cassandra/CassandraRepositoriesAutoConfigurationTests.java\n@@ -87,11 +87,11 @@ public void doesNotTriggerDefaultRepositoryDetectionIfCustomized() {\n \t}\n \n \t@SuppressWarnings(\"unchecked\")\n-\tprivate Set<? extends Class<?>> getInitialEntitySet() {\n+\tprivate Set<Class<?>> getInitialEntitySet() {\n \t\tBasicCassandraMappingContext mappingContext = this.context\n \t\t\t\t.getBean(BasicCassandraMappingContext.class);\n-\t\treturn (Set<? extends Class<?>>) ReflectionTestUtils\n-\t\t\t\t.getField(mappingContext, \"initialEntitySet\");\n+\t\treturn (Set<Class<?>>) ReflectionTestUtils.getField(mappingContext,\n+\t\t\t\t\"initialEntitySet\");\n \t}\n \n \tprivate void addConfigurations(Class<?>... configurations) {",
    "output": "Simplify generics in CassandraRepositoriesAutoConfigurationTests"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoProperties.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoProperties.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoProperties.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoProperties.java\n@@ -39,6 +39,7 @@\n  * @author Josh Long\n  * @author Andy Wilkinson\n  * @author Eddú Meléndez\n+ * @author Nasko Vasilev\n  */\n @ConfigurationProperties(prefix = \"spring.data.mongodb\")\n public class MongoProperties {\n@@ -278,6 +279,15 @@ private Builder builder(MongoClientOptions options) {\n \t\t\tbuilder.threadsAllowedToBlockForConnectionMultiplier(\n \t\t\t\t\toptions.getThreadsAllowedToBlockForConnectionMultiplier());\n \t\t\tbuilder.writeConcern(options.getWriteConcern());\n+\t\t\tbuilder.minConnectionsPerHost(options.getMinConnectionsPerHost());\n+\t\t\tbuilder.maxConnectionIdleTime(options.getMaxConnectionIdleTime());\n+\t\t\tbuilder.maxConnectionLifeTime(options.getMaxConnectionLifeTime());\n+\t\t\tbuilder.heartbeatFrequency(options.getHeartbeatFrequency());\n+\t\t\tbuilder.minHeartbeatFrequency(options.getMinHeartbeatFrequency());\n+\t\t\tbuilder.heartbeatConnectTimeout(options.getHeartbeatConnectTimeout());\n+\t\t\tbuilder.heartbeatSocketTimeout(options.getHeartbeatSocketTimeout());\n+\t\t\tbuilder.localThreshold(options.getLocalThreshold());\n+\t\t\tbuilder.requiredReplicaSetName(options.getRequiredReplicaSetName());\n \t\t}\n \t\treturn builder;\n \t}",
    "output": "Use missing MongoClientOptions in MongoProperties"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/embedded/EmbeddedMongoAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/embedded/EmbeddedMongoAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/embedded/EmbeddedMongoAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/embedded/EmbeddedMongoAutoConfiguration.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2015 the original author or authors.\n+ * Copyright 2012-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -63,6 +63,7 @@\n import org.springframework.core.env.MapPropertySource;\n import org.springframework.core.env.MutablePropertySources;\n import org.springframework.core.env.PropertySource;\n+import org.springframework.data.mongodb.core.MongoClientFactoryBean;\n import org.springframework.util.Assert;\n \n /**\n@@ -199,7 +200,7 @@ private Map<String, Object> getMongoPorts(MutablePropertySources sources) {\n \t * {@code embeddedMongoServer} bean.\n \t */\n \t@Configuration\n-\t@ConditionalOnClass(MongoClient.class)\n+\t@ConditionalOnClass({ MongoClient.class, MongoClientFactoryBean.class })\n \tprotected static class EmbeddedMongoDependencyConfiguration\n \t\t\textends MongoClientDependsOnBeanFactoryPostProcessor {\n ",
    "output": "Add condition on MongoClientFactoryBean\nAdd condition on MongoClientFactoryBean"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/embedded/EmbeddedMongoAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/embedded/EmbeddedMongoAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/embedded/EmbeddedMongoAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/embedded/EmbeddedMongoAutoConfiguration.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2015 the original author or authors.\n+ * Copyright 2012-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -200,7 +200,7 @@ private Map<String, Object> getMongoPorts(MutablePropertySources sources) {\n \t * {@code embeddedMongoServer} bean.\n \t */\n \t@Configuration\n-\t@ConditionalOnClass({MongoClient.class, MongoClientFactoryBean.class})\n+\t@ConditionalOnClass({ MongoClient.class, MongoClientFactoryBean.class })\n \tprotected static class EmbeddedMongoDependencyConfiguration\n \t\t\textends MongoClientDependsOnBeanFactoryPostProcessor {\n ",
    "output": "Add condition on MongoClientFactoryBean"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/bind/PropertiesConfigurationFactoryTests.java b/spring-boot/src/test/java/org/springframework/boot/bind/PropertiesConfigurationFactoryTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/bind/PropertiesConfigurationFactoryTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/bind/PropertiesConfigurationFactoryTests.java\n@@ -173,7 +173,7 @@ public void propertyWithAllUpperCaseSuffixCanBeBound() throws Exception {\n \t@Test\n \tpublic void propertyWithAllUpperCaseInTheMiddleCanBeBound() throws Exception {\n \t\tFoo foo = createFoo(\"foo-d-l-q-bar:baz\");\n-\t\tassertEquals(\"baz\", foo.fooDLQBar);\n+\t\tassertThat(foo.fooDLQBar).isEqualTo((\"baz\"));\n \t}\n \n \tprivate Foo createFoo(final String values) throws Exception {",
    "output": "Fix build failure"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DefaultErrorViewResolver.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DefaultErrorViewResolver.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DefaultErrorViewResolver.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DefaultErrorViewResolver.java\n@@ -26,7 +26,6 @@\n import org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider;\n import org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders;\n import org.springframework.context.ApplicationContext;\n-import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n import org.springframework.core.Ordered;\n import org.springframework.core.io.Resource;\n import org.springframework.http.HttpStatus;\n@@ -99,14 +98,6 @@ public DefaultErrorViewResolver(ApplicationContext applicationContext,\n \t\tthis.templateAvailabilityProviders = templateAvailabilityProviders;\n \t}\n \n-\tDefaultErrorViewResolver(AnnotationConfigApplicationContext applicationContext,\n-\t\t\tResourceProperties resourceProperties,\n-\t\t\tTemplateAvailabilityProviders templateAvailabilityProviders) {\n-\t\tthis.applicationContext = applicationContext;\n-\t\tthis.resourceProperties = resourceProperties;\n-\t\tthis.templateAvailabilityProviders = templateAvailabilityProviders;\n-\t}\n-\n \t@Override\n \tpublic ModelAndView resolveErrorView(HttpServletRequest request, HttpStatus status,\n \t\t\tMap<String, Object> model) {",
    "output": "Remove unnecessary constructor"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DefaultErrorViewResolver.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DefaultErrorViewResolver.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DefaultErrorViewResolver.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DefaultErrorViewResolver.java\n@@ -26,7 +26,6 @@\n import org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider;\n import org.springframework.boot.autoconfigure.template.TemplateAvailabilityProviders;\n import org.springframework.context.ApplicationContext;\n-import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n import org.springframework.core.Ordered;\n import org.springframework.core.io.Resource;\n import org.springframework.http.HttpStatus;\n@@ -99,14 +98,6 @@ public DefaultErrorViewResolver(ApplicationContext applicationContext,\n \t\tthis.templateAvailabilityProviders = templateAvailabilityProviders;\n \t}\n \n-\tDefaultErrorViewResolver(AnnotationConfigApplicationContext applicationContext,\n-\t\t\tResourceProperties resourceProperties,\n-\t\t\tTemplateAvailabilityProviders templateAvailabilityProviders) {\n-\t\tthis.applicationContext = applicationContext;\n-\t\tthis.resourceProperties = resourceProperties;\n-\t\tthis.templateAvailabilityProviders = templateAvailabilityProviders;\n-\t}\n-\n \t@Override\n \tpublic ModelAndView resolveErrorView(HttpServletRequest request, HttpStatus status,\n \t\t\tMap<String, Object> model) {",
    "output": "Remove unnecessary constructor"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/FilterRegistrationBean.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/FilterRegistrationBean.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/FilterRegistrationBean.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/FilterRegistrationBean.java\n@@ -21,7 +21,6 @@\n \n import org.springframework.boot.web.servlet.DelegatingFilterProxyRegistrationBean;\n import org.springframework.boot.web.servlet.ServletContextInitializer;\n-import org.springframework.boot.web.servlet.ServletRegistrationBean;\n \n /**\n  * A {@link ServletContextInitializer} to register {@link Filter}s in a Servlet 3.0+",
    "output": "Fix binary compatibility issue\nExisting apps get a NoSuchMethodError before this change because\nthey were compiled expecting a different signature for the\ndeprecated FilterRegistrationBean constructor."
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/bind/PropertiesConfigurationFactoryTests.java b/spring-boot/src/test/java/org/springframework/boot/bind/PropertiesConfigurationFactoryTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/bind/PropertiesConfigurationFactoryTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/bind/PropertiesConfigurationFactoryTests.java\n@@ -167,7 +167,7 @@ public void testBindWithDelimitedPrefixUsingDifferentDelimiter() throws Exceptio\n \t@Test\n \tpublic void propertyWithAllUpperCaseSuffixCanBeBound() throws Exception {\n \t\tFoo foo = createFoo(\"foo-bar-u-r-i:baz\");\n-\t\tassertEquals(\"baz\", foo.fooBarURI);\n+\t\tassertThat(foo.fooBarURI).isEqualTo(\"baz\");\n \t}\n \n \tprivate Foo createFoo(final String values) throws Exception {",
    "output": "Fix assertion to use AssertJ"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/bind/PropertiesConfigurationFactoryTests.java b/spring-boot/src/test/java/org/springframework/boot/bind/PropertiesConfigurationFactoryTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/bind/PropertiesConfigurationFactoryTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/bind/PropertiesConfigurationFactoryTests.java\n@@ -164,6 +164,12 @@ public void testBindWithDelimitedPrefixUsingDifferentDelimiter() throws Exceptio\n \t\tassertEquals(\"blah\", foo.name);\n \t}\n \n+\t@Test\n+\tpublic void propertyWithAllUpperCaseSuffixCanBeBound() throws Exception {\n+\t\tFoo foo = createFoo(\"foo-bar-u-r-i:baz\");\n+\t\tassertEquals(\"baz\", foo.fooBarURI);\n+\t}\n+\n \tprivate Foo createFoo(final String values) throws Exception {\n \t\tsetupFactory();\n \t\treturn bindFoo(values);\n@@ -195,6 +201,8 @@ public static class Foo {\n \n \t\tprivate String fooBar;\n \n+\t\tprivate String fooBarURI;\n+\n \t\tpublic String getSpringFooBaz() {\n \t\t\treturn this.spring_foo_baz;\n \t\t}\n@@ -227,6 +235,14 @@ public void setFooBar(String fooBar) {\n \t\t\tthis.fooBar = fooBar;\n \t\t}\n \n+\t\tpublic String getFooBarURI() {\n+\t\t\treturn this.fooBarURI;\n+\t\t}\n+\n+\t\tpublic void setFooBarURI(String fooBarURI) {\n+\t\t\tthis.fooBarURI = fooBarURI;\n+\t\t}\n+\n \t}\n \n }",
    "output": "Add test to verify binding of a property with all upper-case suffix"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java\n@@ -44,6 +44,7 @@\n import org.apache.catalina.Wrapper;\n import org.apache.catalina.connector.Connector;\n import org.apache.catalina.loader.WebappLoader;\n+import org.apache.catalina.session.ManagerBase;\n import org.apache.catalina.session.StandardManager;\n import org.apache.catalina.startup.Tomcat;\n import org.apache.catalina.startup.Tomcat.FixContextListener;\n@@ -815,8 +816,9 @@ public void lifecycleEvent(LifecycleEvent event) {\n \t\t\tif (event.getType().equals(Lifecycle.START_EVENT)) {\n \t\t\t\tContext context = (Context) event.getLifecycle();\n \t\t\t\tManager manager = context.getManager();\n-\t\t\t\tif (manager != null) {\n-\t\t\t\t\tmanager.setSessionIdGenerator(new LazySessionIdGenerator());\n+\t\t\t\tif (manager instanceof ManagerBase) {\n+\t\t\t\t\t((ManagerBase) manager)\n+\t\t\t\t\t\t\t.setSessionIdGenerator(new LazySessionIdGenerator());\n \t\t\t\t}\n \t\t\t}\n \t\t}",
    "output": "Make configuration of lazy session ID generator compatible with Tomcat 7"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RunMojo.java b/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RunMojo.java\n--- a/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RunMojo.java\n+++ b/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RunMojo.java\n@@ -41,8 +41,12 @@ public class RunMojo extends AbstractRunMojo {\n \t@Override\n \tprotected void runWithForkedJvm(List<String> args) throws MojoExecutionException {\n \t\ttry {\n-\t\t\tnew RunProcess(new JavaExecutable().toString()).run(true,\n+\t\t\tint exitCode = new RunProcess(new JavaExecutable().toString()).run(true,\n \t\t\t\t\targs.toArray(new String[args.size()]));\n+\t\t\tif (exitCode != 0) {\n+\t\t\t\tthrow new MojoExecutionException(\n+\t\t\t\t\t\t\"Application finished with non-zero exit code: \" + exitCode);\n+\t\t\t}\n \t\t}\n \t\tcatch (Exception ex) {\n \t\t\tthrow new MojoExecutionException(\"Could not exec java\", ex);",
    "output": "Upgrade RunMojo to fail when forked JVM returned non-zero exit code"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java b/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java\n@@ -53,7 +53,6 @@\n import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n import org.springframework.context.annotation.AnnotationConfigUtils;\n import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.ComponentScan;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.event.ContextRefreshedEvent;\n import org.springframework.context.event.SimpleApplicationEventMulticaster;",
    "output": "Fix checkstyle violation: remove unused import"
  },
  {
    "input": "diff --git a/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/restdocs/RestDocsAutoConfigurationAdvancedConfigurationIntegrationTests.java b/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/restdocs/RestDocsAutoConfigurationAdvancedConfigurationIntegrationTests.java\n--- a/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/restdocs/RestDocsAutoConfigurationAdvancedConfigurationIntegrationTests.java\n+++ b/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/restdocs/RestDocsAutoConfigurationAdvancedConfigurationIntegrationTests.java\n@@ -59,14 +59,12 @@ public void deleteSnippets() {\n \tprivate MockMvc mvc;\n \n \t@Autowired\n-\tprivate RestDocumentationResultHandler document;\n+\tprivate RestDocumentationResultHandler documentationHandler;\n \n \t@Test\n-\t@Deprecated\n \tpublic void snippetGeneration() throws Exception {\n-\t\tthis.document.snippets(links(\n-\t\t\t\tlinkWithRel(\"self\").description(\"Canonical location of this resource\")));\n-\t\tthis.mvc.perform(get(\"/\"));\n+\t\tthis.mvc.perform(get(\"/\")).andDo(this.documentationHandler.document(links(\n+\t\t\t\tlinkWithRel(\"self\").description(\"Canonical location of this resource\"))));\n \t\tFile defaultSnippetsDir = new File(\n \t\t\t\t\"target/generated-snippets/snippet-generation\");\n \t\tassertThat(defaultSnippetsDir).exists();",
    "output": "Remove use of deprecated API in REST Docs auto-config test"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/LiquibaseEndpoint.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/LiquibaseEndpoint.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/LiquibaseEndpoint.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/LiquibaseEndpoint.java\n@@ -54,8 +54,13 @@ public LiquibaseEndpoint(SpringLiquibase liquibase) {\n \t\t\tDatabaseFactory factory = DatabaseFactory.getInstance();\n \t\t\tDataSource dataSource = this.liquibase.getDataSource();\n \t\t\tJdbcConnection connection = new JdbcConnection(dataSource.getConnection());\n-\t\t\tDatabase database = factory.findCorrectDatabaseImplementation(connection);\n-\t\t\treturn service.queryDatabaseChangeLogTable(database);\n+\t\t\ttry {\n+\t\t\t\tDatabase database = factory.findCorrectDatabaseImplementation(connection);\n+\t\t\t\treturn service.queryDatabaseChangeLogTable(database);\n+\t\t\t}\n+\t\t\tfinally {\n+\t\t\t\tconnection.close();\n+\t\t\t}\n \t\t}\n \t\tcatch (Exception ex) {\n \t\t\tthrow new IllegalStateException(\"Unable to get Liquibase changelog\", ex);",
    "output": "Close connection after use in LiquibaseEndpoint"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/LiquibaseEndpoint.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/LiquibaseEndpoint.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/LiquibaseEndpoint.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/LiquibaseEndpoint.java\n@@ -54,8 +54,13 @@ public LiquibaseEndpoint(SpringLiquibase liquibase) {\n \t\t\tDatabaseFactory factory = DatabaseFactory.getInstance();\n \t\t\tDataSource dataSource = this.liquibase.getDataSource();\n \t\t\tJdbcConnection connection = new JdbcConnection(dataSource.getConnection());\n-\t\t\tDatabase database = factory.findCorrectDatabaseImplementation(connection);\n-\t\t\treturn service.queryDatabaseChangeLogTable(database);\n+\t\t\ttry {\n+\t\t\t\tDatabase database = factory.findCorrectDatabaseImplementation(connection);\n+\t\t\t\treturn service.queryDatabaseChangeLogTable(database);\n+\t\t\t}\n+\t\t\tfinally {\n+\t\t\t\tconnection.close();\n+\t\t\t}\n \t\t}\n \t\tcatch (Exception ex) {\n \t\t\tthrow new IllegalStateException(\"Unable to get Liquibase changelog\", ex);",
    "output": "Close connection after use in LiquibaseEndpoint\nUpdate LiquibaseEndpoint so that connections are closed and returned to\nthe pool after use."
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/BeanDefinitionLoaderTests.java b/spring-boot/src/test/java/org/springframework/boot/BeanDefinitionLoaderTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/BeanDefinitionLoaderTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/BeanDefinitionLoaderTests.java\n@@ -130,8 +130,8 @@ public void loadPackageNameWithoutDot() throws Exception {\n \t\tBeanDefinitionLoader loader = new BeanDefinitionLoader(this.registry,\n \t\t\t\tMyComponentInPackageWithoutDot.class.getPackage().getName());\n \t\tint loaded = loader.load();\n-\t\tassertThat(loaded, equalTo(1));\n-\t\tassertTrue(this.registry.containsBean(\"myComponentInPackageWithoutDot\"));\n+\t\tassertThat(loaded).isEqualTo(1);\n+\t\tassertThat(this.registry.containsBean(\"myComponentInPackageWithoutDot\")).isTrue();\n \t}\n \n \t@Test",
    "output": "Use AssertJ in merged 1.3.x tests"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/json/BasicJsonParser.java b/spring-boot/src/main/java/org/springframework/boot/json/BasicJsonParser.java\n--- a/spring-boot/src/main/java/org/springframework/boot/json/BasicJsonParser.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/json/BasicJsonParser.java\n@@ -93,14 +93,14 @@ private Object parseInternal(String json) {\n \t}\n \n \tprivate static String trimTrailingCharacter(String string, char c) {\n-\t\tif (string.length() >= 0 && string.charAt(string.length() - 1) == c) {\n+\t\tif (string.length() > 0 && string.charAt(string.length() - 1) == c) {\n \t\t\treturn string.substring(0, string.length() - 1);\n \t\t}\n \t\treturn string;\n \t}\n \n \tprivate static String trimLeadingCharacter(String string, char c) {\n-\t\tif (string.length() >= 0 && string.charAt(0) == c) {\n+\t\tif (string.length() > 0 && string.charAt(0) == c) {\n \t\t\treturn string.substring(1);\n \t\t}\n \t\treturn string;",
    "output": "Fix potential offset errors in BasicJsonParser\nUpdate BasicJsonParser to fix potential exceptions if strings happen\nto be empty."
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java\n@@ -251,7 +251,7 @@ protected void configureSsl(SslContextFactory factory, Ssl ssl) {\n \t\tconfigureSslClientAuth(factory, ssl);\n \t\tconfigureSslPasswords(factory, ssl);\n \t\tfactory.setCertAlias(ssl.getKeyAlias());\n-\t\tif (!ObjectUtils.isEmpty(ssl.getCiphers() != null)) {\n+\t\tif (!ObjectUtils.isEmpty(ssl.getCiphers())) {\n \t\t\tfactory.setIncludeCipherSuites(ssl.getCiphers());\n \t\t\tfactory.setExcludeCipherSuites();\n \t\t}",
    "output": "Fix broken condition"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/context/config/AnsiOutputApplicationListenerTests.java b/spring-boot/src/test/java/org/springframework/boot/context/config/AnsiOutputApplicationListenerTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/context/config/AnsiOutputApplicationListenerTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/context/config/AnsiOutputApplicationListenerTests.java\n@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package org.springframework.boot.context.embedded.config;\n+package org.springframework.boot.context.config;\n \n import java.util.HashMap;\n import java.util.Map;\n@@ -27,7 +27,6 @@\n import org.springframework.boot.ansi.AnsiOutput;\n import org.springframework.boot.ansi.AnsiOutput.Enabled;\n import org.springframework.boot.ansi.AnsiOutputEnabledValue;\n-import org.springframework.boot.context.config.AnsiOutputApplicationListener;\n import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.core.env.ConfigurableEnvironment;",
    "output": "Move AnsiOutputApplicationListenerTests\nMove AnsiOutputApplicationListenerTests to the correct package."
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-hypermedia-jpa/src/test/java/sample/hypermedia/jpa/SampleHypermediaJpaApplicationIntegrationTests.java b/spring-boot-samples/spring-boot-sample-hypermedia-jpa/src/test/java/sample/hypermedia/jpa/SampleHypermediaJpaApplicationIntegrationTests.java\n--- a/spring-boot-samples/spring-boot-sample-hypermedia-jpa/src/test/java/sample/hypermedia/jpa/SampleHypermediaJpaApplicationIntegrationTests.java\n+++ b/spring-boot-samples/spring-boot-sample-hypermedia-jpa/src/test/java/sample/hypermedia/jpa/SampleHypermediaJpaApplicationIntegrationTests.java\n@@ -82,7 +82,7 @@ public void browser() throws Exception {\n \t\tMvcResult response = this.mockMvc.perform(get(\"/\").accept(MediaType.TEXT_HTML))\n \t\t\t\t.andExpect(status().isFound()).andReturn();\n \t\tassertThat(response.getResponse().getHeaders(\"location\").get(0))\n-\t\t\t\t.isEqualTo(\"/browser/index.html#\");\n+\t\t\t\t.isEqualTo(\"http://localhost/browser/index.html#/\");\n \t}\n \n }",
    "output": "Resume building against Spring Data Hopper snapshots"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceBuilder.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceBuilder.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceBuilder.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceBuilder.java\n@@ -83,7 +83,10 @@ private void maybeGetDriverClassName() {\n \n \tprivate void bind(DataSource result) {\n \t\tMutablePropertyValues properties = new MutablePropertyValues(this.properties);\n-\t\tnew RelaxedDataBinder(result).withAlias(\"url\", \"jdbcUrl\").bind(properties);\n+\t\tnew RelaxedDataBinder(result)\n+\t\t\t\t.withAlias(\"url\", \"jdbcUrl\")\n+\t\t\t\t.withAlias(\"username\", \"user\")\n+\t\t\t\t.bind(properties);\n \t}\n \n \tpublic DataSourceBuilder type(Class<? extends DataSource> type) {",
    "output": "Upgrade DataSourceBuilder aliases"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceBuilder.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceBuilder.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceBuilder.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceBuilder.java\n@@ -83,7 +83,10 @@ private void maybeGetDriverClassName() {\n \n \tprivate void bind(DataSource result) {\n \t\tMutablePropertyValues properties = new MutablePropertyValues(this.properties);\n-\t\tnew RelaxedDataBinder(result).withAlias(\"url\", \"jdbcUrl\").bind(properties);\n+\t\tnew RelaxedDataBinder(result)\n+\t\t\t\t.withAlias(\"url\", \"jdbcUrl\")\n+\t\t\t\t.withAlias(\"username\", \"user\")\n+\t\t\t\t.bind(properties);\n \t}\n \n \tpublic DataSourceBuilder type(Class<? extends DataSource> type) {",
    "output": "Upgrade DataSourceBuilder aliases This commit adds a `user` alias for the `username` property which permits the use of `OracleDataSource`. , ,"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/SocialAutoConfigurerAdapter.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/SocialAutoConfigurerAdapter.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/SocialAutoConfigurerAdapter.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/SocialAutoConfigurerAdapter.java\n@@ -26,9 +26,9 @@\n  *\n  * @author Craig Walls\n  * @author Phillip Webb\n- * @since 1.1.0\n+ * @since 1.4.0\n  */\n-abstract class SocialAutoConfigurerAdapter extends SocialConfigurerAdapter {\n+public abstract class SocialAutoConfigurerAdapter extends SocialConfigurerAdapter {\n \n \t@Override\n \tpublic void addConnectionFactories(ConnectionFactoryConfigurer configurer,\n\ndiff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/SocialProperties.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/SocialProperties.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/SocialProperties.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/SocialProperties.java\n@@ -22,9 +22,9 @@\n  * Base {@link ConfigurationProperties properties} for spring social.\n  *\n  * @author Stephane Nicoll\n- * @since 1.2.0\n+ * @since 1.4.0\n  */\n-abstract class SocialProperties {\n+public abstract class SocialProperties {\n \n \t/**\n \t * Application id.",
    "output": "Make SocialAutoConfigurerAdapter/Properties public"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/diagnostics/analyzer/BindFailureAnalyzerTests.java b/spring-boot/src/test/java/org/springframework/boot/diagnostics/analyzer/BindFailureAnalyzerTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/diagnostics/analyzer/BindFailureAnalyzerTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/diagnostics/analyzer/BindFailureAnalyzerTests.java\n@@ -16,17 +16,22 @@\n \n package org.springframework.boot.diagnostics.analyzer;\n \n+import java.util.Locale;\n+\n import javax.validation.Valid;\n import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n \n+import org.junit.After;\n+import org.junit.Before;\n import org.junit.Test;\n \n import org.springframework.beans.factory.BeanCreationException;\n import org.springframework.boot.context.properties.ConfigurationProperties;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.boot.diagnostics.FailureAnalysis;\n import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n+import org.springframework.context.i18n.LocaleContextHolder;\n \n import static org.assertj.core.api.Assertions.assertThat;\n \n@@ -37,6 +42,16 @@\n  */\n public class BindFailureAnalyzerTests {\n \n+\t@Before\n+\tpublic void setup() {\n+\t\tLocaleContextHolder.setLocale(Locale.US);\n+\t}\n+\n+\t@After\n+\tpublic void cleanup() {\n+\t\tLocaleContextHolder.resetLocaleContext();\n+\t}\n+\n \t@Test\n \tpublic void bindExceptionDueToValidationFailure() {\n \t\tFailureAnalysis analysis = performAnalysis(ValidationFailureConfiguration.class);",
    "output": "Use defined Locale for BindFailureAnalyzerTests\nUpdate BindFailureAnalyzerTests so that localized messages are not used."
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainer.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainer.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainer.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainer.java\n@@ -98,7 +98,7 @@ private synchronized void initialize() throws EmbeddedServletContainerException\n \n \t\t\tContext context = findContext();\n \t\t\ttry {\n-\t\t\t\tContextBindings.bindClassLoader(context, context.getNamingToken(),\n+\t\t\t\tContextBindings.bindClassLoader(context, getNamingToken(context),\n \t\t\t\t\t\tgetClass().getClassLoader());\n \t\t\t}\n \t\t\tcatch (NamingException ex) {\n@@ -191,7 +191,7 @@ public void start() throws EmbeddedServletContainerException {\n \t\t}\n \t\tfinally {\n \t\t\tContext context = findContext();\n-\t\t\tContextBindings.unbindClassLoader(context, context.getNamingToken(),\n+\t\t\tContextBindings.unbindClassLoader(context, getNamingToken(context),\n \t\t\t\t\tgetClass().getClassLoader());\n \t\t}\n \t}\n@@ -312,4 +312,15 @@ public Tomcat getTomcat() {\n \t\treturn this.tomcat;\n \t}\n \n+\tprivate Object getNamingToken(Context context) {\n+\t\ttry {\n+\t\t\treturn context.getNamingToken();\n+\t\t}\n+\t\tcatch (NoSuchMethodError ex) {\n+\t\t\t// Use the context itself on Tomcat 7\n+\t\t\treturn context;\n+\t\t}\n+\n+\t}\n+\n }",
    "output": "Tolerate API changes between Tomcat 7 and Tomcat 8"
  },
  {
    "input": "diff --git a/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/servlet/HateoasController.java b/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/servlet/HateoasController.java\n--- a/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/servlet/HateoasController.java\n+++ b/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/web/servlet/HateoasController.java\n@@ -35,13 +35,13 @@ class HateoasController {\n \n \t@RequestMapping(\"/resource\")\n \tpublic Resource<Map<String, String>> resource() {\n-\t\treturn new Resource<Map<String, String>>(new HashMap<>(),\n+\t\treturn new Resource<Map<String, String>>(new HashMap<String, String>(),\n \t\t\t\tnew Link(\"self\", \"http://api.example.com\"));\n \t}\n \n \t@RequestMapping(\"/plain\")\n \tpublic Map<String, String> plain() {\n-\t\treturn new HashMap<>();\n+\t\treturn new HashMap<String, String>();\n \t}\n \n }",
    "output": "Polishing 349ec76: remove use of the diamond operator"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/UserInfoRestTemplateConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/UserInfoRestTemplateConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/UserInfoRestTemplateConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/resource/UserInfoRestTemplateConfiguration.java\n@@ -31,6 +31,9 @@\n import org.springframework.util.CollectionUtils;\n \n /**\n+ * Configuration acting as a factory for the rest template used for extracting user info\n+ * during authentication.\n+ *\n  * @author Dave Syer\n  */\n @Configuration\n@@ -89,4 +92,4 @@ private OAuth2RestTemplate getTemplate(OAuth2ProtectedResourceDetails details) {\n \t\treturn new OAuth2RestTemplate(details, this.oauth2ClientContext);\n \t}\n \n-}\n\\ No newline at end of file\n+}",
    "output": "Fix stupid checkstyle violations"
  },
  {
    "input": "diff --git a/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockitoPostProcessor.java b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockitoPostProcessor.java\n--- a/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockitoPostProcessor.java\n+++ b/spring-boot-test/src/main/java/org/springframework/boot/test/mock/mockito/MockitoPostProcessor.java\n@@ -246,12 +246,10 @@ private void createSpy(BeanDefinitionRegistry registry, SpyDefinition definition\n \n \tprivate void registerSpies(SpyDefinition definition, Field field,\n \t\t\tString[] existingBeans) {\n-\t\tif (field != null) {\n-\t\t\tAssert.state(field == null || existingBeans.length == 1,\n-\t\t\t\t\t\"Unable to register spy bean \" + definition.getClassToSpy().getName()\n-\t\t\t\t\t\t\t+ \" expected a single existing bean to replace but found \"\n-\t\t\t\t\t\t\t+ new TreeSet<String>(Arrays.asList(existingBeans)));\n-\t\t}\n+\t\tAssert.state(field == null || existingBeans.length == 1,\n+\t\t\t\t\"Unable to register spy bean \" + definition.getClassToSpy().getName()\n+\t\t\t\t\t\t+ \" expected a single existing bean to replace but found \"\n+\t\t\t\t\t\t+ new TreeSet<String>(Arrays.asList(existingBeans)));\n \t\tfor (String beanName : existingBeans) {\n \t\t\tregisterSpy(definition, field, beanName);\n \t\t}",
    "output": "Remove superflous `if` in MockitoPostProcessor\nThe `if` in registerSpies() is not required as it's covered by the\nAssert check."
  },
  {
    "input": "diff --git a/spring-boot-cli/src/it/java/org/springframework/boot/cli/infrastructure/CommandLineInvoker.java b/spring-boot-cli/src/it/java/org/springframework/boot/cli/infrastructure/CommandLineInvoker.java\n--- a/spring-boot-cli/src/it/java/org/springframework/boot/cli/infrastructure/CommandLineInvoker.java\n+++ b/spring-boot-cli/src/it/java/org/springframework/boot/cli/infrastructure/CommandLineInvoker.java\n@@ -144,7 +144,9 @@ private List<String> getLines(StringBuffer buffer) {\n \t\t\tList<String> lines = new ArrayList<String>();\n \t\t\ttry {\n \t\t\t\twhile ((line = reader.readLine()) != null) {\n-\t\t\t\t\tlines.add(line);\n+\t\t\t\t\tif (!line.startsWith(\"Picked up \")) {\n+\t\t\t\t\t\tlines.add(line);\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n \t\t\tcatch (IOException ex) {",
    "output": "Ignore special variable related JVM output in CommandLineInvoker"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatStarter.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatStarter.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatStarter.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatStarter.java\n@@ -60,7 +60,8 @@ public void onStartup(Set<Class<?>> classes, ServletContext servletContext)\n \t\t\t// Prevent Tomcat from logging and re-throwing when we know we can\n \t\t\t// deal with it in the main thread, but log for information here.\n \t\t\tif (logger.isErrorEnabled()) {\n-\t\t\t\tlogger.error(\"Error starting Tomcat context: \" + ex.getClass().getName());\n+\t\t\t\tlogger.error(\"Error starting Tomcat context. Exception: \"\n+\t\t\t\t\t\t+ ex.getClass().getName() + \". Message: \" + ex.getMessage());\n \t\t\t}\n \t\t}\n \t}",
    "output": "Improve diagnostics for start failures in TomcatStarter"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfigurationTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfigurationTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfigurationTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfigurationTests.java\n@@ -199,7 +199,7 @@ private void getOrCreate(Cache cache, String... ids) {\n \n \tprivate Cache getCache(String cacheName) {\n \t\tCache cache = this.cacheManager.getCache(cacheName);\n-\t\tAssert.notNull(\"No cache with name '\" + cacheName + \"' found.\");\n+\t\tAssert.notNull(cache, \"No cache with name '\" + cacheName + \"' found.\");\n \t\treturn cache;\n \t}\n ",
    "output": "Fix incorrect usage of Assert.notNull()"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfigurationTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfigurationTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfigurationTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfigurationTests.java\n@@ -199,7 +199,7 @@ private void getOrCreate(Cache cache, String... ids) {\n \n \tprivate Cache getCache(String cacheName) {\n \t\tCache cache = this.cacheManager.getCache(cacheName);\n-\t\tAssert.notNull(\"No cache with name '\" + cacheName + \"' found.\");\n+\t\tAssert.notNull(cache, \"No cache with name '\" + cacheName + \"' found.\");\n \t\treturn cache;\n \t}\n ",
    "output": "Fix incorrect usage of Assert.notNull()"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ResourceProperties.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ResourceProperties.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ResourceProperties.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ResourceProperties.java\n@@ -292,7 +292,7 @@ public static class Fixed {\n \t\t/**\n \t\t * Comma-separated list of patterns to apply to the Version Strategy.\n \t\t */\n-\t\tprivate String[] paths;\n+\t\tprivate String[] paths = new String[] { \"/**\" };\n \n \t\t/**\n \t\t * Version string to use for the Version Strategy.",
    "output": "Set default paths for fixed static version ()\nSet default paths for fixed static version"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ResourceProperties.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ResourceProperties.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ResourceProperties.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ResourceProperties.java\n@@ -292,7 +292,7 @@ public static class Fixed {\n \t\t/**\n \t\t * Comma-separated list of patterns to apply to the Version Strategy.\n \t\t */\n-\t\tprivate String[] paths;\n+\t\tprivate String[] paths = new String[] { \"/**\" };\n \n \t\t/**\n \t\t * Version string to use for the Version Strategy.",
    "output": "Set default paths for fixed static version"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java b/spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java\n--- a/spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertiesConfigurationFactory.java\n@@ -231,7 +231,7 @@ public void bindPropertiesToTarget() throws BindException {\n \t\ttry {\n \t\t\tif (this.logger.isTraceEnabled()) {\n \t\t\t\tif (this.properties != null) {\n-\t\t\t\t\tthis.logger.trace(String.format(\"Properties:%n%s\" + this.properties));\n+\t\t\t\t\tthis.logger.trace(String.format(\"Properties:%n%s\", this.properties));\n \t\t\t\t}\n \t\t\t\telse {\n \t\t\t\t\tthis.logger.trace(\"Property Sources: \" + this.propertySources);",
    "output": "Fix String.format call in PropertiesConfigurationFactory"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jooq/JooqExceptionTranslatorTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jooq/JooqExceptionTranslatorTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jooq/JooqExceptionTranslatorTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jooq/JooqExceptionTranslatorTests.java\n@@ -29,9 +29,7 @@\n \n import org.springframework.jdbc.BadSqlGrammarException;\n \n-import static org.hamcrest.Matchers.instanceOf;\n-import static org.hamcrest.Matchers.is;\n-import static org.junit.Assert.assertThat;\n+import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.BDDMockito.given;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n@@ -89,7 +87,7 @@ public void exceptionTranslation() {\n \t\tArgumentCaptor<RuntimeException> captor = ArgumentCaptor\n \t\t\t\t.forClass(RuntimeException.class);\n \t\tverify(context).exception(captor.capture());\n-\t\tassertThat(captor.getValue(), is(instanceOf(BadSqlGrammarException.class)));\n+\t\tassertThat(captor.getValue()).isInstanceOf(BadSqlGrammarException.class);\n \t}\n \n }",
    "output": "Use AssertJ in JooqExceptionTranslatorTests"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/InfoEndpointCompatibilityTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/InfoEndpointCompatibilityTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/InfoEndpointCompatibilityTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/InfoEndpointCompatibilityTests.java\n@@ -41,7 +41,7 @@ public void invoke() throws Exception {\n \t}\n \n \tprivate InfoEndpoint getEndpointBean() {\n-\t\treturn new InfoEndpoint(Collections.singletonMap(\"foo\", \"bar\"),\n+\t\treturn new InfoEndpoint(Collections.<String, Object>singletonMap(\"foo\", \"bar\"),\n \t\t\t\tinfoContributor());\n \t}\n ",
    "output": "Fix some more tests"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnPropertyTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnPropertyTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnPropertyTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnPropertyTests.java\n@@ -242,7 +242,7 @@ public void metaAnnotationConditionMatchesWhenPropertyIsSet() throws Exception {\n \tpublic void metaAnnotationConditionDoesNotMatchWhenPropertyIsNotSet()\n \t\t\tthrows Exception {\n \t\tload(MetaAnnotation.class);\n-\t\tassertThat(this.context.containsBean(\"foo\")).isTrue();\n+\t\tassertThat(this.context.containsBean(\"foo\")).isFalse();\n \t}\n \n \t@Test\n@@ -254,7 +254,7 @@ public void metaAndDirectAnnotationConditionDoesNotMatchWhenOnlyDirectPropertyIs\n \t@Test\n \tpublic void metaAndDirectAnnotationConditionDoesNotMatchWhenOnlyMetaPropertyIsSet() {\n \t\tload(MetaAnnotationAndDirectAnnotation.class, \"my.feature.enabled=true\");\n-\t\tassertThat(this.context.containsBean(\"foo\")).isTrue();\n+\t\tassertThat(this.context.containsBean(\"foo\")).isFalse();\n \t}\n \n \t@Test",
    "output": "Correct assertion that were inverted when converting to AssertJ"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java\n@@ -259,7 +259,7 @@ protected void configureSsl(SslContextFactory factory, Ssl ssl) {\n \t\tif (getSslStoreProvider() != null) {\n \t\t\ttry {\n \t\t\t\tfactory.setKeyStore(getSslStoreProvider().getKeyStore());\n-\t\t\t\tfactory.setTrustStore(getSslStoreProvider().getKeyStore());\n+\t\t\t\tfactory.setTrustStore(getSslStoreProvider().getTrustStore());\n \t\t\t}\n \t\t\tcatch (Exception ex) {\n \t\t\t\tthrow new IllegalStateException(\"Unable to set SSL store\", ex);",
    "output": "Fix customization of Jetty's SSL trust store"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-web-static/src/test/java/sample/web/staticcontent/SampleWebStaticApplicationTests.java b/spring-boot-samples/spring-boot-sample-web-static/src/test/java/sample/web/staticcontent/SampleWebStaticApplicationTests.java\n--- a/spring-boot-samples/spring-boot-sample-web-static/src/test/java/sample/web/staticcontent/SampleWebStaticApplicationTests.java\n+++ b/spring-boot-samples/spring-boot-sample-web-static/src/test/java/sample/web/staticcontent/SampleWebStaticApplicationTests.java\n@@ -62,7 +62,7 @@ public void testCss() throws Exception {\n \t\tassertThat(entity.getStatusCode()).isEqualTo(HttpStatus.OK);\n \t\tassertThat(entity.getBody()).contains(\"body\");\n \t\tassertThat(entity.getHeaders().getContentType())\n-\t\t\t\t.isEqualTo(MediaType.valueOf(\"text/css;charset=UTF-8\"));\n+\t\t\t\t.isEqualTo(MediaType.valueOf(\"text/css\"));\n \t}\n \n }",
    "output": "Don’t expect a charset attribute on a text/css Content-Type\nFollowing the encoding change made in 428a10a, the character encoding\nof a response is no longer forced."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/HttpEncodingAutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/HttpEncodingAutoConfigurationTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/HttpEncodingAutoConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/HttpEncodingAutoConfigurationTests.java\n@@ -26,7 +26,6 @@\n import org.junit.Test;\n import org.junit.rules.ExpectedException;\n \n-import org.springframework.beans.DirectFieldAccessor;\n import org.springframework.beans.factory.NoSuchBeanDefinitionException;\n import org.springframework.boot.test.util.EnvironmentTestUtils;\n import org.springframework.boot.web.filter.OrderedHiddenHttpMethodFilter;",
    "output": "Remove useless import"
  },
  {
    "input": "diff --git a/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java\n--- a/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java\n+++ b/spring-boot-actuator-docs/src/restdoc/java/org/springframework/boot/actuate/hypermedia/EndpointDocumentation.java\n@@ -28,6 +28,7 @@\n \n import groovy.text.Template;\n import groovy.text.TemplateEngine;\n+import org.junit.BeforeClass;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n \n@@ -60,7 +61,7 @@\n \t\t\"endpoints.health.sensitive=true\", \"endpoints.actuator.enabled=false\" })\n @DirtiesContext\n @AutoConfigureRestDocs(EndpointDocumentation.RESTDOCS_OUTPUT_DIR)\n-@AutoConfigureMockMvc\n+@AutoConfigureMockMvc(alwaysPrint = false)\n public class EndpointDocumentation {\n \n \tstatic final String RESTDOCS_OUTPUT_DIR = \"target/generated-snippets\";\n@@ -74,6 +75,11 @@ public class EndpointDocumentation {\n \t@Autowired\n \tprivate MockMvc mockMvc;\n \n+\t@BeforeClass\n+\tpublic static void clearLog() {\n+\t\tnew File(\"target/logs/spring.log\").delete();\n+\t}\n+\n \t@Test\n \tpublic void logfile() throws Exception {\n \t\tthis.mockMvc.perform(get(\"/logfile\").accept(MediaType.TEXT_PLAIN))",
    "output": "Ensure that logfile endpoint documentation has some log entries to use"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2RestOperationsConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2RestOperationsConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2RestOperationsConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/client/OAuth2RestOperationsConfiguration.java\n@@ -26,6 +26,7 @@\n import org.springframework.boot.autoconfigure.condition.ConditionalOnNotWebApplication;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n import org.springframework.boot.autoconfigure.condition.SpringBootCondition;\n+import org.springframework.boot.autoconfigure.security.SecurityProperties;\n import org.springframework.boot.autoconfigure.security.oauth2.client.OAuth2RestOperationsConfiguration.OAuth2ClientIdCondition;\n import org.springframework.boot.bind.RelaxedPropertyResolver;\n import org.springframework.boot.context.embedded.FilterRegistrationBean;\n@@ -116,10 +117,10 @@ protected static class SessionScopedConfiguration extends BaseConfiguration {\n \n \t\t@Bean\n \t\tpublic FilterRegistrationBean oauth2ClientFilterRegistration(\n-\t\t\t\tOAuth2ClientContextFilter filter) {\n+\t\t\t\tOAuth2ClientContextFilter filter, SecurityProperties security) {\n \t\t\tFilterRegistrationBean registration = new FilterRegistrationBean();\n \t\t\tregistration.setFilter(filter);\n-\t\t\tregistration.setOrder(-100);\n+\t\t\tregistration.setOrder(security.getFilterOrder() - 10);\n \t\t\treturn registration;\n \t\t}\n ",
    "output": "Move OAuth2ClientContextFilter back before the main security filter\nIt sometimes has to catch an exception from the security filter so\nit needs to be before, and somehow this hasn't been a problem up to\nnow, but probably only by some fluke."
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-jersey/src/main/java/sample/jersey/SampleJerseyApplication.java b/spring-boot-samples/spring-boot-sample-jersey/src/main/java/sample/jersey/SampleJerseyApplication.java\n--- a/spring-boot-samples/spring-boot-sample-jersey/src/main/java/sample/jersey/SampleJerseyApplication.java\n+++ b/spring-boot-samples/spring-boot-sample-jersey/src/main/java/sample/jersey/SampleJerseyApplication.java\n@@ -23,11 +23,6 @@\n @SpringBootApplication\n public class SampleJerseyApplication extends SpringBootServletInitializer {\n \n-\t@Override\n-\tprotected SpringApplicationBuilder configure(SpringApplicationBuilder application) {\n-\t\treturn application.sources(SampleJerseyApplication.class);\n-\t}\n-\n \tpublic static void main(String[] args) {\n \t\tnew SampleJerseyApplication()\n \t\t\t\t.configure(new SpringApplicationBuilder(SampleJerseyApplication.class))",
    "output": "Remove redundant override of the configure method Since the `SampleJerseyApplication` class is already passed in the `SpringApplicationBuilder` constructor, there is no need to override the configure method of the `SpringBootServletInitializer` class."
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RunMojo.java b/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RunMojo.java\n--- a/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RunMojo.java\n+++ b/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RunMojo.java\n@@ -85,7 +85,7 @@ private void join(ThreadGroup threadGroup) {\n \t\twhile (hasNonDaemonThreads);\n \t}\n \n-\tprivate static class RunProcessKiller implements Runnable {\n+\tprivate static final class RunProcessKiller implements Runnable {\n \n \t\tprivate final RunProcess runProcess;\n ",
    "output": "Polishing\nMake RunProcessKiller final"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java b/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java\n@@ -194,8 +194,7 @@ public void customBannerWithProperties() throws Exception {\n \t\tthis.context = application.run(\n \t\t\t\t\"--banner.location=classpath:test-banner-with-placeholder.txt\",\n \t\t\t\t\"--test.property=123456\");\n-\t\tassertThat(this.output.toString())\n-\t\t\t\t.startsWith(String.format(\"Running a Test!%n%n123456\"));\n+\t\tassertThat(this.output.toString()).containsPattern(\"Running a Test!\\\\s+123456\");\n \t}\n \n \t@Test",
    "output": "Use RegEx for test to make Windows happy"
  },
  {
    "input": "diff --git a/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/filter/FilterAnnotationsTests.java b/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/filter/FilterAnnotationsTests.java\n--- a/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/filter/FilterAnnotationsTests.java\n+++ b/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/filter/FilterAnnotationsTests.java\n@@ -76,7 +76,7 @@ public void filterRegex() throws Exception {\n \t\tFilterAnnotations filterAnnotations = get(FilterByRegex.class);\n \t\tassertThat(match(filterAnnotations, ExampleWithAnnotation.class)).isFalse();\n \t\tassertThat(match(filterAnnotations, ExampleWithoutAnnotation.class)).isTrue();\n-\t} \n+\t}\n \n \tprivate FilterAnnotations get(Class<?> type) {\n \t\tFilters filters = AnnotatedElementUtils.getMergedAnnotation(type, Filters.class);",
    "output": "Remove trailing whitespace"
  },
  {
    "input": "diff --git a/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/filter/FilterAnnotationsTests.java b/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/filter/FilterAnnotationsTests.java\n--- a/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/filter/FilterAnnotationsTests.java\n+++ b/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/filter/FilterAnnotationsTests.java\n@@ -76,11 +76,7 @@ public void filterRegex() throws Exception {\n \t\tFilterAnnotations filterAnnotations = get(FilterByRegex.class);\n \t\tassertThat(match(filterAnnotations, ExampleWithAnnotation.class)).isFalse();\n \t\tassertThat(match(filterAnnotations, ExampleWithoutAnnotation.class)).isTrue();\n-\t}\n-\n-\t@Test\n-\tpublic void anyMatches() throws Exception {\n-\t}\n+\t} \n \n \tprivate FilterAnnotations get(Class<?> type) {\n \t\tFilters filters = AnnotatedElementUtils.getMergedAnnotation(type, Filters.class);",
    "output": "Remove a test doing nothing"
  },
  {
    "input": "diff --git a/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/filter/FilterAnnotationsTests.java b/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/filter/FilterAnnotationsTests.java\n--- a/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/filter/FilterAnnotationsTests.java\n+++ b/spring-boot-test-autoconfigure/src/test/java/org/springframework/boot/test/autoconfigure/filter/FilterAnnotationsTests.java\n@@ -76,11 +76,7 @@ public void filterRegex() throws Exception {\n \t\tFilterAnnotations filterAnnotations = get(FilterByRegex.class);\n \t\tassertThat(match(filterAnnotations, ExampleWithAnnotation.class)).isFalse();\n \t\tassertThat(match(filterAnnotations, ExampleWithoutAnnotation.class)).isTrue();\n-\t}\n-\n-\t@Test\n-\tpublic void anyMatches() throws Exception {\n-\t}\n+\t} \n \n \tprivate FilterAnnotations get(Class<?> type) {\n \t\tFilters filters = AnnotatedElementUtils.getMergedAnnotation(type, Filters.class);",
    "output": "Remove a test doing nothing"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfiguration.java\n@@ -125,7 +125,7 @@ protected final RedisClusterConfiguration getClusterConfiguration() {\n \t\t\t\t\tclusterProperties.getNodes());\n \n \t\t\tif (clusterProperties.getMaxRedirects() != null) {\n-\t\t\t\tconfig.setMaxRedirects(config.getMaxRedirects());\n+\t\t\t\tconfig.setMaxRedirects(clusterProperties.getMaxRedirects());\n \t\t\t}\n \t\t\treturn config;\n \t\t}",
    "output": "Fix potential NPE in RedisAutoConfiguration"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfiguration.java\n@@ -125,7 +125,7 @@ protected final RedisClusterConfiguration getClusterConfiguration() {\n \t\t\t\t\tclusterProperties.getNodes());\n \n \t\t\tif (clusterProperties.getMaxRedirects() != null) {\n-\t\t\t\tconfig.setMaxRedirects(config.getMaxRedirects());\n+\t\t\t\tconfig.setMaxRedirects(clusterProperties.getMaxRedirects());\n \t\t\t}\n \t\t\treturn config;\n \t\t}",
    "output": "Fix potential NPE in RedisAutoConfiguration"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java b/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n@@ -762,12 +762,12 @@ public void customServerHeader() throws Exception {\n \t@Test\n \tpublic void portClashOfPrimaryConnectorResultsInPortInUseException()\n \t\t\tthrows IOException {\n-\t\tAbstractEmbeddedServletContainerFactory factory = getFactory();\n \t\tdoWithBlockedPort(new BlockedPortAction() {\n \n \t\t\t@Override\n \t\t\tpublic void run(int port) {\n \t\t\t\ttry {\n+\t\t\t\t\tAbstractEmbeddedServletContainerFactory factory = getFactory();\n \t\t\t\t\tfactory.setPort(port);\n \t\t\t\t\tAbstractEmbeddedServletContainerFactoryTests.this.container = factory\n \t\t\t\t\t\t\t.getEmbeddedServletContainer();",
    "output": "Fix reference to non-final field"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n--- a/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n@@ -536,10 +536,10 @@ protected void configureProfiles(ConfigurableEnvironment environment, String[] a\n \t}\n \n \tprivate Banner printBanner(ConfigurableEnvironment environment) {\n-\t\tif (printBannerViaDeprecatedMethod(environment)) {\n+\t\tif (this.bannerMode == Banner.Mode.OFF) {\n \t\t\treturn null;\n \t\t}\n-\t\tif (this.bannerMode == Banner.Mode.OFF) {\n+\t\tif (printBannerViaDeprecatedMethod(environment)) {\n \t\t\treturn null;\n \t\t}\n \t\tResourceLoader resourceLoader = this.resourceLoader != null ? this.resourceLoader",
    "output": "Fix accidental banner regression\nFix accidental regression introduced when I tweaked the updated\nbanner support (commit aaed87d1)."
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/buildinfo/BuildInfo.java b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/buildinfo/BuildInfo.java\n--- a/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/buildinfo/BuildInfo.java\n+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/buildinfo/BuildInfo.java\n@@ -128,7 +128,7 @@ public void setAdditionalProperties(Map<String, Object> additionalProperties) {\n \n \tprivate Map<String, String> coerceToStringValues(Map<String, Object> input) {\n \t\tMap<String, String> output = new HashMap<String, String>();\n-\t\tfor (Entry<String, Object> entry : this.additionalProperties.entrySet()) {\n+\t\tfor (Entry<String, Object> entry : input.entrySet()) {\n \t\t\toutput.put(entry.getKey(), entry.getValue().toString());\n \t\t}\n \t\treturn output;",
    "output": "Use the passed parameter in BuildInfo.coerceToStringValues()"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/buildinfo/BuildInfo.java b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/buildinfo/BuildInfo.java\n--- a/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/buildinfo/BuildInfo.java\n+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/buildinfo/BuildInfo.java\n@@ -128,7 +128,7 @@ public void setAdditionalProperties(Map<String, Object> additionalProperties) {\n \n \tprivate Map<String, String> coerceToStringValues(Map<String, Object> input) {\n \t\tMap<String, String> output = new HashMap<String, String>();\n-\t\tfor (Entry<String, Object> entry : this.additionalProperties.entrySet()) {\n+\t\tfor (Entry<String, Object> entry : input.entrySet()) {\n \t\t\toutput.put(entry.getKey(), entry.getValue().toString());\n \t\t}\n \t\treturn output;",
    "output": "Use the passed parameter in BuildInfo.coerceToStringValues()"
  },
  {
    "input": "diff --git a/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/filewatch/FileSystemWatcherTests.java b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/filewatch/FileSystemWatcherTests.java\n--- a/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/filewatch/FileSystemWatcherTests.java\n+++ b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/filewatch/FileSystemWatcherTests.java\n@@ -154,10 +154,10 @@ public void addNestedFile() throws Exception {\n \t@Test\n \tpublic void waitsForPollingInterval() throws Exception {\n \t\tthis.changes.clear();\n-\t\tsetupWatcher(100, 1);\n+\t\tsetupWatcher(200, 1);\n \t\tFile folder = startWithNewFolder();\n \t\ttouch(new File(folder, \"test1.txt\"));\n-\t\tThread.sleep(200);\n+\t\tThread.sleep(400);\n \t\ttouch(new File(folder, \"test2.txt\"));\n \t\tthis.watcher.stopAfter(1);\n \t\tassertThat(this.changes.size()).isEqualTo(2);",
    "output": "Tweak FileSystemWatcherTests timing for Windows"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/solr/SolrAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/solr/SolrAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/solr/SolrAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/solr/SolrAutoConfiguration.java\n@@ -16,10 +16,6 @@\n \n package org.springframework.boot.autoconfigure.solr;\n \n-import java.io.IOException;\n-\n-import javax.annotation.PreDestroy;\n-\n import org.apache.solr.client.solrj.SolrClient;\n import org.apache.solr.client.solrj.impl.CloudSolrClient;\n import org.apache.solr.client.solrj.impl.HttpSolrClient;\n@@ -51,13 +47,6 @@ public SolrAutoConfiguration(SolrProperties properties) {\n \t\tthis.properties = properties;\n \t}\n \n-\t@PreDestroy\n-\tpublic void close() throws IOException {\n-\t\tif (this.solrClient != null) {\n-\t\t\tthis.solrClient.close();\n-\t\t}\n-\t}\n-\n \t@Bean\n \t@ConditionalOnMissingBean\n \tpublic SolrClient solrClient() {",
    "output": "Remove SolrAutoConfiguration @PreDestroy"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/solr/SolrAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/solr/SolrAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/solr/SolrAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/solr/SolrAutoConfiguration.java\n@@ -16,10 +16,6 @@\n \n package org.springframework.boot.autoconfigure.solr;\n \n-import java.io.IOException;\n-\n-import javax.annotation.PreDestroy;\n-\n import org.apache.solr.client.solrj.SolrClient;\n import org.apache.solr.client.solrj.impl.CloudSolrClient;\n import org.apache.solr.client.solrj.impl.HttpSolrClient;\n@@ -51,13 +47,6 @@ public SolrAutoConfiguration(SolrProperties properties) {\n \t\tthis.properties = properties;\n \t}\n \n-\t@PreDestroy\n-\tpublic void close() throws IOException {\n-\t\tif (this.solrClient != null) {\n-\t\t\tthis.solrClient.close();\n-\t\t}\n-\t}\n-\n \t@Bean\n \t@ConditionalOnMissingBean\n \tpublic SolrClient solrClient() {",
    "output": "Remove SolrAutoConfiguration @PreDestroy\nRemove @PreDestroy from SolrAutoConfiguration since the container will\ncall the close method anyway."
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/LaunchedURLClassLoader.java b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/LaunchedURLClassLoader.java\n--- a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/LaunchedURLClassLoader.java\n+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/LaunchedURLClassLoader.java\n@@ -50,7 +50,12 @@ public LaunchedURLClassLoader(URL[] urls, ClassLoader parent) {\n \tpublic URL findResource(String name) {\n \t\tHandler.setUseFastConnectionExceptions(true);\n \t\ttry {\n-\t\t\treturn super.findResource(name);\n+\t\t\ttry {\n+\t\t\t\treturn super.findResource(name);\n+\t\t\t}\n+\t\t\tcatch (IllegalArgumentException ex) {\n+\t\t\t\treturn null;\n+\t\t\t}\n \t\t}\n \t\tfinally {\n \t\t\tHandler.setUseFastConnectionExceptions(false);",
    "output": "Reinstate escape hatch for findResource()\nReinstate the defensive call of super.findResource() in\nLaunchedURLClassLoader."
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-maven-plugin/src/it/start-stop-fork/src/main/java/org/test/SampleApplication.java b/spring-boot-tools/spring-boot-maven-plugin/src/it/start-stop-fork/src/main/java/org/test/SampleApplication.java\n--- a/spring-boot-tools/spring-boot-maven-plugin/src/it/start-stop-fork/src/main/java/org/test/SampleApplication.java\n+++ b/spring-boot-tools/spring-boot-maven-plugin/src/it/start-stop-fork/src/main/java/org/test/SampleApplication.java\n@@ -40,7 +40,7 @@ public static void main(String[] args) throws Exception {\n \n \t\tint waitAttempts = 0;\n \t\twhile (!mbean.shutdownInvoked) {\n-\t\t\tif (waitAttempts > 10) {\n+\t\t\tif (waitAttempts > 30) {\n \t\t\t\tthrow new IllegalStateException(\n \t\t\t\t\t\t\"Shutdown should have been invoked by now\");\n \t\t\t}",
    "output": "Tweak timings for Windows build"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java b/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java\n@@ -193,7 +193,7 @@ public void customBannerWithProperties() throws Exception {\n \t\t\t\t\"--banner.location=classpath:test-banner-with-placeholder.txt\",\n \t\t\t\t\"--test.property=123456\");\n \t\tassertThat(this.output.toString())\n-\t\t\t\t.startsWith(\"Running a Test!\\n\\n123456\");\n+\t\t\t\t.startsWith(String.format(\"Running a Test!%n%n123456\"));\n \t}\n \n \t@Test",
    "output": "Fix Windows test issues"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java b/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java\n@@ -604,7 +604,7 @@ public void specificResourceDefaultsToFile() throws Exception {\n \t@Test\n \tpublic void absoluteResourceDefaultsToFile() throws Exception {\n \t\tString location = new File(\"src/test/resources/specificlocation.properties\")\n-\t\t\t\t.getAbsolutePath();\n+\t\t\t\t.getAbsolutePath().replace(\"\\\\\", \"/\");\n \t\tTestPropertySourceUtils.addInlinedPropertiesToEnvironment(this.environment,\n \t\t\t\t\"spring.config.location=\" + location);\n \t\tthis.initializer.postProcessEnvironment(this.environment, this.application);",
    "output": "Fix Windows test failures"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java\n--- a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java\n+++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java\n@@ -321,14 +321,13 @@ public void createUrlFromString() throws Exception {\n \n \t@Test\n \tpublic void createNonNestedUrlFromString() throws Exception {\n-\t\tnonNestedJarFileFromString(\n-\t\t\t\t\"jar:file:\" + this.rootJarFile.getAbsolutePath() + \"!/2.dat\");\n+\t\tnonNestedJarFileFromString(\"jar:\" + this.rootJarFile.toURI() + \"!/2.dat\");\n \t}\n \n \t@Test\n-\tpublic void createNonNestedUrlFromStringWithDoubleSlash() throws Exception {\n+\tpublic void createNonNestedUrlFromPathString() throws Exception {\n \t\tnonNestedJarFileFromString(\n-\t\t\t\t\"jar:file://\" + this.rootJarFile.getAbsolutePath() + \"!/2.dat\");\n+\t\t\t\t\"jar:\" + this.rootJarFile.toPath().toUri() + \"!/2.dat\");\n \t}\n \n \tprivate void nonNestedJarFileFromString(String spec) throws Exception {",
    "output": "Fix JarFileTests to work on Windows"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java b/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java\n@@ -193,7 +193,7 @@ public void customBannerWithProperties() throws Exception {\n \t\t\t\t\"--banner.location=classpath:test-banner-with-placeholder.txt\",\n \t\t\t\t\"--test.property=123456\");\n \t\tassertThat(this.output.toString())\n-\t\t\t\t.startsWith(String.format(\"Running a Test!%n%n123456\"));\n+\t\t\t\t.startsWith(\"Running a Test!\\n\\n123456\");\n \t}\n \n \t@Test",
    "output": "Fix some Windows build issues"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java b/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java\n@@ -193,7 +193,7 @@ public void customBannerWithProperties() throws Exception {\n \t\t\t\t\"--banner.location=classpath:test-banner-with-placeholder.txt\",\n \t\t\t\t\"--test.property=123456\");\n \t\tassertThat(this.output.toString())\n-\t\t\t\t.startsWith(String.format(\"Running a Test!%n%n123456\"));\n+\t\t\t\t.startsWith(\"Running a Test!\\n\\n123456\");\n \t}\n \n \t@Test",
    "output": "Fix some Windows build issues"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java b/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n@@ -341,10 +341,10 @@ public void errorPageFromPutRequest() throws Exception {\n \t\tthis.container = factory.getEmbeddedServletContainer(exampleServletRegistration(),\n \t\t\t\terrorServletRegistration());\n \t\tthis.container.start();\n-\t\tassertThat(getResponse(getLocalUrl(\"/hello\"), HttpMethod.PUT),\n-\t\t\t\tequalTo(\"Hello World\"));\n-\t\tassertThat(getResponse(getLocalUrl(\"/bang\"), HttpMethod.PUT),\n-\t\t\t\tequalTo(\"Hello World\"));\n+\t\tassertThat(getResponse(getLocalUrl(\"/hello\"), HttpMethod.PUT))\n+\t\t\t\t.isEqualTo(\"Hello World\");\n+\t\tassertThat(getResponse(getLocalUrl(\"/bang\"), HttpMethod.PUT))\n+\t\t\t\t.isEqualTo(\"Hello World\");\n \t}\n \n \t@Test",
    "output": "Fix merge problem"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-data-cassandra/src/test/java/sample/data/cassandra/SampleCassandraApplicationTests.java b/spring-boot-samples/spring-boot-sample-data-cassandra/src/test/java/sample/data/cassandra/SampleCassandraApplicationTests.java\n--- a/spring-boot-samples/spring-boot-sample-data-cassandra/src/test/java/sample/data/cassandra/SampleCassandraApplicationTests.java\n+++ b/spring-boot-samples/spring-boot-sample-data-cassandra/src/test/java/sample/data/cassandra/SampleCassandraApplicationTests.java\n@@ -36,7 +36,7 @@\n @RunWith(SpringRunner.class)\n @TestExecutionListeners(mergeMode = MergeMode.MERGE_WITH_DEFAULTS, listeners = {\n \t\tOrderedCassandraTestExecutionListener.class })\n-@SpringBootTest(\"spring.data.cassandra.port=9142\")\n+@SpringBootTest\n @CassandraDataSet(keyspace = \"mykeyspace\", value = \"setup.cql\")\n @EmbeddedCassandra(timeout = 60000)\n public class SampleCassandraApplicationTests {",
    "output": "Try to make SampleCassandraApplicationTests' port config more robust"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-data-gemfire/src/main/java/sample/data/gemfire/service/GemstoneServiceImpl.java b/spring-boot-samples/spring-boot-sample-data-gemfire/src/main/java/sample/data/gemfire/service/GemstoneServiceImpl.java\n--- a/spring-boot-samples/spring-boot-sample-data-gemfire/src/main/java/sample/data/gemfire/service/GemstoneServiceImpl.java\n+++ b/spring-boot-samples/spring-boot-sample-data-gemfire/src/main/java/sample/data/gemfire/service/GemstoneServiceImpl.java\n@@ -42,8 +42,8 @@ public class GemstoneServiceImpl implements GemstoneService {\n \n \tstatic {\n \t\tAPPROVED_GEMS = Collections.unmodifiableList(\n-\t\t\t\tArrays.asList(\"ALEXANDRITE,AQUAMARINE,DIAMOND,OPAL,PEARL,\"\n-\t\t\t\t\t\t+ \"RUBY,SAPPHIRE,SPINEL,TOPAZ\".split(\",\")));\n+\t\t\t\tArrays.asList((\"ALEXANDRITE,AQUAMARINE,DIAMOND,OPAL,PEARL,\"\n+\t\t\t\t\t\t+ \"RUBY,SAPPHIRE,SPINEL,TOPAZ\").split(\",\")));\n \t}\n \n \tprivate final GemstoneRepository repository;",
    "output": "Fix failing test"
  },
  {
    "input": "diff --git a/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/DevToolsDataSourceAutoConfigurationTests.java b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/DevToolsDataSourceAutoConfigurationTests.java\n--- a/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/DevToolsDataSourceAutoConfigurationTests.java\n+++ b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/DevToolsDataSourceAutoConfigurationTests.java\n@@ -68,19 +68,6 @@ public void externalDatabaseIsNotShutDown() throws SQLException {\n \t\tverify(dataSource, times(0)).getConnection();\n \t}\n \n-\t@Test\n-\tpublic void nonEmbeddedInMemoryDatabaseIsShutDown() throws SQLException {\n-\t\tConfigurableApplicationContext context = createContextWithDriver(\"org.h2.Driver\",\n-\t\t\t\tDataSourceConfiguration.class);\n-\t\tDataSource dataSource = context.getBean(DataSource.class);\n-\t\tConnection connection = mock(Connection.class);\n-\t\tgiven(dataSource.getConnection()).willReturn(connection);\n-\t\tStatement statement = mock(Statement.class);\n-\t\tgiven(connection.createStatement()).willReturn(statement);\n-\t\tcontext.close();\n-\t\tverify(statement).execute(\"SHUTDOWN\");\n-\t}\n-\n \t@Test\n \tpublic void nonEmbeddedInMemoryDatabaseConfiguredWithDriverIsShutDown()\n \t\t\tthrows SQLException {",
    "output": "Remove a duplicate test"
  },
  {
    "input": "diff --git a/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/DevToolsDataSourceAutoConfigurationTests.java b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/DevToolsDataSourceAutoConfigurationTests.java\n--- a/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/DevToolsDataSourceAutoConfigurationTests.java\n+++ b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/DevToolsDataSourceAutoConfigurationTests.java\n@@ -68,19 +68,6 @@ public void externalDatabaseIsNotShutDown() throws SQLException {\n \t\tverify(dataSource, times(0)).getConnection();\n \t}\n \n-\t@Test\n-\tpublic void nonEmbeddedInMemoryDatabaseIsShutDown() throws SQLException {\n-\t\tConfigurableApplicationContext context = createContextWithDriver(\"org.h2.Driver\",\n-\t\t\t\tDataSourceConfiguration.class);\n-\t\tDataSource dataSource = context.getBean(DataSource.class);\n-\t\tConnection connection = mock(Connection.class);\n-\t\tgiven(dataSource.getConnection()).willReturn(connection);\n-\t\tStatement statement = mock(Statement.class);\n-\t\tgiven(connection.createStatement()).willReturn(statement);\n-\t\tcontext.close();\n-\t\tverify(statement).execute(\"SHUTDOWN\");\n-\t}\n-\n \t@Test\n \tpublic void nonEmbeddedInMemoryDatabaseConfiguredWithDriverIsShutDown()\n \t\t\tthrows SQLException {",
    "output": "Remove a duplicate test"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/NoUniqueBeanDefinitionExceptionFailureAnalyzer.java b/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/NoUniqueBeanDefinitionExceptionFailureAnalyzer.java\n--- a/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/NoUniqueBeanDefinitionExceptionFailureAnalyzer.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/NoUniqueBeanDefinitionExceptionFailureAnalyzer.java\n@@ -64,7 +64,6 @@ protected FailureAnalysis analyze(Throwable rootFailure,\n \t\tmessage.append(String.format(\"%s required a single bean, but %d were found:%n\",\n \t\t\t\tgetConsumerDescription(unsatisfiedDependency), beanNames.length));\n \t\tfor (String beanName : beanNames) {\n-\t\t\tunsatisfiedDependency.getInjectionPoint();\n \t\t\ttry {\n \t\t\t\tBeanDefinition beanDefinition = this.beanFactory\n \t\t\t\t\t\t.getMergedBeanDefinition(beanName);",
    "output": "Remove unused unsatisfiedDependency.getInjectionPoint() call"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/NoUniqueBeanDefinitionExceptionFailureAnalyzer.java b/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/NoUniqueBeanDefinitionExceptionFailureAnalyzer.java\n--- a/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/NoUniqueBeanDefinitionExceptionFailureAnalyzer.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/NoUniqueBeanDefinitionExceptionFailureAnalyzer.java\n@@ -64,7 +64,6 @@ protected FailureAnalysis analyze(Throwable rootFailure,\n \t\tmessage.append(String.format(\"%s required a single bean, but %d were found:%n\",\n \t\t\t\tgetConsumerDescription(unsatisfiedDependency), beanNames.length));\n \t\tfor (String beanName : beanNames) {\n-\t\t\tunsatisfiedDependency.getInjectionPoint();\n \t\t\ttry {\n \t\t\t\tBeanDefinition beanDefinition = this.beanFactory\n \t\t\t\t\t\t.getMergedBeanDefinition(beanName);",
    "output": "Remove unused unsatisfiedDependency.getInjectionPoint() call"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java\n@@ -68,6 +68,7 @@\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Import;\n import org.springframework.http.HttpMethod;\n+import org.springframework.http.HttpStatus;\n import org.springframework.http.client.ClientHttpRequest;\n import org.springframework.http.client.ClientHttpResponse;\n import org.springframework.http.client.SimpleClientHttpRequestFactory;\n@@ -496,6 +497,9 @@ public void assertContent(String url, int port, Object expected) throws Exceptio\n \t\t\t\t.createRequest(new URI(\"http://localhost:\" + port + url), HttpMethod.GET);\n \t\ttry {\n \t\t\tClientHttpResponse response = request.execute();\n+\t\t\tif (HttpStatus.NOT_FOUND.equals(response.getStatusCode())) {\n+\t\t\t\tthrow new FileNotFoundException();\n+\t\t\t}\n \t\t\ttry {\n \t\t\t\tString actual = StreamUtils.copyToString(response.getBody(),\n \t\t\t\t\t\tCharset.forName(\"UTF-8\"));",
    "output": "Fix failing test due to SPR-14093"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelector.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelector.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelector.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfigurationImportSelector.java\n@@ -140,8 +140,12 @@ protected Class<?> getAnnotationClass() {\n \t */\n \tprotected List<String> getCandidateConfigurations(AnnotationMetadata metadata,\n \t\t\tAnnotationAttributes attributes) {\n-\t\treturn SpringFactoriesLoader.loadFactoryNames(\n+\t\tList<String> configurations = SpringFactoriesLoader.loadFactoryNames(\n \t\t\t\tgetSpringFactoriesLoaderFactoryClass(), getBeanClassLoader());\n+\t\tAssert.notEmpty(configurations,\n+\t\t\t\t\"No auto configuration classes found in META-INF/spring.factories. If you\" +\n+\t\t\t\t\t\t\"are using a custom packaging, make sure that file is correct.\");\n+\t\treturn configurations;\n \t}\n \n \t/**",
    "output": "Polish contribution\nAdd check for non empty list of factories"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2015 the original author or authors.\n+ * Copyright 2012-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -473,7 +473,15 @@ private PropertySource<?> loadIntoGroup(String identifier, String location,\n \t\t\t\tmsg.append(\"Skipped \");\n \t\t\t}\n \t\t\tmsg.append(\"config file \");\n-\t\t\tmsg.append(\"'\").append(location).append(\"'\");\n+\t\t\tString resourceDescription;\n+\t\t\ttry {\n+\t\t\t\tresourceDescription = String.format(\"'%s' (%s)\",\n+\t\t\t\t\t\tresource.getURI().toASCIIString(), location);\n+\t\t\t}\n+\t\t\tcatch (IOException ex) {\n+\t\t\t\tresourceDescription = String.format(\"'%s'\", location);\n+\t\t\t}\n+\t\t\tmsg.append(resourceDescription);\n \t\t\tif (StringUtils.hasLength(profile)) {\n \t\t\t\tmsg.append(\" for profile \").append(profile);\n \t\t\t}",
    "output": "Improve location diagnostics in ConfigFileApplicationListener"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceTransactionManagerAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceTransactionManagerAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceTransactionManagerAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceTransactionManagerAutoConfiguration.java\n@@ -65,7 +65,7 @@ public DataSourceTransactionManager transactionManager() {\n \n \t@ConditionalOnMissingBean(AbstractTransactionManagementConfiguration.class)\n \t@Configuration\n-\t@EnableTransactionManagement\n+\t@EnableTransactionManagement(proxyTargetClass = true)\n \tprotected static class TransactionManagementConfiguration {\n \n \t}",
    "output": "Set \"proxy target class\" for transaction managers\nUpdate `@EnableTransactionManagement` so that `proxyTargetClass` is\nset to true. This ensures that @Transactional beans that aren't\ninterface based can still be proxied."
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/LogFileMvcEndpoint.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/LogFileMvcEndpoint.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/LogFileMvcEndpoint.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/LogFileMvcEndpoint.java\n@@ -147,6 +147,12 @@ private static class Handler extends ResourceHttpRequestHandler {\n \n \t\tHandler(Resource resource) {\n \t\t\tthis.resource = resource;\n+\t\t\ttry {\n+\t\t\t\tafterPropertiesSet();\n+\t\t\t}\n+\t\t\tcatch (Exception ex) {\n+\t\t\t\tthrow new IllegalStateException(ex);\n+\t\t\t}\n \t\t}\n \n \t\t@Override",
    "output": "Call afterProperties set in LogFileMvcEndpoint\nCall afterPropertiesSet on the delegate `ResourceHttpRequestHandler`\nto prevent an NPE. This change is required following SPR-13834."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java\n@@ -43,6 +43,7 @@\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnJava;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n import org.springframework.boot.autoconfigure.template.TemplateLocation;\n@@ -68,6 +69,7 @@\n @Configuration\n @EnableConfigurationProperties(ThymeleafProperties.class)\n @ConditionalOnClass(SpringTemplateEngine.class)\n+@ConditionalOnMissingClass(\"org.thymeleaf.templatemode.TemplateMode\")\n @AutoConfigureAfter(WebMvcAutoConfiguration.class)\n public class ThymeleafAutoConfiguration {\n ",
    "output": "Prevent Thymeleaf to be configured with Thymeleaf 3\nSpring Boot does not support Thymeleaf 3 yet. This commit prevents the\nauto-configuration to activate if Thymeleaf 3 is available on the\nclasspath."
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-data-redis/src/test/java/sample/data/redis/SampleRedisApplicationTests.java b/spring-boot-samples/spring-boot-sample-data-redis/src/test/java/sample/data/redis/SampleRedisApplicationTests.java\n--- a/spring-boot-samples/spring-boot-sample-data-redis/src/test/java/sample/data/redis/SampleRedisApplicationTests.java\n+++ b/spring-boot-samples/spring-boot-sample-data-redis/src/test/java/sample/data/redis/SampleRedisApplicationTests.java\n@@ -39,7 +39,7 @@ public void testDefaultSettings() throws Exception {\n \t\ttry {\n \t\t\tSampleRedisApplication.main(new String[0]);\n \t\t}\n-\t\tcatch (IllegalStateException ex) {\n+\t\tcatch (Exception ex) {\n \t\t\tif (!redisServerRunning(ex)) {\n \t\t\t\treturn;\n \t\t\t}",
    "output": "Fix tests that fail when Redis is unavailable"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/BuildInfoMojo.java b/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/BuildInfoMojo.java\n--- a/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/BuildInfoMojo.java\n+++ b/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/BuildInfoMojo.java\n@@ -34,13 +34,13 @@\n import org.apache.maven.project.MavenProject;\n \n /**\n- * Generate a {@code build.properties} file based the content of the {@link MavenProject}.\n+ * Generate a {@code build.properties} file based the content of the current {@link MavenProject}.\n  *\n  * @author Stephane Nicoll\n  * @since 1.4.0\n  */\n-@Mojo(name = \"generate-build-info\", defaultPhase = LifecyclePhase.GENERATE_RESOURCES, threadSafe = true)\n-public class GenerateBuildInfoMojo extends AbstractMojo {\n+@Mojo(name = \"build-info\", defaultPhase = LifecyclePhase.GENERATE_RESOURCES, threadSafe = true)\n+public class BuildInfoMojo extends AbstractMojo {\n \n \t/**\n \t * The Maven project.",
    "output": "Rename Maven plugin mojo\nRename the goal from `generate-build-info` to `build-info` for consistency."
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfigurationTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfigurationTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfigurationTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfigurationTests.java\n@@ -175,7 +175,7 @@ public static class TestConfiguration {\n \n \t@Component\n \t@ManagedResource\n-\tprotected static class ManagedEndpoint extends AbstractEndpoint<Boolean> {\n+\tpublic static class ManagedEndpoint extends AbstractEndpoint<Boolean> {\n \n \t\tpublic ManagedEndpoint() {\n \t\t\tsuper(\"managed\", true);\n@@ -190,7 +190,7 @@ public Boolean invoke() {\n \n \t@Configuration\n \t@ManagedResource\n-\tprotected static class NestedInManagedEndpoint {\n+\tpublic static class NestedInManagedEndpoint {\n \n \t\t@Bean\n \t\tpublic Endpoint<Boolean> nested() {",
    "output": "Fix build\n`@ManagedResource` annotated bean must be public."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/couchbase/CouchbaseAutoConfiguration.java\n@@ -51,10 +51,15 @@\n @EnableConfigurationProperties(CouchbaseProperties.class)\n public class CouchbaseAutoConfiguration {\n \n-\t@Bean\n-\t@ConditionalOnBean(Validator.class)\n-\tpublic ValidatingCouchbaseEventListener validationEventListener(Validator validator) {\n-\t\treturn new ValidatingCouchbaseEventListener(validator);\n+\t@Configuration\n+\t@ConditionalOnClass(Validator.class)\n+\tpublic static class ValidationConfiguration {\n+\n+\t\t@Bean\n+\t\t@ConditionalOnBean(Validator.class)\n+\t\tpublic ValidatingCouchbaseEventListener validationEventListener(Validator validator) {\n+\t\t\treturn new ValidatingCouchbaseEventListener(validator);\n+\t\t}\n \t}\n \n \t@Configuration",
    "output": "Properly guard validation support\nPrevent the validation support to kick in if the Validation API is not\navailable."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/info/ProjectInfoAutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/info/ProjectInfoAutoConfigurationTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/info/ProjectInfoAutoConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/info/ProjectInfoAutoConfigurationTests.java\n@@ -59,7 +59,7 @@ public void gitLocationTakesPrecedenceOverLegacyKey() {\n \t\tGitInfo gitInfo = this.context.getBean(GitInfo.class);\n \t\tassertThat(gitInfo.getBranch()).isNull();\n \t\tassertThat(gitInfo.getCommit().getId()).isEqualTo(\"f95038e\");\n-\t\tassertThat(gitInfo.getCommit().getTime()).isEqualTo(\"2016-03-03T10:02:00+0100\");\n+\t\tassertThat(gitInfo.getCommit().getTime().getTime()).isEqualTo(1456995720000L);\n \t}\n \n \t@Test\n@@ -68,7 +68,7 @@ public void gitLegacyKeyIsUsedAsFallback() {\n \t\tGitInfo gitInfo = this.context.getBean(GitInfo.class);\n \t\tassertThat(gitInfo.getBranch()).isEqualTo(\"master\");\n \t\tassertThat(gitInfo.getCommit().getId()).isEqualTo(\"5009933\");\n-\t\tassertThat(gitInfo.getCommit().getTime()).isEqualTo(\"2016-03-04T16:04:10+0100\");\n+\t\tassertThat(gitInfo.getCommit().getTime().getTime()).isEqualTo(1457103850000L);\n \t}\n \n \t@Test",
    "output": "Fix build\nAssert using epoch time"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/info/ProjectInfoAutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/info/ProjectInfoAutoConfigurationTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/info/ProjectInfoAutoConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/info/ProjectInfoAutoConfigurationTests.java\n@@ -59,7 +59,7 @@ public void gitLocationTakesPrecedenceOverLegacyKey() {\n \t\tGitInfo gitInfo = this.context.getBean(GitInfo.class);\n \t\tassertThat(gitInfo.getBranch()).isNull();\n \t\tassertThat(gitInfo.getCommit().getId()).isEqualTo(\"f95038e\");\n-\t\tassertThat(gitInfo.getCommit().getTime()).isEqualTo(\"2016-03-03T10:02:00\");\n+\t\tassertThat(gitInfo.getCommit().getTime()).isEqualTo(\"2016-03-03T10:02:00+0100\");\n \t}\n \n \t@Test\n@@ -68,7 +68,7 @@ public void gitLegacyKeyIsUsedAsFallback() {\n \t\tGitInfo gitInfo = this.context.getBean(GitInfo.class);\n \t\tassertThat(gitInfo.getBranch()).isEqualTo(\"master\");\n \t\tassertThat(gitInfo.getCommit().getId()).isEqualTo(\"5009933\");\n-\t\tassertThat(gitInfo.getCommit().getTime()).isEqualTo(\"2016-03-04T16:04:10\");\n+\t\tassertThat(gitInfo.getCommit().getTime()).isEqualTo(\"2016-03-04T16:04:10+0100\");\n \t}\n \n \t@Test",
    "output": "Fix build\nAdd TimeZone in date assertion"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-secure-oauth2/src/test/java/sample/secure/oauth2/SampleSecureOAuth2ApplicationTests.java b/spring-boot-samples/spring-boot-sample-secure-oauth2/src/test/java/sample/secure/oauth2/SampleSecureOAuth2ApplicationTests.java\n--- a/spring-boot-samples/spring-boot-sample-secure-oauth2/src/test/java/sample/secure/oauth2/SampleSecureOAuth2ApplicationTests.java\n+++ b/spring-boot-samples/spring-boot-sample-secure-oauth2/src/test/java/sample/secure/oauth2/SampleSecureOAuth2ApplicationTests.java\n@@ -108,7 +108,7 @@ public void useAppSecretsPlusUserAccountToGetBearerToken() throws Exception {\n \t\t\t\t.perform(get(\"/flights/1\").accept(MediaTypes.HAL_JSON)\n \t\t\t\t\t\t.header(\"Authorization\", \"Bearer \" + accessToken))\n \t\t\t\t.andExpect(\n-\t\t\t\t\t\theader().string(\"Content-Type\", MediaTypes.HAL_JSON.toString()))\n+\t\t\t\t\t\theader().string(\"Content-Type\", MediaTypes.HAL_JSON.toString() + \";charset=UTF-8\"))\n \t\t\t\t.andExpect(status().isOk()).andDo(print()).andReturn();\n \n \t\tFlight flight = this.objectMapper.readValue(",
    "output": "Fix failing Content-Type related test after SPR-13631 changes"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-cache/src/main/java/sample/cache/CacheManagerCheck.java b/spring-boot-samples/spring-boot-sample-cache/src/main/java/sample/cache/CacheManagerCheck.java\n--- a/spring-boot-samples/spring-boot-sample-cache/src/main/java/sample/cache/CacheManagerCheck.java\n+++ b/spring-boot-samples/spring-boot-sample-cache/src/main/java/sample/cache/CacheManagerCheck.java\n@@ -27,8 +27,7 @@\n @Component\n public class CacheManagerCheck implements CommandLineRunner {\n \n-\tprivate static final Logger logger = LoggerFactory\n-\t\t\t.getLogger(SampleCacheApplication.class);\n+\tprivate static final Logger logger = LoggerFactory.getLogger(CacheManagerCheck.class);\n \n \tprivate final CacheManager cacheManager;\n ",
    "output": "Fix logger classname"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-cache/src/main/java/sample/cache/CacheManagerCheck.java b/spring-boot-samples/spring-boot-sample-cache/src/main/java/sample/cache/CacheManagerCheck.java\n--- a/spring-boot-samples/spring-boot-sample-cache/src/main/java/sample/cache/CacheManagerCheck.java\n+++ b/spring-boot-samples/spring-boot-sample-cache/src/main/java/sample/cache/CacheManagerCheck.java\n@@ -27,8 +27,7 @@\n @Component\n public class CacheManagerCheck implements CommandLineRunner {\n \n-\tprivate static final Logger logger = LoggerFactory\n-\t\t\t.getLogger(SampleCacheApplication.class);\n+\tprivate static final Logger logger = LoggerFactory.getLogger(CacheManagerCheck.class);\n \n \tprivate final CacheManager cacheManager;\n ",
    "output": "Fix logger classname"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystemTests.java b/spring-boot/src/test/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystemTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystemTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystemTests.java\n@@ -26,7 +26,6 @@\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.apache.logging.log4j.core.config.Configuration;\n-import org.apache.logging.log4j.core.config.FileConfigurationMonitor;\n import org.hamcrest.Matcher;\n import org.hamcrest.Matchers;\n import org.junit.Before;\n@@ -104,10 +103,7 @@ public void testNonDefaultConfigLocation() throws Exception {\n \t\tassertThat(new File(tmpDir() + \"/tmp.log\").exists()).isFalse();\n \t\tassertThat(configuration.getConfigurationSource().getFile().getAbsolutePath())\n \t\t\t\t.contains(\"log4j2-nondefault.xml\");\n-\t\t// we assume that \"log4j2-nondefault.xml\" contains the 'monitorInterval'\n-\t\t// attribute, so we check that a monitor is created\n-\t\tassertThat(configuration.getConfigurationMonitor())\n-\t\t\t\t.isInstanceOf(FileConfigurationMonitor.class);\n+\t\tassertThat(configuration.getWatchManager().getIntervalSeconds()).isEqualTo(30);\n \t}\n \n \t@Test(expected = IllegalStateException.class)",
    "output": "Upgrade to Log4j2 2.5"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2015 the original author or authors.\n+ * Copyright 2012-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -661,8 +661,7 @@ private static class Jetty92GzipHandlerFactory implements GzipHandlerFactory {\n \t\tpublic HandlerWrapper createGzipHandler(Compression compression) {\n \t\t\tGzipHandler gzipHandler = new GzipHandler();\n \t\t\tgzipHandler.setMinGzipSize(compression.getMinResponseSize());\n-\t\t\tgzipHandler.setMimeTypes(\n-\t\t\t\t\tnew HashSet<String>(Arrays.asList(compression.getMimeTypes())));\n+\t\t\tgzipHandler.addIncludedMimeTypes(compression.getMimeTypes());\n \t\t\tif (compression.getExcludedUserAgents() != null) {\n \t\t\t\tgzipHandler.setExcluded(new HashSet<String>(\n \t\t\t\t\t\tArrays.asList(compression.getExcludedUserAgents())));",
    "output": "Upgrade to Jetty 9.2.15.v20160210\nUpgrade to Jetty 9.2.15 and replace use of API that was deprecated\nand changed to throw an UnsupportedOperationException in the same\nrelease."
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java b/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java\n--- a/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java\n@@ -122,6 +122,7 @@ protected void loadDefaults(LoggingInitializationContext initializationContext,\n \t\t\t\t\t\t\"${logging.pattern.level:${LOG_LEVEL_PATTERN:%5p}}\"));\n \t\tnew DefaultLogbackConfiguration(initializationContext, logFile)\n \t\t\t\t.apply(configurator);\n+\t\tcontext.setPackagingDataEnabled(true);\n \t}\n \n \t@Override",
    "output": "Upgrade to Logback 1.1.5"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfigurationTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfigurationTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfigurationTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfigurationTests.java\n@@ -86,11 +86,14 @@ public void testDisabledPlugins() throws Exception {\n \t\tPluginLifeCycle lifeCycle = this.context.getBean(PluginLifeCycle.class);\n \t\tassertThat(lifeCycle).isNotNull();\n \t\tassertThat(lifeCycle.getContext().getPlugins(TermIOHandler.class))\n-\t\t\t\t.filteredOn(Matched.when(isA(ProcessorIOHandler.class))).isEmpty();\n+\t\t\t\t.filteredOn(Matched.<TermIOHandler>when(isA(ProcessorIOHandler.class)))\n+\t\t\t\t.isEmpty();\n \t\tassertThat(lifeCycle.getContext().getPlugins(AuthenticationPlugin.class))\n-\t\t\t\t.filteredOn(Matched.when(isA(JaasAuthenticationPlugin.class))).isEmpty();\n+\t\t\t\t.filteredOn(Matched\n+\t\t\t\t\t\t.<AuthenticationPlugin>when(isA(JaasAuthenticationPlugin.class)))\n+\t\t\t\t.isEmpty();\n \t\tassertThat(lifeCycle.getContext().getPlugins(Language.class))\n-\t\t\t\t.filteredOn(Matched.when(isA(JavaLanguage.class))).isEmpty();\n+\t\t\t\t.filteredOn(Matched.<Language>when(isA(JavaLanguage.class))).isEmpty();\n \t}\n \n \t@Test",
    "output": "Placate javac and its inferior type inferencing\nThe Eclipse compiler is perfectly happy with the original code, but\njavac is not. This commit adds some explicit typing to keep javac\nhappy."
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcHypermediaManagementContextConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcHypermediaManagementContextConfiguration.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcHypermediaManagementContextConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcHypermediaManagementContextConfiguration.java\n@@ -339,7 +339,7 @@ public Map<String, Object> getEmbedded() {\n \n \tstatic class EndpointHypermediaEnabledCondition extends AnyNestedCondition {\n \n-\t\tpublic EndpointHypermediaEnabledCondition() {\n+\t\tEndpointHypermediaEnabledCondition() {\n \t\t\tsuper(ConfigurationPhase.REGISTER_BEAN);\n \t\t}\n ",
    "output": "Remove redundant public modifier"
  },
  {
    "input": "diff --git a/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java b/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java\n--- a/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java\n+++ b/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java\n@@ -243,7 +243,8 @@ private String buildImage(DockerClient docker) {\n \t\tBuildImageResultCallback resultCallback = new BuildImageResultCallback();\n \t\tString dockerfile = \"src/test/resources/conf/\" + this.os + \"/\" + this.version\n \t\t\t\t+ \"/Dockerfile\";\n-\t\tdocker.buildImageCmd(new File(dockerfile)).exec(resultCallback);\n+\t\tString tag = \"spring-boot-it/\" + this.os.toLowerCase() + \":\" + this.version;\n+\t\tdocker.buildImageCmd(new File(dockerfile)).withTag(tag).exec(resultCallback);\n \t\tString imageId = resultCallback.awaitImageId();\n \t\treturn imageId;\n \t}",
    "output": "Tag Docker images created by launch script integration tests"
  },
  {
    "input": "diff --git a/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java b/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java\n--- a/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java\n+++ b/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java\n@@ -243,7 +243,8 @@ private String buildImage(DockerClient docker) {\n \t\tBuildImageResultCallback resultCallback = new BuildImageResultCallback();\n \t\tString dockerfile = \"src/test/resources/conf/\" + this.os + \"/\" + this.version\n \t\t\t\t+ \"/Dockerfile\";\n-\t\tdocker.buildImageCmd(new File(dockerfile)).exec(resultCallback);\n+\t\tString tag = \"spring-boot-it/\" + this.os.toLowerCase() + \":\" + this.version;\n+\t\tdocker.buildImageCmd(new File(dockerfile)).withTag(tag).exec(resultCallback);\n \t\tString imageId = resultCallback.awaitImageId();\n \t\treturn imageId;\n \t}",
    "output": "Tag Docker images created by launch script integration tests"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-servlet/src/main/java/sample/servlet/SampleServletApplication.java b/spring-boot-samples/spring-boot-sample-servlet/src/main/java/sample/servlet/SampleServletApplication.java\n--- a/spring-boot-samples/spring-boot-sample-servlet/src/main/java/sample/servlet/SampleServletApplication.java\n+++ b/spring-boot-samples/spring-boot-sample-servlet/src/main/java/sample/servlet/SampleServletApplication.java\n@@ -25,13 +25,13 @@\n import javax.servlet.ServletResponse;\n \n import org.springframework.boot.SpringApplication;\n-import org.springframework.boot.SpringBootConfiguration;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.builder.SpringApplicationBuilder;\n import org.springframework.boot.context.web.SpringBootServletInitializer;\n import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n \n-@SpringBootConfiguration\n+@Configuration\n @EnableAutoConfiguration\n public class SampleServletApplication extends SpringBootServletInitializer {\n ",
    "output": "Fix packages and annotations used in sample\nFixup accidental error in previous commit."
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/JolokiaAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/JolokiaAutoConfiguration.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/JolokiaAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/JolokiaAutoConfiguration.java\n@@ -39,6 +39,7 @@\n import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.core.type.AnnotatedTypeMetadata;\n+import org.springframework.web.servlet.mvc.ServletWrappingController;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for embedding Jolokia, a JMX-HTTP\n@@ -61,7 +62,7 @@\n  */\n @Configuration\n @ConditionalOnWebApplication\n-@ConditionalOnClass({ AgentServlet.class })\n+@ConditionalOnClass({ AgentServlet.class, ServletWrappingController.class })\n @Conditional(JolokiaCondition.class)\n @AutoConfigureBefore(ManagementWebSecurityAutoConfiguration.class)\n @AutoConfigureAfter(EmbeddedServletContainerAutoConfiguration.class)",
    "output": "Do not try to auto-configure Jolokia if Spring MVC is not on classpath\nThe Jolokia auto-configuration requires ServletWrappingController from\nSpring MVC to be on the classpath. This commit updates the\nauto-configuration to make it conditional on the presence of this\nclass."
  },
  {
    "input": "diff --git a/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java b/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java\n--- a/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java\n+++ b/spring-boot-integration-tests/spring-boot-launch-script-tests/src/test/java/org/springframework/boot/launchscript/SysVinitLaunchScriptIT.java\n@@ -48,7 +48,6 @@\n import org.junit.runners.Parameterized.Parameters;\n \n import org.springframework.boot.ansi.AnsiColor;\n-import org.springframework.boot.testutil.Matched;\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.hamcrest.Matchers.containsString;\n@@ -285,7 +284,14 @@ private File findApplication() {\n \n \tprivate Condition<String> coloredString(AnsiColor color, String string) {\n \t\tString colorString = ESC + \"[0;\" + color + \"m\" + string + ESC + \"[0m\";\n-\t\treturn Matched.by(containsString(colorString));\n+\t\treturn new Condition<String>() {\n+\n+\t\t\t@Override\n+\t\t\tpublic boolean matches(String value) {\n+\t\t\t\treturn containsString(colorString).matches(value);\n+\t\t\t}\n+\n+\t\t};\n \t}\n \n \tprivate String extractPid(String output) {",
    "output": "Fix spring-boot-launch-script-tests dependency\nRemove the reference to the spring-boot:test jar since it's not\npublished."
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-data-couchbase/src/test/java/sample/data/couchbase/SampleCouchbaseApplicationTests.java b/spring-boot-samples/spring-boot-sample-data-couchbase/src/test/java/sample/data/couchbase/SampleCouchbaseApplicationTests.java\n--- a/spring-boot-samples/spring-boot-sample-data-couchbase/src/test/java/sample/data/couchbase/SampleCouchbaseApplicationTests.java\n+++ b/spring-boot-samples/spring-boot-sample-data-couchbase/src/test/java/sample/data/couchbase/SampleCouchbaseApplicationTests.java\n@@ -20,7 +20,7 @@ public class SampleCouchbaseApplicationTests {\n \tpublic void testDefaultSettings() throws Exception {\n \t\ttry {\n \t\t\tnew SpringApplicationBuilder(SampleCouchbaseApplication.class)\n-\t\t\t\t\t.run();\n+\t\t\t\t\t.run(\"--server.port=0\");\n \t\t}\n \t\tcatch (RuntimeException ex) {\n \t\t\tif (serverNotRunning(ex)) {",
    "output": "Use a random server port in the Couchbase sample’s tests"
  },
  {
    "input": "diff --git a/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/RestarterTests.java b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/RestarterTests.java\n--- a/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/RestarterTests.java\n+++ b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/RestarterTests.java\n@@ -97,7 +97,7 @@ public void run() {\n \t\tString output = this.out.toString();\n \t\tassertThat(StringUtils.countOccurrencesOf(output, \"Tick 0\")).isGreaterThan(1);\n \t\tassertThat(StringUtils.countOccurrencesOf(output, \"Tick 1\")).isGreaterThan(1);\n-\t\tassertThat(CloseCountingApplicationListener.closed).isGreaterThan(1);\n+\t\tassertThat(CloseCountingApplicationListener.closed).isGreaterThan(0);\n \t}\n \n \t@Test",
    "output": "There may only be a single restart during RestarterTests.testRestart()\nand changes in 2522a5f"
  },
  {
    "input": "diff --git a/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/DevToolsDataSourceAutoConfiguration.java b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/DevToolsDataSourceAutoConfiguration.java\n--- a/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/DevToolsDataSourceAutoConfiguration.java\n+++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/DevToolsDataSourceAutoConfiguration.java\n@@ -64,7 +64,7 @@ static final class NonEmbeddedInMemoryDatabaseShutdownExecutor\n \n \t\tprivate final DataSourceProperties dataSourceProperties;\n \n-\t\tpublic NonEmbeddedInMemoryDatabaseShutdownExecutor(DataSource dataSource,\n+\t\tNonEmbeddedInMemoryDatabaseShutdownExecutor(DataSource dataSource,\n \t\t\t\tDataSourceProperties dataSourceProperties) {\n \t\t\tthis.dataSource = dataSource;\n \t\t\tthis.dataSourceProperties = dataSourceProperties;",
    "output": "Remove redundant public modifier"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/test/OutputCapture.java b/spring-boot/src/main/java/org/springframework/boot/test/OutputCapture.java\n--- a/spring-boot/src/main/java/org/springframework/boot/test/OutputCapture.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/test/OutputCapture.java\n@@ -24,6 +24,7 @@\n import java.util.List;\n \n import org.hamcrest.Matcher;\n+import org.junit.Assert;\n import org.junit.rules.TestRule;\n import org.junit.runner.Description;\n import org.junit.runners.model.Statement;\n@@ -32,7 +33,6 @@\n import org.springframework.boot.ansi.AnsiOutput.Enabled;\n \n import static org.hamcrest.Matchers.allOf;\n-import static org.junit.Assert.assertThat;\n \n /**\n  * JUnit {@code @Rule} to capture output from System.out and System.err.\n@@ -63,7 +63,7 @@ public void evaluate() throws Throwable {\n \t\t\t\t\ttry {\n \t\t\t\t\t\tif (!OutputCapture.this.matchers.isEmpty()) {\n \t\t\t\t\t\t\tString output = OutputCapture.this.toString();\n-\t\t\t\t\t\t\tassertThat(output, allOf(OutputCapture.this.matchers));\n+\t\t\t\t\t\t\tAssert.assertThat(output, allOf(OutputCapture.this.matchers));\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t\tfinally {",
    "output": "Add AssertJ checkstyle rule"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/logging/logback/SpringBootJoranConfiguratorTests.java b/spring-boot/src/test/java/org/springframework/boot/logging/logback/SpringBootJoranConfiguratorTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/logging/logback/SpringBootJoranConfiguratorTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/logging/logback/SpringBootJoranConfiguratorTests.java\n@@ -16,6 +16,7 @@\n \n package org.springframework.boot.logging.logback;\n \n+import ch.qos.logback.classic.BasicConfigurator;\n import ch.qos.logback.classic.LoggerContext;\n import ch.qos.logback.classic.joran.JoranConfigurator;\n import ch.qos.logback.core.joran.spi.JoranException;\n@@ -69,7 +70,8 @@ public void setup() {\n \n \t@After\n \tpublic void reset() {\n-\t\tthis.context.reset();\n+\t\tthis.context.stop();\n+\t\tBasicConfigurator.configureDefaultContext();\n \t}\n \n \t@Test",
    "output": "Ensure logback is reset after test\nUpdate SpringBootJoranConfiguratorTests to ensure that logback\nis left in a sane state. Prior to this commit, running all tests\nin eclipse would fail due to ErrorPageFilterTests expecting\nspecific log output."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DatabaseDriver.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DatabaseDriver.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DatabaseDriver.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DatabaseDriver.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2015 the original author or authors.\n+ * Copyright 2012-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -62,7 +62,7 @@ enum DatabaseDriver {\n \t/**\n \t * Maria DB.\n \t */\n-\tMARIADB(\"org.mariadb.jdbc.Driver\", \"org.mariadb.jdbc.MySQLDataSource\"),\n+\tMARIADB(\"org.mariadb.jdbc.Driver\", \"org.mariadb.jdbc.MariaDbDataSource\"),\n \n \t/**\n \t * Google App Engine.",
    "output": "Fix MariaDB driver class name"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DatabaseDriver.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DatabaseDriver.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DatabaseDriver.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DatabaseDriver.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2015 the original author or authors.\n+ * Copyright 2012-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -62,7 +62,7 @@ enum DatabaseDriver {\n \t/**\n \t * Maria DB.\n \t */\n-\tMARIADB(\"org.mariadb.jdbc.Driver\", \"org.mariadb.jdbc.MySQLDataSource\"),\n+\tMARIADB(\"org.mariadb.jdbc.Driver\", \"org.mariadb.jdbc.MariaDbDataSource\"),\n \n \t/**\n \t * Google App Engine.",
    "output": "Fix MariaDB driver class name"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n--- a/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n@@ -406,7 +406,9 @@ private <T> List<T> createSpringFactoriesInstances(Class<T> type,\n \t\t\ttry {\n \t\t\t\tClass<?> instanceClass = ClassUtils.forName(name, classLoader);\n \t\t\t\tAssert.isAssignable(type, instanceClass);\n-\t\t\t\tConstructor<?> constructor = instanceClass.getConstructor(parameterTypes);\n+\t\t\t\tConstructor<?> constructor = instanceClass\n+\t\t\t\t\t\t.getDeclaredConstructor(parameterTypes);\n+\t\t\t\tconstructor.setAccessible(true);\n \t\t\t\tT instance = (T) constructor.newInstance(args);\n \t\t\t\tinstances.add(instance);\n \t\t\t}",
    "output": "Allow  package private spring.factories classes\nUpdate SpringApplication to allow classes loaded from spring.factories\nto be package private."
  },
  {
    "input": "diff --git a/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java\n--- a/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java\n+++ b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2015 the original author or authors.\n+ * Copyright 2012-2016 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -59,7 +59,7 @@ public class WarPackagingTests {\n \t\t\t\t\t\"asm-\", \"javax.websocket-api-\", \"asm-tree-\", \"asm-commons-\",\n \t\t\t\t\t\"websocket-common-\", \"jetty-annotations-\",\n \t\t\t\t\t\"javax-websocket-client-impl-\", \"websocket-client-\",\n-\t\t\t\t\t\"websocket-server-\", \"jetty-jndi-\", \"jetty-xml-\",\n+\t\t\t\t\t\"websocket-server-\", \"jetty-xml-\",\n \t\t\t\t\t\"websocket-servlet-\"));\n \n \tprivate static final String BOOT_VERSION = Versions.getBootVersion();",
    "output": "Fix broken build\njetty-jndi is no longer shipped by default as of 2b2e21d but one test\nchecking for this wasn't updated properly."
  },
  {
    "input": "diff --git a/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/Restarter.java b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/Restarter.java\n--- a/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/Restarter.java\n+++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/Restarter.java\n@@ -525,12 +525,16 @@ public static void initialize(String[] args, boolean forceReferenceCleanup,\n \tpublic static void initialize(String[] args, boolean forceReferenceCleanup,\n \t\t\tRestartInitializer initializer, boolean restartOnInitialize,\n \t\t\tRestartListener... listeners) {\n-\t\tif (instance == null) {\n-\t\t\tsynchronized (Restarter.class) {\n-\t\t\t\tinstance = new Restarter(Thread.currentThread(), args,\n+\t\tRestarter localInstance = null;\n+\t\tsynchronized (Restarter.class) {\n+\t\t\tif (instance == null) {\n+\t\t\t\tlocalInstance = new Restarter(Thread.currentThread(), args,\n \t\t\t\t\t\tforceReferenceCleanup, initializer, listeners);\n+\t\t\t\tinstance = localInstance;\n \t\t\t}\n-\t\t\tinstance.initialize(restartOnInitialize);\n+\t\t}\n+\t\tif (localInstance != null) {\n+\t\t\tlocalInstance.initialize(restartOnInitialize);\n \t\t}\n \t}\n ",
    "output": "Fix broken locking in Restarter.initialize"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java\n@@ -115,9 +115,7 @@ else if (this.flywayDataSource != null) {\n \t\t\telse {\n \t\t\t\tflyway.setDataSource(this.dataSource);\n \t\t\t}\n-\t\t\t// TODO: remove this line once SPR-13749 is fixed\n \t\t\tflyway.setLocations(this.properties.getLocations().toArray(new String[0]));\n-\n \t\t\treturn flyway;\n \t\t}\n ",
    "output": "Remove TODO in FlywayAutoConfiguration\nNow tracked by"
  },
  {
    "input": "diff --git a/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/FullyExecutableJarTests.java b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/FullyExecutableJarTests.java\n--- a/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/FullyExecutableJarTests.java\n+++ b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/FullyExecutableJarTests.java\n@@ -166,11 +166,12 @@ private boolean containsLine(String toMatch, File file) throws IOException {\n \n \tprivate List<String> readLines(File file) throws IOException {\n \t\tBufferedReader reader = new BufferedReader(new FileReader(file));\n-\t\tString line;\n \t\tList<String> lines = new ArrayList<String>();\n \t\ttry {\n-\t\t\twhile ((line = reader.readLine()) != null && lines.size() < 50) {\n+\t\t\tString line = reader.readLine();\n+\t\t\twhile (line != null && lines.size() < 50) {\n \t\t\t\tlines.add(line);\n+\t\t\t\tline = reader.readLine();\n \t\t\t}\n \t\t}\n \t\tfinally {",
    "output": "Fix problem reported by Checkstyle"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n--- a/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n@@ -914,6 +914,14 @@ private boolean isMainThread(Thread currentThread) {\n \t\t\t\t&& \"main\".equals(currentThread.getThreadGroup().getName());\n \t}\n \n+\t/**\n+\t * Returns the main application class that has been deduced or explicitly configured.\n+\t * @return the main application class or {@code null}\n+\t */\n+\tpublic Class<?> getMainApplicationClass() {\n+\t\treturn this.mainApplicationClass;\n+\t}\n+\n \t/**\n \t * Set a specific main application class that will be used as a log source and to\n \t * obtain version information. By default the main application class will be deduced.",
    "output": "Add mainApplicationClass accessor to SpringApplication"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n--- a/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n@@ -914,6 +914,14 @@ private boolean isMainThread(Thread currentThread) {\n \t\t\t\t&& \"main\".equals(currentThread.getThreadGroup().getName());\n \t}\n \n+\t/**\n+\t * Returns the main application class that has been deduced or explicitly configured.\n+\t * @return the main application class or {@code null}\n+\t */\n+\tpublic Class<?> getMainApplicationClass() {\n+\t\treturn this.mainApplicationClass;\n+\t}\n+\n \t/**\n \t * Set a specific main application class that will be used as a log source and to\n \t * obtain version information. By default the main application class will be deduced.",
    "output": "Add mainApplicationClass accessor to SpringApplication"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java\n@@ -24,7 +24,6 @@\n import javax.persistence.EntityManagerFactory;\n import javax.sql.DataSource;\n \n-import org.apache.commons.lang.ObjectUtils;\n import org.flywaydb.core.Flyway;\n import org.flywaydb.core.api.MigrationVersion;\n \n@@ -50,13 +49,15 @@\n import org.springframework.orm.jpa.AbstractEntityManagerFactoryBean;\n import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;\n import org.springframework.util.Assert;\n+import org.springframework.util.ObjectUtils;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for Flyway database migrations.\n  *\n  * @author Dave Syer\n  * @author Phillip Webb\n  * @author Vedran Pavic\n+ * @author Stephane Nicoll\n  * @since 1.1.0\n  */\n @Configuration\n@@ -189,7 +190,7 @@ public Set<ConvertiblePair> getConvertibleTypes() {\n \n \t\t@Override\n \t\tpublic Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType) {\n-\t\t\tString value = ObjectUtils.toString(source);\n+\t\t\tString value = ObjectUtils.nullSafeToString(source);\n \t\t\treturn MigrationVersion.fromVersion(value);\n \t\t}\n ",
    "output": "Fix wrong import"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DatabaseDriver.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DatabaseDriver.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DatabaseDriver.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DatabaseDriver.java\n@@ -56,7 +56,7 @@ enum DatabaseDriver {\n \t/**\n \t * MySQL.\n \t */\n-\tMYSQL(\"com.mysql.jdbc.Driver\", \"org.mysql.jdbc.MySQLDataSource\"),\n+\tMYSQL(\"com.mysql.jdbc.Driver\", \"com.mysql.jdbc.jdbc2.optional.MysqlXADataSource\"),\n \n \t/**\n \t * Maria DB.",
    "output": "Correct the name of MySQL's XADataSource implementation"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/PublicMetricsAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/PublicMetricsAutoConfiguration.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/PublicMetricsAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/PublicMetricsAutoConfiguration.java\n@@ -142,7 +142,7 @@ public CachePublicMetrics cachePublicMetrics() {\n \tstatic class IntegrationMetricsConfiguration {\n \n \t\t@Bean\n-\t\t@ConditionalOnMissingBean\n+\t\t@ConditionalOnMissingBean(name = \"springIntegrationPublicMetrics\")\n \t\tpublic MetricReaderPublicMetrics springIntegrationPublicMetrics(\n \t\t\t\tIntegrationMBeanExporter exporter) {\n \t\t\treturn new MetricReaderPublicMetrics(",
    "output": "Make springIntegrationPublicMetrics conditional on bean by name not type\nBy type is too restrictive and surprising for users who wanted to add their\nown MetricReaderPublicMetrics for other reasons."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/websocket/WebSocketAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/websocket/WebSocketAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/websocket/WebSocketAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/websocket/WebSocketAutoConfiguration.java\n@@ -24,6 +24,7 @@\n \n import org.springframework.boot.autoconfigure.AutoConfigureBefore;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnJava;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration;\n import org.springframework.boot.context.embedded.EmbeddedServletContainerCustomizer;\n@@ -61,6 +62,7 @@ static class TomcatWebSocketConfiguration {\n \n \t\t@Bean\n \t\t@ConditionalOnMissingBean(name = \"websocketContainerCustomizer\")\n+\t\t@ConditionalOnJava(ConditionalOnJava.JavaVersion.SEVEN)\n \t\tpublic EmbeddedServletContainerCustomizer websocketContainerCustomizer() {\n \t\t\treturn new TomcatWebSocketContainerCustomizer();\n \t\t}",
    "output": "Only enable Tomcat's websocket support on Java7+\nTomcat's websocket support requires Java7 or later. That commit makes\nsure to register its support only when such requirement is met."
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystemTests.java b/spring-boot/src/test/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystemTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystemTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/logging/log4j2/Log4J2LoggingSystemTests.java\n@@ -191,6 +191,13 @@ public void configLocationsWithJacksonDatabindAndDataformatYaml() {\n \t\t\t\t\t\t\"log4j2.jsn\", \"log4j2.xml\")));\n \t}\n \n+\t@Test\n+\tpublic void springConfigLocations() throws Exception {\n+\t\tString[] locations = getSpringConfigLocations(this.loggingSystem);\n+\t\tassertThat(locations,\n+\t\t\t\tequalTo(new String[] { \"log4j2-spring.xml\" }));\n+\t}\n+\n \t@Test\n \tpublic void exceptionsIncludeClassPackaging() throws Exception {\n \t\tthis.loggingSystem.beforeInitialize();",
    "output": "Add test to validate `log42-spring.xml` location"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/ExitCodeGenerators.java b/spring-boot/src/main/java/org/springframework/boot/ExitCodeGenerators.java\n--- a/spring-boot/src/main/java/org/springframework/boot/ExitCodeGenerators.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/ExitCodeGenerators.java\n@@ -29,11 +29,10 @@\n  *\n  * @author Dave Syer\n  * @author Phillip Webb\n- * @since 1.3.1\n  * @see #getExitCode()\n  * @see ExitCodeGenerator\n  */\n-public class ExitCodeGenerators implements Iterable<ExitCodeGenerator> {\n+class ExitCodeGenerators implements Iterable<ExitCodeGenerator> {\n \n \tprivate List<ExitCodeGenerator> generators = new ArrayList<ExitCodeGenerator>();\n ",
    "output": "Make ExitCodeGenerators package-private\nExitCodeGenerators is not going to be immediately used by spring-task so\nit can remain package-private for now."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/mobile/DeviceResolverAutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/mobile/DeviceResolverAutoConfigurationTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/mobile/DeviceResolverAutoConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/mobile/DeviceResolverAutoConfigurationTests.java\n@@ -128,9 +128,9 @@ protected static class MyController {\n \t\t@RequestMapping(\"/\")\n \t\tpublic ResponseEntity<Void> test(Device device) {\n \t\t\tif (device.getDevicePlatform() != null) {\n-\t\t\t\treturn new ResponseEntity<>(HttpStatus.OK);\n+\t\t\t\treturn new ResponseEntity<Void>(HttpStatus.OK);\n \t\t\t}\n-\t\t\treturn new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);\n+\t\t\treturn new ResponseEntity<Void>(HttpStatus.INTERNAL_SERVER_ERROR);\n \t\t}\n \n \t}",
    "output": "Remove use of diamond operator in tests so that they’re Java 6 compatible"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n--- a/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n@@ -819,6 +819,10 @@ protected void afterRefresh(ConfigurableApplicationContext context, String[] arg\n \n \tprivate void handleRunFailure(ConfigurableApplicationContext context,\n \t\t\tSpringApplicationRunListeners listeners, Throwable exception) {\n+\t\tif (this.log.isErrorEnabled()) {\n+\t\t\tthis.log.error(\"Application startup failed\", exception);\n+\t\t\tregisterLoggedException(exception);\n+\t\t}\n \t\ttry {\n \t\t\ttry {\n \t\t\t\tlisteners.finished(context, exception);\n@@ -832,10 +836,6 @@ private void handleRunFailure(ConfigurableApplicationContext context,\n \t\tcatch (Exception ex) {\n \t\t\tthis.log.warn(\"Unable to close ApplicationContext\", ex);\n \t\t}\n-\t\tif (this.log.isErrorEnabled()) {\n-\t\t\tthis.log.error(\"Application startup failed\", exception);\n-\t\t\tregisterLoggedException(exception);\n-\t\t}\n \t\tReflectionUtils.rethrowRuntimeException(exception);\n \t}\n ",
    "output": "Log exception before sending to listeners"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n--- a/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n@@ -819,6 +819,10 @@ protected void afterRefresh(ConfigurableApplicationContext context, String[] arg\n \n \tprivate void handleRunFailure(ConfigurableApplicationContext context,\n \t\t\tSpringApplicationRunListeners listeners, Throwable exception) {\n+\t\tif (this.log.isErrorEnabled()) {\n+\t\t\tthis.log.error(\"Application startup failed\", exception);\n+\t\t\tregisterLoggedException(exception);\n+\t\t}\n \t\ttry {\n \t\t\ttry {\n \t\t\t\tlisteners.finished(context, exception);\n@@ -832,10 +836,6 @@ private void handleRunFailure(ConfigurableApplicationContext context,\n \t\tcatch (Exception ex) {\n \t\t\tthis.log.warn(\"Unable to close ApplicationContext\", ex);\n \t\t}\n-\t\tif (this.log.isErrorEnabled()) {\n-\t\t\tthis.log.error(\"Application startup failed\", exception);\n-\t\t\tregisterLoggedException(exception);\n-\t\t}\n \t\tReflectionUtils.rethrowRuntimeException(exception);\n \t}\n ",
    "output": "Log exception before sending to listeners\nChange SpringApplication exception handling to log details before calling\nthe SpringApplicationRunListeners. Prior to this commit it wasn't possible\nfor a listener to shutdown logging."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mail/MailSenderValidatorAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mail/MailSenderValidatorAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mail/MailSenderValidatorAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mail/MailSenderValidatorAutoConfiguration.java\n@@ -50,7 +50,7 @@ public void validateConnection() {\n \t\t\tthis.mailSender.testConnection();\n \t\t}\n \t\tcatch (MessagingException ex) {\n-\t\t\tthrow new IllegalStateException(\"Mail server is not unavailable\", ex);\n+\t\t\tthrow new IllegalStateException(\"Mail server is not available\", ex);\n \t\t}\n \t}\n ",
    "output": "Fix mail connection test exception message"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mail/MailSenderValidatorAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mail/MailSenderValidatorAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mail/MailSenderValidatorAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mail/MailSenderValidatorAutoConfiguration.java\n@@ -50,7 +50,7 @@ public void validateConnection() {\n \t\t\tthis.mailSender.testConnection();\n \t\t}\n \t\tcatch (MessagingException ex) {\n-\t\t\tthrow new IllegalStateException(\"Mail server is not unavailable\", ex);\n+\t\t\tthrow new IllegalStateException(\"Mail server is not available\", ex);\n \t\t}\n \t}\n ",
    "output": "Fix mail connection test exception message"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n--- a/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n@@ -162,6 +162,16 @@ public class SpringApplication {\n \tprivate static final String[] WEB_ENVIRONMENT_CLASSES = { \"javax.servlet.Servlet\",\n \t\t\t\"org.springframework.web.context.ConfigurableWebApplicationContext\" };\n \n+\t/**\n+\t * Default banner location.\n+\t */\n+\tpublic static final String BANNER_LOCATION_PROPERTY_VALUE = \"banner.txt\";\n+\n+\t/**\n+\t * Banner location property key.\n+\t */\n+\tpublic static final String BANNER_LOCATION_PROPERTY = \"banner.location\";\n+\n \tprivate static final String CONFIGURABLE_WEB_ENVIRONMENT_CLASS = \"org.springframework.web.context.ConfigurableWebEnvironment\";\n \n \tprivate static final String SYSTEM_PROPERTY_JAVA_AWT_HEADLESS = \"java.awt.headless\";\n@@ -536,7 +546,8 @@ protected void printBanner(Environment environment) {\n \t}\n \n \tprivate Banner selectBanner(Environment environment) {\n-\t\tString location = environment.getProperty(\"banner.location\", \"banner.txt\");\n+\t\tString location = environment\n+\t\t\t\t.getProperty(BANNER_LOCATION_PROPERTY, BANNER_LOCATION_PROPERTY_VALUE);\n \t\tResourceLoader resourceLoader = this.resourceLoader != null ? this.resourceLoader\n \t\t\t\t: new DefaultResourceLoader(getClassLoader());\n \t\tResource resource = resourceLoader.getResource(location);",
    "output": "Polish contribution\nAdd constants for banner location"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n--- a/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n@@ -145,6 +145,16 @@\n  */\n public class SpringApplication {\n \n+\t/**\n+\t * The banner location property value used to load default banner.\n+\t */\n+\tpublic static final String BANNER_LOCATION_PROPERTY_VALUE = \"banner.txt\";\n+\n+\t/**\n+\t * The banner location property key.\n+\t */\n+\tpublic static final String BANNER_LOCATION_PROPERTY = \"banner.location\";\n+\n \t/**\n \t * The class name of application context that will be used by default for non-web\n \t * environments.\n@@ -536,7 +546,7 @@ protected void printBanner(Environment environment) {\n \t}\n \n \tprivate Banner selectBanner(Environment environment) {\n-\t\tString location = environment.getProperty(\"banner.location\", \"banner.txt\");\n+\t\tString location = environment.getProperty(BANNER_LOCATION_PROPERTY, BANNER_LOCATION_PROPERTY_VALUE);\n \t\tResourceLoader resourceLoader = this.resourceLoader != null ? this.resourceLoader\n \t\t\t\t: new DefaultResourceLoader(getClassLoader());\n \t\tResource resource = resourceLoader.getResource(location);",
    "output": "Add constants for banner location"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-tomcat-multi-connectors/src/main/java/sample/tomcat/multiconnector/SampleTomcatTwoConnectorsApplication.java b/spring-boot-samples/spring-boot-sample-tomcat-multi-connectors/src/main/java/sample/tomcat/multiconnector/SampleTomcatTwoConnectorsApplication.java\n--- a/spring-boot-samples/spring-boot-sample-tomcat-multi-connectors/src/main/java/sample/tomcat/multiconnector/SampleTomcatTwoConnectorsApplication.java\n+++ b/spring-boot-samples/spring-boot-sample-tomcat-multi-connectors/src/main/java/sample/tomcat/multiconnector/SampleTomcatTwoConnectorsApplication.java\n@@ -42,11 +42,11 @@ public Integer port() {\n \t@Bean\n \tpublic EmbeddedServletContainerFactory servletContainer() {\n \t\tTomcatEmbeddedServletContainerFactory tomcat = new TomcatEmbeddedServletContainerFactory();\n-\t\ttomcat.addAdditionalTomcatConnectors(createSslConnector());\n+\t\ttomcat.addAdditionalTomcatConnectors(createStandardConnector());\n \t\treturn tomcat;\n \t}\n \n-\tprivate Connector createSslConnector() {\n+\tprivate Connector createStandardConnector() {\n \t\tConnector connector = new Connector(\"org.apache.coyote.http11.Http11NioProtocol\");\n \t\tconnector.setPort(port());\n \t\treturn connector;",
    "output": "Polish contribution\nRename method to clarify which connector is being created"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-tomcat-multi-connectors/src/main/java/sample/tomcat/multiconnector/SampleTomcatTwoConnectorsApplication.java b/spring-boot-samples/spring-boot-sample-tomcat-multi-connectors/src/main/java/sample/tomcat/multiconnector/SampleTomcatTwoConnectorsApplication.java\n--- a/spring-boot-samples/spring-boot-sample-tomcat-multi-connectors/src/main/java/sample/tomcat/multiconnector/SampleTomcatTwoConnectorsApplication.java\n+++ b/spring-boot-samples/spring-boot-sample-tomcat-multi-connectors/src/main/java/sample/tomcat/multiconnector/SampleTomcatTwoConnectorsApplication.java\n@@ -42,11 +42,11 @@ public Integer port() {\n \t@Bean\n \tpublic EmbeddedServletContainerFactory servletContainer() {\n \t\tTomcatEmbeddedServletContainerFactory tomcat = new TomcatEmbeddedServletContainerFactory();\n-\t\ttomcat.addAdditionalTomcatConnectors(createSslConnector());\n+\t\ttomcat.addAdditionalTomcatConnectors(createNonSslConnector());\n \t\treturn tomcat;\n \t}\n \n-\tprivate Connector createSslConnector() {\n+\tprivate Connector createNonSslConnector() {\n \t\tConnector connector = new Connector(\"org.apache.coyote.http11.Http11NioProtocol\");\n \t\tconnector.setPort(port());\n \t\treturn connector;",
    "output": "Rename method to clarify which connector is being created"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/undertow/UndertowEmbeddedServletContainer.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/undertow/UndertowEmbeddedServletContainer.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/undertow/UndertowEmbeddedServletContainer.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/undertow/UndertowEmbeddedServletContainer.java\n@@ -303,7 +303,7 @@ private static class MaxSizePredicate implements Predicate {\n \n \t\tprivate final Predicate maxContentSize;\n \n-\t\tpublic MaxSizePredicate(int size) {\n+\t\tMaxSizePredicate(int size) {\n \t\t\tthis.maxContentSize = Predicates.maxContentSize(size);\n \t\t}\n ",
    "output": "Fix checkstyle issue"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RepackageMojo.java b/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RepackageMojo.java\n--- a/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RepackageMojo.java\n+++ b/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RepackageMojo.java\n@@ -268,7 +268,7 @@ private Properties buildLaunchScriptProperties() {\n \t}\n \n \tprivate String removeLineBreaks(String description) {\n-\t\treturn description.replaceAll(\"\\\\s+\", \" \");\n+\t\treturn (description == null ? null : description.replaceAll(\"\\\\s+\", \" \"));\n \t}\n \n \tprivate void putIfMissing(Properties properties, String key,",
    "output": "Protect against null description\nUpdate `removeLineBreaks` to also work with `null`."
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RepackageMojo.java b/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RepackageMojo.java\n--- a/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RepackageMojo.java\n+++ b/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RepackageMojo.java\n@@ -261,11 +261,16 @@ private Properties buildLaunchScriptProperties() {\n \t\tputIfMissing(properties, \"initInfoProvides\", this.project.getArtifactId());\n \t\tputIfMissing(properties, \"initInfoShortDescription\", this.project.getName(),\n \t\t\t\tthis.project.getArtifactId());\n-\t\tputIfMissing(properties, \"initInfoDescription\", this.project.getDescription(),\n-\t\t\t\tthis.project.getName(), this.project.getArtifactId());\n+\t\tputIfMissing(properties, \"initInfoDescription\",\n+\t\t\t\tremoveLineBreaks(this.project.getDescription()), this.project.getName(),\n+\t\t\t\tthis.project.getArtifactId());\n \t\treturn properties;\n \t}\n \n+\tprivate String removeLineBreaks(String description) {\n+\t\treturn description.replaceAll(\"\\\\s+\", \" \");\n+\t}\n+\n \tprivate void putIfMissing(Properties properties, String key,\n \t\t\tString... valueCandidates) {\n \t\tif (!properties.containsKey(key)) {",
    "output": "Cleanup description new-lines for launch script"
  },
  {
    "input": "diff --git a/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/livereload/ConnectionInputStream.java b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/livereload/ConnectionInputStream.java\n--- a/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/livereload/ConnectionInputStream.java\n+++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/livereload/ConnectionInputStream.java\n@@ -49,7 +49,7 @@ public String readHeader() throws IOException {\n \t\t\tint amountRead = checkedRead(buffer, 0, BUFFER_SIZE);\n \t\t\tcontent.append(new String(buffer, 0, amountRead));\n \t\t}\n-\t\treturn content.substring(0, content.indexOf(HEADER_END)).toString();\n+\t\treturn content.substring(0, content.indexOf(HEADER_END));\n \t}\n \n \t/**",
    "output": "Remove redundant toString() call"
  },
  {
    "input": "diff --git a/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/livereload/ConnectionInputStream.java b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/livereload/ConnectionInputStream.java\n--- a/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/livereload/ConnectionInputStream.java\n+++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/livereload/ConnectionInputStream.java\n@@ -49,7 +49,7 @@ public String readHeader() throws IOException {\n \t\t\tint amountRead = checkedRead(buffer, 0, BUFFER_SIZE);\n \t\t\tcontent.append(new String(buffer, 0, amountRead));\n \t\t}\n-\t\treturn content.substring(0, content.indexOf(HEADER_END)).toString();\n+\t\treturn content.substring(0, content.indexOf(HEADER_END));\n \t}\n \n \t/**",
    "output": "Remove redundant toString() call"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java\n@@ -205,7 +205,7 @@ public void afterPropertiesSet() throws Exception {\n \n \t@Override\n \tpublic void onApplicationEvent(ContextRefreshedEvent event) {\n-\t\tif (this.validator != null && isJsr303Present()) {\n+\t\tif (this.ownedValidator && this.validator != null && isJsr303Present()) {\n \t\t\tthis.validator = null; // allow it to be garbage collected\n \t\t}\n \t}",
    "output": "Check that we own the validator before nulling it out"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/ansi/AnsiOutput.java b/spring-boot/src/main/java/org/springframework/boot/ansi/AnsiOutput.java\n--- a/spring-boot/src/main/java/org/springframework/boot/ansi/AnsiOutput.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/ansi/AnsiOutput.java\n@@ -30,6 +30,8 @@ public abstract class AnsiOutput {\n \n \tprivate static Enabled enabled = Enabled.DETECT;\n \n+\tprivate static Boolean ansiCapable;\n+\n \tprivate static final String OPERATING_SYSTEM_NAME = System.getProperty(\"os.name\")\n \t\t\t.toLowerCase();\n \n@@ -108,12 +110,19 @@ private static void buildDisabled(StringBuilder sb, Object[] elements) {\n \n \tprivate static boolean isEnabled() {\n \t\tif (enabled == Enabled.DETECT) {\n-\t\t\treturn detectIfEnabled();\n+\t\t\treturn detectIfAnsiCapable();\n \t\t}\n \t\treturn enabled == Enabled.ALWAYS;\n \t}\n \n-\tprivate static boolean detectIfEnabled() {\n+\tprivate static boolean detectIfAnsiCapable() {\n+\t\tif (ansiCapable == null) {\n+\t\t\tansiCapable = doDetectIfAnsiCapable();\n+\t\t}\n+\t\treturn ansiCapable;\n+\t}\n+\n+\tprivate static boolean doDetectIfAnsiCapable() {\n \t\ttry {\n \t\t\tif (System.console() == null) {\n \t\t\t\treturn false;",
    "output": "Cache outcome of checking to see if host supports ANSI output"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/RepackagerTests.java b/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/RepackagerTests.java\n--- a/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/RepackagerTests.java\n+++ b/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/RepackagerTests.java\n@@ -123,7 +123,6 @@ public void specificMainClass() throws Exception {\n \tpublic void mainClassFromManifest() throws Exception {\n \t\tthis.testJarFile.addClass(\"a/b/C.class\", ClassWithoutMainMethod.class);\n \t\tManifest manifest = new Manifest();\n-\t\tmanifest = new Manifest();\n \t\tmanifest.getMainAttributes().putValue(\"Manifest-Version\", \"1.0\");\n \t\tmanifest.getMainAttributes().putValue(\"Main-Class\", \"a.b.C\");\n \t\tthis.testJarFile.addManifest(manifest);",
    "output": "Remove double instantiation of Manifest"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/RepackagerTests.java b/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/RepackagerTests.java\n--- a/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/RepackagerTests.java\n+++ b/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/RepackagerTests.java\n@@ -123,7 +123,6 @@ public void specificMainClass() throws Exception {\n \tpublic void mainClassFromManifest() throws Exception {\n \t\tthis.testJarFile.addClass(\"a/b/C.class\", ClassWithoutMainMethod.class);\n \t\tManifest manifest = new Manifest();\n-\t\tmanifest = new Manifest();\n \t\tmanifest.getMainAttributes().putValue(\"Manifest-Version\", \"1.0\");\n \t\tmanifest.getMainAttributes().putValue(\"Main-Class\", \"a.b.C\");\n \t\tthis.testJarFile.addManifest(manifest);",
    "output": "Remove double instantiation of Manifest"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnExpressionCondition.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnExpressionCondition.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnExpressionCondition.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnExpressionCondition.java\n@@ -51,7 +51,8 @@ public ConditionOutcome getMatchOutcome(ConditionContext context,\n \t\t// Explicitly allow environment placeholders inside the expression\n \t\texpression = context.getEnvironment().resolvePlaceholders(expression);\n \t\tConfigurableListableBeanFactory beanFactory = context.getBeanFactory();\n-\t\tBeanExpressionResolver resolver = beanFactory.getBeanExpressionResolver();\n+\t\tBeanExpressionResolver resolver = (beanFactory != null)\n+\t\t\t\t? beanFactory.getBeanExpressionResolver() : null;\n \t\tBeanExpressionContext expressionContext = (beanFactory != null)\n \t\t\t\t? new BeanExpressionContext(beanFactory, null) : null;\n \t\tif (resolver == null) {",
    "output": "Fix possible null pointer dereference"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnExpressionCondition.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnExpressionCondition.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnExpressionCondition.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnExpressionCondition.java\n@@ -51,7 +51,8 @@ public ConditionOutcome getMatchOutcome(ConditionContext context,\n \t\t// Explicitly allow environment placeholders inside the expression\n \t\texpression = context.getEnvironment().resolvePlaceholders(expression);\n \t\tConfigurableListableBeanFactory beanFactory = context.getBeanFactory();\n-\t\tBeanExpressionResolver resolver = beanFactory.getBeanExpressionResolver();\n+\t\tBeanExpressionResolver resolver = (beanFactory != null)\n+\t\t\t\t? beanFactory.getBeanExpressionResolver() : null;\n \t\tBeanExpressionContext expressionContext = (beanFactory != null)\n \t\t\t\t? new BeanExpressionContext(beanFactory, null) : null;\n \t\tif (resolver == null) {",
    "output": "Fix possible null pointer dereference"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/embedded/EmbeddedMongoAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/embedded/EmbeddedMongoAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/embedded/EmbeddedMongoAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/embedded/EmbeddedMongoAutoConfiguration.java\n@@ -157,7 +157,9 @@ private int getPort() {\n \n \tprivate InetAddress getHost() throws UnknownHostException {\n \t\tif (this.properties.getHost() == null) {\n-\t\t\treturn InetAddress.getLoopbackAddress();\n+\t\t\treturn InetAddress.getByAddress(Network.localhostIsIPv6()\n+\t\t\t\t\t? new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 }\n+\t\t\t\t\t: new byte[] { 127, 0, 0, 1 });\n \t\t}\n \t\treturn InetAddress.getByName(this.properties.getHost());\n \t}",
    "output": "Don’t use Java 7 API in EmbeddedMongoAutoConfiguration"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcHypermediaManagementContextConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcHypermediaManagementContextConfiguration.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcHypermediaManagementContextConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcHypermediaManagementContextConfiguration.java\n@@ -128,8 +128,7 @@ public DefaultCurieProvider curieProvider(ServerProperties server,\n \t\t\tManagementServerProperties management, DocsMvcEndpoint endpoint) {\n \t\tString path = management.getContextPath() + endpoint.getPath()\n \t\t\t\t+ \"/#spring_boot_actuator__{rel}\";\n-\t\tif (server.getPort() == management.getPort() && management.getPort() != null\n-\t\t\t\t&& management.getPort() != 0) {\n+\t\tif (server.getPort().equals(management.getPort()) && management.getPort() != 0) {\n \t\t\tpath = server.getPath(path);\n \t\t}\n \t\treturn new DefaultCurieProvider(\"boot\", new UriTemplate(path));",
    "output": "Fix use of == in EndpointWebMvcHypermediaManagementContextConfiguration"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/run/RunPluginFeatures.java b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/run/RunPluginFeatures.java\n--- a/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/run/RunPluginFeatures.java\n+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/run/RunPluginFeatures.java\n@@ -24,7 +24,6 @@\n import org.gradle.api.Task;\n import org.gradle.api.plugins.ExtraPropertiesExtension;\n import org.gradle.api.plugins.JavaPluginConvention;\n-import org.gradle.api.tasks.JavaExec;\n import org.gradle.api.tasks.SourceSet;\n import org.gradle.api.tasks.application.CreateStartScripts;\n \n@@ -57,7 +56,7 @@ private void mainClassNameFinder(Project project) {\n \t\tproject.getTasks().all(new Action<Task>() {\n \t\t\t@Override\n \t\t\tpublic void execute(Task task) {\n-\t\t\t\tif (task instanceof JavaExec || task instanceof CreateStartScripts) {\n+\t\t\t\tif (task instanceof BootRunTask || task instanceof CreateStartScripts) {\n \t\t\t\t\ttask.dependsOn(FIND_MAIN_CLASS_TASK_NAME);\n \t\t\t\t}\n \t\t\t}",
    "output": "Only make bootRun depend on findMainClass and not all java exec tasks"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/undertow/UndertowEmbeddedServletContainerFactory.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/undertow/UndertowEmbeddedServletContainerFactory.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/undertow/UndertowEmbeddedServletContainerFactory.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/undertow/UndertowEmbeddedServletContainerFactory.java\n@@ -384,7 +384,7 @@ private AccessLogHandler createAccessLogHandler(HttpHandler handler) {\n \t\ttry {\n \t\t\tcreateAccessLogDirectoryIfNecessary();\n \t\t\tAccessLogReceiver accessLogReceiver = new DefaultAccessLogReceiver(\n-\t\t\t\t\tcreateWorker(), this.accessLogDirectory, \"access_log\");\n+\t\t\t\t\tcreateWorker(), this.accessLogDirectory, \"access_log.\");\n \t\t\tString formatString = (this.accessLogPattern != null) ? this.accessLogPattern\n \t\t\t\t\t: \"common\";\n \t\t\treturn new AccessLogHandler(handler, accessLogReceiver, formatString,",
    "output": "Fix undertow access_log file name\nUndertow 1.3.2 changed the default access log file suffix from '.log'\nto just 'log'. Thus we need to adapt the file name pattern to include\nthe missing dot."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityFilterAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityFilterAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityFilterAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityFilterAutoConfiguration.java\n@@ -42,6 +42,7 @@\n  *\n  * @author Rob Winch\n  * @author Phillip Webb\n+ * @author Andy Wilkinson\n  * @since 1.3\n  */\n @Configuration\n@@ -66,6 +67,9 @@ public DelegatingFilterProxyRegistrationBean securityFilterChainRegistration(\n \n \tprivate EnumSet<DispatcherType> getDispatcherTypes(\n \t\t\tSecurityProperties securityProperties) {\n+\t\tif (securityProperties.getFilterDispatcherTypes() == null) {\n+\t\t\treturn null;\n+\t\t}\n \t\tSet<DispatcherType> dispatcherTypes = new HashSet<DispatcherType>();\n \t\tfor (String dispatcherType : securityProperties.getFilterDispatcherTypes()) {\n \t\t\tdispatcherTypes.add(DispatcherType.valueOf(dispatcherType));",
    "output": "Handle null security filter dispatcher types gracefully"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/EndpointHandlerMapping.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/EndpointHandlerMapping.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/EndpointHandlerMapping.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/EndpointHandlerMapping.java\n@@ -80,7 +80,6 @@ public EndpointHandlerMapping(Collection<? extends MvcEndpoint> endpoints,\n \t\t\tCorsConfiguration corsConfiguration) {\n \t\tthis.endpoints = new HashSet<MvcEndpoint>(endpoints);\n \t\tthis.corsConfiguration = corsConfiguration;\n-\t\tsetUseSuffixPatternMatch(false);\n \t\t// By default the static resource handler mapping is LOWEST_PRECEDENCE - 1\n \t\t// and the RequestMappingHandlerMapping is 0 (we ideally want to be before both)\n \t\tsetOrder(-100);",
    "output": "Remove a redundant setUseSuffixPatternMatch(false)"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityProperties.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityProperties.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityProperties.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityProperties.java\n@@ -36,7 +36,7 @@\n  * @author Dave Syer\n  * @author Andy Wilkinson\n  */\n-@ConfigurationProperties(prefix = \"security\", ignoreUnknownFields = false)\n+@ConfigurationProperties(prefix = \"security\")\n public class SecurityProperties implements SecurityPrerequisite {\n \n \t/**",
    "output": "Remove ignoreUnknownFields accidentally added in 524a328"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/SpringBootCondition.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/SpringBootCondition.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/SpringBootCondition.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/SpringBootCondition.java\n@@ -51,10 +51,11 @@ public final boolean matches(ConditionContext context,\n \t\t}\n \t\tcatch (NoClassDefFoundError ex) {\n \t\t\tthrow new IllegalStateException(\"Could not evaluate condition on \"\n-\t\t\t\t\t+ classOrMethodName + \" due to internal class not found. \"\n-\t\t\t\t\t+ \"This can happen if you are @ComponentScanning a \"\n-\t\t\t\t\t+ \"springframework package (e.g. if you put a @ComponentScan \"\n-\t\t\t\t\t+ \"in the default package by mistake)\", ex);\n+\t\t\t\t\t+ classOrMethodName + \" due to \" + ex.getMessage() + \" not \"\n+\t\t\t\t\t+ \"found. Make sure your own configuration does not rely on \"\n+\t\t\t\t\t+ \"that class. This can also happen if you are \"\n+\t\t\t\t\t+ \"@ComponentScanning a springframework package (e.g. if you \"\n+\t\t\t\t\t+ \"put a @ComponentScan in the default package by mistake)\", ex);\n \t\t}\n \t\tcatch (RuntimeException ex) {\n \t\t\tthrow new IllegalStateException(",
    "output": "Refine exception message"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/ManagementErrorEndpoint.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/ManagementErrorEndpoint.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/ManagementErrorEndpoint.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/ManagementErrorEndpoint.java\n@@ -43,7 +43,7 @@ public ManagementErrorEndpoint(ErrorAttributes errorAttributes) {\n \t\tthis.errorAttributes = errorAttributes;\n \t}\n \n-\t@RequestMapping(\"${server.path:/error}\")\n+\t@RequestMapping(\"${server.error.path:${error.path:/error}}\")\n \t@ResponseBody\n \tpublic Map<String, Object> invoke() {\n \t\treturn this.errorAttributes.getErrorAttributes(",
    "output": "Fix server.error.path reference in error controller"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/liquibase/LiquibaseServiceLocatorApplicationListener.java b/spring-boot/src/main/java/org/springframework/boot/liquibase/LiquibaseServiceLocatorApplicationListener.java\n--- a/spring-boot/src/main/java/org/springframework/boot/liquibase/LiquibaseServiceLocatorApplicationListener.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/liquibase/LiquibaseServiceLocatorApplicationListener.java\n@@ -51,8 +51,6 @@ public void onApplicationEvent(ApplicationStartedEvent event) {\n \tprivate static class LiquibasePresent {\n \n \t\tpublic void replaceServiceLocator() {\n-\t\t\tServiceLocator.getInstance().addPackageToScan(\n-\t\t\t\t\tCommonsLoggingLiquibaseLogger.class.getPackage().getName());\n \t\t\tServiceLocator.setInstance(new CustomResolverServiceLocator(\n \t\t\t\t\tnew SpringPackageScanClassResolver(logger)));\n \t\t}",
    "output": "Upgrade liquibase to 3.4.2"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/liquibase/LiquibaseServiceLocatorApplicationListener.java b/spring-boot/src/main/java/org/springframework/boot/liquibase/LiquibaseServiceLocatorApplicationListener.java\n--- a/spring-boot/src/main/java/org/springframework/boot/liquibase/LiquibaseServiceLocatorApplicationListener.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/liquibase/LiquibaseServiceLocatorApplicationListener.java\n@@ -51,8 +51,6 @@ public void onApplicationEvent(ApplicationStartedEvent event) {\n \tprivate static class LiquibasePresent {\n \n \t\tpublic void replaceServiceLocator() {\n-\t\t\tServiceLocator.getInstance().addPackageToScan(\n-\t\t\t\t\tCommonsLoggingLiquibaseLogger.class.getPackage().getName());\n \t\t\tServiceLocator.setInstance(new CustomResolverServiceLocator(\n \t\t\t\t\tnew SpringPackageScanClassResolver(logger)));\n \t\t}",
    "output": "Upgrade liquibase to 3.4.2\nRemove 3.4.1 logger workaround (adding package to default service). See\nCORE-2436 on the liquibase tracker for more details."
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/LaunchedURLClassLoader.java b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/LaunchedURLClassLoader.java\n--- a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/LaunchedURLClassLoader.java\n+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/LaunchedURLClassLoader.java\n@@ -82,7 +82,13 @@ public URL findResource(String name) {\n \t\t\tif (name.equals(\"\") && hasURLs()) {\n \t\t\t\treturn getURLs()[0];\n \t\t\t}\n-\t\t\treturn super.findResource(name);\n+\t\t\tHandler.setUseFastConnectionExceptions(true);\n+\t\t\ttry {\n+\t\t\t\treturn super.findResource(name);\n+\t\t\t}\n+\t\t\tfinally {\n+\t\t\t\tHandler.setUseFastConnectionExceptions(false);\n+\t\t\t}\n \t\t}\n \t\tcatch (IllegalArgumentException ex) {\n \t\t\treturn null;\n@@ -94,7 +100,13 @@ public Enumeration<URL> findResources(String name) throws IOException {\n \t\tif (name.equals(\"\") && hasURLs()) {\n \t\t\treturn Collections.enumeration(Arrays.asList(getURLs()));\n \t\t}\n-\t\treturn super.findResources(name);\n+\t\tHandler.setUseFastConnectionExceptions(true);\n+\t\ttry {\n+\t\t\treturn super.findResources(name);\n+\t\t}\n+\t\tfinally {\n+\t\t\tHandler.setUseFastConnectionExceptions(false);\n+\t\t}\n \t}\n \n \tprivate boolean hasURLs() {\n@@ -291,6 +303,6 @@ public URL nextElement() {\n \t\t\treturn this.localResources.nextElement();\n \t\t}\n \n-\t};\n+\t}\n \n }",
    "output": "Use fast exceptions in findResource(s)"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration.java\n@@ -21,6 +21,7 @@\n import com.hazelcast.core.IMap;\n import com.hazelcast.spring.cache.HazelcastCache;\n import net.sf.ehcache.Ehcache;\n+import net.sf.ehcache.statistics.StatisticsGateway;\n import org.infinispan.spring.provider.SpringCache;\n \n import org.springframework.boot.actuate.cache.CacheStatistics;\n@@ -72,7 +73,7 @@ public JCacheCacheStatisticsProvider jCacheCacheStatisticsProvider() {\n \t}\n \n \t@Configuration\n-\t@ConditionalOnClass({ EhCacheCache.class, Ehcache.class })\n+\t@ConditionalOnClass({ EhCacheCache.class, Ehcache.class, StatisticsGateway.class })\n \tstatic class EhCacheCacheStatisticsProviderConfiguration {\n \n \t\t@Bean",
    "output": "Disable ehcache statistics if necessary\n`EhCacheStatisticsProvider` uses the `StatisticsGateway` API introduced\nin ehcache 2.7 (march 2013). If an older ehcache version is present, we\nshould back-off as this class is not available."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java\n@@ -43,7 +43,7 @@\n  * @author Andy Wilkinson\n  */\n @Component\n-class BasicBatchConfigurer implements BatchConfigurer {\n+public class BasicBatchConfigurer implements BatchConfigurer {\n \n \tprivate static Log logger = LogFactory.getLog(BasicBatchConfigurer.class);\n ",
    "output": "Basicbatchconfigurer is public again"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java\n@@ -43,7 +43,7 @@\n  * @author Andy Wilkinson\n  */\n @Component\n-class BasicBatchConfigurer implements BatchConfigurer {\n+public class BasicBatchConfigurer implements BatchConfigurer {\n \n \tprivate static Log logger = LogFactory.getLog(BasicBatchConfigurer.class);\n ",
    "output": "Basicbatchconfigurer is public again"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java\n@@ -297,10 +297,7 @@ private void postProcessBeforeInitialization(Object bean, String beanName,\n \t\t\tfactory.bindPropertiesToTarget();\n \t\t}\n \t\tcatch (Exception ex) {\n-\t\t\tString targetClass = \"[unknown]\";\n-\t\t\tif (target != null) {\n-\t\t\t\tClassUtils.getShortName(target.getClass());\n-\t\t\t}\n+\t\t\tString targetClass = ClassUtils.getShortName(target.getClass());\n \t\t\tthrow new BeanCreationException(beanName, \"Could not bind properties to \"\n \t\t\t\t\t+ targetClass + \" (\" + getAnnotationDetails(annotation) + \")\", ex);\n \t\t}",
    "output": "Cherry-pick 398d06e\nFixed initially in\nThe target attribute is effectively checked for null beforehand so this\nadditional defensive check can be removed."
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/env/SpringApplicationJsonEnvironmentPostProcessor.java b/spring-boot/src/main/java/org/springframework/boot/env/SpringApplicationJsonEnvironmentPostProcessor.java\n--- a/spring-boot/src/main/java/org/springframework/boot/env/SpringApplicationJsonEnvironmentPostProcessor.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/env/SpringApplicationJsonEnvironmentPostProcessor.java\n@@ -121,7 +121,7 @@ private void extract(String name, Map<String, Object> result, Object value) {\n \t\tif (value instanceof Map) {\n \t\t\tflatten(name, result, (Map<String, Object>) value);\n \t\t}\n-\t\tif (value instanceof Collection) {\n+\t\telse if (value instanceof Collection) {\n \t\t\tint index = 0;\n \t\t\tfor (Object object : (Collection<Object>) value) {\n \t\t\t\textract(name + \"[\" + index + \"]\", result, object);",
    "output": "Add missing else statement"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/env/SpringApplicationJsonEnvironmentPostProcessor.java b/spring-boot/src/main/java/org/springframework/boot/env/SpringApplicationJsonEnvironmentPostProcessor.java\n--- a/spring-boot/src/main/java/org/springframework/boot/env/SpringApplicationJsonEnvironmentPostProcessor.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/env/SpringApplicationJsonEnvironmentPostProcessor.java\n@@ -121,7 +121,7 @@ private void extract(String name, Map<String, Object> result, Object value) {\n \t\tif (value instanceof Map) {\n \t\t\tflatten(name, result, (Map<String, Object>) value);\n \t\t}\n-\t\tif (value instanceof Collection) {\n+\t\telse if (value instanceof Collection) {\n \t\t\tint index = 0;\n \t\t\tfor (Object object : (Collection<Object>) value) {\n \t\t\t\textract(name + \"[\" + index + \"]\", result, object);",
    "output": "Add missing else statement"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java\n@@ -23,6 +23,7 @@\n import java.util.Locale;\n import java.util.Map;\n import java.util.Map.Entry;\n+import java.util.TimeZone;\n \n import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.databind.Module;\n@@ -206,7 +207,16 @@ private void configureDateFormat(Jackson2ObjectMapperBuilder builder) {\n \t\t\t\t\t\t\t(DateFormat) BeanUtils.instantiateClass(dateFormatClass));\n \t\t\t\t}\n \t\t\t\tcatch (ClassNotFoundException ex) {\n-\t\t\t\t\tbuilder.dateFormat(new SimpleDateFormat(dateFormat));\n+\t\t\t\t\tSimpleDateFormat simpleDateFormat = new SimpleDateFormat(dateFormat);\n+\t\t\t\t\t// Since Jackson 2.6.3 we always need to set a TimeZone (see gh-4170)\n+\t\t\t\t\t// If none in our properties fallback to the Jackson's default\n+\t\t\t\t\tTimeZone timeZone = this.jacksonProperties.getTimeZone();\n+\t\t\t\t\tif (timeZone == null) {\n+\t\t\t\t\t\ttimeZone = new ObjectMapper().getSerializationConfig()\n+\t\t\t\t\t\t\t\t.getTimeZone();\n+\t\t\t\t\t}\n+\t\t\t\t\tsimpleDateFormat.setTimeZone(timeZone);\n+\t\t\t\t\tbuilder.dateFormat(simpleDateFormat);\n \t\t\t\t}\n \t\t\t}\n \t\t}",
    "output": "Upgrade to Jackson 2.6.3"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/logging/logback/SpringProfileAction.java b/spring-boot/src/main/java/org/springframework/boot/logging/logback/SpringProfileAction.java\n--- a/spring-boot/src/main/java/org/springframework/boot/logging/logback/SpringProfileAction.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/logging/logback/SpringProfileAction.java\n@@ -67,8 +67,8 @@ public void begin(InterpretationContext ic, String name, Attributes attributes)\n \t}\n \n \tprivate boolean acceptsProfiles(InterpretationContext ic, Attributes attributes) {\n-\t\tString[] profileNames = StringUtils\n-\t\t\t\t.commaDelimitedListToStringArray(attributes.getValue(NAME_ATTRIBUTE));\n+\t\tString[] profileNames = StringUtils.trimArrayElements(StringUtils\n+\t\t\t\t.commaDelimitedListToStringArray(attributes.getValue(NAME_ATTRIBUTE)));\n \t\tif (profileNames.length != 0) {\n \t\t\tfor (String profileName : profileNames) {\n \t\t\t\tOptionHelper.substVars(profileName, ic, this.context);",
    "output": "Fix springProfile with multi profiles separated by comma and whitespace"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/logging/logback/SpringProfileAction.java b/spring-boot/src/main/java/org/springframework/boot/logging/logback/SpringProfileAction.java\n--- a/spring-boot/src/main/java/org/springframework/boot/logging/logback/SpringProfileAction.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/logging/logback/SpringProfileAction.java\n@@ -67,8 +67,8 @@ public void begin(InterpretationContext ic, String name, Attributes attributes)\n \t}\n \n \tprivate boolean acceptsProfiles(InterpretationContext ic, Attributes attributes) {\n-\t\tString[] profileNames = StringUtils\n-\t\t\t\t.commaDelimitedListToStringArray(attributes.getValue(NAME_ATTRIBUTE));\n+\t\tString[] profileNames = StringUtils.trimArrayElements(StringUtils\n+\t\t\t\t.commaDelimitedListToStringArray(attributes.getValue(NAME_ATTRIBUTE)));\n \t\tif (profileNames.length != 0) {\n \t\t\tfor (String profileName : profileNames) {\n \t\t\t\tOptionHelper.substVars(profileName, ic, this.context);",
    "output": "Fix springProfile with multi profiles separated by comma and whitespace\nPreviously springProfile supported multi profiles separated by comma but\nit doesn´t work if there are whitespaces. Now, springProfile will read\nvalues cleaning whitespaces."
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/EndpointHandlerMapping.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/EndpointHandlerMapping.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/EndpointHandlerMapping.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/EndpointHandlerMapping.java\n@@ -80,6 +80,7 @@ public EndpointHandlerMapping(Collection<? extends MvcEndpoint> endpoints,\n \t\t\tCorsConfiguration corsConfiguration) {\n \t\tthis.endpoints = new HashSet<MvcEndpoint>(endpoints);\n \t\tthis.corsConfiguration = corsConfiguration;\n+\t\tsetUseSuffixPatternMatch(false);\n \t\t// By default the static resource handler mapping is LOWEST_PRECEDENCE - 1\n \t\t// and the RequestMappingHandlerMapping is 0 (we ideally want to be before both)\n \t\tsetOrder(-100);",
    "output": "Disable suffix pattern matching for Endpoints\nUpdate EndpointHandlerMapping so that setUseSuffixPatternMatch is set\nto false. This prevents URLs of the form /beans.json from returning\nresults and provides another line of defense against RDF attacks."
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/ApplicationTempTests.java b/spring-boot/src/test/java/org/springframework/boot/ApplicationTempTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/ApplicationTempTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/ApplicationTempTests.java\n@@ -55,7 +55,7 @@ public void differentBasedOnUserDir() throws Exception {\n \t}\n \n \t@Test\n-\tpublic void getSubFolder() throws Exception {\n+\tpublic void getSubDir() throws Exception {\n \t\tApplicationTemp temp = new ApplicationTemp();\n \t\tassertThat(temp.getDir(\"abc\"), equalTo(new File(temp.getDir(), \"abc\")));\n \t}",
    "output": "Rename a test method to use dir instead folder"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/ApplicationTempTests.java b/spring-boot/src/test/java/org/springframework/boot/ApplicationTempTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/ApplicationTempTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/ApplicationTempTests.java\n@@ -55,7 +55,7 @@ public void differentBasedOnUserDir() throws Exception {\n \t}\n \n \t@Test\n-\tpublic void getSubFolder() throws Exception {\n+\tpublic void getSubDir() throws Exception {\n \t\tApplicationTemp temp = new ApplicationTemp();\n \t\tassertThat(temp.getDir(\"abc\"), equalTo(new File(temp.getDir(), \"abc\")));\n \t}",
    "output": "Rename a test method to use dir instead folder"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/LoggedExceptionHandler.java b/spring-boot/src/main/java/org/springframework/boot/LoggedExceptionHandler.java\n--- a/spring-boot/src/main/java/org/springframework/boot/LoggedExceptionHandler.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/LoggedExceptionHandler.java\n@@ -44,8 +44,13 @@ public void register(Throwable exception) {\n \n \t@Override\n \tpublic void uncaughtException(Thread thread, Throwable ex) {\n-\t\tif (!isRegistered(ex) && this.parent != null) {\n-\t\t\tthis.parent.uncaughtException(thread, ex);\n+\t\ttry {\n+\t\t\tif (!isRegistered(ex) && this.parent != null) {\n+\t\t\t\tthis.parent.uncaughtException(thread, ex);\n+\t\t\t}\n+\t\t}\n+\t\tfinally {\n+\t\t\tthis.exceptions.clear();\n \t\t}\n \t}\n ",
    "output": "Clear list after handling uncaught exceptions"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/HttpMessageConvertersTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/HttpMessageConvertersTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/HttpMessageConvertersTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/HttpMessageConvertersTests.java\n@@ -98,7 +98,6 @@ public void addNewConverters() {\n \t\tHttpMessageConverter<?> converter2 = mock(HttpMessageConverter.class);\n \t\tHttpMessageConverters converters = new HttpMessageConverters(converter1,\n \t\t\t\tconverter2);\n-\t\tassertTrue(converters.getConverters().contains(converter1));\n \t\tassertEquals(converter1, converters.getConverters().get(0));\n \t\tassertEquals(converter2, converters.getConverters().get(1));\n \t}\n@@ -111,7 +110,6 @@ public void convertersAreAddedToFormPartConverter() {\n \t\t\t\tconverter2).getConverters();\n \t\tList<HttpMessageConverter<?>> partConverters = extractFormPartConverters(\n \t\t\t\tconverters);\n-\t\tassertTrue(partConverters.contains(converter1));\n \t\tassertEquals(converter1, partConverters.get(0));\n \t\tassertEquals(converter2, partConverters.get(1));\n \t}",
    "output": "Remove redundant assertions"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/HttpMessageConvertersTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/HttpMessageConvertersTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/HttpMessageConvertersTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/HttpMessageConvertersTests.java\n@@ -98,7 +98,6 @@ public void addNewConverters() {\n \t\tHttpMessageConverter<?> converter2 = mock(HttpMessageConverter.class);\n \t\tHttpMessageConverters converters = new HttpMessageConverters(converter1,\n \t\t\t\tconverter2);\n-\t\tassertTrue(converters.getConverters().contains(converter1));\n \t\tassertEquals(converter1, converters.getConverters().get(0));\n \t\tassertEquals(converter2, converters.getConverters().get(1));\n \t}\n@@ -111,7 +110,6 @@ public void convertersAreAddedToFormPartConverter() {\n \t\t\t\tconverter2).getConverters();\n \t\tList<HttpMessageConverter<?>> partConverters = extractFormPartConverters(\n \t\t\t\tconverters);\n-\t\tassertTrue(partConverters.contains(converter1));\n \t\tassertEquals(converter1, partConverters.get(0));\n \t\tassertEquals(converter2, partConverters.get(1));\n \t}",
    "output": "Remove redundant assertions"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/LogFileMvcEndpoint.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/LogFileMvcEndpoint.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/LogFileMvcEndpoint.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/LogFileMvcEndpoint.java\n@@ -145,7 +145,7 @@ private static class Handler extends ResourceHttpRequestHandler {\n \n \t\tprivate final Resource resource;\n \n-\t\tpublic Handler(Resource resource) {\n+\t\tHandler(Resource resource) {\n \t\t\tthis.resource = resource;\n \t\t}\n ",
    "output": "Fix checkstyle error"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/SocialWebAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/SocialWebAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/SocialWebAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/SocialWebAutoConfiguration.java\n@@ -18,7 +18,6 @@\n \n import java.util.List;\n \n-import org.springframework.core.Ordered;\n import org.thymeleaf.spring4.SpringTemplateEngine;\n \n import org.springframework.beans.factory.annotation.Autowired;\n@@ -35,6 +34,7 @@\n import org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.Ordered;\n import org.springframework.security.core.Authentication;\n import org.springframework.security.core.context.SecurityContext;\n import org.springframework.security.core.context.SecurityContextHolder;",
    "output": "Fix import order"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoProperties.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoProperties.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoProperties.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoProperties.java\n@@ -217,8 +217,8 @@ public MongoClient createMongoClient(MongoClientOptions options,\n \t\t\t\tif (hasCustomCredentials()) {\n \t\t\t\t\tString database = this.authenticationDatabase == null\n \t\t\t\t\t\t\t? getMongoClientDatabase() : this.authenticationDatabase;\n-\t\t\t\t\tcredentials = Arrays.asList(MongoCredential.createMongoCRCredential(\n-\t\t\t\t\t\t\tthis.username, database, this.password));\n+\t\t\t\t\tcredentials = Arrays.asList(MongoCredential\n+\t\t\t\t\t\t\t.createCredential(this.username, database, this.password));\n \t\t\t\t}\n \t\t\t\tString host = this.host == null ? \"localhost\" : this.host;\n \t\t\t\tint port = determinePort(environment);",
    "output": "Switch MongoCredential method"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoProperties.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoProperties.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoProperties.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoProperties.java\n@@ -217,8 +217,8 @@ public MongoClient createMongoClient(MongoClientOptions options,\n \t\t\t\tif (hasCustomCredentials()) {\n \t\t\t\t\tString database = this.authenticationDatabase == null\n \t\t\t\t\t\t\t? getMongoClientDatabase() : this.authenticationDatabase;\n-\t\t\t\t\tcredentials = Arrays.asList(MongoCredential.createMongoCRCredential(\n-\t\t\t\t\t\t\tthis.username, database, this.password));\n+\t\t\t\t\tcredentials = Arrays.asList(MongoCredential\n+\t\t\t\t\t\t\t.createCredential(this.username, database, this.password));\n \t\t\t\t}\n \t\t\t\tString host = this.host == null ? \"localhost\" : this.host;\n \t\t\t\tint port = determinePort(environment);",
    "output": "Switch MongoCredential method\nUpdate MongoProperties to use `MongoCredential.createCredential` rather\nthan `MongoCredential.createMongoCRCredential`. This allows connections\nto Mongo 3.0 servers to authenticate using the SCRAM-SHA-1 mechanism."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityFilterAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityFilterAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityFilterAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityFilterAutoConfiguration.java\n@@ -23,7 +23,6 @@\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n import org.springframework.boot.context.embedded.DelegatingFilterProxyRegistrationBean;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n-import org.springframework.context.ApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration;\n@@ -51,7 +50,6 @@ public class SecurityFilterAutoConfiguration {\n \t@Bean\n \t@ConditionalOnBean(name = DEFAULT_FILTER_NAME)\n \tpublic DelegatingFilterProxyRegistrationBean securityFilterChainRegistration(\n-\t\t\tApplicationContext applicationContext,\n \t\t\tSecurityProperties securityProperties) {\n \t\tDelegatingFilterProxyRegistrationBean registration = new DelegatingFilterProxyRegistrationBean(\n \t\t\t\tDEFAULT_FILTER_NAME);",
    "output": "Remove unused parameter in Security configuration"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityFilterAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityFilterAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityFilterAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SecurityFilterAutoConfiguration.java\n@@ -23,7 +23,6 @@\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n import org.springframework.boot.context.embedded.DelegatingFilterProxyRegistrationBean;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n-import org.springframework.context.ApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration;\n@@ -51,7 +50,6 @@ public class SecurityFilterAutoConfiguration {\n \t@Bean\n \t@ConditionalOnBean(name = DEFAULT_FILTER_NAME)\n \tpublic DelegatingFilterProxyRegistrationBean securityFilterChainRegistration(\n-\t\t\tApplicationContext applicationContext,\n \t\t\tSecurityProperties securityProperties) {\n \t\tDelegatingFilterProxyRegistrationBean registration = new DelegatingFilterProxyRegistrationBean(\n \t\t\t\tDEFAULT_FILTER_NAME);",
    "output": "Remove unused parameter in Security configuration\nUpdate SecurityFilterAutoConfiguration.securityFilterChainRegistration\nto remove unused ApplicationContext parameter."
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/options/OptionHandler.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/options/OptionHandler.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/options/OptionHandler.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/options/OptionHandler.java\n@@ -87,7 +87,7 @@ public final ExitStatus run(String... args) throws Exception {\n \t\t\t\targsToUse[i] = \"--cp\";\n \t\t\t}\n \t\t}\n-\t\tOptionSet options = getParser().parse(args);\n+\t\tOptionSet options = getParser().parse(argsToUse);\n \t\treturn run(options);\n \t}\n ",
    "output": "Fully support `-cp` arguments\nThe CLI application advertises `-cp` support but it appears that only\n`--cp` is really supported. The fix for  forgot to update the\ncall to `getParser().parse(...)`."
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedNames.java b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedNames.java\n--- a/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedNames.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/bind/RelaxedNames.java\n@@ -36,6 +36,9 @@ public final class RelaxedNames implements Iterable<String> {\n \n \tprivate static final Pattern CAMEL_CASE_PATTERN = Pattern.compile(\"([^A-Z-])([A-Z])\");\n \n+\tprivate static final Pattern SEPARATED_TO_CAMEL_CASE_PATTERN = Pattern\n+\t\t\t.compile(\"[_\\\\-.]\");\n+\n \tprivate final String name;\n \n \tprivate final Set<String> values = new LinkedHashSet<String>();\n@@ -180,7 +183,7 @@ public String apply(String value) {\n \t\tprivate static String separatedToCamelCase(String value,\n \t\t\t\tboolean caseInsensitive) {\n \t\t\tStringBuilder builder = new StringBuilder();\n-\t\t\tfor (String field : value.split(\"[_\\\\-.]\")) {\n+\t\t\tfor (String field : SEPARATED_TO_CAMEL_CASE_PATTERN.split(value)) {\n \t\t\t\tfield = (caseInsensitive ? field.toLowerCase() : field);\n \t\t\t\tbuilder.append(\n \t\t\t\t\t\tbuilder.length() == 0 ? field : StringUtils.capitalize(field));",
    "output": "Improve performance of RelaxedNames\nReplace String.split() with a regex to save compiling the pattern\nmultiple times."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java\n@@ -78,7 +78,7 @@ public class HibernateJpaAutoConfiguration extends JpaBaseConfiguration {\n \t * {@code WebSphereExtendedJtaPlatform} implementations for various Hibernate\n \t * versions.\n \t */\n-\tprivate static final String[] WEBSHERE_JTA_PLATFORM_CLASSES = {\n+\tprivate static final String[] WEBSPHERE_JTA_PLATFORM_CLASSES = {\n \t\t\t\"org.hibernate.engine.transaction.jta.platform.internal.WebSphereExtendedJtaPlatform\",\n \t\t\t\"org.hibernate.service.jta.platform.internal.WebSphereExtendedJtaPlatform\", };\n \n@@ -139,7 +139,7 @@ private void configureWebSphereTransactionPlatform(\n \t}\n \n \tprivate Object getWebSphereJtaPlatformManager() {\n-\t\treturn getJtaPlatformManager(WEBSHERE_JTA_PLATFORM_CLASSES);\n+\t\treturn getJtaPlatformManager(WEBSPHERE_JTA_PLATFORM_CLASSES);\n \t}\n \n \tprivate void configureSpringJtaPlatform(Map<String, Object> vendorProperties,",
    "output": "Fix typo in HibernateJpaAutoConfiguration"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/env/SpringApplicationJsonEnvironmentPostProcessor.java b/spring-boot/src/main/java/org/springframework/boot/env/SpringApplicationJsonEnvironmentPostProcessor.java\n--- a/spring-boot/src/main/java/org/springframework/boot/env/SpringApplicationJsonEnvironmentPostProcessor.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/env/SpringApplicationJsonEnvironmentPostProcessor.java\n@@ -53,7 +53,7 @@ public class SpringApplicationJsonEnvironmentPostProcessor\n \t/**\n \t * The default order for the processor.\n \t */\n-\tpublic static final int DEFAULT_ORDER = Ordered.HIGHEST_PRECEDENCE + 20;\n+\tpublic static final int DEFAULT_ORDER = Ordered.HIGHEST_PRECEDENCE + 5;\n \n \tprivate int order = DEFAULT_ORDER;\n ",
    "output": "Make SPRING_APPLICATION_JSON processing happen before config files\nThat way any properties that are needed for processing the config\nfiles will be available in time. Makes sense given that env vars\nis the main carrier of the inline JSON."
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfigurationTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfigurationTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfigurationTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfigurationTests.java\n@@ -144,7 +144,7 @@ public void testDisableIgnoredStaticApplicationPaths() throws Exception {\n \t\tEnvironmentTestUtils.addEnvironment(this.context, \"security.ignored:none\");\n \t\tthis.context.refresh();\n \t\t// Just the application and management endpoints now\n-\t\tassertEquals(2,\n+\t\tassertEquals(3,\n \t\t\t\tthis.context.getBean(FilterChainProxy.class).getFilterChains().size());\n \t}\n ",
    "output": "Temporary fix the build\n(I mean it this thime)"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfigurationTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/SecurityAutoConfigurationTests.java\n@@ -165,7 +165,7 @@ public void testDisableIgnoredStaticApplicationPaths() throws Exception {\n \t\tEnvironmentTestUtils.addEnvironment(this.context, \"security.ignored:none\");\n \t\tthis.context.refresh();\n \t\t// Just the application endpoints now\n-\t\tassertEquals(1,\n+\t\tassertEquals(2,\n \t\t\t\tthis.context.getBean(FilterChainProxy.class).getFilterChains().size());\n \t}\n ",
    "output": "Temporary fix the build"
  },
  {
    "input": "diff --git a/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/RestarterTests.java b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/RestarterTests.java\n--- a/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/RestarterTests.java\n+++ b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/restart/RestarterTests.java\n@@ -96,7 +96,7 @@ public void run() {\n \t\tString output = this.out.toString();\n \t\tassertThat(StringUtils.countOccurrencesOf(output, \"Tick 0\"), greaterThan(1));\n \t\tassertThat(StringUtils.countOccurrencesOf(output, \"Tick 1\"), greaterThan(1));\n-\t\tassertThat(TestRestartListener.restarts, greaterThan(1));\n+\t\tassertThat(TestRestartListener.restarts, greaterThan(0));\n \t}\n \n \t@Test",
    "output": "Upgrade RestarterTests to expect listener to be notified at least once"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java\n@@ -143,7 +143,7 @@ static class ParameterNamesModuleConfiguration {\n \t\t@Bean\n \t\t@ConditionalOnMissingBean(ParameterNamesModule.class)\n \t\tpublic ParameterNamesModule parameterNamesModule() {\n-\t\t\treturn new ParameterNamesModule(JsonCreator.Mode.PROPERTIES);\n+\t\t\treturn new ParameterNamesModule(JsonCreator.Mode.DEFAULT);\n \t\t}\n \n \t}\n\ndiff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfigurationTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfigurationTests.java\n@@ -413,7 +413,7 @@ public void customLocale() throws JsonProcessingException {\n \n \t@Test\n \tpublic void parameterNamesModuleIsAutoConfigured() {\n-\t\tassertParameterNamesModuleCreatorBinding(Mode.PROPERTIES,\n+\t\tassertParameterNamesModuleCreatorBinding(Mode.DEFAULT,\n \t\t\t\tJacksonAutoConfiguration.class);\n \t}\n ",
    "output": "Upgrade auto-configured ParameterNamesModule to use DEFAULT creator mode The PROPERTIES creator mode has the unfortunate side-effect of stopping mixins from working. This commit updates the auto-configured module to use the DEFAULT creator mode instead."
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ShellPropertiesTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ShellPropertiesTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ShellPropertiesTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ShellPropertiesTests.java\n@@ -300,7 +300,7 @@ public void testBindingSpring() {\n \t\tProperties p = new Properties();\n \t\tprops.applyToCrshShellConfig(p);\n \n-\t\tassertEquals(\"role1, role2\", p.get(\"crash.auth.spring.roles\"));\n+\t\tassertEquals(\"role1,role2\", p.get(\"crash.auth.spring.roles\"));\n \t}\n \n \t@Test",
    "output": "Upgrade ShellPropertiesTests to expect whitespace to be trimmed The latest Spring Framework 4.2.3 snapshots appear to be trimming whitespace as part of the binding process. This commit updates the test's expectations accordingly."
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/ExtendedWhitespaceThrowablePatternConverter.java b/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/ExtendedWhitespaceThrowablePatternConverter.java\n--- a/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/ExtendedWhitespaceThrowablePatternConverter.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/logging/log4j2/ExtendedWhitespaceThrowablePatternConverter.java\n@@ -31,7 +31,7 @@\n  * @author Phillip Webb\n  * @since 1.3.0\n  */\n-@Plugin(name = \"WhitespaceThrowablePatternConverter\", category = PatternConverter.CATEGORY)\n+@Plugin(name = \"ExtendedWhitespaceThrowablePatternConverter\", category = PatternConverter.CATEGORY)\n @ConverterKeys({ \"xwEx\", \"xwThrowable\", \"xwException\" })\n public final class ExtendedWhitespaceThrowablePatternConverter\n \t\textends ThrowablePatternConverter {",
    "output": "Correct plugin name of ExtendedWhitespaceThrowablePatternConverter\nPreviously, it had the same plugin name as\nWhitespaceThrowablePatternConverter which meant that only one of the\ntwo plugins was available and the other’s converter keys didn’t work."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/authserver/OAuth2AuthorizationServerConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/authserver/OAuth2AuthorizationServerConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/authserver/OAuth2AuthorizationServerConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/oauth2/authserver/OAuth2AuthorizationServerConfiguration.java\n@@ -92,6 +92,16 @@ public void configure(ClientDetailsServiceConfigurer clients) throws Exception {\n \t\t\t\t\t\tAuthorityUtils.authorityListToSet(this.details.getAuthorities())\n \t\t\t\t\t\t\t\t.toArray(new String[0]))\n \t\t\t\t.scopes(this.details.getScope().toArray(new String[0]));\n+\n+\t\tif (this.details.getAutoApproveScopes() != null) {\n+\t\t\tbuilder.autoApprove(this.details.getAutoApproveScopes().toArray(new String[0]));\n+\t\t}\n+\t\tif (this.details.getAccessTokenValiditySeconds() != null) {\n+\t\t\tbuilder.accessTokenValiditySeconds(this.details.getAccessTokenValiditySeconds());\n+\t\t}\n+\t\tif (this.details.getRefreshTokenValiditySeconds() != null) {\n+\t\t\tbuilder.refreshTokenValiditySeconds(this.details.getRefreshTokenValiditySeconds());\n+\t\t}\n \t\tif (this.details.getRegisteredRedirectUri() != null) {\n \t\t\tbuilder.redirectUris(\n \t\t\t\t\tthis.details.getRegisteredRedirectUri().toArray(new String[0]));",
    "output": "Add missing properties to OAuth2AutorizationServer\nMake sure that `autoApprove`, `accessTokenValiditySeconds`, and\n`refreshTokenValiditySeconds` properties from the `ClientDetails`\nare used"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ResourceProperties.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ResourceProperties.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ResourceProperties.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ResourceProperties.java\n@@ -16,7 +16,6 @@\n \n package org.springframework.boot.autoconfigure.web;\n \n-import java.io.IOException;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n@@ -92,14 +91,14 @@ public void setStaticLocations(String[] staticLocations) {\n \tpublic Resource getWelcomePage() {\n \t\tfor (String location : getStaticWelcomePageLocations()) {\n \t\t\tResource resource = this.resourceLoader.getResource(location);\n-\t\t\tif (resource.exists()) {\n-\t\t\t\ttry {\n+\t\t\ttry {\n+\t\t\t\tif (resource.exists()) {\n \t\t\t\t\tresource.getURL();\n \t\t\t\t\treturn resource;\n \t\t\t\t}\n-\t\t\t\tcatch (IOException ex) {\n-\t\t\t\t\t// Ignore\n-\t\t\t\t}\n+\t\t\t}\n+\t\t\tcatch (Exception ex) {\n+\t\t\t\t// Ignore\n \t\t\t}\n \t\t}\n \t\treturn null;",
    "output": "Be more defensive about exceptions from resource\nOtherwise you can get an exception here that is unuseful, e.g. from\na ServletContext that isn't properly initialized."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/oauth2/resource/ResourceServerTokenServicesConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/oauth2/resource/ResourceServerTokenServicesConfigurationTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/oauth2/resource/ResourceServerTokenServicesConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/oauth2/resource/ResourceServerTokenServicesConfigurationTests.java\n@@ -21,6 +21,7 @@\n \n import org.junit.After;\n import org.junit.Test;\n+\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.config.BeanDefinition;\n import org.springframework.beans.factory.support.BeanDefinitionRegistry;",
    "output": "Fix Checkstyle violations"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java b/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n@@ -680,7 +680,7 @@ public void mimeMappingsAreCorrectlyConfigured() throws Exception {\n \t@Test\n \tpublic void rootServletContextResource() throws Exception {\n \t\tAbstractEmbeddedServletContainerFactory factory = getFactory();\n-\t\tAtomicReference<URL> rootResource = new AtomicReference<URL>();\n+\t\tfinal AtomicReference<URL> rootResource = new AtomicReference<URL>();\n \t\tthis.container = factory\n \t\t\t\t.getEmbeddedServletContainer(new ServletContextInitializer() {\n \t\t\t\t\t@Override",
    "output": "Keep javac happy by making variable explicitly final"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java\n--- a/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java\n@@ -337,7 +337,7 @@ private void registerShutdownHookIfNecessary(Environment environment,\n \t\t\tRunnable shutdownHandler = loggingSystem.getShutdownHandler();\n \t\t\tif (shutdownHandler != null\n \t\t\t\t\t&& shutdownHookRegistered.compareAndSet(false, true)) {\n-\t\t\t\tRuntime.getRuntime().addShutdownHook(new Thread());\n+\t\t\t\tRuntime.getRuntime().addShutdownHook(new Thread(shutdownHandler));\n \t\t\t}\n \t\t}\n \t}",
    "output": "Fix registration of shutdown handler as a shutdown hook"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java\n@@ -330,7 +330,7 @@ private void configureSslKeyStore(AbstractHttp11JsseProtocol<?> protocol, Ssl ss\n \t\t}\n \t\tcatch (FileNotFoundException ex) {\n \t\t\tthrow new EmbeddedServletContainerException(\n-\t\t\t\t\t\"Could load key store: \" + ex.getMessage(), ex);\n+\t\t\t\t\t\"Could not load key store: \" + ex.getMessage(), ex);\n \t\t}\n \t\tif (ssl.getKeyStoreType() != null) {\n \t\t\tprotocol.setKeystoreType(ssl.getKeyStoreType());\n@@ -348,7 +348,7 @@ private void configureSslTrustStore(AbstractHttp11JsseProtocol<?> protocol, Ssl\n \t\t\t}\n \t\t\tcatch (FileNotFoundException ex) {\n \t\t\t\tthrow new EmbeddedServletContainerException(\n-\t\t\t\t\t\t\"Could load trust store: \" + ex.getMessage(), ex);\n+\t\t\t\t\t\t\"Could not load trust store: \" + ex.getMessage(), ex);\n \t\t\t}\n \t\t}\n \t\tprotocol.setTruststorePass(ssl.getTrustStorePassword());",
    "output": "Fix error messages"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java\n@@ -330,7 +330,7 @@ private void configureSslKeyStore(AbstractHttp11JsseProtocol<?> protocol, Ssl ss\n \t\t}\n \t\tcatch (FileNotFoundException ex) {\n \t\t\tthrow new EmbeddedServletContainerException(\n-\t\t\t\t\t\"Could load key store: \" + ex.getMessage(), ex);\n+\t\t\t\t\t\"Could not load key store: \" + ex.getMessage(), ex);\n \t\t}\n \t\tif (ssl.getKeyStoreType() != null) {\n \t\t\tprotocol.setKeystoreType(ssl.getKeyStoreType());\n@@ -348,7 +348,7 @@ private void configureSslTrustStore(AbstractHttp11JsseProtocol<?> protocol, Ssl\n \t\t\t}\n \t\t\tcatch (FileNotFoundException ex) {\n \t\t\t\tthrow new EmbeddedServletContainerException(\n-\t\t\t\t\t\t\"Could load trust store: \" + ex.getMessage(), ex);\n+\t\t\t\t\t\t\"Could not load trust store: \" + ex.getMessage(), ex);\n \t\t\t}\n \t\t}\n \t\tprotocol.setTruststorePass(ssl.getTrustStorePassword());",
    "output": "Fix error messages"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/web/OrderedRequestContextFilter.java b/spring-boot/src/main/java/org/springframework/boot/context/web/OrderedRequestContextFilter.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/web/OrderedRequestContextFilter.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/web/OrderedRequestContextFilter.java\n@@ -16,6 +16,7 @@\n \n package org.springframework.boot.context.web;\n \n+import org.springframework.boot.context.embedded.FilterRegistrationBean;\n import org.springframework.core.Ordered;\n import org.springframework.web.filter.RequestContextFilter;\n \n@@ -27,8 +28,8 @@\n  */\n public class OrderedRequestContextFilter extends RequestContextFilter implements Ordered {\n \n-\t// Order defaults to high but after Spring Session filter\n-\tprivate int order = Ordered.HIGHEST_PRECEDENCE + 100;\n+\t// Order defaults to after Spring Session filter\n+\tprivate int order = FilterRegistrationBean.REQUEST_WRAPPER_FILTER_MAX_ORDER + 5;\n \n \t@Override\n \tpublic int getOrder() {",
    "output": "Refine RequestContextFilter order\nUse an order relative to REQUEST_WRAPPER_FILTER_MAX_ORDER."
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcHypermediaManagementContextConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcHypermediaManagementContextConfiguration.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcHypermediaManagementContextConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcHypermediaManagementContextConfiguration.java\n@@ -49,7 +49,6 @@\n import org.springframework.boot.autoconfigure.web.ServerProperties;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.Configuration;\n import org.springframework.core.MethodParameter;\n import org.springframework.core.annotation.AnnotationUtils;\n import org.springframework.core.io.ResourceLoader;\n@@ -136,12 +135,6 @@ public DefaultCurieProvider curieProvider(ServerProperties server,\n \t\treturn new DefaultCurieProvider(\"boot\", new UriTemplate(path));\n \t}\n \n-\t@ConditionalOnProperty(prefix = \"endpoints.actuator\", name = \"enabled\", matchIfMissing = true)\n-\t@Configuration\n-\tstatic class ActuatorMvcEndpointConfiguration {\n-\n-\t}\n-\n \t/**\n \t * Controller advice that adds links to the actuator endpoint's path.\n \t */",
    "output": "Polishing: remove dead code"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java b/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java\n--- a/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java\n@@ -106,8 +106,8 @@ public void initialize(LoggingInitializationContext initializationContext,\n \t\tsuper.initialize(initializationContext, configLocation, logFile);\n \t\tif (StringUtils.hasText(System.getProperty(CONFIGURATION_FILE_PROPERTY))) {\n \t\t\tgetLogger(LogbackLoggingSystem.class.getName()).warn(\n-\t\t\t\t\t\"Ignoring '\"+CONFIGURATION_FILE_PROPERTY+\"' system property. \" +\n-\t\t\t\t\t\t\t\"Please use 'logging.path' instead.\");\n+\t\t\t\t\t\"Ignoring '\" + CONFIGURATION_FILE_PROPERTY + \"' system property. \"\n+\t\t\t\t\t\t\t+ \"Please use 'logging.path' instead.\");\n \t\t}\n \t}\n ",
    "output": "Fix checkstyle violations"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/bind/PropertySourcesPropertyValues.java b/spring-boot/src/main/java/org/springframework/boot/bind/PropertySourcesPropertyValues.java\n--- a/spring-boot/src/main/java/org/springframework/boot/bind/PropertySourcesPropertyValues.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertySourcesPropertyValues.java\n@@ -198,7 +198,6 @@ private PropertyValue putIfAbsent(String propertyName, Object value,\n \t\t\tPropertySource<?> collectionOwner = this.collectionOwners.putIfAbsent(\n \t\t\t\t\tCOLLECTION_PROPERTY.matcher(propertyName).replaceAll(\"[]\"), source);\n \t\t\tif (collectionOwner == null || collectionOwner == source) {\n-\t\t\t\tthis.collectionOwners.get(this.collectionOwners);\n \t\t\t\tPropertyValue propertyValue = new OriginCapablePropertyValue(propertyName,\n \t\t\t\t\t\tvalue, propertyName, source);\n \t\t\t\tthis.propertyValues.put(propertyName, propertyValue);",
    "output": "Remove unnecessary statement"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/bind/PropertySourcesPropertyValues.java b/spring-boot/src/main/java/org/springframework/boot/bind/PropertySourcesPropertyValues.java\n--- a/spring-boot/src/main/java/org/springframework/boot/bind/PropertySourcesPropertyValues.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertySourcesPropertyValues.java\n@@ -198,7 +198,6 @@ private PropertyValue putIfAbsent(String propertyName, Object value,\n \t\t\tPropertySource<?> collectionOwner = this.collectionOwners.putIfAbsent(\n \t\t\t\t\tCOLLECTION_PROPERTY.matcher(propertyName).replaceAll(\"[]\"), source);\n \t\t\tif (collectionOwner == null || collectionOwner == source) {\n-\t\t\t\tthis.collectionOwners.get(this.collectionOwners);\n \t\t\t\tPropertyValue propertyValue = new OriginCapablePropertyValue(propertyName,\n \t\t\t\t\t\tvalue, propertyName, source);\n \t\t\t\tthis.propertyValues.put(propertyName, propertyValue);",
    "output": "Remove unnecessary statement"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-liquibase/src/test/java/sample/liquibase/SampleLiquibaseApplicationTests.java b/spring-boot-samples/spring-boot-sample-liquibase/src/test/java/sample/liquibase/SampleLiquibaseApplicationTests.java\n--- a/spring-boot-samples/spring-boot-sample-liquibase/src/test/java/sample/liquibase/SampleLiquibaseApplicationTests.java\n+++ b/spring-boot-samples/spring-boot-sample-liquibase/src/test/java/sample/liquibase/SampleLiquibaseApplicationTests.java\n@@ -33,7 +33,7 @@ public class SampleLiquibaseApplicationTests {\n \t@Test\n \tpublic void testDefaultSettings() throws Exception {\n \t\ttry {\n-\t\t\tSampleLiquibaseApplication.main(new String[0]);\n+\t\t\tSampleLiquibaseApplication.main(new String[] { \"--server.port=0\" });\n \t\t}\n \t\tcatch (IllegalStateException ex) {\n \t\t\tif (serverNotRunning(ex)) {",
    "output": "Use a random HTTP port when running SampleLiquibaseApplicationTests"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/web/SpringBootServletInitializer.java b/spring-boot/src/main/java/org/springframework/boot/context/web/SpringBootServletInitializer.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/web/SpringBootServletInitializer.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/web/SpringBootServletInitializer.java\n@@ -62,7 +62,7 @@\n  */\n public abstract class SpringBootServletInitializer implements WebApplicationInitializer {\n \n-\tprotected final Log logger = LogFactory.getLog(getClass());\n+\tprotected Log logger; // Don't initialize early\n \n \tprivate boolean registerErrorPageFilter = true;\n \n@@ -78,6 +78,9 @@ protected final void setRegisterErrorPageFilter(boolean registerErrorPageFilter)\n \n \t@Override\n \tpublic void onStartup(ServletContext servletContext) throws ServletException {\n+\t\t// Logger initialization is deferred in case a ordered\n+\t\t// LogServletContextInitializer is being used\n+\t\tthis.logger = LogFactory.getLog(getClass());\n \t\tWebApplicationContext rootAppContext = createRootApplicationContext(\n \t\t\t\tservletContext);\n \t\tif (rootAppContext != null) {",
    "output": "Defer SpringBootServletInitializer getLog\nChange `SpringBootServletInitializer` so that the logger is created\nin `onStartup` rather than on class creation. The allows logging to\nbe initialized in an different WebApplicationInitializer."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfigurationTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfigurationTests.java\n@@ -60,9 +60,9 @@\n import org.springframework.util.MultiValueMap;\n import org.springframework.web.context.WebApplicationContext;\n \n-import static org.junit.Assert.assertEquals;\n import static org.hamcrest.Matchers.is;\n import static org.hamcrest.Matchers.notNullValue;\n+import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n ",
    "output": "Fix import ordering"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/SpringBootPlugin.java b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/SpringBootPlugin.java\n--- a/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/SpringBootPlugin.java\n+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/java/org/springframework/boot/gradle/SpringBootPlugin.java\n@@ -36,7 +36,7 @@\n  * @author Phillip Webb\n  * @author Dave Syer\n  */\n-class SpringBootPlugin implements Plugin<Project> {\n+public class SpringBootPlugin implements Plugin<Project> {\n \n \t@Override\n \tpublic void apply(Project project) {",
    "output": "Restore compatibility with Gradle 2.0\nGradle 2.0, and only 2.0, requires a Plugin implementation to be\npublic. The changes made in  (9c14ed3) made the class\npackage-private."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DatabaseDriver.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DatabaseDriver.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DatabaseDriver.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DatabaseDriver.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2014 the original author or authors.\n+ * Copyright 2012-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -24,6 +24,7 @@\n  *\n  * @author Phillip Webb\n  * @author Maciej Walkowiak\n+ * @author Marten Deinum\n  * @since 1.2.0\n  */\n enum DatabaseDriver {\n@@ -87,7 +88,12 @@ enum DatabaseDriver {\n \t * SQL Server.\n \t */\n \tSQLSERVER(\"com.microsoft.sqlserver.jdbc.SQLServerDriver\",\n-\t\t\t\"com.microsoft.sqlserver.jdbc.SQLServerXADataSource\");\n+\t\t\t\"com.microsoft.sqlserver.jdbc.SQLServerXADataSource\"),\n+\n+\t/**\n+\t * DB2 Server.\n+\t */\n+\tDB2(\"com.ibm.db2.jcc.DB2Driver\", \"com.ibm.db2.jcc.DB2XADataSource\");\n \n \tprivate final String driverClassName;\n ",
    "output": "Add support for the DB2 Universal JDBC driver"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DatabaseDriver.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DatabaseDriver.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DatabaseDriver.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DatabaseDriver.java\n@@ -87,7 +87,12 @@ enum DatabaseDriver {\n \t * SQL Server.\n \t */\n \tSQLSERVER(\"com.microsoft.sqlserver.jdbc.SQLServerDriver\",\n-\t\t\t\"com.microsoft.sqlserver.jdbc.SQLServerXADataSource\");\n+\t\t\t\"com.microsoft.sqlserver.jdbc.SQLServerXADataSource\"),\n+\n+\t/**\n+\t * DB2 Server.\n+\t */\n+\tDB2(\"com.ibm.db2.jcc.DB2Driver\", \"com.ibm.db2.jcc.DB2XADataSource\");\n \n \tprivate final String driverClassName;\n ",
    "output": "Add support for the DB2 Universal JDBC driver"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/env/PropertySourcesLoader.java b/spring-boot/src/main/java/org/springframework/boot/env/PropertySourcesLoader.java\n--- a/spring-boot/src/main/java/org/springframework/boot/env/PropertySourcesLoader.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/env/PropertySourcesLoader.java\n@@ -18,7 +18,7 @@\n \n import java.io.IOException;\n import java.util.Arrays;\n-import java.util.HashSet;\n+import java.util.LinkedHashSet;\n import java.util.List;\n import java.util.Set;\n \n@@ -199,7 +199,7 @@ public MutablePropertySources getPropertySources() {\n \t * @return the file extensions\n \t */\n \tpublic Set<String> getAllFileExtensions() {\n-\t\tSet<String> fileExtensions = new HashSet<String>();\n+\t\tSet<String> fileExtensions = new LinkedHashSet<String>();\n \t\tfor (PropertySourceLoader loader : this.loaders) {\n \t\t\tfileExtensions.addAll(Arrays.asList(loader.getFileExtensions()));\n \t\t}",
    "output": "Change HashSet to LinkedHashSet to preserve order of file extensions"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/oauth2/OAuth2AutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/oauth2/OAuth2AutoConfigurationTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/oauth2/OAuth2AutoConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/security/oauth2/OAuth2AutoConfigurationTests.java\n@@ -131,8 +131,8 @@ public void testDefaultConfiguration() {\n \t\tClientDetails clientDetails = clientDetailsService.loadClientByClientId(config\n \t\t\t\t.getClientId());\n \t\tassertThat(AopUtils.isJdkDynamicProxy(clientDetailsService), equalTo(true));\n-\t\tassertThat(AopUtils.getTargetClass(clientDetailsService),\n-\t\t\t\tis(equalTo(InMemoryClientDetailsService.class)));\n+\t\tassertThat(AopUtils.getTargetClass(clientDetailsService).getName(),\n+\t\t\t\tis(equalTo(InMemoryClientDetailsService.class.getName())));\n \t\tassertThat(handler instanceof ApprovalStoreUserApprovalHandler, equalTo(true));\n \t\tassertThat(clientDetails, equalTo(config));\n \t\tverifyAuthentication(config);",
    "output": "Fix compile error in tests that doesn’t affect the compiler in Eclipse"
  },
  {
    "input": "diff --git a/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/livereload/LiveReloadServerTests.java b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/livereload/LiveReloadServerTests.java\n--- a/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/livereload/LiveReloadServerTests.java\n+++ b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/livereload/LiveReloadServerTests.java\n@@ -130,7 +130,7 @@ public void clientClose() throws Exception {\n \tprivate void awaitClosedException() throws InterruptedException {\n \t\tlong startTime = System.currentTimeMillis();\n \t\twhile (this.server.getClosedExceptions().isEmpty()\n-\t\t\t\t&& System.currentTimeMillis() - startTime > 10000) {\n+\t\t\t\t&& System.currentTimeMillis() - startTime < 10000) {\n \t\t\tThread.sleep(100);\n \t\t}\n \t}",
    "output": "Correct timeout logic when awaiting exception in LiveReloadServerTests"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/MetricFilterAutoConfigurationTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/MetricFilterAutoConfigurationTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/MetricFilterAutoConfigurationTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/MetricFilterAutoConfigurationTests.java\n@@ -252,6 +252,8 @@ public void correctlyRecordsMetricsForFailedDeferredResultResponse() throws Exce\n \t\t\t\t.andReturn();\n \t\tlatch.countDown();\n \t\ttry {\n+\t\t\t// Work around SPR-13079 which has not been fixed in 4.1.x\n+\t\t\tresult.getAsyncResult();\n \t\t\tmvc.perform(asyncDispatch(result));\n \t\t\tfail();\n \t\t}",
    "output": "Work around intermittent failure caused by SPR-13079"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/MetricFilterAutoConfigurationTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/MetricFilterAutoConfigurationTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/MetricFilterAutoConfigurationTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/MetricFilterAutoConfigurationTests.java\n@@ -228,6 +228,8 @@ public void correctlyRecordsMetricsForDeferredResultResponse() throws Exception\n \t\t\t\t.andExpect(request().attribute(attributeName, is(notNullValue())))\n \t\t\t\t.andReturn();\n \t\tlatch.countDown();\n+\t\t// Work around SPR-13079 which has not been fixed in 4.1.x\n+\t\tresult.getAsyncResult();\n \t\tmvc.perform(asyncDispatch(result)).andExpect(status().isCreated())\n \t\t\t\t.andExpect(request().attribute(attributeName, is(nullValue())));\n \t\tverify(context.getBean(CounterService.class)).increment(\"status.201.create\");",
    "output": "Work around MockMvc bug (SPR-13079) that has only been fixed in 4.2"
  },
  {
    "input": "diff --git a/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/filewatch/FileSystemWatcherTests.java b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/filewatch/FileSystemWatcherTests.java\n--- a/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/filewatch/FileSystemWatcherTests.java\n+++ b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/filewatch/FileSystemWatcherTests.java\n@@ -113,8 +113,8 @@ public void sourceFolderMustExist() throws Exception {\n \t\tFile folder = new File(\"does/not/exist\");\n \t\tassertThat(folder.exists(), is(false));\n \t\tthis.thrown.expect(IllegalArgumentException.class);\n-\t\tthis.thrown\n-\t\t\t\t.expectMessage(\"Folder 'does/not/exist' must exist and must be a directory\");\n+\t\tthis.thrown.expectMessage(\"Folder '\" + folder\n+\t\t\t\t+ \"' must exist and must be a directory\");\n \t\tthis.watcher.addSourceFolder(folder);\n \t}\n ",
    "output": "Fix FileSystemWatcherTests.sourceFolderMustExist on Windows"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfiguration.java\n@@ -129,7 +129,7 @@ public FlywayMigrationInitializer flywayInitializer(Flyway flyway) {\n \t\t@Configuration\n \t\t@ConditionalOnClass(LocalContainerEntityManagerFactoryBean.class)\n \t\t@ConditionalOnBean(AbstractEntityManagerFactoryBean.class)\n-\t\tprotected class FlywayInitializerJpaDependencyConfiguration extends\n+\t\tprotected static class FlywayInitializerJpaDependencyConfiguration extends\n \t\t\t\tEntityManagerFactoryDependsOnPostProcessor {\n \n \t\t\tpublic FlywayInitializerJpaDependencyConfiguration() {",
    "output": "Make new configuration inner class static"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfigurationTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfigurationTests.java\n@@ -17,11 +17,13 @@\n package org.springframework.boot.autoconfigure.flyway;\n \n import java.util.Arrays;\n-import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n \n import javax.sql.DataSource;\n \n import org.flywaydb.core.Flyway;\n+import org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Rule;\n@@ -229,9 +231,11 @@ public Flyway flyway() {\n \n \t\t@Bean\n \t\tpublic LocalContainerEntityManagerFactoryBean entityManagerFactoryBean() {\n+\t\t\tMap<String, Object> properties = new HashMap<String, Object>();\n+\t\t\tproperties.put(\"configured\", \"manually\");\n+\t\t\tproperties.put(\"hibernate.transaction.jta.platform\", NoJtaPlatform.INSTANCE);\n \t\t\treturn new EntityManagerFactoryBuilder(new HibernateJpaVendorAdapter(),\n-\t\t\t\t\tCollections.<String, Object>emptyMap(), null).dataSource(\n-\t\t\t\t\tthis.dataSource).build();\n+\t\t\t\t\tproperties, null).dataSource(this.dataSource).build();\n \t\t}\n \n \t}",
    "output": "Ensure that new JPA-based test doesn’t accidentally enable Bitronix"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfigurationTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/flyway/FlywayAutoConfigurationTests.java\n@@ -230,7 +230,8 @@ public Flyway flyway() {\n \t\t@Bean\n \t\tpublic LocalContainerEntityManagerFactoryBean entityManagerFactoryBean() {\n \t\t\treturn new EntityManagerFactoryBuilder(new HibernateJpaVendorAdapter(),\n-\t\t\t\t\tCollections.emptyMap(), null).dataSource(this.dataSource).build();\n+\t\t\t\t\tCollections.<String, Object>emptyMap(), null).dataSource(\n+\t\t\t\t\tthis.dataSource).build();\n \t\t}\n \n \t}",
    "output": "Fix compile failure that doesn’t occur in Eclipse but does on Travis"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/EmbeddedServletContainerAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/EmbeddedServletContainerAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/EmbeddedServletContainerAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/EmbeddedServletContainerAutoConfiguration.java\n@@ -21,6 +21,7 @@\n import org.apache.catalina.startup.Tomcat;\n import org.eclipse.jetty.server.Server;\n import org.eclipse.jetty.util.Loader;\n+import org.eclipse.jetty.webapp.WebAppContext;\n import org.springframework.beans.BeansException;\n import org.springframework.beans.factory.BeanFactory;\n import org.springframework.beans.factory.BeanFactoryAware;\n@@ -82,7 +83,7 @@ public TomcatEmbeddedServletContainerFactory tomcatEmbeddedServletContainerFacto\n \t * Nested configuration if Jetty is being used.\n \t */\n \t@Configuration\n-\t@ConditionalOnClass({ Servlet.class, Server.class, Loader.class })\n+\t@ConditionalOnClass({ Servlet.class, Server.class, Loader.class, WebAppContext.class })\n \t@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)\n \tpublic static class EmbeddedJetty {\n ",
    "output": "Only try to auto-configure Jetty when jetty-webapp is on the classpath"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/DependencyManagementBomTransformation.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/DependencyManagementBomTransformation.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/DependencyManagementBomTransformation.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/DependencyManagementBomTransformation.java\n@@ -66,7 +66,7 @@ public class DependencyManagementBomTransformation extends AnnotatedNodeASTTrans\n \t/**\n \t * The order of the transformation.\n \t */\n-\tpublic static final int ORDER = Ordered.HIGHEST_PRECEDENCE;\n+\tpublic static final int ORDER = Ordered.HIGHEST_PRECEDENCE + 100;\n \n \tprivate static final Set<String> DEPENDENCY_MANAGEMENT_BOM_ANNOTATION_NAMES = Collections\n \t\t\t.unmodifiableSet(new HashSet<String>(Arrays.asList(",
    "output": "Change order of bom transformation to allow others earlier"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/system/ApplicationPidFileWriter.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/system/ApplicationPidFileWriter.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/system/ApplicationPidFileWriter.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/system/ApplicationPidFileWriter.java\n@@ -190,7 +190,7 @@ static void reset() {\n \t/**\n \t * Provides access to a property value.\n \t */\n-\tprivate static interface Property {\n+\tprivate interface Property {\n \n \t\tString getValue(SpringApplicationEvent event);\n ",
    "output": "Remove unecessary modifier"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/logging/AutoConfigurationReportLoggingInitializerTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/logging/AutoConfigurationReportLoggingInitializerTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/logging/AutoConfigurationReportLoggingInitializerTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/logging/AutoConfigurationReportLoggingInitializerTests.java\n@@ -105,7 +105,7 @@ public Object answer(InvocationOnMock invocation) throws Throwable {\n \n \t@After\n \tpublic void cleanup() {\n-\t\tSystem.clearProperty(LogFactory.FACTORY_PROPERTIES);\n+\t\tSystem.clearProperty(LogFactory.FACTORY_PROPERTY);\n \t\tLogFactory.releaseAll();\n \t}\n ",
    "output": "Fix test cleanup to reset commons logging"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnJava.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnJava.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnJava.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/ConditionalOnJava.java\n@@ -22,9 +22,9 @@\n import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n \n-import org.flywaydb.core.internal.util.ClassUtils;\n import org.springframework.context.annotation.Conditional;\n import org.springframework.util.Assert;\n+import org.springframework.util.ClassUtils;\n \n /**\n  * {@link Conditional} that matches based on the JVM version the application is running",
    "output": "Use the right version of ClassUtils"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/logging/AutoConfigurationReportLoggingInitializer.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/logging/AutoConfigurationReportLoggingInitializer.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/logging/AutoConfigurationReportLoggingInitializer.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/logging/AutoConfigurationReportLoggingInitializer.java\n@@ -184,7 +184,9 @@ private Map<String, ConditionAndOutcomes> orderByName(\n \n \tprivate void addLogMessage(StringBuilder message, String source,\n \t\t\tConditionAndOutcomes conditionAndOutcomes) {\n-\t\tmessage.append(\"\\n   \" + source + \"\\n\");\n+\t\tmessage.append(\"\\n   \" + source);\n+\t\tmessage.append(conditionAndOutcomes.isFullMatch() ? \" matched\\n\"\n+\t\t\t\t: \" did not match\\n\");\n \t\tfor (ConditionAndOutcome conditionAndOutcome : conditionAndOutcomes) {\n \t\t\tmessage.append(\"      - \");\n \t\t\tif (StringUtils.hasLength(conditionAndOutcome.getOutcome().getMessage())) {",
    "output": "Add per-line match indicators to a/c report\nUpdate the logged auto-configuration report so that each line includes\n\"matched\", \"did not match\" text. This helps when looking to see if a\nspecific auto-configuration class was applied or not."
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java\n@@ -174,7 +174,9 @@ private void createChildManagementContext() {\n \t\t\t// and this is the signature of that happening\n \t\t\tif (ex instanceof EmbeddedServletContainerException\n \t\t\t\t\t|| ex.getCause() instanceof EmbeddedServletContainerException) {\n-\t\t\t\tlogger.warn(\"Could not start embedded container (management endpoints are still available through JMX)\");\n+\t\t\t\tlogger.warn(\"Could not start embedded management container (management endpoints \"\n+\t\t\t\t\t\t+ \"are still available through JMX)\");\n+\t\t\t\tlogger.debug(\"Embedded management container startup failed\", ex);\n \t\t\t}\n \t\t\telse {\n \t\t\t\tthrow ex;",
    "output": "Include debug message on management context fail\nUpdate EndpointWebMvcAutoConfiguration to log exception details at DEBUG\nin addition to the WARNING message when the child context fails to\nstart."
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfiguration.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementWebSecurityAutoConfiguration.java\n@@ -242,7 +242,7 @@ protected final void deduceEndpointHandlerMappingIfMissing() {\n \t\t\t\t}\n \t\t\t\tif (this.endpointHandlerMapping == null) {\n \t\t\t\t\tthis.endpointHandlerMapping = new EndpointHandlerMapping(\n-\t\t\t\t\t\t\tCollections.<MvcEndpoint> emptySet());\n+\t\t\t\t\t\t\tCollections.<MvcEndpoint>emptySet());\n \t\t\t\t}\n \t\t\t}\n \t\t}",
    "output": "Make checkstyle happier"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/MvcEndpointIntegrationTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/MvcEndpointIntegrationTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/MvcEndpointIntegrationTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/MvcEndpointIntegrationTests.java\n@@ -41,7 +41,6 @@\n import static org.hamcrest.Matchers.startsWith;\n import static org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers.springSecurity;\n import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n-import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;\n import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n \n@@ -96,7 +95,7 @@ public void endpointSecurityCanBeDisabled() throws Exception {\n \t\tEnvironmentTestUtils.addEnvironment(this.context,\n \t\t\t\t\"management.security.enabled:false\");\n \t\tMockMvc mockMvc = createSecureMockMvc();\n-\t\tmockMvc.perform(get(\"/beans\")).andDo(print()).andExpect(status().isOk());\n+\t\tmockMvc.perform(get(\"/beans\")).andExpect(status().isOk());\n \t}\n \n \tprivate void assertIndentedJsonResponse(Class<?> configuration) throws Exception {",
    "output": "Fix Checkstyle warning"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java b/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java\n--- a/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java\n@@ -37,6 +37,7 @@\n import org.springframework.util.ResourceUtils;\n import org.springframework.util.StringUtils;\n \n+import ch.qos.logback.classic.BasicConfigurator;\n import ch.qos.logback.classic.Level;\n import ch.qos.logback.classic.LoggerContext;\n import ch.qos.logback.classic.joran.JoranConfigurator;\n@@ -178,6 +179,7 @@ public void cleanUp() {\n \t\tsuper.cleanUp();\n \t\tgetLoggerContext().getStatusManager().clear();\n \t\tgetLoggerContext().stop();\n+\t\tBasicConfigurator.configure(getLoggerContext());\n \t}\n \n \t@Override",
    "output": "Return Logback to its default basic configuration after clean up"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/websocket/WebSocketMessagingAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/websocket/WebSocketMessagingAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/websocket/WebSocketMessagingAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/websocket/WebSocketMessagingAutoConfiguration.java\n@@ -29,6 +29,7 @@\n import org.springframework.messaging.converter.DefaultContentTypeResolver;\n import org.springframework.messaging.converter.MappingJackson2MessageConverter;\n import org.springframework.messaging.converter.MessageConverter;\n+import org.springframework.messaging.simp.config.AbstractMessageBrokerConfiguration;\n import org.springframework.util.MimeTypeUtils;\n import org.springframework.web.socket.config.annotation.AbstractWebSocketMessageBrokerConfigurer;\n import org.springframework.web.socket.config.annotation.DelegatingWebSocketMessageBrokerConfiguration;\n@@ -51,7 +52,7 @@ public class WebSocketMessagingAutoConfiguration {\n \t@Configuration\n \t@ConditionalOnBean({ DelegatingWebSocketMessageBrokerConfiguration.class,\n \t\t\tObjectMapper.class })\n-\t@ConditionalOnClass(ObjectMapper.class)\n+\t@ConditionalOnClass({ ObjectMapper.class, AbstractMessageBrokerConfiguration.class })\n \tstatic class WebSocketMessageConverterConfiguration extends\n \t\t\tAbstractWebSocketMessageBrokerConfigurer {\n ",
    "output": "Tighten up the conditions on WebSocketMessagingAutoConfiguration"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/MvcEndpointIntegrationTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/MvcEndpointIntegrationTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/MvcEndpointIntegrationTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/MvcEndpointIntegrationTests.java\n@@ -44,6 +44,8 @@\n  */\n public class MvcEndpointIntegrationTests {\n \n+\tprivate static final String LINE_SEPARATOR = System.getProperty(\"line.separator\");\n+\n \tprivate AnnotationConfigWebApplicationContext context;\n \n \t@Test\n@@ -77,7 +79,8 @@ private void assertIndentedJsonResponse(Class<?> configuration) throws Exception\n \t\tEnvironmentTestUtils.addEnvironment(this.context,\n \t\t\t\t\"spring.jackson.serialization.indent-output:true\");\n \t\tMockMvc mockMvc = createMockMvc();\n-\t\tmockMvc.perform(get(\"/beans\")).andExpect(content().string(startsWith(\"{\\n\")));\n+\t\tmockMvc.perform(get(\"/beans\")).andExpect(\n+\t\t\t\tcontent().string(startsWith(\"{\" + LINE_SEPARATOR)));\n \t}\n \n \tprivate MockMvc createMockMvc() {",
    "output": "Fix tests failing on Windows"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-metrics-opentsdb/src/main/java/sample/metrics/opentsdb/SampleOpenTsdbExportApplication.java b/spring-boot-samples/spring-boot-sample-metrics-opentsdb/src/main/java/sample/metrics/opentsdb/SampleOpenTsdbExportApplication.java\n--- a/spring-boot-samples/spring-boot-sample-metrics-opentsdb/src/main/java/sample/metrics/opentsdb/SampleOpenTsdbExportApplication.java\n+++ b/spring-boot-samples/spring-boot-sample-metrics-opentsdb/src/main/java/sample/metrics/opentsdb/SampleOpenTsdbExportApplication.java\n@@ -17,6 +17,7 @@\n package sample.metrics.opentsdb;\n \n import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.actuate.autoconfigure.ExportMetricWriter;\n import org.springframework.boot.actuate.metrics.opentsdb.DefaultOpenTsdbNamingStrategy;\n import org.springframework.boot.actuate.metrics.opentsdb.OpenTsdbMetricWriter;\n import org.springframework.boot.actuate.metrics.opentsdb.OpenTsdbNamingStrategy;\n@@ -30,6 +31,7 @@ public class SampleOpenTsdbExportApplication {\n \n \t@Bean\n \t@ConfigurationProperties(\"metrics.export\")\n+\t@ExportMetricWriter\n \tpublic MetricWriter openTsdbMetricWriter() {\n \t\tOpenTsdbMetricWriter writer = new OpenTsdbMetricWriter();\n \t\twriter.setNamingStrategy(namingStrategy());",
    "output": "Add missing annotation to openTSDB sample"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java b/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n@@ -223,7 +223,7 @@ public void onStartup(ServletContext servletContext)\n \t@Test\n \tpublic void specificPort() throws Exception {\n \t\tAbstractEmbeddedServletContainerFactory factory = getFactory();\n-\t\tint specificPort = SocketUtils.findAvailableTcpPort(40000);\n+\t\tint specificPort = SocketUtils.findAvailableTcpPort(41000);\n \t\tfactory.setPort(specificPort);\n \t\tthis.container = factory\n \t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());",
    "output": "Tweak port usage to try and fix Windows CI build"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/SpringApplicationHierarchyTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/SpringApplicationHierarchyTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/SpringApplicationHierarchyTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/SpringApplicationHierarchyTests.java\n@@ -56,14 +56,14 @@ public void testChild() {\n \t}\n \n \t@EnableAutoConfiguration(exclude = { ElasticsearchDataAutoConfiguration.class,\n-\t\t\tElasticsearchRepositoriesAutoConfiguration.class }, excludeName = { \"org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchAutoConfiguration\" })\n+\t\t\tElasticsearchRepositoriesAutoConfiguration.class }, excludeName = { \"org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration\" })\n \tpublic static class Child {\n \t}\n \n \t@EnableAutoConfiguration(exclude = { JolokiaAutoConfiguration.class,\n \t\t\tEndpointMBeanExportAutoConfiguration.class,\n \t\t\tElasticsearchDataAutoConfiguration.class,\n-\t\t\tElasticsearchRepositoriesAutoConfiguration.class }, excludeName = { \"org.springframework.boot.autoconfigure.elasticsearch.ElasticsearchAutoConfiguration\" })\n+\t\t\tElasticsearchRepositoriesAutoConfiguration.class }, excludeName = { \"org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration\" })\n \tpublic static class Parent {\n \t}\n ",
    "output": "Fix following package auto-configuration moves A string based exclude was missed in commit c629813165e15c79c59."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/hazelcast/HazelcastAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/hazelcast/HazelcastAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/hazelcast/HazelcastAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/hazelcast/HazelcastAutoConfiguration.java\n@@ -49,15 +49,14 @@\n public class HazelcastAutoConfiguration {\n \n \t@Configuration\n-\t@ConditionalOnMissingBean({ HazelcastInstance.class, Config.class })\n+\t@ConditionalOnMissingBean(Config.class)\n \t@Conditional(ConfigAvailableCondition.class)\n \tstatic class HazelcastConfigFileConfiguration {\n \n \t\t@Autowired\n \t\tprivate HazelcastProperties hazelcastProperties;\n \n \t\t@Bean\n-\t\t@ConditionalOnMissingBean\n \t\tpublic HazelcastInstance hazelcastInstance() throws IOException {\n \t\t\tResource config = this.hazelcastProperties.resolveConfigLocation();\n \t\t\tif (config != null) {\n@@ -69,7 +68,6 @@ public HazelcastInstance hazelcastInstance() throws IOException {\n \t}\n \n \t@Configuration\n-\t@ConditionalOnMissingBean(HazelcastInstance.class)\n \t@ConditionalOnSingleCandidate(Config.class)\n \tstatic class HazelcastConfigConfiguration {\n ",
    "output": "Remove duplicate `@ConditionalOnMissingBean` checks."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/hazelcast/HazelcastAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/hazelcast/HazelcastAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/hazelcast/HazelcastAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/hazelcast/HazelcastAutoConfiguration.java\n@@ -49,15 +49,14 @@\n public class HazelcastAutoConfiguration {\n \n \t@Configuration\n-\t@ConditionalOnMissingBean({ HazelcastInstance.class, Config.class })\n+\t@ConditionalOnMissingBean(Config.class)\n \t@Conditional(ConfigAvailableCondition.class)\n \tstatic class HazelcastConfigFileConfiguration {\n \n \t\t@Autowired\n \t\tprivate HazelcastProperties hazelcastProperties;\n \n \t\t@Bean\n-\t\t@ConditionalOnMissingBean\n \t\tpublic HazelcastInstance hazelcastInstance() throws IOException {\n \t\t\tResource config = this.hazelcastProperties.resolveConfigLocation();\n \t\t\tif (config != null) {\n@@ -69,7 +68,6 @@ public HazelcastInstance hazelcastInstance() throws IOException {\n \t}\n \n \t@Configuration\n-\t@ConditionalOnMissingBean(HazelcastInstance.class)\n \t@ConditionalOnSingleCandidate(Config.class)\n \tstatic class HazelcastConfigConfiguration {\n ",
    "output": "Remove duplicate `@ConditionalOnMissingBean` checks."
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java\n@@ -192,7 +192,7 @@ private void applySerializationModifier(ObjectMapper mapper) {\n \t */\n \tprivate void applyCglibFilters(ObjectMapper mapper) {\n \t\tmapper.setAnnotationIntrospector(new CglibAnnotationIntrospector());\n-\t\tmapper.setFilters(new SimpleFilterProvider().addFilter(CGLIB_FILTER_ID,\n+\t\tmapper.setFilterProvider(new SimpleFilterProvider().addFilter(CGLIB_FILTER_ID,\n \t\t\t\tnew CglibBeanPropertyFilter()));\n \t}\n ",
    "output": "Fix deprecation warning in ConfigurationPropertiesReportEndpoint"
  },
  {
    "input": "diff --git a/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/DevToolsPropertiesTests.java b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/DevToolsPropertiesTests.java\n--- a/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/DevToolsPropertiesTests.java\n+++ b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/DevToolsPropertiesTests.java\n@@ -38,7 +38,7 @@ public void additionalExcludeKeepsDefaults() {\n \t\t\t\trestart.getAllExclude(),\n \t\t\t\tarrayContaining(\"META-INF/maven/**\", \"META-INF/resources/**\",\n \t\t\t\t\t\t\"resources/**\", \"static/**\", \"public/**\", \"templates/**\",\n-\t\t\t\t\t\t\"foo/**\", \"bar/**\"));\n+\t\t\t\t\t\t\"**/*Test.class\", \"**/*Tests.class\", \"foo/**\", \"bar/**\"));\n \t}\n \n \t@Test",
    "output": "Upgrade tests to align with changes made in 8094076"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletComponentScanRegistrar.java b/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletComponentScanRegistrar.java\n--- a/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletComponentScanRegistrar.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/web/servlet/ServletComponentScanRegistrar.java\n@@ -62,7 +62,7 @@ private void updatePostProcessor(BeanDefinitionRegistry registry,\n \t\tSet<String> mergedPackages = new LinkedHashSet<String>(\n \t\t\t\t(Set<String>) constructorArguments.getValue());\n \t\tmergedPackages.addAll(packagesToScan);\n-\t\tconstructorArguments.setValue(packagesToScan);\n+\t\tconstructorArguments.setValue(mergedPackages);\n \t}\n \n \tprivate void addPostProcessor(BeanDefinitionRegistry registry,",
    "output": "Use mergedPackages in ServletComponentScanRegistrar"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/embedded/EmbeddedMongoAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/embedded/EmbeddedMongoAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/embedded/EmbeddedMongoAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/embedded/EmbeddedMongoAutoConfiguration.java\n@@ -207,8 +207,7 @@ private final static class ToStringFriendlyFeatureAwareVersion implements\n \t\tprivate ToStringFriendlyFeatureAwareVersion(String version, Set<Feature> features) {\n \t\t\tAssert.notNull(version, \"version must not be null\");\n \t\t\tthis.version = version;\n-\t\t\tthis.features = features == null ? Collections.<Feature> emptySet()\n-\t\t\t\t\t: features;\n+\t\t\tthis.features = features == null ? Collections.<Feature>emptySet() : features;\n \t\t}\n \n \t\t@Override",
    "output": "Override Eclipse’s formatting to keep Checkstyle happy"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java b/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java\n@@ -173,7 +173,7 @@ public void loggingThatUsesJulIsCaptured() {\n \t@Test\n \tpublic void loggingLevelIsPropagatedToJulI() {\n \t\tthis.loggingSystem.beforeInitialize();\n-\t\tthis.loggingSystem.initialize(null, null);\n+\t\tthis.loggingSystem.initialize(this.initializationContext, null, null);\n \t\tthis.loggingSystem.setLogLevel(getClass().getName(), LogLevel.DEBUG);\n \t\tjava.util.logging.Logger julLogger = java.util.logging.Logger\n \t\t\t\t.getLogger(getClass().getName());",
    "output": "Fix failing logback test"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java\n@@ -147,8 +147,9 @@ private void configureSpringJtaPlatform(Map<String, Object> vendorProperties,\n \t\t\tvendorProperties.put(JTA_PLATFORM, new SpringJtaPlatform(\n \t\t\t\t\tjtaTransactionManager));\n \t\t}\n-\t\tcatch (NoClassDefFoundError ex) {\n-\t\t\t// Can happen if Hibernate 4.2 is used\n+\t\tcatch (LinkageError ex) {\n+\t\t\t// NoClassDefFoundError can happen if Hibernate 4.2 is used and some\n+\t\t\t// containers (e.g. JBoss EAP 6) wraps it in the superclass LinkageError\n \t\t\tif (!isUsingJndi()) {\n \t\t\t\tthrow new IllegalStateException(\"Unable to set Hibernate JTA \"\n \t\t\t\t\t\t+ \"platform, are you using the correct \"",
    "output": "Catch more general Hibernate 4.2 LinkageError"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java\n@@ -147,8 +147,9 @@ private void configureSpringJtaPlatform(Map<String, Object> vendorProperties,\n \t\t\tvendorProperties.put(JTA_PLATFORM, new SpringJtaPlatform(\n \t\t\t\t\tjtaTransactionManager));\n \t\t}\n-\t\tcatch (NoClassDefFoundError ex) {\n-\t\t\t// Can happen if Hibernate 4.2 is used\n+\t\tcatch (LinkageError ex) {\n+\t\t\t// NoClassDefFoundError can happen if Hibernate 4.2 is used and some\n+\t\t\t// containers (e.g. JBoss EAP 6) wraps it in the superclass LinkageError\n \t\t\tif (!isUsingJndi()) {\n \t\t\t\tthrow new IllegalStateException(\"Unable to set Hibernate JTA \"\n \t\t\t\t\t\t+ \"platform, are you using the correct \"",
    "output": "Catch more general Hibernate 4.2 LinkageError\nUpdate HibernateJpaAutoConfiguration to catch LinkageError rather than\nNoClassDefFoundError. Required due to the fact that JBoss EAP 6 wraps\nNoClassDefFoundErrors."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java\n@@ -56,7 +56,7 @@\n  * @author Andy Wilkinson\n  * @author Ivan Sopov\n  */\n-@ConfigurationProperties(prefix = \"server\", ignoreUnknownFields = false)\n+@ConfigurationProperties(prefix = \"server\", ignoreUnknownFields = true)\n public class ServerProperties implements EmbeddedServletContainerCustomizer, Ordered {\n \n \t/**",
    "output": "Set ignoreUnknownFields=true on ServerProperties\nUpdate ServerProperties so that unknown SERVER_* environment properties\ndo not cause startup failures."
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/LaunchedURLClassLoader.java b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/LaunchedURLClassLoader.java\n--- a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/LaunchedURLClassLoader.java\n+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/LaunchedURLClassLoader.java\n@@ -47,7 +47,7 @@ public class LaunchedURLClassLoader extends URLClassLoader {\n \t * @param urls the URLs from which to load classes and resources\n \t * @param parent the parent class loader for delegation\n \t */\n-\tLaunchedURLClassLoader(URL[] urls, ClassLoader parent) {\n+\tpublic LaunchedURLClassLoader(URL[] urls, ClassLoader parent) {\n \t\tsuper(urls, parent);\n \t\tthis.rootClassLoader = findRootClassLoader(parent);\n \t}",
    "output": "Make LaunchedURLClassLoader constructor public\nRestore the public constructor in LaunchedURLClassLoader which was\naccidentally removed in commit e07df7e4c6d69b5be6c56e76b854e1a3c7436e89."
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/test/SpringApplicationContextLoader.java b/spring-boot/src/main/java/org/springframework/boot/test/SpringApplicationContextLoader.java\n--- a/spring-boot/src/main/java/org/springframework/boot/test/SpringApplicationContextLoader.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/test/SpringApplicationContextLoader.java\n@@ -82,6 +82,7 @@ public ApplicationContext loadContext(final MergedContextConfiguration config)\n \t\t\tthrows Exception {\n \t\tassertValidAnnotations(config.getTestClass());\n \t\tSpringApplication application = getSpringApplication();\n+\t\tapplication.setRegisterShutdownHook(false);\n \t\tapplication.setMainApplicationClass(config.getTestClass());\n \t\tapplication.setSources(getSources(config));\n \t\tConfigurableEnvironment environment = new StandardEnvironment();",
    "output": "Set registerShutdownHook to false for tests\nUpdate SpringApplicationContextLoader so that setRegisterShutdownHook\nis false for tests."
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/ActuatorHalBrowserEndpoint.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/ActuatorHalBrowserEndpoint.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/ActuatorHalBrowserEndpoint.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/ActuatorHalBrowserEndpoint.java\n@@ -42,7 +42,7 @@ public class ActuatorHalBrowserEndpoint extends ActuatorHalJsonEndpoint implemen\n \t\t\tnew HalBrowserLocation(\"classpath:/META-INF/spring-data-rest/hal-browser/\",\n \t\t\t\t\t\"index.html\"),\n \t\t\tnew HalBrowserLocation(\n-\t\t\t\t\t\"classpath:/META-INF/resources/webjars/hal-browser/b7669f1-1/\",\n+\t\t\t\t\t\"classpath:/META-INF/resources/webjars/hal-browser/9f96c74/\",\n \t\t\t\t\t\"browser.html\") };\n \n \tprivate HalBrowserLocation location;",
    "output": "Upgrade to HAL Browser 9f96c74"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DatabaseDriver.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DatabaseDriver.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DatabaseDriver.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DatabaseDriver.java\n@@ -71,7 +71,7 @@ enum DatabaseDriver {\n \t/**\n \t * Oracle\n \t */\n-\tORACLE(\"oracle.jdbc.OracleDriver\", \"oracle.jdbc.xa.OracleXADataSource\"),\n+\tORACLE(\"oracle.jdbc.OracleDriver\", \"oracle.jdbc.xa.client.OracleXADataSource\"),\n \n \t/**\n \t * Postres",
    "output": "Fix Oracle XA datasource class name"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n--- a/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n@@ -864,7 +864,7 @@ public void setResourceLoader(ResourceLoader resourceLoader) {\n \tpublic void setApplicationContextClass(\n \t\t\tClass<? extends ConfigurableApplicationContext> applicationContextClass) {\n \t\tthis.applicationContextClass = applicationContextClass;\n-\t\tif (isSpringWebAvailable() && !WebApplicationContext.class.isAssignableFrom(\n+\t\tif (!isSpringWebAvailable() || !WebApplicationContext.class.isAssignableFrom(\n \t\t\t\tapplicationContextClass)) {\n \t\t\tthis.webEnvironment = false;\n \t\t}",
    "output": "Refine check\nRefine commit 8a96481 to set the web environment to false if spring web\nis not available in the classpath. Thanks to @mjustin for spotting that\nmistake."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/hateoas/HypermediaAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/hateoas/HypermediaAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/hateoas/HypermediaAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/hateoas/HypermediaAutoConfiguration.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2014 the original author or authors.\n+ * Copyright 2012-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -101,7 +101,7 @@ private void registerHalModule(ObjectMapper objectMapper) {\n \t\t\t\tobjectMapper.registerModule(new Jackson2HalModule());\n \t\t\t\tJackson2HalModule.HalHandlerInstantiator instantiator = new Jackson2HalModule.HalHandlerInstantiator(\n \t\t\t\t\t\tHalObjectMapperConfiguration.this.relProvider,\n-\t\t\t\t\t\tHalObjectMapperConfiguration.this.curieProvider);\n+\t\t\t\t\t\tHalObjectMapperConfiguration.this.curieProvider, null);\n \t\t\t\tobjectMapper.setHandlerInstantiator(instantiator);\n \t\t\t}\n ",
    "output": "Fix upgrade to Spring Data Gosling RELEASE"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BasicBatchConfigurer.java\n@@ -140,6 +140,10 @@ protected JobRepository createJobRepository() throws Exception {\n \t\t\tlogger.warn(\"JPA does not support custom isolation levels, so locks may not be taken when launching Jobs\");\n \t\t\tfactory.setIsolationLevelForCreate(\"ISOLATION_DEFAULT\");\n \t\t}\n+\t\tString tablePrefix = this.properties.getTablePrefix();\n+\t\tif (StringUtils.hasText(tablePrefix)) {\n+\t\t\tfactory.setTablePrefix(tablePrefix);\n+\t\t}\n \t\tfactory.setTransactionManager(getTransactionManager());\n \t\tfactory.afterPropertiesSet();\n \t\treturn factory.getObject();",
    "output": "Consistently apply table prefix\nMake sure that if a custom table prefix is specified, it is set on the\nJobRepository as well."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java\n@@ -736,7 +736,12 @@ public void customize(Connector connector) {\n \t\t}\n \n \t\tprivate void customizeAccessLog(TomcatEmbeddedServletContainerFactory factory) {\n-\t\t\tfactory.addContextValves(this.accesslog.createAccessLogValve());\n+\t\t\tAccessLogValve valve = new AccessLogValve();\n+\t\t\tvalve.setPattern(this.accesslog.getPattern());\n+\t\t\tvalve.setDirectory(this.accesslog.getDirectory());\n+\t\t\tvalve.setPrefix(this.accesslog.getPrefix());\n+\t\t\tvalve.setSuffix(this.accesslog.getSuffix());\n+\t\t\tfactory.addContextValves(valve);\n \t\t}\n \n \t\tpublic static class Accesslog {\n@@ -767,15 +772,6 @@ public static class Accesslog {\n \t\t\t */\n \t\t\tprivate String suffix = \".log\";\n \n-\t\t\tAccessLogValve createAccessLogValve() {\n-\t\t\t\tAccessLogValve valve = new AccessLogValve();\n-\t\t\t\tvalve.setPattern(this.pattern);\n-\t\t\t\tvalve.setDirectory(this.directory);\n-\t\t\t\tvalve.setPrefix(this.prefix);\n-\t\t\t\tvalve.setSuffix(this.suffix);\n-\t\t\t\treturn valve;\n-\t\t\t}\n-\n \t\t\tpublic boolean isEnabled() {\n \t\t\t\treturn this.enabled;\n \t\t\t}",
    "output": "Avoid Tomcat specific dependency in ServerProperties"
  },
  {
    "input": "diff --git a/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/DevToolsProperties.java b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/DevToolsProperties.java\n--- a/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/DevToolsProperties.java\n+++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/DevToolsProperties.java\n@@ -33,13 +33,6 @@\n @ConfigurationProperties(prefix = \"spring.devtools\")\n public class DevToolsProperties {\n \n-\tprivate static final String DEFAULT_RESTART_EXCLUDES = \"META-INF/maven/**,\"\n-\t\t\t+ \"META-INF/resources/**,resources/**,static/**,public/**,templates/**\";\n-\n-\tprivate static final long DEFAULT_RESTART_POLL_INTERVAL = 1000;\n-\n-\tprivate static final long DEFAULT_RESTART_QUIET_PERIOD = 400;\n-\n \tprivate Restart restart = new Restart();\n \n \tprivate Livereload livereload = new Livereload();\n@@ -64,6 +57,14 @@ public RemoteDevToolsProperties getRemote() {\n \t */\n \tpublic static class Restart {\n \n+\t\tprivate static final String DEFAULT_RESTART_EXCLUDES = \"META-INF/maven/**,\"\n+\t\t\t\t+ \"META-INF/resources/**,resources/**,static/**,public/**,templates/**\";\n+\n+\t\tprivate static final long DEFAULT_RESTART_POLL_INTERVAL = 1000;\n+\n+\t\tprivate static final long DEFAULT_RESTART_QUIET_PERIOD = 400;\n+\n+\n \t\t/**\n \t\t * Enable automatic restart.\n \t\t */",
    "output": "Fix default value of restarter meta-data"
  },
  {
    "input": "diff --git a/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/RemoteUrlPropertyExtractorTests.java b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/RemoteUrlPropertyExtractorTests.java\n--- a/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/RemoteUrlPropertyExtractorTests.java\n+++ b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/RemoteUrlPropertyExtractorTests.java\n@@ -16,13 +16,17 @@\n \n package org.springframework.boot.devtools;\n \n+import org.junit.After;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.ExpectedException;\n+import org.slf4j.LoggerFactory;\n import org.springframework.boot.SpringApplication;\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.annotation.Configuration;\n \n+import ch.qos.logback.classic.Logger;\n+\n import static org.hamcrest.Matchers.equalTo;\n import static org.hamcrest.Matchers.is;\n import static org.hamcrest.Matchers.nullValue;\n@@ -38,6 +42,12 @@ public class RemoteUrlPropertyExtractorTests {\n \t@Rule\n \tpublic ExpectedException thrown = ExpectedException.none();\n \n+\t@After\n+\tpublic void preventRunFailuresFromPollutingLoggerContext() {\n+\t\t((Logger) LoggerFactory.getLogger(RemoteUrlPropertyExtractorTests.class))\n+\t\t\t\t.getLoggerContext().getTurboFilterList().clear();\n+\t}\n+\n \t@Test\n \tpublic void missingUrl() throws Exception {\n \t\tthis.thrown.expect(IllegalStateException.class);",
    "output": "Prevent run failures in tests from polluting LoggerContext"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n@@ -42,6 +42,7 @@\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\n@@ -57,6 +58,7 @@\n import org.springframework.context.annotation.Configuration;\n import org.springframework.data.mongodb.core.MongoTemplate;\n import org.springframework.data.redis.connection.RedisConnectionFactory;\n+import org.springframework.jdbc.core.JdbcTemplate;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for {@link HealthIndicator}s.\n@@ -94,6 +96,7 @@ public HealthIndicator applicationHealthIndicator() {\n \t}\n \n \t@Configuration\n+\t@ConditionalOnClass(JdbcTemplate.class)\n \t@ConditionalOnBean(DataSource.class)\n \t@ConditionalOnProperty(prefix = \"management.health.db\", name = \"enabled\", matchIfMissing = true)\n \tpublic static class DataSourcesHealthIndicatorConfiguration {",
    "output": "Properly guard DB health indicator\nThe DataSource health indicator uses `JdbcTemplate` behind the scenes\nbut nothing was checking that it is actually available.\n`DataSourcesHealthIndicatorConfiguration` is now disabled if\n`spring-jdbc` is not on the classpath."
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java\n@@ -298,10 +298,7 @@ private void postProcessBeforeInitialization(Object bean, String beanName,\n \t\t\tfactory.bindPropertiesToTarget();\n \t\t}\n \t\tcatch (Exception ex) {\n-\t\t\tString targetClass = \"[unknown]\";\n-\t\t\tif (target != null) {\n-\t\t\t\tClassUtils.getShortName(target.getClass());\n-\t\t\t}\n+\t\t\tString targetClass = ClassUtils.getShortName(target.getClass());\n \t\t\tthrow new BeanCreationException(beanName, \"Could not bind properties to \"\n \t\t\t\t\t+ targetClass + \" (\" + getAnnotationDetails(annotation) + \")\", ex);\n \t\t}",
    "output": "Remove useless code\nThe target attribute is effectively checked for null beforehand so this\nadditional defensive check can be removed."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfigurationTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfigurationTests.java\n@@ -144,7 +144,7 @@ public void customJodaDateTimeFormat() throws Exception {\n \t\tObjectMapper mapper = this.context.getBean(ObjectMapper.class);\n \t\tDateTime dateTime = new DateTime(1988, 6, 25, 20, 30, DateTimeZone.UTC);\n \t\tassertEquals(\"\\\"1988-06-25 20:30:00\\\"\", mapper.writeValueAsString(dateTime));\n-\t\tDate date = new DateTime(1988, 6, 25, 20, 30).toDate();\n+\t\tDate date = dateTime.toDate();\n \t\tassertEquals(\"\\\"19880625203000\\\"\", mapper.writeValueAsString(date));\n \t}\n ",
    "output": "Fix customJodaDateTimeFormat to specify time zone when creating Date"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java b/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java\n@@ -512,6 +512,8 @@ public void propertySourceAnnotation() throws Exception {\n \t\tConfigurableApplicationContext context = application.run();\n \t\tString property = context.getEnvironment().getProperty(\"the.property\");\n \t\tassertThat(property, equalTo(\"fromspecificlocation\"));\n+\t\tproperty = context.getEnvironment().getProperty(\"my.property\");\n+\t\tassertThat(property, equalTo(\"fromapplicationproperties\"));\n \t\tassertThat(context.getEnvironment(),\n \t\t\t\tcontainsPropertySource(\"class path resource \"\n \t\t\t\t\t\t+ \"[specificlocation.properties]\"));",
    "output": "Clarify documentation in a few areas"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/test/IntegrationTest.java b/spring-boot/src/main/java/org/springframework/boot/test/IntegrationTest.java\n--- a/spring-boot/src/main/java/org/springframework/boot/test/IntegrationTest.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/test/IntegrationTest.java\n@@ -27,6 +27,7 @@\n import org.springframework.test.context.TestExecutionListeners;\n import org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener;\n import org.springframework.test.context.support.DependencyInjectionTestExecutionListener;\n+import org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener;\n import org.springframework.test.context.support.DirtiesContextTestExecutionListener;\n import org.springframework.test.context.transaction.TransactionalTestExecutionListener;\n \n@@ -48,6 +49,7 @@\n // Leave out the ServletTestExecutionListener because it only deals with Mock* servlet\n // stuff. A real embedded application will not need the mocks.\n @TestExecutionListeners(listeners = { IntegrationTestPropertiesListener.class,\n+\t\tDirtiesContextBeforeModesTestExecutionListener.class,\n \t\tDependencyInjectionTestExecutionListener.class,\n \t\tDirtiesContextTestExecutionListener.class,\n \t\tTransactionalTestExecutionListener.class, SqlScriptsTestExecutionListener.class })",
    "output": "Add before modes support for @IntegrationTest\nSpring Framework 4.2 introduced support for before modes in\n`@DirtiesContext` Make sure that `@IntegrationTest` also support\nthese new modes."
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/logging/LoggingSystem.java b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingSystem.java\n--- a/spring-boot/src/main/java/org/springframework/boot/logging/LoggingSystem.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingSystem.java\n@@ -66,8 +66,23 @@ public abstract class LoggingSystem {\n \t * @param logFile the log output file that should be written or {@code null} for\n \t * console only output\n \t */\n-\tpublic abstract void initialize(LoggingInitializationContext initializationContext,\n-\t\t\tString configLocation, LogFile logFile);\n+\tpublic void initialize(LoggingInitializationContext initializationContext,\n+\t\t\tString configLocation, LogFile logFile) {\n+\t\tinitialize(configLocation, logFile);\n+\t}\n+\n+\t/**\n+\t * Fully initialize the logging system.\n+\t * @param configLocation a log configuration location or {@code null} if default\n+\t * initialization is required\n+\t * @param logFile the log output file that should be written or {@code null} for\n+\t * console only output\n+\t * @deprecated since 1.3 in favor of\n+\t * {@link #initialize(LoggingInitializationContext, String, LogFile)}\n+\t */\n+\t@Deprecated\n+\tpublic void initialize(String configLocation, LogFile logFile) {\n+\t}\n \n \t/**\n \t * Clean up the logging system. The default implementation does nothing. Subclasses",
    "output": "Restore LoggingSystem 1.2.x compatibility\nRestore and deprecate the previous `initialize` method to allow a\nmigration path."
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/bind/RelaxedDataBinderTests.java b/spring-boot/src/test/java/org/springframework/boot/bind/RelaxedDataBinderTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/bind/RelaxedDataBinderTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/bind/RelaxedDataBinderTests.java\n@@ -334,6 +334,15 @@ public void testBindNestedMapOfEnum() throws Exception {\n \t\tassertEquals(\"123\", target.getNested().get(Bingo.THAT));\n \t}\n \n+\t@Test\n+\tpublic void testBindNestedMapOfEnumRelaxedNames() throws Exception {\n+\t\tthis.conversionService = new DefaultConversionService();\n+\t\tTargetWithNestedMapOfEnum target = new TargetWithNestedMapOfEnum();\n+\t\tbind(target, \"nested.the-other: bar\\n\" + \"nested.that_other: 123\");\n+\t\tassertEquals(\"bar\", target.getNested().get(Bingo.THE_OTHER));\n+\t\tassertEquals(\"123\", target.getNested().get(Bingo.THAT_OTHER));\n+\t}\n+\n \t@Test\n \tpublic void testBindNestedMapBracketReferenced() throws Exception {\n \t\tTargetWithNestedMap target = new TargetWithNestedMap();\n@@ -969,7 +978,7 @@ public void setBingo(Bingo bingo) {\n \t}\n \n \tenum Bingo {\n-\t\tTHIS, or, THAT, THE_OTHER\n+\t\tTHIS, or, THAT, THE_OTHER, THAT_OTHER\n \t}\n \n \tpublic static class ValidatedTarget {",
    "output": "Add relaxed names for enum test\nAdd an extra test that demonstrate the use of relaxed binding for Enum\nwhen it is used as a map key."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ResourceProperties.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ResourceProperties.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ResourceProperties.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ResourceProperties.java\n@@ -116,7 +116,7 @@ private String[] getStaticWelcomePageLocations() {\n \t\treturn result;\n \t}\n \n-\tpublic List<Resource> getFaviconLocations() {\n+\tList<Resource> getFaviconLocations() {\n \t\tList<Resource> locations = new ArrayList<Resource>(\n \t\t\t\tCLASSPATH_RESOURCE_LOCATIONS.length + 1);\n \t\tif (this.resourceLoader != null) {",
    "output": "Avoid wrong meta-data\nMake `getFaviconLocations` package private so that it's not (wrongly)\nexposed in the meta-data."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DatabaseDriver.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DatabaseDriver.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DatabaseDriver.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DatabaseDriver.java\n@@ -86,7 +86,7 @@ enum DatabaseDriver {\n \t/**\n \t * SQL Server\n \t */\n-\tSQLSERVER(\"com.microsoft.sqlserver.jdbc.SQLServerDriver\");\n+\tSQLSERVER(\"com.microsoft.sqlserver.jdbc.SQLServerDriver\", \"com.microsoft.sqlserver.jdbc.SQLServerXADataSource\");\n \n \tprivate final String driverClassName;\n ",
    "output": "Add SQLServer XA DataSource class name"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RunMojo.java b/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RunMojo.java\n--- a/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RunMojo.java\n+++ b/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RunMojo.java\n@@ -53,7 +53,7 @@ protected void runWithMavenJvm(String startClassName, String... arguments)\n \t\t\tthrows MojoExecutionException {\n \t\tIsolatedThreadGroup threadGroup = new IsolatedThreadGroup(startClassName);\n \t\tThread launchThread = new Thread(threadGroup, new LaunchRunner(startClassName,\n-\t\t\t\targuments), startClassName + \".main()\");\n+\t\t\t\targuments), \"main\");\n \t\tlaunchThread.setContextClassLoader(new URLClassLoader(getClassPathUrls()));\n \t\tlaunchThread.start();\n \t\tjoin(threadGroup);",
    "output": "Use standard name for main thread\nDevTools look for a main thread named \"main\". The maven plugin is\nactually using a different value and there is no real reason to. This\nchange fixes DevTools support as long as forking is enabled."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java\n@@ -97,7 +97,7 @@ public AmqpAdmin amqpAdmin(ConnectionFactory connectionFactory) {\n \n \t@Bean\n \t@ConditionalOnMissingBean(RabbitTemplate.class)\n-\tpublic RabbitTemplate rabbitTemplate(RabbitProperties config) {\n+\tpublic RabbitTemplate rabbitTemplate() {\n \t\treturn new RabbitTemplate(this.connectionFactory);\n \t}\n ",
    "output": "Remove an unused parameter"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java\n@@ -97,7 +97,7 @@ public AmqpAdmin amqpAdmin(ConnectionFactory connectionFactory) {\n \n \t@Bean\n \t@ConditionalOnMissingBean(RabbitTemplate.class)\n-\tpublic RabbitTemplate rabbitTemplate(RabbitProperties config) {\n+\tpublic RabbitTemplate rabbitTemplate() {\n \t\treturn new RabbitTemplate(this.connectionFactory);\n \t}\n ",
    "output": "Remove an unused parameter"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessorTests.java b/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessorTests.java\n--- a/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessorTests.java\n+++ b/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessorTests.java\n@@ -565,7 +565,6 @@ private void writePropertyDeprecation(ItemMetadata... items) throws IOException\n \t\t}\n \t\tJSONObject additionalMetadata = new JSONObject();\n \t\tadditionalMetadata.put(\"properties\", propertiesArray);\n-\t\tSystem.out.println(additionalMetadata);\n \t\twriteMetadata(additionalMetadataFile, additionalMetadata);\n \t}\n ",
    "output": "Remove unnecessary System.out"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/metadata/JsonMarshaller.java b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/metadata/JsonMarshaller.java\n--- a/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/metadata/JsonMarshaller.java\n+++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/metadata/JsonMarshaller.java\n@@ -50,7 +50,7 @@ public class JsonMarshaller {\n \n \tpublic void write(ConfigurationMetadata metadata, OutputStream outputStream)\n \t\t\tthrows IOException {\n-\t\tJSONObject object = new JSONObject();\n+\t\tJSONObject object = new JSONOrderedObject();\n \t\tobject.put(\"groups\", toJsonArray(metadata, ItemType.GROUP));\n \t\tobject.put(\"properties\", toJsonArray(metadata, ItemType.PROPERTY));\n \t\tobject.put(\"hints\", toJsonArray(metadata.getHints()));",
    "output": "Fix meta-data root attributes ordering"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java\n@@ -52,6 +52,7 @@\n import org.springframework.boot.context.embedded.tomcat.TomcatEmbeddedServletContainerFactory;\n import org.springframework.boot.context.embedded.undertow.UndertowEmbeddedServletContainerFactory;\n import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.boot.context.properties.DeprecatedConfigurationProperty;\n import org.springframework.boot.context.properties.NestedConfigurationProperty;\n import org.springframework.core.Ordered;\n import org.springframework.util.StringUtils;\n@@ -197,6 +198,17 @@ public void setAddress(InetAddress address) {\n \t\tthis.address = address;\n \t}\n \n+\t/**\n+\t * Set the session timeout\n+\t * @return the session timeout\n+\t * @deprecated since 1.3.0 in favor of {@code session.timeout}.\n+\t */\n+\t@Deprecated\n+\t@DeprecatedConfigurationProperty(replacement = \"server.session.timeout\")\n+\tpublic Integer getSessionTimeout() {\n+\t\treturn this.session.getTimeout();\n+\t}\n+\n \t/**\n \t * Get the session timeout\n \t * @param sessionTimeout the session timeout",
    "output": "Restore ServerProperties.getSessionTimeout()\nRestore the deprecated method to give people a change to migrate. The\n@DeprecatedConfigurationProperties annotation is now used to generate\nthe deprecated meta-data, removing the need for manual meta-data."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java\n@@ -197,16 +197,6 @@ public void setAddress(InetAddress address) {\n \t\tthis.address = address;\n \t}\n \n-\t/**\n-\t * Set the session timeout\n-\t * @return the session timeout\n-\t * @deprecated since 1.3.0 in favor of {@code session.timeout}.\n-\t */\n-\t@Deprecated\n-\tpublic Integer getSessionTimeout() {\n-\t\treturn this.session.getTimeout();\n-\t}\n-\n \t/**\n \t * Get the session timeout\n \t * @param sessionTimeout the session timeout",
    "output": "Fix duplicate meta-data for server.session-timeout"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataMatchers.java b/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataMatchers.java\n--- a/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataMatchers.java\n+++ b/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataMatchers.java\n@@ -230,9 +230,6 @@ public boolean matches(Object item) {\n \t\t\tif (itemHint == null) {\n \t\t\t\treturn false;\n \t\t\t}\n-\t\t\tif (this.name != null && !this.name.equals(itemHint.getName())) {\n-\t\t\t\treturn false;\n-\t\t\t}\n \t\t\tfor (ValueHintMatcher value : this.values) {\n \t\t\t\tif (!value.matches(itemHint)) {\n \t\t\t\t\treturn false;",
    "output": "Remove redundant check"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataMatchers.java b/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataMatchers.java\n--- a/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataMatchers.java\n+++ b/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataMatchers.java\n@@ -230,9 +230,6 @@ public boolean matches(Object item) {\n \t\t\tif (itemHint == null) {\n \t\t\t\treturn false;\n \t\t\t}\n-\t\t\tif (this.name != null && !this.name.equals(itemHint.getName())) {\n-\t\t\t\treturn false;\n-\t\t\t}\n \t\t\tfor (ValueHintMatcher value : this.values) {\n \t\t\t\tif (!value.matches(itemHint)) {\n \t\t\t\t\treturn false;",
    "output": "Remove redundant check"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/MavenSettings.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/MavenSettings.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/MavenSettings.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/MavenSettings.java\n@@ -165,7 +165,9 @@ private List<org.apache.maven.model.Profile> createModelProfiles(\n \t\tfor (Profile profile : profiles) {\n \t\t\torg.apache.maven.model.Profile modelProfile = new org.apache.maven.model.Profile();\n \t\t\tmodelProfile.setId(profile.getId());\n-\t\t\tmodelProfile.setActivation(createModelActivation(profile.getActivation()));\n+\t\t\tif (profile.getActivation() != null) {\n+\t\t\t\tmodelProfile.setActivation(createModelActivation(profile.getActivation()));\n+\t\t\t}\n \t\t\tmodelProfiles.add(modelProfile);\n \t\t}\n \t\treturn modelProfiles;",
    "output": "Gracefully handle profiles in settings.xml with no <activation>"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java b/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java\n--- a/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java\n@@ -168,6 +168,7 @@ public void cleanUp() {\n \t@Override\n \tprotected void reinitialize(LoggingInitializationContext initializationContext) {\n \t\tgetLoggerContext().reset();\n+\t\tgetLoggerContext().getStatusManager().clear();\n \t\tloadConfiguration(initializationContext, getSelfInitializationConfig(), null);\n \t}\n ",
    "output": "Clear logback status list on reset\nUpdate LogbackLoggingSystem to clear logback status messages on reset.\nThis prevents shutdown errors from preventing subsequent startup."
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CompositeHealthIndicator.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CompositeHealthIndicator.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CompositeHealthIndicator.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/CompositeHealthIndicator.java\n@@ -52,7 +52,7 @@ public CompositeHealthIndicator(HealthAggregator healthAggregator) {\n \tpublic CompositeHealthIndicator(HealthAggregator healthAggregator,\n \t\t\tMap<String, HealthIndicator> indicators) {\n \t\tAssert.notNull(healthAggregator, \"HealthAggregator must not be null\");\n-\t\tAssert.notNull(healthAggregator, \"Indicators must not be null\");\n+\t\tAssert.notNull(indicators, \"Indicators must not be null\");\n \t\tthis.indicators = new LinkedHashMap<String, HealthIndicator>(indicators);\n \t\tthis.healthAggregator = healthAggregator;\n \t}",
    "output": "Correct assertion for indicators parameter in CompositeHealthIndicator"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringBootCompilerAutoConfiguration.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringBootCompilerAutoConfiguration.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringBootCompilerAutoConfiguration.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringBootCompilerAutoConfiguration.java\n@@ -65,6 +65,8 @@ public void applyImports(ImportCustomizer imports) {\n \t\t\t\t\"org.springframework.context.MessageSource\",\n \t\t\t\t\"org.springframework.core.annotation.Order\",\n \t\t\t\t\"org.springframework.core.io.ResourceLoader\",\n+\t\t\t\t\"org.springframework.boot.ApplicationRunner\",\n+\t\t\t\t\"org.springframework.boot.ApplicationArguments\",\n \t\t\t\t\"org.springframework.boot.CommandLineRunner\",\n \t\t\t\t\"org.springframework.boot.context.properties.ConfigurationProperties\",\n \t\t\t\t\"org.springframework.boot.context.properties.EnableConfigurationProperties\",",
    "output": "Add ApplicationRunner support to CLI\nAdd ApplicationRunner and ApplicationArguments to the CLI compiler\nauto-configuration."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheAutoConfiguration.java\n@@ -84,7 +84,7 @@ static class CacheManagerValidatorPostProcessor implements BeanFactoryPostProces\n \t\t@Override\n \t\tpublic void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)\n \t\t\t\tthrows BeansException {\n-\t\t\tfor (String name : beanFactory.getBeanNamesForType(CacheAspectSupport.class)) {\n+\t\t\tfor (String name : beanFactory.getBeanNamesForType(CacheAspectSupport.class, false, false)) {\n \t\t\t\tBeanDefinition definition = beanFactory.getBeanDefinition(name);\n \t\t\t\tdefinition.setDependsOn(append(definition.getDependsOn(),\n \t\t\t\t\t\tVALIDATOR_BEAN_NAME));",
    "output": "Prevent bean early initialization\nFix `CacheManagerValidatorPostProcessor` that could lead to early bean\ninitialization."
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java\n--- a/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java\n@@ -109,7 +109,7 @@ public class LoggingApplicationListener implements GenericApplicationListener {\n \n \tprivate LoggingSystem loggingSystem;\n \n-\tprivate int order = Ordered.HIGHEST_PRECEDENCE + 11;\n+\tprivate int order = Ordered.HIGHEST_PRECEDENCE + 20;\n \n \tprivate boolean parseArgs = true;\n ",
    "output": "Tweak LoggingApplicationListener order\nProvide additional space between the ConfigFileApplicationListener order\nand the LoggingApplicationListener order."
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java\n--- a/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java\n@@ -214,6 +214,7 @@ private void initializeSystem(ConfigurableEnvironment environment,\n \t\t\t\t// NOTE: We can't use the logger here to report the problem\n \t\t\t\tSystem.err.println(\"Logging system failed to initialize \"\n \t\t\t\t\t\t+ \"using configuration from '\" + logConfig + \"'\");\n+\t\t\t\tex.printStackTrace(System.err);\n \t\t\t\tthrow new IllegalStateException(ex);\n \t\t\t}\n \t\t}",
    "output": "Reinstate output of stack trace accidentally removed in 66d4a2a"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetricReader.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetricReader.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetricReader.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/integration/SpringIntegrationMetricReader.java\n@@ -55,6 +55,8 @@ public Iterable<Metric<?>> findAll() {\n \t\t\tString prefix = \"integration.channel.\" + name;\n \t\t\tmetrics.addAll(getStatistics(prefix + \".errorRate\",\n \t\t\t\t\texporter.getChannelErrorRate(name)));\n+\t\t\tmetrics.add(new Metric<Integer>(prefix + \".sendCount\", exporter\n+\t\t\t\t\t.getChannelSendCount(name)));\n \t\t\tmetrics.addAll(getStatistics(prefix + \".sendRate\",\n \t\t\t\t\texporter.getChannelSendRate(name)));\n \t\t\tmetrics.add(new Metric<Long>(prefix + \".receiveCount\", exporter",
    "output": "Add send count to Integration metrics\nFixed"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java\n@@ -296,7 +296,7 @@ public void endpointsDefaultConfiguration() throws Exception {\n \t\tthis.applicationContext.refresh();\n \t\t// /health, /metrics, /env (/shutdown is disabled by default)\n \t\tassertThat(this.applicationContext.getBeansOfType(MvcEndpoint.class).size(),\n-\t\t\t\tis(equalTo(6)));\n+\t\t\t\tis(equalTo(5)));\n \t}\n \n \t@Test",
    "output": "Fix assertion in broken test"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/SpringApplicationHierarchyTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/SpringApplicationHierarchyTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/SpringApplicationHierarchyTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/SpringApplicationHierarchyTests.java\n@@ -42,14 +42,17 @@ public void after() {\n \t@Test\n \tpublic void testParent() {\n \t\tSpringApplicationBuilder builder = new SpringApplicationBuilder(Child.class);\n+\t\tbuilder.properties(\"flyway.enabled=false\", \"liquibase.enabled=false\");\n \t\tbuilder.parent(Parent.class);\n \t\tthis.context = builder.run(\"--server.port=0\");\n \t}\n \n \t@Test\n \tpublic void testChild() {\n-\t\tthis.context = new SpringApplicationBuilder(Parent.class).child(Child.class).run(\n-\t\t\t\t\"--server.port=0\");\n+\t\tSpringApplicationBuilder builder = new SpringApplicationBuilder(Parent.class);\n+\t\tbuilder.properties(\"flyway.enabled=false\", \"liquibase.enabled=false\");\n+\t\tbuilder.child(Child.class);\n+\t\tthis.context = builder.run(\"--server.port=0\");\n \t}\n \n \t@EnableAutoConfiguration(exclude = { ElasticsearchDataAutoConfiguration.class,",
    "output": "Disable DB migrations in ApplicationHierarchyTests"
  },
  {
    "input": "diff --git a/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/Restarter.java b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/Restarter.java\n--- a/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/Restarter.java\n+++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/Restarter.java\n@@ -195,7 +195,7 @@ private void preInitializeLeakyClasses() {\n \t * @param enabled if restart support is enabled\n \t */\n \tprivate void setEnabled(boolean enabled) {\n-\t\tthis.enabled = false;\n+\t\tthis.enabled = enabled;\n \t}\n \n \t/**",
    "output": "Fix Restarter.setEnabled() to use parameter"
  },
  {
    "input": "diff --git a/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/Restarter.java b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/Restarter.java\n--- a/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/Restarter.java\n+++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/Restarter.java\n@@ -195,7 +195,7 @@ private void preInitializeLeakyClasses() {\n \t * @param enabled if restart support is enabled\n \t */\n \tprivate void setEnabled(boolean enabled) {\n-\t\tthis.enabled = false;\n+\t\tthis.enabled = enabled;\n \t}\n \n \t/**",
    "output": "Fix Restarter.setEnabled() to use parameter"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java\n@@ -384,20 +384,26 @@ private PropertySource<?> loadIntoGroup(String identifier, String location,\n \t\t\t\tString profile) throws IOException {\n \t\t\tResource resource = this.resourceLoader.getResource(location);\n \t\t\tPropertySource<?> propertySource = null;\n+\t\t\tStringBuilder msg = new StringBuilder();\n \t\t\tif (resource != null && resource.exists()) {\n \t\t\t\tString name = \"applicationConfig: [\" + location + \"]\";\n \t\t\t\tString group = \"applicationConfig: [\" + identifier + \"]\";\n \t\t\t\tpropertySource = this.propertiesLoader.load(resource, group, name,\n \t\t\t\t\t\tprofile);\n \t\t\t\tif (propertySource != null) {\n+\t\t\t\t\tmsg.append(\"Loaded \");\n \t\t\t\t\tmaybeActivateProfiles(propertySource\n \t\t\t\t\t\t\t.getProperty(ACTIVE_PROFILES_PROPERTY));\n \t\t\t\t\taddIncludeProfiles(propertySource\n \t\t\t\t\t\t\t.getProperty(INCLUDE_PROFILES_PROPERTY));\n \t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\tmsg.append(\"Skipped (empty) \");\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\tmsg.append(\"Skipped \");\n \t\t\t}\n-\t\t\tStringBuilder msg = new StringBuilder();\n-\t\t\tmsg.append(propertySource == null ? \"Skipped \" : \"Loaded \");\n \t\t\tmsg.append(\"config file \");\n \t\t\tmsg.append(\"'\").append(location).append(\"'\");\n \t\t\tif (StringUtils.hasLength(profile)) {",
    "output": "Extra logging detail if file is empty"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/GzipFilterAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/GzipFilterAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/GzipFilterAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/GzipFilterAutoConfiguration.java\n@@ -25,6 +25,7 @@\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.http.HttpMethod;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for {@link GzipFilter}.\n@@ -33,7 +34,7 @@\n  * @since 1.2.2\n  */\n @Configuration\n-@ConditionalOnClass(GzipFilter.class)\n+@ConditionalOnClass({ GzipFilter.class, HttpMethod.class })\n @EnableConfigurationProperties(GzipFilterProperties.class)\n public class GzipFilterAutoConfiguration {\n ",
    "output": "Make GzipFilterAutoConfiguration conditional on HttpMethod\nGzipFilterProperties uses HttpMethod so GzipFilterAutoConfiguration,\nwhich uses GzipFilterProperties, needs to be conditional on HttpMethod\nbeing on the classpath."
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/logging/LoggingApplicationListenerTests.java b/spring-boot/src/test/java/org/springframework/boot/logging/LoggingApplicationListenerTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/logging/LoggingApplicationListenerTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/logging/LoggingApplicationListenerTests.java\n@@ -92,6 +92,7 @@ public void clear() {\n \t\tif (this.context != null) {\n \t\t\tthis.context.close();\n \t\t}\n+\t\tLoggingSystem.get(getClass().getClassLoader()).cleanUp();\n \t}\n \n \tprivate String tmpDir() {",
    "output": "Cleanup logging so execution order is unimportant"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/logging/LoggingApplicationListenerTests.java b/spring-boot/src/test/java/org/springframework/boot/logging/LoggingApplicationListenerTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/logging/LoggingApplicationListenerTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/logging/LoggingApplicationListenerTests.java\n@@ -92,6 +92,7 @@ public void clear() {\n \t\tif (this.context != null) {\n \t\t\tthis.context.close();\n \t\t}\n+\t\tLoggingSystem.get(getClass().getClassLoader()).cleanUp();\n \t}\n \n \tprivate String tmpDir() {",
    "output": "Cleanup logging so execution order is unimportant"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/logging/AbstractLoggingSystemTests.java b/spring-boot/src/test/java/org/springframework/boot/logging/AbstractLoggingSystemTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/logging/AbstractLoggingSystemTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/logging/AbstractLoggingSystemTests.java\n@@ -24,6 +24,8 @@\n import org.junit.BeforeClass;\n import org.springframework.util.StringUtils;\n \n+import static org.junit.Assert.assertTrue;\n+\n /**\n  * Base for {@link LoggingSystem} tests.\n  *\n@@ -51,7 +53,14 @@ public static void reinstateTempDir() {\n \n \t@Before\n \tpublic void deleteTempLog() {\n-\t\tnew File(tmpDir() + \"/spring.log\").delete();\n+\t\tdeleteFile(new File(tmpDir() + \"/spring.log\"));\n+\t\tdeleteFile(new File(tmpDir() + \"/tmp.log\"));\n+\t}\n+\n+\tprivate void deleteFile(File file) {\n+\t\tif (file.exists()) {\n+\t\t\tassertTrue(\"Unable to delete file\", file.delete());\n+\t\t}\n \t}\n \n \t@After",
    "output": "Attempt to fix failing log tests"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/LogFileMvcEndpointTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/LogFileMvcEndpointTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/LogFileMvcEndpointTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/LogFileMvcEndpointTests.java\n@@ -21,7 +21,6 @@\n import java.io.InputStream;\n import java.io.InputStreamReader;\n \n-import org.junit.After;\n import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n@@ -62,11 +61,6 @@ public void before() throws IOException {\n \t\tthis.mvc.setEnvironment(this.environment);\n \t}\n \n-\t@After\n-\tpublic void after() {\n-\t\tnew File(\"test.log\").delete();\n-\t}\n-\n \t@Test\n \tpublic void notAvailableWithoutLogFile() throws IOException {\n \t\tassertThat(this.mvc.available().getStatusCode(), equalTo(HttpStatus.NOT_FOUND));",
    "output": "Remove unnecessary import\nRemove unnecessary `@After` callback"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/LogFileMvcEndpointTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/LogFileMvcEndpointTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/LogFileMvcEndpointTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/LogFileMvcEndpointTests.java\n@@ -21,7 +21,6 @@\n import java.io.InputStream;\n import java.io.InputStreamReader;\n \n-import org.junit.After;\n import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;",
    "output": "Remove unnecessary import"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/LogFileMvcEndpointTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/LogFileMvcEndpointTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/LogFileMvcEndpointTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/LogFileMvcEndpointTests.java\n@@ -62,11 +62,6 @@ public void before() throws IOException {\n \t\tthis.mvc.setEnvironment(this.environment);\n \t}\n \n-\t@After\n-\tpublic void after() {\n-\t\tnew File(\"test.log\").delete();\n-\t}\n-\n \t@Test\n \tpublic void notAvailableWithoutLogFile() throws IOException {\n \t\tassertThat(this.mvc.available().getStatusCode(), equalTo(HttpStatus.NOT_FOUND));",
    "output": "Remove unnecessary `@After` callback\n`@After` callback was trying to remove the wrong file anyway. This is\nnow taken care of by the `TemporaryFolder` rule."
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java b/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java\n--- a/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java\n@@ -125,21 +125,23 @@ protected void loadConfiguration(String location, LogFile logFile) {\n \t\t\t\t\t+ location, ex);\n \t\t}\n \t\tList<Status> statuses = context.getStatusManager().getCopyOfStatusList();\n-\t\tif (containsError(statuses)) {\n-\t\t\tfor (Status status : statuses) {\n-\t\t\t\tSystem.err.println(status);\n-\t\t\t}\n-\t\t\tthrow new IllegalStateException(\"Logback configuration error detected\");\n-\t\t}\n-\t}\n-\n-\tprivate boolean containsError(List<Status> statuses) {\n+\t\tStringBuilder errors = new StringBuilder();\n \t\tfor (Status status : statuses) {\n \t\t\tif (status.getLevel() == Status.ERROR) {\n-\t\t\t\treturn true;\n+\t\t\t\terrors.append(errors.length() > 0 ? \"\\n\" : \"\");\n+\t\t\t\terrors.append(status.toString());\n \t\t\t}\n \t\t}\n-\t\treturn false;\n+\t\tif (errors.length() > 0) {\n+\t\t\tthrow new IllegalStateException(\"Logback configuration error \"\n+\t\t\t\t\t+ \"detected: \\n\" + errors);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void cleanUp() {\n+\t\tsuper.cleanUp();\n+\t\tgetLoggerContext().getStatusManager().clear();\n \t}\n \n \t@Override",
    "output": "Report logback errors in the exception\nUpdate LogbackLoggingSystem to include status errors in the exception\nrather than using `System.err`. Also perform additional cleanup in an\nattempt to fix CI build failures."
  },
  {
    "input": "diff --git a/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/LocalDevToolsAutoConfigurationTests.java b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/LocalDevToolsAutoConfigurationTests.java\n--- a/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/LocalDevToolsAutoConfigurationTests.java\n+++ b/spring-boot-devtools/src/test/java/org/springframework/boot/devtools/autoconfigure/LocalDevToolsAutoConfigurationTests.java\n@@ -134,7 +134,7 @@ public void liveReloadDisabled() throws Exception {\n \t}\n \n \t@Test\n-\tpublic void restartTriggerdOnClassPathChangeWithRestart() throws Exception {\n+\tpublic void restartTriggeredOnClassPathChangeWithRestart() throws Exception {\n \t\tthis.context = initializeAndRun(Config.class);\n \t\tClassPathChangedEvent event = new ClassPathChangedEvent(this.context,\n \t\t\t\tCollections.<ChangedFiles> emptySet(), true);\n@@ -143,7 +143,7 @@ public void restartTriggerdOnClassPathChangeWithRestart() throws Exception {\n \t}\n \n \t@Test\n-\tpublic void restartNotTriggerdOnClassPathChangeWithRestart() throws Exception {\n+\tpublic void restartNotTriggeredOnClassPathChangeWithRestart() throws Exception {\n \t\tthis.context = initializeAndRun(Config.class);\n \t\tClassPathChangedEvent event = new ClassPathChangedEvent(this.context,\n \t\t\t\tCollections.<ChangedFiles> emptySet(), false);",
    "output": "Fix typo in test methods' names"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/event/EventPublishingRunListener.java b/spring-boot/src/main/java/org/springframework/boot/context/event/EventPublishingRunListener.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/event/EventPublishingRunListener.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/event/EventPublishingRunListener.java\n@@ -25,14 +25,15 @@\n import org.springframework.context.event.ApplicationEventMulticaster;\n import org.springframework.context.event.SimpleApplicationEventMulticaster;\n import org.springframework.context.support.AbstractApplicationContext;\n+import org.springframework.core.Ordered;\n import org.springframework.core.env.ConfigurableEnvironment;\n \n /**\n  * {@link SpringApplicationRunListener} to publish {@link SpringApplicationEvent}s.\n  *\n  * @author Phillip Webb\n  */\n-public class EventPublishingRunListener implements SpringApplicationRunListener {\n+public class EventPublishingRunListener implements SpringApplicationRunListener, Ordered {\n \n \tprivate final ApplicationEventMulticaster multicaster;\n \n@@ -49,6 +50,11 @@ public EventPublishingRunListener(SpringApplication application, String[] args)\n \t\t}\n \t}\n \n+\t@Override\n+\tpublic int getOrder() {\n+\t\treturn 0;\n+\t}\n+\n \t@Override\n \tpublic void started() {\n \t\tpublishEvent(new ApplicationStartedEvent(this.application, this.args));",
    "output": "Make EventPublishingRunListener Ordered `0`\nUpdate EventPublishingRunListener to implement Ordered and use a default\norder of 0. This allows for other run listeners to be added either\nbefore or after it."
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java\n@@ -75,9 +75,6 @@ public class EndpointWebMvcChildContextConfiguration {\n \t@Value(\"${error.path:/error}\")\n \tprivate String errorPath = \"/error\";\n \n-\t@Autowired(required = false)\n-\tprivate List<EndpointHandlerMappingCustomizer> mappingCustomizers;\n-\n \t@Configuration\n \tprotected static class ServerCustomization implements\n \t\t\tEmbeddedServletContainerCustomizer, Ordered {",
    "output": "Remove dead code"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2010-2014 the original author or authors.\n+ * Copyright 2012-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -392,7 +392,7 @@ private PropertySource<?> loadIntoGroup(String identifier, String location,\n \t\t\tmsg.append(\"config file \");\n \t\t\tmsg.append(\"'\").append(location).append(\"'\");\n \t\t\tif (StringUtils.hasLength(profile)) {\n-\t\t\t\tmsg.append(\" for profile\" + profile);\n+\t\t\t\tmsg.append(\" for profile \").append(profile);\n \t\t\t}\n \t\t\tif (resource == null || !resource.exists()) {\n \t\t\t\tmsg.append(\" resource not found\");",
    "output": "Fix missing space in logging message"
  },
  {
    "input": "diff --git a/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java\n--- a/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java\n+++ b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java\n@@ -99,6 +99,13 @@ private void checkWebInfEntriesForServletContainer(String servletContainer,\n \t\tcheckWebInfLibProvidedEntries(war, expectedLibProvidedEntries);\n \n \t\tcheckWebInfLibEntries(war, expectedLibProvidedEntries);\n+\n+\t\ttry {\n+\t\t\twar.close();\n+\t\t}\n+\t\tcatch (IOException ex) {\n+\t\t\t// Ignore\n+\t\t}\n \t}\n \n \tprivate void checkWebInfLibProvidedEntries(JarFile war, Set<String> expectedEntries)",
    "output": "Ignore failures when closing war files in tests"
  },
  {
    "input": "diff --git a/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java\n--- a/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java\n+++ b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java\n@@ -99,6 +99,13 @@ private void checkWebInfEntriesForServletContainer(String servletContainer,\n \t\tcheckWebInfLibProvidedEntries(war, expectedLibProvidedEntries);\n \n \t\tcheckWebInfLibEntries(war, expectedLibProvidedEntries);\n+\n+\t\ttry {\n+\t\t\twar.close();\n+\t\t}\n+\t\tcatch (IOException ex) {\n+\t\t\t// Ignore\n+\t\t}\n \t}\n \n \tprivate void checkWebInfLibProvidedEntries(JarFile war, Set<String> expectedEntries)",
    "output": "Ignore failures when closing war files in tests\nUpdate WarPackagingTests to ignore any IOExceptions when closing\ncreated war files. Exceptions were sometimes thrown when running on a\nLinux NTFS mount."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/mongo/MongoDataAutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/mongo/MongoDataAutoConfigurationTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/mongo/MongoDataAutoConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/mongo/MongoDataAutoConfigurationTests.java\n@@ -24,6 +24,7 @@\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.ExpectedException;\n+import org.springframework.beans.factory.UnsatisfiedDependencyException;\n import org.springframework.boot.autoconfigure.AutoConfigurationPackages;\n import org.springframework.boot.autoconfigure.PropertyPlaceholderAutoConfiguration;\n import org.springframework.boot.autoconfigure.data.mongo.city.City;\n@@ -124,7 +125,7 @@ public void customFieldNamingStrategy() {\n \n \t@Test\n \tpublic void interfaceFieldNamingStrategy() {\n-\t\tthis.thrown.expectMessage(\"Invalid custom FieldNamingStrategy\");\n+\t\tthis.thrown.expect(UnsatisfiedDependencyException.class);\n \t\ttestFieldNamingStrategy(FieldNamingStrategy.class.getName(), null);\n \t}\n ",
    "output": "Fix failing MongoDataAutoConfigurationTests"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DriverClassNameProvider.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DriverClassNameProvider.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DriverClassNameProvider.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DriverClassNameProvider.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2014 the original author or authors.\n+ * Copyright 2012-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -46,6 +46,9 @@ class DriverClassNameProvider {\n \t\tdrivers.put(\"postgresql\", \"org.postgresql.Driver\");\n \t\tdrivers.put(\"jtds\", \"net.sourceforge.jtds.jdbc.Driver\");\n \t\tdrivers.put(\"sqlserver\", \"com.microsoft.sqlserver.jdbc.SQLServerDriver\");\n+\t\tdrivers.put(\"firebirdsql\", \"org.firebirdsql.jdbc.FBDriver\");\n+\t\tdrivers.put(\"db2\", \"com.ibm.db2.jcc.DB2Driver\");\n+\t\tdrivers.put(\"teradata\", \"com.teradata.jdbc.TeraDriver\");\n \t\tDRIVERS = Collections.unmodifiableMap(drivers);\n \t}\n ",
    "output": "Add JDBC url to Driver class name mappings for DB2, Teradata and Firebird"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/DataSourceHealthIndicator.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/DataSourceHealthIndicator.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/DataSourceHealthIndicator.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/DataSourceHealthIndicator.java\n@@ -59,6 +59,7 @@ public class DataSourceHealthIndicator extends AbstractHealthIndicator implement\n \t\tqueries.put(\"Oracle\", \"SELECT 'Hello' from DUAL\");\n \t\tqueries.put(\"Apache Derby\", \"SELECT 1 FROM SYSIBM.SYSDUMMY1\");\n \t\tqueries.put(\"DB2\", \"SELECT 1 FROM SYSIBM.SYSDUMMY1\");\n+\t\tqueries.put(\"Informix Dynamic Server\", \"select count(*) from systables\");\n \t\tPRODUCT_SPECIFIC_QUERIES = Collections.unmodifiableMap(queries);\n \t}\n ",
    "output": "Add Informix specific health query"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/DataSourceHealthIndicator.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/DataSourceHealthIndicator.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/DataSourceHealthIndicator.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/DataSourceHealthIndicator.java\n@@ -58,6 +58,7 @@ public class DataSourceHealthIndicator extends AbstractHealthIndicator implement\n \t\t\t\t+ \"INFORMATION_SCHEMA.SYSTEM_USERS\");\n \t\tqueries.put(\"Oracle\", \"SELECT 'Hello' from DUAL\");\n \t\tqueries.put(\"Apache Derby\", \"SELECT 1 FROM SYSIBM.SYSDUMMY1\");\n+\t\tqueries.put(\"DB2\", \"SELECT 1 FROM SYSIBM.SYSDUMMY1\");\n \t\tPRODUCT_SPECIFIC_QUERIES = Collections.unmodifiableMap(queries);\n \t}\n ",
    "output": "Add DB2 specific health query"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/DataSourceHealthIndicator.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/DataSourceHealthIndicator.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/DataSourceHealthIndicator.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/DataSourceHealthIndicator.java\n@@ -58,6 +58,7 @@ public class DataSourceHealthIndicator extends AbstractHealthIndicator implement\n \t\t\t\t+ \"INFORMATION_SCHEMA.SYSTEM_USERS\");\n \t\tqueries.put(\"Oracle\", \"SELECT 'Hello' from DUAL\");\n \t\tqueries.put(\"Apache Derby\", \"SELECT 1 FROM SYSIBM.SYSDUMMY1\");\n+\t\tqueries.put(\"DB2\", \"SELECT 1 FROM SYSIBM.SYSDUMMY1\");\n \t\tPRODUCT_SPECIFIC_QUERIES = Collections.unmodifiableMap(queries);\n \t}\n ",
    "output": "Add DB2 specific health query"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cache/EhCacheStatisticsProvider.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cache/EhCacheStatisticsProvider.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cache/EhCacheStatisticsProvider.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/cache/EhCacheStatisticsProvider.java\n@@ -37,8 +37,10 @@ public CacheStatistics getCacheStatistics(CacheManager cacheManager,\n \t\tstatistics.setSize(ehCacheStatistics.getSize());\n \t\tDouble hitRatio = ehCacheStatistics.cacheHitRatio();\n \t\tif (!hitRatio.isNaN()) {\n-\t\t\tstatistics.setHitRatio(hitRatio);\n-\t\t\tstatistics.setMissRatio(1 - hitRatio);\n+\t\t\t// ratio is calculated 'racily' and can drift marginally above unity, so we cap it here\n+\t\t\tdouble sanitizedHitRatio = hitRatio > 1 ? 1 : hitRatio;\n+\t\t\tstatistics.setHitRatio(sanitizedHitRatio);\n+\t\t\tstatistics.setMissRatio(1 - sanitizedHitRatio);\n \t\t}\n \t\treturn statistics;\n \t}",
    "output": "Fix EhCache hit/miss ratio"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAnnotationDrivenConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAnnotationDrivenConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAnnotationDrivenConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAnnotationDrivenConfiguration.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2014 the original author or authors.\n+ * Copyright 2012-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -25,7 +25,7 @@\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n-import org.springframework.transaction.PlatformTransactionManager;\n+import org.springframework.transaction.jta.JtaTransactionManager;\n \n /**\n  * Configuration for Spring AMQP annotation driven endpoints.\n@@ -38,7 +38,7 @@\n class RabbitAnnotationDrivenConfiguration {\n \n \t@Autowired(required = false)\n-\tprivate PlatformTransactionManager transactionManager;\n+\tprivate JtaTransactionManager transactionManager;\n \n \t@Bean\n \t@ConditionalOnMissingBean(name = \"rabbitListenerContainerFactory\")",
    "output": "Only associate JTA transaction manager\nThis is related to 38cca9c but for the Rabbit support. Update\nRabbitAnnotationDrivenConfiguration to only associate a JTA transaction\nmanager, if any."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfiguration.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2014 the original author or authors.\n+ * Copyright 2012-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -82,7 +82,7 @@ public class RabbitAutoConfiguration {\n \t@Bean\n \t@ConditionalOnProperty(prefix = \"spring.rabbitmq\", name = \"dynamic\", matchIfMissing = true)\n \t@ConditionalOnMissingBean(AmqpAdmin.class)\n-\tpublic AmqpAdmin amqpAdmin(CachingConnectionFactory connectionFactory) {\n+\tpublic AmqpAdmin amqpAdmin(ConnectionFactory connectionFactory) {\n \t\treturn new RabbitAdmin(connectionFactory);\n \t}\n ",
    "output": "Fix dependency of AmqpAdmin\nAmqpAdmin does not require a CachingConnectionFactory. Using the more\ngeneral CachingConnectionFactory provides more flexibility."
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/audit/listener/AuditListener.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/audit/listener/AuditListener.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/audit/listener/AuditListener.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/audit/listener/AuditListener.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2013 the original author or authors.\n+ * Copyright 2012-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -26,6 +26,7 @@\n  * them in a {@link AuditEventRepository}.\n  *\n  * @author Dave Syer\n+ * @author Stephane Nicoll\n  */\n public class AuditListener implements ApplicationListener<AuditApplicationEvent> {\n \n@@ -39,7 +40,9 @@ public AuditListener(AuditEventRepository auditEventRepository) {\n \n \t@Override\n \tpublic void onApplicationEvent(AuditApplicationEvent event) {\n-\t\tlogger.info(event.getAuditEvent());\n+\t\tif (logger.isDebugEnabled()) {\n+\t\t\tlogger.debug(event.getAuditEvent());\n+\t\t}\n \t\tthis.auditEventRepository.add(event.getAuditEvent());\n \t}\n ",
    "output": "Lower logging level of audit events"
  },
  {
    "input": "diff --git a/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/DevToolsProperties.java b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/DevToolsProperties.java\n--- a/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/DevToolsProperties.java\n+++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/DevToolsProperties.java\n@@ -29,7 +29,7 @@\n @ConfigurationProperties(prefix = \"spring.devtools\")\n public class DevToolsProperties {\n \n-\tprivate static final String DEFAULT_RESTART_EXCLUDES = \"META-INF/resources/**,resource/**,static/**,public/**,templates/**\";\n+\tprivate static final String DEFAULT_RESTART_EXCLUDES = \"META-INF/resources/**,resources/**,static/**,public/**,templates/**\";\n \n \tprivate static final long DEFAULT_RESTART_POLL_INTERVAL = 1000;\n ",
    "output": "Tweak devtools restart exclusion patterns"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/admin/SpringApplicationAdminJmxAutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/admin/SpringApplicationAdminJmxAutoConfigurationTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/admin/SpringApplicationAdminJmxAutoConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/admin/SpringApplicationAdminJmxAutoConfigurationTests.java\n@@ -41,7 +41,7 @@\n  *\n  * @author Stephane Nicoll\n  */\n-public class SpringApplicationLifecycleAutoConfigurationTests {\n+public class SpringApplicationAdminJmxAutoConfigurationTests {\n \n \tprivate static final String ENABLE_ADMIN_PROP = \"spring.application.admin.enabled=true\";\n ",
    "output": "Polish class name"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/ElasticsearchHealthIndicatorTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/ElasticsearchHealthIndicatorTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/ElasticsearchHealthIndicatorTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/ElasticsearchHealthIndicatorTests.java\n@@ -28,6 +28,10 @@\n import org.elasticsearch.client.AdminClient;\n import org.elasticsearch.client.Client;\n import org.elasticsearch.client.ClusterAdminClient;\n+import org.elasticsearch.cluster.ClusterState;\n+import org.elasticsearch.cluster.block.ClusterBlocks;\n+import org.elasticsearch.cluster.node.DiscoveryNodes;\n+import org.elasticsearch.cluster.routing.RoutingTable;\n import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n@@ -175,7 +179,9 @@ private StubClusterHealthResponse() {\n \t\t}\n \n \t\tprivate StubClusterHealthResponse(ClusterHealthStatus status) {\n-\t\t\tsuper(\"test-cluster\", null);\n+\t\t\tsuper(\"test-cluster\", new String[0], new ClusterState(null, 0, null,\n+\t\t\t\t\tRoutingTable.builder().build(), DiscoveryNodes.builder().build(),\n+\t\t\t\t\tClusterBlocks.builder().build(), null));\n \t\t\tthis.status = status;\n \t\t}\n ",
    "output": "Upgrade to Elasticsearch 1.5.2"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/CommandRunner.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/CommandRunner.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/CommandRunner.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/CommandRunner.java\n@@ -25,7 +25,6 @@\n import java.util.Set;\n \n import org.springframework.boot.cli.command.status.ExitStatus;\n-import org.springframework.boot.cli.command.test.TestFailedException;\n import org.springframework.boot.cli.util.Log;\n import org.springframework.util.Assert;\n import org.springframework.util.StringUtils;\n@@ -180,9 +179,6 @@ public int runAndHandleErrors(String... args) {\n \t\t\tshowUsage();\n \t\t\treturn 1;\n \t\t}\n-\t\tcatch (TestFailedException e) {\n-\t\t\treturn 1;\n-\t\t}\n \t\tcatch (Exception ex) {\n \t\t\treturn handleError(debug, ex);\n \t\t}",
    "output": "Fix CLI package tangle\nRemove explicit TestFailedException catch in CommandRunner and instead\nrely on the fact that TestFailedException extends CommandException."
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n--- a/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n@@ -733,7 +733,6 @@ public void setBanner(Banner banner) {\n \t * Sets if the Spring banner should be displayed when the application runs. Defaults\n \t * to {@code true}.\n \t * @param showBanner if the banner should be shown\n-\t * @see #printDefaultBanner()\n \t */\n \tpublic void setShowBanner(boolean showBanner) {\n \t\tthis.showBanner = showBanner;",
    "output": "Fix Javadoc warning"
  },
  {
    "input": "diff --git a/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/DevToolsProperties.java b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/DevToolsProperties.java\n--- a/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/DevToolsProperties.java\n+++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/autoconfigure/DevToolsProperties.java\n@@ -17,11 +17,13 @@\n package org.springframework.boot.devtools.autoconfigure;\n \n import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.boot.context.properties.NestedConfigurationProperty;\n \n /**\n  * Configuration properties for developer tools.\n  *\n  * @author Phillip Webb\n+ * @author Stephane Nicoll\n  * @since 1.3.0\n  */\n @ConfigurationProperties(prefix = \"spring.devtools\")\n@@ -37,6 +39,7 @@ public class DevToolsProperties {\n \n \tprivate Livereload livereload = new Livereload();\n \n+\t@NestedConfigurationProperty\n \tprivate RemoteDevToolsProperties remote = new RemoteDevToolsProperties();\n \n \tpublic Restart getRestart() {",
    "output": "Fix meta-data for spring.devtools.remote"
  },
  {
    "input": "diff --git a/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/filewatch/FileSystemWatcher.java b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/filewatch/FileSystemWatcher.java\n--- a/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/filewatch/FileSystemWatcher.java\n+++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/filewatch/FileSystemWatcher.java\n@@ -232,7 +232,9 @@ synchronized void stopAfter(int remainingScans) {\n \t\tThread thread = this.watchThread;\n \t\tif (thread != null) {\n \t\t\tthis.remainingScans.set(remainingScans);\n-\t\t\tthread.interrupt();\n+\t\t\tif (remainingScans <= 0) {\n+\t\t\t\tthread.interrupt();\n+\t\t\t}\n \t\t\tif (Thread.currentThread() != thread) {\n \t\t\t\ttry {\n \t\t\t\t\tthread.join();",
    "output": "Attempt to fix failing build"
  },
  {
    "input": "diff --git a/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/Restarter.java b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/Restarter.java\n--- a/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/Restarter.java\n+++ b/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/restart/Restarter.java\n@@ -157,6 +157,7 @@ private void immediateRestart() {\n \t\t\t\t@Override\n \t\t\t\tpublic Void call() throws Exception {\n \t\t\t\t\tstart();\n+\t\t\t\t\tcleanupCaches();\n \t\t\t\t\treturn null;\n \t\t\t\t}\n ",
    "output": "Clear caches on initial restart\nTweak `Restarter` to clear caches on the initial restart."
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/MetricExportProperties.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/MetricExportProperties.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/MetricExportProperties.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/MetricExportProperties.java\n@@ -35,12 +35,8 @@\n @ConfigurationProperties(\"spring.metrics.export\")\n public class MetricExportProperties extends TriggerProperties {\n \n-\t/**\n-\t * Flag to disable all metric exports (assuming any MetricWriters are available).\n-\t */\n-\tprivate boolean enabled = true;\n-\n-\tprivate Map<String, SpecificTriggerProperties> triggers = new LinkedHashMap<String, SpecificTriggerProperties>();\n+\tprivate Map<String, SpecificTriggerProperties> triggers\n+\t\t\t= new LinkedHashMap<String, SpecificTriggerProperties>();\n \n \tprivate Redis redis = new Redis();\n \n@@ -70,16 +66,6 @@ public void setUpDefaults() {\n \t\t}\n \t}\n \n-\t@Override\n-\tpublic boolean isEnabled() {\n-\t\treturn this.enabled;\n-\t}\n-\n-\t@Override\n-\tpublic void setEnabled(boolean enabled) {\n-\t\tthis.enabled = enabled;\n-\t}\n-\n \t/**\n \t * Configuration for triggers on individual named writers. Each value can individually\n \t * specify a name pattern explicitly, or else the map key will be used if the name is",
    "output": "Remove duplicate in MetricExportProperties"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/MetricExportProperties.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/MetricExportProperties.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/MetricExportProperties.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/MetricExportProperties.java\n@@ -35,12 +35,8 @@\n @ConfigurationProperties(\"spring.metrics.export\")\n public class MetricExportProperties extends TriggerProperties {\n \n-\t/**\n-\t * Flag to disable all metric exports (assuming any MetricWriters are available).\n-\t */\n-\tprivate boolean enabled = true;\n-\n-\tprivate Map<String, SpecificTriggerProperties> triggers = new LinkedHashMap<String, SpecificTriggerProperties>();\n+\tprivate Map<String, SpecificTriggerProperties> triggers\n+\t\t\t= new LinkedHashMap<String, SpecificTriggerProperties>();\n \n \tprivate Redis redis = new Redis();\n \n@@ -70,16 +66,6 @@ public void setUpDefaults() {\n \t\t}\n \t}\n \n-\t@Override\n-\tpublic boolean isEnabled() {\n-\t\treturn this.enabled;\n-\t}\n-\n-\t@Override\n-\tpublic void setEnabled(boolean enabled) {\n-\t\tthis.enabled = enabled;\n-\t}\n-\n \t/**\n \t * Configuration for triggers on individual named writers. Each value can individually\n \t * specify a name pattern explicitly, or else the map key will be used if the name is",
    "output": "Remove duplicate in MetricExportProperties"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/MetricExportProperties.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/MetricExportProperties.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/MetricExportProperties.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/export/MetricExportProperties.java\n@@ -98,15 +98,6 @@ public void setRedis(Redis redis) {\n \t\tthis.redis = redis;\n \t}\n \n-\t/**\n-\t * Default values for trigger configuration for all writers. Can also be set by\n-\t * including a writer with {@code name=\"*\"}.\n-\t * @return the default trigger configuration\n-\t */\n-\tpublic TriggerProperties getDefault() {\n-\t\treturn this;\n-\t}\n-\n \t/**\n \t * Find a matching trigger configuration.\n \t * @param name the bean name to match",
    "output": "Remove getDefault() from MetricExportProperties"
  },
  {
    "input": "diff --git a/spring-boot-developer-tools/src/main/java/org/springframework/boot/developertools/filewatch/ChangedFile.java b/spring-boot-developer-tools/src/main/java/org/springframework/boot/developertools/filewatch/ChangedFile.java\n--- a/spring-boot-developer-tools/src/main/java/org/springframework/boot/developertools/filewatch/ChangedFile.java\n+++ b/spring-boot-developer-tools/src/main/java/org/springframework/boot/developertools/filewatch/ChangedFile.java\n@@ -19,6 +19,7 @@\n import java.io.File;\n \n import org.springframework.util.Assert;\n+import org.springframework.util.StringUtils;\n \n /**\n  * A single file that has changed.\n@@ -71,8 +72,10 @@ public Type getType() {\n \t * @return the relative name\n \t */\n \tpublic String getRelativeName() {\n-\t\tString folderName = this.sourceFolder.getAbsoluteFile().getPath();\n-\t\tString fileName = this.file.getAbsoluteFile().getPath();\n+\t\tFile folder = this.sourceFolder.getAbsoluteFile();\n+\t\tFile file = this.file.getAbsoluteFile();\n+\t\tString folderName = StringUtils.cleanPath(folder.getPath());\n+\t\tString fileName = StringUtils.cleanPath(file.getPath());\n \t\tAssert.state(fileName.startsWith(folderName), \"The file \" + fileName\n \t\t\t\t+ \" is not contained in the source folder \" + folderName);\n \t\treturn fileName.substring(folderName.length() + 1);",
    "output": "Fix Windows slash issue with ChangedFile\nUpdate ChangedFile to clean paths when returning the relative name."
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration.java\n@@ -18,6 +18,8 @@\n \n import javax.cache.Caching;\n \n+import com.hazelcast.core.IMap;\n+import com.hazelcast.spring.cache.HazelcastCache;\n import net.sf.ehcache.Ehcache;\n \n import org.springframework.boot.actuate.cache.CacheStatistics;\n@@ -41,8 +43,6 @@\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n-import com.hazelcast.core.IMap;\n-\n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for {@link CacheStatisticsProvider}\n  * beans.\n@@ -79,7 +79,7 @@ public EhCacheStatisticsProvider ehCacheCacheStatisticsProvider() {\n \t}\n \n \t@Configuration\n-\t@ConditionalOnClass(IMap.class)\n+\t@ConditionalOnClass({ IMap.class, HazelcastCache.class} )\n \tstatic class HazelcastCacheStatisticsConfiguration {\n \n \t\t@Bean",
    "output": "Fix Hazelcast cache statistics condition\nMake sure the Hazelcast statistics support is not triggered if the Spring\nsupport is not present. The Hazelcast dependency alone may be used with\nJCache and this should not trigger the support of the native Hazelcast\nmetrics infra."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/redis/RedisAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/redis/RedisAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/redis/RedisAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/redis/RedisAutoConfiguration.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2014 the original author or authors.\n+ * Copyright 2012-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -178,7 +178,7 @@ protected static class RedisConfiguration {\n \n \t\t@Bean\n \t\t@ConditionalOnMissingBean(name = \"redisTemplate\")\n-\t\tpublic RedisOperations<Object, Object> redisTemplate(\n+\t\tpublic RedisTemplate<Object, Object> redisTemplate(\n \t\t\t\tRedisConnectionFactory redisConnectionFactory)\n \t\t\t\tthrows UnknownHostException {\n \t\t\tRedisTemplate<Object, Object> template = new RedisTemplate<Object, Object>();",
    "output": "Fix Redis cache auto-configuration\nAdd an explicit link to the `RedisAutoConfiguration` to make sure it is\napplied before the cache counter-part. Request the general\n`redisTemplate` so that non String-values can be handled by default as\nwell."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/RedisCacheConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/RedisCacheConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/RedisCacheConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/RedisCacheConfiguration.java\n@@ -19,8 +19,10 @@\n import java.util.List;\n \n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.redis.RedisAutoConfiguration;\n import org.springframework.cache.CacheManager;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Conditional;\n@@ -35,6 +37,7 @@\n  * @since 1.3.0\n  */\n @Configuration\n+@AutoConfigureAfter(RedisAutoConfiguration.class)\n @ConditionalOnBean(RedisTemplate.class)\n @ConditionalOnMissingBean(CacheManager.class)\n @Conditional(CacheCondition.class)\n@@ -44,7 +47,7 @@ class RedisCacheConfiguration {\n \tprivate CacheProperties cacheProperties;\n \n \t@Bean\n-\tpublic RedisCacheManager cacheManager(RedisTemplate<?, ?> redisTemplate) {\n+\tpublic RedisCacheManager cacheManager(RedisTemplate<Object, Object> redisTemplate) {\n \t\tRedisCacheManager cacheManager = new RedisCacheManager(redisTemplate);\n \t\tList<String> cacheNames = this.cacheProperties.getCacheNames();\n \t\tif (!cacheNames.isEmpty()) {",
    "output": "Expose RedisTemplate with explicit type"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/MvcEndpointCorsIntegrationTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/MvcEndpointCorsIntegrationTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/MvcEndpointCorsIntegrationTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/MvcEndpointCorsIntegrationTests.java\n@@ -80,10 +80,6 @@ public void settingAllowedOriginsEnablesCors() throws Exception {\n \tpublic void maxAgeDefaultsTo30Minutes() throws Exception {\n \t\tEnvironmentTestUtils.addEnvironment(this.context,\n \t\t\t\t\"endpoints.cors.allowed-origins:foo.example.com\");\n-\t\tcreateMockMvc().perform(\n-\t\t\t\toptions(\"/beans\").header(\"Origin\", \"bar.example.com\").header(\n-\t\t\t\t\t\tHttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, \"GET\")).andExpect(\n-\t\t\t\tstatus().isForbidden());\n \t\tperformAcceptedCorsRequest().andExpect(\n \t\t\t\theader().string(HttpHeaders.ACCESS_CONTROL_MAX_AGE, \"1800\"));\n \t}",
    "output": "Fix redudant assertion in test"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/MvcEndpointCorsIntegrationTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/MvcEndpointCorsIntegrationTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/MvcEndpointCorsIntegrationTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/MvcEndpointCorsIntegrationTests.java\n@@ -80,10 +80,6 @@ public void settingAllowedOriginsEnablesCors() throws Exception {\n \tpublic void maxAgeDefaultsTo30Minutes() throws Exception {\n \t\tEnvironmentTestUtils.addEnvironment(this.context,\n \t\t\t\t\"endpoints.cors.allowed-origins:foo.example.com\");\n-\t\tcreateMockMvc().perform(\n-\t\t\t\toptions(\"/beans\").header(\"Origin\", \"bar.example.com\").header(\n-\t\t\t\t\t\tHttpHeaders.ACCESS_CONTROL_REQUEST_METHOD, \"GET\")).andExpect(\n-\t\t\t\tstatus().isForbidden());\n \t\tperformAcceptedCorsRequest().andExpect(\n \t\t\t\theader().string(HttpHeaders.ACCESS_CONTROL_MAX_AGE, \"1800\"));\n \t}",
    "output": "Fix redudant assertion in test"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfigurationTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfigurationTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfigurationTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfigurationTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2013-2014 the original author or authors.\n+ * Copyright 2012-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -60,6 +60,7 @@\n  * Tests for {@link CrshAutoConfiguration}.\n  *\n  * @author Christian Dupuis\n+ * @author Andreas Ahlenstorf\n  */\n @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n public class CrshAutoConfigurationTests {\n@@ -373,12 +374,11 @@ public Authentication authenticate(Authentication authentication)\n \n \t\t@Bean\n \t\tpublic AccessDecisionManager shellAccessDecisionManager() {\n-\t\t\tList<AccessDecisionVoter> voters = new ArrayList<AccessDecisionVoter>();\n+\t\t\tList<AccessDecisionVoter<?>> voters = new ArrayList<AccessDecisionVoter<?>>();\n \t\t\tRoleVoter voter = new RoleVoter();\n \t\t\tvoter.setRolePrefix(\"\");\n \t\t\tvoters.add(voter);\n-\t\t\tAccessDecisionManager result = new UnanimousBased(voters);\n-\t\t\treturn result;\n+\t\t\treturn new UnanimousBased(voters);\n \t\t}\n \n \t}",
    "output": "Fix spring-security versions"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfigurationTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfigurationTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfigurationTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfigurationTests.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2013-2014 the original author or authors.\n+ * Copyright 2012-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -60,6 +60,7 @@\n  * Tests for {@link CrshAutoConfiguration}.\n  *\n  * @author Christian Dupuis\n+ * @author Andreas Ahlenstorf\n  */\n @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n public class CrshAutoConfigurationTests {\n@@ -373,12 +374,11 @@ public Authentication authenticate(Authentication authentication)\n \n \t\t@Bean\n \t\tpublic AccessDecisionManager shellAccessDecisionManager() {\n-\t\t\tList<AccessDecisionVoter> voters = new ArrayList<AccessDecisionVoter>();\n+\t\t\tList<AccessDecisionVoter<?>> voters = new ArrayList<AccessDecisionVoter<?>>();\n \t\t\tRoleVoter voter = new RoleVoter();\n \t\t\tvoter.setRolePrefix(\"\");\n \t\t\tvoters.add(voter);\n-\t\t\tAccessDecisionManager result = new UnanimousBased(voters);\n-\t\t\treturn result;\n+\t\t\treturn new UnanimousBased(voters);\n \t\t}\n \n \t}",
    "output": "Fix spring-security versions"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java\n@@ -391,9 +391,9 @@ private PropertySource<?> loadIntoGroup(String identifier, String location,\n \t\t\tStringBuilder msg = new StringBuilder();\n \t\t\tmsg.append(propertySource == null ? \"Skipped \" : \"Loaded \");\n \t\t\tmsg.append(\"config file \");\n-\t\t\tmsg.append(\"'\" + location + \"' \");\n-\t\t\tmsg.append(StringUtils.hasLength(profile) ? \"for profile \" + profile : \"\");\n-\t\t\tmsg.append(resource == null || !resource.exists() ? \" resource not found\" : \"\");\n+\t\t\tmsg.append(\"'\").append(location).append(\"' \");\n+\t\t\tmsg.append(StringUtils.hasLength(profile) ? \"for profile \" + profile : \" \");\n+\t\t\tmsg.append(resource == null || !resource.exists() ? \"resource not found\" : \"\");\n \t\t\tthis.debug.add(msg);\n \n \t\t\treturn propertySource;",
    "output": "Refine log message\nRework c03e14b to avoid an extra empty space in log message"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java\n@@ -393,7 +393,7 @@ private PropertySource<?> loadIntoGroup(String identifier, String location,\n \t\t\tmsg.append(\"config file \");\n \t\t\tmsg.append(\"'\" + location + \"' \");\n \t\t\tmsg.append(StringUtils.hasLength(profile) ? \"for profile \" + profile : \"\");\n-\t\t\tmsg.append(resource == null || !resource.exists() ? \"resource not found\" : \"\");\n+\t\t\tmsg.append(resource == null || !resource.exists() ? \" resource not found\" : \"\");\n \t\t\tthis.debug.add(msg);\n \n \t\t\treturn propertySource;",
    "output": "Fix missing space in log message"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/ServerPropertiesTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/ServerPropertiesTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/ServerPropertiesTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/ServerPropertiesTests.java\n@@ -197,7 +197,10 @@ public void defaultTomcatRemoteIpValve() throws Exception {\n \t\tString expectedInternalProxies = \"10\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}|\" // 10/8\n \t\t\t\t+ \"192\\\\.168\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}|\" // 192.168/16\n \t\t\t\t+ \"169\\\\.254\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}|\" // 169.254/16\n-\t\t\t\t+ \"127\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\"; // 127/8\n+\t\t\t\t+ \"127\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}|\" // 127/8\n+\t\t\t\t+ \"172\\\\.1[6-9]{1}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}|\" // 172.16/12\n+\t\t\t\t+ \"172\\\\.2[0-9]{1}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}|\"\n+\t\t\t\t+ \"172\\\\.3[0-1]{1}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\";\n \n \t\tassertEquals(expectedInternalProxies, remoteIpValve.getInternalProxies());\n \t}",
    "output": "Upgrade ServerPropertiesTests to reflect updated default internalProxies"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java\n@@ -294,7 +294,10 @@ public static class Tomcat {\n \t\tprivate String internalProxies = \"10\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}|\" // 10/8\n \t\t\t\t+ \"192\\\\.168\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}|\" // 192.168/16\n \t\t\t\t+ \"169\\\\.254\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}|\" // 169.254/16\n-\t\t\t\t+ \"127\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\"; // 127/8\n+\t\t\t\t+ \"127\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}|\" // 127/8\n+\t\t\t\t+ \"172\\\\.1[6-9]{1}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}|\" // 172.16/12\n+\t\t\t\t+ \"172\\\\.2[0-9]{1}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}|\"\n+\t\t\t\t+ \"172\\\\.3[0-1]{1}\\\\.\\\\d{1,3}\\\\.\\\\d{1,3}\";\n \n \t\t/**\n \t\t * Header that holds the incoming protocol, usually named \"X-Forwarded-Proto\".",
    "output": "Upgrade RemoteIpValve’s default internal proxies to include 172.16/12"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java\n@@ -148,7 +148,7 @@ public void onDifferentPort() throws Exception {\n \t\tassertContent(\"/endpoint\", ports.get().management, \"endpointoutput\");\n \t\tList<?> interceptors = (List<?>) ReflectionTestUtils.getField(\n \t\t\t\tthis.applicationContext.getBean(EndpointHandlerMapping.class),\n-\t\t\t\t\"interceptors\");\n+\t\t\t\t\"handlerInterceptors\");\n \t\tassertEquals(1, interceptors.size());\n \t\tthis.applicationContext.close();\n \t\tassertAllClosed();",
    "output": "Upgrade field that’s checked reflectively to match Spring MVC’s internals"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricExportAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricExportAutoConfiguration.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricExportAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricExportAutoConfiguration.java\n@@ -71,7 +71,8 @@ public SchedulingConfigurer metricWritersMetricExporter() {\n \n \t\tMetricReader reader = this.endpointReader;\n \t\tif (reader == null && this.readers != null && !this.readers.isEmpty()) {\n-\t\t\treader = new CompositeMetricReader(this.readers.toArray(new MetricReader[0]));\n+\t\t\treader = new CompositeMetricReader(\n+\t\t\t\t\tthis.readers.toArray(new MetricReader[this.readers.size()]));\n \t\t}\n \n \t\tif (reader != null) {",
    "output": "Use array of correct size when turning List<MetricReader> into an array"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricExportAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricExportAutoConfiguration.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricExportAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricExportAutoConfiguration.java\n@@ -69,8 +69,8 @@ public SchedulingConfigurer metricWritersMetricExporter() {\n \n \t\tMap<String, MetricWriter> writers = new HashMap<String, MetricWriter>();\n \n-\t\tMetricReader reader = endpointReader;\n-\t\tif (reader == null && !this.readers.isEmpty()) {\n+\t\tMetricReader reader = this.endpointReader;\n+\t\tif (reader == null && this.readers != null && !this.readers.isEmpty()) {\n \t\t\treader = new CompositeMetricReader(this.readers.toArray(new MetricReader[0]));\n \t\t}\n ",
    "output": "Gracefully handle null readers in MetricExportAutoConfiguration"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java b/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java\n@@ -188,7 +188,8 @@ public void customBannerWithProperties() throws Exception {\n \t\tapplication.setWebEnvironment(false);\n \t\tapplication.run(\"--banner.location=classpath:test-banner-with-placeholder.txt\",\n \t\t\t\t\"--test.property=123456\");\n-\t\tassertThat(this.output.toString(), startsWith(\"Running a Test!\\n\\n123456\"));\n+\t\tassertThat(this.output.toString(),\n+\t\t\t\tstartsWith(String.format(\"Running a Test!%n%n123456\")));\n \t}\n \n \t@Test",
    "output": "Fix SpringApplicationTests.customBannerWithProperties on Windows"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CacheStatisticsAutoConfiguration.java\n@@ -28,7 +28,9 @@\n import org.springframework.boot.actuate.cache.GuavaCacheStatisticsProvider;\n import org.springframework.boot.actuate.cache.HazelcastCacheStatisticsProvider;\n import org.springframework.boot.actuate.cache.JCacheStatisticsProvider;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.cache.Cache;\n@@ -50,6 +52,7 @@\n  * @since 1.3.0\n  */\n @Configuration\n+@AutoConfigureAfter(CacheAutoConfiguration.class)\n @ConditionalOnBean(CacheManager.class)\n public class CacheStatisticsAutoConfiguration {\n ",
    "output": "Add explicit dependency to CacheAutoConfiguration\nMake sure that the cache statistics auto-configuration is evaluated after\nthe cache auto-configuration itself."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java\n@@ -57,8 +57,7 @@\n  * @author Stephane Nicoll\n  */\n @Order(Ordered.LOWEST_PRECEDENCE)\n-public class OnBeanCondition extends SpringBootCondition implements\n-\t\tConfigurationCondition {\n+class OnBeanCondition extends SpringBootCondition implements ConfigurationCondition {\n \n \tprivate static final Log logger = LogFactory.getLog(OnBeanCondition.class);\n ",
    "output": "Make OnBeanCondition package private again\nIt was accidentally made public in 45b579c."
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfiguration.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfiguration.java\n@@ -47,6 +47,7 @@\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Primary;\n import org.springframework.messaging.MessageChannel;\n import org.springframework.scheduling.annotation.EnableScheduling;\n import org.springframework.scheduling.annotation.Scheduled;\n@@ -158,6 +159,7 @@ public GaugeService gaugeService(GaugeBuffers writer) {\n \tstatic class LegacyMetricRepositoryConfiguration {\n \n \t\t@Bean\n+\t\t@Primary\n \t\tpublic InMemoryMetricRepository actuatorMetricRepository() {\n \t\t\treturn new InMemoryMetricRepository();\n \t\t}",
    "output": "Add @Primary to default InMemoryMetricRepository if there is one"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java\n@@ -114,10 +114,6 @@ public Undertow getUndertow() {\n \t\treturn this.undertow;\n \t}\n \n-\tpublic JspServlet jspServlet() {\n-\t\treturn this.jspServlet;\n-\t}\n-\n \tpublic String getContextPath() {\n \t\treturn this.contextPath;\n \t}\n@@ -455,13 +451,6 @@ public void customize(Context context) {\n \t\t\t\t}\n \t\t\t});\n \n-\t\t\tfactory.addContextCustomizers(new TomcatContextCustomizer() {\n-\t\t\t\t@Override\n-\t\t\t\tpublic void customize(Context context) {\n-\t\t\t\t\tcontext.setBackgroundProcessorDelay(Tomcat.this.backgroundProcessorDelay);\n-\t\t\t\t}\n-\t\t\t});\n-\n \t\t\tString remoteIpHeader = getRemoteIpHeader();\n \t\t\tString protocolHeader = getProtocolHeader();\n \t\t\tif (StringUtils.hasText(remoteIpHeader)",
    "output": "Polish 18453c0e\nDocument new configuration properties and remove redundant code"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/DefaultLaunchScriptTests.java b/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/DefaultLaunchScriptTests.java\n--- a/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/DefaultLaunchScriptTests.java\n+++ b/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/DefaultLaunchScriptTests.java\n@@ -43,7 +43,7 @@ public void loadsDefaultScript() throws Exception {\n \t\tDefaultLaunchScript script = new DefaultLaunchScript(null, null);\n \t\tString content = new String(script.toByteArray());\n \t\tassertThat(content, containsString(\"Spring Boot Startup Script\"));\n-\t\tassertThat(content, containsString(\"mode=\\\"auto\\\"\"));\n+\t\tassertThat(content, containsString(\"MODE=\\\"auto\\\"\"));\n \t}\n \n \t@Test",
    "output": "Fix test that was broken in b24e736c"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/system/ApplicationPidFileWriter.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/system/ApplicationPidFileWriter.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/system/ApplicationPidFileWriter.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/system/ApplicationPidFileWriter.java\n@@ -108,7 +108,7 @@ public void onApplicationEvent(SpringApplicationEvent event) {\n \t\t\t\t\twritePidFile(event);\n \t\t\t\t}\n \t\t\t\tcatch (Exception ex) {\n-\t\t\t\t\tlogger.warn(String.format(\"Cannot create pid file %s\", this.file));\n+\t\t\t\t\tlogger.warn(String.format(\"Cannot create pid file %s\", this.file), ex);\n \t\t\t\t}\n \t\t\t}\n \t\t}",
    "output": "Include exception in warning message when pid file cannot be created"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/RepackagerTests.java b/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/RepackagerTests.java\n--- a/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/RepackagerTests.java\n+++ b/spring-boot-tools/spring-boot-loader-tools/src/test/java/org/springframework/boot/loader/tools/RepackagerTests.java\n@@ -402,11 +402,16 @@ public void addLauncherScript() throws Exception {\n \t\tLaunchScript script = new MockLauncherScript(\"ABC\");\n \t\trepackager.repackage(dest, NO_LIBRARIES, script);\n \t\tbyte[] bytes = FileCopyUtils.copyToByteArray(dest);\n-\t\tassertThat(Files.getPosixFilePermissions(dest.toPath()),\n-\t\t\t\thasItem(PosixFilePermission.OWNER_EXECUTE));\n \t\tassertThat(new String(bytes), startsWith(\"ABC\"));\n \t\tassertThat(hasLauncherClasses(source), equalTo(false));\n \t\tassertThat(hasLauncherClasses(dest), equalTo(true));\n+\t\ttry {\n+\t\t\tassertThat(Files.getPosixFilePermissions(dest.toPath()),\n+\t\t\t\t\thasItem(PosixFilePermission.OWNER_EXECUTE));\n+\t\t}\n+\t\tcatch (UnsupportedOperationException ex) {\n+\t\t\t// Probably running the test on Windows\n+\t\t}\n \t}\n \n \tprivate boolean hasLauncherClasses(File file) throws IOException {",
    "output": "Fix broken RepackerTests on Windows\nUpdate test to deal with the fact that POSIX operations aren't available\non Windows."
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/PublicMetricsAutoConfigurationTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/PublicMetricsAutoConfigurationTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/PublicMetricsAutoConfigurationTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/PublicMetricsAutoConfigurationTests.java\n@@ -56,9 +56,10 @@\n \n import com.zaxxer.hikari.HikariDataSource;\n \n+import static org.hamcrest.Matchers.hasKey;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.assertThat;\n import static org.junit.Assert.fail;\n import static org.mockito.BDDMockito.given;\n import static org.mockito.Mockito.mock;\n@@ -236,7 +237,7 @@ private void assertMetrics(Collection<Metric<?>> metrics, String... keys) {\n \t\t\tcontent.put(metric.getName(), metric.getValue());\n \t\t}\n \t\tfor (String key : keys) {\n-\t\t\tassertTrue(\"Key '\" + key + \"' was not found\", content.containsKey(key));\n+\t\t\tassertThat(content, hasKey(key));\n \t\t}\n \t}\n ",
    "output": "Improve diagnostics in PublicMetricsAutoConfigurationTests\nmultipleCacheManagers fails on the CI server but does not fail\nlocally. This commit updates assertMetrics to include information\nabout the actual metrics so it's clear why the expectation was not\nmet."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/logging/AutoConfigurationReportLoggingInitializer.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/logging/AutoConfigurationReportLoggingInitializer.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/logging/AutoConfigurationReportLoggingInitializer.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/logging/AutoConfigurationReportLoggingInitializer.java\n@@ -105,7 +105,7 @@ public void logAutoConfigurationReport(boolean isCrashReport) {\n \t\t\tif (isCrashReport && this.logger.isInfoEnabled()\n \t\t\t\t\t&& !this.logger.isDebugEnabled()) {\n \t\t\t\tthis.logger.info(\"\\n\\nError starting ApplicationContext. \"\n-\t\t\t\t\t\t+ \"To display the auto-configuration report enabled \"\n+\t\t\t\t\t\t+ \"To display the auto-configuration report enable \"\n \t\t\t\t\t\t+ \"debug logging (start with --debug)\\n\\n\");\n \t\t\t}\n \t\t\tif (this.logger.isDebugEnabled()) {",
    "output": "Polish log message in AutoConfigurationReportLoggingInitializer"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheProperties.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheProperties.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheProperties.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/CacheProperties.java\n@@ -47,7 +47,7 @@ public class CacheProperties {\n \t * Comma-separated list of cache names to create if supported by the underlying cache\n \t * manager. Usually, this disables the ability to create additional caches on-the-fly.\n \t */\n-\tprivate final List<String> cacheNames = new ArrayList<String>();\n+\tprivate List<String> cacheNames = new ArrayList<String>();\n \n \tprivate final JCache jcache = new JCache();\n \n@@ -73,6 +73,10 @@ public List<String> getCacheNames() {\n \t\treturn this.cacheNames;\n \t}\n \n+\tpublic void setCacheNames(List<String> cacheNames) {\n+\t\tthis.cacheNames = cacheNames;\n+\t}\n+\n \tpublic JCache getJcache() {\n \t\treturn this.jcache;\n \t}",
    "output": "Polish\nAdd setter for cache names so that it can be bound both via indexed\naccess and comma-separated list."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mustache/MustacheAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mustache/MustacheAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mustache/MustacheAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mustache/MustacheAutoConfiguration.java\n@@ -65,7 +65,7 @@ public void checkTemplateLocationExists() {\n \t\t\tAssert.state(location.exists(this.applicationContext),\n \t\t\t\t\t\"Cannot find template location: \" + location\n \t\t\t\t\t\t\t+ \" (please add some templates, check your Mustache \"\n-\t\t\t\t\t\t\t+ \"configuration, or set spring.mustache.template.\"\n+\t\t\t\t\t\t\t+ \"configuration, or set spring.mustache.\"\n \t\t\t\t\t\t\t+ \"check-template-location=false)\");\n \t\t}\n \t}",
    "output": "Correct name of check-template-location property in error message"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/test/SpringBootMockServletContextTests.java b/spring-boot/src/test/java/org/springframework/boot/test/SpringBootMockServletContextTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/test/SpringBootMockServletContextTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/test/SpringBootMockServletContextTests.java\n@@ -20,6 +20,7 @@\n import java.io.FilenameFilter;\n import java.net.MalformedURLException;\n import java.net.URL;\n+import java.net.URLDecoder;\n \n import javax.servlet.ServletContext;\n \n@@ -83,7 +84,7 @@ protected String getResourceLocation(String path) {\n \t\t};\n \t\tURL resource = context.getResource(\"/\");\n \t\tassertThat(resource, not(nullValue()));\n-\t\tFile file = new File(resource.getPath());\n+\t\tFile file = new File(URLDecoder.decode(resource.getPath(), \"UTF-8\"));\n \t\tassertThat(\"File \" + file + \" exists\", file.exists(), equalTo(true));\n \t\tassertThat(\"File \" + file + \" is directory\", file.isDirectory(), equalTo(true));\n \t\tString[] contents = file.list(new FilenameFilter() {",
    "output": "Fix failing Windows CI build\nUpdate SpringBootMockServletContextTests to URL escape file paths."
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/test/SpringBootMockServletContextTests.java b/spring-boot/src/test/java/org/springframework/boot/test/SpringBootMockServletContextTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/test/SpringBootMockServletContextTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/test/SpringBootMockServletContextTests.java\n@@ -84,6 +84,8 @@ protected String getResourceLocation(String path) {\n \t\tURL resource = context.getResource(\"/\");\n \t\tassertThat(resource, not(nullValue()));\n \t\tFile file = new File(resource.getPath());\n+\t\tassertThat(\"File \" + file + \" exists\", file.exists(), equalTo(true));\n+\t\tassertThat(\"File \" + file + \" is directory\", file.isDirectory(), equalTo(true));\n \t\tString[] contents = file.list(new FilenameFilter() {\n \t\t\t@Override\n \t\t\tpublic boolean accept(File dir, String name) {",
    "output": "Add assertions to help debug Windows CI issues"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/it/java/org/springframework/boot/cli/CommandLineIT.java b/spring-boot-cli/src/it/java/org/springframework/boot/cli/CommandLineIT.java\n--- a/spring-boot-cli/src/it/java/org/springframework/boot/cli/CommandLineIT.java\n+++ b/spring-boot-cli/src/it/java/org/springframework/boot/cli/CommandLineIT.java\n@@ -42,7 +42,7 @@ public void hintProducesListOfValidCommands() throws IOException,\n \t\t\tInterruptedException {\n \t\tInvocation cli = this.cli.invoke(\"hint\");\n \t\tassertThat(cli.await(), equalTo(0));\n-\t\tassertThat(cli.getErrorOutput().length(), equalTo(0));\n+\t\tassertThat(\"Unexpected error: \\n\" + cli.getErrorOutput(), cli.getErrorOutput().length(), equalTo(0));\n \t\tassertThat(cli.getStandardOutputLines().size(), equalTo(10));\n \t}\n ",
    "output": "Add animal sniffer for Java 6 and jdk1.8 to actuator\nThe build now requires java 8 (although no language features are yet\nin use). Bamboo has been updated."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/EhCacheCacheConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/EhCacheCacheConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/EhCacheCacheConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/EhCacheCacheConfiguration.java\n@@ -16,6 +16,8 @@\n \n package org.springframework.boot.autoconfigure.cache;\n \n+import net.sf.ehcache.Cache;\n+\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n@@ -35,7 +37,7 @@\n  * @since 1.3.0\n  */\n @Configuration\n-@ConditionalOnClass(EhCacheCacheManager.class)\n+@ConditionalOnClass({Cache.class, EhCacheCacheManager.class})\n @ConditionalOnMissingBean(CacheManager.class)\n @Conditional({ CacheCondition.class,\n \t\tEhCacheCacheConfiguration.ConfigAvailableCondition.class })",
    "output": "Add missing type check on EhCacheCacheConfiguration"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/EhCacheCacheConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/EhCacheCacheConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/EhCacheCacheConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/EhCacheCacheConfiguration.java\n@@ -16,6 +16,8 @@\n \n package org.springframework.boot.autoconfigure.cache;\n \n+import net.sf.ehcache.Cache;\n+\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n@@ -35,7 +37,7 @@\n  * @since 1.3.0\n  */\n @Configuration\n-@ConditionalOnClass(EhCacheCacheManager.class)\n+@ConditionalOnClass({Cache.class, EhCacheCacheManager.class})\n @ConditionalOnMissingBean(CacheManager.class)\n @Conditional({ CacheCondition.class,\n \t\tEhCacheCacheConfiguration.ConfigAvailableCondition.class })",
    "output": "Add missing type check on EhCacheCacheConfiguration\nPreviously, EhCacheCacheConfiguration could be triggered even if the\nehcache library is not present. This commit adds the missing\n`ConditionalOnType` that now guards the configuration properly."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/GuavaCacheConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/GuavaCacheConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/GuavaCacheConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/GuavaCacheConfiguration.java\n@@ -18,7 +18,6 @@\n \n import java.util.List;\n \n-import org.apache.commons.collections.CollectionUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n@@ -27,6 +26,7 @@\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Conditional;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.util.CollectionUtils;\n import org.springframework.util.StringUtils;\n \n import com.google.common.cache.CacheBuilder;",
    "output": "Fix wrong import in Guava auto-config\nRemove the need for `commons-collections`"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/JCacheCacheConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/JCacheCacheConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/JCacheCacheConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cache/JCacheCacheConfiguration.java\n@@ -24,7 +24,6 @@\n import javax.cache.configuration.MutableConfiguration;\n import javax.cache.spi.CachingProvider;\n \n-import org.apache.commons.collections.CollectionUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionOutcome;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n@@ -40,6 +39,7 @@\n import org.springframework.core.annotation.AnnotationAwareOrderComparator;\n import org.springframework.core.annotation.Order;\n import org.springframework.core.type.AnnotatedTypeMetadata;\n+import org.springframework.util.CollectionUtils;\n import org.springframework.util.StringUtils;\n \n /**",
    "output": "Fix wrong import in JCache auto-config\nRemove the need for `commons-collections`"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/XADataSourceAutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/XADataSourceAutoConfigurationTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/XADataSourceAutoConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/XADataSourceAutoConfigurationTests.java\n@@ -66,7 +66,7 @@ public void createFromUrl() throws Exception {\n \tpublic void createFromClass() throws Exception {\n \t\tApplicationContext context = createContext(\n \t\t\t\tFromProperties.class,\n-\t\t\t\t\"spring.datasource.xa.data-source-class:org.hsqldb.jdbc.pool.JDBCXADataSource\",\n+\t\t\t\t\"spring.datasource.xa.data-source-class-name:org.hsqldb.jdbc.pool.JDBCXADataSource\",\n \t\t\t\t\"spring.datasource.xa.properties.database-name:test\");\n \t\tcontext.getBean(DataSource.class);\n \t\tMockXADataSourceWrapper wrapper = context.getBean(MockXADataSourceWrapper.class);",
    "output": "Fix incorrect property name The property in XADataSourceAutoConfigurationTests should be `data-source-class-name`. Previously the `-name` was missing."
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/DiskSpaceHealthIndicator.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/DiskSpaceHealthIndicator.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/DiskSpaceHealthIndicator.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/DiskSpaceHealthIndicator.java\n@@ -16,6 +16,8 @@\n \n package org.springframework.boot.actuate.health;\n \n+import java.io.File;\n+\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -45,7 +47,8 @@ public DiskSpaceHealthIndicator(DiskSpaceHealthIndicatorProperties properties) {\n \n \t@Override\n \tprotected void doHealthCheck(Health.Builder builder) throws Exception {\n-\t\tlong diskFreeInBytes = this.properties.getPath().getFreeSpace();\n+\t\tFile path = this.properties.getPath();\n+\t\tlong diskFreeInBytes = path.getFreeSpace();\n \t\tif (diskFreeInBytes >= this.properties.getThreshold()) {\n \t\t\tbuilder.up();\n \t\t}\n@@ -55,7 +58,8 @@ protected void doHealthCheck(Health.Builder builder) throws Exception {\n \t\t\t\t\tthis.properties.getThreshold()));\n \t\t\tbuilder.down();\n \t\t}\n-\t\tbuilder.withDetail(\"free\", diskFreeInBytes).withDetail(\"threshold\",\n-\t\t\t\tthis.properties.getThreshold());\n+\t\tbuilder.withDetail(\"total\", path.getTotalSpace())\n+\t\t\t\t.withDetail(\"free\", diskFreeInBytes)\n+\t\t\t\t.withDetail(\"threshold\", this.properties.getThreshold());\n \t}\n }",
    "output": "Add total space to disk health information\nPreviously, disk health information only included the amount of free\nspace and the configured threshold. This commit adds the disk’s total\nspace."
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/run/BootRunTask.java b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/run/BootRunTask.java\n--- a/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/run/BootRunTask.java\n+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/run/BootRunTask.java\n@@ -59,7 +59,6 @@ public void exec() {\n \t}\n \n \tprivate void addResourcesIfNecessary() {\n-\t\tSystem.out.println(this.addResources);\n \t\tif (this.addResources) {\n \t\t\tSourceSet mainSourceSet = SourceSets.findMainSourceSet(getProject());\n \t\t\tfinal File outputDir = (mainSourceSet == null ? null : mainSourceSet",
    "output": "Polishing\nRemove unwanted System.out.println call"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/test/SpringApplicationContextLoader.java b/spring-boot/src/main/java/org/springframework/boot/test/SpringApplicationContextLoader.java\n--- a/spring-boot/src/main/java/org/springframework/boot/test/SpringApplicationContextLoader.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/test/SpringApplicationContextLoader.java\n@@ -39,6 +39,7 @@\n import org.springframework.core.env.ConfigurableEnvironment;\n import org.springframework.core.env.MapPropertySource;\n import org.springframework.core.env.StandardEnvironment;\n+import org.springframework.core.io.FileSystemResourceLoader;\n import org.springframework.mock.web.MockServletContext;\n import org.springframework.test.context.ContextConfigurationAttributes;\n import org.springframework.test.context.ContextLoader;\n@@ -261,7 +262,8 @@ private void addMockServletContext(\n \t\t\t\tList<ApplicationContextInitializer<?>> initializers,\n \t\t\t\tWebMergedContextConfiguration webConfiguration) {\n \t\t\tMockServletContext servletContext = new MockServletContext(\n-\t\t\t\t\twebConfiguration.getResourceBasePath());\n+\t\t\t\t\twebConfiguration.getResourceBasePath(),\n+\t\t\t\t\tnew FileSystemResourceLoader());\n \t\t\tinitializers.add(0, new ServletContextApplicationContextInitializer(\n \t\t\t\t\tservletContext));\n \t\t}",
    "output": "Use file based loader with MockServletContext\nUpdate SpringApplicationContextLoader so that the MockServletContext\nuses FileSystemResourceLoader. This allows `/src/main/webapp` folder\nto be found."
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpoint.java\n@@ -151,7 +151,7 @@ private boolean isCacheStale(long accessTime) {\n \t\tif (this.cached == null) {\n \t\t\treturn true;\n \t\t}\n-\t\treturn (accessTime - this.lastAccess) > this.delegate.getTimeToLive();\n+\t\treturn (accessTime - this.lastAccess) >= this.delegate.getTimeToLive();\n \t}\n \n \tprivate boolean exposeHealthDetails(Principal principal) {",
    "output": "Ensure that a TTL of zero is honoured by HealthMvcEndpoint"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-gradle-plugin/src/manual-test/versionManagement/src/main/java/VersionManagementApplication.java b/spring-boot-tools/spring-boot-gradle-plugin/src/manual-test/versionManagement/src/main/java/VersionManagementApplication.java\n--- a/spring-boot-tools/spring-boot-gradle-plugin/src/manual-test/versionManagement/src/main/java/VersionManagementApplication.java\n+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/manual-test/versionManagement/src/main/java/VersionManagementApplication.java\n@@ -1,22 +0,0 @@\n-/*\n- * Copyright 2012-2014 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- * http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-public class VersionManagementApplication {\n-\n-\tpublic static void main(String[] args) {\n-\t}\n-\n-}",
    "output": "Remove manual Gradle plugin versionManagement test\nFollowing the move to using the separate dependency management plugin\nthis test is no longer valid. It should have been removed as part of\n2c3c62d7"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcChildContextConfiguration.java\n@@ -158,7 +158,7 @@ public ManagementErrorEndpoint errorEndpoint(final ErrorAttributes errorAttribut\n \t * configures the security filter.\n \t */\n \t@Configuration\n-\t@ConditionalOnMissingClass(WebSecurityConfigurerAdapter.class)\n+\t@ConditionalOnMissingClass(name = \"org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter\")\n \tprotected static class EndpointHandlerMappingConfiguration {\n \n \t\t@Autowired(required = false)",
    "output": "Use a String when referencing a class with @ConditionalOnMissingClass\nUsing a Class reference can cause reflection problems at runtime ()."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/ElasticsearchAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/ElasticsearchAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/ElasticsearchAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/ElasticsearchAutoConfiguration.java\n@@ -100,16 +100,14 @@ public void destroy() throws Exception {\n \t\t\t\tif (logger.isInfoEnabled()) {\n \t\t\t\t\tlogger.info(\"Closing Elasticsearch client\");\n \t\t\t\t}\n-\t\t\t\tif (this.releasable != null) {\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tthis.releasable.close();\n-\t\t\t\t\t}\n-\t\t\t\t\tcatch (NoSuchMethodError ex) {\n-\t\t\t\t\t\t// Earlier versions of Elasticsearch had a different method name\n-\t\t\t\t\t\tReflectionUtils.invokeMethod(\n-\t\t\t\t\t\t\t\tReflectionUtils.findMethod(Releasable.class, \"release\"),\n-\t\t\t\t\t\t\t\tthis.releasable);\n-\t\t\t\t\t}\n+\t\t\t\ttry {\n+\t\t\t\t\tthis.releasable.close();\n+\t\t\t\t}\n+\t\t\t\tcatch (NoSuchMethodError ex) {\n+\t\t\t\t\t// Earlier versions of Elasticsearch had a different method name\n+\t\t\t\t\tReflectionUtils.invokeMethod(\n+\t\t\t\t\t\t\tReflectionUtils.findMethod(Releasable.class, \"release\"),\n+\t\t\t\t\t\t\tthis.releasable);\n \t\t\t\t}\n \t\t\t}\n \t\t\tcatch (final Exception ex) {",
    "output": "Remove unnecessary if statement"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/ElasticsearchAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/ElasticsearchAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/ElasticsearchAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/elasticsearch/ElasticsearchAutoConfiguration.java\n@@ -100,16 +100,14 @@ public void destroy() throws Exception {\n \t\t\t\tif (logger.isInfoEnabled()) {\n \t\t\t\t\tlogger.info(\"Closing Elasticsearch client\");\n \t\t\t\t}\n-\t\t\t\tif (this.releasable != null) {\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tthis.releasable.close();\n-\t\t\t\t\t}\n-\t\t\t\t\tcatch (NoSuchMethodError ex) {\n-\t\t\t\t\t\t// Earlier versions of Elasticsearch had a different method name\n-\t\t\t\t\t\tReflectionUtils.invokeMethod(\n-\t\t\t\t\t\t\t\tReflectionUtils.findMethod(Releasable.class, \"release\"),\n-\t\t\t\t\t\t\t\tthis.releasable);\n-\t\t\t\t\t}\n+\t\t\t\ttry {\n+\t\t\t\t\tthis.releasable.close();\n+\t\t\t\t}\n+\t\t\t\tcatch (NoSuchMethodError ex) {\n+\t\t\t\t\t// Earlier versions of Elasticsearch had a different method name\n+\t\t\t\t\tReflectionUtils.invokeMethod(\n+\t\t\t\t\t\t\tReflectionUtils.findMethod(Releasable.class, \"release\"),\n+\t\t\t\t\t\t\tthis.releasable);\n \t\t\t\t}\n \t\t\t}\n \t\t\tcatch (final Exception ex) {",
    "output": "Remove unnecessary if statement"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java\n@@ -281,7 +281,7 @@ private void addStaticIndexHtmlViewControllers(ViewControllerRegistry registry)\n \t\t\t\t\t\t// Ignore\n \t\t\t\t\t}\n \t\t\t\t\t// Use forward: prefix so that no view resolution is done\n-\t\t\t\t\tregistry.addViewController(\"/\").setViewName(\"forward:/index.html\");\n+\t\t\t\t\tregistry.addViewController(\"/\").setViewName(\"forward:index.html\");\n \t\t\t\t\treturn;\n \t\t\t\t}\n \t\t\t}",
    "output": "Fix index.html root path forwarding\nFix automatic '/' -> 'index.html' forwarding to also work when a\n`server.servlet-path` property is set."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/MultipartAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/MultipartAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/MultipartAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/MultipartAutoConfiguration.java\n@@ -56,8 +56,7 @@ public class MultipartAutoConfiguration {\n \tprivate MultipartProperties multipartProperties = new MultipartProperties();\n \n \t@Bean\n-\t@ConditionalOnMissingBean(value = { MultipartConfigElement.class,\n-\t\t\tMultipartResolver.class })\n+\t@ConditionalOnMissingBean\n \tpublic MultipartConfigElement multipartConfigElement() {\n \t\treturn this.multipartProperties.createMultipartConfig();\n \t}",
    "output": "Relax MultipartConfigElement condition\nAllow MultipartConfigElement bean to be created even if a\nMultipartResolver bean has been defined by the user."
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricFilterAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricFilterAutoConfiguration.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricFilterAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricFilterAutoConfiguration.java\n@@ -53,7 +53,7 @@\n @Configuration\n @ConditionalOnBean({ CounterService.class, GaugeService.class })\n @ConditionalOnClass({ Servlet.class, ServletRegistration.class,\n-\t\tOncePerRequestFilter.class })\n+\t\tOncePerRequestFilter.class, HandlerMapping.class })\n @AutoConfigureAfter(MetricRepositoryAutoConfiguration.class)\n public class MetricFilterAutoConfiguration {\n ",
    "output": "Ensure actuator works without Spring MVC\nUpdate MetricFilterAutoConfiguration to ensure that it is only applied\nif Spring MVC is on the classpath."
  },
  {
    "input": "diff --git a/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/starter/StarterDependenciesIntegrationTests.java b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/starter/StarterDependenciesIntegrationTests.java\n--- a/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/starter/StarterDependenciesIntegrationTests.java\n+++ b/spring-boot-integration-tests/spring-boot-gradle-tests/src/test/java/org/springframework/boot/starter/StarterDependenciesIntegrationTests.java\n@@ -60,7 +60,7 @@ public class StarterDependenciesIntegrationTests {\n \t@Parameters\n \tpublic static List<String[]> getStarters() {\n \t\tList<String[]> starters = new ArrayList<String[]>();\n-\t\tfor (File file : new File(\"../spring-boot-starters\").listFiles()) {\n+\t\tfor (File file : new File(\"../../spring-boot-starters\").listFiles()) {\n \t\t\tif (file.isDirectory() && new File(file, \"pom.xml\").exists()) {\n \t\t\t\tString name = file.getName();\n \t\t\t\tif (name.startsWith(STARTER_NAME_PREFIX)",
    "output": "Reorganize integration tests\nMake spring-boot-integration-tests a top level project and move the\nexisting gradle tests and security tests to be sub-modules."
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/HealthIndicatorAutoConfiguration.java\n@@ -215,7 +215,7 @@ public static class SolrHealthIndicatorConfiguration {\n \n \t\t@Bean\n \t\t@ConditionalOnMissingBean(name = \"solrHealthIndicator\")\n-\t\tpublic HealthIndicator rabbitHealthIndicator() {\n+\t\tpublic HealthIndicator solrHealthIndicator() {\n \t\t\tif (this.solrServers.size() == 1) {\n \t\t\t\treturn new SolrHealthIndicator(this.solrServers.entrySet().iterator()\n \t\t\t\t\t\t.next().getValue());",
    "output": "Fix name of solr health indicator"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitCommand.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitCommand.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitCommand.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/InitCommand.java\n@@ -64,7 +64,7 @@ public Collection<HelpExample> getExamples() {\n \t\texamples.add(new HelpExample(\"To create a web my-app.zip\",\n \t\t\t\t\"spring init -d=web my-app.zip\"));\n \t\texamples.add(new HelpExample(\"To create a web/data-jpa gradle project unpacked\",\n-\t\t\t\t\"spring init -d=web,jpa --build=gradle my-dir/\"));\n+\t\t\t\t\"spring init -d=web,jpa --build=gradle my-dir\"));\n \t\treturn examples;\n \t}\n \n@@ -144,7 +144,7 @@ private void projectGenerationOptions() {\n \n \t\tprivate void otherOptions() {\n \t\t\tthis.extract = option(Arrays.asList(\"extract\", \"x\"),\n-\t\t\t\t\t\"Extract the project archive. Inferred if a location is specified and ends with /\");\n+\t\t\t\t\t\"Extract the project archive. Inferred if a location is specified without an extension\");\n \t\t\tthis.force = option(Arrays.asList(\"force\", \"f\"),\n \t\t\t\t\t\"Force overwrite of existing files\");\n \t\t}",
    "output": "Fix wrong help page for archive detection logic"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java\n--- a/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java\n+++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2014 the original author or authors.\n+ * Copyright 2012-2015 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -393,9 +393,11 @@ private InputStream getAdditionalMetadata() throws IOException {\n \t\t\t// Gradle keeps things separate\n \t\t\tString path = file.getPath();\n \t\t\tint index = path.lastIndexOf(CLASSES_FOLDER);\n-\t\t\tpath = path.substring(0, index) + RESOURCES_FOLDER\n-\t\t\t\t\t+ path.substring(index + CLASSES_FOLDER.length());\n-\t\t\tfile = new File(path);\n+\t\t\tif (index >= 0) {\n+\t\t\t\tpath = path.substring(0, index) + RESOURCES_FOLDER\n+\t\t\t\t\t\t+ path.substring(index + CLASSES_FOLDER.length());\n+\t\t\t\tfile = new File(path);\n+\t\t\t}\n \t\t}\n \t\treturn (file.exists() ? new FileInputStream(file) : fileObject.toUri().toURL()\n \t\t\t\t.openStream());",
    "output": "Remove incorrect assumption that output will be in folder named classes\nWhen running in Eclipse, by default Gradle builds its output into a\nfolder named bin. This commit update the annotation processor to remove\nthe failure assumption that the output will always be located beneath\na folder named classes."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/HttpMessageConvertersAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/HttpMessageConvertersAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/HttpMessageConvertersAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/HttpMessageConvertersAutoConfiguration.java\n@@ -144,7 +144,9 @@ protected static class StringHttpMessageConverterConfiguration {\n \t\t@Bean\n \t\t@ConditionalOnMissingBean\n \t\tpublic StringHttpMessageConverter stringHttpMessageConverter() {\n-\t\t\treturn new StringHttpMessageConverter(this.encodingProperties.getCharset());\n+\t\t\tStringHttpMessageConverter converter = new StringHttpMessageConverter(this.encodingProperties.getCharset());\n+\t\t\tconverter.setWriteAcceptCharset(false);\n+\t\t\treturn converter;\n \t\t}\n \n \t}",
    "output": "Disable Accept-Charset Header in String converter"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/HttpMessageConvertersAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/HttpMessageConvertersAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/HttpMessageConvertersAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/HttpMessageConvertersAutoConfiguration.java\n@@ -144,7 +144,9 @@ protected static class StringHttpMessageConverterConfiguration {\n \t\t@Bean\n \t\t@ConditionalOnMissingBean\n \t\tpublic StringHttpMessageConverter stringHttpMessageConverter() {\n-\t\t\treturn new StringHttpMessageConverter(this.encodingProperties.getCharset());\n+\t\t\tStringHttpMessageConverter converter = new StringHttpMessageConverter(this.encodingProperties.getCharset());\n+\t\t\tconverter.setWriteAcceptCharset(false);\n+\t\t\treturn converter;\n \t\t}\n \n \t}",
    "output": "Disable Accept-Charset Header in String converter\nThis commit prevents the `Accept-Charset` from being written by the\nStringHttpMessageConverter. This feature is enabled by default in the\nframework and writes a *quite long* response header with all charsets\nsupported by the server.\n,"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java\n--- a/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java\n+++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java\n@@ -34,7 +34,6 @@\n import javax.annotation.processing.Processor;\n import javax.annotation.processing.RoundEnvironment;\n import javax.annotation.processing.SupportedAnnotationTypes;\n-import javax.annotation.processing.SupportedSourceVersion;\n import javax.lang.model.SourceVersion;\n import javax.lang.model.element.AnnotationMirror;\n import javax.lang.model.element.AnnotationValue;\n@@ -66,7 +65,6 @@\n  * @since 1.2.0\n  */\n @SupportedAnnotationTypes({ \"*\" })\n-@SupportedSourceVersion(SourceVersion.RELEASE_8)\n public class ConfigurationMetadataAnnotationProcessor extends AbstractProcessor {\n \n \tstatic final String CONFIGURATION_PROPERTIES_ANNOTATION = \"org.springframework.boot.\"\n@@ -101,6 +99,11 @@ protected String nestedConfigurationPropertyAnnotation() {\n \t\treturn NESTED_CONFIGURATION_PROPERTY_ANNOTATION;\n \t}\n \n+\t@Override\n+\tpublic SourceVersion getSupportedSourceVersion() {\n+\t\treturn SourceVersion.latestSupported();\n+\t}\n+\n \t@Override\n \tpublic synchronized void init(ProcessingEnvironment env) {\n \t\tsuper.init(env);",
    "output": "Upgrade getSupportedSourceVersion() logic Use SourceVersion.latestSupported() rather than @SupportedSourceVersion since we might build with an earlier JDK."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/AuthenticationManagerConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/AuthenticationManagerConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/AuthenticationManagerConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/AuthenticationManagerConfiguration.java\n@@ -181,7 +181,7 @@ public void configure(AuthenticationManagerBuilder auth) throws Exception {\n \t\t\tUser user = AuthenticationManagerConfiguration.this.security.getUser();\n \t\t\tif (user.isDefaultPassword()) {\n \t\t\t\tlogger.info(\"\\n\\nUsing default security password: \" + user.getPassword()\n-\t\t\t\t\t\t+ \"\\n\\n\");\n+\t\t\t\t\t\t+ \"\\n\");\n \t\t\t}\n \t\t\tthis.defaultAuth = new AuthenticationManagerBuilder(\n \t\t\t\t\tAuthenticationManagerConfiguration.this.objectPostProcessor);",
    "output": "Remove superfluous `\\n` when logging password\nThe last trailing `\\n` is not required as the logging system will add\nit."
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java\n--- a/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java\n+++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java\n@@ -22,6 +22,8 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n import java.util.Collections;\n import java.util.LinkedHashMap;\n import java.util.Map;\n@@ -367,10 +369,17 @@ private ConfigurationMetadata mergeAdditionalMetadata(ConfigurationMetadata meta\n \t\t}\n \t\tcatch (Exception ex) {\n \t\t\tlogWarning(\"Unable to merge additional-spring-configuration-metadata.json\");\n+\t\t\tlogWarning(getStackTrace(ex));\n \t\t\treturn metadata;\n \t\t}\n \t}\n \n+\tprivate String getStackTrace(Exception ex) {\n+\t\tStringWriter writer = new StringWriter();\n+\t\tex.printStackTrace(new PrintWriter(writer, true));\n+\t\treturn writer.toString();\n+\t}\n+\n \tprivate InputStream getAdditionalMetadata() throws IOException {\n \t\t// Most build systems will have copied the file to the class output location\n \t\tFileObject fileObject = this.processingEnv.getFiler().createResource(",
    "output": "Log stacktrace on additional metadata merge fail"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/test/IntegrationTestPropertiesListener.java b/spring-boot/src/main/java/org/springframework/boot/test/IntegrationTestPropertiesListener.java\n--- a/spring-boot/src/main/java/org/springframework/boot/test/IntegrationTestPropertiesListener.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/test/IntegrationTestPropertiesListener.java\n@@ -16,6 +16,7 @@\n \n package org.springframework.boot.test;\n \n+import org.springframework.core.Ordered;\n import org.springframework.core.annotation.AnnotatedElementUtils;\n import org.springframework.core.annotation.AnnotationAttributes;\n import org.springframework.test.context.MergedContextConfiguration;\n@@ -30,7 +31,7 @@\n  * @author Phillip Webb\n  * @since 1.2.0\n  */\n-class IntegrationTestPropertiesListener extends AbstractTestExecutionListener {\n+public class IntegrationTestPropertiesListener extends AbstractTestExecutionListener {\n \n \t@Override\n \tpublic void prepareTestInstance(TestContext testContext) throws Exception {\n@@ -57,4 +58,9 @@ private void addPropertySourceProperties(TestContext testContext, String[] prope\n \t\t}\n \t}\n \n+\t@Override\n+\tpublic int getOrder() {\n+\t\treturn Ordered.HIGHEST_PRECEDENCE;\n+\t}\n+\n }",
    "output": "Make IntegrationTestPropertiesListener public\nMake IntegrationTestPropertiesListener public so that it can be used\nwhen @TestExecutionListeners are declared on a parent class."
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java\n--- a/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java\n+++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java\n@@ -64,7 +64,7 @@\n  * @since 1.2.0\n  */\n @SupportedAnnotationTypes({ \"*\" })\n-@SupportedSourceVersion(SourceVersion.RELEASE_6)\n+@SupportedSourceVersion(SourceVersion.RELEASE_8)\n public class ConfigurationMetadataAnnotationProcessor extends AbstractProcessor {\n \n \tstatic final String CONFIGURATION_PROPERTIES_ANNOTATION = \"org.springframework.boot.\"",
    "output": "Upgrade @SupportedSourceVersion to RELEASE_8 Update the @SupportedSourceVersion annotation to RELEASE_8 since it should indicate \"the latest source version an annotation processor supports\"."
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java\n@@ -40,6 +40,7 @@\n import org.eclipse.jetty.servlet.ErrorPageErrorHandler;\n import org.eclipse.jetty.servlet.ServletHolder;\n import org.eclipse.jetty.servlet.ServletMapping;\n+import org.eclipse.jetty.util.resource.JarResource;\n import org.eclipse.jetty.util.resource.Resource;\n import org.eclipse.jetty.util.ssl.SslContextFactory;\n import org.eclipse.jetty.webapp.AbstractConfiguration;\n@@ -259,7 +260,8 @@ private void configureDocumentRoot(WebAppContext handler) {\n \t\tif (root != null) {\n \t\t\ttry {\n \t\t\t\tif (!root.isDirectory()) {\n-\t\t\t\t\tResource resource = Resource.newResource(\"jar:\" + root.toURI() + \"!\");\n+\t\t\t\t\tResource resource = JarResource.newJarResource(Resource\n+\t\t\t\t\t\t\t.newResource(root));\n \t\t\t\t\thandler.setBaseResource(resource);\n \t\t\t\t}\n \t\t\t\telse {",
    "output": "Fix potential Jetty MalformedURLException"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java\n@@ -40,6 +40,7 @@\n import org.eclipse.jetty.servlet.ErrorPageErrorHandler;\n import org.eclipse.jetty.servlet.ServletHolder;\n import org.eclipse.jetty.servlet.ServletMapping;\n+import org.eclipse.jetty.util.resource.JarResource;\n import org.eclipse.jetty.util.resource.Resource;\n import org.eclipse.jetty.util.ssl.SslContextFactory;\n import org.eclipse.jetty.webapp.AbstractConfiguration;\n@@ -259,7 +260,8 @@ private void configureDocumentRoot(WebAppContext handler) {\n \t\tif (root != null) {\n \t\t\ttry {\n \t\t\t\tif (!root.isDirectory()) {\n-\t\t\t\t\tResource resource = Resource.newResource(\"jar:\" + root.toURI() + \"!\");\n+\t\t\t\t\tResource resource = JarResource.newJarResource(Resource\n+\t\t\t\t\t\t\t.newResource(root));\n \t\t\t\t\thandler.setBaseResource(resource);\n \t\t\t\t}\n \t\t\t\telse {",
    "output": "Fix potential Jetty MalformedURLException\nUpdate JettyEmbeddedServletContainerFactory to use the JarResource\nclass to create the base resource. This prevents a potential\n\"java.lang.NullPointerException: no !/ in spec\" error which can occur\nwhen using shaded executable jars."
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java\n--- a/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java\n+++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java\n@@ -16,7 +16,6 @@\n \n package org.springframework.boot.configurationprocessor;\n \n-import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n import java.util.Collections;\n@@ -107,10 +106,6 @@ public synchronized void init(ProcessingEnvironment env) {\n \t\t}\n \t}\n \n-\tprivate void logWarning(String msg) {\n-\t\tthis.processingEnv.getMessager().printMessage(Kind.WARNING, msg);\n-\t}\n-\n \t@Override\n \tpublic boolean process(Set<? extends TypeElement> annotations,\n \t\t\tRoundEnvironment roundEnv) {\n@@ -361,9 +356,14 @@ private ConfigurationMetadata mergeManualMetadata(ConfigurationMetadata metadata\n \t\t\t\tinputStream.close();\n \t\t\t}\n \t\t}\n-\t\tcatch (IOException ex) {\n+\t\tcatch (Exception ex) {\n+\t\t\tlogWarning(\"Unable to merge additional-spring-configuration-metadata.json\");\n \t\t\treturn metadata;\n \t\t}\n \t}\n \n+\tprivate void logWarning(String msg) {\n+\t\tthis.processingEnv.getMessager().printMessage(Kind.WARNING, msg);\n+\t}\n+\n }",
    "output": "Don't fail build on merge failure"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java\n--- a/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java\n+++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java\n@@ -16,7 +16,6 @@\n \n package org.springframework.boot.configurationprocessor;\n \n-import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n import java.util.Collections;\n@@ -107,10 +106,6 @@ public synchronized void init(ProcessingEnvironment env) {\n \t\t}\n \t}\n \n-\tprivate void logWarning(String msg) {\n-\t\tthis.processingEnv.getMessager().printMessage(Kind.WARNING, msg);\n-\t}\n-\n \t@Override\n \tpublic boolean process(Set<? extends TypeElement> annotations,\n \t\t\tRoundEnvironment roundEnv) {\n@@ -361,9 +356,14 @@ private ConfigurationMetadata mergeManualMetadata(ConfigurationMetadata metadata\n \t\t\t\tinputStream.close();\n \t\t\t}\n \t\t}\n-\t\tcatch (IOException ex) {\n+\t\tcatch (Exception ex) {\n+\t\t\tlogWarning(\"Unable to merge additional-spring-configuration-metadata.json\");\n \t\t\treturn metadata;\n \t\t}\n \t}\n \n+\tprivate void logWarning(String msg) {\n+\t\tthis.processingEnv.getMessager().printMessage(Kind.WARNING, msg);\n+\t}\n+\n }",
    "output": "Don't fail build on merge failure\nBe more lenient when processing additional metadata json files."
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java\n--- a/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java\n+++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java\n@@ -343,14 +343,10 @@ protected void writeMetaData(ConfigurationMetadata metadata) {\n \n \tprivate ConfigurationMetadata mergeManualMetadata(ConfigurationMetadata metadata) {\n \t\ttry {\n-\t\t\tFileObject manualMetadata = this.processingEnv.getFiler().getResource(\n-\t\t\t\t\tStandardLocation.CLASS_PATH, \"\",\n+\t\t\tFileObject manualMetadata = this.processingEnv.getFiler().createResource(\n+\t\t\t\t\tStandardLocation.CLASS_OUTPUT, \"\",\n \t\t\t\t\t\"META-INF/additional-spring-configuration-metadata.json\");\n-\t\t\tif (!\"file\".equals(manualMetadata.toUri().getScheme())) {\n-\t\t\t\t// We only want local files, not any classpath jars\n-\t\t\t\treturn metadata;\n-\t\t\t}\n-\t\t\tInputStream inputStream = manualMetadata.openInputStream();\n+\t\t\tInputStream inputStream = manualMetadata.toUri().toURL().openStream();\n \t\t\ttry {\n \t\t\t\tConfigurationMetadata merged = new ConfigurationMetadata(metadata);\n \t\t\t\ttry {",
    "output": "Change additional metadata file lookup logic\nUpdate ConfigurationMetadataAnnotationProcessor to find the additional\nmetadata json file using createResource rather than getResource. Prior\nto this commit the file could be skipped when multiple files were\ncontained on the classpath."
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java b/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n@@ -377,7 +377,8 @@ public void sslNeedsClientAuthenticationSucceedsWithClientCertificate()\n \t\t\tthrows Exception {\n \t\tAbstractEmbeddedServletContainerFactory factory = getFactory();\n \t\taddTestTxtFile(factory);\n-\t\tfactory.setSsl(getSsl(ClientAuth.NEED, \"password\", \"src/test/resources/test.jks\"));\n+\t\tfactory.setSsl(getSsl(ClientAuth.NEED, \"password\", \"src/test/resources/test.jks\",\n+\t\t\t\t\"src/test/resources/test.jks\"));\n \t\tthis.container = factory.getEmbeddedServletContainer();\n \t\tthis.container.start();\n \t\tKeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());",
    "output": "Fix test failure introduced in d4b75edf"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java\n@@ -495,8 +495,6 @@ private static class Jetty9SslServerConnectorFactory implements\n \t\tpublic ServerConnector getConnector(Server server,\n \t\t\t\tSslContextFactory sslContextFactory, int port) {\n \t\t\tHttpConfiguration config = new HttpConfiguration();\n-\t\t\tconfig.setSecureScheme(\"https\");\n-\t\t\tconfig.setSecurePort(port);\n \t\t\tconfig.addCustomizer(new SecureRequestCustomizer());\n \t\t\tHttpConnectionFactory connectionFactory = new HttpConnectionFactory(config);\n \t\t\tSslConnectionFactory sslConnectionFactory = new SslConnectionFactory(",
    "output": "Remove unnecessary Jetty secure config calls"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/reactor/ReactorAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/reactor/ReactorAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/reactor/ReactorAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/reactor/ReactorAutoConfiguration.java\n@@ -34,7 +34,7 @@\n  * @author Dave Syer\n  */\n @Configuration\n-@ConditionalOnClass(EnableReactor.class)\n+@ConditionalOnClass({ EnableReactor.class, Environment.class })\n @AutoConfigureAfter(WebMvcAutoConfiguration.class)\n public class ReactorAutoConfiguration {\n ",
    "output": "Additional condition to protect Reactor 2.0 users"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/template/TemplateLocation.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/template/TemplateLocation.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/template/TemplateLocation.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/template/TemplateLocation.java\n@@ -65,8 +65,8 @@ private boolean anyExists(ResourcePatternResolver resolver) throws IOException {\n \t\t\tsearchPath = ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX\n \t\t\t\t\t+ searchPath.substring(ResourceLoader.CLASSPATH_URL_PREFIX.length());\n \t\t}\n-\t\tif (this.path.startsWith(ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX)) {\n-\t\t\tResource[] resources = resolver.getResources(this.path);\n+\t\tif (searchPath.startsWith(ResourcePatternResolver.CLASSPATH_ALL_URL_PREFIX)) {\n+\t\t\tResource[] resources = resolver.getResources(searchPath);\n \t\t\tfor (Resource resource : resources) {\n \t\t\t\tif (resource.exists()) {\n \t\t\t\t\treturn true;",
    "output": "Fix TemplateLocation.anyExists logic\nFix broken logic in TemplateLocation.anyExists caused by not using the\nlocal `searchPath` variable."
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/RequestMappingEndpoint.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/RequestMappingEndpoint.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/RequestMappingEndpoint.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/RequestMappingEndpoint.java\n@@ -18,7 +18,6 @@\n \n import java.util.Collection;\n import java.util.Collections;\n-import java.util.HashMap;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n@@ -84,11 +83,8 @@ public Map<String, Object> invoke() {\n \tprotected void extractMethodMappings(ApplicationContext applicationContext,\n \t\t\tMap<String, Object> result) {\n \t\tif (applicationContext != null) {\n-\t\t\tMap<String, AbstractHandlerMethodMapping<?>> mappings = new HashMap<String, AbstractHandlerMethodMapping<?>>();\n \t\t\tfor (String name : applicationContext.getBeansOfType(\n \t\t\t\t\tAbstractHandlerMethodMapping.class).keySet()) {\n-\t\t\t\tmappings.put(name, applicationContext.getBean(name,\n-\t\t\t\t\t\tAbstractHandlerMethodMapping.class));\n \t\t\t\t@SuppressWarnings(\"unchecked\")\n \t\t\t\tMap<?, HandlerMethod> methods = applicationContext.getBean(name,\n \t\t\t\t\t\tAbstractHandlerMethodMapping.class).getHandlerMethods();",
    "output": "Remove unused code"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfiguration.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricRepositoryAutoConfiguration.java\n@@ -115,7 +115,7 @@ public GaugeService gaugeService() {\n \tstatic class MetricRepositoryConfiguration {\n \n \t\t@Bean\n-\t\tpublic InMemoryMetricRepository metricRepository() {\n+\t\tpublic InMemoryMetricRepository actuatorMetricRepository() {\n \t\t\treturn new InMemoryMetricRepository();\n \t\t}\n ",
    "output": "Change bean name metricReporitory -> actuatorMetricRepository"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpointTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpointTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpointTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpointTests.java\n@@ -49,7 +49,7 @@ public class HealthMvcEndpointTests {\n \n \tprivate static final PropertySource<?> NON_SENSITIVE = new MapPropertySource(\"test\",\n \t\t\tCollections.<String, Object> singletonMap(\"endpoints.health.sensitive\",\n-\t\t\t\t\t\"false\"));;\n+\t\t\t\t\t\"false\"));\n \n \tprivate HealthEndpoint endpoint = null;\n ",
    "output": "Remove unecessary semicolon"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpointTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpointTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpointTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/mvc/HealthMvcEndpointTests.java\n@@ -49,7 +49,7 @@ public class HealthMvcEndpointTests {\n \n \tprivate static final PropertySource<?> NON_SENSITIVE = new MapPropertySource(\"test\",\n \t\t\tCollections.<String, Object> singletonMap(\"endpoints.health.sensitive\",\n-\t\t\t\t\t\"false\"));;\n+\t\t\t\t\t\"false\"));\n \n \tprivate HealthEndpoint endpoint = null;\n ",
    "output": "Remove unecessary semicolon"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RunMojo.java b/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RunMojo.java\n--- a/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RunMojo.java\n+++ b/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RunMojo.java\n@@ -171,7 +171,8 @@ private void run(String startClassName) throws MojoExecutionException {\n \t\tfindAgent();\n \t\tboolean hasAgent = (this.agent != null && this.agent.length > 0);\n \t\tboolean hasJvmArgs = (this.jvmArguments != null && this.jvmArguments.length() > 0);\n-\t\tif (Boolean.TRUE.equals(this.fork) || hasAgent || hasJvmArgs) {\n+\t\tif (Boolean.TRUE.equals(this.fork)\n+\t\t\t\t|| (this.fork == null && (hasAgent || hasJvmArgs))) {\n \t\t\trunWithForkedJvm(startClassName);\n \t\t}\n \t\telse {",
    "output": "Fix accidental fork logic change\nFix accidental change from commit b42c7fca."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jta/BitronixJtaConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jta/BitronixJtaConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jta/BitronixJtaConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jta/BitronixJtaConfiguration.java\n@@ -95,7 +95,7 @@ public XADataSourceWrapper xaDataSourceWrapper() {\n \n \t@Bean\n \t@ConditionalOnMissingBean\n-\tpublic static BitronixDependentBeanFactoryPostProcessor atomikosDependsOnBeanFactoryPostProcessor() {\n+\tpublic static BitronixDependentBeanFactoryPostProcessor bitronixDependentBeanFactoryPostProcessor() {\n \t\treturn new BitronixDependentBeanFactoryPostProcessor();\n \t}\n ",
    "output": "Fix incorrect BitronixJtaConfiguration bean name"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnPropertyCondition.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnPropertyCondition.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnPropertyCondition.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnPropertyCondition.java\n@@ -87,7 +87,7 @@ public ConditionOutcome getMatchOutcome(ConditionContext context,\n \t\t\t\t\t+ expandNames(prefix, missingProperties) + \" \");\n \t\t}\n \t\tif (!nonMatchingProperties.isEmpty()) {\n-\t\t\tString expected = havingValue == null ? \"!false\" : havingValue;\n+\t\t\tString expected = StringUtils.hasLength(havingValue) ? havingValue : \"!false\";\n \t\t\tmessage.append(\"expected '\").append(expected).append(\"' for properties \")\n \t\t\t\t\t.append(expandNames(prefix, nonMatchingProperties));\n \t\t}",
    "output": "Fix OnPropertyCondition no havingValue message"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoAutoConfiguration.java\n@@ -27,7 +27,6 @@\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n-import org.springframework.data.mongodb.MongoDbFactory;\n \n import com.mongodb.Mongo;\n import com.mongodb.MongoClientOptions;\n@@ -42,7 +41,7 @@\n @Configuration\n @ConditionalOnClass(Mongo.class)\n @EnableConfigurationProperties(MongoProperties.class)\n-@ConditionalOnMissingBean(MongoDbFactory.class)\n+@ConditionalOnMissingBean(type = \"org.springframework.data.mongodb.MongoDbFactory\")\n public class MongoAutoConfiguration {\n \n \t@Autowired",
    "output": "Fix TypeNotPresentExceptionProxy error with Mongo\nUpdate MongoAutoConfiguration so that a TypeNotPresentExceptionProxy\nerror is not thrown when Spring Data Mongo is not used."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/dao/PersistenceExceptionTranslationAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/dao/PersistenceExceptionTranslationAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/dao/PersistenceExceptionTranslationAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/dao/PersistenceExceptionTranslationAutoConfiguration.java\n@@ -36,7 +36,7 @@ public class PersistenceExceptionTranslationAutoConfiguration {\n \t@Bean\n \t@ConditionalOnMissingBean(PersistenceExceptionTranslationPostProcessor.class)\n \t@ConditionalOnProperty(prefix = \"spring.dao.exceptiontranslation\", name = \"enabled\", matchIfMissing = true)\n-\tpublic PersistenceExceptionTranslationPostProcessor persistenceExceptionTranslationPostProcessor() {\n+\tpublic static PersistenceExceptionTranslationPostProcessor persistenceExceptionTranslationPostProcessor() {\n \t\tPersistenceExceptionTranslationPostProcessor postProcessor = new PersistenceExceptionTranslationPostProcessor();\n \t\tpostProcessor.setProxyTargetClass(true);\n \t\treturn postProcessor;",
    "output": "Fix PersistenceExceptionTranslation INFO message\nUpdate PersistenceExceptionTranslationAutoConfiguration so that the\nPersistenceExceptionTranslation @Bean method is static."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/SpringBootApplication.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/SpringBootApplication.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/SpringBootApplication.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/SpringBootApplication.java\n@@ -46,4 +46,9 @@\n @ComponentScan\n public @interface SpringBootApplication {\n \n+\t/**\n+\t * Exclude specific auto-configuration classes such that they will never be applied.\n+\t */\n+\tClass<?>[] exclude() default {};\n+\n }",
    "output": "Add `exclude` attribute to @SpringBootApplication"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java\n@@ -41,6 +41,7 @@\n import org.springframework.core.io.ResourceLoader;\n import org.springframework.util.Assert;\n import org.thymeleaf.dialect.IDialect;\n+import org.thymeleaf.extras.conditionalcomments.dialect.ConditionalCommentsDialect;\n import org.thymeleaf.extras.springsecurity3.dialect.SpringSecurityDialect;\n import org.thymeleaf.spring4.SpringTemplateEngine;\n import org.thymeleaf.spring4.resourceresolver.SpringResourceResourceResolver;\n@@ -163,6 +164,18 @@ public SpringSecurityDialect securityDialect() {\n \n \t}\n \n+\t@Configuration\n+\t@ConditionalOnClass(ConditionalCommentsDialect.class)\n+\tprotected static class ThymeleafConditionalCommentsDialectConfiguration {\n+\n+\t\t@Bean\n+\t\t@ConditionalOnMissingBean\n+\t\tpublic ConditionalCommentsDialect conditionalCommentsDialect() {\n+\t\t\treturn new ConditionalCommentsDialect();\n+\t\t}\n+\n+\t}\n+\n \t@Configuration\n \t@ConditionalOnClass({ Servlet.class })\n \t@ConditionalOnWebApplication",
    "output": "Auto-configure for Thymeleaf conditionalcomments"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/reactor/ReactorAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/reactor/ReactorAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/reactor/ReactorAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/reactor/ReactorAutoConfiguration.java\n@@ -34,7 +34,7 @@\n  * @author Dave Syer\n  */\n @Configuration\n-@ConditionalOnClass(EnableReactor.class)\n+@ConditionalOnClass({ EnableReactor.class, Environment.class })\n @AutoConfigureAfter(WebMvcAutoConfiguration.class)\n public class ReactorAutoConfiguration {\n ",
    "output": "Additional condition to protect Reactor 2.0 users"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainerFactory.java\n@@ -221,6 +221,7 @@ private void configureSslTrustStore(SslContextFactory factory, Ssl ssl) {\n \tprotected final void configureWebAppContext(WebAppContext context,\n \t\t\tServletContextInitializer... initializers) {\n \t\tAssert.notNull(context, \"Context must not be null\");\n+\t\tcontext.setTempDirectory(getTempDirectory());\n \t\tsetExtendedListenerTypes(context);\n \t\tif (this.resourceLoader != null) {\n \t\t\tcontext.setClassLoader(this.resourceLoader.getClassLoader());\n@@ -246,6 +247,11 @@ protected final void configureWebAppContext(WebAppContext context,\n \t\tpostProcessWebAppContext(context);\n \t}\n \n+\tprivate File getTempDirectory() {\n+\t\tString temp = System.getProperty(\"java.io.tmpdir\");\n+\t\treturn (temp == null ? null : new File(temp));\n+\t}\n+\n \tprivate void setExtendedListenerTypes(WebAppContext context) {\n \t\ttry {\n \t\t\tcontext.getServletContext().setExtendedListenerTypes(true);",
    "output": "Set Jetty temp dir\nEnsure that the system temp directory is passed to the Jetty\nWebAppContext. This prevents `jsp` folders from appearing in the current\ndirectory."
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/SkipPatternJarScanner.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/SkipPatternJarScanner.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/SkipPatternJarScanner.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/SkipPatternJarScanner.java\n@@ -178,7 +178,6 @@ protected SkipPattern() {\n \t\t\tadd(\"jboss-transaction-api_*.jar\");\n \t\t\tadd(\"jcl-over-slf4j-*.jar\");\n \t\t\tadd(\"jdom-*.jar\");\n-\t\t\tadd(\"joda-time-*.jar\");\n \t\t\tadd(\"jul-to-slf4j-*.jar\");\n \t\t\tadd(\"log4j-over-slf4j-*.jar\");\n \t\t\tadd(\"logback-classic-*.jar\");",
    "output": "Drop `joda-time-*.jar` from SkipPatternJarScanner\nThe `joda-time-jsptags.jar` jar file cannot be skipped."
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RunMojo.java b/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RunMojo.java\n--- a/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RunMojo.java\n+++ b/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RunMojo.java\n@@ -168,8 +168,10 @@ private void findAgent() {\n \t}\n \n \tprivate void run(String startClassName) throws MojoExecutionException {\n-\t\tif (this.fork || (this.agent != null && this.agent.length > 0)\n-\t\t\t\t|| (this.jvmArguments != null && this.jvmArguments.length() > 0)) {\n+\t\tfindAgent();\n+\t\tboolean hasAgent = (this.agent != null && this.agent.length > 0);\n+\t\tboolean hasJvmArgs = (this.jvmArguments != null && this.jvmArguments.length() > 0);\n+\t\tif (this.fork || hasAgent || hasJvmArgs) {\n \t\t\trunWithForkedJvm(startClassName);\n \t\t}\n \t\telse {\n@@ -204,7 +206,6 @@ private void runWithMavenJvm(String startClassName) throws MojoExecutionExceptio\n \t}\n \n \tprivate void addAgents(List<String> args) {\n-\t\tfindAgent();\n \t\tif (this.agent != null) {\n \t\t\tgetLog().info(\"Attaching agents: \" + Arrays.asList(this.agent));\n \t\t\tfor (File agent : this.agent) {",
    "output": "Fix Maven Spring Loaded detection logic\nEnsure that the Maven plugin RunMojo attempts to detect the Spring\nLoaded agent before deciding if the JVM should be forked."
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/ResourceBanner.java b/spring-boot/src/main/java/org/springframework/boot/ResourceBanner.java\n--- a/spring-boot/src/main/java/org/springframework/boot/ResourceBanner.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/ResourceBanner.java\n@@ -99,8 +99,8 @@ private Map<String, Object> getVersionsMap(Class<?> sourceClass) {\n \t}\n \n \tprotected String getApplicationVersion(Class<?> sourceClass) {\n-\t\treturn (sourceClass == null ? null : sourceClass.getPackage()\n-\t\t\t\t.getImplementationVersion());\n+\t\tPackage sourcePackage = (sourceClass == null ? null : sourceClass.getPackage());\n+\t\treturn (sourcePackage == null ? null : sourcePackage.getImplementationVersion());\n \t}\n \n \tprotected String getBootVersion() {",
    "output": "Fix banner NPE when when using the default package\nUpdate ResourceBanner to protect against a null application package."
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/logging/logback/DefaultLogbackConfiguration.java b/spring-boot/src/main/java/org/springframework/boot/logging/logback/DefaultLogbackConfiguration.java\n--- a/spring-boot/src/main/java/org/springframework/boot/logging/logback/DefaultLogbackConfiguration.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/logging/logback/DefaultLogbackConfiguration.java\n@@ -46,7 +46,7 @@ class DefaultLogbackConfiguration {\n \t\t\t+ \"%clr(:){faint} %m%n%wex\";\n \n \tprivate static final String FILE_LOG_PATTERN = \"%d{yyyy-MM-dd HH:mm:ss.SSS} %5p \"\n-\t\t\t+ \"${PID:- } [%t] --- %-40.40logger{39} : %m%n%wex\";\n+\t\t\t+ \"${PID:- } --- [%t] %-40.40logger{39} : %m%n%wex\";\n \n \tprivate static final Charset UTF8 = Charset.forName(\"UTF-8\");\n ",
    "output": "Unify console and file logback patterns\nUpdate the file log pattern to write the thread name after the `---`\nseparator. The allows both file and console logs to be parsed in the\nsame way."
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/logging/logback/DefaultLogbackConfiguration.java b/spring-boot/src/main/java/org/springframework/boot/logging/logback/DefaultLogbackConfiguration.java\n--- a/spring-boot/src/main/java/org/springframework/boot/logging/logback/DefaultLogbackConfiguration.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/logging/logback/DefaultLogbackConfiguration.java\n@@ -112,7 +112,7 @@ private Appender<ILoggingEvent> fileAppender(LogbackConfigurator config,\n \t\t\tString logFile) {\n \t\tRollingFileAppender<ILoggingEvent> appender = new RollingFileAppender<ILoggingEvent>();\n \t\tPatternLayoutEncoder encoder = new PatternLayoutEncoder();\n-\t\tencoder.setPattern(FILE_LOG_PATTERN);\n+\t\tencoder.setPattern(OptionHelper.substVars(FILE_LOG_PATTERN, config.getContext()));\n \t\tappender.setEncoder(encoder);\n \t\tconfig.start(encoder);\n ",
    "output": "Substitute ${PID} variables with file logging\nUpdate DefaultLogbackConfiguration to include OptionHelper.substVars\nwhen setting the encoder pattern so that ${PID} is correctly expanded."
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java\n@@ -82,7 +82,7 @@\n public class TomcatEmbeddedServletContainerFactory extends\n \t\tAbstractEmbeddedServletContainerFactory implements ResourceLoaderAware {\n \n-\tprivate static final String DEFAULT_PROTOCOL = \"org.apache.coyote.http11.Http11NioProtocol\";\n+\tpublic static final String DEFAULT_PROTOCOL = \"org.apache.coyote.http11.Http11NioProtocol\";\n \n \tprivate File baseDirectory;\n ",
    "output": "Make DEFAULT_PROTOCOL public"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/AbstractConfigurableEmbeddedServletContainer.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/AbstractConfigurableEmbeddedServletContainer.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/AbstractConfigurableEmbeddedServletContainer.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/AbstractConfigurableEmbeddedServletContainer.java\n@@ -37,8 +37,8 @@\n public abstract class AbstractConfigurableEmbeddedServletContainer implements\n \t\tConfigurableEmbeddedServletContainer {\n \n-\tprivate static final int DEFAULT_SESSION_TIMEOUT = (int) TimeUnit.SECONDS\n-\t\t\t.toMinutes(30);\n+\tprivate static final int DEFAULT_SESSION_TIMEOUT = (int) TimeUnit.MINUTES\n+\t\t\t.toSeconds(30);\n \n \tprivate String contextPath = \"\";\n \n\ndiff --git a/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java b/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n@@ -530,6 +530,11 @@ public void sslWantsClientAuthenticationSucceedsWithoutClientCertificate()\n \t\t\t\tequalTo(\"test\"));\n \t}\n \n+\t@Test\n+\tpublic void defaultSessionTimeout() throws Exception {\n+\t\tassertThat(getFactory().getSessionTimeout(), equalTo(30 * 60));\n+\t}\n+\n \tprotected String getLocalUrl(String resourcePath) {\n \t\treturn getLocalUrl(\"http\", resourcePath);\n \t}",
    "output": "Fix session timeout default value\nUpdate DEFAULT_SESSION_TIMEOUT to use TimeUnit.MINUTES.toSeconds(30)\nrather than TimeUnit.SECONDS.toMinutes(30) which would always return\n0.\n(cherry picked from commit b33bbd56)"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/AbstractConfigurableEmbeddedServletContainer.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/AbstractConfigurableEmbeddedServletContainer.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/AbstractConfigurableEmbeddedServletContainer.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/AbstractConfigurableEmbeddedServletContainer.java\n@@ -37,8 +37,8 @@\n public abstract class AbstractConfigurableEmbeddedServletContainer implements\n \t\tConfigurableEmbeddedServletContainer {\n \n-\tprivate static final int DEFAULT_SESSION_TIMEOUT = (int) TimeUnit.SECONDS\n-\t\t\t.toMinutes(30);\n+\tprivate static final int DEFAULT_SESSION_TIMEOUT = (int) TimeUnit.MINUTES\n+\t\t\t.toSeconds(30);\n \n \tprivate String contextPath = \"\";\n \n\ndiff --git a/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java b/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n@@ -534,6 +534,11 @@ public void sslWantsClientAuthenticationSucceedsWithoutClientCertificate()\n \t\t\t\tequalTo(\"test\"));\n \t}\n \n+\t@Test\n+\tpublic void defaultSessionTimeout() throws Exception {\n+\t\tassertThat(getFactory().getSessionTimeout(), equalTo(30 * 60));\n+\t}\n+\n \tprotected String getLocalUrl(String resourcePath) {\n \t\treturn getLocalUrl(\"http\", resourcePath);\n \t}",
    "output": "Fix session timeout default value\nUpdate DEFAULT_SESSION_TIMEOUT to use TimeUnit.MINUTES.toSeconds(30)\nrather than TimeUnit.SECONDS.toMinutes(30) which would always return\n0."
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/undertow/UndertowEmbeddedServletContainerFactory.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/undertow/UndertowEmbeddedServletContainerFactory.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/undertow/UndertowEmbeddedServletContainerFactory.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/undertow/UndertowEmbeddedServletContainerFactory.java\n@@ -337,7 +337,8 @@ private DeploymentManager createDeploymentManager(\n \t\tDeploymentManager manager = Servlets.defaultContainer().addDeployment(deployment);\n \t\tmanager.deploy();\n \t\tSessionManager sessionManager = manager.getDeployment().getSessionManager();\n-\t\tsessionManager.setDefaultSessionTimeout(getSessionTimeout());\n+\t\tint sessionTimeout = (getSessionTimeout() > 0 ? getSessionTimeout() : -1);\n+\t\tsessionManager.setDefaultSessionTimeout(sessionTimeout);\n \t\treturn manager;\n \t}\n ",
    "output": "Ensure Undertow session timeout is set correctly\nAssume that Undertow uses -1 for \"no expiry\"."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java\n@@ -111,26 +111,24 @@ private List<String> getMatchingBeans(ConditionContext context, BeanSearchSpec b\n \t\t\t\t\t\"Unable to use SearchStrategy.PARENTS\");\n \t\t\tbeanFactory = (ConfigurableListableBeanFactory) parent;\n \t\t}\n-\n+\t\tif (beanFactory == null) {\n+\t\t\treturn Collections.emptyList();\n+\t\t}\n \t\tList<String> beanNames = new ArrayList<String>();\n \t\tboolean considerHierarchy = beans.getStrategy() == SearchStrategy.ALL;\n-\n \t\tfor (String type : beans.getTypes()) {\n \t\t\tbeanNames.addAll(getBeanNamesForType(beanFactory, type,\n \t\t\t\t\tcontext.getClassLoader(), considerHierarchy));\n \t\t}\n-\n \t\tfor (String annotation : beans.getAnnotations()) {\n \t\t\tbeanNames.addAll(Arrays.asList(getBeanNamesForAnnotation(beanFactory,\n \t\t\t\t\tannotation, context.getClassLoader(), considerHierarchy)));\n \t\t}\n-\n \t\tfor (String beanName : beans.getNames()) {\n \t\t\tif (containsBean(beanFactory, beanName, considerHierarchy)) {\n \t\t\t\tbeanNames.add(beanName);\n \t\t\t}\n \t\t}\n-\n \t\treturn beanNames;\n \t}\n ",
    "output": "Guard for null BeanFactory in @ConditionalOnBean"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/ProjectGenerator.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/ProjectGenerator.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/ProjectGenerator.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/init/ProjectGenerator.java\n@@ -103,7 +103,7 @@ private void extractFromStream(ZipInputStream zipStream, boolean overwrite,\n \t\twhile (entry != null) {\n \t\t\tFile file = new File(outputFolder, entry.getName());\n \t\t\tif (file.exists() && !overwrite) {\n-\t\t\t\tthrow new ReportableException(file.isDirectory() ? \"Directory\" : \"File\"\n+\t\t\t\tthrow new ReportableException((file.isDirectory() ? \"Directory\" : \"File\")\n \t\t\t\t\t\t+ \" '\" + file.getName()\n \t\t\t\t\t\t+ \"' already exists. Use --force if you want to overwrite or \"\n \t\t\t\t\t\t+ \"specify an alternate location.\");",
    "output": "Fix error message"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ShellProperties.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ShellProperties.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ShellProperties.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ShellProperties.java\n@@ -94,11 +94,6 @@ public String getAuth() {\n \t\treturn this.auth;\n \t}\n \n-\tpublic void setAdditionalProperties(CrshShellProperties[] additionalProperties) {\n-\t\tAssert.notNull(additionalProperties, \"additionalProperties must not be null\");\n-\t\tthis.additionalProperties = additionalProperties;\n-\t}\n-\n \tpublic CrshShellProperties[] getAdditionalProperties() {\n \t\treturn this.additionalProperties;\n \t}",
    "output": "Drop ShellProperties.setAdditionalProperties\nDrop the setAdditionalProperties method from ShellProperties to ensure\nthat it is not included in the meta-data JSON. The additional properties\nare usually wired in using @Autowired and it is pretty unlikely that\nanyone is using the setter directly."
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/WebRequestTraceFilter.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/WebRequestTraceFilter.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/WebRequestTraceFilter.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/trace/WebRequestTraceFilter.java\n@@ -48,7 +48,9 @@ public class WebRequestTraceFilter extends OncePerRequestFilter implements Order\n \n \tprivate boolean dumpRequests = false;\n \n-\tprivate int order = Integer.MAX_VALUE;\n+\t// Not LOWEST_PRECEDENCE, but near the end, so it has a good chance of catching all\n+\t// enriched headers, but users can add stuff after this if they want to\n+\tprivate int order = Ordered.LOWEST_PRECEDENCE - 10;\n \n \tprivate final TraceRepository traceRepository;\n ",
    "output": "Add some space between the trace filter and the end of the chain"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/websocket/WebSocketAutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/websocket/WebSocketAutoConfigurationTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/websocket/WebSocketAutoConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/websocket/WebSocketAutoConfigurationTests.java\n@@ -90,7 +90,9 @@ static class TomcatConfiguration extends CommonConfiguration {\n \n \t\t@Bean\n \t\tpublic EmbeddedServletContainerFactory servletContainerFactory() {\n-\t\t\treturn new TomcatEmbeddedServletContainerFactory();\n+\t\t\tTomcatEmbeddedServletContainerFactory tomcatEmbeddedServletContainerFactory = new TomcatEmbeddedServletContainerFactory();\n+\t\t\ttomcatEmbeddedServletContainerFactory.setPort(0);\n+\t\t\treturn tomcatEmbeddedServletContainerFactory;\n \t\t}\n \n \t}\n@@ -100,7 +102,9 @@ static class JettyConfiguration extends CommonConfiguration {\n \n \t\t@Bean\n \t\tpublic EmbeddedServletContainerFactory servletContainerFactory() {\n-\t\t\treturn new JettyEmbeddedServletContainerFactory();\n+\t\t\tJettyEmbeddedServletContainerFactory jettyEmbeddedServletContainerFactory = new JettyEmbeddedServletContainerFactory();\n+\t\t\tjettyEmbeddedServletContainerFactory.setPort(0);\n+\t\t\treturn jettyEmbeddedServletContainerFactory;\n \t\t}\n \n \t}",
    "output": "Use a free port, rather than 8080, in WebSocketAutoConfigurationTests"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/writer/CodahaleMetricWriter.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/writer/CodahaleMetricWriter.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/writer/CodahaleMetricWriter.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/writer/CodahaleMetricWriter.java\n@@ -103,8 +103,9 @@ else if (name.startsWith(\"timer\")) {\n \tprivate Object getGuageLock(String name) {\n \t\tObject lock = this.gaugeLocks.get(name);\n \t\tif (lock == null) {\n-\t\t\tthis.gaugeLocks.putIfAbsent(name, new Object());\n-\t\t\tlock = this.gaugeLocks.get(name);\n+\t\t\tObject newLock = new Object();\n+\t\t\tlock = this.gaugeLocks.putIfAbsent(name, newLock);\n+\t\t\tlock = (lock == null ? newLock : lock);\n \t\t}\n \t\treturn lock;\n \t}",
    "output": "Polish concurrent gaugeLocks map access"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/web/ErrorPageFilter.java b/spring-boot/src/main/java/org/springframework/boot/context/web/ErrorPageFilter.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/web/ErrorPageFilter.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/web/ErrorPageFilter.java\n@@ -56,8 +56,8 @@\n  */\n @Component\n @Order(Ordered.HIGHEST_PRECEDENCE)\n-class ErrorPageFilter extends AbstractConfigurableEmbeddedServletContainer implements\n-\t\tFilter, NonEmbeddedServletContainerFactory {\n+public class ErrorPageFilter extends AbstractConfigurableEmbeddedServletContainer\n+\t\timplements Filter, NonEmbeddedServletContainerFactory {\n \n \tprivate static Log logger = LogFactory.getLog(ErrorPageFilter.class);\n ",
    "output": "Make ErrorPageFilter public\nChange the visibility of ErrorPageFilter to public to fix\nIllegalAccessException errors on certain servlet containers."
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessorTests.java b/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessorTests.java\n--- a/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessorTests.java\n+++ b/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessorTests.java\n@@ -145,6 +145,7 @@ public void hierarchicalProperties() throws Exception {\n \t\t\t\t.fromSource(HierarchicalProperties.class));\n \t}\n \n+\t@SuppressWarnings(\"deprecation\")\n \t@Test\n \tpublic void deprecatedProperties() throws Exception {\n \t\tConfigurationMetadata metadata = compile(DeprecatedProperties.class);",
    "output": "Remove warnings for expected deprecation usage"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/amqp/RabbitProperties.java\n@@ -61,8 +61,6 @@ public class RabbitProperties {\n \t */\n \tprivate String addresses;\n \n-\tprivate boolean dynamic = true;\n-\n \tpublic String getHost() {\n \t\tif (this.addresses == null) {\n \t\t\treturn this.host;\n@@ -149,14 +147,6 @@ public void setPassword(String password) {\n \t\tthis.password = password;\n \t}\n \n-\tpublic boolean isDynamic() {\n-\t\treturn this.dynamic;\n-\t}\n-\n-\tpublic void setDynamic(boolean dynamic) {\n-\t\tthis.dynamic = dynamic;\n-\t}\n-\n \tpublic String getVirtualHost() {\n \t\treturn this.virtualHost;\n \t}",
    "output": "Remove unused RabbitMQ dynamic property flag"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java\n@@ -165,7 +165,8 @@ public EnvironmentMvcEndpoint environmentMvcEndpoint(EnvironmentEndpoint delegat\n \t@ConditionalOnProperty(prefix = \"endpoints.health\", name = \"enabled\", matchIfMissing = true)\n \tpublic HealthMvcEndpoint healthMvcEndpoint(HealthEndpoint delegate) {\n \t\tHealthMvcEndpoint healthMvcEndpoint = new HealthMvcEndpoint(delegate);\n-\t\tboolean secure = this.managementServerProperties.getSecurity().isEnabled()\n+\t\tboolean secure = this.managementServerProperties.getSecurity() != null\n+\t\t\t\t&& this.managementServerProperties.getSecurity().isEnabled()\n \t\t\t\t&& ClassUtils.isPresent(\n \t\t\t\t\t\t\"org.springframework.security.core.Authentication\", null);\n \t\tdelegate.setSensitive(secure);",
    "output": "Check if managementServerProperties.getSecurity() is not null\nbefore checking isEnabled(). It is explicitly constructed as null\nin ManagementServerProperties to prevent class not found errors\nat runtime when Security is not on the classpath.\n,"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/EmbeddedServletContainerAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/EmbeddedServletContainerAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/EmbeddedServletContainerAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/EmbeddedServletContainerAutoConfiguration.java\n@@ -48,6 +48,7 @@\n import org.springframework.core.annotation.Order;\n import org.springframework.core.type.AnnotationMetadata;\n import org.springframework.util.ObjectUtils;\n+import org.xnio.SslClientAuthMode;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for an embedded servlet containers.\n@@ -96,7 +97,7 @@ public JettyEmbeddedServletContainerFactory jettyEmbeddedServletContainerFactory\n \t * Nested configuration if Undertow is being used.\n \t */\n \t@Configuration\n-\t@ConditionalOnClass({ Servlet.class, Undertow.class })\n+\t@ConditionalOnClass({ Servlet.class, Undertow.class, SslClientAuthMode.class })\n \t@ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)\n \tpublic static class EmbeddedUndertow {\n ",
    "output": "Disable Undertow auto-config if required XNIO classes are unavailable"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-jersey/src/main/java/sample/jersey/Endpoint.java b/spring-boot-samples/spring-boot-sample-jersey/src/main/java/sample/jersey/Endpoint.java\n--- a/spring-boot-samples/spring-boot-sample-jersey/src/main/java/sample/jersey/Endpoint.java\n+++ b/spring-boot-samples/spring-boot-sample-jersey/src/main/java/sample/jersey/Endpoint.java\n@@ -26,9 +26,13 @@\n @Path(\"/hello\")\n public class Endpoint {\n \n-\t@Autowired\n \tprivate Service service;\n \n+\t@Autowired\n+\tpublic Endpoint(Service service) {\n+\t\tthis.service = service;\n+\t}\n+\n \t@GET\n \tpublic String message() {\n \t\treturn \"Hello \" + this.service.message();",
    "output": "Use constructor injection for Jersey sample"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/metadata/JsonMarshallerTests.java b/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/metadata/JsonMarshallerTests.java\n--- a/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/metadata/JsonMarshallerTests.java\n+++ b/spring-boot-tools/spring-boot-configuration-processor/src/test/java/org/springframework/boot/configurationprocessor/metadata/JsonMarshallerTests.java\n@@ -49,7 +49,6 @@ public void marshallAndUnmarshal() throws IOException {\n \t\tByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n \t\tJsonMarshaller marshaller = new JsonMarshaller();\n \t\tmarshaller.write(metadata, outputStream);\n-\t\tSystem.out.println(outputStream);\n \t\tConfigurationMetadata read = marshaller.read(new ByteArrayInputStream(\n \t\t\t\toutputStream.toByteArray()));\n \t\tassertThat(read,",
    "output": "Remove useless System.out.println"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/ManagementErrorEndpoint.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/ManagementErrorEndpoint.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/ManagementErrorEndpoint.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/mvc/ManagementErrorEndpoint.java\n@@ -21,7 +21,6 @@\n import org.springframework.boot.actuate.endpoint.Endpoint;\n import org.springframework.boot.autoconfigure.web.ErrorAttributes;\n import org.springframework.boot.autoconfigure.web.ErrorController;\n-import org.springframework.boot.context.properties.ConfigurationProperties;\n import org.springframework.util.Assert;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.ResponseBody;\n@@ -34,7 +33,6 @@\n  *\n  * @author Dave Syer\n  */\n-@ConfigurationProperties(prefix = \"error\")\n public class ManagementErrorEndpoint implements MvcEndpoint {\n \n \tprivate final ErrorAttributes errorAttributes;",
    "output": "Remove useless @ConfigurationProperties"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/MessageSourceAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/MessageSourceAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/MessageSourceAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/MessageSourceAutoConfiguration.java\n@@ -137,7 +137,7 @@ private Resource[] getResources(ClassLoader classLoader, String name) {\n \t\t\t\treturn new SkipPatternPathMatchingResourcePatternResolver(classLoader)\n \t\t\t\t\t\t.getResources(\"classpath*:\" + name + \"*.properties\");\n \t\t\t}\n-\t\t\tcatch (IOException ex) {\n+\t\t\tcatch (Exception ex) {\n \t\t\t\treturn NO_RESOURCES;\n \t\t\t}\n \t\t}\n@@ -153,9 +153,14 @@ private static class SkipPatternPathMatchingResourcePatternResolver extends\n \n \t\tprivate static final ClassLoader ROOT_CLASSLOADER;\n \t\tstatic {\n-\t\t\tClassLoader classLoader = ClassLoader.getSystemClassLoader();\n-\t\t\twhile (classLoader.getParent() != null) {\n-\t\t\t\tclassLoader = classLoader.getParent();\n+\t\t\tClassLoader classLoader = null;\n+\t\t\ttry {\n+\t\t\t\tclassLoader = ClassLoader.getSystemClassLoader();\n+\t\t\t\twhile (classLoader.getParent() != null) {\n+\t\t\t\t\tclassLoader = classLoader.getParent();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tcatch (Throwable e) {\n \t\t\t}\n \t\t\tROOT_CLASSLOADER = classLoader;\n \t\t}",
    "output": "Be defensive about classloader in MessageSourceAutoConfiguration"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java\n--- a/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java\n@@ -168,11 +168,13 @@ private void cleanLogTempProperty() {\n \t\t// Logback won't read backslashes so add a clean path for it to use\n \t\tif (!StringUtils.hasLength(System.getProperty(\"LOG_TEMP\"))) {\n \t\t\tString path = System.getProperty(\"java.io.tmpdir\");\n-\t\t\tpath = StringUtils.cleanPath(path);\n-\t\t\tif (path.endsWith(\"/\")) {\n-\t\t\t\tpath = path.substring(0, path.length() - 1);\n-\t\t\t}\n-\t\t\tSystem.setProperty(\"LOG_TEMP\", path);\n+            if (path!=null) {\n+\t\t\t\tpath = StringUtils.cleanPath(path);\n+\t\t\t\tif (path.endsWith(\"/\")) {\n+\t\t\t\t\tpath = path.substring(0, path.length() - 1);\n+\t\t\t\t}\n+\t\t\t\tSystem.setProperty(\"LOG_TEMP\", path);\n+            }\n \t\t}\n \t}\n ",
    "output": "Ensure java.io.tmpdir is available before using it\nSome environments do not have a tmpdir so it can be null."
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpoint.java\n@@ -302,8 +302,8 @@ public List<BeanPropertyWriter> changeProperties(SerializationConfig config,\n \t\t}\n \n \t\tprivate boolean isReadable(BeanDescription beanDesc, BeanPropertyWriter writer) {\n-\t\t\tString parenType = beanDesc.getType().getTypeName();\n-\t\t\tString type = writer.getType().getTypeName();\n+\t\t\tString parenType = beanDesc.getType().getRawClass().getName();\n+\t\t\tString type = writer.getPropertyType().getName();\n \t\t\tAnnotatedMethod setter = beanDesc.findMethod(\n \t\t\t\t\t\"set\" + StringUtils.capitalize(writer.getName()),\n \t\t\t\t\tnew Class<?>[] { writer.getPropertyType() });",
    "output": "Fix for Java < 1.8\nUses raw class instead of Java Type API (which has a\ndefault method in 1.8, unavailble in 1.7)."
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpointSerializationTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpointSerializationTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpointSerializationTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/endpoint/ConfigurationPropertiesReportEndpointSerializationTests.java\n@@ -166,7 +166,7 @@ public void testEmptyMapIsNotAdded() throws Exception {\n \t\tMap<String, Object> map = (Map<String, Object>) nestedProperties\n \t\t\t\t.get(\"properties\");\n \t\tassertNotNull(map);\n-\t\tassertEquals(2, map.size());\n+\t\tassertEquals(3, map.size());\n \t\tassertEquals(null, (map.get(\"map\")));\n \t}\n \n@@ -206,7 +206,8 @@ public void testMapWithMetadata() throws Exception {\n \t\tMap<String, Object> map = (Map<String, Object>) nestedProperties\n \t\t\t\t.get(\"properties\");\n \t\tassertNotNull(map);\n-\t\tassertEquals(2, map.size());\n+\t\t// Only one property is mapped in metadata so the others are ignored\n+\t\tassertEquals(1, map.size());\n \t\tassertEquals(\"foo\", ((Map<String, Object>) map.get(\"map\")).get(\"name\"));\n \t}\n ",
    "output": "Fix /configprops tests"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java\n@@ -391,7 +391,7 @@ private PropertySource<?> loadIntoGroup(String identifier, String location,\n \t\t\tmsg.append(propertySource == null ? \"Skipped \" : \"Loaded \");\n \t\t\tmsg.append(\"config file \");\n \t\t\tmsg.append(\"'\" + location + \"' \");\n-\t\t\tmsg.append(StringUtils.hasLength(profile) ? \"for profile \" : \"\");\n+\t\t\tmsg.append(StringUtils.hasLength(profile) ? \"for profile \" + profile : \"\");\n \t\t\tmsg.append(resource == null || !resource.exists() ? \"resource not found\" : \"\");\n \t\t\tthis.debug.add(msg);\n ",
    "output": "Add profile to ConfigFileApplicationListener log"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jackson/JacksonAutoConfiguration.java\n@@ -90,6 +90,9 @@ public ObjectMapper jacksonObjectMapper() {\n \t\t\t\tobjectMapper.configure(SerializationFeature.ORDER_MAP_ENTRIES_BY_KEYS,\n \t\t\t\t\t\ttrue);\n \t\t\t}\n+\t\t\tif (this.properties.isJsonPrettyPrint()) {\n+\t\t\t\tobjectMapper.configure(SerializationFeature.INDENT_OUTPUT, true);\n+\t\t\t}\n \t\t\treturn objectMapper;\n \t\t}\n ",
    "output": "Upgrade JackonAutoConfiguration to apply all http.mappers properties Previously, only the http.mappers.json-sort-keys property was applied by JacksonAutoConfiguration. This commit updates it to also apply the http.mappers.json-pretty-print property as well."
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-maven-plugin/src/test/java/org/springframework/boot/maven/Verify.java b/spring-boot-tools/spring-boot-maven-plugin/src/test/java/org/springframework/boot/maven/Verify.java\n--- a/spring-boot-tools/spring-boot-maven-plugin/src/test/java/org/springframework/boot/maven/Verify.java\n+++ b/spring-boot-tools/spring-boot-maven-plugin/src/test/java/org/springframework/boot/maven/Verify.java\n@@ -87,15 +87,25 @@ public void assertHasNoEntryNameStartingWith(String entry) {\n \t\t\t}\n \t\t}\n \n-\t\tpublic boolean hasNonUnpackEntry(String entry) {\n-\t\t\treturn !hasUnpackEntry(entry);\n+\t\tpublic boolean hasNonUnpackEntry(String entryName) {\n+\t\t\treturn !hasUnpackEntry(entryName);\n \t\t}\n \n-\t\tpublic boolean hasUnpackEntry(String entry) {\n-\t\t\tString comment = this.content.get(entry).getComment();\n+\t\tpublic boolean hasUnpackEntry(String entryName) {\n+\t\t\tString comment = getEntryStartingWith(entryName).getComment();\n \t\t\treturn comment != null && comment.startsWith(\"UNPACK:\");\n \t\t}\n \n+\t\tprivate ZipEntry getEntryStartingWith(String entryName) {\n+\t\t\tfor (Map.Entry<String, ZipEntry> entry : this.content.entrySet()) {\n+\t\t\t\tif (entry.getKey().startsWith(entryName)) {\n+\t\t\t\t\treturn entry.getValue();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tthrow new IllegalStateException(\"Unable to find entry starting with \"\n+\t\t\t\t\t+ entryName);\n+\t\t}\n+\n \t\tpublic boolean hasEntry(String entry) {\n \t\t\treturn this.content.containsKey(entry);\n \t\t}",
    "output": "Sync up versions used in Maven integration tests"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/test/IntegrationTestPropertiesListener.java b/spring-boot/src/main/java/org/springframework/boot/test/IntegrationTestPropertiesListener.java\n--- a/spring-boot/src/main/java/org/springframework/boot/test/IntegrationTestPropertiesListener.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/test/IntegrationTestPropertiesListener.java\n@@ -62,16 +62,24 @@ private void addPropertySourceProperties(TestContext testContext, String[] prope\n \n \tprivate void addPropertySourcePropertiesUsingReflection(TestContext testContext,\n \t\t\tString[] properties) throws Exception {\n-\t\tif (properties.length == 0) {\n-\t\t\treturn;\n-\t\t}\n \t\tMergedContextConfiguration configuration = (MergedContextConfiguration) ReflectionTestUtils\n \t\t\t\t.getField(testContext, \"mergedContextConfiguration\");\n \t\tSet<String> merged = new LinkedHashSet<String>((Arrays.asList(configuration\n \t\t\t\t.getPropertySourceProperties())));\n \t\tmerged.addAll(Arrays.asList(properties));\n+\t\taddIntegrationTestProperty(merged);\n \t\tReflectionTestUtils.setField(configuration, \"propertySourceProperties\",\n \t\t\t\tmerged.toArray(new String[merged.size()]));\n \t}\n \n+\t/**\n+\t * Add an \"IntegrationTest\" property to ensure that there is something to\n+\t * differentiate regular tests and {@code @IntegrationTest} tests. Without this\n+\t * property a cached context could be returned that hadn't started the embedded\n+\t * servlet container.\n+\t * @param propertySourceProperties the property source properties\n+\t */\n+\tprivate void addIntegrationTestProperty(Set<String> propertySourceProperties) {\n+\t\tpropertySourceProperties.add(IntegrationTest.class.getName() + \"=true\");\n+\t}\n }",
    "output": "Fix @IntegrationTest context caching\nAdd an additional \"IntegrationTest\" property to @IntegrationTests\nto ensure that they get a different MergedContextConfiguration which\nis used as a context cache key."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java\n@@ -90,11 +90,11 @@ protected Map<String, Object> getVendorProperties() {\n \tprotected void customizeVendorProperties(Map<String, Object> vendorProperties) {\n \t\tsuper.customizeVendorProperties(vendorProperties);\n \t\tif (!vendorProperties.containsKey(JTA_PLATFORM)) {\n-\t\t\tdunno(vendorProperties);\n+\t\t\tconfigureJtaPlatform(vendorProperties);\n \t\t}\n \t}\n \n-\tprivate void dunno(Map<String, Object> vendorProperties) throws LinkageError {\n+\tprivate void configureJtaPlatform(Map<String, Object> vendorProperties) throws LinkageError {\n \t\tJtaTransactionManager jtaTransactionManager = getJtaTransactionManager();\n \t\tif (jtaTransactionManager != null) {\n \t\t\tvendorProperties.put(JTA_PLATFORM, new SpringJtaPlatform(",
    "output": "Polish method name in HibernateJpaAutoConfiguration"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-data-mongodb/src/test/java/sample/data/mongo/SampleMongoApplicationTests.java b/spring-boot-samples/spring-boot-sample-data-mongodb/src/test/java/sample/data/mongo/SampleMongoApplicationTests.java\n--- a/spring-boot-samples/spring-boot-sample-data-mongodb/src/test/java/sample/data/mongo/SampleMongoApplicationTests.java\n+++ b/spring-boot-samples/spring-boot-sample-data-mongodb/src/test/java/sample/data/mongo/SampleMongoApplicationTests.java\n@@ -16,6 +16,8 @@\n \n package sample.data.mongo;\n \n+import java.util.regex.Pattern;\n+\n import org.junit.Rule;\n import org.junit.Test;\n import org.springframework.boot.test.OutputCapture;\n@@ -33,6 +35,9 @@\n  */\n public class SampleMongoApplicationTests {\n \n+\tprivate static final Pattern TIMEOUT_MESSAGE_PATTERN = Pattern\n+\t\t\t.compile(\"Timed out after [0-9]+ ms while waiting for a server.*\");\n+\n \t@Rule\n \tpublic OutputCapture outputCapture = new OutputCapture();\n \n@@ -61,7 +66,7 @@ private boolean serverNotRunning(IllegalStateException ex) {\n \t\t\tif (root.getMessage().contains(\"Unable to connect to any server\")) {\n \t\t\t\treturn true;\n \t\t\t}\n-\t\t\tif (root.getMessage().contains(\"Timed out while waiting for a server\")) {\n+\t\t\tif (TIMEOUT_MESSAGE_PATTERN.matcher(root.getMessage()).matches()) {\n \t\t\t\treturn true;\n \t\t\t}\n \t\t}",
    "output": "Upgrade to Mongo Java Driver 2.12.4\nThe exception message for a connection timeout has been updated to\ninclude the timeout period. The tests for the sample have been updated\naccordingly."
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/TypeElementMembers.java b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/TypeElementMembers.java\n--- a/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/TypeElementMembers.java\n+++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/TypeElementMembers.java\n@@ -95,8 +95,9 @@ private boolean isSetter(ExecutableElement method) {\n \t}\n \n \tprivate boolean isSetterReturnType(ExecutableElement method) {\n-\t\treturn (TypeKind.VOID == method.getReturnType().getKind() || method\n-\t\t\t\t.getEnclosingElement().asType().equals(method.getReturnType()));\n+\t\treturn (TypeKind.VOID == method.getReturnType().getKind() || this.env\n+\t\t\t\t.getTypeUtils().isSameType(method.getEnclosingElement().asType(),\n+\t\t\t\t\t\tmethod.getReturnType()));\n \t}\n \n \tprivate String getAccessorName(String methodName) {",
    "output": "Fix annotation processor builder setter detection\nUpdate TypeElementMembers to correctly detect builder style setters.\nThe previous logic could fail because of the crazy way that TypeMirror\nimplements its equals() method."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaBaseConfiguration.java\n@@ -137,10 +137,6 @@ protected String[] getPackagesToScan() {\n \t\treturn NO_PACKAGES;\n \t}\n \n-\tprotected void configure(\n-\t\t\tLocalContainerEntityManagerFactoryBean entityManagerFactoryBean) {\n-\t}\n-\n \t/**\n \t * @return the jtaTransactionManager or {@code null}\n \t */",
    "output": "Remove JpaBaseConfiguration.configure() method\nRemove the JpaBaseConfiguration.configure() method since it is no\nlonger called."
  },
  {
    "input": "diff --git a/spring-boot-integration-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java b/spring-boot-integration-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java\n--- a/spring-boot-integration-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java\n+++ b/spring-boot-integration-tests/src/test/java/org/springframework/boot/gradle/WarPackagingTests.java\n@@ -48,7 +48,8 @@ public class WarPackagingTests {\n \n \tprivate static final Set<String> TOMCAT_EXPECTED_IN_WEB_INF_LIB_PROVIDED = new HashSet<String>(\n \t\t\tArrays.asList(\"spring-boot-starter-tomcat-\", \"tomcat-embed-core-\",\n-\t\t\t\t\t\"tomcat-embed-el-\", \"tomcat-embed-logging-juli-\"));\n+\t\t\t\t\t\"tomcat-embed-el-\", \"tomcat-embed-logging-juli-\",\n+\t\t\t\t\t\"tomcat-embed-websocket-\"));\n \n \tprivate static final Set<String> JETTY_EXPECTED_IN_WEB_INF_LIB_PROVIDED = new HashSet<String>(\n \t\t\tArrays.asList(\"spring-boot-starter-jetty-\", \"jetty-util-\", \"jetty-xml-\",",
    "output": "Move tomcat websocket dependency\nRelocate tomcat-embed-websocket from spring-boot-starter-websocket\nto spring-boot-starter-tomcat."
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java\n--- a/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java\n+++ b/spring-boot-tools/spring-boot-configuration-processor/src/main/java/org/springframework/boot/configurationprocessor/ConfigurationMetadataAnnotationProcessor.java\n@@ -275,6 +275,10 @@ private ConfigurationMetadata mergeManualMetadata(ConfigurationMetadata metadata\n \t\t\tFileObject manualMetadata = this.processingEnv.getFiler().getResource(\n \t\t\t\t\tStandardLocation.CLASS_PATH, \"\",\n \t\t\t\t\t\"META-INF/additional-spring-configuration-metadata.json\");\n+\t\t\tif (!\"file\".equals(manualMetadata.toUri().getScheme())) {\n+\t\t\t\t// We only wan't local files, not any classpath jars\n+\t\t\t\treturn metadata;\n+\t\t\t}\n \t\t\tInputStream inputStream = manualMetadata.openInputStream();\n \t\t\ttry {\n \t\t\t\tConfigurationMetadata merged = new ConfigurationMetadata(metadata);",
    "output": "Protect against transitive additional meta-data\nUpdate ConfigurationMetadataAnnotationProcessor to ensure that only\nlocal `additional-spring-configuration-metadata.json` files are merged\nwith the final output."
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactory.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactory.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactory.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactory.java\n@@ -66,7 +66,7 @@ protected final File getValidDocumentRoot() {\n \t\tfile = file != null ? file : getExplodedWarFileDocumentRoot();\n \t\t// Or maybe there is a document root in a well-known location\n \t\tfile = file != null ? file : getCommonDocumentRoot();\n-\t\tif (file == null && this.logger.isWarnEnabled()) {\n+\t\tif (file == null && this.logger.isDebugEnabled()) {\n \t\t\tthis.logger.debug(\"None of the document roots \"\n \t\t\t\t\t+ Arrays.asList(COMMON_DOC_ROOTS)\n \t\t\t\t\t+ \" point to a directory and will be ignored.\");",
    "output": "Fix debug logging\nFix an issue where debug logging never occurred because it was guarded\nincorrectly using isWarnEnabled()."
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/env/PropertiesPropertySourceLoader.java b/spring-boot/src/main/java/org/springframework/boot/env/PropertiesPropertySourceLoader.java\n--- a/spring-boot/src/main/java/org/springframework/boot/env/PropertiesPropertySourceLoader.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/env/PropertiesPropertySourceLoader.java\n@@ -34,7 +34,7 @@ public class PropertiesPropertySourceLoader implements PropertySourceLoader {\n \n \t@Override\n \tpublic String[] getFileExtensions() {\n-\t\treturn new String[] { \"properties\" };\n+\t\treturn new String[] { \"properties\", \"xml\" };\n \t}\n \n \t@Override\n\ndiff --git a/spring-boot/src/test/java/org/springframework/boot/env/PropertySourcesLoaderTests.java b/spring-boot/src/test/java/org/springframework/boot/env/PropertySourcesLoaderTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/env/PropertySourcesLoaderTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/env/PropertySourcesLoaderTests.java\n@@ -34,6 +34,7 @@ public void fileExtensions() {\n \t\tassertTrue(this.loader.getAllFileExtensions().contains(\"yml\"));\n \t\tassertTrue(this.loader.getAllFileExtensions().contains(\"yaml\"));\n \t\tassertTrue(this.loader.getAllFileExtensions().contains(\"properties\"));\n+\t\tassertTrue(this.loader.getAllFileExtensions().contains(\"xml\"));\n \t}\n \n }",
    "output": "Add XML support to PropertiesPropertySourceLoader"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java\n@@ -86,12 +86,10 @@ public class ConfigurationPropertiesBindingPostProcessor implements BeanPostProc\n \n \tprivate ConversionService conversionService;\n \n-\tprivate final DefaultConversionService defaultConversionService = new DefaultConversionService();\n+\tprivate DefaultConversionService defaultConversionService;\n \n \tprivate BeanFactory beanFactory;\n \n-\tprivate final boolean initialized = false;\n-\n \tprivate ResourceLoader resourceLoader = new DefaultResourceLoader();\n \n \tprivate Environment environment = new StandardEnvironment();\n@@ -341,11 +339,13 @@ private PropertySources loadPropertySources(String[] locations,\n \t}\n \n \tprivate ConversionService getDefaultConversionService() {\n-\t\tif (!this.initialized) {\n+\t\tif (this.defaultConversionService == null) {\n+\t\t\tDefaultConversionService conversionService = new DefaultConversionService();\n \t\t\tfor (Converter<?, ?> converter : ((ListableBeanFactory) this.beanFactory)\n \t\t\t\t\t.getBeansOfType(Converter.class, false, false).values()) {\n-\t\t\t\tthis.defaultConversionService.addConverter(converter);\n+\t\t\t\tconversionService.addConverter(converter);\n \t\t\t}\n+\t\t\tthis.defaultConversionService = conversionService;\n \t\t}\n \t\treturn this.defaultConversionService;\n \t}",
    "output": "Guard default conversion service creation\nUpdate ConfigurationPropertiesBindingPostProcessor to ensure that\nthe defaultConversionService is only created once."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java\n@@ -148,6 +148,7 @@ public NamedParameterJdbcTemplate namedParameterJdbcTemplate() {\n \t@ConditionalOnProperty(prefix = \"spring.datasource\", name = \"jmx-enabled\", havingValue = \"true\", matchIfMissing = true)\n \t@ConditionalOnClass(name = \"org.apache.tomcat.jdbc.pool.DataSourceProxy\")\n \t@Conditional(DataSourceAutoConfiguration.DataSourceAvailableCondition.class)\n+\t@ConditionalOnMissingBean(name = \"dataSourceMBean\")\n \tprotected static class TomcatDataSourceJmxConfiguration {\n \n \t\t@Bean",
    "output": "Protect against duplicate datasource MBeans"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-data-rest/src/test/java/sample/data/jpa/SampleDataRestApplicationTests.java b/spring-boot-samples/spring-boot-sample-data-rest/src/test/java/sample/data/jpa/SampleDataRestApplicationTests.java\n--- a/spring-boot-samples/spring-boot-sample-data-rest/src/test/java/sample/data/jpa/SampleDataRestApplicationTests.java\n+++ b/spring-boot-samples/spring-boot-sample-data-rest/src/test/java/sample/data/jpa/SampleDataRestApplicationTests.java\n@@ -61,7 +61,7 @@ public void setUp() {\n \t@Test\n \tpublic void testHome() throws Exception {\n \n-\t\tthis.mvc.perform(get(\"/\")).andExpect(status().isOk())\n+\t\tthis.mvc.perform(get(\"/api\")).andExpect(status().isOk())\n \t\t\t\t.andExpect(content().string(containsString(\"hotels\")));\n \t}\n ",
    "output": "Upgrade to Spring Data Evans SR1"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfiguration.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfiguration.java\n@@ -81,7 +81,7 @@ public class ManagementSecurityAutoConfiguration {\n \n \t@Bean\n \t@ConditionalOnMissingBean({ IgnoredPathsWebSecurityConfigurerAdapter.class })\n-\tpublic WebSecurityConfigurer<WebSecurity> ignoredPathsWebSecurityConfigurerAdapter() {\n+\tpublic IgnoredPathsWebSecurityConfigurerAdapter ignoredPathsWebSecurityConfigurerAdapter() {\n \t\treturn new IgnoredPathsWebSecurityConfigurerAdapter();\n \t}\n ",
    "output": "Use more specific WebSecurityConfigurer @Bean type\nUpdate ManagementSecurityAutoConfiguration to return\nIgnoredPathsWebSecurityConfigurerAdapter rather than\nWebSecurityConfigurer<WebSecurity>."
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/reader/MetricRegistryMetricReader.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/reader/MetricRegistryMetricReader.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/reader/MetricRegistryMetricReader.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/reader/MetricRegistryMetricReader.java\n@@ -209,6 +209,11 @@ public Metric<?> next() {\n \t\t\tString name = iterator.next();\n \t\t\treturn MetricRegistryMetricReader.this.findOne(name);\n \t\t}\n+\t\t\n+\t\t@Override\n+\t\tpublic void remove() {\n+\t\t\tthrow new UnsupportedOperationException(\"You cannot remove from this iterator.\");\n+\t\t}\n \n \t}\n ",
    "output": "Add missing method for Java 1.7"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/SpringBootCondition.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/SpringBootCondition.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/SpringBootCondition.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/SpringBootCondition.java\n@@ -48,11 +48,11 @@ public final boolean matches(ConditionContext context, AnnotatedTypeMetadata met\n \t\t\treturn outcome.isMatch();\n \t\t}\n \t\tcatch (NoClassDefFoundError ex) {\n-\t\t\tthrow new IllegalStateException(\n-\t\t\t\t\t\"Could not evaluate condition owing to internal class not found. \"\n-\t\t\t\t\t\t\t+ \"This can happen if you are @ComponentScanning a \"\n-\t\t\t\t\t\t\t+ \"springframework package (e.g. if you put a @ComponentScan \"\n-\t\t\t\t\t\t\t+ \"in the default package by mistake)\", ex);\n+\t\t\tthrow new IllegalStateException(\"Could not evaluate condition on \"\n+\t\t\t\t\t+ classOrMethodName + \" due to internal class not found. \"\n+\t\t\t\t\t+ \"This can happen if you are @ComponentScanning a \"\n+\t\t\t\t\t+ \"springframework package (e.g. if you put a @ComponentScan \"\n+\t\t\t\t\t+ \"in the default package by mistake)\", ex);\n \t\t}\n \t\tcatch (RuntimeException ex) {\n \t\t\tthrow new IllegalStateException(\"Error processing condition on \"",
    "output": "Include condition's location (class or method name) in message"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/builder/SpringApplicationBuilderTests.java b/spring-boot/src/test/java/org/springframework/boot/builder/SpringApplicationBuilderTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/builder/SpringApplicationBuilderTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/builder/SpringApplicationBuilderTests.java\n@@ -184,7 +184,7 @@ public void parentFirstWithDifferentProfile() throws Exception {\n \t\t\t\tExampleConfig.class).profiles(\"node\").properties(\"transport=redis\")\n \t\t\t\t.child(ChildConfig.class).profiles(\"admin\").web(false);\n \t\tthis.context = application.run();\n-\t\tassertThat(this.context.getEnvironment().acceptsProfiles(\"node\"), is(true));\n+\t\tassertThat(this.context.getEnvironment().acceptsProfiles(\"node\", \"admin\"), is(true));\n \t\tassertThat(this.context.getParent().getEnvironment().acceptsProfiles(\"admin\"),\n \t\t\t\tis(false));\n \t}",
    "output": "Remove missing module from pom (thanks Eclipse)"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/builder/SpringApplicationBuilderTests.java b/spring-boot/src/test/java/org/springframework/boot/builder/SpringApplicationBuilderTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/builder/SpringApplicationBuilderTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/builder/SpringApplicationBuilderTests.java\n@@ -178,6 +178,17 @@ public void parentFirstCreationWithProfileAndDefaultArgs() throws Exception {\n \t\tassertThat(this.context.getEnvironment().getProperty(\"bar\"), is(equalTo(\"spam\")));\n \t}\n \n+\t@Test\n+\tpublic void parentFirstWithDifferentProfile() throws Exception {\n+\t\tSpringApplicationBuilder application = new SpringApplicationBuilder(\n+\t\t\t\tExampleConfig.class).profiles(\"node\").properties(\"transport=redis\")\n+\t\t\t\t.child(ChildConfig.class).profiles(\"admin\").web(false);\n+\t\tthis.context = application.run();\n+\t\tassertThat(this.context.getEnvironment().acceptsProfiles(\"node\"), is(true));\n+\t\tassertThat(this.context.getParent().getEnvironment().acceptsProfiles(\"admin\"),\n+\t\t\t\tis(false));\n+\t}\n+\n \t@Test\n \tpublic void parentContextIdentical() throws Exception {\n \t\tSpringApplicationBuilder application = new SpringApplicationBuilder(",
    "output": "Add test for"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfigurationTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/amqp/RabbitAutoConfigurationTests.java\n@@ -22,13 +22,13 @@\n import org.springframework.amqp.core.AmqpAdmin;\n import org.springframework.amqp.rabbit.annotation.EnableRabbit;\n import org.springframework.amqp.rabbit.config.RabbitListenerConfigUtils;\n-import org.springframework.amqp.rabbit.config.RabbitListenerContainerFactory;\n import org.springframework.amqp.rabbit.config.SimpleRabbitListenerContainerFactory;\n import org.springframework.amqp.rabbit.connection.CachingConnectionFactory;\n import org.springframework.amqp.rabbit.connection.ConnectionFactory;\n import org.springframework.amqp.rabbit.core.RabbitAdmin;\n import org.springframework.amqp.rabbit.core.RabbitMessagingTemplate;\n import org.springframework.amqp.rabbit.core.RabbitTemplate;\n+import org.springframework.amqp.rabbit.listener.RabbitListenerContainerFactory;\n import org.springframework.amqp.support.converter.MessageConverter;\n import org.springframework.beans.factory.NoSuchBeanDefinitionException;\n import org.springframework.boot.test.EnvironmentTestUtils;",
    "output": "Upgrade to Spring AMQP 1.4.0.RC1"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DefaultErrorAttributes.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DefaultErrorAttributes.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DefaultErrorAttributes.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/DefaultErrorAttributes.java\n@@ -75,7 +75,7 @@ public ModelAndView resolveException(HttpServletRequest request,\n \n \tprivate void storeErrorAttributes(HttpServletRequest request, Exception ex) {\n \t\trequest.setAttribute(ERROR_ATTRIBUTE, ex);\n-\t\t\n+\n \t}\n \n \t@Override\n@@ -121,9 +121,8 @@ private void addErrorDetails(Map<String, Object> errorAttributes,\n \t\t\t\taddStackTrace(errorAttributes, error);\n \t\t\t}\n \t\t}\n-\t\tif (error==null || errorAttributes.get(\"message\")==null) {\n-\t\t\tObject message = getAttribute(requestAttributes,\n-\t\t\t\t\t\"javax.servlet.error.message\");\n+\t\tObject message = getAttribute(requestAttributes, \"javax.servlet.error.message\");\n+\t\tif (message != null || errorAttributes.get(\"message\") == null) {\n \t\t\terrorAttributes.put(\"message\", message == null ? \"No message available\"\n \t\t\t\t\t: message);\n \t\t}",
    "output": "Re-arrange priority of error message"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/install/InstallCommand.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/install/InstallCommand.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/install/InstallCommand.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/install/InstallCommand.java\n@@ -49,19 +49,28 @@\n  */\n public class InstallCommand extends OptionParsingCommand {\n \n+\tprivate final String usageHelp;\n+\n \tpublic static Command install() {\n \t\treturn new InstallCommand(\"install\", \"Install dependencies to lib directory\",\n-\t\t\t\tnew InstallFileProcessorFactory());\n+\t\t\t\t\"[options] <coordinates>\", new InstallFileProcessorFactory());\n \t}\n \n \tpublic static Command uninstall() {\n \t\treturn new InstallCommand(\"uninstall\",\n-\t\t\t\t\"Uninstall dependencies from a lib directory\",\n+\t\t\t\t\"Uninstall dependencies from lib directory\", \"[options] <coordinates>\",\n \t\t\t\tnew UninstallFileProcessorFactory());\n \t}\n \n-\tprivate InstallCommand(String name, String description, FileProcessorFactory visitor) {\n+\tprivate InstallCommand(String name, String description, String usageHelp,\n+\t\t\tFileProcessorFactory visitor) {\n \t\tsuper(name, description, new InstallOptionHandler(visitor));\n+\t\tthis.usageHelp = usageHelp;\n+\t}\n+\n+\t@Override\n+\tpublic String getUsageHelp() {\n+\t\treturn this.usageHelp;\n \t}\n \n \tprivate static final class InstallOptionHandler extends CompilerOptionHandler {",
    "output": "Add option help to the CLI's install and uninstall commands"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java\n--- a/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java\n@@ -91,6 +91,7 @@ public class LoggingApplicationListener implements SmartApplicationListener {\n \t\tLOG_LEVEL_LOGGERS.add(LogLevel.TRACE, \"org.apache.catalina\");\n \t\tLOG_LEVEL_LOGGERS.add(LogLevel.TRACE, \"org.eclipse.jetty\");\n \t\tLOG_LEVEL_LOGGERS.add(LogLevel.TRACE, \"org.hibernate.tool.hbm2ddl\");\n+\t\tLOG_LEVEL_LOGGERS.add(LogLevel.DEBUG, \"org.hibernate.SQL\");\n \t}\n \n \tprivate static Class<?>[] EVENT_TYPES = { ApplicationStartedEvent.class,",
    "output": "Add org.hibernate.SQL to the --debug logger levels\nI think this  (it seems unreasonable to want to log the DDL\neven if it is not being executed)"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/install/InstallCommand.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/install/InstallCommand.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/install/InstallCommand.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/install/InstallCommand.java\n@@ -140,6 +140,7 @@ private void processJars(List<URL> urlsToProcess) throws IOException {\n \n \t\t\tfor (URL url : urlsToProcess) {\n \t\t\t\tFile file = toFile(url);\n+\t\t\t\tLog.info(\"Processing: \" + file);\n \t\t\t\tif (file.getName().endsWith(\".jar\")) {\n \t\t\t\t\tprocessor.processFile(file);\n \t\t\t\t}\n@@ -181,7 +182,8 @@ private String createSources(List<String> args) throws IOException {\n \t\t\tfinally {\n \t\t\t\tstream.close();\n \t\t\t}\n-\t\t\treturn file.getAbsolutePath();\n+\t\t\t// Windows paths get tricky unless you work with URI\n+\t\t\treturn file.getAbsoluteFile().toURI().toString();\n \t\t}\n \n \t\tprivate static File getDefaultLibDirectory() {",
    "output": "Fix install command on Windows\nWindows absolute paths cannot be processed by the CLI compiler, so the install\ncommand wasn't working on Windows. This change converts ths path to a URI first\nand then it works as a Spring Resource."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsAnnotationDrivenConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsAnnotationDrivenConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsAnnotationDrivenConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsAnnotationDrivenConfiguration.java\n@@ -24,9 +24,7 @@\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n-import org.springframework.context.annotation.Import;\n import org.springframework.jms.annotation.EnableJms;\n-import org.springframework.jms.annotation.JmsBootstrapConfiguration;\n import org.springframework.jms.config.DefaultJmsListenerContainerFactory;\n import org.springframework.jms.config.JmsListenerConfigUtils;\n import org.springframework.jms.support.destination.DestinationResolver;\n@@ -42,7 +40,6 @@\n  */\n @Configuration\n @ConditionalOnClass(EnableJms.class)\n-@Import(JmsBootstrapConfiguration.class)\n class JmsAnnotationDrivenConfiguration {\n \n \t@Autowired(required = false)",
    "output": "Don't import JmsBootstrapConfiguration directly\nRemove the direct unconditional JmsBootstrapConfiguration @Import from\nJmsAnnotationDrivenConfiguration in favor of the nested\nEnableJmsConfiguration class."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/JndiDataSourceAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/JndiDataSourceAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/JndiDataSourceAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/JndiDataSourceAutoConfiguration.java\n@@ -44,11 +44,11 @@\n @EnableConfigurationProperties(DataSourceProperties.class)\n public class JndiDataSourceAutoConfiguration {\n \n-\t@Bean\n+\t@Bean(destroyMethod = \"\")\n \t@ConditionalOnMissingBean\n \tpublic DataSource dataSource(DataSourceProperties properties) {\n \t\tJndiDataSourceLookup dataSourceLookup = new JndiDataSourceLookup();\n \t\treturn dataSourceLookup.getDataSource(properties.getJndiName());\n \t}\n \n-}\n\\ No newline at end of file\n+}",
    "output": "Don't call close() on JNDI DataSource\nUpdate the JNDI auto-configured DataSource so that the close method\nisn't called when the ApplicationContext is closed."
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-web-ui/src/main/java/sample/ui/SampleWebUiApplication.java b/spring-boot-samples/spring-boot-sample-web-ui/src/main/java/sample/ui/SampleWebUiApplication.java\n--- a/spring-boot-samples/spring-boot-sample-web-ui/src/main/java/sample/ui/SampleWebUiApplication.java\n+++ b/spring-boot-samples/spring-boot-sample-web-ui/src/main/java/sample/ui/SampleWebUiApplication.java\n@@ -30,7 +30,7 @@ public class SampleWebUiApplication {\n \n \t@Bean\n \tpublic MessageRepository messageRepository() {\n-\t\treturn new InMemoryMessageRespository();\n+\t\treturn new InMemoryMessageRepository();\n \t}\n \n \t@Bean",
    "output": "Fix the rest of the typo InMemoryRepository's name"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-web-ui/src/main/java/sample/ui/InMemoryMessageRepository.java b/spring-boot-samples/spring-boot-sample-web-ui/src/main/java/sample/ui/InMemoryMessageRepository.java\n--- a/spring-boot-samples/spring-boot-sample-web-ui/src/main/java/sample/ui/InMemoryMessageRepository.java\n+++ b/spring-boot-samples/spring-boot-sample-web-ui/src/main/java/sample/ui/InMemoryMessageRepository.java\n@@ -23,7 +23,7 @@\n /**\n  * @author Dave Syer\n  */\n-public class InMemoryMessageRespository implements MessageRepository {\n+public class InMemoryMessageRepository implements MessageRepository {\n \n \tprivate static AtomicLong counter = new AtomicLong();\n ",
    "output": "Fix typo: InMemoryMessageRespository -> InMemoryMessageRepository"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-jersey1/src/main/java/sample/jersey1/SampleJersey1Application.java b/spring-boot-samples/spring-boot-sample-jersey1/src/main/java/sample/jersey1/SampleJersey1Application.java\n--- a/spring-boot-samples/spring-boot-sample-jersey1/src/main/java/sample/jersey1/SampleJersey1Application.java\n+++ b/spring-boot-samples/spring-boot-sample-jersey1/src/main/java/sample/jersey1/SampleJersey1Application.java\n@@ -40,7 +40,7 @@ public TomcatEmbeddedServletContainerFactory tomcatEmbeddedServletContainerFacto\n     public FilterRegistrationBean jersey() {\n     \tFilterRegistrationBean bean = new FilterRegistrationBean();\n     \tbean.setFilter(new ServletContainer());\n-    \tbean.addInitParameter(\"com.sun.jersey.config.property.packages\", \"com.sun.jersey;demo\");\n+    \tbean.addInitParameter(\"com.sun.jersey.config.property.packages\", \"com.sun.jersey;sample.jersey1\");\n \t\treturn bean;\n     }\n     ",
    "output": "Fix Jersey1 integration test"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n--- a/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n@@ -330,7 +330,7 @@ public ConfigurableApplicationContext run(String... args) {\n \t\t\t}\n \t\t\treturn context;\n \t\t}\n-\t\tcatch (Exception ex) {\n+\t\tcatch (Throwable ex) {\n \t\t\ttry {\n \t\t\t\tfor (SpringApplicationRunListener runListener : runListeners) {\n \t\t\t\t\tfinishWithException(runListener, context, ex);\n@@ -696,7 +696,7 @@ protected void afterRefresh(ConfigurableApplicationContext context, String[] arg\n \t}\n \n \tprivate void finishWithException(SpringApplicationRunListener runListener,\n-\t\t\tConfigurableApplicationContext context, Exception exception) {\n+\t\t\tConfigurableApplicationContext context, Throwable exception) {\n \t\ttry {\n \t\t\trunListener.finished(context, exception);\n \t\t}",
    "output": "Catch Throwable instead of Exception in Spring Application\n...so that application startup that fails because of an Error (for\ninstance NoClassDefFoundError) won't be swallowed."
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java b/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java\n--- a/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java\n@@ -90,10 +90,16 @@ public void initialize(String configLocation) {\n \t\tAssert.notNull(configLocation, \"ConfigLocation must not be null\");\n \t\tString resolvedLocation = SystemPropertyUtils.resolvePlaceholders(configLocation);\n \t\tILoggerFactory factory = StaticLoggerBinder.getSingleton().getLoggerFactory();\n-\t\tAssert.isInstanceOf(LoggerContext.class, factory,\n-\t\t\t\t\"LoggerFactory is not a Logback LoggerContext but \"\n-\t\t\t\t\t\t+ \"Logback is on the classpath. Either remove Logback \"\n-\t\t\t\t\t\t+ \"or the competing implementation (\" + factory.getClass() + \")\");\n+\t\tAssert.isInstanceOf(\n+\t\t\t\tLoggerContext.class,\n+\t\t\t\tfactory,\n+\t\t\t\tString.format(\n+\t\t\t\t\t\t\"LoggerFactory is not a Logback LoggerContext but Logback is on \"\n+\t\t\t\t\t\t\t\t+ \"the classpath. Either remove Logback or the competing \"\n+\t\t\t\t\t\t\t\t+ \"implementation (%s loaded from %s).\",\n+\t\t\t\t\t\tfactory.getClass(), factory.getClass().getProtectionDomain()\n+\t\t\t\t\t\t\t\t.getCodeSource().getLocation()));\n+\n \t\tLoggerContext context = (LoggerContext) factory;\n \t\tcontext.stop();\n \t\tcontext.reset();",
    "output": "Include code source location in message for competing LoggerFactory impl\nTo make it easier to identify the source of the competing LoggerFactory\nimplementation, this commit updates the exception message to include\nthe code source location of the offending class."
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java\n--- a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java\n+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java\n@@ -375,8 +375,10 @@ public AsciiBytes apply(AsciiBytes name, JarEntryData entryData) {\n \tprivate JarFile createJarFileFromFileEntry(JarEntryData sourceEntry)\n \t\t\tthrows IOException {\n \t\tif (sourceEntry.getMethod() != ZipEntry.STORED) {\n-\t\t\tthrow new IllegalStateException(\"Unable to open nested compressed entry \"\n-\t\t\t\t\t+ sourceEntry.getName());\n+\t\t\tthrow new IllegalStateException(\"Unable to open nested entry '\"\n+\t\t\t\t\t+ sourceEntry.getName() + \"'. It has been compressed and nested \"\n+\t\t\t\t\t+ \"jar files must be stored without compression. Please check the \"\n+\t\t\t\t\t+ \"mechanism used to create your executable jar file\");\n \t\t}\n \t\treturn new JarFile(this.rootFile, this.pathFromRoot + \"!/\"\n \t\t\t\t+ sourceEntry.getName(), sourceEntry.getData());",
    "output": "Improve error message when JarFile encounters a compressed nested jar"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricFilterAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricFilterAutoConfiguration.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricFilterAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/MetricFilterAutoConfiguration.java\n@@ -119,6 +119,7 @@ private String fixSpecialCharacters(String value) {\n \t\t\tresult = result.replace(\"**\", \"-star-star-\");\n \t\t\tresult = result.replace(\"*\", \"-star-\");\n \t\t\tresult = result.replace(\"/-\", \"/\");\n+\t\t\tresult = result.replace(\"-/\", \"/\");\n \t\t\tif (result.endsWith(\"-\")) {\n \t\t\t\tresult = result.substring(0, result.length() - 1);\n \t\t\t}",
    "output": "Remove extra trailing '-' in metric name"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/repository/redis/RedisMetricRepository.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/repository/redis/RedisMetricRepository.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/repository/redis/RedisMetricRepository.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/repository/redis/RedisMetricRepository.java\n@@ -42,9 +42,9 @@\n  */\n public class RedisMetricRepository implements MetricRepository {\n \n-\tprivate static final String DEFAULT_METRICS_PREFIX = \"spring.metrics.\";\n+\tprivate static final String DEFAULT_METRICS_PREFIX = \"spring.metrics\";\n \n-\tprivate String prefix = DEFAULT_METRICS_PREFIX;\n+\tprivate String prefix = DEFAULT_METRICS_PREFIX  + \".\";\n \n \tprivate String key = \"keys.\" + DEFAULT_METRICS_PREFIX;\n ",
    "output": "Default prefix for redis keys doesn't need period"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cloud/CloudAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cloud/CloudAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cloud/CloudAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/cloud/CloudAutoConfiguration.java\n@@ -48,7 +48,7 @@\n @Configuration\n @Profile(\"cloud\")\n @Order(CloudAutoConfiguration.ORDER)\n-@ConditionalOnClass(Cloud.class)\n+@ConditionalOnClass(CloudScanConfiguration.class)\n @ConditionalOnMissingBean(Cloud.class)\n @ConditionalOnProperty(prefix = \"spring.cloud\", name = \"enabled\", havingValue = \"true\", matchIfMissing = true)\n @Import(CloudScanConfiguration.class)",
    "output": "Fix missing resource exception if spring-cloud not on classpath"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-data-rest/src/main/java/sample/data/jpa/service/CityRepository.java b/spring-boot-samples/spring-boot-sample-data-rest/src/main/java/sample/data/jpa/service/CityRepository.java\n--- a/spring-boot-samples/spring-boot-sample-data-rest/src/main/java/sample/data/jpa/service/CityRepository.java\n+++ b/spring-boot-samples/spring-boot-sample-data-rest/src/main/java/sample/data/jpa/service/CityRepository.java\n@@ -19,16 +19,19 @@\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.Pageable;\n import org.springframework.data.repository.PagingAndSortingRepository;\n+import org.springframework.data.repository.query.Param;\n import org.springframework.data.rest.core.annotation.RepositoryRestResource;\n \n import sample.data.jpa.domain.City;\n \n @RepositoryRestResource(collectionResourceRel = \"citys\", path = \"cities\")\n interface CityRepository extends PagingAndSortingRepository<City, Long> {\n \n-\tPage<City> findByNameContainingAndCountryContainingAllIgnoringCase(String name,\n-\t\t\tString country, Pageable pageable);\n+\tPage<City> findByNameContainingAndCountryContainingAllIgnoringCase(\n+\t\t\t@Param(\"name\") String name, @Param(\"country\") String country,\n+\t\t\tPageable pageable);\n \n-\tCity findByNameAndCountryAllIgnoringCase(String name, String country);\n+\tCity findByNameAndCountryAllIgnoringCase(@Param(\"name\") String name,\n+\t\t\t@Param(\"country\") String country);\n \n }",
    "output": "Add missing @Param annotations to CityRepository in Data REST sample\nWithout the @Param annotations, using either of the search URIs would\nresulted in a 400 response and an error describing the lack of @Param\nannotation."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/HttpMessageConvertersAutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/HttpMessageConvertersAutoConfigurationTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/HttpMessageConvertersAutoConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/HttpMessageConvertersAutoConfigurationTests.java\n@@ -63,7 +63,7 @@ public void customJacksonConverter() throws Exception {\n \tprotected static class JacksonConfig {\n \n \t\t@Bean\n-\t\tpublic MappingJackson2HttpMessageConverter jacksonMessaegConverter() {\n+\t\tpublic MappingJackson2HttpMessageConverter jacksonMessageConverter() {\n \t\t\tMappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();\n \t\t\tconverter.setObjectMapper(objectMapper());\n \t\t\treturn converter;",
    "output": "Fix typo in HttpMessageConverters auto-conf Tests"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfigurationTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfigurationTests.java\n@@ -140,6 +140,17 @@ public void createLayoutFromConfigClass() throws Exception {\n \t\tcontext.close();\n \t}\n \n+\t@Test\n+\tpublic void useDataDialect() throws Exception {\n+\t\tthis.context.register(ThymeleafAutoConfiguration.class,\n+\t\t\t\tPropertyPlaceholderAutoConfiguration.class);\n+\t\tthis.context.refresh();\n+\t\tTemplateEngine engine = this.context.getBean(TemplateEngine.class);\n+\t\tContext attrs = new Context(Locale.UK, Collections.singletonMap(\"foo\", \"bar\"));\n+\t\tString result = engine.process(\"data-dialect\", attrs);\n+\t\tassertEquals(\"<html><body data-foo=\\\"bar\\\"></body></html>\", result);\n+\t}\n+\n \t@Test\n \tpublic void renderTemplate() throws Exception {\n \t\tthis.context.register(ThymeleafAutoConfiguration.class,",
    "output": "Restore ThymeleafAutoConfiguration test\nRestore the test removed during the merge."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfigurationTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfigurationTests.java\n@@ -140,17 +140,6 @@ public void createLayoutFromConfigClass() throws Exception {\n \t\tcontext.close();\n \t}\n \n-\t@Test\n-\tpublic void useDataDialect() throws Exception {\n-\t\tthis.context.register(ThymeleafAutoConfiguration.class,\n-\t\t\t\tPropertyPlaceholderAutoConfiguration.class);\n-\t\tthis.context.refresh();\n-\t\tTemplateEngine engine = this.context.getBean(TemplateEngine.class);\n-\t\tContext attrs = new Context(Locale.UK, Collections.singletonMap(\"foo\", \"bar\"));\n-\t\tString result = engine.process(\"data-dialect\", attrs);\n-\t\tassertEquals(\"<html><body data-foo=\\\"bar\\\"></body></html>\", result);\n-\t}\n-\n \t@Test\n \tpublic void renderTemplate() throws Exception {\n \t\tthis.context.register(ThymeleafAutoConfiguration.class,",
    "output": "Fix failing ThymeleafAutoConfigurationTests\nRemove accidental addition of a 1.2 test."
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfiguration.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfiguration.java\n@@ -165,6 +165,7 @@ private String normalizePath(String errorPath) {\n \t@Configuration\n \t@ConditionalOnExpression(\"${management.security.enabled:true} && !${security.basic.enabled:true}\")\n \t@ConditionalOnMissingBean(WebSecurityConfiguration.class)\n+\t@ConditionalOnWebApplication\n \t@EnableWebSecurity\n \tprotected static class WebSecurityEnabler extends AuthenticationManagerConfiguration {\n \t}",
    "output": "Activate WebSecurityEnabler only for web applications\nDone in order to align with the rest of the configuration. Absent this\ncheck, the bean will be installed in non-web applications without the\ncorresponding dependencies, causing the bootstrap to fail."
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/test/AbstractConfigurationClassTests.java b/spring-boot/src/test/java/org/springframework/boot/test/AbstractConfigurationClassTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/test/AbstractConfigurationClassTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/test/AbstractConfigurationClassTests.java\n@@ -16,6 +16,7 @@\n \n package org.springframework.boot.test;\n \n+import java.io.File;\n import java.io.IOException;\n import java.util.HashSet;\n import java.util.Set;\n@@ -81,7 +82,8 @@ private Set<AnnotationMetadata> findConfigurationClasses() throws IOException {\n \t}\n \n \tprivate boolean isTestClass(Resource resource) throws IOException {\n-\t\treturn resource.getFile().getAbsolutePath().contains(\"target/test-classes\");\n+\t\treturn resource.getFile().getAbsolutePath()\n+\t\t\t\t.contains(\"target\" + File.separator + \"test-classes\");\n \t}\n \n \tprivate boolean isPublic(MethodMetadata methodMetadata) {",
    "output": "Fix logic for identifying test classes on Windows\nUse File.separator rather than hard-coding the use of ‘/‘"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java b/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java\n--- a/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java\n@@ -96,6 +96,7 @@ public void initialize(String configLocation) {\n \t\t\t\t\t\t+ \"or the competing implementation (\" + factory.getClass() + \")\");\n \t\tLoggerContext context = (LoggerContext) factory;\n \t\tcontext.stop();\n+\t\tcontext.reset();\n \t\ttry {\n \t\t\tURL url = ResourceUtils.getURL(resolvedLocation);\n \t\t\tnew ContextInitializer(context).configureByResource(url);",
    "output": "Call LoggerContext.reset() during logback init\nUpdate `LogbackLoggingSystem` to call the `reset()` method on the\n`LoggerContext` before initialization.\nThis will hopefully reset the context to prevent the same appenders\nfrom being accidentally added more than once."
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/AbstractConfigurableEmbeddedServletContainer.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/AbstractConfigurableEmbeddedServletContainer.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/AbstractConfigurableEmbeddedServletContainer.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/AbstractConfigurableEmbeddedServletContainer.java\n@@ -258,15 +258,6 @@ public void setJspServletClassName(String jspServletClassName) {\n \t\tthis.jspServletClassName = jspServletClassName;\n \t}\n \n-\t@Override\n-\tpublic void setSsl(Ssl ssl) {\n-\t\tthis.ssl = ssl;\n-\t}\n-\n-\tpublic Ssl getSsl() {\n-\t\treturn this.ssl;\n-\t}\n-\n \t/**\n \t * @return the JSP servlet class name\n \t */",
    "output": "Fix merge error"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfigurationTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfigurationTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfigurationTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/ManagementSecurityAutoConfigurationTests.java\n@@ -74,7 +74,7 @@ public void testWebConfiguration() throws Exception {\n \t\tthis.context.refresh();\n \t\tassertNotNull(this.context.getBean(AuthenticationManagerBuilder.class));\n \t\t// 6 for static resources, one for management endpoints and one for the rest\n-\t\tassertEquals(9, this.context.getBean(FilterChainProxy.class).getFilterChains()\n+\t\tassertEquals(8, this.context.getBean(FilterChainProxy.class).getFilterChains()\n \t\t\t\t.size());\n \t}\n \n@@ -144,7 +144,7 @@ public void testDisableBasicAuthOnApplicationPaths() throws Exception {\n \t\tthis.context.refresh();\n \t\t// Just the management endpoints (one filter) and ignores now plus the backup\n \t\t// filter on app endpoints\n-\t\tassertEquals(9, this.context.getBean(FilterChainProxy.class).getFilterChains()\n+\t\tassertEquals(8, this.context.getBean(FilterChainProxy.class).getFilterChains()\n \t\t\t\t.size());\n \t}\n ",
    "output": "Fix failing tests"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceTransactionManagerAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceTransactionManagerAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceTransactionManagerAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceTransactionManagerAutoConfiguration.java\n@@ -16,7 +16,6 @@\n \n package org.springframework.boot.autoconfigure.jdbc;\n \n-import javax.annotation.PostConstruct;\n import javax.sql.DataSource;\n \n import org.springframework.beans.factory.annotation.Autowired;\n@@ -62,10 +61,7 @@ public PlatformTransactionManager transactionManager() {\n \t@Configuration\n \t@EnableTransactionManagement\n \tprotected static class TransactionManagementConfiguration {\n-\t\t@PostConstruct\n-\t\tpublic void init() {\n-\t\t\tSystem.err.println(\"*************\");\n-\t\t}\n+\n \t}\n \n }",
    "output": "Remove inadvertently committed debug System.out"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java\n@@ -142,6 +142,7 @@ public LayoutDialect layoutDialect() {\n \tprotected static class DataAttributeDialectConfiguration {\n \n \t\t@Bean\n+\t\t@ConditionalOnMissingBean\n \t\tpublic DataAttributeDialect dialect() {\n \t\t\treturn new DataAttributeDialect();\n \t\t}\n@@ -153,6 +154,7 @@ public DataAttributeDialect dialect() {\n \tprotected static class ThymeleafSecurityDialectConfiguration {\n \n \t\t@Bean\n+\t\t@ConditionalOnMissingBean\n \t\tpublic SpringSecurityDialect securityDialect() {\n \t\t\treturn new SpringSecurityDialect();\n \t\t}",
    "output": "Add @ConditionalOnBean to Thymeleaf dialect beans"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoDataAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoDataAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoDataAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoDataAutoConfiguration.java\n@@ -21,9 +21,9 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.dao.DataAccessException;\n@@ -54,7 +54,7 @@\n  */\n @Configuration\n @ConditionalOnClass({ Mongo.class, MongoTemplate.class })\n-@ConditionalOnBean(MongoProperties.class)\n+@EnableConfigurationProperties(MongoProperties.class)\n @AutoConfigureAfter(MongoAutoConfiguration.class)\n public class MongoDataAutoConfiguration {\n ",
    "output": "Replace MongoProperties condition for spring-cloud\nReplace @ConditionalOnBean(MongoProperties.class) on\nMongoDataAutoConfiguration with @EnableConfigurationProperties since\nMongoAutoConfiguration will not be applied in a cloud environment."
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/DataSourcePublicMetrics.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/DataSourcePublicMetrics.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/DataSourcePublicMetrics.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/DataSourcePublicMetrics.java\n@@ -78,8 +78,6 @@ public Collection<Metric<?>> metrics() {\n \t\t\tString prefix = entry.getKey();\n \t\t\tprefix = (prefix.endsWith(\".\") ? prefix : prefix + \".\");\n \t\t\tDataSourcePoolMetadata metadata = entry.getValue();\n-\t\t\taddMetric(metrics, prefix + \"max\", metadata.getMax());\n-\t\t\taddMetric(metrics, prefix + \"min\", metadata.getMin());\n \t\t\taddMetric(metrics, prefix + \"active\", metadata.getActive());\n \t\t\taddMetric(metrics, prefix + \"usage\", metadata.getUsage());\n \t\t}",
    "output": "Drop min/max DataSourcePool metrics"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java\n@@ -219,7 +219,7 @@ protected void customizeConnector(Connector connector) {\n \t\tconnector.setPort(port);\n \t\tif (connector.getProtocolHandler() instanceof AbstractProtocol) {\n \t\t\tif (getAddress() != null) {\n-\t\t\t\t((AbstractProtocol) connector.getProtocolHandler())\n+\t\t\t\t((AbstractProtocol<?>) connector.getProtocolHandler())\n \t\t\t\t\t\t.setAddress(getAddress());\n \t\t\t}\n \t\t}",
    "output": "Fix generics warnings triggered by upgrade to Tomcat 7.0.55\nSee changes made in revision 1602507 [1]\n[1] https://svn.apache.org/viewvc?view=revision&revision=1602507"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/agent/AgentTasksEnhancer.java b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/agent/AgentTasksEnhancer.java\n--- a/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/agent/AgentTasksEnhancer.java\n+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/agent/AgentTasksEnhancer.java\n@@ -17,6 +17,7 @@\n package org.springframework.boot.gradle.agent;\n \n import java.io.File;\n+import java.net.URISyntaxException;\n import java.security.CodeSource;\n \n import org.gradle.api.Action;\n@@ -84,7 +85,14 @@ private File getSpringLoadedAgent() {\n \t\t\tif (loaded != null) {\n \t\t\t\tCodeSource source = loaded.getProtectionDomain().getCodeSource();\n \t\t\t\tif (source != null) {\n-\t\t\t\t\treturn new File(source.getLocation().getFile());\n+\t\t\t\t\tFile agent;\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tagent = new File(source.getLocation().toURI());\n+\t\t\t\t\t}\n+\t\t\t\t\tcatch (URISyntaxException ex) {\n+\t\t\t\t\t\tagent = new File(source.getLocation().getPath());\n+\t\t\t\t\t}\n+\t\t\t\t\treturn agent;\n \t\t\t\t}\n \t\t\t}\n \t\t}",
    "output": "Convert URL to File using a URI so that URL-encoding is removed"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/web/ErrorPageFilter.java b/spring-boot/src/main/java/org/springframework/boot/context/web/ErrorPageFilter.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/web/ErrorPageFilter.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/web/ErrorPageFilter.java\n@@ -143,7 +143,12 @@ private void handleException(HttpServletRequest request,\n \t\t\trethrow(ex);\n \t\t\treturn;\n \t\t}\n-\t\tlogger.error(\"Forwarding to error page\", ex);\n+\t\tif (logger.isErrorEnabled()) {\n+\t\t\tString message = \"Forwarding to error page from request [\"\n+\t\t\t\t\t+ request.getServletPath() + request.getPathInfo()\n+\t\t\t\t\t+ \"] due to exception [\" + ex.getMessage() + \"]\";\n+\t\t\tlogger.error(message, ex);\n+\t\t}\n \t\tsetErrorAttributes(request, 500, ex.getMessage());\n \t\trequest.setAttribute(ERROR_EXCEPTION, ex);\n \t\trequest.setAttribute(ERROR_EXCEPTION_TYPE, type.getName());",
    "output": "Add a little more context to ErrorPageFilter log\nAdd the servlet and context path along with the exception message to\nthe error logged in ErrorPageFilter."
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/web/ErrorPageFilter.java b/spring-boot/src/main/java/org/springframework/boot/context/web/ErrorPageFilter.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/web/ErrorPageFilter.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/web/ErrorPageFilter.java\n@@ -143,6 +143,7 @@ private void handleException(HttpServletRequest request,\n \t\t\trethrow(ex);\n \t\t\treturn;\n \t\t}\n+\t\tlogger.error(\"Forwarding to error page\", ex);\n \t\tsetErrorAttributes(request, 500, ex.getMessage());\n \t\trequest.setAttribute(ERROR_EXCEPTION, ex);\n \t\trequest.setAttribute(ERROR_EXCEPTION_TYPE, type.getName());",
    "output": "Log exceptions in ErrorPageFilter\nFor some reason I thought that the DispatcherServlet default handler\nwould log all exceptions, so if we did it in the ErrorPageFilter it\nwould lead to duplicates. That appears not to be the case."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java\n@@ -118,7 +118,7 @@ public String getUsername() {\n \t\tif (StringUtils.hasText(this.username)) {\n \t\t\treturn this.username;\n \t\t}\n-\t\tif (EmbeddedDatabaseConnection.isEmbedded(this.driverClassName)) {\n+\t\tif (EmbeddedDatabaseConnection.isEmbedded(getDriverClassName())) {\n \t\t\treturn \"sa\";\n \t\t}\n \t\treturn null;\n@@ -128,7 +128,7 @@ public String getPassword() {\n \t\tif (StringUtils.hasText(this.password)) {\n \t\t\treturn this.password;\n \t\t}\n-\t\tif (EmbeddedDatabaseConnection.isEmbedded(this.driverClassName)) {\n+\t\tif (EmbeddedDatabaseConnection.isEmbedded(getDriverClassName())) {\n \t\t\treturn \"\";\n \t\t}\n \t\treturn null;",
    "output": "Detect embedded DBs when deducing driver class\nFix DataSourceProperties getUsername() and getPassword() methods to\ncall getDriverClassName() rather than using `this.driverClassName` to\nensure than deduced driver classes can be used."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DriverClassNameProvider.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DriverClassNameProvider.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DriverClassNameProvider.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DriverClassNameProvider.java\n@@ -37,7 +37,7 @@ class DriverClassNameProvider {\n \t\tMap<String, String> drivers = new HashMap<String, String>();\n \t\tdrivers.put(\"derby\", \"org.apache.derby.jdbc.EmbeddedDriver\");\n \t\tdrivers.put(\"h2\", \"org.h2.Driver\");\n-\t\tdrivers.put(\"hsqldb\", \"org.hsqldb.jdbcDriver\");\n+\t\tdrivers.put(\"hsqldb\", \"org.hsqldb.jdbc.JDBCDriver\");\n \t\tdrivers.put(\"sqlite\", \"org.sqlite.JDBC\");\n \t\tdrivers.put(\"mysql\", \"com.mysql.jdbc.Driver\");\n \t\tdrivers.put(\"mariadb\", \"org.mariadb.jdbc.Driver\");",
    "output": "Use org.hsqldb.jdbc.JDBCDriver HSQLDB Driver\nSwitch driver class to the more conventionally named\n`org.hsqldb.jdbc.JDBCDriver`."
  },
  {
    "input": "diff --git a/spring-boot-integration-tests/src/test/java/org/springframework/boot/gradle/MultiProjectRepackagingTests.java b/spring-boot-integration-tests/src/test/java/org/springframework/boot/gradle/MultiProjectRepackagingTests.java\n--- a/spring-boot-integration-tests/src/test/java/org/springframework/boot/gradle/MultiProjectRepackagingTests.java\n+++ b/spring-boot-integration-tests/src/test/java/org/springframework/boot/gradle/MultiProjectRepackagingTests.java\n@@ -24,7 +24,6 @@\n import org.junit.BeforeClass;\n import org.junit.Test;\n import org.springframework.boot.dependency.tools.ManagedDependencies;\n-import org.springframework.util.FileCopyUtils;\n \n import static org.hamcrest.Matchers.notNullValue;\n import static org.junit.Assert.assertThat;\n@@ -48,10 +47,8 @@ public static void createProject() throws IOException {\n \n \t@Test\n \tpublic void repackageWithTransitiveFileDependency() throws Exception {\n-\t\tFileCopyUtils.copy(new File(\"src/test/resources/foo.jar\"), new File(\n-\t\t\t\t\"target/multi-project-repackage/foo.jar\"));\n \t\tproject.newBuild().forTasks(\"clean\", \"build\")\n-\t\t.withArguments(\"-PbootVersion=\" + BOOT_VERSION, \"-Prepackage=true\").run();\n+\t\t\t\t.withArguments(\"-PbootVersion=\" + BOOT_VERSION, \"-Prepackage=true\").run();\n \t\tFile buildLibs = new File(\"target/multi-project-repackage/main/build/libs\");\n \t\tJarFile jarFile = new JarFile(new File(buildLibs, \"main.jar\"));\n \t\tassertThat(jarFile.getEntry(\"lib/commons-logging-1.1.3.jar\"), notNullValue());",
    "output": "Add jar that should have been added as part of 69c61d0"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedContext.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedContext.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedContext.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedContext.java\n@@ -34,7 +34,8 @@ class TomcatEmbeddedContext extends StandardContext {\n \tprivate ServletContextInitializerLifecycleListener starter;\n \n \t@Override\n-\tpublic void loadOnStartup(Container[] children) {\n+\tpublic boolean loadOnStartup(Container[] children) {\n+\t\treturn true;\n \t}\n \n \tpublic void deferredLoadOnStartup() {",
    "output": "Upgrade to Tomcat 7.0.55"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/install/InstallCommand.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/install/InstallCommand.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/install/InstallCommand.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/install/InstallCommand.java\n@@ -123,6 +123,10 @@ public boolean isAutoconfigure() {\n \t\t\t\t}\n \t\t\t\tFileUtils.deleteDirectory(tmpdir.toFile());\n \t\t\t}\n+\t\t\tcatch (Exception e) {\n+\t\t\t\tString message = e.getMessage();\n+\t\t\t\tLog.error(message != null ? message : e.getClass().toString());\n+\t\t\t}\n \t\t\tfinally {\n \t\t\t\tif (grapeRoot != null) {\n \t\t\t\t\tSystem.setProperty(\"grape.root\", grapeRoot);",
    "output": "Improve error logging in InstallCommand"
  },
  {
    "input": "diff --git a/spring-boot-integration-tests/src/test/java/org/springframework/boot/starter/StarterDependenciesIntegrationTests.java b/spring-boot-integration-tests/src/test/java/org/springframework/boot/starter/StarterDependenciesIntegrationTests.java\n--- a/spring-boot-integration-tests/src/test/java/org/springframework/boot/starter/StarterDependenciesIntegrationTests.java\n+++ b/spring-boot-integration-tests/src/test/java/org/springframework/boot/starter/StarterDependenciesIntegrationTests.java\n@@ -61,7 +61,7 @@ public class StarterDependenciesIntegrationTests {\n \tpublic static List<String[]> getStarters() {\n \t\tList<String[]> starters = new ArrayList<String[]>();\n \t\tfor (File file : new File(\"../spring-boot-starters\").listFiles()) {\n-\t\t\tif (file.isDirectory()) {\n+\t\t\tif (file.isDirectory() && new File(file, \"pom.xml\").exists()) {\n \t\t\t\tString name = file.getName();\n \t\t\t\tif (name.startsWith(STARTER_NAME_PREFIX)\n \t\t\t\t\t\t&& !EXCLUDED_STARTERS.contains(file.getName())) {",
    "output": "Prevent tests from picking up empty starter dirs\nUpdate StarterDependenciesIntegrationTests to only consider starter\nfolders that contain POM files."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/EnableAutoConfiguration.java\n@@ -18,6 +18,7 @@\n \n import java.lang.annotation.Documented;\n import java.lang.annotation.ElementType;\n+import java.lang.annotation.Inherited;\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n@@ -66,6 +67,7 @@\n @Target(ElementType.TYPE)\n @Retention(RetentionPolicy.RUNTIME)\n @Documented\n+@Inherited\n @Import({ EnableAutoConfigurationImportSelector.class,\n \t\tAutoConfigurationPackages.Registrar.class })\n public @interface EnableAutoConfiguration {",
    "output": "Add @Inherited to @EnableAutoConfiguration"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/DependencyCustomizer.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/DependencyCustomizer.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/DependencyCustomizer.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/DependencyCustomizer.java\n@@ -255,4 +255,11 @@ private AnnotationNode createGrabAnnotation(String group, String module,\n \tprotected boolean canAdd() {\n \t\treturn true;\n \t}\n+\n+\t/**\n+\t * @return the dependencyResolutionContext\n+\t */\n+\tpublic DependencyResolutionContext getDependencyResolutionContext() {\n+\t\treturn this.dependencyResolutionContext;\n+\t}\n }",
    "output": "Add public getter for dependency context"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/test/SpringApplicationConfigurationMixedConfigurationTests.java b/spring-boot/src/test/java/org/springframework/boot/test/SpringApplicationConfigurationMixedConfigurationTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/test/SpringApplicationConfigurationMixedConfigurationTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/test/SpringApplicationConfigurationMixedConfigurationTests.java\n@@ -16,7 +16,6 @@\n \n package org.springframework.boot.test;\n \n-import org.junit.Ignore;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -33,7 +32,6 @@\n  */\n @RunWith(SpringJUnit4ClassRunner.class)\n @SpringApplicationConfiguration(classes = Config.class, locations = \"classpath:test.groovy\")\n-@Ignore(\"classes and locations together are not supported in Spring Test (for legacy reasons)\")\n public class SpringApplicationConfigurationMixedConfigurationTests {\n \n \t@Autowired",
    "output": "Enable test that relies on class and groovy script configuration\nSince Spring 4.0.4, it's now possible to use both classes and\nlocations to provide a test's configuration."
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/bind/PropertySourcesPropertyValues.java b/spring-boot/src/main/java/org/springframework/boot/bind/PropertySourcesPropertyValues.java\n--- a/spring-boot/src/main/java/org/springframework/boot/bind/PropertySourcesPropertyValues.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/bind/PropertySourcesPropertyValues.java\n@@ -76,11 +76,11 @@ public PropertySourcesPropertyValues(PropertySources propertySources,\n \t\t\t\t.toArray(new String[0]);\n \t\tString[] exacts = names == null ? new String[0] : names.toArray(new String[0]);\n \t\tfor (PropertySource<?> source : propertySources) {\n-\t\t\tprocessPropertSource(source, resolver, includes, exacts);\n+\t\t\tprocessPropertySource(source, resolver, includes, exacts);\n \t\t}\n \t}\n \n-\tprivate void processPropertSource(PropertySource<?> source,\n+\tprivate void processPropertySource(PropertySource<?> source,\n \t\t\tPropertySourcesPropertyResolver resolver, String[] includes, String[] exacts) {\n \t\tif (source instanceof EnumerablePropertySource) {\n \t\t\tEnumerablePropertySource<?> enumerable = (EnumerablePropertySource<?>) source;\n@@ -107,7 +107,7 @@ private void processPropertSource(PropertySource<?> source,\n \t\telse if (source instanceof CompositePropertySource) {\n \t\t\tCompositePropertySource composite = (CompositePropertySource) source;\n \t\t\tfor (PropertySource<?> nested : extractSources(composite)) {\n-\t\t\t\tprocessPropertSource(nested, resolver, includes, exacts);\n+\t\t\t\tprocessPropertySource(nested, resolver, includes, exacts);\n \t\t\t}\n \t\t}\n \t\telse {",
    "output": "Change private method name"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/SettingsXmlRepositorySystemSessionAutoConfiguration.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/SettingsXmlRepositorySystemSessionAutoConfiguration.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/SettingsXmlRepositorySystemSessionAutoConfiguration.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/SettingsXmlRepositorySystemSessionAutoConfiguration.java\n@@ -47,6 +47,7 @@\n import org.sonatype.plexus.components.cipher.DefaultPlexusCipher;\n import org.sonatype.plexus.components.cipher.PlexusCipherException;\n import org.sonatype.plexus.components.sec.dispatcher.DefaultSecDispatcher;\n+import org.springframework.boot.cli.util.Log;\n \n /**\n  * Auto-configuration for a RepositorySystemSession that uses Maven's settings.xml to\n@@ -76,8 +77,8 @@ public void apply(DefaultRepositorySystemSession session,\n \t\tSettings settings = loadSettings();\n \t\tSettingsDecryptionResult decryptionResult = decryptSettings(settings);\n \t\tif (!decryptionResult.getProblems().isEmpty()) {\n-\t\t\tthrow new IllegalStateException(\"Settings decryption failed: \"\n-\t\t\t\t\t+ decryptionResult.getProblems());\n+\t\t\tLog.error(\"Settings decryption failed: \" + decryptionResult.getProblems());\n+\t\t\t// Continue - the encrypted credentials may not be used\n \t\t}\n \n \t\tsession.setOffline(settings.isOffline());",
    "output": "Don't fail hard when settings.xml can't be decrypted by the CLI"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java\n@@ -156,7 +156,8 @@ public EnvironmentMvcEndpoint environmentMvcEndpoint(EnvironmentEndpoint delegat\n \t@ConditionalOnExpression(\"${endpoints.health.enabled:true}\")\n \tpublic HealthMvcEndpoint healthMvcEndpoint(HealthEndpoint delegate) {\n \t\tHealthMvcEndpoint healthMvcEndpoint = new HealthMvcEndpoint(delegate);\n-\t\tif (this.healthMvcEndpointProperties.getMapping() != null) {\n+\t\tif (this.healthMvcEndpointProperties.getMapping() != null\n+\t\t\t\t&& this.healthMvcEndpointProperties.getMapping().size() > 0) {\n \t\t\thealthMvcEndpoint.setStatusMapping(this.healthMvcEndpointProperties\n \t\t\t\t\t.getMapping());\n \t\t}",
    "output": "Fix HTTP status code mapping in HealthMvcEndpoint\nrefs"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java\n--- a/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/logging/LoggingApplicationListener.java\n@@ -185,10 +185,9 @@ protected void initialize(ConfigurableEnvironment environment, ClassLoader class\n \t\t\t\tsystem.initialize(value);\n \t\t\t}\n \t\t\tcatch (Exception ex) {\n-\t\t\t\t// Swallow exception and continue\n+\t\t\t\tthis.logger.warn(\"Logging environment value '\" + value\n+\t\t\t\t\t\t+ \"' cannot be opened and will be ignored\");\n \t\t\t}\n-\t\t\tthis.logger.warn(\"Logging environment value '\" + value\n-\t\t\t\t\t+ \"' cannot be opened and will be ignored\");\n \t\t}\n \t\telse {\n ",
    "output": "Fix LoggingApplicationListener\n- If `logging.config` is set and could open/read the resource\nthen, return.\n- Currently, it logs warning though the resource is successfully\nread."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchProperties.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchProperties.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchProperties.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchProperties.java\n@@ -73,5 +73,9 @@ public static class Job {\n \t\tpublic String getNames() {\n \t\t\treturn names;\n \t\t}\n+\n+\t\tpublic void setNames(String names) {\n+\t\t\tthis.names = names;\n+\t\t}\n \t}\n }",
    "output": "Missing setter on spring.batch.job.names property\nRelates to"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-aop/src/main/java/sample/aop/monitor/ServiceMonitor.java b/spring-boot-samples/spring-boot-sample-aop/src/main/java/sample/aop/monitor/ServiceMonitor.java\n--- a/spring-boot-samples/spring-boot-sample-aop/src/main/java/sample/aop/monitor/ServiceMonitor.java\n+++ b/spring-boot-samples/spring-boot-sample-aop/src/main/java/sample/aop/monitor/ServiceMonitor.java\n@@ -25,7 +25,7 @@\n @Component\n public class ServiceMonitor {\n \n-\t@AfterReturning(\"execution(* *..*Service.*(..))\")\n+\t@AfterReturning(\"execution(* sample..*Service.*(..))\")\n \tpublic void logServiceAccess(JoinPoint joinPoint) {\n \t\tSystem.out.println(\"Completed: \" + joinPoint);\n \t}",
    "output": "More specific pointcut to be safe"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/RequestMappingEndpoint.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/RequestMappingEndpoint.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/RequestMappingEndpoint.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/RequestMappingEndpoint.java\n@@ -24,6 +24,7 @@\n import java.util.Map;\n \n import org.springframework.beans.BeansException;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.ApplicationContextAware;\n import org.springframework.web.method.HandlerMethod;\n@@ -35,6 +36,7 @@\n  * \n  * @author Dave Syer\n  */\n+@ConfigurationProperties(prefix = \"endpoints.mappings\", ignoreUnknownFields = false)\n public class RequestMappingEndpoint extends AbstractEndpoint<Map<String, Object>>\n \t\timplements ApplicationContextAware {\n ",
    "output": "Allow /mappings to be disabled ()"
  },
  {
    "input": "diff --git a/spring-boot-integration-tests/src/test/java/org/springframework/boot/gradle/InstallTests.java b/spring-boot-integration-tests/src/test/java/org/springframework/boot/gradle/InstallTests.java\n--- a/spring-boot-integration-tests/src/test/java/org/springframework/boot/gradle/InstallTests.java\n+++ b/spring-boot-integration-tests/src/test/java/org/springframework/boot/gradle/InstallTests.java\n@@ -39,6 +39,13 @@ public void cleanInstall() throws Exception {\n \t\t\t\t.withArguments(\"-PbootVersion=\" + BOOT_VERSION, \"--stacktrace\").run();\n \t}\n \n+\t@Test\n+\tpublic void cleanInstallVersionManagement() throws Exception {\n+\t\tproject = new ProjectCreator().createProject(\"installer-io\");\n+\t\tproject.newBuild().forTasks(\"install\")\n+\t\t\t\t.withArguments(\"-PbootVersion=\" + BOOT_VERSION, \"--stacktrace\").run();\n+\t}\n+\n \t@Test\n \tpublic void cleanInstallApp() throws Exception {\n \t\tproject = new ProjectCreator().createProject(\"install-app\");",
    "output": "Add test for IO dependencies in gradle"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java\n--- a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java\n+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java\n@@ -84,6 +84,8 @@ public class JarFile extends java.util.jar.JarFile implements Iterable<JarEntryD\n \n \tprivate SoftReference<Manifest> manifest;\n \n+\tprivate URL url;\n+\n \t/**\n \t * Create a new {@link JarFile} backed by the specified file.\n \t * @param file the root jar file\n@@ -417,9 +419,12 @@ public void close() throws IOException {\n \t * @throws MalformedURLException\n \t */\n \tpublic URL getUrl() throws MalformedURLException {\n-\t\tHandler handler = new Handler(this);\n-\t\tString file = this.rootFile.getFile().toURI() + this.pathFromRoot + \"!/\";\n-\t\treturn new URL(\"jar\", \"\", -1, file, handler);\n+\t\tif (this.url == null) {\n+\t\t\tHandler handler = new Handler(this);\n+\t\t\tString file = this.rootFile.getFile().toURI() + this.pathFromRoot + \"!/\";\n+\t\t\tthis.url = new URL(\"jar\", \"\", -1, file, handler);\n+\t\t}\n+\t\treturn this.url;\n \t}\n \n \t@Override",
    "output": "Add caching to JarFile.getUrl()"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-data-mongodb/src/test/java/sample/data/mongo/SampleMongoApplicationTests.java b/spring-boot-samples/spring-boot-sample-data-mongodb/src/test/java/sample/data/mongo/SampleMongoApplicationTests.java\n--- a/spring-boot-samples/spring-boot-sample-data-mongodb/src/test/java/sample/data/mongo/SampleMongoApplicationTests.java\n+++ b/spring-boot-samples/spring-boot-sample-data-mongodb/src/test/java/sample/data/mongo/SampleMongoApplicationTests.java\n@@ -22,6 +22,7 @@\n import org.springframework.core.NestedCheckedException;\n \n import com.mongodb.MongoServerSelectionException;\n+import com.mongodb.MongoTimeoutException;\n \n import static org.junit.Assert.assertTrue;\n \n@@ -55,7 +56,8 @@ private boolean serverNotRunning(IllegalStateException ex) {\n \t\tNestedCheckedException nested = new NestedCheckedException(\"failed\", ex) {\n \t\t};\n \t\tThrowable root = nested.getRootCause();\n-\t\tif (root instanceof MongoServerSelectionException) {\n+\t\tif (root instanceof MongoServerSelectionException\n+\t\t\t\t|| root instanceof MongoTimeoutException) {\n \t\t\tif (root.getMessage().contains(\"Unable to connect to any server\")) {\n \t\t\t\treturn true;\n \t\t\t}",
    "output": "Attempt to fix Windows CI"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-data-mongodb/src/test/java/sample/data/mongo/SampleMongoApplicationTests.java b/spring-boot-samples/spring-boot-sample-data-mongodb/src/test/java/sample/data/mongo/SampleMongoApplicationTests.java\n--- a/spring-boot-samples/spring-boot-sample-data-mongodb/src/test/java/sample/data/mongo/SampleMongoApplicationTests.java\n+++ b/spring-boot-samples/spring-boot-sample-data-mongodb/src/test/java/sample/data/mongo/SampleMongoApplicationTests.java\n@@ -59,6 +59,9 @@ private boolean serverNotRunning(IllegalStateException ex) {\n \t\t\tif (root.getMessage().contains(\"Unable to connect to any server\")) {\n \t\t\t\treturn true;\n \t\t\t}\n+\t\t\tif (root.getMessage().contains(\"Timed out while waiting for a server\")) {\n+\t\t\t\treturn true;\n+\t\t\t}\n \t\t}\n \t\treturn false;\n \t}",
    "output": "Be defensive detecting when Mono not running"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java b/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n@@ -109,10 +109,12 @@ public void stopServlet() throws Exception {\n \t\tthis.container = factory\n \t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.container.start();\n+\t\tint port = this.container.getPort();\n \t\tthis.container.stop();\n \t\tthis.thrown.expect(IOException.class);\n-\t\tString response = getResponse(getLocalUrl(\"/hello\"));\n-\t\tthrow new RuntimeException(this.container.getPort() + \" \" + response);\n+\t\tString response = getResponse(getLocalUrl(port, \"/hello\"));\n+\t\tthrow new RuntimeException(\"Unexpected response on port \" + port + \" : \"\n+\t\t\t\t+ response);\n \t}\n \n \t@Test\n@@ -302,6 +304,10 @@ protected String getLocalUrl(String resourcePath) {\n \t\treturn \"http://localhost:\" + this.container.getPort() + resourcePath;\n \t}\n \n+\tprotected String getLocalUrl(int port, String resourcePath) {\n+\t\treturn \"http://localhost:\" + port + resourcePath;\n+\t}\n+\n \tprotected String getResponse(String url) throws IOException, URISyntaxException {\n \t\tClientHttpResponse response = getClientResponse(url);\n \t\ttry {",
    "output": "Attempt to fix Windows CI"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java b/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n@@ -112,7 +112,7 @@ public void stopServlet() throws Exception {\n \t\tthis.container.stop();\n \t\tthis.thrown.expect(IOException.class);\n \t\tString response = getResponse(getLocalUrl(\"/hello\"));\n-\t\tthrow new RuntimeException(response);\n+\t\tthrow new RuntimeException(this.container.getPort() + \" \" + response);\n \t}\n \n \t@Test",
    "output": "Attempt to fix Windows CI"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java b/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n@@ -110,7 +110,7 @@ public void stopServlet() throws Exception {\n \t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.container.start();\n \t\tthis.container.stop();\n-\t\t// this.thrown.expect(Exception.class);\n+\t\tthis.thrown.expect(IOException.class);\n \t\tString response = getResponse(getLocalUrl(\"/hello\"));\n \t\tthrow new RuntimeException(response);\n \t}",
    "output": "Throw exception on stop failure\nTrying to fix the Windows CI build"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java b/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n@@ -110,8 +110,9 @@ public void stopServlet() throws Exception {\n \t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.container.start();\n \t\tthis.container.stop();\n-\t\tthis.thrown.expect(Exception.class);\n-\t\tgetResponse(getLocalUrl(\"/hello\"));\n+\t\t// this.thrown.expect(Exception.class);\n+\t\tString response = getResponse(getLocalUrl(\"/hello\"));\n+\t\tthrow new RuntimeException(response);\n \t}\n \n \t@Test",
    "output": "Trying to break windows build"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java b/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/context/embedded/AbstractEmbeddedServletContainerFactoryTests.java\n@@ -110,7 +110,7 @@ public void stopServlet() throws Exception {\n \t\t\t\t.getEmbeddedServletContainer(exampleServletRegistration());\n \t\tthis.container.start();\n \t\tthis.container.stop();\n-\t\tthis.thrown.expect(IOException.class);\n+\t\tthis.thrown.expect(Exception.class);\n \t\tgetResponse(getLocalUrl(\"/hello\"));\n \t}\n ",
    "output": "Relax expected exception when connection fails\nException appears to be different on Windows JVMs"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/VanillaPublicMetrics.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/VanillaPublicMetrics.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/VanillaPublicMetrics.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/VanillaPublicMetrics.java\n@@ -40,10 +40,12 @@\n public class VanillaPublicMetrics implements PublicMetrics {\n \n \tprivate final MetricReader reader;\n+\tprivate long timestamp;\n \n \tpublic VanillaPublicMetrics(MetricReader reader) {\n \t\tAssert.notNull(reader, \"MetricReader must not be null\");\n \t\tthis.reader = reader;\n+\t\tthis.timestamp = System.currentTimeMillis();\n \t}\n \n \t@Override\n@@ -75,6 +77,8 @@ protected void addMetrics(Collection<Metric<?>> result) {\n \t\t// Add JVM uptime in ms\n \t\tresult.add(new Metric<Long>(\"uptime\", new Long(ManagementFactory\n \t\t\t\t.getRuntimeMXBean().getUptime())));\n+\t\tresult.add(new Metric<Long>(\"instance.uptime\", System.currentTimeMillis()\n+\t\t\t\t- this.timestamp));\n \t}\n \n \t/**",
    "output": "Add instance.uptime to VanillaPublicMetrics"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/EmbeddedServletContainerCustomizerBeanPostProcessor.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/EmbeddedServletContainerCustomizerBeanPostProcessor.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/EmbeddedServletContainerCustomizerBeanPostProcessor.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/EmbeddedServletContainerCustomizerBeanPostProcessor.java\n@@ -73,7 +73,8 @@ private Collection<EmbeddedServletContainerCustomizer> getCustomizers() {\n \t\t\t// Look up does not include the parent context\n \t\t\tthis.customizers = new ArrayList<EmbeddedServletContainerCustomizer>(\n \t\t\t\t\tthis.applicationContext.getBeansOfType(\n-\t\t\t\t\t\t\tEmbeddedServletContainerCustomizer.class).values());\n+\t\t\t\t\t\t\tEmbeddedServletContainerCustomizer.class, false, false)\n+\t\t\t\t\t\t\t.values());\n \t\t\tCollections.sort(this.customizers, AnnotationAwareOrderComparator.INSTANCE);\n \t\t\tthis.customizers = Collections.unmodifiableList(this.customizers);\n \t\t}",
    "output": "Avoid eager factory bean instantiation for container customizers"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/batch/JobLauncherCommandLineRunnerTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/batch/JobLauncherCommandLineRunnerTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/batch/JobLauncherCommandLineRunnerTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/batch/JobLauncherCommandLineRunnerTests.java\n@@ -136,7 +136,7 @@ public RepeatStatus execute(StepContribution contribution,\n \t\t\t\t\t}\n \t\t\t\t}).build()).incrementer(new RunIdIncrementer()).build();\n \t\tJobParameters jobParameters = new JobParametersBuilder().addLong(\"id\", 1L, false)\n-\t\t\t\t.toJobParameters();\n+\t\t\t\t.addLong(\"foo\", 2L, false).toJobParameters();\n \t\tthis.runner.execute(this.job, jobParameters);\n \t\tthis.runner.execute(this.job, jobParameters);\n \t\tassertEquals(1, this.jobExplorer.getJobInstances(\"job\", 0, 100).size());",
    "output": "Improve test for JobLauncherCommandLineRunner ()"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/web/ErrorPageFilter.java b/spring-boot/src/main/java/org/springframework/boot/context/web/ErrorPageFilter.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/web/ErrorPageFilter.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/web/ErrorPageFilter.java\n@@ -136,18 +136,18 @@ private void handleException(HttpServletRequest request,\n \t\trequest.setAttribute(ERROR_EXCEPTION, ex);\n \t\trequest.setAttribute(ERROR_EXCEPTION_TYPE, type.getName());\n \t\twrapped.sendError(500, ex.getMessage());\n-\t\tforwardToErrorPage(errorPath, request, wrapped);\n+\t\tforwardToErrorPage(errorPath, request, wrapped, ex);\n \t}\n \n \tprivate void forwardToErrorPage(String path, HttpServletRequest request,\n-\t\t\tServletResponse response) throws ServletException, IOException {\n+\t\t\tServletResponse response, Throwable ex) throws ServletException, IOException {\n \t\tif (!response.isCommitted()) {\n \t\t\tString message = \"Cannot forward to error page for\" + request.getRequestURI()\n \t\t\t\t\t+ \" (response is committed), so this response may have \"\n \t\t\t\t\t+ \"the wrong status code\";\n-\t\t\t// User might see the error page without all the data here but the exception\n-\t\t\t// isn't going to help anyone (and it's already been logged)\n-\t\t\tlogger.error(message);\n+\t\t\t// User might see the error page without all the data here but throwing the\n+\t\t\t// exception isn't going to help anyone (we'll log it to be on the safe side)\n+\t\t\tlogger.error(message, ex);\n \t\t\treturn;\n \t\t}\n \t\tresponse.reset();",
    "output": "Log exception in ErrorPageFilter"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/repackage/RepackagePluginFeatures.java b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/repackage/RepackagePluginFeatures.java\n--- a/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/repackage/RepackagePluginFeatures.java\n+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/repackage/RepackagePluginFeatures.java\n@@ -93,6 +93,7 @@ public void execute(Jar archive) {\n \t\t\t\tFile file = archive.getArchivePath();\n \t\t\t\tString classifier = this.task.getClassifier();\n \t\t\t\tif (classifier != null) {\n+\t\t\t\t\tthis.task.getInputs().file(archive);\n \t\t\t\t\tString withClassifer = file.getName();\n \t\t\t\t\twithClassifer = StringUtils.stripFilenameExtension(withClassifer)\n \t\t\t\t\t\t\t+ \"-\" + classifier + \".\"",
    "output": "Add inputs to gradle bootRepackage task"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/JobLauncherCommandLineRunner.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/JobLauncherCommandLineRunner.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/JobLauncherCommandLineRunner.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/JobLauncherCommandLineRunner.java\n@@ -153,7 +153,8 @@ else if (previousExecution.getStatus() == BatchStatus.STOPPED\n \t\t\t\t\t|| previousExecution.getStatus() == BatchStatus.FAILED) {\n \t\t\t\t// Retry a failed or stopped execution\n \t\t\t\tjobParameters = previousExecution.getJobParameters();\n-\t\t\t\tfor (Entry<String, JobParameter> parameter : additionals.entrySet()) {\n+\t\t\t\tfor (Entry<String, JobParameter> parameter : new HashMap<String, JobParameter>(\n+\t\t\t\t\t\tadditionals).entrySet()) {\n \t\t\t\t\t// Non-identifying additional parameters can be added to a retry\n \t\t\t\t\tif (!parameter.getValue().isIdentifying()) {\n \t\t\t\t\t\tadditionals.remove(parameter.getKey());",
    "output": "Make copy of job parameters before weeding out non-identifying ones"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-ws/src/test/java/sample/ws/SampleWsApplicationTests.java b/spring-boot-samples/spring-boot-sample-ws/src/test/java/sample/ws/SampleWsApplicationTests.java\n--- a/spring-boot-samples/spring-boot-sample-ws/src/test/java/sample/ws/SampleWsApplicationTests.java\n+++ b/spring-boot-samples/spring-boot-sample-ws/src/test/java/sample/ws/SampleWsApplicationTests.java\n@@ -38,7 +38,7 @@\n @RunWith(SpringJUnit4ClassRunner.class)\n @SpringApplicationConfiguration(classes = SampleWsApplication.class)\n @WebAppConfiguration\n-@IntegrationTest\n+@IntegrationTest(\"server.port=0\")\n public class SampleWsApplicationTests {\n \n \t@Rule",
    "output": "Fix WS sample to use a random port"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportProperties.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportProperties.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportProperties.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportProperties.java\n@@ -18,6 +18,7 @@\n \n import java.util.Properties;\n \n+import org.springframework.beans.factory.annotation.Value;\n import org.springframework.boot.context.properties.ConfigurationProperties;\n import org.springframework.util.StringUtils;\n \n@@ -29,6 +30,7 @@\n @ConfigurationProperties(prefix = \"endpoints.jmx\")\n public class EndpointMBeanExportProperties {\n \n+\t@Value(\"${spring.jmx.default_domain:}\")\n \tprivate String domain;\n \n \tprivate boolean uniqueNames = false;",
    "output": "Default endpoints.jmx.domain to the spring.jmx.default_domain"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/repackage/RepackageTask.java b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/repackage/RepackageTask.java\n--- a/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/repackage/RepackageTask.java\n+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/repackage/RepackageTask.java\n@@ -114,13 +114,16 @@ public void execute(Jar archive) {\n \t\t}\n \n \t\tprivate void setMainClass(Repackager repackager) {\n-\t\t\trepackager.setMainClass((String) getProject().property(\"mainClassName\"));\n-\t\t\tif (this.extension.getMainClass() != null) {\n-\t\t\t\trepackager.setMainClass(this.extension.getMainClass());\n-\t\t\t}\n+\t\t\tString mainClass = (String) getProject().property(\"mainClassName\");\n \t\t\tif (RepackageTask.this.mainClass != null) {\n-\t\t\t\trepackager.setMainClass(RepackageTask.this.mainClass);\n+\t\t\t\tmainClass = RepackageTask.this.mainClass;\n+\t\t\t} else if (this.extension.getMainClass() != null) {\n+\t\t\t\tmainClass = this.extension.getMainClass();\n+\t\t\t} else if (getProject().getTasks().getByName(\"run\").hasProperty(\"main\")) {\n+\t\t\t\tmainClass = (String) getProject().getTasks().getByName(\"run\").property(\"main\");\n \t\t\t}\n+\t\t\tgetLogger().info(\"Setting mainClass: \" + mainClass);\n+\t\t\trepackager.setMainClass(mainClass);\n \t\t}\n \t}\n ",
    "output": "Grab main class from \"run\" task if it exists"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/repackage/RepackageTask.java b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/repackage/RepackageTask.java\n--- a/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/repackage/RepackageTask.java\n+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/repackage/RepackageTask.java\n@@ -114,13 +114,16 @@ public void execute(Jar archive) {\n \t\t}\n \n \t\tprivate void setMainClass(Repackager repackager) {\n-\t\t\trepackager.setMainClass((String) getProject().property(\"mainClassName\"));\n-\t\t\tif (this.extension.getMainClass() != null) {\n-\t\t\t\trepackager.setMainClass(this.extension.getMainClass());\n-\t\t\t}\n+\t\t\tString mainClass = (String) getProject().property(\"mainClassName\");\n \t\t\tif (RepackageTask.this.mainClass != null) {\n-\t\t\t\trepackager.setMainClass(RepackageTask.this.mainClass);\n+\t\t\t\tmainClass = RepackageTask.this.mainClass;\n+\t\t\t} else if (this.extension.getMainClass() != null) {\n+\t\t\t\tmainClass = this.extension.getMainClass();\n+\t\t\t} else if (getProject().getTasks().getByName(\"run\").hasProperty(\"main\")) {\n+\t\t\t\tmainClass = (String) getProject().getTasks().getByName(\"run\").property(\"main\");\n \t\t\t}\n+\t\t\tgetLogger().info(\"Setting mainClass: \" + mainClass);\n+\t\t\trepackager.setMainClass(mainClass);\n \t\t}\n \t}\n ",
    "output": "Add @Conditional to prevent HATEOAS blowing up"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/hateoas/HypermediaAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/hateoas/HypermediaAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/hateoas/HypermediaAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/hateoas/HypermediaAutoConfiguration.java\n@@ -27,6 +27,7 @@\n import org.springframework.hateoas.Resource;\n import org.springframework.hateoas.config.EnableHypermediaSupport;\n import org.springframework.hateoas.config.EnableHypermediaSupport.HypermediaType;\n+import org.springframework.plugin.core.Plugin;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for Spring HATEOAS's\n@@ -44,6 +45,7 @@ public class HypermediaAutoConfiguration {\n \n \t@Configuration\n \t@EnableHypermediaSupport(type = HypermediaType.HAL)\n+\t@ConditionalOnClass(Plugin.class)\n \t@ConditionalOnWebApplication\n \tprotected static class HypermediaConfiguration {\n ",
    "output": "Add @Conditional to prevent HATEOAS blowing up\nSpring Plugin is required when using @EnableHypermediaSupport"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessor.java\n@@ -324,7 +324,7 @@ private PropertySources loadPropertySources(String[] locations) {\n \tprivate ConversionService getDefaultConversionService() {\n \t\tif (!this.initialized) {\n \t\t\tfor (Converter<?, ?> converter : ((ListableBeanFactory) this.beanFactory)\n-\t\t\t\t\t.getBeansOfType(Converter.class).values()) {\n+\t\t\t\t\t.getBeansOfType(Converter.class, false, false).values()) {\n \t\t\t\tthis.defaultConversionService.addConverter(converter);\n \t\t\t}\n \t\t}",
    "output": "Be defensive about factory beans in ConfigurationPropertiesBindingPostProcessor"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessorTests.java b/spring-boot/src/test/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessorTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessorTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessorTests.java\n@@ -20,7 +20,6 @@\n import javax.validation.constraints.NotNull;\n \n import org.junit.After;\n-import org.junit.Ignore;\n import org.junit.Test;\n import org.springframework.beans.factory.BeanCreationException;\n import org.springframework.beans.factory.annotation.Value;\n@@ -133,7 +132,6 @@ public void testPropertyWithEnum() throws Exception {\n \t}\n \n \t@Test\n-\t@Ignore(\"WIP\")\n \tpublic void testValueBindingForDefaults() throws Exception {\n \t\tthis.context = new AnnotationConfigApplicationContext();\n \t\tEnvironmentTestUtils.addEnvironment(this.context, \"default.value:foo\");\n@@ -294,6 +292,7 @@ public String getValue() {\n \t\t\treturn this.value;\n \t\t}\n \n+\t\t@Bean\n \t\tpublic static PropertySourcesPlaceholderConfigurer configurer() {\n \t\t\treturn new PropertySourcesPlaceholderConfigurer();\n \t\t}",
    "output": "Re-instate test when fixed"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessorTests.java b/spring-boot/src/test/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessorTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessorTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessorTests.java\n@@ -20,6 +20,7 @@\n import javax.validation.constraints.NotNull;\n \n import org.junit.After;\n+import org.junit.Ignore;\n import org.junit.Test;\n import org.springframework.beans.factory.BeanCreationException;\n import org.springframework.beans.factory.annotation.Value;\n@@ -132,6 +133,7 @@ public void testPropertyWithEnum() throws Exception {\n \t}\n \n \t@Test\n+\t@Ignore(\"WIP\")\n \tpublic void testValueBindingForDefaults() throws Exception {\n \t\tthis.context = new AnnotationConfigApplicationContext();\n \t\tEnvironmentTestUtils.addEnvironment(this.context, \"default.value:foo\");",
    "output": "Ignore test that is WIP"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedContext.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedContext.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedContext.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedContext.java\n@@ -18,6 +18,7 @@\n \n import org.apache.catalina.Container;\n import org.apache.catalina.core.StandardContext;\n+import org.springframework.util.ClassUtils;\n \n /**\n  * Tomcat {@link StandardContext} used by {@link TomcatEmbeddedServletContainer} to\n@@ -32,7 +33,20 @@ public void loadOnStartup(Container[] children) {\n \t}\n \n \tpublic void deferredLoadOnStartup() {\n+\t\t// Some older Servlet frameworks (e.g. Struts, BIRT) use the Thread context class\n+\t\t// loader to create servlet instances in this phase. If they do that and then try\n+\t\t// to initialize them later the class loader may have changed, so wrap the call to\n+\t\t// loadOnStartup in what we think its going to be the main webapp classloader at\n+\t\t// runtime.\n+\t\tClassLoader classLoader = getLoader().getClassLoader();\n+\t\tClassLoader existingLoader = null;\n+\t\tif (classLoader != null) {\n+\t\t\texistingLoader = ClassUtils.overrideThreadContextClassLoader(classLoader);\n+\t\t}\n \t\tsuper.loadOnStartup(findChildren());\n+\t\tif (existingLoader != null) {\n+\t\t\tClassUtils.overrideThreadContextClassLoader(existingLoader);\n+\t\t}\n \t}\n \n }",
    "output": "Set Thread context class loader while Tomcat starts up"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-dependency-tools/src/main/java/org/springframework/boot/dependency/tools/AbstractDependencies.java b/spring-boot-tools/spring-boot-dependency-tools/src/main/java/org/springframework/boot/dependency/tools/AbstractDependencies.java\n--- a/spring-boot-tools/spring-boot-dependency-tools/src/main/java/org/springframework/boot/dependency/tools/AbstractDependencies.java\n+++ b/spring-boot-tools/spring-boot-dependency-tools/src/main/java/org/springframework/boot/dependency/tools/AbstractDependencies.java\n@@ -19,14 +19,15 @@\n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.LinkedHashMap;\n-import java.util.List;\n+import java.util.LinkedHashSet;\n import java.util.Map;\n+import java.util.Set;\n \n import org.springframework.boot.dependency.tools.Dependency.Exclusion;\n \n /**\n  * Abstract base implementation for {@link Dependencies}.\n- *\n+ * \n  * @author Phillip Webb\n  * @author Andy Wilkinson\n  * @since 1.1.0\n@@ -68,12 +69,11 @@ protected void add(ArtifactAndGroupId artifactAndGroupId, Dependency dependency)\n \n \tprivate Dependency mergeDependencies(Dependency existingDependency,\n \t\t\tDependency newDependency) {\n-\t\tList<Exclusion> combinedExclusions = new ArrayList<Exclusion>();\n+\t\tSet<Exclusion> combinedExclusions = new LinkedHashSet<Exclusion>();\n \t\tcombinedExclusions.addAll(existingDependency.getExclusions());\n \t\tcombinedExclusions.addAll(newDependency.getExclusions());\n-\n \t\treturn new Dependency(newDependency.getGroupId(), newDependency.getArtifactId(),\n-\t\t\t\tnewDependency.getVersion(), combinedExclusions);\n+\t\t\t\tnewDependency.getVersion(), new ArrayList<Exclusion>(combinedExclusions));\n \t}\n \n \t/**",
    "output": "Switch mergeDependencies to use a set."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/MessageSourceAutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/MessageSourceAutoConfigurationTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/MessageSourceAutoConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/MessageSourceAutoConfigurationTests.java\n@@ -18,9 +18,12 @@\n \n import java.util.Locale;\n \n+import org.junit.Ignore;\n import org.junit.Test;\n import org.springframework.boot.test.EnvironmentTestUtils;\n import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.PropertySource;\n \n import static org.junit.Assert.assertEquals;\n \n@@ -81,4 +84,20 @@ public void testBadEncoding() throws Exception {\n \t\tassertEquals(\"blah\", this.context.getMessage(\"foo\", null, \"blah\", Locale.UK));\n \t}\n \n+\t@Test\n+\t@Ignore(\"Expected to fail per gh-1075\")\n+\tpublic void testMessageSourceFromPropertySourceAnnotation() throws Exception {\n+\t\tthis.context = new AnnotationConfigApplicationContext();\n+\t\tthis.context.register(Config.class, MessageSourceAutoConfiguration.class,\n+\t\t\t\tPropertyPlaceholderAutoConfiguration.class);\n+\t\tthis.context.refresh();\n+\t\tassertEquals(\"bar\",\n+\t\t\t\tthis.context.getMessage(\"foo\", null, \"Foo message\", Locale.UK));\n+\t}\n+\n+\t@Configuration\n+\t@PropertySource(\"classpath:/switch-messages.properties\")\n+\tprotected static class Config {\n+\n+\t}\n }",
    "output": "Test for message properties"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/SocialWebAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/SocialWebAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/SocialWebAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/social/SocialWebAutoConfiguration.java\n@@ -119,7 +119,7 @@ public ProviderSignInController signInController(\n \t@Configuration\n \t@EnableSocial\n \t@ConditionalOnWebApplication\n-\t@ConditionalOnMissingClass(SecurityContextHolder.class)\n+\t@ConditionalOnMissingClass(name=\"org.springframework.security.core.context.SecurityContextHolder\")\n \tprotected static class AnonymousUserIdSourceConfig extends SocialConfigurerAdapter {\n \n \t\t@Override",
    "output": "Use classname instead of value in @ConditionalOnMissingClass"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-web-secure/src/test/java/sample/ui/secure/SampleSecureApplicationTests.java b/spring-boot-samples/spring-boot-sample-web-secure/src/test/java/sample/ui/secure/SampleSecureApplicationTests.java\n--- a/spring-boot-samples/spring-boot-sample-web-secure/src/test/java/sample/ui/secure/SampleSecureApplicationTests.java\n+++ b/spring-boot-samples/spring-boot-sample-web-secure/src/test/java/sample/ui/secure/SampleSecureApplicationTests.java\n@@ -69,6 +69,18 @@ public void testHome() throws Exception {\n \t\t\t\tentity.getHeaders().getLocation().toString().endsWith(port + \"/login\"));\n \t}\n \n+\t@Test\n+\tpublic void testLoginPage() throws Exception {\n+\t\tHttpHeaders headers = new HttpHeaders();\n+\t\theaders.setAccept(Arrays.asList(MediaType.TEXT_HTML));\n+\t\tResponseEntity<String> entity = new TestRestTemplate().exchange(\n+\t\t\t\t\"http://localhost:\" + this.port + \"/login\", HttpMethod.GET, new HttpEntity<Void>(\n+\t\t\t\t\t\theaders), String.class);\n+\t\tassertEquals(HttpStatus.OK, entity.getStatusCode());\n+\t\tassertTrue(\"Wrong content:\\n\" + entity.getBody(),\n+\t\t\t\tentity.getBody().contains(\"_csrf\"));\n+\t}\n+\n \t@Test\n \tpublic void testLogin() throws Exception {\n \t\tHttpHeaders headers = getHeaders();",
    "output": "Optimize login form - delegated CSRF token creation to thymeleaf Also added additional test to verify behaviour."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ServerProperties.java\n@@ -84,9 +84,6 @@ public String getServletMapping() {\n \t\t\treturn \"/\";\n \t\t}\n \t\tif (this.servletPath.contains(\"*\")) {\n-\t\t\tif (this.servletPath.endsWith(\"*\")) {\n-\t\t\t\treturn this.servletPath;\n-\t\t\t}\n \t\t\treturn this.servletPath;\n \t\t}\n \t\tif (this.servletPath.endsWith(\"/\")) {",
    "output": "Remove dead code in ServerProperties"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/redis/RedisAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/redis/RedisAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/redis/RedisAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/redis/RedisAutoConfiguration.java\n@@ -50,7 +50,7 @@\n public class RedisAutoConfiguration {\n \n \t@Configuration\n-\t@ConditionalOnMissingClass(name = \"org.apache.commons.pool.impl.GenericObjectPool\")\n+\t@ConditionalOnMissingClass(name = \"org.apache.commons.pool2.impl.GenericObjectPool\")\n \tprotected static class RedisConnectionConfiguration {\n \n \t\t@Autowired",
    "output": "Pool -> pool2"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnBeanCondition.java\n@@ -346,7 +346,7 @@ public void doWith(Method method)\n \t\t\t\t\t\t}\n \t\t\t\t\t});\n \t\t\t\t}\n-\t\t\t\tcatch (Exception ex) {\n+\t\t\t\tcatch (Throwable ex) {\n \t\t\t\t\t// swallow exception and continue\n \t\t\t\t}\n \t\t\t}\n\ndiff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/MultipartAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/MultipartAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/MultipartAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/MultipartAutoConfiguration.java\n@@ -44,7 +44,8 @@\n  * @author Josh Long\n  */\n @Configuration\n-@ConditionalOnClass({ Servlet.class, StandardServletMultipartResolver.class })\n+@ConditionalOnClass({ Servlet.class, StandardServletMultipartResolver.class,\n+\t\tMultipartConfigElement.class })\n @ConditionalOnExpression(\"${multipart.enabled:true}\")\n @EnableConfigurationProperties(MultipartProperties.class)\n public class MultipartAutoConfiguration {",
    "output": "Defensive on startup with Multipart config"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/test/java/org/springframework/boot/cli/compiler/DependencyCustomizerTests.java b/spring-boot-cli/src/test/java/org/springframework/boot/cli/compiler/DependencyCustomizerTests.java\n--- a/spring-boot-cli/src/test/java/org/springframework/boot/cli/compiler/DependencyCustomizerTests.java\n+++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/compiler/DependencyCustomizerTests.java\n@@ -57,11 +57,14 @@ public void setUp() {\n \n \t\twhen(this.resolver.getGroupId(\"spring-boot-starter-logging\")).thenReturn(\n \t\t\t\t\"org.springframework.boot\");\n+\t\twhen(this.resolver.getArtifactId(\"spring-boot-starter-logging\")).thenReturn(\n+\t\t\t\t\"spring-boot-starter-logging\");\n \t\twhen(this.resolver.getVersion(\"spring-boot-starter-logging\")).thenReturn(\"1.2.3\");\n \n \t\tthis.moduleNode.addClass(this.classNode);\n \t\tthis.dependencyCustomizer = new DependencyCustomizer(new GroovyClassLoader(\n-\t\t\t\tgetClass().getClassLoader()), this.moduleNode, this.resolver);\n+\t\t\t\tgetClass().getClassLoader()), this.moduleNode,\n+\t\t\t\tnew DependencyResolutionContext(this.resolver));\n \t}\n \n \t@Test",
    "output": "Fix DependencyCustomizerTests following merge of 1.0.x"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/groovy/GroovyTemplate.java b/spring-boot-cli/src/main/java/org/springframework/boot/groovy/GroovyTemplate.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/groovy/GroovyTemplate.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/groovy/GroovyTemplate.java\n@@ -49,15 +49,14 @@ public static String template(String name, Map<String, ?> model) throws IOExcept\n \n \tpublic static String template(TemplateEngine engine, String name, Map<String, ?> model)\n \t\t\tthrows IOException, CompilationFailedException, ClassNotFoundException {\n-\t\tWritable writable = getTemplate(name).make(model);\n+\t\tWritable writable = getTemplate(engine, name).make(model);\n \t\tStringWriter result = new StringWriter();\n \t\twritable.writeTo(result);\n \t\treturn result.toString();\n \t}\n \n-\tprivate static Template getTemplate(String name) throws CompilationFailedException,\n+\tprivate static Template getTemplate(TemplateEngine engine, String name) throws CompilationFailedException,\n \t\t\tClassNotFoundException, IOException {\n-\t\tGStringTemplateEngine engine = new GStringTemplateEngine();\n \n \t\tFile file = new File(\"templates\", name);\n \t\tif (file.exists()) {",
    "output": "Fix bug in GroovyTemplate convenience\nIt was ignoring the engine argument in the 3 arg version\nof template()."
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/AetherGrapeEngine.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/AetherGrapeEngine.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/AetherGrapeEngine.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/AetherGrapeEngine.java\n@@ -195,7 +195,8 @@ private List<File> resolve(List<Dependency> dependencies)\n \t\t\t\t\t.getManagedDependencies());\n \n \t\t\tDependencyRequest dependencyRequest = new DependencyRequest(collectRequest,\n-\t\t\t\t\tDependencyFilterUtils.classpathFilter(JavaScopes.COMPILE));\n+\t\t\t\t\tDependencyFilterUtils.classpathFilter(JavaScopes.COMPILE,\n+\t\t\t\t\t\t\tJavaScopes.RUNTIME));\n \n \t\t\tDependencyResult dependencyResult = this.repositorySystem\n \t\t\t\t\t.resolveDependencies(this.session, dependencyRequest);",
    "output": "Add RUNTME scope to transitive dependencies in CLI"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringBootCompilerAutoConfiguration.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringBootCompilerAutoConfiguration.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringBootCompilerAutoConfiguration.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringBootCompilerAutoConfiguration.java\n@@ -64,6 +64,8 @@ public void applyImports(ImportCustomizer imports) {\n \t\t\t\t\"org.springframework.core.annotation.Order\",\n \t\t\t\t\"org.springframework.core.io.ResourceLoader\",\n \t\t\t\t\"org.springframework.boot.CommandLineRunner\",\n+\t\t\t\t\"org.springframework.boot.context.properties.ConfigurationProperties\",\n+\t\t\t\t\"org.springframework.boot.context.properties.EnableConfigurationProperties\",\n \t\t\t\t\"org.springframework.boot.autoconfigure.EnableAutoConfiguration\",\n \t\t\t\t\"org.springframework.boot.groovy.GrabMetadata\");\n \t\timports.addStarImports(\"org.springframework.stereotype\",",
    "output": "Add ConfigurationProperties to autoconfigs"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringTestCompilerAutoConfiguration.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringTestCompilerAutoConfiguration.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringTestCompilerAutoConfiguration.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringTestCompilerAutoConfiguration.java\n@@ -66,6 +66,7 @@ public void applyImports(ImportCustomizer imports)\n \t\timports.addStarImports(\"org.junit.runner\")\n \t\t\t\t.addStarImports(\"org.springframework.boot.test\")\n \t\t\t\t.addStarImports(\"org.springframework.test.context.junit4\")\n+\t\t\t\t.addStarImports(\"org.springframework.test.annotation\")\n \t\t\t\t.addImports(\n \t\t\t\t\t\t\"org.springframework.test.context.web.WebAppConfiguration\");\n \t}",
    "output": "Add spring-test annotations to auto imports"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/builder/SpringApplicationBuilder.java b/spring-boot/src/main/java/org/springframework/boot/builder/SpringApplicationBuilder.java\n--- a/spring-boot/src/main/java/org/springframework/boot/builder/SpringApplicationBuilder.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/builder/SpringApplicationBuilder.java\n@@ -80,10 +80,21 @@ public class SpringApplicationBuilder {\n \tprivate boolean registerShutdownHookApplied;\n \n \tpublic SpringApplicationBuilder(Object... sources) {\n-\t\tthis.application = new SpringApplication(sources);\n+\t\tthis.application = createSpringApplication(sources);\n \t}\n \n-\t/**\n+    /**\n+     * Creates a new {@link org.springframework.boot.SpringApplication} instances from the given sources. Subclasses may\n+     * override in order to provide a custom subclass of {@link org.springframework.boot.SpringApplication}\n+     *\n+     * @param sources The sources\n+     * @return The {@link org.springframework.boot.SpringApplication} instance\n+     */\n+    protected SpringApplication createSpringApplication(Object... sources) {\n+        return new SpringApplication(sources);\n+    }\n+\n+    /**\n \t * Accessor for the current application context.\n \t * @return the current application context (or null if not yet running)\n \t */",
    "output": "Allow subclassing of SpringApplicationBuilder"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/TraceWebFilterAutoConfigurationTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/TraceWebFilterAutoConfigurationTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/TraceWebFilterAutoConfigurationTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/TraceWebFilterAutoConfigurationTests.java\n@@ -28,7 +28,7 @@\n  * \n  * @author Phillip Webb\n  */\n-public class TraceWebFilterAutoConfigurationTest {\n+public class TraceWebFilterAutoConfigurationTests {\n \n \t@Test\n \tpublic void configureFilter() {",
    "output": "Rename TraceWebFilterAutoConfigurationTest\nRename TraceWebFilterAutoConfigurationTest to\nTraceWebFilterAutoConfigurationTests"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceBuilder.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceBuilder.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceBuilder.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceBuilder.java\n@@ -75,7 +75,8 @@ public DataSource build() {\n \t}\n \n \tprivate void maybeGetDriverClassName() {\n-\t\tif (!this.properties.containsKey(\"driverClassName\")) {\n+\t\tif (!this.properties.containsKey(\"driverClassName\")\n+\t\t\t\t&& this.properties.containsKey(\"url\")) {\n \t\t\tString cls = this.driverClassNameProvider.getDriverClassName(this.properties\n \t\t\t\t\t.get(\"url\"));\n \t\t\tthis.properties.put(\"driverClassName\", cls);",
    "output": "Fix bug in DataSourceBuilder"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n--- a/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n@@ -324,17 +324,20 @@ public ConfigurableApplicationContext run(String... args) {\n \t\t\treturn context;\n \t\t}\n \t\tcatch (Exception ex) {\n-\t\t\tfor (SpringApplicationRunListener runListener : runListeners) {\n-\t\t\t\tfinishWithException(runListener, context, ex);\n+\t\t\ttry {\n+\t\t\t\tfor (SpringApplicationRunListener runListener : runListeners) {\n+\t\t\t\t\tfinishWithException(runListener, context, ex);\n+\t\t\t\t}\n+\t\t\t\tthis.log.error(\"Application startup failed\", ex);\n \t\t\t}\n-\t\t\tif (context != null) {\n-\t\t\t\tcontext.close();\n+\t\t\tfinally {\n+\t\t\t\tif (context != null) {\n+\t\t\t\t\tcontext.close();\n+\t\t\t\t}\n \t\t\t}\n \t\t\tReflectionUtils.rethrowRuntimeException(ex);\n \t\t\treturn context;\n \t\t}\n-\t\tfinally {\n-\t\t}\n \t}\n \n \tprivate Collection<SpringApplicationRunListener> getRunListeners(String[] args) {",
    "output": "Ensure startup error is logged (and rethrown)"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java b/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java\n@@ -110,6 +110,13 @@ public void sourcesMustNotBeEmpty() throws Exception {\n \t\tnew SpringApplication().run();\n \t}\n \n+\t@Test\n+\tpublic void sourcesMustBeAccessible() throws Exception {\n+\t\tthis.thrown.expect(IllegalStateException.class);\n+\t\tthis.thrown.expectMessage(\"Cannot load configuration\");\n+\t\tnew SpringApplication(InaccessibleConfiguration.class).run();\n+\t}\n+\n \t@Test\n \tpublic void disableBanner() throws Exception {\n \t\tSpringApplication application = spy(new SpringApplication(ExampleConfig.class));\n@@ -269,7 +276,7 @@ public void commandLinePropertySourceEnhancesEnvironment() throws Exception {\n \t}\n \n \t@Test\n-\tpublic void proprtiesFileEnhancesEnvironment() throws Exception {\n+\tpublic void propertiesFileEnhancesEnvironment() throws Exception {\n \t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n \t\tapplication.setWebEnvironment(false);\n \t\tConfigurableEnvironment environment = new StandardEnvironment();\n@@ -468,6 +475,14 @@ private boolean hasPropertySource(ConfigurableEnvironment environment,\n \t\treturn false;\n \t}\n \n+\t@Configuration\n+\tprotected static class InaccessibleConfiguration {\n+\n+\t\tprivate InaccessibleConfiguration() {\n+\t\t}\n+\n+\t}\n+\n \tpublic static class SpyApplicationContext extends AnnotationConfigApplicationContext {\n \n \t\tConfigurableApplicationContext applicationContext = spy(new AnnotationConfigApplicationContext());",
    "output": "Add test for inaccessible configuration class"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaProperties.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaProperties.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaProperties.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/JpaProperties.java\n@@ -142,7 +142,7 @@ public void setNamingStrategy(Class<?> namingStrategy) {\n \t\t@Deprecated\n \t\tpublic void setNamingstrategy(Class<?> namingStrategy) {\n \t\t\tlogger.warn(\"The property spring.jpa.namingstrategy has been renamed, \"\n-\t\t\t\t\t+ \"please update your configuration to use nameing-strategy\");\n+\t\t\t\t\t+ \"please update your configuration to use naming-strategy\");\n \t\t\tthis.setNamingStrategy(namingStrategy);\n \t\t}\n ",
    "output": "Fix typo in warning"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/SolrHealthIndicator.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/SolrHealthIndicator.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/SolrHealthIndicator.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/SolrHealthIndicator.java\n@@ -24,7 +24,7 @@\n  * @author Andy Wilkinson\n  * @since 1.1.0\n  */\n-public class SolrHealthIndicator implements HealthIndicator {\n+public class SolrHealthIndicator extends AbstractHealthIndicator {\n \n \tprivate final SolrServer solrServer;\n \n@@ -33,15 +33,9 @@ public SolrHealthIndicator(SolrServer solrServer) {\n \t}\n \n \t@Override\n-\tpublic Health health() {\n-\t\tHealth health = new Health();\n-\t\ttry {\n-\t\t\tthis.solrServer.ping();\n-\t\t\treturn health.up().withDetail(\"solrStatus\",\n-\t\t\t\t\tthis.solrServer.ping().getResponse().get(\"status\"));\n-\t\t}\n-\t\tcatch (Exception e) {\n-\t\t\treturn health.down().withException(e);\n-\t\t}\n+\tprotected void doHealthCheck(Health health) throws Exception {\n+\t\tthis.solrServer.ping();\n+\t\thealth.up().withDetail(\"solrStatus\",\n+\t\t\t\tthis.solrServer.ping().getResponse().get(\"status\"));\n \t}\n }",
    "output": "Upgrade SolrHealthIndicator to extend AbstractHealthIndicator"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/OrderedHealthAggregator.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/OrderedHealthAggregator.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/OrderedHealthAggregator.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/OrderedHealthAggregator.java\n@@ -18,6 +18,7 @@\n \n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.Comparator;\n import java.util.List;\n import java.util.Map;\n@@ -61,13 +62,13 @@ protected Status aggregateStatus(List<Status> status) {\n \t\t\treturn Status.UNKOWN;\n \t\t}\n \n-\t\tstatus.sort(new Comparator<Status>() {\n+\t\tCollections.sort(status, new Comparator<Status>() {\n \n \t\t\t@Override\n \t\t\tpublic int compare(Status s1, Status s2) {\n \t\t\t\treturn Integer.valueOf(\n \t\t\t\t\t\tOrderedHealthAggregator.this.statusOrder.indexOf(s1.getCode())).compareTo(\n-\t\t\t\t\t\tInteger.valueOf(OrderedHealthAggregator.this.statusOrder.indexOf(s2.getCode())));\n+\t\t\t\t\t\t\t\tInteger.valueOf(OrderedHealthAggregator.this.statusOrder.indexOf(s2.getCode())));\n \n \t\t\t}\n \t\t});",
    "output": "Remove List.sort usage for Collections.sort"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoDataAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoDataAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoDataAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoDataAutoConfiguration.java\n@@ -21,6 +21,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.context.annotation.Bean;\n@@ -48,6 +49,7 @@\n  */\n @Configuration\n @ConditionalOnClass({ Mongo.class, MongoTemplate.class })\n+@ConditionalOnBean(MongoProperties.class)\n @AutoConfigureAfter(MongoAutoConfiguration.class)\n public class MongoDataAutoConfiguration {\n ",
    "output": "Ensure Mongo autoconfig is easy to exclude"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/redis/RedisAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/redis/RedisAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/redis/RedisAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/redis/RedisAutoConfiguration.java\n@@ -18,7 +18,7 @@\n \n import java.net.UnknownHostException;\n \n-import org.apache.commons.pool.impl.GenericObjectPool;\n+import org.apache.commons.pool2.impl.GenericObjectPool;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;",
    "output": "Upgrade to Jedis 2.4.1 means commons-pool2"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-dependency-tools/src/main/java/org/springframework/boot/dependency/tools/PomManagedDependencies.java b/spring-boot-tools/spring-boot-dependency-tools/src/main/java/org/springframework/boot/dependency/tools/PomManagedDependencies.java\n--- a/spring-boot-tools/spring-boot-dependency-tools/src/main/java/org/springframework/boot/dependency/tools/PomManagedDependencies.java\n+++ b/spring-boot-tools/spring-boot-dependency-tools/src/main/java/org/springframework/boot/dependency/tools/PomManagedDependencies.java\n@@ -45,7 +45,6 @@ public class PomManagedDependencies extends AbstractManagedDependencies {\n \tpublic PomManagedDependencies(InputStream effectivePomInputStream) {\n \t\ttry {\n \t\t\tDocument effectivePom = readDocument(effectivePomInputStream);\n-\n \t\t\tfor (Dependency dependency : readDependencies(effectivePom)) {\n \t\t\t\tadd(new ArtifactAndGroupId(dependency), dependency);\n \t\t\t}",
    "output": "Add spring-boot-versions project\nAdd a new maven project containing a versions.properties file and an effective POM. Rework existing projects to use the versions"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoDataAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoDataAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoDataAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/mongo/MongoDataAutoConfiguration.java\n@@ -19,6 +19,7 @@\n import java.net.UnknownHostException;\n \n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n@@ -47,6 +48,7 @@\n  */\n @Configuration\n @ConditionalOnClass({ Mongo.class, MongoTemplate.class })\n+@AutoConfigureAfter(MongoAutoConfiguration.class)\n public class MongoDataAutoConfiguration {\n \n \t@Autowired",
    "output": "Fix ordering problem with Mongo autoconfig"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java b/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java\n--- a/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java\n@@ -273,7 +273,7 @@ private boolean isComponent(Class<?> type) {\n \t\t}\n \t\t// Nested anonymous classes are not eligible for registration, nor are groovy\n \t\t// closures\n-\t\tif (type.isAnonymousClass() || type.getName().matches(\".*\\\\$_.*closure.*\")\n+\t\tif (type.getName().matches(\".*\\\\$_.*closure.*\") || type.isAnonymousClass()\n \t\t\t\t|| type.getConstructors() == null || type.getConstructors().length == 0) {\n \t\t\treturn false;\n \t\t}",
    "output": "Re-order condition that checks for anonymous class\nWorkaround for ASM 5.0.2 bug that"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchDatabaseInitializer.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchDatabaseInitializer.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchDatabaseInitializer.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchDatabaseInitializer.java\n@@ -68,6 +68,9 @@ protected void initialize() {\n \t\t\tif (\"postgres\".equals(platform)) {\n \t\t\t\tplatform = \"postgresql\";\n \t\t\t}\n+\t\t\tif (\"oracle\".equals(platform)) {\n+\t\t\t\tplatform = \"oracle10g\";\n+\t\t\t}\n \t\t\tResourceDatabasePopulator populator = new ResourceDatabasePopulator();\n \t\t\tString schemaLocation = this.environment.getProperty(\"schema\",\n \t\t\t\t\tDEFAULT_SCHEMA_LOCATION);",
    "output": "Map oracle->oracle10g for Batch schema initialization"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/groovy/template/GroovyTemplateAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/groovy/template/GroovyTemplateAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/groovy/template/GroovyTemplateAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/groovy/template/GroovyTemplateAutoConfiguration.java\n@@ -23,6 +23,8 @@\n \n import java.net.URL;\n import java.net.URLClassLoader;\n+import java.util.ArrayList;\n+import java.util.List;\n \n import javax.servlet.Servlet;\n \n@@ -99,11 +101,14 @@ private ClassLoader createParentLoaderForTemplates() throws Exception {\n \t\t\tResource[] resources = this.resourceLoader.getResources(this.properties\n \t\t\t\t\t.getPrefix());\n \t\t\tif (resources.length > 0) {\n-\t\t\t\tURL[] urls = new URL[resources.length];\n-\t\t\t\tfor (int i = 0; i < resources.length; i++) {\n-\t\t\t\t\turls[i] = resources[i].getURL();\n+\t\t\t\tList<URL> urls = new ArrayList<URL>();\n+\t\t\t\tfor (Resource resource : resources) {\n+\t\t\t\t\tif (resource.exists()) {\n+\t\t\t\t\t\turls.add(resource.getURL());\n+\t\t\t\t\t}\n \t\t\t\t}\n-\t\t\t\treturn new URLClassLoader(urls, this.classLoader);\n+\t\t\t\treturn new URLClassLoader(urls.toArray(new URL[urls.size()]),\n+\t\t\t\t\t\tthis.classLoader);\n \t\t\t}\n \t\t\telse {\n \t\t\t\treturn this.classLoader;",
    "output": "Fix Groovy template URLs"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnExpressionCondition.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnExpressionCondition.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnExpressionCondition.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnExpressionCondition.java\n@@ -30,7 +30,7 @@\n  * @author Dave Syer\n  * @see ConditionalOnExpression\n  */\n-public class OnExpressionCondition extends SpringBootCondition {\n+class OnExpressionCondition extends SpringBootCondition {\n \n \t@Override\n \tpublic ConditionOutcome getMatchOutcome(ConditionContext context,",
    "output": "Make OnExpressionCondition package private\n(consistent with the other Condition implementations)"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RepackageMojo.java b/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RepackageMojo.java\n--- a/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RepackageMojo.java\n+++ b/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RepackageMojo.java\n@@ -110,6 +110,11 @@ public class RepackageMojo extends AbstractDependencyFilterMojo {\n \n \t@Override\n \tpublic void execute() throws MojoExecutionException, MojoFailureException {\n+\t\tif (project.getPackaging().equals(\"pom\")) {\n+\t\t\tgetLog().debug(\"repackage goal could not be applied to pom project.\");\n+\t\t\treturn;\n+\t\t}\n+\n \t\tFile source = this.project.getArtifact().getFile();\n \t\tFile target = getTargetFile();\n \t\tRepackager repackager = new Repackager(source) {",
    "output": "Skip the execution of repackage in parent projects\nIf an execution of the repackage goal is present in a project with\n'pom' packaging, it is now skipped. This allows to configure the\nplugin in the parent."
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfigurationTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfigurationTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfigurationTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfigurationTests.java\n@@ -29,7 +29,7 @@\n import org.crsh.plugin.PluginContext;\n import org.crsh.plugin.PluginLifeCycle;\n import org.crsh.plugin.ResourceKind;\n-import org.crsh.processor.term.ProcessorIOHandler;\n+import org.crsh.telnet.term.processor.ProcessorIOHandler;\n import org.crsh.vfs.Resource;\n import org.junit.After;\n import org.junit.Test;",
    "output": "Upgrade to CRaSH 1.3.0-beta18"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/system/ApplicationPidListener.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/system/ApplicationPidListener.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/system/ApplicationPidListener.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/system/ApplicationPidListener.java\n@@ -80,6 +80,7 @@ public void onApplicationEvent(ApplicationStartedEvent event) {\n \t\tif (created.compareAndSet(false, true)) {\n \t\t\ttry {\n \t\t\t\tnew ApplicationPid().write(this.file);\n+\t\t\t\tthis.file.deleteOnExit();\n \t\t\t}\n \t\t\tcatch (Exception ex) {\n \t\t\t\tlogger.warn(String.format(\"Cannot create pid file %s\", this.file));",
    "output": "Registering PID file to be deleted on JVM exit"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java\n@@ -96,9 +96,11 @@ protected void initialize() throws Exception {\n \n \t\tString schema = this.datasourceProperties.getProperty(\"schema\");\n \t\tif (schema == null) {\n-\t\t\tschema = \"classpath*:schema-\"\n-\t\t\t\t\t+ this.datasourceProperties.getProperty(\"platform\", \"all\")\n-\t\t\t\t\t+ \".sql,classpath*:schema.sql,classpath*:data.sql\";\n+\t\t\tString platform = this.datasourceProperties.getProperty(\"platform\", \"all\");\n+\t\t\tschema = \"classpath*:schema-\" + platform + \".sql,\";\n+\t\t\tschema += \"classpath*:schema.sql,\";\n+\t\t\tschema += \"classpath*:data-\" + platform + \".sql,\";\n+\t\t\tschema += \"classpath*:data.sql\";\n \t\t}\n \n \t\tList<Resource> resources = new ArrayList<Resource>();",
    "output": "Read data-{platform}.sql in addition to data.sql"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java\n@@ -96,9 +96,11 @@ protected void initialize() throws Exception {\n \n \t\tString schema = this.datasourceProperties.getProperty(\"schema\");\n \t\tif (schema == null) {\n-\t\t\tschema = \"classpath*:schema-\"\n-\t\t\t\t\t+ this.datasourceProperties.getProperty(\"platform\", \"all\")\n-\t\t\t\t\t+ \".sql,classpath*:schema.sql,classpath*:data.sql\";\n+\t\t\tString platform = this.datasourceProperties.getProperty(\"platform\", \"all\");\n+\t\t\tschema = \"classpath*:schema-\" + platform + \".sql,\";\n+\t\t\tschema += \"classpath*:schema.sql,\";\n+\t\t\tschema += \"classpath*:data-\" + platform + \".sql,\";\n+\t\t\tschema += \"classpath*:data.sql\";\n \t\t}\n \n \t\tList<Resource> resources = new ArrayList<Resource>();",
    "output": "Read data-{platform}.sql in addition to data.sql\nUpdate DataSourceAutoConfiguration to read platform specific `data.sql`\nfiles in the same way as `schema.sql` files."
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/SimpleDataSourceHealthIndicatorTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/SimpleDataSourceHealthIndicatorTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/SimpleDataSourceHealthIndicatorTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/health/SimpleDataSourceHealthIndicatorTests.java\n@@ -40,7 +40,7 @@\n  * \n  * @author Dave Syer\n  */\n-public class SimpleHealthIndicatorTests {\n+public class SimpleDataSourceHealthIndicatorTests {\n \n \tprivate final SimpleDataSourceHealthIndicator indicator = new SimpleDataSourceHealthIndicator();\n \tprivate DriverManagerDataSource dataSource;",
    "output": "Rename missing test"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/SimpleDataSourceHealthIndicator.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/SimpleDataSourceHealthIndicator.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/SimpleDataSourceHealthIndicator.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/SimpleDataSourceHealthIndicator.java\n@@ -35,7 +35,7 @@\n  * \n  * @author Dave Syer\n  */\n-public class SimpleHealthIndicator implements HealthIndicator<Map<String, Object>> {\n+public class SimpleDataSourceHealthIndicator implements HealthIndicator<Map<String, Object>> {\n \n \tprivate DataSource dataSource;\n \n@@ -55,16 +55,16 @@ public class SimpleHealthIndicator implements HealthIndicator<Map<String, Object\n \tprivate String query = null;\n \n \t/**\n-\t * Create a new {@link SimpleHealthIndicator} instance.\n+\t * Create a new {@link SimpleDataSourceHealthIndicator} instance.\n \t */\n-\tpublic SimpleHealthIndicator() {\n+\tpublic SimpleDataSourceHealthIndicator() {\n \t}\n \n \t/**\n-\t * Create a new {@link SimpleHealthIndicator} using the specified datasource.\n+\t * Create a new {@link SimpleDataSourceHealthIndicator} using the specified datasource.\n \t * @param dataSource the data source\n \t */\n-\tpublic SimpleHealthIndicator(DataSource dataSource) {\n+\tpublic SimpleDataSourceHealthIndicator(DataSource dataSource) {\n \t\tthis.dataSource = dataSource;\n \t\tthis.jdbcTemplate = new JdbcTemplate(dataSource);\n \t}",
    "output": "Rename SimpleHealthIndicator to SimpleDataSourceHealthIndicator"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RunMojo.java b/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RunMojo.java\n--- a/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RunMojo.java\n+++ b/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RunMojo.java\n@@ -22,6 +22,7 @@\n import java.net.URL;\n import java.security.CodeSource;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n \n import org.apache.maven.artifact.Artifact;\n@@ -40,8 +41,6 @@\n import org.springframework.boot.loader.tools.MainClassFinder;\n import org.springframework.boot.loader.tools.RunProcess;\n \n-import edu.emory.mathcs.backport.java.util.Arrays;\n-\n /**\n  * Run an executable archive application.\n  * ",
    "output": "Fix wrong import"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-flyway/src/test/java/sample/flyway/SampleFlywayApplicationTests.java b/spring-boot-samples/spring-boot-sample-flyway/src/test/java/sample/flyway/SampleFlywayApplicationTests.java\n--- a/spring-boot-samples/spring-boot-sample-flyway/src/test/java/sample/flyway/SampleFlywayApplicationTests.java\n+++ b/spring-boot-samples/spring-boot-sample-flyway/src/test/java/sample/flyway/SampleFlywayApplicationTests.java\n@@ -27,7 +27,7 @@\n \n @RunWith(SpringJUnit4ClassRunner.class)\n @SpringApplicationConfiguration(classes=SampleFlywayApplication.class)\n-public class SampleLiquibaseApplicationTests {\n+public class SampleFlywayApplicationTests {\n \t\n \t@Autowired\n \tprivate JdbcTemplate template;",
    "output": "Fix samples that need jdbc and don't import it"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/JvmUtils.java b/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/JvmUtils.java\n--- a/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/JvmUtils.java\n+++ b/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/JvmUtils.java\n@@ -17,6 +17,7 @@\n package org.springframework.boot.loader.tools;\n \n import java.io.File;\n+import java.net.MalformedURLException;\n import java.net.URL;\n import java.net.URLClassLoader;\n \n@@ -42,7 +43,7 @@ public static URL getToolsJarUrl() {\n \t\tString javaHome = getJavaHome();\n \t\tfor (String location : TOOLS_LOCATIONS) {\n \t\t\ttry {\n-\t\t\t\tURL url = new URL(\"file://\" + javaHome + \"/\" + location);\n+\t\t\t\tURL url = new URL(javaHome + \"/\" + location);\n \t\t\t\tif (new File(url.toURI()).exists()) {\n \t\t\t\t\treturn url;\n \t\t\t\t}\n@@ -55,7 +56,13 @@ public static URL getToolsJarUrl() {\n \t}\n \n \tprivate static String getJavaHome() {\n-\t\treturn System.getProperty(\"java.home\");\n+\t\ttry {\n+\t\t\treturn new File(System.getProperty(\"java.home\")).toURI().toURL()\n+\t\t\t\t\t.toExternalForm();\n+\t\t}\n+\t\tcatch (MalformedURLException e) {\n+\t\t\tthrow new IllegalStateException(\"Cannot locate java.home\", e);\n+\t\t}\n \t}\n \n }",
    "output": "Normalize paths in JvmUtils\nFixes problem in Windoze where file paths cannot be so easily\nconverted to URLs."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/freemarker/FreeMarkerAutoConfiguration.java\n@@ -93,7 +93,6 @@ public void checkTemplateLocationExists() {\n \t}\n \n \t@Configuration\n-\t@ConditionalOnClass(Servlet.class)\n \t@ConditionalOnNotWebApplication\n \tpublic static class FreeMarkerConfiguration implements EnvironmentAware {\n \n@@ -137,7 +136,7 @@ public void setEnvironment(Environment environment) {\n \t\t}\n \n \t\t@Bean\n-\t\t@ConditionalOnBean(FreeMarkerConfig.class)\n+\t\t@ConditionalOnBean(FreeMarkerConfigurer.class)\n \t\t@ConditionalOnMissingBean\n \t\tpublic freemarker.template.Configuration freemarkerConfiguration(\n \t\t\t\tFreeMarkerConfig configurer) {",
    "output": "Fix test in FreeMarker support"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-simple/src/test/java/sample/simple/SpringTestSampleSimpleApplicationTests.java b/spring-boot-samples/spring-boot-sample-simple/src/test/java/sample/simple/SpringTestSampleSimpleApplicationTests.java\n--- a/spring-boot-samples/spring-boot-sample-simple/src/test/java/sample/simple/SpringTestSampleSimpleApplicationTests.java\n+++ b/spring-boot-samples/spring-boot-sample-simple/src/test/java/sample/simple/SpringTestSampleSimpleApplicationTests.java\n@@ -16,9 +16,14 @@\n \n package sample.simple;\n \n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n import org.junit.Test;\n import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.SpringApplicationConfiguration;\n+import org.springframework.context.ApplicationContext;\n import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n \n /**\n@@ -30,8 +35,14 @@\n @SpringApplicationConfiguration(classes = SampleSimpleApplication.class)\n public class SpringTestSampleSimpleApplicationTests {\n \n+\t@Autowired\n+\tApplicationContext ctx;\n+\n \t@Test\n \tpublic void testContextLoads() throws Exception {\n+\t\tassertNotNull(ctx);\n+\t\tassertTrue(ctx.containsBean(\"helloWorldService\"));\n+\t\tassertTrue(ctx.containsBean(\"sampleSimpleApplication\"));\n \t}\n \n }",
    "output": "Minor improvement in simple sample test"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-data-jpa/src/main/java/sample/data/jpa/domain/Review.java b/spring-boot-samples/spring-boot-sample-data-jpa/src/main/java/sample/data/jpa/domain/Review.java\n--- a/spring-boot-samples/spring-boot-sample-data-jpa/src/main/java/sample/data/jpa/domain/Review.java\n+++ b/spring-boot-samples/spring-boot-sample-data-jpa/src/main/java/sample/data/jpa/domain/Review.java\n@@ -43,7 +43,7 @@ public class Review implements Serializable {\n \t@ManyToOne(optional = false)\n \tprivate Hotel hotel;\n \n-\t@Column(nullable = false)\n+\t@Column(nullable = false, name = \"idx\")\n \tprivate int index;\n \n \t@Column(nullable = false)",
    "output": "Replace column name using reserved keyword\nThis commit replaces the \"index\" property of Review to use a custom\ncolumn name (\"idx\") as index is a reserved keyword in some RDMS such\nas Oracle and MySQL."
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/EmbeddedServletContainer.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/EmbeddedServletContainer.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/EmbeddedServletContainer.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/EmbeddedServletContainer.java\n@@ -29,28 +29,6 @@\n  */\n public interface EmbeddedServletContainer {\n \n-\t/**\n-\t * An empty {@link EmbeddedServletContainer} that does nothing.\n-\t */\n-\tpublic static final EmbeddedServletContainer NONE = new EmbeddedServletContainer() {\n-\n-\t\t@Override\n-\t\tpublic void start() throws EmbeddedServletContainerException {\n-\t\t\t// Do nothing\n-\t\t};\n-\n-\t\t@Override\n-\t\tpublic void stop() throws EmbeddedServletContainerException {\n-\t\t\t// Do nothing\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic int getPort() {\n-\t\t\treturn 0;\n-\t\t}\n-\n-\t};\n-\n \t/**\n \t * Starts the embedded servlet container. Calling this method on an already started\n \t * container has no effect.",
    "output": "Remove obsolete EmbeddedServletContainer.NONE"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfiguration.java\n@@ -29,6 +29,7 @@\n import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;\n import org.springframework.boot.autoconfigure.security.SecurityProperties.Headers;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.core.Ordered;\n@@ -90,8 +91,9 @@ public class SpringBootWebSecurityConfiguration {\n \n \t@Bean\n \t@ConditionalOnMissingBean\n-\tpublic AuthenticationEventPublisher authenticationEventPublisher() {\n-\t\treturn new DefaultAuthenticationEventPublisher();\n+\tpublic AuthenticationEventPublisher authenticationEventPublisher(\n+\t\t\tApplicationEventPublisher publisher) {\n+\t\treturn new DefaultAuthenticationEventPublisher(publisher);\n \t}\n \n \t@Bean",
    "output": "Add ApplicationEventPublisher explicitly to security publisher\nFor some reason the exception mappings are only created with the\npublisher is initialized in the constructor of DefaultAuthenticationEventPublisher.\nChanged SpringBootWebSecurityConfiguration to do that rather then\nrelying on the ApplicationEventPublisherAware behaviour to inject it."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java\n@@ -118,6 +118,7 @@ protected void initialize() throws Exception {\n \t\t\t\tpopulator.setContinueOnError(continueOnError);\n \t\t\t}\n \t\t}\n+\t\tpopulator.setSeparator(this.datasourceProperties.getProperty(\"separator\", \";\"));\n \n \t\tif (exists) {\n \t\t\tDatabasePopulatorUtils.execute(populator, this.dataSource);",
    "output": "Add spring.datasource.separator (default \";\")"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java\n--- a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java\n+++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/jar/JarFileTests.java\n@@ -90,6 +90,7 @@ public void jdkJarFile() throws Exception {\n \t\tURL jarUrl = new URL(\"jar:\" + this.rootJarFile.toURI() + \"!/\");\n \t\tURLClassLoader urlClassLoader = new URLClassLoader(new URL[] { jarUrl });\n \t\tassertThat(urlClassLoader.getResource(\"special/\\u00EB.dat\"), notNullValue());\n+\t\tassertThat(urlClassLoader.getResource(\"d/9.dat\"), notNullValue());\n \t}\n \n \t@Test",
    "output": "Add assertion about non-special resource"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringWebsocketCompilerAutoConfiguration.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringWebsocketCompilerAutoConfiguration.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringWebsocketCompilerAutoConfiguration.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringWebsocketCompilerAutoConfiguration.java\n@@ -47,9 +47,10 @@ public void applyDependencies(DependencyCustomizer dependencies) {\n \tpublic void applyImports(ImportCustomizer imports) {\n \t\timports.addStarImports(\"org.springframework.messaging.handler.annotation\",\n \t\t\t\t\"org.springframework.messaging.simp.config\",\n-\t\t\t\t\"org.springframework.web.socket\",\n \t\t\t\t\"org.springframework.web.socket.handler\",\n-\t\t\t\t\"org.springframework.web.socket.config.annotation\");\n+\t\t\t\t\"org.springframework.web.socket.sockjs.transport.handler\",\n+\t\t\t\t\"org.springframework.web.socket.config.annotation\").addImports(\n+\t\t\t\t\"org.springframework.web.socket.WebSocketHandler\");\n \t}\n \n }",
    "output": "Tweak autoconfigs in websocket support"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RunMojo.java b/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RunMojo.java\n--- a/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RunMojo.java\n+++ b/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RunMojo.java\n@@ -110,7 +110,7 @@ public void execute() throws MojoExecutionException, MojoFailureException {\n \t\t\tgetLog().info(\"Attaching agent: \" + this.agent);\n \t\t\tif (this.noverify != null && this.noverify && !AgentAttacher.hasNoVerify()) {\n \t\t\t\tthrow new MojoExecutionException(\n-\t\t\t\t\t\t\"The JVM must be started with -noverify for this agent to work. You can use MAVEN_OPTS to add that flag.\");\n+\t\t\t\t\t\t\"The JVM must be started with -noverify for this agent to work. You can use MAVEN_OPTS=-noverify to add that flag.\");\n \t\t\t}\n \t\t\tAgentAttacher.attach(this.agent);\n \t\t}",
    "output": "Print MAVEN_OPTS=-noverify for copy-pasters"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java b/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java\n@@ -318,6 +318,17 @@ public void yamlProfiles() throws Exception {\n \t\tassertThat(property, equalTo(\"notempty\"));\n \t}\n \n+\t@Test\n+\tpublic void yamlTwoProfiles() throws Exception {\n+\t\tthis.initializer.setSearchNames(\"testprofiles\");\n+\t\tthis.environment.setActiveProfiles(\"other\", \"dev\");\n+\t\tthis.initializer.onApplicationEvent(this.event);\n+\t\tString property = this.environment.getProperty(\"my.property\");\n+\t\tassertThat(property, equalTo(\"fromotherprofile\"));\n+\t\tproperty = this.environment.getProperty(\"my.other\");\n+\t\tassertThat(property, equalTo(\"notempty\"));\n+\t}\n+\n \t@Test\n \tpublic void yamlSetsProfiles() throws Exception {\n \t\tthis.initializer.setSearchNames(\"testsetprofiles\");",
    "output": "Add test for"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainer.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainer.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainer.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/jetty/JettyEmbeddedServletContainer.java\n@@ -103,15 +103,16 @@ public void start() throws EmbeddedServletContainerException {\n \t\t}\n \t}\n \n-\tprivate String getLocalPort(Connector connector) {\n+\tprivate Integer getLocalPort(Connector connector) {\n \t\ttry {\n \t\t\t// Jetty 9 internals are different, but the method name is the same\n-\t\t\treturn ((Integer) ReflectionUtils.invokeMethod(\n+\t\t\treturn (Integer) ReflectionUtils.invokeMethod(\n \t\t\t\t\tReflectionUtils.findMethod(connector.getClass(), \"getLocalPort\"),\n-\t\t\t\t\tconnector)).toString();\n+\t\t\t\t\tconnector);\n \t\t}\n \t\tcatch (Exception ex) {\n-\t\t\treturn \"could not determine port ( \" + ex.getMessage() + \")\";\n+\t\t\tthis.logger.info(\"could not determine port ( \" + ex.getMessage() + \")\");\n+\t\t\treturn 0;\n \t\t}\n \t}\n \n@@ -134,7 +135,7 @@ public int getPort() {\n \t\tConnector[] connectors = this.server.getConnectors();\n \t\tfor (Connector connector : connectors) {\n \t\t\t// Probably only one...\n-\t\t\treturn connector.getLocalPort();\n+\t\t\treturn getLocalPort(connector);\n \t\t}\n \t\treturn 0;\n \t}",
    "output": "Extend use of reflection for port in Jetty 9\nThere was already a reflection hack in place for logging the local\nport in Jetty 8/9. It wasn't being used for the getPort() method\nfor some reason, so that needed to be fixed."
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/BeanDefinitionLoaderTests.java b/spring-boot/src/test/java/org/springframework/boot/BeanDefinitionLoaderTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/BeanDefinitionLoaderTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/BeanDefinitionLoaderTests.java\n@@ -70,6 +70,17 @@ public void loadGroovyResource() throws Exception {\n \n \t}\n \n+\t@Test\n+\tpublic void loadGroovyResourceWithNamespace() throws Exception {\n+\t\tClassPathResource resource = new ClassPathResource(\"sample-namespace.groovy\",\n+\t\t\t\tgetClass());\n+\t\tBeanDefinitionLoader loader = new BeanDefinitionLoader(this.registry, resource);\n+\t\tint loaded = loader.load();\n+\t\tassertThat(loaded, equalTo(1));\n+\t\tassertTrue(this.registry.containsBean(\"myGroovyComponent\"));\n+\n+\t}\n+\n \t@Test\n \tpublic void loadPackage() throws Exception {\n \t\tBeanDefinitionLoader loader = new BeanDefinitionLoader(this.registry,",
    "output": "Add test for groovy-xml parsing"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java b/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java\n--- a/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java\n@@ -81,7 +81,7 @@ public BeanDefinitionLoader(BeanDefinitionRegistry registry, Object... sources)\n \t\tthis.annotatedReader = new AnnotatedBeanDefinitionReader(registry);\n \t\tthis.xmlReader = new XmlBeanDefinitionReader(registry);\n \t\tif (isGroovyPresent()) {\n-\t\t\tthis.groovyReader = new GroovyBeanDefinitionReader(this.xmlReader);\n+\t\t\tthis.groovyReader = new GroovyBeanDefinitionReader(registry);\n \t\t}\n \t\tthis.scanner = new ClassPathBeanDefinitionScanner(registry);\n \t\tthis.scanner.addExcludeFilter(new ClassExcludeFilter(sources));",
    "output": "Ensure Groovy bean builder does not enforec XML validation\nSince it is not parsing XML it makes no sense to be validating\nand it would cause exceptions when importing \"namespace\"\nfeatures. This brings the Boot usage of the bean builder inline\nwith that in Spring Core."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/MessageSourceAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/MessageSourceAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/MessageSourceAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/MessageSourceAutoConfiguration.java\n@@ -58,6 +58,8 @@ public MessageSource messageSource() {\n \t\t}\n \t\tString encoding = this.environment.getProperty(\"encoding\", \"utf-8\");\n \t\tmessageSource.setDefaultEncoding(encoding);\n+\t\tmessageSource.setCacheSeconds(this.environment.getProperty(\"cacheSeconds\",\n+\t\t\t\tInteger.class, -1));\n \t\treturn messageSource;\n \t}\n ",
    "output": "Add spring.messages.cacheSeconds to global config"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RunMojo.java b/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RunMojo.java\n--- a/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RunMojo.java\n+++ b/spring-boot-tools/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RunMojo.java\n@@ -37,7 +37,6 @@\n import org.apache.maven.plugins.annotations.Parameter;\n import org.apache.maven.plugins.annotations.ResolutionScope;\n import org.apache.maven.project.MavenProject;\n-import org.codehaus.plexus.util.FileUtils;\n import org.springframework.boot.loader.tools.AgentAttacher;\n import org.springframework.boot.loader.tools.MainClassFinder;\n \n@@ -208,11 +207,11 @@ private void removeDuplicatesFromTarget(File directory) throws IOException {\n \t\t\tfor (String name : directory.list()) {\n \t\t\t\tFile targetFile = new File(this.classesDirectory, name);\n \t\t\t\tif (targetFile.exists() && targetFile.canWrite()) {\n-\t\t\t\t\tif (targetFile.isDirectory()) {\n-\t\t\t\t\t\tFileUtils.deleteDirectory(targetFile);\n+\t\t\t\t\tif (!targetFile.isDirectory()) {\n+\t\t\t\t\t\ttargetFile.delete();\n \t\t\t\t\t}\n \t\t\t\t\telse {\n-\t\t\t\t\t\ttargetFile.delete();\n+\t\t\t\t\t\tremoveDuplicatesFromTarget(targetFile);\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}",
    "output": "Do not delete duplicate directories from main classpath\nBefore this change we were too aggressive in deleting duplicate resources\nsince directories might not have identical contents, and yet they were\nbeing deleted anyway."
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/SimpleHealthIndicator.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/SimpleHealthIndicator.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/SimpleHealthIndicator.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/health/SimpleHealthIndicator.java\n@@ -50,7 +50,7 @@ public class SimpleHealthIndicator implements HealthIndicator<Map<String, Object\n \t\tqueries.put(\"Apache Derby\", \"SELECT 1 FROM SYSIBM.SYSDUMMY1\");\n \t}\n \n-\tprivate static String DEFAULT_QUERY = \"SELECT 'Hello'\";\n+\tprivate static String DEFAULT_QUERY = \"SELECT 1\";\n \n \tprivate String query = null;\n ",
    "output": "Switch default query to 'select 1'"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/bind/RelaxedDataBinderTests.java b/spring-boot/src/test/java/org/springframework/boot/bind/RelaxedDataBinderTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/bind/RelaxedDataBinderTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/bind/RelaxedDataBinderTests.java\n@@ -235,6 +235,14 @@ public void testBindNestedReadOnlyListIndexed() throws Exception {\n \t\tassertEquals(\"[bar, foo]\", target.getNested().toString());\n \t}\n \n+\t@Test\n+\tpublic void testBindDoubleNestedReadOnlyListIndexed() throws Exception {\n+\t\tTargetWithReadOnlyDoubleNestedList target = new TargetWithReadOnlyDoubleNestedList();\n+\t\tthis.conversionService = new DefaultConversionService();\n+\t\tbind(target, \"bean.nested[0]:bar\\nbean.nested[1]:foo\");\n+\t\tassertEquals(\"[bar, foo]\", target.getBean().getNested().toString());\n+\t}\n+\n \t@Test\n \tpublic void testBindNestedReadOnlyCollectionIndexed() throws Exception {\n \t\tTargetWithReadOnlyNestedCollection target = new TargetWithReadOnlyNestedCollection();\n@@ -561,6 +569,14 @@ public List<String> getNested() {\n \t\t}\n \t}\n \n+\tpublic static class TargetWithReadOnlyDoubleNestedList {\n+\t\tTargetWithReadOnlyNestedList bean = new TargetWithReadOnlyNestedList();\n+\n+\t\tpublic TargetWithReadOnlyNestedList getBean() {\n+\t\t\treturn this.bean;\n+\t\t}\n+\t}\n+\n \tpublic static class TargetWithReadOnlyNestedCollection {\n \t\tprivate final Collection<String> nested = new ArrayList<String>();\n ",
    "output": "Add extra test for nested list binding"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/env/PropertySourcesLoader.java b/spring-boot/src/main/java/org/springframework/boot/env/PropertySourcesLoader.java\n--- a/spring-boot/src/main/java/org/springframework/boot/env/PropertySourcesLoader.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/env/PropertySourcesLoader.java\n@@ -168,7 +168,7 @@ private void addPropertySource(String basename, PropertySource<?> source,\n \n \t\tEnumerableCompositePropertySource group = getGeneric(basename);\n \t\tgroup.add(source);\n-\t\tlogger.info(\"Adding PropertySource: \" + source + \" in group: \" + basename);\n+\t\tlogger.trace(\"Adding PropertySource: \" + source + \" in group: \" + basename);\n \t\tif (this.propertySources.contains(group.getName())) {\n \t\t\tthis.propertySources.replace(group.getName(), group);\n \t\t}",
    "output": "Change logging level on PropertySourcesLoader\nReduce logging level to trace to remove the ugly output that appears\nabove the banner."
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/cloudfoundry/VcapApplicationListenerTests.java b/spring-boot/src/test/java/org/springframework/boot/cloudfoundry/VcapApplicationListenerTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/cloudfoundry/VcapApplicationListenerTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/cloudfoundry/VcapApplicationListenerTests.java\n@@ -75,4 +75,15 @@ public void testServiceProperties() {\n \t\tassertEquals(\"mysql\",\n \t\t\t\tthis.context.getEnvironment().getProperty(\"vcap.services.mysql.name\"));\n \t}\n+\n+\t@Test\n+\tpublic void testServicePropertiesWithoutNA() {\n+\t\tEnvironmentTestUtils\n+\t\t\t\t.addEnvironment(\n+\t\t\t\t\t\tthis.context,\n+\t\t\t\t\t\t\"VCAP_SERVICES:{\\\"rds-mysql\\\":[{\\\"name\\\":\\\"mysql\\\",\\\"label\\\":\\\"rds-mysql\\\",\\\"plan\\\":\\\"10mb\\\",\\\"credentials\\\":{\\\"name\\\":\\\"d04fb13d27d964c62b267bbba1cffb9da\\\",\\\"hostname\\\":\\\"mysql-service-public.clqg2e2w3ecf.us-east-1.rds.amazonaws.com\\\",\\\"host\\\":\\\"mysql-service-public.clqg2e2w3ecf.us-east-1.rds.amazonaws.com\\\",\\\"port\\\":3306,\\\"user\\\":\\\"urpRuqTf8Cpe6\\\",\\\"username\\\":\\\"urpRuqTf8Cpe6\\\",\\\"password\\\":\\\"pxLsGVpsC9A5S\\\"}}]}\");\n+\t\tthis.initializer.onApplicationEvent(this.event);\n+\t\tassertEquals(\"mysql\",\n+\t\t\t\tthis.context.getEnvironment().getProperty(\"vcap.services.mysql.name\"));\n+\t}\n }",
    "output": "Ensure new VCAP_SERVICES format works"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-web-secure/src/main/java/sample/ui/secure/SampleSecureApplication.java b/spring-boot-samples/spring-boot-sample-web-secure/src/main/java/sample/ui/secure/SampleSecureApplication.java\n--- a/spring-boot-samples/spring-boot-sample-web-secure/src/main/java/sample/ui/secure/SampleSecureApplication.java\n+++ b/spring-boot-samples/spring-boot-sample-web-secure/src/main/java/sample/ui/secure/SampleSecureApplication.java\n@@ -52,8 +52,7 @@ public String foo() {\n \n \tpublic static void main(String[] args) throws Exception {\n \t\t// Set user password to \"password\" for demo purposes only\n-\t\tnew SpringApplicationBuilder(SampleSecureApplication.class).properties(\n-\t\t\t\t\"security.basic.enabled=false\", \"security.user.password=password\").run(\n+\t\tnew SpringApplicationBuilder(SampleSecureApplication.class).properties(\"security.user.password=password\").run(\n \t\t\t\targs);\n \t}\n ",
    "output": "Switch default security filter back on\nIf the user sets security.basic.enabled=false he has to remember\nto @EnableWebSecurity.  Possibly we could be more helpful about the\nexception, but I think this might be pilot error."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java\n@@ -238,7 +238,8 @@ private void addStaticIndexHtmlViewControllers(ViewControllerRegistry registry)\n \t\t\t\t\tcatch (IOException ex) {\n \t\t\t\t\t\t// Ignore\n \t\t\t\t\t}\n-\t\t\t\t\tregistry.addViewController(\"/\").setViewName(\"/index.html\");\n+\t\t\t\t\t// Use forward: prefix so that no view resolution is done\n+\t\t\t\t\tregistry.addViewController(\"/\").setViewName(\"forward:/index.html\");\n \t\t\t\t\treturn;\n \t\t\t\t}\n \t\t\t}",
    "output": "Use forward:/index.html for home page"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringBootCompilerAutoConfiguration.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringBootCompilerAutoConfiguration.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringBootCompilerAutoConfiguration.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringBootCompilerAutoConfiguration.java\n@@ -64,7 +64,8 @@ public void applyImports(ImportCustomizer imports) {\n \t\t\t\t\"org.springframework.core.io.ResourceLoader\",\n \t\t\t\t\"org.springframework.boot.CommandLineRunner\",\n \t\t\t\t\"org.springframework.boot.autoconfigure.EnableAutoConfiguration\");\n-\t\timports.addStarImports(\"org.springframework.stereotype\");\n+\t\timports.addStarImports(\"org.springframework.stereotype\",\n+\t\t\t\t\"org.springframework.scheduling.annotation\");\n \t}\n \n \t@Override",
    "output": "Automatically add schedule annotation imports"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java b/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/context/config/ConfigFileApplicationListenerTests.java\n@@ -110,6 +110,19 @@ public void loadTwoPropertiesFilesWithProfiles() throws Exception {\n \t\tassertThat(property, equalTo(\"fromotherpropertiesfile\"));\n \t}\n \n+\t@Test\n+\tpublic void loadTwoPropertiesFilesWithProfilesAndSwitchOneOff() throws Exception {\n+\t\tEnvironmentTestUtils.addEnvironment(this.environment, \"spring.config.location:\"\n+\t\t\t\t+ \"classpath:enabletwoprofiles.properties,\"\n+\t\t\t\t+ \"classpath:enableprofile.properties\");\n+\t\tthis.initializer.onApplicationEvent(this.event);\n+\t\tassertEquals(\"myprofile\",\n+\t\t\t\tStringUtils.arrayToCommaDelimitedString(this.environment\n+\t\t\t\t\t\t.getActiveProfiles()));\n+\t\tString property = this.environment.getProperty(\"my.property\");\n+\t\tassertThat(property, equalTo(\"fromtwopropertiesfile\"));\n+\t}\n+\n \t@Test\n \tpublic void localFileTakesPrecedenceOverClasspath() throws Exception {\n \t\tFile localFile = new File(new File(\".\"), \"application.properties\");",
    "output": "Add further test for activating profiles\nThe new test asserts that a profile defined in one profile can be\nswitched off in another. Seems to work.\nMore"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java\n@@ -61,6 +61,7 @@\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.core.SpringVersion;\n+import org.springframework.core.env.Environment;\n import org.springframework.core.io.Resource;\n import org.springframework.core.io.support.ResourcePatternResolver;\n import org.springframework.security.access.AccessDecisionManager;\n@@ -198,6 +199,9 @@ public static class CrshBootstrapBean extends PluginLifeCycle {\n \t\t@Autowired\n \t\tprivate ListableBeanFactory beanFactory;\n \n+\t\t@Autowired\n+\t\tprivate Environment environment;\n+\n \t\t@Autowired\n \t\tprivate ShellProperties properties;\n \n@@ -250,6 +254,9 @@ protected Map<String, Object> createPluginContextAttributes() {\n \t\t\tif (this.beanFactory != null) {\n \t\t\t\tattributes.put(\"spring.beanfactory\", this.beanFactory);\n \t\t\t}\n+\t\t\tif (this.environment != null) {\n+\t\t\t\tattributes.put(\"spring.environment\", this.environment);\n+\t\t\t}\n \t\t\treturn attributes;\n \t\t}\n ",
    "output": "Add Environment to shell context; disable shell banner if spring.main.show_banner is set to false"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ShellProperties.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ShellProperties.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ShellProperties.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ShellProperties.java\n@@ -167,6 +167,8 @@ protected void validateCrshShellConfig(Properties properties) {\n \t\t\t\t\t\t\t+ \"configured method '%s'. Please check your classpath.\",\n \t\t\t\t\tfinalAuth, this.auth));\n \t\t}\n+\t\t// Make sure we keep track of final authentication method\n+\t\tthis.auth = finalAuth;\n \t}\n \n \t/**",
    "output": "Add endpoint command to shell\nfixex"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/RegistrationBean.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/RegistrationBean.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/RegistrationBean.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/RegistrationBean.java\n@@ -22,6 +22,7 @@\n import javax.servlet.Registration;\n \n import org.springframework.core.Conventions;\n+import org.springframework.core.Ordered;\n import org.springframework.util.Assert;\n \n /**\n@@ -32,10 +33,12 @@\n  * @see FilterRegistrationBean\n  * @see ServletListenerRegistrationBean\n  */\n-public abstract class RegistrationBean implements ServletContextInitializer {\n+public abstract class RegistrationBean implements ServletContextInitializer, Ordered {\n \n \tprivate String name;\n \n+\tprivate int order = Ordered.LOWEST_PRECEDENCE;\n+\n \tprivate boolean asyncSupported = true;\n \n \tprivate Map<String, String> initParameters = new LinkedHashMap<String, String>();\n@@ -113,4 +116,19 @@ protected void configure(Registration.Dynamic registration) {\n \t\t}\n \t}\n \n+\t/**\n+\t * @param order the order to set\n+\t */\n+\tpublic void setOrder(int order) {\n+\t\tthis.order = order;\n+\t}\n+\n+\t/**\n+\t * @return the order\n+\t */\n+\t@Override\n+\tpublic int getOrder() {\n+\t\treturn this.order;\n+\t}\n+\n }",
    "output": "Add Ordered to RegistrationBean"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-web-ui/src/test/java/sample/ui/MessageControllerWebTests.java b/spring-boot-samples/spring-boot-sample-web-ui/src/test/java/sample/ui/MessageControllerWebTests.java\n--- a/spring-boot-samples/spring-boot-sample-web-ui/src/test/java/sample/ui/MessageControllerWebTests.java\n+++ b/spring-boot-samples/spring-boot-sample-web-ui/src/test/java/sample/ui/MessageControllerWebTests.java\n@@ -26,6 +26,7 @@\n  * A Basic Spring MVC Test for the Sample Controller\"\n  * \n  * @author Biju Kunjummen\n+ * @author Doo-Hwan, Kwak\n  */\n @RunWith(SpringJUnit4ClassRunner.class)\n @WebAppConfiguration\n@@ -55,6 +56,13 @@ public void testCreate() throws Exception {\n \t\t\t\t.andExpect(header().string(\"location\", RegexMatcher.matches(\"/[0-9]+\")));\n \t}\n \n+    @Test\n+    public void testCreateValidation() throws Exception{\n+        this.mockMvc.perform(post(\"/\").param(\"text\", \"\").param(\"summary\", \"\"))\n+                .andExpect(status().isOk())\n+                .andExpect(content().string(containsString(\"is required\")));\n+    }\n+\n \tprivate static class RegexMatcher extends TypeSafeMatcher<String> {\n \t\tprivate final String regex;\n ",
    "output": "Add validation test to ws sample"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java b/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/logging/logback/LogbackLoggingSystemTests.java\n@@ -51,7 +51,11 @@ public class LogbackLoggingSystemTests {\n \t@Before\n \tpublic void setup() {\n \t\tthis.logger = new SLF4JLogFactory().getInstance(getClass().getName());\n-\t\tnew File(\"/tmp/spring.log\").delete();\n+\t\tnew File(tmpDir() + \"/spring.log\").delete();\n+\t}\n+\n+\tprivate String tmpDir() {\n+\t\treturn System.getProperty(\"java.io.tmpdir\");\n \t}\n \n \t@After\n@@ -68,8 +72,9 @@ public void testNonDefaultConfigLocation() throws Exception {\n \t\tthis.logger.info(\"Hello world\");\n \t\tString output = this.output.toString().trim();\n \t\tassertTrue(\"Wrong output:\\n\" + output, output.contains(\"Hello world\"));\n-\t\tassertTrue(\"Wrong output:\\n\" + output, output.contains(\"/tmp/spring.log\"));\n-\t\tassertFalse(new File(\"/tmp/spring.log\").exists());\n+\t\tassertTrue(\"Wrong output (not \" + tmpDir() + \" :\\n\" + output,\n+\t\t\t\toutput.contains(tmpDir() + \"/tmp.log\"));\n+\t\tassertFalse(new File(tmpDir() + \"/tmp.log\").exists());\n \t}\n \n \t@Test(expected = IllegalStateException.class)",
    "output": "More defensive testing of tmpdir"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/logging/LoggingApplicationListenerTests.java b/spring-boot/src/test/java/org/springframework/boot/logging/LoggingApplicationListenerTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/logging/LoggingApplicationListenerTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/logging/LoggingApplicationListenerTests.java\n@@ -110,8 +110,7 @@ public void overrideConfigLocation() {\n \t\tString output = this.outputCapture.toString().trim();\n \t\tassertTrue(\"Wrong output:\\n\" + output, output.contains(\"Hello world\"));\n \t\tassertFalse(\"Wrong output:\\n\" + output, output.contains(\"???\"));\n-\t\tassertTrue(\"Wrong output:\\n\" + output,\n-\t\t\t\toutput.startsWith(tmpDir() + \"/spring.log\"));\n+\t\tassertTrue(\"Wrong output:\\n\" + output, output.startsWith(tmpDir() + \"/tmp.log\"));\n \t}\n \n \t@Test\n@@ -157,7 +156,7 @@ public void addLogPathProperty() {\n \t\tLog logger = LogFactory.getLog(LoggingApplicationListenerTests.class);\n \t\tlogger.info(\"Hello world\");\n \t\tString output = this.outputCapture.toString().trim();\n-\t\tassertTrue(\"Wrong output:\\n\" + output, output.startsWith(\"target/foo/spring.log\"));\n+\t\tassertTrue(\"Wrong output:\\n\" + output, output.startsWith(\"target/foo/tmp.log\"));\n \t}\n \n \t@Test",
    "output": "Fix some broken tests in empty new environments"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java\n@@ -177,7 +177,7 @@ public JdbcTemplate jdbcTemplate() {\n \n \t\t@Bean\n \t\t@ConditionalOnMissingBean(NamedParameterJdbcOperations.class)\n-\t\tpublic NamedParameterJdbcOperations namedParameterJdbcTemplate() {\n+\t\tpublic NamedParameterJdbcTemplate namedParameterJdbcTemplate() {\n \t\t\treturn new NamedParameterJdbcTemplate(this.dataSource);\n \t\t}\n ",
    "output": "Change explicit bean type to concrete NamedParameterJdbcTemplate"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java\n@@ -54,6 +54,7 @@\n import org.springframework.web.filter.HiddenHttpMethodFilter;\n import org.springframework.web.servlet.DispatcherServlet;\n import org.springframework.web.servlet.View;\n+import org.springframework.web.servlet.ViewResolver;\n import org.springframework.web.servlet.config.annotation.EnableWebMvc;\n import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\n import org.springframework.web.servlet.config.annotation.ViewControllerRegistry;\n@@ -177,8 +178,9 @@ public BeanNameViewResolver beanNameViewResolver() {\n \t\t}\n \n \t\t@Bean\n-\t\t@ConditionalOnBean(View.class)\n-\t\tpublic ContentNegotiatingViewResolver viewResolver(BeanFactory beanFactory) {\n+\t\t@ConditionalOnBean(ViewResolver.class)\n+\t\tpublic ContentNegotiatingViewResolver contentNegotiatingViewResolver(\n+\t\t\t\tBeanFactory beanFactory) {\n \t\t\tContentNegotiatingViewResolver resolver = new ContentNegotiatingViewResolver();\n \t\t\tresolver.setContentNegotiationManager(beanFactory\n \t\t\t\t\t.getBean(ContentNegotiationManager.class));",
    "output": "Change bean name of ContentNegotiatingViewResolver\nFixed"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfigurationTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafAutoConfigurationTests.java\n@@ -20,6 +20,7 @@\n import java.util.Locale;\n \n import org.junit.After;\n+import org.junit.Ignore;\n import org.junit.Test;\n import org.springframework.beans.factory.BeanCreationException;\n import org.springframework.boot.autoconfigure.PropertyPlaceholderAutoConfiguration;\n@@ -93,6 +94,16 @@ public void templateLocationDoesNotExist() throws Exception {\n \t\tthis.context.refresh();\n \t}\n \n+\t@Test\n+\t@Ignore(\"Fix this for gh-424\")\n+\tpublic void templateLocationEmpty() throws Exception {\n+\t\tEnvironmentTestUtils.addEnvironment(this.context,\n+\t\t\t\t\"spring.thymeleaf.prefix:classpath:/templates/empty-directory/\");\n+\t\tthis.context.register(ThymeleafAutoConfiguration.class,\n+\t\t\t\tPropertyPlaceholderAutoConfiguration.class);\n+\t\tthis.context.refresh();\n+\t}\n+\n \t@Test\n \tpublic void createLayoutFromConfigClass() throws Exception {\n \t\tAnnotationConfigWebApplicationContext context = new AnnotationConfigWebApplicationContext();",
    "output": "Add ViewResolver docs"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/MainClassFinder.java b/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/MainClassFinder.java\n--- a/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/MainClassFinder.java\n+++ b/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/MainClassFinder.java\n@@ -95,8 +95,11 @@ public String doWith(String className) {\n \t */\n \tpublic static <T> T doWithMainClasses(File rootFolder, ClassNameCallback<T> callback)\n \t\t\tthrows IOException {\n+\t\tif (!rootFolder.exists()) {\n+\t\t\treturn null; // nothing to do\n+\t\t}\n \t\tif (!rootFolder.isDirectory()) {\n-\t\t\tthrow new IllegalArgumentException(\"Inavlid root folder '\" + rootFolder + \"'\");\n+\t\t\tthrow new IllegalArgumentException(\"Invalid root folder '\" + rootFolder + \"'\");\n \t\t}\n \t\tString prefix = rootFolder.getAbsolutePath() + \"/\";\n \t\tDeque<File> stack = new ArrayDeque<File>();",
    "output": "Be defensive if there is no main/classes"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/WebMvcAutoConfiguration.java\n@@ -125,6 +125,7 @@ public static boolean templateExists(Environment environment,\n \t// Defined as a nested config to ensure WebMvcConfigurerAdapter it not read when not\n \t// on the classpath\n \t@EnableWebMvc\n+\t@Configuration\n \tpublic static class WebMvcAutoConfigurationAdapter extends WebMvcConfigurerAdapter {\n \n \t\tprivate static Log logger = LogFactory.getLog(WebMvcConfigurerAdapter.class);",
    "output": "Add @Configuration to WebMvcAutoConfigurationAdapter"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/AbstractRepositoryConfigurationSourceSupport.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/AbstractRepositoryConfigurationSourceSupport.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/AbstractRepositoryConfigurationSourceSupport.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/AbstractRepositoryConfigurationSourceSupport.java\n@@ -63,7 +63,7 @@ private AnnotationRepositoryConfigurationSource getConfigurationSource() {\n \t\tStandardAnnotationMetadata metadata = new StandardAnnotationMetadata(\n \t\t\t\tgetConfiguration(), true);\n \t\treturn new AnnotationRepositoryConfigurationSource(metadata, getAnnotation(),\n-\t\t\t\tthis.environment) {\n+\t\t\t\tthis.resourceLoader, this.environment) {\n \t\t\t@Override\n \t\t\tpublic java.lang.Iterable<String> getBasePackages() {\n \t\t\t\treturn AbstractRepositoryConfigurationSourceSupport.this",
    "output": "Upgrade to Spring Data Codd GA release."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/AbstractRepositoryConfigurationSourceSupport.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/AbstractRepositoryConfigurationSourceSupport.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/AbstractRepositoryConfigurationSourceSupport.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/AbstractRepositoryConfigurationSourceSupport.java\n@@ -63,7 +63,7 @@ private AnnotationRepositoryConfigurationSource getConfigurationSource() {\n \t\tStandardAnnotationMetadata metadata = new StandardAnnotationMetadata(\n \t\t\t\tgetConfiguration(), true);\n \t\treturn new AnnotationRepositoryConfigurationSource(metadata, getAnnotation(),\n-\t\t\t\tthis.environment) {\n+\t\t\t\tthis.resourceLoader, this.environment) {\n \t\t\t@Override\n \t\t\tpublic java.lang.Iterable<String> getBasePackages() {\n \t\t\t\treturn AbstractRepositoryConfigurationSourceSupport.this",
    "output": "Upgrade to Spring Data Codd GA release.\nAdapt auto-configuration code to use the new constructor introduced\nin Spring Data Commons' AnnotationConfigurationSource."
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/task/Repackage.java b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/task/Repackage.java\n--- a/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/task/Repackage.java\n+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/task/Repackage.java\n@@ -23,6 +23,7 @@\n import org.gradle.api.Action;\n import org.gradle.api.DefaultTask;\n import org.gradle.api.Project;\n+import org.gradle.api.tasks.JavaExec;\n import org.gradle.api.tasks.TaskAction;\n import org.gradle.api.tasks.bundling.Jar;\n import org.springframework.boot.gradle.SpringBootPluginExtension;\n@@ -71,6 +72,11 @@ public void repackage() {\n \t\telse if (extension.getCustomConfiguration() != null) {\n \t\t\tlibraries.setCustomConfigurationName(extension.getCustomConfiguration());\n \t\t}\n+\t\tJavaExec runner = (JavaExec) project.getTasks().findByName(\"run\");\n+\t\tif (runner!=null && mainClass==null) {\n+\t\t\tgetLogger().info(\"Found main in run task: \" + runner.getMain());\n+\t\t\tsetMainClass(runner.getMain());\n+\t\t}\n \t\tproject.getTasks().withType(Jar.class, new RepackageAction(extension, libraries));\n \t}\n ",
    "output": "Check for a mainClass in \"run\" task if there is one\nIf there is a run task with an explicit main it can be used\nby the repackage task (assuming its own native setting is\nnot used)."
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/test/SpringApplicationConfigurationJmxTests.java b/spring-boot/src/test/java/org/springframework/boot/test/SpringApplicationConfigurationJmxTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/test/SpringApplicationConfigurationJmxTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/test/SpringApplicationConfigurationJmxTests.java\n@@ -19,6 +19,7 @@\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.test.SpringApplicationConfigurationJmxTests.Config;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;\n@@ -32,7 +33,7 @@\n  * @author Dave Syer\n  */\n @RunWith(SpringJUnit4ClassRunner.class)\n-@SpringApplicationConfiguration\n+@SpringApplicationConfiguration(classes = Config.class)\n public class SpringApplicationConfigurationJmxTests {\n \n \t@Value(\"${spring.jmx.enabled}\")",
    "output": "Fix test (but not )"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/shell/ShellPrompts.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/shell/ShellPrompts.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/shell/ShellPrompts.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/shell/ShellPrompts.java\n@@ -43,7 +43,9 @@ public void pushPrompt(String prompt) {\n \t * @see #pushPrompt(String)\n \t */\n \tpublic void popPrompt() {\n-\t\tthis.prompts.pop();\n+\t\tif (!this.prompts.isEmpty()) {\n+\t\t\tthis.prompts.pop();\n+\t\t}\n \t}\n \n \t/**",
    "output": "Prevent EmptyStackException in case no stack of prompts is empty"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/test/SpringApplicationContextLoader.java b/spring-boot/src/main/java/org/springframework/boot/test/SpringApplicationContextLoader.java\n--- a/spring-boot/src/main/java/org/springframework/boot/test/SpringApplicationContextLoader.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/test/SpringApplicationContextLoader.java\n@@ -58,7 +58,7 @@ public class SpringApplicationContextLoader extends AbstractContextLoader {\n \tpublic ApplicationContext loadContext(MergedContextConfiguration mergedConfig)\n \t\t\tthrows Exception {\n \n-\t\tSpringApplication application = new SpringApplication();\n+\t\tSpringApplication application = getSpringApplication();\n \t\tapplication.setSources(getSources(mergedConfig));\n \t\tif (!ObjectUtils.isEmpty(mergedConfig.getActiveProfiles())) {\n \t\t\tapplication.setAdditionalProfiles(mergedConfig.getActiveProfiles());\n@@ -77,6 +77,15 @@ public ApplicationContext loadContext(MergedContextConfiguration mergedConfig)\n \t\treturn application.run();\n \t}\n \n+\t/**\n+\t * Builds new {@link org.springframework.boot.SpringApplication} instance. You can override\n+\t * this method to add custom behaviour\n+\t * @return {@link org.springframework.boot.SpringApplication} instance\n+\t */\n+\tprotected SpringApplication getSpringApplication() {\n+\t\treturn new SpringApplication();\n+\t}\n+\n \tprivate Set<Object> getSources(MergedContextConfiguration mergedConfig) {\n \t\tSet<Object> sources = new LinkedHashSet<Object>();\n \t\tsources.addAll(Arrays.asList(mergedConfig.getClasses()));",
    "output": "Now custom SpringApplication class can be used when extending SpringApplicationContextLoader"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/test/SpringApplicationContextLoader.java b/spring-boot/src/main/java/org/springframework/boot/test/SpringApplicationContextLoader.java\n--- a/spring-boot/src/main/java/org/springframework/boot/test/SpringApplicationContextLoader.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/test/SpringApplicationContextLoader.java\n@@ -58,7 +58,7 @@ public class SpringApplicationContextLoader extends AbstractContextLoader {\n \tpublic ApplicationContext loadContext(MergedContextConfiguration mergedConfig)\n \t\t\tthrows Exception {\n \n-\t\tSpringApplication application = new SpringApplication();\n+\t\tSpringApplication application = getSpringApplication();\n \t\tapplication.setSources(getSources(mergedConfig));\n \t\tif (!ObjectUtils.isEmpty(mergedConfig.getActiveProfiles())) {\n \t\t\tapplication.setAdditionalProfiles(mergedConfig.getActiveProfiles());\n@@ -77,6 +77,15 @@ public ApplicationContext loadContext(MergedContextConfiguration mergedConfig)\n \t\treturn application.run();\n \t}\n \n+\t/**\n+\t * Builds new {@link org.springframework.boot.SpringApplication} instance. You can override\n+\t * this method to add custom behaviour\n+\t * @return {@link org.springframework.boot.SpringApplication} instance\n+\t */\n+\tprotected SpringApplication getSpringApplication() {\n+\t\treturn new SpringApplication();\n+\t}\n+\n \tprivate Set<Object> getSources(MergedContextConfiguration mergedConfig) {\n \t\tSet<Object> sources = new LinkedHashSet<Object>();\n \t\tsources.addAll(Arrays.asList(mergedConfig.getClasses()));",
    "output": "Now custom SpringApplication class can be used when extending SpringApplicationContextLoader"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/test/java/org/springframework/boot/cli/SampleIntegrationTests.java b/spring-boot-cli/src/test/java/org/springframework/boot/cli/SampleIntegrationTests.java\n--- a/spring-boot-cli/src/test/java/org/springframework/boot/cli/SampleIntegrationTests.java\n+++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/SampleIntegrationTests.java\n@@ -134,6 +134,7 @@ public void txSample() throws Exception {\n \t}\n \n \t@Test\n+\t@Ignore(\"Intermittent failure on CI. See #323\")\n \tpublic void jmsSample() throws Exception {\n \t\tString output = this.cli.run(\"jms.groovy\");\n \t\tassertTrue(\"Wrong output: \" + output,\n@@ -142,8 +143,7 @@ public void jmsSample() throws Exception {\n \t}\n \n \t@Test\n-\t@Ignore\n-\t// this test requires RabbitMQ to be run, so disable it be default\n+\t@Ignore(\"Requires RabbitMQ to be run, so disable it be default\")\n \tpublic void rabbitSample() throws Exception {\n \t\tString output = this.cli.run(\"rabbit.groovy\");\n \t\tassertTrue(\"Wrong output: \" + output,",
    "output": "Ignore failing JMS tests for now\nIgnore JMS sample which intermittently fails to run on CI."
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ErrorMvcAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ErrorMvcAutoConfiguration.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ErrorMvcAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ErrorMvcAutoConfiguration.java\n@@ -115,10 +115,11 @@ public BeanNameViewResolver beanNameViewResolver() {\n \t}\n \n \tprivate static class ErrorTemplateMissingCondition extends SpringBootCondition {\n+\n \t\t@Override\n \t\tpublic ConditionOutcome getMatchOutcome(ConditionContext context,\n \t\t\t\tAnnotatedTypeMetadata metadata) {\n-\t\t\tif (ClassUtils.isPresent(\"org.thymeleaf.spring3.SpringTemplateEngine\",\n+\t\t\tif (ClassUtils.isPresent(\"org.thymeleaf.spring4.SpringTemplateEngine\",\n \t\t\t\t\tcontext.getClassLoader())) {\n \t\t\t\tif (DefaultTemplateResolverConfiguration.templateExists(\n \t\t\t\t\t\tcontext.getEnvironment(), context.getResourceLoader(), \"error\")) {\n@@ -135,6 +136,7 @@ public ConditionOutcome getMatchOutcome(ConditionContext context,\n \t\t\t}\n \t\t\treturn ConditionOutcome.match(\"no error template view detected\");\n \t\t};\n+\n \t}\n \n \tprivate static class SpelView implements View {",
    "output": "Upgrade ErrorMvcAutoConfiguration for Spring 4 Update ErrorMvcAutoConfiguration thymeleaf condition to use the `spring4` package."
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/StartupInfoLogger.java b/spring-boot/src/main/java/org/springframework/boot/StartupInfoLogger.java\n--- a/spring-boot/src/main/java/org/springframework/boot/StartupInfoLogger.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/StartupInfoLogger.java\n@@ -1,5 +1,5 @@\n /*\n- * Copyright 2012-2013 the original author or authors.\n+ * Copyright 2012-2014 the original author or authors.\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -76,7 +76,7 @@ private String getStartupMessage() {\n \tprivate StringBuilder getRunningMessage() {\n \t\tStringBuilder message = new StringBuilder();\n \t\tmessage.append(\"Running with Spring Boot\");\n-\t\tmessage.append(getVersion(SpringApplication.class));\n+\t\tmessage.append(getVersion(getClass()));\n \t\tmessage.append(\", Spring\");\n \t\tmessage.append(getVersion(ApplicationContext.class));\n \t\treturn message;",
    "output": "Fix class tangle"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/jmx/EndpointMBeanExporter.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/jmx/EndpointMBeanExporter.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/jmx/EndpointMBeanExporter.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/jmx/EndpointMBeanExporter.java\n@@ -170,11 +170,11 @@ protected ObjectName getObjectName(Object bean, String beanKey)\n \t\t\tStringBuilder builder = new StringBuilder();\n \t\t\tbuilder.append(this.domain);\n \t\t\tbuilder.append(\":type=Endpoint\");\n+\t\t\tbuilder.append(\",name=\" + beanKey);\n \t\t\tif (parentContextContainsSameBean(this.applicationContext, beanKey)) {\n \t\t\t\tbuilder.append(\",context=\"\n \t\t\t\t\t\t+ ObjectUtils.getIdentityHexString(this.applicationContext));\n \t\t\t}\n-\t\t\tbuilder.append(\",name=\" + beanKey);\n \t\t\tif (this.ensureUniqueRuntimeObjectNames) {\n \t\t\t\tbuilder.append(\",identity=\"\n \t\t\t\t\t\t+ ObjectUtils.getIdentityHexString(((EndpointMBean) bean)",
    "output": "Change order of properties in endpoint mbean objectNames to make display in jconsole nicer"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/ExtendedGroovyClassLoader.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/ExtendedGroovyClassLoader.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/ExtendedGroovyClassLoader.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/ExtendedGroovyClassLoader.java\n@@ -50,6 +50,8 @@ public class ExtendedGroovyClassLoader extends GroovyClassLoader {\n \n \tprivate static final String SHARED_PACKAGE = \"org.springframework.boot.groovy\";\n \n+\tprivate static final URL[] NO_URLS = new URL[] {};\n+\n \tprivate final Map<String, byte[]> classResources = new HashMap<String, byte[]>();\n \n \tprivate final GroovyCompilerScope scope;\n@@ -127,7 +129,14 @@ public ClassCollector createCollector(CompilationUnit unit, SourceUnit su) {\n \t\t\t\t.doPrivileged(new PrivilegedAction<InnerLoader>() {\n \t\t\t\t\t@Override\n \t\t\t\t\tpublic InnerLoader run() {\n-\t\t\t\t\t\treturn new InnerLoader(ExtendedGroovyClassLoader.this);\n+\t\t\t\t\t\treturn new InnerLoader(ExtendedGroovyClassLoader.this) {\n+\t\t\t\t\t\t\t// Don't return URLs from the inner loader so that Tomcat only\n+\t\t\t\t\t\t\t// searches the parent. Fixes 'TLD skipped' issues\n+\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\tpublic URL[] getURLs() {\n+\t\t\t\t\t\t\t\treturn NO_URLS;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t};\n \t\t\t\t\t}\n \t\t\t\t});\n \t\treturn new ExtendedClassCollector(loader, unit, su);",
    "output": "Don't expose URLs from InnerLoader\nUpdate the CLI Groovy InnerLoader to not expose URLs. This prevents the\n'TLD skipped' log messages from Tomcat that occurred previously due to\nthe InnerLoader and parent returning the same URLs."
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-data-mongodb/src/test/java/sample/data/mongo/SampleMongoApplicationTests.java b/spring-boot-samples/spring-boot-sample-data-mongodb/src/test/java/sample/data/mongo/SampleMongoApplicationTests.java\n--- a/spring-boot-samples/spring-boot-sample-data-mongodb/src/test/java/sample/data/mongo/SampleMongoApplicationTests.java\n+++ b/spring-boot-samples/spring-boot-sample-data-mongodb/src/test/java/sample/data/mongo/SampleMongoApplicationTests.java\n@@ -17,6 +17,7 @@\n package sample.data.mongo;\n \n import java.io.IOException;\n+import java.net.ConnectException;\n \n import org.junit.Rule;\n import org.junit.Test;\n@@ -54,9 +55,9 @@ private boolean serverNotRunning(IllegalStateException ex) {\n \t\t@SuppressWarnings(\"serial\")\n \t\tNestedCheckedException nested = new NestedCheckedException(\"failed\", ex) {\n \t\t};\n-\t\tif (nested.contains(IOException.class)) {\n+\t\tif (nested.contains(ConnectException.class)) {\n \t\t\tThrowable root = nested.getRootCause();\n-\t\t\tif (root.getMessage().contains(\"couldn't connect to [localhost\")) {\n+\t\t\tif (root.getMessage().contains(\"Connection refused\")) {\n \t\t\t\treturn true;\n \t\t\t}\n \t\t}",
    "output": "Fix sample (Exception type changed in Mongo)"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/MongoRepositoriesAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/MongoRepositoriesAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/MongoRepositoriesAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/MongoRepositoriesAutoConfiguration.java\n@@ -35,7 +35,8 @@\n \n import com.mongodb.DBPort;\n import com.mongodb.Mongo;\n-import com.mongodb.MongoURI;\n+import com.mongodb.MongoClient;\n+import com.mongodb.MongoClientURI;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for Spring Data's Mongo\n@@ -95,13 +96,13 @@ public String getHost() {\n \t\t}\n \n \t\tpublic String database() {\n-\t\t\treturn this.database == null ? new MongoURI(this.uri).getDatabase()\n+\t\t\treturn this.database == null ? new MongoClientURI(this.uri).getDatabase()\n \t\t\t\t\t: this.database;\n \t\t}\n \n \t\tpublic Mongo mongo() throws UnknownHostException {\n-\t\t\treturn this.host != null ? new Mongo(this.host, this.port) : new Mongo(\n-\t\t\t\t\tnew MongoURI(this.uri));\n+\t\t\treturn this.host != null ? new MongoClient(this.host, this.port)\n+\t\t\t\t\t: new MongoClient(new MongoClientURI(this.uri));\n \t\t}\n \n \t\tpublic void setHost(String host) {",
    "output": "Use non-deprecated API to create Mongo client"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/AutoConfigurationReportTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/AutoConfigurationReportTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/AutoConfigurationReportTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/AutoConfigurationReportTests.java\n@@ -96,6 +96,14 @@ public void parent() throws Exception {\n \t\t\t\tsameInstance(AutoConfigurationReport.get(this.beanFactory)));\n \t\tassertThat(this.report, not(nullValue()));\n \t\tassertThat(this.report.getParent(), not(nullValue()));\n+\t\tAutoConfigurationReport.get((ConfigurableListableBeanFactory) this.beanFactory\n+\t\t\t\t.getParentBeanFactory());\n+\t\tassertThat(this.report,\n+\t\t\t\tsameInstance(AutoConfigurationReport.get(this.beanFactory)));\n+\t\tassertThat(this.report.getParent(),\n+\t\t\t\tsameInstance(AutoConfigurationReport\n+\t\t\t\t\t\t.get((ConfigurableListableBeanFactory) this.beanFactory\n+\t\t\t\t\t\t\t\t.getParentBeanFactory())));\n \t}\n \n \t@Test",
    "output": "Assert that parent autoconfig report is matched to parent BeanFactory\nTest for"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/SpringBootWebSecurityConfiguration.java\n@@ -24,7 +24,6 @@\n \n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n@@ -100,8 +99,6 @@ public AuthenticationEventPublisher authenticationEventPublisher() {\n \n \t@Bean\n \t@ConditionalOnMissingBean({ IgnoredPathsWebSecurityConfigurerAdapter.class })\n-\t// @ConditionalOnBean(annotation = EnableWebSecurity.class)\n-\t@ConditionalOnBean(SpringBootWebSecurityConfiguration.class)\n \tpublic SecurityConfigurer<Filter, WebSecurity> ignoredPathsWebSecurityConfigurerAdapter() {\n \t\treturn new IgnoredPathsWebSecurityConfigurerAdapter();\n \t}",
    "output": "Remove unnecessary @Conditional"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java\n--- a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java\n+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/JarFile.java\n@@ -305,10 +305,16 @@ public synchronized JarFile getNestedJarFile(final ZipEntry ze,\n \t */\n \tpublic synchronized JarFile getNestedJarFile(final JarEntryData sourceEntry,\n \t\t\tJarEntryFilter... filters) throws IOException {\n-\t\tif (sourceEntry.isDirectory()) {\n-\t\t\treturn getNestedJarFileFromDirectoryEntry(sourceEntry, filters);\n+\t\ttry {\n+\t\t\tif (sourceEntry.isDirectory()) {\n+\t\t\t\treturn getNestedJarFileFromDirectoryEntry(sourceEntry, filters);\n+\t\t\t}\n+\t\t\treturn getNestedJarFileFromFileEntry(sourceEntry, filters);\n+\t\t}\n+\t\tcatch (IOException ex) {\n+\t\t\tthrow new IOException(\"Unable to open nested jar file '\"\n+\t\t\t\t\t+ sourceEntry.getName() + \"'\", ex);\n \t\t}\n-\t\treturn getNestedJarFileFromFileEntry(sourceEntry, filters);\n \t}\n \n \tprivate JarFile getNestedJarFileFromDirectoryEntry(JarEntryData sourceEntry,",
    "output": "Improve exception messages on nested jar failure\nUpdates"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/jar/JarCommand.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/jar/JarCommand.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/jar/JarCommand.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/jar/JarCommand.java\n@@ -68,6 +68,12 @@\n  */\n public class JarCommand extends OptionParsingCommand {\n \n+\tprivate static final String[] DEFAULT_INCLUDES = { \"public/**\", \"static/**\",\n+\t\t\t\"resources/**\", \"META-INF/**\", \"*\" };\n+\n+\tprivate static final String[] DEFAULT_EXCLUDES = { \".*\", \"repository/**\", \"build/**\",\n+\t\t\t\"target/**\", \"**/*.jar\", \"**/*.groovy\" };\n+\n \tprivate static final Layout LAYOUT = new Layouts.Jar();\n \n \tpublic JarCommand() {\n@@ -93,13 +99,11 @@ protected void doOptions() {\n \t\t\tthis.includeOption = option(\n \t\t\t\t\t\"include\",\n \t\t\t\t\t\"Pattern applied to directories on the classpath to find files to include in the resulting jar\")\n-\t\t\t\t\t.withRequiredArg().defaultsTo(\"public/**\", \"static/**\",\n-\t\t\t\t\t\t\t\"resources/**\", \"META-INF/**\", \"*\");\n+\t\t\t\t\t.withRequiredArg().defaultsTo(DEFAULT_INCLUDES);\n \t\t\tthis.excludeOption = option(\n \t\t\t\t\t\"exclude\",\n \t\t\t\t\t\"Pattern applied to directories on the claspath to find files to exclude from the resulting jar\")\n-\t\t\t\t\t.withRequiredArg().defaultsTo(\".*\", \"repository/**\", \"build/**\",\n-\t\t\t\t\t\t\t\"target/**\");\n+\t\t\t\t\t.withRequiredArg().defaultsTo(DEFAULT_EXCLUDES);\n \t\t}\n \n \t\t@Override",
    "output": "Exclude *.jar and *.groovy from generated JARs\nUpdate `JarCommand` to exclude `**/*.groovy` and `**/*.jar` by default."
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n--- a/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n@@ -862,7 +862,11 @@ public void addInitializers(ApplicationContextInitializer<?>... initializers) {\n \t * @return the initializers\n \t */\n \tpublic Set<ApplicationContextInitializer<?>> getInitializers() {\n-\t\treturn Collections.unmodifiableSet(this.initializers);\n+\t\tArrayList<ApplicationContextInitializer<?>> list = new ArrayList<ApplicationContextInitializer<?>>(\n+\t\t\t\tthis.initializers);\n+\t\tAnnotationAwareOrderComparator.sort(list);\n+\t\treturn Collections\n+\t\t\t\t.unmodifiableSet(new LinkedHashSet<ApplicationContextInitializer<?>>(list));\n \t}\n \n \t/**\n@@ -905,8 +909,11 @@ public void addListeners(ApplicationListener<?>... listeners) {\n \t * @return the listeners\n \t */\n \tpublic Set<ApplicationListener<?>> getListeners() {\n-\t\treturn Collections.unmodifiableSet(new LinkedHashSet<ApplicationListener<?>>(\n-\t\t\t\tthis.listeners));\n+\t\tArrayList<ApplicationListener<?>> list = new ArrayList<ApplicationListener<?>>(\n+\t\t\t\tthis.listeners);\n+\t\tAnnotationAwareOrderComparator.sort(list);\n+\t\treturn Collections\n+\t\t\t\t.unmodifiableSet(new LinkedHashSet<ApplicationListener<?>>(list));\n \t}\n \n \t/**",
    "output": "Make SpringApplication list/initializers respect their Ordered"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/Handler.java b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/Handler.java\n--- a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/Handler.java\n+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/jar/Handler.java\n@@ -19,7 +19,6 @@\n import java.io.File;\n import java.io.IOException;\n import java.net.MalformedURLException;\n-import java.net.URISyntaxException;\n import java.net.URL;\n import java.net.URLConnection;\n import java.net.URLStreamHandler;\n@@ -77,7 +76,7 @@ private JarFile getRootJarFile(String name) throws IOException {\n \t\ttry {\n \t\t\treturn new JarFile(new File(new URL(name).toURI()));\n \t\t}\n-\t\tcatch (URISyntaxException ex) {\n+\t\tcatch (Exception ex) {\n \t\t\tthrow new IOException(\"Unable to open root Jar file '\" + name + \"'\", ex);\n \t\t}\n \t}",
    "output": "Better getRootJar exception capturing"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/shell/Shell.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/shell/Shell.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/shell/Shell.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/shell/Shell.java\n@@ -175,8 +175,8 @@ private void printBanner() {\n \t}\n \n \tprivate void runInputLoop() throws Exception {\n-\t\twhile (true) {\n-\t\t\tString line = this.consoleReader.readLine(getPrompt());\n+\t\tString line;\n+\t\twhile ((line = this.consoleReader.readLine(getPrompt())) != null) {\n \t\t\twhile (line.endsWith(\"\\\\\")) {\n \t\t\t\tline = line.substring(0, line.length() - 1);\n \t\t\t\tline += this.consoleReader.readLine(\"> \");",
    "output": "Prevent CTRL-D from causing NPE in shell\nUpdate the integrated shell to deal with a null line which can be\ntriggered with CTRL-D."
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/OptionHandler.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/OptionHandler.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/OptionHandler.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/OptionHandler.java\n@@ -112,7 +112,7 @@ public String getHelp() {\n \t\t\tcatch (IOException ex) {\n \t\t\t\treturn \"Help not available\";\n \t\t\t}\n-\t\t\tthis.help = out.toString().replace(\" --cp \", \" -cp \");\n+\t\t\tthis.help = out.toString().replace(\" --cp \", \" -cp  \");\n \t\t}\n \t\treturn this.help;\n \t}",
    "output": "Fix CLI help formatting issue with '-cp'\nEnsure that '--cp' is replaced with a same length string to prevent\nodd help text formatting."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/redis/RedisAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/redis/RedisAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/redis/RedisAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/redis/RedisAutoConfiguration.java\n@@ -38,13 +38,15 @@\n import org.springframework.data.redis.core.RedisTemplate;\n import org.springframework.data.redis.core.StringRedisTemplate;\n \n+import com.lambdaworks.redis.RedisClient;\n+\n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for Spring Data's Redis support.\n  * \n  * @author Dave Syer\n  */\n @Configuration\n-@ConditionalOnClass({ LettuceConnection.class, RedisOperations.class })\n+@ConditionalOnClass({ LettuceConnection.class, RedisOperations.class, RedisClient.class })\n public class RedisAutoConfiguration {\n \n \t@Configuration",
    "output": "Only auto-configure Reduce if Lettuce is on the classpath"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/ShellCommand.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/ShellCommand.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/ShellCommand.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/ShellCommand.java\n@@ -159,7 +159,7 @@ private void runReadLoop(final ConsoleReader consoleReader,\n \t\t\t\t\tlaunchProcess(args, systemOut, systemErr);\n \t\t\t\t}\n \t\t\t\telse {\n-\t\t\t\t\trunCommand(args);\n+\t\t\t\t\trunCommand(args, systemOut, systemErr);\n \t\t\t\t}\n \t\t\t}\n \t\t}\n@@ -238,9 +238,20 @@ private void inheritIO(ProcessBuilder processBuilder) {\n \t\tReflectionUtils.invokeMethod(PROCESS_BUILDER_INHERIT_IO_METHOD, processBuilder);\n \t}\n \n-\tprivate void runCommand(List<String> args) {\n+\tprivate void runCommand(List<String> args, PrintStream systemOut,\n+\t\t\tPrintStream systemErr) {\n \t\tif (!getName().equals(args.get(0))) {\n-\t\t\tthis.springCli.runAndHandleErrors(args.toArray(new String[args.size()]));\n+\t\t\tPrintStream out = System.out;\n+\t\t\tPrintStream err = System.err;\n+\t\t\tSystem.setOut(systemOut);\n+\t\t\tSystem.setErr(systemErr);\n+\t\t\ttry {\n+\t\t\t\tthis.springCli.runAndHandleErrors(args.toArray(new String[args.size()]));\n+\t\t\t}\n+\t\t\tfinally {\n+\t\t\t\tSystem.setOut(out);\n+\t\t\t\tSystem.setErr(err);\n+\t\t\t}\n \t\t}\n \t}\n ",
    "output": "Divert out/err streams while command runs\nActually System.in works fine, it's the output streams that get buffered.\nWe can fix it by diverting them for the duration of the command."
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/RunCommand.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/RunCommand.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/RunCommand.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/RunCommand.java\n@@ -92,7 +92,7 @@ protected synchronized void run(OptionSet options) throws Exception {\n \n \t\t\tif (this.runner != null) {\n \t\t\t\tthrow new RuntimeException(\n-\t\t\t\t\t\t\"Already running. Please stop the current application before running another.\");\n+\t\t\t\t\t\t\"Already running. Please stop the current application before running another (use the 'stop' command).\");\n \t\t\t}\n \n \t\t\tSourceOptions sourceOptions = new SourceOptions(options);",
    "output": "Add hint to user about 'stop' command\nImproves"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/ShellCommand.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/ShellCommand.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/ShellCommand.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/ShellCommand.java\n@@ -131,6 +131,7 @@ private void runReadLoop(final ConsoleReader consoleReader,\n \t\t\t}\n \n \t\t\tif (\"clear\".equals(line.trim())) {\n+\t\t\t\tconsoleReader.setPrompt(null);\n \t\t\t\tconsoleReader.clearScreen();\n \t\t\t\tcontinue;\n \t\t\t}",
    "output": "Clear prompt before clearing screen"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n--- a/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n@@ -360,18 +360,25 @@ public ConfigurableApplicationContext run(String... args) {\n \t\t\treturn context;\n \t\t}\n \t\tcatch (RuntimeException ex) {\n-\t\t\tmulticaster.multicastEvent(new SpringApplicationErrorEvent(this, context,\n-\t\t\t\t\targs, ex));\n+\t\t\thandleError(context, multicaster, ex, args);\n \t\t\tthrow ex;\n \t\t}\n \t\tcatch (Error ex) {\n-\t\t\tmulticaster.multicastEvent(new SpringApplicationErrorEvent(this, context,\n-\t\t\t\t\targs, ex));\n+\t\t\thandleError(context, multicaster, ex, args);\n \t\t\tthrow ex;\n \t\t}\n \n \t}\n \n+\tprotected void handleError(ConfigurableApplicationContext context,\n+\t\t\tApplicationEventMulticaster multicaster, Throwable ex, String... args) {\n+\t\tmulticaster.multicastEvent(new SpringApplicationErrorEvent(this, context, args,\n+\t\t\t\tex));\n+\t\tif (context != null) {\n+\t\t\tcontext.close();\n+\t\t}\n+\t}\n+\n \tprivate void registerListeners(ApplicationEventMulticaster multicaster,\n \t\t\tSet<Object> sources) {\n \t\tfor (Object object : sources) {",
    "output": "Ensure SpringApplication closes its ApplicationContext\n...even if the CommandLineRunners fail and we drop to the error\nhandling path."
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/InitCommand.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/InitCommand.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/InitCommand.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/InitCommand.java\n@@ -79,7 +79,7 @@ protected void run(OptionSet options) throws Exception {\n \t\t\t\t\t\"init.groovy\", \"spring.groovy\");\n \t\t\tString[] sources = sourceOptions.getSourcesArray();\n \n-\t\t\tif (!(loader instanceof GroovyClassLoader)) {\n+\t\t\tif (!(loader instanceof GroovyClassLoader) && sources.length > 0) {\n \n \t\t\t\tList<RepositoryConfiguration> repositoryConfiguration = RepositoryConfigurationFactory\n \t\t\t\t\t\t.createDefaultRepositoryConfiguration();",
    "output": "Only run InitCommand if there is code to process\nThis appears to be a significant improvement in performance\n(checking for the existence of init.grooy is cheap, but compiling\nit is expensive).\nI'm going to say this ."
  },
  {
    "input": "diff --git a/spring-boot-cli/src/test/java/org/springframework/boot/cli/command/ScriptCompilationCustomizerTests.java b/spring-boot-cli/src/test/java/org/springframework/boot/cli/command/ScriptCompilationCustomizerTests.java\n--- a/spring-boot-cli/src/test/java/org/springframework/boot/cli/command/ScriptCompilationCustomizerTests.java\n+++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/command/ScriptCompilationCustomizerTests.java\n@@ -19,7 +19,6 @@\n import groovy.lang.Closure;\n \n import java.io.File;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n \n@@ -32,6 +31,7 @@\n import org.springframework.boot.cli.compiler.GroovyCompiler;\n import org.springframework.boot.cli.compiler.GroovyCompilerConfiguration;\n import org.springframework.boot.cli.compiler.GroovyCompilerScope;\n+import org.springframework.boot.cli.compiler.RepositoryConfigurationFactory;\n import org.springframework.boot.cli.compiler.grape.RepositoryConfiguration;\n \n import static org.junit.Assert.assertEquals;\n@@ -152,7 +152,7 @@ public String[] getClasspath() {\n \n \t\t@Override\n \t\tpublic List<RepositoryConfiguration> getRepositoryConfiguration() {\n-\t\t\treturn Collections.emptyList();\n+\t\t\treturn RepositoryConfigurationFactory.createDefaultRepositoryConfiguration();\n \t\t}\n \n \t}",
    "output": "Fix broken test\nRecent changes to the repository configuration for @Grab\ndidn't update the tests which use the GroovyCompiler as\na standalone. Fixed that by using the\nRepositoryConfigurationFactory."
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/listener/LoggingApplicationListener.java b/spring-boot/src/main/java/org/springframework/boot/context/listener/LoggingApplicationListener.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/listener/LoggingApplicationListener.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/listener/LoggingApplicationListener.java\n@@ -26,7 +26,6 @@\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.springframework.boot.SpringApplication;\n-import org.springframework.boot.SpringApplicationBeforeRefreshEvent;\n import org.springframework.boot.SpringApplicationEnvironmentAvailableEvent;\n import org.springframework.boot.SpringApplicationStartEvent;\n import org.springframework.boot.logging.LogLevel;\n@@ -97,7 +96,7 @@ public class LoggingApplicationListener implements SmartApplicationListener {\n \tprivate static Collection<Class<? extends ApplicationEvent>> EVENT_TYPES = Arrays\n \t\t\t.<Class<? extends ApplicationEvent>> asList(\n \t\t\t\t\tSpringApplicationStartEvent.class,\n-\t\t\t\t\tSpringApplicationBeforeRefreshEvent.class);\n+\t\t\t\t\tSpringApplicationEnvironmentAvailableEvent.class);\n \n \tprivate final Log logger = LogFactory.getLog(getClass());\n ",
    "output": "Ensure logging initializer listens to the right event\nThis should make a difference to . It might even fix it\n(depending on what snapshot the user had there)."
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java\n--- a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java\n+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java\n@@ -478,7 +478,6 @@ private void addParentClassLoaderEntries(List<Archive> lib) throws IOException,\n \t\t\tURISyntaxException {\n \t\tClassLoader parentClassLoader = getClass().getClassLoader();\n \t\tif (parentClassLoader instanceof URLClassLoader) {\n-\t\t\t@SuppressWarnings(\"resource\")\n \t\t\tURLClassLoader urlClassLoader = (URLClassLoader) parentClassLoader;\n \t\t\tfor (URL url : urlClassLoader.getURLs()) {\n \t\t\t\tif (url.toString().endsWith(\".jar\") || url.toString().endsWith(\".zip\")) {",
    "output": "Add missing YAML file for test"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/context/properties/EnableConfigurationPropertiesTests.java b/spring-boot/src/test/java/org/springframework/boot/context/properties/EnableConfigurationPropertiesTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/context/properties/EnableConfigurationPropertiesTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/context/properties/EnableConfigurationPropertiesTests.java\n@@ -26,6 +26,7 @@\n \n import org.hamcrest.Matchers;\n import org.junit.After;\n+import org.junit.Ignore;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.ExpectedException;\n@@ -325,6 +326,7 @@ public void testMultipleExplicitTypes() throws Exception {\n \t}\n \n \t@Test\n+\t@Ignore(\"This is challenging, so maybe not supportable?\")\n \tpublic void testBindingWithMapKeyWithPeriod() {\n \t\tthis.context.register(ResourceBindingPropertiesWithMap.class);\n \t\tthis.context.refresh();",
    "output": "Ignore other failing test as short term measure"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringMvcCompilerAutoConfiguration.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringMvcCompilerAutoConfiguration.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringMvcCompilerAutoConfiguration.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringMvcCompilerAutoConfiguration.java\n@@ -50,7 +50,8 @@ public void applyImports(ImportCustomizer imports) {\n \t\timports.addStarImports(\"org.springframework.web.bind.annotation\",\n \t\t\t\t\"org.springframework.web.servlet.config.annotation\",\n \t\t\t\t\"org.springframework.web.servlet\",\n-\t\t\t\t\"org.springframework.web.servlet.handler\", \"org.springframework.http\");\n+\t\t\t\t\"org.springframework.web.servlet.handler\", \"org.springframework.http\",\n+\t\t\t\t\"org.springframework.ui\");\n \t\timports.addStaticImport(GroovyTemplate.class.getName(), \"template\");\n \t}\n ",
    "output": "Add Spring MVC's org.springframework.ui package to the list of automatic imports"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/OptionHandler.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/OptionHandler.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/OptionHandler.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/OptionHandler.java\n@@ -168,6 +168,9 @@ public OptionHelpAdapter(OptionDescriptor descriptor) {\n \t\t\tfor (String option : descriptor.options()) {\n \t\t\t\tthis.options.add((option.length() == 1 ? \"-\" : \"--\") + option);\n \t\t\t}\n+\t\t\tif (this.options.contains(\"--cp\")) {\n+\t\t\t\tthis.options.add(\"-cp\");\n+\t\t\t}\n \t\t\tthis.description = descriptor.description();\n \t\t}\n \n\ndiff --git a/spring-boot-cli/src/test/java/org/springframework/boot/cli/CliTester.java b/spring-boot-cli/src/test/java/org/springframework/boot/cli/CliTester.java\n--- a/spring-boot-cli/src/test/java/org/springframework/boot/cli/CliTester.java\n+++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/CliTester.java\n@@ -98,7 +98,7 @@ protected String[] getSources(String... args) {\n \t\tfinal String[] sources = new String[args.length];\n \t\tfor (int i = 0; i < args.length; i++) {\n \t\t\tString arg = args[i];\n-\t\t\tif (arg.startsWith(\"--\")) {\n+\t\t\tif (arg.startsWith(\"-\")) {\n \t\t\t\tsources[i] = arg;\n \t\t\t}\n \t\t\telse {",
    "output": "Add -cp to option help for compiler commands"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java\n--- a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java\n+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java\n@@ -406,6 +406,12 @@ private void addParentClassLoaderEntries(List<Archive> lib) throws IOException,\n \t\t\t\tif (url.toString().endsWith(\".jar\") || url.toString().endsWith(\".zip\")) {\n \t\t\t\t\tlib.add(0, new JarFileArchive(new File(url.toURI())));\n \t\t\t\t}\n+\t\t\t\telse if (url.toString().endsWith(\"/*\")) {\n+\t\t\t\t\tString name = url.getFile();\n+\t\t\t\t\tlib.add(0,\n+\t\t\t\t\t\t\tnew ExplodedArchive(new File(name.substring(0,\n+\t\t\t\t\t\t\t\t\tname.length() - 1))));\n+\t\t\t\t}\n \t\t\t\telse {\n \t\t\t\t\tlib.add(0, new ExplodedArchive(new File(url.getFile())));\n \t\t\t\t}",
    "output": "Fix PropertiesLauncher for wildcard entries in parent classpath\nThis small change now plays nice with wildcard classpath\nentries coming from a parent classloader as its urls."
  },
  {
    "input": "diff --git a/spring-boot-cli/src/test/java/org/springframework/boot/cli/SampleIntegrationTests.java b/spring-boot-cli/src/test/java/org/springframework/boot/cli/SampleIntegrationTests.java\n--- a/spring-boot-cli/src/test/java/org/springframework/boot/cli/SampleIntegrationTests.java\n+++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/SampleIntegrationTests.java\n@@ -121,12 +121,6 @@ public void httpSample() throws Exception {\n \t\tassertTrue(\"Wrong output: \" + output, output.contains(\"Hello World\"));\n \t}\n \n-\t@Test\n-\tpublic void integrationSample() throws Exception {\n-\t\tString output = this.cli.run(\"integration.groovy\");\n-\t\tassertTrue(\"Wrong output: \" + output, output.contains(\"Hello, World\"));\n-\t}\n-\n \t@Test\n \tpublic void xmlSample() throws Exception {\n \t\tString output = this.cli.run(\"runner.xml\", \"runner.groovy\");",
    "output": "Remove support for Integration DSL (milestone only)"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java\n@@ -41,7 +41,7 @@\n @AutoConfigureAfter({ EndpointAutoConfiguration.class })\n @ConditionalOnExpression(\"${endpoints.jmx.enabled:true}\")\n @EnableConfigurationProperties(EndpointMBeanExportProperties.class)\n-class EndpointMBeanExportAutoConfiguration {\n+public class EndpointMBeanExportAutoConfiguration {\n \n \t@Autowired\n \tEndpointMBeanExportProperties properties = new EndpointMBeanExportProperties();",
    "output": "Make EndpointMBeanExportAutoConfiguration public"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/context/initializer/ConfigFileApplicationContextInitializerTests.java b/spring-boot/src/test/java/org/springframework/boot/context/initializer/ConfigFileApplicationContextInitializerTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/context/initializer/ConfigFileApplicationContextInitializerTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/context/initializer/ConfigFileApplicationContextInitializerTests.java\n@@ -170,6 +170,8 @@ public void specificResource() throws Exception {\n \t\tthis.initializer.initialize(this.context);\n \t\tString property = this.context.getEnvironment().getProperty(\"my.property\");\n \t\tassertThat(property, equalTo(\"fromspecificlocation\"));\n+\t\t// The default property source is still there\n+\t\tassertThat(this.context.getEnvironment().getProperty(\"foo\"), equalTo(\"bucket\"));\n \t}\n \n \t@Test",
    "output": "Re-org README a bit"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java b/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java\n--- a/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/logging/logback/LogbackLoggingSystem.java\n@@ -77,7 +77,11 @@ public void initialize(String configLocation) {\n \t\tAssert.notNull(configLocation, \"ConfigLocation must not be null\");\n \t\tString resolvedLocation = SystemPropertyUtils.resolvePlaceholders(configLocation);\n \t\tILoggerFactory factory = StaticLoggerBinder.getSingleton().getLoggerFactory();\n-\t\tAssert.isInstanceOf(ILoggerFactory.class, factory);\n+\t\tAssert.isInstanceOf(\n+\t\t\t\tLoggerContext.class,\n+\t\t\t\tfactory,\n+\t\t\t\t\"LoggerFactory is not a Logback LoggerContext but Logback is on the classpath. Either remove Logback or the competing implementation (\"\n+\t\t\t\t\t\t+ factory.getClass() + \")\");\n \t\tLoggerContext context = (LoggerContext) factory;\n \t\tcontext.stop();\n \t\ttry {",
    "output": "Add instanceof check and nice fat error message\nIf Logback and another SLF4J implementation are both on the classpath\nit is possible for the LogbackLoggingSystem to fail to locate\na LoggerContext. Rather than a ClassCastException it is better to\nmake an assertion with an error message."
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/RunCommand.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/RunCommand.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/RunCommand.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/RunCommand.java\n@@ -53,7 +53,7 @@ public String getUsageHelp() {\n \n \tpublic void stop() {\n \t\tif (this.getHandler() != null) {\n-\t\t\t((RunOptionHandler) this.getHandler()).runner.stop();\n+\t\t\t((RunOptionHandler) this.getHandler()).stop();\n \t\t}\n \t}\n \n@@ -78,8 +78,21 @@ protected void doOptions() {\n \t\t\tthis.quietOption = option(asList(\"quiet\", \"q\"), \"Quiet logging\");\n \t\t}\n \n+\t\tpublic synchronized void stop() {\n+\t\t\tif (this.runner != null) {\n+\t\t\t\tthis.runner.stop();\n+\t\t\t}\n+\t\t\tthis.runner = null;\n+\t\t}\n+\n \t\t@Override\n-\t\tprotected void run(OptionSet options) throws Exception {\n+\t\tprotected synchronized void run(OptionSet options) throws Exception {\n+\n+\t\t\tif (this.runner != null) {\n+\t\t\t\tthrow new RuntimeException(\n+\t\t\t\t\t\t\"Already running. Please stop the current application before running another.\");\n+\t\t\t}\n+\n \t\t\tFileOptions fileOptions = new FileOptions(options);\n \n \t\t\tif (options.has(this.editOption)) {",
    "output": "Prevent more than one app at a time from running"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/ShellCommand.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/ShellCommand.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/ShellCommand.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/ShellCommand.java\n@@ -44,6 +44,8 @@ public void run(String... args) throws Exception {\n \t\tfinal PrintStream sysout = System.out;\n \t\tfinal PrintStream syserr = System.err;\n \n+\t\tprintBanner();\n+\n \t\tSystem.setIn(console.getInput());\n \t\tPrintStream out = new PrintStream(new OutputStream() {\n \t\t\t@Override\n@@ -161,6 +163,13 @@ else if (s.endsWith(\"\\\"\")) {\n \t\t}\n \t}\n \n+\tprivate void printBanner() {\n+\t\tString version = ShellCommand.class.getPackage().getImplementationVersion();\n+\t\tversion = (version == null ? \"\" : \" (v\" + version + \")\");\n+\t\tSystem.out.println(\"Spring Boot CLI\" + version);\n+\t\tSystem.out.println(\"Hit TAB to complete. Type 'help' and hit RETURN for help.\");\n+\t}\n+\n \tpublic void pushPrompt(String prompt) {\n \t\tthis.prompts.push(this.prompt);\n \t\tthis.prompt = prompt;",
    "output": "Add basic Banner to CLI Shell"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/redis/RedisAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/redis/RedisAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/redis/RedisAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/redis/RedisAutoConfiguration.java\n@@ -24,7 +24,6 @@\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;\n-import org.springframework.boot.autoconfigure.redis.RedisAutoConfiguration.RedisProperties.Pool;\n import org.springframework.boot.context.properties.ConfigurationProperties;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n@@ -100,7 +99,9 @@ public LettucePool lettucePool() {\n \n \t\tprivate PoolConfig poolConfig() {\n \t\t\tPoolConfig pool = new PoolConfig();\n-\t\t\tPool props = this.config.getPool();\n+\t\t\t// FQCN to avoid bizarre compiler error on command line build (!?)\n+\t\t\torg.springframework.boot.autoconfigure.redis.RedisAutoConfiguration.RedisProperties.Pool props = this.config\n+\t\t\t\t\t.getPool();\n \t\t\tif (props != null) {\n \t\t\t\tpool.setMaxActive(props.getMaxActive());\n \t\t\t\tpool.setMaxIdle(props.getMaxIdle());",
    "output": "Fix bizarre compiler error"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-web-jsp/src/main/java/org/springframework/boot/sample/jsp/WelcomeController.java b/spring-boot-samples/spring-boot-sample-web-jsp/src/main/java/org/springframework/boot/sample/jsp/WelcomeController.java\n--- a/spring-boot-samples/spring-boot-sample-web-jsp/src/main/java/org/springframework/boot/sample/jsp/WelcomeController.java\n+++ b/spring-boot-samples/spring-boot-sample-web-jsp/src/main/java/org/springframework/boot/sample/jsp/WelcomeController.java\n@@ -3,15 +3,20 @@\n import java.util.Date;\n import java.util.Map;\n \n+import org.springframework.beans.factory.annotation.Value;\n import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.RequestMapping;\n \n @Controller\n public class WelcomeController {\n \n+\t@Value(\"${application.message:Hello World}\")\n+\tprivate String message = \"Hello World\";\n+\n \t@RequestMapping(\"/\")\n \tpublic String welcome(Map<String,Object> model) {\n \t\tmodel.put(\"time\", new Date());\n+\t\tmodel.put(\"message\", message );\n \t\treturn \"welcome\";\n \t}\n ",
    "output": "Add @Value injection to JSP (WAR) sample"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointMBeanExportAutoConfiguration.java\n@@ -16,20 +16,31 @@\n \n package org.springframework.boot.actuate.autoconfigure;\n \n+import org.springframework.boot.actuate.endpoint.Endpoint;\n import org.springframework.boot.actuate.endpoint.jmx.EndpointMBeanExporter;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n+import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.jmx.export.MBeanExporter;\n \n+/**\n+ * {@link EnableAutoConfiguration Auto-configuration} to enable JMX export for\n+ * {@link Endpoint}s.\n+ * \n+ * @author Christian Dupuis\n+ */\n @Configuration\n @ConditionalOnBean({ MBeanExporter.class })\n @AutoConfigureAfter({ EndpointAutoConfiguration.class })\n+@ConditionalOnExpression(\"${endpoints.jmx.enabled:true}\")\n class EndpointMBeanExportAutoConfiguration {\n \n \t@Bean\n \tpublic EndpointMBeanExporter endpointMBeanExporter() {\n+\t\t// TODO add configuration for domain name\n \t\treturn new EndpointMBeanExporter();\n \t}\n ",
    "output": "Allow Endpoint JMX export to be switched off"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/ExplodedArchiveTests.java b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/ExplodedArchiveTests.java\n--- a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/ExplodedArchiveTests.java\n+++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/archive/ExplodedArchiveTests.java\n@@ -103,7 +103,7 @@ public void getEntries() throws Exception {\n \t@Test\n \tpublic void getUrl() throws Exception {\n \t\tURL url = this.archive.getUrl();\n-\t\tassertThat(url, equalTo(this.rootFolder.toURI().toURL()));\n+\t\tassertThat(new File(url.toURI()), equalTo(new File(this.rootFolder.toURI())));\n \t}\n \n \t@Test",
    "output": "Attempt to make URL comparison windoze proof"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jmx/JmxAutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jmx/JmxAutoConfigurationTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jmx/JmxAutoConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jmx/JmxAutoConfigurationTests.java\n@@ -47,14 +47,13 @@ public void tearDown() {\n \t\t}\n \t}\n \n-\t@Test(expected = NoSuchBeanDefinitionException.class)\n+\t@Test\n \tpublic void testDefaultMBeanExport() {\n \t\tthis.context = new AnnotationConfigApplicationContext();\n \t\tthis.context.register(JmxAutoConfiguration.class);\n \t\tthis.context.refresh();\n \n-\t\tthis.context.getBean(MBeanExporter.class);\n-\t\tfail();\n+\t\tassertNotNull(this.context.getBean(MBeanExporter.class));\n \t}\n \n \t@Test(expected = NoSuchBeanDefinitionException.class)",
    "output": "Fix failing test due to change in JMX export default setting"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementServerPropertiesAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementServerPropertiesAutoConfiguration.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementServerPropertiesAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementServerPropertiesAutoConfiguration.java\n@@ -26,7 +26,6 @@\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n-import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for the\n@@ -48,7 +47,7 @@ public ManagementServerProperties managementServerProperties() {\n \t// In case security auto configuration hasn't been included\n \t@Bean(name = \"org.springframework.autoconfigure.security.SecurityProperties\")\n \t@ConditionalOnMissingBean\n-\t@ConditionalOnClass(EnableWebSecurity.class)\n+\t@ConditionalOnClass(name = \"org.springframework.security.config.annotation.web.configuration.EnableWebSecurity\")\n \tpublic SecurityProperties securityProperties() {\n \t\treturn new SecurityProperties();\n \t}",
    "output": "Prevent type not present exception when no security on classpath"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/EmbeddedServletContainerAutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/EmbeddedServletContainerAutoConfigurationTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/EmbeddedServletContainerAutoConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/EmbeddedServletContainerAutoConfigurationTests.java\n@@ -179,7 +179,7 @@ public DispatcherServlet springServlet() {\n \tpublic static class NonSpringServletConfiguration {\n \n \t\t@Bean\n-\t\tpublic Servlet dispatcherServlet() {\n+\t\tpublic FrameworkServlet dispatcherServlet() {\n \t\t\treturn new FrameworkServlet() {\n \t\t\t\t@Override\n \t\t\t\tprotected void doService(HttpServletRequest request,",
    "output": "Document switching off DispatcherServlet"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jmx/JmxAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jmx/JmxAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jmx/JmxAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jmx/JmxAutoConfiguration.java\n@@ -36,7 +36,7 @@\n @Configuration\n @ConditionalOnClass({ MBeanExporter.class })\n @ConditionalOnMissingBean({ MBeanExporter.class })\n-@ConditionalOnExpression(\"${spring.jmx.enabled:false}\")\n+@ConditionalOnExpression(\"${spring.jmx.enabled:true}\")\n public class JmxAutoConfiguration {\n \n \t@Configuration",
    "output": "Enable JMX export auto configuration by default"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementServerPropertiesAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementServerPropertiesAutoConfiguration.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementServerPropertiesAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/ManagementServerPropertiesAutoConfiguration.java\n@@ -19,12 +19,14 @@\n import org.springframework.boot.actuate.properties.ManagementServerProperties;\n import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.security.SecurityProperties;\n import org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for the\n@@ -46,6 +48,7 @@ public ManagementServerProperties managementServerProperties() {\n \t// In case security auto configuration hasn't been included\n \t@Bean(name = \"org.springframework.autoconfigure.security.SecurityProperties\")\n \t@ConditionalOnMissingBean\n+\t@ConditionalOnClass(EnableWebSecurity.class)\n \tpublic SecurityProperties securityProperties() {\n \t\treturn new SecurityProperties();\n \t}",
    "output": "Add extra condition to security properties config"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n--- a/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n@@ -292,7 +292,7 @@ public ConfigurableApplicationContext run(String... args) {\n \t\t\tpostProcessApplicationContext(context);\n \t\t\tapplyInitializers(context);\n \t\t\tif (this.logStartupInfo) {\n-\t\t\t\tlogStartupInfo();\n+\t\t\t\tlogStartupInfo(context.getParent() == null);\n \t\t\t}\n \n \t\t\tload(context, sources.toArray(new Object[sources.size()]));\n@@ -437,9 +437,14 @@ protected void applyInitializers(ConfigurableApplicationContext context) {\n \t/**\n \t * Called to log startup information, subclasses may override to add additional\n \t * logging.\n+\t * \n+\t * @param isRoot true if this application is the root of a context hierarchy\n \t */\n-\tprotected void logStartupInfo() {\n-\t\tnew StartupInfoLogger(this.mainApplicationClass).logStarting(getApplicationLog());\n+\tprotected void logStartupInfo(boolean isRoot) {\n+\t\tif (isRoot) {\n+\t\t\tnew StartupInfoLogger(this.mainApplicationClass)\n+\t\t\t\t\t.logStarting(getApplicationLog());\n+\t\t}\n \t}\n \n \t/**",
    "output": "Only log startup info (PID etc) for root context"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/SpringBootPlugin.java b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/SpringBootPlugin.java\n--- a/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/SpringBootPlugin.java\n+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/SpringBootPlugin.java\n@@ -25,15 +25,15 @@\n import org.springframework.boot.gradle.task.RunJar;\n \n /**\n- * Gradle 'Spring Boot' {@link Plugin}.\n+ * Gradle 'Spring Boot' {@link Plugin}. Provides 2 tasks (bootRepackge and bootRun).\n  * \n  * @author Phillip Webb\n  */\n public class SpringBootPlugin implements Plugin<Project> {\n \n \tprivate static final String REPACKAGE_TASK_NAME = \"bootRepackage\";\n \n-\tprivate static final String RUN_JAR_TASK_NAME = \"runJar\";\n+\tprivate static final String RUN_JAR_TASK_NAME = \"bootRun\";\n \n \t@Override\n \tpublic void apply(Project project) {",
    "output": "Add build.gradle samples and rename runJar->bootRun"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java\n@@ -54,10 +54,6 @@ public class HibernateJpaAutoConfiguration extends JpaBaseConfiguration implemen\n \n \tprivate ClassLoader classLoader;\n \n-\tpublic HibernateJpaAutoConfiguration() {\n-\t\tSystem.err.println(\"Init\");\n-\t}\n-\n \t@Override\n \tpublic void setBeanClassLoader(ClassLoader classLoader) {\n \t\tthis.classLoader = classLoader;",
    "output": "Remove debug logging on stderr"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfigurationTests.java\n@@ -88,7 +88,7 @@ public void onDifferentPort() throws Exception {\n \t\t\t\tEmbeddedServletContainerAutoConfiguration.class,\n \t\t\t\tDispatcherServletAutoConfiguration.class, WebMvcAutoConfiguration.class,\n \t\t\t\tManagementServerPropertiesAutoConfiguration.class,\n-\t\t\t\tEndpointWebMvcAutoConfiguration.class);\n+\t\t\t\tEndpointWebMvcAutoConfiguration.class, ErrorMvcAutoConfiguration.class);\n \t\tthis.applicationContext.refresh();\n \t\tassertContent(\"/controller\", 8080, \"controlleroutput\");\n \t\tassertContent(\"/endpoint\", 8080, null);\n@@ -125,7 +125,7 @@ public void specificPortsViaProperties() throws Exception {\n \t\t\t\tServerPropertiesAutoConfiguration.class,\n \t\t\t\tEmbeddedServletContainerAutoConfiguration.class,\n \t\t\t\tDispatcherServletAutoConfiguration.class, WebMvcAutoConfiguration.class,\n-\t\t\t\tEndpointWebMvcAutoConfiguration.class);\n+\t\t\t\tEndpointWebMvcAutoConfiguration.class, ErrorMvcAutoConfiguration.class);\n \t\tthis.applicationContext.refresh();\n \t\tassertContent(\"/controller\", 7070, \"controlleroutput\");\n \t\tassertContent(\"/endpoint\", 7070, null);",
    "output": "Fix broken test"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/AuthenticationManagerConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/AuthenticationManagerConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/AuthenticationManagerConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/security/AuthenticationManagerConfiguration.java\n@@ -56,7 +56,6 @@ public AuthenticationManager authenticationManager(\n \t\t\t\t\t+ user.getPassword() + \"\\n\\n\");\n \t\t}\n \n-\t\t// TODO: Add the management role...\n \t\tSet<String> roles = new LinkedHashSet<String>(user.getRole());\n \n \t\tbuilder.withUser(user.getName()).password(user.getPassword())",
    "output": "Remove inaccurate TODO"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/ServerPropertiesTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/ServerPropertiesTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/ServerPropertiesTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/web/ServerPropertiesTests.java\n@@ -24,9 +24,12 @@\n import org.junit.Test;\n import org.springframework.beans.MutablePropertyValues;\n import org.springframework.boot.bind.RelaxedDataBinder;\n+import org.springframework.boot.context.embedded.ConfigurableEmbeddedServletContainerFactory;\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n \n /**\n  * Tests for {@link ServerProperties}.\n@@ -68,6 +71,19 @@ public void testTomcatBinding() throws Exception {\n \t\t\t\t.getProtocolHeader());\n \t}\n \n-\t// FIXME test customize\n+\t@Test\n+\tpublic void testCustomizeTomcat() throws Exception {\n+\t\tConfigurableEmbeddedServletContainerFactory factory = mock(ConfigurableEmbeddedServletContainerFactory.class);\n+\t\tthis.properties.customize(factory);\n+\t\tverify(factory).setContextPath(\"\");\n+\t}\n+\n+\t@Test\n+\tpublic void testCustomizeTomcatPort() throws Exception {\n+\t\tConfigurableEmbeddedServletContainerFactory factory = mock(ConfigurableEmbeddedServletContainerFactory.class);\n+\t\tthis.properties.setPort(8080);\n+\t\tthis.properties.customize(factory);\n+\t\tverify(factory).setPort(8080);\n+\t}\n \n }",
    "output": "Add test for customize container factory"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/EndpointDisabledException.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/EndpointDisabledException.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/EndpointDisabledException.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/EndpointDisabledException.java\n@@ -0,0 +1,26 @@\n+/*\n+ * Copyright 2013 the original author or authors.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.springframework.boot.actuate.endpoint;\n+\n+/**\n+ * {@link RuntimeException} indicating an {@link Endpoint} implementation is not enabled.\n+ * \n+ * @author Christian Dupuis\n+ */\n+public class EndpointDisabledException extends RuntimeException {\n+\n+}",
    "output": "Add missing new exception class"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/test/SpringApplicationConfiguration.java b/spring-boot/src/test/java/org/springframework/boot/test/SpringApplicationConfiguration.java\n--- a/spring-boot/src/test/java/org/springframework/boot/test/SpringApplicationConfiguration.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/test/SpringApplicationConfiguration.java\n@@ -38,11 +38,6 @@\n @Target(ElementType.TYPE)\n public @interface SpringApplicationConfiguration {\n \n-\t/**\n-\t * @see ContextConfiguration#value()\n-\t */\n-\tString[] value() default {};\n-\n \t/**\n \t * @see ContextConfiguration#locations()\n \t */",
    "output": "Upgrade @SpringApplicationConfiguration after comment in 3e6c1b"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnExpressionCondition.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnExpressionCondition.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnExpressionCondition.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/OnExpressionCondition.java\n@@ -38,6 +38,7 @@ public ConditionOutcome getMatchOutcome(ConditionContext context,\n \n \t\tString expression = (String) metadata.getAnnotationAttributes(\n \t\t\t\tConditionalOnExpression.class.getName()).get(\"value\");\n+\t\tString rawExpression = expression;\n \t\tif (!expression.startsWith(\"#{\")) {\n \t\t\t// For convenience allow user to provide bare expression with no #{} wrapper\n \t\t\texpression = \"#{\" + expression + \"}\";\n@@ -58,7 +59,7 @@ public ConditionOutcome getMatchOutcome(ConditionContext context,\n \t\tif (metadata instanceof ClassMetadata) {\n \t\t\tmessage.append(\" on \" + ((ClassMetadata) metadata).getClassName());\n \t\t}\n-\t\tmessage.append(\": \" + expression);\n+\t\tmessage.append(\": \" + rawExpression);\n \t\treturn new ConditionOutcome(result, message.toString());\n \t}\n ",
    "output": "Improve reporting of SpEL condition matching"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-web-jsp/src/main/java/org/springframework/boot/sample/jsp/SampleWebJspApplication.java b/spring-boot-samples/spring-boot-sample-web-jsp/src/main/java/org/springframework/boot/sample/jsp/SampleWebJspApplication.java\n--- a/spring-boot-samples/spring-boot-sample-web-jsp/src/main/java/org/springframework/boot/sample/jsp/SampleWebJspApplication.java\n+++ b/spring-boot-samples/spring-boot-sample-web-jsp/src/main/java/org/springframework/boot/sample/jsp/SampleWebJspApplication.java\n@@ -18,13 +18,20 @@\n \n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.builder.SpringApplicationBuilder;\n+import org.springframework.boot.web.SpringBootServletInitializer;\n import org.springframework.context.annotation.ComponentScan;\n import org.springframework.context.annotation.Configuration;\n \n @Configuration\n @EnableAutoConfiguration\n @ComponentScan\n-public class SampleWebJspApplication {\n+public class SampleWebJspApplication extends SpringBootServletInitializer {\n+\n+\t@Override\n+\tprotected SpringApplicationBuilder configure(SpringApplicationBuilder application) {\n+\t\treturn application.sources(SampleWebJspApplication.class);\n+\t}\n \n \tpublic static void main(String[] args) throws Exception {\n \t\tSpringApplication.run(SampleWebJspApplication.class, args);",
    "output": "Convert JSP sample to deployable (executable) WAR"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-web-jsp/src/main/java/org/springframework/boot/sample/jsp/WelcomeController.java b/spring-boot-samples/spring-boot-sample-web-jsp/src/main/java/org/springframework/boot/sample/jsp/WelcomeController.java\n--- a/spring-boot-samples/spring-boot-sample-web-jsp/src/main/java/org/springframework/boot/sample/jsp/WelcomeController.java\n+++ b/spring-boot-samples/spring-boot-sample-web-jsp/src/main/java/org/springframework/boot/sample/jsp/WelcomeController.java\n@@ -1,13 +1,17 @@\n package org.springframework.boot.sample.jsp;\n \n+import java.util.Date;\n+import java.util.Map;\n+\n import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.RequestMapping;\n \n @Controller\n public class WelcomeController {\n \n \t@RequestMapping(\"/\")\n-\tpublic String welcome() {\n+\tpublic String welcome(Map<String,Object> model) {\n+\t\tmodel.put(\"time\", new Date());\n \t\treturn \"welcome\";\n \t}\n ",
    "output": "Add JSTL to JSP sample"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java\n@@ -382,7 +382,7 @@ protected boolean isEnabled(CRaSHPlugin<?> plugin) {\n \t\t\t\treturn true;\n \t\t\t}\n \n-\t\t\tSet<Class> pluginClasses = ClassUtils.getAllInterfacesAsSet(plugin);\n+\t\t\tSet<Class<?>> pluginClasses = ClassUtils.getAllInterfacesAsSet(plugin);\n \t\t\tpluginClasses.add(plugin.getClass());\n \n \t\t\tfor (Class<?> pluginClass : pluginClasses) {",
    "output": "Fix for upstream Spring changes"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainer.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainer.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainer.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainer.java\n@@ -94,7 +94,7 @@ public void run() {\n \t\t}\n \t\tcatch (Exception ex) {\n \t\t\tthrow new EmbeddedServletContainerException(\n-\t\t\t\t\t\"Unable to start embdedded Tomcat\", ex);\n+\t\t\t\t\t\"Unable to start embedded Tomcat\", ex);\n \t\t}\n \t}\n \n@@ -109,7 +109,7 @@ public void start() throws EmbeddedServletContainerException {\n \t\t\tcatch (Exception ex) {\n \t\t\t\tthis.logger.error(\"Cannot start connector: \", ex);\n \t\t\t\tthrow new EmbeddedServletContainerException(\n-\t\t\t\t\t\t\"Unable to start embdedded Tomcat connectors\", ex);\n+\t\t\t\t\t\t\"Unable to start embedded Tomcat connectors\", ex);\n \t\t\t}\n \t\t}\n \t}\n@@ -127,7 +127,7 @@ public synchronized void stop() throws EmbeddedServletContainerException {\n \t\t}\n \t\tcatch (Exception ex) {\n \t\t\tthrow new EmbeddedServletContainerException(\n-\t\t\t\t\t\"Unable to stop embdedded Tomcat\", ex);\n+\t\t\t\t\t\"Unable to stop embedded Tomcat\", ex);\n \t\t}\n \t}\n ",
    "output": "Fix typos in Exception messages"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainer.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainer.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainer.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainer.java\n@@ -94,7 +94,7 @@ public void run() {\n \t\t}\n \t\tcatch (Exception ex) {\n \t\t\tthrow new EmbeddedServletContainerException(\n-\t\t\t\t\t\"Unable to start embdedded Tomcat\", ex);\n+\t\t\t\t\t\"Unable to start embedded Tomcat\", ex);\n \t\t}\n \t}\n \n@@ -109,7 +109,7 @@ public void start() throws EmbeddedServletContainerException {\n \t\t\tcatch (Exception ex) {\n \t\t\t\tthis.logger.error(\"Cannot start connector: \", ex);\n \t\t\t\tthrow new EmbeddedServletContainerException(\n-\t\t\t\t\t\t\"Unable to start embdedded Tomcat connectors\", ex);\n+\t\t\t\t\t\t\"Unable to start embedded Tomcat connectors\", ex);\n \t\t\t}\n \t\t}\n \t}\n@@ -127,7 +127,7 @@ public synchronized void stop() throws EmbeddedServletContainerException {\n \t\t}\n \t\tcatch (Exception ex) {\n \t\t\tthrow new EmbeddedServletContainerException(\n-\t\t\t\t\t\"Unable to stop embdedded Tomcat\", ex);\n+\t\t\t\t\t\"Unable to stop embedded Tomcat\", ex);\n \t\t}\n \t}\n ",
    "output": "Fix 3 x typos in Exception messages"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/properties/ShellPropertiesTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/properties/ShellPropertiesTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/properties/ShellPropertiesTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/properties/ShellPropertiesTests.java\n@@ -303,6 +303,7 @@ public void testCustomShellProperties() throws Exception {\n \t\tPluginLifeCycle lifeCycle = context.getBean(PluginLifeCycle.class);\n \t\tString uuid = lifeCycle.getConfig().getProperty(\"test.uuid\");\n \t\tassertEquals(TestShellConfiguration.uuid, uuid);\n+\t\tcontext.close();\n \t}\n \n \t@Configuration",
    "output": "Close application context in test"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationReportLoggingInitializer.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationReportLoggingInitializer.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationReportLoggingInitializer.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationReportLoggingInitializer.java\n@@ -59,7 +59,7 @@ public class AutoConfigurationReportLoggingInitializer implements\n \tpublic void initialize(ConfigurableApplicationContext applicationContext) {\n \t\tthis.loggerBean = new AutoConfigurationReportLogger(applicationContext);\n \t\tConfigurableListableBeanFactory beanFactory = applicationContext.getBeanFactory();\n-\t\tif (!beanFactory.containsBean(LOGGER_BEAN)) {\n+\t\tif (!beanFactory.containsSingleton(LOGGER_BEAN)) {\n \t\t\tbeanFactory.registerSingleton(LOGGER_BEAN, this.loggerBean);\n \t\t}\n \t}",
    "output": "Only check for singleton in AutoConfigurationReportLoggingInitializer\nUsing containsBean() involves looking in the parent bean factory\nif there is one, and that would mean that the same report woykd be used\nfor multiple contexts, which wouldn't make sense."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/MongoRepositoriesAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/MongoRepositoriesAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/MongoRepositoriesAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/MongoRepositoriesAutoConfiguration.java\n@@ -55,16 +55,20 @@ protected static class MongoRepositoriesConfiguration {\n \n \t\t@Autowired\n \t\tprivate MongoProperties config;\n+\t\tprivate Mongo mongo;\n \n \t\t@PreDestroy\n \t\tpublic void close() throws UnknownHostException {\n-\t\t\tmongo().close();\n+\t\t\tif (this.mongo != null) {\n+\t\t\t\tthis.mongo.close();\n+\t\t\t}\n \t\t}\n \n \t\t@Bean\n \t\t@ConditionalOnMissingBean(Mongo.class)\n \t\tMongo mongo() throws UnknownHostException {\n-\t\t\treturn this.config.mongo();\n+\t\t\tthis.mongo = this.config.mongo();\n+\t\t\treturn this.mongo;\n \t\t}\n \n \t\t@Bean",
    "output": "Prevent @Bean method from being called during @PreDestroy"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnResourceTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnResourceTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnResourceTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnResourceTests.java\n@@ -59,7 +59,7 @@ public String bar() {\n \t}\n \n \t@Configuration\n-\t@ConditionalOnResource(resources = \"schemq.sqlt\")\n+\t@ConditionalOnResource(resources = \"schema.sql\")\n \tprotected static class BasicConfiguration {\n \t\t@Bean\n \t\tpublic String foo() {",
    "output": "Really fix it"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnResourceTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnResourceTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnResourceTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/condition/ConditionalOnResourceTests.java\n@@ -59,7 +59,7 @@ public String bar() {\n \t}\n \n \t@Configuration\n-\t@ConditionalOnResource(resources = \"logback-test.xml\")\n+\t@ConditionalOnResource(resources = \"schemq.sqlt\")\n \tprotected static class BasicConfiguration {\n \t\t@Bean\n \t\tpublic String foo() {",
    "output": "Fix test on command line"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/test/java/org/springframework/boot/cli/GrabCommandIntegrationTests.java b/spring-boot-cli/src/test/java/org/springframework/boot/cli/GrabCommandIntegrationTests.java\n--- a/spring-boot-cli/src/test/java/org/springframework/boot/cli/GrabCommandIntegrationTests.java\n+++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/GrabCommandIntegrationTests.java\n@@ -35,7 +35,7 @@\n public class GrabCommandIntegrationTests {\n \n \t@Rule\n-\tpublic CliTester cli = new CliTester(\"grab-samples/\");\n+\tpublic CliTester cli = new CliTester(\"src/test/resources/grab-samples/\");\n \n \t@Before\n \t@After",
    "output": "Move grab-sample to resources dir"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainer.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainer.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainer.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainer.java\n@@ -107,6 +107,8 @@ public void start() throws EmbeddedServletContainerException {\n \t\t\t}\n \t\t\tcatch (Exception ex) {\n \t\t\t\tthis.logger.error(\"Cannot start connector: \", ex);\n+\t\t\t\tthrow new EmbeddedServletContainerException(\n+\t\t\t\t\t\t\"Unable to start embdedded Tomcat connectors\", ex);\n \t\t\t}\n \t\t}\n \t}",
    "output": "Tomcatembeddedservletcontainer now fails fast, if there are exceptions during protocol handler startup (re-throw exception)"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/redis/RedisAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/redis/RedisAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/redis/RedisAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/redis/RedisAutoConfiguration.java\n@@ -61,7 +61,7 @@ RedisConnectionFactory redisConnectionFactory() throws UnknownHostException {\n \t\t}\n \n \t\t@Bean\n-\t\t@ConditionalOnMissingBean(RedisOperations.class)\n+\t\t@ConditionalOnMissingBean(name = \"redisTemplate\")\n \t\tRedisOperations<Object, Object> redisTemplate(\n \t\t\t\tRedisConnectionFactory redisConnectionFactory)\n \t\t\t\tthrows UnknownHostException {",
    "output": "Weird build problem?"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/builder/SpringApplicationBuilderTests.java b/spring-boot/src/test/java/org/springframework/boot/builder/SpringApplicationBuilderTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/builder/SpringApplicationBuilderTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/builder/SpringApplicationBuilderTests.java\n@@ -179,6 +179,14 @@ public void initializersCreatedOnce() throws Exception {\n \t\tassertEquals(7, application.application().getInitializers().size());\n \t}\n \n+\t@Test\n+\tpublic void initializersCreatedOnceForChild() throws Exception {\n+\t\tSpringApplicationBuilder application = new SpringApplicationBuilder(\n+\t\t\t\tExampleConfig.class).child(ChildConfig.class).web(false);\n+\t\tthis.context = application.run();\n+\t\tassertEquals(8, application.application().getInitializers().size());\n+\t}\n+\n \t@Test\n \tpublic void initializersIncludeDefaults() throws Exception {\n \t\tSpringApplicationBuilder application = new SpringApplicationBuilder(",
    "output": "Add test for initializers when child context created"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationReportLoggingInitializer.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationReportLoggingInitializer.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationReportLoggingInitializer.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/AutoConfigurationReportLoggingInitializer.java\n@@ -20,6 +20,7 @@\n \n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n+import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.SpringApplicationErrorHandler;\n import org.springframework.boot.autoconfigure.AutoConfigurationReport.ConditionAndOutcome;\n@@ -57,8 +58,10 @@ public class AutoConfigurationReportLoggingInitializer implements\n \t@Override\n \tpublic void initialize(ConfigurableApplicationContext applicationContext) {\n \t\tthis.loggerBean = new AutoConfigurationReportLogger(applicationContext);\n-\t\tapplicationContext.getBeanFactory().registerSingleton(LOGGER_BEAN,\n-\t\t\t\tthis.loggerBean);\n+\t\tConfigurableListableBeanFactory beanFactory = applicationContext.getBeanFactory();\n+\t\tif (!beanFactory.containsBean(LOGGER_BEAN)) {\n+\t\t\tbeanFactory.registerSingleton(LOGGER_BEAN, this.loggerBean);\n+\t\t}\n \t}\n \n \t@Override",
    "output": "Be defensive about adding autoconfig report bean"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfiguration.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfiguration.java\n@@ -319,7 +319,7 @@ public AuthenticationManager authenticationManager(\n \t\t\tUser user = this.security.getUser();\n \n \t\t\tif (user.isDefaultPassword()) {\n-\t\t\t\tlogger.info(\"\\n\\n\" + \"Using default password for application endpoints: \"\n+\t\t\t\tlogger.info(\"\\n\\nUsing default password for application endpoints: \"\n \t\t\t\t\t\t+ user.getPassword() + \"\\n\\n\");\n \t\t\t}\n ",
    "output": "Remove unnecessary String concatenation"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/SpringCli.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/SpringCli.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/SpringCli.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/SpringCli.java\n@@ -304,14 +304,21 @@ else if ((arguments.size() > 0) && (starting.length() > 0)) {\n \n \t\tprivate void showCommandHints(String starting) {\n \t\t\tfor (Command command : SpringCli.this.commands) {\n-\t\t\t\tif (command.getName().startsWith(starting)\n-\t\t\t\t\t\t|| (command.isOptionCommand() && (\"--\" + command.getName())\n-\t\t\t\t\t\t\t\t.startsWith(starting))) {\n+\t\t\t\tif (isHintMatch(command, starting)) {\n \t\t\t\t\tLog.info(command.getName() + \" \" + command.getDescription());\n \t\t\t\t}\n \t\t\t}\n \t\t}\n \n+\t\tprivate boolean isHintMatch(Command command, String starting) {\n+\t\t\tif (command instanceof HintCommand) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\treturn command.getName().startsWith(starting)\n+\t\t\t\t\t|| (command.isOptionCommand() && (\"--\" + command.getName())\n+\t\t\t\t\t\t\t.startsWith(starting));\n+\t\t}\n+\n \t\tprivate void showCommandOptionHints(String commandName,\n \t\t\t\tList<String> specifiedArguments, String starting) {\n \t\t\tCommand command = find(commandName);",
    "output": "Don't provide hints for the hint command"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/StartupInfoLogger.java b/spring-boot/src/main/java/org/springframework/boot/StartupInfoLogger.java\n--- a/spring-boot/src/main/java/org/springframework/boot/StartupInfoLogger.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/StartupInfoLogger.java\n@@ -17,6 +17,7 @@\n package org.springframework.boot;\n \n import java.io.File;\n+import java.lang.management.ManagementFactory;\n import java.net.InetAddress;\n import java.net.JarURLConnection;\n import java.net.URL;\n@@ -87,7 +88,9 @@ private StringBuilder getStartedMessage(StopWatch stopWatch) {\n \t\tmessage.append(getApplicationName());\n \t\tmessage.append(\" in \");\n \t\tmessage.append(stopWatch.getTotalTimeSeconds());\n-\t\tmessage.append(\" seconds\");\n+\t\tmessage.append(\" seconds (JVM running for \");\n+\t\tmessage.append(ManagementFactory.getRuntimeMXBean().getUptime() / 1000.0);\n+\t\tmessage.append(\")\");\n \t\treturn message;\n \t}\n ",
    "output": "Add JVM uptime to startup info log output"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchAutoConfiguration.java\n@@ -36,6 +36,7 @@\n public class BatchAutoConfiguration {\n \n \t@Bean\n+\t@ConditionalOnMissingBean(BatchDatabaseInitializer.class)\n \tpublic BatchDatabaseInitializer batchDatabaseInitializer() {\n \t\treturn new BatchDatabaseInitializer();\n \t}",
    "output": "Make sure Batch autoconfig only gets inlcuded once"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfigurationTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfigurationTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfigurationTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfigurationTests.java\n@@ -194,7 +194,7 @@ public void testDefaultAuthenticationProvider() {\n \t\tthis.context.register(SecurityConfiguration.class);\n \t\tthis.context.register(CrshAutoConfiguration.class);\n \t\tthis.context.refresh();\n-\t\t\n+\n \t\tPluginLifeCycle lifeCycle = this.context.getBean(PluginLifeCycle.class);\n \t\tassertEquals(lifeCycle.getConfig().get(\"crash.auth\"), \"simple\");\n \t}",
    "output": "Strip trailing whitespace"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/test/java/org/springframework/boot/cli/ReproIntegrationTests.java b/spring-boot-cli/src/test/java/org/springframework/boot/cli/ReproIntegrationTests.java\n--- a/spring-boot-cli/src/test/java/org/springframework/boot/cli/ReproIntegrationTests.java\n+++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/ReproIntegrationTests.java\n@@ -39,4 +39,20 @@ public void grabAntBuilder() throws Exception {\n \t\t\t\tcontainsString(\"{\\\"message\\\":\\\"Hello World\\\"}\"));\n \t}\n \n+\t// Security depends on old versions of Spring so if the dependencies aren't pinned\n+\t// this will fail\n+\t@Test\n+\tpublic void securityDependencies() throws Exception {\n+\t\tthis.cli.run(\"secure.groovy\");\n+\t\tassertThat(this.cli.getHttpOutput(),\n+\t\t\t\tcontainsString(\"{\\\"message\\\":\\\"Hello World\\\"}\"));\n+\t}\n+\n+\t@Test\n+\tpublic void shellDependencies() throws Exception {\n+\t\tthis.cli.run(\"crsh.groovy\");\n+\t\tassertThat(this.cli.getHttpOutput(),\n+\t\t\t\tcontainsString(\"{\\\"message\\\":\\\"Hello World\\\"}\"));\n+\t}\n+\n }",
    "output": "Add tests for loading dependencies in starters without parent"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/AetherGrapeEngine.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/AetherGrapeEngine.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/AetherGrapeEngine.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/grape/AetherGrapeEngine.java\n@@ -114,11 +114,24 @@ private File getM2HomeDirectory() {\n \t\tif (StringUtils.hasLength(grapeRoot)) {\n \t\t\treturn new File(grapeRoot);\n \t\t}\n+\t\treturn getDefaultM2HomeDirectory();\n+\t}\n+\n+\tprivate File getDefaultM2HomeDirectory() {\n+\t\tString mavenRoot = System.getProperty(\"maven.home\");\n+\t\tif (StringUtils.hasLength(mavenRoot)) {\n+\t\t\treturn new File(mavenRoot);\n+\t\t}\n \t\treturn new File(System.getProperty(\"user.home\"), \".m2\");\n \t}\n \n \tprivate Set<RemoteRepository> getRemoteRepositories() {\n \t\tLinkedHashSet<RemoteRepository> repositories = new LinkedHashSet<RemoteRepository>();\n+\t\tString grapeRoot = System.getProperty(\"grape.root\");\n+\t\tif (StringUtils.hasLength(grapeRoot)) {\n+\t\t\taddRemoteRepository(repositories, \"local\", new File(\n+\t\t\t\t\tgetDefaultM2HomeDirectory(), \"repository\").toURI().toASCIIString());\n+\t\t}\n \t\taddRemoteRepository(repositories, \"central\", \"http://repo1.maven.org/maven2/\");\n \t\treturn repositories;\n \t}",
    "output": "Attempt to allow Aether to load from local repo"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/testrunner/TestRunner.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/testrunner/TestRunner.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/testrunner/TestRunner.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/testrunner/TestRunner.java\n@@ -32,8 +32,6 @@\n  */\n public class TestRunner {\n \n-\tprivate static final String DELEGATE_RUNNER = DelegateTestRunner.class.getName();\n-\n \tprivate static final String JUNIT_TEST_ANNOTATION = \"org.junit.Test\";\n \n \tprivate final File[] files;",
    "output": "Remove unused field"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/report/AutoConfigurationReport.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/report/AutoConfigurationReport.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/report/AutoConfigurationReport.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/report/AutoConfigurationReport.java\n@@ -39,9 +39,9 @@\n import org.springframework.util.ClassUtils;\n \n /**\n- * Bean used to gather autoconfiguration decisions, and then generate a collection of info\n- * for beans that were created as well as situations where the conditional outcome was\n- * negative.\n+ * Bean used to gather auto-configuration decisions, and then generate a collection of\n+ * info for beans that were created as well as situations where the conditional outcome\n+ * was negative.\n  * \n  * @author Greg Turnquist\n  * @author Dave Syer\n@@ -54,10 +54,15 @@ public class AutoConfigurationReport implements ApplicationContextAware,\n \tprivate static Log logger = LogFactory.getLog(AutoConfigurationReport.class);\n \n \tprivate Set<CreatedBeanInfo> beansCreated = new LinkedHashSet<CreatedBeanInfo>();\n+\n \tprivate Map<String, List<AutoConfigurationDecision>> autoconfigurationDecisions = new LinkedHashMap<String, List<AutoConfigurationDecision>>();\n+\n \tprivate Map<String, List<String>> positive = new LinkedHashMap<String, List<String>>();\n+\n \tprivate Map<String, List<String>> negative = new LinkedHashMap<String, List<String>>();\n+\n \tprivate ConfigurableApplicationContext context;\n+\n \tprivate boolean initialized = false;\n \n \tpublic static void registerDecision(ConditionContext context, String message,",
    "output": "Minor formatting polish"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/test/java/org/springframework/boot/cli/CliTester.java b/spring-boot-cli/src/test/java/org/springframework/boot/cli/CliTester.java\n--- a/spring-boot-cli/src/test/java/org/springframework/boot/cli/CliTester.java\n+++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/CliTester.java\n@@ -106,6 +106,8 @@ public String getOutput() {\n \n \t@Override\n \tpublic Statement apply(final Statement base, final Description description) {\n+\t\tfinal Statement statement = CliTester.this.outputCapture.apply(\n+\t\t\t\tnew RunLauncherStatement(base), description);\n \t\treturn new Statement() {\n \n \t\t\t@Override\n@@ -114,8 +116,7 @@ public void evaluate() throws Throwable {\n \t\t\t\t\t\t\"Not running sample integration tests because integration profile not active\",\n \t\t\t\t\t\tSystem.getProperty(\"spring.profiles.active\", \"integration\")\n \t\t\t\t\t\t\t\t.contains(\"integration\"));\n-\t\t\t\tCliTester.this.outputCapture.apply(new RunLauncherStatement(base),\n-\t\t\t\t\t\tdescription);\n+\t\t\t\tstatement.evaluate();\n \t\t\t}\n \t\t};\n \t}",
    "output": "Fix CliTester so that sample integration tests can be run"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/OutputCapture.java b/spring-boot/src/test/java/org/springframework/boot/OutputCapture.java\n--- a/spring-boot/src/test/java/org/springframework/boot/OutputCapture.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/OutputCapture.java\n@@ -72,8 +72,19 @@ protected void releaseOutput() {\n \t\tthis.copy = null;\n \t}\n \n+\tpublic void flush() {\n+\t\ttry {\n+\t\t\tthis.captureOut.flush();\n+\t\t\tthis.captureErr.flush();\n+\t\t}\n+\t\tcatch (IOException e) {\n+\t\t\t// ignore\n+\t\t}\n+\t}\n+\n \t@Override\n \tpublic String toString() {\n+\t\tflush();\n \t\treturn this.copy.toString();\n \t}\n \n@@ -104,12 +115,17 @@ public void write(byte[] b) throws IOException {\n \t\tpublic void write(byte[] b, int off, int len) throws IOException {\n \t\t\tthis.copy.write(b, off, len);\n \t\t\tthis.original.write(b, off, len);\n-\t\t\tthis.original.flush();\n \t\t}\n \n \t\tpublic PrintStream getOriginal() {\n \t\t\treturn this.original;\n \t\t}\n+\n+\t\t@Override\n+\t\tpublic void flush() throws IOException {\n+\t\t\tthis.copy.flush();\n+\t\t\tthis.original.flush();\n+\t\t}\n \t}\n \n \t/**",
    "output": "Flush output streams in capture\nAvoids possible test failures owing to unflushed buffers"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/CrshAutoConfiguration.java\n@@ -324,18 +324,19 @@ public Iterable<CRaSHPlugin<?>> getPlugins() {\n \t\tprotected boolean shouldFilter(CRaSHPlugin<?> plugin) {\n \t\t\tAssert.notNull(plugin);\n \n+\t\t\tif (this.disabledPlugins == null || this.disabledPlugins.length == 0) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\n \t\t\tSet<Class> classes = ClassUtils.getAllInterfacesAsSet(plugin);\n \t\t\tclasses.add(plugin.getClass());\n \n \t\t\tfor (Class<?> clazz : classes) {\n-\t\t\t\tif (this.disabledPlugins != null && this.disabledPlugins.length > 0) {\n-\t\t\t\t\tfor (String disabledPlugin : this.disabledPlugins) {\n-\t\t\t\t\t\tif (ClassUtils.getShortName(clazz).equalsIgnoreCase(\n-\t\t\t\t\t\t\t\tdisabledPlugin)\n-\t\t\t\t\t\t\t\t|| ClassUtils.getQualifiedName(clazz).equalsIgnoreCase(\n-\t\t\t\t\t\t\t\t\t\tdisabledPlugin)) {\n-\t\t\t\t\t\t\treturn true;\n-\t\t\t\t\t\t}\n+\t\t\t\tfor (String disabledPlugin : this.disabledPlugins) {\n+\t\t\t\t\tif (ClassUtils.getShortName(clazz).equalsIgnoreCase(disabledPlugin)\n+\t\t\t\t\t\t\t|| ClassUtils.getQualifiedName(clazz).equalsIgnoreCase(\n+\t\t\t\t\t\t\t\t\tdisabledPlugin)) {\n+\t\t\t\t\t\treturn true;\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}",
    "output": "Return early if no plugins should be disabled"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfiguration.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfiguration.java\n@@ -321,8 +321,8 @@ public AuthenticationManager authenticationManager(\n \t\t\tUser user = this.security.getUser();\n \n \t\t\tif (user.isDefaultPassword()) {\n-\t\t\t\tlogger.info(\"Using default password for application endpoints: \"\n-\t\t\t\t\t\t+ user.getPassword());\n+\t\t\t\tlogger.info(\"\\n\\n\" + \"Using default password for application endpoints: \"\n+\t\t\t\t\t\t+ user.getPassword() + \"\\n\\n\");\n \t\t\t}\n \n \t\t\tSet<String> roles = new LinkedHashSet<String>(Arrays.asList(this.security",
    "output": "Increase whitespace around password logging\nIncrease the whitespace to make the password easier to find in the log."
  },
  {
    "input": "diff --git a/spring-boot-cli/src/test/java/org/springframework/boot/cli/TestTest.java b/spring-boot-cli/src/test/java/org/springframework/boot/cli/TestTest.java\n--- a/spring-boot-cli/src/test/java/org/springframework/boot/cli/TestTest.java\n+++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/TestTest.java\n@@ -1,41 +0,0 @@\n-/*\n- * Copyright 2012-2013 the original author or authors.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.springframework.boot.cli;\n-\n-import org.junit.Test;\n-import org.junit.internal.TextListener;\n-import org.junit.runner.JUnitCore;\n-\n-import static org.junit.Assert.fail;\n-\n-/**\n- * @author pwebb\n- */\n-public class TestTest {\n-\n-\t@Test\n-\tpublic void testName() throws Exception {\n-\t\tfail(\"Arse\");\n-\t}\n-\n-\tpublic static void main(String[] args) {\n-\t\tJUnitCore core = new JUnitCore();\n-\t\tcore.addListener(new TextListener(System.out));\n-\t\tcore.run(TestTest.class);\n-\n-\t}\n-}",
    "output": "Remove accidental commit"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-data-jpa/src/main/java/org/springframework/boot/sample/data/jpa/web/SampleController.java b/spring-boot-samples/spring-boot-sample-data-jpa/src/main/java/org/springframework/boot/sample/data/jpa/web/SampleController.java\n--- a/spring-boot-samples/spring-boot-sample-data-jpa/src/main/java/org/springframework/boot/sample/data/jpa/web/SampleController.java\n+++ b/spring-boot-samples/spring-boot-sample-data-jpa/src/main/java/org/springframework/boot/sample/data/jpa/web/SampleController.java\n@@ -19,6 +19,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.sample.data.jpa.service.CityService;\n import org.springframework.stereotype.Controller;\n+import org.springframework.transaction.annotation.Transactional;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.ResponseBody;\n \n@@ -30,6 +31,7 @@ public class SampleController {\n \n \t@RequestMapping(\"/\")\n \t@ResponseBody\n+    @Transactional(readOnly = true)\n \tpublic String helloWorld() {\n \t\treturn this.cityService.getCity(\"Bath\", \"UK\").getName();\n \t}",
    "output": "Use @Transactional where appropriate"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/report/AutoConfigurationReport.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/report/AutoConfigurationReport.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/report/AutoConfigurationReport.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/report/AutoConfigurationReport.java\n@@ -139,7 +139,7 @@ public void initialize() {\n \t\t\t\t\t\tscanPositiveDecisionsForBeansBootCreated();\n \t\t\t\t\t}\n \t\t\t\t\tfinally {\n-\t\t\t\t\t\tif (shouldLogReport()) {\n+\t\t\t\t\t\tif (shouldLogReport() && logger.isInfoEnabled()) {\n \t\t\t\t\t\t\tlogger.info(\"Created beans:\");\n \t\t\t\t\t\t\tfor (CreatedBeanInfo info : this.beansCreated) {\n \t\t\t\t\t\t\t\tlogger.info(info);",
    "output": "Only log report if INFO enabled"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/report/AutoConfigurationReport.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/report/AutoConfigurationReport.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/report/AutoConfigurationReport.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/report/AutoConfigurationReport.java\n@@ -156,7 +156,10 @@ public void initialize() {\n \t}\n \n \tprivate boolean shouldLogReport() {\n-\t\treturn this.context.getEnvironment().getProperty(\"debug\", Boolean.class, false)\n+\t\tString debug = this.context.getEnvironment().getProperty(\"debug\", \"false\")\n+\t\t\t\t.toLowerCase().trim();\n+\t\treturn debug.equals(\"true\") || debug.equals(\"\") //\n+\t\t\t\t// inactive context is a sign that it crashed\n \t\t\t\t|| !this.context.isActive();\n \t}\n ",
    "output": "Be more lax with --debug parsing"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/report/AutoConfigurationReport.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/report/AutoConfigurationReport.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/report/AutoConfigurationReport.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/report/AutoConfigurationReport.java\n@@ -105,7 +105,7 @@ public Map<String, List<String>> getNegativeDecisions() {\n \tpublic Set<Class<?>> getBeanTypesCreated() {\n \t\tSet<Class<?>> beanTypesCreated = new HashSet<Class<?>>();\n \t\tfor (CreatedBeanInfo bootCreatedBeanInfo : this.getBeansCreated()) {\n-\t\t\tbeanTypesCreated.add(bootCreatedBeanInfo.getBeanType());\n+\t\t\tbeanTypesCreated.add(bootCreatedBeanInfo.getType());\n \t\t}\n \t\treturn beanTypesCreated;\n \t}\n\ndiff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/report/CreatedBeanInfo.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/report/CreatedBeanInfo.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/report/CreatedBeanInfo.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/report/CreatedBeanInfo.java\n@@ -46,7 +46,7 @@ public String getName() {\n \t\treturn this.name;\n \t}\n \n-\tpublic Class<?> getBeanType() {\n+\tpublic Class<?> getType() {\n \t\treturn this.type;\n \t}\n ",
    "output": "Shorten field names a bit"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/properties/CrshPropertiesTests.java b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/properties/CrshPropertiesTests.java\n--- a/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/properties/CrshPropertiesTests.java\n+++ b/spring-boot-actuator/src/test/java/org/springframework/boot/actuate/properties/CrshPropertiesTests.java\n@@ -92,7 +92,7 @@ public void testBindingConfigPathPatterns() {\n \t\tbinder.bind(new MutablePropertyValues(Collections.singletonMap(\"shell.config_path_patterns\",\n \t\t\t\t\"pattern1, pattern2\")));\n \t\tassertFalse(binder.getBindingResult().hasErrors());\n-\t\tassertEquals(2, props.getConfigPathPatterns().length, 2);\n+\t\tassertEquals(2, props.getConfigPathPatterns().length);\n \t\tAssert.assertArrayEquals(new String[] { \"pattern1\", \"pattern2\" }, props.getConfigPathPatterns());\n \t}\n \n@@ -104,7 +104,7 @@ public void testBindingDisabledPlugins() {\n \t\tbinder.bind(new MutablePropertyValues(Collections.singletonMap(\"shell.disabled_plugins\",\n \t\t\t\t\"pattern1, pattern2\")));\n \t\tassertFalse(binder.getBindingResult().hasErrors());\n-\t\tassertEquals(2, props.getDisabledPlugins().length, 2);\n+\t\tassertEquals(2, props.getDisabledPlugins().length);\n \t\tassertArrayEquals(new String[] { \"pattern1\", \"pattern2\" }, props.getDisabledPlugins());\n \t}\n ",
    "output": "Fix test assertion"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfigurationTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfigurationTests.java\n@@ -34,7 +34,6 @@\n import javax.sql.DataSource;\n \n import org.apache.commons.dbcp.BasicDataSource;\n-import org.junit.Ignore;\n import org.junit.Test;\n import org.mockito.Mockito;\n import org.springframework.boot.TestUtils;\n@@ -82,7 +81,6 @@ public void testEmbeddedTypeDefaultsUsername() throws Exception {\n \t}\n \n \t@Test\n-\t@Ignore\n \tpublic void testExplicitDriverClassClearsUserName() throws Exception {\n \t\tTestUtils\n \t\t\t\t.addEnviroment(",
    "output": "Fix failing database test on 1.7"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessorRegistrar.java b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessorRegistrar.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessorRegistrar.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/properties/ConfigurationPropertiesBindingPostProcessorRegistrar.java\n@@ -38,9 +38,11 @@ public class ConfigurationPropertiesBindingPostProcessorRegistrar implements\n \t@Override\n \tpublic void registerBeanDefinitions(AnnotationMetadata importingClassMetadata,\n \t\t\tBeanDefinitionRegistry registry) {\n-\t\tBeanDefinition beanDefinition = new RootBeanDefinition(\n-\t\t\t\tConfigurationPropertiesBindingPostProcessor.class);\n-\t\tregistry.registerBeanDefinition(BINDER_BEAN_NAME, beanDefinition);\n+\t\tif (!registry.containsBeanDefinition(BINDER_BEAN_NAME)) {\n+\t\t\tBeanDefinition beanDefinition = new RootBeanDefinition(\n+\t\t\t\t\tConfigurationPropertiesBindingPostProcessor.class);\n+\t\t\tregistry.registerBeanDefinition(BINDER_BEAN_NAME, beanDefinition);\n+\t\t}\n \t}\n \n }",
    "output": "Avoid registering ConfigurationPropertiesBindingPostProcessor twice"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointAutoConfiguration.java\n@@ -40,6 +40,7 @@\n import org.springframework.boot.actuate.trace.InMemoryTraceRepository;\n import org.springframework.boot.actuate.trace.TraceRepository;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.bind.PropertiesConfigurationFactory;\n import org.springframework.context.annotation.Bean;\n@@ -48,6 +49,7 @@\n import org.springframework.core.env.StandardEnvironment;\n import org.springframework.core.io.Resource;\n import org.springframework.core.io.support.PropertiesLoaderUtils;\n+import org.springframework.http.MediaType;\n \n /**\n  * {@link EnableAutoConfiguration Auto-configuration} for common management\n@@ -57,6 +59,7 @@\n  * @author Phillip Webb\n  */\n @Configuration\n+@ConditionalOnClass(MediaType.class)\n public class EndpointAutoConfiguration {\n \n \t@Autowired(required = false)",
    "output": "Avoid registering endpoints if Spring MVC not available"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/PropertyPlaceholderAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/PropertyPlaceholderAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/PropertyPlaceholderAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/PropertyPlaceholderAutoConfiguration.java\n@@ -18,7 +18,6 @@\n \n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.autoconfigure.condition.SearchStrategy;\n-import org.springframework.context.ApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;\n@@ -38,8 +37,7 @@ public class PropertyPlaceholderAutoConfiguration {\n \n \t@Bean\n \t@ConditionalOnMissingBean(search = SearchStrategy.CURRENT)\n-\tpublic static PropertySourcesPlaceholderConfigurer propertySourcesPlaceholderConfigurer(\n-\t\t\tApplicationContext context) {\n+\tpublic static PropertySourcesPlaceholderConfigurer propertySourcesPlaceholderConfigurer() {\n \t\treturn new PropertySourcesPlaceholderConfigurer();\n \t}\n ",
    "output": "Remove unused argument (causes autowiring issues)"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/test/java/org/springframework/boot/cli/SampleIntegrationTests.java b/spring-boot-cli/src/test/java/org/springframework/boot/cli/SampleIntegrationTests.java\n--- a/spring-boot-cli/src/test/java/org/springframework/boot/cli/SampleIntegrationTests.java\n+++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/SampleIntegrationTests.java\n@@ -118,9 +118,6 @@ public void httpSample() throws Exception {\n \n \t@Test\n \tpublic void integrationSample() throws Exception {\n-\t\t// Depends on 1.0.0.M1 of spring-integration-dsl-groovy-core\n-\t\tSystem.clearProperty(\"disableSpringSnapshotRepos\");\n-\n \t\tString output = this.cli.run(\"samples/integration.groovy\");\n \t\tassertTrue(\"Wrong output: \" + output, output.contains(\"Hello, World\"));\n \t}",
    "output": "Remove special case for integration sample's milestone dependency\n3d714d301 allowed all integration tests to download snapshots and\nmilestones. The test for the integration sample, which depends upon a\nmilestone, no longer needs to be a special case."
  },
  {
    "input": "diff --git a/spring-boot-cli/src/test/java/org/springframework/boot/cli/SampleIntegrationTests.java b/spring-boot-cli/src/test/java/org/springframework/boot/cli/SampleIntegrationTests.java\n--- a/spring-boot-cli/src/test/java/org/springframework/boot/cli/SampleIntegrationTests.java\n+++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/SampleIntegrationTests.java\n@@ -71,7 +71,7 @@ public RunCommand call() throws Exception {\n \n \t@Before\n \tpublic void setup() throws Exception {\n-\t\tSystem.setProperty(\"disableSpringSnapshotRepos\", \"true\");\n+\t\tSystem.setProperty(\"disableSpringSnapshotRepos\", \"false\");\n \t\tnew CleanCommand().run(\"org.springframework\");\n \t}\n ",
    "output": "Allow snapshot repositories in integration tests\nUpdate CLI SampleIntegrationTests to no longer disable snapshot repos."
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/task/ProjectLibraries.java b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/task/ProjectLibraries.java\n--- a/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/task/ProjectLibraries.java\n+++ b/spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/task/ProjectLibraries.java\n@@ -49,7 +49,7 @@ public void doWithLibraries(LibraryCallback callback) throws IOException {\n \t\t\t\tthis.providedConfigurationName);\n \t\tif (provided != null) {\n \t\t\tcompile = compile.minus(provided);\n-\t\t\truntime = compile.minus(provided);\n+\t\t\truntime = runtime.minus(provided);\n \t\t}\n \n \t\tlibraries(LibraryScope.COMPILE, compile, callback);",
    "output": "Fix typo in gradle plugin"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/test/java/org/springframework/boot/cli/SampleIntegrationTests.java b/spring-boot-cli/src/test/java/org/springframework/boot/cli/SampleIntegrationTests.java\n--- a/spring-boot-cli/src/test/java/org/springframework/boot/cli/SampleIntegrationTests.java\n+++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/SampleIntegrationTests.java\n@@ -164,6 +164,9 @@ public void httpSample() throws Exception {\n \n \t@Test\n \tpublic void integrationSample() throws Exception {\n+\t\t// Depends on 1.0.0.M1 of spring-integration-dsl-groovy-core\n+\t\tSystem.clearProperty(\"disableSpringSnapshotRepos\");\n+\n \t\tstart(\"samples/integration.groovy\");\n \t\tString output = this.outputCapture.getOutputAndRelease();\n \t\tassertTrue(\"Wrong output: \" + output, output.contains(\"Hello, World\"));",
    "output": "Allow integration sample to download DSL milestone"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchDatabaseInitializer.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchDatabaseInitializer.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchDatabaseInitializer.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/batch/BatchDatabaseInitializer.java\n@@ -59,6 +59,9 @@ protected void initialize() throws Exception {\n \t\tif (\"hsql\".equals(platform)) {\n \t\t\tplatform = \"hsqldb\";\n \t\t}\n+\t\tif (\"postgres\".equals(platform)) {\n+\t\t\tplatform = \"postgresql\";\n+\t\t}\n \t\tResourceDatabasePopulator populator = new ResourceDatabasePopulator();\n \t\tString schemaLocation = this.environment.getProperty(\"schema\",\n \t\t\t\tDEFAULT_SCHEMA_LOCATION);",
    "output": "Adjust db type if postgres"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfigurationTests.java b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfigurationTests.java\n--- a/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfigurationTests.java\n+++ b/spring-boot-autoconfigure/src/test/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfigurationTests.java\n@@ -157,7 +157,7 @@ static class TestDataSourceConfiguration {\n \t\tpublic DataSource dataSource() {\n \t\t\tthis.pool = new BasicDataSource();\n \t\t\tthis.pool.setDriverClassName(\"org.hsqldb.jdbcDriver\");\n-\t\t\tthis.pool.setUrl(\"jdbc:hsqldb:overridedb\");\n+\t\t\tthis.pool.setUrl(\"jdbc:hsqldb:target/overridedb\");\n \t\t\tthis.pool.setUsername(\"sa\");\n \t\t\treturn this.pool;\n \t\t}",
    "output": "Move database files into target directory"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/EnvironmentEndpoint.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/EnvironmentEndpoint.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/EnvironmentEndpoint.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/endpoint/EnvironmentEndpoint.java\n@@ -49,6 +49,7 @@ public EnvironmentEndpoint() {\n \t@Override\n \tpublic Map<String, Object> invoke() {\n \t\tMap<String, Object> result = new LinkedHashMap<String, Object>();\n+\t\tresult.put(\"profiles\", this.environment.getActiveProfiles());\n \t\tfor (PropertySource<?> source : getPropertySources()) {\n \t\t\tif (source instanceof EnumerablePropertySource) {\n \t\t\t\tEnumerablePropertySource<?> enumerable = (EnumerablePropertySource<?>) source;",
    "output": "Add profiles to /env"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/SpringBootCondition.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/SpringBootCondition.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/SpringBootCondition.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/condition/SpringBootCondition.java\n@@ -69,7 +69,7 @@ else if (metadata instanceof MethodMetadata) {\n \t\t\tmessage.append(\"#\");\n \t\t\tmessage.append(methodMetadata.getMethodName());\n \t\t}\n-\t\tmessage.append(result.isMatch() ? \" matched\" : \"did not match\");\n+\t\tmessage.append(result.isMatch() ? \" matched\" : \" did not match\");\n \t\tif (StringUtils.hasLength(result.getMessage())) {\n \t\t\tmessage.append(\" due to \");\n \t\t\tmessage.append(result.getMessage());",
    "output": "Tidy up log message (add space)"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java\n--- a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java\n+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/PropertiesLauncher.java\n@@ -261,7 +261,7 @@ else if (responseCode == HttpURLConnection.HTTP_NOT_FOUND) {\n \t}\n \n \tprivate void initializePaths() throws IOException {\n-\t\tString path = System.getProperty(PATH);\n+\t\tString path = SystemPropertyUtils.getProperty(PATH);\n \t\tif (path == null) {\n \t\t\tpath = this.properties.getProperty(PATH);\n \t\t}",
    "output": "Ensure env vars are consulted for PATH"
  },
  {
    "input": "diff --git a/spring-boot/src/test/java/org/springframework/boot/context/initializer/ConfigFileApplicationContextInitializerTests.java b/spring-boot/src/test/java/org/springframework/boot/context/initializer/ConfigFileApplicationContextInitializerTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/context/initializer/ConfigFileApplicationContextInitializerTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/context/initializer/ConfigFileApplicationContextInitializerTests.java\n@@ -104,6 +104,14 @@ public void loadPropertiesThenProfileProperties() throws Exception {\n \t\tassertThat(property, equalTo(\"fromprofilepropertiesfile\"));\n \t}\n \n+\t@Test\n+\tpublic void profilePropertiesUsedInPlaceholders() throws Exception {\n+\t\tthis.initializer.setNames(\"enableprofile\");\n+\t\tthis.initializer.initialize(this.context);\n+\t\tString property = this.context.getEnvironment().getProperty(\"one.more\");\n+\t\tassertThat(property, equalTo(\"fromprofilepropertiesfile\"));\n+\t}\n+\n \t@Test\n \tpublic void yamlProfiles() throws Exception {\n \t\tthis.initializer.setNames(\"testprofiles\");",
    "output": "Add extra test for placeholder behaviour"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java\n@@ -184,8 +184,9 @@ public static ManagementServerPort get(ApplicationContext beanFactory) {\n \t\t\t}\n \t\t\treturn managementServerProperties.getPort() == null\n \t\t\t\t\t|| serverProperties.getPort() == null\n-\t\t\t\t\t|| serverProperties.getPort().equals(\n-\t\t\t\t\t\t\tmanagementServerProperties.getPort()) ? SAME : DIFFERENT;\n+\t\t\t\t\t&& managementServerProperties.getPort().equals(8080)\n+\t\t\t\t\t|| managementServerProperties.getPort().equals(\n+\t\t\t\t\t\t\tserverProperties.getPort()) ? SAME : DIFFERENT;\n \t\t}\n \t};\n }",
    "output": "Fix build some more after changes for"
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/EndpointWebMvcAutoConfiguration.java\n@@ -183,8 +183,9 @@ public static ManagementServerPort get(ApplicationContext beanFactory) {\n \t\t\t\treturn DIFFERENT;\n \t\t\t}\n \t\t\treturn managementServerProperties.getPort() == null\n-\t\t\t\t\t|| serverProperties.getPort() == managementServerProperties.getPort() ? SAME\n-\t\t\t\t\t: DIFFERENT;\n+\t\t\t\t\t|| serverProperties.getPort() == null\n+\t\t\t\t\t|| serverProperties.getPort().equals(\n+\t\t\t\t\t\t\tmanagementServerProperties.getPort()) ? SAME : DIFFERENT;\n \t\t}\n \t};\n }",
    "output": "Fix build after changes for"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/test/java/org/springframework/boot/cli/SampleIntegrationTests.java b/spring-boot-cli/src/test/java/org/springframework/boot/cli/SampleIntegrationTests.java\n--- a/spring-boot-cli/src/test/java/org/springframework/boot/cli/SampleIntegrationTests.java\n+++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/SampleIntegrationTests.java\n@@ -16,9 +16,6 @@\n \n package org.springframework.boot.cli;\n \n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n-\n import java.io.File;\n import java.net.URL;\n import java.util.concurrent.Callable;\n@@ -37,6 +34,9 @@\n import org.springframework.boot.cli.command.CleanCommand;\n import org.springframework.boot.cli.command.RunCommand;\n \n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n /**\n  * Integration tests to exercise the samples.\n  * \n@@ -95,13 +95,6 @@ public void appSample() throws Exception {\n \t\tassertTrue(\"Wrong output: \" + output, output.contains(\"Hello World\"));\n \t}\n \n-\t@Test\n-\tpublic void simpleGrabSample() throws Exception {\n-\t\tstart(\"samples/simpleGrab.groovy\");\n-\t\tString output = this.outputCapture.getOutputAndRelease();\n-\t\tassertTrue(\"Wrong output: \" + output, output.contains(\"Hello World\"));\n-\t}\n-\n \t@Test\n \tpublic void templateSample() throws Exception {\n \t\tstart(\"samples/template.groovy\");",
    "output": "Use simplified @Grab where possible"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringMobileCompilerAutoConfiguration.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringMobileCompilerAutoConfiguration.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringMobileCompilerAutoConfiguration.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringMobileCompilerAutoConfiguration.java\n@@ -31,8 +31,9 @@\n \n /**\n  * {@link CompilerAutoConfiguration} for Spring Mobile.\n- *\n+ * \n  * @author Roy Clarkson\n+ * @author Dave Syer\n  */\n public class SpringMobileCompilerAutoConfiguration extends CompilerAutoConfiguration {\n \n@@ -44,8 +45,7 @@ public boolean matches(ClassNode classNode) {\n \t@Override\n \tpublic void applyDependencies(DependencyCustomizer dependencies)\n \t\t\tthrows CompilationFailedException {\n-\t\tdependencies.add(\"org.springframework.mobile\", \"spring-mobile-device\",\n-\t\t\t\tdependencies.getProperty(\"spring-mobile.version\"));\n+\t\tdependencies.add(\"spring-mobile-device\");\n \t}\n \n \t@Override",
    "output": "Adapt device change to new springcli.properties"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-websocket/src/main/java/org/springframework/boot/samples/websocket/snake/SnakeTimer.java b/spring-boot-samples/spring-boot-sample-websocket/src/main/java/org/springframework/boot/samples/websocket/snake/SnakeTimer.java\n--- a/spring-boot-samples/spring-boot-sample-websocket/src/main/java/org/springframework/boot/samples/websocket/snake/SnakeTimer.java\n+++ b/spring-boot-samples/spring-boot-sample-websocket/src/main/java/org/springframework/boot/samples/websocket/snake/SnakeTimer.java\n@@ -79,8 +79,13 @@ public static void tick() throws Exception {\n \n     public static void broadcast(String message) throws Exception {\n         for (Snake snake : SnakeTimer.getSnakes()) {\n-            snake.sendMessage(message);\n-        }\n+\t\t\ttry {\n+\t\t\t\tsnake.sendMessage(message);\n+\t\t\t}\n+\t\t\tcatch (Throwable ex) {\n+\t\t\t\t// if Snake#sendMessage fails the client should be removed\n+\t\t\t}\n+\t\t}\n     }\n \n ",
    "output": "Add simple error hangling to 'SnakeTimer#broadcast' In some cases the websocket communication fails and Snake#sendMessage throws an exception. In that case the send loop is interrupted and later clients are not update."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/PropertyPlaceholderAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/PropertyPlaceholderAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/PropertyPlaceholderAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/PropertyPlaceholderAutoConfiguration.java\n@@ -17,6 +17,7 @@\n package org.springframework.boot.autoconfigure;\n \n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.condition.SearchStrategy;\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n@@ -36,7 +37,7 @@\n public class PropertyPlaceholderAutoConfiguration {\n \n \t@Bean\n-\t@ConditionalOnMissingBean\n+\t@ConditionalOnMissingBean(search = SearchStrategy.CURRENT)\n \tpublic static PropertySourcesPlaceholderConfigurer propertySourcesPlaceholderConfigurer(\n \t\t\tApplicationContext context) {\n \t\treturn new PropertySourcesPlaceholderConfigurer();",
    "output": "Important: restrict PPC scanning to current context"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java\n@@ -130,8 +130,8 @@ public EmbeddedServletContainer getEmbeddedServletContainer(\n \t\t\t\t: createTempDir(\"tomcat\"));\n \t\ttomcat.setBaseDir(baseDir.getAbsolutePath());\n \t\tconnector = new Connector(this.protocol);\n-\t\tcustomizeConnector(connector);\n \t\ttomcat.getService().addConnector(connector);\n+\t\tcustomizeConnector(connector);\n \t\ttomcat.setConnector(connector);\n \t\ttomcat.getHost().setAutoDeploy(false);\n \t\ttomcat.getEngine().setBackgroundProcessorDelay(-1);",
    "output": "Add connector to service before calling customizers"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GrapeEngineCustomizer.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GrapeEngineCustomizer.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GrapeEngineCustomizer.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GrapeEngineCustomizer.java\n@@ -56,7 +56,7 @@\n  * Spring repos to the search path, provide simple log progress feedback if downloads are\n  * taking a long time, and also fixes a problem where ivy cannot use a local Maven cache\n  * repo.\n- *\n+ * \n  * @author Phillip Webb\n  * @author Dave Syer\n  */\n@@ -111,9 +111,9 @@ private void setupResolver(IvySettings settings) {\n \t\t// Add support for spring snapshots and milestones if required\n \t\tif (!Boolean.getBoolean(\"disableSpringSnapshotRepos\")) {\n \t\t\tspringBootResolver.addSpringSnapshotResolver(newResolver(\"spring-snapshot\",\n-\t\t\t\t\t\"http://repo.springsource.org/snapshot\"));\n+\t\t\t\t\t\"http://repo.spring.io/snapshot\"));\n \t\t\tspringBootResolver.addSpringSnapshotResolver(newResolver(\"spring-milestone\",\n-\t\t\t\t\t\"http://repo.springsource.org/milestone\"));\n+\t\t\t\t\t\"http://repo.spring.io/milestone\"));\n \t\t}\n \n \t\t// Replace the original resolvers",
    "output": "Replace 'springsource.org' with 'spring.io'\nReplace all references to 'springsource.org' with the new 'spring.io'\ndomain."
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsTemplateAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsTemplateAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsTemplateAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jms/JmsTemplateAutoConfiguration.java\n@@ -33,7 +33,7 @@\n  * @author Greg Turnquist\n  */\n @Configuration\n-@ConditionalOnClass(JmsTemplate.class)\n+@ConditionalOnClass({ JmsTemplate.class, ConnectionFactory.class })\n public class JmsTemplateAutoConfiguration {\n \n \t@Configuration",
    "output": "Make sure JMS is on classpath as well"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/reactor/ReactorAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/reactor/ReactorAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/reactor/ReactorAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/reactor/ReactorAutoConfiguration.java\n@@ -37,12 +37,18 @@\n @ConditionalOnClass(EnableReactor.class)\n @ConditionalOnMissingBean(Reactor.class)\n @AutoConfigureAfter(WebMvcAutoConfiguration.class)\n-@EnableReactor\n public class ReactorAutoConfiguration {\n \n \t@Bean\n \tpublic Reactor rootReactor(Environment environment) {\n \t\treturn environment.getRootReactor();\n \t}\n \n+\t@Configuration\n+\t@ConditionalOnMissingBean(Environment.class)\n+\t@EnableReactor\n+\tprotected static class ReactorConfiguration {\n+\n+\t}\n+\n }",
    "output": "Upgrade to reactor M3"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java b/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java\n--- a/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/BeanDefinitionLoader.java\n@@ -161,6 +161,9 @@ private int load(CharSequence source) {\n \t\ttry {\n \t\t\treturn load(ClassUtils.forName(resolvedSource, null));\n \t\t}\n+\t\tcatch (IllegalArgumentException ex) {\n+\t\t\t// swallow exception and continue\n+\t\t}\n \t\tcatch (ClassNotFoundException ex) {\n \t\t\t// swallow exception and continue\n \t\t}",
    "output": ": extra catch block in BeanDefinitionLoader"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/TransactionManagementCompilerAutoConfiguration.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/TransactionManagementCompilerAutoConfiguration.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/TransactionManagementCompilerAutoConfiguration.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/TransactionManagementCompilerAutoConfiguration.java\n@@ -33,10 +33,13 @@ public class TransactionManagementCompilerAutoConfiguration extends\n \n \t@Override\n \tpublic void applyDependencies(DependencyCustomizer dependencies) {\n-\t\tdependencies.ifAnyMissingClasses(\n-\t\t\t\t\"org.springframework.transaction.annotation.Transactional\").add(\n-\t\t\t\t\"org.springframework\", \"spring-tx\",\n-\t\t\t\tdependencies.getProperty(\"spring.version\"));\n+\t\tdependencies\n+\t\t\t\t.ifAnyMissingClasses(\n+\t\t\t\t\t\t\"org.springframework.transaction.annotation.Transactional\")\n+\t\t\t\t.add(\"org.springframework\", \"spring-tx\",\n+\t\t\t\t\t\tdependencies.getProperty(\"spring.version\"))\n+\t\t\t\t.add(\"org.springframework.boot\", \"spring-boot-starter-aop\",\n+\t\t\t\t\t\tdependencies.getProperty(\"spring-boot.version\"));\n \t}\n \n \t@Override",
    "output": "Add spring-jdbc as well if necessary"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceAutoConfiguration.java\n@@ -197,7 +197,7 @@ public Outcome getMatchOutcome(ConditionContext context,\n \t\t\t\treturn Outcome.match(\"found database driver \" + driverClassName);\n \t\t\t}\n \n-\t\t\treturn Outcome.match(\"missing database driver \" + driverClassName);\n+\t\t\treturn Outcome.noMatch(\"missing database driver \" + driverClassName);\n \t\t}\n \n \t\tprivate String getDriverClassName(Environment environment, ClassLoader classLoader) {",
    "output": "Fix off -by-one logic error"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/StartupInfoLogger.java b/spring-boot/src/main/java/org/springframework/boot/StartupInfoLogger.java\n--- a/spring-boot/src/main/java/org/springframework/boot/StartupInfoLogger.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/StartupInfoLogger.java\n@@ -74,7 +74,7 @@ private String getStartupMessage() {\n \n \tprivate StringBuilder getRunningMessage() {\n \t\tStringBuilder message = new StringBuilder();\n-\t\tmessage.append(\"Running with Spring Bootstrap\");\n+\t\tmessage.append(\"Running with Spring Boot\");\n \t\tmessage.append(getVersion(SpringApplication.class));\n \t\tmessage.append(\", Spring\");\n \t\tmessage.append(getVersion(ApplicationContext.class));",
    "output": "Bootstrap->boot in startup log Spring bootstrap in log message"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/test/java/org/springframework/boot/cli/SampleIntegrationTests.java b/spring-boot-cli/src/test/java/org/springframework/boot/cli/SampleIntegrationTests.java\n--- a/spring-boot-cli/src/test/java/org/springframework/boot/cli/SampleIntegrationTests.java\n+++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/SampleIntegrationTests.java\n@@ -37,7 +37,7 @@\n \n /**\n  * Integration tests to exercise the samples.\n- * \n+ *\n  * @author Dave Syer\n  */\n public class SampleIntegrationTests {\n@@ -63,7 +63,7 @@ public RunCommand call() throws Exception {\n \t\t\t\t\t\treturn command;\n \t\t\t\t\t}\n \t\t\t\t});\n-\t\tthis.command = future.get(4, TimeUnit.MINUTES);\n+\t\tthis.command = future.get(6, TimeUnit.MINUTES);\n \t}\n \n \t@Before",
    "output": "Increase SampleIntegrationTests run timeouts\nIncrease the timeouts to give CI builds more time should dependencies\nbe missing."
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/ExplodedArchiveTests.java b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/ExplodedArchiveTests.java\n--- a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/ExplodedArchiveTests.java\n+++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/ExplodedArchiveTests.java\n@@ -109,7 +109,8 @@ public void getNestedArchive() throws Exception {\n \t\tEntry entry = getEntriesMap(this.archive).get(\"nested.jar\");\n \t\tArchive nested = this.archive.getNestedArchive(entry);\n \t\tassertThat(nested.getUrl().toString(),\n-\t\t\t\tequalTo(\"jar:file:\" + this.rootFolder.getPath() + File.separator + \"nested.jar!/\"));\n+\t\t\t\tequalTo(\"jar:file:\" + this.rootFolder.getPath() + File.separator\n+\t\t\t\t\t\t+ \"nested.jar!/\"));\n \t}\n \n \t@Test\n@@ -123,7 +124,6 @@ public void nestedDirArchive() throws Exception {\n \t}\n \n \t@Test\n-\t@SuppressWarnings(\"resource\")\n \tpublic void getFilteredArchive() throws Exception {\n \t\tArchive filteredArchive = this.archive\n \t\t\t\t.getFilteredArchive(new Archive.EntryFilter() {",
    "output": "Remove unused annotation"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/initializer/VcapApplicationContextInitializer.java b/spring-boot/src/main/java/org/springframework/boot/context/initializer/VcapApplicationContextInitializer.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/initializer/VcapApplicationContextInitializer.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/initializer/VcapApplicationContextInitializer.java\n@@ -160,7 +160,7 @@ private Properties getPropertiesFromApplication(Environment environment) {\n \t\t\t\tproperties.putAll(map);\n \t\t\t}\n \t\t}\n-\t\tcatch (IllegalArgumentException e) {\n+\t\tcatch (Exception e) {\n \t\t\tlogger.error(\"Could not parse VCAP_APPLICATION\", e);\n \t\t}\n \t\treturn properties;\n@@ -187,7 +187,7 @@ private Properties getPropertiesFromServices(Environment environment) {\n \t\t\t\t}\n \t\t\t}\n \t\t}\n-\t\tcatch (IllegalArgumentException e) {\n+\t\tcatch (Exception e) {\n \t\t\tlogger.error(\"Could not parse VCAP_APPLICATION\", e);\n \t\t}\n \t\treturn properties;",
    "output": "Widen net for errors in vcap initializer"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/LaunchedURLClassLoader.java b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/LaunchedURLClassLoader.java\n--- a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/LaunchedURLClassLoader.java\n+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/LaunchedURLClassLoader.java\n@@ -46,7 +46,7 @@ public LaunchedURLClassLoader(URL[] urls, ClassLoader parent) {\n \t@Override\n \tprotected Class<?> loadClass(String name, boolean resolve)\n \t\t\tthrows ClassNotFoundException {\n-\t\tsynchronized (getClassLoadingLock(name)) {\n+\t\tsynchronized (this) {\n \t\t\tClass<?> loadedClass = findLoadedClass(name);\n \t\t\tif (loadedClass == null) {\n \t\t\t\tloadedClass = doLoadClass(name);",
    "output": "Fix LaunchedURLClassLoader Java 1.6 compatibility"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-websocket/src/main/java/org/springframework/boot/samples/websocket/config/SampleWebSocketsApplication.java b/spring-boot-samples/spring-boot-sample-websocket/src/main/java/org/springframework/boot/samples/websocket/config/SampleWebSocketsApplication.java\n--- a/spring-boot-samples/spring-boot-sample-websocket/src/main/java/org/springframework/boot/samples/websocket/config/SampleWebSocketsApplication.java\n+++ b/spring-boot-samples/spring-boot-sample-websocket/src/main/java/org/springframework/boot/samples/websocket/config/SampleWebSocketsApplication.java\n@@ -55,12 +55,12 @@ public GreetingService greetingService() {\n \n \t@Bean(name = \"/echo\")\n \tpublic WebSocketHandler echoWebSocketHandler() {\n-\t\treturn new PerConnectionWebSocketHandler(EchoWebSocketHandler.class);\n+\t\treturn new EchoWebSocketHandler(echoService());\n \t}\n \n \t@Bean(name = \"/snake\")\n \tpublic WebSocketHandler snakeWebSocketHandler() {\n-\t\treturn new SnakeWebSocketHandler();\n+\t\treturn new PerConnectionWebSocketHandler(SnakeWebSocketHandler.class);\n \t}\n \n }",
    "output": "Switch roles of snake and echo\nSnake is stateful so it should be one per connection. Echo is the\nopposite."
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringMvcCompilerAutoConfiguration.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringMvcCompilerAutoConfiguration.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringMvcCompilerAutoConfiguration.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringMvcCompilerAutoConfiguration.java\n@@ -49,8 +49,8 @@ public void applyDependencies(DependencyCustomizer dependencies) {\n \n \t@Override\n \tpublic boolean matches(ClassNode classNode) {\n-\t\treturn AstUtils.hasAtLeastOneAnnotation(classNode, \"Controller\", \"EnableWebMvc\",\n-\t\t\t\t\"WebConfiguration\");\n+\t\treturn AstUtils.hasAtLeastOneAnnotation(classNode, \"Controller\",\n+\t\t\t\t\"RestController\", \"EnableWebMvc\", \"WebConfiguration\");\n \t}\n \n \t@Override",
    "output": "Recognize @RestController as MVC Application\nUpdate CLI SpringMvcCompilerAutoConfiguration to recognize Spring's new\n@RestController annotation."
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringMvcCompilerAutoConfiguration.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringMvcCompilerAutoConfiguration.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringMvcCompilerAutoConfiguration.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringMvcCompilerAutoConfiguration.java\n@@ -40,15 +40,8 @@ public class SpringMvcCompilerAutoConfiguration extends CompilerAutoConfiguratio\n \tpublic void applyDependencies(DependencyCustomizer dependencies) {\n \t\tdependencies\n \t\t\t\t.ifAnyMissingClasses(\"org.springframework.web.servlet.mvc.Controller\")\n-\t\t\t\t.add(\"org.springframework\", \"spring-webmvc\",\n-\t\t\t\t\t\tdependencies.getProperty(\"spring.version\"));\n-\n-\t\tdependencies\n-\t\t\t\t.ifAnyMissingClasses(\"org.apache.catalina.startup.Tomcat\")\n-\t\t\t\t.add(\"org.apache.tomcat.embed\", \"tomcat-embed-core\",\n-\t\t\t\t\t\tdependencies.getProperty(\"tomcat.version\"))\n-\t\t\t\t.add(\"org.apache.tomcat.embed\", \"tomcat-embed-logging-juli\",\n-\t\t\t\t\t\tdependencies.getProperty(\"tomcat.version\"));\n+\t\t\t\t.add(\"org.springframework.boot\", \"spring-boot-starter-web\",\n+\t\t\t\t\t\tdependencies.getProperty(\"spring.boot.version\"));\n \n \t\tdependencies.add(\"org.codehaus.groovy\", \"groovy-templates\",\n \t\t\t\tdependencies.getProperty(\"groovy.version\"));",
    "output": "Use web-starter for CLI MVC compiler auto-config"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/JpaRepositoriesAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/JpaRepositoriesAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/JpaRepositoriesAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/JpaRepositoriesAutoConfiguration.java\n@@ -16,9 +16,14 @@\n \n package org.springframework.boot.autoconfigure.data;\n \n+import javax.sql.DataSource;\n+\n+import org.springframework.boot.autoconfigure.AutoConfigureAfter;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBean;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n+import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Import;\n import org.springframework.data.jpa.repository.JpaRepository;\n@@ -32,9 +37,11 @@\n  * @see EnableJpaRepositories\n  */\n @Configuration\n+@ConditionalOnBean(DataSource.class)\n @ConditionalOnClass(JpaRepository.class)\n @ConditionalOnMissingBean(JpaRepositoryFactoryBean.class)\n @Import(JpaRepositoriesAutoConfigureRegistrar.class)\n+@AutoConfigureAfter(DataSourceAutoConfiguration.class)\n public class JpaRepositoriesAutoConfiguration {\n \n }",
    "output": "Make data-jpa conditional on DataSource bean"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GrapeEngineCustomizer.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GrapeEngineCustomizer.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GrapeEngineCustomizer.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/GrapeEngineCustomizer.java\n@@ -48,7 +48,6 @@\n import org.apache.ivy.plugins.resolver.DependencyResolver;\n import org.apache.ivy.plugins.resolver.IBiblioResolver;\n import org.apache.ivy.util.AbstractMessageLogger;\n-import org.apache.ivy.util.Message;\n import org.apache.ivy.util.MessageLogger;\n import org.springframework.boot.cli.Log;\n \n@@ -304,7 +303,6 @@ private static class DownloadingLog extends AbstractMessageLogger {\n \t\t@Override\n \t\tpublic void log(String msg, int level) {\n \t\t\tlogDownloadingMessage();\n-\t\t\tMessage.getDefaultLogger().log(msg, level);\n \t\t}\n \n \t\t@Override",
    "output": "Remove superfluous ivy log output"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringIntegrationCompilerAutoConfiguration.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringIntegrationCompilerAutoConfiguration.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringIntegrationCompilerAutoConfiguration.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringIntegrationCompilerAutoConfiguration.java\n@@ -51,8 +51,7 @@ public void applyDependencies(DependencyCustomizer dependencies) {\n \t\t\t\t\t\tdependencies.getProperty(\"spring.integration.version\"))\n \t\t\t\t.add(\"org.springframework.integration\",\n \t\t\t\t\t\t\"spring-integration-dsl-groovy-core\",\n-\t\t\t\t\t\tdependencies.getProperty(\"spring.integration.dsl.version\",\n-\t\t\t\t\t\t\t\t\"1.0.0.M1\"));\n+\t\t\t\t\t\tdependencies.getProperty(\"spring.integration.dsl.version\"));\n \t\tdependencies.ifAnyMissingClasses(\"groovy.util.XmlParser\").add(\n \t\t\t\t\"org.codehaus.groovy\", \"groovy-xml\",\n \t\t\t\tdependencies.getProperty(\"groovy.version\"));",
    "output": "Use managed spring-integration-groovy-dsl\nUpdate SpringIntegrationCompilerAutoConfiguration to use the managed\nversion of spring-integration-groovy-dsl."
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/ExplodedArchiveTests.java b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/ExplodedArchiveTests.java\n--- a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/ExplodedArchiveTests.java\n+++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/ExplodedArchiveTests.java\n@@ -109,7 +109,7 @@ public void getNestedArchive() throws Exception {\n \t\tEntry entry = getEntriesMap(this.archive).get(\"nested.jar\");\n \t\tArchive nested = this.archive.getNestedArchive(entry);\n \t\tassertThat(nested.getUrl().toString(),\n-\t\t\t\tequalTo(\"jar:file:\" + this.rootFolder.getPath() + \"/nested.jar!/\"));\n+\t\t\t\tequalTo(\"jar:file:\" + this.rootFolder.getPath() + File.separator + \"nested.jar!/\"));\n \t}\n \n \t@Test\n@@ -119,7 +119,7 @@ public void nestedDirArchive() throws Exception {\n \t\tMap<String, Entry> nestedEntries = getEntriesMap(nested);\n \t\tassertThat(nestedEntries.size(), equalTo(1));\n \t\tassertThat(nested.getUrl().toString(),\n-\t\t\t\tequalTo(\"file:\" + this.rootFolder.getPath() + \"/d/\"));\n+\t\t\t\tequalTo(\"file:\" + this.rootFolder.getPath() + File.separator + \"d/\"));\n \t}\n \n \t@Test",
    "output": "Prevent test failures under Windows\nCleaned up file separators to prevent tests failing on Windows."
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/Launcher.java b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/Launcher.java\n--- a/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/Launcher.java\n+++ b/spring-boot-tools/spring-boot-loader/src/main/java/org/springframework/boot/loader/Launcher.java\n@@ -18,6 +18,7 @@\n \n import java.io.File;\n import java.lang.reflect.Constructor;\n+import java.net.URI;\n import java.net.URL;\n import java.security.CodeSource;\n import java.security.ProtectionDomain;\n@@ -67,13 +68,12 @@ public void launch(String[] args) {\n \tprotected void launch(String[] args, ProtectionDomain protectionDomain)\n \t\t\tthrows Exception {\n \t\tCodeSource codeSource = protectionDomain.getCodeSource();\n-\t\tURL codeSourceLocation = (codeSource == null ? null : codeSource.getLocation());\n-\t\tString codeSourcePath = (codeSourceLocation == null ? null : codeSourceLocation\n-\t\t\t\t.getPath());\n-\t\tif (codeSourcePath == null) {\n+\t\tURI location = (codeSource == null ? null : codeSource.getLocation().toURI());\n+\t\tString path = (location == null ? null : location.getPath());\n+\t\tif (path == null) {\n \t\t\tthrow new IllegalStateException(\"Unable to determine code source archive\");\n \t\t}\n-\t\tFile root = new File(codeSourcePath);\n+\t\tFile root = new File(path);\n \t\tif (!root.exists()) {\n \t\t\tthrow new IllegalStateException(\n \t\t\t\t\t\"Unable to determine code source archive from \" + root);",
    "output": "Fix handling of spaces in file paths Update Launcher to correctly handle spaced in file paths."
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/tomcat/TomcatEmbeddedServletContainerFactory.java\n@@ -152,6 +152,7 @@ protected void prepareContext(Host host, ServletContextInitializer[] initializer\n \t\t\t\t.getClassLoader() : ClassUtils.getDefaultClassLoader());\n \t\tWebappLoader loader = new WebappLoader(context.getParentClassLoader());\n \t\tloader.setLoaderClass(TomcatEmbeddedWebappClassLoader.class.getName());\n+\t\tloader.setDelegate(true);\n \t\tcontext.setLoader(loader);\n \t\tif (isRegisterDefaultServlet()) {\n \t\t\taddDefaultServlet(context);",
    "output": "Delegate ClassLoader with Tomcat\nUse standard class loading delegation with Tomcat."
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfiguration.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfiguration.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfiguration.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/autoconfigure/SecurityAutoConfiguration.java\n@@ -225,7 +225,8 @@ public static class AuthenticationManagerConfiguration {\n \t\tpublic AuthenticationManager authenticationManager() throws Exception {\n \t\t\tUser user = this.management.getUser();\n \t\t\tif (user.isDefaultPassword()) {\n-\t\t\t\tlogger.info(\"Using default password for \");\n+\t\t\t\tlogger.info(\"Using default password for management endpoints: \"\n+\t\t\t\t\t\t+ user.getPassword());\n \t\t\t}\n \t\t\tList<String> roles = new ArrayList<String>();\n \t\t\troles.add(\"USER\");",
    "output": "Add logger for default password"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/test/java/org/springframework/boot/cli/SampleIntegrationTests.java b/spring-boot-cli/src/test/java/org/springframework/boot/cli/SampleIntegrationTests.java\n--- a/spring-boot-cli/src/test/java/org/springframework/boot/cli/SampleIntegrationTests.java\n+++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/SampleIntegrationTests.java\n@@ -29,6 +29,7 @@\n import org.junit.Rule;\n import org.junit.Test;\n import org.springframework.boot.OutputCapture;\n+import org.springframework.boot.cli.command.CleanCommand;\n import org.springframework.boot.cli.command.RunCommand;\n \n import static org.junit.Assert.assertEquals;\n@@ -66,8 +67,9 @@ public RunCommand call() throws Exception {\n \t}\n \n \t@Before\n-\tpublic void setup() {\n+\tpublic void setup() throws Exception {\n \t\tSystem.setProperty(\"disableSpringSnapshotRepos\", \"true\");\n+\t\tnew CleanCommand().run(\"org.springframework\");\n \t}\n \n \t@After",
    "output": "Clean out grapes"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/initializer/LoggingApplicationContextInitializer.java b/spring-boot/src/main/java/org/springframework/boot/context/initializer/LoggingApplicationContextInitializer.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/initializer/LoggingApplicationContextInitializer.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/initializer/LoggingApplicationContextInitializer.java\n@@ -157,11 +157,11 @@ public void initialize(ConfigurableApplicationContext applicationContext) {\n \n \t\tsystem.initialize();\n \t\tif (this.springBootLogging != null) {\n-\t\t\tinitializeLogLeve(system, this.springBootLogging);\n+\t\t\tinitializeLogLevel(system, this.springBootLogging);\n \t\t}\n \t}\n \n-\tprotected void initializeLogLeve(LoggingSystem system, LogLevel level) {\n+\tprotected void initializeLogLevel(LoggingSystem system, LogLevel level) {\n \t\tList<String> loggers = LOG_LEVEL_LOGGERS.get(level);\n \t\tif (loggers != null) {\n \t\t\tfor (String logger : loggers) {",
    "output": "Fix typo in LoggingApplicationContextInitalizer initializeLogLeve->initializeLogLevel"
  },
  {
    "input": "diff --git a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java\n--- a/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java\n+++ b/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaAutoConfiguration.java\n@@ -19,6 +19,7 @@\n import java.util.LinkedHashMap;\n import java.util.Map;\n \n+import org.hibernate.cfg.ImprovedNamingStrategy;\n import org.hibernate.ejb.HibernateEntityManager;\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n@@ -80,6 +81,8 @@ protected void configure(\n \t\tMap<String, Object> properties = entityManagerFactoryBean.getJpaPropertyMap();\n \t\tproperties.put(\"hibernate.cache.provider_class\",\n \t\t\t\t\"org.hibernate.cache.HashtableCacheProvider\");\n+\t\tproperties.put(\"hibernate.ejb.naming_strategy\",\n+\t\t\t\tImprovedNamingStrategy.class.getName());\n \t\tif (StringUtils.hasLength(this.ddlAuto) && !\"none\".equals(this.ddlAuto)) {\n \t\t\tproperties.put(\"hibernate.hbm2ddl.auto\", this.ddlAuto);\n \t\t}",
    "output": "Use Hibernate ImprovedNamingStrategy by default\nUpdate HibernateJpaAutoConfiguration to use the ImprovedNamingStrategy\nfor better table and column names."
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringMvcCompilerAutoConfiguration.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringMvcCompilerAutoConfiguration.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringMvcCompilerAutoConfiguration.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringMvcCompilerAutoConfiguration.java\n@@ -43,9 +43,12 @@ public void applyDependencies(DependencyCustomizer dependencies) {\n \t\t\t\t.add(\"org.springframework\", \"spring-webmvc\",\n \t\t\t\t\t\tdependencies.getProperty(\"spring.version\"));\n \n-\t\tdependencies.ifAnyMissingClasses(\"org.eclipse.jetty.server.Server\").add(\n-\t\t\t\t\"org.eclipse.jetty\", \"jetty-webapp\",\n-\t\t\t\tdependencies.getProperty(\"jetty.version\"));\n+\t\tdependencies\n+\t\t\t\t.ifAnyMissingClasses(\"org.apache.catalina.startup.Tomcat\")\n+\t\t\t\t.add(\"org.apache.tomcat.embed\", \"tomcat-embed-core\",\n+\t\t\t\t\t\tdependencies.getProperty(\"tomcat.version\"))\n+\t\t\t\t.add(\"org.apache.tomcat.embed\", \"tomcat-embed-logging-juli\",\n+\t\t\t\t\t\tdependencies.getProperty(\"tomcat.version\"));\n \n \t\tdependencies.add(\"org.codehaus.groovy\", \"groovy-templates\",\n \t\t\t\tdependencies.getProperty(\"groovy.version\"));",
    "output": "Restore Tomcat in CLI\nSeems to work. I think the problem was the race conditions\nthat we hopefully already eliminated. I got an out of memory\nerror running the samples tests in Eclipse, but then it went\naway again (something to look out for)."
  },
  {
    "input": "diff --git a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/web/BasicErrorController.java b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/web/BasicErrorController.java\n--- a/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/web/BasicErrorController.java\n+++ b/spring-boot-actuator/src/main/java/org/springframework/boot/actuate/web/BasicErrorController.java\n@@ -84,7 +84,7 @@ public Map<String, Object> error(HttpServletRequest request) {\n \t\t\t}\n \t\t\tmap.put(\"status\", status);\n \t\t\tif (error != null) {\n-\t\t\t\twhile (error instanceof ServletException) {\n+\t\t\t\twhile (error instanceof ServletException && error.getCause() != null) {\n \t\t\t\t\terror = ((ServletException) error).getCause();\n \t\t\t\t}\n \t\t\t\tmap.put(\"exception\", error.getClass().getName());",
    "output": "Avoid NPE in error controller"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Libraries.java b/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Libraries.java\n--- a/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Libraries.java\n+++ b/spring-boot-tools/spring-boot-loader-tools/src/main/java/org/springframework/boot/loader/tools/Libraries.java\n@@ -25,6 +25,15 @@\n  */\n public interface Libraries {\n \n+\t/**\n+\t * Represents no libraries.\n+\t */\n+\tpublic static Libraries NONE = new Libraries() {\n+\t\t@Override\n+\t\tpublic void doWithLibraries(LibraryCallback callback) throws IOException {\n+\t\t}\n+\t};\n+\n \t/**\n \t * Iterate all relevant libraries.\n \t * @param callback a callback for each relevant library.",
    "output": "Add Libraries.NONE static final"
  },
  {
    "input": "diff --git a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/ExplodedArchiveTests.java b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/ExplodedArchiveTests.java\n--- a/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/ExplodedArchiveTests.java\n+++ b/spring-boot-tools/spring-boot-loader/src/test/java/org/springframework/boot/loader/ExplodedArchiveTests.java\n@@ -123,6 +123,7 @@ public void nestedDirArchive() throws Exception {\n \t}\n \n \t@Test\n+\t@SuppressWarnings(\"resource\")\n \tpublic void getFilteredArchive() throws Exception {\n \t\tArchive filteredArchive = this.archive\n \t\t\t\t.getFilteredArchive(new Archive.EntryFilter() {\n@@ -140,7 +141,6 @@ public String apply(String entryName, Entry entry) {\n \t\t\t\tnew URL[] { filteredArchive.getUrl() });\n \t\tassertThat(classLoader.getResourceAsStream(\"1.dat\").read(), equalTo(1));\n \t\tassertThat(classLoader.getResourceAsStream(\"2.dat\"), nullValue());\n-\t\tclassLoader.close();\n \t}\n \n \tprivate Map<String, Archive.Entry> getEntriesMap(Archive archive) {",
    "output": "Fix compile failure on JDK 6"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/embedded/RegistrationBean.java b/spring-boot/src/main/java/org/springframework/boot/context/embedded/RegistrationBean.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/embedded/RegistrationBean.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/embedded/RegistrationBean.java\n@@ -104,10 +104,12 @@ protected final String getOrDeduceName(Object value) {\n \t * Configure registration base settings.\n \t */\n \tprotected void configure(Registration.Dynamic registration) {\n+\t\tAssert.state(registration != null,\n+\t\t\t\t\"Registration is null. Was something already registered for name=[\"\n+\t\t\t\t\t\t+ this.name + \"]?\");\n \t\tregistration.setAsyncSupported(this.asyncSupported);\n \t\tif (this.initParameters.size() > 0) {\n \t\t\tregistration.setInitParameters(this.initParameters);\n \t\t}\n \t}\n-\n }",
    "output": "Add exception with more helpful error message.\nFilter registered twice"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/VersionCommand.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/VersionCommand.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/VersionCommand.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/command/VersionCommand.java\n@@ -17,6 +17,7 @@\n package org.springframework.boot.cli.command;\n \n import org.springframework.boot.cli.Command;\n+import org.springframework.boot.cli.Log;\n \n /**\n  * {@link Command} to display the 'version' number.\n@@ -31,8 +32,7 @@ public VersionCommand() {\n \n \t@Override\n \tpublic void run(String... args) {\n-\t\t// FIXME: add version introspection\n-\t\tthrow new IllegalStateException(\"Not implemented\");\n+\t\tLog.info(\"Spring CLI v\" + getClass().getPackage().getImplementationVersion());\n \t}\n \n }",
    "output": "Implement CLI --version command"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/test/java/org/springframework/boot/cli/GrapesCleaner.java b/spring-boot-cli/src/test/java/org/springframework/boot/cli/GrapesCleaner.java\n--- a/spring-boot-cli/src/test/java/org/springframework/boot/cli/GrapesCleaner.java\n+++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/GrapesCleaner.java\n@@ -18,15 +18,34 @@\n \n import java.io.File;\n \n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+\n import org.springframework.boot.cli.command.CleanCommand;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n \n /**\n  * @author Dave Syer\n  */\n public class GrapesCleaner {\n \n-\t// FIXME get the version\n-\tprivate static final String VERSION = \"0.5.0.BUILD-SNAPSHOT\";\n+\tprivate static final String VERSION;\n+\tstatic {\n+\t\ttry {\n+\t\t\tFile pom = new File(\"pom.xml\");\n+\t\t\tDocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+\t\t\tDocumentBuilder builder = factory.newDocumentBuilder();\n+\t\t\tDocument document = builder.parse(pom);\n+\t\t\tElement parent = (Element) document.getDocumentElement()\n+\t\t\t\t\t.getElementsByTagName(\"parent\").item(0);\n+\t\t\tVERSION = parent.getElementsByTagName(\"version\").item(0).getFirstChild()\n+\t\t\t\t\t.getTextContent();\n+\t\t}\n+\t\tcatch (Exception ex) {\n+\t\t\tthrow new RuntimeException(ex);\n+\t\t}\n+\t}\n \n \tpublic static void cleanIfNecessary() throws Exception {\n \t\tFile installedJar = new File(getMavenRepository(), String.format(",
    "output": "Get the version to clean from the pom.xml"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/test/java/org/springframework/boot/cli/SampleIntegrationTests.java b/spring-boot-cli/src/test/java/org/springframework/boot/cli/SampleIntegrationTests.java\n--- a/spring-boot-cli/src/test/java/org/springframework/boot/cli/SampleIntegrationTests.java\n+++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/SampleIntegrationTests.java\n@@ -42,7 +42,7 @@ public class SampleIntegrationTests {\n \n \t@BeforeClass\n \tpublic static void cleanGrapes() throws Exception {\n-\t\t// GrapesCleaner.cleanIfNecessary();\n+\t\tGrapesCleaner.cleanIfNecessary();\n \t\t// System.setProperty(\"ivy.message.logger.level\", \"3\");\n \t}\n ",
    "output": "Restore grapes cleaner"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/test/java/org/springframework/boot/cli/GrapesCleaner.java b/spring-boot-cli/src/test/java/org/springframework/boot/cli/GrapesCleaner.java\n--- a/spring-boot-cli/src/test/java/org/springframework/boot/cli/GrapesCleaner.java\n+++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/GrapesCleaner.java\n@@ -30,13 +30,10 @@ public class GrapesCleaner {\n \n \tpublic static void cleanIfNecessary() throws Exception {\n \t\tFile installedJar = new File(getMavenRepository(), String.format(\n-\t\t\t\t\"org/springframework/boot/spring-boot-strap/%s/spring-boot-strap-%s.jar\",\n-\t\t\t\tVERSION, VERSION));\n-\t\tFile grapesJar = new File(\n-\t\t\t\tgetGrapesCache(),\n-\t\t\t\tString.format(\n-\t\t\t\t\t\t\"org.springframework.boot/spring-boot-strap/jars/spring-boot-strap-%s.jar\",\n-\t\t\t\t\t\tVERSION));\n+\t\t\t\t\"org/springframework/boot/spring-boot/%s/spring-boot-%s.jar\", VERSION,\n+\t\t\t\tVERSION));\n+\t\tFile grapesJar = new File(getGrapesCache(), String.format(\n+\t\t\t\t\"org.springframework.boot/spring-boot/jars/spring-boot-%s.jar\", VERSION));\n \t\tif (!VERSION.contains(\"SNAPSHOT\") || installedJar.exists() && grapesJar.exists()\n \t\t\t\t&& installedJar.lastModified() <= grapesJar.lastModified()) {\n \t\t\treturn;",
    "output": "Fix GrapesCleaner to work with renamed artifacts"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-data-jpa/src/test/java/org/springframework/boot/sample/data/jpa/AbstractIntegrationTests.java b/spring-boot-samples/spring-boot-sample-data-jpa/src/test/java/org/springframework/boot/sample/data/jpa/AbstractIntegrationTests.java\n--- a/spring-boot-samples/spring-boot-sample-data-jpa/src/test/java/org/springframework/boot/sample/data/jpa/AbstractIntegrationTests.java\n+++ b/spring-boot-samples/spring-boot-sample-data-jpa/src/test/java/org/springframework/boot/sample/data/jpa/AbstractIntegrationTests.java\n@@ -18,19 +18,22 @@\n import org.junit.runner.RunWith;\n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.context.initializer.ConfigFileApplicationContextInitializer;\n+import org.springframework.boot.context.initializer.LoggingApplicationContextInitializer;\n import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n import org.springframework.test.context.web.WebAppConfiguration;\n \n /**\n- * Base class for integration tests. Mimics the behavior of\n+ * Base class for integration tests. Mimics the behaviour of\n  * {@link SpringApplication#run(String...)}.\n  * \n  * @author Oliver Gierke\n  */\n @RunWith(SpringJUnit4ClassRunner.class)\n @WebAppConfiguration\n-@ContextConfiguration(classes = SampleDataJpaApplication.class, initializers = ConfigFileApplicationContextInitializer.class)\n+@ContextConfiguration(classes = SampleDataJpaApplication.class, initializers = {\n+\t\tConfigFileApplicationContextInitializer.class,\n+\t\tLoggingApplicationContextInitializer.class })\n public abstract class AbstractIntegrationTests {\n \n }",
    "output": "Add logging initializer to tests"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/Banner.java b/spring-boot/src/main/java/org/springframework/boot/Banner.java\n--- a/spring-boot/src/main/java/org/springframework/boot/Banner.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/Banner.java\n@@ -53,7 +53,6 @@ public static void write(PrintStream printStream) {\n \t\t}\n \t\tString version = Banner.class.getPackage().getImplementationVersion();\n \t\tversion = (version == null ? \"\" : \" (v\" + version + \")\");\n-\t\tversion = \" v0.5.0.BUILD.SNAPSHOT\";\n \t\tString padding = \"\";\n \t\twhile (padding.length() < STRAP_LINE_SIZE\n \t\t\t\t- (version.length() + SPRING_BOOT.length())) {",
    "output": "Remove hardcoded version in Banner"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-integration/src/test/java/org/springframework/boot/sample/integration/consumer/SampleIntegrationApplicationTests.java b/spring-boot-samples/spring-boot-sample-integration/src/test/java/org/springframework/boot/sample/integration/consumer/SampleIntegrationApplicationTests.java\n--- a/spring-boot-samples/spring-boot-sample-integration/src/test/java/org/springframework/boot/sample/integration/consumer/SampleIntegrationApplicationTests.java\n+++ b/spring-boot-samples/spring-boot-sample-integration/src/test/java/org/springframework/boot/sample/integration/consumer/SampleIntegrationApplicationTests.java\n@@ -84,6 +84,6 @@ public String call() throws Exception {\n \t\t\t\t\t\treturn builder.toString();\n \t\t\t\t\t}\n \t\t\t\t});\n-\t\treturn future.get(10, TimeUnit.SECONDS);\n+\t\treturn future.get(30, TimeUnit.SECONDS);\n \t}\n }",
    "output": "Fix poms for a milestone release"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-data-jpa/src/test/java/org/springframework/boot/sample/data/jpa/SampleDataJpaApplicationTests.java b/spring-boot-samples/spring-boot-sample-data-jpa/src/test/java/org/springframework/boot/sample/data/jpa/SampleDataJpaApplicationTests.java\n--- a/spring-boot-samples/spring-boot-sample-data-jpa/src/test/java/org/springframework/boot/sample/data/jpa/SampleDataJpaApplicationTests.java\n+++ b/spring-boot-samples/spring-boot-sample-data-jpa/src/test/java/org/springframework/boot/sample/data/jpa/SampleDataJpaApplicationTests.java\n@@ -26,7 +26,6 @@\n import org.junit.BeforeClass;\n import org.junit.Test;\n import org.springframework.boot.SpringApplication;\n-import org.springframework.boot.sample.data.jpa.SampleDataJpaApplication;\n import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n@@ -56,7 +55,7 @@ public ConfigurableApplicationContext call() throws Exception {\n \t\t\t\t\t\t\t\t\t\t.run(SampleDataJpaApplication.class);\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t});\n-\t\tcontext = future.get(10, TimeUnit.SECONDS);\n+\t\tcontext = future.get(30, TimeUnit.SECONDS);\n \t}\n \n \t@AfterClass",
    "output": "Bump version to 0.5.0.M1"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/context/initializer/ConfigFileApplicationContextInitializer.java b/spring-boot/src/main/java/org/springframework/boot/context/initializer/ConfigFileApplicationContextInitializer.java\n--- a/spring-boot/src/main/java/org/springframework/boot/context/initializer/ConfigFileApplicationContextInitializer.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/context/initializer/ConfigFileApplicationContextInitializer.java\n@@ -89,7 +89,7 @@ public class ConfigFileApplicationContextInitializer implements\n \tprivate String[] searchLocations = new String[] { \"classpath:\", \"file:./\",\n \t\t\t\"classpath:config/\", \"file:./config/\" };\n \n-\tprivate String names = \"${spring.config.name:application}\";\n+\tprivate String names = \"${spring.config.name},application\";\n \n \tprivate int order = Integer.MIN_VALUE + 10;\n ",
    "output": "Do not use property placeholder in config names\nUpdate ConfigFileApplicationContextInitializer so that the names\nproperty defaults to `${spring.config.name},application`. This allows\napplication.properties files to be loaded even when property placeholder\nexpansion is not enabled."
  },
  {
    "input": "diff --git a/spring-boot-cli/src/test/java/org/springframework/boot/cli/SampleIntegrationTests.java b/spring-boot-cli/src/test/java/org/springframework/boot/cli/SampleIntegrationTests.java\n--- a/spring-boot-cli/src/test/java/org/springframework/boot/cli/SampleIntegrationTests.java\n+++ b/spring-boot-cli/src/test/java/org/springframework/boot/cli/SampleIntegrationTests.java\n@@ -160,8 +160,8 @@ public void uiSample() throws Exception {\n \t}\n \n \t@Test\n-\tpublic void opsSample() throws Exception {\n-\t\tstart(\"samples/ops.groovy\");\n+\tpublic void actuatorSample() throws Exception {\n+\t\tstart(\"samples/actuator.groovy\");\n \t\tString result = FileUtil.readEntirely(new URL(\"http://localhost:8080\")\n \t\t\t\t.openStream());\n \t\tassertEquals(\"{\\\"message\\\":\\\"Hello World!\\\"}\", result);",
    "output": "Ops -> Actuator"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n--- a/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/SpringApplication.java\n@@ -254,6 +254,7 @@ public ApplicationContext run(String... args) {\n \t\t// Create, load, refresh and run the ApplicationContext\n \t\tApplicationContext context = createApplicationContext();\n \t\tif (context instanceof ConfigurableApplicationContext) {\n+\t\t\t((ConfigurableApplicationContext) context).registerShutdownHook();\n \t\t\t((ConfigurableApplicationContext) context).setEnvironment(environment);\n \t\t}\n \t\tpostProcessApplicationContext(context);\n\ndiff --git a/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java b/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java\n--- a/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java\n+++ b/spring-boot/src/test/java/org/springframework/boot/SpringApplicationTests.java\n@@ -326,6 +326,15 @@ public void commandLineArgsApplyToSpringApplication() throws Exception {\n \t\tassertThat(application.getShowBanner(), is(false));\n \t}\n \n+\t@Test\n+\tpublic void registerShutdownHook() throws Exception {\n+\t\tSpringApplication application = new SpringApplication(ExampleConfig.class);\n+\t\tConfigurableApplicationContext applicationContext = spy(new AnnotationConfigApplicationContext());\n+\t\tapplication.setApplicationContext(applicationContext);\n+\t\tapplication.run();\n+\t\tverify(applicationContext).registerShutdownHook();\n+\t}\n+\n \tprivate boolean hasPropertySource(ConfigurableEnvironment environment,\n \t\t\tClass<?> propertySourceClass, String name) {\n \t\tfor (PropertySource<?> source : environment.getPropertySources()) {",
    "output": "Ensure registerShutdownHook is called for apps"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/ReactorCompilerAutoConfiguration.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/ReactorCompilerAutoConfiguration.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/ReactorCompilerAutoConfiguration.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/ReactorCompilerAutoConfiguration.java\n@@ -53,9 +53,12 @@ public void applyDependencies(DependencyCustomizer dependencies) {\n \t@Override\n \tpublic void applyImports(ImportCustomizer imports) {\n \t\timports.addImports(\"reactor.core.Reactor\", \"reactor.event.Event\",\n+\t\t\t\t\"reactor.function.Consumer\", \"reactor.function.Functions\",\n+\t\t\t\t\"reactor.event.selector.Selectors\",\n \t\t\t\t\"reactor.spring.context.annotation.On\",\n \t\t\t\t\"reactor.spring.context.annotation.Reply\",\n-\t\t\t\tEnableReactor.class.getCanonicalName());\n+\t\t\t\tEnableReactor.class.getCanonicalName()).addStarImports(\n+\t\t\t\t\"reactor.event.Selectors\");\n \t}\n \n \t@Target(ElementType.TYPE)",
    "output": "Add auto compile tweaks for reactor"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/Banner.java b/spring-boot/src/main/java/org/springframework/boot/Banner.java\n--- a/spring-boot/src/main/java/org/springframework/boot/Banner.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/Banner.java\n@@ -27,7 +27,7 @@\n \n /**\n  * Writes the 'Spring' banner.\n- * \n+ *\n  * @author Phillip Webb\n  */\n abstract class Banner {\n@@ -49,7 +49,7 @@ public static void write(PrintStream printStream) {\n \t\t\tprintStream.println(line);\n \t\t}\n \t\tString version = Banner.class.getPackage().getImplementationVersion();\n-\t\tprintStream.println(AnsiOutput.toString(GREEN, \" Spring Bootstrap\", DEFAULT,\n+\t\tprintStream.println(AnsiOutput.toString(GREEN, \" Spring Boot\", DEFAULT,\n \t\t\t\tFAINT, (version == null ? \"\" : \" (v\" + version + \")\")));\n \t\tprintStream.println();\n \t}",
    "output": "Rename Spring Bootstrap -> Spring Boot"
  },
  {
    "input": "diff --git a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringBootCompilerAutoConfiguration.java b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringBootCompilerAutoConfiguration.java\n--- a/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringBootCompilerAutoConfiguration.java\n+++ b/spring-boot-cli/src/main/java/org/springframework/boot/cli/compiler/autoconfigure/SpringBootCompilerAutoConfiguration.java\n@@ -39,7 +39,7 @@ public class SpringBootCompilerAutoConfiguration extends CompilerAutoConfigurati\n \t@Override\n \tpublic void applyDependencies(DependencyCustomizer dependencies) {\n \t\tdependencies.ifAnyMissingClasses(\"org.springframework.boot.SpringApplication\")\n-\t\t\t\t.add(\"org.springframework.boot\", \"spring-boot-up\",\n+\t\t\t\t.add(\"org.springframework.boot\", \"spring-boot-starter\",\n \t\t\t\t\t\tdependencies.getProperty(\"spring.boot.version\"));\n \t}\n ",
    "output": "Rename spring-boot-ups -> spring-boot-starter"
  },
  {
    "input": "diff --git a/spring-boot-samples/spring-boot-sample-web-static/src/main/java/org/springframework/boot/sample/ui/SampleWebStaticApplication.java b/spring-boot-samples/spring-boot-sample-web-static/src/main/java/org/springframework/boot/sample/ui/SampleWebStaticApplication.java\n--- a/spring-boot-samples/spring-boot-sample-web-static/src/main/java/org/springframework/boot/sample/ui/SampleWebStaticApplication.java\n+++ b/spring-boot-samples/spring-boot-sample-web-static/src/main/java/org/springframework/boot/sample/ui/SampleWebStaticApplication.java\n@@ -18,12 +18,10 @@\n \n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.EnableAutoConfiguration;\n-import org.springframework.context.annotation.ComponentScan;\n import org.springframework.context.annotation.Configuration;\n \n @Configuration\n @EnableAutoConfiguration\n-@ComponentScan\n public class SampleWebStaticApplication {\n \n \tpublic static void main(String[] args) throws Exception {",
    "output": "Remove unused @ComponentScan"
  },
  {
    "input": "diff --git a/spring-boot/src/main/java/org/springframework/boot/StartupInfoLogger.java b/spring-boot/src/main/java/org/springframework/boot/StartupInfoLogger.java\n--- a/spring-boot/src/main/java/org/springframework/boot/StartupInfoLogger.java\n+++ b/spring-boot/src/main/java/org/springframework/boot/StartupInfoLogger.java\n@@ -85,7 +85,7 @@ private String getVersion(final Class<?> source) {\n \t\t\tpublic Object call() throws Exception {\n \t\t\t\treturn source.getPackage().getImplementationVersion();\n \t\t\t}\n-\t\t}, \" v[N/A]\");\n+\t\t}, \"\");\n \t}\n \n \tprivate String getOn() {",
    "output": "Remove v[N/A] log output"
  },
  {
    "input": "diff --git a/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RepackageMojo.java b/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RepackageMojo.java\n--- a/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RepackageMojo.java\n+++ b/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/RepackageMojo.java\n@@ -39,8 +39,8 @@\n  * @author Phillip Webb\n  * @author Dave Syer\n  */\n-@Mojo(name = \"package\", defaultPhase = LifecyclePhase.PACKAGE, requiresProject = true, threadSafe = true, requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME, requiresDependencyCollection = ResolutionScope.COMPILE_PLUS_RUNTIME)\n-public class PackageMojo extends AbstractMojo {\n+@Mojo(name = \"repackage\", defaultPhase = LifecyclePhase.PACKAGE, requiresProject = true, threadSafe = true, requiresDependencyResolution = ResolutionScope.COMPILE_PLUS_RUNTIME, requiresDependencyCollection = ResolutionScope.COMPILE_PLUS_RUNTIME)\n+public class RepackageMojo extends AbstractMojo {\n \n \t/**\n \t * The Maven project.",
    "output": "Rename maven 'package' goal to 'repackage'"
  },
  {
    "input": "diff --git a/spring-boot-loader-tools/src/main/java/org/springframework/boot/launcher/tools/Repackager.java b/spring-boot-loader-tools/src/main/java/org/springframework/boot/launcher/tools/Repackager.java\n--- a/spring-boot-loader-tools/src/main/java/org/springframework/boot/launcher/tools/Repackager.java\n+++ b/spring-boot-loader-tools/src/main/java/org/springframework/boot/launcher/tools/Repackager.java\n@@ -146,7 +146,12 @@ public void library(File file, LibraryScope scope) throws IOException {\n \t\t\twriter.writeLoaderClasses();\n \t\t}\n \t\tfinally {\n-\t\t\twriter.close();\n+\t\t\ttry {\n+\t\t\t\twriter.close();\n+\t\t\t}\n+\t\t\tcatch (Exception ex) {\n+\t\t\t\t// Ignore\n+\t\t\t}\n \t\t}\n \t}\n ",
    "output": "Ignore failure to close zip errors:"
  },
  {
    "input": "diff --git a/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/ExecutableArchiveMojo.java b/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/ExecutableArchiveMojo.java\n--- a/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/ExecutableArchiveMojo.java\n+++ b/spring-boot-maven-plugin/src/main/java/org/springframework/boot/maven/ExecutableArchiveMojo.java\n@@ -56,7 +56,7 @@\n /**\n  * MOJO that can can be used to repackage existing JAR and WAR archives so that they can\n  * be executed from the command line using {@literal java -jar}.\n- * \n+ *\n  * @author Phillip Webb\n  * @author Dave Syer\n  */\n@@ -247,7 +247,7 @@ private ZipFile addLauncherClasses(MavenArchiver archiver)\n \n \t\t\tString version = getClass().getPackage().getImplementationVersion();\n \t\t\tDefaultArtifact artifact = new DefaultArtifact(\n-\t\t\t\t\t\"org.springframework.boot:spring-boot-load:\" + version);\n+\t\t\t\t\t\"org.springframework.boot:spring-boot-loader:\" + version);\n \t\t\tArtifactDescriptorRequest descriptorRequest = new ArtifactDescriptorRequest(\n \t\t\t\t\tartifact, repositories, \"plugin\");\n \t\t\tArtifactDescriptorResult descriptorResult = this.repositorySystem",
    "output": "Rename some projects and polish POMs"
  },
  {
    "input": "diff --git a/spring-autoconfigure/src/main/java/org/springframework/autoconfigure/web/WebMvcAutoConfiguration.java b/spring-autoconfigure/src/main/java/org/springframework/autoconfigure/web/WebMvcAutoConfiguration.java\n--- a/spring-autoconfigure/src/main/java/org/springframework/autoconfigure/web/WebMvcAutoConfiguration.java\n+++ b/spring-autoconfigure/src/main/java/org/springframework/autoconfigure/web/WebMvcAutoConfiguration.java\n@@ -44,7 +44,6 @@\n import org.springframework.web.filter.HiddenHttpMethodFilter;\n import org.springframework.web.servlet.DispatcherServlet;\n import org.springframework.web.servlet.HandlerAdapter;\n-import org.springframework.web.servlet.HandlerMapping;\n import org.springframework.web.servlet.View;\n import org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;\n import org.springframework.web.servlet.config.annotation.EnableWebMvc;\n@@ -64,7 +63,7 @@\n @Configuration\n @ConditionalOnClass({ Servlet.class, DispatcherServlet.class,\n \t\tWebMvcConfigurerAdapter.class })\n-@ConditionalOnMissingBean({ HandlerAdapter.class, HandlerMapping.class })\n+@ConditionalOnMissingBean({ HandlerAdapter.class })\n @Order(Ordered.HIGHEST_PRECEDENCE + 10)\n @AutoConfigureAfter(EmbeddedServletContainerAutoConfiguration.class)\n public class WebMvcAutoConfiguration {",
    "output": "Autoconfigure MVC if HandlerMapping already defined"
  },
  {
    "input": "diff --git a/spring-autoconfigure/src/main/java/org/springframework/autoconfigure/reactor/ReactorAutoConfiguration.java b/spring-autoconfigure/src/main/java/org/springframework/autoconfigure/reactor/ReactorAutoConfiguration.java\n--- a/spring-autoconfigure/src/main/java/org/springframework/autoconfigure/reactor/ReactorAutoConfiguration.java\n+++ b/spring-autoconfigure/src/main/java/org/springframework/autoconfigure/reactor/ReactorAutoConfiguration.java\n@@ -33,7 +33,7 @@\n  * @author Dave Syer\n  */\n @Configuration\n-@ConditionalOnClass(Reactor.class)\n+@ConditionalOnClass(ConsumerBeanPostProcessor.class)\n @ConditionalOnMissingBean(Reactor.class)\n @AutoConfigureAfter(WebMvcAutoConfiguration.class)\n public class ReactorAutoConfiguration {",
    "output": "Change @Conditional for reactor auto config"
  },
  {
    "input": "diff --git a/spring-bootstrap/src/main/java/org/springframework/bootstrap/web/SpringServletInitializer.java b/spring-bootstrap/src/main/java/org/springframework/bootstrap/web/SpringServletInitializer.java\n--- a/spring-bootstrap/src/main/java/org/springframework/bootstrap/web/SpringServletInitializer.java\n+++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/web/SpringServletInitializer.java\n@@ -44,7 +44,7 @@\n  */\n public abstract class SpringServletInitializer implements WebApplicationInitializer {\n \n-\tprivate final Log logger = LogFactory.getLog(getClass());\n+\tprotected final Log logger = LogFactory.getLog(getClass());\n \n \t@Override\n \tpublic void onStartup(ServletContext servletContext) throws ServletException {",
    "output": "Exclude JSP classes by default"
  },
  {
    "input": "diff --git a/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/embedded/properties/ServerProperties.java b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/embedded/properties/ServerProperties.java\n--- a/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/embedded/properties/ServerProperties.java\n+++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/embedded/properties/ServerProperties.java\n@@ -88,6 +88,10 @@ public void setSessionTimeout(int sessionTimeout) {\n \t\tthis.sessionTimeout = sessionTimeout;\n \t}\n \n+\tpublic void setLoader(String value) {\n+\t\t// no op to support Tomcat running as a traditional container (not embedded)\n+\t}\n+\n \t@Override\n \tpublic void customize(ConfigurableEmbeddedServletContainerFactory factory) {\n \t\tfactory.setPort(getPort());",
    "output": "Add back no-op setLoader to ServerProperties\nTomcat starts up with server.loader System property set so\nwe need to accept that.\nFirst class escape hatch from jar to war for web applications"
  },
  {
    "input": "diff --git a/spring-cli/src/test/java/org/springframework/cli/SampleIntegrationTests.java b/spring-cli/src/test/java/org/springframework/cli/SampleIntegrationTests.java\n--- a/spring-cli/src/test/java/org/springframework/cli/SampleIntegrationTests.java\n+++ b/spring-cli/src/test/java/org/springframework/cli/SampleIntegrationTests.java\n@@ -138,10 +138,6 @@ public void webSample() throws Exception {\n \n \t@Test\n \tpublic void uiSample() throws Exception {\n-\n-\t\t// Assume.assumeTrue(\"Not running in CI\",\n-\t\t// System.getProperty(\"bamboo.buildPlanName\") == null);\n-\n \t\tstart(\"samples/ui.groovy\", \"--classpath=.:src/test/resources\");\n \t\tString result = FileUtil.readEntirely(new URL(\"http://localhost:8080\")\n \t\t\t\t.openStream());",
    "output": "Test fixed, removing comments"
  },
  {
    "input": "diff --git a/spring-cli/src/test/java/org/springframework/cli/SampleIntegrationTests.java b/spring-cli/src/test/java/org/springframework/cli/SampleIntegrationTests.java\n--- a/spring-cli/src/test/java/org/springframework/cli/SampleIntegrationTests.java\n+++ b/spring-cli/src/test/java/org/springframework/cli/SampleIntegrationTests.java\n@@ -26,6 +26,7 @@\n \n import org.apache.ivy.util.FileUtil;\n import org.junit.After;\n+import org.junit.Assume;\n import org.junit.Before;\n import org.junit.BeforeClass;\n import org.junit.Test;\n@@ -68,6 +69,7 @@ public void init() {\n \tpublic void clear() {\n \t\tSystem.setOut(this.savedOutput);\n \t\tSystem.setErr(this.savedErr);\n+\t\tSystem.out.println(getOutput());\n \t}\n \n \tprivate String getOutput() {\n@@ -138,7 +140,8 @@ public void webSample() throws Exception {\n \t@Test\n \tpublic void uiSample() throws Exception {\n \n-\t\t// FIXME Failing on OSX\n+\t\tAssume.assumeTrue(\"Not running in CI\",\n+\t\t\t\tSystem.getProperty(\"bamboo.buildPlanName\") == null);\n \n \t\tstart(\"samples/ui.groovy\", \"--classpath=.:src/test/resources\");\n \t\tString result = FileUtil.readEntirely(new URL(\"http://localhost:8080\")",
    "output": "Add Assume for CI build"
  },
  {
    "input": "diff --git a/spring-cli/src/test/java/org/springframework/cli/SampleIntegrationTests.java b/spring-cli/src/test/java/org/springframework/cli/SampleIntegrationTests.java\n--- a/spring-cli/src/test/java/org/springframework/cli/SampleIntegrationTests.java\n+++ b/spring-cli/src/test/java/org/springframework/cli/SampleIntegrationTests.java\n@@ -28,7 +28,6 @@\n import org.junit.After;\n import org.junit.Before;\n import org.junit.BeforeClass;\n-import org.junit.Ignore;\n import org.junit.Test;\n import org.springframework.cli.command.RunCommand;\n \n@@ -137,7 +136,6 @@ public void webSample() throws Exception {\n \t}\n \n \t@Test\n-\t@Ignore\n \tpublic void uiSample() throws Exception {\n \n \t\t// FIXME Failing on OSX",
    "output": "Fix interfaces in groovy configuration"
  },
  {
    "input": "diff --git a/spring-cli/src/test/java/org/springframework/cli/SampleIntegrationTests.java b/spring-cli/src/test/java/org/springframework/cli/SampleIntegrationTests.java\n--- a/spring-cli/src/test/java/org/springframework/cli/SampleIntegrationTests.java\n+++ b/spring-cli/src/test/java/org/springframework/cli/SampleIntegrationTests.java\n@@ -28,6 +28,7 @@\n import org.junit.After;\n import org.junit.Before;\n import org.junit.BeforeClass;\n+import org.junit.Ignore;\n import org.junit.Test;\n import org.springframework.cli.command.RunCommand;\n \n@@ -136,6 +137,7 @@ public void webSample() throws Exception {\n \t}\n \n \t@Test\n+\t@Ignore\n \tpublic void uiSample() throws Exception {\n \n \t\t// FIXME Failing on OSX",
    "output": "Ignore failing test"
  },
  {
    "input": "diff --git a/spring-cli/src/main/java/org/springframework/cli/compiler/autoconfigure/SpringMvcCompilerAutoConfiguration.java b/spring-cli/src/main/java/org/springframework/cli/compiler/autoconfigure/SpringMvcCompilerAutoConfiguration.java\n--- a/spring-cli/src/main/java/org/springframework/cli/compiler/autoconfigure/SpringMvcCompilerAutoConfiguration.java\n+++ b/spring-cli/src/main/java/org/springframework/cli/compiler/autoconfigure/SpringMvcCompilerAutoConfiguration.java\n@@ -60,7 +60,8 @@ public boolean matches(ClassNode classNode) {\n \tpublic void applyImports(ImportCustomizer imports) {\n \t\timports.addStarImports(\"org.springframework.web.bind.annotation\",\n \t\t\t\t\"org.springframework.web.servlet.config.annotation\",\n-\t\t\t\t\"org.springframework.http\");\n+\t\t\t\t\"org.springframework.web.servlet\",\n+\t\t\t\t\"org.springframework.web.servlet.handler\", \"org.springframework.http\");\n \t\timports.addStaticImport(\"org.springframework.cli.template.GroovyTemplate\",\n \t\t\t\t\"template\");\n \t}",
    "output": "Add some useful imports to Mvc scripts"
  },
  {
    "input": "diff --git a/spring-actuator/src/main/java/org/springframework/actuate/autoconfigure/MetricFilterAutoConfiguration.java b/spring-actuator/src/main/java/org/springframework/actuate/autoconfigure/MetricFilterAutoConfiguration.java\n--- a/spring-actuator/src/main/java/org/springframework/actuate/autoconfigure/MetricFilterAutoConfiguration.java\n+++ b/spring-actuator/src/main/java/org/springframework/actuate/autoconfigure/MetricFilterAutoConfiguration.java\n@@ -74,8 +74,6 @@ public Filter metricFilter() {\n \t@Order(Ordered.HIGHEST_PRECEDENCE)\n \tprivate final class MetricsFilter extends GenericFilterBean {\n \n-\t\t// FIXME parameterize the order (ideally it runs before any other filter)\n-\n \t\t@Override\n \t\tpublic void doFilter(ServletRequest request, ServletResponse response,\n \t\t\t\tFilterChain chain) throws IOException, ServletException {",
    "output": "Remove unfixable FIXME"
  },
  {
    "input": "diff --git a/spring-bootstrap/src/main/java/org/springframework/bootstrap/config/SimpleJsonParser.java b/spring-bootstrap/src/main/java/org/springframework/bootstrap/config/SimpleJsonParser.java\n--- a/spring-bootstrap/src/main/java/org/springframework/bootstrap/config/SimpleJsonParser.java\n+++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/config/SimpleJsonParser.java\n@@ -77,7 +77,7 @@ private Object parseInternal(String json) {\n \t\tif (json.startsWith(\"\\\"\")) {\n \t\t\treturn trimTrailingCharacter(trimLeadingCharacter(json, '\"'), '\"');\n \t\t}\n-\t\treturn json; // TODO: numbers maybe?\n+\t\treturn json;\n \t}\n \n \tprivate static String trimTrailingCharacter(String string, char c) {",
    "output": "Remove unnecessary TODO from SimpleJsonParser"
  },
  {
    "input": "diff --git a/spring-launcher/src/main/java/org/springframework/launcher/LaunchedURLClassLoader.java b/spring-launcher/src/main/java/org/springframework/launcher/LaunchedURLClassLoader.java\n--- a/spring-launcher/src/main/java/org/springframework/launcher/LaunchedURLClassLoader.java\n+++ b/spring-launcher/src/main/java/org/springframework/launcher/LaunchedURLClassLoader.java\n@@ -46,7 +46,12 @@ protected Class<?> findClass(final String name) throws ClassNotFoundException {\n \t\tif (lastDot != -1) {\n \t\t\tString packageName = name.substring(0, lastDot);\n \t\t\tif (getPackage(packageName) == null) {\n-\t\t\t\tdefinePackageForFindClass(name, packageName);\n+\t\t\t\ttry {\n+\t\t\t\t\tdefinePackageForFindClass(name, packageName);\n+\t\t\t\t}\n+\t\t\t\tcatch (Exception ex) {\n+\t\t\t\t\t// Swallow and continue\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n \t\treturn super.findClass(name);\n@@ -72,6 +77,7 @@ public Object run() throws ClassNotFoundException {\n \t\t\t\t\t\t\t\tif (jarFile.getManifest() != null\n \t\t\t\t\t\t\t\t\t\t&& jarFile.getJarEntry(path) != null) {\n \t\t\t\t\t\t\t\t\tdefinePackage(packageName, jarFile.getManifest(), url);\n+\t\t\t\t\t\t\t\t\treturn null;\n \t\t\t\t\t\t\t\t}\n \t\t\t\t\t\t\t}\n \t\t\t\t\t\t}",
    "output": "Protect against multiple define package calls\nEnsure that multiple calls to define package are not made when the\nsame class is contained in multiple jars."
  },
  {
    "input": "diff --git a/spring-cli/src/main/java/org/springframework/cli/SpringCli.java b/spring-cli/src/main/java/org/springframework/cli/SpringCli.java\n--- a/spring-cli/src/main/java/org/springframework/cli/SpringCli.java\n+++ b/spring-cli/src/main/java/org/springframework/cli/SpringCli.java\n@@ -220,7 +220,7 @@ public String getDescription() {\n \n \t\t@Override\n \t\tpublic String getUsageHelp() {\n-\t\t\treturn null;\n+\t\t\treturn \"command\";\n \t\t}\n \n \t\t@Override",
    "output": "Fix null in help output"
  },
  {
    "input": "diff --git a/spring-bootstrap/src/test/java/org/springframework/bootstrap/logging/LoggingApplicationContextInitializerTests.java b/spring-bootstrap/src/test/java/org/springframework/bootstrap/logging/LoggingApplicationContextInitializerTests.java\n--- a/spring-bootstrap/src/test/java/org/springframework/bootstrap/logging/LoggingApplicationContextInitializerTests.java\n+++ b/spring-bootstrap/src/test/java/org/springframework/bootstrap/logging/LoggingApplicationContextInitializerTests.java\n@@ -78,7 +78,6 @@ public void testDefaultConfigLocation() {\n \t\tString output = getOutput().trim();\n \t\tassertTrue(\"Wrong output:\\n\" + output, output.contains(\"Hello world\"));\n \t\tassertFalse(\"Wrong output:\\n\" + output, output.contains(\"???\"));\n-\t\tassertTrue(\"Wrong output:\\n\" + output, output.startsWith(\"[\"));\n \t}\n \n \t@Test",
    "output": "Relax logging tests for CI"
  },
  {
    "input": "diff --git a/spring-autoconfigure/src/main/java/org/springframework/autoconfigure/jdbc/DataSourceAutoConfiguration.java b/spring-autoconfigure/src/main/java/org/springframework/autoconfigure/jdbc/DataSourceAutoConfiguration.java\n--- a/spring-autoconfigure/src/main/java/org/springframework/autoconfigure/jdbc/DataSourceAutoConfiguration.java\n+++ b/spring-autoconfigure/src/main/java/org/springframework/autoconfigure/jdbc/DataSourceAutoConfiguration.java\n@@ -61,8 +61,6 @@\n @ConditionalOnMissingBean(DataSource.class)\n public class DataSourceAutoConfiguration {\n \n-\t// FIXME see above\n-\n \tprivate static Log logger = LogFactory.getLog(DataSourceAutoConfiguration.class);\n \n \t@Autowired(required = false)\n@@ -108,7 +106,6 @@ public NamedParameterJdbcOperations namedParameterJdbcTemplate() {\n \n \t}\n \n-\t// FIXME: DB platform\n \t@Value(\"${spring.database.schema:classpath*:schema-${spring.database.platform:all}.sql}\")\n \tprivate String schemaLocations = \"\";\n ",
    "output": "Restore udev in maven\nAlso tidy up some TODOs"
  },
  {
    "input": "diff --git a/spring-autoconfigure/src/main/java/org/springframework/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java b/spring-autoconfigure/src/main/java/org/springframework/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java\n--- a/spring-autoconfigure/src/main/java/org/springframework/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java\n+++ b/spring-autoconfigure/src/main/java/org/springframework/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java\n@@ -23,7 +23,7 @@\n \n import javax.servlet.Servlet;\n \n-import nz.net.ultraq.web.thymeleaf.LayoutDialect;\n+import nz.net.ultraq.thymeleaf.LayoutDialect;\n \n import org.springframework.autoconfigure.AutoConfigureAfter;\n import org.springframework.autoconfigure.EnableAutoConfiguration;\n@@ -105,7 +105,7 @@ public String getName() {\n \t}\n \n \t@Configuration\n-\t@ConditionalOnMissingClass(\"nz.net.ultraq.web.thymeleaf.LayoutDialect\")\n+\t@ConditionalOnMissingClass(\"nz.net.ultraq.thymeleaf.LayoutDialect\")\n \t@ConditionalOnMissingBean(SpringTemplateEngine.class)\n \tprotected static class ThymeleafDefaultConfiguration {\n \n@@ -124,7 +124,7 @@ public SpringTemplateEngine templateEngine() {\n \t}\n \n \t@Configuration\n-\t@ConditionalOnClass(name = \"nz.net.ultraq.web.thymeleaf.LayoutDialect\")\n+\t@ConditionalOnClass(name = \"nz.net.ultraq.thymeleaf.LayoutDialect\")\n \t@ConditionalOnMissingBean(SpringTemplateEngine.class)\n \tprotected static class ThymeleafWebLayoutConfiguration {\n ",
    "output": "Upgrade Thymeleaf layout dialect"
  },
  {
    "input": "diff --git a/spring-cli/src/test/java/org/springframework/cli/SampleIntegrationTests.java b/spring-cli/src/test/java/org/springframework/cli/SampleIntegrationTests.java\n--- a/spring-cli/src/test/java/org/springframework/cli/SampleIntegrationTests.java\n+++ b/spring-cli/src/test/java/org/springframework/cli/SampleIntegrationTests.java\n@@ -73,7 +73,7 @@ public RunCommand call() throws Exception {\n \t\t\t\t\t\treturn command;\n \t\t\t\t\t}\n \t\t\t\t});\n-\t\tthis.command = future.get(30, TimeUnit.SECONDS);\n+\t\tthis.command = future.get(4, TimeUnit.MINUTES);\n \t}\n \n \t@After",
    "output": "Increase integration test timeout\nIncrease time for CLI integration tests to account for @Grab downloads."
  },
  {
    "input": "diff --git a/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/initializer/LoggingApplicationContextInitializer.java b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/initializer/LoggingApplicationContextInitializer.java\n--- a/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/initializer/LoggingApplicationContextInitializer.java\n+++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/initializer/LoggingApplicationContextInitializer.java\n@@ -75,7 +75,7 @@ public class LoggingApplicationContextInitializer implements\n \t\tENVIRONMENT_SYSTEM_PROPERTY_MAPPING.put(\"PID\", \"PID\");\n \t}\n \n-\tprivate int order = Integer.MIN_VALUE + 1;\n+\tprivate int order = Integer.MIN_VALUE + 11;\n \n \t/**\n \t * Initialize the logging system according to preferences expressed through the",
    "output": "Make logging config come after config file\n...otherwise you can't control the log configuration from\napplication.properties."
  },
  {
    "input": "diff --git a/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java b/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java\n--- a/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java\n+++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/thymeleaf/ThymeleafAutoConfiguration.java\n@@ -67,6 +67,9 @@ protected static class DefaultTemplateResolverConfiguration {\n \t\t@Value(\"${spring.template.suffix:.html}\")\n \t\tprivate String suffix = \".html\";\n \n+\t\t@Value(\"${spring.template.cache:true}\")\n+\t\tprivate boolean cacheable;\n+\n \t\t@Value(\"${spring.template.mode:HTML5}\")\n \t\tprivate String templateMode = \"HTML5\";\n \n@@ -94,6 +97,7 @@ public String getName() {\n \t\t\tresolver.setPrefix(this.prefix);\n \t\t\tresolver.setSuffix(this.suffix);\n \t\t\tresolver.setTemplateMode(this.templateMode);\n+\t\t\tresolver.setCacheable(this.cacheable);\n \t\t\treturn resolver;\n \t\t}\n ",
    "output": "Add cacheable switch to Thymeleaf template resolver\nUser can set spring.template.cache=false to change the behaviour"
  },
  {
    "input": "diff --git a/spring-bootstrap-actuator/src/main/java/org/springframework/bootstrap/actuate/autoconfigure/SecurityAutoConfiguration.java b/spring-bootstrap-actuator/src/main/java/org/springframework/bootstrap/actuate/autoconfigure/SecurityAutoConfiguration.java\n--- a/spring-bootstrap-actuator/src/main/java/org/springframework/bootstrap/actuate/autoconfigure/SecurityAutoConfiguration.java\n+++ b/spring-bootstrap-actuator/src/main/java/org/springframework/bootstrap/actuate/autoconfigure/SecurityAutoConfiguration.java\n@@ -130,12 +130,10 @@ protected void configure(HttpConfiguration http) throws Exception {\n \t\t\tif (this.security.getBasic().isEnabled()) {\n \n \t\t\t\tString[] paths = getSecurePaths();\n-\n-\t\t\t\tHttpConfiguration matcher = http.requestMatchers().antMatchers(paths);\n-\t\t\t\tmatcher.authenticationEntryPoint(entryPoint()).httpBasic()\n-\t\t\t\t\t\t.authenticationEntryPoint(entryPoint()).and().anonymous()\n-\t\t\t\t\t\t.disable();\n-\t\t\t\tmatcher.authorizeUrls().anyRequest()\n+\t\t\t\thttp.exceptionHandling().authenticationEntryPoint(entryPoint()).and()\n+\t\t\t\t\t\t.requestMatchers().antMatchers(paths);\n+\t\t\t\thttp.httpBasic().and().anonymous().disable();\n+\t\t\t\thttp.authorizeUrls().anyRequest()\n \t\t\t\t\t\t.hasRole(this.security.getBasic().getRole());\n \n \t\t\t}",
    "output": "Fix for Security snapshots"
  },
  {
    "input": "diff --git a/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/initializer/ConfigFileApplicationContextInitializer.java b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/initializer/ConfigFileApplicationContextInitializer.java\n--- a/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/initializer/ConfigFileApplicationContextInitializer.java\n+++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/initializer/ConfigFileApplicationContextInitializer.java\n@@ -41,7 +41,7 @@\n /**\n  * {@link ApplicationContextInitializer} that configures the context environment by\n  * loading properties from well known file locations. By default properties will be loaded\n- * from 'application.properties' and/or 'application.yaml' files in the following\n+ * from 'application.properties' and/or 'application.yml' files in the following\n  * locations:\n  * <ul>\n  * <li>classpath:</li>\n@@ -55,7 +55,7 @@\n  * \n  * <p>\n  * Additional files will also be loaded based on active profiles. For example if a 'web'\n- * profile is active 'application-web.properties' and 'application-web.yaml' will be\n+ * profile is active 'application-web.properties' and 'application-web.yml' will be\n  * considered.\n  * \n  * <p>\n@@ -78,7 +78,7 @@ public class ConfigFileApplicationContextInitializer implements\n \n \tprivate String name = \"${spring.config.name:application}\";\n \n-\tprivate int order = Integer.MIN_VALUE;\n+\tprivate int order = Integer.MIN_VALUE + 10;\n \n \t@Override\n \tpublic void initialize(ConfigurableApplicationContext applicationContext) {",
    "output": "Tweaks to config file intializer"
  },
  {
    "input": "diff --git a/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/annotation/OnResourceCondition.java b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/annotation/OnResourceCondition.java\n--- a/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/annotation/OnResourceCondition.java\n+++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/annotation/OnResourceCondition.java\n@@ -39,7 +39,7 @@ class OnResourceCondition implements Condition {\n \n \tprivate static Log logger = LogFactory.getLog(OnResourceCondition.class);\n \n-\tprivate ResourceLoader loader = new DefaultResourceLoader();\n+\tprivate ResourceLoader defaultResourceLoader = new DefaultResourceLoader();\n \n \t@Override\n \tpublic boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {\n@@ -48,6 +48,8 @@ public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata)\n \n \t\tMultiValueMap<String, Object> attributes = metadata.getAllAnnotationAttributes(\n \t\t\t\tConditionalOnResource.class.getName(), true);\n+\t\tResourceLoader loader = context.getResourceLoader() == null ? this.defaultResourceLoader\n+\t\t\t\t: context.getResourceLoader();\n \t\tif (attributes != null) {\n \t\t\tList<String> locations = new ArrayList<String>();\n \t\t\tcollectValues(locations, attributes.get(\"resources\"));\n@@ -57,7 +59,7 @@ public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata)\n \t\t\t\tif (logger.isDebugEnabled()) {\n \t\t\t\t\tlogger.debug(checking + \"Checking for resource: \" + location);\n \t\t\t\t}\n-\t\t\t\tif (!this.loader.getResource(location).exists()) {\n+\t\t\t\tif (!loader.getResource(location).exists()) {\n \t\t\t\t\tif (logger.isDebugEnabled()) {\n \t\t\t\t\t\tlogger.debug(checking + \"Resource not found: \" + location\n \t\t\t\t\t\t\t\t+ \" (search terminated with matches=false)\");",
    "output": "Use ResourceLoader from condition context if avilable"
  },
  {
    "input": "diff --git a/spring-bootstrap-launcher/src/main/java/org/springframework/bootstrap/launcher/Launcher.java b/spring-bootstrap-launcher/src/main/java/org/springframework/bootstrap/launcher/Launcher.java\n--- a/spring-bootstrap-launcher/src/main/java/org/springframework/bootstrap/launcher/Launcher.java\n+++ b/spring-bootstrap-launcher/src/main/java/org/springframework/bootstrap/launcher/Launcher.java\n@@ -26,6 +26,7 @@\n import java.util.Enumeration;\n import java.util.List;\n import java.util.jar.JarEntry;\n+import java.util.logging.Logger;\n \n import org.springframework.bootstrap.launcher.jar.RandomAccessJarFile;\n \n@@ -37,6 +38,8 @@\n  */\n public abstract class Launcher {\n \n+\tprivate Logger logger = Logger.getLogger(Launcher.class.getName());\n+\n \t/**\n \t * The main runner class. This must be loaded by the created ClassLoader so cannot be\n \t * directly referenced.\n@@ -93,10 +96,12 @@ protected void launch(String[] args, File archive) throws Exception {\n \t\tEnumeration<JarEntry> jarEntries = jarFile.entries();\n \t\twhile (jarEntries.hasMoreElements()) {\n \t\t\tJarEntry jarEntry = jarEntries.nextElement();\n+\t\t\tthis.logger.fine(\"Adding: \" + jarEntry.getName());\n \t\t\tif (isNestedJarFile(jarEntry)) {\n \t\t\t\tlib.add(jarFile.getNestedJarFile(jarEntry));\n \t\t\t}\n \t\t}\n+\t\tthis.logger.fine(\"Done\");\n \t\tpostProcessLib(jarFile, lib);\n \t\tClassLoader classLoader = createClassLoader(lib);\n \t\tlaunch(args, jarFile, classLoader);",
    "output": "Add configuration for trad sample running as war\nThe launcher project is used to run a war file.  Not working yet for\nme anyway.\nSupport for running \"traditional\" webapps in place"
  },
  {
    "input": "diff --git a/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/web/WebMvcAutoConfiguration.java b/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/web/WebMvcAutoConfiguration.java\n--- a/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/web/WebMvcAutoConfiguration.java\n+++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/web/WebMvcAutoConfiguration.java\n@@ -122,11 +122,11 @@ public void addFormatters(FormatterRegistry registry) {\n \t\tpublic void addResourceHandlers(ResourceHandlerRegistry registry) {\n \t\t\tregistry.addResourceHandler(\"/resources/**\").addResourceLocations(\"/\")\n \t\t\t\t\t.addResourceLocations(\"classpath:/META-INF/resources/\")\n-\t\t\t\t\t.addResourceLocations(\"classpath:/resources\")\n+\t\t\t\t\t.addResourceLocations(\"classpath:/resources/\")\n \t\t\t\t\t.addResourceLocations(\"classpath:/\");\n \t\t\tregistry.addResourceHandler(\"/**\").addResourceLocations(\"/\")\n \t\t\t\t\t.addResourceLocations(\"classpath:/META-INF/resources/\")\n-\t\t\t\t\t.addResourceLocations(\"classpath:/static\")\n+\t\t\t\t\t.addResourceLocations(\"classpath:/static/\")\n \t\t\t\t\t.addResourceLocations(\"classpath:/\");\n \t\t}\n ",
    "output": "Fix missing trailing / in resource paths"
  },
  {
    "input": "diff --git a/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/jdbc/BasicDataSourceConfiguration.java b/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/jdbc/BasicDataSourceConfiguration.java\n--- a/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/jdbc/BasicDataSourceConfiguration.java\n+++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/jdbc/BasicDataSourceConfiguration.java\n@@ -18,6 +18,8 @@\n import javax.sql.DataSource;\n \n import org.apache.commons.dbcp.BasicDataSource;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n@@ -31,8 +33,11 @@\n @Configuration\n public class BasicDataSourceConfiguration extends AbstractDataSourceConfiguration {\n \n+\tprivate static Log logger = LogFactory.getLog(BasicDataSourceConfiguration.class);\n+\n \t@Bean\n \tpublic DataSource dataSource() {\n+\t\tlogger.info(\"Hint: using Commons DBCP BasicDataSource. It's going to work, but the Tomcat DataSource is more reliable.\");\n \t\tBasicDataSource pool = new BasicDataSource();\n \t\tpool.setDriverClassName(getDriverClassName());\n \t\tpool.setUrl(getUrl());",
    "output": "Add logging to BasicDataSourceConfiguration"
  },
  {
    "input": "diff --git a/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/jdbc/EmbeddedDatabaseAutoConfiguration.java b/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/jdbc/EmbeddedDatabaseAutoConfiguration.java\n--- a/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/jdbc/EmbeddedDatabaseAutoConfiguration.java\n+++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/autoconfigure/jdbc/EmbeddedDatabaseAutoConfiguration.java\n@@ -50,9 +50,6 @@\n @ConditionalOnMissingBean(DataSource.class)\n public class EmbeddedDatabaseAutoConfiguration {\n \n-\tprivate static Log logger = LogFactory\n-\t\t\t.getLog(EmbeddedDatabaseAutoConfiguration.class);\n-\n \tprivate static final Map<EmbeddedDatabaseType, String> EMBEDDED_DATABASE_TYPE_CLASSES;\n \tstatic {\n \t\tEMBEDDED_DATABASE_TYPE_CLASSES = new LinkedHashMap<EmbeddedDatabaseType, String>();\n@@ -100,6 +97,8 @@ public static EmbeddedDatabaseType getEmbeddedDatabaseType() {\n \n \tstatic class EmbeddedDatabaseCondition implements Condition {\n \n+\t\tprivate static Log logger = LogFactory.getLog(EmbeddedDatabaseCondition.class);\n+\n \t\t@Override\n \t\tpublic boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {\n \t\t\tif (!ClassUtils.isPresent(",
    "output": "Fix class loading problem with Log in a Condition"
  },
  {
    "input": "diff --git a/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/annotation/ConfigurationPropertiesBindingConfiguration.java b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/annotation/ConfigurationPropertiesBindingConfiguration.java\n--- a/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/annotation/ConfigurationPropertiesBindingConfiguration.java\n+++ b/spring-bootstrap/src/main/java/org/springframework/bootstrap/context/annotation/ConfigurationPropertiesBindingConfiguration.java\n@@ -56,11 +56,15 @@ public class ConfigurationPropertiesBindingConfiguration {\n \t@Qualifier(VALIDATOR_BEAN_NAME)\n \tprivate Validator validator;\n \n-\t@Bean\n \t@ConditionalOnMissingBean(name = VALIDATOR_BEAN_NAME)\n \t@ConditionalOnClass(name = \"javax.validation.Validator\")\n-\tprotected Validator configurationPropertiesValidator() {\n-\t\treturn new LocalValidatorFactoryBean();\n+\tpublic static class ValidatorConfiguration {\n+\n+\t\t@Bean\n+\t\tprotected Validator configurationPropertiesValidator() {\n+\t\t\treturn new LocalValidatorFactoryBean();\n+\t\t}\n+\n \t}\n \n \t/**",
    "output": "Fix ordering problem with validator being null"
  },
  {
    "input": "diff --git a/spring-bootstrap-cli/src/test/java/org/springframework/bootstrap/cli/SampleIntegrationTests.java b/spring-bootstrap-cli/src/test/java/org/springframework/bootstrap/cli/SampleIntegrationTests.java\n--- a/spring-bootstrap-cli/src/test/java/org/springframework/bootstrap/cli/SampleIntegrationTests.java\n+++ b/spring-bootstrap-cli/src/test/java/org/springframework/bootstrap/cli/SampleIntegrationTests.java\n@@ -69,7 +69,7 @@ public RunCommand call() throws Exception {\n \t\t\t\t\t\treturn command;\n \t\t\t\t\t}\n \t\t\t\t});\n-\t\tthis.command = future.get(10, TimeUnit.SECONDS);\n+\t\tthis.command = future.get(30, TimeUnit.SECONDS);\n \t}\n \n \t@After\n@@ -121,7 +121,7 @@ public void webSample() throws Exception {\n \n \t@Test\n \tpublic void actuatorSample() throws Exception {\n-\t\tstart(\"samples/service.groovy\");\n+\t\tstart(\"samples/actuator.groovy\");\n \t\tString result = FileUtil.readEntirely(new URL(\"http://localhost:8080\")\n \t\t\t\t.openStream());\n \t\tassertEquals(\"{\\\"message\\\":\\\"Hello World!\\\"}\", result);",
    "output": "Change name of groovy sample script"
  },
  {
    "input": "diff --git a/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringBootstrapCompilerAutoConfiguration.java b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringBootstrapCompilerAutoConfiguration.java\n--- a/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringBootstrapCompilerAutoConfiguration.java\n+++ b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringBootstrapCompilerAutoConfiguration.java\n@@ -50,10 +50,12 @@ public void applyDependencies(DependencyCustomizer dependencies) {\n \t\tdependencies.ifNotAdded(\"cg.qos.logback\", \"logback-classic\")\n \t\t\t\t.ifAnyResourcesPresent(\"log4j.properties\", \"log4j.xml\")\n \t\t\t\t.add(\"org.slf4j\", \"slf4j-log4j12\", \"1.7.1\")\n-\t\t\t\t.add(\"log4j\", \"log4j\", \"1.2.16\");\n+\t\t\t\t.add(\"log4j\", \"log4j\", \"1.2.16\")\n+\t\t\t\t.add(\"org.slf4j\", \"jcl-over-slf4j\", \"1.7.1\");\n \t\tdependencies.ifNotAdded(\"ch.qos.logback\", \"logback-classic\")\n \t\t\t\t.ifNotAdded(\"org.slf4j\", \"slf4j-log4j12\")\n-\t\t\t\t.add(\"org.slf4j\", \"slf4j-jdk14\", \"1.7.1\");\n+\t\t\t\t.add(\"org.slf4j\", \"slf4j-jdk14\", \"1.7.1\")\n+\t\t\t\t.add(\"org.slf4j\", \"jcl-over-slf4j\", \"1.7.1\");\n \t\t// FIXME get the version\n \t}\n ",
    "output": "Include jcl-over-slf4j with autoconfigure"
  },
  {
    "input": "diff --git a/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringBootstrapCompilerAutoConfiguration.java b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringBootstrapCompilerAutoConfiguration.java\n--- a/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringBootstrapCompilerAutoConfiguration.java\n+++ b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringBootstrapCompilerAutoConfiguration.java\n@@ -44,7 +44,7 @@ public class SpringBootstrapCompilerAutoConfiguration extends CompilerAutoConfig\n \tpublic void applyDependencies(DependencyCustomizer dependencies) {\n \t\tdependencies.ifAnyMissingClasses(\n \t\t\t\t\"org.springframework.bootstrap.SpringApplication\").add(\n-\t\t\t\t\"org.springframework.bootstrap\", \"spring-bootstrap\", \"0.0.1-SNAPSHOT\");\n+\t\t\t\t\"org.springframework.bootstrap\", \"spring-bootstrap\", \"0.5.0.BUILD-SNAPSHOT\");\n \t\tdependencies.ifAnyResourcesPresent(\"logback.xml\").add(\"ch.qos.logback\",\n \t\t\t\t\"logback-classic\", \"1.0.7\");\n \t\tdependencies.ifNotAdded(\"cg.qos.logback\", \"logback-classic\")",
    "output": "Upgrade hardcoded bootstrap references to 0.5.0"
  },
  {
    "input": "diff --git a/spring-bootstrap-actuator/src/test/java/org/springframework/bootstrap/actuate/properties/ServerPropertiesTests.java b/spring-bootstrap-actuator/src/test/java/org/springframework/bootstrap/actuate/properties/ServerPropertiesTests.java\n--- a/spring-bootstrap-actuator/src/test/java/org/springframework/bootstrap/actuate/properties/ServerPropertiesTests.java\n+++ b/spring-bootstrap-actuator/src/test/java/org/springframework/bootstrap/actuate/properties/ServerPropertiesTests.java\n@@ -27,9 +27,8 @@\n \n /**\n  * Externalized configuration for server properties\n- * \n+ *\n  * @author Dave Syer\n- * \n  */\n public class ServerPropertiesTests {\n \n@@ -41,7 +40,7 @@ public void testAddressBinding() throws Exception {\n \t\tbinder.bind(new MutablePropertyValues(Collections.singletonMap(\"server.address\",\n \t\t\t\t\"127.0.0.1\")));\n \t\tassertFalse(binder.getBindingResult().hasErrors());\n-\t\tassertEquals(InetAddress.getLocalHost(), this.properties.getAddress());\n+\t\tassertEquals(InetAddress.getByName(\"127.0.0.1\"), this.properties.getAddress());\n \t}\n \n \t@Test",
    "output": "Fix broken ServerPropertiesTests on OSX\nFixed ServerPropertiesTests to use InetAddress.getByName(\"127.0.0.1\")\ninstead of InetAddress.getLocalHost()."
  },
  {
    "input": "diff --git a/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringBootstrapCompilerAutoConfiguration.java b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringBootstrapCompilerAutoConfiguration.java\n--- a/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringBootstrapCompilerAutoConfiguration.java\n+++ b/spring-bootstrap-cli/src/main/java/org/springframework/bootstrap/cli/compiler/autoconfigure/SpringBootstrapCompilerAutoConfiguration.java\n@@ -71,6 +71,7 @@ public void applyImports(ImportCustomizer imports) {\n \t\t\t\t\"org.springframework.context.annotation.Profile\",\n \t\t\t\t\"org.springframework.context.annotation.Scope\",\n \t\t\t\t\"org.springframework.context.annotation.Configuration\",\n+\t\t\t\t\"org.springframework.context.annotation.ComponentScan\",\n \t\t\t\t\"org.springframework.context.annotation.Bean\",\n \t\t\t\t\"org.springframework.context.ApplicationContext\",\n \t\t\t\t\"org.springframework.context.MessageSource\",",
    "output": "Add @CopmonentScan to default imports in CLI"
  },
  {
    "input": "diff --git a/spring-bootstrap-service/src/main/java/org/springframework/bootstrap/service/shutdown/ShutdownEndpoint.java b/spring-bootstrap-service/src/main/java/org/springframework/bootstrap/service/shutdown/ShutdownEndpoint.java\n--- a/spring-bootstrap-service/src/main/java/org/springframework/bootstrap/service/shutdown/ShutdownEndpoint.java\n+++ b/spring-bootstrap-service/src/main/java/org/springframework/bootstrap/service/shutdown/ShutdownEndpoint.java\n@@ -48,10 +48,13 @@ public class ShutdownEndpoint implements ApplicationContextAware,\n \t@Autowired\n \tprivate ContainerProperties configuration = new ContainerProperties();\n \n+\tprivate boolean shuttingDown = false;\n+\n \t@RequestMapping(value = \"${endpoints.shutdown.path:/shutdown}\", method = RequestMethod.POST)\n \t@ResponseBody\n \tpublic Map<String, Object> shutdown() {\n \t\tif (this.configuration.isAllowShutdown()) {\n+\t\t\tthis.shuttingDown = true;\n \t\t\treturn Collections.<String, Object> singletonMap(\"message\",\n \t\t\t\t\t\"Shutting down, bye...\");\n \t\t} else {\n@@ -70,7 +73,8 @@ public void setApplicationContext(ApplicationContext context) throws BeansExcept\n \t@Override\n \tpublic void onApplicationEvent(ServletRequestHandledEvent event) {\n \n-\t\tif (this.context != null && this.configuration.isAllowShutdown()) {\n+\t\tif (this.context != null && this.configuration.isAllowShutdown()\n+\t\t\t\t&& this.shuttingDown) {\n \n \t\t\tnew Thread(new Runnable() {\n \t\t\t\t@Override",
    "output": "Fix service integration tests"
  }
]