[
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/content/comment/AbstractCommentService.java b/application/src/main/java/run/halo/app/content/comment/AbstractCommentService.java\n--- a/application/src/main/java/run/halo/app/content/comment/AbstractCommentService.java\n+++ b/application/src/main/java/run/halo/app/content/comment/AbstractCommentService.java\n@@ -28,7 +28,9 @@ public abstract class AbstractCommentService {\n         // Allow <s> tag, which is used for strikethrough\n         .addTags(\"s\")\n         // Allow <code> tag's class attribute, for syntax highlighting\n-        .addAttributes(\"code\", \"class\");\n+        .addAttributes(\"code\", \"class\")\n+        // Allow <a> tag's target attribute\n+        .addAttributes(\"a\", \"target\");\n \n     protected Mono<User> fetchCurrentUser() {\n         return ReactiveSecurityContextHolder.getContext()",
    "output": "Merge pull request #7695 from ruibaby/feat/comment-a-target\n\nAllow target attribute on <a> tags in comment sanitizer"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/content/comment/AbstractCommentService.java b/application/src/main/java/run/halo/app/content/comment/AbstractCommentService.java\n--- a/application/src/main/java/run/halo/app/content/comment/AbstractCommentService.java\n+++ b/application/src/main/java/run/halo/app/content/comment/AbstractCommentService.java\n@@ -24,7 +24,11 @@ public abstract class AbstractCommentService {\n     protected final ReactiveExtensionClient client;\n     protected final UserService userService;\n     protected final CounterService counterService;\n-    private final Safelist safelist = Safelist.relaxed();\n+    private final Safelist safelist = Safelist.relaxed()\n+        // Allow <s> tag, which is used for strikethrough\n+        .addTags(\"s\")\n+        // Allow <code> tag's class attribute, for syntax highlighting\n+        .addAttributes(\"code\", \"class\");\n \n     protected Mono<User> fetchCurrentUser() {\n         return ReactiveSecurityContextHolder.getContext()",
    "output": "Allow <s> tag and class attribute on <code> in comments (#7682)\n\n#### What type of PR is this?\r\n\r\n/area code\r\n/milestone 2.21.x\r\n/kind improvement\r\n\r\n#### What this PR does / why we need it:\r\n\r\nComments are allowed to contain `s` tags and `code` tags with class attributes for the following reasons:\r\n\r\n1. `s`: The comment component uses tiptap editor's [strikethrough extension](https://tiptap.dev/docs/editor/extensions/marks/strike#:~:text=while%20you%20type.-,Restrictions,-The%20extension%20will) which enforces the use of `s` tags for strikethrough text and cannot be changed.\r\n2. `code[class]`: Used for code highlighting (class=\"language-*\")\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/api/src/main/java/run/halo/app/extension/controller/DefaultController.java b/api/src/main/java/run/halo/app/extension/controller/DefaultController.java\n--- a/api/src/main/java/run/halo/app/extension/controller/DefaultController.java\n+++ b/api/src/main/java/run/halo/app/extension/controller/DefaultController.java\n@@ -135,6 +135,9 @@ public void start() {\n             return;\n         }\n         this.started = true;\n+        if (synchronizer != null) {\n+            synchronizer.start();\n+        }\n         log.info(\"Starting controller {}\", name);\n         IntStream.range(0, getWorkerCount())\n             .mapToObj(i -> new Worker())\n@@ -162,9 +165,6 @@ public String getName() {\n         @Override\n         public void run() {\n             log.info(\"Controller worker {} started\", this.name);\n-            if (synchronizer != null) {\n-                synchronizer.start();\n-            }\n             while (!isDisposed() && !Thread.currentThread().isInterrupted()) {\n                 try {\n                     var entry = queue.take();\n\ndiff --git a/api/src/test/java/run/halo/app/extension/controller/DefaultControllerTest.java b/api/src/test/java/run/halo/app/extension/controller/DefaultControllerTest.java\n--- a/api/src/test/java/run/halo/app/extension/controller/DefaultControllerTest.java\n+++ b/api/src/test/java/run/halo/app/extension/controller/DefaultControllerTest.java\n@@ -91,7 +91,7 @@ void shouldRunCorrectlyIfReconcilerReturnsNoReEnqueue() throws InterruptedExcept\n \n             controller.new Worker().run();\n \n-            verify(synchronizer, times(1)).start();\n+            verify(synchronizer, never()).start();\n             verify(queue, times(2)).take();\n             verify(queue, times(0)).add(any());\n             verify(queue, times(1)).done(any());\n@@ -109,7 +109,7 @@ void shouldRunCorrectlyIfReconcilerReturnsReEnqueue() throws InterruptedExceptio\n \n             controller.new Worker().run();\n \n-            verify(synchronizer, times(1)).start();\n+            verify(synchronizer, never()).start();\n             verify(queue, times(2)).take();\n             verify(queue, times(1)).done(any());\n             verify(queue, times(1)).add(argThat(de ->\n@@ -129,7 +129,7 @@ void shouldReRunIfReconcilerThrowException() throws InterruptedException {\n \n             controller.new Worker().run();\n \n-            verify(synchronizer, times(1)).start();\n+            verify(synchronizer, never()).start();\n             verify(queue, times(2)).take();\n             verify(queue, times(1)).done(any());\n             verify(queue, times(1)).add(argThat(de ->\n@@ -150,7 +150,7 @@ void canReRunIfReconcilerThrowRequeueException() throws InterruptedException {\n \n             controller.new Worker().run();\n \n-            verify(synchronizer).start();\n+            verify(synchronizer, never()).start();\n             verify(queue, times(2)).take();\n             verify(queue).done(any());\n             verify(queue).add(argThat(de ->\n@@ -171,7 +171,7 @@ void doNotReRunIfReconcilerThrowsRequeueExceptionWithoutRequeue()\n \n             controller.new Worker().run();\n \n-            verify(synchronizer).start();\n+            verify(synchronizer, never()).start();\n             verify(queue, times(2)).take();\n             verify(queue).done(any());\n \n@@ -190,7 +190,7 @@ void shouldSetMinRetryAfterWhenTakeZeroDelayedEntry() throws InterruptedExceptio\n \n             controller.new Worker().run();\n \n-            verify(synchronizer, times(1)).start();\n+            verify(synchronizer, never()).start();\n             verify(queue, times(2)).take();\n             verify(queue, times(1)).done(any());\n             verify(queue, times(1)).add(argThat(de ->\n@@ -211,7 +211,7 @@ void shouldSetMaxRetryAfterWhenTakeGreaterThanMaxRetryAfterDelayedEntry()\n \n             controller.new Worker().run();\n \n-            verify(synchronizer, times(1)).start();\n+            verify(synchronizer, never()).start();\n             verify(queue, times(2)).take();\n             verify(queue, times(1)).done(any());\n             verify(queue, times(1)).add(argThat(de ->\n@@ -262,6 +262,7 @@ void shouldStartCorrectly() {\n         assertTrue(controller.isStarted());\n         assertFalse(controller.isDisposed());\n \n+        verify(synchronizer).start();\n         verify(executor).execute(any(Runnable.class));\n     }\n ",
    "output": "Fix the problem that synchronizer might be started multiple times (#7642)\n\n#### What type of PR is this?\n\n/kind bug\n/area core\n/milestone 2.21.x\n\n#### What this PR does / why we need it:\n\nThis PR fixes the problem of starting synchronizer multiple times while configuring multiple workers.\n\n#### Does this PR introduce a user-facing change?\n\n```release-note\nNone\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/core/endpoint/console/PostEndpoint.java b/application/src/main/java/run/halo/app/core/endpoint/console/PostEndpoint.java\n--- a/application/src/main/java/run/halo/app/core/endpoint/console/PostEndpoint.java\n+++ b/application/src/main/java/run/halo/app/core/endpoint/console/PostEndpoint.java\n@@ -213,7 +213,7 @@ public RouterFunction<ServerResponse> endpoint() {\n             )\n             .PUT(\"posts/{name}/unpublish\", this::unpublishPost,\n                 builder -> builder.operationId(\"UnpublishPost\")\n-                    .description(\"Publish a post.\")\n+                    .description(\"UnPublish a post.\")\n                     .tag(tag)\n                     .parameter(parameterBuilder().name(\"name\")\n                         .in(ParameterIn.PATH)",
    "output": "Fix typo for UnpublishPost api description (#7628)\n\nCo-authored-by: pengxiaoyu <pengxiaoyu@shengqugames.com>"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/infra/config/WebFluxConfig.java b/application/src/main/java/run/halo/app/infra/config/WebFluxConfig.java\n--- a/application/src/main/java/run/halo/app/infra/config/WebFluxConfig.java\n+++ b/application/src/main/java/run/halo/app/infra/config/WebFluxConfig.java\n@@ -25,6 +25,7 @@\n import org.springframework.http.codec.json.Jackson2JsonEncoder;\n import org.springframework.lang.NonNull;\n import org.springframework.web.filter.reactive.ServerWebExchangeContextFilter;\n+import org.springframework.web.filter.reactive.UrlHandlerFilter;\n import org.springframework.web.reactive.config.ResourceHandlerRegistration;\n import org.springframework.web.reactive.config.ResourceHandlerRegistry;\n import org.springframework.web.reactive.config.WebFluxConfigurer;\n@@ -267,4 +268,11 @@ ServerWebExchangeContextFilter serverWebExchangeContextFilter() {\n         return new ServerWebExchangeContextFilter();\n     }\n \n+    @Bean\n+    @Order(Ordered.HIGHEST_PRECEDENCE)\n+    UrlHandlerFilter urlHandlerFilter() {\n+        return UrlHandlerFilter\n+            .trailingSlashHandler(\"/**\").mutateRequest()\n+            .build();\n+    }\n }\n\ndiff --git a/application/src/test/java/run/halo/app/config/WebFluxConfigTest.java b/application/src/test/java/run/halo/app/config/WebFluxConfigTest.java\n--- a/application/src/test/java/run/halo/app/config/WebFluxConfigTest.java\n+++ b/application/src/test/java/run/halo/app/config/WebFluxConfigTest.java\n@@ -42,7 +42,8 @@\n     SpringBootTest.WebEnvironment.RANDOM_PORT)\n @Import({\n     WebFluxConfigTest.WebSocketSupportTest.TestWebSocketConfiguration.class,\n-    WebFluxConfigTest.ServerWebExchangeContextFilterTest.TestConfig.class\n+    WebFluxConfigTest.ServerWebExchangeContextFilterTest.TestConfig.class,\n+    WebFluxConfigTest.UrlHandlerFilterTest.TestConfig.class\n })\n @AutoConfigureWebTestClient\n class WebFluxConfigTest {\n@@ -206,4 +207,29 @@ void shouldGetExchangeFromContextView() {\n         }\n \n     }\n+\n+    @Nested\n+    class UrlHandlerFilterTest {\n+\n+        @TestConfiguration\n+        static class TestConfig {\n+\n+            @Bean\n+            RouterFunction<ServerResponse> urlHandlerFilterTestRoute() {\n+                return RouterFunctions.route()\n+                    .GET(\"/fake\", request -> ServerResponse.ok().bodyValue(\"ok\"))\n+                    .build();\n+            }\n+\n+        }\n+\n+        @Test\n+        void shouldHandleUrlWithTrailingSlash() {\n+            webClient.get().uri(\"/fake/\")\n+                .exchange()\n+                .expectStatus().isOk()\n+                .expectBody(String.class).isEqualTo(\"ok\");\n+        }\n+\n+    }\n }\n\\ No newline at end of file",
    "output": "Add support for rewriting URL with trailing slash (#7559)"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/infra/SystemConfigChangedEvent.java b/application/src/main/java/run/halo/app/infra/SystemConfigChangedEvent.java\n--- a/application/src/main/java/run/halo/app/infra/SystemConfigChangedEvent.java\n+++ b/application/src/main/java/run/halo/app/infra/SystemConfigChangedEvent.java\n@@ -0,0 +1,17 @@\n+package run.halo.app.infra;\n+\n+import org.springframework.context.ApplicationEvent;\n+\n+/**\n+ * Event that is published when the system configuration changes.\n+ *\n+ * @author johnniang\n+ * @since 2.21.0\n+ */\n+public class SystemConfigChangedEvent extends ApplicationEvent {\n+\n+    public SystemConfigChangedEvent(Object source) {\n+        super(source);\n+    }\n+\n+}\n\ndiff --git a/application/src/main/java/run/halo/app/infra/SystemConfigurableEnvironmentFetcher.java b/application/src/main/java/run/halo/app/infra/SystemConfigurableEnvironmentFetcher.java\n--- a/application/src/main/java/run/halo/app/infra/SystemConfigurableEnvironmentFetcher.java\n+++ b/application/src/main/java/run/halo/app/infra/SystemConfigurableEnvironmentFetcher.java\n@@ -12,6 +12,7 @@\n import java.util.Optional;\n import java.util.concurrent.atomic.AtomicReference;\n import org.apache.commons.lang3.StringUtils;\n+import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.core.convert.ConversionService;\n import org.springframework.lang.NonNull;\n import org.springframework.stereotype.Component;\n@@ -39,12 +40,15 @@\n public class SystemConfigurableEnvironmentFetcher implements Reconciler<Reconciler.Request> {\n     private final ReactiveExtensionClient extensionClient;\n     private final ConversionService conversionService;\n+    private final ApplicationEventPublisher eventPublisher;\n     private final AtomicReference<ConfigMap> configMapCache = new AtomicReference<>();\n \n     public SystemConfigurableEnvironmentFetcher(ReactiveExtensionClient extensionClient,\n-        ConversionService conversionService) {\n+        ConversionService conversionService,\n+        ApplicationEventPublisher eventPublisher) {\n         this.extensionClient = extensionClient;\n         this.conversionService = conversionService;\n+        this.eventPublisher = eventPublisher;\n     }\n \n     public <T> Mono<T> fetch(String key, Class<T> type) {\n@@ -172,6 +176,7 @@ public Result reconcile(Request request) {\n             .switchIfEmpty(Mono.error(new IllegalStateException(\"System configMap not found.\")))\n             .doOnNext(configMapCache::set)\n             .block();\n+        eventPublisher.publishEvent(new SystemConfigChangedEvent(this));\n         return Result.doNotRetry();\n     }\n \n\ndiff --git a/application/src/test/java/run/halo/app/infra/SystemConfigurableEnvironmentFetcherTest.java b/application/src/test/java/run/halo/app/infra/SystemConfigurableEnvironmentFetcherTest.java\n--- a/application/src/test/java/run/halo/app/infra/SystemConfigurableEnvironmentFetcherTest.java\n+++ b/application/src/test/java/run/halo/app/infra/SystemConfigurableEnvironmentFetcherTest.java\n@@ -1,8 +1,11 @@\n package run.halo.app.infra;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.ArgumentMatchers.isA;\n import static org.mockito.Mockito.lenient;\n+import static org.mockito.Mockito.verify;\n \n import java.util.LinkedHashMap;\n import org.json.JSONException;\n@@ -13,11 +16,13 @@\n import org.mockito.Mock;\n import org.mockito.junit.jupiter.MockitoExtension;\n import org.skyscreamer.jsonassert.JSONAssert;\n+import org.springframework.context.ApplicationEventPublisher;\n import reactor.core.publisher.Mono;\n import reactor.test.StepVerifier;\n import run.halo.app.extension.ConfigMap;\n import run.halo.app.extension.Metadata;\n import run.halo.app.extension.ReactiveExtensionClient;\n+import run.halo.app.extension.controller.Reconciler;\n import run.halo.app.infra.utils.JsonUtils;\n \n /**\n@@ -32,6 +37,9 @@ class SystemConfigurableEnvironmentFetcherTest {\n     @Mock\n     private ReactiveExtensionClient client;\n \n+    @Mock\n+    ApplicationEventPublisher eventPublisher;\n+\n     @InjectMocks\n     private SystemConfigurableEnvironmentFetcher environmentFetcher;\n \n@@ -43,6 +51,13 @@ void setUp() {\n             .thenReturn(Mono.just(system()));\n     }\n \n+    @Test\n+    void shouldPublishSystemConfigChangedEvent() {\n+        var result = environmentFetcher.reconcile(new Reconciler.Request(\"system\"));\n+        assertTrue(result == null || !result.reEnqueue());\n+        verify(eventPublisher).publishEvent(isA(SystemConfigChangedEvent.class));\n+    }\n+\n     @Test\n     void loadConfigMap() {\n         environmentFetcher.loadConfigMap()",
    "output": "Add a system config changed event (#7502)"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/infra/SystemConfigChangedEvent.java b/application/src/main/java/run/halo/app/infra/SystemConfigChangedEvent.java\n--- a/application/src/main/java/run/halo/app/infra/SystemConfigChangedEvent.java\n+++ b/application/src/main/java/run/halo/app/infra/SystemConfigChangedEvent.java\n@@ -0,0 +1,17 @@\n+package run.halo.app.infra;\n+\n+import org.springframework.context.ApplicationEvent;\n+\n+/**\n+ * Event that is published when the system configuration changes.\n+ *\n+ * @author johnniang\n+ * @since 2.21.0\n+ */\n+public class SystemConfigChangedEvent extends ApplicationEvent {\n+\n+    public SystemConfigChangedEvent(Object source) {\n+        super(source);\n+    }\n+\n+}\n\ndiff --git a/application/src/main/java/run/halo/app/infra/SystemConfigurableEnvironmentFetcher.java b/application/src/main/java/run/halo/app/infra/SystemConfigurableEnvironmentFetcher.java\n--- a/application/src/main/java/run/halo/app/infra/SystemConfigurableEnvironmentFetcher.java\n+++ b/application/src/main/java/run/halo/app/infra/SystemConfigurableEnvironmentFetcher.java\n@@ -12,6 +12,7 @@\n import java.util.Optional;\n import java.util.concurrent.atomic.AtomicReference;\n import org.apache.commons.lang3.StringUtils;\n+import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.core.convert.ConversionService;\n import org.springframework.lang.NonNull;\n import org.springframework.stereotype.Component;\n@@ -39,12 +40,15 @@\n public class SystemConfigurableEnvironmentFetcher implements Reconciler<Reconciler.Request> {\n     private final ReactiveExtensionClient extensionClient;\n     private final ConversionService conversionService;\n+    private final ApplicationEventPublisher eventPublisher;\n     private final AtomicReference<ConfigMap> configMapCache = new AtomicReference<>();\n \n     public SystemConfigurableEnvironmentFetcher(ReactiveExtensionClient extensionClient,\n-        ConversionService conversionService) {\n+        ConversionService conversionService,\n+        ApplicationEventPublisher eventPublisher) {\n         this.extensionClient = extensionClient;\n         this.conversionService = conversionService;\n+        this.eventPublisher = eventPublisher;\n     }\n \n     public <T> Mono<T> fetch(String key, Class<T> type) {\n@@ -172,6 +176,7 @@ public Result reconcile(Request request) {\n             .switchIfEmpty(Mono.error(new IllegalStateException(\"System configMap not found.\")))\n             .doOnNext(configMapCache::set)\n             .block();\n+        eventPublisher.publishEvent(new SystemConfigChangedEvent(this));\n         return Result.doNotRetry();\n     }\n \n\ndiff --git a/application/src/test/java/run/halo/app/infra/SystemConfigurableEnvironmentFetcherTest.java b/application/src/test/java/run/halo/app/infra/SystemConfigurableEnvironmentFetcherTest.java\n--- a/application/src/test/java/run/halo/app/infra/SystemConfigurableEnvironmentFetcherTest.java\n+++ b/application/src/test/java/run/halo/app/infra/SystemConfigurableEnvironmentFetcherTest.java\n@@ -1,8 +1,11 @@\n package run.halo.app.infra;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.ArgumentMatchers.isA;\n import static org.mockito.Mockito.lenient;\n+import static org.mockito.Mockito.verify;\n \n import java.util.LinkedHashMap;\n import org.json.JSONException;\n@@ -13,11 +16,13 @@\n import org.mockito.Mock;\n import org.mockito.junit.jupiter.MockitoExtension;\n import org.skyscreamer.jsonassert.JSONAssert;\n+import org.springframework.context.ApplicationEventPublisher;\n import reactor.core.publisher.Mono;\n import reactor.test.StepVerifier;\n import run.halo.app.extension.ConfigMap;\n import run.halo.app.extension.Metadata;\n import run.halo.app.extension.ReactiveExtensionClient;\n+import run.halo.app.extension.controller.Reconciler;\n import run.halo.app.infra.utils.JsonUtils;\n \n /**\n@@ -32,6 +37,9 @@ class SystemConfigurableEnvironmentFetcherTest {\n     @Mock\n     private ReactiveExtensionClient client;\n \n+    @Mock\n+    ApplicationEventPublisher eventPublisher;\n+\n     @InjectMocks\n     private SystemConfigurableEnvironmentFetcher environmentFetcher;\n \n@@ -43,6 +51,13 @@ void setUp() {\n             .thenReturn(Mono.just(system()));\n     }\n \n+    @Test\n+    void shouldPublishSystemConfigChangedEvent() {\n+        var result = environmentFetcher.reconcile(new Reconciler.Request(\"system\"));\n+        assertTrue(result == null || !result.reEnqueue());\n+        verify(eventPublisher).publishEvent(isA(SystemConfigChangedEvent.class));\n+    }\n+\n     @Test\n     void loadConfigMap() {\n         environmentFetcher.loadConfigMap()",
    "output": "Add a system config changed event"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/search/lucene/LuceneSearchEngine.java b/application/src/main/java/run/halo/app/search/lucene/LuceneSearchEngine.java\n--- a/application/src/main/java/run/halo/app/search/lucene/LuceneSearchEngine.java\n+++ b/application/src/main/java/run/halo/app/search/lucene/LuceneSearchEngine.java\n@@ -273,7 +273,7 @@ public SearchResult search(SearchOption option) {\n             }\n             var result = new SearchResult();\n             result.setHits(haloDocs);\n-            result.setTotal(hits.totalHits.value);\n+            result.setTotal(hits.totalHits.value());\n             result.setKeyword(keyword);\n             result.setLimit(limit);\n             result.setProcessingTimeMillis(stopWatch.getTotalTimeMillis());",
    "output": "Merge pull request #7476 from halo-dev/chore/upgrade-to-lucene-10.2.1\n\nBump Lucene to 10.2.1"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/search/lucene/LuceneSearchEngine.java b/application/src/main/java/run/halo/app/search/lucene/LuceneSearchEngine.java\n--- a/application/src/main/java/run/halo/app/search/lucene/LuceneSearchEngine.java\n+++ b/application/src/main/java/run/halo/app/search/lucene/LuceneSearchEngine.java\n@@ -273,7 +273,7 @@ public SearchResult search(SearchOption option) {\n             }\n             var result = new SearchResult();\n             result.setHits(haloDocs);\n-            result.setTotal(hits.totalHits.value);\n+            result.setTotal(hits.totalHits.value());\n             result.setKeyword(keyword);\n             result.setLimit(limit);\n             result.setProcessingTimeMillis(stopWatch.getTotalTimeMillis());",
    "output": "Bump Lucene to 10.2.1"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/infra/SystemConfigFirstExternalUrlSupplier.java b/application/src/main/java/run/halo/app/infra/SystemConfigFirstExternalUrlSupplier.java\n--- a/application/src/main/java/run/halo/app/infra/SystemConfigFirstExternalUrlSupplier.java\n+++ b/application/src/main/java/run/halo/app/infra/SystemConfigFirstExternalUrlSupplier.java\n@@ -63,13 +63,12 @@ void onExtensionInitialized(ExtensionInitializedEvent ignored) {\n     @Override\n     public URI get() {\n         try {\n-            if (externalUrl != null) {\n-                return externalUrl.toURI();\n-            }\n             if (!haloProperties.isUseAbsolutePermalink()) {\n                 return URI.create(getBasePath());\n             }\n-\n+            if (externalUrl != null) {\n+                return externalUrl.toURI();\n+            }\n             return haloProperties.getExternalUrl().toURI();\n         } catch (URISyntaxException e) {\n             throw Exceptions.propagate(e);\n\ndiff --git a/application/src/test/java/run/halo/app/infra/SystemConfigFirstExternalUrlSupplierTest.java b/application/src/test/java/run/halo/app/infra/SystemConfigFirstExternalUrlSupplierTest.java\n--- a/application/src/test/java/run/halo/app/infra/SystemConfigFirstExternalUrlSupplierTest.java\n+++ b/application/src/test/java/run/halo/app/infra/SystemConfigFirstExternalUrlSupplierTest.java\n@@ -55,7 +55,7 @@ void getURIWhenUsingAbsolutePermalink() throws MalformedURLException {\n         }\n \n         @Test\n-        void getURIWhenBasePathSetAndNotUsingAbsolutePermalink() throws MalformedURLException {\n+        void getURIWhenBasePathSetAndNotUsingAbsolutePermalink() {\n             when(webFluxProperties.getBasePath()).thenReturn(\"/blog\");\n             when(haloProperties.isUseAbsolutePermalink()).thenReturn(false);\n \n@@ -137,10 +137,11 @@ void getRaw() throws MalformedURLException {\n     class SystemConfigSupplier {\n \n         @Test\n-        void shouldGetUrlCorrectly() throws Exception {\n+        void shouldGetUrlWhenUseAbsolutePermalink() throws Exception {\n             var basic = new SystemSetting.Basic();\n             basic.setExternalUrl(\"https://www.halo.run\");\n             when(systemConfigFetcher.getBasic()).thenReturn(Mono.just(basic));\n+            when(haloProperties.isUseAbsolutePermalink()).thenReturn(true);\n             externalUrl.onExtensionInitialized(null);\n             assertEquals(URI.create(\"https://www.halo.run\").toURL(), externalUrl.getRaw());\n             assertEquals(URI.create(\"https://www.halo.run\"), externalUrl.get());\n@@ -150,6 +151,22 @@ void shouldGetUrlCorrectly() throws Exception {\n                 externalUrl.getURL(mockRequest));\n         }\n \n+        @Test\n+        void shouldGetUrlWhenNotUsingAbsolutePermalink() throws MalformedURLException {\n+            var basic = new SystemSetting.Basic();\n+            basic.setExternalUrl(\"https://www.halo.run\");\n+            when(systemConfigFetcher.getBasic()).thenReturn(Mono.just(basic));\n+            when(haloProperties.isUseAbsolutePermalink()).thenReturn(false);\n+            when(webFluxProperties.getBasePath()).thenReturn(\"/fake\");\n+            externalUrl.onExtensionInitialized(null);\n+\n+            assertEquals(URI.create(\"https://www.halo.run\").toURL(), externalUrl.getRaw());\n+            assertEquals(URI.create(\"/fake\"), externalUrl.get());\n+            var mockRequest = mock(HttpRequest.class);\n+            assertEquals(URI.create(\"https://www.halo.run\").toURL(),\n+                externalUrl.getURL(mockRequest));\n+        }\n+\n     }\n \n }\n\\ No newline at end of file",
    "output": "Merge branch 'main' into chore/remove-deprecated-code"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/infra/SystemConfigFirstExternalUrlSupplier.java b/application/src/main/java/run/halo/app/infra/SystemConfigFirstExternalUrlSupplier.java\n--- a/application/src/main/java/run/halo/app/infra/SystemConfigFirstExternalUrlSupplier.java\n+++ b/application/src/main/java/run/halo/app/infra/SystemConfigFirstExternalUrlSupplier.java\n@@ -63,13 +63,12 @@ void onExtensionInitialized(ExtensionInitializedEvent ignored) {\n     @Override\n     public URI get() {\n         try {\n-            if (externalUrl != null) {\n-                return externalUrl.toURI();\n-            }\n             if (!haloProperties.isUseAbsolutePermalink()) {\n                 return URI.create(getBasePath());\n             }\n-\n+            if (externalUrl != null) {\n+                return externalUrl.toURI();\n+            }\n             return haloProperties.getExternalUrl().toURI();\n         } catch (URISyntaxException e) {\n             throw Exceptions.propagate(e);\n\ndiff --git a/application/src/test/java/run/halo/app/infra/SystemConfigFirstExternalUrlSupplierTest.java b/application/src/test/java/run/halo/app/infra/SystemConfigFirstExternalUrlSupplierTest.java\n--- a/application/src/test/java/run/halo/app/infra/SystemConfigFirstExternalUrlSupplierTest.java\n+++ b/application/src/test/java/run/halo/app/infra/SystemConfigFirstExternalUrlSupplierTest.java\n@@ -55,7 +55,7 @@ void getURIWhenUsingAbsolutePermalink() throws MalformedURLException {\n         }\n \n         @Test\n-        void getURIWhenBasePathSetAndNotUsingAbsolutePermalink() throws MalformedURLException {\n+        void getURIWhenBasePathSetAndNotUsingAbsolutePermalink() {\n             when(webFluxProperties.getBasePath()).thenReturn(\"/blog\");\n             when(haloProperties.isUseAbsolutePermalink()).thenReturn(false);\n \n@@ -137,10 +137,11 @@ void getRaw() throws MalformedURLException {\n     class SystemConfigSupplier {\n \n         @Test\n-        void shouldGetUrlCorrectly() throws Exception {\n+        void shouldGetUrlWhenUseAbsolutePermalink() throws Exception {\n             var basic = new SystemSetting.Basic();\n             basic.setExternalUrl(\"https://www.halo.run\");\n             when(systemConfigFetcher.getBasic()).thenReturn(Mono.just(basic));\n+            when(haloProperties.isUseAbsolutePermalink()).thenReturn(true);\n             externalUrl.onExtensionInitialized(null);\n             assertEquals(URI.create(\"https://www.halo.run\").toURL(), externalUrl.getRaw());\n             assertEquals(URI.create(\"https://www.halo.run\"), externalUrl.get());\n@@ -150,6 +151,22 @@ void shouldGetUrlCorrectly() throws Exception {\n                 externalUrl.getURL(mockRequest));\n         }\n \n+        @Test\n+        void shouldGetUrlWhenNotUsingAbsolutePermalink() throws MalformedURLException {\n+            var basic = new SystemSetting.Basic();\n+            basic.setExternalUrl(\"https://www.halo.run\");\n+            when(systemConfigFetcher.getBasic()).thenReturn(Mono.just(basic));\n+            when(haloProperties.isUseAbsolutePermalink()).thenReturn(false);\n+            when(webFluxProperties.getBasePath()).thenReturn(\"/fake\");\n+            externalUrl.onExtensionInitialized(null);\n+\n+            assertEquals(URI.create(\"https://www.halo.run\").toURL(), externalUrl.getRaw());\n+            assertEquals(URI.create(\"/fake\"), externalUrl.get());\n+            var mockRequest = mock(HttpRequest.class);\n+            assertEquals(URI.create(\"https://www.halo.run\").toURL(),\n+                externalUrl.getURL(mockRequest));\n+        }\n+\n     }\n \n }\n\\ No newline at end of file",
    "output": "Add support back for using relative permalink (#7475)\n\n#### What type of PR is this?\n\n/kind bug\n/area core\n/milestone 2.21.x\n\n#### What this PR does / why we need it:\n\nThis PR fixes the problem of not working for relative permalink caused by <https://github.com/halo-dev/halo/pull/7459>.\n\n#### Special notes for your reviewer:\n\n1. Try to start Halo instance with `halo.use-absolute-permalink=false` and check the permalinks of posts and attachments.\n1. Try to start Halo instance with `halo.use-absolute-permalink=true` and check the permalinks of posts and attachments.\n\n#### Does this PR introduce a user-facing change?\n\n```release-note\nNone\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/security/LogoutSecurityConfigurer.java b/application/src/main/java/run/halo/app/security/LogoutSecurityConfigurer.java\n--- a/application/src/main/java/run/halo/app/security/LogoutSecurityConfigurer.java\n+++ b/application/src/main/java/run/halo/app/security/LogoutSecurityConfigurer.java\n@@ -3,6 +3,7 @@\n import static run.halo.app.security.authentication.WebExchangeMatchers.ignoringMediaTypeAll;\n \n import java.net.URI;\n+import java.util.ArrayList;\n import java.util.Map;\n import lombok.RequiredArgsConstructor;\n import org.springframework.context.ApplicationContext;\n@@ -19,8 +20,10 @@\n import org.springframework.security.web.server.ServerRedirectStrategy;\n import org.springframework.security.web.server.WebFilterExchange;\n import org.springframework.security.web.server.authentication.logout.DelegatingServerLogoutHandler;\n+import org.springframework.security.web.server.authentication.logout.SecurityContextServerLogoutHandler;\n import org.springframework.security.web.server.authentication.logout.ServerLogoutHandler;\n import org.springframework.security.web.server.authentication.logout.ServerLogoutSuccessHandler;\n+import org.springframework.security.web.server.context.ServerSecurityContextRepository;\n import org.springframework.security.web.server.savedrequest.ServerRequestCache;\n import org.springframework.security.web.server.savedrequest.WebSessionServerRequestCache;\n import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher;\n@@ -34,30 +37,42 @@\n import run.halo.app.core.user.service.UserService;\n import run.halo.app.infra.actuator.GlobalInfoService;\n import run.halo.app.security.authentication.SecurityConfigurer;\n-import run.halo.app.security.authentication.rememberme.RememberMeServices;\n import run.halo.app.theme.router.ModelConst;\n \n @Component\n @RequiredArgsConstructor\n @Order(0)\n-public class LogoutSecurityConfigurer implements SecurityConfigurer {\n-\n-    private final RememberMeServices rememberMeServices;\n+class LogoutSecurityConfigurer implements SecurityConfigurer {\n \n     private final ApplicationContext applicationContext;\n \n     private final UserLoginOrLogoutProcessing userLoginOrLogoutProcessing;\n \n     private final ServerRequestCache serverRequestCache = new HaloServerRequestCache();\n \n+    private final ServerSecurityContextRepository securityContextRepository;\n+\n     @Override\n     public void configure(ServerHttpSecurity http) {\n-        var serverLogoutHandlers = getLogoutHandlers();\n-        http.logout(\n-            logout -> logout.logoutSuccessHandler(new LogoutSuccessHandler(serverLogoutHandlers))\n+        http.logout(logout -> logout\n+            .logoutHandler(getLogoutHandler())\n+            .logoutSuccessHandler(new LogoutSuccessHandler())\n         );\n     }\n \n+    private ServerLogoutHandler getLogoutHandler() {\n+        var defaultLogoutHandler = new SecurityContextServerLogoutHandler();\n+        defaultLogoutHandler.setSecurityContextRepository(securityContextRepository);\n+        var logoutHandlers = new ArrayList<ServerLogoutHandler>();\n+        logoutHandlers.add(defaultLogoutHandler);\n+        applicationContext.getBeanProvider(ServerLogoutHandler.class)\n+            .forEach(logoutHandlers::add);\n+        if (logoutHandlers.size() == 1) {\n+            return logoutHandlers.getFirst();\n+        }\n+        return new DelegatingServerLogoutHandler(logoutHandlers);\n+    }\n+\n     @Bean\n     RouterFunction<ServerResponse> logoutPage(\n         UserService userService,\n@@ -93,25 +108,17 @@ RouterFunction<ServerResponse> logoutPage(\n     private class LogoutSuccessHandler implements ServerLogoutSuccessHandler {\n \n         private final ServerLogoutSuccessHandler defaultHandler;\n-        private final ServerLogoutHandler logoutHandler;\n \n-        public LogoutSuccessHandler(ServerLogoutHandler... logoutHandlers) {\n+        public LogoutSuccessHandler() {\n             var redirectHandler = new RequestCacheRedirectLogoutSuccessHandler();\n             redirectHandler.setRequestCache(serverRequestCache);\n             this.defaultHandler = redirectHandler;\n-            if (logoutHandlers.length == 1) {\n-                this.logoutHandler = logoutHandlers[0];\n-            } else {\n-                this.logoutHandler = new DelegatingServerLogoutHandler(logoutHandlers);\n-            }\n         }\n \n         @Override\n         public Mono<Void> onLogoutSuccess(WebFilterExchange exchange,\n             Authentication authentication) {\n-            return logoutHandler.logout(exchange, authentication)\n-                .then(rememberMeServices.loginFail(exchange.getExchange()))\n-                .then(userLoginOrLogoutProcessing.logoutProcessing(authentication.getName()))\n+            return userLoginOrLogoutProcessing.logoutProcessing(authentication.getName())\n                 .then(ignoringMediaTypeAll(MediaType.APPLICATION_JSON)\n                     .matches(exchange.getExchange())\n                     .filter(ServerWebExchangeMatcher.MatchResult::isMatch)\n@@ -127,11 +134,6 @@ public Mono<Void> onLogoutSuccess(WebFilterExchange exchange,\n         }\n     }\n \n-    private ServerLogoutHandler[] getLogoutHandlers() {\n-        return applicationContext.getBeansOfType(ServerLogoutHandler.class).values()\n-            .toArray(new ServerLogoutHandler[0]);\n-    }\n-\n     private static class RequestCacheRedirectLogoutSuccessHandler\n         implements ServerLogoutSuccessHandler {\n \n\ndiff --git a/application/src/main/java/run/halo/app/security/authentication/rememberme/TokenBasedRememberMeServices.java b/application/src/main/java/run/halo/app/security/authentication/rememberme/TokenBasedRememberMeServices.java\n--- a/application/src/main/java/run/halo/app/security/authentication/rememberme/TokenBasedRememberMeServices.java\n+++ b/application/src/main/java/run/halo/app/security/authentication/rememberme/TokenBasedRememberMeServices.java\n@@ -367,7 +367,7 @@ public Mono<Void> logout(WebFilterExchange exchange, Authentication authenticati\n             log.debug(\"Logout of user {}\", (authentication != null) ? authentication.getName()\n                 : \"Unknown\");\n         }\n-        return onLogout(exchange, authentication);\n+        return loginFail(exchange.getExchange()).then(onLogout(exchange, authentication));\n     }\n \n     protected Mono<Void> onLogout(WebFilterExchange exchange, Authentication authentication) {",
    "output": "Refactor logout handler (#7470)\n\n#### What type of PR is this?\n\n/kind cleanup\n/area core\n/milestone 2.21.x\n\n#### What this PR does / why we need it:\n\nThis PR corrects location of LogoutHandler instead of in LogoutSuccessHandler. LogoutHanadler should be invoked before LogoutSuccessHandler.\n\n#### Does this PR introduce a user-facing change?\n\n```release-note\nNone\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/infra/ExtensionResourceInitializer.java b/application/src/main/java/run/halo/app/infra/ExtensionResourceInitializer.java\n--- a/application/src/main/java/run/halo/app/infra/ExtensionResourceInitializer.java\n+++ b/application/src/main/java/run/halo/app/infra/ExtensionResourceInitializer.java\n@@ -89,10 +89,9 @@ public void start() {\n                         extension.getMetadata().getName());\n                 }\n             })\n-            .then(Mono.fromRunnable(\n-                () -> eventPublisher.publishEvent(new ExtensionInitializedEvent(this)))\n-            )\n+            .then()\n             .block(Duration.ofMinutes(1));\n+        eventPublisher.publishEvent(new ExtensionInitializedEvent(this));\n     }\n \n     @Override",
    "output": "Fix the problem of timeout on external URL initialization"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/infra/config/WebServerSecurityConfig.java b/application/src/main/java/run/halo/app/infra/config/WebServerSecurityConfig.java\n--- a/application/src/main/java/run/halo/app/infra/config/WebServerSecurityConfig.java\n+++ b/application/src/main/java/run/halo/app/infra/config/WebServerSecurityConfig.java\n@@ -64,7 +64,6 @@ SecurityWebFilterChain filterChain(ServerHttpSecurity http,\n             \"/uc/assets/**\",\n             \"/themes/{themeName}/assets/{*resourcePaths}\",\n             \"/plugins/{pluginName}/assets/**\",\n-            \"/upload/**\",\n             \"/webjars/**\",\n             \"/js/**\",\n             \"/styles/**\",",
    "output": "Make uploads resources protected (#7456)\n\n#### What type of PR is this?\r\n\r\n/kind improvement\r\n/area core\r\n/milestone 2.21.x\r\n\r\n#### What this PR does / why we need it:\r\n\r\nThis PR removes `/uploads/**` from static resources to make it protected by Halo security.\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/test/java/run/halo/app/content/ContentRequestTest.java b/application/src/test/java/run/halo/app/content/ContentRequestTest.java\n--- a/application/src/test/java/run/halo/app/content/ContentRequestTest.java\n+++ b/application/src/test/java/run/halo/app/content/ContentRequestTest.java\n@@ -42,10 +42,10 @@ void setUp() {\n     @Test\n     void toSnapshot() throws JSONException {\n         String expectedContentPath =\n-            \"<p>Four score and seven</p>\\n<p>years ago our fathers</p>\\n<br/>\\n<p>brought forth \"\n-                + \"on this continent</p>\\n\";\n+            \"<p>Four score and seven</p>\\\\n<p>years ago our fathers</p>\\\\n<br/>\\\\n<p>brought forth \"\n+                + \"on this continent</p>\\\\n\";\n         String expectedRawPatch =\n-            \"Four score and seven\\nyears ago our fathers\\n\\nbrought forth on this continent\\n\";\n+            \"Four score and seven\\\\nyears ago our fathers\\\\n\\\\nbrought forth on this continent\\\\n\";\n         Snapshot snapshot = contentRequest.toSnapshot();\n         snapshot.getMetadata().setName(\"7b149646-ac60-4a5c-98ee-78b2dd0631b2\");\n         JSONAssert.assertEquals(JsonUtils.objectToJson(snapshot),",
    "output": "Merge pull request #7455 from JohnNiang/chore/upgrade-json-assert\n\nUpgrade JSONAssert to 2.0-rc1"
  },
  {
    "input": "diff --git a/application/src/test/java/run/halo/app/content/ContentRequestTest.java b/application/src/test/java/run/halo/app/content/ContentRequestTest.java\n--- a/application/src/test/java/run/halo/app/content/ContentRequestTest.java\n+++ b/application/src/test/java/run/halo/app/content/ContentRequestTest.java\n@@ -42,10 +42,10 @@ void setUp() {\n     @Test\n     void toSnapshot() throws JSONException {\n         String expectedContentPath =\n-            \"<p>Four score and seven</p>\\n<p>years ago our fathers</p>\\n<br/>\\n<p>brought forth \"\n-                + \"on this continent</p>\\n\";\n+            \"<p>Four score and seven</p>\\\\n<p>years ago our fathers</p>\\\\n<br/>\\\\n<p>brought forth \"\n+                + \"on this continent</p>\\\\n\";\n         String expectedRawPatch =\n-            \"Four score and seven\\nyears ago our fathers\\n\\nbrought forth on this continent\\n\";\n+            \"Four score and seven\\\\nyears ago our fathers\\\\n\\\\nbrought forth on this continent\\\\n\";\n         Snapshot snapshot = contentRequest.toSnapshot();\n         snapshot.getMetadata().setName(\"7b149646-ac60-4a5c-98ee-78b2dd0631b2\");\n         JSONAssert.assertEquals(JsonUtils.objectToJson(snapshot),",
    "output": "Upgrade JSONAssert to 2.0-rc1"
  },
  {
    "input": "diff --git a/application/src/test/java/run/halo/app/infra/utils/FileTypeDetectUtilsTest.java b/application/src/test/java/run/halo/app/infra/utils/FileTypeDetectUtilsTest.java\n--- a/application/src/test/java/run/halo/app/infra/utils/FileTypeDetectUtilsTest.java\n+++ b/application/src/test/java/run/halo/app/infra/utils/FileTypeDetectUtilsTest.java\n@@ -36,7 +36,7 @@ void detectMimeTypeTest() throws IOException {\n     void detectMimeTypeWithNameTest() throws IOException {\n         var stream = getFileInputStream(\"classpath:file-type-detect/index.js\");\n         String mimeType = FileTypeDetectUtils.detectMimeType(stream, \"index.js\");\n-        assertThat(mimeType).isEqualTo(\"application/javascript\");\n+        assertThat(mimeType).isEqualTo(\"text/javascript\");\n \n         stream = getFileInputStream(\"classpath:file-type-detect/index.html\");\n         mimeType =\n\ndiff --git a/application/src/test/java/run/halo/app/theme/dialect/ContentTemplateHeadProcessorIntegrationTest.java b/application/src/test/java/run/halo/app/theme/dialect/ContentTemplateHeadProcessorIntegrationTest.java\n--- a/application/src/test/java/run/halo/app/theme/dialect/ContentTemplateHeadProcessorIntegrationTest.java\n+++ b/application/src/test/java/run/halo/app/theme/dialect/ContentTemplateHeadProcessorIntegrationTest.java\n@@ -12,6 +12,7 @@\n import java.util.Map;\n import java.util.Set;\n import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n@@ -106,11 +107,11 @@ void setUp() {\n             .thenReturn(Mono.empty());\n \n         lenient().when(applicationContext.getBeanProvider(ExtensionGetter.class))\n-                .thenAnswer(invocation -> {\n-                    var objectProvider = mock(ObjectProvider.class);\n-                    when(objectProvider.getIfUnique()).thenReturn(extensionGetter);\n-                    return objectProvider;\n-                });\n+            .thenAnswer(invocation -> {\n+                var objectProvider = mock(ObjectProvider.class);\n+                when(objectProvider.getIfUnique()).thenReturn(extensionGetter);\n+                return objectProvider;\n+            });\n         lenient().when(extensionGetter.getExtensions(TemplateHeadProcessor.class)).thenReturn(\n             Flux.fromIterable(map.values()).sort(AnnotationAwareOrderComparator.INSTANCE)\n         );\n@@ -145,7 +146,9 @@ void overrideGlobalMetaTest() {\n             2. global head meta is overridden by content head meta\n             3. but global head meta is not overridden by global seo meta\n          */\n-        assertThat(Jsoup.parse(result).html()).isEqualTo(\"\"\"\n+        var outputSettings = new Document.OutputSettings().prettyPrint(true);\n+        var actual = Jsoup.parse(result).outputSettings(outputSettings).html();\n+        var expected = Jsoup.parse(\"\"\"\n             <!doctype html>\n             <html lang=\"en\">\n              <head>\n@@ -155,10 +158,10 @@ void overrideGlobalMetaTest() {\n               <meta name=\"description\" content=\"post-description\">\n               <meta name=\"other\" content=\"post-other-meta\">\n              </head>\n-             <body>\n-              this is body\n-             </body>\n-            </html>\"\"\");\n+             <body>this is body</body>\n+            </html>\"\"\"\n+        ).outputSettings(outputSettings).html();\n+        assertThat(actual).isEqualTo(expected);\n     }\n \n     Map<String, String> mutableMetaMap(String nameValue, String contentValue) {",
    "output": "Merge pull request #7449 from JohnNiang/refactor/libs-versions\n\nRefactor dependencies and plugins with version catelog"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/core/endpoint/console/UserEndpoint.java b/application/src/main/java/run/halo/app/core/endpoint/console/UserEndpoint.java\n--- a/application/src/main/java/run/halo/app/core/endpoint/console/UserEndpoint.java\n+++ b/application/src/main/java/run/halo/app/core/endpoint/console/UserEndpoint.java\n@@ -724,6 +724,7 @@ public ListOptions toListOptions() {\n             Optional.ofNullable(getKeyword())\n                 .filter(StringUtils::isNotBlank)\n                 .ifPresent(keyword -> builder.andQuery(or(\n+                    equal(\"spec.email\", keyword),\n                     contains(\"spec.displayName\", keyword),\n                     equal(\"metadata.name\", keyword)\n                 )));",
    "output": "Merge branch 'main' into refactor/libs-versions"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/core/endpoint/console/UserEndpoint.java b/application/src/main/java/run/halo/app/core/endpoint/console/UserEndpoint.java\n--- a/application/src/main/java/run/halo/app/core/endpoint/console/UserEndpoint.java\n+++ b/application/src/main/java/run/halo/app/core/endpoint/console/UserEndpoint.java\n@@ -724,6 +724,7 @@ public ListOptions toListOptions() {\n             Optional.ofNullable(getKeyword())\n                 .filter(StringUtils::isNotBlank)\n                 .ifPresent(keyword -> builder.andQuery(or(\n+                    equal(\"spec.email\", keyword),\n                     contains(\"spec.displayName\", keyword),\n                     equal(\"metadata.name\", keyword)\n                 )));",
    "output": "Merge pull request #7441 from liuyiwuqing/added-search-for-users-by-email\n\nAdd support for querying users by email"
  },
  {
    "input": "diff --git a/application/src/test/java/run/halo/app/infra/utils/FileTypeDetectUtilsTest.java b/application/src/test/java/run/halo/app/infra/utils/FileTypeDetectUtilsTest.java\n--- a/application/src/test/java/run/halo/app/infra/utils/FileTypeDetectUtilsTest.java\n+++ b/application/src/test/java/run/halo/app/infra/utils/FileTypeDetectUtilsTest.java\n@@ -36,7 +36,7 @@ void detectMimeTypeTest() throws IOException {\n     void detectMimeTypeWithNameTest() throws IOException {\n         var stream = getFileInputStream(\"classpath:file-type-detect/index.js\");\n         String mimeType = FileTypeDetectUtils.detectMimeType(stream, \"index.js\");\n-        assertThat(mimeType).isEqualTo(\"application/javascript\");\n+        assertThat(mimeType).isEqualTo(\"text/javascript\");\n \n         stream = getFileInputStream(\"classpath:file-type-detect/index.html\");\n         mimeType =\n\ndiff --git a/application/src/test/java/run/halo/app/theme/dialect/ContentTemplateHeadProcessorIntegrationTest.java b/application/src/test/java/run/halo/app/theme/dialect/ContentTemplateHeadProcessorIntegrationTest.java\n--- a/application/src/test/java/run/halo/app/theme/dialect/ContentTemplateHeadProcessorIntegrationTest.java\n+++ b/application/src/test/java/run/halo/app/theme/dialect/ContentTemplateHeadProcessorIntegrationTest.java\n@@ -12,6 +12,7 @@\n import java.util.Map;\n import java.util.Set;\n import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n@@ -106,11 +107,11 @@ void setUp() {\n             .thenReturn(Mono.empty());\n \n         lenient().when(applicationContext.getBeanProvider(ExtensionGetter.class))\n-                .thenAnswer(invocation -> {\n-                    var objectProvider = mock(ObjectProvider.class);\n-                    when(objectProvider.getIfUnique()).thenReturn(extensionGetter);\n-                    return objectProvider;\n-                });\n+            .thenAnswer(invocation -> {\n+                var objectProvider = mock(ObjectProvider.class);\n+                when(objectProvider.getIfUnique()).thenReturn(extensionGetter);\n+                return objectProvider;\n+            });\n         lenient().when(extensionGetter.getExtensions(TemplateHeadProcessor.class)).thenReturn(\n             Flux.fromIterable(map.values()).sort(AnnotationAwareOrderComparator.INSTANCE)\n         );\n@@ -145,7 +146,9 @@ void overrideGlobalMetaTest() {\n             2. global head meta is overridden by content head meta\n             3. but global head meta is not overridden by global seo meta\n          */\n-        assertThat(Jsoup.parse(result).html()).isEqualTo(\"\"\"\n+        var outputSettings = new Document.OutputSettings().prettyPrint(true);\n+        var actual = Jsoup.parse(result).outputSettings(outputSettings).html();\n+        var expected = Jsoup.parse(\"\"\"\n             <!doctype html>\n             <html lang=\"en\">\n              <head>\n@@ -155,10 +158,10 @@ void overrideGlobalMetaTest() {\n               <meta name=\"description\" content=\"post-description\">\n               <meta name=\"other\" content=\"post-other-meta\">\n              </head>\n-             <body>\n-              this is body\n-             </body>\n-            </html>\"\"\");\n+             <body>this is body</body>\n+            </html>\"\"\"\n+        ).outputSettings(outputSettings).html();\n+        assertThat(actual).isEqualTo(expected);\n     }\n \n     Map<String, String> mutableMetaMap(String nameValue, String contentValue) {",
    "output": "Fix unit test due to dependency update"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/core/reconciler/PluginReconciler.java b/application/src/main/java/run/halo/app/core/reconciler/PluginReconciler.java\n--- a/application/src/main/java/run/halo/app/core/reconciler/PluginReconciler.java\n+++ b/application/src/main/java/run/halo/app/core/reconciler/PluginReconciler.java\n@@ -14,6 +14,8 @@\n \n import java.io.FileNotFoundException;\n import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n import java.net.MalformedURLException;\n import java.net.URISyntaxException;\n import java.net.URL;\n@@ -302,25 +304,34 @@ private Result enablePlugin(Plugin plugin) {\n             return Result.requeue(Duration.ofSeconds(1));\n         }\n \n+        PluginState pluginState;\n         try {\n-            var pluginState = pluginManager.startPlugin(pluginName);\n-            if (!PluginState.STARTED.equals(pluginState)) {\n-                throw new IllegalStateException(\"\"\"\n-                    Failed to start plugin %s(%s).\\\n-                    \"\"\".formatted(pluginName, pluginState));\n-            }\n+            pluginState = pluginManager.startPlugin(pluginName);\n         } catch (Throwable e) {\n             log.debug(\"Error occurred when starting plugin {}\", pluginName, e);\n+            var writer = new StringWriter();\n+            e.printStackTrace(new PrintWriter(writer));\n             conditions.addAndEvictFIFO(Condition.builder()\n                 .type(ConditionType.READY)\n                 .status(ConditionStatus.FALSE)\n                 .reason(ConditionReason.START_ERROR)\n-                .message(e.getMessage())\n+                .message(writer.toString())\n                 .lastTransitionTime(clock.instant())\n                 .build());\n             status.setPhase(Plugin.Phase.FAILED);\n             return Result.doNotRetry();\n         }\n+        if (!PluginState.STARTED.equals(pluginState)) {\n+            conditions.addAndEvictFIFO(Condition.builder()\n+                    .type(ConditionType.READY)\n+                    .status(ConditionStatus.FALSE)\n+                    .reason(ConditionReason.START_ERROR)\n+                    .message(\"Failed to start plugin \" + pluginName + \"(\" + pluginState + \").\")\n+                    .lastTransitionTime(clock.instant())\n+                .build());\n+            status.setPhase(Plugin.Phase.FAILED);\n+            return Result.doNotRetry();\n+        }\n \n         removeConditionBy(conditions, ConditionType.PROGRESSING);\n         status.setLastStartTime(clock.instant());",
    "output": "Merge pull request #7429 from JohnNiang/refactor/improve-failure-message-of-plugin\n\nShow stack trace while failing to start plugin"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/theme/router/ThemeCompositeRouterFunction.java b/application/src/main/java/run/halo/app/theme/router/ThemeCompositeRouterFunction.java\n--- a/application/src/main/java/run/halo/app/theme/router/ThemeCompositeRouterFunction.java\n+++ b/application/src/main/java/run/halo/app/theme/router/ThemeCompositeRouterFunction.java\n@@ -4,7 +4,6 @@\n import java.util.List;\n import java.util.stream.Collectors;\n import lombok.RequiredArgsConstructor;\n-import org.springframework.boot.context.event.ApplicationReadyEvent;\n import org.springframework.context.SmartLifecycle;\n import org.springframework.context.event.EventListener;\n import org.springframework.lang.NonNull;\n@@ -99,11 +98,6 @@ public void onPermalinkRuleChanged(PermalinkRuleChangedEvent event) {\n         this.cachedRouters = routerFunctions();\n     }\n \n-    @EventListener\n-    public void onApplicationStarted(ApplicationReadyEvent event) {\n-        this.cachedRouters = routerFunctions();\n-    }\n-\n     @Override\n     public void start() {\n         if (running) {\n\ndiff --git a/application/src/main/java/run/halo/app/theme/router/factories/PostRouteFactory.java b/application/src/main/java/run/halo/app/theme/router/factories/PostRouteFactory.java\n--- a/application/src/main/java/run/halo/app/theme/router/factories/PostRouteFactory.java\n+++ b/application/src/main/java/run/halo/app/theme/router/factories/PostRouteFactory.java\n@@ -6,14 +6,10 @@\n import static org.springframework.web.reactive.function.server.RequestPredicates.accept;\n import static run.halo.app.content.permalinks.PostPermalinkPolicy.DEFAULT_CATEGORY;\n \n-import com.google.common.cache.Cache;\n-import com.google.common.cache.CacheBuilder;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n-import java.util.concurrent.ExecutionException;\n-import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n import lombok.AllArgsConstructor;\n import lombok.Data;\n@@ -241,9 +237,6 @@ static Map<String, String> mergedVariables(ServerRequest request) {\n     @Getter\n     static class PatternParser {\n         private static final Pattern PATTERN_COMPILE = Pattern.compile(\"([^&?]*)=\\\\{(.*?)\\\\}(&|$)\");\n-        private static final Cache<String, Matcher> MATCHER_CACHE = CacheBuilder.newBuilder()\n-            .maximumSize(5)\n-            .build();\n \n         private final String pattern;\n         private String paramName;\n@@ -252,7 +245,7 @@ static class PatternParser {\n \n         PatternParser(String pattern) {\n             this.pattern = pattern;\n-            Matcher matcher = patternToMatcher(pattern);\n+            var matcher = PATTERN_COMPILE.matcher(pattern);\n             if (matcher.find()) {\n                 this.paramName = matcher.group(1);\n                 this.placeholderName = matcher.group(2);\n@@ -262,14 +255,6 @@ static class PatternParser {\n             }\n         }\n \n-        Matcher patternToMatcher(String pattern) {\n-            try {\n-                return MATCHER_CACHE.get(pattern, () -> PATTERN_COMPILE.matcher(pattern));\n-            } catch (ExecutionException e) {\n-                throw new RuntimeException(e);\n-            }\n-        }\n-\n         RequestPredicate toRequestPredicate() {\n             if (!this.isQueryParamPattern) {\n                 throw new IllegalStateException(\"Not a query param pattern: \" + pattern);\n\ndiff --git a/application/src/test/java/run/halo/app/theme/router/factories/PostRouteFactoryTest.java b/application/src/test/java/run/halo/app/theme/router/factories/PostRouteFactoryTest.java\n--- a/application/src/test/java/run/halo/app/theme/router/factories/PostRouteFactoryTest.java\n+++ b/application/src/test/java/run/halo/app/theme/router/factories/PostRouteFactoryTest.java\n@@ -7,6 +7,7 @@\n \n import java.util.Locale;\n import java.util.Map;\n+import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n import org.mockito.InjectMocks;\n@@ -66,6 +67,14 @@ class PostRouteFactoryTest extends RouteFactoryTestSuite {\n     @InjectMocks\n     private PostRouteFactory postRouteFactory;\n \n+    @Test\n+    void shouldBeSameResultWhenParsePattenMultiply() {\n+        var parser = new PostRouteFactory.PatternParser(\"/?p={slug}\");\n+        Assertions.assertTrue(parser.isQueryParamPattern());\n+        parser = new PostRouteFactory.PatternParser(\"/?p={slug}\");\n+        Assertions.assertTrue(parser.isQueryParamPattern());\n+    }\n+\n     @Test\n     void create() {\n         Post post = TestPost.postV1();",
    "output": "Merge pull request #7430 from JohnNiang/bug/cannot-access-post-page-with-specific-pattern\n\nRemove wrong cache of pattern matchers"
  },
  {
    "input": "diff --git a/api/src/main/java/run/halo/app/theme/finders/Finder.java b/api/src/main/java/run/halo/app/theme/finders/Finder.java\n--- a/api/src/main/java/run/halo/app/theme/finders/Finder.java\n+++ b/api/src/main/java/run/halo/app/theme/finders/Finder.java\n@@ -4,6 +4,7 @@\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n+import org.springframework.core.annotation.AliasFor;\n import org.springframework.stereotype.Service;\n \n /**\n@@ -22,5 +23,6 @@\n      *\n      * @return variable name, class simple name if not specified\n      */\n+    @AliasFor(annotation = Service.class)\n     String value() default \"\";\n }\n\\ No newline at end of file",
    "output": "Merge branch 'main' into refactor/improve-failure-message-of-plugin"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/theme/router/ThemeCompositeRouterFunction.java b/application/src/main/java/run/halo/app/theme/router/ThemeCompositeRouterFunction.java\n--- a/application/src/main/java/run/halo/app/theme/router/ThemeCompositeRouterFunction.java\n+++ b/application/src/main/java/run/halo/app/theme/router/ThemeCompositeRouterFunction.java\n@@ -4,7 +4,6 @@\n import java.util.List;\n import java.util.stream.Collectors;\n import lombok.RequiredArgsConstructor;\n-import org.springframework.boot.context.event.ApplicationReadyEvent;\n import org.springframework.context.SmartLifecycle;\n import org.springframework.context.event.EventListener;\n import org.springframework.lang.NonNull;\n@@ -99,11 +98,6 @@ public void onPermalinkRuleChanged(PermalinkRuleChangedEvent event) {\n         this.cachedRouters = routerFunctions();\n     }\n \n-    @EventListener\n-    public void onApplicationStarted(ApplicationReadyEvent event) {\n-        this.cachedRouters = routerFunctions();\n-    }\n-\n     @Override\n     public void start() {\n         if (running) {\n\ndiff --git a/application/src/main/java/run/halo/app/theme/router/factories/PostRouteFactory.java b/application/src/main/java/run/halo/app/theme/router/factories/PostRouteFactory.java\n--- a/application/src/main/java/run/halo/app/theme/router/factories/PostRouteFactory.java\n+++ b/application/src/main/java/run/halo/app/theme/router/factories/PostRouteFactory.java\n@@ -6,14 +6,10 @@\n import static org.springframework.web.reactive.function.server.RequestPredicates.accept;\n import static run.halo.app.content.permalinks.PostPermalinkPolicy.DEFAULT_CATEGORY;\n \n-import com.google.common.cache.Cache;\n-import com.google.common.cache.CacheBuilder;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n-import java.util.concurrent.ExecutionException;\n-import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n import lombok.AllArgsConstructor;\n import lombok.Data;\n@@ -241,9 +237,6 @@ static Map<String, String> mergedVariables(ServerRequest request) {\n     @Getter\n     static class PatternParser {\n         private static final Pattern PATTERN_COMPILE = Pattern.compile(\"([^&?]*)=\\\\{(.*?)\\\\}(&|$)\");\n-        private static final Cache<String, Matcher> MATCHER_CACHE = CacheBuilder.newBuilder()\n-            .maximumSize(5)\n-            .build();\n \n         private final String pattern;\n         private String paramName;\n@@ -252,7 +245,7 @@ static class PatternParser {\n \n         PatternParser(String pattern) {\n             this.pattern = pattern;\n-            Matcher matcher = patternToMatcher(pattern);\n+            var matcher = PATTERN_COMPILE.matcher(pattern);\n             if (matcher.find()) {\n                 this.paramName = matcher.group(1);\n                 this.placeholderName = matcher.group(2);\n@@ -262,14 +255,6 @@ static class PatternParser {\n             }\n         }\n \n-        Matcher patternToMatcher(String pattern) {\n-            try {\n-                return MATCHER_CACHE.get(pattern, () -> PATTERN_COMPILE.matcher(pattern));\n-            } catch (ExecutionException e) {\n-                throw new RuntimeException(e);\n-            }\n-        }\n-\n         RequestPredicate toRequestPredicate() {\n             if (!this.isQueryParamPattern) {\n                 throw new IllegalStateException(\"Not a query param pattern: \" + pattern);\n\ndiff --git a/application/src/test/java/run/halo/app/theme/router/factories/PostRouteFactoryTest.java b/application/src/test/java/run/halo/app/theme/router/factories/PostRouteFactoryTest.java\n--- a/application/src/test/java/run/halo/app/theme/router/factories/PostRouteFactoryTest.java\n+++ b/application/src/test/java/run/halo/app/theme/router/factories/PostRouteFactoryTest.java\n@@ -7,6 +7,7 @@\n \n import java.util.Locale;\n import java.util.Map;\n+import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n import org.mockito.InjectMocks;\n@@ -66,6 +67,14 @@ class PostRouteFactoryTest extends RouteFactoryTestSuite {\n     @InjectMocks\n     private PostRouteFactory postRouteFactory;\n \n+    @Test\n+    void shouldBeSameResultWhenParsePattenMultiply() {\n+        var parser = new PostRouteFactory.PatternParser(\"/?p={slug}\");\n+        Assertions.assertTrue(parser.isQueryParamPattern());\n+        parser = new PostRouteFactory.PatternParser(\"/?p={slug}\");\n+        Assertions.assertTrue(parser.isQueryParamPattern());\n+    }\n+\n     @Test\n     void create() {\n         Post post = TestPost.postV1();",
    "output": "Remove wrong cache of pattern matchers"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/core/reconciler/PluginReconciler.java b/application/src/main/java/run/halo/app/core/reconciler/PluginReconciler.java\n--- a/application/src/main/java/run/halo/app/core/reconciler/PluginReconciler.java\n+++ b/application/src/main/java/run/halo/app/core/reconciler/PluginReconciler.java\n@@ -14,6 +14,8 @@\n \n import java.io.FileNotFoundException;\n import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n import java.net.MalformedURLException;\n import java.net.URISyntaxException;\n import java.net.URL;\n@@ -302,25 +304,34 @@ private Result enablePlugin(Plugin plugin) {\n             return Result.requeue(Duration.ofSeconds(1));\n         }\n \n+        PluginState pluginState;\n         try {\n-            var pluginState = pluginManager.startPlugin(pluginName);\n-            if (!PluginState.STARTED.equals(pluginState)) {\n-                throw new IllegalStateException(\"\"\"\n-                    Failed to start plugin %s(%s).\\\n-                    \"\"\".formatted(pluginName, pluginState));\n-            }\n+            pluginState = pluginManager.startPlugin(pluginName);\n         } catch (Throwable e) {\n             log.debug(\"Error occurred when starting plugin {}\", pluginName, e);\n+            var writer = new StringWriter();\n+            e.printStackTrace(new PrintWriter(writer));\n             conditions.addAndEvictFIFO(Condition.builder()\n                 .type(ConditionType.READY)\n                 .status(ConditionStatus.FALSE)\n                 .reason(ConditionReason.START_ERROR)\n-                .message(e.getMessage())\n+                .message(writer.toString())\n                 .lastTransitionTime(clock.instant())\n                 .build());\n             status.setPhase(Plugin.Phase.FAILED);\n             return Result.doNotRetry();\n         }\n+        if (!PluginState.STARTED.equals(pluginState)) {\n+            conditions.addAndEvictFIFO(Condition.builder()\n+                    .type(ConditionType.READY)\n+                    .status(ConditionStatus.FALSE)\n+                    .reason(ConditionReason.START_ERROR)\n+                    .message(\"Failed to start plugin \" + pluginName + \"(\" + pluginState + \").\")\n+                    .lastTransitionTime(clock.instant())\n+                .build());\n+            status.setPhase(Plugin.Phase.FAILED);\n+            return Result.doNotRetry();\n+        }\n \n         removeConditionBy(conditions, ConditionType.PROGRESSING);\n         status.setLastStartTime(clock.instant());",
    "output": "Show stack trace while failing to start plugin"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/Application.java b/application/src/main/java/run/halo/app/Application.java\n--- a/application/src/main/java/run/halo/app/Application.java\n+++ b/application/src/main/java/run/halo/app/Application.java\n@@ -4,9 +4,8 @@\n import org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration;\n import org.springframework.boot.builder.SpringApplicationBuilder;\n import org.springframework.boot.context.metrics.buffering.BufferingApplicationStartup;\n-import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.boot.context.properties.ConfigurationPropertiesScan;\n import org.springframework.scheduling.annotation.EnableScheduling;\n-import run.halo.app.infra.properties.HaloProperties;\n \n /**\n  * Halo main class.\n@@ -19,7 +18,7 @@\n @EnableScheduling\n @SpringBootApplication(scanBasePackages = \"run.halo.app\", exclude =\n     IntegrationAutoConfiguration.class)\n-@EnableConfigurationProperties({HaloProperties.class})\n+@ConfigurationPropertiesScan(basePackages = \"run.halo.app.infra.properties\")\n public class Application {\n \n     public static void main(String[] args) {",
    "output": "Enable configuration properties by scanning (#7413)\n\n#### What type of PR is this?\r\n\r\n/kind improvement\r\n/area core\r\n/milestone 2.20.x\r\n\r\n#### What this PR does / why we need it:\r\n\r\nThis PR change the enable method of configuration properties from `EnableConfigurationProperties` to `ConfigurationPropertiesScan`. This way can decouple the add of configuration properties.\r\n\r\nSee https://docs.spring.io/spring-boot/reference/features/external-config.html#features.external-config.typesafe-configuration-properties.enabling-annotated-types for more.\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/Application.java b/application/src/main/java/run/halo/app/Application.java\n--- a/application/src/main/java/run/halo/app/Application.java\n+++ b/application/src/main/java/run/halo/app/Application.java\n@@ -3,6 +3,7 @@\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n import org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration;\n import org.springframework.boot.builder.SpringApplicationBuilder;\n+import org.springframework.boot.context.metrics.buffering.BufferingApplicationStartup;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.scheduling.annotation.EnableScheduling;\n import run.halo.app.infra.properties.HaloProperties;\n@@ -22,7 +23,9 @@\n public class Application {\n \n     public static void main(String[] args) {\n-        new SpringApplicationBuilder(Application.class).run(args);\n+        new SpringApplicationBuilder(Application.class)\n+            .applicationStartup(new BufferingApplicationStartup(1024))\n+            .run(args);\n     }\n \n }",
    "output": "Revert \"Remove unused application startup steps buffer\" (#7388)\n\nReverts halo-dev/halo#7364\r\n\r\nFixes https://github.com/halo-dev/halo/issues/7385\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/extension/ReactiveExtensionClientImpl.java b/application/src/main/java/run/halo/app/extension/ReactiveExtensionClientImpl.java\n--- a/application/src/main/java/run/halo/app/extension/ReactiveExtensionClientImpl.java\n+++ b/application/src/main/java/run/halo/app/extension/ReactiveExtensionClientImpl.java\n@@ -1,6 +1,6 @@\n package run.halo.app.extension;\n \n-import static org.apache.commons.lang3.RandomStringUtils.secureStrong;\n+import static org.apache.commons.lang3.RandomStringUtils.secure;\n import static org.springframework.util.StringUtils.hasText;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n@@ -238,8 +238,7 @@ public <E extends Extension> Mono<E> create(E extension) {\n                         }\n \n                         // generate name with random text\n-                        // use secureStrong() to make sure the generated name is unpredictable.\n-                        metadata.setName(metadata.getGenerateName() + secureStrong()\n+                        metadata.setName(metadata.getGenerateName() + secure()\n                             .nextAlphanumeric(GENERATE_NAME_RANDOM_LENGTH)\n                             // Prevent data conflicts caused by database case sensitivity\n                             .toLowerCase()",
    "output": "Use secure random to generate metadat name instead of strong secure random (#7376)\n\n### What type of PR is this?\r\n\r\n/kind bug\r\n/area core\r\n/milestone 2.20.x\r\n\r\n#### What this PR does / why we need it:\r\n\r\nIn PR <https://github.com/halo-dev/halo/pull/7371>, I used strong secure random to generate metadata name, but the random may cause system block in some specific environments. See https://github.com/orgs/lxware-dev/discussions/13#discussioncomment-12907298 for more.\r\n\r\nSo this PR revert the use of strong secure random.\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/extension/ReactiveExtensionClientImpl.java b/application/src/main/java/run/halo/app/extension/ReactiveExtensionClientImpl.java\n--- a/application/src/main/java/run/halo/app/extension/ReactiveExtensionClientImpl.java\n+++ b/application/src/main/java/run/halo/app/extension/ReactiveExtensionClientImpl.java\n@@ -1,6 +1,6 @@\n package run.halo.app.extension;\n \n-import static org.apache.commons.lang3.RandomStringUtils.randomAlphabetic;\n+import static org.apache.commons.lang3.RandomStringUtils.secureStrong;\n import static org.springframework.util.StringUtils.hasText;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n@@ -31,6 +31,7 @@\n import org.springframework.transaction.reactive.TransactionalOperator;\n import reactor.core.publisher.Flux;\n import reactor.core.publisher.Mono;\n+import reactor.core.scheduler.Schedulers;\n import reactor.util.retry.Retry;\n import run.halo.app.extension.availability.IndexBuildState;\n import run.halo.app.extension.exception.ExtensionNotFoundException;\n@@ -44,6 +45,8 @@\n @Component\n public class ReactiveExtensionClientImpl implements ReactiveExtensionClient {\n \n+    public static final int GENERATE_NAME_RANDOM_LENGTH = 8;\n+\n     private final ReactiveExtensionStoreClient client;\n \n     private final ExtensionConverter converter;\n@@ -218,27 +221,36 @@ public Mono<JsonExtension> getJsonExtension(GroupVersionKind gvk, String name) {\n \n     @Override\n     public <E extends Extension> Mono<E> create(E extension) {\n-        checkClientWritable(extension);\n-        return Mono.just(extension)\n-            .doOnNext(ext -> {\n-                var metadata = extension.getMetadata();\n-                // those fields should be managed by halo.\n-                metadata.setCreationTimestamp(Instant.now());\n-                metadata.setDeletionTimestamp(null);\n-                metadata.setVersion(null);\n-\n-                if (!hasText(metadata.getName())) {\n-                    if (!hasText(metadata.getGenerateName())) {\n-                        throw new IllegalArgumentException(\n-                            \"The metadata.generateName must not be blank when metadata.name is \"\n-                                + \"blank\");\n+        return Mono.fromCallable(\n+                () -> {\n+                    checkClientWritable(extension);\n+                    var metadata = extension.getMetadata();\n+                    // those fields should be managed by halo.\n+                    metadata.setCreationTimestamp(Instant.now());\n+                    metadata.setDeletionTimestamp(null);\n+                    metadata.setVersion(null);\n+\n+                    if (!hasText(metadata.getName())) {\n+                        if (!hasText(metadata.getGenerateName())) {\n+                            throw new IllegalArgumentException(\n+                                \"The metadata.generateName must not be blank when metadata.name is \"\n+                                    + \"blank\");\n+                        }\n+\n+                        // generate name with random text\n+                        // use secureStrong() to make sure the generated name is unpredictable.\n+                        metadata.setName(metadata.getGenerateName() + secureStrong()\n+                            .nextAlphanumeric(GENERATE_NAME_RANDOM_LENGTH)\n+                            // Prevent data conflicts caused by database case sensitivity\n+                            .toLowerCase()\n+                        );\n                     }\n-                    // generate name with random text\n-                    metadata.setName(metadata.getGenerateName() + randomAlphabetic(5));\n-                }\n-                extension.setMetadata(metadata);\n-            })\n-            .map(converter::convertTo)\n+                    extension.setMetadata(metadata);\n+                    return converter.convertTo(extension);\n+                })\n+            // the method secureStrong() may invoke blocking SecureRandom, so we need to subscribe\n+            // on boundedElastic thread pool.\n+            .subscribeOn(Schedulers.boundedElastic())\n             .flatMap(extStore -> doCreate(extension, extStore.getName(), extStore.getData())\n                 .doOnNext(created -> watchers.onAdd(convertToRealExtension(created)))\n             )",
    "output": "Prevent data conflicts caused by database case sensitivity as possible (#7371)\n\n#### What type of PR is this?\r\n\r\n/kind improvement\r\n/area core\r\n/milestone 2.20.x\r\n\r\n#### What this PR does / why we need it:\r\n\r\nThis PR use secure-strong SecureRandom to generate unpredictable metadata name. Meanwhile, the length of generate name suffix is increased to `8` and lower-case is to prevent data conflicts caused by database case sensitivity as possible.\r\n\r\nAnother improvement is using bounded-elastic thread to run the method `secureString()#nextAlphanumeric` because the method contains blocking operation, which might cause system block.\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/Application.java b/application/src/main/java/run/halo/app/Application.java\n--- a/application/src/main/java/run/halo/app/Application.java\n+++ b/application/src/main/java/run/halo/app/Application.java\n@@ -3,7 +3,6 @@\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n import org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration;\n import org.springframework.boot.builder.SpringApplicationBuilder;\n-import org.springframework.boot.context.metrics.buffering.BufferingApplicationStartup;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.scheduling.annotation.EnableScheduling;\n import run.halo.app.infra.properties.HaloProperties;\n@@ -23,9 +22,7 @@\n public class Application {\n \n     public static void main(String[] args) {\n-        new SpringApplicationBuilder(Application.class)\n-            .applicationStartup(new BufferingApplicationStartup(1024))\n-            .run(args);\n+        new SpringApplicationBuilder(Application.class).run(args);\n     }\n \n }",
    "output": "Remove unused application startup steps buffer (#7364)\n\n#### What type of PR is this?\r\n\r\n/kind improvement\r\n/area core\r\n/milestone 2.20.x\r\n\r\n#### What this PR does / why we need it:\r\n\r\nThis PR removes application startup steps buffer to reduce memory usage.\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/security/CsrfConfigurer.java b/application/src/main/java/run/halo/app/security/CsrfConfigurer.java\n--- a/application/src/main/java/run/halo/app/security/CsrfConfigurer.java\n+++ b/application/src/main/java/run/halo/app/security/CsrfConfigurer.java\n@@ -9,8 +9,11 @@\n import org.springframework.security.web.server.csrf.XorServerCsrfTokenRequestAttributeHandler;\n import org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher;\n import org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher;\n+import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher;\n import org.springframework.stereotype.Component;\n+import reactor.core.publisher.Mono;\n import run.halo.app.security.authentication.SecurityConfigurer;\n+import run.halo.app.security.authentication.pat.PatAuthenticationConverter;\n \n @Component\n @Order(0)\n@@ -25,12 +28,20 @@ public void configure(ServerHttpSecurity http) {\n                 \"/apis/**\",\n                 \"/actuator/**\",\n                 \"/system/setup\"\n-            ))\n+            )),\n+            new NegatedServerWebExchangeMatcher(patAuthMatcher())\n         );\n         http.csrf(csrfSpec -> csrfSpec\n             .csrfTokenRepository(new CookieServerCsrfTokenRepository())\n             .csrfTokenRequestHandler(new XorServerCsrfTokenRequestAttributeHandler())\n             .requireCsrfProtectionMatcher(csrfMatcher));\n     }\n \n+    private static ServerWebExchangeMatcher patAuthMatcher() {\n+        var patConverter = new PatAuthenticationConverter();\n+        return exchange -> patConverter.convert(exchange)\n+            .flatMap(a -> ServerWebExchangeMatcher.MatchResult.match())\n+            .switchIfEmpty(Mono.defer(ServerWebExchangeMatcher.MatchResult::notMatch));\n+    }\n+\n }\n\ndiff --git a/application/src/main/java/run/halo/app/security/authentication/pat/PatAuthenticationConverter.java b/application/src/main/java/run/halo/app/security/authentication/pat/PatAuthenticationConverter.java\n--- a/application/src/main/java/run/halo/app/security/authentication/pat/PatAuthenticationConverter.java\n+++ b/application/src/main/java/run/halo/app/security/authentication/pat/PatAuthenticationConverter.java\n@@ -15,7 +15,7 @@\n  * @author johnniang\n  * @since 2.20.4\n  */\n-class PatAuthenticationConverter extends ServerBearerTokenAuthenticationConverter {\n+public class PatAuthenticationConverter extends ServerBearerTokenAuthenticationConverter {\n \n     @Override\n     public Mono<Authentication> convert(ServerWebExchange exchange) {\n\ndiff --git a/application/src/test/java/run/halo/app/security/CsrfSecurityTest.java b/application/src/test/java/run/halo/app/security/CsrfSecurityTest.java\n--- a/application/src/test/java/run/halo/app/security/CsrfSecurityTest.java\n+++ b/application/src/test/java/run/halo/app/security/CsrfSecurityTest.java\n@@ -0,0 +1,29 @@\n+package run.halo.app.security;\n+\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.test.web.reactive.server.WebTestClient;\n+\n+@SpringBootTest\n+@AutoConfigureWebTestClient\n+class CsrfSecurityTest {\n+\n+    @Autowired\n+    WebTestClient webClient;\n+\n+    @Test\n+    void shouldNotCheckCsrfForPatAuthentication() {\n+        webClient.post()\n+            .uri(\"/fake\")\n+            .headers(headers -> headers.setBearerAuth(\"pat_invalid\"))\n+            .exchange()\n+            .expectStatus()\n+            .isUnauthorized()\n+            .expectHeader()\n+            .exists(HttpHeaders.WWW_AUTHENTICATE);\n+    }\n+\n+}",
    "output": "Disable CSRF check for PAT authentication (#7353)\n\n#### What type of PR is this?\r\n\r\n/kind improvement\r\n/area core\r\n/milestone 2.20.x\r\n\r\n#### What this PR does / why we need it:\r\n\r\nThis PR disables CSRF check for PAT authentication because the authentication won't pass any cookies to server.\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/api/src/main/java/run/halo/app/extension/controller/DefaultController.java b/api/src/main/java/run/halo/app/extension/controller/DefaultController.java\n--- a/api/src/main/java/run/halo/app/extension/controller/DefaultController.java\n+++ b/api/src/main/java/run/halo/app/extension/controller/DefaultController.java\n@@ -242,15 +242,17 @@ public void dispose() {\n         }\n \n         try {\n-            if (executor instanceof AutoCloseable closeable) {\n+            // we have to check if the executor is an instance of ExecutorService at first.\n+            // Because ExecutorService extends AutoCloseable interface in Java 21\n+            if (executor instanceof ExecutorService executorService) {\n+                closeExecutorService(executorService);\n+            } else if (executor instanceof AutoCloseable closeable) {\n                 closeable.close();\n                 if (Thread.currentThread().isInterrupted()) {\n                     log.warn(\"Wait timeout for controller {} shutdown\", name);\n                 } else {\n                     log.info(\"Controller {} is disposed\", name);\n                 }\n-            } else if (executor instanceof ExecutorService executorService) {\n-                closeExecutorService(executorService);\n             }\n         } catch (Exception e) {\n             log.warn(\"Interrupted while waiting for controller {} shutdown\", name);",
    "output": "Fix the problem of unit test failure under Java 21 (#7304)\n\n#### What type of PR is this?\r\n\r\n/kind bug\r\n/area core\r\n/milestone 2.20.x\r\n\r\n#### What this PR does / why we need it:\r\n\r\nThis PR adjusts the order of checking instance of ExecutorService and AutoCloseable interfaces. Because the ExecutorService extends AutoCloseable in Java 21. As a result, unit tests against the method won't be passed in Java 21.\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/extension/DelegateExtensionClient.java b/application/src/main/java/run/halo/app/extension/DelegateExtensionClient.java\n--- a/application/src/main/java/run/halo/app/extension/DelegateExtensionClient.java\n+++ b/application/src/main/java/run/halo/app/extension/DelegateExtensionClient.java\n@@ -1,5 +1,6 @@\n package run.halo.app.extension;\n \n+import java.time.Duration;\n import java.util.Comparator;\n import java.util.List;\n import java.util.Optional;\n@@ -16,6 +17,8 @@\n @Component\n public class DelegateExtensionClient implements ExtensionClient {\n \n+    private static final Duration TIMEOUT = Duration.ofSeconds(30);\n+\n     private final ReactiveExtensionClient client;\n \n     public DelegateExtensionClient(ReactiveExtensionClient client) {\n@@ -25,49 +28,49 @@ public DelegateExtensionClient(ReactiveExtensionClient client) {\n     @Override\n     public <E extends Extension> List<E> list(Class<E> type, Predicate<E> predicate,\n         Comparator<E> comparator) {\n-        return client.list(type, predicate, comparator).collectList().block();\n+        return client.list(type, predicate, comparator).collectList().block(TIMEOUT);\n     }\n \n     @Override\n     public <E extends Extension> ListResult<E> list(Class<E> type, Predicate<E> predicate,\n         Comparator<E> comparator, int page, int size) {\n-        return client.list(type, predicate, comparator, page, size).block();\n+        return client.list(type, predicate, comparator, page, size).block(TIMEOUT);\n     }\n \n     @Override\n     public <E extends Extension> List<E> listAll(Class<E> type, ListOptions options, Sort sort) {\n-        return client.listAll(type, options, sort).collectList().block();\n+        return client.listAll(type, options, sort).collectList().block(TIMEOUT);\n     }\n \n     @Override\n     public <E extends Extension> ListResult<E> listBy(Class<E> type, ListOptions options,\n         PageRequest page) {\n-        return client.listBy(type, options, page).block();\n+        return client.listBy(type, options, page).block(TIMEOUT);\n     }\n \n     @Override\n     public <E extends Extension> Optional<E> fetch(Class<E> type, String name) {\n-        return client.fetch(type, name).blockOptional();\n+        return client.fetch(type, name).blockOptional(TIMEOUT);\n     }\n \n     @Override\n     public Optional<Unstructured> fetch(GroupVersionKind gvk, String name) {\n-        return client.fetch(gvk, name).blockOptional();\n+        return client.fetch(gvk, name).blockOptional(TIMEOUT);\n     }\n \n     @Override\n     public <E extends Extension> void create(E extension) {\n-        client.create(extension).block();\n+        client.create(extension).block(TIMEOUT);\n     }\n \n     @Override\n     public <E extends Extension> void update(E extension) {\n-        client.update(extension).block();\n+        client.update(extension).block(TIMEOUT);\n     }\n \n     @Override\n     public <E extends Extension> void delete(E extension) {\n-        client.delete(extension).block();\n+        client.delete(extension).block(TIMEOUT);\n     }\n \n     @Override",
    "output": "Add timeout for blocking Extension client (#7303)\n\n#### What type of PR is this?\r\n\r\n/kind bug\r\n/area core\r\n/milestone 2.20.x\r\n\r\n#### What this PR does / why we need it:\r\n\r\nThis PR adds timeout for blocking Extension client to prevent system from blocking without any error.\r\n\r\n#### Which issue(s) this PR fixes:\r\n\r\nRecently, we have received several issues about getting stuck in creating menu items. Please refer to the key threaddump detail:\r\n\r\n![image](https://github.com/user-attachments/assets/84892449-5f15-4981-a805-df30eeafcdba)\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/core/reconciler/PluginReconciler.java b/application/src/main/java/run/halo/app/core/reconciler/PluginReconciler.java\n--- a/application/src/main/java/run/halo/app/core/reconciler/PluginReconciler.java\n+++ b/application/src/main/java/run/halo/app/core/reconciler/PluginReconciler.java\n@@ -310,6 +310,7 @@ private Result enablePlugin(Plugin plugin) {\n                     \"\"\".formatted(pluginName, pluginState));\n             }\n         } catch (Throwable e) {\n+            log.debug(\"Error occurred when starting plugin {}\", pluginName, e);\n             conditions.addAndEvictFIFO(Condition.builder()\n                 .type(ConditionType.READY)\n                 .status(ConditionStatus.FALSE)",
    "output": "Merge pull request #7291 from guqing/chore/log-plugin\n\nchore: add exception information to log output when the plugin fails to start"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/core/reconciler/PluginReconciler.java b/application/src/main/java/run/halo/app/core/reconciler/PluginReconciler.java\n--- a/application/src/main/java/run/halo/app/core/reconciler/PluginReconciler.java\n+++ b/application/src/main/java/run/halo/app/core/reconciler/PluginReconciler.java\n@@ -310,6 +310,7 @@ private Result enablePlugin(Plugin plugin) {\n                     \"\"\".formatted(pluginName, pluginState));\n             }\n         } catch (Throwable e) {\n+            log.debug(\"Error occurred when starting plugin {}\", pluginName, e);\n             conditions.addAndEvictFIFO(Condition.builder()\n                 .type(ConditionType.READY)\n                 .status(ConditionStatus.FALSE)\n\ndiff --git a/application/src/main/java/run/halo/app/plugin/SpringPlugin.java b/application/src/main/java/run/halo/app/plugin/SpringPlugin.java\n--- a/application/src/main/java/run/halo/app/plugin/SpringPlugin.java\n+++ b/application/src/main/java/run/halo/app/plugin/SpringPlugin.java\n@@ -52,7 +52,6 @@ public void start() {\n             log.error(\n                 \"Cleaning up plugin resources for plugin {} due to not being able to start plugin.\",\n                 pluginId);\n-            log.debug(\"Error occurred when starting plugin {}\", pluginId, t);\n             this.stop();\n             // propagate exception to invoker.\n             throw t;",
    "output": "fix: code style"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/plugin/SpringPlugin.java b/application/src/main/java/run/halo/app/plugin/SpringPlugin.java\n--- a/application/src/main/java/run/halo/app/plugin/SpringPlugin.java\n+++ b/application/src/main/java/run/halo/app/plugin/SpringPlugin.java\n@@ -52,6 +52,7 @@ public void start() {\n             log.error(\n                 \"Cleaning up plugin resources for plugin {} due to not being able to start plugin.\",\n                 pluginId);\n+            log.debug(\"Error occurred when starting plugin {}\", pluginId, t);\n             this.stop();\n             // propagate exception to invoker.\n             throw t;",
    "output": "chore: add exception information to log output when the plugin fails to start"
  },
  {
    "input": "diff --git a/api/src/main/java/run/halo/app/core/extension/Theme.java b/api/src/main/java/run/halo/app/core/extension/Theme.java\n--- a/api/src/main/java/run/halo/app/core/extension/Theme.java\n+++ b/api/src/main/java/run/halo/app/core/extension/Theme.java\n@@ -5,6 +5,7 @@\n \n import io.swagger.v3.oas.annotations.media.Schema;\n import java.util.List;\n+import java.util.Objects;\n import lombok.Data;\n import lombok.EqualsAndHashCode;\n import lombok.ToString;\n@@ -83,7 +84,7 @@ public static class ThemeSpec {\n \n         @NonNull\n         public String getVersion() {\n-            return StringUtils.defaultString(this.version, WILDCARD);\n+            return Objects.toString(this.version, WILDCARD);\n         }\n \n         /**\n@@ -96,14 +97,14 @@ public String getRequires() {\n             if (StringUtils.isNotBlank(this.requires)) {\n                 return this.requires;\n             }\n-            return StringUtils.defaultString(this.require, WILDCARD);\n+            return Objects.toString(this.require, WILDCARD);\n         }\n \n         /**\n          * Compatible with {@link #website} property.\n          */\n         public String getHomepage() {\n-            return StringUtils.defaultString(this.homepage, this.website);\n+            return Objects.toString(this.homepage, this.website);\n         }\n     }\n \n\ndiff --git a/api/src/main/java/run/halo/app/theme/router/PageUrlUtils.java b/api/src/main/java/run/halo/app/theme/router/PageUrlUtils.java\n--- a/api/src/main/java/run/halo/app/theme/router/PageUrlUtils.java\n+++ b/api/src/main/java/run/halo/app/theme/router/PageUrlUtils.java\n@@ -6,6 +6,7 @@\n import org.springframework.web.reactive.function.server.ServerRequest;\n import run.halo.app.extension.ListResult;\n import run.halo.app.infra.utils.PathUtils;\n+import java.util.Objects;\n \n /**\n  * A utility class for template page url.\n@@ -83,7 +84,7 @@ public static String prevPageUrl(String path) {\n                 return PathUtils.combinePath(segments);\n             }\n         }\n-        return StringUtils.defaultString(path, \"/\");\n+        return Objects.toString(path, \"/\");\n     }\n \n     private static String appendPagePart(String path, long page) {\n\ndiff --git a/application/src/main/java/run/halo/app/content/SinglePageQuery.java b/application/src/main/java/run/halo/app/content/SinglePageQuery.java\n--- a/application/src/main/java/run/halo/app/content/SinglePageQuery.java\n+++ b/application/src/main/java/run/halo/app/content/SinglePageQuery.java\n@@ -117,6 +117,5 @@ public static void buildParameters(Builder builder) {\n                 .description(\"SinglePages filtered by keyword.\")\n                 .implementation(String.class)\n                 .required(false));\n-        ;\n     }\n }\n\ndiff --git a/application/src/main/java/run/halo/app/content/comment/CommentEmailOwner.java b/application/src/main/java/run/halo/app/content/comment/CommentEmailOwner.java\n--- a/application/src/main/java/run/halo/app/content/comment/CommentEmailOwner.java\n+++ b/application/src/main/java/run/halo/app/content/comment/CommentEmailOwner.java\n@@ -31,7 +31,7 @@ public Comment.CommentOwner toCommentOwner() {\n         Comment.CommentOwner commentOwner = new Comment.CommentOwner();\n         commentOwner.setKind(Comment.CommentOwner.KIND_EMAIL);\n         // email nullable\n-        commentOwner.setName(StringUtils.defaultString(email, StringUtils.EMPTY));\n+        commentOwner.setName(StringUtils.defaultString(email));\n \n         commentOwner.setDisplayName(displayName);\n         Map<String, String> annotations = new LinkedHashMap<>();\n\ndiff --git a/application/src/main/java/run/halo/app/core/reconciler/ReverseProxyReconciler.java b/application/src/main/java/run/halo/app/core/reconciler/ReverseProxyReconciler.java\n--- a/application/src/main/java/run/halo/app/core/reconciler/ReverseProxyReconciler.java\n+++ b/application/src/main/java/run/halo/app/core/reconciler/ReverseProxyReconciler.java\n@@ -2,8 +2,8 @@\n \n import java.util.HashSet;\n import java.util.Map;\n+import java.util.Objects;\n import java.util.Set;\n-import org.apache.commons.lang3.StringUtils;\n import org.springframework.stereotype.Component;\n import run.halo.app.core.extension.ReverseProxy;\n import run.halo.app.extension.ExtensionClient;\n@@ -99,7 +99,7 @@ private String getPluginId(ReverseProxy reverseProxy) {\n         if (labels == null) {\n             return PluginConst.SYSTEM_PLUGIN_NAME;\n         }\n-        return StringUtils.defaultString(labels.get(PluginConst.PLUGIN_NAME_LABEL_NAME),\n+        return Objects.toString(labels.get(PluginConst.PLUGIN_NAME_LABEL_NAME),\n             PluginConst.SYSTEM_PLUGIN_NAME);\n     }\n }\n\ndiff --git a/application/src/main/java/run/halo/app/security/authorization/RequestInfo.java b/application/src/main/java/run/halo/app/security/authorization/RequestInfo.java\n--- a/application/src/main/java/run/halo/app/security/authorization/RequestInfo.java\n+++ b/application/src/main/java/run/halo/app/security/authorization/RequestInfo.java\n@@ -45,17 +45,17 @@ public RequestInfo(boolean isResourceRequest, String path, String namespace, Str\n         String apiVersion, String resource, String name, String subresource, String subName,\n         String[] parts) {\n         this.isResourceRequest = isResourceRequest;\n-        this.path = StringUtils.defaultString(path, \"\");\n-        this.namespace = StringUtils.defaultString(namespace, \"\");\n-        this.userspace = StringUtils.defaultString(userspace, \"\");\n-        this.verb = StringUtils.defaultString(verb, \"\");\n-        this.apiPrefix = StringUtils.defaultString(apiPrefix, \"\");\n-        this.apiGroup = StringUtils.defaultString(apiGroup, \"\");\n-        this.apiVersion = StringUtils.defaultString(apiVersion, \"\");\n-        this.resource = StringUtils.defaultString(resource, \"\");\n-        this.subresource = StringUtils.defaultString(subresource, \"\");\n-        this.subName = StringUtils.defaultString(subName, \"\");\n-        this.name = StringUtils.defaultString(name, \"\");\n+        this.path = StringUtils.defaultString(path);\n+        this.namespace = StringUtils.defaultString(namespace);\n+        this.userspace = StringUtils.defaultString(userspace);\n+        this.verb = StringUtils.defaultString(verb);\n+        this.apiPrefix = StringUtils.defaultString(apiPrefix);\n+        this.apiGroup = StringUtils.defaultString(apiGroup);\n+        this.apiVersion = StringUtils.defaultString(apiVersion);\n+        this.resource = StringUtils.defaultString(resource);\n+        this.subresource = StringUtils.defaultString(subresource);\n+        this.subName = StringUtils.defaultString(subName);\n+        this.name = StringUtils.defaultString(name);\n         this.parts = Objects.requireNonNullElseGet(parts, () -> new String[] {});\n     }\n }\n\ndiff --git a/application/src/main/java/run/halo/app/security/authorization/RequestInfoFactory.java b/application/src/main/java/run/halo/app/security/authorization/RequestInfoFactory.java\n--- a/application/src/main/java/run/halo/app/security/authorization/RequestInfoFactory.java\n+++ b/application/src/main/java/run/halo/app/security/authorization/RequestInfoFactory.java\n@@ -116,7 +116,7 @@ public RequestInfo newRequestInfo(ServerHttpRequest request) {\n                 return requestInfo;\n             }\n \n-            requestInfo.apiGroup = StringUtils.defaultString(currentParts[0], \"\");\n+            requestInfo.apiGroup = StringUtils.defaultString(currentParts[0]);\n             currentParts = Arrays.copyOfRange(currentParts, 1, currentParts.length);\n         }\n         requestInfo.isResourceRequest = true;",
    "output": "Update deprecated default string function (#7239)\n\n#### What type of PR is this?\r\n/kind cleanup\r\n\r\n#### What this PR does / why we need it:\r\nReplaces deprecated functions (`String defaultString(final String str, final String nullDefault)`) with its recommended alternatives\r\n\r\nSee https://github.com/apache/commons-lang/blob/29ccc7665f3bc5d84155a3092ab2209a053324e6/src/main/java/org/apache/commons/lang3/StringUtils.java#L1635 for more.\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/api/src/main/java/run/halo/app/core/extension/Menu.java b/api/src/main/java/run/halo/app/core/extension/Menu.java\n--- a/api/src/main/java/run/halo/app/core/extension/Menu.java\n+++ b/api/src/main/java/run/halo/app/core/extension/Menu.java\n@@ -27,8 +27,8 @@ public static class Spec {\n         @Schema(description = \"The display name of the menu.\", requiredMode = REQUIRED)\n         private String displayName;\n \n-        @Schema(description = \"Names of menu children below this menu.\")\n         @ArraySchema(\n+            uniqueItems = true,\n             arraySchema = @Schema(description = \"Menu items of this menu.\"),\n             schema = @Schema(description = \"Name of menu item.\")\n         )\n\ndiff --git a/api/src/main/java/run/halo/app/core/extension/MenuItem.java b/api/src/main/java/run/halo/app/core/extension/MenuItem.java\n--- a/api/src/main/java/run/halo/app/core/extension/MenuItem.java\n+++ b/api/src/main/java/run/halo/app/core/extension/MenuItem.java\n@@ -62,6 +62,7 @@ public static class MenuItemSpec {\n         private Integer priority;\n \n         @ArraySchema(\n+            uniqueItems = true,\n             arraySchema = @Schema(description = \"Children of this menu item\"),\n             schema = @Schema(description = \"The name of menu item child\"))\n         private LinkedHashSet<String> children;\n\ndiff --git a/application/src/main/java/run/halo/app/core/endpoint/theme/CommentFinderEndpoint.java b/application/src/main/java/run/halo/app/core/endpoint/theme/CommentFinderEndpoint.java\n--- a/application/src/main/java/run/halo/app/core/endpoint/theme/CommentFinderEndpoint.java\n+++ b/application/src/main/java/run/halo/app/core/endpoint/theme/CommentFinderEndpoint.java\n@@ -76,7 +76,7 @@ public RouterFunction<ServerResponse> endpoint() {\n         final var tag = \"CommentV1alpha1Public\";\n         return SpringdocRouteBuilder.route()\n             .POST(\"comments\", this::createComment,\n-                builder -> builder.operationId(\"CreateComment\")\n+                builder -> builder.operationId(\"CreateComment_1\")\n                     .description(\"Create a comment.\")\n                     .tag(tag)\n                     .requestBody(requestBodyBuilder()\n@@ -90,7 +90,7 @@ public RouterFunction<ServerResponse> endpoint() {\n                         .implementation(Comment.class))\n             )\n             .POST(\"comments/{name}/reply\", this::createReply,\n-                builder -> builder.operationId(\"CreateReply\")\n+                builder -> builder.operationId(\"CreateReply_1\")\n                     .description(\"Create a reply.\")\n                     .tag(tag)\n                     .parameter(parameterBuilder().name(\"name\")\n@@ -108,7 +108,7 @@ public RouterFunction<ServerResponse> endpoint() {\n                         .implementation(Reply.class))\n             )\n             .GET(\"comments\", this::listComments, builder -> {\n-                builder.operationId(\"ListComments\")\n+                builder.operationId(\"ListComments_1\")\n                     .description(\"List comments.\")\n                     .tag(tag)\n                     .response(responseBuilder()\n\ndiff --git a/application/src/main/java/run/halo/app/core/endpoint/uc/UcAttachmentEndpoint.java b/application/src/main/java/run/halo/app/core/endpoint/uc/UcAttachmentEndpoint.java\n--- a/application/src/main/java/run/halo/app/core/endpoint/uc/UcAttachmentEndpoint.java\n+++ b/application/src/main/java/run/halo/app/core/endpoint/uc/UcAttachmentEndpoint.java\n@@ -112,7 +112,7 @@ public RouterFunction<ServerResponse> endpoint() {\n             .POST(\"/attachments/-/upload-from-url\", contentType(MediaType.APPLICATION_JSON),\n                 this::uploadFromUrlForPost,\n                 builder -> builder\n-                    .operationId(\"ExternalTransferAttachment\")\n+                    .operationId(\"ExternalTransferAttachment_1\")\n                     .description(\"Upload attachment from the given URL.\")\n                     .tag(tag)\n                     .parameter(parameterBuilder()",
    "output": "Upgrade to SpringDoc 2.7.0 (#7072)\n\n* Upgrade to SpringDoc 2.7.0\r\n\r\nSigned-off-by: John Niang <johnniang@foxmail.com>"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/security/CorsConfigurer.java b/application/src/main/java/run/halo/app/security/CorsConfigurer.java\n--- a/application/src/main/java/run/halo/app/security/CorsConfigurer.java\n+++ b/application/src/main/java/run/halo/app/security/CorsConfigurer.java\n@@ -2,6 +2,7 @@\n \n import com.google.common.net.HttpHeaders;\n import java.util.List;\n+import org.springframework.core.annotation.Order;\n import org.springframework.security.config.web.server.ServerHttpSecurity;\n import org.springframework.stereotype.Component;\n import org.springframework.web.cors.CorsConfiguration;\n@@ -10,6 +11,7 @@\n import run.halo.app.security.authentication.SecurityConfigurer;\n \n @Component\n+@Order(0)\n public class CorsConfigurer implements SecurityConfigurer {\n     @Override\n     public void configure(ServerHttpSecurity http) {\n\ndiff --git a/application/src/main/java/run/halo/app/security/CsrfConfigurer.java b/application/src/main/java/run/halo/app/security/CsrfConfigurer.java\n--- a/application/src/main/java/run/halo/app/security/CsrfConfigurer.java\n+++ b/application/src/main/java/run/halo/app/security/CsrfConfigurer.java\n@@ -2,6 +2,7 @@\n \n import static org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers;\n \n+import org.springframework.core.annotation.Order;\n import org.springframework.security.config.web.server.ServerHttpSecurity;\n import org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository;\n import org.springframework.security.web.server.csrf.CsrfWebFilter;\n@@ -12,6 +13,7 @@\n import run.halo.app.security.authentication.SecurityConfigurer;\n \n @Component\n+@Order(0)\n class CsrfConfigurer implements SecurityConfigurer {\n \n     @Override\n\ndiff --git a/application/src/main/java/run/halo/app/security/ExceptionSecurityConfigurer.java b/application/src/main/java/run/halo/app/security/ExceptionSecurityConfigurer.java\n--- a/application/src/main/java/run/halo/app/security/ExceptionSecurityConfigurer.java\n+++ b/application/src/main/java/run/halo/app/security/ExceptionSecurityConfigurer.java\n@@ -5,6 +5,7 @@\n \n import java.util.ArrayList;\n import org.springframework.context.MessageSource;\n+import org.springframework.core.annotation.Order;\n import org.springframework.http.HttpMethod;\n import org.springframework.http.HttpStatus;\n import org.springframework.security.config.web.server.ServerHttpSecurity;\n@@ -21,6 +22,7 @@\n import run.halo.app.security.authentication.twofactor.TwoFactorAuthenticationEntryPoint;\n \n @Component\n+@Order(0)\n public class ExceptionSecurityConfigurer implements SecurityConfigurer {\n \n     private final MessageSource messageSource;\n\ndiff --git a/application/src/main/java/run/halo/app/security/LogoutSecurityConfigurer.java b/application/src/main/java/run/halo/app/security/LogoutSecurityConfigurer.java\n--- a/application/src/main/java/run/halo/app/security/LogoutSecurityConfigurer.java\n+++ b/application/src/main/java/run/halo/app/security/LogoutSecurityConfigurer.java\n@@ -7,6 +7,7 @@\n import lombok.RequiredArgsConstructor;\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.annotation.Bean;\n+import org.springframework.core.annotation.Order;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.MediaType;\n import org.springframework.security.config.web.server.ServerHttpSecurity;\n@@ -31,6 +32,7 @@\n \n @Component\n @RequiredArgsConstructor\n+@Order(0)\n public class LogoutSecurityConfigurer implements SecurityConfigurer {\n     private final RememberMeServices rememberMeServices;\n     private final ApplicationContext applicationContext;\n\ndiff --git a/application/src/main/java/run/halo/app/security/SecurityWebFiltersConfigurer.java b/application/src/main/java/run/halo/app/security/SecurityWebFiltersConfigurer.java\n--- a/application/src/main/java/run/halo/app/security/SecurityWebFiltersConfigurer.java\n+++ b/application/src/main/java/run/halo/app/security/SecurityWebFiltersConfigurer.java\n@@ -24,7 +24,7 @@\n \n @Component\n // Specific an order here to control the order or security configurer initialization\n-@Order(-100)\n+@Order(100)\n public class SecurityWebFiltersConfigurer implements SecurityConfigurer {\n \n     private final ExtensionGetter extensionGetter;\n\ndiff --git a/application/src/main/java/run/halo/app/security/authentication/login/LoginSecurityConfigurer.java b/application/src/main/java/run/halo/app/security/authentication/login/LoginSecurityConfigurer.java\n--- a/application/src/main/java/run/halo/app/security/authentication/login/LoginSecurityConfigurer.java\n+++ b/application/src/main/java/run/halo/app/security/authentication/login/LoginSecurityConfigurer.java\n@@ -3,6 +3,7 @@\n import io.github.resilience4j.ratelimiter.RateLimiterRegistry;\n import io.micrometer.observation.ObservationRegistry;\n import org.springframework.context.MessageSource;\n+import org.springframework.core.annotation.Order;\n import org.springframework.http.HttpMethod;\n import org.springframework.security.authentication.ObservationReactiveAuthenticationManager;\n import org.springframework.security.authentication.ReactiveAuthenticationManager;\n@@ -28,6 +29,7 @@\n import run.halo.app.security.authentication.twofactor.TwoFactorAuthentication;\n \n @Component\n+@Order(0)\n public class LoginSecurityConfigurer implements SecurityConfigurer {\n \n     private final ObservationRegistry observationRegistry;\n\ndiff --git a/application/src/main/java/run/halo/app/security/authentication/oauth2/OAuth2SecurityConfigurer.java b/application/src/main/java/run/halo/app/security/authentication/oauth2/OAuth2SecurityConfigurer.java\n--- a/application/src/main/java/run/halo/app/security/authentication/oauth2/OAuth2SecurityConfigurer.java\n+++ b/application/src/main/java/run/halo/app/security/authentication/oauth2/OAuth2SecurityConfigurer.java\n@@ -1,5 +1,6 @@\n package run.halo.app.security.authentication.oauth2;\n \n+import org.springframework.core.annotation.Order;\n import org.springframework.security.config.web.server.SecurityWebFiltersOrder;\n import org.springframework.security.config.web.server.ServerHttpSecurity;\n import org.springframework.security.core.userdetails.ReactiveUserDetailsService;\n@@ -15,6 +16,7 @@\n  * @since 2.20.0\n  */\n @Component\n+@Order(0)\n class OAuth2SecurityConfigurer implements SecurityConfigurer {\n \n     private final ServerSecurityContextRepository securityContextRepository;\n\ndiff --git a/application/src/main/java/run/halo/app/security/authentication/rememberme/RememberMeConfigurer.java b/application/src/main/java/run/halo/app/security/authentication/rememberme/RememberMeConfigurer.java\n--- a/application/src/main/java/run/halo/app/security/authentication/rememberme/RememberMeConfigurer.java\n+++ b/application/src/main/java/run/halo/app/security/authentication/rememberme/RememberMeConfigurer.java\n@@ -3,6 +3,7 @@\n import static org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult;\n \n import lombok.RequiredArgsConstructor;\n+import org.springframework.core.annotation.Order;\n import org.springframework.security.config.web.server.SecurityWebFiltersOrder;\n import org.springframework.security.config.web.server.ServerHttpSecurity;\n import org.springframework.security.core.context.ReactiveSecurityContextHolder;\n@@ -13,6 +14,7 @@\n \n @Component\n @RequiredArgsConstructor\n+@Order(0)\n public class RememberMeConfigurer implements SecurityConfigurer {\n \n     private final RememberMeServices rememberMeServices;\n\ndiff --git a/application/src/main/java/run/halo/app/security/authentication/twofactor/TwoFactorAuthSecurityConfigurer.java b/application/src/main/java/run/halo/app/security/authentication/twofactor/TwoFactorAuthSecurityConfigurer.java\n--- a/application/src/main/java/run/halo/app/security/authentication/twofactor/TwoFactorAuthSecurityConfigurer.java\n+++ b/application/src/main/java/run/halo/app/security/authentication/twofactor/TwoFactorAuthSecurityConfigurer.java\n@@ -2,6 +2,7 @@\n \n import static org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers;\n \n+import org.springframework.core.annotation.Order;\n import org.springframework.http.HttpMethod;\n import org.springframework.security.config.web.server.SecurityWebFiltersOrder;\n import org.springframework.security.config.web.server.ServerHttpSecurity;\n@@ -17,6 +18,7 @@\n import run.halo.app.security.authentication.twofactor.totp.TotpCodeAuthenticationConverter;\n \n @Component\n+@Order(0)\n public class TwoFactorAuthSecurityConfigurer implements SecurityConfigurer {\n \n     private final ServerSecurityContextRepository securityContextRepository;",
    "output": "Rearrange order of security configurers (#6939)\n\n#### What type of PR is this?\r\n\r\n/kind improvement\r\n/area core\r\n/milestone 2.20.x\r\n\r\n#### What this PR does / why we need it:\r\n\r\nThis PR rearranges order of security configurers. Especially, SecurityWebFiltersConfigurer has lower priority to configure than other security configurers.\r\n\r\nSo we can catch internal authentication in plugins.\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/infra/properties/ConsoleProperties.java b/application/src/main/java/run/halo/app/infra/properties/ConsoleProperties.java\n--- a/application/src/main/java/run/halo/app/infra/properties/ConsoleProperties.java\n+++ b/application/src/main/java/run/halo/app/infra/properties/ConsoleProperties.java\n@@ -2,13 +2,15 @@\n \n import jakarta.validation.Valid;\n import lombok.Data;\n+import org.springframework.boot.context.properties.NestedConfigurationProperty;\n \n @Data\n public class ConsoleProperties {\n \n     private String location = \"classpath:/console/\";\n \n     @Valid\n+    @NestedConfigurationProperty\n     private ProxyProperties proxy = new ProxyProperties();\n \n }\n\ndiff --git a/application/src/main/java/run/halo/app/infra/properties/HaloProperties.java b/application/src/main/java/run/halo/app/infra/properties/HaloProperties.java\n--- a/application/src/main/java/run/halo/app/infra/properties/HaloProperties.java\n+++ b/application/src/main/java/run/halo/app/infra/properties/HaloProperties.java\n@@ -9,6 +9,7 @@\n import java.util.Set;\n import lombok.Data;\n import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.boot.context.properties.NestedConfigurationProperty;\n import org.springframework.validation.Errors;\n import org.springframework.validation.Validator;\n import org.springframework.validation.annotation.Validated;\n@@ -45,21 +46,27 @@ public class HaloProperties implements Validator {\n     private boolean requiredExtensionDisabled;\n \n     @Valid\n+    @NestedConfigurationProperty\n     private final ExtensionProperties extension = new ExtensionProperties();\n \n     @Valid\n+    @NestedConfigurationProperty\n     private final SecurityProperties security = new SecurityProperties();\n \n     @Valid\n+    @NestedConfigurationProperty\n     private final ConsoleProperties console = new ConsoleProperties();\n \n     @Valid\n+    @NestedConfigurationProperty\n     private final UcProperties uc = new UcProperties();\n \n     @Valid\n+    @NestedConfigurationProperty\n     private final ThemeProperties theme = new ThemeProperties();\n \n     @Valid\n+    @NestedConfigurationProperty\n     private final AttachmentProperties attachment = new AttachmentProperties();\n \n     @Override",
    "output": "Support nested configuration properties (#6920)\n\n#### What type of PR is this?\r\n\r\n/kind improvement\r\n/area core\r\n/milestone 2.20.x\r\n\r\n#### What this PR does / why we need it:\r\n\r\nThis PR adds the annotations `@NestedConfigurationProperties` to let Spring Configuration Processor generate fully metadata.\r\n\r\nWe can execute command `./gradlew :application:compileJava` to generate `application/build/classes/java/main/META-INF/spring-configuration-metadata.json`. If you are using IDEA Ultimate, configuration hints related to Halo will be available.\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/infra/config/WebServerSecurityConfig.java b/application/src/main/java/run/halo/app/infra/config/WebServerSecurityConfig.java\n--- a/application/src/main/java/run/halo/app/infra/config/WebServerSecurityConfig.java\n+++ b/application/src/main/java/run/halo/app/infra/config/WebServerSecurityConfig.java\n@@ -59,6 +59,8 @@ SecurityWebFilterChain filterChain(ServerHttpSecurity http,\n \n         var pathMatcher = pathMatchers(\"/**\");\n         var staticResourcesMatcher = pathMatchers(HttpMethod.GET,\n+            \"/console/assets/**\",\n+            \"/uc/assets/**\",\n             \"/themes/{themeName}/assets/{*resourcePaths}\",\n             \"/plugins/{pluginName}/assets/**\",\n             \"/upload/**\",",
    "output": "Exclude console and uc assets in security configuration (#6915)\n\n#### What type of PR is this?\r\n\r\n/kind improvement\r\n/area core\r\n/milestone 2.20.x\r\n\r\n#### What this PR does / why we need it:\r\n\r\nThis PR excludes console and uc assets in security configuration to make them access by anonymous users.\r\n\r\n#### Which issue(s) this PR fixes:\r\n\r\nFixes https://github.com/halo-dev/halo/issues/6908\r\n\r\n#### Special notes for your reviewer:\r\n\r\n```bash\r\nhttp http://localhost:8090/uc/assets/index-E-uvwInx.css -ph\r\n\r\nHTTP/1.1 200 OK\r\nAccept-Ranges: bytes\r\nCache-Control: no-cache\r\nContent-Encoding: gzip\r\nContent-Length: 26213\r\nContent-Type: text/css\r\nVary: Accept-Encoding\r\n```\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/api/src/main/java/run/halo/app/core/user/service/SignUpData.java b/api/src/main/java/run/halo/app/core/user/service/SignUpData.java\n--- a/api/src/main/java/run/halo/app/core/user/service/SignUpData.java\n+++ b/api/src/main/java/run/halo/app/core/user/service/SignUpData.java\n@@ -13,10 +13,7 @@\n import java.lang.annotation.RetentionPolicy;\n import java.lang.annotation.Target;\n import java.util.Objects;\n-import java.util.Optional;\n import lombok.Data;\n-import org.springframework.util.MultiValueMap;\n-import org.springframework.util.StringUtils;\n import run.halo.app.infra.ValidationUtils;\n \n /**\n@@ -52,35 +49,6 @@ public class SignUpData {\n     @NotBlank\n     private String confirmPassword;\n \n-    public static SignUpData of(MultiValueMap<String, String> formData) {\n-        var form = new SignUpData();\n-        Optional.ofNullable(formData.getFirst(\"username\"))\n-            .filter(StringUtils::hasText)\n-            .ifPresent(form::setUsername);\n-\n-        Optional.ofNullable(formData.getFirst(\"displayName\"))\n-            .filter(StringUtils::hasText)\n-            .ifPresent(form::setDisplayName);\n-\n-        Optional.ofNullable(formData.getFirst(\"email\"))\n-            .filter(StringUtils::hasText)\n-            .ifPresent(form::setEmail);\n-\n-        Optional.ofNullable(formData.getFirst(\"password\"))\n-            .filter(StringUtils::hasText)\n-            .ifPresent(form::setPassword);\n-\n-        Optional.ofNullable(formData.getFirst(\"emailCode\"))\n-            .filter(StringUtils::hasText)\n-            .ifPresent(form::setEmailCode);\n-\n-        Optional.ofNullable(formData.getFirst(\"confirmPassword\"))\n-            .filter(StringUtils::hasText)\n-            .ifPresent(form::setConfirmPassword);\n-\n-        return form;\n-    }\n-\n     @Target({ElementType.TYPE})\n     @Retention(RetentionPolicy.RUNTIME)\n     @Constraint(validatedBy = {SignUpDataConstraintValidator.class})\n\ndiff --git a/application/src/main/java/run/halo/app/security/preauth/PreAuthSignUpEndpoint.java b/application/src/main/java/run/halo/app/security/preauth/PreAuthSignUpEndpoint.java\n--- a/application/src/main/java/run/halo/app/security/preauth/PreAuthSignUpEndpoint.java\n+++ b/application/src/main/java/run/halo/app/security/preauth/PreAuthSignUpEndpoint.java\n@@ -79,8 +79,7 @@ RouterFunction<ServerResponse> preAuthSignUpEndpoints() {\n             .POST(\n                 \"\",\n                 contentType(APPLICATION_FORM_URLENCODED),\n-                request -> request.formData()\n-                    .map(SignUpData::of)\n+                request -> request.bind(SignUpData.class)\n                     .flatMap(signUpData -> {\n                         // sign up\n                         var bindingResult = validate(signUpData, validator, request.exchange());",
    "output": "Bind sign up data instead of building by hand (#6895)\n\n#### What type of PR is this?\r\n\r\n/kind improvement\r\n/area core\r\n/milestone 2.20.x\r\n\r\n#### What this PR does / why we need it:\r\n\r\nThis PR refactors sign up data binding using internal `bind` method in `ServerRequest` instead of binding my hand. It's more convenient and simpler.\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/security/preauth/SystemSetupEndpoint.java b/application/src/main/java/run/halo/app/security/preauth/SystemSetupEndpoint.java\n--- a/application/src/main/java/run/halo/app/security/preauth/SystemSetupEndpoint.java\n+++ b/application/src/main/java/run/halo/app/security/preauth/SystemSetupEndpoint.java\n@@ -1,5 +1,6 @@\n package run.halo.app.security.preauth;\n \n+import static io.r2dbc.spi.ConnectionFactoryOptions.DRIVER;\n import static io.swagger.v3.oas.annotations.media.Schema.RequiredMode.REQUIRED;\n import static org.springdoc.core.fn.builders.apiresponse.Builder.responseBuilder;\n import static org.springdoc.core.fn.builders.requestbody.Builder.requestBodyBuilder;\n@@ -18,11 +19,14 @@\n import java.time.Instant;\n import java.util.LinkedHashMap;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.Properties;\n import lombok.RequiredArgsConstructor;\n import org.springdoc.core.fn.builders.content.Builder;\n import org.springdoc.webflux.core.fn.SpringdocRouteBuilder;\n+import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.beans.factory.config.PlaceholderConfigurerSupport;\n+import org.springframework.boot.autoconfigure.r2dbc.R2dbcConnectionDetails;\n import org.springframework.context.annotation.Bean;\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.dao.OptimisticLockingFailureException;\n@@ -77,6 +81,7 @@ public class SystemSetupEndpoint {\n     private final PluginService pluginService;\n     private final ThemeService themeService;\n     private final Validator validator;\n+    private final ObjectProvider<R2dbcConnectionDetails> connectionDetails;\n \n     @Bean\n     RouterFunction<ServerResponse> setupPageRouter() {\n@@ -138,8 +143,10 @@ private static Mono<ServerResponse> handleSetupSuccessfully(ServerRequest reques\n     private Mono<ServerResponse> handleValidationErrors(BindingResult bindingResult,\n         ServerRequest request) {\n         if (isHtmlRequest(request)) {\n+            var model = bindingResult.getModel();\n+            model.put(\"usingH2database\", usingH2database());\n             return ServerResponse.status(HttpStatus.BAD_REQUEST)\n-                .render(SETUP_TEMPLATE, bindingResult.getModel());\n+                .render(SETUP_TEMPLATE, model);\n         }\n         return Mono.error(new RequestBodyValidationException(bindingResult));\n     }\n@@ -209,10 +216,25 @@ private Mono<ServerResponse> setupPage(ServerRequest request) {\n                 }\n                 var body = new SetupRequest(new LinkedMultiValueMap<>());\n                 var bindingResult = new BeanPropertyBindingResult(body, \"form\");\n-                return ServerResponse.ok().render(SETUP_TEMPLATE, bindingResult.getModel());\n+                var model = bindingResult.getModel();\n+                model.put(\"usingH2database\", usingH2database());\n+                return ServerResponse.ok().render(SETUP_TEMPLATE, model);\n             });\n     }\n \n+    private boolean usingH2database() {\n+        var rcd = connectionDetails.getIfUnique();\n+        if (rcd == null) {\n+            // If no R2dbcConnectionDetails is available, we assume H2(mem) is used.\n+            return true;\n+        }\n+        var options = rcd.getConnectionFactoryOptions();\n+        return Optional.ofNullable(options.getValue(DRIVER))\n+            .map(Object::toString)\n+            .map(\"h2\"::equalsIgnoreCase)\n+            .orElse(false);\n+    }\n+\n     record SetupRequest(MultiValueMap<String, String> formData) {\n \n         @Schema(requiredMode = REQUIRED, minLength = 4, maxLength = 63)",
    "output": "Merge pull request #6848 from ruibaby/feat/add-h2-alert-for-setup-page-2\n\nfeat: add H2 database usage warning for setup page"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/security/preauth/SystemSetupEndpoint.java b/application/src/main/java/run/halo/app/security/preauth/SystemSetupEndpoint.java\n--- a/application/src/main/java/run/halo/app/security/preauth/SystemSetupEndpoint.java\n+++ b/application/src/main/java/run/halo/app/security/preauth/SystemSetupEndpoint.java\n@@ -1,5 +1,6 @@\n package run.halo.app.security.preauth;\n \n+import static io.r2dbc.spi.ConnectionFactoryOptions.DRIVER;\n import static io.swagger.v3.oas.annotations.media.Schema.RequiredMode.REQUIRED;\n import static org.springdoc.core.fn.builders.apiresponse.Builder.responseBuilder;\n import static org.springdoc.core.fn.builders.requestbody.Builder.requestBodyBuilder;\n@@ -18,11 +19,14 @@\n import java.time.Instant;\n import java.util.LinkedHashMap;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.Properties;\n import lombok.RequiredArgsConstructor;\n import org.springdoc.core.fn.builders.content.Builder;\n import org.springdoc.webflux.core.fn.SpringdocRouteBuilder;\n+import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.beans.factory.config.PlaceholderConfigurerSupport;\n+import org.springframework.boot.autoconfigure.r2dbc.R2dbcConnectionDetails;\n import org.springframework.context.annotation.Bean;\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.dao.OptimisticLockingFailureException;\n@@ -77,6 +81,7 @@ public class SystemSetupEndpoint {\n     private final PluginService pluginService;\n     private final ThemeService themeService;\n     private final Validator validator;\n+    private final ObjectProvider<R2dbcConnectionDetails> connectionDetails;\n \n     @Bean\n     RouterFunction<ServerResponse> setupPageRouter() {\n@@ -138,8 +143,10 @@ private static Mono<ServerResponse> handleSetupSuccessfully(ServerRequest reques\n     private Mono<ServerResponse> handleValidationErrors(BindingResult bindingResult,\n         ServerRequest request) {\n         if (isHtmlRequest(request)) {\n+            var model = bindingResult.getModel();\n+            model.put(\"usingH2database\", usingH2database());\n             return ServerResponse.status(HttpStatus.BAD_REQUEST)\n-                .render(SETUP_TEMPLATE, bindingResult.getModel());\n+                .render(SETUP_TEMPLATE, model);\n         }\n         return Mono.error(new RequestBodyValidationException(bindingResult));\n     }\n@@ -209,10 +216,25 @@ private Mono<ServerResponse> setupPage(ServerRequest request) {\n                 }\n                 var body = new SetupRequest(new LinkedMultiValueMap<>());\n                 var bindingResult = new BeanPropertyBindingResult(body, \"form\");\n-                return ServerResponse.ok().render(SETUP_TEMPLATE, bindingResult.getModel());\n+                var model = bindingResult.getModel();\n+                model.put(\"usingH2database\", usingH2database());\n+                return ServerResponse.ok().render(SETUP_TEMPLATE, model);\n             });\n     }\n \n+    private boolean usingH2database() {\n+        var rcd = connectionDetails.getIfUnique();\n+        if (rcd == null) {\n+            // If no R2dbcConnectionDetails is available, we assume H2(mem) is used.\n+            return true;\n+        }\n+        var options = rcd.getConnectionFactoryOptions();\n+        return Optional.ofNullable(options.getValue(DRIVER))\n+            .map(Object::toString)\n+            .map(\"h2\"::equalsIgnoreCase)\n+            .orElse(false);\n+    }\n+\n     record SetupRequest(MultiValueMap<String, String> formData) {\n \n         @Schema(requiredMode = REQUIRED, minLength = 4, maxLength = 63)",
    "output": "Set usingH2database variable into setup template model"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/security/preauth/SystemSetupEndpoint.java b/application/src/main/java/run/halo/app/security/preauth/SystemSetupEndpoint.java\n--- a/application/src/main/java/run/halo/app/security/preauth/SystemSetupEndpoint.java\n+++ b/application/src/main/java/run/halo/app/security/preauth/SystemSetupEndpoint.java\n@@ -108,8 +108,7 @@ RouterFunction<ServerResponse> setupPageRouter() {\n                         .implementation(Void.class)\n                     )\n             )\n-            .before(HaloUtils.noCache(), builder -> {\n-            })\n+            .before(HaloUtils.noCache(), builder -> builder.operationId(\"SetNoCacheForSetUpPage\"))\n             .build();\n     }\n ",
    "output": "Fill operation ID while building setup route (#6857)\n\n#### What type of PR is this?\r\n\r\n/kind bug\r\n/area core\r\n/milestone 2.20.x\r\n\r\n#### What this PR does / why we need it:\r\n\r\nThis PR fills operation ID while building setup route to prevent errors when generating OpenAPI docs.\r\n\r\n```java\r\n2024-10-13T22:09:46.997+08:00 ERROR 68966 --- [     parallel-4] a.w.r.e.AbstractErrorWebExceptionHandler : [88654f05-3]  500 Server Error for HTTP GET \"/v3/api-docs/apis_aggregated.api_v1alpha1\"\r\n\r\njava.lang.IllegalStateException: You should either fill, the Operation or at least the bean class and the bean method\r\n\tat org.springdoc.core.fn.builders.operation.Builder.build(Builder.java:467) ~[springdoc-openapi-starter-common-2.6.0.jar:2.6.0]\r\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \r\n```\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/security/LogoutSecurityConfigurer.java b/application/src/main/java/run/halo/app/security/LogoutSecurityConfigurer.java\n--- a/application/src/main/java/run/halo/app/security/LogoutSecurityConfigurer.java\n+++ b/application/src/main/java/run/halo/app/security/LogoutSecurityConfigurer.java\n@@ -24,6 +24,7 @@\n import org.springframework.web.reactive.function.server.ServerResponse;\n import reactor.core.publisher.Mono;\n import run.halo.app.core.user.service.UserService;\n+import run.halo.app.infra.actuator.GlobalInfoService;\n import run.halo.app.security.authentication.SecurityConfigurer;\n import run.halo.app.security.authentication.rememberme.RememberMeServices;\n import run.halo.app.theme.router.ModelConst;\n@@ -59,7 +60,10 @@ public LogoutSuccessHandler(ServerLogoutHandler... logoutHandler) {\n         }\n \n         @Bean\n-        RouterFunction<ServerResponse> logoutPage(UserService userService) {\n+        RouterFunction<ServerResponse> logoutPage(\n+            UserService userService,\n+            GlobalInfoService globalInfoService\n+        ) {\n             return RouterFunctions.route()\n                 .GET(\"/logout\", request -> {\n                     var user = ReactiveSecurityContextHolder.getContext()\n@@ -69,6 +73,7 @@ RouterFunction<ServerResponse> logoutPage(UserService userService) {\n                     var exchange = request.exchange();\n                     var contextPath = exchange.getRequest().getPath().contextPath().value();\n                     return ServerResponse.ok().render(\"logout\", Map.of(\n+                        \"globalInfo\", globalInfoService.getGlobalInfo(),\n                         \"action\", contextPath + \"/logout\",\n                         \"user\", user\n                     ));",
    "output": "Add globalInfo into logout page (#6831)\n\n#### What type of PR is this?\r\n\r\n/kind improvement\r\n/area core\r\n/milestone 2.20.x\r\n\r\n#### What this PR does / why we need it:\r\n\r\nThis PR adds globalInfo data into logout template model.\r\n\r\n#### Which issue(s) this PR fixes:\r\n\r\nFixes https://github.com/halo-dev/halo/issues/6821\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/security/HaloServerRequestCache.java b/application/src/main/java/run/halo/app/security/HaloServerRequestCache.java\n--- a/application/src/main/java/run/halo/app/security/HaloServerRequestCache.java\n+++ b/application/src/main/java/run/halo/app/security/HaloServerRequestCache.java\n@@ -44,6 +44,7 @@ public HaloServerRequestCache() {\n     public Mono<Void> saveRequest(ServerWebExchange exchange) {\n         var redirectUriQuery = exchange.getRequest().getQueryParams().getFirst(REDIRECT_URI_QUERY);\n         if (StringUtils.isNotBlank(redirectUriQuery)) {\n+            // the query value is decoded, so we don't need to decode it again\n             var redirectUri = URI.create(redirectUriQuery);\n             return saveRedirectUri(exchange, redirectUri);\n         }\n@@ -64,8 +65,11 @@ private Mono<Void> saveRedirectUri(ServerWebExchange exchange, URI redirectUri)\n         var requestPath = exchange.getRequest().getPath();\n         var redirectPath = RequestPath.parse(redirectUri, requestPath.contextPath().value());\n         var query = redirectUri.getRawQuery();\n-        var finalRedirect =\n-            redirectPath.pathWithinApplication() + (query == null ? \"\" : \"?\" + query);\n+        var fragment = redirectUri.getRawFragment();\n+        var finalRedirect = redirectPath.pathWithinApplication()\n+            + (query == null ? \"\" : \"?\" + query)\n+            + (fragment == null ? \"\" : \"#\" + fragment);\n+\n         return exchange.getSession()\n             .map(WebSession::getAttributes)\n             .doOnNext(attributes -> attributes.put(this.sessionAttrName, finalRedirect))\n\ndiff --git a/application/src/test/java/run/halo/app/security/HaloServerRequestCacheTest.java b/application/src/test/java/run/halo/app/security/HaloServerRequestCacheTest.java\n--- a/application/src/test/java/run/halo/app/security/HaloServerRequestCacheTest.java\n+++ b/application/src/test/java/run/halo/app/security/HaloServerRequestCacheTest.java\n@@ -33,23 +33,28 @@ void shouldNotSaveIfPageNotCacheable() {\n     @Test\n     void shouldSaveIfPageCacheable() {\n         var mockExchange = MockServerWebExchange.from(\n-            MockServerHttpRequest.get(\"/archives\").accept(MediaType.TEXT_HTML)\n+            MockServerHttpRequest.get(\"/archives\")\n+                .queryParam(\"q\", \"v\")\n+                .accept(MediaType.TEXT_HTML)\n         );\n         requestCache.saveRequest(mockExchange)\n             .then(requestCache.getRedirectUri(mockExchange))\n             .as(StepVerifier::create)\n-            .expectNext(URI.create(\"/archives\"))\n+            .expectNext(URI.create(\"/archives?q=v\"))\n             .verifyComplete();\n     }\n \n     @Test\n-    void shouldSaveIfQueryPresent() {\n-        var mockExchange =\n-            MockServerWebExchange.from(MockServerHttpRequest.get(\"/login?redirect_uri=/halo?q=v\"));\n+    void shouldSaveIfRedirectUriPresent() {\n+        var mockExchange = MockServerWebExchange.from(\n+            MockServerHttpRequest.get(\"/login\")\n+                .queryParam(\"redirect_uri\", \"/halo?q=v#fragment\")\n+        );\n         requestCache.saveRequest(mockExchange)\n             .then(requestCache.getRedirectUri(mockExchange))\n             .as(StepVerifier::create)\n-            .expectNext(URI.create(\"/halo?q=v\"));\n+            .expectNext(URI.create(\"/halo?q=v#fragment\"))\n+            .verifyComplete();\n     }\n \n     @Test",
    "output": "Support redirecting to URI with fragment (#6817)\n\n#### What type of PR is this?\r\n\r\n/kind bug\r\n/area core\r\n/milestone 2.20.x\r\n\r\n#### What this PR does / why we need it:\r\n\r\nThis PR supports redirecting to URI with fragment. e.g.: <http://localhost:8090/login?redirect_uri=%2F%23afragment>(redirect_uri is `/#afragment`).\r\n\r\n#### Which issue(s) this PR fixes:\r\n\r\nFixes #6767 \r\n\r\n#### Special notes for your reviewer:\r\n\r\n1. Request <http://localhost:8090/login?redirect_uri=%2F%23afragment>\r\n2. Log in\r\n3. See the redirection\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/security/CsrfConfigurer.java b/application/src/main/java/run/halo/app/security/CsrfConfigurer.java\n--- a/application/src/main/java/run/halo/app/security/CsrfConfigurer.java\n+++ b/application/src/main/java/run/halo/app/security/CsrfConfigurer.java\n@@ -1,30 +1,29 @@\n package run.halo.app.security;\n \n-import static org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository.withHttpOnlyFalse;\n import static org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers;\n \n import org.springframework.security.config.web.server.ServerHttpSecurity;\n+import org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository;\n import org.springframework.security.web.server.csrf.CsrfWebFilter;\n-import org.springframework.security.web.server.csrf.ServerCsrfTokenRequestAttributeHandler;\n+import org.springframework.security.web.server.csrf.XorServerCsrfTokenRequestAttributeHandler;\n import org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher;\n import org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher;\n import org.springframework.stereotype.Component;\n import run.halo.app.security.authentication.SecurityConfigurer;\n \n @Component\n-public class CsrfConfigurer implements SecurityConfigurer {\n+class CsrfConfigurer implements SecurityConfigurer {\n \n     @Override\n     public void configure(ServerHttpSecurity http) {\n         var csrfMatcher = new AndServerWebExchangeMatcher(\n             CsrfWebFilter.DEFAULT_CSRF_MATCHER,\n-            new NegatedServerWebExchangeMatcher(pathMatchers(\"/api/**\", \"/apis/**\", \"/system/setup\")\n-            ));\n+            new NegatedServerWebExchangeMatcher(\n+                pathMatchers(\"/api/**\", \"/apis/**\", \"/system/setup\"))\n+        );\n         http.csrf(csrfSpec -> csrfSpec\n-            .csrfTokenRepository(withHttpOnlyFalse())\n-            // TODO Use XorServerCsrfTokenRequestAttributeHandler instead when console implements\n-            // the algorithm\n-            .csrfTokenRequestHandler(new ServerCsrfTokenRequestAttributeHandler())\n+            .csrfTokenRepository(new CookieServerCsrfTokenRepository())\n+            .csrfTokenRequestHandler(new XorServerCsrfTokenRequestAttributeHandler())\n             .requireCsrfProtectionMatcher(csrfMatcher));\n     }\n \n\ndiff --git a/application/src/test/java/run/halo/app/infra/exception/handlers/I18nExceptionTest.java b/application/src/test/java/run/halo/app/infra/exception/handlers/I18nExceptionTest.java\n--- a/application/src/test/java/run/halo/app/infra/exception/handlers/I18nExceptionTest.java\n+++ b/application/src/test/java/run/halo/app/infra/exception/handlers/I18nExceptionTest.java\n@@ -1,6 +1,7 @@\n package run.halo.app.infra.exception.handlers;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.springframework.security.test.web.reactive.server.SecurityMockServerConfigurers.csrf;\n \n import java.util.Locale;\n import org.junit.jupiter.api.AfterEach;\n@@ -121,9 +122,8 @@ void shouldGetErrorIfThrowingGeneralException() {\n \n     @Test\n     void shouldGetConflictError() {\n-        webClient.put().uri(\"/response-entity/conflict-error\")\n-            .header(\"X-XSRF-TOKEN\", \"fake-token\")\n-            .cookie(\"XSRF-TOKEN\", \"fake-token\")\n+        webClient.mutate().apply(csrf()).build()\n+            .put().uri(\"/response-entity/conflict-error\")\n             .exchange()\n             .expectStatus().isEqualTo(HttpStatus.CONFLICT)\n             .expectBody(ProblemDetail.class)",
    "output": "Xor CSRF token (#6798)\n\n#### What type of PR is this?\r\n\r\n/kind improvement\r\n/area core\r\n/milestone 2.20.x\r\n\r\n#### What this PR does / why we need it:\r\n\r\nThis PR makes XOR operation for CSRF token and changes the CSRF cookie `HttpOnly` to `true` to forbid JavaScript from accessing the cookie.\r\n\r\nSee https://docs.spring.io/spring-security/reference/servlet/exploits/csrf.html#csrf-token-request-handler-breach for more details.\r\n\r\n#### Special notes for your reviewer:\r\n\r\n```bash\r\nhttp http://localhost:8090/login -ph\r\n\r\nHTTP/1.1 200 OK\r\nset-cookie: XSRF-TOKEN=6d5dd83f-f0a7-4d94-a33e-73f213d679ff; Path=/; HTTPOnly\r\n```\r\n\r\n```bash\r\nhttp http://localhost:8090/login -pb | grep _csrf\r\n\r\n><input type=\"hidden\" name=\"_csrf\" value=\"ctubmrEC3dAbxC5H_k_-VnVUtih2BrfjcPfLmVAyaP0a1kAdEb-t_IcwuLM29B11yGLKNRQxm0lFZILOFZX-_GcHWJ974iR5\"/>\r\n```\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/security/authentication/login/UsernamePasswordHandler.java b/application/src/main/java/run/halo/app/security/authentication/login/UsernamePasswordHandler.java\n--- a/application/src/main/java/run/halo/app/security/authentication/login/UsernamePasswordHandler.java\n+++ b/application/src/main/java/run/halo/app/security/authentication/login/UsernamePasswordHandler.java\n@@ -46,7 +46,7 @@ public class UsernamePasswordHandler implements ServerAuthenticationSuccessHandl\n     private RememberMeRequestCache rememberMeRequestCache = new WebSessionRememberMeRequestCache();\n \n     private final ServerAuthenticationSuccessHandler defaultSuccessHandler =\n-        new RedirectServerAuthenticationSuccessHandler(\"/console/\");\n+        new RedirectServerAuthenticationSuccessHandler(\"/uc\");\n \n     public UsernamePasswordHandler(ServerResponse.Context context, MessageSource messageSource,\n         LoginHandlerEnhancer loginHandlerEnhancer) {",
    "output": "Redirect to user center after authenticating successfully (#6797)\n\n#### What type of PR is this?\r\n\r\n/kind cleanup\r\n/area core\r\n/milestone 2.20.x\r\n\r\n#### What this PR does / why we need it:\r\n\r\nThis PR changes the redirect URI to `/uc` instead of `/console` after authenticating successfully.\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/test/java/run/halo/app/XForwardHeaderTest.java b/application/src/test/java/run/halo/app/XForwardHeaderTest.java\n--- a/application/src/test/java/run/halo/app/XForwardHeaderTest.java\n+++ b/application/src/test/java/run/halo/app/XForwardHeaderTest.java\n@@ -17,7 +17,7 @@\n import reactor.test.StepVerifier;\n \n @SpringBootTest(webEnvironment = RANDOM_PORT,\n-    properties = \"server.forward-headers-strategy=framework\")\n+    properties = \"server.forward-headers-strategy=native\")\n class XForwardHeaderTest {\n \n     @LocalServerPort",
    "output": "Fix the problem of not being able to resolve headers correctly (#6786)\n\n#### What type of PR is this?\r\n\r\n/kind bug\r\n/area core\r\n/milestone 2.20.x\r\n\r\n#### What this PR does / why we need it:\r\n\r\nThis PR changes server.forward-header-strategy to native instead of framework due to a bug of Spring Framework 6.20.0-RC.1.\r\n\r\nSee https://github.com/spring-projects/spring-framework/pull/32097#discussion_r1791264218 for more.\r\n\r\nIf Halo server is proxied by OpenResty which is using HTTP 2, all header names proxied into Halo server will be lowercase. This behavior makes Halo get a null header(e.g.:: `content-type: application/json`) while invoking `request.getHeaders().getContentType()`.\r\n\r\nAnd I found that `ServerHttpRequest` is mutated by `org.springframework.web.server.adapter.ForwardedHeaderTransformer`, so I try to use native forward-header-strategy to resolve the problem and it works very well. See [reactor.netty.http.server.DefaultHttpForwardedHeaderHandler](https://github.com/reactor/reactor-netty/blob/446683826b3020782fe3d647ef264ca7eace94f6/reactor-netty-http/src/main/java/reactor/netty/http/server/DefaultHttpForwardedHeaderHandler.java) for more.\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/content/PostService.java b/application/src/main/java/run/halo/app/content/PostService.java\n--- a/application/src/main/java/run/halo/app/content/PostService.java\n+++ b/application/src/main/java/run/halo/app/content/PostService.java\n@@ -50,4 +50,6 @@ public interface PostService {\n     Mono<Post> revertToSpecifiedSnapshot(String postName, String snapshotName);\n \n     Mono<ContentWrapper> deleteContent(String postName, String snapshotName);\n+\n+    Mono<Post> recycleBy(String postName, String username);\n }\n\ndiff --git a/application/src/main/java/run/halo/app/content/impl/PostServiceImpl.java b/application/src/main/java/run/halo/app/content/impl/PostServiceImpl.java\n--- a/application/src/main/java/run/halo/app/content/impl/PostServiceImpl.java\n+++ b/application/src/main/java/run/halo/app/content/impl/PostServiceImpl.java\n@@ -379,6 +379,15 @@ public Mono<ContentWrapper> deleteContent(String postName, String snapshotName)\n             });\n     }\n \n+    @Override\n+    public Mono<Post> recycleBy(String postName, String username) {\n+        return getByUsername(postName, username)\n+            .flatMap(post -> updatePostWithRetry(post, record -> {\n+                record.getSpec().setDeleted(true);\n+                return record;\n+            }));\n+    }\n+\n     private Mono<Post> updatePostWithRetry(Post post, UnaryOperator<Post> func) {\n         return client.update(func.apply(post))\n             .onErrorResume(OptimisticLockingFailureException.class,\n\ndiff --git a/application/src/main/java/run/halo/app/core/endpoint/uc/UcPostEndpoint.java b/application/src/main/java/run/halo/app/core/endpoint/uc/UcPostEndpoint.java\n--- a/application/src/main/java/run/halo/app/core/endpoint/uc/UcPostEndpoint.java\n+++ b/application/src/main/java/run/halo/app/core/endpoint/uc/UcPostEndpoint.java\n@@ -124,13 +124,27 @@ public RouterFunction<ServerResponse> endpoint() {\n                         .operationId(\"UnpublishMyPost\")\n                         .description(\"Unpublish my post.\")\n                         .parameter(namePathParam)\n-                        .response(responseBuilder().implementation(Post.class)))\n+                        .response(responseBuilder().implementation(Post.class))\n+                    )\n+                    .DELETE(\"/{name}/recycle\", this::recycleMyPost, builder -> builder.tag(tag)\n+                        .operationId(\"RecycleMyPost\")\n+                        .description(\"Move my post to recycle bin.\")\n+                        .parameter(namePathParam)\n+                        .response(responseBuilder().implementation(Post.class))\n+                    )\n                     .build(),\n                 builder -> {\n                 })\n             .build();\n     }\n \n+    private Mono<ServerResponse> recycleMyPost(ServerRequest request) {\n+        final var name = request.pathVariable(\"name\");\n+        return getCurrentUser()\n+            .flatMap(username -> postService.recycleBy(name, username))\n+            .flatMap(post -> ServerResponse.ok().bodyValue(post));\n+    }\n+\n     private Mono<ServerResponse> getMyPostDraft(ServerRequest request) {\n         var name = request.pathVariable(\"name\");\n         var patched = request.queryParam(\"patched\").map(Boolean::valueOf).orElse(false);",
    "output": "Merge pull request #6729 from guqing/feature/5851\n\nfeat: support deleting posts in user center"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/infra/config/WebServerSecurityConfig.java b/application/src/main/java/run/halo/app/infra/config/WebServerSecurityConfig.java\n--- a/application/src/main/java/run/halo/app/infra/config/WebServerSecurityConfig.java\n+++ b/application/src/main/java/run/halo/app/infra/config/WebServerSecurityConfig.java\n@@ -44,6 +44,7 @@\n import run.halo.app.security.authentication.pat.PatAuthenticationManager;\n import run.halo.app.security.authentication.pat.PatServerWebExchangeMatcher;\n import run.halo.app.security.authorization.AuthorityUtils;\n+import run.halo.app.security.authorization.NotAuthenticatedAuthorizationManager;\n import run.halo.app.security.authorization.RequestInfoAuthorizationManager;\n import run.halo.app.security.session.InMemoryReactiveIndexedSessionRepository;\n import run.halo.app.security.session.ReactiveIndexedSessionRepository;\n@@ -90,6 +91,8 @@ SecurityWebFilterChain filterChain(ServerHttpSecurity http,\n                     \"/apis/**\",\n                     \"/actuator/**\"\n                 ).access(new RequestInfoAuthorizationManager(roleService))\n+                .pathMatchers(HttpMethod.GET, \"/login\", \"/signup\")\n+                .access(new NotAuthenticatedAuthorizationManager())\n                 .pathMatchers(\n                     \"/login/**\",\n                     \"/challenges/**\",\n\ndiff --git a/application/src/main/java/run/halo/app/security/ExceptionSecurityConfigurer.java b/application/src/main/java/run/halo/app/security/ExceptionSecurityConfigurer.java\n--- a/application/src/main/java/run/halo/app/security/ExceptionSecurityConfigurer.java\n+++ b/application/src/main/java/run/halo/app/security/ExceptionSecurityConfigurer.java\n@@ -1,7 +1,11 @@\n package run.halo.app.security;\n \n+import static org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.anyExchange;\n+import static org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers;\n+\n import java.util.ArrayList;\n import org.springframework.context.MessageSource;\n+import org.springframework.http.HttpMethod;\n import org.springframework.http.HttpStatus;\n import org.springframework.security.config.web.server.ServerHttpSecurity;\n import org.springframework.security.oauth2.server.resource.web.access.server.BearerTokenServerAccessDeniedHandler;\n@@ -11,8 +15,6 @@\n import org.springframework.security.web.server.authorization.HttpStatusServerAccessDeniedHandler;\n import org.springframework.security.web.server.authorization.ServerWebExchangeDelegatingServerAccessDeniedHandler;\n import org.springframework.security.web.server.savedrequest.ServerRequestCache;\n-import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher;\n-import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers;\n import org.springframework.stereotype.Component;\n import org.springframework.web.reactive.function.server.ServerResponse;\n import run.halo.app.security.authentication.SecurityConfigurer;\n@@ -40,7 +42,7 @@ public void configure(ServerHttpSecurity http) {\n         http.exceptionHandling(exception -> {\n             var accessDeniedHandlers =\n                 new ArrayList<ServerWebExchangeDelegatingServerAccessDeniedHandler.DelegateEntry>(\n-                    2\n+                    3\n                 );\n             accessDeniedHandlers.add(\n                 new ServerWebExchangeDelegatingServerAccessDeniedHandler.DelegateEntry(\n@@ -51,19 +53,24 @@ public void configure(ServerHttpSecurity http) {\n                 ));\n             accessDeniedHandlers.add(\n                 new ServerWebExchangeDelegatingServerAccessDeniedHandler.DelegateEntry(\n-                    ServerWebExchangeMatchers.anyExchange(),\n+                    pathMatchers(HttpMethod.GET, \"/login\", \"/signup\"),\n+                    new RedirectAccessDeniedHandler(\"/uc\")\n+                ));\n+            accessDeniedHandlers.add(\n+                new ServerWebExchangeDelegatingServerAccessDeniedHandler.DelegateEntry(\n+                    anyExchange(),\n                     new HttpStatusServerAccessDeniedHandler(HttpStatus.FORBIDDEN)\n                 )\n             );\n \n             var entryPoints =\n-                new ArrayList<DelegatingServerAuthenticationEntryPoint.DelegateEntry>(3);\n+                new ArrayList<DelegatingServerAuthenticationEntryPoint.DelegateEntry>(2);\n             entryPoints.add(new DelegatingServerAuthenticationEntryPoint.DelegateEntry(\n                 TwoFactorAuthenticationEntryPoint.MATCHER,\n                 new TwoFactorAuthenticationEntryPoint(messageSource, context)\n             ));\n             entryPoints.add(new DelegatingServerAuthenticationEntryPoint.DelegateEntry(\n-                exchange -> ServerWebExchangeMatcher.MatchResult.match(),\n+                anyExchange(),\n                 new DefaultServerAuthenticationEntryPoint(serverRequestCache)\n             ));\n \n\ndiff --git a/application/src/main/java/run/halo/app/security/RedirectAccessDeniedHandler.java b/application/src/main/java/run/halo/app/security/RedirectAccessDeniedHandler.java\n--- a/application/src/main/java/run/halo/app/security/RedirectAccessDeniedHandler.java\n+++ b/application/src/main/java/run/halo/app/security/RedirectAccessDeniedHandler.java\n@@ -0,0 +1,31 @@\n+package run.halo.app.security;\n+\n+import java.net.URI;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.web.server.DefaultServerRedirectStrategy;\n+import org.springframework.security.web.server.ServerRedirectStrategy;\n+import org.springframework.security.web.server.authorization.ServerAccessDeniedHandler;\n+import org.springframework.web.server.ServerWebExchange;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * Redirect access denied handler.\n+ *\n+ * @author johnniang\n+ * @since 2.20.0\n+ */\n+public class RedirectAccessDeniedHandler implements ServerAccessDeniedHandler {\n+\n+    private final ServerRedirectStrategy redirectStrategy = new DefaultServerRedirectStrategy();\n+\n+    private final URI redirectUri;\n+\n+    public RedirectAccessDeniedHandler(String redirectUri) {\n+        this.redirectUri = URI.create(redirectUri);\n+    }\n+\n+    @Override\n+    public Mono<Void> handle(ServerWebExchange exchange, AccessDeniedException denied) {\n+        return redirectStrategy.sendRedirect(exchange, redirectUri);\n+    }\n+}\n\ndiff --git a/application/src/main/java/run/halo/app/security/authorization/NotAuthenticatedAuthorizationManager.java b/application/src/main/java/run/halo/app/security/authorization/NotAuthenticatedAuthorizationManager.java\n--- a/application/src/main/java/run/halo/app/security/authorization/NotAuthenticatedAuthorizationManager.java\n+++ b/application/src/main/java/run/halo/app/security/authorization/NotAuthenticatedAuthorizationManager.java\n@@ -0,0 +1,30 @@\n+package run.halo.app.security.authorization;\n+\n+import org.springframework.security.authentication.AuthenticationTrustResolver;\n+import org.springframework.security.authentication.AuthenticationTrustResolverImpl;\n+import org.springframework.security.authorization.AuthorizationDecision;\n+import org.springframework.security.authorization.ReactiveAuthorizationManager;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.web.server.authorization.AuthorizationContext;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * Authorization manager that checks if the user is not authenticated.\n+ *\n+ * @author johnniang\n+ * @since 2.20.0\n+ */\n+public class NotAuthenticatedAuthorizationManager\n+    implements ReactiveAuthorizationManager<AuthorizationContext> {\n+\n+    private final AuthenticationTrustResolver trustResolver = new AuthenticationTrustResolverImpl();\n+\n+    @Override\n+    public Mono<AuthorizationDecision> check(Mono<Authentication> authentication,\n+        AuthorizationContext object) {\n+        return authentication.map(a -> !trustResolver.isAuthenticated(a))\n+            .defaultIfEmpty(true)\n+            .map(AuthorizationDecision::new);\n+    }\n+\n+}",
    "output": "Redirect to user center if authenticated users access login and signup pages (#6740)\n\n#### What type of PR is this?\r\n\r\n/kind improvement\r\n/area core\r\n/milestone 2.20.x\r\n\r\n#### What this PR does / why we need it:\r\n\r\nThis PR make authenticated users redirect to user center if they are trying to access login and signup pages.\r\n\r\n#### Special notes for your reviewer:\r\n\r\n1. Log in Halo\r\n2. Try to request <http://localhost:8090/login> or <http://localhost:8090/signup>.\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/api/src/main/java/run/halo/app/event/user/UserConnectionDisconnectedEvent.java b/api/src/main/java/run/halo/app/event/user/UserConnectionDisconnectedEvent.java\n--- a/api/src/main/java/run/halo/app/event/user/UserConnectionDisconnectedEvent.java\n+++ b/api/src/main/java/run/halo/app/event/user/UserConnectionDisconnectedEvent.java\n@@ -0,0 +1,25 @@\n+package run.halo.app.event.user;\n+\n+import lombok.Getter;\n+import org.springframework.context.ApplicationEvent;\n+import run.halo.app.core.extension.UserConnection;\n+import run.halo.app.plugin.SharedEvent;\n+\n+/**\n+ * An event that will be triggered after a user connection is disconnected.\n+ *\n+ * @author johnniang\n+ * @since 2.20.0\n+ */\n+@SharedEvent\n+public class UserConnectionDisconnectedEvent extends ApplicationEvent {\n+\n+    @Getter\n+    private final UserConnection userConnection;\n+\n+    public UserConnectionDisconnectedEvent(Object source, UserConnection userConnection) {\n+        super(source);\n+        this.userConnection = userConnection;\n+    }\n+\n+}\n\ndiff --git a/application/src/main/java/run/halo/app/core/endpoint/uc/UserConnectionEndpoint.java b/application/src/main/java/run/halo/app/core/endpoint/uc/UserConnectionEndpoint.java\n--- a/application/src/main/java/run/halo/app/core/endpoint/uc/UserConnectionEndpoint.java\n+++ b/application/src/main/java/run/halo/app/core/endpoint/uc/UserConnectionEndpoint.java\n@@ -0,0 +1,74 @@\n+package run.halo.app.core.endpoint.uc;\n+\n+import static org.springdoc.core.fn.builders.apiresponse.Builder.responseBuilder;\n+\n+import io.swagger.v3.oas.annotations.enums.ParameterIn;\n+import org.springdoc.core.fn.builders.parameter.Builder;\n+import org.springdoc.webflux.core.fn.SpringdocRouteBuilder;\n+import org.springframework.security.authentication.AuthenticationTrustResolver;\n+import org.springframework.security.authentication.AuthenticationTrustResolverImpl;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.context.ReactiveSecurityContextHolder;\n+import org.springframework.security.core.context.SecurityContext;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.reactive.function.server.RouterFunction;\n+import org.springframework.web.reactive.function.server.ServerResponse;\n+import run.halo.app.core.extension.UserConnection;\n+import run.halo.app.core.extension.endpoint.CustomEndpoint;\n+import run.halo.app.core.user.service.UserConnectionService;\n+import run.halo.app.extension.GroupVersion;\n+\n+/**\n+ * User connection endpoint.\n+ *\n+ * @author johnniang\n+ * @since 2.20.0\n+ */\n+@Component\n+public class UserConnectionEndpoint implements CustomEndpoint {\n+\n+    private final UserConnectionService connectionService;\n+\n+    private final AuthenticationTrustResolver authenticationTrustResolver =\n+        new AuthenticationTrustResolverImpl();\n+\n+    public UserConnectionEndpoint(UserConnectionService connectionService) {\n+        this.connectionService = connectionService;\n+    }\n+\n+    @Override\n+    public RouterFunction<ServerResponse> endpoint() {\n+        var tag = \"UserConnectionV1alpha1Uc\";\n+        return SpringdocRouteBuilder.route()\n+            .PUT(\n+                \"/user-connections/{registerId}/disconnect\",\n+                request -> {\n+                    var removedUserConnections = ReactiveSecurityContextHolder.getContext()\n+                        .map(SecurityContext::getAuthentication)\n+                        .filter(authenticationTrustResolver::isAuthenticated)\n+                        .map(Authentication::getName)\n+                        .flatMapMany(username -> connectionService.removeUserConnection(\n+                            request.pathVariable(\"registerId\"), username)\n+                        );\n+                    return ServerResponse.ok().body(removedUserConnections, UserConnection.class);\n+                },\n+                builder -> builder.operationId(\"DisconnectMyConnection\")\n+                    .description(\"Disconnect my connection from a third-party platform.\")\n+                    .tag(tag)\n+                    .parameter(Builder.parameterBuilder()\n+                        .in(ParameterIn.PATH)\n+                        .name(\"registerId\")\n+                        .description(\"The registration ID of the third-party platform.\")\n+                        .required(true)\n+                        .implementation(String.class)\n+                    )\n+                    .response(responseBuilder().implementationArray(UserConnection.class))\n+            )\n+            .build();\n+    }\n+\n+    @Override\n+    public GroupVersion groupVersion() {\n+        return GroupVersion.parseAPIVersion(\"uc.api.auth.halo.run/v1alpha1\");\n+    }\n+}\n\ndiff --git a/application/src/main/java/run/halo/app/core/user/service/UserConnectionService.java b/application/src/main/java/run/halo/app/core/user/service/UserConnectionService.java\n--- a/application/src/main/java/run/halo/app/core/user/service/UserConnectionService.java\n+++ b/application/src/main/java/run/halo/app/core/user/service/UserConnectionService.java\n@@ -1,6 +1,7 @@\n package run.halo.app.core.user.service;\n \n import org.springframework.security.oauth2.core.user.OAuth2User;\n+import reactor.core.publisher.Flux;\n import reactor.core.publisher.Mono;\n import run.halo.app.core.extension.UserConnection;\n \n@@ -32,4 +33,13 @@ Mono<UserConnection> updateUserConnectionIfPresent(\n         String registrationId, OAuth2User oauth2User\n     );\n \n+    /**\n+     * Remove user connection.\n+     *\n+     * @param registrationId Registration ID\n+     * @param username Username\n+     * @return A list of user connections\n+     */\n+    Flux<UserConnection> removeUserConnection(String registrationId, String username);\n+\n }\n\ndiff --git a/application/src/main/java/run/halo/app/core/user/service/impl/UserConnectionServiceImpl.java b/application/src/main/java/run/halo/app/core/user/service/impl/UserConnectionServiceImpl.java\n--- a/application/src/main/java/run/halo/app/core/user/service/impl/UserConnectionServiceImpl.java\n+++ b/application/src/main/java/run/halo/app/core/user/service/impl/UserConnectionServiceImpl.java\n@@ -7,12 +7,15 @@\n import java.time.Clock;\n import java.util.HashMap;\n import java.util.Optional;\n+import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.security.oauth2.core.user.OAuth2User;\n import org.springframework.stereotype.Service;\n+import reactor.core.publisher.Flux;\n import reactor.core.publisher.Mono;\n import run.halo.app.core.extension.UserConnection;\n import run.halo.app.core.extension.UserConnection.UserConnectionSpec;\n import run.halo.app.core.user.service.UserConnectionService;\n+import run.halo.app.event.user.UserConnectionDisconnectedEvent;\n import run.halo.app.extension.ListOptions;\n import run.halo.app.extension.Metadata;\n import run.halo.app.extension.MetadataOperator;\n@@ -25,10 +28,14 @@ public class UserConnectionServiceImpl implements UserConnectionService {\n \n     private final ReactiveExtensionClient client;\n \n+    private final ApplicationEventPublisher eventPublisher;\n+\n     private Clock clock = Clock.systemDefaultZone();\n \n-    public UserConnectionServiceImpl(ReactiveExtensionClient client) {\n+    public UserConnectionServiceImpl(ReactiveExtensionClient client,\n+        ApplicationEventPublisher eventPublisher) {\n         this.client = client;\n+        this.eventPublisher = eventPublisher;\n     }\n \n     void setClock(Clock clock) {\n@@ -91,6 +98,21 @@ public Mono<UserConnection> updateUserConnectionIfPresent(String registrationId,\n             .flatMap(connection -> updateUserConnection(connection, oauth2User));\n     }\n \n+    @Override\n+    public Flux<UserConnection> removeUserConnection(String registrationId, String username) {\n+        var listOptions = ListOptions.builder()\n+            .fieldQuery(and(\n+                equal(\"spec.registrationId\", registrationId),\n+                equal(\"spec.username\", username)\n+            ))\n+            .build();\n+        return client.listAll(UserConnection.class, listOptions, defaultSort())\n+            .flatMap(client::delete)\n+            .doOnNext(deleted ->\n+                eventPublisher.publishEvent(new UserConnectionDisconnectedEvent(this, deleted))\n+            );\n+    }\n+\n     private void updateUserInfo(MetadataOperator metadata, OAuth2User oauth2User) {\n         var annotations = Optional.ofNullable(metadata.getAnnotations())\n             .orElseGet(HashMap::new);",
    "output": "Support unbinding OAuth2User from Halo side (#6734)\n\n#### What type of PR is this?\r\n\r\n/kind feature\r\n/area core\r\n/milestone 2.20.x\r\n\r\n#### What this PR does / why we need it:\r\n\r\nThis PR provides an endpoint for disconnecting user connection. After the user connection is disconnected, an event `UserConnectionDisconnectedEvent` will be published for plugins.\r\n\r\nNow, OAuth2 plugin can simplify the authentication, binding  and unbinding logic, please see the AuthProvider configuration snippet below:\r\n\r\n```diff\r\nspec:\r\n  authenticationUrl: /oauth2/authorization/github\r\n- bindingUrl: /apis/api.plugin.halo.run/v1alpha1/plugins/plugin-oauth2/connect/github\r\n+ bindingUrl: /oauth2/authorization/github\r\n- unbindUrl: /apis/api.plugin.halo.run/v1alpha1/plugins/plugin-oauth2/disconnect/github\r\n+ unbindUrl: /apis/uc.api.auth.halo.run/v1alpha1/user-connections/github/disconnect\r\n```\r\n\r\nPlease note that, OAuth2 plugin can also define binding and unbinding endpoints by self.\r\n\r\n#### Special notes for your reviewer:\r\n\r\nOAuth2 test plugin: \r\n[plugin-oauth2-1.0.4-SNAPSHOT.zip](https://github.com/user-attachments/files/17184215/plugin-oauth2-1.0.4-SNAPSHOT.zip)\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/core/user/service/SignUpData.java b/application/src/main/java/run/halo/app/core/user/service/SignUpData.java\n--- a/application/src/main/java/run/halo/app/core/user/service/SignUpData.java\n+++ b/application/src/main/java/run/halo/app/core/user/service/SignUpData.java\n@@ -1,7 +1,16 @@\n package run.halo.app.core.user.service;\n \n+import jakarta.validation.Constraint;\n+import jakarta.validation.ConstraintValidator;\n+import jakarta.validation.ConstraintValidatorContext;\n+import jakarta.validation.Payload;\n import jakarta.validation.constraints.Email;\n import jakarta.validation.constraints.NotBlank;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import java.util.Objects;\n import java.util.Optional;\n import lombok.Data;\n import org.springframework.util.MultiValueMap;\n@@ -14,6 +23,7 @@\n  * @since 2.20.0\n  */\n @Data\n+@SignUpData.SignUpDataConstraint\n public class SignUpData {\n \n     @NotBlank\n@@ -30,6 +40,9 @@ public class SignUpData {\n     @NotBlank\n     private String password;\n \n+    @NotBlank\n+    private String confirmPassword;\n+\n     public static SignUpData of(MultiValueMap<String, String> formData) {\n         var form = new SignUpData();\n         Optional.ofNullable(formData.getFirst(\"username\"))\n@@ -52,6 +65,41 @@ public static SignUpData of(MultiValueMap<String, String> formData) {\n             .filter(StringUtils::hasText)\n             .ifPresent(form::setEmailCode);\n \n+        Optional.ofNullable(formData.getFirst(\"confirmPassword\"))\n+            .filter(StringUtils::hasText)\n+            .ifPresent(form::setConfirmPassword);\n+\n         return form;\n     }\n+\n+    @Target({ElementType.TYPE})\n+    @Retention(RetentionPolicy.RUNTIME)\n+    @Constraint(validatedBy = {SignUpDataConstraintValidator.class})\n+    public @interface SignUpDataConstraint {\n+\n+        String message() default \"\";\n+\n+        Class<?>[] groups() default { };\n+\n+        Class<? extends Payload>[] payload() default { };\n+\n+    }\n+\n+    private static class SignUpDataConstraintValidator\n+        implements ConstraintValidator<SignUpDataConstraint, SignUpData> {\n+\n+        @Override\n+        public boolean isValid(SignUpData signUpData, ConstraintValidatorContext context) {\n+            var isValid = Objects.equals(signUpData.getPassword(), signUpData.getConfirmPassword());\n+            if (!isValid) {\n+                context.disableDefaultConstraintViolation();\n+                context.buildConstraintViolationWithTemplate(\n+                        \"{signup.error.confirm-password-not-match}\"\n+                    )\n+                    .addPropertyNode(\"confirmPassword\")\n+                    .addConstraintViolation();\n+            }\n+            return isValid;\n+        }\n+    }\n }\n\ndiff --git a/application/src/main/java/run/halo/app/security/preauth/PreAuthSignUpEndpoint.java b/application/src/main/java/run/halo/app/security/preauth/PreAuthSignUpEndpoint.java\n--- a/application/src/main/java/run/halo/app/security/preauth/PreAuthSignUpEndpoint.java\n+++ b/application/src/main/java/run/halo/app/security/preauth/PreAuthSignUpEndpoint.java\n@@ -103,8 +103,7 @@ RouterFunction<ServerResponse> preAuthSignUpEndpoints() {\n                                         \"emailCode\",\n                                         signUpData.getEmailCode(),\n                                         true,\n-                                        // TODO Refine i18n\n-                                        new String[] {\"signup.error.email-captcha.invalid\"},\n+                                        new String[] {\"signup.error.email-code.invalid\"},\n                                         null,\n                                         \"Invalid Email Code\"));\n                                 }",
    "output": "Fix the inaccessible problem of signup page (#6730)\n\n#### What type of PR is this?\r\n\r\n/kind bug\r\n/area core\r\n/milestone 2.20.x\r\n\r\n#### What this PR does / why we need it:\r\n\r\nThis PR adds confirmPassword field into SignUpData for validation. So the signup page can be rendered correctly.\r\n\r\nSee https://github.com/halo-dev/halo/issues/6718 for more.\r\n\r\n#### Which issue(s) this PR fixes:\r\n\r\nFixes https://github.com/halo-dev/halo/issues/6718\r\n\r\n#### Special notes for your reviewer:\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/content/PostService.java b/application/src/main/java/run/halo/app/content/PostService.java\n--- a/application/src/main/java/run/halo/app/content/PostService.java\n+++ b/application/src/main/java/run/halo/app/content/PostService.java\n@@ -50,4 +50,6 @@ public interface PostService {\n     Mono<Post> revertToSpecifiedSnapshot(String postName, String snapshotName);\n \n     Mono<ContentWrapper> deleteContent(String postName, String snapshotName);\n+\n+    Mono<Post> recycleBy(String postName, String username);\n }\n\ndiff --git a/application/src/main/java/run/halo/app/content/impl/PostServiceImpl.java b/application/src/main/java/run/halo/app/content/impl/PostServiceImpl.java\n--- a/application/src/main/java/run/halo/app/content/impl/PostServiceImpl.java\n+++ b/application/src/main/java/run/halo/app/content/impl/PostServiceImpl.java\n@@ -379,6 +379,15 @@ public Mono<ContentWrapper> deleteContent(String postName, String snapshotName)\n             });\n     }\n \n+    @Override\n+    public Mono<Post> recycleBy(String postName, String username) {\n+        return getByUsername(postName, username)\n+            .flatMap(post -> updatePostWithRetry(post, record -> {\n+                record.getSpec().setDeleted(true);\n+                return record;\n+            }));\n+    }\n+\n     private Mono<Post> updatePostWithRetry(Post post, UnaryOperator<Post> func) {\n         return client.update(func.apply(post))\n             .onErrorResume(OptimisticLockingFailureException.class,\n\ndiff --git a/application/src/main/java/run/halo/app/core/endpoint/uc/UcPostEndpoint.java b/application/src/main/java/run/halo/app/core/endpoint/uc/UcPostEndpoint.java\n--- a/application/src/main/java/run/halo/app/core/endpoint/uc/UcPostEndpoint.java\n+++ b/application/src/main/java/run/halo/app/core/endpoint/uc/UcPostEndpoint.java\n@@ -124,13 +124,27 @@ public RouterFunction<ServerResponse> endpoint() {\n                         .operationId(\"UnpublishMyPost\")\n                         .description(\"Unpublish my post.\")\n                         .parameter(namePathParam)\n-                        .response(responseBuilder().implementation(Post.class)))\n+                        .response(responseBuilder().implementation(Post.class))\n+                    )\n+                    .DELETE(\"/{name}/recycle\", this::recycleMyPost, builder -> builder.tag(tag)\n+                        .operationId(\"RecycleMyPost\")\n+                        .description(\"Move my post to recycle bin.\")\n+                        .parameter(namePathParam)\n+                        .response(responseBuilder().implementation(Post.class))\n+                    )\n                     .build(),\n                 builder -> {\n                 })\n             .build();\n     }\n \n+    private Mono<ServerResponse> recycleMyPost(ServerRequest request) {\n+        final var name = request.pathVariable(\"name\");\n+        return getCurrentUser()\n+            .flatMap(username -> postService.recycleBy(name, username))\n+            .flatMap(post -> ServerResponse.ok().bodyValue(post));\n+    }\n+\n     private Mono<ServerResponse> getMyPostDraft(ServerRequest request) {\n         var name = request.pathVariable(\"name\");\n         var patched = request.queryParam(\"patched\").map(Boolean::valueOf).orElse(false);",
    "output": "feat: add API for recycle users own posts"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/core/endpoint/SystemConfigEndpoint.java b/application/src/main/java/run/halo/app/core/endpoint/SystemConfigEndpoint.java\n--- a/application/src/main/java/run/halo/app/core/endpoint/SystemConfigEndpoint.java\n+++ b/application/src/main/java/run/halo/app/core/endpoint/SystemConfigEndpoint.java\n@@ -0,0 +1,102 @@\n+package run.halo.app.core.endpoint;\n+\n+import static org.springdoc.core.fn.builders.apiresponse.Builder.responseBuilder;\n+import static org.springdoc.core.fn.builders.content.Builder.contentBuilder;\n+import static org.springdoc.core.fn.builders.parameter.Builder.parameterBuilder;\n+import static org.springdoc.core.fn.builders.requestbody.Builder.requestBodyBuilder;\n+\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import io.swagger.v3.oas.annotations.enums.ParameterIn;\n+import java.time.Duration;\n+import lombok.RequiredArgsConstructor;\n+import org.springdoc.webflux.core.fn.SpringdocRouteBuilder;\n+import org.springframework.dao.OptimisticLockingFailureException;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.reactive.function.server.RouterFunction;\n+import org.springframework.web.reactive.function.server.ServerRequest;\n+import org.springframework.web.reactive.function.server.ServerResponse;\n+import reactor.core.publisher.Mono;\n+import reactor.util.retry.Retry;\n+import run.halo.app.core.extension.endpoint.CustomEndpoint;\n+import run.halo.app.extension.GroupVersion;\n+import run.halo.app.extension.ReactiveExtensionClient;\n+import run.halo.app.infra.SystemConfigurableEnvironmentFetcher;\n+import run.halo.app.infra.utils.JsonUtils;\n+\n+@Component\n+@RequiredArgsConstructor\n+public class SystemConfigEndpoint implements CustomEndpoint {\n+    private final SystemConfigurableEnvironmentFetcher configurableEnvironmentFetcher;\n+    private final ReactiveExtensionClient client;\n+\n+    @Override\n+    public RouterFunction<ServerResponse> endpoint() {\n+        final var tag = \"SystemConfigV1alpha1Console\";\n+        return SpringdocRouteBuilder.route()\n+            .GET(\"/systemconfigs/{group}\", this::getConfigByGroup,\n+                builder -> builder.operationId(\"getSystemConfigByGroup\")\n+                    .description(\"Get system config by group\")\n+                    .tag(tag)\n+                    .response(responseBuilder()\n+                        .content(contentBuilder()\n+                            .mediaType(MediaType.APPLICATION_JSON_VALUE)\n+                        )\n+                        .implementation(ObjectNode.class))\n+                    .parameter(parameterBuilder()\n+                        .in(ParameterIn.PATH)\n+                        .name(\"group\")\n+                        .required(true)\n+                        .description(\"Group of the system config\")\n+                    )\n+            )\n+            .PUT(\"/systemconfigs/{group}\", this::updateConfigByGroup,\n+                builder -> builder.operationId(\"updateSystemConfigByGroup\")\n+                    .description(\"Update system config by group\")\n+                    .tag(tag)\n+                    .parameter(parameterBuilder()\n+                        .in(ParameterIn.PATH)\n+                        .name(\"group\")\n+                        .required(true)\n+                        .description(\"Group of the system config\")\n+                    )\n+                    .requestBody(requestBodyBuilder()\n+                        .implementation(ObjectNode.class)\n+                    )\n+                    .response(responseBuilder()\n+                        .responseCode(String.valueOf(HttpStatus.NO_CONTENT))\n+                        .implementation(Void.class)\n+                    )\n+            )\n+            .build();\n+    }\n+\n+    private Mono<ServerResponse> updateConfigByGroup(ServerRequest request) {\n+        final var group = request.pathVariable(\"group\");\n+        return request.bodyToMono(ObjectNode.class)\n+            .flatMap(objectNode -> configurableEnvironmentFetcher.getConfigMap()\n+                .flatMap(configMap -> {\n+                    var data = configMap.getData();\n+                    data.put(group, JsonUtils.objectToJson(objectNode));\n+                    return client.update(configMap);\n+                })\n+            )\n+            .retryWhen(Retry.backoff(5, Duration.ofMillis(100))\n+                .filter(OptimisticLockingFailureException.class::isInstance))\n+            .then(ServerResponse.noContent().build());\n+    }\n+\n+    private Mono<ServerResponse> getConfigByGroup(ServerRequest request) {\n+        final var group = request.pathVariable(\"group\");\n+        return configurableEnvironmentFetcher.fetch(group, ObjectNode.class)\n+            .switchIfEmpty(Mono.fromSupplier(JsonNodeFactory.instance::objectNode))\n+            .flatMap(json -> ServerResponse.ok().bodyValue(json));\n+    }\n+\n+    @Override\n+    public GroupVersion groupVersion() {\n+        return new GroupVersion(\"console.api.halo.run\", \"v1alpha1\");\n+    }\n+}",
    "output": "Merge pull request #6688 from guqing/refactor/6468\n\nfix: resolve 403 error on menu page when system config access is missing"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/infra/config/WebFluxConfig.java b/application/src/main/java/run/halo/app/infra/config/WebFluxConfig.java\n--- a/application/src/main/java/run/halo/app/infra/config/WebFluxConfig.java\n+++ b/application/src/main/java/run/halo/app/infra/config/WebFluxConfig.java\n@@ -26,6 +26,7 @@\n import org.springframework.http.codec.json.Jackson2JsonDecoder;\n import org.springframework.http.codec.json.Jackson2JsonEncoder;\n import org.springframework.lang.NonNull;\n+import org.springframework.web.filter.reactive.ServerWebExchangeContextFilter;\n import org.springframework.web.reactive.config.ResourceHandlerRegistration;\n import org.springframework.web.reactive.config.ResourceHandlerRegistry;\n import org.springframework.web.reactive.config.WebFluxConfigurer;\n@@ -252,4 +253,11 @@ AdditionalWebFilterChainProxy additionalWebFilterChainProxy(ExtensionGetter exte\n         return new AdditionalWebFilterChainProxy(extensionGetter);\n     }\n \n+    @Bean\n+    // We expect this filter to be executed before AdditionalWebFilterChainProxy\n+    @Order(-102)\n+    ServerWebExchangeContextFilter serverWebExchangeContextFilter() {\n+        return new ServerWebExchangeContextFilter();\n+    }\n+\n }\n\ndiff --git a/application/src/test/java/run/halo/app/config/WebFluxConfigTest.java b/application/src/test/java/run/halo/app/config/WebFluxConfigTest.java\n--- a/application/src/test/java/run/halo/app/config/WebFluxConfigTest.java\n+++ b/application/src/test/java/run/halo/app/config/WebFluxConfigTest.java\n@@ -1,6 +1,7 @@\n package run.halo.app.config;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.mockito.Mockito.when;\n \n import java.net.URI;\n@@ -18,10 +19,15 @@\n import org.springframework.context.annotation.Import;\n import org.springframework.test.context.bean.override.mockito.MockitoSpyBean;\n import org.springframework.test.web.reactive.server.WebTestClient;\n+import org.springframework.web.filter.reactive.ServerWebExchangeContextFilter;\n+import org.springframework.web.reactive.function.server.RouterFunction;\n+import org.springframework.web.reactive.function.server.RouterFunctions;\n+import org.springframework.web.reactive.function.server.ServerResponse;\n import org.springframework.web.reactive.socket.WebSocketHandler;\n import org.springframework.web.reactive.socket.WebSocketMessage;\n import org.springframework.web.reactive.socket.client.ReactorNettyWebSocketClient;\n import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n import reactor.test.StepVerifier;\n import run.halo.app.core.endpoint.WebSocketEndpoint;\n import run.halo.app.core.extension.Role;\n@@ -31,7 +37,10 @@\n \n @SpringBootTest(properties = \"halo.console.location=classpath:/console/\", webEnvironment =\n     SpringBootTest.WebEnvironment.RANDOM_PORT)\n-@Import(WebFluxConfigTest.WebSocketSupportTest.TestWebSocketConfiguration.class)\n+@Import({\n+    WebFluxConfigTest.WebSocketSupportTest.TestWebSocketConfiguration.class,\n+    WebFluxConfigTest.ServerWebExchangeContextFilterTest.TestConfig.class\n+})\n @AutoConfigureWebTestClient\n class WebFluxConfigTest {\n \n@@ -154,4 +163,34 @@ void shouldRespond404WhenThemeResourceNotFound() {\n                 .expectStatus().isNotFound();\n         }\n     }\n+\n+\n+    @Nested\n+    class ServerWebExchangeContextFilterTest {\n+\n+        @TestConfiguration\n+        static class TestConfig {\n+\n+            @Bean\n+            RouterFunction<ServerResponse> assertServerWebExchangeRoute() {\n+                return RouterFunctions.route()\n+                    .GET(\"/assert-server-web-exchange\",\n+                        request -> Mono.deferContextual(contextView -> {\n+                            var exchange = ServerWebExchangeContextFilter.getExchange(contextView);\n+                            assertTrue(exchange.isPresent());\n+                            return ServerResponse.ok().build();\n+                        }))\n+                    .build();\n+            }\n+\n+        }\n+\n+        @Test\n+        void shouldGetExchangeFromContextView() {\n+            webClient.get().uri(\"/assert-server-web-exchange\")\n+                .exchange()\n+                .expectStatus().isOk();\n+        }\n+\n+    }\n }\n\\ No newline at end of file",
    "output": "Merge branch 'main' into refactor/setting-config-update"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/infra/config/WebFluxConfig.java b/application/src/main/java/run/halo/app/infra/config/WebFluxConfig.java\n--- a/application/src/main/java/run/halo/app/infra/config/WebFluxConfig.java\n+++ b/application/src/main/java/run/halo/app/infra/config/WebFluxConfig.java\n@@ -26,6 +26,7 @@\n import org.springframework.http.codec.json.Jackson2JsonDecoder;\n import org.springframework.http.codec.json.Jackson2JsonEncoder;\n import org.springframework.lang.NonNull;\n+import org.springframework.web.filter.reactive.ServerWebExchangeContextFilter;\n import org.springframework.web.reactive.config.ResourceHandlerRegistration;\n import org.springframework.web.reactive.config.ResourceHandlerRegistry;\n import org.springframework.web.reactive.config.WebFluxConfigurer;\n@@ -252,4 +253,11 @@ AdditionalWebFilterChainProxy additionalWebFilterChainProxy(ExtensionGetter exte\n         return new AdditionalWebFilterChainProxy(extensionGetter);\n     }\n \n+    @Bean\n+    // We expect this filter to be executed before AdditionalWebFilterChainProxy\n+    @Order(-102)\n+    ServerWebExchangeContextFilter serverWebExchangeContextFilter() {\n+        return new ServerWebExchangeContextFilter();\n+    }\n+\n }\n\ndiff --git a/application/src/test/java/run/halo/app/config/WebFluxConfigTest.java b/application/src/test/java/run/halo/app/config/WebFluxConfigTest.java\n--- a/application/src/test/java/run/halo/app/config/WebFluxConfigTest.java\n+++ b/application/src/test/java/run/halo/app/config/WebFluxConfigTest.java\n@@ -1,6 +1,7 @@\n package run.halo.app.config;\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.mockito.Mockito.when;\n \n import java.net.URI;\n@@ -18,10 +19,15 @@\n import org.springframework.context.annotation.Import;\n import org.springframework.test.context.bean.override.mockito.MockitoSpyBean;\n import org.springframework.test.web.reactive.server.WebTestClient;\n+import org.springframework.web.filter.reactive.ServerWebExchangeContextFilter;\n+import org.springframework.web.reactive.function.server.RouterFunction;\n+import org.springframework.web.reactive.function.server.RouterFunctions;\n+import org.springframework.web.reactive.function.server.ServerResponse;\n import org.springframework.web.reactive.socket.WebSocketHandler;\n import org.springframework.web.reactive.socket.WebSocketMessage;\n import org.springframework.web.reactive.socket.client.ReactorNettyWebSocketClient;\n import reactor.core.publisher.Flux;\n+import reactor.core.publisher.Mono;\n import reactor.test.StepVerifier;\n import run.halo.app.core.endpoint.WebSocketEndpoint;\n import run.halo.app.core.extension.Role;\n@@ -31,7 +37,10 @@\n \n @SpringBootTest(properties = \"halo.console.location=classpath:/console/\", webEnvironment =\n     SpringBootTest.WebEnvironment.RANDOM_PORT)\n-@Import(WebFluxConfigTest.WebSocketSupportTest.TestWebSocketConfiguration.class)\n+@Import({\n+    WebFluxConfigTest.WebSocketSupportTest.TestWebSocketConfiguration.class,\n+    WebFluxConfigTest.ServerWebExchangeContextFilterTest.TestConfig.class\n+})\n @AutoConfigureWebTestClient\n class WebFluxConfigTest {\n \n@@ -154,4 +163,34 @@ void shouldRespond404WhenThemeResourceNotFound() {\n                 .expectStatus().isNotFound();\n         }\n     }\n+\n+\n+    @Nested\n+    class ServerWebExchangeContextFilterTest {\n+\n+        @TestConfiguration\n+        static class TestConfig {\n+\n+            @Bean\n+            RouterFunction<ServerResponse> assertServerWebExchangeRoute() {\n+                return RouterFunctions.route()\n+                    .GET(\"/assert-server-web-exchange\",\n+                        request -> Mono.deferContextual(contextView -> {\n+                            var exchange = ServerWebExchangeContextFilter.getExchange(contextView);\n+                            assertTrue(exchange.isPresent());\n+                            return ServerResponse.ok().build();\n+                        }))\n+                    .build();\n+            }\n+\n+        }\n+\n+        @Test\n+        void shouldGetExchangeFromContextView() {\n+            webClient.get().uri(\"/assert-server-web-exchange\")\n+                .exchange()\n+                .expectStatus().isOk();\n+        }\n+\n+    }\n }\n\\ No newline at end of file",
    "output": "Support obtaining ServerWebExchange in ContextView (#6705)\n\n#### What type of PR is this?\r\n\r\n/kind feature\r\n/area core\r\n/milestone 2.20.x\r\n\r\n#### What this PR does / why we need it:\r\n\r\nThis PR registers a ServerWebExchangeContextFilter to make ServerWebExchange available under ContextView. The usage example is as follows:\r\n\r\n```java\r\nMono.deferContextual(contextView -> {\r\n    var exchange = ServerWebExchangeContextFilter.getExchange(contextView);\r\n    assertTrue(exchange.isPresent());\r\n    return mono;\r\n})\r\n```\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/core/endpoint/SystemConfigEndpoint.java b/application/src/main/java/run/halo/app/core/endpoint/SystemConfigEndpoint.java\n--- a/application/src/main/java/run/halo/app/core/endpoint/SystemConfigEndpoint.java\n+++ b/application/src/main/java/run/halo/app/core/endpoint/SystemConfigEndpoint.java\n@@ -3,26 +3,34 @@\n import static org.springdoc.core.fn.builders.apiresponse.Builder.responseBuilder;\n import static org.springdoc.core.fn.builders.content.Builder.contentBuilder;\n import static org.springdoc.core.fn.builders.parameter.Builder.parameterBuilder;\n+import static org.springdoc.core.fn.builders.requestbody.Builder.requestBodyBuilder;\n \n import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import io.swagger.v3.oas.annotations.enums.ParameterIn;\n+import java.time.Duration;\n import lombok.RequiredArgsConstructor;\n import org.springdoc.webflux.core.fn.SpringdocRouteBuilder;\n+import org.springframework.dao.OptimisticLockingFailureException;\n+import org.springframework.http.HttpStatus;\n import org.springframework.http.MediaType;\n import org.springframework.stereotype.Component;\n import org.springframework.web.reactive.function.server.RouterFunction;\n import org.springframework.web.reactive.function.server.ServerRequest;\n import org.springframework.web.reactive.function.server.ServerResponse;\n import reactor.core.publisher.Mono;\n+import reactor.util.retry.Retry;\n import run.halo.app.core.extension.endpoint.CustomEndpoint;\n import run.halo.app.extension.GroupVersion;\n+import run.halo.app.extension.ReactiveExtensionClient;\n import run.halo.app.infra.SystemConfigurableEnvironmentFetcher;\n+import run.halo.app.infra.utils.JsonUtils;\n \n @Component\n @RequiredArgsConstructor\n public class SystemConfigEndpoint implements CustomEndpoint {\n     private final SystemConfigurableEnvironmentFetcher configurableEnvironmentFetcher;\n+    private final ReactiveExtensionClient client;\n \n     @Override\n     public RouterFunction<ServerResponse> endpoint() {\n@@ -44,9 +52,42 @@ public RouterFunction<ServerResponse> endpoint() {\n                         .description(\"Group of the system config\")\n                     )\n             )\n+            .PUT(\"/systemconfigs/{group}\", this::updateConfigByGroup,\n+                builder -> builder.operationId(\"updateSystemConfigByGroup\")\n+                    .description(\"Update system config by group\")\n+                    .tag(tag)\n+                    .parameter(parameterBuilder()\n+                        .in(ParameterIn.PATH)\n+                        .name(\"group\")\n+                        .required(true)\n+                        .description(\"Group of the system config\")\n+                    )\n+                    .requestBody(requestBodyBuilder()\n+                        .implementation(ObjectNode.class)\n+                    )\n+                    .response(responseBuilder()\n+                        .responseCode(String.valueOf(HttpStatus.NO_CONTENT))\n+                        .implementation(Void.class)\n+                    )\n+            )\n             .build();\n     }\n \n+    private Mono<ServerResponse> updateConfigByGroup(ServerRequest request) {\n+        final var group = request.pathVariable(\"group\");\n+        return request.bodyToMono(ObjectNode.class)\n+            .flatMap(objectNode -> configurableEnvironmentFetcher.getConfigMap()\n+                .flatMap(configMap -> {\n+                    var data = configMap.getData();\n+                    data.put(group, JsonUtils.objectToJson(objectNode));\n+                    return client.update(configMap);\n+                })\n+            )\n+            .retryWhen(Retry.backoff(5, Duration.ofMillis(100))\n+                .filter(OptimisticLockingFailureException.class::isInstance))\n+            .then(ServerResponse.noContent().build());\n+    }\n+\n     private Mono<ServerResponse> getConfigByGroup(ServerRequest request) {\n         final var group = request.pathVariable(\"group\");\n         return configurableEnvironmentFetcher.fetch(group, ObjectNode.class)",
    "output": "feat: add API to update system config by group"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/core/endpoint/SystemConfigEndpoint.java b/application/src/main/java/run/halo/app/core/endpoint/SystemConfigEndpoint.java\n--- a/application/src/main/java/run/halo/app/core/endpoint/SystemConfigEndpoint.java\n+++ b/application/src/main/java/run/halo/app/core/endpoint/SystemConfigEndpoint.java\n@@ -0,0 +1,61 @@\n+package run.halo.app.core.endpoint;\n+\n+import static org.springdoc.core.fn.builders.apiresponse.Builder.responseBuilder;\n+import static org.springdoc.core.fn.builders.content.Builder.contentBuilder;\n+import static org.springdoc.core.fn.builders.parameter.Builder.parameterBuilder;\n+\n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import io.swagger.v3.oas.annotations.enums.ParameterIn;\n+import lombok.RequiredArgsConstructor;\n+import org.springdoc.webflux.core.fn.SpringdocRouteBuilder;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.reactive.function.server.RouterFunction;\n+import org.springframework.web.reactive.function.server.ServerRequest;\n+import org.springframework.web.reactive.function.server.ServerResponse;\n+import reactor.core.publisher.Mono;\n+import run.halo.app.core.extension.endpoint.CustomEndpoint;\n+import run.halo.app.extension.GroupVersion;\n+import run.halo.app.infra.SystemConfigurableEnvironmentFetcher;\n+\n+@Component\n+@RequiredArgsConstructor\n+public class SystemConfigEndpoint implements CustomEndpoint {\n+    private final SystemConfigurableEnvironmentFetcher configurableEnvironmentFetcher;\n+\n+    @Override\n+    public RouterFunction<ServerResponse> endpoint() {\n+        final var tag = \"SystemConfigV1alpha1Console\";\n+        return SpringdocRouteBuilder.route()\n+            .GET(\"/systemconfigs/{group}\", this::getConfigByGroup,\n+                builder -> builder.operationId(\"getSystemConfigByGroup\")\n+                    .description(\"Get system config by group\")\n+                    .tag(tag)\n+                    .response(responseBuilder()\n+                        .content(contentBuilder()\n+                            .mediaType(MediaType.APPLICATION_JSON_VALUE)\n+                        )\n+                        .implementation(ObjectNode.class))\n+                    .parameter(parameterBuilder()\n+                        .in(ParameterIn.PATH)\n+                        .name(\"group\")\n+                        .required(true)\n+                        .description(\"Group of the system config\")\n+                    )\n+            )\n+            .build();\n+    }\n+\n+    private Mono<ServerResponse> getConfigByGroup(ServerRequest request) {\n+        final var group = request.pathVariable(\"group\");\n+        return configurableEnvironmentFetcher.fetch(group, ObjectNode.class)\n+            .switchIfEmpty(Mono.fromSupplier(JsonNodeFactory.instance::objectNode))\n+            .flatMap(json -> ServerResponse.ok().bodyValue(json));\n+    }\n+\n+    @Override\n+    public GroupVersion groupVersion() {\n+        return new GroupVersion(\"console.api.halo.run\", \"v1alpha1\");\n+    }\n+}",
    "output": "feat: add API to fetch system configs by group"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/config/WebFluxConfig.java b/application/src/main/java/run/halo/app/config/WebFluxConfig.java\n--- a/application/src/main/java/run/halo/app/config/WebFluxConfig.java\n+++ b/application/src/main/java/run/halo/app/config/WebFluxConfig.java\n@@ -12,6 +12,7 @@\n import java.util.Objects;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.autoconfigure.web.WebProperties;\n+import org.springframework.boot.autoconfigure.web.reactive.WebFluxRegistrations;\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n@@ -33,6 +34,7 @@\n import org.springframework.web.reactive.function.server.ServerResponse;\n import org.springframework.web.reactive.resource.EncodedResourceResolver;\n import org.springframework.web.reactive.resource.PathResourceResolver;\n+import org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter;\n import org.springframework.web.reactive.result.view.ViewResolutionResultHandler;\n import org.springframework.web.reactive.result.view.ViewResolver;\n import reactor.core.publisher.Mono;\n@@ -41,6 +43,7 @@\n import run.halo.app.core.endpoint.WebSocketHandlerMapping;\n import run.halo.app.core.extension.endpoint.CustomEndpoint;\n import run.halo.app.core.extension.endpoint.CustomEndpointsBuilder;\n+import run.halo.app.infra.SecureRequestMappingHandlerAdapter;\n import run.halo.app.infra.properties.AttachmentProperties;\n import run.halo.app.infra.properties.HaloProperties;\n import run.halo.app.plugin.extensionpoint.ExtensionGetter;\n@@ -67,6 +70,19 @@ public WebFluxConfig(ObjectMapper objectMapper,\n         this.applicationContext = applicationContext;\n     }\n \n+    @Bean\n+    WebFluxRegistrations webFluxRegistrations() {\n+        return new WebFluxRegistrations() {\n+            @Override\n+            public RequestMappingHandlerAdapter getRequestMappingHandlerAdapter() {\n+                // Because we have no chance to customize ServerWebExchangeMethodArgumentResolver,\n+                // we have to use SecureRequestMappingHandlerAdapter to replace a secure\n+                // ServerWebExchange.\n+                return new SecureRequestMappingHandlerAdapter();\n+            }\n+        };\n+    }\n+\n     @Bean\n     ServerResponse.Context context(CodecConfigurer codec,\n         ViewResolutionResultHandler resultHandler) {\n\ndiff --git a/application/src/main/java/run/halo/app/infra/SecureRequestMappingHandlerAdapter.java b/application/src/main/java/run/halo/app/infra/SecureRequestMappingHandlerAdapter.java\n--- a/application/src/main/java/run/halo/app/infra/SecureRequestMappingHandlerAdapter.java\n+++ b/application/src/main/java/run/halo/app/infra/SecureRequestMappingHandlerAdapter.java\n@@ -0,0 +1,26 @@\n+package run.halo.app.infra;\n+\n+import org.springframework.lang.NonNull;\n+import org.springframework.web.reactive.HandlerResult;\n+import org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter;\n+import org.springframework.web.server.ServerWebExchange;\n+import reactor.core.publisher.Mono;\n+\n+/**\n+ * Secure request mapping handler adapter.\n+ *\n+ * @author johnniang\n+ * @since 2.20.0\n+ */\n+public class SecureRequestMappingHandlerAdapter extends RequestMappingHandlerAdapter {\n+\n+    @Override\n+    @NonNull\n+    public Mono<HandlerResult> handle(\n+        @NonNull ServerWebExchange exchange,\n+        @NonNull Object handler\n+    ) {\n+        return super.handle(new SecureServerWebExchange(exchange), handler);\n+    }\n+\n+}\n\ndiff --git a/application/src/main/java/run/halo/app/infra/SecureServerRequest.java b/application/src/main/java/run/halo/app/infra/SecureServerRequest.java\n--- a/application/src/main/java/run/halo/app/infra/SecureServerRequest.java\n+++ b/application/src/main/java/run/halo/app/infra/SecureServerRequest.java\n@@ -0,0 +1,31 @@\n+package run.halo.app.infra;\n+\n+import org.springframework.lang.NonNull;\n+import org.springframework.web.reactive.function.server.ServerRequest;\n+import org.springframework.web.reactive.function.server.support.ServerRequestWrapper;\n+import org.springframework.web.server.ServerWebExchange;\n+\n+/**\n+ * Secure server request without application context available.\n+ *\n+ * @author johnniang\n+ * @since 2.20.0\n+ */\n+public class SecureServerRequest extends ServerRequestWrapper {\n+\n+    /**\n+     * Create a new {@code ServerRequestWrapper} that wraps the given request.\n+     *\n+     * @param delegate the request to wrap\n+     */\n+    public SecureServerRequest(ServerRequest delegate) {\n+        super(delegate);\n+    }\n+\n+    @Override\n+    @NonNull\n+    public ServerWebExchange exchange() {\n+        return new SecureServerWebExchange(super.exchange());\n+    }\n+\n+}\n\ndiff --git a/application/src/main/java/run/halo/app/infra/SecureServerWebExchange.java b/application/src/main/java/run/halo/app/infra/SecureServerWebExchange.java\n--- a/application/src/main/java/run/halo/app/infra/SecureServerWebExchange.java\n+++ b/application/src/main/java/run/halo/app/infra/SecureServerWebExchange.java\n@@ -0,0 +1,25 @@\n+package run.halo.app.infra;\n+\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.web.server.ServerWebExchange;\n+import org.springframework.web.server.ServerWebExchangeDecorator;\n+\n+/**\n+ * Secure server web exchange without application context available.\n+ *\n+ * @author johnniang\n+ * @since 2.20.0\n+ */\n+public class SecureServerWebExchange extends ServerWebExchangeDecorator {\n+\n+    public SecureServerWebExchange(ServerWebExchange delegate) {\n+        super(delegate);\n+    }\n+\n+    @Override\n+    public ApplicationContext getApplicationContext() {\n+        // Always return null to prevent access to application context\n+        return null;\n+    }\n+\n+}\n\ndiff --git a/application/src/main/java/run/halo/app/plugin/AggregatedRouterFunction.java b/application/src/main/java/run/halo/app/plugin/AggregatedRouterFunction.java\n--- a/application/src/main/java/run/halo/app/plugin/AggregatedRouterFunction.java\n+++ b/application/src/main/java/run/halo/app/plugin/AggregatedRouterFunction.java\n@@ -9,6 +9,7 @@\n import reactor.core.publisher.Mono;\n import run.halo.app.core.extension.endpoint.CustomEndpoint;\n import run.halo.app.core.extension.endpoint.CustomEndpointsBuilder;\n+import run.halo.app.infra.SecureServerRequest;\n \n /**\n  * Aggregated router function built from all custom endpoints.\n@@ -28,7 +29,7 @@ public AggregatedRouterFunction(ObjectProvider<CustomEndpoint> customEndpoints)\n \n     @Override\n     public Mono<HandlerFunction<ServerResponse>> route(ServerRequest request) {\n-        return aggregated.route(request);\n+        return aggregated.route(new SecureServerRequest(request));\n     }\n \n     @Override\n\ndiff --git a/application/src/main/java/run/halo/app/plugin/DefaultPluginRouterFunctionRegistry.java b/application/src/main/java/run/halo/app/plugin/DefaultPluginRouterFunctionRegistry.java\n--- a/application/src/main/java/run/halo/app/plugin/DefaultPluginRouterFunctionRegistry.java\n+++ b/application/src/main/java/run/halo/app/plugin/DefaultPluginRouterFunctionRegistry.java\n@@ -11,6 +11,7 @@\n import org.springframework.web.reactive.function.server.ServerResponse;\n import reactor.core.publisher.Flux;\n import reactor.core.publisher.Mono;\n+import run.halo.app.infra.SecureServerRequest;\n \n /**\n  * A composite {@link RouterFunction} implementation for plugin.\n@@ -31,8 +32,9 @@ public DefaultPluginRouterFunctionRegistry() {\n     @Override\n     @NonNull\n     public Mono<HandlerFunction<ServerResponse>> route(@NonNull ServerRequest request) {\n+        var secureRequest = new SecureServerRequest(request);\n         return Flux.fromIterable(this.routerFunctions)\n-            .concatMap(routerFunction -> routerFunction.route(request))\n+            .concatMap(routerFunction -> routerFunction.route(secureRequest))\n             .next();\n     }\n ",
    "output": "Make ApplicationContext inaccessible in ServerWebExchange (#6679)\n\n#### What type of PR is this?\r\n\r\n/kind improvement\r\n/area core\r\n/area plugin\r\n/milestone 2.20.x\r\n\r\n#### What this PR does / why we need it:\r\n\r\nPlugins can implement their own RouterFunctions and ControllerMappings, but those might expose root ApplicationContext for plugins, which is not expected.\r\n\r\nSo this PR fixes the insecure access to root ApplicationContext.\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/theme/ThemeLocaleContextResolver.java b/application/src/main/java/run/halo/app/theme/ThemeLocaleContextResolver.java\n--- a/application/src/main/java/run/halo/app/theme/ThemeLocaleContextResolver.java\n+++ b/application/src/main/java/run/halo/app/theme/ThemeLocaleContextResolver.java\n@@ -1,15 +1,15 @@\n package run.halo.app.theme;\n \n import java.util.Locale;\n+import java.util.Optional;\n import java.util.TimeZone;\n-import java.util.function.Function;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.lang3.StringUtils;\n import org.springframework.context.i18n.LocaleContext;\n import org.springframework.context.i18n.SimpleTimeZoneAwareLocaleContext;\n import org.springframework.http.HttpCookie;\n+import org.springframework.http.server.reactive.ServerHttpRequest;\n import org.springframework.lang.NonNull;\n-import org.springframework.lang.Nullable;\n import org.springframework.stereotype.Component;\n import org.springframework.web.server.ServerWebExchange;\n import org.springframework.web.server.adapter.WebHttpHandlerBuilder;\n@@ -22,71 +22,45 @@\n @Slf4j\n @Component(WebHttpHandlerBuilder.LOCALE_CONTEXT_RESOLVER_BEAN_NAME)\n public class ThemeLocaleContextResolver extends AcceptHeaderLocaleContextResolver {\n-    public static final String TIME_ZONE_REQUEST_ATTRIBUTE_NAME =\n-        ThemeLocaleContextResolver.class.getName() + \".TIME_ZONE\";\n-    public static final String LOCALE_REQUEST_ATTRIBUTE_NAME =\n-        ThemeLocaleContextResolver.class.getName() + \".LOCALE\";\n \n-    public static final String DEFAULT_PARAMETER_NAME = \"language\";\n-    public static final String TIME_ZONE_COOKIE_NAME = \"time_zone\";\n+    public static final String LANGUAGE_PARAMETER_NAME = \"language\";\n+\n+    public static final String LANGUAGE_COOKIE_NAME = LANGUAGE_PARAMETER_NAME;\n \n-    private final Function<ServerWebExchange, TimeZone> defaultTimeZoneFunction =\n-        exchange -> getDefaultTimeZone();\n+    public static final String TIME_ZONE_COOKIE_NAME = \"time_zone\";\n \n     @Override\n     @NonNull\n     public LocaleContext resolveLocaleContext(@NonNull ServerWebExchange exchange) {\n-        parseLocaleCookieIfNecessary(exchange);\n+        var request = exchange.getRequest();\n+        var locale = getLocaleFromQueryParameter(request)\n+            .or(() -> getLocaleFromCookie(request))\n+            .orElseGet(() -> super.resolveLocaleContext(exchange).getLocale());\n \n-        Locale locale = getLocale(exchange);\n+        var timeZone = getTimeZoneFromCookie(request)\n+            .orElseGet(TimeZone::getDefault);\n \n-        return new SimpleTimeZoneAwareLocaleContext(locale,\n-            exchange.getAttribute(TIME_ZONE_REQUEST_ATTRIBUTE_NAME));\n+        return new SimpleTimeZoneAwareLocaleContext(locale, timeZone);\n     }\n \n-    @Nullable\n-    private Locale getLocale(ServerWebExchange exchange) {\n-        String language = exchange.getRequest().getQueryParams()\n-            .getFirst(DEFAULT_PARAMETER_NAME);\n-\n-        Locale locale;\n-        if (StringUtils.isNotBlank(language)) {\n-            locale = Locale.forLanguageTag(language);\n-        } else if (exchange.getAttribute(LOCALE_REQUEST_ATTRIBUTE_NAME) != null) {\n-            locale = exchange.getAttribute(LOCALE_REQUEST_ATTRIBUTE_NAME);\n-        } else {\n-            locale = super.resolveLocaleContext(exchange).getLocale();\n-        }\n-        return locale;\n+    private Optional<Locale> getLocaleFromCookie(ServerHttpRequest request) {\n+        return Optional.ofNullable(request.getCookies().getFirst(LANGUAGE_COOKIE_NAME))\n+            .map(HttpCookie::getValue)\n+            .filter(StringUtils::isNotBlank)\n+            .map(Locale::forLanguageTag);\n     }\n \n-    private TimeZone getDefaultTimeZone() {\n-        return TimeZone.getDefault();\n+    private Optional<Locale> getLocaleFromQueryParameter(ServerHttpRequest request) {\n+        return Optional.ofNullable(request.getQueryParams().getFirst(LANGUAGE_PARAMETER_NAME))\n+            .filter(StringUtils::isNotBlank)\n+            .map(Locale::forLanguageTag);\n     }\n \n-    private void parseLocaleCookieIfNecessary(ServerWebExchange exchange) {\n-        if (exchange.getAttribute(TIME_ZONE_REQUEST_ATTRIBUTE_NAME) == null) {\n-            TimeZone timeZone = null;\n-            HttpCookie cookie = exchange.getRequest()\n-                .getCookies()\n-                .getFirst(TIME_ZONE_COOKIE_NAME);\n-            if (cookie != null) {\n-                String value = cookie.getValue();\n-                timeZone = TimeZone.getTimeZone(value);\n-            }\n-            exchange.getAttributes().put(TIME_ZONE_REQUEST_ATTRIBUTE_NAME,\n-                (timeZone != null ? timeZone : this.defaultTimeZoneFunction.apply(exchange)));\n-        }\n-\n-        if (exchange.getAttribute(LOCALE_REQUEST_ATTRIBUTE_NAME) == null) {\n-            HttpCookie cookie = exchange.getRequest()\n-                .getCookies()\n-                .getFirst(DEFAULT_PARAMETER_NAME);\n-            if (cookie != null) {\n-                String value = cookie.getValue();\n-                exchange.getAttributes()\n-                    .put(LOCALE_REQUEST_ATTRIBUTE_NAME, new Locale(value));\n-            }\n-        }\n+    private Optional<TimeZone> getTimeZoneFromCookie(ServerHttpRequest request) {\n+        return Optional.ofNullable(request.getCookies().getFirst(TIME_ZONE_COOKIE_NAME))\n+            .map(HttpCookie::getValue)\n+            .filter(StringUtils::isNotBlank)\n+            .map(TimeZone::getTimeZone);\n     }\n+\n }\n\ndiff --git a/application/src/test/java/run/halo/app/theme/ThemeLocaleContextResolverTest.java b/application/src/test/java/run/halo/app/theme/ThemeLocaleContextResolverTest.java\n--- a/application/src/test/java/run/halo/app/theme/ThemeLocaleContextResolverTest.java\n+++ b/application/src/test/java/run/halo/app/theme/ThemeLocaleContextResolverTest.java\n@@ -12,7 +12,7 @@\n import static java.util.Locale.UK;\n import static java.util.Locale.US;\n import static org.assertj.core.api.Assertions.assertThat;\n-import static run.halo.app.theme.ThemeLocaleContextResolver.DEFAULT_PARAMETER_NAME;\n+import static run.halo.app.theme.ThemeLocaleContextResolver.LANGUAGE_COOKIE_NAME;\n import static run.halo.app.theme.ThemeLocaleContextResolver.TIME_ZONE_COOKIE_NAME;\n \n import java.util.Arrays;\n@@ -187,7 +187,7 @@ private ServerWebExchange exchangeTimeZone(Locale... locales) {\n         return MockServerWebExchange.from(\n             MockServerHttpRequest.get(\"\").acceptLanguageAsLocales(locales)\n                 .cookie(new HttpCookie(TIME_ZONE_COOKIE_NAME, \"America/Adak\"))\n-                .cookie(new HttpCookie(DEFAULT_PARAMETER_NAME, \"en\")));\n+                .cookie(new HttpCookie(LANGUAGE_COOKIE_NAME, \"en\")));\n     }\n \n     private ServerWebExchange exchangeForParam(String language) {",
    "output": "Simplify ThemeLocaleContextResolver (#6651)\n\n#### What type of PR is this?\r\n\r\n/kind improvement\r\n/area theme\r\n/milestone 2.20.x\r\n\r\n#### What this PR does / why we need it:\r\n\r\nThis PR simplifies ThemeLocaleContextResolver by removing unused attributes. \r\n\r\nIn another PR <https://github.com/halo-dev/halo/pull/6647>, fixed locale resolution for query parameter `language`. This PR fixes locale resolution for cookie `language` as well.\r\n\r\nPlease see the results below:\r\n\r\n```bash\r\nhttp https://www.halo.run/ Cookie:language=zh-CN -p h\r\n\r\nHTTP/1.1 200 OK\r\nContent-Language: und\r\n```\r\n\r\n```bash\r\nhttp http://localhost:8090 Cookie:language=zh-CN -p h\r\n\r\nHTTP/1.1 200 OK\r\nContent-Language: zh-CN\r\n```\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/core/attachment/reconciler/AttachmentReconciler.java b/application/src/main/java/run/halo/app/core/attachment/reconciler/AttachmentReconciler.java\n--- a/application/src/main/java/run/halo/app/core/attachment/reconciler/AttachmentReconciler.java\n+++ b/application/src/main/java/run/halo/app/core/attachment/reconciler/AttachmentReconciler.java\n@@ -14,7 +14,6 @@\n import org.apache.commons.lang3.StringUtils;\n import org.springframework.stereotype.Component;\n import reactor.core.publisher.Flux;\n-import reactor.core.publisher.Mono;\n import run.halo.app.core.attachment.AttachmentUtils;\n import run.halo.app.core.attachment.ThumbnailService;\n import run.halo.app.core.attachment.ThumbnailSize;\n@@ -28,6 +27,7 @@\n import run.halo.app.extension.controller.ControllerBuilder;\n import run.halo.app.extension.controller.Reconciler;\n import run.halo.app.extension.controller.Reconciler.Request;\n+import run.halo.app.extension.controller.RequeueException;\n \n @Slf4j\n @Component\n@@ -57,18 +57,15 @@ public Result reconcile(Request request) {\n \n             var annotations = attachment.getMetadata().getAnnotations();\n             if (annotations != null) {\n-                attachmentService.getPermalink(attachment)\n+                var permalink = attachmentService.getPermalink(attachment)\n                     .map(URI::toASCIIString)\n-                    .switchIfEmpty(Mono.fromSupplier(() -> {\n-                        // Only for back-compatibility\n-                        return annotations.get(Constant.EXTERNAL_LINK_ANNO_KEY);\n-                    }))\n-                    .doOnNext(permalink -> {\n-                        log.debug(\"Set permalink {} for attachment {}\", permalink, request.name());\n-                        var status = nullSafeStatus(attachment);\n-                        status.setPermalink(permalink);\n-                    })\n-                    .blockOptional();\n+                    .blockOptional()\n+                    .orElseThrow(() -> new RequeueException(new Result(true, null),\n+                        \"Attachment handler is unavailable, requeue the request\"\n+                    ));\n+                log.debug(\"Set permalink {} for attachment {}\", permalink, request.name());\n+                var status = nullSafeStatus(attachment);\n+                status.setPermalink(permalink);\n             }\n             var permalink = nullSafeStatus(attachment).getPermalink();\n             if (StringUtils.isNotBlank(permalink) && AttachmentUtils.isImage(attachment)) {",
    "output": "Update attachment permalink only when handler is available (#6641)"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/infra/SchemeInitializer.java b/application/src/main/java/run/halo/app/infra/SchemeInitializer.java\n--- a/application/src/main/java/run/halo/app/infra/SchemeInitializer.java\n+++ b/application/src/main/java/run/halo/app/infra/SchemeInitializer.java\n@@ -490,7 +490,7 @@ public void onApplicationEvent(@NonNull ApplicationContextInitializedEvent event\n             );\n             is.add(new IndexSpec()\n                 .setName(\"spec.slug\")\n-                .setUnique(true)\n+                .setUnique(false)\n                 .setIndexFunc(\n                     simpleAttribute(SinglePage.class, page -> Optional.ofNullable(page.getSpec())\n                         .map(SinglePage.SinglePageSpec::getSlug)",
    "output": "Make slug of single page be not unique (#6545)\n\n#### What type of PR is this?\r\n\r\n/kind cleanup\r\n/area core\r\n/milestone 2.19.0\r\n\r\n#### What this PR does / why we need it:\r\n\r\nFor backward compatibility, the slug of single page should not be unique.\r\n\r\nBTW, the problem was introduced by <https://github.com/halo-dev/halo/pull/6540>.\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/infra/exception/handlers/ProblemDetailErrorAttributes.java b/application/src/main/java/run/halo/app/infra/exception/handlers/ProblemDetailErrorAttributes.java\n--- a/application/src/main/java/run/halo/app/infra/exception/handlers/ProblemDetailErrorAttributes.java\n+++ b/application/src/main/java/run/halo/app/infra/exception/handlers/ProblemDetailErrorAttributes.java\n@@ -2,24 +2,18 @@\n \n import static run.halo.app.infra.exception.Exceptions.createErrorResponse;\n \n-import java.util.LinkedHashMap;\n import java.util.Map;\n import org.springframework.boot.web.error.ErrorAttributeOptions;\n import org.springframework.boot.web.reactive.error.DefaultErrorAttributes;\n-import org.springframework.boot.web.reactive.error.ErrorAttributes;\n import org.springframework.context.MessageSource;\n import org.springframework.web.reactive.function.server.ServerRequest;\n-import org.springframework.web.server.ServerWebExchange;\n \n /**\n  * See {@link DefaultErrorAttributes} for more.\n  *\n  * @author johnn\n  */\n-public class ProblemDetailErrorAttributes implements ErrorAttributes {\n-\n-    private static final String ERROR_INTERNAL_ATTRIBUTE =\n-        ProblemDetailErrorAttributes.class.getName() + \".ERROR\";\n+public class ProblemDetailErrorAttributes extends DefaultErrorAttributes {\n \n     private final MessageSource messageSource;\n \n@@ -30,25 +24,11 @@ public ProblemDetailErrorAttributes(MessageSource messageSource) {\n     @Override\n     public Map<String, Object> getErrorAttributes(ServerRequest request,\n         ErrorAttributeOptions options) {\n-        final var errAttributes = new LinkedHashMap<String, Object>();\n+        final var errAttributes = super.getErrorAttributes(request, options);\n         var error = getError(request);\n         var errorResponse = createErrorResponse(error, null, request.exchange(), messageSource);\n         errAttributes.put(\"error\", errorResponse.getBody());\n         return errAttributes;\n     }\n \n-    @Override\n-    public Throwable getError(ServerRequest request) {\n-        return (Throwable) request.attribute(ERROR_INTERNAL_ATTRIBUTE).stream()\n-            .findFirst()\n-            .orElseThrow(() -> new IllegalStateException(\n-                \"Missing exception attribute in ServerWebExchange\"));\n-    }\n-\n-    @Override\n-    public void storeErrorInformation(Throwable error, ServerWebExchange exchange) {\n-        exchange.getAttributes().putIfAbsent(ERROR_INTERNAL_ATTRIBUTE, error);\n-    }\n-\n-\n }",
    "output": "Fix \"Missing exception attribute in ServerWebExchange\" error after upgrading Spring Boot 3.3.3 (#6515)\n\n#### What type of PR is this?\r\n\r\n/kind bug\r\n/area core\r\n/milestone 2.19.0\r\n\r\n#### What this PR does / why we need it:\r\n\r\nAfter merging https://github.com/halo-dev/halo/pull/6512 and https://github.com/halo-dev/halo/pull/6511, unit tests fail due to the changes of <https://github.com/spring-projects/spring-boot/commit/05b73ceeecd940843a34b9026ce73ba408a7aaa2>.\r\n\r\nThis PR fixes the problem by letting `run.halo.app.infra.exception.handlers.ProblemDetailErrorAttributes` extend  `org.springframework.boot.web.reactive.error.DefaultErrorAttributes`.\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/core/extension/service/impl/PluginServiceImpl.java b/application/src/main/java/run/halo/app/core/extension/service/impl/PluginServiceImpl.java\n--- a/application/src/main/java/run/halo/app/core/extension/service/impl/PluginServiceImpl.java\n+++ b/application/src/main/java/run/halo/app/core/extension/service/impl/PluginServiceImpl.java\n@@ -230,10 +230,16 @@ public Mono<Plugin> reload(String name) {\n     public Flux<DataBuffer> uglifyJsBundle() {\n         var startedPlugins = List.copyOf(pluginManager.getStartedPlugins());\n         String plugins = \"\"\"\n-            this.enabledPluginNames = [%s];\n+            this.enabledPlugins = [%s]\n             \"\"\".formatted(startedPlugins.stream()\n-            .map(PluginWrapper::getPluginId)\n-            .collect(Collectors.joining(\"','\", \"'\", \"'\")));\n+            .map(plugin -> \"\"\"\n+                {\n+                  \"name\": \"%s\",\n+                  \"version\": \"%s\"\n+                }\n+                \"\"\".formatted(plugin.getPluginId(), plugin.getDescriptor().getVersion())\n+            )\n+            .collect(Collectors.joining(\", \")));\n         return Flux.fromIterable(startedPlugins)\n             .mapNotNull(pluginWrapper -> {\n                 var pluginName = pluginWrapper.getPluginId();",
    "output": "Merge pull request #6470 from guqing/refactor/4464"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/core/extension/service/impl/PluginServiceImpl.java b/application/src/main/java/run/halo/app/core/extension/service/impl/PluginServiceImpl.java\n--- a/application/src/main/java/run/halo/app/core/extension/service/impl/PluginServiceImpl.java\n+++ b/application/src/main/java/run/halo/app/core/extension/service/impl/PluginServiceImpl.java\n@@ -230,10 +230,16 @@ public Mono<Plugin> reload(String name) {\n     public Flux<DataBuffer> uglifyJsBundle() {\n         var startedPlugins = List.copyOf(pluginManager.getStartedPlugins());\n         String plugins = \"\"\"\n-            this.enabledPluginNames = [%s];\n+            this.enabledPlugins = [%s]\n             \"\"\".formatted(startedPlugins.stream()\n-            .map(PluginWrapper::getPluginId)\n-            .collect(Collectors.joining(\"','\", \"'\", \"'\")));\n+            .map(plugin -> \"\"\"\n+                {\n+                  \"name\": \"%s\",\n+                  \"version\": \"%s\"\n+                }\n+                \"\"\".formatted(plugin.getPluginId(), plugin.getDescriptor().getVersion())\n+            )\n+            .collect(Collectors.joining(\", \")));\n         return Flux.fromIterable(startedPlugins)\n             .mapNotNull(pluginWrapper -> {\n                 var pluginName = pluginWrapper.getPluginId();",
    "output": "refactor: rename and restructure enabled plugins in bundle.js"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/extension/ReactiveExtensionClientImpl.java b/application/src/main/java/run/halo/app/extension/ReactiveExtensionClientImpl.java\n--- a/application/src/main/java/run/halo/app/extension/ReactiveExtensionClientImpl.java\n+++ b/application/src/main/java/run/halo/app/extension/ReactiveExtensionClientImpl.java\n@@ -140,10 +140,10 @@ public <E extends Extension> Flux<E> listAll(Class<E> type, ListOptions options,\n                 final long startTimeMs = System.currentTimeMillis();\n                 return client.listByNames(storeNames)\n                     .map(extensionStore -> converter.convertFrom(type, extensionStore))\n-                    .doOnNext(s -> {\n-                        log.debug(\"Successfully retrieved all by names from db for {} in {}ms\",\n-                            scheme.groupVersionKind(), System.currentTimeMillis() - startTimeMs);\n-                    });\n+                    .doOnComplete(() -> log.debug(\n+                        \"Successfully retrieved all by names from db for {} in {}ms\",\n+                        scheme.groupVersionKind(), System.currentTimeMillis() - startTimeMs)\n+                    );\n             });\n     }\n \n@@ -161,10 +161,10 @@ public <E extends Extension> Mono<ListResult<E>> listBy(Class<E> type, ListOptio\n                 final long startTimeMs = System.currentTimeMillis();\n                 return client.listByNames(storeNames)\n                     .map(extensionStore -> converter.convertFrom(type, extensionStore))\n-                    .doOnNext(s -> {\n-                        log.debug(\"Successfully retrieved by names from db for {} in {}ms\",\n-                            scheme.groupVersionKind(), System.currentTimeMillis() - startTimeMs);\n-                    })\n+                    .doOnComplete(() -> log.debug(\n+                        \"Successfully retrieved by names from db for {} in {}ms\",\n+                        scheme.groupVersionKind(), System.currentTimeMillis() - startTimeMs)\n+                    )\n                     .collectList()\n                     .map(result -> new ListResult<>(page.getPageNumber(), page.getPageSize(),\n                         objectKeys.getTotal(), result));",
    "output": "Refine debug logs of querying extensions (#6414)\n\n#### What type of PR is this?\r\n\r\n/kind cleanup\r\n/area core\r\n/milestone 2.18.x\r\n\r\n#### What this PR does / why we need it:\r\n\r\nThis PR refines debug logs of listing all extensions.\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/security/authentication/rememberme/RememberMeAuthenticationFilter.java b/application/src/main/java/run/halo/app/security/authentication/rememberme/RememberMeAuthenticationFilter.java\n--- a/application/src/main/java/run/halo/app/security/authentication/rememberme/RememberMeAuthenticationFilter.java\n+++ b/application/src/main/java/run/halo/app/security/authentication/rememberme/RememberMeAuthenticationFilter.java\n@@ -1,36 +0,0 @@\n-package run.halo.app.security.authentication.rememberme;\n-\n-import lombok.RequiredArgsConstructor;\n-import org.springframework.lang.NonNull;\n-import org.springframework.security.core.AuthenticationException;\n-import org.springframework.security.core.context.SecurityContextImpl;\n-import org.springframework.security.web.server.context.ServerSecurityContextRepository;\n-import org.springframework.web.server.ServerWebExchange;\n-import org.springframework.web.server.WebFilter;\n-import org.springframework.web.server.WebFilterChain;\n-import reactor.core.publisher.Mono;\n-\n-@RequiredArgsConstructor\n-public class RememberMeAuthenticationFilter implements WebFilter {\n-    private final ServerSecurityContextRepository securityContextRepository;\n-    private final RememberMeServices rememberMeServices;\n-    private final RememberMeAuthenticationManager rememberMeAuthenticationManager;\n-\n-    @Override\n-    @NonNull\n-    public Mono<Void> filter(@NonNull ServerWebExchange exchange, @NonNull WebFilterChain chain) {\n-        return securityContextRepository.load(exchange)\n-            .switchIfEmpty(Mono.defer(() -> rememberMeServices.autoLogin(exchange)\n-                .flatMap(rememberMeAuthenticationManager::authenticate)\n-                .flatMap(authentication -> {\n-                    var securityContext = new SecurityContextImpl(authentication);\n-                    return securityContextRepository.save(exchange, securityContext);\n-                })\n-                .onErrorResume(AuthenticationException.class,\n-                    e -> rememberMeServices.loginFail(exchange)\n-                )\n-                .then(Mono.empty())\n-            ))\n-            .then(chain.filter(exchange));\n-    }\n-}\n\ndiff --git a/application/src/main/java/run/halo/app/security/authentication/rememberme/RememberMeConfigurer.java b/application/src/main/java/run/halo/app/security/authentication/rememberme/RememberMeConfigurer.java\n--- a/application/src/main/java/run/halo/app/security/authentication/rememberme/RememberMeConfigurer.java\n+++ b/application/src/main/java/run/halo/app/security/authentication/rememberme/RememberMeConfigurer.java\n@@ -1,28 +1,41 @@\n package run.halo.app.security.authentication.rememberme;\n \n+import static org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher.MatchResult;\n+\n import lombok.RequiredArgsConstructor;\n import org.springframework.security.config.web.server.SecurityWebFiltersOrder;\n import org.springframework.security.config.web.server.ServerHttpSecurity;\n+import org.springframework.security.core.context.ReactiveSecurityContextHolder;\n+import org.springframework.security.web.server.authentication.AuthenticationWebFilter;\n import org.springframework.security.web.server.context.ServerSecurityContextRepository;\n import org.springframework.stereotype.Component;\n import run.halo.app.security.authentication.SecurityConfigurer;\n \n @Component\n @RequiredArgsConstructor\n public class RememberMeConfigurer implements SecurityConfigurer {\n+\n     private final RememberMeServices rememberMeServices;\n+\n     private final ServerSecurityContextRepository securityContextRepository;\n+\n     private final CookieSignatureKeyResolver cookieSignatureKeyResolver;\n \n     @Override\n     public void configure(ServerHttpSecurity http) {\n-        http.addFilterAt(\n-            new RememberMeAuthenticationFilter(securityContextRepository,\n-                rememberMeServices, authenticationManager()),\n-            SecurityWebFiltersOrder.AUTHENTICATION);\n+        var authManager = new RememberMeAuthenticationManager(cookieSignatureKeyResolver);\n+        var filter = new AuthenticationWebFilter(authManager);\n+        filter.setSecurityContextRepository(securityContextRepository);\n+        filter.setAuthenticationFailureHandler(\n+            (exchange, exception) -> rememberMeServices.loginFail(exchange.getExchange())\n+        );\n+        filter.setServerAuthenticationConverter(rememberMeServices::autoLogin);\n+        filter.setRequiresAuthenticationMatcher(\n+            exchange -> ReactiveSecurityContextHolder.getContext()\n+                .flatMap(securityContext -> MatchResult.notMatch())\n+                .switchIfEmpty(MatchResult.match())\n+        );\n+        http.addFilterAt(filter, SecurityWebFiltersOrder.AUTHENTICATION);\n     }\n \n-    RememberMeAuthenticationManager authenticationManager() {\n-        return new RememberMeAuthenticationManager(cookieSignatureKeyResolver);\n-    }\n }",
    "output": "Use AuthenticationWebFilter for remember-me mechanism (#6298)\n\n#### What type of PR is this?\r\n\r\n/kind cleanup\r\n/area core\r\n/milestone 2.18.x\r\n\r\n#### What this PR does / why we need it:\r\n\r\nThis PR simplifies RememberMeAuthenticationFilter by reusing AuthenticationWebFilter.\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/infra/exception/Exceptions.java b/application/src/main/java/run/halo/app/infra/exception/Exceptions.java\n--- a/application/src/main/java/run/halo/app/infra/exception/Exceptions.java\n+++ b/application/src/main/java/run/halo/app/infra/exception/Exceptions.java\n@@ -10,8 +10,11 @@\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.context.MessageSource;\n import org.springframework.core.annotation.MergedAnnotations;\n+import org.springframework.dao.ConcurrencyFailureException;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.HttpStatusCode;\n+import org.springframework.http.ProblemDetail;\n+import org.springframework.lang.NonNull;\n import org.springframework.lang.Nullable;\n import org.springframework.security.authentication.BadCredentialsException;\n import org.springframework.web.ErrorResponse;\n@@ -33,6 +36,9 @@ public enum Exceptions {\n     public static final String REQUEST_NOT_PERMITTED_TYPE =\n         \"https://halo.run/probs/request-not-permitted\";\n \n+    public static final String CONFLICT_TYPE =\n+        \"https://halo.run/probs/conflict\";\n+\n     /**\n      * Non-ErrorResponse exception to type map.\n      */\n@@ -47,22 +53,11 @@ public static ErrorResponse createErrorResponse(Throwable t, @Nullable HttpStatu\n         if (t instanceof ErrorResponse er) {\n             errorResponse = er;\n         } else {\n-            var responseStatusAnno =\n-                MergedAnnotations.from(t.getClass(), TYPE_HIERARCHY).get(ResponseStatus.class);\n-            if (status == null) {\n-                status = responseStatusAnno.getValue(\"code\", HttpStatus.class)\n-                    .orElse(HttpStatus.INTERNAL_SERVER_ERROR);\n-            }\n-            var type = EXCEPTION_TYPE_MAP.getOrDefault(t.getClass(), DEFAULT_TYPE);\n-            var detail = responseStatusAnno.getValue(\"reason\", String.class)\n-                .orElseGet(t::getMessage);\n-            var builder = ErrorResponse.builder(t, status, detail)\n-                .type(URI.create(type));\n-            if (status.is5xxServerError()) {\n-                builder.detailMessageCode(\"problemDetail.internalServerError\")\n-                    .titleMessageCode(\"problemDetail.title.internalServerError\");\n+            var er = handleConflictException(t);\n+            if (er == null) {\n+                er = handleException(t, status);\n             }\n-            errorResponse = builder.build();\n+            errorResponse = er;\n         }\n         var problemDetail = errorResponse.updateAndGetBody(messageSource, getLocale(exchange));\n         problemDetail.setInstance(exchange.getRequest().getURI());\n@@ -71,6 +66,39 @@ public static ErrorResponse createErrorResponse(Throwable t, @Nullable HttpStatu\n         return errorResponse;\n     }\n \n+    @NonNull\n+    private static ErrorResponse handleException(Throwable t, @Nullable HttpStatusCode status) {\n+        var responseStatusAnno = MergedAnnotations.from(t.getClass(), TYPE_HIERARCHY)\n+            .get(ResponseStatus.class);\n+        if (status == null) {\n+            status = responseStatusAnno.getValue(\"code\", HttpStatus.class)\n+                .orElse(HttpStatus.INTERNAL_SERVER_ERROR);\n+        }\n+        var type = EXCEPTION_TYPE_MAP.getOrDefault(t.getClass(), DEFAULT_TYPE);\n+        var detail = responseStatusAnno.getValue(\"reason\", String.class)\n+            .orElseGet(t::getMessage);\n+        var builder = ErrorResponse.builder(t, status, detail)\n+            .type(URI.create(type));\n+        if (status.is5xxServerError()) {\n+            builder.detailMessageCode(\"problemDetail.internalServerError\")\n+                .titleMessageCode(\"problemDetail.title.internalServerError\");\n+        }\n+        return builder.build();\n+    }\n+\n+    @Nullable\n+    private static ErrorResponse handleConflictException(Throwable t) {\n+        if (t instanceof ConcurrencyFailureException) {\n+            return ErrorResponse.builder(t, ProblemDetail.forStatus(HttpStatus.CONFLICT))\n+                .type(URI.create(CONFLICT_TYPE))\n+                .titleMessageCode(\"problemDetail.title.conflict\")\n+                .detailMessageCode(\"problemDetail.conflict\")\n+                .build();\n+        }\n+        return null;\n+    }\n+\n+\n     public static Locale getLocale(ServerWebExchange exchange) {\n         var locale = exchange.getLocaleContext().getLocale();\n         return locale == null ? Locale.getDefault() : locale;\n\ndiff --git a/application/src/test/java/run/halo/app/infra/exception/handlers/I18nExceptionTest.java b/application/src/test/java/run/halo/app/infra/exception/handlers/I18nExceptionTest.java\n--- a/application/src/test/java/run/halo/app/infra/exception/handlers/I18nExceptionTest.java\n+++ b/application/src/test/java/run/halo/app/infra/exception/handlers/I18nExceptionTest.java\n@@ -10,12 +10,14 @@\n import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.dao.ConcurrencyFailureException;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ProblemDetail;\n import org.springframework.http.ResponseEntity;\n import org.springframework.test.web.reactive.server.WebTestClient;\n import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PutMapping;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.ResponseStatus;\n import org.springframework.web.bind.annotation.RestController;\n@@ -117,6 +119,21 @@ void shouldGetErrorIfThrowingGeneralException() {\n             });\n     }\n \n+    @Test\n+    void shouldGetConflictError() {\n+        webClient.put().uri(\"/response-entity/conflict-error\")\n+            .header(\"X-XSRF-TOKEN\", \"fake-token\")\n+            .cookie(\"XSRF-TOKEN\", \"fake-token\")\n+            .exchange()\n+            .expectStatus().isEqualTo(HttpStatus.CONFLICT)\n+            .expectBody(ProblemDetail.class)\n+            .value(problemDetail -> {\n+                assertEquals(\"Conflict\", problemDetail.getTitle());\n+                assertEquals(\"Conflict detected.\",\n+                    problemDetail.getDetail());\n+            });\n+    }\n+\n     @TestConfiguration\n     static class TestConfig {\n \n@@ -156,6 +173,10 @@ ResponseEntity<String> throwGeneralException() {\n                 throw new GeneralException(\"Something went wrong\");\n             }\n \n+            @PutMapping(\"/conflict-error\")\n+            ResponseEntity<String> throwConflictException() {\n+                throw new ConcurrencyFailureException(\"Conflict detected\");\n+            }\n         }\n     }\n ",
    "output": "Respond 409 for operation conflict instead of 500 (#6274)\n\n#### What type of PR is this?\r\n\r\n/kind improvement\r\n/area core\r\n/kind api-change\r\n/milestone 2.18.x\r\n\r\n#### What this PR does / why we need it:\r\n\r\nThis PR makes ConcurrencyFailureException respond http status code 409 instead of 500.\r\n\r\n#### Which issue(s) this PR fixes:\r\n\r\nFixes #6254 \r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/search/lucene/LuceneSearchEngine.java b/application/src/main/java/run/halo/app/search/lucene/LuceneSearchEngine.java\n--- a/application/src/main/java/run/halo/app/search/lucene/LuceneSearchEngine.java\n+++ b/application/src/main/java/run/halo/app/search/lucene/LuceneSearchEngine.java\n@@ -348,6 +348,7 @@ private static class DocumentConverter implements Converter<Document, HaloDocume\n         public HaloDocument convert(Document doc) {\n             var haloDoc = new HaloDocument();\n             haloDoc.setId(doc.get(\"id\"));\n+            haloDoc.setType(doc.get(\"type\"));\n             haloDoc.setMetadataName(doc.get(\"name\"));\n             haloDoc.setTitle(doc.get(\"title\"));\n             haloDoc.setDescription(doc.get(\"description\"));\n\ndiff --git a/application/src/test/java/run/halo/app/search/lucene/LuceneSearchEngineIntegrationTest.java b/application/src/test/java/run/halo/app/search/lucene/LuceneSearchEngineIntegrationTest.java\n--- a/application/src/test/java/run/halo/app/search/lucene/LuceneSearchEngineIntegrationTest.java\n+++ b/application/src/test/java/run/halo/app/search/lucene/LuceneSearchEngineIntegrationTest.java\n@@ -102,6 +102,7 @@ void assertHasResult(int maxAttempts) {\n                     assertEquals(1, hits.size());\n                     var doc = hits.get(0);\n                     assertEquals(\"post.content.halo.run-first-post\", doc.getId());\n+                    assertEquals(\"post.content.halo.run\", doc.getType());\n                     assertEquals(\"first <my-tag>halo</my-tag> post\", doc.getTitle());\n                     assertNull(doc.getDescription());\n                     assertEquals(\"<my-tag>halo</my-tag>\", doc.getContent());",
    "output": "Fix the problem of null type of search result (#6241)\n\n#### What type of PR is this?\r\n\r\n/kind bug\r\n/area core\r\n/milestone 2.17.0\r\n\r\n#### What this PR does / why we need it:\r\n\r\nThis PR adds missed type to HaloDocument while converting.\r\n\r\n#### Which issue(s) this PR fixes:\r\n\r\nFixes https://github.com/halo-dev/halo/issues/6235\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/test/java/run/halo/app/search/lucene/LuceneSearchEngineIntegrationTest.java b/application/src/test/java/run/halo/app/search/lucene/LuceneSearchEngineIntegrationTest.java\n--- a/application/src/test/java/run/halo/app/search/lucene/LuceneSearchEngineIntegrationTest.java\n+++ b/application/src/test/java/run/halo/app/search/lucene/LuceneSearchEngineIntegrationTest.java\n@@ -13,11 +13,13 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;\n import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.dao.OptimisticLockingFailureException;\n import org.springframework.retry.support.RetryTemplateBuilder;\n import org.springframework.security.test.context.support.WithMockUser;\n import org.springframework.test.annotation.DirtiesContext;\n import org.springframework.test.web.reactive.server.WebTestClient;\n import reactor.test.StepVerifier;\n+import reactor.util.retry.Retry;\n import run.halo.app.content.Content;\n import run.halo.app.content.ContentUpdateParam;\n import run.halo.app.content.PostRequest;\n@@ -135,6 +137,7 @@ void assertNoResult(int maxAttempts) {\n     void deletePostPermanently(String postName) {\n         client.get(Post.class, postName)\n             .flatMap(client::delete)\n+            .retryWhen(optimisticLockRetry())\n             .as(StepVerifier::create)\n             .expectNextCount(1)\n             .verifyComplete();\n@@ -144,6 +147,7 @@ void recoverPost(String postName) {\n         client.get(Post.class, postName)\n             .doOnNext(post -> post.getSpec().setDeleted(false))\n             .flatMap(client::update)\n+            .retryWhen(optimisticLockRetry())\n             .as(StepVerifier::create)\n             .expectNextCount(1)\n             .verifyComplete();\n@@ -153,6 +157,7 @@ void recyclePost(String postName) {\n         client.get(Post.class, postName)\n             .doOnNext(post -> post.getSpec().setDeleted(true))\n             .flatMap(client::update)\n+            .retryWhen(optimisticLockRetry())\n             .as(StepVerifier::create)\n             .expectNextCount(1)\n             .verifyComplete();\n@@ -162,6 +167,7 @@ void publicPost(String postName) {\n         client.get(Post.class, postName)\n             .doOnNext(post -> post.getSpec().setVisible(PUBLIC))\n             .flatMap(client::update)\n+            .retryWhen(optimisticLockRetry())\n             .as(StepVerifier::create)\n             .expectNextCount(1)\n             .verifyComplete();\n@@ -171,6 +177,7 @@ void privatePost(String postName) {\n         client.get(Post.class, postName)\n             .doOnNext(post -> post.getSpec().setVisible(PRIVATE))\n             .flatMap(client::update)\n+            .retryWhen(optimisticLockRetry())\n             .as(StepVerifier::create)\n             .expectNextCount(1)\n             .verifyComplete();\n@@ -179,6 +186,7 @@ void privatePost(String postName) {\n     void publishPost(String postName) {\n         client.get(Post.class, postName)\n             .flatMap(postService::publish)\n+            .retryWhen(optimisticLockRetry())\n             .as(StepVerifier::create)\n             .expectNextCount(1)\n             .verifyComplete();\n@@ -187,6 +195,7 @@ void publishPost(String postName) {\n     void unpublishPost(String postName) {\n         client.get(Post.class, postName)\n             .flatMap(postService::unpublish)\n+            .retryWhen(optimisticLockRetry())\n             .as(StepVerifier::create)\n             .expectNextCount(1)\n             .verifyComplete();\n@@ -220,4 +229,10 @@ void createPost(String postName) {\n             .expectNextCount(1)\n             .verifyComplete();\n     }\n+\n+    Retry optimisticLockRetry() {\n+        return Retry.backoff(5, Duration.ofMillis(100))\n+            .filter(OptimisticLockingFailureException.class::isInstance);\n+    }\n+\n }",
    "output": "Fix the unstable integration test of Lucene search engine (#6187)\n\n#### What type of PR is this?\r\n\r\n/kind failing-test\r\n/area core\r\n/milestone 2.17.x\r\n\r\n#### What this PR does / why we need it:\r\n\r\nThis PR allows retrying to operate on posts when optimistic locking errors occur.\r\n\r\n#### Which issue(s) this PR fixes:\r\n\r\nFixes #6186 \r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/security/device/DeviceEndpoint.java b/application/src/main/java/run/halo/app/security/device/DeviceEndpoint.java\n--- a/application/src/main/java/run/halo/app/security/device/DeviceEndpoint.java\n+++ b/application/src/main/java/run/halo/app/security/device/DeviceEndpoint.java\n@@ -19,6 +19,7 @@\n import org.springframework.http.HttpStatus;\n import org.springframework.security.core.context.ReactiveSecurityContextHolder;\n import org.springframework.security.core.context.SecurityContext;\n+import org.springframework.session.ReactiveFindByIndexNameSessionRepository;\n import org.springframework.session.Session;\n import org.springframework.stereotype.Component;\n import org.springframework.web.reactive.function.server.RouterFunction;\n@@ -31,7 +32,6 @@\n import run.halo.app.extension.ListOptions;\n import run.halo.app.extension.ReactiveExtensionClient;\n import run.halo.app.extension.router.selector.FieldSelector;\n-import run.halo.app.security.session.ReactiveIndexedSessionRepository;\n \n /**\n  * Device endpoint for user profile,every user can only manage their own devices.\n@@ -43,7 +43,7 @@\n @RequiredArgsConstructor\n public class DeviceEndpoint implements CustomEndpoint {\n     private final ReactiveExtensionClient client;\n-    private final ReactiveIndexedSessionRepository<?> sessionRepository;\n+    private final ReactiveFindByIndexNameSessionRepository<?> sessionRepository;\n     private final DeviceService deviceService;\n \n     @Override",
    "output": "Use top-level interface of session repository (#6160)\n\n#### What type of PR is this?\r\n\r\n/kind improvement\r\n/area core\r\n/milestone 2.17.x\r\n\r\n#### What this PR does / why we need it:\r\n\r\nUse top-level interface `org.springframework.session.ReactiveFindByIndexNameSessionRepository` for being compatible with other session repositories.\r\n\r\n#### Which issue(s) this PR fixes:\r\n\r\nFixes https://github.com/halo-dev/halo/issues/6159\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/plugin/DefaultPluginApplicationContextFactory.java b/application/src/main/java/run/halo/app/plugin/DefaultPluginApplicationContextFactory.java\n--- a/application/src/main/java/run/halo/app/plugin/DefaultPluginApplicationContextFactory.java\n+++ b/application/src/main/java/run/halo/app/plugin/DefaultPluginApplicationContextFactory.java\n@@ -1,6 +1,5 @@\n package run.halo.app.plugin;\n \n-import static org.springframework.beans.factory.config.BeanDefinition.SCOPE_SINGLETON;\n import static org.springframework.util.ResourceUtils.CLASSPATH_URL_PREFIX;\n \n import java.io.IOException;\n@@ -102,9 +101,8 @@ public ApplicationContext create(String pluginId) {\n \n         rootContext.getBeanProvider(ReactiveExtensionClient.class)\n             .ifUnique(client -> {\n-                context.registerBean(\"reactiveSettingFetcher\",\n-                    DefaultReactiveSettingFetcher.class, bhd -> bhd.setScope(SCOPE_SINGLETON));\n-                beanFactory.registerSingleton(\"settingFetcher\", DefaultSettingFetcher.class);\n+                context.registerBean(\"reactiveSettingFetcher\", DefaultReactiveSettingFetcher.class);\n+                context.registerBean(\"settingFetcher\", DefaultSettingFetcher.class);\n             });\n \n         rootContext.getBeanProvider(PluginRequestMappingHandlerMapping.class)",
    "output": "Fix the problem of not being able to autowire settingFetcher bean in plugin (#6156)\n\n#### What type of PR is this?\r\n\r\n/kind bug\r\n/area core\r\n/area plugin\r\n\r\n#### What this PR does / why we need it:\r\n\r\nThe problem was introduced by PR <https://github.com/halo-dev/halo/pull/6141>. That PR wrongly registered `settingFetcher` singleton bean.\r\n\r\n#### Which issue(s) this PR fixes:\r\n\r\n<img width=\"1920\" alt=\"image\" src=\"https://github.com/halo-dev/halo/assets/16865714/ecc67064-3506-49b8-8114-a145da549126\">\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/api/src/main/java/run/halo/app/core/extension/content/Category.java b/api/src/main/java/run/halo/app/core/extension/content/Category.java\n--- a/api/src/main/java/run/halo/app/core/extension/content/Category.java\n+++ b/api/src/main/java/run/halo/app/core/extension/content/Category.java\n@@ -27,6 +27,7 @@\n public class Category extends AbstractExtension {\n \n     public static final String KIND = \"Category\";\n+    public static final String LAST_HIDDEN_STATE_ANNO = \"content.halo.run/last-hidden-state\";\n \n     public static final GroupVersionKind GVK = GroupVersionKind.fromExtension(Category.class);\n \n@@ -79,6 +80,15 @@ public static class CategorySpec {\n          * and B will be queried, but C and D will not be queried.</p>\n          */\n         private boolean preventParentPostCascadeQuery;\n+\n+        /**\n+         * <p>Whether to hide the category from the category list.</p>\n+         * <p>When set to true, the category including its subcategories and related posts will\n+         * not be displayed in the category list, but it can still be accessed by permalink.</p>\n+         * <p>Limitation: It only takes effect on the theme-side categorized list and it only\n+         * allows to be set to true on the first level(root node) of categories.</p>\n+         */\n+        private boolean hideFromList;\n     }\n \n     @JsonIgnore\n\ndiff --git a/api/src/main/java/run/halo/app/core/extension/content/Post.java b/api/src/main/java/run/halo/app/core/extension/content/Post.java\n--- a/api/src/main/java/run/halo/app/core/extension/content/Post.java\n+++ b/api/src/main/java/run/halo/app/core/extension/content/Post.java\n@@ -168,6 +168,11 @@ public static class PostStatus {\n \n         private List<String> contributors;\n \n+        /**\n+         * see {@link Category.CategorySpec#isHideFromList()}.\n+         */\n+        private Boolean hideFromList;\n+\n         private Instant lastModifyTime;\n \n         private Long observedVersion;\n\ndiff --git a/api/src/main/java/run/halo/app/extension/index/query/NotEqual.java b/api/src/main/java/run/halo/app/extension/index/query/NotEqual.java\n--- a/api/src/main/java/run/halo/app/extension/index/query/NotEqual.java\n+++ b/api/src/main/java/run/halo/app/extension/index/query/NotEqual.java\n@@ -21,7 +21,7 @@ public NavigableSet<String> matches(QueryIndexView indexView) {\n         indexView.acquireReadLock();\n         try {\n             NavigableSet<String> equalNames = equalQuery.matches(indexView);\n-            NavigableSet<String> allNames = indexView.getIdsForField(fieldName);\n+            NavigableSet<String> allNames = indexView.getAllIds();\n             allNames.removeAll(equalNames);\n             return allNames;\n         } finally {",
    "output": "Refine UI for categories hiden"
  },
  {
    "input": "diff --git a/api/src/main/java/run/halo/app/core/extension/Device.java b/api/src/main/java/run/halo/app/core/extension/Device.java\n--- a/api/src/main/java/run/halo/app/core/extension/Device.java\n+++ b/api/src/main/java/run/halo/app/core/extension/Device.java\n@@ -0,0 +1,65 @@\n+package run.halo.app.core.extension;\n+\n+import static io.swagger.v3.oas.annotations.media.Schema.RequiredMode.REQUIRED;\n+\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import java.time.Instant;\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n+import lombok.experimental.Accessors;\n+import org.springframework.lang.NonNull;\n+import run.halo.app.extension.AbstractExtension;\n+import run.halo.app.extension.GVK;\n+\n+@Data\n+@EqualsAndHashCode(callSuper = true)\n+@GVK(group = Device.GROUP, version = Device.VERSION, kind = Device.KIND, plural = \"devices\",\n+    singular = \"device\")\n+public class Device extends AbstractExtension {\n+    public static final String GROUP = \"security.halo.run\";\n+    public static final String VERSION = \"v1alpha1\";\n+    public static final String KIND = \"v1alpha1\";\n+\n+    @Schema(requiredMode = REQUIRED)\n+    private Spec spec;\n+\n+    @Getter(onMethod_ = @NonNull)\n+    private Status status = new Status();\n+\n+    public void setStatus(Status status) {\n+        this.status = (status == null ? new Status() : status);\n+    }\n+\n+    @Data\n+    @Accessors(chain = true)\n+    @Schema(name = \"DeviceSpec\")\n+    public static class Spec {\n+\n+        @Schema(requiredMode = REQUIRED, minLength = 1)\n+        private String sessionId;\n+\n+        @Schema(requiredMode = REQUIRED, minLength = 1)\n+        private String principalName;\n+\n+        @Schema(requiredMode = REQUIRED, maxLength = 129)\n+        private String ipAddress;\n+\n+        @Schema(maxLength = 500)\n+        private String userAgent;\n+\n+        private String rememberMeSeriesId;\n+\n+        private Instant lastAccessedTime;\n+\n+        private Instant lastAuthenticatedTime;\n+    }\n+\n+    @Data\n+    @Accessors(chain = true)\n+    @Schema(name = \"DeviceStatus\")\n+    public static class Status {\n+        private String browser;\n+        private String os;\n+    }\n+}\n\ndiff --git a/api/src/main/java/run/halo/app/core/extension/notification/Reason.java b/api/src/main/java/run/halo/app/core/extension/notification/Reason.java\n--- a/api/src/main/java/run/halo/app/core/extension/notification/Reason.java\n+++ b/api/src/main/java/run/halo/app/core/extension/notification/Reason.java\n@@ -9,6 +9,7 @@\n import lombok.Data;\n import lombok.EqualsAndHashCode;\n import lombok.NoArgsConstructor;\n+import lombok.experimental.Accessors;\n import run.halo.app.extension.AbstractExtension;\n import run.halo.app.extension.GVK;\n import run.halo.app.notification.ReasonAttributes;\n@@ -31,6 +32,7 @@ public class Reason extends AbstractExtension {\n     private Spec spec;\n \n     @Data\n+    @Accessors(chain = true)\n     @Schema(name = \"ReasonSpec\")\n     public static class Spec {\n         @Schema(requiredMode = REQUIRED)\n\ndiff --git a/api/src/main/java/run/halo/app/core/extension/notification/Subscription.java b/api/src/main/java/run/halo/app/core/extension/notification/Subscription.java\n--- a/api/src/main/java/run/halo/app/core/extension/notification/Subscription.java\n+++ b/api/src/main/java/run/halo/app/core/extension/notification/Subscription.java\n@@ -124,6 +124,7 @@ public String toString() {\n     @Data\n     @Schema(name = \"SubscriptionSubscriber\")\n     public static class Subscriber {\n+        @Schema(requiredMode = REQUIRED, minLength = 1)\n         private String name;\n \n         @Override\n\ndiff --git a/api/src/main/java/run/halo/app/security/device/DeviceService.java b/api/src/main/java/run/halo/app/security/device/DeviceService.java\n--- a/api/src/main/java/run/halo/app/security/device/DeviceService.java\n+++ b/api/src/main/java/run/halo/app/security/device/DeviceService.java\n@@ -0,0 +1,14 @@\n+package run.halo.app.security.device;\n+\n+import org.springframework.security.core.Authentication;\n+import org.springframework.web.server.ServerWebExchange;\n+import reactor.core.publisher.Mono;\n+\n+public interface DeviceService {\n+\n+    Mono<Void> loginSuccess(ServerWebExchange exchange, Authentication successfullAuthentication);\n+\n+    Mono<Void> changeSessionId(ServerWebExchange exchange);\n+\n+    Mono<Void> revoke(String principalName, String deviceId);\n+}",
    "output": "Refine UI for device managment"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/core/extension/service/impl/PluginServiceImpl.java b/application/src/main/java/run/halo/app/core/extension/service/impl/PluginServiceImpl.java\n--- a/application/src/main/java/run/halo/app/core/extension/service/impl/PluginServiceImpl.java\n+++ b/application/src/main/java/run/halo/app/core/extension/service/impl/PluginServiceImpl.java\n@@ -14,6 +14,7 @@\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n+import java.time.Clock;\n import java.time.Duration;\n import java.util.ArrayList;\n import java.util.Comparator;\n@@ -90,6 +91,8 @@ public class PluginServiceImpl implements PluginService, InitializingBean, Dispo\n \n     private final Scheduler scheduler = Schedulers.boundedElastic();\n \n+    private Clock clock = Clock.systemUTC();\n+\n     public PluginServiceImpl(ReactiveExtensionClient client, SystemVersionSupplier systemVersion,\n         PluginProperties pluginProperties, SpringPluginManager pluginManager) {\n         this.client = client;\n@@ -101,6 +104,16 @@ public PluginServiceImpl(ReactiveExtensionClient client, SystemVersionSupplier s\n         this.cssBundleCache = new BundleCache(\".css\");\n     }\n \n+    /**\n+     * The method is only for testing.\n+     *\n+     * @param clock new clock\n+     */\n+    void setClock(Clock clock) {\n+        Assert.notNull(clock, \"Clock must not be null\");\n+        this.clock = clock;\n+    }\n+\n     @Override\n     public Flux<Plugin> getPresets() {\n         // list presets from classpath\n@@ -269,6 +282,9 @@ public Flux<DataBuffer> uglifyCssBundle() {\n \n     @Override\n     public Mono<String> generateBundleVersion() {\n+        if (pluginManager.isDevelopment()) {\n+            return Mono.just(String.valueOf(clock.instant().toEpochMilli()));\n+        }\n         return Flux.fromIterable(new ArrayList<>(pluginManager.getStartedPlugins()))\n             .sort(Comparator.comparing(PluginWrapper::getPluginId))\n             .map(pw -> pw.getPluginId() + ':' + pw.getDescriptor().getVersion())\n\ndiff --git a/application/src/test/java/run/halo/app/core/extension/service/impl/PluginServiceImplTest.java b/application/src/test/java/run/halo/app/core/extension/service/impl/PluginServiceImplTest.java\n--- a/application/src/test/java/run/halo/app/core/extension/service/impl/PluginServiceImplTest.java\n+++ b/application/src/test/java/run/halo/app/core/extension/service/impl/PluginServiceImplTest.java\n@@ -23,6 +23,9 @@\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n+import java.time.Clock;\n+import java.time.Instant;\n+import java.time.ZoneId;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.concurrent.ExecutionException;\n@@ -249,7 +252,6 @@ void shouldReloadIfLoadLocationReady() {\n \n     }\n \n-\n     @Test\n     void generateBundleVersionTest() {\n         var plugin1 = mock(PluginWrapper.class);\n@@ -297,6 +299,19 @@ void generateBundleVersionTest() {\n         assertThat(result).isNotEqualTo(result2);\n     }\n \n+    @Test\n+    void shouldGenerateRandomBundleVersionInDevelopment() {\n+        var clock = Clock.fixed(Instant.now(), ZoneId.systemDefault());\n+        pluginService.setClock(clock);\n+        when(pluginManager.isDevelopment()).thenReturn(true);\n+        pluginService.generateBundleVersion()\n+            .as(StepVerifier::create)\n+            .expectNext(String.valueOf(clock.instant().toEpochMilli()))\n+            .verifyComplete();\n+\n+        verify(pluginManager, never()).getStartedPlugins();\n+    }\n+\n     @Nested\n     class PluginStateChangeTest {\n ",
    "output": "Fix the problem that bundle files are not changed in development mode (#6073)\n\n#### What type of PR is this?\r\n\r\n/kind regression\r\n/area plugin\r\n/milestone 2.17.x\r\n\r\n#### What this PR does / why we need it:\r\n\r\nThis PR reverts changes of generating bundle resource version in <https://github.com/halo-dev/halo/pull/6028>.\r\n\r\nBecause the changes were adapted realtime change of bundle files for plugin developers in plugin development runtime mode, but I ignored it.\r\n\r\n#### Special notes for your reviewer:\r\n\r\n1. Try to start Halo in plugin development mode\r\n2. Change and rebuild ui resources\r\n3. Refresh console and check the result\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/test/java/run/halo/app/core/extension/service/impl/PluginServiceImplTest.java b/application/src/test/java/run/halo/app/core/extension/service/impl/PluginServiceImplTest.java\n--- a/application/src/test/java/run/halo/app/core/extension/service/impl/PluginServiceImplTest.java\n+++ b/application/src/test/java/run/halo/app/core/extension/service/impl/PluginServiceImplTest.java\n@@ -432,17 +432,20 @@ void concurrentComputeBundleFileIfAbsent() {\n \n             var probes = new ArrayList<PublisherProbe<DataBuffer>>();\n             List<? extends Future<?>> futures = IntStream.range(0, 10)\n-                .mapToObj(i -> executorService.submit(() -> {\n+                .mapToObj(i -> {\n                     var fakeContent = Mono.<DataBuffer>just(sharedInstance.wrap(\n                         (\"fake-content-\" + i).getBytes(UTF_8)\n                     ));\n                     var probe = PublisherProbe.of(fakeContent);\n                     probes.add(probe);\n-                    cache.computeIfAbsent(\"fake-version\", probe.mono())\n-                        .as(StepVerifier::create)\n-                        .expectNextCount(1)\n-                        .verifyComplete();\n-                }))\n+                    return executorService.submit(\n+                        () -> {\n+                            cache.computeIfAbsent(\"fake-version\", probe.mono())\n+                                .as(StepVerifier::create)\n+                                .expectNextCount(1)\n+                                .verifyComplete();\n+                        });\n+                })\n                 .toList();\n             executorService.shutdown();\n             futures.forEach(future -> {",
    "output": "Fix concurrent issue during bundle file concurrent generation testing (#6043)\n\n#### What type of PR is this?\r\n\r\n/kind failing-test\r\n/area core\r\n/milestone 2.17.x\r\n\r\n#### What this PR does / why we need it:\r\n\r\nI wrongly invoked `Arraylist#add`(probes) method in multi threads. So the unit test was unstable and might encounter the problem as follows:\r\n\r\n```java\r\nExpected :1\r\nActual   :0\r\n<Click to see difference>\r\n\r\norg.opentest4j.AssertionFailedError: expected: <1> but was: <0>\r\n\tat org.junit.jupiter.api.AssertionFailureBuilder.build(AssertionFailureBuilder.java:151)\r\n\tat org.junit.jupiter.api.AssertionFailureBuilder.buildAndThrow(AssertionFailureBuilder.java:132)\r\n\tat org.junit.jupiter.api.AssertEquals.failNotEqual(AssertEquals.java:197)\r\n\tat org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:166)\r\n\tat org.junit.jupiter.api.AssertEquals.assertEquals(AssertEquals.java:161)\r\n\tat org.junit.jupiter.api.Assertions.assertEquals(Assertions.java:632)\r\n\tat run.halo.app.core.extension.service.impl.PluginServiceImplTest$BundleCacheTest.concurrentComputeBundleFileIfAbsent(PluginServiceImplTest.java:460)\r\n```\r\n\r\nSee https://github.com/halo-dev/halo/actions/runs/9382059472/job/25832681545 for more.\r\n\r\nThis PR moves the invocation outside thread tasks.\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/security/authentication/pat/impl/UserScopedPatHandlerImpl.java b/application/src/main/java/run/halo/app/security/authentication/pat/impl/UserScopedPatHandlerImpl.java\n--- a/application/src/main/java/run/halo/app/security/authentication/pat/impl/UserScopedPatHandlerImpl.java\n+++ b/application/src/main/java/run/halo/app/security/authentication/pat/impl/UserScopedPatHandlerImpl.java\n@@ -11,7 +11,6 @@\n import java.util.List;\n import java.util.Objects;\n import java.util.function.Predicate;\n-import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n import org.springframework.security.core.Authentication;\n import org.springframework.security.core.GrantedAuthority;\n import org.springframework.security.core.context.ReactiveSecurityContextHolder;\n@@ -86,7 +85,7 @@ public void setClock(Clock clock) {\n     }\n \n     private static Mono<Authentication> mustBeRealUser(Mono<Authentication> authentication) {\n-        return authentication.filter(UsernamePasswordAuthenticationToken.class::isInstance)\n+        return authentication.filter(AuthorityUtils::isRealUser)\n             // Non-username-password authentication could not access the API at any time.\n             .switchIfEmpty(Mono.error(AccessDeniedException::new));\n     }\n\ndiff --git a/application/src/main/java/run/halo/app/security/authorization/AuthorityUtils.java b/application/src/main/java/run/halo/app/security/authorization/AuthorityUtils.java\n--- a/application/src/main/java/run/halo/app/security/authorization/AuthorityUtils.java\n+++ b/application/src/main/java/run/halo/app/security/authorization/AuthorityUtils.java\n@@ -4,6 +4,9 @@\n import java.util.Set;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n+import org.springframework.security.authentication.RememberMeAuthenticationToken;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n import org.springframework.security.core.GrantedAuthority;\n \n /**\n@@ -44,4 +47,15 @@ public static Set<String> authoritiesToRoles(\n     public static boolean containsSuperRole(Collection<String> roles) {\n         return roles.contains(SUPER_ROLE_NAME);\n     }\n+\n+    /**\n+     * Check if the authentication is a real user.\n+     *\n+     * @param authentication current authentication\n+     * @return true if the authentication is a real user; false otherwise\n+     */\n+    public static boolean isRealUser(Authentication authentication) {\n+        return authentication instanceof UsernamePasswordAuthenticationToken\n+            || authentication instanceof RememberMeAuthenticationToken;\n+    }\n }\n\ndiff --git a/application/src/test/java/run/halo/app/security/authorization/AuthorityUtilsTest.java b/application/src/test/java/run/halo/app/security/authorization/AuthorityUtilsTest.java\n--- a/application/src/test/java/run/halo/app/security/authorization/AuthorityUtilsTest.java\n+++ b/application/src/test/java/run/halo/app/security/authorization/AuthorityUtilsTest.java\n@@ -3,12 +3,16 @@\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.mock;\n import static run.halo.app.security.authorization.AuthorityUtils.authoritiesToRoles;\n import static run.halo.app.security.authorization.AuthorityUtils.containsSuperRole;\n+import static run.halo.app.security.authorization.AuthorityUtils.isRealUser;\n \n import java.util.List;\n import java.util.Set;\n import org.junit.jupiter.api.Test;\n+import org.springframework.security.authentication.RememberMeAuthenticationToken;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n import org.springframework.security.core.authority.SimpleGrantedAuthority;\n \n class AuthorityUtilsTest {\n@@ -34,4 +38,10 @@ void containsSuperRoleTest() {\n         assertTrue(containsSuperRole(Set.of(\"super-role\", \"admin\")));\n         assertFalse(containsSuperRole(Set.of(\"admin\")));\n     }\n+\n+    @Test\n+    void shouldReturnTrueWhenAuthenticationIsRealUser() {\n+        assertTrue(isRealUser(mock(UsernamePasswordAuthenticationToken.class)));\n+        assertTrue(isRealUser(mock(RememberMeAuthenticationToken.class)));\n+    }\n }\n\\ No newline at end of file",
    "output": "Fix the problem the PAT could not be created or restored while logging in with remember-me (#6007)\n\n#### What type of PR is this?\r\n\r\n/kind bug\r\n/area core\r\n/milestone 2.16.0\r\n\r\n#### What this PR does / why we need it:\r\n\r\nPAT could not be created or restored while logging in with remember-me due to lack of RememberMeAuthenticationToken check.\r\n\r\n#### Which issue(s) this PR fixes:\r\n\r\nFixes https://github.com/halo-dev/halo/issues/6000\r\n\r\n#### Special notes for your reviewer:\r\n\r\n1. Log in with remember-me\r\n2. Create a PAT or restore a PAT\r\n3. See the result\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/extension/ReactiveExtensionClientImpl.java b/application/src/main/java/run/halo/app/extension/ReactiveExtensionClientImpl.java\n--- a/application/src/main/java/run/halo/app/extension/ReactiveExtensionClientImpl.java\n+++ b/application/src/main/java/run/halo/app/extension/ReactiveExtensionClientImpl.java\n@@ -215,6 +215,11 @@ public <E extends Extension> Mono<E> update(E extension) {\n             newMetadata.setCreationTimestamp(oldMetadata.getCreationTimestamp());\n             newMetadata.setGenerateName(oldMetadata.getGenerateName());\n \n+            // If the extension is an unstructured, the version type may be integer instead of long.\n+            // reset metadata.version for long type.\n+            oldMetadata.setVersion(oldMetadata.getVersion());\n+            newMetadata.setVersion(newMetadata.getVersion());\n+\n             if (Objects.equals(oldJsonExt, newJsonExt)) {\n                 // skip updating if not data changed.\n                 return Mono.just(extension);\n\ndiff --git a/application/src/test/java/run/halo/app/extension/ReactiveExtensionClientTest.java b/application/src/test/java/run/halo/app/extension/ReactiveExtensionClientTest.java\n--- a/application/src/test/java/run/halo/app/extension/ReactiveExtensionClientTest.java\n+++ b/application/src/test/java/run/halo/app/extension/ReactiveExtensionClientTest.java\n@@ -488,6 +488,32 @@ void shouldNotUpdateIfExtensionNotChange() {\n         verify(storeClient, never()).update(any(), any(), any());\n     }\n \n+    @Test\n+    void shouldNotUpdateIfUnstructuredNotChange() throws JsonProcessingException {\n+        var storeName = \"/registry/fake.halo.run/fakes/fake\";\n+        var extensionStore = createExtensionStore(storeName, 2L);\n+        when(storeClient.fetchByName(storeName)).thenReturn(\n+            Mono.just(extensionStore));\n+\n+        var fakeJson = objectMapper.writeValueAsString(createFakeExtension(\"fake\", 2L));\n+        var oldFakeJson = objectMapper.writeValueAsString(createFakeExtension(\"fake\", 2L));\n+\n+        var fake = objectMapper.readValue(fakeJson, Unstructured.class);\n+        var oldFake = objectMapper.readValue(oldFakeJson, Unstructured.class);\n+        oldFake.getMetadata().setVersion(2L);\n+\n+        when(converter.convertFrom(Unstructured.class, extensionStore)).thenReturn(oldFake);\n+\n+        StepVerifier.create(client.update(fake))\n+            .expectNext(fake)\n+            .verifyComplete();\n+\n+        verify(storeClient).fetchByName(storeName);\n+        verify(converter).convertFrom(Unstructured.class, extensionStore);\n+        verify(converter, never()).convertTo(any());\n+        verify(storeClient, never()).update(any(), any(), any());\n+    }\n+\n     @Test\n     void shouldUpdateIfExtensionStatusChangedOnly() {\n         var fake = createFakeExtension(\"fake\", 2L);",
    "output": "Fix the problem where extensions were not changed but still updated (#5887)\n\n#### What type of PR is this?\r\n\r\n/kind improvement\r\n/area core\r\n/milestone 2.16.x\r\n\r\n#### What this PR does / why we need it:\r\n\r\nThis PR fixes the problem where extensions were not changed but still updated. What we want is to not update the extension if it has not changed.\r\n\r\nBefore that, we update the version of extension manually while getting the latest extension, this will lead to change the type of metadata.version from int to long.See the code snippet below:\r\n\r\nhttps://github.com/halo-dev/halo/blob/a629961e8de4c086490e821248b6fa9964caecdd/application/src/main/java/run/halo/app/extension/JSONExtensionConverter.java#L83\r\n\r\nNow, we force update the versions using type Long.\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/infra/SchemeInitializer.java b/application/src/main/java/run/halo/app/infra/SchemeInitializer.java\n--- a/application/src/main/java/run/halo/app/infra/SchemeInitializer.java\n+++ b/application/src/main/java/run/halo/app/infra/SchemeInitializer.java\n@@ -172,7 +172,12 @@ public void onApplicationEvent(@NonNull ApplicationContextInitializedEvent event\n                 .setName(\"status.excerpt\")\n                 .setIndexFunc(\n                     simpleAttribute(Post.class, post -> post.getStatusOrDefault().getExcerpt())));\n-\n+            indexSpecs.add(new IndexSpec()\n+                .setName(\"status.lastModifyTime\")\n+                .setIndexFunc(simpleAttribute(Post.class, post -> {\n+                    var lastModifyTime = post.getStatus().getLastModifyTime();\n+                    return lastModifyTime == null ? null : lastModifyTime.toString();\n+                })));\n             indexSpecs.add(new IndexSpec()\n                 .setName(Post.REQUIRE_SYNC_ON_STARTUP_INDEX_NAME)\n                 .setIndexFunc(simpleAttribute(Post.class, post -> {",
    "output": "feat: add the order of the posts according to last modify time (#5727)\n\n* feat: add the order of the posts according to last modify time\r\n\r\n* replace es change"
  },
  {
    "input": "diff --git a/api/src/main/java/run/halo/app/core/extension/content/Comment.java b/api/src/main/java/run/halo/app/core/extension/content/Comment.java\n--- a/api/src/main/java/run/halo/app/core/extension/content/Comment.java\n+++ b/api/src/main/java/run/halo/app/core/extension/content/Comment.java\n@@ -31,6 +31,8 @@ public class Comment extends AbstractExtension {\n \n     public static final String KIND = \"Comment\";\n \n+    public static final String REQUIRE_SYNC_ON_STARTUP_INDEX_NAME = \"requireSyncOnStartup\";\n+\n     @Schema(requiredMode = REQUIRED)\n     private CommentSpec spec;\n \n@@ -135,6 +137,8 @@ public static class CommentStatus {\n         private Integer unreadReplyCount;\n \n         private Boolean hasNewReply;\n+\n+        private Long observedVersion;\n     }\n \n     public static String toSubjectRefKey(Ref subjectRef) {\n\ndiff --git a/api/src/main/java/run/halo/app/core/extension/content/Reply.java b/api/src/main/java/run/halo/app/core/extension/content/Reply.java\n--- a/api/src/main/java/run/halo/app/core/extension/content/Reply.java\n+++ b/api/src/main/java/run/halo/app/core/extension/content/Reply.java\n@@ -5,7 +5,9 @@\n import io.swagger.v3.oas.annotations.media.Schema;\n import lombok.Data;\n import lombok.EqualsAndHashCode;\n+import lombok.Getter;\n import lombok.ToString;\n+import org.springframework.lang.NonNull;\n import run.halo.app.extension.AbstractExtension;\n import run.halo.app.extension.GVK;\n \n@@ -23,9 +25,15 @@ public class Reply extends AbstractExtension {\n \n     public static final String KIND = \"Reply\";\n \n+    public static final String REQUIRE_SYNC_ON_STARTUP_INDEX_NAME = \"requireSyncOnStartup\";\n+\n     @Schema(requiredMode = REQUIRED)\n     private ReplySpec spec;\n \n+    @Schema\n+    @Getter(onMethod_ = @NonNull)\n+    private Status status = new Status();\n+\n     @Data\n     @EqualsAndHashCode(callSuper = true)\n     public static class ReplySpec extends Comment.BaseCommentSpec {\n@@ -35,4 +43,14 @@ public static class ReplySpec extends Comment.BaseCommentSpec {\n \n         private String quoteReply;\n     }\n+\n+    @Data\n+    @Schema(name = \"ReplyStatus\")\n+    public static class Status {\n+        private Long observedVersion;\n+    }\n+\n+    public void setStatus(Status status) {\n+        this.status = status == null ? new Status() : status;\n+    }\n }\n\ndiff --git a/application/src/main/java/run/halo/app/core/extension/reconciler/CommentReconciler.java b/application/src/main/java/run/halo/app/core/extension/reconciler/CommentReconciler.java\n--- a/application/src/main/java/run/halo/app/core/extension/reconciler/CommentReconciler.java\n+++ b/application/src/main/java/run/halo/app/core/extension/reconciler/CommentReconciler.java\n@@ -23,6 +23,7 @@\n import run.halo.app.core.extension.content.Constant;\n import run.halo.app.event.post.CommentCreatedEvent;\n import run.halo.app.event.post.CommentUnreadReplyCountChangedEvent;\n+import run.halo.app.extension.DefaultExtensionMatcher;\n import run.halo.app.extension.ExtensionClient;\n import run.halo.app.extension.GroupVersionKind;\n import run.halo.app.extension.ListOptions;\n@@ -86,8 +87,15 @@ public Result reconcile(Request request) {\n \n     @Override\n     public Controller setupWith(ControllerBuilder builder) {\n+        var extension = new Comment();\n         return builder\n-            .extension(new Comment())\n+            .extension(extension)\n+            .onAddMatcher(DefaultExtensionMatcher.builder(client, extension.groupVersionKind())\n+                .fieldSelector(FieldSelector.of(\n+                    equal(Comment.REQUIRE_SYNC_ON_STARTUP_INDEX_NAME, BooleanUtils.TRUE))\n+                )\n+                .build()\n+            )\n             .build();\n     }\n \n\ndiff --git a/application/src/main/java/run/halo/app/core/extension/reconciler/ReplyReconciler.java b/application/src/main/java/run/halo/app/core/extension/reconciler/ReplyReconciler.java\n--- a/application/src/main/java/run/halo/app/core/extension/reconciler/ReplyReconciler.java\n+++ b/application/src/main/java/run/halo/app/core/extension/reconciler/ReplyReconciler.java\n@@ -2,20 +2,24 @@\n \n import static org.apache.commons.lang3.ObjectUtils.defaultIfNull;\n import static run.halo.app.extension.ExtensionUtil.addFinalizers;\n+import static run.halo.app.extension.index.query.QueryFactory.equal;\n \n import java.util.Set;\n import lombok.AllArgsConstructor;\n+import org.apache.commons.lang3.BooleanUtils;\n import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.stereotype.Component;\n import run.halo.app.content.comment.ReplyNotificationSubscriptionHelper;\n import run.halo.app.core.extension.content.Reply;\n import run.halo.app.event.post.ReplyChangedEvent;\n import run.halo.app.event.post.ReplyCreatedEvent;\n import run.halo.app.event.post.ReplyDeletedEvent;\n+import run.halo.app.extension.DefaultExtensionMatcher;\n import run.halo.app.extension.ExtensionClient;\n import run.halo.app.extension.controller.Controller;\n import run.halo.app.extension.controller.ControllerBuilder;\n import run.halo.app.extension.controller.Reconciler;\n+import run.halo.app.extension.router.selector.FieldSelector;\n \n /**\n  * Reconciler for {@link Reply}.\n@@ -76,8 +80,15 @@ private void cleanUpResourcesAndRemoveFinalizer(String replyName) {\n \n     @Override\n     public Controller setupWith(ControllerBuilder builder) {\n+        var extension = new Reply();\n         return builder\n-            .extension(new Reply())\n+            .extension(extension)\n+            .onAddMatcher(DefaultExtensionMatcher.builder(client, extension.groupVersionKind())\n+                .fieldSelector(FieldSelector.of(\n+                    equal(Reply.REQUIRE_SYNC_ON_STARTUP_INDEX_NAME, BooleanUtils.TRUE))\n+                )\n+                .build()\n+            )\n             .build();\n     }\n }\n\ndiff --git a/application/src/main/java/run/halo/app/infra/SchemeInitializer.java b/application/src/main/java/run/halo/app/infra/SchemeInitializer.java\n--- a/application/src/main/java/run/halo/app/infra/SchemeInitializer.java\n+++ b/application/src/main/java/run/halo/app/infra/SchemeInitializer.java\n@@ -308,6 +308,17 @@ public void onApplicationEvent(@NonNull ApplicationContextInitializedEvent event\n                     var replyCount = comment.getStatusOrDefault().getReplyCount();\n                     return defaultIfNull(replyCount, 0).toString();\n                 })));\n+            indexSpecs.add(new IndexSpec()\n+                .setName(Comment.REQUIRE_SYNC_ON_STARTUP_INDEX_NAME)\n+                .setIndexFunc(simpleAttribute(Comment.class, comment -> {\n+                    var version = comment.getMetadata().getVersion();\n+                    var observedVersion = comment.getStatusOrDefault().getObservedVersion();\n+                    if (observedVersion == null || observedVersion < version) {\n+                        return BooleanUtils.TRUE;\n+                    }\n+                    // do not care about the false case so return null to avoid indexing\n+                    return null;\n+                })));\n         });\n         schemeManager.register(Reply.class, indexSpecs -> {\n             indexSpecs.add(new IndexSpec()\n@@ -337,6 +348,17 @@ public void onApplicationEvent(@NonNull ApplicationContextInitializedEvent event\n                     var owner = reply.getSpec().getOwner();\n                     return Comment.CommentOwner.ownerIdentity(owner.getKind(), owner.getName());\n                 })));\n+            indexSpecs.add(new IndexSpec()\n+                .setName(Reply.REQUIRE_SYNC_ON_STARTUP_INDEX_NAME)\n+                .setIndexFunc(simpleAttribute(Reply.class, reply -> {\n+                    var version = reply.getMetadata().getVersion();\n+                    var observedVersion = reply.getStatus().getObservedVersion();\n+                    if (observedVersion == null || observedVersion < version) {\n+                        return BooleanUtils.TRUE;\n+                    }\n+                    // do not care about the false case so return null to avoid indexing\n+                    return null;\n+                })));\n         });\n         schemeManager.register(SinglePage.class);\n         // storage.halo.run",
    "output": "refactor: optimize comment reconciliation for better performance and efficiency (#5708)"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/plugin/SpringPlugin.java b/application/src/main/java/run/halo/app/plugin/SpringPlugin.java\n--- a/application/src/main/java/run/halo/app/plugin/SpringPlugin.java\n+++ b/application/src/main/java/run/halo/app/plugin/SpringPlugin.java\n@@ -25,44 +25,55 @@ public SpringPlugin(PluginApplicationContextFactory contextFactory,\n \n     @Override\n     public void start() {\n-        // initialize context\n-        var pluginId = pluginContext.getName();\n-        this.context = contextFactory.create(pluginId);\n+        try {\n+            // initialize context\n+            var pluginId = pluginContext.getName();\n+            this.context = contextFactory.create(pluginId);\n \n-        var pluginOpt = context.getBeanProvider(Plugin.class)\n-            .stream()\n-            .findFirst();\n-        context.publishEvent(new SpringPluginStartingEvent(this, this));\n-        if (pluginOpt.isPresent()) {\n-            this.delegate = pluginOpt.get();\n-            if (this.delegate instanceof BasePlugin basePlugin) {\n-                basePlugin.setContext(pluginContext);\n+            var pluginOpt = context.getBeanProvider(Plugin.class)\n+                .stream()\n+                .findFirst();\n+            context.publishEvent(new SpringPluginStartingEvent(this, this));\n+            if (pluginOpt.isPresent()) {\n+                this.delegate = pluginOpt.get();\n+                if (this.delegate instanceof BasePlugin basePlugin) {\n+                    basePlugin.setContext(pluginContext);\n+                }\n+                this.delegate.start();\n             }\n-            this.delegate.start();\n+            context.publishEvent(new SpringPluginStartedEvent(this, this));\n+        } catch (Throwable t) {\n+            // try to stop plugin for cleaning resources if something went wrong\n+            this.stop();\n+            // propagate exception to invoker.\n+            throw t;\n         }\n-        context.publishEvent(new SpringPluginStartedEvent(this, this));\n     }\n \n     @Override\n     public void stop() {\n-        if (context != null) {\n-            context.publishEvent(new SpringPluginStoppingEvent(this, this));\n-        }\n-        if (this.delegate != null) {\n-            this.delegate.stop();\n-        }\n-        if (context instanceof ConfigurableApplicationContext configurableContext) {\n-            configurableContext.close();\n+        try {\n+            if (context != null) {\n+                context.publishEvent(new SpringPluginStoppingEvent(this, this));\n+            }\n+            if (this.delegate != null) {\n+                this.delegate.stop();\n+            }\n+        } finally {\n+            if (context instanceof ConfigurableApplicationContext configurableContext) {\n+                configurableContext.close();\n+            }\n+            // reset application context\n+            context = null;\n         }\n-        // reset application context\n-        context = null;\n     }\n \n     @Override\n     public void delete() {\n         if (delegate != null) {\n             delegate.delete();\n         }\n+        this.delegate = null;\n     }\n \n     public ApplicationContext getApplicationContext() {",
    "output": "Cleanup resources when plugin startup fails (#5765)\n\nSigned-off-by: JohnNiang <johnniang@foxmail.com>"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/core/extension/endpoint/UserEndpoint.java b/application/src/main/java/run/halo/app/core/extension/endpoint/UserEndpoint.java\n--- a/application/src/main/java/run/halo/app/core/extension/endpoint/UserEndpoint.java\n+++ b/application/src/main/java/run/halo/app/core/extension/endpoint/UserEndpoint.java\n@@ -89,6 +89,7 @@\n import run.halo.app.infra.SystemSetting;\n import run.halo.app.infra.ValidationUtils;\n import run.halo.app.infra.exception.RateLimitExceededException;\n+import run.halo.app.infra.exception.UnsatisfiedAttributeValueException;\n import run.halo.app.infra.utils.JsonUtils;\n import run.halo.app.security.authentication.twofactor.TwoFactorAuthentication;\n \n@@ -160,9 +161,19 @@ public RouterFunction<ServerResponse> endpoint() {\n                         .description(\"User name\")\n                         .required(true))\n                     .response(responseBuilder().implementation(UserPermission.class)))\n-            .PUT(\"/users/{name}/password\", this::changePassword,\n-                builder -> builder.operationId(\"ChangePassword\")\n-                    .description(\"Change password of user.\")\n+            .PUT(\"/users/-/password\", this::changeOwnPassword,\n+                builder -> builder.operationId(\"ChangeOwnPassword\")\n+                    .description(\"Change own password of user.\")\n+                    .tag(tag)\n+                    .requestBody(requestBodyBuilder()\n+                        .required(true)\n+                        .implementation(ChangeOwnPasswordRequest.class))\n+                    .response(responseBuilder()\n+                        .implementation(User.class))\n+            )\n+            .PUT(\"/users/{name}/password\", this::changeAnyonePasswordForAdmin,\n+                builder -> builder.operationId(\"ChangeAnyonePassword\")\n+                    .description(\"Change anyone password of user for admin.\")\n                     .tag(tag)\n                     .parameter(parameterBuilder().in(ParameterIn.PATH).name(\"name\")\n                         .description(\n@@ -520,7 +531,7 @@ private Mono<ServerResponse> updateProfile(ServerRequest request) {\n             .flatMap(updatedUser -> ServerResponse.ok().bodyValue(updatedUser));\n     }\n \n-    Mono<ServerResponse> changePassword(ServerRequest request) {\n+    Mono<ServerResponse> changeAnyonePasswordForAdmin(ServerRequest request) {\n         final var nameInPath = request.pathVariable(\"name\");\n         return ReactiveSecurityContextHolder.getContext()\n             .map(ctx -> SELF_USER.equals(nameInPath) ? ctx.getAuthentication().getName()\n@@ -538,6 +549,40 @@ Mono<ServerResponse> changePassword(ServerRequest request) {\n                 .bodyValue(updatedUser));\n     }\n \n+    Mono<ServerResponse> changeOwnPassword(ServerRequest request) {\n+        return ReactiveSecurityContextHolder.getContext()\n+            .map(ctx -> ctx.getAuthentication().getName())\n+            .flatMap(username -> request.bodyToMono(ChangeOwnPasswordRequest.class)\n+                .switchIfEmpty(Mono.defer(() ->\n+                    Mono.error(new ServerWebInputException(\"Request body is empty\"))))\n+                .flatMap(changePasswordRequest -> {\n+                    var rawOldPassword = changePasswordRequest.oldPassword();\n+                    return userService.confirmPassword(username, rawOldPassword)\n+                        .filter(Boolean::booleanValue)\n+                        .switchIfEmpty(Mono.error(new UnsatisfiedAttributeValueException(\n+                            \"Old password is incorrect.\",\n+                            \"problemDetail.user.oldPassword.notMatch\",\n+                            null))\n+                        )\n+                        .thenReturn(changePasswordRequest);\n+                })\n+                .flatMap(changePasswordRequest -> {\n+                    var password = changePasswordRequest.password();\n+                    // encode password\n+                    return userService.updateWithRawPassword(username, password);\n+                }))\n+            .flatMap(updatedUser -> ServerResponse.ok()\n+                .contentType(MediaType.APPLICATION_JSON)\n+                .bodyValue(updatedUser));\n+    }\n+\n+    record ChangeOwnPasswordRequest(\n+        @Schema(description = \"Old password.\", requiredMode = REQUIRED)\n+        String oldPassword,\n+        @Schema(description = \"New password.\", requiredMode = REQUIRED, minLength = 6)\n+        String password) {\n+    }\n+\n     record ChangePasswordRequest(\n         @Schema(description = \"New password.\", requiredMode = REQUIRED, minLength = 6)\n         String password) {\n\ndiff --git a/application/src/main/java/run/halo/app/core/extension/service/UserService.java b/application/src/main/java/run/halo/app/core/extension/service/UserService.java\n--- a/application/src/main/java/run/halo/app/core/extension/service/UserService.java\n+++ b/application/src/main/java/run/halo/app/core/extension/service/UserService.java\n@@ -23,4 +23,6 @@ public interface UserService {\n     Mono<User> signUp(User user, String password);\n \n     Mono<User> createUser(User user, Set<String> roles);\n+\n+    Mono<Boolean> confirmPassword(String username, String rawPassword);\n }\n\ndiff --git a/application/src/main/java/run/halo/app/core/extension/service/UserServiceImpl.java b/application/src/main/java/run/halo/app/core/extension/service/UserServiceImpl.java\n--- a/application/src/main/java/run/halo/app/core/extension/service/UserServiceImpl.java\n+++ b/application/src/main/java/run/halo/app/core/extension/service/UserServiceImpl.java\n@@ -176,4 +176,21 @@ public Mono<User> createUser(User user, Set<String> roleNames) {\n                 .flatMap(newUser -> grantRoles(user.getMetadata().getName(), roleNames)))\n             );\n     }\n+\n+    @Override\n+    public Mono<Boolean> confirmPassword(String username, String rawPassword) {\n+\n+        return getUser(username)\n+            .filter(user -> {\n+                if (!StringUtils.hasText(user.getSpec().getPassword())) {\n+                    // If the password is not set, return true directly.\n+                    return true;\n+                }\n+                if (!StringUtils.hasText(rawPassword)) {\n+                    return false;\n+                }\n+                return passwordEncoder.matches(rawPassword, user.getSpec().getPassword());\n+            })\n+            .hasElement();\n+    }\n }\n\ndiff --git a/application/src/test/java/run/halo/app/core/extension/endpoint/UserEndpointTest.java b/application/src/test/java/run/halo/app/core/extension/endpoint/UserEndpointTest.java\n--- a/application/src/test/java/run/halo/app/core/extension/endpoint/UserEndpointTest.java\n+++ b/application/src/test/java/run/halo/app/core/extension/endpoint/UserEndpointTest.java\n@@ -306,8 +306,11 @@ void shouldUpdateMyPasswordCorrectly() {\n             var user = new User();\n             when(userService.updateWithRawPassword(\"fake-user\", \"new-password\"))\n                 .thenReturn(Mono.just(user));\n+            when(userService.confirmPassword(\"fake-user\", \"old-password\"))\n+                .thenReturn(Mono.just(true));\n             webClient.put().uri(\"/users/-/password\")\n-                .bodyValue(new UserEndpoint.ChangePasswordRequest(\"new-password\"))\n+                .bodyValue(\n+                    new UserEndpoint.ChangeOwnPasswordRequest(\"old-password\", \"new-password\"))\n                 .exchange()\n                 .expectStatus().isOk()\n                 .expectBody(User.class)\n@@ -319,11 +322,14 @@ void shouldUpdateMyPasswordCorrectly() {\n         @Test\n         void shouldUpdateOtherPasswordCorrectly() {\n             var user = new User();\n+            when(userService.confirmPassword(\"another-fake-user\", \"old-password\"))\n+                .thenReturn(Mono.just(true));\n             when(userService.updateWithRawPassword(\"another-fake-user\", \"new-password\"))\n                 .thenReturn(Mono.just(user));\n             webClient.put()\n                 .uri(\"/users/another-fake-user/password\")\n-                .bodyValue(new UserEndpoint.ChangePasswordRequest(\"new-password\"))\n+                .bodyValue(\n+                    new UserEndpoint.ChangeOwnPasswordRequest(\"old-password\", \"new-password\"))\n                 .exchange()\n                 .expectStatus().isOk()\n                 .expectBody(User.class)\n\ndiff --git a/application/src/test/java/run/halo/app/core/extension/service/UserServiceImplTest.java b/application/src/test/java/run/halo/app/core/extension/service/UserServiceImplTest.java\n--- a/application/src/test/java/run/halo/app/core/extension/service/UserServiceImplTest.java\n+++ b/application/src/test/java/run/halo/app/core/extension/service/UserServiceImplTest.java\n@@ -485,4 +485,21 @@ User fakeSignUpUser(String name, String password) {\n             return user;\n         }\n     }\n+\n+    @Test\n+    void confirmPasswordWhenPasswordNotSet() {\n+        var user = new User();\n+        user.setSpec(new User.UserSpec());\n+        when(client.get(User.class, \"fake-user\")).thenReturn(Mono.just(user));\n+        userService.confirmPassword(\"fake-user\", \"fake-password\")\n+            .as(StepVerifier::create)\n+            .expectNext(true)\n+            .verifyComplete();\n+\n+        user.getSpec().setPassword(\"\");\n+        userService.confirmPassword(\"fake-user\", \"fake-password\")\n+            .as(StepVerifier::create)\n+            .expectNext(true)\n+            .verifyComplete();\n+    }\n }",
    "output": "feat: add original password verification for password change (#5748)\n\n* feat: add original password verification for password change\n\n* chore: update properties file\n\n* Refine ui\n\nSigned-off-by: Ryan Wang <i@ryanc.cc>\n\n* chore: update properties file\n\n* fix: confirm assword\n\n* fix: unit test case\n\n* feat: add new api for change own password\n\n* chore: regenerate api client\n\n* chore: adapt to UI\n\n* chore: enusre old password not blank\n\n---------\n\nSigned-off-by: Ryan Wang <i@ryanc.cc>\nCo-authored-by: Ryan Wang <i@ryanc.cc>"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/plugin/PluginStartedListener.java b/application/src/main/java/run/halo/app/plugin/PluginStartedListener.java\n--- a/application/src/main/java/run/halo/app/plugin/PluginStartedListener.java\n+++ b/application/src/main/java/run/halo/app/plugin/PluginStartedListener.java\n@@ -38,6 +38,7 @@ private Mono<Unstructured> createOrUpdate(Unstructured unstructured) {\n             .doOnNext(old -> {\n                 unstructured.getMetadata().setVersion(old.getMetadata().getVersion());\n             })\n+            .map(ignored -> unstructured)\n             .flatMap(client::update)\n             .switchIfEmpty(Mono.defer(() -> client.create(unstructured)));\n     }",
    "output": "Fix the problem of updating plugin extensions incorrectly (#5404)\n\n#### What type of PR is this?\r\n\r\n/kind bug\r\n/area plugin\r\n/area core\r\n/milestone 2.13.x\r\n\r\n#### What this PR does / why we need it:\r\n\r\nFix the problem of updating plugin extensions incorrectly.\r\n\r\n#### Which issue(s) this PR fixes:\r\n\r\nFixes https://github.com/halo-dev/halo/issues/5394\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/api/src/main/java/run/halo/app/security/AnonymousAuthenticationSecurityWebFilter.java b/api/src/main/java/run/halo/app/security/AnonymousAuthenticationSecurityWebFilter.java\n--- a/api/src/main/java/run/halo/app/security/AnonymousAuthenticationSecurityWebFilter.java\n+++ b/api/src/main/java/run/halo/app/security/AnonymousAuthenticationSecurityWebFilter.java\n@@ -0,0 +1,13 @@\n+package run.halo.app.security;\n+\n+import org.pf4j.ExtensionPoint;\n+import org.springframework.web.server.WebFilter;\n+\n+/**\n+ * Security web filter for anonymous authentication.\n+ *\n+ * @author johnniang\n+ */\n+public interface AnonymousAuthenticationSecurityWebFilter extends WebFilter, ExtensionPoint {\n+\n+}\n\ndiff --git a/api/src/main/java/run/halo/app/security/AuthenticationSecurityWebFilter.java b/api/src/main/java/run/halo/app/security/AuthenticationSecurityWebFilter.java\n--- a/api/src/main/java/run/halo/app/security/AuthenticationSecurityWebFilter.java\n+++ b/api/src/main/java/run/halo/app/security/AuthenticationSecurityWebFilter.java\n@@ -0,0 +1,13 @@\n+package run.halo.app.security;\n+\n+import org.pf4j.ExtensionPoint;\n+import org.springframework.web.server.WebFilter;\n+\n+/**\n+ * Security web filter for normal authentication.\n+ *\n+ * @author johnniang\n+ */\n+public interface AuthenticationSecurityWebFilter extends WebFilter, ExtensionPoint {\n+\n+}\n\ndiff --git a/api/src/main/java/run/halo/app/security/FormLoginSecurityWebFilter.java b/api/src/main/java/run/halo/app/security/FormLoginSecurityWebFilter.java\n--- a/api/src/main/java/run/halo/app/security/FormLoginSecurityWebFilter.java\n+++ b/api/src/main/java/run/halo/app/security/FormLoginSecurityWebFilter.java\n@@ -0,0 +1,13 @@\n+package run.halo.app.security;\n+\n+import org.pf4j.ExtensionPoint;\n+import org.springframework.web.server.WebFilter;\n+\n+/**\n+ * Security web filter for form login.\n+ *\n+ * @author johnniang\n+ */\n+public interface FormLoginSecurityWebFilter extends WebFilter, ExtensionPoint {\n+\n+}\n\ndiff --git a/application/src/main/java/run/halo/app/plugin/ExtensionComponentsFinder.java b/application/src/main/java/run/halo/app/plugin/ExtensionComponentsFinder.java\n--- a/application/src/main/java/run/halo/app/plugin/ExtensionComponentsFinder.java\n+++ b/application/src/main/java/run/halo/app/plugin/ExtensionComponentsFinder.java\n@@ -14,6 +14,7 @@\n  * @since 2.0.0\n  */\n @Component\n+@Deprecated(forRemoval = true)\n public class ExtensionComponentsFinder {\n     public static final String SYSTEM_PLUGIN_ID = \"system\";\n     private final PluginManager pluginManager;\n\ndiff --git a/application/src/main/java/run/halo/app/plugin/extensionpoint/DefaultExtensionGetter.java b/application/src/main/java/run/halo/app/plugin/extensionpoint/DefaultExtensionGetter.java\n--- a/application/src/main/java/run/halo/app/plugin/extensionpoint/DefaultExtensionGetter.java\n+++ b/application/src/main/java/run/halo/app/plugin/extensionpoint/DefaultExtensionGetter.java\n@@ -1,5 +1,6 @@\n package run.halo.app.plugin.extensionpoint;\n \n+import java.util.ArrayList;\n import java.util.Comparator;\n import java.util.List;\n import java.util.Set;\n@@ -86,6 +87,15 @@ public <T extends ExtensionPoint> Flux<T> getEnabledExtensionByDefinition(\n             });\n     }\n \n+    @Override\n+    public <T extends ExtensionPoint> Flux<T> getExtensions(Class<T> extensionPointClass) {\n+        var extensions = new ArrayList<>(pluginManager.getExtensions(extensionPointClass));\n+        applicationContext.getBeanProvider(extensionPointClass)\n+            .orderedStream()\n+            .forEach(extensions::add);\n+        return Flux.fromIterable(extensions);\n+    }\n+\n     @NonNull\n     <T extends ExtensionPoint> List<T> getAllExtensions(Class<T> extensionPoint) {\n         Stream<T> pluginExtsStream = pluginManager.getExtensions(extensionPoint)\n\ndiff --git a/application/src/main/java/run/halo/app/plugin/extensionpoint/ExtensionGetter.java b/application/src/main/java/run/halo/app/plugin/extensionpoint/ExtensionGetter.java\n--- a/application/src/main/java/run/halo/app/plugin/extensionpoint/ExtensionGetter.java\n+++ b/application/src/main/java/run/halo/app/plugin/extensionpoint/ExtensionGetter.java\n@@ -34,4 +34,13 @@ public interface ExtensionGetter {\n      *                                  the {@link ExtensionPointDefinition}.\n      */\n     <T extends ExtensionPoint> Flux<T> getEnabledExtensionByDefinition(Class<T> extensionPoint);\n+\n+    /**\n+     * Get all extensions according to extension point class.\n+     *\n+     * @param extensionPointClass extension point class\n+     * @param <T> type of extension point\n+     * @return a bunch of extension points.\n+     */\n+    <T extends ExtensionPoint> Flux<T> getExtensions(Class<T> extensionPointClass);\n }\n\ndiff --git a/application/src/main/java/run/halo/app/security/SecurityWebFiltersConfigurer.java b/application/src/main/java/run/halo/app/security/SecurityWebFiltersConfigurer.java\n--- a/application/src/main/java/run/halo/app/security/SecurityWebFiltersConfigurer.java\n+++ b/application/src/main/java/run/halo/app/security/SecurityWebFiltersConfigurer.java\n@@ -0,0 +1,68 @@\n+package run.halo.app.security;\n+\n+import static org.springframework.security.config.web.server.SecurityWebFiltersOrder.ANONYMOUS_AUTHENTICATION;\n+import static org.springframework.security.config.web.server.SecurityWebFiltersOrder.AUTHENTICATION;\n+import static org.springframework.security.config.web.server.SecurityWebFiltersOrder.FORM_LOGIN;\n+\n+import lombok.Setter;\n+import org.pf4j.ExtensionPoint;\n+import org.springframework.core.annotation.AnnotationAwareOrderComparator;\n+import org.springframework.security.config.web.server.ServerHttpSecurity;\n+import org.springframework.security.web.server.WebFilterChainProxy;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.server.ServerWebExchange;\n+import org.springframework.web.server.WebFilter;\n+import org.springframework.web.server.WebFilterChain;\n+import reactor.core.publisher.Mono;\n+import run.halo.app.plugin.extensionpoint.ExtensionGetter;\n+import run.halo.app.security.authentication.SecurityConfigurer;\n+\n+@Component\n+public class SecurityWebFiltersConfigurer implements SecurityConfigurer {\n+\n+    private final ExtensionGetter extensionGetter;\n+\n+    public SecurityWebFiltersConfigurer(ExtensionGetter extensionGetter) {\n+        this.extensionGetter = extensionGetter;\n+    }\n+\n+    @Override\n+    public void configure(ServerHttpSecurity http) {\n+        http\n+            .addFilterAt(\n+                new SecurityWebFilterChainProxy(FormLoginSecurityWebFilter.class), FORM_LOGIN\n+            )\n+            .addFilterAt(\n+                new SecurityWebFilterChainProxy(AuthenticationSecurityWebFilter.class),\n+                AUTHENTICATION\n+            )\n+            .addFilterAt(\n+                new SecurityWebFilterChainProxy(AnonymousAuthenticationSecurityWebFilter.class),\n+                ANONYMOUS_AUTHENTICATION\n+            );\n+    }\n+\n+    public class SecurityWebFilterChainProxy implements WebFilter {\n+\n+        @Setter\n+        private WebFilterChainProxy.WebFilterChainDecorator filterChainDecorator;\n+\n+        private final Class<? extends ExtensionPoint> extensionPointClass;\n+\n+        public SecurityWebFilterChainProxy(Class<? extends ExtensionPoint> extensionPointClass) {\n+            this.extensionPointClass = extensionPointClass;\n+            this.filterChainDecorator = new WebFilterChainProxy.DefaultWebFilterChainDecorator();\n+        }\n+\n+        @Override\n+        public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {\n+            return extensionGetter.getExtensions(this.extensionPointClass)\n+                .sort(AnnotationAwareOrderComparator.INSTANCE)\n+                .cast(WebFilter.class)\n+                .collectList()\n+                .map(filters -> filterChainDecorator.decorate(chain, filters))\n+                .flatMap(decoratedChain -> decoratedChain.filter(exchange));\n+        }\n+    }\n+\n+}",
    "output": "Provide extension points for authentication-related web filters (#5386)\n\n#### What type of PR is this?\r\n\r\n/kind feature\r\n/area core\r\n/area plugin\r\n/milestone 2.13.x\r\n\r\n#### What this PR does / why we need it:\r\n\r\nSee https://github.com/halo-dev/halo/issues/5379 for more.\r\n\r\nThis PR provides three extension points:\r\n\r\n- FormLoginSecurityWebFilter\r\n- AuthenticationSecurityWebFilter\r\n- AnonymousAuthenticationSecurityWebFilter\r\n\r\nwhich could be extended by plugins easily.\r\n\r\n#### Which issue(s) this PR fixes:\r\n\r\nFixes https://github.com/halo-dev/halo/issues/5379\r\n\r\n#### Special notes for your reviewer:\r\n\r\nTBD.\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/security/authentication/login/LoginSecurityConfigurer.java b/application/src/main/java/run/halo/app/security/authentication/login/LoginSecurityConfigurer.java\n--- a/application/src/main/java/run/halo/app/security/authentication/login/LoginSecurityConfigurer.java\n+++ b/application/src/main/java/run/halo/app/security/authentication/login/LoginSecurityConfigurer.java\n@@ -2,14 +2,13 @@\n \n import io.github.resilience4j.ratelimiter.RateLimiterRegistry;\n import io.micrometer.observation.ObservationRegistry;\n-import lombok.extern.slf4j.Slf4j;\n import org.springframework.context.MessageSource;\n import org.springframework.http.HttpMethod;\n-import org.springframework.lang.NonNull;\n import org.springframework.security.authentication.ObservationReactiveAuthenticationManager;\n import org.springframework.security.authentication.ReactiveAuthenticationManager;\n import org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager;\n import org.springframework.security.config.web.server.SecurityWebFiltersOrder;\n+import org.springframework.security.config.web.server.ServerHttpSecurity;\n import org.springframework.security.core.userdetails.ReactiveUserDetailsPasswordService;\n import org.springframework.security.core.userdetails.ReactiveUserDetailsService;\n import org.springframework.security.crypto.password.PasswordEncoder;\n@@ -18,21 +17,11 @@\n import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers;\n import org.springframework.stereotype.Component;\n import org.springframework.web.reactive.function.server.ServerResponse;\n-import org.springframework.web.server.ServerWebExchange;\n-import org.springframework.web.server.WebFilterChain;\n-import reactor.core.publisher.Mono;\n import run.halo.app.plugin.extensionpoint.ExtensionGetter;\n-import run.halo.app.security.AdditionalWebFilter;\n+import run.halo.app.security.authentication.SecurityConfigurer;\n \n-/**\n- * Authentication filter for username and password.\n- *\n- * @author guqing\n- * @since 2.4.0\n- */\n-@Slf4j\n @Component\n-public class UsernamePasswordAuthenticator implements AdditionalWebFilter {\n+public class LoginSecurityConfigurer implements SecurityConfigurer {\n \n     private final ObservationRegistry observationRegistry;\n \n@@ -46,44 +35,32 @@ public class UsernamePasswordAuthenticator implements AdditionalWebFilter {\n \n     private final CryptoService cryptoService;\n \n-    private final AuthenticationWebFilter authenticationWebFilter;\n-\n     private final ExtensionGetter extensionGetter;\n+    private final ServerResponse.Context context;\n+    private final MessageSource messageSource;\n+    private final RateLimiterRegistry rateLimiterRegistry;\n \n-    public UsernamePasswordAuthenticator(ServerResponse.Context context,\n-        ObservationRegistry observationRegistry, ReactiveUserDetailsService userDetailsService,\n+    public LoginSecurityConfigurer(ObservationRegistry observationRegistry,\n+        ReactiveUserDetailsService userDetailsService,\n         ReactiveUserDetailsPasswordService passwordService, PasswordEncoder passwordEncoder,\n         ServerSecurityContextRepository securityContextRepository, CryptoService cryptoService,\n-        RateLimiterRegistry rateLimiterRegistry, MessageSource messageSource,\n-        ExtensionGetter extensionGetter) {\n+        ExtensionGetter extensionGetter, ServerResponse.Context context,\n+        MessageSource messageSource, RateLimiterRegistry rateLimiterRegistry) {\n         this.observationRegistry = observationRegistry;\n         this.userDetailsService = userDetailsService;\n         this.passwordService = passwordService;\n         this.passwordEncoder = passwordEncoder;\n         this.securityContextRepository = securityContextRepository;\n         this.cryptoService = cryptoService;\n         this.extensionGetter = extensionGetter;\n-\n-        this.authenticationWebFilter = new AuthenticationWebFilter(authenticationManager());\n-        configureAuthenticationWebFilter(this.authenticationWebFilter, context, messageSource,\n-            rateLimiterRegistry);\n-    }\n-\n-    @Override\n-    @NonNull\n-    public Mono<Void> filter(@NonNull ServerWebExchange exchange, @NonNull WebFilterChain chain) {\n-        return authenticationWebFilter.filter(exchange, chain);\n+        this.context = context;\n+        this.messageSource = messageSource;\n+        this.rateLimiterRegistry = rateLimiterRegistry;\n     }\n \n     @Override\n-    public int getOrder() {\n-        return SecurityWebFiltersOrder.FORM_LOGIN.getOrder();\n-    }\n-\n-    void configureAuthenticationWebFilter(AuthenticationWebFilter filter,\n-        ServerResponse.Context context,\n-        MessageSource messageSource,\n-        RateLimiterRegistry rateLimiterRegistry) {\n+    public void configure(ServerHttpSecurity http) {\n+        var filter = new AuthenticationWebFilter(authenticationManager());\n         var requiresMatcher = ServerWebExchangeMatchers.pathMatchers(HttpMethod.POST, \"/login\");\n         var handler = new UsernamePasswordHandler(context, messageSource);\n         var authConverter = new LoginAuthenticationConverter(cryptoService, rateLimiterRegistry);\n@@ -92,6 +69,8 @@ void configureAuthenticationWebFilter(AuthenticationWebFilter filter,\n         filter.setAuthenticationSuccessHandler(handler);\n         filter.setServerAuthenticationConverter(authConverter);\n         filter.setSecurityContextRepository(securityContextRepository);\n+\n+        http.addFilterAt(filter, SecurityWebFiltersOrder.FORM_LOGIN);\n     }\n \n     ReactiveAuthenticationManager authenticationManager() {\n@@ -106,5 +85,4 @@ ReactiveAuthenticationManager defaultAuthenticationManager() {\n         manager.setUserDetailsPasswordService(passwordService);\n         return manager;\n     }\n-\n }",
    "output": "Move username-password authentication into security filter chain (#5348)\n\n#### What type of PR is this?\r\n\r\n/kind cleanup\r\n/area core\r\n/milestone 2.13.x\r\n\r\n#### What this PR does / why we need it:\r\n\r\nUsernamePasswordAuthenticator is a normal webfilter instead of authentication webfilter in security filter chain. There does not guarentee expected results due to different in execution order. So this PR changes UsernamePasswordAuthenticator to AuthenticationWebFilter for managing the filter by security filter chain.\r\n\r\nBy the way, these changes will not affect any plugins.\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/config/WebFluxConfig.java b/application/src/main/java/run/halo/app/config/WebFluxConfig.java\n--- a/application/src/main/java/run/halo/app/config/WebFluxConfig.java\n+++ b/application/src/main/java/run/halo/app/config/WebFluxConfig.java\n@@ -15,6 +15,7 @@\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.core.annotation.Order;\n import org.springframework.http.CacheControl;\n import org.springframework.http.HttpMethod;\n import org.springframework.http.MediaType;\n@@ -40,6 +41,8 @@\n import run.halo.app.core.extension.endpoint.CustomEndpoint;\n import run.halo.app.core.extension.endpoint.CustomEndpointsBuilder;\n import run.halo.app.infra.properties.HaloProperties;\n+import run.halo.app.plugin.extensionpoint.ExtensionGetter;\n+import run.halo.app.webfilter.AdditionalWebFilterChainProxy;\n \n @Configuration\n public class WebFluxConfig implements WebFluxConfigurer {\n@@ -200,4 +203,23 @@ ProxyFilter consoleProxyFilter() {\n     ProxyFilter ucProxyFilter() {\n         return new ProxyFilter(\"/uc/**\", haloProp.getUc().getProxy());\n     }\n+\n+    /**\n+     * Create a WebFilterChainProxy for all AdditionalWebFilters.\n+     *\n+     * <p>The reason why the order is -101 is that the current\n+     * AdditionalWebFilterChainProxy should be executed before WebFilterChainProxy\n+     * and the order of WebFilterChainProxy is -100.\n+     *\n+     * <p>See {@code org.springframework.security.config.annotation.web.reactive\n+     * .WebFluxSecurityConfiguration#WEB_FILTER_CHAIN_FILTER_ORDER} for more\n+     *\n+     * @param extensionGetter extension getter.\n+     * @return additional web filter chain proxy.\n+     */\n+    @Bean\n+    @Order(-101)\n+    AdditionalWebFilterChainProxy additionalWebFilterChainProxy(ExtensionGetter extensionGetter) {\n+        return new AdditionalWebFilterChainProxy(extensionGetter);\n+    }\n }\n\ndiff --git a/application/src/main/java/run/halo/app/config/WebServerSecurityConfig.java b/application/src/main/java/run/halo/app/config/WebServerSecurityConfig.java\n--- a/application/src/main/java/run/halo/app/config/WebServerSecurityConfig.java\n+++ b/application/src/main/java/run/halo/app/config/WebServerSecurityConfig.java\n@@ -30,9 +30,7 @@\n import run.halo.app.extension.ReactiveExtensionClient;\n import run.halo.app.infra.AnonymousUserConst;\n import run.halo.app.infra.properties.HaloProperties;\n-import run.halo.app.plugin.extensionpoint.ExtensionGetter;\n import run.halo.app.security.DefaultUserDetailService;\n-import run.halo.app.security.DynamicMatcherSecurityWebFilterChain;\n import run.halo.app.security.authentication.SecurityConfigurer;\n import run.halo.app.security.authentication.login.CryptoService;\n import run.halo.app.security.authentication.login.PublicKeyRouteBuilder;\n@@ -60,7 +58,6 @@ SecurityWebFilterChain apiFilterChain(ServerHttpSecurity http,\n         RoleService roleService,\n         ObjectProvider<SecurityConfigurer> securityConfigurers,\n         ServerSecurityContextRepository securityContextRepository,\n-        ExtensionGetter extensionGetter,\n         ReactiveExtensionClient client,\n         PatJwkSupplier patJwkSupplier) {\n \n@@ -92,7 +89,7 @@ SecurityWebFilterChain apiFilterChain(ServerHttpSecurity http,\n         // Integrate with other configurers separately\n         securityConfigurers.orderedStream()\n             .forEach(securityConfigurer -> securityConfigurer.configure(http));\n-        return new DynamicMatcherSecurityWebFilterChain(extensionGetter, http.build());\n+        return http.build();\n     }\n \n     @Bean\n\ndiff --git a/application/src/main/java/run/halo/app/security/DynamicMatcherSecurityWebFilterChain.java b/application/src/main/java/run/halo/app/security/DynamicMatcherSecurityWebFilterChain.java\n--- a/application/src/main/java/run/halo/app/security/DynamicMatcherSecurityWebFilterChain.java\n+++ b/application/src/main/java/run/halo/app/security/DynamicMatcherSecurityWebFilterChain.java\n@@ -1,66 +0,0 @@\n-package run.halo.app.security;\n-\n-import org.springframework.core.Ordered;\n-import org.springframework.core.annotation.AnnotationAwareOrderComparator;\n-import org.springframework.lang.NonNull;\n-import org.springframework.security.web.server.SecurityWebFilterChain;\n-import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher;\n-import org.springframework.web.server.ServerWebExchange;\n-import org.springframework.web.server.WebFilter;\n-import org.springframework.web.server.WebFilterChain;\n-import reactor.core.publisher.Flux;\n-import reactor.core.publisher.Mono;\n-import run.halo.app.plugin.extensionpoint.ExtensionGetter;\n-\n-/**\n- * A {@link SecurityWebFilterChain} that leverages a {@link ServerWebExchangeMatcher} to\n- * determine which {@link WebFilter} to execute.\n- *\n- * @author guqing\n- * @since 2.4.0\n- */\n-public class DynamicMatcherSecurityWebFilterChain implements SecurityWebFilterChain {\n-\n-    private final SecurityWebFilterChain delegate;\n-\n-    private final ExtensionGetter extensionGetter;\n-\n-    public DynamicMatcherSecurityWebFilterChain(ExtensionGetter extensionGetter,\n-        SecurityWebFilterChain delegate) {\n-        this.delegate = delegate;\n-        this.extensionGetter = extensionGetter;\n-    }\n-\n-    @Override\n-    public Mono<Boolean> matches(ServerWebExchange exchange) {\n-        return delegate.matches(exchange);\n-    }\n-\n-    @Override\n-    public Flux<WebFilter> getWebFilters() {\n-        return Flux.merge(delegate.getWebFilters(), getAdditionalFilters())\n-            .sort(new AnnotationAwareOrderComparator());\n-    }\n-\n-    private Flux<WebFilter> getAdditionalFilters() {\n-        return extensionGetter.getEnabledExtensionByDefinition(AdditionalWebFilter.class)\n-            .map(additionalWebFilter -> new OrderedWebFilter(additionalWebFilter,\n-                additionalWebFilter.getOrder())\n-            );\n-    }\n-\n-    private record OrderedWebFilter(WebFilter webFilter, int order) implements WebFilter, Ordered {\n-\n-        @Override\n-        @NonNull\n-        public Mono<Void> filter(@NonNull ServerWebExchange exchange,\n-            @NonNull WebFilterChain chain) {\n-            return this.webFilter.filter(exchange, chain);\n-        }\n-\n-        @Override\n-        public int getOrder() {\n-            return this.order;\n-        }\n-    }\n-}\n\ndiff --git a/application/src/main/java/run/halo/app/webfilter/AdditionalWebFilterChainProxy.java b/application/src/main/java/run/halo/app/webfilter/AdditionalWebFilterChainProxy.java\n--- a/application/src/main/java/run/halo/app/webfilter/AdditionalWebFilterChainProxy.java\n+++ b/application/src/main/java/run/halo/app/webfilter/AdditionalWebFilterChainProxy.java\n@@ -0,0 +1,35 @@\n+package run.halo.app.webfilter;\n+\n+import lombok.Setter;\n+import org.springframework.core.annotation.AnnotationAwareOrderComparator;\n+import org.springframework.security.web.server.WebFilterChainProxy;\n+import org.springframework.web.server.ServerWebExchange;\n+import org.springframework.web.server.WebFilter;\n+import org.springframework.web.server.WebFilterChain;\n+import reactor.core.publisher.Mono;\n+import run.halo.app.plugin.extensionpoint.ExtensionGetter;\n+import run.halo.app.security.AdditionalWebFilter;\n+\n+public class AdditionalWebFilterChainProxy implements WebFilter {\n+\n+    private final ExtensionGetter extensionGetter;\n+\n+    @Setter\n+    private WebFilterChainProxy.WebFilterChainDecorator filterChainDecorator;\n+\n+    public AdditionalWebFilterChainProxy(ExtensionGetter extensionGetter) {\n+        this.extensionGetter = extensionGetter;\n+        this.filterChainDecorator = new WebFilterChainProxy.DefaultWebFilterChainDecorator();\n+    }\n+\n+    @Override\n+    public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {\n+        return extensionGetter.getEnabledExtensionByDefinition(AdditionalWebFilter.class)\n+            .sort(AnnotationAwareOrderComparator.INSTANCE)\n+            .cast(WebFilter.class)\n+            .collectList()\n+            .map(filters -> filterChainDecorator.decorate(chain, filters))\n+            .flatMap(decoratedChain -> decoratedChain.filter(exchange));\n+    }\n+\n+}",
    "output": "Refactor AdditionalWebFilter load (#5349)\n\n#### What type of PR is this?\r\n\r\n/kind improvement\r\n/area core\r\n/milestone 2.13.x\r\n\r\n#### What this PR does / why we need it:\r\n\r\nThis PR creates AdditionalWebFilterChainProxy to call all additional filters instead of using SecurityWebFilterChain.\r\n\r\nPlease note that:\r\n- the AdditionalWebFilterChainProxy should be executed before `org.springframework.security.web.server.WebFilterChainProxy`.\r\n- I don't change `UsernamePasswordAuthenticator` because of <https://github.com/halo-dev/halo/pull/5348>. The authenticator should be in Security scope instead of a standalone webfilter.\r\n\r\nSee https://github.com/halo-dev/halo/issues/5300#issuecomment-1933436652 for more.\r\n\r\n#### Which issue(s) this PR fixes:\r\n\r\nFixes https://github.com/halo-dev/halo/issues/5300\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/content/impl/PostServiceImpl.java b/application/src/main/java/run/halo/app/content/impl/PostServiceImpl.java\n--- a/application/src/main/java/run/halo/app/content/impl/PostServiceImpl.java\n+++ b/application/src/main/java/run/halo/app/content/impl/PostServiceImpl.java\n@@ -170,7 +170,7 @@ private Flux<Contributor> listContributors(List<String> usernames) {\n             return Flux.empty();\n         }\n         return Flux.fromIterable(usernames)\n-            .flatMap(userService::getUserOrGhost)\n+            .concatMap(userService::getUserOrGhost)\n             .map(user -> {\n                 Contributor contributor = new Contributor();\n                 contributor.setName(user.getMetadata().getName());",
    "output": "Merge pull request #5279 from guqing/bugfix/order-for-contributors\n\nfix: the order of contributors for posts is not fixed"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/content/impl/PostServiceImpl.java b/application/src/main/java/run/halo/app/content/impl/PostServiceImpl.java\n--- a/application/src/main/java/run/halo/app/content/impl/PostServiceImpl.java\n+++ b/application/src/main/java/run/halo/app/content/impl/PostServiceImpl.java\n@@ -170,7 +170,7 @@ private Flux<Contributor> listContributors(List<String> usernames) {\n             return Flux.empty();\n         }\n         return Flux.fromIterable(usernames)\n-            .flatMap(userService::getUserOrGhost)\n+            .concatMap(userService::getUserOrGhost)\n             .map(user -> {\n                 Contributor contributor = new Contributor();\n                 contributor.setName(user.getMetadata().getName());",
    "output": "fix: the order of contributors for posts is not fixed"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/plugin/PluginControllerManager.java b/application/src/main/java/run/halo/app/plugin/PluginControllerManager.java\n--- a/application/src/main/java/run/halo/app/plugin/PluginControllerManager.java\n+++ b/application/src/main/java/run/halo/app/plugin/PluginControllerManager.java\n@@ -3,14 +3,14 @@\n import static org.springframework.core.ResolvableType.forClassWithGenerics;\n \n import java.util.concurrent.ConcurrentHashMap;\n-import org.springframework.context.event.ContextClosedEvent;\n-import org.springframework.context.event.ContextRefreshedEvent;\n import org.springframework.context.event.EventListener;\n import reactor.core.Disposable;\n import run.halo.app.extension.ExtensionClient;\n import run.halo.app.extension.controller.Controller;\n import run.halo.app.extension.controller.ControllerBuilder;\n import run.halo.app.extension.controller.Reconciler;\n+import run.halo.app.plugin.event.SpringPluginStartedEvent;\n+import run.halo.app.plugin.event.SpringPluginStoppingEvent;\n \n public class PluginControllerManager {\n \n@@ -24,16 +24,16 @@ public PluginControllerManager(ExtensionClient client) {\n     }\n \n     @EventListener\n-    public void onApplicationEvent(ContextRefreshedEvent event) {\n-        event.getApplicationContext()\n+    public void onApplicationEvent(SpringPluginStartedEvent event) {\n+        event.getSpringPlugin().getApplicationContext()\n             .<Reconciler<Reconciler.Request>>getBeanProvider(\n                 forClassWithGenerics(Reconciler.class, Reconciler.Request.class))\n             .orderedStream()\n             .forEach(this::start);\n     }\n \n     @EventListener\n-    public void onApplicationEvent(ContextClosedEvent event) throws Exception {\n+    public void onApplicationEvent(SpringPluginStoppingEvent event) throws Exception {\n         controllers.values()\n             .forEach(Disposable::dispose);\n         controllers.clear();",
    "output": "Fix the problem of starting reconcilers in plugin before registering scheme (#5271)\n\n#### What type of PR is this?\r\n\r\n/kind bug\r\n/area core\r\n/area plugin\r\n/milestone 2.12.0\r\n\r\n#### What this PR does / why we need it:\r\n\r\nThis PR adjusts the order of starting reconcilers in plugin, or it will be stuck in starting synchronizer and no reconcilers will be executed.\r\n\r\nThe problem may be introduced by <https://github.com/halo-dev/halo/pull/5251>.\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/core/extension/reconciler/PluginReconciler.java b/application/src/main/java/run/halo/app/core/extension/reconciler/PluginReconciler.java\n--- a/application/src/main/java/run/halo/app/core/extension/reconciler/PluginReconciler.java\n+++ b/application/src/main/java/run/halo/app/core/extension/reconciler/PluginReconciler.java\n@@ -240,7 +240,7 @@ private void resolveStaticResources(Plugin plugin) {\n             log.info(\"Resolving logo resource for plugin {}\", pluginName);\n             // the logo might be:\n             // 1. URL\n-            // 2. file name\n+            // 2. relative path to \"resources\" folder\n             // 3. base64 format data image\n             var logo = specLogo;\n             if (!specLogo.startsWith(\"data:image\")) {\n@@ -249,7 +249,8 @@ private void resolveStaticResources(Plugin plugin) {\n                 } catch (MalformedURLException ignored) {\n                     // indicate the logo is a path\n                     logo = UriComponentsBuilder.newInstance()\n-                        .pathSegment(\"plugins\", pluginName, \"assets\", specLogo)\n+                        .pathSegment(\"plugins\", pluginName, \"assets\")\n+                        .path(specLogo)\n                         .queryParam(\"version\", pluginVersion)\n                         .build(true)\n                         .toString();",
    "output": "Fix the problem of resolving logo starting with slash (#5256)\n\n#### What type of PR is this?\r\n\r\n/kind bug\r\n/area core\r\n/milestone 2.12.x\r\n\r\n#### What this PR does / why we need it:\r\n\r\nThis PR treats logo as a path when building logo HTTP URL instead of a path segment. The concrete rules of logo is described [here](https://github.com/halo-dev/halo/issues/5253#issuecomment-1911729063).\r\n\r\nSee https://github.com/halo-dev/halo/issues/5253 for more.\r\n\r\n#### Which issue(s) this PR fixes:\r\n\r\nFixes https://github.com/halo-dev/halo/issues/5253\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/plugin/HaloPluginManager.java b/application/src/main/java/run/halo/app/plugin/HaloPluginManager.java\n--- a/application/src/main/java/run/halo/app/plugin/HaloPluginManager.java\n+++ b/application/src/main/java/run/halo/app/plugin/HaloPluginManager.java\n@@ -223,10 +223,7 @@ public void stopPlugins() {\n     private PluginState doStartPlugin(String pluginId) {\n         checkPluginId(pluginId);\n \n-        // refresh plugin to ensure cache object of PluginWrapper.plugin is up-to-date\n-        // see gh-4016 to know why we need this\n-        // TODO if has a better way to do this?\n-        PluginWrapper pluginWrapper = refreshPluginWrapper(pluginId);\n+        PluginWrapper pluginWrapper = getPlugin(pluginId);\n \n         checkExtensionFinderReady(pluginWrapper);\n \n@@ -352,37 +349,6 @@ private void removePluginComponentsCache(String pluginId) {\n         }\n     }\n \n-    /**\n-     * <p>Refresh plugin wrapper by plugin name.</p>\n-     *\n-     * <p>It will be create a new plugin wrapper and replace old plugin wrapper to clean\n-     * {@link PluginWrapper#getPlugin()} cache object.</p>\n-     *\n-     * @param pluginName plugin name\n-     * @return refreshed plugin wrapper instance, plugin cache object will be null\n-     * @throws IllegalArgumentException if plugin not found\n-     */\n-    protected synchronized PluginWrapper refreshPluginWrapper(String pluginName) {\n-        checkPluginId(pluginName);\n-        // get old plugin wrapper\n-        PluginWrapper pluginWrapper = getPlugin(pluginName);\n-        // create new plugin wrapper to replace old plugin wrapper\n-        PluginWrapper refreshed = copyPluginWrapper(pluginWrapper);\n-        this.plugins.put(pluginName, refreshed);\n-        return refreshed;\n-    }\n-\n-    @NonNull\n-    PluginWrapper copyPluginWrapper(@NonNull PluginWrapper pluginWrapper) {\n-        PluginWrapper refreshed =\n-            createPluginWrapper(pluginWrapper.getDescriptor(), pluginWrapper.getPluginPath(),\n-                pluginWrapper.getPluginClassLoader());\n-        refreshed.setPluginFactory(getPluginFactory());\n-        refreshed.setPluginState(pluginWrapper.getPluginState());\n-        refreshed.setFailedException(pluginWrapper.getFailedException());\n-        return refreshed;\n-    }\n-\n     @Override\n     public void destroy() throws Exception {\n         stopPlugins();",
    "output": "Revert: refresh the plugin wrapper when starting the plugin (#5238)\n\n#### What type of PR is this?\r\n\r\n/kind improvement\r\n/area core\r\n/milestone 2.12.x\r\n\r\n#### What this PR does / why we need it:\r\n\r\nThis PR reverts changes in PR <https://github.com/halo-dev/halo/pull/4023>, mainly thanks to PR <https://github.com/halo-dev/halo/pull/5148>.\r\n\r\nWe don't need to refresh the plugin wrapper on every startup, because we entirely disable the plugin in plugin manager when disabling plugin at console.\r\n\r\n#### Which issue(s) this PR fixes:\r\n\r\nFixes https://github.com/halo-dev/halo/issues/4016\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/api/src/main/java/run/halo/app/extension/JsonExtension.java b/api/src/main/java/run/halo/app/extension/JsonExtension.java\n--- a/api/src/main/java/run/halo/app/extension/JsonExtension.java\n+++ b/api/src/main/java/run/halo/app/extension/JsonExtension.java\n@@ -17,6 +17,7 @@\n import java.io.IOException;\n import java.time.Instant;\n import java.util.Map;\n+import java.util.Objects;\n import java.util.Set;\n \n /**\n@@ -117,6 +118,23 @@ public MetadataOperator getMetadataOrCreate() {\n         return new ObjectNodeMetadata(metadataNode);\n     }\n \n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        JsonExtension that = (JsonExtension) o;\n+        return Objects.equals(objectNode, that.objectNode);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(objectNode);\n+    }\n+\n     class ObjectNodeMetadata implements MetadataOperator {\n \n         private final ObjectNode objectNode;\n\ndiff --git a/application/src/main/java/run/halo/app/extension/ReactiveExtensionClientImpl.java b/application/src/main/java/run/halo/app/extension/ReactiveExtensionClientImpl.java\n--- a/application/src/main/java/run/halo/app/extension/ReactiveExtensionClientImpl.java\n+++ b/application/src/main/java/run/halo/app/extension/ReactiveExtensionClientImpl.java\n@@ -4,12 +4,13 @@\n import static org.springframework.util.StringUtils.hasText;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import java.time.Duration;\n import java.time.Instant;\n import java.util.Comparator;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Objects;\n-import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.function.Predicate;\n import org.springframework.dao.DataIntegrityViolationException;\n import org.springframework.data.util.Predicates;\n@@ -137,42 +138,31 @@ public <E extends Extension> Mono<E> create(E extension) {\n     @SuppressWarnings(\"unchecked\")\n     public <E extends Extension> Mono<E> update(E extension) {\n         // Refactor the atomic reference if we have a better solution.\n-        final var statusChangeOnly = new AtomicBoolean(false);\n-        return getLatest(extension)\n-            .map(old -> new JsonExtension(objectMapper, old))\n-            .flatMap(oldJsonExt -> {\n-                var newJsonExt = new JsonExtension(objectMapper, extension);\n-                // reset some mandatory fields\n-                var oldMetadata = oldJsonExt.getMetadata();\n-                var newMetadata = newJsonExt.getMetadata();\n-                newMetadata.setCreationTimestamp(oldMetadata.getCreationTimestamp());\n-                newMetadata.setGenerateName(oldMetadata.getGenerateName());\n-\n-                var oldObjectNode = oldJsonExt.getInternal().deepCopy();\n-                var newObjectNode = newJsonExt.getInternal().deepCopy();\n-                if (Objects.equals(oldObjectNode, newObjectNode)) {\n-                    // if no data were changed, just skip updating.\n-                    return Mono.empty();\n-                }\n-                // check status is changed\n-                oldObjectNode.remove(\"status\");\n-                newObjectNode.remove(\"status\");\n-                if (Objects.equals(oldObjectNode, newObjectNode)) {\n-                    statusChangeOnly.set(true);\n-                }\n-                return Mono.just(newJsonExt);\n-            })\n-            .map(converter::convertTo)\n-            .flatMap(extensionStore -> client.update(extensionStore.getName(),\n-                extensionStore.getVersion(),\n-                extensionStore.getData()))\n-            .map(updated -> converter.convertFrom((Class<E>) extension.getClass(), updated))\n-            .doOnNext(updated -> {\n-                if (!statusChangeOnly.get()) {\n-                    watchers.onUpdate(extension, updated);\n-                }\n-            })\n-            .switchIfEmpty(Mono.defer(() -> Mono.just(extension)));\n+        return getLatest(extension).flatMap(old -> {\n+            var oldJsonExt = new JsonExtension(objectMapper, old);\n+            var newJsonExt = new JsonExtension(objectMapper, extension);\n+            // reset some mandatory fields\n+            var oldMetadata = oldJsonExt.getMetadata();\n+            var newMetadata = newJsonExt.getMetadata();\n+            newMetadata.setCreationTimestamp(oldMetadata.getCreationTimestamp());\n+            newMetadata.setGenerateName(oldMetadata.getGenerateName());\n+\n+            if (Objects.equals(oldJsonExt, newJsonExt)) {\n+                // skip updating if not data changed.\n+                return Mono.just(extension);\n+            }\n+\n+            var onlyStatusChanged =\n+                isOnlyStatusChanged(oldJsonExt.getInternal(), newJsonExt.getInternal());\n+\n+            var store = this.converter.convertTo(newJsonExt);\n+            var updated = client.update(store.getName(), store.getVersion(), store.getData())\n+                .map(ext -> converter.convertFrom((Class<E>) extension.getClass(), ext));\n+            if (!onlyStatusChanged) {\n+                updated = updated.doOnNext(ext -> watchers.onUpdate(old, ext));\n+            }\n+            return updated;\n+        });\n     }\n \n     private Mono<? extends Extension> getLatest(Extension extension) {\n@@ -199,4 +189,26 @@ public void watch(Watcher watcher) {\n         this.watchers.addWatcher(watcher);\n     }\n \n+    private static boolean isOnlyStatusChanged(ObjectNode oldNode, ObjectNode newNode) {\n+        if (Objects.equals(oldNode, newNode)) {\n+            return false;\n+        }\n+        // WARNING!!!\n+        // Do not edit the ObjectNode\n+        var oldFields = new HashSet<String>();\n+        var newFields = new HashSet<String>();\n+        oldNode.fieldNames().forEachRemaining(oldFields::add);\n+        newNode.fieldNames().forEachRemaining(newFields::add);\n+        oldFields.remove(\"status\");\n+        newFields.remove(\"status\");\n+        if (!Objects.equals(oldFields, newFields)) {\n+            return false;\n+        }\n+        for (var field : oldFields) {\n+            if (!Objects.equals(oldNode.get(field), newNode.get(field))) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n }\n\ndiff --git a/application/src/test/java/run/halo/app/extension/FakeExtension.java b/application/src/test/java/run/halo/app/extension/FakeExtension.java\n--- a/application/src/test/java/run/halo/app/extension/FakeExtension.java\n+++ b/application/src/test/java/run/halo/app/extension/FakeExtension.java\n@@ -1,12 +1,21 @@\n package run.halo.app.extension;\n \n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+\n @GVK(group = \"fake.halo.run\",\n     version = \"v1alpha1\",\n     kind = \"Fake\",\n     plural = \"fakes\",\n     singular = \"fake\")\n+@Data\n+@ToString(callSuper = true)\n+@EqualsAndHashCode(callSuper = true)\n public class FakeExtension extends AbstractExtension {\n \n+    private FakeStatus status = new FakeStatus();\n+\n     public static FakeExtension createFake(String name) {\n         var metadata = new Metadata();\n         metadata.setName(name);\n@@ -15,4 +24,8 @@ public static FakeExtension createFake(String name) {\n         return fake;\n     }\n \n+    @Data\n+    public static class FakeStatus {\n+        private String state;\n+    }\n }\n\ndiff --git a/application/src/test/java/run/halo/app/extension/ReactiveExtensionClientTest.java b/application/src/test/java/run/halo/app/extension/ReactiveExtensionClientTest.java\n--- a/application/src/test/java/run/halo/app/extension/ReactiveExtensionClientTest.java\n+++ b/application/src/test/java/run/halo/app/extension/ReactiveExtensionClientTest.java\n@@ -455,6 +455,37 @@ void shouldNotUpdateIfExtensionNotChange() {\n         verify(storeClient, never()).update(any(), any(), any());\n     }\n \n+    @Test\n+    void shouldUpdateIfExtensionStatusChangedOnly() {\n+        var fake = createFakeExtension(\"fake\", 2L);\n+        fake.getStatus().setState(\"new-state\");\n+        var storeName = \"/registry/fake.halo.run/fakes/fake\";\n+        when(converter.convertTo(any())).thenReturn(\n+            createExtensionStore(storeName, 2L));\n+        when(storeClient.update(any(), any(), any())).thenReturn(\n+            Mono.just(createExtensionStore(storeName, 2L)));\n+        when(storeClient.fetchByName(storeName)).thenReturn(\n+            Mono.just(createExtensionStore(storeName, 1L)));\n+\n+        var oldFake = createFakeExtension(\"fake\", 2L);\n+        oldFake.getStatus().setState(\"old-state\");\n+\n+        var updatedFake = createFakeExtension(\"fake\", 3L);\n+        when(converter.convertFrom(same(FakeExtension.class), any()))\n+            .thenReturn(oldFake)\n+            .thenReturn(updatedFake);\n+\n+        StepVerifier.create(client.update(fake))\n+            .expectNext(updatedFake)\n+            .verifyComplete();\n+\n+        verify(storeClient).fetchByName(storeName);\n+        verify(converter).convertTo(isA(JsonExtension.class));\n+        verify(converter, times(2)).convertFrom(same(FakeExtension.class), any());\n+        verify(storeClient)\n+            .update(eq(\"/registry/fake.halo.run/fakes/fake\"), eq(2L), any());\n+    }\n+\n     @Test\n     void shouldUpdateUnstructuredSuccessfully() throws JsonProcessingException {\n         var fake = createUnstructured();\n@@ -539,6 +570,13 @@ void shouldNotWatchOnUpdateIfExtensionNotChange() {\n             verify(watcher, never()).onUpdate(any(), any());\n         }\n \n+        @Test\n+        void shouldNotWatchOnUpdateIfExtensionStatusChangeOnly() {\n+            shouldUpdateIfExtensionStatusChangedOnly();\n+\n+            verify(watcher, never()).onUpdate(any(), any());\n+        }\n+\n         @Test\n         void shouldWatchOnDeleteSuccessfully() {\n             doNothing().when(watcher).onDelete(any());",
    "output": "Fix the problem of incorrect old data passed to watcher during updates (#4959)\n\n#### What type of PR is this?\r\n\r\n/kind bug\r\n/area core\r\n/milestone 2.11.0\r\n\r\n#### What this PR does / why we need it:\r\n\r\nThis PR resolves the problem of incorrect old data passed to watcher during updates. As shown in the following line, the old value should be `old` instead of `extension` from outside.\r\n\r\nhttps://github.com/halo-dev/halo/blob/7a84f553005b2d8047ccdb0acf473693384a7b51/application/src/main/java/run/halo/app/extension/ReactiveExtensionClientImpl.java#L172\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/plugin/AggregatedRouterFunction.java b/application/src/main/java/run/halo/app/plugin/AggregatedRouterFunction.java\n--- a/application/src/main/java/run/halo/app/plugin/AggregatedRouterFunction.java\n+++ b/application/src/main/java/run/halo/app/plugin/AggregatedRouterFunction.java\n@@ -0,0 +1,38 @@\n+package run.halo.app.plugin;\n+\n+import org.springframework.beans.factory.ObjectProvider;\n+import org.springframework.web.reactive.function.server.HandlerFunction;\n+import org.springframework.web.reactive.function.server.RouterFunction;\n+import org.springframework.web.reactive.function.server.RouterFunctions;\n+import org.springframework.web.reactive.function.server.ServerRequest;\n+import org.springframework.web.reactive.function.server.ServerResponse;\n+import reactor.core.publisher.Mono;\n+import run.halo.app.core.extension.endpoint.CustomEndpoint;\n+import run.halo.app.core.extension.endpoint.CustomEndpointsBuilder;\n+\n+/**\n+ * Aggregated router function built from all custom endpoints.\n+ *\n+ * @author johnniang\n+ */\n+public class AggregatedRouterFunction implements RouterFunction<ServerResponse> {\n+\n+    private final RouterFunction<ServerResponse> aggregated;\n+\n+    public AggregatedRouterFunction(ObjectProvider<CustomEndpoint> customEndpoints) {\n+        var builder = new CustomEndpointsBuilder();\n+        customEndpoints.orderedStream()\n+            .forEach(builder::add);\n+        this.aggregated = builder.build();\n+    }\n+\n+    @Override\n+    public Mono<HandlerFunction<ServerResponse>> route(ServerRequest request) {\n+        return aggregated.route(request);\n+    }\n+\n+    @Override\n+    public void accept(RouterFunctions.Visitor visitor) {\n+        this.aggregated.accept(visitor);\n+    }\n+}\n\ndiff --git a/application/src/main/java/run/halo/app/plugin/PluginApplicationInitializer.java b/application/src/main/java/run/halo/app/plugin/PluginApplicationInitializer.java\n--- a/application/src/main/java/run/halo/app/plugin/PluginApplicationInitializer.java\n+++ b/application/src/main/java/run/halo/app/plugin/PluginApplicationInitializer.java\n@@ -36,6 +36,7 @@\n  */\n @Slf4j\n public class PluginApplicationInitializer {\n+\n     protected final HaloPluginManager haloPluginManager;\n \n     private final ExtensionContextRegistry contextRegistry = ExtensionContextRegistry.getInstance();\n@@ -89,6 +90,8 @@ private PluginApplicationContext createPluginApplicationContext(String pluginId)\n         AnnotationConfigUtils.registerAnnotationConfigProcessors(beanFactory);\n         stopWatch.stop();\n \n+        pluginApplicationContext.registerBean(AggregatedRouterFunction.class);\n+\n         beanFactory.registerSingleton(\"pluginContext\", createPluginContext(plugin));\n         // TODO deprecated\n         beanFactory.registerSingleton(\"pluginWrapper\", haloPluginManager.getPlugin(pluginId));\n\ndiff --git a/application/src/main/java/run/halo/app/plugin/PluginCompositeRouterFunction.java b/application/src/main/java/run/halo/app/plugin/PluginCompositeRouterFunction.java\n--- a/application/src/main/java/run/halo/app/plugin/PluginCompositeRouterFunction.java\n+++ b/application/src/main/java/run/halo/app/plugin/PluginCompositeRouterFunction.java\n@@ -2,7 +2,7 @@\n \n import static run.halo.app.plugin.ExtensionContextRegistry.getInstance;\n \n-import java.util.ArrayList;\n+import com.google.common.collect.Iterables;\n import java.util.List;\n import org.springframework.context.support.AbstractApplicationContext;\n import org.springframework.lang.NonNull;\n@@ -14,8 +14,6 @@\n import org.springframework.web.reactive.function.server.ServerResponse;\n import reactor.core.publisher.Flux;\n import reactor.core.publisher.Mono;\n-import run.halo.app.core.extension.endpoint.CustomEndpoint;\n-import run.halo.app.core.extension.endpoint.CustomEndpointsBuilder;\n import run.halo.app.plugin.resources.ReverseProxyRouterFunctionRegistry;\n \n /**\n@@ -48,7 +46,7 @@ public void accept(@NonNull RouterFunctions.Visitor visitor) {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    private List<RouterFunction<ServerResponse>> routerFunctions() {\n+    private Iterable<RouterFunction<ServerResponse>> routerFunctions() {\n         getInstance().acquireReadLock();\n         try {\n             List<PluginApplicationContext> contexts = getInstance().getPluginApplicationContexts()\n@@ -64,18 +62,7 @@ private List<RouterFunction<ServerResponse>> routerFunctions() {\n                 .toList();\n             var reverseProxies = reverseProxyRouterFunctionFactory.getRouterFunctions();\n \n-            var endpointBuilder = new CustomEndpointsBuilder();\n-            contexts.forEach(context -> context.getBeanProvider(CustomEndpoint.class)\n-                .orderedStream()\n-                .forEach(endpointBuilder::add));\n-            var customEndpoint = endpointBuilder.build();\n-\n-            List<RouterFunction<ServerResponse>> routerFunctions =\n-                new ArrayList<>(rawRouterFunctions.size() + reverseProxies.size() + 1);\n-            routerFunctions.addAll(rawRouterFunctions);\n-            routerFunctions.addAll(reverseProxies);\n-            routerFunctions.add(customEndpoint);\n-            return routerFunctions;\n+            return Iterables.concat(rawRouterFunctions, reverseProxies);\n         } finally {\n             getInstance().releaseReadLock();\n         }\n\ndiff --git a/application/src/main/java/run/halo/app/plugin/event/HaloPluginStartedEvent.java b/application/src/main/java/run/halo/app/plugin/event/HaloPluginStartedEvent.java\n--- a/application/src/main/java/run/halo/app/plugin/event/HaloPluginStartedEvent.java\n+++ b/application/src/main/java/run/halo/app/plugin/event/HaloPluginStartedEvent.java\n@@ -1,24 +1,23 @@\n package run.halo.app.plugin.event;\n \n+import lombok.Getter;\n import org.pf4j.PluginWrapper;\n import org.springframework.context.ApplicationEvent;\n+import org.springframework.util.Assert;\n \n /**\n  * This event will be published to <b>application context</b> once plugin is started.\n  *\n  * @author guqing\n  */\n+@Getter\n public class HaloPluginStartedEvent extends ApplicationEvent {\n \n     private final PluginWrapper plugin;\n \n-\n     public HaloPluginStartedEvent(Object source, PluginWrapper plugin) {\n         super(source);\n+        Assert.notNull(plugin, \"Plugin must not be null.\");\n         this.plugin = plugin;\n     }\n-\n-    public PluginWrapper getPlugin() {\n-        return plugin;\n-    }\n }\n\ndiff --git a/application/src/test/java/run/halo/app/plugin/PluginCompositeRouterFunctionTest.java b/application/src/test/java/run/halo/app/plugin/PluginCompositeRouterFunctionTest.java\n--- a/application/src/test/java/run/halo/app/plugin/PluginCompositeRouterFunctionTest.java\n+++ b/application/src/test/java/run/halo/app/plugin/PluginCompositeRouterFunctionTest.java\n@@ -24,7 +24,6 @@\n import org.springframework.web.server.ServerWebExchange;\n import reactor.core.publisher.Mono;\n import reactor.test.StepVerifier;\n-import run.halo.app.core.extension.endpoint.CustomEndpoint;\n import run.halo.app.plugin.resources.ReverseProxyRouterFunctionRegistry;\n \n /**\n@@ -43,9 +42,6 @@ class PluginCompositeRouterFunctionTest {\n     @Mock\n     ObjectProvider<RouterFunction> rawRouterFunctionsProvider;\n \n-    @Mock\n-    ObjectProvider<CustomEndpoint> customEndpointsProvider;\n-\n     @InjectMocks\n     PluginCompositeRouterFunction compositeRouterFunction;\n \n@@ -59,11 +55,9 @@ void setUp() {\n         ExtensionContextRegistry.getInstance().register(\"fake-plugin\", fakeContext);\n \n         when(rawRouterFunctionsProvider.orderedStream()).thenReturn(Stream.empty());\n-        when(customEndpointsProvider.orderedStream()).thenReturn(Stream.empty());\n \n         when(fakeContext.getBeanProvider(RouterFunction.class))\n             .thenReturn(rawRouterFunctionsProvider);\n-        when(fakeContext.getBeanProvider(CustomEndpoint.class)).thenReturn(customEndpointsProvider);\n \n         compositeRouterFunction =\n             new PluginCompositeRouterFunction(reverseProxyRouterFunctionRegistry);\n@@ -93,11 +87,10 @@ void route() {\n             .verify();\n \n         verify(rawRouterFunctionsProvider).orderedStream();\n-        verify(customEndpointsProvider).orderedStream();\n     }\n \n     private ServerWebExchange createExchange(String urlTemplate) {\n         return MockServerWebExchange.from(MockServerHttpRequest.get(urlTemplate));\n     }\n \n-}\n\\ No newline at end of file\n+}",
    "output": "Fix the issue with repeatedly building plugin RouterFunction for CustomEndpoints (#4890)\n\n* fix: OOM occured when using ab to test custom endpoints provided by plugin\r\n\r\n* refactor: custom endpoints to rotuer function register for plugin\r\n\r\n* refactor: bean post processor register\r\n\r\n* Register AggregatedRouterFunction bean instead of adding bean factory post processor\r\n\r\n* Remove debug lines\r\n\r\n---------\r\n\r\nCo-authored-by: John Niang <johnniang@foxmail.com>"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/core/extension/endpoint/SystemInitializationEndpoint.java b/application/src/main/java/run/halo/app/core/extension/endpoint/SystemInitializationEndpoint.java\n--- a/application/src/main/java/run/halo/app/core/extension/endpoint/SystemInitializationEndpoint.java\n+++ b/application/src/main/java/run/halo/app/core/extension/endpoint/SystemInitializationEndpoint.java\n@@ -2,9 +2,11 @@\n \n import static io.swagger.v3.oas.annotations.media.Schema.RequiredMode.REQUIRED;\n import static org.springdoc.core.fn.builders.apiresponse.Builder.responseBuilder;\n+import static org.springdoc.core.fn.builders.header.Builder.headerBuilder;\n import static org.springdoc.core.fn.builders.requestbody.Builder.requestBodyBuilder;\n \n import io.swagger.v3.oas.annotations.media.Schema;\n+import java.net.URI;\n import java.time.Duration;\n import java.util.LinkedHashMap;\n import java.util.Map;\n@@ -13,6 +15,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.springdoc.webflux.core.fn.SpringdocRouteBuilder;\n import org.springframework.dao.OptimisticLockingFailureException;\n+import org.springframework.http.HttpHeaders;\n import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n import org.springframework.web.reactive.function.server.RouterFunction;\n@@ -56,7 +59,14 @@ public RouterFunction<ServerResponse> endpoint() {\n                     .tag(tag)\n                     .requestBody(requestBodyBuilder()\n                         .implementation(SystemInitializationRequest.class))\n-                    .response(responseBuilder().implementation(Boolean.class))\n+                    .response(responseBuilder()\n+                        .responseCode(HttpStatus.CREATED.value() + \"\")\n+                        .description(\"System initialization successfully.\")\n+                        .header(headerBuilder()\n+                            .name(HttpHeaders.LOCATION)\n+                            .description(\"Redirect URL.\")\n+                        )\n+                    )\n             )\n             .build();\n     }\n@@ -87,7 +97,7 @@ private Mono<ServerResponse> initialize(ServerRequest request) {\n                     return initializeSystem(requestBody);\n                 })\n             )\n-            .then(ServerResponse.ok().bodyValue(true));\n+            .then(ServerResponse.created(URI.create(\"/console\")).build());\n     }\n \n     private Mono<Void> initializeSystem(SystemInitializationRequest requestBody) {\n\ndiff --git a/application/src/test/java/run/halo/app/core/extension/endpoint/SystemInitializationEndpointTest.java b/application/src/test/java/run/halo/app/core/extension/endpoint/SystemInitializationEndpointTest.java\n--- a/application/src/test/java/run/halo/app/core/extension/endpoint/SystemInitializationEndpointTest.java\n+++ b/application/src/test/java/run/halo/app/core/extension/endpoint/SystemInitializationEndpointTest.java\n@@ -1,13 +1,25 @@\n package run.halo.app.core.extension.endpoint;\n \n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n import static org.springframework.test.web.reactive.server.WebTestClient.bindToRouterFunction;\n \n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n import org.mockito.junit.jupiter.MockitoExtension;\n import org.springframework.test.web.reactive.server.WebTestClient;\n+import reactor.core.publisher.Mono;\n+import run.halo.app.core.extension.endpoint.SystemInitializationEndpoint.SystemInitializationRequest;\n+import run.halo.app.extension.ConfigMap;\n+import run.halo.app.extension.ReactiveExtensionClient;\n+import run.halo.app.infra.InitializationStateGetter;\n+import run.halo.app.infra.SystemSetting;\n+import run.halo.app.security.SuperAdminInitializer;\n+import run.halo.app.security.SuperAdminInitializer.InitializationParam;\n \n /**\n  * Tests for {@link SystemInitializationEndpoint}.\n@@ -18,6 +30,15 @@\n @ExtendWith(MockitoExtension.class)\n class SystemInitializationEndpointTest {\n \n+    @Mock\n+    InitializationStateGetter initializationStateGetter;\n+\n+    @Mock\n+    SuperAdminInitializer superAdminInitializer;\n+\n+    @Mock\n+    ReactiveExtensionClient client;\n+\n     @InjectMocks\n     SystemInitializationEndpoint initializationEndpoint;\n \n@@ -29,11 +50,40 @@ void setUp() {\n     }\n \n     @Test\n-    void initialize() {\n+    void initializeWithoutRequestBody() {\n         webTestClient.post()\n             .uri(\"/system/initialize\")\n             .exchange()\n             .expectStatus()\n             .isBadRequest();\n     }\n+\n+    @Test\n+    void initializeWithRequestBody() {\n+        var initialization = new SystemInitializationRequest();\n+        initialization.setUsername(\"faker\");\n+        initialization.setPassword(\"openfaker\");\n+        initialization.setEmail(\"faker@halo.run\");\n+        initialization.setSiteTitle(\"Fake Site\");\n+\n+        when(initializationStateGetter.userInitialized()).thenReturn(Mono.just(false));\n+        when(superAdminInitializer.initialize(any(InitializationParam.class)))\n+            .thenReturn(Mono.empty());\n+\n+        var configMap = new ConfigMap();\n+        when(client.get(ConfigMap.class, SystemSetting.SYSTEM_CONFIG))\n+            .thenReturn(Mono.just(configMap));\n+        when(client.update(configMap)).thenReturn(Mono.just(configMap));\n+\n+        webTestClient.post().uri(\"/system/initialize\")\n+            .bodyValue(initialization)\n+            .exchange()\n+            .expectStatus().isCreated()\n+            .expectHeader().location(\"/console\");\n+\n+        verify(initializationStateGetter).userInitialized();\n+        verify(superAdminInitializer).initialize(any());\n+        verify(client).get(ConfigMap.class, SystemSetting.SYSTEM_CONFIG);\n+        verify(client).update(configMap);\n+    }\n }",
    "output": "Respond HTTP status CREATED for system initialization API (#4887)\n\n#### What type of PR is this?\r\n\r\n/kind improvement\r\n/area core\r\n/milestone 2.11.x\r\n\r\n#### What this PR does / why we need it:\r\n\r\nRespond HTTP status CREATED for system initialization API instead of string `true`.\r\n\r\n#### Which issue(s) this PR fixes:\r\n\r\nFixes #4885 \r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/config/WebFluxConfig.java b/application/src/main/java/run/halo/app/config/WebFluxConfig.java\n--- a/application/src/main/java/run/halo/app/config/WebFluxConfig.java\n+++ b/application/src/main/java/run/halo/app/config/WebFluxConfig.java\n@@ -29,14 +29,13 @@\n import org.springframework.web.reactive.config.WebFluxConfigurer;\n import org.springframework.web.reactive.function.BodyInserters;\n import org.springframework.web.reactive.function.server.RouterFunction;\n-import org.springframework.web.reactive.function.server.ServerRequest;\n import org.springframework.web.reactive.function.server.ServerResponse;\n import org.springframework.web.reactive.resource.EncodedResourceResolver;\n import org.springframework.web.reactive.resource.PathResourceResolver;\n import org.springframework.web.reactive.result.view.ViewResolutionResultHandler;\n import org.springframework.web.reactive.result.view.ViewResolver;\n import reactor.core.publisher.Mono;\n-import run.halo.app.console.ConsoleProxyFilter;\n+import run.halo.app.console.ProxyFilter;\n import run.halo.app.console.WebSocketRequestPredicate;\n import run.halo.app.core.extension.endpoint.CustomEndpoint;\n import run.halo.app.core.extension.endpoint.CustomEndpointsBuilder;\n@@ -104,11 +103,21 @@ RouterFunction<ServerResponse> consoleIndexRedirection() {\n             .and(path(\"/console/**\").and(path(\"/console/assets/**\").negate()))\n             .and(accept(MediaType.TEXT_HTML))\n             .and(new WebSocketRequestPredicate().negate());\n-        return route(consolePredicate, this::serveConsoleIndex);\n+        return route(consolePredicate,\n+            request -> this.serveIndex(haloProp.getConsole().getLocation() + \"index.html\"));\n     }\n \n-    private Mono<ServerResponse> serveConsoleIndex(ServerRequest request) {\n-        var indexLocation = haloProp.getConsole().getLocation() + \"index.html\";\n+    @Bean\n+    RouterFunction<ServerResponse> ucIndexRedirect() {\n+        var consolePredicate = method(HttpMethod.GET)\n+            .and(path(\"/uc/**\").and(path(\"/uc/assets/**\").negate()))\n+            .and(accept(MediaType.TEXT_HTML))\n+            .and(new WebSocketRequestPredicate().negate());\n+        return route(consolePredicate,\n+            request -> this.serveIndex(haloProp.getUc().getLocation() + \"index.html\"));\n+    }\n+\n+    private Mono<ServerResponse> serveIndex(String indexLocation) {\n         var indexResource = applicationContext.getResource(indexLocation);\n         try {\n             return ServerResponse.ok()\n@@ -142,6 +151,15 @@ public void addResourceHandlers(ResourceHandlerRegistry registry) {\n             .addResolver(new EncodedResourceResolver())\n             .addResolver(new PathResourceResolver());\n \n+        // For uc assets\n+        registry.addResourceHandler(\"/uc/assets/**\")\n+            .addResourceLocations(haloProp.getUc().getLocation() + \"assets/\")\n+            .setCacheControl(cacheControl)\n+            .setUseLastModified(useLastModified)\n+            .resourceChain(true)\n+            .addResolver(new EncodedResourceResolver())\n+            .addResolver(new PathResourceResolver());\n+\n         // Additional resource mappings\n         var staticResources = haloProp.getAttachment().getResourceMappings();\n         staticResources.forEach(staticResource -> {\n@@ -172,7 +190,14 @@ public void addResourceHandlers(ResourceHandlerRegistry registry) {\n \n     @ConditionalOnProperty(name = \"halo.console.proxy.enabled\", havingValue = \"true\")\n     @Bean\n-    ConsoleProxyFilter consoleProxyFilter() {\n-        return new ConsoleProxyFilter(haloProp);\n+    ProxyFilter consoleProxyFilter() {\n+        return new ProxyFilter(\"/console/**\", haloProp.getConsole().getProxy());\n+    }\n+\n+\n+    @ConditionalOnProperty(name = \"halo.uc.proxy.enabled\", havingValue = \"true\")\n+    @Bean\n+    ProxyFilter ucProxyFilter() {\n+        return new ProxyFilter(\"/uc/**\", haloProp.getUc().getProxy());\n     }\n }\n\ndiff --git a/application/src/main/java/run/halo/app/console/ProxyFilter.java b/application/src/main/java/run/halo/app/console/ProxyFilter.java\n--- a/application/src/main/java/run/halo/app/console/ProxyFilter.java\n+++ b/application/src/main/java/run/halo/app/console/ProxyFilter.java\n@@ -13,26 +13,26 @@\n import org.springframework.web.server.WebFilterChain;\n import org.springframework.web.util.UriComponentsBuilder;\n import reactor.core.publisher.Mono;\n-import run.halo.app.infra.properties.ConsoleProperties.ProxyProperties;\n-import run.halo.app.infra.properties.HaloProperties;\n+import run.halo.app.infra.properties.ProxyProperties;\n \n @Slf4j\n-public class ConsoleProxyFilter implements WebFilter {\n+public class ProxyFilter implements WebFilter {\n \n     private final ProxyProperties proxyProperties;\n \n     private final ServerWebExchangeMatcher consoleMatcher;\n \n     private final WebClient webClient;\n \n-    public ConsoleProxyFilter(HaloProperties haloProperties) {\n-        this.proxyProperties = haloProperties.getConsole().getProxy();\n-        var consoleMatcher = ServerWebExchangeMatchers.pathMatchers(HttpMethod.GET, \"/console/**\");\n+    public ProxyFilter(String pattern, ProxyProperties proxyProperties) {\n+        this.proxyProperties = proxyProperties;\n+        var consoleMatcher = ServerWebExchangeMatchers.pathMatchers(HttpMethod.GET, pattern);\n         consoleMatcher = new AndServerWebExchangeMatcher(consoleMatcher,\n             new NegatedServerWebExchangeMatcher(new WebSocketServerWebExchangeMatcher()));\n         this.consoleMatcher = consoleMatcher;\n         this.webClient = WebClient.create(proxyProperties.getEndpoint().toString());\n-        log.info(\"Initialized ConsoleProxyFilter to proxy console\");\n+        log.debug(\"Initialized ProxyFilter to proxy {} to endpoint {}\", pattern,\n+            proxyProperties.getEndpoint());\n     }\n \n     @Override\n\ndiff --git a/application/src/main/java/run/halo/app/infra/properties/ConsoleProperties.java b/application/src/main/java/run/halo/app/infra/properties/ConsoleProperties.java\n--- a/application/src/main/java/run/halo/app/infra/properties/ConsoleProperties.java\n+++ b/application/src/main/java/run/halo/app/infra/properties/ConsoleProperties.java\n@@ -1,7 +1,6 @@\n package run.halo.app.infra.properties;\n \n import jakarta.validation.Valid;\n-import java.net.URI;\n import lombok.Data;\n \n @Data\n@@ -12,17 +11,4 @@ public class ConsoleProperties {\n     @Valid\n     private ProxyProperties proxy = new ProxyProperties();\n \n-    @Data\n-    public static class ProxyProperties {\n-\n-        /**\n-         * Console endpoint in development environment to be proxied. e.g.: http://localhost:8090/\n-         */\n-        private URI endpoint;\n-\n-        /**\n-         * Indicates if the proxy behaviour is enabled. Default is false\n-         */\n-        private boolean enabled = false;\n-    }\n }\n\ndiff --git a/application/src/main/java/run/halo/app/infra/properties/HaloProperties.java b/application/src/main/java/run/halo/app/infra/properties/HaloProperties.java\n--- a/application/src/main/java/run/halo/app/infra/properties/HaloProperties.java\n+++ b/application/src/main/java/run/halo/app/infra/properties/HaloProperties.java\n@@ -54,6 +54,9 @@ public class HaloProperties implements Validator {\n     @Valid\n     private final ConsoleProperties console = new ConsoleProperties();\n \n+    @Valid\n+    private final UcProperties uc = new UcProperties();\n+\n     @Valid\n     private final ThemeProperties theme = new ThemeProperties();\n \n\ndiff --git a/application/src/main/java/run/halo/app/infra/properties/ProxyProperties.java b/application/src/main/java/run/halo/app/infra/properties/ProxyProperties.java\n--- a/application/src/main/java/run/halo/app/infra/properties/ProxyProperties.java\n+++ b/application/src/main/java/run/halo/app/infra/properties/ProxyProperties.java\n@@ -0,0 +1,18 @@\n+package run.halo.app.infra.properties;\n+\n+import java.net.URI;\n+import lombok.Data;\n+\n+@Data\n+public class ProxyProperties {\n+\n+    /**\n+     * Console endpoint in development environment to be proxied. e.g.: http://localhost:8090/\n+     */\n+    private URI endpoint;\n+\n+    /**\n+     * Indicates if the proxy behaviour is enabled. Default is false\n+     */\n+    private boolean enabled = false;\n+}\n\ndiff --git a/application/src/main/java/run/halo/app/infra/properties/UcProperties.java b/application/src/main/java/run/halo/app/infra/properties/UcProperties.java\n--- a/application/src/main/java/run/halo/app/infra/properties/UcProperties.java\n+++ b/application/src/main/java/run/halo/app/infra/properties/UcProperties.java\n@@ -0,0 +1,14 @@\n+package run.halo.app.infra.properties;\n+\n+import jakarta.validation.Valid;\n+import lombok.Data;\n+\n+@Data\n+public class UcProperties {\n+\n+    private String location = \"classpath:/uc/\";\n+\n+    @Valid\n+    private ProxyProperties proxy = new ProxyProperties();\n+\n+}",
    "output": "Support user-center route (#4797)\n\n#### What type of PR is this?\r\n\r\n/kind feature\r\n/area core\r\n/area console\r\n\r\n#### What this PR does / why we need it:\r\n\r\nThis PR add a route to support user-center.\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/notification/EmailNotifier.java b/application/src/main/java/run/halo/app/notification/EmailNotifier.java\n--- a/application/src/main/java/run/halo/app/notification/EmailNotifier.java\n+++ b/application/src/main/java/run/halo/app/notification/EmailNotifier.java\n@@ -148,7 +148,7 @@ Mono<String> appendHtmlBodyFooter(ReasonAttributes attributes) {\n             <div class=\"footer\" style=\"font-size: 12px; color: #666;\">\n             <a th:href=\"${site.url}\" th:text=\"${site.title}\"></a>\n             <p class=\"unsubscribe\">\n-            &mdash;<br />请勿直接回复此回邮件，\n+            &mdash;<br />请勿直接回复此邮件，\n             <a th:href=\"|${site.url}/console/users/-/notifications|\">查看通知</a>\n             或\n             <a th:href=\"${unsubscribeUrl}\">取消订阅</a>。",
    "output": "chore: modify the name in the notification template (#4703)"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/security/authentication/pat/impl/UserScopedPatHandlerImpl.java b/application/src/main/java/run/halo/app/security/authentication/pat/impl/UserScopedPatHandlerImpl.java\n--- a/application/src/main/java/run/halo/app/security/authentication/pat/impl/UserScopedPatHandlerImpl.java\n+++ b/application/src/main/java/run/halo/app/security/authentication/pat/impl/UserScopedPatHandlerImpl.java\n@@ -11,11 +11,11 @@\n import java.util.List;\n import java.util.Objects;\n import java.util.function.Predicate;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n import org.springframework.security.core.Authentication;\n import org.springframework.security.core.GrantedAuthority;\n import org.springframework.security.core.context.ReactiveSecurityContextHolder;\n import org.springframework.security.core.context.SecurityContext;\n-import org.springframework.security.core.userdetails.UserDetails;\n import org.springframework.security.oauth2.jose.jws.SignatureAlgorithm;\n import org.springframework.security.oauth2.jwt.JwsHeader;\n import org.springframework.security.oauth2.jwt.JwtClaimsSet;\n@@ -86,10 +86,9 @@ public void setClock(Clock clock) {\n     }\n \n     private static Mono<Authentication> mustBeRealUser(Mono<Authentication> authentication) {\n-        return authentication.filter(auth -> auth.getPrincipal() instanceof UserDetails)\n+        return authentication.filter(UsernamePasswordAuthenticationToken.class::isInstance)\n             // Non-username-password authentication could not access the API at any time.\n-            .switchIfEmpty(\n-                Mono.defer(() -> Mono.error(new AccessDeniedException())));\n+            .switchIfEmpty(Mono.error(AccessDeniedException::new));\n     }\n \n     @Override",
    "output": "Fix the problem that OAuth2 users cannot create PATs  (#4701)\n\n#### What type of PR is this?\r\n\r\n/kind bug\r\n/area core\r\n\r\n#### What this PR does / why we need it:\r\n\r\nIf someone logs in Halo via OAuth2, they will be prohibited from creating PATs. See https://github.com/halo-dev/halo/issues/4697 for more.\r\n\r\nThis PR also checks for UsernamePasswordAuthenticationToken while checking whether the current session was created by a real user.\r\n\r\n#### Which issue(s) this PR fixes:\r\n\r\nFixes https://github.com/halo-dev/halo/issues/4697\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/security/authentication/pat/PatAuthenticationManager.java b/application/src/main/java/run/halo/app/security/authentication/pat/PatAuthenticationManager.java\n--- a/application/src/main/java/run/halo/app/security/authentication/pat/PatAuthenticationManager.java\n+++ b/application/src/main/java/run/halo/app/security/authentication/pat/PatAuthenticationManager.java\n@@ -6,7 +6,9 @@\n \n import com.nimbusds.jwt.JWTClaimNames;\n import java.time.Clock;\n+import java.time.Duration;\n import java.util.Objects;\n+import org.springframework.dao.OptimisticLockingFailureException;\n import org.springframework.security.authentication.DisabledException;\n import org.springframework.security.authentication.ReactiveAuthenticationManager;\n import org.springframework.security.core.Authentication;\n@@ -17,13 +19,19 @@\n import org.springframework.security.oauth2.server.resource.authentication.ReactiveJwtAuthenticationConverter;\n import reactor.core.publisher.Flux;\n import reactor.core.publisher.Mono;\n+import reactor.util.retry.Retry;\n import run.halo.app.extension.ExtensionUtil;\n import run.halo.app.extension.ReactiveExtensionClient;\n import run.halo.app.security.PersonalAccessToken;\n import run.halo.app.security.authentication.jwt.JwtScopesAndRolesGrantedAuthoritiesConverter;\n \n public class PatAuthenticationManager implements ReactiveAuthenticationManager {\n \n+    /**\n+     * Minimal duration gap of personal access token update.\n+     */\n+    private static final Duration MIN_UPDATE_GAP = Duration.ofMinutes(1);\n+\n     private final ReactiveAuthenticationManager delegate;\n \n     private final ReactiveExtensionClient client;\n@@ -78,17 +86,33 @@ private Mono<Void> checkAvailability(JwtAuthenticationToken jwtAuthToken) {\n         return client.fetch(PersonalAccessToken.class, patName)\n             .switchIfEmpty(\n                 Mono.error(() -> new DisabledException(\"Personal access token has been deleted.\")))\n-            .flatMap(pat -> patChecks(pat, jwtId)\n-                .then(updateLastUsed(pat))\n-                .then()\n-            );\n+            .flatMap(pat -> patChecks(pat, jwtId).and(updateLastUsed(patName)));\n     }\n \n-    private Mono<PersonalAccessToken> updateLastUsed(PersonalAccessToken pat) {\n-        return Mono.defer(() -> {\n-            pat.getSpec().setLastUsed(clock.instant());\n-            return client.update(pat);\n-        });\n+    private Mono<Void> updateLastUsed(String patName) {\n+        // we try our best to update the last used timestamp.\n+\n+        // the now should be outside the retry cycle because we don't want a fresh timestamp at\n+        // every retry.\n+        var now = clock.instant();\n+        return Mono.defer(\n+                // we have to obtain a fresh PAT and retry the update.\n+                () -> client.fetch(PersonalAccessToken.class, patName)\n+                    .filter(pat -> {\n+                        var lastUsed = pat.getSpec().getLastUsed();\n+                        if (lastUsed == null) {\n+                            return true;\n+                        }\n+                        var diff = Duration.between(lastUsed, now);\n+                        return !diff.minus(MIN_UPDATE_GAP).isNegative();\n+                    })\n+                    .doOnNext(pat -> pat.getSpec().setLastUsed(now))\n+                    .flatMap(client::update)\n+            )\n+            .retryWhen(Retry.backoff(3, Duration.ofMillis(50))\n+                .filter(OptimisticLockingFailureException.class::isInstance))\n+            .onErrorComplete()\n+            .then();\n     }\n \n     private Mono<Void> patChecks(PersonalAccessToken pat, String tokenId) {",
    "output": "Update the lastUsed timestamp of PAT at least one minute apart (#4671)\n\n#### What type of PR is this?\r\n\r\n/kind bug\r\n/area core\r\n\r\n#### What this PR does / why we need it:\r\n\r\nAfter PAT mechanism implemented by <https://github.com/halo-dev/halo/pull/4598>, if we use the same PAT to request endpoints concurrently, we may encounter an error like the screenshot below:\r\n\r\n<img width=\"1920\" alt=\"image\" src=\"https://github.com/halo-dev/halo/assets/16865714/30899a0c-ad98-44a1-ae7d-0eda603945f0\">\r\n\r\nThis PR fixes the problem introduced by <https://github.com/halo-dev/halo/pull/4598>.\r\n\r\nWe update the lastUsed timestamp of PAT at least one minute apart and with retry.\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/security/authentication/pat/PatEndpoint.java b/application/src/main/java/run/halo/app/security/authentication/pat/PatEndpoint.java\n--- a/application/src/main/java/run/halo/app/security/authentication/pat/PatEndpoint.java\n+++ b/application/src/main/java/run/halo/app/security/authentication/pat/PatEndpoint.java\n@@ -26,7 +26,7 @@ public PatEndpoint(UserScopedPatHandler patHandler) {\n     @Override\n     public RouterFunction<ServerResponse> endpoint() {\n         var tag = groupVersion().toString() + \"/\" + PersonalAccessToken.KIND;\n-        return route().nest(path(\"/users/-/personalaccesstokens\"),\n+        return route().nest(path(\"/personalaccesstokens\"),\n                 () -> route()\n                     .POST(patHandler::create,\n                         builder -> builder\n\ndiff --git a/application/src/main/java/run/halo/app/security/authentication/pat/impl/UserScopedPatHandlerImpl.java b/application/src/main/java/run/halo/app/security/authentication/pat/impl/UserScopedPatHandlerImpl.java\n--- a/application/src/main/java/run/halo/app/security/authentication/pat/impl/UserScopedPatHandlerImpl.java\n+++ b/application/src/main/java/run/halo/app/security/authentication/pat/impl/UserScopedPatHandlerImpl.java\n@@ -1,6 +1,5 @@\n package run.halo.app.security.authentication.pat.impl;\n \n-import static org.apache.commons.lang3.StringUtils.startsWith;\n import static run.halo.app.extension.Comparators.compareCreationTimestamp;\n import static run.halo.app.security.authentication.pat.PatServerWebExchangeMatcher.PAT_TOKEN_PREFIX;\n \n@@ -12,7 +11,6 @@\n import java.util.List;\n import java.util.Objects;\n import java.util.function.Predicate;\n-import java.util.stream.Collectors;\n import org.springframework.security.core.Authentication;\n import org.springframework.security.core.GrantedAuthority;\n import org.springframework.security.core.context.ReactiveSecurityContextHolder;\n@@ -48,8 +46,6 @@\n @Service\n public class UserScopedPatHandlerImpl implements UserScopedPatHandler {\n \n-    private static final String ROLE_PREFIX = AuthorityUtils.ROLE_PREFIX;\n-\n     private static final String ACCESS_TOKEN_ANNO_NAME = \"security.halo.run/access-token\";\n \n     private static final NotFoundException PAT_NOT_FOUND_EX =\n@@ -257,22 +253,6 @@ private Mono<Boolean> hasSufficientRoles(\n         return roleService.contains(grantedRoles, requestRoles);\n     }\n \n-    private static boolean containsIllegalRoles(\n-        Collection<? extends GrantedAuthority> grantedAuthorities,\n-        List<String> roles) {\n-        if (CollectionUtils.isEmpty(roles)) {\n-            return false;\n-        }\n-        var roleSet = roles.stream()\n-            .map(role -> ROLE_PREFIX + role)\n-            .collect(Collectors.toSet());\n-        var grantedRoleSet = grantedAuthorities.stream()\n-            .map(GrantedAuthority::getAuthority)\n-            .filter(authority -> startsWith(authority, ROLE_PREFIX))\n-            .collect(Collectors.toSet());\n-        return !grantedRoleSet.containsAll(roleSet);\n-    }\n-\n     private Mono<PersonalAccessToken> getPat(String name, String username) {\n         return client.get(PersonalAccessToken.class, name)\n             .filter(pat -> Objects.equals(pat.getSpec().getUsername(), username)\n\ndiff --git a/application/src/test/java/run/halo/app/security/authentication/pat/PatTest.java b/application/src/test/java/run/halo/app/security/authentication/pat/PatTest.java\n--- a/application/src/test/java/run/halo/app/security/authentication/pat/PatTest.java\n+++ b/application/src/test/java/run/halo/app/security/authentication/pat/PatTest.java\n@@ -26,7 +26,7 @@ void generatePat() {\n         spec.setRoles(List.of(\"super-role\"));\n         spec.setName(\"Fake PAT\");\n         webClient.post()\n-            .uri(\"/apis/api.security.halo.run/v1alpha1/users/-/personalaccesstokens\")\n+            .uri(\"/apis/api.security.halo.run/v1alpha1/personalaccesstokens\")\n             .bodyValue(requestPat)\n             .exchange()\n             .expectStatus().isOk()",
    "output": "Remove redundant users path for PAT endpoint (#4662)\n\n#### What type of PR is this?\r\n\r\n/kind improvement\r\n/kind api-change\r\n/area core\r\n\r\n#### What this PR does / why we need it:\r\n\r\nThis PR refines route paths created from <https://github.com/halo-dev/halo/pull/4598>. Because the user scope is not necessary here.\r\n\r\n#### Special notes for your reviewer:\r\n\r\nTry to manage your PATs.\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/theme/router/ViewNameResolver.java b/application/src/main/java/run/halo/app/theme/router/ViewNameResolver.java\n--- a/application/src/main/java/run/halo/app/theme/router/ViewNameResolver.java\n+++ b/application/src/main/java/run/halo/app/theme/router/ViewNameResolver.java\n@@ -1,14 +1,14 @@\n package run.halo.app.theme.router;\n \n-import java.util.Locale;\n+import java.nio.file.Files;\n import lombok.AllArgsConstructor;\n import org.apache.commons.lang3.StringUtils;\n import org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties;\n-import org.springframework.context.i18n.LocaleContextHolder;\n import org.springframework.stereotype.Component;\n+import org.springframework.util.Assert;\n import org.springframework.web.reactive.function.server.ServerRequest;\n import reactor.core.publisher.Mono;\n-import run.halo.app.theme.HaloViewResolver;\n+import run.halo.app.theme.ThemeResolver;\n \n /**\n  * The {@link ViewNameResolver} is used to resolve view name.\n@@ -19,7 +19,8 @@\n @Component\n @AllArgsConstructor\n public class ViewNameResolver {\n-    private final HaloViewResolver haloViewResolver;\n+    private static final String TEMPLATES = \"templates\";\n+    private final ThemeResolver themeResolver;\n     private final ThymeleafProperties thymeleafProperties;\n \n     /**\n@@ -29,20 +30,22 @@ public class ViewNameResolver {\n     public Mono<String> resolveViewNameOrDefault(ServerRequest request, String name,\n         String defaultName) {\n         if (StringUtils.isBlank(name)) {\n-            return Mono.just(defaultName);\n+            return Mono.justOrEmpty(defaultName);\n         }\n-        final String nameToUse = processName(name);\n-        Locale locale = LocaleContextHolder.getLocale(request.exchange().getLocaleContext());\n-        return haloViewResolver.resolveViewName(nameToUse, locale)\n-            .map(view -> nameToUse)\n-            .switchIfEmpty(Mono.just(defaultName));\n+        return themeResolver.getTheme(request.exchange())\n+            .mapNotNull(themeContext -> {\n+                String templateResourceName = computeResourceName(name);\n+                var resourcePath = themeContext.getPath()\n+                    .resolve(TEMPLATES)\n+                    .resolve(templateResourceName);\n+                return Files.exists(resourcePath) ? name : defaultName;\n+            })\n+            .switchIfEmpty(Mono.justOrEmpty(defaultName));\n     }\n \n-    String processName(String name) {\n-        String nameToLookup = name;\n-        if (StringUtils.endsWith(name, thymeleafProperties.getSuffix())) {\n-            nameToLookup = StringUtils.substringBeforeLast(name, thymeleafProperties.getSuffix());\n-        }\n-        return nameToLookup;\n+    String computeResourceName(String name) {\n+        Assert.notNull(name, \"Name must not be null\");\n+        return StringUtils.endsWith(name, thymeleafProperties.getSuffix())\n+            ? name : name + thymeleafProperties.getSuffix();\n     }\n }\n\ndiff --git a/application/src/test/java/run/halo/app/theme/router/ViewNameResolverTest.java b/application/src/test/java/run/halo/app/theme/router/ViewNameResolverTest.java\n--- a/application/src/test/java/run/halo/app/theme/router/ViewNameResolverTest.java\n+++ b/application/src/test/java/run/halo/app/theme/router/ViewNameResolverTest.java\n@@ -1,27 +1,31 @@\n package run.halo.app.theme.router;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.ArgumentMatchers.eq;\n import static org.mockito.Mockito.when;\n \n+import java.io.File;\n+import java.io.IOException;\n import java.net.URI;\n import java.net.URISyntaxException;\n+import java.nio.file.Files;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n import org.mockito.Mockito;\n import org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties;\n import org.springframework.http.HttpMethod;\n import org.springframework.mock.web.reactive.function.server.MockServerRequest;\n import org.springframework.test.context.junit.jupiter.SpringExtension;\n-import org.springframework.web.reactive.result.view.View;\n import org.springframework.web.server.ServerWebExchange;\n import reactor.core.publisher.Mono;\n import reactor.test.StepVerifier;\n-import run.halo.app.theme.HaloViewResolver;\n+import run.halo.app.theme.ThemeContext;\n+import run.halo.app.theme.ThemeResolver;\n \n /**\n  * Tests for {@link ViewNameResolver}.\n@@ -33,25 +37,35 @@\n class ViewNameResolverTest {\n \n     @Mock\n-    private HaloViewResolver haloViewResolver;\n+    private ThemeResolver themeResolver;\n \n     @Mock\n     private ThymeleafProperties thymeleafProperties;\n \n     @InjectMocks\n     private ViewNameResolver viewNameResolver;\n \n+    @TempDir\n+    private File themePath;\n+\n     @BeforeEach\n-    void setUp() {\n+    void setUp() throws IOException {\n         when(thymeleafProperties.getSuffix()).thenReturn(ThymeleafProperties.DEFAULT_SUFFIX);\n \n-        when(haloViewResolver.resolveViewName(eq(\"post_news\"), any()))\n-            .thenReturn(Mono.just(Mockito.mock(View.class)));\n-        when(haloViewResolver.resolveViewName(eq(\"post_docs\"), any()))\n-            .thenReturn(Mono.just(new EmptyView()));\n+        var templatesPath = themePath.toPath().resolve(\"templates\");\n+        if (!Files.exists(templatesPath)) {\n+            Files.createDirectory(templatesPath);\n+        }\n+        Files.createFile(templatesPath.resolve(\"post_news.html\"));\n+        Files.createFile(templatesPath.resolve(\"post_docs.html\"));\n \n-        when(haloViewResolver.resolveViewName(eq(\"post_nothing\"), any()))\n-            .thenReturn(Mono.empty());\n+        when(themeResolver.getTheme(any()))\n+            .thenReturn(Mono.fromSupplier(() -> ThemeContext.builder()\n+                .name(\"fake-theme\")\n+                .path(themePath.toPath())\n+                .active(true)\n+                .build())\n+            );\n     }\n \n     @Test\n@@ -71,7 +85,7 @@ void resolveViewNameOrDefault() throws URISyntaxException {\n         String viewName = \"post_docs\" + thymeleafProperties.getSuffix();\n         viewNameResolver.resolveViewNameOrDefault(request, viewName, \"post\")\n             .as(StepVerifier::create)\n-            .expectNext(\"post_docs\")\n+            .expectNext(viewName)\n             .verifyComplete();\n \n         viewNameResolver.resolveViewNameOrDefault(request, \"post_nothing\", \"post\")\n@@ -82,11 +96,17 @@ void resolveViewNameOrDefault() throws URISyntaxException {\n \n     @Test\n     void processName() {\n-        assertThat(viewNameResolver.processName(\"post_news\")).isEqualTo(\"post_news\");\n-        assertThat(viewNameResolver.processName(\"post_news\" + thymeleafProperties.getSuffix()))\n-            .isEqualTo(\"post_news\");\n-        assertThat(viewNameResolver.processName(\"post_news.test\"))\n-            .isEqualTo(\"post_news.test\");\n-        assertThat(viewNameResolver.processName(null)).isNull();\n+        var suffix = thymeleafProperties.getSuffix();\n+        assertThat(viewNameResolver.computeResourceName(\"post_news\"))\n+            .isEqualTo(\"post_news\" + suffix);\n+        assertThat(\n+            viewNameResolver.computeResourceName(\"post_news\" + suffix))\n+            .isEqualTo(\"post_news\" + suffix);\n+        assertThat(viewNameResolver.computeResourceName(\"post_news.test\"))\n+            .isEqualTo(\"post_news.test\" + suffix);\n+\n+        assertThatThrownBy(() -> viewNameResolver.computeResourceName(null))\n+            .isInstanceOf(IllegalArgumentException.class)\n+            .hasMessage(\"Name must not be null\");\n     }\n-}\n\\ No newline at end of file\n+}",
    "output": "fix: not using the default template when the custom template does not exist (#4618)"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/core/extension/attachment/endpoint/LocalAttachmentUploadHandler.java b/application/src/main/java/run/halo/app/core/extension/attachment/endpoint/LocalAttachmentUploadHandler.java\n--- a/application/src/main/java/run/halo/app/core/extension/attachment/endpoint/LocalAttachmentUploadHandler.java\n+++ b/application/src/main/java/run/halo/app/core/extension/attachment/endpoint/LocalAttachmentUploadHandler.java\n@@ -3,6 +3,7 @@\n import static java.nio.file.StandardOpenOption.CREATE_NEW;\n import static run.halo.app.infra.utils.FileNameUtils.randomFileName;\n import static run.halo.app.infra.utils.FileUtils.checkDirectoryTraversal;\n+import static run.halo.app.infra.utils.FileUtils.deleteFileSilently;\n \n import java.io.IOException;\n import java.net.URI;\n@@ -236,6 +237,9 @@ private Mono<Path> writeContent(Flux<DataBuffer> content,\n                         var fileName = randomFileName(oldPath.toString(), 4);\n                         pathRef.set(oldPath.resolveSibling(fileName));\n                     }))\n+                // Delete file already wrote partially into attachment folder\n+                // in case of content is terminated with an error\n+                .onErrorResume(t -> deleteFileSilently(pathRef.get()).then(Mono.error(t)))\n                 .then(Mono.fromSupplier(pathRef::get));\n         });\n     }\n\ndiff --git a/application/src/main/java/run/halo/app/infra/utils/FileUtils.java b/application/src/main/java/run/halo/app/infra/utils/FileUtils.java\n--- a/application/src/main/java/run/halo/app/infra/utils/FileUtils.java\n+++ b/application/src/main/java/run/halo/app/infra/utils/FileUtils.java\n@@ -26,6 +26,8 @@\n import org.springframework.lang.NonNull;\n import org.springframework.util.AntPathMatcher;\n import org.springframework.util.Assert;\n+import reactor.core.publisher.Mono;\n+import reactor.core.scheduler.Schedulers;\n import run.halo.app.infra.exception.AccessDeniedException;\n \n /**\n@@ -243,6 +245,21 @@ public static void deleteRecursivelyAndSilently(Path root) {\n         }\n     }\n \n+    public static Mono<Boolean> deleteFileSilently(Path file) {\n+        return Mono.fromSupplier(\n+                () -> {\n+                    if (file == null || !Files.isRegularFile(file)) {\n+                        return false;\n+                    }\n+                    try {\n+                        return Files.deleteIfExists(file);\n+                    } catch (IOException ignored) {\n+                        return false;\n+                    }\n+                })\n+            .subscribeOn(Schedulers.boundedElastic());\n+    }\n+\n     public static void copy(Path source, Path dest, CopyOption... options) {\n         try {\n             Files.copy(source, dest, options);\n@@ -277,4 +294,5 @@ public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs)\n             }\n         });\n     }\n+\n }\n\ndiff --git a/application/src/test/java/run/halo/app/infra/utils/FileUtilsTest.java b/application/src/test/java/run/halo/app/infra/utils/FileUtilsTest.java\n--- a/application/src/test/java/run/halo/app/infra/utils/FileUtilsTest.java\n+++ b/application/src/test/java/run/halo/app/infra/utils/FileUtilsTest.java\n@@ -4,7 +4,7 @@\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertThrows;\n import static run.halo.app.infra.utils.FileUtils.checkDirectoryTraversal;\n-import static run.halo.app.infra.utils.FileUtils.deleteRecursivelyAndSilently;\n+import static run.halo.app.infra.utils.FileUtils.deleteFileSilently;\n import static run.halo.app.infra.utils.FileUtils.jar;\n import static run.halo.app.infra.utils.FileUtils.unzip;\n import static run.halo.app.infra.utils.FileUtils.zip;\n@@ -16,14 +16,17 @@\n import java.nio.file.Path;\n import java.nio.file.Paths;\n import java.util.zip.ZipInputStream;\n-import org.junit.jupiter.api.AfterEach;\n-import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Nested;\n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.io.TempDir;\n+import reactor.test.StepVerifier;\n import run.halo.app.infra.exception.AccessDeniedException;\n \n class FileUtilsTest {\n \n+    @TempDir\n+    Path tempDirectory;\n+\n     @Nested\n     class DirectoryTraversalTest {\n \n@@ -49,18 +52,6 @@ void traversalTestWhenFailure() {\n     @Nested\n     class ZipTest {\n \n-        Path tempDirectory;\n-\n-        @BeforeEach\n-        void setUp() throws IOException {\n-            tempDirectory = Files.createTempDirectory(\"halo-test-fileutils-zip-\");\n-        }\n-\n-        @AfterEach\n-        void cleanUp() {\n-            deleteRecursivelyAndSilently(tempDirectory);\n-        }\n-\n         @Test\n         void zipFolderAndUnzip() throws IOException, URISyntaxException {\n             var uri = requireNonNull(getClass().getClassLoader().getResource(\"folder-to-zip\"))\n@@ -104,5 +95,23 @@ void jarFolderIfNoSuchFolder() {\n             assertThrows(NoSuchFileException.class, () ->\n                 jar(Paths.get(\"no-such-folder\"), tempDirectory.resolve(\"example.zip\")));\n         }\n+\n+    }\n+\n+    @Test\n+    void deleteFileSilentlyTest() throws IOException {\n+        StepVerifier.create(deleteFileSilently(null))\n+            .expectNext(false)\n+            .verifyComplete();\n+\n+        StepVerifier.create(deleteFileSilently(tempDirectory))\n+            .expectNext(false)\n+            .verifyComplete();\n+\n+        StepVerifier.create(\n+                deleteFileSilently(Files.createFile(tempDirectory.resolve(\"for-deleting\"))))\n+            .expectNext(true)\n+            .verifyComplete();\n     }\n+\n }\n\\ No newline at end of file",
    "output": "Delete file already wrote partially into attachment folder when content is terminated with an error (#4286)\n\n#### What type of PR is this?\r\n\r\n/kind bug\r\n/area core\r\n/milestone 2.8.x\r\n\r\n#### What this PR does / why we need it:\r\n\r\nIf content is terminated with an error, the file already wrote partially into attachment folder won't be cleaned.\r\n\r\nImagine a scenario where we check that the content size is not larger than 2MB when we write content to the attachments folder. Once the limit is reached, files that have been partially written should be cleaned instead of being kept.\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/cache/CacheEndpoint.java b/application/src/main/java/run/halo/app/cache/CacheEndpoint.java\n--- a/application/src/main/java/run/halo/app/cache/CacheEndpoint.java\n+++ b/application/src/main/java/run/halo/app/cache/CacheEndpoint.java\n@@ -2,14 +2,16 @@\n \n import static io.swagger.v3.oas.annotations.enums.ParameterIn.PATH;\n import static org.springdoc.core.fn.builders.parameter.Builder.parameterBuilder;\n+import static org.springdoc.webflux.core.fn.SpringdocRouteBuilder.route;\n import static org.springframework.http.HttpStatus.NO_CONTENT;\n \n import org.springdoc.core.fn.builders.apiresponse.Builder;\n-import org.springdoc.webflux.core.fn.SpringdocRouteBuilder;\n import org.springframework.cache.CacheManager;\n import org.springframework.stereotype.Component;\n import org.springframework.web.reactive.function.server.RouterFunction;\n+import org.springframework.web.reactive.function.server.ServerRequest;\n import org.springframework.web.reactive.function.server.ServerResponse;\n+import reactor.core.publisher.Mono;\n import run.halo.app.core.extension.endpoint.CustomEndpoint;\n \n @Component\n@@ -23,21 +25,11 @@ public CacheEndpoint(CacheManager cacheManager) {\n \n     @Override\n     public RouterFunction<ServerResponse> endpoint() {\n-        return SpringdocRouteBuilder\n-            .route()\n-            .POST(\"/caches/{name}/invalidation\", request -> {\n-                var cacheName = request.pathVariable(\"name\");\n-                if (cacheManager.getCacheNames().contains(cacheName)) {\n-                    var cache = cacheManager.getCache(cacheName);\n-                    if (cache != null) {\n-                        cache.invalidate();\n-                    }\n-                }\n-                return ServerResponse.noContent().build();\n-            }, builder -> builder\n+        return route()\n+            .DELETE(\"/caches/{name}\", this::evictCache, builder -> builder\n                 .tag(\"v1alpha1/Cache\")\n-                .operationId(\"InvalidCache\")\n-                .description(\"Invalidate a cache.\")\n+                .operationId(\"EvictCache\")\n+                .description(\"Evict a cache.\")\n                 .parameter(parameterBuilder()\n                     .name(\"name\")\n                     .in(PATH)\n@@ -49,4 +41,14 @@ public RouterFunction<ServerResponse> endpoint() {\n             .build();\n     }\n \n+    private Mono<ServerResponse> evictCache(ServerRequest request) {\n+        var cacheName = request.pathVariable(\"name\");\n+        if (cacheManager.getCacheNames().contains(cacheName)) {\n+            var cache = cacheManager.getCache(cacheName);\n+            if (cache != null) {\n+                cache.invalidate();\n+            }\n+        }\n+        return ServerResponse.accepted().build();\n+    }\n }",
    "output": "Add role template for managing cache (#4153)\n\n#### What type of PR is this?\r\n\r\n/kind feature\r\n/area core\r\n/milestone 2.7.x\r\n\r\n#### What this PR does / why we need it:\r\n\r\nAdd role template for managing cache. Anyone with role `role-template-manage-cache` can see the `Refresh Page Cache` button.\r\n\r\n#### Which issue(s) this PR fixes:\r\n\r\nFixes https://github.com/halo-dev/halo/issues/4143\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/cache/PageCacheWebFilter.java b/application/src/main/java/run/halo/app/cache/PageCacheWebFilter.java\n--- a/application/src/main/java/run/halo/app/cache/PageCacheWebFilter.java\n+++ b/application/src/main/java/run/halo/app/cache/PageCacheWebFilter.java\n@@ -30,15 +30,15 @@\n import reactor.core.publisher.Mono;\n \n @Slf4j\n-public class CacheWebFilter implements WebFilter, Ordered {\n+public class PageCacheWebFilter implements WebFilter, Ordered {\n \n     public static final String REQUEST_TO_CACHE = \"RequestCacheWebFilterToCache\";\n \n-    public static final String CACHE_NAME = \"page-cache\";\n+    public static final String CACHE_NAME = \"page\";\n \n     private final Cache cache;\n \n-    public CacheWebFilter(CacheManager cacheManager) {\n+    public PageCacheWebFilter(CacheManager cacheManager) {\n         this.cache = cacheManager.getCache(CACHE_NAME);\n     }\n \n\ndiff --git a/application/src/main/java/run/halo/app/config/CacheConfiguration.java b/application/src/main/java/run/halo/app/config/CacheConfiguration.java\n--- a/application/src/main/java/run/halo/app/config/CacheConfiguration.java\n+++ b/application/src/main/java/run/halo/app/config/CacheConfiguration.java\n@@ -6,15 +6,15 @@\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.web.server.WebFilter;\n-import run.halo.app.cache.CacheWebFilter;\n+import run.halo.app.cache.PageCacheWebFilter;\n \n @EnableCaching\n @Configuration\n public class CacheConfiguration {\n \n     @Bean\n-    @ConditionalOnProperty(name = \"halo.cache.disabled\", havingValue = \"false\")\n-    WebFilter cacheWebFilter(CacheManager cacheManager) {\n-        return new CacheWebFilter(cacheManager);\n+    @ConditionalOnProperty(name = \"halo.cache.page.disabled\", havingValue = \"false\")\n+    WebFilter pageCacheWebFilter(CacheManager cacheManager) {\n+        return new PageCacheWebFilter(cacheManager);\n     }\n }\n\ndiff --git a/application/src/main/java/run/halo/app/infra/properties/CacheProperties.java b/application/src/main/java/run/halo/app/infra/properties/CacheProperties.java\n--- a/application/src/main/java/run/halo/app/infra/properties/CacheProperties.java\n+++ b/application/src/main/java/run/halo/app/infra/properties/CacheProperties.java\n@@ -5,6 +5,6 @@\n @Data\n public class CacheProperties {\n \n-    private boolean disabled = true;\n+    private boolean disabled;\n \n }\n\ndiff --git a/application/src/main/java/run/halo/app/infra/properties/HaloProperties.java b/application/src/main/java/run/halo/app/infra/properties/HaloProperties.java\n--- a/application/src/main/java/run/halo/app/infra/properties/HaloProperties.java\n+++ b/application/src/main/java/run/halo/app/infra/properties/HaloProperties.java\n@@ -5,6 +5,8 @@\n import java.net.URL;\n import java.nio.file.Path;\n import java.util.HashSet;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n import java.util.Set;\n import lombok.Data;\n import org.springframework.boot.context.properties.ConfigurationProperties;\n@@ -59,7 +61,7 @@ public class HaloProperties implements Validator {\n     private final AttachmentProperties attachment = new AttachmentProperties();\n \n     @Valid\n-    private final CacheProperties cache = new CacheProperties();\n+    private final Map<String, CacheProperties> caches = new LinkedHashMap<>();\n \n     @Override\n     public boolean supports(Class<?> clazz) {\n\ndiff --git a/application/src/main/java/run/halo/app/theme/HaloViewResolver.java b/application/src/main/java/run/halo/app/theme/HaloViewResolver.java\n--- a/application/src/main/java/run/halo/app/theme/HaloViewResolver.java\n+++ b/application/src/main/java/run/halo/app/theme/HaloViewResolver.java\n@@ -15,7 +15,7 @@\n import org.thymeleaf.spring6.view.reactive.ThymeleafReactiveViewResolver;\n import reactor.core.publisher.Flux;\n import reactor.core.publisher.Mono;\n-import run.halo.app.cache.CacheWebFilter;\n+import run.halo.app.cache.PageCacheWebFilter;\n import run.halo.app.theme.finders.FinderRegistry;\n \n @Component(\"thymeleafReactiveViewResolver\")\n@@ -53,7 +53,7 @@ public Mono<Void> render(Map<String, ?> model, MediaType contentType,\n             return themeResolver.getTheme(exchange).flatMap(theme -> {\n                 // calculate the engine before rendering\n                 setTemplateEngine(engineManager.getTemplateEngine(theme));\n-                exchange.getAttributes().put(CacheWebFilter.REQUEST_TO_CACHE, true);\n+                exchange.getAttributes().put(PageCacheWebFilter.REQUEST_TO_CACHE, true);\n                 return super.render(model, contentType, exchange);\n             });\n         }",
    "output": "Enable configuration caching with separate names (#4151)\n\n#### What type of PR is this?\r\n\r\n/kind feature\r\n/area core\r\n/milestone 2.7.x\r\n\r\n#### What this PR does / why we need it:\r\n\r\nRefactor configuration properties to configure caching with separate names, so that we can enable / disable cache with name.\r\n\r\n#### Which issue(s) this PR fixes:\r\n\r\nFixes https://github.com/halo-dev/halo/issues/4144\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/infra/utils/IpAddressUtils.java b/application/src/main/java/run/halo/app/infra/utils/IpAddressUtils.java\n--- a/application/src/main/java/run/halo/app/infra/utils/IpAddressUtils.java\n+++ b/application/src/main/java/run/halo/app/infra/utils/IpAddressUtils.java\n@@ -2,6 +2,7 @@\n \n import lombok.extern.slf4j.Slf4j;\n import org.springframework.http.server.reactive.ServerHttpRequest;\n+import org.springframework.util.StringUtils;\n import org.springframework.web.reactive.function.server.ServerRequest;\n \n /**\n@@ -14,6 +15,7 @@ public class IpAddressUtils {\n \n     private static final String[] IP_HEADER_NAMES = {\n         \"X-Forwarded-For\",\n+        \"X-Real-IP\",\n         \"Proxy-Client-IP\",\n         \"WL-Proxy-Client-IP\",\n         \"CF-Connecting-IP\",\n@@ -36,17 +38,18 @@ public class IpAddressUtils {\n     public static String getClientIp(ServerHttpRequest request) {\n         for (String header : IP_HEADER_NAMES) {\n             String ipList = request.getHeaders().getFirst(header);\n-            if (ipList != null && ipList.length() != 0 && !\"unknown\".equalsIgnoreCase(ipList)) {\n+            if (StringUtils.hasText(ipList) && !UNKNOWN.equalsIgnoreCase(ipList)) {\n                 String[] ips = ipList.trim().split(\"[,;]\");\n                 for (String ip : ips) {\n-                    if (ip != null && ip.length() != 0 && !\"unknown\".equalsIgnoreCase(ip)) {\n+                    if (StringUtils.hasText(ip) && !UNKNOWN.equalsIgnoreCase(ip)) {\n                         return ip;\n                     }\n                 }\n             }\n         }\n         var remoteAddress = request.getRemoteAddress();\n-        return remoteAddress == null ? UNKNOWN : remoteAddress.getAddress().getHostAddress();\n+        return remoteAddress == null || remoteAddress.isUnresolved()\n+            ? UNKNOWN : remoteAddress.getAddress().getHostAddress();\n     }\n \n \n\ndiff --git a/application/src/test/java/run/halo/app/infra/utils/IpAddressUtilsTest.java b/application/src/test/java/run/halo/app/infra/utils/IpAddressUtilsTest.java\n--- a/application/src/test/java/run/halo/app/infra/utils/IpAddressUtilsTest.java\n+++ b/application/src/test/java/run/halo/app/infra/utils/IpAddressUtilsTest.java\n@@ -2,6 +2,7 @@\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n \n+import java.net.InetSocketAddress;\n import org.junit.jupiter.api.Test;\n import org.springframework.http.HttpHeaders;\n import org.springframework.mock.http.server.reactive.MockServerHttpRequest;\n@@ -19,12 +20,31 @@ void testGetIPAddressFromCloudflareProxy() {\n     }\n \n     @Test\n-    void testGetUnknownIPAddress() {\n+    void testGetIPAddressFromXRealIpHeader() {\n+        var request = MockServerHttpRequest.get(\"/\")\n+            .header(\"X-Real-IP\", \"127.0.0.1\")\n+            .build();\n+        var expected = \"127.0.0.1\";\n+        var actual = IpAddressUtils.getClientIp(request);\n+        assertEquals(expected, actual);\n+    }\n+\n+    @Test\n+    void testGetUnknownIPAddressWhenRemoteAddressIsNull() {\n         var request = MockServerHttpRequest.get(\"/\").build();\n         var actual = IpAddressUtils.getClientIp(request);\n         assertEquals(IpAddressUtils.UNKNOWN, actual);\n     }\n \n+    @Test\n+    void testGetUnknownIPAddressWhenRemoteAddressIsUnresolved() {\n+        var request = MockServerHttpRequest.get(\"/\")\n+            .remoteAddress(InetSocketAddress.createUnresolved(\"localhost\", 8090))\n+            .build();\n+        var actual = IpAddressUtils.getClientIp(request);\n+        assertEquals(IpAddressUtils.UNKNOWN, actual);\n+    }\n+\n     @Test\n     void testGetIPAddressWithMultipleHeaders() {\n         var headers = new HttpHeaders();",
    "output": "Check X-Real-IP header when obtaining client IP (#4139)\n\n#### What type of PR is this?\r\n\r\n/kind bug\r\n/area core\r\n/milestone 2.7.x\r\n\r\n#### What this PR does / why we need it:\r\n\r\nIn some special situations, Halo can not obtain client IP address from request headers and socket address is unresolved, so that `java.lang.NullPointerException: Cannot invoke \"java.net.InetAddress.getHostAddress()\" because the return value of \"java.net.InetSocketAddress.getAddress()\" is null` will happen.\r\n\r\nThis PR will resolve the problem by checking `X-Real-IP` header and checking if remote address is unresolved.\r\n\r\n#### Which issue(s) this PR fixes:\r\n\r\nFixes https://github.com/halo-dev/halo/issues/4134\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/infra/exception/RateLimitExceededException.java b/application/src/main/java/run/halo/app/infra/exception/RateLimitExceededException.java\n--- a/application/src/main/java/run/halo/app/infra/exception/RateLimitExceededException.java\n+++ b/application/src/main/java/run/halo/app/infra/exception/RateLimitExceededException.java\n@@ -0,0 +1,15 @@\n+package run.halo.app.infra.exception;\n+\n+import java.net.URI;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.lang.Nullable;\n+import org.springframework.web.server.ResponseStatusException;\n+\n+public class RateLimitExceededException extends ResponseStatusException {\n+\n+    public RateLimitExceededException(@Nullable Throwable cause) {\n+        super(HttpStatus.TOO_MANY_REQUESTS, \"You have exceeded your quota\", cause);\n+        setType(URI.create(Exceptions.REQUEST_NOT_PERMITTED_TYPE));\n+    }\n+\n+}\n\ndiff --git a/application/src/main/java/run/halo/app/security/authentication/login/UsernamePasswordAuthenticator.java b/application/src/main/java/run/halo/app/security/authentication/login/UsernamePasswordAuthenticator.java\n--- a/application/src/main/java/run/halo/app/security/authentication/login/UsernamePasswordAuthenticator.java\n+++ b/application/src/main/java/run/halo/app/security/authentication/login/UsernamePasswordAuthenticator.java\n@@ -1,6 +1,5 @@\n package run.halo.app.security.authentication.login;\n \n-import static org.springframework.http.HttpStatus.TOO_MANY_REQUESTS;\n import static org.springframework.http.HttpStatus.UNAUTHORIZED;\n import static org.springframework.http.MediaType.APPLICATION_JSON;\n import static run.halo.app.infra.exception.Exceptions.createErrorResponse;\n@@ -39,6 +38,7 @@\n import org.springframework.web.server.ServerWebExchange;\n import org.springframework.web.server.WebFilterChain;\n import reactor.core.publisher.Mono;\n+import run.halo.app.infra.exception.RateLimitExceededException;\n import run.halo.app.infra.utils.IpAddressUtils;\n import run.halo.app.security.AdditionalWebFilter;\n \n@@ -136,9 +136,9 @@ private <T> RateLimiterOperator<T> createIPBasedRateLimiter(ServerWebExchange ex\n         return RateLimiterOperator.of(rateLimiter);\n     }\n \n-    private Mono<Void> handleRequestNotPermitted(RequestNotPermitted e,\n+    private Mono<Void> handleRateLimitExceededException(RateLimitExceededException e,\n         ServerWebExchange exchange) {\n-        var errorResponse = createErrorResponse(e, TOO_MANY_REQUESTS, exchange, messageSource);\n+        var errorResponse = createErrorResponse(e, null, exchange, messageSource);\n         return writeErrorResponse(errorResponse, exchange);\n     }\n \n@@ -168,8 +168,9 @@ protected Mono<Void> onAuthenticationSuccess(Authentication authentication,\n             WebFilterExchange webFilterExchange) {\n             return super.onAuthenticationSuccess(authentication, webFilterExchange)\n                 .transformDeferred(createIPBasedRateLimiter(webFilterExchange.getExchange()))\n-                .onErrorResume(RequestNotPermitted.class,\n-                    e -> handleRequestNotPermitted(e, webFilterExchange.getExchange()));\n+                .onErrorMap(RequestNotPermitted.class, RateLimitExceededException::new)\n+                .onErrorResume(RateLimitExceededException.class,\n+                    e -> handleRateLimitExceededException(e, webFilterExchange.getExchange()));\n         }\n     }\n \n@@ -230,8 +231,9 @@ public Mono<Void> onAuthenticationFailure(WebFilterExchange webFilterExchange,\n                 )\n                 .flatMap(matchResult -> handleAuthenticationException(exception, exchange))\n                 .transformDeferred(createIPBasedRateLimiter(exchange))\n-                .onErrorResume(RequestNotPermitted.class,\n-                    e -> handleRequestNotPermitted(e, exchange));\n+                .onErrorMap(RequestNotPermitted.class, RateLimitExceededException::new)\n+                .onErrorResume(RateLimitExceededException.class,\n+                    e -> handleRateLimitExceededException(e, exchange));\n         }\n \n     }\n\ndiff --git a/application/src/main/java/run/halo/app/theme/endpoint/CommentFinderEndpoint.java b/application/src/main/java/run/halo/app/theme/endpoint/CommentFinderEndpoint.java\n--- a/application/src/main/java/run/halo/app/theme/endpoint/CommentFinderEndpoint.java\n+++ b/application/src/main/java/run/halo/app/theme/endpoint/CommentFinderEndpoint.java\n@@ -11,6 +11,7 @@\n \n import com.fasterxml.jackson.annotation.JsonIgnore;\n import io.github.resilience4j.ratelimiter.RateLimiterRegistry;\n+import io.github.resilience4j.ratelimiter.RequestNotPermitted;\n import io.github.resilience4j.reactor.ratelimiter.operator.RateLimiterOperator;\n import io.swagger.v3.oas.annotations.enums.ParameterIn;\n import io.swagger.v3.oas.annotations.media.ArraySchema;\n@@ -50,6 +51,7 @@\n import run.halo.app.extension.router.QueryParamBuildUtil;\n import run.halo.app.infra.SystemConfigurableEnvironmentFetcher;\n import run.halo.app.infra.exception.AccessDeniedException;\n+import run.halo.app.infra.exception.RateLimitExceededException;\n import run.halo.app.infra.utils.HaloUtils;\n import run.halo.app.infra.utils.IpAddressUtils;\n import run.halo.app.theme.finders.CommentFinder;\n@@ -157,8 +159,9 @@ Mono<ServerResponse> createComment(ServerRequest request) {\n                 comment.getSpec().setUserAgent(HaloUtils.userAgentFrom(request));\n                 return commentService.create(comment);\n             })\n+            .flatMap(comment -> ServerResponse.ok().bodyValue(comment))\n             .transformDeferred(createIpBasedRateLimiter(request))\n-            .flatMap(comment -> ServerResponse.ok().bodyValue(comment));\n+            .onErrorMap(RequestNotPermitted.class, RateLimitExceededException::new);\n     }\n \n     private <T> RateLimiterOperator<T> createIpBasedRateLimiter(ServerRequest request) {",
    "output": "Remap RequestNotPermittedException with RateLimitExceededException (#4119)"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/security/authentication/login/UsernamePasswordAuthenticator.java b/application/src/main/java/run/halo/app/security/authentication/login/UsernamePasswordAuthenticator.java\n--- a/application/src/main/java/run/halo/app/security/authentication/login/UsernamePasswordAuthenticator.java\n+++ b/application/src/main/java/run/halo/app/security/authentication/login/UsernamePasswordAuthenticator.java\n@@ -91,7 +91,8 @@ public UsernamePasswordAuthenticator(ServerResponse.Context context,\n         this.rateLimiterRegistry = rateLimiterRegistry;\n         this.messageSource = messageSource;\n \n-        this.authenticationWebFilter = new AuthenticationWebFilter(authenticationManager());\n+        this.authenticationWebFilter =\n+            new UsernamePasswordAuthenticationWebFilter(authenticationManager());\n         configureAuthenticationWebFilter(this.authenticationWebFilter);\n     }\n \n@@ -179,6 +180,23 @@ private Locale getLocale(ServerWebExchange exchange) {\n         return locale == null ? Locale.getDefault() : locale;\n     }\n \n+    private class UsernamePasswordAuthenticationWebFilter extends AuthenticationWebFilter {\n+\n+        public UsernamePasswordAuthenticationWebFilter(\n+            ReactiveAuthenticationManager authenticationManager) {\n+            super(authenticationManager);\n+        }\n+\n+        @Override\n+        protected Mono<Void> onAuthenticationSuccess(Authentication authentication,\n+            WebFilterExchange webFilterExchange) {\n+            return super.onAuthenticationSuccess(authentication, webFilterExchange)\n+                .transformDeferred(createIPBasedRateLimiter(webFilterExchange.getExchange()))\n+                .onErrorResume(RequestNotPermitted.class,\n+                    e -> handleRequestNotPermitted(e, webFilterExchange.getExchange()));\n+        }\n+    }\n+\n     public class LoginSuccessHandler implements ServerAuthenticationSuccessHandler {\n \n         private final ServerAuthenticationSuccessHandler defaultHandler =\n@@ -206,10 +224,7 @@ public Mono<Void> onAuthenticationSuccess(WebFilterExchange webFilterExchange,\n                         .bodyValue(principal)\n                         .flatMap(serverResponse ->\n                             serverResponse.writeTo(exchange, context));\n-                })\n-                .transformDeferred(createIPBasedRateLimiter(exchange))\n-                .onErrorResume(RequestNotPermitted.class,\n-                    e -> handleRequestNotPermitted(e, exchange));\n+                });\n         }\n     }\n ",
    "output": "Fix the problem of logging in successfully even if request not permitted (#4101)\n\n#### What type of PR is this?\r\n\r\n/kind bug\r\n/area core\r\n\r\n#### What this PR does / why we need it:\r\n\r\nThis is a bug introduced from https://github.com/halo-dev/halo/pull/4062. I have overridden onAuthenticationSuccess to create rate limiter in advance instead of invoking `securityContextRepository#save` before.\r\n\r\nSee https://github.com/halo-dev/halo/pull/4099#issuecomment-1598074131 for more.\r\n\r\n#### Special notes for your reviewer:\r\n\r\n1. Try to log in with incorrect password three times\r\n2. Log in with correct password and check if the response headers contain `Set-Cookie`\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/search/post/LucenePostSearchService.java b/application/src/main/java/run/halo/app/search/post/LucenePostSearchService.java\n--- a/application/src/main/java/run/halo/app/search/post/LucenePostSearchService.java\n+++ b/application/src/main/java/run/halo/app/search/post/LucenePostSearchService.java\n@@ -3,7 +3,6 @@\n import static org.apache.commons.lang3.StringUtils.stripToEmpty;\n import static org.apache.lucene.document.Field.Store.NO;\n import static org.apache.lucene.document.Field.Store.YES;\n-import static org.apache.lucene.index.IndexWriterConfig.OpenMode.APPEND;\n import static org.apache.lucene.index.IndexWriterConfig.OpenMode.CREATE_OR_APPEND;\n \n import java.io.IOException;\n@@ -116,7 +115,7 @@ public void addDocuments(List<PostDoc> posts) throws IOException {\n     @Override\n     public void removeDocuments(Set<String> postNames) throws IOException {\n         var writeConfig = new IndexWriterConfig(analyzer);\n-        writeConfig.setOpenMode(APPEND);\n+        writeConfig.setOpenMode(CREATE_OR_APPEND);\n         try (var writer = new IndexWriter(postIndexDir, writeConfig)) {\n             var terms = postNames.stream()\n                 .map(postName -> new Term(PostDoc.ID_FIELD, postName))\n@@ -129,7 +128,7 @@ public void removeDocuments(Set<String> postNames) throws IOException {\n     @Override\n     public void removeAllDocuments() throws Exception {\n         var writeConfig = new IndexWriterConfig(analyzer);\n-        writeConfig.setOpenMode(APPEND);\n+        writeConfig.setOpenMode(CREATE_OR_APPEND);\n         try (var writer = new IndexWriter(postIndexDir, writeConfig)) {\n             writer.deleteAll();\n         }",
    "output": "Set open mode of indices to CREATE_OR_APPEND (#4020)\n\n#### What type of PR is this?\r\n\r\n/kind bug\r\n/area core\r\n/milestone 2.6.x\r\n\r\n#### What this PR does / why we need it:\r\n\r\nOn first start, we will receive an exception about post indices, please see the logs below:\r\n\r\n```java\r\n2023-06-01T10:49:57.191+08:00  INFO 7 --- [         task-1] run.halo.app.search.IndicesInitializer   : Initialize post indices...\r\n2023-06-01T10:49:57.352+08:00 ERROR 7 --- [-controller-t-1] reactor.core.publisher.Operators         : Operator called default onErrorDropped\r\n\r\nreactor.core.Exceptions$ErrorCallbackNotImplemented: org.apache.lucene.index.IndexNotFoundException: no segments* file found in LockValidatingDirectoryWrapper(MMapDirectory@/root/.halo2/indices/posts lockFactory=org.apache.lucene.store.NativeFSLockFactory@3de15f4f): files: [write.lock]\r\nCaused by: org.apache.lucene.index.IndexNotFoundException: no segments* file found in LockValidatingDirectoryWrapper(MMapDirectory@/root/.halo2/indices/posts lockFactory=org.apache.lucene.store.NativeFSLockFactory@3de15f4f): files: [write.lock]\r\n\tat org.apache.lucene.index.IndexWriter.<init>(IndexWriter.java:1075) ~[lucene-core-9.5.0.jar:9.5.0 13803aa6ea7fee91f798cfeded4296182ac43a21 - 2023-01-25 16:44:59]\r\n\tat run.halo.app.search.post.LucenePostSearchService.removeAllDocuments(LucenePostSearchService.java:133) ~[classes/:2.6.0-SNAPSHOT]\r\n\tat run.halo.app.search.IndicesServiceImpl.lambda$rebuildPostIndices$0(IndicesServiceImpl.java:31) ~[classes/:2.6.0-SNAPSHOT]\r\n\tat reactor.core.publisher.MonoRunnable.call(MonoRunnable.java:73) ~[reactor-core-3.5.6.jar:3.5.6]\r\n\tat reactor.core.publisher.MonoRunnable.call(MonoRunnable.java:32) ~[reactor-core-3.5.6.jar:3.5.6]\r\n```\r\n\r\nThe problem is caused by <https://github.com/halo-dev/halo/pull/3877>.\r\n\r\nThis PR sets open mode of indices to `CREATE_OR_APPEND`, which should resolve the problem.\r\n\r\n#### Special notes for your reviewer:\r\n\r\n1. Try to delete indices folder, such as `~/halo2-dev/indices`\r\n2. Start Halo and check the log\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/config/WebFluxConfig.java b/application/src/main/java/run/halo/app/config/WebFluxConfig.java\n--- a/application/src/main/java/run/halo/app/config/WebFluxConfig.java\n+++ b/application/src/main/java/run/halo/app/config/WebFluxConfig.java\n@@ -1,12 +1,13 @@\n package run.halo.app.config;\n \n import static org.springframework.util.ResourceUtils.FILE_URL_PREFIX;\n-import static org.springframework.web.reactive.function.server.RequestPredicates.GET;\n+import static org.springframework.web.reactive.function.server.RequestPredicates.accept;\n+import static org.springframework.web.reactive.function.server.RequestPredicates.method;\n+import static org.springframework.web.reactive.function.server.RequestPredicates.path;\n import static org.springframework.web.reactive.function.server.RouterFunctions.route;\n import static run.halo.app.infra.utils.FileUtils.checkDirectoryTraversal;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n-import java.net.URI;\n import java.util.List;\n import java.util.Objects;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n@@ -15,6 +16,8 @@\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.http.CacheControl;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.MediaType;\n import org.springframework.http.codec.CodecConfigurer;\n import org.springframework.http.codec.HttpMessageWriter;\n import org.springframework.http.codec.ServerCodecConfigurer;\n@@ -96,13 +99,10 @@ RouterFunction<ServerResponse> customEndpoints(ApplicationContext context) {\n \n     @Bean\n     RouterFunction<ServerResponse> consoleIndexRedirection() {\n-        return route(GET(\"/console\")\n-                .or(GET(\"/console/index\"))\n-                .or(GET(\"/console/index.html\")),\n-            this::redirectConsole)\n-            .and(route(GET(\"/console/\"),\n-                this::serveConsoleIndex\n-            ));\n+        var consolePredicate = method(HttpMethod.GET)\n+            .and(path(\"/console/**\").and(path(\"/console/assets/**\").negate()))\n+            .and(accept(MediaType.TEXT_HTML));\n+        return route(consolePredicate, this::serveConsoleIndex);\n     }\n \n     private Mono<ServerResponse> serveConsoleIndex(ServerRequest request) {\n@@ -117,10 +117,6 @@ private Mono<ServerResponse> serveConsoleIndex(ServerRequest request) {\n         }\n     }\n \n-    private Mono<ServerResponse> redirectConsole(ServerRequest request) {\n-        return ServerResponse.permanentRedirect(URI.create(\"/console/\")).build();\n-    }\n-\n     @Override\n     public void addResourceHandlers(ResourceHandlerRegistry registry) {\n         var attachmentsRoot = haloProp.getWorkDir().resolve(\"attachments\");\n@@ -135,9 +131,9 @@ public void addResourceHandlers(ResourceHandlerRegistry registry) {\n             .setUseLastModified(useLastModified)\n             .setCacheControl(cacheControl);\n \n-        // For console project\n-        registry.addResourceHandler(\"/console/**\")\n-            .addResourceLocations(haloProp.getConsole().getLocation())\n+        // For console assets\n+        registry.addResourceHandler(\"/console/assets/**\")\n+            .addResourceLocations(haloProp.getConsole().getLocation() + \"assets/\")\n             .setCacheControl(cacheControl)\n             .setUseLastModified(useLastModified)\n             .resourceChain(true)\n\ndiff --git a/application/src/test/java/run/halo/app/config/WebFluxConfigTest.java b/application/src/test/java/run/halo/app/config/WebFluxConfigTest.java\n--- a/application/src/test/java/run/halo/app/config/WebFluxConfigTest.java\n+++ b/application/src/test/java/run/halo/app/config/WebFluxConfigTest.java\n@@ -19,22 +19,33 @@ class WebFluxConfigTest {\n     class ConsoleRequest {\n \n         @Test\n-        void shouldRedirect() {\n-            List.of(\"/console\", \"/console/index\", \"/console/index.html\")\n-                .forEach(index -> {\n-                    webClient.get().uri(index)\n-                        .exchange()\n-                        .expectStatus().isPermanentRedirect()\n-                        .expectHeader().location(\"/console/\");\n-                });\n+        void shouldRequestConsoleIndex() {\n+            List.of(\n+                    \"/console\",\n+                    \"/console/index\",\n+                    \"/console/index.html\",\n+                    \"/console/dashboard\",\n+                    \"/console/fake\"\n+                )\n+                .forEach(uri -> webClient.get().uri(uri)\n+                    .exchange()\n+                    .expectStatus().isOk()\n+                    .expectBody(String.class).isEqualTo(\"console index\\n\"));\n         }\n \n         @Test\n-        void shouldRequestConsoleIndex() {\n-            webClient.get().uri(\"/console/\")\n+        void shouldRequestConsoleAssetsCorrectly() {\n+            webClient.get().uri(\"/console/assets/fake.txt\")\n                 .exchange()\n                 .expectStatus().isOk()\n-                .expectBody(String.class).isEqualTo(\"console index\\n\");\n+                .expectBody(String.class).isEqualTo(\"fake.\\n\");\n+        }\n+\n+        @Test\n+        void shouldResponseNotFoundWhenAssetsNotExist() {\n+            webClient.get().uri(\"/console/assets/not-found.txt\")\n+                .exchange()\n+                .expectStatus().isNotFound();\n         }\n     }\n ",
    "output": "Adapt HTML5 history mode of console in non-proxy mode (#4018)\n\n#### What type of PR is this?\r\n\r\n/kind bug\r\n/area core\r\n\r\n#### What this PR does / why we need it:\r\n\r\nThis PR adapts HTML5 history mode of console in non-proxy mode. In PR <https://github.com/halo-dev/halo/pull/4005>, history mode of console has changed from hash mode into HTML5 mode, so that we cannot access console project when refreshing pages.\r\n\r\n#### Special notes for your reviewer:\r\n\r\n1. Build console project by executing command `make -C console build`\r\n1. Change value of property `halo.console.proxy.enabled` into `false`.\r\n2. Start Halo and check console pages.\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/api/src/main/java/run/halo/app/extension/router/QueryParamBuildUtil.java b/api/src/main/java/run/halo/app/extension/router/QueryParamBuildUtil.java\n--- a/api/src/main/java/run/halo/app/extension/router/QueryParamBuildUtil.java\n+++ b/api/src/main/java/run/halo/app/extension/router/QueryParamBuildUtil.java\n@@ -40,29 +40,33 @@ public static void buildParametersFromType(Builder operationBuilder, Type queryP\n         var properties = (Map<String, Schema>) resolvedSchema.schema.getProperties();\n         var requiredNames = defaultIfNull(resolvedSchema.schema.getRequired(),\n             Collections.emptyList());\n-        properties.forEach((propName, propSchema) -> {\n-            final var paramBuilder = parameterBuilder().in(ParameterIn.QUERY);\n-            paramBuilder.name(propSchema.getName())\n-                .description(propSchema.getDescription())\n-                .style(ParameterStyle.FORM)\n-                .explode(Explode.TRUE);\n-            if (requiredNames.contains(propSchema.getName())) {\n-                paramBuilder.required(true);\n-            }\n+        properties.keySet()\n+            .stream()\n+            .sorted()\n+            .forEach(propName -> {\n+                var propSchema = properties.get(propName);\n+                final var paramBuilder = parameterBuilder().in(ParameterIn.QUERY);\n+                paramBuilder.name(propSchema.getName())\n+                    .description(propSchema.getDescription())\n+                    .style(ParameterStyle.FORM)\n+                    .explode(Explode.TRUE);\n+                if (requiredNames.contains(propSchema.getName())) {\n+                    paramBuilder.required(true);\n+                }\n \n-            if (propSchema instanceof ArraySchema arraySchema) {\n-                paramBuilder.array(arraySchemaBuilder()\n-                    .uniqueItems(defaultIfNull(arraySchema.getUniqueItems(), false))\n-                    .minItems(defaultIfNull(arraySchema.getMinItems(), 0))\n-                    .maxItems(defaultIfNull(arraySchema.getMaxItems(), Integer.MAX_VALUE))\n-                    .arraySchema(convertSchemaBuilder(arraySchema))\n-                    .schema(convertSchemaBuilder(arraySchema.getItems()))\n-                );\n-            } else {\n-                paramBuilder.schema(convertSchemaBuilder(propSchema));\n-            }\n-            operationBuilder.parameter(paramBuilder);\n-        });\n+                if (propSchema instanceof ArraySchema arraySchema) {\n+                    paramBuilder.array(arraySchemaBuilder()\n+                        .uniqueItems(defaultIfNull(arraySchema.getUniqueItems(), false))\n+                        .minItems(defaultIfNull(arraySchema.getMinItems(), 0))\n+                        .maxItems(defaultIfNull(arraySchema.getMaxItems(), Integer.MAX_VALUE))\n+                        .arraySchema(convertSchemaBuilder(arraySchema))\n+                        .schema(convertSchemaBuilder(arraySchema.getItems()))\n+                    );\n+                } else {\n+                    paramBuilder.schema(convertSchemaBuilder(propSchema));\n+                }\n+                operationBuilder.parameter(paramBuilder);\n+            });\n     }\n \n     private static org.springdoc.core.fn.builders.schema.Builder convertSchemaBuilder(",
    "output": "Fix the problem of inconsistent OpenAPI generation (#3954)\n\n#### What type of PR is this?\r\n\r\n/kind bug\r\n/area core\r\n/milestone 2.6.x\r\n\r\n#### What this PR does / why we need it:\r\n\r\nSort properties before building.\r\n\r\n#### Which issue(s) this PR fixes:\r\n\r\nFixes https://github.com/halo-dev/halo/issues/3944\r\n\r\n#### Special notes for your reviewer:\r\n\r\nTry to generate api client several times.\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/api/src/main/java/run/halo/app/extension/ListResult.java b/api/src/main/java/run/halo/app/extension/ListResult.java\n--- a/api/src/main/java/run/halo/app/extension/ListResult.java\n+++ b/api/src/main/java/run/halo/app/extension/ListResult.java\n@@ -9,8 +9,6 @@\n import java.util.function.Supplier;\n import java.util.stream.Stream;\n import lombok.Data;\n-import net.bytebuddy.ByteBuddy;\n-import net.bytebuddy.description.type.TypeDescription;\n import org.springframework.util.Assert;\n import run.halo.app.infra.utils.GenericClassUtils;\n \n@@ -96,15 +94,12 @@ public long getTotalPages() {\n      * @return generic ListResult class.\n      */\n     public static Class<?> generateGenericClass(Scheme scheme) {\n-        var generic =\n-            TypeDescription.Generic.Builder.parameterizedType(ListResult.class, scheme.type())\n-                .build();\n-        return new ByteBuddy()\n-            .subclass(generic)\n-            .name(scheme.groupVersionKind().kind() + \"List\")\n-            .make()\n-            .load(ListResult.class.getClassLoader())\n-            .getLoaded();\n+        return GenericClassUtils.generateConcreteClass(ListResult.class,\n+            scheme.type(),\n+            () -> {\n+                var pkgName = scheme.type().getPackageName();\n+                return pkgName + '.' + scheme.groupVersionKind().kind() + \"List\";\n+            });\n     }\n \n     /**\n@@ -116,7 +111,7 @@ public static Class<?> generateGenericClass(Scheme scheme) {\n      */\n     public static <T> Class<?> generateGenericClass(Class<T> type) {\n         return GenericClassUtils.generateConcreteClass(ListResult.class, type,\n-            () -> type.getSimpleName() + \"List\");\n+            () -> type.getName() + \"List\");\n     }\n \n     public static <T> ListResult<T> emptyResult() {\n\ndiff --git a/api/src/main/java/run/halo/app/infra/utils/GenericClassUtils.java b/api/src/main/java/run/halo/app/infra/utils/GenericClassUtils.java\n--- a/api/src/main/java/run/halo/app/infra/utils/GenericClassUtils.java\n+++ b/api/src/main/java/run/halo/app/infra/utils/GenericClassUtils.java\n@@ -19,7 +19,7 @@ public enum GenericClassUtils {\n      */\n     public static <T> Class<?> generateConcreteClass(Class<?> rawClass, Class<T> parameterType) {\n         return generateConcreteClass(rawClass, parameterType, () ->\n-            parameterType.getSimpleName() + rawClass.getSimpleName());\n+            parameterType.getName() + rawClass.getSimpleName());\n     }\n \n     /**\n@@ -39,7 +39,7 @@ public static <T> Class<?> generateConcreteClass(Class<?> rawClass, Class<T> par\n             .subclass(concreteType)\n             .name(nameGenerator.get())\n             .make()) {\n-            return unloaded.load(rawClass.getClassLoader()).getLoaded();\n+            return unloaded.load(parameterType.getClassLoader()).getLoaded();\n         } catch (IOException e) {\n             // Should never happen\n             throw Exceptions.propagate(e);\n\ndiff --git a/api/src/test/java/run/halo/app/infra/utils/GenericClassUtilsTest.java b/api/src/test/java/run/halo/app/infra/utils/GenericClassUtilsTest.java\n--- a/api/src/test/java/run/halo/app/infra/utils/GenericClassUtilsTest.java\n+++ b/api/src/test/java/run/halo/app/infra/utils/GenericClassUtilsTest.java\n@@ -0,0 +1,19 @@\n+package run.halo.app.infra.utils;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import org.junit.jupiter.api.Test;\n+import run.halo.app.core.extension.content.Post;\n+import run.halo.app.extension.ListResult;\n+\n+class GenericClassUtilsTest {\n+\n+    @Test\n+    void generateConcreteClass() {\n+        var clazz = GenericClassUtils.generateConcreteClass(ListResult.class, Post.class,\n+            () -> Post.class.getName() + \"List\");\n+        assertEquals(\"run.halo.app.core.extension.content.PostList\", clazz.getName());\n+        assertEquals(\"run.halo.app.core.extension.content\", clazz.getPackageName());\n+    }\n+\n+}\n\\ No newline at end of file",
    "output": "Fix the problem that generateing OpenAPI defined in Plugin may not work (#3729)\n\n#### What type of PR is this?\r\n\r\n/kind bug\r\n/area core\r\n\r\n#### What this PR does / why we need it:\r\n\r\n- Use the class loader belonging to the parameter type when creating a generic class.\r\n- Use full qualified class name when generating a generic class.\r\n\r\nBefore testing, you have to set property `springdoc.cache.disabled` to `true`.\r\n\r\n#### Which issue(s) this PR fixes:\r\n\r\nFixes #3728 \r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/config/HaloConfiguration.java b/application/src/main/java/run/halo/app/config/HaloConfiguration.java\n--- a/application/src/main/java/run/halo/app/config/HaloConfiguration.java\n+++ b/application/src/main/java/run/halo/app/config/HaloConfiguration.java\n@@ -1,6 +1,7 @@\n package run.halo.app.config;\n \n import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.databind.MapperFeature;\n import org.springframework.boot.autoconfigure.jackson.Jackson2ObjectMapperBuilderCustomizer;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n@@ -14,6 +15,7 @@ public class HaloConfiguration {\n     Jackson2ObjectMapperBuilderCustomizer objectMapperCustomizer() {\n         return builder -> {\n             builder.serializationInclusion(JsonInclude.Include.NON_NULL);\n+            builder.featuresToEnable(MapperFeature.ACCEPT_CASE_INSENSITIVE_ENUMS);\n         };\n     }\n }\n\\ No newline at end of file",
    "output": "Enable mapper feature: accept case-insensitive enums (#3707)\n\n#### What type of PR is this?\r\n\r\n/kind improvement\r\n/area core\r\n\r\n#### What this PR does / why we need it:\r\n\r\nAfter enabling this mapper feature, we could pass a enum value with any case in request body(JSON format).\r\n\r\nSee https://github.com/FasterXML/jackson-databind/blob/39fdb63607a0e7a6dbf9d6be84fe7e380e661dcb/src/test/java/com/fasterxml/jackson/databind/deser/enums/EnumDeserializationTest.java#L22 for more.\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/core/extension/endpoint/CustomEndpointsBuilder.java b/application/src/main/java/run/halo/app/core/extension/endpoint/CustomEndpointsBuilder.java\n--- a/application/src/main/java/run/halo/app/core/extension/endpoint/CustomEndpointsBuilder.java\n+++ b/application/src/main/java/run/halo/app/core/extension/endpoint/CustomEndpointsBuilder.java\n@@ -8,6 +8,7 @@\n import org.springframework.web.reactive.function.server.RequestPredicates;\n import org.springframework.web.reactive.function.server.RouterFunction;\n import org.springframework.web.reactive.function.server.ServerResponse;\n+import reactor.core.publisher.Mono;\n import run.halo.app.extension.GroupVersion;\n \n public class CustomEndpointsBuilder {\n@@ -35,6 +36,10 @@ public RouterFunction<ServerResponse> build() {\n                     .tag(gv + \"/CustomEndpoint\")\n             );\n         });\n+        if (routerFunctionsMap.isEmpty()) {\n+            // return empty route.\n+            return request -> Mono.empty();\n+        }\n         routerFunctionsMap.clear();\n         return routeBuilder.build();\n     }\n\ndiff --git a/application/src/main/java/run/halo/app/plugin/PluginCompositeRouterFunction.java b/application/src/main/java/run/halo/app/plugin/PluginCompositeRouterFunction.java\n--- a/application/src/main/java/run/halo/app/plugin/PluginCompositeRouterFunction.java\n+++ b/application/src/main/java/run/halo/app/plugin/PluginCompositeRouterFunction.java\n@@ -1,7 +1,9 @@\n package run.halo.app.plugin;\n \n+import static run.halo.app.plugin.ExtensionContextRegistry.getInstance;\n+\n+import java.util.ArrayList;\n import java.util.List;\n-import java.util.stream.Stream;\n import org.springframework.lang.NonNull;\n import org.springframework.stereotype.Component;\n import org.springframework.web.reactive.function.server.HandlerFunction;\n@@ -11,6 +13,8 @@\n import org.springframework.web.reactive.function.server.ServerResponse;\n import reactor.core.publisher.Flux;\n import reactor.core.publisher.Mono;\n+import run.halo.app.core.extension.endpoint.CustomEndpoint;\n+import run.halo.app.core.extension.endpoint.CustomEndpointsBuilder;\n import run.halo.app.plugin.resources.ReverseProxyRouterFunctionRegistry;\n \n /**\n@@ -44,15 +48,27 @@ public void accept(@NonNull RouterFunctions.Visitor visitor) {\n \n     @SuppressWarnings(\"unchecked\")\n     private List<RouterFunction<ServerResponse>> routerFunctions() {\n-        Stream<RouterFunction<ServerResponse>> routerFunctionStream =\n-            ExtensionContextRegistry.getInstance().getPluginApplicationContexts()\n-                .stream()\n-                .flatMap(applicationContext -> applicationContext\n-                    .getBeanProvider(RouterFunction.class)\n-                    .orderedStream())\n-                .map(router -> (RouterFunction<ServerResponse>) router);\n-        return Stream.concat(routerFunctionStream,\n-                reverseProxyRouterFunctionFactory.getRouterFunctions().stream())\n+        var rawRouterFunctions = getInstance().getPluginApplicationContexts()\n+            .stream()\n+            .flatMap(applicationContext -> applicationContext\n+                .getBeanProvider(RouterFunction.class)\n+                .orderedStream())\n+            .map(router -> (RouterFunction<ServerResponse>) router)\n             .toList();\n+        var reverseProxies = reverseProxyRouterFunctionFactory.getRouterFunctions();\n+\n+        var endpointBuilder = new CustomEndpointsBuilder();\n+        getInstance().getPluginApplicationContexts()\n+            .forEach(context -> context.getBeanProvider(CustomEndpoint.class)\n+                .orderedStream()\n+                .forEach(endpointBuilder::add));\n+        var customEndpoint = endpointBuilder.build();\n+\n+        List<RouterFunction<ServerResponse>> routerFunctions =\n+            new ArrayList<>(rawRouterFunctions.size() + reverseProxies.size() + 1);\n+        routerFunctions.addAll(rawRouterFunctions);\n+        routerFunctions.addAll(reverseProxies);\n+        routerFunctions.add(customEndpoint);\n+        return routerFunctions;\n     }\n }\n\ndiff --git a/application/src/test/java/run/halo/app/plugin/PluginCompositeRouterFunctionTest.java b/application/src/test/java/run/halo/app/plugin/PluginCompositeRouterFunctionTest.java\n--- a/application/src/test/java/run/halo/app/plugin/PluginCompositeRouterFunctionTest.java\n+++ b/application/src/test/java/run/halo/app/plugin/PluginCompositeRouterFunctionTest.java\n@@ -1,13 +1,19 @@\n package run.halo.app.plugin;\n \n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n import java.util.List;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n import org.mockito.Mock;\n import org.mockito.junit.jupiter.MockitoExtension;\n+import org.springframework.beans.factory.ObjectProvider;\n import org.springframework.http.codec.ServerCodecConfigurer;\n import org.springframework.mock.http.server.reactive.MockServerHttpRequest;\n import org.springframework.mock.web.server.MockServerWebExchange;\n@@ -18,6 +24,7 @@\n import org.springframework.web.server.ServerWebExchange;\n import reactor.core.publisher.Mono;\n import reactor.test.StepVerifier;\n+import run.halo.app.core.extension.endpoint.CustomEndpoint;\n import run.halo.app.plugin.resources.ReverseProxyRouterFunctionRegistry;\n \n /**\n@@ -28,18 +35,35 @@\n  */\n @ExtendWith(MockitoExtension.class)\n class PluginCompositeRouterFunctionTest {\n-    private final ServerCodecConfigurer codecConfigurer = ServerCodecConfigurer.create();\n+    ServerCodecConfigurer codecConfigurer = ServerCodecConfigurer.create();\n \n     @Mock\n-    private ReverseProxyRouterFunctionRegistry reverseProxyRouterFunctionRegistry;\n+    ReverseProxyRouterFunctionRegistry reverseProxyRouterFunctionRegistry;\n \n-    private PluginCompositeRouterFunction compositeRouterFunction;\n+    @Mock\n+    ObjectProvider<RouterFunction> rawRouterFunctionsProvider;\n+\n+    @Mock\n+    ObjectProvider<CustomEndpoint> customEndpointsProvider;\n \n-    private HandlerFunction<ServerResponse> handlerFunction;\n+    @InjectMocks\n+    PluginCompositeRouterFunction compositeRouterFunction;\n+\n+    HandlerFunction<ServerResponse> handlerFunction;\n \n     @BeforeEach\n     @SuppressWarnings(\"unchecked\")\n     void setUp() {\n+        var fakeContext = mock(PluginApplicationContext.class);\n+        ExtensionContextRegistry.getInstance().register(\"fake-plugin\", fakeContext);\n+\n+        when(rawRouterFunctionsProvider.orderedStream()).thenReturn(Stream.empty());\n+        when(customEndpointsProvider.orderedStream()).thenReturn(Stream.empty());\n+\n+        when(fakeContext.getBeanProvider(RouterFunction.class))\n+            .thenReturn(rawRouterFunctionsProvider);\n+        when(fakeContext.getBeanProvider(CustomEndpoint.class)).thenReturn(customEndpointsProvider);\n+\n         compositeRouterFunction =\n             new PluginCompositeRouterFunction(reverseProxyRouterFunctionRegistry);\n \n@@ -50,6 +74,11 @@ void setUp() {\n             .thenReturn(List.of(routerFunction));\n     }\n \n+    @AfterEach\n+    void cleanUp() {\n+        ExtensionContextRegistry.getInstance().remove(\"fake-plugin\");\n+    }\n+\n     @Test\n     void route() {\n         RouterFunctionMapping mapping = new RouterFunctionMapping(compositeRouterFunction);\n@@ -61,6 +90,9 @@ void route() {\n             .expectNext(handlerFunction)\n             .expectComplete()\n             .verify();\n+\n+        verify(rawRouterFunctionsProvider).orderedStream();\n+        verify(customEndpointsProvider).orderedStream();\n     }\n \n     private ServerWebExchange createExchange(String urlTemplate) {",
    "output": "Add support defining custom endpoint in plugin (#3703)\n\n#### What type of PR is this?\r\n\r\n/kind feature\r\n/area core\r\n/area plugin\r\n\r\n#### What this PR does / why we need it:\r\n\r\nIncluding CustomEndpoint beans while building plugin router functions.\r\n\r\nAfter that, we can define a CustomEndpoint in plugin like this:\r\n\r\n```java\r\n@Component\r\npublic class ApplicationEndpoint implements CustomEndpoint {\r\n\r\n    @Override\r\n    public RouterFunction<ServerResponse> endpoint() {\r\n        return SpringdocRouteBuilder.route()\r\n            .GET(\"/applications\", request -> ServerResponse.ok().build(), builder -> {\r\n                builder.operationId(\"ListV1Alpha1Applications\");\r\n            })\r\n            .build();\r\n    }\r\n\r\n    @Override\r\n    public GroupVersion groupVersion() {\r\n        return CustomEndpoint.super.groupVersion();\r\n    }\r\n}\r\n```\r\n\r\n#### Which issue(s) this PR fixes:\r\n\r\nFixes https://github.com/halo-dev/halo/issues/3700\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/application/src/main/java/run/halo/app/extension/controller/DefaultControllerManager.java b/application/src/main/java/run/halo/app/extension/controller/DefaultControllerManager.java\n--- a/application/src/main/java/run/halo/app/extension/controller/DefaultControllerManager.java\n+++ b/application/src/main/java/run/halo/app/extension/controller/DefaultControllerManager.java\n@@ -11,11 +11,11 @@\n import org.springframework.context.ApplicationListener;\n import run.halo.app.extension.ExtensionClient;\n import run.halo.app.extension.controller.Reconciler.Request;\n-import run.halo.app.infra.SchemeInitializedEvent;\n+import run.halo.app.infra.ExtensionInitializedEvent;\n \n @Slf4j\n public class DefaultControllerManager\n-    implements ApplicationListener<SchemeInitializedEvent>,\n+    implements ApplicationListener<ExtensionInitializedEvent>,\n     ApplicationContextAware, DisposableBean, ControllerManager {\n \n     private final ExtensionClient client;\n@@ -68,7 +68,7 @@ public void destroy() {\n     }\n \n     @Override\n-    public void onApplicationEvent(SchemeInitializedEvent event) {\n+    public void onApplicationEvent(ExtensionInitializedEvent event) {\n         // register reconcilers in system after scheme initialized\n         applicationContext.<Reconciler<Request>>getBeanProvider(\n                 forClassWithGenerics(Reconciler.class, Request.class))\n\ndiff --git a/application/src/main/java/run/halo/app/extension/gc/GcControllerInitializer.java b/application/src/main/java/run/halo/app/extension/gc/GcControllerInitializer.java\n--- a/application/src/main/java/run/halo/app/extension/gc/GcControllerInitializer.java\n+++ b/application/src/main/java/run/halo/app/extension/gc/GcControllerInitializer.java\n@@ -4,11 +4,11 @@\n import org.springframework.context.ApplicationListener;\n import org.springframework.stereotype.Component;\n import run.halo.app.extension.controller.Controller;\n-import run.halo.app.infra.SchemeInitializedEvent;\n+import run.halo.app.infra.ExtensionInitializedEvent;\n \n @Component\n public class GcControllerInitializer\n-    implements ApplicationListener<SchemeInitializedEvent>, DisposableBean {\n+    implements ApplicationListener<ExtensionInitializedEvent>, DisposableBean {\n \n     private final Controller gcController;\n \n@@ -17,7 +17,7 @@ public GcControllerInitializer(GcReconciler gcReconciler) {\n     }\n \n     @Override\n-    public void onApplicationEvent(SchemeInitializedEvent event) {\n+    public void onApplicationEvent(ExtensionInitializedEvent event) {\n         gcController.start();\n     }\n \n\ndiff --git a/application/src/main/java/run/halo/app/infra/ExtensionInitializedEvent.java b/application/src/main/java/run/halo/app/infra/ExtensionInitializedEvent.java\n--- a/application/src/main/java/run/halo/app/infra/ExtensionInitializedEvent.java\n+++ b/application/src/main/java/run/halo/app/infra/ExtensionInitializedEvent.java\n@@ -0,0 +1,16 @@\n+package run.halo.app.infra;\n+\n+import org.springframework.context.ApplicationEvent;\n+\n+/**\n+ * ExtensionInitializedEvent is fired after extensions have been initialized completely.\n+ *\n+ * @author johnniang\n+ */\n+public class ExtensionInitializedEvent extends ApplicationEvent {\n+\n+    public ExtensionInitializedEvent(Object source) {\n+        super(source);\n+    }\n+\n+}\n\ndiff --git a/application/src/main/java/run/halo/app/infra/ExtensionResourceInitializer.java b/application/src/main/java/run/halo/app/infra/ExtensionResourceInitializer.java\n--- a/application/src/main/java/run/halo/app/infra/ExtensionResourceInitializer.java\n+++ b/application/src/main/java/run/halo/app/infra/ExtensionResourceInitializer.java\n@@ -1,21 +1,18 @@\n package run.halo.app.infra;\n \n import java.io.IOException;\n-import java.time.Duration;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n import lombok.extern.slf4j.Slf4j;\n-import org.springframework.boot.context.event.ApplicationReadyEvent;\n+import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.context.event.EventListener;\n import org.springframework.core.io.Resource;\n import org.springframework.core.io.support.PathMatchingResourcePatternResolver;\n-import org.springframework.dao.OptimisticLockingFailureException;\n import org.springframework.stereotype.Component;\n import org.springframework.util.CollectionUtils;\n import reactor.core.publisher.Flux;\n import reactor.core.publisher.Mono;\n-import reactor.util.retry.Retry;\n import run.halo.app.extension.ReactiveExtensionClient;\n import run.halo.app.extension.Unstructured;\n import run.halo.app.infra.properties.HaloProperties;\n@@ -38,14 +35,18 @@ public class ExtensionResourceInitializer {\n     private final HaloProperties haloProperties;\n     private final ReactiveExtensionClient extensionClient;\n \n+    private final ApplicationEventPublisher eventPublisher;\n+\n     public ExtensionResourceInitializer(HaloProperties haloProperties,\n-        ReactiveExtensionClient extensionClient) {\n+        ReactiveExtensionClient extensionClient,\n+        ApplicationEventPublisher eventPublisher) {\n         this.haloProperties = haloProperties;\n         this.extensionClient = extensionClient;\n+        this.eventPublisher = eventPublisher;\n     }\n \n-    @EventListener(ApplicationReadyEvent.class)\n-    public Mono<Void> initialize(ApplicationReadyEvent readyEvent) {\n+    @EventListener(SchemeInitializedEvent.class)\n+    public Mono<Void> initialize(SchemeInitializedEvent initializedEvent) {\n         var locations = new HashSet<String>();\n         if (!haloProperties.isRequiredExtensionDisabled()) {\n             locations.addAll(REQUIRED_EXTENSION_LOCATIONS);\n@@ -80,25 +81,20 @@ public Mono<Void> initialize(ApplicationReadyEvent readyEvent) {\n                         extension.getMetadata().getName());\n                 }\n             })\n-            .then();\n+            .then(Mono.fromRunnable(\n+                () -> eventPublisher.publishEvent(new ExtensionInitializedEvent(this))));\n     }\n \n     private Mono<Unstructured> createOrUpdate(Unstructured extension) {\n         return Mono.just(extension)\n             .flatMap(ext -> extensionClient.fetch(extension.groupVersionKind(),\n                 extension.getMetadata().getName()))\n             .flatMap(existingExt -> {\n+                // force update\n                 extension.getMetadata().setVersion(existingExt.getMetadata().getVersion());\n                 return extensionClient.update(extension);\n             })\n-            .switchIfEmpty(Mono.defer(() -> extensionClient.create(extension)))\n-            .retryWhen(Retry.fixedDelay(3, Duration.ofMillis(100))\n-                .filter(t -> t instanceof OptimisticLockingFailureException))\n-            .onErrorContinue(OptimisticLockingFailureException.class, (throwable, o) -> {\n-                log.warn(\"Failed to create or update extension resource: {}/{} due to modification \"\n-                        + \"conflict\",\n-                    extension.groupVersionKind(), extension.getMetadata().getName());\n-            });\n+            .switchIfEmpty(Mono.defer(() -> extensionClient.create(extension)));\n     }\n \n     private List<Resource> listResources(String location) {\n\ndiff --git a/application/src/test/java/run/halo/app/infra/ExtensionResourceInitializerTest.java b/application/src/test/java/run/halo/app/infra/ExtensionResourceInitializerTest.java\n--- a/application/src/test/java/run/halo/app/infra/ExtensionResourceInitializerTest.java\n+++ b/application/src/test/java/run/halo/app/infra/ExtensionResourceInitializerTest.java\n@@ -19,10 +19,11 @@\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n import org.mockito.ArgumentCaptor;\n+import org.mockito.InjectMocks;\n import org.mockito.Mock;\n import org.mockito.junit.jupiter.MockitoExtension;\n import org.skyscreamer.jsonassert.JSONAssert;\n-import org.springframework.boot.context.event.ApplicationReadyEvent;\n+import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.util.FileSystemUtils;\n import reactor.core.publisher.Mono;\n import reactor.test.StepVerifier;\n@@ -42,21 +43,22 @@\n class ExtensionResourceInitializerTest {\n \n     @Mock\n-    private ReactiveExtensionClient extensionClient;\n+    ReactiveExtensionClient extensionClient;\n     @Mock\n-    private HaloProperties haloProperties;\n+    HaloProperties haloProperties;\n     @Mock\n-    private ApplicationReadyEvent applicationReadyEvent;\n+    SchemeInitializedEvent applicationReadyEvent;\n \n-    private ExtensionResourceInitializer extensionResourceInitializer;\n+    @Mock\n+    ApplicationEventPublisher eventPublisher;\n+\n+    @InjectMocks\n+    ExtensionResourceInitializer extensionResourceInitializer;\n \n     List<Path> dirsToClean;\n \n     @BeforeEach\n     void setUp() throws IOException {\n-        extensionResourceInitializer =\n-            new ExtensionResourceInitializer(haloProperties, extensionClient);\n-\n         dirsToClean = new ArrayList<>(2);\n \n         Path tempDirectory = Files.createTempDirectory(\"extension-resource-initializer-test\");",
    "output": "Fix the problem not allowing logging in after upgrading Halo (#3603)\n\n#### What type of PR is this?\r\n\r\n/kind bug\r\n/area core\r\n\r\n#### What this PR does / why we need it:\r\n\r\nThis PR makes extension initialization before starting reconcilers to prevent modification conflicts.\r\n\r\n#### Which issue(s) this PR fixes:\r\n\r\nFixes https://github.com/halo-dev/halo/issues/3601\r\n\r\n#### Special notes for your reviewer:\r\n\r\n1. Try to run Halo 2.3.2 with command `docker run --rm -it -v ~/halo2-dev:/root/.halo2 -p 8090:8090 halohub/halo:2.3.2`\r\n2. Then run Halo 2.4.0-SNAPSHOT with dev profile.\r\n\r\n    ```bash\r\n    ./gradlew bootRun --args=\"--spring.profiles.active=dev\"\r\n    ```\r\n4. Check logs and logging functionality\r\n5. Repeat steps above\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/api/src/main/java/run/halo/app/plugin/SettingFetcher.java b/api/src/main/java/run/halo/app/plugin/SettingFetcher.java\n--- a/api/src/main/java/run/halo/app/plugin/SettingFetcher.java\n+++ b/api/src/main/java/run/halo/app/plugin/SettingFetcher.java\n@@ -4,12 +4,17 @@\n import java.util.Map;\n import java.util.Optional;\n \n-public interface SettingFetcher {\n+/**\n+ * SettingFetcher must be a class instead of an interface due to backward compatibility.\n+ *\n+ * @author johnniang\n+ */\n+public abstract class SettingFetcher {\n \n-    <T> Optional<T> fetch(String group, Class<T> clazz);\n+    public abstract <T> Optional<T> fetch(String group, Class<T> clazz);\n \n-    JsonNode get(String group);\n+    public abstract JsonNode get(String group);\n \n-    Map<String, JsonNode> getValues();\n+    public abstract Map<String, JsonNode> getValues();\n \n }\n\ndiff --git a/application/src/main/java/run/halo/app/plugin/DefaultSettingFetcher.java b/application/src/main/java/run/halo/app/plugin/DefaultSettingFetcher.java\n--- a/application/src/main/java/run/halo/app/plugin/DefaultSettingFetcher.java\n+++ b/application/src/main/java/run/halo/app/plugin/DefaultSettingFetcher.java\n@@ -21,7 +21,7 @@\n  * @author guqing\n  * @since 2.0.0\n  */\n-public class DefaultSettingFetcher implements SettingFetcher {\n+public class DefaultSettingFetcher extends SettingFetcher {\n \n     private final ExtensionClient extensionClient;\n ",
    "output": "Change type of SettingFetcher from interface into abstract class (#3593)\n\n#### What type of PR is this?\r\n\r\n/kind bug\r\n/area core\r\n\r\n#### What this PR does / why we need it:\r\n\r\nChange type of SettingFetcher from interface into abstract class for backward compatibility. See https://github.com/halo-dev/halo/issues/3592 for more.\r\n\r\n#### Which issue(s) this PR fixes:\r\n\r\nFixes https://github.com/halo-dev/halo/issues/3592\r\n\r\n#### Special notes for your reviewer:\r\n\r\nPlease use [plugin-search-widget](https://github.com/halo-sigs/plugin-search-widget) to test.\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/core/extension/Theme.java b/src/main/java/run/halo/app/core/extension/Theme.java\n--- a/src/main/java/run/halo/app/core/extension/Theme.java\n+++ b/src/main/java/run/halo/app/core/extension/Theme.java\n@@ -1,5 +1,7 @@\n package run.halo.app.core.extension;\n \n+import static io.swagger.v3.oas.annotations.media.Schema.RequiredMode.NOT_REQUIRED;\n+\n import io.swagger.v3.oas.annotations.media.Schema;\n import java.util.List;\n import lombok.Data;\n@@ -60,6 +62,7 @@ public static class ThemeSpec {\n         @Schema(description = \"Deprecated, use `requires` instead.\")\n         private String require;\n \n+        @Schema(requiredMode = NOT_REQUIRED)\n         private String requires;\n \n         private String settingName;",
    "output": "Fix the problem of not initializing default theme correctly (#3194)\n\n#### What type of PR is this?\r\n\r\n/kind bug\r\n/area core\r\n/milestone 2.2.x\r\n\r\n#### What this PR does / why we need it:\r\n\r\nMake requires field of Theme not required.\r\n\r\n#### Which issue(s) this PR fixes:\r\n\r\nFixes https://github.com/halo-dev/halo/issues/3177\r\n\r\n#### Special notes for your reviewer:\r\n\r\n1. Clear Halo working directory\r\n2. Start Halo freshly\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/WebFluxConfig.java b/src/main/java/run/halo/app/config/WebFluxConfig.java\n--- a/src/main/java/run/halo/app/config/WebFluxConfig.java\n+++ b/src/main/java/run/halo/app/config/WebFluxConfig.java\n@@ -7,10 +7,10 @@\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n import java.net.URI;\n-import java.time.Duration;\n import java.util.List;\n import java.util.Objects;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.boot.autoconfigure.web.WebProperties;\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n@@ -45,12 +45,18 @@ public class WebFluxConfig implements WebFluxConfigurer {\n \n     private final HaloProperties haloProp;\n \n+\n+    private final WebProperties.Resources resourceProperties;\n+\n     private final ApplicationContext applicationContext;\n \n-    public WebFluxConfig(ObjectMapper objectMapper, HaloProperties haloProp,\n+    public WebFluxConfig(ObjectMapper objectMapper,\n+        HaloProperties haloProp,\n+        WebProperties webProperties,\n         ApplicationContext applicationContext) {\n         this.objectMapper = objectMapper;\n         this.haloProp = haloProp;\n+        this.resourceProperties = webProperties.getResources();\n         this.applicationContext = applicationContext;\n     }\n \n@@ -118,19 +124,22 @@ private Mono<ServerResponse> redirectConsole(ServerRequest request) {\n     @Override\n     public void addResourceHandlers(ResourceHandlerRegistry registry) {\n         var attachmentsRoot = haloProp.getWorkDir().resolve(\"attachments\");\n-        var cacheControl = CacheControl.maxAge(Duration.ofDays(365 / 2));\n+        final var cacheControl = resourceProperties.getCache()\n+            .getCachecontrol()\n+            .toHttpCacheControl();\n+        final var useLastModified = resourceProperties.getCache().isUseLastModified();\n \n         // Mandatory resource mapping\n         var uploadRegistration = registry.addResourceHandler(\"/upload/**\")\n             .addResourceLocations(FILE_URL_PREFIX + attachmentsRoot.resolve(\"upload\") + \"/\")\n-            .setUseLastModified(true)\n+            .setUseLastModified(useLastModified)\n             .setCacheControl(cacheControl);\n \n         // For console project\n         registry.addResourceHandler(\"/console/**\")\n             .addResourceLocations(haloProp.getConsole().getLocation())\n             .setCacheControl(cacheControl)\n-            .setUseLastModified(true)\n+            .setUseLastModified(useLastModified)\n             .resourceChain(true)\n             .addResolver(new EncodedResourceResolver())\n             .addResolver(new PathResourceResolver());\n@@ -149,7 +158,7 @@ public void addResourceHandlers(ResourceHandlerRegistry registry) {\n                 checkDirectoryTraversal(attachmentsRoot, path);\n                 registration.addResourceLocations(FILE_URL_PREFIX + path + \"/\")\n                     .setCacheControl(cacheControl)\n-                    .setUseLastModified(true);\n+                    .setUseLastModified(useLastModified);\n             });\n         });\n \n\ndiff --git a/src/main/java/run/halo/app/plugin/PluginAutoConfiguration.java b/src/main/java/run/halo/app/plugin/PluginAutoConfiguration.java\n--- a/src/main/java/run/halo/app/plugin/PluginAutoConfiguration.java\n+++ b/src/main/java/run/halo/app/plugin/PluginAutoConfiguration.java\n@@ -6,7 +6,6 @@\n import java.io.IOException;\n import java.lang.reflect.Constructor;\n import java.nio.file.Path;\n-import java.time.Duration;\n import java.time.Instant;\n import lombok.extern.slf4j.Slf4j;\n import org.pf4j.ClassLoadingStrategy;\n@@ -24,10 +23,10 @@\n import org.pf4j.PluginStatusProvider;\n import org.pf4j.RuntimeMode;\n import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.web.WebProperties;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n-import org.springframework.http.CacheControl;\n import org.springframework.util.StringUtils;\n import org.springframework.web.reactive.accept.RequestedContentTypeResolver;\n import org.springframework.web.reactive.function.BodyInserters;\n@@ -176,7 +175,9 @@ protected PluginRepository createPluginRepository() {\n     }\n \n     @Bean\n-    public RouterFunction<ServerResponse> pluginJsBundleRoute(HaloPluginManager haloPluginManager) {\n+    public RouterFunction<ServerResponse> pluginJsBundleRoute(HaloPluginManager haloPluginManager,\n+        WebProperties webProperties) {\n+        var cacheProperties = webProperties.getResources().getCache();\n         return RouterFunctions.route()\n             .GET(\"/plugins/{name}/assets/console/{*resource}\", request -> {\n                 String pluginName = request.pathVariable(\"name\");\n@@ -186,13 +187,17 @@ public RouterFunction<ServerResponse> pluginJsBundleRoute(HaloPluginManager halo\n                 if (jsBundle == null || !jsBundle.exists()) {\n                     return ServerResponse.notFound().build();\n                 }\n+                var useLastModified = cacheProperties.isUseLastModified();\n+                var bodyBuilder = ServerResponse.ok()\n+                    .cacheControl(cacheProperties.getCachecontrol().toHttpCacheControl());\n                 try {\n-                    var lastModified = Instant.ofEpochMilli(jsBundle.lastModified());\n-                    return request.checkNotModified(lastModified)\n-                        .switchIfEmpty(Mono.defer(() -> ServerResponse.ok()\n-                                .cacheControl(CacheControl.maxAge(Duration.ofDays(365 / 2)))\n-                                .lastModified(lastModified)\n+                    if (useLastModified) {\n+                        var lastModified = Instant.ofEpochMilli(jsBundle.lastModified());\n+                        return request.checkNotModified(lastModified)\n+                            .switchIfEmpty(Mono.defer(() -> bodyBuilder.lastModified(lastModified)\n                                 .body(BodyInserters.fromResource(jsBundle))));\n+                    }\n+                    return bodyBuilder.body(BodyInserters.fromResource(jsBundle));\n                 } catch (IOException e) {\n                     throw new RuntimeException(e);\n                 }\n\ndiff --git a/src/main/java/run/halo/app/theme/ThemeConfiguration.java b/src/main/java/run/halo/app/theme/ThemeConfiguration.java\n--- a/src/main/java/run/halo/app/theme/ThemeConfiguration.java\n+++ b/src/main/java/run/halo/app/theme/ThemeConfiguration.java\n@@ -6,12 +6,11 @@\n \n import java.io.IOException;\n import java.nio.file.Path;\n-import java.time.Duration;\n import java.time.Instant;\n+import org.springframework.boot.autoconfigure.web.WebProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.core.io.FileSystemResource;\n-import org.springframework.http.CacheControl;\n import org.springframework.http.MediaType;\n import org.springframework.web.reactive.function.BodyInserters;\n import org.springframework.web.reactive.function.server.RouterFunction;\n@@ -34,20 +33,24 @@ public ThemeConfiguration(HaloProperties haloProperties) {\n     }\n \n     @Bean\n-    public RouterFunction<ServerResponse> themeAssets() {\n+    public RouterFunction<ServerResponse> themeAssets(WebProperties webProperties) {\n+        var cacheProperties = webProperties.getResources().getCache();\n         return route(\n             GET(\"/themes/{themeName}/assets/{*resource}\").and(accept(MediaType.TEXT_PLAIN)),\n             request -> {\n                 var themeName = request.pathVariable(\"themeName\");\n                 var resource = request.pathVariable(\"resource\");\n                 var fsRes = new FileSystemResource(getThemeAssetsPath(themeName, resource));\n+                var bodyBuilder = ServerResponse.ok()\n+                    .cacheControl(cacheProperties.getCachecontrol().toHttpCacheControl());\n                 try {\n-                    var lastModified = Instant.ofEpochMilli(fsRes.lastModified());\n-                    return request.checkNotModified(lastModified)\n-                        .switchIfEmpty(Mono.defer(() -> ServerResponse.ok()\n-                            .cacheControl(CacheControl.maxAge(Duration.ofDays(356 / 2)))\n-                            .lastModified(lastModified)\n-                            .body(BodyInserters.fromResource(fsRes))));\n+                    if (cacheProperties.isUseLastModified()) {\n+                        var lastModified = Instant.ofEpochMilli(fsRes.lastModified());\n+                        return request.checkNotModified(lastModified)\n+                            .switchIfEmpty(Mono.defer(() -> bodyBuilder.lastModified(lastModified)\n+                                .body(BodyInserters.fromResource(fsRes))));\n+                    }\n+                    return bodyBuilder.body(BodyInserters.fromResource(fsRes));\n                 } catch (IOException e) {\n                     return Mono.error(e);\n                 }",
    "output": "Adapt spring.web.resources.cache configuration (#3130)\n\n#### What type of PR is this?\r\n\r\n/kind improvement\r\n/area core\r\n\r\n#### What this PR does / why we need it:\r\n\r\nThis PR adapt web properties to control cache of static resources.\r\n\r\nUsers who want to disable cache can configure like this:\r\n\r\n```yaml\r\nspring:\r\n  web:\r\n    resources:\r\n      cache:\r\n        cachecontrol:\r\n          no-cache: true\r\n        use-last-modified: false\r\n```\r\n\r\nBy default, we have disabled cache in development environment.\r\n\r\n#### Which issue(s) this PR fixes:\r\n\r\nFixes https://github.com/halo-dev/halo/issues/3127\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/infra/exception/handlers/GlobalErrorWebExceptionHandler.java b/src/main/java/run/halo/app/infra/exception/handlers/GlobalErrorWebExceptionHandler.java\n--- a/src/main/java/run/halo/app/infra/exception/handlers/GlobalErrorWebExceptionHandler.java\n+++ b/src/main/java/run/halo/app/infra/exception/handlers/GlobalErrorWebExceptionHandler.java\n@@ -18,7 +18,6 @@\n import org.springframework.http.HttpStatusCode;\n import org.springframework.http.MediaType;\n import org.springframework.http.ProblemDetail;\n-import org.springframework.util.StringUtils;\n import org.springframework.web.ErrorResponse;\n import org.springframework.web.method.annotation.ExceptionHandlerMethodResolver;\n import org.springframework.web.reactive.BindingContext;\n@@ -127,29 +126,6 @@ protected Mono<ServerResponse> renderErrorView(ServerRequest request) {\n             .next();\n     }\n \n-    protected void logError(ServerRequest request, ServerResponse response, Throwable throwable) {\n-        if (log.isDebugEnabled()) {\n-            log.debug(request.exchange().getLogPrefix() + formatError(throwable, request),\n-                throwable);\n-        }\n-        if (HttpStatus.resolve(response.statusCode().value()) != null\n-            && response.statusCode().equals(HttpStatus.INTERNAL_SERVER_ERROR)) {\n-            log.error(\"{} 500 Server Error for {}\",\n-                request.exchange().getLogPrefix(), formatRequest(request), throwable);\n-        }\n-    }\n-\n-    private String formatRequest(ServerRequest request) {\n-        String rawQuery = request.uri().getRawQuery();\n-        String query = StringUtils.hasText(rawQuery) ? \"?\" + rawQuery : \"\";\n-        return \"HTTP \" + request.method() + \" \\\"\" + request.path() + query + \"\\\"\";\n-    }\n-\n-    private String formatError(Throwable ex, ServerRequest request) {\n-        String reason = ex.getClass().getSimpleName() + \": \" + ex.getMessage();\n-        return \"Resolved [\" + reason + \"] for HTTP \" + request.method() + \" \" + request.path();\n-    }\n-\n     private Mono<ServerResponse> renderErrorViewBy(ServerRequest request, String viewName,\n         ServerResponse.BodyBuilder responseBody,\n         Map<String, Object> error) {",
    "output": "Clean up unnecessary code in GlobalErrorWebExceptionHandler (#3012)\n\n#### What type of PR is this?\r\n\r\n/kind cleanup\r\n/area core\r\n\r\n#### What this PR does / why we need it:\r\n\r\nBecause these code has already defined in [here](https://github.com/spring-projects/spring-boot/blob/28f9f20d39325985ea79868bbf85a51fffa76c8f/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/reactive/error/AbstractErrorWebExceptionHandler.java#L310-L339). Printing error twice in development mode is completely unnecessary.\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/infra/DefaultThemeInitializer.java b/src/main/java/run/halo/app/infra/DefaultThemeInitializer.java\n--- a/src/main/java/run/halo/app/infra/DefaultThemeInitializer.java\n+++ b/src/main/java/run/halo/app/infra/DefaultThemeInitializer.java\n@@ -1,12 +1,10 @@\n package run.halo.app.infra;\n \n import java.io.IOException;\n-import java.net.URISyntaxException;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n import java.util.concurrent.CountDownLatch;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.context.ApplicationListener;\n+import org.springframework.core.io.support.PathMatchingResourcePatternResolver;\n import org.springframework.stereotype.Component;\n import org.springframework.util.ResourceUtils;\n import run.halo.app.core.extension.theme.ThemeService;\n@@ -47,15 +45,16 @@ public void onApplicationEvent(SchemeInitializedEvent event) {\n                 return;\n             }\n             log.info(\"Initializing default theme from {}\", location);\n-            var defaultThemeUri = ResourceUtils.getURL(location).toURI();\n+            PathMatchingResourcePatternResolver resolver =\n+                new PathMatchingResourcePatternResolver();\n             var latch = new CountDownLatch(1);\n-            themeService.install(Files.newInputStream(Path.of(defaultThemeUri)))\n+            themeService.install(ResourceUtils.getURL(location).openStream())\n                 .doFinally(signalType -> latch.countDown())\n                 .subscribe(theme -> log.info(\"Initialized default theme: {}\",\n                     theme.getMetadata().getName()));\n             latch.await();\n             // Because default active theme is default, we don't need to enabled it manually.\n-        } catch (IOException | URISyntaxException | InterruptedException e) {\n+        } catch (IOException | InterruptedException e) {\n             // we should skip the initialization error at here\n             log.warn(\"Failed to initialize theme from \" + location, e);\n         }",
    "output": "fix: default theme cannot be initialized in the jar distribution (#2991)\n\n#### What type of PR is this?\r\n/kind bug\r\n\r\n#### What this PR does / why we need it:\r\nTo fix that default earth theme file not found in system initialization.\r\n\r\n#### Which issue(s) this PR fixes:\r\n\r\nFixes #2910 \r\n\r\n#### Special notes for your reviewer:\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNONE\r\n```"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/extension/controller/DefaultController.java b/src/main/java/run/halo/app/extension/controller/DefaultController.java\n--- a/src/main/java/run/halo/app/extension/controller/DefaultController.java\n+++ b/src/main/java/run/halo/app/extension/controller/DefaultController.java\n@@ -11,6 +11,7 @@\n import java.util.stream.IntStream;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.lang3.concurrent.BasicThreadFactory;\n+import org.springframework.dao.OptimisticLockingFailureException;\n import org.springframework.lang.Nullable;\n import org.springframework.util.Assert;\n import org.springframework.util.StopWatch;\n@@ -167,9 +168,14 @@ public void run() {\n                             log.trace(watch.toString());\n                         }\n                     } catch (Throwable t) {\n-                        log.error(\"Reconciler in \" + this.name\n-                                + \" aborted with an error, re-enqueuing...\",\n-                            t);\n+                        if (t instanceof OptimisticLockingFailureException) {\n+                            log.warn(\"Optimistic locking failure when reconciling request: {}/{}\",\n+                                this.name, entry.getEntry());\n+                        } else {\n+                            log.error(\"Reconciler in \" + this.name\n+                                    + \" aborted with an error, re-enqueuing...\",\n+                                t);\n+                        }\n                         result = new Reconciler.Result(true, null);\n                     } finally {\n                         queue.done(entry.getEntry());",
    "output": "Change log level to warn for optimistic locking failure error (#2957)\n\n#### What type of PR is this?\r\n\r\n/kind improvement\r\n#### What this PR does / why we need it:\r\n\r\n/kind api-change\r\n\r\n#### Which issue(s) this PR fixes:\r\nFixes #2591\r\n\r\n#### Special notes for your reviewer:\r\n\r\n#### Does this PR introduce a user-facing change?\r\n```release-note\r\nNONE\r\n```"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/metrics/VisitLogWriter.java b/src/main/java/run/halo/app/metrics/VisitLogWriter.java\n--- a/src/main/java/run/halo/app/metrics/VisitLogWriter.java\n+++ b/src/main/java/run/halo/app/metrics/VisitLogWriter.java\n@@ -96,7 +96,7 @@ public void destroy() throws Exception {\n         this.started = false;\n         interruptThread = true;\n         asyncLogWriter.dispose();\n-        executorService.shutdown();\n+        executorService.shutdownNow();\n     }\n \n     static class AsyncLogWriter implements Disposable {",
    "output": "Fix the problem of getting stuck on VM exit (#2919)\n\n#### What type of PR is this?\r\n\r\n/kind bug\r\n/area core\r\n\r\n#### What this PR does / why we need it:\r\n\r\nShutdown AsyncLogWriter on VM exit.\r\n\r\n#### Which issue(s) this PR fixes:\r\n\r\nFixes https://github.com/halo-dev/halo/issues/2901\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/core/extension/reconciler/RoleReconciler.java b/src/main/java/run/halo/app/core/extension/reconciler/RoleReconciler.java\n--- a/src/main/java/run/halo/app/core/extension/reconciler/RoleReconciler.java\n+++ b/src/main/java/run/halo/app/core/extension/reconciler/RoleReconciler.java\n@@ -1,11 +1,12 @@\n package run.halo.app.core.extension.reconciler;\n \n+import static java.util.Objects.deepEquals;\n+\n import com.fasterxml.jackson.core.type.TypeReference;\n-import java.util.HashMap;\n+import java.util.LinkedHashMap;\n import java.util.LinkedHashSet;\n import java.util.List;\n import java.util.Map;\n-import java.util.Objects;\n import java.util.Set;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.lang3.StringUtils;\n@@ -40,32 +41,29 @@ public RoleReconciler(ExtensionClient client, RoleService roleService) {\n \n     @Override\n     public Result reconcile(Request request) {\n-        client.fetch(Role.class, request.name()).ifPresent(role -> {\n-            final Role oldRole = JsonUtils.deepCopy(role);\n-            Map<String, String> annotations = role.getMetadata().getAnnotations();\n-            if (annotations == null) {\n-                annotations = new HashMap<>();\n-                role.getMetadata().setAnnotations(annotations);\n-            }\n-\n-            Set<String> roleDependencies = readValue(annotations.get(Role.ROLE_DEPENDENCIES_ANNO));\n-\n-            List<Role> dependenciesRole = roleService.listDependencies(roleDependencies);\n+        client.fetch(Role.class, request.name())\n+            .ifPresent(role -> {\n+                var annotations = role.getMetadata().getAnnotations();\n+                if (annotations == null) {\n+                    annotations = new LinkedHashMap<>();\n+                    role.getMetadata().setAnnotations(annotations);\n+                }\n+                var roleDependencies = readValue(annotations.get(Role.ROLE_DEPENDENCIES_ANNO));\n+                var dependenciesRole = roleService.listDependencies(roleDependencies);\n+                var dependencyRules = dependenciesRole.stream()\n+                    .map(Role::getRules)\n+                    .flatMap(List::stream)\n+                    .sorted()\n+                    .toList();\n+                var uiPermissions = aggregateUiPermissions(dependenciesRole);\n+                // override dependency rules to annotations\n+                annotations.put(Role.ROLE_DEPENDENCY_RULES,\n+                    JsonUtils.objectToJson(dependencyRules));\n+                annotations.put(Role.UI_PERMISSIONS_AGGREGATED_ANNO,\n+                    JsonUtils.objectToJson(uiPermissions));\n \n-            List<Role.PolicyRule> dependencyRules = dependenciesRole.stream()\n-                .map(Role::getRules)\n-                .flatMap(List::stream)\n-                .sorted()\n-                .toList();\n-            List<String> uiPermissions = aggregateUiPermissions(dependenciesRole);\n-            // override dependency rules to annotations\n-            annotations.put(Role.ROLE_DEPENDENCY_RULES, JsonUtils.objectToJson(dependencyRules));\n-            annotations.put(Role.UI_PERMISSIONS_AGGREGATED_ANNO,\n-                JsonUtils.objectToJson(uiPermissions));\n-            if (!Objects.equals(oldRole, role)) {\n-                client.update(role);\n-            }\n-        });\n+                updateLabelsAndAnnotations(role);\n+            });\n         return new Result(false, null);\n     }\n \n@@ -76,6 +74,19 @@ public Controller setupWith(ControllerBuilder builder) {\n             .build();\n     }\n \n+    private void updateLabelsAndAnnotations(Role role) {\n+        var annotations = role.getMetadata().getAnnotations();\n+        var labels = role.getMetadata().getLabels();\n+        client.fetch(Role.class, role.getMetadata().getName())\n+            .filter(freshRole -> !deepEquals(annotations, freshRole.getMetadata().getAnnotations())\n+            || deepEquals(labels, freshRole.getMetadata().getLabels()))\n+            .ifPresent(freshRole -> {\n+                freshRole.getMetadata().setAnnotations(annotations);\n+                freshRole.getMetadata().setLabels(labels);\n+                client.update(freshRole);\n+            });\n+    }\n+\n     private List<String> aggregateUiPermissions(List<Role> dependencyRoles) {\n         return dependencyRoles.stream()\n             .filter(role -> role.getMetadata().getAnnotations() != null)",
    "output": "Fix an optimistic lock error always appearing when restarting Halo (#2795)\n\n#### What type of PR is this?\r\n\r\n/kind improvement\r\n/area core\r\n/milestone 2.0.x\r\n\r\n#### What this PR does / why we need it:\r\n\r\nThis PR only do one improvement for reconciling Role. I always fetch the latest data and compare the difference between the latest and current, and then decide whether to update based on the result.\r\n\r\n#### Which issue(s) this PR fixes:\r\n\r\nFixes https://github.com/halo-dev/halo/issues/2784\r\n\r\n#### Special notes for your reviewer:\r\n\r\nSteps to test:\r\n\r\n1. Restart Halo multiple times and see the log\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/WebServerSecurityConfig.java b/src/main/java/run/halo/app/config/WebServerSecurityConfig.java\n--- a/src/main/java/run/halo/app/config/WebServerSecurityConfig.java\n+++ b/src/main/java/run/halo/app/config/WebServerSecurityConfig.java\n@@ -1,6 +1,7 @@\n package run.halo.app.config;\n \n import static org.springframework.security.config.Customizer.withDefaults;\n+import static org.springframework.security.web.server.header.XFrameOptionsServerHttpHeadersWriter.Mode.SAMEORIGIN;\n \n import com.nimbusds.jose.JWSAlgorithm;\n import com.nimbusds.jose.jwk.JWKSet;\n@@ -60,6 +61,9 @@ SecurityWebFilterChain apiFilterChain(ServerHttpSecurity http,\n             .access(new RequestInfoAuthorizationManager(roleService))\n             .pathMatchers(\"/**\").permitAll()\n             .and()\n+            .headers()\n+            .frameOptions().mode(SAMEORIGIN)\n+            .and()\n             .anonymous(anonymousSpec -> {\n                 anonymousSpec.authorities(AnonymousUserConst.Role);\n                 anonymousSpec.principal(AnonymousUserConst.PRINCIPAL);",
    "output": "Set mode of frame options to SAMEORIGIN (#2761)\n\n#### What type of PR is this?\r\n\r\n/kind bug\r\n/area core\r\n\r\n#### What this PR does / why we need it:\r\n\r\nThe problem https://github.com/halo-dev/halo/issues/2743 was introduced by https://github.com/halo-dev/halo/pull/2729. This Pr mainly resolves it by setting SAMEORIGIN mode for frame options.\r\n\r\n![image](https://user-images.githubusercontent.com/16865714/203795956-6efec450-da5f-4222-884d-5a67cb113173.png)\r\n\r\n#### Which issue(s) this PR fixes:\r\n\r\nFixes https://github.com/halo-dev/halo/issues/2743\r\n\r\n#### Special notes for your reviewer:\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/console/ConsoleProxyFilter.java b/src/main/java/run/halo/app/console/ConsoleProxyFilter.java\n--- a/src/main/java/run/halo/app/console/ConsoleProxyFilter.java\n+++ b/src/main/java/run/halo/app/console/ConsoleProxyFilter.java\n@@ -5,6 +5,7 @@\n import org.springframework.http.MediaType;\n import org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher;\n import org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher;\n+import org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher;\n import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher;\n import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers;\n import org.springframework.web.reactive.function.BodyExtractors;\n@@ -31,6 +32,8 @@ public ConsoleProxyFilter(HaloProperties haloProperties) {\n         var consoleMatcher = ServerWebExchangeMatchers.pathMatchers(HttpMethod.GET, \"/console/**\");\n         consoleMatcher = new AndServerWebExchangeMatcher(consoleMatcher,\n             new MediaTypeServerWebExchangeMatcher(MediaType.TEXT_HTML));\n+        consoleMatcher = new AndServerWebExchangeMatcher(consoleMatcher,\n+            new NegatedServerWebExchangeMatcher(new WebSocketServerWebExchangeMatcher()));\n         this.consoleMatcher = consoleMatcher;\n         this.webClient = WebClient.create(proxyProperties.getEndpoint().toString());\n         log.info(\"Initialized ConsoleProxyFilter to proxy console\");\n\ndiff --git a/src/main/java/run/halo/app/console/WebSocketServerWebExchangeMatcher.java b/src/main/java/run/halo/app/console/WebSocketServerWebExchangeMatcher.java\n--- a/src/main/java/run/halo/app/console/WebSocketServerWebExchangeMatcher.java\n+++ b/src/main/java/run/halo/app/console/WebSocketServerWebExchangeMatcher.java\n@@ -0,0 +1,20 @@\n+package run.halo.app.console;\n+\n+import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher;\n+import org.springframework.web.server.ServerWebExchange;\n+import reactor.core.publisher.Mono;\n+\n+public class WebSocketServerWebExchangeMatcher implements ServerWebExchangeMatcher {\n+    @Override\n+    public Mono<MatchResult> matches(ServerWebExchange exchange) {\n+        var headers = exchange.getRequest().getHeaders();\n+        if (!headers.getConnection().contains(\"Upgrade\")) {\n+            return MatchResult.notMatch();\n+        }\n+        var upgrade = headers.getUpgrade();\n+        if (!\"websocket\".equalsIgnoreCase(upgrade)) {\n+            return MatchResult.notMatch();\n+        }\n+        return MatchResult.match();\n+    }\n+}\n\ndiff --git a/src/test/java/run/halo/app/console/WebSocketServerWebExchangeMatcherTest.java b/src/test/java/run/halo/app/console/WebSocketServerWebExchangeMatcherTest.java\n--- a/src/test/java/run/halo/app/console/WebSocketServerWebExchangeMatcherTest.java\n+++ b/src/test/java/run/halo/app/console/WebSocketServerWebExchangeMatcherTest.java\n@@ -0,0 +1,39 @@\n+package run.halo.app.console;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import org.junit.jupiter.api.Test;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.mock.http.server.reactive.MockServerHttpRequest;\n+import org.springframework.mock.web.server.MockServerWebExchange;\n+import reactor.test.StepVerifier;\n+\n+class WebSocketServerWebExchangeMatcherTest {\n+\n+    @Test\n+    void shouldMatchIfWebSocketProtocol() {\n+        var httpRequest = MockServerHttpRequest.get(\"\")\n+            .header(HttpHeaders.CONNECTION, HttpHeaders.UPGRADE)\n+            .header(HttpHeaders.UPGRADE, \"websocket\")\n+            .build();\n+        var wsExchange = MockServerWebExchange.from(httpRequest);\n+        var wsMatcher = new WebSocketServerWebExchangeMatcher();\n+        StepVerifier.create(wsMatcher.matches(wsExchange))\n+            .consumeNextWith(result -> assertTrue(result.isMatch()))\n+            .verifyComplete();\n+    }\n+\n+    @Test\n+    void shouldNotMatchIfNotWebSocketProtocol() {\n+        var httpRequest = MockServerHttpRequest.get(\"\")\n+            .header(HttpHeaders.CONNECTION, HttpHeaders.UPGRADE)\n+            .header(HttpHeaders.UPGRADE, \"not-a-websocket\")\n+            .build();\n+        var wsExchange = MockServerWebExchange.from(httpRequest);\n+        var wsMatcher = new WebSocketServerWebExchangeMatcher();\n+        StepVerifier.create(wsMatcher.matches(wsExchange))\n+            .consumeNextWith(result -> assertFalse(result.isMatch()))\n+            .verifyComplete();\n+    }\n+}\n\\ No newline at end of file",
    "output": "Ignore websocket protocol while proxying console (#2760)\n\n#### What type of PR is this?\r\n\r\n/kind feature\r\n/area core\r\n\r\n#### What this PR does / why we need it:\r\n\r\nIgnore websocket protocol while proxying console. If we don't do this, console dev environment will crash with following error:\r\n\r\n```bash\r\n  VITE v3.2.4  ready in 1672 ms\r\n\r\n  ➜  Local:   http://localhost:3000/console/                                                                           16:12:21\r\n  ➜  Network: http://172.23.176.1:3000/console/                                                                        16:12:21\r\n  ➜  Network: http://172.18.96.1:3000/console/                                                                         16:12:21\r\n  ➜  Network: http://192.168.31.106:3000/console/                                                                      16:12:21\r\n[vite-plugin-static-copy] Collected 8 items.                                                                           16:12:21\r\nnode:events:491\r\n      throw er; // Unhandled 'error' event\r\n      ^\r\n\r\nRangeError: Invalid WebSocket frame: RSV1 must be clear\r\n    at Receiver$1.getInfo (file:///C:/Users/johnn/workspaces/halo-dev/console/node_modules/.pnpm/vite@3.2.4_ajklay5k626t46b6fyghkbup3i/node_modules/vite/dist/node/chunks/dep-67e7f8ab.js:54186:14)\r\n    at Receiver$1.startLoop (file:///C:/Users/johnn/workspaces/halo-dev/console/node_modules/.pnpm/vite@3.2.4_ajklay5k626t46b6fyghkbup3i/node_modules/vite/dist/node/chunks/dep-67e7f8ab.js:54133:22)\r\n    at Receiver$1._write (file:///C:/Users/johnn/workspaces/halo-dev/console/node_modules/.pnpm/vite@3.2.4_ajklay5k626t46b6fyghkbup3i/node_modules/vite/dist/node/chunks/dep-67e7f8ab.js:54080:10)\r\n    at writeOrBuffer (node:internal/streams/writable:392:12)\r\n    at _write (node:internal/streams/writable:333:10)\r\n    at Writable.write (node:internal/streams/writable:337:10)\r\n    at Socket.socketOnData (file:///C:/Users/johnn/workspaces/halo-dev/console/node_modules/.pnpm/vite@3.2.4_ajklay5k626t46b6fyghkbup3i/node_modules/vite/dist/node/chunks/dep-67e7f8ab.js:56826:37)\r\n    at Socket.emit (node:events:513:28)\r\n    at addChunk (node:internal/streams/readable:324:12)\r\n    at readableAddChunk (node:internal/streams/readable:297:9)\r\n    at Readable.push (node:internal/streams/readable:234:10)\r\n    at TCP.onStreamRead (node:internal/stream_base_commons:190:23)\r\nEmitted 'error' event on WebSocket$1 instance at:\r\n    at Receiver$1.receiverOnError (file:///C:/Users/johnn/workspaces/halo-dev/console/node_modules/.pnpm/vite@3.2.4_ajklay5k626t46b6fyghkbup3i/node_modules/vite/dist/node/chunks/dep-67e7f8ab.js:56712:13)\r\n    at Receiver$1.emit (node:events:513:28)\r\n    at emitErrorNT (node:internal/streams/destroy:151:8)\r\n    at emitErrorCloseNT (node:internal/streams/destroy:116:3)\r\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21) {\r\n  code: 'WS_ERR_UNEXPECTED_RSV_1',\r\n  [Symbol(status-code)]: 1002\r\n}\r\n\r\nNode.js v18.12.1\r\n ELIFECYCLE  Command failed with exit code 1.\r\n```\r\n\r\n#### Special notes for your reviewer:\r\n\r\nSteps to test:\r\n\r\n1. Edit your application.yaml with console proxy configuration\r\n2. Start Halo\r\n3. Use non-Chromelike browser to request <http://localhost:8090>.\r\n4. See the result\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/core/extension/attachment/endpoint/AttachmentEndpoint.java b/src/main/java/run/halo/app/core/extension/attachment/endpoint/AttachmentEndpoint.java\n--- a/src/main/java/run/halo/app/core/extension/attachment/endpoint/AttachmentEndpoint.java\n+++ b/src/main/java/run/halo/app/core/extension/attachment/endpoint/AttachmentEndpoint.java\n@@ -4,6 +4,7 @@\n import static org.springdoc.core.fn.builders.apiresponse.Builder.responseBuilder;\n import static org.springdoc.core.fn.builders.content.Builder.contentBuilder;\n import static org.springdoc.core.fn.builders.schema.Builder.schemaBuilder;\n+import static org.springframework.boot.convert.ApplicationConversionService.getSharedInstance;\n import static org.springframework.web.reactive.function.BodyExtractors.toMultipartData;\n import static org.springframework.web.reactive.function.server.RequestPredicates.contentType;\n import static run.halo.app.extension.ListResult.generateGenericClass;\n@@ -168,6 +169,10 @@ public interface ISearchRequest extends IListRequest {\n         @Schema(description = \"Name of group\")\n         Optional<String> getGroup();\n \n+        @Schema(description = \"Filter attachments without group. This parameter will ignore group\"\n+            + \" parameter.\")\n+        Optional<Boolean> getUngrouped();\n+\n         @Schema(description = \"Name of user who uploaded the attachment\")\n         Optional<String> getUploadedBy();\n \n@@ -209,6 +214,12 @@ public Optional<String> getGroup() {\n                 .filter(StringUtils::hasText);\n         }\n \n+        @Override\n+        public Optional<Boolean> getUngrouped() {\n+            return Optional.ofNullable(queryParams.getFirst(\"ungrouped\"))\n+                .map(ungroupedStr -> getSharedInstance().convert(ungroupedStr, Boolean.class));\n+        }\n+\n         @Override\n         public Optional<String> getUploadedBy() {\n             return Optional.ofNullable(queryParams.getFirst(\"uploadedBy\"))\n@@ -221,33 +232,49 @@ public Sort getSort() {\n         }\n \n         public Predicate<Attachment> toPredicate() {\n-            var predicate = (Predicate<Attachment>) (attachment) -> getDisplayName()\n+            Predicate<Attachment> displayNamePred = attachment -> getDisplayName()\n                 .map(displayNameInParam -> {\n                     String displayName = attachment.getSpec().getDisplayName();\n                     return displayName.contains(displayNameInParam);\n-                }).orElse(true)\n-                && getPolicy()\n+                }).orElse(true);\n+\n+            Predicate<Attachment> policyPred = attachment -> getPolicy()\n                 .map(policy -> {\n                     var policyRef = attachment.getSpec().getPolicyRef();\n                     return policyRef != null && policy.equals(policyRef.getName());\n-                }).orElse(true)\n-                && getGroup()\n+                }).orElse(true);\n+\n+            Predicate<Attachment> groupPred = attachment -> getGroup()\n                 .map(group -> {\n                     var groupRef = attachment.getSpec().getGroupRef();\n                     return groupRef != null && group.equals(groupRef.getName());\n                 })\n-                .orElse(true)\n-                && getUploadedBy()\n+                .orElse(true);\n+\n+            Predicate<Attachment> ungroupedPred = attachment -> getUngrouped()\n+                .filter(Boolean::booleanValue)\n+                .map(ungrouped -> {\n+                    var groupRef = attachment.getSpec().getGroupRef();\n+                    return groupRef == null || !StringUtils.hasText(groupRef.getName());\n+                })\n+                .orElseGet(() -> groupPred.test(attachment));\n+\n+            Predicate<Attachment> uploadedByPred = attachment -> getUploadedBy()\n                 .map(uploadedBy -> {\n                     var uploadedByRef = attachment.getSpec().getUploadedBy();\n                     return uploadedByRef != null && uploadedBy.equals(uploadedByRef.getName());\n                 })\n                 .orElse(true);\n \n-            var selectorPredicate = labelAndFieldSelectorToPredicate(getLabelSelector(),\n-                getFieldSelector());\n \n-            return predicate.and(selectorPredicate);\n+            var selectorPred =\n+                labelAndFieldSelectorToPredicate(getLabelSelector(), getFieldSelector());\n+\n+            return displayNamePred\n+                .and(policyPred)\n+                .and(ungroupedPred)\n+                .and(uploadedByPred)\n+                .and(selectorPred);\n         }\n \n         public Comparator<Attachment> toComparator() {\n\ndiff --git a/src/test/java/run/halo/app/core/extension/attachment/endpoint/AttachmentEndpointTest.java b/src/test/java/run/halo/app/core/extension/attachment/endpoint/AttachmentEndpointTest.java\n--- a/src/test/java/run/halo/app/core/extension/attachment/endpoint/AttachmentEndpointTest.java\n+++ b/src/test/java/run/halo/app/core/extension/attachment/endpoint/AttachmentEndpointTest.java\n@@ -1,6 +1,10 @@\n package run.halo.app.core.extension.attachment.endpoint;\n \n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.same;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n@@ -18,13 +22,19 @@\n import org.mockito.junit.jupiter.MockitoExtension;\n import org.springframework.http.MediaType;\n import org.springframework.http.client.MultipartBodyBuilder;\n+import org.springframework.mock.http.server.reactive.MockServerHttpRequest;\n+import org.springframework.mock.web.reactive.function.server.MockServerRequest;\n+import org.springframework.mock.web.server.MockServerWebExchange;\n import org.springframework.test.web.reactive.server.WebTestClient;\n import org.springframework.web.reactive.function.BodyInserters;\n import reactor.core.publisher.Mono;\n import run.halo.app.core.extension.attachment.Attachment;\n+import run.halo.app.core.extension.attachment.Attachment.AttachmentSpec;\n import run.halo.app.core.extension.attachment.Policy;\n import run.halo.app.core.extension.attachment.Policy.PolicySpec;\n+import run.halo.app.core.extension.attachment.endpoint.AttachmentEndpoint.SearchRequest;\n import run.halo.app.extension.ConfigMap;\n+import run.halo.app.extension.ListResult;\n import run.halo.app.extension.Metadata;\n import run.halo.app.extension.ReactiveExtensionClient;\n import run.halo.app.extension.Ref;\n@@ -149,4 +159,45 @@ void shouldUploadSuccessfully() {\n         }\n     }\n \n+    @Nested\n+    class SearchTest {\n+\n+        @Test\n+        void shouldListUngroupedAttachments() {\n+            when(client.list(same(Attachment.class), any(), any(), anyInt(), anyInt()))\n+                .thenReturn(Mono.just(ListResult.emptyResult()));\n+\n+            webClient\n+                .get()\n+                .uri(\"/attachments\")\n+                .exchange()\n+                .expectStatus().isOk()\n+                .expectBody()\n+                .jsonPath(\"items.length()\").isEqualTo(0);\n+        }\n+\n+        @Test\n+        void shouldFilterWithUngrouped() {\n+            var httpRequest = MockServerHttpRequest.get(\"/attachments\")\n+                .build();\n+            var exchange = new MockServerWebExchange.Builder(httpRequest)\n+                .build();\n+            MockServerRequest request = MockServerRequest.builder()\n+                .queryParam(\"ungrouped\", \"true\")\n+                .queryParam(\"group\", \"halo\")\n+                .exchange(exchange)\n+                .build();\n+            var searchRequest = new SearchRequest(request);\n+            var pred = searchRequest.toPredicate();\n+            var attachment = new Attachment();\n+            var spec = new AttachmentSpec();\n+            attachment.setSpec(spec);\n+\n+            assertTrue(pred.test(attachment));\n+\n+            spec.setGroupRef(Ref.of(\"halo\"));\n+            assertFalse(pred.test(attachment));\n+        }\n+    }\n+\n }\n\\ No newline at end of file",
    "output": "Provide ungrouped query param to filter ungrouped attachments (#2752)\n\n#### What type of PR is this?\r\n\r\n/kind feature\r\n/area core\r\n/milestone 2.0.0-rc.1\r\n\r\n#### What this PR does / why we need it:\r\n\r\nProvide `ungrouped` query param to filter ungrouped attachments. Please note that we will ignore `group` query param when `ungropued` is `true`.\r\n\r\n```bash\r\ncurl -X 'GET' \\\r\n  'http://localhost:8090/apis/api.console.halo.run/v1alpha1/attachments?ungrouped=true' \\\r\n  -H 'accept: */*'\r\n```\r\n\r\n#### Which issue(s) this PR fixes:\r\n\r\nFixes https://github.com/halo-dev/halo/issues/2451\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/core/extension/theme/ThemeEndpoint.java b/src/main/java/run/halo/app/core/extension/theme/ThemeEndpoint.java\n--- a/src/main/java/run/halo/app/core/extension/theme/ThemeEndpoint.java\n+++ b/src/main/java/run/halo/app/core/extension/theme/ThemeEndpoint.java\n@@ -178,8 +178,8 @@ private Mono<ServerResponse> upgrade(ServerRequest request) {\n             .map(UpgradeRequest::new)\n             .map(UpgradeRequest::getFile)\n             .flatMap(file -> {\n-                try (var inputStream = toInputStream(file.content())) {\n-                    return themeService.upgrade(themeNameInPath, inputStream);\n+                try {\n+                    return themeService.upgrade(themeNameInPath, toInputStream(file.content()));\n                 } catch (IOException e) {\n                     return Mono.error(e);\n                 }\n@@ -261,8 +261,7 @@ Mono<ServerResponse> install(ServerRequest request) {\n             .flatMap(this::getZipFilePart)\n             .flatMap(file -> {\n                 try {\n-                    var is = toInputStream(file.content());\n-                    return themeService.install(is);\n+                    return themeService.install(toInputStream(file.content()));\n                 } catch (IOException e) {\n                     return Mono.error(Exceptions.propagate(e));\n                 }",
    "output": "Fix the problem of upgrading theme due to pipe closed (#2720)\n\n#### What type of PR is this?\r\n\r\n/kind bug\r\n/kind regression\r\n/area core\r\n/milestone 2.0\r\n\r\n#### What this PR does / why we need it:\r\n\r\nWhen we try to upgrade a theme, error will appear like below:\r\n\r\n```java\r\n2022-11-18T15:45:35.130+08:00 ERROR 18136 --- [oundedElastic-1] a.w.r.e.AbstractErrorWebExceptionHandler : [26de12d5-51]  500 Server Error for HTTP POST \"/apis/api.console.halo.run/v1alpha1/themes/theme-earth/upgrade\"\r\n\r\njava.io.IOException: Pipe closed\r\n\tat java.base/java.io.PipedInputStream.read(PipedInputStream.java:307) ~[na:na]\r\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \r\nAssembly trace from producer [reactor.core.publisher.MonoFlatMap] :\r\n\treactor.core.publisher.Mono.flatMap(Mono.java:3080)\r\n\trun.halo.app.core.extension.theme.ThemeServiceImpl.upgrade(ThemeServiceImpl.java:72)\r\nError has been observed at the following site(s):\r\n\t*____________Mono.flatMap ⇢ at run.halo.app.core.extension.theme.ThemeServiceImpl.upgrade(ThemeServiceImpl.java:72)\r\n\t|_          Mono.doOnNext ⇢ at run.halo.app.core.extension.theme.ThemeServiceImpl.upgrade(ThemeServiceImpl.java:82)\r\n\t|_               Mono.map ⇢ at run.halo.app.core.extension.theme.ThemeServiceImpl.upgrade(ThemeServiceImpl.java:88)\r\n\t|_          Mono.doOnNext ⇢ at run.halo.app.core.extension.theme.ThemeServiceImpl.upgrade(ThemeServiceImpl.java:89)\r\n\t|_           Mono.flatMap ⇢ at run.halo.app.core.extension.theme.ThemeServiceImpl.upgrade(ThemeServiceImpl.java:98)\r\n\t|_          Mono.doOnNext ⇢ at run.halo.app.core.extension.theme.ThemeServiceImpl.upgrade(ThemeServiceImpl.java:103)\r\n\t|_           Mono.flatMap ⇢ at run.halo.app.core.extension.theme.ThemeServiceImpl.upgrade(ThemeServiceImpl.java:112)\r\n\t|_         Mono.doFinally ⇢ at run.halo.app.core.extension.theme.ThemeServiceImpl.upgrade(ThemeServiceImpl.java:113)\r\n\t*____________Mono.flatMap ⇢ at run.halo.app.core.extension.theme.ThemeEndpoint.upgrade(ThemeEndpoint.java:180)\r\n\t|_           Mono.flatMap ⇢ at run.halo.app.core.extension.theme.ThemeEndpoint.upgrade(ThemeEndpoint.java:187)\r\n```\r\n\r\nThis might be caused by PR <https://github.com/halo-dev/halo/pull/2704>.\r\n\r\n#### Special notes for your reviewer:\r\n\r\nSteps to test:\r\n\r\n1. Upgrade any theme\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/extension/ListResult.java b/src/main/java/run/halo/app/extension/ListResult.java\n--- a/src/main/java/run/halo/app/extension/ListResult.java\n+++ b/src/main/java/run/halo/app/extension/ListResult.java\n@@ -67,8 +67,7 @@ public boolean hasNext() {\n         if (page <= 0) {\n             return false;\n         }\n-        var totalPages = size == 0 ? 1 : (int) Math.ceil((double) total / (double) size);\n-        return page < totalPages;\n+        return page < getTotalPages();\n     }\n \n     @Schema(description = \"Indicates whether current page has previous page.\", required = true)\n@@ -88,6 +87,12 @@ public boolean isEmpty() {\n         return Streamable.super.isEmpty();\n     }\n \n+    @Schema(description = \"Indicates total pages.\", required = true)\n+    @JsonProperty(\"totalPages\")\n+    public long getTotalPages() {\n+        return size == 0 ? 1 : (total + size - 1) / size;\n+    }\n+\n     /**\n      * Generate generic ListResult class. Like {@code ListResult<User>}, {@code ListResult<Post>},\n      * etc.\n\ndiff --git a/src/test/java/run/halo/app/content/comment/CommentServiceImplTest.java b/src/test/java/run/halo/app/content/comment/CommentServiceImplTest.java\n--- a/src/test/java/run/halo/app/content/comment/CommentServiceImplTest.java\n+++ b/src/test/java/run/halo/app/content/comment/CommentServiceImplTest.java\n@@ -244,6 +244,7 @@ private String expectListResultJson() {\n                 \"page\": 1,\n                 \"size\": 10,\n                 \"total\": 3,\n+                \"totalPages\": 1,\n                 \"items\": [\n                     {\n                         \"comment\": {\n\ndiff --git a/src/test/java/run/halo/app/extension/ListResultTest.java b/src/test/java/run/halo/app/extension/ListResultTest.java\n--- a/src/test/java/run/halo/app/extension/ListResultTest.java\n+++ b/src/test/java/run/halo/app/extension/ListResultTest.java\n@@ -5,6 +5,7 @@\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.lang.reflect.ParameterizedType;\n+import java.util.List;\n import org.junit.jupiter.api.Test;\n \n class ListResultTest {\n@@ -27,4 +28,19 @@ void generateGenericClassForClassParam() {\n             .getActualTypeArguments()[0]);\n         assertEquals(\"FakeExtensionList\", fakeListClass.getSimpleName());\n     }\n+\n+    @Test\n+    void totalPages() {\n+        var listResult = new ListResult<>(1, 10, 100, List.of());\n+        assertEquals(10, listResult.getTotalPages());\n+\n+        listResult = new ListResult<>(1, 10, 1, List.of());\n+        assertEquals(1, listResult.getTotalPages());\n+\n+        listResult = new ListResult<>(1, 10, 9, List.of());\n+        assertEquals(1, listResult.getTotalPages());\n+\n+        listResult = new ListResult<>(1, 0, 100, List.of());\n+        assertEquals(1, listResult.getTotalPages());\n+    }\n }\n\\ No newline at end of file",
    "output": "feat: total pages returned from paging results (#2669)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/infra/SystemSetting.java b/src/main/java/run/halo/app/infra/SystemSetting.java\n--- a/src/main/java/run/halo/app/infra/SystemSetting.java\n+++ b/src/main/java/run/halo/app/infra/SystemSetting.java\n@@ -81,4 +81,10 @@ public static class Comment {\n         Boolean requireReviewForNew;\n         Boolean systemUserOnly;\n     }\n+\n+    @Data\n+    public static class Menu {\n+        public static final String GROUP = \"menu\";\n+        public String primary;\n+    }\n }\n\ndiff --git a/src/main/java/run/halo/app/theme/finders/MenuFinder.java b/src/main/java/run/halo/app/theme/finders/MenuFinder.java\n--- a/src/main/java/run/halo/app/theme/finders/MenuFinder.java\n+++ b/src/main/java/run/halo/app/theme/finders/MenuFinder.java\n@@ -12,5 +12,5 @@ public interface MenuFinder {\n \n     MenuVo getByName(String name);\n \n-    MenuVo getDefault();\n+    MenuVo getPrimary();\n }\n\ndiff --git a/src/main/java/run/halo/app/theme/finders/impl/MenuFinderImpl.java b/src/main/java/run/halo/app/theme/finders/impl/MenuFinderImpl.java\n--- a/src/main/java/run/halo/app/theme/finders/impl/MenuFinderImpl.java\n+++ b/src/main/java/run/halo/app/theme/finders/impl/MenuFinderImpl.java\n@@ -9,11 +9,15 @@\n import java.util.Objects;\n import java.util.function.Function;\n import java.util.stream.Collectors;\n+import lombok.AllArgsConstructor;\n+import org.apache.commons.lang3.StringUtils;\n import org.springframework.util.CollectionUtils;\n import org.springframework.util.comparator.Comparators;\n import run.halo.app.core.extension.Menu;\n import run.halo.app.core.extension.MenuItem;\n import run.halo.app.extension.ReactiveExtensionClient;\n+import run.halo.app.infra.SystemConfigurableEnvironmentFetcher;\n+import run.halo.app.infra.SystemSetting;\n import run.halo.app.theme.finders.Finder;\n import run.halo.app.theme.finders.MenuFinder;\n import run.halo.app.theme.finders.vo.MenuItemVo;\n@@ -26,13 +30,11 @@\n  * @since 2.0.0\n  */\n @Finder(\"menuFinder\")\n+@AllArgsConstructor\n public class MenuFinderImpl implements MenuFinder {\n \n     private final ReactiveExtensionClient client;\n-\n-    public MenuFinderImpl(ReactiveExtensionClient client) {\n-        this.client = client;\n-    }\n+    private final SystemConfigurableEnvironmentFetcher environmentFetcher;\n \n     @Override\n     public MenuVo getByName(String name) {\n@@ -43,14 +45,19 @@ public MenuVo getByName(String name) {\n     }\n \n     @Override\n-    public MenuVo getDefault() {\n+    public MenuVo getPrimary() {\n         List<MenuVo> menuVos = listAsTree();\n         if (CollectionUtils.isEmpty(menuVos)) {\n             return null;\n         }\n-        // TODO If there are multiple groups of menus,\n-        //  return the first as the default, and consider optimizing it later\n-        return menuVos.get(0);\n+        return environmentFetcher.fetch(SystemSetting.Menu.GROUP, SystemSetting.Menu.class)\n+            .blockOptional()\n+            .map(SystemSetting.Menu::getPrimary)\n+            .filter(StringUtils::isNotBlank)\n+            .flatMap(primary -> menuVos.stream()\n+                .filter(menuVo -> menuVo.getMetadata().getName().equals(primary))\n+                .findAny())\n+            .orElse(menuVos.get(0));\n     }\n \n     List<MenuVo> listAll() {\n\ndiff --git a/src/test/java/run/halo/app/theme/finders/impl/MenuFinderImplTest.java b/src/test/java/run/halo/app/theme/finders/impl/MenuFinderImplTest.java\n--- a/src/test/java/run/halo/app/theme/finders/impl/MenuFinderImplTest.java\n+++ b/src/test/java/run/halo/app/theme/finders/impl/MenuFinderImplTest.java\n@@ -7,9 +7,9 @@\n import java.util.Collections;\n import java.util.LinkedHashSet;\n import java.util.List;\n-import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n import org.mockito.Mock;\n import org.mockito.Mockito;\n import org.mockito.junit.jupiter.MockitoExtension;\n@@ -34,13 +34,9 @@ class MenuFinderImplTest {\n     @Mock\n     private ReactiveExtensionClient client;\n \n+    @InjectMocks\n     private MenuFinderImpl menuFinder;\n \n-    @BeforeEach\n-    void setUp() {\n-        menuFinder = new MenuFinderImpl(client);\n-    }\n-\n     @Test\n     void listAsTree() {\n         Tuple2<List<Menu>, List<MenuItem>> tuple = testTree();",
    "output": "feat: add setting item for primary menu selector (#2667)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/extension/JSONExtensionConverter.java b/src/main/java/run/halo/app/extension/JSONExtensionConverter.java\n--- a/src/main/java/run/halo/app/extension/JSONExtensionConverter.java\n+++ b/src/main/java/run/halo/app/extension/JSONExtensionConverter.java\n@@ -92,7 +92,6 @@ private SchemaValidator getValidator(Scheme scheme)\n         throws MalformedURLException, ResolutionException {\n         var context = new ValidationContext<OAI3>(\n             new OAI3Context(new URL(\"file:/\"), scheme.openApiSchema()));\n-        context.addValidator(\"x-validation\", ExtraValidationValidator::new);\n         context.setFastFail(false);\n         return new SchemaValidator(context, null, scheme.openApiSchema());\n     }\n\ndiff --git a/src/main/java/run/halo/app/extension/Metadata.java b/src/main/java/run/halo/app/extension/Metadata.java\n--- a/src/main/java/run/halo/app/extension/Metadata.java\n+++ b/src/main/java/run/halo/app/extension/Metadata.java\n@@ -1,8 +1,5 @@\n package run.halo.app.extension;\n \n-import io.swagger.v3.oas.annotations.extensions.Extension;\n-import io.swagger.v3.oas.annotations.extensions.ExtensionProperty;\n-import io.swagger.v3.oas.annotations.media.Schema;\n import java.time.Instant;\n import java.util.Map;\n import java.util.Set;\n@@ -16,11 +13,6 @@\n  */\n @Data\n @EqualsAndHashCode\n-@Schema(description = \"Metadata information\", extensions = {\n-    @Extension(name = \"x-validation\", properties = {\n-        @ExtensionProperty(name = \"not-blank-at-least-one\", value = \"name, generateName\")\n-    })}\n-)\n public class Metadata implements MetadataOperator {\n \n     /**\n\ndiff --git a/src/main/java/run/halo/app/extension/MetadataOperator.java b/src/main/java/run/halo/app/extension/MetadataOperator.java\n--- a/src/main/java/run/halo/app/extension/MetadataOperator.java\n+++ b/src/main/java/run/halo/app/extension/MetadataOperator.java\n@@ -17,7 +17,7 @@\n @Schema(implementation = Metadata.class)\n public interface MetadataOperator {\n \n-    @Schema(name = \"name\", description = \"Metadata name\")\n+    @Schema(name = \"name\", description = \"Metadata name\", required = true)\n     @JsonProperty(\"name\")\n     String getName();\n \n\ndiff --git a/src/main/java/run/halo/app/infra/utils/YamlUnstructuredLoader.java b/src/main/java/run/halo/app/infra/utils/YamlUnstructuredLoader.java\n--- a/src/main/java/run/halo/app/infra/utils/YamlUnstructuredLoader.java\n+++ b/src/main/java/run/halo/app/infra/utils/YamlUnstructuredLoader.java\n@@ -27,7 +27,8 @@ public class YamlUnstructuredLoader extends YamlProcessor {\n     private static final DocumentMatcher DEFAULT_UNSTRUCTURED_MATCHER = properties -> {\n         if (properties.containsKey(\"apiVersion\")\n             && properties.containsKey(\"kind\")\n-            && properties.containsKey(\"metadata.name\")) {\n+            && (properties.containsKey(\"metadata.name\")\n+            || properties.containsKey(\"metadata.generateName\"))) {\n             return YamlProcessor.MatchStatus.FOUND;\n         }\n         return MatchStatus.NOT_FOUND;\n\ndiff --git a/src/test/java/run/halo/app/extension/JsonExtensionConverterTest.java b/src/test/java/run/halo/app/extension/JsonExtensionConverterTest.java\n--- a/src/test/java/run/halo/app/extension/JsonExtensionConverterTest.java\n+++ b/src/test/java/run/halo/app/extension/JsonExtensionConverterTest.java\n@@ -2,7 +2,6 @@\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertThrows;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.ObjectMapper;\n@@ -85,8 +84,8 @@ void shouldThrowSchemaViolationExceptionWhenNameNotSet() {\n         var error = assertThrows(SchemaViolationException.class, () -> converter.convertTo(fake));\n         assertEquals(1, error.getErrors().size());\n         var result = error.getErrors().items().get(0);\n-        // error.getErrors().items().get(0).message();\n-        assertTrue(result.toString().contains(\"name, generateName\"));\n+        assertEquals(1026, result.code());\n+        assertEquals(\"Field 'name' is required.\", result.message());\n     }\n \n     FakeExtension createFakeExtension(String name, Long version) {",
    "output": "Make field metadata.name of extension required (#2608)\n\n#### What type of PR is this?\r\n\r\n/kind improvement\r\n/area core\r\n\r\n#### What this PR does / why we need it:\r\n\r\nRemove custom schema validation and make field metadata.name of extension required. So that the API client generated by `openapi-gen` will be more consistent than before.\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/WebFluxConfig.java b/src/main/java/run/halo/app/config/WebFluxConfig.java\n--- a/src/main/java/run/halo/app/config/WebFluxConfig.java\n+++ b/src/main/java/run/halo/app/config/WebFluxConfig.java\n@@ -8,6 +8,7 @@\n import java.net.URI;\n import java.time.Instant;\n import java.util.List;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n@@ -28,6 +29,7 @@\n import org.springframework.web.reactive.result.view.ViewResolutionResultHandler;\n import org.springframework.web.reactive.result.view.ViewResolver;\n import reactor.core.publisher.Mono;\n+import run.halo.app.console.ConsoleProxyFilter;\n import run.halo.app.core.extension.endpoint.CustomEndpoint;\n import run.halo.app.core.extension.endpoint.CustomEndpointsBuilder;\n import run.halo.app.infra.properties.HaloProperties;\n@@ -123,4 +125,10 @@ public void addResourceHandlers(ResourceHandlerRegistry registry) {\n             .addResolver(new PathResourceResolver());\n     }\n \n+\n+    @ConditionalOnProperty(name = \"halo.console.proxy.enabled\", havingValue = \"true\")\n+    @Bean\n+    ConsoleProxyFilter consoleProxyFilter() {\n+        return new ConsoleProxyFilter(haloProp);\n+    }\n }\n\ndiff --git a/src/main/java/run/halo/app/console/ConsoleProxyFilter.java b/src/main/java/run/halo/app/console/ConsoleProxyFilter.java\n--- a/src/main/java/run/halo/app/console/ConsoleProxyFilter.java\n+++ b/src/main/java/run/halo/app/console/ConsoleProxyFilter.java\n@@ -0,0 +1,72 @@\n+package run.halo.app.console;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.MediaType;\n+import org.springframework.security.web.server.util.matcher.AndServerWebExchangeMatcher;\n+import org.springframework.security.web.server.util.matcher.MediaTypeServerWebExchangeMatcher;\n+import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatcher;\n+import org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers;\n+import org.springframework.web.reactive.function.BodyExtractors;\n+import org.springframework.web.reactive.function.client.WebClient;\n+import org.springframework.web.server.ServerWebExchange;\n+import org.springframework.web.server.WebFilter;\n+import org.springframework.web.server.WebFilterChain;\n+import org.springframework.web.util.UriComponentsBuilder;\n+import reactor.core.publisher.Mono;\n+import run.halo.app.infra.properties.ConsoleProperties.ProxyProperties;\n+import run.halo.app.infra.properties.HaloProperties;\n+\n+@Slf4j\n+public class ConsoleProxyFilter implements WebFilter {\n+\n+    private final ProxyProperties proxyProperties;\n+\n+    private final ServerWebExchangeMatcher consoleMatcher;\n+\n+    private final WebClient webClient;\n+\n+    public ConsoleProxyFilter(HaloProperties haloProperties) {\n+        this.proxyProperties = haloProperties.getConsole().getProxy();\n+        var consoleMatcher = ServerWebExchangeMatchers.pathMatchers(HttpMethod.GET, \"/console/**\");\n+        consoleMatcher = new AndServerWebExchangeMatcher(consoleMatcher,\n+            new MediaTypeServerWebExchangeMatcher(MediaType.TEXT_HTML));\n+        this.consoleMatcher = consoleMatcher;\n+        this.webClient = WebClient.create(proxyProperties.getEndpoint().toString());\n+        log.info(\"Initialized ConsoleProxyFilter to proxy console\");\n+    }\n+\n+    @Override\n+    public Mono<Void> filter(ServerWebExchange exchange, WebFilterChain chain) {\n+        return consoleMatcher.matches(exchange)\n+            .filter(ServerWebExchangeMatcher.MatchResult::isMatch)\n+            .switchIfEmpty(chain.filter(exchange).then(Mono.empty()))\n+            .map(matchResult -> {\n+                var request = exchange.getRequest();\n+                return UriComponentsBuilder.fromUriString(\n+                        request.getPath().pathWithinApplication().value())\n+                    .queryParams(request.getQueryParams())\n+                    .build()\n+                    .toUriString();\n+            })\n+            .doOnNext(uri -> {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Proxy {} to {}\", uri, proxyProperties.getEndpoint());\n+                }\n+            })\n+            .flatMap(uri -> webClient.get()\n+                .uri(uri)\n+                .headers(httpHeaders -> httpHeaders.addAll(exchange.getRequest().getHeaders()))\n+                .exchangeToMono(clientResponse -> {\n+                    var response = exchange.getResponse();\n+                    // set headers\n+                    response.getHeaders().putAll(clientResponse.headers().asHttpHeaders());\n+                    // set cookies\n+                    response.getCookies().putAll(clientResponse.cookies());\n+                    // set status code\n+                    response.setStatusCode(clientResponse.statusCode());\n+                    var body = clientResponse.body(BodyExtractors.toDataBuffers());\n+                    return exchange.getResponse().writeAndFlushWith(Mono.just(body));\n+                }));\n+    }\n+}\n\ndiff --git a/src/main/java/run/halo/app/infra/properties/ConsoleProperties.java b/src/main/java/run/halo/app/infra/properties/ConsoleProperties.java\n--- a/src/main/java/run/halo/app/infra/properties/ConsoleProperties.java\n+++ b/src/main/java/run/halo/app/infra/properties/ConsoleProperties.java\n@@ -1,10 +1,28 @@\n package run.halo.app.infra.properties;\n \n+import jakarta.validation.Valid;\n+import java.net.URI;\n import lombok.Data;\n \n @Data\n public class ConsoleProperties {\n \n     private String location = \"classpath:/console/\";\n \n+    @Valid\n+    private ProxyProperties proxy = new ProxyProperties();\n+\n+    @Data\n+    public static class ProxyProperties {\n+\n+        /**\n+         * Console endpoint in development environment to be proxied. e.g.: http://localhost:8090/\n+         */\n+        private URI endpoint;\n+\n+        /**\n+         * Indicates if the proxy behaviour is enabled. Default is false\n+         */\n+        private boolean enabled = false;\n+    }\n }",
    "output": "Support proxying console in server side (#2535)\n\n#### What type of PR is this?\r\n\r\n/kind feature\r\n/area core\r\n/milestone 2.0\r\n\r\n#### What this PR does / why we need it:\r\n\r\nSupport proxying console in server side. We just need to configure the properties as following:\r\n\r\n```yaml\r\nhalo:\r\n  console:\r\n    proxy:\r\n      endpoint: http://localhost:3000/\r\n      enabled: true\r\n```\r\n\r\nBefore starting Halo server, please start the console first at port 3000 by checkouting https://github.com/halo-dev/console/pull/638.\r\n\r\nNow we can have a try to access console via <http://localhost:8090/console/>.\r\n\r\nPlease note that this feature should be only for development environment instead of production environment.\r\n\r\n#### Todos\r\n\r\n- [ ] Proxy WebSocket for hmr of Vite\r\n\r\n#### Which issue(s) this PR fixes:\r\n\r\nFixes https://github.com/halo-dev/halo/issues/2530\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/core/extension/service/UserServiceImpl.java b/src/main/java/run/halo/app/core/extension/service/UserServiceImpl.java\n--- a/src/main/java/run/halo/app/core/extension/service/UserServiceImpl.java\n+++ b/src/main/java/run/halo/app/core/extension/service/UserServiceImpl.java\n@@ -5,6 +5,7 @@\n import java.util.Objects;\n import org.springframework.security.crypto.password.PasswordEncoder;\n import org.springframework.stereotype.Service;\n+import org.springframework.util.StringUtils;\n import reactor.core.publisher.Flux;\n import reactor.core.publisher.Mono;\n import run.halo.app.core.extension.Role;\n@@ -42,7 +43,14 @@ public Mono<User> updatePassword(String username, String newPassword) {\n     @Override\n     public Mono<User> updateWithRawPassword(String username, String rawPassword) {\n         return getUser(username)\n-            .filter(user -> !passwordEncoder.matches(rawPassword, user.getSpec().getPassword()))\n+            .filter(user -> {\n+                if (!StringUtils.hasText(user.getSpec().getPassword())) {\n+                    // Check if the old password is set before, or the passwordEncoder#matches\n+                    // will complain an error due to null password.\n+                    return true;\n+                }\n+                return !passwordEncoder.matches(rawPassword, user.getSpec().getPassword());\n+            })\n             .flatMap(user -> {\n                 user.getSpec().setPassword(passwordEncoder.encode(rawPassword));\n                 return client.update(user);\n\ndiff --git a/src/test/java/run/halo/app/core/extension/service/UserServiceImplTest.java b/src/test/java/run/halo/app/core/extension/service/UserServiceImplTest.java\n--- a/src/test/java/run/halo/app/core/extension/service/UserServiceImplTest.java\n+++ b/src/test/java/run/halo/app/core/extension/service/UserServiceImplTest.java\n@@ -229,19 +229,18 @@ void shouldUpdatePasswordWithDifferentPassword() {\n \n         @Test\n         void shouldUpdatePasswordIfNoPasswordBefore() {\n-            var oldUser = createUser(\"\");\n+            var oldUser = createUser(null);\n             var newUser = createUser(\"new-password\");\n \n             when(client.get(User.class, \"fake-user\")).thenReturn(Mono.just(oldUser));\n             when(client.update(oldUser)).thenReturn(Mono.just(newUser));\n-            when(passwordEncoder.matches(\"new-password\", \"\")).thenReturn(false);\n             when(passwordEncoder.encode(\"new-password\")).thenReturn(\"encoded-new-password\");\n \n             StepVerifier.create(userService.updateWithRawPassword(\"fake-user\", \"new-password\"))\n                 .expectNext(newUser)\n                 .verifyComplete();\n \n-            verify(passwordEncoder).matches(\"new-password\", \"\");\n+            verify(passwordEncoder, never()).matches(\"new-password\", null);\n             verify(passwordEncoder).encode(\"new-password\");\n             verify(client).update(argThat(extension -> {\n                 var user = (User) extension;",
    "output": "Fix the problem of changing password not exist before (#2493)\n\n#### What type of PR is this?\r\n\r\n/kind bug\r\n/area core\r\n/milestone 2.0\r\n\r\n#### What this PR does / why we need it:\r\n\r\nFix the problem of changing password not exist before.\r\n\r\n#### Which issue(s) this PR fixes:\r\n\r\nPartial Fixes https://github.com/halo-dev/halo/issues/2427\r\n\r\n#### Special notes for your reviewer:\r\n\r\nSteps to test:\r\n\r\n1. Create an user and change his/her password\r\n2. Login with the user and the password\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/content/impl/SinglePageServiceImpl.java b/src/main/java/run/halo/app/content/impl/SinglePageServiceImpl.java\n--- a/src/main/java/run/halo/app/content/impl/SinglePageServiceImpl.java\n+++ b/src/main/java/run/halo/app/content/impl/SinglePageServiceImpl.java\n@@ -140,32 +140,38 @@ Predicate<SinglePage> pageListPredicate(SinglePageQuery query) {\n \n     private Mono<ListedSinglePage> getListedSinglePage(SinglePage singlePage) {\n         Assert.notNull(singlePage, \"The singlePage must not be null.\");\n-        ListedSinglePage listedSinglePage = new ListedSinglePage();\n-        listedSinglePage.setPage(singlePage);\n-        return Mono.just(listedSinglePage)\n-            .flatMap(page -> listContributors(singlePage.getStatusOrDefault().getContributors())\n-                .map(contributors -> {\n-                    page.setContributors(contributors);\n-                    return page;\n-                }));\n+        return Mono.just(singlePage)\n+            .map(sp -> {\n+                ListedSinglePage listedSinglePage = new ListedSinglePage();\n+                listedSinglePage.setPage(singlePage);\n+                return listedSinglePage;\n+            })\n+            .flatMap(lsp ->\n+                setContributors(singlePage.getStatusOrDefault().getContributors(), lsp));\n     }\n \n-    private Mono<List<Contributor>> listContributors(List<String> usernames) {\n+    private Mono<ListedSinglePage> setContributors(List<String> usernames,\n+        ListedSinglePage singlePage) {\n+        return listContributors(usernames)\n+            .collectList()\n+            .doOnNext(singlePage::setContributors)\n+            .map(contributors -> singlePage)\n+            .defaultIfEmpty(singlePage);\n+    }\n+\n+    private Flux<Contributor> listContributors(List<String> usernames) {\n         if (usernames == null) {\n-            return Mono.empty();\n+            return Flux.empty();\n         }\n         return Flux.fromIterable(usernames)\n-            .map(username -> client.fetch(User.class, username)\n-                .map(user -> {\n-                    Contributor contributor = new Contributor();\n-                    contributor.setName(username);\n-                    contributor.setDisplayName(user.getSpec().getDisplayName());\n-                    contributor.setAvatar(user.getSpec().getAvatar());\n-                    return contributor;\n-                })\n-            )\n-            .flatMap(Function.identity())\n-            .collectList();\n+            .flatMap(username -> client.fetch(User.class, username))\n+            .map(user -> {\n+                Contributor contributor = new Contributor();\n+                contributor.setName(user.getMetadata().getName());\n+                contributor.setDisplayName(user.getSpec().getDisplayName());\n+                contributor.setAvatar(user.getSpec().getAvatar());\n+                return contributor;\n+            });\n     }\n \n     boolean contains(Collection<String> left, List<String> right) {\n\ndiff --git a/src/main/java/run/halo/app/core/extension/reconciler/SinglePageReconciler.java b/src/main/java/run/halo/app/core/extension/reconciler/SinglePageReconciler.java\n--- a/src/main/java/run/halo/app/core/extension/reconciler/SinglePageReconciler.java\n+++ b/src/main/java/run/halo/app/core/extension/reconciler/SinglePageReconciler.java\n@@ -172,7 +172,8 @@ private void reconcileStatus(String name) {\n \n             if (excerpt.getAutoGenerate()) {\n                 contentService.getContent(spec.getHeadSnapshot())\n-                    .subscribe(content -> {\n+                    .blockOptional()\n+                    .ifPresent(content -> {\n                         String contentRevised = content.content();\n                         status.setExcerpt(getExcerpt(contentRevised));\n                     });\n@@ -184,7 +185,7 @@ private void reconcileStatus(String name) {\n             String headSnapshot = singlePage.getSpec().getHeadSnapshot();\n             contentService.listSnapshots(Snapshot.SubjectRef.of(SinglePage.KIND, name))\n                 .collectList()\n-                .subscribe(snapshots -> {\n+                .blockOptional().ifPresent(snapshots -> {\n                     List<String> contributors = snapshots.stream()\n                         .map(snapshot -> {\n                             Set<String> usernames = snapshot.getSpec().getContributors();",
    "output": "Fix empty listing of single page (#2474)\n\n#### What type of PR is this?\r\n\r\n/kind bug\r\n/area core\r\n/milestone 2.0\r\n\r\n#### What this PR does / why we need it:\r\n\r\nFix empty listing of single page while using PostgreSQL.\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/content/impl/PostServiceImpl.java b/src/main/java/run/halo/app/content/impl/PostServiceImpl.java\n--- a/src/main/java/run/halo/app/content/impl/PostServiceImpl.java\n+++ b/src/main/java/run/halo/app/content/impl/PostServiceImpl.java\n@@ -128,59 +128,70 @@ boolean contains(Collection<String> left, List<String> right) {\n \n     private Mono<ListedPost> getListedPost(Post post) {\n         Assert.notNull(post, \"The post must not be null.\");\n-        ListedPost listedPost = new ListedPost();\n-        listedPost.setPost(post);\n-        return Mono.zip(listTags(post.getSpec().getTags()),\n-                listCategories(post.getSpec().getCategories()),\n-                listContributors(post.getStatusOrDefault().getContributors())\n-            )\n-            .map(tuple -> {\n-                List<Tag> tags = tuple.getT1();\n-                List<Category> categories = tuple.getT2();\n-                List<Contributor> contributors = tuple.getT3();\n-                listedPost.setTags(tags);\n-                listedPost.setCategories(categories);\n-                listedPost.setContributors(contributors);\n+        return Mono.just(post)\n+            .map(p -> {\n+                ListedPost listedPost = new ListedPost();\n+                listedPost.setPost(p);\n                 return listedPost;\n-            });\n+            })\n+            .flatMap(lp -> setTags(post.getSpec().getTags(), lp))\n+            .flatMap(lp -> setCategories(post.getSpec().getCategories(), lp))\n+            .flatMap(lp -> setContributors(post.getStatus().getContributors(), lp));\n     }\n \n-    private Mono<List<Tag>> listTags(List<String> tagNames) {\n+    private Mono<ListedPost> setTags(List<String> tagNames, ListedPost post) {\n+        return listTags(tagNames)\n+            .collectSortedList()\n+            .doOnNext(post::setTags)\n+            .map(tags -> post)\n+            .switchIfEmpty(Mono.defer(() -> Mono.just(post)));\n+    }\n+\n+    private Mono<ListedPost> setCategories(List<String> categoryNames, ListedPost post) {\n+        return listCategories(categoryNames)\n+            .collectSortedList()\n+            .doOnNext(post::setCategories)\n+            .map(categories -> post)\n+            .switchIfEmpty(Mono.defer(() -> Mono.just(post)));\n+    }\n+\n+    private Mono<ListedPost> setContributors(List<String> contributorNames, ListedPost post) {\n+        return listContributors(contributorNames)\n+            .collectSortedList()\n+            .doOnNext(post::setContributors)\n+            .map(contributors -> post)\n+            .switchIfEmpty(Mono.defer(() -> Mono.just(post)));\n+    }\n+\n+    private Flux<Tag> listTags(List<String> tagNames) {\n         if (tagNames == null) {\n-            return Mono.empty();\n+            return Flux.empty();\n         }\n-        return Flux.fromStream(tagNames.stream()\n-                .map(tagName -> client.fetch(Tag.class, tagName)))\n-            .flatMap(Function.identity())\n-            .collectList();\n+        return Flux.fromIterable(tagNames)\n+            .flatMap(tagName -> client.fetch(Tag.class, tagName));\n     }\n \n-    private Mono<List<Category>> listCategories(List<String> categoryNames) {\n+    private Flux<Category> listCategories(List<String> categoryNames) {\n         if (categoryNames == null) {\n-            return Mono.empty();\n+            return Flux.empty();\n         }\n-        return Flux.fromStream(categoryNames.stream()\n-                .map(categoryName -> client.fetch(Category.class, categoryName)))\n-            .flatMap(Function.identity())\n-            .collectList();\n+        return Flux.fromIterable(categoryNames)\n+            .flatMap(categoryName -> client.fetch(Category.class, categoryName));\n     }\n \n-    private Mono<List<Contributor>> listContributors(List<String> usernames) {\n+    private Flux<Contributor> listContributors(List<String> usernames) {\n         if (usernames == null) {\n-            return Mono.empty();\n+            return Flux.empty();\n         }\n         return Flux.fromIterable(usernames)\n-            .map(username -> client.fetch(User.class, username)\n-                .map(user -> {\n-                    Contributor contributor = new Contributor();\n-                    contributor.setName(username);\n-                    contributor.setDisplayName(user.getSpec().getDisplayName());\n-                    contributor.setAvatar(user.getSpec().getAvatar());\n-                    return contributor;\n-                })\n-            )\n-            .flatMap(Function.identity())\n-            .collectList();\n+            .flatMap(username -> client.fetch(User.class, username))\n+            .map(user -> {\n+                Contributor contributor = new Contributor();\n+                contributor.setName(user.getMetadata().getName());\n+                contributor.setDisplayName(user.getSpec().getDisplayName());\n+                contributor.setAvatar(user.getSpec().getAvatar());\n+                return contributor;\n+            });\n     }\n \n     @Override\n\ndiff --git a/src/main/java/run/halo/app/core/extension/reconciler/PostReconciler.java b/src/main/java/run/halo/app/core/extension/reconciler/PostReconciler.java\n--- a/src/main/java/run/halo/app/core/extension/reconciler/PostReconciler.java\n+++ b/src/main/java/run/halo/app/core/extension/reconciler/PostReconciler.java\n@@ -122,7 +122,8 @@ private void reconcileStatus(String name) {\n             String headSnapshot = post.getSpec().getHeadSnapshot();\n             contentService.listSnapshots(Snapshot.SubjectRef.of(Post.KIND, name))\n                 .collectList()\n-                .subscribe(snapshots -> {\n+                .blockOptional()\n+                .ifPresent(snapshots -> {\n                     List<String> contributors = snapshots.stream()\n                         .map(snapshot -> {\n                             Set<String> usernames = snapshot.getSpec().getContributors();\n@@ -143,6 +144,7 @@ private void reconcileStatus(String name) {\n                         .ifPresent(snapshot -> {\n                             status.setInProgress(!isPublished(snapshot));\n                         });\n+\n                 });\n \n             // handle cancel publish,has released version and published is false and not handled",
    "output": "Support running Halo with PostgreSQL (#2472)\n\n#### What type of PR is this?\r\n\r\n/kind feature\r\n/area core\r\n/milestone 2.0\r\n\r\n#### What this PR does / why we need it:\r\n\r\nAdd PostgreSQL script to support running Halo with PostgreSQL database. BTW, there was a weird issue (emty posts even if there are some posts created) while listing Post, and I fixed it in this PR.\r\n\r\n#### Which issue(s) this PR fixes:\r\n\r\nPartial Fixes https://github.com/halo-dev/halo/issues/2464\r\n\r\n#### Special notes for reviewers\r\n\r\nSteps to test:\r\n\r\n1. Start up PostgreSQL. e.g.:\r\n\r\n    ```yaml\r\n    version: '3.1'\r\n    \r\n    services:\r\n    \r\n      db:\r\n        image: postgres\r\n        restart: always\r\n        environment:\r\n          POSTGRES_PASSWORD: openpostgresql\r\n        ports:\r\n          - 5432:5432\r\n    \r\n      adminer:\r\n        image: adminer\r\n        restart: always\r\n        ports:\r\n          - 8080:8080\r\n    ```\r\n    \r\n    ```bash\r\n    docker-compose -f postgresql.yaml up\r\n    ```\r\n\r\n2. Start Halo with `postgresql` profile. e.g.:\r\n\r\n    ```bash\r\n    ./gradlew bootRun --args=\"--spring.profiles.active=postgresql\"\r\n    ```\r\n\r\n3. Validate the functionality of Halo\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/WebServerSecurityConfig.java b/src/main/java/run/halo/app/config/WebServerSecurityConfig.java\n--- a/src/main/java/run/halo/app/config/WebServerSecurityConfig.java\n+++ b/src/main/java/run/halo/app/config/WebServerSecurityConfig.java\n@@ -11,6 +11,7 @@\n import java.util.List;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n import org.springframework.core.Ordered;\n import org.springframework.core.annotation.Order;\n import org.springframework.http.HttpHeaders;\n@@ -48,6 +49,7 @@\n  *\n  * @author johnniang\n  */\n+@Configuration\n @EnableWebFluxSecurity\n public class WebServerSecurityConfig {\n ",
    "output": "Bump version of dependencies (#2466)\n\n#### What type of PR is this?\r\n\r\n/kind cleanup\r\n/area core\r\n/milestone 2.0\r\n\r\n#### What this PR does / why we need it:\r\n\r\nThis PR mainly upgrades version of dependencies and removes unused dependencies.\r\n\r\nSee the following references for more:\r\n\r\n- https://github.com/spring-projects/spring-boot/releases/tag/v3.0.0-M5\r\n- https://github.com/jhy/jsoup/releases/tag/jsoup-1.15.3\r\n- https://github.com/spring-projects/spring-security/issues/6613\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/core/extension/reconciler/attachment/AttachmentReconciler.java b/src/main/java/run/halo/app/core/extension/reconciler/attachment/AttachmentReconciler.java\n--- a/src/main/java/run/halo/app/core/extension/reconciler/attachment/AttachmentReconciler.java\n+++ b/src/main/java/run/halo/app/core/extension/reconciler/attachment/AttachmentReconciler.java\n@@ -1,9 +1,13 @@\n package run.halo.app.core.extension.reconciler.attachment;\n \n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n import java.util.HashSet;\n+import java.util.Objects;\n import java.util.Set;\n import lombok.extern.slf4j.Slf4j;\n import org.pf4j.PluginManager;\n+import org.springframework.web.util.UriUtils;\n import reactor.core.publisher.Flux;\n import reactor.core.publisher.Mono;\n import run.halo.app.core.extension.attachment.Attachment;\n@@ -63,10 +67,8 @@ public Result reconcile(Request request) {\n                 var localRelativePath = annotations.get(Constant.LOCAL_REL_PATH_ANNO_KEY);\n                 if (localRelativePath != null) {\n                     // TODO Add router function here.\n-                    permalink = externalUrl.get()\n-                        .resolve(\"/upload/\" + localRelativePath)\n-                        .normalize()\n-                        .toASCIIString();\n+                    var encodedPath = UriUtils.encodePath(\"/upload/\" + localRelativePath, UTF_8);\n+                    permalink = externalUrl.get().resolve(encodedPath).normalize().toString();\n                 } else {\n                     var externalLink = annotations.get(Constant.EXTERNAL_LINK_ANNO_KEY);\n                     if (externalLink != null) {\n@@ -79,19 +81,25 @@ public Result reconcile(Request request) {\n                     var status = attachment.getStatus();\n                     if (status == null) {\n                         status = new AttachmentStatus();\n+                        attachment.setStatus(status);\n                     }\n                     status.setPermalink(permalink);\n-\n-                    // update status\n-                    attachment.setStatus(status);\n-                    client.update(attachment);\n                 }\n             }\n+            updateStatus(request.name(), attachment.getStatus());\n         });\n-\n         return null;\n     }\n \n+    void updateStatus(String attachmentName, AttachmentStatus status) {\n+        client.fetch(Attachment.class, attachmentName)\n+            .filter(attachment -> !Objects.deepEquals(attachment.getStatus(), status))\n+            .ifPresent(attachment -> {\n+                attachment.setStatus(status);\n+                client.update(attachment);\n+            });\n+    }\n+\n     void removeFinalizer(String attachmentName) {\n         client.fetch(Attachment.class, attachmentName).ifPresent(attachment -> {\n             var finalizers = attachment.getMetadata().getFinalizers();\n\ndiff --git a/src/test/java/run/halo/app/core/extension/endpoint/AttachmentEndpointTest.java b/src/test/java/run/halo/app/core/extension/endpoint/AttachmentEndpointTest.java\n--- a/src/test/java/run/halo/app/core/extension/endpoint/AttachmentEndpointTest.java\n+++ b/src/test/java/run/halo/app/core/extension/endpoint/AttachmentEndpointTest.java\n@@ -1,5 +0,0 @@\n-package run.halo.app.core.extension.endpoint;\n-\n-class AttachmentEndpointTest {\n-\n-}\n\\ No newline at end of file",
    "output": "Fix the problem of generating permalink due to special filename (#2462)\n\n#### What type of PR is this?\r\n\r\n/kind bug\r\n/area core\r\n/milestone 2.0\r\n\r\n#### What this PR does / why we need it:\r\n\r\nEncode path of attachment permalink instead of using URI#resolve methods directly.\r\n\r\n#### Which issue(s) this PR fixes:\r\n\r\nFixes https://github.com/halo-dev/halo/issues/2408\r\n\r\n#### Special notes for reviewers\r\n\r\nSteps to test:\r\n\r\n1. Create a file with special name, e.g.: `hello world.txt`\r\n2. Upload the file and see the permalink\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/WebFluxConfig.java b/src/main/java/run/halo/app/config/WebFluxConfig.java\n--- a/src/main/java/run/halo/app/config/WebFluxConfig.java\n+++ b/src/main/java/run/halo/app/config/WebFluxConfig.java\n@@ -1,8 +1,12 @@\n package run.halo.app.config;\n \n import static org.springframework.util.ResourceUtils.FILE_URL_PREFIX;\n+import static org.springframework.web.reactive.function.server.RequestPredicates.GET;\n+import static org.springframework.web.reactive.function.server.RouterFunctions.route;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.net.URI;\n+import java.time.Instant;\n import java.util.List;\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.annotation.Bean;\n@@ -15,10 +19,15 @@\n import org.springframework.lang.NonNull;\n import org.springframework.web.reactive.config.ResourceHandlerRegistry;\n import org.springframework.web.reactive.config.WebFluxConfigurer;\n+import org.springframework.web.reactive.function.BodyInserters;\n import org.springframework.web.reactive.function.server.RouterFunction;\n+import org.springframework.web.reactive.function.server.ServerRequest;\n import org.springframework.web.reactive.function.server.ServerResponse;\n+import org.springframework.web.reactive.resource.EncodedResourceResolver;\n+import org.springframework.web.reactive.resource.PathResourceResolver;\n import org.springframework.web.reactive.result.view.ViewResolutionResultHandler;\n import org.springframework.web.reactive.result.view.ViewResolver;\n+import reactor.core.publisher.Mono;\n import run.halo.app.core.extension.endpoint.CustomEndpoint;\n import run.halo.app.core.extension.endpoint.CustomEndpointsBuilder;\n import run.halo.app.infra.properties.HaloProperties;\n@@ -30,9 +39,13 @@ public class WebFluxConfig implements WebFluxConfigurer {\n \n     private final HaloProperties haloProp;\n \n-    public WebFluxConfig(ObjectMapper objectMapper, HaloProperties haloProp) {\n+    private final ApplicationContext applicationContext;\n+\n+    public WebFluxConfig(ObjectMapper objectMapper, HaloProperties haloProp,\n+        ApplicationContext applicationContext) {\n         this.objectMapper = objectMapper;\n         this.haloProp = haloProp;\n+        this.applicationContext = applicationContext;\n     }\n \n     @Bean\n@@ -69,10 +82,45 @@ RouterFunction<ServerResponse> customEndpoints(ApplicationContext context) {\n         return builder.build();\n     }\n \n+    @Bean\n+    RouterFunction<ServerResponse> consoleIndexRedirection() {\n+        return route(GET(\"/console\")\n+                .or(GET(\"/console/index\"))\n+                .or(GET(\"/console/index.html\")),\n+            this::redirectConsole)\n+            .and(route(GET(\"/console/\"),\n+                this::serveConsoleIndex\n+            ));\n+    }\n+\n+    private Mono<ServerResponse> serveConsoleIndex(ServerRequest request) {\n+        var indexLocation = haloProp.getConsole().getLocation() + \"index.html\";\n+        var indexResource = applicationContext.getResource(indexLocation);\n+        try {\n+            return ServerResponse.ok()\n+                .lastModified(Instant.ofEpochMilli(indexResource.lastModified()))\n+                .body(BodyInserters.fromResource(indexResource));\n+        } catch (Throwable e) {\n+            return Mono.error(e);\n+        }\n+    }\n+\n+    private Mono<ServerResponse> redirectConsole(ServerRequest request) {\n+        return ServerResponse.permanentRedirect(URI.create(\"/console/\")).build();\n+    }\n+\n     @Override\n     public void addResourceHandlers(ResourceHandlerRegistry registry) {\n         var attachmentsRoot = haloProp.getWorkDir().resolve(\"attachments\");\n         registry.addResourceHandler(\"/upload/**\")\n             .addResourceLocations(FILE_URL_PREFIX + attachmentsRoot + \"/\");\n+\n+        // For console project\n+        registry.addResourceHandler(\"/console/**\")\n+            .addResourceLocations(haloProp.getConsole().getLocation())\n+            .resourceChain(true)\n+            .addResolver(new EncodedResourceResolver())\n+            .addResolver(new PathResourceResolver());\n     }\n+\n }\n\ndiff --git a/src/main/java/run/halo/app/infra/properties/ConsoleProperties.java b/src/main/java/run/halo/app/infra/properties/ConsoleProperties.java\n--- a/src/main/java/run/halo/app/infra/properties/ConsoleProperties.java\n+++ b/src/main/java/run/halo/app/infra/properties/ConsoleProperties.java\n@@ -0,0 +1,10 @@\n+package run.halo.app.infra.properties;\n+\n+import lombok.Data;\n+\n+@Data\n+public class ConsoleProperties {\n+\n+    private String location = \"classpath:/console/\";\n+\n+}\n\ndiff --git a/src/main/java/run/halo/app/infra/properties/HaloProperties.java b/src/main/java/run/halo/app/infra/properties/HaloProperties.java\n--- a/src/main/java/run/halo/app/infra/properties/HaloProperties.java\n+++ b/src/main/java/run/halo/app/infra/properties/HaloProperties.java\n@@ -39,4 +39,7 @@ public class HaloProperties {\n \n     @Valid\n     private final SecurityProperties security = new SecurityProperties();\n+\n+    @Valid\n+    private final ConsoleProperties console = new ConsoleProperties();\n }\n\ndiff --git a/src/test/java/run/halo/app/config/WebFluxConfigTest.java b/src/test/java/run/halo/app/config/WebFluxConfigTest.java\n--- a/src/test/java/run/halo/app/config/WebFluxConfigTest.java\n+++ b/src/test/java/run/halo/app/config/WebFluxConfigTest.java\n@@ -0,0 +1,41 @@\n+package run.halo.app.config;\n+\n+import java.util.List;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.web.reactive.server.WebTestClient;\n+\n+@SpringBootTest(properties = \"halo.console.location=classpath:/console/\")\n+@AutoConfigureWebTestClient\n+class WebFluxConfigTest {\n+\n+    @Autowired\n+    WebTestClient webClient;\n+\n+    @Nested\n+    class ConsoleRequest {\n+\n+        @Test\n+        void shouldRedirect() {\n+            List.of(\"/console\", \"/console/index\", \"/console/index.html\")\n+                .forEach(index -> {\n+                    webClient.get().uri(index)\n+                        .exchange()\n+                        .expectStatus().isPermanentRedirect()\n+                        .expectHeader().location(\"/console/\");\n+                });\n+        }\n+\n+        @Test\n+        void shouldRequestConsoleIndex() {\n+            webClient.get().uri(\"/console/\")\n+                .exchange()\n+                .expectStatus().isOk()\n+                .expectBody(String.class).isEqualTo(\"console index\\n\");\n+        }\n+    }\n+\n+}\n\\ No newline at end of file",
    "output": "Support configuring console location to access console (#2453)\n\n#### What type of PR is this?\r\n\r\n/kind feature\r\n/area core\r\n/milestone 2.0\r\n\r\n#### What this PR does / why we need it:\r\n\r\nSupport configuring console location to access console. By default, `classpath:/console/` location will be used. If anyone want to debug locally, you can configure the console properties as following:\r\n\r\n```yaml\r\nhalo:\r\n  console:\r\n    location: file:/home/xxx/path/to/halo-admin/dist/ # The trailing slash is required or it will be treated with a file instead of a folder.\r\n```\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/WebFluxConfig.java b/src/main/java/run/halo/app/config/WebFluxConfig.java\n--- a/src/main/java/run/halo/app/config/WebFluxConfig.java\n+++ b/src/main/java/run/halo/app/config/WebFluxConfig.java\n@@ -65,8 +65,7 @@ public void configureHttpMessageCodecs(ServerCodecConfigurer configurer) {\n     @Bean\n     RouterFunction<ServerResponse> customEndpoints(ApplicationContext context) {\n         var builder = new CustomEndpointsBuilder();\n-        context.getBeansOfType(CustomEndpoint.class).values()\n-            .forEach(customEndpoint -> builder.add(customEndpoint.endpoint()));\n+        context.getBeansOfType(CustomEndpoint.class).values().forEach(builder::add);\n         return builder.build();\n     }\n \n\ndiff --git a/src/main/java/run/halo/app/core/extension/endpoint/CustomEndpoint.java b/src/main/java/run/halo/app/core/extension/endpoint/CustomEndpoint.java\n--- a/src/main/java/run/halo/app/core/extension/endpoint/CustomEndpoint.java\n+++ b/src/main/java/run/halo/app/core/extension/endpoint/CustomEndpoint.java\n@@ -2,15 +2,19 @@\n \n import org.springframework.web.reactive.function.server.RouterFunction;\n import org.springframework.web.reactive.function.server.ServerResponse;\n+import run.halo.app.extension.GroupVersion;\n \n /**\n  * RouterFunction provider for custom endpoints.\n  *\n  * @author johnniang\n  */\n-@FunctionalInterface\n public interface CustomEndpoint {\n \n     RouterFunction<ServerResponse> endpoint();\n \n+    default GroupVersion groupVersion() {\n+        return GroupVersion.parseAPIVersion(\"api.console.halo.run/v1alpha1\");\n+    }\n+\n }\n\ndiff --git a/src/main/java/run/halo/app/core/extension/endpoint/CustomEndpointsBuilder.java b/src/main/java/run/halo/app/core/extension/endpoint/CustomEndpointsBuilder.java\n--- a/src/main/java/run/halo/app/core/extension/endpoint/CustomEndpointsBuilder.java\n+++ b/src/main/java/run/halo/app/core/extension/endpoint/CustomEndpointsBuilder.java\n@@ -1,33 +1,41 @@\n package run.halo.app.core.extension.endpoint;\n \n+import java.util.HashMap;\n import java.util.LinkedList;\n import java.util.List;\n+import java.util.Map;\n import org.springdoc.webflux.core.fn.SpringdocRouteBuilder;\n import org.springframework.web.reactive.function.server.RequestPredicates;\n import org.springframework.web.reactive.function.server.RouterFunction;\n import org.springframework.web.reactive.function.server.ServerResponse;\n+import run.halo.app.extension.GroupVersion;\n \n public class CustomEndpointsBuilder {\n \n-    private final List<RouterFunction<ServerResponse>> routerFunctions;\n+    private final Map<GroupVersion, List<RouterFunction<ServerResponse>>> routerFunctionsMap;\n \n     public CustomEndpointsBuilder() {\n-        routerFunctions = new LinkedList<>();\n+        routerFunctionsMap = new HashMap<>();\n     }\n \n-    public CustomEndpointsBuilder add(RouterFunction<ServerResponse> routerFunction) {\n-        routerFunctions.add(routerFunction);\n+    public CustomEndpointsBuilder add(CustomEndpoint customEndpoint) {\n+        routerFunctionsMap\n+            .computeIfAbsent(customEndpoint.groupVersion(), gv -> new LinkedList<>())\n+            .add(customEndpoint.endpoint());\n         return this;\n     }\n \n     public RouterFunction<ServerResponse> build() {\n-        return SpringdocRouteBuilder.route()\n-            .nest(RequestPredicates.path(\"/apis/api.console.halo.run/v1alpha1\"),\n+        SpringdocRouteBuilder routeBuilder = SpringdocRouteBuilder.route();\n+        routerFunctionsMap.forEach((gv, routerFunctions) -> {\n+            routeBuilder.nest(RequestPredicates.path(\"/apis/\" + gv),\n                 () -> routerFunctions.stream().reduce(RouterFunction::and).orElse(null),\n-                builder -> builder\n-                    .operationId(\"CustomEndpoints\")\n-                    .description(\"Custom endpoints\")\n-                    .tag(\"api.console.halo.run/v1alpha1/CustomEndpoint\"))\n-            .build();\n+                builder -> builder.operationId(\"CustomEndpoints\")\n+                    .description(\"Custom Endpoint\")\n+                    .tag(gv + \"/CustomEndpoint\")\n+            );\n+        });\n+        routerFunctionsMap.clear();\n+        return routeBuilder.build();\n     }\n }",
    "output": "Refactor CustomEndpoint for customizing GroupVersion (#2429)\n\n#### What type of PR is this?\r\n\r\n/kind improvement\r\n/area core\r\n/milestone 2.0.0\r\n\r\n#### What this PR does / why we need it:\r\n\r\nRefactor CustomEndpoint for customizing GroupVersion.\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/core/extension/endpoint/ThemeEndpoint.java b/src/main/java/run/halo/app/core/extension/endpoint/ThemeEndpoint.java\n--- a/src/main/java/run/halo/app/core/extension/endpoint/ThemeEndpoint.java\n+++ b/src/main/java/run/halo/app/core/extension/endpoint/ThemeEndpoint.java\n@@ -8,7 +8,6 @@\n import io.swagger.v3.oas.annotations.media.Schema;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.io.SequenceInputStream;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n@@ -17,13 +16,12 @@\n import java.util.function.Predicate;\n import java.util.zip.ZipEntry;\n import java.util.zip.ZipInputStream;\n+import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.lang3.StringUtils;\n import org.springdoc.core.fn.builders.schema.Builder;\n import org.springdoc.webflux.core.fn.SpringdocRouteBuilder;\n-import org.springframework.core.ParameterizedTypeReference;\n import org.springframework.core.io.FileSystemResource;\n import org.springframework.core.io.Resource;\n-import org.springframework.core.io.buffer.DataBuffer;\n import org.springframework.http.MediaType;\n import org.springframework.http.codec.multipart.FilePart;\n import org.springframework.http.codec.multipart.Part;\n@@ -33,19 +31,23 @@\n import org.springframework.util.CollectionUtils;\n import org.springframework.util.FileSystemUtils;\n import org.springframework.util.MultiValueMap;\n+import org.springframework.web.reactive.function.BodyExtractors;\n import org.springframework.web.reactive.function.server.RouterFunction;\n import org.springframework.web.reactive.function.server.ServerRequest;\n import org.springframework.web.reactive.function.server.ServerResponse;\n import org.springframework.web.server.ServerWebInputException;\n+import reactor.core.Exceptions;\n import reactor.core.publisher.Flux;\n import reactor.core.publisher.Mono;\n+import reactor.core.scheduler.Schedulers;\n import run.halo.app.core.extension.Setting;\n import run.halo.app.core.extension.Theme;\n import run.halo.app.extension.ConfigMap;\n import run.halo.app.extension.ReactiveExtensionClient;\n import run.halo.app.extension.Unstructured;\n import run.halo.app.infra.exception.ThemeInstallationException;\n import run.halo.app.infra.properties.HaloProperties;\n+import run.halo.app.infra.utils.DataBufferUtils;\n import run.halo.app.infra.utils.FileUtils;\n import run.halo.app.infra.utils.YamlUnstructuredLoader;\n \n@@ -55,6 +57,7 @@\n  * @author guqing\n  * @since 2.0.0\n  */\n+@Slf4j\n @Component\n public class ThemeEndpoint implements CustomEndpoint {\n \n@@ -92,13 +95,21 @@ public record InstallRequest(\n     }\n \n     Mono<ServerResponse> install(ServerRequest request) {\n-        return request.bodyToMono(new ParameterizedTypeReference<MultiValueMap<String, Part>>() {\n-            })\n+        return request.body(BodyExtractors.toMultipartData())\n             .flatMap(this::getZipFilePart)\n-            .flatMap(file -> file.content()\n-                .map(DataBuffer::asInputStream)\n-                .reduce(SequenceInputStream::new)\n-                .map(inputStream -> ThemeUtils.unzipThemeTo(inputStream, getThemeWorkDir())))\n+            .map(file -> {\n+                try {\n+                    var is = DataBufferUtils.toInputStream(file.content());\n+                    var themeWorkDir = getThemeWorkDir();\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Transferring {} into {}\", file.filename(), themeWorkDir);\n+                    }\n+                    return ThemeUtils.unzipThemeTo(is, themeWorkDir);\n+                } catch (IOException e) {\n+                    throw Exceptions.propagate(e);\n+                }\n+            })\n+            .subscribeOn(Schedulers.boundedElastic())\n             .flatMap(this::persistent)\n             .flatMap(theme -> ServerResponse.ok()\n                 .contentType(MediaType.APPLICATION_JSON)\n@@ -212,7 +223,6 @@ static Unstructured unzipThemeTo(InputStream inputStream, Path themeWorkDir,\n \n                 Path themeManifestPath = resolveThemeManifest(themeTempWorkDir);\n                 if (themeManifestPath == null) {\n-                    FileSystemUtils.deleteRecursively(tempDirectory);\n                     throw new IllegalArgumentException(\n                         \"It's an invalid zip format for the theme, manifest \"\n                             + \"file [theme.yaml] is required.\");\n\ndiff --git a/src/main/java/run/halo/app/infra/utils/DataBufferUtils.java b/src/main/java/run/halo/app/infra/utils/DataBufferUtils.java\n--- a/src/main/java/run/halo/app/infra/utils/DataBufferUtils.java\n+++ b/src/main/java/run/halo/app/infra/utils/DataBufferUtils.java\n@@ -0,0 +1,42 @@\n+package run.halo.app.infra.utils;\n+\n+import static org.springframework.core.io.buffer.DataBufferUtils.releaseConsumer;\n+import static org.springframework.core.io.buffer.DataBufferUtils.write;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.PipedInputStream;\n+import java.io.PipedOutputStream;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.core.io.buffer.DataBuffer;\n+import reactor.core.publisher.Flux;\n+import reactor.core.scheduler.Schedulers;\n+\n+@Slf4j\n+public final class DataBufferUtils {\n+\n+    private DataBufferUtils() {\n+    }\n+\n+    public static InputStream toInputStream(Flux<DataBuffer> content) throws IOException {\n+        var pos = new PipedOutputStream();\n+        var pis = new PipedInputStream(pos);\n+        write(content, pos)\n+            .doOnComplete(() -> {\n+                try {\n+                    pos.close();\n+                } catch (IOException ignored) {\n+                    // Ignore the error\n+                }\n+            })\n+            .subscribeOn(Schedulers.boundedElastic())\n+            .subscribe(releaseConsumer(), error -> {\n+                if (error instanceof IOException) {\n+                    // Ignore the error\n+                    return;\n+                }\n+                log.error(\"Failed to write DataBuffer into OutputStream\", error);\n+            });\n+        return pis;\n+    }\n+}\n\ndiff --git a/src/main/java/run/halo/app/infra/utils/FileUtils.java b/src/main/java/run/halo/app/infra/utils/FileUtils.java\n--- a/src/main/java/run/halo/app/infra/utils/FileUtils.java\n+++ b/src/main/java/run/halo/app/infra/utils/FileUtils.java\n@@ -41,10 +41,7 @@ public static void unzip(@NonNull ZipInputStream zis, @NonNull Path targetPath)\n             // Resolve the entry path\n             Path entryPath = targetPath.resolve(zipEntry.getName());\n \n-            // Check directory\n-            if (targetPath.normalize().startsWith(entryPath)) {\n-                throw new IllegalArgumentException(\"Cannot unzip to a subdirectory of itself\");\n-            }\n+            checkDirectoryTraversal(targetPath, entryPath);\n \n             if (Files.notExists(entryPath.getParent())) {\n                 Files.createDirectories(entryPath.getParent());\n\ndiff --git a/src/main/java/run/halo/app/infra/utils/HaloUtils.java b/src/main/java/run/halo/app/infra/utils/HaloUtils.java\n--- a/src/main/java/run/halo/app/infra/utils/HaloUtils.java\n+++ b/src/main/java/run/halo/app/infra/utils/HaloUtils.java\n@@ -3,13 +3,15 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.nio.charset.StandardCharsets;\n+import lombok.extern.slf4j.Slf4j;\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.util.StreamUtils;\n \n /**\n  * @author guqing\n  * @date 2022-04-12\n  */\n+@Slf4j\n public class HaloUtils {\n \n     /**\n@@ -28,4 +30,5 @@ public static String readClassPathResourceAsString(String location) {\n                     location), e);\n         }\n     }\n+\n }",
    "output": "Fix stackoverflow error when installing big theme (#2399)\n\n#### What type of PR is this?\r\n\r\n/kind bug\r\n/area core\r\n/milestone 2.0\r\n\r\n#### What this PR does / why we need it:\r\n\r\nWe will encounter a stackoverflow error when installing theme with large size. Please see the following screenshot:\r\n\r\n![a8a3fadd7b06a071e80d4dd1899a244](https://user-images.githubusercontent.com/16865714/189171274-1940634e-a984-4ca6-857f-f8232f6a6ad3.jpg)\r\n\r\n#### Special notes for your reviewer:\r\n\r\nHow to test?\r\n\r\n1. Create a big theme installation package\r\n2. Install it and see the result\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/extension/ListResult.java b/src/main/java/run/halo/app/extension/ListResult.java\n--- a/src/main/java/run/halo/app/extension/ListResult.java\n+++ b/src/main/java/run/halo/app/extension/ListResult.java\n@@ -7,6 +7,8 @@\n import java.util.Iterator;\n import java.util.List;\n import lombok.Data;\n+import net.bytebuddy.ByteBuddy;\n+import net.bytebuddy.description.type.TypeDescription;\n import org.springframework.data.util.Streamable;\n import org.springframework.util.Assert;\n \n@@ -84,4 +86,23 @@ public Iterator<T> iterator() {\n     public boolean isEmpty() {\n         return Streamable.super.isEmpty();\n     }\n+\n+    /**\n+     * Generate generic ListResult class. Like {@code ListResult<User>}, {@code ListResult<Post>},\n+     * etc.\n+     *\n+     * @param scheme scheme of the generic type.\n+     * @return generic ListResult class.\n+     */\n+    public static Class<?> generateGenericClass(Scheme scheme) {\n+        var generic =\n+            TypeDescription.Generic.Builder.parameterizedType(ListResult.class, scheme.type())\n+                .build();\n+        return new ByteBuddy()\n+            .subclass(generic)\n+            .name(scheme.groupVersionKind().kind() + \"List\")\n+            .make()\n+            .load(ListResult.class.getClassLoader())\n+            .getLoaded();\n+    }\n }\n\ndiff --git a/src/main/java/run/halo/app/extension/router/ExtensionRouterFunctionFactory.java b/src/main/java/run/halo/app/extension/router/ExtensionRouterFunctionFactory.java\n--- a/src/main/java/run/halo/app/extension/router/ExtensionRouterFunctionFactory.java\n+++ b/src/main/java/run/halo/app/extension/router/ExtensionRouterFunctionFactory.java\n@@ -5,8 +5,6 @@\n import static org.springdoc.core.fn.builders.requestbody.Builder.requestBodyBuilder;\n \n import io.swagger.v3.oas.annotations.enums.ParameterIn;\n-import net.bytebuddy.ByteBuddy;\n-import net.bytebuddy.description.type.TypeDescription;\n import org.springdoc.webflux.core.fn.SpringdocRouteBuilder;\n import org.springframework.lang.NonNull;\n import org.springframework.web.reactive.function.server.HandlerFunction;\n@@ -55,7 +53,7 @@ public RouterFunction<ServerResponse> create() {\n                         .tag(tagName)\n                         .response(responseBuilder().responseCode(\"200\")\n                             .description(\"Response \" + scheme.plural())\n-                            .implementation(generateListResultClass()));\n+                            .implementation(ListResult.generateGenericClass(scheme)));\n                     QueryParamBuildUtil.buildParametersFromType(builder, ListRequest.class);\n                 })\n             .POST(createHandler.pathPattern(), createHandler,\n@@ -130,15 +128,4 @@ interface DeleteHandler extends HandlerFunction<ServerResponse>, PathPatternGene\n \n     }\n \n-    private Class<?> generateListResultClass() {\n-        var generic =\n-            TypeDescription.Generic.Builder.parameterizedType(ListResult.class, scheme.type())\n-                .build();\n-        return new ByteBuddy()\n-            .subclass(generic)\n-            .name(scheme.groupVersionKind().kind() + \"List\")\n-            .make()\n-            .load(this.getClass().getClassLoader())\n-            .getLoaded();\n-    }\n }\n\ndiff --git a/src/test/java/run/halo/app/extension/ListResultTest.java b/src/test/java/run/halo/app/extension/ListResultTest.java\n--- a/src/test/java/run/halo/app/extension/ListResultTest.java\n+++ b/src/test/java/run/halo/app/extension/ListResultTest.java\n@@ -0,0 +1,22 @@\n+package run.halo.app.extension;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.lang.reflect.ParameterizedType;\n+import org.junit.jupiter.api.Test;\n+\n+class ListResultTest {\n+\n+    @Test\n+    void generateGenericClass() {\n+        var fakeListClass =\n+            ListResult.generateGenericClass(Scheme.buildFromType(FakeExtension.class));\n+        assertTrue(ListResult.class.isAssignableFrom(fakeListClass));\n+        assertSame(FakeExtension.class, ((ParameterizedType) fakeListClass.getGenericSuperclass())\n+            .getActualTypeArguments()[0]);\n+        assertEquals(\"FakeList\", fakeListClass.getSimpleName());\n+    }\n+\n+}\n\\ No newline at end of file",
    "output": "Extract generateListResultClass into ListResult (#2333)\n\n#### What type of PR is this?\r\n\r\n/kind improvement\r\n/area core\r\n/milestone 2.0\r\n/release-note-none\r\n\r\n#### What this PR does / why we need it:\r\n\r\nExtract generateListResultClass into ListResult to make it easy to use in other places."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/extension/router/selector/FieldCriteriaPredicateConverter.java b/src/main/java/run/halo/app/extension/router/selector/FieldCriteriaPredicateConverter.java\n--- a/src/main/java/run/halo/app/extension/router/selector/FieldCriteriaPredicateConverter.java\n+++ b/src/main/java/run/halo/app/extension/router/selector/FieldCriteriaPredicateConverter.java\n@@ -19,7 +19,7 @@ public Predicate<E> convert(SelectorCriteria criteria) {\n                     return false;\n                 }\n                 switch (criteria.operator()) {\n-                    case Equals -> {\n+                    case Equals, IN -> {\n                         return criteria.values().contains(name);\n                     }\n                     case NotEquals -> {\n\ndiff --git a/src/main/java/run/halo/app/extension/router/selector/Operator.java b/src/main/java/run/halo/app/extension/router/selector/Operator.java\n--- a/src/main/java/run/halo/app/extension/router/selector/Operator.java\n+++ b/src/main/java/run/halo/app/extension/router/selector/Operator.java\n@@ -6,7 +6,7 @@\n \n public enum Operator implements Converter<String, SelectorCriteria> {\n \n-    Equals(\"=\", 2) {\n+    Equals(\"=\", 3) {\n         @Override\n         @Nullable\n         public SelectorCriteria convert(@Nullable String selector) {\n@@ -21,6 +21,23 @@ public SelectorCriteria convert(@Nullable String selector) {\n             return null;\n         }\n     },\n+    IN(\"=(\", 2) {\n+        @Override\n+        public SelectorCriteria convert(String selector) {\n+            if (preFlightCheck(selector, 5)) {\n+                var idx = selector.indexOf(getOperator());\n+                if (idx > 0 && (idx + getOperator().length()) < selector.length() - 2\n+                    && selector.charAt(selector.length() - 1) == ')') {\n+                    var key = selector.substring(0, idx);\n+                    var valuesString =\n+                        selector.substring(idx + getOperator().length(), selector.length() - 1);\n+                    String[] values = valuesString.split(\",\");\n+                    return new SelectorCriteria(key, this, Set.of(values));\n+                }\n+            }\n+            return null;\n+        }\n+    },\n     NotEquals(\"!=\", 1) {\n         @Override\n         @Nullable\n\ndiff --git a/src/test/java/run/halo/app/extension/router/selector/FieldCriteriaPredicateConverterTest.java b/src/test/java/run/halo/app/extension/router/selector/FieldCriteriaPredicateConverterTest.java\n--- a/src/test/java/run/halo/app/extension/router/selector/FieldCriteriaPredicateConverterTest.java\n+++ b/src/test/java/run/halo/app/extension/router/selector/FieldCriteriaPredicateConverterTest.java\n@@ -63,6 +63,27 @@ void shouldConvertNameNotEqualsCorrectly() {\n         assertFalse(predicate.test(fake));\n     }\n \n+    @Test\n+    void shouldConvertNameInCorrectly() {\n+        var criteria = new SelectorCriteria(\"name\", Operator.IN, Set.of(\"value1\", \"value2\"));\n+        var predicate = converter.convert(criteria);\n+        assertNotNull(predicate);\n+\n+        var fake = new FakeExtension();\n+        var metadata = new Metadata();\n+        fake.setMetadata(metadata);\n+        assertFalse(predicate.test(fake));\n+\n+        metadata.setName(\"not-contain-value\");\n+        assertFalse(predicate.test(fake));\n+\n+        metadata.setName(\"value1\");\n+        assertTrue(predicate.test(fake));\n+\n+        metadata.setName(\"value2\");\n+        assertTrue(predicate.test(fake));\n+    }\n+\n     @Test\n     void shouldReturnAlwaysFalseIfCriteriaKeyNotSupported() {\n         var criteria =\n\ndiff --git a/src/test/java/run/halo/app/extension/router/selector/OperatorTest.java b/src/test/java/run/halo/app/extension/router/selector/OperatorTest.java\n--- a/src/test/java/run/halo/app/extension/router/selector/OperatorTest.java\n+++ b/src/test/java/run/halo/app/extension/router/selector/OperatorTest.java\n@@ -3,6 +3,7 @@\n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static run.halo.app.extension.router.selector.Operator.Equals;\n import static run.halo.app.extension.router.selector.Operator.Exist;\n+import static run.halo.app.extension.router.selector.Operator.IN;\n import static run.halo.app.extension.router.selector.Operator.NotEquals;\n import static run.halo.app.extension.router.selector.Operator.NotExist;\n \n@@ -46,7 +47,13 @@ record TestCase(String source, Operator converter, SelectorCriteria expected) {\n             new TestCase(\"name\", Exist, new SelectorCriteria(\"name\", Exist, Set.of())),\n             new TestCase(\"\", Exist, null),\n             new TestCase(\"!\", Exist, new SelectorCriteria(\"!\", Exist, Set.of())),\n-            new TestCase(\"a\", Exist, new SelectorCriteria(\"a\", Exist, Set.of()))\n+            new TestCase(\"a\", Exist, new SelectorCriteria(\"a\", Exist, Set.of())),\n+\n+            new TestCase(\"name\", IN, null),\n+            new TestCase(\"name=(fake-name)\", IN,\n+                new SelectorCriteria(\"name\", IN, Set.of(\"fake-name\"))),\n+            new TestCase(\"name=(first-name,second-name)\", IN,\n+                new SelectorCriteria(\"name\", IN, Set.of(\"first-name\", \"second-name\")))\n         ).forEach(testCase -> {\n             log.debug(\"Testing: {}\", testCase);\n             assertEquals(testCase.expected(), testCase.converter().convert(testCase.source()));",
    "output": "Add IN operator for fieldSelector and labelSelector (#2290)\n\n#### What type of PR is this?\r\n\r\n/kind feature\r\n/kind api-change\r\n/area core\r\n/milestone 2.0\r\n/release-note-none\r\n\r\n#### What this PR does / why we need it:\r\n\r\n- Add `IN` operator for fieldSelector and labelSelector.\r\n- Adapt name field selector with `IN` operator.\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/SwaggerConfig.java b/src/main/java/run/halo/app/config/SwaggerConfig.java\n--- a/src/main/java/run/halo/app/config/SwaggerConfig.java\n+++ b/src/main/java/run/halo/app/config/SwaggerConfig.java\n@@ -30,17 +30,17 @@ OpenAPI customOpenAPI() {\n     @Bean\n     GroupedOpenApi extensionCoreApi() {\n         return GroupedOpenApi.builder()\n-            .group(\"CoreAPI\")\n-            .displayName(\"Core API\")\n+            .group(\"core-api\")\n+            .displayName(\"Core APIs\")\n             .pathsToMatch(\"/api/**\")\n             .build();\n     }\n \n     @Bean\n     GroupedOpenApi extensionApi() {\n         return GroupedOpenApi.builder()\n-            .group(\"ExtensionAPI\")\n-            .displayName(\"Extension API\")\n+            .group(\"extension-api\")\n+            .displayName(\"Extension APIs\")\n             .pathsToMatch(\"/apis/**\")\n             .pathsToExclude(\"/apis/api.halo.run/**\", \"/apis/plugin.api.halo.run/**\")\n             .build();\n@@ -49,19 +49,28 @@ GroupedOpenApi extensionApi() {\n     @Bean\n     GroupedOpenApi systemCustomApi() {\n         return GroupedOpenApi.builder()\n-            .group(\"SystemCustomAPI\")\n-            .displayName(\"System Custom API\")\n+            .group(\"core-custom-api\")\n+            .displayName(\"Custom APIs in Core\")\n             .pathsToMatch(\"/apis/api.halo.run/**\")\n             .build();\n     }\n \n     @Bean\n     GroupedOpenApi pluginCustomApi() {\n         return GroupedOpenApi.builder()\n-            .group(\"PluginCustomAPI\")\n-            .displayName(\"Plugin Custom API\")\n+            .group(\"plugin-custom-api\")\n+            .displayName(\"Custom APIs in Plugin\")\n             .pathsToMatch(\"/apis/plugin.api.halo.run/**\")\n             .build();\n     }\n \n+    @Bean\n+    GroupedOpenApi allApi() {\n+        return GroupedOpenApi.builder()\n+            .group(\"all-api\")\n+            .displayName(\"All APIs\")\n+            .pathsToMatch(\"/api/**\", \"/apis/**\")\n+            .build();\n+    }\n+\n }",
    "output": "Add all-api group for swagger (#2278)\n\n#### What type of PR is this?\r\n\r\n/kind improvement\r\n/area core\r\n/milestone 2.0\r\n\r\n#### What this PR does / why we need it:\r\n\r\nAdd all-api group for swagger. Related to https://github.com/halo-dev/halo/pull/2273.\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/infra/ExtensionResourceInitializer.java b/src/main/java/run/halo/app/infra/ExtensionResourceInitializer.java\n--- a/src/main/java/run/halo/app/infra/ExtensionResourceInitializer.java\n+++ b/src/main/java/run/halo/app/infra/ExtensionResourceInitializer.java\n@@ -1,21 +1,17 @@\n package run.halo.app.infra;\n \n import java.io.IOException;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-import java.util.stream.Stream;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.boot.context.event.ApplicationReadyEvent;\n import org.springframework.context.ApplicationListener;\n-import org.springframework.core.io.FileSystemResource;\n import org.springframework.core.io.Resource;\n+import org.springframework.core.io.support.PathMatchingResourcePatternResolver;\n import org.springframework.lang.NonNull;\n import org.springframework.stereotype.Component;\n import org.springframework.util.CollectionUtils;\n-import org.thymeleaf.util.StringUtils;\n import run.halo.app.extension.ExtensionClient;\n import run.halo.app.extension.Unstructured;\n import run.halo.app.infra.properties.HaloProperties;\n@@ -32,6 +28,9 @@\n @Slf4j\n @Component\n public class ExtensionResourceInitializer implements ApplicationListener<ApplicationReadyEvent> {\n+\n+    public static final Set<String> REQUIRED_EXTENSION_LOCATIONS =\n+        Set.of(\"classpath:/extensions/*.yaml\", \"classpath:/extensions/*.yml\");\n     private final HaloProperties haloProperties;\n     private final ExtensionClient extensionClient;\n \n@@ -43,40 +42,46 @@ public ExtensionResourceInitializer(HaloProperties haloProperties,\n \n     @Override\n     public void onApplicationEvent(@NonNull ApplicationReadyEvent event) {\n-        Set<String> extensionLocations = haloProperties.getInitialExtensionLocations();\n-        if (!CollectionUtils.isEmpty(extensionLocations)) {\n+        var locations = new HashSet<String>();\n+        if (!haloProperties.isRequiredExtensionDisabled()) {\n+            locations.addAll(REQUIRED_EXTENSION_LOCATIONS);\n+        }\n+        if (haloProperties.getInitialExtensionLocations() != null) {\n+            locations.addAll(haloProperties.getInitialExtensionLocations());\n+        }\n+\n+        if (CollectionUtils.isEmpty(locations)) {\n+            return;\n+        }\n \n-            Resource[] resources = extensionLocations.stream()\n-                .map(this::listYamlFiles)\n-                .flatMap(List::stream)\n-                .toArray(Resource[]::new);\n+        var resources = locations.stream()\n+            .map(this::listResources)\n+            .flatMap(List::stream)\n+            .distinct()\n+            .toArray(Resource[]::new);\n \n-            log.debug(\"Initialization loaded [{}] resources to establish.\", resources.length);\n+        log.info(\"Initializing [{}] extensions in locations: {}\", resources.length, locations);\n \n-            new YamlUnstructuredLoader(resources).load()\n-                .forEach(unstructured -> extensionClient.fetch(unstructured.groupVersionKind(),\n-                        unstructured.getMetadata().getName())\n-                    .ifPresentOrElse(persisted -> {\n-                        unstructured.getMetadata()\n-                            .setVersion(persisted.getMetadata().getVersion());\n-                        extensionClient.update(unstructured);\n-                    }, () -> extensionClient.create(unstructured)));\n-        }\n+        new YamlUnstructuredLoader(resources).load()\n+            .forEach(unstructured -> extensionClient.fetch(unstructured.groupVersionKind(),\n+                    unstructured.getMetadata().getName())\n+                .ifPresentOrElse(persisted -> {\n+                    unstructured.getMetadata()\n+                        .setVersion(persisted.getMetadata().getVersion());\n+                    // TODO Patch the unstructured instead of update it in the future\n+                    extensionClient.update(unstructured);\n+                }, () -> extensionClient.create(unstructured)));\n+\n+        log.info(\"Initialized [{}] extensions in locations: {}\", resources.length, locations);\n     }\n \n-    private List<FileSystemResource> listYamlFiles(String location) {\n-        try (Stream<Path> walk = Files.walk(Paths.get(location))) {\n-            return walk.filter(this::isYamlFile)\n-                .map(path -> new FileSystemResource(path.toFile()))\n-                .toList();\n-        } catch (IOException e) {\n-            throw new IllegalArgumentException(e);\n+    private List<Resource> listResources(String location) {\n+        var resolver = new PathMatchingResourcePatternResolver();\n+        try {\n+            return List.of(resolver.getResources(location));\n+        } catch (IOException ie) {\n+            throw new IllegalArgumentException(\"Invalid extension location: \" + location, ie);\n         }\n     }\n \n-    private boolean isYamlFile(Path pathname) {\n-        Path fileName = pathname.getFileName();\n-        return StringUtils.endsWith(fileName, \".yaml\")\n-            || StringUtils.endsWith(fileName, \".yml\");\n-    }\n }\n\ndiff --git a/src/main/java/run/halo/app/infra/properties/HaloProperties.java b/src/main/java/run/halo/app/infra/properties/HaloProperties.java\n--- a/src/main/java/run/halo/app/infra/properties/HaloProperties.java\n+++ b/src/main/java/run/halo/app/infra/properties/HaloProperties.java\n@@ -18,6 +18,13 @@ public class HaloProperties {\n \n     private Set<String> initialExtensionLocations = new HashSet<>();\n \n+    /**\n+     * This property could stop initializing required Extensions defined in classpath.\n+     * See {@link run.halo.app.infra.ExtensionResourceInitializer#REQUIRED_EXTENSION_LOCATIONS}\n+     * for more.\n+     */\n+    private boolean requiredExtensionDisabled;\n+\n     private final ExtensionProperties extension = new ExtensionProperties();\n \n     private final SecurityProperties security = new SecurityProperties();\n\ndiff --git a/src/test/java/run/halo/app/infra/ExtensionResourceInitializerTest.java b/src/test/java/run/halo/app/infra/ExtensionResourceInitializerTest.java\n--- a/src/test/java/run/halo/app/infra/ExtensionResourceInitializerTest.java\n+++ b/src/test/java/run/halo/app/infra/ExtensionResourceInitializerTest.java\n@@ -10,10 +10,12 @@\n import java.nio.charset.StandardCharsets;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.util.ArrayList;\n import java.util.List;\n import java.util.Optional;\n import java.util.Set;\n import org.json.JSONException;\n+import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n@@ -22,6 +24,7 @@\n import org.mockito.junit.jupiter.MockitoExtension;\n import org.skyscreamer.jsonassert.JSONAssert;\n import org.springframework.boot.context.event.ApplicationReadyEvent;\n+import org.springframework.util.FileSystemUtils;\n import run.halo.app.extension.ExtensionClient;\n import run.halo.app.extension.GroupVersionKind;\n import run.halo.app.extension.Unstructured;\n@@ -46,13 +49,19 @@ class ExtensionResourceInitializerTest {\n \n     private ExtensionResourceInitializer extensionResourceInitializer;\n \n+    List<Path> dirsToClean;\n+\n     @BeforeEach\n     void setUp() throws IOException {\n         extensionResourceInitializer =\n             new ExtensionResourceInitializer(haloProperties, extensionClient);\n \n+        dirsToClean = new ArrayList<>(2);\n+\n         Path tempDirectory = Files.createTempDirectory(\"extension-resource-initializer-test\");\n-        Path multiDirectory = Files.createDirectories(tempDirectory.resolve(\"a/b/c\"));\n+        dirsToClean.add(tempDirectory);\n+        Path multiDirectory =\n+            Files.createDirectories(tempDirectory.resolve(\"a\").resolve(\"b\").resolve(\"c\"));\n         Files.writeString(tempDirectory.resolve(\"hello.yml\"), \"\"\"\n                 kind: FakeExtension\n                 apiVersion: v1\n@@ -79,8 +88,9 @@ void setUp() throws IOException {\n             StandardCharsets.UTF_8);\n \n         // test file in directory\n-        Path filePath = Files.createTempDirectory(\"extension-resource-file-test\")\n-            .resolve(\"good.yml\");\n+        Path secondTempDir = Files.createTempDirectory(\"extension-resource-file-test\");\n+        dirsToClean.add(secondTempDir);\n+        Path filePath = secondTempDir.resolve(\"good.yml\");\n         Files.writeString(filePath, \"\"\"\n                 kind: FakeExtension\n                 apiVersion: v1\n@@ -92,11 +102,23 @@ void setUp() throws IOException {\n             StandardCharsets.UTF_8);\n \n         when(haloProperties.getInitialExtensionLocations())\n-            .thenReturn(Set.of(tempDirectory.toString(), filePath.toString()));\n+            .thenReturn(Set.of(\"file:\" + tempDirectory + \"/**/*.yaml\",\n+                \"file:\" + tempDirectory + \"/**/*.yml\",\n+                \"file:\" + filePath));\n+    }\n+\n+    @AfterEach\n+    void cleanUp() throws IOException {\n+        if (dirsToClean != null) {\n+            for (var dir : dirsToClean) {\n+                FileSystemUtils.deleteRecursively(dir);\n+            }\n+        }\n     }\n \n     @Test\n     void onApplicationEvent() throws JSONException {\n+        when(haloProperties.isRequiredExtensionDisabled()).thenReturn(true);\n         ArgumentCaptor<Unstructured> argumentCaptor = ArgumentCaptor.forClass(Unstructured.class);\n \n         when(extensionClient.fetch(any(GroupVersionKind.class), any()))",
    "output": "Initialize required extensions when system starts up (#2274)\n\n#### What type of PR is this?\r\n\r\n/kind improvement\r\n/area core\r\n/milestone 2.0\r\n\r\n#### What this PR does / why we need it:\r\n\r\nThis PR makes required extensions got initialized when system starts up. Of course, we can stop the initialization by setting property `halo.required-extension-disabled=true`.\r\n\r\nSecondly, we are using [PathMatchingResourcePatternResolver](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/core/io/support/PathMatchingResourcePatternResolver.html) support more functional Extension locations, please see the doc for more.\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/SwaggerConfig.java b/src/main/java/run/halo/app/config/SwaggerConfig.java\n--- a/src/main/java/run/halo/app/config/SwaggerConfig.java\n+++ b/src/main/java/run/halo/app/config/SwaggerConfig.java\n@@ -3,7 +3,9 @@\n import io.swagger.v3.oas.models.Components;\n import io.swagger.v3.oas.models.OpenAPI;\n import io.swagger.v3.oas.models.info.Info;\n+import io.swagger.v3.oas.models.security.SecurityRequirement;\n import io.swagger.v3.oas.models.security.SecurityScheme;\n+import org.springdoc.core.models.GroupedOpenApi;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n@@ -13,14 +15,53 @@ public class SwaggerConfig {\n     @Bean\n     OpenAPI customOpenAPI() {\n         return new OpenAPI()\n+            // See https://swagger.io/docs/specification/authentication/ for more.\n             .components(new Components()\n-                    .addSecuritySchemes(\"basicScheme\", new SecurityScheme()\n-                        .type(SecurityScheme.Type.HTTP).scheme(\"basic\"))\n-                .addSecuritySchemes(\"bearerAuth\", new SecurityScheme()\n+                .addSecuritySchemes(\"BasicAuth\", new SecurityScheme()\n+                    .type(SecurityScheme.Type.HTTP).scheme(\"basic\"))\n+                .addSecuritySchemes(\"BearerAuth\", new SecurityScheme()\n                     .type(SecurityScheme.Type.HTTP).scheme(\"bearer\").bearerFormat(\"JWT\"))\n             )\n+            .addSecurityItem(new SecurityRequirement().addList(\"BasicAuth\").addList(\"BearerAuth\"))\n             .info(new Info().title(\"Halo Next API\")\n                 .version(\"2.0.0\"));\n     }\n \n+    @Bean\n+    GroupedOpenApi extensionCoreApi() {\n+        return GroupedOpenApi.builder()\n+            .group(\"CoreAPI\")\n+            .displayName(\"Core API\")\n+            .pathsToMatch(\"/api/**\")\n+            .build();\n+    }\n+\n+    @Bean\n+    GroupedOpenApi extensionApi() {\n+        return GroupedOpenApi.builder()\n+            .group(\"ExtensionAPI\")\n+            .displayName(\"Extension API\")\n+            .pathsToMatch(\"/apis/**\")\n+            .pathsToExclude(\"/apis/api.halo.run/**\", \"/apis/plugin.api.halo.run/**\")\n+            .build();\n+    }\n+\n+    @Bean\n+    GroupedOpenApi systemCustomApi() {\n+        return GroupedOpenApi.builder()\n+            .group(\"SystemCustomAPI\")\n+            .displayName(\"System Custom API\")\n+            .pathsToMatch(\"/apis/api.halo.run/**\")\n+            .build();\n+    }\n+\n+    @Bean\n+    GroupedOpenApi pluginCustomApi() {\n+        return GroupedOpenApi.builder()\n+            .group(\"PluginCustomAPI\")\n+            .displayName(\"Plugin Custom API\")\n+            .pathsToMatch(\"/apis/plugin.api.halo.run/**\")\n+            .build();\n+    }\n+\n }\n\ndiff --git a/src/main/java/run/halo/app/config/WebServerSecurityConfig.java b/src/main/java/run/halo/app/config/WebServerSecurityConfig.java\n--- a/src/main/java/run/halo/app/config/WebServerSecurityConfig.java\n+++ b/src/main/java/run/halo/app/config/WebServerSecurityConfig.java\n@@ -69,6 +69,7 @@ SecurityWebFilterChain apiFilterChain(ServerHttpSecurity http,\n             .securityMatcher(pathMatchers(\"/api/**\", \"/apis/**\"))\n             .authorizeExchange(exchanges ->\n                 exchanges.anyExchange().access(new RequestInfoAuthorizationManager(roleService)))\n+            .httpBasic(withDefaults())\n             // for reuse the JWT authentication\n             .oauth2ResourceServer().jwt();\n \n@@ -82,15 +83,15 @@ SecurityWebFilterChain apiFilterChain(ServerHttpSecurity http,\n             context);\n \n         http.addFilterAt(loginFilter, SecurityWebFiltersOrder.FORM_LOGIN);\n-\n         return http.build();\n     }\n \n     @Bean\n     @Order(0)\n     SecurityWebFilterChain webFilterChain(ServerHttpSecurity http) {\n         http.authorizeExchange(exchanges -> exchanges.pathMatchers(\n-                \"/actuator/**\"\n+                \"/actuator/**\",\n+                \"/swagger-ui.html\", \"/webjars/**\", \"/v3/api-docs/**\"\n             ).permitAll())\n             .cors(corsSpec -> corsSpec.configurationSource(apiCorsConfigurationSource()))\n             .authorizeExchange(exchanges -> exchanges.anyExchange().authenticated())",
    "output": "Refine Swagger API with group (#2273)\n\n#### What type of PR is this?\r\n\r\n/kind feature\r\n/area core\r\n/milestone 2.0\r\n\r\n#### What this PR does / why we need it:\r\n\r\n1. Add grouped OpenAPI\r\n\r\n    <img width=\"505\" alt=\"image\" src=\"https://user-images.githubusercontent.com/16865714/180638783-acd5f437-b5d0-4701-9ebb-3221540f167c.png\">\r\n\r\n3. Enable basic authentication on API endpoints.\r\n\r\n    ```bash\r\n    curl -s -u admin:iY4PcvZLN4Dm0woV --basic 'http://localhost:8090/api/v1alpha1/users'\r\n    ```\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/core/extension/endpoint/PluginEndpoint.java b/src/main/java/run/halo/app/core/extension/endpoint/PluginEndpoint.java\n--- a/src/main/java/run/halo/app/core/extension/endpoint/PluginEndpoint.java\n+++ b/src/main/java/run/halo/app/core/extension/endpoint/PluginEndpoint.java\n@@ -0,0 +1,117 @@\n+package run.halo.app.core.extension.endpoint;\n+\n+import static org.springdoc.core.fn.builders.apiresponse.Builder.responseBuilder;\n+import static org.springdoc.core.fn.builders.content.Builder.contentBuilder;\n+import static org.springdoc.core.fn.builders.requestbody.Builder.requestBodyBuilder;\n+import static org.springframework.web.reactive.function.server.RequestPredicates.contentType;\n+\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springdoc.core.fn.builders.schema.Builder;\n+import org.springdoc.webflux.core.fn.SpringdocRouteBuilder;\n+import org.springframework.core.ParameterizedTypeReference;\n+import org.springframework.http.MediaType;\n+import org.springframework.http.codec.multipart.FilePart;\n+import org.springframework.http.codec.multipart.Part;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.reactive.function.server.RouterFunction;\n+import org.springframework.web.reactive.function.server.ServerRequest;\n+import org.springframework.web.reactive.function.server.ServerResponse;\n+import org.springframework.web.server.ServerWebInputException;\n+import reactor.core.publisher.Mono;\n+import run.halo.app.core.extension.Plugin;\n+import run.halo.app.extension.ExtensionClient;\n+import run.halo.app.plugin.PluginProperties;\n+import run.halo.app.plugin.YamlPluginFinder;\n+\n+@Slf4j\n+@Component\n+public class PluginEndpoint implements CustomEndpoint {\n+\n+    private final PluginProperties pluginProperties;\n+\n+    private final ExtensionClient client;\n+\n+    public PluginEndpoint(PluginProperties pluginProperties, ExtensionClient client) {\n+        this.pluginProperties = pluginProperties;\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public RouterFunction<ServerResponse> endpoint() {\n+        final var tag = \"api.halo.run/v1alpha1/Plugin\";\n+        return SpringdocRouteBuilder.route()\n+            .POST(\"plugins/install\", contentType(MediaType.MULTIPART_FORM_DATA),\n+                this::install, builder -> builder.operationId(\"InstallPlugin\")\n+                    .description(\"Install a plugin by uploading a Jar file.\")\n+                    .tag(tag)\n+                    .requestBody(requestBodyBuilder()\n+                        .required(true)\n+                        .content(contentBuilder()\n+                            .mediaType(MediaType.MULTIPART_FORM_DATA_VALUE)\n+                            .schema(Builder.schemaBuilder().implementation(InstallRequest.class))\n+                        ))\n+                    .response(responseBuilder())\n+            )\n+            .build();\n+    }\n+\n+    public record InstallRequest(\n+        @Schema(required = true, description = \"Plugin Jar file.\") FilePart file) {\n+    }\n+\n+    Mono<ServerResponse> install(ServerRequest request) {\n+        return request.bodyToMono(new ParameterizedTypeReference<MultiValueMap<String, Part>>() {\n+            })\n+            .flatMap(this::getJarFilePart)\n+            .flatMap(file -> {\n+                var pluginRoot = Paths.get(pluginProperties.getPluginsRoot());\n+                createDirectoriesIfNotExists(pluginRoot);\n+                var pluginPath = pluginRoot.resolve(file.filename());\n+                return file.transferTo(pluginPath).thenReturn(pluginPath);\n+            }).map(pluginPath -> {\n+                log.info(\"Plugin uploaded at {}\", pluginPath);\n+                var plugin = new YamlPluginFinder().find(pluginPath);\n+                // overwrite the enabled flag\n+                plugin.getSpec().setEnabled(false);\n+                var createdPlugin =\n+                    client.fetch(Plugin.class, plugin.getMetadata().getName()).orElseGet(() -> {\n+                        client.create(plugin);\n+                        return client.fetch(Plugin.class, plugin.getMetadata().getName())\n+                            .orElseThrow();\n+                    });\n+                return createdPlugin;\n+            }).flatMap(plugin -> ServerResponse.ok()\n+                .contentType(MediaType.APPLICATION_JSON)\n+                .bodyValue(plugin));\n+    }\n+\n+    void createDirectoriesIfNotExists(Path directory) {\n+        if (Files.exists(directory)) {\n+            return;\n+        }\n+        try {\n+            Files.createDirectories(directory);\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Failed to create directory \" + directory, e);\n+        }\n+    }\n+\n+    Mono<FilePart> getJarFilePart(MultiValueMap<String, Part> formData) {\n+        Part part = formData.getFirst(\"file\");\n+        if (!(part instanceof FilePart file)) {\n+            return Mono.error(new ServerWebInputException(\n+                \"Invalid parameter of file, binary data is required\"));\n+        }\n+        if (!Paths.get(file.filename()).toString().endsWith(\".jar\")) {\n+            return Mono.error(new ServerWebInputException(\n+                \"Invalid file type, only jar is supported\"));\n+        }\n+        return Mono.just(file);\n+    }\n+}\n\ndiff --git a/src/main/java/run/halo/app/infra/properties/HaloProperties.java b/src/main/java/run/halo/app/infra/properties/HaloProperties.java\n--- a/src/main/java/run/halo/app/infra/properties/HaloProperties.java\n+++ b/src/main/java/run/halo/app/infra/properties/HaloProperties.java\n@@ -1,5 +1,6 @@\n package run.halo.app.infra.properties;\n \n+import java.nio.file.Path;\n import java.util.HashSet;\n import java.util.Set;\n import lombok.Data;\n@@ -13,6 +14,8 @@\n @ConfigurationProperties(prefix = \"halo\")\n public class HaloProperties {\n \n+    private Path workDir;\n+\n     private Set<String> initialExtensionLocations = new HashSet<>();\n \n     private final ExtensionProperties extension = new ExtensionProperties();\n\ndiff --git a/src/main/java/run/halo/app/plugin/PluginProperties.java b/src/main/java/run/halo/app/plugin/PluginProperties.java\n--- a/src/main/java/run/halo/app/plugin/PluginProperties.java\n+++ b/src/main/java/run/halo/app/plugin/PluginProperties.java\n@@ -57,7 +57,7 @@ public class PluginProperties {\n      * Plugin root directory: default “plugins”; when non-jar mode plugin, the value should be an\n      * absolute directory address.\n      */\n-    private String pluginsRoot = \"plugins\";\n+    private String pluginsRoot;\n \n     /**\n      * Allows providing custom plugin loaders.",
    "output": "Provide an endpoint to install plugin using Jar file (#2271)\n\n#### What type of PR is this?\r\n\r\n/kind feature\r\n/area core\r\n/milestone 2.0\r\n\r\n#### What this PR does / why we need it:\r\n\r\nProvide an endpoint to install plugin using Jar file.\r\n\r\n#### Special notes for your reviewer:\r\n\r\nCurrently, you could login and open the swagger ui to test against this feature.\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/extension/DefaultExtensionClient.java b/src/main/java/run/halo/app/extension/DefaultExtensionClient.java\n--- a/src/main/java/run/halo/app/extension/DefaultExtensionClient.java\n+++ b/src/main/java/run/halo/app/extension/DefaultExtensionClient.java\n@@ -105,8 +105,10 @@ public <E extends Extension> void update(E extension) {\n \n     @Override\n     public <E extends Extension> void delete(E extension) {\n+        extension.getMetadata().setDeletionTimestamp(Instant.now());\n         var extensionStore = converter.convertTo(extension);\n-        var deleteStore = storeClient.delete(extensionStore.getName(), extensionStore.getVersion());\n+        var deleteStore = storeClient.update(extensionStore.getName(), extensionStore.getVersion(),\n+            extensionStore.getData());\n         Extension deleteExt = converter.convertFrom(extension.getClass(), deleteStore);\n         watchers.onDelete(deleteExt);\n     }\n\ndiff --git a/src/main/java/run/halo/app/extension/ExtensionRouterFunctionFactory.java b/src/main/java/run/halo/app/extension/ExtensionRouterFunctionFactory.java\n--- a/src/main/java/run/halo/app/extension/ExtensionRouterFunctionFactory.java\n+++ b/src/main/java/run/halo/app/extension/ExtensionRouterFunctionFactory.java\n@@ -6,7 +6,6 @@\n \n import io.swagger.v3.oas.annotations.enums.ParameterIn;\n import java.net.URI;\n-import java.time.Instant;\n import java.util.Objects;\n import net.bytebuddy.ByteBuddy;\n import net.bytebuddy.description.type.TypeDescription;\n@@ -299,10 +298,7 @@ public Mono<ServerResponse> handle(ServerRequest request) {\n             String name = request.pathVariable(\"name\");\n             return getExtension(name)\n                 .flatMap(extension ->\n-                    Mono.fromRunnable(() -> {\n-                        extension.getMetadata().setDeletionTimestamp(Instant.now());\n-                        client.update(extension);\n-                    }).thenReturn(extension))\n+                    Mono.fromRunnable(() -> client.delete(extension)).thenReturn(extension))\n                 .flatMap(extension -> this.getExtension(name))\n                 .flatMap(extension -> ServerResponse\n                     .ok()\n\ndiff --git a/src/test/java/run/halo/app/config/ExtensionConfigurationTest.java b/src/test/java/run/halo/app/config/ExtensionConfigurationTest.java\n--- a/src/test/java/run/halo/app/config/ExtensionConfigurationTest.java\n+++ b/src/test/java/run/halo/app/config/ExtensionConfigurationTest.java\n@@ -29,6 +29,7 @@\n import run.halo.app.extension.Metadata;\n import run.halo.app.extension.Scheme;\n import run.halo.app.extension.SchemeManager;\n+import run.halo.app.extension.store.ExtensionStoreRepository;\n \n @SpringBootTest\n @AutoConfigureWebTestClient\n@@ -59,6 +60,11 @@ void setUp() {\n         schemeManager.register(FakeExtension.class);\n     }\n \n+    @AfterEach\n+    void cleanUp(@Autowired ExtensionStoreRepository repository) {\n+        repository.deleteAll();\n+    }\n+\n     @Test\n     @WithMockUser\n     void shouldReturnNotFoundWhenSchemeNotRegistered() {\n@@ -130,12 +136,6 @@ void setUp() {\n                 .getResponseBody();\n         }\n \n-        @AfterEach\n-        void cleanUp() {\n-            FakeExtension fakeToDelete = getFakeExtension(createdFake.getMetadata().getName());\n-            extClient.delete(fakeToDelete);\n-        }\n-\n         @Test\n         @WithMockUser\n         void shouldDeleteExtensionWhenSchemeRegistered() {\n\ndiff --git a/src/test/java/run/halo/app/extension/DefaultExtensionClientTest.java b/src/test/java/run/halo/app/extension/DefaultExtensionClientTest.java\n--- a/src/test/java/run/halo/app/extension/DefaultExtensionClientTest.java\n+++ b/src/test/java/run/halo/app/extension/DefaultExtensionClientTest.java\n@@ -12,6 +12,7 @@\n import static org.mockito.ArgumentMatchers.isA;\n import static org.mockito.Mockito.doNothing;\n import static org.mockito.Mockito.lenient;\n+import static org.mockito.Mockito.never;\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n@@ -340,13 +341,14 @@ void shouldDeleteSuccessfully() {\n         var fake = createFakeExtension(\"fake\", 2L);\n         when(converter.convertTo(any())).thenReturn(\n             createExtensionStore(\"/registry/fake.halo.run/fakes/fake\"));\n-        when(storeClient.delete(any(), any())).thenReturn(\n+        when(storeClient.update(any(), any(), any())).thenReturn(\n             createExtensionStore(\"/registry/fake.halo.run/fakes/fake\"));\n \n         client.delete(fake);\n \n         verify(converter, times(1)).convertTo(any());\n-        verify(storeClient, times(1)).delete(any(), any());\n+        verify(storeClient, times(1)).update(any(), any(), any());\n+        verify(storeClient, never()).delete(any(), any());\n     }\n \n     @Nested\n\ndiff --git a/src/test/java/run/halo/app/extension/ExtensionDeleteHandlerTest.java b/src/test/java/run/halo/app/extension/ExtensionDeleteHandlerTest.java\n--- a/src/test/java/run/halo/app/extension/ExtensionDeleteHandlerTest.java\n+++ b/src/test/java/run/halo/app/extension/ExtensionDeleteHandlerTest.java\n@@ -5,7 +5,6 @@\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.ArgumentMatchers.anyString;\n-import static org.mockito.ArgumentMatchers.argThat;\n import static org.mockito.ArgumentMatchers.eq;\n import static org.mockito.ArgumentMatchers.same;\n import static org.mockito.Mockito.doNothing;\n@@ -57,7 +56,7 @@ void shouldHandleCorrectly() {\n             .pathVariable(\"name\", \"my-fake\")\n             .body(Mono.just(unstructured));\n         when(client.fetch(eq(FakeExtension.class), eq(\"my-fake\"))).thenReturn(Optional.of(fake));\n-        doNothing().when(client).update(any());\n+        doNothing().when(client).delete(any());\n \n         var scheme = Scheme.buildFromType(FakeExtension.class);\n         var deleteHandler = new ExtensionDeleteHandler(scheme, client);\n@@ -72,9 +71,8 @@ void shouldHandleCorrectly() {\n             })\n             .verifyComplete();\n         verify(client, times(2)).fetch(eq(FakeExtension.class), eq(\"my-fake\"));\n-        verify(client, times(1)).update(\n-            argThat(fakeToDelete -> fakeToDelete.getMetadata().getDeletionTimestamp() != null));\n-        verify(client, times(0)).delete(any());\n+        verify(client, times(1)).delete(any());\n+        verify(client, times(0)).update(any());\n     }\n \n     @Test",
    "output": "Refactor deletion of Extension in Extension client (#2267)\n\n#### What type of PR is this?\r\n\r\n/kind improvement\r\n/area core\r\n/milestone 2.0\r\n\r\n#### What this PR does / why we need it:\r\n\r\nDo not delete directly when invoking ExtensionClient#delete. We just flag it by setting metadata.deletionTimestamp.\r\n\r\nThe rest should be done by garbage collector.\r\n\r\n#### Does this PR introduce a user-facing change?\r\n\r\n```release-note\r\nNone\r\n```"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/core/extension/endpoint/UserEndpoint.java b/src/main/java/run/halo/app/core/extension/endpoint/UserEndpoint.java\n--- a/src/main/java/run/halo/app/core/extension/endpoint/UserEndpoint.java\n+++ b/src/main/java/run/halo/app/core/extension/endpoint/UserEndpoint.java\n@@ -38,6 +38,7 @@\n @Component\n public class UserEndpoint implements CustomEndpoint {\n \n+    private static final String SELF_USER = \"-\";\n     private final ExtensionClient client;\n     private final UserService userService;\n \n@@ -94,7 +95,8 @@ public RouterFunction<ServerResponse> endpoint() {\n     Mono<ServerResponse> changePassword(ServerRequest request) {\n         final var nameInPath = request.pathVariable(\"name\");\n         return ReactiveSecurityContextHolder.getContext()\n-            .map(ctx -> \"-\".equals(nameInPath) ? ctx.getAuthentication().getName() : nameInPath)\n+            .map(ctx -> SELF_USER.equals(nameInPath) ? ctx.getAuthentication().getName()\n+                : nameInPath)\n             .flatMap(username -> request.bodyToMono(ChangePasswordRequest.class)\n                 .switchIfEmpty(Mono.defer(() ->\n                     Mono.error(new ServerWebInputException(\"Request body is empty\"))))\n@@ -182,7 +184,9 @@ record GrantRequest(Set<String> roles) {\n     @NonNull\n     private Mono<ServerResponse> getUserPermission(ServerRequest request) {\n         String name = request.pathVariable(\"name\");\n-        return userService.listRoles(name)\n+        return ReactiveSecurityContextHolder.getContext()\n+            .map(ctx -> SELF_USER.equals(name) ? ctx.getAuthentication().getName() : name)\n+            .flatMapMany(userService::listRoles)\n             .reduce(new LinkedHashSet<Role>(), (list, role) -> {\n                 list.add(role);\n                 return list;\n\ndiff --git a/src/main/java/run/halo/app/security/authorization/DefaultRuleResolver.java b/src/main/java/run/halo/app/security/authorization/DefaultRuleResolver.java\n--- a/src/main/java/run/halo/app/security/authorization/DefaultRuleResolver.java\n+++ b/src/main/java/run/halo/app/security/authorization/DefaultRuleResolver.java\n@@ -4,6 +4,7 @@\n import com.fasterxml.jackson.core.type.TypeReference;\n import java.util.ArrayList;\n import java.util.Collections;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n import lombok.Data;\n@@ -23,7 +24,7 @@\n  */\n @Data\n public class DefaultRuleResolver implements AuthorizationRuleResolver {\n-\n+    private static final String AUTHENTICATED_ROLE = \"authenticated\";\n     private RoleService roleService;\n \n     private RoleBindingService roleBindingService = new DefaultRoleBindingService();\n@@ -49,7 +50,10 @@ public PolicyRuleList rulesFor(UserDetails user) {\n \n     @Override\n     public void visitRulesFor(UserDetails user, RuleAccumulator visitor) {\n-        Set<String> roleNames = roleBindingService.listBoundRoleNames(user.getAuthorities());\n+        Set<String> roleNamesImmutable =\n+            roleBindingService.listBoundRoleNames(user.getAuthorities());\n+        Set<String> roleNames = new HashSet<>(roleNamesImmutable);\n+        roleNames.add(AUTHENTICATED_ROLE);\n \n         List<Role.PolicyRule> rules = Collections.emptyList();\n         for (String roleName : roleNames) {",
    "output": "feat: add role templates for system (#2260)\n\n* feat: add role templates for system\r\n\r\n* fix: permissions manage config\r\n\r\n* feat: add hidden labels\r\n\r\n* feat: add ui permissions for role template\r\n\r\n* fix: user password change definition"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/extension/ConfigMap.java b/src/main/java/run/halo/app/extension/ConfigMap.java\n--- a/src/main/java/run/halo/app/extension/ConfigMap.java\n+++ b/src/main/java/run/halo/app/extension/ConfigMap.java\n@@ -0,0 +1,31 @@\n+package run.halo.app.extension;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+\n+/**\n+ * <p>ConfigMap holds configuration data to consume.</p>\n+ *\n+ * @author guqing\n+ * @since 2.0.0\n+ */\n+@Data\n+@ToString(callSuper = true)\n+@EqualsAndHashCode(callSuper = true)\n+@GVK(group = \"\", version = \"v1alpha1\", kind = \"ConfigMap\", plural = \"configmaps\",\n+    singular = \"configmap\")\n+public class ConfigMap extends AbstractExtension {\n+\n+    private Map<String, String> data;\n+\n+    public ConfigMap putDataItem(String key, String dataItem) {\n+        if (this.data == null) {\n+            this.data = new LinkedHashMap<>();\n+        }\n+        this.data.put(key, dataItem);\n+        return this;\n+    }\n+}\n\ndiff --git a/src/test/java/run/halo/app/extension/ConfigMapTest.java b/src/test/java/run/halo/app/extension/ConfigMapTest.java\n--- a/src/test/java/run/halo/app/extension/ConfigMapTest.java\n+++ b/src/test/java/run/halo/app/extension/ConfigMapTest.java\n@@ -0,0 +1,103 @@\n+package run.halo.app.extension;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.doNothing;\n+\n+import java.util.List;\n+import java.util.Map;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.springframework.security.util.InMemoryResource;\n+import run.halo.app.infra.utils.YamlUnstructuredLoader;\n+\n+/**\n+ * Tests for {@link ConfigMap}.\n+ *\n+ * @author guqing\n+ * @since 2.0.0\n+ */\n+@ExtendWith(MockitoExtension.class)\n+class ConfigMapTest {\n+\n+    @Mock\n+    ExtensionClient extensionClient;\n+\n+    @Test\n+    void configMapTest() {\n+        ArgumentCaptor<ConfigMap> argumentCaptor = ArgumentCaptor.forClass(ConfigMap.class);\n+        doNothing().when(extensionClient).create(argumentCaptor.capture());\n+\n+        ConfigMap configMap = new ConfigMap();\n+        Metadata metadata = new Metadata();\n+        metadata.setName(\"test-configmap\");\n+        configMap.setMetadata(metadata);\n+        Map<String, String> data = Map.of(\"k1\", \"v1\", \"k2\", \"v2\", \"k3\", \"v3\");\n+        configMap.setData(data);\n+        extensionClient.create(configMap);\n+\n+        ConfigMap value = argumentCaptor.getValue();\n+        assertThat(value).isNotNull();\n+        assertThat(value.getData()).isEqualTo(data);\n+    }\n+\n+    @Test\n+    void putDataItem() {\n+        ConfigMap configMap = new ConfigMap();\n+        configMap.putDataItem(\"k1\", \"v1\")\n+            .putDataItem(\"k2\", \"v2\")\n+            .putDataItem(\"k3\", \"v3\");\n+\n+        assertThat(configMap.getData()).isNotNull();\n+        assertThat(configMap.getData()).hasSize(3);\n+        assertThat(configMap.getData()).isEqualTo(\n+            Map.of(\"k1\", \"v1\", \"k2\", \"v2\", \"k3\", \"v3\"));\n+    }\n+\n+    @Test\n+    void equalsTest() {\n+        ConfigMap configMapA = new ConfigMap();\n+        Metadata metadataA = new Metadata();\n+        metadataA.setName(\"test-configmap\");\n+        configMapA.setMetadata(metadataA);\n+        configMapA.putDataItem(\"k1\", \"v1\");\n+\n+        ConfigMap configMapB = new ConfigMap();\n+        Metadata metadataB = new Metadata();\n+        metadataB.setName(\"test-configmap\");\n+        configMapB.setMetadata(metadataB);\n+        configMapB.putDataItem(\"k1\", \"v1\");\n+\n+        assertThat(configMapA).isEqualTo(configMapB);\n+\n+        configMapB.getMetadata().setName(\"test-configmap-2\");\n+        assertThat(configMapA).isNotEqualTo(configMapB);\n+    }\n+\n+    @Test\n+    void yamlTest() {\n+        String configMapYaml = \"\"\"\n+                apiVersion: v1alpha1\n+                kind: ConfigMap\n+                metadata:\n+                  name: test-configmap\n+                data:\n+                  k1: v1\n+                  k2: v2\n+                  k3: v3\n+            \"\"\";\n+        List<Unstructured> unstructureds =\n+            new YamlUnstructuredLoader(new InMemoryResource(configMapYaml)).load();\n+        assertThat(unstructureds).hasSize(1);\n+        Unstructured unstructured = unstructureds.get(0);\n+        ConfigMap configMap =\n+            Unstructured.OBJECT_MAPPER.convertValue(unstructured, ConfigMap.class);\n+\n+        assertThat(configMap.getData()).isEqualTo(Map.of(\"k1\", \"v1\", \"k2\", \"v2\", \"k3\", \"v3\"));\n+        assertThat(configMap.getMetadata().getName()).isEqualTo(\"test-configmap\");\n+        assertThat(configMap.getApiVersion()).isEqualTo(\"v1alpha1\");\n+        assertThat(configMap.getKind()).isEqualTo(\"ConfigMap\");\n+    }\n+}\n\\ No newline at end of file",
    "output": "feat: add configmap extension (#2232)\n\n* feat: add configmap extension"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/WebServerSecurityConfig.java b/src/main/java/run/halo/app/config/WebServerSecurityConfig.java\n--- a/src/main/java/run/halo/app/config/WebServerSecurityConfig.java\n+++ b/src/main/java/run/halo/app/config/WebServerSecurityConfig.java\n@@ -88,11 +88,12 @@ SecurityWebFilterChain webFilterChain(ServerHttpSecurity http) {\n         http.authorizeExchange(exchanges -> exchanges.pathMatchers(\n                 \"/actuator/**\"\n             ).permitAll())\n+            .cors(corsSpec -> corsSpec.configurationSource(apiCorsConfigurationSource()))\n             .authorizeExchange(exchanges -> exchanges.anyExchange().authenticated())\n             .cors(withDefaults())\n             .httpBasic(withDefaults())\n             .formLogin(withDefaults())\n-            .csrf().csrfTokenRepository(new CookieServerCsrfTokenRepository()).and()\n+            .csrf().csrfTokenRepository(CookieServerCsrfTokenRepository.withHttpOnlyFalse()).and()\n             .logout(withDefaults());\n \n         return http.build();\n@@ -102,11 +103,14 @@ CorsConfigurationSource apiCorsConfigurationSource() {\n         CorsConfiguration configuration = new CorsConfiguration();\n         configuration.setAllowedOriginPatterns(List.of(\"*\"));\n         configuration.setAllowedHeaders(\n-            List.of(HttpHeaders.AUTHORIZATION, HttpHeaders.CONTENT_TYPE, HttpHeaders.ACCEPT));\n+            List.of(HttpHeaders.AUTHORIZATION, HttpHeaders.CONTENT_TYPE, HttpHeaders.ACCEPT,\n+                \"X-XSRF-TOKEN\", HttpHeaders.COOKIE));\n+        configuration.setAllowCredentials(true);\n         configuration.setAllowedMethods(Arrays.asList(\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"));\n         UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n         source.registerCorsConfiguration(\"/api/**\", configuration);\n         source.registerCorsConfiguration(\"/apis/**\", configuration);\n+        source.registerCorsConfiguration(\"/login\", configuration);\n         return source;\n     }\n ",
    "output": "refactor: configure the api request to allow credentials and X-XSRF-TOKEN,COOKIE headers (#2227)\n\nSigned-off-by: Ryan Wang <i@ryanc.cc>"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/WebFluxConfig.java b/src/main/java/run/halo/app/config/WebFluxConfig.java\n--- a/src/main/java/run/halo/app/config/WebFluxConfig.java\n+++ b/src/main/java/run/halo/app/config/WebFluxConfig.java\n@@ -2,6 +2,7 @@\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n import java.util.List;\n+import org.springframework.context.ApplicationContext;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.http.codec.CodecConfigurer;\n@@ -12,9 +13,12 @@\n import org.springframework.lang.NonNull;\n import org.springframework.web.reactive.config.EnableWebFlux;\n import org.springframework.web.reactive.config.WebFluxConfigurer;\n+import org.springframework.web.reactive.function.server.RouterFunction;\n import org.springframework.web.reactive.function.server.ServerResponse;\n import org.springframework.web.reactive.result.view.ViewResolutionResultHandler;\n import org.springframework.web.reactive.result.view.ViewResolver;\n+import run.halo.app.core.extension.endpoint.CustomEndpoint;\n+import run.halo.app.core.extension.endpoint.CustomEndpointsBuilder;\n \n @Configuration\n @EnableWebFlux\n@@ -52,4 +56,12 @@ public void configureHttpMessageCodecs(ServerCodecConfigurer configurer) {\n         configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n         configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n     }\n+\n+    @Bean\n+    RouterFunction<ServerResponse> customEndpoints(ApplicationContext context) {\n+        var builder = new CustomEndpointsBuilder();\n+        context.getBeansOfType(CustomEndpoint.class).values()\n+            .forEach(customEndpoint -> builder.add(customEndpoint.endpoint()));\n+        return builder.build();\n+    }\n }\n\ndiff --git a/src/main/java/run/halo/app/core/extension/endpoint/CustomEndpoint.java b/src/main/java/run/halo/app/core/extension/endpoint/CustomEndpoint.java\n--- a/src/main/java/run/halo/app/core/extension/endpoint/CustomEndpoint.java\n+++ b/src/main/java/run/halo/app/core/extension/endpoint/CustomEndpoint.java\n@@ -0,0 +1,16 @@\n+package run.halo.app.core.extension.endpoint;\n+\n+import org.springframework.web.reactive.function.server.RouterFunction;\n+import org.springframework.web.reactive.function.server.ServerResponse;\n+\n+/**\n+ * RouterFunction provider for custom endpoints.\n+ *\n+ * @author johnniang\n+ */\n+@FunctionalInterface\n+public interface CustomEndpoint {\n+\n+    RouterFunction<ServerResponse> endpoint();\n+\n+}\n\ndiff --git a/src/main/java/run/halo/app/core/extension/endpoint/CustomEndpointsBuilder.java b/src/main/java/run/halo/app/core/extension/endpoint/CustomEndpointsBuilder.java\n--- a/src/main/java/run/halo/app/core/extension/endpoint/CustomEndpointsBuilder.java\n+++ b/src/main/java/run/halo/app/core/extension/endpoint/CustomEndpointsBuilder.java\n@@ -0,0 +1,33 @@\n+package run.halo.app.core.extension.endpoint;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+import org.springdoc.webflux.core.fn.SpringdocRouteBuilder;\n+import org.springframework.web.reactive.function.server.RequestPredicates;\n+import org.springframework.web.reactive.function.server.RouterFunction;\n+import org.springframework.web.reactive.function.server.ServerResponse;\n+\n+public class CustomEndpointsBuilder {\n+\n+    private final List<RouterFunction<ServerResponse>> routerFunctions;\n+\n+    public CustomEndpointsBuilder() {\n+        routerFunctions = new LinkedList<>();\n+    }\n+\n+    public CustomEndpointsBuilder add(RouterFunction<ServerResponse> routerFunction) {\n+        routerFunctions.add(routerFunction);\n+        return this;\n+    }\n+\n+    public RouterFunction<ServerResponse> build() {\n+        return SpringdocRouteBuilder.route()\n+            .nest(RequestPredicates.path(\"/apis/api.halo.run/v1alpha1\"),\n+                () -> routerFunctions.stream().reduce(RouterFunction::and).orElse(null),\n+                builder -> builder\n+                    .operationId(\"CustomEndpoints\")\n+                    .description(\"Custom endpoints\")\n+                    .tag(\"api.halo.run/v1alpha1/CustomEndpoint\"))\n+            .build();\n+    }\n+}\n\ndiff --git a/src/main/java/run/halo/app/core/extension/endpoint/UserEndpoint.java b/src/main/java/run/halo/app/core/extension/endpoint/UserEndpoint.java\n--- a/src/main/java/run/halo/app/core/extension/endpoint/UserEndpoint.java\n+++ b/src/main/java/run/halo/app/core/extension/endpoint/UserEndpoint.java\n@@ -0,0 +1,47 @@\n+package run.halo.app.core.extension.endpoint;\n+\n+import static org.springdoc.core.fn.builders.apiresponse.Builder.responseBuilder;\n+\n+import org.springdoc.webflux.core.fn.SpringdocRouteBuilder;\n+import org.springframework.http.MediaType;\n+import org.springframework.security.core.context.ReactiveSecurityContextHolder;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.reactive.function.server.RouterFunction;\n+import org.springframework.web.reactive.function.server.ServerRequest;\n+import org.springframework.web.reactive.function.server.ServerResponse;\n+import reactor.core.publisher.Mono;\n+import run.halo.app.core.extension.User;\n+import run.halo.app.extension.ExtensionClient;\n+import run.halo.app.extension.exception.ExtensionNotFoundException;\n+\n+@Component\n+public class UserEndpoint implements CustomEndpoint {\n+\n+    private final ExtensionClient client;\n+\n+    public UserEndpoint(ExtensionClient client) {\n+        this.client = client;\n+    }\n+\n+    Mono<ServerResponse> me(ServerRequest request) {\n+        return ReactiveSecurityContextHolder.getContext()\n+            .map(ctx -> {\n+                var name = ctx.getAuthentication().getName();\n+                return client.fetch(User.class, name)\n+                    .orElseThrow(() -> new ExtensionNotFoundException(name));\n+            })\n+            .flatMap(user -> ServerResponse.ok()\n+                .contentType(MediaType.APPLICATION_JSON)\n+                .bodyValue(user));\n+    }\n+\n+    @Override\n+    public RouterFunction<ServerResponse> endpoint() {\n+        return SpringdocRouteBuilder.route()\n+            .GET(\"/users/-\", this::me, builder -> builder.operationId(\"GetCurrentUserDetail\")\n+                .description(\"Get current user detail\")\n+                .tag(\"api.halo.run/v1alpha1/User\")\n+                .response(responseBuilder().implementation(User.class)))\n+            .build();\n+    }\n+}\n\ndiff --git a/src/test/java/run/halo/app/core/extension/endpoint/UserEndpointTest.java b/src/test/java/run/halo/app/core/extension/endpoint/UserEndpointTest.java\n--- a/src/test/java/run/halo/app/core/extension/endpoint/UserEndpointTest.java\n+++ b/src/test/java/run/halo/app/core/extension/endpoint/UserEndpointTest.java\n@@ -0,0 +1,73 @@\n+package run.halo.app.core.extension.endpoint;\n+\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.http.MediaType;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.reactive.server.WebTestClient;\n+import run.halo.app.core.extension.Role;\n+import run.halo.app.core.extension.User;\n+import run.halo.app.core.extension.service.RoleService;\n+import run.halo.app.extension.ExtensionClient;\n+import run.halo.app.extension.Metadata;\n+\n+@SpringBootTest\n+@AutoConfigureWebTestClient\n+class UserEndpointTest {\n+\n+    @Autowired\n+    WebTestClient webClient;\n+\n+    @MockBean\n+    RoleService roleService;\n+\n+    @MockBean\n+    ExtensionClient client;\n+\n+    @BeforeEach\n+    void setUp() {\n+        // disable authorization\n+        var rule = new Role.PolicyRule.Builder()\n+            .apiGroups(\"*\")\n+            .resources(\"*\")\n+            .verbs(\"*\")\n+            .build();\n+        var role = new Role();\n+        role.setRules(List.of(rule));\n+        when(roleService.getRole(anyString())).thenReturn(role);\n+    }\n+\n+    @Test\n+    @WithMockUser(\"fake-user\")\n+    void shouldResponseErrorIfUserNotFound() {\n+        when(client.fetch(User.class, \"fake-user\")).thenReturn(Optional.empty());\n+        webClient.get().uri(\"/apis/api.halo.run/v1alpha1/users/-\")\n+            .exchange()\n+            .expectStatus().is5xxServerError();\n+    }\n+\n+    @Test\n+    @WithMockUser(\"fake-user\")\n+    void shouldGetCurrentUserDetail() {\n+        var metadata = new Metadata();\n+        metadata.setName(\"fake-user\");\n+        var user = new User();\n+        user.setMetadata(metadata);\n+        when(client.fetch(User.class, \"fake-user\")).thenReturn(Optional.of(user));\n+        webClient.get().uri(\"/apis/api.halo.run/v1alpha1/users/-\")\n+            .exchange()\n+            .expectStatus().isOk()\n+            .expectHeader().contentType(MediaType.APPLICATION_JSON)\n+            .expectBody(User.class)\n+            .isEqualTo(user);\n+    }\n+}\n\\ No newline at end of file",
    "output": "Add support for custom endpoints (#2223)\n\n* Support to add custom endpoints\n\nSigned-off-by: johnniang <johnniang@fastmail.com>\n\n* Update docs/developer-guide/custom-endpoint.md\n\nCo-authored-by: guqing <38999863+guqing@users.noreply.github.com>\n\nCo-authored-by: Ryan Wang <i@ryanc.cc>\nCo-authored-by: guqing <38999863+guqing@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/infra/utils/JsonParseException.java b/src/main/java/run/halo/app/infra/utils/JsonParseException.java\n--- a/src/main/java/run/halo/app/infra/utils/JsonParseException.java\n+++ b/src/main/java/run/halo/app/infra/utils/JsonParseException.java\n@@ -0,0 +1,30 @@\n+package run.halo.app.infra.utils;\n+\n+/**\n+ * {@link JsonParseException} thrown when source JSON is invalid.\n+ *\n+ * @author guqing\n+ * @since 2.0.0\n+ */\n+public class JsonParseException extends RuntimeException {\n+    public JsonParseException() {\n+        super();\n+    }\n+\n+    public JsonParseException(String message) {\n+        super(message);\n+    }\n+\n+    public JsonParseException(String message, Throwable cause) {\n+        super(message, cause);\n+    }\n+\n+    public JsonParseException(Throwable cause) {\n+        super(cause);\n+    }\n+\n+    protected JsonParseException(String message, Throwable cause, boolean enableSuppression,\n+        boolean writableStackTrace) {\n+        super(message, cause, enableSuppression, writableStackTrace);\n+    }\n+}\n\ndiff --git a/src/main/java/run/halo/app/infra/utils/JsonUtils.java b/src/main/java/run/halo/app/infra/utils/JsonUtils.java\n--- a/src/main/java/run/halo/app/infra/utils/JsonUtils.java\n+++ b/src/main/java/run/halo/app/infra/utils/JsonUtils.java\n@@ -77,7 +77,7 @@ public static String objectToJson(@NonNull Object source) {\n         try {\n             return DEFAULT_JSON_MAPPER.writeValueAsString(source);\n         } catch (JsonProcessingException e) {\n-            throw new RuntimeException(e);\n+            throw new JsonParseException(e);\n         }\n     }\n \n@@ -93,7 +93,7 @@ public static <T> T jsonToObject(String json, Class<T> toValueType) {\n         try {\n             return DEFAULT_JSON_MAPPER.readValue(json, toValueType);\n         } catch (Exception e) {\n-            throw new RuntimeException(e);\n+            throw new JsonParseException(e);\n         }\n     }\n }",
    "output": "refactor: JSON serialize exception (#2222)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/plugin/PluginLoadedListener.java b/src/main/java/run/halo/app/plugin/PluginLoadedListener.java\n--- a/src/main/java/run/halo/app/plugin/PluginLoadedListener.java\n+++ b/src/main/java/run/halo/app/plugin/PluginLoadedListener.java\n@@ -1,16 +1,10 @@\n package run.halo.app.plugin;\n \n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n import org.pf4j.PluginWrapper;\n import org.springframework.context.ApplicationListener;\n-import org.springframework.core.io.DefaultResourceLoader;\n-import org.springframework.core.io.Resource;\n import org.springframework.stereotype.Component;\n import run.halo.app.core.extension.Plugin;\n import run.halo.app.extension.ExtensionClient;\n-import run.halo.app.infra.utils.YamlUnstructuredLoader;\n import run.halo.app.plugin.event.HaloPluginLoadedEvent;\n \n /**\n@@ -32,26 +26,10 @@ public void onApplicationEvent(HaloPluginLoadedEvent event) {\n         // load plugin.yaml\n         YamlPluginFinder yamlPluginFinder = new YamlPluginFinder();\n         Plugin plugin = yamlPluginFinder.find(pluginWrapper.getPluginPath());\n-        extensionClient.create(plugin);\n-\n-        // load unstructured\n-        DefaultResourceLoader resourceLoader =\n-            new DefaultResourceLoader(pluginWrapper.getPluginClassLoader());\n-        plugin.getSpec().getExtensionLocations()\n-            .stream()\n-            .map(resourceLoader::getResource)\n-            .filter(Resource::exists)\n-            .map(resource -> new YamlUnstructuredLoader(resource).load())\n-            .flatMap(List::stream)\n-            .forEach(unstructured -> {\n-                Map<String, String> labels = unstructured.getMetadata().getLabels();\n-                if (labels == null) {\n-                    unstructured.getMetadata().setLabels(new HashMap<>());\n-                }\n-                unstructured.getMetadata()\n-                    .getLabels()\n-                    .put(PluginConst.PLUGIN_NAME_LABEL_NAME, plugin.getMetadata().getName());\n-                extensionClient.create(unstructured);\n-            });\n+        extensionClient.fetch(Plugin.class, plugin.getMetadata().getName())\n+            .ifPresentOrElse(persisted -> {\n+                plugin.getMetadata().setVersion(persisted.getMetadata().getVersion());\n+                extensionClient.update(plugin);\n+            }, () -> extensionClient.create(plugin));\n     }\n }\n\ndiff --git a/src/main/java/run/halo/app/plugin/PluginStartedListener.java b/src/main/java/run/halo/app/plugin/PluginStartedListener.java\n--- a/src/main/java/run/halo/app/plugin/PluginStartedListener.java\n+++ b/src/main/java/run/halo/app/plugin/PluginStartedListener.java\n@@ -0,0 +1,61 @@\n+package run.halo.app.plugin;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.pf4j.PluginWrapper;\n+import org.springframework.context.ApplicationListener;\n+import org.springframework.core.io.DefaultResourceLoader;\n+import org.springframework.core.io.Resource;\n+import org.springframework.stereotype.Component;\n+import run.halo.app.core.extension.Plugin;\n+import run.halo.app.extension.ExtensionClient;\n+import run.halo.app.extension.MetadataOperator;\n+import run.halo.app.infra.utils.YamlUnstructuredLoader;\n+import run.halo.app.plugin.event.HaloPluginStartedEvent;\n+\n+/**\n+ * TODO Optimized Unstructured loading.\n+ *\n+ * @author guqing\n+ * @since 2.0.0\n+ */\n+@Component\n+public class PluginStartedListener implements ApplicationListener<HaloPluginStartedEvent> {\n+\n+    private final ExtensionClient extensionClient;\n+\n+    public PluginStartedListener(ExtensionClient extensionClient) {\n+        this.extensionClient = extensionClient;\n+    }\n+\n+    @Override\n+    public void onApplicationEvent(HaloPluginStartedEvent event) {\n+        PluginWrapper pluginWrapper = event.getPlugin();\n+        Plugin plugin =\n+            extensionClient.fetch(Plugin.class, pluginWrapper.getPluginId()).orElseThrow();\n+        // load unstructured\n+        DefaultResourceLoader resourceLoader =\n+            new DefaultResourceLoader(pluginWrapper.getPluginClassLoader());\n+        plugin.getSpec().getExtensionLocations()\n+            .stream()\n+            .map(resourceLoader::getResource)\n+            .filter(Resource::exists)\n+            .map(resource -> new YamlUnstructuredLoader(resource).load())\n+            .flatMap(List::stream)\n+            .forEach(unstructured -> {\n+                MetadataOperator metadata = unstructured.getMetadata();\n+                Map<String, String> labels = metadata.getLabels();\n+                if (labels == null) {\n+                    labels = new HashMap<>();\n+                    metadata.setLabels(labels);\n+                }\n+                labels.put(PluginConst.PLUGIN_NAME_LABEL_NAME, plugin.getMetadata().getName());\n+                extensionClient.fetch(unstructured.groupVersionKind(), metadata.getName())\n+                    .ifPresentOrElse(persisted -> {\n+                        unstructured.getMetadata().setVersion(persisted.getMetadata().getVersion());\n+                        extensionClient.update(unstructured);\n+                    }, () -> extensionClient.create(unstructured));\n+            });\n+    }\n+}",
    "output": "refactor: Unstructured loading opportunity for plugin (#2191)\n\n* refactor: Unstructured loading opportunity for plugin\n\n* refactor: gvk"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/WebServerSecurityConfig.java b/src/main/java/run/halo/app/config/WebServerSecurityConfig.java\n--- a/src/main/java/run/halo/app/config/WebServerSecurityConfig.java\n+++ b/src/main/java/run/halo/app/config/WebServerSecurityConfig.java\n@@ -86,11 +86,8 @@ SecurityWebFilterChain apiFilterChain(ServerHttpSecurity http,\n     @Order(0)\n     SecurityWebFilterChain webFilterChain(ServerHttpSecurity http) {\n         http.authorizeExchange(exchanges -> exchanges.pathMatchers(\n-                \"/v3/api-docs/**\",\n-                \"/v3/api-docs.yaml\",\n-                \"/swagger-ui/**\",\n-                \"/swagger-ui.html\",\n-                \"/webjars/**\").permitAll())\n+                \"/actuator/**\"\n+            ).permitAll())\n             .authorizeExchange(exchanges -> exchanges.anyExchange().authenticated())\n             .cors(withDefaults())\n             .httpBasic(withDefaults())\n\ndiff --git a/src/main/java/run/halo/app/extension/ExtensionRouterFunctionFactory.java b/src/main/java/run/halo/app/extension/ExtensionRouterFunctionFactory.java\n--- a/src/main/java/run/halo/app/extension/ExtensionRouterFunctionFactory.java\n+++ b/src/main/java/run/halo/app/extension/ExtensionRouterFunctionFactory.java\n@@ -1,10 +1,14 @@\n package run.halo.app.extension;\n \n-import static org.springframework.web.reactive.function.server.RouterFunctions.route;\n+import static org.springdoc.core.fn.builders.apiresponse.Builder.responseBuilder;\n+import static org.springdoc.core.fn.builders.parameter.Builder.parameterBuilder;\n+import static org.springdoc.core.fn.builders.requestbody.Builder.requestBodyBuilder;\n \n+import io.swagger.v3.oas.annotations.enums.ParameterIn;\n import java.net.URI;\n import java.time.Instant;\n import java.util.Objects;\n+import org.springdoc.webflux.core.fn.SpringdocRouteBuilder;\n import org.springframework.http.MediaType;\n import org.springframework.lang.NonNull;\n import org.springframework.util.StringUtils;\n@@ -35,12 +39,70 @@ public RouterFunction<ServerResponse> create() {\n         var updateHandler = new ExtensionUpdateHandler(scheme, client);\n         var deleteHandler = new ExtensionDeleteHandler(scheme, client);\n         // TODO More handlers here\n-        return route()\n-            .GET(getHandler.pathPattern(), getHandler)\n-            .GET(listHandler.pathPattern(), listHandler)\n-            .POST(createHandler.pathPattern(), createHandler)\n-            .PUT(updateHandler.pathPattern(), updateHandler)\n-            .DELETE(deleteHandler.pathPattern(), deleteHandler)\n+        var gvk = scheme.groupVersionKind();\n+        var tagName = gvk.toString();\n+        return SpringdocRouteBuilder.route()\n+            .GET(getHandler.pathPattern(), getHandler,\n+                builder -> builder.operationId(\"Get\" + gvk)\n+                    .description(\"Get \" + gvk)\n+                    .tag(tagName)\n+                    .parameter(parameterBuilder().in(ParameterIn.PATH)\n+                        .name(\"name\")\n+                        .description(\"Name of \" + scheme.singular()))\n+                    .response(responseBuilder().responseCode(\"200\")\n+                        .description(\"Response single \" + scheme.singular())\n+                        .implementation(scheme.type())))\n+            .GET(listHandler.pathPattern(), listHandler,\n+                builder -> builder.operationId(\"List\" + gvk)\n+                    .description(\"List \" + gvk)\n+                    .tag(tagName)\n+                    .parameter(parameterBuilder().in(ParameterIn.QUERY)\n+                        .name(\"page\")\n+                        .description(\"Page index\")\n+                        .implementation(Integer.class))\n+                    .parameter(parameterBuilder().in(ParameterIn.QUERY)\n+                        .name(\"size\")\n+                        .description(\"Size of one page\")\n+                        .implementation(Integer.class))\n+                    .parameter(parameterBuilder().in(ParameterIn.QUERY)\n+                        .name(\"sort\")\n+                        .description(\"Sort by some fields. Like metadata.name,desc\"))\n+\n+                    .response(responseBuilder().responseCode(\"200\")\n+                        .description(\"Response \" + scheme.plural())\n+                        .implementationArray(scheme.type())))\n+            .POST(createHandler.pathPattern(), createHandler,\n+                builder -> builder.operationId(\"Create\" + gvk)\n+                    .description(\"Create \" + gvk)\n+                    .tag(tagName)\n+                    .requestBody(requestBodyBuilder()\n+                        .description(\"Fresh \" + scheme.singular())\n+                        .implementation(scheme.type()))\n+                    .response(responseBuilder().responseCode(\"200\")\n+                        .description(\"Response \" + scheme.plural() + \" created just now\")\n+                        .implementation(scheme.type())))\n+            .PUT(updateHandler.pathPattern(), updateHandler,\n+                builder -> builder.operationId(\"Update\" + gvk)\n+                    .description(\"Update \" + gvk)\n+                    .tag(tagName)\n+                    .parameter(parameterBuilder().in(ParameterIn.PATH)\n+                        .name(\"name\")\n+                        .description(\"Name of \" + scheme.singular()))\n+                    .requestBody(requestBodyBuilder()\n+                        .description(\"Updated \" + scheme.singular())\n+                        .implementation(scheme.type()))\n+                    .response(responseBuilder().responseCode(\"200\")\n+                        .description(\"Response \" + scheme.plural() + \" updated just now\")\n+                        .implementation(scheme.type())))\n+            .DELETE(deleteHandler.pathPattern(), deleteHandler,\n+                builder -> builder.operationId(\"Delete\" + gvk)\n+                    .description(\"Delete \" + gvk)\n+                    .tag(tagName)\n+                    .parameter(parameterBuilder().in(ParameterIn.PATH)\n+                        .name(\"name\")\n+                        .description(\"Name of \" + scheme.singular()))\n+                    .response(responseBuilder().responseCode(\"200\")\n+                        .description(\"Response \" + scheme.singular() + \" deleted just now\")))\n             .build();\n     }\n \n\ndiff --git a/src/main/java/run/halo/app/extension/GroupVersionKind.java b/src/main/java/run/halo/app/extension/GroupVersionKind.java\n--- a/src/main/java/run/halo/app/extension/GroupVersionKind.java\n+++ b/src/main/java/run/halo/app/extension/GroupVersionKind.java\n@@ -48,4 +48,12 @@ public static GroupVersionKind fromAPIVersionAndKind(String apiVersion, String k\n         var gv = GroupVersion.parseAPIVersion(apiVersion);\n         return new GroupVersionKind(gv.group(), gv.version(), kind);\n     }\n+\n+    @Override\n+    public String toString() {\n+        if (hasGroup()) {\n+            return group + \"/\" + version + \"/\" + kind;\n+        }\n+        return version + \"/\" + kind;\n+    }\n }",
    "output": "Refine Swagger document for Extension APIs (#2180)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/WebServerSecurityConfig.java b/src/main/java/run/halo/app/config/WebServerSecurityConfig.java\n--- a/src/main/java/run/halo/app/config/WebServerSecurityConfig.java\n+++ b/src/main/java/run/halo/app/config/WebServerSecurityConfig.java\n@@ -7,9 +7,12 @@\n import com.nimbusds.jose.jwk.JWKSet;\n import com.nimbusds.jose.jwk.RSAKey;\n import com.nimbusds.jose.jwk.source.ImmutableJWKSet;\n+import java.util.Arrays;\n+import java.util.List;\n import org.springframework.context.annotation.Bean;\n import org.springframework.core.Ordered;\n import org.springframework.core.annotation.Order;\n+import org.springframework.http.HttpHeaders;\n import org.springframework.http.codec.ServerCodecConfigurer;\n import org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity;\n import org.springframework.security.config.web.server.SecurityWebFiltersOrder;\n@@ -24,6 +27,9 @@\n import org.springframework.security.oauth2.jwt.SupplierReactiveJwtDecoder;\n import org.springframework.security.web.server.SecurityWebFilterChain;\n import org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository;\n+import org.springframework.web.cors.CorsConfiguration;\n+import org.springframework.web.cors.reactive.CorsConfigurationSource;\n+import org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource;\n import org.springframework.web.reactive.function.server.ServerResponse;\n import run.halo.app.core.extension.service.RoleService;\n import run.halo.app.core.extension.service.UserService;\n@@ -55,6 +61,7 @@ SecurityWebFilterChain apiFilterChain(ServerHttpSecurity http,\n         UserService userService,\n         RoleService roleService) {\n         http.csrf().disable()\n+            .cors(corsSpec -> corsSpec.configurationSource(apiCorsConfigurationSource()))\n             .securityMatcher(pathMatchers(\"/api/**\", \"/apis/**\"))\n             .authorizeExchange(exchanges ->\n                 exchanges.anyExchange().access(new RequestInfoAuthorizationManager(roleService)))\n@@ -94,6 +101,18 @@ SecurityWebFilterChain webFilterChain(ServerHttpSecurity http) {\n         return http.build();\n     }\n \n+    CorsConfigurationSource apiCorsConfigurationSource() {\n+        CorsConfiguration configuration = new CorsConfiguration();\n+        configuration.setAllowedOriginPatterns(List.of(\"*\"));\n+        configuration.setAllowedHeaders(\n+            List.of(HttpHeaders.AUTHORIZATION, HttpHeaders.CONTENT_TYPE, HttpHeaders.ACCEPT));\n+        configuration.setAllowedMethods(Arrays.asList(\"GET\", \"POST\", \"PUT\", \"DELETE\", \"PATCH\"));\n+        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();\n+        source.registerCorsConfiguration(\"/api/**\", configuration);\n+        source.registerCorsConfiguration(\"/apis/**\", configuration);\n+        return source;\n+    }\n+\n     @Bean\n     ReactiveUserDetailsService userDetailsService(UserService userService,\n         RoleService roleService) {\n\ndiff --git a/src/test/java/run/halo/app/config/CorsTest.java b/src/test/java/run/halo/app/config/CorsTest.java\n--- a/src/test/java/run/halo/app/config/CorsTest.java\n+++ b/src/test/java/run/halo/app/config/CorsTest.java\n@@ -0,0 +1,93 @@\n+package run.halo.app.config;\n+\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.MediaType;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.reactive.server.WebTestClient;\n+\n+@SpringBootTest\n+@AutoConfigureWebTestClient\n+class CorsTest {\n+\n+    @Autowired\n+    WebTestClient webClient;\n+\n+    @Nested\n+    class RequestCorsEnabledApi {\n+\n+        @Test\n+        @WithMockUser\n+        void shouldNotResponseAllowOriginHeaderWithSameOrigin() {\n+            webClient.get().uri(\"http://localhost:3000/apis/cors-enabled\")\n+                .header(HttpHeaders.ORIGIN, \"http://localhost:3000\")\n+                .header(HttpHeaders.AUTHORIZATION, \"fake-authorization\")\n+                .header(\"FakeHeader\", \"fake-header-value\")\n+                .accept(MediaType.APPLICATION_JSON)\n+                .exchange()\n+                .expectHeader()\n+                .doesNotExist(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN);\n+        }\n+\n+        @Test\n+        @WithMockUser\n+        void shouldResponseAllowOriginHeaderWithDifferentOrigin() {\n+            webClient.get().uri(\"http://localhost:3000/apis/cors-enabled\")\n+                .header(HttpHeaders.ORIGIN, \"https://another.website\")\n+                .header(HttpHeaders.AUTHORIZATION, \"fake-authorization\")\n+                // .header(\"ForbiddenHeader\", \"fake value\")\n+                .accept(MediaType.APPLICATION_JSON)\n+                .exchange()\n+                .expectHeader()\n+                .exists(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN);\n+        }\n+\n+        @Test\n+        @WithMockUser\n+        void shouldResponseAllowOriginHeaderWithForbiddenHeader() {\n+            webClient.get().uri(\"http://localhost:3000/apis/cors-enabled\")\n+                .header(HttpHeaders.ORIGIN, \"https://another.website\")\n+                .header(HttpHeaders.AUTHORIZATION, \"fake-authorization\")\n+                .header(\"FakeHeader\", \"fake-header-value\")\n+                // .header(\"ForbiddenHeader\", \"fake value\")\n+                .accept(MediaType.APPLICATION_JSON)\n+                .exchange()\n+                .expectHeader()\n+                .exists(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN);\n+        }\n+    }\n+\n+    @Nested\n+    class RequestCorsDisabledApi {\n+\n+        @Test\n+        @WithMockUser\n+        void shouldNotResponseAllowOriginHeaderWithDifferentOrigin() {\n+            webClient.get().uri(\"http://localhost:3000/cors-disabled\")\n+                .header(HttpHeaders.ORIGIN, \"https://another.website\")\n+                .header(HttpHeaders.AUTHORIZATION, \"fake-authorization\")\n+                .accept(MediaType.APPLICATION_JSON)\n+                .exchange()\n+                .expectHeader()\n+                .doesNotExist(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN);\n+        }\n+\n+        @Test\n+        @WithMockUser\n+        void shouldNotResponseAllowOriginHeaderWithSameOrigin() {\n+            webClient.get().uri(\"http://localhost:3000/cors-disabled\")\n+                .header(HttpHeaders.ORIGIN, \"http://localhost:3000\")\n+                .header(HttpHeaders.AUTHORIZATION, \"fake-authorization\")\n+                .header(\"FakeHeader\", \"fake-header-value\")\n+                .accept(MediaType.APPLICATION_JSON)\n+                .exchange()\n+                .expectHeader()\n+                .doesNotExist(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN);\n+        }\n+    }\n+\n+}",
    "output": "Configure CORS for API endpoints (#2175)"
  },
  {
    "input": "diff --git a/src/test/java/run/halo/app/extension/JsonExtensionConverterTest.java b/src/test/java/run/halo/app/extension/JsonExtensionConverterTest.java\n--- a/src/test/java/run/halo/app/extension/JsonExtensionConverterTest.java\n+++ b/src/test/java/run/halo/app/extension/JsonExtensionConverterTest.java\n@@ -6,6 +6,8 @@\n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import java.io.IOException;\n+import java.util.Locale;\n+import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import run.halo.app.extension.exception.ExtensionConvertException;\n@@ -18,15 +20,25 @@ class JsonExtensionConverterTest {\n \n     ObjectMapper objectMapper;\n \n+    Locale localeDefault;\n+\n     @BeforeEach\n     void setUp() {\n+        localeDefault = Locale.getDefault();\n+        Locale.setDefault(Locale.ENGLISH);\n+\n         DefaultSchemeManager schemeManager = new DefaultSchemeManager(null);\n         converter = new JSONExtensionConverter(schemeManager);\n         objectMapper = JSONExtensionConverter.OBJECT_MAPPER;\n \n         schemeManager.register(FakeExtension.class);\n     }\n \n+    @AfterEach\n+    void cleanUp() {\n+        Locale.setDefault(localeDefault);\n+    }\n+\n     @Test\n     void convertTo() throws IOException {\n         var fake = createFakeExtension(\"fake\", 10L);",
    "output": "fix: locale for unit test of json extension converter (#2170)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/plugin/HaloPluginManager.java b/src/main/java/run/halo/app/plugin/HaloPluginManager.java\n--- a/src/main/java/run/halo/app/plugin/HaloPluginManager.java\n+++ b/src/main/java/run/halo/app/plugin/HaloPluginManager.java\n@@ -82,8 +82,6 @@ public PluginApplicationContext getPluginApplicationContext(String pluginId) {\n \n     @Override\n     public void afterPropertiesSet() {\n-        // This method load, start plugins and inject extensions in Spring\n-        loadPlugins();\n         this.pluginApplicationInitializer = new PluginApplicationInitializer(this);\n \n         this.requestMappingManager =\n\ndiff --git a/src/main/java/run/halo/app/plugin/PluginInitializationLoadOnApplicationReady.java b/src/main/java/run/halo/app/plugin/PluginInitializationLoadOnApplicationReady.java\n--- a/src/main/java/run/halo/app/plugin/PluginInitializationLoadOnApplicationReady.java\n+++ b/src/main/java/run/halo/app/plugin/PluginInitializationLoadOnApplicationReady.java\n@@ -0,0 +1,27 @@\n+package run.halo.app.plugin;\n+\n+import org.springframework.boot.context.event.ApplicationReadyEvent;\n+import org.springframework.context.ApplicationListener;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Load plugins after application ready.\n+ *\n+ * @author guqing\n+ * @since 2.0.0\n+ */\n+@Component\n+public class PluginInitializationLoadOnApplicationReady\n+    implements ApplicationListener<ApplicationReadyEvent> {\n+\n+    private final HaloPluginManager haloPluginManager;\n+\n+    public PluginInitializationLoadOnApplicationReady(HaloPluginManager haloPluginManager) {\n+        this.haloPluginManager = haloPluginManager;\n+    }\n+\n+    @Override\n+    public void onApplicationEvent(ApplicationReadyEvent event) {\n+        haloPluginManager.loadPlugins();\n+    }\n+}\n\ndiff --git a/src/main/java/run/halo/app/plugin/PluginUnstructuredResourceLoader.java b/src/main/java/run/halo/app/plugin/PluginUnstructuredResourceLoader.java\n--- a/src/main/java/run/halo/app/plugin/PluginUnstructuredResourceLoader.java\n+++ b/src/main/java/run/halo/app/plugin/PluginUnstructuredResourceLoader.java\n@@ -0,0 +1,86 @@\n+package run.halo.app.plugin;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.jar.JarFile;\n+import java.util.zip.ZipEntry;\n+import org.pf4j.PluginRuntimeException;\n+import org.pf4j.PluginWrapper;\n+import org.springframework.core.io.DefaultResourceLoader;\n+import org.springframework.core.io.Resource;\n+import org.springframework.lang.NonNull;\n+import run.halo.app.extension.Unstructured;\n+import run.halo.app.infra.utils.YamlUnstructuredLoader;\n+\n+/**\n+ * Plug in unstructured data loader.\n+ * TODO Rename this class to an appropriate name.\n+ *\n+ * @author guqing\n+ * @see YamlUnstructuredLoader\n+ * @see PluginWrapper\n+ * @see DefaultResourceLoader\n+ * @since 2.0.0\n+ */\n+public class PluginUnstructuredResourceLoader {\n+    private static final String DEFAULT_RESOURCE_LOCATION = \"extensions/\";\n+    private final String resourceLocation;\n+\n+    public PluginUnstructuredResourceLoader() {\n+        resourceLocation = DEFAULT_RESOURCE_LOCATION;\n+    }\n+\n+    public PluginUnstructuredResourceLoader(String resourceLocation) {\n+        this.resourceLocation = resourceLocation;\n+    }\n+\n+    /**\n+     * Loading unstructured yaml configuration files in plugins.\n+     *\n+     * @param pluginWrapper Wrapper object holding plugin data\n+     * @return a collection of {@link Unstructured} data(never null)\n+     */\n+    @NonNull\n+    public List<Unstructured> loadUnstructured(PluginWrapper pluginWrapper) {\n+        List<String> unstructuredFilePaths =\n+            getUnstructuredFilePathFromJar(pluginWrapper.getPluginPath());\n+\n+        DefaultResourceLoader resourceLoader =\n+            new DefaultResourceLoader(pluginWrapper.getPluginClassLoader());\n+        Resource[] resources = unstructuredFilePaths.stream()\n+            .map(resourceLoader::getResource)\n+            .filter(Resource::exists)\n+            .toArray(Resource[]::new);\n+\n+        YamlUnstructuredLoader yamlUnstructuredLoader = new YamlUnstructuredLoader(resources);\n+        return yamlUnstructuredLoader.load();\n+    }\n+\n+    /**\n+     * <p>Lists the path of the unstructured yaml configuration file from the plugin jar.</p>\n+     *\n+     * @param jarPath plugin jar path\n+     * @return Unstructured file paths relative to plugin classpath\n+     * @throws PluginRuntimeException If loading the file fails\n+     */\n+    public List<String> getUnstructuredFilePathFromJar(Path jarPath) {\n+        try (JarFile jarFile = new JarFile(jarPath.toFile())) {\n+            return jarFile.stream()\n+                .filter(jarEntry -> {\n+                    String name = jarEntry.getName();\n+                    return name.startsWith(resourceLocation)\n+                        && !jarEntry.isDirectory()\n+                        && isYamlFile(name);\n+                })\n+                .map(ZipEntry::getName)\n+                .toList();\n+        } catch (IOException e) {\n+            throw new PluginRuntimeException(e);\n+        }\n+    }\n+\n+    private boolean isYamlFile(String path) {\n+        return path.endsWith(\".yaml\") || path.endsWith(\".yml\");\n+    }\n+}\n\ndiff --git a/src/test/java/run/halo/app/plugin/PluginUnstructuredResourceLoaderTest.java b/src/test/java/run/halo/app/plugin/PluginUnstructuredResourceLoaderTest.java\n--- a/src/test/java/run/halo/app/plugin/PluginUnstructuredResourceLoaderTest.java\n+++ b/src/test/java/run/halo/app/plugin/PluginUnstructuredResourceLoaderTest.java\n@@ -0,0 +1,36 @@\n+package run.halo.app.plugin;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.util.List;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.util.ResourceUtils;\n+\n+/**\n+ * Tests for {@link PluginUnstructuredResourceLoader}.\n+ *\n+ * @author guqing\n+ * @since 2.0.0\n+ */\n+class PluginUnstructuredResourceLoaderTest {\n+\n+    private PluginUnstructuredResourceLoader unstructuredResourceLoader;\n+\n+    @BeforeEach\n+    void setUp() {\n+        unstructuredResourceLoader = new PluginUnstructuredResourceLoader();\n+    }\n+\n+    @Test\n+    void getUnstructuredFilePathFromJar() throws FileNotFoundException {\n+        File file = ResourceUtils.getFile(\"classpath:plugin/test-unstructured-resource-loader.jar\");\n+        List<String> unstructuredFilePathFromJar =\n+            unstructuredResourceLoader.getUnstructuredFilePathFromJar(file.toPath());\n+        assertThat(unstructuredFilePathFromJar).hasSize(3);\n+        assertThat(unstructuredFilePathFromJar).contains(\"extensions/roles.yaml\",\n+            \"extensions/reverseProxy.yaml\", \"extensions/test.yml\");\n+    }\n+}\n\\ No newline at end of file",
    "output": "feat: add plugin unstructured resource loader (#2154)\n\n* feat: add plugin unstructured resource loader\n\n* feat: add test unit case"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/WebFluxConfig.java b/src/main/java/run/halo/app/config/WebFluxConfig.java\n--- a/src/main/java/run/halo/app/config/WebFluxConfig.java\n+++ b/src/main/java/run/halo/app/config/WebFluxConfig.java\n@@ -1,10 +1,14 @@\n package run.halo.app.config;\n \n+import com.fasterxml.jackson.databind.ObjectMapper;\n import java.util.List;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.http.codec.CodecConfigurer;\n import org.springframework.http.codec.HttpMessageWriter;\n+import org.springframework.http.codec.ServerCodecConfigurer;\n+import org.springframework.http.codec.json.Jackson2JsonDecoder;\n+import org.springframework.http.codec.json.Jackson2JsonEncoder;\n import org.springframework.lang.NonNull;\n import org.springframework.web.reactive.config.EnableWebFlux;\n import org.springframework.web.reactive.config.WebFluxConfigurer;\n@@ -16,6 +20,12 @@\n @EnableWebFlux\n public class WebFluxConfig implements WebFluxConfigurer {\n \n+    final ObjectMapper objectMapper;\n+\n+    public WebFluxConfig(ObjectMapper objectMapper) {\n+        this.objectMapper = objectMapper;\n+    }\n+\n     @Bean\n     ServerResponse.Context context(CodecConfigurer codec,\n         ViewResolutionResultHandler resultHandler) {\n@@ -33,4 +43,13 @@ public List<ViewResolver> viewResolvers() {\n             }\n         };\n     }\n+\n+    @Override\n+    public void configureHttpMessageCodecs(ServerCodecConfigurer configurer) {\n+        // we need to customize the Jackson2Json[Decoder][Encoder] here to serialize and\n+        // deserialize special types, e.g.: Instant, LocalDateTime. So we use ObjectMapper\n+        // created by outside.\n+        configurer.defaultCodecs().jackson2JsonDecoder(new Jackson2JsonDecoder(objectMapper));\n+        configurer.defaultCodecs().jackson2JsonEncoder(new Jackson2JsonEncoder(objectMapper));\n+    }\n }\n\ndiff --git a/src/main/java/run/halo/app/config/WebServerSecurityConfig.java b/src/main/java/run/halo/app/config/WebServerSecurityConfig.java\n--- a/src/main/java/run/halo/app/config/WebServerSecurityConfig.java\n+++ b/src/main/java/run/halo/app/config/WebServerSecurityConfig.java\n@@ -73,10 +73,14 @@ SecurityWebFilterChain apiFilterChain(ServerHttpSecurity http,\n     }\n \n     @Bean\n+    @Order(0)\n     SecurityWebFilterChain webFilterChain(ServerHttpSecurity http) {\n-        http.authorizeExchange(\n-                exchanges -> exchanges.pathMatchers(\"/v3/api-docs/**\", \"/v3/api-docs.yaml\",\n-                    \"/swagger-ui/**\", \"/swagger-ui.html\", \"/webjars/**\").permitAll())\n+        http.authorizeExchange(exchanges -> exchanges.pathMatchers(\n+                \"/v3/api-docs/**\",\n+                \"/v3/api-docs.yaml\",\n+                \"/swagger-ui/**\",\n+                \"/swagger-ui.html\",\n+                \"/webjars/**\").permitAll())\n             .authorizeExchange(exchanges -> exchanges.anyExchange().authenticated())\n             .cors(withDefaults())\n             .httpBasic(withDefaults())\n\ndiff --git a/src/test/java/run/halo/app/config/ServerCodecTest.java b/src/test/java/run/halo/app/config/ServerCodecTest.java\n--- a/src/test/java/run/halo/app/config/ServerCodecTest.java\n+++ b/src/test/java/run/halo/app/config/ServerCodecTest.java\n@@ -0,0 +1,94 @@\n+package run.halo.app.config;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.springframework.security.test.web.reactive.server.SecurityMockServerConfigurers.csrf;\n+import static org.springframework.web.reactive.function.server.RequestPredicates.accept;\n+import static org.springframework.web.reactive.function.server.RequestPredicates.contentType;\n+import static org.springframework.web.reactive.function.server.RouterFunctions.route;\n+\n+import java.time.Instant;\n+import java.time.LocalDateTime;\n+import java.util.Map;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.core.ParameterizedTypeReference;\n+import org.springframework.http.MediaType;\n+import org.springframework.security.test.context.support.WithMockUser;\n+import org.springframework.test.web.reactive.server.WebTestClient;\n+import org.springframework.web.reactive.function.server.RouterFunction;\n+import org.springframework.web.reactive.function.server.ServerResponse;\n+\n+@SpringBootTest\n+@AutoConfigureWebTestClient\n+@Import(ServerCodecTest.TestConfig.class)\n+class ServerCodecTest {\n+\n+    static final String INSTANT = \"2022-06-09T10:57:30Z\";\n+\n+    static final String LOCAL_DATE_TIME = \"2022-06-10T10:57:30\";\n+\n+    @Autowired\n+    WebTestClient webClient;\n+\n+    @Test\n+    @WithMockUser\n+    void timeSerializationTest() {\n+        webClient.get().uri(\"/fake/api/times\")\n+            .exchange()\n+            .expectStatus().isOk()\n+            .expectHeader().contentType(MediaType.APPLICATION_JSON)\n+            .expectBody()\n+            .jsonPath(\"$.instant\").value(equalTo(INSTANT))\n+            .jsonPath(\"$.localDateTime\").value(equalTo(LOCAL_DATE_TIME))\n+        ;\n+    }\n+\n+    @Test\n+    @WithMockUser\n+    void timeDeserializationTest() {\n+        webClient\n+            .mutateWith(csrf())\n+            .post().uri(\"/fake/api/time/report\")\n+            .contentType(MediaType.APPLICATION_JSON)\n+            .accept(MediaType.APPLICATION_JSON)\n+            .bodyValue(Map.of(\"now\", Instant.parse(INSTANT)))\n+            .exchange()\n+            .expectStatus().isOk()\n+            .expectHeader().contentType(MediaType.APPLICATION_JSON)\n+            .expectBody(new ParameterizedTypeReference<Map<String, Instant>>() {\n+            }).isEqualTo(Map.of(\"now\", Instant.parse(INSTANT)))\n+        ;\n+    }\n+\n+    @TestConfiguration(proxyBeanMethods = false)\n+    static class TestConfig {\n+\n+        @Bean\n+        RouterFunction<ServerResponse> timesRouter() {\n+            return route().GET(\"/fake/api/times\", request -> {\n+                var times = Map.of(\"instant\", Instant.parse(INSTANT),\n+                    \"localDateTime\", LocalDateTime.parse(LOCAL_DATE_TIME));\n+                return ServerResponse\n+                    .ok()\n+                    .contentType(MediaType.APPLICATION_JSON)\n+                    .bodyValue(times);\n+            }).build();\n+        }\n+\n+        @Bean\n+        RouterFunction<ServerResponse> reportTime() {\n+            final var type = new ParameterizedTypeReference<Map<String, Instant>>() {\n+            };\n+            return route().POST(\"/fake/api/time/report\",\n+                    contentType(MediaType.APPLICATION_JSON).and(accept(MediaType.APPLICATION_JSON)),\n+                    request -> ServerResponse.ok()\n+                        .body(request.bodyToMono(type), type))\n+                .build();\n+        }\n+    }\n+}",
    "output": "Overwrite Jackson2Json decoder and encoder (#2145)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/WebServerSecurityConfig.java b/src/main/java/run/halo/app/config/WebServerSecurityConfig.java\n--- a/src/main/java/run/halo/app/config/WebServerSecurityConfig.java\n+++ b/src/main/java/run/halo/app/config/WebServerSecurityConfig.java\n@@ -25,6 +25,7 @@\n import org.springframework.security.oauth2.jwt.ReactiveJwtDecoder;\n import org.springframework.security.oauth2.jwt.SupplierReactiveJwtDecoder;\n import org.springframework.security.web.server.SecurityWebFilterChain;\n+import org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository;\n import org.springframework.web.reactive.function.server.ServerResponse;\n import run.halo.app.infra.properties.JwtProperties;\n import run.halo.app.security.authentication.jwt.LoginAuthenticationFilter;\n@@ -77,7 +78,10 @@ SecurityWebFilterChain webFilterChain(ServerHttpSecurity http) {\n                 exchanges -> exchanges.pathMatchers(\"/v3/api-docs/**\", \"/v3/api-docs.yaml\",\n                     \"/swagger-ui/**\", \"/swagger-ui.html\", \"/webjars/**\").permitAll())\n             .authorizeExchange(exchanges -> exchanges.anyExchange().authenticated())\n-            .cors(withDefaults()).httpBasic(withDefaults()).formLogin(withDefaults())\n+            .cors(withDefaults())\n+            .httpBasic(withDefaults())\n+            .formLogin(withDefaults())\n+            .csrf().csrfTokenRepository(new CookieServerCsrfTokenRepository()).and()\n             .logout(withDefaults());\n \n         return http.build();",
    "output": "Enable CSRF token in Set-Cookie header (#2144)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/identity/authorization/PolicyRule.java b/src/main/java/run/halo/app/identity/authorization/PolicyRule.java\n--- a/src/main/java/run/halo/app/identity/authorization/PolicyRule.java\n+++ b/src/main/java/run/halo/app/identity/authorization/PolicyRule.java\n@@ -1,8 +1,6 @@\n package run.halo.app.identity.authorization;\n \n-import lombok.AllArgsConstructor;\n import lombok.Data;\n-import lombok.NoArgsConstructor;\n \n /**\n  * PolicyRule holds information that describes a policy rule, but does not contain information\n@@ -12,8 +10,6 @@\n  * @since 2.0.0\n  */\n @Data\n-@AllArgsConstructor\n-@NoArgsConstructor\n public class PolicyRule {\n \n     /**\n@@ -53,6 +49,22 @@ public class PolicyRule {\n      */\n     String[] verbs;\n \n+    public PolicyRule(String[] apiGroups, String[] resources, String[] resourceNames,\n+        String[] nonResourceURLs, String[] verbs) {\n+        this.apiGroups = nullElseEmpty(apiGroups);\n+        this.resources = nullElseEmpty(resources);\n+        this.resourceNames = nullElseEmpty(resourceNames);\n+        this.nonResourceURLs = nullElseEmpty(nonResourceURLs);\n+        this.verbs = nullElseEmpty(verbs);\n+    }\n+\n+    String[] nullElseEmpty(String... items) {\n+        if (items == null) {\n+            return new String[] {};\n+        }\n+        return items;\n+    }\n+\n     public static class Builder {\n         String[] apiGroups;\n         String[] resources;\n@@ -85,21 +97,8 @@ public Builder verbs(String... verbs) {\n             return this;\n         }\n \n-        String[] nullElseEmpty(String... items) {\n-            if (items == null) {\n-                return new String[] {};\n-            }\n-            return items;\n-        }\n-\n         public PolicyRule build() {\n-            return new PolicyRule(\n-                nullElseEmpty(apiGroups),\n-                nullElseEmpty(resources),\n-                nullElseEmpty(resourceNames),\n-                nullElseEmpty(nonResourceURLs),\n-                nullElseEmpty(verbs)\n-            );\n+            return new PolicyRule(apiGroups, resources, resourceNames, nonResourceURLs, verbs);\n         }\n     }\n }\n\ndiff --git a/src/test/java/run/halo/app/identity/authorization/PolicyRuleTest.java b/src/test/java/run/halo/app/identity/authorization/PolicyRuleTest.java\n--- a/src/test/java/run/halo/app/identity/authorization/PolicyRuleTest.java\n+++ b/src/test/java/run/halo/app/identity/authorization/PolicyRuleTest.java\n@@ -0,0 +1,72 @@\n+package run.halo.app.identity.authorization;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import run.halo.app.infra.utils.JsonUtils;\n+\n+/**\n+ * Tests for {@link PolicyRule}.\n+ *\n+ * @author guqing\n+ * @since 2.0.0\n+ */\n+class PolicyRuleTest {\n+    private ObjectMapper objectMapper;\n+\n+    @BeforeEach\n+    void setUp() {\n+        objectMapper = JsonUtils.DEFAULT_JSON_MAPPER;\n+    }\n+\n+    @Test\n+    public void constructPolicyRule() throws JsonProcessingException {\n+        PolicyRule policyRule = new PolicyRule(null, null, null, null, null);\n+        assertThat(policyRule).isNotNull();\n+        JsonNode policyRuleJson = objectMapper.valueToTree(policyRule);\n+        assertThat(policyRuleJson).isEqualTo(objectMapper.readTree(\"\"\"\n+            {\"apiGroups\":[],\"resources\":[],\"resourceNames\":[],\"nonResourceURLs\":[],\"verbs\":[]}\n+            \"\"\"));\n+\n+        PolicyRule policyByBuilder = new PolicyRule.Builder().build();\n+        JsonNode policyByBuilderJson = objectMapper.valueToTree(policyByBuilder);\n+        assertThat(policyByBuilderJson).isEqualTo(objectMapper.readTree(\"\"\"\n+            {\"apiGroups\":[],\"resources\":[],\"resourceNames\":[],\"nonResourceURLs\":[],\"verbs\":[]}\n+             \"\"\"));\n+\n+        PolicyRule policyNonNull = new PolicyRule.Builder()\n+            .apiGroups(\"group\")\n+            .resources(\"resource-1\", \"resource-2\")\n+            .resourceNames(\"resourceName\")\n+            .nonResourceURLs(\"non resource url\")\n+            .verbs(\"verbs\")\n+            .build();\n+\n+        JsonNode expected = objectMapper.readTree(\"\"\"\n+            {\n+                \"apiGroups\": [\n+                    \"group\"\n+                ],\n+                \"resources\": [\n+                    \"resource-1\",\n+                    \"resource-2\"\n+                ],\n+                \"resourceNames\": [\n+                    \"resourceName\"\n+                ],\n+                \"nonResourceURLs\": [\n+                    \"non resource url\"\n+                ],\n+                \"verbs\": [\n+                    \"verbs\"\n+                ]\n+            }\n+            \"\"\");\n+        JsonNode policyNonNullJson = objectMapper.valueToTree(policyNonNull);\n+        assertThat(policyNonNullJson).isEqualTo(expected);\n+    }\n+}\n\\ No newline at end of file",
    "output": "refactor: policy rule constructor to avoid null values (#2131)\n\n* refactor: policy rule constructor to avoid null values\n\n* fix: unit test case"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/WebSecurityConfig.java b/src/main/java/run/halo/app/config/WebSecurityConfig.java\n--- a/src/main/java/run/halo/app/config/WebSecurityConfig.java\n+++ b/src/main/java/run/halo/app/config/WebSecurityConfig.java\n@@ -83,7 +83,10 @@ public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Excepti\n         http\n             .authorizeHttpRequests((authorize) -> authorize\n                 .antMatchers(providerSettings.getTokenEndpoint()).permitAll()\n+                // for static path\n                 .antMatchers(\"/static/js/**\").permitAll()\n+                // for swagger ui\n+                .antMatchers(\"/v3/api-docs/**\", \"/swagger-ui/**\", \"/swagger-ui.html\").permitAll()\n                 .antMatchers(\"/api/**\", \"/apis/**\").access(requestInfoAuthorizationManager())\n                 .anyRequest().access(requestInfoAuthorizationManager())\n             )",
    "output": "Add support for API documentation (#2082)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/identity/authentication/OAuth2PasswordAuthenticationProvider.java b/src/main/java/run/halo/app/identity/authentication/OAuth2PasswordAuthenticationProvider.java\n--- a/src/main/java/run/halo/app/identity/authentication/OAuth2PasswordAuthenticationProvider.java\n+++ b/src/main/java/run/halo/app/identity/authentication/OAuth2PasswordAuthenticationProvider.java\n@@ -1,5 +1,6 @@\n package run.halo.app.identity.authentication;\n \n+import java.security.Principal;\n import java.util.Collections;\n import java.util.Set;\n import java.util.stream.Collectors;\n@@ -78,7 +79,8 @@ protected Authentication createSuccessAuthentication(Object principal,\n         OAuth2Authorization.Builder authorizationBuilder = new OAuth2Authorization.Builder()\n             .principalName(authentication.getName())\n             .authorizationGrantType(AuthorizationGrantType.PASSWORD)\n-            .attribute(OAuth2Authorization.AUTHORIZED_SCOPE_ATTRIBUTE_NAME, scopes);\n+            .attribute(OAuth2Authorization.AUTHORIZED_SCOPE_ATTRIBUTE_NAME, scopes)\n+            .attribute(Principal.class.getName(), authentication);\n \n         // ----- Access token -----\n         OAuth2TokenContext tokenContext =",
    "output": "feat: Add Principal attribute to authorizationBuilder when password authenticate successfully (#1878)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/WebSecurityConfig.java b/src/main/java/run/halo/app/config/WebSecurityConfig.java\n--- a/src/main/java/run/halo/app/config/WebSecurityConfig.java\n+++ b/src/main/java/run/halo/app/config/WebSecurityConfig.java\n@@ -6,12 +6,14 @@\n import com.nimbusds.jose.jwk.source.ImmutableJWKSet;\n import com.nimbusds.jose.jwk.source.JWKSource;\n import com.nimbusds.jose.proc.SecurityContext;\n+import jakarta.servlet.http.HttpServletRequest;\n import java.io.IOException;\n import java.security.interfaces.RSAPrivateKey;\n import java.security.interfaces.RSAPublicKey;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.annotation.Bean;\n import org.springframework.security.authentication.AuthenticationManager;\n+import org.springframework.security.authentication.AuthenticationManagerResolver;\n import org.springframework.security.config.Customizer;\n import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\n import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n@@ -29,6 +31,7 @@\n import org.springframework.security.provisioning.InMemoryUserDetailsManager;\n import org.springframework.security.web.SecurityFilterChain;\n import org.springframework.security.web.access.intercept.FilterSecurityInterceptor;\n+import org.springframework.security.web.authentication.www.BasicAuthenticationFilter;\n import org.springframework.security.web.context.SecurityContextPersistenceFilter;\n import run.halo.app.identity.authentication.InMemoryOAuth2AuthorizationService;\n import run.halo.app.identity.authentication.JwtGenerator;\n@@ -38,6 +41,8 @@\n import run.halo.app.identity.authentication.OAuth2TokenEndpointFilter;\n import run.halo.app.identity.authentication.ProviderContextFilter;\n import run.halo.app.identity.authentication.ProviderSettings;\n+import run.halo.app.identity.authentication.verifier.BearerTokenAuthenticationFilter;\n+import run.halo.app.identity.authentication.verifier.JwtProvidedDecoderAuthenticationManagerResolver;\n import run.halo.app.identity.entrypoint.JwtAccessDeniedHandler;\n import run.halo.app.identity.entrypoint.JwtAuthenticationEntryPoint;\n import run.halo.app.infra.properties.JwtProperties;\n@@ -77,6 +82,8 @@ public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Excepti\n             .addFilterBefore(new OAuth2TokenEndpointFilter(authenticationManager(),\n                     providerSettings.getTokenEndpoint()),\n                 FilterSecurityInterceptor.class)\n+            .addFilterBefore(new BearerTokenAuthenticationFilter(authenticationManagerResolver()),\n+                BasicAuthenticationFilter.class)\n             .addFilterAfter(providerContextFilter, SecurityContextPersistenceFilter.class)\n             .sessionManagement(\n                 (session) -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))\n@@ -87,6 +94,10 @@ public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Excepti\n         return http.build();\n     }\n \n+    AuthenticationManagerResolver<HttpServletRequest> authenticationManagerResolver() {\n+        return new JwtProvidedDecoderAuthenticationManagerResolver(jwtDecoder());\n+    }\n+\n     @Bean\n     AuthenticationManager authenticationManager() throws Exception {\n         authenticationManagerBuilder.authenticationProvider(passwordAuthenticationProvider())\n\ndiff --git a/src/main/java/run/halo/app/identity/HelloController.java b/src/main/java/run/halo/app/identity/HelloController.java\n--- a/src/main/java/run/halo/app/identity/HelloController.java\n+++ b/src/main/java/run/halo/app/identity/HelloController.java\n@@ -0,0 +1,21 @@\n+package run.halo.app.identity;\n+\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+/**\n+ * A controller should ONLY be used during testing for this PR.\n+ *\n+ * @author guqing\n+ * @since 2.0.0\n+ */\n+@RestController\n+@RequestMapping(\"/tests\")\n+public class HelloController {\n+\n+    @GetMapping\n+    public String hello() {\n+        return \"Now you see me.\";\n+    }\n+}\n\ndiff --git a/src/main/java/run/halo/app/identity/authentication/verifier/JwtProvidedDecoderAuthenticationManagerResolver.java b/src/main/java/run/halo/app/identity/authentication/verifier/JwtProvidedDecoderAuthenticationManagerResolver.java\n--- a/src/main/java/run/halo/app/identity/authentication/verifier/JwtProvidedDecoderAuthenticationManagerResolver.java\n+++ b/src/main/java/run/halo/app/identity/authentication/verifier/JwtProvidedDecoderAuthenticationManagerResolver.java\n@@ -0,0 +1,25 @@\n+package run.halo.app.identity.authentication.verifier;\n+\n+import jakarta.servlet.http.HttpServletRequest;\n+import org.springframework.security.authentication.AuthenticationManager;\n+import org.springframework.security.authentication.AuthenticationManagerResolver;\n+import org.springframework.security.oauth2.jwt.JwtDecoder;\n+import org.springframework.util.Assert;\n+\n+/**\n+ * A jwt resolver for {@link AuthenticationManager} use {@link JwtDecoder}.\n+ *\n+ * @author guqing\n+ * @since 2.0.0\n+ */\n+public record JwtProvidedDecoderAuthenticationManagerResolver(JwtDecoder jwtDecoder)\n+    implements AuthenticationManagerResolver<HttpServletRequest> {\n+    public JwtProvidedDecoderAuthenticationManagerResolver {\n+        Assert.notNull(jwtDecoder, \"jwtDecoder cannot be null\");\n+    }\n+\n+    @Override\n+    public AuthenticationManager resolve(HttpServletRequest request) {\n+        return new JwtAuthenticationProvider(jwtDecoder)::authenticate;\n+    }\n+}",
    "output": "feat: Add bearer token filter config for authentication (#1876)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/WebSecurityConfig.java b/src/main/java/run/halo/app/config/WebSecurityConfig.java\n--- a/src/main/java/run/halo/app/config/WebSecurityConfig.java\n+++ b/src/main/java/run/halo/app/config/WebSecurityConfig.java\n@@ -44,7 +44,7 @@\n \n /**\n  * @author guqing\n- * @date 2022-04-12\n+ * @since 2022-04-12\n  */\n @EnableWebSecurity\n @EnableConfigurationProperties(JwtProperties.class)\n@@ -69,12 +69,13 @@ public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Excepti\n         ProviderContextFilter providerContextFilter = new ProviderContextFilter(providerSettings);\n         http\n             .authorizeHttpRequests((authorize) -> authorize\n-                .antMatchers(\"/api/v1/oauth2/token\").permitAll()\n+                .antMatchers(providerSettings.getTokenEndpoint()).permitAll()\n                 .antMatchers(\"/api/**\", \"/apis/**\").authenticated()\n             )\n             .csrf(AbstractHttpConfigurer::disable)\n             .httpBasic(Customizer.withDefaults())\n-            .addFilterBefore(new OAuth2TokenEndpointFilter(authenticationManager()),\n+            .addFilterBefore(new OAuth2TokenEndpointFilter(authenticationManager(),\n+                    providerSettings.getTokenEndpoint()),\n                 FilterSecurityInterceptor.class)\n             .addFilterAfter(providerContextFilter, SecurityContextPersistenceFilter.class)\n             .sessionManagement(",
    "output": "chore: use providerSettings to create OAuth2TokenEndpointFilter (#1863)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/Application.java b/src/main/java/run/halo/app/Application.java\n--- a/src/main/java/run/halo/app/Application.java\n+++ b/src/main/java/run/halo/app/Application.java\n@@ -0,0 +1,21 @@\n+package run.halo.app;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+\n+/**\n+ * Halo main class.\n+ *\n+ * @author ryanwang\n+ * @author JohnNiang\n+ * @author guqing\n+ * @date 2017-11-14\n+ */\n+@SpringBootApplication\n+public class Application {\n+\n+    public static void main(String[] args) {\n+        SpringApplication.run(Application.class, args);\n+    }\n+\n+}\n\ndiff --git a/src/test/java/run/halo/app/ApplicationTests.java b/src/test/java/run/halo/app/ApplicationTests.java\n--- a/src/test/java/run/halo/app/ApplicationTests.java\n+++ b/src/test/java/run/halo/app/ApplicationTests.java\n@@ -0,0 +1,13 @@\n+package run.halo.app;\n+\n+import org.junit.jupiter.api.Test;\n+import org.springframework.boot.test.context.SpringBootTest;\n+\n+@SpringBootTest\n+class ApplicationTests {\n+\n+    @Test\n+    void contextLoads() {\n+    }\n+\n+}",
    "output": "Create basic project structure for halo 2.0 (#1699)\n\n* feat: Add project structure\r\n\r\n* feat: Add config\r\n\r\n* feat: Add flyway migrate config for h2 and mysql and postgresql\r\n\r\n* fix: checkstyle config\r\n\r\n* chore: Upgrade springboot 2.6 to 3.0.0-m1\r\n\r\n* feat: Add spring snapshot url for repositories\r\n\r\n* refactor: Change jdk11 to jdk17 for github ci config\r\n\r\n* refactor: update build.gradle config"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/cache/AbstractStringCacheStore.java b/src/main/java/run/halo/app/cache/AbstractStringCacheStore.java\n--- a/src/main/java/run/halo/app/cache/AbstractStringCacheStore.java\n+++ b/src/main/java/run/halo/app/cache/AbstractStringCacheStore.java\n@@ -1,6 +1,7 @@\n package run.halo.app.cache;\n \n import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.core.type.TypeReference;\n import java.io.IOException;\n import java.util.Optional;\n import java.util.concurrent.TimeUnit;\n@@ -22,8 +23,8 @@ protected Optional<CacheWrapper<String>> jsonToCacheWrapper(String json) {\n         Assert.hasText(json, \"json value must not be null\");\n         CacheWrapper<String> cacheWrapper = null;\n         try {\n-            cacheWrapper = JsonUtils.jsonToObject(json, CacheWrapper.class);\n-        } catch (IOException e) {\n+            cacheWrapper = JsonUtils.jsonToObject(json, new TypeReference<>() {});\n+        } catch (Exception e) {\n             log.debug(\"Failed to convert json to wrapper value bytes: [{}]\", json, e);\n         }\n         return Optional.ofNullable(cacheWrapper);\n\ndiff --git a/src/test/java/run/halo/app/cache/LevelCacheStoreTest.java b/src/test/java/run/halo/app/cache/LevelCacheStoreTest.java\n--- a/src/test/java/run/halo/app/cache/LevelCacheStoreTest.java\n+++ b/src/test/java/run/halo/app/cache/LevelCacheStoreTest.java\n@@ -0,0 +1,55 @@\n+package run.halo.app.cache;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static run.halo.app.model.support.HaloConst.FILE_SEPARATOR;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Optional;\n+import org.iq80.leveldb.DB;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.test.util.ReflectionTestUtils;\n+import run.halo.app.config.properties.HaloProperties;\n+import run.halo.app.utils.FileUtils;\n+\n+/**\n+ * @author guqing\n+ * @date 2022-03-02\n+ */\n+public class LevelCacheStoreTest {\n+    LevelCacheStore cacheStore;\n+    HaloProperties haloProperties = new HaloProperties();\n+\n+    @BeforeEach\n+    void setUp() throws IOException {\n+        String testDir = FileUtils.createTempDirectory().toString();\n+        System.out.println(testDir);\n+        haloProperties.setWorkDir(testDir + FILE_SEPARATOR);\n+        cacheStore = new LevelCacheStore(haloProperties);\n+        cacheStore.init();\n+    }\n+\n+    @Test\n+    public void corruptCacheStructureTest() {\n+        cacheStore.put(\"A\", \"B\");\n+\n+        // Simulate corrupt cache structure\n+        DB levelDb = (DB) ReflectionTestUtils.getField(cacheStore, \"LEVEL_DB\");\n+        levelDb.put(\"B\".getBytes(StandardCharsets.UTF_8),\n+            \"NOT_JSON\".getBytes(StandardCharsets.UTF_8));\n+\n+        Optional<CacheWrapper> bOpt = cacheStore.getAny(\"B\", CacheWrapper.class);\n+        assertThat(bOpt).isNotNull();\n+        assertThat(bOpt.isEmpty()).isTrue();\n+\n+        assertThat(cacheStore.toMap().toString()).isEqualTo(\"{A=B, B=null}\");\n+    }\n+\n+    @AfterEach\n+    public void cleanUp() {\n+        cacheStore.delete(\"A\");\n+        cacheStore.delete(\"B\");\n+    }\n+}",
    "output": "Fix the problem jsonToCacheWrapper crashes when cache value is not JSON format (#1695)\n\n* fix: json to cache wrapper convertor when other exception\r\n\r\n* feat: Add test case for level cache"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/properties/PrimaryProperties.java b/src/main/java/run/halo/app/model/properties/PrimaryProperties.java\n--- a/src/main/java/run/halo/app/model/properties/PrimaryProperties.java\n+++ b/src/main/java/run/halo/app/model/properties/PrimaryProperties.java\n@@ -23,7 +23,7 @@ public enum PrimaryProperties implements PropertyEnum {\n     /**\n      * blog birthday\n      */\n-    BIRTHDAY(\"birthday\", Long.class, \"\"),\n+    BIRTHDAY(\"birthday\", Long.class, \"0\"),\n \n     /**\n      * developer mode.\n\ndiff --git a/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java b/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n@@ -213,10 +213,6 @@ public Map<String, Object> listOptions() {\n                 .forEach(key -> {\n                     PropertyEnum propertyEnum = propertyEnumMap.get(key);\n \n-                    if (StringUtils.isBlank(propertyEnum.defaultValue())) {\n-                        return;\n-                    }\n-\n                     result.put(key,\n                         PropertyEnum.convertTo(propertyEnum.defaultValue(), propertyEnum));\n                 });",
    "output": "fix: Remove the code that filters empty strings from the properties file\n\n* fix: Remove the code that filters empty strings from the properties file.\r\n* blog birthday default value set \"0\""
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/ContentPatchLogServiceImpl.java b/src/main/java/run/halo/app/service/impl/ContentPatchLogServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ContentPatchLogServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ContentPatchLogServiceImpl.java\n@@ -70,7 +70,8 @@ private Integer getVersionByPostId(Integer postId) {\n         if (latestPatchLog == null) {\n             // There is no patchLog record\n             version = 1;\n-        } else if (PostStatus.PUBLISHED.equals(latestPatchLog.getStatus())) {\n+        } else if (PostStatus.PUBLISHED.equals(latestPatchLog.getStatus())\n+            || PostStatus.INTIMATE.equals(latestPatchLog.getStatus())) {\n             // There is no draft, a draft record needs to be created\n             // so the version number needs to be incremented\n             version = latestPatchLog.getVersion() + 1;",
    "output": "fix: leak of version number inference when create or update content patch (#1690)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/api/PostController.java b/src/main/java/run/halo/app/controller/content/api/PostController.java\n--- a/src/main/java/run/halo/app/controller/content/api/PostController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/PostController.java\n@@ -25,6 +25,7 @@\n import run.halo.app.exception.NotFoundException;\n import run.halo.app.model.dto.BaseCommentDTO;\n import run.halo.app.model.dto.post.BasePostSimpleDTO;\n+import run.halo.app.model.entity.Content;\n import run.halo.app.model.entity.Post;\n import run.halo.app.model.entity.PostComment;\n import run.halo.app.model.enums.CommentStatus;\n@@ -105,7 +106,9 @@ public PostDetailVO getBy(@PathVariable(\"postId\") Integer postId,\n             Boolean formatDisabled,\n         @RequestParam(value = \"sourceDisabled\", required = false, defaultValue = \"false\")\n             Boolean sourceDisabled) {\n-        PostDetailVO postDetailVO = postService.convertToDetailVo(postService.getById(postId));\n+        Post post = postService.getById(postId);\n+        post.setContent(Content.PatchedContent.of(postService.getContentById(postId)));\n+        PostDetailVO postDetailVO = postService.convertToDetailVo(post);\n \n         if (formatDisabled) {\n             // Clear the format content\n@@ -129,7 +132,9 @@ public PostDetailVO getBy(@RequestParam(\"slug\") String slug,\n             Boolean formatDisabled,\n         @RequestParam(value = \"sourceDisabled\", required = false, defaultValue = \"false\")\n             Boolean sourceDisabled) {\n-        PostDetailVO postDetailVO = postService.convertToDetailVo(postService.getBySlug(slug));\n+        Post post = postService.getBySlug(slug);\n+        post.setContent(Content.PatchedContent.of(postService.getContentById(post.getId())));\n+        PostDetailVO postDetailVO = postService.convertToDetailVo(post);\n \n         if (formatDisabled) {\n             // Clear the format content\n@@ -152,6 +157,8 @@ public PostDetailVO getPrevPostBy(@PathVariable(\"postId\") Integer postId) {\n         Post post = postService.getById(postId);\n         Post prevPost =\n             postService.getPrevPost(post).orElseThrow(() -> new NotFoundException(\"查询不到该文章的信息\"));\n+        prevPost.setContent(\n+            Content.PatchedContent.of(postService.getContentById(prevPost.getId())));\n         return postService.convertToDetailVo(prevPost);\n     }\n \n@@ -161,6 +168,8 @@ public PostDetailVO getNextPostBy(@PathVariable(\"postId\") Integer postId) {\n         Post post = postService.getById(postId);\n         Post nextPost =\n             postService.getNextPost(post).orElseThrow(() -> new NotFoundException(\"查询不到该文章的信息\"));\n+        nextPost.setContent(\n+            Content.PatchedContent.of(postService.getContentById(nextPost.getId())));\n         return postService.convertToDetailVo(nextPost);\n     }\n \n\ndiff --git a/src/main/java/run/halo/app/controller/content/api/SheetController.java b/src/main/java/run/halo/app/controller/content/api/SheetController.java\n--- a/src/main/java/run/halo/app/controller/content/api/SheetController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/SheetController.java\n@@ -21,6 +21,7 @@\n import org.springframework.web.util.HtmlUtils;\n import run.halo.app.cache.lock.CacheLock;\n import run.halo.app.model.dto.BaseCommentDTO;\n+import run.halo.app.model.entity.Content;\n import run.halo.app.model.entity.Sheet;\n import run.halo.app.model.entity.SheetComment;\n import run.halo.app.model.enums.CommentStatus;\n@@ -74,7 +75,9 @@ public SheetDetailVO getBy(@PathVariable(\"sheetId\") Integer sheetId,\n             Boolean formatDisabled,\n         @RequestParam(value = \"sourceDisabled\", required = false, defaultValue = \"false\")\n             Boolean sourceDisabled) {\n-        SheetDetailVO sheetDetailVO = sheetService.convertToDetailVo(sheetService.getById(sheetId));\n+        Sheet sheet = sheetService.getById(sheetId);\n+        sheet.setContent(Content.PatchedContent.of(sheetService.getContentById(sheetId)));\n+        SheetDetailVO sheetDetailVO = sheetService.convertToDetailVo(sheet);\n \n         if (formatDisabled) {\n             // Clear the format content\n@@ -98,7 +101,9 @@ public SheetDetailVO getBy(@RequestParam(\"slug\") String slug,\n             Boolean formatDisabled,\n         @RequestParam(value = \"sourceDisabled\", required = false, defaultValue = \"false\")\n             Boolean sourceDisabled) {\n-        SheetDetailVO sheetDetailVO = sheetService.convertToDetailVo(sheetService.getBySlug(slug));\n+        Sheet sheet = sheetService.getBySlug(slug);\n+        sheet.setContent(Content.PatchedContent.of(sheetService.getContentById(sheet.getId())));\n+        SheetDetailVO sheetDetailVO = sheetService.convertToDetailVo(sheet);\n \n         if (formatDisabled) {\n             // Clear the format content",
    "output": "Fix the problem post and sheet contents are empty in the content API (#1686)\n\n* fix: Post and sheet content is empty in the Content API"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/PhotoController.java b/src/main/java/run/halo/app/controller/admin/api/PhotoController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/PhotoController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/PhotoController.java\n@@ -4,6 +4,7 @@\n \n import io.swagger.annotations.ApiOperation;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n import javax.validation.Valid;\n import org.springframework.data.domain.Page;\n@@ -112,6 +113,22 @@ public PhotoDTO updateBy(@PathVariable(\"photoId\") Integer photoId,\n         return new PhotoDTO().convertFrom(photoService.update(photo));\n     }\n \n+    @PutMapping(\"/batch\")\n+    @ApiOperation(\"Updates photo in batch\")\n+    public List<PhotoDTO> updateBatchBy(@RequestBody List<@Valid PhotoParam> photoParams) {\n+        List<Photo> photosToUpdate = photoParams.stream()\n+            .filter(photoParam -> Objects.nonNull(photoParam.getId()))\n+            .map(photoParam -> {\n+                Photo photoToUpdate = photoService.getById(photoParam.getId());\n+                photoParam.update(photoToUpdate);\n+                return photoToUpdate;\n+            })\n+            .collect(Collectors.toList());\n+        return photoService.updateInBatch(photosToUpdate).stream()\n+            .map(photo -> (PhotoDTO) new PhotoDTO().convertFrom(photo))\n+            .collect(Collectors.toList());\n+    }\n+\n     @PutMapping(\"{photoId:\\\\d+}/likes\")\n     @ApiOperation(\"Likes a photo\")\n     @CacheLock(autoDelete = false, traceRequest = true)\n\ndiff --git a/src/main/java/run/halo/app/model/params/PhotoParam.java b/src/main/java/run/halo/app/model/params/PhotoParam.java\n--- a/src/main/java/run/halo/app/model/params/PhotoParam.java\n+++ b/src/main/java/run/halo/app/model/params/PhotoParam.java\n@@ -15,6 +15,8 @@\n @Data\n public class PhotoParam implements InputConverter<Photo> {\n \n+    private Integer id;\n+\n     @NotBlank(message = \"照片名称不能为空\")\n     private String name;\n ",
    "output": "feat: add api for update photos in batch (#1679)\n\nSigned-off-by: Ryan Wang <i@ryanc.cc>"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/PhotoController.java b/src/main/java/run/halo/app/controller/admin/api/PhotoController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/PhotoController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/PhotoController.java\n@@ -72,6 +72,14 @@ public void deletePermanently(@PathVariable(\"photoId\") Integer photoId) {\n         photoService.removeById(photoId);\n     }\n \n+    @DeleteMapping(\"/batch\")\n+    @ApiOperation(\"Deletes photos permanently in batch by id array\")\n+    public List<PhotoDTO> deletePermanentlyInBatch(@RequestBody List<Integer> ids) {\n+        return ids.stream().map(photoService::removeById)\n+            .map(photo -> (PhotoDTO) new PhotoDTO().convertFrom(photo))\n+            .collect(Collectors.toList());\n+    }\n+\n     @PostMapping\n     @ApiOperation(\"Creates a photo\")\n     public PhotoDTO createBy(@Valid @RequestBody PhotoParam photoParam) {",
    "output": "Merge pull request #1680 from ruibaby/feat/api-for-delete-photo-in-batch\n\nfeat: add api for delete photos in batch"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/PhotoController.java b/src/main/java/run/halo/app/controller/admin/api/PhotoController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/PhotoController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/PhotoController.java\n@@ -72,6 +72,14 @@ public void deletePermanently(@PathVariable(\"photoId\") Integer photoId) {\n         photoService.removeById(photoId);\n     }\n \n+    @DeleteMapping(\"/batch\")\n+    @ApiOperation(\"Deletes photos permanently in batch by id array\")\n+    public List<PhotoDTO> deletePermanentlyInBatch(@RequestBody List<Integer> ids) {\n+        return ids.stream().map(photoService::removeById)\n+            .map(photo -> (PhotoDTO) new PhotoDTO().convertFrom(photo))\n+            .collect(Collectors.toList());\n+    }\n+\n     @PostMapping\n     @ApiOperation(\"Creates a photo\")\n     public PhotoDTO createBy(@Valid @RequestBody PhotoParam photoParam) {",
    "output": "feat: add api for delete photos in batch\n\nSigned-off-by: Ryan Wang <i@ryanc.cc>"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/CategoryController.java b/src/main/java/run/halo/app/controller/admin/api/CategoryController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/CategoryController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/CategoryController.java\n@@ -1,10 +1,11 @@\n package run.halo.app.controller.admin.api;\n \n import static org.springframework.data.domain.Sort.Direction.ASC;\n-import static org.springframework.data.domain.Sort.Direction.DESC;\n \n import io.swagger.annotations.ApiOperation;\n import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n import javax.validation.Valid;\n import org.springframework.data.domain.Sort;\n import org.springframework.data.web.SortDefault;\n@@ -89,6 +90,20 @@ public CategoryDTO updateBy(@PathVariable(\"categoryId\") Integer categoryId,\n         return categoryService.convertTo(categoryService.update(categoryToUpdate));\n     }\n \n+    @PutMapping(\"/batch\")\n+    @ApiOperation(\"Updates category in batch\")\n+    public List<CategoryDTO> updateBatchBy(@RequestBody List<@Valid CategoryParam> categoryParams) {\n+        List<Category> categoriesToUpdate = categoryParams.stream()\n+            .filter(categoryParam -> Objects.nonNull(categoryParam.getId()))\n+            .map(categoryParam -> {\n+                Category categoryToUpdate = categoryService.getById(categoryParam.getId());\n+                categoryParam.update(categoryToUpdate);\n+                return categoryToUpdate;\n+            })\n+            .collect(Collectors.toList());\n+        return categoryService.convertTo(categoryService.updateInBatch(categoriesToUpdate));\n+    }\n+\n     @DeleteMapping(\"{categoryId:\\\\d+}\")\n     @ApiOperation(\"Deletes category\")\n     public void deletePermanently(@PathVariable(\"categoryId\") Integer categoryId) {\n\ndiff --git a/src/main/java/run/halo/app/model/params/CategoryParam.java b/src/main/java/run/halo/app/model/params/CategoryParam.java\n--- a/src/main/java/run/halo/app/model/params/CategoryParam.java\n+++ b/src/main/java/run/halo/app/model/params/CategoryParam.java\n@@ -14,11 +14,14 @@\n  *\n  * @author johnniang\n  * @author ryanwang\n+ * @author guqing\n  * @date 2019-03-21\n  */\n @Data\n public class CategoryParam implements InputConverter<Category> {\n \n+    private Integer id;\n+\n     @NotBlank(message = \"分类名称不能为空\")\n     @Size(max = 255, message = \"分类名称的字符长度不能超过 {max}\")\n     private String name;",
    "output": "Add an API to update categories in batch (#1657)\n\n* feat: Add a api of update categories in batch\r\n\r\n* fix: filter condition"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/api/ThemeController.java b/src/main/java/run/halo/app/controller/content/api/ThemeController.java\n--- a/src/main/java/run/halo/app/controller/content/api/ThemeController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/ThemeController.java\n@@ -3,6 +3,7 @@\n import io.swagger.annotations.ApiOperation;\n import java.util.Map;\n import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RestController;\n import run.halo.app.handler.theme.config.support.ThemeProperty;\n@@ -34,9 +35,21 @@ public ThemeProperty getBy() {\n         return themeService.getThemeOfNonNullBy(themeService.getActivatedThemeId());\n     }\n \n+    @GetMapping(\"{themeId:.+}\")\n+    @ApiOperation(\"Gets theme property by theme id\")\n+    public ThemeProperty getBy(@PathVariable(\"themeId\") String themeId) {\n+        return themeService.getThemeOfNonNullBy(themeId);\n+    }\n+\n     @GetMapping(\"activation/settings\")\n     @ApiOperation(\"Lists activated theme settings\")\n     public Map<String, Object> listSettingsBy() {\n         return themeSettingService.listAsMapBy(themeService.getActivatedThemeId());\n     }\n+\n+    @GetMapping(\"{themeId:.+}/settings\")\n+    @ApiOperation(\"Lists theme settings by theme id\")\n+    public Map<String, Object> listSettingsBy(@PathVariable(\"themeId\") String themeId) {\n+        return themeSettingService.listAsMapBy(themeId);\n+    }\n }",
    "output": "Add APIs to fetch theme info and settings according to the theme id (#1660)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/repository/ThemeRepositoryImpl.java b/src/main/java/run/halo/app/repository/ThemeRepositoryImpl.java\n--- a/src/main/java/run/halo/app/repository/ThemeRepositoryImpl.java\n+++ b/src/main/java/run/halo/app/repository/ThemeRepositoryImpl.java\n@@ -61,7 +61,9 @@ public ThemeRepositoryImpl(OptionRepository optionRepository,\n \n     @Override\n     public String getActivatedThemeId() {\n-        return getActivatedThemeProperty().getId();\n+        return this.optionRepository.findByKey(THEME.getValue())\n+            .map(Option::getValue)\n+            .orElse(DEFAULT_THEME_ID);\n     }\n \n     @Override\n@@ -72,13 +74,11 @@ public ThemeProperty getActivatedThemeProperty() {\n             synchronized (this) {\n                 if (this.currentTheme == null) {\n                     // get current theme id\n-                    String currentThemeId = this.optionRepository.findByKey(THEME.getValue())\n-                        .map(Option::getValue)\n-                        .orElse(DEFAULT_THEME_ID);\n+                    String currentThemeId = getActivatedThemeId();\n \n                     // fetch current theme\n                     this.currentTheme =\n-                        this.fetchThemeByThemeId(currentThemeId).orElseGet(() -> {\n+                        this.fetchThemePropertyByThemeId(currentThemeId).orElseGet(() -> {\n                             if (!StringUtils.equalsIgnoreCase(currentThemeId, DEFAULT_THEME_ID)) {\n                                 fallbackTheme.set(true);\n                                 return this.getThemeByThemeId(DEFAULT_THEME_ID);\n@@ -98,7 +98,7 @@ public ThemeProperty getActivatedThemeProperty() {\n \n     @Override\n     public Optional<ThemeProperty> fetchThemePropertyByThemeId(String themeId) {\n-        return ThemePropertyScanner.INSTANCE.scan(getThemeRootPath(), null)\n+        return listAll()\n             .stream()\n             .filter(property -> Objects.equals(themeId, property.getId()))\n             .findFirst();\n@@ -127,7 +127,7 @@ public void setActivatedTheme(@NonNull String themeId) {\n     @Override\n     public ThemeProperty attemptToAdd(ThemeProperty newProperty) {\n         // 1. check existence\n-        final var alreadyExist = fetchThemeByThemeId(newProperty.getId()).isPresent();\n+        final var alreadyExist = fetchThemePropertyByThemeId(newProperty.getId()).isPresent();\n         if (alreadyExist) {\n             throw new AlreadyExistsException(\"当前安装的主题已存在\");\n         }\n@@ -206,15 +206,8 @@ public void onApplicationEvent(OptionUpdatedEvent event) {\n \n     @NonNull\n     protected ThemeProperty getThemeByThemeId(String themeId) {\n-        return fetchThemeByThemeId(themeId).orElseThrow(\n+        return fetchThemePropertyByThemeId(themeId).orElseThrow(\n             () -> new ThemeNotFoundException(\"Failed to find theme with id: \" + themeId));\n     }\n \n-    @NonNull\n-    protected Optional<ThemeProperty> fetchThemeByThemeId(String themeId) {\n-        return ThemePropertyScanner.INSTANCE.scan(getThemeRootPath(), null)\n-            .stream()\n-            .filter(property -> Objects.equals(themeId, property.getId()))\n-            .findFirst();\n-    }\n }\n\ndiff --git a/src/test/java/run/halo/app/repository/ThemeRepositoryImplTest.java b/src/test/java/run/halo/app/repository/ThemeRepositoryImplTest.java\n--- a/src/test/java/run/halo/app/repository/ThemeRepositoryImplTest.java\n+++ b/src/test/java/run/halo/app/repository/ThemeRepositoryImplTest.java\n@@ -60,13 +60,13 @@ void getActivatedThemeBySingleThread() {\n \n         given(optionRepository.findByKey(THEME.getValue())).willReturn(Optional.empty());\n         doReturn(Optional.of(expectedTheme)).when(themeRepository)\n-            .fetchThemeByThemeId(HaloConst.DEFAULT_THEME_ID);\n+            .fetchThemePropertyByThemeId(HaloConst.DEFAULT_THEME_ID);\n \n         ThemeProperty resultTheme = themeRepository.getActivatedThemeProperty();\n         assertEquals(expectedTheme, resultTheme);\n \n         verify(optionRepository, times(1)).findByKey(any());\n-        verify(themeRepository, times(1)).fetchThemeByThemeId(any());\n+        verify(themeRepository, times(1)).fetchThemePropertyByThemeId(any());\n     }\n \n     @Test\n@@ -77,7 +77,7 @@ void getActivatedThemeByMultiThread() throws InterruptedException {\n \n         given(optionRepository.findByKey(THEME.getValue())).willReturn(Optional.empty());\n         doReturn(Optional.of(expectedTheme)).when(themeRepository)\n-            .fetchThemeByThemeId(HaloConst.DEFAULT_THEME_ID);\n+            .fetchThemePropertyByThemeId(HaloConst.DEFAULT_THEME_ID);\n \n         ExecutorService executorService = Executors.newFixedThreadPool(10);\n         // define tasks\n@@ -96,7 +96,7 @@ void getActivatedThemeByMultiThread() throws InterruptedException {\n         });\n \n         verify(optionRepository, times(1)).findByKey(any());\n-        verify(themeRepository, times(1)).fetchThemeByThemeId(any());\n+        verify(themeRepository, times(1)).fetchThemePropertyByThemeId(any());\n     }\n \n }\n\\ No newline at end of file",
    "output": "Fix the problem where the activated field was not set correctly for a theme property (#1632)\n\nSigned-off-by: John Niang <johnniang@fastmail.com>"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/handler/file/HuaweiObsFileHandler.java b/src/main/java/run/halo/app/handler/file/HuaweiObsFileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/HuaweiObsFileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/HuaweiObsFileHandler.java\n@@ -82,7 +82,7 @@ public HuaweiObsFileHandler(OptionService optionService,\n \n         try {\n             FilePathDescriptor pathDescriptor = new FilePathDescriptor.Builder()\n-                .setBasePath(domain)\n+                .setBasePath(basePath.toString())\n                 .setSubPath(source)\n                 .setAutomaticRename(true)\n                 .setRenamePredicate(relativePath ->",
    "output": "fix: huawei obs upload file address is incorrect (#1589)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/dto/TagDTO.java b/src/main/java/run/halo/app/model/dto/TagDTO.java\n--- a/src/main/java/run/halo/app/model/dto/TagDTO.java\n+++ b/src/main/java/run/halo/app/model/dto/TagDTO.java\n@@ -4,6 +4,7 @@\n import lombok.Data;\n import run.halo.app.model.dto.base.OutputConverter;\n import run.halo.app.model.entity.Tag;\n+import run.halo.app.model.support.HaloConst;\n \n /**\n  * Tag output dto.\n@@ -21,6 +22,8 @@ public class TagDTO implements OutputConverter<TagDTO, Tag> {\n \n     private String slug;\n \n+    private String color = HaloConst.DEFAULT_TAG_COLOR;\n+\n     private String thumbnail;\n \n     private Date createTime;\n\ndiff --git a/src/main/java/run/halo/app/model/entity/Tag.java b/src/main/java/run/halo/app/model/entity/Tag.java\n--- a/src/main/java/run/halo/app/model/entity/Tag.java\n+++ b/src/main/java/run/halo/app/model/entity/Tag.java\n@@ -16,6 +16,7 @@\n  * Tag entity\n  *\n  * @author ryanwang\n+ * @author guqing\n  * @date 2019-03-12\n  */\n @Data\n@@ -50,6 +51,12 @@ public class Tag extends BaseEntity {\n     @Column(name = \"slug\", unique = true)\n     private String slug;\n \n+    /**\n+     * Tag color.\n+     */\n+    @Column(name = \"color\", length = 25)\n+    private String color;\n+\n     /**\n      * Cover thumbnail of the tag.\n      */\n\ndiff --git a/src/main/java/run/halo/app/model/params/TagParam.java b/src/main/java/run/halo/app/model/params/TagParam.java\n--- a/src/main/java/run/halo/app/model/params/TagParam.java\n+++ b/src/main/java/run/halo/app/model/params/TagParam.java\n@@ -1,18 +1,21 @@\n package run.halo.app.model.params;\n \n+import io.swagger.annotations.ApiModelProperty;\n import javax.validation.constraints.NotBlank;\n import javax.validation.constraints.Size;\n import lombok.Data;\n import org.apache.commons.lang3.StringUtils;\n import run.halo.app.model.dto.base.InputConverter;\n import run.halo.app.model.entity.Tag;\n+import run.halo.app.model.support.HaloConst;\n import run.halo.app.utils.SlugUtils;\n \n /**\n  * Tag param.\n  *\n  * @author johnniang\n  * @author ryanwang\n+ * @author guqing\n  * @date 2019-03-20\n  */\n @Data\n@@ -25,6 +28,13 @@ public class TagParam implements InputConverter<Tag> {\n     @Size(max = 255, message = \"标签别名的字符长度不能超过 {max}\")\n     private String slug;\n \n+    @Size(max = 24, message = \"颜色值字符长度不能超过 {max}\")\n+    @ApiModelProperty(value = \"标签颜色，支持多种颜色模式，\"\n+        + \"例如 Hex: #cfd3d7，颜色名称：LightGrey，RGB: rgb(207, 211, 215)，\"\n+        + \"RGBA: rgb(207, 211, 215, 0.5)等\", name = \"color\",\n+        example = \"#e23d66\")\n+    private String color;\n+\n     @Size(max = 1023, message = \"封面图链接的字符长度不能超过 {max}\")\n     private String thumbnail;\n \n@@ -37,6 +47,10 @@ public Tag convertTo() {\n             thumbnail = \"\";\n         }\n \n+        if (StringUtils.isBlank(color)) {\n+            this.color = HaloConst.DEFAULT_TAG_COLOR;\n+        }\n+\n         return InputConverter.super.convertTo();\n     }\n \n@@ -49,6 +63,10 @@ public void update(Tag tag) {\n             thumbnail = \"\";\n         }\n \n+        if (StringUtils.isBlank(color)) {\n+            this.color = HaloConst.DEFAULT_TAG_COLOR;\n+        }\n+\n         InputConverter.super.update(tag);\n     }\n }\n\ndiff --git a/src/main/java/run/halo/app/model/support/HaloConst.java b/src/main/java/run/halo/app/model/support/HaloConst.java\n--- a/src/main/java/run/halo/app/model/support/HaloConst.java\n+++ b/src/main/java/run/halo/app/model/support/HaloConst.java\n@@ -8,6 +8,7 @@\n  * Halo constants.\n  *\n  * @author ryanwang\n+ * @author guqing\n  * @date 2017/12/29\n  */\n public class HaloConst {\n@@ -58,6 +59,11 @@ public class HaloConst {\n      */\n     public static final String DEFAULT_ERROR_PATH = \"common/error/error\";\n \n+    /**\n+     * Default tag color.\n+     */\n+    public static final String DEFAULT_TAG_COLOR = \"#cfd3d7\";\n+\n     /**\n      * Path separator.\n      */\n@@ -67,6 +73,7 @@ public class HaloConst {\n      * Post password template name.\n      */\n     public static final String POST_PASSWORD_TEMPLATE = \"post_password\";\n+\n     /**\n      * Suffix of freemarker template file.\n      */",
    "output": "Tag support color options (#1566)\n\n* feat: tag support color options\n\n* refactor: change the color of tag\n\n* feat: add api model property\n\n* refactor: change color field length\n\n* refactor: color field length in tag param"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/PhotoController.java b/src/main/java/run/halo/app/controller/admin/api/PhotoController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/PhotoController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/PhotoController.java\n@@ -4,12 +4,14 @@\n \n import io.swagger.annotations.ApiOperation;\n import java.util.List;\n+import java.util.stream.Collectors;\n import javax.validation.Valid;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.Pageable;\n import org.springframework.data.domain.Sort;\n import org.springframework.data.web.PageableDefault;\n import org.springframework.data.web.SortDefault;\n+import org.springframework.validation.annotation.Validated;\n import org.springframework.web.bind.annotation.DeleteMapping;\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.PathVariable;\n@@ -32,6 +34,7 @@\n  * @author ryanwang\n  * @date 2019-03-21\n  */\n+@Validated\n @RestController\n @RequestMapping(\"/api/admin/photos\")\n public class PhotoController {\n@@ -75,6 +78,18 @@ public PhotoDTO createBy(@Valid @RequestBody PhotoParam photoParam) {\n         return new PhotoDTO().convertFrom(photoService.createBy(photoParam));\n     }\n \n+    @PostMapping(\"/batch\")\n+    @ApiOperation(\"Batch creation photos\")\n+    public List<PhotoDTO> createBatchBy(@RequestBody List<@Valid PhotoParam> photoParams) {\n+        return photoParams.stream()\n+            .map(photoParam -> {\n+                PhotoDTO photoDto = new PhotoDTO();\n+                photoDto.convertFrom(photoService.createBy(photoParam));\n+                return photoDto;\n+            })\n+            .collect(Collectors.toList());\n+    }\n+\n     @PutMapping(\"{photoId:\\\\d+}\")\n     @ApiOperation(\"Updates a photo\")\n     public PhotoDTO updateBy(@PathVariable(\"photoId\") Integer photoId,",
    "output": "feat: add a batch creation api for photos (#1564)\n\n* feat: add an api of batch creation photos\r\n\r\n* feat: add an api verification"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/listener/StartedListener.java b/src/main/java/run/halo/app/listener/StartedListener.java\n--- a/src/main/java/run/halo/app/listener/StartedListener.java\n+++ b/src/main/java/run/halo/app/listener/StartedListener.java\n@@ -165,10 +165,10 @@ private void initThemes() {\n             }\n \n             // Create theme folder\n-            Path themePath = themeService.getBasePath();\n+            Path themePath = themeService.getBasePath().resolve(HaloConst.DEFAULT_THEME_ID);\n \n             if (themeService.fetchThemePropertyBy(HaloConst.DEFAULT_THEME_ID).isEmpty()) {\n-                FileUtils.copyFolder(source, themePath);\n+                FileUtils.copyFolder(source.resolve(HaloConst.DEFAULT_THEME_DIR_NAME), themePath);\n                 log.info(\"Copied theme folder from [{}] to [{}]\", source, themePath);\n             }\n         } catch (Exception e) {\n\ndiff --git a/src/main/java/run/halo/app/model/support/HaloConst.java b/src/main/java/run/halo/app/model/support/HaloConst.java\n--- a/src/main/java/run/halo/app/model/support/HaloConst.java\n+++ b/src/main/java/run/halo/app/model/support/HaloConst.java\n@@ -48,6 +48,11 @@ public class HaloConst {\n      */\n     public static final String DEFAULT_THEME_ID = \"caicai_anatole\";\n \n+    /**\n+     * Default theme directory name.\n+     */\n+    public static final String DEFAULT_THEME_DIR_NAME = \"anatole\";\n+\n     /**\n      * Default error path.\n      */",
    "output": "Fixed the problem that copying the default theme at halo startup did not use themeId as the theme folder name (#1549)\n\n* fix: 1547\r\n\r\n* refactor: replace the string magic value using a static constant"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/JournalCommentController.java b/src/main/java/run/halo/app/controller/admin/api/JournalCommentController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/JournalCommentController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/JournalCommentController.java\n@@ -34,6 +34,7 @@\n  * Journal comment controller.\n  *\n  * @author johnniang\n+ * @author guqing\n  * @date 2019-04-25\n  */\n @RestController\n@@ -106,6 +107,16 @@ public BaseCommentDTO updateStatusBy(@PathVariable(\"commentId\") Long commentId,\n         return journalCommentService.convertTo(updatedJournalComment);\n     }\n \n+    @PutMapping(\"/{commentId:\\\\d+}\")\n+    @ApiOperation(\"Updates a journal comment by comment id\")\n+    public BaseCommentDTO updateCommentBy(@PathVariable Long commentId,\n+        @RequestBody JournalCommentParam journalCommentParam) {\n+        JournalComment commentToUpdate = journalCommentService.getById(commentId);\n+        journalCommentParam.update(commentToUpdate);\n+\n+        return journalCommentService.convertTo(journalCommentService.update(commentToUpdate));\n+    }\n+\n     @DeleteMapping(\"{commentId:\\\\d+}\")\n     @ApiOperation(\"Deletes comment permanently and recursively\")\n     public BaseCommentDTO deleteBy(@PathVariable(\"commentId\") Long commentId) {",
    "output": "feat: add api for modifying journal comment content (#1536)\n\n* feat: add api of modify comment content\r\n\r\n* fix: remove update comment content api\r\n\r\n* fix: remove comment content param"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/PhotoController.java b/src/main/java/run/halo/app/controller/admin/api/PhotoController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/PhotoController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/PhotoController.java\n@@ -18,6 +18,8 @@\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RestController;\n+import run.halo.app.cache.lock.CacheLock;\n+import run.halo.app.cache.lock.CacheParam;\n import run.halo.app.model.dto.PhotoDTO;\n import run.halo.app.model.entity.Photo;\n import run.halo.app.model.params.PhotoParam;\n@@ -87,6 +89,13 @@ public PhotoDTO updateBy(@PathVariable(\"photoId\") Integer photoId,\n         return new PhotoDTO().convertFrom(photoService.update(photo));\n     }\n \n+    @PutMapping(\"{photoId:\\\\d+}/likes\")\n+    @ApiOperation(\"Likes a photo\")\n+    @CacheLock(autoDelete = false, traceRequest = true)\n+    public void likes(@PathVariable @CacheParam Integer photoId) {\n+        photoService.increaseLike(photoId);\n+    }\n+\n     @GetMapping(\"teams\")\n     @ApiOperation(\"Lists all of photo teams\")\n     public List<String> listTeams() {\n\ndiff --git a/src/main/java/run/halo/app/model/dto/PhotoDTO.java b/src/main/java/run/halo/app/model/dto/PhotoDTO.java\n--- a/src/main/java/run/halo/app/model/dto/PhotoDTO.java\n+++ b/src/main/java/run/halo/app/model/dto/PhotoDTO.java\n@@ -6,7 +6,10 @@\n import run.halo.app.model.entity.Photo;\n \n /**\n+ * Photo dto.\n+ *\n  * @author ryanwang\n+ * @author guqing\n  * @date 2019-03-21\n  */\n @Data\n@@ -27,4 +30,6 @@ public class PhotoDTO implements OutputConverter<PhotoDTO, Photo> {\n     private String location;\n \n     private String description;\n+\n+    private Long likes;\n }\n\ndiff --git a/src/main/java/run/halo/app/model/entity/Photo.java b/src/main/java/run/halo/app/model/entity/Photo.java\n--- a/src/main/java/run/halo/app/model/entity/Photo.java\n+++ b/src/main/java/run/halo/app/model/entity/Photo.java\n@@ -13,6 +13,7 @@\n import lombok.Data;\n import lombok.EqualsAndHashCode;\n import lombok.ToString;\n+import org.hibernate.annotations.ColumnDefault;\n import org.hibernate.annotations.GenericGenerator;\n \n /**\n@@ -79,6 +80,13 @@ public class Photo extends BaseEntity {\n     @Column(name = \"team\")\n     private String team;\n \n+    /**\n+     * Likes.\n+     */\n+    @Column(name = \"likes\", nullable = false)\n+    @ColumnDefault(\"0\")\n+    private Long likes;\n+\n     @Override\n     public void prePersist() {\n         super.prePersist();\n@@ -102,5 +110,9 @@ public void prePersist() {\n         if (team == null) {\n             team = \"\";\n         }\n+\n+        if (likes == null || likes < 0) {\n+            likes = 0L;\n+        }\n     }\n }\n\ndiff --git a/src/main/java/run/halo/app/repository/PhotoRepository.java b/src/main/java/run/halo/app/repository/PhotoRepository.java\n--- a/src/main/java/run/halo/app/repository/PhotoRepository.java\n+++ b/src/main/java/run/halo/app/repository/PhotoRepository.java\n@@ -3,6 +3,7 @@\n import java.util.List;\n import org.springframework.data.domain.Sort;\n import org.springframework.data.jpa.repository.JpaSpecificationExecutor;\n+import org.springframework.data.jpa.repository.Modifying;\n import org.springframework.data.jpa.repository.Query;\n import run.halo.app.model.entity.Photo;\n import run.halo.app.repository.base.BaseRepository;\n@@ -12,6 +13,7 @@\n  *\n  * @author johnniang\n  * @author ryanwang\n+ * @author guqing\n  * @date 2019-04-03\n  */\n public interface PhotoRepository\n@@ -33,4 +35,15 @@ public interface PhotoRepository\n      */\n     @Query(value = \"select distinct p.team from Photo p\")\n     List<String> findAllTeams();\n+\n+    /**\n+     * Updates photo likes.\n+     *\n+     * @param likes likes delta\n+     * @param photoId photo id must not be null\n+     * @return updated rows\n+     */\n+    @Modifying\n+    @Query(\"update Photo p set p.likes = p.likes + :likes where p.id = :photoId\")\n+    int updateLikes(long likes, Integer photoId);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/PhotoService.java b/src/main/java/run/halo/app/service/PhotoService.java\n--- a/src/main/java/run/halo/app/service/PhotoService.java\n+++ b/src/main/java/run/halo/app/service/PhotoService.java\n@@ -79,4 +79,11 @@ public interface PhotoService extends CrudService<Photo, Integer> {\n      * @return list of teams\n      */\n     List<String> listAllTeams();\n+\n+    /**\n+     * Increases photo likes(1).\n+     *\n+     * @param photoId photo id must not be null\n+     */\n+    void increaseLike(Integer photoId);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/PhotoServiceImpl.java b/src/main/java/run/halo/app/service/impl/PhotoServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PhotoServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PhotoServiceImpl.java\n@@ -6,14 +6,17 @@\n import java.util.Set;\n import java.util.stream.Collectors;\n import javax.persistence.criteria.Predicate;\n+import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.lang3.StringUtils;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.Pageable;\n import org.springframework.data.domain.Sort;\n import org.springframework.data.jpa.domain.Specification;\n import org.springframework.lang.NonNull;\n import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n import org.springframework.util.Assert;\n+import run.halo.app.exception.BadRequestException;\n import run.halo.app.model.dto.PhotoDTO;\n import run.halo.app.model.entity.Photo;\n import run.halo.app.model.params.PhotoParam;\n@@ -25,11 +28,13 @@\n import run.halo.app.utils.ServiceUtils;\n \n /**\n- * PhotoService implementation class\n+ * PhotoService implementation class.\n  *\n  * @author ryanwang\n+ * @author guqing\n  * @date 2019-03-14\n  */\n+@Slf4j\n @Service\n public class PhotoServiceImpl extends AbstractCrudService<Photo, Integer> implements PhotoService {\n \n@@ -116,6 +121,20 @@ public List<String> listAllTeams() {\n         return photoRepository.findAllTeams();\n     }\n \n+    @Override\n+    @Transactional\n+    public void increaseLike(Integer photoId) {\n+        Assert.notNull(photoId, \"Photo id must not be null\");\n+\n+        int affectedRows = photoRepository.updateLikes(1L, photoId);\n+\n+        if (affectedRows != 1) {\n+            log.error(\"Photo with id: [{}] may not be found\", photoId);\n+            throw new BadRequestException(\n+                \"Failed to increase likes 1 for photo with id \" + photoId);\n+        }\n+    }\n+\n     @NonNull\n     private Specification<Photo> buildSpecByQuery(@NonNull PhotoQuery photoQuery) {\n         Assert.notNull(photoQuery, \"Photo query must not be null\");",
    "output": "feat: support photo likes (#1537)\n\n* feat: support photo likes\r\n\r\n* feat: add CacheLock annotation to likes api"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/ContentSearchController.java b/src/main/java/run/halo/app/controller/content/ContentSearchController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentSearchController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentSearchController.java\n@@ -74,7 +74,7 @@ public String search(Model model,\n         final Page<PostListVO> posts = postService.convertToListVo(postPage);\n \n         model.addAttribute(\"is_search\", true);\n-        model.addAttribute(\"keyword\", keyword);\n+        model.addAttribute(\"keyword\", HtmlUtils.htmlEscape(keyword));\n         model.addAttribute(\"posts\", posts);\n         model.addAttribute(\"meta_keywords\", optionService.getSeoKeywords());\n         model.addAttribute(\"meta_description\", optionService.getSeoDescription());",
    "output": "fix: content Search page XSS injection problem (#1534)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/api/PostController.java b/src/main/java/run/halo/app/controller/content/api/PostController.java\n--- a/src/main/java/run/halo/app/controller/content/api/PostController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/PostController.java\n@@ -5,6 +5,7 @@\n import io.swagger.annotations.ApiOperation;\n import java.nio.charset.StandardCharsets;\n import java.util.List;\n+import java.util.Set;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.PageRequest;\n import org.springframework.data.domain.Pageable;\n@@ -44,6 +45,7 @@\n  *\n  * @author johnniang\n  * @author ryanwang\n+ * @author guqing\n  * @date 2019-04-02\n  */\n @RestController(\"ApiContentPostController\")\n@@ -83,7 +85,7 @@ public Page<PostListVO> pageBy(\n         PostQuery postQuery = new PostQuery();\n         postQuery.setKeyword(keyword);\n         postQuery.setCategoryId(categoryId);\n-        postQuery.setStatus(PostStatus.PUBLISHED);\n+        postQuery.setStatuses(Set.of(PostStatus.PUBLISHED));\n         Page<Post> postPage = postService.pageBy(postQuery, pageable);\n         return postService.convertToListVo(postPage, true);\n     }\n\ndiff --git a/src/main/java/run/halo/app/model/params/PostQuery.java b/src/main/java/run/halo/app/model/params/PostQuery.java\n--- a/src/main/java/run/halo/app/model/params/PostQuery.java\n+++ b/src/main/java/run/halo/app/model/params/PostQuery.java\n@@ -1,12 +1,16 @@\n package run.halo.app.model.params;\n \n+import java.util.HashSet;\n+import java.util.Set;\n import lombok.Data;\n+import org.springframework.util.CollectionUtils;\n import run.halo.app.model.enums.PostStatus;\n \n /**\n  * Post query.\n  *\n  * @author johnniang\n+ * @author guqing\n  * @date 4/10/19\n  */\n @Data\n@@ -20,11 +24,46 @@ public class PostQuery {\n     /**\n      * Post status.\n      */\n+    @Deprecated(forRemoval = true, since = \"1.5.0\")\n     private PostStatus status;\n \n+    /**\n+     * Post statuses.\n+     */\n+    private Set<PostStatus> statuses;\n+\n     /**\n      * Category id.\n      */\n     private Integer categoryId;\n \n+    /**\n+     * This method is deprecated in version 1.5.0, and it is recommended to use\n+     * <code>getStatuses()</code> method.\n+     *\n+     * @see #getStatuses()\n+     * @return post status.\n+     */\n+    @Deprecated\n+    public PostStatus getStatus() {\n+        return status;\n+    }\n+\n+    /**\n+     * In order to be compatible with status, this method will return the combined results\n+     * of status and statuses before status is removed.\n+     *\n+     * @return a combined status set of status and statues\n+     */\n+    public Set<PostStatus> getStatuses() {\n+        Set<PostStatus> statuses = new HashSet<>();\n+        // Need to be compatible with status parameter values due to historical reasons.\n+        if (this.status != null) {\n+            statuses.add(this.status);\n+        }\n+        if (!CollectionUtils.isEmpty(this.statuses)) {\n+            statuses.addAll(this.statuses);\n+        }\n+        return statuses;\n+    }\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n@@ -16,11 +16,13 @@\n import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n+import javax.persistence.criteria.CriteriaBuilder.In;\n import javax.persistence.criteria.Predicate;\n import javax.persistence.criteria.Root;\n import javax.persistence.criteria.Subquery;\n import javax.validation.constraints.NotNull;\n import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.data.domain.Page;\n@@ -149,7 +151,7 @@ public Page<Post> pageBy(String keyword, Pageable pageable) {\n \n         PostQuery postQuery = new PostQuery();\n         postQuery.setKeyword(keyword);\n-        postQuery.setStatus(PostStatus.PUBLISHED);\n+        postQuery.setStatuses(Set.of(PostStatus.PUBLISHED));\n \n         // Build specification and find all\n         return postRepository.findAll(buildSpecByQuery(postQuery), pageable);\n@@ -808,8 +810,9 @@ private Specification<Post> buildSpecByQuery(@NonNull PostQuery postQuery) {\n         return (root, query, criteriaBuilder) -> {\n             List<Predicate> predicates = new LinkedList<>();\n \n-            if (postQuery.getStatus() != null) {\n-                predicates.add(criteriaBuilder.equal(root.get(\"status\"), postQuery.getStatus()));\n+            Set<PostStatus> statuses = postQuery.getStatuses();\n+            if (!CollectionUtils.isEmpty(statuses)) {\n+                predicates.add(root.get(\"status\").in(statuses));\n             }\n \n             if (postQuery.getCategoryId() != null) {",
    "output": "Support querying multi post statuses (#1527)\n\n* feat: post page list supports multiple status queries"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/MenuController.java b/src/main/java/run/halo/app/controller/admin/api/MenuController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/MenuController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/MenuController.java\n@@ -5,6 +5,7 @@\n \n import io.swagger.annotations.ApiOperation;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n import javax.validation.Valid;\n import org.springframework.data.domain.Sort;\n@@ -103,6 +104,7 @@ public MenuDTO updateBy(@PathVariable(\"menuId\") Integer menuId,\n     public List<MenuDTO> updateBatchBy(@RequestBody @Valid List<MenuParam> menuParams) {\n         List<Menu> menus = menuParams\n             .stream()\n+            .filter(menuParam -> Objects.nonNull(menuParam.getId()))\n             .map(InputConverter::convertTo)\n             .collect(Collectors.toList());\n         return menuService.updateInBatch(menus).stream()\n\ndiff --git a/src/main/java/run/halo/app/service/impl/CategoryServiceImpl.java b/src/main/java/run/halo/app/service/impl/CategoryServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/CategoryServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/CategoryServiceImpl.java\n@@ -10,6 +10,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n+import java.util.Set;\n import java.util.function.Function;\n import java.util.stream.Collectors;\n import lombok.extern.slf4j.Slf4j;\n@@ -661,15 +662,21 @@ private boolean doCategoryHasEncrypt(\n \n \n     @Override\n+    @Transactional(rollbackFor = Exception.class)\n     public List<Category> updateInBatch(Collection<Category> categories) {\n         if (CollectionUtils.isEmpty(categories)) {\n             return Collections.emptyList();\n         }\n-\n-        ArrayList<Category> resultList = new ArrayList<>();\n-        for (Category category : categories) {\n-            resultList.add(update(category));\n-        }\n-        return resultList;\n+        Set<Integer> categoryIds = ServiceUtils.fetchProperty(categories, Category::getId);\n+        Map<Integer, Category> idCategoryParamMap =\n+            ServiceUtils.convertToMap(categories, Category::getId);\n+        return categoryRepository.findAllById(categoryIds)\n+            .stream()\n+            .map(categoryToUpdate -> {\n+                Category categoryParam = idCategoryParamMap.get(categoryToUpdate.getId());\n+                BeanUtils.updateProperties(categoryParam, categoryToUpdate);\n+                return update(categoryToUpdate);\n+            })\n+            .collect(Collectors.toList());\n     }\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/MenuServiceImpl.java b/src/main/java/run/halo/app/service/impl/MenuServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/MenuServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/MenuServiceImpl.java\n@@ -1,5 +1,6 @@\n package run.halo.app.service.impl;\n \n+import java.util.Collection;\n import java.util.Collections;\n import java.util.LinkedList;\n import java.util.List;\n@@ -9,6 +10,7 @@\n import org.springframework.data.domain.Sort;\n import org.springframework.lang.NonNull;\n import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n import org.springframework.util.Assert;\n import org.springframework.util.CollectionUtils;\n import run.halo.app.model.dto.MenuDTO;\n@@ -19,6 +21,7 @@\n import run.halo.app.repository.MenuRepository;\n import run.halo.app.service.MenuService;\n import run.halo.app.service.base.AbstractCrudService;\n+import run.halo.app.utils.BeanUtils;\n import run.halo.app.utils.ServiceUtils;\n \n /**\n@@ -153,6 +156,22 @@ Menu update(@NonNull Menu menu) {\n         return super.update(menu);\n     }\n \n+    @Override\n+    @NonNull\n+    @Transactional(rollbackFor = Exception.class)\n+    public List<Menu> updateInBatch(@NonNull Collection<Menu> menus) {\n+        Set<Integer> menuIds = ServiceUtils.fetchProperty(menus, Menu::getId);\n+        Map<Integer, Menu> idMenuParamMap = ServiceUtils.convertToMap(menus, Menu::getId);\n+        return menuRepository.findAllById(menuIds)\n+            .stream()\n+            .map(menuToUpdate -> {\n+                Menu menuParam = idMenuParamMap.get(menuToUpdate.getId());\n+                BeanUtils.updateProperties(menuParam, menuToUpdate);\n+                return update(menuToUpdate);\n+            })\n+            .collect(Collectors.toList());\n+    }\n+\n     /**\n      * Concrete menu tree.\n      *",
    "output": "Fix the problem of updating categories and menus in batch (#1526)\n\n* fix: batch update"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/theme/GitThemeUpdater.java b/src/main/java/run/halo/app/theme/GitThemeUpdater.java\n--- a/src/main/java/run/halo/app/theme/GitThemeUpdater.java\n+++ b/src/main/java/run/halo/app/theme/GitThemeUpdater.java\n@@ -42,7 +42,7 @@ public ThemeProperty update(String themeId) throws IOException {\n         // get theme property\n         final var oldThemeProperty = themeRepository.fetchThemePropertyByThemeId(themeId)\n             .orElseThrow(\n-                () -> new NotFoundException(\"主题 \" + themeId + \" 不存在或以删除！\").setErrorData(themeId));\n+                () -> new NotFoundException(\"主题 \" + themeId + \" 不存在或已删除！\").setErrorData(themeId));\n \n         // get update config\n         final var gitRepo = oldThemeProperty.getRepo();",
    "output": "fix: typo (#1516)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/api/PhotoController.java b/src/main/java/run/halo/app/controller/content/api/PhotoController.java\n--- a/src/main/java/run/halo/app/controller/content/api/PhotoController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/PhotoController.java\n@@ -2,6 +2,7 @@\n \n import static org.springframework.data.domain.Sort.Direction.DESC;\n \n+import io.swagger.annotations.ApiOperation;\n import java.util.List;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.Pageable;\n@@ -49,4 +50,10 @@ public Page<PhotoDTO> pageBy(\n         PhotoQuery photoQuery) {\n         return photoService.pageDtosBy(pageable, photoQuery);\n     }\n+\n+    @GetMapping(\"teams\")\n+    @ApiOperation(\"Lists all of photo teams\")\n+    public List<String> listTeams() {\n+        return photoService.listAllTeams();\n+    }\n }",
    "output": "Add photo teams api in content api (#1515)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/api/JournalController.java b/src/main/java/run/halo/app/controller/content/api/JournalController.java\n--- a/src/main/java/run/halo/app/controller/content/api/JournalController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/JournalController.java\n@@ -71,7 +71,7 @@ public Page<JournalWithCmtCountDTO> pageBy(\n \n     @GetMapping(\"{journalId:\\\\d+}\")\n     @ApiOperation(\"Gets a journal detail\")\n-    public JournalDTO getBy(@PathVariable(\"journalId\") Integer journalId) {\n+    public JournalWithCmtCountDTO getBy(@PathVariable(\"journalId\") Integer journalId) {\n         Journal journal = journalService.getById(journalId);\n         return journalService.convertTo(journal);\n     }\n\ndiff --git a/src/main/java/run/halo/app/repository/base/BaseCommentRepository.java b/src/main/java/run/halo/app/repository/base/BaseCommentRepository.java\n--- a/src/main/java/run/halo/app/repository/base/BaseCommentRepository.java\n+++ b/src/main/java/run/halo/app/repository/base/BaseCommentRepository.java\n@@ -99,6 +99,15 @@ List<CommentCountProjection> countByStatusAndPostIds(@NonNull CommentStatus stat\n      */\n     long countByPostId(@NonNull Integer postId);\n \n+    /**\n+     * Count comments by comment status and post id.\n+     *\n+     * @param status status must not be null\n+     * @param postId post id must not be null.\n+     * @return comments count\n+     */\n+    long countByStatusAndPostId(@NonNull CommentStatus status, @NonNull Integer postId);\n+\n     /**\n      * Counts by comment status.\n      *\n\ndiff --git a/src/main/java/run/halo/app/service/JournalService.java b/src/main/java/run/halo/app/service/JournalService.java\n--- a/src/main/java/run/halo/app/service/JournalService.java\n+++ b/src/main/java/run/halo/app/service/JournalService.java\n@@ -68,13 +68,13 @@ public interface JournalService extends CrudService<Journal, Integer> {\n     Page<Journal> pageBy(@NonNull JournalType type, @NonNull Pageable pageable);\n \n     /**\n-     * Converts to journal dto.\n+     * Converts to journal with comment count dto.\n      *\n      * @param journal journal must not be null\n-     * @return journal dto\n+     * @return journal with comment count dto\n      */\n     @NonNull\n-    JournalDTO convertTo(@NonNull Journal journal);\n+    JournalWithCmtCountDTO convertTo(@NonNull Journal journal);\n \n     /**\n      * Converts to journal with comment count dto list.\n\ndiff --git a/src/main/java/run/halo/app/service/base/BaseCommentService.java b/src/main/java/run/halo/app/service/base/BaseCommentService.java\n--- a/src/main/java/run/halo/app/service/base/BaseCommentService.java\n+++ b/src/main/java/run/halo/app/service/base/BaseCommentService.java\n@@ -144,6 +144,15 @@ Map<Integer, Long> countByStatusAndPostIds(@NonNull CommentStatus status,\n      */\n     long countByPostId(@NonNull Integer postId);\n \n+    /**\n+     * Count comments by comment status and post id.\n+     *\n+     * @param status status must not be null.\n+     * @param postId post id must not be null.\n+     * @return comments count\n+     */\n+    long countByStatusAndPostId(@NonNull CommentStatus status, @NonNull Integer postId);\n+\n     /**\n      * Counts by comment status.\n      *\n\ndiff --git a/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java b/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n@@ -290,6 +290,12 @@ public long countByPostId(@NonNull Integer postId) {\n         return baseCommentRepository.countByPostId(postId);\n     }\n \n+    @Override\n+    public long countByStatusAndPostId(@NonNull CommentStatus status, @NonNull Integer postId) {\n+        Assert.notNull(postId, \"Post id must not be null\");\n+        return baseCommentRepository.countByStatusAndPostId(status, postId);\n+    }\n+\n     @Override\n     public long countByStatus(@NonNull CommentStatus status) {\n         return baseCommentRepository.countByStatus(status);\n\ndiff --git a/src/main/java/run/halo/app/service/impl/JournalServiceImpl.java b/src/main/java/run/halo/app/service/impl/JournalServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/JournalServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/JournalServiceImpl.java\n@@ -107,10 +107,16 @@ public Journal removeById(Integer id) {\n     }\n \n     @Override\n-    public JournalDTO convertTo(Journal journal) {\n+    public JournalWithCmtCountDTO convertTo(Journal journal) {\n         Assert.notNull(journal, \"Journal must not be null\");\n \n-        return new JournalDTO().convertFrom(journal);\n+        JournalWithCmtCountDTO journalWithCmtCountDto = new JournalWithCmtCountDTO()\n+            .convertFrom(journal);\n+\n+        journalWithCmtCountDto.setCommentCount(journalCommentService.countByStatusAndPostId(\n+            CommentStatus.PUBLISHED, journal.getId()));\n+\n+        return journalWithCmtCountDto;\n     }\n \n     @Override\n\ndiff --git a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n@@ -787,7 +787,8 @@ private PostDetailVO convertTo(@NonNull Post post, @Nullable List<Tag> tags,\n         postDetailVO.setMetaIds(metaIds);\n         postDetailVO.setMetas(postMetaService.convertTo(postMetaList));\n \n-        postDetailVO.setCommentCount(postCommentService.countByPostId(post.getId()));\n+        postDetailVO.setCommentCount(postCommentService.countByStatusAndPostId(\n+            CommentStatus.PUBLISHED, post.getId()));\n \n         postDetailVO.setFullPath(buildFullPath(post));\n \n\ndiff --git a/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java b/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n@@ -341,7 +341,8 @@ private SheetDetailVO convertTo(@NonNull Sheet sheet, List<SheetMeta> metas) {\n             sheetDetailVO.setSummary(generateSummary(sheet.getFormatContent()));\n         }\n \n-        sheetDetailVO.setCommentCount(sheetCommentService.countByPostId(sheet.getId()));\n+        sheetDetailVO.setCommentCount(sheetCommentService.countByStatusAndPostId(\n+            CommentStatus.PUBLISHED, sheet.getId()));\n \n         sheetDetailVO.setFullPath(buildFullPath(sheet));\n ",
    "output": "Fix number of comment in detail of post and sheet and add it into detail of journal (#1503)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/BackupController.java b/src/main/java/run/halo/app/controller/admin/api/BackupController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/BackupController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/BackupController.java\n@@ -6,8 +6,12 @@\n \n import io.swagger.annotations.ApiOperation;\n import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n import java.nio.file.Paths;\n import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n import javax.servlet.http.HttpServletRequest;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.core.io.Resource;\n@@ -81,8 +85,19 @@ public BackupDTO getMarkdownBackup(@RequestParam(\"filename\") String filename) {\n     @PostMapping(\"work-dir\")\n     @ApiOperation(\"Backups work directory\")\n     @DisableOnCondition\n-    public BackupDTO backupHalo() {\n-        return backupService.backupWorkDirectory();\n+    public BackupDTO backupHalo(@RequestBody List<String> options) {\n+        return backupService.backupWorkDirectory(options);\n+    }\n+\n+    @GetMapping(\"work-dir/options\")\n+    @ApiOperation(\"Gets items that can be backed up\")\n+    public List<String> listBackupItems() throws IOException {\n+        return Files.list(Paths.get(haloProperties.getWorkDir()))\n+            .map(Path::getFileName)\n+            .filter(Objects::nonNull)\n+            .map(Path::toString)\n+            .sorted()\n+            .collect(Collectors.toList());\n     }\n \n     @GetMapping(\"work-dir\")\n\ndiff --git a/src/main/java/run/halo/app/service/BackupService.java b/src/main/java/run/halo/app/service/BackupService.java\n--- a/src/main/java/run/halo/app/service/BackupService.java\n+++ b/src/main/java/run/halo/app/service/BackupService.java\n@@ -32,11 +32,11 @@ public interface BackupService {\n     /**\n      * Zips work directory.\n      *\n+     * @param options file or directory items to back up\n      * @return backup dto.\n      */\n     @NonNull\n-    BackupDTO backupWorkDirectory();\n-\n+    BackupDTO backupWorkDirectory(List<String> options);\n \n     /**\n      * Lists all backups.\n\ndiff --git a/src/main/java/run/halo/app/service/impl/BackupServiceImpl.java b/src/main/java/run/halo/app/service/impl/BackupServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/BackupServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/BackupServiceImpl.java\n@@ -33,10 +33,12 @@\n import org.springframework.lang.NonNull;\n import org.springframework.stereotype.Service;\n import org.springframework.util.Assert;\n+import org.springframework.util.CollectionUtils;\n import org.springframework.web.multipart.MultipartFile;\n import run.halo.app.config.properties.HaloProperties;\n import run.halo.app.event.options.OptionUpdatedEvent;\n import run.halo.app.event.theme.ThemeUpdatedEvent;\n+import run.halo.app.exception.BadRequestException;\n import run.halo.app.exception.NotFoundException;\n import run.halo.app.exception.ServiceException;\n import run.halo.app.handler.file.FileHandler;\n@@ -213,7 +215,10 @@ public BasePostDetailDTO importMarkdown(MultipartFile file) throws IOException {\n     }\n \n     @Override\n-    public BackupDTO backupWorkDirectory() {\n+    public BackupDTO backupWorkDirectory(List<String> options) {\n+        if (CollectionUtils.isEmpty(options)) {\n+            throw new BadRequestException(\"The options parameter is missing, at least one.\");\n+        }\n         // Zip work directory to temporary file\n         try {\n             // Create zip path for halo zip\n@@ -229,7 +234,17 @@ public BackupDTO backupWorkDirectory() {\n \n             // Zip halo\n             run.halo.app.utils.FileUtils\n-                .zip(Paths.get(this.haloProperties.getWorkDir()), haloZipPath);\n+                .zip(Paths.get(this.haloProperties.getWorkDir()), haloZipPath,\n+                    path -> {\n+                        for (String itemToBackup : options) {\n+                            Path backupItemPath =\n+                                Paths.get(this.haloProperties.getWorkDir()).resolve(itemToBackup);\n+                            if (path.startsWith(backupItemPath)) {\n+                                return true;\n+                            }\n+                        }\n+                        return false;\n+                    });\n \n             // Build backup dto\n             return buildBackupDto(BACKUP_RESOURCE_BASE_URI, haloZipPath);\n\ndiff --git a/src/main/java/run/halo/app/utils/FileUtils.java b/src/main/java/run/halo/app/utils/FileUtils.java\n--- a/src/main/java/run/halo/app/utils/FileUtils.java\n+++ b/src/main/java/run/halo/app/utils/FileUtils.java\n@@ -185,6 +185,23 @@ public static void zip(@NonNull Path pathToZip, @NonNull Path pathOfArchive)\n         }\n     }\n \n+    /**\n+     * Zips folder or file with filter.\n+     *\n+     * @param pathToZip file path to zip must not be null\n+     * @param pathOfArchive zip file path to archive must not be null\n+     * @param filter folder or file filter\n+     * @throws IOException throws when failed to access file to be zipped\n+     */\n+    public static void zip(@NonNull Path pathToZip, @NonNull Path pathOfArchive,\n+        @Nullable Predicate<Path> filter) throws IOException {\n+        try (OutputStream outputStream = Files.newOutputStream(pathOfArchive)) {\n+            try (ZipOutputStream zipOut = new ZipOutputStream(outputStream)) {\n+                zip(pathToZip, zipOut, filter);\n+            }\n+        }\n+    }\n+\n     /**\n      * Zips folder or file.\n      *\n@@ -198,6 +215,20 @@ public static void zip(@NonNull Path pathToZip, @NonNull ZipOutputStream zipOut)\n         zip(pathToZip, pathToZip.getFileName().toString(), zipOut);\n     }\n \n+    /**\n+     * Zips folder or file with filter.\n+     *\n+     * @param pathToZip file path to zip must not be null\n+     * @param zipOut zip output stream must not be null\n+     * @param filter directory or file filter\n+     * @throws IOException throws when failed to access file to be zipped\n+     */\n+    public static void zip(@NonNull Path pathToZip, @NonNull ZipOutputStream zipOut,\n+        Predicate<Path> filter) throws IOException {\n+        // Zip file\n+        zip(pathToZip, pathToZip.getFileName().toString(), zipOut, filter);\n+    }\n+\n     /**\n      * Zips folder or file.\n      *\n@@ -208,6 +239,20 @@ public static void zip(@NonNull Path pathToZip, @NonNull ZipOutputStream zipOut)\n      */\n     private static void zip(@NonNull Path fileToZip, @NonNull String fileName,\n         @NonNull ZipOutputStream zipOut) throws IOException {\n+        zip(fileToZip, fileName, zipOut, null);\n+    }\n+\n+    /**\n+     * Zips folder or file with path filter.\n+     *\n+     * @param fileToZip file path to zip must not be null\n+     * @param fileName file name must not be blank\n+     * @param zipOut zip output stream must not be null\n+     * @param filter directory or file filter\n+     * @throws IOException throws when failed to access file to be zipped\n+     */\n+    private static void zip(@NonNull Path fileToZip, @NonNull String fileName,\n+        @NonNull ZipOutputStream zipOut, @Nullable Predicate<Path> filter) throws IOException {\n         if (Files.isDirectory(fileToZip)) {\n             log.debug(\"Try to zip folder: [{}]\", fileToZip);\n             // Append with '/' if missing\n@@ -222,10 +267,12 @@ private static void zip(@NonNull Path fileToZip, @NonNull String fileName,\n             try (Stream<Path> subPathStream = Files.list(fileToZip)) {\n                 // There should not use foreach for stream as internal zip method will throw\n                 // IOException\n-                List<Path> subFiles = subPathStream.collect(Collectors.toList());\n+                List<Path> subFiles =\n+                    filter != null ? subPathStream.filter(filter).collect(Collectors.toList())\n+                        : subPathStream.collect(Collectors.toList());\n                 for (Path subFileToZip : subFiles) {\n                     // Zip children\n-                    zip(subFileToZip, folderName + subFileToZip.getFileName(), zipOut);\n+                    zip(subFileToZip, folderName + subFileToZip.getFileName(), zipOut, filter);\n                 }\n             }\n         } else {",
    "output": "feat: add work dir backup options (#1494)\n\n* feat: Add backup options\r\n\r\n* feat: add sort for list backup items api\r\n\r\n* refactor: rename varibles"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/properties/CommentProperties.java b/src/main/java/run/halo/app/model/properties/CommentProperties.java\n--- a/src/main/java/run/halo/app/model/properties/CommentProperties.java\n+++ b/src/main/java/run/halo/app/model/properties/CommentProperties.java\n@@ -12,7 +12,7 @@ public enum CommentProperties implements PropertyEnum {\n     /**\n      * The default gravatar type.\n      */\n-    GRAVATAR_DEFAULT(\"comment_gravatar_default\", String.class, \"mm\"),\n+    GRAVATAR_DEFAULT(\"comment_gravatar_default\", String.class, \"\"),\n \n     /**\n      * Does it need to be checked.",
    "output": "Reset default avatar from \"mm\" to \"\" (#1485)\n\nCo-authored-by: cetr <2058930674@qq.com>"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java b/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n@@ -770,6 +770,6 @@ public String buildAvatarUrl(String gravatarMd5) {\n         final String gravatarDefault =\n             optionService.getByPropertyOrDefault(CommentProperties.GRAVATAR_DEFAULT, String.class);\n \n-        return gravatarSource + gravatarMd5 + \"?d=\" + gravatarDefault;\n+        return gravatarSource + gravatarMd5 + \"?s=256&d=\" + gravatarDefault;\n     }\n }",
    "output": "fix: add missing size parameter in comment gravatar URL (#1477)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/handler/file/FileHandler.java b/src/main/java/run/halo/app/handler/file/FileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/FileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/FileHandler.java\n@@ -2,6 +2,7 @@\n \n import static run.halo.app.model.support.HaloConst.FILE_SEPARATOR;\n \n+import java.awt.image.BufferedImage;\n import java.io.IOException;\n import java.io.InputStream;\n import java.util.function.Supplier;\n@@ -63,6 +64,8 @@ default boolean isImageType(@NonNull MultipartFile file) {\n     }\n \n     /**\n+     * Update Metadata for image object.\n+     *\n      * @param uploadResult updated result must not be null\n      * @param file multipart file must not be null\n      * @param thumbnailSupplier thumbnail supplier\n@@ -73,9 +76,19 @@ default void handleImageMetadata(@NonNull MultipartFile file,\n         if (isImageType(file)) {\n             // Handle image\n             try (InputStream is = file.getInputStream()) {\n-                ImageReader image = ImageUtils.getImageReaderFromFile(is, uploadResult.getSuffix());\n-                uploadResult.setWidth(image.getWidth(0));\n-                uploadResult.setHeight(image.getHeight(0));\n+                String extension = uploadResult.getSuffix();\n+                if (ImageUtils.EXTENSION_ICO.equals(extension)) {\n+                    BufferedImage icoImage =\n+                        ImageUtils.getImageFromFile(is, extension);\n+                    uploadResult.setWidth(icoImage.getWidth());\n+                    uploadResult.setHeight(icoImage.getHeight());\n+                } else {\n+                    ImageReader image =\n+                        ImageUtils.getImageReaderFromFile(is, extension);\n+                    uploadResult.setWidth(image.getWidth(0));\n+                    uploadResult.setHeight(image.getHeight(0));\n+                }\n+\n                 if (thumbnailSupplier != null) {\n                     uploadResult.setThumbPath(thumbnailSupplier.get());\n                 }",
    "output": "fix: the problem of without dimension information when uploading an ICO picture #1473 (#1474)\n\n* fixed #1473\r\n\r\n* fixed the problem of without dimension information when uploading an ICO picture#1473\r\n\r\nCo-authored-by: Jenson-Mac <Jenson.zq@gmail.com>"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/handler/file/MinioFileHandler.java b/src/main/java/run/halo/app/handler/file/MinioFileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/MinioFileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/MinioFileHandler.java\n@@ -50,12 +50,15 @@ public UploadResult upload(@NonNull MultipartFile file) {\n             optionService.getByPropertyOfNonNull(MinioProperties.BUCKET_NAME).toString();\n         String source =\n             optionService.getByPropertyOrDefault(MinioProperties.SOURCE, String.class, \"\");\n+        String region =\n+            optionService.getByPropertyOfNonNull(MinioProperties.REGION).toString();\n \n         endpoint = StringUtils.appendIfMissing(endpoint, HaloConst.URL_SEPARATOR);\n \n         MinioClient minioClient = MinioClient.builder()\n             .endpoint(endpoint)\n             .credentials(accessKey, accessSecret)\n+            .region(region)\n             .build();\n \n         try {\n@@ -110,10 +113,13 @@ public void delete(@NonNull String key) {\n             optionService.getByPropertyOfNonNull(MinioProperties.ACCESS_SECRET).toString();\n         String bucketName =\n             optionService.getByPropertyOfNonNull(MinioProperties.BUCKET_NAME).toString();\n+        String region =\n+            optionService.getByPropertyOfNonNull(MinioProperties.REGION).toString();\n \n         MinioClient minioClient = MinioClient.builder()\n             .endpoint(endPoint)\n             .credentials(accessKey, accessSecret)\n+            .region(region)\n             .build();\n \n         try {\n\ndiff --git a/src/main/java/run/halo/app/model/properties/MinioProperties.java b/src/main/java/run/halo/app/model/properties/MinioProperties.java\n--- a/src/main/java/run/halo/app/model/properties/MinioProperties.java\n+++ b/src/main/java/run/halo/app/model/properties/MinioProperties.java\n@@ -31,7 +31,12 @@ public enum MinioProperties implements PropertyEnum {\n     /**\n      * Minio source\n      */\n-    SOURCE(\"minio_source\", String.class, \"\");\n+    SOURCE(\"minio_source\", String.class, \"\"),\n+\n+    /**\n+     * Minio regoin\n+     */\n+    REGION(\"minio_region\", String.class, \"\");\n \n     private final String value;\n ",
    "output": "fix: add region for operate minio attachment  (halo-dev#1439) (#1440)\n\nCo-authored-by: li-guohao <liguohao_cn@qq.com>"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/handler/file/LocalFileHandler.java b/src/main/java/run/halo/app/handler/file/LocalFileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/LocalFileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/LocalFileHandler.java\n@@ -194,7 +194,6 @@ public void delete(String key) {\n             boolean deleteResult = Files.deleteIfExists(thumbnailPath);\n             if (!deleteResult) {\n                 log.warn(\"Thumbnail: [{}] may not exist\", thumbnailPath.toString());\n-                throw new FileOperationException(\"附件缩略图 \" + thumbnailName + \" 删除失败\");\n             }\n         } catch (IOException e) {\n             throw new FileOperationException(\"附件缩略图 \" + thumbnailName + \" 删除失败\", e);",
    "output": "fix: deleting a non-picture file throws an exception. (#1438)\n\n* fix: deleting a non-picture file throws an exception.\r\n\r\n#1437\r\n\r\n* doc: update CHANGELOG.md"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/api/PostController.java b/src/main/java/run/halo/app/controller/content/api/PostController.java\n--- a/src/main/java/run/halo/app/controller/content/api/PostController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/PostController.java\n@@ -72,15 +72,14 @@ public PostController(PostService postService,\n      * @param pageable store the priority of the sort algorithm\n      * @param keyword search articles with keyword\n      * @param categoryId search articles with categoryId\n-     * @return published articles that contains keywords and specific categoryid\n+     * @return published articles that contains keywords and specific categoryId\n      */\n-\n     @GetMapping\n     @ApiOperation(\"Lists posts\")\n     public Page<PostListVO> pageBy(\n         @PageableDefault(sort = {\"topPriority\", \"createTime\"}, direction = DESC) Pageable pageable,\n-        @RequestParam(value = \"keyword\") String keyword,\n-        @RequestParam(value = \"categoryId\") Integer categoryId) {\n+        @RequestParam(value = \"keyword\", required = false) String keyword,\n+        @RequestParam(value = \"categoryId\", required = false) Integer categoryId) {\n         PostQuery postQuery = new PostQuery();\n         postQuery.setKeyword(keyword);\n         postQuery.setCategoryId(categoryId);",
    "output": "fix: the keyword and categoryId parameters of the post list api are required #1432 (#1436)\n\n* fix: #1432\r\n\r\n* doc: update CHANGELOG.md"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/HaloMvcConfiguration.java b/src/main/java/run/halo/app/config/HaloMvcConfiguration.java\n--- a/src/main/java/run/halo/app/config/HaloMvcConfiguration.java\n+++ b/src/main/java/run/halo/app/config/HaloMvcConfiguration.java\n@@ -45,15 +45,12 @@\n import org.springframework.web.multipart.commons.CommonsMultipartResolver;\n import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\n import org.springframework.web.servlet.config.annotation.ViewControllerRegistry;\n-import org.springframework.web.servlet.config.annotation.ViewResolverRegistry;\n import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;\n-import org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver;\n import run.halo.app.config.properties.HaloProperties;\n import run.halo.app.core.PageJacksonSerializer;\n import run.halo.app.core.freemarker.inheritance.ThemeExtendsDirective;\n import run.halo.app.factory.StringToEnumConverterFactory;\n-import run.halo.app.model.support.HaloConst;\n import run.halo.app.security.resolver.AuthenticationArgumentResolver;\n \n /**\n@@ -210,23 +207,4 @@ public void addResourceHandlers(ResourceHandlerRegistry registry) {\n     public void addFormatters(FormatterRegistry registry) {\n         registry.addConverterFactory(new StringToEnumConverterFactory());\n     }\n-\n-    /**\n-     * Configuring view resolver\n-     *\n-     * @param registry registry\n-     */\n-    @Override\n-    public void configureViewResolvers(ViewResolverRegistry registry) {\n-        FreeMarkerViewResolver resolver = new FreeMarkerViewResolver();\n-        resolver.setAllowRequestOverride(false);\n-        resolver.setCache(false);\n-        resolver.setExposeRequestAttributes(false);\n-        resolver.setExposeSessionAttributes(false);\n-        resolver.setExposeSpringMacroHelpers(true);\n-        resolver.setSuffix(HaloConst.SUFFIX_FTL);\n-        resolver.setContentType(\"text/html; charset=UTF-8\");\n-        registry.viewResolver(resolver);\n-    }\n-\n }",
    "output": "fix: #1417 (#1427)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/repository/JournalCommentRepository.java b/src/main/java/run/halo/app/repository/JournalCommentRepository.java\n--- a/src/main/java/run/halo/app/repository/JournalCommentRepository.java\n+++ b/src/main/java/run/halo/app/repository/JournalCommentRepository.java\n@@ -5,6 +5,7 @@\n import org.springframework.data.jpa.repository.Query;\n import org.springframework.lang.NonNull;\n import run.halo.app.model.entity.JournalComment;\n+import run.halo.app.model.enums.CommentStatus;\n import run.halo.app.model.projection.CommentChildrenCountProjection;\n import run.halo.app.model.projection.CommentCountProjection;\n import run.halo.app.repository.base.BaseCommentRepository;\n@@ -33,6 +34,25 @@ public interface JournalCommentRepository extends BaseCommentRepository<JournalC\n     @Override\n     List<CommentCountProjection> countByPostIds(@NonNull Collection<Integer> postIds);\n \n+    /**\n+     * Counts comment count by comment status and journal id collection.\n+     *\n+     * @param status status must not be null\n+     * @param journalsId journal id collection must not be null\n+     * @return a list of comment count\n+     */\n+    @Query(\n+        \"select new run.halo.app.model.projection.CommentCountProjection(count(comment.id), \"\n+            + \"comment.postId) \"\n+            + \"from JournalComment comment \"\n+            + \"where comment.status = ?1 \"\n+            + \"and comment.postId in ?2 \"\n+            + \"group by comment.postId\")\n+    @NonNull\n+    @Override\n+    List<CommentCountProjection> countByStatusAndPostIds(@NonNull CommentStatus status,\n+        @NonNull Collection<Integer> journalsId);\n+\n     /**\n      * Finds direct children count by comment ids.\n      *\n\ndiff --git a/src/main/java/run/halo/app/repository/PostCommentRepository.java b/src/main/java/run/halo/app/repository/PostCommentRepository.java\n--- a/src/main/java/run/halo/app/repository/PostCommentRepository.java\n+++ b/src/main/java/run/halo/app/repository/PostCommentRepository.java\n@@ -6,6 +6,7 @@\n import org.springframework.data.jpa.repository.Query;\n import org.springframework.lang.NonNull;\n import run.halo.app.model.entity.PostComment;\n+import run.halo.app.model.enums.CommentStatus;\n import run.halo.app.model.projection.CommentChildrenCountProjection;\n import run.halo.app.model.projection.CommentCountProjection;\n import run.halo.app.repository.base.BaseCommentRepository;\n@@ -34,6 +35,25 @@ public interface PostCommentRepository extends BaseCommentRepository<PostComment\n     @Override\n     List<CommentCountProjection> countByPostIds(@NonNull Collection<Integer> postIds);\n \n+    /**\n+     * Counts comment count by comment status and post id collection.\n+     *\n+     * @param status status must not be null\n+     * @param postsId post id collection must not be null\n+     * @return a list of comment count\n+     */\n+    @Query(\n+        \"select new run.halo.app.model.projection.CommentCountProjection(count(comment.id), \"\n+            + \"comment.postId) \"\n+            + \"from PostComment comment \"\n+            + \"where comment.status = ?1 \"\n+            + \"and comment.postId in ?2 \"\n+            + \"group by comment.postId\")\n+    @NonNull\n+    @Override\n+    List<CommentCountProjection> countByStatusAndPostIds(@NonNull CommentStatus status,\n+        @NonNull Collection<Integer> postsId);\n+\n     /**\n      * Finds direct children count by comment ids.\n      *\n\ndiff --git a/src/main/java/run/halo/app/repository/SheetCommentRepository.java b/src/main/java/run/halo/app/repository/SheetCommentRepository.java\n--- a/src/main/java/run/halo/app/repository/SheetCommentRepository.java\n+++ b/src/main/java/run/halo/app/repository/SheetCommentRepository.java\n@@ -5,6 +5,7 @@\n import org.springframework.data.jpa.repository.Query;\n import org.springframework.lang.NonNull;\n import run.halo.app.model.entity.SheetComment;\n+import run.halo.app.model.enums.CommentStatus;\n import run.halo.app.model.projection.CommentChildrenCountProjection;\n import run.halo.app.model.projection.CommentCountProjection;\n import run.halo.app.repository.base.BaseCommentRepository;\n@@ -33,6 +34,25 @@ public interface SheetCommentRepository extends BaseCommentRepository<SheetComme\n     @Override\n     List<CommentCountProjection> countByPostIds(@NonNull Collection<Integer> sheetIds);\n \n+    /**\n+     * Counts comment count by comment status and sheet id collection.\n+     *\n+     * @param status status must not be null\n+     * @param sheetsId sheet id collection must not be null\n+     * @return a list of comment count\n+     */\n+    @Query(\n+        \"select new run.halo.app.model.projection.CommentCountProjection(count(comment.id), \"\n+            + \"comment.postId) \"\n+            + \"from SheetComment comment \"\n+            + \"where comment.status = ?1 \"\n+            + \"and comment.postId in ?2 \"\n+            + \"group by comment.postId\")\n+    @NonNull\n+    @Override\n+    List<CommentCountProjection> countByStatusAndPostIds(@NonNull CommentStatus status,\n+        @NonNull Collection<Integer> sheetsId);\n+\n     /**\n      * Finds direct children count by comment ids.\n      *\n\ndiff --git a/src/main/java/run/halo/app/repository/base/BaseCommentRepository.java b/src/main/java/run/halo/app/repository/base/BaseCommentRepository.java\n--- a/src/main/java/run/halo/app/repository/base/BaseCommentRepository.java\n+++ b/src/main/java/run/halo/app/repository/base/BaseCommentRepository.java\n@@ -221,6 +221,7 @@ List<COMMENT> findAllByStatusAndParentIdIn(@NonNull CommentStatus status,\n             + \"where comment.parentId in ?1 \"\n             + \"group by comment.parentId\")\n     @NonNull\n+    @Deprecated\n     List<CommentChildrenCountProjection> findDirectChildrenCount(\n         @NonNull Collection<Long> commentIds);\n ",
    "output": "fix: incorrect comment count statistics. #1411 (#1426)\n\n* fix: incorrect comment count statistics. #1411\r\n\r\nSigned-off-by: Ryan Wang <i@ryanc.cc>\r\n\r\n* pref: add override annotation."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/api/PostController.java b/src/main/java/run/halo/app/controller/content/api/PostController.java\n--- a/src/main/java/run/halo/app/controller/content/api/PostController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/PostController.java\n@@ -65,24 +65,25 @@ public PostController(PostService postService,\n     }\n \n     //CS304 issue for https://github.com/halo-dev/halo/issues/1351\n+\n     /**\n      * Enable users search published articles with keywords\n      *\n-     * @param pageable    store the priority of the sort algorithm\n-     * @param keyword     search articles with keyword\n-     * @param categoryid  search articles with categoryid\n-     * @return            published articles that contains keywords and specific categoryid\n+     * @param pageable store the priority of the sort algorithm\n+     * @param keyword search articles with keyword\n+     * @param categoryId search articles with categoryId\n+     * @return published articles that contains keywords and specific categoryid\n      */\n \n     @GetMapping\n     @ApiOperation(\"Lists posts\")\n     public Page<PostListVO> pageBy(\n         @PageableDefault(sort = {\"topPriority\", \"createTime\"}, direction = DESC) Pageable pageable,\n         @RequestParam(value = \"keyword\") String keyword,\n-        @RequestParam(value = \"categoryid\") int categoryid) {\n+        @RequestParam(value = \"categoryId\") Integer categoryId) {\n         PostQuery postQuery = new PostQuery();\n         postQuery.setKeyword(keyword);\n-        postQuery.setCategoryId(categoryid);\n+        postQuery.setCategoryId(categoryId);\n         postQuery.setStatus(PostStatus.PUBLISHED);\n         Page<Post> postPage = postService.pageBy(postQuery, pageable);\n         return postService.convertToListVo(postPage, true);",
    "output": "fix: api parameter names in the post list content api. (#1415)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/api/PostController.java b/src/main/java/run/halo/app/controller/content/api/PostController.java\n--- a/src/main/java/run/halo/app/controller/content/api/PostController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/PostController.java\n@@ -20,6 +20,7 @@\n import org.springframework.web.bind.annotation.RestController;\n import org.springframework.web.util.HtmlUtils;\n import run.halo.app.cache.lock.CacheLock;\n+import run.halo.app.cache.lock.CacheParam;\n import run.halo.app.exception.NotFoundException;\n import run.halo.app.model.dto.BaseCommentDTO;\n import run.halo.app.model.dto.post.BasePostSimpleDTO;\n@@ -214,7 +215,7 @@ public BaseCommentDTO comment(@RequestBody PostCommentParam postCommentParam) {\n     @PostMapping(\"{postId:\\\\d+}/likes\")\n     @ApiOperation(\"Likes a post\")\n     @CacheLock(autoDelete = false, traceRequest = true)\n-    public void like(@PathVariable(\"postId\") Integer postId) {\n+    public void like(@PathVariable(\"postId\") @CacheParam Integer postId) {\n         postService.increaseLike(postId);\n     }\n }",
    "output": "fix: #1409 (#1410)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/listener/freemarker/FreemarkerConfigAwareListener.java b/src/main/java/run/halo/app/listener/freemarker/FreemarkerConfigAwareListener.java\n--- a/src/main/java/run/halo/app/listener/freemarker/FreemarkerConfigAwareListener.java\n+++ b/src/main/java/run/halo/app/listener/freemarker/FreemarkerConfigAwareListener.java\n@@ -2,6 +2,7 @@\n \n import static run.halo.app.model.support.HaloConst.OPTIONS_CACHE_KEY;\n \n+import freemarker.core.TemplateClassResolver;\n import freemarker.template.Configuration;\n import freemarker.template.TemplateModel;\n import freemarker.template.TemplateModelException;\n@@ -78,6 +79,7 @@ private Map<String, TemplateModel> freemarkerLayoutDirectives() {\n \n     private void initFreemarkerConfig() throws TemplateModelException {\n         configuration.setSharedVariable(\"layout\", freemarkerLayoutDirectives());\n+        configuration.setNewBuiltinClassResolver(TemplateClassResolver.SAFER_RESOLVER);\n     }\n \n     @EventListener",
    "output": "fix(security): freemarker SSTI vulnerability. (#1402)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/InstallController.java b/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n@@ -295,21 +295,7 @@ private void initSettings(InstallParam installParam) {\n         properties.put(BlogProperties.BLOG_URL,\n             StringUtils.isBlank(installParam.getUrl()) ? optionService.getBlogBaseUrl() :\n                 installParam.getUrl());\n-\n-        Long birthday =\n-            optionService.getByPropertyOrDefault(PrimaryProperties.BIRTHDAY, Long.class, 0L);\n-\n-        if (birthday.equals(0L)) {\n-            properties.put(PrimaryProperties.BIRTHDAY, String.valueOf(System.currentTimeMillis()));\n-        }\n-\n-        Boolean globalAbsolutePathEnabled = optionService\n-            .getByPropertyOrDefault(OtherProperties.GLOBAL_ABSOLUTE_PATH_ENABLED, Boolean.class,\n-                null);\n-\n-        if (globalAbsolutePathEnabled == null) {\n-            properties.put(OtherProperties.GLOBAL_ABSOLUTE_PATH_ENABLED, Boolean.FALSE.toString());\n-        }\n+        properties.put(OtherProperties.GLOBAL_ABSOLUTE_PATH_ENABLED, Boolean.FALSE.toString());\n \n         // Create properties\n         optionService.saveProperties(properties);\n\ndiff --git a/src/test/java/run/halo/app/it/IndexPageRequestTest.java b/src/test/java/run/halo/app/it/IndexPageRequestTest.java\n--- a/src/test/java/run/halo/app/it/IndexPageRequestTest.java\n+++ b/src/test/java/run/halo/app/it/IndexPageRequestTest.java\n@@ -33,7 +33,7 @@ void indexPage() throws IOException {\n         // validate post link\n         Element postTitleLink =\n             document.body().selectFirst(\".content > .post > .post-title > h3 > a\");\n-        assertEquals(blogUrl + \"/archives/hello-halo\", postTitleLink.attr(\"href\"));\n+        assertEquals(\"/archives/hello-halo\", postTitleLink.attr(\"href\"));\n         assertEquals(\"Hello Halo\", postTitleLink.text());\n     }\n }",
    "output": "fix: #1394 (#1396)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/CategoryService.java b/src/main/java/run/halo/app/service/CategoryService.java\n--- a/src/main/java/run/halo/app/service/CategoryService.java\n+++ b/src/main/java/run/halo/app/service/CategoryService.java\n@@ -100,6 +100,14 @@ public interface CategoryService extends CrudService<Category, Integer> {\n     @NonNull\n     List<Category> listAll(Sort sort, boolean queryEncryptCategory);\n \n+    /**\n+     * List all category not encrypt.\n+     *\n+     * @param queryEncryptCategory whether to query encryption category\n+     * @return list of category.\n+     */\n+    List<Category> listAll(boolean queryEncryptCategory);\n+\n     /**\n      * List all by ids\n      *\n\ndiff --git a/src/main/java/run/halo/app/service/impl/BackupServiceImpl.java b/src/main/java/run/halo/app/service/impl/BackupServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/BackupServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/BackupServiceImpl.java\n@@ -336,7 +336,7 @@ public BackupDTO exportData() {\n         data.put(\"version\", HaloConst.HALO_VERSION);\n         data.put(\"export_date\", DateUtil.now());\n         data.put(\"attachments\", attachmentService.listAll());\n-        data.put(\"categories\", categoryService.listAll());\n+        data.put(\"categories\", categoryService.listAll(true));\n         data.put(\"comment_black_list\", commentBlackListService.listAll());\n         data.put(\"journals\", journalService.listAll());\n         data.put(\"journal_comments\", journalCommentService.listAll());\n\ndiff --git a/src/main/java/run/halo/app/service/impl/CategoryServiceImpl.java b/src/main/java/run/halo/app/service/impl/CategoryServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/CategoryServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/CategoryServiceImpl.java\n@@ -67,7 +67,7 @@ public class CategoryServiceImpl extends AbstractCrudService<Category, Integer>\n \n     private PostService postService;\n \n-    private AuthenticationService authenticationService;\n+    private final AuthenticationService authenticationService;\n \n     public CategoryServiceImpl(CategoryRepository categoryRepository,\n         PostCategoryService postCategoryService,\n@@ -146,7 +146,7 @@ public List<CategoryVO> listAsTree(Sort sort) {\n      *\n      * @param parentCategory parent category vo must not be null\n      * @param categories a list of category\n-     * @param fillPassword   whether to fill in the password\n+     * @param fillPassword whether to fill in the password\n      */\n     private void concreteTree(\n         CategoryVO parentCategory,\n@@ -240,8 +240,8 @@ public Category getBySlug(String slug) {\n     public Category getBySlugOfNonNull(String slug) {\n \n         Category category = categoryRepository\n-                .getBySlug(slug)\n-                .orElseThrow(() -> new NotFoundException(\"查询不到该分类的信息\").setErrorData(slug));\n+            .getBySlug(slug)\n+            .orElseThrow(() -> new NotFoundException(\"查询不到该分类的信息\").setErrorData(slug));\n \n         if (authenticationService.categoryAuthentication(category.getId(), null)) {\n             return category;\n@@ -291,7 +291,7 @@ public void removeCategoryAndPostCategoryBy(Integer categoryId) {\n         removeById(categoryId);\n         // Remove post categories\n         List<Integer> affectedPostIdList = postCategoryService.removeByCategoryId(categoryId)\n-                .stream().map(PostCategory::getPostId).collect(Collectors.toList());\n+            .stream().map(PostCategory::getPostId).collect(Collectors.toList());\n \n         refreshPostStatus(affectedPostIdList);\n     }\n@@ -311,10 +311,10 @@ public void refreshPostStatus(List<Integer> affectedPostIdList) {\n                 post.setStatus(PostStatus.INTIMATE);\n             } else {\n                 postCategoryService.listByPostId(postId)\n-                        .stream().map(PostCategory::getCategoryId)\n-                        .filter(this::categoryHasEncrypt)\n-                        .findAny()\n-                        .ifPresent(id -> post.setStatus(PostStatus.INTIMATE));\n+                    .stream().map(PostCategory::getCategoryId)\n+                    .filter(this::categoryHasEncrypt)\n+                    .findAny()\n+                    .ifPresent(id -> post.setStatus(PostStatus.INTIMATE));\n             }\n \n             if (post.getStatus() == null) {\n@@ -417,12 +417,12 @@ private void doFilterEncryptCategory(List<CategoryVO> categoryList) {\n      * Collect all child from tree\n      *\n      * @param collectorList collector\n-     * @param childrenList  contains categories of children\n+     * @param childrenList contains categories of children\n      * @param doNotCollectEncryptedCategory true is not collect, false is collect\n      */\n     private void collectAllChild(List<Category> collectorList,\n-            List<CategoryVO> childrenList,\n-            Boolean doNotCollectEncryptedCategory) {\n+        List<CategoryVO> childrenList,\n+        Boolean doNotCollectEncryptedCategory) {\n         if (CollectionUtil.isEmpty(childrenList)) {\n             return;\n         }\n@@ -451,14 +451,14 @@ private void collectAllChild(List<Category> collectorList,\n      * Collect sub-categories under the specified category.\n      *\n      * @param collectorList collector\n-     * @param childrenList  contains categories of children\n-     * @param categoryId    category id\n+     * @param childrenList contains categories of children\n+     * @param categoryId category id\n      * @param doNotCollectEncryptedCategory true is not collect, false is collect\n      */\n     private void collectAllChildByCategoryId(List<Category> collectorList,\n-            List<CategoryVO> childrenList,\n-            Integer categoryId,\n-            Boolean doNotCollectEncryptedCategory) {\n+        List<CategoryVO> childrenList,\n+        Integer categoryId,\n+        Boolean doNotCollectEncryptedCategory) {\n         if (CollectionUtil.isEmpty(childrenList)) {\n             return;\n         }\n@@ -481,6 +481,15 @@ public List<Category> listAll(Sort sort, boolean queryEncryptCategory) {\n         }\n     }\n \n+    @Override\n+    public List<Category> listAll(boolean queryEncryptCategory) {\n+        if (queryEncryptCategory) {\n+            return super.listAll();\n+        } else {\n+            return this.listAll();\n+        }\n+    }\n+\n     @Override\n     public List<Category> listAll() {\n         return filterEncryptCategory(super.listAll());\n@@ -578,7 +587,7 @@ private void doDecryptPost(Category category) {\n         List<Category> allCategoryList = super.listAll();\n \n         Map<Integer, Category> idToCategoryMap = allCategoryList.stream().collect(\n-                Collectors.toMap(Category::getId, Function.identity()));\n+            Collectors.toMap(Category::getId, Function.identity()));\n \n         if (doCategoryHasEncrypt(idToCategoryMap, category.getParentId())) {\n             // If the parent category is encrypted, there is no need to update the encryption status\n@@ -622,7 +631,7 @@ public Boolean categoryHasEncrypt(Integer categoryId) {\n         List<Category> allCategoryList = super.listAll();\n \n         Map<Integer, Category> idToCategoryMap = allCategoryList.stream().collect(\n-                Collectors.toMap(Category::getId, Function.identity()));\n+            Collectors.toMap(Category::getId, Function.identity()));\n \n         return doCategoryHasEncrypt(idToCategoryMap, categoryId);\n     }",
    "output": "fix: #1386 (#1390)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/api/CategoryController.java b/src/main/java/run/halo/app/controller/content/api/CategoryController.java\n--- a/src/main/java/run/halo/app/controller/content/api/CategoryController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/CategoryController.java\n@@ -80,7 +80,7 @@ public Page<PostListVO> listPostsBy(@PathVariable(\"slug\") String slug,\n \n         Page<Post> postPage =\n             postCategoryService.pagePostBy(category.getId(),\n-                Sets.immutableEnumSet(PostStatus.PUBLISHED, PostStatus.INTIMATE), pageable);\n+                Sets.immutableEnumSet(PostStatus.PUBLISHED), pageable);\n         return postService.convertToListVo(postPage);\n     }\n }\n\ndiff --git a/src/main/java/run/halo/app/controller/content/model/CategoryModel.java b/src/main/java/run/halo/app/controller/content/model/CategoryModel.java\n--- a/src/main/java/run/halo/app/controller/content/model/CategoryModel.java\n+++ b/src/main/java/run/halo/app/controller/content/model/CategoryModel.java\n@@ -102,7 +102,7 @@ public String listPost(Model model, String slug, Integer page) {\n             Sort.by(DESC, \"topPriority\", \"createTime\"));\n         Page<Post> postPage =\n             postCategoryService.pagePostBy(category.getId(), Sets\n-                .immutableEnumSet(PostStatus.PUBLISHED, PostStatus.INTIMATE), pageable);\n+                .immutableEnumSet(PostStatus.PUBLISHED), pageable);\n         Page<PostListVO> posts = postService.convertToListVo(postPage);\n \n         // Generate meta description.",
    "output": "fix: intimate posts should not be searchable in the category list (#1379)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/api/PostController.java b/src/main/java/run/halo/app/controller/content/api/PostController.java\n--- a/src/main/java/run/halo/app/controller/content/api/PostController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/PostController.java\n@@ -28,6 +28,7 @@\n import run.halo.app.model.enums.CommentStatus;\n import run.halo.app.model.enums.PostStatus;\n import run.halo.app.model.params.PostCommentParam;\n+import run.halo.app.model.params.PostQuery;\n import run.halo.app.model.vo.BaseCommentVO;\n import run.halo.app.model.vo.BaseCommentWithParentVO;\n import run.halo.app.model.vo.CommentWithHasChildrenVO;\n@@ -62,12 +63,28 @@ public PostController(PostService postService,\n         this.optionService = optionService;\n     }\n \n+    //CS304 issue for https://github.com/halo-dev/halo/issues/1351\n+    /**\n+     * Enable users search published articles with keywords\n+     *\n+     * @param pageable    store the priority of the sort algorithm\n+     * @param keyword     search articles with keyword\n+     * @param categoryid  search articles with categoryid\n+     * @return            published articles that contains keywords and specific categoryid\n+     */\n+\n     @GetMapping\n     @ApiOperation(\"Lists posts\")\n     public Page<PostListVO> pageBy(\n-        @PageableDefault(sort = \"createTime\", direction = DESC) Pageable pageable) {\n-        Page<Post> postPage = postService.pageBy(PostStatus.PUBLISHED, pageable);\n-        return postService.convertToListVo(postPage);\n+        @PageableDefault(sort = {\"topPriority\", \"createTime\"}, direction = DESC) Pageable pageable,\n+        @RequestParam(value = \"keyword\") String keyword,\n+        @RequestParam(value = \"categoryid\") int categoryid) {\n+        PostQuery postQuery = new PostQuery();\n+        postQuery.setKeyword(keyword);\n+        postQuery.setCategoryId(categoryid);\n+        postQuery.setStatus(PostStatus.PUBLISHED);\n+        Page<Post> postPage = postService.pageBy(postQuery, pageable);\n+        return postService.convertToListVo(postPage, true);\n     }\n \n     @PostMapping(value = \"search\")",
    "output": "feat: modify the content api to support list posts with keyword and category params. (#1373)\n\n* Modefy the content api to support list posts with new class PostQueryContent\r\n\r\n* Modefy the content api to support list posts with new class PostQueryContent\r\n\r\n* using parameters\r\n\r\n* with categoryid\r\n\r\n* checkstyle\r\n\r\nCo-authored-by: Cui <11811305@mail.sustech.edu.cn>"
  },
  {
    "input": "diff --git a/src/test/java/run/halo/app/service/impl/HTMLWordCountTest.java b/src/test/java/run/halo/app/service/impl/HTMLWordCountTest.java\n--- a/src/test/java/run/halo/app/service/impl/HTMLWordCountTest.java\n+++ b/src/test/java/run/halo/app/service/impl/HTMLWordCountTest.java\n@@ -11,9 +11,9 @@\n @Slf4j\n public class HTMLWordCountTest {\n \n-    String markdownWithPicture = \"图片字数测试\\n\" +\n-        \"![image.png](http://127.0.0.1:8090/upload/2021/04/image-51142fdc369c48698dd75c24f6049738\" +\n-        \".png)\";\n+    String markdownWithPicture = \"图片字数测试\\n\"\n+        + \"![image.png](http://127.0.0.1:8090/upload/2021/04/image-51142fdc369c48698dd75c24f6049738\"\n+        + \".png)\";\n \n     String markdownWithTitle = \"# 标题字数测试\";\n \n@@ -23,35 +23,37 @@ public class HTMLWordCountTest {\n \n     String markdownWithLink = \"[链接字数测试](https://www.baidu.com)\";\n \n-    String markdownWithTable =\n-        \"|表格|字数|测试|\\n\" +\n-        \"|-------|-------|-------|\\n\" +\n-        \"|表格|字数|测试|\\n\";\n+    String markdownWithTable = \"|表格|字数|测试|\\n\"\n+        + \"|-------|-------|-------|\\n\"\n+        + \"|表格|字数|测试|\\n\";\n \n     String plainText = \"纯文本字数测试\";\n \n-    String complexText = \"# 复杂文本测试\\n\\n\" +\n-        \"![图片不算字数](http://127.0.0.1:8090/upload/2021/04/image-51142fdc369c48698dd75c24f6049738)\\n\\n\" +\n-        \"++~~***复杂文本测试***~~++  `复杂文本测试`  [复杂文本测试](https://halo.run)\\n\\n\" +\n-        \"|复杂|文本|测试|\\n\" +\n-        \"|-------|-------|-------|\\n\" +\n-        \"|复杂|文本|测试|\\n\\n\" +\n-        \"## 复杂文本测试\\n\";\n+    String complexText = \"# 复杂文本测试\\n\\n\"\n+        + \"![图片不算字数](http://127.0.0.1:8090/upload/2021/04/image-51142fdc369c48698dd75c24f6049738)\"\n+        + \"\\n\\n\"\n+        + \"++~~***复杂文本测试***~~++  `复杂文本测试`  [复杂文本测试](https://halo.run)\\n\\n\"\n+        + \"|复杂|文本|测试|\\n\"\n+        + \"|-------|-------|-------|\\n\"\n+        + \"|复杂|文本|测试|\\n\\n\"\n+        + \"## 复杂文本测试\\n\";\n \n     String htmlText =\n-        \"<body><h1>复杂文本测试 </h1>\\n\" +\n-        \"<p><img src=\\\"http://127.0.0.1:8090/upload/2021/04/image-51142fdc369c48698dd75c24f6049738\\\" \" +\n-        \"referrerpolicy=\\\"no-referrer\\\" alt=\\\"图片不算字数\\\"> \\n\" +\n-        \"<del><strong><em>复杂文本测试</em></strong></del>  <code>复杂文本测试</code>  <a href='https://halo\" +\n-        \".run'>复杂文本测试</a> </p>\\n\" +\n-        \"<figure><table>\\n\" +\n-        \"<thead>\\n\" +\n-        \"<tr><th>复杂</th><th>文本</th><th>测试</th></tr></thead>\\n\" +\n-        \"<tbody><tr><td>复杂</td><td>文本</td><td>测试</td></tr></tbody>\\n\" +\n-        \"</table></figure>\\n\" +\n-        \"<h2>复杂文本测试</h2>\\n\" +\n-        \"</body>\\n\" +\n-        \"</html>\";\n+        \"<body><h1>复杂文本测试 </h1>\\n\"\n+            + \"<p><img src=\\\"http://127.0.0\"\n+            + \".1:8090/upload/2021/04/image-51142fdc369c48698dd75c24f6049738\\\" \"\n+            + \"referrerpolicy=\\\"no-referrer\\\" alt=\\\"图片不算字数\\\"> \\n\"\n+            + \"<del><strong><em>复杂文本测试</em></strong></del>  <code>复杂文本测试</code>  <a \"\n+            + \"href='https://halo\"\n+            + \".run'>复杂文本测试</a> </p>\\n\"\n+            + \"<figure><table>\\n\"\n+            + \"<thead>\\n\"\n+            + \"<tr><th>复杂</th><th>文本</th><th>测试</th></tr></thead>\\n\"\n+            + \"<tbody><tr><td>复杂</td><td>文本</td><td>测试</td></tr></tbody>\\n\"\n+            + \"</table></figure>\\n\"\n+            + \"<h2>复杂文本测试</h2>\\n\"\n+            + \"</body>\\n\"\n+            + \"</html>\";\n \n     String nullString = null;\n \n@@ -72,13 +74,15 @@ void titleTest() {\n     @Test\n     void fontTypeTest() {\n         assertEquals(\"字体样式字数测试\".length(),\n-            BasePostServiceImpl.htmlFormatWordCount(MarkdownUtils.renderHtml(markdownWithFontType)));\n+            BasePostServiceImpl\n+                .htmlFormatWordCount(MarkdownUtils.renderHtml(markdownWithFontType)));\n     }\n \n     @Test\n     void codeTypeTest() {\n         assertEquals(\"代码样式字数测试\".length(),\n-            BasePostServiceImpl.htmlFormatWordCount(MarkdownUtils.renderHtml(markdownWithCodeType)));\n+            BasePostServiceImpl\n+                .htmlFormatWordCount(MarkdownUtils.renderHtml(markdownWithCodeType)));\n     }\n \n     @Test",
    "output": "fix: checkstyle error. (#1375)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java b/src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java\n@@ -3,7 +3,6 @@\n import static org.springframework.data.domain.Sort.Direction.ASC;\n import static org.springframework.data.domain.Sort.Direction.DESC;\n \n-import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n import java.util.Optional;\n@@ -55,7 +54,9 @@ public abstract class BasePostServiceImpl<POST extends BasePost>\n \n     private final OptionService optionService;\n \n-    private final Pattern summaryPattern = Pattern.compile(\"\\t|\\r|\\n\");\n+    private static final Pattern summaryPattern = Pattern.compile(\"\\t|\\r|\\n\");\n+\n+    private static final Pattern BLANK_PATTERN = Pattern.compile(\"\\\\s\");\n \n     public BasePostServiceImpl(BasePostRepository<POST> basePostRepository,\n         OptionService optionService) {\n@@ -274,21 +275,27 @@ public void increaseLike(Integer postId) {\n         increaseLike(1L, postId);\n     }\n \n+    /**\n+     * @param post post for article\n+     * @return post with handled data\n+     */\n     @Override\n     @Transactional\n     public POST createOrUpdateBy(POST post) {\n         Assert.notNull(post, \"Post must not be null\");\n \n         String originalContent = post.getOriginalContent();\n-        originalContent = HaloUtils.cleanHtmlTag(originalContent);\n \n-        post.setWordCount((long) originalContent.length());\n-\n-        // Render content\n+        // CS304 issue link : https://github.com/halo-dev/halo/issues/1224\n+        // Render content and set word count\n         if (post.getEditorType().equals(PostEditorType.MARKDOWN)) {\n             post.setFormatContent(MarkdownUtils.renderHtml(post.getOriginalContent()));\n+\n+            post.setWordCount(htmlFormatWordCount(post.getFormatContent()));\n         } else {\n-            post.setFormatContent(post.getOriginalContent());\n+            post.setFormatContent(originalContent);\n+\n+            post.setWordCount(htmlFormatWordCount(originalContent));\n         }\n \n         // Create or update post\n@@ -527,4 +534,29 @@ protected String generateSummary(@NonNull String htmlContent) {\n \n         return StringUtils.substring(text, 0, summaryLength);\n     }\n+\n+    // CS304 issue link : https://github.com/halo-dev/halo/issues/1224\n+\n+    /**\n+     * @param htmlContent the markdown style content\n+     * @return word count except space and line separator\n+     */\n+\n+    public static long htmlFormatWordCount(String htmlContent) {\n+        if (htmlContent == null) {\n+            return 0;\n+        }\n+\n+        String cleanContent = HaloUtils.cleanHtmlTag(htmlContent);\n+\n+        Matcher matcher = BLANK_PATTERN.matcher(cleanContent);\n+\n+        int count = 0;\n+\n+        while (matcher.find()) {\n+            count++;\n+        }\n+\n+        return cleanContent.length() - count;\n+    }\n }\n\ndiff --git a/src/test/java/run/halo/app/service/impl/HTMLWordCountTest.java b/src/test/java/run/halo/app/service/impl/HTMLWordCountTest.java\n--- a/src/test/java/run/halo/app/service/impl/HTMLWordCountTest.java\n+++ b/src/test/java/run/halo/app/service/impl/HTMLWordCountTest.java\n@@ -0,0 +1,127 @@\n+package run.halo.app.service.impl;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.junit.jupiter.api.Test;\n+import run.halo.app.utils.MarkdownUtils;\n+\n+// CS304 issue link : https://github.com/halo-dev/halo/issues/1224\n+\n+@Slf4j\n+public class HTMLWordCountTest {\n+\n+    String markdownWithPicture = \"图片字数测试\\n\" +\n+        \"![image.png](http://127.0.0.1:8090/upload/2021/04/image-51142fdc369c48698dd75c24f6049738\" +\n+        \".png)\";\n+\n+    String markdownWithTitle = \"# 标题字数测试\";\n+\n+    String markdownWithFontType = \"++~~***字体样式字数测试***~~++\";\n+\n+    String markdownWithCodeType = \"`代码样式字数测试`\";\n+\n+    String markdownWithLink = \"[链接字数测试](https://www.baidu.com)\";\n+\n+    String markdownWithTable =\n+        \"|表格|字数|测试|\\n\" +\n+        \"|-------|-------|-------|\\n\" +\n+        \"|表格|字数|测试|\\n\";\n+\n+    String plainText = \"纯文本字数测试\";\n+\n+    String complexText = \"# 复杂文本测试\\n\\n\" +\n+        \"![图片不算字数](http://127.0.0.1:8090/upload/2021/04/image-51142fdc369c48698dd75c24f6049738)\\n\\n\" +\n+        \"++~~***复杂文本测试***~~++  `复杂文本测试`  [复杂文本测试](https://halo.run)\\n\\n\" +\n+        \"|复杂|文本|测试|\\n\" +\n+        \"|-------|-------|-------|\\n\" +\n+        \"|复杂|文本|测试|\\n\\n\" +\n+        \"## 复杂文本测试\\n\";\n+\n+    String htmlText =\n+        \"<body><h1>复杂文本测试 </h1>\\n\" +\n+        \"<p><img src=\\\"http://127.0.0.1:8090/upload/2021/04/image-51142fdc369c48698dd75c24f6049738\\\" \" +\n+        \"referrerpolicy=\\\"no-referrer\\\" alt=\\\"图片不算字数\\\"> \\n\" +\n+        \"<del><strong><em>复杂文本测试</em></strong></del>  <code>复杂文本测试</code>  <a href='https://halo\" +\n+        \".run'>复杂文本测试</a> </p>\\n\" +\n+        \"<figure><table>\\n\" +\n+        \"<thead>\\n\" +\n+        \"<tr><th>复杂</th><th>文本</th><th>测试</th></tr></thead>\\n\" +\n+        \"<tbody><tr><td>复杂</td><td>文本</td><td>测试</td></tr></tbody>\\n\" +\n+        \"</table></figure>\\n\" +\n+        \"<h2>复杂文本测试</h2>\\n\" +\n+        \"</body>\\n\" +\n+        \"</html>\";\n+\n+    String nullString = null;\n+\n+    String emptyString = \"\";\n+\n+    @Test\n+    void pictureTest() {\n+        assertEquals(\"图片字数测试\".length(),\n+            BasePostServiceImpl.htmlFormatWordCount(MarkdownUtils.renderHtml(markdownWithPicture)));\n+    }\n+\n+    @Test\n+    void titleTest() {\n+        assertEquals(\"标题字数测试\".length(),\n+            BasePostServiceImpl.htmlFormatWordCount(MarkdownUtils.renderHtml(markdownWithTitle)));\n+    }\n+\n+    @Test\n+    void fontTypeTest() {\n+        assertEquals(\"字体样式字数测试\".length(),\n+            BasePostServiceImpl.htmlFormatWordCount(MarkdownUtils.renderHtml(markdownWithFontType)));\n+    }\n+\n+    @Test\n+    void codeTypeTest() {\n+        assertEquals(\"代码样式字数测试\".length(),\n+            BasePostServiceImpl.htmlFormatWordCount(MarkdownUtils.renderHtml(markdownWithCodeType)));\n+    }\n+\n+    @Test\n+    void linkTest() {\n+        assertEquals(\"链接字数测试\".length(),\n+            BasePostServiceImpl.htmlFormatWordCount(MarkdownUtils.renderHtml(markdownWithLink)));\n+    }\n+\n+    @Test\n+    void tableTest() {\n+        assertEquals(\"表格字数测试\".length() * 2,\n+            BasePostServiceImpl.htmlFormatWordCount(MarkdownUtils.renderHtml(markdownWithTable)));\n+    }\n+\n+    @Test\n+    void plainTextTest() {\n+        assertEquals(plainText.length(),\n+            BasePostServiceImpl.htmlFormatWordCount(MarkdownUtils.renderHtml(plainText)));\n+    }\n+\n+    @Test\n+    void complexTextTest() {\n+        assertEquals(\"复杂文本测试复杂文本测试复杂文本测试复杂文本测试复杂文本测试复杂文本测试复杂文本测试\".length(),\n+            BasePostServiceImpl.htmlFormatWordCount(MarkdownUtils.renderHtml(complexText)));\n+    }\n+\n+    @Test\n+    void htmlTest() {\n+        assertEquals(\"复杂文本测试复杂文本测试复杂文本测试复杂文本测试复杂文本测试复杂文本测试复杂文本测试\".length(),\n+            BasePostServiceImpl.htmlFormatWordCount(MarkdownUtils.renderHtml(htmlText)));\n+    }\n+\n+    @Test\n+    void nullTest() {\n+        assertEquals(0,\n+            BasePostServiceImpl.htmlFormatWordCount(null));\n+        assertEquals(0,\n+            BasePostServiceImpl.htmlFormatWordCount(MarkdownUtils.renderHtml(nullString)));\n+    }\n+\n+    @Test\n+    void emptyTest() {\n+        assertEquals(0,\n+            BasePostServiceImpl.htmlFormatWordCount(MarkdownUtils.renderHtml(emptyString)));\n+    }\n+}",
    "output": "Word count for markdown updated with test (#1354)\n\n* Word count for markdown updated with test\n\n* HTML word count updated with test\n\n* Convert pattern to static final variable\n\n* More HTML test added\n\n* Workaround URL added\n\n* CS304 issue link URL added\n\n* Pure HTML Test added, checkstyle checked\n\nCo-authored-by: MasterWanna <MasterWanna@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/api/OptionController.java b/src/main/java/run/halo/app/controller/content/api/OptionController.java\n--- a/src/main/java/run/halo/app/controller/content/api/OptionController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/OptionController.java\n@@ -82,7 +82,7 @@ public Map<String, Object> listAllWithMapView(\n     @ApiOperation(\"Gets option value by option key\")\n     public BaseResponse<Object> getBy(@PathVariable(\"key\") String key) {\n         Object optionValue = optionFilter.filter(key)\n-            .map(k -> optionService.getByKey(key))\n+            .flatMap(k -> optionService.getByKey(key))\n             .orElse(null);\n         return BaseResponse.ok(optionValue);\n     }",
    "output": "fix: Returns the result in the content api for options getby (#1353)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/ContentFeedController.java b/src/main/java/run/halo/app/controller/content/ContentFeedController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentFeedController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentFeedController.java\n@@ -5,7 +5,12 @@\n import freemarker.template.Template;\n import freemarker.template.TemplateException;\n import java.io.IOException;\n+import java.sql.Timestamp;\n+import java.text.SimpleDateFormat;\n import java.util.List;\n+import java.util.Locale;\n+import java.util.OptionalLong;\n+import javax.servlet.http.HttpServletResponse;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.lang3.RegExUtils;\n import org.springframework.data.domain.Page;\n@@ -47,6 +52,8 @@ public class ContentFeedController {\n \n     private static final String XML_MEDIA_TYPE = MediaType.APPLICATION_XML_VALUE + UTF_8_SUFFIX;\n \n+    private static final String LAST_MODIFIED_HEADER = \"Last-Modified\";\n+\n     private final PostService postService;\n \n     private final CategoryService categoryService;\n@@ -70,7 +77,7 @@ public ContentFeedController(PostService postService,\n     }\n \n     /**\n-     * Get post rss\n+     * Get post rss.\n      *\n      * @param model model\n      * @return rss xml content\n@@ -79,8 +86,13 @@ public ContentFeedController(PostService postService,\n      */\n     @GetMapping(value = {\"feed\", \"feed.xml\", \"rss\", \"rss.xml\"}, produces = XML_MEDIA_TYPE)\n     @ResponseBody\n-    public String feed(Model model) throws IOException, TemplateException {\n-        model.addAttribute(\"posts\", buildPosts(buildPostPageable(optionService.getRssPageSize())));\n+    public String feed(Model model, HttpServletResponse response)\n+        throws IOException, TemplateException {\n+        List<PostDetailVO> posts = buildPosts(buildPostPageable(optionService.getRssPageSize()));\n+        model.addAttribute(\"posts\", posts);\n+        Timestamp lastModified = this.getLastModifiedTime(posts);\n+        this.lastModified2ResponseHeader(response, lastModified);\n+        model.addAttribute(\"lastModified\", lastModified);\n         Template template = freeMarker.getConfiguration().getTemplate(\"common/web/rss.ftl\");\n         return FreeMarkerTemplateUtils.processTemplateIntoString(template, model);\n     }\n@@ -97,13 +109,18 @@ public String feed(Model model) throws IOException, TemplateException {\n     @GetMapping(value = {\"feed/categories/{slug}\",\n         \"feed/categories/{slug}.xml\"}, produces = XML_MEDIA_TYPE)\n     @ResponseBody\n-    public String feed(Model model, @PathVariable(name = \"slug\") String slug)\n+    public String feed(Model model, @PathVariable(name = \"slug\") String slug,\n+        HttpServletResponse response)\n         throws IOException, TemplateException {\n         Category category = categoryService.getBySlugOfNonNull(slug);\n         CategoryDTO categoryDTO = categoryService.convertTo(category);\n+        List<PostDetailVO> posts =\n+            buildCategoryPosts(buildPostPageable(optionService.getRssPageSize()), categoryDTO);\n         model.addAttribute(\"category\", categoryDTO);\n-        model.addAttribute(\"posts\",\n-            buildCategoryPosts(buildPostPageable(optionService.getRssPageSize()), categoryDTO));\n+        model.addAttribute(\"posts\", posts);\n+        Timestamp lastModified = this.getLastModifiedTime(posts);\n+        this.lastModified2ResponseHeader(response, lastModified);\n+        model.addAttribute(\"lastModified\", lastModified);\n         Template template = freeMarker.getConfiguration().getTemplate(\"common/web/rss.ftl\");\n         return FreeMarkerTemplateUtils.processTemplateIntoString(template, model);\n     }\n@@ -118,8 +135,13 @@ public String feed(Model model, @PathVariable(name = \"slug\") String slug)\n      */\n     @GetMapping(value = {\"atom\", \"atom.xml\"}, produces = XML_MEDIA_TYPE)\n     @ResponseBody\n-    public String atom(Model model) throws IOException, TemplateException {\n-        model.addAttribute(\"posts\", buildPosts(buildPostPageable(optionService.getRssPageSize())));\n+    public String atom(Model model, HttpServletResponse response)\n+        throws IOException, TemplateException {\n+        List<PostDetailVO> posts = buildPosts(buildPostPageable(optionService.getRssPageSize()));\n+        model.addAttribute(\"posts\", posts);\n+        Timestamp lastModified = this.getLastModifiedTime(posts);\n+        this.lastModified2ResponseHeader(response, lastModified);\n+        model.addAttribute(\"lastModified\", lastModified);\n         Template template = freeMarker.getConfiguration().getTemplate(\"common/web/atom.ftl\");\n         return FreeMarkerTemplateUtils.processTemplateIntoString(template, model);\n     }\n@@ -136,13 +158,18 @@ public String atom(Model model) throws IOException, TemplateException {\n     @GetMapping(value = {\"atom/categories/{slug}\",\n         \"atom/categories/{slug}.xml\"}, produces = XML_MEDIA_TYPE)\n     @ResponseBody\n-    public String atom(Model model, @PathVariable(name = \"slug\") String slug)\n+    public String atom(Model model, @PathVariable(name = \"slug\") String slug,\n+        HttpServletResponse response)\n         throws IOException, TemplateException {\n         Category category = categoryService.getBySlugOfNonNull(slug);\n         CategoryDTO categoryDTO = categoryService.convertTo(category);\n+        List<PostDetailVO> posts =\n+            buildCategoryPosts(buildPostPageable(optionService.getRssPageSize()), categoryDTO);\n         model.addAttribute(\"category\", categoryDTO);\n-        model.addAttribute(\"posts\",\n-            buildCategoryPosts(buildPostPageable(optionService.getRssPageSize()), categoryDTO));\n+        model.addAttribute(\"posts\", posts);\n+        Timestamp lastModified = this.getLastModifiedTime(posts);\n+        this.lastModified2ResponseHeader(response, lastModified);\n+        model.addAttribute(\"lastModified\", lastModified);\n         Template template = freeMarker.getConfiguration().getTemplate(\"common/web/atom.ftl\");\n         return FreeMarkerTemplateUtils.processTemplateIntoString(template, model);\n     }\n@@ -248,4 +275,19 @@ private List<PostDetailVO> buildCategoryPosts(@NonNull Pageable pageable,\n         });\n         return posts.getContent();\n     }\n+\n+    private Timestamp getLastModifiedTime(List<PostDetailVO> posts) {\n+        OptionalLong lastModifiedTimestamp =\n+            posts.stream().mapToLong(post -> post.getEditTime().getTime()).max();\n+        if (lastModifiedTimestamp.isEmpty()) {\n+            return new Timestamp(System.currentTimeMillis());\n+        }\n+        return new Timestamp(lastModifiedTimestamp.getAsLong());\n+    }\n+\n+    private void lastModified2ResponseHeader(HttpServletResponse response, Timestamp time) {\n+        SimpleDateFormat dateFormat =\n+            new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss zzz\", Locale.ENGLISH);\n+        response.setHeader(LAST_MODIFIED_HEADER, dateFormat.format(time));\n+    }\n }",
    "output": "pref: RSS/Atom (#1342)\n\n* 1.Add the lastBuildDate in RSS.\r\n2.Add the updated in Atom.\r\n3.Change the date format in RSS and Atom\r\n4.Add the lastModified in the response header.\r\n\r\n* fix code style"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/properties/HaloProperties.java b/src/main/java/run/halo/app/config/properties/HaloProperties.java\n--- a/src/main/java/run/halo/app/config/properties/HaloProperties.java\n+++ b/src/main/java/run/halo/app/config/properties/HaloProperties.java\n@@ -22,12 +22,6 @@\n @ConfigurationProperties(\"halo\")\n public class HaloProperties {\n \n-    /**\n-     * Production env. (Default is true)\n-     */\n-    @Deprecated\n-    private boolean productionEnv = true;\n-\n     /**\n      * Authentication enabled.\n      */\n\ndiff --git a/src/main/java/run/halo/app/listener/StartedListener.java b/src/main/java/run/halo/app/listener/StartedListener.java\n--- a/src/main/java/run/halo/app/listener/StartedListener.java\n+++ b/src/main/java/run/halo/app/listener/StartedListener.java\n@@ -146,10 +146,6 @@ private void initThemes() {\n         Boolean isInstalled = optionService\n             .getByPropertyOrDefault(PrimaryProperties.IS_INSTALLED, Boolean.class, false);\n \n-        if (isInstalled) {\n-            return;\n-        }\n-\n         try {\n             String themeClassPath = ResourceUtils.CLASSPATH_URL_PREFIX + ThemeService.THEME_FOLDER;\n \n@@ -172,7 +168,7 @@ private void initThemes() {\n             Path themePath = themeService.getBasePath();\n \n             // Fix the problem that the project cannot start after moving to a new server\n-            if (!haloProperties.getMode().isProductionEnv() || Files.notExists(themePath)) {\n+            if (Files.notExists(themePath) || !isInstalled) {\n                 FileUtils.copyFolder(source, themePath);\n                 log.debug(\"Copied theme folder from [{}] to [{}]\", source, themePath);\n             } else {",
    "output": "revert: #1297 (#1343)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/api/OptionController.java b/src/main/java/run/halo/app/controller/content/api/OptionController.java\n--- a/src/main/java/run/halo/app/controller/content/api/OptionController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/OptionController.java\n@@ -12,6 +12,7 @@\n import org.springframework.web.bind.annotation.RequestParam;\n import org.springframework.web.bind.annotation.RestController;\n import run.halo.app.model.dto.OptionDTO;\n+import run.halo.app.model.properties.CommentProperties;\n import run.halo.app.model.support.BaseResponse;\n import run.halo.app.service.OptionService;\n \n@@ -60,8 +61,9 @@ public BaseResponse<Object> getBy(@PathVariable(\"key\") String key) {\n     @ApiOperation(\"Options for comment\")\n     public Map<String, Object> comment() {\n         List<String> keys = new ArrayList<>();\n-        keys.add(\"comment_gravatar_default\");\n-        keys.add(\"comment_content_placeholder\");\n+        keys.add(CommentProperties.GRAVATAR_DEFAULT.getValue());\n+        keys.add(CommentProperties.CONTENT_PLACEHOLDER.getValue());\n+        keys.add(CommentProperties.GRAVATAR_SOURCE.getValue());\n         return optionService.listOptions(keys);\n     }\n }",
    "output": "feat: add gravatar source field for comment options api. (#1333)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/repository/base/BaseCommentRepository.java b/src/main/java/run/halo/app/repository/base/BaseCommentRepository.java\n--- a/src/main/java/run/halo/app/repository/base/BaseCommentRepository.java\n+++ b/src/main/java/run/halo/app/repository/base/BaseCommentRepository.java\n@@ -223,4 +223,22 @@ List<COMMENT> findAllByStatusAndParentIdIn(@NonNull CommentStatus status,\n     @NonNull\n     List<CommentChildrenCountProjection> findDirectChildrenCount(\n         @NonNull Collection<Long> commentIds);\n+\n+    /**\n+     * Finds direct children count by comment ids and status.\n+     *\n+     * @param commentIds comment ids must not be null.\n+     * @param status comment status must not be null.\n+     * @return a list of CommentChildrenCountProjection\n+     */\n+    @Query(\n+        \"select new run.halo.app.model.projection.CommentChildrenCountProjection(count(comment\"\n+            + \".id), comment.parentId) \"\n+            + \"from BaseComment comment \"\n+            + \"where comment.parentId in ?1 \"\n+            + \"and comment.status = ?2 \"\n+            + \"group by comment.parentId\")\n+    @NonNull\n+    List<CommentChildrenCountProjection> findDirectChildrenCount(\n+        @NonNull Collection<Long> commentIds, @NonNull CommentStatus status);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java b/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n@@ -580,7 +580,7 @@ public Page<CommentWithHasChildrenVO> pageTopCommentsBy(@NonNull Integer targetI\n \n         // Get direct children count\n         List<CommentChildrenCountProjection> directChildrenCount =\n-            baseCommentRepository.findDirectChildrenCount(topCommentIds);\n+            baseCommentRepository.findDirectChildrenCount(topCommentIds, CommentStatus.PUBLISHED);\n \n         // Convert to comment - children count map\n         Map<Long, Long> commentChildrenCountMap = ServiceUtils",
    "output": "fix: incorrect number of children comment. (#1332)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/repository/base/BaseCommentRepository.java b/src/main/java/run/halo/app/repository/base/BaseCommentRepository.java\n--- a/src/main/java/run/halo/app/repository/base/BaseCommentRepository.java\n+++ b/src/main/java/run/halo/app/repository/base/BaseCommentRepository.java\n@@ -73,6 +73,24 @@ public interface BaseCommentRepository<COMMENT extends BaseComment>\n     @NonNull\n     List<CommentCountProjection> countByPostIds(@NonNull Collection<Integer> postIds);\n \n+    /**\n+     * Counts comment count by comment status and post id collection.\n+     *\n+     * @param status status must not be null\n+     * @param postIds post id collection must not be null\n+     * @return a list of comment count\n+     */\n+    @Query(\n+        \"select new run.halo.app.model.projection.CommentCountProjection(count(comment.id), \"\n+            + \"comment.postId) \"\n+            + \"from BaseComment comment \"\n+            + \"where comment.status = ?1 \"\n+            + \"and comment.postId in ?2 \"\n+            + \"group by comment.postId\")\n+    @NonNull\n+    List<CommentCountProjection> countByStatusAndPostIds(@NonNull CommentStatus status,\n+        @NonNull Collection<Integer> postIds);\n+\n     /**\n      * Count comments by post id.\n      *\n\ndiff --git a/src/main/java/run/halo/app/service/base/BaseCommentService.java b/src/main/java/run/halo/app/service/base/BaseCommentService.java\n--- a/src/main/java/run/halo/app/service/base/BaseCommentService.java\n+++ b/src/main/java/run/halo/app/service/base/BaseCommentService.java\n@@ -134,6 +134,16 @@ Page<BaseCommentWithParentVO> pageWithParentVoBy(@NonNull Integer postId,\n     @NonNull\n     Map<Integer, Long> countByPostIds(@Nullable Collection<Integer> postIds);\n \n+    /**\n+     * Counts by comment status and post id collection.\n+     *\n+     * @param status status\n+     * @param postIds post id collection\n+     * @return a count map, key: post id, value: comment count\n+     */\n+    Map<Integer, Long> countByStatusAndPostIds(@NonNull CommentStatus status,\n+        @NonNull Collection<Integer> postIds);\n+\n     /**\n      * Count comments by post id.\n      *\n\ndiff --git a/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java b/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n@@ -253,6 +253,21 @@ public Map<Integer, Long> countByPostIds(Collection<Integer> postIds) {\n             CommentCountProjection::getCount);\n     }\n \n+    @Override\n+    public Map<Integer, Long> countByStatusAndPostIds(@NonNull CommentStatus status,\n+        @NonNull Collection<Integer> postIds) {\n+        if (CollectionUtils.isEmpty(postIds)) {\n+            return Collections.emptyMap();\n+        }\n+\n+        // Get all comment counts\n+        List<CommentCountProjection> commentCountProjections =\n+            baseCommentRepository.countByStatusAndPostIds(status, postIds);\n+\n+        return ServiceUtils.convertToMap(commentCountProjections, CommentCountProjection::getPostId,\n+            CommentCountProjection::getCount);\n+    }\n+\n     @Override\n     public long countByPostId(Integer postId) {\n         Assert.notNull(postId, \"Post id must not be null\");\n@@ -444,7 +459,7 @@ public BaseCommentDTO convertTo(COMMENT comment) {\n     protected Specification<COMMENT> buildSpecByQuery(@NonNull CommentQuery commentQuery) {\n         Assert.notNull(commentQuery, \"Comment query must not be null\");\n \n-        return (Specification<COMMENT>) (root, query, criteriaBuilder) -> {\n+        return (root, query, criteriaBuilder) -> {\n             List<Predicate> predicates = new LinkedList<>();\n \n             if (commentQuery.getStatus() != null) {\n\ndiff --git a/src/main/java/run/halo/app/service/impl/JournalServiceImpl.java b/src/main/java/run/halo/app/service/impl/JournalServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/JournalServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/JournalServiceImpl.java\n@@ -23,6 +23,7 @@\n import run.halo.app.model.dto.JournalWithCmtCountDTO;\n import run.halo.app.model.entity.Journal;\n import run.halo.app.model.entity.JournalComment;\n+import run.halo.app.model.enums.CommentStatus;\n import run.halo.app.model.enums.JournalType;\n import run.halo.app.model.params.JournalParam;\n import run.halo.app.model.params.JournalQuery;\n@@ -123,7 +124,7 @@ public List<JournalWithCmtCountDTO> convertToCmtCountDto(List<Journal> journals)\n \n         // Get comment count map\n         Map<Integer, Long> journalCommentCountMap =\n-            journalCommentService.countByPostIds(journalIds);\n+            journalCommentService.countByStatusAndPostIds(CommentStatus.PUBLISHED, journalIds);\n \n         return journals.stream()\n             .map(journal -> {\n@@ -182,7 +183,7 @@ public void increaseLike(long likes, Integer id) {\n     private Specification<Journal> buildSpecByQuery(@NonNull JournalQuery journalQuery) {\n         Assert.notNull(journalQuery, \"Journal query must not be null\");\n \n-        return (Specification<Journal>) (root, query, criteriaBuilder) -> {\n+        return (root, query, criteriaBuilder) -> {\n             List<Predicate> predicates = new LinkedList<>();\n \n             if (journalQuery.getType() != null) {\n\ndiff --git a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n@@ -48,6 +48,7 @@\n import run.halo.app.model.entity.PostMeta;\n import run.halo.app.model.entity.PostTag;\n import run.halo.app.model.entity.Tag;\n+import run.halo.app.model.enums.CommentStatus;\n import run.halo.app.model.enums.LogType;\n import run.halo.app.model.enums.PostPermalinkType;\n import run.halo.app.model.enums.PostStatus;\n@@ -583,7 +584,8 @@ public Page<PostListVO> convertToListVo(Page<Post> postPage, boolean queryEncryp\n             .listCategoryListMap(postIds, queryEncryptCategory);\n \n         // Get comment count\n-        Map<Integer, Long> commentCountMap = postCommentService.countByPostIds(postIds);\n+        Map<Integer, Long> commentCountMap = postCommentService.countByStatusAndPostIds(\n+            CommentStatus.PUBLISHED, postIds);\n \n         // Get post meta list map\n         Map<Integer, List<PostMeta>> postMetaListMap = postMetaService.listPostMetaAsMap(postIds);\n@@ -646,7 +648,8 @@ public List<PostListVO> convertToListVo(List<Post> posts, boolean queryEncryptCa\n             .listCategoryListMap(postIds, queryEncryptCategory);\n \n         // Get comment count\n-        Map<Integer, Long> commentCountMap = postCommentService.countByPostIds(postIds);\n+        Map<Integer, Long> commentCountMap =\n+            postCommentService.countByStatusAndPostIds(CommentStatus.PUBLISHED, postIds);\n \n         // Get post meta list map\n         Map<Integer, List<PostMeta>> postMetaListMap = postMetaService.listPostMetaAsMap(postIds);\n@@ -782,7 +785,7 @@ private PostDetailVO convertTo(@NonNull Post post, @Nullable List<Tag> tags,\n     private Specification<Post> buildSpecByQuery(@NonNull PostQuery postQuery) {\n         Assert.notNull(postQuery, \"Post query must not be null\");\n \n-        return (Specification<Post>) (root, query, criteriaBuilder) -> {\n+        return (root, query, criteriaBuilder) -> {\n             List<Predicate> predicates = new LinkedList<>();\n \n             if (postQuery.getStatus() != null) {\n@@ -823,15 +826,15 @@ private PostDetailVO createOrUpdate(@NonNull Post post, Set<Integer> tagIds,\n \n         // Create or update post\n         Boolean needEncrypt = Optional.ofNullable(categoryIds)\n-                .filter(CollectionUtil::isNotEmpty)\n-                .map(categoryIdSet -> {\n-                    for (Integer categoryId : categoryIdSet) {\n-                        if (categoryService.categoryHasEncrypt(categoryId)) {\n-                            return true;\n-                        }\n+            .filter(CollectionUtil::isNotEmpty)\n+            .map(categoryIdSet -> {\n+                for (Integer categoryId : categoryIdSet) {\n+                    if (categoryService.categoryHasEncrypt(categoryId)) {\n+                        return true;\n                     }\n-                    return false;\n-                }).orElse(Boolean.FALSE);\n+                }\n+                return false;\n+            }).orElse(Boolean.FALSE);\n \n         // if password is not empty or parent category has encrypt, change status to intimate\n         if (post.getStatus() != PostStatus.DRAFT\n\ndiff --git a/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java b/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n@@ -27,6 +27,7 @@\n import run.halo.app.model.entity.Sheet;\n import run.halo.app.model.entity.SheetComment;\n import run.halo.app.model.entity.SheetMeta;\n+import run.halo.app.model.enums.CommentStatus;\n import run.halo.app.model.enums.LogType;\n import run.halo.app.model.enums.PostStatus;\n import run.halo.app.model.enums.SheetPermalinkType;\n@@ -276,7 +277,8 @@ public Page<SheetListVO> convertToListVo(Page<Sheet> sheetPage) {\n         Set<Integer> sheetIds = ServiceUtils.fetchProperty(sheets, Sheet::getId);\n \n         // key: sheet id, value: comment count\n-        Map<Integer, Long> sheetCommentCountMap = sheetCommentService.countByPostIds(sheetIds);\n+        Map<Integer, Long> sheetCommentCountMap = sheetCommentService.countByStatusAndPostIds(\n+            CommentStatus.PUBLISHED, sheetIds);\n \n         return sheetPage.map(sheet -> {\n             SheetListVO sheetListVO = new SheetListVO().convertFrom(sheet);",
    "output": "fix: #1311 (#1327)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/SwaggerConfiguration.java b/src/main/java/run/halo/app/config/SwaggerConfiguration.java\n--- a/src/main/java/run/halo/app/config/SwaggerConfiguration.java\n+++ b/src/main/java/run/halo/app/config/SwaggerConfiguration.java\n@@ -28,7 +28,6 @@\n import org.springframework.util.AntPathMatcher;\n import org.springframework.util.Assert;\n import org.springframework.util.PathMatcher;\n-import run.halo.app.config.properties.HaloProperties;\n import run.halo.app.utils.SwaggerUtils;\n import springfox.documentation.builders.ApiInfoBuilder;\n import springfox.documentation.builders.PathSelectors;\n@@ -66,12 +65,6 @@\n     matchIfMissing = true)\n public class SwaggerConfiguration {\n \n-    private final HaloProperties haloProperties;\n-\n-    public SwaggerConfiguration(HaloProperties haloProperties) {\n-        this.haloProperties = haloProperties;\n-    }\n-\n     @Bean\n     public Docket haloDefaultApi() {\n         return buildApiDocket(\"run.halo.app.content.api\",\n@@ -83,10 +76,6 @@ public Docket haloDefaultApi() {\n \n     @Bean\n     public Docket haloAdminApi() {\n-        if (haloProperties.isDocDisabled()) {\n-            log.debug(\"Doc has been disabled\");\n-        }\n-\n         return buildApiDocket(\"run.halo.app.admin.api\",\n             \"run.halo.app.controller.admin\",\n             \"/api/admin/**\")\n\ndiff --git a/src/main/java/run/halo/app/config/properties/HaloProperties.java b/src/main/java/run/halo/app/config/properties/HaloProperties.java\n--- a/src/main/java/run/halo/app/config/properties/HaloProperties.java\n+++ b/src/main/java/run/halo/app/config/properties/HaloProperties.java\n@@ -22,12 +22,6 @@\n @ConfigurationProperties(\"halo\")\n public class HaloProperties {\n \n-    /**\n-     * Doc api disabled. (Default is true)\n-     */\n-    @Deprecated\n-    private boolean docDisabled = true;\n-\n     /**\n      * Production env. (Default is true)\n      */\n\ndiff --git a/src/main/java/run/halo/app/listener/StartedListener.java b/src/main/java/run/halo/app/listener/StartedListener.java\n--- a/src/main/java/run/halo/app/listener/StartedListener.java\n+++ b/src/main/java/run/halo/app/listener/StartedListener.java\n@@ -67,6 +67,9 @@ public class StartedListener implements ApplicationListener<ApplicationStartedEv\n     @Value(\"${spring.datasource.password}\")\n     private String password;\n \n+    @Value(\"${springfox.documentation.enabled}\")\n+    private Boolean documentationEnabled;\n+\n     @Override\n     public void onApplicationEvent(ApplicationStartedEvent event) {\n         try {\n@@ -95,9 +98,9 @@ private void printStartInfo() {\n         log.info(AnsiOutput\n             .toString(AnsiColor.BRIGHT_BLUE, \"Halo admin started at   \", blogUrl, \"/\",\n                 haloProperties.getAdminPath()));\n-        if (!haloProperties.isDocDisabled()) {\n+        if (documentationEnabled) {\n             log.debug(AnsiOutput\n-                .toString(AnsiColor.BRIGHT_BLUE, \"Halo api doc was enabled at  \", blogUrl,\n+                .toString(AnsiColor.BRIGHT_BLUE, \"Halo api documentation was enabled at  \", blogUrl,\n                     \"/swagger-ui.html\"));\n         }\n         log.info(AnsiOutput.toString(AnsiColor.BRIGHT_YELLOW, \"Halo has started successfully!\"));",
    "output": "feat: enable swagger configuration in development. (#1328)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/repository/ThemeRepositoryImpl.java b/src/main/java/run/halo/app/repository/ThemeRepositoryImpl.java\n--- a/src/main/java/run/halo/app/repository/ThemeRepositoryImpl.java\n+++ b/src/main/java/run/halo/app/repository/ThemeRepositoryImpl.java\n@@ -1,6 +1,5 @@\n package run.halo.app.repository;\n \n-import static org.apache.commons.lang3.RandomStringUtils.randomAlphabetic;\n import static run.halo.app.model.properties.PrimaryProperties.THEME;\n import static run.halo.app.model.support.HaloConst.DEFAULT_THEME_ID;\n import static run.halo.app.utils.FileUtils.copyFolder;\n@@ -147,7 +146,7 @@ public ThemeProperty attemptToAdd(ThemeProperty newProperty) {\n         // 3. move the temp folder into templates/themes/{theme_id}\n         final var sourceThemePath = Paths.get(newProperty.getThemePath());\n         final var targetThemePath =\n-            getThemeRootPath().resolve(newProperty.getId() + \"-\" + randomAlphabetic(5));\n+            getThemeRootPath().resolve(newProperty.getId());\n \n         // 4. clear target theme folder firstly\n         deleteFolderQuietly(targetThemePath);",
    "output": "Remove random theme folder generation (#1305)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/aspect/DisableOnConditionAspect.java b/src/main/java/run/halo/app/aspect/DisableOnConditionAspect.java\n--- a/src/main/java/run/halo/app/aspect/DisableOnConditionAspect.java\n+++ b/src/main/java/run/halo/app/aspect/DisableOnConditionAspect.java\n@@ -28,8 +28,7 @@ public DisableOnConditionAspect(HaloProperties haloProperties) {\n         this.haloProperties = haloProperties;\n     }\n \n-    @Pointcut(\"execution(* run.halo.app.controller.*.*(..)) \"\n-        + \"&& @annotation(run.halo.app.annotation.DisableOnCondition)\")\n+    @Pointcut(\"within(run.halo.app.controller..*)\")\n     public void pointcut() {\n     }\n \n\ndiff --git a/src/main/java/run/halo/app/aspect/SensitiveConcealAspect.java b/src/main/java/run/halo/app/aspect/SensitiveConcealAspect.java\n--- a/src/main/java/run/halo/app/aspect/SensitiveConcealAspect.java\n+++ b/src/main/java/run/halo/app/aspect/SensitiveConcealAspect.java\n@@ -19,7 +19,7 @@\n public class SensitiveConcealAspect {\n \n \n-    @Pointcut(\"execution(* run.halo.app.repository.*.*(..)) \"\n+    @Pointcut(\"within(run.halo.app.repository..*) \"\n         + \"&& @annotation(run.halo.app.annotation.SensitiveConceal)\")\n     public void pointCut() {\n     }\n\ndiff --git a/src/main/java/run/halo/app/config/HaloConfiguration.java b/src/main/java/run/halo/app/config/HaloConfiguration.java\n--- a/src/main/java/run/halo/app/config/HaloConfiguration.java\n+++ b/src/main/java/run/halo/app/config/HaloConfiguration.java\n@@ -5,7 +5,6 @@\n import java.security.KeyStoreException;\n import java.security.NoSuchAlgorithmException;\n import lombok.extern.slf4j.Slf4j;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.boot.web.client.RestTemplateBuilder;\n@@ -38,17 +37,20 @@\n     BaseRepositoryImpl.class)\n public class HaloConfiguration {\n \n-    @Autowired\n-    private HaloProperties haloProperties;\n+    private final HaloProperties haloProperties;\n+\n+    public HaloConfiguration(HaloProperties haloProperties) {\n+        this.haloProperties = haloProperties;\n+    }\n \n     @Bean\n-    public ObjectMapper objectMapper(Jackson2ObjectMapperBuilder builder) {\n+    ObjectMapper objectMapper(Jackson2ObjectMapperBuilder builder) {\n         builder.failOnEmptyBeans(false);\n         return builder.build();\n     }\n \n     @Bean\n-    public RestTemplate httpsRestTemplate(RestTemplateBuilder builder)\n+    RestTemplate httpsRestTemplate(RestTemplateBuilder builder)\n         throws NoSuchAlgorithmException, KeyStoreException, KeyManagementException {\n         RestTemplate httpsRestTemplate = builder.build();\n         httpsRestTemplate.setRequestFactory(\n@@ -59,7 +61,7 @@ public RestTemplate httpsRestTemplate(RestTemplateBuilder builder)\n \n     @Bean\n     @ConditionalOnMissingBean\n-    public AbstractStringCacheStore stringCacheStore() {\n+    AbstractStringCacheStore stringCacheStore() {\n         AbstractStringCacheStore stringCacheStore;\n         switch (haloProperties.getCache()) {\n             case \"level\":\n\ndiff --git a/src/main/java/run/halo/app/config/properties/HaloProperties.java b/src/main/java/run/halo/app/config/properties/HaloProperties.java\n--- a/src/main/java/run/halo/app/config/properties/HaloProperties.java\n+++ b/src/main/java/run/halo/app/config/properties/HaloProperties.java\n@@ -25,15 +25,17 @@ public class HaloProperties {\n     /**\n      * Doc api disabled. (Default is true)\n      */\n+    @Deprecated\n     private boolean docDisabled = true;\n \n     /**\n      * Production env. (Default is true)\n      */\n+    @Deprecated\n     private boolean productionEnv = true;\n \n     /**\n-     * Authentication enabled\n+     * Authentication enabled.\n      */\n     private boolean authEnabled = true;\n \n\ndiff --git a/src/main/java/run/halo/app/listener/StartedListener.java b/src/main/java/run/halo/app/listener/StartedListener.java\n--- a/src/main/java/run/halo/app/listener/StartedListener.java\n+++ b/src/main/java/run/halo/app/listener/StartedListener.java\n@@ -169,7 +169,7 @@ private void initThemes() {\n             Path themePath = themeService.getBasePath();\n \n             // Fix the problem that the project cannot start after moving to a new server\n-            if (!haloProperties.isProductionEnv() || Files.notExists(themePath)) {\n+            if (!haloProperties.getMode().isProductionEnv() || Files.notExists(themePath)) {\n                 FileUtils.copyFolder(source, themePath);\n                 log.debug(\"Copied theme folder from [{}] to [{}]\", source, themePath);\n             } else {\n\ndiff --git a/src/main/java/run/halo/app/model/enums/Mode.java b/src/main/java/run/halo/app/model/enums/Mode.java\n--- a/src/main/java/run/halo/app/model/enums/Mode.java\n+++ b/src/main/java/run/halo/app/model/enums/Mode.java\n@@ -1,6 +1,7 @@\n package run.halo.app.model.enums;\n \n import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonValue;\n import org.springframework.lang.Nullable;\n \n@@ -13,22 +14,22 @@\n public enum Mode {\n \n     /**\n-     * Production mode\n+     * Production mode.\n      */\n     PRODUCTION,\n \n     /**\n-     * Develop mode\n+     * Develop mode.\n      */\n     DEVELOPMENT,\n \n     /**\n-     * Demo mode\n+     * Demo mode.\n      */\n     DEMO,\n \n     /**\n-     * Test mode\n+     * Test mode.\n      */\n     TEST;\n \n@@ -57,4 +58,9 @@ public static Mode valueFrom(@Nullable String value) {\n     String getValue() {\n         return this.name().toLowerCase();\n     }\n+\n+    @JsonIgnore\n+    public boolean isProductionEnv() {\n+        return PRODUCTION.equals(this);\n+    }\n }\n\ndiff --git a/src/main/java/run/halo/app/security/filter/AbstractAuthenticationFilter.java b/src/main/java/run/halo/app/security/filter/AbstractAuthenticationFilter.java\n--- a/src/main/java/run/halo/app/security/filter/AbstractAuthenticationFilter.java\n+++ b/src/main/java/run/halo/app/security/filter/AbstractAuthenticationFilter.java\n@@ -183,7 +183,7 @@ private AuthenticationFailureHandler getFailureHandler() {\n                     // Create default authentication failure handler\n                     DefaultAuthenticationFailureHandler failureHandler =\n                         new DefaultAuthenticationFailureHandler();\n-                    failureHandler.setProductionEnv(haloProperties.isProductionEnv());\n+                    failureHandler.setProductionEnv(haloProperties.getMode().isProductionEnv());\n \n                     this.failureHandler = failureHandler;\n                 }\n\ndiff --git a/src/main/java/run/halo/app/security/filter/AdminAuthenticationFilter.java b/src/main/java/run/halo/app/security/filter/AdminAuthenticationFilter.java\n--- a/src/main/java/run/halo/app/security/filter/AdminAuthenticationFilter.java\n+++ b/src/main/java/run/halo/app/security/filter/AdminAuthenticationFilter.java\n@@ -69,7 +69,7 @@ public AdminAuthenticationFilter(AbstractStringCacheStore cacheStore,\n         // set failure handler\n         DefaultAuthenticationFailureHandler failureHandler =\n             new DefaultAuthenticationFailureHandler();\n-        failureHandler.setProductionEnv(haloProperties.isProductionEnv());\n+        failureHandler.setProductionEnv(haloProperties.getMode().isProductionEnv());\n         failureHandler.setObjectMapper(objectMapper);\n \n         setFailureHandler(failureHandler);\n\ndiff --git a/src/main/java/run/halo/app/security/filter/ApiAuthenticationFilter.java b/src/main/java/run/halo/app/security/filter/ApiAuthenticationFilter.java\n--- a/src/main/java/run/halo/app/security/filter/ApiAuthenticationFilter.java\n+++ b/src/main/java/run/halo/app/security/filter/ApiAuthenticationFilter.java\n@@ -58,7 +58,7 @@ public ApiAuthenticationFilter(HaloProperties haloProperties,\n         // set failure handler\n         DefaultAuthenticationFailureHandler failureHandler =\n             new DefaultAuthenticationFailureHandler();\n-        failureHandler.setProductionEnv(haloProperties.isProductionEnv());\n+        failureHandler.setProductionEnv(haloProperties.getMode().isProductionEnv());\n         failureHandler.setObjectMapper(objectMapper);\n         setFailureHandler(failureHandler);\n     }\n@@ -91,7 +91,7 @@ protected void doAuthenticate(HttpServletRequest request, HttpServletResponse re\n         Optional<String> optionalAccessKey =\n             optionService.getByProperty(ApiProperties.API_ACCESS_KEY, String.class);\n \n-        if (!optionalAccessKey.isPresent()) {\n+        if (optionalAccessKey.isEmpty()) {\n             // If the access key is not set\n             throw new AuthenticationException(\"API access key hasn't been set by blogger\");\n         }",
    "output": "Refactor system configuration (#1303)\n\n* Refactor application*.yml\r\n\r\n* Remove application-user.yaml\r\n\r\n* Fix invalid config for aspect"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/security/filter/ContentFilter.java b/src/main/java/run/halo/app/security/filter/ContentFilter.java\n--- a/src/main/java/run/halo/app/security/filter/ContentFilter.java\n+++ b/src/main/java/run/halo/app/security/filter/ContentFilter.java\n@@ -54,6 +54,8 @@ protected String getTokenFromRequest(HttpServletRequest request) {\n     protected void doAuthenticate(HttpServletRequest request, HttpServletResponse response,\n         FilterChain filterChain) throws ServletException, IOException {\n         // Do nothing\n+        // create session\n+        request.getSession(true);\n         filterChain.doFilter(request, response);\n     }\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/AuthorizationServiceImpl.java b/src/main/java/run/halo/app/service/impl/AuthorizationServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/AuthorizationServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/AuthorizationServiceImpl.java\n@@ -35,7 +35,7 @@ public void categoryAuthorization(Integer categoryId) {\n \n     @Override\n     public Set<String> getAccessPermissionStore() {\n-        return cacheStore.getAny(buildAccessPermissionKey(), Set.class).orElse(new HashSet());\n+        return cacheStore.getAny(buildAccessPermissionKey(), Set.class).orElseGet(HashSet::new);\n     }\n \n     @Override\n\ndiff --git a/src/test/java/run/halo/app/it/BaseApiTest.java b/src/test/java/run/halo/app/it/BaseApiTest.java\n--- a/src/test/java/run/halo/app/it/BaseApiTest.java\n+++ b/src/test/java/run/halo/app/it/BaseApiTest.java\n@@ -0,0 +1,47 @@\n+package run.halo.app.it;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.test.context.ActiveProfiles;\n+import org.springframework.web.client.RestTemplate;\n+import run.halo.app.model.params.InstallParam;\n+\n+/**\n+ * Base api test.\n+ *\n+ * @author johnniang\n+ */\n+@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@ActiveProfiles(\"test\")\n+class BaseApiTest {\n+\n+    @Autowired\n+    RestTemplate restTemplate;\n+\n+    @LocalServerPort\n+    int port;\n+\n+    String blogUrl;\n+\n+    @BeforeEach\n+    void baseSetUp() {\n+        blogUrl = \"http://localhost:\" + port;\n+    }\n+\n+    void installBlog() {\n+\n+        InstallParam install = new InstallParam();\n+        install.setUsername(\"test\");\n+        install.setNickname(\"test\");\n+        install.setEmail(\"test@test.com\");\n+        install.setPassword(\"opentest\");\n+        install.setUrl(\"http://localhost:\" + port);\n+        install.setTitle(\"Test's Blog\");\n+\n+        restTemplate.postForObject(blogUrl + \"/api/admin/installations\", install,\n+            String.class);\n+    }\n+\n+}\n\ndiff --git a/src/test/java/run/halo/app/it/IndexPageRequestTest.java b/src/test/java/run/halo/app/it/IndexPageRequestTest.java\n--- a/src/test/java/run/halo/app/it/IndexPageRequestTest.java\n+++ b/src/test/java/run/halo/app/it/IndexPageRequestTest.java\n@@ -0,0 +1,39 @@\n+package run.halo.app.it;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.io.IOException;\n+import lombok.extern.slf4j.Slf4j;\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Element;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Index page request test.\n+ *\n+ * @author johnniang\n+ */\n+@Slf4j\n+class IndexPageRequestTest extends BaseApiTest {\n+\n+    @Test\n+    void indexPage() throws IOException {\n+        installBlog();\n+        // validate atom.xml link\n+        Document document = Jsoup.connect(blogUrl).get();\n+        Element atomLink = document.head().getElementsByAttributeValue(\"title\", \"atom 1.0\").get(0);\n+        assertEquals(blogUrl + \"/atom.xml\", atomLink.attr(\"href\"));\n+\n+        // validate title link\n+        Element titleLink = document.body().selectFirst(\".logo-title > .title > h3 > a\");\n+        assertEquals(blogUrl, titleLink.attr(\"href\"));\n+        assertEquals(\"Test's Blog\", titleLink.text());\n+\n+        // validate post link\n+        Element postTitleLink =\n+            document.body().selectFirst(\".content > .post > .post-title > h3 > a\");\n+        assertEquals(blogUrl + \"/archives/hello-halo\", postTitleLink.attr(\"href\"));\n+        assertEquals(\"Hello Halo\", postTitleLink.text());\n+    }\n+}",
    "output": "Fix error about response committed (#1301)\n\n* Add index page request test\r\n\r\n* Add test for first page request\r\n\r\n* Create session before requesting content"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/repository/ThemeRepositoryImpl.java b/src/main/java/run/halo/app/repository/ThemeRepositoryImpl.java\n--- a/src/main/java/run/halo/app/repository/ThemeRepositoryImpl.java\n+++ b/src/main/java/run/halo/app/repository/ThemeRepositoryImpl.java\n@@ -132,7 +132,7 @@ public void setActivatedTheme(@NonNull String themeId) {\n     @Override\n     public ThemeProperty attemptToAdd(ThemeProperty newProperty) {\n         // 1. check existence\n-        final var alreadyExist = fetchThemePropertyByThemeId(newProperty.getId()).isPresent();\n+        final var alreadyExist = fetchThemeByThemeId(newProperty.getId()).isPresent();\n         if (alreadyExist) {\n             throw new AlreadyExistsException(\"当前安装的主题已存在\");\n         }",
    "output": "Fix error for updating activated theme (#1300)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/handler/file/LocalFileHandler.java b/src/main/java/run/halo/app/handler/file/LocalFileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/LocalFileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/LocalFileHandler.java\n@@ -152,7 +152,7 @@ public UploadResult upload(MultipartFile file) {\n                         // Set thumb path\n                         return thumbnailSubFilePath;\n                     }\n-                } catch (IOException e) {\n+                } catch (Throwable e) {\n                     log.warn(\"Failed to open image file.\", e);\n                 }\n                 return subFilePath;",
    "output": "Make more tolerant of reading image (#1298)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/listener/StartedListener.java b/src/main/java/run/halo/app/listener/StartedListener.java\n--- a/src/main/java/run/halo/app/listener/StartedListener.java\n+++ b/src/main/java/run/halo/app/listener/StartedListener.java\n@@ -141,6 +141,11 @@ private void initThemes() {\n         // Whether the blog has initialized\n         Boolean isInstalled = optionService\n             .getByPropertyOrDefault(PrimaryProperties.IS_INSTALLED, Boolean.class, false);\n+\n+        if (isInstalled) {\n+            return;\n+        }\n+\n         try {\n             String themeClassPath = ResourceUtils.CLASSPATH_URL_PREFIX + ThemeService.THEME_FOLDER;\n \n@@ -163,7 +168,7 @@ private void initThemes() {\n             Path themePath = themeService.getBasePath();\n \n             // Fix the problem that the project cannot start after moving to a new server\n-            if (!haloProperties.isProductionEnv() || Files.notExists(themePath) || !isInstalled) {\n+            if (!haloProperties.isProductionEnv() || Files.notExists(themePath)) {\n                 FileUtils.copyFolder(source, themePath);\n                 log.debug(\"Copied theme folder from [{}] to [{}]\", source, themePath);\n             } else {",
    "output": "pref: init default theme. (#1297)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/params/OptionParam.java b/src/main/java/run/halo/app/model/params/OptionParam.java\n--- a/src/main/java/run/halo/app/model/params/OptionParam.java\n+++ b/src/main/java/run/halo/app/model/params/OptionParam.java\n@@ -21,8 +21,6 @@ public class OptionParam implements InputConverter<Option> {\n     @Size(max = 100, message = \"Length of option key must not be more than {max}\")\n     private String key;\n \n-\n-    @Size(max = 1023, message = \"Length of option value must not be more than {max}\")\n     private String value;\n \n     private OptionType type;",
    "output": "pref: #1050 (#1287)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/repository/ThemeRepositoryImpl.java b/src/main/java/run/halo/app/repository/ThemeRepositoryImpl.java\n--- a/src/main/java/run/halo/app/repository/ThemeRepositoryImpl.java\n+++ b/src/main/java/run/halo/app/repository/ThemeRepositoryImpl.java\n@@ -1,6 +1,8 @@\n package run.halo.app.repository;\n \n import static org.apache.commons.lang3.RandomStringUtils.randomAlphabetic;\n+import static run.halo.app.model.properties.PrimaryProperties.THEME;\n+import static run.halo.app.model.support.HaloConst.DEFAULT_THEME_ID;\n import static run.halo.app.utils.FileUtils.copyFolder;\n import static run.halo.app.utils.FileUtils.deleteFolderQuietly;\n import static run.halo.app.utils.VersionUtil.compareVersion;\n@@ -14,6 +16,7 @@\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.lang3.StringUtils;\n import org.springframework.context.ApplicationEventPublisher;\n+import org.springframework.context.ApplicationListener;\n import org.springframework.lang.NonNull;\n import org.springframework.stereotype.Repository;\n import org.springframework.util.Assert;\n@@ -25,7 +28,6 @@\n import run.halo.app.exception.ThemeNotSupportException;\n import run.halo.app.handler.theme.config.support.ThemeProperty;\n import run.halo.app.model.entity.Option;\n-import run.halo.app.model.properties.PrimaryProperties;\n import run.halo.app.model.support.HaloConst;\n import run.halo.app.theme.ThemePropertyScanner;\n import run.halo.app.utils.FileUtils;\n@@ -37,14 +39,17 @@\n  */\n @Repository\n @Slf4j\n-public class ThemeRepositoryImpl implements ThemeRepository {\n+public class ThemeRepositoryImpl\n+    implements ThemeRepository, ApplicationListener<OptionUpdatedEvent> {\n \n     private final OptionRepository optionRepository;\n \n     private final HaloProperties properties;\n \n     private final ApplicationEventPublisher eventPublisher;\n \n+    private volatile ThemeProperty currentTheme;\n+\n     public ThemeRepositoryImpl(OptionRepository optionRepository,\n         HaloProperties properties,\n         ApplicationEventPublisher eventPublisher) {\n@@ -55,19 +60,35 @@ public ThemeRepositoryImpl(OptionRepository optionRepository,\n \n     @Override\n     public String getActivatedThemeId() {\n-        return optionRepository.findByKey(PrimaryProperties.THEME.getValue())\n-            .map(Option::getValue)\n-            .orElse(HaloConst.DEFAULT_THEME_ID);\n+        return getActivatedThemeProperty().getId();\n     }\n \n     @Override\n     public ThemeProperty getActivatedThemeProperty() {\n-        return fetchThemePropertyByThemeId(getActivatedThemeId()).orElseThrow();\n+        ThemeProperty themeProperty = this.currentTheme;\n+        if (themeProperty == null) {\n+            synchronized (this) {\n+                if (this.currentTheme == null) {\n+                    // get current theme id\n+                    String currentThemeId = this.optionRepository.findByKey(THEME.getValue())\n+                        .map(Option::getValue)\n+                        .orElse(DEFAULT_THEME_ID);\n+                    // fetch current theme\n+                    this.currentTheme = this.getThemeByThemeId(currentThemeId);\n+                }\n+            }\n+        }\n+        return this.currentTheme;\n     }\n \n     @Override\n     public Optional<ThemeProperty> fetchThemePropertyByThemeId(String themeId) {\n-        return listAll().stream()\n+        if (StringUtils.equals(themeId, getActivatedThemeId())) {\n+            return Optional.of(getActivatedThemeProperty());\n+        }\n+\n+        return ThemePropertyScanner.INSTANCE.scan(getThemeRootPath(), null)\n+            .stream()\n             .filter(property -> Objects.equals(themeId, property.getId()))\n             .findFirst();\n     }\n@@ -80,13 +101,13 @@ public List<ThemeProperty> listAll() {\n     @Override\n     public void setActivatedTheme(@NonNull String themeId) {\n         Assert.hasText(themeId, \"Theme id must not be blank\");\n-        final var newThemeOption = optionRepository.findByKey(PrimaryProperties.THEME.getValue())\n+        final var newThemeOption = optionRepository.findByKey(THEME.getValue())\n             .map(themeOption -> {\n                 // set theme id\n                 themeOption.setValue(themeId);\n                 return themeOption;\n             })\n-            .orElseGet(() -> new Option(PrimaryProperties.THEME.getValue(), themeId));\n+            .orElseGet(() -> new Option(THEME.getValue(), themeId));\n         optionRepository.save(newThemeOption);\n \n         eventPublisher.publishEvent(new OptionUpdatedEvent(this));\n@@ -163,4 +184,20 @@ public boolean checkThemePropertyCompatibility(ThemeProperty themeProperty) {\n     private Path getThemeRootPath() {\n         return Paths.get(properties.getWorkDir()).resolve(\"templates/themes\");\n     }\n+\n+    @Override\n+    public void onApplicationEvent(OptionUpdatedEvent event) {\n+        synchronized (this) {\n+            this.currentTheme = null;\n+        }\n+    }\n+\n+    @NonNull\n+    protected ThemeProperty getThemeByThemeId(String themeId) {\n+        return ThemePropertyScanner.INSTANCE.scan(getThemeRootPath(), null)\n+            .stream()\n+            .filter(property -> Objects.equals(themeId, property.getId()))\n+            .findFirst()\n+            .orElseThrow();\n+    }\n }\n\ndiff --git a/src/test/java/run/halo/app/repository/ThemeRepositoryImplTest.java b/src/test/java/run/halo/app/repository/ThemeRepositoryImplTest.java\n--- a/src/test/java/run/halo/app/repository/ThemeRepositoryImplTest.java\n+++ b/src/test/java/run/halo/app/repository/ThemeRepositoryImplTest.java\n@@ -0,0 +1,102 @@\n+package run.halo.app.repository;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.BDDMockito.given;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static run.halo.app.model.properties.PrimaryProperties.THEME;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import org.mockito.Spy;\n+import org.springframework.context.ApplicationEventPublisher;\n+import run.halo.app.config.properties.HaloProperties;\n+import run.halo.app.handler.theme.config.support.ThemeProperty;\n+import run.halo.app.model.support.HaloConst;\n+\n+/**\n+ * Theme repository impl test.\n+ *\n+ * @author johnniang\n+ */\n+class ThemeRepositoryImplTest {\n+\n+    @InjectMocks\n+    @Spy\n+    ThemeRepositoryImpl themeRepository;\n+\n+    @Mock\n+    OptionRepository optionRepository;\n+\n+    @Mock\n+    HaloProperties haloProperties;\n+\n+    @Mock\n+    ApplicationEventPublisher eventPublisher;\n+\n+    @BeforeEach\n+    void setUp() {\n+        MockitoAnnotations.openMocks(this);\n+    }\n+\n+    @Test\n+    void getActivatedThemeBySingleThread() {\n+        ThemeProperty expectedTheme = new ThemeProperty();\n+        expectedTheme.setId(HaloConst.DEFAULT_THEME_ID);\n+        expectedTheme.setActivated(true);\n+\n+        given(optionRepository.findByKey(THEME.getValue())).willReturn(Optional.empty());\n+        doReturn(expectedTheme).when(themeRepository)\n+            .getThemeByThemeId(HaloConst.DEFAULT_THEME_ID);\n+\n+        ThemeProperty resultTheme = themeRepository.getActivatedThemeProperty();\n+        assertEquals(expectedTheme, resultTheme);\n+\n+        verify(optionRepository, times(1)).findByKey(any());\n+        verify(themeRepository, times(1)).getThemeByThemeId(any());\n+    }\n+\n+    @Test\n+    void getActivatedThemeByMultiThread() throws InterruptedException {\n+        ThemeProperty expectedTheme = new ThemeProperty();\n+        expectedTheme.setId(HaloConst.DEFAULT_THEME_ID);\n+        expectedTheme.setActivated(true);\n+\n+        given(optionRepository.findByKey(THEME.getValue())).willReturn(Optional.empty());\n+        doReturn(expectedTheme).when(themeRepository)\n+            .getThemeByThemeId(HaloConst.DEFAULT_THEME_ID);\n+\n+        ExecutorService executorService = Executors.newFixedThreadPool(10);\n+        // define tasks\n+        List<Callable<ThemeProperty>> tasks = IntStream.range(0, 10)\n+            .mapToObj(\n+                i -> (Callable<ThemeProperty>) () -> themeRepository.getActivatedThemeProperty())\n+            .collect(Collectors.toList());\n+\n+        // invoke and get results\n+        executorService.invokeAll(tasks).forEach(future -> {\n+            try {\n+                assertEquals(expectedTheme, future.get(100, TimeUnit.MILLISECONDS));\n+            } catch (Exception e) {\n+                throw new RuntimeException(\"Failed to get task result!\", e);\n+            }\n+        });\n+\n+        verify(optionRepository, times(1)).findByKey(any());\n+        verify(themeRepository, times(1)).getThemeByThemeId(any());\n+    }\n+\n+}\n\\ No newline at end of file",
    "output": "Cache current theme in theme repository (#1286)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/ThemeController.java b/src/main/java/run/halo/app/controller/admin/api/ThemeController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/ThemeController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/ThemeController.java\n@@ -45,7 +45,7 @@ public ThemeController(ThemeService themeService,\n         this.themeSettingService = themeSettingService;\n     }\n \n-    @GetMapping(\"{themeId}\")\n+    @GetMapping(\"{themeId:.+}\")\n     @ApiOperation(\"Gets theme property by theme id\")\n     public ThemeProperty getBy(@PathVariable(\"themeId\") String themeId) {\n         return themeService.getThemeOfNonNullBy(themeId);\n@@ -63,7 +63,7 @@ public List<ThemeFile> listFiles() {\n         return themeService.listThemeFolderBy(themeService.getActivatedThemeId());\n     }\n \n-    @GetMapping(\"{themeId}/files\")\n+    @GetMapping(\"{themeId:.+}/files\")\n     @ApiOperation(\"Lists theme files by theme id\")\n     public List<ThemeFile> listFiles(@PathVariable(\"themeId\") String themeId) {\n         return themeService.listThemeFolderBy(themeId);\n@@ -76,7 +76,7 @@ public BaseResponse<String> getContentBy(@RequestParam(name = \"path\") String pat\n             .ok(HttpStatus.OK.getReasonPhrase(), themeService.getTemplateContent(path));\n     }\n \n-    @GetMapping(\"{themeId}/files/content\")\n+    @GetMapping(\"{themeId:.+}/files/content\")\n     @ApiOperation(\"Gets template content by theme id\")\n     public BaseResponse<String> getContentBy(@PathVariable(\"themeId\") String themeId,\n         @RequestParam(name = \"path\") String path) {\n@@ -91,7 +91,7 @@ public void updateContentBy(@RequestBody ThemeContentParam param) {\n         themeService.saveTemplateContent(param.getPath(), param.getContent());\n     }\n \n-    @PutMapping(\"{themeId}/files/content\")\n+    @PutMapping(\"{themeId:.+}/files/content\")\n     @ApiOperation(\"Updates template content by theme id\")\n     @DisableOnCondition\n     public void updateContentBy(@PathVariable(\"themeId\") String themeId,\n@@ -113,7 +113,7 @@ public List<String> customPostTemplate() {\n             ThemeService.CUSTOM_POST_PREFIX);\n     }\n \n-    @PostMapping(\"{themeId}/activation\")\n+    @PostMapping(\"{themeId:.+}/activation\")\n     @ApiOperation(\"Activates a theme\")\n     public ThemeProperty active(@PathVariable(\"themeId\") String themeId) {\n         return themeService.activateTheme(themeId);\n@@ -131,7 +131,7 @@ public BaseResponse<Object> fetchConfig() {\n         return BaseResponse.ok(themeService.fetchConfig(themeService.getActivatedThemeId()));\n     }\n \n-    @GetMapping(\"{themeId}/configurations\")\n+    @GetMapping(\"{themeId:.+}/configurations\")\n     @ApiOperation(\"Fetches theme configuration by theme id\")\n     public List<Group> fetchConfig(@PathVariable(\"themeId\") String themeId) {\n         return themeService.fetchConfig(themeId);\n@@ -143,7 +143,7 @@ public Map<String, Object> listSettingsBy() {\n         return themeSettingService.listAsMapBy(themeService.getActivatedThemeId());\n     }\n \n-    @GetMapping(\"{themeId}/settings\")\n+    @GetMapping(\"{themeId:.+}/settings\")\n     @ApiOperation(\"Lists theme settings by theme id\")\n     public Map<String, Object> listSettingsBy(@PathVariable(\"themeId\") String themeId) {\n         return themeSettingService.listAsMapBy(themeId);\n@@ -155,15 +155,15 @@ public void saveSettingsBy(@RequestBody Map<String, Object> settings) {\n         themeSettingService.save(settings, themeService.getActivatedThemeId());\n     }\n \n-    @PostMapping(\"{themeId}/settings\")\n+    @PostMapping(\"{themeId:.+}/settings\")\n     @ApiOperation(\"Saves theme settings\")\n     @CacheLock(prefix = \"save_theme_setting_by_themeId\")\n     public void saveSettingsBy(@PathVariable(\"themeId\") String themeId,\n         @RequestBody Map<String, Object> settings) {\n         themeSettingService.save(settings, themeId);\n     }\n \n-    @DeleteMapping(\"{themeId}\")\n+    @DeleteMapping(\"{themeId:.+}\")\n     @ApiOperation(\"Deletes a theme\")\n     @DisableOnCondition\n     public void deleteBy(@PathVariable(\"themeId\") String themeId,\n@@ -177,8 +177,7 @@ public ThemeProperty uploadTheme(@RequestPart(\"file\") MultipartFile file) {\n         return themeService.upload(file);\n     }\n \n-    @PutMapping(\"upload/{themeId}\")\n-    @PostMapping(\"upload/{themeId}\")\n+    @PutMapping(\"upload/{themeId:.+}\")\n     @ApiOperation(\"Upgrades theme by file\")\n     public ThemeProperty updateThemeByUpload(@PathVariable(\"themeId\") String themeId,\n         @RequestPart(\"file\") MultipartFile file) {\n@@ -228,7 +227,7 @@ public ThemeProperty fetchLatestRelease(@RequestParam(\"uri\") String uri) {\n         return themeService.fetchLatestRelease(uri);\n     }\n \n-    @PutMapping(\"fetching/{themeId}\")\n+    @PutMapping(\"fetching/{themeId:.+}\")\n     @ApiOperation(\"Upgrades theme from remote\")\n     public ThemeProperty updateThemeByFetching(@PathVariable(\"themeId\") String themeId) {\n         return themeService.update(themeId);",
    "output": "fix: theme update by upload. (#1284)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/MigrateController.java b/src/main/java/run/halo/app/controller/admin/api/MigrateController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/MigrateController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/MigrateController.java\n@@ -41,16 +41,4 @@ public void migrateHalo(@RequestPart(\"file\") MultipartFile file) {\n         }\n         migrateService.migrate(file, MigrateType.HALO);\n     }\n-\n-    //    @PostMapping(\"wordpress\")\n-    //    @ApiOperation(\"Migrate from WordPress\")\n-    //    public void migrateWordPress(@RequestPart(\"file\") MultipartFile file) {\n-    //        migrateService.migrate(file, MigrateType.WORDPRESS);\n-    //    }\n-    //\n-    //    @PostMapping(\"cnblogs\")\n-    //    @ApiOperation(\"Migrate from cnblogs\")\n-    //    public void migrateCnBlogs(@RequestPart(\"file\") MultipartFile file) {\n-    //        migrateService.migrate(file, MigrateType.CNBLOGS);\n-    //    }\n }\n\ndiff --git a/src/main/java/run/halo/app/model/enums/MigrateType.java b/src/main/java/run/halo/app/model/enums/MigrateType.java\n--- a/src/main/java/run/halo/app/model/enums/MigrateType.java\n+++ b/src/main/java/run/halo/app/model/enums/MigrateType.java\n@@ -11,17 +11,7 @@ public enum MigrateType implements ValueEnum<Integer> {\n     /**\n      * Halo\n      */\n-    HALO(0),\n-\n-    /**\n-     * WordPress\n-     */\n-    WORDPRESS(1),\n-\n-    /**\n-     * cnblogs.com\n-     */\n-    CNBLOGS(2);\n+    HALO(0);\n \n     private final Integer value;\n \n\ndiff --git a/src/main/java/run/halo/app/service/impl/BackupServiceImpl.java b/src/main/java/run/halo/app/service/impl/BackupServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/BackupServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/BackupServiceImpl.java\n@@ -68,6 +68,7 @@\n import run.halo.app.model.entity.SheetMeta;\n import run.halo.app.model.entity.Tag;\n import run.halo.app.model.entity.ThemeSetting;\n+import run.halo.app.model.entity.User;\n import run.halo.app.model.params.PostMarkdownParam;\n import run.halo.app.model.support.HaloConst;\n import run.halo.app.model.vo.PostMarkdownVO;\n@@ -515,6 +516,14 @@ public void importData(MultipartFile file) throws IOException {\n         themeSettingService.createInBatch(themeSettings);\n \n         eventPublisher.publishEvent(new ThemeUpdatedEvent(this));\n+\n+        List<User> users = Arrays.asList(mapper\n+            .readValue(mapper.writeValueAsString(data.get(\"user\")),\n+                User[].class));\n+\n+        if (users.size() > 0) {\n+            userService.create(users.get(0));\n+        }\n     }\n \n     @Override",
    "output": "feat: support import user. (#1283)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/BackupController.java b/src/main/java/run/halo/app/controller/admin/api/BackupController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/BackupController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/BackupController.java\n@@ -56,7 +56,8 @@ public BackupController(BackupService backupService, HaloProperties haloProperti\n \n     @GetMapping(\"work-dir/fetch\")\n     public BackupDTO getWorkDirBackup(@RequestParam(\"filename\") String filename) {\n-        return backupService.getBackup(Paths.get(haloProperties.getWorkDir(), filename), WHOLE_SITE)\n+        return backupService\n+            .getBackup(Paths.get(haloProperties.getBackupDir(), filename), WHOLE_SITE)\n             .orElseThrow(() ->\n                 new NotFoundException(\"备份文件 \" + filename + \" 不存在或已删除！\").setErrorData(filename));\n     }",
    "output": "fix: fetch work dir backup api. (#1282)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/api/JournalController.java b/src/main/java/run/halo/app/controller/content/api/JournalController.java\n--- a/src/main/java/run/halo/app/controller/content/api/JournalController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/JournalController.java\n@@ -20,6 +20,7 @@\n import org.springframework.web.bind.annotation.RestController;\n import org.springframework.web.util.HtmlUtils;\n import run.halo.app.cache.lock.CacheLock;\n+import run.halo.app.cache.lock.CacheParam;\n import run.halo.app.model.dto.BaseCommentDTO;\n import run.halo.app.model.dto.JournalDTO;\n import run.halo.app.model.dto.JournalWithCmtCountDTO;\n@@ -127,7 +128,7 @@ public BaseCommentDTO comment(@RequestBody JournalCommentParam journalCommentPar\n     @PostMapping(\"{id:\\\\d+}/likes\")\n     @ApiOperation(\"Likes a journal\")\n     @CacheLock(autoDelete = false, traceRequest = true)\n-    public void like(@PathVariable(\"id\") Integer id) {\n+    public void like(@PathVariable(\"id\") @CacheParam Integer id) {\n         journalService.increaseLike(id);\n     }\n }",
    "output": "Fix incorrect cache lock of journal like api (#1279)"
  },
  {
    "input": "diff --git a/src/test/java/run/halo/app/conf/AntPathMatcherTest.java b/src/test/java/run/halo/app/conf/AntPathMatcherTest.java\n--- a/src/test/java/run/halo/app/conf/AntPathMatcherTest.java\n+++ b/src/test/java/run/halo/app/conf/AntPathMatcherTest.java\n@@ -1,5 +1,6 @@\n package run.halo.app.conf;\n \n+import static org.junit.jupiter.api.Assertions.assertAll;\n import static org.junit.jupiter.api.Assertions.assertFalse;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n@@ -17,10 +18,12 @@ class AntPathMatcherTest {\n \n     @Test\n     void matchTest() {\n-        assertFalse(pathMatcher.match(\"/admin/?*/**\", \"/admin\"));\n-        assertFalse(pathMatcher.match(\"/admin/?*/**\", \"/admin/\"));\n+        assertAll(\n+            () -> assertFalse(pathMatcher.match(\"/admin/?*/**\", \"/admin\")),\n+            () -> assertFalse(pathMatcher.match(\"/admin/?*/**\", \"/admin/\")),\n \n-        assertTrue(pathMatcher.match(\"/admin/?*/**\", \"/admin/index.html\"));\n-        assertTrue(pathMatcher.match(\"/admin/?*/**\", \"/admin/index.html/more\"));\n+            () -> assertTrue(pathMatcher.match(\"/admin/?*/**\", \"/admin/index.html\")),\n+            () -> assertTrue(pathMatcher.match(\"/admin/?*/**\", \"/admin/index.html/more\"))\n+        );\n     }\n }",
    "output": "pref: grouping assertions (#1273)\n\n* Grouping assertions\r\n\r\nSigned-off-by: Elvys Soares <eas5@cin.ufpe.br>\r\n\r\n* Grouping assertions\r\n\r\nSigned-off-by: Elvys Soares <eas5@cin.ufpe.br>\r\n\r\n* Grouping assertions\r\n\r\nSigned-off-by: Elvys Soares <eas5@cin.ufpe.br>\r\n\r\n* fix: code style check.\r\n\r\nCo-authored-by: Ryan Wang <i@ryanc.cc>"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/api/JournalController.java b/src/main/java/run/halo/app/controller/content/api/JournalController.java\n--- a/src/main/java/run/halo/app/controller/content/api/JournalController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/JournalController.java\n@@ -126,6 +126,7 @@ public BaseCommentDTO comment(@RequestBody JournalCommentParam journalCommentPar\n \n     @PostMapping(\"{id:\\\\d+}/likes\")\n     @ApiOperation(\"Likes a journal\")\n+    @CacheLock(autoDelete = false, traceRequest = true)\n     public void like(@PathVariable(\"id\") Integer id) {\n         journalService.increaseLike(id);\n     }\n\ndiff --git a/src/main/java/run/halo/app/controller/content/api/PostController.java b/src/main/java/run/halo/app/controller/content/api/PostController.java\n--- a/src/main/java/run/halo/app/controller/content/api/PostController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/PostController.java\n@@ -196,6 +196,7 @@ public BaseCommentDTO comment(@RequestBody PostCommentParam postCommentParam) {\n \n     @PostMapping(\"{postId:\\\\d+}/likes\")\n     @ApiOperation(\"Likes a post\")\n+    @CacheLock(autoDelete = false, traceRequest = true)\n     public void like(@PathVariable(\"postId\") Integer postId) {\n         postService.increaseLike(postId);\n     }\n\ndiff --git a/src/main/java/run/halo/app/security/filter/ApiAuthenticationFilter.java b/src/main/java/run/halo/app/security/filter/ApiAuthenticationFilter.java\n--- a/src/main/java/run/halo/app/security/filter/ApiAuthenticationFilter.java\n+++ b/src/main/java/run/halo/app/security/filter/ApiAuthenticationFilter.java\n@@ -50,7 +50,9 @@ public ApiAuthenticationFilter(HaloProperties haloProperties,\n         addExcludeUrlPatterns(\n             \"/api/content/**/comments\",\n             \"/api/content/**/comments/**\",\n-            \"/api/content/options/comment\"\n+            \"/api/content/options/comment\",\n+            \"/api/content/journals/*/likes\",\n+            \"/api/content/posts/*/likes\"\n         );\n \n         // set failure handler",
    "output": "pref: journals likes api. (#1266)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/ContentContentController.java b/src/main/java/run/halo/app/controller/content/ContentContentController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentContentController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentContentController.java\n@@ -23,8 +23,8 @@\n import run.halo.app.controller.content.model.TagModel;\n import run.halo.app.exception.NotFoundException;\n import run.halo.app.exception.UnsupportedException;\n+import run.halo.app.model.dto.CategoryDTO;\n import run.halo.app.model.dto.post.BasePostMinimalDTO;\n-import run.halo.app.model.entity.Category;\n import run.halo.app.model.entity.Post;\n import run.halo.app.model.entity.Sheet;\n import run.halo.app.model.enums.EncryptTypeEnum;\n@@ -83,8 +83,8 @@ public ContentContentController(PostModel postModel,\n         PostService postService,\n         SheetService sheetService,\n         AbstractStringCacheStore cacheStore,\n-            AuthenticationService authenticationService,\n-            CategoryService categoryService) {\n+        AuthenticationService authenticationService,\n+        CategoryService categoryService) {\n         this.postModel = postModel;\n         this.sheetModel = sheetModel;\n         this.categoryModel = categoryModel;\n@@ -236,7 +236,7 @@ public String content(@PathVariable(\"year\") Integer year,\n         throw new NotFoundException(\"Not Found\");\n     }\n \n-    @PostMapping(value = \"archives/{type}/{slug:.*}/password\")\n+    @PostMapping(value = \"content/{type}/{slug:.*}/authentication\")\n     @CacheLock(traceRequest = true, expired = 2)\n     public String password(@PathVariable(\"type\") String type,\n         @PathVariable(\"slug\") String slug,\n@@ -276,7 +276,8 @@ private String doAuthenticationPost(\n     }\n \n     private String doAuthenticationCategory(String slug, String password) {\n-        Category category = categoryService.getBySlugOfNonNull(slug, true);\n+        CategoryDTO\n+            category = categoryService.convertTo(categoryService.getBySlugOfNonNull(slug, true));\n \n         authenticationService.categoryAuthentication(category.getId(), password);\n \n@@ -286,7 +287,7 @@ private String doAuthenticationCategory(String slug, String password) {\n             redirectUrl.append(optionService.getBlogBaseUrl());\n         }\n \n-        redirectUrl.append(optionService.getCategoriesPrefix()).append(slug);\n+        redirectUrl.append(category.getFullPath());\n \n         return redirectUrl.toString();\n     }",
    "output": "fix: category authentication redirect url. (#1264)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/listener/freemarker/FreemarkerConfigAwareListener.java b/src/main/java/run/halo/app/listener/freemarker/FreemarkerConfigAwareListener.java\n--- a/src/main/java/run/halo/app/listener/freemarker/FreemarkerConfigAwareListener.java\n+++ b/src/main/java/run/halo/app/listener/freemarker/FreemarkerConfigAwareListener.java\n@@ -1,5 +1,7 @@\n package run.halo.app.listener.freemarker;\n \n+import static run.halo.app.model.support.HaloConst.OPTIONS_CACHE_KEY;\n+\n import freemarker.template.Configuration;\n import freemarker.template.TemplateModelException;\n import lombok.extern.slf4j.Slf4j;\n@@ -8,6 +10,7 @@\n import org.springframework.core.Ordered;\n import org.springframework.core.annotation.Order;\n import org.springframework.stereotype.Component;\n+import run.halo.app.cache.AbstractStringCacheStore;\n import run.halo.app.event.options.OptionUpdatedEvent;\n import run.halo.app.event.theme.ThemeActivatedEvent;\n import run.halo.app.event.theme.ThemeUpdatedEvent;\n@@ -41,16 +44,20 @@ public class FreemarkerConfigAwareListener {\n \n     private final UserService userService;\n \n+    private final AbstractStringCacheStore cacheStore;\n+\n     public FreemarkerConfigAwareListener(OptionService optionService,\n         Configuration configuration,\n         ThemeService themeService,\n         ThemeSettingService themeSettingService,\n-        UserService userService) {\n+        UserService userService,\n+        AbstractStringCacheStore cacheStore) {\n         this.optionService = optionService;\n         this.configuration = configuration;\n         this.themeService = themeService;\n         this.themeSettingService = themeSettingService;\n         this.userService = userService;\n+        this.cacheStore = cacheStore;\n     }\n \n     @EventListener\n@@ -90,6 +97,10 @@ public void onUserUpdate(UserUpdatedEvent event) throws TemplateModelException {\n     public void onOptionUpdate(OptionUpdatedEvent event) throws TemplateModelException {\n         log.debug(\"Received option updated event\");\n \n+        // refresh options cache\n+        optionService.flush();\n+        cacheStore.delete(OPTIONS_CACHE_KEY);\n+\n         loadOptionsConfig();\n         loadThemeConfig();\n     }\n\ndiff --git a/src/main/java/run/halo/app/model/support/HaloConst.java b/src/main/java/run/halo/app/model/support/HaloConst.java\n--- a/src/main/java/run/halo/app/model/support/HaloConst.java\n+++ b/src/main/java/run/halo/app/model/support/HaloConst.java\n@@ -155,6 +155,11 @@ public class HaloConst {\n      */\n     public static String DATABASE_PRODUCT_NAME = null;\n \n+    /**\n+     * Options cache key.\n+     */\n+    public static String OPTIONS_CACHE_KEY = \"options\";\n+\n     static {\n         // Set version\n         HALO_VERSION = Optional.ofNullable(HaloConst.class.getPackage().getImplementationVersion())\n\ndiff --git a/src/main/java/run/halo/app/repository/ThemeRepositoryImpl.java b/src/main/java/run/halo/app/repository/ThemeRepositoryImpl.java\n--- a/src/main/java/run/halo/app/repository/ThemeRepositoryImpl.java\n+++ b/src/main/java/run/halo/app/repository/ThemeRepositoryImpl.java\n@@ -13,10 +13,12 @@\n import java.util.Optional;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.lang3.StringUtils;\n+import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.lang.NonNull;\n import org.springframework.stereotype.Repository;\n import org.springframework.util.Assert;\n import run.halo.app.config.properties.HaloProperties;\n+import run.halo.app.event.options.OptionUpdatedEvent;\n import run.halo.app.exception.AlreadyExistsException;\n import run.halo.app.exception.NotFoundException;\n import run.halo.app.exception.ServiceException;\n@@ -41,10 +43,14 @@ public class ThemeRepositoryImpl implements ThemeRepository {\n \n     private final HaloProperties properties;\n \n+    private final ApplicationEventPublisher eventPublisher;\n+\n     public ThemeRepositoryImpl(OptionRepository optionRepository,\n-        HaloProperties properties) {\n+        HaloProperties properties,\n+        ApplicationEventPublisher eventPublisher) {\n         this.optionRepository = optionRepository;\n         this.properties = properties;\n+        this.eventPublisher = eventPublisher;\n     }\n \n     @Override\n@@ -74,7 +80,6 @@ public List<ThemeProperty> listAll() {\n     @Override\n     public void setActivatedTheme(@NonNull String themeId) {\n         Assert.hasText(themeId, \"Theme id must not be blank\");\n-\n         final var newThemeOption = optionRepository.findByKey(PrimaryProperties.THEME.getValue())\n             .map(themeOption -> {\n                 // set theme id\n@@ -83,6 +88,8 @@ public void setActivatedTheme(@NonNull String themeId) {\n             })\n             .orElseGet(() -> new Option(PrimaryProperties.THEME.getValue(), themeId));\n         optionRepository.save(newThemeOption);\n+\n+        eventPublisher.publishEvent(new OptionUpdatedEvent(this));\n     }\n \n     @Override\n\ndiff --git a/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java b/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n@@ -136,7 +136,7 @@ public void save(Map<String, Object> optionMap) {\n         if (!CollectionUtils.isEmpty(optionsToUpdate)\n             || !CollectionUtils.isEmpty(optionsToCreate)) {\n             // If there is something changed\n-            publishOptionUpdatedEvent();\n+            eventPublisher.publishEvent(new OptionUpdatedEvent(this));\n         }\n \n     }\n@@ -156,15 +156,15 @@ public void save(List<OptionParam> optionParams) {\n     public void save(OptionParam optionParam) {\n         Option option = optionParam.convertTo();\n         create(option);\n-        publishOptionUpdatedEvent();\n+        eventPublisher.publishEvent(new OptionUpdatedEvent(this));\n     }\n \n     @Override\n     public void update(Integer optionId, OptionParam optionParam) {\n         Option optionToUpdate = getById(optionId);\n         optionParam.update(optionToUpdate);\n         update(optionToUpdate);\n-        publishOptionUpdatedEvent();\n+        eventPublisher.publishEvent(new OptionUpdatedEvent(this));\n     }\n \n     @Override\n@@ -271,7 +271,7 @@ public Page<OptionSimpleDTO> pageDtosBy(Pageable pageable, OptionQuery optionQue\n     @Override\n     public Option removePermanently(Integer id) {\n         Option deletedOption = removeById(id);\n-        publishOptionUpdatedEvent();\n+        eventPublisher.publishEvent(new OptionUpdatedEvent(this));\n         return deletedOption;\n     }\n \n@@ -629,7 +629,7 @@ public List<OptionDTO> replaceUrl(String oldUrl, String newUrl) {\n             replaced.add(option);\n         });\n         List<Option> updated = updateInBatch(replaced);\n-        publishOptionUpdatedEvent();\n+        eventPublisher.publishEvent(new OptionUpdatedEvent(this));\n         return updated.stream().map(this::convertToDto).collect(Collectors.toList());\n     }\n \n@@ -640,10 +640,12 @@ public OptionSimpleDTO convertToDto(Option option) {\n         return new OptionSimpleDTO().convertFrom(option);\n     }\n \n+    @Deprecated\n     private void cleanCache() {\n         cacheStore.delete(OPTIONS_KEY);\n     }\n \n+    @Deprecated\n     private void publishOptionUpdatedEvent() {\n         flush();\n         cleanCache();",
    "output": "fix: #1255. (#1256)\n\n* fix: #1255.\r\n\r\n* fix: #1255."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/InstallController.java b/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n@@ -214,8 +214,9 @@ private PostDetailVO createDefaultPostIfAbsent(@Nullable Category category) {\n             + \"## 相关链接\\n\"\n             + \"\\n\"\n             + \"- 官网：[https://halo.run](https://halo.run)\\n\"\n+            + \"- 文档：[https://docs.halo.run](https://docs.halo.run)\\n\"\n             + \"- 社区：[https://bbs.halo.run](https://bbs.halo.run)\\n\"\n-            + \"- 主题仓库：[https://halo.run/p/themes.html](https://halo.run/p/themes.html)\\n\"\n+            + \"- 主题仓库：[https://halo.run/themes.html](https://halo.run/themes.html)\\n\"\n             + \"- 开源地址：[https://github.com/halo-dev/halo](https://github.com/halo-dev/halo)\\n\"\n             + \"\\n\"\n             + \"在使用过程中，有任何问题都可以通过以上链接找寻答案，或者联系我们。\\n\"",
    "output": "doc: add document website. (#1215)\n\n* doc: add document website.\r\n\r\n* doc: add document website.\r\n\r\n* doc: add document website."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/ContentContentController.java b/src/main/java/run/halo/app/controller/content/ContentContentController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentContentController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentContentController.java\n@@ -93,10 +93,6 @@ public ContentContentController(PostModel postModel,\n     public String content(@PathVariable(\"prefix\") String prefix,\n         @RequestParam(value = \"token\", required = false) String token,\n         Model model) {\n-        if (optionService.getSheetPermalinkType().equals(SheetPermalinkType.ROOT)) {\n-            Sheet sheet = sheetService.getBySlug(prefix);\n-            return sheetModel.content(sheet, token, model);\n-        }\n         if (optionService.getArchivesPrefix().equals(prefix)) {\n             return postModel.archives(1, model);\n         }\n@@ -115,7 +111,11 @@ public String content(@PathVariable(\"prefix\") String prefix,\n         if (optionService.getLinksPrefix().equals(prefix)) {\n             return linkModel.list(model);\n         }\n-        return null;\n+        if (optionService.getSheetPermalinkType().equals(SheetPermalinkType.ROOT)) {\n+            Sheet sheet = sheetService.getBySlug(prefix);\n+            return sheetModel.content(sheet, token, model);\n+        }\n+        throw new NotFoundException(\"Not Found\");\n     }\n \n     @GetMapping(\"{prefix}/page/{page:\\\\d+}\")\n@@ -155,12 +155,6 @@ public String content(@PathVariable(\"prefix\") String prefix,\n             }\n         }\n \n-        if (optionService.getSheetPermalinkType().equals(SheetPermalinkType.SECONDARY)\n-            && optionService.getSheetPrefix().equals(prefix)) {\n-            Sheet sheet = sheetService.getBySlug(slug);\n-            return sheetModel.content(sheet, token, model);\n-        }\n-\n         if (optionService.getCategoriesPrefix().equals(prefix)) {\n             return categoryModel.listPost(model, slug, 1);\n         }\n@@ -175,6 +169,12 @@ public String content(@PathVariable(\"prefix\") String prefix,\n             return postModel.content(post, token, model);\n         }\n \n+        if (optionService.getSheetPermalinkType().equals(SheetPermalinkType.SECONDARY)\n+            && optionService.getSheetPrefix().equals(prefix)) {\n+            Sheet sheet = sheetService.getBySlug(slug);\n+            return sheetModel.content(sheet, token, model);\n+        }\n+\n         throw new NotFoundException(\"Not Found\");\n     }\n ",
    "output": "fix: unable to access custom sheet. (#1246)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/utils/FileUtils.java b/src/main/java/run/halo/app/utils/FileUtils.java\n--- a/src/main/java/run/halo/app/utils/FileUtils.java\n+++ b/src/main/java/run/halo/app/utils/FileUtils.java\n@@ -56,15 +56,15 @@ public static void copyFolder(@NonNull Path source, @NonNull Path target) throws\n             @Override\n             public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs)\n                 throws IOException {\n-                Path current = target.resolve(source.relativize(dir));\n+                Path current = target.resolve(source.relativize(dir).toString());\n                 Files.createDirectories(current);\n                 return FileVisitResult.CONTINUE;\n             }\n \n             @Override\n             public FileVisitResult visitFile(Path file, BasicFileAttributes attrs)\n                 throws IOException {\n-                Files.copy(file, target.resolve(source.relativize(file)),\n+                Files.copy(file, target.resolve(source.relativize(file).toString()),\n                     StandardCopyOption.REPLACE_EXISTING);\n                 return FileVisitResult.CONTINUE;\n             }",
    "output": "Fix folder copy error: ProviderMismatchException (#1249)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/model/PostModel.java b/src/main/java/run/halo/app/controller/content/model/PostModel.java\n--- a/src/main/java/run/halo/app/controller/content/model/PostModel.java\n+++ b/src/main/java/run/halo/app/controller/content/model/PostModel.java\n@@ -75,7 +75,10 @@ public String content(Post post, String token, Model model) {\n \n         if (post.getStatus().equals(PostStatus.INTIMATE) && StringUtils.isEmpty(token)) {\n             model.addAttribute(\"slug\", post.getSlug());\n-            return \"common/template/post_password\";\n+            if (themeService.templateExists(HaloConst.POST_PASSWORD_TEMPLATE + HaloConst.SUFFIX_FTL)) {\n+                return themeService.render(HaloConst.POST_PASSWORD_TEMPLATE);\n+            }\n+            return \"common/template/\" + HaloConst.POST_PASSWORD_TEMPLATE;\n         }\n \n         if (StringUtils.isEmpty(token)) {\n\ndiff --git a/src/main/java/run/halo/app/model/support/HaloConst.java b/src/main/java/run/halo/app/model/support/HaloConst.java\n--- a/src/main/java/run/halo/app/model/support/HaloConst.java\n+++ b/src/main/java/run/halo/app/model/support/HaloConst.java\n@@ -46,11 +46,6 @@ public class HaloConst {\n      */\n     public final static String HALO_DATA_EXPORT_PREFIX = \"halo-data-export-\";\n \n-    /**\n-     * Static pages pack prefix.\n-     */\n-    public final static String STATIC_PAGE_PACK_PREFIX = \"static-pages-\";\n-\n     /**\n      * Default theme name.\n      */\n@@ -65,6 +60,11 @@ public class HaloConst {\n      * Path separator.\n      */\n     public static final String FILE_SEPARATOR = File.separator;\n+\n+    /**\n+     * Post password template name.\n+     */\n+    public static final String POST_PASSWORD_TEMPLATE = \"post_password\";\n     /**\n      * Suffix of freemarker template file\n      */\n\ndiff --git a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n@@ -165,6 +165,7 @@ public List<String> listCustomTemplates(@NonNull String themeId, @NonNull String\n             Path themePath = Paths.get(themeProperty.getThemePath());\n             try (Stream<Path> pathStream = Files.list(themePath)) {\n                 return pathStream.filter(path -> StringUtils.startsWithIgnoreCase(path.getFileName().toString(), prefix))\n+                        .filter(path -> !(HaloConst.POST_PASSWORD_TEMPLATE + HaloConst.SUFFIX_FTL).equals(path.getFileName().toString()))\n                         .map(path -> {\n                             // Remove prefix\n                             String customTemplate = StringUtils.removeStartIgnoreCase(path.getFileName().toString(), prefix);",
    "output": "feat: support custom post password template. (#1236)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/aspect/DisableOnConditionAspect.java b/src/main/java/run/halo/app/aspect/DisableOnConditionAspect.java\n--- a/src/main/java/run/halo/app/aspect/DisableOnConditionAspect.java\n+++ b/src/main/java/run/halo/app/aspect/DisableOnConditionAspect.java\n@@ -28,7 +28,7 @@ public DisableOnConditionAspect(HaloProperties haloProperties) {\n         this.haloProperties = haloProperties;\n     }\n \n-    @Pointcut(\"@annotation(run.halo.app.annotation.DisableOnCondition)\")\n+    @Pointcut(\"execution(* run.halo.app.controller.*.*(..)) && @annotation(run.halo.app.annotation.DisableOnCondition)\")\n     public void pointcut() {\n     }\n \n\ndiff --git a/src/main/java/run/halo/app/aspect/SensitiveConcealAspect.java b/src/main/java/run/halo/app/aspect/SensitiveConcealAspect.java\n--- a/src/main/java/run/halo/app/aspect/SensitiveConcealAspect.java\n+++ b/src/main/java/run/halo/app/aspect/SensitiveConcealAspect.java\n@@ -19,7 +19,7 @@\n public class SensitiveConcealAspect {\n \n \n-    @Pointcut(\"@annotation(run.halo.app.annotation.SensitiveConceal)\")\n+    @Pointcut(\"execution(* run.halo.app.repository.*.*(..)) && @annotation(run.halo.app.annotation.SensitiveConceal)\")\n     public void pointCut() {\n     }\n ",
    "output": "perft: Reduce the scope of pointcut to make the package scope of tangent point as small as possible (#1238)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/api/CategoryController.java b/src/main/java/run/halo/app/controller/content/api/CategoryController.java\n--- a/src/main/java/run/halo/app/controller/content/api/CategoryController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/CategoryController.java\n@@ -8,10 +8,10 @@\n import org.springframework.data.web.SortDefault;\n import org.springframework.web.bind.annotation.*;\n import run.halo.app.model.dto.CategoryDTO;\n-import run.halo.app.model.dto.post.BasePostSimpleDTO;\n import run.halo.app.model.entity.Category;\n import run.halo.app.model.entity.Post;\n import run.halo.app.model.enums.PostStatus;\n+import run.halo.app.model.vo.PostListVO;\n import run.halo.app.service.CategoryService;\n import run.halo.app.service.PostCategoryService;\n import run.halo.app.service.PostService;\n@@ -56,12 +56,12 @@ public List<? extends CategoryDTO> listCategories(@SortDefault(sort = \"updateTim\n \n     @GetMapping(\"{slug}/posts\")\n     @ApiOperation(\"Lists posts by category slug\")\n-    public Page<BasePostSimpleDTO> listPostsBy(@PathVariable(\"slug\") String slug,\n+    public Page<PostListVO> listPostsBy(@PathVariable(\"slug\") String slug,\n             @PageableDefault(sort = {\"topPriority\", \"updateTime\"}, direction = DESC) Pageable pageable) {\n         // Get category by slug\n         Category category = categoryService.getBySlugOfNonNull(slug);\n \n         Page<Post> postPage = postCategoryService.pagePostBy(category.getId(), PostStatus.PUBLISHED, pageable);\n-        return postService.convertToSimple(postPage);\n+        return postService.convertToListVo(postPage);\n     }\n }\n\ndiff --git a/src/main/java/run/halo/app/controller/content/api/TagController.java b/src/main/java/run/halo/app/controller/content/api/TagController.java\n--- a/src/main/java/run/halo/app/controller/content/api/TagController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/TagController.java\n@@ -9,10 +9,10 @@\n import org.springframework.data.web.SortDefault;\n import org.springframework.web.bind.annotation.*;\n import run.halo.app.model.dto.TagDTO;\n-import run.halo.app.model.dto.post.BasePostSimpleDTO;\n import run.halo.app.model.entity.Post;\n import run.halo.app.model.entity.Tag;\n import run.halo.app.model.enums.PostStatus;\n+import run.halo.app.model.vo.PostListVO;\n import run.halo.app.service.PostService;\n import run.halo.app.service.PostTagService;\n import run.halo.app.service.TagService;\n@@ -59,13 +59,13 @@ public List<? extends TagDTO> listTags(@SortDefault(sort = \"updateTime\", directi\n \n     @GetMapping(\"{slug}/posts\")\n     @ApiOperation(\"Lists posts by tag slug\")\n-    public Page<BasePostSimpleDTO> listPostsBy(@PathVariable(\"slug\") String slug,\n+    public Page<PostListVO> listPostsBy(@PathVariable(\"slug\") String slug,\n             @PageableDefault(sort = {\"topPriority\", \"updateTime\"}, direction = DESC) Pageable pageable) {\n         // Get tag by slug\n         Tag tag = tagService.getBySlugOfNonNull(slug);\n \n         // Get posts, convert and return\n         Page<Post> postPage = postTagService.pagePostsBy(tag.getId(), PostStatus.PUBLISHED, pageable);\n-        return postService.convertToSimple(postPage);\n+        return postService.convertToListVo(postPage);\n     }\n }",
    "output": "feat: #766 (#1210)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/ThemeController.java b/src/main/java/run/halo/app/controller/admin/api/ThemeController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/ThemeController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/ThemeController.java\n@@ -165,7 +165,7 @@ public ThemeProperty uploadTheme(@RequestPart(\"file\") MultipartFile file) {\n         return themeService.upload(file);\n     }\n \n-    @PutMapping(\"upload/{themeId}\")\n+    @PostMapping(\"upload/{themeId}\")\n     @ApiOperation(\"Upgrades theme by file\")\n     public ThemeProperty updateThemeByUpload(@PathVariable(\"themeId\") String themeId,\n             @RequestPart(\"file\") MultipartFile file) {",
    "output": "fix: #1180 (#1209)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/params/JournalParam.java b/src/main/java/run/halo/app/model/params/JournalParam.java\n--- a/src/main/java/run/halo/app/model/params/JournalParam.java\n+++ b/src/main/java/run/halo/app/model/params/JournalParam.java\n@@ -6,7 +6,6 @@\n import run.halo.app.model.enums.JournalType;\n \n import javax.validation.constraints.NotBlank;\n-import javax.validation.constraints.Size;\n \n /**\n  * Journal param.\n@@ -19,7 +18,6 @@\n public class JournalParam implements InputConverter<Journal> {\n \n     @NotBlank(message = \"内容不能为空\")\n-    @Size(max = 511, message = \"内容的字符长度不能超过 {max}\")\n     private String sourceContent;\n \n     private JournalType type = JournalType.PUBLIC;",
    "output": "feat: #1160. (#1203)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/task/RecycledPostCleaningTask.java b/src/main/java/run/halo/app/task/RecycledPostCleaningTask.java\n--- a/src/main/java/run/halo/app/task/RecycledPostCleaningTask.java\n+++ b/src/main/java/run/halo/app/task/RecycledPostCleaningTask.java\n@@ -39,7 +39,7 @@ public RecycledPostCleaningTask(OptionService optionService, PostService postSer\n     /**\n      * Clean recycled posts if RECYCLED_POST_CLEANING_ENABLED is true\n      */\n-    @Scheduled(cron = \"0 0 */1 * * *\")\n+    @Scheduled(cron = \"0 0 */1 * * ?\")\n     public synchronized void run() {\n         Boolean recycledPostCleaningEnabled = optionService.getByPropertyOrDefault(PostProperties.RECYCLED_POST_CLEANING_ENABLED, Boolean.class, false);\n         log.debug(\"{} = {}\", PostProperties.RECYCLED_POST_CLEANING_ENABLED.getValue(), recycledPostCleaningEnabled);",
    "output": "fix: #1200 (#1207)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/cache/RedisCacheStore.java b/src/main/java/run/halo/app/cache/RedisCacheStore.java\n--- a/src/main/java/run/halo/app/cache/RedisCacheStore.java\n+++ b/src/main/java/run/halo/app/cache/RedisCacheStore.java\n@@ -1,128 +0,0 @@\n-package run.halo.app.cache;\n-\n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import lombok.extern.slf4j.Slf4j;\n-import org.jetbrains.annotations.NotNull;\n-import org.springframework.util.Assert;\n-import org.springframework.util.StringUtils;\n-import redis.clients.jedis.HostAndPort;\n-import redis.clients.jedis.JedisCluster;\n-import redis.clients.jedis.JedisPoolConfig;\n-import run.halo.app.config.properties.HaloProperties;\n-import run.halo.app.utils.JsonUtils;\n-\n-import javax.annotation.PreDestroy;\n-import java.util.Date;\n-import java.util.HashSet;\n-import java.util.Optional;\n-import java.util.Set;\n-import java.util.concurrent.ConcurrentHashMap;\n-import java.util.concurrent.locks.Lock;\n-import java.util.concurrent.locks.ReentrantLock;\n-\n-/**\n- * Redis cache store.\n- *\n- * @author chaos\n- */\n-@Slf4j\n-public class RedisCacheStore extends AbstractStringCacheStore {\n-    /**\n-     * Cache container.\n-     */\n-    private final static ConcurrentHashMap<String, CacheWrapper<String>> CACHE_CONTAINER = new ConcurrentHashMap<>();\n-\n-    private volatile static JedisCluster REDIS;\n-\n-    /**\n-     * Lock.\n-     */\n-    private final Lock lock = new ReentrantLock();\n-\n-    public RedisCacheStore(HaloProperties haloProperties) {\n-        this.haloProperties = haloProperties;\n-        initRedis();\n-    }\n-\n-    private void initRedis() {\n-        JedisPoolConfig cfg = new JedisPoolConfig();\n-        cfg.setMaxIdle(2);\n-        cfg.setMaxTotal(30);\n-        cfg.setMaxWaitMillis(5000);\n-        Set<HostAndPort> nodes = new HashSet<>();\n-        for (String hostPort : this.haloProperties.getCacheRedisNodes()) {\n-            String[] temp = hostPort.split(\":\");\n-            if (temp.length > 0) {\n-                String host = temp[0];\n-                int port = 6379;\n-                if (temp.length > 1) {\n-                    try {\n-                        port = Integer.parseInt(temp[1]);\n-                    } catch (Exception ex) {\n-\n-                    }\n-                }\n-                nodes.add(new HostAndPort(host, port));\n-            }\n-        }\n-        if (nodes.isEmpty()) {\n-            nodes.add(new HostAndPort(\"127.0.0.1\", 6379));\n-        }\n-        REDIS = new JedisCluster(nodes, 5, 20, 3, this.haloProperties.getCacheRedisPassword(), cfg);\n-        log.info(\"Initialized cache redis cluster: {}\", REDIS.getClusterNodes());\n-    }\n-\n-    @NotNull\n-    @Override\n-    Optional<CacheWrapper<String>> getInternal(@NotNull String key) {\n-        Assert.hasText(key, \"Cache key must not be blank\");\n-        String v = REDIS.get(key);\n-        return StringUtils.isEmpty(v) ? Optional.empty() : jsonToCacheWrapper(v);\n-    }\n-\n-    @Override\n-    void putInternal(@NotNull String key, @NotNull CacheWrapper<String> cacheWrapper) {\n-        putInternalIfAbsent(key, cacheWrapper);\n-        try {\n-            REDIS.set(key, JsonUtils.objectToJson(cacheWrapper));\n-            Date ttl = cacheWrapper.getExpireAt();\n-            if (ttl != null) {\n-                REDIS.pexpireAt(key, ttl.getTime());\n-            }\n-        } catch (Exception e) {\n-            log.warn(\"Put cache fail json2object key: [{}] value:[{}]\", key, cacheWrapper);\n-        }\n-    }\n-\n-    @Override\n-    Boolean putInternalIfAbsent(@NotNull String key, @NotNull CacheWrapper<String> cacheWrapper) {\n-        Assert.hasText(key, \"Cache key must not be blank\");\n-        Assert.notNull(cacheWrapper, \"Cache wrapper must not be null\");\n-        try {\n-            if (REDIS.setnx(key, JsonUtils.objectToJson(cacheWrapper)) <= 0) {\n-                log.warn(\"Failed to put the cache, because the key: [{}] has been present already\", key);\n-                return false;\n-            }\n-            Date ttl = cacheWrapper.getExpireAt();\n-            if (ttl != null) {\n-                REDIS.pexpireAt(key, ttl.getTime());\n-            }\n-            return true;\n-        } catch (JsonProcessingException e) {\n-            log.warn(\"Put cache fail json2object key: [{}] value:[{}]\", key, cacheWrapper);\n-        }\n-        log.debug(\"Cache key: [{}], original cache wrapper: [{}]\", key, cacheWrapper);\n-        return false;\n-    }\n-\n-    @Override\n-    public void delete(@NotNull String key) {\n-        Assert.hasText(key, \"Cache key must not be blank\");\n-        REDIS.del(key);\n-        log.debug(\"Removed key: [{}]\", key);\n-    }\n-\n-    @PreDestroy\n-    public void preDestroy() {\n-    }\n-}\n\ndiff --git a/src/main/java/run/halo/app/config/HaloConfiguration.java b/src/main/java/run/halo/app/config/HaloConfiguration.java\n--- a/src/main/java/run/halo/app/config/HaloConfiguration.java\n+++ b/src/main/java/run/halo/app/config/HaloConfiguration.java\n@@ -17,7 +17,6 @@\n import run.halo.app.cache.AbstractStringCacheStore;\n import run.halo.app.cache.InMemoryCacheStore;\n import run.halo.app.cache.LevelCacheStore;\n-import run.halo.app.cache.RedisCacheStore;\n import run.halo.app.config.properties.HaloProperties;\n import run.halo.app.repository.base.BaseRepositoryImpl;\n import run.halo.app.utils.HttpClientUtils;\n@@ -65,9 +64,6 @@ public AbstractStringCacheStore stringCacheStore() {\n             case \"level\":\n                 stringCacheStore = new LevelCacheStore(this.haloProperties);\n                 break;\n-            case \"redis\":\n-                stringCacheStore = new RedisCacheStore(this.haloProperties);\n-                break;\n             case \"memory\":\n             default:\n                 //memory or default",
    "output": "chore: remove redis cache store (#1190)\n\n* chore: remove redis cache store.\r\n\r\n* chore: remove redis cache store.\r\n\r\n* chore: update build.gradle."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/api/JournalController.java b/src/main/java/run/halo/app/controller/content/api/JournalController.java\n--- a/src/main/java/run/halo/app/controller/content/api/JournalController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/JournalController.java\n@@ -111,4 +111,10 @@ public BaseCommentDTO comment(@RequestBody JournalCommentParam journalCommentPar\n         journalCommentParam.setContent(HtmlUtils.htmlEscape(journalCommentParam.getContent(), StandardCharsets.UTF_8.displayName()));\n         return journalCommentService.convertTo(journalCommentService.createBy(journalCommentParam));\n     }\n+\n+    @PostMapping(\"{id:\\\\d+}/likes\")\n+    @ApiOperation(\"Likes a journal\")\n+    public void like(@PathVariable(\"id\") Integer id) {\n+        journalService.increaseLike(id);\n+    }\n }\n\ndiff --git a/src/main/java/run/halo/app/controller/content/api/PostController.java b/src/main/java/run/halo/app/controller/content/api/PostController.java\n--- a/src/main/java/run/halo/app/controller/content/api/PostController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/PostController.java\n@@ -10,6 +10,7 @@\n import org.springframework.web.bind.annotation.*;\n import org.springframework.web.util.HtmlUtils;\n import run.halo.app.cache.lock.CacheLock;\n+import run.halo.app.exception.NotFoundException;\n import run.halo.app.model.dto.BaseCommentDTO;\n import run.halo.app.model.dto.post.BasePostSimpleDTO;\n import run.halo.app.model.entity.Post;\n@@ -31,6 +32,7 @@\n  * Content post controller.\n  *\n  * @author johnniang\n+ * @author ryanwang\n  * @date 2019-04-02\n  */\n @RestController(\"ApiContentPostController\")\n@@ -88,6 +90,22 @@ public PostDetailVO getBy(@PathVariable(\"postId\") Integer postId,\n         return postDetailVO;\n     }\n \n+    @GetMapping(\"{postId:\\\\d+}/prev\")\n+    @ApiOperation(\"Gets previous post by current post id.\")\n+    public PostDetailVO getPrevPostBy(@PathVariable(\"postId\") Integer postId) {\n+        Post post = postService.getById(postId);\n+        Post prevPost = postService.getPrevPost(post).orElseThrow(() -> new NotFoundException(\"查询不到该文章的信息\"));\n+        return postService.convertToDetailVo(prevPost);\n+    }\n+\n+    @GetMapping(\"{postId:\\\\d+}/next\")\n+    @ApiOperation(\"Gets next post by current post id.\")\n+    public PostDetailVO getNextPostBy(@PathVariable(\"postId\") Integer postId) {\n+        Post post = postService.getById(postId);\n+        Post nextPost = postService.getNextPost(post).orElseThrow(() -> new NotFoundException(\"查询不到该文章的信息\"));\n+        return postService.convertToDetailVo(nextPost);\n+    }\n+\n     @GetMapping(\"/slug\")\n     @ApiOperation(\"Gets a post\")\n     public PostDetailVO getBy(@RequestParam(\"slug\") String slug,\n@@ -114,7 +132,6 @@ public PostDetailVO getBy(@RequestParam(\"slug\") String slug,\n     public Page<CommentWithHasChildrenVO> listTopComments(@PathVariable(\"postId\") Integer postId,\n             @RequestParam(name = \"page\", required = false, defaultValue = \"0\") int page,\n             @SortDefault(sort = \"createTime\", direction = DESC) Sort sort) {\n-\n         return postCommentService.pageTopCommentsBy(postId, CommentStatus.PUBLISHED, PageRequest.of(page, optionService.getCommentPageSize(), sort));\n     }\n \n@@ -143,8 +160,7 @@ public Page<BaseCommentVO> listCommentsTree(@PathVariable(\"postId\") Integer post\n     public Page<BaseCommentWithParentVO> listComments(@PathVariable(\"postId\") Integer postId,\n             @RequestParam(name = \"page\", required = false, defaultValue = \"0\") int page,\n             @SortDefault(sort = \"createTime\", direction = DESC) Sort sort) {\n-        Page<BaseCommentWithParentVO> result = postCommentService.pageWithParentVoBy(postId, PageRequest.of(page, optionService.getCommentPageSize(), sort));\n-        return result;\n+        return postCommentService.pageWithParentVoBy(postId, PageRequest.of(page, optionService.getCommentPageSize(), sort));\n     }\n \n     @PostMapping(\"comments\")\n\ndiff --git a/src/main/java/run/halo/app/repository/JournalRepository.java b/src/main/java/run/halo/app/repository/JournalRepository.java\n--- a/src/main/java/run/halo/app/repository/JournalRepository.java\n+++ b/src/main/java/run/halo/app/repository/JournalRepository.java\n@@ -3,6 +3,9 @@\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.Pageable;\n import org.springframework.data.jpa.repository.JpaSpecificationExecutor;\n+import org.springframework.data.jpa.repository.Modifying;\n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n import org.springframework.lang.NonNull;\n import run.halo.app.model.entity.Journal;\n import run.halo.app.model.enums.JournalType;\n@@ -26,4 +29,15 @@ public interface JournalRepository extends BaseRepository<Journal, Integer>, Jpa\n      */\n     @NonNull\n     Page<Journal> findAllByType(@NonNull JournalType type, @NonNull Pageable pageable);\n+\n+    /**\n+     * Updates journal likes.\n+     *\n+     * @param likes likes delta\n+     * @param id    id must not be null\n+     * @return updated rows\n+     */\n+    @Modifying\n+    @Query(\"update Journal j set j.likes = j.likes + :likes where j.id = :id\")\n+    int updateLikes(@Param(\"likes\") long likes, @Param(\"id\") @NonNull Integer id);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/JournalService.java b/src/main/java/run/halo/app/service/JournalService.java\n--- a/src/main/java/run/halo/app/service/JournalService.java\n+++ b/src/main/java/run/halo/app/service/JournalService.java\n@@ -94,4 +94,19 @@ public interface JournalService extends CrudService<Journal, Integer> {\n      */\n     @NonNull\n     Page<JournalWithCmtCountDTO> convertToCmtCountDto(@NonNull Page<Journal> journalPage);\n+\n+    /**\n+     * Increases journal likes(1).\n+     *\n+     * @param id id must not be null\n+     */\n+    void increaseLike(@NonNull Integer id);\n+\n+    /**\n+     * Increase journal likes.\n+     *\n+     * @param likes likes must not be less than 1\n+     * @param id    id must not be null\n+     */\n+    void increaseLike(long likes, @NonNull Integer id);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java b/src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java\n@@ -216,8 +216,7 @@ public void increaseVisit(long visits, Integer postId) {\n         Assert.notNull(postId, \"Post id must not be null\");\n \n         boolean finishedIncrease;\n-        if (basePostRepository.getByIdAndStatus(postId, PostStatus.DRAFT).isPresent())\n-        {\n+        if (basePostRepository.getByIdAndStatus(postId, PostStatus.DRAFT).isPresent()) {\n             finishedIncrease = true;\n             log.info(\"Post with id: [{}] is a draft and visits will not be updated\", postId);\n         } else {\n@@ -234,7 +233,7 @@ public void increaseVisit(long visits, Integer postId) {\n     @Transactional\n     public void increaseLike(long likes, Integer postId) {\n         Assert.isTrue(likes > 0, \"Likes to increase must not be less than 1\");\n-        Assert.notNull(postId, \"Goods id must not be null\");\n+        Assert.notNull(postId, \"Post id must not be null\");\n \n         long affectedRows = basePostRepository.updateLikes(likes, postId);\n \n\ndiff --git a/src/main/java/run/halo/app/service/impl/JournalServiceImpl.java b/src/main/java/run/halo/app/service/impl/JournalServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/JournalServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/JournalServiceImpl.java\n@@ -8,8 +8,10 @@\n import org.springframework.data.jpa.domain.Specification;\n import org.springframework.lang.NonNull;\n import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n import org.springframework.util.Assert;\n import org.springframework.util.CollectionUtils;\n+import run.halo.app.exception.BadRequestException;\n import run.halo.app.model.dto.JournalDTO;\n import run.halo.app.model.dto.JournalWithCmtCountDTO;\n import run.halo.app.model.entity.Journal;\n@@ -139,6 +141,26 @@ public Page<JournalWithCmtCountDTO> convertToCmtCountDto(Page<Journal> journalPa\n         return new PageImpl<>(journalWithCmtCountDTOS, journalPage.getPageable(), journalPage.getTotalElements());\n     }\n \n+    @Override\n+    @Transactional\n+    public void increaseLike(Integer id) {\n+        increaseLike(1L, id);\n+    }\n+\n+\n+    @Override\n+    @Transactional\n+    public void increaseLike(long likes, Integer id) {\n+        Assert.isTrue(likes > 0, \"Likes to increase must not be less than 1\");\n+        Assert.notNull(id, \"Journal id must not be null\");\n+\n+        long affectedRows = journalRepository.updateLikes(likes, id);\n+\n+        if (affectedRows != 1) {\n+            log.error(\"Journal with id: [{}] may not be found\", id);\n+            throw new BadRequestException(\"Failed to increase likes \" + likes + \" for journal with id \" + id);\n+        }\n+    }\n \n     /**\n      * Build specification by journal query.",
    "output": "feat: #1158 (#1176)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/ContentContentController.java b/src/main/java/run/halo/app/controller/content/ContentContentController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentContentController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentContentController.java\n@@ -15,6 +15,7 @@\n import run.halo.app.model.entity.Sheet;\n import run.halo.app.model.enums.PostPermalinkType;\n import run.halo.app.model.enums.PostStatus;\n+import run.halo.app.model.enums.SheetPermalinkType;\n import run.halo.app.service.OptionService;\n import run.halo.app.service.PostService;\n import run.halo.app.service.SheetService;\n@@ -81,7 +82,12 @@ public ContentContentController(PostModel postModel,\n \n     @GetMapping(\"{prefix}\")\n     public String content(@PathVariable(\"prefix\") String prefix,\n+            @RequestParam(value = \"token\", required = false) String token,\n             Model model) {\n+        if (optionService.getSheetPermalinkType().equals(SheetPermalinkType.ROOT)) {\n+            Sheet sheet = sheetService.getBySlug(prefix);\n+            return sheetModel.content(sheet, token, model);\n+        }\n         if (optionService.getArchivesPrefix().equals(prefix)) {\n             return postModel.archives(1, model);\n         }\n@@ -139,7 +145,7 @@ public String content(@PathVariable(\"prefix\") String prefix,\n             }\n         }\n \n-        if (optionService.getSheetPrefix().equals(prefix)) {\n+        if (optionService.getSheetPermalinkType().equals(SheetPermalinkType.SECONDARY) && optionService.getSheetPrefix().equals(prefix)) {\n             Sheet sheet = sheetService.getBySlug(slug);\n             return sheetModel.content(sheet, token, model);\n         }\n\ndiff --git a/src/main/java/run/halo/app/model/enums/SheetPermalinkType.java b/src/main/java/run/halo/app/model/enums/SheetPermalinkType.java\n--- a/src/main/java/run/halo/app/model/enums/SheetPermalinkType.java\n+++ b/src/main/java/run/halo/app/model/enums/SheetPermalinkType.java\n@@ -0,0 +1,31 @@\n+package run.halo.app.model.enums;\n+\n+/**\n+ * Sheet Permalink type enum.\n+ *\n+ * @author ryanwang\n+ * @date 2020-12-01\n+ */\n+public enum SheetPermalinkType implements ValueEnum<Integer> {\n+\n+    /**\n+     * /{@link run.halo.app.model.properties.PermalinkProperties#SHEET_PREFIX}/${slug}\n+     */\n+    SECONDARY(0),\n+\n+    /**\n+     * /${slug}\n+     */\n+    ROOT(1);\n+\n+    private final Integer value;\n+\n+    SheetPermalinkType(Integer value) {\n+        this.value = value;\n+    }\n+\n+    @Override\n+    public Integer getValue() {\n+        return value;\n+    }\n+}\n\ndiff --git a/src/main/java/run/halo/app/model/properties/PermalinkProperties.java b/src/main/java/run/halo/app/model/properties/PermalinkProperties.java\n--- a/src/main/java/run/halo/app/model/properties/PermalinkProperties.java\n+++ b/src/main/java/run/halo/app/model/properties/PermalinkProperties.java\n@@ -1,6 +1,7 @@\n package run.halo.app.model.properties;\n \n import run.halo.app.model.enums.PostPermalinkType;\n+import run.halo.app.model.enums.SheetPermalinkType;\n \n /**\n  * Permalink properties enum.\n@@ -15,6 +16,11 @@ public enum PermalinkProperties implements PropertyEnum {\n      */\n     POST_PERMALINK_TYPE(\"post_permalink_type\", PostPermalinkType.class, PostPermalinkType.DEFAULT.name()),\n \n+    /**\n+     * Sheet Permalink type.\n+     */\n+    SHEET_PERMALINK_TYPE(\"sheet_permalink_type\", SheetPermalinkType.class, SheetPermalinkType.SECONDARY.name()),\n+\n     /**\n      * Categories prefix\n      * such as: /categories or /categories/${slug}\n\ndiff --git a/src/main/java/run/halo/app/service/OptionService.java b/src/main/java/run/halo/app/service/OptionService.java\n--- a/src/main/java/run/halo/app/service/OptionService.java\n+++ b/src/main/java/run/halo/app/service/OptionService.java\n@@ -12,6 +12,7 @@\n import run.halo.app.model.dto.OptionSimpleDTO;\n import run.halo.app.model.entity.Option;\n import run.halo.app.model.enums.PostPermalinkType;\n+import run.halo.app.model.enums.SheetPermalinkType;\n import run.halo.app.model.enums.ValueEnum;\n import run.halo.app.model.params.OptionParam;\n import run.halo.app.model.params.OptionQuery;\n@@ -392,6 +393,13 @@ public interface OptionService extends CrudService<Option, Integer> {\n      */\n     PostPermalinkType getPostPermalinkType();\n \n+    /**\n+     * Get sheet permalink type.\n+     *\n+     * @return SheetPermalinkType\n+     */\n+    SheetPermalinkType getSheetPermalinkType();\n+\n     /**\n      * Get sheet custom prefix.\n      *\n\ndiff --git a/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java b/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n@@ -23,6 +23,7 @@\n import run.halo.app.model.dto.OptionSimpleDTO;\n import run.halo.app.model.entity.Option;\n import run.halo.app.model.enums.PostPermalinkType;\n+import run.halo.app.model.enums.SheetPermalinkType;\n import run.halo.app.model.enums.ValueEnum;\n import run.halo.app.model.params.OptionParam;\n import run.halo.app.model.params.OptionQuery;\n@@ -518,6 +519,11 @@ public PostPermalinkType getPostPermalinkType() {\n         return getEnumByPropertyOrDefault(PermalinkProperties.POST_PERMALINK_TYPE, PostPermalinkType.class, PostPermalinkType.DEFAULT);\n     }\n \n+    @Override\n+    public SheetPermalinkType getSheetPermalinkType() {\n+        return getEnumByPropertyOrDefault(PermalinkProperties.SHEET_PERMALINK_TYPE, SheetPermalinkType.class, SheetPermalinkType.SECONDARY);\n+    }\n+\n     @Override\n     public String getSheetPrefix() {\n         return getByPropertyOrDefault(PermalinkProperties.SHEET_PREFIX, String.class, PermalinkProperties.SHEET_PREFIX.defaultValue());\n\ndiff --git a/src/main/java/run/halo/app/service/impl/SheetCommentServiceImpl.java b/src/main/java/run/halo/app/service/impl/SheetCommentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/SheetCommentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/SheetCommentServiceImpl.java\n@@ -11,6 +11,7 @@\n import run.halo.app.model.dto.post.BasePostMinimalDTO;\n import run.halo.app.model.entity.Sheet;\n import run.halo.app.model.entity.SheetComment;\n+import run.halo.app.model.enums.SheetPermalinkType;\n import run.halo.app.model.vo.SheetCommentWithSheetVO;\n import run.halo.app.repository.SheetCommentRepository;\n import run.halo.app.repository.SheetRepository;\n@@ -95,15 +96,23 @@ public List<SheetCommentWithSheetVO> convertToWithSheetVo(List<SheetComment> she\n     private BasePostMinimalDTO buildSheetFullPath(BasePostMinimalDTO basePostMinimalDTO) {\n         StringBuilder fullPath = new StringBuilder();\n \n+        SheetPermalinkType permalinkType = optionService.getSheetPermalinkType();\n+\n         if (optionService.isEnabledAbsolutePath()) {\n             fullPath.append(optionService.getBlogBaseUrl());\n         }\n \n-        fullPath.append(URL_SEPARATOR)\n-                .append(optionService.getSheetPrefix())\n-                .append(URL_SEPARATOR)\n-                .append(basePostMinimalDTO.getSlug())\n-                .append(optionService.getPathSuffix());\n+        if (permalinkType.equals(SheetPermalinkType.SECONDARY)) {\n+            fullPath.append(URL_SEPARATOR)\n+                    .append(optionService.getSheetPrefix())\n+                    .append(URL_SEPARATOR)\n+                    .append(basePostMinimalDTO.getSlug())\n+                    .append(optionService.getPathSuffix());\n+        } else if (permalinkType.equals(SheetPermalinkType.ROOT)) {\n+            fullPath.append(URL_SEPARATOR)\n+                    .append(basePostMinimalDTO.getSlug())\n+                    .append(optionService.getPathSuffix());\n+        }\n \n         basePostMinimalDTO.setFullPath(fullPath.toString());\n         return basePostMinimalDTO;\n\ndiff --git a/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java b/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n@@ -20,6 +20,7 @@\n import run.halo.app.model.entity.SheetMeta;\n import run.halo.app.model.enums.LogType;\n import run.halo.app.model.enums.PostStatus;\n+import run.halo.app.model.enums.SheetPermalinkType;\n import run.halo.app.model.vo.SheetDetailVO;\n import run.halo.app.model.vo.SheetListVO;\n import run.halo.app.repository.SheetRepository;\n@@ -346,15 +347,23 @@ protected void slugMustNotExist(Sheet sheet) {\n     private String buildFullPath(Sheet sheet) {\n         StringBuilder fullPath = new StringBuilder();\n \n+        SheetPermalinkType permalinkType = optionService.getSheetPermalinkType();\n+\n         if (optionService.isEnabledAbsolutePath()) {\n             fullPath.append(optionService.getBlogBaseUrl());\n         }\n \n-        fullPath.append(URL_SEPARATOR)\n-                .append(optionService.getSheetPrefix())\n-                .append(URL_SEPARATOR)\n-                .append(sheet.getSlug())\n-                .append(optionService.getPathSuffix());\n+        if (permalinkType.equals(SheetPermalinkType.SECONDARY)) {\n+            fullPath.append(URL_SEPARATOR)\n+                    .append(optionService.getSheetPrefix())\n+                    .append(URL_SEPARATOR)\n+                    .append(sheet.getSlug())\n+                    .append(optionService.getPathSuffix());\n+        } else if (permalinkType.equals(SheetPermalinkType.ROOT)) {\n+            fullPath.append(URL_SEPARATOR)\n+                    .append(sheet.getSlug())\n+                    .append(optionService.getPathSuffix());\n+        }\n \n         return fullPath.toString();\n     }",
    "output": "feat: #1174 (#1177)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/ContentContentController.java b/src/main/java/run/halo/app/controller/content/ContentContentController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentContentController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentContentController.java\n@@ -109,13 +109,17 @@ public String content(@PathVariable(\"prefix\") String prefix,\n             Model model) {\n         if (optionService.getArchivesPrefix().equals(prefix)) {\n             return postModel.archives(page, model);\n-        } else if (optionService.getJournalsPrefix().equals(prefix)) {\n+        }\n+\n+        if (optionService.getJournalsPrefix().equals(prefix)) {\n             return journalModel.list(page, model);\n-        } else if (optionService.getPhotosPrefix().equals(prefix)) {\n+        }\n+\n+        if (optionService.getPhotosPrefix().equals(prefix)) {\n             return photoModel.list(page, model);\n-        } else {\n-            throw new NotFoundException(\"Not Found\");\n         }\n+\n+        throw new NotFoundException(\"Not Found\");\n     }\n \n     @GetMapping(\"{prefix}/{slug}\")\n@@ -124,23 +128,36 @@ public String content(@PathVariable(\"prefix\") String prefix,\n             @RequestParam(value = \"token\", required = false) String token,\n             Model model) {\n         PostPermalinkType postPermalinkType = optionService.getPostPermalinkType();\n+        if (optionService.getArchivesPrefix().equals(prefix)) {\n+            if (postPermalinkType.equals(PostPermalinkType.DEFAULT)) {\n+                Post post = postService.getBySlug(slug);\n+                return postModel.content(post, token, model);\n+            }\n+            if (postPermalinkType.equals(PostPermalinkType.ID_SLUG) && StringUtils.isNumeric(slug)) {\n+                Post post = postService.getById(Integer.parseInt(slug));\n+                return postModel.content(post, token, model);\n+            }\n+        }\n \n-        if (postPermalinkType.equals(PostPermalinkType.DEFAULT) && optionService.getArchivesPrefix().equals(prefix)) {\n-            Post post = postService.getBySlug(slug);\n-            return postModel.content(post, token, model);\n-        } else if (postPermalinkType.equals(PostPermalinkType.YEAR) && prefix.length() == 4 && StringUtils.isNumeric(prefix)) {\n-            Post post = postService.getBy(Integer.parseInt(prefix), slug);\n-            return postModel.content(post, token, model);\n-        } else if (optionService.getSheetPrefix().equals(prefix)) {\n+        if (optionService.getSheetPrefix().equals(prefix)) {\n             Sheet sheet = sheetService.getBySlug(slug);\n             return sheetModel.content(sheet, token, model);\n-        } else if (optionService.getCategoriesPrefix().equals(prefix)) {\n+        }\n+\n+        if (optionService.getCategoriesPrefix().equals(prefix)) {\n             return categoryModel.listPost(model, slug, 1);\n-        } else if (optionService.getTagsPrefix().equals(prefix)) {\n+        }\n+\n+        if (optionService.getTagsPrefix().equals(prefix)) {\n             return tagModel.listPost(model, slug, 1);\n-        } else {\n-            throw new NotFoundException(\"Not Found\");\n         }\n+\n+        if (postPermalinkType.equals(PostPermalinkType.YEAR) && prefix.length() == 4 && StringUtils.isNumeric(prefix)) {\n+            Post post = postService.getBy(Integer.parseInt(prefix), slug);\n+            return postModel.content(post, token, model);\n+        }\n+\n+        throw new NotFoundException(\"Not Found\");\n     }\n \n     @GetMapping(\"{prefix}/{slug}/page/{page:\\\\d+}\")\n@@ -150,11 +167,13 @@ public String content(@PathVariable(\"prefix\") String prefix,\n             Model model) {\n         if (optionService.getCategoriesPrefix().equals(prefix)) {\n             return categoryModel.listPost(model, slug, page);\n-        } else if (optionService.getTagsPrefix().equals(prefix)) {\n+        }\n+\n+        if (optionService.getTagsPrefix().equals(prefix)) {\n             return tagModel.listPost(model, slug, page);\n-        } else {\n-            throw new NotFoundException(\"Not Found\");\n         }\n+\n+        throw new NotFoundException(\"Not Found\");\n     }\n \n     @GetMapping(\"{year:\\\\d+}/{month:\\\\d+}/{slug}\")\n@@ -167,9 +186,9 @@ public String content(@PathVariable(\"year\") Integer year,\n         if (postPermalinkType.equals(PostPermalinkType.DATE)) {\n             Post post = postService.getBy(year, month, slug);\n             return postModel.content(post, token, model);\n-        } else {\n-            throw new NotFoundException(\"Not Found\");\n         }\n+\n+        throw new NotFoundException(\"Not Found\");\n     }\n \n     @GetMapping(\"{year:\\\\d+}/{month:\\\\d+}/{day:\\\\d+}/{slug}\")\n@@ -183,9 +202,9 @@ public String content(@PathVariable(\"year\") Integer year,\n         if (postPermalinkType.equals(PostPermalinkType.DAY)) {\n             Post post = postService.getBy(year, month, day, slug);\n             return postModel.content(post, token, model);\n-        } else {\n-            throw new NotFoundException(\"Not Found\");\n         }\n+\n+        throw new NotFoundException(\"Not Found\");\n     }\n \n     @PostMapping(value = \"archives/{slug:.*}/password\")\n\ndiff --git a/src/main/java/run/halo/app/model/enums/PostPermalinkType.java b/src/main/java/run/halo/app/model/enums/PostPermalinkType.java\n--- a/src/main/java/run/halo/app/model/enums/PostPermalinkType.java\n+++ b/src/main/java/run/halo/app/model/enums/PostPermalinkType.java\n@@ -31,7 +31,12 @@ public enum PostPermalinkType implements ValueEnum<Integer> {\n     /**\n      * /1970/${slug}\n      */\n-    YEAR(4);\n+    YEAR(4),\n+\n+    /**\n+     * archives/${id}\n+     */\n+    ID_SLUG(5);\n \n     private final Integer value;\n \n\ndiff --git a/src/main/java/run/halo/app/service/impl/PostCommentServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostCommentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostCommentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostCommentServiceImpl.java\n@@ -158,6 +158,11 @@ private BasePostMinimalDTO buildPostFullPath(BasePostMinimalDTO post) {\n                     .append(URL_SEPARATOR)\n                     .append(post.getSlug())\n                     .append(pathSuffix);\n+        } else if (permalinkType.equals(PostPermalinkType.ID_SLUG)) {\n+            fullPath.append(archivesPrefix)\n+                    .append(URL_SEPARATOR)\n+                    .append(post.getId())\n+                    .append(pathSuffix);\n         }\n \n         post.setFullPath(fullPath.toString());\n\ndiff --git a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n@@ -872,6 +872,11 @@ private String buildFullPath(Post post) {\n                     .append(URL_SEPARATOR)\n                     .append(post.getSlug())\n                     .append(pathSuffix);\n+        } else if (permalinkType.equals(PostPermalinkType.ID_SLUG)) {\n+            fullPath.append(archivesPrefix)\n+                    .append(URL_SEPARATOR)\n+                    .append(post.getId())\n+                    .append(pathSuffix);\n         }\n         return fullPath.toString();\n     }",
    "output": "feat: #1103 (#1173)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/SwaggerConfiguration.java b/src/main/java/run/halo/app/config/SwaggerConfiguration.java\n--- a/src/main/java/run/halo/app/config/SwaggerConfiguration.java\n+++ b/src/main/java/run/halo/app/config/SwaggerConfiguration.java\n@@ -169,7 +169,7 @@ private ApiInfo apiInfo() {\n                 .description(\"Documentation for Halo API\")\n                 .version(HALO_VERSION)\n                 .termsOfServiceUrl(\"https://github.com/halo-dev\")\n-                .contact(new Contact(\"halo-dev\", \"https://github.com/halo-dev/halo/issues\", \"i#ryanc.cc\"))\n+                .contact(new Contact(\"halo-dev\", \"https://github.com/halo-dev/halo/issues\", \"hi@halo.run\"))\n                 .license(\"GNU General Public License v3.0\")\n                 .licenseUrl(\"https://github.com/halo-dev/halo/blob/master/LICENSE\")\n                 .build();",
    "output": "doc: update swagger contact email. (#1147)"
  },
  {
    "input": "diff --git a/src/test/java/run/halo/app/utils/VersionTest.java b/src/test/java/run/halo/app/utils/VersionTest.java\n--- a/src/test/java/run/halo/app/utils/VersionTest.java\n+++ b/src/test/java/run/halo/app/utils/VersionTest.java\n@@ -135,13 +135,12 @@ void preReleaseVersionResolve() {\n     @Test\n     void unknownVersionTest() {\n         Optional<Version> unknownVersionOpt = Version.resolve(HaloConst.UNKNOWN_VERSION);\n-        assertTrue(unknownVersionOpt.isPresent());\n-        assertEquals(new Version(0, 0, 0), unknownVersionOpt.get());\n+        assertEquals(new Version(Long.MAX_VALUE, Long.MAX_VALUE, Long.MAX_VALUE), unknownVersionOpt.get());\n     }\n \n     @Test\n     void compareTest() {\n-        Version leftVersion = getVersion(\"1.2.3\");\n+        final Version leftVersion = getVersion(\"1.2.3\");\n         // compare with own\n         assertEquals(0, leftVersion.compareTo(leftVersion));\n \n@@ -170,8 +169,8 @@ void compareTest() {\n         rightVersion = getVersion(\"1.2.4-alpha.0\");\n         assertTrue(leftVersion.compareTo(rightVersion) < 0);\n \n-        // compare with unkown version\n-        assertTrue(leftVersion.compareTo(getVersion(HaloConst.UNKNOWN_VERSION)) > 0);\n+        // compare with unknown version\n+        assertTrue(leftVersion.compareTo(getVersion(HaloConst.UNKNOWN_VERSION)) < 0);\n     }\n \n     @NonNull",
    "output": "Fix failing tests (#1131)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/Application.java b/src/main/java/run/halo/app/Application.java\n--- a/src/main/java/run/halo/app/Application.java\n+++ b/src/main/java/run/halo/app/Application.java\n@@ -7,6 +7,7 @@\n import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;\n import org.springframework.data.jpa.repository.config.EnableJpaRepositories;\n import org.springframework.scheduling.annotation.EnableAsync;\n+import org.springframework.scheduling.annotation.EnableScheduling;\n import run.halo.app.repository.base.BaseRepositoryImpl;\n \n /**\n@@ -17,6 +18,7 @@\n  */\n @SpringBootApplication(exclude = { MultipartAutoConfiguration.class })\n @EnableAsync\n+@EnableScheduling\n @EnableJpaRepositories(basePackages = \"run.halo.app.repository\", repositoryBaseClass = BaseRepositoryImpl.class)\n public class Application extends SpringBootServletInitializer {\n \n\ndiff --git a/src/main/java/run/halo/app/model/enums/TimeUnit.java b/src/main/java/run/halo/app/model/enums/TimeUnit.java\n--- a/src/main/java/run/halo/app/model/enums/TimeUnit.java\n+++ b/src/main/java/run/halo/app/model/enums/TimeUnit.java\n@@ -0,0 +1,35 @@\n+package run.halo.app.model.enums;\n+\n+/**\n+ * @author Wh1te\n+ * @date 2020-10-19\n+ */\n+public enum TimeUnit implements ValueEnum<Integer> {\n+\n+    /**\n+     * 天\n+     */\n+    DAY(0),\n+\n+    /**\n+     * 小时\n+     */\n+    HOUR(1);\n+\n+    private final Integer value;\n+\n+    TimeUnit(Integer value) {\n+        this.value = value;\n+    }\n+\n+    /**\n+     * Get enum value.\n+     *\n+     * @return enum value\n+     */\n+    @Override\n+    public Integer getValue() {\n+        return value;\n+    }\n+}\n+\n\ndiff --git a/src/main/java/run/halo/app/model/properties/PostProperties.java b/src/main/java/run/halo/app/model/properties/PostProperties.java\n--- a/src/main/java/run/halo/app/model/properties/PostProperties.java\n+++ b/src/main/java/run/halo/app/model/properties/PostProperties.java\n@@ -1,5 +1,7 @@\n package run.halo.app.model.properties;\n \n+import run.halo.app.model.enums.TimeUnit;\n+\n /**\n  * Post properties.\n  *\n@@ -37,7 +39,22 @@ public enum PostProperties implements PropertyEnum {\n     /**\n      * Post index sort.\n      */\n-    INDEX_SORT(\"post_index_sort\", String.class, \"createTime\");\n+    INDEX_SORT(\"post_index_sort\", String.class, \"createTime\"),\n+\n+    /**\n+     * Enable auto cleaning recycled post.\n+     */\n+    RECYCLED_POST_CLEANING_ENABLED(\"recycled_post_cleaning_enabled\", Boolean.class, \"false\"),\n+\n+    /**\n+     * Recycled post retention time\n+     */\n+    RECYCLED_POST_RETENTION_TIME(\"recycled_post_retention_time\", Integer.class, \"30\"),\n+\n+    /**\n+     * Recycled post retention time unit.\n+     */\n+    RECYCLED_POST_RETENTION_TIMEUNIT(\"recycled_post_retention_timeunit\", TimeUnit.class, TimeUnit.DAY.name());\n \n     private final String value;\n \n\ndiff --git a/src/main/java/run/halo/app/task/RecycledPostCleaningTask.java b/src/main/java/run/halo/app/task/RecycledPostCleaningTask.java\n--- a/src/main/java/run/halo/app/task/RecycledPostCleaningTask.java\n+++ b/src/main/java/run/halo/app/task/RecycledPostCleaningTask.java\n@@ -0,0 +1,82 @@\n+package run.halo.app.task;\n+\n+import cn.hutool.core.date.DateUtil;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.scheduling.annotation.Scheduled;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.CollectionUtils;\n+import run.halo.app.model.entity.BasePost;\n+import run.halo.app.model.entity.Post;\n+import run.halo.app.model.enums.PostStatus;\n+import run.halo.app.model.enums.TimeUnit;\n+import run.halo.app.model.properties.PostProperties;\n+import run.halo.app.service.OptionService;\n+import run.halo.app.service.PostService;\n+\n+import java.time.LocalDateTime;\n+import java.time.temporal.ChronoUnit;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * @author Wh1te\n+ * @date 2020-10-19\n+ */\n+@Slf4j\n+@Component\n+public class RecycledPostCleaningTask {\n+\n+    private final OptionService optionService;\n+\n+    private final PostService postService;\n+\n+    public RecycledPostCleaningTask(OptionService optionService, PostService postService) {\n+        this.optionService = optionService;\n+        this.postService = postService;\n+    }\n+\n+    /**\n+     * Clean recycled posts if RECYCLED_POST_CLEANING_ENABLED is true\n+     */\n+    @Scheduled(cron = \"0 0 */1 * * *\")\n+    public synchronized void run() {\n+        Boolean recycledPostCleaningEnabled = optionService.getByPropertyOrDefault(PostProperties.RECYCLED_POST_CLEANING_ENABLED, Boolean.class, false);\n+        log.debug(\"{} = {}\", PostProperties.RECYCLED_POST_CLEANING_ENABLED.getValue(), recycledPostCleaningEnabled);\n+        if (!recycledPostCleaningEnabled) {\n+            return;\n+        }\n+\n+        Integer recycledPostRetentionTime = optionService.getByPropertyOrDefault(PostProperties.RECYCLED_POST_RETENTION_TIME, Integer.class, PostProperties.RECYCLED_POST_RETENTION_TIME.defaultValue(Integer.class));\n+        TimeUnit timeUnit = optionService.getEnumByPropertyOrDefault(PostProperties.RECYCLED_POST_RETENTION_TIMEUNIT, TimeUnit.class, TimeUnit.DAY);\n+        log.debug(\"{} = {}\", PostProperties.RECYCLED_POST_RETENTION_TIME.getValue(), recycledPostRetentionTime);\n+        log.debug(\"{} = {}\", PostProperties.RECYCLED_POST_RETENTION_TIMEUNIT.getValue(), Objects.requireNonNull(timeUnit).name());\n+\n+        long expiredIn;\n+        switch (timeUnit) {\n+            case HOUR:\n+                expiredIn = recycledPostRetentionTime;\n+                break;\n+            case DAY:\n+            default:\n+                expiredIn = recycledPostRetentionTime * 24;\n+                break;\n+        }\n+        List<Post> recyclePost = postService.listAllBy(PostStatus.RECYCLE);\n+        LocalDateTime now = LocalDateTime.now();\n+        List<Integer> ids = recyclePost.stream().filter(post -> {\n+            LocalDateTime updateTime = DateUtil.toLocalDateTime(post.getUpdateTime());\n+            long until = updateTime.until(now, ChronoUnit.HOURS);\n+            return until >= expiredIn;\n+        }).map(BasePost::getId).collect(Collectors.toList());\n+\n+        if (CollectionUtils.isEmpty(ids)) {\n+            return;\n+        }\n+\n+        log.info(\"Start cleaning recycled posts\");\n+        List<Post> posts = postService.removeByIds(ids);\n+        log.info(\"Recycled posts cleaning has been completed, {} posts has been permanently deleted\", posts.size());\n+    }\n+\n+}",
    "output": "feat: support automatic cleaning recycled posts. #1031 (#1114)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/Application.java b/src/main/java/run/halo/app/Application.java\n--- a/src/main/java/run/halo/app/Application.java\n+++ b/src/main/java/run/halo/app/Application.java\n@@ -2,6 +2,7 @@\n \n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration;\n import org.springframework.boot.builder.SpringApplicationBuilder;\n import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;\n import org.springframework.data.jpa.repository.config.EnableJpaRepositories;\n@@ -14,7 +15,7 @@\n  * @author ryanwang\n  * @date 2017-11-14\n  */\n-@SpringBootApplication\n+@SpringBootApplication(exclude = { MultipartAutoConfiguration.class })\n @EnableAsync\n @EnableJpaRepositories(basePackages = \"run.halo.app.repository\", repositoryBaseClass = BaseRepositoryImpl.class)\n public class Application extends SpringBootServletInitializer {\n\ndiff --git a/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java b/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n--- a/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n+++ b/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n@@ -5,6 +5,8 @@\n import freemarker.template.TemplateException;\n import freemarker.template.TemplateExceptionHandler;\n import lombok.extern.slf4j.Slf4j;\n+import org.springframework.boot.autoconfigure.web.servlet.MultipartProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.boot.jackson.JsonComponentModule;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n@@ -17,6 +19,8 @@\n import org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;\n import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\n import org.springframework.web.method.support.HandlerMethodArgumentResolver;\n+import org.springframework.web.multipart.MultipartResolver;\n+import org.springframework.web.multipart.commons.CommonsMultipartResolver;\n import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\n import org.springframework.web.servlet.config.annotation.ViewResolverRegistry;\n import org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\n@@ -29,6 +33,7 @@\n import run.halo.app.model.support.HaloConst;\n import run.halo.app.security.resolver.AuthenticationArgumentResolver;\n \n+import javax.servlet.MultipartConfigElement;\n import java.io.IOException;\n import java.util.List;\n import java.util.Properties;\n@@ -45,6 +50,7 @@\n  */\n @Slf4j\n @Configuration\n+@EnableConfigurationProperties(MultipartProperties.class)\n public class WebMvcAutoConfiguration extends WebMvcConfigurationSupport {\n \n     private static final String FILE_PROTOCOL = \"file:///\";\n@@ -158,6 +164,25 @@ public FreeMarkerConfigurer freemarkerConfig(HaloProperties haloProperties) thro\n         return configurer;\n     }\n \n+    /**\n+     * Configuring multipartResolver for large file upload..\n+     *\n+     * @return new multipartResolver\n+     */\n+    @Bean(name = \"multipartResolver\")\n+    public MultipartResolver multipartResolver(MultipartProperties multipartProperties) {\n+        MultipartConfigElement multipartConfigElement = multipartProperties.createMultipartConfig();\n+        CommonsMultipartResolver resolver = new CommonsMultipartResolver();\n+        resolver.setDefaultEncoding(\"UTF-8\");\n+        resolver.setMaxUploadSize(multipartConfigElement.getMaxRequestSize());\n+        resolver.setMaxUploadSizePerFile(multipartConfigElement.getMaxFileSize());\n+\n+        //lazy multipart parsing, throwing parse exceptions once the application attempts to obtain multipart files\n+        resolver.setResolveLazily(true);\n+\n+        return resolver;\n+    }\n+\n     /**\n      * Configuring view resolver\n      *\n\ndiff --git a/src/main/java/run/halo/app/core/ControllerExceptionHandler.java b/src/main/java/run/halo/app/core/ControllerExceptionHandler.java\n--- a/src/main/java/run/halo/app/core/ControllerExceptionHandler.java\n+++ b/src/main/java/run/halo/app/core/ControllerExceptionHandler.java\n@@ -13,6 +13,7 @@\n import org.springframework.web.bind.annotation.ExceptionHandler;\n import org.springframework.web.bind.annotation.ResponseStatus;\n import org.springframework.web.bind.annotation.RestControllerAdvice;\n+import org.springframework.web.multipart.MaxUploadSizeExceededException;\n import org.springframework.web.servlet.NoHandlerFoundException;\n import run.halo.app.exception.AbstractHaloException;\n import run.halo.app.model.support.BaseResponse;\n@@ -106,6 +107,15 @@ public BaseResponse<?> handleNoHandlerFoundException(NoHandlerFoundException e)\n         return baseResponse;\n     }\n \n+    @ExceptionHandler(MaxUploadSizeExceededException.class)\n+    @ResponseStatus(HttpStatus.BAD_REQUEST)\n+    public BaseResponse<?> handleUploadSizeExceededException(MaxUploadSizeExceededException e) {\n+        BaseResponse<Object> response = handleBaseException(e);\n+        response.setStatus(HttpStatus.BAD_REQUEST.value());\n+        response.setMessage(\"当前请求超出最大限制：\" + e.getMaxUploadSize() + \" bytes\");\n+        return response;\n+    }\n+\n     @ExceptionHandler(AbstractHaloException.class)\n     public ResponseEntity<BaseResponse<?>> handleHaloException(AbstractHaloException e) {\n         BaseResponse<Object> baseResponse = handleBaseException(e);",
    "output": "fix bug #1085 (#1122)\n\n* fix bug #1085\r\n\r\n* move exclude to Application class\r\n\r\n* enable multipart configuration\r\n\r\n* fixt multipart config error and catch MaxUploadSizeExceededException\r\n\r\n* fix checkstyle error\r\n\r\n* fix if not followed by whitespace\r\n\r\n* fix checkstyle error\r\n\r\n* modify multipart exception handling to  global exception handling\r\n\r\n* remove unnecessary catch\r\n\r\n* remove unnecessary catch"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/enums/converter/AbstractConverter.java b/src/main/java/run/halo/app/model/enums/converter/AbstractConverter.java\n--- a/src/main/java/run/halo/app/model/enums/converter/AbstractConverter.java\n+++ b/src/main/java/run/halo/app/model/enums/converter/AbstractConverter.java\n@@ -1,8 +1,11 @@\n package run.halo.app.model.enums.converter;\n \n import run.halo.app.model.enums.ValueEnum;\n+import run.halo.app.utils.ReflectionUtils;\n \n import javax.persistence.AttributeConverter;\n+import java.lang.reflect.Type;\n+import java.util.Objects;\n \n /**\n  * Abstract converter.\n@@ -16,8 +19,12 @@ public abstract class AbstractConverter<E extends ValueEnum<V>, V> implements At\n \n     private final Class<E> clazz;\n \n-    protected AbstractConverter(Class<E> clazz) {\n-        this.clazz = clazz;\n+    @SuppressWarnings(\"unchecked\")\n+    protected AbstractConverter() {\n+        Type enumType = Objects.requireNonNull(\n+                ReflectionUtils.getParameterizedTypeBySuperClass(AbstractConverter.class, this.getClass())\n+        ).getActualTypeArguments()[0];\n+        this.clazz = (Class<E>) enumType;\n     }\n \n     @Override\n\ndiff --git a/src/main/java/run/halo/app/model/enums/converter/AttachmentTypeConverter.java b/src/main/java/run/halo/app/model/enums/converter/AttachmentTypeConverter.java\n--- a/src/main/java/run/halo/app/model/enums/converter/AttachmentTypeConverter.java\n+++ b/src/main/java/run/halo/app/model/enums/converter/AttachmentTypeConverter.java\n@@ -13,7 +13,4 @@\n @Converter(autoApply = true)\n public class AttachmentTypeConverter extends AbstractConverter<AttachmentType, Integer> {\n \n-    public AttachmentTypeConverter() {\n-        super(AttachmentType.class);\n-    }\n }\n\ndiff --git a/src/main/java/run/halo/app/model/enums/converter/CommentStatusConverter.java b/src/main/java/run/halo/app/model/enums/converter/CommentStatusConverter.java\n--- a/src/main/java/run/halo/app/model/enums/converter/CommentStatusConverter.java\n+++ b/src/main/java/run/halo/app/model/enums/converter/CommentStatusConverter.java\n@@ -13,8 +13,4 @@\n @Converter(autoApply = true)\n public class CommentStatusConverter extends AbstractConverter<CommentStatus, Integer> {\n \n-    public CommentStatusConverter() {\n-        super(CommentStatus.class);\n-    }\n-\n }\n\ndiff --git a/src/main/java/run/halo/app/model/enums/converter/DataTypeConverter.java b/src/main/java/run/halo/app/model/enums/converter/DataTypeConverter.java\n--- a/src/main/java/run/halo/app/model/enums/converter/DataTypeConverter.java\n+++ b/src/main/java/run/halo/app/model/enums/converter/DataTypeConverter.java\n@@ -13,7 +13,4 @@\n @Converter(autoApply = true)\n public class DataTypeConverter extends AbstractConverter<DataType, Integer> {\n \n-    public DataTypeConverter() {\n-        super(DataType.class);\n-    }\n }\n\ndiff --git a/src/main/java/run/halo/app/model/enums/converter/LogTypeConverter.java b/src/main/java/run/halo/app/model/enums/converter/LogTypeConverter.java\n--- a/src/main/java/run/halo/app/model/enums/converter/LogTypeConverter.java\n+++ b/src/main/java/run/halo/app/model/enums/converter/LogTypeConverter.java\n@@ -13,7 +13,4 @@\n @Converter(autoApply = true)\n public class LogTypeConverter extends AbstractConverter<LogType, Integer> {\n \n-    public LogTypeConverter() {\n-        super(LogType.class);\n-    }\n }\n\ndiff --git a/src/main/java/run/halo/app/model/enums/converter/PostStatusConverter.java b/src/main/java/run/halo/app/model/enums/converter/PostStatusConverter.java\n--- a/src/main/java/run/halo/app/model/enums/converter/PostStatusConverter.java\n+++ b/src/main/java/run/halo/app/model/enums/converter/PostStatusConverter.java\n@@ -13,7 +13,4 @@\n @Converter(autoApply = true)\n public class PostStatusConverter extends AbstractConverter<PostStatus, Integer> {\n \n-    public PostStatusConverter() {\n-        super(PostStatus.class);\n-    }\n }\n\ndiff --git a/src/main/java/run/halo/app/model/enums/converter/PostTypeConverter.java b/src/main/java/run/halo/app/model/enums/converter/PostTypeConverter.java\n--- a/src/main/java/run/halo/app/model/enums/converter/PostTypeConverter.java\n+++ b/src/main/java/run/halo/app/model/enums/converter/PostTypeConverter.java\n@@ -14,7 +14,4 @@\n @Deprecated\n public class PostTypeConverter extends AbstractConverter<PostType, Integer> {\n \n-    public PostTypeConverter() {\n-        super(PostType.class);\n-    }\n }",
    "output": "Refactor AbstractConverter constructor (#1110)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/utils/HaloUtils.java b/src/main/java/run/halo/app/utils/HaloUtils.java\n--- a/src/main/java/run/halo/app/utils/HaloUtils.java\n+++ b/src/main/java/run/halo/app/utils/HaloUtils.java\n@@ -274,6 +274,9 @@ public static String getMachineIP() {\n      * @return text before cleaned\n      */\n     public static String cleanHtmlTag(String content) {\n-        return content.replaceAll(RE_HTML_MARK, \"\");\n+        if (StringUtils.isEmpty(content)) {\n+            return StringUtils.EMPTY;\n+        }\n+        return content.replaceAll(RE_HTML_MARK, StringUtils.EMPTY);\n     }\n }",
    "output": "fix: #1098 (#1099)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/handler/file/MinioFileHandler.java b/src/main/java/run/halo/app/handler/file/MinioFileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/MinioFileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/MinioFileHandler.java\n@@ -0,0 +1,131 @@\n+package run.halo.app.handler.file;\n+\n+import io.minio.MinioClient;\n+import io.minio.PutObjectArgs;\n+import io.minio.RemoveObjectArgs;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang3.StringUtils;\n+import org.jetbrains.annotations.NotNull;\n+import org.springframework.http.MediaType;\n+import org.springframework.stereotype.Component;\n+import org.springframework.util.Assert;\n+import org.springframework.web.multipart.MultipartFile;\n+import run.halo.app.exception.FileOperationException;\n+import run.halo.app.model.enums.AttachmentType;\n+import run.halo.app.model.properties.MinioProperties;\n+import run.halo.app.model.support.HaloConst;\n+import run.halo.app.model.support.UploadResult;\n+import run.halo.app.service.OptionService;\n+import run.halo.app.utils.FilenameUtils;\n+import run.halo.app.utils.ImageUtils;\n+\n+import javax.imageio.ImageReader;\n+import java.util.Objects;\n+\n+\n+/**\n+ * MinIO file handler.\n+ *\n+ * @author Wh1te\n+ * @date 2020-10-03\n+ */\n+@Slf4j\n+@Component\n+public class MinioFileHandler implements FileHandler {\n+\n+    private final OptionService optionService;\n+\n+    public MinioFileHandler(OptionService optionService) {\n+        this.optionService = optionService;\n+    }\n+\n+    @NotNull\n+    @Override\n+    public UploadResult upload(@NotNull MultipartFile file) {\n+        Assert.notNull(file, \"Multipart file must not be null\");\n+        // Get config\n+        String endpoint = optionService.getByPropertyOfNonNull(MinioProperties.ENDPOINT).toString();\n+        String accessKey = optionService.getByPropertyOfNonNull(MinioProperties.ACCESS_KEY).toString();\n+        String accessSecret = optionService.getByPropertyOfNonNull(MinioProperties.ACCESS_SECRET).toString();\n+        String bucketName = optionService.getByPropertyOfNonNull(MinioProperties.BUCKET_NAME).toString();\n+        String source = optionService.getByPropertyOrDefault(MinioProperties.SOURCE, String.class, \"\");\n+\n+        endpoint = StringUtils.appendIfMissing(endpoint, HaloConst.URL_SEPARATOR);\n+\n+        MinioClient minioClient = MinioClient.builder()\n+                .endpoint(endpoint)\n+                .credentials(accessKey, accessSecret)\n+                .build();\n+\n+        try {\n+            String basename = FilenameUtils.getBasename(Objects.requireNonNull(file.getOriginalFilename()));\n+            String extension = FilenameUtils.getExtension(file.getOriginalFilename());\n+            String timestamp = String.valueOf(System.currentTimeMillis());\n+            String upFilePath = StringUtils.join(StringUtils.isNotBlank(source) ? source + HaloConst.URL_SEPARATOR : \"\",\n+                    basename, \"_\", timestamp, \".\", extension);\n+            String filePath = StringUtils.join(endpoint, bucketName, HaloConst.URL_SEPARATOR, upFilePath);\n+\n+            PutObjectArgs putObjectArgs = PutObjectArgs.builder()\n+                    .contentType(file.getContentType())\n+                    .bucket(bucketName)\n+                    .stream(file.getInputStream(), file.getSize(), -1)\n+                    .object(upFilePath)\n+                    .build();\n+            minioClient.putObject(putObjectArgs);\n+\n+            UploadResult uploadResult = new UploadResult();\n+            uploadResult.setFilename(basename);\n+            uploadResult.setFilePath(filePath);\n+            uploadResult.setKey(upFilePath);\n+            uploadResult.setMediaType(MediaType.valueOf(Objects.requireNonNull(file.getContentType())));\n+            uploadResult.setSuffix(extension);\n+            uploadResult.setSize(file.getSize());\n+\n+            // Handle thumbnail\n+            if (FileHandler.isImageType(uploadResult.getMediaType())) {\n+                ImageReader image = ImageUtils.getImageReaderFromFile(file.getInputStream(), extension);\n+                assert image != null;\n+                uploadResult.setWidth(image.getWidth(0));\n+                uploadResult.setHeight(image.getHeight(0));\n+                uploadResult.setThumbPath(filePath);\n+            }\n+\n+            return uploadResult;\n+        } catch (Exception e) {\n+            log.error(\"upload file to MINIO failed\", e);\n+            throw new FileOperationException(\"上传附件 \" + file.getOriginalFilename() + \" 到 MinIO 失败 \", e).setErrorData(e.getMessage());\n+        }\n+    }\n+\n+    @Override\n+    public void delete(@NotNull String key) {\n+        Assert.notNull(key, \"File key must not be blank\");\n+\n+        String endPoint = optionService.getByPropertyOfNonNull(MinioProperties.ENDPOINT).toString();\n+        endPoint = StringUtils.appendIfMissing(endPoint, HaloConst.URL_SEPARATOR);\n+\n+        String accessKey = optionService.getByPropertyOfNonNull(MinioProperties.ACCESS_KEY).toString();\n+        String accessSecret = optionService.getByPropertyOfNonNull(MinioProperties.ACCESS_SECRET).toString();\n+        String bucketName = optionService.getByPropertyOfNonNull(MinioProperties.BUCKET_NAME).toString();\n+\n+        MinioClient minioClient = MinioClient.builder()\n+                .endpoint(endPoint)\n+                .credentials(accessKey, accessSecret)\n+                .build();\n+\n+        try {\n+            minioClient.removeObject(RemoveObjectArgs.builder()\n+                    .bucket(bucketName)\n+                    .object(key)\n+                    .build());\n+        } catch (Exception e) {\n+            log.error(\"delete MINIO file: [{}] failed\", key, e);\n+            throw new FileOperationException(\"附件 \" + key + \" 从 MinIO 删除失败\", e).setErrorData(e.getMessage());\n+        }\n+    }\n+\n+    @Override\n+    public AttachmentType getAttachmentType() {\n+        return AttachmentType.MINIO;\n+    }\n+}\n\ndiff --git a/src/main/java/run/halo/app/model/enums/AttachmentType.java b/src/main/java/run/halo/app/model/enums/AttachmentType.java\n--- a/src/main/java/run/halo/app/model/enums/AttachmentType.java\n+++ b/src/main/java/run/halo/app/model/enums/AttachmentType.java\n@@ -46,7 +46,12 @@ public enum AttachmentType implements ValueEnum<Integer> {\n     /**\n      * 华为云\n      */\n-    HUAWEIOBS(7);\n+    HUAWEIOBS(7),\n+\n+    /**\n+     * MINIO\n+     */\n+    MINIO(8);\n \n     private final Integer value;\n \n\ndiff --git a/src/main/java/run/halo/app/model/properties/MinioProperties.java b/src/main/java/run/halo/app/model/properties/MinioProperties.java\n--- a/src/main/java/run/halo/app/model/properties/MinioProperties.java\n+++ b/src/main/java/run/halo/app/model/properties/MinioProperties.java\n@@ -0,0 +1,66 @@\n+package run.halo.app.model.properties;\n+\n+/**\n+ * Minio properties.\n+ *\n+ * @author Wh1te\n+ * @date 2020-10-03\n+ */\n+public enum MinioProperties implements PropertyEnum {\n+\n+    /**\n+     * Minio endpoint.\n+     */\n+    ENDPOINT(\"minio_endpoint\", String.class, \"\"),\n+\n+    /**\n+     * Minio bucket name.\n+     */\n+    BUCKET_NAME(\"minio_bucket_name\", String.class, \"\"),\n+\n+    /**\n+     * Minio access key.\n+     */\n+    ACCESS_KEY(\"minio_access_key\", String.class, \"\"),\n+\n+    /**\n+     * Minio access secret.\n+     */\n+    ACCESS_SECRET(\"minio_access_secret\", String.class, \"\"),\n+\n+    /**\n+     * Minio source\n+     */\n+    SOURCE(\"minio_source\", String.class, \"\");\n+\n+    private final String value;\n+\n+    private final Class<?> type;\n+\n+    private final String defaultValue;\n+\n+    MinioProperties(String value, Class<?> type, String defaultValue) {\n+        this.defaultValue = defaultValue;\n+        if (!PropertyEnum.isSupportedType(type)) {\n+            throw new IllegalArgumentException(\"Unsupported blog property type: \" + type);\n+        }\n+\n+        this.value = value;\n+        this.type = type;\n+    }\n+\n+    @Override\n+    public Class<?> getType() {\n+        return type;\n+    }\n+\n+    @Override\n+    public String defaultValue() {\n+        return defaultValue;\n+    }\n+\n+    @Override\n+    public String getValue() {\n+        return value;\n+    }\n+}",
    "output": "feat: add MinIO support for attachment management. #1024 (#1097)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/core/CommonController.java b/src/main/java/run/halo/app/controller/core/CommonController.java\n--- a/src/main/java/run/halo/app/controller/core/CommonController.java\n+++ b/src/main/java/run/halo/app/controller/core/CommonController.java\n@@ -83,7 +83,6 @@ public String handleError(HttpServletRequest request, HttpServletResponse respon\n         model.addAttribute(\"error\", errorDetail);\n         model.addAttribute(\"meta_keywords\", optionService.getSeoKeywords());\n         model.addAttribute(\"meta_description\", optionService.getSeoDescription());\n-        model.addAttribute(\"message\", HttpStatus.valueOf(optionService.getSeoKeywords()).value());\n         log.debug(\"Error detail: [{}]\", errorDetail);\n \n         HttpStatus status = getStatus(request);",
    "output": "fix: #1082 (#1083)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n@@ -547,7 +547,10 @@ public ThemeProperty fetchRelease(@NonNull String uri, @NonNull String tagName)\n \n             downloadZipAndUnzip(zipUrl, themeTmpPath);\n \n-            return add(themeTmpPath);\n+            // find root theme folder\n+            Path themeRootPath = getThemeRootPath(themeTmpPath);\n+            log.debug(\"Got theme root path: [{}]\", themeRootPath);\n+            return add(themeRootPath);\n         } catch (IOException e) {\n             throw new ServiceException(\"主题拉取失败 \" + uri, e);\n         } finally {\n@@ -610,7 +613,7 @@ public List<ThemeProperty> fetchReleases(@NonNull String uri) {\n         List<ThemeProperty> themeProperties = new ArrayList<>();\n \n         if (releases == null) {\n-            throw new ServiceException(\"主题拉取失败\");\n+            throw new ServiceException(\"主题拉取失败！可能原因：当前服务器无法链接到对方服务器或连接超时。\");\n         }\n \n         releases.forEach(tagName -> {\n\ndiff --git a/src/main/java/run/halo/app/utils/FileUtils.java b/src/main/java/run/halo/app/utils/FileUtils.java\n--- a/src/main/java/run/halo/app/utils/FileUtils.java\n+++ b/src/main/java/run/halo/app/utils/FileUtils.java\n@@ -10,6 +10,7 @@\n import java.io.*;\n import java.nio.file.*;\n import java.nio.file.attribute.BasicFileAttributes;\n+import java.util.Arrays;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Optional;\n@@ -29,6 +30,11 @@\n @Slf4j\n public class FileUtils {\n \n+    /**\n+     * Ignored folders while finding root path.\n+     */\n+    private static final List<String> IGNORED_FOLDERS = Arrays.asList(\".git\");\n+\n     private FileUtils() {\n     }\n \n@@ -256,7 +262,12 @@ public static Optional<Path> findRootPath(@NonNull final Path path, @Nullable fi\n                     return Optional.of(rootPath);\n                 }\n                 // add all folder into queue\n-                subFolders.forEach(queue::push);\n+                subFolders.forEach(e -> {\n+                    // if\n+                    if (!IGNORED_FOLDERS.contains(e.getFileName().toString())) {\n+                        queue.push(e);\n+                    }\n+                });\n             }\n         }\n         // if tests are failed completely\n\ndiff --git a/src/main/java/run/halo/app/utils/GithubUtils.java b/src/main/java/run/halo/app/utils/GithubUtils.java\n--- a/src/main/java/run/halo/app/utils/GithubUtils.java\n+++ b/src/main/java/run/halo/app/utils/GithubUtils.java\n@@ -146,7 +146,7 @@ private static class GithubRelease implements Runnable {\n         private HashMap<String, Object> result;\n \n         public GithubRelease(String repoUrl, String tagName) {\n-            this.repoUrl = repoUrl;\n+            this.repoUrl = StringUtils.removeEndIgnoreCase(repoUrl, \".git\");\n             this.tagName = tagName;\n             result = null;\n         }\n@@ -206,8 +206,7 @@ private static class GithubReleases implements Runnable {\n         private List<String> result;\n \n         public GithubReleases(String repoUrl) {\n-            this.repoUrl = repoUrl;\n-            result = null;\n+            this.repoUrl = StringUtils.removeEndIgnoreCase(repoUrl, \".git\");\n         }\n \n         @Override\n@@ -261,7 +260,7 @@ private static class GithubLatestRelease implements Runnable {\n         private HashMap<String, Object> result;\n \n         public GithubLatestRelease(String repoUrl) {\n-            this.repoUrl = repoUrl;\n+            this.repoUrl = StringUtils.removeEndIgnoreCase(repoUrl, \".git\");\n             result = null;\n         }\n \n@@ -323,7 +322,7 @@ private static class GithubFile implements Runnable {\n         private String result;\n \n         public GithubFile(String repoUrl, String branch) {\n-            this.repoUrl = repoUrl;\n+            this.repoUrl = StringUtils.removeEndIgnoreCase(repoUrl, \".git\");\n             this.branch = branch;\n             result = null;\n         }\n\ndiff --git a/src/test/java/run/halo/app/utils/FileUtilsTest.java b/src/test/java/run/halo/app/utils/FileUtilsTest.java\n--- a/src/test/java/run/halo/app/utils/FileUtilsTest.java\n+++ b/src/test/java/run/halo/app/utils/FileUtilsTest.java\n@@ -203,13 +203,53 @@ void findRootPathTest() throws IOException {\n         // folder2\n         //   file2\n         //   folder3\n+        //     expected_file\n+        // expected: folder2\n+        tempDirectory = Files.createTempDirectory(\"halo-test\");\n+\n+        log.info(\"Preparing test folder structure\");\n+        Path folder1 = tempDirectory.resolve(\"folder1\");\n+        Files.createDirectory(folder1);\n+        Path file1 = tempDirectory.resolve(\"file1\");\n+        Files.createFile(file1);\n+        Path folder2 = tempDirectory.resolve(\"folder2\");\n+        Files.createDirectory(folder2);\n+        Path file2 = folder2.resolve(\"file2\");\n+        Files.createFile(file2);\n+        Path folder3 = folder2.resolve(\"folder3\");\n+        Files.createDirectory(folder3);\n+        Path expectedFile = folder3.resolve(\"expected_file\");\n+        Files.createFile(expectedFile);\n+        log.info(\"Prepared test folder structure\");\n+\n+        // find the root folder where expected file locates, and we expect folder3\n+        Optional<Path> rootPath = FileUtils.findRootPath(tempDirectory, path -> path.getFileName().toString().equals(\"expected_file\"));\n+        assertTrue(rootPath.isPresent());\n+        assertEquals(folder3.toString(), rootPath.get().toString());\n+    }\n+\n+\n+    @Test\n+    void findRootPathIgnoreTest() throws IOException {\n+        // build folder structure\n+        // folder1\n+        // .git\n+        //   expected_file\n+        // file1\n+        // folder2\n+        //   file2\n+        //   folder3\n         //     file3\n         // expected: folder2\n         tempDirectory = Files.createTempDirectory(\"halo-test\");\n \n         log.info(\"Preparing test folder structure\");\n         Path folder1 = tempDirectory.resolve(\"folder1\");\n         Files.createDirectory(folder1);\n+        Path dotGit = tempDirectory.resolve(\".git\");\n+        Files.createDirectory(dotGit);\n+        Path expectedFile = dotGit.resolve(\"expected_file\");\n+        Files.createFile(expectedFile);\n         Path file1 = tempDirectory.resolve(\"file1\");\n         Files.createFile(file1);\n         Path folder2 = tempDirectory.resolve(\"folder2\");\n@@ -223,8 +263,7 @@ void findRootPathTest() throws IOException {\n         log.info(\"Prepared test folder structure\");\n \n         // find the root folder where file3 locates, and we expect folder3\n-        Optional<Path> rootPath = FileUtils.findRootPath(tempDirectory, path -> path.getFileName().toString().equals(\"file3\"));\n-        assertTrue(rootPath.isPresent());\n-        assertEquals(folder3.toString(), rootPath.get().toString());\n+        Optional<Path> rootPath = FileUtils.findRootPath(tempDirectory, path -> path.getFileName().toString().equals(\"expected_file\"));\n+        assertFalse(rootPath.isPresent());\n     }\n }\n\\ No newline at end of file",
    "output": "Fix handling root theme folder unexpectedly (#1081)\n\n* Fix handling root theme folder unexpectedly\r\n\r\n* Ignore .git folder while finding root path"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/cache/HazelcastStore.java b/src/main/java/run/halo/app/cache/HazelcastStore.java\n--- a/src/main/java/run/halo/app/cache/HazelcastStore.java\n+++ b/src/main/java/run/halo/app/cache/HazelcastStore.java\n@@ -1,130 +0,0 @@\n-package run.halo.app.cache;\n-\n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.hazelcast.client.HazelcastClient;\n-import com.hazelcast.client.config.ClientConfig;\n-import com.hazelcast.client.config.ClientConnectionStrategyConfig;\n-import com.hazelcast.client.config.ClientNetworkConfig;\n-import com.hazelcast.client.config.ConnectionRetryConfig;\n-import com.hazelcast.config.GroupConfig;\n-import com.hazelcast.core.HazelcastInstance;\n-import com.hazelcast.core.IMap;\n-import lombok.extern.slf4j.Slf4j;\n-import org.apache.commons.lang3.StringUtils;\n-import org.springframework.util.Assert;\n-import run.halo.app.config.properties.HaloProperties;\n-import run.halo.app.utils.JsonUtils;\n-\n-import javax.annotation.PostConstruct;\n-import java.util.Date;\n-import java.util.List;\n-import java.util.Optional;\n-import java.util.concurrent.TimeUnit;\n-\n-/**\n- * hazelcast cache store\n- * Create by turgay can on 2020/08/27 10:28\n- */\n-@Slf4j\n-public class HazelcastStore extends AbstractStringCacheStore {\n-\n-    private static final int ONE_SECOND_AS_MILLIS = 1000;\n-    private static final String DEFAULT_MAP = \"haloMap\";\n-\n-    private HazelcastInstance hazelcastInstance;\n-\n-    public HazelcastStore(HaloProperties haloProperties) {\n-        super.haloProperties = haloProperties;\n-    }\n-\n-    @PostConstruct\n-    public void init() {\n-        if (hazelcastInstance != null) {\n-            return;\n-        }\n-        try {\n-            final ClientConfig config = new ClientConfig();\n-            final GroupConfig groupConfig = config.getGroupConfig();\n-            final String hazelcastGroupName = haloProperties.getHazelcastGroupName();\n-            groupConfig.setName(hazelcastGroupName);\n-\n-            final ClientNetworkConfig network = config.getNetworkConfig();\n-            final List<String> hazelcastMembers = haloProperties.getHazelcastMembers();\n-            network.setAddresses(hazelcastMembers);\n-\n-            configureClientRetryPolicy(config);\n-\n-            log.info(\"Hazelcast client instance starting::GroupName={}::Members={}\", hazelcastGroupName, hazelcastMembers);\n-            this.hazelcastInstance = HazelcastClient.newHazelcastClient(config);\n-            log.info(\"Hazelcast client instance started\");\n-        } catch (Exception ex) {\n-            log.error(\"init hazelcast error \", ex);\n-        }\n-    }\n-\n-    private void configureClientRetryPolicy(ClientConfig config) {\n-        ConnectionRetryConfig retryConfig = new ConnectionRetryConfig();\n-        retryConfig.setEnabled(true);\n-        retryConfig.setInitialBackoffMillis(haloProperties.getInitialBackoffSeconds() * ONE_SECOND_AS_MILLIS);\n-\n-        config.getConnectionStrategyConfig()\n-                .setReconnectMode(ClientConnectionStrategyConfig.ReconnectMode.ON)\n-                .setConnectionRetryConfig(retryConfig);\n-    }\n-\n-    @Override\n-    Optional<CacheWrapper<String>> getInternal(String key) {\n-        Assert.hasText(key, \"Cache key must not be blank\");\n-        final IMap<String, String> defaultHaloMap = getDefaultStringMap();\n-        final String v = defaultHaloMap.get(key);\n-        return StringUtils.isBlank(v) ? Optional.empty() : jsonToCacheWrapper(v);\n-    }\n-\n-    @Override\n-    void putInternal(String key, CacheWrapper<String> cacheWrapper) {\n-        putInternalIfAbsent(key, cacheWrapper);\n-        try {\n-            getDefaultStringMap().set(key, JsonUtils.objectToJson(cacheWrapper));\n-            Date ttl = cacheWrapper.getExpireAt();\n-            if (ttl != null) {\n-                getDefaultStringMap().setTtl(key, ttl.getTime(), TimeUnit.MILLISECONDS);\n-            }\n-        } catch (Exception e) {\n-            log.warn(\"Put cache fail json2object key: [{}] value:[{}]\", key, cacheWrapper);\n-        }\n-    }\n-\n-    @Override\n-    Boolean putInternalIfAbsent(String key, CacheWrapper<String> cacheWrapper) {\n-        Assert.hasText(key, \"Cache key must not be blank\");\n-        Assert.notNull(cacheWrapper, \"Cache wrapper must not be null\");\n-        try {\n-            final IMap<String, String> defaultHaloMap = getDefaultStringMap();\n-            if (defaultHaloMap.containsKey(key)) {\n-                log.warn(\"Failed to put the cache, because the key: [{}] has been present already\", key);\n-                return false;\n-            }\n-            Date ttl = cacheWrapper.getExpireAt();\n-            if (ttl != null) {\n-                defaultHaloMap.set(key, JsonUtils.objectToJson(cacheWrapper), ttl.getTime(), TimeUnit.MILLISECONDS);\n-            }\n-            return true;\n-        } catch (JsonProcessingException e) {\n-            log.warn(\"Put cache fail json2object key: [{}] value:[{}]\", key, cacheWrapper);\n-        }\n-        log.debug(\"Cache key: [{}], original cache wrapper: [{}]\", key, cacheWrapper);\n-        return false;\n-    }\n-\n-    @Override\n-    public void delete(String key) {\n-        Assert.hasText(key, \"Cache key must not be blank\");\n-        final IMap<String, String> defaultHaloMap = getDefaultStringMap();\n-        defaultHaloMap.delete(key);\n-        log.debug(\"Removed key: [{}]\", key);\n-    }\n-\n-    private IMap<String, String> getDefaultStringMap() {\n-        return hazelcastInstance.getMap(DEFAULT_MAP);\n-    }\n-}\n\ndiff --git a/src/main/java/run/halo/app/config/HaloConfiguration.java b/src/main/java/run/halo/app/config/HaloConfiguration.java\n--- a/src/main/java/run/halo/app/config/HaloConfiguration.java\n+++ b/src/main/java/run/halo/app/config/HaloConfiguration.java\n@@ -58,9 +58,6 @@ public AbstractStringCacheStore stringCacheStore() {\n             case \"redis\":\n                 stringCacheStore = new RedisCacheStore(this.haloProperties);\n                 break;\n-            case \"hazelcast\":\n-                stringCacheStore = new HazelcastStore(this.haloProperties);\n-                break;\n             case \"memory\":\n             default:\n                 //memory or default\n\ndiff --git a/src/test/java/run/halo/app/cache/HazelcastStoreTest.java b/src/test/java/run/halo/app/cache/HazelcastStoreTest.java\n--- a/src/test/java/run/halo/app/cache/HazelcastStoreTest.java\n+++ b/src/test/java/run/halo/app/cache/HazelcastStoreTest.java\n@@ -1,68 +0,0 @@\n-package run.halo.app.cache;\n-\n-import cn.hutool.core.date.DateTime;\n-import cn.hutool.core.date.DateUtil;\n-import com.hazelcast.core.HazelcastInstance;\n-import com.hazelcast.core.IMap;\n-import org.apache.commons.lang3.time.DateUtils;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Disabled;\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.extension.ExtendWith;\n-import org.mockito.InjectMocks;\n-import org.mockito.Mock;\n-import org.mockito.junit.jupiter.MockitoExtension;\n-\n-import java.util.Date;\n-import java.util.Optional;\n-\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.mockito.Mockito.when;\n-\n-@Disabled(\"Due to project test run exclusion\")\n-@ExtendWith(MockitoExtension.class)\n-class HazelcastStoreTest {\n-\n-    @InjectMocks\n-    private HazelcastStore hazelcastStore;\n-\n-    @Mock\n-    private HazelcastInstance hazelcastInstance;\n-\n-    private IMap<Object, Object> haloMap;\n-\n-    @BeforeEach\n-    public void initEach() {\n-        haloMap = hazelcastInstance.getMap(\"haloMap\");\n-    }\n-\n-    @Test\n-    void should_getInternal_For_Key1() {\n-        final DateTime createAt = DateUtil.date();\n-        final Date expireAt = DateUtils.addMinutes(createAt, 5);\n-        final String value = \"{ \\\"data\\\": {\\\"name\\\": \\\"halo\\\"}, \\\"expireAt\\\": \\\"\" + expireAt + \"\\\", \\\"createAt\\\": \\\"\" + createAt + \"\\\"  }\";\n-        when(haloMap.get(\"key1\")).thenReturn(value);\n-\n-        final Optional<CacheWrapper<String>> optionalWrapperValue1 = hazelcastStore.getInternal(\"key1\");\n-\n-        final CacheWrapper<String> wrapperValue1 = optionalWrapperValue1.get();\n-        assertNotNull(optionalWrapperValue1);\n-\n-        assertEquals(\"{\\\"name\\\": \\\"halo\\\"}\", wrapperValue1.getData());\n-        assertEquals(DateUtil.formatDate(createAt), DateUtil.formatDate(wrapperValue1.getCreateAt()));\n-        assertEquals(DateUtil.formatDate(expireAt), DateUtil.formatDate(wrapperValue1.getExpireAt()));\n-    }\n-\n-    @Test\n-    void putInternal() {\n-    }\n-\n-    @Test\n-    void putInternalIfAbsent() {\n-    }\n-\n-    @Test\n-    void delete() {\n-    }\n-}",
    "output": "chore: remove hazelcast cache store. (#1076)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/ThemeController.java b/src/main/java/run/halo/app/controller/admin/api/ThemeController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/ThemeController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/ThemeController.java\n@@ -5,6 +5,7 @@\n import org.springframework.web.bind.annotation.*;\n import org.springframework.web.multipart.MultipartFile;\n import run.halo.app.annotation.DisableOnCondition;\n+import run.halo.app.cache.lock.CacheLock;\n import run.halo.app.handler.theme.config.support.Group;\n import run.halo.app.handler.theme.config.support.ThemeProperty;\n import run.halo.app.model.params.ThemeContentParam;\n@@ -144,6 +145,7 @@ public void saveSettingsBy(@RequestBody Map<String, Object> settings) {\n \n     @PostMapping(\"{themeId}/settings\")\n     @ApiOperation(\"Saves theme settings\")\n+    @CacheLock(prefix = \"save_theme_setting_by_themeId\")\n     public void saveSettingsBy(@PathVariable(\"themeId\") String themeId,\n             @RequestBody Map<String, Object> settings) {\n         themeSettingService.save(settings, themeId);\n\ndiff --git a/src/main/java/run/halo/app/service/impl/ThemeSettingServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeSettingServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeSettingServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeSettingServiceImpl.java\n@@ -4,6 +4,7 @@\n import freemarker.template.TemplateModelException;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.lang3.StringUtils;\n+import org.springframework.data.domain.Example;\n import org.springframework.lang.NonNull;\n import org.springframework.stereotype.Service;\n import org.springframework.transaction.annotation.Transactional;\n@@ -87,7 +88,10 @@ public ThemeSetting save(String key, String value, String themeId) {\n                     log.debug(\"Creating theme setting: [{}]\", setting);\n                     return setting;\n                 });\n-\n+        // Determine whether the data already exists\n+        if (themeSettingRepository.findOne(Example.of(themeSetting)).isPresent()) {\n+            return null;\n+        }\n         // Save the theme setting\n         return themeSettingRepository.save(themeSetting);\n     }",
    "output": "fix: #1068 (#1070)\n\n* fix: #1068\r\n\r\n* add: ThemeSettingService.save add SERIALIZABLE level\r\n\r\n* add: saveSettingsByThemeId Api add @CacheLock"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/AdminController.java b/src/main/java/run/halo/app/controller/admin/api/AdminController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/AdminController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/AdminController.java\n@@ -6,7 +6,6 @@\n import org.springframework.web.bind.annotation.*;\n import run.halo.app.annotation.DisableOnCondition;\n import run.halo.app.cache.lock.CacheLock;\n-import run.halo.app.exception.BadRequestException;\n import run.halo.app.model.dto.EnvironmentDTO;\n import run.halo.app.model.dto.LoginPreCheckDTO;\n import run.halo.app.model.dto.StatisticDTO;\n@@ -114,28 +113,6 @@ public void updateAdmin() {\n         adminService.updateAdminAssets();\n     }\n \n-    @GetMapping(\"spring/application.yaml\")\n-    @ApiOperation(\"Gets application config content\")\n-    @DisableOnCondition\n-    public BaseResponse<String> getSpringApplicationConfig() {\n-        return BaseResponse.ok(HttpStatus.OK.getReasonPhrase(), adminService.getApplicationConfig());\n-    }\n-\n-    @PutMapping(\"spring/application.yaml\")\n-    @ApiOperation(\"Updates application config content\")\n-    @DisableOnCondition\n-    public void updateSpringApplicationConfig(@RequestParam(name = \"content\") String content) {\n-        adminService.updateApplicationConfig(content);\n-    }\n-\n-    @PostMapping(value = {\"halo/restart\", \"spring/restart\"})\n-    @ApiOperation(\"Restarts halo server\")\n-    @DisableOnCondition\n-    @Deprecated\n-    public void restartApplication() {\n-        throw new BadRequestException(\"此前的重启方案存在性能问题，故暂不支持重启功能！\");\n-    }\n-\n     @GetMapping(value = \"halo/logfile\")\n     @ApiOperation(\"Gets halo log file content\")\n     @DisableOnCondition\n\ndiff --git a/src/main/java/run/halo/app/service/AdminService.java b/src/main/java/run/halo/app/service/AdminService.java\n--- a/src/main/java/run/halo/app/service/AdminService.java\n+++ b/src/main/java/run/halo/app/service/AdminService.java\n@@ -25,8 +25,6 @@ public interface AdminService {\n \n     int REFRESH_TOKEN_EXPIRED_DAYS = 30;\n \n-    String APPLICATION_CONFIG_NAME = \"application.yaml\";\n-\n     String LOG_PATH = \"logs/spring.log\";\n \n     /**\n@@ -97,20 +95,6 @@ public interface AdminService {\n      */\n     void updateAdminAssets();\n \n-    /**\n-     * Get application.yaml content.\n-     *\n-     * @return application.yaml content\n-     */\n-    String getApplicationConfig();\n-\n-    /**\n-     * Save application.yaml content.\n-     *\n-     * @param content new content\n-     */\n-    void updateApplicationConfig(@NonNull String content);\n-\n     /**\n      * Get halo logs content.\n      *\n\ndiff --git a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n@@ -1,6 +1,5 @@\n package run.halo.app.service.impl;\n \n-import cn.hutool.core.io.file.FileReader;\n import cn.hutool.core.lang.Validator;\n import cn.hutool.core.util.RandomUtil;\n import cn.hutool.core.util.StrUtil;\n@@ -45,7 +44,6 @@\n import java.io.RandomAccessFile;\n import java.lang.management.ManagementFactory;\n import java.nio.charset.StandardCharsets;\n-import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n import java.util.ArrayList;\n@@ -460,28 +458,6 @@ private AuthToken buildAuthToken(@NonNull User user) {\n         return token;\n     }\n \n-    @Override\n-    public String getApplicationConfig() {\n-        File file = new File(haloProperties.getWorkDir(), APPLICATION_CONFIG_NAME);\n-        if (!file.exists()) {\n-            return StringUtils.EMPTY;\n-        }\n-        FileReader reader = new FileReader(file);\n-        return reader.readString();\n-    }\n-\n-    @Override\n-    public void updateApplicationConfig(@NonNull String content) {\n-        Assert.notNull(content, \"Content must not be null\");\n-\n-        Path path = Paths.get(haloProperties.getWorkDir(), APPLICATION_CONFIG_NAME);\n-        try {\n-            Files.write(path, content.getBytes(StandardCharsets.UTF_8));\n-        } catch (IOException e) {\n-            throw new ServiceException(\"保存配置文件失败\", e);\n-        }\n-    }\n-\n     @Override\n     public String getLogFiles(@NonNull Long lines) {\n         Assert.notNull(lines, \"Lines must not be null\");",
    "output": "feat: #1065 (#1066)\n\n* feat: #1065\r\n\r\n* feat: #1065"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/InstallController.java b/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n@@ -198,7 +198,7 @@ private PostDetailVO createDefaultPostIfAbsent(@Nullable Category category) {\n                 \"\\n\" +\n                 \"- 官网：[https://halo.run](https://halo.run)\\n\" +\n                 \"- 社区：[https://bbs.halo.run](https://bbs.halo.run)\\n\" +\n-                \"- 主题仓库：[https://halo.run/s/themes](https://halo.run/s/themes)\\n\" +\n+                \"- 主题仓库：[https://halo.run/p/themes.html](https://halo.run/p/themes.html)\\n\" +\n                 \"- 开源地址：[https://github.com/halo-dev/halo](https://github.com/halo-dev/halo)\\n\" +\n                 \"\\n\" +\n                 \"在使用过程中，有任何问题都可以通过以上链接找寻答案，或者联系我们。\\n\" +",
    "output": "typo: change theme repos url. (#1041)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/utils/Version.java b/src/main/java/run/halo/app/utils/Version.java\n--- a/src/main/java/run/halo/app/utils/Version.java\n+++ b/src/main/java/run/halo/app/utils/Version.java\n@@ -47,6 +47,11 @@ public class Version implements Comparable<Version> {\n      */\n     private static final Version EMPTY_VERSION = new Version(0, 0, 0);\n \n+    /**\n+     * Maximum version.\n+     */\n+    private static final Version MAXIMUM_VERSION = new Version(Long.MAX_VALUE, Long.MAX_VALUE, Long.MAX_VALUE);\n+\n     /**\n      * Major number.\n      */\n@@ -128,7 +133,7 @@ public static Optional<Version> resolve(@Nullable String version) {\n         }\n         // handle unknown version\n         if (StringUtils.equalsIgnoreCase(version, HaloConst.UNKNOWN_VERSION)) {\n-            return Optional.of(new Version());\n+            return Optional.of(MAXIMUM_VERSION);\n         }\n         // get matcher for version\n         Matcher matcher = PATTERN.matcher(version);\n\ndiff --git a/src/main/java/run/halo/app/utils/VersionUtil.java b/src/main/java/run/halo/app/utils/VersionUtil.java\n--- a/src/main/java/run/halo/app/utils/VersionUtil.java\n+++ b/src/main/java/run/halo/app/utils/VersionUtil.java\n@@ -1,11 +1,6 @@\n package run.halo.app.utils;\n \n import lombok.extern.slf4j.Slf4j;\n-import org.springframework.util.Assert;\n-import run.halo.app.model.support.HaloConst;\n-\n-import java.util.Objects;\n-import java.util.StringTokenizer;\n \n /**\n  * Version utility.\n@@ -16,85 +11,11 @@\n  * @date 2020-08-03\n  */\n @Slf4j\n-public class VersionUtil {\n-\n-    private static final String UNDERLINE = \"_\";\n+public final class VersionUtil {\n \n     private VersionUtil() {\n     }\n \n-    @Deprecated\n-    public static int[] getCanonicalVersion(String version) {\n-        Assert.hasText(version, \"Version must not be blank\");\n-\n-        if (Objects.equals(version, HaloConst.UNKNOWN_VERSION)) {\n-            log.warn(\"Unknown version will be converted to {}.{}.{}.{}\",\n-                    Integer.MAX_VALUE,\n-                    Integer.MAX_VALUE,\n-                    Integer.MAX_VALUE,\n-                    Integer.MAX_VALUE);\n-            return new int[] {Integer.MAX_VALUE,\n-                    Integer.MAX_VALUE,\n-                    Integer.MAX_VALUE,\n-                    Integer.MAX_VALUE};\n-        }\n-\n-        int[] canonicalVersion = new int[] {1, 1, 0, 0};\n-        StringTokenizer tokenizer = new StringTokenizer(version, \".\");\n-        String token = tokenizer.nextToken();\n-        canonicalVersion[0] = Integer.parseInt(token);\n-        token = tokenizer.nextToken();\n-        StringTokenizer subTokenizer;\n-        if (!token.contains(UNDERLINE)) {\n-            canonicalVersion[1] = Integer.parseInt(token);\n-        } else {\n-            subTokenizer = new StringTokenizer(token, UNDERLINE);\n-            canonicalVersion[1] = Integer.parseInt(subTokenizer.nextToken());\n-            canonicalVersion[3] = Integer.parseInt(subTokenizer.nextToken());\n-        }\n-\n-        if (tokenizer.hasMoreTokens()) {\n-            token = tokenizer.nextToken();\n-            if (!token.contains(UNDERLINE)) {\n-                canonicalVersion[2] = Integer.parseInt(token);\n-                if (tokenizer.hasMoreTokens()) {\n-                    canonicalVersion[3] = Integer.parseInt(tokenizer.nextToken());\n-                }\n-            } else {\n-                subTokenizer = new StringTokenizer(token, UNDERLINE);\n-                canonicalVersion[2] = Integer.parseInt(subTokenizer.nextToken());\n-                canonicalVersion[3] = Integer.parseInt(subTokenizer.nextToken());\n-            }\n-        }\n-\n-        return canonicalVersion;\n-    }\n-\n-    @Deprecated\n-    public static int compare(String version1, String version2) {\n-        log.debug(\"Comparing version [{}] with [{}]\", version1, version2);\n-\n-        int[] canonicalVersion1 = getCanonicalVersion(version1);\n-        int[] canonicalVersion2 = getCanonicalVersion(version2);\n-        if (canonicalVersion1[0] < canonicalVersion2[0]) {\n-            return -1;\n-        } else if (canonicalVersion1[0] > canonicalVersion2[0]) {\n-            return 1;\n-        } else if (canonicalVersion1[1] < canonicalVersion2[1]) {\n-            return -1;\n-        } else if (canonicalVersion1[1] > canonicalVersion2[1]) {\n-            return 1;\n-        } else if (canonicalVersion1[2] < canonicalVersion2[2]) {\n-            return -1;\n-        } else if (canonicalVersion1[2] > canonicalVersion2[2]) {\n-            return 1;\n-        } else if (canonicalVersion1[3] < canonicalVersion2[3]) {\n-            return -1;\n-        } else {\n-            return canonicalVersion1[3] > canonicalVersion2[3] ? 1 : 0;\n-        }\n-    }\n-\n     /**\n      * Compare version.\n      *\n\ndiff --git a/src/test/java/run/halo/app/utils/VersionUtilTest.java b/src/test/java/run/halo/app/utils/VersionUtilTest.java\n--- a/src/test/java/run/halo/app/utils/VersionUtilTest.java\n+++ b/src/test/java/run/halo/app/utils/VersionUtilTest.java\n@@ -4,7 +4,8 @@\n import org.junit.jupiter.api.Test;\n import run.halo.app.model.support.HaloConst;\n \n-import static org.junit.jupiter.api.Assertions.*;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n /**\n  * @author ryanwang\n@@ -29,17 +30,7 @@ void unknownVersionCompareTest() {\n                 RandomStringUtils.randomNumeric(1),\n                 RandomStringUtils.randomNumeric(2),\n                 RandomStringUtils.randomNumeric(3));\n-        assertFalse(VersionUtil.compareVersion(HaloConst.UNKNOWN_VERSION, randomVersion));\n+        assertTrue(VersionUtil.compareVersion(HaloConst.UNKNOWN_VERSION, randomVersion));\n     }\n \n-    @Test\n-    void unknownOrEmptyCanonicalVersionTest() {\n-        assertThrows(IllegalArgumentException.class, () -> VersionUtil.getCanonicalVersion(null));\n-        int[] version = VersionUtil.getCanonicalVersion(HaloConst.UNKNOWN_VERSION);\n-        assertNotNull(version);\n-        assertEquals(4, version.length);\n-        for (int v : version) {\n-            assertEquals(Integer.MAX_VALUE, v);\n-        }\n-    }\n }\n\\ No newline at end of file",
    "output": "Fix an error about version comparision in development environment (#1039)\n\n* Let unknown version as maximum version\r\n\r\n* Fix VersionUtilTest error\r\n\r\n* Remove deprecated version comparision method and related test"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/exception/ImageFormatException.java b/src/main/java/run/halo/app/exception/ImageFormatException.java\n--- a/src/main/java/run/halo/app/exception/ImageFormatException.java\n+++ b/src/main/java/run/halo/app/exception/ImageFormatException.java\n@@ -0,0 +1,18 @@\n+package run.halo.app.exception;\n+\n+/**\n+ * Image format exception.\n+ *\n+ * @author ZhiXiang Yuan\n+ * @date 2020/08/10 02:11\n+ */\n+public class ImageFormatException extends BadRequestException {\n+\n+    public ImageFormatException(String message) {\n+        super(message);\n+    }\n+\n+    public ImageFormatException(String message, Throwable cause) {\n+        super(message, cause);\n+    }\n+}\n\ndiff --git a/src/main/java/run/halo/app/utils/ImageUtils.java b/src/main/java/run/halo/app/utils/ImageUtils.java\n--- a/src/main/java/run/halo/app/utils/ImageUtils.java\n+++ b/src/main/java/run/halo/app/utils/ImageUtils.java\n@@ -2,6 +2,7 @@\n \n import lombok.extern.slf4j.Slf4j;\n import net.sf.image4j.codec.ico.ICODecoder;\n+import run.halo.app.exception.ImageFormatException;\n \n import javax.imageio.ImageIO;\n import javax.imageio.ImageReader;\n@@ -24,7 +25,11 @@ public static BufferedImage getImageFromFile(InputStream is, String extension) t\n         log.debug(\"Current File type is : [{}]\", extension);\n \n         if (EXTENSION_ICO.equals(extension)) {\n-            return ICODecoder.read(is).get(0);\n+            try {\n+                return ICODecoder.read(is).get(0);\n+            } catch (IOException e) {\n+                throw new ImageFormatException(\"ico 文件已损坏\", e);\n+            }\n         } else {\n             return ImageIO.read(is);\n         }",
    "output": "fix: #1022 (#1025)\n\nCo-authored-by: xiangbei.yzx <xiangbei.yzx@alibaba-inc.com>"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java b/src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java\n@@ -52,7 +52,7 @@ public abstract class BasePostServiceImpl<POST extends BasePost> extends Abstrac\n \n     private final OptionService optionService;\n \n-    private final Pattern summaryPattern = Pattern.compile(\"\\\\s*|\\t|\\r|\\n\");\n+    private final Pattern summaryPattern = Pattern.compile(\"\\t|\\r|\\n\");\n \n     public BasePostServiceImpl(BasePostRepository<POST> basePostRepository,\n                                OptionService optionService) {",
    "output": "fix: the problem of no spaces in the summary (#1003)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n@@ -1,6 +1,7 @@\n package run.halo.app.service.impl;\n \n import cn.hutool.core.date.DateUtil;\n+import cn.hutool.core.util.StrUtil;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.lang3.StringUtils;\n import org.springframework.context.ApplicationEventPublisher;\n@@ -318,8 +319,11 @@ public PostDetailVO importMarkdown(String markdown, String filename) {\n \n         // Gets frontMatter\n         Map<String, List<String>> frontMatter = MarkdownUtils.getFrontMatter(markdown);\n+        // remove frontMatter\n+        markdown = MarkdownUtils.removeFrontMatter(markdown);\n \n         PostParam post = new PostParam();\n+        post.setStatus(null);\n \n         List<String> elementValue;\n \n@@ -331,6 +335,11 @@ public PostDetailVO importMarkdown(String markdown, String filename) {\n             for (String key : frontMatter.keySet()) {\n                 elementValue = frontMatter.get(key);\n                 for (String ele : elementValue) {\n+                    ele = StrUtil.strip(ele, \"[\", \"]\");\n+                    ele = StrUtil.strip(ele, \"\\\"\");\n+                    if (\"\".equals(ele)) {\n+                        continue;\n+                    }\n                     switch (key) {\n                         case \"title\":\n                             post.setTitle(ele);\n\ndiff --git a/src/main/java/run/halo/app/utils/MarkdownUtils.java b/src/main/java/run/halo/app/utils/MarkdownUtils.java\n--- a/src/main/java/run/halo/app/utils/MarkdownUtils.java\n+++ b/src/main/java/run/halo/app/utils/MarkdownUtils.java\n@@ -27,6 +27,8 @@\n import java.util.Arrays;\n import java.util.List;\n import java.util.Map;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n \n /**\n  * Markdown utils.\n@@ -122,4 +124,21 @@ public static Map<String, List<String>> getFrontMatter(String markdown) {\n         visitor.visit(document);\n         return visitor.getData();\n     }\n+\n+    private static final Pattern FRONT_MATTER = Pattern.compile(\"^---[\\\\s\\\\S]*?---\");\n+\n+    /**\n+     * remove front matter\n+     *\n+     * @param markdown markdown\n+     * @return markdown\n+     */\n+    public static String removeFrontMatter(String markdown) {\n+        markdown = markdown.trim();\n+        Matcher matcher = FRONT_MATTER.matcher(markdown);\n+        if (matcher.find()) {\n+            return markdown.replace(matcher.group(), \"\");\n+        }\n+        return markdown;\n+    }\n }\n\ndiff --git a/src/test/java/run/halo/app/utils/MarkdownUtilsTest.java b/src/test/java/run/halo/app/utils/MarkdownUtilsTest.java\n--- a/src/test/java/run/halo/app/utils/MarkdownUtilsTest.java\n+++ b/src/test/java/run/halo/app/utils/MarkdownUtilsTest.java\n@@ -0,0 +1,35 @@\n+package run.halo.app.utils;\n+\n+import cn.hutool.core.lang.Assert;\n+import lombok.extern.slf4j.Slf4j;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+/**\n+ * @author zhixiang.yuan\n+ * @since 2020/07/19 20:22:58\n+ */\n+@Slf4j\n+class MarkdownUtilsTest {\n+\n+    @Test\n+    void removeFrontMatter() {\n+        String markdown = \"---\\n\" +\n+            \"title: \\\"test remove\\\"\\n\" +\n+            \"---\";\n+        Assert.isTrue(\"\".equals(MarkdownUtils.removeFrontMatter(markdown)));\n+\n+        markdown = \"---\\n\" +\n+            \"title: \\\"test remove\\\"\\n\" +\n+            \"---\" +\n+            \"test\";\n+        Assert.isTrue(\"test\".equals(MarkdownUtils.removeFrontMatter(markdown)));\n+\n+        markdown = \"---\\n\" +\n+            \"title: \\\"test remove\\\"\\n\" +\n+            \"---\" +\n+            \"test---\";\n+        Assert.isTrue(\"test---\".equals(MarkdownUtils.removeFrontMatter(markdown)));\n+    }\n+}\n\\ No newline at end of file",
    "output": "fix: #975 (#977)\n\n* chore: build.gradle add mavenLocal()(#975)\r\n\r\n* feat: markdown import compatible with hugo(#975)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/HaloConfiguration.java b/src/main/java/run/halo/app/config/HaloConfiguration.java\n--- a/src/main/java/run/halo/app/config/HaloConfiguration.java\n+++ b/src/main/java/run/halo/app/config/HaloConfiguration.java\n@@ -68,7 +68,7 @@ public AbstractStringCacheStore stringCacheStore() {\n                 break;\n \n         }\n-        log.info(\"halo cache store load impl : [{}]\", stringCacheStore.getClass());\n+        log.info(\"Halo cache store load impl : [{}]\", stringCacheStore.getClass());\n         return stringCacheStore;\n \n     }\n\ndiff --git a/src/main/java/run/halo/app/handler/file/QiniuOssFileHandler.java b/src/main/java/run/halo/app/handler/file/QiniuOssFileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/QiniuOssFileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/QiniuOssFileHandler.java\n@@ -32,7 +32,8 @@\n import java.util.Objects;\n \n import static run.halo.app.handler.file.FileHandler.isImageType;\n-import static run.halo.app.model.support.HaloConst.URL_SEPARATOR;\n+import static run.halo.app.model.support.HaloConst.*;\n+import static run.halo.app.utils.HaloUtils.ensureSuffix;\n \n /**\n  * Qiniu oss file handler.\n@@ -78,7 +79,7 @@ public UploadResult upload(MultipartFile file) {\n         String uploadToken = auth.uploadToken(bucket, null, 60 * 60, putPolicy);\n \n         // Create temp path\n-        Path tmpPath = Paths.get(System.getProperty(\"java.io.tmpdir\"), bucket);\n+        Path tmpPath = Paths.get(ensureSuffix(TEMP_DIR, FILE_SEPARATOR), bucket);\n \n         StringBuilder basePath = new StringBuilder(protocol)\n             .append(domain)\n\ndiff --git a/src/main/java/run/halo/app/model/support/HaloConst.java b/src/main/java/run/halo/app/model/support/HaloConst.java\n--- a/src/main/java/run/halo/app/model/support/HaloConst.java\n+++ b/src/main/java/run/halo/app/model/support/HaloConst.java\n@@ -23,7 +23,7 @@ public class HaloConst {\n     /**\n      * Temporary directory.\n      */\n-    public final static String TEMP_DIR = System.getProperties().getProperty(\"java.io.tmpdir\");\n+    public final static String TEMP_DIR = \"/tmp/run.halo.app\";\n \n     public final static String PROTOCOL_HTTPS = \"https://\";\n ",
    "output": "fix: #853 (#979)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/api/PostController.java b/src/main/java/run/halo/app/controller/content/api/PostController.java\n--- a/src/main/java/run/halo/app/controller/content/api/PostController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/PostController.java\n@@ -83,6 +83,8 @@ public PostDetailVO getBy(@PathVariable(\"postId\") Integer postId,\n             postDetailVO.setOriginalContent(null);\n         }\n \n+        postService.publishVisitEvent(postDetailVO.getId());\n+\n         return postDetailVO;\n     }\n \n\ndiff --git a/src/main/java/run/halo/app/controller/content/api/SheetController.java b/src/main/java/run/halo/app/controller/content/api/SheetController.java\n--- a/src/main/java/run/halo/app/controller/content/api/SheetController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/SheetController.java\n@@ -73,6 +73,8 @@ public SheetDetailVO getBy(@PathVariable(\"sheetId\") Integer sheetId,\n             sheetDetailVO.setOriginalContent(null);\n         }\n \n+        sheetService.publishVisitEvent(sheetDetailVO.getId());\n+\n         return sheetDetailVO;\n     }\n ",
    "output": "fix: #822 (#981)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/utils/ValidationUtils.java b/src/main/java/run/halo/app/utils/ValidationUtils.java\n--- a/src/main/java/run/halo/app/utils/ValidationUtils.java\n+++ b/src/main/java/run/halo/app/utils/ValidationUtils.java\n@@ -1,15 +1,14 @@\n package run.halo.app.utils;\n \n+import org.hibernate.validator.internal.engine.path.PathImpl;\n import org.springframework.lang.NonNull;\n import org.springframework.lang.Nullable;\n import org.springframework.util.CollectionUtils;\n import org.springframework.validation.FieldError;\n \n-import javax.validation.ConstraintViolation;\n-import javax.validation.ConstraintViolationException;\n-import javax.validation.Validation;\n-import javax.validation.Validator;\n+import javax.validation.*;\n import java.util.*;\n+import java.util.concurrent.atomic.AtomicInteger;\n \n /**\n  * Object validation utilities.\n@@ -30,7 +29,7 @@ private ValidationUtils() {\n      * @return validator\n      */\n     @NonNull\n-    public static Validator getValidatorOrCreate() {\n+    public static Validator getValidator() {\n         if (VALIDATOR == null) {\n             synchronized (ValidationUtils.class) {\n                 if (VALIDATOR == null) {\n@@ -52,17 +51,55 @@ public static Validator getValidatorOrCreate() {\n      */\n     public static void validate(Object obj, Class<?>... groups) {\n \n-        Validator validator = getValidatorOrCreate();\n+        Validator validator = getValidator();\n \n-        // Validate the object\n-        Set<ConstraintViolation<Object>> constraintViolations = validator.validate(obj, groups);\n+        if (obj instanceof Iterable) {\n+            // validate for iterable\n+            validate((Iterable<?>) obj, groups);\n+        } else {\n+            // validate the non-iterable object\n+            Set<ConstraintViolation<Object>> constraintViolations = validator.validate(obj, groups);\n \n-        if (!CollectionUtils.isEmpty(constraintViolations)) {\n-            // If contain some errors then throw constraint violation exception\n-            throw new ConstraintViolationException(constraintViolations);\n+            if (!CollectionUtils.isEmpty(constraintViolations)) {\n+                // If contain some errors then throw constraint violation exception\n+                throw new ConstraintViolationException(constraintViolations);\n+            }\n         }\n     }\n \n+    /**\n+     * Validates iterable objects.\n+     *\n+     * @param objs   iterable objects could be null\n+     * @param groups validation groups\n+     */\n+    public static void validate(@Nullable Iterable<?> objs, @Nullable Class<?>... groups) {\n+        if (objs == null) {\n+            return;\n+        }\n+\n+        // get validator\n+        Validator validator = getValidator();\n+\n+        // wrap index\n+        AtomicInteger i = new AtomicInteger(0);\n+        final Set<ConstraintViolation<?>> allViolations = new LinkedHashSet<>();\n+        objs.forEach(obj -> {\n+            int index = i.getAndIncrement();\n+            Set<? extends ConstraintViolation<?>> violations = validator.validate(obj, groups);\n+            violations.forEach(violation -> {\n+                Path path = violation.getPropertyPath();\n+                if (path instanceof PathImpl) {\n+                    PathImpl pathImpl = (PathImpl) path;\n+                    pathImpl.makeLeafNodeIterableAndSetIndex(index);\n+                }\n+                allViolations.add(violation);\n+            });\n+        });\n+        if (!CollectionUtils.isEmpty(allViolations)) {\n+            throw new ConstraintViolationException(allViolations);\n+        }\n+    }\n \n     /**\n      * 将字段验证错误转换为标准的map型，key:value = field:message\n\ndiff --git a/src/test/java/run/halo/app/utils/ValidationUtilsTest.java b/src/test/java/run/halo/app/utils/ValidationUtilsTest.java\n--- a/src/test/java/run/halo/app/utils/ValidationUtilsTest.java\n+++ b/src/test/java/run/halo/app/utils/ValidationUtilsTest.java\n@@ -0,0 +1,84 @@\n+package run.halo.app.utils;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import org.junit.jupiter.api.Test;\n+\n+import javax.validation.ConstraintViolation;\n+import javax.validation.ConstraintViolationException;\n+import javax.validation.Validator;\n+import javax.validation.constraints.NotBlank;\n+import java.util.*;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+/**\n+ * Validation utils test.\n+ *\n+ * @author johnniang\n+ */\n+class ValidationUtilsTest {\n+\n+    Validator validator = ValidationUtils.getValidator();\n+\n+    @Test\n+    void validateObjectTest() {\n+        Car car = new Car(null);\n+        Set<ConstraintViolation<Car>> violations = validator.validate(car);\n+        validateObjectAssert(violations);\n+\n+        ConstraintViolationException exception = assertThrows(ConstraintViolationException.class,\n+            () -> ValidationUtils.validate(car));\n+        validateObjectAssert(exception.getConstraintViolations());\n+    }\n+\n+    void validateObjectAssert(Set<? extends ConstraintViolation<?>> violations) {\n+        assertEquals(1, violations.size());\n+        ConstraintViolation<?> violation = violations.iterator().next();\n+        assertEquals(\"name\", violation.getPropertyPath().toString());\n+        assertEquals(\"Name must not be blank\", violation.getMessage());\n+    }\n+\n+    @Test\n+    void validateListTest() {\n+        List<Car> cars = Arrays.asList(new Car(\"\"),\n+            new Car(\"car name\"),\n+            new Car(null));\n+\n+        ConstraintViolationException exception = assertThrows(ConstraintViolationException.class,\n+            () -> ValidationUtils.validate(cars));\n+\n+        validateIteratorTest(exception.getConstraintViolations());\n+    }\n+\n+    void validateIteratorTest(Set<? extends ConstraintViolation<?>> violations) {\n+        assertEquals(2, violations.size());\n+\n+        LinkedList<? extends ConstraintViolation<?>> violationList = new LinkedList<>(violations);\n+        violationList.sort(Comparator.comparing(v -> v.getPropertyPath().toString()));\n+\n+        // get first violation\n+        ConstraintViolation<?> firstViolation = violationList.get(0);\n+        // get second violation\n+        ConstraintViolation<?> secondViolation = violationList.get(1);\n+\n+        assertEquals(\"name[0]\", firstViolation.getPropertyPath().toString());\n+        assertEquals(\"name[2]\", secondViolation.getPropertyPath().toString());\n+    }\n+\n+    /**\n+     * Car entity.\n+     *\n+     * @author johnniang\n+     */\n+    @Data\n+    @AllArgsConstructor\n+    static class Car {\n+\n+        @NotBlank(message = \"Name must not be blank\")\n+        private String name;\n+\n+    }\n+\n+}\n\\ No newline at end of file",
    "output": "Add iterable objects validation (#970)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/core/freemarker/tag/LinkTagDirective.java b/src/main/java/run/halo/app/core/freemarker/tag/LinkTagDirective.java\n--- a/src/main/java/run/halo/app/core/freemarker/tag/LinkTagDirective.java\n+++ b/src/main/java/run/halo/app/core/freemarker/tag/LinkTagDirective.java\n@@ -38,12 +38,15 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars, Templ\n                 case \"list\":\n                     env.setVariable(\"links\", builder.build().wrap(linkService.listAll()));\n                     break;\n-                case \"listByDisruption\":\n-                    env.setVariable(\"links\", builder.build().wrap(linkService.listAllByDisruption()));\n+                case \"listByRandom\":\n+                    env.setVariable(\"links\", builder.build().wrap(linkService.listAllByRandom()));\n                     break;\n                 case \"listTeams\":\n                     env.setVariable(\"teams\", builder.build().wrap(linkService.listTeamVos(Sort.by(DESC, \"createTime\"))));\n                     break;\n+                case \"listTeamsByRandom\":\n+                    env.setVariable(\"teams\", builder.build().wrap(linkService.listTeamVosByRandom(Sort.by(DESC, \"createTime\"))));\n+                    break;\n                 case \"count\":\n                     env.setVariable(\"count\", builder.build().wrap(linkService.count()));\n                     break;\n\ndiff --git a/src/main/java/run/halo/app/service/LinkService.java b/src/main/java/run/halo/app/service/LinkService.java\n--- a/src/main/java/run/halo/app/service/LinkService.java\n+++ b/src/main/java/run/halo/app/service/LinkService.java\n@@ -37,6 +37,15 @@ public interface LinkService extends CrudService<Link, Integer> {\n     @NonNull\n     List<LinkTeamVO> listTeamVos(@NonNull Sort sort);\n \n+    /**\n+     * Lists link team vos by random\n+     *\n+     * @param sort\n+     * @return a list of link team vo by random\n+     */\n+    @NonNull\n+    List<LinkTeamVO> listTeamVosByRandom(@NonNull Sort sort);\n+\n     /**\n      * Creates link by link param.\n      *\n@@ -61,6 +70,11 @@ public interface LinkService extends CrudService<Link, Integer> {\n      */\n     List<String> listAllTeams();\n \n+    /**\n+     * List all link teams by random\n+     *\n+     * @return a list of teams by random\n+     */\n     @NonNull\n-    List<Link> listAllByDisruption();\n+    List<Link> listAllByRandom();\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/LinkServiceImpl.java b/src/main/java/run/halo/app/service/impl/LinkServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/LinkServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/LinkServiceImpl.java\n@@ -72,6 +72,23 @@ public List<LinkTeamVO> listTeamVos(Sort sort) {\n         return result;\n     }\n \n+    @Override\n+    public List<LinkTeamVO> listTeamVosByRandom(Sort sort) {\n+        Assert.notNull(sort, \"Sort info must not be null\");\n+        List<LinkDTO> links = listDtos(sort);\n+        Set<String> teams = ServiceUtils.fetchProperty(links, LinkDTO::getTeam);\n+        Map<String, List<LinkDTO>> teamLinkListMap = ServiceUtils.convertToListMap(teams, links, LinkDTO::getTeam);\n+        List<LinkTeamVO> result = new LinkedList<>();\n+        teamLinkListMap.forEach((team, linkList) -> {\n+            LinkTeamVO linkTeamVO = new LinkTeamVO();\n+            linkTeamVO.setTeam(team);\n+            Collections.shuffle(linkList);\n+            linkTeamVO.setLinks(linkList);\n+            result.add(linkTeamVO);\n+        });\n+        return result;\n+    }\n+\n     @Override\n     public Link createBy(LinkParam linkParam) {\n         Assert.notNull(linkParam, \"Link param must not be null\");\n@@ -101,7 +118,7 @@ public List<String> listAllTeams() {\n     }\n \n     @Override\n-    public List<Link> listAllByDisruption() {\n+    public List<Link> listAllByRandom() {\n         List<Link> allLink = linkRepository.findAll();\n         Collections.shuffle(allLink);\n         return allLink;\n@@ -114,6 +131,6 @@ private List<LinkDTO> convertTo(@Nullable List<Link> links) {\n         }\n \n         return links.stream().map(link -> (LinkDTO) new LinkDTO().convertFrom(link))\n-            .collect(Collectors.toList());\n+                .collect(Collectors.toList());\n     }\n }",
    "output": "perfect: Link random order display,listByRandom and listTeamsByRandom. (#952)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/api/CategoryController.java b/src/main/java/run/halo/app/controller/content/api/CategoryController.java\n--- a/src/main/java/run/halo/app/controller/content/api/CategoryController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/CategoryController.java\n@@ -57,7 +57,7 @@ public List<? extends CategoryDTO> listCategories(@SortDefault(sort = \"updateTim\n     @GetMapping(\"{slug}/posts\")\n     @ApiOperation(\"Lists posts by category slug\")\n     public Page<BasePostSimpleDTO> listPostsBy(@PathVariable(\"slug\") String slug,\n-                                               @PageableDefault(sort = \"updateTime\", direction = DESC) Pageable pageable) {\n+                                               @PageableDefault(sort = {\"topPriority\", \"updateTime\"}, direction = DESC) Pageable pageable) {\n         // Get category by slug\n         Category category = categoryService.getBySlugOfNonNull(slug);\n \n\ndiff --git a/src/main/java/run/halo/app/controller/content/api/TagController.java b/src/main/java/run/halo/app/controller/content/api/TagController.java\n--- a/src/main/java/run/halo/app/controller/content/api/TagController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/TagController.java\n@@ -60,7 +60,7 @@ public List<? extends TagDTO> listTags(@SortDefault(sort = \"updateTime\", directi\n     @GetMapping(\"{slug}/posts\")\n     @ApiOperation(\"Lists posts by tag slug\")\n     public Page<BasePostSimpleDTO> listPostsBy(@PathVariable(\"slug\") String slug,\n-                                               @PageableDefault(sort = \"updateTime\", direction = DESC) Pageable pageable) {\n+                                               @PageableDefault(sort = {\"topPriority\", \"updateTime\"}, direction = DESC) Pageable pageable) {\n         // Get tag by slug\n         Tag tag = tagService.getBySlugOfNonNull(slug);\n \n\ndiff --git a/src/main/java/run/halo/app/controller/content/model/CategoryModel.java b/src/main/java/run/halo/app/controller/content/model/CategoryModel.java\n--- a/src/main/java/run/halo/app/controller/content/model/CategoryModel.java\n+++ b/src/main/java/run/halo/app/controller/content/model/CategoryModel.java\n@@ -69,7 +69,9 @@ public String listPost(Model model, String slug, Integer page) {\n         final Category category = categoryService.getBySlugOfNonNull(slug);\n         CategoryDTO categoryDTO = categoryService.convertTo(category);\n \n-        final Pageable pageable = PageRequest.of(page - 1, optionService.getArchivesPageSize(), Sort.by(DESC, \"createTime\"));\n+        final Pageable pageable = PageRequest.of(page - 1,\n+            optionService.getArchivesPageSize(),\n+            Sort.by(DESC, \"topPriority\", \"createTime\"));\n         Page<Post> postPage = postCategoryService.pagePostBy(category.getId(), PostStatus.PUBLISHED, pageable);\n         Page<PostListVO> posts = postService.convertToListVo(postPage);\n \n\ndiff --git a/src/main/java/run/halo/app/model/dto/post/BasePostSimpleDTO.java b/src/main/java/run/halo/app/model/dto/post/BasePostSimpleDTO.java\n--- a/src/main/java/run/halo/app/model/dto/post/BasePostSimpleDTO.java\n+++ b/src/main/java/run/halo/app/model/dto/post/BasePostSimpleDTO.java\n@@ -29,4 +29,8 @@ public class BasePostSimpleDTO extends BasePostMinimalDTO {\n     private Integer topPriority;\n \n     private Long likes;\n+\n+    public boolean isTopped() {\n+        return this.topPriority != null && this.topPriority > 0;\n+    }\n }",
    "output": "Add top priority sort at post list in category and tag (#918)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/Application.java b/src/main/java/run/halo/app/Application.java\n--- a/src/main/java/run/halo/app/Application.java\n+++ b/src/main/java/run/halo/app/Application.java\n@@ -1,11 +1,9 @@\n package run.halo.app;\n \n-import org.springframework.boot.ApplicationArguments;\n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n import org.springframework.boot.builder.SpringApplicationBuilder;\n import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;\n-import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.data.jpa.repository.config.EnableJpaRepositories;\n import org.springframework.scheduling.annotation.EnableAsync;\n import run.halo.app.repository.base.BaseRepositoryImpl;\n@@ -21,29 +19,12 @@\n @EnableJpaRepositories(basePackages = \"run.halo.app.repository\", repositoryBaseClass = BaseRepositoryImpl.class)\n public class Application extends SpringBootServletInitializer {\n \n-    private static ConfigurableApplicationContext CONTEXT;\n-\n     public static void main(String[] args) {\n         // Customize the spring config location\n         System.setProperty(\"spring.config.additional-location\", \"file:${user.home}/.halo/,file:${user.home}/halo-dev/\");\n \n         // Run application\n-        CONTEXT = SpringApplication.run(Application.class, args);\n-    }\n-\n-    /**\n-     * Restart Application.\n-     */\n-    public static void restart() {\n-        ApplicationArguments args = CONTEXT.getBean(ApplicationArguments.class);\n-\n-        Thread thread = new Thread(() -> {\n-            CONTEXT.close();\n-            CONTEXT = SpringApplication.run(Application.class, args.getSourceArgs());\n-        });\n-\n-        thread.setDaemon(false);\n-        thread.start();\n+        SpringApplication.run(Application.class, args);\n     }\n \n     @Override\n\ndiff --git a/src/main/java/run/halo/app/controller/admin/api/AdminController.java b/src/main/java/run/halo/app/controller/admin/api/AdminController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/AdminController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/AdminController.java\n@@ -4,9 +4,9 @@\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.http.HttpStatus;\n import org.springframework.web.bind.annotation.*;\n-import run.halo.app.Application;\n import run.halo.app.annotation.DisableOnCondition;\n import run.halo.app.cache.lock.CacheLock;\n+import run.halo.app.exception.BadRequestException;\n import run.halo.app.model.dto.EnvironmentDTO;\n import run.halo.app.model.dto.LoginPreCheckDTO;\n import run.halo.app.model.dto.StatisticDTO;\n@@ -131,8 +131,9 @@ public void updateSpringApplicationConfig(@RequestParam(name = \"content\") String\n     @PostMapping(value = {\"halo/restart\", \"spring/restart\"})\n     @ApiOperation(\"Restarts halo server\")\n     @DisableOnCondition\n+    @Deprecated\n     public void restartApplication() {\n-        Application.restart();\n+        throw new BadRequestException(\"此前的重启方案存在性能问题，故暂不支持重启功能！\");\n     }\n \n     @GetMapping(value = \"halo/logfile\")",
    "output": "Remove restart feature (#917)\n\n* Ignore application-local file\r\n\r\n* Remove restart feature"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/listener/StartedListener.java b/src/main/java/run/halo/app/listener/StartedListener.java\n--- a/src/main/java/run/halo/app/listener/StartedListener.java\n+++ b/src/main/java/run/halo/app/listener/StartedListener.java\n@@ -74,7 +74,6 @@ public void onApplicationEvent(ApplicationStartedEvent event) {\n \n     private void printStartInfo() {\n         String blogUrl = optionService.getBlogBaseUrl();\n-\n         log.info(AnsiOutput.toString(AnsiColor.BRIGHT_BLUE, \"Halo started at         \", blogUrl));\n         log.info(AnsiOutput.toString(AnsiColor.BRIGHT_BLUE, \"Halo admin started at   \", blogUrl, \"/\", haloProperties.getAdminPath()));\n         if (!haloProperties.isDocDisabled()) {\n@@ -149,7 +148,7 @@ private void initThemes() {\n                 log.debug(\"Skipped copying theme folder due to existence of theme folder\");\n             }\n         } catch (Exception e) {\n-            throw new RuntimeException(\"Initialize internal theme to user path error\", e);\n+            log.error(\"Initialize internal theme to user path error!\", e);\n         }\n     }\n \n@@ -188,7 +187,6 @@ private void initDirectory() {\n                 Files.createDirectories(dataExportPath);\n                 log.info(\"Created data export directory: [{}]\", dataExportPath);\n             }\n-\n         } catch (IOException ie) {\n             throw new RuntimeException(\"Failed to initialize directories\", ie);\n         }\n\ndiff --git a/src/main/java/run/halo/app/model/support/HaloConst.java b/src/main/java/run/halo/app/model/support/HaloConst.java\n--- a/src/main/java/run/halo/app/model/support/HaloConst.java\n+++ b/src/main/java/run/halo/app/model/support/HaloConst.java\n@@ -3,6 +3,7 @@\n import org.springframework.http.HttpHeaders;\n \n import java.io.File;\n+import java.util.Optional;\n \n /**\n  * <pre>\n@@ -139,6 +140,12 @@ public class HaloConst {\n      * Version constant. (Available in production environment)\n      */\n     public static final String HALO_VERSION;\n+\n+    /**\n+     * Unknown version: unknown\n+     */\n+    public static final String UNKNOWN_VERSION = \"unknown\";\n+\n     /**\n      * Database product name.\n      */\n@@ -150,6 +157,6 @@ public class HaloConst {\n \n     static {\n         // Set version\n-        HALO_VERSION = HaloConst.class.getPackage().getImplementationVersion();\n+        HALO_VERSION = Optional.ofNullable(HaloConst.class.getPackage().getImplementationVersion()).orElse(UNKNOWN_VERSION);\n     }\n }\n\ndiff --git a/src/main/java/run/halo/app/utils/VersionUtil.java b/src/main/java/run/halo/app/utils/VersionUtil.java\n--- a/src/main/java/run/halo/app/utils/VersionUtil.java\n+++ b/src/main/java/run/halo/app/utils/VersionUtil.java\n@@ -1,43 +1,63 @@\n package run.halo.app.utils;\n \n-import cn.hutool.core.util.StrUtil;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.util.Assert;\n+import run.halo.app.model.support.HaloConst;\n \n+import java.util.Objects;\n import java.util.StringTokenizer;\n \n /**\n  * @author ryanwang\n  * @date 2020-02-03\n- * @see com.sun.xml.internal.ws.util.VersionUtil\n+ * @see \"com.sun.xml.internal.ws.util.VersionUtil\"\n  */\n+@Slf4j\n public class VersionUtil {\n \n-    public VersionUtil() {\n+    private static final String UNDERLINE = \"_\";\n+\n+    private VersionUtil() {\n     }\n \n     public static int[] getCanonicalVersion(String version) {\n+        Assert.hasText(version, \"Version must not be blank\");\n+\n+        if (Objects.equals(version, HaloConst.UNKNOWN_VERSION)) {\n+            log.warn(\"Unknown version will be converted to {}.{}.{}.{}\",\n+                Integer.MAX_VALUE,\n+                Integer.MAX_VALUE,\n+                Integer.MAX_VALUE,\n+                Integer.MAX_VALUE);\n+            return new int[] {Integer.MAX_VALUE,\n+                Integer.MAX_VALUE,\n+                Integer.MAX_VALUE,\n+                Integer.MAX_VALUE};\n+        }\n+\n         int[] canonicalVersion = new int[] {1, 1, 0, 0};\n         StringTokenizer tokenizer = new StringTokenizer(version, \".\");\n         String token = tokenizer.nextToken();\n         canonicalVersion[0] = Integer.parseInt(token);\n         token = tokenizer.nextToken();\n         StringTokenizer subTokenizer;\n-        if (!token.contains(StrUtil.UNDERLINE)) {\n+        if (!token.contains(UNDERLINE)) {\n             canonicalVersion[1] = Integer.parseInt(token);\n         } else {\n-            subTokenizer = new StringTokenizer(token, \"_\");\n+            subTokenizer = new StringTokenizer(token, UNDERLINE);\n             canonicalVersion[1] = Integer.parseInt(subTokenizer.nextToken());\n             canonicalVersion[3] = Integer.parseInt(subTokenizer.nextToken());\n         }\n \n         if (tokenizer.hasMoreTokens()) {\n             token = tokenizer.nextToken();\n-            if (!token.contains(StrUtil.UNDERLINE)) {\n+            if (!token.contains(UNDERLINE)) {\n                 canonicalVersion[2] = Integer.parseInt(token);\n                 if (tokenizer.hasMoreTokens()) {\n                     canonicalVersion[3] = Integer.parseInt(tokenizer.nextToken());\n                 }\n             } else {\n-                subTokenizer = new StringTokenizer(token, \"_\");\n+                subTokenizer = new StringTokenizer(token, UNDERLINE);\n                 canonicalVersion[2] = Integer.parseInt(subTokenizer.nextToken());\n                 canonicalVersion[3] = Integer.parseInt(subTokenizer.nextToken());\n             }\n@@ -47,6 +67,8 @@ public static int[] getCanonicalVersion(String version) {\n     }\n \n     public static int compare(String version1, String version2) {\n+        log.debug(\"Comparing version [{}] with [{}]\", version1, version2);\n+\n         int[] canonicalVersion1 = getCanonicalVersion(version1);\n         int[] canonicalVersion2 = getCanonicalVersion(version2);\n         if (canonicalVersion1[0] < canonicalVersion2[0]) {\n\ndiff --git a/src/test/java/run/halo/app/utils/VersionUtilTest.java b/src/test/java/run/halo/app/utils/VersionUtilTest.java\n--- a/src/test/java/run/halo/app/utils/VersionUtilTest.java\n+++ b/src/test/java/run/halo/app/utils/VersionUtilTest.java\n@@ -1,26 +1,45 @@\n package run.halo.app.utils;\n \n-import org.junit.Assert;\n-import org.junit.Test;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.junit.jupiter.api.Test;\n+import run.halo.app.model.support.HaloConst;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n \n /**\n  * @author ryanwang\n  * @date 2020-02-03\n  */\n-public class VersionUtilTest {\n+class VersionUtilTest {\n \n     @Test\n-    public void compareVersion() {\n-        Assert.assertTrue(VersionUtil.compareVersion(\"1.2.0\", \"1.1.1\"));\n-\n-        Assert.assertTrue(VersionUtil.compareVersion(\"1.2.1\", \"1.2.0\"));\n-\n-        Assert.assertTrue(VersionUtil.compareVersion(\"1.2.0\", \"1.1.1.0\"));\n-\n-        Assert.assertTrue(VersionUtil.compareVersion(\"1.2.0\", \"0.4.4\"));\n+    void compareVersion() {\n+        assertTrue(VersionUtil.compareVersion(\"1.2.0\", \"1.1.1\"));\n+        assertTrue(VersionUtil.compareVersion(\"1.2.1\", \"1.2.0\"));\n+        assertTrue(VersionUtil.compareVersion(\"1.2.0\", \"1.1.1.0\"));\n+        assertTrue(VersionUtil.compareVersion(\"1.2.0\", \"0.4.4\"));\n+        assertFalse(VersionUtil.compareVersion(\"1.1.1\", \"1.2.0\"));\n+        assertFalse(VersionUtil.compareVersion(\"0.0.1\", \"1.2.0\"));\n+    }\n \n-        Assert.assertFalse(VersionUtil.compareVersion(\"1.1.1\", \"1.2.0\"));\n+    @Test\n+    void unknownVersionCompareTest() {\n+        // build a random version\n+        String randomVersion = String.join(\".\",\n+            RandomStringUtils.randomNumeric(1),\n+            RandomStringUtils.randomNumeric(2),\n+            RandomStringUtils.randomNumeric(3));\n+        VersionUtil.compareVersion(HaloConst.UNKNOWN_VERSION, randomVersion);\n+    }\n \n-        Assert.assertFalse(VersionUtil.compareVersion(\"0.0.1\", \"1.2.0\"));\n+    @Test\n+    void unknownOrEmptyCanonicalVersionTest() {\n+        assertThrows(IllegalArgumentException.class, () -> VersionUtil.getCanonicalVersion(null));\n+        int[] version = VersionUtil.getCanonicalVersion(HaloConst.UNKNOWN_VERSION);\n+        assertNotNull(version);\n+        assertEquals(4, version.length);\n+        for (int v : version) {\n+            assertEquals(Integer.MAX_VALUE, v);\n+        }\n     }\n }\n\\ No newline at end of file",
    "output": "fix: Fix startup exception and theme imports in dev environment (#916)\n\n* Log error instead of throwing while starting halo\r\n\r\n* Provide unknown version support\r\n\r\n* Fix code format"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/Application.java b/src/main/java/run/halo/app/Application.java\n--- a/src/main/java/run/halo/app/Application.java\n+++ b/src/main/java/run/halo/app/Application.java\n@@ -29,7 +29,6 @@ public static void main(String[] args) {\n \n         // Run application\n         CONTEXT = SpringApplication.run(Application.class, args);\n-\n     }\n \n     /**",
    "output": "Perfect checkstyle.xml (#915)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/core/freemarker/tag/LinkTagDirective.java b/src/main/java/run/halo/app/core/freemarker/tag/LinkTagDirective.java\n--- a/src/main/java/run/halo/app/core/freemarker/tag/LinkTagDirective.java\n+++ b/src/main/java/run/halo/app/core/freemarker/tag/LinkTagDirective.java\n@@ -38,6 +38,9 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars, Templ\n                 case \"list\":\n                     env.setVariable(\"links\", builder.build().wrap(linkService.listAll()));\n                     break;\n+                case \"listByDisruption\":\n+                    env.setVariable(\"links\", builder.build().wrap(linkService.listAllByDisruption()));\n+                    break;\n                 case \"listTeams\":\n                     env.setVariable(\"teams\", builder.build().wrap(linkService.listTeamVos(Sort.by(DESC, \"createTime\"))));\n                     break;\n\ndiff --git a/src/main/java/run/halo/app/service/LinkService.java b/src/main/java/run/halo/app/service/LinkService.java\n--- a/src/main/java/run/halo/app/service/LinkService.java\n+++ b/src/main/java/run/halo/app/service/LinkService.java\n@@ -60,4 +60,7 @@ public interface LinkService extends CrudService<Link, Integer> {\n      * @return a list of teams.\n      */\n     List<String> listAllTeams();\n+\n+    @NonNull\n+    List<Link> listAllByDisruption();\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/LinkServiceImpl.java b/src/main/java/run/halo/app/service/impl/LinkServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/LinkServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/LinkServiceImpl.java\n@@ -100,6 +100,13 @@ public List<String> listAllTeams() {\n         return linkRepository.findAllTeams();\n     }\n \n+    @Override\n+    public List<Link> listAllByDisruption() {\n+        List<Link> allLink = linkRepository.findAll();\n+        Collections.shuffle(allLink);\n+        return allLink;\n+    }\n+\n     @NonNull\n     private List<LinkDTO> convertTo(@Nullable List<Link> links) {\n         if (CollectionUtils.isEmpty(links)) {",
    "output": "feat: add links sort by random (#912)\n\n* feat: add links sort by random\r\n\r\n* feat: add links sort by random"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/Application.java b/src/main/java/run/halo/app/Application.java\n--- a/src/main/java/run/halo/app/Application.java\n+++ b/src/main/java/run/halo/app/Application.java\n@@ -6,10 +6,8 @@\n import org.springframework.boot.builder.SpringApplicationBuilder;\n import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;\n import org.springframework.context.ConfigurableApplicationContext;\n-import org.springframework.data.jpa.repository.config.EnableJpaAuditing;\n import org.springframework.data.jpa.repository.config.EnableJpaRepositories;\n import org.springframework.scheduling.annotation.EnableAsync;\n-import org.springframework.scheduling.annotation.EnableScheduling;\n import run.halo.app.repository.base.BaseRepositoryImpl;\n \n /**\n@@ -19,8 +17,6 @@\n  * @date 2017-11-14\n  */\n @SpringBootApplication\n-@EnableJpaAuditing\n-@EnableScheduling\n @EnableAsync\n @EnableJpaRepositories(basePackages = \"run.halo.app.repository\", repositoryBaseClass = BaseRepositoryImpl.class)\n public class Application extends SpringBootServletInitializer {",
    "output": "Remove redundant annotations (#880)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/utils/HttpClientUtils.java b/src/main/java/run/halo/app/utils/HttpClientUtils.java\n--- a/src/main/java/run/halo/app/utils/HttpClientUtils.java\n+++ b/src/main/java/run/halo/app/utils/HttpClientUtils.java\n@@ -45,9 +45,9 @@ public static CloseableHttpClient createHttpsClient(int timeout) throws KeyStore\n             .build();\n \n         return HttpClients.custom()\n-            .setSSLContext(sslContext)\n-            .setSSLHostnameVerifier(new NoopHostnameVerifier())\n-            .setDefaultRequestConfig(getReqeustConfig(timeout))\n+                .setSSLContext(sslContext)\n+                .setSSLHostnameVerifier(new NoopHostnameVerifier())\n+                .setDefaultRequestConfig(getRequestConfig(timeout))\n             .build();\n     }\n \n@@ -57,12 +57,12 @@ public static CloseableHttpClient createHttpsClient(int timeout) throws KeyStore\n      * @param timeout connection timeout (ms)\n      * @return request config\n      */\n-    private static RequestConfig getReqeustConfig(int timeout) {\n+    private static RequestConfig getRequestConfig(int timeout) {\n         return RequestConfig.custom()\n-            .setConnectTimeout(timeout)\n-            .setConnectionRequestTimeout(timeout)\n-            .setSocketTimeout(timeout)\n-            .build();\n+                .setConnectTimeout(timeout)\n+                .setConnectionRequestTimeout(timeout)\n+                .setSocketTimeout(timeout)\n+                .build();\n     }\n \n ",
    "output": "fixed typos (#873)\n\nCo-authored-by: Your Name <you@example.com>"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/listener/freemarker/FreemarkerConfigAwareListener.java b/src/main/java/run/halo/app/listener/freemarker/FreemarkerConfigAwareListener.java\n--- a/src/main/java/run/halo/app/listener/freemarker/FreemarkerConfigAwareListener.java\n+++ b/src/main/java/run/halo/app/listener/freemarker/FreemarkerConfigAwareListener.java\n@@ -107,6 +107,7 @@ private void loadOptionsConfig() throws TemplateModelException {\n         configuration.setSharedVariable(\"context\", context);\n         configuration.setSharedVariable(\"version\", HaloConst.HALO_VERSION);\n \n+        configuration.setSharedVariable(\"globalAbsolutePathEnabled\", optionService.isEnabledAbsolutePath());\n         configuration.setSharedVariable(\"blog_title\", optionService.getBlogTitle());\n         configuration.setSharedVariable(\"blog_url\", optionService.getBlogBaseUrl());\n         configuration.setSharedVariable(\"blog_logo\", optionService.getByPropertyOrDefault(BlogProperties.BLOG_LOGO, String.class, BlogProperties.BLOG_LOGO.defaultValue()));",
    "output": "fix: #785 (#854)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n@@ -106,7 +106,7 @@ public ThemeServiceImpl(HaloProperties haloProperties,\n         Executors.newSingleThreadScheduledExecutor().scheduleWithFixedDelay(() -> {\n             try {\n                 String newActivatedThemeId = optionService.getByPropertyOrDefault(PrimaryProperties.THEME, String.class, DEFAULT_THEME_ID);\n-                if (newActivatedThemeId != activatedThemeId) {\n+                if (!activatedThemeId.equals(newActivatedThemeId)) {\n                     activateTheme(newActivatedThemeId);\n                 }\n             } catch (Exception e) {",
    "output": "pref: replace == usage with equals to avoid bugs. (#851)\n\nCo-authored-by: sebastiancoteanu <sebastian.coteanu@arnia.ro>"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/HaloConfiguration.java b/src/main/java/run/halo/app/config/HaloConfiguration.java\n--- a/src/main/java/run/halo/app/config/HaloConfiguration.java\n+++ b/src/main/java/run/halo/app/config/HaloConfiguration.java\n@@ -5,7 +5,6 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n-import org.springframework.boot.info.BuildProperties;\n import org.springframework.boot.web.client.RestTemplateBuilder;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n@@ -17,10 +16,8 @@\n import run.halo.app.cache.LevelCacheStore;\n import run.halo.app.cache.RedisCacheStore;\n import run.halo.app.config.properties.HaloProperties;\n-import run.halo.app.model.support.HaloConst;\n import run.halo.app.utils.HttpClientUtils;\n \n-import javax.annotation.PostConstruct;\n import java.security.KeyManagementException;\n import java.security.KeyStoreException;\n import java.security.NoSuchAlgorithmException;\n@@ -38,9 +35,6 @@ public class HaloConfiguration {\n     @Autowired\n     HaloProperties haloProperties;\n \n-    @Autowired\n-    BuildProperties buildProperties;\n-\n     @Bean\n     public ObjectMapper objectMapper(Jackson2ObjectMapperBuilder builder) {\n         builder.failOnEmptyBeans(false);\n@@ -78,9 +72,4 @@ public AbstractStringCacheStore stringCacheStore() {\n         return stringCacheStore;\n \n     }\n-\n-    @PostConstruct\n-    public void init() {\n-        HaloConst.HALO_VERSION = buildProperties.getVersion();\n-    }\n }\n\ndiff --git a/src/main/java/run/halo/app/model/support/HaloConst.java b/src/main/java/run/halo/app/model/support/HaloConst.java\n--- a/src/main/java/run/halo/app/model/support/HaloConst.java\n+++ b/src/main/java/run/halo/app/model/support/HaloConst.java\n@@ -134,13 +134,19 @@ public class HaloConst {\n      * Database product name.\n      */\n     public static String DATABASE_PRODUCT_NAME = null;\n+\n     /**\n-     * user_session\n+     * Version constant. (Available in production environment)\n      */\n-    public static String USER_SESSION_KEY = \"user_session\";\n+    public static final String HALO_VERSION;\n \n     /**\n-     * Version constant.\n+     * user_session\n      */\n-    public static String HALO_VERSION = null;\n+    public static String USER_SESSION_KEY = \"user_session\";\n+\n+    static {\n+        // Set version\n+        HALO_VERSION = HaloConst.class.getPackage().getImplementationVersion();\n+    }\n }",
    "output": "fix: rollback #714 pull request. (#838)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n@@ -81,12 +81,12 @@ public class ThemeServiceImpl implements ThemeService {\n     /**\n      * Activated theme id.\n      */\n-    private String activatedThemeId;\n+    private volatile String activatedThemeId;\n \n     /**\n      * Activated theme property.\n      */\n-    private ThemeProperty activatedTheme;\n+    private volatile ThemeProperty activatedTheme;\n \n     public ThemeServiceImpl(HaloProperties haloProperties,\n                             OptionService optionService,\n\ndiff --git a/src/main/java/run/halo/app/utils/ValidationUtils.java b/src/main/java/run/halo/app/utils/ValidationUtils.java\n--- a/src/main/java/run/halo/app/utils/ValidationUtils.java\n+++ b/src/main/java/run/halo/app/utils/ValidationUtils.java\n@@ -19,7 +19,7 @@\n  */\n public class ValidationUtils {\n \n-    private static Validator VALIDATOR;\n+    private static volatile Validator VALIDATOR;\n \n     private ValidationUtils() {\n     }\n@@ -33,8 +33,10 @@ private ValidationUtils() {\n     public static Validator getValidatorOrCreate() {\n         if (VALIDATOR == null) {\n             synchronized (ValidationUtils.class) {\n-                // Init the validation\n-                VALIDATOR = Validation.buildDefaultValidatorFactory().getValidator();\n+                if (VALIDATOR == null) {\n+                    // Init the validation\n+                    VALIDATOR = Validation.buildDefaultValidatorFactory().getValidator();\n+                }\n             }\n         }\n ",
    "output": "fix: volatile in double-checked locking (#799)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/listener/comment/CommentEventListener.java b/src/main/java/run/halo/app/listener/comment/CommentEventListener.java\n--- a/src/main/java/run/halo/app/listener/comment/CommentEventListener.java\n+++ b/src/main/java/run/halo/app/listener/comment/CommentEventListener.java\n@@ -80,11 +80,12 @@ public void handleCommentNewEvent(CommentNewEvent newEvent) {\n \n         User user = userService.getCurrentUser().orElseThrow(() -> new ServiceException(\"未查询到博主信息\"));\n \n-\n         Map<String, Object> data = new HashMap<>();\n \n         StringBuilder subject = new StringBuilder();\n \n+        Boolean enabledAbsolutePath = optionService.isEnabledAbsolutePath();\n+\n         if (newEvent.getSource() instanceof PostCommentService) {\n             // Get postComment id\n             PostComment postComment = postCommentService.getById(newEvent.getCommentId());\n@@ -93,7 +94,7 @@ public void handleCommentNewEvent(CommentNewEvent newEvent) {\n \n             BasePostMinimalDTO post = postService.convertToMinimal(postService.getById(postComment.getPostId()));\n \n-            data.put(\"pageFullPath\", post.getFullPath());\n+            data.put(\"pageFullPath\", enabledAbsolutePath ? post.getFullPath() : optionService.getBlogBaseUrl() + post.getFullPath());\n             data.put(\"pageTitle\", post.getTitle());\n             data.put(\"author\", postComment.getAuthor());\n             data.put(\"content\", postComment.getContent());\n@@ -109,7 +110,7 @@ public void handleCommentNewEvent(CommentNewEvent newEvent) {\n \n             BasePostMinimalDTO sheet = sheetService.convertToMinimal(sheetService.getById(sheetComment.getPostId()));\n \n-            data.put(\"pageFullPath\", sheet.getFullPath());\n+            data.put(\"pageFullPath\", enabledAbsolutePath ? sheet.getFullPath() : optionService.getBlogBaseUrl() + sheet.getFullPath());\n             data.put(\"pageTitle\", sheet.getTitle());\n             data.put(\"author\", sheetComment.getAuthor());\n             data.put(\"content\", sheetComment.getContent());\n@@ -167,6 +168,8 @@ public void handleCommentReplyEvent(CommentReplyEvent replyEvent) {\n \n         StringBuilder subject = new StringBuilder();\n \n+        Boolean enabledAbsolutePath = optionService.isEnabledAbsolutePath();\n+\n         log.debug(\"replyEvent.getSource():\" + replyEvent.getSource().toString());\n \n         if (replyEvent.getSource() instanceof PostCommentService) {\n@@ -187,7 +190,7 @@ public void handleCommentReplyEvent(CommentReplyEvent replyEvent) {\n \n             BasePostMinimalDTO post = postService.convertToMinimal(postService.getById(postComment.getPostId()));\n \n-            data.put(\"pageFullPath\", post.getFullPath());\n+            data.put(\"pageFullPath\", enabledAbsolutePath ? post.getFullPath() : optionService.getBlogBaseUrl() + post.getFullPath());\n             data.put(\"pageTitle\", post.getTitle());\n             data.put(\"baseAuthor\", baseComment.getAuthor());\n             data.put(\"baseContent\", baseComment.getContent());\n@@ -217,7 +220,7 @@ public void handleCommentReplyEvent(CommentReplyEvent replyEvent) {\n \n             BasePostMinimalDTO sheet = sheetService.convertToMinimal(sheetService.getById(sheetComment.getPostId()));\n \n-            data.put(\"pageFullPath\", sheet.getFullPath());\n+            data.put(\"pageFullPath\", enabledAbsolutePath ? sheet.getFullPath() : optionService.getBlogBaseUrl() + sheet.getFullPath());\n             data.put(\"pageTitle\", sheet.getTitle());\n             data.put(\"baseAuthor\", baseComment.getAuthor());\n             data.put(\"baseContent\", baseComment.getContent());",
    "output": "fix: #748 (#749)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/handler/theme/config/impl/YamlThemeConfigResolverImpl.java b/src/main/java/run/halo/app/handler/theme/config/impl/YamlThemeConfigResolverImpl.java\n--- a/src/main/java/run/halo/app/handler/theme/config/impl/YamlThemeConfigResolverImpl.java\n+++ b/src/main/java/run/halo/app/handler/theme/config/impl/YamlThemeConfigResolverImpl.java\n@@ -113,8 +113,8 @@ private List<Item> handleItems(@Nullable Object items) {\n                 item.setName(itemMap.get(\"name\").toString());\n                 item.setLabel(itemMap.getOrDefault(\"label\", item.getName()).toString());\n                 Object dataType = itemMap.getOrDefault(\"data-type\", itemMap.get(\"dataType\"));\n-                item.setDataType(DataType.typeOf(dataType));\n                 item.setType(InputType.typeOf(itemMap.get(\"type\")));\n+                item.setDataType(item.getType().equals(InputType.SWITCH) ? DataType.BOOL : DataType.typeOf(dataType));\n                 item.setDefaultValue(itemMap.get(\"default\"));\n                 item.setPlaceholder(itemMap.getOrDefault(\"placeholder\", \"\").toString());\n                 item.setDescription(itemMap.getOrDefault(\"description\", \"\").toString());\n@@ -140,8 +140,8 @@ private List<Item> handleItems(@Nullable Object items) {\n                 item.setName(key.toString());\n                 item.setLabel(itemMap.getOrDefault(\"label\", item.getName()).toString());\n                 Object dataType = itemMap.getOrDefault(\"data-type\", itemMap.get(\"dataType\"));\n-                item.setDataType(DataType.typeOf(dataType));\n                 item.setType(InputType.typeOf(itemMap.get(\"type\")));\n+                item.setDataType(item.getType().equals(InputType.SWITCH) ? DataType.BOOL : DataType.typeOf(dataType));\n                 item.setDefaultValue(itemMap.get(\"default\"));\n                 item.setPlaceholder(itemMap.getOrDefault(\"placeholder\", \"\").toString());\n                 item.setDescription(itemMap.getOrDefault(\"description\", \"\").toString());\n\ndiff --git a/src/main/java/run/halo/app/model/enums/InputType.java b/src/main/java/run/halo/app/model/enums/InputType.java\n--- a/src/main/java/run/halo/app/model/enums/InputType.java\n+++ b/src/main/java/run/halo/app/model/enums/InputType.java\n@@ -44,7 +44,12 @@ public enum InputType {\n     /**\n      * Attachment picker input type\n      */\n-    ATTACHMENT;\n+    ATTACHMENT,\n+\n+    /**\n+     * Switch input type, only true or false\n+     */\n+    SWITCH;\n \n     /**\n      * Convert type to input type.",
    "output": "feat: add switch type for theme settings. (#735)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/entity/Attachment.java b/src/main/java/run/halo/app/model/entity/Attachment.java\n--- a/src/main/java/run/halo/app/model/entity/Attachment.java\n+++ b/src/main/java/run/halo/app/model/entity/Attachment.java\n@@ -17,7 +17,9 @@\n  */\n @Data\n @Entity\n-@Table(name = \"attachments\", indexes = {@Index(name = \"attachments_media_type\", columnList = \"media_type\")})\n+@Table(name = \"attachments\",\n+    indexes = {@Index(name = \"attachments_media_type\", columnList = \"media_type\"),\n+        @Index(name = \"attachments_create_time\", columnList = \"create_time\")})\n @ToString\n @EqualsAndHashCode(callSuper = true)\n public class Attachment extends BaseEntity {",
    "output": "feat: add index on attachments.create_time (#725)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/entity/Photo.java b/src/main/java/run/halo/app/model/entity/Photo.java\n--- a/src/main/java/run/halo/app/model/entity/Photo.java\n+++ b/src/main/java/run/halo/app/model/entity/Photo.java\n@@ -16,7 +16,9 @@\n  */\n @Data\n @Entity\n-@Table(name = \"photos\", indexes = {@Index(name = \"photos_team\", columnList = \"team\")})\n+@Table(name = \"photos\",\n+    indexes = {@Index(name = \"photos_team\", columnList = \"team\"),\n+        @Index(name = \"photos_create_time\", columnList = \"create_time\")})\n @ToString\n @EqualsAndHashCode(callSuper = true)\n public class Photo extends BaseEntity {",
    "output": "feat: add index on photos.create_time (#727)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/entity/Menu.java b/src/main/java/run/halo/app/model/entity/Menu.java\n--- a/src/main/java/run/halo/app/model/entity/Menu.java\n+++ b/src/main/java/run/halo/app/model/entity/Menu.java\n@@ -16,7 +16,9 @@\n  */\n @Data\n @Entity\n-@Table(name = \"menus\", indexes = {@Index(name = \"menus_parent_id\", columnList = \"parent_id\")})\n+@Table(name = \"menus\",\n+    indexes = {@Index(name = \"menus_parent_id\", columnList = \"parent_id\"),\n+        @Index(name = \"menus_name\", columnList = \"name\")})\n @ToString\n @EqualsAndHashCode(callSuper = true)\n public class Menu extends BaseEntity {",
    "output": "feat: add index on menus.name (#722)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/entity/Attachment.java b/src/main/java/run/halo/app/model/entity/Attachment.java\n--- a/src/main/java/run/halo/app/model/entity/Attachment.java\n+++ b/src/main/java/run/halo/app/model/entity/Attachment.java\n@@ -17,7 +17,7 @@\n  */\n @Data\n @Entity\n-@Table(name = \"attachments\")\n+@Table(name = \"attachments\", indexes = {@Index(name = \"attachments_media_type\", columnList = \"media_type\")})\n @ToString\n @EqualsAndHashCode(callSuper = true)\n public class Attachment extends BaseEntity {",
    "output": "feat: add index on attachments.media_type (#718)"
  },
  {
    "input": "diff --git a/src/test/java/run/halo/app/controller/DisableOnConditionController.java b/src/test/java/run/halo/app/controller/DisableOnConditionController.java\n--- a/src/test/java/run/halo/app/controller/DisableOnConditionController.java\n+++ b/src/test/java/run/halo/app/controller/DisableOnConditionController.java\n@@ -19,7 +19,7 @@ public class DisableOnConditionController {\n     @GetMapping(\"/no\")\n     @DisableOnCondition\n     public BaseResponse<String> blockAccess() {\n-        return BaseResponse.ok(\"测试静止访问\");\n+        return BaseResponse.ok(\"测试禁止访问\");\n     }\n \n     @GetMapping(\"/yes\")",
    "output": "update some chinese descriptions (#711)\n\nCo-authored-by: wangbingzhi <853244870@qq.com>"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/security/filter/ContentFilter.java b/src/main/java/run/halo/app/security/filter/ContentFilter.java\n--- a/src/main/java/run/halo/app/security/filter/ContentFilter.java\n+++ b/src/main/java/run/halo/app/security/filter/ContentFilter.java\n@@ -31,6 +31,8 @@ public ContentFilter(HaloProperties haloProperties,\n                          OneTimeTokenService oneTimeTokenService) {\n         super(haloProperties, optionService, cacheStore, oneTimeTokenService);\n \n+        addUrlPatterns(\"/**\");\n+\n         String adminPattern = HaloUtils.ensureBoth(haloProperties.getAdminPath(), \"/\") + \"**\";\n         addExcludeUrlPatterns(\n             adminPattern,",
    "output": "Fix installation bug (#708)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/StatisticServiceImpl.java b/src/main/java/run/halo/app/service/impl/StatisticServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/StatisticServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/StatisticServiceImpl.java\n@@ -68,7 +68,7 @@ public StatisticServiceImpl(PostService postService,\n     @Override\n     public StatisticDTO getStatistic() {\n         StatisticDTO statisticDTO = new StatisticDTO();\n-        statisticDTO.setPostCount(postService.countByStatus(PostStatus.PUBLISHED) + sheetService.countByStatus(PostStatus.PUBLISHED));\n+        statisticDTO.setPostCount(postService.countByStatus(PostStatus.PUBLISHED));\n \n         // Handle comment count\n         long postCommentCount = postCommentService.countByStatus(CommentStatus.PUBLISHED);",
    "output": "fix: #703 (#705)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/listener/StartedListener.java b/src/main/java/run/halo/app/listener/StartedListener.java\n--- a/src/main/java/run/halo/app/listener/StartedListener.java\n+++ b/src/main/java/run/halo/app/listener/StartedListener.java\n@@ -2,6 +2,7 @@\n \n import lombok.extern.slf4j.Slf4j;\n import org.flywaydb.core.Flyway;\n+import org.flywaydb.core.internal.jdbc.JdbcUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.boot.ansi.AnsiColor;\n@@ -16,13 +17,17 @@\n import org.springframework.util.ResourceUtils;\n import run.halo.app.config.properties.HaloProperties;\n import run.halo.app.model.properties.PrimaryProperties;\n+import run.halo.app.model.support.HaloConst;\n import run.halo.app.service.OptionService;\n import run.halo.app.service.ThemeService;\n import run.halo.app.utils.FileUtils;\n \n import java.io.IOException;\n import java.net.URI;\n import java.nio.file.*;\n+import java.sql.Connection;\n+import java.sql.DatabaseMetaData;\n+import java.sql.SQLException;\n import java.util.Collections;\n \n /**\n@@ -57,7 +62,11 @@ public class StartedListener implements ApplicationListener<ApplicationStartedEv\n \n     @Override\n     public void onApplicationEvent(ApplicationStartedEvent event) {\n-        this.migrate();\n+        try {\n+            this.migrate();\n+        } catch (SQLException e) {\n+            e.printStackTrace();\n+        }\n         this.initThemes();\n         this.initDirectory();\n         this.printStartInfo();\n@@ -77,8 +86,9 @@ private void printStartInfo() {\n     /**\n      * Migrate database.\n      */\n-    private void migrate() {\n+    private void migrate() throws SQLException {\n         log.info(\"Starting migrate database...\");\n+\n         Flyway flyway = Flyway\n             .configure()\n             .locations(\"classpath:/migration\")\n@@ -88,6 +98,19 @@ private void migrate() {\n             .load();\n         flyway.repair();\n         flyway.migrate();\n+\n+        // Gets database connection\n+        Connection connection = flyway.getConfiguration().getDataSource().getConnection();\n+\n+        // Gets database metadata\n+        DatabaseMetaData databaseMetaData = JdbcUtils.getDatabaseMetaData(connection);\n+\n+        // Gets database product name\n+        HaloConst.DATABASE_PRODUCT_NAME = databaseMetaData.getDatabaseProductName() + \" \" + databaseMetaData.getDatabaseProductVersion();\n+\n+        // Close connection.\n+        connection.close();\n+\n         log.info(\"Migrate database succeed.\");\n     }\n \n\ndiff --git a/src/main/java/run/halo/app/model/support/HaloConst.java b/src/main/java/run/halo/app/model/support/HaloConst.java\n--- a/src/main/java/run/halo/app/model/support/HaloConst.java\n+++ b/src/main/java/run/halo/app/model/support/HaloConst.java\n@@ -54,17 +54,14 @@ public class HaloConst {\n      * Version constant. (Available in production environment)\n      */\n     public static final String HALO_VERSION;\n-\n     /**\n      * Path separator.\n      */\n     public static final String FILE_SEPARATOR = File.separator;\n-\n     /**\n      * Suffix of freemarker template file\n      */\n     public static final String SUFFIX_FTL = \".ftl\";\n-\n     /**\n      * Custom freemarker tag method key.\n      */\n@@ -135,12 +132,12 @@ public class HaloConst {\n      * Content api token param name\n      */\n     public final static String API_ACCESS_KEY_QUERY_NAME = \"api_access_key\";\n-\n     public final static String ONE_TIME_TOKEN_QUERY_NAME = \"ott\";\n-\n     public final static String ONE_TIME_TOKEN_HEADER_NAME = \"ott\";\n-\n-\n+    /**\n+     * Database product name.\n+     */\n+    public static String DATABASE_PRODUCT_NAME = null;\n     /**\n      * user_session\n      */\n\ndiff --git a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n@@ -5,7 +5,6 @@\n import cn.hutool.core.util.RandomUtil;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.lang3.StringUtils;\n-import org.springframework.beans.factory.annotation.Value;\n import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.http.ResponseEntity;\n import org.springframework.lang.NonNull;\n@@ -93,10 +92,6 @@ public class AdminServiceImpl implements AdminService {\n \n     private final ApplicationEventPublisher eventPublisher;\n \n-    private final String driverClassName;\n-\n-    private final String mode;\n-\n     public AdminServiceImpl(PostService postService,\n                             SheetService sheetService,\n                             AttachmentService attachmentService,\n@@ -110,9 +105,7 @@ public AdminServiceImpl(PostService postService,\n                             AbstractStringCacheStore cacheStore,\n                             RestTemplate restTemplate,\n                             HaloProperties haloProperties,\n-                            ApplicationEventPublisher eventPublisher,\n-                            @Value(\"${spring.datasource.driver-class-name}\") String driverClassName,\n-                            @Value(\"${spring.profiles.active:prod}\") String mode) {\n+                            ApplicationEventPublisher eventPublisher) {\n         this.postService = postService;\n         this.sheetService = sheetService;\n         this.attachmentService = attachmentService;\n@@ -127,8 +120,6 @@ public AdminServiceImpl(PostService postService,\n         this.restTemplate = restTemplate;\n         this.haloProperties = haloProperties;\n         this.eventPublisher = eventPublisher;\n-        this.driverClassName = driverClassName;\n-        this.mode = mode;\n     }\n \n \n@@ -297,7 +288,7 @@ public EnvironmentDTO getEnvironments() {\n         // Get application start time.\n         environmentDTO.setStartTime(ManagementFactory.getRuntimeMXBean().getStartTime());\n \n-        environmentDTO.setDatabase(\"org.h2.Driver\".equals(driverClassName) ? \"H2\" : \"MySQL\");\n+        environmentDTO.setDatabase(DATABASE_PRODUCT_NAME);\n \n         environmentDTO.setVersion(HaloConst.HALO_VERSION);\n ",
    "output": "refactor: get database version. (#698)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/SheetController.java b/src/main/java/run/halo/app/controller/admin/api/SheetController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/SheetController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/SheetController.java\n@@ -7,7 +7,7 @@\n import org.springframework.data.web.PageableDefault;\n import org.springframework.web.bind.annotation.*;\n import run.halo.app.cache.AbstractStringCacheStore;\n-import run.halo.app.model.dto.InternalSheetDTO;\n+import run.halo.app.model.dto.IndependentSheetDTO;\n import run.halo.app.model.dto.post.BasePostDetailDTO;\n import run.halo.app.model.dto.post.BasePostMinimalDTO;\n import run.halo.app.model.entity.Sheet;\n@@ -67,10 +67,10 @@ public Page<SheetListVO> pageBy(@PageableDefault(sort = \"createTime\", direction\n         return sheetService.convertToListVo(sheetPage);\n     }\n \n-    @GetMapping(\"internal\")\n-    @ApiOperation(\"Lists internal sheets\")\n-    public List<InternalSheetDTO> internalSheets() {\n-        return sheetService.listInternal();\n+    @GetMapping(\"independent\")\n+    @ApiOperation(\"Lists independent sheets\")\n+    public List<IndependentSheetDTO> independentSheets() {\n+        return sheetService.listIndependentSheets();\n     }\n \n     @PostMapping\n\ndiff --git a/src/main/java/run/halo/app/model/dto/IndependentSheetDTO.java b/src/main/java/run/halo/app/model/dto/IndependentSheetDTO.java\n--- a/src/main/java/run/halo/app/model/dto/IndependentSheetDTO.java\n+++ b/src/main/java/run/halo/app/model/dto/IndependentSheetDTO.java\n@@ -9,13 +9,15 @@\n  * @date 2019/5/4\n  */\n @Data\n-public class InternalSheetDTO {\n+public class IndependentSheetDTO {\n \n     private Integer id;\n \n     private String title;\n \n-    private String url;\n+    private String fullPath;\n \n-    private Boolean status;\n+    private String routeName;\n+\n+    private Boolean available;\n }\n\ndiff --git a/src/main/java/run/halo/app/service/SheetService.java b/src/main/java/run/halo/app/service/SheetService.java\n--- a/src/main/java/run/halo/app/service/SheetService.java\n+++ b/src/main/java/run/halo/app/service/SheetService.java\n@@ -2,7 +2,7 @@\n \n import org.springframework.data.domain.Page;\n import org.springframework.lang.NonNull;\n-import run.halo.app.model.dto.InternalSheetDTO;\n+import run.halo.app.model.dto.IndependentSheetDTO;\n import run.halo.app.model.entity.Sheet;\n import run.halo.app.model.entity.SheetMeta;\n import run.halo.app.model.enums.PostStatus;\n@@ -100,12 +100,12 @@ public interface SheetService extends BasePostService<Sheet> {\n     String exportMarkdown(@NonNull Sheet sheet);\n \n     /**\n-     * List internal sheets.\n+     * List independent sheets.\n      *\n-     * @return list of internal sheets\n+     * @return list of independent sheets\n      */\n     @NonNull\n-    List<InternalSheetDTO> listInternal();\n+    List<IndependentSheetDTO> listIndependentSheets();\n \n     /**\n      * Converts to list dto page.\n\ndiff --git a/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java b/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n@@ -13,7 +13,7 @@\n import run.halo.app.event.post.SheetVisitEvent;\n import run.halo.app.exception.AlreadyExistsException;\n import run.halo.app.exception.NotFoundException;\n-import run.halo.app.model.dto.InternalSheetDTO;\n+import run.halo.app.model.dto.IndependentSheetDTO;\n import run.halo.app.model.dto.post.BasePostMinimalDTO;\n import run.halo.app.model.entity.Sheet;\n import run.halo.app.model.entity.SheetComment;\n@@ -191,28 +191,35 @@ public String exportMarkdown(Sheet sheet) {\n     }\n \n     @Override\n-    public List<InternalSheetDTO> listInternal() {\n+    public List<IndependentSheetDTO> listIndependentSheets() {\n+\n+        String context = (optionService.isEnabledAbsolutePath() ? optionService.getBlogBaseUrl() : \"\") + \"/\";\n+\n+        // TODO 日后将重构该部分，提供接口用于拓展独立页面，以供插件系统使用。\n \n         // links sheet\n-        InternalSheetDTO linkSheet = new InternalSheetDTO();\n+        IndependentSheetDTO linkSheet = new IndependentSheetDTO();\n         linkSheet.setId(1);\n         linkSheet.setTitle(\"友情链接\");\n-        linkSheet.setUrl((optionService.isEnabledAbsolutePath() ? optionService.getBlogBaseUrl() : \"\") + \"/\" + optionService.getLinksPrefix());\n-        linkSheet.setStatus(themeService.templateExists(\"links.ftl\"));\n+        linkSheet.setFullPath(context + optionService.getLinksPrefix());\n+        linkSheet.setRouteName(\"LinkList\");\n+        linkSheet.setAvailable(themeService.templateExists(\"links.ftl\"));\n \n         // photos sheet\n-        InternalSheetDTO photoSheet = new InternalSheetDTO();\n+        IndependentSheetDTO photoSheet = new IndependentSheetDTO();\n         photoSheet.setId(2);\n         photoSheet.setTitle(\"图库页面\");\n-        photoSheet.setUrl((optionService.isEnabledAbsolutePath() ? optionService.getBlogBaseUrl() : \"\") + \"/\" + optionService.getPhotosPrefix());\n-        photoSheet.setStatus(themeService.templateExists(\"photos.ftl\"));\n+        photoSheet.setFullPath(context + optionService.getPhotosPrefix());\n+        photoSheet.setRouteName(\"PhotoList\");\n+        photoSheet.setAvailable(themeService.templateExists(\"photos.ftl\"));\n \n         // journals sheet\n-        InternalSheetDTO journalSheet = new InternalSheetDTO();\n+        IndependentSheetDTO journalSheet = new IndependentSheetDTO();\n         journalSheet.setId(3);\n         journalSheet.setTitle(\"日志页面\");\n-        journalSheet.setUrl((optionService.isEnabledAbsolutePath() ? optionService.getBlogBaseUrl() : \"\") + \"/\" + optionService.getJournalsPrefix());\n-        journalSheet.setStatus(themeService.templateExists(\"journals.ftl\"));\n+        journalSheet.setFullPath(context + optionService.getJournalsPrefix());\n+        journalSheet.setRouteName(\"JournalList\");\n+        journalSheet.setAvailable(themeService.templateExists(\"journals.ftl\"));\n \n         return Arrays.asList(linkSheet, photoSheet, journalSheet);\n     }",
    "output": "refactor: independent sheet. (#697)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/LinkController.java b/src/main/java/run/halo/app/controller/admin/api/LinkController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/LinkController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/LinkController.java\n@@ -43,12 +43,6 @@ public LinkDTO getBy(@PathVariable(\"id\") Integer id) {\n         return new LinkDTO().convertFrom(linkService.getById(id));\n     }\n \n-    @GetMapping(\"parse\")\n-    @ApiOperation(\"Gets link by parse url\")\n-    public LinkDTO getByParse(@RequestParam(\"url\") String url) {\n-        return linkService.getByParse(url);\n-    }\n-\n     @PostMapping\n     @ApiOperation(\"Creates a link\")\n     public LinkDTO createBy(@RequestBody @Valid LinkParam linkParam) {\n\ndiff --git a/src/main/java/run/halo/app/handler/migrate/converter/WordPressConverter.java b/src/main/java/run/halo/app/handler/migrate/converter/WordPressConverter.java\n--- a/src/main/java/run/halo/app/handler/migrate/converter/WordPressConverter.java\n+++ b/src/main/java/run/halo/app/handler/migrate/converter/WordPressConverter.java\n@@ -9,7 +9,6 @@\n import run.halo.app.model.entity.BasePost;\n import run.halo.app.model.entity.Category;\n import run.halo.app.model.entity.Tag;\n-import run.halo.app.utils.MarkdownUtils;\n \n import java.util.ArrayList;\n import java.util.Date;\n@@ -129,7 +128,7 @@ private BasePost getBasePostFromItem(Item item) {\n         BasePost post = RelationMapperUtils.convertFrom(item, BasePost.class);\n         Date postDate = DateUtil.parseDateTime(item.getPostDate());\n         if (StringUtils.isNoneEmpty(post.getFormatContent())) {\n-            post.setOriginalContent(MarkdownUtils.renderMarkdown(post.getFormatContent()));\n+            post.setOriginalContent(post.getFormatContent());\n         }\n         post.setCreateTime(postDate);\n         post.setUpdateTime(postDate);\n\ndiff --git a/src/main/java/run/halo/app/model/entity/PostCategory.java b/src/main/java/run/halo/app/model/entity/PostCategory.java\n--- a/src/main/java/run/halo/app/model/entity/PostCategory.java\n+++ b/src/main/java/run/halo/app/model/entity/PostCategory.java\n@@ -1,6 +1,8 @@\n package run.halo.app.model.entity;\n \n-import lombok.Data;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Setter;\n import lombok.ToString;\n import org.hibernate.annotations.GenericGenerator;\n \n@@ -12,12 +14,14 @@\n  *\n  * @author johnniang\n  */\n+@Getter\n+@Setter\n+@ToString(callSuper = true)\n+@RequiredArgsConstructor\n @Entity\n @Table(name = \"post_categories\",\n     indexes = {@Index(name = \"post_categories_post_id\", columnList = \"post_id\"),\n         @Index(name = \"post_categories_category_id\", columnList = \"category_id\")})\n-@Data\n-@ToString(callSuper = true)\n public class PostCategory extends BaseEntity {\n \n     @Id\n\ndiff --git a/src/main/java/run/halo/app/model/entity/PostTag.java b/src/main/java/run/halo/app/model/entity/PostTag.java\n--- a/src/main/java/run/halo/app/model/entity/PostTag.java\n+++ b/src/main/java/run/halo/app/model/entity/PostTag.java\n@@ -1,6 +1,8 @@\n package run.halo.app.model.entity;\n \n-import lombok.Data;\n+import lombok.Getter;\n+import lombok.RequiredArgsConstructor;\n+import lombok.Setter;\n import lombok.ToString;\n import org.hibernate.annotations.GenericGenerator;\n \n@@ -13,12 +15,14 @@\n  * @author ryanwang\n  * @date 2019-03-12\n  */\n-@Data\n+@Getter\n+@Setter\n+@ToString(callSuper = true)\n+@RequiredArgsConstructor\n @Entity\n @Table(name = \"post_tags\",\n     indexes = {@Index(name = \"post_tags_post_id\", columnList = \"post_id\"),\n         @Index(name = \"post_tags_tag_id\", columnList = \"tag_id\")})\n-@ToString(callSuper = true)\n public class PostTag extends BaseEntity {\n \n     @Id\n\ndiff --git a/src/main/java/run/halo/app/service/LinkService.java b/src/main/java/run/halo/app/service/LinkService.java\n--- a/src/main/java/run/halo/app/service/LinkService.java\n+++ b/src/main/java/run/halo/app/service/LinkService.java\n@@ -19,12 +19,6 @@\n  */\n public interface LinkService extends CrudService<Link, Integer> {\n \n-    String META_NAME = \"name\";\n-\n-    String META_DESCRIPTION = \"description\";\n-\n-    String META_CONTENT = \"content\";\n-\n     /**\n      * List link dtos.\n      *\n@@ -66,12 +60,4 @@ public interface LinkService extends CrudService<Link, Integer> {\n      * @return a list of teams.\n      */\n     List<String> listAllTeams();\n-\n-    /**\n-     * Get link by parse url.\n-     *\n-     * @param url url must not be null\n-     * @return link dto\n-     */\n-    LinkDTO getByParse(@NonNull String url);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/LinkServiceImpl.java b/src/main/java/run/halo/app/service/impl/LinkServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/LinkServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/LinkServiceImpl.java\n@@ -1,8 +1,5 @@\n package run.halo.app.service.impl;\n \n-import org.jsoup.Jsoup;\n-import org.jsoup.nodes.Document;\n-import org.jsoup.select.Elements;\n import org.springframework.data.domain.Example;\n import org.springframework.data.domain.Sort;\n import org.springframework.lang.NonNull;\n@@ -11,7 +8,6 @@\n import org.springframework.util.Assert;\n import org.springframework.util.CollectionUtils;\n import run.halo.app.exception.AlreadyExistsException;\n-import run.halo.app.exception.BadRequestException;\n import run.halo.app.model.dto.LinkDTO;\n import run.halo.app.model.entity.Link;\n import run.halo.app.model.params.LinkParam;\n@@ -21,7 +17,6 @@\n import run.halo.app.service.base.AbstractCrudService;\n import run.halo.app.utils.ServiceUtils;\n \n-import java.io.IOException;\n import java.util.*;\n import java.util.stream.Collectors;\n \n@@ -105,30 +100,6 @@ public List<String> listAllTeams() {\n         return linkRepository.findAllTeams();\n     }\n \n-    @Override\n-    public LinkDTO getByParse(String url) {\n-        Assert.hasText(url, \"Url must not be blank\");\n-        LinkDTO linkDTO = new LinkDTO();\n-        linkDTO.setUrl(url);\n-        try {\n-            Document document = Jsoup.connect(url).get();\n-\n-            // Get html title.\n-            linkDTO.setName(document.title());\n-\n-            // Get html metas.\n-            Elements metas = document.head().select(\"meta\");\n-            metas.forEach(element -> {\n-                if (META_DESCRIPTION.equalsIgnoreCase(element.attr(META_NAME))) {\n-                    linkDTO.setDescription(element.attr(META_CONTENT));\n-                }\n-            });\n-        } catch (IOException e) {\n-            throw new BadRequestException(\"获取网站信息失败\").setErrorData(e);\n-        }\n-        return linkDTO;\n-    }\n-\n     @NonNull\n     private List<LinkDTO> convertTo(@Nullable List<Link> links) {\n         if (CollectionUtils.isEmpty(links)) {\n\ndiff --git a/src/main/java/run/halo/app/utils/MarkdownUtils.java b/src/main/java/run/halo/app/utils/MarkdownUtils.java\n--- a/src/main/java/run/halo/app/utils/MarkdownUtils.java\n+++ b/src/main/java/run/halo/app/utils/MarkdownUtils.java\n@@ -1,6 +1,5 @@\n package run.halo.app.utils;\n \n-import com.vladsch.flexmark.convert.html.FlexmarkHtmlParser;\n import com.vladsch.flexmark.ext.attributes.AttributesExtension;\n import com.vladsch.flexmark.ext.autolink.AutolinkExtension;\n import com.vladsch.flexmark.ext.emoji.EmojiExtension;\n@@ -12,15 +11,16 @@\n import com.vladsch.flexmark.ext.gitlab.GitLabExtension;\n import com.vladsch.flexmark.ext.ins.InsExtension;\n import com.vladsch.flexmark.ext.media.tags.MediaTagsExtension;\n+import com.vladsch.flexmark.ext.superscript.SuperscriptExtension;\n import com.vladsch.flexmark.ext.tables.TablesExtension;\n import com.vladsch.flexmark.ext.toc.TocExtension;\n import com.vladsch.flexmark.ext.yaml.front.matter.AbstractYamlFrontMatterVisitor;\n import com.vladsch.flexmark.ext.yaml.front.matter.YamlFrontMatterExtension;\n import com.vladsch.flexmark.html.HtmlRenderer;\n import com.vladsch.flexmark.parser.Parser;\n import com.vladsch.flexmark.util.ast.Node;\n-import com.vladsch.flexmark.util.options.DataHolder;\n-import com.vladsch.flexmark.util.options.MutableDataSet;\n+import com.vladsch.flexmark.util.data.DataHolder;\n+import com.vladsch.flexmark.util.data.MutableDataSet;\n import org.apache.commons.lang3.StringUtils;\n import run.halo.app.model.support.HaloConst;\n \n@@ -32,7 +32,7 @@\n  * Markdown utils.\n  *\n  * @author ryanwang\n- * @date 2019/06/27\n+ * @date 2019-06-27\n  */\n public class MarkdownUtils {\n \n@@ -48,6 +48,7 @@ public class MarkdownUtils {\n             MediaTagsExtension.create(),\n             TablesExtension.create(),\n             TocExtension.create(),\n+            SuperscriptExtension.create(),\n             YamlFrontMatterExtension.create(),\n             GitLabExtension.create())\n         )\n@@ -99,15 +100,15 @@ public static String renderHtml(String markdown) {\n         return RENDERER.render(document);\n     }\n \n-    /**\n-     * Render html document to markdown document.\n-     *\n-     * @param html html document\n-     * @return markdown document\n-     */\n-    public static String renderMarkdown(String html) {\n-        return FlexmarkHtmlParser.parse(html);\n-    }\n+//    /**\n+//     * Render html document to markdown document.\n+//     *\n+//     * @param html html document\n+//     * @return markdown document\n+//     */\n+//    public static String renderMarkdown(String html) {\n+//        return FlexmarkHtmlParser.parse(html);\n+//    }\n \n     /**\n      * Get front-matter",
    "output": "chore: upgrade flexmark version. (#695)\n\n* chore: upgrade flexmark version.\r\n\r\n* fix: test case."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/listener/comment/CommentEventListener.java b/src/main/java/run/halo/app/listener/comment/CommentEventListener.java\n--- a/src/main/java/run/halo/app/listener/comment/CommentEventListener.java\n+++ b/src/main/java/run/halo/app/listener/comment/CommentEventListener.java\n@@ -48,7 +48,9 @@ public class CommentEventListener {\n \n     private final UserService userService;\n \n-    public CommentEventListener(MailService mailService, OptionService optionService, PostCommentService postCommentService, SheetCommentService sheetCommentService, JournalCommentService journalCommentService, PostService postService, SheetService sheetService, JournalService journalService, UserService userService) {\n+    private final ThemeService themeService;\n+\n+    public CommentEventListener(MailService mailService, OptionService optionService, PostCommentService postCommentService, SheetCommentService sheetCommentService, JournalCommentService journalCommentService, PostService postService, SheetService sheetService, JournalService journalService, UserService userService, ThemeService themeService) {\n         this.mailService = mailService;\n         this.optionService = optionService;\n         this.postCommentService = postCommentService;\n@@ -58,6 +60,7 @@ public CommentEventListener(MailService mailService, OptionService optionService\n         this.sheetService = sheetService;\n         this.journalService = journalService;\n         this.userService = userService;\n+        this.themeService = themeService;\n     }\n \n     /**\n@@ -90,8 +93,8 @@ public void handleCommentNewEvent(CommentNewEvent newEvent) {\n \n             BasePostMinimalDTO post = postService.convertToMinimal(postService.getById(postComment.getPostId()));\n \n-            data.put(\"url\", post.getFullPath());\n-            data.put(\"page\", post.getTitle());\n+            data.put(\"pageFullPath\", post.getFullPath());\n+            data.put(\"pageTitle\", post.getTitle());\n             data.put(\"author\", postComment.getAuthor());\n             data.put(\"content\", postComment.getContent());\n \n@@ -106,8 +109,8 @@ public void handleCommentNewEvent(CommentNewEvent newEvent) {\n \n             BasePostMinimalDTO sheet = sheetService.convertToMinimal(sheetService.getById(sheetComment.getPostId()));\n \n-            data.put(\"url\", sheet.getFullPath());\n-            data.put(\"page\", sheet.getTitle());\n+            data.put(\"pageFullPath\", sheet.getFullPath());\n+            data.put(\"pageTitle\", sheet.getTitle());\n             data.put(\"author\", sheetComment.getAuthor());\n             data.put(\"content\", sheetComment.getContent());\n \n@@ -124,15 +127,21 @@ public void handleCommentNewEvent(CommentNewEvent newEvent) {\n             StrBuilder url = new StrBuilder(optionService.getBlogBaseUrl())\n                 .append(\"/\")\n                 .append(optionService.getJournalsPrefix());\n-            data.put(\"url\", url.toString());\n-            data.put(\"page\", journal.getCreateTime());\n+            data.put(\"pageFullPath\", url.toString());\n+            data.put(\"pageTitle\", journal.getCreateTime());\n             data.put(\"author\", journalComment.getAuthor());\n             data.put(\"content\", journalComment.getContent());\n \n             subject.append(\"您的博客日志有了新的评论\");\n         }\n \n-        mailService.sendTemplateMail(user.getEmail(), subject.toString(), data, \"common/mail_template/mail_notice.ftl\");\n+        String template = \"common/mail_template/mail_notice.ftl\";\n+\n+        if (themeService.templateExists(\"mail_template/mail_notice.ftl\")) {\n+            template = themeService.renderWithSuffix(\"mail_template/mail_notice\");\n+        }\n+\n+        mailService.sendTemplateMail(user.getEmail(), subject.toString(), data, template);\n     }\n \n     /**\n@@ -178,8 +187,8 @@ public void handleCommentReplyEvent(CommentReplyEvent replyEvent) {\n \n             BasePostMinimalDTO post = postService.convertToMinimal(postService.getById(postComment.getPostId()));\n \n-            data.put(\"url\", post.getFullPath());\n-            data.put(\"page\", post.getTitle());\n+            data.put(\"pageFullPath\", post.getFullPath());\n+            data.put(\"pageTitle\", post.getTitle());\n             data.put(\"baseAuthor\", baseComment.getAuthor());\n             data.put(\"baseContent\", baseComment.getContent());\n             data.put(\"replyAuthor\", postComment.getAuthor());\n@@ -208,8 +217,8 @@ public void handleCommentReplyEvent(CommentReplyEvent replyEvent) {\n \n             BasePostMinimalDTO sheet = sheetService.convertToMinimal(sheetService.getById(sheetComment.getPostId()));\n \n-            data.put(\"url\", sheet.getFullPath());\n-            data.put(\"page\", sheet.getTitle());\n+            data.put(\"pageFullPath\", sheet.getFullPath());\n+            data.put(\"pageTitle\", sheet.getTitle());\n             data.put(\"baseAuthor\", baseComment.getAuthor());\n             data.put(\"baseContent\", baseComment.getContent());\n             data.put(\"replyAuthor\", sheetComment.getAuthor());\n@@ -240,8 +249,8 @@ public void handleCommentReplyEvent(CommentReplyEvent replyEvent) {\n             StrBuilder url = new StrBuilder(optionService.getBlogBaseUrl())\n                 .append(\"/\")\n                 .append(optionService.getJournalsPrefix());\n-            data.put(\"url\", url);\n-            data.put(\"page\", journal.getContent());\n+            data.put(\"pageFullPath\", url);\n+            data.put(\"pageTitle\", journal.getContent());\n             data.put(\"baseAuthor\", baseComment.getAuthor());\n             data.put(\"baseContent\", baseComment.getContent());\n             data.put(\"replyAuthor\", journalComment.getAuthor());\n@@ -253,6 +262,12 @@ public void handleCommentReplyEvent(CommentReplyEvent replyEvent) {\n                 .append(\"有了新的评论。\");\n         }\n \n-        mailService.sendTemplateMail(baseAuthorEmail, subject.toString(), data, \"common/mail_template/mail_reply.ftl\");\n+        String template = \"common/mail_template/mail_reply.ftl\";\n+\n+        if (themeService.templateExists(\"mail_template/mail_reply.ftl\")) {\n+            template = themeService.renderWithSuffix(\"mail_template/mail_reply\");\n+        }\n+\n+        mailService.sendTemplateMail(baseAuthorEmail, subject.toString(), data, template);\n     }\n }",
    "output": "feat: support custom email templates. (#691)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java b/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n--- a/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n+++ b/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n@@ -4,10 +4,6 @@\n import freemarker.core.TemplateClassResolver;\n import freemarker.template.TemplateException;\n import freemarker.template.TemplateExceptionHandler;\n-import freemarker.template.TemplateModel;\n-import kr.pe.kwonnam.freemarker.inheritance.BlockDirective;\n-import kr.pe.kwonnam.freemarker.inheritance.ExtendsDirective;\n-import kr.pe.kwonnam.freemarker.inheritance.PutDirective;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.boot.jackson.JsonComponentModule;\n import org.springframework.context.annotation.Bean;\n@@ -39,7 +35,10 @@\n \n import javax.servlet.http.HttpServletRequest;\n import java.io.IOException;\n-import java.util.*;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.Set;\n \n import static run.halo.app.model.support.HaloConst.FILE_SEPARATOR;\n import static run.halo.app.utils.HaloUtils.*;\n@@ -135,16 +134,6 @@ public void addFormatters(FormatterRegistry registry) {\n         registry.addConverterFactory(new StringToEnumConverterFactory());\n     }\n \n-    @Bean\n-    public Map<String, TemplateModel> freemarkerLayoutDirectives() {\n-        Map<String, TemplateModel> freemarkerLayoutDirectives = new HashMap<>(5);\n-        freemarkerLayoutDirectives.put(\"extends\", new ExtendsDirective());\n-        freemarkerLayoutDirectives.put(\"block\", new BlockDirective());\n-        freemarkerLayoutDirectives.put(\"put\", new PutDirective());\n-\n-        return freemarkerLayoutDirectives;\n-    }\n-\n     /**\n      * Configuring freemarker template file path.\n      *\n@@ -173,13 +162,6 @@ public FreeMarkerConfigurer freemarkerConfig(HaloProperties haloProperties) thro\n         // Set predefined freemarker configuration\n         configurer.setConfiguration(configuration);\n \n-        // Set layout variable\n-        Map<String, Object> freemarkerVariables = new HashMap<>(3);\n-\n-        freemarkerVariables.put(\"layout\", freemarkerLayoutDirectives());\n-\n-        configurer.setFreemarkerVariables(freemarkerVariables);\n-\n         return configurer;\n     }\n \n\ndiff --git a/src/main/java/run/halo/app/handler/file/AliOssFileHandler.java b/src/main/java/run/halo/app/handler/file/AliOssFileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/AliOssFileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/AliOssFileHandler.java\n@@ -107,6 +107,7 @@ public UploadResult upload(MultipartFile file) {\n             // Handle thumbnail\n             if (FileHandler.isImageType(uploadResult.getMediaType())) {\n                 ImageReader image = ImageUtils.getImageReaderFromFile(file.getInputStream(), extension);\n+                assert image != null;\n                 uploadResult.setWidth(image.getWidth(0));\n                 uploadResult.setHeight(image.getHeight(0));\n                 if (ImageUtils.EXTENSION_ICO.equals(extension)) {\n\ndiff --git a/src/main/java/run/halo/app/handler/file/BaiduBosFileHandler.java b/src/main/java/run/halo/app/handler/file/BaiduBosFileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/BaiduBosFileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/BaiduBosFileHandler.java\n@@ -88,6 +88,7 @@ public UploadResult upload(MultipartFile file) {\n             // Handle thumbnail\n             if (FileHandler.isImageType(uploadResult.getMediaType())) {\n                 ImageReader image = ImageUtils.getImageReaderFromFile(file.getInputStream(), extension);\n+                assert image != null;\n                 uploadResult.setWidth(image.getWidth(0));\n                 uploadResult.setHeight(image.getHeight(0));\n                 if (ImageUtils.EXTENSION_ICO.equals(extension)) {\n\ndiff --git a/src/main/java/run/halo/app/handler/file/TencentCosFileHandler.java b/src/main/java/run/halo/app/handler/file/TencentCosFileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/TencentCosFileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/TencentCosFileHandler.java\n@@ -119,6 +119,7 @@ public UploadResult upload(MultipartFile file) {\n             // Handle thumbnail\n             if (FileHandler.isImageType(uploadResult.getMediaType())) {\n                 ImageReader image = ImageUtils.getImageReaderFromFile(file.getInputStream(), extension);\n+                assert image != null;\n                 uploadResult.setWidth(image.getWidth(0));\n                 uploadResult.setHeight(image.getHeight(0));\n                 if (ImageUtils.EXTENSION_ICO.equals(extension)) {\n\ndiff --git a/src/main/java/run/halo/app/handler/file/UpOssFileHandler.java b/src/main/java/run/halo/app/handler/file/UpOssFileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/UpOssFileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/UpOssFileHandler.java\n@@ -1,7 +1,9 @@\n package run.halo.app.handler.file;\n \n-import com.UpYun;\n+import com.upyun.RestManager;\n+import com.upyun.UpException;\n import lombok.extern.slf4j.Slf4j;\n+import okhttp3.Response;\n import org.apache.commons.lang3.StringUtils;\n import org.springframework.http.MediaType;\n import org.springframework.stereotype.Component;\n@@ -17,6 +19,9 @@\n import run.halo.app.utils.ImageUtils;\n \n import javax.imageio.ImageReader;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n import java.util.Objects;\n \n /**\n@@ -50,11 +55,11 @@ public UploadResult upload(MultipartFile file) {\n         String styleRule = optionService.getByPropertyOrDefault(UpOssProperties.OSS_STYLE_RULE, String.class, \"\");\n         String thumbnailStyleRule = optionService.getByPropertyOrDefault(UpOssProperties.OSS_THUMBNAIL_STYLE_RULE, String.class, \"\");\n \n-        // Create up yun\n-        UpYun upYun = new UpYun(bucket, operator, password);\n-        upYun.setDebug(log.isDebugEnabled());\n-        upYun.setTimeout(60);\n-        upYun.setApiDomain(UpYun.ED_AUTO);\n+        RestManager manager = new RestManager(bucket, operator, password);\n+        manager.setTimeout(60 * 10);\n+        manager.setApiDomain(RestManager.ED_AUTO);\n+\n+        Map<String, String> params = new HashMap<>();\n \n         try {\n             // Get file basename\n@@ -66,10 +71,10 @@ public UploadResult upload(MultipartFile file) {\n             // Build file path\n             String upFilePath = StringUtils.appendIfMissing(source, \"/\") + md5OfFile + '.' + extension;\n             // Set md5Content\n-            upYun.setContentMD5(md5OfFile);\n+            params.put(RestManager.PARAMS.CONTENT_MD5.getValue(), md5OfFile);\n             // Write file\n-            boolean uploadSuccess = upYun.writeFile(upFilePath, file.getInputStream(), true, null);\n-            if (!uploadSuccess) {\n+            Response result = manager.writeFile(upFilePath, file.getInputStream(), params);\n+            if (!result.isSuccessful()) {\n                 throw new FileOperationException(\"上传附件 \" + file.getOriginalFilename() + \" 到又拍云失败\" + upFilePath);\n             }\n \n@@ -87,6 +92,7 @@ public UploadResult upload(MultipartFile file) {\n             // Handle thumbnail\n             if (FileHandler.isImageType(uploadResult.getMediaType())) {\n                 ImageReader image = ImageUtils.getImageReaderFromFile(file.getInputStream(), extension);\n+                assert image != null;\n                 uploadResult.setWidth(image.getWidth(0));\n                 uploadResult.setHeight(image.getHeight(0));\n                 if (ImageUtils.EXTENSION_ICO.equals(extension)) {\n@@ -111,18 +117,17 @@ public void delete(String key) {\n         String bucket = optionService.getByPropertyOfNonNull(UpOssProperties.OSS_BUCKET).toString();\n         String operator = optionService.getByPropertyOfNonNull(UpOssProperties.OSS_OPERATOR).toString();\n \n-        // Create up yun\n-        UpYun upYun = new UpYun(bucket, operator, password);\n-        // Set api domain with ED_AUTO\n-        upYun.setApiDomain(UpYun.ED_AUTO);\n+        RestManager manager = new RestManager(bucket, operator, password);\n+        manager.setTimeout(60 * 10);\n+        manager.setApiDomain(RestManager.ED_AUTO);\n \n         try {\n-            // Delete the file\n-            boolean deleteResult = upYun.deleteFile(key);\n-            if (!deleteResult) {\n-                log.warn(\"Failed to delete file \" + key + \" from UpYun\");\n+            Response result = manager.deleteFile(key, null);\n+            if (!result.isSuccessful()) {\n+                log.warn(\"附件 \" + key + \" 从又拍云删除失败\");\n             }\n-        } catch (Exception e) {\n+        } catch (IOException | UpException e) {\n+            e.printStackTrace();\n             throw new FileOperationException(\"附件 \" + key + \" 从又拍云删除失败\", e);\n         }\n     }",
    "output": "chore: upgrade gradle and dependencies. (#688)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/core/freemarker/tag/CategoryTagDirective.java b/src/main/java/run/halo/app/core/freemarker/tag/CategoryTagDirective.java\n--- a/src/main/java/run/halo/app/core/freemarker/tag/CategoryTagDirective.java\n+++ b/src/main/java/run/halo/app/core/freemarker/tag/CategoryTagDirective.java\n@@ -46,6 +46,9 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars, Templ\n                 case \"list\":\n                     env.setVariable(\"categories\", builder.build().wrap(postCategoryService.listCategoryWithPostCountDto(Sort.by(DESC, \"createTime\"))));\n                     break;\n+                case \"tree\":\n+                    env.setVariable(\"categories\", builder.build().wrap(categoryService.listAsTree(Sort.by(DESC, \"createTime\"))));\n+                    break;\n                 case \"listByPostId\":\n                     Integer postId = Integer.parseInt(params.get(\"postId\").toString());\n                     List<Category> categories = postCategoryService.listCategoriesBy(postId);\n\ndiff --git a/src/main/java/run/halo/app/service/impl/CategoryServiceImpl.java b/src/main/java/run/halo/app/service/impl/CategoryServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/CategoryServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/CategoryServiceImpl.java\n@@ -123,6 +123,21 @@ private void concreteTree(CategoryVO parentCategory, List<Category> categories)\n             if (parentCategory.getChildren() == null) {\n                 parentCategory.setChildren(new LinkedList<>());\n             }\n+\n+            StringBuilder fullPath = new StringBuilder();\n+\n+            if (optionService.isEnabledAbsolutePath()) {\n+                fullPath.append(optionService.getBlogBaseUrl());\n+            }\n+\n+            fullPath.append(\"/\")\n+                .append(optionService.getCategoriesPrefix())\n+                .append(\"/\")\n+                .append(child.getSlug())\n+                .append(optionService.getPathSuffix());\n+\n+            child.setFullPath(fullPath.toString());\n+\n             // Add child\n             parentCategory.getChildren().add(child);\n         });",
    "output": "feat: #598 (#689)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/entity/BaseComment.java b/src/main/java/run/halo/app/model/entity/BaseComment.java\n--- a/src/main/java/run/halo/app/model/entity/BaseComment.java\n+++ b/src/main/java/run/halo/app/model/entity/BaseComment.java\n@@ -19,7 +19,10 @@\n  */\n @Data\n @Entity(name = \"BaseComment\")\n-@Table(name = \"comments\", indexes = {@Index(name = \"comments_post_id\", columnList = \"post_id\")})\n+@Table(name = \"comments\",\n+    indexes = {@Index(name = \"comments_post_id\", columnList = \"post_id\"),\n+        @Index(name = \"comments_type_status\", columnList = \"type, status\"),\n+        @Index(name = \"comments_parent_id\", columnList = \"parent_id\")})\n @DiscriminatorColumn(name = \"type\", discriminatorType = DiscriminatorType.INTEGER, columnDefinition = \"int default 0\")\n @ToString(callSuper = true)\n @EqualsAndHashCode(callSuper = true)",
    "output": "feat: add Index on comments.(type,status) and comments.parent_id (#686)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/entity/BasePost.java b/src/main/java/run/halo/app/model/entity/BasePost.java\n--- a/src/main/java/run/halo/app/model/entity/BasePost.java\n+++ b/src/main/java/run/halo/app/model/entity/BasePost.java\n@@ -19,7 +19,9 @@\n  */\n @Data\n @Entity(name = \"BasePost\")\n-@Table(name = \"posts\")\n+@Table(name = \"posts\",\n+    indexes = {@Index(name = \"posts_type_status\", columnList = \"type, status\"),\n+        @Index(name = \"posts_create_time\", columnList = \"create_time\")})\n @DiscriminatorColumn(name = \"type\", discriminatorType = DiscriminatorType.INTEGER, columnDefinition = \"int default 0\")\n @ToString(callSuper = true)\n @EqualsAndHashCode(callSuper = true)",
    "output": "feat: add Index on posts.(type,status) and posts.create_time (#684)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/api/JournalController.java b/src/main/java/run/halo/app/controller/content/api/JournalController.java\n--- a/src/main/java/run/halo/app/controller/content/api/JournalController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/JournalController.java\n@@ -8,6 +8,7 @@\n import org.springframework.data.web.PageableDefault;\n import org.springframework.data.web.SortDefault;\n import org.springframework.web.bind.annotation.*;\n+import org.springframework.web.util.HtmlUtils;\n import run.halo.app.cache.lock.CacheLock;\n import run.halo.app.model.dto.BaseCommentDTO;\n import run.halo.app.model.dto.JournalDTO;\n@@ -24,6 +25,7 @@\n import run.halo.app.service.JournalService;\n import run.halo.app.service.OptionService;\n \n+import java.nio.charset.StandardCharsets;\n import java.util.List;\n \n import static org.springframework.data.domain.Sort.Direction.DESC;\n@@ -108,6 +110,9 @@ public Page<BaseCommentWithParentVO> listComments(@PathVariable(\"journalId\") Int\n     @ApiOperation(\"Comments a post\")\n     @CacheLock(autoDelete = false, traceRequest = true)\n     public BaseCommentDTO comment(@RequestBody JournalCommentParam journalCommentParam) {\n+\n+        // Escape content\n+        journalCommentParam.setContent(HtmlUtils.htmlEscape(journalCommentParam.getContent(), StandardCharsets.UTF_8.displayName()));\n         return journalCommentService.convertTo(journalCommentService.createBy(journalCommentParam));\n     }\n }\n\ndiff --git a/src/main/java/run/halo/app/controller/content/api/PostController.java b/src/main/java/run/halo/app/controller/content/api/PostController.java\n--- a/src/main/java/run/halo/app/controller/content/api/PostController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/PostController.java\n@@ -8,6 +8,7 @@\n import org.springframework.data.web.PageableDefault;\n import org.springframework.data.web.SortDefault;\n import org.springframework.web.bind.annotation.*;\n+import org.springframework.web.util.HtmlUtils;\n import run.halo.app.cache.lock.CacheLock;\n import run.halo.app.model.dto.BaseCommentDTO;\n import run.halo.app.model.dto.post.BasePostSimpleDTO;\n@@ -21,6 +22,7 @@\n import run.halo.app.service.PostCommentService;\n import run.halo.app.service.PostService;\n \n+import java.nio.charset.StandardCharsets;\n import java.util.List;\n \n import static org.springframework.data.domain.Sort.Direction.DESC;\n@@ -131,6 +133,9 @@ public Page<BaseCommentWithParentVO> listComments(@PathVariable(\"postId\") Intege\n     @CacheLock(autoDelete = false, traceRequest = true)\n     public BaseCommentDTO comment(@RequestBody PostCommentParam postCommentParam) {\n         postCommentService.validateCommentBlackListStatus();\n+\n+        // Escape content\n+        postCommentParam.setContent(HtmlUtils.htmlEscape(postCommentParam.getContent(), StandardCharsets.UTF_8.displayName()));\n         return postCommentService.convertTo(postCommentService.createBy(postCommentParam));\n     }\n \n\ndiff --git a/src/main/java/run/halo/app/controller/content/api/SheetController.java b/src/main/java/run/halo/app/controller/content/api/SheetController.java\n--- a/src/main/java/run/halo/app/controller/content/api/SheetController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/SheetController.java\n@@ -8,6 +8,7 @@\n import org.springframework.data.web.PageableDefault;\n import org.springframework.data.web.SortDefault;\n import org.springframework.web.bind.annotation.*;\n+import org.springframework.web.util.HtmlUtils;\n import run.halo.app.cache.lock.CacheLock;\n import run.halo.app.model.dto.BaseCommentDTO;\n import run.halo.app.model.entity.Sheet;\n@@ -20,6 +21,7 @@\n import run.halo.app.service.SheetCommentService;\n import run.halo.app.service.SheetService;\n \n+import java.nio.charset.StandardCharsets;\n import java.util.List;\n \n import static org.springframework.data.domain.Sort.Direction.DESC;\n@@ -116,6 +118,9 @@ public Page<BaseCommentWithParentVO> listComments(@PathVariable(\"sheetId\") Integ\n     @ApiOperation(\"Comments a post\")\n     @CacheLock(autoDelete = false, traceRequest = true)\n     public BaseCommentDTO comment(@RequestBody SheetCommentParam sheetCommentParam) {\n+\n+        // Escape content\n+        sheetCommentParam.setContent(HtmlUtils.htmlEscape(sheetCommentParam.getContent(), StandardCharsets.UTF_8.displayName()));\n         return sheetCommentService.convertTo(sheetCommentService.createBy(sheetCommentParam));\n     }\n }",
    "output": "fix: #547 (#677)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/repository/PostRepository.java b/src/main/java/run/halo/app/repository/PostRepository.java\n--- a/src/main/java/run/halo/app/repository/PostRepository.java\n+++ b/src/main/java/run/halo/app/repository/PostRepository.java\n@@ -45,7 +45,7 @@ public interface PostRepository extends BasePostRepository<Post>, JpaSpecificati\n      * @param slug  post slug\n      * @return a optional of post\n      */\n-    @Query(\"select post from Post post where DateUtil.year(post.createTime) = :year and DateUtil.month(post.createTime) = :month and post.slug = :slug\")\n+    @Query(\"select post from Post post where year(post.createTime) = :year and month(post.createTime) = :month and post.slug = :slug\")\n     Optional<Post> findBy(@Param(\"year\") Integer year, @Param(\"month\") Integer month, @Param(\"slug\") String slug);\n \n     /**\n@@ -57,7 +57,7 @@ public interface PostRepository extends BasePostRepository<Post>, JpaSpecificati\n      * @param status post status\n      * @return a optional of post\n      */\n-    @Query(\"select post from Post post where DateUtil.year(post.createTime) = :year and DateUtil.month(post.createTime) = :month and post.slug = :slug and post.status = :status\")\n+    @Query(\"select post from Post post where year(post.createTime) = :year and month(post.createTime) = :month and post.slug = :slug and post.status = :status\")\n     Optional<Post> findBy(@Param(\"year\") Integer year, @Param(\"month\") Integer month, @Param(\"slug\") String slug, @Param(\"status\") PostStatus status);\n \n     /**\n@@ -69,7 +69,7 @@ public interface PostRepository extends BasePostRepository<Post>, JpaSpecificati\n      * @param slug  post slug\n      * @return a optional of post\n      */\n-    @Query(\"select post from Post post where DateUtil.year(post.createTime) = :year and DateUtil.month(post.createTime) = :month and DateUtil.dayOfMonth(post.createTime) = :day and post.slug = :slug\")\n+    @Query(\"select post from Post post where year(post.createTime) = :year and month(post.createTime) = :month and day(post.createTime) = :day and post.slug = :slug\")\n     Optional<Post> findBy(@Param(\"year\") Integer year, @Param(\"month\") Integer month, @Param(\"day\") Integer day, @Param(\"slug\") String slug);\n \n     /**\n@@ -82,6 +82,6 @@ public interface PostRepository extends BasePostRepository<Post>, JpaSpecificati\n      * @param status post status\n      * @return a optional of post\n      */\n-    @Query(\"select post from Post post where DateUtil.year(post.createTime) = :year and DateUtil.month(post.createTime) = :month and DateUtil.dayOfMonth(post.createTime) = :day and post.slug = :slug and post.status = :status\")\n+    @Query(\"select post from Post post where year(post.createTime) = :year and month(post.createTime) = :month and day(post.createTime) = :day and post.slug = :slug and post.status = :status\")\n     Optional<Post> findBy(@Param(\"year\") Integer year, @Param(\"month\") Integer month, @Param(\"day\") Integer day, @Param(\"slug\") String slug, @Param(\"status\") PostStatus status);\n }",
    "output": "fix: post query sql. (#676)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/entity/ThemeSetting.java b/src/main/java/run/halo/app/model/entity/ThemeSetting.java\n--- a/src/main/java/run/halo/app/model/entity/ThemeSetting.java\n+++ b/src/main/java/run/halo/app/model/entity/ThemeSetting.java\n@@ -14,7 +14,9 @@\n  */\n @Data\n @Entity\n-@Table(name = \"theme_settings\")\n+@Table(name = \"theme_settings\",\n+    indexes = {@Index(name = \"theme_settings_setting_key\", columnList = \"setting_key\"),\n+        @Index(name = \"theme_settings_theme_id\", columnList = \"theme_id\")})\n @ToString(callSuper = true)\n @EqualsAndHashCode(callSuper = true)\n public class ThemeSetting extends BaseEntity {",
    "output": "feat: add Index on theme_settings.setting_key and theme_settings.theme_id (#681)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/entity/PostTag.java b/src/main/java/run/halo/app/model/entity/PostTag.java\n--- a/src/main/java/run/halo/app/model/entity/PostTag.java\n+++ b/src/main/java/run/halo/app/model/entity/PostTag.java\n@@ -14,7 +14,9 @@\n  */\n @Data\n @Entity\n-@Table(name = \"post_tags\")\n+@Table(name = \"post_tags\",\n+    indexes = {@Index(name = \"post_tags_post_id\", columnList = \"post_id\"),\n+        @Index(name = \"post_tags_tag_id\", columnList = \"tag_id\")})\n @ToString(callSuper = true)\n public class PostTag extends BaseEntity {\n ",
    "output": "feat: add Index on post_tags.post_id and post_tags.tag.id (#675)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/entity/PostCategory.java b/src/main/java/run/halo/app/model/entity/PostCategory.java\n--- a/src/main/java/run/halo/app/model/entity/PostCategory.java\n+++ b/src/main/java/run/halo/app/model/entity/PostCategory.java\n@@ -12,7 +12,9 @@\n  * @author johnniang\n  */\n @Entity\n-@Table(name = \"post_categories\")\n+@Table(name = \"post_categories\",\n+    indexes = {@Index(name = \"post_categories_post_id\", columnList = \"post_id\"),\n+    @Index(name = \"post_categories_category_id\", columnList = \"category_id\")})\n @Data\n @ToString(callSuper = true)\n public class PostCategory extends BaseEntity {",
    "output": "feat: add Index on post_categories.post_id and post_categories.category_id (#671)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/entity/Log.java b/src/main/java/run/halo/app/model/entity/Log.java\n--- a/src/main/java/run/halo/app/model/entity/Log.java\n+++ b/src/main/java/run/halo/app/model/entity/Log.java\n@@ -15,7 +15,7 @@\n  */\n @Data\n @Entity\n-@Table(name = \"logs\")\n+@Table(name = \"logs\", indexes = {@Index(name = \"logs_create_time\", columnList = \"create_time\")})\n @ToString\n @EqualsAndHashCode(callSuper = true)\n public class Log extends BaseEntity {",
    "output": "feat: add Index on logs.create_time (#668)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/handler/file/AliOssFileHandler.java b/src/main/java/run/halo/app/handler/file/AliOssFileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/AliOssFileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/AliOssFileHandler.java\n@@ -18,7 +18,7 @@\n import run.halo.app.utils.FilenameUtils;\n import run.halo.app.utils.ImageUtils;\n \n-import java.awt.image.BufferedImage;\n+import javax.imageio.ImageReader;\n import java.util.Objects;\n \n /**\n@@ -106,9 +106,9 @@ public UploadResult upload(MultipartFile file) {\n \n             // Handle thumbnail\n             if (FileHandler.isImageType(uploadResult.getMediaType())) {\n-                BufferedImage image = ImageUtils.getImageFromFile(file.getInputStream(), extension);\n-                uploadResult.setWidth(image.getWidth());\n-                uploadResult.setHeight(image.getHeight());\n+                ImageReader image = ImageUtils.getImageReaderFromFile(file.getInputStream(), extension);\n+                uploadResult.setWidth(image.getWidth(0));\n+                uploadResult.setHeight(image.getHeight(0));\n                 if (ImageUtils.EXTENSION_ICO.equals(extension)) {\n                     uploadResult.setThumbPath(filePath);\n                 } else {\n\ndiff --git a/src/main/java/run/halo/app/handler/file/BaiduBosFileHandler.java b/src/main/java/run/halo/app/handler/file/BaiduBosFileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/BaiduBosFileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/BaiduBosFileHandler.java\n@@ -19,7 +19,7 @@\n import run.halo.app.utils.FilenameUtils;\n import run.halo.app.utils.ImageUtils;\n \n-import java.awt.image.BufferedImage;\n+import javax.imageio.ImageReader;\n import java.util.Objects;\n \n /**\n@@ -87,9 +87,9 @@ public UploadResult upload(MultipartFile file) {\n \n             // Handle thumbnail\n             if (FileHandler.isImageType(uploadResult.getMediaType())) {\n-                BufferedImage image = ImageUtils.getImageFromFile(file.getInputStream(), extension);\n-                uploadResult.setWidth(image.getWidth());\n-                uploadResult.setHeight(image.getHeight());\n+                ImageReader image = ImageUtils.getImageReaderFromFile(file.getInputStream(), extension);\n+                uploadResult.setWidth(image.getWidth(0));\n+                uploadResult.setHeight(image.getHeight(0));\n                 if (ImageUtils.EXTENSION_ICO.equals(extension)) {\n                     uploadResult.setThumbPath(filePath);\n                 } else {\n\ndiff --git a/src/main/java/run/halo/app/handler/file/LocalFileHandler.java b/src/main/java/run/halo/app/handler/file/LocalFileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/LocalFileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/LocalFileHandler.java\n@@ -236,7 +236,9 @@ private boolean generateThumbnail(BufferedImage originalImage, Path thumbPath, S\n             log.warn(\"Failed to generate thumbnail: \" + thumbPath, t);\n         } finally {\n             // Disposes of this graphics context and releases any system resources that it is using.\n-            originalImage.getGraphics().dispose();\n+            if (originalImage != null) {\n+                originalImage.getGraphics().dispose();\n+            }\n         }\n         return result;\n     }\n\ndiff --git a/src/main/java/run/halo/app/handler/file/TencentCosFileHandler.java b/src/main/java/run/halo/app/handler/file/TencentCosFileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/TencentCosFileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/TencentCosFileHandler.java\n@@ -22,7 +22,7 @@\n import run.halo.app.utils.FilenameUtils;\n import run.halo.app.utils.ImageUtils;\n \n-import java.awt.image.BufferedImage;\n+import javax.imageio.ImageReader;\n import java.util.Objects;\n \n /**\n@@ -118,9 +118,9 @@ public UploadResult upload(MultipartFile file) {\n \n             // Handle thumbnail\n             if (FileHandler.isImageType(uploadResult.getMediaType())) {\n-                BufferedImage image = ImageUtils.getImageFromFile(file.getInputStream(), extension);\n-                uploadResult.setWidth(image.getWidth());\n-                uploadResult.setHeight(image.getHeight());\n+                ImageReader image = ImageUtils.getImageReaderFromFile(file.getInputStream(), extension);\n+                uploadResult.setWidth(image.getWidth(0));\n+                uploadResult.setHeight(image.getHeight(0));\n                 if (ImageUtils.EXTENSION_ICO.equals(extension)) {\n                     uploadResult.setThumbPath(filePath);\n                 } else {\n\ndiff --git a/src/main/java/run/halo/app/handler/file/UpOssFileHandler.java b/src/main/java/run/halo/app/handler/file/UpOssFileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/UpOssFileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/UpOssFileHandler.java\n@@ -16,7 +16,7 @@\n import run.halo.app.utils.FilenameUtils;\n import run.halo.app.utils.ImageUtils;\n \n-import java.awt.image.BufferedImage;\n+import javax.imageio.ImageReader;\n import java.util.Objects;\n \n /**\n@@ -86,9 +86,9 @@ public UploadResult upload(MultipartFile file) {\n \n             // Handle thumbnail\n             if (FileHandler.isImageType(uploadResult.getMediaType())) {\n-                BufferedImage image = ImageUtils.getImageFromFile(file.getInputStream(), extension);\n-                uploadResult.setWidth(image.getWidth());\n-                uploadResult.setHeight(image.getHeight());\n+                ImageReader image = ImageUtils.getImageReaderFromFile(file.getInputStream(), extension);\n+                uploadResult.setWidth(image.getWidth(0));\n+                uploadResult.setHeight(image.getHeight(0));\n                 if (ImageUtils.EXTENSION_ICO.equals(extension)) {\n                     uploadResult.setThumbPath(filePath);\n                 } else {\n\ndiff --git a/src/main/java/run/halo/app/utils/ImageUtils.java b/src/main/java/run/halo/app/utils/ImageUtils.java\n--- a/src/main/java/run/halo/app/utils/ImageUtils.java\n+++ b/src/main/java/run/halo/app/utils/ImageUtils.java\n@@ -4,9 +4,12 @@\n import net.sf.image4j.codec.ico.ICODecoder;\n \n import javax.imageio.ImageIO;\n+import javax.imageio.ImageReader;\n+import javax.imageio.stream.ImageInputStream;\n import java.awt.image.BufferedImage;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.util.Iterator;\n \n /**\n  * @author ryanwang\n@@ -26,4 +29,18 @@ public static BufferedImage getImageFromFile(InputStream is, String extension) t\n             return ImageIO.read(is);\n         }\n     }\n+\n+    public static ImageReader getImageReaderFromFile(InputStream is,String formatName) {\n+        try {\n+            Iterator<ImageReader> readerIterator = ImageIO.getImageReadersByFormatName(formatName);\n+            ImageReader reader = readerIterator.next();\n+            ImageInputStream stream = ImageIO.createImageInputStream(is);\n+            ImageIO.getImageReadersByFormatName(formatName);\n+            reader.setInput(stream, true);\n+            return reader;\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+        return null;\n+    }\n }",
    "output": "reduce: memory usage during image upload (#659)\n\n* optimize FileHandler's logic\r\n\r\n* fix code style\r\n\r\n* fix: maybe happen OOM when file upload, see #529\r\n\r\n* refactor: HashMap -> ConcurrentHashMap\r\n\r\n* remove unused class\r\n\r\n* reduce memory usage during image upload\r\n\r\n* code clean"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/entity/BaseComment.java b/src/main/java/run/halo/app/model/entity/BaseComment.java\n--- a/src/main/java/run/halo/app/model/entity/BaseComment.java\n+++ b/src/main/java/run/halo/app/model/entity/BaseComment.java\n@@ -18,7 +18,7 @@\n  */\n @Data\n @Entity(name = \"BaseComment\")\n-@Table(name = \"comments\")\n+@Table(name = \"comments\", indexes = {@Index(name = \"comments_post_id\", columnList = \"post_id\")})\n @DiscriminatorColumn(name = \"type\", discriminatorType = DiscriminatorType.INTEGER, columnDefinition = \"int default 0\")\n @ToString(callSuper = true)\n @EqualsAndHashCode(callSuper = true)",
    "output": "feat: add Index on comments.post_id (#649)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/entity/Category.java b/src/main/java/run/halo/app/model/entity/Category.java\n--- a/src/main/java/run/halo/app/model/entity/Category.java\n+++ b/src/main/java/run/halo/app/model/entity/Category.java\n@@ -16,7 +16,9 @@\n  */\n @Data\n @Entity\n-@Table(name = \"categories\")\n+@Table(name = \"categories\",\n+    indexes = {@Index(name = \"categories_name\", columnList = \"name\"),\n+        @Index(name = \"categories_parent_id\", columnList = \"parent_id\")})\n @ToString\n @EqualsAndHashCode(callSuper = true)\n public class Category extends BaseEntity {",
    "output": "feat: add index on categories.name and categories.parent_id (#658)\n\n* Add Index on categories.name\r\n\r\n* Add Index on categories.name and categories.parent_id"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/entity/Link.java b/src/main/java/run/halo/app/model/entity/Link.java\n--- a/src/main/java/run/halo/app/model/entity/Link.java\n+++ b/src/main/java/run/halo/app/model/entity/Link.java\n@@ -15,7 +15,7 @@\n  */\n @Data\n @Entity\n-@Table(name = \"links\")\n+@Table(name = \"links\", indexes = {@Index(name = \"links_name\", columnList = \"name\")})\n @ToString\n @EqualsAndHashCode(callSuper = true)\n public class Link extends BaseEntity {",
    "output": "feat: add Index on links.name (#651)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/entity/Menu.java b/src/main/java/run/halo/app/model/entity/Menu.java\n--- a/src/main/java/run/halo/app/model/entity/Menu.java\n+++ b/src/main/java/run/halo/app/model/entity/Menu.java\n@@ -15,7 +15,7 @@\n  */\n @Data\n @Entity\n-@Table(name = \"menus\")\n+@Table(name = \"menus\", indexes = {@Index(name = \"menus_parent_id\", columnList = \"parent_id\")})\n @ToString\n @EqualsAndHashCode(callSuper = true)\n public class Menu extends BaseEntity {",
    "output": "feat: add Index on menus.parent_id (#655)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/entity/Photo.java b/src/main/java/run/halo/app/model/entity/Photo.java\n--- a/src/main/java/run/halo/app/model/entity/Photo.java\n+++ b/src/main/java/run/halo/app/model/entity/Photo.java\n@@ -15,7 +15,7 @@\n  */\n @Data\n @Entity\n-@Table(name = \"photos\")\n+@Table(name = \"photos\", indexes = {@Index(name = \"photos_team\", columnList = \"team\")})\n @ToString\n @EqualsAndHashCode(callSuper = true)\n public class Photo extends BaseEntity {",
    "output": "feat: add Index on photos.team (#657)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/entity/Tag.java b/src/main/java/run/halo/app/model/entity/Tag.java\n--- a/src/main/java/run/halo/app/model/entity/Tag.java\n+++ b/src/main/java/run/halo/app/model/entity/Tag.java\n@@ -14,7 +14,7 @@\n  */\n @Data\n @Entity\n-@Table(name = \"tags\")\n+@Table(name = \"tags\", indexes = {@Index(name = \"tags_name\", columnList = \"name\")})\n @ToString\n @EqualsAndHashCode(callSuper = true)\n public class Tag extends BaseEntity {",
    "output": "feat: add Index on tags.name (#653)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/ContentFeedController.java b/src/main/java/run/halo/app/controller/content/ContentFeedController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentFeedController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentFeedController.java\n@@ -3,6 +3,7 @@\n import freemarker.template.Template;\n import freemarker.template.TemplateException;\n import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang3.RegExUtils;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.PageRequest;\n import org.springframework.data.domain.Pageable;\n@@ -43,6 +44,8 @@ public class ContentFeedController {\n \n     private final static String UTF_8_SUFFIX = \";charset=UTF-8\";\n \n+    private final static String XML_INVAID_CHAR = \"[\\\\x00-\\\\x1F\\\\x7F]\";\n+\n     private final static String XML_MEDIA_TYPE = MediaType.APPLICATION_XML_VALUE + UTF_8_SUFFIX;\n \n     private final PostService postService;\n@@ -206,6 +209,10 @@ private List<PostDetailVO> buildPosts(@NonNull Pageable pageable) {\n \n         Page<Post> postPage = postService.pageBy(PostStatus.PUBLISHED, pageable);\n         Page<PostDetailVO> posts = postService.convertToDetailVo(postPage);\n+        posts.getContent().forEach(postDetailVO -> {\n+            postDetailVO.setFormatContent(RegExUtils.replaceAll(postDetailVO.getFormatContent(), XML_INVAID_CHAR, \"\"));\n+            postDetailVO.setSummary(RegExUtils.replaceAll(postDetailVO.getSummary(), XML_INVAID_CHAR, \"\"));\n+        });\n         return posts.getContent();\n     }\n \n@@ -222,6 +229,10 @@ private List<PostDetailVO> buildCategoryPosts(@NonNull Pageable pageable, @NonNu\n \n         Page<Post> postPage = postCategoryService.pagePostBy(category.getId(), PostStatus.PUBLISHED, pageable);\n         Page<PostDetailVO> posts = postService.convertToDetailVo(postPage);\n+        posts.getContent().forEach(postDetailVO -> {\n+            postDetailVO.setFormatContent(RegExUtils.replaceAll(postDetailVO.getFormatContent(), XML_INVAID_CHAR, \"\"));\n+            postDetailVO.setSummary(RegExUtils.replaceAll(postDetailVO.getSummary(), XML_INVAID_CHAR, \"\"));\n+        });\n         return posts.getContent();\n     }\n }",
    "output": "fix: #629 (#641)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/handler/file/LocalFileHandler.java b/src/main/java/run/halo/app/handler/file/LocalFileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/LocalFileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/LocalFileHandler.java\n@@ -97,8 +97,10 @@ public UploadResult upload(MultipartFile file) {\n         int year = current.get(Calendar.YEAR);\n         int month = current.get(Calendar.MONTH) + 1;\n \n+        String monthString = month < 10 ? \"0\" + month : String.valueOf(month);\n+\n         // Build directory\n-        String subDir = UPLOAD_SUB_DIR + year + FILE_SEPARATOR + month + FILE_SEPARATOR;\n+        String subDir = UPLOAD_SUB_DIR + year + FILE_SEPARATOR + monthString + FILE_SEPARATOR;\n \n         String originalBasename = FilenameUtils.getBasename(Objects.requireNonNull(file.getOriginalFilename()));\n \n@@ -137,7 +139,7 @@ public UploadResult upload(MultipartFile file) {\n             uploadResult.setSize(file.getSize());\n \n             // TODO refactor this: if image is svg ext. extension\n-            boolean isSvg = \"svg\".equals(extension);\n+            boolean isSvg = \"svg\" .equals(extension);\n \n             // Check file type\n             if (FileHandler.isImageType(uploadResult.getMediaType()) && !isSvg) {",
    "output": "refactor: attachment month path. (#636)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/PostCommentServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostCommentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostCommentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostCommentServiceImpl.java\n@@ -104,13 +104,21 @@ public List<PostCommentWithPostVO> convertToWithPostVo(List<PostComment> postCom\n             }).collect(Collectors.toList());\n     }\n \n-    private BasePostMinimalDTO buildPostFullPath(BasePostMinimalDTO basePostMinimalDTO) {\n+    private BasePostMinimalDTO buildPostFullPath(BasePostMinimalDTO post) {\n         PostPermalinkType permalinkType = optionService.getPostPermalinkType();\n \n         String pathSuffix = optionService.getPathSuffix();\n \n         String archivesPrefix = optionService.getArchivesPrefix();\n \n+        int month = DateUtil.month(post.getCreateTime()) + 1;\n+\n+        String monthString = month < 10 ? \"0\" + month : String.valueOf(month);\n+\n+        int day = DateUtil.dayOfMonth(post.getCreateTime());\n+\n+        String dayString = day < 10 ? \"0\" + day : String.valueOf(day);\n+\n         StringBuilder fullPath = new StringBuilder();\n \n         if (optionService.isEnabledAbsolutePath()) {\n@@ -122,32 +130,32 @@ private BasePostMinimalDTO buildPostFullPath(BasePostMinimalDTO basePostMinimalD\n         if (permalinkType.equals(PostPermalinkType.DEFAULT)) {\n             fullPath.append(archivesPrefix)\n                 .append(\"/\")\n-                .append(basePostMinimalDTO.getSlug())\n+                .append(post.getSlug())\n                 .append(pathSuffix);\n         } else if (permalinkType.equals(PostPermalinkType.ID)) {\n             fullPath.append(\"?p=\")\n-                .append(basePostMinimalDTO.getId());\n+                .append(post.getId());\n         } else if (permalinkType.equals(PostPermalinkType.DATE)) {\n-            fullPath.append(DateUtil.year(basePostMinimalDTO.getCreateTime()))\n+            fullPath.append(DateUtil.year(post.getCreateTime()))\n                 .append(\"/\")\n-                .append(DateUtil.month(basePostMinimalDTO.getCreateTime()) + 1)\n+                .append(monthString)\n                 .append(\"/\")\n-                .append(basePostMinimalDTO.getSlug())\n+                .append(post.getSlug())\n                 .append(pathSuffix);\n         } else if (permalinkType.equals(PostPermalinkType.DAY)) {\n-            fullPath.append(DateUtil.year(basePostMinimalDTO.getCreateTime()))\n+            fullPath.append(DateUtil.year(post.getCreateTime()))\n                 .append(\"/\")\n-                .append(DateUtil.month(basePostMinimalDTO.getCreateTime()) + 1)\n+                .append(monthString)\n                 .append(\"/\")\n-                .append(DateUtil.dayOfMonth(basePostMinimalDTO.getCreateTime()))\n+                .append(dayString)\n                 .append(\"/\")\n-                .append(basePostMinimalDTO.getSlug())\n+                .append(post.getSlug())\n                 .append(pathSuffix);\n         }\n \n-        basePostMinimalDTO.setFullPath(fullPath.toString());\n+        post.setFullPath(fullPath.toString());\n \n-        return basePostMinimalDTO;\n+        return post;\n     }\n \n     @Override\n\ndiff --git a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n@@ -871,6 +871,14 @@ private String buildFullPath(Post post) {\n \n         String archivesPrefix = optionService.getArchivesPrefix();\n \n+        int month = DateUtil.month(post.getCreateTime()) + 1;\n+\n+        String monthString = month < 10 ? \"0\" + month : String.valueOf(month);\n+\n+        int day = DateUtil.dayOfMonth(post.getCreateTime());\n+\n+        String dayString = day < 10 ? \"0\" + day : String.valueOf(day);\n+\n         StringBuilder fullPath = new StringBuilder();\n \n         if (optionService.isEnabledAbsolutePath()) {\n@@ -890,16 +898,16 @@ private String buildFullPath(Post post) {\n         } else if (permalinkType.equals(PostPermalinkType.DATE)) {\n             fullPath.append(DateUtil.year(post.getCreateTime()))\n                 .append(\"/\")\n-                .append(DateUtil.month(post.getCreateTime()) + 1)\n+                .append(monthString)\n                 .append(\"/\")\n                 .append(post.getSlug())\n                 .append(pathSuffix);\n         } else if (permalinkType.equals(PostPermalinkType.DAY)) {\n             fullPath.append(DateUtil.year(post.getCreateTime()))\n                 .append(\"/\")\n-                .append(DateUtil.month(post.getCreateTime()) + 1)\n+                .append(monthString)\n                 .append(\"/\")\n-                .append(DateUtil.dayOfMonth(post.getCreateTime()))\n+                .append(dayString)\n                 .append(\"/\")\n                 .append(post.getSlug())\n                 .append(pathSuffix);",
    "output": "refactor: post month path type. (#635)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/listener/StartedListener.java b/src/main/java/run/halo/app/listener/StartedListener.java\n--- a/src/main/java/run/halo/app/listener/StartedListener.java\n+++ b/src/main/java/run/halo/app/listener/StartedListener.java\n@@ -4,6 +4,8 @@\n import org.flywaydb.core.Flyway;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.ansi.AnsiColor;\n+import org.springframework.boot.ansi.AnsiOutput;\n import org.springframework.boot.context.event.ApplicationStartedEvent;\n import org.springframework.context.ApplicationListener;\n import org.springframework.context.annotation.Configuration;\n@@ -64,12 +66,12 @@ public void onApplicationEvent(ApplicationStartedEvent event) {\n     private void printStartInfo() {\n         String blogUrl = optionService.getBlogBaseUrl();\n \n-        log.info(\"Halo started at         {}\", blogUrl);\n-        log.info(\"Halo admin started at   {}/{}\", blogUrl, haloProperties.getAdminPath());\n+        log.info(AnsiOutput.toString(AnsiColor.BRIGHT_BLUE, \"Halo started at         \", blogUrl));\n+        log.info(AnsiOutput.toString(AnsiColor.BRIGHT_BLUE, \"Halo admin started at   \", blogUrl, \"/\", haloProperties.getAdminPath()));\n         if (!haloProperties.isDocDisabled()) {\n-            log.debug(\"Halo api doc was enabled at  {}/swagger-ui.html\", blogUrl);\n+            log.debug(AnsiOutput.toString(AnsiColor.BRIGHT_BLUE, \"Halo api doc was enabled at  \", blogUrl, \"/swagger-ui.html\"));\n         }\n-        log.info(\"Halo has started successfully!\");\n+        log.info(AnsiOutput.toString(AnsiColor.BRIGHT_YELLOW, \"Halo has started successfully!\"));\n     }\n \n     /**",
    "output": "refactor: banner info. (#634)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/OptionController.java b/src/main/java/run/halo/app/controller/admin/api/OptionController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/OptionController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/OptionController.java\n@@ -1,10 +1,10 @@\n package run.halo.app.controller.admin.api;\n \n+import com.alibaba.fastjson.JSON;\n import io.swagger.annotations.ApiOperation;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.Pageable;\n import org.springframework.data.web.PageableDefault;\n-import org.springframework.util.CollectionUtils;\n import org.springframework.web.bind.annotation.*;\n import run.halo.app.model.annotation.DisableOnCondition;\n import run.halo.app.model.dto.OptionDTO;\n@@ -52,12 +52,15 @@ public void saveOptions(@Valid @RequestBody List<OptionParam> optionParams) {\n \n     @GetMapping(\"map_view\")\n     @ApiOperation(\"Lists all options with map view\")\n-    public Map<String, Object> listAllWithMapView(@RequestParam(value = \"key[]\", required = false) List<String> keys) {\n-        if (CollectionUtils.isEmpty(keys)) {\n-            return optionService.listOptions();\n-        }\n+    public Map<String, Object> listAllWithMapView() {\n+        return optionService.listOptions();\n+    }\n \n-        return optionService.listOptions(keys);\n+    @PostMapping(\"map_view/keys\")\n+    @ApiOperation(\"Lists options with map view by keys\")\n+    public Map<String, Object> listAllWithMapView(@RequestBody String keys) {\n+        List<String> parsedKeys = JSON.parseArray(keys, String.class);\n+        return optionService.listOptions(parsedKeys);\n     }\n \n     @GetMapping(\"list_view\")",
    "output": "chore: upgrade default theme. (#624)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/model/CategoryModel.java b/src/main/java/run/halo/app/controller/content/model/CategoryModel.java\n--- a/src/main/java/run/halo/app/controller/content/model/CategoryModel.java\n+++ b/src/main/java/run/halo/app/controller/content/model/CategoryModel.java\n@@ -53,7 +53,7 @@ public String listPost(Model model, String slug, Integer page) {\n         final Category category = categoryService.getBySlugOfNonNull(slug);\n         CategoryDTO categoryDTO = categoryService.convertTo(category);\n \n-        final Pageable pageable = PageRequest.of(page - 1, optionService.getPostPageSize(), Sort.by(DESC, \"createTime\"));\n+        final Pageable pageable = PageRequest.of(page - 1, optionService.getArchivesPageSize(), Sort.by(DESC, \"createTime\"));\n         Page<Post> postPage = postCategoryService.pagePostBy(category.getId(), PostStatus.PUBLISHED, pageable);\n         Page<PostListVO> posts = postService.convertToListVo(postPage);\n \n\ndiff --git a/src/main/java/run/halo/app/controller/content/model/PostModel.java b/src/main/java/run/halo/app/controller/content/model/PostModel.java\n--- a/src/main/java/run/halo/app/controller/content/model/PostModel.java\n+++ b/src/main/java/run/halo/app/controller/content/model/PostModel.java\n@@ -163,7 +163,7 @@ public String list(Integer page, Model model) {\n     }\n \n     public String archives(Integer page, Model model) {\n-        int pageSize = optionService.getPostPageSize();\n+        int pageSize = optionService.getArchivesPageSize();\n         Pageable pageable = PageRequest\n             .of(page >= 1 ? page - 1 : page, pageSize, Sort.by(Sort.Direction.DESC, \"createTime\"));\n \n\ndiff --git a/src/main/java/run/halo/app/controller/content/model/TagModel.java b/src/main/java/run/halo/app/controller/content/model/TagModel.java\n--- a/src/main/java/run/halo/app/controller/content/model/TagModel.java\n+++ b/src/main/java/run/halo/app/controller/content/model/TagModel.java\n@@ -53,7 +53,7 @@ public String listPost(Model model, String slug, Integer page) {\n         final Tag tag = tagService.getBySlugOfNonNull(slug);\n         TagDTO tagDTO = tagService.convertTo(tag);\n \n-        final Pageable pageable = PageRequest.of(page - 1, optionService.getPostPageSize(), Sort.by(DESC, \"createTime\"));\n+        final Pageable pageable = PageRequest.of(page - 1, optionService.getArchivesPageSize(), Sort.by(DESC, \"createTime\"));\n         Page<Post> postPage = postTagService.pagePostsBy(tag.getId(), PostStatus.PUBLISHED, pageable);\n         Page<PostListVO> posts = postService.convertToListVo(postPage);\n \n\ndiff --git a/src/main/java/run/halo/app/model/properties/PostProperties.java b/src/main/java/run/halo/app/model/properties/PostProperties.java\n--- a/src/main/java/run/halo/app/model/properties/PostProperties.java\n+++ b/src/main/java/run/halo/app/model/properties/PostProperties.java\n@@ -4,7 +4,8 @@\n  * Post properties.\n  *\n  * @author johnniang\n- * @date 4/1/19\n+ * @author ryanwang\n+ * @date 2019-04-01\n  */\n public enum PostProperties implements PropertyEnum {\n \n@@ -28,6 +29,11 @@ public enum PostProperties implements PropertyEnum {\n      */\n     INDEX_PAGE_SIZE(\"post_index_page_size\", Integer.class, \"10\"),\n \n+    /**\n+     * Archives page size.\n+     */\n+    ARCHIVES_PAGE_SIZE(\"post_archives_page_size\", Integer.class, \"10\"),\n+\n     /**\n      * Post index sort.\n      */\n\ndiff --git a/src/main/java/run/halo/app/service/OptionService.java b/src/main/java/run/halo/app/service/OptionService.java\n--- a/src/main/java/run/halo/app/service/OptionService.java\n+++ b/src/main/java/run/halo/app/service/OptionService.java\n@@ -33,6 +33,8 @@ public interface OptionService extends CrudService<Option, Integer> {\n \n     int DEFAULT_POST_PAGE_SIZE = 10;\n \n+    int DEFAULT_ARCHIVES_PAGE_SIZE = 10;\n+\n     int DEFAULT_COMMENT_PAGE_SIZE = 10;\n \n     int DEFAULT_RSS_PAGE_SIZE = 20;\n@@ -299,6 +301,13 @@ public interface OptionService extends CrudService<Option, Integer> {\n      */\n     int getPostPageSize();\n \n+    /**\n+     * Gets archives page size.\n+     *\n+     * @return page size\n+     */\n+    int getArchivesPageSize();\n+\n     /**\n      * Gets comment page size.\n      *\n\ndiff --git a/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java b/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n@@ -43,6 +43,7 @@\n  * OptionService implementation class\n  *\n  * @author ryanwang\n+ * @author johnniang\n  * @date 2019-03-14\n  */\n @Slf4j\n@@ -365,13 +366,23 @@ public <V, E extends ValueEnum<V>> E getValueEnumByPropertyOrDefault(PropertyEnu\n     @Override\n     public int getPostPageSize() {\n         try {\n-            return getByPropertyOrDefault(PostProperties.INDEX_PAGE_SIZE, Integer.class, DEFAULT_COMMENT_PAGE_SIZE);\n+            return getByPropertyOrDefault(PostProperties.INDEX_PAGE_SIZE, Integer.class, DEFAULT_POST_PAGE_SIZE);\n         } catch (NumberFormatException e) {\n             log.error(PostProperties.INDEX_PAGE_SIZE.getValue() + \" option is not a number format\", e);\n             return DEFAULT_POST_PAGE_SIZE;\n         }\n     }\n \n+    @Override\n+    public int getArchivesPageSize() {\n+        try {\n+            return getByPropertyOrDefault(PostProperties.ARCHIVES_PAGE_SIZE, Integer.class, DEFAULT_ARCHIVES_PAGE_SIZE);\n+        } catch (NumberFormatException e) {\n+            log.error(PostProperties.ARCHIVES_PAGE_SIZE.getValue() + \" option is not a number format\", e);\n+            return DEFAULT_POST_PAGE_SIZE;\n+        }\n+    }\n+\n     @Override\n     public int getCommentPageSize() {\n         try {\n@@ -385,7 +396,7 @@ public int getCommentPageSize() {\n     @Override\n     public int getRssPageSize() {\n         try {\n-            return getByPropertyOrDefault(PostProperties.RSS_PAGE_SIZE, Integer.class, DEFAULT_COMMENT_PAGE_SIZE);\n+            return getByPropertyOrDefault(PostProperties.RSS_PAGE_SIZE, Integer.class, DEFAULT_RSS_PAGE_SIZE);\n         } catch (NumberFormatException e) {\n             log.error(PostProperties.RSS_PAGE_SIZE.getValue() + \" setting is not a number format\", e);\n             return DEFAULT_RSS_PAGE_SIZE;",
    "output": "feat: support set archives page size. (#610)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/handler/file/SmmsFileHandler.java b/src/main/java/run/halo/app/handler/file/SmmsFileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/SmmsFileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/SmmsFileHandler.java\n@@ -17,6 +17,7 @@\n import run.halo.app.exception.ServiceException;\n import run.halo.app.model.enums.AttachmentType;\n import run.halo.app.model.properties.SmmsProperties;\n+import run.halo.app.model.support.HaloConst;\n import run.halo.app.model.support.UploadResult;\n import run.halo.app.service.OptionService;\n import run.halo.app.utils.FilenameUtils;\n@@ -53,6 +54,8 @@ public class SmmsFileHandler implements FileHandler {\n \n     private final OptionService optionService;\n \n+    private HttpHeaders headers = new HttpHeaders();\n+\n     public SmmsFileHandler(RestTemplate httpsRestTemplate,\n                            OptionService optionService) {\n         this.httpsRestTemplate = httpsRestTemplate;\n@@ -78,10 +81,9 @@ public UploadResult upload(MultipartFile file) {\n             throw new FileOperationException(\"不支持的文件类型，仅支持 \\\"jpeg, jpg, png, gif, bmp\\\" 格式的图片\");\n         }\n \n-        HttpHeaders headers = new HttpHeaders();\n+        setHeaders();\n         // Set content type\n         headers.setContentType(MediaType.MULTIPART_FORM_DATA);\n-        headers.set(HttpHeaders.AUTHORIZATION, apiSecretToken);\n \n         LinkedMultiValueMap<String, Object> body = new LinkedMultiValueMap<>();\n \n@@ -114,7 +116,7 @@ public UploadResult upload(MultipartFile file) {\n             throw new FileOperationException(smmsResponse == null ? \"SM.MS 服务返回内容为空\" : smmsResponse.getMessage()).setErrorData(smmsResponse);\n         }\n \n-        if (smmsResponse.getSuccess()) {\n+        if (!smmsResponse.getSuccess()) {\n             throw new FileOperationException(\"上传请求失败：\" + smmsResponse.getMessage()).setErrorData(smmsResponse);\n         }\n \n@@ -146,8 +148,7 @@ public void delete(String key) {\n         // Build delete url\n         String url = String.format(DELETE_API_V2, key);\n \n-        // Set user agent manually\n-        HttpHeaders headers = new HttpHeaders();\n+        setHeaders();\n \n         // Delete the file\n         ResponseEntity<String> responseEntity = httpsRestTemplate.exchange(url, HttpMethod.GET, new HttpEntity<>(null, headers), String.class);\n@@ -178,6 +179,14 @@ private boolean isResponseSuccessfully(@Nullable SmmsResponse smmsResponse) {\n         return smmsResponse != null && smmsResponse.getCode().equals(SUCCESS_CODE);\n     }\n \n+    /**\n+     * Set headers.\n+     */\n+    private void setHeaders() {\n+        headers.set(HttpHeaders.USER_AGENT, \"Halo/\" + HaloConst.HALO_VERSION);\n+        headers.set(HttpHeaders.AUTHORIZATION, optionService.getByPropertyOfNonNull(SmmsProperties.SMMS_API_SECRET_TOKEN).toString());\n+    }\n+\n     @Data\n     @NoArgsConstructor\n     private static class SmmsResponse {",
    "output": "fix: attachment upload to sm.ms failed. (#609)\n\n* fix: attachment upload to sm.ms failed.\r\n\r\n* fix: attachment upload to sm.ms failed.\r\n\r\n* refactor: SmmsFileHandler.\r\n\r\n* refactor: SmmsFileHandler."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/InstallController.java b/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n@@ -17,23 +17,22 @@\n import run.halo.app.exception.BadRequestException;\n import run.halo.app.model.entity.BaseComment;\n import run.halo.app.model.entity.Category;\n-import run.halo.app.model.entity.Post;\n+import run.halo.app.model.entity.PostComment;\n import run.halo.app.model.entity.User;\n import run.halo.app.model.enums.LogType;\n import run.halo.app.model.enums.PostStatus;\n import run.halo.app.model.params.*;\n import run.halo.app.model.properties.BlogProperties;\n+import run.halo.app.model.properties.OtherProperties;\n import run.halo.app.model.properties.PrimaryProperties;\n import run.halo.app.model.properties.PropertyEnum;\n import run.halo.app.model.support.BaseResponse;\n import run.halo.app.model.support.CreateCheck;\n+import run.halo.app.model.vo.PostDetailVO;\n import run.halo.app.service.*;\n import run.halo.app.utils.ValidationUtils;\n \n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.Map;\n-import java.util.Set;\n+import java.util.*;\n \n /**\n  * Installation controller.\n@@ -52,6 +51,8 @@ public class InstallController {\n \n     private final PostService postService;\n \n+    private final SheetService sheetService;\n+\n     private final PostCommentService postCommentService;\n \n     private final OptionService optionService;\n@@ -63,13 +64,15 @@ public class InstallController {\n     public InstallController(UserService userService,\n                              CategoryService categoryService,\n                              PostService postService,\n+                             SheetService sheetService,\n                              PostCommentService postCommentService,\n                              OptionService optionService,\n                              MenuService menuService,\n                              ApplicationEventPublisher eventPublisher) {\n         this.userService = userService;\n         this.categoryService = categoryService;\n         this.postService = postService;\n+        this.sheetService = sheetService;\n         this.postCommentService = postCommentService;\n         this.optionService = optionService;\n         this.menuService = menuService;\n@@ -101,7 +104,10 @@ public BaseResponse<String> installBlog(@RequestBody InstallParam installParam)\n         Category category = createDefaultCategoryIfAbsent();\n \n         // Create default post\n-        Post post = createDefaultPostIfAbsent(category);\n+        PostDetailVO post = createDefaultPostIfAbsent(category);\n+\n+        // Create default sheet\n+        createDefaultSheet();\n \n         // Create default postComment\n         createDefaultComment(post);\n@@ -133,30 +139,42 @@ private void createDefaultMenu() {\n \n         MenuParam menuArchive = new MenuParam();\n \n-        menuArchive.setName(\"归档\");\n+        menuArchive.setName(\"文章归档\");\n         menuArchive.setUrl(\"/archives\");\n         menuArchive.setPriority(2);\n         menuService.create(menuArchive.convertTo());\n+\n+        MenuParam menuCategory = new MenuParam();\n+        menuCategory.setName(\"默认分类\");\n+        menuCategory.setUrl(\"/categories/default\");\n+        menuCategory.setPriority(3);\n+        menuService.create(menuCategory.convertTo());\n+\n+        MenuParam menuSheet = new MenuParam();\n+        menuSheet.setName(\"关于页面\");\n+        menuSheet.setUrl(\"/s/about\");\n+        menuSheet.setPriority(4);\n+        menuService.create(menuSheet.convertTo());\n     }\n \n \n     @Nullable\n-    private BaseComment createDefaultComment(@Nullable Post post) {\n+    private BaseComment createDefaultComment(@Nullable PostDetailVO post) {\n         if (post == null) {\n             return null;\n         }\n \n-        PostCommentParam commentParam = new PostCommentParam();\n-        commentParam.setAuthor(\"Halo Bot\");\n-        commentParam.setAuthorUrl(\"https://halo.run\");\n-        commentParam.setContent(\"欢迎使用 Halo，这是你的第一条评论。\");\n-        commentParam.setEmail(\"halo@halo.run\");\n-        commentParam.setPostId(post.getId());\n-        return postCommentService.create(commentParam.convertTo());\n+        PostComment comment = new PostComment();\n+        comment.setAuthor(\"Halo\");\n+        comment.setAuthorUrl(\"https://halo.run\");\n+        comment.setContent(\"欢迎使用 Halo，这是你的第一条评论，头像来自 [Gravatar](https://cn.gravatar.com)，你也可以通过注册 [Gravatar](https://cn.gravatar.com) 来显示自己的头像。\");\n+        comment.setEmail(\"hi@halo.run\");\n+        comment.setPostId(post.getId());\n+        return postCommentService.create(comment);\n     }\n \n     @Nullable\n-    private Post createDefaultPostIfAbsent(@Nullable Category category) {\n+    private PostDetailVO createDefaultPostIfAbsent(@Nullable Category category) {\n         long publishedCount = postService.countByStatus(PostStatus.PUBLISHED);\n         if (publishedCount > 0) {\n             return null;\n@@ -166,16 +184,42 @@ private Post createDefaultPostIfAbsent(@Nullable Category category) {\n         postParam.setSlug(\"hello-halo\");\n         postParam.setTitle(\"Hello Halo\");\n         postParam.setStatus(PostStatus.PUBLISHED);\n-        postParam.setOriginalContent(\"## Hello Halo!\\n\" +\n+        postParam.setOriginalContent(\"## Hello Halo\\n\" +\n+            \"\\n\" +\n+            \"如果你看到了这一篇文章，那么证明你已经安装成功了，感谢使用 [Halo](https://halo.run) 进行创作，希望能够使用愉快。\\n\" +\n+            \"\\n\" +\n+            \"## 相关链接\\n\" +\n+            \"\\n\" +\n+            \"- 官网：[https://halo.run](https://halo.run)\\n\" +\n+            \"- 社区：[https://bbs.halo.run](https://bbs.halo.run)\\n\" +\n+            \"- 主题仓库：[https://halo.run/s/themes](https://halo.run/s/themes)\\n\" +\n+            \"- 开源地址：[https://github.com/halo-dev/halo](https://github.com/halo-dev/halo)\\n\" +\n             \"\\n\" +\n-            \"感谢使用 [Halo](https://github.com/halo-dev/halo) 进行创作，请删除该文章开始吧！\");\n+            \"在使用过程中，有任何问题都可以通过以上链接找寻答案，或者联系我们。\\n\" +\n+            \"\\n\" +\n+            \"> 这是一篇自动生成的文章，请删除这篇文章之后开始你的创作吧！\\n\" +\n+            \"\\n\");\n \n+        Set<Integer> categoryIds = new HashSet<>();\n         if (category != null) {\n-            Set<Integer> categoryIds = new HashSet<>();\n             categoryIds.add(category.getId());\n             postParam.setCategoryIds(categoryIds);\n         }\n-        return postService.createOrUpdateBy(postParam.convertTo());\n+        return postService.createBy(postParam.convertTo(), Collections.emptySet(), categoryIds, false);\n+    }\n+\n+    @Nullable\n+    private void createDefaultSheet() {\n+        SheetParam sheetParam = new SheetParam();\n+        sheetParam.setSlug(\"about\");\n+        sheetParam.setTitle(\"关于页面\");\n+        sheetParam.setStatus(PostStatus.PUBLISHED);\n+        sheetParam.setOriginalContent(\"## 关于页面\\n\" +\n+            \"\\n\" +\n+            \"这是一个自定义页面，你可以在后台的 `页面` -> `所有页面` -> `自定义页面` 找到它，你可以用于新建关于页面、留言板页面等等。发挥你自己的想象力！\\n\" +\n+            \"\\n\" +\n+            \"> 这是一篇自动生成的页面，你可以在后台删除它。\");\n+        sheetService.createBy(sheetParam.convertTo(), false);\n     }\n \n     @Nullable\n@@ -186,9 +230,9 @@ private Category createDefaultCategoryIfAbsent() {\n         }\n \n         CategoryParam category = new CategoryParam();\n-        category.setName(\"未分类\");\n+        category.setName(\"默认分类\");\n         category.setSlug(\"default\");\n-        category.setDescription(\"未分类\");\n+        category.setDescription(\"这是你的默认分类，如不需要，删除即可。\");\n         ValidationUtils.validate(category);\n         return categoryService.create(category.convertTo());\n     }\n@@ -220,6 +264,7 @@ private void initSettings(InstallParam installParam) {\n         properties.put(BlogProperties.BLOG_URL, StringUtils.isBlank(installParam.getUrl()) ?\n             optionService.getBlogBaseUrl() : installParam.getUrl());\n         properties.put(PrimaryProperties.BIRTHDAY, String.valueOf(System.currentTimeMillis()));\n+        properties.put(OtherProperties.GLOBAL_ABSOLUTE_PATH_ENABLED, Boolean.FALSE.toString());\n \n         // Create properties\n         optionService.saveProperties(properties);",
    "output": "refactor: installation data. (#600)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/ContentFeedController.java b/src/main/java/run/halo/app/controller/content/ContentFeedController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentFeedController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentFeedController.java\n@@ -13,19 +13,22 @@\n import org.springframework.stereotype.Controller;\n import org.springframework.ui.Model;\n import org.springframework.ui.freemarker.FreeMarkerTemplateUtils;\n+import org.springframework.util.Assert;\n import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.ResponseBody;\n import org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer;\n+import run.halo.app.model.dto.CategoryDTO;\n+import run.halo.app.model.entity.Category;\n import run.halo.app.model.entity.Post;\n import run.halo.app.model.enums.PostStatus;\n import run.halo.app.model.vo.PostDetailVO;\n+import run.halo.app.service.CategoryService;\n import run.halo.app.service.OptionService;\n+import run.halo.app.service.PostCategoryService;\n import run.halo.app.service.PostService;\n \n import java.io.IOException;\n-import java.io.UnsupportedEncodingException;\n-import java.net.URLEncoder;\n-import java.nio.charset.StandardCharsets;\n import java.util.List;\n \n import static org.springframework.data.domain.Sort.Direction.DESC;\n@@ -39,15 +42,27 @@\n public class ContentFeedController {\n \n     private final static String UTF_8_SUFFIX = \";charset=UTF-8\";\n+\n     private final static String XML_MEDIA_TYPE = MediaType.APPLICATION_XML_VALUE + UTF_8_SUFFIX;\n+\n     private final PostService postService;\n+\n+    private final CategoryService categoryService;\n+\n+    private final PostCategoryService postCategoryService;\n+\n     private final OptionService optionService;\n+\n     private final FreeMarkerConfigurer freeMarker;\n \n     public ContentFeedController(PostService postService,\n+                                 CategoryService categoryService,\n+                                 PostCategoryService postCategoryService,\n                                  OptionService optionService,\n                                  FreeMarkerConfigurer freeMarker) {\n         this.postService = postService;\n+        this.categoryService = categoryService;\n+        this.postCategoryService = postCategoryService;\n         this.optionService = optionService;\n         this.freeMarker = freeMarker;\n     }\n@@ -56,9 +71,9 @@ public ContentFeedController(PostService postService,\n      * Get post rss\n      *\n      * @param model model\n-     * @return String\n-     * @throws IOException       IOException\n-     * @throws TemplateException TemplateException\n+     * @return rss xml content\n+     * @throws IOException       throw IOException\n+     * @throws TemplateException throw TemplateException\n      */\n     @GetMapping(value = {\"feed\", \"feed.xml\", \"rss\", \"rss.xml\"}, produces = XML_MEDIA_TYPE)\n     @ResponseBody\n@@ -68,11 +83,31 @@ public String feed(Model model) throws IOException, TemplateException {\n         return FreeMarkerTemplateUtils.processTemplateIntoString(template, model);\n     }\n \n+    /**\n+     * Get category post rss.\n+     *\n+     * @param model    model\n+     * @param slugName slugName\n+     * @return rss xml content\n+     * @throws IOException       throw IOException\n+     * @throws TemplateException throw TemplateException\n+     */\n+    @GetMapping(value = {\"feed/categories/{slugName}\", \"feed/categories/{slugName}.xml\"}, produces = XML_MEDIA_TYPE)\n+    @ResponseBody\n+    public String feed(Model model, @PathVariable(name = \"slugName\") String slugName) throws IOException, TemplateException {\n+        Category category = categoryService.getBySlugNameOfNonNull(slugName);\n+        CategoryDTO categoryDTO = categoryService.convertTo(category);\n+        model.addAttribute(\"category\", categoryDTO);\n+        model.addAttribute(\"posts\", buildCategoryPosts(buildPostPageable(optionService.getRssPageSize()), categoryDTO));\n+        Template template = freeMarker.getConfiguration().getTemplate(\"common/web/rss.ftl\");\n+        return FreeMarkerTemplateUtils.processTemplateIntoString(template, model);\n+    }\n+\n     /**\n      * Get atom.xml\n      *\n      * @param model model\n-     * @return String\n+     * @return atom xml content\n      * @throws IOException       IOException\n      * @throws TemplateException TemplateException\n      */\n@@ -84,11 +119,31 @@ public String atom(Model model) throws IOException, TemplateException {\n         return FreeMarkerTemplateUtils.processTemplateIntoString(template, model);\n     }\n \n+    /**\n+     * Get category posts atom.xml\n+     *\n+     * @param model    model\n+     * @param slugName slugName\n+     * @return atom xml content\n+     * @throws IOException       throw IOException\n+     * @throws TemplateException throw TemplateException\n+     */\n+    @GetMapping(value = {\"atom/categories/{slugName}\", \"atom/categories/{slugName}.xml\"}, produces = XML_MEDIA_TYPE)\n+    @ResponseBody\n+    public String atom(Model model, @PathVariable(name = \"slugName\") String slugName) throws IOException, TemplateException {\n+        Category category = categoryService.getBySlugNameOfNonNull(slugName);\n+        CategoryDTO categoryDTO = categoryService.convertTo(category);\n+        model.addAttribute(\"category\", categoryDTO);\n+        model.addAttribute(\"posts\", buildCategoryPosts(buildPostPageable(optionService.getRssPageSize()), categoryDTO));\n+        Template template = freeMarker.getConfiguration().getTemplate(\"common/web/atom.ftl\");\n+        return FreeMarkerTemplateUtils.processTemplateIntoString(template, model);\n+    }\n+\n     /**\n      * Get sitemap.xml.\n      *\n      * @param model model\n-     * @return String\n+     * @return sitemap xml content.\n      * @throws IOException       IOException\n      * @throws TemplateException TemplateException\n      */\n@@ -105,7 +160,7 @@ public String sitemapXml(Model model,\n      * Get sitemap.html.\n      *\n      * @param model model\n-     * @return String\n+     * @return template path: common/web/sitemap_html\n      */\n     @GetMapping(value = \"sitemap.html\")\n     public String sitemapHtml(Model model,\n@@ -115,10 +170,10 @@ public String sitemapHtml(Model model,\n     }\n \n     /**\n-     * Get robots.\n+     * Get robots.txt\n      *\n      * @param model model\n-     * @return String\n+     * @return robots.txt content\n      * @throws IOException       IOException\n      * @throws TemplateException TemplateException\n      */\n@@ -141,22 +196,32 @@ private Pageable buildPostPageable(int size) {\n     }\n \n     /**\n-     * Build posts for feed\n+     * Build posts.\n      *\n      * @param pageable pageable\n-     * @return List<Post>\n+     * @return list of post detail vo\n      */\n     private List<PostDetailVO> buildPosts(@NonNull Pageable pageable) {\n+        Assert.notNull(pageable, \"Pageable must not be null\");\n+\n         Page<Post> postPage = postService.pageBy(PostStatus.PUBLISHED, pageable);\n         Page<PostDetailVO> posts = postService.convertToDetailVo(postPage);\n-        posts.getContent().forEach(postListVO -> {\n-            try {\n-                // Encode post url\n-                postListVO.setUrl(URLEncoder.encode(postListVO.getUrl(), StandardCharsets.UTF_8.name()));\n-            } catch (UnsupportedEncodingException e) {\n-                log.warn(\"Failed to encode url: \" + postListVO.getUrl(), e);\n-            }\n-        });\n+        return posts.getContent();\n+    }\n+\n+    /**\n+     * Build category posts.\n+     *\n+     * @param pageable pageable must not be null.\n+     * @param slugName slugName must not be null.\n+     * @return list of post detail vo.\n+     */\n+    private List<PostDetailVO> buildCategoryPosts(@NonNull Pageable pageable, @NonNull CategoryDTO category) {\n+        Assert.notNull(pageable, \"Pageable must not be null\");\n+        Assert.notNull(category, \"Slug name must not be null\");\n+\n+        Page<Post> postPage = postCategoryService.pagePostBy(category.getId(), PostStatus.PUBLISHED, pageable);\n+        Page<PostDetailVO> posts = postService.convertToDetailVo(postPage);\n         return posts.getContent();\n     }\n }",
    "output": "feat: #586 (#595)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java b/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n--- a/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n+++ b/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n@@ -42,7 +42,6 @@\n import java.util.*;\n \n import static run.halo.app.model.support.HaloConst.FILE_SEPARATOR;\n-import static run.halo.app.model.support.HaloConst.HALO_ADMIN_RELATIVE_PATH;\n import static run.halo.app.utils.HaloUtils.*;\n \n /**\n@@ -106,7 +105,6 @@ public void addResourceHandlers(ResourceHandlerRegistry registry) {\n \n         // register /** resource handler.\n         registry.addResourceHandler(\"/**\")\n-            .addResourceLocations(workDir + \"templates/admin/\")\n             .addResourceLocations(\"classpath:/admin/\")\n             .addResourceLocations(workDir + \"static/\");\n \n@@ -120,7 +118,6 @@ public void addResourceHandlers(ResourceHandlerRegistry registry) {\n         registry.addResourceHandler(uploadUrlPattern)\n             .addResourceLocations(workDir + \"upload/\");\n         registry.addResourceHandler(adminPathPattern)\n-            .addResourceLocations(workDir + HALO_ADMIN_RELATIVE_PATH)\n             .addResourceLocations(\"classpath:/admin/\");\n \n         if (!haloProperties.isDocDisabled()) {",
    "output": "refactor: stop supporting admin folder mapping in workspace. (#593)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/MainController.java b/src/main/java/run/halo/app/controller/content/MainController.java\n--- a/src/main/java/run/halo/app/controller/content/MainController.java\n+++ b/src/main/java/run/halo/app/controller/content/MainController.java\n@@ -69,23 +69,23 @@ public void installation(HttpServletResponse response) throws IOException {\n     public void avatar(HttpServletResponse response) throws IOException {\n         User user = userService.getCurrentUser().orElseThrow(() -> new ServiceException(\"未查询到博主信息\"));\n         if (StringUtils.isNotEmpty(user.getAvatar())) {\n-            response.sendRedirect(user.getAvatar());\n+            response.sendRedirect(HaloUtils.normalizeUrl(user.getAvatar()));\n         }\n     }\n \n     @GetMapping(\"logo\")\n     public void logo(HttpServletResponse response) throws IOException {\n         String blogLogo = optionService.getByProperty(BlogProperties.BLOG_LOGO).orElse(\"\").toString();\n         if (StringUtils.isNotEmpty(blogLogo)) {\n-            response.sendRedirect(blogLogo);\n+            response.sendRedirect(HaloUtils.normalizeUrl(blogLogo));\n         }\n     }\n \n     @GetMapping(\"favicon.ico\")\n     public void favicon(HttpServletResponse response) throws IOException {\n         String favicon = optionService.getByProperty(BlogProperties.BLOG_FAVICON).orElse(\"\").toString();\n         if (StringUtils.isNotEmpty(favicon)) {\n-            response.sendRedirect(favicon);\n+            response.sendRedirect(HaloUtils.normalizeUrl(favicon));\n         }\n     }\n }\n\ndiff --git a/src/main/java/run/halo/app/utils/HaloUtils.java b/src/main/java/run/halo/app/utils/HaloUtils.java\n--- a/src/main/java/run/halo/app/utils/HaloUtils.java\n+++ b/src/main/java/run/halo/app/utils/HaloUtils.java\n@@ -1,5 +1,6 @@\n package run.halo.app.utils;\n \n+import cn.hutool.core.util.URLUtil;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.lang3.StringUtils;\n import org.springframework.lang.NonNull;\n@@ -232,6 +233,24 @@ public static String initializeUrlIfBlank(@Nullable String url) {\n         return String.valueOf(System.currentTimeMillis());\n     }\n \n+    /**\n+     * Normalize url\n+     *\n+     * @param originalUrl original url\n+     * @return normalized url.\n+     */\n+    @NonNull\n+    public static String normalizeUrl(@NonNull String originalUrl) {\n+        Assert.hasText(originalUrl, \"Original Url must not be blank\");\n+\n+        if (StringUtils.startsWithAny(originalUrl, \"/\", \"https://\", \"http://\")\n+                && !StringUtils.startsWith(originalUrl, \"//\")) {\n+            return originalUrl;\n+        }\n+\n+        return URLUtil.normalize(originalUrl);\n+    }\n+\n     /**\n      * Gets machine IP address.\n      *\n\ndiff --git a/src/test/java/run/halo/app/utils/HaloUtilsTest.java b/src/test/java/run/halo/app/utils/HaloUtilsTest.java\n--- a/src/test/java/run/halo/app/utils/HaloUtilsTest.java\n+++ b/src/test/java/run/halo/app/utils/HaloUtilsTest.java\n@@ -143,4 +143,15 @@ public void compositeHttpUrl() {\n         url = HaloUtils.compositeHttpUrl(\"https://halo.run/\", \"/path1/\", \"/path2/\");\n         assertEquals(\"https://halo.run/path1/path2\", url);\n     }\n+\n+    @Test\n+    public void normalizeUrl() {\n+        assertEquals(\"/2019/2/2/avatar.jpg\", HaloUtils.normalizeUrl(\"/2019/2/2/avatar.jpg\"));\n+\n+        assertEquals(\"http://cn.gravatar.com/avatar?d=mm\", HaloUtils.normalizeUrl(\"//cn.gravatar.com/avatar?d=mm\"));\n+\n+        assertEquals(\"http://cn.gravatar.com/avatar?d=mm\", HaloUtils.normalizeUrl(\"cn.gravatar.com/avatar?d=mm\"));\n+\n+        assertEquals(\"https://cn.gravatar.com/avatar?d=mm\", HaloUtils.normalizeUrl(\"https://cn.gravatar.com/avatar?d=mm\"));\n+    }\n }",
    "output": "fix: #549 (#587)\n\n* fix: #549\r\n\r\n* style: change normalizeImageUrl to normalizeUrl."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/params/LoginParam.java b/src/main/java/run/halo/app/model/params/LoginParam.java\n--- a/src/main/java/run/halo/app/model/params/LoginParam.java\n+++ b/src/main/java/run/halo/app/model/params/LoginParam.java\n@@ -20,7 +20,7 @@ public class LoginParam {\n     @Size(max = 255, message = \"用户名或邮箱的字符长度不能超过 {max}\")\n     private String username;\n \n-    @NotBlank(message = \"登陆密码不能为空\")\n+    @NotBlank(message = \"登录密码不能为空\")\n     @Size(max = 100, message = \"用户密码字符长度不能超过 {max}\")\n     private String password;\n \n\ndiff --git a/src/main/java/run/halo/app/security/filter/AdminAuthenticationFilter.java b/src/main/java/run/halo/app/security/filter/AdminAuthenticationFilter.java\n--- a/src/main/java/run/halo/app/security/filter/AdminAuthenticationFilter.java\n+++ b/src/main/java/run/halo/app/security/filter/AdminAuthenticationFilter.java\n@@ -65,7 +65,7 @@ protected void doAuthenticate(HttpServletRequest request, HttpServletResponse re\n         String token = getTokenFromRequest(request);\n \n         if (StringUtils.isBlank(token)) {\n-            throw new AuthenticationException(\"未登录，请登陆后访问\");\n+            throw new AuthenticationException(\"未登录，请登录后访问\");\n         }\n \n         // Get user id from cache\n\ndiff --git a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n@@ -309,7 +309,7 @@ public AuthToken refreshToken(String refreshToken) {\n         Assert.hasText(refreshToken, \"Refresh token must not be blank\");\n \n         Integer userId = cacheStore.getAny(SecurityUtils.buildTokenRefreshKey(refreshToken), Integer.class)\n-                .orElseThrow(() -> new BadRequestException(\"登陆状态已失效，请重新登陆\").setErrorData(refreshToken));\n+                .orElseThrow(() -> new BadRequestException(\"登录状态已失效，请重新登录\").setErrorData(refreshToken));\n \n         // Get user info\n         User user = userService.getById(userId);",
    "output": "Fix typo about login translate (#583)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java b/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n--- a/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n+++ b/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n@@ -227,7 +227,7 @@ protected HandlerMethod lookupHandlerMethod(String lookupPath, HttpServletReques\n             log.debug(\"Looking path: [{}]\", lookupPath);\n             for (String blackPattern : blackPatterns) {\n                 if (this.pathMatcher.match(blackPattern, lookupPath)) {\n-                    log.info(\"Skipped path [{}] with pattern: [{}]\", lookupPath, blackPattern);\n+                    log.debug(\"Skipped path [{}] with pattern: [{}]\", lookupPath, blackPattern);\n                     return null;\n                 }\n             }\n\ndiff --git a/src/main/java/run/halo/app/security/filter/AbstractAuthenticationFilter.java b/src/main/java/run/halo/app/security/filter/AbstractAuthenticationFilter.java\n--- a/src/main/java/run/halo/app/security/filter/AbstractAuthenticationFilter.java\n+++ b/src/main/java/run/halo/app/security/filter/AbstractAuthenticationFilter.java\n@@ -158,7 +158,7 @@ protected void doFilterInternal(HttpServletRequest request, HttpServletResponse\n         // Check whether the blog is installed or not\n         Boolean isInstalled = optionService.getByPropertyOrDefault(PrimaryProperties.IS_INSTALLED, Boolean.class, false);\n \n-        if (!isInstalled && Mode.TEST.equals(haloProperties.getMode())) {\n+        if (!isInstalled && !Mode.TEST.equals(haloProperties.getMode())) {\n             // If not installed\n             getFailureHandler().onFailure(request, response, new NotInstallException(\"当前博客还没有初始化\"));\n             return;",
    "output": "Fix installation on the first startup (#578)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/listener/comment/CommentEventListener.java b/src/main/java/run/halo/app/listener/comment/CommentEventListener.java\n--- a/src/main/java/run/halo/app/listener/comment/CommentEventListener.java\n+++ b/src/main/java/run/halo/app/listener/comment/CommentEventListener.java\n@@ -78,6 +78,8 @@ public void handleCommentNewEvent(CommentNewEvent newEvent) {\n \n         Map<String, Object> data = new HashMap<>();\n \n+        StringBuilder subject = new StringBuilder();\n+\n         if (newEvent.getSource() instanceof PostCommentService) {\n             // Get postComment id\n             PostComment postComment = postCommentService.getById(newEvent.getCommentId());\n@@ -93,6 +95,11 @@ public void handleCommentNewEvent(CommentNewEvent newEvent) {\n             data.put(\"page\", post.getTitle());\n             data.put(\"author\", postComment.getAuthor());\n             data.put(\"content\", postComment.getContent());\n+\n+            subject.append(\"您的博客文章《\")\n+                    .append(post.getTitle())\n+                    .append(\"》有了新的评论。\");\n+\n         } else if (newEvent.getSource() instanceof SheetCommentService) {\n             SheetComment sheetComment = sheetCommentService.getById(newEvent.getCommentId());\n \n@@ -107,6 +114,10 @@ public void handleCommentNewEvent(CommentNewEvent newEvent) {\n             data.put(\"page\", sheet.getTitle());\n             data.put(\"author\", sheetComment.getAuthor());\n             data.put(\"content\", sheetComment.getContent());\n+\n+            subject.append(\"您的博客页面《\")\n+                    .append(sheet.getTitle())\n+                    .append(\"》有了新的评论。\");\n         } else if (newEvent.getSource() instanceof JournalCommentService) {\n             JournalComment journalComment = journalCommentService.getById(newEvent.getCommentId());\n \n@@ -120,9 +131,11 @@ public void handleCommentNewEvent(CommentNewEvent newEvent) {\n             data.put(\"page\", journal.getCreateTime());\n             data.put(\"author\", journalComment.getAuthor());\n             data.put(\"content\", journalComment.getContent());\n+\n+            subject.append(\"您的博客日志有了新的评论\");\n         }\n \n-        mailService.sendTemplateMail(user.getEmail(), \"您的博客有新的评论\", data, \"common/mail_template/mail_notice.ftl\");\n+        mailService.sendTemplateMail(user.getEmail(), subject.toString(), data, \"common/mail_template/mail_notice.ftl\");\n     }\n \n     /**\n@@ -146,6 +159,8 @@ public void handleCommentReplyEvent(CommentReplyEvent replyEvent) {\n \n         Map<String, Object> data = new HashMap<>();\n \n+        StringBuilder subject = new StringBuilder();\n+\n         log.debug(\"replyEvent.getSource():\" + replyEvent.getSource().toString());\n \n         if (replyEvent.getSource() instanceof PostCommentService) {\n@@ -176,6 +191,12 @@ public void handleCommentReplyEvent(CommentReplyEvent replyEvent) {\n             data.put(\"baseContent\", baseComment.getContent());\n             data.put(\"replyAuthor\", postComment.getAuthor());\n             data.put(\"replyContent\", postComment.getContent());\n+\n+            subject.append(\"您在【\")\n+                    .append(blogTitle)\n+                    .append(\"】评论的文章《\")\n+                    .append(post.getTitle())\n+                    .append(\"》有了新的评论。\");\n         } else if (replyEvent.getSource() instanceof SheetCommentService) {\n \n             SheetComment sheetComment = sheetCommentService.getById(replyEvent.getCommentId());\n@@ -204,6 +225,12 @@ public void handleCommentReplyEvent(CommentReplyEvent replyEvent) {\n             data.put(\"baseContent\", baseComment.getContent());\n             data.put(\"replyAuthor\", sheetComment.getAuthor());\n             data.put(\"replyContent\", sheetComment.getContent());\n+\n+            subject.append(\"您在【\")\n+                    .append(blogTitle)\n+                    .append(\"】评论的页面《\")\n+                    .append(sheet.getTitle())\n+                    .append(\"》有了新的评论。\");\n         } else if (replyEvent.getSource() instanceof JournalCommentService) {\n             JournalComment journalComment = journalCommentService.getById(replyEvent.getCommentId());\n \n@@ -229,8 +256,13 @@ public void handleCommentReplyEvent(CommentReplyEvent replyEvent) {\n             data.put(\"baseContent\", baseComment.getContent());\n             data.put(\"replyAuthor\", journalComment.getAuthor());\n             data.put(\"replyContent\", journalComment.getContent());\n+\n+            subject.append(\"您在【\")\n+                    .append(blogTitle)\n+                    .append(\"】评论的日志\")\n+                    .append(\"有了新的评论。\");\n         }\n \n-        mailService.sendTemplateMail(baseAuthorEmail, \"您在【\" + blogTitle + \"】的评论有新回复\", data, \"common/mail_template/mail_reply.ftl\");\n+        mailService.sendTemplateMail(baseAuthorEmail, subject.toString(), data, \"common/mail_template/mail_reply.ftl\");\n     }\n }",
    "output": "style: modify email copy. (#568)\n\n* style: modify email copy.\r\n\r\n* style: modify email copy."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java b/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n--- a/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n+++ b/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n@@ -236,8 +236,7 @@ protected HandlerMethod lookupHandlerMethod(String lookupPath, HttpServletReques\n \n         private void initBlackPatterns() {\n             String uploadUrlPattern = ensureBoth(haloProperties.getUploadUrlPrefix(), URL_SEPARATOR) + \"**\";\n-            String adminPathPattern = ensureBoth(haloProperties.getAdminPath(), URL_SEPARATOR) + \"**\";\n-\n+            String adminPathPattern = ensureBoth(haloProperties.getAdminPath(), URL_SEPARATOR) + \"?*/**\";\n \n             blackPatterns.add(\"/themes/**\");\n             blackPatterns.add(\"/js/**\");\n\ndiff --git a/src/main/java/run/halo/app/controller/content/MainController.java b/src/main/java/run/halo/app/controller/content/MainController.java\n--- a/src/main/java/run/halo/app/controller/content/MainController.java\n+++ b/src/main/java/run/halo/app/controller/content/MainController.java\n@@ -11,6 +11,7 @@\n import run.halo.app.model.support.HaloConst;\n import run.halo.app.service.OptionService;\n import run.halo.app.service.UserService;\n+import run.halo.app.utils.HaloUtils;\n \n import javax.servlet.http.HttpServletResponse;\n import java.io.IOException;\n@@ -48,7 +49,7 @@ public MainController(UserService userService, OptionService optionService, Halo\n \n     @GetMapping(\"${halo.admin-path:admin}\")\n     public void admin(HttpServletResponse response) throws IOException {\n-        String adminIndexRedirectUri = StringUtils.appendIfMissing(this.haloProperties.getAdminPath(), \"/\") + INDEX_REDIRECT_URI;\n+        String adminIndexRedirectUri = HaloUtils.ensureBoth(haloProperties.getAdminPath(), HaloUtils.URL_SEPARATOR) + INDEX_REDIRECT_URI;\n         response.sendRedirect(adminIndexRedirectUri);\n     }\n \n\ndiff --git a/src/test/java/run/halo/app/conf/AntPathMatcherTest.java b/src/test/java/run/halo/app/conf/AntPathMatcherTest.java\n--- a/src/test/java/run/halo/app/conf/AntPathMatcherTest.java\n+++ b/src/test/java/run/halo/app/conf/AntPathMatcherTest.java\n@@ -0,0 +1,24 @@\n+package run.halo.app.conf;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.springframework.util.AntPathMatcher;\n+\n+/**\n+ * Ant path matcher test.\n+ *\n+ * @author johnniang\n+ */\n+public class AntPathMatcherTest {\n+\n+    private final AntPathMatcher pathMatcher = new AntPathMatcher();\n+\n+    @Test\n+    public void matchTest() {\n+        Assert.assertFalse(pathMatcher.match(\"/admin/?*/**\", \"/admin\"));\n+        Assert.assertFalse(pathMatcher.match(\"/admin/?*/**\", \"/admin/\"));\n+\n+        Assert.assertTrue(pathMatcher.match(\"/admin/?*/**\", \"/admin/index.html\"));\n+        Assert.assertTrue(pathMatcher.match(\"/admin/?*/**\", \"/admin/index.html/more\"));\n+    }\n+}",
    "output": "Merge branch 'master' of github.com:halo-dev/halo into fix-backup-function"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java b/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n--- a/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n+++ b/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n@@ -236,8 +236,7 @@ protected HandlerMethod lookupHandlerMethod(String lookupPath, HttpServletReques\n \n         private void initBlackPatterns() {\n             String uploadUrlPattern = ensureBoth(haloProperties.getUploadUrlPrefix(), URL_SEPARATOR) + \"**\";\n-            String adminPathPattern = ensureBoth(haloProperties.getAdminPath(), URL_SEPARATOR) + \"**\";\n-\n+            String adminPathPattern = ensureBoth(haloProperties.getAdminPath(), URL_SEPARATOR) + \"?*/**\";\n \n             blackPatterns.add(\"/themes/**\");\n             blackPatterns.add(\"/js/**\");\n\ndiff --git a/src/main/java/run/halo/app/controller/content/MainController.java b/src/main/java/run/halo/app/controller/content/MainController.java\n--- a/src/main/java/run/halo/app/controller/content/MainController.java\n+++ b/src/main/java/run/halo/app/controller/content/MainController.java\n@@ -11,6 +11,7 @@\n import run.halo.app.model.support.HaloConst;\n import run.halo.app.service.OptionService;\n import run.halo.app.service.UserService;\n+import run.halo.app.utils.HaloUtils;\n \n import javax.servlet.http.HttpServletResponse;\n import java.io.IOException;\n@@ -48,7 +49,7 @@ public MainController(UserService userService, OptionService optionService, Halo\n \n     @GetMapping(\"${halo.admin-path:admin}\")\n     public void admin(HttpServletResponse response) throws IOException {\n-        String adminIndexRedirectUri = StringUtils.appendIfMissing(this.haloProperties.getAdminPath(), \"/\") + INDEX_REDIRECT_URI;\n+        String adminIndexRedirectUri = HaloUtils.ensureBoth(haloProperties.getAdminPath(), HaloUtils.URL_SEPARATOR) + INDEX_REDIRECT_URI;\n         response.sendRedirect(adminIndexRedirectUri);\n     }\n \n\ndiff --git a/src/test/java/run/halo/app/conf/AntPathMatcherTest.java b/src/test/java/run/halo/app/conf/AntPathMatcherTest.java\n--- a/src/test/java/run/halo/app/conf/AntPathMatcherTest.java\n+++ b/src/test/java/run/halo/app/conf/AntPathMatcherTest.java\n@@ -0,0 +1,24 @@\n+package run.halo.app.conf;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.springframework.util.AntPathMatcher;\n+\n+/**\n+ * Ant path matcher test.\n+ *\n+ * @author johnniang\n+ */\n+public class AntPathMatcherTest {\n+\n+    private final AntPathMatcher pathMatcher = new AntPathMatcher();\n+\n+    @Test\n+    public void matchTest() {\n+        Assert.assertFalse(pathMatcher.match(\"/admin/?*/**\", \"/admin\"));\n+        Assert.assertFalse(pathMatcher.match(\"/admin/?*/**\", \"/admin/\"));\n+\n+        Assert.assertTrue(pathMatcher.match(\"/admin/?*/**\", \"/admin/index.html\"));\n+        Assert.assertTrue(pathMatcher.match(\"/admin/?*/**\", \"/admin/index.html/more\"));\n+    }\n+}",
    "output": "Fix admin index page redirect (#566)\n\n* Add custom RequestMappingHandlerMapping for enable static resources access\r\n\r\n* Fix admin index page redirect"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java b/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n--- a/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n+++ b/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n@@ -15,15 +15,20 @@\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.PropertySource;\n import org.springframework.data.domain.PageImpl;\n+import org.springframework.data.web.PageableHandlerMethodArgumentResolver;\n+import org.springframework.data.web.SortHandlerMethodArgumentResolver;\n import org.springframework.format.FormatterRegistry;\n import org.springframework.http.converter.HttpMessageConverter;\n import org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;\n import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\n+import org.springframework.util.AntPathMatcher;\n+import org.springframework.util.PathMatcher;\n+import org.springframework.web.method.HandlerMethod;\n import org.springframework.web.method.support.HandlerMethodArgumentResolver;\n-import org.springframework.web.servlet.config.annotation.EnableWebMvc;\n import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\n import org.springframework.web.servlet.config.annotation.ViewResolverRegistry;\n-import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n+import org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;\n+import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;\n import org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer;\n import org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver;\n import run.halo.app.config.properties.HaloProperties;\n@@ -32,11 +37,9 @@\n import run.halo.app.model.support.HaloConst;\n import run.halo.app.security.resolver.AuthenticationArgumentResolver;\n \n+import javax.servlet.http.HttpServletRequest;\n import java.io.IOException;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Properties;\n+import java.util.*;\n \n import static run.halo.app.model.support.HaloConst.FILE_SEPARATOR;\n import static run.halo.app.model.support.HaloConst.HALO_ADMIN_RELATIVE_PATH;\n@@ -50,16 +53,23 @@\n  */\n @Slf4j\n @Configuration\n-@EnableWebMvc\n @ComponentScan(basePackages = \"run.halo.app.controller\")\n @PropertySource(value = \"classpath:application.yaml\", ignoreResourceNotFound = true, encoding = \"UTF-8\")\n-public class WebMvcAutoConfiguration implements WebMvcConfigurer {\n+public class WebMvcAutoConfiguration extends WebMvcConfigurationSupport {\n \n     private static final String FILE_PROTOCOL = \"file:///\";\n \n+    private final PageableHandlerMethodArgumentResolver pageableResolver;\n+\n+    private final SortHandlerMethodArgumentResolver sortResolver;\n+\n     private final HaloProperties haloProperties;\n \n-    public WebMvcAutoConfiguration(HaloProperties haloProperties) {\n+    public WebMvcAutoConfiguration(PageableHandlerMethodArgumentResolver pageableResolver,\n+                                   SortHandlerMethodArgumentResolver sortResolver,\n+                                   HaloProperties haloProperties) {\n+        this.pageableResolver = pageableResolver;\n+        this.sortResolver = sortResolver;\n         this.haloProperties = haloProperties;\n     }\n \n@@ -80,6 +90,8 @@ public void extendMessageConverters(List<HttpMessageConverter<?>> converters) {\n     @Override\n     public void addArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers) {\n         resolvers.add(new AuthenticationArgumentResolver());\n+        resolvers.add(pageableResolver);\n+        resolvers.add(sortResolver);\n     }\n \n     /**\n@@ -190,4 +202,54 @@ public void configureViewResolvers(ViewResolverRegistry registry) {\n         resolver.setContentType(\"text/html; charset=UTF-8\");\n         registry.viewResolver(resolver);\n     }\n+\n+    @Override\n+    protected RequestMappingHandlerMapping createRequestMappingHandlerMapping() {\n+        return new HaloRequestMappingHandlerMapping(haloProperties);\n+    }\n+\n+    private static class HaloRequestMappingHandlerMapping extends RequestMappingHandlerMapping {\n+\n+        private final Set<String> blackPatterns = new HashSet<>(16);\n+\n+        private final PathMatcher pathMatcher;\n+\n+        private final HaloProperties haloProperties;\n+\n+        public HaloRequestMappingHandlerMapping(HaloProperties haloProperties) {\n+            this.haloProperties = haloProperties;\n+            this.initBlackPatterns();\n+            pathMatcher = new AntPathMatcher();\n+        }\n+\n+        @Override\n+        protected HandlerMethod lookupHandlerMethod(String lookupPath, HttpServletRequest request) throws Exception {\n+            log.debug(\"Looking path: [{}]\", lookupPath);\n+            for (String blackPattern : blackPatterns) {\n+                if (this.pathMatcher.match(blackPattern, lookupPath)) {\n+                    log.info(\"Skipped path [{}] with pattern: [{}]\", lookupPath, blackPattern);\n+                    return null;\n+                }\n+            }\n+            return super.lookupHandlerMethod(lookupPath, request);\n+        }\n+\n+        private void initBlackPatterns() {\n+            String uploadUrlPattern = ensureBoth(haloProperties.getUploadUrlPrefix(), URL_SEPARATOR) + \"**\";\n+            String adminPathPattern = ensureBoth(haloProperties.getAdminPath(), URL_SEPARATOR) + \"**\";\n+\n+\n+            blackPatterns.add(\"/themes/**\");\n+            blackPatterns.add(\"/js/**\");\n+            blackPatterns.add(\"/images/**\");\n+            blackPatterns.add(\"/fonts/**\");\n+            blackPatterns.add(\"/css/**\");\n+            blackPatterns.add(\"/assets/**\");\n+            blackPatterns.add(\"/swagger-ui.html\");\n+            blackPatterns.add(\"/csrf\");\n+            blackPatterns.add(\"/webjars/**\");\n+            blackPatterns.add(uploadUrlPattern);\n+            blackPatterns.add(adminPathPattern);\n+        }\n+    }\n }\n\ndiff --git a/src/main/java/run/halo/app/controller/content/ContentArchiveController.java b/src/main/java/run/halo/app/controller/content/ContentArchiveController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentArchiveController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentArchiveController.java\n@@ -33,6 +33,7 @@ public class ContentArchiveController {\n \n     private final StringCacheStore cacheStore;\n \n+\n     public ContentArchiveController(PostService postService,\n                                     OptionService optionService,\n                                     StringCacheStore cacheStore) {\n@@ -41,14 +42,14 @@ public ContentArchiveController(PostService postService,\n         this.cacheStore = cacheStore;\n     }\n \n-    @GetMapping(value = \"{url}/password\")\n+    @GetMapping(value = \"{url:.*}/password\")\n     public String password(@PathVariable(\"url\") String url,\n                            Model model) {\n         model.addAttribute(\"url\", url);\n         return \"common/template/post_password\";\n     }\n \n-    @PostMapping(value = \"{url}/password\")\n+    @PostMapping(value = \"{url:.*}/password\")\n     @CacheLock(traceRequest = true, expired = 2)\n     public String password(@PathVariable(\"url\") String url,\n                            @RequestParam(value = \"password\") String password) {\n\ndiff --git a/src/main/java/run/halo/app/controller/content/ContentContentController.java b/src/main/java/run/halo/app/controller/content/ContentContentController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentContentController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentContentController.java\n@@ -77,7 +77,7 @@ public String content(@PathVariable(\"prefix\") String prefix,\n         }\n     }\n \n-    @GetMapping(\"{prefix}/page/{page}\")\n+    @GetMapping(\"{prefix}/page/{page:\\\\d+}\")\n     public String content(@PathVariable(\"prefix\") String prefix,\n                           @PathVariable(value = \"page\") Integer page,\n                           Model model) {\n@@ -89,7 +89,7 @@ public String content(@PathVariable(\"prefix\") String prefix,\n         }\n     }\n \n-    @GetMapping(\"{prefix}/{url}\")\n+    @GetMapping(\"{prefix}/{url:.+}\")\n     public String content(@PathVariable(\"prefix\") String prefix,\n                           @PathVariable(\"url\") String url,\n                           @RequestParam(value = \"token\", required = false) String token,\n@@ -115,7 +115,7 @@ public String content(@PathVariable(\"prefix\") String prefix,\n         }\n     }\n \n-    @GetMapping(\"{prefix}/{url}/page/{page}\")\n+    @GetMapping(\"{prefix}/{url}/page/{page:\\\\d+}\")\n     public String content(@PathVariable(\"prefix\") String prefix,\n                           @PathVariable(\"url\") String url,\n                           @PathVariable(\"page\") Integer page,\n@@ -132,7 +132,7 @@ public String content(@PathVariable(\"prefix\") String prefix,\n         }\n     }\n \n-    //    @GetMapping(\"{year:^[^A-Za-z]*$}/{month:^[^A-Za-z]*$}/{url}\")\n+    @GetMapping(\"{year:\\\\d+}/{month:\\\\d+}/{url:.+}\")\n     public String content(@PathVariable(\"year\") Integer year,\n                           @PathVariable(\"month\") Integer month,\n                           @PathVariable(\"url\") String url,\n@@ -147,7 +147,7 @@ public String content(@PathVariable(\"year\") Integer year,\n         }\n     }\n \n-    //    @GetMapping(\"{year:^[^A-Za-z]*$}/{month:^[^A-Za-z]*$}/{day:^[^A-Za-z]*$}/{url}\")\n+    @GetMapping(\"{year:\\\\d+}/{month:\\\\d+}/{day:\\\\d+}/{url:.+}\")\n     public String content(@PathVariable(\"year\") Integer year,\n                           @PathVariable(\"month\") Integer month,\n                           @PathVariable(\"day\") Integer day,",
    "output": "Add custom RequestMappingHandlerMapping for enable static resources access (#558)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n@@ -45,6 +45,8 @@\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.concurrent.TimeUnit;\n@@ -473,6 +475,8 @@ public String getLogFiles(Long lines) {\n \n         File file = new File(haloProperties.getWorkDir(), LOG_PATH);\n \n+        List<String> linesArray = new ArrayList<>();\n+\n         StringBuilder result = new StringBuilder();\n \n         if (!file.exists()) {\n@@ -493,8 +497,7 @@ public String getLogFiles(Long lines) {\n                     randomAccessFile.seek(pos);\n                     if (randomAccessFile.readByte() == '\\n') {\n                         String line = randomAccessFile.readLine();\n-                        result.append(new String(line.getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8));\n-                        result.append(StringUtils.LF);\n+                        linesArray.add(new String(line.getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8));\n                         count++;\n                         if (count == lines) {\n                             break;\n@@ -503,8 +506,7 @@ public String getLogFiles(Long lines) {\n                 }\n                 if (pos == 0) {\n                     randomAccessFile.seek(0);\n-                    result.append(new String(randomAccessFile.readLine().getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8));\n-                    result.append(StringUtils.LF);\n+                    linesArray.add(new String(randomAccessFile.readLine().getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8));\n                 }\n             }\n         } catch (Exception e) {\n@@ -518,6 +520,14 @@ public String getLogFiles(Long lines) {\n                 }\n             }\n         }\n+\n+        Collections.reverse(linesArray);\n+\n+        linesArray.forEach(line -> {\n+            result.append(line)\n+                    .append(StringUtils.LF);\n+        });\n+\n         return result.toString();\n     }\n }",
    "output": "fix: Incorrect sequence of tailing log file#517 (#556)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/listener/freemarker/FreemarkerConfigAwareListener.java b/src/main/java/run/halo/app/listener/freemarker/FreemarkerConfigAwareListener.java\n--- a/src/main/java/run/halo/app/listener/freemarker/FreemarkerConfigAwareListener.java\n+++ b/src/main/java/run/halo/app/listener/freemarker/FreemarkerConfigAwareListener.java\n@@ -10,6 +10,7 @@\n import org.springframework.stereotype.Component;\n import run.halo.app.event.options.OptionUpdatedEvent;\n import run.halo.app.event.theme.ThemeActivatedEvent;\n+import run.halo.app.event.theme.ThemeUpdatedEvent;\n import run.halo.app.event.user.UserUpdatedEvent;\n import run.halo.app.handler.theme.config.support.ThemeProperty;\n import run.halo.app.model.properties.OtherProperties;\n@@ -23,7 +24,8 @@\n  * Freemarker config aware listener.\n  *\n  * @author johnniang\n- * @date 19-4-20\n+ * @author ryanwang\n+ * @date 2019-04-20\n  */\n @Slf4j\n @Component\n@@ -68,6 +70,13 @@ public void onThemeActivatedEvent(ThemeActivatedEvent themeActivatedEvent) throw\n         loadThemeConfig();\n     }\n \n+    @EventListener\n+    public void onThemeUpdatedEvent(ThemeUpdatedEvent event) throws TemplateModelException {\n+        log.debug(\"Received theme updated event\");\n+\n+        loadThemeConfig();\n+    }\n+\n     @EventListener\n     public void onUserUpdate(UserUpdatedEvent event) throws TemplateModelException {\n         log.debug(\"Received user updated event, user id: [{}]\", event.getUserId());\n\ndiff --git a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n@@ -597,6 +597,8 @@ public ThemeProperty update(String themeId, MultipartFile file) {\n             // Coping new theme files to old theme folder.\n             FileUtils.copyFolder(preparePath, Paths.get(updatingTheme.getThemePath()));\n \n+            eventPublisher.publishEvent(new ThemeUpdatedEvent(this));\n+\n             // Gets theme property again.\n             return getProperty(Paths.get(updatingTheme.getThemePath()));\n         } catch (IOException e) {",
    "output": "fix: Theme refresh issue #553 (#554)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/properties/HaloProperties.java b/src/main/java/run/halo/app/config/properties/HaloProperties.java\n--- a/src/main/java/run/halo/app/config/properties/HaloProperties.java\n+++ b/src/main/java/run/halo/app/config/properties/HaloProperties.java\n@@ -68,10 +68,4 @@ public class HaloProperties {\n      */\n     private String cache = \"memory\";\n \n-\n-    public HaloProperties() throws IOException {\n-        // Create work directory if not exist\n-        Files.createDirectories(Paths.get(workDir));\n-        Files.createDirectories(Paths.get(backupDir));\n-    }\n }\n\ndiff --git a/src/main/java/run/halo/app/listener/StartedListener.java b/src/main/java/run/halo/app/listener/StartedListener.java\n--- a/src/main/java/run/halo/app/listener/StartedListener.java\n+++ b/src/main/java/run/halo/app/listener/StartedListener.java\n@@ -57,6 +57,7 @@ public class StartedListener implements ApplicationListener<ApplicationStartedEv\n     public void onApplicationEvent(ApplicationStartedEvent event) {\n         this.migrate();\n         this.initThemes();\n+        this.initDirectory();\n         this.printStartInfo();\n     }\n \n@@ -140,4 +141,24 @@ private FileSystem getFileSystem(@NonNull URI uri) throws IOException {\n \n         return fileSystem;\n     }\n+\n+    private void initDirectory() {\n+        Path workPath = Paths.get(haloProperties.getWorkDir());\n+        Path backupPath = Paths.get(haloProperties.getBackupDir());\n+\n+        try {\n+            if (Files.notExists(workPath)) {\n+                Files.createDirectories(workPath);\n+                log.info(\"Created work directory: [{}]\", workPath);\n+            }\n+\n+            if (Files.notExists(backupPath)) {\n+                Files.createDirectories(backupPath);\n+                log.info(\"Created backup directory: [{}]\", backupPath);\n+            }\n+\n+        } catch (IOException ie) {\n+            throw new RuntimeException(\"Failed to initialize directories\", ie);\n+        }\n+    }\n }",
    "output": "Create temporary file after halo is started"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java b/src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java\n@@ -18,6 +18,7 @@\n import run.halo.app.model.enums.AttachmentType;\n import run.halo.app.model.params.AttachmentQuery;\n import run.halo.app.model.properties.AttachmentProperties;\n+import run.halo.app.model.properties.OtherProperties;\n import run.halo.app.model.support.UploadResult;\n import run.halo.app.repository.AttachmentRepository;\n import run.halo.app.service.AttachmentService;\n@@ -157,13 +158,15 @@ public AttachmentDTO convertToDto(Attachment attachment) {\n         // Get blog base url\n         String blogBaseUrl = optionService.getBlogBaseUrl();\n \n+        Boolean enabledAbsolutePath = optionService.getByPropertyOrDefault(OtherProperties.GLOBAL_ABSOLUTE_PATH_ENABLED, Boolean.class, true);\n+\n         // Convert to output dto\n         AttachmentDTO attachmentDTO = new AttachmentDTO().convertFrom(attachment);\n \n         if (Objects.equals(attachmentDTO.getType(), AttachmentType.LOCAL)) {\n             // Append blog base url to path and thumbnail\n-            String fullPath = StringUtils.join(blogBaseUrl, \"/\", attachmentDTO.getPath());\n-            String fullThumbPath = StringUtils.join(blogBaseUrl, \"/\", attachmentDTO.getThumbPath());\n+            String fullPath = StringUtils.join(enabledAbsolutePath ? blogBaseUrl : \"\", \"/\", attachmentDTO.getPath());\n+            String fullThumbPath = StringUtils.join(enabledAbsolutePath ? blogBaseUrl : \"\", \"/\", attachmentDTO.getThumbPath());\n \n             // Set full path and full thumb path\n             attachmentDTO.setPath(fullPath);",
    "output": "feat: support set attachment path type. (#539)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java b/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n--- a/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n+++ b/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n@@ -43,7 +43,7 @@\n import static run.halo.app.utils.HaloUtils.*;\n \n /**\n- * Mvc configuration.\n+ * Spring mvc configuration.\n  *\n  * @author ryanwang\n  * @date 2018-01-02\n@@ -90,12 +90,17 @@ public void addArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers)\n     @Override\n     public void addResourceHandlers(ResourceHandlerRegistry registry) {\n         String workDir = FILE_PROTOCOL + ensureSuffix(haloProperties.getWorkDir(), FILE_SEPARATOR);\n+\n+        // register /** resource handler.\n         registry.addResourceHandler(\"/**\")\n-                .addResourceLocations(workDir + \"templates/themes/\")\n                 .addResourceLocations(workDir + \"templates/admin/\")\n                 .addResourceLocations(\"classpath:/admin/\")\n                 .addResourceLocations(workDir + \"static/\");\n \n+        // register /themes/** resource handler.\n+        registry.addResourceHandler(\"/themes/**\")\n+                .addResourceLocations(workDir + \"templates/themes/\");\n+\n         String uploadUrlPattern = ensureBoth(haloProperties.getUploadUrlPrefix(), URL_SEPARATOR) + \"**\";\n         String adminPathPattern = ensureSuffix(haloProperties.getAdminPath(), URL_SEPARATOR) + \"**\";\n \n@@ -159,7 +164,7 @@ public FreeMarkerConfigurer freemarkerConfig(HaloProperties haloProperties) thro\n         configurer.setConfiguration(configuration);\n \n         // Set layout variable\n-        Map<String, Object> freemarkerVariables = new HashMap<>(5);\n+        Map<String, Object> freemarkerVariables = new HashMap<>(3);\n \n         freemarkerVariables.put(\"layout\", freemarkerLayoutDirectives());\n \n\ndiff --git a/src/main/java/run/halo/app/listener/freemarker/FreemarkerConfigAwareListener.java b/src/main/java/run/halo/app/listener/freemarker/FreemarkerConfigAwareListener.java\n--- a/src/main/java/run/halo/app/listener/freemarker/FreemarkerConfigAwareListener.java\n+++ b/src/main/java/run/halo/app/listener/freemarker/FreemarkerConfigAwareListener.java\n@@ -103,8 +103,15 @@ private void loadThemeConfig() throws TemplateModelException {\n \n         Boolean enabledAbsolutePath = optionService.getByPropertyOrDefault(OtherProperties.GLOBAL_ABSOLUTE_PATH_ENABLED, Boolean.class, true);\n \n+        String themeBasePath = (enabledAbsolutePath ? optionService.getBlogBaseUrl() : \"\") + \"/themes/\" + activatedTheme.getFolderName();\n+\n         configuration.setSharedVariable(\"theme\", activatedTheme);\n-        configuration.setSharedVariable(\"static\", (enabledAbsolutePath ? optionService.getBlogBaseUrl() : \"\") + \"/\" + activatedTheme.getFolderName());\n+\n+        // TODO: It will be removed in future versions\n+        configuration.setSharedVariable(\"static\", themeBasePath);\n+\n+        configuration.setSharedVariable(\"theme_base\", themeBasePath);\n+\n         configuration.setSharedVariable(\"settings\", themeSettingService.listAsMapBy(themeService.getActivatedThemeId()));\n         log.debug(\"Loaded theme and settings\");\n     }",
    "output": "feat: change themes assets base path (#538)\n\n* feat: change theme resources base path.\r\n\r\n* feat: add new variable about theme base path."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java b/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n--- a/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n+++ b/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n@@ -4,6 +4,10 @@\n import freemarker.core.TemplateClassResolver;\n import freemarker.template.TemplateException;\n import freemarker.template.TemplateExceptionHandler;\n+import freemarker.template.TemplateModel;\n+import kr.pe.kwonnam.freemarker.inheritance.BlockDirective;\n+import kr.pe.kwonnam.freemarker.inheritance.ExtendsDirective;\n+import kr.pe.kwonnam.freemarker.inheritance.PutDirective;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.boot.jackson.JsonComponentModule;\n import org.springframework.context.annotation.Bean;\n@@ -29,7 +33,9 @@\n import run.halo.app.security.resolver.AuthenticationArgumentResolver;\n \n import java.io.IOException;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n import java.util.Properties;\n \n import static run.halo.app.model.support.HaloConst.FILE_SEPARATOR;\n@@ -114,6 +120,16 @@ public void addFormatters(FormatterRegistry registry) {\n         registry.addConverterFactory(new StringToEnumConverterFactory());\n     }\n \n+    @Bean\n+    public Map<String, TemplateModel> freemarkerLayoutDirectives() {\n+        Map<String, TemplateModel> freemarkerLayoutDirectives = new HashMap<>(5);\n+        freemarkerLayoutDirectives.put(\"extends\", new ExtendsDirective());\n+        freemarkerLayoutDirectives.put(\"block\", new BlockDirective());\n+        freemarkerLayoutDirectives.put(\"put\", new PutDirective());\n+\n+        return freemarkerLayoutDirectives;\n+    }\n+\n     /**\n      * Configuring freemarker template file path.\n      *\n@@ -142,6 +158,13 @@ public FreeMarkerConfigurer freemarkerConfig(HaloProperties haloProperties) thro\n         // Set predefined freemarker configuration\n         configurer.setConfiguration(configuration);\n \n+        // Set layout variable\n+        Map<String, Object> freemarkerVariables = new HashMap<>(5);\n+\n+        freemarkerVariables.put(\"layout\", freemarkerLayoutDirectives());\n+\n+        configurer.setFreemarkerVariables(freemarkerVariables);\n+\n         return configurer;\n     }\n ",
    "output": "feat: support freemarker template Inheritance #534 (#537)\n\n* feat: #534\r\n\r\n* fix: HashMap initialCapacity"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/listener/freemarker/FreemarkerConfigAwareListener.java b/src/main/java/run/halo/app/listener/freemarker/FreemarkerConfigAwareListener.java\n--- a/src/main/java/run/halo/app/listener/freemarker/FreemarkerConfigAwareListener.java\n+++ b/src/main/java/run/halo/app/listener/freemarker/FreemarkerConfigAwareListener.java\n@@ -12,6 +12,7 @@\n import run.halo.app.event.theme.ThemeActivatedEvent;\n import run.halo.app.event.user.UserUpdatedEvent;\n import run.halo.app.handler.theme.config.support.ThemeProperty;\n+import run.halo.app.model.properties.OtherProperties;\n import run.halo.app.model.support.HaloConst;\n import run.halo.app.service.OptionService;\n import run.halo.app.service.ThemeService;\n@@ -96,9 +97,14 @@ private void loadOptionsConfig() throws TemplateModelException {\n     }\n \n     private void loadThemeConfig() throws TemplateModelException {\n+\n+        // Get current activated theme.\n         ThemeProperty activatedTheme = themeService.getActivatedTheme();\n+\n+        Boolean enabledAbsolutePath = optionService.getByPropertyOrDefault(OtherProperties.GLOBAL_ABSOLUTE_PATH_ENABLED, Boolean.class, true);\n+\n         configuration.setSharedVariable(\"theme\", activatedTheme);\n-        configuration.setSharedVariable(\"static\", optionService.getBlogBaseUrl() + \"/\" + activatedTheme.getFolderName());\n+        configuration.setSharedVariable(\"static\", (enabledAbsolutePath ? optionService.getBlogBaseUrl() : \"\") + \"/\" + activatedTheme.getFolderName());\n         configuration.setSharedVariable(\"settings\", themeSettingService.listAsMapBy(themeService.getActivatedThemeId()));\n         log.debug(\"Loaded theme and settings\");\n     }\n\ndiff --git a/src/main/java/run/halo/app/model/enums/GlobalPathType.java b/src/main/java/run/halo/app/model/enums/GlobalPathType.java\n--- a/src/main/java/run/halo/app/model/enums/GlobalPathType.java\n+++ b/src/main/java/run/halo/app/model/enums/GlobalPathType.java\n@@ -0,0 +1,31 @@\n+package run.halo.app.model.enums;\n+\n+/**\n+ * Global path type.\n+ *\n+ * @author ryanwang\n+ * @date 2020-02-01\n+ */\n+public enum GlobalPathType implements ValueEnum<Integer> {\n+\n+    /**\n+     * Relative path.\n+     */\n+    RELATIVE(0),\n+\n+    /**\n+     * Absolute path.\n+     */\n+    ABSOLUTE(1);\n+\n+    private Integer value;\n+\n+    GlobalPathType(Integer value) {\n+        this.value = value;\n+    }\n+\n+    @Override\n+    public Integer getValue() {\n+        return value;\n+    }\n+}\n\ndiff --git a/src/main/java/run/halo/app/model/properties/OtherProperties.java b/src/main/java/run/halo/app/model/properties/OtherProperties.java\n--- a/src/main/java/run/halo/app/model/properties/OtherProperties.java\n+++ b/src/main/java/run/halo/app/model/properties/OtherProperties.java\n@@ -22,7 +22,12 @@ public enum OtherProperties implements PropertyEnum {\n     /**\n      * Statistics platform code,such as Google Analytics.\n      */\n-    STATISTICS_CODE(\"blog_statistics_code\", String.class, \"\");\n+    STATISTICS_CODE(\"blog_statistics_code\", String.class, \"\"),\n+\n+    /**\n+     * Global absolute path enabled.\n+     */\n+    GLOBAL_ABSOLUTE_PATH_ENABLED(\"global_absolute_path_enabled\", Boolean.class, \"true\");\n \n     private final String value;\n ",
    "output": "feat: support set theme static source path type. (#535)\n\n* feat: support set theme static source path type.\r\n\r\n* refactor: global_absolute_path_enabled property."
  },
  {
    "input": "diff --git a/src/test/java/run/halo/app/cache/CacheStoreTest.java b/src/test/java/run/halo/app/cache/CacheStoreTest.java\n--- a/src/test/java/run/halo/app/cache/CacheStoreTest.java\n+++ b/src/test/java/run/halo/app/cache/CacheStoreTest.java\n@@ -1,10 +1,6 @@\n package run.halo.app.cache;\n \n import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.boot.test.context.SpringBootTest;\n-import org.springframework.test.context.junit4.SpringRunner;\n \n import java.util.Optional;\n import java.util.concurrent.TimeUnit;\n@@ -18,12 +14,9 @@\n  * @author johnniang\n  * @date 3/28/19\n  */\n-@RunWith(SpringRunner.class)\n-@SpringBootTest\n public class CacheStoreTest {\n \n-    @Autowired\n-    private StringCacheStore cacheStore;\n+    private StringCacheStore cacheStore = new InMemoryCacheStore();\n \n     @Test(expected = IllegalArgumentException.class)\n     public void putNullValueTest() {",
    "output": "Fix test error (#528)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/handler/file/LocalFileHandler.java b/src/main/java/run/halo/app/handler/file/LocalFileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/LocalFileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/LocalFileHandler.java\n@@ -19,6 +19,7 @@\n import java.awt.image.BufferedImage;\n import java.io.FileInputStream;\n import java.io.IOException;\n+import java.io.InputStream;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n@@ -142,14 +143,14 @@ public UploadResult upload(MultipartFile file) {\n             // Check file type\n             if (FileHandler.isImageType(uploadResult.getMediaType()) && !isSvg) {\n                 lock.lock();\n-                try {\n+                try (InputStream uploadFileInputStream = new FileInputStream(uploadPath.toFile())) {\n                     // Upload a thumbnail\n                     String thumbnailBasename = basename + THUMBNAIL_SUFFIX;\n                     String thumbnailSubFilePath = subDir + thumbnailBasename + '.' + extension;\n                     Path thumbnailPath = Paths.get(workDir + thumbnailSubFilePath);\n \n                     // Read as image\n-                    BufferedImage originalImage = ImageUtils.getImageFromFile(new FileInputStream(uploadPath.toFile()), extension);\n+                    BufferedImage originalImage = ImageUtils.getImageFromFile(uploadFileInputStream, extension);\n                     // Set width and height\n                     uploadResult.setWidth(originalImage.getWidth());\n                     uploadResult.setHeight(originalImage.getHeight());\n@@ -232,7 +233,7 @@ private boolean generateThumbnail(BufferedImage originalImage, Path thumbPath, S\n             log.debug(\"Generated thumbnail image, and wrote the thumbnail to [{}]\", thumbPath.toString());\n             result = true;\n         } catch (Throwable t) {\n-            log.warn(\"Failed to generate thumbnail: [{}]\", thumbPath);\n+            log.warn(\"Failed to generate thumbnail: \" + thumbPath, t);\n         }\n         return result;\n     }",
    "output": "Close file input stream after reading image file (#527)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/ContentContentController.java b/src/main/java/run/halo/app/controller/content/ContentContentController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentContentController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentContentController.java\n@@ -59,7 +59,7 @@ public ContentContentController(PostModel postModel,\n         this.sheetService = sheetService;\n     }\n \n-    //    @GetMapping(\"{prefix}\")\n+    @GetMapping(\"{prefix}\")\n     public String content(@PathVariable(\"prefix\") String prefix,\n                           Model model) {\n         String archivesPrefix = optionService.getByPropertyOrDefault(PermalinkProperties.ARCHIVES_PREFIX, String.class, PermalinkProperties.ARCHIVES_PREFIX.defaultValue());\n@@ -89,7 +89,7 @@ public String content(@PathVariable(\"prefix\") String prefix,\n         }\n     }\n \n-    //    @GetMapping(\"{prefix}/{url}\")\n+    @GetMapping(\"{prefix}/{url}\")\n     public String content(@PathVariable(\"prefix\") String prefix,\n                           @PathVariable(\"url\") String url,\n                           @RequestParam(value = \"token\", required = false) String token,",
    "output": "Uncomment content url mappings (#523)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/core/freemarker/tag/ToolTagDirective.java b/src/main/java/run/halo/app/core/freemarker/tag/ToolTagDirective.java\n--- a/src/main/java/run/halo/app/core/freemarker/tag/ToolTagDirective.java\n+++ b/src/main/java/run/halo/app/core/freemarker/tag/ToolTagDirective.java\n@@ -0,0 +1,50 @@\n+package run.halo.app.core.freemarker.tag;\n+\n+import cn.hutool.core.util.PageUtil;\n+import cn.hutool.core.util.RandomUtil;\n+import freemarker.core.Environment;\n+import freemarker.template.*;\n+import org.springframework.stereotype.Component;\n+import run.halo.app.model.support.HaloConst;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+/**\n+ * Freemarker custom tag of tools.\n+ *\n+ * @author ryanwang\n+ * @date 2020-01-17\n+ */\n+@Component\n+public class ToolTagDirective implements TemplateDirectiveModel {\n+\n+    public ToolTagDirective(Configuration configuration) {\n+        configuration.setSharedVariable(\"toolTag\", this);\n+    }\n+\n+    @Override\n+    public void execute(Environment env, Map params, TemplateModel[] loopVars, TemplateDirectiveBody body) throws TemplateException, IOException {\n+        final DefaultObjectWrapperBuilder builder = new DefaultObjectWrapperBuilder(Configuration.VERSION_2_3_25);\n+\n+        if (params.containsKey(HaloConst.METHOD_KEY)) {\n+            String method = params.get(HaloConst.METHOD_KEY).toString();\n+            switch (method) {\n+                case \"rainbowPage\":\n+                    int page = Integer.parseInt(params.get(\"page\").toString());\n+                    int total = Integer.parseInt(params.get(\"total\").toString());\n+                    int display = Integer.parseInt(params.get(\"display\").toString());\n+                    env.setVariable(\"numbers\", builder.build().wrap(PageUtil.rainbow(page, total, display)));\n+                    break;\n+                case \"random\":\n+                    int min = Integer.parseInt(params.get(\"min\").toString());\n+                    int max = Integer.parseInt(params.get(\"max\").toString());\n+                    env.setVariable(\"number\", builder.build().wrap(RandomUtil.randomInt(min, max)));\n+                    break;\n+                default:\n+                    break;\n+            }\n+        }\n+        body.render(env.getOut());\n+    }\n+}",
    "output": "feat: create freemarker custom tag of tools. (#505)\n\n* feat: create freemarker custom tag of tools."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/utils/FileUtils.java b/src/main/java/run/halo/app/utils/FileUtils.java\n--- a/src/main/java/run/halo/app/utils/FileUtils.java\n+++ b/src/main/java/run/halo/app/utils/FileUtils.java\n@@ -211,8 +211,11 @@ public static Path tryToSkipZipParentFolder(@NonNull Path unzippedPath) throws I\n         try (Stream<Path> pathStream = Files.list(unzippedPath)) {\n             List<Path> childrenPath = pathStream.collect(Collectors.toList());\n \n-            if (childrenPath.size() == 1 && Files.isDirectory(childrenPath.get(0))) {\n-                return childrenPath.get(0);\n+            Path realPath = childrenPath.get(0);\n+            if (childrenPath.size() == 1 && Files.isDirectory(realPath)) {\n+                // Check directory traversal\n+                checkDirectoryTraversal(unzippedPath, realPath);\n+                return realPath;\n             }\n             return unzippedPath;\n         }",
    "output": "Fix vulnerability due to uncheck theme id (#499)"
  },
  {
    "input": "diff --git a/src/test/java/run/halo/app/model/enums/AttachmentTypeTest.java b/src/test/java/run/halo/app/model/enums/AttachmentTypeTest.java\n--- a/src/test/java/run/halo/app/model/enums/AttachmentTypeTest.java\n+++ b/src/test/java/run/halo/app/model/enums/AttachmentTypeTest.java\n@@ -5,6 +5,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.core.convert.ConversionService;\n+import org.springframework.test.context.ActiveProfiles;\n import org.springframework.test.context.junit4.SpringRunner;\n \n import static org.hamcrest.Matchers.equalTo;\n@@ -17,6 +18,7 @@\n  */\n @RunWith(SpringRunner.class)\n @SpringBootTest\n+@ActiveProfiles(\"test\")\n public class AttachmentTypeTest {\n \n     @Autowired\n\ndiff --git a/src/test/java/run/halo/app/utils/FileUtilsTest.java b/src/test/java/run/halo/app/utils/FileUtilsTest.java\n--- a/src/test/java/run/halo/app/utils/FileUtilsTest.java\n+++ b/src/test/java/run/halo/app/utils/FileUtilsTest.java\n@@ -2,11 +2,12 @@\n \n import lombok.extern.slf4j.Slf4j;\n import org.junit.Assert;\n+import org.junit.Ignore;\n import org.junit.Test;\n import run.halo.app.model.support.HaloConst;\n \n-import java.io.File;\n import java.io.IOException;\n+import java.io.RandomAccessFile;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n@@ -92,4 +93,19 @@ public void zipFolderTest() throws IOException {\n     public void tempFolderTest() {\n         log.debug(HaloConst.TEMP_DIR);\n     }\n+\n+    @Test\n+    @Ignore\n+    public void dbFileReadTest() throws IOException {\n+        Path dbPath = Paths.get(HaloConst.USER_HOME + \"/halo-test/db/halo.mv.db\");\n+\n+        try (RandomAccessFile randomAccessFile = new RandomAccessFile(dbPath.toString(), \"r\")) {\n+            randomAccessFile.seek(2283640);\n+            byte[] buffer = new byte[1024];\n+            int count = randomAccessFile.read(buffer, 0, buffer.length);\n+            System.out.println(\"Count: \" + count);\n+            String bufString = new String(buffer);\n+            System.out.println(\"Buffer String: \" + bufString);\n+        }\n+    }\n }\n\\ No newline at end of file\n\ndiff --git a/src/test/java/run/halo/app/utils/PathsTest.java b/src/test/java/run/halo/app/utils/PathsTest.java\n--- a/src/test/java/run/halo/app/utils/PathsTest.java\n+++ b/src/test/java/run/halo/app/utils/PathsTest.java\n@@ -1,5 +1,6 @@\n package run.halo.app.utils;\n \n+import org.junit.Ignore;\n import org.junit.Test;\n \n import java.nio.file.Path;\n@@ -18,6 +19,7 @@\n public class PathsTest {\n \n     @Test\n+    @Ignore\n     public void getTest() {\n         Path path = Paths.get(\"/home/test/\", \"/upload/test.txt\");\n         assertThat(path.toString(), equalTo(\"/home/test/upload/test.txt\"));",
    "output": "none: add some test case, but ignored"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java b/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n--- a/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n+++ b/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n@@ -84,7 +84,6 @@ public void addArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers)\n     @Override\n     public void addResourceHandlers(ResourceHandlerRegistry registry) {\n         String workDir = FILE_PROTOCOL + ensureSuffix(haloProperties.getWorkDir(), FILE_SEPARATOR);\n-        String backupDir = FILE_PROTOCOL + ensureSuffix(haloProperties.getBackupDir(), FILE_SEPARATOR);\n         registry.addResourceHandler(\"/**\")\n                 .addResourceLocations(workDir + \"templates/themes/\")\n                 .addResourceLocations(workDir + \"templates/admin/\")\n@@ -109,6 +108,7 @@ public void addResourceHandlers(ResourceHandlerRegistry registry) {\n         }\n     }\n \n+\n     @Override\n     public void addFormatters(FormatterRegistry registry) {\n         registry.addConverterFactory(new StringToEnumConverterFactory());\n\ndiff --git a/src/main/java/run/halo/app/controller/content/ContentContentController.java b/src/main/java/run/halo/app/controller/content/ContentContentController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentContentController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentContentController.java\n@@ -68,4 +68,35 @@ public String content(@PathVariable(\"prefix\") String prefix,\n             throw new NotFoundException(\"Not Found\");\n         }\n     }\n+\n+    @GetMapping(\"{year:^[^A-Za-z]*$}/{month:^[^A-Za-z]*$}/{url}\")\n+    public String content(@PathVariable(\"year\") Integer year,\n+                          @PathVariable(\"month\") Integer month,\n+                          @PathVariable(\"url\") String url,\n+                          @RequestParam(value = \"token\", required = false) String token,\n+                          Model model) {\n+        PostPermalinkType postPermalinkType = optionService.getPostPermalinkType();\n+        if (postPermalinkType.equals(PostPermalinkType.DATE)) {\n+            Post post = postService.getBy(year, month, url);\n+            return postModel.content(post, token, model);\n+        } else {\n+            throw new NotFoundException(\"Not Found\");\n+        }\n+    }\n+\n+    @GetMapping(\"{year:^[^A-Za-z]*$}/{month:^[^A-Za-z]*$}/{day:^[^A-Za-z]*$}/{url}\")\n+    public String content(@PathVariable(\"year\") Integer year,\n+                          @PathVariable(\"month\") Integer month,\n+                          @PathVariable(\"day\") Integer day,\n+                          @PathVariable(\"url\") String url,\n+                          @RequestParam(value = \"token\", required = false) String token,\n+                          Model model) {\n+        PostPermalinkType postPermalinkType = optionService.getPostPermalinkType();\n+        if (postPermalinkType.equals(PostPermalinkType.DAY)) {\n+            Post post = postService.getBy(year, month, day, url);\n+            return postModel.content(post, token, model);\n+        } else {\n+            throw new NotFoundException(\"Not Found\");\n+        }\n+    }\n }\n\ndiff --git a/src/main/java/run/halo/app/repository/PostRepository.java b/src/main/java/run/halo/app/repository/PostRepository.java\n--- a/src/main/java/run/halo/app/repository/PostRepository.java\n+++ b/src/main/java/run/halo/app/repository/PostRepository.java\n@@ -69,7 +69,7 @@ public interface PostRepository extends BasePostRepository<Post>, JpaSpecificati\n      * @param url   post url\n      * @return a optional of post\n      */\n-    @Query(\"select post from Post post where DateUtil.year(post.createTime) = :year and DateUtil.month(post.createTime) = :month and DateUtil.day(post.createTime) = :day and post.url = :url\")\n+    @Query(\"select post from Post post where DateUtil.year(post.createTime) = :year and DateUtil.month(post.createTime) = :month and DateUtil.dayOfMonth(post.createTime) = :day and post.url = :url\")\n     Optional<Post> findBy(@Param(\"year\") Integer year, @Param(\"month\") Integer month, @Param(\"day\") Integer day, @Param(\"url\") String url);\n \n     /**\n@@ -82,6 +82,6 @@ public interface PostRepository extends BasePostRepository<Post>, JpaSpecificati\n      * @param status post status\n      * @return a optional of post\n      */\n-    @Query(\"select post from Post post where DateUtil.year(post.createTime) = :year and DateUtil.month(post.createTime) = :month and DateUtil.day(post.createTime) = :day and post.url = :url and post.status = :status\")\n+    @Query(\"select post from Post post where DateUtil.year(post.createTime) = :year and DateUtil.month(post.createTime) = :month and DateUtil.dayOfMonth(post.createTime) = :day and post.url = :url and post.status = :status\")\n     Optional<Post> findBy(@Param(\"year\") Integer year, @Param(\"month\") Integer month, @Param(\"day\") Integer day, @Param(\"url\") String url, @Param(\"status\") PostStatus status);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n@@ -536,16 +536,32 @@ public Page<PostListVO> convertToListVo(Page<Post> postPage) {\n             // Set comment count\n             postListVO.setCommentCount(commentCountMap.getOrDefault(post.getId(), 0L));\n \n-            StringBuilder fullPath = new StringBuilder(blogUrl);\n+            StringBuilder fullPath = new StringBuilder(blogUrl)\n+                    .append(\"/\");\n             if (permalinkType.equals(PostPermalinkType.DEFAULT)) {\n-                fullPath.append(\"/\")\n-                        .append(archivesPrefix)\n+                fullPath.append(archivesPrefix)\n                         .append(\"/\")\n                         .append(postListVO.getUrl())\n                         .append(pathSuffix);\n             } else if (permalinkType.equals(PostPermalinkType.ID)) {\n-                fullPath.append(\"/?p=\")\n+                fullPath.append(\"?p=\")\n                         .append(postListVO.getId());\n+            } else if (permalinkType.equals(PostPermalinkType.DATE)) {\n+                fullPath.append(DateUtil.year(postListVO.getCreateTime()))\n+                        .append(\"/\")\n+                        .append(DateUtil.month(postListVO.getCreateTime()) + 1)\n+                        .append(\"/\")\n+                        .append(postListVO.getUrl())\n+                        .append(pathSuffix);\n+            } else if (permalinkType.equals(PostPermalinkType.DAY)) {\n+                fullPath.append(DateUtil.year(postListVO.getCreateTime()))\n+                        .append(\"/\")\n+                        .append(DateUtil.month(postListVO.getCreateTime()) + 1)\n+                        .append(\"/\")\n+                        .append(DateUtil.dayOfMonth(postListVO.getCreateTime()))\n+                        .append(\"/\")\n+                        .append(postListVO.getUrl())\n+                        .append(pathSuffix);\n             }\n \n             postListVO.setFullPath(fullPath.toString());",
    "output": "feat: support /year/month/day/url and /year/month/url mapping."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/JournalCommentController.java b/src/main/java/run/halo/app/controller/admin/api/JournalCommentController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/JournalCommentController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/JournalCommentController.java\n@@ -65,7 +65,7 @@ public List<JournalCommentWithJournalVO> listLatest(@RequestParam(name = \"top\",\n     public Page<BaseCommentVO> listCommentTree(@PathVariable(\"journalId\") Integer journalId,\n                                                @RequestParam(name = \"page\", required = false, defaultValue = \"0\") int page,\n                                                @SortDefault(sort = \"createTime\", direction = DESC) Sort sort) {\n-        return journalCommentService.pageVosBy(journalId, PageRequest.of(page, optionService.getCommentPageSize(), sort));\n+        return journalCommentService.pageVosAllBy(journalId, PageRequest.of(page, optionService.getCommentPageSize(), sort));\n     }\n \n     @GetMapping(\"{journalId:\\\\d+}/list_view\")\n\ndiff --git a/src/main/java/run/halo/app/security/filter/ApiAuthenticationFilter.java b/src/main/java/run/halo/app/security/filter/ApiAuthenticationFilter.java\n--- a/src/main/java/run/halo/app/security/filter/ApiAuthenticationFilter.java\n+++ b/src/main/java/run/halo/app/security/filter/ApiAuthenticationFilter.java\n@@ -18,8 +18,8 @@\n import java.io.IOException;\n import java.util.Optional;\n \n-import static run.halo.app.model.support.HaloConst.ADMIN_TOKEN_HEADER_NAME;\n-import static run.halo.app.model.support.HaloConst.ADMIN_TOKEN_QUERY_NAME;\n+import static run.halo.app.model.support.HaloConst.API_ACCESS_KEY_HEADER_NAME;\n+import static run.halo.app.model.support.HaloConst.API_ACCESS_KEY_QUERY_NAME;\n \n /**\n  * Api authentication Filter\n@@ -98,6 +98,6 @@ protected boolean shouldNotFilter(HttpServletRequest request) {\n \n     @Override\n     protected String getTokenFromRequest(@NonNull HttpServletRequest request) {\n-        return getTokenFromRequest(request, ADMIN_TOKEN_QUERY_NAME, ADMIN_TOKEN_HEADER_NAME);\n+        return getTokenFromRequest(request, API_ACCESS_KEY_QUERY_NAME, API_ACCESS_KEY_HEADER_NAME);\n     }\n }",
    "output": "fix: content api token name error."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/AdminController.java b/src/main/java/run/halo/app/controller/admin/api/AdminController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/AdminController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/AdminController.java\n@@ -121,10 +121,4 @@ public void restartApplication() {\n     public BaseResponse<String> getLogFiles(@RequestParam(\"lines\") Long lines) {\n         return BaseResponse.ok(HttpStatus.OK.getReasonPhrase(), adminService.getLogFiles(lines));\n     }\n-\n-    @GetMapping(value = \"halo/logfile/download\")\n-    @ApiOperation(\"Downloads halo log file\")\n-    public void downloadLogFiles(@RequestParam(\"lines\") Long lines, HttpServletResponse response) {\n-        adminService.downloadLogFiles(lines, response);\n-    }\n }\n\ndiff --git a/src/main/java/run/halo/app/listener/comment/CommentEventListener.java b/src/main/java/run/halo/app/listener/comment/CommentEventListener.java\n--- a/src/main/java/run/halo/app/listener/comment/CommentEventListener.java\n+++ b/src/main/java/run/halo/app/listener/comment/CommentEventListener.java\n@@ -1,4 +1,4 @@\n-package run.halo.app.event.comment;\n+package run.halo.app.listener.comment;\n \n import cn.hutool.core.lang.Validator;\n import cn.hutool.core.text.StrBuilder;\n@@ -7,6 +7,8 @@\n import org.springframework.context.event.EventListener;\n import org.springframework.scheduling.annotation.Async;\n import org.springframework.stereotype.Component;\n+import run.halo.app.event.comment.CommentNewEvent;\n+import run.halo.app.event.comment.CommentReplyEvent;\n import run.halo.app.exception.ServiceException;\n import run.halo.app.model.entity.*;\n import run.halo.app.model.properties.CommentProperties;\n\ndiff --git a/src/main/java/run/halo/app/listener/freemarker/FreemarkerConfigAwareListener.java b/src/main/java/run/halo/app/listener/freemarker/FreemarkerConfigAwareListener.java\n--- a/src/main/java/run/halo/app/listener/freemarker/FreemarkerConfigAwareListener.java\n+++ b/src/main/java/run/halo/app/listener/freemarker/FreemarkerConfigAwareListener.java\n@@ -1,4 +1,4 @@\n-package run.halo.app.event.freemarker;\n+package run.halo.app.listener.freemarker;\n \n import freemarker.template.Configuration;\n import freemarker.template.TemplateModelException;\n\ndiff --git a/src/main/java/run/halo/app/listener/logger/LogEventListener.java b/src/main/java/run/halo/app/listener/logger/LogEventListener.java\n--- a/src/main/java/run/halo/app/listener/logger/LogEventListener.java\n+++ b/src/main/java/run/halo/app/listener/logger/LogEventListener.java\n@@ -1,8 +1,9 @@\n-package run.halo.app.event.logger;\n+package run.halo.app.listener.logger;\n \n import org.springframework.context.event.EventListener;\n import org.springframework.scheduling.annotation.Async;\n import org.springframework.stereotype.Component;\n+import run.halo.app.event.logger.LogEvent;\n import run.halo.app.model.entity.Log;\n import run.halo.app.service.LogService;\n \n\ndiff --git a/src/main/java/run/halo/app/listener/post/AbstractVisitEventListener.java b/src/main/java/run/halo/app/listener/post/AbstractVisitEventListener.java\n--- a/src/main/java/run/halo/app/listener/post/AbstractVisitEventListener.java\n+++ b/src/main/java/run/halo/app/listener/post/AbstractVisitEventListener.java\n@@ -1,8 +1,9 @@\n-package run.halo.app.event.post;\n+package run.halo.app.listener.post;\n \n import lombok.NonNull;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.util.Assert;\n+import run.halo.app.event.post.AbstractVisitEvent;\n import run.halo.app.service.base.BasePostService;\n \n import java.util.Map;\n\ndiff --git a/src/main/java/run/halo/app/listener/post/PostVisitEventListener.java b/src/main/java/run/halo/app/listener/post/PostVisitEventListener.java\n--- a/src/main/java/run/halo/app/listener/post/PostVisitEventListener.java\n+++ b/src/main/java/run/halo/app/listener/post/PostVisitEventListener.java\n@@ -1,8 +1,9 @@\n-package run.halo.app.event.post;\n+package run.halo.app.listener.post;\n \n import org.springframework.context.event.EventListener;\n import org.springframework.scheduling.annotation.Async;\n import org.springframework.stereotype.Component;\n+import run.halo.app.event.post.PostVisitEvent;\n import run.halo.app.service.PostService;\n \n /**\n\ndiff --git a/src/main/java/run/halo/app/listener/post/SheetVisitEventListener.java b/src/main/java/run/halo/app/listener/post/SheetVisitEventListener.java\n--- a/src/main/java/run/halo/app/listener/post/SheetVisitEventListener.java\n+++ b/src/main/java/run/halo/app/listener/post/SheetVisitEventListener.java\n@@ -1,8 +1,9 @@\n-package run.halo.app.event.post;\n+package run.halo.app.listener.post;\n \n import org.springframework.context.event.EventListener;\n import org.springframework.scheduling.annotation.Async;\n import org.springframework.stereotype.Component;\n+import run.halo.app.event.post.SheetVisitEvent;\n import run.halo.app.service.SheetService;\n \n /**\n\ndiff --git a/src/main/java/run/halo/app/listener/theme/ThemeUpdatedListener.java b/src/main/java/run/halo/app/listener/theme/ThemeUpdatedListener.java\n--- a/src/main/java/run/halo/app/listener/theme/ThemeUpdatedListener.java\n+++ b/src/main/java/run/halo/app/listener/theme/ThemeUpdatedListener.java\n@@ -1,9 +1,10 @@\n-package run.halo.app.event.theme;\n+package run.halo.app.listener.theme;\n \n import org.springframework.context.event.EventListener;\n import org.springframework.stereotype.Component;\n import run.halo.app.cache.StringCacheStore;\n import run.halo.app.event.options.OptionUpdatedEvent;\n+import run.halo.app.event.theme.ThemeUpdatedEvent;\n import run.halo.app.service.ThemeService;\n \n /**\n\ndiff --git a/src/main/java/run/halo/app/model/params/SheetParam.java b/src/main/java/run/halo/app/model/params/SheetParam.java\n--- a/src/main/java/run/halo/app/model/params/SheetParam.java\n+++ b/src/main/java/run/halo/app/model/params/SheetParam.java\n@@ -36,6 +36,8 @@ public class SheetParam implements InputConverter<Sheet> {\n \n     private String originalContent;\n \n+    private String summary;\n+\n     @Size(max = 255, message = \"页面缩略图链接的字符长度不能超过 {max}\")\n     private String thumbnail;\n \n\ndiff --git a/src/main/java/run/halo/app/service/AdminService.java b/src/main/java/run/halo/app/service/AdminService.java\n--- a/src/main/java/run/halo/app/service/AdminService.java\n+++ b/src/main/java/run/halo/app/service/AdminService.java\n@@ -109,11 +109,4 @@ public interface AdminService {\n      * @return logs content.\n      */\n     String getLogFiles(@NonNull Long lines);\n-\n-    /**\n-     * Download halo log file.\n-     *\n-     * @param lines lines.\n-     */\n-    void downloadLogFiles(@NonNull Long lines, @NonNull HttpServletResponse response);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n@@ -524,29 +524,4 @@ public String getLogFiles(Long lines) {\n         }\n         return result.toString();\n     }\n-\n-    @Override\n-    public void downloadLogFiles(Long lines, HttpServletResponse response) {\n-        Assert.notNull(lines, \"Lines must not be null\");\n-        Assert.notNull(response, \"HttpServletResponse must not be null\");\n-\n-        String logFiles = getLogFiles(lines);\n-        String fileName = \"halo-log-\" +\n-                DateUtil.format(DateUtil.date(), \"yyyy-MM-dd-HH-mm-ss\") +\n-                \".log\";\n-        response.setContentType(\"application/force-download\");\n-        response.setHeader(\"Content-Disposition\", \"attachment; filename=\" + fileName);\n-        ServletOutputStream outputStream;\n-        BufferedOutputStream bufferedOutputStream;\n-        try {\n-            outputStream = response.getOutputStream();\n-            bufferedOutputStream = new BufferedOutputStream(outputStream);\n-            bufferedOutputStream.write(logFiles.getBytes(StandardCharsets.UTF_8));\n-            bufferedOutputStream.flush();\n-            bufferedOutputStream.close();\n-            outputStream.close();\n-        } catch (IOException e) {\n-            throw new ServiceException(\"日志下载失败\", e);\n-        }\n-    }\n }",
    "output": "feat: support set summary for sheet."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/ContentArchiveController.java b/src/main/java/run/halo/app/controller/content/ContentArchiveController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentArchiveController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentArchiveController.java\n@@ -35,6 +35,7 @@\n  *\n  * @author ryanwang\n  * @author guqing\n+ * @author evanwang\n  * @date 2019-03-17\n  */\n @Slf4j\n@@ -135,7 +136,7 @@ public String post(@PathVariable(\"url\") String url,\n             }\n             post.setFormatContent(MarkdownUtils.renderHtml(post.getOriginalContent()));\n         }\n-\n+        postService.publishVisitEvent(post.getId());\n         postService.getNextPost(post.getCreateTime()).ifPresent(nextPost -> model.addAttribute(\"nextPost\", nextPost));\n         postService.getPrePost(post.getCreateTime()).ifPresent(prePost -> model.addAttribute(\"prePost\", prePost));\n \n\ndiff --git a/src/main/java/run/halo/app/controller/content/ContentSheetController.java b/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n@@ -28,6 +28,7 @@\n  * Content sheet controller.\n  *\n  * @author ryanwang\n+ * @author evanwang\n  * @date 2019-03-21\n  */\n @Controller\n@@ -119,6 +120,7 @@ public String sheet(@PathVariable(value = \"url\") String url,\n                 throw new ForbiddenException(\"您没有该页面的访问权限\");\n             }\n         }\n+        sheetService.publishVisitEvent(sheet.getId());\n \n         SheetDetailVO sheetDetailVO = sheetService.convertToDetailVo(sheet);\n \n\ndiff --git a/src/main/java/run/halo/app/service/PostService.java b/src/main/java/run/halo/app/service/PostService.java\n--- a/src/main/java/run/halo/app/service/PostService.java\n+++ b/src/main/java/run/halo/app/service/PostService.java\n@@ -182,4 +182,11 @@ public interface PostService extends BasePostService<Post> {\n      * @return a page of post detail vo\n      */\n     Page<PostDetailVO> convertToDetailVo(@NonNull Page<Post> postPage);\n+\n+    /**\n+     * Publish a post visit event.\n+     *\n+     * @param postId postId must not be null\n+     */\n+    void publishVisitEvent(@NonNull Integer postId);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/SheetService.java b/src/main/java/run/halo/app/service/SheetService.java\n--- a/src/main/java/run/halo/app/service/SheetService.java\n+++ b/src/main/java/run/halo/app/service/SheetService.java\n@@ -124,4 +124,11 @@ public interface SheetService extends BasePostService<Sheet> {\n      */\n     @NonNull\n     SheetDetailVO convertToDetailVo(@NonNull Sheet sheet);\n+\n+    /**\n+     * Publish a sheet visit event.\n+     *\n+     * @param sheetId sheetId must not be null\n+     */\n+    void publishVisitEvent(@NonNull Integer sheetId);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n@@ -51,6 +51,7 @@\n  * @author johnniang\n  * @author ryanwang\n  * @author guqing\n+ * @author evanwang\n  * @date 2019-03-14\n  */\n @Slf4j\n@@ -159,8 +160,6 @@ public PostDetailVO updateBy(Post postToUpdate, Set<Integer> tagIds, Set<Integer\n     public Post getBy(PostStatus status, String url) {\n         Post post = super.getBy(status, url);\n \n-        fireVisitEvent(post.getId());\n-\n         return post;\n     }\n \n@@ -176,8 +175,6 @@ public List<Post> removeByIds(Collection<Integer> ids) {\n     public Post getByUrl(String url) {\n         Post post = super.getByUrl(url);\n \n-        fireVisitEvent(post.getId());\n-\n         return post;\n     }\n \n@@ -630,7 +627,8 @@ private PostDetailVO createOrUpdate(@NonNull Post post, Set<Integer> tagIds, Set\n         return convertTo(post, tags, categories, postMetaList);\n     }\n \n-    private void fireVisitEvent(@NonNull Integer postId) {\n+    @Override\n+    public void publishVisitEvent(Integer postId) {\n         eventPublisher.publishEvent(new PostVisitEvent(this, postId));\n     }\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java b/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n@@ -33,6 +33,7 @@\n  *\n  * @author johnniang\n  * @author ryanwang\n+ * @author evanwang\n  * @date 2019-04-24\n  */\n @Slf4j\n@@ -130,8 +131,6 @@ public Sheet getByUrl(String url) {\n \n         Sheet sheet = sheetRepository.getByUrl(url).orElseThrow(() -> new NotFoundException(\"查询不到该页面的信息\").setErrorData(url));\n \n-        fireVisitEvent(sheet.getId());\n-\n         return sheet;\n     }\n \n@@ -144,8 +143,6 @@ public Sheet getBy(PostStatus status, String url) {\n \n         Sheet sheet = postOptional.orElseThrow(() -> new NotFoundException(\"查询不到该页面的信息\").setErrorData(url));\n \n-        fireVisitEvent(sheet.getId());\n-\n         return sheet;\n     }\n \n@@ -261,7 +258,8 @@ public Page<SheetListVO> convertToListVo(Page<Sheet> sheetPage) {\n         });\n     }\n \n-    private void fireVisitEvent(@NonNull Integer sheetId) {\n+    @Override\n+    public void publishVisitEvent(Integer sheetId) {\n         eventPublisher.publishEvent(new SheetVisitEvent(this, sheetId));\n     }\n ",
    "output": "fix:repeated updates of visits and private article visits abnorm… (#463)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/ContentArchiveController.java b/src/main/java/run/halo/app/controller/content/ContentArchiveController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentArchiveController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentArchiveController.java\n@@ -170,8 +170,6 @@ public String post(@PathVariable(\"url\") String url,\n     @GetMapping(value = \"{url}/password\")\n     public String password(@PathVariable(\"url\") String url,\n                            Model model) {\n-        Post post = postService.getBy(PostStatus.INTIMATE, url);\n-\n         model.addAttribute(\"url\", url);\n         return \"common/template/post_password\";\n     }",
    "output": "style: remove useless code."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/params/SheetParam.java b/src/main/java/run/halo/app/model/params/SheetParam.java\n--- a/src/main/java/run/halo/app/model/params/SheetParam.java\n+++ b/src/main/java/run/halo/app/model/params/SheetParam.java\n@@ -43,7 +43,7 @@ public class SheetParam implements InputConverter<Sheet> {\n \n     private Date createTime;\n \n-    @Size(max = 255, message = \"Length of password must not be more than {max}\")\n+    @Size(max = 255, message = \"页面密码的字符长度不能超过 {max}\")\n     private String password;\n \n     @Size(max = 255, message = \"Length of template must not be more than {max}\")\n\ndiff --git a/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java b/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n@@ -226,6 +226,10 @@ public List<InternalSheetDTO> listInternal() {\n     @Override\n     public Sheet removeById(Integer id) {\n \n+        // Remove sheet metas\n+        List<SheetMeta> sheetMetas = sheetMetaService.removeByPostId(id);\n+        log.debug(\"Removed sheet metas: [{}]\", sheetMetas);\n+\n         // Remove sheet comments\n         List<SheetComment> sheetComments = sheetCommentService.removeByPostId(id);\n         log.debug(\"Removed sheet comments: [{}]\", sheetComments);",
    "output": "fix: the problem that meta is not deleted when the sheet is deleted."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/handler/file/QiniuOssFileHandler.java b/src/main/java/run/halo/app/handler/file/QiniuOssFileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/QiniuOssFileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/QiniuOssFileHandler.java\n@@ -60,6 +60,7 @@ public UploadResult upload(MultipartFile file) {\n         String bucket = optionService.getByPropertyOfNonNull(QiniuOssProperties.OSS_BUCKET).toString();\n         String protocol = optionService.getByPropertyOfNonNull(QiniuOssProperties.OSS_PROTOCOL).toString();\n         String domain = optionService.getByPropertyOfNonNull(QiniuOssProperties.OSS_DOMAIN).toString();\n+        String source = optionService.getByPropertyOrDefault(QiniuOssProperties.OSS_SOURCE, String.class, \"\");\n         String styleRule = optionService.getByPropertyOrDefault(QiniuOssProperties.OSS_STYLE_RULE, String.class, \"\");\n         String thumbnailStyleRule = optionService.getByPropertyOrDefault(QiniuOssProperties.OSS_THUMBNAIL_STYLE_RULE, String.class, \"\");\n \n@@ -81,16 +82,31 @@ public UploadResult upload(MultipartFile file) {\n         // Create temp path\n         Path tmpPath = Paths.get(System.getProperty(\"java.io.tmpdir\"), bucket);\n \n+        StringBuilder basePath = new StringBuilder(protocol)\n+                .append(domain)\n+                .append(\"/\");\n+\n         try {\n             String basename = FilenameUtils.getBasename(file.getOriginalFilename());\n             String extension = FilenameUtils.getExtension(file.getOriginalFilename());\n+            String timestamp = String.valueOf(System.currentTimeMillis());\n+            StringBuilder upFilePath = new StringBuilder();\n+            if (StringUtils.isNotEmpty(source)) {\n+                upFilePath.append(source)\n+                        .append(\"/\");\n+            }\n+            upFilePath.append(basename)\n+                    .append(\"_\")\n+                    .append(timestamp)\n+                    .append(\".\")\n+                    .append(extension);\n \n             // Get file recorder for temp directory\n             FileRecorder fileRecorder = new FileRecorder(tmpPath.toFile());\n             // Get upload manager\n             UploadManager uploadManager = new UploadManager(configuration, fileRecorder);\n             // Put the file\n-            Response response = uploadManager.put(file.getInputStream(), null, uploadToken, null, null);\n+            Response response = uploadManager.put(file.getInputStream(), upFilePath.toString(), uploadToken, null, null);\n \n             log.debug(\"QnYun response: [{}]\", response.toString());\n             log.debug(\"QnYun response body: [{}]\", response.bodyString());\n@@ -101,13 +117,13 @@ public UploadResult upload(MultipartFile file) {\n             QiNiuPutSet putSet = JsonUtils.jsonToObject(response.bodyString(), QiNiuPutSet.class);\n \n             // Get file full path\n-            String filePath = protocol + StringUtils.appendIfMissing(domain, \"/\") + putSet.getHash();\n+            String filePath = StringUtils.join(basePath.toString(), upFilePath.toString());\n \n             // Build upload result\n             UploadResult result = new UploadResult();\n             result.setFilename(basename);\n             result.setFilePath(StringUtils.isBlank(styleRule) ? filePath : filePath + styleRule);\n-            result.setKey(putSet.getKey());\n+            result.setKey(upFilePath.toString());\n             result.setSuffix(extension);\n             result.setWidth(putSet.getWidth());\n             result.setHeight(putSet.getHeight());\n\ndiff --git a/src/main/java/run/halo/app/model/properties/QiniuOssProperties.java b/src/main/java/run/halo/app/model/properties/QiniuOssProperties.java\n--- a/src/main/java/run/halo/app/model/properties/QiniuOssProperties.java\n+++ b/src/main/java/run/halo/app/model/properties/QiniuOssProperties.java\n@@ -24,6 +24,11 @@ public enum QiniuOssProperties implements PropertyEnum {\n      */\n     OSS_SECRET_KEY(\"oss_qiniu_secret_key\", String.class, \"\"),\n \n+    /**\n+     * Qiniu oss source\n+     */\n+    OSS_SOURCE(\"oss_qiniu_source\", String.class, \"\"),\n+\n     /**\n      * Qiniu oss domain protocol.\n      */",
    "output": "feat: support set file source for qiniu oss."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/handler/file/AliOssFileHandler.java b/src/main/java/run/halo/app/handler/file/AliOssFileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/AliOssFileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/AliOssFileHandler.java\n@@ -45,25 +45,37 @@ public UploadResult upload(MultipartFile file) {\n         // Get config\n         String protocol = optionService.getByPropertyOfNonNull(AliOssProperties.OSS_PROTOCOL).toString();\n         String domain = optionService.getByPropertyOrDefault(AliOssProperties.OSS_DOMAIN, String.class, \"\");\n+        String source = optionService.getByPropertyOrDefault(AliOssProperties.OSS_SOURCE, String.class, \"\");\n         String endPoint = optionService.getByPropertyOfNonNull(AliOssProperties.OSS_ENDPOINT).toString();\n         String accessKey = optionService.getByPropertyOfNonNull(AliOssProperties.OSS_ACCESS_KEY).toString();\n         String accessSecret = optionService.getByPropertyOfNonNull(AliOssProperties.OSS_ACCESS_SECRET).toString();\n         String bucketName = optionService.getByPropertyOfNonNull(AliOssProperties.OSS_BUCKET_NAME).toString();\n-        String source = StringUtils.join(protocol, bucketName, \".\" + endPoint);\n         String styleRule = optionService.getByPropertyOrDefault(AliOssProperties.OSS_STYLE_RULE, String.class, \"\");\n         String thumbnailStyleRule = optionService.getByPropertyOrDefault(AliOssProperties.OSS_THUMBNAIL_STYLE_RULE, String.class, \"\");\n \n         // Init OSS client\n         OSS ossClient = new OSSClientBuilder().build(endPoint, accessKey, accessSecret);\n \n-        domain = protocol + domain;\n+        StringBuilder basePath = new StringBuilder(protocol);\n+\n+        if (StringUtils.isNotEmpty(domain)) {\n+            basePath.append(domain)\n+                    .append(\"/\");\n+        } else {\n+            basePath.append(bucketName)\n+                    .append(\".\")\n+                    .append(endPoint)\n+                    .append(\"/\");\n+        }\n \n         try {\n             String basename = FilenameUtils.getBasename(file.getOriginalFilename());\n             String extension = FilenameUtils.getExtension(file.getOriginalFilename());\n             String timestamp = String.valueOf(System.currentTimeMillis());\n-            String upFilePath = StringUtils.join(basename, \"_\", timestamp, \".\", extension);\n-            String filePath = StringUtils.join(StringUtils.appendIfMissing(StringUtils.isNotBlank(domain) ? domain : source, \"/\"), upFilePath);\n+            String upFilePath = StringUtils.join(source, \"/\", basename, \"_\", timestamp, \".\", extension);\n+            String filePath = StringUtils.join(basePath.toString(), upFilePath);\n+\n+            log.info(basePath.toString());\n \n             // Upload\n             PutObjectResult putObjectResult = ossClient.putObject(bucketName, upFilePath, file.getInputStream());\n\ndiff --git a/src/main/java/run/halo/app/model/properties/AliOssProperties.java b/src/main/java/run/halo/app/model/properties/AliOssProperties.java\n--- a/src/main/java/run/halo/app/model/properties/AliOssProperties.java\n+++ b/src/main/java/run/halo/app/model/properties/AliOssProperties.java\n@@ -39,6 +39,11 @@ public enum AliOssProperties implements PropertyEnum {\n      */\n     OSS_ACCESS_SECRET(\"oss_ali_access_secret\", String.class, \"\"),\n \n+    /**\n+     * upyun oss source\n+     */\n+    OSS_SOURCE(\"oss_ali_source\", String.class, \"\"),\n+\n     /**\n      * Aliyun oss style rule.\n      */",
    "output": "feat: support set file source for ali oss."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/repository/base/BaseCommentRepository.java b/src/main/java/run/halo/app/repository/base/BaseCommentRepository.java\n--- a/src/main/java/run/halo/app/repository/base/BaseCommentRepository.java\n+++ b/src/main/java/run/halo/app/repository/base/BaseCommentRepository.java\n@@ -123,7 +123,17 @@ public interface BaseCommentRepository<COMMENT extends BaseComment> extends Base\n      * @return a list of comment\n      */\n     @NonNull\n-    List<COMMENT> findAllByPostIdAndStatusAndParentId(Integer postId, CommentStatus status, Long parentId);\n+    List<COMMENT> findAllByPostIdAndStatusAndParentId(@NonNull Integer postId, @NonNull CommentStatus status, @NonNull Long parentId);\n+\n+    /**\n+     * Finds comments by post id and parent id.\n+     *\n+     * @param postId   post id must not be null\n+     * @param parentId comment parent id must not be null\n+     * @return a list of comment\n+     */\n+    @NonNull\n+    List<COMMENT> findAllByPostIdAndParentId(@NonNull Integer postId, @NonNull Long parentId);\n \n     /**\n      * Finds all comments by status and parent id collection.\n@@ -135,6 +145,14 @@ public interface BaseCommentRepository<COMMENT extends BaseComment> extends Base\n     @NonNull\n     List<COMMENT> findAllByStatusAndParentIdIn(@NonNull CommentStatus status, @NonNull Collection<Long> parentIds);\n \n+    /**\n+     * Finds all comments by parent id collection.\n+     *\n+     * @param parentIds parent id collection must not be null\n+     * @return a list of comment\n+     */\n+    List<COMMENT> findAllByParentIdIn(@NonNull Collection<Long> parentIds);\n+\n     /**\n      * Finds comments by post id, comment status and parent id.\n      *\n\ndiff --git a/src/main/java/run/halo/app/service/base/BaseCommentService.java b/src/main/java/run/halo/app/service/base/BaseCommentService.java\n--- a/src/main/java/run/halo/app/service/base/BaseCommentService.java\n+++ b/src/main/java/run/halo/app/service/base/BaseCommentService.java\n@@ -264,6 +264,17 @@ public interface BaseCommentService<COMMENT extends BaseComment> extends CrudSer\n     @NonNull\n     List<COMMENT> listChildrenBy(@NonNull Integer targetId, @NonNull Long commentParentId, @NonNull CommentStatus status, @NonNull Sort sort);\n \n+    /**\n+     * Lists children comments.\n+     *\n+     * @param targetId        target id must not be null\n+     * @param commentParentId comment parent id must not be null\n+     * @param sort            sort info must not be null\n+     * @return a list of children comment\n+     */\n+    @NonNull\n+    List<COMMENT> listChildrenBy(@NonNull Integer targetId, @NonNull Long commentParentId, @NonNull Sort sort);\n+\n     /**\n      * Filters comment ip address.\n      *\n\ndiff --git a/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java b/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n@@ -48,6 +48,8 @@\n import java.util.*;\n import java.util.stream.Collectors;\n \n+import static org.springframework.data.domain.Sort.Direction.DESC;\n+\n /**\n  * Base comment service implementation.\n  *\n@@ -372,10 +374,12 @@ public COMMENT removeById(Long id) {\n \n         COMMENT comment = baseCommentRepository.findById(id).orElseThrow(() -> new NotFoundException(\"查询不到该评论的信息\").setErrorData(id));\n \n-        if (comment.getParentId() == 0) {\n-            // Remove comment children.\n-            List<COMMENT> comments = baseCommentRepository.deleteByParentId(id);\n-            log.debug(\"Removed comment children: [{}]\", comments);\n+        List<COMMENT> children = listChildrenBy(comment.getPostId(), id, Sort.by(DESC, \"createTime\"));\n+\n+        if (children.size() > 0) {\n+            children.forEach(child -> {\n+                super.removeById(child.getId());\n+            });\n         }\n \n         return super.removeById(id);\n@@ -537,6 +541,30 @@ public List<COMMENT> listChildrenBy(Integer targetId, Long commentParentId, Comm\n         return childrenList;\n     }\n \n+    @Override\n+    public List<COMMENT> listChildrenBy(Integer targetId, Long commentParentId, Sort sort) {\n+        Assert.notNull(targetId, \"Target id must not be null\");\n+        Assert.notNull(commentParentId, \"Comment parent id must not be null\");\n+        Assert.notNull(sort, \"Sort info must not be null\");\n+\n+        // Get comments recursively\n+\n+        // Get direct children\n+        List<COMMENT> directChildren = baseCommentRepository.findAllByPostIdAndParentId(targetId, commentParentId);\n+\n+        // Create result container\n+        Set<COMMENT> children = new HashSet<>();\n+\n+        // Get children comments\n+        getChildrenRecursively(directChildren, children);\n+\n+        // Sort children\n+        List<COMMENT> childrenList = new ArrayList<>(children);\n+        childrenList.sort(Comparator.comparing(BaseComment::getId));\n+\n+        return childrenList;\n+    }\n+\n     @Override\n     public <T extends BaseCommentDTO> T filterIpAddress(@NonNull T comment) {\n         Assert.notNull(comment, \"Base comment dto must not be null\");\n@@ -612,6 +640,32 @@ private void getChildrenRecursively(@Nullable List<COMMENT> topComments, @NonNul\n         children.addAll(topComments);\n     }\n \n+    /**\n+     * Get children comments recursively.\n+     *\n+     * @param topComments top comment list\n+     * @param children    children result must not be null\n+     */\n+    private void getChildrenRecursively(@Nullable List<COMMENT> topComments, @NonNull Set<COMMENT> children) {\n+        Assert.notNull(children, \"Children comment set must not be null\");\n+\n+        if (CollectionUtils.isEmpty(topComments)) {\n+            return;\n+        }\n+\n+        // Convert comment id set\n+        Set<Long> commentIds = ServiceUtils.fetchProperty(topComments, COMMENT::getId);\n+\n+        // Get direct children\n+        List<COMMENT> directChildren = baseCommentRepository.findAllByParentIdIn(commentIds);\n+\n+        // Recursively invoke\n+        getChildrenRecursively(directChildren, children);\n+\n+        // Add direct children to children result\n+        children.addAll(topComments);\n+    }\n+\n     /**\n      * Concretes comment tree.\n      *",
    "output": "fix: child comments could not be deleted."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/api/PostController.java b/src/main/java/run/halo/app/controller/content/api/PostController.java\n--- a/src/main/java/run/halo/app/controller/content/api/PostController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/PostController.java\n@@ -16,10 +16,7 @@\n import run.halo.app.model.enums.CommentStatus;\n import run.halo.app.model.enums.PostStatus;\n import run.halo.app.model.params.PostCommentParam;\n-import run.halo.app.model.vo.BaseCommentVO;\n-import run.halo.app.model.vo.BaseCommentWithParentVO;\n-import run.halo.app.model.vo.CommentWithHasChildrenVO;\n-import run.halo.app.model.vo.PostDetailVO;\n+import run.halo.app.model.vo.*;\n import run.halo.app.service.OptionService;\n import run.halo.app.service.PostCommentService;\n import run.halo.app.service.PostService;\n@@ -54,9 +51,9 @@ public PostController(PostService postService,\n \n     @GetMapping\n     @ApiOperation(\"Lists posts\")\n-    public Page<BasePostSimpleDTO> pageBy(@PageableDefault(sort = \"createTime\", direction = DESC) Pageable pageable) {\n+    public Page<PostListVO> pageBy(@PageableDefault(sort = \"createTime\", direction = DESC) Pageable pageable) {\n         Page<Post> postPage = postService.pageBy(PostStatus.PUBLISHED, pageable);\n-        return postService.convertToSimple(postPage);\n+        return postService.convertToListVo(postPage);\n     }\n \n     @PostMapping(value = \"search\")\n\ndiff --git a/src/main/java/run/halo/app/controller/content/api/SheetController.java b/src/main/java/run/halo/app/controller/content/api/SheetController.java\n--- a/src/main/java/run/halo/app/controller/content/api/SheetController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/SheetController.java\n@@ -10,16 +10,12 @@\n import org.springframework.web.bind.annotation.*;\n import run.halo.app.cache.lock.CacheLock;\n import run.halo.app.model.dto.BaseCommentDTO;\n-import run.halo.app.model.dto.post.BasePostDetailDTO;\n-import run.halo.app.model.dto.post.BasePostSimpleDTO;\n import run.halo.app.model.entity.Sheet;\n import run.halo.app.model.entity.SheetComment;\n import run.halo.app.model.enums.CommentStatus;\n import run.halo.app.model.enums.PostStatus;\n import run.halo.app.model.params.SheetCommentParam;\n-import run.halo.app.model.vo.BaseCommentVO;\n-import run.halo.app.model.vo.BaseCommentWithParentVO;\n-import run.halo.app.model.vo.CommentWithHasChildrenVO;\n+import run.halo.app.model.vo.*;\n import run.halo.app.service.OptionService;\n import run.halo.app.service.SheetCommentService;\n import run.halo.app.service.SheetService;\n@@ -53,17 +49,17 @@ public SheetController(SheetService sheetService, SheetCommentService sheetComme\n \n     @GetMapping\n     @ApiOperation(\"Lists sheets\")\n-    public Page<BasePostSimpleDTO> pageBy(@PageableDefault(sort = \"createTime\", direction = DESC) Pageable pageable) {\n+    public Page<SheetListVO> pageBy(@PageableDefault(sort = \"createTime\", direction = DESC) Pageable pageable) {\n         Page<Sheet> sheetPage = sheetService.pageBy(PostStatus.PUBLISHED, pageable);\n-        return sheetService.convertToSimple(sheetPage);\n+        return sheetService.convertToListVo(sheetPage);\n     }\n \n     @GetMapping(\"{sheetId:\\\\d+}\")\n     @ApiOperation(\"Gets a sheet\")\n-    public BasePostDetailDTO getBy(@PathVariable(\"sheetId\") Integer sheetId,\n-                                   @RequestParam(value = \"formatDisabled\", required = false, defaultValue = \"true\") Boolean formatDisabled,\n-                                   @RequestParam(value = \"sourceDisabled\", required = false, defaultValue = \"false\") Boolean sourceDisabled) {\n-        BasePostDetailDTO sheetDetailVO = sheetService.convertToDetail(sheetService.getById(sheetId));\n+    public SheetDetailVO getBy(@PathVariable(\"sheetId\") Integer sheetId,\n+                               @RequestParam(value = \"formatDisabled\", required = false, defaultValue = \"true\") Boolean formatDisabled,\n+                               @RequestParam(value = \"sourceDisabled\", required = false, defaultValue = \"false\") Boolean sourceDisabled) {\n+        SheetDetailVO sheetDetailVO = sheetService.convertToDetailVo(sheetService.getById(sheetId));\n \n         if (formatDisabled) {\n             // Clear the format content",
    "output": "refactor: content api."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/StaticPageServiceImpl.java b/src/main/java/run/halo/app/service/impl/StaticPageServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/StaticPageServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/StaticPageServiceImpl.java\n@@ -115,6 +115,7 @@ public StaticPageServiceImpl(PostService postService,\n     @Override\n     public void generate() {\n         try {\n+            this.cleanFolder();\n             this.generateIndex(1);\n             this.generatePost();\n             this.generateArchives(1);\n@@ -137,6 +138,13 @@ public void generate() {\n         }\n     }\n \n+    /**\n+     * Clean static pages folder\n+     */\n+    private void cleanFolder() {\n+        FileUtils.deleteFolderQuietly(pagesDir);\n+    }\n+\n     /**\n      * Generate index.html and page/{page}/index.html.\n      *",
    "output": "feat: clean static pages folder before generate."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/ContentArchiveController.java b/src/main/java/run/halo/app/controller/content/ContentArchiveController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentArchiveController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentArchiveController.java\n@@ -15,7 +15,6 @@\n import run.halo.app.cache.StringCacheStore;\n import run.halo.app.cache.lock.CacheLock;\n import run.halo.app.exception.ForbiddenException;\n-import run.halo.app.exception.NotFoundException;\n import run.halo.app.model.entity.Category;\n import run.halo.app.model.entity.Post;\n import run.halo.app.model.entity.PostMeta;\n\ndiff --git a/src/main/java/run/halo/app/service/impl/StaticPageServiceImpl.java b/src/main/java/run/halo/app/service/impl/StaticPageServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/StaticPageServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/StaticPageServiceImpl.java\n@@ -128,9 +128,10 @@ public void generate() {\n             this.generateSiteMapHtml();\n             this.generateSiteMapXml();\n             this.generateRobots();\n+            this.generateReadme();\n             this.copyThemeFolder();\n             this.copyUpload();\n-            this.generateReadme();\n+            this.copyStatic();\n         } catch (Exception e) {\n             throw new ServiceException(\"生成静态页面失败！\", e);\n         }\n@@ -661,6 +662,15 @@ private void copyUpload() throws IOException {\n         FileUtils.copyFolder(Paths.get(haloProperties.getWorkDir(), \"upload\"), path);\n     }\n \n+    /**\n+     * Copy static folder.\n+     *\n+     * @throws IOException IOException\n+     */\n+    private void copyStatic() throws IOException {\n+        FileUtils.copyFolder(Paths.get(haloProperties.getWorkDir(), \"static\"), pagesDir);\n+    }\n+\n     /**\n      * Build posts for feed\n      *",
    "output": "feat: support copy static folder when generate static pages."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/ContentArchiveController.java b/src/main/java/run/halo/app/controller/content/ContentArchiveController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentArchiveController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentArchiveController.java\n@@ -172,9 +172,6 @@ public String post(@PathVariable(\"url\") String url,\n     public String password(@PathVariable(\"url\") String url,\n                            Model model) {\n         Post post = postService.getBy(PostStatus.INTIMATE, url);\n-        if (null == post) {\n-            throw new ForbiddenException(\"没有查询到该文章信息\");\n-        }\n \n         model.addAttribute(\"url\", url);\n         return \"common/template/post_password\";\n@@ -185,9 +182,6 @@ public String password(@PathVariable(\"url\") String url,\n     public String password(@PathVariable(\"url\") String url,\n                            @RequestParam(value = \"password\") String password) {\n         Post post = postService.getBy(PostStatus.INTIMATE, url);\n-        if (null == post) {\n-            throw new NotFoundException(\"查询不到该文章的信息\").setErrorData(url);\n-        }\n \n         if (password.equals(post.getPassword())) {\n             String token = IdUtil.simpleUUID();",
    "output": "pref: remove useless code."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/HaloConfiguration.java b/src/main/java/run/halo/app/config/HaloConfiguration.java\n--- a/src/main/java/run/halo/app/config/HaloConfiguration.java\n+++ b/src/main/java/run/halo/app/config/HaloConfiguration.java\n@@ -25,6 +25,7 @@\n import run.halo.app.security.handler.DefaultAuthenticationFailureHandler;\n import run.halo.app.service.OptionService;\n import run.halo.app.service.UserService;\n+import run.halo.app.utils.HaloUtils;\n import run.halo.app.utils.HttpClientUtils;\n \n import java.security.KeyManagementException;\n@@ -102,7 +103,16 @@ public FilterRegistrationBean<ContentFilter> contentFilter(HaloProperties haloPr\n                                                                StringCacheStore cacheStore) {\n         ContentFilter contentFilter = new ContentFilter(haloProperties, optionService, cacheStore);\n         contentFilter.setFailureHandler(new ContentAuthenticationFailureHandler());\n-        contentFilter.addExcludeUrlPatterns(\"/api/**\", \"/install\", \"/version\", \"/admin/**\", \"/js/**\", \"/css/**\");\n+\n+        String adminPattern = HaloUtils.ensureBoth(haloProperties.getAdminPath(), \"/\") + \"**\";\n+\n+        contentFilter.addExcludeUrlPatterns(\n+                adminPattern,\n+                \"/api/**\",\n+                \"/install\",\n+                \"/version\",\n+                \"/js/**\",\n+                \"/css/**\");\n \n         FilterRegistrationBean<ContentFilter> contentFrb = new FilterRegistrationBean<>();\n         contentFrb.addUrlPatterns(\"/*\");",
    "output": "fix: admin redirect incorrectly"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/listener/StartedListener.java b/src/main/java/run/halo/app/listener/StartedListener.java\n--- a/src/main/java/run/halo/app/listener/StartedListener.java\n+++ b/src/main/java/run/halo/app/listener/StartedListener.java\n@@ -1,7 +1,9 @@\n package run.halo.app.listener;\n \n import lombok.extern.slf4j.Slf4j;\n+import org.flywaydb.core.Flyway;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Value;\n import org.springframework.boot.context.event.ApplicationStartedEvent;\n import org.springframework.context.ApplicationListener;\n import org.springframework.context.annotation.Configuration;\n@@ -14,7 +16,6 @@\n import run.halo.app.model.properties.PrimaryProperties;\n import run.halo.app.service.OptionService;\n import run.halo.app.service.ThemeService;\n-import run.halo.app.service.UserService;\n import run.halo.app.utils.FileUtils;\n \n import java.io.IOException;\n@@ -43,13 +44,20 @@ public class StartedListener implements ApplicationListener<ApplicationStartedEv\n     @Autowired\n     private ThemeService themeService;\n \n-    @Autowired\n-    private UserService userService;\n+    @Value(\"${spring.datasource.url}\")\n+    private String url;\n+\n+    @Value(\"${spring.datasource.username}\")\n+    private String username;\n+\n+    @Value(\"${spring.datasource.password}\")\n+    private String password;\n \n     @Override\n     public void onApplicationEvent(ApplicationStartedEvent event) {\n-        this.printStartInfo();\n+        this.migrate();\n         this.initThemes();\n+        this.printStartInfo();\n     }\n \n     private void printStartInfo() {\n@@ -63,6 +71,22 @@ private void printStartInfo() {\n         log.info(\"Halo has started successfully!\");\n     }\n \n+    /**\n+     * Migrate database.\n+     */\n+    private void migrate() {\n+        log.info(\"Starting migrate database...\");\n+        Flyway flyway = Flyway\n+                .configure()\n+                .locations(\"classpath:/migration\")\n+                .baselineVersion(\"1\")\n+                .baselineOnMigrate(true)\n+                .dataSource(url, username, password)\n+                .load();\n+        flyway.migrate();\n+        log.info(\"Migrate database succeed.\");\n+    }\n+\n     /**\n      * Init internal themes\n      */",
    "output": "fix: migrate database error."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/utils/MarkdownUtils.java b/src/main/java/run/halo/app/utils/MarkdownUtils.java\n--- a/src/main/java/run/halo/app/utils/MarkdownUtils.java\n+++ b/src/main/java/run/halo/app/utils/MarkdownUtils.java\n@@ -1,7 +1,6 @@\n package run.halo.app.utils;\n \n import com.vladsch.flexmark.convert.html.FlexmarkHtmlParser;\n-import com.vladsch.flexmark.ext.anchorlink.AnchorLinkExtension;\n import com.vladsch.flexmark.ext.attributes.AttributesExtension;\n import com.vladsch.flexmark.ext.autolink.AutolinkExtension;\n import com.vladsch.flexmark.ext.emoji.EmojiExtension;",
    "output": "pref: remove flexmark anchor link extension."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/utils/MarkdownUtils.java b/src/main/java/run/halo/app/utils/MarkdownUtils.java\n--- a/src/main/java/run/halo/app/utils/MarkdownUtils.java\n+++ b/src/main/java/run/halo/app/utils/MarkdownUtils.java\n@@ -40,7 +40,6 @@ public class MarkdownUtils {\n     private static final DataHolder OPTIONS = new MutableDataSet()\n             .set(Parser.EXTENSIONS, Arrays.asList(\n                     AttributesExtension.create(),\n-                    AnchorLinkExtension.create(),\n                     AutolinkExtension.create(),\n                     EmojiExtension.create(),\n                     EscapedCharacterExtension.create(),",
    "output": "pref: remove flexmark anchor link extension."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/ContentSheetController.java b/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n@@ -18,6 +18,7 @@\n import run.halo.app.model.enums.PostStatus;\n import run.halo.app.model.support.HaloConst;\n import run.halo.app.model.vo.BaseCommentVO;\n+import run.halo.app.model.vo.SheetDetailVO;\n import run.halo.app.service.*;\n import run.halo.app.utils.MarkdownUtils;\n \n@@ -132,9 +133,11 @@ public String sheet(@PathVariable(value = \"url\") String url,\n \n         Page<BaseCommentVO> comments = sheetCommentService.pageVosBy(sheet.getId(), PageRequest.of(cp, optionService.getCommentPageSize(), sort));\n \n+        SheetDetailVO sheetDetailVO = sheetService.convertToDetailVo(sheet);\n+\n         // sheet and post all can use\n-        model.addAttribute(\"sheet\", sheetService.convertToDetailVo(sheet));\n-        model.addAttribute(\"post\", sheetService.convertToDetailVo(sheet));\n+        model.addAttribute(\"sheet\", sheetDetailVO);\n+        model.addAttribute(\"post\", sheetDetailVO);\n         model.addAttribute(\"is_sheet\", true);\n         model.addAttribute(\"comments\", comments);\n ",
    "output": "feat: performance optimization."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/ContentSheetController.java b/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n@@ -133,8 +133,8 @@ public String sheet(@PathVariable(value = \"url\") String url,\n         Page<BaseCommentVO> comments = sheetCommentService.pageVosBy(sheet.getId(), PageRequest.of(cp, optionService.getCommentPageSize(), sort));\n \n         // sheet and post all can use\n-        model.addAttribute(\"sheet\", sheetService.convertToDetail(sheet));\n-        model.addAttribute(\"post\", sheetService.convertToDetail(sheet));\n+        model.addAttribute(\"sheet\", sheetService.convertToDetailVo(sheet));\n+        model.addAttribute(\"post\", sheetService.convertToDetailVo(sheet));\n         model.addAttribute(\"is_sheet\", true);\n         model.addAttribute(\"comments\", comments);\n \n\ndiff --git a/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java b/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n@@ -2,6 +2,7 @@\n \n import cn.hutool.core.text.StrBuilder;\n import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang3.StringUtils;\n import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.Pageable;\n@@ -280,6 +281,10 @@ private SheetDetailVO convertTo(@NonNull Sheet sheet, List<SheetMeta> sheetMetas\n         // Get sheet meta ids\n         sheetDetailVO.setSheetMetaIds(sheetMetaIds);\n         sheetDetailVO.setSheetMetas(sheetMetaService.convertTo(sheetMetas));\n+\n+        if (StringUtils.isBlank(sheetDetailVO.getSummary())) {\n+            sheetDetailVO.setSummary(generateSummary(sheet.getFormatContent()));\n+        }\n         return sheetDetailVO;\n     }\n ",
    "output": "feat: generate summary for sheet."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java b/src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java\n@@ -33,6 +33,8 @@\n import java.util.Date;\n import java.util.List;\n import java.util.Optional;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n \n import static org.springframework.data.domain.Sort.Direction.ASC;\n@@ -52,6 +54,8 @@ public abstract class BasePostServiceImpl<POST extends BasePost> extends Abstrac\n \n     private final OptionService optionService;\n \n+    private final Pattern SUMMARY_PATTERN = Pattern.compile(\"\\\\s*|\\t|\\r|\\n\");\n+\n     public BasePostServiceImpl(BasePostRepository<POST> basePostRepository,\n                                OptionService optionService) {\n         super(basePostRepository);\n@@ -437,6 +441,9 @@ protected String generateSummary(@NonNull String htmlContent) {\n \n         String text = HaloUtils.cleanHtmlTag(htmlContent);\n \n+        Matcher matcher = SUMMARY_PATTERN.matcher(text);\n+        text = matcher.replaceAll(\"\");\n+\n         // Get summary length\n         Integer summaryLength = optionService.getByPropertyOrDefault(PostProperties.SUMMARY_LENGTH, Integer.class, 150);\n ",
    "output": "feat: remove spaces and newlines in post summary."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n@@ -439,7 +439,7 @@ private AuthToken buildAuthToken(@NonNull User user) {\n         token.setRefreshToken(HaloUtils.randomUUIDWithoutDash());\n \n         // Cache those tokens, just for clearing\n-        cacheStore.putAny(SecurityUtils.buildAccessTokenKey(user), token.getAccessToken(), REFRESH_TOKEN_EXPIRED_DAYS, TimeUnit.DAYS);\n+        cacheStore.putAny(SecurityUtils.buildAccessTokenKey(user), token.getAccessToken(), ACCESS_TOKEN_EXPIRED_SECONDS, TimeUnit.SECONDS);\n         cacheStore.putAny(SecurityUtils.buildRefreshTokenKey(user), token.getRefreshToken(), REFRESH_TOKEN_EXPIRED_DAYS, TimeUnit.DAYS);\n \n         // Cache those tokens with user id",
    "output": "Fix a bug when building tokens (#435)\n\nFix a bug when building tokens"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/core/freemarker/tag/PostTagDirective.java b/src/main/java/run/halo/app/core/freemarker/tag/PostTagDirective.java\n--- a/src/main/java/run/halo/app/core/freemarker/tag/PostTagDirective.java\n+++ b/src/main/java/run/halo/app/core/freemarker/tag/PostTagDirective.java\n@@ -48,7 +48,7 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars, Templ\n                     env.setVariable(\"posts\", builder.build().wrap(postService.listLatest(top)));\n                     break;\n                 case \"count\":\n-                    env.setVariable(\"count\", builder.build().wrap(postService.count()));\n+                    env.setVariable(\"count\", builder.build().wrap(postService.countByStatus(PostStatus.PUBLISHED)));\n                     break;\n                 case \"archiveYear\":\n                     env.setVariable(\"archives\", builder.build().wrap(postService.listYearArchives()));",
    "output": "fix: post count tag."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n@@ -439,7 +439,7 @@ private AuthToken buildAuthToken(@NonNull User user) {\n         token.setRefreshToken(HaloUtils.randomUUIDWithoutDash());\n \n         // Cache those tokens, just for clearing\n-        cacheStore.putAny(SecurityUtils.buildAccessTokenKey(user), token.getAccessToken(), ACCESS_TOKEN_EXPIRED_SECONDS, TimeUnit.DAYS);\n+        cacheStore.putAny(SecurityUtils.buildAccessTokenKey(user), token.getAccessToken(), ACCESS_TOKEN_EXPIRED_SECONDS, TimeUnit.SECONDS);\n         cacheStore.putAny(SecurityUtils.buildRefreshTokenKey(user), token.getRefreshToken(), REFRESH_TOKEN_EXPIRED_DAYS, TimeUnit.DAYS);\n \n         // Cache those tokens with user id",
    "output": "Update AdminServiceImpl.java"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n@@ -439,7 +439,7 @@ private AuthToken buildAuthToken(@NonNull User user) {\n         token.setRefreshToken(HaloUtils.randomUUIDWithoutDash());\n \n         // Cache those tokens, just for clearing\n-        cacheStore.putAny(SecurityUtils.buildAccessTokenKey(user), token.getAccessToken(), REFRESH_TOKEN_EXPIRED_DAYS, TimeUnit.DAYS);\n+        cacheStore.putAny(SecurityUtils.buildAccessTokenKey(user), token.getAccessToken(), ACCESS_TOKEN_EXPIRED_SECONDS, TimeUnit.DAYS);\n         cacheStore.putAny(SecurityUtils.buildRefreshTokenKey(user), token.getRefreshToken(), REFRESH_TOKEN_EXPIRED_DAYS, TimeUnit.DAYS);\n \n         // Cache those tokens with user id",
    "output": "Update AdminServiceImpl.java\n\nIt should be this value..."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/event/comment/CommentEventListener.java b/src/main/java/run/halo/app/event/comment/CommentEventListener.java\n--- a/src/main/java/run/halo/app/event/comment/CommentEventListener.java\n+++ b/src/main/java/run/halo/app/event/comment/CommentEventListener.java\n@@ -19,7 +19,8 @@\n  * PostComment event listener.\n  *\n  * @author johnniang\n- * @date 19-4-23\n+ * @author ryanwang\n+ * @date 2019-04-23\n  */\n @Slf4j\n @Component\n@@ -151,6 +152,10 @@ public void handleCommentReplyEvent(CommentReplyEvent replyEvent) {\n                 return;\n             }\n \n+            if (!baseComment.getAllowNotification()) {\n+                return;\n+            }\n+\n             baseAuthorEmail = baseComment.getEmail();\n \n             Post post = postService.getById(postComment.getPostId());\n@@ -175,6 +180,10 @@ public void handleCommentReplyEvent(CommentReplyEvent replyEvent) {\n                 return;\n             }\n \n+            if (!baseComment.getAllowNotification()) {\n+                return;\n+            }\n+\n             baseAuthorEmail = baseComment.getEmail();\n \n             Sheet sheet = sheetService.getById(sheetComment.getPostId());\n@@ -198,6 +207,10 @@ public void handleCommentReplyEvent(CommentReplyEvent replyEvent) {\n                 return;\n             }\n \n+            if (!baseComment.getAllowNotification()) {\n+                return;\n+            }\n+\n             baseAuthorEmail = baseComment.getEmail();\n \n             Journal journal = journalService.getById(journalComment.getPostId());\n\ndiff --git a/src/main/java/run/halo/app/model/dto/BaseCommentDTO.java b/src/main/java/run/halo/app/model/dto/BaseCommentDTO.java\n--- a/src/main/java/run/halo/app/model/dto/BaseCommentDTO.java\n+++ b/src/main/java/run/halo/app/model/dto/BaseCommentDTO.java\n@@ -13,6 +13,8 @@\n  * Base comment output dto.\n  *\n  * @author johnniang\n+ * @author ryanwang\n+ * @date 2019-03-20\n  */\n @Data\n @ToString\n@@ -41,6 +43,8 @@ public class BaseCommentDTO implements OutputConverter<BaseCommentDTO, BaseComme\n \n     private Boolean isAdmin;\n \n+    private Boolean allowNotification;\n+\n     private Date createTime;\n \n }\n\ndiff --git a/src/main/java/run/halo/app/model/entity/BaseComment.java b/src/main/java/run/halo/app/model/entity/BaseComment.java\n--- a/src/main/java/run/halo/app/model/entity/BaseComment.java\n+++ b/src/main/java/run/halo/app/model/entity/BaseComment.java\n@@ -12,6 +12,8 @@\n  * Base comment entity.\n  *\n  * @author johnniang\n+ * @author ryanwang\n+ * @date 2019-03-20\n  */\n @Data\n @Entity(name = \"BaseComment\")\n@@ -79,6 +81,12 @@ public class BaseComment extends BaseEntity {\n     @Column(name = \"is_admin\", columnDefinition = \"tinyint default 0\")\n     private Boolean isAdmin;\n \n+    /**\n+     * Allow notification.\n+     */\n+    @Column(name = \"allow_notification\", columnDefinition = \"tinyint default 1\")\n+    private Boolean allowNotification;\n+\n     /**\n      * Post id.\n      */\n@@ -132,6 +140,9 @@ public void prePersist() {\n         if (isAdmin == null) {\n             isAdmin = false;\n         }\n-    }\n \n+        if (allowNotification == null) {\n+            allowNotification = true;\n+        }\n+    }\n }\n\ndiff --git a/src/main/java/run/halo/app/model/params/BaseCommentParam.java b/src/main/java/run/halo/app/model/params/BaseCommentParam.java\n--- a/src/main/java/run/halo/app/model/params/BaseCommentParam.java\n+++ b/src/main/java/run/halo/app/model/params/BaseCommentParam.java\n@@ -15,7 +15,8 @@\n  * Base Comment param.\n  *\n  * @author johnniang\n- * @date 3/22/19\n+ * @author ryanwang\n+ * @date 2019-03-22\n  */\n @Data\n public abstract class BaseCommentParam<COMMENT> implements InputConverter<COMMENT> {\n@@ -43,6 +44,8 @@ public abstract class BaseCommentParam<COMMENT> implements InputConverter<COMMEN\n     @Min(value = 0, message = \"PostComment parent id must not be less than {value}\")\n     private Long parentId = 0L;\n \n+    private Boolean allowNotification = true;\n+\n     @Override\n     public ParameterizedType parameterizedType() {\n         return ReflectionUtils.getParameterizedTypeBySuperClass(BaseCommentParam.class, this.getClass());",
    "output": "feat: #433"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/AttachmentController.java b/src/main/java/run/halo/app/controller/admin/api/AttachmentController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/AttachmentController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/AttachmentController.java\n@@ -9,6 +9,7 @@\n import org.springframework.web.multipart.MultipartFile;\n import run.halo.app.model.dto.AttachmentDTO;\n import run.halo.app.model.entity.Attachment;\n+import run.halo.app.model.enums.AttachmentType;\n import run.halo.app.model.params.AttachmentParam;\n import run.halo.app.model.params.AttachmentQuery;\n import run.halo.app.service.AttachmentService;\n@@ -112,4 +113,10 @@ public List<AttachmentDTO> uploadAttachments(@RequestPart(\"files\") MultipartFile\n     public List<String> listMediaTypes() {\n         return attachmentService.listAllMediaType();\n     }\n+\n+    @GetMapping(\"types\")\n+    @ApiOperation(\"Lists all of types.\")\n+    public List<AttachmentType> listTypes() {\n+        return attachmentService.listAllType();\n+    }\n }\n\ndiff --git a/src/main/java/run/halo/app/repository/AttachmentRepository.java b/src/main/java/run/halo/app/repository/AttachmentRepository.java\n--- a/src/main/java/run/halo/app/repository/AttachmentRepository.java\n+++ b/src/main/java/run/halo/app/repository/AttachmentRepository.java\n@@ -4,6 +4,7 @@\n import org.springframework.data.jpa.repository.Query;\n import org.springframework.lang.NonNull;\n import run.halo.app.model.entity.Attachment;\n+import run.halo.app.model.enums.AttachmentType;\n import run.halo.app.repository.base.BaseRepository;\n \n import java.util.List;\n@@ -12,6 +13,7 @@\n  * Attachment repository\n  *\n  * @author johnniang\n+ * @author ryanwang\n  * @date 2019-04-03\n  */\n public interface AttachmentRepository extends BaseRepository<Attachment, Integer>, JpaSpecificationExecutor<Attachment> {\n@@ -24,6 +26,14 @@ public interface AttachmentRepository extends BaseRepository<Attachment, Integer\n     @Query(value = \"select distinct a.mediaType from Attachment a\")\n     List<String> findAllMediaType();\n \n+    /**\n+     * Find all attachment type.\n+     *\n+     * @return list of type.\n+     */\n+    @Query(value = \"select distinct a.type from Attachment a\")\n+    List<AttachmentType> findAllType();\n+\n     /**\n      * Counts by attachment path.\n      *\n\ndiff --git a/src/main/java/run/halo/app/service/AttachmentService.java b/src/main/java/run/halo/app/service/AttachmentService.java\n--- a/src/main/java/run/halo/app/service/AttachmentService.java\n+++ b/src/main/java/run/halo/app/service/AttachmentService.java\n@@ -7,6 +7,7 @@\n import run.halo.app.exception.FileOperationException;\n import run.halo.app.model.dto.AttachmentDTO;\n import run.halo.app.model.entity.Attachment;\n+import run.halo.app.model.enums.AttachmentType;\n import run.halo.app.model.params.AttachmentQuery;\n import run.halo.app.service.base.CrudService;\n \n@@ -74,4 +75,11 @@ public interface AttachmentService extends CrudService<Attachment, Integer> {\n      * @return list of media type\n      */\n     List<String> listAllMediaType();\n+\n+    /**\n+     * List all type.\n+     *\n+     * @return list of type.\n+     */\n+    List<AttachmentType> listAllType();\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java b/src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java\n@@ -178,6 +178,11 @@ public List<String> listAllMediaType() {\n         return attachmentRepository.findAllMediaType();\n     }\n \n+    @Override\n+    public List<AttachmentType> listAllType() {\n+        return attachmentRepository.findAllType();\n+    }\n+\n     @Override\n     public Attachment create(Attachment attachment) {\n         Assert.notNull(attachment, \"Attachment must not be null\");",
    "output": "feat: create get attahcment types api."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/JournalController.java b/src/main/java/run/halo/app/controller/admin/api/JournalController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/JournalController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/JournalController.java\n@@ -62,7 +62,8 @@ public JournalDTO updateBy(@PathVariable(\"id\") Integer id,\n                                @RequestBody @Valid JournalParam journalParam) {\n         Journal journal = journalService.getById(id);\n         journalParam.update(journal);\n-        return new JournalDTO().convertFrom(journalService.update(journal));\n+        Journal updatedJournal = journalService.updateBy(journal);\n+        return journalService.convertTo(updatedJournal);\n     }\n \n     @DeleteMapping(\"{journalId:\\\\d+}\")\n\ndiff --git a/src/main/java/run/halo/app/model/dto/JournalDTO.java b/src/main/java/run/halo/app/model/dto/JournalDTO.java\n--- a/src/main/java/run/halo/app/model/dto/JournalDTO.java\n+++ b/src/main/java/run/halo/app/model/dto/JournalDTO.java\n@@ -11,13 +11,16 @@\n  * Journal dto.\n  *\n  * @author johnniang\n- * @date 19-4-24\n+ * @author ryanwang\n+ * @date 2019-04-24\n  */\n @Data\n public class JournalDTO implements OutputConverter<JournalDTO, Journal> {\n \n     private Integer id;\n \n+    private String sourceContent;\n+\n     private String content;\n \n     private Long likes;\n\ndiff --git a/src/main/java/run/halo/app/model/entity/Journal.java b/src/main/java/run/halo/app/model/entity/Journal.java\n--- a/src/main/java/run/halo/app/model/entity/Journal.java\n+++ b/src/main/java/run/halo/app/model/entity/Journal.java\n@@ -12,7 +12,7 @@\n  *\n  * @author johnniang\n  * @author ryanwang\n- * @date 3/22/19\n+ * @date 2019-03-22\n  */\n @Data\n @Entity\n@@ -25,7 +25,10 @@ public class Journal extends BaseEntity {\n     @GeneratedValue(strategy = GenerationType.IDENTITY)\n     private Integer id;\n \n-    @Column(name = \"content\", columnDefinition = \"varchar(1023) not null\")\n+    @Column(name = \"source_content\", columnDefinition = \"varchar(1023) not null default ''\")\n+    private String sourceContent;\n+\n+    @Column(name = \"content\", columnDefinition = \"text not null\")\n     private String content;\n \n     @Column(name = \"likes\", columnDefinition = \"bigint default 0\")\n@@ -44,7 +47,6 @@ public void prePersist() {\n             likes = 0L;\n         }\n \n-\n         if (type == null) {\n             type = JournalType.PUBLIC;\n         }\n\ndiff --git a/src/main/java/run/halo/app/model/params/JournalParam.java b/src/main/java/run/halo/app/model/params/JournalParam.java\n--- a/src/main/java/run/halo/app/model/params/JournalParam.java\n+++ b/src/main/java/run/halo/app/model/params/JournalParam.java\n@@ -13,14 +13,14 @@\n  *\n  * @author johnniang\n  * @author ryanwang\n- * @date 19-4-25\n+ * @date 2019-4-25\n  */\n @Data\n public class JournalParam implements InputConverter<Journal> {\n \n     @NotBlank(message = \"内容不能为空\")\n     @Size(max = 511, message = \"内容的字符长度不能超过 {max}\")\n-    private String content;\n+    private String sourceContent;\n \n     private JournalType type = JournalType.PUBLIC;\n }\n\ndiff --git a/src/main/java/run/halo/app/service/JournalService.java b/src/main/java/run/halo/app/service/JournalService.java\n--- a/src/main/java/run/halo/app/service/JournalService.java\n+++ b/src/main/java/run/halo/app/service/JournalService.java\n@@ -32,6 +32,14 @@ public interface JournalService extends CrudService<Journal, Integer> {\n     @NonNull\n     Journal createBy(@NonNull JournalParam journalParam);\n \n+    /**\n+     * Updates a journal.\n+     *\n+     * @param journal journal must not be null\n+     * @return updated journal\n+     */\n+    Journal updateBy(@NonNull Journal journal);\n+\n     /**\n      * Gets latest journals.\n      *\n\ndiff --git a/src/main/java/run/halo/app/service/impl/JournalServiceImpl.java b/src/main/java/run/halo/app/service/impl/JournalServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/JournalServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/JournalServiceImpl.java\n@@ -21,6 +21,7 @@\n import run.halo.app.service.JournalCommentService;\n import run.halo.app.service.JournalService;\n import run.halo.app.service.base.AbstractCrudService;\n+import run.halo.app.utils.MarkdownUtils;\n import run.halo.app.utils.ServiceUtils;\n \n import javax.persistence.criteria.Predicate;\n@@ -53,7 +54,19 @@ public JournalServiceImpl(JournalRepository journalRepository,\n     public Journal createBy(JournalParam journalParam) {\n         Assert.notNull(journalParam, \"Journal param must not be null\");\n \n-        return create(journalParam.convertTo());\n+        Journal journal = journalParam.convertTo();\n+        journal.setContent(MarkdownUtils.renderHtml(journal.getSourceContent()));\n+\n+        return create(journal);\n+    }\n+\n+    @Override\n+    public Journal updateBy(Journal journal) {\n+        Assert.notNull(journal, \"Journal must not be null\");\n+\n+        journal.setContent(MarkdownUtils.renderHtml(journal.getSourceContent()));\n+\n+        return update(journal);\n     }\n \n     @Override\n\ndiff --git a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n@@ -253,9 +253,6 @@ public List<ArchiveMonthVO> listMonthArchives() {\n     public PostDetailVO importMarkdown(String markdown, String filename) {\n         Assert.notNull(markdown, \"Markdown document must not be null\");\n \n-        // Render markdown to html document.\n-        String content = MarkdownUtils.renderHtml(markdown);\n-\n         // Gets frontMatter\n         Map<String, List<String>> frontMatter = MarkdownUtils.getFrontMatter(markdown);\n ",
    "output": "feat: support markdown for journal."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n@@ -5,6 +5,8 @@\n import cn.hutool.core.util.StrUtil;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.lang3.StringUtils;\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.Pageable;\n@@ -26,6 +28,7 @@\n import run.halo.app.model.enums.LogType;\n import run.halo.app.model.enums.PostStatus;\n import run.halo.app.model.params.PostQuery;\n+import run.halo.app.model.properties.OtherProperties;\n import run.halo.app.model.vo.ArchiveMonthVO;\n import run.halo.app.model.vo.ArchiveYearVO;\n import run.halo.app.model.vo.PostDetailVO;\n@@ -73,15 +76,17 @@ public class PostServiceImpl extends BasePostServiceImpl<Post> implements PostSe\n \n     private final PostMetaService postMetaService;\n \n+    private final OptionService optionService;\n+\n     public PostServiceImpl(PostRepository postRepository,\n                            TagService tagService,\n                            CategoryService categoryService,\n                            PostTagService postTagService,\n                            PostCategoryService postCategoryService,\n                            PostCommentService postCommentService,\n                            ApplicationEventPublisher eventPublisher,\n-                           OptionService optionService,\n-                           PostMetaService postMetaService) {\n+                           PostMetaService postMetaService,\n+                           OptionService optionService) {\n         super(postRepository, optionService);\n         this.postRepository = postRepository;\n         this.tagService = tagService;\n@@ -91,6 +96,7 @@ public PostServiceImpl(PostRepository postRepository,\n         this.postCommentService = postCommentService;\n         this.eventPublisher = eventPublisher;\n         this.postMetaService = postMetaService;\n+        this.optionService = optionService;\n     }\n \n     @Override\n@@ -451,6 +457,11 @@ public Page<PostListVO> convertToListVo(Page<Post> postPage) {\n         // Get post meta list map\n         Map<Integer, List<PostMeta>> postMetaListMap = postMetaService.listPostMetaAsMap(postIds);\n \n+        // Get cdn domain\n+        String cdnDomain = optionService.getByPropertyOrDefault(OtherProperties.CDN_DOMAIN, String.class, StringUtils.EMPTY);\n+\n+        String blogUrl = optionService.getBlogBaseUrl();\n+\n         return postPage.map(post -> {\n             PostListVO postListVO = new PostListVO().convertFrom(post);\n \n@@ -487,6 +498,10 @@ public Page<PostListVO> convertToListVo(Page<Post> postPage) {\n             // Set comment count\n             postListVO.setCommentCount(commentCountMap.getOrDefault(post.getId(), 0L));\n \n+            if (StringUtils.isNotEmpty(cdnDomain) && StringUtils.isNotEmpty(postListVO.getThumbnail())) {\n+                postListVO.setThumbnail(postListVO.getThumbnail().replace(blogUrl, cdnDomain));\n+            }\n+\n             return postListVO;\n         });\n     }\n@@ -546,6 +561,22 @@ private PostDetailVO convertTo(@NonNull Post post, @Nullable List<Tag> tags, @Nu\n         // Get post meta ids\n         postDetailVO.setPostMetaIds(postMetaIds);\n         postDetailVO.setPostMetas(postMetaService.convertTo(postMetaList));\n+\n+        // Get cdn domain\n+        String cdnDomain = optionService.getByPropertyOrDefault(OtherProperties.CDN_DOMAIN, String.class, StringUtils.EMPTY);\n+        String blogUrl = optionService.getBlogBaseUrl();\n+\n+        if (StringUtils.isNotEmpty(cdnDomain) && StringUtils.isNotEmpty(postDetailVO.getThumbnail())) {\n+            postDetailVO.setThumbnail(postDetailVO.getThumbnail().replace(blogUrl, cdnDomain));\n+        }\n+\n+        Document document = Jsoup.parse(postDetailVO.getFormatContent());\n+        document.select(\"img\").forEach(img -> {\n+            String src = img.attr(\"src\");\n+            img.attr(\"src\", src.replace(blogUrl, cdnDomain));\n+        });\n+\n+        postDetailVO.setFormatContent(document.html());\n         return postDetailVO;\n     }\n ",
    "output": "feat: support cdn for post content image."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/ThemeController.java b/src/main/java/run/halo/app/controller/admin/api/ThemeController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/ThemeController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/ThemeController.java\n@@ -80,9 +80,14 @@ public void updateContentBy(@PathVariable(\"themeId\") String themeId,\n         themeService.saveTemplateContent(themeId, param.getPath(), param.getContent());\n     }\n \n-    @GetMapping(\"files/custom\")\n-    public Set<String> customTemplate() {\n-        return themeService.listCustomTemplates(themeService.getActivatedThemeId());\n+    @GetMapping(\"activation/template/custom/sheet\")\n+    public Set<String> customSheetTemplate() {\n+        return themeService.listCustomTemplates(themeService.getActivatedThemeId(), ThemeService.CUSTOM_SHEET_PREFIX);\n+    }\n+\n+    @GetMapping(\"activation/template/custom/post\")\n+    public Set<String> customPostTemplate() {\n+        return themeService.listCustomTemplates(themeService.getActivatedThemeId(), ThemeService.CUSTOM_POST_PREFIX);\n     }\n \n     @PostMapping(\"{themeId}/activation\")\n\ndiff --git a/src/main/java/run/halo/app/controller/content/ContentArchiveController.java b/src/main/java/run/halo/app/controller/content/ContentArchiveController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentArchiveController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentArchiveController.java\n@@ -21,6 +21,7 @@\n import run.halo.app.model.entity.PostMeta;\n import run.halo.app.model.entity.Tag;\n import run.halo.app.model.enums.PostStatus;\n+import run.halo.app.model.support.HaloConst;\n import run.halo.app.model.vo.BaseCommentVO;\n import run.halo.app.model.vo.PostListVO;\n import run.halo.app.service.*;\n@@ -160,6 +161,10 @@ public String post(@PathVariable(\"url\") String url,\n         model.addAttribute(\"metas\", postMetaService.convertToMap(metas));\n         model.addAttribute(\"comments\", comments);\n \n+        if (themeService.templateExists(ThemeService.CUSTOM_POST_PREFIX + post.getTemplate() + HaloConst.SUFFIX_FTL)) {\n+            return themeService.render(ThemeService.CUSTOM_POST_PREFIX + post.getTemplate());\n+        }\n+\n         return themeService.render(\"post\");\n     }\n \n\ndiff --git a/src/main/java/run/halo/app/service/ThemeService.java b/src/main/java/run/halo/app/service/ThemeService.java\n--- a/src/main/java/run/halo/app/service/ThemeService.java\n+++ b/src/main/java/run/halo/app/service/ThemeService.java\n@@ -70,10 +70,15 @@ public interface ThemeService {\n     String THEMES_CACHE_KEY = \"themes\";\n \n     /**\n-     * Custom sheet prefix.\n+     * Custom sheet template prefix.\n      */\n     String CUSTOM_SHEET_PREFIX = \"sheet_\";\n \n+    /**\n+     * Custom post template prefix.\n+     */\n+    String CUSTOM_POST_PREFIX = \"post_\";\n+\n     /**\n      * Theme provider remote name.\n      */\n@@ -132,8 +137,18 @@ public interface ThemeService {\n      * @param themeId theme id must not be blank\n      * @return a set of templates\n      */\n+    @Deprecated\n     Set<String> listCustomTemplates(@NonNull String themeId);\n \n+    /**\n+     * Lists a set of custom template, such as sheet_xxx.ftl/post_xxx.ftl, and xxx will be template name\n+     *\n+     * @param themeId theme id must not be blank\n+     * @param prefix  post_ or sheet_\n+     * @return a set of templates\n+     */\n+    Set<String> listCustomTemplates(@NonNull String themeId, @NonNull String prefix);\n+\n     /**\n      * Judging whether template exists under the specified theme\n      *\n\ndiff --git a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n@@ -187,6 +187,25 @@ public Set<String> listCustomTemplates(String themeId) {\n         }\n     }\n \n+    @Override\n+    public Set<String> listCustomTemplates(String themeId, String prefix) {\n+        // Get the theme path\n+        Path themePath = Paths.get(getThemeOfNonNullBy(themeId).getThemePath());\n+\n+        try (Stream<Path> pathStream = Files.list(themePath)) {\n+            return pathStream.filter(path -> StringUtils.startsWithIgnoreCase(path.getFileName().toString(), prefix))\n+                    .map(path -> {\n+                        // Remove prefix\n+                        String customTemplate = StringUtils.removeStartIgnoreCase(path.getFileName().toString(), prefix);\n+                        // Remove suffix\n+                        return StringUtils.removeEndIgnoreCase(customTemplate, HaloConst.SUFFIX_FTL);\n+                    })\n+                    .collect(Collectors.toSet());\n+        } catch (IOException e) {\n+            throw new ServiceException(\"Failed to list files of path \" + themePath.toString(), e);\n+        }\n+    }\n+\n     @Override\n     public boolean templateExists(String template) {\n         if (StringUtils.isBlank(template)) {",
    "output": "feat: support post custom template."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n@@ -211,12 +211,6 @@ public void sendResetPasswordCode(ResetPasswordParam param) {\n             throw new ServiceException(\"已经获取过验证码，不能重复获取\");\n         });\n \n-        Boolean emailEnabled = optionService.getByPropertyOrDefault(EmailProperties.ENABLED, Boolean.class, false);\n-\n-        if (!emailEnabled) {\n-            throw new ServiceException(\"未启用 SMTP 服务\");\n-        }\n-\n         if (!userService.verifyUser(param.getUsername(), param.getEmail())) {\n             throw new ServiceException(\"用户名或者邮箱验证错误\");\n         }\n@@ -226,12 +220,18 @@ public void sendResetPasswordCode(ResetPasswordParam param) {\n \n         log.info(\"Get reset password code:{}\", code);\n \n+        // Cache code.\n+        cacheStore.putAny(\"code\", code, 5, TimeUnit.MINUTES);\n+\n+        Boolean emailEnabled = optionService.getByPropertyOrDefault(EmailProperties.ENABLED, Boolean.class, false);\n+\n+        if (!emailEnabled) {\n+            throw new ServiceException(\"未启用 SMTP 服务，无法发送邮件，但是你可以通过系统日志找到验证码\");\n+        }\n+\n         // Send email to administrator.\n         String content = \"您正在进行密码重置操作，如不是本人操作，请尽快做好相应措施。密码重置验证码如下（五分钟有效）：\\n\" + code;\n         mailService.sendMail(param.getEmail(), \"找回密码验证码\", content);\n-\n-        // Cache code.\n-        cacheStore.putAny(\"code\", code, 5, TimeUnit.MINUTES);\n     }\n \n     @Override\n\ndiff --git a/src/main/java/run/halo/app/utils/MarkdownUtils.java b/src/main/java/run/halo/app/utils/MarkdownUtils.java\n--- a/src/main/java/run/halo/app/utils/MarkdownUtils.java\n+++ b/src/main/java/run/halo/app/utils/MarkdownUtils.java\n@@ -56,7 +56,7 @@ public class MarkdownUtils {\n             .set(TocExtension.LEVELS, 255)\n             .set(TablesExtension.WITH_CAPTION, false)\n             .set(TablesExtension.COLUMN_SPANS, false)\n-            .set(TablesExtension.MIN_SEPARATOR_DASHES,1)\n+            .set(TablesExtension.MIN_SEPARATOR_DASHES, 1)\n             .set(TablesExtension.MIN_HEADER_ROWS, 1)\n             .set(TablesExtension.MAX_HEADER_ROWS, 1)\n             .set(TablesExtension.APPEND_MISSING_COLUMNS, true)",
    "output": "feat: log reset password code if didn't config smtp."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/utils/MarkdownUtils.java b/src/main/java/run/halo/app/utils/MarkdownUtils.java\n--- a/src/main/java/run/halo/app/utils/MarkdownUtils.java\n+++ b/src/main/java/run/halo/app/utils/MarkdownUtils.java\n@@ -56,6 +56,7 @@ public class MarkdownUtils {\n             .set(TocExtension.LEVELS, 255)\n             .set(TablesExtension.WITH_CAPTION, false)\n             .set(TablesExtension.COLUMN_SPANS, false)\n+            .set(TablesExtension.MIN_SEPARATOR_DASHES,1)\n             .set(TablesExtension.MIN_HEADER_ROWS, 1)\n             .set(TablesExtension.MAX_HEADER_ROWS, 1)\n             .set(TablesExtension.APPEND_MISSING_COLUMNS, true)",
    "output": "fix: markdown table rendering issues."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/utils/MarkdownUtils.java b/src/main/java/run/halo/app/utils/MarkdownUtils.java\n--- a/src/main/java/run/halo/app/utils/MarkdownUtils.java\n+++ b/src/main/java/run/halo/app/utils/MarkdownUtils.java\n@@ -23,8 +23,6 @@\n import com.vladsch.flexmark.util.options.DataHolder;\n import com.vladsch.flexmark.util.options.MutableDataSet;\n import org.apache.commons.lang3.StringUtils;\n-import org.jsoup.Jsoup;\n-import org.jsoup.nodes.Document;\n import run.halo.app.model.support.HaloConst;\n \n import java.util.Arrays;\n@@ -64,7 +62,8 @@ public class MarkdownUtils {\n             .set(TablesExtension.DISCARD_EXTRA_COLUMNS, true)\n             .set(TablesExtension.HEADER_SEPARATOR_COLUMN_MATCH, true)\n             .set(EmojiExtension.USE_SHORTCUT_TYPE, EmojiShortcutType.EMOJI_CHEAT_SHEET)\n-            .set(EmojiExtension.USE_IMAGE_TYPE, EmojiImageType.UNICODE_ONLY);\n+            .set(EmojiExtension.USE_IMAGE_TYPE, EmojiImageType.UNICODE_ONLY)\n+            .set(HtmlRenderer.SOFT_BREAK, \"<br />\\n\");\n \n     private static final Parser PARSER = Parser.builder(OPTIONS).build();\n ",
    "output": "fix: edit wrap issues."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n@@ -453,7 +453,7 @@ private AuthToken buildAuthToken(@NonNull User user) {\n     public String getApplicationConfig() {\n         File file = new File(haloProperties.getWorkDir(), APPLICATION_CONFIG_NAME);\n         if (!file.exists()) {\n-            return \"\";\n+            return StringUtils.EMPTY;\n         }\n         FileReader reader = new FileReader(file);\n         return reader.readString();\n\ndiff --git a/src/main/java/run/halo/app/utils/FilenameUtils.java b/src/main/java/run/halo/app/utils/FilenameUtils.java\n--- a/src/main/java/run/halo/app/utils/FilenameUtils.java\n+++ b/src/main/java/run/halo/app/utils/FilenameUtils.java\n@@ -34,7 +34,7 @@ public static String getBasename(@NonNull String filename) {\n         int separatorLastIndex = StringUtils.lastIndexOf(filename, File.separatorChar);\n \n         if (separatorLastIndex == filename.length() - 1) {\n-            return \"\";\n+            return StringUtils.EMPTY;\n         }\n \n         if (separatorLastIndex >= 0 && separatorLastIndex < filename.length() - 1) {\n@@ -70,7 +70,7 @@ public static String getExtension(@NonNull String filename) {\n         int separatorLastIndex = StringUtils.lastIndexOf(filename, File.separatorChar);\n \n         if (separatorLastIndex == filename.length() - 1) {\n-            return \"\";\n+            return StringUtils.EMPTY;\n         }\n \n         if (separatorLastIndex >= 0 && separatorLastIndex < filename.length() - 1) {\n@@ -81,7 +81,7 @@ public static String getExtension(@NonNull String filename) {\n         int dotLastIndex = StringUtils.lastIndexOf(filename, '.');\n \n         if (dotLastIndex < 0) {\n-            return \"\";\n+            return StringUtils.EMPTY;\n         }\n \n         return filename.substring(dotLastIndex + 1);\n\ndiff --git a/src/main/java/run/halo/app/utils/MarkdownUtils.java b/src/main/java/run/halo/app/utils/MarkdownUtils.java\n--- a/src/main/java/run/halo/app/utils/MarkdownUtils.java\n+++ b/src/main/java/run/halo/app/utils/MarkdownUtils.java\n@@ -23,6 +23,8 @@\n import com.vladsch.flexmark.util.options.DataHolder;\n import com.vladsch.flexmark.util.options.MutableDataSet;\n import org.apache.commons.lang3.StringUtils;\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n import run.halo.app.model.support.HaloConst;\n \n import java.util.Arrays;\n@@ -61,8 +63,8 @@ public class MarkdownUtils {\n             .set(TablesExtension.APPEND_MISSING_COLUMNS, true)\n             .set(TablesExtension.DISCARD_EXTRA_COLUMNS, true)\n             .set(TablesExtension.HEADER_SEPARATOR_COLUMN_MATCH, true)\n-            .set(EmojiExtension.USE_SHORTCUT_TYPE, EmojiShortcutType.GITHUB)\n-            .set(EmojiExtension.USE_IMAGE_TYPE, EmojiImageType.IMAGE_ONLY);\n+            .set(EmojiExtension.USE_SHORTCUT_TYPE, EmojiShortcutType.EMOJI_CHEAT_SHEET)\n+            .set(EmojiExtension.USE_IMAGE_TYPE, EmojiImageType.UNICODE_ONLY);\n \n     private static final Parser PARSER = Parser.builder(OPTIONS).build();\n \n@@ -76,7 +78,7 @@ public class MarkdownUtils {\n      */\n     public static String renderHtml(String markdown) {\n         if (StringUtils.isBlank(markdown)) {\n-            return \"\";\n+            return StringUtils.EMPTY;\n         }\n \n         // Render netease music short url.",
    "output": "refactor: markdown parse emoji type."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/AdminController.java b/src/main/java/run/halo/app/controller/admin/api/AdminController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/AdminController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/AdminController.java\n@@ -119,4 +119,9 @@ public void restartApplication() {\n         Application.restart();\n     }\n \n+    @GetMapping(value = \"halo/logfile\")\n+    @ApiOperation(\"Get halo log file content.\")\n+    public BaseResponse<String> getLogFiles(@RequestParam(\"lines\") Long lines) {\n+        return BaseResponse.ok(HttpStatus.OK.getReasonPhrase(), adminService.getLogFiles(lines));\n+    }\n }\n\ndiff --git a/src/main/java/run/halo/app/service/AdminService.java b/src/main/java/run/halo/app/service/AdminService.java\n--- a/src/main/java/run/halo/app/service/AdminService.java\n+++ b/src/main/java/run/halo/app/service/AdminService.java\n@@ -25,6 +25,8 @@ public interface AdminService {\n \n     String APPLICATION_CONFIG_NAME = \"application.yaml\";\n \n+    String LOG_PATH = \"logs/spring.log\";\n+\n     /**\n      * Authenticates.\n      *\n@@ -97,4 +99,12 @@ public interface AdminService {\n      * @param content new content\n      */\n     void updateApplicationConfig(String content);\n+\n+    /**\n+     * Get halo logs content.\n+     *\n+     * @param lines lines\n+     * @return logs content.\n+     */\n+    String getLogFiles(Long lines);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n@@ -39,6 +39,7 @@\n \n import java.io.File;\n import java.io.IOException;\n+import java.io.RandomAccessFile;\n import java.lang.management.ManagementFactory;\n import java.nio.charset.StandardCharsets;\n import java.nio.file.Files;\n@@ -463,4 +464,57 @@ public void updateApplicationConfig(String content) {\n             throw new ServiceException(\"保存配置文件失败\", e);\n         }\n     }\n+\n+    @Override\n+    public String getLogFiles(Long lines) {\n+\n+        File file = new File(haloProperties.getWorkDir(), LOG_PATH);\n+\n+        StringBuilder result = new StringBuilder();\n+\n+        if (!file.exists()) {\n+            return StringUtils.EMPTY;\n+        }\n+        long count = 0;\n+\n+        RandomAccessFile randomAccessFile = null;\n+        try {\n+            randomAccessFile = new RandomAccessFile(file, \"r\");\n+            long length = randomAccessFile.length();\n+            if (length == 0L) {\n+                return StringUtils.EMPTY;\n+            } else {\n+                long pos = length - 1;\n+                while (pos > 0) {\n+                    pos--;\n+                    randomAccessFile.seek(pos);\n+                    if (randomAccessFile.readByte() == '\\n') {\n+                        String line = randomAccessFile.readLine();\n+                        result.append(new String(line.getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8));\n+                        result.append(StringUtils.LF);\n+                        count++;\n+                        if (count == lines) {\n+                            break;\n+                        }\n+                    }\n+                }\n+                if (pos == 0) {\n+                    randomAccessFile.seek(0);\n+                    result.append(new String(randomAccessFile.readLine().getBytes(StandardCharsets.ISO_8859_1), StandardCharsets.UTF_8));\n+                    result.append(StringUtils.LF);\n+                }\n+            }\n+        } catch (Exception e) {\n+            throw new ServiceException(\"读取日志失败\", e);\n+        } finally {\n+            if (randomAccessFile != null) {\n+                try {\n+                    randomAccessFile.close();\n+                } catch (IOException e) {\n+                    e.printStackTrace();\n+                }\n+            }\n+        }\n+        return result.toString();\n+    }\n }",
    "output": "feat: create get logfile content api."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/StaticStorageController.java b/src/main/java/run/halo/app/controller/admin/api/StaticStorageController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/StaticStorageController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/StaticStorageController.java\n@@ -1,16 +1,18 @@\n package run.halo.app.controller.admin.api;\n \n-import org.springframework.web.bind.annotation.GetMapping;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RestController;\n+import io.swagger.annotations.ApiOperation;\n+import org.springframework.web.bind.annotation.*;\n+import org.springframework.web.multipart.MultipartFile;\n import run.halo.app.model.support.StaticFile;\n import run.halo.app.service.StaticStorageService;\n \n import java.util.List;\n \n /**\n- * @author ryan0up\n- * @date 2019/12/6\n+ * Static storage controller.\n+ *\n+ * @author ryanwang\n+ * @date 2019-12-06\n  */\n @RestController\n @RequestMapping(\"/api/admin/statics\")\n@@ -23,7 +25,28 @@ public StaticStorageController(StaticStorageService staticStorageService) {\n     }\n \n     @GetMapping\n+    @ApiOperation(\"List static files.\")\n     public List<StaticFile> list() {\n         return staticStorageService.listStaticFolder();\n     }\n+\n+    @DeleteMapping\n+    @ApiOperation(\"Delete file by relative path\")\n+    public void deletePermanently(@RequestParam(\"path\") String path) {\n+        staticStorageService.delete(path);\n+    }\n+\n+    @PostMapping\n+    @ApiOperation(\"Create folder\")\n+    public void createFolder(String basePath,\n+                             @RequestParam(\"folderName\") String folderName) {\n+        staticStorageService.createFolder(basePath, folderName);\n+    }\n+\n+    @PostMapping(\"upload\")\n+    @ApiOperation(\"Upload static file\")\n+    public void upload(String basePath,\n+                       @RequestPart(\"file\") MultipartFile file) {\n+        staticStorageService.update(basePath, file);\n+    }\n }\n\ndiff --git a/src/main/java/run/halo/app/service/StaticStorageService.java b/src/main/java/run/halo/app/service/StaticStorageService.java\n--- a/src/main/java/run/halo/app/service/StaticStorageService.java\n+++ b/src/main/java/run/halo/app/service/StaticStorageService.java\n@@ -1,5 +1,7 @@\n package run.halo.app.service;\n \n+import org.springframework.lang.NonNull;\n+import org.springframework.web.multipart.MultipartFile;\n import run.halo.app.model.support.StaticFile;\n \n import java.util.List;\n@@ -23,4 +25,27 @@ public interface StaticStorageService {\n      * @return List<StaticFile>\n      */\n     List<StaticFile> listStaticFolder();\n+\n+    /**\n+     * Delete file or folder by relative path\n+     *\n+     * @param relativePath relative path\n+     */\n+    void delete(@NonNull String relativePath);\n+\n+    /**\n+     * Create folder.\n+     *\n+     * @param basePath   base path\n+     * @param folderName folder name must not be null\n+     */\n+    void createFolder(String basePath, @NonNull String folderName);\n+\n+    /**\n+     * Update static file.\n+     *\n+     * @param basePath base path\n+     * @param file     file must not be null.\n+     */\n+    void update(String basePath, @NonNull MultipartFile file);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/StaticStorageServiceImpl.java b/src/main/java/run/halo/app/service/impl/StaticStorageServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/StaticStorageServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/StaticStorageServiceImpl.java\n@@ -5,10 +5,13 @@\n import org.springframework.lang.Nullable;\n import org.springframework.stereotype.Service;\n import org.springframework.util.Assert;\n+import org.springframework.web.multipart.MultipartFile;\n import run.halo.app.config.properties.HaloProperties;\n+import run.halo.app.exception.FileOperationException;\n import run.halo.app.exception.ServiceException;\n import run.halo.app.model.support.StaticFile;\n import run.halo.app.service.StaticStorageService;\n+import run.halo.app.utils.FileUtils;\n \n import java.io.IOException;\n import java.nio.file.Files;\n@@ -38,7 +41,6 @@ public StaticStorageServiceImpl(HaloProperties haloProperties) {\n \n     @Override\n     public List<StaticFile> listStaticFolder() {\n-        System.out.println(staticDir);\n         return listStaticFileTree(staticDir);\n     }\n \n@@ -78,4 +80,68 @@ private List<StaticFile> listStaticFileTree(@NonNull Path topPath) {\n         }\n     }\n \n+    @Override\n+    public void delete(String relativePath) {\n+        Assert.notNull(relativePath, \"Relative path must not be null\");\n+\n+        Path path = Paths.get(staticDir.toString(), relativePath);\n+        System.out.println(path.toString());\n+\n+        try {\n+            if (path.toFile().isDirectory()) {\n+                FileUtils.deleteFolder(path);\n+            } else {\n+                Files.deleteIfExists(path);\n+            }\n+        } catch (IOException e) {\n+            throw new FileOperationException(\"文件 \" + relativePath + \" 删除失败\", e);\n+        }\n+    }\n+\n+    @Override\n+    public void createFolder(String basePath, String folderName) {\n+        Assert.notNull(folderName, \"Folder name path must not be null\");\n+\n+        Path path;\n+\n+        if (StringUtils.isEmpty(basePath)) {\n+            path = Paths.get(staticDir.toString(), folderName);\n+        } else {\n+            path = Paths.get(staticDir.toString(), basePath, folderName);\n+        }\n+\n+        if (path.toFile().exists()) {\n+            throw new FileOperationException(\"目录 \" + path.toString() + \" 已存在\").setErrorData(path);\n+        }\n+\n+        try {\n+            FileUtils.createIfAbsent(path);\n+        } catch (IOException e) {\n+            throw new FileOperationException(\"目录 \" + path.toString() + \" 创建失败\", e);\n+        }\n+    }\n+\n+    @Override\n+    public void update(String basePath, MultipartFile file) {\n+        Assert.notNull(file, \"Multipart file must not be null\");\n+\n+        Path uploadPath;\n+\n+        if (StringUtils.isEmpty(basePath)) {\n+            uploadPath = Paths.get(staticDir.toString(), file.getOriginalFilename());\n+        } else {\n+            uploadPath = Paths.get(staticDir.toString(), basePath, file.getOriginalFilename());\n+        }\n+\n+        if (uploadPath.toFile().exists()) {\n+            throw new FileOperationException(\"文件 \" + file.getOriginalFilename() + \" 已存在\").setErrorData(uploadPath);\n+        }\n+\n+        try {\n+            Files.createFile(uploadPath);\n+            file.transferTo(uploadPath);\n+        } catch (IOException e) {\n+            throw new ServiceException(\"上传文件失败\").setErrorData(uploadPath);\n+        }\n+    }\n }",
    "output": "feat: completed static storage api."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/LinkController.java b/src/main/java/run/halo/app/controller/admin/api/LinkController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/LinkController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/LinkController.java\n@@ -51,6 +51,12 @@ public LinkDTO getBy(@PathVariable(\"id\") Integer id) {\n         return new LinkDTO().convertFrom(linkService.getById(id));\n     }\n \n+    @GetMapping(\"parse\")\n+    @ApiOperation(\"Get link by parse url\")\n+    public LinkDTO getByParse(@RequestParam(\"url\") String url) {\n+        return linkService.getByParse(url);\n+    }\n+\n     @PostMapping\n     public LinkDTO createBy(@RequestBody @Valid LinkParam linkParam) {\n         Link link = linkService.createBy(linkParam);\n\ndiff --git a/src/main/java/run/halo/app/service/LinkService.java b/src/main/java/run/halo/app/service/LinkService.java\n--- a/src/main/java/run/halo/app/service/LinkService.java\n+++ b/src/main/java/run/halo/app/service/LinkService.java\n@@ -19,6 +19,12 @@\n  */\n public interface LinkService extends CrudService<Link, Integer> {\n \n+    String META_NAME = \"name\";\n+\n+    String META_DESCRIPTION = \"description\";\n+\n+    String META_CONTENT = \"content\";\n+\n     /**\n      * List link dtos.\n      *\n@@ -60,4 +66,12 @@ public interface LinkService extends CrudService<Link, Integer> {\n      * @return a list of teams.\n      */\n     List<String> listAllTeams();\n+\n+    /**\n+     * Get link by parse url.\n+     *\n+     * @param url url must not be null\n+     * @return link dto\n+     */\n+    LinkDTO getByParse(@NonNull String url);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/LinkServiceImpl.java b/src/main/java/run/halo/app/service/impl/LinkServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/LinkServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/LinkServiceImpl.java\n@@ -1,5 +1,8 @@\n package run.halo.app.service.impl;\n \n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.select.Elements;\n import org.springframework.data.domain.Example;\n import org.springframework.data.domain.Sort;\n import org.springframework.lang.NonNull;\n@@ -8,6 +11,7 @@\n import org.springframework.util.Assert;\n import org.springframework.util.CollectionUtils;\n import run.halo.app.exception.AlreadyExistsException;\n+import run.halo.app.exception.BadRequestException;\n import run.halo.app.model.dto.LinkDTO;\n import run.halo.app.model.entity.Link;\n import run.halo.app.model.params.LinkParam;\n@@ -17,6 +21,7 @@\n import run.halo.app.service.base.AbstractCrudService;\n import run.halo.app.utils.ServiceUtils;\n \n+import java.io.IOException;\n import java.util.*;\n import java.util.stream.Collectors;\n \n@@ -100,6 +105,30 @@ public List<String> listAllTeams() {\n         return linkRepository.findAllTeams();\n     }\n \n+    @Override\n+    public LinkDTO getByParse(String url) {\n+        Assert.hasText(url, \"Url must not be blank\");\n+        LinkDTO linkDTO = new LinkDTO();\n+        linkDTO.setUrl(url);\n+        try {\n+            Document document = Jsoup.connect(url).get();\n+\n+            // Get html title.\n+            linkDTO.setName(document.title());\n+\n+            // Get html metas.\n+            Elements metas = document.head().select(\"meta\");\n+            metas.forEach(element -> {\n+                if (META_DESCRIPTION.equalsIgnoreCase(element.attr(META_NAME))) {\n+                    linkDTO.setDescription(element.attr(META_CONTENT));\n+                }\n+            });\n+        } catch (IOException e) {\n+            throw new BadRequestException(\"获取网站信息失败\").setErrorData(e);\n+        }\n+        return linkDTO;\n+    }\n+\n     @NonNull\n     private List<LinkDTO> convertTo(@Nullable List<Link> links) {\n         if (CollectionUtils.isEmpty(links)) {",
    "output": "feat: update migrate sql script."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/utils/MarkdownUtils.java b/src/main/java/run/halo/app/utils/MarkdownUtils.java\n--- a/src/main/java/run/halo/app/utils/MarkdownUtils.java\n+++ b/src/main/java/run/halo/app/utils/MarkdownUtils.java\n@@ -1,6 +1,7 @@\n package run.halo.app.utils;\n \n import com.vladsch.flexmark.convert.html.FlexmarkHtmlParser;\n+import com.vladsch.flexmark.ext.anchorlink.AnchorLinkExtension;\n import com.vladsch.flexmark.ext.attributes.AttributesExtension;\n import com.vladsch.flexmark.ext.autolink.AutolinkExtension;\n import com.vladsch.flexmark.ext.emoji.EmojiExtension;\n@@ -9,6 +10,7 @@\n import com.vladsch.flexmark.ext.escaped.character.EscapedCharacterExtension;\n import com.vladsch.flexmark.ext.gfm.strikethrough.StrikethroughExtension;\n import com.vladsch.flexmark.ext.gfm.tasklist.TaskListExtension;\n+import com.vladsch.flexmark.ext.gitlab.GitLabExtension;\n import com.vladsch.flexmark.ext.ins.InsExtension;\n import com.vladsch.flexmark.ext.media.tags.MediaTagsExtension;\n import com.vladsch.flexmark.ext.tables.TablesExtension;\n@@ -38,6 +40,7 @@ public class MarkdownUtils {\n     private static final DataHolder OPTIONS = new MutableDataSet()\n             .set(Parser.EXTENSIONS, Arrays.asList(\n                     AttributesExtension.create(),\n+                    AnchorLinkExtension.create(),\n                     AutolinkExtension.create(),\n                     EmojiExtension.create(),\n                     EscapedCharacterExtension.create(),\n@@ -47,7 +50,8 @@ public class MarkdownUtils {\n                     MediaTagsExtension.create(),\n                     TablesExtension.create(),\n                     TocExtension.create(),\n-                    YamlFrontMatterExtension.create())\n+                    YamlFrontMatterExtension.create(),\n+                    GitLabExtension.create())\n             )\n             .set(TocExtension.LEVELS, 255)\n             .set(TablesExtension.WITH_CAPTION, false)",
    "output": "feat: support mermaid."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java b/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n--- a/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n+++ b/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n@@ -1,6 +1,7 @@\n package run.halo.app.config;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n+import freemarker.core.TemplateClassResolver;\n import freemarker.template.TemplateException;\n import freemarker.template.TemplateExceptionHandler;\n import lombok.extern.slf4j.Slf4j;\n@@ -131,6 +132,9 @@ public FreeMarkerConfigurer freemarkerConfig(HaloProperties haloProperties) thro\n \n         // Predefine configuration\n         freemarker.template.Configuration configuration = configurer.createConfiguration();\n+\n+        configuration.setNewBuiltinClassResolver(TemplateClassResolver.SAFER_RESOLVER);\n+\n         if (haloProperties.isProductionEnv()) {\n             configuration.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);\n         }",
    "output": "Config freemarker with safer resolver"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/utils/WordPressMigrateUtils.java b/src/main/java/run/halo/app/utils/WordPressMigrateUtils.java\n--- a/src/main/java/run/halo/app/utils/WordPressMigrateUtils.java\n+++ b/src/main/java/run/halo/app/utils/WordPressMigrateUtils.java\n@@ -43,6 +43,7 @@ public static Element getRootElement(FileInputStream fileInputStream) {\n         try {\n             SAXReader saxReader = new SAXReader();\n             Document document = saxReader.read(fileInputStream);\n+            saxReader.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n             return document.getRootElement();\n         } catch (Exception e) {\n             throw new RuntimeException(\"can not get root element\");",
    "output": "Fix xml external entity vulnerability"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/BackupServiceImpl.java b/src/main/java/run/halo/app/service/impl/BackupServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/BackupServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/BackupServiceImpl.java\n@@ -214,8 +214,13 @@ public List<BackupDTO> listHaloBackups() {\n     public void deleteHaloBackup(String fileName) {\n         Assert.hasText(fileName, \"File name must not be blank\");\n \n+        Path backupRootPath = Paths.get(haloProperties.getBackupDir());\n+\n         // Get backup path\n-        Path backupPath = Paths.get(haloProperties.getBackupDir(), fileName);\n+        Path backupPath = backupRootPath.resolve(fileName);\n+\n+        // Check directory traversal\n+        run.halo.app.utils.FileUtils.checkDirectoryTraversal(backupRootPath, backupPath);\n \n         try {\n             // Delete backup file",
    "output": "Fix vulnerability while deleting backup file"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/utils/FileUtils.java b/src/main/java/run/halo/app/utils/FileUtils.java\n--- a/src/main/java/run/halo/app/utils/FileUtils.java\n+++ b/src/main/java/run/halo/app/utils/FileUtils.java\n@@ -296,7 +296,7 @@ public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Pa\n         Assert.notNull(parentPath, \"Parent path must not be null\");\n         Assert.notNull(pathToCheck, \"Path to check must not be null\");\n \n-        if (pathToCheck.startsWith(parentPath.normalize())) {\n+        if (pathToCheck.normalize().startsWith(parentPath)) {\n             return;\n         }\n \n\ndiff --git a/src/test/java/run/halo/app/utils/DirectoryAttackTest.java b/src/test/java/run/halo/app/utils/DirectoryAttackTest.java\n--- a/src/test/java/run/halo/app/utils/DirectoryAttackTest.java\n+++ b/src/test/java/run/halo/app/utils/DirectoryAttackTest.java\n@@ -2,6 +2,7 @@\n \n import org.junit.Assert;\n import org.junit.Test;\n+import run.halo.app.exception.ForbiddenException;\n \n import java.io.IOException;\n import java.nio.file.Path;\n@@ -68,4 +69,14 @@ public void getRealPathTest() {\n         System.out.println(\"Name count: \" + path.getNameCount());\n         System.out.println(\"Normalized path: \" + path.normalize());\n     }\n+\n+    @Test\n+    public void traversalTestWhenSuccess() {\n+        FileUtils.checkDirectoryTraversal(\"/etc/\", \"/etc/halo/halo/../test\");\n+    }\n+\n+    @Test(expected = ForbiddenException.class)\n+    public void traversalTestWhenFailure() {\n+        FileUtils.checkDirectoryTraversal(\"/etc/\", \"/etc/../tmp\");\n+    }\n }",
    "output": "Fix directory traversal vulnerability"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/PostCommentController.java b/src/main/java/run/halo/app/controller/admin/api/PostCommentController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/PostCommentController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/PostCommentController.java\n@@ -8,7 +8,6 @@\n import org.springframework.data.web.PageableDefault;\n import org.springframework.data.web.SortDefault;\n import org.springframework.web.bind.annotation.*;\n-import run.halo.app.model.BaseCommentUpdateStatusParam;\n import run.halo.app.model.dto.BaseCommentDTO;\n import run.halo.app.model.entity.PostComment;\n import run.halo.app.model.enums.CommentStatus;\n@@ -97,10 +96,11 @@ public BaseCommentDTO updateStatusBy(@PathVariable(\"commentId\") Long commentId,\n         return postCommentService.convertTo(updatedPostComment);\n     }\n \n-    @PutMapping(\"status\")\n+    @PutMapping(\"status/{status}\")\n     @ApiOperation(\"Updates post comment status in batch\")\n-    public List<BaseCommentDTO> updateStatusInBatch(@RequestBody BaseCommentUpdateStatusParam param) {\n-        List<PostComment> comments = postCommentService.updateStatusByIds(param.getIds(), param.getStatus());\n+    public List<BaseCommentDTO> updateStatusInBatch(@PathVariable(name = \"status\") CommentStatus status,\n+                                                    @RequestBody List<Long> ids) {\n+        List<PostComment> comments = postCommentService.updateStatusByIds(ids, status);\n         return postCommentService.convertTo(comments);\n     }\n \n\ndiff --git a/src/main/java/run/halo/app/controller/admin/api/SheetCommentController.java b/src/main/java/run/halo/app/controller/admin/api/SheetCommentController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/SheetCommentController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/SheetCommentController.java\n@@ -8,7 +8,6 @@\n import org.springframework.data.web.PageableDefault;\n import org.springframework.data.web.SortDefault;\n import org.springframework.web.bind.annotation.*;\n-import run.halo.app.model.BaseCommentUpdateStatusParam;\n import run.halo.app.model.dto.BaseCommentDTO;\n import run.halo.app.model.entity.SheetComment;\n import run.halo.app.model.enums.CommentStatus;\n@@ -92,10 +91,11 @@ public BaseCommentDTO updateStatusBy(@PathVariable(\"commentId\") Long commentId,\n         return sheetCommentService.convertTo(updatedSheetComment);\n     }\n \n-    @PutMapping(\"status\")\n+    @PutMapping(\"status/{status}\")\n     @ApiOperation(\"Updates sheet comment status in batch\")\n-    public List<BaseCommentDTO> updateStatusInBatch(@RequestBody BaseCommentUpdateStatusParam param) {\n-        List<SheetComment> comments = sheetCommentService.updateStatusByIds(param.getIds(), param.getStatus());\n+    public List<BaseCommentDTO> updateStatusInBatch(@PathVariable(name = \"status\") CommentStatus status,\n+                                                    @RequestBody List<Long> ids) {\n+        List<SheetComment> comments = sheetCommentService.updateStatusByIds(ids, status);\n         return sheetCommentService.convertTo(comments);\n     }\n \n\ndiff --git a/src/main/java/run/halo/app/model/BaseCommentUpdateStatusParam.java b/src/main/java/run/halo/app/model/BaseCommentUpdateStatusParam.java\n--- a/src/main/java/run/halo/app/model/BaseCommentUpdateStatusParam.java\n+++ b/src/main/java/run/halo/app/model/BaseCommentUpdateStatusParam.java\n@@ -1,20 +0,0 @@\n-package run.halo.app.model;\n-\n-import lombok.Data;\n-import run.halo.app.model.enums.CommentStatus;\n-\n-import java.util.List;\n-\n-/**\n- * Base comment update status param.\n- *\n- * @author ryanwang\n- * @date 2019-12-12\n- */\n-@Data\n-public class BaseCommentUpdateStatusParam {\n-\n-    private List<Long> ids;\n-\n-    private CommentStatus status;\n-}",
    "output": "refactor: comment status update api."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/PostController.java b/src/main/java/run/halo/app/controller/admin/api/PostController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/PostController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/PostController.java\n@@ -15,7 +15,6 @@\n import run.halo.app.model.params.PostContentParam;\n import run.halo.app.model.params.PostParam;\n import run.halo.app.model.params.PostQuery;\n-import run.halo.app.model.params.PostStatusUpdateParam;\n import run.halo.app.model.vo.PostDetailVO;\n import run.halo.app.service.OptionService;\n import run.halo.app.service.PostService;\n@@ -126,10 +125,11 @@ public BasePostMinimalDTO updateStatusBy(\n         return new BasePostMinimalDTO().convertFrom(post);\n     }\n \n-    @PutMapping(\"status\")\n+    @PutMapping(\"status/{status}\")\n     @ApiOperation(\"Update post status in batch\")\n-    public List<Post> updateStatusInBatch(@RequestBody PostStatusUpdateParam param) {\n-        return postService.updateStatusByIds(param.getIds(), param.getStatus());\n+    public List<Post> updateStatusInBatch(@PathVariable(name = \"status\") PostStatus status,\n+                                          @RequestBody List<Integer> ids) {\n+        return postService.updateStatusByIds(ids, status);\n     }\n \n     @PutMapping(\"{postId:\\\\d+}/status/draft/content\")\n\ndiff --git a/src/main/java/run/halo/app/model/params/PostStatusUpdateParam.java b/src/main/java/run/halo/app/model/params/PostStatusUpdateParam.java\n--- a/src/main/java/run/halo/app/model/params/PostStatusUpdateParam.java\n+++ b/src/main/java/run/halo/app/model/params/PostStatusUpdateParam.java\n@@ -1,20 +0,0 @@\n-package run.halo.app.model.params;\n-\n-import lombok.Data;\n-import run.halo.app.model.enums.PostStatus;\n-\n-import java.util.List;\n-\n-/**\n- * Post status update param.\n- *\n- * @author ryanwang\n- * @date 2019-12-12\n- */\n-@Data\n-public class PostStatusUpdateParam {\n-\n-    private PostStatus status;\n-\n-    private List<Integer> ids;\n-}",
    "output": "Refactor post status update api"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/support/CommentPage.java b/src/main/java/run/halo/app/model/support/CommentPage.java\n--- a/src/main/java/run/halo/app/model/support/CommentPage.java\n+++ b/src/main/java/run/halo/app/model/support/CommentPage.java\n@@ -1,8 +1,6 @@\n package run.halo.app.model.support;\n \n-import lombok.Data;\n-import lombok.EqualsAndHashCode;\n-import lombok.ToString;\n+import lombok.*;\n import org.springframework.data.domain.PageImpl;\n import org.springframework.data.domain.Pageable;\n \n@@ -14,7 +12,7 @@\n  * @author johnniang\n  * @date 3/25/19\n  */\n-@Data\n+@Getter\n @ToString(callSuper = true)\n @EqualsAndHashCode(callSuper = true)\n public class CommentPage<T> extends PageImpl<T> {",
    "output": "Fix lombok error"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/PostController.java b/src/main/java/run/halo/app/controller/admin/api/PostController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/PostController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/PostController.java\n@@ -15,6 +15,7 @@\n import run.halo.app.model.params.PostContentParam;\n import run.halo.app.model.params.PostParam;\n import run.halo.app.model.params.PostQuery;\n+import run.halo.app.model.params.PostStatusUpdateParam;\n import run.halo.app.model.vo.PostDetailVO;\n import run.halo.app.service.OptionService;\n import run.halo.app.service.PostService;\n@@ -125,6 +126,12 @@ public BasePostMinimalDTO updateStatusBy(\n         return new BasePostMinimalDTO().convertFrom(post);\n     }\n \n+    @PutMapping(\"status\")\n+    @ApiOperation(\"Update post status in batch\")\n+    public List<Post> updateStatusInBatch(@RequestBody PostStatusUpdateParam param) {\n+        return postService.updateStatusByIds(param.getIds(), param.getStatus());\n+    }\n+\n     @PutMapping(\"{postId:\\\\d+}/status/draft/content\")\n     @ApiOperation(\"Update draft\")\n     public BasePostDetailDTO updateDraftBy(\n\ndiff --git a/src/main/java/run/halo/app/model/params/PostStatusUpdateParam.java b/src/main/java/run/halo/app/model/params/PostStatusUpdateParam.java\n--- a/src/main/java/run/halo/app/model/params/PostStatusUpdateParam.java\n+++ b/src/main/java/run/halo/app/model/params/PostStatusUpdateParam.java\n@@ -0,0 +1,20 @@\n+package run.halo.app.model.params;\n+\n+import lombok.Data;\n+import run.halo.app.model.enums.PostStatus;\n+\n+import java.util.List;\n+\n+/**\n+ * Post status update param.\n+ *\n+ * @author ryanwang\n+ * @date 2019-12-12\n+ */\n+@Data\n+public class PostStatusUpdateParam {\n+\n+    private PostStatus status;\n+\n+    private List<Integer> ids;\n+}\n\ndiff --git a/src/main/java/run/halo/app/service/base/BasePostService.java b/src/main/java/run/halo/app/service/base/BasePostService.java\n--- a/src/main/java/run/halo/app/service/base/BasePostService.java\n+++ b/src/main/java/run/halo/app/service/base/BasePostService.java\n@@ -8,7 +8,6 @@\n import run.halo.app.model.dto.post.BasePostMinimalDTO;\n import run.halo.app.model.dto.post.BasePostSimpleDTO;\n import run.halo.app.model.entity.BasePost;\n-import run.halo.app.model.entity.Post;\n import run.halo.app.model.enums.PostStatus;\n \n import java.util.Date;\n@@ -236,4 +235,14 @@ public interface BasePostService<POST extends BasePost> extends CrudService<POST\n      */\n     @NonNull\n     POST updateStatus(@NonNull PostStatus status, @NonNull Integer postId);\n+\n+    /**\n+     * Updates post status by ids.\n+     *\n+     * @param ids    post ids must not be null\n+     * @param status post status must not be null\n+     * @return updated posts\n+     */\n+    @NonNull\n+    List<POST> updateStatusByIds(@NonNull List<Integer> ids, @NonNull PostStatus status);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java b/src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java\n@@ -380,6 +380,17 @@ public POST updateStatus(PostStatus status, Integer postId) {\n         return post;\n     }\n \n+    @Override\n+    @Transactional\n+    public List<POST> updateStatusByIds(List<Integer> ids, PostStatus status) {\n+        if (CollectionUtils.isEmpty(ids)) {\n+            return Collections.emptyList();\n+        }\n+        return ids.stream().map(id -> {\n+            return updateStatus(status, id);\n+        }).collect(Collectors.toList());\n+    }\n+\n     @Override\n     public POST create(POST post) {\n         // Check title",
    "output": "feat: add update status in batch api for post."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/PostCommentController.java b/src/main/java/run/halo/app/controller/admin/api/PostCommentController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/PostCommentController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/PostCommentController.java\n@@ -98,11 +98,17 @@ public BaseCommentDTO updateStatusBy(@PathVariable(\"commentId\") Long commentId,\n \n     @DeleteMapping(\"{commentId:\\\\d+}\")\n     @ApiOperation(\"Deletes comment permanently and recursively\")\n-    public BaseCommentDTO deleteBy(@PathVariable(\"commentId\") Long commentId) {\n+    public BaseCommentDTO deletePermanently(@PathVariable(\"commentId\") Long commentId) {\n         PostComment deletedPostComment = postCommentService.removeById(commentId);\n         return postCommentService.convertTo(deletedPostComment);\n     }\n \n+    @DeleteMapping\n+    @ApiOperation(\"Delete post comments permanently in batch by id array\")\n+    public List<PostComment> deletePermanentlyInBatch(@RequestBody List<Long> ids) {\n+        return postCommentService.removeByIds(ids);\n+    }\n+\n     @GetMapping(\"{commentId:\\\\d+}\")\n     @ApiOperation(\"Gets a post comment by comment id\")\n     public PostCommentWithPostVO getBy(@PathVariable(\"commentId\") Long commentId) {\n\ndiff --git a/src/main/java/run/halo/app/controller/admin/api/SheetCommentController.java b/src/main/java/run/halo/app/controller/admin/api/SheetCommentController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/SheetCommentController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/SheetCommentController.java\n@@ -93,11 +93,17 @@ public BaseCommentDTO updateStatusBy(@PathVariable(\"commentId\") Long commentId,\n \n     @DeleteMapping(\"{commentId:\\\\d+}\")\n     @ApiOperation(\"Deletes comment permanently and recursively\")\n-    public BaseCommentDTO deleteBy(@PathVariable(\"commentId\") Long commentId) {\n+    public BaseCommentDTO deletePermanently(@PathVariable(\"commentId\") Long commentId) {\n         SheetComment deletedSheetComment = sheetCommentService.removeById(commentId);\n         return sheetCommentService.convertTo(deletedSheetComment);\n     }\n \n+    @DeleteMapping\n+    @ApiOperation(\"Delete post comments permanently in batch by id array\")\n+    public List<SheetComment> deletePermanentlyInBatch(@RequestBody List<Long> ids) {\n+        return sheetCommentService.removeByIds(ids);\n+    }\n+\n     @GetMapping(\"{commentId:\\\\d+}\")\n     @ApiOperation(\"Gets a post comment by comment id\")\n     public SheetCommentWithSheetVO getBy(@PathVariable(\"commentId\") Long commentId) {\n\ndiff --git a/src/main/java/run/halo/app/service/base/BaseCommentService.java b/src/main/java/run/halo/app/service/base/BaseCommentService.java\n--- a/src/main/java/run/halo/app/service/base/BaseCommentService.java\n+++ b/src/main/java/run/halo/app/service/base/BaseCommentService.java\n@@ -23,7 +23,8 @@\n  * Base comment service interface.\n  *\n  * @author johnniang\n- * @date 19-4-24\n+ * @author ryanwang\n+ * @date 2019-04-24\n  */\n public interface BaseCommentService<COMMENT extends BaseComment> extends CrudService<COMMENT, Long> {\n \n@@ -149,6 +150,15 @@ public interface BaseCommentService<COMMENT extends BaseComment> extends CrudSer\n     @NonNull\n     COMMENT updateStatus(@NonNull Long commentId, @NonNull CommentStatus status);\n \n+    /**\n+     * Removes comments in batch.\n+     *\n+     * @param ids ids must not be null.\n+     * @return a list of deleted comment.\n+     */\n+    @NonNull\n+    List<COMMENT> removeByIds(@NonNull Collection<Long> ids);\n+\n     /**\n      * Converts to base comment dto.\n      *\n\ndiff --git a/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java b/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n@@ -51,6 +51,7 @@\n  * Base comment service implementation.\n  *\n  * @author johnniang\n+ * @author ryanwang\n  * @date 2019-04-24\n  */\n @Slf4j\n@@ -328,6 +329,14 @@ public COMMENT updateStatus(Long commentId, CommentStatus status) {\n         return updatedComment;\n     }\n \n+    @Override\n+    public List<COMMENT> removeByIds(Collection<Long> ids) {\n+        if (CollectionUtils.isEmpty(ids)) {\n+            return Collections.emptyList();\n+        }\n+        return ids.stream().map(this::removeById).collect(Collectors.toList());\n+    }\n+\n     @Override\n     public List<BaseCommentDTO> convertTo(List<COMMENT> comments) {\n         if (CollectionUtils.isEmpty(comments)) {",
    "output": "feat: support remove in batch api for comment."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/PostController.java b/src/main/java/run/halo/app/controller/admin/api/PostController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/PostController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/PostController.java\n@@ -1,7 +1,6 @@\n package run.halo.app.controller.admin.api;\n \n import cn.hutool.core.util.IdUtil;\n-import io.swagger.annotations.Api;\n import io.swagger.annotations.ApiOperation;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.Pageable;\n@@ -17,7 +16,6 @@\n import run.halo.app.model.params.PostParam;\n import run.halo.app.model.params.PostQuery;\n import run.halo.app.model.vo.PostDetailVO;\n-import run.halo.app.model.vo.PostListVO;\n import run.halo.app.service.OptionService;\n import run.halo.app.service.PostService;\n \n@@ -140,10 +138,15 @@ public BasePostDetailDTO updateDraftBy(\n \n     @DeleteMapping(\"{postId:\\\\d+}\")\n     public void deletePermanently(@PathVariable(\"postId\") Integer postId) {\n-        // Remove it\n         postService.removeById(postId);\n     }\n \n+    @DeleteMapping\n+    @ApiOperation(\"Delete posts permanently in batch by id array\")\n+    public List<Post> deletePermanentlyInBatch(@RequestBody List<Integer> ids) {\n+        return postService.removeByIds(ids);\n+    }\n+\n     @GetMapping(value = {\"preview/{postId:\\\\d+}\", \"{postId:\\\\d+}/preview\"})\n     @ApiOperation(\"Get preview link\")\n     public String preview(@PathVariable(\"postId\") Integer postId) {\n\ndiff --git a/src/main/java/run/halo/app/model/entity/PostMeta.java b/src/main/java/run/halo/app/model/entity/PostMeta.java\n--- a/src/main/java/run/halo/app/model/entity/PostMeta.java\n+++ b/src/main/java/run/halo/app/model/entity/PostMeta.java\n@@ -1,5 +1,7 @@\n package run.halo.app.model.entity;\n \n+import lombok.EqualsAndHashCode;\n+\n import javax.persistence.DiscriminatorValue;\n import javax.persistence.Entity;\n \n@@ -12,5 +14,6 @@\n  */\n @Entity(name = \"PostMeta\")\n @DiscriminatorValue(\"0\")\n+@EqualsAndHashCode(callSuper = true)\n public class PostMeta extends BaseMeta {\n }\n\ndiff --git a/src/main/java/run/halo/app/service/PostService.java b/src/main/java/run/halo/app/service/PostService.java\n--- a/src/main/java/run/halo/app/service/PostService.java\n+++ b/src/main/java/run/halo/app/service/PostService.java\n@@ -13,6 +13,7 @@\n import run.halo.app.model.vo.PostListVO;\n import run.halo.app.service.base.BasePostService;\n \n+import java.util.Collection;\n import java.util.List;\n import java.util.Set;\n \n@@ -94,6 +95,15 @@ public interface PostService extends BasePostService<Post> {\n     @Override\n     Post getBy(@NonNull PostStatus status, @NonNull String url);\n \n+    /**\n+     * Removes posts in batch.\n+     *\n+     * @param ids ids must not be null.\n+     * @return a list of deleted post.\n+     */\n+    @NonNull\n+    List<Post> removeByIds(@NonNull Collection<Integer> ids);\n+\n     /**\n      * Lists year archives.\n      *\n\ndiff --git a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n@@ -15,6 +15,7 @@\n import org.springframework.stereotype.Service;\n import org.springframework.transaction.annotation.Transactional;\n import org.springframework.util.Assert;\n+import org.springframework.util.CollectionUtils;\n import run.halo.app.event.logger.LogEvent;\n import run.halo.app.event.post.PostVisitEvent;\n import run.halo.app.model.dto.BaseMetaDTO;\n@@ -159,6 +160,14 @@ public Post getBy(PostStatus status, String url) {\n         return post;\n     }\n \n+    @Override\n+    public List<Post> removeByIds(Collection<Integer> ids) {\n+        if (CollectionUtils.isEmpty(ids)) {\n+            return Collections.emptyList();\n+        }\n+        return ids.stream().map(this::removeById).collect(Collectors.toList());\n+    }\n+\n     @Override\n     public Post getByUrl(String url) {\n         Post post = super.getByUrl(url);",
    "output": "feat: support remove in batch api for post."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/PostController.java b/src/main/java/run/halo/app/controller/admin/api/PostController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/PostController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/PostController.java\n@@ -1,16 +1,19 @@\n package run.halo.app.controller.admin.api;\n \n import cn.hutool.core.util.IdUtil;\n+import io.swagger.annotations.Api;\n import io.swagger.annotations.ApiOperation;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.Pageable;\n import org.springframework.data.web.PageableDefault;\n import org.springframework.web.bind.annotation.*;\n import run.halo.app.cache.StringCacheStore;\n+import run.halo.app.model.dto.post.BasePostDetailDTO;\n import run.halo.app.model.dto.post.BasePostMinimalDTO;\n import run.halo.app.model.dto.post.BasePostSimpleDTO;\n import run.halo.app.model.entity.Post;\n import run.halo.app.model.enums.PostStatus;\n+import run.halo.app.model.params.PostContentParam;\n import run.halo.app.model.params.PostParam;\n import run.halo.app.model.params.PostQuery;\n import run.halo.app.model.vo.PostDetailVO;\n@@ -52,10 +55,15 @@ public PostController(PostService postService,\n \n     @GetMapping\n     @ApiOperation(\"Lists posts\")\n-    public Page<PostListVO> pageBy(@PageableDefault(sort = {\"topPriority\", \"createTime\"}, direction = DESC) Pageable pageable,\n-                                   PostQuery postQuery) {\n+    public Page<? extends BasePostSimpleDTO> pageBy(@PageableDefault(sort = {\"topPriority\", \"createTime\"}, direction = DESC) Pageable pageable,\n+                                                    PostQuery postQuery,\n+                                                    @RequestParam(value = \"more\", defaultValue = \"true\") Boolean more) {\n         Page<Post> postPage = postService.pageBy(postQuery, pageable);\n-        return postService.convertToListVo(postPage);\n+        if (more) {\n+            return postService.convertToListVo(postPage);\n+        }\n+\n+        return postService.convertToSimple(postPage);\n     }\n \n     @GetMapping(\"latest\")\n@@ -110,16 +118,24 @@ public PostDetailVO updateBy(@Valid @RequestBody PostParam postParam,\n     }\n \n     @PutMapping(\"{postId:\\\\d+}/status/{status}\")\n-    public void updateStatusBy(\n+    @ApiOperation(\"Update post status\")\n+    public BasePostMinimalDTO updateStatusBy(\n             @PathVariable(\"postId\") Integer postId,\n             @PathVariable(\"status\") PostStatus status) {\n-        Post post = postService.getById(postId);\n+        Post post = postService.updateStatus(status, postId);\n \n-        // Set status\n-        post.setStatus(status);\n+        return new BasePostMinimalDTO().convertFrom(post);\n+    }\n+\n+    @PutMapping(\"{postId:\\\\d+}/status/draft/content\")\n+    @ApiOperation(\"Update draft\")\n+    public BasePostDetailDTO updateDraftBy(\n+            @PathVariable(\"postId\") Integer postId,\n+            @RequestBody PostContentParam contentParam) {\n+        // Update draft content\n+        Post post = postService.updateDraftContent(contentParam.getContent(), postId);\n \n-        // Update\n-        postService.update(post);\n+        return new BasePostDetailDTO().convertFrom(post);\n     }\n \n     @DeleteMapping(\"{postId:\\\\d+}\")\n@@ -128,7 +144,8 @@ public void deletePermanently(@PathVariable(\"postId\") Integer postId) {\n         postService.removeById(postId);\n     }\n \n-    @GetMapping(\"preview/{postId:\\\\d+}\")\n+    @GetMapping(value = {\"preview/{postId:\\\\d+}\", \"{postId:\\\\d+}/preview\"})\n+    @ApiOperation(\"Get preview link\")\n     public String preview(@PathVariable(\"postId\") Integer postId) {\n         Post post = postService.getById(postId);\n ",
    "output": "Add draft content updation and enhance page list api"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/cache/InMemoryCacheStore.java b/src/main/java/run/halo/app/cache/InMemoryCacheStore.java\n--- a/src/main/java/run/halo/app/cache/InMemoryCacheStore.java\n+++ b/src/main/java/run/halo/app/cache/InMemoryCacheStore.java\n@@ -67,8 +67,8 @@ Boolean putInternalIfAbsent(String key, CacheWrapper<String> cacheWrapper) {\n \n         log.debug(\"Preparing to put key: [{}], value: [{}]\", key, cacheWrapper);\n \n+        lock.lock();\n         try {\n-            lock.lock();\n             // Get the value before\n             Optional<String> valueOptional = get(key);\n \n@@ -98,6 +98,11 @@ public void delete(String key) {\n     public void preDestroy() {\n         log.debug(\"Cancelling all timer tasks\");\n         timer.cancel();\n+        clear();\n+    }\n+\n+    private void clear() {\n+        CACHE_CONTAINER.clear();\n     }\n \n     /**",
    "output": "Clear cache before application id destroyed"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java b/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n@@ -64,6 +64,17 @@ public SheetServiceImpl(SheetRepository sheetRepository,\n     @Override\n     public Sheet createBy(Sheet sheet, boolean autoSave) {\n         Sheet createdSheet = createOrUpdateBy(sheet);\n+        if (!autoSave) {\n+            // Log the creation\n+            LogEvent logEvent = new LogEvent(this, createdSheet.getId().toString(), LogType.SHEET_PUBLISHED, createdSheet.getTitle());\n+            eventPublisher.publishEvent(logEvent);\n+        }\n+        return createdSheet;\n+    }\n+\n+    @Override\n+    public Sheet createBy(Sheet sheet, Set<SheetMeta> sheetMetas, boolean autoSave) {\n+        Sheet createdSheet = createOrUpdateBy(sheet);\n \n         // Create sheet meta data\n         List<SheetMeta> sheetMetaList = sheetMetaService.createOrUpdateByPostId(sheet.getId(), sheetMetas);\n@@ -80,6 +91,17 @@ public Sheet createBy(Sheet sheet, boolean autoSave) {\n     @Override\n     public Sheet updateBy(Sheet sheet, boolean autoSave) {\n         Sheet updatedSheet = createOrUpdateBy(sheet);\n+        if (!autoSave) {\n+            // Log the creation\n+            LogEvent logEvent = new LogEvent(this, updatedSheet.getId().toString(), LogType.SHEET_EDITED, updatedSheet.getTitle());\n+            eventPublisher.publishEvent(logEvent);\n+        }\n+        return updatedSheet;\n+    }\n+\n+    @Override\n+    public Sheet updateBy(Sheet sheet, Set<SheetMeta> sheetMetas, boolean autoSave) {\n+        Sheet updatedSheet = createOrUpdateBy(sheet);\n \n         // Create sheet meta data\n         List<SheetMeta> sheetMetaList = sheetMetaService.createOrUpdateByPostId(updatedSheet.getId(), sheetMetas);",
    "output": "Resolve conflict"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/ContentArchiveController.java b/src/main/java/run/halo/app/controller/content/ContentArchiveController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentArchiveController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentArchiveController.java\n@@ -13,7 +13,9 @@\n import org.springframework.web.bind.annotation.*;\n import run.halo.app.cache.StringCacheStore;\n import run.halo.app.cache.lock.CacheLock;\n+import run.halo.app.exception.BadRequestException;\n import run.halo.app.exception.ForbiddenException;\n+import run.halo.app.exception.NotFoundException;\n import run.halo.app.model.entity.Category;\n import run.halo.app.model.entity.Post;\n import run.halo.app.model.entity.PostMeta;\n@@ -128,7 +130,7 @@ public String post(@PathVariable(\"url\") String url,\n                        Model model) {\n         Post post;\n         if (preview) {\n-            post = postService.getBy(PostStatus.DRAFT, url);\n+            post = postService.getByUrl(url);\n         } else if (intimate) {\n             post = postService.getBy(PostStatus.INTIMATE, url);\n         } else {\n@@ -141,10 +143,10 @@ public String post(@PathVariable(\"url\") String url,\n             post.setFormatContent(MarkdownUtils.renderHtml(post.getOriginalContent()));\n \n             // verify token\n-            String cachedToken = cacheStore.getAny(\"preview-post-token-\" + post.getId(), String.class).orElseThrow(() -> new ForbiddenException(\"该文章的预览链接不存在或已过期\"));\n+            String cachedToken = cacheStore.getAny(\"preview-post-token-\" + post.getId(), String.class).orElseThrow(() -> new NotFoundException(\"该文章的预览链接不存在或已过期\"));\n \n             if (!cachedToken.equals(token)) {\n-                throw new ForbiddenException(\"该文章的预览链接不存在或已过期\");\n+                throw new BadRequestException(\"预览 Token 错误\");\n             }\n         }\n \n\ndiff --git a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n@@ -154,10 +154,16 @@ public PostDetailVO updateBy(Post postToUpdate, Set<Integer> tagIds, Set<Integer\n     public Post getBy(PostStatus status, String url) {\n         Post post = super.getBy(status, url);\n \n-        if (PostStatus.PUBLISHED.equals(status)) {\n-            // Log it\n-            eventPublisher.publishEvent(new PostVisitEvent(this, post.getId()));\n-        }\n+        fireVisitEvent(post.getId());\n+\n+        return post;\n+    }\n+\n+    @Override\n+    public Post getByUrl(String url) {\n+        Post post = super.getByUrl(url);\n+\n+        fireVisitEvent(post.getId());\n \n         return post;\n     }\n@@ -580,4 +586,8 @@ private PostDetailVO createOrUpdate(@NonNull Post post, Set<Integer> tagIds, Set\n         // Convert to post detail vo\n         return convertTo(post, tags, categories, postMetaList);\n     }\n+\n+    private void fireVisitEvent(@NonNull Integer postId) {\n+        eventPublisher.publishEvent(new PostVisitEvent(this, postId));\n+    }\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java b/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n@@ -64,17 +64,6 @@ public SheetServiceImpl(SheetRepository sheetRepository,\n     @Override\n     public Sheet createBy(Sheet sheet, boolean autoSave) {\n         Sheet createdSheet = createOrUpdateBy(sheet);\n-        if (!autoSave) {\n-            // Log the creation\n-            LogEvent logEvent = new LogEvent(this, createdSheet.getId().toString(), LogType.SHEET_PUBLISHED, createdSheet.getTitle());\n-            eventPublisher.publishEvent(logEvent);\n-        }\n-        return createdSheet;\n-    }\n-\n-    @Override\n-    public Sheet createBy(Sheet sheet, Set<SheetMeta> sheetMetas, boolean autoSave) {\n-        Sheet createdSheet = createOrUpdateBy(sheet);\n \n         // Create sheet meta data\n         List<SheetMeta> sheetMetaList = sheetMetaService.createOrUpdateByPostId(sheet.getId(), sheetMetas);\n@@ -91,18 +80,6 @@ public Sheet createBy(Sheet sheet, Set<SheetMeta> sheetMetas, boolean autoSave)\n     @Override\n     public Sheet updateBy(Sheet sheet, boolean autoSave) {\n         Sheet updatedSheet = createOrUpdateBy(sheet);\n-        if (!autoSave) {\n-            // Log the creation\n-            LogEvent logEvent = new LogEvent(this, updatedSheet.getId().toString(), LogType.SHEET_EDITED, updatedSheet.getTitle());\n-            eventPublisher.publishEvent(logEvent);\n-        }\n-        return updatedSheet;\n-    }\n-\n-    @Override\n-    public Sheet updateBy(Sheet sheet, Set<SheetMeta> sheetMetas, boolean autoSave) {\n-\n-        Sheet updatedSheet = createOrUpdateBy(sheet);\n \n         // Create sheet meta data\n         List<SheetMeta> sheetMetaList = sheetMetaService.createOrUpdateByPostId(updatedSheet.getId(), sheetMetas);\n@@ -127,7 +104,11 @@ public Page<Sheet> pageBy(Pageable pageable) {\n     public Sheet getByUrl(String url) {\n         Assert.hasText(url, \"Url must not be blank\");\n \n-        return sheetRepository.getByUrl(url).orElseThrow(() -> new NotFoundException(\"查询不到该页面的信息\").setErrorData(url));\n+        Sheet sheet = sheetRepository.getByUrl(url).orElseThrow(() -> new NotFoundException(\"查询不到该页面的信息\").setErrorData(url));\n+\n+        fireVisitEvent(sheet.getId());\n+\n+        return sheet;\n     }\n \n     @Override\n@@ -139,10 +120,7 @@ public Sheet getBy(PostStatus status, String url) {\n \n         Sheet sheet = postOptional.orElseThrow(() -> new NotFoundException(\"查询不到该页面的信息\").setErrorData(url));\n \n-        if (PostStatus.PUBLISHED.equals(status)) {\n-            // Log it\n-            eventPublisher.publishEvent(new SheetVisitEvent(this, sheet.getId()));\n-        }\n+        fireVisitEvent(sheet.getId());\n \n         return sheet;\n     }\n@@ -249,6 +227,10 @@ public Page<SheetListVO> convertToListVo(Page<Sheet> sheetPage) {\n         });\n     }\n \n+    private void fireVisitEvent(@NonNull Integer sheetId) {\n+        eventPublisher.publishEvent(new SheetVisitEvent(this, sheetId));\n+    }\n+\n     @Override\n     public SheetDetailVO convertToDetailVo(Sheet sheet) {\n         // List sheetMetas",
    "output": "Fix visit event ingore"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/PostController.java b/src/main/java/run/halo/app/controller/admin/api/PostController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/PostController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/PostController.java\n@@ -55,13 +55,8 @@ public PostController(PostService postService,\n \n     @GetMapping\n     @ApiOperation(\"Lists posts\")\n-    public Page<PostListVO> pageBy(Integer page, Integer size,\n-                                   @SortDefault.SortDefaults({\n-                                           @SortDefault(sort = \"topPriority\", direction = DESC),\n-                                           @SortDefault(sort = \"createTime\", direction = DESC)\n-                                   }) Sort sort,\n+    public Page<PostListVO> pageBy(@PageableDefault(sort = {\"topPriority\", \"createTime\"}, direction = DESC) Pageable pageable,\n                                    PostQuery postQuery) {\n-        Pageable pageable = PageRequest.of(page, size, sort);\n         Page<Post> postPage = postService.pageBy(postQuery, pageable);\n         return postService.convertToListVo(postPage);\n     }",
    "output": "Fix null error while unset page or size"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/entity/BasePost.java b/src/main/java/run/halo/app/model/entity/BasePost.java\n--- a/src/main/java/run/halo/app/model/entity/BasePost.java\n+++ b/src/main/java/run/halo/app/model/entity/BasePost.java\n@@ -170,6 +170,10 @@ public void prePersist() {\n             likes = 0L;\n         }\n \n+        if (originalContent == null) {\n+            originalContent = \"\";\n+        }\n+\n         if (formatContent == null) {\n             formatContent = \"\";\n         }\n\ndiff --git a/src/main/java/run/halo/app/model/params/PostParam.java b/src/main/java/run/halo/app/model/params/PostParam.java\n--- a/src/main/java/run/halo/app/model/params/PostParam.java\n+++ b/src/main/java/run/halo/app/model/params/PostParam.java\n@@ -36,7 +36,6 @@ public class PostParam implements InputConverter<Post> {\n \n     private String url;\n \n-    @NotBlank(message = \"文章内容不能为空\")\n     private String originalContent;\n \n     private String summary;\n\ndiff --git a/src/main/java/run/halo/app/model/params/SheetParam.java b/src/main/java/run/halo/app/model/params/SheetParam.java\n--- a/src/main/java/run/halo/app/model/params/SheetParam.java\n+++ b/src/main/java/run/halo/app/model/params/SheetParam.java\n@@ -30,7 +30,6 @@ public class SheetParam implements InputConverter<Sheet> {\n \n     private String url;\n \n-    @NotBlank(message = \"页面内容不能为空\")\n     private String originalContent;\n \n     @Size(max = 255, message = \"页面缩略图链接的字符长度不能超过 {max}\")",
    "output": "feat: #412"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/Application.java b/src/main/java/run/halo/app/Application.java\n--- a/src/main/java/run/halo/app/Application.java\n+++ b/src/main/java/run/halo/app/Application.java\n@@ -1,9 +1,11 @@\n package run.halo.app;\n \n+import org.springframework.boot.ApplicationArguments;\n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n import org.springframework.boot.builder.SpringApplicationBuilder;\n import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;\n+import org.springframework.context.ConfigurableApplicationContext;\n import org.springframework.data.jpa.repository.config.EnableJpaAuditing;\n import org.springframework.data.jpa.repository.config.EnableJpaRepositories;\n import org.springframework.scheduling.annotation.EnableAsync;\n@@ -25,12 +27,29 @@\n @EnableJpaRepositories(basePackages = \"run.halo.app.repository\", repositoryBaseClass = BaseRepositoryImpl.class)\n public class Application extends SpringBootServletInitializer {\n \n+    private static ConfigurableApplicationContext context;\n+\n     public static void main(String[] args) {\n         // Customize the spring config location\n         System.setProperty(\"spring.config.additional-location\", \"file:${user.home}/.halo/,file:${user.home}/halo-dev/\");\n \n         // Run application\n-        SpringApplication.run(Application.class, args);\n+        context = SpringApplication.run(Application.class, args);\n+    }\n+\n+    /**\n+     * Restart Application.\n+     */\n+    public static void restart() {\n+        ApplicationArguments args = context.getBean(ApplicationArguments.class);\n+\n+        Thread thread = new Thread(() -> {\n+            context.close();\n+            context = SpringApplication.run(Application.class, args.getSourceArgs());\n+        });\n+\n+        thread.setDaemon(false);\n+        thread.start();\n     }\n \n     @Override\n\ndiff --git a/src/main/java/run/halo/app/controller/admin/api/AdminController.java b/src/main/java/run/halo/app/controller/admin/api/AdminController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/AdminController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/AdminController.java\n@@ -4,6 +4,7 @@\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.http.HttpStatus;\n import org.springframework.web.bind.annotation.*;\n+import run.halo.app.Application;\n import run.halo.app.cache.lock.CacheLock;\n import run.halo.app.model.dto.EnvironmentDTO;\n import run.halo.app.model.dto.StatisticDTO;\n@@ -100,9 +101,20 @@ public void updateAdmin() {\n         adminService.updateAdminAssets();\n     }\n \n-    @GetMapping(\"spring/logs\")\n-    @ApiOperation(\"Get application logs\")\n-    public BaseResponse<String> getSpringLogs() {\n-        return BaseResponse.ok(HttpStatus.OK.getReasonPhrase(), adminService.getSpringLogs());\n+    @GetMapping(\"spring/application.yaml\")\n+    @ApiOperation(\"Get application config content\")\n+    public BaseResponse<String> getSpringApplicationConfig() {\n+        return BaseResponse.ok(HttpStatus.OK.getReasonPhrase(), adminService.getApplicationConfig());\n+    }\n+\n+    @PutMapping(\"spring/application.yaml/update\")\n+    @ApiOperation(\"Update application config content\")\n+    public void updateSpringApplicationConfig(@RequestParam(name = \"content\") String content) {\n+        adminService.updateApplicationConfig(content);\n+    }\n+\n+    @PostMapping(\"/spring/restart\")\n+    public void restartApplication() {\n+        Application.restart();\n     }\n }\n\ndiff --git a/src/main/java/run/halo/app/service/AdminService.java b/src/main/java/run/halo/app/service/AdminService.java\n--- a/src/main/java/run/halo/app/service/AdminService.java\n+++ b/src/main/java/run/halo/app/service/AdminService.java\n@@ -23,7 +23,7 @@ public interface AdminService {\n \n     int REFRESH_TOKEN_EXPIRED_DAYS = 30;\n \n-    String LOGS_PATH = \"logs/spring.log\";\n+    String APPLICATION_CONFIG_NAME = \"application.yaml\";\n \n     /**\n      * Authenticates.\n@@ -84,9 +84,16 @@ public interface AdminService {\n     void updateAdminAssets();\n \n     /**\n-     * Get spring logs.\n+     * Get application.yaml content.\n      *\n-     * @return recently logs.\n+     * @return application.yaml content\n      */\n-    String getSpringLogs();\n+    String getApplicationConfig();\n+\n+    /**\n+     * Save application.yaml content.\n+     *\n+     * @param content new content\n+     */\n+    void updateApplicationConfig(String content);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n@@ -40,6 +40,8 @@\n import java.io.File;\n import java.io.IOException;\n import java.lang.management.ManagementFactory;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n import java.util.List;\n@@ -443,12 +445,22 @@ private AuthToken buildAuthToken(@NonNull User user) {\n     }\n \n     @Override\n-    public String getSpringLogs() {\n-        File file = new File(haloProperties.getWorkDir(), LOGS_PATH);\n+    public String getApplicationConfig() {\n+        File file = new File(haloProperties.getWorkDir(), APPLICATION_CONFIG_NAME);\n         if (!file.exists()) {\n-            return \"暂无日志\";\n+            return \"\";\n         }\n         FileReader reader = new FileReader(file);\n         return reader.readString();\n     }\n+\n+    @Override\n+    public void updateApplicationConfig(String content) {\n+        Path path = Paths.get(haloProperties.getWorkDir(), APPLICATION_CONFIG_NAME);\n+        try {\n+            Files.write(path, content.getBytes(StandardCharsets.UTF_8));\n+        } catch (IOException e) {\n+            throw new ServiceException(\"保存配置文件失败\", e);\n+        }\n+    }\n }",
    "output": "feat support restart application api."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/entity/Option.java b/src/main/java/run/halo/app/model/entity/Option.java\n--- a/src/main/java/run/halo/app/model/entity/Option.java\n+++ b/src/main/java/run/halo/app/model/entity/Option.java\n@@ -45,6 +45,11 @@ public class Option extends BaseEntity {\n     @Column(name = \"option_value\", columnDefinition = \"varchar(1023) not null\")\n     private String value;\n \n+    public Option(String key, String value) {\n+        this.key = key;\n+        this.value = value;\n+    }\n+\n     public Option(OptionType type, String key, String value) {\n         this.type = type;\n         this.key = key;",
    "output": "Overload the constructor of Option entity"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/AttachmentController.java b/src/main/java/run/halo/app/controller/admin/api/AttachmentController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/AttachmentController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/AttachmentController.java\n@@ -7,6 +7,7 @@\n import org.springframework.http.MediaType;\n import org.springframework.web.bind.annotation.*;\n import org.springframework.web.multipart.MultipartFile;\n+import run.halo.app.cache.lock.CacheLock;\n import run.halo.app.model.dto.AttachmentDTO;\n import run.halo.app.model.entity.Attachment;\n import run.halo.app.model.params.AttachmentParam;\n@@ -75,11 +76,17 @@ public AttachmentDTO updateBy(@PathVariable(\"attachmentId\") Integer attachmentId\n      * @param id id\n      */\n     @DeleteMapping(\"{id:\\\\d+}\")\n-    @ApiOperation(\"Delete attachment by id\")\n+    @ApiOperation(\"Delete attachment permanently by id\")\n     public AttachmentDTO deletePermanently(@PathVariable(\"id\") Integer id) {\n         return attachmentService.convertToDto(attachmentService.removePermanently(id));\n     }\n \n+    @DeleteMapping\n+    @ApiOperation(\"Delete attachments permanently in batch by id array\")\n+    public List<Attachment> deletePermanentlyInBatch(@RequestBody List<Integer> ids) {\n+        return attachmentService.removePermanently(ids);\n+    }\n+\n     @PostMapping(\"upload\")\n     @ApiOperation(\"Uploads single file\")\n     public AttachmentDTO uploadAttachment(@RequestPart(\"file\") MultipartFile file) {\n\ndiff --git a/src/main/java/run/halo/app/service/AttachmentService.java b/src/main/java/run/halo/app/service/AttachmentService.java\n--- a/src/main/java/run/halo/app/service/AttachmentService.java\n+++ b/src/main/java/run/halo/app/service/AttachmentService.java\n@@ -10,6 +10,7 @@\n import run.halo.app.model.params.AttachmentQuery;\n import run.halo.app.service.base.CrudService;\n \n+import java.util.Collection;\n import java.util.List;\n \n \n@@ -49,6 +50,15 @@ public interface AttachmentService extends CrudService<Attachment, Integer> {\n     @NonNull\n     Attachment removePermanently(@NonNull Integer id);\n \n+    /**\n+     * Removes attachment permanently in batch.\n+     *\n+     * @param ids attachment ids must not be null\n+     * @return attachment detail list deleted\n+     */\n+    @NonNull\n+    List<Attachment> removePermanently(@NonNull Collection<Integer> ids);\n+\n     /**\n      * Converts to attachment output dto.\n      *\n\ndiff --git a/src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java b/src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java\n@@ -6,8 +6,10 @@\n import org.springframework.data.domain.Pageable;\n import org.springframework.data.jpa.domain.Specification;\n import org.springframework.lang.NonNull;\n+import org.springframework.lang.Nullable;\n import org.springframework.stereotype.Service;\n import org.springframework.util.Assert;\n+import org.springframework.util.CollectionUtils;\n import org.springframework.web.multipart.MultipartFile;\n import run.halo.app.exception.AlreadyExistsException;\n import run.halo.app.handler.file.FileHandlers;\n@@ -22,11 +24,11 @@\n import run.halo.app.service.OptionService;\n import run.halo.app.service.base.AbstractCrudService;\n import run.halo.app.utils.HaloUtils;\n+import run.halo.app.utils.ServiceUtils;\n \n import javax.persistence.criteria.Predicate;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Objects;\n+import java.util.*;\n+import java.util.stream.Collectors;\n \n /**\n  * AttachmentService implementation\n@@ -140,6 +142,15 @@ public Attachment removePermanently(Integer id) {\n         return deletedAttachment;\n     }\n \n+    @Override\n+    public List<Attachment> removePermanently(@Nullable Collection<Integer> ids) {\n+        if (CollectionUtils.isEmpty(ids)) {\n+            return Collections.emptyList();\n+        }\n+\n+        return ids.stream().map(this::removePermanently).collect(Collectors.toList());\n+    }\n+\n     @Override\n     public AttachmentDTO convertToDto(Attachment attachment) {\n         Assert.notNull(attachment, \"Attachment must not be null\");",
    "output": "Merge branch 'dev' of github.com:halo-dev/halo into dev"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/OptionController.java b/src/main/java/run/halo/app/controller/admin/api/OptionController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/OptionController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/OptionController.java\n@@ -7,7 +7,8 @@\n import org.springframework.util.CollectionUtils;\n import org.springframework.web.bind.annotation.*;\n import run.halo.app.model.dto.OptionDTO;\n-import run.halo.app.model.dto.OptionListDTO;\n+import run.halo.app.model.dto.OptionSimpleDTO;\n+import run.halo.app.model.entity.Option;\n import run.halo.app.model.params.OptionParam;\n import run.halo.app.model.params.OptionQuery;\n import run.halo.app.service.OptionService;\n@@ -57,11 +58,37 @@ public Map<String, Object> listAllWithMapView(@RequestParam(value = \"key[]\", req\n \n     @GetMapping(\"list_view\")\n     @ApiOperation(\"Lists all options with list view\")\n-    public Page<OptionListDTO> listAllWithListView(@PageableDefault(sort = \"updateTime\", direction = DESC) Pageable pageable,\n-                                                   OptionQuery optionQuery) {\n+    public Page<OptionSimpleDTO> listAllWithListView(@PageableDefault(sort = \"updateTime\", direction = DESC) Pageable pageable,\n+                                                     OptionQuery optionQuery) {\n         return optionService.pageDtosBy(pageable, optionQuery);\n     }\n \n+    @GetMapping(\"{id:\\\\d+}\")\n+    @ApiOperation(\"Get option detail by id\")\n+    public OptionSimpleDTO getBy(@PathVariable(\"id\") Integer id) {\n+        Option option = optionService.getById(id);\n+        return optionService.convertToDto(option);\n+    }\n+\n+    @PostMapping\n+    @ApiOperation(\"Creates option\")\n+    public void createBy(@RequestBody @Valid OptionParam optionParam) {\n+        optionService.save(optionParam);\n+    }\n+\n+    @PutMapping(\"{optionId:\\\\d+}\")\n+    @ApiOperation(\"Updates option\")\n+    public void updateBy(@PathVariable(\"optionId\") Integer optionId,\n+                         @RequestBody @Valid OptionParam optionParam) {\n+        optionService.update(optionId, optionParam);\n+    }\n+\n+    @DeleteMapping(\"{optionId:\\\\d+}\")\n+    @ApiOperation(\"Deletes option\")\n+    public void deletePermanently(@PathVariable(\"optionId\") Integer optionId) {\n+        optionService.removePermanently(optionId);\n+    }\n+\n     @PostMapping(\"map_view/saving\")\n     @ApiOperation(\"Saves options by option map\")\n     public void saveOptionsWithMapView(@RequestBody Map<String, Object> optionMap) {\n\ndiff --git a/src/main/java/run/halo/app/model/dto/OptionSimpleDTO.java b/src/main/java/run/halo/app/model/dto/OptionSimpleDTO.java\n--- a/src/main/java/run/halo/app/model/dto/OptionSimpleDTO.java\n+++ b/src/main/java/run/halo/app/model/dto/OptionSimpleDTO.java\n@@ -14,7 +14,9 @@\n  */\n @EqualsAndHashCode(callSuper = true)\n @Data\n-public class OptionListDTO extends OptionDTO {\n+public class OptionSimpleDTO extends OptionDTO {\n+\n+    private Integer id;\n \n     private OptionType type;\n \n\ndiff --git a/src/main/java/run/halo/app/service/OptionService.java b/src/main/java/run/halo/app/service/OptionService.java\n--- a/src/main/java/run/halo/app/service/OptionService.java\n+++ b/src/main/java/run/halo/app/service/OptionService.java\n@@ -8,7 +8,7 @@\n import org.springframework.transaction.annotation.Transactional;\n import run.halo.app.exception.MissingPropertyException;\n import run.halo.app.model.dto.OptionDTO;\n-import run.halo.app.model.dto.OptionListDTO;\n+import run.halo.app.model.dto.OptionSimpleDTO;\n import run.halo.app.model.entity.Option;\n import run.halo.app.model.enums.ValueEnum;\n import run.halo.app.model.params.OptionParam;\n@@ -46,13 +46,28 @@ public interface OptionService extends CrudService<Option, Integer> {\n     void save(@Nullable Map<String, Object> options);\n \n     /**\n-     * SAve multiple options\n+     * Save multiple options\n      *\n      * @param optionParams option params\n      */\n     @Transactional\n     void save(@Nullable List<OptionParam> optionParams);\n \n+    /**\n+     * Save single option.\n+     *\n+     * @param optionParam option param\n+     */\n+    void save(@Nullable OptionParam optionParam);\n+\n+    /**\n+     * Update option by id.\n+     *\n+     * @param optionId    option id must not be null.\n+     * @param optionParam option param must not be null.\n+     */\n+    void update(@NonNull Integer optionId, @NonNull OptionParam optionParam);\n+\n     /**\n      * Saves a property.\n      *\n@@ -103,7 +118,16 @@ public interface OptionService extends CrudService<Option, Integer> {\n      * @param optionQuery optionQuery\n      * @return a page of option output dto\n      */\n-    Page<OptionListDTO> pageDtosBy(@NonNull Pageable pageable, OptionQuery optionQuery);\n+    Page<OptionSimpleDTO> pageDtosBy(@NonNull Pageable pageable, OptionQuery optionQuery);\n+\n+    /**\n+     * Removes option permanently.\n+     *\n+     * @param id option id must not be null\n+     * @return option detail deleted\n+     */\n+    @NonNull\n+    Option removePermanently(@NonNull Integer id);\n \n     /**\n      * Get option by key\n@@ -321,5 +345,5 @@ public interface OptionService extends CrudService<Option, Integer> {\n      * @return an option output dto\n      */\n     @NonNull\n-    OptionListDTO convertToDto(@NonNull Option option);\n+    OptionSimpleDTO convertToDto(@NonNull Option option);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java b/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n@@ -20,7 +20,7 @@\n import run.halo.app.event.options.OptionUpdatedEvent;\n import run.halo.app.exception.MissingPropertyException;\n import run.halo.app.model.dto.OptionDTO;\n-import run.halo.app.model.dto.OptionListDTO;\n+import run.halo.app.model.dto.OptionSimpleDTO;\n import run.halo.app.model.entity.Option;\n import run.halo.app.model.enums.ValueEnum;\n import run.halo.app.model.params.OptionParam;\n@@ -130,6 +130,21 @@ public void save(List<OptionParam> optionParams) {\n         save(optionMap);\n     }\n \n+    @Override\n+    public void save(OptionParam optionParam) {\n+        Option option = optionParam.convertTo();\n+        create(option);\n+        publishOptionUpdatedEvent();\n+    }\n+\n+    @Override\n+    public void update(Integer optionId, OptionParam optionParam) {\n+        Option optionToUpdate = getById(optionId);\n+        optionParam.update(optionToUpdate);\n+        update(optionToUpdate);\n+        publishOptionUpdatedEvent();\n+    }\n+\n     @Override\n     public void saveProperty(PropertyEnum property, String value) {\n         Assert.notNull(property, \"Property must not be null\");\n@@ -221,14 +236,21 @@ public List<OptionDTO> listDtos() {\n     }\n \n     @Override\n-    public Page<OptionListDTO> pageDtosBy(Pageable pageable, OptionQuery optionQuery) {\n+    public Page<OptionSimpleDTO> pageDtosBy(Pageable pageable, OptionQuery optionQuery) {\n         Assert.notNull(pageable, \"Page info must not be null\");\n \n         Page<Option> optionPage = optionRepository.findAll(buildSpecByQuery(optionQuery), pageable);\n \n         return optionPage.map(this::convertToDto);\n     }\n \n+    @Override\n+    public Option removePermanently(Integer id) {\n+        Option deletedOption = removeById(id);\n+        publishOptionUpdatedEvent();\n+        return deletedOption;\n+    }\n+\n     @NonNull\n     private Specification<Option> buildSpecByQuery(@NonNull OptionQuery optionQuery) {\n         Assert.notNull(optionQuery, \"Option query must not be null\");\n@@ -439,10 +461,10 @@ public long getBirthday() {\n     }\n \n     @Override\n-    public OptionListDTO convertToDto(Option option) {\n+    public OptionSimpleDTO convertToDto(Option option) {\n         Assert.notNull(option, \"Option must not be null\");\n \n-        return new OptionListDTO().convertFrom(option);\n+        return new OptionSimpleDTO().convertFrom(option);\n     }\n \n     private void cleanCache() {",
    "output": "feat: add some api for option."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/AttachmentController.java b/src/main/java/run/halo/app/controller/admin/api/AttachmentController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/AttachmentController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/AttachmentController.java\n@@ -7,6 +7,7 @@\n import org.springframework.http.MediaType;\n import org.springframework.web.bind.annotation.*;\n import org.springframework.web.multipart.MultipartFile;\n+import run.halo.app.cache.lock.CacheLock;\n import run.halo.app.model.dto.AttachmentDTO;\n import run.halo.app.model.entity.Attachment;\n import run.halo.app.model.params.AttachmentParam;\n@@ -75,11 +76,17 @@ public AttachmentDTO updateBy(@PathVariable(\"attachmentId\") Integer attachmentId\n      * @param id id\n      */\n     @DeleteMapping(\"{id:\\\\d+}\")\n-    @ApiOperation(\"Delete attachment by id\")\n+    @ApiOperation(\"Delete attachment permanently by id\")\n     public AttachmentDTO deletePermanently(@PathVariable(\"id\") Integer id) {\n         return attachmentService.convertToDto(attachmentService.removePermanently(id));\n     }\n \n+    @DeleteMapping\n+    @ApiOperation(\"Delete attachments permanently in batch by id array\")\n+    public List<Attachment> deletePermanentlyInBatch(@RequestBody List<Integer> ids) {\n+        return attachmentService.removePermanently(ids);\n+    }\n+\n     @PostMapping(\"upload\")\n     @ApiOperation(\"Uploads single file\")\n     public AttachmentDTO uploadAttachment(@RequestPart(\"file\") MultipartFile file) {\n\ndiff --git a/src/main/java/run/halo/app/service/AttachmentService.java b/src/main/java/run/halo/app/service/AttachmentService.java\n--- a/src/main/java/run/halo/app/service/AttachmentService.java\n+++ b/src/main/java/run/halo/app/service/AttachmentService.java\n@@ -10,6 +10,7 @@\n import run.halo.app.model.params.AttachmentQuery;\n import run.halo.app.service.base.CrudService;\n \n+import java.util.Collection;\n import java.util.List;\n \n \n@@ -49,6 +50,15 @@ public interface AttachmentService extends CrudService<Attachment, Integer> {\n     @NonNull\n     Attachment removePermanently(@NonNull Integer id);\n \n+    /**\n+     * Removes attachment permanently in batch.\n+     *\n+     * @param ids attachment ids must not be null\n+     * @return attachment detail list deleted\n+     */\n+    @NonNull\n+    List<Attachment> removePermanently(@NonNull Collection<Integer> ids);\n+\n     /**\n      * Converts to attachment output dto.\n      *\n\ndiff --git a/src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java b/src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java\n@@ -6,8 +6,10 @@\n import org.springframework.data.domain.Pageable;\n import org.springframework.data.jpa.domain.Specification;\n import org.springframework.lang.NonNull;\n+import org.springframework.lang.Nullable;\n import org.springframework.stereotype.Service;\n import org.springframework.util.Assert;\n+import org.springframework.util.CollectionUtils;\n import org.springframework.web.multipart.MultipartFile;\n import run.halo.app.exception.AlreadyExistsException;\n import run.halo.app.handler.file.FileHandlers;\n@@ -22,11 +24,11 @@\n import run.halo.app.service.OptionService;\n import run.halo.app.service.base.AbstractCrudService;\n import run.halo.app.utils.HaloUtils;\n+import run.halo.app.utils.ServiceUtils;\n \n import javax.persistence.criteria.Predicate;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Objects;\n+import java.util.*;\n+import java.util.stream.Collectors;\n \n /**\n  * AttachmentService implementation\n@@ -140,6 +142,15 @@ public Attachment removePermanently(Integer id) {\n         return deletedAttachment;\n     }\n \n+    @Override\n+    public List<Attachment> removePermanently(@Nullable Collection<Integer> ids) {\n+        if (CollectionUtils.isEmpty(ids)) {\n+            return Collections.emptyList();\n+        }\n+\n+        return ids.stream().map(this::removePermanently).collect(Collectors.toList());\n+    }\n+\n     @Override\n     public AttachmentDTO convertToDto(Attachment attachment) {\n         Assert.notNull(attachment, \"Attachment must not be null\");",
    "output": "Add api: delete attachments permanently in batch"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/handler/theme/config/impl/YamlThemeConfigResolverImpl.java b/src/main/java/run/halo/app/handler/theme/config/impl/YamlThemeConfigResolverImpl.java\n--- a/src/main/java/run/halo/app/handler/theme/config/impl/YamlThemeConfigResolverImpl.java\n+++ b/src/main/java/run/halo/app/handler/theme/config/impl/YamlThemeConfigResolverImpl.java\n@@ -22,7 +22,8 @@\n  * Theme configuration resolver.\n  *\n  * @author johnniang\n- * @date 4/10/19\n+ * @author ryanwang\n+ * @date 2019-04-10\n  */\n @Slf4j\n @Service\n@@ -116,6 +117,7 @@ private List<Item> handleItems(@Nullable Object items) {\n                 item.setType(InputType.typeOf(itemMap.get(\"type\")));\n                 item.setDefaultValue(itemMap.get(\"default\"));\n                 item.setPlaceholder(itemMap.getOrDefault(\"placeholder\", \"\").toString());\n+                item.setDescription(itemMap.getOrDefault(\"description\", \"\").toString());\n \n                 // Handle options\n                 item.setOptions(handleOptions(itemMap.get(\"options\")));\n@@ -142,6 +144,7 @@ private List<Item> handleItems(@Nullable Object items) {\n                 item.setType(InputType.typeOf(itemMap.get(\"type\")));\n                 item.setDefaultValue(itemMap.get(\"default\"));\n                 item.setPlaceholder(itemMap.getOrDefault(\"placeholder\", \"\").toString());\n+                item.setDescription(itemMap.getOrDefault(\"description\", \"\").toString());\n \n                 // Handle options\n                 item.setOptions(handleOptions(itemMap.get(\"options\")));\n\ndiff --git a/src/main/java/run/halo/app/handler/theme/config/support/Item.java b/src/main/java/run/halo/app/handler/theme/config/support/Item.java\n--- a/src/main/java/run/halo/app/handler/theme/config/support/Item.java\n+++ b/src/main/java/run/halo/app/handler/theme/config/support/Item.java\n@@ -11,7 +11,8 @@\n  * Theme configuration: item entity\n  *\n  * @author johnniang\n- * @date 4/10/19\n+ * @author ryanwang\n+ * @date 2019-04-10\n  */\n @Data\n public class Item {\n@@ -46,6 +47,11 @@ public class Item {\n      */\n     private String placeholder;\n \n+    /**\n+     * Text item description.\n+     */\n+    private String description;\n+\n     /**\n      * Item's options, default is empty list\n      */",
    "output": "feat: add description field for theme setting."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/PostMetaService.java b/src/main/java/run/halo/app/service/PostMetaService.java\n--- a/src/main/java/run/halo/app/service/PostMetaService.java\n+++ b/src/main/java/run/halo/app/service/PostMetaService.java\n@@ -26,7 +26,7 @@ public interface PostMetaService extends BaseMetaService<PostMeta> {\n      * @param postMetas post metas must not be null\n      * @return a list of post meta\n      */\n-    List<PostMeta> createOrUpdateByPostId(@NonNull Integer postId, @NonNull Set<PostMeta> postMetas);\n+    List<PostMeta> createOrUpdateByPostId(@NonNull Integer postId, Set<PostMeta> postMetas);\n \n     /**\n      * Lists post metas by post id.\n\ndiff --git a/src/main/java/run/halo/app/service/impl/PostMetaServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostMetaServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostMetaServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostMetaServiceImpl.java\n@@ -47,7 +47,6 @@ public void validateTarget(Integer postId) {\n     @Override\n     public List<PostMeta> createOrUpdateByPostId(Integer postId, Set<PostMeta> postMetas) {\n         Assert.notNull(postId, \"Post id must not be null\");\n-        Assert.notNull(postMetas, \"Post metas must not be null\");\n         if (CollectionUtils.isEmpty(postMetas)) {\n             return Collections.emptyList();\n         }",
    "output": "fix: markdownImportTest error."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n@@ -557,6 +557,8 @@ private PostDetailVO createOrUpdate(@NonNull Post post, Set<Integer> tagIds, Set\n \n         postCategoryService.removeByPostId(post.getId());\n \n+        postMetaService.removeByPostId(post.getId());\n+\n         // List all tags\n         List<Tag> tags = tagService.listAllByIds(tagIds);\n ",
    "output": "fix: can not delete post meta."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/core/freemarker/tag/MenuTagDirective.java b/src/main/java/run/halo/app/core/freemarker/tag/MenuTagDirective.java\n--- a/src/main/java/run/halo/app/core/freemarker/tag/MenuTagDirective.java\n+++ b/src/main/java/run/halo/app/core/freemarker/tag/MenuTagDirective.java\n@@ -50,6 +50,10 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars, Templ\n                     String team = params.get(\"team\").toString();\n                     env.setVariable(\"menus\", builder.build().wrap(menuService.listByTeam(team, Sort.by(DESC, \"priority\"))));\n                     break;\n+                case \"treeByTeam\":\n+                    String treeTeam = params.get(\"team\").toString();\n+                    env.setVariable(\"menus\", builder.build().wrap(menuService.listByTeamAsTree(treeTeam, Sort.by(DESC, \"priority\"))));\n+                    break;\n                 case \"count\":\n                     env.setVariable(\"count\", builder.build().wrap(menuService.count()));\n                     break;\n\ndiff --git a/src/main/java/run/halo/app/service/MenuService.java b/src/main/java/run/halo/app/service/MenuService.java\n--- a/src/main/java/run/halo/app/service/MenuService.java\n+++ b/src/main/java/run/halo/app/service/MenuService.java\n@@ -47,6 +47,15 @@ public interface MenuService extends CrudService<Menu, Integer> {\n      */\n     List<MenuDTO> listByTeam(@NonNull String team, Sort sort);\n \n+    /**\n+     * List menus by team as tree.\n+     *\n+     * @param team team\n+     * @param sort sort\n+     * @return list of tree menus\n+     */\n+    List<MenuVO> listByTeamAsTree(@NonNull String team, Sort sort);\n+\n     /**\n      * Creates a menu.\n      *\n@@ -62,7 +71,7 @@ public interface MenuService extends CrudService<Menu, Integer> {\n      * @param sort sort info must not be null\n      * @return a menu tree\n      */\n-    List<MenuVO> listAsTree(Sort sort);\n+    List<MenuVO> listAsTree(@NonNull Sort sort);\n \n     /**\n      * Lists menu by parent id.\n\ndiff --git a/src/main/java/run/halo/app/service/impl/MenuServiceImpl.java b/src/main/java/run/halo/app/service/impl/MenuServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/MenuServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/MenuServiceImpl.java\n@@ -77,6 +77,24 @@ public List<MenuDTO> listByTeam(String team, Sort sort) {\n         return menus.stream().map(menu -> (MenuDTO) new MenuDTO().convertFrom(menu)).collect(Collectors.toList());\n     }\n \n+    @Override\n+    public List<MenuVO> listByTeamAsTree(String team, Sort sort) {\n+        Assert.notNull(team, \"Team must not be null\");\n+\n+        List<Menu> menus = menuRepository.findByTeam(team, sort);\n+\n+        if (CollectionUtils.isEmpty(menus)) {\n+            return Collections.emptyList();\n+        }\n+\n+        MenuVO topLevelMenu = createTopLevelMenu();\n+\n+        concreteTree(topLevelMenu, menus);\n+\n+        List<MenuVO> children = topLevelMenu.getChildren();\n+        return children;\n+    }\n+\n     @Override\n     public Menu createBy(MenuParam menuParam) {\n         Assert.notNull(menuParam, \"Menu param must not be null\");\n\ndiff --git a/src/main/java/run/halo/app/utils/HaloUtils.java b/src/main/java/run/halo/app/utils/HaloUtils.java\n--- a/src/main/java/run/halo/app/utils/HaloUtils.java\n+++ b/src/main/java/run/halo/app/utils/HaloUtils.java\n@@ -30,17 +30,6 @@ public class HaloUtils {\n \n     public static final String URL_SEPARATOR = \"/\";\n \n-    /**\n-     * Gets current http servlet request.\n-     *\n-     * @return current http servlet request\n-     */\n-    @NonNull\n-    public static HttpServletRequest getHttpServletRequest() {\n-        return ((ServletRequestAttributes) Objects.requireNonNull(RequestContextHolder.getRequestAttributes()))\n-                .getRequest();\n-    }\n-\n     @NonNull\n     public static String ensureBoth(@NonNull String string, @NonNull String bothfix) {\n         return ensureBoth(string, bothfix, bothfix);",
    "output": "Merge branch 'dev' of https://github.com/halo-dev/halo into dev"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/utils/HaloUtils.java b/src/main/java/run/halo/app/utils/HaloUtils.java\n--- a/src/main/java/run/halo/app/utils/HaloUtils.java\n+++ b/src/main/java/run/halo/app/utils/HaloUtils.java\n@@ -30,17 +30,6 @@ public class HaloUtils {\n \n     public static final String URL_SEPARATOR = \"/\";\n \n-    /**\n-     * Gets current http servlet request.\n-     *\n-     * @return current http servlet request\n-     */\n-    @NonNull\n-    public static HttpServletRequest getHttpServletRequest() {\n-        return ((ServletRequestAttributes) Objects.requireNonNull(RequestContextHolder.getRequestAttributes()))\n-                .getRequest();\n-    }\n-\n     @NonNull\n     public static String ensureBoth(@NonNull String string, @NonNull String bothfix) {\n         return ensureBoth(string, bothfix, bothfix);",
    "output": "Remove redundant code of http servlet request fetching globally"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/core/freemarker/tag/MenuTagDirective.java b/src/main/java/run/halo/app/core/freemarker/tag/MenuTagDirective.java\n--- a/src/main/java/run/halo/app/core/freemarker/tag/MenuTagDirective.java\n+++ b/src/main/java/run/halo/app/core/freemarker/tag/MenuTagDirective.java\n@@ -50,6 +50,10 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars, Templ\n                     String team = params.get(\"team\").toString();\n                     env.setVariable(\"menus\", builder.build().wrap(menuService.listByTeam(team, Sort.by(DESC, \"priority\"))));\n                     break;\n+                case \"treeByTeam\":\n+                    String treeTeam = params.get(\"team\").toString();\n+                    env.setVariable(\"menus\", builder.build().wrap(menuService.listByTeamAsTree(treeTeam, Sort.by(DESC, \"priority\"))));\n+                    break;\n                 case \"count\":\n                     env.setVariable(\"count\", builder.build().wrap(menuService.count()));\n                     break;\n\ndiff --git a/src/main/java/run/halo/app/service/MenuService.java b/src/main/java/run/halo/app/service/MenuService.java\n--- a/src/main/java/run/halo/app/service/MenuService.java\n+++ b/src/main/java/run/halo/app/service/MenuService.java\n@@ -47,6 +47,15 @@ public interface MenuService extends CrudService<Menu, Integer> {\n      */\n     List<MenuDTO> listByTeam(@NonNull String team, Sort sort);\n \n+    /**\n+     * List menus by team as tree.\n+     *\n+     * @param team team\n+     * @param sort sort\n+     * @return list of tree menus\n+     */\n+    List<MenuVO> listByTeamAsTree(@NonNull String team, Sort sort);\n+\n     /**\n      * Creates a menu.\n      *\n@@ -62,7 +71,7 @@ public interface MenuService extends CrudService<Menu, Integer> {\n      * @param sort sort info must not be null\n      * @return a menu tree\n      */\n-    List<MenuVO> listAsTree(Sort sort);\n+    List<MenuVO> listAsTree(@NonNull Sort sort);\n \n     /**\n      * Lists menu by parent id.\n\ndiff --git a/src/main/java/run/halo/app/service/impl/MenuServiceImpl.java b/src/main/java/run/halo/app/service/impl/MenuServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/MenuServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/MenuServiceImpl.java\n@@ -77,6 +77,24 @@ public List<MenuDTO> listByTeam(String team, Sort sort) {\n         return menus.stream().map(menu -> (MenuDTO) new MenuDTO().convertFrom(menu)).collect(Collectors.toList());\n     }\n \n+    @Override\n+    public List<MenuVO> listByTeamAsTree(String team, Sort sort) {\n+        Assert.notNull(team, \"Team must not be null\");\n+\n+        List<Menu> menus = menuRepository.findByTeam(team, sort);\n+\n+        if (CollectionUtils.isEmpty(menus)) {\n+            return Collections.emptyList();\n+        }\n+\n+        MenuVO topLevelMenu = createTopLevelMenu();\n+\n+        concreteTree(topLevelMenu, menus);\n+\n+        List<MenuVO> children = topLevelMenu.getChildren();\n+        return children;\n+    }\n+\n     @Override\n     public Menu createBy(MenuParam menuParam) {\n         Assert.notNull(menuParam, \"Menu param must not be null\");",
    "output": "feat: add treeByTeam tag for menu."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/security/filter/AbstractAuthenticationFilter.java b/src/main/java/run/halo/app/security/filter/AbstractAuthenticationFilter.java\n--- a/src/main/java/run/halo/app/security/filter/AbstractAuthenticationFilter.java\n+++ b/src/main/java/run/halo/app/security/filter/AbstractAuthenticationFilter.java\n@@ -9,6 +9,7 @@\n import org.springframework.web.filter.OncePerRequestFilter;\n import run.halo.app.cache.StringCacheStore;\n import run.halo.app.config.properties.HaloProperties;\n+import run.halo.app.exception.ForbiddenException;\n import run.halo.app.exception.NotInstallException;\n import run.halo.app.model.properties.PrimaryProperties;\n import run.halo.app.model.support.HaloConst;\n@@ -183,7 +184,7 @@ private boolean checkForTempToken(HttpServletRequest request) {\n \n         if (!tokenCountOptional.isPresent()) {\n             // If the token is not found\n-            return false;\n+            throw new ForbiddenException(\"The temporary token has been expired\").setErrorData(tempToken);\n         }\n \n         log.info(\"Got valid temp token: [{}]\", tempToken);",
    "output": "Throw forbidden exception while temporary token expired"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/MainController.java b/src/main/java/run/halo/app/controller/content/MainController.java\n--- a/src/main/java/run/halo/app/controller/content/MainController.java\n+++ b/src/main/java/run/halo/app/controller/content/MainController.java\n@@ -3,7 +3,6 @@\n import org.apache.commons.lang3.StringUtils;\n import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.GetMapping;\n-import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.ResponseBody;\n import run.halo.app.config.properties.HaloProperties;\n import run.halo.app.exception.ServiceException;\n@@ -13,6 +12,7 @@\n import run.halo.app.service.OptionService;\n import run.halo.app.service.UserService;\n \n+import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n import java.io.IOException;\n \n@@ -25,6 +25,16 @@\n @Controller\n public class MainController {\n \n+    /**\n+     * Index redirect uri.\n+     */\n+    private final static String INDEX_REDIRECT_URI = \"index.html\";\n+\n+    /**\n+     * Install redirect uri.\n+     */\n+    private final static String INSTALL_REDIRECT_URI = INDEX_REDIRECT_URI + \"#install\";\n+\n     private final UserService userService;\n \n     private final OptionService optionService;\n@@ -37,9 +47,10 @@ public MainController(UserService userService, OptionService optionService, Halo\n         this.haloProperties = haloProperties;\n     }\n \n-    @GetMapping(\"{permlink}\")\n-    public String admin(@PathVariable(name = \"permlink\") String permlink) {\n-        return \"redirect:/\" + permlink + \"/index.html\";\n+    @GetMapping(\"${halo.admin-path:admin}\")\n+    public void admin(HttpServletRequest request, HttpServletResponse response) throws IOException {\n+        String adminIndexRedirectUri = StringUtils.appendIfMissing(this.haloProperties.getAdminPath(), \"/\") + INDEX_REDIRECT_URI;\n+        response.sendRedirect(adminIndexRedirectUri);\n     }\n \n     @GetMapping(\"version\")\n@@ -49,8 +60,9 @@ public String version() {\n     }\n \n     @GetMapping(\"install\")\n-    public String installation() {\n-        return \"redirect:\" + haloProperties.getAdminPath() + \"/index.html#install\";\n+    public void installation(HttpServletResponse response) throws IOException {\n+        String installRedirectUri = StringUtils.appendIfMissing(this.haloProperties.getAdminPath(), \"/\") + INSTALL_REDIRECT_URI;\n+        response.sendRedirect(installRedirectUri);\n     }\n \n     @GetMapping(\"avatar\")\n@@ -76,4 +88,5 @@ public void favicon(HttpServletResponse response) throws IOException {\n             response.sendRedirect(favicon);\n         }\n     }\n+\n }\n\ndiff --git a/src/main/java/run/halo/app/controller/core/CommonController.java b/src/main/java/run/halo/app/controller/core/CommonController.java\n--- a/src/main/java/run/halo/app/controller/core/CommonController.java\n+++ b/src/main/java/run/halo/app/controller/core/CommonController.java\n@@ -1,5 +1,6 @@\n package run.halo.app.controller.core;\n \n+import cn.hutool.extra.servlet.ServletUtil;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.boot.autoconfigure.web.ErrorProperties;\n import org.springframework.boot.autoconfigure.web.ServerProperties;\n@@ -68,7 +69,11 @@ public CommonController(ThemeService themeService,\n     public String handleError(HttpServletRequest request, HttpServletResponse response, Model model) {\n         HttpStatus status = getStatus(request);\n \n-        log.error(\"Error path: [{}], status: [{}]\", getErrorPath(), status);\n+        log.error(\"Request URL: [{}], URI: [{}], Request Method: [{}], IP: [{}]\",\n+                request.getRequestURL(),\n+                request.getRequestURI(),\n+                request.getMethod(),\n+                ServletUtil.getClientIP(request));\n \n         handleCustomException(request);\n \n\ndiff --git a/src/main/java/run/halo/app/core/freemarker/method/RandomMethod.java b/src/main/java/run/halo/app/core/freemarker/method/RandomMethod.java\n--- a/src/main/java/run/halo/app/core/freemarker/method/RandomMethod.java\n+++ b/src/main/java/run/halo/app/core/freemarker/method/RandomMethod.java\n@@ -16,6 +16,11 @@\n @Component\n public class RandomMethod implements TemplateMethodModelEx {\n \n+    /**\n+     * Constructor.\n+     *\n+     * @param configuration injected by spring.\n+     */\n     public RandomMethod(Configuration configuration) {\n         configuration.setSharedVariable(\"randomMethod\", this);\n     }\n@@ -29,6 +34,9 @@ public RandomMethod(Configuration configuration) {\n      */\n     @Override\n     public Object exec(List arguments) throws TemplateModelException {\n+        if (arguments.size() != 2) {\n+            throw new TemplateModelException(\"Wrong arguments! 2 arguments are needed\");\n+        }\n         SimpleNumber argOne = (SimpleNumber) arguments.get(0);\n         SimpleNumber argTwo = (SimpleNumber) arguments.get(1);\n         int start = argOne.getAsNumber().intValue();",
    "output": "Allow customization of admin path"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/core/freemarker/method/RandomMethod.java b/src/main/java/run/halo/app/core/freemarker/method/RandomMethod.java\n--- a/src/main/java/run/halo/app/core/freemarker/method/RandomMethod.java\n+++ b/src/main/java/run/halo/app/core/freemarker/method/RandomMethod.java\n@@ -1,4 +1,4 @@\n-package run.halo.app.model.freemarker.method;\n+package run.halo.app.core.freemarker.method;\n \n import cn.hutool.core.util.RandomUtil;\n import freemarker.template.Configuration;\n\ndiff --git a/src/main/java/run/halo/app/core/freemarker/tag/CategoryTagDirective.java b/src/main/java/run/halo/app/core/freemarker/tag/CategoryTagDirective.java\n--- a/src/main/java/run/halo/app/core/freemarker/tag/CategoryTagDirective.java\n+++ b/src/main/java/run/halo/app/core/freemarker/tag/CategoryTagDirective.java\n@@ -1,4 +1,4 @@\n-package run.halo.app.model.freemarker.tag;\n+package run.halo.app.core.freemarker.tag;\n \n import freemarker.core.Environment;\n import freemarker.template.*;\n\ndiff --git a/src/main/java/run/halo/app/core/freemarker/tag/CommentTagDirective.java b/src/main/java/run/halo/app/core/freemarker/tag/CommentTagDirective.java\n--- a/src/main/java/run/halo/app/core/freemarker/tag/CommentTagDirective.java\n+++ b/src/main/java/run/halo/app/core/freemarker/tag/CommentTagDirective.java\n@@ -1,4 +1,4 @@\n-package run.halo.app.model.freemarker.tag;\n+package run.halo.app.core.freemarker.tag;\n \n import freemarker.core.Environment;\n import freemarker.template.*;\n\ndiff --git a/src/main/java/run/halo/app/core/freemarker/tag/LinkTagDirective.java b/src/main/java/run/halo/app/core/freemarker/tag/LinkTagDirective.java\n--- a/src/main/java/run/halo/app/core/freemarker/tag/LinkTagDirective.java\n+++ b/src/main/java/run/halo/app/core/freemarker/tag/LinkTagDirective.java\n@@ -1,4 +1,4 @@\n-package run.halo.app.model.freemarker.tag;\n+package run.halo.app.core.freemarker.tag;\n \n import freemarker.core.Environment;\n import freemarker.template.*;\n\ndiff --git a/src/main/java/run/halo/app/core/freemarker/tag/MenuTagDirective.java b/src/main/java/run/halo/app/core/freemarker/tag/MenuTagDirective.java\n--- a/src/main/java/run/halo/app/core/freemarker/tag/MenuTagDirective.java\n+++ b/src/main/java/run/halo/app/core/freemarker/tag/MenuTagDirective.java\n@@ -1,4 +1,4 @@\n-package run.halo.app.model.freemarker.tag;\n+package run.halo.app.core.freemarker.tag;\n \n import freemarker.core.Environment;\n import freemarker.template.*;\n\ndiff --git a/src/main/java/run/halo/app/core/freemarker/tag/PhotoTagDirective.java b/src/main/java/run/halo/app/core/freemarker/tag/PhotoTagDirective.java\n--- a/src/main/java/run/halo/app/core/freemarker/tag/PhotoTagDirective.java\n+++ b/src/main/java/run/halo/app/core/freemarker/tag/PhotoTagDirective.java\n@@ -1,4 +1,4 @@\n-package run.halo.app.model.freemarker.tag;\n+package run.halo.app.core.freemarker.tag;\n \n import freemarker.core.Environment;\n import freemarker.template.*;\n\ndiff --git a/src/main/java/run/halo/app/core/freemarker/tag/PostTagDirective.java b/src/main/java/run/halo/app/core/freemarker/tag/PostTagDirective.java\n--- a/src/main/java/run/halo/app/core/freemarker/tag/PostTagDirective.java\n+++ b/src/main/java/run/halo/app/core/freemarker/tag/PostTagDirective.java\n@@ -1,4 +1,4 @@\n-package run.halo.app.model.freemarker.tag;\n+package run.halo.app.core.freemarker.tag;\n \n import freemarker.core.Environment;\n import freemarker.template.*;\n\ndiff --git a/src/main/java/run/halo/app/core/freemarker/tag/TagTagDirective.java b/src/main/java/run/halo/app/core/freemarker/tag/TagTagDirective.java\n--- a/src/main/java/run/halo/app/core/freemarker/tag/TagTagDirective.java\n+++ b/src/main/java/run/halo/app/core/freemarker/tag/TagTagDirective.java\n@@ -1,4 +1,4 @@\n-package run.halo.app.model.freemarker.tag;\n+package run.halo.app.core.freemarker.tag;\n \n import freemarker.core.Environment;\n import freemarker.template.*;",
    "output": "style: change freemarker package."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/freemarker/tag/PostTagDirective.java b/src/main/java/run/halo/app/model/freemarker/tag/PostTagDirective.java\n--- a/src/main/java/run/halo/app/model/freemarker/tag/PostTagDirective.java\n+++ b/src/main/java/run/halo/app/model/freemarker/tag/PostTagDirective.java\n@@ -60,10 +60,18 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars, Templ\n                     Integer categoryId = Integer.parseInt(params.get(\"categoryId\").toString());\n                     env.setVariable(\"posts\", builder.build().wrap(postCategoryService.listPostBy(categoryId, PostStatus.PUBLISHED)));\n                     break;\n+                case \"listByCategorySlug\":\n+                    String categorySlug = params.get(\"categorySlug\").toString();\n+                    env.setVariable(\"posts\", builder.build().wrap(postCategoryService.listPostBy(categorySlug, PostStatus.PUBLISHED)));\n+                    break;\n                 case \"listByTagId\":\n                     Integer tagId = Integer.parseInt(params.get(\"tagId\").toString());\n                     env.setVariable(\"posts\", builder.build().wrap(postTagService.listPostsBy(tagId, PostStatus.PUBLISHED)));\n                     break;\n+                case \"listByTagSlug\":\n+                    String tagSlug = params.get(\"tagSlug\").toString();\n+                    env.setVariable(\"posts\", builder.build().wrap(postTagService.listPostsBy(tagSlug, PostStatus.PUBLISHED)));\n+                    break;\n                 default:\n                     break;\n             }\n\ndiff --git a/src/main/java/run/halo/app/service/PostCategoryService.java b/src/main/java/run/halo/app/service/PostCategoryService.java\n--- a/src/main/java/run/halo/app/service/PostCategoryService.java\n+++ b/src/main/java/run/halo/app/service/PostCategoryService.java\n@@ -64,6 +64,16 @@ public interface PostCategoryService extends CrudService<PostCategory, Integer>\n     @NonNull\n     List<Post> listPostBy(@NonNull Integer categoryId, @NonNull PostStatus status);\n \n+    /**\n+     * Lists post by category slug and post status.\n+     *\n+     * @param slug   category slug must not be null\n+     * @param status post status\n+     * @return a list of post\n+     */\n+    @NonNull\n+    List<Post> listPostBy(@NonNull String slug, @NonNull PostStatus status);\n+\n     /**\n      * Pages post by category slug name.\n      *\n\ndiff --git a/src/main/java/run/halo/app/service/PostTagService.java b/src/main/java/run/halo/app/service/PostTagService.java\n--- a/src/main/java/run/halo/app/service/PostTagService.java\n+++ b/src/main/java/run/halo/app/service/PostTagService.java\n@@ -73,6 +73,16 @@ public interface PostTagService extends CrudService<PostTag, Integer> {\n     @NonNull\n     List<Post> listPostsBy(@NonNull Integer tagId, @NonNull PostStatus status);\n \n+    /**\n+     * Lists posts by tag slug and post status.\n+     *\n+     * @param slug   tag slug must not be null\n+     * @param status post status\n+     * @return a list of post\n+     */\n+    @NonNull\n+    List<Post> listPostsBy(@NonNull String slug, @NonNull PostStatus status);\n+\n     /**\n      * Pages posts by tag id.\n      *\n\ndiff --git a/src/main/java/run/halo/app/service/impl/PostCategoryServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostCategoryServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostCategoryServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostCategoryServiceImpl.java\n@@ -6,6 +6,7 @@\n import org.springframework.stereotype.Service;\n import org.springframework.util.Assert;\n import org.springframework.util.CollectionUtils;\n+import run.halo.app.exception.NotFoundException;\n import run.halo.app.model.dto.CategoryWithPostCountDTO;\n import run.halo.app.model.entity.Category;\n import run.halo.app.model.entity.Post;\n@@ -98,14 +99,26 @@ public List<Post> listPostBy(Integer categoryId) {\n     @Override\n     public List<Post> listPostBy(Integer categoryId, PostStatus status) {\n         Assert.notNull(categoryId, \"Category id must not be null\");\n-        Assert.notNull(categoryId, \"Post status must not be null\");\n+        Assert.notNull(status, \"Post status must not be null\");\n \n         // Find all post ids\n         Set<Integer> postIds = postCategoryRepository.findAllPostIdsByCategoryId(categoryId, status);\n \n         return postRepository.findAllById(postIds);\n     }\n \n+    @Override\n+    public List<Post> listPostBy(String slug, PostStatus status) {\n+        Assert.notNull(slug, \"Category slug must not be null\");\n+        Assert.notNull(status, \"Post status must not be null\");\n+\n+        Category category = categoryRepository.getBySlugName(slug).orElseThrow(() -> new NotFoundException(\"查询不到该分类的信息\").setErrorData(slug));\n+\n+        Set<Integer> postsIds = postCategoryRepository.findAllPostIdsByCategoryId(category.getId(), status);\n+\n+        return postRepository.findAllById(postsIds);\n+    }\n+\n     @Override\n     public Page<Post> pagePostBy(Integer categoryId, Pageable pageable) {\n         Assert.notNull(categoryId, \"Category id must not be null\");\n@@ -120,7 +133,7 @@ public Page<Post> pagePostBy(Integer categoryId, Pageable pageable) {\n     @Override\n     public Page<Post> pagePostBy(Integer categoryId, PostStatus status, Pageable pageable) {\n         Assert.notNull(categoryId, \"Category id must not be null\");\n-        Assert.notNull(categoryId, \"Post status must not be null\");\n+        Assert.notNull(status, \"Post status must not be null\");\n         Assert.notNull(pageable, \"Page info must not be null\");\n \n         // Find all post ids\n\ndiff --git a/src/main/java/run/halo/app/service/impl/PostTagServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostTagServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostTagServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostTagServiceImpl.java\n@@ -6,6 +6,7 @@\n import org.springframework.stereotype.Service;\n import org.springframework.util.Assert;\n import org.springframework.util.CollectionUtils;\n+import run.halo.app.exception.NotFoundException;\n import run.halo.app.model.dto.TagWithPostCountDTO;\n import run.halo.app.model.entity.Post;\n import run.halo.app.model.entity.PostTag;\n@@ -118,14 +119,26 @@ public List<Post> listPostsBy(Integer tagId) {\n     @Override\n     public List<Post> listPostsBy(Integer tagId, PostStatus status) {\n         Assert.notNull(tagId, \"Tag id must not be null\");\n-        Assert.notNull(tagId, \"Post status must not be null\");\n+        Assert.notNull(status, \"Post status must not be null\");\n \n         // Find all post ids\n         Set<Integer> postIds = postTagRepository.findAllPostIdsByTagId(tagId, status);\n \n         return postRepository.findAllById(postIds);\n     }\n \n+    @Override\n+    public List<Post> listPostsBy(String slug, PostStatus status) {\n+        Assert.notNull(slug, \"Tag slug must not be null\");\n+        Assert.notNull(status, \"Post status must not be null\");\n+\n+        Tag tag = tagRepository.getBySlugName(slug).orElseThrow(() -> new NotFoundException(\"查询不到该标签的信息\").setErrorData(slug));\n+\n+        Set<Integer> postIds = postTagRepository.findAllPostIdsByTagId(tag.getId(), status);\n+\n+        return postRepository.findAllById(postIds);\n+    }\n+\n     @Override\n     public Page<Post> pagePostsBy(Integer tagId, Pageable pageable) {\n         Assert.notNull(tagId, \"Tag id must not be null\");\n@@ -140,7 +153,7 @@ public Page<Post> pagePostsBy(Integer tagId, Pageable pageable) {\n     @Override\n     public Page<Post> pagePostsBy(Integer tagId, PostStatus status, Pageable pageable) {\n         Assert.notNull(tagId, \"Tag id must not be null\");\n-        Assert.notNull(tagId, \"Post status must not be null\");\n+        Assert.notNull(status, \"Post status must not be null\");\n         Assert.notNull(pageable, \"Page info must not be null\");\n \n         // Find all post ids",
    "output": "feat: refactor PostTagDirective."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/handler/file/AliOssFileHandler.java b/src/main/java/run/halo/app/handler/file/AliOssFileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/AliOssFileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/AliOssFileHandler.java\n@@ -127,6 +127,6 @@ public void delete(String key) {\n \n     @Override\n     public boolean supportType(AttachmentType type) {\n-        return AttachmentType.ALIYUN.equals(type);\n+        return AttachmentType.ALIOSS.equals(type);\n     }\n }\n\ndiff --git a/src/main/java/run/halo/app/handler/file/BaiduBosFileHandler.java b/src/main/java/run/halo/app/handler/file/BaiduBosFileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/BaiduBosFileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/BaiduBosFileHandler.java\n@@ -129,6 +129,6 @@ public void delete(String key) {\n \n     @Override\n     public boolean supportType(AttachmentType type) {\n-        return AttachmentType.BAIDUYUN.equals(type);\n+        return AttachmentType.BAIDUBOS.equals(type);\n     }\n }\n\ndiff --git a/src/main/java/run/halo/app/handler/file/QiniuOssFileHandler.java b/src/main/java/run/halo/app/handler/file/QiniuOssFileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/QiniuOssFileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/QiniuOssFileHandler.java\n@@ -155,6 +155,6 @@ public void delete(String key) {\n \n     @Override\n     public boolean supportType(AttachmentType type) {\n-        return AttachmentType.QNYUN.equals(type);\n+        return AttachmentType.QINIUOSS.equals(type);\n     }\n }\n\ndiff --git a/src/main/java/run/halo/app/handler/file/TencentCosFileHandler.java b/src/main/java/run/halo/app/handler/file/TencentCosFileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/TencentCosFileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/TencentCosFileHandler.java\n@@ -142,6 +142,6 @@ public void delete(String key) {\n \n     @Override\n     public boolean supportType(AttachmentType type) {\n-        return AttachmentType.TENCENTYUN.equals(type);\n+        return AttachmentType.TENCENTCOS.equals(type);\n     }\n }\n\ndiff --git a/src/main/java/run/halo/app/handler/file/UpOssFileHandler.java b/src/main/java/run/halo/app/handler/file/UpOssFileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/UpOssFileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/UpOssFileHandler.java\n@@ -125,6 +125,6 @@ public void delete(String key) {\n \n     @Override\n     public boolean supportType(AttachmentType type) {\n-        return AttachmentType.UPYUN.equals(type);\n+        return AttachmentType.UPOSS.equals(type);\n     }\n }\n\ndiff --git a/src/main/java/run/halo/app/handler/migrate/OldVersionMigrateHandler.java b/src/main/java/run/halo/app/handler/migrate/OldVersionMigrateHandler.java\n--- a/src/main/java/run/halo/app/handler/migrate/OldVersionMigrateHandler.java\n+++ b/src/main/java/run/halo/app/handler/migrate/OldVersionMigrateHandler.java\n@@ -624,9 +624,9 @@ private List<Attachment> handleAttachments(@Nullable Object attachmentsObject) {\n             // Set location\n             String attachLocation = attachmentMap.getOrDefault(\"attachLocation\", \"\").toString();\n             if (StringUtils.equalsIgnoreCase(attachLocation, \"qiniu\")) {\n-                attachment.setType(AttachmentType.QNYUN);\n+                attachment.setType(AttachmentType.QINIUOSS);\n             } else if (StringUtils.equalsIgnoreCase(attachLocation, \"upyun\")) {\n-                attachment.setType(AttachmentType.UPYUN);\n+                attachment.setType(AttachmentType.UPOSS);\n             } else {\n                 attachment.setType(AttachmentType.LOCAL);\n             }\n\ndiff --git a/src/main/java/run/halo/app/model/enums/AttachmentType.java b/src/main/java/run/halo/app/model/enums/AttachmentType.java\n--- a/src/main/java/run/halo/app/model/enums/AttachmentType.java\n+++ b/src/main/java/run/halo/app/model/enums/AttachmentType.java\n@@ -16,12 +16,12 @@ public enum AttachmentType implements ValueEnum<Integer> {\n     /**\n      * 又拍云\n      */\n-    UPYUN(1),\n+    UPOSS(1),\n \n     /**\n      * 七牛云\n      */\n-    QNYUN(2),\n+    QINIUOSS(2),\n \n     /**\n      * sm.ms\n@@ -31,17 +31,17 @@ public enum AttachmentType implements ValueEnum<Integer> {\n     /**\n      * 阿里云\n      */\n-    ALIYUN(4),\n+    ALIOSS(4),\n \n     /**\n      * 百度云\n      */\n-    BAIDUYUN(5),\n+    BAIDUBOS(5),\n \n     /**\n      * 腾讯云\n      */\n-    TENCENTYUN(6);\n+    TENCENTCOS(6);\n \n     private Integer value;\n \n\ndiff --git a/src/main/java/run/halo/app/service/impl/RecoveryServiceImpl.java b/src/main/java/run/halo/app/service/impl/RecoveryServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/RecoveryServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/RecoveryServiceImpl.java\n@@ -634,9 +634,9 @@ private List<Attachment> handleAttachments(@Nullable Object attachmentsObject) {\n             // Set location\n             String attachLocation = attachmentMap.getOrDefault(\"attachLocation\", \"\").toString();\n             if (StringUtils.equalsIgnoreCase(attachLocation, \"qiniu\")) {\n-                attachment.setType(AttachmentType.QNYUN);\n+                attachment.setType(AttachmentType.QINIUOSS);\n             } else if (StringUtils.equalsIgnoreCase(attachLocation, \"upyun\")) {\n-                attachment.setType(AttachmentType.UPYUN);\n+                attachment.setType(AttachmentType.UPOSS);\n             } else {\n                 attachment.setType(AttachmentType.LOCAL);\n             }",
    "output": "style: Change AttachmentType enum."
  },
  {
    "input": "diff --git a/src/test/java/run/halo/app/service/impl/OptionServiceImplTest.java b/src/test/java/run/halo/app/service/impl/OptionServiceImplTest.java\n--- a/src/test/java/run/halo/app/service/impl/OptionServiceImplTest.java\n+++ b/src/test/java/run/halo/app/service/impl/OptionServiceImplTest.java\n@@ -8,7 +8,7 @@\n import org.mockito.junit.MockitoJUnitRunner;\n import run.halo.app.cache.StringCacheStore;\n import run.halo.app.model.entity.Option;\n-import run.halo.app.model.properties.QnYunProperties;\n+import run.halo.app.model.properties.QiniuOssProperties;\n import run.halo.app.repository.OptionRepository;\n import run.halo.app.service.OptionService;\n \n@@ -80,7 +80,7 @@ private void getQiniuZoneTest(String region, Zone actualZone) {\n     }\n \n     private void getQiniuZoneTest(Zone actualZone, Option option) {\n-        QnYunProperties zoneProperty = QnYunProperties.OSS_ZONE;\n+        QiniuOssProperties zoneProperty = QiniuOssProperties.OSS_ZONE;\n \n         // Given\n //        given(optionRepository.findByKey(zoneProperty.getValue())).willReturn(Optional.ofNullable(option));",
    "output": "style: change some class name."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/utils/MarkdownUtils.java b/src/main/java/run/halo/app/utils/MarkdownUtils.java\n--- a/src/main/java/run/halo/app/utils/MarkdownUtils.java\n+++ b/src/main/java/run/halo/app/utils/MarkdownUtils.java\n@@ -49,6 +49,7 @@ public class MarkdownUtils {\n                     TocExtension.create(),\n                     YamlFrontMatterExtension.create())\n             )\n+            .set(TocExtension.LEVELS, 255)\n             .set(TablesExtension.WITH_CAPTION, false)\n             .set(TablesExtension.COLUMN_SPANS, false)\n             .set(TablesExtension.MIN_HEADER_ROWS, 1)",
    "output": "Merge branch 'dev' of github.com:halo-dev/halo into dev"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/HaloConfiguration.java b/src/main/java/run/halo/app/config/HaloConfiguration.java\n--- a/src/main/java/run/halo/app/config/HaloConfiguration.java\n+++ b/src/main/java/run/halo/app/config/HaloConfiguration.java\n@@ -164,7 +164,7 @@ public FilterRegistrationBean<AdminAuthenticationFilter> adminAuthenticationFilt\n \n         FilterRegistrationBean<AdminAuthenticationFilter> authenticationFilter = new FilterRegistrationBean<>();\n         authenticationFilter.setFilter(adminAuthenticationFilter);\n-        authenticationFilter.addUrlPatterns(\"/api/admin/*\", \"/actuator/*\", \"/api/content/comments\");\n+        authenticationFilter.addUrlPatterns(\"/api/admin/*\", \"/api/content/comments\");\n         authenticationFilter.setOrder(1);\n \n         return authenticationFilter;",
    "output": "feat: modify actuator base path."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/HaloConfiguration.java b/src/main/java/run/halo/app/config/HaloConfiguration.java\n--- a/src/main/java/run/halo/app/config/HaloConfiguration.java\n+++ b/src/main/java/run/halo/app/config/HaloConfiguration.java\n@@ -30,7 +30,6 @@\n import java.security.KeyManagementException;\n import java.security.KeyStoreException;\n import java.security.NoSuchAlgorithmException;\n-import java.time.temporal.ChronoUnit;\n \n /**\n  * Halo configuration.\n@@ -165,7 +164,7 @@ public FilterRegistrationBean<AdminAuthenticationFilter> adminAuthenticationFilt\n \n         FilterRegistrationBean<AdminAuthenticationFilter> authenticationFilter = new FilterRegistrationBean<>();\n         authenticationFilter.setFilter(adminAuthenticationFilter);\n-        authenticationFilter.addUrlPatterns(\"/api/admin/*\", \"/api/content/comments\");\n+        authenticationFilter.addUrlPatterns(\"/api/admin/*\", \"/actuator/*\", \"/api/content/comments\");\n         authenticationFilter.setOrder(1);\n \n         return authenticationFilter;\n\ndiff --git a/src/main/java/run/halo/app/model/properties/PrimaryProperties.java b/src/main/java/run/halo/app/model/properties/PrimaryProperties.java\n--- a/src/main/java/run/halo/app/model/properties/PrimaryProperties.java\n+++ b/src/main/java/run/halo/app/model/properties/PrimaryProperties.java\n@@ -10,11 +10,25 @@\n  */\n public enum PrimaryProperties implements PropertyEnum {\n \n+    /**\n+     * is blog installed.\n+     */\n     IS_INSTALLED(\"is_installed\", Boolean.class, \"false\"),\n \n+    /**\n+     * current actived theme.\n+     */\n     THEME(\"theme\", String.class, DEFAULT_THEME_ID),\n \n-    BIRTHDAY(\"birthday\", Long.class, \"\");\n+    /**\n+     * blog birthday\n+     */\n+    BIRTHDAY(\"birthday\", Long.class, \"\"),\n+\n+    /**\n+     * developer mode.\n+     */\n+    DEV_MODE(\"developer_mode\", Boolean.class, \"false\");\n \n     private final String value;\n ",
    "output": "feat: support developer mode."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/SwaggerConfiguration.java b/src/main/java/run/halo/app/config/SwaggerConfiguration.java\n--- a/src/main/java/run/halo/app/config/SwaggerConfiguration.java\n+++ b/src/main/java/run/halo/app/config/SwaggerConfiguration.java\n@@ -80,7 +80,7 @@ public Docket haloAdminApi() {\n             log.debug(\"Doc has been disabled\");\n         }\n \n-        return buildApiDocket(\"run.halo.app.admin\",\n+        return buildApiDocket(\"run.halo.app.admin.api\",\n                 \"run.halo.app.controller.admin\",\n                 \"/api/admin/**\")\n                 .securitySchemes(adminApiKeys())\n@@ -171,7 +171,9 @@ private ApiInfo apiInfo() {\n                 .description(\"Documentation for Halo API\")\n                 .version(HALO_VERSION)\n                 .termsOfServiceUrl(\"https://github.com/halo-dev\")\n-                .contact(new Contact(\"RYAN0UP\", \"https://ryanc.cc/\", \"i#ryanc.cc\"))\n+                .contact(new Contact(\"halo-dev\", \"https://github.com/halo-dev/halo/issues\", \"i#ryanc.cc\"))\n+                .license(\"GNU General Public License v3.0\")\n+                .licenseUrl(\"https://github.com/halo-dev/halo/blob/master/LICENSE\")\n                 .build();\n     }\n \n\ndiff --git a/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java b/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n--- a/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n+++ b/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n@@ -92,7 +92,7 @@ public void addResourceHandlers(ResourceHandlerRegistry registry) {\n                 .addResourceLocations(workDir + \"upload/\");\n         registry.addResourceHandler(haloProperties.getBackupUrlPrefix() + \"/**\")\n                 .addResourceLocations(workDir + \"backup/\", backupDir);\n-        registry.addResourceHandler(\"/halo\" + haloProperties.getAdminPath() + \"/**\")\n+        registry.addResourceHandler(haloProperties.getAdminPath() + \"/**\")\n                 .addResourceLocations(workDir + HALO_ADMIN_RELATIVE_PATH)\n                 .addResourceLocations(\"classpath:/admin/\");\n \n\ndiff --git a/src/main/java/run/halo/app/controller/content/MainController.java b/src/main/java/run/halo/app/controller/content/MainController.java\n--- a/src/main/java/run/halo/app/controller/content/MainController.java\n+++ b/src/main/java/run/halo/app/controller/content/MainController.java\n@@ -37,40 +37,39 @@ public MainController(UserService userService, OptionService optionService, Halo\n         this.haloProperties = haloProperties;\n     }\n \n-    @GetMapping(\"/halo/{permlink}\")\n-    @Deprecated\n+    @GetMapping(\"{permlink}\")\n     public String admin(@PathVariable(name = \"permlink\") String permlink) {\n-        return \"redirect:/halo/\" + permlink + \"/index.html\";\n+        return \"redirect:/\" + permlink + \"/index.html\";\n     }\n \n-    @GetMapping(\"/halo/version\")\n+    @GetMapping(\"version\")\n     @ResponseBody\n     public String version() {\n         return HaloConst.HALO_VERSION;\n     }\n \n-    @GetMapping(\"/install\")\n+    @GetMapping(\"install\")\n     public String installation() {\n-        return \"redirect:/halo\" + haloProperties.getAdminPath() + \"/index.html#install\";\n+        return \"redirect:\" + haloProperties.getAdminPath() + \"/index.html#install\";\n     }\n \n-    @GetMapping(\"/avatar\")\n+    @GetMapping(\"avatar\")\n     public void avatar(HttpServletResponse response) throws IOException {\n         User user = userService.getCurrentUser().orElseThrow(() -> new ServiceException(\"未查询到博主信息\"));\n         if (StringUtils.isNotEmpty(user.getAvatar())) {\n             response.sendRedirect(user.getAvatar());\n         }\n     }\n \n-    @GetMapping(\"/logo\")\n+    @GetMapping(\"logo\")\n     public void logo(HttpServletResponse response) throws IOException {\n         String blogLogo = optionService.getByProperty(BlogProperties.BLOG_LOGO).orElse(\"\").toString();\n         if (StringUtils.isNotEmpty(blogLogo)) {\n             response.sendRedirect(blogLogo);\n         }\n     }\n \n-    @GetMapping(\"/favicon.ico\")\n+    @GetMapping(\"favicon.ico\")\n     public void favicon(HttpServletResponse response) throws IOException {\n         String favicon = optionService.getByProperty(BlogProperties.BLOG_FAVICON).orElse(\"\").toString();\n         if (StringUtils.isNotEmpty(favicon)) {\n\ndiff --git a/src/main/java/run/halo/app/listener/StartedListener.java b/src/main/java/run/halo/app/listener/StartedListener.java\n--- a/src/main/java/run/halo/app/listener/StartedListener.java\n+++ b/src/main/java/run/halo/app/listener/StartedListener.java\n@@ -52,7 +52,7 @@ private void printStartInfo() {\n         String blogUrl = optionService.getBlogBaseUrl();\n \n         log.info(\"Halo started at         {}\", blogUrl);\n-        log.info(\"Halo admin started at   {}/halo{}\", blogUrl, haloProperties.getAdminPath());\n+        log.info(\"Halo admin started at   {}{}\", blogUrl, haloProperties.getAdminPath());\n         if (!haloProperties.isDocDisabled()) {\n             log.debug(\"Halo doc was enable at  {}/swagger-ui.html\", blogUrl);\n         }",
    "output": "feat: remove halo prefix for admin path."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/BackupServiceImpl.java b/src/main/java/run/halo/app/service/impl/BackupServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/BackupServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/BackupServiceImpl.java\n@@ -39,6 +39,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n /**\n  * Backup service implementation.\n@@ -177,9 +178,9 @@ public BackupDTO zipWorkDirectory() {\n \n     @Override\n     public List<BackupDTO> listHaloBackups() {\n-        try {\n-            // Build backup dto\n-            return Files.list(Paths.get(haloProperties.getBackupDir()))\n+        // Build backup dto\n+        try (Stream<Path> subPathStream = Files.list(Paths.get(haloProperties.getBackupDir()))) {\n+            return subPathStream\n                     .filter(backupPath -> StringUtils.startsWithIgnoreCase(backupPath.getFileName().toString(), HaloConst.HALO_BACKUP_PREFIX))\n                     .map(this::buildBackupDto)\n                     .sorted((leftBackup, rightBackup) -> {",
    "output": "Merge branch 'dev' of github.com:halo-dev/halo into dev"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/BackupServiceImpl.java b/src/main/java/run/halo/app/service/impl/BackupServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/BackupServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/BackupServiceImpl.java\n@@ -178,22 +178,20 @@ public BackupDTO zipWorkDirectory() {\n \n     @Override\n     public List<BackupDTO> listHaloBackups() {\n-        try {\n-            // Build backup dto\n-            try (Stream<Path> subPathStream = Files.list(Paths.get(haloProperties.getBackupDir()))) {\n-                return subPathStream\n-                        .filter(backupPath -> StringUtils.startsWithIgnoreCase(backupPath.getFileName().toString(), HaloConst.HALO_BACKUP_PREFIX))\n-                        .map(this::buildBackupDto)\n-                        .sorted((leftBackup, rightBackup) -> {\n-                            // Sort the result\n-                            if (leftBackup.getUpdateTime() < rightBackup.getUpdateTime()) {\n-                                return 1;\n-                            } else if (leftBackup.getUpdateTime() > rightBackup.getUpdateTime()) {\n-                                return -1;\n-                            }\n-                            return 0;\n-                        }).collect(Collectors.toList());\n-            }\n+        // Build backup dto\n+        try (Stream<Path> subPathStream = Files.list(Paths.get(haloProperties.getBackupDir()))) {\n+            return subPathStream\n+                    .filter(backupPath -> StringUtils.startsWithIgnoreCase(backupPath.getFileName().toString(), HaloConst.HALO_BACKUP_PREFIX))\n+                    .map(this::buildBackupDto)\n+                    .sorted((leftBackup, rightBackup) -> {\n+                        // Sort the result\n+                        if (leftBackup.getUpdateTime() < rightBackup.getUpdateTime()) {\n+                            return 1;\n+                        } else if (leftBackup.getUpdateTime() > rightBackup.getUpdateTime()) {\n+                            return -1;\n+                        }\n+                        return 0;\n+                    }).collect(Collectors.toList());\n         } catch (IOException e) {\n             throw new ServiceException(\"Failed to fetch backups\", e);\n         }",
    "output": "Remove redundant try clause"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/BackupServiceImpl.java b/src/main/java/run/halo/app/service/impl/BackupServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/BackupServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/BackupServiceImpl.java\n@@ -39,6 +39,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n \n /**\n  * Backup service implementation.\n@@ -179,18 +180,20 @@ public BackupDTO zipWorkDirectory() {\n     public List<BackupDTO> listHaloBackups() {\n         try {\n             // Build backup dto\n-            return Files.list(Paths.get(haloProperties.getBackupDir()))\n-                    .filter(backupPath -> StringUtils.startsWithIgnoreCase(backupPath.getFileName().toString(), HaloConst.HALO_BACKUP_PREFIX))\n-                    .map(this::buildBackupDto)\n-                    .sorted((leftBackup, rightBackup) -> {\n-                        // Sort the result\n-                        if (leftBackup.getUpdateTime() < rightBackup.getUpdateTime()) {\n-                            return 1;\n-                        } else if (leftBackup.getUpdateTime() > rightBackup.getUpdateTime()) {\n-                            return -1;\n-                        }\n-                        return 0;\n-                    }).collect(Collectors.toList());\n+            try (Stream<Path> subPathStream = Files.list(Paths.get(haloProperties.getBackupDir()))) {\n+                return subPathStream\n+                        .filter(backupPath -> StringUtils.startsWithIgnoreCase(backupPath.getFileName().toString(), HaloConst.HALO_BACKUP_PREFIX))\n+                        .map(this::buildBackupDto)\n+                        .sorted((leftBackup, rightBackup) -> {\n+                            // Sort the result\n+                            if (leftBackup.getUpdateTime() < rightBackup.getUpdateTime()) {\n+                                return 1;\n+                            } else if (leftBackup.getUpdateTime() > rightBackup.getUpdateTime()) {\n+                                return -1;\n+                            }\n+                            return 0;\n+                        }).collect(Collectors.toList());\n+            }\n         } catch (IOException e) {\n             throw new ServiceException(\"Failed to fetch backups\", e);\n         }",
    "output": "Fix file list bug"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/HaloConfiguration.java b/src/main/java/run/halo/app/config/HaloConfiguration.java\n--- a/src/main/java/run/halo/app/config/HaloConfiguration.java\n+++ b/src/main/java/run/halo/app/config/HaloConfiguration.java\n@@ -2,6 +2,7 @@\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.boot.web.client.RestTemplateBuilder;\n@@ -29,6 +30,7 @@\n import java.security.KeyManagementException;\n import java.security.KeyStoreException;\n import java.security.NoSuchAlgorithmException;\n+import java.time.temporal.ChronoUnit;\n \n /**\n  * Halo configuration.\n@@ -40,7 +42,8 @@\n @Slf4j\n public class HaloConfiguration {\n \n-    private final static int TIMEOUT = 5000;\n+    @Autowired\n+    HaloProperties haloProperties;\n \n     @Bean\n     public ObjectMapper objectMapper(Jackson2ObjectMapperBuilder builder) {\n@@ -51,7 +54,8 @@ public ObjectMapper objectMapper(Jackson2ObjectMapperBuilder builder) {\n     @Bean\n     public RestTemplate httpsRestTemplate(RestTemplateBuilder builder) throws NoSuchAlgorithmException, KeyStoreException, KeyManagementException {\n         RestTemplate httpsRestTemplate = builder.build();\n-        httpsRestTemplate.setRequestFactory(new HttpComponentsClientHttpRequestFactory(HttpClientUtils.createHttpsClient(TIMEOUT)));\n+        httpsRestTemplate.setRequestFactory(new HttpComponentsClientHttpRequestFactory(HttpClientUtils.createHttpsClient(\n+                (int) haloProperties.getDownloadTimeout().toMillis())));\n         return httpsRestTemplate;\n     }\n \n\ndiff --git a/src/main/java/run/halo/app/config/properties/HaloProperties.java b/src/main/java/run/halo/app/config/properties/HaloProperties.java\n--- a/src/main/java/run/halo/app/config/properties/HaloProperties.java\n+++ b/src/main/java/run/halo/app/config/properties/HaloProperties.java\n@@ -8,6 +8,7 @@\n import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Paths;\n+import java.time.Duration;\n \n \n /**\n@@ -59,6 +60,11 @@ public class HaloProperties {\n      */\n     private String backupUrlPrefix = \"/backup\";\n \n+    /**\n+     * Download Timeout.\n+     */\n+    private Duration downloadTimeout = Duration.ofSeconds(30);\n+\n     public HaloProperties() throws IOException {\n         // Create work directory if not exist\n         Files.createDirectories(Paths.get(workDir));",
    "output": "Merge pull request #389 from NGLSL/dev\n\nfeat:(add customize resttempalte timeout.)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/HaloConfiguration.java b/src/main/java/run/halo/app/config/HaloConfiguration.java\n--- a/src/main/java/run/halo/app/config/HaloConfiguration.java\n+++ b/src/main/java/run/halo/app/config/HaloConfiguration.java\n@@ -2,6 +2,7 @@\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.boot.web.client.RestTemplateBuilder;\n@@ -29,6 +30,7 @@\n import java.security.KeyManagementException;\n import java.security.KeyStoreException;\n import java.security.NoSuchAlgorithmException;\n+import java.time.temporal.ChronoUnit;\n \n /**\n  * Halo configuration.\n@@ -40,7 +42,8 @@\n @Slf4j\n public class HaloConfiguration {\n \n-    private final static int TIMEOUT = 5000;\n+    @Autowired\n+    HaloProperties haloProperties;\n \n     @Bean\n     public ObjectMapper objectMapper(Jackson2ObjectMapperBuilder builder) {\n@@ -51,7 +54,8 @@ public ObjectMapper objectMapper(Jackson2ObjectMapperBuilder builder) {\n     @Bean\n     public RestTemplate httpsRestTemplate(RestTemplateBuilder builder) throws NoSuchAlgorithmException, KeyStoreException, KeyManagementException {\n         RestTemplate httpsRestTemplate = builder.build();\n-        httpsRestTemplate.setRequestFactory(new HttpComponentsClientHttpRequestFactory(HttpClientUtils.createHttpsClient(TIMEOUT)));\n+        httpsRestTemplate.setRequestFactory(new HttpComponentsClientHttpRequestFactory(HttpClientUtils.createHttpsClient(\n+                (int) haloProperties.getDownloadTimeout().toMillis())));\n         return httpsRestTemplate;\n     }\n \n\ndiff --git a/src/main/java/run/halo/app/config/properties/HaloProperties.java b/src/main/java/run/halo/app/config/properties/HaloProperties.java\n--- a/src/main/java/run/halo/app/config/properties/HaloProperties.java\n+++ b/src/main/java/run/halo/app/config/properties/HaloProperties.java\n@@ -8,6 +8,7 @@\n import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Paths;\n+import java.time.Duration;\n \n \n /**\n@@ -59,6 +60,11 @@ public class HaloProperties {\n      */\n     private String backupUrlPrefix = \"/backup\";\n \n+    /**\n+     * Download Timeout.\n+     */\n+    private Duration downloadTimeout = Duration.ofSeconds(30);\n+\n     public HaloProperties() throws IOException {\n         // Create work directory if not exist\n         Files.createDirectories(Paths.get(workDir));",
    "output": "feat:(add customize resttempalte timeout.)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/utils/FileUtils.java b/src/main/java/run/halo/app/utils/FileUtils.java\n--- a/src/main/java/run/halo/app/utils/FileUtils.java\n+++ b/src/main/java/run/halo/app/utils/FileUtils.java\n@@ -8,10 +8,7 @@\n import org.springframework.util.Assert;\n import run.halo.app.exception.ForbiddenException;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.File;\n-import java.io.IOException;\n-import java.io.InputStream;\n+import java.io.*;\n import java.nio.file.*;\n import java.nio.file.attribute.BasicFileAttributes;\n import java.util.List;\n@@ -45,11 +42,9 @@ public static void copyFolder(@NonNull Path source, @NonNull Path target) throws\n \n         Files.walkFileTree(source, new SimpleFileVisitor<Path>() {\n \n-            private Path current;\n-\n             @Override\n             public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n-                current = target.resolve(source.relativize(dir).toString());\n+                Path current = target.resolve(source.relativize(dir).toString());\n                 Files.createDirectories(current);\n                 return FileVisitResult.CONTINUE;\n             }\n@@ -88,7 +83,7 @@ public static void deleteFolder(@NonNull Path deletingPath) throws IOException {\n      *\n      * @param zis        zip input stream must not be null\n      * @param targetPath target path must not be null and not empty\n-     * @throws IOException\n+     * @throws IOException throws when failed to access file to be unzipped\n      */\n     public static void unzip(@NonNull ZipInputStream zis, @NonNull Path targetPath) throws IOException {\n         Assert.notNull(zis, \"Zip input stream must not be null\");\n@@ -122,37 +117,39 @@ public static void unzip(@NonNull ZipInputStream zis, @NonNull Path targetPath)\n     }\n \n     /**\n-     * Zip folder or file.\n+     * Zips folder or file.\n      *\n      * @param pathToZip     file path to zip must not be null\n      * @param pathOfArchive zip file path to archive must not be null\n-     * @throws IOException\n+     * @throws IOException throws when failed to access file to be zipped\n      */\n     public static void zip(@NonNull Path pathToZip, @NonNull Path pathOfArchive) throws IOException {\n-        try (ZipOutputStream zipOut = new ZipOutputStream(Files.newOutputStream(pathOfArchive))) {\n-            zip(pathToZip, zipOut);\n+        try (OutputStream outputStream = Files.newOutputStream(pathOfArchive)) {\n+            try (ZipOutputStream zipOut = new ZipOutputStream(outputStream)) {\n+                zip(pathToZip, zipOut);\n+            }\n         }\n     }\n \n     /**\n-     * Zip folder or file.\n+     * Zips folder or file.\n      *\n      * @param pathToZip file path to zip must not be null\n      * @param zipOut    zip output stream must not be null\n-     * @throws IOException\n+     * @throws IOException throws when failed to access file to be zipped\n      */\n     public static void zip(@NonNull Path pathToZip, @NonNull ZipOutputStream zipOut) throws IOException {\n         // Zip file\n         zip(pathToZip, pathToZip.getFileName().toString(), zipOut);\n     }\n \n     /**\n-     * Zip folder or file.\n+     * Zips folder or file.\n      *\n      * @param fileToZip file path to zip must not be null\n      * @param fileName  file name must not be blank\n      * @param zipOut    zip output stream must not be null\n-     * @throws IOException\n+     * @throws IOException throws when failed to access file to be zipped\n      */\n     private static void zip(@NonNull Path fileToZip, @NonNull String fileName, @NonNull ZipOutputStream zipOut) throws IOException {\n         if (Files.isDirectory(fileToZip)) {\n@@ -165,20 +162,24 @@ private static void zip(@NonNull Path fileToZip, @NonNull String fileName, @NonN\n             zipOut.closeEntry();\n \n             // Iterate the sub files recursively\n-            List<Path> subFiles = Files.list(fileToZip).collect(Collectors.toList());\n-            for (Path subFileToZip : subFiles) {\n-                zip(subFileToZip, folderName + subFileToZip.getFileName(), zipOut);\n+            try (Stream<Path> subPathStream = Files.list(fileToZip)) {\n+                // There should not use foreach for stream as internal zip method will throw IOException\n+                List<Path> subFiles = subPathStream.collect(Collectors.toList());\n+                for (Path subFileToZip : subFiles) {\n+                    // Zip children\n+                    zip(subFileToZip, folderName + subFileToZip.getFileName(), zipOut);\n+                }\n             }\n         } else {\n             // Open file to be zipped\n-            try (InputStream inputStream = Files.newInputStream(fileToZip)) {\n-                // Create zip entry for target file\n-                ZipEntry zipEntry = new ZipEntry(fileName);\n-                // Put the entry into zip output stream\n-                zipOut.putNextEntry(zipEntry);\n-                // Copy\n-                IOUtils.copy(inputStream, zipOut);\n-            }\n+            // Create zip entry for target file\n+            ZipEntry zipEntry = new ZipEntry(fileName);\n+            // Put the entry into zip output stream\n+            zipOut.putNextEntry(zipEntry);\n+            // Copy file to zip output stream\n+            Files.copy(fileToZip, zipOut);\n+            // Close entry\n+            zipOut.closeEntry();\n         }\n     }\n ",
    "output": "Try to resolve Too many open files error"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/dto/BackupDTO.java b/src/main/java/run/halo/app/model/dto/BackupDTO.java\n--- a/src/main/java/run/halo/app/model/dto/BackupDTO.java\n+++ b/src/main/java/run/halo/app/model/dto/BackupDTO.java\n@@ -9,8 +9,11 @@\n @Data\n public class BackupDTO {\n \n+    @Deprecated\n     private String downloadUrl;\n \n+    private String downloadLink;\n+\n     private String filename;\n \n     private Long updateTime;\n\ndiff --git a/src/main/java/run/halo/app/service/impl/BackupServiceImpl.java b/src/main/java/run/halo/app/service/impl/BackupServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/BackupServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/BackupServiceImpl.java\n@@ -206,7 +206,6 @@ public void deleteHaloBackup(String filename) {\n         try {\n             // Delete backup file\n             Files.delete(backupPath);\n-\n         } catch (NoSuchFileException e) {\n             throw new NotFoundException(\"The file \" + filename + \" was not found\", e);\n         } catch (IOException e) {\n@@ -226,16 +225,13 @@ private BackupDTO buildBackupDto(@NonNull Path backupPath) {\n         String backupFileName = backupPath.getFileName().toString();\n         BackupDTO backup = new BackupDTO();\n         backup.setDownloadUrl(buildDownloadUrl(backupFileName));\n+        backup.setDownloadLink(backup.getDownloadLink());\n         backup.setFilename(backupFileName);\n         try {\n             backup.setUpdateTime(Files.getLastModifiedTime(backupPath).toMillis());\n-        } catch (IOException e) {\n-            throw new ServiceException(\"Failed to get last modified time of \" + backupPath.toString(), e);\n-        }\n-        try {\n             backup.setFileSize(Files.size(backupPath));\n         } catch (IOException e) {\n-            throw new ServiceException(\"Failed to get file size \" + backupPath.toString(), e);\n+            throw new ServiceException(\"Failed to access file \" + backupPath.toString(), e);\n         }\n \n         return backup;",
    "output": "Replace downloadUrl into downloadLink of BackupDTO"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n@@ -16,7 +16,6 @@\n import org.springframework.transaction.annotation.Transactional;\n import org.springframework.util.Assert;\n import run.halo.app.event.logger.LogEvent;\n-import run.halo.app.event.post.PostSaveBeforeEvent;\n import run.halo.app.event.post.PostVisitEvent;\n import run.halo.app.model.dto.CategoryDTO;\n import run.halo.app.model.dto.TagDTO;\n@@ -52,7 +51,6 @@\n  */\n @Slf4j\n @Service\n-@Deprecated\n public class PostServiceImpl extends BasePostServiceImpl<Post> implements PostService {\n \n     private final PostRepository postRepository;",
    "output": "Update PostServiceImpl.java"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java b/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n@@ -13,6 +13,7 @@\n import org.springframework.util.Assert;\n import org.springframework.util.CollectionUtils;\n import run.halo.app.cache.StringCacheStore;\n+import run.halo.app.config.properties.HaloProperties;\n import run.halo.app.event.options.OptionUpdatedEvent;\n import run.halo.app.exception.MissingPropertyException;\n import run.halo.app.model.dto.OptionDTO;\n@@ -41,20 +42,19 @@\n public class OptionServiceImpl extends AbstractCrudService<Option, Integer> implements OptionService {\n \n     private final OptionRepository optionRepository;\n-\n     private final ApplicationContext applicationContext;\n-\n     private final StringCacheStore cacheStore;\n-\n     private final Map<String, PropertyEnum> propertyEnumMap;\n-\n     private final ApplicationEventPublisher eventPublisher;\n+    private HaloProperties haloProperties;\n \n-    public OptionServiceImpl(OptionRepository optionRepository,\n+    public OptionServiceImpl(HaloProperties haloProperties,\n+                             OptionRepository optionRepository,\n                              ApplicationContext applicationContext,\n                              StringCacheStore cacheStore,\n                              ApplicationEventPublisher eventPublisher) {\n         super(optionRepository);\n+        this.haloProperties = haloProperties;\n         this.optionRepository = optionRepository;\n         this.applicationContext = applicationContext;\n         this.cacheStore = cacheStore;\n@@ -373,7 +373,11 @@ public String getBlogBaseUrl() {\n         if (StrUtil.isNotBlank(blogUrl)) {\n             blogUrl = StrUtil.removeSuffix(blogUrl, \"/\");\n         } else {\n-            blogUrl = String.format(\"http://%s:%s\", HaloUtils.getMachineIP(), serverPort);\n+            if (haloProperties.isProductionEnv()) {\n+                blogUrl = String.format(\"http://%s:%s\", \"127.0.0.1\", serverPort);\n+            } else {\n+                blogUrl = String.format(\"http://%s:%s\", HaloUtils.getMachineIP(), serverPort);\n+            }\n         }\n \n         return blogUrl;",
    "output": "Update OptionServiceImpl.java"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java b/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n--- a/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n+++ b/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n@@ -92,7 +92,7 @@ public void addResourceHandlers(ResourceHandlerRegistry registry) {\n                 .addResourceLocations(workDir + \"upload/\");\n         registry.addResourceHandler(haloProperties.getBackupUrlPrefix() + \"/**\")\n                 .addResourceLocations(workDir + \"backup/\", backupDir);\n-        registry.addResourceHandler(haloProperties.getAdminPath() + \"/**\")\n+        registry.addResourceHandler(\"/halo\" + haloProperties.getAdminPath() + \"/**\")\n                 .addResourceLocations(workDir + HALO_ADMIN_RELATIVE_PATH)\n                 .addResourceLocations(\"classpath:/admin/\");\n \n\ndiff --git a/src/main/java/run/halo/app/controller/content/MainController.java b/src/main/java/run/halo/app/controller/content/MainController.java\n--- a/src/main/java/run/halo/app/controller/content/MainController.java\n+++ b/src/main/java/run/halo/app/controller/content/MainController.java\n@@ -37,24 +37,23 @@ public MainController(UserService userService, OptionService optionService, Halo\n         this.haloProperties = haloProperties;\n     }\n \n-    @GetMapping(\"/{permlink}\")\n+    @GetMapping(\"/halo/{permlink}\")\n     @Deprecated\n     public String admin(@PathVariable(name = \"permlink\") String permlink) {\n-        // ###WARNING!!! Here will lead to redirect to swagger-ui/index.html while accessing swagger-ui.html\n-        return \"redirect:/\" + permlink + \"/index.html\";\n+        return \"redirect:/halo/\" + permlink + \"/index.html\";\n     }\n \n-    @GetMapping(\"/install\")\n-    public String installation() {\n-        return \"redirect:\" + haloProperties.getAdminPath() + \"/index.html#install\";\n-    }\n-\n-    @GetMapping(\"/version\")\n+    @GetMapping(\"/halo/version\")\n     @ResponseBody\n     public String version() {\n         return HaloConst.HALO_VERSION;\n     }\n \n+    @GetMapping(\"/install\")\n+    public String installation() {\n+        return \"redirect:/halo\" + haloProperties.getAdminPath() + \"/index.html#install\";\n+    }\n+\n     @GetMapping(\"/avatar\")\n     public void avatar(HttpServletResponse response) throws IOException {\n         User user = userService.getCurrentUser().orElseThrow(() -> new ServiceException(\"未查询到博主信息\"));\n\ndiff --git a/src/main/java/run/halo/app/listener/StartedListener.java b/src/main/java/run/halo/app/listener/StartedListener.java\n--- a/src/main/java/run/halo/app/listener/StartedListener.java\n+++ b/src/main/java/run/halo/app/listener/StartedListener.java\n@@ -44,7 +44,6 @@ public class StartedListener implements ApplicationListener<ApplicationStartedEv\n \n     @Override\n     public void onApplicationEvent(ApplicationStartedEvent event) {\n-        // save halo version to database\n         this.printStartInfo();\n         this.initThemes();\n     }\n@@ -53,7 +52,7 @@ private void printStartInfo() {\n         String blogUrl = optionService.getBlogBaseUrl();\n \n         log.info(\"Halo started at         {}\", blogUrl);\n-        log.info(\"Halo admin started at   {}{}\", blogUrl, haloProperties.getAdminPath());\n+        log.info(\"Halo admin started at   {}/halo{}\", blogUrl, haloProperties.getAdminPath());\n         if (!haloProperties.isDocDisabled()) {\n             log.debug(\"Halo doc was enable at  {}/swagger-ui.html\", blogUrl);\n         }\n@@ -65,12 +64,6 @@ private void printStartInfo() {\n     private void initThemes() {\n         // Whether the blog has initialized\n         Boolean isInstalled = optionService.getByPropertyOrDefault(PrimaryProperties.IS_INSTALLED, Boolean.class, false);\n-\n-        /*if (haloProperties.isProductionEnv() && isInstalled) {\n-            // Skip\n-            return;\n-        }*/\n-\n         try {\n             String themeClassPath = ResourceUtils.CLASSPATH_URL_PREFIX + ThemeService.THEME_FOLDER;\n \n@@ -94,9 +87,9 @@ private void initThemes() {\n             // Fix the problem that the project cannot start after moving to a new server\n             if (!haloProperties.isProductionEnv() || Files.notExists(themePath) || !isInstalled) {\n                 FileUtils.copyFolder(source, themePath);\n-                log.info(\"Copied theme folder from [{}] to [{}]\", source, themePath);\n+                log.debug(\"Copied theme folder from [{}] to [{}]\", source, themePath);\n             } else {\n-                log.info(\"Skipped copying theme folder due to existence of theme folder\");\n+                log.debug(\"Skipped copying theme folder due to existence of theme folder\");\n             }\n         } catch (Exception e) {\n             throw new RuntimeException(\"Initialize internal theme to user path error\", e);",
    "output": "fixed: swagger-ui address redirect to 404."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/ContentFeedController.java b/src/main/java/run/halo/app/controller/content/ContentFeedController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentFeedController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentFeedController.java\n@@ -16,7 +16,6 @@\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.ResponseBody;\n import org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer;\n-import run.halo.app.config.properties.HaloProperties;\n import run.halo.app.model.entity.Post;\n import run.halo.app.model.enums.PostStatus;\n import run.halo.app.model.vo.PostListVO;\n@@ -44,16 +43,13 @@ public class ContentFeedController {\n     private final PostService postService;\n     private final OptionService optionService;\n     private final FreeMarkerConfigurer freeMarker;\n-    private final HaloProperties haloProperties;\n \n     public ContentFeedController(PostService postService,\n                                  OptionService optionService,\n-                                 FreeMarkerConfigurer freeMarker,\n-                                 HaloProperties haloProperties) {\n+                                 FreeMarkerConfigurer freeMarker) {\n         this.postService = postService;\n         this.optionService = optionService;\n         this.freeMarker = freeMarker;\n-        this.haloProperties = haloProperties;\n     }\n \n     /**\n@@ -129,8 +125,6 @@ public String sitemapHtml(Model model,\n     @GetMapping(value = \"robots.txt\", produces = MediaType.TEXT_PLAIN_VALUE)\n     @ResponseBody\n     public String robots(Model model) throws IOException, TemplateException {\n-        String adminPath = haloProperties.getAdminPath();\n-        model.addAttribute(\"adminPath\", adminPath);\n         Template template = freeMarker.getConfiguration().getTemplate(\"common/web/robots.ftl\");\n         return FreeMarkerTemplateUtils.processTemplateIntoString(template, model);\n     }",
    "output": "feat: hide admin path in robot.txt"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/dto/BackupDTO.java b/src/main/java/run/halo/app/model/dto/BackupDTO.java\n--- a/src/main/java/run/halo/app/model/dto/BackupDTO.java\n+++ b/src/main/java/run/halo/app/model/dto/BackupDTO.java\n@@ -14,4 +14,6 @@ public class BackupDTO {\n     private String downloadUrl;\n \n     private String filename;\n+\n+    private long updateTime;\n }\n\ndiff --git a/src/main/java/run/halo/app/model/support/HaloConst.java b/src/main/java/run/halo/app/model/support/HaloConst.java\n--- a/src/main/java/run/halo/app/model/support/HaloConst.java\n+++ b/src/main/java/run/halo/app/model/support/HaloConst.java\n@@ -22,6 +22,11 @@ public class HaloConst {\n      */\n     public final static String TEMP_DIR = System.getProperties().getProperty(\"java.io.tmpdir\");\n \n+    /**\n+     * Halo backup prefix.\n+     */\n+    public final static String HALO_BACKUP_PREFIX = \"halo-backup-\";\n+\n     /**\n      * Default theme name.\n      */\n\ndiff --git a/src/main/java/run/halo/app/service/impl/BackupServiceImpl.java b/src/main/java/run/halo/app/service/impl/BackupServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/BackupServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/BackupServiceImpl.java\n@@ -15,11 +15,11 @@\n import run.halo.app.config.properties.HaloProperties;\n import run.halo.app.exception.NotFoundException;\n import run.halo.app.exception.ServiceException;\n-import run.halo.app.model.dto.AttachmentDTO;\n import run.halo.app.model.dto.BackupDTO;\n import run.halo.app.model.dto.post.BasePostDetailDTO;\n import run.halo.app.model.entity.Post;\n import run.halo.app.model.entity.Tag;\n+import run.halo.app.model.support.HaloConst;\n import run.halo.app.service.BackupService;\n import run.halo.app.service.OptionService;\n import run.halo.app.service.PostService;\n@@ -148,7 +148,7 @@ public BackupDTO zipWorkDirectory() {\n         // Zip work directory to temporary file\n         try {\n             // Create zip path for halo zip\n-            String haloZipFileName = new StringBuilder().append(\"Halo-backup-\")\n+            String haloZipFileName = new StringBuilder().append(HaloConst.HALO_BACKUP_PREFIX)\n                     .append(LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd-HH-mm-ss\")))\n                     .append(IdUtil.simpleUUID())\n                     .append(\".zip\").toString();\n@@ -158,15 +158,8 @@ public BackupDTO zipWorkDirectory() {\n             // Zip halo\n             run.halo.app.utils.FileUtils.zip(Paths.get(this.halo.getWorkDir()), haloZipPath);\n \n-            // Build download url\n-            String downloadUrl = buildDownloadUrl(haloZipFileName);\n-\n-            // Build attachment dto\n-            BackupDTO backup = new BackupDTO();\n-            backup.setDownloadUrl(downloadUrl);\n-            backup.setFilename(haloZipFileName);\n-\n-            return backup;\n+            // Build backup dto\n+            return buildBackupDto(haloZipPath);\n         } catch (IOException e) {\n             throw new ServiceException(\"Failed to backup halo\", e);\n         }\n@@ -175,19 +168,19 @@ public BackupDTO zipWorkDirectory() {\n     @Override\n     public List<BackupDTO> listHaloBackups() {\n         try {\n-            return Files.list(Paths.get(halo.getBackupDir())).map(backupPath -> {\n-                // Get filename\n-                String filename = backupPath.getFileName().toString();\n-                // Build download url\n-                String downloadUrl = buildDownloadUrl(filename);\n-\n-                // Build backup dto\n-                BackupDTO backup = new BackupDTO();\n-                backup.setDownloadUrl(downloadUrl);\n-                backup.setFilename(filename);\n-\n-                return backup;\n-            }).collect(Collectors.toList());\n+            // Build backup dto\n+            return Files.list(Paths.get(halo.getBackupDir()))\n+                    .filter(backupPath -> StringUtils.startsWithIgnoreCase(backupPath.getFileName().toString(), HaloConst.HALO_BACKUP_PREFIX))\n+                    .map(this::buildBackupDto)\n+                    .sorted((leftBackup, rightBackup) -> {\n+                        // Sort the result\n+                        if (leftBackup.getUpdateTime() < rightBackup.getUpdateTime()) {\n+                            return 1;\n+                        } else if (leftBackup.getUpdateTime() > rightBackup.getUpdateTime()) {\n+                            return -1;\n+                        }\n+                        return 0;\n+                    }).collect(Collectors.toList());\n         } catch (IOException e) {\n             throw new ServiceException(\"Failed to fetch backups\", e);\n         }\n@@ -224,6 +217,28 @@ public static String sanitizeFilename(final String unsanitized) {\n                 replaceAll(\"\\\\s\", \"\");\n     }\n \n+    /**\n+     * Builds backup dto.\n+     *\n+     * @param backupPath backup path must not be null\n+     * @return backup dto\n+     */\n+    private BackupDTO buildBackupDto(@NonNull Path backupPath) {\n+        Assert.notNull(backupPath, \"Backup path must not be null\");\n+\n+        String backupFileName = backupPath.getFileName().toString();\n+        BackupDTO backup = new BackupDTO();\n+        backup.setDownloadUrl(buildDownloadUrl(backupFileName));\n+        backup.setFilename(backupFileName);\n+        try {\n+            backup.setUpdateTime(Files.getLastModifiedTime(backupPath).toMillis());\n+        } catch (IOException e) {\n+            throw new ServiceException(\"Failed to get last modified time of \" + backupPath.toString(), e);\n+        }\n+\n+        return backup;\n+    }\n+\n     /**\n      * Builds download url.\n      *",
    "output": "Add updateTime property into BackupDTO"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/MainController.java b/src/main/java/run/halo/app/controller/content/MainController.java\n--- a/src/main/java/run/halo/app/controller/content/MainController.java\n+++ b/src/main/java/run/halo/app/controller/content/MainController.java\n@@ -37,10 +37,12 @@ public MainController(UserService userService, OptionService optionService, Halo\n         this.haloProperties = haloProperties;\n     }\n \n-//    @GetMapping(\"/{permlink}\")\n-//    public String admin(@PathVariable(name = \"permlink\") String permlink) {\n-//        return \"redirect:/\" + permlink + \"/index.html\";\n-//    }\n+    @GetMapping(\"/{permlink}\")\n+    @Deprecated\n+    public String admin(@PathVariable(name = \"permlink\") String permlink) {\n+        // ###WARNING!!! Here will lead to redirect to swagger-ui/index.html while accessing swagger-ui.html\n+        return \"redirect:/\" + permlink + \"/index.html\";\n+    }\n \n     @GetMapping(\"/install\")\n     public String installation() {",
    "output": "Comment a warning on MainController redirection"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/utils/FileUtils.java b/src/main/java/run/halo/app/utils/FileUtils.java\n--- a/src/main/java/run/halo/app/utils/FileUtils.java\n+++ b/src/main/java/run/halo/app/utils/FileUtils.java\n@@ -1,12 +1,15 @@\n package run.halo.app.utils;\n \n import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.StringUtils;\n import org.springframework.lang.NonNull;\n import org.springframework.lang.Nullable;\n import org.springframework.util.Assert;\n import run.halo.app.exception.ForbiddenException;\n \n import java.io.ByteArrayInputStream;\n+import java.io.File;\n import java.io.IOException;\n import java.io.InputStream;\n import java.nio.file.*;\n@@ -16,6 +19,7 @@\n import java.util.stream.Stream;\n import java.util.zip.ZipEntry;\n import java.util.zip.ZipInputStream;\n+import java.util.zip.ZipOutputStream;\n \n /**\n  * File utilities.\n@@ -117,6 +121,54 @@ public static void unzip(@NonNull ZipInputStream zis, @NonNull Path targetPath)\n         }\n     }\n \n+    /**\n+     * Zip folder or file.\n+     *\n+     * @param fileToZip file path to zip must not be null\n+     * @param zipOut    zip output stream must not be null\n+     * @throws IOException\n+     */\n+    public static void zip(@NonNull Path fileToZip, @NonNull ZipOutputStream zipOut) throws IOException {\n+        // Zip file\n+        zip(fileToZip, fileToZip.getFileName().toString(), zipOut);\n+    }\n+\n+    /**\n+     * Zip folder or file.\n+     *\n+     * @param fileToZip file path to zip must not be null\n+     * @param fileName  file name must not be blank\n+     * @param zipOut    zip output stream must not be null\n+     * @throws IOException\n+     */\n+    private static void zip(@NonNull Path fileToZip, @NonNull String fileName, @NonNull ZipOutputStream zipOut) throws IOException {\n+        if (Files.isDirectory(fileToZip)) {\n+            log.debug(\"Try to zip folder: [{}]\", fileToZip);\n+            // Append with '/' if missing\n+            String folderName = StringUtils.appendIfMissing(fileName, File.separator, File.separator);\n+            // Create zip entry and put into zip output stream\n+            zipOut.putNextEntry(new ZipEntry(folderName));\n+            // Close entry for writing the next entry\n+            zipOut.closeEntry();\n+\n+            // Iterate the sub files recursively\n+            List<Path> subFiles = Files.list(fileToZip).collect(Collectors.toList());\n+            for (Path subFileToZip : subFiles) {\n+                zip(subFileToZip, folderName + subFileToZip.getFileName(), zipOut);\n+            }\n+        } else {\n+            // Open file to be zipped\n+            try (InputStream inputStream = Files.newInputStream(fileToZip)) {\n+                // Create zip entry for target file\n+                ZipEntry zipEntry = new ZipEntry(fileName);\n+                // Put the entry into zip output stream\n+                zipOut.putNextEntry(zipEntry);\n+                // Copy\n+                IOUtils.copy(inputStream, zipOut);\n+            }\n+        }\n+    }\n+\n \n     /**\n      * Unzips content to the target path.\n\ndiff --git a/src/test/java/run/halo/app/utils/FileUtilsTest.java b/src/test/java/run/halo/app/utils/FileUtilsTest.java\n--- a/src/test/java/run/halo/app/utils/FileUtilsTest.java\n+++ b/src/test/java/run/halo/app/utils/FileUtilsTest.java\n@@ -1,21 +1,26 @@\n package run.halo.app.utils;\n \n+import lombok.extern.slf4j.Slf4j;\n import org.junit.Assert;\n import org.junit.Test;\n \n+import java.io.File;\n import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.nio.file.Paths;\n import java.util.List;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n+import java.util.zip.ZipOutputStream;\n \n import static org.hamcrest.Matchers.equalTo;\n \n /**\n  * @author johnniang\n  * @date 19-4-19\n  */\n+@Slf4j\n public class FileUtilsTest {\n \n     @Test\n@@ -57,4 +62,30 @@ public void deleteFolder() throws IOException {\n \n         Assert.assertTrue(Files.notExists(tempDirectory));\n     }\n+\n+    @Test\n+    public void zipFolderTest() throws IOException {\n+        // Create some temporary files\n+        Path rootFolder = Files.createTempDirectory(\"zip-root-\");\n+        log.debug(\"Folder name: [{}]\", rootFolder.getFileName());\n+        Files.createTempFile(rootFolder, \"zip-file1-\", \".txt\");\n+        Files.createTempFile(rootFolder, \"zip-file2-\", \".txt\");\n+        Path subRootFolder = Files.createTempDirectory(rootFolder, \"zip-subroot-\");\n+        Files.createTempFile(subRootFolder, \"zip-subfile1-\", \".txt\");\n+        Files.createTempFile(subRootFolder, \"zip-subfile2-\", \".txt\");\n+\n+        // Create target file\n+        Path zipToStore = Files.createTempFile(\"zipped-\", \".zip\");\n+        // Create zip output stream\n+        try (ZipOutputStream zipOut = new ZipOutputStream(Files.newOutputStream(zipToStore))) {\n+            // Zip file\n+            FileUtils.zip(rootFolder, zipOut);\n+        }\n+\n+\n+        // Clear the test folder created before\n+        FileUtils.deleteFolder(rootFolder);\n+        Files.delete(zipToStore);\n+\n+    }\n }\n\\ No newline at end of file\n\ndiff --git a/src/test/java/run/halo/app/utils/PathsTest.java b/src/test/java/run/halo/app/utils/PathsTest.java\n--- a/src/test/java/run/halo/app/utils/PathsTest.java\n+++ b/src/test/java/run/halo/app/utils/PathsTest.java\n@@ -17,7 +17,6 @@\n  */\n public class PathsTest {\n \n-\n     @Test\n     public void getTest() {\n         Path path = Paths.get(\"/home/test/\", \"/upload/test.txt\");",
    "output": "Accomplish zip utility"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n@@ -335,47 +335,46 @@ public void updateAdminAssets() {\n \n         Object assetsObject = responseEntity.getBody().get(\"assets\");\n \n-        if (assetsObject instanceof List) {\n-            try {\n-                List assets = (List) assetsObject;\n-                Map assetMap = (Map) assets.stream()\n-                        .filter(assetPredicate())\n-                        .findFirst()\n-                        .orElseThrow(() -> new ServiceException(\"Halo admin 最新版暂无资源文件，请稍后再试\"));\n-\n-                Object browserDownloadUrl = assetMap.getOrDefault(\"browser_download_url\", \"\");\n-                // Download the assets\n-                ResponseEntity<byte[]> downloadResponseEntity = restTemplate.getForEntity(browserDownloadUrl.toString(), byte[].class);\n-\n-                if (downloadResponseEntity == null ||\n-                        downloadResponseEntity.getStatusCode().isError() ||\n-                        downloadResponseEntity.getBody() == null) {\n-                    throw new ServiceException(\"Failed to request remote url: \" + browserDownloadUrl.toString()).setErrorData(browserDownloadUrl.toString());\n-                }\n-\n-                String adminTargetName = haloProperties.getWorkDir() + HALO_ADMIN_RELATIVE_PATH;\n-\n-                Path adminPath = Paths.get(adminTargetName);\n-                Path adminBackupPath = Paths.get(haloProperties.getWorkDir(), HALO_ADMIN_RELATIVE_BACKUP_PATH);\n-\n-                backupAndClearAdminAssetsIfPresent(adminPath, adminBackupPath);\n-\n-                // Create temp folder\n-                Path assetTempPath = FileUtils.createTempDirectory()\n-                        .resolve(assetMap.getOrDefault(\"name\", \"halo-admin-latest.zip\").toString());\n-\n-                // Unzip\n-                FileUtils.unzip(downloadResponseEntity.getBody(), assetTempPath);\n-\n-                // Copy it to template/admin folder\n-                FileUtils.copyFolder(FileUtils.tryToSkipZipParentFolder(assetTempPath), adminPath);\n-            } catch (Throwable t) {\n-                log.error(\"Failed to update halo admin\", t);\n-                throw new ServiceException(\"更新 Halo admin 失败\");\n-            }\n-        } else {\n+        if (!(assetsObject instanceof List)) {\n             throw new ServiceException(\"Github API 返回内容有误\").setErrorData(assetsObject);\n         }\n+\n+        try {\n+            List assets = (List) assetsObject;\n+            Map assetMap = (Map) assets.stream()\n+                    .filter(assetPredicate())\n+                    .findFirst()\n+                    .orElseThrow(() -> new ServiceException(\"Halo admin 最新版暂无资源文件，请稍后再试\"));\n+\n+            Object browserDownloadUrl = assetMap.getOrDefault(\"browser_download_url\", \"\");\n+            // Download the assets\n+            ResponseEntity<byte[]> downloadResponseEntity = restTemplate.getForEntity(browserDownloadUrl.toString(), byte[].class);\n+\n+            if (downloadResponseEntity == null ||\n+                    downloadResponseEntity.getStatusCode().isError() ||\n+                    downloadResponseEntity.getBody() == null) {\n+                throw new ServiceException(\"Failed to request remote url: \" + browserDownloadUrl.toString()).setErrorData(browserDownloadUrl.toString());\n+            }\n+\n+            String adminTargetName = haloProperties.getWorkDir() + HALO_ADMIN_RELATIVE_PATH;\n+\n+            Path adminPath = Paths.get(adminTargetName);\n+            Path adminBackupPath = Paths.get(haloProperties.getWorkDir(), HALO_ADMIN_RELATIVE_BACKUP_PATH);\n+\n+            backupAndClearAdminAssetsIfPresent(adminPath, adminBackupPath);\n+\n+            // Create temp folder\n+            Path assetTempPath = FileUtils.createTempDirectory()\n+                    .resolve(assetMap.getOrDefault(\"name\", \"halo-admin-latest.zip\").toString());\n+\n+            // Unzip\n+            FileUtils.unzip(downloadResponseEntity.getBody(), assetTempPath);\n+\n+            // Copy it to template/admin folder\n+            FileUtils.copyFolder(FileUtils.tryToSkipZipParentFolder(assetTempPath), adminPath);\n+        } catch (Throwable t) {\n+            throw new ServiceException(\"更新 Halo admin 失败\", t);\n+        }\n     }\n \n     @NonNull",
    "output": "Update exception throw logic"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/base/AbstractCrudService.java b/src/main/java/run/halo/app/service/base/AbstractCrudService.java\n--- a/src/main/java/run/halo/app/service/base/AbstractCrudService.java\n+++ b/src/main/java/run/halo/app/service/base/AbstractCrudService.java\n@@ -290,7 +290,7 @@ public void remove(DOMAIN domain) {\n     @Override\n     public void removeInBatch(Collection<ID> ids) {\n         if (CollectionUtils.isEmpty(ids)) {\n-            log.warn(domainName + \" id collection is empty\");\n+            log.debug(domainName + \" id collection is empty\");\n             return;\n         }\n \n@@ -305,7 +305,7 @@ public void removeInBatch(Collection<ID> ids) {\n     @Override\n     public void removeAll(Collection<DOMAIN> domains) {\n         if (CollectionUtils.isEmpty(domains)) {\n-            log.warn(domainName + \" collection is empty\");\n+            log.debug(domainName + \" collection is empty\");\n             return;\n         }\n         repository.deleteInBatch(domains);",
    "output": "Change some warning log to debug level"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/ContentArchiveController.java b/src/main/java/run/halo/app/controller/content/ContentArchiveController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentArchiveController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentArchiveController.java\n@@ -187,7 +187,7 @@ public String password(@PathVariable(\"url\") String url,\n     }\n \n     @PostMapping(value = \"{url}/password\")\n-    @CacheLock\n+    @CacheLock(traceRequest = true, expired = 2)\n     public String password(@PathVariable(\"url\") String url,\n                            @RequestParam(value = \"password\") String password) {\n         Post post = postService.getBy(PostStatus.INTIMATE, url);",
    "output": "Enable ip lock while updating password"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/ContentSheetController.java b/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n@@ -2,6 +2,7 @@\n \n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.PageRequest;\n+import org.springframework.data.domain.Pageable;\n import org.springframework.data.domain.Sort;\n import org.springframework.data.web.SortDefault;\n import org.springframework.stereotype.Controller;\n@@ -11,14 +12,12 @@\n import org.springframework.web.bind.annotation.RequestParam;\n import run.halo.app.cache.StringCacheStore;\n import run.halo.app.exception.ForbiddenException;\n+import run.halo.app.model.dto.PhotoDTO;\n import run.halo.app.model.entity.Sheet;\n import run.halo.app.model.enums.PostStatus;\n import run.halo.app.model.support.HaloConst;\n import run.halo.app.model.vo.BaseCommentVO;\n-import run.halo.app.service.OptionService;\n-import run.halo.app.service.SheetCommentService;\n-import run.halo.app.service.SheetService;\n-import run.halo.app.service.ThemeService;\n+import run.halo.app.service.*;\n import run.halo.app.utils.MarkdownUtils;\n \n import java.util.concurrent.TimeUnit;\n@@ -41,18 +40,22 @@ public class ContentSheetController {\n \n     private final SheetCommentService sheetCommentService;\n \n+    private final PhotoService photoService;\n+\n     private final OptionService optionService;\n \n     private final StringCacheStore cacheStore;\n \n     public ContentSheetController(SheetService sheetService,\n                                   ThemeService themeService,\n                                   SheetCommentService sheetCommentService,\n+                                  PhotoService photoService,\n                                   OptionService optionService,\n                                   StringCacheStore cacheStore) {\n         this.sheetService = sheetService;\n         this.themeService = themeService;\n         this.sheetCommentService = sheetCommentService;\n+        this.photoService = photoService;\n         this.optionService = optionService;\n         this.cacheStore = cacheStore;\n     }\n@@ -63,7 +66,26 @@ public ContentSheetController(SheetService sheetService,\n      * @return template path: themes/{theme}/photos.ftl\n      */\n     @GetMapping(value = \"/photos\")\n-    public String photos() {\n+    public String photos(Model model,\n+                         @RequestParam(value = \"size\", required = false, defaultValue = \"10\") Integer size) {\n+        return photos(model, 1, size);\n+    }\n+\n+    /**\n+     * Render photo page\n+     *\n+     * @param model model\n+     * @param page  current page\n+     * @param size  current page size\n+     * @return template path: themes/{theme}/photos.ftl\n+     */\n+    @GetMapping(value = \"/photos/page/{page}\")\n+    public String photos(Model model,\n+                         @PathVariable(value = \"page\") Integer page,\n+                         @RequestParam(value = \"size\", required = false, defaultValue = \"10\") Integer size) {\n+        Pageable pageable = PageRequest.of(page >= 1 ? page - 1 : page, size, Sort.by(DESC, \"createTime\"));\n+        Page<PhotoDTO> photos = photoService.pageBy(pageable);\n+        model.addAttribute(\"photos\", photos);\n         return themeService.render(\"photos\");\n     }\n \n\ndiff --git a/src/main/java/run/halo/app/service/PhotoService.java b/src/main/java/run/halo/app/service/PhotoService.java\n--- a/src/main/java/run/halo/app/service/PhotoService.java\n+++ b/src/main/java/run/halo/app/service/PhotoService.java\n@@ -17,6 +17,7 @@\n  * Photo service interface.\n  *\n  * @author johnniang\n+ * @author ryanwang\n  * @date 2019-03-14\n  */\n public interface PhotoService extends CrudService<Photo, Integer> {\n@@ -46,6 +47,14 @@ public interface PhotoService extends CrudService<Photo, Integer> {\n      */\n     List<PhotoDTO> listByTeam(@NonNull String team, Sort sort);\n \n+    /**\n+     * Pages photo output dtos.\n+     *\n+     * @param pageable page info must not be null\n+     * @return a page of photo output dto\n+     */\n+    Page<PhotoDTO> pageBy(@NonNull Pageable pageable);\n+\n     /**\n      * Pages photo output dtos.\n      *\n\ndiff --git a/src/main/java/run/halo/app/service/impl/PhotoServiceImpl.java b/src/main/java/run/halo/app/service/impl/PhotoServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PhotoServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PhotoServiceImpl.java\n@@ -82,6 +82,15 @@ public List<PhotoDTO> listByTeam(String team, Sort sort) {\n         return photos.stream().map(photo -> (PhotoDTO) new PhotoDTO().convertFrom(photo)).collect(Collectors.toList());\n     }\n \n+    @Override\n+    public Page<PhotoDTO> pageBy(Pageable pageable) {\n+        Assert.notNull(pageable, \"Page info must not be null\");\n+\n+        Page<Photo> photos = photoRepository.findAll(pageable);\n+\n+        return photos.map(photo -> new PhotoDTO().convertFrom(photo));\n+    }\n+\n     @Override\n     public Page<PhotoDTO> pageDtosBy(Pageable pageable, PhotoQuery photoQuery) {\n         Assert.notNull(pageable, \"Page info must not be null\");",
    "output": "solved #361"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/entity/BasePost.java b/src/main/java/run/halo/app/model/entity/BasePost.java\n--- a/src/main/java/run/halo/app/model/entity/BasePost.java\n+++ b/src/main/java/run/halo/app/model/entity/BasePost.java\n@@ -48,15 +48,15 @@ public class BasePost extends BaseEntity {\n     /**\n      * Original content,not format.\n      */\n-    @Column(name = \"original_content\", columnDefinition = \"text not null\")\n+    @Column(name = \"original_content\", columnDefinition = \"longtext not null\")\n     private String originalContent;\n \n     /**\n      * Rendered content.\n      *\n      * @see run.halo.app.utils.MarkdownUtils#renderHtml(String)\n      */\n-    @Column(name = \"format_content\", columnDefinition = \"text not null\")\n+    @Column(name = \"format_content\", columnDefinition = \"longtext not null\")\n     private String formatContent;\n \n     /**",
    "output": "fixed #373"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/params/PostParam.java b/src/main/java/run/halo/app/model/params/PostParam.java\n--- a/src/main/java/run/halo/app/model/params/PostParam.java\n+++ b/src/main/java/run/halo/app/model/params/PostParam.java\n@@ -11,6 +11,7 @@\n import javax.validation.constraints.Min;\n import javax.validation.constraints.NotBlank;\n import javax.validation.constraints.Size;\n+import java.net.URLEncoder;\n import java.util.Date;\n import java.util.Set;\n \n@@ -62,7 +63,7 @@ public class PostParam implements InputConverter<Post> {\n     @Override\n     public Post convertTo() {\n         if (StringUtils.isBlank(url)) {\n-            url = title.replace(\".\",\"\");\n+            url = URLEncoder.encode(title.replace(\".\",\"\"));\n         }\n         if (null == thumbnail) {\n             thumbnail = \"\";\n@@ -74,7 +75,7 @@ public Post convertTo() {\n     @Override\n     public void update(Post post) {\n         if (StringUtils.isBlank(url)) {\n-            url = title.replace(\".\",\"\");\n+            url = URLEncoder.encode(title.replace(\".\",\"\"));\n         }\n         if (null == thumbnail) {\n             thumbnail = \"\";",
    "output": "Merge branch 'dev' of github.com:halo-dev/halo into dev"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/entity/Attachment.java b/src/main/java/run/halo/app/model/entity/Attachment.java\n--- a/src/main/java/run/halo/app/model/entity/Attachment.java\n+++ b/src/main/java/run/halo/app/model/entity/Attachment.java\n@@ -52,7 +52,7 @@ public class Attachment extends BaseEntity {\n     /**\n      * Attachment media type.\n      */\n-    @Column(name = \"media_type\", columnDefinition = \"varchar(50) not null\")\n+    @Column(name = \"media_type\", columnDefinition = \"varchar(127) not null\")\n     private String mediaType;\n \n     /**",
    "output": "fix #356"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/handler/file/LocalFileHandler.java b/src/main/java/run/halo/app/handler/file/LocalFileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/LocalFileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/LocalFileHandler.java\n@@ -17,13 +17,16 @@\n \n import javax.imageio.ImageIO;\n import java.awt.image.BufferedImage;\n+import java.io.File;\n import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n import java.util.Calendar;\n+import java.util.List;\n import java.util.Objects;\n import java.util.concurrent.locks.ReentrantLock;\n+import net.sf.image4j.codec.ico.ICODecoder;\n \n import static run.halo.app.model.support.HaloConst.FILE_SEPARATOR;\n \n@@ -151,7 +154,7 @@ public UploadResult upload(MultipartFile file) {\n                     Path thumbnailPath = Paths.get(workDir + thumbnailSubFilePath);\n \n                     // Read as image\n-                    BufferedImage originalImage = ImageIO.read(uploadPath.toFile());\n+                    BufferedImage originalImage = getImageFromFile(uploadPath.toFile(), extension);\n                     // Set width and height\n                     uploadResult.setWidth(originalImage.getWidth());\n                     uploadResult.setHeight(originalImage.getHeight());\n@@ -239,4 +242,14 @@ private boolean generateThumbnail(BufferedImage originalImage, Path thumbPath, S\n         return result;\n     }\n \n+    private BufferedImage getImageFromFile(File file, String extension) throws IOException {\n+        log.debug(\"Current File type is : [{}]\", extension);\n+\n+        if (\"ico\".equals(extension)) {\n+            return ICODecoder.read(file).get(0);\n+        } else {\n+            return ImageIO.read(file);\n+        }\n+    }\n+\n }",
    "output": "fix error when input ico"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/MigrateController.java b/src/main/java/run/halo/app/controller/admin/api/MigrateController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/MigrateController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/MigrateController.java\n@@ -36,4 +36,10 @@ public void migrateHaloOldVersion(@RequestPart(\"file\") MultipartFile file) {\n     public void migrateWordPress(@RequestPart(\"file\") MultipartFile file) {\n         migrateService.migrate(file, MigrateType.WORDPRESS);\n     }\n+\n+    @PostMapping(\"cnblogs\")\n+    @ApiOperation(\"Migrate from cnblogs\")\n+    public void migrateCnBlogs(@RequestPart(\"file\") MultipartFile file) {\n+        migrateService.migrate(file, MigrateType.CNBLOGS);\n+    }\n }\n\ndiff --git a/src/main/java/run/halo/app/handler/migrate/CnBlogsMigrateHandler.java b/src/main/java/run/halo/app/handler/migrate/CnBlogsMigrateHandler.java\n--- a/src/main/java/run/halo/app/handler/migrate/CnBlogsMigrateHandler.java\n+++ b/src/main/java/run/halo/app/handler/migrate/CnBlogsMigrateHandler.java\n@@ -0,0 +1,23 @@\n+package run.halo.app.handler.migrate;\n+\n+import org.springframework.web.multipart.MultipartFile;\n+import run.halo.app.model.enums.MigrateType;\n+\n+/**\n+ * Cnblogs(https://cnblogs.com) migrate handler.\n+ *\n+ * @author ryanwang\n+ * @date 2019-10-30\n+ */\n+public class CnBlogsMigrateHandler implements MigrateHandler {\n+\n+    @Override\n+    public void migrate(MultipartFile file) {\n+        // TODO\n+    }\n+\n+    @Override\n+    public boolean supportType(MigrateType type) {\n+        return MigrateType.CNBLOGS.equals(type);\n+    }\n+}\n\ndiff --git a/src/main/java/run/halo/app/model/enums/MigrateType.java b/src/main/java/run/halo/app/model/enums/MigrateType.java\n--- a/src/main/java/run/halo/app/model/enums/MigrateType.java\n+++ b/src/main/java/run/halo/app/model/enums/MigrateType.java\n@@ -16,7 +16,12 @@ public enum MigrateType implements ValueEnum<Integer> {\n     /**\n      * WordPress\n      */\n-    WORDPRESS(1);\n+    WORDPRESS(1),\n+\n+    /**\n+     * cnblogs.com\n+     */\n+    CNBLOGS(2);\n \n     private Integer value;\n ",
    "output": "Refactor migrate api."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/params/PostParam.java b/src/main/java/run/halo/app/model/params/PostParam.java\n--- a/src/main/java/run/halo/app/model/params/PostParam.java\n+++ b/src/main/java/run/halo/app/model/params/PostParam.java\n@@ -11,6 +11,7 @@\n import javax.validation.constraints.Min;\n import javax.validation.constraints.NotBlank;\n import javax.validation.constraints.Size;\n+import java.net.URLEncoder;\n import java.util.Date;\n import java.util.Set;\n \n@@ -62,7 +63,7 @@ public class PostParam implements InputConverter<Post> {\n     @Override\n     public Post convertTo() {\n         if (StringUtils.isBlank(url)) {\n-            url = title.replace(\".\",\"\");\n+            url = URLEncoder.encode(title.replace(\".\",\"\"));\n         }\n         if (null == thumbnail) {\n             thumbnail = \"\";\n@@ -74,7 +75,7 @@ public Post convertTo() {\n     @Override\n     public void update(Post post) {\n         if (StringUtils.isBlank(url)) {\n-            url = title.replace(\".\",\"\");\n+            url = URLEncoder.encode(title.replace(\".\",\"\"));\n         }\n         if (null == thumbnail) {\n             thumbnail = \"\";",
    "output": "Update PostParam.java"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/HaloConfiguration.java b/src/main/java/run/halo/app/config/HaloConfiguration.java\n--- a/src/main/java/run/halo/app/config/HaloConfiguration.java\n+++ b/src/main/java/run/halo/app/config/HaloConfiguration.java\n@@ -151,6 +151,7 @@ public FilterRegistrationBean<AdminAuthenticationFilter> adminAuthenticationFilt\n                 \"/api/admin/refresh/*\",\n                 \"/api/admin/installations\",\n                 \"/api/admin/recoveries/migrations/*\",\n+                \"/api/admin/migrations/*\",\n                 \"/api/admin/is_installed\",\n                 \"/api/admin/password/code\",\n                 \"/api/admin/password/reset\"\n\ndiff --git a/src/main/java/run/halo/app/controller/admin/api/InstallController.java b/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n@@ -179,7 +179,7 @@ private Post createDefaultPostIfAbsent(@Nullable Category category) {\n     @Nullable\n     private Category createDefaultCategoryIfAbsent() {\n         long categoryCount = categoryService.count();\n-        if (categoryCount == 0) {\n+        if (categoryCount > 0) {\n             return null;\n         }\n \n\ndiff --git a/src/main/java/run/halo/app/controller/admin/api/MigrateController.java b/src/main/java/run/halo/app/controller/admin/api/MigrateController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/MigrateController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/MigrateController.java\n@@ -16,7 +16,7 @@\n  * @date 2019-10-29\n  */\n @RestController\n-@RequestMapping(\"/api/admin/migrates\")\n+@RequestMapping(\"/api/admin/migrations\")\n public class MigrateController {\n \n     private final MigrateService migrateService;\n\ndiff --git a/src/main/java/run/halo/app/handler/migrate/MigrateHandlers.java b/src/main/java/run/halo/app/handler/migrate/MigrateHandlers.java\n--- a/src/main/java/run/halo/app/handler/migrate/MigrateHandlers.java\n+++ b/src/main/java/run/halo/app/handler/migrate/MigrateHandlers.java\n@@ -42,6 +42,7 @@ public void upload(@NonNull MultipartFile file, @NonNull MigrateType migrateType\n         for (MigrateHandler migrateHandler : migrateHandlers) {\n             if (migrateHandler.supportType(migrateType)) {\n                 migrateHandler.migrate(file);\n+                return;\n             }\n         }\n ",
    "output": "Refactor migrate api."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/utils/XmlTransferMapUtils.java b/src/main/java/run/halo/app/utils/XmlTransferMapUtils.java\n--- a/src/main/java/run/halo/app/utils/XmlTransferMapUtils.java\n+++ b/src/main/java/run/halo/app/utils/XmlTransferMapUtils.java\n@@ -13,6 +13,7 @@\n  * @date 2019-10-29 14:49\n  */\n public class XmlTransferMapUtils {\n+\n     /**\n      * 存储在此集合中的节点名称都会被解析为一个List存储\n      */",
    "output": "merge conflicts"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/utils/XmlTransferMapUtils.java b/src/main/java/run/halo/app/utils/XmlTransferMapUtils.java\n--- a/src/main/java/run/halo/app/utils/XmlTransferMapUtils.java\n+++ b/src/main/java/run/halo/app/utils/XmlTransferMapUtils.java\n@@ -4,54 +4,70 @@\n import org.dom4j.Element;\n import org.dom4j.io.SAXReader;\n \n-import java.io.File;\n-import java.io.FileInputStream;\n+import java.io.*;\n import java.util.*;\n \n /**\n- * 解析 WordPress 导出的 xml 文章数据为 Map 结果集\n- *\n+ * 解析wordpress导出的xml文章数据为Map结果集\n  * @author guqing\n+ * @date 2019-10-29 14:49\n  */\n public class XmlTransferMapUtils {\n-\n     /**\n      * 存储在此集合中的节点名称都会被解析为一个List存储\n      */\n     private static final List<String> ARRAY_PROPERTY = Arrays.asList(\"channel\", \"item\", \"category\", \"postmeta\", \"comment\");\n \n     /**\n-     * 根据xml文件对象获取 xml 的根节点 rootElement 对象\n-     *\n+     * 需要解析成map集合的xml文件对象\n+     */\n+    private File file;\n+\n+    public XmlTransferMapUtils(File file) {\n+        this.file = file;\n+    }\n+\n+    /**\n+     * 根据xml文件对象获取xml的根节点rootElement对象\n      * @param file xml的文件对象\n      * @return 返回根节点元素\n      */\n-    public Element getRootElement(File file) {\n+    private Element getRootElement(File file) {\n         try {\n             SAXReader saxReader = new SAXReader();\n             FileInputStream fileInputStream = new FileInputStream(file);\n             Document document = saxReader.read(fileInputStream);\n+\n             return document.getRootElement();\n         } catch (Exception e) {\n             throw new RuntimeException(\"can not get root element\");\n         }\n     }\n \n+    /**\n+     * 获取xml的映射结果集对象\n+     * @return 返回xml解析得到的Map映射结果集\n+     */\n+    public Map<String, Object> getResultSetMapping() {\n+        Element rootElement = getRootElement(file);\n+        return getResultSetMapping(rootElement);\n+    }\n+\n \n     /**\n      * 根据根节点获取子节点元素集合递归遍历得到Map结果集\n-     *\n      * @param root xml的根节点元素对象\n      * @return 返回解析xml得到的Map结果集\n      */\n-    public Map<String, Object> getResultSetMapping(Element root) {\n-        Map<String, Object> result;\n+    private Map<String, Object> getResultSetMapping(Element root) {\n+        Map<String, Object> result = new HashMap<String, Object>();\n+\n         try {\n             // 获取根元素的所有子元素\n             List<Element> children = root.elements();\n \n             //递归遍历将xml节点数据解析为Map结果集\n-            result = transfer2Map(children, null);\n+            result = transfer2Map(children,null);\n         } catch (Exception e) {\n             throw new RuntimeException(\"can not transfer xml file to map.\" + e.getMessage());\n         }\n@@ -61,45 +77,67 @@ public Map<String, Object> getResultSetMapping(Element root) {\n \n     /**\n      * 递归解析xml，实现N层解析\n-     *\n      * @param elements 所有子节点元素集，随着递归遍历而改变\n-     * @param list     存储中间遍历结果的容器\n+     * @param list 存储中间遍历结果的容器\n      * @return 返回递归完成后的Map结果集映射\n      */\n-    private Map<String, Object> transfer2Map(List<Element> elements, List<Map<String, Object>> list) {\n+    private Map<String, Object> transfer2Map(List<Element> elements,List<Map<String,Object>> list){\n         Map<String, Object> map = new HashMap<String, Object>();\n \n-        for (Element element : elements) {\n-            String name = element.getName();\n-            //如果是定义成数组\n-            if (ARRAY_PROPERTY.contains(name)) {\n+        for(Element element : elements){\n+            // getName获取到的节点名称不带名称空间例如<wp:content/>获取到name为content\n+            String nameWithoutPrefix = element.getName();\n+\n+            // 需要使用的真是name默认等于不带名称空间的,如果名称存在空间则name的形式为: 名称空间:名称\n+            String name = nameWithoutPrefix;\n+            String preifx = element.getNamespace().getPrefix();\n+            if(isNotBlack(preifx)) {\n+                name =  preifx + \":\" +nameWithoutPrefix;\n+            }\n+\n+            //判断节点是否在定义的数组中,如果存在将其创建成List集合,否则作为文本\n+            if(ARRAY_PROPERTY.contains(name)) {\n                 //继续递归循环\n-                List<Map<String, Object>> sublist = new ArrayList<Map<String, Object>>();\n+                List<Map<String,Object>> sublist = new ArrayList<Map<String,Object>>();\n \n-                Map<String, Object> subMap = this.transfer2Map(element.elements(), sublist);\n+                Map<String,Object> subMap  = this.transfer2Map(element.elements(), sublist);\n \n                 //根据key获取是否已经存在\n                 Object object = map.get(name);\n                 //如果存在,合并\n-                if (object != null) {\n-                    List<Map<String, Object>> olist = (List<Map<String, Object>>) object;\n+                if(object !=null ){\n+                    List<Map<String,Object>> olist = (List<Map<String,Object>>)object;\n                     olist.add(subMap);\n                     map.put(name, olist);\n-                } else {\n+                }else{\n                     //否则直接存入map\n                     map.put(name, sublist);\n                 }\n-            } else {\n+            }else {\n                 //单个值存入map\n                 map.put(name, element.getTextTrim());\n             }\n         }\n \n         //存入list中\n-        if (list != null) {\n+        if(list != null) {\n             list.add(map);\n         }\n+\n         //返回结果集合\n         return map;\n     }\n+\n+    /**\n+     * 判断字符串是否为空,如果是空串返回 {@code true},否则 {@code false}\n+     * @param str 需要进行空串判断的字符串\n+     * @return 如果是空串返回true,否则返回false\n+     */\n+    private boolean isNotBlack(String str) {\n+        if(str != null && str.length() > 0 && str.trim().length() > 0) {\n+            return true;\n+        }\n+\n+        return false;\n+    }\n }",
    "output": "Fixed problem resolving overwriting of node values with the same name in different namespaces"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/utils/XmlTransferMapUtils.java b/src/main/java/run/halo/app/utils/XmlTransferMapUtils.java\n--- a/src/main/java/run/halo/app/utils/XmlTransferMapUtils.java\n+++ b/src/main/java/run/halo/app/utils/XmlTransferMapUtils.java\n@@ -4,54 +4,70 @@\n import org.dom4j.Element;\n import org.dom4j.io.SAXReader;\n \n-import java.io.File;\n-import java.io.FileInputStream;\n+import java.io.*;\n import java.util.*;\n \n /**\n- * 解析 WordPress 导出的 xml 文章数据为 Map 结果集\n- *\n+ * 解析wordpress导出的xml文章数据为Map结果集\n  * @author guqing\n+ * @date 2019-10-29 14:49\n  */\n-public class XmlTransferMapUtils {\n-\n+public class TransferMapProcessor {\n     /**\n      * 存储在此集合中的节点名称都会被解析为一个List存储\n      */\n     private static final List<String> ARRAY_PROPERTY = Arrays.asList(\"channel\", \"item\", \"category\", \"postmeta\", \"comment\");\n \n     /**\n-     * 根据xml文件对象获取 xml 的根节点 rootElement 对象\n-     *\n+     * 需要解析成map集合的xml文件对象\n+     */\n+    private File file;\n+\n+    public TransferMapProcessor(File file) {\n+        this.file = file;\n+    }\n+\n+    /**\n+     * 根据xml文件对象获取xml的根节点rootElement对象\n      * @param file xml的文件对象\n      * @return 返回根节点元素\n      */\n-    public Element getRootElement(File file) {\n+    private Element getRootElement(File file) {\n         try {\n             SAXReader saxReader = new SAXReader();\n             FileInputStream fileInputStream = new FileInputStream(file);\n             Document document = saxReader.read(fileInputStream);\n+\n             return document.getRootElement();\n         } catch (Exception e) {\n             throw new RuntimeException(\"can not get root element\");\n         }\n     }\n \n+    /**\n+     * 获取xml的映射结果集对象\n+     * @return 返回xml解析得到的Map映射结果集\n+     */\n+    public Map<String, Object> getResultSetMapping() {\n+        Element rootElement = getRootElement(file);\n+        return getResultSetMapping(rootElement);\n+    }\n+\n \n     /**\n      * 根据根节点获取子节点元素集合递归遍历得到Map结果集\n-     *\n      * @param root xml的根节点元素对象\n      * @return 返回解析xml得到的Map结果集\n      */\n-    public Map<String, Object> getResultSetMapping(Element root) {\n-        Map<String, Object> result;\n+    private Map<String, Object> getResultSetMapping(Element root) {\n+        Map<String, Object> result = new HashMap<String, Object>();\n+\n         try {\n             // 获取根元素的所有子元素\n             List<Element> children = root.elements();\n \n             //递归遍历将xml节点数据解析为Map结果集\n-            result = transfer2Map(children, null);\n+            result = transfer2Map(children,null);\n         } catch (Exception e) {\n             throw new RuntimeException(\"can not transfer xml file to map.\" + e.getMessage());\n         }\n@@ -61,45 +77,67 @@ public Map<String, Object> getResultSetMapping(Element root) {\n \n     /**\n      * 递归解析xml，实现N层解析\n-     *\n      * @param elements 所有子节点元素集，随着递归遍历而改变\n-     * @param list     存储中间遍历结果的容器\n+     * @param list 存储中间遍历结果的容器\n      * @return 返回递归完成后的Map结果集映射\n      */\n-    private Map<String, Object> transfer2Map(List<Element> elements, List<Map<String, Object>> list) {\n+    private Map<String, Object> transfer2Map(List<Element> elements,List<Map<String,Object>> list){\n         Map<String, Object> map = new HashMap<String, Object>();\n \n-        for (Element element : elements) {\n-            String name = element.getName();\n-            //如果是定义成数组\n-            if (ARRAY_PROPERTY.contains(name)) {\n+        for(Element element : elements){\n+            // getName获取到的节点名称不带名称空间例如<wp:content/>获取到name为content\n+            String nameWithoutPrefix = element.getName();\n+\n+            // 需要使用的真是name默认等于不带名称空间的,如果名称存在空间则name的形式为: 名称空间:名称\n+            String name = nameWithoutPrefix;\n+            String preifx = element.getNamespace().getPrefix();\n+            if(isNotBlack(preifx)) {\n+                name =  preifx + \":\" +nameWithoutPrefix;\n+            }\n+\n+            //判断节点是否在定义的数组中,如果存在将其创建成List集合,否则作为文本\n+            if(ARRAY_PROPERTY.contains(name)) {\n                 //继续递归循环\n-                List<Map<String, Object>> sublist = new ArrayList<Map<String, Object>>();\n+                List<Map<String,Object>> sublist = new ArrayList<Map<String,Object>>();\n \n-                Map<String, Object> subMap = this.transfer2Map(element.elements(), sublist);\n+                Map<String,Object> subMap  = this.transfer2Map(element.elements(), sublist);\n \n                 //根据key获取是否已经存在\n                 Object object = map.get(name);\n                 //如果存在,合并\n-                if (object != null) {\n-                    List<Map<String, Object>> olist = (List<Map<String, Object>>) object;\n+                if(object !=null ){\n+                    List<Map<String,Object>> olist = (List<Map<String,Object>>)object;\n                     olist.add(subMap);\n                     map.put(name, olist);\n-                } else {\n+                }else{\n                     //否则直接存入map\n                     map.put(name, sublist);\n                 }\n-            } else {\n+            }else {\n                 //单个值存入map\n                 map.put(name, element.getTextTrim());\n             }\n         }\n \n         //存入list中\n-        if (list != null) {\n+        if(list != null) {\n             list.add(map);\n         }\n+\n         //返回结果集合\n         return map;\n     }\n+\n+    /**\n+     * 判断字符串是否为空,如果是空串返回 {@code true},否则 {@code false}\n+     * @param str 需要进行空串判断的字符串\n+     * @return 如果是空串返回true,否则返回false\n+     */\n+    private boolean isNotBlack(String str) {\n+        if(str != null && str.length() > 0 && str.trim().length() > 0) {\n+            return true;\n+        }\n+\n+        return false;\n+    }\n }",
    "output": "Fixed problem resolving overwriting of node values with the same name in different namespaces"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/ContentFeedController.java b/src/main/java/run/halo/app/controller/content/ContentFeedController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentFeedController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentFeedController.java\n@@ -16,6 +16,7 @@\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.ResponseBody;\n import org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer;\n+import run.halo.app.config.properties.HaloProperties;\n import run.halo.app.model.entity.Post;\n import run.halo.app.model.enums.PostStatus;\n import run.halo.app.model.vo.PostListVO;\n@@ -43,13 +44,16 @@ public class ContentFeedController {\n     private final PostService postService;\n     private final OptionService optionService;\n     private final FreeMarkerConfigurer freeMarker;\n+    private final HaloProperties haloProperties;\n \n     public ContentFeedController(PostService postService,\n                                  OptionService optionService,\n-                                 FreeMarkerConfigurer freeMarker) {\n+                                 FreeMarkerConfigurer freeMarker,\n+                                 HaloProperties haloProperties) {\n         this.postService = postService;\n         this.optionService = optionService;\n         this.freeMarker = freeMarker;\n+        this.haloProperties = haloProperties;\n     }\n \n     /**\n@@ -125,6 +129,8 @@ public String sitemapHtml(Model model,\n     @GetMapping(value = \"robots.txt\", produces = MediaType.TEXT_PLAIN_VALUE)\n     @ResponseBody\n     public String robots(Model model) throws IOException, TemplateException {\n+        String adminPath = haloProperties.getAdminPath();\n+        model.addAttribute(\"adminPath\", adminPath);\n         Template template = freeMarker.getConfiguration().getTemplate(\"common/web/robots.ftl\");\n         return FreeMarkerTemplateUtils.processTemplateIntoString(template, model);\n     }",
    "output": "Update robots router."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java b/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n--- a/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n+++ b/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n@@ -90,7 +90,7 @@ public void addResourceHandlers(ResourceHandlerRegistry registry) {\n                 .addResourceLocations(workDir + \"upload/\");\n         registry.addResourceHandler(\"/backup/**\")\n                 .addResourceLocations(workDir + \"backup/\");\n-        registry.addResourceHandler(\"/admin/**\")\n+        registry.addResourceHandler(haloProperties.getAdminPath() + \"/**\")\n                 .addResourceLocations(workDir + HALO_ADMIN_RELATIVE_PATH)\n                 .addResourceLocations(\"classpath:/admin/\");\n \n\ndiff --git a/src/main/java/run/halo/app/config/properties/HaloProperties.java b/src/main/java/run/halo/app/config/properties/HaloProperties.java\n--- a/src/main/java/run/halo/app/config/properties/HaloProperties.java\n+++ b/src/main/java/run/halo/app/config/properties/HaloProperties.java\n@@ -32,6 +32,11 @@ public class HaloProperties {\n      */\n     private boolean authEnabled = true;\n \n+    /**\n+     * Admin path.\n+     */\n+    private String adminPath = \"/admin\";\n+\n     /**\n      * Work directory.\n      */\n\ndiff --git a/src/main/java/run/halo/app/controller/admin/api/LinkController.java b/src/main/java/run/halo/app/controller/admin/api/LinkController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/LinkController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/LinkController.java\n@@ -76,4 +76,10 @@ public LinkDTO updateBy(@PathVariable(\"id\") Integer id,\n     public void deletePermanently(@PathVariable(\"id\") Integer id) {\n         linkService.removeById(id);\n     }\n+\n+    @GetMapping(\"teams\")\n+    @ApiOperation((\"List all link teams\"))\n+    public List<String> teams() {\n+        return linkService.listAllTeams();\n+    }\n }\n\ndiff --git a/src/main/java/run/halo/app/controller/admin/api/MenuController.java b/src/main/java/run/halo/app/controller/admin/api/MenuController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/MenuController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/MenuController.java\n@@ -20,7 +20,8 @@\n  * Menu controller.\n  *\n  * @author johnniang\n- * @date 4/3/19\n+ * @author ryanwang\n+ * @date 2019-04-03\n  */\n @RestController\n @RequestMapping(\"/api/admin/menus\")\n@@ -88,4 +89,10 @@ public MenuDTO deleteBy(@PathVariable(\"menuId\") Integer menuId) {\n         }\n         return new MenuDTO().convertFrom(menuService.removeById(menuId));\n     }\n+\n+    @GetMapping(\"teams\")\n+    @ApiOperation((\"List all menu teams\"))\n+    public List<String> teams() {\n+        return menuService.listAllTeams();\n+    }\n }\n\ndiff --git a/src/main/java/run/halo/app/controller/content/MainController.java b/src/main/java/run/halo/app/controller/content/MainController.java\n--- a/src/main/java/run/halo/app/controller/content/MainController.java\n+++ b/src/main/java/run/halo/app/controller/content/MainController.java\n@@ -3,7 +3,9 @@\n import org.apache.commons.lang3.StringUtils;\n import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.ResponseBody;\n+import run.halo.app.config.properties.HaloProperties;\n import run.halo.app.exception.ServiceException;\n import run.halo.app.model.entity.User;\n import run.halo.app.model.properties.BlogProperties;\n@@ -27,19 +29,22 @@ public class MainController {\n \n     private final OptionService optionService;\n \n-    public MainController(UserService userService, OptionService optionService) {\n+    private final HaloProperties haloProperties;\n+\n+    public MainController(UserService userService, OptionService optionService, HaloProperties haloProperties) {\n         this.userService = userService;\n         this.optionService = optionService;\n+        this.haloProperties = haloProperties;\n     }\n \n-    @GetMapping(\"/admin\")\n-    public String admin() {\n-        return \"redirect:/admin/index.html\";\n+    @GetMapping(\"/{permlink}\")\n+    public String admin(@PathVariable(name = \"permlink\") String permlink) {\n+        return \"redirect:/\" + permlink + \"/index.html\";\n     }\n \n     @GetMapping(\"/install\")\n     public String installation() {\n-        return \"redirect:/admin/index.html#install\";\n+        return \"redirect:\" + haloProperties.getAdminPath() + \"/index.html#install\";\n     }\n \n     @GetMapping(\"/version\")\n\ndiff --git a/src/main/java/run/halo/app/listener/StartedListener.java b/src/main/java/run/halo/app/listener/StartedListener.java\n--- a/src/main/java/run/halo/app/listener/StartedListener.java\n+++ b/src/main/java/run/halo/app/listener/StartedListener.java\n@@ -53,7 +53,7 @@ private void printStartInfo() {\n         String blogUrl = optionService.getBlogBaseUrl();\n \n         log.info(\"Halo started at         {}\", blogUrl);\n-        log.info(\"Halo admin started at   {}/admin\", blogUrl);\n+        log.info(\"Halo admin started at   {}{}\", blogUrl, haloProperties.getAdminPath());\n         if (!haloProperties.isDocDisabled()) {\n             log.debug(\"Halo doc was enable at  {}/swagger-ui.html\", blogUrl);\n         }\n\ndiff --git a/src/main/java/run/halo/app/repository/LinkRepository.java b/src/main/java/run/halo/app/repository/LinkRepository.java\n--- a/src/main/java/run/halo/app/repository/LinkRepository.java\n+++ b/src/main/java/run/halo/app/repository/LinkRepository.java\n@@ -1,12 +1,23 @@\n package run.halo.app.repository;\n \n+import org.springframework.data.jpa.repository.Query;\n import run.halo.app.model.entity.Link;\n import run.halo.app.repository.base.BaseRepository;\n \n+import java.util.List;\n+\n /**\n  * Link repository.\n  *\n  * @author johnniang\n  */\n public interface LinkRepository extends BaseRepository<Link, Integer> {\n+\n+    /**\n+     * Find all link teams.\n+     *\n+     * @return a list of teams\n+     */\n+    @Query(value = \"select distinct a.team from Link a\")\n+    List<String> findAllTeams();\n }\n\ndiff --git a/src/main/java/run/halo/app/repository/MenuRepository.java b/src/main/java/run/halo/app/repository/MenuRepository.java\n--- a/src/main/java/run/halo/app/repository/MenuRepository.java\n+++ b/src/main/java/run/halo/app/repository/MenuRepository.java\n@@ -1,6 +1,7 @@\n package run.halo.app.repository;\n \n import org.springframework.data.domain.Sort;\n+import org.springframework.data.jpa.repository.Query;\n import org.springframework.lang.NonNull;\n import run.halo.app.model.entity.Menu;\n import run.halo.app.repository.base.BaseRepository;\n@@ -23,4 +24,12 @@ public interface MenuRepository extends BaseRepository<Menu, Integer> {\n     List<Menu> findByParentId(@NonNull Integer id);\n \n     List<Menu> findByTeam(String team, Sort sort);\n+\n+    /**\n+     * Find all menu teams.\n+     *\n+     * @return a list of teams\n+     */\n+    @Query(value = \"select distinct a.team from Menu a\")\n+    List<String> findAllTeams();\n }\n\ndiff --git a/src/main/java/run/halo/app/service/LinkService.java b/src/main/java/run/halo/app/service/LinkService.java\n--- a/src/main/java/run/halo/app/service/LinkService.java\n+++ b/src/main/java/run/halo/app/service/LinkService.java\n@@ -14,6 +14,7 @@\n  * Link service interface.\n  *\n  * @author johnniang\n+ * @author ryanwang\n  * @date 2019-03-14\n  */\n public interface LinkService extends CrudService<Link, Integer> {\n@@ -52,4 +53,11 @@ public interface LinkService extends CrudService<Link, Integer> {\n      * @return true if exists; false otherwise\n      */\n     boolean existByName(String name);\n+\n+    /**\n+     * List all link teams.\n+     *\n+     * @return a list of teams.\n+     */\n+    List<String> listAllTeams();\n }\n\ndiff --git a/src/main/java/run/halo/app/service/MenuService.java b/src/main/java/run/halo/app/service/MenuService.java\n--- a/src/main/java/run/halo/app/service/MenuService.java\n+++ b/src/main/java/run/halo/app/service/MenuService.java\n@@ -71,4 +71,11 @@ public interface MenuService extends CrudService<Menu, Integer> {\n      * @return a list of menu\n      */\n     List<Menu> listByParentId(@NonNull Integer id);\n+\n+    /**\n+     * List all menu teams.\n+     *\n+     * @return a list of teams.\n+     */\n+    List<String> listAllTeams();\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/LinkServiceImpl.java b/src/main/java/run/halo/app/service/impl/LinkServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/LinkServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/LinkServiceImpl.java\n@@ -95,6 +95,11 @@ public boolean existByName(String name) {\n         return linkRepository.exists(Example.of(link));\n     }\n \n+    @Override\n+    public List<String> listAllTeams() {\n+        return linkRepository.findAllTeams();\n+    }\n+\n     @NonNull\n     private List<LinkDTO> convertTo(@Nullable List<Link> links) {\n         if (CollectionUtils.isEmpty(links)) {\n\ndiff --git a/src/main/java/run/halo/app/service/impl/MenuServiceImpl.java b/src/main/java/run/halo/app/service/impl/MenuServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/MenuServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/MenuServiceImpl.java\n@@ -112,6 +112,11 @@ public List<Menu> listByParentId(Integer id) {\n         return menuRepository.findByParentId(id);\n     }\n \n+    @Override\n+    public List<String> listAllTeams() {\n+        return menuRepository.findAllTeams();\n+    }\n+\n     @Override\n     public Menu create(Menu menu) {\n         nameMustNotExist(menu);",
    "output": "Create list team api for menu/link."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/UserServiceImpl.java b/src/main/java/run/halo/app/service/impl/UserServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/UserServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/UserServiceImpl.java\n@@ -75,7 +75,7 @@ public Optional<User> getByUsername(String username) {\n \n     @Override\n     public User getByUsernameOfNonNull(String username) {\n-        return getByUsername(username).orElseThrow(() -> new NotFoundException(\"The username dose not exist\").setErrorData(username));\n+        return getByUsername(username).orElseThrow(() -> new NotFoundException(\"The username does not exist\").setErrorData(username));\n     }\n \n     @Override\n@@ -85,7 +85,7 @@ public Optional<User> getByEmail(String email) {\n \n     @Override\n     public User getByEmailOfNonNull(String email) {\n-        return getByEmail(email).orElseThrow(() -> new NotFoundException(\"The email dose not exist\").setErrorData(email));\n+        return getByEmail(email).orElseThrow(() -> new NotFoundException(\"The email does not exist\").setErrorData(email));\n     }\n \n     @Override",
    "output": "Merge branch 'dev' of github.com:halo-dev/halo into dev"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/UserServiceImpl.java b/src/main/java/run/halo/app/service/impl/UserServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/UserServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/UserServiceImpl.java\n@@ -75,7 +75,7 @@ public Optional<User> getByUsername(String username) {\n \n     @Override\n     public User getByUsernameOfNonNull(String username) {\n-        return getByUsername(username).orElseThrow(() -> new NotFoundException(\"The username dose not exist\").setErrorData(username));\n+        return getByUsername(username).orElseThrow(() -> new NotFoundException(\"The username does not exist\").setErrorData(username));\n     }\n \n     @Override\n@@ -85,7 +85,7 @@ public Optional<User> getByEmail(String email) {\n \n     @Override\n     public User getByEmailOfNonNull(String email) {\n-        return getByEmail(email).orElseThrow(() -> new NotFoundException(\"The email dose not exist\").setErrorData(email));\n+        return getByEmail(email).orElseThrow(() -> new NotFoundException(\"The email does not exist\").setErrorData(email));\n     }\n \n     @Override",
    "output": "Merge pull request #333 from ShenJiahuan/dev\n\nTypo fix"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/UserServiceImpl.java b/src/main/java/run/halo/app/service/impl/UserServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/UserServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/UserServiceImpl.java\n@@ -75,7 +75,7 @@ public Optional<User> getByUsername(String username) {\n \n     @Override\n     public User getByUsernameOfNonNull(String username) {\n-        return getByUsername(username).orElseThrow(() -> new NotFoundException(\"The username dose not exist\").setErrorData(username));\n+        return getByUsername(username).orElseThrow(() -> new NotFoundException(\"The username does not exist\").setErrorData(username));\n     }\n \n     @Override\n@@ -85,7 +85,7 @@ public Optional<User> getByEmail(String email) {\n \n     @Override\n     public User getByEmailOfNonNull(String email) {\n-        return getByEmail(email).orElseThrow(() -> new NotFoundException(\"The email dose not exist\").setErrorData(email));\n+        return getByEmail(email).orElseThrow(() -> new NotFoundException(\"The email does not exist\").setErrorData(email));\n     }\n \n     @Override",
    "output": "typo fix"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/api/PhotoController.java b/src/main/java/run/halo/app/controller/content/api/PhotoController.java\n--- a/src/main/java/run/halo/app/controller/content/api/PhotoController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/PhotoController.java\n@@ -0,0 +1,51 @@\n+package run.halo.app.controller.content.api;\n+\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.domain.Sort;\n+import org.springframework.data.web.PageableDefault;\n+import org.springframework.data.web.SortDefault;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import run.halo.app.model.dto.PhotoDTO;\n+import run.halo.app.model.params.PhotoQuery;\n+import run.halo.app.service.PhotoService;\n+\n+import java.util.List;\n+\n+import static org.springframework.data.domain.Sort.Direction.DESC;\n+\n+/**\n+ * Content photo controller.\n+ *\n+ * @author ryanwang\n+ * @date 2019-09-21\n+ */\n+@RestController(\"ApiContentPhotoController\")\n+@RequestMapping(\"/api/content/photos\")\n+public class PhotoController {\n+\n+    private final PhotoService photoService;\n+\n+    public PhotoController(PhotoService photoService) {\n+        this.photoService = photoService;\n+    }\n+\n+    /**\n+     * List all photos\n+     *\n+     * @param sort sort\n+     * @return all of photos\n+     */\n+    @GetMapping(value = \"latest\")\n+    public List<PhotoDTO> listPhotos(@SortDefault(sort = \"updateTime\", direction = Sort.Direction.DESC) Sort sort) {\n+        return photoService.listDtos(sort);\n+    }\n+\n+    @GetMapping\n+    public Page<PhotoDTO> pageBy(@PageableDefault(sort = \"updateTime\", direction = DESC) Pageable pageable,\n+                                 PhotoQuery photoQuery) {\n+        return photoService.pageDtosBy(pageable, photoQuery);\n+    }\n+}\n\ndiff --git a/src/main/java/run/halo/app/model/params/BaseCommentParam.java b/src/main/java/run/halo/app/model/params/BaseCommentParam.java\n--- a/src/main/java/run/halo/app/model/params/BaseCommentParam.java\n+++ b/src/main/java/run/halo/app/model/params/BaseCommentParam.java\n@@ -1,6 +1,7 @@\n package run.halo.app.model.params;\n \n import lombok.Data;\n+import org.hibernate.validator.constraints.URL;\n import run.halo.app.model.dto.base.InputConverter;\n import run.halo.app.utils.ReflectionUtils;\n \n@@ -29,6 +30,7 @@ public abstract class BaseCommentParam<COMMENT> implements InputConverter<COMMEN\n     private String email;\n \n     @Size(max = 127, message = \"评论者博客链接的字符长度不能超过 {max}\")\n+    @URL(message= \"博客链接格式不正确\")\n     private String authorUrl;\n \n     @NotBlank(message = \"评论内容不能为空\")\n\ndiff --git a/src/main/java/run/halo/app/model/properties/SeoProperties.java b/src/main/java/run/halo/app/model/properties/SeoProperties.java\n--- a/src/main/java/run/halo/app/model/properties/SeoProperties.java\n+++ b/src/main/java/run/halo/app/model/properties/SeoProperties.java\n@@ -13,8 +13,6 @@ public enum SeoProperties implements PropertyEnum {\n \n     DESCRIPTION(\"seo_description\", String.class, \"\"),\n \n-    BAIDU_TOKEN(\"seo_baidu_token\", String.class, \"\"),\n-\n     /**\n      * 是否禁止爬虫\n      */",
    "output": "release 1.1.1"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/ContentArchiveController.java b/src/main/java/run/halo/app/controller/content/ContentArchiveController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentArchiveController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentArchiveController.java\n@@ -23,6 +23,7 @@\n import run.halo.app.service.*;\n import run.halo.app.utils.MarkdownUtils;\n \n+import java.io.File;\n import java.util.List;\n import java.util.concurrent.TimeUnit;\n \n\ndiff --git a/src/main/java/run/halo/app/controller/content/api/JournalController.java b/src/main/java/run/halo/app/controller/content/api/JournalController.java\n--- a/src/main/java/run/halo/app/controller/content/api/JournalController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/JournalController.java\n@@ -3,13 +3,19 @@\n import io.swagger.annotations.ApiOperation;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.PageRequest;\n+import org.springframework.data.domain.Pageable;\n import org.springframework.data.domain.Sort;\n+import org.springframework.data.web.PageableDefault;\n import org.springframework.data.web.SortDefault;\n import org.springframework.web.bind.annotation.*;\n import run.halo.app.cache.lock.CacheLock;\n import run.halo.app.model.dto.BaseCommentDTO;\n+import run.halo.app.model.dto.JournalDTO;\n+import run.halo.app.model.dto.JournalWithCmtCountDTO;\n+import run.halo.app.model.entity.Journal;\n import run.halo.app.model.entity.JournalComment;\n import run.halo.app.model.enums.CommentStatus;\n+import run.halo.app.model.enums.JournalType;\n import run.halo.app.model.params.JournalCommentParam;\n import run.halo.app.model.vo.BaseCommentVO;\n import run.halo.app.model.vo.BaseCommentWithParentVO;\n@@ -23,8 +29,11 @@\n import static org.springframework.data.domain.Sort.Direction.DESC;\n \n /**\n+ * Content Journal controller.\n+ *\n  * @author johnniang\n- * @date 19-4-26\n+ * @author ryanwang\n+ * @date 2019-04-26\n  */\n @RestController(\"PortalJournalController\")\n @RequestMapping(\"/api/content/journals\")\n@@ -44,6 +53,20 @@ public JournalController(JournalService journalService,\n         this.optionService = optionService;\n     }\n \n+    @GetMapping\n+    @ApiOperation(\"Lists journals\")\n+    public Page<JournalWithCmtCountDTO> pageBy(@PageableDefault(sort = \"createTime\", direction = DESC) Pageable pageable) {\n+        Page<Journal> journals = journalService.pageBy(JournalType.PUBLIC, pageable);\n+        return journalService.convertToCmtCountDto(journals);\n+    }\n+\n+    @GetMapping(\"{journalId:\\\\d+}\")\n+    @ApiOperation(\"Gets a journal detail\")\n+    public JournalDTO getBy(@PathVariable(\"journalId\") Integer journalId) {\n+        Journal journal = journalService.getById(journalId);\n+        return journalService.convertTo(journal);\n+    }\n+\n     @GetMapping(\"{journalId:\\\\d+}/comments/top_view\")\n     public Page<CommentWithHasChildrenVO> listTopComments(@PathVariable(\"journalId\") Integer journalId,\n                                                           @RequestParam(name = \"page\", required = false, defaultValue = \"0\") int page,\n\ndiff --git a/src/main/java/run/halo/app/controller/content/api/PostController.java b/src/main/java/run/halo/app/controller/content/api/PostController.java\n--- a/src/main/java/run/halo/app/controller/content/api/PostController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/PostController.java\n@@ -10,7 +10,6 @@\n import org.springframework.web.bind.annotation.*;\n import run.halo.app.cache.lock.CacheLock;\n import run.halo.app.model.dto.BaseCommentDTO;\n-import run.halo.app.model.dto.post.BasePostDetailDTO;\n import run.halo.app.model.dto.post.BasePostSimpleDTO;\n import run.halo.app.model.entity.Post;\n import run.halo.app.model.entity.PostComment;\n@@ -55,7 +54,7 @@ public PostController(PostService postService,\n \n     @GetMapping\n     @ApiOperation(\"Lists posts\")\n-    public Page<BasePostSimpleDTO> pageBy(@PageableDefault(sort = \"updateTime\", direction = DESC) Pageable pageable) {\n+    public Page<BasePostSimpleDTO> pageBy(@PageableDefault(sort = \"createTime\", direction = DESC) Pageable pageable) {\n         Page<Post> postPage = postService.pageBy(PostStatus.PUBLISHED, pageable);\n         return postService.convertToSimple(postPage);\n     }\n@@ -71,8 +70,8 @@ public Page<BasePostSimpleDTO> pageBy(@RequestParam(value = \"keyword\") String ke\n     @GetMapping(\"{postId:\\\\d+}\")\n     @ApiOperation(\"Gets a post\")\n     public PostDetailVO getBy(@PathVariable(\"postId\") Integer postId,\n-                                   @RequestParam(value = \"formatDisabled\", required = false, defaultValue = \"true\") Boolean formatDisabled,\n-                                   @RequestParam(value = \"sourceDisabled\", required = false, defaultValue = \"false\") Boolean sourceDisabled) {\n+                              @RequestParam(value = \"formatDisabled\", required = false, defaultValue = \"true\") Boolean formatDisabled,\n+                              @RequestParam(value = \"sourceDisabled\", required = false, defaultValue = \"false\") Boolean sourceDisabled) {\n         PostDetailVO postDetailVO = postService.convertToDetailVo(postService.getById(postId));\n \n         if (formatDisabled) {\n\ndiff --git a/src/main/java/run/halo/app/controller/content/api/SheetController.java b/src/main/java/run/halo/app/controller/content/api/SheetController.java\n--- a/src/main/java/run/halo/app/controller/content/api/SheetController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/SheetController.java\n@@ -3,13 +3,19 @@\n import io.swagger.annotations.ApiOperation;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.PageRequest;\n+import org.springframework.data.domain.Pageable;\n import org.springframework.data.domain.Sort;\n+import org.springframework.data.web.PageableDefault;\n import org.springframework.data.web.SortDefault;\n import org.springframework.web.bind.annotation.*;\n import run.halo.app.cache.lock.CacheLock;\n import run.halo.app.model.dto.BaseCommentDTO;\n+import run.halo.app.model.dto.post.BasePostDetailDTO;\n+import run.halo.app.model.dto.post.BasePostSimpleDTO;\n+import run.halo.app.model.entity.Sheet;\n import run.halo.app.model.entity.SheetComment;\n import run.halo.app.model.enums.CommentStatus;\n+import run.halo.app.model.enums.PostStatus;\n import run.halo.app.model.params.SheetCommentParam;\n import run.halo.app.model.vo.BaseCommentVO;\n import run.halo.app.model.vo.BaseCommentWithParentVO;\n@@ -26,6 +32,7 @@\n  * Sheet controller.\n  *\n  * @author johnniang\n+ * @author ryanwang\n  * @date 19-4-26\n  */\n @RestController(\"PortalSheetController\")\n@@ -44,6 +51,33 @@ public SheetController(SheetService sheetService, SheetCommentService sheetComme\n         this.optionService = optionService;\n     }\n \n+    @GetMapping\n+    @ApiOperation(\"Lists sheets\")\n+    public Page<BasePostSimpleDTO> pageBy(@PageableDefault(sort = \"createTime\", direction = DESC) Pageable pageable) {\n+        Page<Sheet> sheetPage = sheetService.pageBy(PostStatus.PUBLISHED, pageable);\n+        return sheetService.convertToSimple(sheetPage);\n+    }\n+\n+    @GetMapping(\"{sheetId:\\\\d+}\")\n+    @ApiOperation(\"Gets a sheet\")\n+    public BasePostDetailDTO getBy(@PathVariable(\"sheetId\") Integer sheetId,\n+                                   @RequestParam(value = \"formatDisabled\", required = false, defaultValue = \"true\") Boolean formatDisabled,\n+                                   @RequestParam(value = \"sourceDisabled\", required = false, defaultValue = \"false\") Boolean sourceDisabled) {\n+        BasePostDetailDTO sheetDetailVO = sheetService.convertToDetail(sheetService.getById(sheetId));\n+\n+        if (formatDisabled) {\n+            // Clear the format content\n+            sheetDetailVO.setFormatContent(null);\n+        }\n+\n+        if (sourceDisabled) {\n+            // Clear the original content\n+            sheetDetailVO.setOriginalContent(null);\n+        }\n+\n+        return sheetDetailVO;\n+    }\n+\n     @GetMapping(\"{sheetId:\\\\d+}/comments/top_view\")\n     public Page<CommentWithHasChildrenVO> listTopComments(@PathVariable(\"sheetId\") Integer sheetId,\n                                                           @RequestParam(name = \"page\", required = false, defaultValue = \"0\") int page,",
    "output": "Complete content api."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/ThemeController.java b/src/main/java/run/halo/app/controller/admin/api/ThemeController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/ThemeController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/ThemeController.java\n@@ -54,7 +54,7 @@ public List<ThemeFile> listFiles() {\n     }\n \n     @GetMapping(\"{themeId}/files\")\n-    public List<ThemeFile> listFiles(@PathVariable(\"themeId\") String themeId){\n+    public List<ThemeFile> listFiles(@PathVariable(\"themeId\") String themeId) {\n         return themeService.listThemeFolderBy(themeId);\n     }\n \n@@ -63,11 +63,23 @@ public BaseResponse<String> getContentBy(@RequestParam(name = \"path\") String pat\n         return BaseResponse.ok(HttpStatus.OK.getReasonPhrase(), themeService.getTemplateContent(path));\n     }\n \n+    @GetMapping(\"{themeId}/files/content\")\n+    public BaseResponse<String> getContentBy(@PathVariable(\"themeId\") String themeId,\n+                                             @RequestParam(name = \"path\") String path) {\n+        return BaseResponse.ok(HttpStatus.OK.getReasonPhrase(), themeService.getTemplateContent(themeId, path));\n+    }\n+\n     @PutMapping(\"files/content\")\n     public void updateContentBy(@RequestBody ThemeContentParam param) {\n         themeService.saveTemplateContent(param.getPath(), param.getContent());\n     }\n \n+    @PutMapping(\"{themeId}/files/content\")\n+    public void updateContentBy(@PathVariable(\"themeId\") String themeId,\n+                                @RequestBody ThemeContentParam param) {\n+        themeService.saveTemplateContent(themeId, param.getPath(), param.getContent());\n+    }\n+\n     @GetMapping(\"files/custom\")\n     public Set<String> customTemplate() {\n         return themeService.listCustomTemplates(themeService.getActivatedThemeId());\n\ndiff --git a/src/main/java/run/halo/app/service/ThemeService.java b/src/main/java/run/halo/app/service/ThemeService.java\n--- a/src/main/java/run/halo/app/service/ThemeService.java\n+++ b/src/main/java/run/halo/app/service/ThemeService.java\n@@ -165,6 +165,15 @@ public interface ThemeService {\n      */\n     String getTemplateContent(@NonNull String absolutePath);\n \n+    /**\n+     * Gets template content by template absolute path and themeId.\n+     *\n+     * @param themeId      themeId\n+     * @param absolutePath absolute path\n+     * @return template content\n+     */\n+    String getTemplateContent(@NonNull String themeId, @NonNull String absolutePath);\n+\n     /**\n      * Saves template content by template absolute path.\n      *\n@@ -173,6 +182,15 @@ public interface ThemeService {\n      */\n     void saveTemplateContent(@NonNull String absolutePath, @NonNull String content);\n \n+    /**\n+     * Saves template content by template absolute path and themeId.\n+     *\n+     * @param themeId      themeId\n+     * @param absolutePath absolute path\n+     * @param content      new content\n+     */\n+    void saveTemplateContent(@NonNull String themeId, @NonNull String absolutePath, @NonNull String content);\n+\n     /**\n      * Deletes a theme by key.\n      *\n\ndiff --git a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n@@ -227,6 +227,19 @@ public String getTemplateContent(String absolutePath) {\n         }\n     }\n \n+    @Override\n+    public String getTemplateContent(String themeId, String absolutePath) {\n+        checkDirectory(themeId, absolutePath);\n+\n+        // Read file\n+        Path path = Paths.get(absolutePath);\n+        try {\n+            return new String(Files.readAllBytes(path), StandardCharsets.UTF_8);\n+        } catch (IOException e) {\n+            throw new ServiceException(\"读取模板内容失败 \" + absolutePath, e);\n+        }\n+    }\n+\n     @Override\n     public void saveTemplateContent(String absolutePath, String content) {\n         // Check the path\n@@ -241,6 +254,20 @@ public void saveTemplateContent(String absolutePath, String content) {\n         }\n     }\n \n+    @Override\n+    public void saveTemplateContent(String themeId, String absolutePath, String content) {\n+        // Check the path\n+        checkDirectory(themeId, absolutePath);\n+\n+        // Write file\n+        Path path = Paths.get(absolutePath);\n+        try {\n+            Files.write(path, content.getBytes(StandardCharsets.UTF_8));\n+        } catch (IOException e) {\n+            throw new ServiceException(\"保存模板内容失败 \" + absolutePath, e);\n+        }\n+    }\n+\n     @Override\n     public void deleteTheme(String themeId) {\n         // Get the theme property\n@@ -704,6 +731,17 @@ private void checkDirectory(@NonNull String absoluteName) {\n         FileUtils.checkDirectoryTraversal(activeThemeProperty.getThemePath(), absoluteName);\n     }\n \n+    /**\n+     * Check if directory is valid or not.\n+     *\n+     * @param themeId      themeId must not be blank\n+     * @param absoluteName throws when the given absolute directory name is invalid\n+     */\n+    private void checkDirectory(@NonNull String themeId, @NonNull String absoluteName) {\n+        ThemeProperty themeProperty = getThemeOfNonNullBy(themeId);\n+        FileUtils.checkDirectoryTraversal(themeProperty.getThemePath(), absoluteName);\n+    }\n+\n     /**\n      * Gets property path of nullable.\n      *\n\ndiff --git a/src/main/java/run/halo/app/utils/FileUtils.java b/src/main/java/run/halo/app/utils/FileUtils.java\n--- a/src/main/java/run/halo/app/utils/FileUtils.java\n+++ b/src/main/java/run/halo/app/utils/FileUtils.java\n@@ -235,7 +235,7 @@ public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Pa\n             return;\n         }\n \n-        throw new ForbiddenException(\"You cannot access \" + pathToCheck).setErrorData(pathToCheck);\n+        throw new ForbiddenException(\"你没有权限访问 \" + pathToCheck).setErrorData(pathToCheck);\n     }\n \n     /**",
    "output": "Update readme."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/MenuController.java b/src/main/java/run/halo/app/controller/admin/api/MenuController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/MenuController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/MenuController.java\n@@ -40,7 +40,7 @@ public List<MenuDTO> listAll(@SortDefault(sort = \"priority\", direction = DESC) S\n \n     @GetMapping(\"tree_view\")\n     @ApiOperation(\"List as category tree\")\n-    public List<MenuVO> listAsTree(@SortDefault(sort = \"name\", direction = ASC) Sort sort) {\n+    public List<MenuVO> listAsTree(@SortDefault(sort = \"priority\", direction = ASC) Sort sort) {\n         return menuService.listAsTree(sort);\n     }\n \n\ndiff --git a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n@@ -217,6 +217,8 @@ public void sendResetPasswordCode(ResetPasswordParam param) {\n         // Gets random code.\n         String code = RandomUtil.randomNumbers(6);\n \n+        log.info(\"Get reset password code:{}\", code);\n+\n         // Send email to administrator.\n         String content = \"您正在进行密码重置操作，如不是本人操作，请尽快做好相应措施。密码重置验证码如下（五分钟有效）：\\n\" + code;\n         mailService.sendMail(param.getEmail(), \"找回密码验证码\", content);",
    "output": "Update readme."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/handler/file/LocalFileHandler.java b/src/main/java/run/halo/app/handler/file/LocalFileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/LocalFileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/LocalFileHandler.java\n@@ -152,15 +152,19 @@ public UploadResult upload(MultipartFile file) {\n \n                     // Read as image\n                     BufferedImage originalImage = ImageIO.read(uploadPath.toFile());\n-\n-                    // Generate thumbnail\n-                    generateThumbnail(originalImage, thumbnailPath, extension);\n-\n                     // Set width and height\n                     uploadResult.setWidth(originalImage.getWidth());\n                     uploadResult.setHeight(originalImage.getHeight());\n-                    // Set thumb path\n-                    uploadResult.setThumbPath(thumbnailSubFilePath);\n+\n+                    // Generate thumbnail\n+                    boolean result = generateThumbnail(originalImage, thumbnailPath, extension);\n+                    if (result) {\n+                        // Set thumb path\n+                        uploadResult.setThumbPath(thumbnailSubFilePath);\n+                    } else {\n+                        // If generate error\n+                        uploadResult.setThumbPath(subFilePath);\n+                    }\n                 } finally {\n                     lock.unlock();\n                 }\n@@ -203,7 +207,7 @@ public void delete(String key) {\n         try {\n             boolean deleteResult = Files.deleteIfExists(thumbnailPath);\n             if (!deleteResult) {\n-                log.warn(\"Thumbnail: [{}] way not exist\", thumbnailPath.toString());\n+                log.warn(\"Thumbnail: [{}] may not exist\", thumbnailPath.toString());\n             }\n         } catch (IOException e) {\n             throw new FileOperationException(\"附件缩略图 \" + thumbnailName + \" 删除失败\", e);\n@@ -215,19 +219,24 @@ public boolean supportType(AttachmentType type) {\n         return AttachmentType.LOCAL.equals(type);\n     }\n \n-\n-    private void generateThumbnail(BufferedImage originalImage, Path thumbPath, String extension) throws IOException {\n+    private boolean generateThumbnail(BufferedImage originalImage, Path thumbPath, String extension) {\n         Assert.notNull(originalImage, \"Image must not be null\");\n         Assert.notNull(thumbPath, \"Thumb path must not be null\");\n \n \n+        boolean result = false;\n         // Create the thumbnail\n-        Files.createFile(thumbPath);\n-\n-        // Convert to thumbnail and copy the thumbnail\n-        log.debug(\"Trying to generate thumbnail: [{}]\", thumbPath.toString());\n-        Thumbnails.of(originalImage).size(THUMB_WIDTH, THUMB_HEIGHT).keepAspectRatio(true).toFile(thumbPath.toFile());\n-        log.debug(\"Generated thumbnail image, and wrote the thumbnail to [{}]\", thumbPath.toString());\n+        try {\n+            Files.createFile(thumbPath);\n+            // Convert to thumbnail and copy the thumbnail\n+            log.debug(\"Trying to generate thumbnail: [{}]\", thumbPath.toString());\n+            Thumbnails.of(originalImage).size(THUMB_WIDTH, THUMB_HEIGHT).keepAspectRatio(true).toFile(thumbPath.toFile());\n+            log.debug(\"Generated thumbnail image, and wrote the thumbnail to [{}]\", thumbPath.toString());\n+            result = true;\n+        } catch (Throwable t) {\n+            log.warn(\"Failed to generate thumbnail: [{}]\", thumbPath);\n+        }\n+        return result;\n     }\n \n }",
    "output": "Set thumbnail image with original image while OOM"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/HaloConfiguration.java b/src/main/java/run/halo/app/config/HaloConfiguration.java\n--- a/src/main/java/run/halo/app/config/HaloConfiguration.java\n+++ b/src/main/java/run/halo/app/config/HaloConfiguration.java\n@@ -1,6 +1,7 @@\n package run.halo.app.config;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n+import lombok.extern.slf4j.Slf4j;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.boot.web.client.RestTemplateBuilder;\n@@ -36,6 +37,7 @@\n  */\n @Configuration\n @EnableConfigurationProperties(HaloProperties.class)\n+@Slf4j\n public class HaloConfiguration {\n \n     private final static int TIMEOUT = 5000;\n\ndiff --git a/src/main/java/run/halo/app/handler/file/LocalFileHandler.java b/src/main/java/run/halo/app/handler/file/LocalFileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/LocalFileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/LocalFileHandler.java\n@@ -1,6 +1,7 @@\n package run.halo.app.handler.file;\n \n import lombok.extern.slf4j.Slf4j;\n+import net.coobird.thumbnailator.Thumbnails;\n import org.springframework.http.MediaType;\n import org.springframework.stereotype.Component;\n import org.springframework.util.Assert;\n@@ -13,15 +14,16 @@\n import run.halo.app.service.OptionService;\n import run.halo.app.utils.FilenameUtils;\n import run.halo.app.utils.HaloUtils;\n-import run.halo.app.utils.ImageUtils;\n \n+import javax.imageio.ImageIO;\n import java.awt.image.BufferedImage;\n import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n import java.util.Calendar;\n import java.util.Objects;\n+import java.util.concurrent.locks.ReentrantLock;\n \n import static run.halo.app.model.support.HaloConst.FILE_SEPARATOR;\n \n@@ -46,15 +48,15 @@ public class LocalFileHandler implements FileHandler {\n     /**\n      * Thumbnail width.\n      */\n-    @Deprecated\n     private final static int THUMB_WIDTH = 256;\n \n     /**\n      * Thumbnail height.\n      */\n-    @Deprecated\n     private final static int THUMB_HEIGHT = 256;\n \n+    ReentrantLock lock = new ReentrantLock();\n+\n     private final OptionService optionService;\n \n     private final String workDir;\n@@ -141,25 +143,27 @@ public UploadResult upload(MultipartFile file) {\n \n             // Check file type\n             if (FileHandler.isImageType(uploadResult.getMediaType()) && !isSvg) {\n-                // Upload a thumbnail\n-                String thumbnailBasename = basename + THUMBNAIL_SUFFIX;\n-                String thumbnailSubFilePath = subDir + thumbnailBasename + '.' + extension;\n-                Path thumbnailPath = Paths.get(workDir + thumbnailSubFilePath);\n-\n-                // Create the thumbnail\n-                Files.createFile(thumbnailPath);\n-\n-                // Read as image\n-                BufferedImage originalImage = ImageUtils.readImage(uploadPath.toFile());\n-\n-                // Generate thumbnail\n-                generateThumbnail(originalImage, thumbnailPath, extension);\n-\n-                // Set width and height\n-                uploadResult.setWidth(originalImage.getWidth());\n-                uploadResult.setHeight(originalImage.getHeight());\n-                // Set thumb path\n-                uploadResult.setThumbPath(thumbnailSubFilePath);\n+                lock.lock();\n+                try {\n+                    // Upload a thumbnail\n+                    String thumbnailBasename = basename + THUMBNAIL_SUFFIX;\n+                    String thumbnailSubFilePath = subDir + thumbnailBasename + '.' + extension;\n+                    Path thumbnailPath = Paths.get(workDir + thumbnailSubFilePath);\n+\n+                    // Read as image\n+                    BufferedImage originalImage = ImageIO.read(uploadPath.toFile());\n+\n+                    // Generate thumbnail\n+                    generateThumbnail(originalImage, thumbnailPath, extension);\n+\n+                    // Set width and height\n+                    uploadResult.setWidth(originalImage.getWidth());\n+                    uploadResult.setHeight(originalImage.getHeight());\n+                    // Set thumb path\n+                    uploadResult.setThumbPath(thumbnailSubFilePath);\n+                } finally {\n+                    lock.unlock();\n+                }\n             } else {\n                 uploadResult.setThumbPath(subFilePath);\n             }\n@@ -216,13 +220,14 @@ private void generateThumbnail(BufferedImage originalImage, Path thumbPath, Stri\n         Assert.notNull(originalImage, \"Image must not be null\");\n         Assert.notNull(thumbPath, \"Thumb path must not be null\");\n \n+\n+        // Create the thumbnail\n+        Files.createFile(thumbPath);\n+\n         // Convert to thumbnail and copy the thumbnail\n         log.debug(\"Trying to generate thumbnail: [{}]\", thumbPath.toString());\n-        log.debug(\"Got original image\");\n-        log.debug(\"Generating thumbnail image, and trying to write the thumbnail to [{}]\", thumbPath.toString());\n-        ImageUtils.compress(originalImage, 0.1f, Files.newOutputStream(thumbPath));\n-        log.debug(\"Wrote thumbnail to [{}]\", thumbPath.toString());\n+        Thumbnails.of(originalImage).size(THUMB_WIDTH, THUMB_HEIGHT).keepAspectRatio(true).toFile(thumbPath.toFile());\n+        log.debug(\"Generated thumbnail image, and wrote the thumbnail to [{}]\", thumbPath.toString());\n     }\n \n-\n }\n\ndiff --git a/src/main/java/run/halo/app/utils/ImageUtils.java b/src/main/java/run/halo/app/utils/ImageUtils.java\n--- a/src/main/java/run/halo/app/utils/ImageUtils.java\n+++ b/src/main/java/run/halo/app/utils/ImageUtils.java\n@@ -1,76 +0,0 @@\n-package run.halo.app.utils;\n-\n-import com.google.common.io.Files;\n-import lombok.extern.slf4j.Slf4j;\n-import org.springframework.util.Assert;\n-\n-import javax.imageio.IIOImage;\n-import javax.imageio.ImageIO;\n-import javax.imageio.ImageWriteParam;\n-import javax.imageio.ImageWriter;\n-import javax.imageio.stream.ImageOutputStream;\n-import java.awt.image.BufferedImage;\n-import java.io.*;\n-import java.util.Iterator;\n-\n-/**\n- * ImageUtils.\n- *\n- * @author johnniang\n- */\n-@Slf4j\n-public class ImageUtils {\n-\n-    private ImageUtils() {\n-        ImageIO.setUseCache(true);\n-        ImageIO.setCacheDirectory(Files.createTempDir());\n-    }\n-\n-\n-    public static void writeImage(BufferedImage image, String filepath, String extension) throws IOException {\n-        File file = new File(filepath);\n-\n-        ImageIO.write(image, extension, file);\n-    }\n-\n-    public static BufferedImage readImage(File file) throws IOException {\n-        Assert.notNull(file, \"file must not be null\");\n-\n-        return ImageIO.read(file);\n-    }\n-\n-    public static BufferedImage readImage(InputStream inputStream) throws IOException {\n-        Assert.notNull(inputStream, \"input stream must not be null\");\n-\n-        return ImageIO.read(inputStream);\n-    }\n-\n-    public static BufferedImage readImage(byte[] buf) throws IOException {\n-        Assert.notNull(buf, \"image byte array must not be null\");\n-\n-\n-        return ImageIO.read(new ByteArrayInputStream(buf));\n-    }\n-\n-    public static void compress(BufferedImage originalImage, float quantity, OutputStream os) throws IOException {\n-        Assert.notNull(originalImage, \"original image must not be null\");\n-\n-        Iterator<ImageWriter> imageWriterIterator = ImageIO.getImageWritersByFormatName(\"jpg\");\n-\n-        ImageOutputStream imageOutputStream = ImageIO.createImageOutputStream(os);\n-\n-        ImageWriter imageWriter = imageWriterIterator.next();\n-        imageWriter.setOutput(imageOutputStream);\n-\n-        ImageWriteParam param = imageWriter.getDefaultWriteParam();\n-\n-        if (param.canWriteCompressed()) {\n-            param.setCompressionMode((ImageWriteParam.MODE_EXPLICIT));\n-            param.setCompressionQuality(quantity);\n-        }\n-\n-        imageWriter.write(null, new IIOImage(originalImage, null, null), param);\n-\n-        imageWriter.dispose();\n-    }\n-}",
    "output": "Add lock while uploading image file"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/utils/ImageUtils.java b/src/main/java/run/halo/app/utils/ImageUtils.java\n--- a/src/main/java/run/halo/app/utils/ImageUtils.java\n+++ b/src/main/java/run/halo/app/utils/ImageUtils.java\n@@ -1,5 +1,6 @@\n package run.halo.app.utils;\n \n+import com.google.common.io.Files;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.util.Assert;\n \n@@ -21,6 +22,8 @@\n public class ImageUtils {\n \n     private ImageUtils() {\n+        ImageIO.setUseCache(true);\n+        ImageIO.setCacheDirectory(Files.createTempDir());\n     }\n \n ",
    "output": "Enable image cache custom"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/handler/file/LocalFileHandler.java b/src/main/java/run/halo/app/handler/file/LocalFileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/LocalFileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/LocalFileHandler.java\n@@ -1,9 +1,7 @@\n package run.halo.app.handler.file;\n \n-import cn.hutool.core.img.ImgUtil;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.http.MediaType;\n-import org.springframework.lang.NonNull;\n import org.springframework.stereotype.Component;\n import org.springframework.util.Assert;\n import org.springframework.web.multipart.MultipartFile;\n@@ -15,8 +13,8 @@\n import run.halo.app.service.OptionService;\n import run.halo.app.utils.FilenameUtils;\n import run.halo.app.utils.HaloUtils;\n+import run.halo.app.utils.ImageUtils;\n \n-import javax.imageio.ImageIO;\n import java.awt.image.BufferedImage;\n import java.io.IOException;\n import java.nio.file.Files;\n@@ -151,15 +149,15 @@ public UploadResult upload(MultipartFile file) {\n                 // Create the thumbnail\n                 Files.createFile(thumbnailPath);\n \n-                // Generate thumbnail\n-                generateThumbnail(uploadPath, thumbnailPath);\n-\n                 // Read as image\n-                BufferedImage image = ImageIO.read(Files.newInputStream(uploadPath));\n+                BufferedImage originalImage = ImageUtils.readImage(uploadPath.toFile());\n+\n+                // Generate thumbnail\n+                generateThumbnail(originalImage, thumbnailPath, extension);\n \n                 // Set width and height\n-                uploadResult.setWidth(image.getWidth());\n-                uploadResult.setHeight(image.getHeight());\n+                uploadResult.setWidth(originalImage.getWidth());\n+                uploadResult.setHeight(originalImage.getHeight());\n                 // Set thumb path\n                 uploadResult.setThumbPath(thumbnailSubFilePath);\n             } else {\n@@ -213,21 +211,18 @@ public boolean supportType(AttachmentType type) {\n         return AttachmentType.LOCAL.equals(type);\n     }\n \n-    /**\n-     * Generates thumbnail image.\n-     *\n-     * @param imagePath image path must not be null\n-     * @param thumbPath thumbnail path must not be null\n-     * @throws IOException throws if image provided is not valid\n-     */\n-    private void generateThumbnail(@NonNull Path imagePath, @NonNull Path thumbPath) throws IOException {\n-        Assert.notNull(imagePath, \"Image path must not be null\");\n-        Assert.notNull(thumbPath, \"Thumb path must not be null\");\n \n-        log.info(\"Generating thumbnail: [{}] for image: [{}]\", thumbPath.getFileName(), imagePath.getFileName());\n+    private void generateThumbnail(BufferedImage originalImage, Path thumbPath, String extension) throws IOException {\n+        Assert.notNull(originalImage, \"Image must not be null\");\n+        Assert.notNull(thumbPath, \"Thumb path must not be null\");\n \n         // Convert to thumbnail and copy the thumbnail\n-        ImgUtil.scale(imagePath.toFile(), thumbPath.toFile(), 0.1f);\n+        log.debug(\"Trying to generate thumbnail: [{}]\", thumbPath.toString());\n+        log.debug(\"Got original image\");\n+        log.debug(\"Generating thumbnail image, and trying to write the thumbnail to [{}]\", thumbPath.toString());\n+        ImageUtils.compress(originalImage, 0.1f, Files.newOutputStream(thumbPath));\n+        log.debug(\"Wrote thumbnail to [{}]\", thumbPath.toString());\n     }\n \n+\n }\n\ndiff --git a/src/main/java/run/halo/app/utils/ImageUtils.java b/src/main/java/run/halo/app/utils/ImageUtils.java\n--- a/src/main/java/run/halo/app/utils/ImageUtils.java\n+++ b/src/main/java/run/halo/app/utils/ImageUtils.java\n@@ -0,0 +1,73 @@\n+package run.halo.app.utils;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.util.Assert;\n+\n+import javax.imageio.IIOImage;\n+import javax.imageio.ImageIO;\n+import javax.imageio.ImageWriteParam;\n+import javax.imageio.ImageWriter;\n+import javax.imageio.stream.ImageOutputStream;\n+import java.awt.image.BufferedImage;\n+import java.io.*;\n+import java.util.Iterator;\n+\n+/**\n+ * ImageUtils.\n+ *\n+ * @author johnniang\n+ */\n+@Slf4j\n+public class ImageUtils {\n+\n+    private ImageUtils() {\n+    }\n+\n+\n+    public static void writeImage(BufferedImage image, String filepath, String extension) throws IOException {\n+        File file = new File(filepath);\n+\n+        ImageIO.write(image, extension, file);\n+    }\n+\n+    public static BufferedImage readImage(File file) throws IOException {\n+        Assert.notNull(file, \"file must not be null\");\n+\n+        return ImageIO.read(file);\n+    }\n+\n+    public static BufferedImage readImage(InputStream inputStream) throws IOException {\n+        Assert.notNull(inputStream, \"input stream must not be null\");\n+\n+        return ImageIO.read(inputStream);\n+    }\n+\n+    public static BufferedImage readImage(byte[] buf) throws IOException {\n+        Assert.notNull(buf, \"image byte array must not be null\");\n+\n+\n+        return ImageIO.read(new ByteArrayInputStream(buf));\n+    }\n+\n+    public static void compress(BufferedImage originalImage, float quantity, OutputStream os) throws IOException {\n+        Assert.notNull(originalImage, \"original image must not be null\");\n+\n+        Iterator<ImageWriter> imageWriterIterator = ImageIO.getImageWritersByFormatName(\"jpg\");\n+\n+        ImageOutputStream imageOutputStream = ImageIO.createImageOutputStream(os);\n+\n+        ImageWriter imageWriter = imageWriterIterator.next();\n+        imageWriter.setOutput(imageOutputStream);\n+\n+        ImageWriteParam param = imageWriter.getDefaultWriteParam();\n+\n+        if (param.canWriteCompressed()) {\n+            param.setCompressionMode((ImageWriteParam.MODE_EXPLICIT));\n+            param.setCompressionQuality(quantity);\n+        }\n+\n+        imageWriter.write(null, new IIOImage(originalImage, null, null), param);\n+\n+        imageWriter.dispose();\n+    }\n+}",
    "output": "Optimize thumbnail generator"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/HaloConfiguration.java b/src/main/java/run/halo/app/config/HaloConfiguration.java\n--- a/src/main/java/run/halo/app/config/HaloConfiguration.java\n+++ b/src/main/java/run/halo/app/config/HaloConfiguration.java\n@@ -149,7 +149,9 @@ public FilterRegistrationBean<AdminAuthenticationFilter> adminAuthenticationFilt\n                 \"/api/admin/refresh/*\",\n                 \"/api/admin/installations\",\n                 \"/api/admin/recoveries/migrations/*\",\n-                \"/api/admin/is_installed\"\n+                \"/api/admin/is_installed\",\n+                \"/api/admin/password/code\",\n+                \"/api/admin/password/reset\"\n         );\n         adminAuthenticationFilter.setFailureHandler(\n                 failureHandler);",
    "output": "Exclude password reset api"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/handler/file/LocalFileHandler.java b/src/main/java/run/halo/app/handler/file/LocalFileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/LocalFileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/LocalFileHandler.java\n@@ -1,7 +1,7 @@\n package run.halo.app.handler.file;\n \n+import cn.hutool.core.img.ImgUtil;\n import lombok.extern.slf4j.Slf4j;\n-import net.coobird.thumbnailator.Thumbnails;\n import org.springframework.http.MediaType;\n import org.springframework.lang.NonNull;\n import org.springframework.stereotype.Component;\n@@ -31,7 +31,8 @@\n  * Local file handler.\n  *\n  * @author johnniang\n- * @date 3/27/19\n+ * @author ryanwang\n+ * @date 2019-03-27\n  */\n @Slf4j\n @Component\n@@ -47,11 +48,13 @@ public class LocalFileHandler implements FileHandler {\n     /**\n      * Thumbnail width.\n      */\n+    @Deprecated\n     private final static int THUMB_WIDTH = 256;\n \n     /**\n      * Thumbnail height.\n      */\n+    @Deprecated\n     private final static int THUMB_HEIGHT = 256;\n \n     private final OptionService optionService;\n@@ -135,8 +138,11 @@ public UploadResult upload(MultipartFile file) {\n             uploadResult.setMediaType(MediaType.valueOf(Objects.requireNonNull(file.getContentType())));\n             uploadResult.setSize(file.getSize());\n \n+            // TODO refactor this: if image is svg ext. extension\n+            boolean isSvg = \"svg\".equals(extension);\n+\n             // Check file type\n-            if (FileHandler.isImageType(uploadResult.getMediaType())) {\n+            if (FileHandler.isImageType(uploadResult.getMediaType()) && !isSvg) {\n                 // Upload a thumbnail\n                 String thumbnailBasename = basename + THUMBNAIL_SUFFIX;\n                 String thumbnailSubFilePath = subDir + thumbnailBasename + '.' + extension;\n@@ -154,9 +160,10 @@ public UploadResult upload(MultipartFile file) {\n                 // Set width and height\n                 uploadResult.setWidth(image.getWidth());\n                 uploadResult.setHeight(image.getHeight());\n-\n                 // Set thumb path\n                 uploadResult.setThumbPath(thumbnailSubFilePath);\n+            } else {\n+                uploadResult.setThumbPath(subFilePath);\n             }\n \n             return uploadResult;\n@@ -220,7 +227,7 @@ private void generateThumbnail(@NonNull Path imagePath, @NonNull Path thumbPath)\n         log.info(\"Generating thumbnail: [{}] for image: [{}]\", thumbPath.getFileName(), imagePath.getFileName());\n \n         // Convert to thumbnail and copy the thumbnail\n-        Thumbnails.of(imagePath.toFile()).size(THUMB_WIDTH, THUMB_HEIGHT).keepAspectRatio(true).toFile(thumbPath.toFile());\n+        ImgUtil.scale(imagePath.toFile(), thumbPath.toFile(), 0.1f);\n     }\n \n }\n\ndiff --git a/src/main/java/run/halo/app/model/entity/BaseEntity.java b/src/main/java/run/halo/app/model/entity/BaseEntity.java\n--- a/src/main/java/run/halo/app/model/entity/BaseEntity.java\n+++ b/src/main/java/run/halo/app/model/entity/BaseEntity.java\n@@ -14,9 +14,9 @@\n  * @author johnniang\n  * @date 3/20/19\n  */\n-@MappedSuperclass\n @Data\n @ToString\n+@MappedSuperclass\n @EqualsAndHashCode\n public class BaseEntity {\n \n\ndiff --git a/src/main/java/run/halo/app/model/entity/BasePost.java b/src/main/java/run/halo/app/model/entity/BasePost.java\n--- a/src/main/java/run/halo/app/model/entity/BasePost.java\n+++ b/src/main/java/run/halo/app/model/entity/BasePost.java\n@@ -42,7 +42,7 @@ public class BasePost extends BaseEntity {\n     /**\n      * Post url.\n      */\n-    @Column(name = \"url\", columnDefinition = \"varchar(255) not null\")\n+    @Column(name = \"url\", columnDefinition = \"varchar(255) not null\", unique = true)\n     private String url;\n \n     /**\n\ndiff --git a/src/main/java/run/halo/app/model/entity/Category.java b/src/main/java/run/halo/app/model/entity/Category.java\n--- a/src/main/java/run/halo/app/model/entity/Category.java\n+++ b/src/main/java/run/halo/app/model/entity/Category.java\n@@ -31,7 +31,7 @@ public class Category extends BaseEntity {\n     /**\n      * Category slug name.\n      */\n-    @Column(name = \"slug_name\", columnDefinition = \"varchar(50) not null\")\n+    @Column(name = \"slug_name\", columnDefinition = \"varchar(50) not null\", unique = true)\n     private String slugName;\n \n     /**\n\ndiff --git a/src/main/java/run/halo/app/model/entity/Tag.java b/src/main/java/run/halo/app/model/entity/Tag.java\n--- a/src/main/java/run/halo/app/model/entity/Tag.java\n+++ b/src/main/java/run/halo/app/model/entity/Tag.java\n@@ -33,7 +33,7 @@ public class Tag extends BaseEntity {\n     /**\n      * Tag slug name.\n      */\n-    @Column(name = \"slug_name\", columnDefinition = \"varchar(255) not null\")\n+    @Column(name = \"slug_name\", columnDefinition = \"varchar(255) not null\", unique = true)\n     private String slugName;\n \n     @Override",
    "output": "Refactor generateThumbnail method."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/ContentArchiveController.java b/src/main/java/run/halo/app/controller/content/ContentArchiveController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentArchiveController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentArchiveController.java\n@@ -18,6 +18,7 @@\n import run.halo.app.model.entity.Post;\n import run.halo.app.model.entity.Tag;\n import run.halo.app.model.enums.PostStatus;\n+import run.halo.app.model.vo.BaseCommentVO;\n import run.halo.app.model.vo.PostListVO;\n import run.halo.app.service.*;\n import run.halo.app.utils.MarkdownUtils;\n@@ -46,6 +47,8 @@ public class ContentArchiveController {\n \n     private final PostTagService postTagService;\n \n+    private final PostCommentService postCommentService;\n+\n     private final OptionService optionService;\n \n     private final StringCacheStore cacheStore;\n@@ -54,12 +57,14 @@ public ContentArchiveController(PostService postService,\n                                     ThemeService themeService,\n                                     PostCategoryService postCategoryService,\n                                     PostTagService postTagService,\n+                                    PostCommentService postCommentService,\n                                     OptionService optionService,\n                                     StringCacheStore cacheStore) {\n         this.postService = postService;\n         this.themeService = themeService;\n         this.postCategoryService = postCategoryService;\n         this.postTagService = postTagService;\n+        this.postCommentService = postCommentService;\n         this.optionService = optionService;\n         this.cacheStore = cacheStore;\n     }\n@@ -112,6 +117,8 @@ public String post(@PathVariable(\"url\") String url,\n                        @RequestParam(value = \"preview\", required = false, defaultValue = \"false\") boolean preview,\n                        @RequestParam(value = \"intimate\", required = false, defaultValue = \"false\") boolean intimate,\n                        @RequestParam(value = \"token\", required = false) String token,\n+                       @RequestParam(value = \"cp\", defaultValue = \"1\") Integer cp,\n+                       @SortDefault(sort = \"createTime\", direction = DESC) Sort sort,\n                        Model model) {\n         Post post;\n         if (preview) {\n@@ -150,10 +157,13 @@ public String post(@PathVariable(\"url\") String url,\n         List<Category> categories = postCategoryService.listCategoriesBy(post.getId());\n         List<Tag> tags = postTagService.listTagsBy(post.getId());\n \n+        Page<BaseCommentVO> comments = postCommentService.pageVosBy(post.getId(), PageRequest.of(cp, optionService.getCommentPageSize(), sort));\n+\n         model.addAttribute(\"is_post\", true);\n-        model.addAttribute(\"post\", post);\n+        model.addAttribute(\"post\", postService.convertToDetailVo(post));\n         model.addAttribute(\"categories\", categories);\n         model.addAttribute(\"tags\", tags);\n+        model.addAttribute(\"comments\", comments);\n \n         if (preview) {\n             // refresh timeUnit\n\ndiff --git a/src/main/java/run/halo/app/controller/content/ContentSheetController.java b/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n@@ -1,5 +1,9 @@\n package run.halo.app.controller.content;\n \n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.PageRequest;\n+import org.springframework.data.domain.Sort;\n+import org.springframework.data.web.SortDefault;\n import org.springframework.stereotype.Controller;\n import org.springframework.ui.Model;\n import org.springframework.web.bind.annotation.GetMapping;\n@@ -10,12 +14,17 @@\n import run.halo.app.model.entity.Sheet;\n import run.halo.app.model.enums.PostStatus;\n import run.halo.app.model.support.HaloConst;\n+import run.halo.app.model.vo.BaseCommentVO;\n+import run.halo.app.service.OptionService;\n+import run.halo.app.service.SheetCommentService;\n import run.halo.app.service.SheetService;\n import run.halo.app.service.ThemeService;\n import run.halo.app.utils.MarkdownUtils;\n \n import java.util.concurrent.TimeUnit;\n \n+import static org.springframework.data.domain.Sort.Direction.DESC;\n+\n /**\n  * Content sheet controller.\n  *\n@@ -30,13 +39,21 @@ public class ContentSheetController {\n \n     private final ThemeService themeService;\n \n+    private final SheetCommentService sheetCommentService;\n+\n+    private final OptionService optionService;\n+\n     private final StringCacheStore cacheStore;\n \n     public ContentSheetController(SheetService sheetService,\n                                   ThemeService themeService,\n+                                  SheetCommentService sheetCommentService,\n+                                  OptionService optionService,\n                                   StringCacheStore cacheStore) {\n         this.sheetService = sheetService;\n         this.themeService = themeService;\n+        this.sheetCommentService = sheetCommentService;\n+        this.optionService = optionService;\n         this.cacheStore = cacheStore;\n     }\n \n@@ -73,6 +90,8 @@ public String links() {\n     public String sheet(@PathVariable(value = \"url\") String url,\n                         @RequestParam(value = \"preview\", required = false, defaultValue = \"false\") boolean preview,\n                         @RequestParam(value = \"token\", required = false) String token,\n+                        @RequestParam(value = \"cp\", defaultValue = \"1\") Integer cp,\n+                        @SortDefault(sort = \"createTime\", direction = DESC) Sort sort,\n                         Model model) {\n         Sheet sheet = sheetService.getBy(preview ? PostStatus.DRAFT : PostStatus.PUBLISHED, url);\n \n@@ -88,10 +107,14 @@ public String sheet(@PathVariable(value = \"url\") String url,\n             }\n         }\n \n+        Page<BaseCommentVO> comments = sheetCommentService.pageVosBy(sheet.getId(), PageRequest.of(cp, optionService.getCommentPageSize(), sort));\n+\n+\n         // sheet and post all can use\n         model.addAttribute(\"sheet\", sheetService.convertToDetail(sheet));\n         model.addAttribute(\"post\", sheetService.convertToDetail(sheet));\n         model.addAttribute(\"is_sheet\", true);\n+        model.addAttribute(\"comments\", comments);\n \n         if (preview) {\n             // refresh timeUnit",
    "output": "Add comments model for post and sheet."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/BackupController.java b/src/main/java/run/halo/app/controller/admin/api/BackupController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/BackupController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/BackupController.java\n@@ -29,14 +29,9 @@ public BackupController(BackupService backupService) {\n         this.backupService = backupService;\n     }\n \n-    @PostMapping(\"import/markdowns\")\n-    @ApiOperation(\"Import markdowns\")\n-    public List<BasePostDetailDTO> backupMarkdowns(@RequestPart(\"files\") MultipartFile[] files) throws IOException {\n-        List<BasePostDetailDTO> result = new LinkedList<>();\n-        for (MultipartFile file : files) {\n-            BasePostDetailDTO post = backupService.importMarkdowns(file);\n-            result.add(post);\n-        }\n-        return result;\n+    @PostMapping(\"import/markdown\")\n+    @ApiOperation(\"Import markdown\")\n+    public BasePostDetailDTO backupMarkdowns(@RequestPart(\"file\") MultipartFile file) throws IOException {\n+        return backupService.importMarkdown(file);\n     }\n }\n\ndiff --git a/src/main/java/run/halo/app/controller/admin/api/PostController.java b/src/main/java/run/halo/app/controller/admin/api/PostController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/PostController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/PostController.java\n@@ -21,9 +21,7 @@\n import run.halo.app.service.OptionService;\n import run.halo.app.service.PostService;\n \n-import javax.servlet.http.HttpServletResponse;\n import javax.validation.Valid;\n-import java.io.IOException;\n import java.util.List;\n import java.util.concurrent.TimeUnit;\n \n@@ -140,19 +138,15 @@ public void deletePermanently(@PathVariable(\"postId\") Integer postId) {\n     }\n \n     @GetMapping(\"preview/{postId:\\\\d+}\")\n-    public void preview(@PathVariable(\"postId\") Integer postId,\n-                        HttpServletResponse response) throws IOException {\n+    public String preview(@PathVariable(\"postId\") Integer postId) {\n         Post post = postService.getById(postId);\n \n         String token = IdUtil.simpleUUID();\n \n         // cache preview token\n         cacheStore.putAny(\"preview-post-token-\" + postId, token, 10, TimeUnit.MINUTES);\n \n-        // build preview post url\n-        String redirect = String.format(\"%s/archives/%s?preview=true&token=%s\", optionService.getBlogBaseUrl(), post.getUrl(), token);\n-\n-        // redirect to preview url\n-        response.sendRedirect(redirect);\n+        // build preview post url and return\n+        return String.format(\"%s/archives/%s?preview=true&token=%s\", optionService.getBlogBaseUrl(), post.getUrl(), token);\n     }\n }\n\ndiff --git a/src/main/java/run/halo/app/controller/admin/api/SheetController.java b/src/main/java/run/halo/app/controller/admin/api/SheetController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/SheetController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/SheetController.java\n@@ -16,9 +16,7 @@\n import run.halo.app.service.OptionService;\n import run.halo.app.service.SheetService;\n \n-import javax.servlet.http.HttpServletResponse;\n import javax.validation.Valid;\n-import java.io.IOException;\n import java.util.List;\n import java.util.concurrent.TimeUnit;\n \n@@ -113,19 +111,15 @@ public BasePostDetailDTO deleteBy(@PathVariable(\"sheetId\") Integer sheetId) {\n     }\n \n     @GetMapping(\"preview/{sheetId:\\\\d+}\")\n-    public void preview(@PathVariable(\"sheetId\") Integer sheetId,\n-                        HttpServletResponse response) throws IOException {\n+    public String preview(@PathVariable(\"sheetId\") Integer sheetId) {\n         Sheet sheet = sheetService.getById(sheetId);\n \n         String token = IdUtil.simpleUUID();\n \n         // cache preview token\n         cacheStore.putAny(\"preview-sheet-token-\" + sheetId, token, 10, TimeUnit.MINUTES);\n \n-        // build preview sheet url\n-        String redirect = String.format(\"%s/s/%s?preview=true&token=%s\", optionService.getBlogBaseUrl(), sheet.getUrl(), token);\n-\n-        // redirect to preview url\n-        response.sendRedirect(redirect);\n+        // build preview post url and return\n+        return String.format(\"%s/s/%s?preview=true&token=%s\", optionService.getBlogBaseUrl(), sheet.getUrl(), token);\n     }\n }\n\ndiff --git a/src/main/java/run/halo/app/model/properties/AttachmentProperties.java b/src/main/java/run/halo/app/model/properties/AttachmentProperties.java\n--- a/src/main/java/run/halo/app/model/properties/AttachmentProperties.java\n+++ b/src/main/java/run/halo/app/model/properties/AttachmentProperties.java\n@@ -10,6 +10,21 @@\n  */\n public enum AttachmentProperties implements PropertyEnum {\n \n+    /**\n+     * Upload image preview enable\n+     */\n+    UPLOAD_IMAGE_PREVIEW_ENABLE(\"attachment_upload_image_preview_enable\", Boolean.class, \"true\"),\n+\n+    /**\n+     * Upload max parallel uploads\n+     */\n+    UPLOAD_MAX_PARALLEL_UPLOADS(\"attachment_upload_max_parallel_uploads\", Integer.class, \"3\"),\n+\n+    /**\n+     * Upload max files\n+     */\n+    UPLOAD_MAX_FILES(\"attachment_upload_max_files\", Integer.class, \"50\"),\n+\n     /**\n      * attachment_type\n      */\n\ndiff --git a/src/main/java/run/halo/app/service/BackupService.java b/src/main/java/run/halo/app/service/BackupService.java\n--- a/src/main/java/run/halo/app/service/BackupService.java\n+++ b/src/main/java/run/halo/app/service/BackupService.java\n@@ -19,5 +19,5 @@ public interface BackupService {\n      * @param file file\n      * @return post info\n      */\n-    BasePostDetailDTO importMarkdowns(MultipartFile file) throws IOException;\n+    BasePostDetailDTO importMarkdown(MultipartFile file) throws IOException;\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/BackupServiceImpl.java b/src/main/java/run/halo/app/service/impl/BackupServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/BackupServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/BackupServiceImpl.java\n@@ -26,7 +26,7 @@ public BackupServiceImpl(PostService postService) {\n     }\n \n     @Override\n-    public BasePostDetailDTO importMarkdowns(MultipartFile file) throws IOException {\n+    public BasePostDetailDTO importMarkdown(MultipartFile file) throws IOException {\n \n         // Read markdown content.\n         String markdown = IoUtil.read(file.getInputStream(), StandardCharsets.UTF_8);",
    "output": "Fixed #290"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/ContentArchiveController.java b/src/main/java/run/halo/app/controller/content/ContentArchiveController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentArchiveController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentArchiveController.java\n@@ -2,7 +2,6 @@\n \n import cn.hutool.core.util.IdUtil;\n import cn.hutool.core.util.PageUtil;\n-import cn.hutool.crypto.digest.BCrypt;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.PageRequest;\n@@ -185,7 +184,7 @@ public String password(@PathVariable(\"url\") String url,\n             throw new ForbiddenException(\"没有查询到该文章信息\");\n         }\n \n-        if (BCrypt.checkpw(password, post.getPassword())) {\n+        if (password.equals(post.getPassword())) {\n             String token = IdUtil.simpleUUID();\n             cacheStore.putAny(token, token, 10, TimeUnit.SECONDS);\n \n\ndiff --git a/src/main/java/run/halo/app/model/params/PostParam.java b/src/main/java/run/halo/app/model/params/PostParam.java\n--- a/src/main/java/run/halo/app/model/params/PostParam.java\n+++ b/src/main/java/run/halo/app/model/params/PostParam.java\n@@ -68,13 +68,7 @@ public Post convertTo() {\n             thumbnail = \"\";\n         }\n \n-        Post post = InputConverter.super.convertTo();\n-        // Crypt password\n-        if (StringUtils.isNotBlank(password)) {\n-            post.setPassword(BCrypt.hashpw(password, BCrypt.gensalt()));\n-        }\n-\n-        return post;\n+        return InputConverter.super.convertTo();\n     }\n \n     @Override\n@@ -87,10 +81,5 @@ public void update(Post post) {\n         }\n \n         InputConverter.super.update(post);\n-\n-        // Crypt password\n-        if (StringUtils.isNotBlank(password)) {\n-            post.setPassword(BCrypt.hashpw(password, BCrypt.gensalt()));\n-        }\n     }\n }\n\ndiff --git a/src/main/java/run/halo/app/model/params/SheetParam.java b/src/main/java/run/halo/app/model/params/SheetParam.java\n--- a/src/main/java/run/halo/app/model/params/SheetParam.java\n+++ b/src/main/java/run/halo/app/model/params/SheetParam.java\n@@ -60,13 +60,7 @@ public Sheet convertTo() {\n             thumbnail = \"\";\n         }\n \n-        Sheet sheet = InputConverter.super.convertTo();\n-        // Crypt password\n-        if (StringUtils.isNotBlank(password)) {\n-            sheet.setPassword(BCrypt.hashpw(password, BCrypt.gensalt()));\n-        }\n-\n-        return sheet;\n+        return InputConverter.super.convertTo();\n     }\n \n     @Override\n@@ -80,10 +74,5 @@ public void update(Sheet sheet) {\n         }\n \n         InputConverter.super.update(sheet);\n-\n-        // Crypt password\n-        if (StringUtils.isNotBlank(password)) {\n-            sheet.setPassword(BCrypt.hashpw(password, BCrypt.gensalt()));\n-        }\n     }\n }",
    "output": "Unencrypt the post password."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/PostController.java b/src/main/java/run/halo/app/controller/admin/api/PostController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/PostController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/PostController.java\n@@ -150,9 +150,9 @@ public void preview(@PathVariable(\"postId\") Integer postId,\n         cacheStore.putAny(\"preview-post-token-\" + postId, token, 10, TimeUnit.MINUTES);\n \n         // build preview post url\n-        String url = String.format(\"%s/archives/%s?preview=true&token=%s\", optionService.getBlogBaseUrl(), post.getUrl(), token);\n+        String redirect = String.format(\"%s/archives/%s?preview=true&token=%s\", optionService.getBlogBaseUrl(), post.getUrl(), token);\n \n         // redirect to preview url\n-        response.sendRedirect(url);\n+        response.sendRedirect(redirect);\n     }\n }\n\ndiff --git a/src/main/java/run/halo/app/controller/admin/api/SheetController.java b/src/main/java/run/halo/app/controller/admin/api/SheetController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/SheetController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/SheetController.java\n@@ -123,9 +123,9 @@ public void preview(@PathVariable(\"sheetId\") Integer sheetId,\n         cacheStore.putAny(\"preview-sheet-token-\" + sheetId, token, 10, TimeUnit.MINUTES);\n \n         // build preview sheet url\n-        String url = String.format(\"%s/s/%s?preview=true&token=%s\", optionService.getBlogBaseUrl(), sheet.getUrl(), token);\n+        String redirect = String.format(\"%s/s/%s?preview=true&token=%s\", optionService.getBlogBaseUrl(), sheet.getUrl(), token);\n \n         // redirect to preview url\n-        response.sendRedirect(url);\n+        response.sendRedirect(redirect);\n     }\n }\n\ndiff --git a/src/main/java/run/halo/app/controller/content/ContentArchiveController.java b/src/main/java/run/halo/app/controller/content/ContentArchiveController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentArchiveController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentArchiveController.java\n@@ -1,6 +1,8 @@\n package run.halo.app.controller.content;\n \n+import cn.hutool.core.util.IdUtil;\n import cn.hutool.core.util.PageUtil;\n+import cn.hutool.crypto.digest.BCrypt;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.PageRequest;\n@@ -9,11 +11,9 @@\n import org.springframework.data.web.SortDefault;\n import org.springframework.stereotype.Controller;\n import org.springframework.ui.Model;\n-import org.springframework.web.bind.annotation.GetMapping;\n-import org.springframework.web.bind.annotation.PathVariable;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.*;\n import run.halo.app.cache.StringCacheStore;\n+import run.halo.app.cache.lock.CacheLock;\n import run.halo.app.exception.ForbiddenException;\n import run.halo.app.model.entity.Category;\n import run.halo.app.model.entity.Post;\n@@ -111,10 +111,19 @@ public String archives(Model model,\n     @GetMapping(\"{url}\")\n     public String post(@PathVariable(\"url\") String url,\n                        @RequestParam(value = \"preview\", required = false, defaultValue = \"false\") boolean preview,\n+                       @RequestParam(value = \"intimate\", required = false, defaultValue = \"false\") boolean intimate,\n                        @RequestParam(value = \"token\", required = false) String token,\n                        Model model) {\n-        Post post = postService.getBy(preview ? PostStatus.DRAFT : PostStatus.PUBLISHED, url);\n+        Post post;\n+        if (preview) {\n+            post = postService.getBy(PostStatus.DRAFT, url);\n+        } else if (intimate) {\n+            post = postService.getBy(PostStatus.INTIMATE, url);\n+        } else {\n+            post = postService.getBy(PostStatus.PUBLISHED, url);\n+        }\n \n+        // if this is a preview url.\n         if (preview) {\n             // render markdown to html when preview post\n             post.setFormatContent(MarkdownUtils.renderHtml(post.getOriginalContent()));\n@@ -127,6 +136,15 @@ public String post(@PathVariable(\"url\") String url,\n             }\n         }\n \n+        // if this is a intimate url.\n+        if (intimate) {\n+            // verify token\n+            String cachedToken = cacheStore.getAny(token, String.class).orElseThrow(() -> new ForbiddenException(\"您没有该文章的访问权限\"));\n+            if (!cachedToken.equals(token)) {\n+                throw new ForbiddenException(\"您没有该文章的访问权限\");\n+            }\n+        }\n+\n         postService.getNextPost(post.getCreateTime()).ifPresent(nextPost -> model.addAttribute(\"nextPost\", nextPost));\n         postService.getPrePost(post.getCreateTime()).ifPresent(prePost -> model.addAttribute(\"prePost\", prePost));\n \n@@ -145,4 +163,37 @@ public String post(@PathVariable(\"url\") String url,\n \n         return themeService.render(\"post\");\n     }\n+\n+    @GetMapping(value = \"{url}/password\")\n+    public String password(@PathVariable(\"url\") String url,\n+                           Model model) {\n+        Post post = postService.getBy(PostStatus.INTIMATE, url);\n+        if (null == post) {\n+            throw new ForbiddenException(\"没有查询到该文章信息\");\n+        }\n+\n+        model.addAttribute(\"url\", url);\n+        return \"common/template/post_password\";\n+    }\n+\n+    @PostMapping(value = \"{url}/password\")\n+    @CacheLock\n+    public String password(@PathVariable(\"url\") String url,\n+                           @RequestParam(value = \"password\") String password) {\n+        Post post = postService.getBy(PostStatus.INTIMATE, url);\n+        if (null == post) {\n+            throw new ForbiddenException(\"没有查询到该文章信息\");\n+        }\n+\n+        if (BCrypt.checkpw(password, post.getPassword())) {\n+            String token = IdUtil.simpleUUID();\n+            cacheStore.putAny(token, token, 10, TimeUnit.SECONDS);\n+\n+            String redirect = String.format(\"%s/archives/%s?intimate=true&token=%s\", optionService.getBlogBaseUrl(), post.getUrl(), token);\n+            return \"redirect:\" + redirect;\n+        } else {\n+            String redirect = String.format(\"%s/archives/%s/password\", optionService.getBlogBaseUrl(), post.getUrl());\n+            return \"redirect:\" + redirect;\n+        }\n+    }\n }\n\ndiff --git a/src/main/java/run/halo/app/model/dto/post/BasePostSimpleDTO.java b/src/main/java/run/halo/app/model/dto/post/BasePostSimpleDTO.java\n--- a/src/main/java/run/halo/app/model/dto/post/BasePostSimpleDTO.java\n+++ b/src/main/java/run/halo/app/model/dto/post/BasePostSimpleDTO.java\n@@ -23,6 +23,8 @@ public class BasePostSimpleDTO extends BasePostMinimalDTO {\n \n     private Boolean disallowComment;\n \n+    private String password;\n+\n     private String template;\n \n     private Integer topPriority = 0;\n\ndiff --git a/src/main/java/run/halo/app/model/enums/JournalType.java b/src/main/java/run/halo/app/model/enums/JournalType.java\n--- a/src/main/java/run/halo/app/model/enums/JournalType.java\n+++ b/src/main/java/run/halo/app/model/enums/JournalType.java\n@@ -13,9 +13,9 @@ public enum JournalType implements ValueEnum<Integer> {\n     PUBLIC(1),\n \n     /**\n-     * Private type.\n+     * Intimate type.\n      */\n-    PRIVATE(0);\n+    INTIMATE(0);\n \n     private final int value;\n \n\ndiff --git a/src/main/java/run/halo/app/model/enums/PostStatus.java b/src/main/java/run/halo/app/model/enums/PostStatus.java\n--- a/src/main/java/run/halo/app/model/enums/PostStatus.java\n+++ b/src/main/java/run/halo/app/model/enums/PostStatus.java\n@@ -20,7 +20,12 @@ public enum PostStatus implements ValueEnum<Integer> {\n     /**\n      * Recycle status.\n      */\n-    RECYCLE(2);\n+    RECYCLE(2),\n+\n+    /**\n+     * Intimate status\n+     */\n+    INTIMATE(3);\n \n     private final int value;\n \n\ndiff --git a/src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java b/src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java\n@@ -217,6 +217,11 @@ public POST createOrUpdateBy(POST post) {\n             post.setFormatContent(MarkdownUtils.renderHtml(post.getOriginalContent()));\n         }\n \n+        // if password is not empty,change status to intimate\n+        if (StringUtils.isNotEmpty(post.getPassword()) && post.getStatus() != PostStatus.DRAFT) {\n+            post.setStatus(PostStatus.INTIMATE);\n+        }\n+\n         // Create or update post\n         if (ServiceUtils.isEmptyId(post.getId())) {\n             // The sheet will be created",
    "output": "Support set password to post."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/ContentJournalController.java b/src/main/java/run/halo/app/controller/content/ContentJournalController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentJournalController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentJournalController.java\n@@ -13,6 +13,7 @@\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.RequestMapping;\n import run.halo.app.model.entity.Journal;\n+import run.halo.app.model.enums.JournalType;\n import run.halo.app.service.JournalCommentService;\n import run.halo.app.service.JournalService;\n import run.halo.app.service.OptionService;\n@@ -70,15 +71,15 @@ public String journals(Model model) {\n      */\n     @GetMapping(value = \"page/{page}\")\n     public String journals(Model model,\n-                          @PathVariable(value = \"page\") Integer page,\n-                          @SortDefault(sort = \"createTime\", direction = DESC) Sort sort) {\n+                           @PathVariable(value = \"page\") Integer page,\n+                           @SortDefault(sort = \"createTime\", direction = DESC) Sort sort) {\n         log.debug(\"Requested journal page, sort info: [{}]\", sort);\n \n         int pageSize = optionService.getPostPageSize();\n \n         Pageable pageable = PageRequest.of(page >= 1 ? page - 1 : page, pageSize, sort);\n \n-        Page<Journal> journals = journalService.listAll(pageable);\n+        Page<Journal> journals = journalService.pageBy(JournalType.PUBLIC, pageable);\n \n         int[] rainbow = PageUtil.rainbow(page, journals.getTotalPages(), 3);\n \n\ndiff --git a/src/main/java/run/halo/app/repository/JournalRepository.java b/src/main/java/run/halo/app/repository/JournalRepository.java\n--- a/src/main/java/run/halo/app/repository/JournalRepository.java\n+++ b/src/main/java/run/halo/app/repository/JournalRepository.java\n@@ -1,15 +1,29 @@\n package run.halo.app.repository;\n \n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n import org.springframework.data.jpa.repository.JpaSpecificationExecutor;\n+import org.springframework.lang.NonNull;\n import run.halo.app.model.entity.Journal;\n+import run.halo.app.model.enums.JournalType;\n import run.halo.app.repository.base.BaseRepository;\n \n /**\n  * Journal repository.\n  *\n  * @author johnniang\n- * @date 3/22/19\n+ * @author ryanwang\n+ * @date 2019-03-22\n  */\n public interface JournalRepository extends BaseRepository<Journal, Integer>, JpaSpecificationExecutor<Journal> {\n \n+    /**\n+     * Finds journals by type and pageable.\n+     *\n+     * @param type     journal type must not be null\n+     * @param pageable page info must not be null\n+     * @return a page of journal\n+     */\n+    @NonNull\n+    Page<Journal> findAllByType(@NonNull JournalType type, @NonNull Pageable pageable);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/JournalService.java b/src/main/java/run/halo/app/service/JournalService.java\n--- a/src/main/java/run/halo/app/service/JournalService.java\n+++ b/src/main/java/run/halo/app/service/JournalService.java\n@@ -7,6 +7,7 @@\n import run.halo.app.model.dto.JournalDTO;\n import run.halo.app.model.dto.JournalWithCmtCountDTO;\n import run.halo.app.model.entity.Journal;\n+import run.halo.app.model.enums.JournalType;\n import run.halo.app.model.params.JournalParam;\n import run.halo.app.model.params.JournalQuery;\n import run.halo.app.service.base.CrudService;\n@@ -49,6 +50,16 @@ public interface JournalService extends CrudService<Journal, Integer> {\n     @NonNull\n     Page<Journal> pageBy(@NonNull JournalQuery journalQuery, @NonNull Pageable pageable);\n \n+    /**\n+     * Lists by type.\n+     *\n+     * @param type     journal type must not be null\n+     * @param pageable page info must not be null\n+     * @return a page of journal\n+     */\n+    @NonNull\n+    Page<Journal> pageBy(@NonNull JournalType type, @NonNull Pageable pageable);\n+\n     /**\n      * Converts to journal dto.\n      *\n\ndiff --git a/src/main/java/run/halo/app/service/impl/JournalServiceImpl.java b/src/main/java/run/halo/app/service/impl/JournalServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/JournalServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/JournalServiceImpl.java\n@@ -12,6 +12,7 @@\n import run.halo.app.model.dto.JournalDTO;\n import run.halo.app.model.dto.JournalWithCmtCountDTO;\n import run.halo.app.model.entity.Journal;\n+import run.halo.app.model.enums.JournalType;\n import run.halo.app.model.params.JournalParam;\n import run.halo.app.model.params.JournalQuery;\n import run.halo.app.repository.JournalRepository;\n@@ -64,6 +65,13 @@ public Page<Journal> pageBy(JournalQuery journalQuery, Pageable pageable) {\n         return journalRepository.findAll(buildSpecByQuery(journalQuery), pageable);\n     }\n \n+    @Override\n+    public Page<Journal> pageBy(JournalType type, Pageable pageable) {\n+        Assert.notNull(type, \"Journal type must not be null\");\n+        Assert.notNull(pageable, \"Page info must not be null\");\n+        return journalRepository.findAllByType(type, pageable);\n+    }\n+\n     @Override\n     public JournalDTO convertTo(Journal journal) {\n         Assert.notNull(journal, \"Journal must not be null\");",
    "output": "Create pageBy for journal service."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/JournalController.java b/src/main/java/run/halo/app/controller/admin/api/JournalController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/JournalController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/JournalController.java\n@@ -51,7 +51,7 @@ public JournalController(JournalService journalService,\n \n     @GetMapping\n     @ApiOperation(\"Lists journals\")\n-    public Page<JournalWithCmtCountDTO> pageBy(@PageableDefault(sort = \"updateTime\", direction = DESC) Pageable pageable,\n+    public Page<JournalWithCmtCountDTO> pageBy(@PageableDefault(sort = \"createTime\", direction = DESC) Pageable pageable,\n                                                JournalQuery journalQuery) {\n         Page<Journal> journalPage = journalService.pageBy(journalQuery, pageable);\n         return journalService.convertToCmtCountDto(journalPage);\n\ndiff --git a/src/main/java/run/halo/app/model/dto/JournalDTO.java b/src/main/java/run/halo/app/model/dto/JournalDTO.java\n--- a/src/main/java/run/halo/app/model/dto/JournalDTO.java\n+++ b/src/main/java/run/halo/app/model/dto/JournalDTO.java\n@@ -3,6 +3,7 @@\n import lombok.Data;\n import run.halo.app.model.dto.base.OutputConverter;\n import run.halo.app.model.entity.Journal;\n+import run.halo.app.model.enums.JournalType;\n \n import java.util.Date;\n \n@@ -22,4 +23,6 @@ public class JournalDTO implements OutputConverter<JournalDTO, Journal> {\n     private Long likes;\n \n     private Date createTime;\n+\n+    private JournalType type;\n }",
    "output": "Add type field for JournalDTO."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/properties/PropertyEnum.java b/src/main/java/run/halo/app/model/properties/PropertyEnum.java\n--- a/src/main/java/run/halo/app/model/properties/PropertyEnum.java\n+++ b/src/main/java/run/halo/app/model/properties/PropertyEnum.java\n@@ -29,7 +29,7 @@ public interface PropertyEnum extends ValueEnum<String> {\n      */\n     @SuppressWarnings(\"unchecked\")\n     static <T> T convertTo(@NonNull String value, @NonNull Class<T> type) {\n-        Assert.hasText(value, \"Value must not be null\");\n+        Assert.notNull(value, \"Value must not be null\");\n         Assert.notNull(type, \"Type must not be null\");\n \n         if (type.isAssignableFrom(String.class)) {",
    "output": "Fix startup exception"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java b/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n--- a/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n+++ b/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n@@ -12,6 +12,7 @@\n import run.halo.app.event.theme.ThemeActivatedEvent;\n import run.halo.app.event.user.UserUpdatedEvent;\n import run.halo.app.handler.theme.config.support.ThemeProperty;\n+import run.halo.app.model.properties.OtherProperties;\n import run.halo.app.model.support.HaloConst;\n import run.halo.app.service.OptionService;\n import run.halo.app.service.ThemeService;\n@@ -98,7 +99,8 @@ private void loadOptionsConfig() throws TemplateModelException {\n     private void loadThemeConfig() throws TemplateModelException {\n         ThemeProperty activatedTheme = themeService.getActivatedTheme();\n         configuration.setSharedVariable(\"theme\", activatedTheme);\n-        configuration.setSharedVariable(\"static\", optionService.getBlogBaseUrl() + \"/\" + activatedTheme.getFolderName());\n+        String baseUrl = optionService.getByProperty(OtherProperties.CDN_DOMAIN).orElse(optionService.getBlogBaseUrl()).toString();\n+        configuration.setSharedVariable(\"static\", baseUrl + \"/\" + activatedTheme.getFolderName());\n         configuration.setSharedVariable(\"settings\", themeSettingService.listAsMapBy(themeService.getActivatedThemeId()));\n         log.debug(\"Loaded theme and settings\");\n     }\n\ndiff --git a/src/main/java/run/halo/app/model/properties/OtherProperties.java b/src/main/java/run/halo/app/model/properties/OtherProperties.java\n--- a/src/main/java/run/halo/app/model/properties/OtherProperties.java\n+++ b/src/main/java/run/halo/app/model/properties/OtherProperties.java\n@@ -9,7 +9,9 @@\n  */\n public enum OtherProperties implements PropertyEnum {\n \n-    CUSTOM_HEAD(\"blog_custom_head\",String.class,\"\"),\n+    CDN_DOMAIN(\"blog_cdn_domain\", String.class, \"\"),\n+\n+    CUSTOM_HEAD(\"blog_custom_head\", String.class, \"\"),\n \n     STATISTICS_CODE(\"blog_statistics_code\", String.class, \"\");\n ",
    "output": "Support set cdn url instead of base url."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n@@ -177,6 +177,10 @@ private PostDetailVO createOrUpdate(@NonNull Post post, Set<Integer> tagIds, Set\n         // Create or update post\n         post = super.createOrUpdateBy(post);\n \n+        postTagService.removeByPostId(post.getId());\n+\n+        postCategoryService.removeByPostId(post.getId());\n+\n         // List all tags\n         List<Tag> tags = tagService.listAllByIds(tagIds);\n ",
    "output": "Fixed #279"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/params/PostParam.java b/src/main/java/run/halo/app/model/params/PostParam.java\n--- a/src/main/java/run/halo/app/model/params/PostParam.java\n+++ b/src/main/java/run/halo/app/model/params/PostParam.java\n@@ -62,7 +62,7 @@ public class PostParam implements InputConverter<Post> {\n     @Override\n     public Post convertTo() {\n         if (StringUtils.isBlank(url)) {\n-            url = title;\n+            url = title.replace(\".\",\"\");\n         }\n         if (null == thumbnail) {\n             thumbnail = \"\";\n@@ -80,7 +80,7 @@ public Post convertTo() {\n     @Override\n     public void update(Post post) {\n         if (StringUtils.isBlank(url)) {\n-            url = title;\n+            url = title.replace(\".\",\"\");\n         }\n         if (null == thumbnail) {\n             thumbnail = \"\";\n\ndiff --git a/src/main/java/run/halo/app/model/params/SheetParam.java b/src/main/java/run/halo/app/model/params/SheetParam.java\n--- a/src/main/java/run/halo/app/model/params/SheetParam.java\n+++ b/src/main/java/run/halo/app/model/params/SheetParam.java\n@@ -53,13 +53,9 @@ public class SheetParam implements InputConverter<Sheet> {\n     @Override\n     public Sheet convertTo() {\n         if (StringUtils.isBlank(url)) {\n-            url = HaloUtils.normalizeUrl(title);\n-        } else {\n-            url = HaloUtils.normalizeUrl(url);\n+            url = title.replace(\".\",\"\");\n         }\n \n-        url = HaloUtils.initializeUrlIfBlank(url);\n-\n         if (null == thumbnail) {\n             thumbnail = \"\";\n         }\n@@ -76,13 +72,9 @@ public Sheet convertTo() {\n     @Override\n     public void update(Sheet sheet) {\n         if (StringUtils.isBlank(url)) {\n-            url = HaloUtils.normalizeUrl(title);\n-        } else {\n-            url = HaloUtils.normalizeUrl(url);\n+            url = title.replace(\".\",\"\");\n         }\n \n-        url = HaloUtils.initializeUrlIfBlank(url);\n-\n         if (null == thumbnail) {\n             thumbnail = \"\";\n         }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n@@ -194,7 +194,7 @@ public void clearToken() {\n     @Override\n     public StatisticDTO getCount() {\n         StatisticDTO statisticDTO = new StatisticDTO();\n-        statisticDTO.setPostCount(postService.countByStatus(PostStatus.PUBLISHED));\n+        statisticDTO.setPostCount(postService.countByStatus(PostStatus.PUBLISHED) + sheetService.countByStatus(PostStatus.PUBLISHED));\n         statisticDTO.setAttachmentCount(attachmentService.count());\n \n         // Handle comment count",
    "output": "Fixed #280"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/HaloConfiguration.java b/src/main/java/run/halo/app/config/HaloConfiguration.java\n--- a/src/main/java/run/halo/app/config/HaloConfiguration.java\n+++ b/src/main/java/run/halo/app/config/HaloConfiguration.java\n@@ -80,7 +80,6 @@ public FilterRegistrationBean<CorsFilter> corsFilter() {\n      *\n      * @return Log filter registration bean\n      */\n-    @Bean\n     public FilterRegistrationBean<LogFilter> logFilter() {\n         FilterRegistrationBean<LogFilter> logFilter = new FilterRegistrationBean<>();\n \n\ndiff --git a/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java b/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n--- a/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n+++ b/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n@@ -22,7 +22,7 @@\n import org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer;\n import org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver;\n import run.halo.app.config.properties.HaloProperties;\n-import run.halo.app.controller.support.PageJacksonSerializer;\n+import run.halo.app.core.PageJacksonSerializer;\n import run.halo.app.factory.StringToEnumConverterFactory;\n import run.halo.app.model.support.HaloConst;\n import run.halo.app.security.resolver.AuthenticationArgumentResolver;\n\ndiff --git a/src/main/java/run/halo/app/core/CommonResultControllerAdvice.java b/src/main/java/run/halo/app/core/CommonResultControllerAdvice.java\n--- a/src/main/java/run/halo/app/core/CommonResultControllerAdvice.java\n+++ b/src/main/java/run/halo/app/core/CommonResultControllerAdvice.java\n@@ -1,4 +1,4 @@\n-package run.halo.app.controller.base;\n+package run.halo.app.core;\n \n import org.springframework.core.MethodParameter;\n import org.springframework.http.HttpStatus;\n\ndiff --git a/src/main/java/run/halo/app/core/ControllerExceptionHandler.java b/src/main/java/run/halo/app/core/ControllerExceptionHandler.java\n--- a/src/main/java/run/halo/app/core/ControllerExceptionHandler.java\n+++ b/src/main/java/run/halo/app/core/ControllerExceptionHandler.java\n@@ -1,4 +1,4 @@\n-package run.halo.app.controller.base;\n+package run.halo.app.core;\n \n import lombok.extern.slf4j.Slf4j;\n import org.springframework.dao.DataIntegrityViolationException;\n\ndiff --git a/src/main/java/run/halo/app/core/ControllerLogAop.java b/src/main/java/run/halo/app/core/ControllerLogAop.java\n--- a/src/main/java/run/halo/app/core/ControllerLogAop.java\n+++ b/src/main/java/run/halo/app/core/ControllerLogAop.java\n@@ -0,0 +1,88 @@\n+package run.halo.app.core;\n+\n+import cn.hutool.extra.servlet.ServletUtil;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import lombok.extern.slf4j.Slf4j;\n+import org.aspectj.lang.ProceedingJoinPoint;\n+import org.aspectj.lang.annotation.Around;\n+import org.aspectj.lang.annotation.Aspect;\n+import org.aspectj.lang.annotation.Pointcut;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.context.request.RequestContextHolder;\n+import org.springframework.web.context.request.ServletRequestAttributes;\n+import org.springframework.web.multipart.MultipartFile;\n+import run.halo.app.utils.JsonUtils;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.util.Objects;\n+\n+@Aspect\n+@Component\n+@Slf4j\n+public class ControllerLogAop {\n+\n+    @Pointcut(\"execution(*  *..*.*.controller..*.*(..))\")\n+    public void controller() {\n+    }\n+\n+    @Around(\"controller()\")\n+    public Object controller(ProceedingJoinPoint joinPoint) throws Throwable {\n+        String className = joinPoint.getTarget().getClass().getSimpleName();\n+        String methodName = joinPoint.getSignature().getName();\n+        Object[] args = joinPoint.getArgs();\n+\n+        // Get request attribute\n+        ServletRequestAttributes requestAttributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();\n+        HttpServletRequest request = Objects.requireNonNull(requestAttributes).getRequest();\n+\n+        printRequestLog(request, className, methodName, args);\n+        long start = System.currentTimeMillis();\n+        Object returnObj = joinPoint.proceed();\n+        printResponseLog(request, className, methodName, returnObj, System.currentTimeMillis() - start);\n+        return returnObj;\n+    }\n+\n+\n+    private void printRequestLog(HttpServletRequest request, String clazzName, String methodName, Object[] args) throws JsonProcessingException {\n+        log.debug(\"Request URL: [{}], URI: [{}], Request Method: [{}], IP: [{}]\",\n+                request.getRequestURL(),\n+                request.getRequestURI(),\n+                request.getMethod(),\n+                ServletUtil.getClientIP(request));\n+\n+        if (args == null || !log.isDebugEnabled()) {\n+            return;\n+        }\n+\n+        boolean hasServletArg = false;\n+        for (Object arg : args) {\n+            if (arg instanceof HttpServletRequest ||\n+                    arg instanceof HttpServletResponse ||\n+                    arg instanceof MultipartFile) {\n+                hasServletArg = true;\n+                break;\n+            }\n+        }\n+\n+        if (!hasServletArg) {\n+            String requestBody = JsonUtils.objectToJson(args);\n+            log.debug(\"{}.{} Parameters: [{}]\", clazzName, methodName, requestBody);\n+        }\n+    }\n+\n+    private void printResponseLog(HttpServletRequest request, String className, String methodName, Object returnObj, long usage) throws JsonProcessingException {\n+        if (log.isDebugEnabled()) {\n+            String returningData = null;\n+            if (returnObj != null) {\n+                if (returnObj.getClass().isAssignableFrom(byte[].class)) {\n+                    returningData = \"Binary data\";\n+                } else {\n+                    returningData = JsonUtils.objectToJson(returnObj);\n+                }\n+            }\n+            log.debug(\"{}.{} Response: [{}], usage: [{}]ms\", className, methodName, returningData, usage);\n+        }\n+    }\n+}\n+\n\ndiff --git a/src/main/java/run/halo/app/core/PageJacksonSerializer.java b/src/main/java/run/halo/app/core/PageJacksonSerializer.java\n--- a/src/main/java/run/halo/app/core/PageJacksonSerializer.java\n+++ b/src/main/java/run/halo/app/core/PageJacksonSerializer.java\n@@ -1,4 +1,4 @@\n-package run.halo.app.controller.support;\n+package run.halo.app.core;\n \n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.databind.JsonSerializer;",
    "output": "Enable request and response logging"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/ThemeController.java b/src/main/java/run/halo/app/controller/admin/api/ThemeController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/ThemeController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/ThemeController.java\n@@ -6,6 +6,7 @@\n import org.springframework.web.multipart.MultipartFile;\n import run.halo.app.handler.theme.config.support.Group;\n import run.halo.app.handler.theme.config.support.ThemeProperty;\n+import run.halo.app.model.params.ThemeContentParam;\n import run.halo.app.model.support.BaseResponse;\n import run.halo.app.model.support.ThemeFile;\n import run.halo.app.service.ThemeService;\n@@ -63,9 +64,8 @@ public BaseResponse<String> getContentBy(@RequestParam(name = \"path\") String pat\n     }\n \n     @PutMapping(\"files/content\")\n-    public void updateContentBy(@RequestParam(name = \"path\") String path,\n-                                @RequestBody String content) {\n-        themeService.saveTemplateContent(path, content);\n+    public void updateContentBy(@RequestBody ThemeContentParam param) {\n+        themeService.saveTemplateContent(param.getPath(), param.getContent());\n     }\n \n     @GetMapping(\"files/custom\")\n\ndiff --git a/src/main/java/run/halo/app/model/dto/post/BasePostSimpleDTO.java b/src/main/java/run/halo/app/model/dto/post/BasePostSimpleDTO.java\n--- a/src/main/java/run/halo/app/model/dto/post/BasePostSimpleDTO.java\n+++ b/src/main/java/run/halo/app/model/dto/post/BasePostSimpleDTO.java\n@@ -4,7 +4,6 @@\n import lombok.EqualsAndHashCode;\n import lombok.ToString;\n import run.halo.app.model.enums.PostCreateFrom;\n-import run.halo.app.model.enums.PostType;\n \n /**\n  * Base page simple output dto.\n\ndiff --git a/src/main/java/run/halo/app/model/params/PostParam.java b/src/main/java/run/halo/app/model/params/PostParam.java\n--- a/src/main/java/run/halo/app/model/params/PostParam.java\n+++ b/src/main/java/run/halo/app/model/params/PostParam.java\n@@ -7,7 +7,6 @@\n import run.halo.app.model.entity.Post;\n import run.halo.app.model.enums.PostCreateFrom;\n import run.halo.app.model.enums.PostStatus;\n-import run.halo.app.utils.HaloUtils;\n \n import javax.validation.constraints.Min;\n import javax.validation.constraints.NotBlank;\n@@ -19,6 +18,7 @@\n  * Post param.\n  *\n  * @author johnniang\n+ * @author ryanwang\n  * @date 3/21/19\n  */\n @Data\n@@ -64,6 +64,9 @@ public Post convertTo() {\n         if (StringUtils.isBlank(url)) {\n             url = title;\n         }\n+        if (null == thumbnail) {\n+            thumbnail = \"\";\n+        }\n \n         Post post = InputConverter.super.convertTo();\n         // Crypt password\n@@ -79,6 +82,9 @@ public void update(Post post) {\n         if (StringUtils.isBlank(url)) {\n             url = title;\n         }\n+        if (null == thumbnail) {\n+            thumbnail = \"\";\n+        }\n \n         InputConverter.super.update(post);\n \n\ndiff --git a/src/main/java/run/halo/app/model/params/SheetParam.java b/src/main/java/run/halo/app/model/params/SheetParam.java\n--- a/src/main/java/run/halo/app/model/params/SheetParam.java\n+++ b/src/main/java/run/halo/app/model/params/SheetParam.java\n@@ -14,7 +14,10 @@\n import java.util.Date;\n \n /**\n+ * Sheet param.\n+ *\n  * @author johnniang\n+ * @author ryanwang\n  * @date 19-4-24\n  */\n @Data\n@@ -57,6 +60,10 @@ public Sheet convertTo() {\n \n         url = HaloUtils.initializeUrlIfBlank(url);\n \n+        if (null == thumbnail) {\n+            thumbnail = \"\";\n+        }\n+\n         Sheet sheet = InputConverter.super.convertTo();\n         // Crypt password\n         if (StringUtils.isNotBlank(password)) {\n@@ -76,6 +83,10 @@ public void update(Sheet sheet) {\n \n         url = HaloUtils.initializeUrlIfBlank(url);\n \n+        if (null == thumbnail) {\n+            thumbnail = \"\";\n+        }\n+\n         InputConverter.super.update(sheet);\n \n         // Crypt password\n\ndiff --git a/src/main/java/run/halo/app/model/params/ThemeContentParam.java b/src/main/java/run/halo/app/model/params/ThemeContentParam.java\n--- a/src/main/java/run/halo/app/model/params/ThemeContentParam.java\n+++ b/src/main/java/run/halo/app/model/params/ThemeContentParam.java\n@@ -0,0 +1,15 @@\n+package run.halo.app.model.params;\n+\n+import lombok.Data;\n+\n+/**\n+ * Theme content param.\n+ *\n+ * @author ryanwang\n+ * @date 2019-09-01\n+ */\n+@Data\n+public class ThemeContentParam {\n+    private String path;\n+    private String content;\n+}",
    "output": "Fixed save theme content error."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/InstallController.java b/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n@@ -1,5 +1,7 @@\n package run.halo.app.controller.admin.api;\n \n+import cn.hutool.core.text.StrBuilder;\n+import cn.hutool.crypto.SecureUtil;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.lang3.StringUtils;\n import org.springframework.context.ApplicationEventPublisher;\n@@ -196,11 +198,15 @@ private User createUser(InstallParam installParam) {\n             installParam.update(user);\n             // Set password manually\n             userService.setPassword(user, installParam.getPassword());\n-            // Set default avatar\n-            userService.setDefaultAvatar(user);\n             // Update user\n             return userService.update(user);\n-        }).orElseGet(() -> userService.createBy(installParam));\n+        }).orElseGet(() -> {\n+            StrBuilder gravatar = new StrBuilder(\"//cn.gravatar.com/avatar/\");\n+            gravatar.append(SecureUtil.md5(installParam.getEmail()));\n+            gravatar.append(\"?s=256&d=mm\");\n+            installParam.setAvatar(gravatar.toString());\n+            return userService.createBy(installParam);\n+        });\n     }\n \n     private void initSettings(InstallParam installParam) {\n\ndiff --git a/src/main/java/run/halo/app/controller/admin/api/PostController.java b/src/main/java/run/halo/app/controller/admin/api/PostController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/PostController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/PostController.java\n@@ -2,8 +2,11 @@\n \n import io.swagger.annotations.ApiOperation;\n import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.PageRequest;\n import org.springframework.data.domain.Pageable;\n+import org.springframework.data.domain.Sort;\n import org.springframework.data.web.PageableDefault;\n+import org.springframework.data.web.SortDefault;\n import org.springframework.web.bind.annotation.*;\n import run.halo.app.model.dto.post.BasePostMinimalDTO;\n import run.halo.app.model.dto.post.BasePostSimpleDTO;\n@@ -24,6 +27,7 @@\n  * Post controller.\n  *\n  * @author johnniang\n+ * @author ryanwang\n  * @date 3/19/19\n  */\n @RestController\n@@ -38,8 +42,13 @@ public PostController(PostService postService) {\n \n     @GetMapping\n     @ApiOperation(\"Lists posts\")\n-    public Page<PostListVO> pageBy(@PageableDefault(sort = \"createTime\", direction = DESC) Pageable pageable,\n+    public Page<PostListVO> pageBy(Integer page, Integer size,\n+                                   @SortDefault.SortDefaults({\n+                                           @SortDefault(sort = \"topPriority\", direction = DESC),\n+                                           @SortDefault(sort = \"createTime\", direction = DESC)\n+                                   }) Sort sort,\n                                    PostQuery postQuery) {\n+        Pageable pageable = PageRequest.of(page, size, sort);\n         Page<Post> postPage = postService.pageBy(postQuery, pageable);\n         return postService.convertToListVo(postPage);\n     }\n\ndiff --git a/src/main/java/run/halo/app/controller/admin/api/ThemeController.java b/src/main/java/run/halo/app/controller/admin/api/ThemeController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/ThemeController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/ThemeController.java\n@@ -47,7 +47,7 @@ public Set<ThemeProperty> listAll() {\n         return themeService.getThemes();\n     }\n \n-    @GetMapping(\"files\")\n+    @GetMapping(\"activation/files\")\n     public List<ThemeFile> listFiles() {\n         return themeService.listThemeFolderBy(themeService.getActivatedThemeId());\n     }",
    "output": "Support stick post."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/ContentIndexController.java b/src/main/java/run/halo/app/controller/content/ContentIndexController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentIndexController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentIndexController.java\n@@ -6,14 +6,14 @@\n import org.springframework.data.domain.PageRequest;\n import org.springframework.data.domain.Pageable;\n import org.springframework.data.domain.Sort;\n-import org.springframework.data.web.SortDefault;\n import org.springframework.stereotype.Controller;\n import org.springframework.ui.Model;\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.RequestMapping;\n import run.halo.app.model.entity.Post;\n import run.halo.app.model.enums.PostStatus;\n+import run.halo.app.model.properties.PostProperties;\n import run.halo.app.model.vo.PostListVO;\n import run.halo.app.service.OptionService;\n import run.halo.app.service.PostService;\n@@ -55,7 +55,7 @@ public ContentIndexController(PostService postService,\n      */\n     @GetMapping\n     public String index(Model model) {\n-        return this.index(model, 1, Sort.by(DESC, \"topPriority\").and(Sort.by(DESC, \"createTime\")));\n+        return this.index(model, 1);\n     }\n \n     /**\n@@ -67,14 +67,10 @@ public String index(Model model) {\n      */\n     @GetMapping(value = \"page/{page}\")\n     public String index(Model model,\n-                        @PathVariable(value = \"page\") Integer page,\n-                        @SortDefault.SortDefaults({\n-                                @SortDefault(sort = \"topPriority\", direction = DESC),\n-                                @SortDefault(sort = \"createTime\", direction = DESC)\n-                        }) Sort sort) {\n-        log.debug(\"Requested index page, sort info: [{}]\", sort);\n+                        @PathVariable(value = \"page\") Integer page) {\n+        String indexSort = optionService.getByPropertyOfNonNull(PostProperties.INDEX_SORT).toString();\n         int pageSize = optionService.getPostPageSize();\n-        Pageable pageable = PageRequest.of(page >= 1 ? page - 1 : page, pageSize, sort);\n+        Pageable pageable = PageRequest.of(page >= 1 ? page - 1 : page, pageSize, Sort.by(DESC, \"topPriority\").and(Sort.by(DESC, indexSort)));\n \n         Page<Post> postPage = postService.pageBy(PostStatus.PUBLISHED, pageable);\n         Page<PostListVO> posts = postService.convertToListVo(postPage);\n\ndiff --git a/src/main/java/run/halo/app/model/properties/PostProperties.java b/src/main/java/run/halo/app/model/properties/PostProperties.java\n--- a/src/main/java/run/halo/app/model/properties/PostProperties.java\n+++ b/src/main/java/run/halo/app/model/properties/PostProperties.java\n@@ -12,7 +12,9 @@ public enum PostProperties implements PropertyEnum {\n \n     RSS_PAGE_SIZE(\"rss_page_size\", Integer.class, \"20\"),\n \n-    INDEX_PAGE_SIZE(\"post_index_page_size\", Integer.class, \"10\");\n+    INDEX_PAGE_SIZE(\"post_index_page_size\", Integer.class, \"10\"),\n+\n+    INDEX_SORT(\"post_index_sort\",String.class,\"createTime\");\n \n     private final String value;\n ",
    "output": "Support set post sort."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/properties/PropertyEnum.java b/src/main/java/run/halo/app/model/properties/PropertyEnum.java\n--- a/src/main/java/run/halo/app/model/properties/PropertyEnum.java\n+++ b/src/main/java/run/halo/app/model/properties/PropertyEnum.java\n@@ -57,7 +57,7 @@ static <T> T convertTo(@NonNull String value, @NonNull Class<T> type) {\n         }\n \n         if (type.isAssignableFrom(Double.class)) {\n-            return (T) Byte.valueOf(value);\n+            return (T) Double.valueOf(value);\n         }\n \n         if (type.isAssignableFrom(Float.class)) {",
    "output": "Fix property conversion bug"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/params/SheetParam.java b/src/main/java/run/halo/app/model/params/SheetParam.java\n--- a/src/main/java/run/halo/app/model/params/SheetParam.java\n+++ b/src/main/java/run/halo/app/model/params/SheetParam.java\n@@ -11,6 +11,7 @@\n import javax.validation.constraints.Min;\n import javax.validation.constraints.NotBlank;\n import javax.validation.constraints.Size;\n+import java.util.Date;\n \n /**\n  * @author johnniang\n@@ -35,6 +36,8 @@ public class SheetParam implements InputConverter<Sheet> {\n \n     private Boolean disallowComment = false;\n \n+    private Date createTime;\n+\n     @Size(max = 255, message = \"Length of password must not be more than {max}\")\n     private String password;\n ",
    "output": "Add property createTime to SheetParam."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/dto/MenuDTO.java b/src/main/java/run/halo/app/model/dto/MenuDTO.java\n--- a/src/main/java/run/halo/app/model/dto/MenuDTO.java\n+++ b/src/main/java/run/halo/app/model/dto/MenuDTO.java\n@@ -10,6 +10,7 @@\n  * Menu output dto.\n  *\n  * @author johnniang\n+ * @author ryanwang\n  * @date 4/3/19\n  */\n @Data\n@@ -30,4 +31,6 @@ public class MenuDTO implements OutputConverter<MenuDTO, Menu> {\n     private String icon;\n \n     private Integer parentId;\n+\n+    private String team;\n }\n\ndiff --git a/src/main/java/run/halo/app/model/entity/Menu.java b/src/main/java/run/halo/app/model/entity/Menu.java\n--- a/src/main/java/run/halo/app/model/entity/Menu.java\n+++ b/src/main/java/run/halo/app/model/entity/Menu.java\n@@ -60,6 +60,12 @@ public class Menu extends BaseEntity {\n     @Column(name = \"parent_id\", columnDefinition = \"int default 0\")\n     private Integer parentId;\n \n+    /**\n+     * Menu team name.\n+     */\n+    @Column(name = \"team\", columnDefinition = \"varchar(255) default ''\")\n+    private String team;\n+\n     @Override\n     public void prePersist() {\n         super.prePersist();\n@@ -81,5 +87,9 @@ public void prePersist() {\n         if (parentId == null) {\n             parentId = 0;\n         }\n+\n+        if(team == null){\n+            team = \"\";\n+        }\n     }\n }\n\ndiff --git a/src/main/java/run/halo/app/model/freemarker/tag/MenuTagDirective.java b/src/main/java/run/halo/app/model/freemarker/tag/MenuTagDirective.java\n--- a/src/main/java/run/halo/app/model/freemarker/tag/MenuTagDirective.java\n+++ b/src/main/java/run/halo/app/model/freemarker/tag/MenuTagDirective.java\n@@ -43,6 +43,13 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars, Templ\n                 case \"tree\":\n                     env.setVariable(\"menus\", builder.build().wrap(menuService.listAsTree(Sort.by(DESC, \"priority\"))));\n                     break;\n+                case \"listTeams\":\n+                    env.setVariable(\"teams\", builder.build().wrap(menuService.listTeamVos(Sort.by(DESC, \"priority\"))));\n+                    break;\n+                case \"listByTeam\":\n+                    String team = params.get(\"team\").toString();\n+                    env.setVariable(\"menus\", builder.build().wrap(menuService.listByTeam(team, Sort.by(DESC, \"priority\"))));\n+                    break;\n                 case \"count\":\n                     env.setVariable(\"count\", builder.build().wrap(menuService.count()));\n                     break;\n\ndiff --git a/src/main/java/run/halo/app/model/params/MenuParam.java b/src/main/java/run/halo/app/model/params/MenuParam.java\n--- a/src/main/java/run/halo/app/model/params/MenuParam.java\n+++ b/src/main/java/run/halo/app/model/params/MenuParam.java\n@@ -13,6 +13,7 @@\n  * Menu param.\n  *\n  * @author johnniang\n+ * @author ryanwang\n  * @date 4/3/19\n  */\n @Data\n@@ -37,4 +38,7 @@ public class MenuParam implements InputConverter<Menu> {\n     private String icon;\n \n     private Integer parentId;\n+\n+    @Size(max = 255, message = \"菜单分组的字符长度不能超过 {max}\")\n+    private String team;\n }\n\ndiff --git a/src/main/java/run/halo/app/model/vo/MenuTeamVO.java b/src/main/java/run/halo/app/model/vo/MenuTeamVO.java\n--- a/src/main/java/run/halo/app/model/vo/MenuTeamVO.java\n+++ b/src/main/java/run/halo/app/model/vo/MenuTeamVO.java\n@@ -0,0 +1,22 @@\n+package run.halo.app.model.vo;\n+\n+import lombok.Data;\n+import lombok.ToString;\n+import run.halo.app.model.dto.MenuDTO;\n+\n+import java.util.List;\n+\n+/**\n+ * Menu team vo.\n+ *\n+ * @author ryanwang\n+ * @date : 2019/8/28\n+ */\n+@Data\n+@ToString\n+public class MenuTeamVO {\n+\n+    private String team;\n+\n+    private List<MenuDTO> menus;\n+}\n\ndiff --git a/src/main/java/run/halo/app/repository/MenuRepository.java b/src/main/java/run/halo/app/repository/MenuRepository.java\n--- a/src/main/java/run/halo/app/repository/MenuRepository.java\n+++ b/src/main/java/run/halo/app/repository/MenuRepository.java\n@@ -1,5 +1,6 @@\n package run.halo.app.repository;\n \n+import org.springframework.data.domain.Sort;\n import org.springframework.lang.NonNull;\n import run.halo.app.model.entity.Menu;\n import run.halo.app.repository.base.BaseRepository;\n@@ -10,6 +11,8 @@\n  * Menu repository.\n  *\n  * @author johnniang\n+ * @author ryanwang\n+ * @date 2019-8-28\n  */\n public interface MenuRepository extends BaseRepository<Menu, Integer> {\n \n@@ -18,4 +21,6 @@ public interface MenuRepository extends BaseRepository<Menu, Integer> {\n     boolean existsByIdNotAndName(@NonNull Integer id, @NonNull String name);\n \n     List<Menu> findByParentId(@NonNull Integer id);\n+\n+    List<Menu> findByTeam(String team, Sort sort);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/MenuService.java b/src/main/java/run/halo/app/service/MenuService.java\n--- a/src/main/java/run/halo/app/service/MenuService.java\n+++ b/src/main/java/run/halo/app/service/MenuService.java\n@@ -5,6 +5,7 @@\n import run.halo.app.model.dto.MenuDTO;\n import run.halo.app.model.entity.Menu;\n import run.halo.app.model.params.MenuParam;\n+import run.halo.app.model.vo.MenuTeamVO;\n import run.halo.app.model.vo.MenuVO;\n import run.halo.app.service.base.CrudService;\n \n@@ -28,6 +29,24 @@ public interface MenuService extends CrudService<Menu, Integer> {\n     @NonNull\n     List<MenuDTO> listDtos(@NonNull Sort sort);\n \n+    /**\n+     * Lists menu team vos.\n+     *\n+     * @param sort must not be null\n+     * @return a list of menu team vo\n+     */\n+    @NonNull\n+    List<MenuTeamVO> listTeamVos(@NonNull Sort sort);\n+\n+    /**\n+     * List menus by team.\n+     *\n+     * @param team team\n+     * @param sort sort\n+     * @return list of menus\n+     */\n+    List<MenuDTO> listByTeam(@NonNull String team, Sort sort);\n+\n     /**\n      * Creates a menu.\n      *\n\ndiff --git a/src/main/java/run/halo/app/service/impl/MenuServiceImpl.java b/src/main/java/run/halo/app/service/impl/MenuServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/MenuServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/MenuServiceImpl.java\n@@ -9,15 +9,14 @@\n import run.halo.app.model.dto.MenuDTO;\n import run.halo.app.model.entity.Menu;\n import run.halo.app.model.params.MenuParam;\n+import run.halo.app.model.vo.MenuTeamVO;\n import run.halo.app.model.vo.MenuVO;\n import run.halo.app.repository.MenuRepository;\n import run.halo.app.service.MenuService;\n import run.halo.app.service.base.AbstractCrudService;\n import run.halo.app.utils.ServiceUtils;\n \n-import java.util.Collections;\n-import java.util.LinkedList;\n-import java.util.List;\n+import java.util.*;\n import java.util.stream.Collectors;\n \n /**\n@@ -43,6 +42,41 @@ public List<MenuDTO> listDtos(Sort sort) {\n         return convertTo(listAll(sort));\n     }\n \n+    @Override\n+    public List<MenuTeamVO> listTeamVos(Sort sort) {\n+        Assert.notNull(sort, \"Sort info must not be null\");\n+\n+        // List all menus\n+        List<MenuDTO> menus = listDtos(sort);\n+\n+        // Get teams\n+        Set<String> teams = ServiceUtils.fetchProperty(menus, MenuDTO::getTeam);\n+\n+        // Convert to team menu list map (Key: team, value: menu list)\n+        Map<String, List<MenuDTO>> teamMenuListMap = ServiceUtils.convertToListMap(teams, menus, MenuDTO::getTeam);\n+\n+        List<MenuTeamVO> result = new LinkedList<>();\n+\n+        // Wrap menu team vo list\n+        teamMenuListMap.forEach((team, menuList) -> {\n+            // Build menu team vo\n+            MenuTeamVO menuTeamVO = new MenuTeamVO();\n+            menuTeamVO.setTeam(team);\n+            menuTeamVO.setMenus(menuList);\n+\n+            // Add it to result\n+            result.add(menuTeamVO);\n+        });\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public List<MenuDTO> listByTeam(String team, Sort sort) {\n+        List<Menu> menus = menuRepository.findByTeam(team, sort);\n+        return menus.stream().map(menu -> (MenuDTO) new MenuDTO().convertFrom(menu)).collect(Collectors.toList());\n+    }\n+\n     @Override\n     public Menu createBy(MenuParam menuParam) {\n         Assert.notNull(menuParam, \"Menu param must not be null\");",
    "output": "Support menu team."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/enums/InputType.java b/src/main/java/run/halo/app/model/enums/InputType.java\n--- a/src/main/java/run/halo/app/model/enums/InputType.java\n+++ b/src/main/java/run/halo/app/model/enums/InputType.java\n@@ -21,7 +21,9 @@ public enum InputType {\n \n     TEXTAREA,\n \n-    COLOR;\n+    COLOR,\n+\n+    ATTACHMENT;\n \n     /**\n      * Convert type to input type.",
    "output": "Support attachment type for theme setting."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/ThemeController.java b/src/main/java/run/halo/app/controller/admin/api/ThemeController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/ThemeController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/ThemeController.java\n@@ -52,6 +52,11 @@ public List<ThemeFile> listFiles() {\n         return themeService.listThemeFolderBy(themeService.getActivatedThemeId());\n     }\n \n+    @GetMapping(\"{themeId}/files\")\n+    public List<ThemeFile> listFiles(@PathVariable(\"themeId\") String themeId){\n+        return themeService.listThemeFolderBy(themeId);\n+    }\n+\n     @GetMapping(\"files/content\")\n     public BaseResponse<String> getContentBy(@RequestParam(name = \"path\") String path) {\n         return BaseResponse.ok(HttpStatus.OK.getReasonPhrase(), themeService.getTemplateContent(path));\n\ndiff --git a/src/main/java/run/halo/app/model/entity/Journal.java b/src/main/java/run/halo/app/model/entity/Journal.java\n--- a/src/main/java/run/halo/app/model/entity/Journal.java\n+++ b/src/main/java/run/halo/app/model/entity/Journal.java\n@@ -3,13 +3,15 @@\n import lombok.Data;\n import lombok.EqualsAndHashCode;\n import lombok.ToString;\n+import run.halo.app.model.enums.JournalType;\n \n import javax.persistence.*;\n \n /**\n  * Journal entity\n  *\n  * @author johnniang\n+ * @author ryanwang\n  * @date 3/22/19\n  */\n @Data\n@@ -29,6 +31,9 @@ public class Journal extends BaseEntity {\n     @Column(name = \"likes\", columnDefinition = \"bigint default 0\")\n     private Long likes;\n \n+    @Column(name = \"type\", columnDefinition = \"int default 1\")\n+    private JournalType type;\n+\n     @Override\n     public void prePersist() {\n         super.prePersist();\n@@ -38,5 +43,10 @@ public void prePersist() {\n         if (likes == null || likes < 0) {\n             likes = 0L;\n         }\n+\n+\n+        if (type == null) {\n+            type = JournalType.PUBLIC;\n+        }\n     }\n }\n\ndiff --git a/src/main/java/run/halo/app/model/enums/JournalType.java b/src/main/java/run/halo/app/model/enums/JournalType.java\n--- a/src/main/java/run/halo/app/model/enums/JournalType.java\n+++ b/src/main/java/run/halo/app/model/enums/JournalType.java\n@@ -0,0 +1,30 @@\n+package run.halo.app.model.enums;\n+\n+/**\n+ * Journal type.\n+ *\n+ * @author ryanwnag\n+ */\n+public enum JournalType implements ValueEnum<Integer> {\n+\n+    /**\n+     * Public type.\n+     */\n+    PUBLIC(1),\n+\n+    /**\n+     * Private type.\n+     */\n+    PRIVATE(0);\n+\n+    private final int value;\n+\n+    JournalType(int value) {\n+        this.value = value;\n+    }\n+\n+    @Override\n+    public Integer getValue() {\n+        return value;\n+    }\n+}\n\ndiff --git a/src/main/java/run/halo/app/model/params/JournalParam.java b/src/main/java/run/halo/app/model/params/JournalParam.java\n--- a/src/main/java/run/halo/app/model/params/JournalParam.java\n+++ b/src/main/java/run/halo/app/model/params/JournalParam.java\n@@ -3,6 +3,7 @@\n import lombok.Data;\n import run.halo.app.model.dto.base.InputConverter;\n import run.halo.app.model.entity.Journal;\n+import run.halo.app.model.enums.JournalType;\n \n import javax.validation.constraints.NotBlank;\n import javax.validation.constraints.Size;\n@@ -11,6 +12,7 @@\n  * Journal param.\n  *\n  * @author johnniang\n+ * @author ryanwang\n  * @date 19-4-25\n  */\n @Data\n@@ -19,4 +21,6 @@ public class JournalParam implements InputConverter<Journal> {\n     @NotBlank(message = \"内容不能为空\")\n     @Size(max = 511, message = \"内容的字符长度不能超过 {max}\")\n     private String content;\n+\n+    private JournalType type = JournalType.PUBLIC;\n }\n\ndiff --git a/src/main/java/run/halo/app/model/params/JournalQuery.java b/src/main/java/run/halo/app/model/params/JournalQuery.java\n--- a/src/main/java/run/halo/app/model/params/JournalQuery.java\n+++ b/src/main/java/run/halo/app/model/params/JournalQuery.java\n@@ -1,6 +1,7 @@\n package run.halo.app.model.params;\n \n import lombok.Data;\n+import run.halo.app.model.enums.JournalType;\n \n /**\n  * Journal query params.\n@@ -15,4 +16,6 @@ public class JournalQuery {\n      * Keyword.\n      */\n     private String keyword;\n+\n+    private JournalType type;\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/JournalServiceImpl.java b/src/main/java/run/halo/app/service/impl/JournalServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/JournalServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/JournalServiceImpl.java\n@@ -118,6 +118,10 @@ private Specification<Journal> buildSpecByQuery(@NonNull JournalQuery journalQue\n         return (Specification<Journal>) (root, query, criteriaBuilder) -> {\n             List<Predicate> predicates = new LinkedList<>();\n \n+            if (journalQuery.getType() != null) {\n+                predicates.add(criteriaBuilder.equal(root.get(\"type\"), journalQuery.getType()));\n+            }\n+\n             if (journalQuery.getKeyword() != null) {\n                 // Format like condition\n                 String likeCondition = String.format(\"%%%s%%\", StringUtils.strip(journalQuery.getKeyword()));",
    "output": "Support journal type."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/properties/CommentProperties.java b/src/main/java/run/halo/app/model/properties/CommentProperties.java\n--- a/src/main/java/run/halo/app/model/properties/CommentProperties.java\n+++ b/src/main/java/run/halo/app/model/properties/CommentProperties.java\n@@ -23,7 +23,9 @@ public enum CommentProperties implements PropertyEnum {\n \n     PAGE_SIZE(\"comment_page_size\", Integer.class, \"10\"),\n \n-    CONTENT_PLACEHOLDER(\"comment_content_placeholder\", String.class, \"\");\n+    CONTENT_PLACEHOLDER(\"comment_content_placeholder\", String.class, \"\"),\n+\n+    INTERNAL_PLUGIN_JS(\"comment_internal_plugin_js\", String.class, \"//cdn.jsdelivr.net/gh/halo-dev/halo-comment@latest/dist/halo-comment.min.js\");\n \n     private final String value;\n ",
    "output": "Support comment js address options."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/enums/InputType.java b/src/main/java/run/halo/app/model/enums/InputType.java\n--- a/src/main/java/run/halo/app/model/enums/InputType.java\n+++ b/src/main/java/run/halo/app/model/enums/InputType.java\n@@ -6,6 +6,7 @@\n  * Input type enum.\n  *\n  * @author johnniang\n+ * @author ryanwang\n  * @date 4/10/19\n  */\n public enum InputType {\n@@ -18,7 +19,9 @@ public enum InputType {\n \n     SELECT,\n \n-    TEXTAREA;\n+    TEXTAREA,\n+\n+    COLOR;\n \n     /**\n      * Convert type to input type.",
    "output": "Support color type for theme setting."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/HaloConfiguration.java b/src/main/java/run/halo/app/config/HaloConfiguration.java\n--- a/src/main/java/run/halo/app/config/HaloConfiguration.java\n+++ b/src/main/java/run/halo/app/config/HaloConfiguration.java\n@@ -149,7 +149,8 @@ public FilterRegistrationBean<AdminAuthenticationFilter> adminAuthenticationFilt\n                 \"/api/admin/login\",\n                 \"/api/admin/refresh/*\",\n                 \"/api/admin/installations\",\n-                \"/api/admin/recoveries/migrations/*\"\n+                \"/api/admin/recoveries/migrations/*\",\n+                \"/api/admin/is_installed\"\n         );\n         adminAuthenticationFilter.setFailureHandler(\n                 failureHandler);\n\ndiff --git a/src/main/java/run/halo/app/controller/admin/api/AdminController.java b/src/main/java/run/halo/app/controller/admin/api/AdminController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/AdminController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/AdminController.java\n@@ -8,9 +8,11 @@\n import run.halo.app.model.dto.EnvironmentDTO;\n import run.halo.app.model.dto.StatisticDTO;\n import run.halo.app.model.params.LoginParam;\n+import run.halo.app.model.properties.PrimaryProperties;\n import run.halo.app.model.support.BaseResponse;\n import run.halo.app.security.token.AuthToken;\n import run.halo.app.service.AdminService;\n+import run.halo.app.service.OptionService;\n \n import javax.validation.Valid;\n \n@@ -28,25 +30,17 @@ public class AdminController {\n \n     private final AdminService adminService;\n \n-    public AdminController(AdminService adminService) {\n-        this.adminService = adminService;\n-    }\n+    private final OptionService optionService;\n \n-    /**\n-     * Get some statistics about the count of posts, the count of comments, etc.\n-     *\n-     * @return counts\n-     */\n-    @GetMapping(\"counts\")\n-    @ApiOperation(\"Gets count info\")\n-    public StatisticDTO getCount() {\n-        return adminService.getCount();\n+    public AdminController(AdminService adminService, OptionService optionService) {\n+        this.adminService = adminService;\n+        this.optionService = optionService;\n     }\n \n-    @GetMapping(\"environments\")\n-    @ApiOperation(\"Gets environments info\")\n-    public EnvironmentDTO getEnvironments() {\n-        return adminService.getEnvironments();\n+    @GetMapping(value = \"/is_installed\")\n+    @ApiOperation(\"Check install status\")\n+    public boolean isInstall() {\n+        return optionService.getByPropertyOrDefault(PrimaryProperties.IS_INSTALLED, Boolean.class, false);\n     }\n \n     @PostMapping(\"login\")\n@@ -70,6 +64,23 @@ public AuthToken refresh(@PathVariable(\"refreshToken\") String refreshToken) {\n         return adminService.refreshToken(refreshToken);\n     }\n \n+    /**\n+     * Get some statistics about the count of posts, the count of comments, etc.\n+     *\n+     * @return counts\n+     */\n+    @GetMapping(\"counts\")\n+    @ApiOperation(\"Gets count info\")\n+    public StatisticDTO getCount() {\n+        return adminService.getCount();\n+    }\n+\n+    @GetMapping(\"environments\")\n+    @ApiOperation(\"Gets environments info\")\n+    public EnvironmentDTO getEnvironments() {\n+        return adminService.getEnvironments();\n+    }\n+\n     @PutMapping(\"halo-admin\")\n     @ApiOperation(\"Updates halo-admin manually\")\n     public void updateAdmin() {\n@@ -79,6 +90,6 @@ public void updateAdmin() {\n     @GetMapping(\"spring/logs\")\n     @ApiOperation(\"Get application logs\")\n     public BaseResponse<String> getSpringLogs() {\n-        return BaseResponse.ok(HttpStatus.OK.getReasonPhrase(),adminService.getSpringLogs());\n+        return BaseResponse.ok(HttpStatus.OK.getReasonPhrase(), adminService.getSpringLogs());\n     }\n }",
    "output": "Create /api/admin/is_installed api."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/ThemeController.java b/src/main/java/run/halo/app/controller/admin/api/ThemeController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/ThemeController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/ThemeController.java\n@@ -117,13 +117,6 @@ public void saveSettingsBy(@PathVariable(\"themeId\") String themeId,\n         themeSettingService.save(settings, themeId);\n     }\n \n-    @PutMapping(\"{themeId}\")\n-    public ThemeProperty updateTheme(@PathVariable(\"themeId\") String themeId,\n-                                     @RequestPart(name = \"file\", required = false) MultipartFile file) {\n-\n-        return themeService.update(themeId);\n-    }\n-\n     @DeleteMapping(\"{themeId}\")\n     @ApiOperation(\"Deletes a theme\")\n     public void deleteBy(@PathVariable(\"themeId\") String themeId) {\n@@ -136,12 +129,25 @@ public ThemeProperty uploadTheme(@RequestPart(\"file\") MultipartFile file) {\n         return themeService.upload(file);\n     }\n \n+    @PutMapping(\"upload/{themeId}\")\n+    public ThemeProperty updateThemeByUpload(@PathVariable(\"themeId\") String themeId,\n+                                             @RequestPart(\"file\") MultipartFile file) {\n+        return themeService.update(themeId, file);\n+    }\n+\n     @PostMapping(\"fetching\")\n     @ApiOperation(\"Fetches a new theme\")\n     public ThemeProperty fetchTheme(@RequestParam(\"uri\") String uri) {\n         return themeService.fetch(uri);\n     }\n \n+    @PutMapping(\"fetching/{themeId}\")\n+    public ThemeProperty updateThemeByFetching(@PathVariable(\"themeId\") String themeId,\n+                                               @RequestPart(name = \"file\", required = false) MultipartFile file) {\n+\n+        return themeService.update(themeId);\n+    }\n+\n     @PostMapping(\"reload\")\n     @ApiOperation(\"Reloads themes\")\n     public void reload() {\n\ndiff --git a/src/main/java/run/halo/app/service/ThemeService.java b/src/main/java/run/halo/app/service/ThemeService.java\n--- a/src/main/java/run/halo/app/service/ThemeService.java\n+++ b/src/main/java/run/halo/app/service/ThemeService.java\n@@ -24,6 +24,7 @@ public interface ThemeService {\n     /**\n      * Theme property file name.\n      */\n+    @Deprecated\n     String THEME_PROPERTY_FILE_NAME = \"theme.yaml\";\n \n     /**\n@@ -236,6 +237,7 @@ public interface ThemeService {\n      *\n      * @param themeTmpPath theme temporary path must not be null\n      * @return theme property\n+     * @throws IOException IOException\n      */\n     @NonNull\n     ThemeProperty add(@NonNull Path themeTmpPath) throws IOException;\n@@ -262,4 +264,13 @@ public interface ThemeService {\n      */\n     @NonNull\n     ThemeProperty update(@NonNull String themeId);\n+\n+    /**\n+     * Updates theme by theme id.\n+     *\n+     * @param themeId theme id must not be blank\n+     * @param file    multipart file must not be null\n+     * @return theme info\n+     */\n+    ThemeProperty update(@NonNull String themeId, @NonNull MultipartFile file);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n@@ -105,7 +105,7 @@ public ThemeServiceImpl(HaloProperties haloProperties,\n \n     @Override\n     public ThemeProperty getThemeOfNonNullBy(String themeId) {\n-        return getThemeBy(themeId).orElseThrow(() -> new NotFoundException(\"Theme with id: \" + themeId + \" was not found\").setErrorData(themeId));\n+        return getThemeBy(themeId).orElseThrow(() -> new NotFoundException(\"没有找到 id 为 \" + themeId + \" 的主题\").setErrorData(themeId));\n     }\n \n     @Override\n@@ -487,6 +487,59 @@ public ThemeProperty update(String themeId) {\n         return getThemeOfNonNullBy(themeId);\n     }\n \n+    @Override\n+    public ThemeProperty update(String themeId, MultipartFile file) {\n+        Assert.hasText(themeId, \"Theme id must not be blank\");\n+        Assert.notNull(themeId, \"Theme file must not be blank\");\n+\n+        if (!StringUtils.endsWithIgnoreCase(file.getOriginalFilename(), \".zip\")) {\n+            throw new UnsupportedMediaTypeException(\"不支持的文件类型: \" + file.getContentType()).setErrorData(file.getOriginalFilename());\n+        }\n+\n+        ThemeProperty updatingTheme = getThemeOfNonNullBy(themeId);\n+\n+        ZipInputStream zis = null;\n+        Path tempPath = null;\n+\n+        try {\n+            // Create temp directory\n+            tempPath = FileUtils.createTempDirectory();\n+\n+            String basename = FilenameUtils.getBasename(file.getOriginalFilename());\n+            Path themeTempPath = tempPath.resolve(basename);\n+\n+            // Check directory traversal\n+            FileUtils.checkDirectoryTraversal(tempPath, themeTempPath);\n+\n+            // New zip input stream\n+            zis = new ZipInputStream(file.getInputStream());\n+\n+            // Unzip to temp path\n+            FileUtils.unzip(zis, themeTempPath);\n+\n+            Path preparePath = FileUtils.tryToSkipZipParentFolder(themeTempPath);\n+\n+            ThemeProperty prepareThemeProperty = getProperty(preparePath);\n+\n+            if (!prepareThemeProperty.getId().equals(updatingTheme.getId())) {\n+                throw new ServiceException(\"上传的主题包不是该主题的更新包: \" + file.getOriginalFilename());\n+            }\n+\n+            // Coping new theme files to old theme folder.\n+            FileUtils.copyFolder(preparePath, Paths.get(updatingTheme.getThemePath()));\n+\n+            // Gets theme property again.\n+            return getProperty(Paths.get(updatingTheme.getThemePath()));\n+        } catch (IOException e) {\n+            throw new ServiceException(\"更新主题失败: \" + file.getOriginalFilename(), e);\n+        } finally {\n+            // Close zip input stream\n+            FileUtils.closeQuietly(zis);\n+            // Delete folder after testing\n+            FileUtils.deleteFolderQuietly(tempPath);\n+        }\n+    }\n+\n     private void pullFromGit(@NonNull ThemeProperty themeProperty) throws IOException, GitAPIException, URISyntaxException {\n         Assert.notNull(themeProperty, \"Theme property must not be null\");\n \n@@ -735,7 +788,7 @@ private Optional<ThemeProperty> getPropertyOfNullable(Path themePath) {\n      */\n     @NonNull\n     private ThemeProperty getProperty(@NonNull Path themePath) {\n-        return getPropertyOfNullable(themePath).orElseThrow(() -> new ThemePropertyMissingException(\"该主题没有说明文件\").setErrorData(themePath));\n+        return getPropertyOfNullable(themePath).orElseThrow(() -> new ThemePropertyMissingException(themePath + \" 没有说明文件\").setErrorData(themePath));\n     }\n \n     /**",
    "output": "Support update theme from new theme package."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/handler/file/SmmsFileHandler.java b/src/main/java/run/halo/app/handler/file/SmmsFileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/SmmsFileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/SmmsFileHandler.java\n@@ -9,11 +9,15 @@\n import org.springframework.stereotype.Component;\n import org.springframework.util.Assert;\n import org.springframework.util.LinkedMultiValueMap;\n+import org.springframework.util.StringUtils;\n import org.springframework.web.client.RestTemplate;\n import org.springframework.web.multipart.MultipartFile;\n import run.halo.app.exception.FileOperationException;\n+import run.halo.app.exception.ServiceException;\n import run.halo.app.model.enums.AttachmentType;\n+import run.halo.app.model.properties.SmmsProperties;\n import run.halo.app.model.support.UploadResult;\n+import run.halo.app.service.OptionService;\n import run.halo.app.utils.FilenameUtils;\n import run.halo.app.utils.HttpClientUtils;\n \n@@ -30,24 +34,40 @@\n @Component\n public class SmmsFileHandler implements FileHandler {\n \n+    @Deprecated\n     private final static String UPLOAD_API = \"https://sm.ms/api/upload\";\n \n+    private final static String UPLOAD_API_V2 = \"https://sm.ms/api/v2/upload\";\n+\n+    @Deprecated\n     private final static String DELETE_API = \"https://sm.ms/api/delete/%s\";\n \n+    private final static String DELETE_API_V2 = \"https://sm.ms/api/v2/delete/%s\";\n+\n     private final static String SUCCESS_CODE = \"success\";\n \n     private final static String DEFAULT_USER_AGENT = \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/73.0.3683.86 Safari/537.36\";\n \n     private final RestTemplate httpsRestTemplate;\n \n-    public SmmsFileHandler(RestTemplate httpsRestTemplate) {\n+    private final OptionService optionService;\n+\n+    public SmmsFileHandler(RestTemplate httpsRestTemplate,\n+                           OptionService optionService) {\n         this.httpsRestTemplate = httpsRestTemplate;\n+        this.optionService = optionService;\n     }\n \n     @Override\n     public UploadResult upload(MultipartFile file) {\n         Assert.notNull(file, \"Multipart file must not be null\");\n \n+        String apiSecretToken = optionService.getByPropertyOfNonNull(SmmsProperties.SMMS_API_SECRET_TOKEN).toString();\n+\n+        if (StringUtils.isEmpty(apiSecretToken)) {\n+            throw new ServiceException(\"请先设置 SM.MS 的 Secret Token\");\n+        }\n+\n         if (!FileHandler.isImageType(file.getContentType())) {\n             log.error(\"Invalid extension: [{}]\", file.getContentType());\n             throw new FileOperationException(\"不支持的文件类型，仅支持 \\\"jpeg, jpg, png, gif, bmp\\\" 格式的图片\");\n@@ -58,6 +78,7 @@ public UploadResult upload(MultipartFile file) {\n         headers.setContentType(MediaType.MULTIPART_FORM_DATA);\n         // Set user agent manually\n         headers.set(HttpHeaders.USER_AGENT, DEFAULT_USER_AGENT);\n+        headers.set(HttpHeaders.AUTHORIZATION, apiSecretToken);\n \n         LinkedMultiValueMap<String, Object> body = new LinkedMultiValueMap<>();\n \n@@ -74,7 +95,7 @@ public UploadResult upload(MultipartFile file) {\n         HttpEntity<LinkedMultiValueMap<String, Object>> httpEntity = new HttpEntity<>(body, headers);\n \n         // Upload file\n-        ResponseEntity<SmmsResponse> mapResponseEntity = httpsRestTemplate.postForEntity(UPLOAD_API, httpEntity, SmmsResponse.class);\n+        ResponseEntity<SmmsResponse> mapResponseEntity = httpsRestTemplate.postForEntity(UPLOAD_API_V2, httpEntity, SmmsResponse.class);\n \n         // Check status\n         if (mapResponseEntity.getStatusCode().isError()) {\n@@ -117,7 +138,7 @@ public void delete(String key) {\n         Assert.hasText(key, \"Deleting key must not be blank\");\n \n         // Build delete url\n-        String url = String.format(DELETE_API, key);\n+        String url = String.format(DELETE_API_V2, key);\n \n         // Set user agent manually\n         HttpHeaders headers = new HttpHeaders();\n\ndiff --git a/src/main/java/run/halo/app/model/properties/SmmsProperties.java b/src/main/java/run/halo/app/model/properties/SmmsProperties.java\n--- a/src/main/java/run/halo/app/model/properties/SmmsProperties.java\n+++ b/src/main/java/run/halo/app/model/properties/SmmsProperties.java\n@@ -0,0 +1,47 @@\n+package run.halo.app.model.properties;\n+\n+/**\n+ * Base meta entity.\n+ *\n+ * @author ryanwang\n+ * @author ikaisec\n+ * @date 2019-08-04\n+ */\n+public enum SmmsProperties implements PropertyEnum {\n+\n+    /**\n+     * SM.MS personal api secret token\n+     */\n+    SMMS_API_SECRET_TOKEN(\"smms_api_secret_token\", String.class, \"\");\n+\n+    private final String value;\n+\n+    private final Class<?> type;\n+\n+    private final String defaultValue;\n+\n+    SmmsProperties(String value, Class<?> type, String defaultValue) {\n+        this.defaultValue = defaultValue;\n+        if (!PropertyEnum.isSupportedType(type)) {\n+            throw new IllegalArgumentException(\"Unsupported blog property type: \" + type);\n+        }\n+\n+        this.value = value;\n+        this.type = type;\n+    }\n+\n+    @Override\n+    public Class<?> getType() {\n+        return type;\n+    }\n+\n+    @Override\n+    public String defaultValue() {\n+        return defaultValue;\n+    }\n+\n+    @Override\n+    public String getValue() {\n+        return value;\n+    }\n+}",
    "output": "Support sm.ms api v2 #271"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/entity/SheetMeta.java b/src/main/java/run/halo/app/model/entity/SheetMeta.java\n--- a/src/main/java/run/halo/app/model/entity/SheetMeta.java\n+++ b/src/main/java/run/halo/app/model/entity/SheetMeta.java\n@@ -11,6 +11,6 @@\n  * @date 2019-08-04\n  */\n @Entity(name = \"SheetMeta\")\n-@DiscriminatorValue(\"0\")\n+@DiscriminatorValue(\"1\")\n public class SheetMeta extends BaseMeta {\n }",
    "output": "Fixed SheetMeta."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/entity/BaseMeta.java b/src/main/java/run/halo/app/model/entity/BaseMeta.java\n--- a/src/main/java/run/halo/app/model/entity/BaseMeta.java\n+++ b/src/main/java/run/halo/app/model/entity/BaseMeta.java\n@@ -0,0 +1,46 @@\n+package run.halo.app.model.entity;\n+\n+\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+\n+import javax.persistence.*;\n+\n+/**\n+ * Base meta entity.\n+ *\n+ * @author ryanwang\n+ * @author ikaisec\n+ * @date 2019-08-04\n+ */\n+@Data\n+@Entity(name = \"BaseMeta\")\n+@Table(name = \"metas\")\n+@DiscriminatorColumn(name = \"type\", discriminatorType = DiscriminatorType.INTEGER, columnDefinition = \"int default 0\")\n+@ToString(callSuper = true)\n+@EqualsAndHashCode(callSuper = true)\n+public class BaseMeta extends BaseEntity {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    /**\n+     * Post id.\n+     */\n+    @Column(name = \"post_id\", columnDefinition = \"int not null\")\n+    private Integer postId;\n+\n+    /**\n+     * meta key\n+     */\n+    @Column(name = \"meta_key\", columnDefinition = \"varchar(100) not null\")\n+    private String key;\n+\n+    /**\n+     * meta value\n+     */\n+    @Column(name = \"meta_value\", columnDefinition = \"varchar(1023) not null\")\n+    private String value;\n+}\n\ndiff --git a/src/main/java/run/halo/app/model/entity/PostMeta.java b/src/main/java/run/halo/app/model/entity/PostMeta.java\n--- a/src/main/java/run/halo/app/model/entity/PostMeta.java\n+++ b/src/main/java/run/halo/app/model/entity/PostMeta.java\n@@ -0,0 +1,16 @@\n+package run.halo.app.model.entity;\n+\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+\n+/**\n+ * PostMeta entity.\n+ *\n+ * @author ryanwang\n+ * @author ikaisec\n+ * @date 2019-08-04\n+ */\n+@Entity(name = \"PostMeta\")\n+@DiscriminatorValue(\"0\")\n+public class PostMeta extends BaseMeta {\n+}\n\ndiff --git a/src/main/java/run/halo/app/model/entity/SheetMeta.java b/src/main/java/run/halo/app/model/entity/SheetMeta.java\n--- a/src/main/java/run/halo/app/model/entity/SheetMeta.java\n+++ b/src/main/java/run/halo/app/model/entity/SheetMeta.java\n@@ -0,0 +1,16 @@\n+package run.halo.app.model.entity;\n+\n+import javax.persistence.DiscriminatorValue;\n+import javax.persistence.Entity;\n+\n+/**\n+ * SheetMeta entity.\n+ *\n+ * @author ryanwang\n+ * @author ikaisec\n+ * @date 2019-08-04\n+ */\n+@Entity(name = \"SheetMeta\")\n+@DiscriminatorValue(\"0\")\n+public class SheetMeta extends BaseMeta {\n+}",
    "output": "Create meta entity."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/ContentArchiveController.java b/src/main/java/run/halo/app/controller/content/ContentArchiveController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentArchiveController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentArchiveController.java\n@@ -115,7 +115,7 @@ public String post(@PathVariable(\"url\") String url,\n         postService.getPrePost(post.getCreateTime()).ifPresent(prePost -> model.addAttribute(\"prePost\", prePost));\n \n \n-        List<Category> categories = postCategoryService.listCategoryBy(post.getId());\n+        List<Category> categories = postCategoryService.listCategoriesBy(post.getId());\n         List<Tag> tags = postTagService.listTagsBy(post.getId());\n \n         Page<BaseCommentVO> comments = postCommentService.pageVosBy(post.getId(), PageRequest.of(cp, optionService.getCommentPageSize(), sort));\n\ndiff --git a/src/main/java/run/halo/app/controller/content/api/PostController.java b/src/main/java/run/halo/app/controller/content/api/PostController.java\n--- a/src/main/java/run/halo/app/controller/content/api/PostController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/PostController.java\n@@ -20,6 +20,7 @@\n import run.halo.app.model.vo.BaseCommentVO;\n import run.halo.app.model.vo.BaseCommentWithParentVO;\n import run.halo.app.model.vo.CommentWithHasChildrenVO;\n+import run.halo.app.model.vo.PostDetailVO;\n import run.halo.app.service.OptionService;\n import run.halo.app.service.PostCommentService;\n import run.halo.app.service.PostService;\n@@ -69,22 +70,22 @@ public Page<BasePostSimpleDTO> pageBy(@RequestParam(value = \"keyword\") String ke\n \n     @GetMapping(\"{postId:\\\\d+}\")\n     @ApiOperation(\"Gets a post\")\n-    public BasePostDetailDTO getBy(@PathVariable(\"postId\") Integer postId,\n+    public PostDetailVO getBy(@PathVariable(\"postId\") Integer postId,\n                                    @RequestParam(value = \"formatDisabled\", required = false, defaultValue = \"true\") Boolean formatDisabled,\n                                    @RequestParam(value = \"sourceDisabled\", required = false, defaultValue = \"false\") Boolean sourceDisabled) {\n-        BasePostDetailDTO detailDTO = postService.convertToDetail(postService.getById(postId));\n+        PostDetailVO postDetailVO = postService.convertToDetailVo(postService.getById(postId));\n \n         if (formatDisabled) {\n             // Clear the format content\n-            detailDTO.setFormatContent(null);\n+            postDetailVO.setFormatContent(null);\n         }\n \n         if (sourceDisabled) {\n             // Clear the original content\n-            detailDTO.setOriginalContent(null);\n+            postDetailVO.setOriginalContent(null);\n         }\n \n-        return detailDTO;\n+        return postDetailVO;\n     }\n \n     @GetMapping(\"{postId:\\\\d+}/comments/top_view\")\n\ndiff --git a/src/main/java/run/halo/app/model/freemarker/tag/CategoryTagDirective.java b/src/main/java/run/halo/app/model/freemarker/tag/CategoryTagDirective.java\n--- a/src/main/java/run/halo/app/model/freemarker/tag/CategoryTagDirective.java\n+++ b/src/main/java/run/halo/app/model/freemarker/tag/CategoryTagDirective.java\n@@ -44,7 +44,7 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars, Templ\n                     break;\n                 case \"listByPostId\":\n                     Integer postId = Integer.parseInt(params.get(\"postId\").toString());\n-                    env.setVariable(\"categories\", builder.build().wrap(postCategoryService.listCategoryBy(postId)));\n+                    env.setVariable(\"categories\", builder.build().wrap(postCategoryService.listCategoriesBy(postId)));\n                     break;\n                 case \"count\":\n                     env.setVariable(\"count\", builder.build().wrap(categoryService.count()));\n\ndiff --git a/src/main/java/run/halo/app/model/vo/PostDetailVO.java b/src/main/java/run/halo/app/model/vo/PostDetailVO.java\n--- a/src/main/java/run/halo/app/model/vo/PostDetailVO.java\n+++ b/src/main/java/run/halo/app/model/vo/PostDetailVO.java\n@@ -2,8 +2,14 @@\n \n import lombok.Data;\n import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+import run.halo.app.model.dto.CategoryDTO;\n+import run.halo.app.model.dto.TagDTO;\n import run.halo.app.model.dto.post.BasePostDetailDTO;\n+import run.halo.app.model.entity.Category;\n+import run.halo.app.model.entity.Tag;\n \n+import java.util.List;\n import java.util.Set;\n \n /**\n@@ -12,11 +18,17 @@\n  * @author johnniang\n  * @date 3/21/19\n  */\n-@EqualsAndHashCode(callSuper = true)\n @Data\n+@ToString(callSuper = true)\n+@EqualsAndHashCode(callSuper = true)\n public class PostDetailVO extends BasePostDetailDTO {\n \n     private Set<Integer> tagIds;\n \n+    private List<TagDTO> tags;\n+\n     private Set<Integer> categoryIds;\n+\n+    private List<CategoryDTO> categories;\n }\n+\n\ndiff --git a/src/main/java/run/halo/app/service/PostCategoryService.java b/src/main/java/run/halo/app/service/PostCategoryService.java\n--- a/src/main/java/run/halo/app/service/PostCategoryService.java\n+++ b/src/main/java/run/halo/app/service/PostCategoryService.java\n@@ -34,7 +34,7 @@ public interface PostCategoryService extends CrudService<PostCategory, Integer>\n      * @return a list of category\n      */\n     @NonNull\n-    List<Category> listCategoryBy(@NonNull Integer postId);\n+    List<Category> listCategoriesBy(@NonNull Integer postId);\n \n     /**\n      * List category list map by post id collection.\n\ndiff --git a/src/main/java/run/halo/app/service/impl/PostCategoryServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostCategoryServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostCategoryServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostCategoryServiceImpl.java\n@@ -48,7 +48,7 @@ public PostCategoryServiceImpl(PostCategoryRepository postCategoryRepository,\n     }\n \n     @Override\n-    public List<Category> listCategoryBy(Integer postId) {\n+    public List<Category> listCategoriesBy(Integer postId) {\n         Assert.notNull(postId, \"Post id must not be null\");\n \n         // Find all category ids\n\ndiff --git a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n@@ -194,9 +194,7 @@ private PostDetailVO createOrUpdate(@NonNull Post post, Set<Integer> tagIds, Set\n         log.debug(\"Created post categories: [{}]\", postCategories);\n \n         // Convert to post detail vo\n-        return convertTo(post,\n-                () -> ServiceUtils.fetchProperty(postTags, PostTag::getTagId),\n-                () -> ServiceUtils.fetchProperty(postCategories, PostCategory::getCategoryId));\n+        return convertTo(post, tags, categories);\n     }\n \n     @Override\n@@ -397,7 +395,7 @@ public String exportMarkdown(Post post) {\n             }\n         }\n \n-        List<Category> categories = postCategoryService.listCategoryBy(post.getId());\n+        List<Category> categories = postCategoryService.listCategoriesBy(post.getId());\n \n         if (categories.size() > 0) {\n             content.append(\"categories:\").append(\"\\n\");\n@@ -413,9 +411,13 @@ public String exportMarkdown(Post post) {\n \n     @Override\n     public PostDetailVO convertToDetailVo(Post post) {\n-        return convertTo(post,\n-                () -> postTagService.listTagIdsByPostId(post.getId()),\n-                () -> postCategoryService.listCategoryIdsByPostId(post.getId()));\n+        // List tags\n+        List<Tag> tags = postTagService.listTagsBy(post.getId());\n+        // List categories\n+        List<Category> categories = postCategoryService.listCategoriesBy(post.getId());\n+\n+        // Convert to detail vo\n+        return convertTo(post, tags, categories);\n     }\n \n     @Override\n@@ -494,22 +496,29 @@ public Page<PostListVO> convertToListVo(Page<Post> postPage) {\n     /**\n      * Converts to post detail vo.\n      *\n-     * @param post                  post must not be null\n-     * @param tagIdSetSupplier      tag id set supplier\n-     * @param categoryIdSetSupplier category id set supplier\n+     * @param post       post must not be null\n+     * @param tags       tags\n+     * @param categories categories\n      * @return post detail vo\n      */\n     @NonNull\n-    private PostDetailVO convertTo(@NonNull Post post, @Nullable Supplier<Set<Integer>> tagIdSetSupplier, @Nullable Supplier<Set<Integer>> categoryIdSetSupplier) {\n+    private PostDetailVO convertTo(@NonNull Post post, @Nullable List<Tag> tags, @Nullable List<Category> categories) {\n         Assert.notNull(post, \"Post must not be null\");\n \n+        // Convert to base detail vo\n         PostDetailVO postDetailVO = new PostDetailVO().convertFrom(post);\n \n+        // Extract ids\n+        Set<Integer> tagIds = ServiceUtils.fetchProperty(tags, Tag::getId);\n+        Set<Integer> categoryIds = ServiceUtils.fetchProperty(categories, Category::getId);\n+\n         // Get post tag ids\n-        postDetailVO.setTagIds(tagIdSetSupplier == null ? Collections.emptySet() : tagIdSetSupplier.get());\n+        postDetailVO.setTagIds(tagIds);\n+        postDetailVO.setTags(tagService.convertTo(tags));\n \n         // Get post category ids\n-        postDetailVO.setCategoryIds(categoryIdSetSupplier == null ? Collections.emptySet() : categoryIdSetSupplier.get());\n+        postDetailVO.setCategoryIds(categoryIds);\n+        postDetailVO.setCategories(categoryService.convertTo(categories));\n \n         return postDetailVO;\n     }",
    "output": "Add tags and categories for returning as content post api requests"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/ContentFeedController.java b/src/main/java/run/halo/app/controller/content/ContentFeedController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentFeedController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentFeedController.java\n@@ -2,6 +2,7 @@\n \n import freemarker.template.Template;\n import freemarker.template.TemplateException;\n+import lombok.extern.slf4j.Slf4j;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.PageRequest;\n import org.springframework.data.domain.Pageable;\n@@ -22,6 +23,9 @@\n import run.halo.app.service.PostService;\n \n import java.io.IOException;\n+import java.io.UnsupportedEncodingException;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n import java.util.List;\n \n import static org.springframework.data.domain.Sort.Direction.DESC;\n@@ -30,6 +34,7 @@\n  * @author ryanwang\n  * @date : 2019-03-21\n  */\n+@Slf4j\n @Controller\n public class ContentFeedController {\n \n@@ -144,6 +149,14 @@ private Pageable buildPostPageable(int size) {\n     private List<PostListVO> buildPosts(@NonNull Pageable pageable) {\n         Page<Post> postPage = postService.pageBy(PostStatus.PUBLISHED, pageable);\n         Page<PostListVO> posts = postService.convertToListVo(postPage);\n+        posts.getContent().forEach(postListVO -> {\n+            try {\n+                // Encode post url\n+                postListVO.setUrl(URLEncoder.encode(postListVO.getUrl(), StandardCharsets.UTF_8.name()));\n+            } catch (UnsupportedEncodingException e) {\n+                log.warn(\"Failed to encode url: \" + postListVO.getUrl(), e);\n+            }\n+        });\n         return posts.getContent();\n     }\n }",
    "output": "Fix #264 fatal render for rss"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/dto/post/BasePostMinimalDTO.java b/src/main/java/run/halo/app/model/dto/post/BasePostMinimalDTO.java\n--- a/src/main/java/run/halo/app/model/dto/post/BasePostMinimalDTO.java\n+++ b/src/main/java/run/halo/app/model/dto/post/BasePostMinimalDTO.java\n@@ -28,8 +28,6 @@ public class BasePostMinimalDTO implements OutputConverter<BasePostMinimalDTO, B\n \n     private String url;\n \n-    private PostType type;\n-\n     private Date updateTime;\n \n     private Date createTime;\n\ndiff --git a/src/main/java/run/halo/app/model/dto/post/BasePostSimpleDTO.java b/src/main/java/run/halo/app/model/dto/post/BasePostSimpleDTO.java\n--- a/src/main/java/run/halo/app/model/dto/post/BasePostSimpleDTO.java\n+++ b/src/main/java/run/halo/app/model/dto/post/BasePostSimpleDTO.java\n@@ -16,8 +16,6 @@\n @EqualsAndHashCode(callSuper = true)\n public class BasePostSimpleDTO extends BasePostMinimalDTO {\n \n-    private PostType type;\n-\n     private String summary;\n \n     private String thumbnail;\n\ndiff --git a/src/main/java/run/halo/app/model/enums/PostType.java b/src/main/java/run/halo/app/model/enums/PostType.java\n--- a/src/main/java/run/halo/app/model/enums/PostType.java\n+++ b/src/main/java/run/halo/app/model/enums/PostType.java\n@@ -5,6 +5,7 @@\n  *\n  * @author johnniang\n  */\n+@Deprecated\n public enum PostType implements ValueEnum<Integer> {\n \n     /**\n\ndiff --git a/src/main/java/run/halo/app/model/enums/converter/PostTypeConverter.java b/src/main/java/run/halo/app/model/enums/converter/PostTypeConverter.java\n--- a/src/main/java/run/halo/app/model/enums/converter/PostTypeConverter.java\n+++ b/src/main/java/run/halo/app/model/enums/converter/PostTypeConverter.java\n@@ -11,6 +11,7 @@\n  * @date 3/27/19\n  */\n @Converter(autoApply = true)\n+@Deprecated\n public class PostTypeConverter extends AbstractConverter<PostType, Integer> {\n \n     public PostTypeConverter() {",
    "output": "Remove type property of post"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/handler/file/BaiDuYunFileHandler.java b/src/main/java/run/halo/app/handler/file/BaiDuYunFileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/BaiDuYunFileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/BaiDuYunFileHandler.java\n@@ -52,7 +52,7 @@ public UploadResult upload(MultipartFile file) {\n \n \n         BosClientConfiguration config = new BosClientConfiguration();\n-        config.setCredentials(new DefaultBceCredentials(ossAccessKey,ossAccessSecret));\n+        config.setCredentials(new DefaultBceCredentials(ossAccessKey, ossAccessSecret));\n         config.setEndpoint(ossEndPoint);\n \n         // Init OSS client\n@@ -90,17 +90,10 @@ public UploadResult upload(MultipartFile file) {\n \n             return uploadResult;\n         } catch (Exception e) {\n-            e.printStackTrace();\n+            throw new FileOperationException(\"附件 \" + file.getOriginalFilename() + \" 上传失败(百度云)\", e);\n         } finally {\n             client.shutdown();\n         }\n-\n-        // Build result\n-        UploadResult result = new UploadResult();\n-\n-        log.info(\"File: [{}] uploaded successfully\", file.getOriginalFilename());\n-\n-        return result;\n     }\n \n     @Override\n@@ -115,14 +108,14 @@ public void delete(String key) {\n         String ossSource = StringUtils.join(\"https://\", ossBucketName, \".\" + ossEndPoint);\n \n         BosClientConfiguration config = new BosClientConfiguration();\n-        config.setCredentials(new DefaultBceCredentials(ossAccessKey,ossAccessSecret));\n+        config.setCredentials(new DefaultBceCredentials(ossAccessKey, ossAccessSecret));\n         config.setEndpoint(ossEndPoint);\n \n         // Init OSS client\n         BosClient client = new BosClient(config);\n \n         try {\n-            client.deleteObject(ossBucketName,key);\n+            client.deleteObject(ossBucketName, key);\n         } catch (Exception e) {\n             throw new FileOperationException(\"附件 \" + key + \" 从百度云删除失败\", e);\n         } finally {",
    "output": "Enhance BaiDuYunFileHandler"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/listener/StartedListener.java b/src/main/java/run/halo/app/listener/StartedListener.java\n--- a/src/main/java/run/halo/app/listener/StartedListener.java\n+++ b/src/main/java/run/halo/app/listener/StartedListener.java\n@@ -66,10 +66,10 @@ private void initThemes() {\n         // Whether the blog has initialized\n         Boolean isInstalled = optionService.getByPropertyOrDefault(PrimaryProperties.IS_INSTALLED, Boolean.class, false);\n \n-        if (haloProperties.isProductionEnv() && isInstalled) {\n+        /*if (haloProperties.isProductionEnv() && isInstalled) {\n             // Skip\n             return;\n-        }\n+        }*/\n \n         try {\n             String themeClassPath = ResourceUtils.CLASSPATH_URL_PREFIX + ThemeService.THEME_FOLDER;\n@@ -91,7 +91,8 @@ private void initThemes() {\n             // Create theme folder\n             Path themePath = themeService.getBasePath();\n \n-            if (!haloProperties.isProductionEnv() || Files.notExists(themePath)) {\n+            // Fix the problem that the project cannot start after moving to a new server\n+            if (!haloProperties.isProductionEnv() || Files.notExists(themePath) || !isInstalled) {\n                 FileUtils.copyFolder(source, themePath);\n                 log.info(\"Copied theme folder from [{}] to [{}]\", source, themePath);\n             } else {",
    "output": "Merge pull request #248 from jinqilin721/dev\n\nFix the problem that the project cannot start after moving to a new server"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/listener/StartedListener.java b/src/main/java/run/halo/app/listener/StartedListener.java\n--- a/src/main/java/run/halo/app/listener/StartedListener.java\n+++ b/src/main/java/run/halo/app/listener/StartedListener.java\n@@ -66,10 +66,10 @@ private void initThemes() {\n         // Whether the blog has initialized\n         Boolean isInstalled = optionService.getByPropertyOrDefault(PrimaryProperties.IS_INSTALLED, Boolean.class, false);\n \n-        if (haloProperties.isProductionEnv() && isInstalled) {\n+        /*if (haloProperties.isProductionEnv() && isInstalled) {\n             // Skip\n             return;\n-        }\n+        }*/\n \n         try {\n             String themeClassPath = ResourceUtils.CLASSPATH_URL_PREFIX + ThemeService.THEME_FOLDER;\n@@ -91,7 +91,8 @@ private void initThemes() {\n             // Create theme folder\n             Path themePath = themeService.getBasePath();\n \n-            if (!haloProperties.isProductionEnv() || Files.notExists(themePath)) {\n+            // Fix the problem that the project cannot start after moving to a new server\n+            if (!haloProperties.isProductionEnv() || Files.notExists(themePath) || !isInstalled) {\n                 FileUtils.copyFolder(source, themePath);\n                 log.info(\"Copied theme folder from [{}] to [{}]\", source, themePath);\n             } else {",
    "output": "Fix the problem that the project cannot start after moving to a new server"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/SheetController.java b/src/main/java/run/halo/app/controller/admin/api/SheetController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/SheetController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/SheetController.java\n@@ -44,7 +44,7 @@ public BasePostDetailDTO getBy(@PathVariable(\"sheetId\") Integer sheetId) {\n \n     @GetMapping\n     @ApiOperation(\"Gets a page of sheet\")\n-    public Page<SheetListVO> pageBy(@PageableDefault(sort = \"editTime\", direction = DESC) Pageable pageable) {\n+    public Page<SheetListVO> pageBy(@PageableDefault(sort = \"createTime\", direction = DESC) Pageable pageable) {\n         Page<Sheet> sheetPage = sheetService.pageBy(pageable);\n         return sheetService.convertToListVo(sheetPage);\n     }",
    "output": "Page sheet by createTime default."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/freemarker/tag/CommentTagDirective.java b/src/main/java/run/halo/app/model/freemarker/tag/CommentTagDirective.java\n--- a/src/main/java/run/halo/app/model/freemarker/tag/CommentTagDirective.java\n+++ b/src/main/java/run/halo/app/model/freemarker/tag/CommentTagDirective.java\n@@ -2,7 +2,10 @@\n \n import freemarker.core.Environment;\n import freemarker.template.*;\n+import org.springframework.data.domain.Page;\n import org.springframework.stereotype.Component;\n+import run.halo.app.model.entity.PostComment;\n+import run.halo.app.model.enums.CommentStatus;\n import run.halo.app.model.support.HaloConst;\n import run.halo.app.service.PostCommentService;\n \n@@ -34,7 +37,8 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars, Templ\n             switch (method) {\n                 case \"latest\":\n                     int top = Integer.parseInt(params.get(\"top\").toString());\n-                    env.setVariable(\"comments\", builder.build().wrap(postCommentService.pageLatest(top)));\n+                    Page<PostComment> postComments = postCommentService.pageLatest(top, CommentStatus.PUBLISHED);\n+                    env.setVariable(\"comments\", builder.build().wrap(postCommentService.convertToWithPostVo(postComments)));\n                     break;\n                 case \"count\":\n                     env.setVariable(\"count\", builder.build().wrap(postCommentService.count()));",
    "output": "Complete CommentTagDirective."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/handler/file/UpYunFileHandler.java b/src/main/java/run/halo/app/handler/file/UpYunFileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/UpYunFileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/UpYunFileHandler.java\n@@ -100,7 +100,7 @@ public void delete(String key) {\n         Assert.notNull(key, \"File key must not be blank\");\n \n         // Get config\n-        String ossSource = optionService.getByPropertyOfNonNull(UpYunProperties.OSS_SOURCE).toString();\n+        // String ossSource = optionService.getByPropertyOfNonNull(UpYunProperties.OSS_SOURCE).toString();\n         String ossPassword = optionService.getByPropertyOfNonNull(UpYunProperties.OSS_PASSWORD).toString();\n         String ossBucket = optionService.getByPropertyOfNonNull(UpYunProperties.OSS_BUCKET).toString();\n         String ossOperator = optionService.getByPropertyOfNonNull(UpYunProperties.OSS_OPERATOR).toString();\n@@ -111,11 +111,10 @@ public void delete(String key) {\n         upYun.setApiDomain(UpYun.ED_AUTO);\n \n         try {\n-            String filePath = ossSource + key;\n             // Delete the file\n-            boolean deleteResult = upYun.deleteFile(filePath);\n+            boolean deleteResult = upYun.deleteFile(key);\n             if (!deleteResult) {\n-                log.warn(\"Failed to delete file \" + filePath + \" from UpYun\");\n+                log.warn(\"Failed to delete file \" + key + \" from UpYun\");\n             }\n         } catch (Exception e) {\n             throw new FileOperationException(\"附件从又拍云删除失败\", e);",
    "output": "Fix UpYun oss (#241)\n\nFix UpYun oss"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/handler/file/UpYunFileHandler.java b/src/main/java/run/halo/app/handler/file/UpYunFileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/UpYunFileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/UpYunFileHandler.java\n@@ -100,7 +100,7 @@ public void delete(String key) {\n         Assert.notNull(key, \"File key must not be blank\");\n \n         // Get config\n-        String ossSource = optionService.getByPropertyOfNonNull(UpYunProperties.OSS_SOURCE).toString();\n+        // String ossSource = optionService.getByPropertyOfNonNull(UpYunProperties.OSS_SOURCE).toString();\n         String ossPassword = optionService.getByPropertyOfNonNull(UpYunProperties.OSS_PASSWORD).toString();\n         String ossBucket = optionService.getByPropertyOfNonNull(UpYunProperties.OSS_BUCKET).toString();\n         String ossOperator = optionService.getByPropertyOfNonNull(UpYunProperties.OSS_OPERATOR).toString();\n@@ -111,11 +111,10 @@ public void delete(String key) {\n         upYun.setApiDomain(UpYun.ED_AUTO);\n \n         try {\n-            String filePath = ossSource + key;\n             // Delete the file\n-            boolean deleteResult = upYun.deleteFile(filePath);\n+            boolean deleteResult = upYun.deleteFile(key);\n             if (!deleteResult) {\n-                log.warn(\"Failed to delete file \" + filePath + \" from UpYun\");\n+                log.warn(\"Failed to delete file \" + key + \" from UpYun\");\n             }\n         } catch (Exception e) {\n             throw new FileOperationException(\"附件从又拍云删除失败\", e);",
    "output": "Fix UpYun oss delete error."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/InstallController.java b/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n@@ -144,9 +144,9 @@ private BaseComment createDefaultComment(@Nullable Post post) {\n \n         PostCommentParam commentParam = new PostCommentParam();\n         commentParam.setAuthor(\"Halo Bot\");\n-        commentParam.setAuthorUrl(\"https://github.com/halo-dev/halo\");\n+        commentParam.setAuthorUrl(\"https://halo.run\");\n         commentParam.setContent(\"欢迎使用 Halo，这是你的第一条评论。\");\n-        commentParam.setEmail(\"i@ryanc.cc\");\n+        commentParam.setEmail(\"halo@halo.run\");\n         commentParam.setPostId(post.getId());\n         return postCommentService.create(commentParam.convertTo());\n     }",
    "output": "Change first comment info."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/MenuController.java b/src/main/java/run/halo/app/controller/admin/api/MenuController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/MenuController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/MenuController.java\n@@ -79,6 +79,13 @@ public MenuDTO updateBy(@PathVariable(\"menuId\") Integer menuId,\n     @DeleteMapping(\"{menuId:\\\\d+}\")\n     @ApiOperation(\"Deletes a menu\")\n     public MenuDTO deleteBy(@PathVariable(\"menuId\") Integer menuId) {\n+        List<Menu> menus = menuService.listByParentId(menuId);\n+        if (null != menus && menus.size() > 0) {\n+            menus.forEach(menu -> {\n+                menu.setParentId(0);\n+                menuService.update(menu);\n+            });\n+        }\n         return new MenuDTO().convertFrom(menuService.removeById(menuId));\n     }\n }\n\ndiff --git a/src/main/java/run/halo/app/repository/MenuRepository.java b/src/main/java/run/halo/app/repository/MenuRepository.java\n--- a/src/main/java/run/halo/app/repository/MenuRepository.java\n+++ b/src/main/java/run/halo/app/repository/MenuRepository.java\n@@ -4,6 +4,8 @@\n import run.halo.app.model.entity.Menu;\n import run.halo.app.repository.base.BaseRepository;\n \n+import java.util.List;\n+\n /**\n  * Menu repository.\n  *\n@@ -14,4 +16,6 @@ public interface MenuRepository extends BaseRepository<Menu, Integer> {\n     boolean existsByName(@NonNull String name);\n \n     boolean existsByIdNotAndName(@NonNull Integer id, @NonNull String name);\n+\n+    List<Menu> findByParentId(@NonNull Integer id);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/MenuService.java b/src/main/java/run/halo/app/service/MenuService.java\n--- a/src/main/java/run/halo/app/service/MenuService.java\n+++ b/src/main/java/run/halo/app/service/MenuService.java\n@@ -44,4 +44,12 @@ public interface MenuService extends CrudService<Menu, Integer> {\n      * @return a menu tree\n      */\n     List<MenuVO> listAsTree(Sort sort);\n+\n+    /**\n+     * Lists menu by parent id.\n+     *\n+     * @param id id\n+     * @return a list of menu\n+     */\n+    List<Menu> listByParentId(@NonNull Integer id);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/MenuServiceImpl.java b/src/main/java/run/halo/app/service/impl/MenuServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/MenuServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/MenuServiceImpl.java\n@@ -71,6 +71,13 @@ public List<MenuVO> listAsTree(Sort sort) {\n         return topLevelMenu.getChildren();\n     }\n \n+    @Override\n+    public List<Menu> listByParentId(Integer id) {\n+        Assert.notNull(id, \"Menu parent id must not be null\");\n+\n+        return menuRepository.findByParentId(id);\n+    }\n+\n     @Override\n     public Menu create(Menu menu) {\n         nameMustNotExist(menu);",
    "output": "Fixed remove menu error."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/utils/XmlTransferMapUtils.java b/src/main/java/run/halo/app/utils/XmlTransferMapUtils.java\n--- a/src/main/java/run/halo/app/utils/XmlTransferMapUtils.java\n+++ b/src/main/java/run/halo/app/utils/XmlTransferMapUtils.java\n@@ -0,0 +1,105 @@\n+package run.halo.app.utils;\n+\n+import org.dom4j.Document;\n+import org.dom4j.Element;\n+import org.dom4j.io.SAXReader;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.util.*;\n+\n+/**\n+ * 解析 WordPress 导出的 xml 文章数据为 Map 结果集\n+ *\n+ * @author guqing\n+ */\n+public class XmlTransferMapUtils {\n+\n+    /**\n+     * 存储在此集合中的节点名称都会被解析为一个List存储\n+     */\n+    private static final List<String> ARRAY_PROPERTY = Arrays.asList(\"channel\", \"item\", \"category\", \"postmeta\", \"comment\");\n+\n+    /**\n+     * 根据xml文件对象获取 xml 的根节点 rootElement 对象\n+     *\n+     * @param file xml的文件对象\n+     * @return 返回根节点元素\n+     */\n+    public Element getRootElement(File file) {\n+        try {\n+            SAXReader saxReader = new SAXReader();\n+            FileInputStream fileInputStream = new FileInputStream(file);\n+            Document document = saxReader.read(fileInputStream);\n+            return document.getRootElement();\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"can not get root element\");\n+        }\n+    }\n+\n+\n+    /**\n+     * 根据根节点获取子节点元素集合递归遍历得到Map结果集\n+     *\n+     * @param root xml的根节点元素对象\n+     * @return 返回解析xml得到的Map结果集\n+     */\n+    public Map<String, Object> getResultSetMapping(Element root) {\n+        Map<String, Object> result;\n+        try {\n+            // 获取根元素的所有子元素\n+            List<Element> children = root.elements();\n+\n+            //递归遍历将xml节点数据解析为Map结果集\n+            result = transfer2Map(children, null);\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"can not transfer xml file to map.\" + e.getMessage());\n+        }\n+\n+        return result;\n+    }\n+\n+    /**\n+     * 递归解析xml，实现N层解析\n+     *\n+     * @param elements 所有子节点元素集，随着递归遍历而改变\n+     * @param list     存储中间遍历结果的容器\n+     * @return 返回递归完成后的Map结果集映射\n+     */\n+    private Map<String, Object> transfer2Map(List<Element> elements, List<Map<String, Object>> list) {\n+        Map<String, Object> map = new HashMap<String, Object>();\n+\n+        for (Element element : elements) {\n+            String name = element.getName();\n+            //如果是定义成数组\n+            if (ARRAY_PROPERTY.contains(name)) {\n+                //继续递归循环\n+                List<Map<String, Object>> sublist = new ArrayList<Map<String, Object>>();\n+\n+                Map<String, Object> subMap = this.transfer2Map(element.elements(), sublist);\n+\n+                //根据key获取是否已经存在\n+                Object object = map.get(name);\n+                //如果存在,合并\n+                if (object != null) {\n+                    List<Map<String, Object>> olist = (List<Map<String, Object>>) object;\n+                    olist.add(subMap);\n+                    map.put(name, olist);\n+                } else {\n+                    //否则直接存入map\n+                    map.put(name, sublist);\n+                }\n+            } else {\n+                //单个值存入map\n+                map.put(name, element.getTextTrim());\n+            }\n+        }\n+\n+        //存入list中\n+        if (list != null) {\n+            list.add(map);\n+        }\n+        //返回结果集合\n+        return map;\n+    }\n+}",
    "output": "Merge branch 'master' into dev"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/utils/XmlTransferMapUtils.java b/src/main/java/run/halo/app/utils/XmlTransferMapUtils.java\n--- a/src/main/java/run/halo/app/utils/XmlTransferMapUtils.java\n+++ b/src/main/java/run/halo/app/utils/XmlTransferMapUtils.java\n@@ -1,101 +1,105 @@\n-package xyz.guqing.transfer.processor;\r\n-\r\n-import org.dom4j.Document;\r\n-import org.dom4j.Element;\r\n-import org.dom4j.io.SAXReader;\r\n-\r\n-import java.io.*;\r\n-import java.util.*;\r\n-\r\n-/**\r\n- * 解析wordpress导出的xml文章数据为Map结果集\r\n- * @uthor guqing\r\n- */\r\n-public class TransferMapProcessor {\r\n-    // 存储在此集合中的节点名称都会被解析为一个List存储\r\n-    private static final List<String> ARRAY_PROPERTY = Arrays.asList(new String[]{\"channel\", \"item\", \"category\", \"postmeta\", \"comment\"});\r\n-\r\n-    /**\r\n-     * 根据xml文件对象获取xml的根节点rootElement对象\r\n-     * @param file xml的文件对象\r\n-     * @return 返回根节点元素\r\n-     */\r\n-    public Element getRootElement(File file) {\r\n-        try {\r\n-            SAXReader saxReader = new SAXReader();\r\n-            FileInputStream fileInputStream = new FileInputStream(file);\r\n-            Document document = saxReader.read(fileInputStream);\r\n-            Element rootElement = document.getRootElement();\r\n-\r\n-            return rootElement;\r\n-        } catch (Exception e) {\r\n-            throw new RuntimeException(\"can not get root element\");\r\n-        }\r\n-    }\r\n-\r\n-\r\n-    /**\r\n-     * 根据根节点获取子节点元素集合递归遍历得到Map结果集\r\n-     * @param root xml的根节点元素对象\r\n-     * @return 返回解析xml得到的Map结果集\r\n-     */\r\n-    public Map<String, Object> getResultSetMapping(Element root) {\r\n-        Map<String, Object> result = new HashMap<String, Object>();\r\n-\r\n-        try {\r\n-            // 获取根元素的所有子元素\r\n-            List<Element> children = root.elements();\r\n-\r\n-            //递归遍历将xml节点数据解析为Map结果集\r\n-            result = transfer2Map(children,null);\r\n-        } catch (Exception e) {\r\n-            throw new RuntimeException(\"can not transfer xml file to map.\" + e.getMessage());\r\n-        }\r\n-\r\n-        return result;\r\n-    }\r\n-\r\n-    /**\r\n-     * 递归解析xml，实现N层解析\r\n-     * @param elements 所有子节点元素集，随着递归遍历而改变\r\n-     * @param list 存储中间遍历结果的容器\r\n-     * @return 返回递归完成后的Map结果集映射\r\n-     */\r\n-    private Map<String, Object> transfer2Map(List<Element> elements,List<Map<String,Object>> list){\r\n-        Map<String, Object> map = new HashMap<String, Object>();\r\n-\r\n-        for(Element element : elements){\r\n-            String name = element.getName();\r\n-            //如果是定义成数组\r\n-            if(ARRAY_PROPERTY.contains(name)) {\r\n-                //继续递归循环\r\n-                List<Map<String,Object>> sublist = new ArrayList<Map<String,Object>>();\r\n-\r\n-                Map<String,Object> subMap  = this.transfer2Map(element.elements(), sublist);\r\n-\r\n-                //根据key获取是否已经存在\r\n-                Object object = map.get(name);\r\n-                //如果存在,合并\r\n-                if(object !=null ){\r\n-                    List<Map<String,Object>> olist = (List<Map<String,Object>>)object;\r\n-                    olist.add(subMap);//\r\n-                    map.put(name, olist);\r\n-                }else{\r\n-                    //否则直接存入map\r\n-                    map.put(name, sublist);\r\n-                }\r\n-            }else {\r\n-                //单个值存入map\r\n-                map.put(name, element.getTextTrim());\r\n-            }\r\n-        }\r\n-\r\n-        //存入list中\r\n-        if(list != null) {\r\n-            list.add(map);\r\n-        }\r\n-\r\n-        //返回结果集合\r\n-        return map;\r\n-    }\r\n-}\r\n+package run.halo.app.utils;\n+\n+import org.dom4j.Document;\n+import org.dom4j.Element;\n+import org.dom4j.io.SAXReader;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.util.*;\n+\n+/**\n+ * 解析 WordPress 导出的 xml 文章数据为 Map 结果集\n+ *\n+ * @author guqing\n+ */\n+public class XmlTransferMapUtils {\n+\n+    /**\n+     * 存储在此集合中的节点名称都会被解析为一个List存储\n+     */\n+    private static final List<String> ARRAY_PROPERTY = Arrays.asList(\"channel\", \"item\", \"category\", \"postmeta\", \"comment\");\n+\n+    /**\n+     * 根据xml文件对象获取 xml 的根节点 rootElement 对象\n+     *\n+     * @param file xml的文件对象\n+     * @return 返回根节点元素\n+     */\n+    public Element getRootElement(File file) {\n+        try {\n+            SAXReader saxReader = new SAXReader();\n+            FileInputStream fileInputStream = new FileInputStream(file);\n+            Document document = saxReader.read(fileInputStream);\n+            return document.getRootElement();\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"can not get root element\");\n+        }\n+    }\n+\n+\n+    /**\n+     * 根据根节点获取子节点元素集合递归遍历得到Map结果集\n+     *\n+     * @param root xml的根节点元素对象\n+     * @return 返回解析xml得到的Map结果集\n+     */\n+    public Map<String, Object> getResultSetMapping(Element root) {\n+        Map<String, Object> result;\n+        try {\n+            // 获取根元素的所有子元素\n+            List<Element> children = root.elements();\n+\n+            //递归遍历将xml节点数据解析为Map结果集\n+            result = transfer2Map(children, null);\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"can not transfer xml file to map.\" + e.getMessage());\n+        }\n+\n+        return result;\n+    }\n+\n+    /**\n+     * 递归解析xml，实现N层解析\n+     *\n+     * @param elements 所有子节点元素集，随着递归遍历而改变\n+     * @param list     存储中间遍历结果的容器\n+     * @return 返回递归完成后的Map结果集映射\n+     */\n+    private Map<String, Object> transfer2Map(List<Element> elements, List<Map<String, Object>> list) {\n+        Map<String, Object> map = new HashMap<String, Object>();\n+\n+        for (Element element : elements) {\n+            String name = element.getName();\n+            //如果是定义成数组\n+            if (ARRAY_PROPERTY.contains(name)) {\n+                //继续递归循环\n+                List<Map<String, Object>> sublist = new ArrayList<Map<String, Object>>();\n+\n+                Map<String, Object> subMap = this.transfer2Map(element.elements(), sublist);\n+\n+                //根据key获取是否已经存在\n+                Object object = map.get(name);\n+                //如果存在,合并\n+                if (object != null) {\n+                    List<Map<String, Object>> olist = (List<Map<String, Object>>) object;\n+                    olist.add(subMap);\n+                    map.put(name, olist);\n+                } else {\n+                    //否则直接存入map\n+                    map.put(name, sublist);\n+                }\n+            } else {\n+                //单个值存入map\n+                map.put(name, element.getTextTrim());\n+            }\n+        }\n+\n+        //存入list中\n+        if (list != null) {\n+            list.add(map);\n+        }\n+        //返回结果集合\n+        return map;\n+    }\n+}",
    "output": "Fixed XmlTransferMapUtils."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/SwaggerConfiguration.java b/src/main/java/run/halo/app/config/SwaggerConfiguration.java\n--- a/src/main/java/run/halo/app/config/SwaggerConfiguration.java\n+++ b/src/main/java/run/halo/app/config/SwaggerConfiguration.java\n@@ -147,18 +147,24 @@ private List<ApiKey> contentApiKeys() {\n     private List<SecurityContext> contentSecurityContext() {\n         return Collections.singletonList(\n                 SecurityContext.builder()\n-                        .securityReferences(defaultAuth())\n+                        .securityReferences(contentApiAuth())\n                         .forPaths(PathSelectors.regex(\"/api/content/.*\"))\n                         .build()\n         );\n     }\n \n     private List<SecurityReference> defaultAuth() {\n-        AuthorizationScope[] authorizationScopes = {new AuthorizationScope(\"global\", \"accessEverything\")};\n+        AuthorizationScope[] authorizationScopes = {new AuthorizationScope(\"Admin api\", \"Access admin api\")};\n         return Arrays.asList(new SecurityReference(\"Token from header\", authorizationScopes),\n                 new SecurityReference(\"Token from query\", authorizationScopes));\n     }\n \n+    private List<SecurityReference> contentApiAuth() {\n+        AuthorizationScope[] authorizationScopes = {new AuthorizationScope(\"content api\", \"Access content api\")};\n+        return Arrays.asList(new SecurityReference(\"Access key from header\", authorizationScopes),\n+                new SecurityReference(\"Access key from query\", authorizationScopes));\n+    }\n+\n     private ApiInfo apiInfo() {\n         return new ApiInfoBuilder()\n                 .title(\"Halo API Documentation\")",
    "output": "Fix content api authentication in swagger"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/CategoryService.java b/src/main/java/run/halo/app/service/CategoryService.java\n--- a/src/main/java/run/halo/app/service/CategoryService.java\n+++ b/src/main/java/run/halo/app/service/CategoryService.java\n@@ -18,6 +18,7 @@\n  * @author ryanwang\n  * @date : 2019-03-14\n  */\n+@Transactional(readOnly = true)\n public interface CategoryService extends CrudService<Category, Integer> {\n \n     /**\n\ndiff --git a/src/main/java/run/halo/app/service/impl/CategoryServiceImpl.java b/src/main/java/run/halo/app/service/impl/CategoryServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/CategoryServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/CategoryServiceImpl.java\n@@ -5,6 +5,7 @@\n import org.springframework.data.domain.Sort;\n import org.springframework.lang.NonNull;\n import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n import org.springframework.util.Assert;\n import org.springframework.util.CollectionUtils;\n import run.halo.app.exception.AlreadyExistsException;\n@@ -46,6 +47,7 @@ public CategoryServiceImpl(CategoryRepository categoryRepository,\n     }\n \n     @Override\n+    @Transactional\n     public Category create(Category category) {\n         Assert.notNull(category, \"Category to create must not be null\");\n \n@@ -161,6 +163,7 @@ public Category getByName(String name) {\n     }\n \n     @Override\n+    @Transactional\n     public void removeCategoryAndPostCategoryBy(Integer categoryId) {\n         // Remove category\n         removeById(categoryId);\n\ndiff --git a/src/main/java/run/halo/app/service/impl/TagServiceImpl.java b/src/main/java/run/halo/app/service/impl/TagServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/TagServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/TagServiceImpl.java\n@@ -2,6 +2,7 @@\n \n import lombok.extern.slf4j.Slf4j;\n import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n import org.springframework.util.Assert;\n import org.springframework.util.CollectionUtils;\n import run.halo.app.exception.AlreadyExistsException;\n@@ -35,6 +36,7 @@ public TagServiceImpl(TagRepository tagRepository) {\n     }\n \n     @Override\n+    @Transactional\n     public Tag create(Tag tag) {\n         // Check if the tag is exist\n         long count = tagRepository.countByNameOrSlugName(tag.getName(), tag.getSlugName());\n\ndiff --git a/src/test/java/run/halo/app/service/impl/PostServiceImplTest.java b/src/test/java/run/halo/app/service/impl/PostServiceImplTest.java\n--- a/src/test/java/run/halo/app/service/impl/PostServiceImplTest.java\n+++ b/src/test/java/run/halo/app/service/impl/PostServiceImplTest.java\n@@ -1,24 +1,52 @@\n-//package run.halo.app.service.impl;\n-//\n-//import org.junit.Assert;\n-//import org.junit.Test;\n-//import org.junit.runner.RunWith;\n-//import org.springframework.beans.factory.annotation.Autowired;\n-//import org.springframework.boot.test.context.SpringBootTest;\n-//import org.springframework.test.context.ActiveProfiles;\n-//import org.springframework.test.context.junit4.SpringRunner;\n-//\n-//@RunWith(SpringRunner.class)\n-//@SpringBootTest\n-//@ActiveProfiles(\"dev\")\n-//public class PostServiceImplTest {\n-//\n-//    @Autowired\n-//    private PostServiceImpl postService;\n-//\n-//    @Test\n-//    public void getContent(){\n-//        String exportMarkdown = postService.exportMarkdown(18);\n-//        System.out.println(exportMarkdown);\n-//    }\n-//}\n\\ No newline at end of file\n+package run.halo.app.service.impl;\n+\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.ActiveProfiles;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest\n+@ActiveProfiles(\"dev\")\n+public class PostServiceImplTest {\n+\n+    String standardMdContent = \"---\\n\" +\n+            \"title: springfox-swagger2配置成功但无法访问/swagger-ui.html\\n\" +\n+            \"tags:\\n\" +\n+            \"  - spring boot\\n\" +\n+            \"  - swagger\\n\" +\n+            \"  - solution\\n\" +\n+            \"date: 2018-11-23 16:11:28\\n\" +\n+            \"---\\n\" +\n+            \"\\n\" +\n+            \"# Pre\\n\" +\n+            \"\\n\" +\n+            \"在前后端分离项目中，通常需要用到 API 文档，springfox 开发的 **[SpringFox](https://github.com/springfox/springfox)** 可以实现自动化 json API 文档。\";\n+\n+    String nonStandardMdContent = \"---\\n\" +\n+            \"title: Basic concepts of JPA\\n\" +\n+            \"date: 2018-08-03 11:57:00\\n\" +\n+            \"tags: ['spring', 'jpa', 'database', 'concept']\\n\" +\n+            \"---\\n\" +\n+            \"\\n\" +\n+            \"以下将讲解关系型数据的关系描述。仅仅是作为总结。\";\n+\n+    @Autowired\n+    private PostServiceImpl postService;\n+\n+    @Test\n+    @Ignore\n+    public void getContent() {\n+        String exportMarkdown = postService.exportMarkdown(18);\n+        System.out.println(exportMarkdown);\n+    }\n+\n+    @Test\n+    public void markdownImportTest() {\n+        postService.importMarkdown(standardMdContent, \"standard\");\n+        postService.importMarkdown(nonStandardMdContent, \"nonStandard\");\n+    }\n+}\n\\ No newline at end of file",
    "output": "Add Transactional support"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java b/src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java\n@@ -7,7 +7,6 @@\n import org.springframework.data.domain.Pageable;\n import org.springframework.data.domain.Sort;\n import org.springframework.lang.NonNull;\n-import org.springframework.lang.Nullable;\n import org.springframework.util.Assert;\n import org.springframework.util.CollectionUtils;\n import run.halo.app.exception.AlreadyExistsException;\n@@ -24,6 +23,7 @@\n import run.halo.app.service.base.AbstractCrudService;\n import run.halo.app.service.base.BasePostService;\n import run.halo.app.utils.DateUtils;\n+import run.halo.app.utils.HaloUtils;\n import run.halo.app.utils.MarkdownUtils;\n import run.halo.app.utils.ServiceUtils;\n \n@@ -40,6 +40,7 @@\n  * Base post service implementation.\n  *\n  * @author johnniang\n+ * @author ryanwang\n  * @date 2019-04-24\n  */\n @Slf4j\n@@ -275,7 +276,7 @@ public BasePostSimpleDTO convertToSimple(POST post) {\n \n         // Set summary\n         if (StringUtils.isBlank(basePostSimpleDTO.getSummary())) {\n-            // TODO build post summary\n+            basePostSimpleDTO.setSummary(generateSummary(post.getFormatContent()));\n         }\n \n         return basePostSimpleDTO;\n@@ -347,12 +348,14 @@ protected void urlMustNotExist(@NonNull POST post) {\n     }\n \n     @NonNull\n-    protected String convertToSummary(@Nullable String markdownContent) {\n+    protected String generateSummary(@NonNull String htmlContent) {\n+        Assert.notNull(htmlContent, \"html content must not be null\");\n+\n+        String text = HaloUtils.cleanHtmlTag(htmlContent);\n+\n         // Get summary length\n         Integer summaryLength = optionService.getByPropertyOrDefault(PostProperties.SUMMARY_LENGTH, Integer.class, 150);\n \n-        // TODO build summary.\n-        return \"\";\n+        return StringUtils.substring(text, 0, summaryLength);\n     }\n-\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n@@ -463,7 +463,7 @@ public Page<PostListVO> convertToListVo(Page<Post> postPage) {\n             PostListVO postListVO = new PostListVO().convertFrom(post);\n \n             if (StringUtils.isBlank(postListVO.getSummary())) {\n-                // TODO Set summary\n+                postListVO.setSummary(generateSummary(post.getFormatContent()));\n             }\n \n             Optional.ofNullable(tagListMap.get(post.getId())).orElseGet(LinkedList::new);\n\ndiff --git a/src/main/java/run/halo/app/utils/HaloUtils.java b/src/main/java/run/halo/app/utils/HaloUtils.java\n--- a/src/main/java/run/halo/app/utils/HaloUtils.java\n+++ b/src/main/java/run/halo/app/utils/HaloUtils.java\n@@ -8,7 +8,6 @@\n \n import java.net.InetAddress;\n import java.net.UnknownHostException;\n-import java.nio.file.Path;\n import java.util.UUID;\n \n import static run.halo.app.model.support.HaloConst.FILE_SEPARATOR;\n@@ -17,11 +16,14 @@\n  * Common utils\n  *\n  * @author ryanwang\n+ * @author johnniang\n  * @date : 2017/12/22\n  */\n @Slf4j\n public class HaloUtils {\n \n+    private static final String RE_HTML_MARK = \"(<[^<]*?>)|(<[\\\\s]*?/[^<]*?>)|(<[^<]*?/[\\\\s]*?>)\";\n+\n     /**\n      * Desensitizes the plain text.\n      *\n@@ -192,4 +194,14 @@ public static String getMachineIP() {\n         }\n         return machineAddress.getHostAddress();\n     }\n+\n+    /**\n+     * Clean all html tag\n+     *\n+     * @param content html document\n+     * @return text before cleaned\n+     */\n+    public static String cleanHtmlTag(String content) {\n+        return content.replaceAll(RE_HTML_MARK, \"\");\n+    }\n }",
    "output": "Fixed #196"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java b/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n--- a/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n+++ b/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n@@ -81,13 +81,11 @@ public void addArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers)\n     @Override\n     public void addResourceHandlers(ResourceHandlerRegistry registry) {\n         String workDir = FILE_PROTOCOL + haloProperties.getWorkDir();\n-        registry.addResourceHandler(\"/static/**\")\n-                .addResourceLocations(\"classpath:/static/\")\n-                .addResourceLocations(workDir + \"static/\");\n         registry.addResourceHandler(\"/**\")\n                 .addResourceLocations(workDir + \"templates/themes/\")\n                 .addResourceLocations(workDir + \"templates/admin/\")\n-                .addResourceLocations(\"classpath:/admin/\");\n+                .addResourceLocations(\"classpath:/admin/\")\n+                .addResourceLocations(workDir + \"static/\");\n         registry.addResourceHandler(\"/upload/**\")\n                 .addResourceLocations(workDir + \"upload/\");\n         registry.addResourceHandler(\"/backup/**\")",
    "output": "Refactor WebMvcAutoConfiguration."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n@@ -376,11 +376,6 @@ private AuthToken buildAuthToken(@NonNull User user) {\n         return token;\n     }\n \n-    /**\n-     * Get spring logs.\n-     *\n-     * @return recently logs.\n-     */\n     @Override\n     public String getSpringLogs() {\n         File file = new File(haloProperties.getWorkDir(), LOGS_PATH);\n\ndiff --git a/src/main/java/run/halo/app/service/impl/CategoryServiceImpl.java b/src/main/java/run/halo/app/service/impl/CategoryServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/CategoryServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/CategoryServiceImpl.java\n@@ -144,12 +144,6 @@ private CategoryVO createTopLevelCategory() {\n         return topCategory;\n     }\n \n-    /**\n-     * Get category by slug name\n-     *\n-     * @param slugName slug name\n-     * @return Category\n-     */\n     @Override\n     public Category getBySlugName(String slugName) {\n         return categoryRepository.getBySlugName(slugName).orElseThrow(() -> new NotFoundException(\"该分类已存在\").setErrorData(slugName));\n\ndiff --git a/src/main/java/run/halo/app/service/impl/LinkServiceImpl.java b/src/main/java/run/halo/app/service/impl/LinkServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/LinkServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/LinkServiceImpl.java\n@@ -36,12 +36,6 @@ public LinkServiceImpl(LinkRepository linkRepository) {\n         this.linkRepository = linkRepository;\n     }\n \n-    /**\n-     * List link dtos.\n-     *\n-     * @param sort sort\n-     * @return all links\n-     */\n     @Override\n     public List<LinkDTO> listDtos(Sort sort) {\n         Assert.notNull(sort, \"Sort info must not be null\");\n\ndiff --git a/src/main/java/run/halo/app/service/impl/MailServiceImpl.java b/src/main/java/run/halo/app/service/impl/MailServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/MailServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/MailServiceImpl.java\n@@ -37,13 +37,6 @@ public MailServiceImpl(FreeMarkerConfigurer freeMarker,\n \n     }\n \n-    /**\n-     * Sends a simple email\n-     *\n-     * @param to      recipient\n-     * @param subject subject\n-     * @param content content\n-     */\n     @Override\n     public void sendMail(String to, String subject, String content) {\n         loadConfig();\n@@ -63,14 +56,6 @@ public void sendMail(String to, String subject, String content) {\n         }\n     }\n \n-    /**\n-     * Sends template mail\n-     *\n-     * @param to           recipient\n-     * @param subject      subject\n-     * @param content      content\n-     * @param templateName template name\n-     */\n     @Override\n     public void sendTemplateMail(String to, String subject, Map<String, Object> content, String templateName) {\n         loadConfig();\n@@ -93,15 +78,6 @@ public void sendTemplateMail(String to, String subject, Map<String, Object> cont\n         }\n     }\n \n-    /**\n-     * Sends mail with attachments\n-     *\n-     * @param to             recipient\n-     * @param subject        subject\n-     * @param content        content\n-     * @param templateName   template name\n-     * @param attachFilename attachment path\n-     */\n     @Override\n     public void sendAttachMail(String to, String subject, Map<String, Object> content, String templateName, String attachFilename) {\n         loadConfig();\n\ndiff --git a/src/main/java/run/halo/app/service/impl/MenuServiceImpl.java b/src/main/java/run/halo/app/service/impl/MenuServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/MenuServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/MenuServiceImpl.java\n@@ -51,12 +51,6 @@ public Menu createBy(MenuParam menuParam) {\n         return create(menuParam.convertTo());\n     }\n \n-    /**\n-     * Lists as menu tree.\n-     *\n-     * @param sort sort info must not be null\n-     * @return a menu tree\n-     */\n     @Override\n     public List<MenuVO> listAsTree(Sort sort) {\n         Assert.notNull(sort, \"Sort info must not be null\");\n\ndiff --git a/src/main/java/run/halo/app/service/impl/PhotoServiceImpl.java b/src/main/java/run/halo/app/service/impl/PhotoServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PhotoServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PhotoServiceImpl.java\n@@ -41,25 +41,13 @@ public PhotoServiceImpl(PhotoRepository photoRepository) {\n         this.photoRepository = photoRepository;\n     }\n \n-    /**\n-     * List photo dtos.\n-     *\n-     * @param sort sort\n-     * @return all photos\n-     */\n     @Override\n     public List<PhotoDTO> listDtos(Sort sort) {\n         Assert.notNull(sort, \"Sort info must not be null\");\n \n         return listAll(sort).stream().map(photo -> (PhotoDTO) new PhotoDTO().convertFrom(photo)).collect(Collectors.toList());\n     }\n \n-    /**\n-     * Lists photo team vos.\n-     *\n-     * @param sort must not be null\n-     * @return a list of photo team vo\n-     */\n     @Override\n     public List<PhotoTeamVO> listTeamVos(Sort sort) {\n         Assert.notNull(sort, \"Sort info must not be null\");\n@@ -88,13 +76,6 @@ public List<PhotoTeamVO> listTeamVos(Sort sort) {\n         return result;\n     }\n \n-    /**\n-     * List photos by team.\n-     *\n-     * @param team team\n-     * @param sort sort\n-     * @return list of photos\n-     */\n     @Override\n     public List<PhotoDTO> listByTeam(String team, Sort sort) {\n         List<Photo> photos = photoRepository.findByTeam(team, sort);\n\ndiff --git a/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java b/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n@@ -85,13 +85,6 @@ public Page<Sheet> pageBy(Pageable pageable) {\n         return listAll(pageable);\n     }\n \n-    /**\n-     * Gets sheet by post status and url.\n-     *\n-     * @param status post status must not be null\n-     * @param url    sheet url must not be blank\n-     * @return sheet info\n-     */\n     @Override\n     public Sheet getBy(PostStatus status, String url) {\n         Sheet sheet = super.getBy(status, url);\n\ndiff --git a/src/main/java/run/halo/app/service/impl/TagServiceImpl.java b/src/main/java/run/halo/app/service/impl/TagServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/TagServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/TagServiceImpl.java\n@@ -49,12 +49,6 @@ public Tag create(Tag tag) {\n         return super.create(tag);\n     }\n \n-    /**\n-     * Get tag by slug name\n-     *\n-     * @param slugName slug name\n-     * @return Tag\n-     */\n     @Override\n     public Tag getBySlugNameOfNonNull(String slugName) {\n         return tagRepository.getBySlugName(slugName).orElseThrow(() -> new NotFoundException(\"该标签已存在\").setErrorData(slugName));\n\ndiff --git a/src/main/java/run/halo/app/service/impl/UserServiceImpl.java b/src/main/java/run/halo/app/service/impl/UserServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/UserServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/UserServiceImpl.java\n@@ -78,24 +78,11 @@ public User getByUsernameOfNonNull(String username) {\n         return getByUsername(username).orElseThrow(() -> new NotFoundException(\"The username dose not exist\").setErrorData(username));\n     }\n \n-    /**\n-     * Gets user by email.\n-     *\n-     * @param email email must not be blank\n-     * @return an optional user\n-     */\n     @Override\n     public Optional<User> getByEmail(String email) {\n         return userRepository.findByEmail(email);\n     }\n \n-    /**\n-     * Gets non null user by email.\n-     *\n-     * @param email email\n-     * @return user info\n-     * @throws NotFoundException throws when the username does not exist\n-     */\n     @Override\n     public User getByEmailOfNonNull(String email) {\n         return getByEmail(email).orElseThrow(() -> new NotFoundException(\"The email dose not exist\").setErrorData(email));",
    "output": "Remove some comments."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/properties/ApiProperties.java b/src/main/java/run/halo/app/model/properties/ApiProperties.java\n--- a/src/main/java/run/halo/app/model/properties/ApiProperties.java\n+++ b/src/main/java/run/halo/app/model/properties/ApiProperties.java\n@@ -0,0 +1,41 @@\n+package run.halo.app.model.properties;\n+\n+/**\n+ * Api properties.\n+ *\n+ * @author ryanwang\n+ * @date 2019-06-25\n+ */\n+public enum ApiProperties implements PropertyEnum {\n+\n+    API_ENABLED(\"api_enabled\", Boolean.class, \"false\"),\n+\n+    API_ACCESS_KEY(\"api_access_key\", String.class, \"\");\n+\n+    private final String value;\n+\n+    private final Class<?> type;\n+\n+    private final String defaultValue;\n+\n+    ApiProperties(String value, Class<?> type, String defaultValue) {\n+        this.value = value;\n+        this.type = type;\n+        this.defaultValue = defaultValue;\n+    }\n+\n+    @Override\n+    public Class<?> getType() {\n+        return type;\n+    }\n+\n+    @Override\n+    public String defaultValue() {\n+        return defaultValue;\n+    }\n+\n+    @Override\n+    public String getValue() {\n+        return value;\n+    }\n+}\n\ndiff --git a/src/main/java/run/halo/app/model/properties/OtherProperties.java b/src/main/java/run/halo/app/model/properties/OtherProperties.java\n--- a/src/main/java/run/halo/app/model/properties/OtherProperties.java\n+++ b/src/main/java/run/halo/app/model/properties/OtherProperties.java\n@@ -4,22 +4,14 @@\n  * Other properties.\n  *\n  * @author johnniang\n+ * @author ryanwang\n  * @date 4/1/19\n  */\n public enum OtherProperties implements PropertyEnum {\n \n-    API_ENABLED(\"api_enabled\", Boolean.class, \"false\"),\n-\n-    API_ACCESS_KEY(\"api_access_key\", String.class, \"\"),\n-\n     CUSTOM_HEAD(\"blog_custom_head\",String.class,\"\"),\n \n-    STATISTICS_CODE(\"blog_statistics_code\", String.class, \"\"),\n-\n-    /**\n-     * 是否禁止爬虫\n-     */\n-    SPIDER_DISABLED(\"spider_disabled\", Boolean.class, \"false\");\n+    STATISTICS_CODE(\"blog_statistics_code\", String.class, \"\");\n \n     private final String value;\n \n\ndiff --git a/src/main/java/run/halo/app/model/properties/PropertyEnum.java b/src/main/java/run/halo/app/model/properties/PropertyEnum.java\n--- a/src/main/java/run/halo/app/model/properties/PropertyEnum.java\n+++ b/src/main/java/run/halo/app/model/properties/PropertyEnum.java\n@@ -154,6 +154,7 @@ static Map<String, PropertyEnum> getValuePropertyEnumMap() {\n         propertyEnumClasses.add(QnYunProperties.class);\n         propertyEnumClasses.add(SeoProperties.class);\n         propertyEnumClasses.add(UpYunProperties.class);\n+        propertyEnumClasses.add(ApiProperties.class);\n \n         Map<String, PropertyEnum> result = new HashMap<>();\n \n\ndiff --git a/src/main/java/run/halo/app/model/properties/SeoProperties.java b/src/main/java/run/halo/app/model/properties/SeoProperties.java\n--- a/src/main/java/run/halo/app/model/properties/SeoProperties.java\n+++ b/src/main/java/run/halo/app/model/properties/SeoProperties.java\n@@ -4,6 +4,7 @@\n  * SEO properties.\n  *\n  * @author johnniang\n+ * @author ryanwang\n  * @date 4/1/19\n  */\n public enum SeoProperties implements PropertyEnum {\n@@ -14,13 +15,10 @@ public enum SeoProperties implements PropertyEnum {\n \n     BAIDU_TOKEN(\"seo_baidu_token\", String.class, \"\"),\n \n-    VERIFICATION_BAIDU(\"seo_verification_baidu\", String.class, \"\"),\n-\n-    VERIFICATION_GOOGLE(\"seo_verification_google\", String.class, \"\"),\n-\n-    VERIFICATION_BING(\"seo_verification_bing\", String.class, \"\"),\n-\n-    VERIFICATION_QIHU(\"seo_verification_qihu\", String.class, \"\");\n+    /**\n+     * 是否禁止爬虫\n+     */\n+    SPIDER_DISABLED(\"seo_spider_disabled\", Boolean.class, \"false\");\n \n     private final String value;\n \n\ndiff --git a/src/main/java/run/halo/app/security/filter/ApiAuthenticationFilter.java b/src/main/java/run/halo/app/security/filter/ApiAuthenticationFilter.java\n--- a/src/main/java/run/halo/app/security/filter/ApiAuthenticationFilter.java\n+++ b/src/main/java/run/halo/app/security/filter/ApiAuthenticationFilter.java\n@@ -8,8 +8,8 @@\n import run.halo.app.config.properties.HaloProperties;\n import run.halo.app.exception.AuthenticationException;\n import run.halo.app.exception.ForbiddenException;\n+import run.halo.app.model.properties.ApiProperties;\n import run.halo.app.model.properties.CommentProperties;\n-import run.halo.app.model.properties.OtherProperties;\n import run.halo.app.service.OptionService;\n \n import javax.servlet.FilterChain;\n@@ -48,7 +48,7 @@ protected void doAuthenticate(HttpServletRequest request, HttpServletResponse re\n         }\n \n         // Get api_enable from option\n-        Boolean apiEnabled = optionService.getByPropertyOrDefault(OtherProperties.API_ENABLED, Boolean.class, false);\n+        Boolean apiEnabled = optionService.getByPropertyOrDefault(ApiProperties.API_ENABLED, Boolean.class, false);\n \n         if (!apiEnabled) {\n             getFailureHandler().onFailure(request, response, new ForbiddenException(\"API has been disabled by blogger currently\"));\n@@ -65,7 +65,7 @@ protected void doAuthenticate(HttpServletRequest request, HttpServletResponse re\n         }\n \n         // Get access key from option\n-        Optional<String> optionalAccessKey = optionService.getByProperty(OtherProperties.API_ACCESS_KEY, String.class);\n+        Optional<String> optionalAccessKey = optionService.getByProperty(ApiProperties.API_ACCESS_KEY, String.class);\n \n         if (!optionalAccessKey.isPresent()) {\n             // If the access key is not set",
    "output": "Refactor options form."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/AdminController.java b/src/main/java/run/halo/app/controller/admin/api/AdminController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/AdminController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/AdminController.java\n@@ -2,11 +2,13 @@\n \n import io.swagger.annotations.ApiOperation;\n import lombok.extern.slf4j.Slf4j;\n+import org.springframework.http.HttpStatus;\n import org.springframework.web.bind.annotation.*;\n import run.halo.app.cache.lock.CacheLock;\n import run.halo.app.model.dto.EnvironmentDTO;\n import run.halo.app.model.dto.StatisticDTO;\n import run.halo.app.model.params.LoginParam;\n+import run.halo.app.model.support.BaseResponse;\n import run.halo.app.security.token.AuthToken;\n import run.halo.app.service.AdminService;\n \n@@ -16,6 +18,7 @@\n  * Admin controller.\n  *\n  * @author johnniang\n+ * @author ryanwang\n  * @date 3/19/19\n  */\n @Slf4j\n@@ -73,4 +76,9 @@ public void updateAdmin() {\n         adminService.updateAdminAssets();\n     }\n \n+    @GetMapping(\"spring/logs\")\n+    @ApiOperation(\"Get application logs\")\n+    public BaseResponse<String> getSpringLogs() {\n+        return BaseResponse.ok(HttpStatus.OK.getReasonPhrase(),adminService.getSpringLogs());\n+    }\n }\n\ndiff --git a/src/main/java/run/halo/app/service/AdminService.java b/src/main/java/run/halo/app/service/AdminService.java\n--- a/src/main/java/run/halo/app/service/AdminService.java\n+++ b/src/main/java/run/halo/app/service/AdminService.java\n@@ -26,6 +26,8 @@ public interface AdminService {\n \n     String REFRESH_TOKEN_CACHE_PREFIX = \"halo.admin.refresh_token.\";\n \n+    String LOGS_PATH = \"logs/spring.log\";\n+\n     /**\n      * Authenticates.\n      *\n@@ -69,4 +71,10 @@ public interface AdminService {\n      * Updates halo admin assets.\n      */\n     void updateAdminAssets();\n+\n+    /**\n+     * Get spring logs.\n+     * @return recently logs.\n+     */\n+    String getSpringLogs();\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n@@ -1,5 +1,6 @@\n package run.halo.app.service.impl;\n \n+import cn.hutool.core.io.file.FileReader;\n import cn.hutool.core.lang.Validator;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.beans.factory.annotation.Value;\n@@ -32,6 +33,7 @@\n import run.halo.app.utils.FileUtils;\n import run.halo.app.utils.HaloUtils;\n \n+import java.io.File;\n import java.io.IOException;\n import java.lang.management.ManagementFactory;\n import java.lang.management.RuntimeMXBean;\n@@ -373,4 +375,19 @@ private AuthToken buildAuthToken(@NonNull User user) {\n \n         return token;\n     }\n+\n+    /**\n+     * Get spring logs.\n+     *\n+     * @return recently logs.\n+     */\n+    @Override\n+    public String getSpringLogs() {\n+        File file = new File(haloProperties.getWorkDir(), LOGS_PATH);\n+        if (!file.exists()) {\n+            return \"暂无日志\";\n+        }\n+        FileReader reader = new FileReader(file);\n+        return reader.readString();\n+    }\n }",
    "output": "Support get spring.log api."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/support/LogsRecord.java b/src/main/java/run/halo/app/model/support/LogsRecord.java\n--- a/src/main/java/run/halo/app/model/support/LogsRecord.java\n+++ b/src/main/java/run/halo/app/model/support/LogsRecord.java\n@@ -1,36 +0,0 @@\n-package run.halo.app.model.support;\n-\n-/**\n- * <pre>\n- *     日志常量\n- * </pre>\n- *\n- * @author ryanwang\n- * @date : 2018/1/19\n- */\n-public interface LogsRecord {\n-\n-    String INSTALL = \"初始化博客\";\n-\n-    String LOGIN = \"登录后台\";\n-\n-    String LOGIN_SUCCESS = \"登录成功\";\n-\n-    String LOGIN_ERROR = \"登录失败\";\n-\n-    String LOGOUT = \"退出登录\";\n-\n-    String PUSH_POST = \"发表文章\";\n-\n-    String PUSH_PAGE = \"发表页面\";\n-\n-    String REMOVE_POST = \"删除文章\";\n-\n-    String CHANGE_THEME = \"更换主题\";\n-\n-    String UPLOAD_THEME = \"上传主题\";\n-\n-    String UPLOAD_FILE = \"上传附件\";\n-\n-    String REMOVE_FILE = \"移除附件\";\n-}\n\ndiff --git a/src/main/java/run/halo/app/model/support/QiNiuPutSet.java b/src/main/java/run/halo/app/model/support/QiNiuPutSet.java\n--- a/src/main/java/run/halo/app/model/support/QiNiuPutSet.java\n+++ b/src/main/java/run/halo/app/model/support/QiNiuPutSet.java\n@@ -17,6 +17,7 @@ public class QiNiuPutSet {\n      * 文件hash值\n      */\n     public String hash;\n+\n     /**\n      * 文件名\n      */\n\ndiff --git a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n@@ -3,20 +3,23 @@\n import cn.hutool.core.lang.Validator;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.http.ResponseEntity;\n import org.springframework.lang.NonNull;\n import org.springframework.stereotype.Service;\n import org.springframework.util.Assert;\n import org.springframework.web.client.RestTemplate;\n import run.halo.app.cache.StringCacheStore;\n import run.halo.app.config.properties.HaloProperties;\n+import run.halo.app.event.logger.LogEvent;\n import run.halo.app.exception.BadRequestException;\n import run.halo.app.exception.NotFoundException;\n import run.halo.app.exception.ServiceException;\n import run.halo.app.model.dto.EnvironmentDTO;\n import run.halo.app.model.dto.StatisticDTO;\n import run.halo.app.model.entity.User;\n import run.halo.app.model.enums.CommentStatus;\n+import run.halo.app.model.enums.LogType;\n import run.halo.app.model.enums.Mode;\n import run.halo.app.model.enums.PostStatus;\n import run.halo.app.model.params.LoginParam;\n@@ -76,6 +79,8 @@ public class AdminServiceImpl implements AdminService {\n \n     private final HaloProperties haloProperties;\n \n+    private final ApplicationEventPublisher eventPublisher;\n+\n     private final String driverClassName;\n \n     private final String mode;\n@@ -92,6 +97,7 @@ public AdminServiceImpl(PostService postService,\n                             StringCacheStore cacheStore,\n                             RestTemplate restTemplate,\n                             HaloProperties haloProperties,\n+                            ApplicationEventPublisher eventPublisher,\n                             @Value(\"${spring.datasource.driver-class-name}\") String driverClassName,\n                             @Value(\"${spring.profiles.active:prod}\") String mode) {\n         this.postService = postService;\n@@ -106,6 +112,7 @@ public AdminServiceImpl(PostService postService,\n         this.cacheStore = cacheStore;\n         this.restTemplate = restTemplate;\n         this.haloProperties = haloProperties;\n+        this.eventPublisher = eventPublisher;\n         this.driverClassName = driverClassName;\n         this.mode = mode;\n     }\n@@ -126,13 +133,17 @@ public AuthToken authenticate(LoginParam loginParam) {\n                     userService.getByEmailOfNonNull(username) : userService.getByUsernameOfNonNull(username);\n         } catch (NotFoundException e) {\n             log.error(\"Failed to find user by name: \" + username, e);\n+            eventPublisher.publishEvent(new LogEvent(this, \"\", LogType.LOGIN_FAILED, loginParam.getUsername()));\n+\n             throw new BadRequestException(mismatchTip);\n         }\n \n         userService.mustNotExpire(user);\n \n         if (!userService.passwordMatch(user, loginParam.getPassword())) {\n             // If the password is mismatch\n+            eventPublisher.publishEvent(new LogEvent(this, \"\", LogType.LOGIN_FAILED, loginParam.getUsername()));\n+\n             throw new BadRequestException(mismatchTip);\n         }\n \n@@ -141,6 +152,9 @@ public AuthToken authenticate(LoginParam loginParam) {\n             throw new BadRequestException(\"您已登录，请不要重复登录\");\n         }\n \n+        // Log it then login successful\n+        eventPublisher.publishEvent(new LogEvent(this, user.getUsername(), LogType.LOGGED_IN, user.getNickname()));\n+\n         // Generate new token\n         return buildAuthToken(user);\n     }\n@@ -170,6 +184,8 @@ public void clearToken() {\n             cacheStore.delete(SecurityUtils.buildRefreshTokenKey(user));\n         });\n \n+        eventPublisher.publishEvent(new LogEvent(this, user.getUsername(), LogType.LOGGED_OUT, user.getNickname()));\n+\n         log.info(\"You have been logged out, looking forward to your next visit!\");\n     }\n ",
    "output": "Log login and logout action."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java b/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n--- a/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n+++ b/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n@@ -122,7 +122,7 @@ public FreeMarkerConfigurer freemarkerConfig(HaloProperties haloProperties) thro\n         configurer.setDefaultEncoding(\"UTF-8\");\n \n         Properties properties = new Properties();\n-        properties.setProperty(\"auto_import\", \"/common/macro/common_macro.ftl as common\");\n+        properties.setProperty(\"auto_import\", \"/common/macro/common_macro.ftl as common,/common/macro/global_macro.ftl as global\");\n \n         configurer.setFreemarkerSettings(properties);\n ",
    "output": "Add Freemarker property 'global'."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/core/CommonController.java b/src/main/java/run/halo/app/controller/core/CommonController.java\n--- a/src/main/java/run/halo/app/controller/core/CommonController.java\n+++ b/src/main/java/run/halo/app/controller/core/CommonController.java\n@@ -15,6 +15,7 @@\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.util.NestedServletException;\n import run.halo.app.exception.HaloException;\n+import run.halo.app.exception.NotFoundException;\n import run.halo.app.service.ThemeService;\n import run.halo.app.utils.FilenameUtils;\n \n@@ -69,20 +70,7 @@ public String handleError(HttpServletRequest request, HttpServletResponse respon\n \n         log.error(\"Error path: [{}], status: [{}]\", getErrorPath(), status);\n \n-        Object throwableObject = request.getAttribute(\"javax.servlet.error.exception\");\n-\n-        if (throwableObject != null) {\n-            Throwable throwable = (Throwable) throwableObject;\n-            log.error(\"Captured an exception\", throwable);\n-\n-            if (StringUtils.startsWithIgnoreCase(throwable.getMessage(), \"Could not resolve view with name '\")) {\n-                // TODO May cause unknown-reason problem\n-                // if Ftl was not found then redirect to /404\n-                return contentNotFound();\n-            }\n-\n-            handleCustomException(request);\n-        }\n+        handleCustomException(request);\n \n         Map<String, Object> errorDetail = Collections.unmodifiableMap(getErrorAttributes(request, isIncludeStackTrace(request)));\n         model.addAttribute(\"error\", errorDetail);\n@@ -164,6 +152,7 @@ private void handleCustomException(@NonNull HttpServletRequest request) {\n         }\n \n         Throwable throwable = (Throwable) throwableObject;\n+        log.error(\"Captured an exception\", throwable);\n \n         if (throwable instanceof NestedServletException) {\n             Throwable rootCause = ((NestedServletException) throwable).getRootCause();\n@@ -173,7 +162,14 @@ private void handleCustomException(@NonNull HttpServletRequest request) {\n                 request.setAttribute(\"javax.servlet.error.exception\", rootCause);\n                 request.setAttribute(\"javax.servlet.error.message\", haloException.getMessage());\n             }\n+        } else if (StringUtils.startsWithIgnoreCase(throwable.getMessage(), \"Could not resolve view with name '\")) {\n+            request.setAttribute(\"javax.servlet.error.status_code\", HttpStatus.NOT_FOUND.value());\n+\n+            NotFoundException viewNotFound = new NotFoundException(\"该路径没有对应的模板\");\n+            request.setAttribute(\"javax.servlet.error.exception\", viewNotFound);\n+            request.setAttribute(\"javax.servlet.error.message\", viewNotFound.getMessage());\n         }\n+\n     }\n \n     /**",
    "output": "Fix view not found error"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/core/CommonController.java b/src/main/java/run/halo/app/controller/core/CommonController.java\n--- a/src/main/java/run/halo/app/controller/core/CommonController.java\n+++ b/src/main/java/run/halo/app/controller/core/CommonController.java\n@@ -1,18 +1,22 @@\n package run.halo.app.controller.core;\n \n-import cn.hutool.core.text.StrBuilder;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.boot.autoconfigure.web.ErrorProperties;\n import org.springframework.boot.autoconfigure.web.ServerProperties;\n import org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController;\n import org.springframework.boot.web.servlet.error.ErrorAttributes;\n import org.springframework.http.HttpStatus;\n+import org.springframework.lang.NonNull;\n import org.springframework.stereotype.Controller;\n import org.springframework.ui.Model;\n+import org.springframework.util.Assert;\n import org.springframework.util.StringUtils;\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.util.NestedServletException;\n+import run.halo.app.exception.HaloException;\n import run.halo.app.service.ThemeService;\n+import run.halo.app.utils.FilenameUtils;\n \n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n@@ -34,17 +38,22 @@ public class CommonController extends AbstractErrorController {\n \n     private static final String INTERNAL_ERROR_TEMPLATE = \"500.ftl\";\n \n-    private static final String ERROR_TEMPLATE = \"common/error/error\";\n+    private static final String ERROR_TEMPLATE = \"error.ftl\";\n+\n+    private static final String DEFAULT_ERROR_PATH = \"common/error/error\";\n \n     private final ThemeService themeService;\n \n     private final ErrorProperties errorProperties;\n \n+    private final ErrorAttributes errorAttributes;\n+\n     public CommonController(ThemeService themeService,\n                             ErrorAttributes errorAttributes,\n                             ServerProperties serverProperties) {\n         super(errorAttributes);\n         this.themeService = themeService;\n+        this.errorAttributes = errorAttributes;\n         this.errorProperties = serverProperties.getError();\n     }\n \n@@ -60,17 +69,19 @@ public String handleError(HttpServletRequest request, HttpServletResponse respon\n \n         log.error(\"Error path: [{}], status: [{}]\", getErrorPath(), status);\n \n-        // Get the exception\n-        Throwable throwable = (Throwable) request.getAttribute(\"javax.servlet.error.exception\");\n+        Object throwableObject = request.getAttribute(\"javax.servlet.error.exception\");\n \n-        if (throwable != null) {\n+        if (throwableObject != null) {\n+            Throwable throwable = (Throwable) throwableObject;\n             log.error(\"Captured an exception\", throwable);\n \n             if (StringUtils.startsWithIgnoreCase(throwable.getMessage(), \"Could not resolve view with name '\")) {\n                 // TODO May cause unknown-reason problem\n                 // if Ftl was not found then redirect to /404\n-                return contentNotFround();\n+                return contentNotFound();\n             }\n+\n+            handleCustomException(request);\n         }\n \n         Map<String, Object> errorDetail = Collections.unmodifiableMap(getErrorAttributes(request, isIncludeStackTrace(request)));\n@@ -81,7 +92,7 @@ public String handleError(HttpServletRequest request, HttpServletResponse respon\n         if (status.equals(HttpStatus.INTERNAL_SERVER_ERROR)) {\n             return contentInternalError();\n         } else if (status.equals(HttpStatus.NOT_FOUND)) {\n-            return contentNotFround();\n+            return contentNotFound();\n         } else {\n             return defaultErrorHandler();\n         }\n@@ -93,14 +104,16 @@ public String handleError(HttpServletRequest request, HttpServletResponse respon\n      * @return String\n      */\n     @GetMapping(value = \"/404\")\n-    public String contentNotFround() {\n-        if (!themeService.templateExists(NOT_FOUND_TEMPLATE)) {\n-            return defaultErrorHandler();\n+    public String contentNotFound() {\n+        if (themeService.templateExists(ERROR_TEMPLATE)) {\n+            return getActualTemplatePath(ERROR_TEMPLATE);\n         }\n-        StrBuilder path = new StrBuilder(\"themes/\");\n-        path.append(themeService.getActivatedTheme().getFolderName());\n-        path.append(\"/404\");\n-        return path.toString();\n+\n+        if (themeService.templateExists(NOT_FOUND_TEMPLATE)) {\n+            return getActualTemplatePath(NOT_FOUND_TEMPLATE);\n+        }\n+\n+        return defaultErrorHandler();\n     }\n \n     /**\n@@ -110,18 +123,57 @@ public String contentNotFround() {\n      */\n     @GetMapping(value = \"/500\")\n     public String contentInternalError() {\n-        if (!themeService.templateExists(INTERNAL_ERROR_TEMPLATE)) {\n-            return defaultErrorHandler();\n+        if (themeService.templateExists(ERROR_TEMPLATE)) {\n+            return getActualTemplatePath(ERROR_TEMPLATE);\n+        }\n+\n+        if (themeService.templateExists(INTERNAL_ERROR_TEMPLATE)) {\n+            return getActualTemplatePath(INTERNAL_ERROR_TEMPLATE);\n         }\n \n-        StrBuilder path = new StrBuilder(\"themes/\");\n-        path.append(themeService.getActivatedTheme().getFolderName());\n-        path.append(\"/500\");\n+        return defaultErrorHandler();\n+    }\n+\n+    private String defaultErrorHandler() {\n+        return DEFAULT_ERROR_PATH;\n+    }\n+\n+    private String getActualTemplatePath(@NonNull String template) {\n+        Assert.hasText(template, \"FTL template must not be blank\");\n+\n+        StringBuilder path = new StringBuilder();\n+        path.append(\"themes/\")\n+                .append(themeService.getActivatedTheme().getFolderName())\n+                .append('/')\n+                .append(FilenameUtils.getBasename(template));\n+\n         return path.toString();\n     }\n \n-    public String defaultErrorHandler() {\n-        return ERROR_TEMPLATE;\n+    /**\n+     * Handles custom exception, like HaloException.\n+     *\n+     * @param request http servlet request must not be null\n+     */\n+    private void handleCustomException(@NonNull HttpServletRequest request) {\n+        Assert.notNull(request, \"Http servlet request must not be null\");\n+\n+        Object throwableObject = request.getAttribute(\"javax.servlet.error.exception\");\n+        if (throwableObject == null) {\n+            return;\n+        }\n+\n+        Throwable throwable = (Throwable) throwableObject;\n+\n+        if (throwable instanceof NestedServletException) {\n+            Throwable rootCause = ((NestedServletException) throwable).getRootCause();\n+            if (rootCause instanceof HaloException) {\n+                HaloException haloException = (HaloException) rootCause;\n+                request.setAttribute(\"javax.servlet.error.status_code\", haloException.getStatus().value());\n+                request.setAttribute(\"javax.servlet.error.exception\", rootCause);\n+                request.setAttribute(\"javax.servlet.error.message\", haloException.getMessage());\n+            }\n+        }\n     }\n \n     /**",
    "output": "Refactor common error render again"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/core/CommonController.java b/src/main/java/run/halo/app/controller/core/CommonController.java\n--- a/src/main/java/run/halo/app/controller/core/CommonController.java\n+++ b/src/main/java/run/halo/app/controller/core/CommonController.java\n@@ -2,13 +2,22 @@\n \n import cn.hutool.core.text.StrBuilder;\n import lombok.extern.slf4j.Slf4j;\n-import org.springframework.boot.web.servlet.error.ErrorController;\n+import org.springframework.boot.autoconfigure.web.ErrorProperties;\n+import org.springframework.boot.autoconfigure.web.ServerProperties;\n+import org.springframework.boot.autoconfigure.web.servlet.error.AbstractErrorController;\n+import org.springframework.boot.web.servlet.error.ErrorAttributes;\n+import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n import org.springframework.util.StringUtils;\n import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n import run.halo.app.service.ThemeService;\n \n import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.util.Collections;\n+import java.util.Map;\n \n /**\n  * Error page Controller\n@@ -18,18 +27,25 @@\n  */\n @Slf4j\n @Controller\n-public class CommonController implements ErrorController {\n+@RequestMapping(\"${server.error.path:${error.path:/error}}\")\n+public class CommonController extends AbstractErrorController {\n \n-    private static final String ERROR_PATH = \"/error\";\n-\n-    private static final String NOT_FROUND_TEMPLATE = \"404.ftl\";\n+    private static final String NOT_FOUND_TEMPLATE = \"404.ftl\";\n \n     private static final String INTERNAL_ERROR_TEMPLATE = \"500.ftl\";\n \n+    private static final String ERROR_TEMPLATE = \"common/error/error\";\n+\n     private final ThemeService themeService;\n \n-    public CommonController(ThemeService themeService) {\n+    private final ErrorProperties errorProperties;\n+\n+    public CommonController(ThemeService themeService,\n+                            ErrorAttributes errorAttributes,\n+                            ServerProperties serverProperties) {\n+        super(errorAttributes);\n         this.themeService = themeService;\n+        this.errorProperties = serverProperties.getError();\n     }\n \n     /**\n@@ -38,11 +54,11 @@ public CommonController(ThemeService themeService) {\n      * @param request request\n      * @return String\n      */\n-    @GetMapping(value = ERROR_PATH)\n-    public String handleError(HttpServletRequest request) {\n-        final Integer statusCode = (Integer) request.getAttribute(\"javax.servlet.error.status_code\");\n+    @GetMapping\n+    public String handleError(HttpServletRequest request, HttpServletResponse response, Model model) {\n+        HttpStatus status = getStatus(request);\n \n-        log.error(\"Error path: [{}], status: [{}]\", getErrorPath(), statusCode);\n+        log.error(\"Error path: [{}], status: [{}]\", getErrorPath(), status);\n \n         // Get the exception\n         Throwable throwable = (Throwable) request.getAttribute(\"javax.servlet.error.exception\");\n@@ -57,7 +73,18 @@ public String handleError(HttpServletRequest request) {\n             }\n         }\n \n-        return statusCode == 500 ? contentInternalError() : contentNotFround();\n+        Map<String, Object> errorDetail = Collections.unmodifiableMap(getErrorAttributes(request, isIncludeStackTrace(request)));\n+        model.addAttribute(\"error\", errorDetail);\n+\n+        log.debug(\"Error detail: [{}]\", errorDetail);\n+\n+        if (status.equals(HttpStatus.INTERNAL_SERVER_ERROR)) {\n+            return contentInternalError();\n+        } else if (status.equals(HttpStatus.NOT_FOUND)) {\n+            return contentNotFround();\n+        } else {\n+            return defaultErrorHandler();\n+        }\n     }\n \n     /**\n@@ -67,8 +94,8 @@ public String handleError(HttpServletRequest request) {\n      */\n     @GetMapping(value = \"/404\")\n     public String contentNotFround() {\n-        if (!themeService.templateExists(NOT_FROUND_TEMPLATE)) {\n-            return \"common/error/404\";\n+        if (!themeService.templateExists(NOT_FOUND_TEMPLATE)) {\n+            return defaultErrorHandler();\n         }\n         StrBuilder path = new StrBuilder(\"themes/\");\n         path.append(themeService.getActivatedTheme().getFolderName());\n@@ -84,21 +111,43 @@ public String contentNotFround() {\n     @GetMapping(value = \"/500\")\n     public String contentInternalError() {\n         if (!themeService.templateExists(INTERNAL_ERROR_TEMPLATE)) {\n-            return \"common/error/500\";\n+            return defaultErrorHandler();\n         }\n+\n         StrBuilder path = new StrBuilder(\"themes/\");\n         path.append(themeService.getActivatedTheme().getFolderName());\n         path.append(\"/500\");\n         return path.toString();\n     }\n \n+    public String defaultErrorHandler() {\n+        return ERROR_TEMPLATE;\n+    }\n+\n     /**\n      * Returns the path of the error page.\n      *\n      * @return the error path\n      */\n     @Override\n     public String getErrorPath() {\n-        return ERROR_PATH;\n+        return this.errorProperties.getPath();\n+    }\n+\n+    /**\n+     * Determine if the stacktrace attribute should be included.\n+     *\n+     * @param request the source request\n+     * @return if the stacktrace attribute should be included\n+     */\n+    protected boolean isIncludeStackTrace(HttpServletRequest request) {\n+        ErrorProperties.IncludeStacktrace include = errorProperties.getIncludeStacktrace();\n+        if (include == ErrorProperties.IncludeStacktrace.ALWAYS) {\n+            return true;\n+        }\n+        if (include == ErrorProperties.IncludeStacktrace.ON_TRACE_PARAM) {\n+            return getTraceParameter(request);\n+        }\n+        return false;\n     }\n }",
    "output": "Refactor common error render"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/TraceController.java b/src/main/java/run/halo/app/controller/admin/api/TraceController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/TraceController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/TraceController.java\n@@ -0,0 +1,34 @@\n+package run.halo.app.controller.admin.api;\n+\n+import io.swagger.annotations.ApiOperation;\n+import org.springframework.boot.actuate.trace.http.HttpTrace;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import run.halo.app.service.TraceService;\n+\n+import java.util.List;\n+\n+/**\n+ * Trace controller.\n+ *\n+ * @author johnniang\n+ * @date 19-6-18\n+ */\n+@RestController\n+@RequestMapping(\"/api/admin/traces\")\n+public class TraceController {\n+\n+    private final TraceService traceService;\n+\n+    public TraceController(TraceService traceService) {\n+        this.traceService = traceService;\n+    }\n+\n+    @GetMapping\n+    @ApiOperation(\"Lists http traces\")\n+    public List<HttpTrace> listHttpTraces() {\n+        return traceService.listHttpTraces();\n+    }\n+\n+}\n\ndiff --git a/src/main/java/run/halo/app/model/dto/HttpTraceDTO.java b/src/main/java/run/halo/app/model/dto/HttpTraceDTO.java\n--- a/src/main/java/run/halo/app/model/dto/HttpTraceDTO.java\n+++ b/src/main/java/run/halo/app/model/dto/HttpTraceDTO.java\n@@ -0,0 +1,20 @@\n+package run.halo.app.model.dto;\n+\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+\n+import java.util.Date;\n+\n+/**\n+ * Http trace dto.\n+ *\n+ * @author johnniang\n+ * @date 19-6-18\n+ */\n+@Data\n+@ToString\n+@EqualsAndHashCode\n+public class HttpTraceDTO {\n+\n+}\n\ndiff --git a/src/main/java/run/halo/app/service/TraceService.java b/src/main/java/run/halo/app/service/TraceService.java\n--- a/src/main/java/run/halo/app/service/TraceService.java\n+++ b/src/main/java/run/halo/app/service/TraceService.java\n@@ -0,0 +1,24 @@\n+package run.halo.app.service;\n+\n+import org.springframework.boot.actuate.trace.http.HttpTrace;\n+import org.springframework.lang.NonNull;\n+\n+import java.util.List;\n+\n+/**\n+ * Trace service interface.\n+ *\n+ * @author johnniang\n+ * @date 19-6-18\n+ */\n+public interface TraceService {\n+\n+    /**\n+     * Gets all http traces.\n+     *\n+     * @return\n+     */\n+    @NonNull\n+    List<HttpTrace> listHttpTraces();\n+\n+}\n\ndiff --git a/src/main/java/run/halo/app/service/impl/TraceServiceImpl.java b/src/main/java/run/halo/app/service/impl/TraceServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/TraceServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/TraceServiceImpl.java\n@@ -0,0 +1,31 @@\n+package run.halo.app.service.impl;\n+\n+import org.springframework.boot.actuate.trace.http.HttpTrace;\n+import org.springframework.boot.actuate.trace.http.HttpTraceRepository;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.PageImpl;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.stereotype.Service;\n+import org.springframework.util.Assert;\n+import run.halo.app.service.TraceService;\n+\n+import java.util.List;\n+\n+/**\n+ * @author johnniang\n+ * @date 19-6-18\n+ */\n+@Service\n+public class TraceServiceImpl implements TraceService {\n+\n+    private final HttpTraceRepository httpTraceRepository;\n+\n+    public TraceServiceImpl(HttpTraceRepository httpTraceRepository) {\n+        this.httpTraceRepository = httpTraceRepository;\n+    }\n+\n+    @Override\n+    public List<HttpTrace> listHttpTraces() {\n+        return httpTraceRepository.findAll();\n+    }\n+}",
    "output": "Enable http trace list api"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/params/PostParam.java b/src/main/java/run/halo/app/model/params/PostParam.java\n--- a/src/main/java/run/halo/app/model/params/PostParam.java\n+++ b/src/main/java/run/halo/app/model/params/PostParam.java\n@@ -62,13 +62,9 @@ public class PostParam implements InputConverter<Post> {\n     @Override\n     public Post convertTo() {\n         if (StringUtils.isBlank(url)) {\n-            url = HaloUtils.normalizeUrl(title);\n-        } else {\n-            url = HaloUtils.normalizeUrl(url);\n+            url = title;\n         }\n \n-        url = HaloUtils.initializeUrlIfBlank(url);\n-\n         Post post = InputConverter.super.convertTo();\n         // Crypt password\n         if (StringUtils.isNotBlank(password)) {\n@@ -81,13 +77,9 @@ public Post convertTo() {\n     @Override\n     public void update(Post post) {\n         if (StringUtils.isBlank(url)) {\n-            url = HaloUtils.normalizeUrl(title);\n-        } else {\n-            url = HaloUtils.normalizeUrl(url);\n+            url = title;\n         }\n \n-        url = HaloUtils.initializeUrlIfBlank(url);\n-\n         InputConverter.super.update(post);\n \n         // Crypt password",
    "output": "Replace post url with title if absent"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/utils/FileUtils.java b/src/main/java/run/halo/app/utils/FileUtils.java\n--- a/src/main/java/run/halo/app/utils/FileUtils.java\n+++ b/src/main/java/run/halo/app/utils/FileUtils.java\n@@ -66,25 +66,16 @@ public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IO\n     public static void deleteFolder(@NonNull Path deletingPath) throws IOException {\n         Assert.notNull(deletingPath, \"Deleting path must not be null\");\n \n+        if (Files.notExists(deletingPath)) {\n+            return;\n+        }\n+\n         log.info(\"Deleting [{}]\", deletingPath);\n \n         // Delete folder recursively\n         org.eclipse.jgit.util.FileUtils.delete(deletingPath.toFile(),\n                 org.eclipse.jgit.util.FileUtils.RECURSIVE | org.eclipse.jgit.util.FileUtils.RETRY);\n \n-//        try (Stream<Path> pathStream = Files.walk(deletingPath)) {\n-//            pathStream.sorted(Comparator.reverseOrder())\n-//                    .peek(path -> log.debug(\"Try to delete [{}]\", path.toString()))\n-//                    .forEach(path -> {\n-//                        try {\n-//                            Files.delete(path);\n-//                            log.debug(\"Deleted [{}] successfully\", path.toString());\n-//                        } catch (IOException e) {\n-//                            throw new ServiceException(\"Failed to delete \" + path.toString(), e).setErrorData(deletingPath.toString());\n-//                        }\n-//                    });\n-//        }\n-\n         log.info(\"Deleted [{}] successfully\", deletingPath);\n     }\n ",
    "output": "Fix file deletion bug"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/InstallController.java b/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n@@ -196,6 +196,8 @@ private User createUser(InstallParam installParam) {\n             installParam.update(user);\n             // Set password manually\n             userService.setPassword(user, installParam.getPassword());\n+            // Set default avatar\n+            userService.setDefaultAvatar(user);\n             // Update user\n             return userService.update(user);\n         }).orElseGet(() -> userService.createBy(installParam));\n\ndiff --git a/src/main/java/run/halo/app/service/UserService.java b/src/main/java/run/halo/app/service/UserService.java\n--- a/src/main/java/run/halo/app/service/UserService.java\n+++ b/src/main/java/run/halo/app/service/UserService.java\n@@ -122,4 +122,11 @@ public interface UserService extends CrudService<User, Integer> {\n      * @param plainPassword plain password must not be blank\n      */\n     void setPassword(@NonNull User user, @NonNull String plainPassword);\n+\n+    /**\n+     * Set user default avatar，use Gavatar(http://cn.gravatar.com)\n+     *\n+     * @param user user must not be null\n+     */\n+    void setDefaultAvatar(@NonNull User user);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/UserServiceImpl.java b/src/main/java/run/halo/app/service/impl/UserServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/UserServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/UserServiceImpl.java\n@@ -1,5 +1,7 @@\n package run.halo.app.service.impl;\n \n+import cn.hutool.core.text.StrBuilder;\n+import cn.hutool.crypto.SecureUtil;\n import cn.hutool.crypto.digest.BCrypt;\n import org.apache.commons.lang3.StringUtils;\n import org.springframework.context.ApplicationEventPublisher;\n@@ -193,4 +195,12 @@ public void setPassword(@NonNull User user, @NonNull String plainPassword) {\n         user.setPassword(BCrypt.hashpw(plainPassword, BCrypt.gensalt()));\n     }\n \n+    @Override\n+    public void setDefaultAvatar(User user) {\n+        Assert.notNull(user, \"User must not be null\");\n+        StrBuilder gravatar = new StrBuilder(\"//cn.gravatar.com/avatar/\");\n+        gravatar.append(SecureUtil.md5(user.getEmail()));\n+        gravatar.append(\"?s=256&d=mm\");\n+        user.setAvatar(gravatar.toString());\n+    }\n }",
    "output": "Set default avatar when installing."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n@@ -244,7 +244,8 @@ public void updateAdminAssets() {\n         if (responseEntity == null ||\n                 responseEntity.getStatusCode().isError() ||\n                 responseEntity.getBody() == null) {\n-            throw new ServiceException(\"Failed to request remote url: \" + HALO_ADMIN_RELEASES_LATEST).setErrorData(HALO_ADMIN_RELEASES_LATEST);\n+            log.debug(\"Failed to request remote url: [{}]\", HALO_ADMIN_RELEASES_LATEST);\n+            throw new ServiceException(\"系统无法访问到 Github 的 API\").setErrorData(HALO_ADMIN_RELEASES_LATEST);\n         }\n \n         Object assetsObject = responseEntity.getBody().get(\"assets\");\n@@ -284,10 +285,11 @@ public void updateAdminAssets() {\n                 // Copy it to template/admin folder\n                 FileUtils.copyFolder(FileUtils.tryToSkipZipParentFolder(assetTempPath), adminPath);\n             } catch (Throwable t) {\n-                throw new ServiceException(t.getMessage(), t);\n+                log.error(\"Failed to update halo admin\", t);\n+                throw new ServiceException(\"更新 Halo admin 失败\");\n             }\n         } else {\n-            throw new ServiceException(\"Github response error\").setErrorData(assetsObject);\n+            throw new ServiceException(\"Github API 返回内容有误\").setErrorData(assetsObject);\n         }\n     }\n ",
    "output": "Change error tips of halo admin updation"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java b/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n--- a/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n+++ b/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n@@ -90,8 +90,6 @@ public void addResourceHandlers(ResourceHandlerRegistry registry) {\n                 .addResourceLocations(\"classpath:/admin/\");\n         registry.addResourceHandler(\"/upload/**\")\n                 .addResourceLocations(workDir + \"upload/\");\n-        registry.addResourceHandler(\"/favicon.ico\")\n-                .addResourceLocations(\"classpath:/static/halo-admin/images/favicon.ico\");\n         registry.addResourceHandler(\"/backup/**\")\n                 .addResourceLocations(workDir + \"backup/\");\n         registry.addResourceHandler(\"/admin/**\")",
    "output": "Remove /favicon.ico resourceHandler."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/dto/EnvironmentDTO.java b/src/main/java/run/halo/app/model/dto/EnvironmentDTO.java\n--- a/src/main/java/run/halo/app/model/dto/EnvironmentDTO.java\n+++ b/src/main/java/run/halo/app/model/dto/EnvironmentDTO.java\n@@ -16,4 +16,6 @@ public class EnvironmentDTO {\n     private long startTime;\n \n     private String version;\n+\n+    private String mode;\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n@@ -2,6 +2,7 @@\n \n import cn.hutool.core.lang.Validator;\n import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang3.StringUtils;\n import org.springframework.beans.factory.annotation.Value;\n import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.lang.NonNull;\n@@ -63,6 +64,8 @@ public class AdminServiceImpl implements AdminService {\n \n     private final String driverClassName;\n \n+    private final String mode;\n+\n     public AdminServiceImpl(PostService postService,\n                             SheetService sheetService,\n                             AttachmentService attachmentService,\n@@ -74,7 +77,8 @@ public AdminServiceImpl(PostService postService,\n                             LinkService linkService,\n                             StringCacheStore cacheStore,\n                             ApplicationEventPublisher eventPublisher,\n-                            @Value(\"${spring.datasource.driver-class-name}\") String driverClassName) {\n+                            @Value(\"${spring.datasource.driver-class-name}\") String driverClassName,\n+                            @Value(\"${spring.profiles.active}\") String mode) {\n         this.postService = postService;\n         this.sheetService = sheetService;\n         this.attachmentService = attachmentService;\n@@ -87,6 +91,7 @@ public AdminServiceImpl(PostService postService,\n         this.cacheStore = cacheStore;\n         this.eventPublisher = eventPublisher;\n         this.driverClassName = driverClassName;\n+        this.mode = mode;\n     }\n \n     @Override\n@@ -189,6 +194,12 @@ public EnvironmentDTO getEnvironments() {\n \n         environmentDTO.setVersion(HaloConst.HALO_VERSION);\n \n+        if (StringUtils.isNotEmpty(mode)) {\n+            environmentDTO.setMode(StringUtils.equals(\"dev\", mode) ? \"development\" : \"production\");\n+        } else {\n+            environmentDTO.setMode(\"test\");\n+        }\n+\n         return environmentDTO;\n     }\n ",
    "output": "Support mode for getEnvironment api."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/params/MailParam.java b/src/main/java/run/halo/app/model/params/MailParam.java\n--- a/src/main/java/run/halo/app/model/params/MailParam.java\n+++ b/src/main/java/run/halo/app/model/params/MailParam.java\n@@ -2,6 +2,7 @@\n \n import lombok.Data;\n \n+import javax.validation.constraints.Email;\n import javax.validation.constraints.NotBlank;\n \n /**\n@@ -14,6 +15,7 @@\n public class MailParam {\n \n     @NotBlank(message = \"收件人不能为空\")\n+    @Email(message = \"邮箱格式错误\")\n     private String to;\n \n     @NotBlank(message = \"主题不能为空\")",
    "output": "Merge pull request #193 from taoweicn/patch-1\n\nAdd email address validation"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/params/MailParam.java b/src/main/java/run/halo/app/model/params/MailParam.java\n--- a/src/main/java/run/halo/app/model/params/MailParam.java\n+++ b/src/main/java/run/halo/app/model/params/MailParam.java\n@@ -2,6 +2,7 @@\n \n import lombok.Data;\n \n+import javax.validation.constraints.Email;\n import javax.validation.constraints.NotBlank;\n \n /**\n@@ -14,6 +15,7 @@\n public class MailParam {\n \n     @NotBlank(message = \"收件人不能为空\")\n+    @Email(message = \"邮箱格式错误\")\n     private String to;\n \n     @NotBlank(message = \"主题不能为空\")",
    "output": "Add email address validation"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n@@ -19,11 +19,7 @@\n import run.halo.app.event.post.PostVisitEvent;\n import run.halo.app.model.dto.CategoryDTO;\n import run.halo.app.model.dto.TagDTO;\n-import run.halo.app.model.entity.Category;\n-import run.halo.app.model.entity.Post;\n-import run.halo.app.model.entity.PostCategory;\n-import run.halo.app.model.entity.PostTag;\n-import run.halo.app.model.entity.Tag;\n+import run.halo.app.model.entity.*;\n import run.halo.app.model.enums.LogType;\n import run.halo.app.model.enums.PostStatus;\n import run.halo.app.model.params.PostQuery;\n@@ -32,33 +28,13 @@\n import run.halo.app.model.vo.PostDetailVO;\n import run.halo.app.model.vo.PostListVO;\n import run.halo.app.repository.PostRepository;\n-import run.halo.app.service.CategoryService;\n-import run.halo.app.service.OptionService;\n-import run.halo.app.service.PostCategoryService;\n-import run.halo.app.service.PostCommentService;\n-import run.halo.app.service.PostService;\n-import run.halo.app.service.PostTagService;\n-import run.halo.app.service.TagService;\n-import run.halo.app.utils.DateUtils;\n-import run.halo.app.utils.HaloUtils;\n-import run.halo.app.utils.MarkdownUtils;\n-import run.halo.app.utils.ServiceUtils;\n-import run.halo.app.utils.SlugUtils;\n+import run.halo.app.service.*;\n+import run.halo.app.utils.*;\n \n import javax.persistence.criteria.Predicate;\n import javax.persistence.criteria.Root;\n import javax.persistence.criteria.Subquery;\n-import java.util.Calendar;\n-import java.util.Collections;\n-import java.util.Date;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Objects;\n-import java.util.Optional;\n-import java.util.Set;\n+import java.util.*;\n import java.util.function.Supplier;\n import java.util.stream.Collectors;\n \n@@ -347,7 +323,6 @@ public PostDetailVO importMarkdown(String markdown, String filename) {\n                             if (null == tag) {\n                                 tag = new Tag();\n                                 tag.setName(ele);\n-                                tag.setSlugName(SlugUtils.slugify(ele));\n                                 String slugName = SlugUtils.slugify(ele);\n                                 tag.setSlugName(HaloUtils.initializeUrlIfBlank(slugName));\n                                 tag = tagService.create(tag);\n@@ -359,7 +334,8 @@ public PostDetailVO importMarkdown(String markdown, String filename) {\n                             if (null == category) {\n                                 category = new Category();\n                                 category.setName(ele);\n-                                category.setSlugName(SlugUtils.slugify(ele));\n+                                String slugName = SlugUtils.slugify(ele);\n+                                category.setSlugName(HaloUtils.initializeUrlIfBlank(slugName));\n                                 category.setDescription(ele);\n                                 category = categoryService.create(category);\n                             }",
    "output": "Fixed import markdown cased bugs."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/ContentCategoryController.java b/src/main/java/run/halo/app/controller/content/ContentCategoryController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentCategoryController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentCategoryController.java\n@@ -52,7 +52,8 @@ public ContentCategoryController(CategoryService categoryService,\n      * @return template path: themes/{theme}/categories.ftl\n      */\n     @GetMapping\n-    public String categories() {\n+    public String categories(Model model) {\n+        model.addAttribute(\"is_categories\", true);\n         return themeService.render(\"categories\");\n     }\n \n@@ -89,7 +90,7 @@ public String categories(Model model,\n         Page<Post> posts = postCategoryService.pagePostBy(category.getId(), pageable);\n         final int[] rainbow = PageUtil.rainbow(page, posts.getTotalPages(), 3);\n \n-        model.addAttribute(\"is_categories\", true);\n+        model.addAttribute(\"is_category\", true);\n         model.addAttribute(\"posts\", posts);\n         model.addAttribute(\"rainbow\", rainbow);\n         model.addAttribute(\"category\", category);\n\ndiff --git a/src/main/java/run/halo/app/controller/content/ContentSheetController.java b/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n@@ -60,7 +60,6 @@ public String links() {\n      */\n     @GetMapping(value = \"/s/{url}\")\n     public String sheet(@PathVariable(value = \"url\") String url,\n-                        @RequestParam(value = \"cp\", defaultValue = \"1\") Integer cp,\n                         Model model) {\n         Sheet sheet = sheetService.getBy(PostStatus.PUBLISHED, url);\n \n\ndiff --git a/src/main/java/run/halo/app/controller/content/ContentTagController.java b/src/main/java/run/halo/app/controller/content/ContentTagController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentTagController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentTagController.java\n@@ -56,7 +56,8 @@ public ContentTagController(TagService tagService,\n      * @return template path: themes/{theme}/tags.ftl\n      */\n     @GetMapping\n-    public String tags() {\n+    public String tags(Model model) {\n+        model.addAttribute(\"is_tags\", true);\n         return themeService.render(\"tags\");\n     }\n \n@@ -93,7 +94,7 @@ public String tags(Model model,\n         Page<PostListVO> posts = postService.convertToListVo(postPage);\n         final int[] rainbow = PageUtil.rainbow(page, posts.getTotalPages(), 3);\n \n-        model.addAttribute(\"is_tags\", true);\n+        model.addAttribute(\"is_tag\", true);\n         model.addAttribute(\"posts\", posts);\n         model.addAttribute(\"rainbow\", rainbow);\n         model.addAttribute(\"tag\", tag);",
    "output": "Fixed Controller model."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/properties/OtherProperties.java b/src/main/java/run/halo/app/model/properties/OtherProperties.java\n--- a/src/main/java/run/halo/app/model/properties/OtherProperties.java\n+++ b/src/main/java/run/halo/app/model/properties/OtherProperties.java\n@@ -12,7 +12,9 @@ public enum OtherProperties implements PropertyEnum {\n \n     API_ACCESS_KEY(\"api_access_key\", String.class, \"\"),\n \n-    STATISTICS_CODE(\"statistics_code\", String.class, \"\"),\n+    CUSTOM_HEAD(\"blog_custom_head\",String.class,\"\"),\n+\n+    STATISTICS_CODE(\"blog_statistics_code\", String.class, \"\"),\n \n     /**\n      * 是否禁止爬虫",
    "output": "Support custom head #189"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java b/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n--- a/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n+++ b/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n@@ -12,6 +12,7 @@\n import run.halo.app.event.theme.ThemeActivatedEvent;\n import run.halo.app.event.user.UserUpdatedEvent;\n import run.halo.app.handler.theme.config.support.ThemeProperty;\n+import run.halo.app.model.support.HaloConst;\n import run.halo.app.service.OptionService;\n import run.halo.app.service.ThemeService;\n import run.halo.app.service.ThemeSettingService;\n@@ -90,6 +91,7 @@ private void loadUserConfig() throws TemplateModelException {\n     private void loadOptionsConfig() throws TemplateModelException {\n         configuration.setSharedVariable(\"options\", optionService.listOptions());\n         configuration.setSharedVariable(\"context\", optionService.getBlogBaseUrl());\n+        configuration.setSharedVariable(\"version\", HaloConst.HALO_VERSION);\n         log.debug(\"Loaded options\");\n     }\n \n\ndiff --git a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n@@ -330,6 +330,7 @@ public PostDetailVO importMarkdown(String markdown, String filename) {\n                                 tag = tagService.create(tag);\n                             }\n                             tagIds.add(tag.getId());\n+                            break;\n                         case \"categories\":\n                             Category category = categoryService.getByName(ele);\n                             if (null == category) {",
    "output": "Merge pull request #1 from halo-dev/dev\n\nDev"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java b/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n--- a/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n+++ b/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n@@ -12,6 +12,7 @@\n import run.halo.app.event.theme.ThemeActivatedEvent;\n import run.halo.app.event.user.UserUpdatedEvent;\n import run.halo.app.handler.theme.config.support.ThemeProperty;\n+import run.halo.app.model.support.HaloConst;\n import run.halo.app.service.OptionService;\n import run.halo.app.service.ThemeService;\n import run.halo.app.service.ThemeSettingService;\n@@ -90,6 +91,7 @@ private void loadUserConfig() throws TemplateModelException {\n     private void loadOptionsConfig() throws TemplateModelException {\n         configuration.setSharedVariable(\"options\", optionService.listOptions());\n         configuration.setSharedVariable(\"context\", optionService.getBlogBaseUrl());\n+        configuration.setSharedVariable(\"version\", HaloConst.HALO_VERSION);\n         log.debug(\"Loaded options\");\n     }\n ",
    "output": "Update anatole theme."
  },
  {
    "input": "diff --git a/src/test/java/run/halo/app/utils/HaloUtilsTest.java b/src/test/java/run/halo/app/utils/HaloUtilsTest.java\n--- a/src/test/java/run/halo/app/utils/HaloUtilsTest.java\n+++ b/src/test/java/run/halo/app/utils/HaloUtilsTest.java\n@@ -116,10 +116,6 @@ public void desensitizeSuccessTest() {\n \n         desensitization = HaloUtils.desensitize(plainText, -1, -1);\n         assertThat(desensitization, equalTo(\"********\"));\n-\n-        plainText = \" \";\n-        desensitization = HaloUtils.desensitize(plainText, 1, 1);\n-        assertThat(desensitization, equalTo(\"********\"));\n     }\n \n     @Test(expected = IllegalArgumentException.class)",
    "output": "Fix test error of HaloUtilsTest"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/UserServiceImpl.java b/src/main/java/run/halo/app/service/impl/UserServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/UserServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/UserServiceImpl.java\n@@ -124,7 +124,7 @@ public User updatePassword(String oldPassword, String newPassword, Integer userI\n         User updatedUser = update(user);\n \n         // Log it\n-        eventPublisher.publishEvent(new LogEvent(this, updatedUser.getId().toString(), LogType.PASSWORD_UPDATED, oldPassword));\n+        eventPublisher.publishEvent(new LogEvent(this, updatedUser.getId().toString(), LogType.PASSWORD_UPDATED, HaloUtils.desensitize(oldPassword, 2, 1)));\n \n         return updatedUser;\n     }\n\ndiff --git a/src/main/java/run/halo/app/utils/HaloUtils.java b/src/main/java/run/halo/app/utils/HaloUtils.java\n--- a/src/main/java/run/halo/app/utils/HaloUtils.java\n+++ b/src/main/java/run/halo/app/utils/HaloUtils.java\n@@ -21,6 +21,44 @@\n @Slf4j\n public class HaloUtils {\n \n+    /**\n+     * Desensitizes the plain text.\n+     *\n+     * @param plainText plain text must not be null\n+     * @param leftSize  left size\n+     * @param rightSize right size\n+     * @return desensitization\n+     */\n+    public static String desensitize(@NonNull String plainText, int leftSize, int rightSize) {\n+        Assert.hasText(plainText, \"Plain text must not be blank\");\n+\n+        if (leftSize < 0) {\n+            leftSize = 0;\n+        }\n+\n+        if (leftSize > plainText.length()) {\n+            leftSize = plainText.length();\n+        }\n+\n+        if (rightSize < 0) {\n+            rightSize = 0;\n+        }\n+\n+        if (rightSize > plainText.length()) {\n+            rightSize = plainText.length();\n+        }\n+\n+        if (plainText.length() < leftSize + rightSize) {\n+            rightSize = plainText.length() - leftSize;\n+        }\n+\n+        int remainSize = plainText.length() - rightSize - leftSize;\n+\n+        String left = StringUtils.left(plainText, leftSize);\n+        String right = StringUtils.right(plainText, rightSize);\n+        return StringUtils.rightPad(left, remainSize + leftSize, '*') + right;\n+    }\n+\n     /**\n      * Changes file separator to url separator.\n      *\n\ndiff --git a/src/test/java/run/halo/app/utils/HaloUtilsTest.java b/src/test/java/run/halo/app/utils/HaloUtilsTest.java\n--- a/src/test/java/run/halo/app/utils/HaloUtilsTest.java\n+++ b/src/test/java/run/halo/app/utils/HaloUtilsTest.java\n@@ -1,5 +1,6 @@\n package run.halo.app.utils;\n \n+import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.lang3.RandomUtils;\n import org.junit.Test;\n \n@@ -14,6 +15,7 @@\n  * @author johnniang\n  * @date 3/29/19\n  */\n+@Slf4j\n public class HaloUtilsTest {\n \n     @Test\n@@ -92,4 +94,37 @@ public void pluralizeTest() {\n     public void pluralizeLabelExceptionTest() {\n         HaloUtils.pluralize(1, null, null);\n     }\n+\n+    @Test\n+    public void desensitizeSuccessTest() {\n+        String plainText = \"12345678\";\n+\n+        String desensitization = HaloUtils.desensitize(plainText, 1, 1);\n+        assertThat(desensitization, equalTo(\"1******8\"));\n+\n+        desensitization = HaloUtils.desensitize(plainText, 2, 3);\n+        assertThat(desensitization, equalTo(\"12***678\"));\n+\n+        desensitization = HaloUtils.desensitize(plainText, 2, 6);\n+        assertThat(desensitization, equalTo(\"12345678\"));\n+\n+        desensitization = HaloUtils.desensitize(plainText, 2, 7);\n+        assertThat(desensitization, equalTo(\"12345678\"));\n+\n+        desensitization = HaloUtils.desensitize(plainText, 0, 0);\n+        assertThat(desensitization, equalTo(\"********\"));\n+\n+        desensitization = HaloUtils.desensitize(plainText, -1, -1);\n+        assertThat(desensitization, equalTo(\"********\"));\n+\n+        plainText = \" \";\n+        desensitization = HaloUtils.desensitize(plainText, 1, 1);\n+        assertThat(desensitization, equalTo(\"********\"));\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void desensitizeFailureTest() {\n+        String plainText = \" \";\n+        HaloUtils.desensitize(plainText, 1, 1);\n+    }\n }",
    "output": "Fix #185 Desensitize the old password while logging"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/base/ControllerExceptionHandler.java b/src/main/java/run/halo/app/controller/base/ControllerExceptionHandler.java\n--- a/src/main/java/run/halo/app/controller/base/ControllerExceptionHandler.java\n+++ b/src/main/java/run/halo/app/controller/base/ControllerExceptionHandler.java\n@@ -27,7 +27,7 @@\n  *\n  * @author johnniang\n  */\n-@RestControllerAdvice\n+@RestControllerAdvice({\"run.halo.app.controller.admin.api\", \"run.halo.app.controller.content.api\"})\n @Slf4j\n public class ControllerExceptionHandler {\n \n\ndiff --git a/src/main/java/run/halo/app/controller/core/CommonController.java b/src/main/java/run/halo/app/controller/core/CommonController.java\n--- a/src/main/java/run/halo/app/controller/core/CommonController.java\n+++ b/src/main/java/run/halo/app/controller/core/CommonController.java\n@@ -53,11 +53,11 @@ public String handleError(HttpServletRequest request) {\n             if (StringUtils.startsWithIgnoreCase(throwable.getMessage(), \"Could not resolve view with name '\")) {\n                 // TODO May cause unknown-reason problem\n                 // if Ftl was not found then redirect to /404\n-                return \"redirect:/404\";\n+                return contentNotFround();\n             }\n         }\n \n-        return statusCode == 500 ? \"redirect:/500\" : \"redirect:/404\";\n+        return statusCode == 500 ? contentInternalError() : contentNotFround();\n     }\n \n     /**",
    "output": "Fix #186"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/freemarker/tag/PhotoTagDirective.java b/src/main/java/run/halo/app/model/freemarker/tag/PhotoTagDirective.java\n--- a/src/main/java/run/halo/app/model/freemarker/tag/PhotoTagDirective.java\n+++ b/src/main/java/run/halo/app/model/freemarker/tag/PhotoTagDirective.java\n@@ -39,7 +39,7 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars, Templ\n                     env.setVariable(\"photos\", builder.build().wrap(photoService.listAll()));\n                     break;\n                 case \"listTeams\":\n-                    env.setVariable(\"teams\", builder.build().wrap(photoService.listDtos(Sort.by(DESC, \"createTime\"))));\n+                    env.setVariable(\"teams\", builder.build().wrap(photoService.listTeamVos(Sort.by(DESC, \"createTime\"))));\n                     break;\n                 case \"listByTeam\":\n                     String team = params.get(\"team\").toString();",
    "output": "Change listDtos method to listTeamVos."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/freemarker/tag/CommentTagDirective.java b/src/main/java/run/halo/app/model/freemarker/tag/CommentTagDirective.java\n--- a/src/main/java/run/halo/app/model/freemarker/tag/CommentTagDirective.java\n+++ b/src/main/java/run/halo/app/model/freemarker/tag/CommentTagDirective.java\n@@ -34,7 +34,7 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars, Templ\n             switch (method) {\n                 case \"latest\":\n                     int top = Integer.parseInt(params.get(\"top\").toString());\n-                    env.setVariable(\"categories\", builder.build().wrap(postCommentService.pageLatest(top)));\n+                    env.setVariable(\"comments\", builder.build().wrap(postCommentService.pageLatest(top)));\n                     break;\n                 case \"count\":\n                     env.setVariable(\"count\", builder.build().wrap(postCommentService.count()));",
    "output": "Fixed commentTag variable."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/Application.java b/src/main/java/run/halo/app/Application.java\n--- a/src/main/java/run/halo/app/Application.java\n+++ b/src/main/java/run/halo/app/Application.java\n@@ -2,6 +2,8 @@\n \n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.boot.builder.SpringApplicationBuilder;\n+import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;\n import org.springframework.data.jpa.repository.config.EnableJpaAuditing;\n import org.springframework.data.jpa.repository.config.EnableJpaRepositories;\n import org.springframework.scheduling.annotation.EnableAsync;\n@@ -21,7 +23,7 @@\n @EnableScheduling\n @EnableAsync\n @EnableJpaRepositories(basePackages = \"run.halo.app.repository\", repositoryBaseClass = BaseRepositoryImpl.class)\n-public class Application {\n+public class Application extends SpringBootServletInitializer {\n \n     public static void main(String[] args) {\n         // Customize the spring config location\n@@ -30,4 +32,10 @@ public static void main(String[] args) {\n         // Run application\n         SpringApplication.run(Application.class, args);\n     }\n+\n+    @Override\n+    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {\n+        System.setProperty(\"spring.config.additional-location\", \"file:${user.home}/.halo/,file:${user.home}/halo-dev/\");\n+        return application.sources(Application.class);\n+    }\n }",
    "output": "Support war package."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/dto/MenuDTO.java b/src/main/java/run/halo/app/model/dto/MenuDTO.java\n--- a/src/main/java/run/halo/app/model/dto/MenuDTO.java\n+++ b/src/main/java/run/halo/app/model/dto/MenuDTO.java\n@@ -1,6 +1,8 @@\n package run.halo.app.model.dto;\n \n import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n import run.halo.app.model.dto.base.OutputConverter;\n import run.halo.app.model.entity.Menu;\n \n@@ -11,6 +13,8 @@\n  * @date 4/3/19\n  */\n @Data\n+@EqualsAndHashCode\n+@ToString\n public class MenuDTO implements OutputConverter<MenuDTO, Menu> {\n \n     private Integer id;\n\ndiff --git a/src/main/java/run/halo/app/model/entity/PostCategory.java b/src/main/java/run/halo/app/model/entity/PostCategory.java\n--- a/src/main/java/run/halo/app/model/entity/PostCategory.java\n+++ b/src/main/java/run/halo/app/model/entity/PostCategory.java\n@@ -1,6 +1,7 @@\n package run.halo.app.model.entity;\n \n import lombok.Data;\n+import lombok.EqualsAndHashCode;\n import lombok.ToString;\n \n import javax.persistence.*;\n\ndiff --git a/src/main/java/run/halo/app/model/entity/PostTag.java b/src/main/java/run/halo/app/model/entity/PostTag.java\n--- a/src/main/java/run/halo/app/model/entity/PostTag.java\n+++ b/src/main/java/run/halo/app/model/entity/PostTag.java\n@@ -1,6 +1,7 @@\n package run.halo.app.model.entity;\n \n import lombok.Data;\n+import lombok.EqualsAndHashCode;\n import lombok.ToString;\n \n import javax.persistence.*;\n\ndiff --git a/src/main/java/run/halo/app/model/vo/MenuVO.java b/src/main/java/run/halo/app/model/vo/MenuVO.java\n--- a/src/main/java/run/halo/app/model/vo/MenuVO.java\n+++ b/src/main/java/run/halo/app/model/vo/MenuVO.java\n@@ -1,6 +1,8 @@\n package run.halo.app.model.vo;\n \n import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n import run.halo.app.model.dto.MenuDTO;\n \n import java.util.List;\n@@ -10,6 +12,8 @@\n  * @date : 2019-04-07\n  */\n @Data\n+@EqualsAndHashCode(callSuper = true)\n+@ToString(callSuper = true)\n public class MenuVO extends MenuDTO {\n \n     private List<MenuVO> children;",
    "output": "Resolve some lombok warnings"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/entity/BasePost.java b/src/main/java/run/halo/app/model/entity/BasePost.java\n--- a/src/main/java/run/halo/app/model/entity/BasePost.java\n+++ b/src/main/java/run/halo/app/model/entity/BasePost.java\n@@ -17,7 +17,7 @@\n  */\n @Data\n @Entity(name = \"BasePost\")\n-@Table(name = \"posts\", indexes = @Index(columnList = \"url\"))\n+@Table(name = \"posts\")\n @DiscriminatorColumn(name = \"type\", discriminatorType = DiscriminatorType.INTEGER, columnDefinition = \"int default 0\")\n @ToString(callSuper = true)\n @EqualsAndHashCode(callSuper = true)\n\ndiff --git a/src/main/java/run/halo/app/model/entity/Tag.java b/src/main/java/run/halo/app/model/entity/Tag.java\n--- a/src/main/java/run/halo/app/model/entity/Tag.java\n+++ b/src/main/java/run/halo/app/model/entity/Tag.java\n@@ -14,7 +14,7 @@\n  */\n @Data\n @Entity\n-@Table(name = \"tags\", indexes = @Index(columnList = \"slug_name\"))\n+@Table(name = \"tags\")\n @ToString\n @EqualsAndHashCode(callSuper = true)\n public class Tag extends BaseEntity {\n\ndiff --git a/src/main/java/run/halo/app/model/entity/ThemeSetting.java b/src/main/java/run/halo/app/model/entity/ThemeSetting.java\n--- a/src/main/java/run/halo/app/model/entity/ThemeSetting.java\n+++ b/src/main/java/run/halo/app/model/entity/ThemeSetting.java\n@@ -14,7 +14,7 @@\n  */\n @Data\n @Entity\n-@Table(name = \"theme_settings\", indexes = {@Index(columnList = \"setting_key\")})\n+@Table(name = \"theme_settings\")\n @ToString(callSuper = true)\n @EqualsAndHashCode(callSuper = true)\n public class ThemeSetting extends BaseEntity {",
    "output": "Remove database index support #178"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/SwaggerConfiguration.java b/src/main/java/run/halo/app/config/SwaggerConfiguration.java\n--- a/src/main/java/run/halo/app/config/SwaggerConfiguration.java\n+++ b/src/main/java/run/halo/app/config/SwaggerConfiguration.java\n@@ -69,8 +69,8 @@ public Docket haloDefaultApi() {\n         return buildApiDocket(\"run.halo.app.content.api\",\n                 \"run.halo.app.controller.content.api\",\n                 \"/api/content/**\")\n-                .securitySchemes(portalApiKeys())\n-                .securityContexts(portalSecurityContext())\n+                .securitySchemes(contentApiKeys())\n+                .securityContexts(contentSecurityContext())\n                 .enable(!haloProperties.isDocDisabled());\n     }\n \n@@ -137,14 +137,14 @@ private List<SecurityContext> adminSecurityContext() {\n         );\n     }\n \n-    private List<ApiKey> portalApiKeys() {\n+    private List<ApiKey> contentApiKeys() {\n         return Arrays.asList(\n-                new ApiKey(\"Token from header\", ApiAuthenticationFilter.API_TOKEN_HEADER_NAME, In.HEADER.name()),\n-                new ApiKey(\"Token from query\", ApiAuthenticationFilter.API_TOKEN_QUERY_NAME, In.QUERY.name())\n+                new ApiKey(\"Access key from header\", ApiAuthenticationFilter.API_ACCESS_KEY_HEADER_NAME, In.HEADER.name()),\n+                new ApiKey(\"Access key from query\", ApiAuthenticationFilter.API_ACCESS_KEY_QUERY_NAME, In.QUERY.name())\n         );\n     }\n \n-    private List<SecurityContext> portalSecurityContext() {\n+    private List<SecurityContext> contentSecurityContext() {\n         return Collections.singletonList(\n                 SecurityContext.builder()\n                         .securityReferences(defaultAuth())\n\ndiff --git a/src/main/java/run/halo/app/model/properties/OtherProperties.java b/src/main/java/run/halo/app/model/properties/OtherProperties.java\n--- a/src/main/java/run/halo/app/model/properties/OtherProperties.java\n+++ b/src/main/java/run/halo/app/model/properties/OtherProperties.java\n@@ -10,7 +10,7 @@ public enum OtherProperties implements PropertyEnum {\n \n     API_ENABLED(\"api_enabled\", Boolean.class, \"false\"),\n \n-    API_TOKEN(\"api_token\", String.class, \"\"),\n+    API_ACCESS_KEY(\"api_access_key\", String.class, \"\"),\n \n     STATISTICS_CODE(\"statistics_code\", String.class, \"\"),\n \n\ndiff --git a/src/main/java/run/halo/app/security/filter/ApiAuthenticationFilter.java b/src/main/java/run/halo/app/security/filter/ApiAuthenticationFilter.java\n--- a/src/main/java/run/halo/app/security/filter/ApiAuthenticationFilter.java\n+++ b/src/main/java/run/halo/app/security/filter/ApiAuthenticationFilter.java\n@@ -27,9 +27,9 @@\n @Slf4j\n public class ApiAuthenticationFilter extends AbstractAuthenticationFilter {\n \n-    public final static String API_TOKEN_HEADER_NAME = \"API-\" + HttpHeaders.AUTHORIZATION;\n+    public final static String API_ACCESS_KEY_HEADER_NAME = \"API-\" + HttpHeaders.AUTHORIZATION;\n \n-    public final static String API_TOKEN_QUERY_NAME = \"api_token\";\n+    public final static String API_ACCESS_KEY_QUERY_NAME = \"api_access_key\";\n \n     private final OptionService optionService;\n \n@@ -55,27 +55,27 @@ protected void doAuthenticate(HttpServletRequest request, HttpServletResponse re\n             return;\n         }\n \n-        // Get token\n-        String token = getTokenFromRequest(request);\n+        // Get access key\n+        String accessKey = getTokenFromRequest(request);\n \n-        if (StringUtils.isBlank(token)) {\n-            // If the token is missing\n-            getFailureHandler().onFailure(request, response, new AuthenticationException(\"Missing API token\"));\n+        if (StringUtils.isBlank(accessKey)) {\n+            // If the access key is missing\n+            getFailureHandler().onFailure(request, response, new AuthenticationException(\"Missing API access key\"));\n             return;\n         }\n \n-        // Get token from option\n-        Optional<String> optionalToken = optionService.getByProperty(OtherProperties.API_TOKEN, String.class);\n+        // Get access key from option\n+        Optional<String> optionalAccessKey = optionService.getByProperty(OtherProperties.API_ACCESS_KEY, String.class);\n \n-        if (!optionalToken.isPresent()) {\n-            // If the token is not set\n-            getFailureHandler().onFailure(request, response, new AuthenticationException(\"API Token hasn't been set by blogger\"));\n+        if (!optionalAccessKey.isPresent()) {\n+            // If the access key is not set\n+            getFailureHandler().onFailure(request, response, new AuthenticationException(\"API access key hasn't been set by blogger\"));\n             return;\n         }\n \n-        if (!StringUtils.equals(token, optionalToken.get())) {\n-            // If the token is mismatch\n-            getFailureHandler().onFailure(request, response, new AuthenticationException(\"Token is mismatch\"));\n+        if (!StringUtils.equals(accessKey, optionalAccessKey.get())) {\n+            // If the access key is mismatch\n+            getFailureHandler().onFailure(request, response, new AuthenticationException(\"API access key is mismatch\"));\n             return;\n         }\n \n@@ -103,17 +103,17 @@ protected String getTokenFromRequest(@NonNull HttpServletRequest request) {\n         Assert.notNull(request, \"Http servlet request must not be null\");\n \n         // Get from header\n-        String token = request.getHeader(API_TOKEN_HEADER_NAME);\n+        String accessKey = request.getHeader(API_ACCESS_KEY_HEADER_NAME);\n \n         // Get from param\n-        if (StringUtils.isBlank(token)) {\n-            token = request.getParameter(API_TOKEN_QUERY_NAME);\n+        if (StringUtils.isBlank(accessKey)) {\n+            accessKey = request.getParameter(API_ACCESS_KEY_QUERY_NAME);\n \n-            log.debug(\"Got token from parameter: [{}: {}]\", API_TOKEN_QUERY_NAME, token);\n+            log.debug(\"Got access key from parameter: [{}: {}]\", API_ACCESS_KEY_QUERY_NAME, accessKey);\n         } else {\n-            log.debug(\"Got token from header: [{}: {}]\", API_TOKEN_HEADER_NAME, token);\n+            log.debug(\"Got access key from header: [{}: {}]\", API_ACCESS_KEY_HEADER_NAME, accessKey);\n         }\n \n-        return token;\n+        return accessKey;\n     }\n }",
    "output": "Change api_token to api_access_key"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java b/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n@@ -429,6 +429,11 @@ public Page<CommentWithHasChildrenVO> pageTopCommentsBy(Integer targetId, Commen\n         // Get all comments\n         Page<COMMENT> topCommentPage = baseCommentRepository.findAllByPostIdAndStatusAndParentId(targetId, status, 0L, pageable);\n \n+        if (topCommentPage.isEmpty()) {\n+            // If the comments is empty\n+            return ServiceUtils.buildEmptyPageImpl(topCommentPage);\n+        }\n+\n         // Get top comment ids\n         Set<Long> topCommentIds = ServiceUtils.fetchProperty(topCommentPage.getContent(), BaseComment::getId);\n \n\ndiff --git a/src/main/java/run/halo/app/utils/ServiceUtils.java b/src/main/java/run/halo/app/utils/ServiceUtils.java\n--- a/src/main/java/run/halo/app/utils/ServiceUtils.java\n+++ b/src/main/java/run/halo/app/utils/ServiceUtils.java\n@@ -1,8 +1,6 @@\n package run.halo.app.utils;\n \n-import org.springframework.data.domain.PageRequest;\n-import org.springframework.data.domain.Pageable;\n-import org.springframework.data.domain.Sort;\n+import org.springframework.data.domain.*;\n import org.springframework.lang.NonNull;\n import org.springframework.lang.Nullable;\n import org.springframework.util.Assert;\n@@ -136,6 +134,21 @@ public static Pageable buildLatestPageable(int top) {\n         return buildLatestPageable(top, \"createTime\");\n     }\n \n+    /**\n+     * Build empty page result.\n+     *\n+     * @param page page info must not be null\n+     * @param <T>  target page result type\n+     * @param <S>  source page result type\n+     * @return empty page result\n+     */\n+    @NonNull\n+    public static <T, S> Page<T> buildEmptyPageImpl(@NonNull Page<S> page) {\n+        Assert.notNull(page, \"Page result must not be null\");\n+\n+        return new PageImpl<>(Collections.emptyList(), page.getPageable(), page.getTotalElements());\n+    }\n+\n     /**\n      * Builds latest page request.\n      *",
    "output": "Fix issue#177"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/security/filter/AbstractAuthenticationFilter.java b/src/main/java/run/halo/app/security/filter/AbstractAuthenticationFilter.java\n--- a/src/main/java/run/halo/app/security/filter/AbstractAuthenticationFilter.java\n+++ b/src/main/java/run/halo/app/security/filter/AbstractAuthenticationFilter.java\n@@ -137,7 +137,7 @@ protected void doFilterInternal(HttpServletRequest request, HttpServletResponse\n \n         if (!isInstalled) {\n             // If not installed\n-            getFailureHandler().onFailure(request, response, new NotInstallException(\"The blog has not been initialized yet!\"));\n+            getFailureHandler().onFailure(request, response, new NotInstallException(\"当前博客还没有初始化\"));\n             return;\n         }\n ",
    "output": "Translate some exception message."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/MainController.java b/src/main/java/run/halo/app/controller/content/MainController.java\n--- a/src/main/java/run/halo/app/controller/content/MainController.java\n+++ b/src/main/java/run/halo/app/controller/content/MainController.java\n@@ -50,7 +50,7 @@ public String version() {\n \n     @GetMapping(\"/avatar\")\n     public void avatar(HttpServletResponse response) throws IOException {\n-        User user = userService.getCurrentUser().orElseThrow(() -> new ServiceException(\"Can not find blog owner\"));\n+        User user = userService.getCurrentUser().orElseThrow(() -> new ServiceException(\"找不到博主信息\"));\n         if (StringUtils.isNotEmpty(user.getAvatar())) {\n             response.sendRedirect(user.getAvatar());\n         }\n\ndiff --git a/src/main/java/run/halo/app/event/comment/CommentEventListener.java b/src/main/java/run/halo/app/event/comment/CommentEventListener.java\n--- a/src/main/java/run/halo/app/event/comment/CommentEventListener.java\n+++ b/src/main/java/run/halo/app/event/comment/CommentEventListener.java\n@@ -65,7 +65,7 @@ public void handleCommentNewEvent(CommentNewEvent newEvent) {\n             return;\n         }\n \n-        User user = userService.getCurrentUser().orElseThrow(() -> new ServiceException(\"Can not find blog owner\"));\n+        User user = userService.getCurrentUser().orElseThrow(() -> new ServiceException(\"找不到博主信息\"));\n \n \n         Map<String, Object> data = new HashMap<>();\n\ndiff --git a/src/main/java/run/halo/app/security/filter/AdminAuthenticationFilter.java b/src/main/java/run/halo/app/security/filter/AdminAuthenticationFilter.java\n--- a/src/main/java/run/halo/app/security/filter/AdminAuthenticationFilter.java\n+++ b/src/main/java/run/halo/app/security/filter/AdminAuthenticationFilter.java\n@@ -98,7 +98,7 @@ protected void doAuthenticate(HttpServletRequest request, HttpServletResponse re\n         Optional<Integer> optionalUserId = cacheStore.getAny(SecurityUtils.buildTokenAccessKey(token), Integer.class);\n \n         if (!optionalUserId.isPresent()) {\n-            getFailureHandler().onFailure(request, response, new AuthenticationException(\"The token has been expired or not exist\").setErrorData(token));\n+            getFailureHandler().onFailure(request, response, new AuthenticationException(\"Token 已过期或不存在\").setErrorData(token));\n             return;\n         }\n \n\ndiff --git a/src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java b/src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java\n@@ -77,7 +77,7 @@ public long countByStatus(PostStatus status) {\n     public POST getByUrl(String url) {\n         Assert.hasText(url, \"Url must not be blank\");\n \n-        return basePostRepository.getByUrl(url).orElseThrow(() -> new NotFoundException(\"The post does not exist\").setErrorData(url));\n+        return basePostRepository.getByUrl(url).orElseThrow(() -> new NotFoundException(\"该文章不存在\").setErrorData(url));\n     }\n \n     @Override\n@@ -87,7 +87,7 @@ public POST getBy(PostStatus status, String url) {\n \n         Optional<POST> postOptional = basePostRepository.getByUrlAndStatus(url, status);\n \n-        return postOptional.orElseThrow(() -> new NotFoundException(\"The post with status \" + status + \" and url \" + url + \"was not existed\").setErrorData(url));\n+        return postOptional.orElseThrow(() -> new NotFoundException(\"The post with status \" + status + \" and url \" + url + \" was not existed\").setErrorData(url));\n     }\n \n     @Override\n\ndiff --git a/src/main/java/run/halo/app/service/impl/CategoryServiceImpl.java b/src/main/java/run/halo/app/service/impl/CategoryServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/CategoryServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/CategoryServiceImpl.java\n@@ -152,7 +152,7 @@ private CategoryVO createTopLevelCategory() {\n      */\n     @Override\n     public Category getBySlugName(String slugName) {\n-        return categoryRepository.getBySlugName(slugName).orElseThrow(() -> new NotFoundException(\"The Category does not exist\").setErrorData(slugName));\n+        return categoryRepository.getBySlugName(slugName).orElseThrow(() -> new NotFoundException(\"该分类已存在\").setErrorData(slugName));\n     }\n \n     @Override\n\ndiff --git a/src/main/java/run/halo/app/service/impl/TagServiceImpl.java b/src/main/java/run/halo/app/service/impl/TagServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/TagServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/TagServiceImpl.java\n@@ -57,7 +57,7 @@ public Tag create(Tag tag) {\n      */\n     @Override\n     public Tag getBySlugNameOfNonNull(String slugName) {\n-        return tagRepository.getBySlugName(slugName).orElseThrow(() -> new NotFoundException(\"The tag does not exist\").setErrorData(slugName));\n+        return tagRepository.getBySlugName(slugName).orElseThrow(() -> new NotFoundException(\"该标签已存在\").setErrorData(slugName));\n     }\n \n \n\ndiff --git a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n@@ -223,7 +223,7 @@ public String getTemplateContent(String absolutePath) {\n         try {\n             return new String(Files.readAllBytes(path), StandardCharsets.UTF_8);\n         } catch (IOException e) {\n-            throw new ServiceException(\"Failed to read file \" + absolutePath, e);\n+            throw new ServiceException(\"读取模板内容失败 \" + absolutePath, e);\n         }\n     }\n \n@@ -237,7 +237,7 @@ public void saveTemplateContent(String absolutePath, String content) {\n         try {\n             Files.write(path, content.getBytes(StandardCharsets.UTF_8));\n         } catch (IOException e) {\n-            throw new ServiceException(\"Failed to write file \" + absolutePath, e);\n+            throw new ServiceException(\"保存模板内容失败 \" + absolutePath, e);\n         }\n     }\n \n@@ -418,7 +418,7 @@ public ThemeProperty add(Path themeTmpPath) throws IOException {\n                 .anyMatch(themeProperty -> themeProperty.getId().equalsIgnoreCase(tmpThemeProperty.getId()));\n \n         if (isExist) {\n-            throw new AlreadyExistsException(\"The theme with id \" + tmpThemeProperty.getId() + \" has already existed\");\n+            throw new AlreadyExistsException(\"当前安装的主题已存在\");\n         }\n \n         // Copy the temporary path to current theme folder\n@@ -722,7 +722,7 @@ private Optional<Path> getThemePropertyPathOfNullable(@NonNull Path themePath) {\n      */\n     @NonNull\n     private Path getThemePropertyPath(@NonNull Path themePath) {\n-        return getThemePropertyPathOfNullable(themePath).orElseThrow(() -> new ThemePropertyMissingException(themePath + \" dose not exist any theme property file\").setErrorData(themePath));\n+        return getThemePropertyPathOfNullable(themePath).orElseThrow(() -> new ThemePropertyMissingException(themePath + \" 没有说明文件\").setErrorData(themePath));\n     }\n \n     private Optional<ThemeProperty> getPropertyOfNullable(Path themePath) {\n@@ -773,7 +773,7 @@ private Optional<ThemeProperty> getPropertyOfNullable(Path themePath) {\n      */\n     @NonNull\n     private ThemeProperty getProperty(@NonNull Path themePath) {\n-        return getPropertyOfNullable(themePath).orElseThrow(() -> new ThemePropertyMissingException(\"Cannot resolve theme property\").setErrorData(themePath));\n+        return getPropertyOfNullable(themePath).orElseThrow(() -> new ThemePropertyMissingException(\"该主题没有说明文件\").setErrorData(themePath));\n     }\n \n     /**",
    "output": "Translate some exception messgae."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/params/UserParam.java b/src/main/java/run/halo/app/model/params/UserParam.java\n--- a/src/main/java/run/halo/app/model/params/UserParam.java\n+++ b/src/main/java/run/halo/app/model/params/UserParam.java\n@@ -21,27 +21,27 @@\n @Data\n public class UserParam implements InputConverter<User> {\n \n-    @NotBlank(message = \"用户名不能为空\", groups = {AllCheck.class})\n-    @Size(max = 50, message = \"用户名的字符长度不能超过 {max}\", groups = {AllCheck.class})\n+    @NotBlank(message = \"用户名不能为空\", groups = {CreateCheck.class, UpdateCheck.class})\n+    @Size(max = 50, message = \"用户名的字符长度不能超过 {max}\", groups = {CreateCheck.class, UpdateCheck.class})\n     private String username;\n \n-    @NotBlank(message = \"用户昵称不能为空\", groups = {AllCheck.class})\n-    @Size(max = 255, message = \"用户昵称的字符长度不能超过 {max}\", groups = {AllCheck.class})\n+    @NotBlank(message = \"用户昵称不能为空\", groups = {CreateCheck.class, UpdateCheck.class})\n+    @Size(max = 255, message = \"用户昵称的字符长度不能超过 {max}\", groups = {CreateCheck.class, UpdateCheck.class})\n     private String nickname;\n \n-    @Email(message = \"电子邮件地址的格式不正确\", groups = {AllCheck.class})\n-    @NotBlank(message = \"电子邮件地址不能为空\", groups = {AllCheck.class})\n-    @Size(max = 127, message = \"电子邮件的字符长度不能超过 {max}\", groups = {AllCheck.class})\n+    @Email(message = \"电子邮件地址的格式不正确\", groups = {CreateCheck.class, UpdateCheck.class})\n+    @NotBlank(message = \"电子邮件地址不能为空\", groups = {CreateCheck.class, UpdateCheck.class})\n+    @Size(max = 127, message = \"电子邮件的字符长度不能超过 {max}\", groups = {CreateCheck.class, UpdateCheck.class})\n     private String email;\n \n     @Null(groups = UpdateCheck.class)\n     @Size(min = 8, max = 100, message = \"密码的字符长度必须在 {min} - {max} 之间\", groups = {CreateCheck.class})\n     private String password;\n \n-    @Size(max = 1023, message = \"头像链接地址的字符长度不能超过 {max}\", groups = {AllCheck.class})\n+    @Size(max = 1023, message = \"头像链接地址的字符长度不能超过 {max}\", groups = {CreateCheck.class, UpdateCheck.class})\n     private String avatar;\n \n-    @Size(max = 1023, message = \"用户描述的字符长度不能超过 {max}\", groups = {AllCheck.class})\n+    @Size(max = 1023, message = \"用户描述的字符长度不能超过 {max}\", groups = {CreateCheck.class, UpdateCheck.class})\n     private String description;\n \n }\n\ndiff --git a/src/test/java/run/halo/app/model/params/InstallParamTest.java b/src/test/java/run/halo/app/model/params/InstallParamTest.java\n--- a/src/test/java/run/halo/app/model/params/InstallParamTest.java\n+++ b/src/test/java/run/halo/app/model/params/InstallParamTest.java\n@@ -0,0 +1,53 @@\n+package run.halo.app.model.params;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.junit.Test;\n+import run.halo.app.model.support.AllCheck;\n+import run.halo.app.model.support.CreateCheck;\n+\n+import javax.validation.ConstraintViolation;\n+import javax.validation.Validation;\n+import javax.validation.Validator;\n+import java.util.Set;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.junit.Assert.assertThat;\n+\n+/**\n+ * @author johnniang\n+ * @date 19-6-1\n+ */\n+@Slf4j\n+public class InstallParamTest {\n+\n+    private final Validator validator = Validation.buildDefaultValidatorFactory().getValidator();\n+\n+    @Test\n+    public void createCheckTest() {\n+        InstallParam installParam = new InstallParam();\n+\n+        Set<ConstraintViolation<InstallParam>> constraintViolations = validator.validate(installParam, CreateCheck.class);\n+        assertThat(constraintViolations.size(), equalTo(4));\n+        printMessage(constraintViolations);\n+\n+        installParam.setEmail(\"test\");\n+        constraintViolations = validator.validate(installParam, CreateCheck.class);\n+        assertThat(constraintViolations.size(), equalTo(4));\n+        printMessage(constraintViolations);\n+\n+        installParam.setEmail(\"test@test.com\");\n+        constraintViolations = validator.validate(installParam, CreateCheck.class);\n+        assertThat(constraintViolations.size(), equalTo(3));\n+        printMessage(constraintViolations);\n+    }\n+\n+    private void printMessage(Set<ConstraintViolation<InstallParam>> constraintViolations) {\n+        if (constraintViolations == null) {\n+            return;\n+        }\n+\n+        log.debug(\"\");\n+\n+        constraintViolations.forEach(constraintViolation -> log.debug(constraintViolation.getMessage()));\n+    }\n+}\n\\ No newline at end of file",
    "output": "Fix #173"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/HaloConfiguration.java b/src/main/java/run/halo/app/config/HaloConfiguration.java\n--- a/src/main/java/run/halo/app/config/HaloConfiguration.java\n+++ b/src/main/java/run/halo/app/config/HaloConfiguration.java\n@@ -113,7 +113,8 @@ public FilterRegistrationBean<ApiAuthenticationFilter> apiAuthenticationFilter(H\n         ApiAuthenticationFilter apiFilter = new ApiAuthenticationFilter(haloProperties, optionService);\n         apiFilter.addExcludeUrlPatterns(\n                 \"/api/content/*/comments\",\n-                \"/api/content/**/comments/**\"\n+                \"/api/content/**/comments/**\",\n+                \"/api/content/options/comment\"\n         );\n \n         DefaultAuthenticationFailureHandler failureHandler = new DefaultAuthenticationFailureHandler();\n\ndiff --git a/src/main/java/run/halo/app/controller/content/api/OptionController.java b/src/main/java/run/halo/app/controller/content/api/OptionController.java\n--- a/src/main/java/run/halo/app/controller/content/api/OptionController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/OptionController.java\n@@ -8,6 +8,7 @@\n import run.halo.app.model.support.BaseResponse;\n import run.halo.app.service.OptionService;\n \n+import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n \n@@ -48,4 +49,14 @@ public Map<String, Object> listAllWithMapView(@RequestParam(value = \"key\", requi\n     public BaseResponse<Object> getBy(@PathVariable(\"key\") String key) {\n         return BaseResponse.ok(HttpStatus.OK.getReasonPhrase(), optionService.getByKey(key).orElse(null));\n     }\n+\n+\n+    @GetMapping(\"comment\")\n+    @ApiOperation(\"Options for comment\")\n+    public Map<String, Object> comment() {\n+        List<String> keys = new ArrayList<>();\n+        keys.add(\"comment_gavatar_default\");\n+        keys.add(\"comment_content_placeholder\");\n+        return optionService.listOptions(keys);\n+    }\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n@@ -2,6 +2,7 @@\n \n import cn.hutool.core.date.DateUtil;\n import cn.hutool.core.text.StrBuilder;\n+import cn.hutool.core.util.RandomUtil;\n import cn.hutool.core.util.StrUtil;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.lang3.StringUtils;\n@@ -355,7 +356,7 @@ public PostDetailVO importMarkdown(String markdown, String filename) {\n         }\n \n         if (StrUtil.isEmpty(post.getUrl())) {\n-            post.setUrl(DateUtil.format(new Date(), \"yyyyMMddHHmmss\"));\n+            post.setUrl(DateUtil.format(new Date(), \"yyyyMMddHHmmss\" + RandomUtil.randomNumbers(5)));\n         }\n \n         post.setOriginalContent(markdown);",
    "output": "Update halo-comment.js path."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/UserController.java b/src/main/java/run/halo/app/controller/admin/api/UserController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/UserController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/UserController.java\n@@ -5,6 +5,7 @@\n import run.halo.app.model.entity.User;\n import run.halo.app.model.params.PasswordParam;\n import run.halo.app.model.params.UserParam;\n+import run.halo.app.model.support.BaseResponse;\n import run.halo.app.model.support.UpdateCheck;\n import run.halo.app.service.UserService;\n import run.halo.app.utils.ValidationUtils;\n@@ -45,7 +46,8 @@ public UserDTO updateProfile(@RequestBody UserParam userParam, User user) {\n     }\n \n     @PutMapping(\"profiles/password\")\n-    public void updatePassword(@RequestBody @Valid PasswordParam passwordParam, User user) {\n+    public BaseResponse updatePassword(@RequestBody @Valid PasswordParam passwordParam, User user) {\n         userService.updatePassword(passwordParam.getOldPassword(), passwordParam.getNewPassword(), user.getId());\n+        return BaseResponse.ok(\"密码修改成功\");\n     }\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/UserServiceImpl.java b/src/main/java/run/halo/app/service/impl/UserServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/UserServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/UserServiceImpl.java\n@@ -106,15 +106,15 @@ public User updatePassword(String oldPassword, String newPassword, Integer userI\n         Assert.notNull(userId, \"User id must not be blank\");\n \n         if (oldPassword.equals(newPassword)) {\n-            throw new BadRequestException(\"There is nothing changed because new password is equal to old password\");\n+            throw new BadRequestException(\"新密码和旧密码不能相同\");\n         }\n \n         // Get the user\n         User user = getById(userId);\n \n         // Check the user old password\n         if (!BCrypt.checkpw(oldPassword, user.getPassword())) {\n-            throw new BadRequestException(\"Old password is mismatch\").setErrorData(oldPassword);\n+            throw new BadRequestException(\"旧密码错误\").setErrorData(oldPassword);\n         }\n \n         // Set new password",
    "output": "Translate some exception message."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/core/CommonController.java b/src/main/java/run/halo/app/controller/core/CommonController.java\n--- a/src/main/java/run/halo/app/controller/core/CommonController.java\n+++ b/src/main/java/run/halo/app/controller/core/CommonController.java\n@@ -57,11 +57,7 @@ public String handleError(HttpServletRequest request) {\n             }\n         }\n \n-        if (statusCode == 500) {\n-            return \"redirect:/500\";\n-        } else {\n-            return \"redirect:/404\";\n-        }\n+        return statusCode == 500 ? \"redirect:/500\" : \"redirect:/404\";\n     }\n \n     /**\n\ndiff --git a/src/main/java/run/halo/app/handler/file/AliYunFileHandler.java b/src/main/java/run/halo/app/handler/file/AliYunFileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/AliYunFileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/AliYunFileHandler.java\n@@ -62,7 +62,7 @@ public UploadResult upload(MultipartFile file) {\n             // Upload\n             PutObjectResult putObjectResult = ossClient.putObject(ossBucketName, upFilePath, file.getInputStream());\n             if (putObjectResult == null) {\n-                throw new FileOperationException(\"Failed to upload file \" + file.getOriginalFilename() + \" to AliYun \" + upFilePath);\n+                throw new FileOperationException(\"上传附件 \" + file.getOriginalFilename() + \" 到阿里云失败 \");\n             }\n \n             // Response result\n\ndiff --git a/src/main/java/run/halo/app/handler/file/LocalFileHandler.java b/src/main/java/run/halo/app/handler/file/LocalFileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/LocalFileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/LocalFileHandler.java\n@@ -162,7 +162,7 @@ public UploadResult upload(MultipartFile file) {\n             return uploadResult;\n         } catch (IOException e) {\n             log.error(\"Failed to upload file to local: \" + uploadPath, e);\n-            throw new ServiceException(\"Failed to upload file to local\").setErrorData(uploadPath);\n+            throw new ServiceException(\"上传附件失败\").setErrorData(uploadPath);\n         }\n     }\n \n\ndiff --git a/src/main/java/run/halo/app/handler/file/QnYunFileHandler.java b/src/main/java/run/halo/app/handler/file/QnYunFileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/QnYunFileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/QnYunFileHandler.java\n@@ -121,7 +121,7 @@ public UploadResult upload(MultipartFile file) {\n                 log.error(\"QnYun error response: [{}]\", ((QiniuException) e).response);\n             }\n \n-            throw new FileOperationException(\"Failed to upload file \" + file.getOriginalFilename() + \" to QnYun\", e);\n+            throw new FileOperationException(\"上传附件 \" + file.getOriginalFilename() + \" 到七牛云失败\", e);\n         }\n     }\n \n\ndiff --git a/src/main/java/run/halo/app/handler/file/SmmsFileHandler.java b/src/main/java/run/halo/app/handler/file/SmmsFileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/SmmsFileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/SmmsFileHandler.java\n@@ -65,7 +65,7 @@ public UploadResult upload(MultipartFile file) {\n             body.add(\"smfile\", new HttpClientUtils.MultipartFileResource(file.getBytes(), file.getOriginalFilename()));\n         } catch (IOException e) {\n             log.error(\"Failed to get file input stream\", e);\n-            throw new FileOperationException(\"Failed to upload \" + file.getOriginalFilename() + \" file\", e);\n+            throw new FileOperationException(\"上传附件 \" + file.getOriginalFilename() + \" 到 SM.MS 失败\", e);\n         }\n \n         body.add(\"ssl\", false);\n\ndiff --git a/src/main/java/run/halo/app/handler/file/UpYunFileHandler.java b/src/main/java/run/halo/app/handler/file/UpYunFileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/UpYunFileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/UpYunFileHandler.java\n@@ -91,7 +91,7 @@ public UploadResult upload(MultipartFile file) {\n \n             return uploadResult;\n         } catch (Exception e) {\n-            throw new FileOperationException(\"Failed to upload file \" + file.getOriginalFilename() + \" to UpYun\", e);\n+            throw new FileOperationException(\"上传附件 \" + file.getOriginalFilename() + \" 到又拍云失败\", e);\n         }\n     }\n \n\ndiff --git a/src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java b/src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java\n@@ -342,7 +342,7 @@ protected void urlMustNotExist(@NonNull POST post) {\n         }\n \n         if (exist) {\n-            throw new AlreadyExistsException(\"The post url \" + post.getUrl() + \" has been exist\");\n+            throw new AlreadyExistsException(\"文章路径 \" + post.getUrl() + \" 已存在\");\n         }\n     }\n \n\ndiff --git a/src/main/java/run/halo/app/service/impl/CategoryServiceImpl.java b/src/main/java/run/halo/app/service/impl/CategoryServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/CategoryServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/CategoryServiceImpl.java\n@@ -53,7 +53,7 @@ public Category create(Category category) {\n \n         if (count > 0) {\n             log.error(\"Category has exist already: [{}]\", category);\n-            throw new AlreadyExistsException(\"The category has exist already\");\n+            throw new AlreadyExistsException(\"该分类已存在\");\n         }\n \n         // Check parent id\n\ndiff --git a/src/main/java/run/halo/app/service/impl/MenuServiceImpl.java b/src/main/java/run/halo/app/service/impl/MenuServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/MenuServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/MenuServiceImpl.java\n@@ -171,7 +171,7 @@ private void nameMustNotExist(@NonNull Menu menu) {\n         }\n \n         if (exist) {\n-            throw new AlreadyExistsException(\"The menu name \" + menu.getName() + \" already exists\");\n+            throw new AlreadyExistsException(\"菜单 \" + menu.getName() + \" 已存在\");\n         }\n     }\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/TagServiceImpl.java b/src/main/java/run/halo/app/service/impl/TagServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/TagServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/TagServiceImpl.java\n@@ -42,7 +42,7 @@ public Tag create(Tag tag) {\n \n         if (count > 0) {\n             // If the tag has exist already\n-            throw new AlreadyExistsException(\"The tag has already exist\").setErrorData(tag);\n+            throw new AlreadyExistsException(\"该标签已存在\").setErrorData(tag);\n         }\n \n         // Get tag name\n\ndiff --git a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n@@ -3,12 +3,10 @@\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.lang3.StringUtils;\n import org.eclipse.jgit.api.Git;\n-import org.eclipse.jgit.api.MergeCommand;\n import org.eclipse.jgit.api.PullResult;\n import org.eclipse.jgit.api.errors.GitAPIException;\n import org.eclipse.jgit.errors.RepositoryNotFoundException;\n import org.eclipse.jgit.lib.Ref;\n-import org.eclipse.jgit.merge.MergeStrategy;\n import org.eclipse.jgit.transport.RemoteConfig;\n import org.eclipse.jgit.transport.URIish;\n import org.springframework.context.ApplicationEventPublisher;\n@@ -371,7 +369,7 @@ public ThemeProperty upload(MultipartFile file) {\n         Assert.notNull(file, \"Multipart file must not be null\");\n \n         if (!StringUtils.endsWithIgnoreCase(file.getOriginalFilename(), \".zip\")) {\n-            throw new UnsupportedMediaTypeException(\"Unsupported theme media type: \" + file.getContentType()).setErrorData(file.getOriginalFilename());\n+            throw new UnsupportedMediaTypeException(\"不支持的文件类型: \" + file.getContentType()).setErrorData(file.getOriginalFilename());\n         }\n \n         ZipInputStream zis = null;\n@@ -395,7 +393,7 @@ public ThemeProperty upload(MultipartFile file) {\n             // Go to the base folder and add the theme into system\n             return add(FileUtils.skipZipParentFolder(themeTempPath));\n         } catch (IOException e) {\n-            throw new ServiceException(\"Failed to upload theme file: \" + file.getOriginalFilename(), e);\n+            throw new ServiceException(\"上传主题失败: \" + file.getOriginalFilename(), e);\n         } finally {\n             // Close zip input stream\n             FileUtils.closeQuietly(zis);",
    "output": "Translate some exception message."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/JournalController.java b/src/main/java/run/halo/app/controller/admin/api/JournalController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/JournalController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/JournalController.java\n@@ -50,7 +50,7 @@ public JournalController(JournalService journalService,\n     }\n \n     @GetMapping\n-    @ApiOperation(\"Gets latest journals\")\n+    @ApiOperation(\"Lists journals\")\n     public Page<JournalWithCmtCountDTO> pageBy(@PageableDefault(sort = \"updateTime\", direction = DESC) Pageable pageable,\n                                                JournalQuery journalQuery) {\n         Page<Journal> journalPage = journalService.pageBy(journalQuery, pageable);\n\ndiff --git a/src/main/java/run/halo/app/repository/JournalCommentRepository.java b/src/main/java/run/halo/app/repository/JournalCommentRepository.java\n--- a/src/main/java/run/halo/app/repository/JournalCommentRepository.java\n+++ b/src/main/java/run/halo/app/repository/JournalCommentRepository.java\n@@ -1,8 +1,14 @@\n package run.halo.app.repository;\n \n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.lang.NonNull;\n import run.halo.app.model.entity.JournalComment;\n+import run.halo.app.model.projection.CommentChildrenCountProjection;\n+import run.halo.app.model.projection.CommentCountProjection;\n import run.halo.app.repository.base.BaseCommentRepository;\n \n+import java.util.List;\n+\n /**\n  * Journal comment repository.\n  *\n@@ -11,8 +17,18 @@\n  */\n public interface JournalCommentRepository extends BaseCommentRepository<JournalComment> {\n \n-//    @Query(\"select new run.halo.app.model.projection.CommentCountProjection(count(comment.id), comment.postId) from JournalComment comment where comment.postId in ?1 group by comment.postId\")\n-//    @NonNull\n-//    @Override\n-//    List<CommentCountProjection> countByPostIds(@NonNull Iterable<Integer> postIds);\n+    @Query(\"select new run.halo.app.model.projection.CommentCountProjection(count(comment.id), comment.postId) \" +\n+            \"from JournalComment comment \" +\n+            \"where comment.postId in ?1 group by comment.postId\")\n+    @NonNull\n+    @Override\n+    List<CommentCountProjection> countByPostIds(@NonNull Iterable<Integer> postIds);\n+\n+    @Query(\"select new run.halo.app.model.projection.CommentChildrenCountProjection(count(comment.id), comment.parentId) \" +\n+            \"from JournalComment comment \" +\n+            \"where comment.parentId in ?1 \" +\n+            \"group by comment.parentId\")\n+    @NonNull\n+    @Override\n+    List<CommentChildrenCountProjection> findDirectChildrenCount(@NonNull Iterable<Long> commentIds);\n }\n\ndiff --git a/src/main/java/run/halo/app/repository/PostCommentRepository.java b/src/main/java/run/halo/app/repository/PostCommentRepository.java\n--- a/src/main/java/run/halo/app/repository/PostCommentRepository.java\n+++ b/src/main/java/run/halo/app/repository/PostCommentRepository.java\n@@ -1,8 +1,14 @@\n package run.halo.app.repository;\n \n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.lang.NonNull;\n import run.halo.app.model.entity.PostComment;\n+import run.halo.app.model.projection.CommentChildrenCountProjection;\n+import run.halo.app.model.projection.CommentCountProjection;\n import run.halo.app.repository.base.BaseCommentRepository;\n \n+import java.util.List;\n+\n /**\n  * PostComment repository.\n  *\n@@ -11,9 +17,17 @@\n  */\n public interface PostCommentRepository extends BaseCommentRepository<PostComment> {\n \n-//    @Query(\"select new run.halo.app.model.projection.CommentCountProjection(count(comment.id), comment.postId) from PostComment comment where comment.postId in ?1 group by comment.postId\")\n-//    @NonNull\n-//    @Override\n-//    List<CommentCountProjection> countByPostIds(@NonNull Iterable<Integer> postIds);\n+    @Query(\"select new run.halo.app.model.projection.CommentCountProjection(count(comment.id), comment.postId) \" +\n+            \"from PostComment comment \" +\n+            \"where comment.postId in ?1 group by comment.postId\")\n+    @NonNull\n+    @Override\n+    List<CommentCountProjection> countByPostIds(@NonNull Iterable<Integer> postIds);\n \n+    @Query(\"select new run.halo.app.model.projection.CommentChildrenCountProjection(count(comment.id), comment.parentId) \" +\n+            \"from PostComment comment \" +\n+            \"where comment.parentId in ?1 \" +\n+            \"group by comment.parentId\")\n+    @NonNull\n+    List<CommentChildrenCountProjection> findDirectChildrenCount(@NonNull Iterable<Long> commentIds);\n }\n\ndiff --git a/src/main/java/run/halo/app/repository/SheetCommentRepository.java b/src/main/java/run/halo/app/repository/SheetCommentRepository.java\n--- a/src/main/java/run/halo/app/repository/SheetCommentRepository.java\n+++ b/src/main/java/run/halo/app/repository/SheetCommentRepository.java\n@@ -1,18 +1,33 @@\n package run.halo.app.repository;\n \n+import org.springframework.data.jpa.repository.Query;\n+import org.springframework.lang.NonNull;\n import run.halo.app.model.entity.SheetComment;\n+import run.halo.app.model.projection.CommentChildrenCountProjection;\n+import run.halo.app.model.projection.CommentCountProjection;\n import run.halo.app.repository.base.BaseCommentRepository;\n \n+import java.util.List;\n+\n /**\n  * Sheet comment repository.\n  *\n  * @author johnniang\n  * @date 19-4-24\n  */\n public interface SheetCommentRepository extends BaseCommentRepository<SheetComment> {\n-//\n-//    @Query(\"select new run.halo.app.model.projection.CommentCountProjection(count(comment.id), comment.postId) from SheetComment comment where comment.postId in ?1 group by comment.postId\")\n-//    @NonNull\n-//    @Override\n-//    List<CommentCountProjection> countByPostIds(@NonNull Iterable<Integer> postIds);\n+\n+    @Query(\"select new run.halo.app.model.projection.CommentCountProjection(count(comment.id), comment.postId) \" +\n+            \"from SheetComment comment \" +\n+            \"where comment.postId in ?1 group by comment.postId\")\n+    @NonNull\n+    @Override\n+    List<CommentCountProjection> countByPostIds(@NonNull Iterable<Integer> postIds);\n+\n+    @Query(\"select new run.halo.app.model.projection.CommentChildrenCountProjection(count(comment.id), comment.parentId) \" +\n+            \"from SheetComment comment \" +\n+            \"where comment.parentId in ?1 \" +\n+            \"group by comment.parentId\")\n+    @NonNull\n+    List<CommentChildrenCountProjection> findDirectChildrenCount(@NonNull Iterable<Long> commentIds);\n }",
    "output": "Fix comment count bug"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/params/PostParam.java b/src/main/java/run/halo/app/model/params/PostParam.java\n--- a/src/main/java/run/halo/app/model/params/PostParam.java\n+++ b/src/main/java/run/halo/app/model/params/PostParam.java\n@@ -12,6 +12,7 @@\n import javax.validation.constraints.Min;\n import javax.validation.constraints.NotBlank;\n import javax.validation.constraints.Size;\n+import java.util.Date;\n import java.util.Set;\n \n /**\n@@ -50,6 +51,8 @@ public class PostParam implements InputConverter<Post> {\n     @Min(value = 0, message = \"Post top priority must not be less than {value}\")\n     private Integer topPriority = 0;\n \n+    private Date createTime;\n+\n     private PostCreateFrom createFrom = PostCreateFrom.ADMIN;\n \n     private Set<Integer> tagIds;",
    "output": "Add createTime modification feature"
  },
  {
    "input": "diff --git a/src/test/java/run/halo/app/service/impl/OptionServiceImplTest.java b/src/test/java/run/halo/app/service/impl/OptionServiceImplTest.java\n--- a/src/test/java/run/halo/app/service/impl/OptionServiceImplTest.java\n+++ b/src/test/java/run/halo/app/service/impl/OptionServiceImplTest.java\n@@ -80,7 +80,7 @@ private void getQiniuZoneTest(String region, Zone actualZone) {\n     }\n \n     private void getQiniuZoneTest(Zone actualZone, Option option) {\n-        QnYunProperties zoneProperty = QnYunProperties.ZONE;\n+        QnYunProperties zoneProperty = QnYunProperties.OSS_ZONE;\n \n         // Given\n //        given(optionRepository.findByKey(zoneProperty.getValue())).willReturn(Optional.ofNullable(option));",
    "output": "Fix test error again"
  },
  {
    "input": "diff --git a/src/test/java/run/halo/app/utils/GitTest.java b/src/test/java/run/halo/app/utils/GitTest.java\n--- a/src/test/java/run/halo/app/utils/GitTest.java\n+++ b/src/test/java/run/halo/app/utils/GitTest.java\n@@ -7,10 +7,7 @@\n import org.eclipse.jgit.errors.RepositoryNotFoundException;\n import org.eclipse.jgit.transport.RemoteConfig;\n import org.eclipse.jgit.transport.URIish;\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n-import org.junit.Ignore;\n-import org.junit.Test;\n+import org.junit.*;\n \n import java.io.IOException;\n import java.net.URISyntaxException;\n@@ -28,15 +25,15 @@\n @Slf4j\n public class GitTest {\n \n-    private static Path tempPath;\n+    private Path tempPath;\n \n-    @BeforeClass\n-    public static void setUp() throws IOException {\n+    @Before\n+    public void setUp() throws IOException {\n         tempPath = Files.createTempDirectory(\"git-test\");\n     }\n \n-    @AfterClass\n-    public static void destroy() throws IOException {\n+    @After\n+    public void destroy() throws IOException {\n         FileUtils.deleteFolder(tempPath);\n     }\n ",
    "output": "Resolve test error"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/handler/file/AliYunFileHandler.java b/src/main/java/run/halo/app/handler/file/AliYunFileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/AliYunFileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/AliYunFileHandler.java\n@@ -46,6 +46,7 @@ public UploadResult upload(MultipartFile file) {\n         String ossAccessKey = optionService.getByPropertyOfNonNull(AliYunProperties.OSS_ACCESS_KEY).toString();\n         String ossAccessSecret = optionService.getByPropertyOfNonNull(AliYunProperties.OSS_ACCESS_SECRET).toString();\n         String ossBucketName = optionService.getByPropertyOfNonNull(AliYunProperties.OSS_BUCKET_NAME).toString();\n+        String ossStyleRule = optionService.getByPropertyOfNonNull(AliYunProperties.OSS_STYLE_RULE).toString();\n         String ossSource = StringUtils.join(\"https://\", ossBucketName, \".\" + ossEndPoint);\n \n         // Init OSS client\n@@ -78,7 +79,7 @@ public UploadResult upload(MultipartFile file) {\n                 BufferedImage image = ImageIO.read(file.getInputStream());\n                 uploadResult.setWidth(image.getWidth());\n                 uploadResult.setHeight(image.getHeight());\n-                uploadResult.setThumbPath(filePath);\n+                uploadResult.setThumbPath(StringUtils.isBlank(ossStyleRule) ? filePath : filePath + ossStyleRule);\n             }\n \n             return uploadResult;\n\ndiff --git a/src/main/java/run/halo/app/handler/file/QnYunFileHandler.java b/src/main/java/run/halo/app/handler/file/QnYunFileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/QnYunFileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/QnYunFileHandler.java\n@@ -53,11 +53,11 @@ public UploadResult upload(MultipartFile file) {\n \n         // Get all config\n         Zone zone = optionService.getQnYunZone();\n-        String accessKey = optionService.getByPropertyOfNonNull(QnYunProperties.ACCESS_KEY).toString();\n-        String secretKey = optionService.getByPropertyOfNonNull(QnYunProperties.SECRET_KEY).toString();\n-        String bucket = optionService.getByPropertyOfNonNull(QnYunProperties.BUCKET).toString();\n-        String domain = optionService.getByPropertyOfNonNull(QnYunProperties.DOMAIN).toString();\n-        String smallUrl = optionService.getByPropertyOrDefault(QnYunProperties.SMALL_URL, String.class, \"\");\n+        String accessKey = optionService.getByPropertyOfNonNull(QnYunProperties.OSS_ACCESS_KEY).toString();\n+        String secretKey = optionService.getByPropertyOfNonNull(QnYunProperties.OSS_SECRET_KEY).toString();\n+        String bucket = optionService.getByPropertyOfNonNull(QnYunProperties.OSS_BUCKET).toString();\n+        String domain = optionService.getByPropertyOfNonNull(QnYunProperties.OSS_DOMAIN).toString();\n+        String styleRule = optionService.getByPropertyOrDefault(QnYunProperties.OSS_STYLE_RULE, String.class, \"\");\n \n         // Create configuration\n         Configuration configuration = new Configuration(zone);\n@@ -109,9 +109,10 @@ public UploadResult upload(MultipartFile file) {\n             result.setWidth(putSet.getWidth());\n             result.setHeight(putSet.getHeight());\n             result.setMediaType(MediaType.valueOf(Objects.requireNonNull(file.getContentType())));\n+            result.setSize(file.getSize());\n \n             if (isImageType(result.getMediaType())) {\n-                result.setThumbPath(StringUtils.isBlank(smallUrl) ? filePath : filePath + smallUrl);\n+                result.setThumbPath(StringUtils.isBlank(styleRule) ? filePath : filePath + styleRule);\n             }\n \n             return result;\n@@ -130,9 +131,9 @@ public void delete(String key) {\n \n         // Get all config\n         Zone zone = optionService.getQnYunZone();\n-        String accessKey = optionService.getByPropertyOfNonNull(QnYunProperties.ACCESS_KEY).toString();\n-        String secretKey = optionService.getByPropertyOfNonNull(QnYunProperties.SECRET_KEY).toString();\n-        String bucket = optionService.getByPropertyOfNonNull(QnYunProperties.BUCKET).toString();\n+        String accessKey = optionService.getByPropertyOfNonNull(QnYunProperties.OSS_ACCESS_KEY).toString();\n+        String secretKey = optionService.getByPropertyOfNonNull(QnYunProperties.OSS_SECRET_KEY).toString();\n+        String bucket = optionService.getByPropertyOfNonNull(QnYunProperties.OSS_BUCKET).toString();\n \n         // Create configuration\n         Configuration configuration = new Configuration(zone);\n\ndiff --git a/src/main/java/run/halo/app/handler/file/UpYunFileHandler.java b/src/main/java/run/halo/app/handler/file/UpYunFileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/UpYunFileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/UpYunFileHandler.java\n@@ -44,8 +44,8 @@ public UploadResult upload(MultipartFile file) {\n         String ossBucket = optionService.getByPropertyOfNonNull(UpYunProperties.OSS_BUCKET).toString();\n         String ossDomain = optionService.getByPropertyOfNonNull(UpYunProperties.OSS_DOMAIN).toString();\n         String ossOperator = optionService.getByPropertyOfNonNull(UpYunProperties.OSS_OPERATOR).toString();\n-        // small url can be null\n-        String ossSmallUrl = optionService.getByPropertyOrDefault(UpYunProperties.OSS_SMALL_URL, String.class, \"\");\n+        // style rule can be null\n+        String ossStyleRule = optionService.getByPropertyOrDefault(UpYunProperties.OSS_STYLE_RULE, String.class, \"\");\n \n         // Create up yun\n         UpYun upYun = new UpYun(ossBucket, ossOperator, ossPassword);\n@@ -86,7 +86,7 @@ public UploadResult upload(MultipartFile file) {\n                 BufferedImage image = ImageIO.read(file.getInputStream());\n                 uploadResult.setWidth(image.getWidth());\n                 uploadResult.setHeight(image.getHeight());\n-                uploadResult.setThumbPath(StringUtils.isBlank(ossSmallUrl) ? filePath : filePath + ossSmallUrl);\n+                uploadResult.setThumbPath(StringUtils.isBlank(ossStyleRule) ? filePath : filePath + ossStyleRule);\n             }\n \n             return uploadResult;\n\ndiff --git a/src/main/java/run/halo/app/model/properties/AliYunProperties.java b/src/main/java/run/halo/app/model/properties/AliYunProperties.java\n--- a/src/main/java/run/halo/app/model/properties/AliYunProperties.java\n+++ b/src/main/java/run/halo/app/model/properties/AliYunProperties.java\n@@ -26,7 +26,12 @@ public enum AliYunProperties implements PropertyEnum {\n     /**\n      * Aliyun oss access secret.\n      */\n-    OSS_ACCESS_SECRET(\"oss_aliyun_access_secret\", String.class, \"\");\n+    OSS_ACCESS_SECRET(\"oss_aliyun_access_secret\", String.class, \"\"),\n+\n+    /**\n+     * Aliyun oss style rule\n+     */\n+    OSS_STYLE_RULE(\"oss_aliyun_style_rule\", String.class, \"\");\n \n     private final String value;\n \n\ndiff --git a/src/main/java/run/halo/app/model/properties/QnYunProperties.java b/src/main/java/run/halo/app/model/properties/QnYunProperties.java\n--- a/src/main/java/run/halo/app/model/properties/QnYunProperties.java\n+++ b/src/main/java/run/halo/app/model/properties/QnYunProperties.java\n@@ -8,17 +8,17 @@\n  */\n public enum QnYunProperties implements PropertyEnum {\n \n-    ZONE(\"oss_qiniu_zone\", String.class, \"auto\"),\n+    OSS_ZONE(\"oss_qiniu_zone\", String.class, \"auto\"),\n \n-    ACCESS_KEY(\"oss_qiniu_access_key\", String.class, \"\"),\n+    OSS_ACCESS_KEY(\"oss_qiniu_access_key\", String.class, \"\"),\n \n-    SECRET_KEY(\"oss_qiniu_secret_key\", String.class, \"\"),\n+    OSS_SECRET_KEY(\"oss_qiniu_secret_key\", String.class, \"\"),\n \n-    DOMAIN(\"oss_qiniu_domain\", String.class, \"\"),\n+    OSS_DOMAIN(\"oss_qiniu_domain\", String.class, \"\"),\n \n-    BUCKET(\"oss_qiniu_bucket\", String.class, \"\"),\n+    OSS_BUCKET(\"oss_qiniu_bucket\", String.class, \"\"),\n \n-    SMALL_URL(\"oss_qiniu_small_url\", String.class, \"\");\n+    OSS_STYLE_RULE(\"oss_qiniu_style_rule\", String.class, \"\");\n \n     private final String value;\n \n\ndiff --git a/src/main/java/run/halo/app/model/properties/UpYunProperties.java b/src/main/java/run/halo/app/model/properties/UpYunProperties.java\n--- a/src/main/java/run/halo/app/model/properties/UpYunProperties.java\n+++ b/src/main/java/run/halo/app/model/properties/UpYunProperties.java\n@@ -18,7 +18,7 @@ public enum UpYunProperties implements PropertyEnum {\n \n     OSS_OPERATOR(\"oss_upyun_operator\", String.class, \"\"),\n \n-    OSS_SMALL_URL(\"oss_upyun_small_url\", String.class, \"\");\n+    OSS_STYLE_RULE(\"oss_upyun_style_rule\", String.class, \"\");\n \n     private final String defaultValue;\n     private String value;\n\ndiff --git a/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java b/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n@@ -312,7 +312,7 @@ public int getRssPageSize() {\n \n     @Override\n     public Zone getQnYunZone() {\n-        return getByProperty(QnYunProperties.ZONE).map(qiniuZone -> {\n+        return getByProperty(QnYunProperties.OSS_ZONE).map(qiniuZone -> {\n \n             Zone zone;\n             switch (qiniuZone.toString()) {",
    "output": "Fixed ali oss upload error."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/TagService.java b/src/main/java/run/halo/app/service/TagService.java\n--- a/src/main/java/run/halo/app/service/TagService.java\n+++ b/src/main/java/run/halo/app/service/TagService.java\n@@ -31,6 +31,7 @@ public interface TagService extends CrudService<Tag, Integer> {\n      * @param name name\n      * @return Tag\n      */\n+    @Nullable\n     Tag getByName(@NonNull String name);\n \n     /**\n\ndiff --git a/src/main/java/run/halo/app/service/impl/CategoryServiceImpl.java b/src/main/java/run/halo/app/service/impl/CategoryServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/CategoryServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/CategoryServiceImpl.java\n@@ -16,6 +16,7 @@\n import run.halo.app.service.CategoryService;\n import run.halo.app.service.PostCategoryService;\n import run.halo.app.service.base.AbstractCrudService;\n+import run.halo.app.utils.ServiceUtils;\n \n import java.util.Collections;\n import java.util.LinkedList;\n@@ -56,7 +57,7 @@ public Category create(Category category) {\n         }\n \n         // Check parent id\n-        if (category.getParentId() > 0) {\n+        if (!ServiceUtils.isEmptyId(category.getParentId())) {\n             count = categoryRepository.countById(category.getParentId());\n \n             if (count == 0) {",
    "output": "Fix NPE when importing markdown files"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/BackupController.java b/src/main/java/run/halo/app/controller/admin/api/BackupController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/BackupController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/BackupController.java\n@@ -1,9 +1,18 @@\n package run.halo.app.controller.admin.api;\n \n+import io.swagger.annotations.ApiOperation;\n+import org.springframework.web.bind.annotation.PostMapping;\n import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestPart;\n import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.multipart.MultipartFile;\n+import run.halo.app.model.dto.post.BasePostDetailDTO;\n import run.halo.app.service.BackupService;\n \n+import java.io.IOException;\n+import java.util.LinkedList;\n+import java.util.List;\n+\n /**\n  * Backup controller\n  *\n@@ -19,4 +28,15 @@ public class BackupController {\n     public BackupController(BackupService backupService) {\n         this.backupService = backupService;\n     }\n+\n+    @PostMapping(\"import/markdowns\")\n+    @ApiOperation(\"Import markdowns\")\n+    public List<BasePostDetailDTO> backupMarkdowns(@RequestPart(\"files\") MultipartFile[] files) throws IOException {\n+        List<BasePostDetailDTO> result = new LinkedList<>();\n+        for (MultipartFile file : files) {\n+            BasePostDetailDTO post = backupService.importMarkdowns(file);\n+            result.add(post);\n+        }\n+        return result;\n+    }\n }\n\ndiff --git a/src/main/java/run/halo/app/handler/theme/config/support/ThemeProperty.java b/src/main/java/run/halo/app/handler/theme/config/support/ThemeProperty.java\n--- a/src/main/java/run/halo/app/handler/theme/config/support/ThemeProperty.java\n+++ b/src/main/java/run/halo/app/handler/theme/config/support/ThemeProperty.java\n@@ -28,6 +28,8 @@ public class ThemeProperty {\n      */\n     private String website;\n \n+    private String repo;\n+\n     /**\n      * Theme description.\n      */\n\ndiff --git a/src/main/java/run/halo/app/model/dto/BackupDTO.java b/src/main/java/run/halo/app/model/dto/BackupDTO.java\n--- a/src/main/java/run/halo/app/model/dto/BackupDTO.java\n+++ b/src/main/java/run/halo/app/model/dto/BackupDTO.java\n@@ -0,0 +1,23 @@\n+package run.halo.app.model.dto;\n+\n+import lombok.Data;\n+\n+import java.util.Date;\n+\n+/**\n+ * @author ryanwang\n+ * @date 2019-05-25\n+ */\n+@Data\n+public class BackupDTO {\n+\n+    private String fileName;\n+\n+    private Date createTime;\n+\n+    private String fileSize;\n+\n+    private String fileType;\n+\n+    private String type;\n+}\n\ndiff --git a/src/main/java/run/halo/app/service/BackupService.java b/src/main/java/run/halo/app/service/BackupService.java\n--- a/src/main/java/run/halo/app/service/BackupService.java\n+++ b/src/main/java/run/halo/app/service/BackupService.java\n@@ -1,10 +1,23 @@\n package run.halo.app.service;\n \n+import org.springframework.web.multipart.MultipartFile;\n+import run.halo.app.model.dto.post.BasePostDetailDTO;\n+\n+import java.io.IOException;\n+\n /**\n  * Backup service interface.\n  *\n  * @author johnniang\n  * @date 19-4-26\n  */\n public interface BackupService {\n+\n+    /**\n+     * Backup posts and sheets\n+     *\n+     * @param file file\n+     * @return post info\n+     */\n+    BasePostDetailDTO importMarkdowns(MultipartFile file) throws IOException;\n }\n\ndiff --git a/src/main/java/run/halo/app/service/PostService.java b/src/main/java/run/halo/app/service/PostService.java\n--- a/src/main/java/run/halo/app/service/PostService.java\n+++ b/src/main/java/run/halo/app/service/PostService.java\n@@ -101,10 +101,11 @@ public interface PostService extends BasePostService<Post> {\n      * Import post from markdown document.\n      *\n      * @param markdown markdown document.\n+     * @param filename filename\n      * @return imported post\n      */\n     @NonNull\n-    PostDetailVO importMarkdown(@NonNull String markdown);\n+    PostDetailVO importMarkdown(@NonNull String markdown, String filename);\n \n     /**\n      * Export post to markdown file by post id.\n\ndiff --git a/src/main/java/run/halo/app/service/impl/BackupServiceImpl.java b/src/main/java/run/halo/app/service/impl/BackupServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/BackupServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/BackupServiceImpl.java\n@@ -1,7 +1,13 @@\n package run.halo.app.service.impl;\n \n+import cn.hutool.core.io.IoUtil;\n import org.springframework.stereotype.Service;\n+import org.springframework.web.multipart.MultipartFile;\n+import run.halo.app.model.dto.post.BasePostDetailDTO;\n import run.halo.app.service.BackupService;\n+import run.halo.app.service.PostService;\n+\n+import java.io.IOException;\n \n /**\n  * Backup service implementation.\n@@ -12,4 +18,20 @@\n @Service\n public class BackupServiceImpl implements BackupService {\n \n+    private final PostService postService;\n+\n+    public BackupServiceImpl(PostService postService) {\n+        this.postService = postService;\n+    }\n+\n+    @Override\n+    public BasePostDetailDTO importMarkdowns(MultipartFile file) throws IOException {\n+\n+        // Read markdown content.\n+        String markdown = IoUtil.read(file.getInputStream(), \"UTF-8\");\n+\n+        // TODO sheet import\n+\n+        return postService.importMarkdown(markdown, file.getOriginalFilename());\n+    }\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n@@ -2,6 +2,7 @@\n \n import cn.hutool.core.date.DateUtil;\n import cn.hutool.core.text.StrBuilder;\n+import cn.hutool.core.util.StrUtil;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.lang3.StringUtils;\n import org.springframework.context.ApplicationEventPublisher;\n@@ -277,7 +278,7 @@ public List<ArchiveMonthVO> listMonthArchives() {\n     }\n \n     @Override\n-    public PostDetailVO importMarkdown(String markdown) {\n+    public PostDetailVO importMarkdown(String markdown, String filename) {\n         Assert.notNull(markdown, \"Markdown document must not be null\");\n \n         // Render markdown to html document.\n@@ -345,8 +346,19 @@ public PostDetailVO importMarkdown(String markdown) {\n             }\n         }\n \n+        if (null == post.getStatus()) {\n+            post.setStatus(PostStatus.PUBLISHED);\n+        }\n+\n+        if (StrUtil.isEmpty(post.getTitle())) {\n+            post.setTitle(filename);\n+        }\n+\n+        if (StrUtil.isEmpty(post.getUrl())) {\n+            post.setUrl(DateUtil.format(new Date(), \"yyyyMMddHHmmss\"));\n+        }\n+\n         post.setOriginalContent(markdown);\n-        post.setFormatContent(content);\n \n         return createBy(post, tagIds, categoryIds, false);\n     }",
    "output": "Support import post."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/base/BaseCommentService.java b/src/main/java/run/halo/app/service/base/BaseCommentService.java\n--- a/src/main/java/run/halo/app/service/base/BaseCommentService.java\n+++ b/src/main/java/run/halo/app/service/base/BaseCommentService.java\n@@ -220,19 +220,20 @@ public interface BaseCommentService<COMMENT extends BaseComment> extends CrudSer\n      *\n      * @param comment comment dto must not be null\n      */\n-    void filterIpAddress(@NonNull BaseCommentDTO comment);\n+    <T extends BaseCommentDTO> T filterIpAddress(@NonNull T comment);\n \n     /**\n      * Filters comment ip address.\n      *\n      * @param comments comment dto list\n      */\n-    void filterIpAddress(@Nullable List<BaseCommentDTO> comments);\n+    <T extends BaseCommentDTO> List<T> filterIpAddress(@Nullable List<T> comments);\n \n     /**\n      * Filters comment ip address.\n      *\n      * @param commentPage comment page\n      */\n-    void filterIpAddress(@NonNull Page<BaseCommentDTO> commentPage);\n+    <T extends BaseCommentDTO> Page<T> filterIpAddress(@NonNull Page<T> commentPage);\n+\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java b/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n@@ -471,26 +471,50 @@ public List<COMMENT> listChildrenBy(Integer targetId, Long commentParentId, Comm\n     }\n \n     @Override\n-    public void filterIpAddress(BaseCommentDTO comment) {\n+    public <T extends BaseCommentDTO> T filterIpAddress(@NonNull T comment) {\n         Assert.notNull(comment, \"Base comment dto must not be null\");\n \n         // Clear ip address\n         comment.setIpAddress(\"\");\n+\n+        // Handle base comment vo\n+        if (comment instanceof BaseCommentVO) {\n+            BaseCommentVO baseCommentVO = (BaseCommentVO) comment;\n+            Queue<BaseCommentVO> commentQueue = new LinkedList<>();\n+            commentQueue.offer(baseCommentVO);\n+            while (!commentQueue.isEmpty()) {\n+                BaseCommentVO current = commentQueue.poll();\n+\n+                // Clear ip address\n+                current.setIpAddress(\"\");\n+\n+                if (!CollectionUtils.isEmpty(current.getChildren())) {\n+                    // Add children\n+                    commentQueue.addAll(current.getChildren());\n+                }\n+            }\n+        }\n+\n+        return comment;\n     }\n \n     @Override\n-    public void filterIpAddress(List<BaseCommentDTO> comments) {\n+    public <T extends BaseCommentDTO> List<T> filterIpAddress(List<T> comments) {\n         if (CollectionUtils.isEmpty(comments)) {\n-            return;\n+            return Collections.emptyList();\n         }\n \n         comments.forEach(this::filterIpAddress);\n+\n+        return comments;\n     }\n \n     @Override\n-    public void filterIpAddress(Page<BaseCommentDTO> commentPage) {\n+    public <T extends BaseCommentDTO> Page<T> filterIpAddress(Page<T> commentPage) {\n         Assert.notNull(commentPage, \"Comment page must not be null\");\n         commentPage.forEach(this::filterIpAddress);\n+\n+        return commentPage;\n     }\n \n     /**",
    "output": "Enhance filter ip address service"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/base/BaseCommentService.java b/src/main/java/run/halo/app/service/base/BaseCommentService.java\n--- a/src/main/java/run/halo/app/service/base/BaseCommentService.java\n+++ b/src/main/java/run/halo/app/service/base/BaseCommentService.java\n@@ -214,4 +214,25 @@ public interface BaseCommentService<COMMENT extends BaseComment> extends CrudSer\n      */\n     @NonNull\n     List<COMMENT> listChildrenBy(@NonNull Integer targetId, @NonNull Long commentParentId, @NonNull CommentStatus status, @NonNull Sort sort);\n+\n+    /**\n+     * Filters comment ip address.\n+     *\n+     * @param comment comment dto must not be null\n+     */\n+    void filterIpAddress(@NonNull BaseCommentDTO comment);\n+\n+    /**\n+     * Filters comment ip address.\n+     *\n+     * @param comments comment dto list\n+     */\n+    void filterIpAddress(@Nullable List<BaseCommentDTO> comments);\n+\n+    /**\n+     * Filters comment ip address.\n+     *\n+     * @param commentPage comment page\n+     */\n+    void filterIpAddress(@NonNull Page<BaseCommentDTO> commentPage);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java b/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n@@ -470,6 +470,29 @@ public List<COMMENT> listChildrenBy(Integer targetId, Long commentParentId, Comm\n         return childrenList;\n     }\n \n+    @Override\n+    public void filterIpAddress(BaseCommentDTO comment) {\n+        Assert.notNull(comment, \"Base comment dto must not be null\");\n+\n+        // Clear ip address\n+        comment.setIpAddress(\"\");\n+    }\n+\n+    @Override\n+    public void filterIpAddress(List<BaseCommentDTO> comments) {\n+        if (CollectionUtils.isEmpty(comments)) {\n+            return;\n+        }\n+\n+        comments.forEach(this::filterIpAddress);\n+    }\n+\n+    @Override\n+    public void filterIpAddress(Page<BaseCommentDTO> commentPage) {\n+        Assert.notNull(commentPage, \"Comment page must not be null\");\n+        commentPage.forEach(this::filterIpAddress);\n+    }\n+\n     /**\n      * Get children comments recursively.\n      *",
    "output": "Add filter ip address service in BaseCommentService"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n@@ -440,10 +440,11 @@ public ThemeProperty fetch(String uri) {\n             // Create temp path\n             Path themeTmpPath = tmpPath.resolve(HaloUtils.randomUUIDWithoutDash());\n \n-            if (StringUtils.endsWithIgnoreCase(uri, \".git\")) {\n-                cloneFromGit(uri, themeTmpPath);\n-            } else {\n+            if (StringUtils.endsWithIgnoreCase(uri, \".zip\")) {\n                 downloadZipAndUnzip(uri, themeTmpPath);\n+            } else {\n+                uri = StringUtils.appendIfMissingIgnoreCase(uri, \".git\", \".git\");\n+                cloneFromGit(uri, themeTmpPath);\n             }\n \n             return add(themeTmpPath);\n@@ -464,7 +465,7 @@ public void reload() {\n      *\n      * @param gitUrl     git url must not be blank\n      * @param targetPath target path must not be null\n-     * @throws GitAPIException\n+     * @throws GitAPIException throws when clone error\n      */\n     private void cloneFromGit(@NonNull String gitUrl, @NonNull Path targetPath) throws GitAPIException {\n         Assert.hasText(gitUrl, \"Git url must not be blank\");\n@@ -486,7 +487,7 @@ private void cloneFromGit(@NonNull String gitUrl, @NonNull Path targetPath) thro\n      *\n      * @param zipUrl     zip url must not be null\n      * @param targetPath target path must not be null\n-     * @throws IOException\n+     * @throws IOException throws when download zip or unzip error\n      */\n     private void downloadZipAndUnzip(@NonNull String zipUrl, @NonNull Path targetPath) throws IOException {\n         Assert.hasText(zipUrl, \"Zip url must not be blank\");\n@@ -514,7 +515,7 @@ private void downloadZipAndUnzip(@NonNull String zipUrl, @NonNull Path targetPat\n      * Creates temporary path.\n      *\n      * @return temporary path\n-     * @throws IOException\n+     * @throws IOException if an I/O error occurs or the temporary-file directory does not exist\n      */\n     @NonNull\n     private Path createTempPath() throws IOException {",
    "output": "Enhance theme fetching api"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/utils/MarkdownUtils.java b/src/main/java/run/halo/app/utils/MarkdownUtils.java\n--- a/src/main/java/run/halo/app/utils/MarkdownUtils.java\n+++ b/src/main/java/run/halo/app/utils/MarkdownUtils.java\n@@ -2,9 +2,13 @@\n \n import org.apache.commons.lang3.StringUtils;\n import org.commonmark.Extension;\n+import org.commonmark.ext.autolink.AutolinkExtension;\n import org.commonmark.ext.front.matter.YamlFrontMatterExtension;\n import org.commonmark.ext.front.matter.YamlFrontMatterVisitor;\n+import org.commonmark.ext.gfm.strikethrough.StrikethroughExtension;\n import org.commonmark.ext.gfm.tables.TablesExtension;\n+import org.commonmark.ext.heading.anchor.HeadingAnchorExtension;\n+import org.commonmark.ext.ins.InsExtension;\n import org.commonmark.node.Node;\n import org.commonmark.parser.Parser;\n import org.commonmark.renderer.html.HtmlRenderer;\n@@ -26,30 +30,73 @@\n  */\n public class MarkdownUtils {\n \n+\n+    /**\n+     * commonmark-java extension for autolinking\n+     */\n+    private static final Set<Extension> EXTENSIONS_AUTO_LINK = Collections.singleton(AutolinkExtension.create());\n+\n+    /**\n+     * commonmark-java extension for strikethrough\n+     */\n+    private static final Set<Extension> EXTENSIONS_STRIKETHROUGH = Collections.singleton(StrikethroughExtension.create());\n+\n+    /**\n+     * commonmark-java extension for tables\n+     */\n+    private static final Set<Extension> EXTENSIONS_TABLES = Collections.singleton(TablesExtension.create());\n+\n     /**\n-     * Front-matter extension\n+     * commonmark-java extension for adding id attributes to h tags\n      */\n-    private static final Set<Extension> EXTENSIONS_YAML = Collections.singleton(YamlFrontMatterExtension.create());\n+    private static final Set<Extension> EXTENSIONS_HEADING_ANCHOR = Collections.singleton(HeadingAnchorExtension.create());\n \n     /**\n-     * Table extension\n+     * commonmark-java extension for &lt;ins&gt; (underline)\n      */\n-    private static final Set<Extension> EXTENSIONS_TABLE = Collections.singleton(TablesExtension.create());\n+    private static final Set<Extension> EXTENSIONS_INS = Collections.singleton(InsExtension.create());\n+\n+    /**\n+     * commonmark-java extension for YAML front matter\n+     */\n+    private static final Set<Extension> EXTENSIONS_YAML_FRONT_MATTER = Collections.singleton(YamlFrontMatterExtension.create());\n+\n \n     /**\n      * Parse Markdown content\n      */\n-    private static final Parser PARSER = Parser.builder().extensions(EXTENSIONS_YAML).extensions(EXTENSIONS_TABLE).build();\n+    private static final Parser PARSER = Parser.builder()\n+            .extensions(EXTENSIONS_AUTO_LINK)\n+            .extensions(EXTENSIONS_STRIKETHROUGH)\n+            .extensions(EXTENSIONS_TABLES)\n+            .extensions(EXTENSIONS_HEADING_ANCHOR)\n+            .extensions(EXTENSIONS_INS)\n+            .extensions(EXTENSIONS_YAML_FRONT_MATTER)\n+            .build();\n \n     /**\n      * Render HTML content\n      */\n-    private static final HtmlRenderer RENDERER = HtmlRenderer.builder().extensions(EXTENSIONS_YAML).extensions(EXTENSIONS_TABLE).build();\n+    private static final HtmlRenderer RENDERER = HtmlRenderer.builder()\n+            .extensions(EXTENSIONS_AUTO_LINK)\n+            .extensions(EXTENSIONS_STRIKETHROUGH)\n+            .extensions(EXTENSIONS_TABLES)\n+            .extensions(EXTENSIONS_HEADING_ANCHOR)\n+            .extensions(EXTENSIONS_INS)\n+            .extensions(EXTENSIONS_YAML_FRONT_MATTER)\n+            .build();\n \n     /**\n      * Render text content\n      */\n-    private static final TextContentRenderer TEXT_CONTENT_RENDERER = TextContentRenderer.builder().extensions(EXTENSIONS_YAML).extensions(EXTENSIONS_TABLE).build();\n+    private static final TextContentRenderer TEXT_CONTENT_RENDERER = TextContentRenderer.builder()\n+            .extensions(EXTENSIONS_AUTO_LINK)\n+            .extensions(EXTENSIONS_STRIKETHROUGH)\n+            .extensions(EXTENSIONS_TABLES)\n+            .extensions(EXTENSIONS_HEADING_ANCHOR)\n+            .extensions(EXTENSIONS_INS)\n+            .extensions(EXTENSIONS_YAML_FRONT_MATTER)\n+            .build();\n \n     /**\n      * Render Markdown content\n@@ -59,20 +106,25 @@ public class MarkdownUtils {\n      * @see <a href=\"https://github.com/otale/tale/blob/master/src/main/java/com/tale/utils/TaleUtils.java\">TaleUtils.java</a>\n      */\n     public static String renderMarkdown(String content) {\n+\n         final Node document = PARSER.parse(content);\n         String renderContent = RENDERER.render(document);\n+\n         // render netease music short url\n         if (content.contains(HaloConst.NETEASE_MUSIC_PREFIX)) {\n             renderContent = content.replaceAll(HaloConst.NETEASE_MUSIC_REG_PATTERN, HaloConst.NETEASE_MUSIC_IFRAME);\n         }\n+\n         // render bilibili video short url\n         if (content.contains(HaloConst.BILIBILI_VIDEO_PREFIX)) {\n             renderContent = content.replaceAll(HaloConst.BILIBILI_VIDEO_REG_PATTERN, HaloConst.BILIBILI_VIDEO_IFRAME);\n         }\n+\n         // render youtube video short url\n         if (content.contains(HaloConst.YOUTUBE_VIDEO_PREFIX)) {\n             renderContent = content.replaceAll(HaloConst.YOUTUBE_VIDEO_REG_PATTERN, HaloConst.YOUTUBE_VIDEO_IFRAME);\n         }\n+\n         return renderContent;\n     }\n \n@@ -84,6 +136,7 @@ public static String renderMarkdown(String content) {\n      */\n     @NonNull\n     public static String renderText(@Nullable String markdownContent) {\n+\n         if (StringUtils.isBlank(markdownContent)) {\n             return \"\";\n         }",
    "output": "Refactor MarkdownUtils."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/repository/CategoryRepository.java b/src/main/java/run/halo/app/repository/CategoryRepository.java\n--- a/src/main/java/run/halo/app/repository/CategoryRepository.java\n+++ b/src/main/java/run/halo/app/repository/CategoryRepository.java\n@@ -36,4 +36,12 @@ public interface CategoryRepository extends BaseRepository<Category, Integer> {\n      * @return Optional of Category\n      */\n     Optional<Category> getBySlugName(@NonNull String slugName);\n+\n+    /**\n+     * Get category by name.\n+     *\n+     * @param name name\n+     * @return Optional of Category\n+     */\n+    Optional<Category> getByName(@NonNull String name);\n }\n\ndiff --git a/src/main/java/run/halo/app/repository/TagRepository.java b/src/main/java/run/halo/app/repository/TagRepository.java\n--- a/src/main/java/run/halo/app/repository/TagRepository.java\n+++ b/src/main/java/run/halo/app/repository/TagRepository.java\n@@ -29,4 +29,11 @@ public interface TagRepository extends BaseRepository<Tag, Integer> {\n      * @return Tag\n      */\n     Optional<Tag> getBySlugName(@NonNull String slugName);\n+\n+    /**\n+     * Get tag by name\n+     * @param name name\n+     * @return Tag\n+     */\n+    Optional<Tag> getByName(@NonNull String name);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/CategoryService.java b/src/main/java/run/halo/app/service/CategoryService.java\n--- a/src/main/java/run/halo/app/service/CategoryService.java\n+++ b/src/main/java/run/halo/app/service/CategoryService.java\n@@ -36,6 +36,14 @@ public interface CategoryService extends CrudService<Category, Integer> {\n     @NonNull\n     Category getBySlugName(@NonNull String slugName);\n \n+    /**\n+     * Get Category by name.\n+     *\n+     * @param name name\n+     * @return Category\n+     */\n+    Category getByName(@NonNull String name);\n+\n     /**\n      * Removes category and post categories.\n      *\n\ndiff --git a/src/main/java/run/halo/app/service/PostService.java b/src/main/java/run/halo/app/service/PostService.java\n--- a/src/main/java/run/halo/app/service/PostService.java\n+++ b/src/main/java/run/halo/app/service/PostService.java\n@@ -104,7 +104,7 @@ public interface PostService extends BasePostService<Post> {\n      * @return imported post\n      */\n     @NonNull\n-    Post importMarkdown(@NonNull String markdown);\n+    PostDetailVO importMarkdown(@NonNull String markdown);\n \n     /**\n      * Export post to markdown file by post id.\n\ndiff --git a/src/main/java/run/halo/app/service/TagService.java b/src/main/java/run/halo/app/service/TagService.java\n--- a/src/main/java/run/halo/app/service/TagService.java\n+++ b/src/main/java/run/halo/app/service/TagService.java\n@@ -25,6 +25,14 @@ public interface TagService extends CrudService<Tag, Integer> {\n     @NonNull\n     Tag getBySlugNameOfNonNull(@NonNull String slugName);\n \n+    /**\n+     * Get tag by tag name.\n+     *\n+     * @param name name\n+     * @return Tag\n+     */\n+    Tag getByName(@NonNull String name);\n+\n     /**\n      * Converts to tag dto.\n      *\n\ndiff --git a/src/main/java/run/halo/app/service/impl/CategoryServiceImpl.java b/src/main/java/run/halo/app/service/impl/CategoryServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/CategoryServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/CategoryServiceImpl.java\n@@ -154,6 +154,11 @@ public Category getBySlugName(String slugName) {\n         return categoryRepository.getBySlugName(slugName).orElseThrow(() -> new NotFoundException(\"The Category does not exist\").setErrorData(slugName));\n     }\n \n+    @Override\n+    public Category getByName(String name) {\n+        return categoryRepository.getByName(name).orElse(null);\n+    }\n+\n     @Override\n     public void removeCategoryAndPostCategoryBy(Integer categoryId) {\n         // Remove category\n\ndiff --git a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n@@ -1,5 +1,6 @@\n package run.halo.app.service.impl;\n \n+import cn.hutool.core.date.DateUtil;\n import cn.hutool.core.text.StrBuilder;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.lang3.StringUtils;\n@@ -29,6 +30,7 @@\n import run.halo.app.utils.DateUtils;\n import run.halo.app.utils.MarkdownUtils;\n import run.halo.app.utils.ServiceUtils;\n+import run.halo.app.utils.SlugUtils;\n \n import javax.persistence.criteria.Predicate;\n import javax.persistence.criteria.Root;\n@@ -275,7 +277,7 @@ public List<ArchiveMonthVO> listMonthArchives() {\n     }\n \n     @Override\n-    public Post importMarkdown(String markdown) {\n+    public PostDetailVO importMarkdown(String markdown) {\n         Assert.notNull(markdown, \"Markdown document must not be null\");\n \n         // Render markdown to html document.\n@@ -284,7 +286,69 @@ public Post importMarkdown(String markdown) {\n         // Gets frontMatter\n         Map<String, List<String>> frontMatter = MarkdownUtils.getFrontMatter(markdown);\n \n-        return null;\n+        Post post = new Post();\n+\n+        List<String> elementValue;\n+\n+        Set<Integer> tagIds = new HashSet<>();\n+\n+        Set<Integer> categoryIds = new HashSet<>();\n+        if (frontMatter.size() > 0) {\n+            for (String key : frontMatter.keySet()) {\n+                elementValue = frontMatter.get(key);\n+                for (String ele : elementValue) {\n+                    switch (key) {\n+                        case \"title\":\n+                            post.setTitle(ele);\n+                            break;\n+                        case \"date\":\n+                            post.setCreateTime(DateUtil.parse(ele));\n+                            break;\n+                        case \"updated\":\n+                            post.setUpdateTime(DateUtil.parse(ele));\n+                            break;\n+                        case \"permalink\":\n+                            post.setUrl(ele);\n+                            break;\n+                        case \"thumbnail\":\n+                            post.setThumbnail(ele);\n+                            break;\n+                        case \"status\":\n+                            post.setStatus(PostStatus.valueOf(ele));\n+                            break;\n+                        case \"comments\":\n+                            post.setDisallowComment(Boolean.parseBoolean(ele));\n+                            break;\n+                        case \"tags\":\n+                            Tag tag = tagService.getByName(ele);\n+                            if (null == tag) {\n+                                tag = new Tag();\n+                                tag.setName(ele);\n+                                tag.setSlugName(SlugUtils.slugify(ele));\n+                                tag = tagService.create(tag);\n+                            }\n+                            tagIds.add(tag.getId());\n+                        case \"categories\":\n+                            Category category = categoryService.getByName(ele);\n+                            if (null == category) {\n+                                category = new Category();\n+                                category.setName(ele);\n+                                category.setSlugName(SlugUtils.slugify(ele));\n+                                category.setDescription(ele);\n+                                category = categoryService.create(category);\n+                            }\n+                            categoryIds.add(category.getId());\n+                        default:\n+                            break;\n+                    }\n+                }\n+            }\n+        }\n+\n+        post.setOriginalContent(markdown);\n+        post.setFormatContent(content);\n+\n+        return createBy(post, tagIds, categoryIds, false);\n     }\n \n     @Override\n\ndiff --git a/src/main/java/run/halo/app/service/impl/TagServiceImpl.java b/src/main/java/run/halo/app/service/impl/TagServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/TagServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/TagServiceImpl.java\n@@ -60,6 +60,12 @@ public Tag getBySlugNameOfNonNull(String slugName) {\n         return tagRepository.getBySlugName(slugName).orElseThrow(() -> new NotFoundException(\"The tag does not exist\").setErrorData(slugName));\n     }\n \n+\n+    @Override\n+    public Tag getByName(String name) {\n+        return tagRepository.getByName(name).orElse(null);\n+    }\n+\n     @Override\n     public TagDTO convertTo(Tag tag) {\n         Assert.notNull(tag, \"Tag must not be null\");",
    "output": "Complete markdown import service."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/SheetController.java b/src/main/java/run/halo/app/controller/admin/api/SheetController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/SheetController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/SheetController.java\n@@ -5,6 +5,7 @@\n import org.springframework.data.domain.Pageable;\n import org.springframework.data.web.PageableDefault;\n import org.springframework.web.bind.annotation.*;\n+import run.halo.app.model.dto.InternalSheetDTO;\n import run.halo.app.model.dto.post.BasePostDetailDTO;\n import run.halo.app.model.entity.Sheet;\n import run.halo.app.model.enums.PostStatus;\n@@ -13,13 +14,15 @@\n import run.halo.app.service.SheetService;\n \n import javax.validation.Valid;\n+import java.util.List;\n \n import static org.springframework.data.domain.Sort.Direction.DESC;\n \n /**\n  * Sheet controller.\n  *\n  * @author johnniang\n+ * @author ryanwang\n  * @date 19-4-24\n  */\n @RestController\n@@ -46,6 +49,12 @@ public Page<SheetListVO> pageBy(@PageableDefault(sort = \"editTime\", direction =\n         return sheetService.convertToListVo(sheetPage);\n     }\n \n+    @GetMapping(\"internal\")\n+    @ApiOperation(\"Lists internal sheets\")\n+    public List<InternalSheetDTO> internalSheets() {\n+        return sheetService.listInternal();\n+    }\n+\n     @PostMapping\n     @ApiOperation(\"Creates a sheet\")\n     public BasePostDetailDTO createBy(@RequestBody @Valid SheetParam sheetParam,\n\ndiff --git a/src/main/java/run/halo/app/model/dto/InternalSheetDTO.java b/src/main/java/run/halo/app/model/dto/InternalSheetDTO.java\n--- a/src/main/java/run/halo/app/model/dto/InternalSheetDTO.java\n+++ b/src/main/java/run/halo/app/model/dto/InternalSheetDTO.java\n@@ -0,0 +1,21 @@\n+package run.halo.app.model.dto;\n+\n+import lombok.Data;\n+\n+/**\n+ * Theme controller.\n+ *\n+ * @author ryanwang\n+ * @date : 2019/5/4\n+ */\n+@Data\n+public class InternalSheetDTO {\n+\n+    private Integer id;\n+\n+    private String title;\n+\n+    private String url;\n+\n+    private boolean status;\n+}\n\ndiff --git a/src/main/java/run/halo/app/service/SheetService.java b/src/main/java/run/halo/app/service/SheetService.java\n--- a/src/main/java/run/halo/app/service/SheetService.java\n+++ b/src/main/java/run/halo/app/service/SheetService.java\n@@ -2,15 +2,19 @@\n \n import org.springframework.data.domain.Page;\n import org.springframework.lang.NonNull;\n+import run.halo.app.model.dto.InternalSheetDTO;\n import run.halo.app.model.entity.Sheet;\n import run.halo.app.model.enums.PostStatus;\n import run.halo.app.model.vo.SheetListVO;\n import run.halo.app.service.base.BasePostService;\n \n+import java.util.List;\n+\n /**\n  * Sheet service interface.\n  *\n  * @author johnniang\n+ * @author ryanwang\n  * @date 19-4-24\n  */\n public interface SheetService extends BasePostService<Sheet> {\n@@ -72,6 +76,14 @@ public interface SheetService extends BasePostService<Sheet> {\n     @NonNull\n     String exportMarkdown(@NonNull Sheet sheet);\n \n+    /**\n+     * List internal sheets.\n+     *\n+     * @return list of internal sheets\n+     */\n+    @NonNull\n+    List<InternalSheetDTO> listInternal();\n+\n     /**\n      * Converts to list dto page.\n      *\n\ndiff --git a/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java b/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n@@ -8,6 +8,7 @@\n import org.springframework.util.Assert;\n import run.halo.app.event.logger.LogEvent;\n import run.halo.app.event.post.SheetVisitEvent;\n+import run.halo.app.model.dto.InternalSheetDTO;\n import run.halo.app.model.entity.Sheet;\n import run.halo.app.model.enums.LogType;\n import run.halo.app.model.enums.PostStatus;\n@@ -16,9 +17,11 @@\n import run.halo.app.service.OptionService;\n import run.halo.app.service.SheetCommentService;\n import run.halo.app.service.SheetService;\n+import run.halo.app.service.ThemeService;\n import run.halo.app.utils.MarkdownUtils;\n import run.halo.app.utils.ServiceUtils;\n \n+import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n@@ -27,6 +30,7 @@\n  * Sheet service implementation.\n  *\n  * @author johnniang\n+ * @author ryanwang\n  * @date 19-4-24\n  */\n @Service\n@@ -38,14 +42,18 @@ public class SheetServiceImpl extends BasePostServiceImpl<Sheet> implements Shee\n \n     private final SheetCommentService sheetCommentService;\n \n+    private final ThemeService themeService;\n+\n     public SheetServiceImpl(SheetRepository sheetRepository,\n                             ApplicationEventPublisher eventPublisher,\n                             SheetCommentService sheetCommentService,\n-                            OptionService optionService) {\n+                            OptionService optionService,\n+                            ThemeService themeService) {\n         super(sheetRepository, optionService);\n         this.sheetRepository = sheetRepository;\n         this.eventPublisher = eventPublisher;\n         this.sheetCommentService = sheetCommentService;\n+        this.themeService = themeService;\n     }\n \n     @Override\n@@ -136,6 +144,39 @@ public String exportMarkdown(Sheet sheet) {\n         return content.toString();\n     }\n \n+    @Override\n+    public List<InternalSheetDTO> listInternal() {\n+\n+        List<InternalSheetDTO> internalSheetDTOS = new ArrayList<>();\n+\n+        // links sheet\n+        InternalSheetDTO linkSheet = new InternalSheetDTO();\n+        linkSheet.setId(1);\n+        linkSheet.setTitle(\"友情链接\");\n+        linkSheet.setUrl(\"/links\");\n+        linkSheet.setStatus(themeService.templateExists(\"links.ftl\"));\n+\n+        // photos sheet\n+        InternalSheetDTO photoSheet = new InternalSheetDTO();\n+        photoSheet.setId(2);\n+        photoSheet.setTitle(\"图库页面\");\n+        photoSheet.setUrl(\"/photos\");\n+        photoSheet.setStatus(themeService.templateExists(\"photos.ftl\"));\n+\n+        // journals sheet\n+        InternalSheetDTO journalSheet = new InternalSheetDTO();\n+        journalSheet.setId(3);\n+        journalSheet.setTitle(\"日志页面\");\n+        journalSheet.setUrl(\"/journals\");\n+        journalSheet.setStatus(themeService.templateExists(\"journals.ftl\"));\n+\n+        internalSheetDTOS.add(linkSheet);\n+        internalSheetDTOS.add(photoSheet);\n+        internalSheetDTOS.add(journalSheet);\n+\n+        return internalSheetDTOS;\n+    }\n+\n     @Override\n     public Sheet removeById(Integer id) {\n         Sheet sheet = super.removeById(id);",
    "output": "Support internal sheet list api."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/api/JournalController.java b/src/main/java/run/halo/app/controller/content/api/JournalController.java\n--- a/src/main/java/run/halo/app/controller/content/api/JournalController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/JournalController.java\n@@ -9,7 +9,6 @@\n import run.halo.app.cache.lock.CacheLock;\n import run.halo.app.model.dto.BaseCommentDTO;\n import run.halo.app.model.entity.JournalComment;\n-import run.halo.app.model.entity.PostComment;\n import run.halo.app.model.enums.CommentStatus;\n import run.halo.app.model.params.JournalCommentParam;\n import run.halo.app.model.vo.BaseCommentVO;",
    "output": "Format Code."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/api/JournalController.java b/src/main/java/run/halo/app/controller/content/api/JournalController.java\n--- a/src/main/java/run/halo/app/controller/content/api/JournalController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/JournalController.java\n@@ -8,13 +8,19 @@\n import org.springframework.web.bind.annotation.*;\n import run.halo.app.cache.lock.CacheLock;\n import run.halo.app.model.dto.BaseCommentDTO;\n+import run.halo.app.model.entity.JournalComment;\n+import run.halo.app.model.entity.PostComment;\n+import run.halo.app.model.enums.CommentStatus;\n import run.halo.app.model.params.JournalCommentParam;\n import run.halo.app.model.vo.BaseCommentVO;\n import run.halo.app.model.vo.BaseCommentWithParentVO;\n+import run.halo.app.model.vo.CommentWithHasChildrenVO;\n import run.halo.app.service.JournalCommentService;\n import run.halo.app.service.JournalService;\n import run.halo.app.service.OptionService;\n \n+import java.util.List;\n+\n import static org.springframework.data.domain.Sort.Direction.DESC;\n \n /**\n@@ -39,6 +45,23 @@ public JournalController(JournalService journalService,\n         this.optionService = optionService;\n     }\n \n+    @GetMapping(\"{journalId:\\\\d+}/comments/top_view\")\n+    public Page<CommentWithHasChildrenVO> listTopComments(@PathVariable(\"journalId\") Integer journalId,\n+                                                          @RequestParam(name = \"page\", required = false, defaultValue = \"0\") int page,\n+                                                          @SortDefault(sort = \"createTime\", direction = DESC) Sort sort) {\n+        return journalCommentService.pageTopCommentsBy(journalId, CommentStatus.PUBLISHED, PageRequest.of(page, optionService.getCommentPageSize(), sort));\n+    }\n+\n+    @GetMapping(\"{journalId:\\\\d+}/comments/{commentParentId:\\\\d+}/children\")\n+    public List<BaseCommentDTO> listChildrenBy(@PathVariable(\"journalId\") Integer journalId,\n+                                               @PathVariable(\"commentParentId\") Long commentParentId,\n+                                               @SortDefault(sort = \"createTime\", direction = DESC) Sort sort) {\n+        // Find all children comments\n+        List<JournalComment> postComments = journalCommentService.listChildrenBy(journalId, commentParentId, CommentStatus.PUBLISHED, sort);\n+        // Convert to base comment dto\n+        return journalCommentService.convertTo(postComments);\n+    }\n+\n     @GetMapping(\"{journalId:\\\\d+}/comments/tree_view\")\n     @ApiOperation(\"Lists comments with tree view\")\n     public Page<BaseCommentVO> listCommentsTree(@PathVariable(\"journalId\") Integer journalId,",
    "output": "Complete: #169"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/properties/CommentProperties.java b/src/main/java/run/halo/app/model/properties/CommentProperties.java\n--- a/src/main/java/run/halo/app/model/properties/CommentProperties.java\n+++ b/src/main/java/run/halo/app/model/properties/CommentProperties.java\n@@ -4,7 +4,8 @@\n  * Comment properties.\n  *\n  * @author johnniang\n- * @date 4/1/19\n+ * @author ryanwang\n+ * @date 2019-04-01\n  */\n public enum CommentProperties implements PropertyEnum {\n \n@@ -22,9 +23,7 @@ public enum CommentProperties implements PropertyEnum {\n \n     PAGE_SIZE(\"comment_page_size\", Integer.class, \"10\"),\n \n-    CONTENT_PLACEHOLDER(\"comment_content_placeholder\", String.class, \"\"),\n-\n-    CUSTOM_STYLE(\"comment_custom_style\", String.class, \"\");\n+    CONTENT_PLACEHOLDER(\"comment_content_placeholder\", String.class, \"\");\n \n     private final String value;\n \n\ndiff --git a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n@@ -3,6 +3,7 @@\n import cn.hutool.core.lang.Validator;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.lang.NonNull;\n import org.springframework.stereotype.Service;\n import org.springframework.util.Assert;\n@@ -58,6 +59,8 @@ public class AdminServiceImpl implements AdminService {\n \n     private final StringCacheStore cacheStore;\n \n+    private final ApplicationEventPublisher eventPublisher;\n+\n     private final String driverClassName;\n \n     public AdminServiceImpl(PostService postService,\n@@ -70,6 +73,7 @@ public AdminServiceImpl(PostService postService,\n                             UserService userService,\n                             LinkService linkService,\n                             StringCacheStore cacheStore,\n+                            ApplicationEventPublisher eventPublisher,\n                             @Value(\"${spring.datasource.driver-class-name}\") String driverClassName) {\n         this.postService = postService;\n         this.sheetService = sheetService;\n@@ -81,6 +85,7 @@ public AdminServiceImpl(PostService postService,\n         this.userService = userService;\n         this.linkService = linkService;\n         this.cacheStore = cacheStore;\n+        this.eventPublisher = eventPublisher;\n         this.driverClassName = driverClassName;\n     }\n \n@@ -112,7 +117,7 @@ public AuthToken authenticate(LoginParam loginParam) {\n \n         if (SecurityContextHolder.getContext().isAuthenticated()) {\n             // If the user has been logged in\n-            throw new BadRequestException(\"You have been logged in, do not log in repeatedly please\");\n+            throw new BadRequestException(\"您已登录，请不要重复登录\");\n         }\n \n         // Generate new token\n@@ -125,7 +130,7 @@ public void clearToken() {\n         Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n \n         if (authentication == null) {\n-            throw new BadRequestException(\"You haven't logged in yet, so you can't log out\");\n+            throw new BadRequestException(\"您尚未登录，因此无法注销\");\n         }\n \n         // Get current user\n\ndiff --git a/src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java b/src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java\n@@ -188,7 +188,7 @@ private void pathMustNotExist(@NonNull Attachment attachment) {\n         long pathCount = attachmentRepository.countByPath(attachment.getPath());\n \n         if (pathCount > 0) {\n-            throw new AlreadyExistsException(\"The attachment with path \" + attachment.getPath() + \" exists already\");\n+            throw new AlreadyExistsException(\"附件路径为 \" + attachment.getPath() + \" 已经存在\");\n         }\n     }\n ",
    "output": "Remove CUSTOM_STYLE properties"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/ContentJournalController.java b/src/main/java/run/halo/app/controller/content/ContentJournalController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentJournalController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentJournalController.java\n@@ -70,8 +70,8 @@ public String journals(Model model) {\n      */\n     @GetMapping(value = \"page/{page}\")\n     public String journals(Model model,\n-                           @PathVariable(value = \"page\") Integer page,\n-                           @SortDefault(sort = \"createTime\", direction = DESC) Sort sort) {\n+                          @PathVariable(value = \"page\") Integer page,\n+                          @SortDefault(sort = \"createTime\", direction = DESC) Sort sort) {\n         log.debug(\"Requested journal page, sort info: [{}]\", sort);\n \n         int pageSize = optionService.getPostPageSize();",
    "output": "Merge branch 'dev' of https://github.com/halo-dev/halo into dev"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/api/SheetController.java b/src/main/java/run/halo/app/controller/content/api/SheetController.java\n--- a/src/main/java/run/halo/app/controller/content/api/SheetController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/SheetController.java\n@@ -8,13 +8,18 @@\n import org.springframework.web.bind.annotation.*;\n import run.halo.app.cache.lock.CacheLock;\n import run.halo.app.model.dto.BaseCommentDTO;\n+import run.halo.app.model.entity.SheetComment;\n+import run.halo.app.model.enums.CommentStatus;\n import run.halo.app.model.params.SheetCommentParam;\n import run.halo.app.model.vo.BaseCommentVO;\n import run.halo.app.model.vo.BaseCommentWithParentVO;\n+import run.halo.app.model.vo.CommentWithHasChildrenVO;\n import run.halo.app.service.OptionService;\n import run.halo.app.service.SheetCommentService;\n import run.halo.app.service.SheetService;\n \n+import java.util.List;\n+\n import static org.springframework.data.domain.Sort.Direction.DESC;\n \n /**\n@@ -39,6 +44,23 @@ public SheetController(SheetService sheetService, SheetCommentService sheetComme\n         this.optionService = optionService;\n     }\n \n+    @GetMapping(\"{sheetId:\\\\d+}/comments/top_view\")\n+    public Page<CommentWithHasChildrenVO> listTopComments(@PathVariable(\"sheetId\") Integer sheetId,\n+                                                          @RequestParam(name = \"page\", required = false, defaultValue = \"0\") int page,\n+                                                          @SortDefault(sort = \"createTime\", direction = DESC) Sort sort) {\n+        return sheetCommentService.pageTopCommentsBy(sheetId, CommentStatus.PUBLISHED, PageRequest.of(page, optionService.getCommentPageSize(), sort));\n+    }\n+\n+    @GetMapping(\"{sheetId:\\\\d+}/comments/{commentParentId:\\\\d+}/children\")\n+    public List<BaseCommentDTO> listChildrenBy(@PathVariable(\"sheetId\") Integer sheetId,\n+                                               @PathVariable(\"commentParentId\") Long commentParentId,\n+                                               @SortDefault(sort = \"createTime\", direction = DESC) Sort sort) {\n+        // Find all children comments\n+        List<SheetComment> sheetComments = sheetCommentService.listChildrenBy(sheetId, commentParentId, CommentStatus.PUBLISHED, sort);\n+        // Convert to base comment dto\n+        return sheetCommentService.convertTo(sheetComments);\n+    }\n+\n \n     @GetMapping(\"{sheetId:\\\\d+}/comments/tree_view\")\n     @ApiOperation(\"Lists comments with tree view\")",
    "output": "Add comment api for sheet."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/ContentJournalController.java b/src/main/java/run/halo/app/controller/content/ContentJournalController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentJournalController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentJournalController.java\n@@ -70,8 +70,8 @@ public String journals(Model model) {\n      */\n     @GetMapping(value = \"page/{page}\")\n     public String journals(Model model,\n-                           @PathVariable(value = \"page\") Integer page,\n-                           @SortDefault(sort = \"createTime\", direction = DESC) Sort sort) {\n+                          @PathVariable(value = \"page\") Integer page,\n+                          @SortDefault(sort = \"createTime\", direction = DESC) Sort sort) {\n         log.debug(\"Requested journal page, sort info: [{}]\", sort);\n \n         int pageSize = optionService.getPostPageSize();",
    "output": "Resolve conflict"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/HaloConfiguration.java b/src/main/java/run/halo/app/config/HaloConfiguration.java\n--- a/src/main/java/run/halo/app/config/HaloConfiguration.java\n+++ b/src/main/java/run/halo/app/config/HaloConfiguration.java\n@@ -113,7 +113,7 @@ public FilterRegistrationBean<ApiAuthenticationFilter> apiAuthenticationFilter(H\n         ApiAuthenticationFilter apiFilter = new ApiAuthenticationFilter(haloProperties, optionService);\n         apiFilter.addExcludeUrlPatterns(\n                 \"/api/content/*/comments\",\n-                \"/api/content/**/comments/*\"\n+                \"/api/content/**/comments/**\"\n         );\n \n         DefaultAuthenticationFailureHandler failureHandler = new DefaultAuthenticationFailureHandler();\n\ndiff --git a/src/main/java/run/halo/app/controller/content/api/PostController.java b/src/main/java/run/halo/app/controller/content/api/PostController.java\n--- a/src/main/java/run/halo/app/controller/content/api/PostController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/PostController.java\n@@ -97,7 +97,6 @@ public List<BaseCommentDTO> listChildrenBy(@PathVariable(\"postId\") Integer postI\n         return postCommentService.convertTo(postComments);\n     }\n \n-\n     @GetMapping(\"{postId:\\\\d+}/comments/tree_view\")\n     @ApiOperation(\"Lists comments with tree view\")\n     public Page<BaseCommentVO> listCommentsTree(@PathVariable(\"postId\") Integer postId,",
    "output": "Change exclude url pattern for comment related api"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/MainController.java b/src/main/java/run/halo/app/controller/content/MainController.java\n--- a/src/main/java/run/halo/app/controller/content/MainController.java\n+++ b/src/main/java/run/halo/app/controller/content/MainController.java\n@@ -63,4 +63,12 @@ public void logo(HttpServletResponse response) throws IOException {\n             response.sendRedirect(blogLogo);\n         }\n     }\n+\n+    @GetMapping(\"/favicon.ico\")\n+    public void favicon(HttpServletResponse response) throws IOException {\n+        String favicon = optionService.getByProperty(BlogProperties.BLOG_FAVICON).orElse(\"\").toString();\n+        if (StringUtils.isNotEmpty(favicon)) {\n+            response.sendRedirect(favicon);\n+        }\n+    }\n }\n\ndiff --git a/src/main/java/run/halo/app/controller/core/CommonController.java b/src/main/java/run/halo/app/controller/core/CommonController.java\n--- a/src/main/java/run/halo/app/controller/core/CommonController.java\n+++ b/src/main/java/run/halo/app/controller/core/CommonController.java\n@@ -75,7 +75,7 @@ public String contentNotFround() {\n             return \"common/error/404\";\n         }\n         StrBuilder path = new StrBuilder(\"themes/\");\n-        path.append(themeService.getActivatedThemeId());\n+        path.append(themeService.getActivatedTheme().getFolderName());\n         path.append(\"/404\");\n         return path.toString();\n     }\n@@ -91,7 +91,7 @@ public String contentInternalError() {\n             return \"common/error/500\";\n         }\n         StrBuilder path = new StrBuilder(\"themes/\");\n-        path.append(themeService.getActivatedThemeId());\n+        path.append(themeService.getActivatedTheme().getFolderName());\n         path.append(\"/500\");\n         return path.toString();\n     }",
    "output": "Fixed 404 or 500 page rendered error."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/handler/theme/config/impl/YamlThemeConfigResolverImpl.java b/src/main/java/run/halo/app/handler/theme/config/impl/YamlThemeConfigResolverImpl.java\n--- a/src/main/java/run/halo/app/handler/theme/config/impl/YamlThemeConfigResolverImpl.java\n+++ b/src/main/java/run/halo/app/handler/theme/config/impl/YamlThemeConfigResolverImpl.java\n@@ -115,6 +115,7 @@ private List<Item> handleItems(@Nullable Object items) {\n                 item.setDataType(DataType.typeOf(dataType));\n                 item.setType(InputType.typeOf(itemMap.get(\"type\")));\n                 item.setDefaultValue(itemMap.get(\"default\"));\n+                item.setPlaceholder(itemMap.getOrDefault(\"placeholder\", \"\").toString());\n \n                 // Handle options\n                 item.setOptions(handleOptions(itemMap.get(\"options\")));\n@@ -140,6 +141,7 @@ private List<Item> handleItems(@Nullable Object items) {\n                 item.setDataType(DataType.typeOf(dataType));\n                 item.setType(InputType.typeOf(itemMap.get(\"type\")));\n                 item.setDefaultValue(itemMap.get(\"default\"));\n+                item.setPlaceholder(itemMap.getOrDefault(\"placeholder\", \"\").toString());\n \n                 // Handle options\n                 item.setOptions(handleOptions(itemMap.get(\"options\")));\n\ndiff --git a/src/main/java/run/halo/app/handler/theme/config/support/Item.java b/src/main/java/run/halo/app/handler/theme/config/support/Item.java\n--- a/src/main/java/run/halo/app/handler/theme/config/support/Item.java\n+++ b/src/main/java/run/halo/app/handler/theme/config/support/Item.java\n@@ -41,6 +41,11 @@ public class Item {\n      */\n     private Object defaultValue;\n \n+    /**\n+     * Text item placeholder.\n+     */\n+    private String placeholder;\n+\n     /**\n      * Item's options, default is empty list\n      */",
    "output": "Support placeholder property for theme setting item."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/PostService.java b/src/main/java/run/halo/app/service/PostService.java\n--- a/src/main/java/run/halo/app/service/PostService.java\n+++ b/src/main/java/run/halo/app/service/PostService.java\n@@ -106,6 +106,24 @@ public interface PostService extends BasePostService<Post> {\n     @NonNull\n     Post importMarkdown(@NonNull String markdown);\n \n+    /**\n+     * Export post to markdown file by post id.\n+     *\n+     * @param id post id\n+     * @return markdown file content\n+     */\n+    @NonNull\n+    String exportMarkdown(@NonNull Integer id);\n+\n+    /**\n+     * Export post to markdown file by post.\n+     *\n+     * @param post current post\n+     * @return markdown file content\n+     */\n+    @NonNull\n+    String exportMarkdown(@NonNull Post post);\n+\n     /**\n      * Converts to detail vo.\n      *\n\ndiff --git a/src/main/java/run/halo/app/service/SheetService.java b/src/main/java/run/halo/app/service/SheetService.java\n--- a/src/main/java/run/halo/app/service/SheetService.java\n+++ b/src/main/java/run/halo/app/service/SheetService.java\n@@ -54,6 +54,24 @@ public interface SheetService extends BasePostService<Sheet> {\n     @NonNull\n     Sheet importMarkdown(@NonNull String markdown);\n \n+    /**\n+     * Export sheet to markdown file by sheet id.\n+     *\n+     * @param id sheet id\n+     * @return markdown file content\n+     */\n+    @NonNull\n+    String exportMarkdown(@NonNull Integer id);\n+\n+    /**\n+     * Export sheet to markdown file by sheet.\n+     *\n+     * @param sheet current sheet\n+     * @return markdown file content\n+     */\n+    @NonNull\n+    String exportMarkdown(@NonNull Sheet sheet);\n+\n     /**\n      * Converts to list dto page.\n      *\n\ndiff --git a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n@@ -1,5 +1,6 @@\n package run.halo.app.service.impl;\n \n+import cn.hutool.core.text.StrBuilder;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.lang3.StringUtils;\n import org.springframework.context.ApplicationEventPublisher;\n@@ -286,6 +287,51 @@ public Post importMarkdown(String markdown) {\n         return null;\n     }\n \n+    @Override\n+    public String exportMarkdown(Integer id) {\n+        Assert.notNull(id, \"Post id must not be null\");\n+        Post post = getById(id);\n+        return exportMarkdown(post);\n+    }\n+\n+    @Override\n+    public String exportMarkdown(Post post) {\n+        Assert.notNull(post, \"Post must not be null\");\n+\n+        StrBuilder content = new StrBuilder(\"---\\n\");\n+\n+        content.append(\"type: \").append(\"post\").append(\"\\n\");\n+        content.append(\"title: \").append(post.getTitle()).append(\"\\n\");\n+        content.append(\"permalink: \").append(post.getUrl()).append(\"\\n\");\n+        content.append(\"thumbnail: \").append(post.getThumbnail()).append(\"\\n\");\n+        content.append(\"status: \").append(post.getStatus()).append(\"\\n\");\n+        content.append(\"date: \").append(post.getCreateTime()).append(\"\\n\");\n+        content.append(\"updated: \").append(post.getEditTime()).append(\"\\n\");\n+        content.append(\"comments: \").append(!post.getDisallowComment()).append(\"\\n\");\n+\n+        List<Tag> tags = postTagService.listTagsBy(post.getId());\n+\n+        if (tags.size() > 0) {\n+            content.append(\"tags:\").append(\"\\n\");\n+            for (Tag tag : tags) {\n+                content.append(\"  - \").append(tag.getName()).append(\"\\n\");\n+            }\n+        }\n+\n+        List<Category> categories = postCategoryService.listCategoryBy(post.getId());\n+\n+        if (categories.size() > 0) {\n+            content.append(\"categories:\").append(\"\\n\");\n+            for (Category category : categories) {\n+                content.append(\"  - \").append(category.getName()).append(\"\\n\");\n+            }\n+        }\n+\n+        content.append(\"---\\n\\n\");\n+        content.append(post.getOriginalContent());\n+        return content.toString();\n+    }\n+\n     @Override\n     public PostDetailVO convertToDetailVo(Post post) {\n         return convertTo(post,\n\ndiff --git a/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java b/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n@@ -1,5 +1,6 @@\n package run.halo.app.service.impl;\n \n+import cn.hutool.core.text.StrBuilder;\n import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.Pageable;\n@@ -108,6 +109,33 @@ public Sheet importMarkdown(String markdown) {\n         return null;\n     }\n \n+    @Override\n+    public String exportMarkdown(Integer id) {\n+        Assert.notNull(id, \"sheet id must not be null\");\n+        Sheet sheet = getById(id);\n+        return exportMarkdown(sheet);\n+    }\n+\n+    @Override\n+    public String exportMarkdown(Sheet sheet) {\n+        Assert.notNull(sheet, \"Sheet must not be null\");\n+\n+        StrBuilder content = new StrBuilder(\"---\\n\");\n+\n+        content.append(\"type: \").append(\"sheet\").append(\"\\n\");\n+        content.append(\"title: \").append(sheet.getTitle()).append(\"\\n\");\n+        content.append(\"permalink: \").append(sheet.getUrl()).append(\"\\n\");\n+        content.append(\"thumbnail: \").append(sheet.getThumbnail()).append(\"\\n\");\n+        content.append(\"status: \").append(sheet.getStatus()).append(\"\\n\");\n+        content.append(\"date: \").append(sheet.getCreateTime()).append(\"\\n\");\n+        content.append(\"updated: \").append(sheet.getEditTime()).append(\"\\n\");\n+        content.append(\"comments: \").append(!sheet.getDisallowComment()).append(\"\\n\");\n+\n+        content.append(\"---\\n\\n\");\n+        content.append(sheet.getOriginalContent());\n+        return content.toString();\n+    }\n+\n     @Override\n     public Sheet removeById(Integer id) {\n         Sheet sheet = super.removeById(id);\n\ndiff --git a/src/test/java/run/halo/app/service/impl/PostServiceImplTest.java b/src/test/java/run/halo/app/service/impl/PostServiceImplTest.java\n--- a/src/test/java/run/halo/app/service/impl/PostServiceImplTest.java\n+++ b/src/test/java/run/halo/app/service/impl/PostServiceImplTest.java\n@@ -0,0 +1,24 @@\n+package run.halo.app.service.impl;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.test.context.ActiveProfiles;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@SpringBootTest\n+@ActiveProfiles(\"dev\")\n+public class PostServiceImplTest {\n+\n+    @Autowired\n+    private PostServiceImpl postService;\n+\n+    @Test\n+    public void getContent(){\n+        String exportMarkdown = postService.exportMarkdown(18);\n+        System.out.println(exportMarkdown);\n+    }\n+}\n\\ No newline at end of file",
    "output": "Support post and sheet export."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/event/comment/CommentEventListener.java b/src/main/java/run/halo/app/event/comment/CommentEventListener.java\n--- a/src/main/java/run/halo/app/event/comment/CommentEventListener.java\n+++ b/src/main/java/run/halo/app/event/comment/CommentEventListener.java\n@@ -70,7 +70,7 @@ public void handleCommentNewEvent(CommentNewEvent newEvent) {\n \n         Map<String, Object> data = new HashMap<>();\n \n-        if (newEvent.getSource() instanceof PostService) {\n+        if (newEvent.getSource() instanceof PostCommentService) {\n             // Get postComment id\n             PostComment postComment = postCommentService.getById(newEvent.getCommentId());\n \n@@ -85,7 +85,7 @@ public void handleCommentNewEvent(CommentNewEvent newEvent) {\n             data.put(\"page\", post.getTitle());\n             data.put(\"author\", postComment.getAuthor());\n             data.put(\"content\", postComment.getContent());\n-        } else if (newEvent.getSource() instanceof SheetService) {\n+        } else if (newEvent.getSource() instanceof SheetCommentService) {\n             SheetComment sheetComment = sheetCommentService.getById(newEvent.getCommentId());\n \n             log.debug(\"Got sheet comment: [{}]\", sheetComment);\n@@ -99,7 +99,7 @@ public void handleCommentNewEvent(CommentNewEvent newEvent) {\n             data.put(\"page\", sheet.getTitle());\n             data.put(\"author\", sheetComment.getAuthor());\n             data.put(\"content\", sheetComment.getContent());\n-        } else if (newEvent.getSource() instanceof JournalService) {\n+        } else if (newEvent.getSource() instanceof JournalCommentService) {\n             JournalComment journalComment = journalCommentService.getById(newEvent.getCommentId());\n \n             log.debug(\"Got journal comment: [{}]\", journalComment);\n\ndiff --git a/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java b/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n--- a/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n+++ b/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n@@ -78,6 +78,7 @@ public void onOptionUpdate(OptionUpdatedEvent event) throws TemplateModelExcepti\n         log.debug(\"Received option updated event\");\n \n         loadOptionsConfig();\n+        loadThemeConfig();\n     }\n \n \n\ndiff --git a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n@@ -192,7 +192,7 @@ public AuthToken refreshToken(String refreshToken) {\n         Assert.hasText(refreshToken, \"Refresh token must not be blank\");\n \n         Integer userId = cacheStore.getAny(SecurityUtils.buildTokenRefreshKey(refreshToken), Integer.class)\n-                .orElseThrow(() -> new BadRequestException(\"The refresh token may have been expired already\").setErrorData(refreshToken));\n+                .orElseThrow(() -> new BadRequestException(\"登陆状态已失效，请重新登陆\").setErrorData(refreshToken));\n \n         // Get user info\n         User user = userService.getById(userId);\n\ndiff --git a/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java b/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n@@ -1,5 +1,6 @@\n package run.halo.app.service.impl;\n \n+import cn.hutool.core.util.URLUtil;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.codec.digest.DigestUtils;\n import org.apache.commons.lang3.StringUtils;\n@@ -55,13 +56,10 @@\n @Slf4j\n public abstract class BaseCommentServiceImpl<COMMENT extends BaseComment> extends AbstractCrudService<COMMENT, Long> implements BaseCommentService<COMMENT> {\n \n-    private final BaseCommentRepository<COMMENT> baseCommentRepository;\n-\n     protected final OptionService optionService;\n-\n     protected final UserService userService;\n-\n     protected final ApplicationEventPublisher eventPublisher;\n+    private final BaseCommentRepository<COMMENT> baseCommentRepository;\n \n     public BaseCommentServiceImpl(BaseCommentRepository<COMMENT> baseCommentRepository,\n                                   OptionService optionService,\n@@ -247,6 +245,10 @@ public COMMENT create(COMMENT comment) {\n             comment.setGavatarMd5(DigestUtils.md5Hex(comment.getEmail()));\n         }\n \n+        if (StringUtils.isNotEmpty(comment.getAuthorUrl())) {\n+            comment.setAuthorUrl(URLUtil.normalize(comment.getAuthorUrl()));\n+        }\n+\n         if (authentication != null) {\n             // Comment of blogger\n             comment.setIsAdmin(true);\n\ndiff --git a/src/test/java/run/halo/app/utils/GitTest.java b/src/test/java/run/halo/app/utils/GitTest.java\n--- a/src/test/java/run/halo/app/utils/GitTest.java\n+++ b/src/test/java/run/halo/app/utils/GitTest.java\n@@ -4,6 +4,7 @@\n import org.eclipse.jgit.api.Status;\n import org.eclipse.jgit.api.errors.GitAPIException;\n import org.eclipse.jgit.errors.RepositoryNotFoundException;\n+import org.junit.Ignore;\n import org.junit.Test;\n \n import java.io.IOException;\n@@ -16,6 +17,7 @@\n  * @author johnniang\n  * @date 19-5-21\n  */\n+@Ignore\n public class GitTest {\n \n     private final Path tempPath;\n\ndiff --git a/src/test/java/run/halo/app/utils/GithubTest.java b/src/test/java/run/halo/app/utils/GithubTest.java\n--- a/src/test/java/run/halo/app/utils/GithubTest.java\n+++ b/src/test/java/run/halo/app/utils/GithubTest.java\n@@ -1,6 +1,7 @@\n package run.halo.app.utils;\n \n import org.junit.Assert;\n+import org.junit.Ignore;\n import org.junit.Test;\n import org.springframework.http.ResponseEntity;\n import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;\n@@ -23,6 +24,7 @@\n  * @author johnniang\n  * @date 19-5-21\n  */\n+@Ignore\n public class GithubTest {\n \n     private final Path tempPath;",
    "output": "Merge remote-tracking branch 'origin/dev' into dev"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/listener/StartedListener.java b/src/main/java/run/halo/app/listener/StartedListener.java\n--- a/src/main/java/run/halo/app/listener/StartedListener.java\n+++ b/src/main/java/run/halo/app/listener/StartedListener.java\n@@ -1,6 +1,5 @@\n package run.halo.app.listener;\n \n-import com.sun.nio.zipfs.JarFileSystemProvider;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.context.event.ApplicationStartedEvent;\n@@ -10,20 +9,15 @@\n import org.springframework.core.annotation.Order;\n import org.springframework.util.ResourceUtils;\n import run.halo.app.config.properties.HaloProperties;\n-import run.halo.app.model.entity.User;\n-import run.halo.app.model.params.UserParam;\n import run.halo.app.model.properties.PrimaryProperties;\n-import run.halo.app.model.support.CreateCheck;\n import run.halo.app.service.OptionService;\n import run.halo.app.service.ThemeService;\n import run.halo.app.service.UserService;\n import run.halo.app.utils.FileUtils;\n-import run.halo.app.utils.ValidationUtils;\n \n import java.net.URI;\n import java.nio.file.*;\n import java.util.Collections;\n-import java.util.List;\n \n /**\n  * The method executed after the application is started.\n\ndiff --git a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n@@ -147,7 +147,7 @@ private Specification<Post> buildSpecByQuery(@NonNull PostQuery postQuery) {\n     @Override\n     public PostDetailVO createBy(Post postToCreate, Set<Integer> tagIds, Set<Integer> categoryIds, boolean autoSave) {\n         PostDetailVO createdPost = createOrUpdate(postToCreate, tagIds, categoryIds);\n-        if(!autoSave){\n+        if (!autoSave) {\n             // Log the creation\n             LogEvent logEvent = new LogEvent(this, createdPost.getId().toString(), LogType.POST_PUBLISHED, createdPost.getTitle());\n             eventPublisher.publishEvent(logEvent);\n@@ -160,7 +160,7 @@ public PostDetailVO updateBy(Post postToUpdate, Set<Integer> tagIds, Set<Integer\n         // Set edit time\n         postToUpdate.setEditTime(DateUtils.now());\n         PostDetailVO updatedPost = createOrUpdate(postToUpdate, tagIds, categoryIds);\n-        if(!autoSave){\n+        if (!autoSave) {\n             // Log the creation\n             LogEvent logEvent = new LogEvent(this, updatedPost.getId().toString(), LogType.POST_EDITED, updatedPost.getTitle());\n             eventPublisher.publishEvent(logEvent);\n@@ -349,15 +349,15 @@ public Page<PostListVO> convertToListVo(Page<Post> postPage) {\n                     .orElseGet(LinkedList::new)\n                     .stream()\n                     .filter(Objects::nonNull)\n-                    .map(tag -> new TagDTO().<TagDTO>convertFrom(tag))\n+                    .map(tag -> (TagDTO) new TagDTO().convertFrom(tag))\n                     .collect(Collectors.toList()));\n \n             // Set categories\n             postListVO.setCategories(Optional.ofNullable(categoryListMap.get(post.getId()))\n                     .orElseGet(LinkedList::new)\n                     .stream()\n                     .filter(Objects::nonNull)\n-                    .map(category -> new CategoryDTO().<CategoryDTO>convertFrom(category))\n+                    .map(category -> (CategoryDTO) new CategoryDTO().convertFrom(category))\n                     .collect(Collectors.toList()));\n \n             // Set comment count",
    "output": "Remove useless import."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java b/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n@@ -1,5 +1,6 @@\n package run.halo.app.service.impl;\n \n+import cn.hutool.core.util.URLUtil;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.codec.digest.DigestUtils;\n import org.apache.commons.lang3.StringUtils;\n@@ -55,13 +56,10 @@\n @Slf4j\n public abstract class BaseCommentServiceImpl<COMMENT extends BaseComment> extends AbstractCrudService<COMMENT, Long> implements BaseCommentService<COMMENT> {\n \n-    private final BaseCommentRepository<COMMENT> baseCommentRepository;\n-\n     protected final OptionService optionService;\n-\n     protected final UserService userService;\n-\n     protected final ApplicationEventPublisher eventPublisher;\n+    private final BaseCommentRepository<COMMENT> baseCommentRepository;\n \n     public BaseCommentServiceImpl(BaseCommentRepository<COMMENT> baseCommentRepository,\n                                   OptionService optionService,\n@@ -247,6 +245,10 @@ public COMMENT create(COMMENT comment) {\n             comment.setGavatarMd5(DigestUtils.md5Hex(comment.getEmail()));\n         }\n \n+        if (StringUtils.isNotEmpty(comment.getAuthorUrl())) {\n+            comment.setAuthorUrl(URLUtil.normalize(comment.getAuthorUrl()));\n+        }\n+\n         if (authentication != null) {\n             // Comment of blogger\n             comment.setIsAdmin(true);",
    "output": "Fixed: Format the commenter's website url."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/event/comment/CommentEventListener.java b/src/main/java/run/halo/app/event/comment/CommentEventListener.java\n--- a/src/main/java/run/halo/app/event/comment/CommentEventListener.java\n+++ b/src/main/java/run/halo/app/event/comment/CommentEventListener.java\n@@ -70,7 +70,7 @@ public void handleCommentNewEvent(CommentNewEvent newEvent) {\n \n         Map<String, Object> data = new HashMap<>();\n \n-        if (newEvent.getSource() instanceof PostService) {\n+        if (newEvent.getSource() instanceof PostCommentService) {\n             // Get postComment id\n             PostComment postComment = postCommentService.getById(newEvent.getCommentId());\n \n@@ -85,7 +85,7 @@ public void handleCommentNewEvent(CommentNewEvent newEvent) {\n             data.put(\"page\", post.getTitle());\n             data.put(\"author\", postComment.getAuthor());\n             data.put(\"content\", postComment.getContent());\n-        } else if (newEvent.getSource() instanceof SheetService) {\n+        } else if (newEvent.getSource() instanceof SheetCommentService) {\n             SheetComment sheetComment = sheetCommentService.getById(newEvent.getCommentId());\n \n             log.debug(\"Got sheet comment: [{}]\", sheetComment);\n@@ -99,7 +99,7 @@ public void handleCommentNewEvent(CommentNewEvent newEvent) {\n             data.put(\"page\", sheet.getTitle());\n             data.put(\"author\", sheetComment.getAuthor());\n             data.put(\"content\", sheetComment.getContent());\n-        } else if (newEvent.getSource() instanceof JournalService) {\n+        } else if (newEvent.getSource() instanceof JournalCommentService) {\n             JournalComment journalComment = journalCommentService.getById(newEvent.getCommentId());\n \n             log.debug(\"Got journal comment: [{}]\", journalComment);\n\ndiff --git a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n@@ -192,7 +192,7 @@ public AuthToken refreshToken(String refreshToken) {\n         Assert.hasText(refreshToken, \"Refresh token must not be blank\");\n \n         Integer userId = cacheStore.getAny(SecurityUtils.buildTokenRefreshKey(refreshToken), Integer.class)\n-                .orElseThrow(() -> new BadRequestException(\"The refresh token may have been expired already\").setErrorData(refreshToken));\n+                .orElseThrow(() -> new BadRequestException(\"登陆状态已失效，请重新登陆\").setErrorData(refreshToken));\n \n         // Get user info\n         User user = userService.getById(userId);",
    "output": "Fixed: The problem that the new comment notification message is empty."
  },
  {
    "input": "diff --git a/src/test/java/run/halo/app/utils/GitTest.java b/src/test/java/run/halo/app/utils/GitTest.java\n--- a/src/test/java/run/halo/app/utils/GitTest.java\n+++ b/src/test/java/run/halo/app/utils/GitTest.java\n@@ -4,6 +4,7 @@\n import org.eclipse.jgit.api.Status;\n import org.eclipse.jgit.api.errors.GitAPIException;\n import org.eclipse.jgit.errors.RepositoryNotFoundException;\n+import org.junit.Ignore;\n import org.junit.Test;\n \n import java.io.IOException;\n@@ -16,6 +17,7 @@\n  * @author johnniang\n  * @date 19-5-21\n  */\n+@Ignore\n public class GitTest {\n \n     private final Path tempPath;\n\ndiff --git a/src/test/java/run/halo/app/utils/GithubTest.java b/src/test/java/run/halo/app/utils/GithubTest.java\n--- a/src/test/java/run/halo/app/utils/GithubTest.java\n+++ b/src/test/java/run/halo/app/utils/GithubTest.java\n@@ -1,6 +1,7 @@\n package run.halo.app.utils;\n \n import org.junit.Assert;\n+import org.junit.Ignore;\n import org.junit.Test;\n import org.springframework.http.ResponseEntity;\n import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;\n@@ -23,6 +24,7 @@\n  * @author johnniang\n  * @date 19-5-21\n  */\n+@Ignore\n public class GithubTest {\n \n     private final Path tempPath;",
    "output": "Ignore GithubTest an GitTest"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java b/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n--- a/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n+++ b/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n@@ -78,6 +78,7 @@ public void onOptionUpdate(OptionUpdatedEvent event) throws TemplateModelExcepti\n         log.debug(\"Received option updated event\");\n \n         loadOptionsConfig();\n+        loadThemeConfig();\n     }\n \n ",
    "output": "Fix option updation trigger bug"
  },
  {
    "input": "diff --git a/src/test/java/run/halo/app/utils/GitTest.java b/src/test/java/run/halo/app/utils/GitTest.java\n--- a/src/test/java/run/halo/app/utils/GitTest.java\n+++ b/src/test/java/run/halo/app/utils/GitTest.java\n@@ -0,0 +1,62 @@\n+package run.halo.app.utils;\n+\n+import org.eclipse.jgit.api.Git;\n+import org.eclipse.jgit.api.Status;\n+import org.eclipse.jgit.api.errors.GitAPIException;\n+import org.eclipse.jgit.errors.RepositoryNotFoundException;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+/**\n+ * Git test.\n+ *\n+ * @author johnniang\n+ * @date 19-5-21\n+ */\n+public class GitTest {\n+\n+    private final Path tempPath;\n+\n+    public GitTest() throws IOException {\n+        tempPath = Files.createTempDirectory(\"git-test\");\n+    }\n+\n+    @Test(expected = RepositoryNotFoundException.class)\n+    public void openTest() throws IOException {\n+        Git.open(tempPath.toFile());\n+    }\n+\n+    @Test\n+    public void initTest() throws GitAPIException {\n+        Git.init().setDirectory(tempPath.toFile()).call();\n+    }\n+\n+    @Test\n+    public void statusTest() throws GitAPIException {\n+        Git git = Git.init().setDirectory(tempPath.toFile()).call();\n+        git.status().call();\n+    }\n+\n+    @Test\n+    public void cloneTest() throws GitAPIException {\n+        cloneRepository();\n+    }\n+\n+    @Test\n+    public void pullTest() throws GitAPIException {\n+        Git git = cloneRepository();\n+        git.pull().call();\n+        git.clean().call();\n+        git.close();\n+    }\n+\n+    private Git cloneRepository() throws GitAPIException {\n+        return Git.cloneRepository()\n+                .setURI(\"https://github.com/halo-dev/halo-theme-pinghsu.git\")\n+                .setDirectory(tempPath.toFile())\n+                .call();\n+    }\n+}\n\ndiff --git a/src/test/java/run/halo/app/utils/GithubTest.java b/src/test/java/run/halo/app/utils/GithubTest.java\n--- a/src/test/java/run/halo/app/utils/GithubTest.java\n+++ b/src/test/java/run/halo/app/utils/GithubTest.java\n@@ -0,0 +1,91 @@\n+package run.halo.app.utils;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;\n+import org.springframework.web.client.RestTemplate;\n+import run.halo.app.exception.BadRequestException;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.security.KeyManagementException;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Github api test.\n+ *\n+ * @author johnniang\n+ * @date 19-5-21\n+ */\n+public class GithubTest {\n+\n+    private final Path tempPath;\n+\n+    private final static String API_URL = \"https://api.github.com/repos/halo-dev/halo-admin/releases/latest\";\n+\n+    private final static String HALO_ADMIN_REGEX = \"halo-admin-\\\\d+\\\\.\\\\d+(\\\\.\\\\d+)?(-\\\\S*)?\\\\.zip\";\n+\n+    private final RestTemplate restTemplate;\n+\n+    public GithubTest() throws NoSuchAlgorithmException, KeyStoreException, KeyManagementException, IOException {\n+        tempPath = Files.createTempDirectory(\"git-test\");\n+        this.restTemplate = new RestTemplate(new HttpComponentsClientHttpRequestFactory(HttpClientUtils.createHttpsClient(5000)));\n+    }\n+\n+    @Test\n+    public void getLatestReleaseTest() throws Throwable {\n+        ResponseEntity<Map> responseEntity = restTemplate.getForEntity(API_URL, Map.class);\n+        System.out.println(\"Reponse: \" + responseEntity);\n+        Object assetsObject = responseEntity.getBody().get(\"assets\");\n+        System.out.println(\"Assets class: \" + assetsObject.getClass());\n+        System.out.println(\"Assets: \" + assetsObject);\n+        if (assetsObject instanceof List) {\n+            List assets = (List) assetsObject;\n+            Map assetMap = (Map) assets.stream().filter(aAsset -> {\n+                if (!(aAsset instanceof Map)) {\n+                    return false;\n+                }\n+                Map aAssetMap = (Map) aAsset;\n+                Object name = aAssetMap.getOrDefault(\"name\", \"\");\n+                return name.toString().matches(HALO_ADMIN_REGEX);\n+            })\n+                    .findFirst()\n+                    .orElseThrow(() -> new BadRequestException(\"Halo admin has no assets available\"));\n+\n+            Object name = assetMap.getOrDefault(\"name\", \"\");\n+            Object browserDownloadUrl = assetMap.getOrDefault(\"browser_download_url\", \"\");\n+            // Download the assets\n+            ResponseEntity<byte[]> downloadResponseEntity = restTemplate.getForEntity(browserDownloadUrl.toString(), byte[].class);\n+            System.out.println(\"Download response entity status: \" + downloadResponseEntity.getStatusCode());\n+\n+            Path downloadedPath = Files.write(tempPath.resolve(name.toString()), downloadResponseEntity.getBody());\n+\n+            System.out.println(\"Downloaded path: \" + downloadedPath.toString());\n+        }\n+    }\n+\n+    @Test\n+    public void nameMatchTEst() {\n+        String name = \"halo-admin-1.0.0-beta.1.zip\";\n+\n+        Assert.assertTrue(name.matches(HALO_ADMIN_REGEX));\n+\n+        name = \"halo-admin-1.0.zip\";\n+        Assert.assertTrue(name.matches(HALO_ADMIN_REGEX));\n+\n+        name = \"halo-admin-1.0.0.zip\";\n+        Assert.assertTrue(name.matches(HALO_ADMIN_REGEX));\n+\n+        name = \"halo-admin-v1.0.0-beta.zip\";\n+        Assert.assertFalse(name.matches(HALO_ADMIN_REGEX));\n+\n+        name = \"halo-admin.zip\";\n+        Assert.assertFalse(name.matches(HALO_ADMIN_REGEX));\n+    }\n+}",
    "output": "Add git and github test"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/ContentFeedController.java b/src/main/java/run/halo/app/controller/content/ContentFeedController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentFeedController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentFeedController.java\n@@ -6,6 +6,7 @@\n import org.springframework.data.domain.PageRequest;\n import org.springframework.data.domain.Pageable;\n import org.springframework.data.domain.Sort;\n+import org.springframework.data.web.PageableDefault;\n import org.springframework.http.MediaType;\n import org.springframework.lang.NonNull;\n import org.springframework.stereotype.Controller;\n@@ -92,8 +93,9 @@ public String atom(Model model) throws IOException, TemplateException {\n      */\n     @GetMapping(value = {\"sitemap\", \"sitemap.xml\"}, produces = XML_MEDIA_TYPE)\n     @ResponseBody\n-    public String sitemapXml(Model model) throws IOException, TemplateException {\n-        model.addAttribute(\"posts\", buildPosts(null));\n+    public String sitemapXml(Model model,\n+                             @PageableDefault(size = Integer.MAX_VALUE, sort = \"createTime\", direction = DESC) Pageable pageable) throws IOException, TemplateException {\n+        model.addAttribute(\"posts\", buildPosts(pageable));\n         Template template = freeMarker.getConfiguration().getTemplate(\"common/web/sitemap_xml.ftl\");\n         return FreeMarkerTemplateUtils.processTemplateIntoString(template, model);\n     }\n@@ -104,9 +106,10 @@ public String sitemapXml(Model model) throws IOException, TemplateException {\n      * @param model model\n      * @return String\n      */\n-    @GetMapping(value = \"sitemap.html\", produces = MediaType.TEXT_PLAIN_VALUE)\n-    public String sitemapHtml(Model model) {\n-        model.addAttribute(\"posts\", buildPosts(null));\n+    @GetMapping(value = \"sitemap.html\")\n+    public String sitemapHtml(Model model,\n+                              @PageableDefault(size = Integer.MAX_VALUE, sort = \"createTime\", direction = DESC) Pageable pageable) {\n+        model.addAttribute(\"posts\", buildPosts(pageable));\n         return \"common/web/sitemap_html\";\n     }\n \n@@ -142,12 +145,7 @@ private Pageable buildPostPageable(int size) {\n      * @param pageable pageable\n      * @return List<Post>\n      */\n-    private List<PostListVO> buildPosts(Pageable pageable) {\n-        if (pageable == null) {\n-            Page<Post> postPage = postService.pageBy(PostStatus.PUBLISHED, null);\n-            return postService.convertToListVo(postPage).getContent();\n-        }\n-\n+    private List<PostListVO> buildPosts(@NonNull Pageable pageable) {\n         Page<Post> postPage = postService.pageBy(PostStatus.PUBLISHED, pageable);\n         Page<PostListVO> posts = postService.convertToListVo(postPage);\n         return posts.getContent();",
    "output": "Merge remote-tracking branch 'origin/dev' into dev\n\n# Conflicts:\n#\tsrc/main/resources/application-user.yaml"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/ContentFeedController.java b/src/main/java/run/halo/app/controller/content/ContentFeedController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentFeedController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentFeedController.java\n@@ -106,7 +106,7 @@ public String sitemapXml(Model model,\n      * @param model model\n      * @return String\n      */\n-    @GetMapping(value = \"sitemap.html\", produces = MediaType.TEXT_PLAIN_VALUE)\n+    @GetMapping(value = \"sitemap.html\")\n     public String sitemapHtml(Model model,\n                               @PageableDefault(size = Integer.MAX_VALUE, sort = \"createTime\", direction = DESC) Pageable pageable) {\n         model.addAttribute(\"posts\", buildPosts(pageable));",
    "output": "Fix sitemap.html show error"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/ContentFeedController.java b/src/main/java/run/halo/app/controller/content/ContentFeedController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentFeedController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentFeedController.java\n@@ -6,6 +6,7 @@\n import org.springframework.data.domain.PageRequest;\n import org.springframework.data.domain.Pageable;\n import org.springframework.data.domain.Sort;\n+import org.springframework.data.web.PageableDefault;\n import org.springframework.http.MediaType;\n import org.springframework.lang.NonNull;\n import org.springframework.stereotype.Controller;\n@@ -92,8 +93,9 @@ public String atom(Model model) throws IOException, TemplateException {\n      */\n     @GetMapping(value = {\"sitemap\", \"sitemap.xml\"}, produces = XML_MEDIA_TYPE)\n     @ResponseBody\n-    public String sitemapXml(Model model) throws IOException, TemplateException {\n-        model.addAttribute(\"posts\", buildPosts(null));\n+    public String sitemapXml(Model model,\n+                             @PageableDefault(size = Integer.MAX_VALUE, sort = \"createTime\", direction = DESC) Pageable pageable) throws IOException, TemplateException {\n+        model.addAttribute(\"posts\", buildPosts(pageable));\n         Template template = freeMarker.getConfiguration().getTemplate(\"common/web/sitemap_xml.ftl\");\n         return FreeMarkerTemplateUtils.processTemplateIntoString(template, model);\n     }\n@@ -105,8 +107,9 @@ public String sitemapXml(Model model) throws IOException, TemplateException {\n      * @return String\n      */\n     @GetMapping(value = \"sitemap.html\", produces = MediaType.TEXT_PLAIN_VALUE)\n-    public String sitemapHtml(Model model) {\n-        model.addAttribute(\"posts\", buildPosts(null));\n+    public String sitemapHtml(Model model,\n+                              @PageableDefault(size = Integer.MAX_VALUE, sort = \"createTime\", direction = DESC) Pageable pageable) {\n+        model.addAttribute(\"posts\", buildPosts(pageable));\n         return \"common/web/sitemap_html\";\n     }\n \n@@ -142,12 +145,7 @@ private Pageable buildPostPageable(int size) {\n      * @param pageable pageable\n      * @return List<Post>\n      */\n-    private List<PostListVO> buildPosts(Pageable pageable) {\n-        if (pageable == null) {\n-            Page<Post> postPage = postService.pageBy(PostStatus.PUBLISHED, null);\n-            return postService.convertToListVo(postPage).getContent();\n-        }\n-\n+    private List<PostListVO> buildPosts(@NonNull Pageable pageable) {\n         Page<Post> postPage = postService.pageBy(PostStatus.PUBLISHED, pageable);\n         Page<PostListVO> posts = postService.convertToListVo(postPage);\n         return posts.getContent();",
    "output": "Resovle issue(#164)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java b/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n--- a/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n+++ b/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n@@ -88,14 +88,14 @@ private void loadUserConfig() throws TemplateModelException {\n \n     private void loadOptionsConfig() throws TemplateModelException {\n         configuration.setSharedVariable(\"options\", optionService.listOptions());\n-        configuration.setSharedVariable(\"ctx\", optionService.getBlogBaseUrl());\n+        configuration.setSharedVariable(\"context\", optionService.getBlogBaseUrl());\n         log.debug(\"Loaded options\");\n     }\n \n     private void loadThemeConfig() throws TemplateModelException {\n         ThemeProperty activatedTheme = themeService.getActivatedTheme();\n         configuration.setSharedVariable(\"theme\", activatedTheme);\n-        configuration.setSharedVariable(\"static\", activatedTheme.getFolderName());\n+        configuration.setSharedVariable(\"static\", optionService.getBlogBaseUrl() + \"/\" + activatedTheme.getFolderName());\n         configuration.setSharedVariable(\"settings\", themeSettingService.listAsMapBy(themeService.getActivatedThemeId()));\n         log.debug(\"Loaded theme and settings\");\n     }\n\ndiff --git a/src/main/java/run/halo/app/service/PostService.java b/src/main/java/run/halo/app/service/PostService.java\n--- a/src/main/java/run/halo/app/service/PostService.java\n+++ b/src/main/java/run/halo/app/service/PostService.java\n@@ -97,6 +97,15 @@ public interface PostService extends BasePostService<Post> {\n     @NonNull\n     List<ArchiveMonthVO> listMonthArchives();\n \n+    /**\n+     * Import post from markdown document.\n+     *\n+     * @param markdown markdown document.\n+     * @return imported post\n+     */\n+    @NonNull\n+    Post importMarkdown(@NonNull String markdown);\n+\n     /**\n      * Converts to detail vo.\n      *\n\ndiff --git a/src/main/java/run/halo/app/service/SheetService.java b/src/main/java/run/halo/app/service/SheetService.java\n--- a/src/main/java/run/halo/app/service/SheetService.java\n+++ b/src/main/java/run/halo/app/service/SheetService.java\n@@ -45,6 +45,15 @@ public interface SheetService extends BasePostService<Sheet> {\n     @Override\n     Sheet getBy(PostStatus status, String url);\n \n+    /**\n+     * Import sheet from markdown document.\n+     *\n+     * @param markdown markdown document.\n+     * @return imported sheet\n+     */\n+    @NonNull\n+    Sheet importMarkdown(@NonNull String markdown);\n+\n     /**\n      * Converts to list dto page.\n      *\n@@ -53,6 +62,4 @@ public interface SheetService extends BasePostService<Sheet> {\n      */\n     @NonNull\n     Page<SheetListVO> convertToListVo(@NonNull Page<Sheet> sheetPage);\n-\n-\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n@@ -26,6 +26,7 @@\n import run.halo.app.repository.PostRepository;\n import run.halo.app.service.*;\n import run.halo.app.utils.DateUtils;\n+import run.halo.app.utils.MarkdownUtils;\n import run.halo.app.utils.ServiceUtils;\n \n import javax.persistence.criteria.Predicate;\n@@ -272,6 +273,19 @@ public List<ArchiveMonthVO> listMonthArchives() {\n         return archives;\n     }\n \n+    @Override\n+    public Post importMarkdown(String markdown) {\n+        Assert.notNull(markdown, \"Markdown document must not be null\");\n+\n+        // Render markdown to html document.\n+        String content = MarkdownUtils.renderMarkdown(markdown);\n+\n+        // Gets frontMatter\n+        Map<String, List<String>> frontMatter = MarkdownUtils.getFrontMatter(markdown);\n+\n+        return null;\n+    }\n+\n     @Override\n     public PostDetailVO convertToDetailVo(Post post) {\n         return convertTo(post,\n\ndiff --git a/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java b/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n@@ -15,6 +15,7 @@\n import run.halo.app.service.OptionService;\n import run.halo.app.service.SheetCommentService;\n import run.halo.app.service.SheetService;\n+import run.halo.app.utils.MarkdownUtils;\n import run.halo.app.utils.ServiceUtils;\n \n import java.util.List;\n@@ -94,6 +95,19 @@ public Sheet getBy(PostStatus status, String url) {\n         return sheet;\n     }\n \n+    @Override\n+    public Sheet importMarkdown(String markdown) {\n+        Assert.notNull(markdown, \"Markdown document must not be null\");\n+\n+        // Render markdown to html document.\n+        String content = MarkdownUtils.renderMarkdown(markdown);\n+\n+        // Gets frontMatter\n+        Map<String, List<String>> frontMatter = MarkdownUtils.getFrontMatter(markdown);\n+\n+        return null;\n+    }\n+\n     @Override\n     public Sheet removeById(Integer id) {\n         Sheet sheet = super.removeById(id);",
    "output": "Change ctx to context."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java b/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n--- a/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n+++ b/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n@@ -11,6 +11,7 @@\n import run.halo.app.event.options.OptionUpdatedEvent;\n import run.halo.app.event.theme.ThemeActivatedEvent;\n import run.halo.app.event.user.UserUpdatedEvent;\n+import run.halo.app.handler.theme.config.support.ThemeProperty;\n import run.halo.app.service.OptionService;\n import run.halo.app.service.ThemeService;\n import run.halo.app.service.ThemeSettingService;\n@@ -92,8 +93,9 @@ private void loadOptionsConfig() throws TemplateModelException {\n     }\n \n     private void loadThemeConfig() throws TemplateModelException {\n-        configuration.setSharedVariable(\"theme\", themeService.getActivatedTheme());\n-        configuration.setSharedVariable(\"static\", themeService.getActivatedTheme().getFolderName());\n+        ThemeProperty activatedTheme = themeService.getActivatedTheme();\n+        configuration.setSharedVariable(\"theme\", activatedTheme);\n+        configuration.setSharedVariable(\"static\", activatedTheme.getFolderName());\n         configuration.setSharedVariable(\"settings\", themeSettingService.listAsMapBy(themeService.getActivatedThemeId()));\n         log.debug(\"Loaded theme and settings\");\n     }\n\ndiff --git a/src/main/java/run/halo/app/listener/StartedListener.java b/src/main/java/run/halo/app/listener/StartedListener.java\n--- a/src/main/java/run/halo/app/listener/StartedListener.java\n+++ b/src/main/java/run/halo/app/listener/StartedListener.java\n@@ -1,5 +1,6 @@\n package run.halo.app.listener;\n \n+import com.sun.nio.zipfs.JarFileSystemProvider;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.context.event.ApplicationStartedEvent;\n@@ -81,6 +82,8 @@ private void initThemes() {\n \n             URI themeUri = ResourceUtils.getURL(themeClassPath).toURI();\n \n+            log.debug(\"Theme uri: [{}]\", themeUri);\n+\n             Path source;\n \n             if (themeUri.getScheme().equalsIgnoreCase(\"jar\")) {\n\ndiff --git a/src/main/java/run/halo/app/service/base/BaseCommentService.java b/src/main/java/run/halo/app/service/base/BaseCommentService.java\n--- a/src/main/java/run/halo/app/service/base/BaseCommentService.java\n+++ b/src/main/java/run/halo/app/service/base/BaseCommentService.java\n@@ -186,11 +186,11 @@ public interface BaseCommentService<COMMENT extends BaseComment> extends CrudSer\n     List<BaseCommentVO> convertToVo(@Nullable List<COMMENT> comments, @Nullable Comparator<BaseCommentVO> comparator);\n \n     /**\n-     * Target must exist.\n+     * Target validation.\n      *\n      * @param targetId target id must not be null (post id, sheet id or journal id)\n      */\n-    void targetMustExist(@NonNull Integer targetId);\n+    void validateTarget(@NonNull Integer targetId);\n \n     /**\n      * Lists a page of top comment.\n\ndiff --git a/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java b/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n@@ -223,7 +223,7 @@ public COMMENT create(COMMENT comment) {\n \n         // Check post id\n         if (!ServiceUtils.isEmptyId(comment.getPostId())) {\n-            targetMustExist(comment.getPostId());\n+            validateTarget(comment.getPostId());\n         }\n \n         // Check parent id\n\ndiff --git a/src/main/java/run/halo/app/service/impl/JournalCommentServiceImpl.java b/src/main/java/run/halo/app/service/impl/JournalCommentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/JournalCommentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/JournalCommentServiceImpl.java\n@@ -47,9 +47,9 @@ public JournalCommentServiceImpl(JournalCommentRepository journalCommentReposito\n     }\n \n     @Override\n-    public void targetMustExist(Integer journalId) {\n+    public void validateTarget(Integer journalId) {\n         if (!journalRepository.existsById(journalId)) {\n-            throw new NotFoundException(\"The journal with id \" + journalId + \" was not found\");\n+            throw new NotFoundException(\"该日志不存在或已删除\").setErrorData(journalId);\n         }\n     }\n \n\ndiff --git a/src/main/java/run/halo/app/service/impl/PostCommentServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostCommentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostCommentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostCommentServiceImpl.java\n@@ -8,6 +8,7 @@\n import org.springframework.stereotype.Service;\n import org.springframework.util.Assert;\n import org.springframework.util.CollectionUtils;\n+import run.halo.app.exception.BadRequestException;\n import run.halo.app.exception.NotFoundException;\n import run.halo.app.model.dto.post.BasePostMinimalDTO;\n import run.halo.app.model.entity.Post;\n@@ -92,9 +93,12 @@ public Page<PostCommentWithPostVO> pageTreeBy(CommentQuery commentQuery, Pageabl\n     }\n \n     @Override\n-    public void targetMustExist(Integer postId) {\n-        if (!postRepository.existsById(postId)) {\n-            throw new NotFoundException(\"The post with id \" + postId + \" was not found\");\n+    public void validateTarget(Integer postId) {\n+        Post post = postRepository.findById(postId)\n+                .orElseThrow(() -> new NotFoundException(\"该文章不存在或已删除\").setErrorData(postId));\n+\n+        if (post.getDisallowComment()) {\n+            throw new BadRequestException(\"该文章已经被禁止评论\").setErrorData(postId);\n         }\n     }\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/SheetCommentServiceImpl.java b/src/main/java/run/halo/app/service/impl/SheetCommentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/SheetCommentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/SheetCommentServiceImpl.java\n@@ -6,6 +6,7 @@\n import org.springframework.stereotype.Service;\n import org.springframework.util.Assert;\n import org.springframework.util.CollectionUtils;\n+import run.halo.app.exception.BadRequestException;\n import run.halo.app.exception.NotFoundException;\n import run.halo.app.model.dto.post.BasePostMinimalDTO;\n import run.halo.app.model.entity.Sheet;\n@@ -48,9 +49,12 @@ public SheetCommentServiceImpl(SheetCommentRepository sheetCommentRepository,\n     }\n \n     @Override\n-    public void targetMustExist(Integer sheetId) {\n-        if (sheetRepository.existsById(sheetId)) {\n-            throw new NotFoundException(\"The sheet with id \" + sheetId + \" was not found\");\n+    public void validateTarget(Integer sheetId) {\n+        Sheet sheet = sheetRepository.findById(sheetId)\n+                .orElseThrow(() -> new NotFoundException(\"该页面不存在或已删除\").setErrorData(sheetId));\n+\n+        if (sheet.getDisallowComment()) {\n+            throw new BadRequestException(\"该页面已被禁止评论\").setErrorData(sheetId);\n         }\n     }\n \n\ndiff --git a/src/test/java/run/halo/app/utils/PathTest.java b/src/test/java/run/halo/app/utils/PathTest.java\n--- a/src/test/java/run/halo/app/utils/PathTest.java\n+++ b/src/test/java/run/halo/app/utils/PathTest.java\n@@ -0,0 +1,42 @@\n+package run.halo.app.utils;\n+\n+import com.sun.nio.zipfs.JarFileSystemProvider;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.*;\n+import java.util.Collections;\n+\n+/**\n+ * Path test.\n+ *\n+ * @author johnniang\n+ * @date 19-5-20\n+ */\n+public class PathTest {\n+\n+    @Test(expected = FileSystemNotFoundException.class)\n+    public void getPathOfJarFileFailure() throws URISyntaxException {\n+        String file = \"jar:file:/path/to/jar/xxx.jar!/BOOT-INF/classes!/templates/themes\";\n+        URI uri = new URI(file);\n+        Path path = Paths.get(uri);\n+\n+        System.out.println(\"Path: \" + path.toString());\n+    }\n+\n+//    @Test\n+//    public void getPathOfJarFileSuccessfully() throws URISyntaxException, IOException {\n+//        String file = \"jar:file:/path/to/jar/xxx.jar!/BOOT-INF/classes!/templates/themes\";\n+//        URI uri = new URI(file);\n+//        FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.emptyMap());\n+//        Path path = fileSystem.getPath(\"/BOOT-INF/classes/templates/themes\");\n+//\n+//        System.out.println(\"Path: \" + path.toString());\n+//\n+//        Files.walk(path, 1).forEach(p -> {\n+//            System.out.println(p.toString());\n+//        });\n+//    }\n+}",
    "output": "Complete issue(#156)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java b/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n--- a/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n+++ b/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n@@ -93,6 +93,7 @@ private void loadOptionsConfig() throws TemplateModelException {\n \n     private void loadThemeConfig() throws TemplateModelException {\n         configuration.setSharedVariable(\"theme\", themeService.getActivatedTheme());\n+        configuration.setSharedVariable(\"static\", themeService.getActivatedTheme().getFolderName());\n         configuration.setSharedVariable(\"settings\", themeSettingService.listAsMapBy(themeService.getActivatedThemeId()));\n         log.debug(\"Loaded theme and settings\");\n     }",
    "output": "Support static variable."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java b/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n--- a/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n+++ b/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n@@ -7,7 +7,6 @@\n import org.springframework.context.event.EventListener;\n import org.springframework.core.Ordered;\n import org.springframework.core.annotation.Order;\n-import org.springframework.scheduling.annotation.Async;\n import org.springframework.stereotype.Component;\n import run.halo.app.event.options.OptionUpdatedEvent;\n import run.halo.app.event.theme.ThemeActivatedEvent;\n@@ -88,6 +87,7 @@ private void loadUserConfig() throws TemplateModelException {\n \n     private void loadOptionsConfig() throws TemplateModelException {\n         configuration.setSharedVariable(\"options\", optionService.listOptions());\n+        configuration.setSharedVariable(\"ctx\", optionService.getBlogBaseUrl());\n         log.debug(\"Loaded options\");\n     }\n ",
    "output": "Support ctx to instead of options.blog_url."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/ThemeController.java b/src/main/java/run/halo/app/controller/admin/api/ThemeController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/ThemeController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/ThemeController.java\n@@ -140,4 +140,9 @@ public ThemeProperty fetchTheme(@RequestParam(\"uri\") String uri) {\n     public void reload() {\n         themeService.reload();\n     }\n+\n+    @GetMapping(value = \"activation/template/exists\")\n+    public BaseResponse exists(@RequestParam(value = \"template\") String template) {\n+        return BaseResponse.ok(themeService.templateExists(template));\n+    }\n }\n\ndiff --git a/src/main/java/run/halo/app/event/post/AbstractVisitEventListener.java b/src/main/java/run/halo/app/event/post/AbstractVisitEventListener.java\n--- a/src/main/java/run/halo/app/event/post/AbstractVisitEventListener.java\n+++ b/src/main/java/run/halo/app/event/post/AbstractVisitEventListener.java\n@@ -1,8 +1,8 @@\n package run.halo.app.event.post;\n \n-import cn.hutool.core.lang.Assert;\n import lombok.NonNull;\n import lombok.extern.slf4j.Slf4j;\n+import org.springframework.util.Assert;\n import run.halo.app.service.base.BasePostService;\n \n import java.util.Map;\n\ndiff --git a/src/main/java/run/halo/app/handler/file/AliYunFileHandler.java b/src/main/java/run/halo/app/handler/file/AliYunFileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/AliYunFileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/AliYunFileHandler.java\n@@ -1,13 +1,14 @@\n package run.halo.app.handler.file;\n \n-import cn.hutool.core.lang.Assert;\n import com.aliyun.oss.OSS;\n import com.aliyun.oss.OSSClientBuilder;\n-import com.aliyun.oss.model.*;\n+import com.aliyun.oss.model.DeleteObjectsRequest;\n+import com.aliyun.oss.model.PutObjectResult;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.lang3.StringUtils;\n import org.springframework.http.MediaType;\n import org.springframework.stereotype.Component;\n+import org.springframework.util.Assert;\n import org.springframework.web.multipart.MultipartFile;\n import run.halo.app.exception.FileOperationException;\n import run.halo.app.model.enums.AttachmentType;\n@@ -18,11 +19,11 @@\n \n import javax.imageio.ImageIO;\n import java.awt.image.BufferedImage;\n-import java.util.Date;\n import java.util.Objects;\n \n /**\n  * AliYun file handler.\n+ *\n  * @author MyFaith\n  * @date 2019-04-04 00:06:13\n  */\n@@ -81,7 +82,7 @@ public UploadResult upload(MultipartFile file) {\n             }\n \n             return uploadResult;\n-        } catch (Exception e){\n+        } catch (Exception e) {\n             e.printStackTrace();\n         } finally {\n             ossClient.shutdown();\n\ndiff --git a/src/main/java/run/halo/app/security/handler/DefaultAuthenticationFailureHandler.java b/src/main/java/run/halo/app/security/handler/DefaultAuthenticationFailureHandler.java\n--- a/src/main/java/run/halo/app/security/handler/DefaultAuthenticationFailureHandler.java\n+++ b/src/main/java/run/halo/app/security/handler/DefaultAuthenticationFailureHandler.java\n@@ -1,15 +1,14 @@\n package run.halo.app.security.handler;\n \n-import run.halo.app.exception.HaloException;\n-import run.halo.app.model.support.BaseResponse;\n-import run.halo.app.utils.ExceptionUtils;\n-import run.halo.app.utils.JsonUtils;\n import cn.hutool.extra.servlet.ServletUtil;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.http.MediaType;\n import org.springframework.util.Assert;\n import run.halo.app.exception.HaloException;\n+import run.halo.app.model.support.BaseResponse;\n+import run.halo.app.utils.ExceptionUtils;\n+import run.halo.app.utils.JsonUtils;\n \n import javax.servlet.ServletException;\n import javax.servlet.http.HttpServletRequest;\n\ndiff --git a/src/main/java/run/halo/app/service/impl/JournalCommentServiceImpl.java b/src/main/java/run/halo/app/service/impl/JournalCommentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/JournalCommentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/JournalCommentServiceImpl.java\n@@ -1,11 +1,11 @@\n package run.halo.app.service.impl;\n \n import cn.hutool.core.collection.CollectionUtil;\n-import cn.hutool.core.lang.Assert;\n import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.PageImpl;\n import org.springframework.stereotype.Service;\n+import org.springframework.util.Assert;\n import run.halo.app.exception.NotFoundException;\n import run.halo.app.model.dto.JournalDTO;\n import run.halo.app.model.entity.Journal;\n\ndiff --git a/src/main/java/run/halo/app/service/impl/RecoveryServiceImpl.java b/src/main/java/run/halo/app/service/impl/RecoveryServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/RecoveryServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/RecoveryServiceImpl.java\n@@ -1,12 +1,12 @@\n package run.halo.app.service.impl;\n \n-import cn.hutool.core.lang.Assert;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.lang3.StringUtils;\n import org.springframework.lang.NonNull;\n import org.springframework.lang.Nullable;\n import org.springframework.scheduling.annotation.Async;\n import org.springframework.stereotype.Service;\n+import org.springframework.util.Assert;\n import org.springframework.util.CollectionUtils;\n import org.springframework.util.FileCopyUtils;\n import org.springframework.web.multipart.MultipartFile;\n\ndiff --git a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n@@ -1,6 +1,5 @@\n package run.halo.app.service.impl;\n \n-import cn.hutool.core.io.FileUtil;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.lang3.StringUtils;\n import org.eclipse.jgit.api.Git;\n@@ -28,7 +27,6 @@\n import run.halo.app.model.support.ThemeFile;\n import run.halo.app.service.OptionService;\n import run.halo.app.service.ThemeService;\n-import run.halo.app.service.support.HaloMediaType;\n import run.halo.app.utils.FileUtils;\n import run.halo.app.utils.FilenameUtils;\n import run.halo.app.utils.HaloUtils;\n@@ -248,7 +246,7 @@ public void deleteTheme(String themeId) {\n \n         try {\n             // Delete the folder\n-            FileUtil.del(Paths.get(themeProperty.getThemePath()));\n+            FileUtils.del(Paths.get(themeProperty.getThemePath()));\n \n             // Delete theme cache\n             eventPublisher.publishEvent(new ThemeUpdatedEvent(this));\n@@ -329,6 +327,16 @@ public ThemeProperty getActivatedTheme() {\n         return activatedTheme;\n     }\n \n+    /**\n+     * Sets activated theme.\n+     *\n+     * @param activatedTheme activated theme\n+     */\n+    private void setActivatedTheme(@Nullable ThemeProperty activatedTheme) {\n+        this.activatedTheme = activatedTheme;\n+        this.activatedThemeId = Optional.ofNullable(activatedTheme).map(ThemeProperty::getId).orElse(null);\n+    }\n+\n     @Override\n     public ThemeProperty activateTheme(String themeId) {\n         // Check existence of the theme\n@@ -513,16 +521,6 @@ private Path createTempPath() throws IOException {\n         return Files.createTempDirectory(\"halo\");\n     }\n \n-    /**\n-     * Sets activated theme.\n-     *\n-     * @param activatedTheme activated theme\n-     */\n-    private void setActivatedTheme(@Nullable ThemeProperty activatedTheme) {\n-        this.activatedTheme = activatedTheme;\n-        this.activatedThemeId = Optional.ofNullable(activatedTheme).map(ThemeProperty::getId).orElse(null);\n-    }\n-\n     /**\n      * Lists theme files as tree view.\n      *\n\ndiff --git a/src/main/java/run/halo/app/utils/FileUtils.java b/src/main/java/run/halo/app/utils/FileUtils.java\n--- a/src/main/java/run/halo/app/utils/FileUtils.java\n+++ b/src/main/java/run/halo/app/utils/FileUtils.java\n@@ -1,5 +1,6 @@\n package run.halo.app.utils;\n \n+import cn.hutool.core.io.IORuntimeException;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.lang.NonNull;\n import org.springframework.lang.Nullable;\n@@ -259,4 +260,44 @@ public static void deleteFolderQuietly(@NonNull Path deletingPath) {\n             log.warn(\"Failed to delete \" + deletingPath);\n         }\n     }\n+\n+    /**\n+     * 删除文件或者文件夹\n+     *\n+     * @param path path\n+     * @return boolean\n+     * @throws IORuntimeException IORuntimeException\n+     */\n+    public static boolean del(Path path) throws IORuntimeException {\n+        if (Files.notExists(path)) {\n+            return true;\n+        }\n+        try {\n+            if (Files.isDirectory(path)) {\n+                Files.walkFileTree(path, new SimpleFileVisitor<Path>() {\n+\n+                    @Override\n+                    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n+                        Files.delete(file);\n+                        return FileVisitResult.CONTINUE;\n+                    }\n+\n+                    @Override\n+                    public FileVisitResult postVisitDirectory(Path dir, IOException e) throws IOException {\n+                        if (e == null) {\n+                            Files.delete(dir);\n+                            return FileVisitResult.CONTINUE;\n+                        } else {\n+                            throw e;\n+                        }\n+                    }\n+                });\n+            } else {\n+                Files.delete(path);\n+            }\n+        } catch (IOException e) {\n+            throw new IORuntimeException(e);\n+        }\n+        return true;\n+    }\n }",
    "output": "Change cn.hutool.core.lang.Assert to org.springframework.util.Assert."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/MainController.java b/src/main/java/run/halo/app/controller/content/MainController.java\n--- a/src/main/java/run/halo/app/controller/content/MainController.java\n+++ b/src/main/java/run/halo/app/controller/content/MainController.java\n@@ -48,15 +48,15 @@ public String version() {\n         return HaloConst.HALO_VERSION;\n     }\n \n-    @GetMapping(\"/user/avatar\")\n+    @GetMapping(\"/avatar\")\n     public void avatar(HttpServletResponse response) throws IOException {\n         User user = userService.getCurrentUser().orElseThrow(() -> new ServiceException(\"Can not find blog owner\"));\n         if (StringUtils.isNotEmpty(user.getAvatar())) {\n             response.sendRedirect(user.getAvatar());\n         }\n     }\n \n-    @GetMapping(\"/blog/logo\")\n+    @GetMapping(\"/logo\")\n     public void logo(HttpServletResponse response) throws IOException {\n         String blogLogo = optionService.getByProperty(BlogProperties.BLOG_LOGO).orElse(\"\").toString();\n         if(StringUtils.isNotEmpty(blogLogo)){",
    "output": "Support blog logo and user avatar url."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/MainController.java b/src/main/java/run/halo/app/controller/content/MainController.java\n--- a/src/main/java/run/halo/app/controller/content/MainController.java\n+++ b/src/main/java/run/halo/app/controller/content/MainController.java\n@@ -1,9 +1,18 @@\n package run.halo.app.controller.content;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.ResponseBody;\n+import run.halo.app.exception.ServiceException;\n+import run.halo.app.model.entity.User;\n+import run.halo.app.model.properties.BlogProperties;\n import run.halo.app.model.support.HaloConst;\n+import run.halo.app.service.OptionService;\n+import run.halo.app.service.UserService;\n+\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n \n /**\n  * Admin page.\n@@ -14,6 +23,14 @@\n @Controller\n public class MainController {\n \n+    private final UserService userService;\n+\n+    private final OptionService optionService;\n+\n+    public MainController(UserService userService, OptionService optionService) {\n+        this.userService = userService;\n+        this.optionService = optionService;\n+    }\n \n     @GetMapping(\"/admin\")\n     public String admin() {\n@@ -30,4 +47,20 @@ public String installation() {\n     public String version() {\n         return HaloConst.HALO_VERSION;\n     }\n+\n+    @GetMapping(\"/user/avatar\")\n+    public void avatar(HttpServletResponse response) throws IOException {\n+        User user = userService.getCurrentUser().orElseThrow(() -> new ServiceException(\"Can not find blog owner\"));\n+        if (StringUtils.isNotEmpty(user.getAvatar())) {\n+            response.sendRedirect(user.getAvatar());\n+        }\n+    }\n+\n+    @GetMapping(\"/blog/logo\")\n+    public void logo(HttpServletResponse response) throws IOException {\n+        String blogLogo = optionService.getByProperty(BlogProperties.BLOG_LOGO).orElse(\"\").toString();\n+        if(StringUtils.isNotEmpty(blogLogo)){\n+            response.sendRedirect(blogLogo);\n+        }\n+    }\n }",
    "output": "Support blog logo and user avatar url."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/PostController.java b/src/main/java/run/halo/app/controller/admin/api/PostController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/PostController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/PostController.java\n@@ -77,22 +77,24 @@ public void likes(@PathVariable(\"postId\") Integer postId) {\n     }\n \n     @PostMapping\n-    public PostDetailVO createBy(@Valid @RequestBody PostParam postParam) {\n+    public PostDetailVO createBy(@Valid @RequestBody PostParam postParam,\n+                                 @RequestParam(value = \"autoSave\", required = false, defaultValue = \"false\") Boolean autoSave) {\n         // Convert to\n         Post post = postParam.convertTo();\n \n-        return postService.createBy(post, postParam.getTagIds(), postParam.getCategoryIds());\n+        return postService.createBy(post, postParam.getTagIds(), postParam.getCategoryIds(), autoSave);\n     }\n \n     @PutMapping(\"{postId:\\\\d+}\")\n     public PostDetailVO updateBy(@Valid @RequestBody PostParam postParam,\n-                                 @PathVariable(\"postId\") Integer postId) {\n+                                 @PathVariable(\"postId\") Integer postId,\n+                                 @RequestParam(value = \"autoSave\", required = false, defaultValue = \"false\") Boolean autoSave) {\n         // Get the post info\n         Post postToUpdate = postService.getById(postId);\n \n         postParam.update(postToUpdate);\n \n-        return postService.updateBy(postToUpdate, postParam.getTagIds(), postParam.getCategoryIds());\n+        return postService.updateBy(postToUpdate, postParam.getTagIds(), postParam.getCategoryIds(), autoSave);\n     }\n \n     @PutMapping(\"{postId:\\\\d+}/status/{status}\")\n\ndiff --git a/src/main/java/run/halo/app/service/PostService.java b/src/main/java/run/halo/app/service/PostService.java\n--- a/src/main/java/run/halo/app/service/PostService.java\n+++ b/src/main/java/run/halo/app/service/PostService.java\n@@ -50,23 +50,25 @@ public interface PostService extends BasePostService<Post> {\n      * @param post        post must not be null\n      * @param tagIds      tag id set\n      * @param categoryIds category id set\n+     * @param autoSave    autoSave\n      * @return post created\n      */\n     @NonNull\n     @Transactional\n-    PostDetailVO createBy(@NonNull Post post, Set<Integer> tagIds, Set<Integer> categoryIds);\n+    PostDetailVO createBy(@NonNull Post post, Set<Integer> tagIds, Set<Integer> categoryIds, boolean autoSave);\n \n     /**\n      * Updates post by post, tag id set and category id set.\n      *\n      * @param postToUpdate post to update must not be null\n      * @param tagIds       tag id set\n      * @param categoryIds  category id set\n+     * @param autoSave     autoSave\n      * @return updated post\n      */\n     @NonNull\n     @Transactional\n-    PostDetailVO updateBy(@NonNull Post postToUpdate, Set<Integer> tagIds, Set<Integer> categoryIds);\n+    PostDetailVO updateBy(@NonNull Post postToUpdate, Set<Integer> tagIds, Set<Integer> categoryIds, boolean autoSave);\n \n     /**\n      * Gets post by post status and url.\n\ndiff --git a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n@@ -144,37 +144,26 @@ private Specification<Post> buildSpecByQuery(@NonNull PostQuery postQuery) {\n     }\n \n     @Override\n-    public PostDetailVO createBy(Post postToCreate, Set<Integer> tagIds, Set<Integer> categoryIds) {\n-        return createOrUpdate(postToCreate, tagIds, categoryIds);\n+    public PostDetailVO createBy(Post postToCreate, Set<Integer> tagIds, Set<Integer> categoryIds, boolean autoSave) {\n+        PostDetailVO createdPost = createOrUpdate(postToCreate, tagIds, categoryIds);\n+        if(!autoSave){\n+            // Log the creation\n+            LogEvent logEvent = new LogEvent(this, createdPost.getId().toString(), LogType.POST_PUBLISHED, createdPost.getTitle());\n+            eventPublisher.publishEvent(logEvent);\n+        }\n+        return createdPost;\n     }\n \n     @Override\n-    public PostDetailVO updateBy(Post postToUpdate, Set<Integer> tagIds, Set<Integer> categoryIds) {\n+    public PostDetailVO updateBy(Post postToUpdate, Set<Integer> tagIds, Set<Integer> categoryIds, boolean autoSave) {\n         // Set edit time\n         postToUpdate.setEditTime(DateUtils.now());\n-\n-        return createOrUpdate(postToUpdate, tagIds, categoryIds);\n-    }\n-\n-    @Override\n-    public Post create(Post post) {\n-        Post createdPost = super.create(post);\n-\n-        // Log the creation\n-        LogEvent logEvent = new LogEvent(this, createdPost.getId().toString(), LogType.POST_PUBLISHED, createdPost.getTitle());\n-        eventPublisher.publishEvent(logEvent);\n-\n-        return createdPost;\n-    }\n-\n-    @Override\n-    public Post update(Post post) {\n-        Post updatedPost = super.update(post);\n-\n-        // Log the creation\n-        LogEvent logEvent = new LogEvent(this, updatedPost.getId().toString(), LogType.POST_EDITED, updatedPost.getTitle());\n-        eventPublisher.publishEvent(logEvent);\n-\n+        PostDetailVO updatedPost = createOrUpdate(postToUpdate, tagIds, categoryIds);\n+        if(!autoSave){\n+            // Log the creation\n+            LogEvent logEvent = new LogEvent(this, updatedPost.getId().toString(), LogType.POST_EDITED, updatedPost.getTitle());\n+            eventPublisher.publishEvent(logEvent);\n+        }\n         return updatedPost;\n     }\n ",
    "output": "Refactor post create and update."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/ThemeController.java b/src/main/java/run/halo/app/controller/admin/api/ThemeController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/ThemeController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/ThemeController.java\n@@ -59,8 +59,7 @@ public BaseResponse<String> getContentBy(@RequestParam(name = \"path\") String pat\n \n     @PutMapping(\"files/content\")\n     public void updateContentBy(@RequestParam(name = \"path\") String path,\n-                                @RequestParam(name = \"content\") String content) {\n-        // TODO Refactor the params to body\n+                                @RequestBody String content) {\n         themeService.saveTemplateContent(path, content);\n     }\n ",
    "output": "Fixed bug #160"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/dto/BaseCommentDTO.java b/src/main/java/run/halo/app/model/dto/BaseCommentDTO.java\n--- a/src/main/java/run/halo/app/model/dto/BaseCommentDTO.java\n+++ b/src/main/java/run/halo/app/model/dto/BaseCommentDTO.java\n@@ -27,6 +27,8 @@ public class BaseCommentDTO implements OutputConverter<BaseCommentDTO, BaseComme\n \n     private String ipAddress;\n \n+    private String authorUrl;\n+\n     private String gavatarMd5;\n \n     private String content;",
    "output": "Update BaseCommentDTO.java"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/api/PostController.java b/src/main/java/run/halo/app/controller/content/api/PostController.java\n--- a/src/main/java/run/halo/app/controller/content/api/PostController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/PostController.java\n@@ -13,6 +13,7 @@\n import run.halo.app.model.dto.post.BasePostDetailDTO;\n import run.halo.app.model.dto.post.BasePostSimpleDTO;\n import run.halo.app.model.entity.Post;\n+import run.halo.app.model.entity.PostComment;\n import run.halo.app.model.enums.CommentStatus;\n import run.halo.app.model.enums.PostStatus;\n import run.halo.app.model.params.PostCommentParam;\n@@ -88,9 +89,12 @@ public Page<CommentWithHasChildrenVO> listTopComments(@PathVariable(\"postId\") In\n \n     @GetMapping(\"{postId:\\\\d+}/comments/{commentParentId:\\\\d+}/children\")\n     public List<BaseCommentDTO> listChildrenBy(@PathVariable(\"postId\") Integer postId,\n-                                               @PathVariable(\"commentParentId\") Integer commentParentId,\n+                                               @PathVariable(\"commentParentId\") Long commentParentId,\n                                                @SortDefault(sort = \"createTime\", direction = DESC) Sort sort) {\n-        return postCommentService.listChildrenBy(postId, commentParentId, CommentStatus.PUBLISHED, sort);\n+        // Find all children comments\n+        List<PostComment> postComments = postCommentService.listChildrenBy(postId, commentParentId, CommentStatus.PUBLISHED, sort);\n+        // Convert to base comment dto\n+        return postCommentService.convertTo(postComments);\n     }\n \n \n\ndiff --git a/src/main/java/run/halo/app/repository/base/BaseCommentRepository.java b/src/main/java/run/halo/app/repository/base/BaseCommentRepository.java\n--- a/src/main/java/run/halo/app/repository/base/BaseCommentRepository.java\n+++ b/src/main/java/run/halo/app/repository/base/BaseCommentRepository.java\n@@ -94,6 +94,27 @@ public interface BaseCommentRepository<COMMENT extends BaseComment> extends Base\n     @NonNull\n     Page<COMMENT> findAllByPostIdAndStatus(Integer postId, CommentStatus status, Pageable pageable);\n \n+    /**\n+     * Finds comments by post id, comment status and parent id.\n+     *\n+     * @param postId   post id must not be null\n+     * @param status   comment status must not be null\n+     * @param parentId comment parent id must not be null\n+     * @return a list of comment\n+     */\n+    @NonNull\n+    List<COMMENT> findAllByPostIdAndStatusAndParentId(Integer postId, CommentStatus status, Long parentId);\n+\n+    /**\n+     * Finds all comments by status and parent id collection.\n+     *\n+     * @param status    comment status must not be null\n+     * @param parentIds parent id collection must not be null\n+     * @return a list of comment\n+     */\n+    @NonNull\n+    List<COMMENT> findAllByStatusAndParentIdIn(@NonNull CommentStatus status, @NonNull Iterable<Long> parentIds);\n+\n     /**\n      * Finds comments by post id, comment status and parent id.\n      *\n@@ -106,6 +127,7 @@ public interface BaseCommentRepository<COMMENT extends BaseComment> extends Base\n     @NonNull\n     Page<COMMENT> findAllByPostIdAndStatusAndParentId(Integer postId, CommentStatus status, Long parentId, Pageable pageable);\n \n+\n     @Query(\"select new run.halo.app.model.projection.CommentChildrenCountProjection(count(comment.id), comment.parentId) \" +\n             \"from BaseComment comment \" +\n             \"where comment.parentId in ?1 \" +\n\ndiff --git a/src/main/java/run/halo/app/service/base/BaseCommentService.java b/src/main/java/run/halo/app/service/base/BaseCommentService.java\n--- a/src/main/java/run/halo/app/service/base/BaseCommentService.java\n+++ b/src/main/java/run/halo/app/service/base/BaseCommentService.java\n@@ -213,5 +213,5 @@ public interface BaseCommentService<COMMENT extends BaseComment> extends CrudSer\n      * @return a list of children comment\n      */\n     @NonNull\n-    List<BaseCommentDTO> listChildrenBy(@NonNull Integer targetId, @NonNull Integer commentParentId, @NonNull CommentStatus status, @NonNull Sort sort);\n+    List<COMMENT> listChildrenBy(@NonNull Integer targetId, @NonNull Long commentParentId, @NonNull CommentStatus status, @NonNull Sort sort);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java b/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n@@ -445,12 +445,55 @@ public Page<CommentWithHasChildrenVO> pageTopCommentsBy(Integer targetId, Commen\n     }\n \n     @Override\n-    public List<BaseCommentDTO> listChildrenBy(Integer targetId, Integer commentParentId, CommentStatus status, Sort sort) {\n+    public List<COMMENT> listChildrenBy(Integer targetId, Long commentParentId, CommentStatus status, Sort sort) {\n         Assert.notNull(targetId, \"Target id must not be null\");\n         Assert.notNull(commentParentId, \"Comment parent id must not be null\");\n         Assert.notNull(sort, \"Sort info must not be null\");\n \n-        return null;\n+        // Get comments recursively\n+\n+        // Get direct children\n+        List<COMMENT> directChildren = baseCommentRepository.findAllByPostIdAndStatusAndParentId(targetId, status, commentParentId);\n+\n+        // Create result container\n+        Set<COMMENT> children = new HashSet<>();\n+\n+        // Get children comments\n+        getChildrenRecursively(directChildren, status, children);\n+\n+        // Sort children\n+        List<COMMENT> childrenList = new ArrayList<>(children);\n+        childrenList.sort(Comparator.comparing(BaseComment::getId));\n+\n+        return childrenList;\n+    }\n+\n+    /**\n+     * Get children comments recursively.\n+     *\n+     * @param topComments top comment list\n+     * @param status      comment status must not be null\n+     * @param children    children result must not be null\n+     */\n+    private void getChildrenRecursively(@Nullable List<COMMENT> topComments, @NonNull CommentStatus status, @NonNull Set<COMMENT> children) {\n+        Assert.notNull(status, \"Comment status must not be null\");\n+        Assert.notNull(children, \"Children comment set must not be null\");\n+\n+        if (CollectionUtils.isEmpty(topComments)) {\n+            return;\n+        }\n+\n+        // Convert comment id set\n+        Set<Long> commentIds = ServiceUtils.fetchProperty(topComments, COMMENT::getId);\n+\n+        // Get direct children\n+        List<COMMENT> directChildren = baseCommentRepository.findAllByStatusAndParentIdIn(status, commentIds);\n+\n+        // Recursively invoke\n+        getChildrenRecursively(directChildren, status, children);\n+\n+        // Add direct children to children result\n+        children.addAll(topComments);\n     }\n \n     /**\n\ndiff --git a/src/main/java/run/halo/app/utils/ServiceUtils.java b/src/main/java/run/halo/app/utils/ServiceUtils.java\n--- a/src/main/java/run/halo/app/utils/ServiceUtils.java\n+++ b/src/main/java/run/halo/app/utils/ServiceUtils.java\n@@ -31,6 +31,7 @@ private ServiceUtils() {\n      * @param <T>             data type\n      * @return a set of id\n      */\n+    @NonNull\n     public static <ID, T> Set<ID> fetchProperty(final Collection<T> datas, Function<T, ID> mappingFunction) {\n         return CollectionUtils.isEmpty(datas) ?\n                 Collections.emptySet() :\n@@ -47,6 +48,7 @@ public static <ID, T> Set<ID> fetchProperty(final Collection<T> datas, Function<\n      * @param <D>             data type\n      * @return a map which key is in ids and value containing in list\n      */\n+    @NonNull\n     public static <ID, D> Map<ID, List<D>> convertToListMap(Collection<ID> ids, Collection<D> list, Function<D, ID> mappingFunction) {\n         Assert.notNull(mappingFunction, \"mapping function must not be null\");\n \n@@ -72,6 +74,7 @@ public static <ID, D> Map<ID, List<D>> convertToListMap(Collection<ID> ids, Coll\n      * @param <D>             data type\n      * @return a map which key from list data and value is data\n      */\n+    @NonNull\n     public static <ID, D> Map<ID, D> convertToMap(Collection<D> list, Function<D, ID> mappingFunction) {\n         Assert.notNull(mappingFunction, \"mapping function must not be null\");\n \n@@ -97,6 +100,7 @@ public static <ID, D> Map<ID, D> convertToMap(Collection<D> list, Function<D, ID\n      * @param <V>           value type\n      * @return a map which key from list data and value is data\n      */\n+    @NonNull\n     public static <ID, D, V> Map<ID, V> convertToMap(Collection<D> list, Function<D, ID> keyFunction, Function<D, V> valueFunction) {\n         Assert.notNull(keyFunction, \"mapping function must not be null\");\n ",
    "output": "Complete comment children list service"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/ContentJournalController.java b/src/main/java/run/halo/app/controller/content/ContentJournalController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentJournalController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentJournalController.java\n@@ -28,7 +28,7 @@\n  */\n @Slf4j\n @Controller\n-@RequestMapping(value = \"/journal\")\n+@RequestMapping(value = \"/journals\")\n public class ContentJournalController {\n \n     private final JournalService journalService;\n@@ -56,8 +56,8 @@ public ContentJournalController(JournalService journalService,\n      * @return template path: theme/{theme}/journal.ftl\n      */\n     @GetMapping\n-    public String journal(Model model) {\n-        return this.journal(model, 1, Sort.by(DESC, \"createTime\"));\n+    public String journals(Model model) {\n+        return this.journals(model, 1, Sort.by(DESC, \"createTime\"));\n     }\n \n \n@@ -69,7 +69,7 @@ public String journal(Model model) {\n      * @return template path: theme/{theme}/journal.ftl\n      */\n     @GetMapping(value = \"page/{page}\")\n-    public String journal(Model model,\n+    public String journals(Model model,\n                           @PathVariable(value = \"page\") Integer page,\n                           @SortDefault(sort = \"createTime\", direction = DESC) Sort sort) {\n         log.debug(\"Requested journal page, sort info: [{}]\", sort);\n@@ -85,6 +85,6 @@ public String journal(Model model,\n         model.addAttribute(\"is_journal\", true);\n         model.addAttribute(\"journals\", journals);\n         model.addAttribute(\"rainbow\", rainbow);\n-        return themeService.render(\"journal\");\n+        return themeService.render(\"journals\");\n     }\n }",
    "output": "Change journal to journals."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/repository/base/BaseCommentRepository.java b/src/main/java/run/halo/app/repository/base/BaseCommentRepository.java\n--- a/src/main/java/run/halo/app/repository/base/BaseCommentRepository.java\n+++ b/src/main/java/run/halo/app/repository/base/BaseCommentRepository.java\n@@ -84,7 +84,7 @@ public interface BaseCommentRepository<COMMENT extends BaseComment> extends Base\n     List<COMMENT> findAllByPostIdAndStatus(Integer postId, CommentStatus status);\n \n     /**\n-     * Finds comments by post id, comment status.\n+     * Finds comments by post id and comment status.\n      *\n      * @param postId   post id must not be null\n      * @param status   comment status must not be null\n@@ -94,6 +94,18 @@ public interface BaseCommentRepository<COMMENT extends BaseComment> extends Base\n     @NonNull\n     Page<COMMENT> findAllByPostIdAndStatus(Integer postId, CommentStatus status, Pageable pageable);\n \n+    /**\n+     * Finds comments by post id, comment status and parent id.\n+     *\n+     * @param postId   post id must not be null\n+     * @param status   comment status must not be null\n+     * @param parentId comment parent id must not be null\n+     * @param pageable page info must not be null\n+     * @return a page of comment\n+     */\n+    @NonNull\n+    Page<COMMENT> findAllByPostIdAndStatusAndParentId(Integer postId, CommentStatus status, Long parentId, Pageable pageable);\n+\n     @Query(\"select new run.halo.app.model.projection.CommentChildrenCountProjection(count(comment.id), comment.parentId) \" +\n             \"from BaseComment comment \" +\n             \"where comment.parentId in ?1 \" +\n\ndiff --git a/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java b/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n@@ -425,7 +425,7 @@ public Page<CommentWithHasChildrenVO> pageTopCommentsBy(Integer targetId, Commen\n         Assert.notNull(pageable, \"Page info must not be null\");\n \n         // Get all comments\n-        Page<COMMENT> topCommentPage = baseCommentRepository.findAllByPostIdAndStatus(targetId, status, pageable);\n+        Page<COMMENT> topCommentPage = baseCommentRepository.findAllByPostIdAndStatusAndParentId(targetId, status, 0L, pageable);\n \n         // Get top comment ids\n         Set<Long> topCommentIds = ServiceUtils.fetchProperty(topCommentPage.getContent(), BaseComment::getId);",
    "output": "Fix page top comments bug"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/ContentFeedController.java b/src/main/java/run/halo/app/controller/content/ContentFeedController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentFeedController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentFeedController.java\n@@ -106,7 +106,7 @@ public String sitemapXml(Model model,\n      * @param model model\n      * @return String\n      */\n-    @GetMapping(value = \"sitemap.html\", produces = MediaType.TEXT_PLAIN_VALUE)\n+    @GetMapping(value = \"sitemap.html\")\n     public String sitemapHtml(Model model,\n                               @PageableDefault(size = Integer.MAX_VALUE, sort = \"createTime\", direction = DESC) Pageable pageable) {\n         model.addAttribute(\"posts\", buildPosts(pageable));",
    "output": "Fix sitemap.html show error"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/ContentFeedController.java b/src/main/java/run/halo/app/controller/content/ContentFeedController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentFeedController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentFeedController.java\n@@ -6,6 +6,7 @@\n import org.springframework.data.domain.PageRequest;\n import org.springframework.data.domain.Pageable;\n import org.springframework.data.domain.Sort;\n+import org.springframework.data.web.PageableDefault;\n import org.springframework.http.MediaType;\n import org.springframework.lang.NonNull;\n import org.springframework.stereotype.Controller;\n@@ -92,8 +93,9 @@ public String atom(Model model) throws IOException, TemplateException {\n      */\n     @GetMapping(value = {\"sitemap\", \"sitemap.xml\"}, produces = XML_MEDIA_TYPE)\n     @ResponseBody\n-    public String sitemapXml(Model model) throws IOException, TemplateException {\n-        model.addAttribute(\"posts\", buildPosts(null));\n+    public String sitemapXml(Model model,\n+                             @PageableDefault(size = Integer.MAX_VALUE, sort = \"createTime\", direction = DESC) Pageable pageable) throws IOException, TemplateException {\n+        model.addAttribute(\"posts\", buildPosts(pageable));\n         Template template = freeMarker.getConfiguration().getTemplate(\"common/web/sitemap_xml.ftl\");\n         return FreeMarkerTemplateUtils.processTemplateIntoString(template, model);\n     }\n@@ -105,8 +107,9 @@ public String sitemapXml(Model model) throws IOException, TemplateException {\n      * @return String\n      */\n     @GetMapping(value = \"sitemap.html\", produces = MediaType.TEXT_PLAIN_VALUE)\n-    public String sitemapHtml(Model model) {\n-        model.addAttribute(\"posts\", buildPosts(null));\n+    public String sitemapHtml(Model model,\n+                              @PageableDefault(size = Integer.MAX_VALUE, sort = \"createTime\", direction = DESC) Pageable pageable) {\n+        model.addAttribute(\"posts\", buildPosts(pageable));\n         return \"common/web/sitemap_html\";\n     }\n \n@@ -142,12 +145,7 @@ private Pageable buildPostPageable(int size) {\n      * @param pageable pageable\n      * @return List<Post>\n      */\n-    private List<PostListVO> buildPosts(Pageable pageable) {\n-        if (pageable == null) {\n-            Page<Post> postPage = postService.pageBy(PostStatus.PUBLISHED, null);\n-            return postService.convertToListVo(postPage).getContent();\n-        }\n-\n+    private List<PostListVO> buildPosts(@NonNull Pageable pageable) {\n         Page<Post> postPage = postService.pageBy(PostStatus.PUBLISHED, pageable);\n         Page<PostListVO> posts = postService.convertToListVo(postPage);\n         return posts.getContent();",
    "output": "Resovle issue(#164)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java b/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n--- a/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n+++ b/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n@@ -88,14 +88,14 @@ private void loadUserConfig() throws TemplateModelException {\n \n     private void loadOptionsConfig() throws TemplateModelException {\n         configuration.setSharedVariable(\"options\", optionService.listOptions());\n-        configuration.setSharedVariable(\"ctx\", optionService.getBlogBaseUrl());\n+        configuration.setSharedVariable(\"context\", optionService.getBlogBaseUrl());\n         log.debug(\"Loaded options\");\n     }\n \n     private void loadThemeConfig() throws TemplateModelException {\n         ThemeProperty activatedTheme = themeService.getActivatedTheme();\n         configuration.setSharedVariable(\"theme\", activatedTheme);\n-        configuration.setSharedVariable(\"static\", activatedTheme.getFolderName());\n+        configuration.setSharedVariable(\"static\", optionService.getBlogBaseUrl() + \"/\" + activatedTheme.getFolderName());\n         configuration.setSharedVariable(\"settings\", themeSettingService.listAsMapBy(themeService.getActivatedThemeId()));\n         log.debug(\"Loaded theme and settings\");\n     }\n\ndiff --git a/src/main/java/run/halo/app/service/PostService.java b/src/main/java/run/halo/app/service/PostService.java\n--- a/src/main/java/run/halo/app/service/PostService.java\n+++ b/src/main/java/run/halo/app/service/PostService.java\n@@ -97,6 +97,15 @@ public interface PostService extends BasePostService<Post> {\n     @NonNull\n     List<ArchiveMonthVO> listMonthArchives();\n \n+    /**\n+     * Import post from markdown document.\n+     *\n+     * @param markdown markdown document.\n+     * @return imported post\n+     */\n+    @NonNull\n+    Post importMarkdown(@NonNull String markdown);\n+\n     /**\n      * Converts to detail vo.\n      *\n\ndiff --git a/src/main/java/run/halo/app/service/SheetService.java b/src/main/java/run/halo/app/service/SheetService.java\n--- a/src/main/java/run/halo/app/service/SheetService.java\n+++ b/src/main/java/run/halo/app/service/SheetService.java\n@@ -45,6 +45,15 @@ public interface SheetService extends BasePostService<Sheet> {\n     @Override\n     Sheet getBy(PostStatus status, String url);\n \n+    /**\n+     * Import sheet from markdown document.\n+     *\n+     * @param markdown markdown document.\n+     * @return imported sheet\n+     */\n+    @NonNull\n+    Sheet importMarkdown(@NonNull String markdown);\n+\n     /**\n      * Converts to list dto page.\n      *\n@@ -53,6 +62,4 @@ public interface SheetService extends BasePostService<Sheet> {\n      */\n     @NonNull\n     Page<SheetListVO> convertToListVo(@NonNull Page<Sheet> sheetPage);\n-\n-\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n@@ -26,6 +26,7 @@\n import run.halo.app.repository.PostRepository;\n import run.halo.app.service.*;\n import run.halo.app.utils.DateUtils;\n+import run.halo.app.utils.MarkdownUtils;\n import run.halo.app.utils.ServiceUtils;\n \n import javax.persistence.criteria.Predicate;\n@@ -272,6 +273,19 @@ public List<ArchiveMonthVO> listMonthArchives() {\n         return archives;\n     }\n \n+    @Override\n+    public Post importMarkdown(String markdown) {\n+        Assert.notNull(markdown, \"Markdown document must not be null\");\n+\n+        // Render markdown to html document.\n+        String content = MarkdownUtils.renderMarkdown(markdown);\n+\n+        // Gets frontMatter\n+        Map<String, List<String>> frontMatter = MarkdownUtils.getFrontMatter(markdown);\n+\n+        return null;\n+    }\n+\n     @Override\n     public PostDetailVO convertToDetailVo(Post post) {\n         return convertTo(post,\n\ndiff --git a/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java b/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n@@ -15,6 +15,7 @@\n import run.halo.app.service.OptionService;\n import run.halo.app.service.SheetCommentService;\n import run.halo.app.service.SheetService;\n+import run.halo.app.utils.MarkdownUtils;\n import run.halo.app.utils.ServiceUtils;\n \n import java.util.List;\n@@ -94,6 +95,19 @@ public Sheet getBy(PostStatus status, String url) {\n         return sheet;\n     }\n \n+    @Override\n+    public Sheet importMarkdown(String markdown) {\n+        Assert.notNull(markdown, \"Markdown document must not be null\");\n+\n+        // Render markdown to html document.\n+        String content = MarkdownUtils.renderMarkdown(markdown);\n+\n+        // Gets frontMatter\n+        Map<String, List<String>> frontMatter = MarkdownUtils.getFrontMatter(markdown);\n+\n+        return null;\n+    }\n+\n     @Override\n     public Sheet removeById(Integer id) {\n         Sheet sheet = super.removeById(id);",
    "output": "Change ctx to context."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java b/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n--- a/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n+++ b/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n@@ -11,6 +11,7 @@\n import run.halo.app.event.options.OptionUpdatedEvent;\n import run.halo.app.event.theme.ThemeActivatedEvent;\n import run.halo.app.event.user.UserUpdatedEvent;\n+import run.halo.app.handler.theme.config.support.ThemeProperty;\n import run.halo.app.service.OptionService;\n import run.halo.app.service.ThemeService;\n import run.halo.app.service.ThemeSettingService;\n@@ -92,8 +93,9 @@ private void loadOptionsConfig() throws TemplateModelException {\n     }\n \n     private void loadThemeConfig() throws TemplateModelException {\n-        configuration.setSharedVariable(\"theme\", themeService.getActivatedTheme());\n-        configuration.setSharedVariable(\"static\", themeService.getActivatedTheme().getFolderName());\n+        ThemeProperty activatedTheme = themeService.getActivatedTheme();\n+        configuration.setSharedVariable(\"theme\", activatedTheme);\n+        configuration.setSharedVariable(\"static\", activatedTheme.getFolderName());\n         configuration.setSharedVariable(\"settings\", themeSettingService.listAsMapBy(themeService.getActivatedThemeId()));\n         log.debug(\"Loaded theme and settings\");\n     }\n\ndiff --git a/src/main/java/run/halo/app/listener/StartedListener.java b/src/main/java/run/halo/app/listener/StartedListener.java\n--- a/src/main/java/run/halo/app/listener/StartedListener.java\n+++ b/src/main/java/run/halo/app/listener/StartedListener.java\n@@ -1,5 +1,6 @@\n package run.halo.app.listener;\n \n+import com.sun.nio.zipfs.JarFileSystemProvider;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.context.event.ApplicationStartedEvent;\n@@ -81,6 +82,8 @@ private void initThemes() {\n \n             URI themeUri = ResourceUtils.getURL(themeClassPath).toURI();\n \n+            log.debug(\"Theme uri: [{}]\", themeUri);\n+\n             Path source;\n \n             if (themeUri.getScheme().equalsIgnoreCase(\"jar\")) {\n\ndiff --git a/src/main/java/run/halo/app/service/base/BaseCommentService.java b/src/main/java/run/halo/app/service/base/BaseCommentService.java\n--- a/src/main/java/run/halo/app/service/base/BaseCommentService.java\n+++ b/src/main/java/run/halo/app/service/base/BaseCommentService.java\n@@ -186,11 +186,11 @@ public interface BaseCommentService<COMMENT extends BaseComment> extends CrudSer\n     List<BaseCommentVO> convertToVo(@Nullable List<COMMENT> comments, @Nullable Comparator<BaseCommentVO> comparator);\n \n     /**\n-     * Target must exist.\n+     * Target validation.\n      *\n      * @param targetId target id must not be null (post id, sheet id or journal id)\n      */\n-    void targetMustExist(@NonNull Integer targetId);\n+    void validateTarget(@NonNull Integer targetId);\n \n     /**\n      * Lists a page of top comment.\n\ndiff --git a/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java b/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n@@ -223,7 +223,7 @@ public COMMENT create(COMMENT comment) {\n \n         // Check post id\n         if (!ServiceUtils.isEmptyId(comment.getPostId())) {\n-            targetMustExist(comment.getPostId());\n+            validateTarget(comment.getPostId());\n         }\n \n         // Check parent id\n\ndiff --git a/src/main/java/run/halo/app/service/impl/JournalCommentServiceImpl.java b/src/main/java/run/halo/app/service/impl/JournalCommentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/JournalCommentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/JournalCommentServiceImpl.java\n@@ -47,9 +47,9 @@ public JournalCommentServiceImpl(JournalCommentRepository journalCommentReposito\n     }\n \n     @Override\n-    public void targetMustExist(Integer journalId) {\n+    public void validateTarget(Integer journalId) {\n         if (!journalRepository.existsById(journalId)) {\n-            throw new NotFoundException(\"The journal with id \" + journalId + \" was not found\");\n+            throw new NotFoundException(\"该日志不存在或已删除\").setErrorData(journalId);\n         }\n     }\n \n\ndiff --git a/src/main/java/run/halo/app/service/impl/PostCommentServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostCommentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostCommentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostCommentServiceImpl.java\n@@ -8,6 +8,7 @@\n import org.springframework.stereotype.Service;\n import org.springframework.util.Assert;\n import org.springframework.util.CollectionUtils;\n+import run.halo.app.exception.BadRequestException;\n import run.halo.app.exception.NotFoundException;\n import run.halo.app.model.dto.post.BasePostMinimalDTO;\n import run.halo.app.model.entity.Post;\n@@ -92,9 +93,12 @@ public Page<PostCommentWithPostVO> pageTreeBy(CommentQuery commentQuery, Pageabl\n     }\n \n     @Override\n-    public void targetMustExist(Integer postId) {\n-        if (!postRepository.existsById(postId)) {\n-            throw new NotFoundException(\"The post with id \" + postId + \" was not found\");\n+    public void validateTarget(Integer postId) {\n+        Post post = postRepository.findById(postId)\n+                .orElseThrow(() -> new NotFoundException(\"该文章不存在或已删除\").setErrorData(postId));\n+\n+        if (post.getDisallowComment()) {\n+            throw new BadRequestException(\"该文章已经被禁止评论\").setErrorData(postId);\n         }\n     }\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/SheetCommentServiceImpl.java b/src/main/java/run/halo/app/service/impl/SheetCommentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/SheetCommentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/SheetCommentServiceImpl.java\n@@ -6,6 +6,7 @@\n import org.springframework.stereotype.Service;\n import org.springframework.util.Assert;\n import org.springframework.util.CollectionUtils;\n+import run.halo.app.exception.BadRequestException;\n import run.halo.app.exception.NotFoundException;\n import run.halo.app.model.dto.post.BasePostMinimalDTO;\n import run.halo.app.model.entity.Sheet;\n@@ -48,9 +49,12 @@ public SheetCommentServiceImpl(SheetCommentRepository sheetCommentRepository,\n     }\n \n     @Override\n-    public void targetMustExist(Integer sheetId) {\n-        if (sheetRepository.existsById(sheetId)) {\n-            throw new NotFoundException(\"The sheet with id \" + sheetId + \" was not found\");\n+    public void validateTarget(Integer sheetId) {\n+        Sheet sheet = sheetRepository.findById(sheetId)\n+                .orElseThrow(() -> new NotFoundException(\"该页面不存在或已删除\").setErrorData(sheetId));\n+\n+        if (sheet.getDisallowComment()) {\n+            throw new BadRequestException(\"该页面已被禁止评论\").setErrorData(sheetId);\n         }\n     }\n \n\ndiff --git a/src/test/java/run/halo/app/utils/PathTest.java b/src/test/java/run/halo/app/utils/PathTest.java\n--- a/src/test/java/run/halo/app/utils/PathTest.java\n+++ b/src/test/java/run/halo/app/utils/PathTest.java\n@@ -0,0 +1,42 @@\n+package run.halo.app.utils;\n+\n+import com.sun.nio.zipfs.JarFileSystemProvider;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.*;\n+import java.util.Collections;\n+\n+/**\n+ * Path test.\n+ *\n+ * @author johnniang\n+ * @date 19-5-20\n+ */\n+public class PathTest {\n+\n+    @Test(expected = FileSystemNotFoundException.class)\n+    public void getPathOfJarFileFailure() throws URISyntaxException {\n+        String file = \"jar:file:/path/to/jar/xxx.jar!/BOOT-INF/classes!/templates/themes\";\n+        URI uri = new URI(file);\n+        Path path = Paths.get(uri);\n+\n+        System.out.println(\"Path: \" + path.toString());\n+    }\n+\n+//    @Test\n+//    public void getPathOfJarFileSuccessfully() throws URISyntaxException, IOException {\n+//        String file = \"jar:file:/path/to/jar/xxx.jar!/BOOT-INF/classes!/templates/themes\";\n+//        URI uri = new URI(file);\n+//        FileSystem fileSystem = FileSystems.newFileSystem(uri, Collections.emptyMap());\n+//        Path path = fileSystem.getPath(\"/BOOT-INF/classes/templates/themes\");\n+//\n+//        System.out.println(\"Path: \" + path.toString());\n+//\n+//        Files.walk(path, 1).forEach(p -> {\n+//            System.out.println(p.toString());\n+//        });\n+//    }\n+}",
    "output": "Complete issue(#156)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java b/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n--- a/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n+++ b/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n@@ -93,6 +93,7 @@ private void loadOptionsConfig() throws TemplateModelException {\n \n     private void loadThemeConfig() throws TemplateModelException {\n         configuration.setSharedVariable(\"theme\", themeService.getActivatedTheme());\n+        configuration.setSharedVariable(\"static\", themeService.getActivatedTheme().getFolderName());\n         configuration.setSharedVariable(\"settings\", themeSettingService.listAsMapBy(themeService.getActivatedThemeId()));\n         log.debug(\"Loaded theme and settings\");\n     }",
    "output": "Support static variable."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java b/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n--- a/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n+++ b/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n@@ -7,7 +7,6 @@\n import org.springframework.context.event.EventListener;\n import org.springframework.core.Ordered;\n import org.springframework.core.annotation.Order;\n-import org.springframework.scheduling.annotation.Async;\n import org.springframework.stereotype.Component;\n import run.halo.app.event.options.OptionUpdatedEvent;\n import run.halo.app.event.theme.ThemeActivatedEvent;\n@@ -88,6 +87,7 @@ private void loadUserConfig() throws TemplateModelException {\n \n     private void loadOptionsConfig() throws TemplateModelException {\n         configuration.setSharedVariable(\"options\", optionService.listOptions());\n+        configuration.setSharedVariable(\"ctx\", optionService.getBlogBaseUrl());\n         log.debug(\"Loaded options\");\n     }\n ",
    "output": "Support ctx to instead of options.blog_url."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/ThemeController.java b/src/main/java/run/halo/app/controller/admin/api/ThemeController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/ThemeController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/ThemeController.java\n@@ -140,4 +140,9 @@ public ThemeProperty fetchTheme(@RequestParam(\"uri\") String uri) {\n     public void reload() {\n         themeService.reload();\n     }\n+\n+    @GetMapping(value = \"activation/template/exists\")\n+    public BaseResponse exists(@RequestParam(value = \"template\") String template) {\n+        return BaseResponse.ok(themeService.templateExists(template));\n+    }\n }\n\ndiff --git a/src/main/java/run/halo/app/event/post/AbstractVisitEventListener.java b/src/main/java/run/halo/app/event/post/AbstractVisitEventListener.java\n--- a/src/main/java/run/halo/app/event/post/AbstractVisitEventListener.java\n+++ b/src/main/java/run/halo/app/event/post/AbstractVisitEventListener.java\n@@ -1,8 +1,8 @@\n package run.halo.app.event.post;\n \n-import cn.hutool.core.lang.Assert;\n import lombok.NonNull;\n import lombok.extern.slf4j.Slf4j;\n+import org.springframework.util.Assert;\n import run.halo.app.service.base.BasePostService;\n \n import java.util.Map;\n\ndiff --git a/src/main/java/run/halo/app/handler/file/AliYunFileHandler.java b/src/main/java/run/halo/app/handler/file/AliYunFileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/AliYunFileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/AliYunFileHandler.java\n@@ -1,13 +1,14 @@\n package run.halo.app.handler.file;\n \n-import cn.hutool.core.lang.Assert;\n import com.aliyun.oss.OSS;\n import com.aliyun.oss.OSSClientBuilder;\n-import com.aliyun.oss.model.*;\n+import com.aliyun.oss.model.DeleteObjectsRequest;\n+import com.aliyun.oss.model.PutObjectResult;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.lang3.StringUtils;\n import org.springframework.http.MediaType;\n import org.springframework.stereotype.Component;\n+import org.springframework.util.Assert;\n import org.springframework.web.multipart.MultipartFile;\n import run.halo.app.exception.FileOperationException;\n import run.halo.app.model.enums.AttachmentType;\n@@ -18,11 +19,11 @@\n \n import javax.imageio.ImageIO;\n import java.awt.image.BufferedImage;\n-import java.util.Date;\n import java.util.Objects;\n \n /**\n  * AliYun file handler.\n+ *\n  * @author MyFaith\n  * @date 2019-04-04 00:06:13\n  */\n@@ -81,7 +82,7 @@ public UploadResult upload(MultipartFile file) {\n             }\n \n             return uploadResult;\n-        } catch (Exception e){\n+        } catch (Exception e) {\n             e.printStackTrace();\n         } finally {\n             ossClient.shutdown();\n\ndiff --git a/src/main/java/run/halo/app/security/handler/DefaultAuthenticationFailureHandler.java b/src/main/java/run/halo/app/security/handler/DefaultAuthenticationFailureHandler.java\n--- a/src/main/java/run/halo/app/security/handler/DefaultAuthenticationFailureHandler.java\n+++ b/src/main/java/run/halo/app/security/handler/DefaultAuthenticationFailureHandler.java\n@@ -1,15 +1,14 @@\n package run.halo.app.security.handler;\n \n-import run.halo.app.exception.HaloException;\n-import run.halo.app.model.support.BaseResponse;\n-import run.halo.app.utils.ExceptionUtils;\n-import run.halo.app.utils.JsonUtils;\n import cn.hutool.extra.servlet.ServletUtil;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.http.MediaType;\n import org.springframework.util.Assert;\n import run.halo.app.exception.HaloException;\n+import run.halo.app.model.support.BaseResponse;\n+import run.halo.app.utils.ExceptionUtils;\n+import run.halo.app.utils.JsonUtils;\n \n import javax.servlet.ServletException;\n import javax.servlet.http.HttpServletRequest;\n\ndiff --git a/src/main/java/run/halo/app/service/impl/JournalCommentServiceImpl.java b/src/main/java/run/halo/app/service/impl/JournalCommentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/JournalCommentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/JournalCommentServiceImpl.java\n@@ -1,11 +1,11 @@\n package run.halo.app.service.impl;\n \n import cn.hutool.core.collection.CollectionUtil;\n-import cn.hutool.core.lang.Assert;\n import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.PageImpl;\n import org.springframework.stereotype.Service;\n+import org.springframework.util.Assert;\n import run.halo.app.exception.NotFoundException;\n import run.halo.app.model.dto.JournalDTO;\n import run.halo.app.model.entity.Journal;\n\ndiff --git a/src/main/java/run/halo/app/service/impl/RecoveryServiceImpl.java b/src/main/java/run/halo/app/service/impl/RecoveryServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/RecoveryServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/RecoveryServiceImpl.java\n@@ -1,12 +1,12 @@\n package run.halo.app.service.impl;\n \n-import cn.hutool.core.lang.Assert;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.lang3.StringUtils;\n import org.springframework.lang.NonNull;\n import org.springframework.lang.Nullable;\n import org.springframework.scheduling.annotation.Async;\n import org.springframework.stereotype.Service;\n+import org.springframework.util.Assert;\n import org.springframework.util.CollectionUtils;\n import org.springframework.util.FileCopyUtils;\n import org.springframework.web.multipart.MultipartFile;\n\ndiff --git a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n@@ -1,6 +1,5 @@\n package run.halo.app.service.impl;\n \n-import cn.hutool.core.io.FileUtil;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.lang3.StringUtils;\n import org.eclipse.jgit.api.Git;\n@@ -28,7 +27,6 @@\n import run.halo.app.model.support.ThemeFile;\n import run.halo.app.service.OptionService;\n import run.halo.app.service.ThemeService;\n-import run.halo.app.service.support.HaloMediaType;\n import run.halo.app.utils.FileUtils;\n import run.halo.app.utils.FilenameUtils;\n import run.halo.app.utils.HaloUtils;\n@@ -248,7 +246,7 @@ public void deleteTheme(String themeId) {\n \n         try {\n             // Delete the folder\n-            FileUtil.del(Paths.get(themeProperty.getThemePath()));\n+            FileUtils.del(Paths.get(themeProperty.getThemePath()));\n \n             // Delete theme cache\n             eventPublisher.publishEvent(new ThemeUpdatedEvent(this));\n@@ -329,6 +327,16 @@ public ThemeProperty getActivatedTheme() {\n         return activatedTheme;\n     }\n \n+    /**\n+     * Sets activated theme.\n+     *\n+     * @param activatedTheme activated theme\n+     */\n+    private void setActivatedTheme(@Nullable ThemeProperty activatedTheme) {\n+        this.activatedTheme = activatedTheme;\n+        this.activatedThemeId = Optional.ofNullable(activatedTheme).map(ThemeProperty::getId).orElse(null);\n+    }\n+\n     @Override\n     public ThemeProperty activateTheme(String themeId) {\n         // Check existence of the theme\n@@ -513,16 +521,6 @@ private Path createTempPath() throws IOException {\n         return Files.createTempDirectory(\"halo\");\n     }\n \n-    /**\n-     * Sets activated theme.\n-     *\n-     * @param activatedTheme activated theme\n-     */\n-    private void setActivatedTheme(@Nullable ThemeProperty activatedTheme) {\n-        this.activatedTheme = activatedTheme;\n-        this.activatedThemeId = Optional.ofNullable(activatedTheme).map(ThemeProperty::getId).orElse(null);\n-    }\n-\n     /**\n      * Lists theme files as tree view.\n      *\n\ndiff --git a/src/main/java/run/halo/app/utils/FileUtils.java b/src/main/java/run/halo/app/utils/FileUtils.java\n--- a/src/main/java/run/halo/app/utils/FileUtils.java\n+++ b/src/main/java/run/halo/app/utils/FileUtils.java\n@@ -1,5 +1,6 @@\n package run.halo.app.utils;\n \n+import cn.hutool.core.io.IORuntimeException;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.lang.NonNull;\n import org.springframework.lang.Nullable;\n@@ -259,4 +260,44 @@ public static void deleteFolderQuietly(@NonNull Path deletingPath) {\n             log.warn(\"Failed to delete \" + deletingPath);\n         }\n     }\n+\n+    /**\n+     * 删除文件或者文件夹\n+     *\n+     * @param path path\n+     * @return boolean\n+     * @throws IORuntimeException IORuntimeException\n+     */\n+    public static boolean del(Path path) throws IORuntimeException {\n+        if (Files.notExists(path)) {\n+            return true;\n+        }\n+        try {\n+            if (Files.isDirectory(path)) {\n+                Files.walkFileTree(path, new SimpleFileVisitor<Path>() {\n+\n+                    @Override\n+                    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n+                        Files.delete(file);\n+                        return FileVisitResult.CONTINUE;\n+                    }\n+\n+                    @Override\n+                    public FileVisitResult postVisitDirectory(Path dir, IOException e) throws IOException {\n+                        if (e == null) {\n+                            Files.delete(dir);\n+                            return FileVisitResult.CONTINUE;\n+                        } else {\n+                            throw e;\n+                        }\n+                    }\n+                });\n+            } else {\n+                Files.delete(path);\n+            }\n+        } catch (IOException e) {\n+            throw new IORuntimeException(e);\n+        }\n+        return true;\n+    }\n }",
    "output": "Change cn.hutool.core.lang.Assert to org.springframework.util.Assert."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/MainController.java b/src/main/java/run/halo/app/controller/content/MainController.java\n--- a/src/main/java/run/halo/app/controller/content/MainController.java\n+++ b/src/main/java/run/halo/app/controller/content/MainController.java\n@@ -48,15 +48,15 @@ public String version() {\n         return HaloConst.HALO_VERSION;\n     }\n \n-    @GetMapping(\"/user/avatar\")\n+    @GetMapping(\"/avatar\")\n     public void avatar(HttpServletResponse response) throws IOException {\n         User user = userService.getCurrentUser().orElseThrow(() -> new ServiceException(\"Can not find blog owner\"));\n         if (StringUtils.isNotEmpty(user.getAvatar())) {\n             response.sendRedirect(user.getAvatar());\n         }\n     }\n \n-    @GetMapping(\"/blog/logo\")\n+    @GetMapping(\"/logo\")\n     public void logo(HttpServletResponse response) throws IOException {\n         String blogLogo = optionService.getByProperty(BlogProperties.BLOG_LOGO).orElse(\"\").toString();\n         if(StringUtils.isNotEmpty(blogLogo)){",
    "output": "Support blog logo and user avatar url."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/MainController.java b/src/main/java/run/halo/app/controller/content/MainController.java\n--- a/src/main/java/run/halo/app/controller/content/MainController.java\n+++ b/src/main/java/run/halo/app/controller/content/MainController.java\n@@ -1,9 +1,18 @@\n package run.halo.app.controller.content;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.ResponseBody;\n+import run.halo.app.exception.ServiceException;\n+import run.halo.app.model.entity.User;\n+import run.halo.app.model.properties.BlogProperties;\n import run.halo.app.model.support.HaloConst;\n+import run.halo.app.service.OptionService;\n+import run.halo.app.service.UserService;\n+\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n \n /**\n  * Admin page.\n@@ -14,6 +23,14 @@\n @Controller\n public class MainController {\n \n+    private final UserService userService;\n+\n+    private final OptionService optionService;\n+\n+    public MainController(UserService userService, OptionService optionService) {\n+        this.userService = userService;\n+        this.optionService = optionService;\n+    }\n \n     @GetMapping(\"/admin\")\n     public String admin() {\n@@ -30,4 +47,20 @@ public String installation() {\n     public String version() {\n         return HaloConst.HALO_VERSION;\n     }\n+\n+    @GetMapping(\"/user/avatar\")\n+    public void avatar(HttpServletResponse response) throws IOException {\n+        User user = userService.getCurrentUser().orElseThrow(() -> new ServiceException(\"Can not find blog owner\"));\n+        if (StringUtils.isNotEmpty(user.getAvatar())) {\n+            response.sendRedirect(user.getAvatar());\n+        }\n+    }\n+\n+    @GetMapping(\"/blog/logo\")\n+    public void logo(HttpServletResponse response) throws IOException {\n+        String blogLogo = optionService.getByProperty(BlogProperties.BLOG_LOGO).orElse(\"\").toString();\n+        if(StringUtils.isNotEmpty(blogLogo)){\n+            response.sendRedirect(blogLogo);\n+        }\n+    }\n }",
    "output": "Support blog logo and user avatar url."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/PostController.java b/src/main/java/run/halo/app/controller/admin/api/PostController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/PostController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/PostController.java\n@@ -77,22 +77,24 @@ public void likes(@PathVariable(\"postId\") Integer postId) {\n     }\n \n     @PostMapping\n-    public PostDetailVO createBy(@Valid @RequestBody PostParam postParam) {\n+    public PostDetailVO createBy(@Valid @RequestBody PostParam postParam,\n+                                 @RequestParam(value = \"autoSave\", required = false, defaultValue = \"false\") Boolean autoSave) {\n         // Convert to\n         Post post = postParam.convertTo();\n \n-        return postService.createBy(post, postParam.getTagIds(), postParam.getCategoryIds());\n+        return postService.createBy(post, postParam.getTagIds(), postParam.getCategoryIds(), autoSave);\n     }\n \n     @PutMapping(\"{postId:\\\\d+}\")\n     public PostDetailVO updateBy(@Valid @RequestBody PostParam postParam,\n-                                 @PathVariable(\"postId\") Integer postId) {\n+                                 @PathVariable(\"postId\") Integer postId,\n+                                 @RequestParam(value = \"autoSave\", required = false, defaultValue = \"false\") Boolean autoSave) {\n         // Get the post info\n         Post postToUpdate = postService.getById(postId);\n \n         postParam.update(postToUpdate);\n \n-        return postService.updateBy(postToUpdate, postParam.getTagIds(), postParam.getCategoryIds());\n+        return postService.updateBy(postToUpdate, postParam.getTagIds(), postParam.getCategoryIds(), autoSave);\n     }\n \n     @PutMapping(\"{postId:\\\\d+}/status/{status}\")\n\ndiff --git a/src/main/java/run/halo/app/service/PostService.java b/src/main/java/run/halo/app/service/PostService.java\n--- a/src/main/java/run/halo/app/service/PostService.java\n+++ b/src/main/java/run/halo/app/service/PostService.java\n@@ -50,23 +50,25 @@ public interface PostService extends BasePostService<Post> {\n      * @param post        post must not be null\n      * @param tagIds      tag id set\n      * @param categoryIds category id set\n+     * @param autoSave    autoSave\n      * @return post created\n      */\n     @NonNull\n     @Transactional\n-    PostDetailVO createBy(@NonNull Post post, Set<Integer> tagIds, Set<Integer> categoryIds);\n+    PostDetailVO createBy(@NonNull Post post, Set<Integer> tagIds, Set<Integer> categoryIds, boolean autoSave);\n \n     /**\n      * Updates post by post, tag id set and category id set.\n      *\n      * @param postToUpdate post to update must not be null\n      * @param tagIds       tag id set\n      * @param categoryIds  category id set\n+     * @param autoSave     autoSave\n      * @return updated post\n      */\n     @NonNull\n     @Transactional\n-    PostDetailVO updateBy(@NonNull Post postToUpdate, Set<Integer> tagIds, Set<Integer> categoryIds);\n+    PostDetailVO updateBy(@NonNull Post postToUpdate, Set<Integer> tagIds, Set<Integer> categoryIds, boolean autoSave);\n \n     /**\n      * Gets post by post status and url.\n\ndiff --git a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n@@ -144,37 +144,26 @@ private Specification<Post> buildSpecByQuery(@NonNull PostQuery postQuery) {\n     }\n \n     @Override\n-    public PostDetailVO createBy(Post postToCreate, Set<Integer> tagIds, Set<Integer> categoryIds) {\n-        return createOrUpdate(postToCreate, tagIds, categoryIds);\n+    public PostDetailVO createBy(Post postToCreate, Set<Integer> tagIds, Set<Integer> categoryIds, boolean autoSave) {\n+        PostDetailVO createdPost = createOrUpdate(postToCreate, tagIds, categoryIds);\n+        if(!autoSave){\n+            // Log the creation\n+            LogEvent logEvent = new LogEvent(this, createdPost.getId().toString(), LogType.POST_PUBLISHED, createdPost.getTitle());\n+            eventPublisher.publishEvent(logEvent);\n+        }\n+        return createdPost;\n     }\n \n     @Override\n-    public PostDetailVO updateBy(Post postToUpdate, Set<Integer> tagIds, Set<Integer> categoryIds) {\n+    public PostDetailVO updateBy(Post postToUpdate, Set<Integer> tagIds, Set<Integer> categoryIds, boolean autoSave) {\n         // Set edit time\n         postToUpdate.setEditTime(DateUtils.now());\n-\n-        return createOrUpdate(postToUpdate, tagIds, categoryIds);\n-    }\n-\n-    @Override\n-    public Post create(Post post) {\n-        Post createdPost = super.create(post);\n-\n-        // Log the creation\n-        LogEvent logEvent = new LogEvent(this, createdPost.getId().toString(), LogType.POST_PUBLISHED, createdPost.getTitle());\n-        eventPublisher.publishEvent(logEvent);\n-\n-        return createdPost;\n-    }\n-\n-    @Override\n-    public Post update(Post post) {\n-        Post updatedPost = super.update(post);\n-\n-        // Log the creation\n-        LogEvent logEvent = new LogEvent(this, updatedPost.getId().toString(), LogType.POST_EDITED, updatedPost.getTitle());\n-        eventPublisher.publishEvent(logEvent);\n-\n+        PostDetailVO updatedPost = createOrUpdate(postToUpdate, tagIds, categoryIds);\n+        if(!autoSave){\n+            // Log the creation\n+            LogEvent logEvent = new LogEvent(this, updatedPost.getId().toString(), LogType.POST_EDITED, updatedPost.getTitle());\n+            eventPublisher.publishEvent(logEvent);\n+        }\n         return updatedPost;\n     }\n ",
    "output": "Refactor post create and update."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/ThemeController.java b/src/main/java/run/halo/app/controller/admin/api/ThemeController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/ThemeController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/ThemeController.java\n@@ -59,8 +59,7 @@ public BaseResponse<String> getContentBy(@RequestParam(name = \"path\") String pat\n \n     @PutMapping(\"files/content\")\n     public void updateContentBy(@RequestParam(name = \"path\") String path,\n-                                @RequestParam(name = \"content\") String content) {\n-        // TODO Refactor the params to body\n+                                @RequestBody String content) {\n         themeService.saveTemplateContent(path, content);\n     }\n ",
    "output": "Fixed bug #160"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/dto/BaseCommentDTO.java b/src/main/java/run/halo/app/model/dto/BaseCommentDTO.java\n--- a/src/main/java/run/halo/app/model/dto/BaseCommentDTO.java\n+++ b/src/main/java/run/halo/app/model/dto/BaseCommentDTO.java\n@@ -27,6 +27,8 @@ public class BaseCommentDTO implements OutputConverter<BaseCommentDTO, BaseComme\n \n     private String ipAddress;\n \n+    private String authorUrl;\n+\n     private String gavatarMd5;\n \n     private String content;",
    "output": "Update BaseCommentDTO.java"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/api/PostController.java b/src/main/java/run/halo/app/controller/content/api/PostController.java\n--- a/src/main/java/run/halo/app/controller/content/api/PostController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/PostController.java\n@@ -13,6 +13,7 @@\n import run.halo.app.model.dto.post.BasePostDetailDTO;\n import run.halo.app.model.dto.post.BasePostSimpleDTO;\n import run.halo.app.model.entity.Post;\n+import run.halo.app.model.entity.PostComment;\n import run.halo.app.model.enums.CommentStatus;\n import run.halo.app.model.enums.PostStatus;\n import run.halo.app.model.params.PostCommentParam;\n@@ -88,9 +89,12 @@ public Page<CommentWithHasChildrenVO> listTopComments(@PathVariable(\"postId\") In\n \n     @GetMapping(\"{postId:\\\\d+}/comments/{commentParentId:\\\\d+}/children\")\n     public List<BaseCommentDTO> listChildrenBy(@PathVariable(\"postId\") Integer postId,\n-                                               @PathVariable(\"commentParentId\") Integer commentParentId,\n+                                               @PathVariable(\"commentParentId\") Long commentParentId,\n                                                @SortDefault(sort = \"createTime\", direction = DESC) Sort sort) {\n-        return postCommentService.listChildrenBy(postId, commentParentId, CommentStatus.PUBLISHED, sort);\n+        // Find all children comments\n+        List<PostComment> postComments = postCommentService.listChildrenBy(postId, commentParentId, CommentStatus.PUBLISHED, sort);\n+        // Convert to base comment dto\n+        return postCommentService.convertTo(postComments);\n     }\n \n \n\ndiff --git a/src/main/java/run/halo/app/repository/base/BaseCommentRepository.java b/src/main/java/run/halo/app/repository/base/BaseCommentRepository.java\n--- a/src/main/java/run/halo/app/repository/base/BaseCommentRepository.java\n+++ b/src/main/java/run/halo/app/repository/base/BaseCommentRepository.java\n@@ -94,6 +94,27 @@ public interface BaseCommentRepository<COMMENT extends BaseComment> extends Base\n     @NonNull\n     Page<COMMENT> findAllByPostIdAndStatus(Integer postId, CommentStatus status, Pageable pageable);\n \n+    /**\n+     * Finds comments by post id, comment status and parent id.\n+     *\n+     * @param postId   post id must not be null\n+     * @param status   comment status must not be null\n+     * @param parentId comment parent id must not be null\n+     * @return a list of comment\n+     */\n+    @NonNull\n+    List<COMMENT> findAllByPostIdAndStatusAndParentId(Integer postId, CommentStatus status, Long parentId);\n+\n+    /**\n+     * Finds all comments by status and parent id collection.\n+     *\n+     * @param status    comment status must not be null\n+     * @param parentIds parent id collection must not be null\n+     * @return a list of comment\n+     */\n+    @NonNull\n+    List<COMMENT> findAllByStatusAndParentIdIn(@NonNull CommentStatus status, @NonNull Iterable<Long> parentIds);\n+\n     /**\n      * Finds comments by post id, comment status and parent id.\n      *\n@@ -106,6 +127,7 @@ public interface BaseCommentRepository<COMMENT extends BaseComment> extends Base\n     @NonNull\n     Page<COMMENT> findAllByPostIdAndStatusAndParentId(Integer postId, CommentStatus status, Long parentId, Pageable pageable);\n \n+\n     @Query(\"select new run.halo.app.model.projection.CommentChildrenCountProjection(count(comment.id), comment.parentId) \" +\n             \"from BaseComment comment \" +\n             \"where comment.parentId in ?1 \" +\n\ndiff --git a/src/main/java/run/halo/app/service/base/BaseCommentService.java b/src/main/java/run/halo/app/service/base/BaseCommentService.java\n--- a/src/main/java/run/halo/app/service/base/BaseCommentService.java\n+++ b/src/main/java/run/halo/app/service/base/BaseCommentService.java\n@@ -213,5 +213,5 @@ public interface BaseCommentService<COMMENT extends BaseComment> extends CrudSer\n      * @return a list of children comment\n      */\n     @NonNull\n-    List<BaseCommentDTO> listChildrenBy(@NonNull Integer targetId, @NonNull Integer commentParentId, @NonNull CommentStatus status, @NonNull Sort sort);\n+    List<COMMENT> listChildrenBy(@NonNull Integer targetId, @NonNull Long commentParentId, @NonNull CommentStatus status, @NonNull Sort sort);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java b/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n@@ -445,12 +445,55 @@ public Page<CommentWithHasChildrenVO> pageTopCommentsBy(Integer targetId, Commen\n     }\n \n     @Override\n-    public List<BaseCommentDTO> listChildrenBy(Integer targetId, Integer commentParentId, CommentStatus status, Sort sort) {\n+    public List<COMMENT> listChildrenBy(Integer targetId, Long commentParentId, CommentStatus status, Sort sort) {\n         Assert.notNull(targetId, \"Target id must not be null\");\n         Assert.notNull(commentParentId, \"Comment parent id must not be null\");\n         Assert.notNull(sort, \"Sort info must not be null\");\n \n-        return null;\n+        // Get comments recursively\n+\n+        // Get direct children\n+        List<COMMENT> directChildren = baseCommentRepository.findAllByPostIdAndStatusAndParentId(targetId, status, commentParentId);\n+\n+        // Create result container\n+        Set<COMMENT> children = new HashSet<>();\n+\n+        // Get children comments\n+        getChildrenRecursively(directChildren, status, children);\n+\n+        // Sort children\n+        List<COMMENT> childrenList = new ArrayList<>(children);\n+        childrenList.sort(Comparator.comparing(BaseComment::getId));\n+\n+        return childrenList;\n+    }\n+\n+    /**\n+     * Get children comments recursively.\n+     *\n+     * @param topComments top comment list\n+     * @param status      comment status must not be null\n+     * @param children    children result must not be null\n+     */\n+    private void getChildrenRecursively(@Nullable List<COMMENT> topComments, @NonNull CommentStatus status, @NonNull Set<COMMENT> children) {\n+        Assert.notNull(status, \"Comment status must not be null\");\n+        Assert.notNull(children, \"Children comment set must not be null\");\n+\n+        if (CollectionUtils.isEmpty(topComments)) {\n+            return;\n+        }\n+\n+        // Convert comment id set\n+        Set<Long> commentIds = ServiceUtils.fetchProperty(topComments, COMMENT::getId);\n+\n+        // Get direct children\n+        List<COMMENT> directChildren = baseCommentRepository.findAllByStatusAndParentIdIn(status, commentIds);\n+\n+        // Recursively invoke\n+        getChildrenRecursively(directChildren, status, children);\n+\n+        // Add direct children to children result\n+        children.addAll(topComments);\n     }\n \n     /**\n\ndiff --git a/src/main/java/run/halo/app/utils/ServiceUtils.java b/src/main/java/run/halo/app/utils/ServiceUtils.java\n--- a/src/main/java/run/halo/app/utils/ServiceUtils.java\n+++ b/src/main/java/run/halo/app/utils/ServiceUtils.java\n@@ -31,6 +31,7 @@ private ServiceUtils() {\n      * @param <T>             data type\n      * @return a set of id\n      */\n+    @NonNull\n     public static <ID, T> Set<ID> fetchProperty(final Collection<T> datas, Function<T, ID> mappingFunction) {\n         return CollectionUtils.isEmpty(datas) ?\n                 Collections.emptySet() :\n@@ -47,6 +48,7 @@ public static <ID, T> Set<ID> fetchProperty(final Collection<T> datas, Function<\n      * @param <D>             data type\n      * @return a map which key is in ids and value containing in list\n      */\n+    @NonNull\n     public static <ID, D> Map<ID, List<D>> convertToListMap(Collection<ID> ids, Collection<D> list, Function<D, ID> mappingFunction) {\n         Assert.notNull(mappingFunction, \"mapping function must not be null\");\n \n@@ -72,6 +74,7 @@ public static <ID, D> Map<ID, List<D>> convertToListMap(Collection<ID> ids, Coll\n      * @param <D>             data type\n      * @return a map which key from list data and value is data\n      */\n+    @NonNull\n     public static <ID, D> Map<ID, D> convertToMap(Collection<D> list, Function<D, ID> mappingFunction) {\n         Assert.notNull(mappingFunction, \"mapping function must not be null\");\n \n@@ -97,6 +100,7 @@ public static <ID, D> Map<ID, D> convertToMap(Collection<D> list, Function<D, ID\n      * @param <V>           value type\n      * @return a map which key from list data and value is data\n      */\n+    @NonNull\n     public static <ID, D, V> Map<ID, V> convertToMap(Collection<D> list, Function<D, ID> keyFunction, Function<D, V> valueFunction) {\n         Assert.notNull(keyFunction, \"mapping function must not be null\");\n ",
    "output": "Complete comment children list service"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/ContentJournalController.java b/src/main/java/run/halo/app/controller/content/ContentJournalController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentJournalController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentJournalController.java\n@@ -28,7 +28,7 @@\n  */\n @Slf4j\n @Controller\n-@RequestMapping(value = \"/journal\")\n+@RequestMapping(value = \"/journals\")\n public class ContentJournalController {\n \n     private final JournalService journalService;\n@@ -56,8 +56,8 @@ public ContentJournalController(JournalService journalService,\n      * @return template path: theme/{theme}/journal.ftl\n      */\n     @GetMapping\n-    public String journal(Model model) {\n-        return this.journal(model, 1, Sort.by(DESC, \"createTime\"));\n+    public String journals(Model model) {\n+        return this.journals(model, 1, Sort.by(DESC, \"createTime\"));\n     }\n \n \n@@ -69,7 +69,7 @@ public String journal(Model model) {\n      * @return template path: theme/{theme}/journal.ftl\n      */\n     @GetMapping(value = \"page/{page}\")\n-    public String journal(Model model,\n+    public String journals(Model model,\n                           @PathVariable(value = \"page\") Integer page,\n                           @SortDefault(sort = \"createTime\", direction = DESC) Sort sort) {\n         log.debug(\"Requested journal page, sort info: [{}]\", sort);\n@@ -85,6 +85,6 @@ public String journal(Model model,\n         model.addAttribute(\"is_journal\", true);\n         model.addAttribute(\"journals\", journals);\n         model.addAttribute(\"rainbow\", rainbow);\n-        return themeService.render(\"journal\");\n+        return themeService.render(\"journals\");\n     }\n }",
    "output": "Change journal to journals."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/repository/base/BaseCommentRepository.java b/src/main/java/run/halo/app/repository/base/BaseCommentRepository.java\n--- a/src/main/java/run/halo/app/repository/base/BaseCommentRepository.java\n+++ b/src/main/java/run/halo/app/repository/base/BaseCommentRepository.java\n@@ -84,7 +84,7 @@ public interface BaseCommentRepository<COMMENT extends BaseComment> extends Base\n     List<COMMENT> findAllByPostIdAndStatus(Integer postId, CommentStatus status);\n \n     /**\n-     * Finds comments by post id, comment status.\n+     * Finds comments by post id and comment status.\n      *\n      * @param postId   post id must not be null\n      * @param status   comment status must not be null\n@@ -94,6 +94,18 @@ public interface BaseCommentRepository<COMMENT extends BaseComment> extends Base\n     @NonNull\n     Page<COMMENT> findAllByPostIdAndStatus(Integer postId, CommentStatus status, Pageable pageable);\n \n+    /**\n+     * Finds comments by post id, comment status and parent id.\n+     *\n+     * @param postId   post id must not be null\n+     * @param status   comment status must not be null\n+     * @param parentId comment parent id must not be null\n+     * @param pageable page info must not be null\n+     * @return a page of comment\n+     */\n+    @NonNull\n+    Page<COMMENT> findAllByPostIdAndStatusAndParentId(Integer postId, CommentStatus status, Long parentId, Pageable pageable);\n+\n     @Query(\"select new run.halo.app.model.projection.CommentChildrenCountProjection(count(comment.id), comment.parentId) \" +\n             \"from BaseComment comment \" +\n             \"where comment.parentId in ?1 \" +\n\ndiff --git a/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java b/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n@@ -425,7 +425,7 @@ public Page<CommentWithHasChildrenVO> pageTopCommentsBy(Integer targetId, Commen\n         Assert.notNull(pageable, \"Page info must not be null\");\n \n         // Get all comments\n-        Page<COMMENT> topCommentPage = baseCommentRepository.findAllByPostIdAndStatus(targetId, status, pageable);\n+        Page<COMMENT> topCommentPage = baseCommentRepository.findAllByPostIdAndStatusAndParentId(targetId, status, 0L, pageable);\n \n         // Get top comment ids\n         Set<Long> topCommentIds = ServiceUtils.fetchProperty(topCommentPage.getContent(), BaseComment::getId);",
    "output": "Fix page top comments bug"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/properties/OtherProperties.java b/src/main/java/run/halo/app/model/properties/OtherProperties.java\n--- a/src/main/java/run/halo/app/model/properties/OtherProperties.java\n+++ b/src/main/java/run/halo/app/model/properties/OtherProperties.java\n@@ -17,7 +17,7 @@ public enum OtherProperties implements PropertyEnum {\n     /**\n      * 是否禁止爬虫\n      */\n-    SPIDER_DISABLE(\"spider_disable\",Boolean.class,\"false\");\n+    SPIDER_DISABLED(\"spider_disabled\",Boolean.class,\"false\");\n \n     private final String value;\n ",
    "output": "Support disable spider."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/properties/OtherProperties.java b/src/main/java/run/halo/app/model/properties/OtherProperties.java\n--- a/src/main/java/run/halo/app/model/properties/OtherProperties.java\n+++ b/src/main/java/run/halo/app/model/properties/OtherProperties.java\n@@ -12,7 +12,12 @@ public enum OtherProperties implements PropertyEnum {\n \n     API_TOKEN(\"api_token\", String.class, \"\"),\n \n-    STATISTICS_CODE(\"statistics_code\", String.class, \"\");\n+    STATISTICS_CODE(\"statistics_code\", String.class, \"\"),\n+\n+    /**\n+     * 是否禁止爬虫\n+     */\n+    SPIDER_DISABLE(\"spider_disable\",Boolean.class,\"false\");\n \n     private final String value;\n ",
    "output": "Support disable spider."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/PostCommentController.java b/src/main/java/run/halo/app/controller/admin/api/PostCommentController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/PostCommentController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/PostCommentController.java\n@@ -43,7 +43,7 @@ public Page<PostCommentWithPostVO> pageBy(@PageableDefault(sort = \"updateTime\",\n \n     @GetMapping(\"latest\")\n     @ApiOperation(\"Pages latest comments\")\n-    public List<PostCommentWithPostVO> pageLatest(@RequestParam(name = \"top\", defaultValue = \"10\") int top,\n+    public List<PostCommentWithPostVO> listLatest(@RequestParam(name = \"top\", defaultValue = \"10\") int top,\n                                                   @RequestParam(name = \"status\", required = false) CommentStatus status) {\n         // Get latest comment\n         List<PostComment> content = postCommentService.pageLatest(top, status).getContent();\n\ndiff --git a/src/main/java/run/halo/app/controller/core/CommonController.java b/src/main/java/run/halo/app/controller/core/CommonController.java\n--- a/src/main/java/run/halo/app/controller/core/CommonController.java\n+++ b/src/main/java/run/halo/app/controller/core/CommonController.java\n@@ -6,12 +6,9 @@\n import org.springframework.stereotype.Controller;\n import org.springframework.util.StringUtils;\n import org.springframework.web.bind.annotation.GetMapping;\n-import run.halo.app.model.entity.User;\n-import run.halo.app.model.support.HaloConst;\n import run.halo.app.service.ThemeService;\n \n import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpSession;\n \n /**\n  * Error page Controller\n@@ -29,8 +26,6 @@ public class CommonController implements ErrorController {\n \n     private static final String INTERNAL_ERROR_TEMPLATE = \"500.ftl\";\n \n-    private static final String ADMIN_URL = \"/admin\";\n-\n     private final ThemeService themeService;\n \n     public CommonController(ThemeService themeService) {\n@@ -44,13 +39,9 @@ public CommonController(ThemeService themeService) {\n      * @return String\n      */\n     @GetMapping(value = ERROR_PATH)\n-    public String handleError(HttpServletRequest request, HttpSession session) {\n+    public String handleError(HttpServletRequest request) {\n         final Integer statusCode = (Integer) request.getAttribute(\"javax.servlet.error.status_code\");\n \n-        final String requestURI = request.getRequestURI();\n-\n-        final User user = (User) session.getAttribute(HaloConst.USER_SESSION_KEY);\n-\n         log.error(\"Error path: [{}], status: [{}]\", getErrorPath(), statusCode);\n \n         // Get the exception\n@@ -62,40 +53,17 @@ public String handleError(HttpServletRequest request, HttpSession session) {\n             if (StringUtils.startsWithIgnoreCase(throwable.getMessage(), \"Could not resolve view with name '\")) {\n                 // TODO May cause unknown-reason problem\n                 // if Ftl was not found then redirect to /404\n-                if (requestURI.contains(ADMIN_URL) && null != user) {\n-                    return \"redirect:/admin/404\";\n-                } else {\n-                    return \"redirect:/404\";\n-                }\n+                return \"redirect:/404\";\n             }\n         }\n-        if (requestURI.contains(ADMIN_URL) && null != user) {\n-            return \"redirect:/admin/500\";\n-        } else {\n+\n+        if (statusCode == 500) {\n             return \"redirect:/500\";\n+        } else {\n+            return \"redirect:/404\";\n         }\n     }\n \n-    /**\n-     * Render 404 error page\n-     *\n-     * @return template path:\n-     */\n-    @GetMapping(value = \"/admin/404\")\n-    public String adminNotFround() {\n-        return \"common/error/404\";\n-    }\n-\n-    /**\n-     * Render 500 error page\n-     *\n-     * @return template path:\n-     */\n-    @GetMapping(value = \"/admin/500\")\n-    public String adminInternalError() {\n-        return \"common/error/500\";\n-    }\n-\n     /**\n      * Render 404 error page\n      *",
    "output": "Refactor CommonController."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java b/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n@@ -16,6 +16,7 @@\n import run.halo.app.event.comment.CommentNewEvent;\n import run.halo.app.event.comment.CommentPassEvent;\n import run.halo.app.event.comment.CommentReplyEvent;\n+import run.halo.app.exception.BadRequestException;\n import run.halo.app.model.dto.BaseCommentDTO;\n import run.halo.app.model.entity.BaseComment;\n import run.halo.app.model.entity.User;\n@@ -32,6 +33,7 @@\n import run.halo.app.security.authentication.Authentication;\n import run.halo.app.security.context.SecurityContextHolder;\n import run.halo.app.service.OptionService;\n+import run.halo.app.service.UserService;\n import run.halo.app.service.base.AbstractCrudService;\n import run.halo.app.service.base.BaseCommentService;\n import run.halo.app.utils.ServiceUtils;\n@@ -55,14 +57,17 @@ public abstract class BaseCommentServiceImpl<COMMENT extends BaseComment> extend\n \n     protected final OptionService optionService;\n \n+    protected final UserService userService;\n+\n     protected final ApplicationEventPublisher eventPublisher;\n \n     public BaseCommentServiceImpl(BaseCommentRepository<COMMENT> baseCommentRepository,\n                                   OptionService optionService,\n-                                  ApplicationEventPublisher eventPublisher) {\n+                                  UserService userService, ApplicationEventPublisher eventPublisher) {\n         super(baseCommentRepository);\n         this.baseCommentRepository = baseCommentRepository;\n         this.optionService = optionService;\n+        this.userService = userService;\n         this.eventPublisher = eventPublisher;\n     }\n \n@@ -275,6 +280,7 @@ public COMMENT createBy(BaseCommentParam<COMMENT> commentParam) {\n         Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n \n         if (authentication != null) {\n+            // Blogger comment\n             User user = authentication.getDetail().getUser();\n             commentParam.setAuthor(StringUtils.isBlank(user.getNickname()) ? user.getUsername() : user.getNickname());\n             commentParam.setEmail(user.getEmail());\n@@ -284,6 +290,14 @@ public COMMENT createBy(BaseCommentParam<COMMENT> commentParam) {\n         // Validate the comment param manually\n         ValidationUtils.validate(commentParam);\n \n+        if (authentication == null) {\n+            // Anonymous comment\n+            // Check email\n+            if (userService.getByEmail(commentParam.getEmail()).isPresent()) {\n+                throw new BadRequestException(\"不能使用博主的邮件，如果您是博主，请登录管理端进行回复。\");\n+            }\n+        }\n+\n         // Convert to comment\n         return create(commentParam.convertTo());\n     }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/JournalCommentServiceImpl.java b/src/main/java/run/halo/app/service/impl/JournalCommentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/JournalCommentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/JournalCommentServiceImpl.java\n@@ -15,6 +15,7 @@\n import run.halo.app.repository.JournalRepository;\n import run.halo.app.service.JournalCommentService;\n import run.halo.app.service.OptionService;\n+import run.halo.app.service.UserService;\n import run.halo.app.utils.ServiceUtils;\n \n import java.util.Collections;\n@@ -38,8 +39,9 @@ public class JournalCommentServiceImpl extends BaseCommentServiceImpl<JournalCom\n \n     public JournalCommentServiceImpl(JournalCommentRepository journalCommentRepository,\n                                      OptionService optionService,\n+                                     UserService userService,\n                                      ApplicationEventPublisher eventPublisher, JournalRepository journalRepository) {\n-        super(journalCommentRepository, optionService, eventPublisher);\n+        super(journalCommentRepository, optionService, userService, eventPublisher);\n         this.journalCommentRepository = journalCommentRepository;\n         this.journalRepository = journalRepository;\n     }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/PostCommentServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostCommentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostCommentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostCommentServiceImpl.java\n@@ -18,6 +18,7 @@\n import run.halo.app.repository.PostRepository;\n import run.halo.app.service.OptionService;\n import run.halo.app.service.PostCommentService;\n+import run.halo.app.service.UserService;\n import run.halo.app.utils.ServiceUtils;\n \n import java.util.Collections;\n@@ -42,9 +43,10 @@ public class PostCommentServiceImpl extends BaseCommentServiceImpl<PostComment>\n \n     public PostCommentServiceImpl(PostCommentRepository postCommentRepository,\n                                   PostRepository postRepository,\n+                                  UserService userService,\n                                   OptionService optionService,\n                                   ApplicationEventPublisher eventPublisher) {\n-        super(postCommentRepository, optionService, eventPublisher);\n+        super(postCommentRepository, optionService, userService, eventPublisher);\n         this.postCommentRepository = postCommentRepository;\n         this.postRepository = postRepository;\n     }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/SheetCommentServiceImpl.java b/src/main/java/run/halo/app/service/impl/SheetCommentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/SheetCommentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/SheetCommentServiceImpl.java\n@@ -15,6 +15,7 @@\n import run.halo.app.repository.SheetRepository;\n import run.halo.app.service.OptionService;\n import run.halo.app.service.SheetCommentService;\n+import run.halo.app.service.UserService;\n import run.halo.app.utils.ServiceUtils;\n \n import java.util.Collections;\n@@ -38,9 +39,10 @@ public class SheetCommentServiceImpl extends BaseCommentServiceImpl<SheetComment\n \n     public SheetCommentServiceImpl(SheetCommentRepository sheetCommentRepository,\n                                    OptionService optionService,\n+                                   UserService userService,\n                                    ApplicationEventPublisher eventPublisher,\n                                    SheetRepository sheetRepository) {\n-        super(sheetCommentRepository, optionService, eventPublisher);\n+        super(sheetCommentRepository, optionService, userService, eventPublisher);\n         this.sheetCommentRepository = sheetCommentRepository;\n         this.sheetRepository = sheetRepository;\n     }",
    "output": "Fix issue(#154)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/PostCategoryServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostCategoryServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostCategoryServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostCategoryServiceImpl.java\n@@ -100,7 +100,7 @@ public Page<Post> pagePostBy(Integer categoryId, Pageable pageable) {\n         Assert.notNull(pageable, \"Page info must not be null\");\n \n         // Find all post ids\n-        Set<Integer> postIds = postCategoryRepository.findAllCategoryIdsByPostId(categoryId);\n+        Set<Integer> postIds = postCategoryRepository.findAllPostIdsByCategoryId(categoryId);\n \n         return postRepository.findAllByIdIn(postIds, pageable);\n     }",
    "output": "Fix issue#149"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/handler/file/FileHandler.java b/src/main/java/run/halo/app/handler/file/FileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/FileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/FileHandler.java\n@@ -1,16 +1,16 @@\n package run.halo.app.handler.file;\n \n-import run.halo.app.exception.FileOperationException;\n-import run.halo.app.model.enums.AttachmentType;\n-import run.halo.app.model.support.UploadResult;\n import org.apache.commons.lang3.StringUtils;\n import org.springframework.http.MediaType;\n import org.springframework.lang.NonNull;\n import org.springframework.lang.Nullable;\n import org.springframework.util.Assert;\n import org.springframework.web.multipart.MultipartFile;\n+import run.halo.app.exception.FileOperationException;\n+import run.halo.app.model.enums.AttachmentType;\n+import run.halo.app.model.support.UploadResult;\n \n-import java.io.File;\n+import static run.halo.app.model.support.HaloConst.FILE_SEPARATOR;\n \n /**\n  * File handler interface.\n@@ -80,6 +80,6 @@ static boolean isImageType(@Nullable MediaType mediaType) {\n     static String normalizeDirectory(@NonNull String dir) {\n         Assert.hasText(dir, \"Directory full name must not be blank\");\n \n-        return StringUtils.appendIfMissing(dir, File.separator);\n+        return StringUtils.appendIfMissing(dir, FILE_SEPARATOR);\n     }\n }\n\ndiff --git a/src/main/java/run/halo/app/handler/file/LocalFileHandler.java b/src/main/java/run/halo/app/handler/file/LocalFileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/LocalFileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/LocalFileHandler.java\n@@ -18,15 +18,15 @@\n \n import javax.imageio.ImageIO;\n import java.awt.image.BufferedImage;\n-import java.io.File;\n import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n import java.util.Calendar;\n-import java.util.Locale;\n import java.util.Objects;\n \n+import static run.halo.app.model.support.HaloConst.FILE_SEPARATOR;\n+\n /**\n  * Local file handler.\n  *\n@@ -97,7 +97,7 @@ public UploadResult upload(MultipartFile file) {\n         int month = current.get(Calendar.MONTH) + 1;\n \n         // Build directory\n-        String subDir = UPLOAD_SUB_DIR + year + File.separator + month + File.separator;\n+        String subDir = UPLOAD_SUB_DIR + year + FILE_SEPARATOR + month + FILE_SEPARATOR;\n \n         String originalBasename = FilenameUtils.getBasename(file.getOriginalFilename());\n \n\ndiff --git a/src/main/java/run/halo/app/model/support/HaloConst.java b/src/main/java/run/halo/app/model/support/HaloConst.java\n--- a/src/main/java/run/halo/app/model/support/HaloConst.java\n+++ b/src/main/java/run/halo/app/model/support/HaloConst.java\n@@ -1,5 +1,7 @@\n package run.halo.app.model.support;\n \n+import java.io.File;\n+\n /**\n  * <pre>\n  *     公共常量\n@@ -25,6 +27,11 @@ public class HaloConst {\n      */\n     public static final String HALO_VERSION;\n \n+    /**\n+     * Path separator.\n+     */\n+    public static final String FILE_SEPARATOR = File.separator;\n+\n     /**\n      * Suffix of freemarker template file\n      */\n\ndiff --git a/src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java b/src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java\n@@ -21,6 +21,7 @@\n import run.halo.app.service.AttachmentService;\n import run.halo.app.service.OptionService;\n import run.halo.app.service.base.AbstractCrudService;\n+import run.halo.app.utils.HaloUtils;\n \n import javax.persistence.criteria.Predicate;\n import java.util.LinkedList;\n@@ -108,7 +109,8 @@ public Attachment upload(MultipartFile file) {\n         // Build attachment\n         Attachment attachment = new Attachment();\n         attachment.setName(uploadResult.getFilename());\n-        attachment.setPath(uploadResult.getFilePath());\n+        // Convert separator\n+        attachment.setPath(HaloUtils.changeFileSeparatorToUrlSeparator(uploadResult.getFilePath()));\n         attachment.setFileKey(uploadResult.getKey());\n         attachment.setThumbPath(uploadResult.getThumbPath());\n         attachment.setMediaType(uploadResult.getMediaType().toString());\n\ndiff --git a/src/main/java/run/halo/app/utils/HaloUtils.java b/src/main/java/run/halo/app/utils/HaloUtils.java\n--- a/src/main/java/run/halo/app/utils/HaloUtils.java\n+++ b/src/main/java/run/halo/app/utils/HaloUtils.java\n@@ -20,6 +20,8 @@\n import java.util.Date;\n import java.util.UUID;\n \n+import static run.halo.app.model.support.HaloConst.FILE_SEPARATOR;\n+\n /**\n  * <pre>\n  * 常用工具\n@@ -31,6 +33,18 @@\n @Slf4j\n public class HaloUtils {\n \n+    /**\n+     * Changes file separator to url separator.\n+     *\n+     * @param pathname full path name must not be blank.\n+     * @return text with url separator\n+     */\n+    public static String changeFileSeparatorToUrlSeparator(@NonNull String pathname) {\n+        Assert.hasText(pathname, \"Path name must not be blank\");\n+\n+        return pathname.replace(FILE_SEPARATOR, \"/\");\n+    }\n+\n     /**\n      * Time format.\n      *",
    "output": "Merge remote-tracking branch 'origin/dev' into dev"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/handler/file/FileHandler.java b/src/main/java/run/halo/app/handler/file/FileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/FileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/FileHandler.java\n@@ -1,16 +1,16 @@\n package run.halo.app.handler.file;\n \n-import run.halo.app.exception.FileOperationException;\n-import run.halo.app.model.enums.AttachmentType;\n-import run.halo.app.model.support.UploadResult;\n import org.apache.commons.lang3.StringUtils;\n import org.springframework.http.MediaType;\n import org.springframework.lang.NonNull;\n import org.springframework.lang.Nullable;\n import org.springframework.util.Assert;\n import org.springframework.web.multipart.MultipartFile;\n+import run.halo.app.exception.FileOperationException;\n+import run.halo.app.model.enums.AttachmentType;\n+import run.halo.app.model.support.UploadResult;\n \n-import java.io.File;\n+import static run.halo.app.model.support.HaloConst.FILE_SEPARATOR;\n \n /**\n  * File handler interface.\n@@ -80,6 +80,6 @@ static boolean isImageType(@Nullable MediaType mediaType) {\n     static String normalizeDirectory(@NonNull String dir) {\n         Assert.hasText(dir, \"Directory full name must not be blank\");\n \n-        return StringUtils.appendIfMissing(dir, File.separator);\n+        return StringUtils.appendIfMissing(dir, FILE_SEPARATOR);\n     }\n }\n\ndiff --git a/src/main/java/run/halo/app/handler/file/LocalFileHandler.java b/src/main/java/run/halo/app/handler/file/LocalFileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/LocalFileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/LocalFileHandler.java\n@@ -18,15 +18,15 @@\n \n import javax.imageio.ImageIO;\n import java.awt.image.BufferedImage;\n-import java.io.File;\n import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n import java.util.Calendar;\n-import java.util.Locale;\n import java.util.Objects;\n \n+import static run.halo.app.model.support.HaloConst.FILE_SEPARATOR;\n+\n /**\n  * Local file handler.\n  *\n@@ -97,7 +97,7 @@ public UploadResult upload(MultipartFile file) {\n         int month = current.get(Calendar.MONTH) + 1;\n \n         // Build directory\n-        String subDir = UPLOAD_SUB_DIR + year + File.separator + month + File.separator;\n+        String subDir = UPLOAD_SUB_DIR + year + FILE_SEPARATOR + month + FILE_SEPARATOR;\n \n         String originalBasename = FilenameUtils.getBasename(file.getOriginalFilename());\n \n\ndiff --git a/src/main/java/run/halo/app/model/support/HaloConst.java b/src/main/java/run/halo/app/model/support/HaloConst.java\n--- a/src/main/java/run/halo/app/model/support/HaloConst.java\n+++ b/src/main/java/run/halo/app/model/support/HaloConst.java\n@@ -1,5 +1,7 @@\n package run.halo.app.model.support;\n \n+import java.io.File;\n+\n /**\n  * <pre>\n  *     公共常量\n@@ -25,6 +27,11 @@ public class HaloConst {\n      */\n     public static final String HALO_VERSION;\n \n+    /**\n+     * Path separator.\n+     */\n+    public static final String FILE_SEPARATOR = File.separator;\n+\n     /**\n      * Suffix of freemarker template file\n      */\n\ndiff --git a/src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java b/src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java\n@@ -21,6 +21,7 @@\n import run.halo.app.service.AttachmentService;\n import run.halo.app.service.OptionService;\n import run.halo.app.service.base.AbstractCrudService;\n+import run.halo.app.utils.HaloUtils;\n \n import javax.persistence.criteria.Predicate;\n import java.util.LinkedList;\n@@ -108,7 +109,8 @@ public Attachment upload(MultipartFile file) {\n         // Build attachment\n         Attachment attachment = new Attachment();\n         attachment.setName(uploadResult.getFilename());\n-        attachment.setPath(uploadResult.getFilePath());\n+        // Convert separator\n+        attachment.setPath(HaloUtils.changeFileSeparatorToUrlSeparator(uploadResult.getFilePath()));\n         attachment.setFileKey(uploadResult.getKey());\n         attachment.setThumbPath(uploadResult.getThumbPath());\n         attachment.setMediaType(uploadResult.getMediaType().toString());\n\ndiff --git a/src/main/java/run/halo/app/utils/HaloUtils.java b/src/main/java/run/halo/app/utils/HaloUtils.java\n--- a/src/main/java/run/halo/app/utils/HaloUtils.java\n+++ b/src/main/java/run/halo/app/utils/HaloUtils.java\n@@ -20,6 +20,8 @@\n import java.util.Date;\n import java.util.UUID;\n \n+import static run.halo.app.model.support.HaloConst.FILE_SEPARATOR;\n+\n /**\n  * <pre>\n  * 常用工具\n@@ -31,6 +33,18 @@\n @Slf4j\n public class HaloUtils {\n \n+    /**\n+     * Changes file separator to url separator.\n+     *\n+     * @param pathname full path name must not be blank.\n+     * @return text with url separator\n+     */\n+    public static String changeFileSeparatorToUrlSeparator(@NonNull String pathname) {\n+        Assert.hasText(pathname, \"Path name must not be blank\");\n+\n+        return pathname.replace(FILE_SEPARATOR, \"/\");\n+    }\n+\n     /**\n      * Time format.\n      *",
    "output": "Fix issue(#153)"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/dto/EnvironmentDTO.java b/src/main/java/run/halo/app/model/dto/EnvironmentDTO.java\n--- a/src/main/java/run/halo/app/model/dto/EnvironmentDTO.java\n+++ b/src/main/java/run/halo/app/model/dto/EnvironmentDTO.java\n@@ -14,4 +14,6 @@ public class EnvironmentDTO {\n     private String database;\n \n     private long startTime;\n+\n+    private String version;\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n@@ -15,6 +15,7 @@\n import run.halo.app.model.enums.CommentStatus;\n import run.halo.app.model.enums.PostStatus;\n import run.halo.app.model.params.LoginParam;\n+import run.halo.app.model.support.HaloConst;\n import run.halo.app.security.authentication.Authentication;\n import run.halo.app.security.context.SecurityContextHolder;\n import run.halo.app.security.token.AuthToken;\n@@ -181,6 +182,8 @@ public EnvironmentDTO getEnvironments() {\n \n         environmentDTO.setDatabase(\"org.h2.Driver\".equals(driverClassName) ? \"H2\" : \"MySQL\");\n \n+        environmentDTO.setVersion(HaloConst.HALO_VERSION);\n+\n         return environmentDTO;\n     }\n ",
    "output": "Add version for EnvironmentDTO."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/event/comment/CommentEventListener.java b/src/main/java/run/halo/app/event/comment/CommentEventListener.java\n--- a/src/main/java/run/halo/app/event/comment/CommentEventListener.java\n+++ b/src/main/java/run/halo/app/event/comment/CommentEventListener.java\n@@ -74,6 +74,8 @@ public void handleCommentNewEvent(CommentNewEvent newEvent) {\n             // Get postComment id\n             PostComment postComment = postCommentService.getById(newEvent.getCommentId());\n \n+            log.debug(\"Got post comment: [{}]\", postComment);\n+\n             Post post = postService.getById(postComment.getPostId());\n \n             StrBuilder url = new StrBuilder(optionService.getBlogBaseUrl())\n@@ -86,6 +88,8 @@ public void handleCommentNewEvent(CommentNewEvent newEvent) {\n         } else if (newEvent.getSource() instanceof SheetService) {\n             SheetComment sheetComment = sheetCommentService.getById(newEvent.getCommentId());\n \n+            log.debug(\"Got sheet comment: [{}]\", sheetComment);\n+\n             Sheet sheet = sheetService.getById(sheetComment.getPostId());\n \n             StrBuilder url = new StrBuilder(optionService.getBlogBaseUrl())\n@@ -98,6 +102,8 @@ public void handleCommentNewEvent(CommentNewEvent newEvent) {\n         } else if (newEvent.getSource() instanceof JournalService) {\n             JournalComment journalComment = journalCommentService.getById(newEvent.getCommentId());\n \n+            log.debug(\"Got journal comment: [{}]\", journalComment);\n+\n             Journal journal = journalService.getById(journalComment.getPostId());\n \n             StrBuilder url = new StrBuilder(optionService.getBlogBaseUrl())\n@@ -133,7 +139,7 @@ public void handleCommentReplyEvent(CommentReplyEvent replyEvent) {\n \n         Map<String, Object> data = new HashMap<>();\n \n-        log.debug(\"replyEvent.getSource():\"+replyEvent.getSource().toString());\n+        log.debug(\"replyEvent.getSource():\" + replyEvent.getSource().toString());\n \n         if (replyEvent.getSource() instanceof PostCommentService) {\n \n\ndiff --git a/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java b/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n--- a/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n+++ b/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n@@ -49,7 +49,6 @@ public FreemarkerConfigAwareListener(OptionService optionService,\n         this.userService = userService;\n     }\n \n-    @Async\n     @EventListener\n     @Order(Ordered.HIGHEST_PRECEDENCE + 1)\n     public void onApplicationStartedEvent(ApplicationStartedEvent applicationStartedEvent) throws TemplateModelException {\n@@ -60,23 +59,20 @@ public void onApplicationStartedEvent(ApplicationStartedEvent applicationStarted\n         loadUserConfig();\n     }\n \n-    @Async\n     @EventListener\n     public void onThemeActivatedEvent(ThemeActivatedEvent themeActivatedEvent) throws TemplateModelException {\n         log.debug(\"Received theme activated event\");\n \n         loadThemeConfig();\n     }\n \n-    @Async\n     @EventListener\n     public void onUserUpdate(UserUpdatedEvent event) throws TemplateModelException {\n         log.debug(\"Received user updated event, user id: [{}]\", event.getUserId());\n \n         loadUserConfig();\n     }\n \n-    @Async\n     @EventListener\n     public void onOptionUpdate(OptionUpdatedEvent event) throws TemplateModelException {\n         log.debug(\"Received option updated event\");\n\ndiff --git a/src/main/java/run/halo/app/event/theme/ThemeUpdatedListener.java b/src/main/java/run/halo/app/event/theme/ThemeUpdatedListener.java\n--- a/src/main/java/run/halo/app/event/theme/ThemeUpdatedListener.java\n+++ b/src/main/java/run/halo/app/event/theme/ThemeUpdatedListener.java\n@@ -22,13 +22,11 @@ public ThemeUpdatedListener(StringCacheStore cacheStore) {\n         this.cacheStore = cacheStore;\n     }\n \n-    @Async\n     @EventListener\n     public void onApplicationEvent(ThemeUpdatedEvent event) {\n         cacheStore.delete(ThemeService.THEMES_CACHE_KEY);\n     }\n \n-    @Async\n     @EventListener\n     public void onOptionUpdatedEvent(OptionUpdatedEvent optionUpdatedEvent) {\n         cacheStore.delete(ThemeService.THEMES_CACHE_KEY);",
    "output": "Merge remote-tracking branch 'origin/dev' into dev"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/event/comment/CommentEventListener.java b/src/main/java/run/halo/app/event/comment/CommentEventListener.java\n--- a/src/main/java/run/halo/app/event/comment/CommentEventListener.java\n+++ b/src/main/java/run/halo/app/event/comment/CommentEventListener.java\n@@ -74,6 +74,8 @@ public void handleCommentNewEvent(CommentNewEvent newEvent) {\n             // Get postComment id\n             PostComment postComment = postCommentService.getById(newEvent.getCommentId());\n \n+            log.debug(\"Got post comment: [{}]\", postComment);\n+\n             Post post = postService.getById(postComment.getPostId());\n \n             StrBuilder url = new StrBuilder(optionService.getBlogBaseUrl())\n@@ -86,6 +88,8 @@ public void handleCommentNewEvent(CommentNewEvent newEvent) {\n         } else if (newEvent.getSource() instanceof SheetService) {\n             SheetComment sheetComment = sheetCommentService.getById(newEvent.getCommentId());\n \n+            log.debug(\"Got sheet comment: [{}]\", sheetComment);\n+\n             Sheet sheet = sheetService.getById(sheetComment.getPostId());\n \n             StrBuilder url = new StrBuilder(optionService.getBlogBaseUrl())\n@@ -98,6 +102,8 @@ public void handleCommentNewEvent(CommentNewEvent newEvent) {\n         } else if (newEvent.getSource() instanceof JournalService) {\n             JournalComment journalComment = journalCommentService.getById(newEvent.getCommentId());\n \n+            log.debug(\"Got journal comment: [{}]\", journalComment);\n+\n             Journal journal = journalService.getById(journalComment.getPostId());\n \n             StrBuilder url = new StrBuilder(optionService.getBlogBaseUrl())\n@@ -133,7 +139,7 @@ public void handleCommentReplyEvent(CommentReplyEvent replyEvent) {\n \n         Map<String, Object> data = new HashMap<>();\n \n-        log.debug(\"replyEvent.getSource():\"+replyEvent.getSource().toString());\n+        log.debug(\"replyEvent.getSource():\" + replyEvent.getSource().toString());\n \n         if (replyEvent.getSource() instanceof PostCommentService) {\n \n\ndiff --git a/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java b/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n--- a/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n+++ b/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n@@ -49,7 +49,6 @@ public FreemarkerConfigAwareListener(OptionService optionService,\n         this.userService = userService;\n     }\n \n-    @Async\n     @EventListener\n     @Order(Ordered.HIGHEST_PRECEDENCE + 1)\n     public void onApplicationStartedEvent(ApplicationStartedEvent applicationStartedEvent) throws TemplateModelException {\n@@ -60,23 +59,20 @@ public void onApplicationStartedEvent(ApplicationStartedEvent applicationStarted\n         loadUserConfig();\n     }\n \n-    @Async\n     @EventListener\n     public void onThemeActivatedEvent(ThemeActivatedEvent themeActivatedEvent) throws TemplateModelException {\n         log.debug(\"Received theme activated event\");\n \n         loadThemeConfig();\n     }\n \n-    @Async\n     @EventListener\n     public void onUserUpdate(UserUpdatedEvent event) throws TemplateModelException {\n         log.debug(\"Received user updated event, user id: [{}]\", event.getUserId());\n \n         loadUserConfig();\n     }\n \n-    @Async\n     @EventListener\n     public void onOptionUpdate(OptionUpdatedEvent event) throws TemplateModelException {\n         log.debug(\"Received option updated event\");\n\ndiff --git a/src/main/java/run/halo/app/event/theme/ThemeUpdatedListener.java b/src/main/java/run/halo/app/event/theme/ThemeUpdatedListener.java\n--- a/src/main/java/run/halo/app/event/theme/ThemeUpdatedListener.java\n+++ b/src/main/java/run/halo/app/event/theme/ThemeUpdatedListener.java\n@@ -22,13 +22,11 @@ public ThemeUpdatedListener(StringCacheStore cacheStore) {\n         this.cacheStore = cacheStore;\n     }\n \n-    @Async\n     @EventListener\n     public void onApplicationEvent(ThemeUpdatedEvent event) {\n         cacheStore.delete(ThemeService.THEMES_CACHE_KEY);\n     }\n \n-    @Async\n     @EventListener\n     public void onOptionUpdatedEvent(OptionUpdatedEvent optionUpdatedEvent) {\n         cacheStore.delete(ThemeService.THEMES_CACHE_KEY);",
    "output": "Remove Async annotation on event listeners"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/InstallController.java b/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n@@ -16,24 +16,22 @@\n import run.halo.app.model.entity.Category;\n import run.halo.app.model.entity.Post;\n import run.halo.app.model.entity.User;\n-import run.halo.app.model.enums.AttachmentType;\n import run.halo.app.model.enums.LogType;\n import run.halo.app.model.enums.PostStatus;\n import run.halo.app.model.params.*;\n-import run.halo.app.model.properties.*;\n+import run.halo.app.model.properties.BlogProperties;\n+import run.halo.app.model.properties.PrimaryProperties;\n+import run.halo.app.model.properties.PropertyEnum;\n import run.halo.app.model.support.BaseResponse;\n import run.halo.app.model.support.CreateCheck;\n import run.halo.app.service.*;\n import run.halo.app.utils.ValidationUtils;\n \n-import javax.validation.Valid;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n \n-import static run.halo.app.model.support.HaloConst.DEFAULT_THEME_ID;\n-\n /**\n  * Installation controller.\n  *\n@@ -196,6 +194,8 @@ private User createUser(InstallParam installParam) {\n         return userService.getCurrentUser().map(user -> {\n             // Update this user\n             installParam.update(user);\n+            // Set password manually\n+            userService.setPassword(user, installParam.getPassword());\n             // Update user\n             return userService.update(user);\n         }).orElseGet(() -> userService.createBy(installParam));\n\ndiff --git a/src/main/java/run/halo/app/service/UserService.java b/src/main/java/run/halo/app/service/UserService.java\n--- a/src/main/java/run/halo/app/service/UserService.java\n+++ b/src/main/java/run/halo/app/service/UserService.java\n@@ -125,4 +125,12 @@ public interface UserService extends CrudService<User, Integer> {\n      * @return true if the given password is match the user password; false otherwise\n      */\n     boolean passwordMatch(@NonNull User user, @Nullable String plainPassword);\n+\n+    /**\n+     * Set user password.\n+     *\n+     * @param user          user must not be null\n+     * @param plainPassword plain password must not be blank\n+     */\n+    void setPassword(@NonNull User user, @NonNull String plainPassword);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/UserServiceImpl.java b/src/main/java/run/halo/app/service/impl/UserServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/UserServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/UserServiceImpl.java\n@@ -252,7 +252,8 @@ public User update(User user) {\n         return updatedUser;\n     }\n \n-    private void setPassword(@NonNull User user, @NonNull String plainPassword) {\n+    @Override\n+    public void setPassword(@NonNull User user, @NonNull String plainPassword) {\n         Assert.notNull(user, \"User must not be null\");\n         Assert.hasText(plainPassword, \"Plain password must not be blank\");\n ",
    "output": "Fix fatal error while twice installations"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/OptionService.java b/src/main/java/run/halo/app/service/OptionService.java\n--- a/src/main/java/run/halo/app/service/OptionService.java\n+++ b/src/main/java/run/halo/app/service/OptionService.java\n@@ -71,6 +71,7 @@ public interface OptionService extends CrudService<Option, Integer> {\n      * @return Map\n      */\n     @NonNull\n+    @Transactional\n     Map<String, Object> listOptions();\n \n     /**",
    "output": "Fix get old options after saving options bug"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/event/theme/ThemeUpdatedListener.java b/src/main/java/run/halo/app/event/theme/ThemeUpdatedListener.java\n--- a/src/main/java/run/halo/app/event/theme/ThemeUpdatedListener.java\n+++ b/src/main/java/run/halo/app/event/theme/ThemeUpdatedListener.java\n@@ -1,9 +1,10 @@\n package run.halo.app.event.theme;\n \n-import org.springframework.context.ApplicationListener;\n+import org.springframework.context.event.EventListener;\n import org.springframework.scheduling.annotation.Async;\n import org.springframework.stereotype.Component;\n import run.halo.app.cache.StringCacheStore;\n+import run.halo.app.event.options.OptionUpdatedEvent;\n import run.halo.app.service.ThemeService;\n \n /**\n@@ -13,17 +14,23 @@\n  * @date 19-4-29\n  */\n @Component\n-public class ThemeUpdatedListener implements ApplicationListener<ThemeUpdatedEvent> {\n+public class ThemeUpdatedListener {\n \n     private final StringCacheStore cacheStore;\n \n     public ThemeUpdatedListener(StringCacheStore cacheStore) {\n         this.cacheStore = cacheStore;\n     }\n \n-    @Override\n     @Async\n+    @EventListener\n     public void onApplicationEvent(ThemeUpdatedEvent event) {\n         cacheStore.delete(ThemeService.THEMES_CACHE_KEY);\n     }\n+\n+    @Async\n+    @EventListener\n+    public void onOptionUpdatedEvent(OptionUpdatedEvent optionUpdatedEvent) {\n+        cacheStore.delete(ThemeService.THEMES_CACHE_KEY);\n+    }\n }",
    "output": "Merge remote-tracking branch 'origin/dev' into dev"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/event/theme/ThemeUpdatedListener.java b/src/main/java/run/halo/app/event/theme/ThemeUpdatedListener.java\n--- a/src/main/java/run/halo/app/event/theme/ThemeUpdatedListener.java\n+++ b/src/main/java/run/halo/app/event/theme/ThemeUpdatedListener.java\n@@ -1,9 +1,10 @@\n package run.halo.app.event.theme;\n \n-import org.springframework.context.ApplicationListener;\n+import org.springframework.context.event.EventListener;\n import org.springframework.scheduling.annotation.Async;\n import org.springframework.stereotype.Component;\n import run.halo.app.cache.StringCacheStore;\n+import run.halo.app.event.options.OptionUpdatedEvent;\n import run.halo.app.service.ThemeService;\n \n /**\n@@ -13,17 +14,23 @@\n  * @date 19-4-29\n  */\n @Component\n-public class ThemeUpdatedListener implements ApplicationListener<ThemeUpdatedEvent> {\n+public class ThemeUpdatedListener {\n \n     private final StringCacheStore cacheStore;\n \n     public ThemeUpdatedListener(StringCacheStore cacheStore) {\n         this.cacheStore = cacheStore;\n     }\n \n-    @Override\n     @Async\n+    @EventListener\n     public void onApplicationEvent(ThemeUpdatedEvent event) {\n         cacheStore.delete(ThemeService.THEMES_CACHE_KEY);\n     }\n+\n+    @Async\n+    @EventListener\n+    public void onOptionUpdatedEvent(OptionUpdatedEvent optionUpdatedEvent) {\n+        cacheStore.delete(ThemeService.THEMES_CACHE_KEY);\n+    }\n }",
    "output": "Fix theme properties not changed bug"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n@@ -353,7 +353,7 @@ public ThemeProperty activateTheme(String themeId) {\n     public ThemeProperty upload(MultipartFile file) {\n         Assert.notNull(file, \"Multipart file must not be null\");\n \n-        if (!HaloMediaType.isZipType(file.getContentType())) {\n+        if (!StringUtils.endsWithIgnoreCase(file.getOriginalFilename(), \".zip\")) {\n             throw new UnsupportedMediaTypeException(\"Unsupported theme media type: \" + file.getContentType()).setErrorData(file.getOriginalFilename());\n         }\n \n\ndiff --git a/src/main/java/run/halo/app/service/support/HaloMediaType.java b/src/main/java/run/halo/app/service/support/HaloMediaType.java\n--- a/src/main/java/run/halo/app/service/support/HaloMediaType.java\n+++ b/src/main/java/run/halo/app/service/support/HaloMediaType.java\n@@ -70,6 +70,7 @@ public HaloMediaType(String type, String subtype, Map<String, String> parameters\n      * @param mediaType media type\n      * @return true if the given media type is zip type; false otherwise\n      */\n+    @Deprecated\n     public static boolean isZipType(MediaType mediaType) {\n         if (mediaType == null) {\n             return false;\n@@ -84,6 +85,7 @@ public static boolean isZipType(MediaType mediaType) {\n      * @param contentType content type\n      * @return true if the given content type is zip type; false otherwise\n      */\n+    @Deprecated\n     public static boolean isZipType(String contentType) {\n         if (StringUtils.isBlank(contentType)) {\n             return false;\n\ndiff --git a/src/test/java/run/halo/app/model/MediaTypeTest.java b/src/test/java/run/halo/app/model/MediaTypeTest.java\n--- a/src/test/java/run/halo/app/model/MediaTypeTest.java\n+++ b/src/test/java/run/halo/app/model/MediaTypeTest.java\n@@ -1,7 +1,9 @@\n package run.halo.app.model;\n \n+import lombok.extern.slf4j.Slf4j;\n import org.junit.Test;\n import org.springframework.http.MediaType;\n+import run.halo.app.service.support.HaloMediaType;\n \n import static org.hamcrest.Matchers.equalTo;\n import static org.junit.Assert.*;\n@@ -10,6 +12,7 @@\n  * @author johnniang\n  * @date 3/26/19\n  */\n+@Slf4j\n public class MediaTypeTest {\n \n     @Test\n@@ -42,4 +45,12 @@ public void includesTest() {\n         isInclude = mediaType.includes(MediaType.TEXT_HTML);\n         assertFalse(isInclude);\n     }\n+\n+    @Test\n+    public void zipTest() {\n+        MediaType mediaType = MediaType.valueOf(\"application/x-zip-compressed\");\n+        log.debug(\"Zip type: [{}]\", mediaType);\n+\n+        assertFalse(HaloMediaType.isZipType(mediaType));\n+    }\n }",
    "output": "Fix unsupported theme media type bug"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/ContentSheetController.java b/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n@@ -36,9 +36,9 @@ public ContentSheetController(SheetService sheetService,\n      *\n      * @return template path: themes/{theme}/gallery.ftl\n      */\n-    @GetMapping(value = \"/gallery\")\n-    public String gallery() {\n-        return themeService.render(\"gallery\");\n+    @GetMapping(value = \"/photos\")\n+    public String photos() {\n+        return themeService.render(\"photos\");\n     }\n \n     /**\n\ndiff --git a/src/test/java/run/halo/app/event/LogEventListenerTest.java b/src/test/java/run/halo/app/event/LogEventListenerTest.java\n--- a/src/test/java/run/halo/app/event/LogEventListenerTest.java\n+++ b/src/test/java/run/halo/app/event/LogEventListenerTest.java\n@@ -1,33 +0,0 @@\n-package run.halo.app.event;\n-\n-import lombok.extern.slf4j.Slf4j;\n-import org.junit.Test;\n-import org.springframework.context.ApplicationListener;\n-import run.halo.app.event.logger.LogEvent;\n-import run.halo.app.event.logger.LogEventListener;\n-import run.halo.app.utils.ReflectionUtils;\n-\n-import java.lang.reflect.ParameterizedType;\n-import java.lang.reflect.Type;\n-import java.util.Objects;\n-\n-import static org.hamcrest.Matchers.equalTo;\n-import static org.junit.Assert.*;\n-\n-/**\n- * Log event listener test.\n- *\n- * @author johnniang\n- * @date 19-4-21\n- */\n-@Slf4j\n-public class LogEventListenerTest {\n-\n-    @Test\n-    public void getGenericTypeTest() {\n-        ParameterizedType parameterizedType = ReflectionUtils.getParameterizedType(ApplicationListener.class, LogEventListener.class);\n-        Type[] actualTypeArguments = Objects.requireNonNull(parameterizedType).getActualTypeArguments();\n-        Type actualTypeArgument = actualTypeArguments[0];\n-        assertThat(actualTypeArgument.getTypeName(), equalTo(LogEvent.class.getTypeName()));\n-    }\n-}\n\\ No newline at end of file\n\ndiff --git a/src/test/java/run/halo/app/service/impl/OptionServiceImplTest.java b/src/test/java/run/halo/app/service/impl/OptionServiceImplTest.java\n--- a/src/test/java/run/halo/app/service/impl/OptionServiceImplTest.java\n+++ b/src/test/java/run/halo/app/service/impl/OptionServiceImplTest.java\n@@ -1,15 +1,19 @@\n package run.halo.app.service.impl;\n \n-import run.halo.app.model.entity.Option;\n-import run.halo.app.model.properties.QnYunProperties;\n-import run.halo.app.repository.OptionRepository;\n import com.qiniu.common.Zone;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n import org.mockito.junit.MockitoJUnitRunner;\n+import run.halo.app.cache.StringCacheStore;\n+import run.halo.app.model.entity.Option;\n+import run.halo.app.model.properties.QnYunProperties;\n+import run.halo.app.repository.OptionRepository;\n+import run.halo.app.service.OptionService;\n \n+import java.util.HashMap;\n+import java.util.Map;\n import java.util.Optional;\n \n import static org.hamcrest.Matchers.equalTo;\n@@ -30,6 +34,9 @@ public class OptionServiceImplTest {\n     @Mock\n     private OptionRepository optionRepository;\n \n+    @Mock\n+    private StringCacheStore cacheStore;\n+\n     @InjectMocks\n     private OptionServiceImpl optionService;\n \n@@ -76,13 +83,16 @@ private void getQiniuZoneTest(Zone actualZone, Option option) {\n         QnYunProperties zoneProperty = QnYunProperties.ZONE;\n \n         // Given\n-        given(optionRepository.findByKey(zoneProperty.getValue())).willReturn(Optional.ofNullable(option));\n+//        given(optionRepository.findByKey(zoneProperty.getValue())).willReturn(Optional.ofNullable(option));\n+        Map<String, Object> optionMap = new HashMap<>(1);\n+        optionMap.put(zoneProperty.getValue(), Optional.ofNullable(option).map(Option::getValue).orElse(null));\n+        given(cacheStore.getAny(OptionService.OPTIONS_KEY, Map.class)).willReturn(Optional.of(optionMap));\n \n         // When\n         Zone zone = optionService.getQnYunZone();\n \n         // Then\n-        then(optionRepository).should().findByKey(zoneProperty.getValue());\n+        then(cacheStore).should().getAny(OptionService.OPTIONS_KEY, Map.class);\n \n         assertNotNull(zone);\n         assertThat(zone.getRegion(), equalTo(actualZone.getRegion()));",
    "output": "Merge pull request #1 from halo-dev/dev\n\nDev"
  },
  {
    "input": "diff --git a/src/test/java/run/halo/app/event/LogEventListenerTest.java b/src/test/java/run/halo/app/event/LogEventListenerTest.java\n--- a/src/test/java/run/halo/app/event/LogEventListenerTest.java\n+++ b/src/test/java/run/halo/app/event/LogEventListenerTest.java\n@@ -1,33 +0,0 @@\n-package run.halo.app.event;\n-\n-import lombok.extern.slf4j.Slf4j;\n-import org.junit.Test;\n-import org.springframework.context.ApplicationListener;\n-import run.halo.app.event.logger.LogEvent;\n-import run.halo.app.event.logger.LogEventListener;\n-import run.halo.app.utils.ReflectionUtils;\n-\n-import java.lang.reflect.ParameterizedType;\n-import java.lang.reflect.Type;\n-import java.util.Objects;\n-\n-import static org.hamcrest.Matchers.equalTo;\n-import static org.junit.Assert.*;\n-\n-/**\n- * Log event listener test.\n- *\n- * @author johnniang\n- * @date 19-4-21\n- */\n-@Slf4j\n-public class LogEventListenerTest {\n-\n-    @Test\n-    public void getGenericTypeTest() {\n-        ParameterizedType parameterizedType = ReflectionUtils.getParameterizedType(ApplicationListener.class, LogEventListener.class);\n-        Type[] actualTypeArguments = Objects.requireNonNull(parameterizedType).getActualTypeArguments();\n-        Type actualTypeArgument = actualTypeArguments[0];\n-        assertThat(actualTypeArgument.getTypeName(), equalTo(LogEvent.class.getTypeName()));\n-    }\n-}\n\\ No newline at end of file\n\ndiff --git a/src/test/java/run/halo/app/service/impl/OptionServiceImplTest.java b/src/test/java/run/halo/app/service/impl/OptionServiceImplTest.java\n--- a/src/test/java/run/halo/app/service/impl/OptionServiceImplTest.java\n+++ b/src/test/java/run/halo/app/service/impl/OptionServiceImplTest.java\n@@ -1,15 +1,19 @@\n package run.halo.app.service.impl;\n \n-import run.halo.app.model.entity.Option;\n-import run.halo.app.model.properties.QnYunProperties;\n-import run.halo.app.repository.OptionRepository;\n import com.qiniu.common.Zone;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n import org.mockito.junit.MockitoJUnitRunner;\n+import run.halo.app.cache.StringCacheStore;\n+import run.halo.app.model.entity.Option;\n+import run.halo.app.model.properties.QnYunProperties;\n+import run.halo.app.repository.OptionRepository;\n+import run.halo.app.service.OptionService;\n \n+import java.util.HashMap;\n+import java.util.Map;\n import java.util.Optional;\n \n import static org.hamcrest.Matchers.equalTo;\n@@ -30,6 +34,9 @@ public class OptionServiceImplTest {\n     @Mock\n     private OptionRepository optionRepository;\n \n+    @Mock\n+    private StringCacheStore cacheStore;\n+\n     @InjectMocks\n     private OptionServiceImpl optionService;\n \n@@ -76,13 +83,16 @@ private void getQiniuZoneTest(Zone actualZone, Option option) {\n         QnYunProperties zoneProperty = QnYunProperties.ZONE;\n \n         // Given\n-        given(optionRepository.findByKey(zoneProperty.getValue())).willReturn(Optional.ofNullable(option));\n+//        given(optionRepository.findByKey(zoneProperty.getValue())).willReturn(Optional.ofNullable(option));\n+        Map<String, Object> optionMap = new HashMap<>(1);\n+        optionMap.put(zoneProperty.getValue(), Optional.ofNullable(option).map(Option::getValue).orElse(null));\n+        given(cacheStore.getAny(OptionService.OPTIONS_KEY, Map.class)).willReturn(Optional.of(optionMap));\n \n         // When\n         Zone zone = optionService.getQnYunZone();\n \n         // Then\n-        then(optionRepository).should().findByKey(zoneProperty.getValue());\n+        then(cacheStore).should().getAny(OptionService.OPTIONS_KEY, Map.class);\n \n         assertNotNull(zone);\n         assertThat(zone.getRegion(), equalTo(actualZone.getRegion()));",
    "output": "Fix test errors"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/ContentSheetController.java b/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n@@ -36,9 +36,9 @@ public ContentSheetController(SheetService sheetService,\n      *\n      * @return template path: themes/{theme}/gallery.ftl\n      */\n-    @GetMapping(value = \"/gallery\")\n-    public String gallery() {\n-        return themeService.render(\"gallery\");\n+    @GetMapping(value = \"/photos\")\n+    public String photos() {\n+        return themeService.render(\"photos\");\n     }\n \n     /**",
    "output": "Change gallery to photo."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/InstallController.java b/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n@@ -209,13 +209,7 @@ private void initSettings(InstallParam installParam) {\n         properties.put(BlogProperties.BLOG_TITLE, installParam.getTitle());\n         properties.put(BlogProperties.BLOG_URL, StringUtils.isBlank(installParam.getUrl()) ?\n                 optionService.getBlogBaseUrl() : installParam.getUrl());\n-        properties.put(PrimaryProperties.THEME, DEFAULT_THEME_ID);\n         properties.put(PrimaryProperties.BIRTHDAY, String.valueOf(System.currentTimeMillis()));\n-        properties.put(EmailProperties.ENABLED, Boolean.FALSE.toString());\n-        properties.put(CommentProperties.NEW_NOTICE, Boolean.FALSE.toString());\n-        properties.put(CommentProperties.PASS_NOTICE, Boolean.FALSE.toString());\n-        properties.put(CommentProperties.REPLY_NOTICE, Boolean.FALSE.toString());\n-        properties.put(AttachmentProperties.ATTACHMENT_TYPE, AttachmentType.LOCAL.name());\n \n         // Create properties\n         optionService.saveProperties(properties);\n\ndiff --git a/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java b/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n--- a/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n+++ b/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n@@ -87,14 +87,17 @@ public void onOptionUpdate(OptionUpdatedEvent event) throws TemplateModelExcepti\n \n     private void loadUserConfig() throws TemplateModelException {\n         configuration.setSharedVariable(\"user\", userService.getCurrentUser().orElse(null));\n+        log.debug(\"Loaded user\");\n     }\n \n     private void loadOptionsConfig() throws TemplateModelException {\n         configuration.setSharedVariable(\"options\", optionService.listOptions());\n+        log.debug(\"Loaded options\");\n     }\n \n     private void loadThemeConfig() throws TemplateModelException {\n         configuration.setSharedVariable(\"theme\", themeService.getActivatedTheme());\n         configuration.setSharedVariable(\"settings\", themeSettingService.listAsMapBy(themeService.getActivatedThemeId()));\n+        log.debug(\"Loaded theme and settings\");\n     }\n }\n\ndiff --git a/src/main/java/run/halo/app/listener/StartedListener.java b/src/main/java/run/halo/app/listener/StartedListener.java\n--- a/src/main/java/run/halo/app/listener/StartedListener.java\n+++ b/src/main/java/run/halo/app/listener/StartedListener.java\n@@ -95,14 +95,13 @@ private void initThemes() {\n             Path themePath = themeService.getBasePath();\n \n             if (!haloProperties.isProductionEnv() || Files.notExists(themePath)) {\n-                log.info(\"Copying theme folder from [{}] to [{}]\", source, themePath);\n-\n                 FileUtils.copyFolder(source, themePath);\n+                log.info(\"Copied theme folder from [{}] to [{}]\", source, themePath);\n             } else {\n-                log.info(\"Skip copying theme folder due to existence of theme folder\");\n+                log.info(\"Skipped copying theme folder due to existence of theme folder\");\n             }\n         } catch (Exception e) {\n-            throw new RuntimeException(\"Init internal theme to user path error\", e);\n+            throw new RuntimeException(\"Initialize internal theme to user path error\", e);\n         }\n     }\n \n\ndiff --git a/src/main/java/run/halo/app/model/properties/PrimaryProperties.java b/src/main/java/run/halo/app/model/properties/PrimaryProperties.java\n--- a/src/main/java/run/halo/app/model/properties/PrimaryProperties.java\n+++ b/src/main/java/run/halo/app/model/properties/PrimaryProperties.java\n@@ -1,5 +1,7 @@\n package run.halo.app.model.properties;\n \n+import static run.halo.app.model.support.HaloConst.DEFAULT_THEME_ID;\n+\n /**\n  * Primary properties.\n  *\n@@ -8,12 +10,11 @@\n  */\n public enum PrimaryProperties implements PropertyEnum {\n \n-    IS_INSTALLED(\"is_installed\", Boolean.class, \"\"),\n+    IS_INSTALLED(\"is_installed\", Boolean.class, \"false\"),\n \n-    THEME(\"theme\", String.class, \"\"),\n+    THEME(\"theme\", String.class, DEFAULT_THEME_ID),\n \n-    BIRTHDAY(\"birthday\", Long.class, \"\"),\n-    ;\n+    BIRTHDAY(\"birthday\", Long.class, \"\");\n \n     private final String value;\n \n\ndiff --git a/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java b/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n@@ -382,10 +382,11 @@ public long getBirthday() {\n     }\n \n     private void cleanCache() {\n-        cacheStore.delete(OptionService.OPTIONS_KEY);\n+        cacheStore.delete(OPTIONS_KEY);\n     }\n \n     private void publishOptionUpdatedEvent() {\n+        flush();\n         cleanCache();\n         eventPublisher.publishEvent(new OptionUpdatedEvent(this));\n     }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n@@ -340,8 +340,6 @@ public ThemeProperty activateTheme(String themeId) {\n         // Set activated theme\n         setActivatedTheme(themeProperty);\n \n-        optionService.flush();\n-\n         // Clear the cache\n         eventPublisher.publishEvent(new ThemeUpdatedEvent(this));\n ",
    "output": "Fix option updated event bug"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/InstallController.java b/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n@@ -22,6 +22,7 @@\n import run.halo.app.model.params.*;\n import run.halo.app.model.properties.*;\n import run.halo.app.model.support.BaseResponse;\n+import run.halo.app.model.support.CreateCheck;\n import run.halo.app.service.*;\n import run.halo.app.utils.ValidationUtils;\n \n@@ -77,7 +78,10 @@ public InstallController(UserService userService,\n     @PostMapping\n     @ResponseBody\n     @CacheLock\n-    public BaseResponse<String> installBlog(@RequestBody @Valid InstallParam installParam) {\n+    public BaseResponse<String> installBlog(@RequestBody InstallParam installParam) {\n+        // Validate manually\n+        ValidationUtils.validate(installParam, CreateCheck.class);\n+\n         // Check is installed\n         boolean isInstalled = optionService.getByPropertyOrDefault(PrimaryProperties.IS_INSTALLED, Boolean.class, false);\n ",
    "output": "Validate install param manually"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/params/InstallParam.java b/src/main/java/run/halo/app/model/params/InstallParam.java\n--- a/src/main/java/run/halo/app/model/params/InstallParam.java\n+++ b/src/main/java/run/halo/app/model/params/InstallParam.java\n@@ -2,9 +2,9 @@\n \n import lombok.Data;\n import lombok.EqualsAndHashCode;\n+import run.halo.app.model.support.CreateCheck;\n \n import javax.validation.constraints.NotBlank;\n-import javax.validation.constraints.Size;\n \n /**\n  * Install parameters.\n@@ -24,7 +24,7 @@ public class InstallParam extends UserParam {\n     /**\n      * Blog title.\n      */\n-    @NotBlank(message = \"Blog title must not be blank\")\n+    @NotBlank(message = \"Blog title must not be blank\", groups = CreateCheck.class)\n     private String title;\n \n     /**\n\ndiff --git a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n@@ -1,8 +1,6 @@\n package run.halo.app.service.impl;\n \n import cn.hutool.core.io.FileUtil;\n-import cn.hutool.core.io.file.FileReader;\n-import cn.hutool.core.io.file.FileWriter;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.lang3.StringUtils;\n import org.eclipse.jgit.api.Git;\n@@ -37,6 +35,7 @@\n \n import java.io.ByteArrayInputStream;\n import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n@@ -215,7 +214,12 @@ public String getTemplateContent(String absolutePath) {\n         checkDirectory(absolutePath);\n \n         // Read file\n-        return new FileReader(absolutePath).readString();\n+        Path path = Paths.get(absolutePath);\n+        try {\n+            return new String(Files.readAllBytes(path), StandardCharsets.UTF_8);\n+        } catch (IOException e) {\n+            throw new ServiceException(\"Failed to read file \" + absolutePath, e);\n+        }\n     }\n \n     @Override\n@@ -224,7 +228,12 @@ public void saveTemplateContent(String absolutePath, String content) {\n         checkDirectory(absolutePath);\n \n         // Write file\n-        new FileWriter(absolutePath).write(content);\n+        Path path = Paths.get(absolutePath);\n+        try {\n+            Files.write(path, content.getBytes(StandardCharsets.UTF_8));\n+        } catch (IOException e) {\n+            throw new ServiceException(\"Failed to write file \" + absolutePath, e);\n+        }\n     }\n \n     @Override\n@@ -273,7 +282,7 @@ public List<Group> fetchConfig(String themeId) {\n                 }\n \n                 // Read the yaml file\n-                String optionContent = new String(Files.readAllBytes(optionsPath));\n+                String optionContent = new String(Files.readAllBytes(optionsPath), StandardCharsets.UTF_8);\n \n                 // Resolve it\n                 return themeConfigResolver.resolve(optionContent);\n@@ -638,7 +647,7 @@ private Optional<ThemeProperty> getPropertyOfNullable(Path themePath) {\n \n         try {\n             // Get property content\n-            String propertyContent = new String(Files.readAllBytes(propertyPath));\n+            String propertyContent = new String(Files.readAllBytes(propertyPath), StandardCharsets.UTF_8);\n \n             // Resolve the base properties\n             ThemeProperty themeProperty = themePropertyResolver.resolve(propertyContent);",
    "output": "Fix file encoding bug"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java b/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n--- a/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n+++ b/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n@@ -12,14 +12,11 @@\n import run.halo.app.event.options.OptionUpdatedEvent;\n import run.halo.app.event.theme.ThemeActivatedEvent;\n import run.halo.app.event.user.UserUpdatedEvent;\n-import run.halo.app.handler.theme.config.support.ThemeProperty;\n import run.halo.app.service.OptionService;\n import run.halo.app.service.ThemeService;\n import run.halo.app.service.ThemeSettingService;\n import run.halo.app.service.UserService;\n \n-import java.util.Map;\n-\n /**\n  * Freemarker config aware listener.\n  *\n\ndiff --git a/src/main/java/run/halo/app/event/options/OptionUpdatedListener.java b/src/main/java/run/halo/app/event/options/OptionUpdatedListener.java\n--- a/src/main/java/run/halo/app/event/options/OptionUpdatedListener.java\n+++ b/src/main/java/run/halo/app/event/options/OptionUpdatedListener.java\n@@ -1,29 +0,0 @@\n-package run.halo.app.event.options;\n-\n-import org.springframework.context.ApplicationListener;\n-import org.springframework.scheduling.annotation.Async;\n-import org.springframework.stereotype.Component;\n-import run.halo.app.cache.StringCacheStore;\n-import run.halo.app.service.OptionService;\n-\n-/**\n- * Option updated listener.\n- *\n- * @author johnniang\n- * @date 19-4-29\n- */\n-@Component\n-public class OptionUpdatedListener implements ApplicationListener<OptionUpdatedEvent> {\n-\n-    private final StringCacheStore cacheStore;\n-\n-    public OptionUpdatedListener(StringCacheStore cacheStore) {\n-        this.cacheStore = cacheStore;\n-    }\n-\n-    @Override\n-    @Async\n-    public void onApplicationEvent(OptionUpdatedEvent event) {\n-        cacheStore.delete(OptionService.OPTIONS_KEY);\n-    }\n-}\n\ndiff --git a/src/main/java/run/halo/app/service/base/AbstractCrudService.java b/src/main/java/run/halo/app/service/base/AbstractCrudService.java\n--- a/src/main/java/run/halo/app/service/base/AbstractCrudService.java\n+++ b/src/main/java/run/halo/app/service/base/AbstractCrudService.java\n@@ -221,6 +221,11 @@ public DOMAIN update(DOMAIN domain) {\n         return repository.saveAndFlush(domain);\n     }\n \n+    @Override\n+    public void flush() {\n+        repository.flush();\n+    }\n+\n     /**\n      * Updates by domains\n      *\n\ndiff --git a/src/main/java/run/halo/app/service/base/CrudService.java b/src/main/java/run/halo/app/service/base/CrudService.java\n--- a/src/main/java/run/halo/app/service/base/CrudService.java\n+++ b/src/main/java/run/halo/app/service/base/CrudService.java\n@@ -148,6 +148,11 @@ public interface CrudService<DOMAIN, ID> {\n     @Transactional\n     DOMAIN update(@NonNull DOMAIN domain);\n \n+    /**\n+     * Flushes all pending changes to the database.\n+     */\n+    void flush();\n+\n     /**\n      * Updates by domains\n      *\n\ndiff --git a/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java b/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n@@ -381,7 +381,13 @@ public long getBirthday() {\n         });\n     }\n \n+    private void cleanCache() {\n+        cacheStore.delete(OptionService.OPTIONS_KEY);\n+    }\n+\n     private void publishOptionUpdatedEvent() {\n+        cleanCache();\n         eventPublisher.publishEvent(new OptionUpdatedEvent(this));\n     }\n }\n+\n\ndiff --git a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n@@ -331,6 +331,8 @@ public ThemeProperty activateTheme(String themeId) {\n         // Set activated theme\n         setActivatedTheme(themeProperty);\n \n+        optionService.flush();\n+\n         // Clear the cache\n         eventPublisher.publishEvent(new ThemeUpdatedEvent(this));\n ",
    "output": "Fix option updated event bug"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/ContentFeedController.java b/src/main/java/run/halo/app/controller/content/ContentFeedController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentFeedController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentFeedController.java\n@@ -2,6 +2,7 @@\n \n import freemarker.template.Template;\n import freemarker.template.TemplateException;\n+import org.springframework.data.domain.Page;\n import org.springframework.data.domain.PageRequest;\n import org.springframework.data.domain.Pageable;\n import org.springframework.data.domain.Sort;\n@@ -15,6 +16,7 @@\n import org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer;\n import run.halo.app.model.entity.Post;\n import run.halo.app.model.enums.PostStatus;\n+import run.halo.app.model.vo.PostListVO;\n import run.halo.app.service.OptionService;\n import run.halo.app.service.PostService;\n \n@@ -140,11 +142,14 @@ private Pageable buildPostPageable(int size) {\n      * @param pageable pageable\n      * @return List<Post>\n      */\n-    private List<Post> buildPosts(Pageable pageable) {\n+    private List<PostListVO> buildPosts(Pageable pageable) {\n         if (pageable == null) {\n-            return postService.listAllBy(PostStatus.PUBLISHED);\n+            Page<Post> postPage = postService.pageBy(PostStatus.PUBLISHED, null);\n+            return postService.convertToListVo(postPage).getContent();\n         }\n \n-        return postService.pageBy(PostStatus.PUBLISHED, pageable).map(postService::filterIfEncrypt).getContent();\n+        Page<Post> postPage = postService.pageBy(PostStatus.PUBLISHED, pageable);\n+        Page<PostListVO> posts = postService.convertToListVo(postPage);\n+        return posts.getContent();\n     }\n }\n\ndiff --git a/src/main/java/run/halo/app/controller/content/ContentTagController.java b/src/main/java/run/halo/app/controller/content/ContentTagController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentTagController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentTagController.java\n@@ -13,10 +13,8 @@\n import org.springframework.web.bind.annotation.RequestMapping;\n import run.halo.app.model.entity.Post;\n import run.halo.app.model.entity.Tag;\n-import run.halo.app.service.OptionService;\n-import run.halo.app.service.PostTagService;\n-import run.halo.app.service.TagService;\n-import run.halo.app.service.ThemeService;\n+import run.halo.app.model.vo.PostListVO;\n+import run.halo.app.service.*;\n \n import static org.springframework.data.domain.Sort.Direction.DESC;\n \n@@ -32,14 +30,21 @@ public class ContentTagController {\n \n     private final TagService tagService;\n \n+    private final PostService postService;\n+\n     private final PostTagService postTagService;\n \n     private final OptionService optionService;\n \n     private final ThemeService themeService;\n \n-    public ContentTagController(TagService tagService, PostTagService postTagService, OptionService optionService, ThemeService themeService) {\n+    public ContentTagController(TagService tagService,\n+                                PostService postService,\n+                                PostTagService postTagService,\n+                                OptionService optionService,\n+                                ThemeService themeService) {\n         this.tagService = tagService;\n+        this.postService = postService;\n         this.postTagService = postTagService;\n         this.optionService = optionService;\n         this.themeService = themeService;\n@@ -84,7 +89,8 @@ public String tags(Model model,\n         Tag tag = tagService.getBySlugNameOfNonNull(slugName);\n \n         final Pageable pageable = PageRequest.of(page - 1, optionService.getPostPageSize(), sort);\n-        Page<Post> posts = postTagService.pagePostsBy(tag.getId(), pageable);\n+        Page<Post> postPage = postTagService.pagePostsBy(tag.getId(), pageable);\n+        Page<PostListVO> posts = postService.convertToListVo(postPage);\n         final int[] rainbow = PageUtil.rainbow(page, posts.getTotalPages(), 3);\n \n         model.addAttribute(\"is_tags\", true);",
    "output": "Fixed render atom.xml error."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/RecoveryServiceImpl.java b/src/main/java/run/halo/app/service/impl/RecoveryServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/RecoveryServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/RecoveryServiceImpl.java\n@@ -24,6 +24,7 @@\n \n import java.io.IOException;\n import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n import java.text.SimpleDateFormat;\n import java.util.*;\n import java.util.stream.Collectors;\n@@ -94,7 +95,7 @@ public RecoveryServiceImpl(AttachmentService attachmentService,\n     public void migrateFromV0_4_3(MultipartFile file) {\n         // Get migration content\n         try {\n-            String migrationContent = FileCopyUtils.copyToString(new InputStreamReader(file.getInputStream()));\n+            String migrationContent = FileCopyUtils.copyToString(new InputStreamReader(file.getInputStream(), StandardCharsets.UTF_8));\n \n             Object migrationObject = JsonUtils.jsonToObject(migrationContent, Object.class);\n ",
    "output": "Fix migration error"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/Application.java b/src/main/java/run/halo/app/Application.java\n--- a/src/main/java/run/halo/app/Application.java\n+++ b/src/main/java/run/halo/app/Application.java\n@@ -25,7 +25,7 @@ public class Application {\n \n     public static void main(String[] args) {\n         // Customize the spring config location\n-        System.setProperty(\"spring.config.additional-location\", \"file:${user.home}/halo/,file:${user.home}/halo-dev/\");\n+        System.setProperty(\"spring.config.additional-location\", \"file:${user.home}/.halo/,file:${user.home}/halo-dev/\");\n \n         // Run application\n         SpringApplication.run(Application.class, args);",
    "output": "Add Dockerfile support"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/HaloConfiguration.java b/src/main/java/run/halo/app/config/HaloConfiguration.java\n--- a/src/main/java/run/halo/app/config/HaloConfiguration.java\n+++ b/src/main/java/run/halo/app/config/HaloConfiguration.java\n@@ -97,7 +97,7 @@ public FilterRegistrationBean<ContentFilter> contentFilter(HaloProperties haloPr\n                                                                OptionService optionService) {\n         ContentFilter contentFilter = new ContentFilter(haloProperties, optionService);\n         contentFilter.setFailureHandler(new ContentAuthenticationFailureHandler());\n-        contentFilter.addExcludeUrlPatterns(\"/api/*\", \"/install\", \"/version\", \"/admin/*\", \"/js/*\", \"/css/*\");\n+        contentFilter.addExcludeUrlPatterns(\"/api/**\", \"/install\", \"/version\", \"/admin/**\", \"/js/**\", \"/css/**\");\n \n         FilterRegistrationBean<ContentFilter> contentFrb = new FilterRegistrationBean<>();\n         contentFrb.addUrlPatterns(\"/*\");",
    "output": "Fix fatal bug for exclude url pattern"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/SwaggerConfiguration.java b/src/main/java/run/halo/app/config/SwaggerConfiguration.java\n--- a/src/main/java/run/halo/app/config/SwaggerConfiguration.java\n+++ b/src/main/java/run/halo/app/config/SwaggerConfiguration.java\n@@ -3,6 +3,7 @@\n import com.fasterxml.classmate.TypeResolver;\n import io.swagger.models.auth.In;\n import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.annotation.Value;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.core.Ordered;\n@@ -56,7 +57,7 @@ public class SwaggerConfiguration {\n             new ResponseMessageBuilder().code(404).message(\"Not found\").build(),\n             new ResponseMessageBuilder().code(500).message(\"Internal server error\").build());\n \n-    public SwaggerConfiguration(HaloProperties haloProperties) {\n+    public SwaggerConfiguration(                                HaloProperties haloProperties) {\n         this.haloProperties = haloProperties;\n     }\n \n\ndiff --git a/src/main/java/run/halo/app/model/support/HaloConst.java b/src/main/java/run/halo/app/model/support/HaloConst.java\n--- a/src/main/java/run/halo/app/model/support/HaloConst.java\n+++ b/src/main/java/run/halo/app/model/support/HaloConst.java\n@@ -23,7 +23,7 @@ public class HaloConst {\n     /**\n      * version constant\n      */\n-    public static final String HALO_VERSION = \"1.0.0\";\n+    public static final String HALO_VERSION;\n \n     /**\n      * Suffix of freemarker template file\n@@ -74,4 +74,8 @@ public class HaloConst {\n      * user_session\n      */\n     public static String USER_SESSION_KEY = \"user_session\";\n+\n+    static {\n+        HALO_VERSION = HaloConst.class.getPackage().getImplementationVersion();\n+    }\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n@@ -57,8 +57,7 @@ public class AdminServiceImpl implements AdminService {\n \n     private final StringCacheStore cacheStore;\n \n-    @Value(\"${spring.datasource.driver-class-name}\")\n-    private String driverClassName;\n+    private final String driverClassName;\n \n     public AdminServiceImpl(PostService postService,\n                             SheetService sheetService,\n@@ -69,7 +68,8 @@ public AdminServiceImpl(PostService postService,\n                             OptionService optionService,\n                             UserService userService,\n                             LinkService linkService,\n-                            StringCacheStore cacheStore) {\n+                            StringCacheStore cacheStore,\n+                            @Value(\"${spring.datasource.driver-class-name}\") String driverClassName) {\n         this.postService = postService;\n         this.sheetService = sheetService;\n         this.attachmentService = attachmentService;\n@@ -80,6 +80,7 @@ public AdminServiceImpl(PostService postService,\n         this.userService = userService;\n         this.linkService = linkService;\n         this.cacheStore = cacheStore;\n+        this.driverClassName = driverClassName;\n     }\n \n     @Override",
    "output": "Add halo version to application"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/OptionController.java b/src/main/java/run/halo/app/controller/admin/api/OptionController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/OptionController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/OptionController.java\n@@ -50,13 +50,6 @@ public Map<String, Object> listAllWithMapView(@RequestParam(value = \"key[]\", req\n         return optionService.listOptions(keys);\n     }\n \n-    @GetMapping(\"map_keys\")\n-    @ApiOperation(\"List all of options by keys, replaced by `listAllWithMapView`\")\n-    @Deprecated\n-    public Map<String, Object> listByKeysWithMapView(@RequestParam(value = \"keys\") String keys) {\n-        return optionService.listByKeys(keys);\n-    }\n-\n     @PostMapping(\"map_view/saving\")\n     @ApiOperation(\"Saves options by option map\")\n     public void saveOptionsWithMapView(@RequestBody Map<String, String> optionMap) {\n\ndiff --git a/src/main/java/run/halo/app/service/OptionService.java b/src/main/java/run/halo/app/service/OptionService.java\n--- a/src/main/java/run/halo/app/service/OptionService.java\n+++ b/src/main/java/run/halo/app/service/OptionService.java\n@@ -73,18 +73,14 @@ public interface OptionService extends CrudService<Option, Integer> {\n     @NonNull\n     Map<String, Object> listOptions();\n \n-    @NonNull\n-    Map<String, Object> listOptions(List<String> keys);\n-\n     /**\n-     * List by keys\n+     * Lists options by key list.\n      *\n-     * @param params params\n-     * @return Map\n+     * @param keys key list\n+     * @return a map of option\n      */\n     @NonNull\n-    @Deprecated\n-    Map<String, Object> listByKeys(String params);\n+    Map<String, Object> listOptions(@Nullable List<String> keys);\n \n     /**\n      * Lists all option dtos.\n@@ -290,6 +286,7 @@ public interface OptionService extends CrudService<Option, Integer> {\n \n     /**\n      * Gets blog title.\n+     *\n      * @return blog title.\n      */\n     @NonNull\n\ndiff --git a/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java b/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n@@ -193,18 +193,6 @@ public Map<String, Object> listOptions(List<String> keys) {\n         return result;\n     }\n \n-    @Override\n-    public Map<String, Object> listByKeys(String params) {\n-        Assert.notNull(params, \"Keys must not be null\");\n-        Map<String, Object> options = listOptions();\n-        Map<String, Object> result = new HashMap<>();\n-        String[] keysParam = params.split(\",\");\n-        for (String key : keysParam) {\n-            result.put(key, options.get(key));\n-        }\n-        return result;\n-    }\n-\n     @Override\n     public List<OptionDTO> listDtos() {\n         List<OptionDTO> result = new LinkedList<>();",
    "output": "Remove deprecated option methods"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/MailController.java b/src/main/java/run/halo/app/controller/admin/api/MailController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/MailController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/MailController.java\n@@ -0,0 +1,34 @@\n+package run.halo.app.controller.admin.api;\n+\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import run.halo.app.model.params.MailParam;\n+import run.halo.app.model.support.BaseResponse;\n+import run.halo.app.service.MailService;\n+\n+import javax.validation.Valid;\n+\n+/**\n+ * Mail controller.\n+ *\n+ * @author johnniang\n+ * @date 19-5-7\n+ */\n+@RestController\n+@RequestMapping(\"/api/admin/mails\")\n+public class MailController {\n+\n+    private final MailService mailService;\n+\n+    public MailController(MailService mailService) {\n+        this.mailService = mailService;\n+    }\n+\n+    @PostMapping(\"test\")\n+    public BaseResponse testMail(@Valid @RequestBody MailParam mailParam) {\n+        mailService.sendMail(mailParam.getTo(), mailParam.getSubject(), mailParam.getContent());\n+        return BaseResponse.ok(\"发送成功\");\n+    }\n+}\n\ndiff --git a/src/main/java/run/halo/app/controller/admin/api/OptionController.java b/src/main/java/run/halo/app/controller/admin/api/OptionController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/OptionController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/OptionController.java\n@@ -26,12 +26,8 @@ public class OptionController {\n \n     private final OptionService optionService;\n \n-    private final MailService mailService;\n-\n-    public OptionController(OptionService optionService,\n-                            MailService mailService) {\n+    public OptionController(OptionService optionService) {\n         this.optionService = optionService;\n-        this.mailService = mailService;\n     }\n \n     @GetMapping\n@@ -46,7 +42,7 @@ public void saveOptions(@Valid @RequestBody List<OptionParam> optionParams) {\n \n     @GetMapping(\"map_view\")\n     @ApiOperation(\"Lists all options with map view\")\n-    public Map<String, Object> listAllWithMapView(@RequestParam(value = \"key\", required = false) List<String> keys) {\n+    public Map<String, Object> listAllWithMapView(@RequestParam(value = \"key[]\", required = false) List<String> keys) {\n         if (CollectionUtils.isEmpty(keys)) {\n             return optionService.listOptions();\n         }\n@@ -55,7 +51,7 @@ public Map<String, Object> listAllWithMapView(@RequestParam(value = \"key\", requi\n     }\n \n     @GetMapping(\"map_keys\")\n-    @ApiOperation(\"List all of options by keys\")\n+    @ApiOperation(\"List all of options by keys, replaced by `listAllWithMapView`\")\n     @Deprecated\n     public Map<String, Object> listByKeysWithMapView(@RequestParam(value = \"keys\") String keys) {\n         return optionService.listByKeys(keys);\n@@ -67,9 +63,4 @@ public void saveOptionsWithMapView(@RequestBody Map<String, String> optionMap) {\n         optionService.save(optionMap);\n     }\n \n-    @PostMapping(\"test_mail\")\n-    public BaseResponse testMail(@Valid @RequestBody MailParam mailParam){\n-        mailService.sendMail(mailParam.getTo(),mailParam.getSubject(),mailParam.getContent());\n-        return BaseResponse.ok(\"发送成功\");\n-    }\n }",
    "output": "Move test mail to MailController"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/properties/EmailProperties.java b/src/main/java/run/halo/app/model/properties/EmailProperties.java\n--- a/src/main/java/run/halo/app/model/properties/EmailProperties.java\n+++ b/src/main/java/run/halo/app/model/properties/EmailProperties.java\n@@ -10,7 +10,7 @@ public enum EmailProperties implements PropertyEnum {\n \n     HOST(\"email_host\", String.class, \"\"),\n \n-    PROTOCOL(\"email_protocol\", String.class, \"SSL\"),\n+    PROTOCOL(\"email_protocol\", String.class, \"smtp\"),\n \n     SSL_PORT(\"email_ssl_port\", Integer.class, \"465\"),\n \n\ndiff --git a/src/main/java/run/halo/app/service/impl/MailServiceImpl.java b/src/main/java/run/halo/app/service/impl/MailServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/MailServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/MailServiceImpl.java\n@@ -1,15 +1,12 @@\n package run.halo.app.service.impl;\n \n import cn.hutool.core.text.StrBuilder;\n-import cn.hutool.core.util.StrUtil;\n import freemarker.template.Template;\n import io.github.biezhi.ome.OhMyEmail;\n import lombok.extern.slf4j.Slf4j;\n-import org.springframework.context.ApplicationListener;\n import org.springframework.stereotype.Service;\n import org.springframework.ui.freemarker.FreeMarkerTemplateUtils;\n import org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer;\n-import run.halo.app.event.options.OptionUpdatedEvent;\n import run.halo.app.exception.EmailException;\n import run.halo.app.model.properties.EmailProperties;\n import run.halo.app.service.MailService;\n@@ -27,14 +24,12 @@\n  */\n @Slf4j\n @Service\n-public class MailServiceImpl implements MailService  {\n+public class MailServiceImpl implements MailService {\n \n     private final FreeMarkerConfigurer freeMarker;\n \n     private final OptionService optionService;\n \n-    private boolean loaded = false;\n-\n     public MailServiceImpl(FreeMarkerConfigurer freeMarker,\n                            OptionService optionService) {\n         this.freeMarker = freeMarker;\n@@ -114,6 +109,7 @@ public void sendAttachMail(String to, String subject, Map<String, Object> conten\n         String fromUsername = optionService.getByPropertyOfNonNull(EmailProperties.FROM_NAME).toString();\n \n         File file = new File(attachFilename);\n+\n         try {\n             Template template = freeMarker.getConfiguration().getTemplate(templateName);\n             OhMyEmail.subject(subject)\n@@ -135,10 +131,12 @@ public void sendAttachMail(String to, String subject, Map<String, Object> conten\n     private void loadConfig() {\n         // Get default properties\n         Properties defaultProperties = OhMyEmail.defaultConfig(log.isDebugEnabled());\n+\n         // Set smtp host\n         defaultProperties.setProperty(\"mail.smtp.host\", optionService.getByPropertyOfNonNull(EmailProperties.HOST).toString());\n-        defaultProperties.setProperty(\"mail.smtp.ssl.enable\", StrUtil.isEmpty(optionService.getByPropertyOfNonNull(EmailProperties.PROTOCOL).toString()) ? \"false\" : \"true\");\n-        defaultProperties.setProperty(\"mail.smtp.port\", StrUtil.isEmpty(optionService.getByPropertyOfNonNull(EmailProperties.SSL_PORT).toString()) ? \"25\" : \"465\");\n+        defaultProperties.setProperty(\"mail.transport.protocol\", optionService.getByPropertyOrDefault(EmailProperties.PROTOCOL, String.class, EmailProperties.PROTOCOL.defaultValue()));\n+        defaultProperties.setProperty(\"mail.smtp.port\", optionService.getByPropertyOrDefault(EmailProperties.SSL_PORT, String.class, EmailProperties.SSL_PORT.defaultValue()));\n+\n         // Config email\n         OhMyEmail.config(defaultProperties,\n                 optionService.getByPropertyOfNonNull(EmailProperties.USERNAME).toString(),",
    "output": "Refactor load mail configuration"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/HaloConfiguration.java b/src/main/java/run/halo/app/config/HaloConfiguration.java\n--- a/src/main/java/run/halo/app/config/HaloConfiguration.java\n+++ b/src/main/java/run/halo/app/config/HaloConfiguration.java\n@@ -114,7 +114,7 @@ public FilterRegistrationBean<ApiAuthenticationFilter> apiAuthenticationFilter(H\n         ApiAuthenticationFilter apiFilter = new ApiAuthenticationFilter(haloProperties, optionService);\n         apiFilter.addExcludeUrlPatterns(\n                 \"/api/content/*/comments\",\n-                \"/api/content/*/comments/*\"\n+                \"/api/content/**/comments/*\"\n         );\n \n         DefaultAuthenticationFailureHandler failureHandler = new DefaultAuthenticationFailureHandler();\n\ndiff --git a/src/main/java/run/halo/app/model/properties/CommentProperties.java b/src/main/java/run/halo/app/model/properties/CommentProperties.java\n--- a/src/main/java/run/halo/app/model/properties/CommentProperties.java\n+++ b/src/main/java/run/halo/app/model/properties/CommentProperties.java\n@@ -18,7 +18,7 @@ public enum CommentProperties implements PropertyEnum {\n \n     REPLY_NOTICE(\"comment_reply_notice\", Boolean.class, \"false\"),\n \n-    API_ENABLED(\"comment_api_enabled\", Boolean.class, \"false\"),\n+    API_ENABLED(\"comment_api_enabled\", Boolean.class, \"true\"),\n \n     PAGE_SIZE(\"comment_page_size\", Integer.class, \"10\"),\n \n\ndiff --git a/src/main/java/run/halo/app/security/filter/AbstractAuthenticationFilter.java b/src/main/java/run/halo/app/security/filter/AbstractAuthenticationFilter.java\n--- a/src/main/java/run/halo/app/security/filter/AbstractAuthenticationFilter.java\n+++ b/src/main/java/run/halo/app/security/filter/AbstractAuthenticationFilter.java\n@@ -40,11 +40,11 @@ public abstract class AbstractAuthenticationFilter extends OncePerRequestFilter\n      */\n     private Map<String, String> tryAuthUrlMethodPatterns = new HashMap<>(2);\n \n-    private final AntPathMatcher antPathMatcher;\n+    protected final AntPathMatcher antPathMatcher;\n \n-    private final HaloProperties haloProperties;\n+    protected final HaloProperties haloProperties;\n \n-    private final OptionService optionService;\n+    protected final OptionService optionService;\n \n     protected AbstractAuthenticationFilter(HaloProperties haloProperties,\n                                            OptionService optionService) {\n\ndiff --git a/src/main/java/run/halo/app/security/filter/ApiAuthenticationFilter.java b/src/main/java/run/halo/app/security/filter/ApiAuthenticationFilter.java\n--- a/src/main/java/run/halo/app/security/filter/ApiAuthenticationFilter.java\n+++ b/src/main/java/run/halo/app/security/filter/ApiAuthenticationFilter.java\n@@ -8,6 +8,7 @@\n import run.halo.app.config.properties.HaloProperties;\n import run.halo.app.exception.AuthenticationException;\n import run.halo.app.exception.ForbiddenException;\n+import run.halo.app.model.properties.CommentProperties;\n import run.halo.app.model.properties.OtherProperties;\n import run.halo.app.service.OptionService;\n \n@@ -77,6 +78,21 @@ protected void doAuthenticate(HttpServletRequest request, HttpServletResponse re\n         filterChain.doFilter(request, response);\n     }\n \n+    @Override\n+    protected boolean shouldNotFilter(HttpServletRequest request) {\n+        boolean result = super.shouldNotFilter(request);\n+\n+        if (antPathMatcher.match(\"/api/content/*/comments\", request.getServletPath())) {\n+            Boolean commentApiEnabled = optionService.getByPropertyOrDefault(CommentProperties.API_ENABLED, Boolean.class, true);\n+            if (!commentApiEnabled) {\n+                // If the comment api is disabled\n+                result = false;\n+            }\n+        }\n+        return result;\n+\n+    }\n+\n     @Override\n     protected String getTokenFromRequest(@NonNull HttpServletRequest request) {\n         Assert.notNull(request, \"Http servlet request must not be null\");",
    "output": "Let comment properties: API_ENABLED work"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/MailService.java b/src/main/java/run/halo/app/service/MailService.java\n--- a/src/main/java/run/halo/app/service/MailService.java\n+++ b/src/main/java/run/halo/app/service/MailService.java\n@@ -10,11 +10,6 @@\n  */\n public interface MailService {\n \n-    /**\n-     * Reload email config.\n-     */\n-    void reloadMailConfig();\n-\n     /**\n      * Send a simple email\n      *\n\ndiff --git a/src/main/java/run/halo/app/service/impl/MailServiceImpl.java b/src/main/java/run/halo/app/service/impl/MailServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/MailServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/MailServiceImpl.java\n@@ -5,9 +5,11 @@\n import freemarker.template.Template;\n import io.github.biezhi.ome.OhMyEmail;\n import lombok.extern.slf4j.Slf4j;\n+import org.springframework.context.ApplicationListener;\n import org.springframework.stereotype.Service;\n import org.springframework.ui.freemarker.FreeMarkerTemplateUtils;\n import org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer;\n+import run.halo.app.event.options.OptionUpdatedEvent;\n import run.halo.app.exception.EmailException;\n import run.halo.app.model.properties.EmailProperties;\n import run.halo.app.service.MailService;\n@@ -25,7 +27,7 @@\n  */\n @Slf4j\n @Service\n-public class MailServiceImpl implements MailService {\n+public class MailServiceImpl implements MailService  {\n \n     private final FreeMarkerConfigurer freeMarker;\n \n@@ -38,18 +40,6 @@ public MailServiceImpl(FreeMarkerConfigurer freeMarker,\n         this.freeMarker = freeMarker;\n         this.optionService = optionService;\n \n-        try {\n-            reloadMailConfig();\n-        } catch (Exception e) {\n-            log.warn(\"You have to configure the email settings correctly before using email service\");\n-        }\n-    }\n-\n-    @Override\n-    public void reloadMailConfig() {\n-        loaded = false;\n-        // Get default properties\n-        loadConfig();\n     }\n \n     /**\n@@ -140,13 +130,9 @@ public void sendAttachMail(String to, String subject, Map<String, Object> conten\n     }\n \n     /**\n-     * Load email config.\n+     * Loads email config.\n      */\n-    private synchronized void loadConfig() {\n-        if (loaded = true) {\n-            return;\n-        }\n-\n+    private void loadConfig() {\n         // Get default properties\n         Properties defaultProperties = OhMyEmail.defaultConfig(log.isDebugEnabled());\n         // Set smtp host\n@@ -157,8 +143,6 @@ private synchronized void loadConfig() {\n         OhMyEmail.config(defaultProperties,\n                 optionService.getByPropertyOfNonNull(EmailProperties.USERNAME).toString(),\n                 optionService.getByPropertyOfNonNull(EmailProperties.PASSWORD).toString());\n-\n-        // Set config loaded with true\n-        loaded = true;\n     }\n+\n }",
    "output": "Remove useless reloadConfig in MailService"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/HaloConfiguration.java b/src/main/java/run/halo/app/config/HaloConfiguration.java\n--- a/src/main/java/run/halo/app/config/HaloConfiguration.java\n+++ b/src/main/java/run/halo/app/config/HaloConfiguration.java\n@@ -112,6 +112,10 @@ public FilterRegistrationBean<ApiAuthenticationFilter> apiAuthenticationFilter(H\n                                                                                    ObjectMapper objectMapper,\n                                                                                    OptionService optionService) {\n         ApiAuthenticationFilter apiFilter = new ApiAuthenticationFilter(haloProperties, optionService);\n+        apiFilter.addExcludeUrlPatterns(\n+                \"/api/content/*/comments\",\n+                \"/api/content/*/comments/*\"\n+        );\n \n         DefaultAuthenticationFailureHandler failureHandler = new DefaultAuthenticationFailureHandler();\n         failureHandler.setProductionEnv(haloProperties.isProductionEnv());",
    "output": "Merge remote-tracking branch 'origin/v1' into v1"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/HaloConfiguration.java b/src/main/java/run/halo/app/config/HaloConfiguration.java\n--- a/src/main/java/run/halo/app/config/HaloConfiguration.java\n+++ b/src/main/java/run/halo/app/config/HaloConfiguration.java\n@@ -112,6 +112,10 @@ public FilterRegistrationBean<ApiAuthenticationFilter> apiAuthenticationFilter(H\n                                                                                    ObjectMapper objectMapper,\n                                                                                    OptionService optionService) {\n         ApiAuthenticationFilter apiFilter = new ApiAuthenticationFilter(haloProperties, optionService);\n+        apiFilter.addExcludeUrlPatterns(\n+                \"/api/content/*/comments\",\n+                \"/api/content/*/comments/*\"\n+        );\n \n         DefaultAuthenticationFailureHandler failureHandler = new DefaultAuthenticationFailureHandler();\n         failureHandler.setProductionEnv(haloProperties.isProductionEnv());",
    "output": "Let comments content api pass"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/security/filter/ContentFilter.java b/src/main/java/run/halo/app/security/filter/ContentFilter.java\n--- a/src/main/java/run/halo/app/security/filter/ContentFilter.java\n+++ b/src/main/java/run/halo/app/security/filter/ContentFilter.java\n@@ -29,6 +29,6 @@ protected String getTokenFromRequest(HttpServletRequest request) {\n     @Override\n     protected void doAuthenticate(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n         // Do nothing\n-        return;\n+        filterChain.doFilter(request, response);\n     }\n }",
    "output": "Fix content filter bug"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/security/filter/AbstractAuthenticationFilter.java b/src/main/java/run/halo/app/security/filter/AbstractAuthenticationFilter.java\n--- a/src/main/java/run/halo/app/security/filter/AbstractAuthenticationFilter.java\n+++ b/src/main/java/run/halo/app/security/filter/AbstractAuthenticationFilter.java\n@@ -8,6 +8,7 @@\n import run.halo.app.config.properties.HaloProperties;\n import run.halo.app.exception.NotInstallException;\n import run.halo.app.model.properties.PrimaryProperties;\n+import run.halo.app.security.context.SecurityContextHolder;\n import run.halo.app.security.handler.AuthenticationFailureHandler;\n import run.halo.app.security.handler.DefaultAuthenticationFailureHandler;\n import run.halo.app.service.OptionService;\n@@ -75,6 +76,7 @@ protected boolean shouldNotFilter(HttpServletRequest request) {\n      * @param request http servlet request must not be null.\n      * @return true if the request should skip authentication failure; false otherwise\n      */\n+    @Deprecated\n     protected boolean shouldSkipAuthenticateFailure(@NonNull HttpServletRequest request) {\n         Assert.notNull(request, \"Http servlet request must not be null\");\n \n@@ -126,6 +128,7 @@ public Set<String> getExcludeUrlPatterns() {\n      * @param url    url must not be blank\n      * @param method method must not be blank\n      */\n+    @Deprecated\n     public void addTryAuthUrlMethodPattern(@NonNull String url, @NonNull String method) {\n         Assert.hasText(url, \"Try authenticating url must not be blank\");\n         Assert.hasText(method, \"Try authenticating method must not be blank\");\n@@ -176,5 +179,19 @@ protected void doFilterInternal(HttpServletRequest request, HttpServletResponse\n             getFailureHandler().onFailure(request, response, new NotInstallException(\"The blog has not been initialized yet!\"));\n             return;\n         }\n+\n+        if (shouldNotFilter(request)) {\n+            filterChain.doFilter(request, response);\n+            return;\n+        }\n+\n+        try {\n+            // Do authenticate\n+            doAuthenticate(request, response, filterChain);\n+        } finally {\n+            SecurityContextHolder.clearContext();\n+        }\n     }\n+\n+    protected abstract void doAuthenticate(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException;\n }\n\ndiff --git a/src/main/java/run/halo/app/security/filter/AdminAuthenticationFilter.java b/src/main/java/run/halo/app/security/filter/AdminAuthenticationFilter.java\n--- a/src/main/java/run/halo/app/security/filter/AdminAuthenticationFilter.java\n+++ b/src/main/java/run/halo/app/security/filter/AdminAuthenticationFilter.java\n@@ -77,47 +77,45 @@ public AdminAuthenticationFilter(StringCacheStore cacheStore,\n     }\n \n     @Override\n-    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n+    protected void doAuthenticate(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n \n-        super.doFilterInternal(request, response, filterChain);\n-\n-        if (haloProperties.isAuthEnabled()) {\n-            // Get token from request\n-            String token = getTokenFromRequest(request);\n+        if (!haloProperties.isAuthEnabled()) {\n+            // Set security\n+            userService.getCurrentUser().ifPresent(user ->\n+                    SecurityContextHolder.setContext(new SecurityContextImpl(new AuthenticationImpl(new UserDetail(user)))));\n \n-            if (StringUtils.isBlank(token)) {\n-                if (!shouldSkipAuthenticateFailure(request)) {\n-                    getFailureHandler().onFailure(request, response, new AuthenticationException(\"You have to login before accessing admin api\"));\n-                    return;\n-                }\n-            } else {\n-                // Get user id from cache\n-                Optional<Integer> optionalUserId = cacheStore.getAny(SecurityUtils.buildTokenAccessKey(token), Integer.class);\n+            // Do filter\n+            filterChain.doFilter(request, response);\n+            return;\n+        }\n \n-                if (!optionalUserId.isPresent()) {\n-                    getFailureHandler().onFailure(request, response, new AuthenticationException(\"The token has been expired or not exist\").setErrorData(token));\n-                    return;\n-                }\n+        // Get token from request\n+        String token = getTokenFromRequest(request);\n \n-                // Get the user\n-                User user = userService.getById(optionalUserId.get());\n+        if (StringUtils.isBlank(token)) {\n+            getFailureHandler().onFailure(request, response, new AuthenticationException(\"You have to login before accessing admin api\"));\n+            return;\n+        }\n \n-                // Build user detail\n-                UserDetail userDetail = new UserDetail(user);\n+        // Get user id from cache\n+        Optional<Integer> optionalUserId = cacheStore.getAny(SecurityUtils.buildTokenAccessKey(token), Integer.class);\n \n-                // Set security\n-                SecurityContextHolder.setContext(new SecurityContextImpl(new AuthenticationImpl(userDetail)));\n-            }\n-        } else {\n-            // Set security\n-            userService.getCurrentUser().ifPresent(user ->\n-                    SecurityContextHolder.setContext(new SecurityContextImpl(new AuthenticationImpl(new UserDetail(user)))));\n+        if (!optionalUserId.isPresent()) {\n+            getFailureHandler().onFailure(request, response, new AuthenticationException(\"The token has been expired or not exist\").setErrorData(token));\n+            return;\n         }\n \n-        filterChain.doFilter(request, response);\n+        // Get the user\n+        User user = userService.getById(optionalUserId.get());\n \n-        // Clear context\n-        SecurityContextHolder.clearContext();\n+        // Build user detail\n+        UserDetail userDetail = new UserDetail(user);\n+\n+        // Set security\n+        SecurityContextHolder.setContext(new SecurityContextImpl(new AuthenticationImpl(userDetail)));\n+\n+        // Do filter\n+        filterChain.doFilter(request, response);\n     }\n \n     @Override\n\ndiff --git a/src/main/java/run/halo/app/security/filter/ApiAuthenticationFilter.java b/src/main/java/run/halo/app/security/filter/ApiAuthenticationFilter.java\n--- a/src/main/java/run/halo/app/security/filter/ApiAuthenticationFilter.java\n+++ b/src/main/java/run/halo/app/security/filter/ApiAuthenticationFilter.java\n@@ -39,9 +39,7 @@ public ApiAuthenticationFilter(HaloProperties haloProperties,\n     }\n \n     @Override\n-    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n-\n-        super.doFilterInternal(request, response, filterChain);\n+    protected void doAuthenticate(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n \n         // Get token\n         String token = getTokenFromRequest(request);",
    "output": "Refactor authentication filter again"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java b/src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java\n@@ -7,6 +7,7 @@\n import org.springframework.data.domain.Pageable;\n import org.springframework.data.domain.Sort;\n import org.springframework.lang.NonNull;\n+import org.springframework.lang.Nullable;\n import org.springframework.util.Assert;\n import org.springframework.util.CollectionUtils;\n import run.halo.app.exception.AlreadyExistsException;\n@@ -17,7 +18,9 @@\n import run.halo.app.model.dto.post.BasePostSimpleDTO;\n import run.halo.app.model.entity.BasePost;\n import run.halo.app.model.enums.PostStatus;\n+import run.halo.app.model.properties.PostProperties;\n import run.halo.app.repository.base.BasePostRepository;\n+import run.halo.app.service.OptionService;\n import run.halo.app.service.base.AbstractCrudService;\n import run.halo.app.service.base.BasePostService;\n import run.halo.app.utils.DateUtils;\n@@ -44,9 +47,13 @@ public abstract class BasePostServiceImpl<POST extends BasePost> extends Abstrac\n \n     private final BasePostRepository<POST> basePostRepository;\n \n-    public BasePostServiceImpl(BasePostRepository<POST> basePostRepository) {\n+    private final OptionService optionService;\n+\n+    public BasePostServiceImpl(BasePostRepository<POST> basePostRepository,\n+                               OptionService optionService) {\n         super(basePostRepository);\n         this.basePostRepository = basePostRepository;\n+        this.optionService = optionService;\n     }\n \n     @Override\n@@ -264,7 +271,14 @@ public Page<BasePostMinimalDTO> convertToMinimal(Page<POST> postPage) {\n     public BasePostSimpleDTO convertToSimple(POST post) {\n         Assert.notNull(post, \"Post must not be null\");\n \n-        return new BasePostSimpleDTO().convertFrom(post);\n+        BasePostSimpleDTO basePostSimpleDTO = new BasePostSimpleDTO().convertFrom(post);\n+\n+        // Set summary\n+        if (StringUtils.isBlank(basePostSimpleDTO.getSummary())) {\n+            basePostSimpleDTO.setSummary(convertToSummary(post.getOriginalContent()));\n+        }\n+\n+        return basePostSimpleDTO;\n     }\n \n     @Override\n@@ -331,4 +345,17 @@ protected void urlMustNotExist(@NonNull POST post) {\n             throw new AlreadyExistsException(\"The post url \" + post.getUrl() + \" has been exist\");\n         }\n     }\n+\n+    @NonNull\n+    protected String convertToSummary(@Nullable String markdownContent) {\n+        // Render text content\n+        String textContent = MarkdownUtils.renderText(markdownContent);\n+\n+        // Get summary length\n+        Integer summaryLength = optionService.getByPropertyOrDefault(PostProperties.SUMMARY_LENGTH, Integer.class, 150);\n+\n+        // Set summary\n+        return StringUtils.substring(textContent, 0, summaryLength);\n+    }\n+\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n@@ -67,8 +67,9 @@ public PostServiceImpl(PostRepository postRepository,\n                            PostTagService postTagService,\n                            PostCategoryService postCategoryService,\n                            PostCommentService postCommentService,\n-                           ApplicationEventPublisher eventPublisher) {\n-        super(postRepository);\n+                           ApplicationEventPublisher eventPublisher,\n+                           OptionService optionService) {\n+        super(postRepository, optionService);\n         this.postRepository = postRepository;\n         this.tagService = tagService;\n         this.categoryService = categoryService;\n@@ -333,6 +334,11 @@ public Page<PostListVO> convertToListVo(Page<Post> postPage) {\n         return postPage.map(post -> {\n             PostListVO postListVO = new PostListVO().convertFrom(post);\n \n+            if (StringUtils.isBlank(postListVO.getSummary())) {\n+                // Set summary\n+                postListVO.setSummary(convertToSummary(post.getOriginalContent()));\n+            }\n+\n             Optional.ofNullable(tagListMap.get(post.getId())).orElseGet(LinkedList::new);\n \n             // Set tags\n\ndiff --git a/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java b/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n@@ -10,6 +10,7 @@\n import run.halo.app.model.enums.PostStatus;\n import run.halo.app.model.vo.SheetListVO;\n import run.halo.app.repository.SheetRepository;\n+import run.halo.app.service.OptionService;\n import run.halo.app.service.SheetCommentService;\n import run.halo.app.service.SheetService;\n import run.halo.app.utils.ServiceUtils;\n@@ -35,8 +36,9 @@ public class SheetServiceImpl extends BasePostServiceImpl<Sheet> implements Shee\n \n     public SheetServiceImpl(SheetRepository sheetRepository,\n                             ApplicationEventPublisher eventPublisher,\n-                            SheetCommentService sheetCommentService) {\n-        super(sheetRepository);\n+                            SheetCommentService sheetCommentService,\n+                            OptionService optionService) {\n+        super(sheetRepository, optionService);\n         this.sheetRepository = sheetRepository;\n         this.eventPublisher = eventPublisher;\n         this.sheetCommentService = sheetCommentService;\n\ndiff --git a/src/main/java/run/halo/app/utils/MarkdownUtils.java b/src/main/java/run/halo/app/utils/MarkdownUtils.java\n--- a/src/main/java/run/halo/app/utils/MarkdownUtils.java\n+++ b/src/main/java/run/halo/app/utils/MarkdownUtils.java\n@@ -1,13 +1,17 @@\n package run.halo.app.utils;\n \n-import run.halo.app.model.support.HaloConst;\n+import org.apache.commons.lang3.StringUtils;\n import org.commonmark.Extension;\n import org.commonmark.ext.front.matter.YamlFrontMatterExtension;\n import org.commonmark.ext.front.matter.YamlFrontMatterVisitor;\n import org.commonmark.ext.gfm.tables.TablesExtension;\n import org.commonmark.node.Node;\n import org.commonmark.parser.Parser;\n import org.commonmark.renderer.html.HtmlRenderer;\n+import org.commonmark.renderer.text.TextContentRenderer;\n+import org.springframework.lang.NonNull;\n+import org.springframework.lang.Nullable;\n+import run.halo.app.model.support.HaloConst;\n \n import java.util.Collections;\n import java.util.List;\n@@ -42,6 +46,11 @@ public class MarkdownUtils {\n      */\n     private static final HtmlRenderer RENDERER = HtmlRenderer.builder().extensions(EXTENSIONS_YAML).extensions(EXTENSIONS_TABLE).build();\n \n+    /**\n+     * Render text content\n+     */\n+    private static final TextContentRenderer TEXT_CONTENT_RENDERER = TextContentRenderer.builder().extensions(EXTENSIONS_YAML).extensions(EXTENSIONS_TABLE).build();\n+\n     /**\n      * Render Markdown content\n      *\n@@ -67,6 +76,21 @@ public static String renderMarkdown(String content) {\n         return renderContent;\n     }\n \n+    /**\n+     * Render text content.\n+     *\n+     * @param markdownContent markdown content\n+     * @return text content or empty string if markdown content is blank\n+     */\n+    @NonNull\n+    public static String renderText(@Nullable String markdownContent) {\n+        if (StringUtils.isBlank(markdownContent)) {\n+            return \"\";\n+        }\n+\n+        return TEXT_CONTENT_RENDERER.render(PARSER.parse(markdownContent));\n+    }\n+\n     /**\n      * Get front-matter\n      *",
    "output": "Return post summary for listing"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/security/filter/ApiAuthenticationFilter.java b/src/main/java/run/halo/app/security/filter/ApiAuthenticationFilter.java\n--- a/src/main/java/run/halo/app/security/filter/ApiAuthenticationFilter.java\n+++ b/src/main/java/run/halo/app/security/filter/ApiAuthenticationFilter.java\n@@ -8,7 +8,9 @@\n import run.halo.app.config.properties.HaloProperties;\n import run.halo.app.exception.AuthenticationException;\n import run.halo.app.exception.ForbiddenException;\n+import run.halo.app.exception.NotInstallException;\n import run.halo.app.model.properties.OtherProperties;\n+import run.halo.app.model.properties.PrimaryProperties;\n import run.halo.app.service.OptionService;\n \n import javax.servlet.FilterChain;\n@@ -40,6 +42,15 @@ public ApiAuthenticationFilter(HaloProperties haloProperties,\n \n     @Override\n     protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n+        // Check whether the blog is installed or not\n+        Boolean isInstalled = optionService.getByPropertyOrDefault(PrimaryProperties.IS_INSTALLED, Boolean.class, false);\n+\n+        if (!isInstalled) {\n+            // If not installed\n+            getFailureHandler().onFailure(request, response, new NotInstallException(\"The blog has not been initialized yet!\"));\n+            return;\n+        }\n+\n         // Get token\n         String token = getTokenFromRequest(request);\n ",
    "output": "Add installation validation"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/HaloConfiguration.java b/src/main/java/run/halo/app/config/HaloConfiguration.java\n--- a/src/main/java/run/halo/app/config/HaloConfiguration.java\n+++ b/src/main/java/run/halo/app/config/HaloConfiguration.java\n@@ -102,8 +102,10 @@ public FilterRegistrationBean<LogFilter> logFilter() {\n     }\n \n     @Bean\n-    public FilterRegistrationBean<ApiAuthenticationFilter> apiAuthenticationFilter(HaloProperties haloProperties, ObjectMapper objectMapper) {\n-        ApiAuthenticationFilter apiFilter = new ApiAuthenticationFilter(haloProperties);\n+    public FilterRegistrationBean<ApiAuthenticationFilter> apiAuthenticationFilter(HaloProperties haloProperties,\n+                                                                                   ObjectMapper objectMapper,\n+                                                                                   OptionService optionService) {\n+        ApiAuthenticationFilter apiFilter = new ApiAuthenticationFilter(haloProperties, optionService);\n \n         DefaultAuthenticationFailureHandler failureHandler = new DefaultAuthenticationFailureHandler();\n         failureHandler.setProductionEnv(haloProperties.isProductionEnv());\n\ndiff --git a/src/main/java/run/halo/app/config/SwaggerConfiguration.java b/src/main/java/run/halo/app/config/SwaggerConfiguration.java\n--- a/src/main/java/run/halo/app/config/SwaggerConfiguration.java\n+++ b/src/main/java/run/halo/app/config/SwaggerConfiguration.java\n@@ -8,13 +8,13 @@\n import org.springframework.core.Ordered;\n import org.springframework.data.domain.Pageable;\n import org.springframework.data.domain.Sort;\n-import org.springframework.http.HttpHeaders;\n import org.springframework.lang.NonNull;\n import org.springframework.util.Assert;\n import org.springframework.web.bind.annotation.RequestMethod;\n import run.halo.app.config.properties.HaloProperties;\n import run.halo.app.model.entity.User;\n import run.halo.app.security.filter.AdminAuthenticationFilter;\n+import run.halo.app.security.filter.ApiAuthenticationFilter;\n import run.halo.app.security.support.UserDetail;\n import springfox.documentation.builders.*;\n import springfox.documentation.schema.AlternateTypeRule;\n@@ -34,7 +34,6 @@\n import java.util.List;\n \n import static run.halo.app.model.support.HaloConst.HALO_VERSION;\n-import static run.halo.app.model.support.HaloConst.TOKEN_HEADER;\n import static springfox.documentation.schema.AlternateTypeRules.newRule;\n \n /**\n@@ -140,8 +139,8 @@ private List<SecurityContext> adminSecurityContext() {\n \n     private List<ApiKey> portalApiKeys() {\n         return Arrays.asList(\n-                new ApiKey(\"Token from header\", HttpHeaders.AUTHORIZATION, In.HEADER.name()),\n-                new ApiKey(\"Token from query\", \"token\", In.QUERY.name())\n+                new ApiKey(\"Token from header\", ApiAuthenticationFilter.API_TOKEN_HEADER_NAME, In.HEADER.name()),\n+                new ApiKey(\"Token from query\", ApiAuthenticationFilter.API_TOKEN_QUERY_NAME, In.QUERY.name())\n         );\n     }\n \n\ndiff --git a/src/main/java/run/halo/app/model/support/HaloConst.java b/src/main/java/run/halo/app/model/support/HaloConst.java\n--- a/src/main/java/run/halo/app/model/support/HaloConst.java\n+++ b/src/main/java/run/halo/app/model/support/HaloConst.java\n@@ -25,11 +25,6 @@ public class HaloConst {\n      */\n     public static final String HALO_VERSION = \"1.0.0\";\n \n-    /**\n-     * Token of header param\n-     */\n-    public static final String TOKEN_HEADER = \"token\";\n-\n     /**\n      * Suffix of freemarker template file\n      */\n\ndiff --git a/src/main/java/run/halo/app/security/filter/AbstractAuthenticationFilter.java b/src/main/java/run/halo/app/security/filter/AbstractAuthenticationFilter.java\n--- a/src/main/java/run/halo/app/security/filter/AbstractAuthenticationFilter.java\n+++ b/src/main/java/run/halo/app/security/filter/AbstractAuthenticationFilter.java\n@@ -1,6 +1,7 @@\n package run.halo.app.security.filter;\n \n import org.springframework.lang.NonNull;\n+import org.springframework.lang.Nullable;\n import org.springframework.util.AntPathMatcher;\n import org.springframework.util.Assert;\n import org.springframework.web.filter.OncePerRequestFilter;\n@@ -41,6 +42,15 @@ protected AbstractAuthenticationFilter(HaloProperties haloProperties) {\n         antPathMatcher = new AntPathMatcher();\n     }\n \n+    /**\n+     * Gets token from request.\n+     *\n+     * @param request http servlet request must not be null\n+     * @return token or null\n+     */\n+    @Nullable\n+    protected abstract String getTokenFromRequest(@NonNull HttpServletRequest request);\n+\n     @Override\n     protected boolean shouldNotFilter(HttpServletRequest request) {\n         Assert.notNull(request, \"Http servlet request must not be null\");\n\ndiff --git a/src/main/java/run/halo/app/security/filter/AdminAuthenticationFilter.java b/src/main/java/run/halo/app/security/filter/AdminAuthenticationFilter.java\n--- a/src/main/java/run/halo/app/security/filter/AdminAuthenticationFilter.java\n+++ b/src/main/java/run/halo/app/security/filter/AdminAuthenticationFilter.java\n@@ -137,14 +137,8 @@ protected void doFilterInternal(HttpServletRequest request, HttpServletResponse\n         getFailureHandler().onFailure(request, response, new AuthenticationException(\"You have to login before accessing admin api\"));\n     }\n \n-    /**\n-     * Gets token from request.\n-     *\n-     * @param request http servlet request must not be null\n-     * @return token or null\n-     */\n-    @Nullable\n-    private String getTokenFromRequest(@NonNull HttpServletRequest request) {\n+    @Override\n+    protected String getTokenFromRequest(@NonNull HttpServletRequest request) {\n         Assert.notNull(request, \"Http servlet request must not be null\");\n \n         // Get from header\n\ndiff --git a/src/main/java/run/halo/app/security/filter/ApiAuthenticationFilter.java b/src/main/java/run/halo/app/security/filter/ApiAuthenticationFilter.java\n--- a/src/main/java/run/halo/app/security/filter/ApiAuthenticationFilter.java\n+++ b/src/main/java/run/halo/app/security/filter/ApiAuthenticationFilter.java\n@@ -1,33 +1,97 @@\n package run.halo.app.security.filter;\n \n-import org.springframework.util.AntPathMatcher;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.lang.NonNull;\n+import org.springframework.util.Assert;\n import run.halo.app.config.properties.HaloProperties;\n+import run.halo.app.exception.AuthenticationException;\n+import run.halo.app.exception.ForbiddenException;\n+import run.halo.app.model.properties.OtherProperties;\n+import run.halo.app.service.OptionService;\n \n import javax.servlet.FilterChain;\n import javax.servlet.ServletException;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n import java.io.IOException;\n-import java.util.HashSet;\n-import java.util.Set;\n+import java.util.Optional;\n \n /**\n  * Api authentication Filter\n  *\n  * @author johnniang\n  */\n+@Slf4j\n public class ApiAuthenticationFilter extends AbstractAuthenticationFilter {\n \n-    private final AntPathMatcher antPathMatcher;\n+    public final static String API_TOKEN_HEADER_NAME = \"API-\" + HttpHeaders.AUTHORIZATION;\n \n-    public ApiAuthenticationFilter(HaloProperties haloProperties) {\n+    public final static String API_TOKEN_QUERY_NAME = \"apiToken\";\n+\n+    private final OptionService optionService;\n+\n+    public ApiAuthenticationFilter(HaloProperties haloProperties,\n+                                   OptionService optionService) {\n         super(haloProperties);\n-        antPathMatcher = new AntPathMatcher();\n+        this.optionService = optionService;\n     }\n \n     @Override\n     protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n-        // TODO Handle authentication\n+        // Get token\n+        String token = getTokenFromRequest(request);\n+\n+        if (StringUtils.isBlank(token)) {\n+            // If the token is missing\n+            getFailureHandler().onFailure(request, response, new AuthenticationException(\"Missing API token\"));\n+            return;\n+        }\n+\n+        // Get api_enable from option\n+        Boolean apiEnabled = optionService.getByPropertyOrDefault(OtherProperties.API_ENABLED, Boolean.class, false);\n+\n+        if (!apiEnabled) {\n+            getFailureHandler().onFailure(request, response, new ForbiddenException(\"API has been disabled by blogger currently\"));\n+            return;\n+        }\n+\n+        // Get token from option\n+        Optional<String> optionalToken = optionService.getByProperty(OtherProperties.API_TOKEN, String.class);\n+\n+        if (!optionalToken.isPresent()) {\n+            // If the token is not set\n+            getFailureHandler().onFailure(request, response, new AuthenticationException(\"API Token hasn't been set by blogger\"));\n+            return;\n+        }\n+\n+        if (!StringUtils.equals(token, optionalToken.get())) {\n+            // If the token is mismatch\n+            getFailureHandler().onFailure(request, response, new AuthenticationException(\"Token is mismatch\"));\n+            return;\n+        }\n+\n+        // Do filter\n         filterChain.doFilter(request, response);\n     }\n+\n+    @Override\n+    protected String getTokenFromRequest(@NonNull HttpServletRequest request) {\n+        Assert.notNull(request, \"Http servlet request must not be null\");\n+\n+        // Get from header\n+        String token = request.getHeader(API_TOKEN_HEADER_NAME);\n+\n+        // Get from param\n+        if (StringUtils.isBlank(token)) {\n+            token = request.getParameter(API_TOKEN_QUERY_NAME);\n+\n+            log.debug(\"Got token from parameter: [{}: {}]\", API_TOKEN_QUERY_NAME, token);\n+        } else {\n+            log.debug(\"Got token from header: [{}: {}]\", API_TOKEN_HEADER_NAME, token);\n+        }\n+\n+        return token;\n+    }\n }",
    "output": "Complete api authentication"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/LogController.java b/src/main/java/run/halo/app/controller/admin/api/LogController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/LogController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/LogController.java\n@@ -1,15 +1,21 @@\n package run.halo.app.controller.admin.api;\n \n import io.swagger.annotations.ApiOperation;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.web.PageableDefault;\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestParam;\n import org.springframework.web.bind.annotation.RestController;\n import run.halo.app.model.dto.LogDTO;\n+import run.halo.app.model.entity.Log;\n import run.halo.app.service.LogService;\n \n import java.util.List;\n \n+import static org.springframework.data.domain.Sort.Direction.DESC;\n+\n /**\n  * Log controller.\n  *\n@@ -38,6 +44,12 @@ public List<LogDTO> pageLatest(@RequestParam(name = \"top\", defaultValue = \"10\")\n         return logService.pageLatest(top).getContent();\n     }\n \n+    @GetMapping\n+    public Page<LogDTO> pageBy(@PageableDefault(sort = \"updateTime\", direction = DESC) Pageable pageable){\n+        Page<Log> logPage = logService.listAll(pageable);\n+        return logPage.map(log -> new LogDTO().convertFrom(log));\n+    }\n+\n     /**\n      * Clear all logs.\n      */",
    "output": "Create pageBy api for log."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java b/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n--- a/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n+++ b/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n@@ -79,7 +79,8 @@ public void addArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers)\n     public void addResourceHandlers(ResourceHandlerRegistry registry) {\n         String workDir = FILE_PROTOCOL + haloProperties.getWorkDir();\n         registry.addResourceHandler(\"/static/**\")\n-                .addResourceLocations(\"classpath:/static/\");\n+                .addResourceLocations(\"classpath:/static/\")\n+                .addResourceLocations(workDir + \"static/\");\n         registry.addResourceHandler(\"/**\")\n                 .addResourceLocations(workDir + \"templates/themes/\")\n                 .addResourceLocations(workDir + \"templates/admin/\")\n\ndiff --git a/src/main/java/run/halo/app/listener/StartedListener.java b/src/main/java/run/halo/app/listener/StartedListener.java\n--- a/src/main/java/run/halo/app/listener/StartedListener.java\n+++ b/src/main/java/run/halo/app/listener/StartedListener.java\n@@ -52,38 +52,8 @@ public void onApplicationEvent(ApplicationStartedEvent event) {\n         // save halo version to database\n         this.printStartInfo();\n         this.initThemes();\n-\n-        // Init user in development environment\n-//        if (!haloProperties.isProductionEnv()) {\n-//            initAnTestUserIfAbsent();\n-//        }\n     }\n \n-//    /**\n-//     * Initialize an test user if absent\n-//     */\n-//    private void initAnTestUserIfAbsent() {\n-//        // Create an user if absent\n-//        List<User> users = userService.listAll();\n-//\n-//        if (users.isEmpty()) {\n-//            UserParam userParam = new UserParam();\n-//            userParam.setUsername(\"test\");\n-//            userParam.setNickname(\"developer\");\n-//            userParam.setEmail(\"test@test.com\");\n-//            userParam.setPassword(\"opentest\");\n-//\n-//            log.debug(\"Initializing a test user: [{}]\", userParam);\n-//\n-//            // Validate the user param\n-//            ValidationUtils.validate(userParam, CreateCheck.class);\n-//\n-//            User testUser = userService.createBy(userParam);\n-//\n-//            log.debug(\"Initialized a test user: [{}]\", testUser);\n-//        }\n-//    }\n-\n     private void printStartInfo() {\n         String blogUrl = optionService.getBlogBaseUrl();\n \n@@ -102,7 +72,7 @@ private void initThemes() {\n         // Whether the blog has initialized\n         Boolean isInstalled = optionService.getByPropertyOrDefault(PrimaryProperties.IS_INSTALLED, Boolean.class, false);\n \n-        if (isInstalled) {\n+        if (haloProperties.isProductionEnv() && isInstalled) {\n             // Skip\n             return;\n         }",
    "output": "Add additional static location"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/ContentSheetController.java b/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n@@ -1,6 +1,5 @@\n package run.halo.app.controller.content;\n \n-import cn.hutool.core.util.StrUtil;\n import org.springframework.stereotype.Controller;\n import org.springframework.ui.Model;\n import org.springframework.web.bind.annotation.GetMapping;\n@@ -13,6 +12,8 @@\n import run.halo.app.service.ThemeService;\n \n /**\n+ * Content sheet controller.\n+ *\n  * @author ryanwang\n  * @date : 2019-03-21\n  */\n@@ -68,10 +69,8 @@ public String sheet(@PathVariable(value = \"url\") String url,\n         model.addAttribute(\"post\", sheetService.convertToDetail(sheet));\n         model.addAttribute(\"is_sheet\", true);\n \n-        if (StrUtil.isNotEmpty(sheet.getTemplate())) {\n-            if (themeService.templateExists(ThemeService.CUSTOM_SHEET_PREFIX + sheet.getTemplate() + HaloConst.SUFFIX_FTL)) {\n-                return themeService.render(ThemeService.CUSTOM_SHEET_PREFIX + sheet.getTemplate());\n-            }\n+        if (themeService.templateExists(ThemeService.CUSTOM_SHEET_PREFIX + sheet.getTemplate() + HaloConst.SUFFIX_FTL)) {\n+            return themeService.render(ThemeService.CUSTOM_SHEET_PREFIX + sheet.getTemplate());\n         }\n         return themeService.render(\"sheet\");\n     }\n\ndiff --git a/src/main/java/run/halo/app/service/ThemeService.java b/src/main/java/run/halo/app/service/ThemeService.java\n--- a/src/main/java/run/halo/app/service/ThemeService.java\n+++ b/src/main/java/run/halo/app/service/ThemeService.java\n@@ -1,6 +1,7 @@\n package run.halo.app.service;\n \n import org.springframework.lang.NonNull;\n+import org.springframework.lang.Nullable;\n import org.springframework.web.multipart.MultipartFile;\n import run.halo.app.handler.theme.config.support.Group;\n import run.halo.app.handler.theme.config.support.ThemeProperty;\n@@ -82,11 +83,11 @@ public interface ThemeService {\n     /**\n      * Get theme property by theme id.\n      *\n-     * @param themeId must not be blank\n+     * @param themeId theme id\n      * @return a optional theme property\n      */\n     @NonNull\n-    Optional<ThemeProperty> getThemeBy(@NonNull String themeId);\n+    Optional<ThemeProperty> getThemeBy(@Nullable String themeId);\n \n     /**\n      * Gets all themes\n@@ -126,15 +127,15 @@ public interface ThemeService {\n      * @param template template must not be blank\n      * @return boolean\n      */\n-    boolean templateExists(@NonNull String template);\n+    boolean templateExists(@Nullable String template);\n \n     /**\n      * Checks whether theme exists under template path\n      *\n-     * @param themeId theme name\n+     * @param themeId theme id\n      * @return boolean\n      */\n-    boolean themeExists(@NonNull String themeId);\n+    boolean themeExists(@Nullable String themeId);\n \n     /**\n      * Gets theme base path.\n\ndiff --git a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n@@ -105,7 +105,9 @@ public ThemeProperty getThemeOfNonNullBy(String themeId) {\n \n     @Override\n     public Optional<ThemeProperty> getThemeBy(String themeId) {\n-        Assert.hasText(themeId, \"Theme id must not be blank\");\n+        if (StringUtils.isBlank(themeId)) {\n+            return Optional.empty();\n+        }\n \n         // Get all themes\n         Set<ThemeProperty> themes = getThemes();\n@@ -181,7 +183,9 @@ public Set<String> listCustomTemplates(String themeId) {\n \n     @Override\n     public boolean templateExists(String template) {\n-        Assert.hasText(template, \"Template must not be blank\");\n+        if (StringUtils.isBlank(template)) {\n+            return false;\n+        }\n \n         // Resolve template path\n         Path templatePath = Paths.get(getActivatedTheme().getThemePath(), template);\n@@ -507,7 +511,7 @@ private Path createTempPath() throws IOException {\n      */\n     private void setActivatedTheme(@Nullable ThemeProperty activatedTheme) {\n         this.activatedTheme = activatedTheme;\n-        this.activatedThemeId = activatedTheme.getId();\n+        this.activatedThemeId = Optional.ofNullable(activatedTheme).map(ThemeProperty::getId).orElse(null);\n     }\n \n     /**",
    "output": "Refactor some theme services"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n@@ -7,6 +7,7 @@\n import org.springframework.util.Assert;\n import run.halo.app.cache.StringCacheStore;\n import run.halo.app.exception.BadRequestException;\n+import run.halo.app.exception.NotFoundException;\n import run.halo.app.model.dto.StatisticDTO;\n import run.halo.app.model.entity.User;\n import run.halo.app.model.enums.CommentStatus;\n@@ -78,14 +79,25 @@ public AuthToken authenticate(LoginParam loginParam) {\n         Assert.notNull(loginParam, \"Login param must not be null\");\n \n         String username = loginParam.getUsername();\n-        User user = Validator.isEmail(username) ?\n-                userService.getByEmailOfNonNull(username) : userService.getByUsernameOfNonNull(username);\n+\n+        String mismatchTip = \"用户名或者密码不正确\";\n+\n+        final User user;\n+\n+        try {\n+            // Get user by username or email\n+            user = Validator.isEmail(username) ?\n+                    userService.getByEmailOfNonNull(username) : userService.getByUsernameOfNonNull(username);\n+        } catch (NotFoundException e) {\n+            log.error(\"Failed to find user by name: \" + username, e);\n+            throw new BadRequestException(mismatchTip);\n+        }\n \n         userService.mustNotExpire(user);\n \n         if (!userService.passwordMatch(user, loginParam.getPassword())) {\n             // If the password is mismatch\n-            throw new BadRequestException(\"用户名或者密码不正确\");\n+            throw new BadRequestException(mismatchTip);\n         }\n \n         if (SecurityContextHolder.getContext().isAuthenticated()) {",
    "output": "Return same error if username is not found"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/ContentSheetController.java b/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n@@ -70,7 +70,7 @@ public String sheet(@PathVariable(value = \"url\") String url,\n \n         if (StrUtil.isNotEmpty(sheet.getTemplate())) {\n             if (themeService.templateExists(ThemeService.CUSTOM_SHEET_PREFIX + sheet.getTemplate() + HaloConst.SUFFIX_FTL)) {\n-                return themeService.render(sheet.getTemplate());\n+                return themeService.render(ThemeService.CUSTOM_SHEET_PREFIX + sheet.getTemplate());\n             }\n         }\n         return themeService.render(\"sheet\");",
    "output": "Fixed sheet render error."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/ContentSheetController.java b/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n@@ -69,7 +69,7 @@ public String sheet(@PathVariable(value = \"url\") String url,\n         model.addAttribute(\"is_sheet\", true);\n \n         if (StrUtil.isNotEmpty(sheet.getTemplate())) {\n-            if (themeService.templateExists(sheet.getTemplate() + HaloConst.SUFFIX_FTL)) {\n+            if (themeService.templateExists(ThemeService.CUSTOM_SHEET_PREFIX + sheet.getTemplate() + HaloConst.SUFFIX_FTL)) {\n                 return themeService.render(sheet.getTemplate());\n             }\n         }",
    "output": "Fixed sheet render error."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/AdminController.java b/src/main/java/run/halo/app/controller/admin/api/AdminController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/AdminController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/AdminController.java\n@@ -10,6 +10,10 @@\n import run.halo.app.service.AdminService;\n \n import javax.validation.Valid;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.RuntimeMXBean;\n+import java.util.HashMap;\n+import java.util.Map;\n \n /**\n  * Admin controller.\n@@ -39,6 +43,15 @@ public StatisticDTO getCount() {\n         return adminService.getCount();\n     }\n \n+    @GetMapping(\"environments\")\n+    @ApiOperation(\"Gets environments info\")\n+    public Map<String, Object> getEnvironments() {\n+        Map<String, Object> result = new HashMap<>();\n+        RuntimeMXBean runtimeMXBean = ManagementFactory.getRuntimeMXBean();\n+        result.put(\"startTime\", runtimeMXBean.getStartTime());\n+        return result;\n+    }\n+\n     @PostMapping(\"login\")\n     @ApiOperation(\"Login\")\n     @CacheLock(autoDelete = false)\n\ndiff --git a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n@@ -85,7 +85,7 @@ public AuthToken authenticate(LoginParam loginParam) {\n \n         if (!userService.passwordMatch(user, loginParam.getPassword())) {\n             // If the password is mismatch\n-            throw new BadRequestException(\"Username or password is incorrect\");\n+            throw new BadRequestException(\"用户名或者密码不正确\");\n         }\n \n         if (SecurityContextHolder.getContext().isAuthenticated()) {",
    "output": "Create getEnvironments api."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/PostCommentController.java b/src/main/java/run/halo/app/controller/admin/api/PostCommentController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/PostCommentController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/PostCommentController.java\n@@ -8,8 +8,8 @@\n import run.halo.app.model.dto.BaseCommentDTO;\n import run.halo.app.model.entity.PostComment;\n import run.halo.app.model.enums.CommentStatus;\n-import run.halo.app.model.params.PostCommentParam;\n import run.halo.app.model.params.CommentQuery;\n+import run.halo.app.model.params.PostCommentParam;\n import run.halo.app.model.vo.PostCommentWithPostVO;\n import run.halo.app.service.PostCommentService;\n \n@@ -48,6 +48,14 @@ public List<PostCommentWithPostVO> pageLatest(@RequestParam(name = \"top\", defaul\n         return postCommentService.convertToWithPostVo(content);\n     }\n \n+    @GetMapping(\"latest/{status}\")\n+    @ApiOperation(\"Pages latest comments by status\")\n+    public List<PostCommentWithPostVO> pageLatest(@RequestParam(name = \"top\", defaultValue = \"10\") int top,\n+                                                  @PathVariable(\"status\") CommentStatus status) {\n+        List<PostComment> content = postCommentService.pageLatest(top, status).getContent();\n+        return postCommentService.convertToWithPostVo(content);\n+    }\n+\n     @PostMapping\n     @ApiOperation(\"Creates a comment (new or reply)\")\n     public BaseCommentDTO createBy(@RequestBody PostCommentParam postCommentParam) {\n\ndiff --git a/src/main/java/run/halo/app/service/base/BaseCommentService.java b/src/main/java/run/halo/app/service/base/BaseCommentService.java\n--- a/src/main/java/run/halo/app/service/base/BaseCommentService.java\n+++ b/src/main/java/run/halo/app/service/base/BaseCommentService.java\n@@ -51,6 +51,16 @@ public interface BaseCommentService<COMMENT extends BaseComment> extends CrudSer\n     @NonNull\n     Page<COMMENT> pageLatest(int top);\n \n+    /**\n+     * Lists latest comments by status\n+     *\n+     * @param top    top number must not be less than 0\n+     * @param status status\n+     * @return a page of comments\n+     */\n+    @NonNull\n+    Page<COMMENT> pageLatest(int top, CommentStatus status);\n+\n     /**\n      * Pages comments.\n      *\n\ndiff --git a/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java b/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n@@ -78,6 +78,11 @@ public Page<COMMENT> pageLatest(int top) {\n         return listAll(ServiceUtils.buildLatestPageable(top));\n     }\n \n+    @Override\n+    public Page<COMMENT> pageLatest(int top,CommentStatus status){\n+        return baseCommentRepository.findAllByStatus(status,ServiceUtils.buildLatestPageable(top));\n+    }\n+\n     @Override\n     public Page<COMMENT> pageBy(CommentStatus status, Pageable pageable) {\n ",
    "output": "Create list latest by status api for comment."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/cache/lock/CacheLockInterceptor.java b/src/main/java/run/halo/app/cache/lock/CacheLockInterceptor.java\n--- a/src/main/java/run/halo/app/cache/lock/CacheLockInterceptor.java\n+++ b/src/main/java/run/halo/app/cache/lock/CacheLockInterceptor.java\n@@ -62,7 +62,7 @@ public Object interceptCacheLock(ProceedingJoinPoint joinPoint) throws Throwable\n             }\n \n             if (!cacheResult) {\n-                throw new FrequentAccessException(\"Frequent access\").setErrorData(cacheLockKey);\n+                throw new FrequentAccessException(\"访问过于频繁，请稍后再试！\").setErrorData(cacheLockKey);\n             }\n \n             // Proceed the method\n\ndiff --git a/src/main/java/run/halo/app/controller/base/ControllerExceptionHandler.java b/src/main/java/run/halo/app/controller/base/ControllerExceptionHandler.java\n--- a/src/main/java/run/halo/app/controller/base/ControllerExceptionHandler.java\n+++ b/src/main/java/run/halo/app/controller/base/ControllerExceptionHandler.java\n@@ -59,7 +59,7 @@ public BaseResponse handleMissingServletRequestParameterException(MissingServlet\n     public BaseResponse handleConstraintViolationException(ConstraintViolationException e) {\n         BaseResponse<Map<String, String>> baseResponse = handleBaseException(e);\n         baseResponse.setStatus(HttpStatus.BAD_REQUEST.value());\n-        baseResponse.setMessage(\"Field validation error\");\n+        baseResponse.setMessage(\"字段验证错误，请完善后重试！\");\n         baseResponse.setData(ValidationUtils.mapWithValidError(e.getConstraintViolations()));\n         return baseResponse;\n     }\n@@ -69,7 +69,7 @@ public BaseResponse handleConstraintViolationException(ConstraintViolationExcept\n     public BaseResponse handleMethodArgumentNotValidException(MethodArgumentNotValidException e) {\n         BaseResponse<Map<String, String>> baseResponse = handleBaseException(e);\n         baseResponse.setStatus(HttpStatus.BAD_REQUEST.value());\n-        baseResponse.setMessage(\"Field validation error\");\n+        baseResponse.setMessage(\"字段验证错误，请完善后重试！\");\n         Map<String, String> errMap = ValidationUtils.mapWithFieldError(e.getBindingResult().getFieldErrors());\n         baseResponse.setData(errMap);\n         return baseResponse;\n\ndiff --git a/src/main/java/run/halo/app/controller/content/api/JournalController.java b/src/main/java/run/halo/app/controller/content/api/JournalController.java\n--- a/src/main/java/run/halo/app/controller/content/api/JournalController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/JournalController.java\n@@ -6,6 +6,7 @@\n import org.springframework.data.domain.Sort;\n import org.springframework.data.web.SortDefault;\n import org.springframework.web.bind.annotation.*;\n+import run.halo.app.cache.lock.CacheLock;\n import run.halo.app.model.dto.BaseCommentDTO;\n import run.halo.app.model.params.JournalCommentParam;\n import run.halo.app.model.vo.BaseCommentVO;\n@@ -56,6 +57,7 @@ public Page<BaseCommentWithParentVO> listComments(@PathVariable(\"journalId\") Int\n \n     @PostMapping(\"comments\")\n     @ApiOperation(\"Comments a post\")\n+    @CacheLock(autoDelete = false, traceRequest = true)\n     public BaseCommentDTO comment(@RequestBody JournalCommentParam journalCommentParam) {\n         return journalCommentService.convertTo(journalCommentService.createBy(journalCommentParam));\n     }\n\ndiff --git a/src/main/java/run/halo/app/controller/content/api/PostController.java b/src/main/java/run/halo/app/controller/content/api/PostController.java\n--- a/src/main/java/run/halo/app/controller/content/api/PostController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/PostController.java\n@@ -8,6 +8,7 @@\n import org.springframework.data.web.PageableDefault;\n import org.springframework.data.web.SortDefault;\n import org.springframework.web.bind.annotation.*;\n+import run.halo.app.cache.lock.CacheLock;\n import run.halo.app.model.dto.BaseCommentDTO;\n import run.halo.app.model.dto.post.BasePostDetailDTO;\n import run.halo.app.model.dto.post.BasePostSimpleDTO;\n@@ -91,6 +92,7 @@ public Page<BaseCommentWithParentVO> listComments(@PathVariable(\"postId\") Intege\n \n     @PostMapping(\"comments\")\n     @ApiOperation(\"Comments a post\")\n+    @CacheLock(autoDelete = false, traceRequest = true)\n     public BaseCommentDTO comment(@RequestBody PostCommentParam postCommentParam) {\n         return postCommentService.convertTo(postCommentService.createBy(postCommentParam));\n     }\n\ndiff --git a/src/main/java/run/halo/app/controller/content/api/SheetController.java b/src/main/java/run/halo/app/controller/content/api/SheetController.java\n--- a/src/main/java/run/halo/app/controller/content/api/SheetController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/SheetController.java\n@@ -6,6 +6,7 @@\n import org.springframework.data.domain.Sort;\n import org.springframework.data.web.SortDefault;\n import org.springframework.web.bind.annotation.*;\n+import run.halo.app.cache.lock.CacheLock;\n import run.halo.app.model.dto.BaseCommentDTO;\n import run.halo.app.model.params.SheetCommentParam;\n import run.halo.app.model.vo.BaseCommentVO;\n@@ -57,6 +58,7 @@ public Page<BaseCommentWithParentVO> listComments(@PathVariable(\"sheetId\") Integ\n \n     @PostMapping(\"comments\")\n     @ApiOperation(\"Comments a post\")\n+    @CacheLock(autoDelete = false, traceRequest = true)\n     public BaseCommentDTO comment(@RequestBody SheetCommentParam sheetCommentParam) {\n         return sheetCommentService.convertTo(sheetCommentService.createBy(sheetCommentParam));\n     }\n\ndiff --git a/src/main/java/run/halo/app/model/params/BaseCommentParam.java b/src/main/java/run/halo/app/model/params/BaseCommentParam.java\n--- a/src/main/java/run/halo/app/model/params/BaseCommentParam.java\n+++ b/src/main/java/run/halo/app/model/params/BaseCommentParam.java\n@@ -19,20 +19,20 @@\n @Data\n public abstract class BaseCommentParam<COMMENT> implements InputConverter<COMMENT> {\n \n-    @NotBlank(message = \"PostComment author name must not be blank\")\n+    @NotBlank(message = \"评论者名称不能为空\")\n     @Size(max = 50, message = \"Length of comment author name must not be more than {max}\")\n     private String author;\n \n-    @NotBlank(message = \"PostComment email must not be blank\")\n-    @Email(message = \"PostComment email's format is incorrect\")\n-    @Size(max = 255, message = \"Length of comment email must not be more than {max}\")\n+    @NotBlank(message = \"邮箱不能为空\")\n+    @Email(message = \"邮箱格式不正确\")\n+    @Size(max = 255, message = \"邮箱的长度不能超过 {max}\")\n     private String email;\n \n-    @Size(max = 127, message = \"Length of comment author url must not be more than {max}\")\n+    @Size(max = 127, message = \"评论者博客链接不能超过 {max}\")\n     private String authorUrl;\n \n-    @NotBlank(message = \"PostComment content must not be blank\")\n-    @Size(max = 1023, message = \"Length of comment content must not be more than {max}\")\n+    @NotBlank(message = \"评论内容不能为空\")\n+    @Size(max = 1023, message = \"评论内容的长额不能超过 {max}\")\n     private String content;\n \n     @Min(value = 1, message = \"Post id must not be less than {value}\")",
    "output": "Translate some tips"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/CategoryServiceImpl.java b/src/main/java/run/halo/app/service/impl/CategoryServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/CategoryServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/CategoryServiceImpl.java\n@@ -1,5 +1,6 @@\n package run.halo.app.service.impl;\n \n+import com.google.common.base.Objects;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.data.domain.Sort;\n import org.springframework.lang.NonNull;\n@@ -101,23 +102,20 @@ private void concreteTree(CategoryVO parentCategory, List<Category> categories)\n             return;\n         }\n \n-        // Create children container for removing after\n-        List<Category> children = new LinkedList<>();\n-\n-        categories.forEach(category -> {\n-            if (parentCategory.getId().equals(category.getParentId())) {\n-                // Save child category\n-                children.add(category);\n-\n-                // Convert to child category vo\n-                CategoryVO child = new CategoryVO().convertFrom(category);\n+        // Get children for removing after\n+        List<Category> children = categories.stream()\n+                .filter(category -> Objects.equal(parentCategory.getId(), category.getParentId()))\n+                .collect(Collectors.toList());\n \n-                // Init children if absent\n-                if (parentCategory.getChildren() == null) {\n-                    parentCategory.setChildren(new LinkedList<>());\n-                }\n-                parentCategory.getChildren().add(child);\n+        children.forEach(category -> {\n+            // Convert to child category vo\n+            CategoryVO child = new CategoryVO().convertFrom(category);\n+            // Init children if absent\n+            if (parentCategory.getChildren() == null) {\n+                parentCategory.setChildren(new LinkedList<>());\n             }\n+            // Add child\n+            parentCategory.getChildren().add(child);\n         });\n \n         // Remove all child categories",
    "output": "Refactor category tree concrete"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/ContentSheetController.java b/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n@@ -65,7 +65,8 @@ public String sheet(@PathVariable(value = \"url\") String url,\n \n         // sheet and post all can use\n         model.addAttribute(\"sheet\", sheetService.convertToDetail(sheet));\n-        model.addAttribute(\"post\",sheetService.convertToDetail(sheet));\n+        model.addAttribute(\"post\", sheetService.convertToDetail(sheet));\n+        model.addAttribute(\"is_sheet\", true);\n \n         if (StrUtil.isNotEmpty(sheet.getTemplate())) {\n             if (themeService.templateExists(sheet.getTemplate() + HaloConst.SUFFIX_FTL)) {\n\ndiff --git a/src/main/java/run/halo/app/model/freemarker/tag/MenuTagDirective.java b/src/main/java/run/halo/app/model/freemarker/tag/MenuTagDirective.java\n--- a/src/main/java/run/halo/app/model/freemarker/tag/MenuTagDirective.java\n+++ b/src/main/java/run/halo/app/model/freemarker/tag/MenuTagDirective.java\n@@ -2,13 +2,16 @@\n \n import freemarker.core.Environment;\n import freemarker.template.*;\n+import org.springframework.data.domain.Sort;\n import org.springframework.stereotype.Component;\n import run.halo.app.model.support.HaloConst;\n import run.halo.app.service.MenuService;\n \n import java.io.IOException;\n import java.util.Map;\n \n+import static org.springframework.data.domain.Sort.Direction.DESC;\n+\n /**\n  * Freemarker custom tag of menu.\n  *\n@@ -37,6 +40,9 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars, Templ\n                 case \"list\":\n                     env.setVariable(\"menus\", builder.build().wrap(menuService.listAll()));\n                     break;\n+                case \"tree\":\n+                    env.setVariable(\"menus\",builder.build().wrap(menuService.listAsTree(Sort.by(DESC, \"priority\"))));\n+                    break;\n                 case \"count\":\n                     env.setVariable(\"count\", builder.build().wrap(menuService.count()));\n                     break;",
    "output": "Enable gzip."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/ContentSheetController.java b/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n@@ -63,7 +63,9 @@ public String sheet(@PathVariable(value = \"url\") String url,\n                         Model model) {\n         Sheet sheet = sheetService.getBy(PostStatus.PUBLISHED, url);\n \n+        // sheet and post all can use\n         model.addAttribute(\"sheet\", sheetService.convertToDetail(sheet));\n+        model.addAttribute(\"post\",sheetService.convertToDetail(sheet));\n \n         if (StrUtil.isNotEmpty(sheet.getTemplate())) {\n             if (themeService.templateExists(sheet.getTemplate() + HaloConst.SUFFIX_FTL)) {\n\ndiff --git a/src/main/java/run/halo/app/model/freemarker/tag/CategoryTagDirective.java b/src/main/java/run/halo/app/model/freemarker/tag/CategoryTagDirective.java\n--- a/src/main/java/run/halo/app/model/freemarker/tag/CategoryTagDirective.java\n+++ b/src/main/java/run/halo/app/model/freemarker/tag/CategoryTagDirective.java\n@@ -2,6 +2,7 @@\n \n import freemarker.core.Environment;\n import freemarker.template.*;\n+import org.springframework.data.domain.Sort;\n import org.springframework.stereotype.Component;\n import run.halo.app.model.support.HaloConst;\n import run.halo.app.service.CategoryService;\n@@ -10,6 +11,8 @@\n import java.io.IOException;\n import java.util.Map;\n \n+import static org.springframework.data.domain.Sort.Direction.DESC;\n+\n /**\n  * Freemarker custom tag of category.\n  *\n@@ -37,7 +40,7 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars, Templ\n             String method = params.get(HaloConst.METHOD_KEY).toString();\n             switch (method) {\n                 case \"list\":\n-                    env.setVariable(\"categories\", builder.build().wrap(categoryService.listAll()));\n+                    env.setVariable(\"categories\", builder.build().wrap(postCategoryService.listCategoryWithPostCountDto(Sort.by(DESC, \"createTime\"))));\n                     break;\n                 case \"listByPostId\":\n                     Integer postId = Integer.parseInt(params.get(\"postId\").toString());\n\ndiff --git a/src/main/java/run/halo/app/model/freemarker/tag/TagTagDirective.java b/src/main/java/run/halo/app/model/freemarker/tag/TagTagDirective.java\n--- a/src/main/java/run/halo/app/model/freemarker/tag/TagTagDirective.java\n+++ b/src/main/java/run/halo/app/model/freemarker/tag/TagTagDirective.java\n@@ -2,6 +2,7 @@\n \n import freemarker.core.Environment;\n import freemarker.template.*;\n+import org.springframework.data.domain.Sort;\n import org.springframework.stereotype.Component;\n import run.halo.app.model.support.HaloConst;\n import run.halo.app.service.PostTagService;\n@@ -10,6 +11,8 @@\n import java.io.IOException;\n import java.util.Map;\n \n+import static org.springframework.data.domain.Sort.Direction.DESC;\n+\n /**\n  * Freemarker custom tag of tag.\n  *\n@@ -37,7 +40,7 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars, Templ\n             String method = params.get(HaloConst.METHOD_KEY).toString();\n             switch (method) {\n                 case \"list\":\n-                    env.setVariable(\"tags\", builder.build().wrap(tagService.listAll()));\n+                    env.setVariable(\"tags\", builder.build().wrap(postTagService.listTagWithCountDtos(Sort.by(DESC, \"createTime\"))));\n                     break;\n                 case \"listByPostId\":\n                     Integer postId = Integer.parseInt(params.get(\"postId\").toString());",
    "output": "Refactor CategoryTagDirective.java."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/InstallController.java b/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n@@ -4,7 +4,7 @@\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.lang3.StringUtils;\n import org.springframework.context.ApplicationEventPublisher;\n-import org.springframework.lang.NonNull;\n+import org.springframework.lang.Nullable;\n import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.PostMapping;\n import org.springframework.web.bind.annotation.RequestBody;\n@@ -13,6 +13,7 @@\n import run.halo.app.cache.lock.CacheLock;\n import run.halo.app.event.logger.LogEvent;\n import run.halo.app.exception.BadRequestException;\n+import run.halo.app.model.entity.BaseComment;\n import run.halo.app.model.entity.Category;\n import run.halo.app.model.entity.Post;\n import run.halo.app.model.entity.User;\n@@ -94,32 +95,34 @@ public BaseResponse<String> installBlog(@RequestBody @Valid InstallParam install\n         initSettings(installParam);\n \n         // Create default user\n-        User user = createDefaultUser(installParam);\n+        User user = createUser(installParam);\n \n         // Create default category\n-        Category category = createDefaultCategory();\n+        Category category = createDefaultCategoryIfAbsent();\n \n         // Create default post\n-        Post post = createDefaultPost(category);\n+        Post post = createDefaultPostIfAbsent(category);\n \n         // Create default postComment\n         createDefaultComment(post);\n \n         // Create default menu\n         createDefaultMenu();\n \n-        // TODO Handle option cache\n-\n-\n         eventPublisher.publishEvent(\n                 new LogEvent(this, user.getId().toString(), LogType.BLOG_INITIALIZED, \"博客已成功初始化\")\n         );\n \n-\n         return BaseResponse.ok(\"安装完成！\");\n     }\n \n     private void createDefaultMenu() {\n+        long menuCount = menuService.count();\n+\n+        if (menuCount > 0) {\n+            return;\n+        }\n+\n         MenuParam menuIndex = new MenuParam();\n \n         menuIndex.setName(\"首页\");\n@@ -137,32 +140,51 @@ private void createDefaultMenu() {\n     }\n \n \n-    private void createDefaultComment(Post post) {\n+    @Nullable\n+    private BaseComment createDefaultComment(@Nullable Post post) {\n+        if (post == null) {\n+            return null;\n+        }\n+\n         PostCommentParam commentParam = new PostCommentParam();\n         commentParam.setAuthor(\"Halo Bot\");\n         commentParam.setAuthorUrl(\"https://github.com/halo-dev/halo\");\n         commentParam.setContent(\"欢迎使用 Halo，这是你的第一条评论。\");\n         commentParam.setEmail(\"i@ryanc.cc\");\n         commentParam.setPostId(post.getId());\n-        postCommentService.create(commentParam.convertTo());\n+        return postCommentService.create(commentParam.convertTo());\n     }\n \n-    private Post createDefaultPost(Category category) {\n+    @Nullable\n+    private Post createDefaultPostIfAbsent(@Nullable Category category) {\n+        long publishedCount = postService.countByStatus(PostStatus.PUBLISHED);\n+        if (publishedCount > 0) {\n+            return null;\n+        }\n+\n         PostParam postParam = new PostParam();\n         postParam.setUrl(\"hello-halo\");\n         postParam.setTitle(\"Hello Halo\");\n         postParam.setStatus(PostStatus.PUBLISHED);\n         postParam.setOriginalContent(\"## Hello Halo!\\n\" +\n                 \"\\n\" +\n                 \"感谢使用 [Halo](https://github.com/halo-dev/halo) 进行创作，请删除该文章开始吧！\");\n-        Set<Integer> categoryIds = new HashSet<>();\n-        categoryIds.add(category.getId());\n-        postParam.setCategoryIds(categoryIds);\n+\n+        if (category != null) {\n+            Set<Integer> categoryIds = new HashSet<>();\n+            categoryIds.add(category.getId());\n+            postParam.setCategoryIds(categoryIds);\n+        }\n         return postService.createOrUpdateBy(postParam.convertTo());\n     }\n \n-    @NonNull\n-    private Category createDefaultCategory() {\n+    @Nullable\n+    private Category createDefaultCategoryIfAbsent() {\n+        long categoryCount = categoryService.count();\n+        if (categoryCount == 0) {\n+            return null;\n+        }\n+\n         CategoryParam category = new CategoryParam();\n         category.setName(\"未分类\");\n         category.setSlugName(\"default\");\n@@ -171,8 +193,14 @@ private Category createDefaultCategory() {\n         return categoryService.create(category.convertTo());\n     }\n \n-    private User createDefaultUser(InstallParam installParam) {\n-        return userService.createBy(installParam);\n+    private User createUser(InstallParam installParam) {\n+        // Get user\n+        return userService.getCurrentUser().map(user -> {\n+            // Update this user\n+            installParam.update(user);\n+            // Update user\n+            return userService.update(user);\n+        }).orElseGet(() -> userService.createBy(installParam));\n     }\n \n     private void initSettings(InstallParam installParam) {",
    "output": "Refactor installation procedure"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/ThemeController.java b/src/main/java/run/halo/app/controller/admin/api/ThemeController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/ThemeController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/ThemeController.java\n@@ -135,4 +135,10 @@ public ThemeProperty uploadTheme(@RequestPart(\"file\") MultipartFile file) {\n     public ThemeProperty fetchTheme(@RequestParam(\"uri\") String uri) {\n         return themeService.fetch(uri);\n     }\n+\n+    @PostMapping(\"reload\")\n+    @ApiOperation(\"Reloads themes\")\n+    public void reload() {\n+        themeService.reload();\n+    }\n }\n\ndiff --git a/src/main/java/run/halo/app/service/ThemeService.java b/src/main/java/run/halo/app/service/ThemeService.java\n--- a/src/main/java/run/halo/app/service/ThemeService.java\n+++ b/src/main/java/run/halo/app/service/ThemeService.java\n@@ -6,7 +6,6 @@\n import run.halo.app.handler.theme.config.support.ThemeProperty;\n import run.halo.app.model.support.ThemeFile;\n \n-import java.io.File;\n import java.io.IOException;\n import java.nio.file.Path;\n import java.util.List;\n@@ -233,4 +232,9 @@ public interface ThemeService {\n      */\n     @NonNull\n     ThemeProperty fetch(@NonNull String uri);\n+\n+    /**\n+     * Reloads themes\n+     */\n+    void reload();\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n@@ -433,6 +433,11 @@ public ThemeProperty fetch(String uri) {\n         }\n     }\n \n+    @Override\n+    public void reload() {\n+        eventPublisher.publishEvent(new ThemeUpdatedEvent(this));\n+    }\n+\n     /**\n      * Clones theme from git.\n      *",
    "output": "Add theme reloading api"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/ThemeController.java b/src/main/java/run/halo/app/controller/admin/api/ThemeController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/ThemeController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/ThemeController.java\n@@ -65,8 +65,8 @@ public void updateContentBy(@RequestParam(name = \"path\") String path,\n     }\n \n     @GetMapping(\"files/custom\")\n-    public List<String> customTemplate() {\n-        return themeService.getCustomTpl(themeService.getActivatedThemeId());\n+    public Set<String> customTemplate() {\n+        return themeService.listCustomTemplates(themeService.getActivatedThemeId());\n     }\n \n     @PostMapping(\"{themeId}/activation\")\n\ndiff --git a/src/main/java/run/halo/app/service/ThemeService.java b/src/main/java/run/halo/app/service/ThemeService.java\n--- a/src/main/java/run/halo/app/service/ThemeService.java\n+++ b/src/main/java/run/halo/app/service/ThemeService.java\n@@ -66,6 +66,8 @@ public interface ThemeService {\n      */\n     String THEMES_CACHE_KEY = \"themes\";\n \n+    String CUSTOM_SHEET_PREFIX = \"sheet_\";\n+\n     /**\n      * Get theme property by theme id.\n      *\n@@ -109,12 +111,12 @@ public interface ThemeService {\n     List<ThemeFile> listThemeFolderBy(@NonNull String themeId);\n \n     /**\n-     * Gets custom template, such as page_xxx.ftl, and xxx will be template name\n+     * Lists a set of custom template, such as sheet_xxx.ftl, and xxx will be template name\n      *\n-     * @param themeId theme id\n-     * @return List\n+     * @param themeId theme id must not be blank\n+     * @return a set of templates\n      */\n-    List<String> getCustomTpl(@NonNull String themeId);\n+    Set<String> listCustomTemplates(@NonNull String themeId);\n \n     /**\n      * Judging whether template exists under the specified theme\n@@ -130,14 +132,7 @@ public interface ThemeService {\n      * @param themeId theme name\n      * @return boolean\n      */\n-    boolean isThemeExist(@NonNull String themeId);\n-\n-    /**\n-     * Gets theme base path.\n-     *\n-     * @return File\n-     */\n-    File getThemeBasePath();\n+    boolean themeExists(@NonNull String themeId);\n \n     /**\n      * Gets theme base path.\n\ndiff --git a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n@@ -3,8 +3,6 @@\n import cn.hutool.core.io.FileUtil;\n import cn.hutool.core.io.file.FileReader;\n import cn.hutool.core.io.file.FileWriter;\n-import cn.hutool.core.util.StrUtil;\n-import freemarker.template.Configuration;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.lang3.StringUtils;\n import org.eclipse.jgit.api.Git;\n@@ -38,7 +36,6 @@\n import run.halo.app.utils.HaloUtils;\n \n import java.io.ByteArrayInputStream;\n-import java.io.File;\n import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n@@ -60,14 +57,12 @@ public class ThemeServiceImpl implements ThemeService {\n     /**\n      * Theme work directory.\n      */\n-    private final Path workDir;\n+    private final Path themeWorkDir;\n \n     private final OptionService optionService;\n \n     private final StringCacheStore cacheStore;\n \n-    private final Configuration configuration;\n-\n     private final ThemeConfigResolver themeConfigResolver;\n \n     private final ThemePropertyResolver themePropertyResolver;\n@@ -89,19 +84,17 @@ public class ThemeServiceImpl implements ThemeService {\n     public ThemeServiceImpl(HaloProperties haloProperties,\n                             OptionService optionService,\n                             StringCacheStore cacheStore,\n-                            Configuration configuration,\n                             ThemeConfigResolver themeConfigResolver,\n                             ThemePropertyResolver themePropertyResolver,\n                             RestTemplate restTemplate,\n                             ApplicationEventPublisher eventPublisher) {\n         this.optionService = optionService;\n         this.cacheStore = cacheStore;\n-        this.configuration = configuration;\n         this.themeConfigResolver = themeConfigResolver;\n         this.themePropertyResolver = themePropertyResolver;\n         this.restTemplate = restTemplate;\n \n-        workDir = Paths.get(haloProperties.getWorkDir(), THEME_FOLDER);\n+        themeWorkDir = Paths.get(haloProperties.getWorkDir(), THEME_FOLDER);\n         this.eventPublisher = eventPublisher;\n     }\n \n@@ -114,8 +107,10 @@ public ThemeProperty getThemeOfNonNullBy(String themeId) {\n     public Optional<ThemeProperty> getThemeBy(String themeId) {\n         Assert.hasText(themeId, \"Theme id must not be blank\");\n \n+        // Get all themes\n         Set<ThemeProperty> themes = getThemes();\n \n+        // filter and find first\n         return themes.stream().filter(themeProperty -> StringUtils.equals(themeProperty.getId(), themeId)).findFirst();\n     }\n \n@@ -165,27 +160,31 @@ public List<ThemeFile> listThemeFolderBy(String themeId) {\n     }\n \n     @Override\n-    public List<String> getCustomTpl(String themeId) {\n-        List<String> templates = new ArrayList<>();\n-        File themePath = new File(getThemeBasePath(), themeId);\n-        File[] themeFiles = themePath.listFiles();\n-        if (null != themeFiles && themeFiles.length > 0) {\n-            for (File file : themeFiles) {\n-                String[] split = StrUtil.removeSuffix(file.getName(), HaloConst.SUFFIX_FTL).split(\"_\");\n-                if (split.length == 2 && \"sheet\".equals(split[0])) {\n-                    templates.add(StrUtil.removeSuffix(file.getName(), HaloConst.SUFFIX_FTL));\n-                }\n-            }\n+    public Set<String> listCustomTemplates(String themeId) {\n+        // Get the theme path\n+        Path themePath = Paths.get(getThemeOfNonNullBy(themeId).getThemePath());\n+\n+        try {\n+            return Files.list(themePath)\n+                    .filter(path -> StringUtils.startsWithIgnoreCase(path.getFileName().toString(), CUSTOM_SHEET_PREFIX))\n+                    .map(path -> {\n+                        // Remove prefix\n+                        String customTemplate = StringUtils.removeStartIgnoreCase(path.getFileName().toString(), CUSTOM_SHEET_PREFIX);\n+                        // Remove suffix\n+                        return StringUtils.removeEndIgnoreCase(customTemplate, HaloConst.SUFFIX_FTL);\n+                    })\n+                    .collect(Collectors.toSet());\n+        } catch (IOException e) {\n+            throw new ServiceException(\"Failed to list files of path \" + themePath.toString(), e);\n         }\n-        return templates;\n     }\n \n     @Override\n     public boolean templateExists(String template) {\n         Assert.hasText(template, \"Template must not be blank\");\n \n         // Resolve template path\n-        Path templatePath = getBasePath().resolve(getActivatedTheme().getFolderName()).resolve(template);\n+        Path templatePath = Paths.get(getActivatedTheme().getThemePath(), template);\n \n         // Check the directory\n         checkDirectory(templatePath.toString());\n@@ -195,18 +194,13 @@ public boolean templateExists(String template) {\n     }\n \n     @Override\n-    public boolean isThemeExist(String themeId) {\n+    public boolean themeExists(String themeId) {\n         return getThemeBy(themeId).isPresent();\n     }\n \n-    @Override\n-    public File getThemeBasePath() {\n-        return getBasePath().toFile();\n-    }\n-\n     @Override\n     public Path getBasePath() {\n-        return workDir;\n+        return themeWorkDir;\n     }\n \n     @Override\n@@ -400,7 +394,7 @@ public ThemeProperty add(Path themeTmpPath) throws IOException {\n         }\n \n         // Copy the temporary path to current theme folder\n-        Path targetThemePath = workDir.resolve(tmpThemeProperty.getId());\n+        Path targetThemePath = themeWorkDir.resolve(tmpThemeProperty.getId());\n         FileUtils.copyFolder(themeTmpPath, targetThemePath);\n \n         // Get property again",
    "output": "Refactor theme service"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/ContentSheetController.java b/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n@@ -66,7 +66,7 @@ public String sheet(@PathVariable(value = \"url\") String url,\n         model.addAttribute(\"sheet\", sheetService.convertToDetail(sheet));\n \n         if (StrUtil.isNotEmpty(sheet.getTemplate())) {\n-            if (themeService.isTemplateExist(sheet.getTemplate() + HaloConst.SUFFIX_FTL)) {\n+            if (themeService.templateExists(sheet.getTemplate() + HaloConst.SUFFIX_FTL)) {\n                 return themeService.render(sheet.getTemplate());\n             }\n         }\n\ndiff --git a/src/main/java/run/halo/app/controller/core/CommonController.java b/src/main/java/run/halo/app/controller/core/CommonController.java\n--- a/src/main/java/run/halo/app/controller/core/CommonController.java\n+++ b/src/main/java/run/halo/app/controller/core/CommonController.java\n@@ -8,12 +8,10 @@\n import org.springframework.web.bind.annotation.GetMapping;\n import run.halo.app.model.entity.User;\n import run.halo.app.model.support.HaloConst;\n-import run.halo.app.service.OptionService;\n import run.halo.app.service.ThemeService;\n \n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpSession;\n-import java.io.FileNotFoundException;\n \n /**\n  * Error page Controller\n@@ -105,7 +103,7 @@ public String adminInternalError() {\n      */\n     @GetMapping(value = \"/404\")\n     public String contentNotFround() {\n-        if (!themeService.isTemplateExist(NOT_FROUND_TEMPLATE)) {\n+        if (!themeService.templateExists(NOT_FROUND_TEMPLATE)) {\n             return \"common/error/404\";\n         }\n         StrBuilder path = new StrBuilder(\"themes/\");\n@@ -121,7 +119,7 @@ public String contentNotFround() {\n      */\n     @GetMapping(value = \"/500\")\n     public String contentInternalError() {\n-        if (!themeService.isTemplateExist(INTERNAL_ERROR_TEMPLATE)) {\n+        if (!themeService.templateExists(INTERNAL_ERROR_TEMPLATE)) {\n             return \"common/error/500\";\n         }\n         StrBuilder path = new StrBuilder(\"themes/\");\n\ndiff --git a/src/main/java/run/halo/app/service/ThemeService.java b/src/main/java/run/halo/app/service/ThemeService.java\n--- a/src/main/java/run/halo/app/service/ThemeService.java\n+++ b/src/main/java/run/halo/app/service/ThemeService.java\n@@ -119,10 +119,10 @@ public interface ThemeService {\n     /**\n      * Judging whether template exists under the specified theme\n      *\n-     * @param template template\n+     * @param template template must not be blank\n      * @return boolean\n      */\n-    boolean isTemplateExist(@NonNull String template);\n+    boolean templateExists(@NonNull String template);\n \n     /**\n      * Checks whether theme exists under template path\n\ndiff --git a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n@@ -3,7 +3,6 @@\n import cn.hutool.core.io.FileUtil;\n import cn.hutool.core.io.file.FileReader;\n import cn.hutool.core.io.file.FileWriter;\n-import cn.hutool.core.text.StrBuilder;\n import cn.hutool.core.util.StrUtil;\n import freemarker.template.Configuration;\n import lombok.extern.slf4j.Slf4j;\n@@ -182,12 +181,17 @@ public List<String> getCustomTpl(String themeId) {\n     }\n \n     @Override\n-    public boolean isTemplateExist(String template) {\n-        StrBuilder templatePath = new StrBuilder(getActivatedThemeId());\n-        templatePath.append(\"/\");\n-        templatePath.append(template);\n-        File file = new File(getThemeBasePath(), templatePath.toString());\n-        return file.exists();\n+    public boolean templateExists(String template) {\n+        Assert.hasText(template, \"Template must not be blank\");\n+\n+        // Resolve template path\n+        Path templatePath = getBasePath().resolve(getActivatedTheme().getFolderName()).resolve(template);\n+\n+        // Check the directory\n+        checkDirectory(templatePath.toString());\n+\n+        // Check existence\n+        return Files.exists(templatePath);\n     }\n \n     @Override",
    "output": "Refactor template existence check"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/HaloConfiguration.java b/src/main/java/run/halo/app/config/HaloConfiguration.java\n--- a/src/main/java/run/halo/app/config/HaloConfiguration.java\n+++ b/src/main/java/run/halo/app/config/HaloConfiguration.java\n@@ -16,6 +16,7 @@\n import run.halo.app.cache.StringCacheStore;\n import run.halo.app.config.properties.HaloProperties;\n import run.halo.app.filter.CorsFilter;\n+import run.halo.app.filter.GuardFilter;\n import run.halo.app.filter.LogFilter;\n import run.halo.app.security.filter.AdminAuthenticationFilter;\n import run.halo.app.security.filter.ApiAuthenticationFilter;\n@@ -75,6 +76,15 @@ public FilterRegistrationBean<CorsFilter> corsFilter() {\n         return corsFilter;\n     }\n \n+    @Bean\n+    public FilterRegistrationBean<GuardFilter> guardFilter() {\n+        FilterRegistrationBean<GuardFilter> guardFilter = new FilterRegistrationBean<>();\n+        guardFilter.setOrder(Ordered.HIGHEST_PRECEDENCE);\n+        guardFilter.setFilter(new GuardFilter());\n+        guardFilter.addUrlPatterns(\"/api/*\");\n+        return guardFilter;\n+    }\n+\n     /**\n      * Creates a LogFilter.\n      *\n\ndiff --git a/src/main/java/run/halo/app/filter/GuardFilter.java b/src/main/java/run/halo/app/filter/GuardFilter.java\n--- a/src/main/java/run/halo/app/filter/GuardFilter.java\n+++ b/src/main/java/run/halo/app/filter/GuardFilter.java\n@@ -0,0 +1,27 @@\n+package run.halo.app.filter;\n+\n+import org.springframework.web.filter.GenericFilterBean;\n+import run.halo.app.security.context.SecurityContextHolder;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import java.io.IOException;\n+\n+/**\n+ * @author johnniang\n+ * @date 19-4-30\n+ */\n+public class GuardFilter extends GenericFilterBean {\n+\n+    @Override\n+    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n+\n+        // Do filter\n+        chain.doFilter(request, response);\n+\n+        // Clear security context\n+        SecurityContextHolder.clearContext();\n+    }\n+}\n\ndiff --git a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n@@ -77,11 +77,6 @@ public AdminServiceImpl(PostService postService,\n     public AuthToken authenticate(LoginParam loginParam) {\n         Assert.notNull(loginParam, \"Login param must not be null\");\n \n-        if (SecurityContextHolder.getContext().isAuthenticated()) {\n-            // If the user has been logged in\n-            throw new BadRequestException(\"You have been logged in, do not log in repeatedly please\");\n-        }\n-\n         String username = loginParam.getUsername();\n         User user = Validator.isEmail(username) ?\n                 userService.getByEmailOfNonNull(username) : userService.getByUsernameOfNonNull(username);\n@@ -93,6 +88,11 @@ public AuthToken authenticate(LoginParam loginParam) {\n             throw new BadRequestException(\"Username or password is incorrect\");\n         }\n \n+        if (SecurityContextHolder.getContext().isAuthenticated()) {\n+            // If the user has been logged in\n+            throw new BadRequestException(\"You have been logged in, do not log in repeatedly please\");\n+        }\n+\n         // Generate new token\n         return buildAuthToken(user);\n     }",
    "output": "Remove security context after every api request"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/ContentSheetController.java b/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n@@ -8,6 +8,7 @@\n import org.springframework.web.bind.annotation.RequestParam;\n import run.halo.app.model.entity.Sheet;\n import run.halo.app.model.enums.PostStatus;\n+import run.halo.app.model.support.HaloConst;\n import run.halo.app.service.SheetService;\n import run.halo.app.service.ThemeService;\n \n@@ -65,7 +66,9 @@ public String sheet(@PathVariable(value = \"url\") String url,\n         model.addAttribute(\"sheet\", sheetService.convertToDetail(sheet));\n \n         if (StrUtil.isNotEmpty(sheet.getTemplate())) {\n-            return themeService.render(sheet.getTemplate());\n+            if (themeService.isTemplateExist(sheet.getTemplate() + HaloConst.SUFFIX_FTL)) {\n+                return themeService.render(sheet.getTemplate());\n+            }\n         }\n         return themeService.render(\"sheet\");\n     }",
    "output": "Fixed sheet render error."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/entity/Attachment.java b/src/main/java/run/halo/app/model/entity/Attachment.java\n--- a/src/main/java/run/halo/app/model/entity/Attachment.java\n+++ b/src/main/java/run/halo/app/model/entity/Attachment.java\n@@ -18,8 +18,6 @@\n @Data\n @Entity\n @Table(name = \"attachments\")\n-@SQLDelete(sql = \"update attachments set deleted = true where id = ?\")\n-@Where(clause = \"deleted = false\")\n @ToString\n @EqualsAndHashCode(callSuper = true)\n public class Attachment extends BaseEntity {\n\ndiff --git a/src/main/java/run/halo/app/model/entity/BaseComment.java b/src/main/java/run/halo/app/model/entity/BaseComment.java\n--- a/src/main/java/run/halo/app/model/entity/BaseComment.java\n+++ b/src/main/java/run/halo/app/model/entity/BaseComment.java\n@@ -14,12 +14,10 @@\n  *\n  * @author johnniang\n  */\n+@Data\n @Entity(name = \"BaseComment\")\n @Table(name = \"comments\")\n-@SQLDelete(sql = \"update comments set deleted = true where id = ?\")\n-@Where(clause = \"deleted = false\")\n @DiscriminatorColumn(name = \"type\", discriminatorType = DiscriminatorType.INTEGER, columnDefinition = \"int default 0\")\n-@Data\n @ToString(callSuper = true)\n @EqualsAndHashCode(callSuper = true)\n public class BaseComment extends BaseEntity {\n\ndiff --git a/src/main/java/run/halo/app/model/entity/BasePost.java b/src/main/java/run/halo/app/model/entity/BasePost.java\n--- a/src/main/java/run/halo/app/model/entity/BasePost.java\n+++ b/src/main/java/run/halo/app/model/entity/BasePost.java\n@@ -17,12 +17,10 @@\n  *\n  * @author johnniang\n  */\n+@Data\n @Entity(name = \"BasePost\")\n @Table(name = \"posts\", indexes = @Index(columnList = \"url\"))\n-@SQLDelete(sql = \"update posts set deleted = true where id = ?\")\n-@Where(clause = \"deleted = false\")\n @DiscriminatorColumn(name = \"type\", discriminatorType = DiscriminatorType.INTEGER, columnDefinition = \"int default 0\")\n-@Data\n @ToString(callSuper = true)\n @EqualsAndHashCode(callSuper = true)\n public class BasePost extends BaseEntity {\n\ndiff --git a/src/main/java/run/halo/app/model/entity/Category.java b/src/main/java/run/halo/app/model/entity/Category.java\n--- a/src/main/java/run/halo/app/model/entity/Category.java\n+++ b/src/main/java/run/halo/app/model/entity/Category.java\n@@ -14,11 +14,9 @@\n  *\n  * @author johnniang\n  */\n+@Data\n @Entity\n @Table(name = \"categories\")\n-@SQLDelete(sql = \"update categories set deleted = true where id = ?\")\n-@Where(clause = \"deleted = false\")\n-@Data\n @ToString\n @EqualsAndHashCode(callSuper = true)\n public class Category extends BaseEntity {\n\ndiff --git a/src/main/java/run/halo/app/model/entity/Journal.java b/src/main/java/run/halo/app/model/entity/Journal.java\n--- a/src/main/java/run/halo/app/model/entity/Journal.java\n+++ b/src/main/java/run/halo/app/model/entity/Journal.java\n@@ -14,11 +14,9 @@\n  * @author johnniang\n  * @date 3/22/19\n  */\n+@Data\n @Entity\n @Table(name = \"journals\")\n-@SQLDelete(sql = \"update journals set deleted = true where id = ?\")\n-@Where(clause = \"deleted = false\")\n-@Data\n @ToString(callSuper = true)\n @EqualsAndHashCode(callSuper = true)\n public class Journal extends BaseEntity {\n\ndiff --git a/src/main/java/run/halo/app/model/entity/Link.java b/src/main/java/run/halo/app/model/entity/Link.java\n--- a/src/main/java/run/halo/app/model/entity/Link.java\n+++ b/src/main/java/run/halo/app/model/entity/Link.java\n@@ -17,8 +17,6 @@\n @Data\n @Entity\n @Table(name = \"links\")\n-@SQLDelete(sql = \"update links set deleted = true where id = ?\")\n-@Where(clause = \"deleted = false\")\n @ToString\n @EqualsAndHashCode(callSuper = true)\n public class Link extends BaseEntity {\n\ndiff --git a/src/main/java/run/halo/app/model/entity/Log.java b/src/main/java/run/halo/app/model/entity/Log.java\n--- a/src/main/java/run/halo/app/model/entity/Log.java\n+++ b/src/main/java/run/halo/app/model/entity/Log.java\n@@ -16,11 +16,9 @@\n  *\n  * @author johnniang\n  */\n+@Data\n @Entity\n @Table(name = \"logs\")\n-@SQLDelete(sql = \"update logs set deleted = true where id = ?\")\n-@Where(clause = \"deleted = false\")\n-@Data\n @ToString\n @EqualsAndHashCode(callSuper = true)\n public class Log extends BaseEntity {\n\ndiff --git a/src/main/java/run/halo/app/model/entity/Menu.java b/src/main/java/run/halo/app/model/entity/Menu.java\n--- a/src/main/java/run/halo/app/model/entity/Menu.java\n+++ b/src/main/java/run/halo/app/model/entity/Menu.java\n@@ -17,8 +17,6 @@\n @Data\n @Entity\n @Table(name = \"menus\")\n-@SQLDelete(sql = \"update menus set deleted = true where id = ?\")\n-@Where(clause = \"deleted = false\")\n @ToString\n @EqualsAndHashCode(callSuper = true)\n public class Menu extends BaseEntity {\n\ndiff --git a/src/main/java/run/halo/app/model/entity/Option.java b/src/main/java/run/halo/app/model/entity/Option.java\n--- a/src/main/java/run/halo/app/model/entity/Option.java\n+++ b/src/main/java/run/halo/app/model/entity/Option.java\n@@ -14,11 +14,9 @@\n  *\n  * @author johnniang\n  */\n+@Data\n @Entity\n @Table(name = \"options\")\n-@SQLDelete(sql = \"update options set deleted = true where id = ?\")\n-@Where(clause = \"deleted = false\")\n-@Data\n @ToString(callSuper = true)\n @EqualsAndHashCode(callSuper = true)\n @NoArgsConstructor\n\ndiff --git a/src/main/java/run/halo/app/model/entity/Photo.java b/src/main/java/run/halo/app/model/entity/Photo.java\n--- a/src/main/java/run/halo/app/model/entity/Photo.java\n+++ b/src/main/java/run/halo/app/model/entity/Photo.java\n@@ -18,8 +18,6 @@\n @Data\n @Entity\n @Table(name = \"photos\")\n-@SQLDelete(sql = \"update photos set deleted = true where id = ?\")\n-@Where(clause = \"deleted = false\")\n @ToString\n @EqualsAndHashCode(callSuper = true)\n public class Photo extends BaseEntity {\n\ndiff --git a/src/main/java/run/halo/app/model/entity/PostCategory.java b/src/main/java/run/halo/app/model/entity/PostCategory.java\n--- a/src/main/java/run/halo/app/model/entity/PostCategory.java\n+++ b/src/main/java/run/halo/app/model/entity/PostCategory.java\n@@ -15,8 +15,6 @@\n  */\n @Entity\n @Table(name = \"post_categories\")\n-@SQLDelete(sql = \"update post_categories set deleted = true where id = ?\")\n-@Where(clause = \"deleted = false\")\n @Data\n @ToString(callSuper = true)\n public class PostCategory extends BaseEntity {\n\ndiff --git a/src/main/java/run/halo/app/model/entity/PostTag.java b/src/main/java/run/halo/app/model/entity/PostTag.java\n--- a/src/main/java/run/halo/app/model/entity/PostTag.java\n+++ b/src/main/java/run/halo/app/model/entity/PostTag.java\n@@ -17,8 +17,6 @@\n @Data\n @Entity\n @Table(name = \"post_tags\")\n-@SQLDelete(sql = \"update post_tags set deleted = true where id = ?\")\n-@Where(clause = \"deleted = false\")\n @ToString(callSuper = true)\n public class PostTag extends BaseEntity {\n \n\ndiff --git a/src/main/java/run/halo/app/model/entity/Tag.java b/src/main/java/run/halo/app/model/entity/Tag.java\n--- a/src/main/java/run/halo/app/model/entity/Tag.java\n+++ b/src/main/java/run/halo/app/model/entity/Tag.java\n@@ -17,8 +17,6 @@\n @Data\n @Entity\n @Table(name = \"tags\", indexes = @Index(columnList = \"slug_name\"))\n-@SQLDelete(sql = \"update tags set deleted = true where id = ?\")\n-@Where(clause = \"deleted = false\")\n @ToString\n @EqualsAndHashCode(callSuper = true)\n public class Tag extends BaseEntity {\n\ndiff --git a/src/main/java/run/halo/app/model/entity/ThemeSetting.java b/src/main/java/run/halo/app/model/entity/ThemeSetting.java\n--- a/src/main/java/run/halo/app/model/entity/ThemeSetting.java\n+++ b/src/main/java/run/halo/app/model/entity/ThemeSetting.java\n@@ -14,11 +14,9 @@\n  * @author johnniang\n  * @date 4/8/19\n  */\n+@Data\n @Entity\n @Table(name = \"theme_settings\", indexes = {@Index(columnList = \"setting_key\")})\n-@SQLDelete(sql = \"update theme_settings set deleted = true where id = ?\")\n-@Where(clause = \"deleted = false\")\n-@Data\n @ToString(callSuper = true)\n @EqualsAndHashCode(callSuper = true)\n public class ThemeSetting extends BaseEntity {\n\ndiff --git a/src/main/java/run/halo/app/model/entity/User.java b/src/main/java/run/halo/app/model/entity/User.java\n--- a/src/main/java/run/halo/app/model/entity/User.java\n+++ b/src/main/java/run/halo/app/model/entity/User.java\n@@ -20,8 +20,6 @@\n @Data\n @Entity\n @Table(name = \"users\")\n-@SQLDelete(sql = \"update users set deleted = true where id = ?\")\n-@Where(clause = \"deleted = false\")\n @ToString(callSuper = true)\n @EqualsAndHashCode(callSuper = true)\n public class User extends BaseEntity {",
    "output": "Remove @SQLDelete and @Where."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java b/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n--- a/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n+++ b/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n@@ -1,6 +1,8 @@\n package run.halo.app.config;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n+import freemarker.template.TemplateException;\n+import freemarker.template.TemplateExceptionHandler;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.boot.jackson.JsonComponentModule;\n import org.springframework.context.annotation.Bean;\n@@ -20,11 +22,12 @@\n import org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer;\n import org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver;\n import run.halo.app.config.properties.HaloProperties;\n+import run.halo.app.controller.support.PageJacksonSerializer;\n import run.halo.app.factory.StringToEnumConverterFactory;\n import run.halo.app.model.support.HaloConst;\n import run.halo.app.security.resolver.AuthenticationArgumentResolver;\n-import run.halo.app.controller.support.PageJacksonSerializer;\n \n+import java.io.IOException;\n import java.util.List;\n \n /**\n@@ -111,13 +114,20 @@ public void addFormatters(FormatterRegistry registry) {\n      * @return new FreeMarkerConfigurer\n      */\n     @Bean\n-    public FreeMarkerConfigurer freemarkerConfig(HaloProperties haloProperties) {\n+    public FreeMarkerConfigurer freemarkerConfig(HaloProperties haloProperties) throws IOException, TemplateException {\n         FreeMarkerConfigurer configurer = new FreeMarkerConfigurer();\n         configurer.setTemplateLoaderPaths(FILE_PROTOCOL + haloProperties.getWorkDir() + \"templates/\", \"classpath:/templates/\");\n         configurer.setDefaultEncoding(\"UTF-8\");\n-//        if (haloProperties.isProductionEnv()) {\n-//            configurer.getConfiguration().setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);\n-//        }\n+\n+        // Predefine configuration\n+        freemarker.template.Configuration configuration = configurer.createConfiguration();\n+        if (haloProperties.isProductionEnv()) {\n+            configuration.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);\n+        }\n+\n+        // Set predefined freemarker configuration\n+        configurer.setConfiguration(configuration);\n+\n         return configurer;\n     }\n \n\ndiff --git a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n@@ -154,7 +154,7 @@ public AuthToken refreshToken(String refreshToken) {\n         Assert.hasText(refreshToken, \"Refresh token must not be blank\");\n \n         Integer userId = cacheStore.getAny(SecurityUtils.buildTokenRefreshKey(refreshToken), Integer.class)\n-                .orElseThrow(() -> new BadRequestException(\"The refresh token may have been expired already\"));\n+                .orElseThrow(() -> new BadRequestException(\"The refresh token may have been expired already\").setErrorData(refreshToken));\n \n         // Get user info\n         User user = userService.getById(userId);",
    "output": "Merge remote-tracking branch 'origin/v1' into v1\n\n# Conflicts:\n#\tsrc/main/java/run/halo/app/model/freemarker/tag/PostTagDirective.java"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/InstallController.java b/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n@@ -158,7 +158,7 @@ private Post createDefaultPost(Category category) {\n         Set<Integer> categoryIds = new HashSet<>();\n         categoryIds.add(category.getId());\n         postParam.setCategoryIds(categoryIds);\n-        return postService.create(postParam.convertTo());\n+        return postService.createOrUpdateBy(postParam.convertTo());\n     }\n \n     @NonNull\n\ndiff --git a/src/main/java/run/halo/app/model/freemarker/tag/CategoryTagDirective.java b/src/main/java/run/halo/app/model/freemarker/tag/CategoryTagDirective.java\n--- a/src/main/java/run/halo/app/model/freemarker/tag/CategoryTagDirective.java\n+++ b/src/main/java/run/halo/app/model/freemarker/tag/CategoryTagDirective.java\n@@ -35,12 +35,12 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars, Templ\n \n         if (params.containsKey(HaloConst.METHOD_KEY)) {\n             String method = params.get(HaloConst.METHOD_KEY).toString();\n-            Integer postId = Integer.parseInt(params.get(\"postId\").toString());\n             switch (method) {\n                 case \"list\":\n                     env.setVariable(\"categories\", builder.build().wrap(categoryService.listAll()));\n                     break;\n                 case \"listByPostId\":\n+                    Integer postId = Integer.parseInt(params.get(\"postId\").toString());\n                     env.setVariable(\"categories\", builder.build().wrap(postCategoryService.listCategoryBy(postId)));\n                 case \"count\":\n                     env.setVariable(\"count\", builder.build().wrap(categoryService.count()));\n\ndiff --git a/src/main/java/run/halo/app/model/freemarker/tag/CommentTagDirective.java b/src/main/java/run/halo/app/model/freemarker/tag/CommentTagDirective.java\n--- a/src/main/java/run/halo/app/model/freemarker/tag/CommentTagDirective.java\n+++ b/src/main/java/run/halo/app/model/freemarker/tag/CommentTagDirective.java\n@@ -31,9 +31,9 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars, Templ\n \n         if (params.containsKey(HaloConst.METHOD_KEY)) {\n             String method = params.get(HaloConst.METHOD_KEY).toString();\n-            int top = Integer.parseInt(params.get(\"top\").toString());\n             switch (method) {\n                 case \"latest\":\n+                    int top = Integer.parseInt(params.get(\"top\").toString());\n                     env.setVariable(\"categories\", builder.build().wrap(postCommentService.pageLatest(top)));\n                     break;\n                 case \"count\":\n\ndiff --git a/src/main/java/run/halo/app/model/freemarker/tag/PhotoTagDirective.java b/src/main/java/run/halo/app/model/freemarker/tag/PhotoTagDirective.java\n--- a/src/main/java/run/halo/app/model/freemarker/tag/PhotoTagDirective.java\n+++ b/src/main/java/run/halo/app/model/freemarker/tag/PhotoTagDirective.java\n@@ -34,7 +34,6 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars, Templ\n \n         if (params.containsKey(HaloConst.METHOD_KEY)) {\n             String method = params.get(HaloConst.METHOD_KEY).toString();\n-            String team = params.get(\"team\").toString();\n             switch (method) {\n                 case \"list\":\n                     env.setVariable(\"photos\", builder.build().wrap(photoService.listAll()));\n@@ -43,6 +42,7 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars, Templ\n                     env.setVariable(\"teams\", builder.build().wrap(photoService.listDtos(Sort.by(DESC, \"createTime\"))));\n                     break;\n                 case \"listByTeam\":\n+                    String team = params.get(\"team\").toString();\n                     env.setVariable(\"photos\", builder.build().wrap(photoService.listByTeam(team, Sort.by(DESC, \"createTime\"))));\n                     break;\n                 case \"count\":\n\ndiff --git a/src/main/java/run/halo/app/model/freemarker/tag/PostTagDirective.java b/src/main/java/run/halo/app/model/freemarker/tag/PostTagDirective.java\n--- a/src/main/java/run/halo/app/model/freemarker/tag/PostTagDirective.java\n+++ b/src/main/java/run/halo/app/model/freemarker/tag/PostTagDirective.java\n@@ -41,11 +41,9 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars, Templ\n         final DefaultObjectWrapperBuilder builder = new DefaultObjectWrapperBuilder(Configuration.VERSION_2_3_25);\n         if (params.containsKey(HaloConst.METHOD_KEY)) {\n             String method = params.get(HaloConst.METHOD_KEY).toString();\n-            Integer categoryId = Integer.parseInt(params.get(\"categoryId\").toString());\n-            Integer tagId = Integer.parseInt(params.get(\"tagId\").toString());\n-            int top = Integer.parseInt(params.get(\"top\").toString());\n             switch (method) {\n                 case \"latest\":\n+                    int top = Integer.parseInt(params.get(\"top\").toString());\n                     env.setVariable(\"posts\", builder.build().wrap(postService.listLatest(top)));\n                     break;\n                 case \"count\":\n@@ -58,9 +56,11 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars, Templ\n                     env.setVariable(\"archives\", builder.build().wrap(postService.listMonthArchives()));\n                     break;\n                 case \"listByCategoryId\":\n+                    Integer categoryId = Integer.parseInt(params.get(\"categoryId\").toString());\n                     env.setVariable(\"posts\", builder.build().wrap(postCategoryService.listPostBy(categoryId)));\n                     break;\n                 case \"listByTagId\":\n+                    Integer tagId = Integer.parseInt(params.get(\"tagId\").toString());\n                     env.setVariable(\"posts\", builder.build().wrap(postTagService.listPostsBy(tagId)));\n                     break;\n                 default:\n\ndiff --git a/src/main/java/run/halo/app/model/freemarker/tag/TagTagDirective.java b/src/main/java/run/halo/app/model/freemarker/tag/TagTagDirective.java\n--- a/src/main/java/run/halo/app/model/freemarker/tag/TagTagDirective.java\n+++ b/src/main/java/run/halo/app/model/freemarker/tag/TagTagDirective.java\n@@ -35,12 +35,12 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars, Templ\n \n         if (params.containsKey(HaloConst.METHOD_KEY)) {\n             String method = params.get(HaloConst.METHOD_KEY).toString();\n-            Integer postId = Integer.parseInt(params.get(\"postId\").toString());\n             switch (method) {\n                 case \"list\":\n                     env.setVariable(\"tags\", builder.build().wrap(tagService.listAll()));\n                     break;\n                 case \"listByPostId\":\n+                    Integer postId = Integer.parseInt(params.get(\"postId\").toString());\n                     env.setVariable(\"tags\", builder.build().wrap(postTagService.listTagsBy(postId)));\n                     break;\n                 case \"count\":",
    "output": "Fixed freemarker directive bugs."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/AdminController.java b/src/main/java/run/halo/app/controller/admin/api/AdminController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/AdminController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/AdminController.java\n@@ -41,21 +41,21 @@ public StatisticDTO getCount() {\n \n     @PostMapping(\"login\")\n     @ApiOperation(\"Login\")\n-    @CacheLock\n+    @CacheLock(autoDelete = false)\n     public AuthToken auth(@RequestBody @Valid LoginParam loginParam) {\n         return adminService.authenticate(loginParam);\n     }\n \n     @PostMapping(\"logout\")\n     @ApiOperation(\"Logs out (Clear session)\")\n-    @CacheLock\n+    @CacheLock(autoDelete = false)\n     public void logout() {\n         adminService.clearToken();\n     }\n \n     @PostMapping(\"refresh/{refreshToken}\")\n     @ApiOperation(\"Refreshes token\")\n-    @CacheLock\n+    @CacheLock(autoDelete = false)\n     public AuthToken refresh(@PathVariable(\"refreshToken\") String refreshToken) {\n         return adminService.refreshToken(refreshToken);\n     }",
    "output": "Disable auto delete in cache lock for admin controller"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/HaloConfiguration.java b/src/main/java/run/halo/app/config/HaloConfiguration.java\n--- a/src/main/java/run/halo/app/config/HaloConfiguration.java\n+++ b/src/main/java/run/halo/app/config/HaloConfiguration.java\n@@ -101,11 +101,10 @@ public FilterRegistrationBean<ApiAuthenticationFilter> apiAuthenticationFilter(H\n \n         // Set failure handler\n         apiFilter.setFailureHandler(failureHandler);\n-        apiFilter.addExcludeUrlPatterns(\"/api/admin/*\");\n \n         FilterRegistrationBean<ApiAuthenticationFilter> authenticationFilter = new FilterRegistrationBean<>();\n         authenticationFilter.setFilter(apiFilter);\n-        authenticationFilter.addUrlPatterns(\"/api/*\");\n+        authenticationFilter.addUrlPatterns(\"/api/content/*\");\n         authenticationFilter.setOrder(0);\n         return authenticationFilter;\n     }\n@@ -125,17 +124,18 @@ public FilterRegistrationBean<AdminAuthenticationFilter> adminAuthenticationFilt\n         // Config the admin filter\n         adminAuthenticationFilter.addExcludeUrlPatterns(\n                 \"/api/admin/login\",\n+                \"/api/admin/refresh/*\",\n                 \"/api/admin/installations\",\n                 \"/api/admin/recoveries/migrations/*\"\n         );\n         adminAuthenticationFilter.addTryAuthUrlMethodPattern(\"/api/admin/comments\", HttpMethod.POST.name());\n-        adminAuthenticationFilter.addTryAuthUrlMethodPattern(\"/api/comments\", HttpMethod.POST.name());\n+        adminAuthenticationFilter.addTryAuthUrlMethodPattern(\"/api/content/comments\", HttpMethod.POST.name());\n         adminAuthenticationFilter.setFailureHandler(\n                 failureHandler);\n \n         FilterRegistrationBean<AdminAuthenticationFilter> authenticationFilter = new FilterRegistrationBean<>();\n         authenticationFilter.setFilter(adminAuthenticationFilter);\n-        authenticationFilter.addUrlPatterns(\"/api/admin/*\", \"/api/comments\");\n+        authenticationFilter.addUrlPatterns(\"/api/admin/*\", \"/api/content/comments\");\n         authenticationFilter.setOrder(1);\n         return authenticationFilter;\n     }\n\ndiff --git a/src/main/java/run/halo/app/controller/admin/api/AdminController.java b/src/main/java/run/halo/app/controller/admin/api/AdminController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/AdminController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/AdminController.java\n@@ -52,4 +52,11 @@ public AuthToken auth(@RequestBody @Valid LoginParam loginParam) {\n     public void logout() {\n         adminService.clearToken();\n     }\n+\n+    @PostMapping(\"refresh/{refreshToken}\")\n+    @ApiOperation(\"Refreshes token\")\n+    @CacheLock\n+    public AuthToken refresh(@PathVariable(\"refreshToken\") String refreshToken) {\n+        return adminService.refreshToken(refreshToken);\n+    }\n }\n\ndiff --git a/src/main/java/run/halo/app/service/AdminService.java b/src/main/java/run/halo/app/service/AdminService.java\n--- a/src/main/java/run/halo/app/service/AdminService.java\n+++ b/src/main/java/run/halo/app/service/AdminService.java\n@@ -45,4 +45,13 @@ public interface AdminService {\n      */\n     @NonNull\n     StatisticDTO getCount();\n+\n+    /**\n+     * Refreshes token.\n+     *\n+     * @param refreshToken refresh token must not be blank\n+     * @return authentication token\n+     */\n+    @NonNull\n+    AuthToken refreshToken(@NonNull String refreshToken);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n@@ -2,6 +2,7 @@\n \n import cn.hutool.core.lang.Validator;\n import lombok.extern.slf4j.Slf4j;\n+import org.springframework.lang.NonNull;\n import org.springframework.stereotype.Service;\n import org.springframework.util.Assert;\n import run.halo.app.cache.StringCacheStore;\n@@ -93,21 +94,7 @@ public AuthToken authenticate(LoginParam loginParam) {\n         }\n \n         // Generate new token\n-        AuthToken token = new AuthToken();\n-\n-        token.setAccessToken(HaloUtils.randomUUIDWithoutDash());\n-        token.setExpiredIn(ACCESS_TOKEN_EXPIRED_SECONDS);\n-        token.setRefreshToken(HaloUtils.randomUUIDWithoutDash());\n-\n-        // Cache those tokens, just for clearing\n-        cacheStore.putAny(SecurityUtils.buildAccessTokenKey(user), token.getAccessToken(), REFRESH_TOKEN_EXPIRED_DAYS, TimeUnit.DAYS);\n-        cacheStore.putAny(SecurityUtils.buildRefreshTokenKey(user), token.getRefreshToken(), REFRESH_TOKEN_EXPIRED_DAYS, TimeUnit.DAYS);\n-\n-        // Cache those tokens with user id\n-        cacheStore.putAny(SecurityUtils.buildTokenAccessKey(token.getAccessToken()), user.getId(), ACCESS_TOKEN_EXPIRED_SECONDS, TimeUnit.SECONDS);\n-        cacheStore.putAny(SecurityUtils.buildTokenRefreshKey(token.getRefreshToken()), user.getId(), REFRESH_TOKEN_EXPIRED_DAYS, TimeUnit.DAYS);\n-\n-        return token;\n+        return buildAuthToken(user);\n     }\n \n     @Override\n@@ -162,4 +149,52 @@ public StatisticDTO getCount() {\n         return statisticDTO;\n     }\n \n+    @Override\n+    public AuthToken refreshToken(String refreshToken) {\n+        Assert.hasText(refreshToken, \"Refresh token must not be blank\");\n+\n+        Integer userId = cacheStore.getAny(SecurityUtils.buildTokenRefreshKey(refreshToken), Integer.class)\n+                .orElseThrow(() -> new BadRequestException(\"The refresh token may have been expired already\"));\n+\n+        // Get user info\n+        User user = userService.getById(userId);\n+\n+        // Remove all token\n+        cacheStore.getAny(SecurityUtils.buildAccessTokenKey(user), String.class).ifPresent(accessToken -> {\n+            cacheStore.delete(SecurityUtils.buildTokenAccessKey(accessToken));\n+        });\n+        cacheStore.delete(SecurityUtils.buildTokenRefreshKey(refreshToken));\n+        cacheStore.delete(SecurityUtils.buildAccessTokenKey(user));\n+        cacheStore.delete(SecurityUtils.buildRefreshTokenKey(user));\n+\n+        return buildAuthToken(user);\n+    }\n+\n+    /**\n+     * Builds authentication token.\n+     *\n+     * @param user user info must not be null\n+     * @return authentication token\n+     */\n+    @NonNull\n+    private AuthToken buildAuthToken(@NonNull User user) {\n+        Assert.notNull(user, \"User must not be null\");\n+\n+        // Generate new token\n+        AuthToken token = new AuthToken();\n+\n+        token.setAccessToken(HaloUtils.randomUUIDWithoutDash());\n+        token.setExpiredIn(ACCESS_TOKEN_EXPIRED_SECONDS);\n+        token.setRefreshToken(HaloUtils.randomUUIDWithoutDash());\n+\n+        // Cache those tokens, just for clearing\n+        cacheStore.putAny(SecurityUtils.buildAccessTokenKey(user), token.getAccessToken(), REFRESH_TOKEN_EXPIRED_DAYS, TimeUnit.DAYS);\n+        cacheStore.putAny(SecurityUtils.buildRefreshTokenKey(user), token.getRefreshToken(), REFRESH_TOKEN_EXPIRED_DAYS, TimeUnit.DAYS);\n+\n+        // Cache those tokens with user id\n+        cacheStore.putAny(SecurityUtils.buildTokenAccessKey(token.getAccessToken()), user.getId(), ACCESS_TOKEN_EXPIRED_SECONDS, TimeUnit.SECONDS);\n+        cacheStore.putAny(SecurityUtils.buildTokenRefreshKey(token.getRefreshToken()), user.getId(), REFRESH_TOKEN_EXPIRED_DAYS, TimeUnit.DAYS);\n+\n+        return token;\n+    }\n }",
    "output": "Complete refresh token logic"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/SwaggerConfiguration.java b/src/main/java/run/halo/app/config/SwaggerConfiguration.java\n--- a/src/main/java/run/halo/app/config/SwaggerConfiguration.java\n+++ b/src/main/java/run/halo/app/config/SwaggerConfiguration.java\n@@ -69,7 +69,7 @@ public Docket haloDefaultApi() {\n \n         return buildApiDocket(\"run.halo.app.content.api\",\n                 \"run.halo.app.controller.content.api\",\n-                \"/api/portal/**\")\n+                \"/api/content/**\")\n                 .securitySchemes(portalApiKeys())\n                 .securityContexts(portalSecurityContext())\n                 .enable(!haloProperties.isDocDisabled());\n@@ -149,7 +149,7 @@ private List<SecurityContext> portalSecurityContext() {\n         return Collections.singletonList(\n                 SecurityContext.builder()\n                         .securityReferences(defaultAuth())\n-                        .forPaths(PathSelectors.regex(\"/api/portal/.*\"))\n+                        .forPaths(PathSelectors.regex(\"/api/content/.*\"))\n                         .build()\n         );\n     }\n\ndiff --git a/src/main/java/run/halo/app/controller/content/api/ArchiveController.java b/src/main/java/run/halo/app/controller/content/api/ArchiveController.java\n--- a/src/main/java/run/halo/app/controller/content/api/ArchiveController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/ArchiveController.java\n@@ -16,7 +16,7 @@\n  * @date 4/2/19\n  */\n @RestController(\"ApiContentArchiveController\")\n-@RequestMapping(\"/api/portal/archives\")\n+@RequestMapping(\"/api/content/archives\")\n public class ArchiveController {\n \n     private final PostService postService;\n\ndiff --git a/src/main/java/run/halo/app/controller/content/api/JournalController.java b/src/main/java/run/halo/app/controller/content/api/JournalController.java\n--- a/src/main/java/run/halo/app/controller/content/api/JournalController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/JournalController.java\n@@ -21,7 +21,7 @@\n  * @date 19-4-26\n  */\n @RestController(\"PortalJournalController\")\n-@RequestMapping(\"/api/portal/journals\")\n+@RequestMapping(\"/api/content/journals\")\n public class JournalController {\n \n     private final JournalService journalService;\n\ndiff --git a/src/main/java/run/halo/app/controller/content/api/LinkController.java b/src/main/java/run/halo/app/controller/content/api/LinkController.java\n--- a/src/main/java/run/halo/app/controller/content/api/LinkController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/LinkController.java\n@@ -18,7 +18,7 @@\n  * @date 4/3/19\n  */\n @RestController(\"ApiContentLinkController\")\n-@RequestMapping(\"/api/portal/links\")\n+@RequestMapping(\"/api/content/links\")\n public class LinkController {\n \n     private final LinkService linkService;\n\ndiff --git a/src/main/java/run/halo/app/controller/content/api/MenuController.java b/src/main/java/run/halo/app/controller/content/api/MenuController.java\n--- a/src/main/java/run/halo/app/controller/content/api/MenuController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/MenuController.java\n@@ -20,7 +20,7 @@\n  * @date 4/3/19\n  */\n @RestController(\"ApiContentMenuController\")\n-@RequestMapping(\"/api/portal/menus\")\n+@RequestMapping(\"/api/content/menus\")\n public class MenuController {\n \n     private final MenuService menuService;\n\ndiff --git a/src/main/java/run/halo/app/controller/content/api/OptionController.java b/src/main/java/run/halo/app/controller/content/api/OptionController.java\n--- a/src/main/java/run/halo/app/controller/content/api/OptionController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/OptionController.java\n@@ -18,7 +18,7 @@\n  * @date 4/3/19\n  */\n @RestController(\"ApiContentOptionController\")\n-@RequestMapping(\"/api/portal/options\")\n+@RequestMapping(\"/api/content/options\")\n public class OptionController {\n \n     private final OptionService optionService;\n\ndiff --git a/src/main/java/run/halo/app/controller/content/api/PostController.java b/src/main/java/run/halo/app/controller/content/api/PostController.java\n--- a/src/main/java/run/halo/app/controller/content/api/PostController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/PostController.java\n@@ -29,7 +29,7 @@\n  * @date 4/2/19\n  */\n @RestController(\"ApiContentPostController\")\n-@RequestMapping(\"/api/portal/posts\")\n+@RequestMapping(\"/api/content/posts\")\n public class PostController {\n \n     private final PostService postService;\n\ndiff --git a/src/main/java/run/halo/app/controller/content/api/SheetController.java b/src/main/java/run/halo/app/controller/content/api/SheetController.java\n--- a/src/main/java/run/halo/app/controller/content/api/SheetController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/SheetController.java\n@@ -23,7 +23,7 @@\n  * @date 19-4-26\n  */\n @RestController(\"PortalSheetController\")\n-@RequestMapping(\"/api/portal/sheets\")\n+@RequestMapping(\"/api/content/sheets\")\n public class SheetController {\n \n     private final SheetService sheetService;\n\ndiff --git a/src/main/java/run/halo/app/controller/content/api/TagController.java b/src/main/java/run/halo/app/controller/content/api/TagController.java\n--- a/src/main/java/run/halo/app/controller/content/api/TagController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/TagController.java\n@@ -27,7 +27,7 @@\n  * @date 4/2/19\n  */\n @RestController(\"ApiContentTagController\")\n-@RequestMapping(\"/api/portal/tags\")\n+@RequestMapping(\"/api/content/tags\")\n public class TagController {\n \n     private final TagService tagService;\n\ndiff --git a/src/main/java/run/halo/app/controller/content/api/UserController.java b/src/main/java/run/halo/app/controller/content/api/UserController.java\n--- a/src/main/java/run/halo/app/controller/content/api/UserController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/UserController.java\n@@ -14,7 +14,7 @@\n  * @date 4/3/19\n  */\n @RestController(\"ApiContentUserController\")\n-@RequestMapping(\"/api/portal/users\")\n+@RequestMapping(\"/api/content/users\")\n public class UserController {\n \n     private final UserService userService;",
    "output": "Change /api/portal/ to /api/content/"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/SwaggerConfiguration.java b/src/main/java/run/halo/app/config/SwaggerConfiguration.java\n--- a/src/main/java/run/halo/app/config/SwaggerConfiguration.java\n+++ b/src/main/java/run/halo/app/config/SwaggerConfiguration.java\n@@ -63,20 +63,24 @@ public SwaggerConfiguration(HaloProperties haloProperties) {\n \n     @Bean\n     public Docket haloDefaultApi() {\n-        log.debug(\"Doc disabled: [{}]\", haloProperties.isDocDisabled());\n-        // TODO Build with different security configuration\n+        if (haloProperties.isDocDisabled()) {\n+            log.debug(\"Doc has been disabled\");\n+        }\n+\n         return buildApiDocket(\"run.halo.app.content.api\",\n                 \"run.halo.app.controller.content.api\",\n-                \"/api/**\")\n+                \"/api/portal/**\")\n                 .securitySchemes(portalApiKeys())\n                 .securityContexts(portalSecurityContext())\n                 .enable(!haloProperties.isDocDisabled());\n     }\n \n     @Bean\n     public Docket haloAdminApi() {\n-        log.debug(\"Doc disabled: [{}]\", haloProperties.isDocDisabled());\n-        // TODO Build with different security configuration\n+        if (haloProperties.isDocDisabled()) {\n+            log.debug(\"Doc has been disabled\");\n+        }\n+\n         return buildApiDocket(\"run.halo.app.admin\",\n                 \"run.halo.app.controller.admin\",\n                 \"/api/admin/**\")\n@@ -129,7 +133,7 @@ private List<SecurityContext> adminSecurityContext() {\n         return Collections.singletonList(\n                 SecurityContext.builder()\n                         .securityReferences(defaultAuth())\n-                        .forPaths(PathSelectors.ant(\"/api/admin/**\"))\n+                        .forPaths(PathSelectors.regex(\"/api/admin/.*\"))\n                         .build()\n         );\n     }\n@@ -145,17 +149,17 @@ private List<SecurityContext> portalSecurityContext() {\n         return Collections.singletonList(\n                 SecurityContext.builder()\n                         .securityReferences(defaultAuth())\n-                        .forPaths(PathSelectors.ant(\"/api/**\"))\n+                        .forPaths(PathSelectors.regex(\"/api/portal/.*\"))\n                         .build()\n         );\n     }\n \n     private List<SecurityReference> defaultAuth() {\n         AuthorizationScope[] authorizationScopes = {new AuthorizationScope(\"global\", \"accessEverything\")};\n-        return Collections.singletonList(new SecurityReference(\"TOKEN ACCESS\", authorizationScopes));\n+        return Arrays.asList(new SecurityReference(\"Token from header\", authorizationScopes),\n+                new SecurityReference(\"Token from query\", authorizationScopes));\n     }\n \n-\n     private ApiInfo apiInfo() {\n         return new ApiInfoBuilder()\n                 .title(\"Halo API Documentation\")\n\ndiff --git a/src/main/java/run/halo/app/controller/content/api/ArchiveController.java b/src/main/java/run/halo/app/controller/content/api/ArchiveController.java\n--- a/src/main/java/run/halo/app/controller/content/api/ArchiveController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/ArchiveController.java\n@@ -16,7 +16,7 @@\n  * @date 4/2/19\n  */\n @RestController(\"ApiContentArchiveController\")\n-@RequestMapping(\"/api/archives\")\n+@RequestMapping(\"/api/portal/archives\")\n public class ArchiveController {\n \n     private final PostService postService;\n\ndiff --git a/src/main/java/run/halo/app/controller/content/api/JournalController.java b/src/main/java/run/halo/app/controller/content/api/JournalController.java\n--- a/src/main/java/run/halo/app/controller/content/api/JournalController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/JournalController.java\n@@ -21,7 +21,7 @@\n  * @date 19-4-26\n  */\n @RestController(\"PortalJournalController\")\n-@RequestMapping(\"/api/journals\")\n+@RequestMapping(\"/api/portal/journals\")\n public class JournalController {\n \n     private final JournalService journalService;\n\ndiff --git a/src/main/java/run/halo/app/controller/content/api/LinkController.java b/src/main/java/run/halo/app/controller/content/api/LinkController.java\n--- a/src/main/java/run/halo/app/controller/content/api/LinkController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/LinkController.java\n@@ -18,7 +18,7 @@\n  * @date 4/3/19\n  */\n @RestController(\"ApiContentLinkController\")\n-@RequestMapping(\"/api/links\")\n+@RequestMapping(\"/api/portal/links\")\n public class LinkController {\n \n     private final LinkService linkService;\n\ndiff --git a/src/main/java/run/halo/app/controller/content/api/MenuController.java b/src/main/java/run/halo/app/controller/content/api/MenuController.java\n--- a/src/main/java/run/halo/app/controller/content/api/MenuController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/MenuController.java\n@@ -20,7 +20,7 @@\n  * @date 4/3/19\n  */\n @RestController(\"ApiContentMenuController\")\n-@RequestMapping(\"/api/menus\")\n+@RequestMapping(\"/api/portal/menus\")\n public class MenuController {\n \n     private final MenuService menuService;\n\ndiff --git a/src/main/java/run/halo/app/controller/content/api/OptionController.java b/src/main/java/run/halo/app/controller/content/api/OptionController.java\n--- a/src/main/java/run/halo/app/controller/content/api/OptionController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/OptionController.java\n@@ -18,7 +18,7 @@\n  * @date 4/3/19\n  */\n @RestController(\"ApiContentOptionController\")\n-@RequestMapping(\"/api/options\")\n+@RequestMapping(\"/api/portal/options\")\n public class OptionController {\n \n     private final OptionService optionService;\n\ndiff --git a/src/main/java/run/halo/app/controller/content/api/PostController.java b/src/main/java/run/halo/app/controller/content/api/PostController.java\n--- a/src/main/java/run/halo/app/controller/content/api/PostController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/PostController.java\n@@ -29,7 +29,7 @@\n  * @date 4/2/19\n  */\n @RestController(\"ApiContentPostController\")\n-@RequestMapping(\"/api/posts\")\n+@RequestMapping(\"/api/portal/posts\")\n public class PostController {\n \n     private final PostService postService;\n\ndiff --git a/src/main/java/run/halo/app/controller/content/api/SheetController.java b/src/main/java/run/halo/app/controller/content/api/SheetController.java\n--- a/src/main/java/run/halo/app/controller/content/api/SheetController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/SheetController.java\n@@ -23,7 +23,7 @@\n  * @date 19-4-26\n  */\n @RestController(\"PortalSheetController\")\n-@RequestMapping(\"/api/sheets\")\n+@RequestMapping(\"/api/portal/sheets\")\n public class SheetController {\n \n     private final SheetService sheetService;\n\ndiff --git a/src/main/java/run/halo/app/controller/content/api/TagController.java b/src/main/java/run/halo/app/controller/content/api/TagController.java\n--- a/src/main/java/run/halo/app/controller/content/api/TagController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/TagController.java\n@@ -27,7 +27,7 @@\n  * @date 4/2/19\n  */\n @RestController(\"ApiContentTagController\")\n-@RequestMapping(\"/api/tags\")\n+@RequestMapping(\"/api/portal/tags\")\n public class TagController {\n \n     private final TagService tagService;\n\ndiff --git a/src/main/java/run/halo/app/controller/content/api/UserController.java b/src/main/java/run/halo/app/controller/content/api/UserController.java\n--- a/src/main/java/run/halo/app/controller/content/api/UserController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/UserController.java\n@@ -14,7 +14,7 @@\n  * @date 4/3/19\n  */\n @RestController(\"ApiContentUserController\")\n-@RequestMapping(\"/api/users\")\n+@RequestMapping(\"/api/portal/users\")\n public class UserController {\n \n     private final UserService userService;",
    "output": "Fix swagger security builder error"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/SwaggerConfiguration.java b/src/main/java/run/halo/app/config/SwaggerConfiguration.java\n--- a/src/main/java/run/halo/app/config/SwaggerConfiguration.java\n+++ b/src/main/java/run/halo/app/config/SwaggerConfiguration.java\n@@ -8,11 +8,13 @@\n import org.springframework.core.Ordered;\n import org.springframework.data.domain.Pageable;\n import org.springframework.data.domain.Sort;\n+import org.springframework.http.HttpHeaders;\n import org.springframework.lang.NonNull;\n import org.springframework.util.Assert;\n import org.springframework.web.bind.annotation.RequestMethod;\n import run.halo.app.config.properties.HaloProperties;\n import run.halo.app.model.entity.User;\n+import run.halo.app.security.filter.AdminAuthenticationFilter;\n import run.halo.app.security.support.UserDetail;\n import springfox.documentation.builders.*;\n import springfox.documentation.schema.AlternateTypeRule;\n@@ -66,6 +68,8 @@ public Docket haloDefaultApi() {\n         return buildApiDocket(\"run.halo.app.content.api\",\n                 \"run.halo.app.controller.content.api\",\n                 \"/api/**\")\n+                .securitySchemes(portalApiKeys())\n+                .securityContexts(portalSecurityContext())\n                 .enable(!haloProperties.isDocDisabled());\n     }\n \n@@ -76,6 +80,8 @@ public Docket haloAdminApi() {\n         return buildApiDocket(\"run.halo.app.admin\",\n                 \"run.halo.app.controller.admin\",\n                 \"/api/admin/**\")\n+                .securitySchemes(adminApiKeys())\n+                .securityContexts(adminSecurityContext())\n                 .enable(!haloProperties.isDocDisabled());\n     }\n \n@@ -104,8 +110,6 @@ private Docket buildApiDocket(@NonNull String groupName, @NonNull String basePac\n                 .paths(PathSelectors.ant(antPattern))\n                 .build()\n                 .apiInfo(apiInfo())\n-                .securitySchemes(Collections.singletonList(apiKeys()))\n-                .securityContexts(Collections.singletonList(securityContext()))\n                 .useDefaultResponseMessages(false)\n                 .globalResponseMessage(RequestMethod.GET, globalResponses)\n                 .globalResponseMessage(RequestMethod.POST, globalResponses)\n@@ -114,15 +118,36 @@ private Docket buildApiDocket(@NonNull String groupName, @NonNull String basePac\n                 .directModelSubstitute(Temporal.class, String.class);\n     }\n \n-    private ApiKey apiKeys() {\n-        return new ApiKey(\"TOKEN ACCESS\", TOKEN_HEADER, In.HEADER.name());\n+    private List<ApiKey> adminApiKeys() {\n+        return Arrays.asList(\n+                new ApiKey(\"Token from header\", AdminAuthenticationFilter.ADMIN_TOKEN_HEADER_NAME, In.HEADER.name()),\n+                new ApiKey(\"Token from query\", AdminAuthenticationFilter.ADMIN_TOKEN_QUERY_NAME, In.QUERY.name())\n+        );\n     }\n \n-    private SecurityContext securityContext() {\n-        return SecurityContext.builder()\n-                .securityReferences(defaultAuth())\n-                .forPaths(PathSelectors.regex(\"/api/admin/.*\"))\n-                .build();\n+    private List<SecurityContext> adminSecurityContext() {\n+        return Collections.singletonList(\n+                SecurityContext.builder()\n+                        .securityReferences(defaultAuth())\n+                        .forPaths(PathSelectors.ant(\"/api/admin/**\"))\n+                        .build()\n+        );\n+    }\n+\n+    private List<ApiKey> portalApiKeys() {\n+        return Arrays.asList(\n+                new ApiKey(\"Token from header\", HttpHeaders.AUTHORIZATION, In.HEADER.name()),\n+                new ApiKey(\"Token from query\", \"token\", In.QUERY.name())\n+        );\n+    }\n+\n+    private List<SecurityContext> portalSecurityContext() {\n+        return Collections.singletonList(\n+                SecurityContext.builder()\n+                        .securityReferences(defaultAuth())\n+                        .forPaths(PathSelectors.ant(\"/api/**\"))\n+                        .build()\n+        );\n     }\n \n     private List<SecurityReference> defaultAuth() {\n\ndiff --git a/src/main/java/run/halo/app/security/filter/AdminAuthenticationFilter.java b/src/main/java/run/halo/app/security/filter/AdminAuthenticationFilter.java\n--- a/src/main/java/run/halo/app/security/filter/AdminAuthenticationFilter.java\n+++ b/src/main/java/run/halo/app/security/filter/AdminAuthenticationFilter.java\n@@ -58,7 +58,7 @@ public class AdminAuthenticationFilter extends AbstractAuthenticationFilter {\n     /**\n      * Admin token param name.\n      */\n-    public final static String ADMIN_TOKEN_PARAM_NAME = \"adminToken\";\n+    public final static String ADMIN_TOKEN_QUERY_NAME = \"adminToken\";\n \n     private final HaloProperties haloProperties;\n \n@@ -152,9 +152,9 @@ private String getTokenFromRequest(@NonNull HttpServletRequest request) {\n \n         // Get from param\n         if (StringUtils.isBlank(token)) {\n-            token = request.getParameter(ADMIN_TOKEN_PARAM_NAME);\n+            token = request.getParameter(ADMIN_TOKEN_QUERY_NAME);\n \n-            log.debug(\"Got token from parameter: [{}: {}]\", ADMIN_TOKEN_PARAM_NAME, token);\n+            log.debug(\"Got token from parameter: [{}: {}]\", ADMIN_TOKEN_QUERY_NAME, token);\n         } else {\n             log.debug(\"Got token from header: [{}: {}]\", ADMIN_TOKEN_HEADER_NAME, token);\n         }\n\ndiff --git a/src/main/java/run/halo/app/service/AdminService.java b/src/main/java/run/halo/app/service/AdminService.java\n--- a/src/main/java/run/halo/app/service/AdminService.java\n+++ b/src/main/java/run/halo/app/service/AdminService.java\n@@ -13,6 +13,13 @@\n  */\n public interface AdminService {\n \n+    /**\n+     * Expired seconds.\n+     */\n+    int ACCESS_TOKEN_EXPIRED_SECONDS = 24 * 3600;\n+\n+    int REFRESH_TOKEN_EXPIRED_DAYS = 30;\n+\n     String ACCESS_TOKEN_CACHE_PREFIX = \"halo.admin.access_token.\";\n \n     String REFRESH_TOKEN_CACHE_PREFIX = \"halo.admin.refresh_token.\";\n\ndiff --git a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n@@ -95,19 +95,17 @@ public AuthToken authenticate(LoginParam loginParam) {\n         // Generate new token\n         AuthToken token = new AuthToken();\n \n-        int expiredIn = 24 * 3600;\n-\n         token.setAccessToken(HaloUtils.randomUUIDWithoutDash());\n-        token.setExpiredIn(expiredIn);\n+        token.setExpiredIn(ACCESS_TOKEN_EXPIRED_SECONDS);\n         token.setRefreshToken(HaloUtils.randomUUIDWithoutDash());\n \n         // Cache those tokens, just for clearing\n-        cacheStore.putAny(SecurityUtils.buildAccessTokenKey(user), token.getAccessToken(), 30, TimeUnit.DAYS);\n-        cacheStore.putAny(SecurityUtils.buildRefreshTokenKey(user), token.getRefreshToken(), 30, TimeUnit.DAYS);\n+        cacheStore.putAny(SecurityUtils.buildAccessTokenKey(user), token.getAccessToken(), REFRESH_TOKEN_EXPIRED_DAYS, TimeUnit.DAYS);\n+        cacheStore.putAny(SecurityUtils.buildRefreshTokenKey(user), token.getRefreshToken(), REFRESH_TOKEN_EXPIRED_DAYS, TimeUnit.DAYS);\n \n         // Cache those tokens with user id\n-        cacheStore.putAny(SecurityUtils.buildTokenAccessKey(token.getAccessToken()), user.getId(), expiredIn, TimeUnit.SECONDS);\n-        cacheStore.putAny(SecurityUtils.buildTokenRefreshKey(token.getRefreshToken()), user.getId(), 30, TimeUnit.DAYS);\n+        cacheStore.putAny(SecurityUtils.buildTokenAccessKey(token.getAccessToken()), user.getId(), ACCESS_TOKEN_EXPIRED_SECONDS, TimeUnit.SECONDS);\n+        cacheStore.putAny(SecurityUtils.buildTokenRefreshKey(token.getRefreshToken()), user.getId(), REFRESH_TOKEN_EXPIRED_DAYS, TimeUnit.DAYS);\n \n         return token;\n     }",
    "output": "Enhance swagger configuration"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/cache/AbstractCacheStore.java b/src/main/java/run/halo/app/cache/AbstractCacheStore.java\n--- a/src/main/java/run/halo/app/cache/AbstractCacheStore.java\n+++ b/src/main/java/run/halo/app/cache/AbstractCacheStore.java\n@@ -1,10 +1,10 @@\n package run.halo.app.cache;\n \n import lombok.extern.slf4j.Slf4j;\n-import org.apache.commons.lang3.time.DateUtils;\n import org.springframework.lang.NonNull;\n import org.springframework.lang.Nullable;\n import org.springframework.util.Assert;\n+import run.halo.app.utils.DateUtils;\n \n import java.util.Date;\n import java.util.Optional;\n@@ -50,8 +50,6 @@ public Optional<V> get(K key) {\n         Assert.notNull(key, \"Cache key must not be blank\");\n \n         return getInternal(key).map(cacheWrapper -> {\n-            log.debug(\"Cache wrapper: [{}]\", cacheWrapper);\n-\n             // Check expiration\n             if (cacheWrapper.getExpireAt() != null && cacheWrapper.getExpireAt().before(run.halo.app.utils.DateUtils.now())) {\n                 // Expired then delete it\n@@ -101,14 +99,7 @@ private CacheWrapper<V> buildCacheWrapper(@NonNull V value, long timeout, @Nulla\n         Date expireAt = null;\n \n         if (timeout > 0 && timeUnit != null) {\n-            // Handle expiration\n-            long millis = timeUnit.toMillis(timeout);\n-            if (millis <= 0) {\n-                millis = 1L;\n-            }\n-\n-            // Calc the expiry time\n-            expireAt = DateUtils.addMilliseconds(now, Long.valueOf(millis).intValue());\n+            expireAt = DateUtils.add(now, timeout, timeUnit);\n         }\n \n         // Build cache wrapper\n\ndiff --git a/src/main/java/run/halo/app/cache/InMemoryCacheStore.java b/src/main/java/run/halo/app/cache/InMemoryCacheStore.java\n--- a/src/main/java/run/halo/app/cache/InMemoryCacheStore.java\n+++ b/src/main/java/run/halo/app/cache/InMemoryCacheStore.java\n@@ -57,7 +57,7 @@ void putInternal(String key, CacheWrapper<String> cacheWrapper) {\n         // Put the cache wrapper\n         CacheWrapper<String> putCacheWrapper = cacheContainer.put(key, cacheWrapper);\n \n-        log.debug(\"Put cache wrapper: [{}]\", putCacheWrapper);\n+        log.debug(\"Put [{}] cache result: [{}], original cache wrapper: [{}]\", key, putCacheWrapper, cacheWrapper);\n     }\n \n     @Override\n\ndiff --git a/src/test/java/run/halo/app/utils/TimeUnitTest.java b/src/test/java/run/halo/app/utils/TimeUnitTest.java\n--- a/src/test/java/run/halo/app/utils/TimeUnitTest.java\n+++ b/src/test/java/run/halo/app/utils/TimeUnitTest.java\n@@ -0,0 +1,22 @@\n+package run.halo.app.utils;\n+\n+import org.junit.Test;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Time unit test\n+ *\n+ * @author johnniang\n+ * @date 19-4-29\n+ */\n+public class TimeUnitTest {\n+\n+    @Test\n+    public void convertTest() {\n+        Long millis = TimeUnit.DAYS.toMillis(30);\n+\n+        System.out.println(millis);\n+        System.out.println(millis.intValue());\n+    }\n+}",
    "output": "Fix cache expiry calculation error"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/InstallController.java b/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n@@ -13,19 +13,23 @@\n import run.halo.app.cache.lock.CacheLock;\n import run.halo.app.event.logger.LogEvent;\n import run.halo.app.exception.BadRequestException;\n-import run.halo.app.model.entity.*;\n+import run.halo.app.model.entity.Category;\n+import run.halo.app.model.entity.Post;\n+import run.halo.app.model.entity.User;\n import run.halo.app.model.enums.AttachmentType;\n import run.halo.app.model.enums.LogType;\n-import run.halo.app.model.params.CategoryParam;\n-import run.halo.app.model.params.InstallParam;\n+import run.halo.app.model.enums.PostStatus;\n+import run.halo.app.model.params.*;\n import run.halo.app.model.properties.*;\n import run.halo.app.model.support.BaseResponse;\n import run.halo.app.service.*;\n import run.halo.app.utils.ValidationUtils;\n \n import javax.validation.Valid;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Map;\n+import java.util.Set;\n \n import static run.halo.app.model.support.HaloConst.DEFAULT_THEME_ID;\n \n@@ -83,7 +87,6 @@ public BaseResponse<String> installBlog(@RequestBody @Valid InstallParam install\n         boolean isInstalled = optionService.getByPropertyOrDefault(PrimaryProperties.IS_INSTALLED, Boolean.class, false);\n \n         if (isInstalled) {\n-            // TODO i18n\n             throw new BadRequestException(\"该博客已初始化，不能再次安装！\");\n         }\n \n@@ -100,59 +103,71 @@ public BaseResponse<String> installBlog(@RequestBody @Valid InstallParam install\n         Post post = createDefaultPost(category);\n \n         // Create default postComment\n-        PostComment postComment = createDefaultComment();\n+        createDefaultComment(post);\n \n         // Create default menu\n         createDefaultMenu();\n \n         // TODO Handle option cache\n \n-        // TODO i18n\n+\n         eventPublisher.publishEvent(\n                 new LogEvent(this, user.getId().toString(), LogType.BLOG_INITIALIZED, \"博客已成功初始化\")\n         );\n \n-        // TODO i18n\n+\n         return BaseResponse.ok(\"安装完成！\");\n     }\n \n     private void createDefaultMenu() {\n-        Menu menuIndex = new Menu();\n-        // TODO i18n\n+        MenuParam menuIndex = new MenuParam();\n+\n         menuIndex.setName(\"首页\");\n         menuIndex.setUrl(\"/\");\n         menuIndex.setPriority(1);\n-        menuService.create(menuIndex);\n \n-        Menu menuArchive = new Menu();\n-        // TODO i18n\n+        menuService.create(menuIndex.convertTo());\n+\n+        MenuParam menuArchive = new MenuParam();\n+\n         menuArchive.setName(\"归档\");\n         menuArchive.setUrl(\"/archives\");\n         menuArchive.setPriority(2);\n-        menuService.create(menuArchive);\n+        menuService.create(menuArchive.convertTo());\n     }\n \n \n-    private PostComment createDefaultComment() {\n-        // TODO Create default comment\n-        return null;\n+    private void createDefaultComment(Post post) {\n+        PostCommentParam commentParam = new PostCommentParam();\n+        commentParam.setAuthor(\"Halo Bot\");\n+        commentParam.setAuthorUrl(\"https://github.com/halo-dev/halo\");\n+        commentParam.setContent(\"欢迎使用 Halo，这是你的第一条评论。\");\n+        commentParam.setEmail(\"i@ryanc.cc\");\n+        commentParam.setPostId(post.getId());\n+        postCommentService.create(commentParam.convertTo());\n     }\n \n     private Post createDefaultPost(Category category) {\n-        // TODO Create default post\n-        return null;\n+        PostParam postParam = new PostParam();\n+        postParam.setUrl(\"hello-halo\");\n+        postParam.setTitle(\"Hello Halo\");\n+        postParam.setStatus(PostStatus.PUBLISHED);\n+        postParam.setOriginalContent(\"## Hello Halo!\\n\" +\n+                \"\\n\" +\n+                \"感谢使用 [Halo](https://github.com/halo-dev/halo) 进行创作，请删除该文章开始吧！\");\n+        Set<Integer> categoryIds = new HashSet<>();\n+        categoryIds.add(category.getId());\n+        postParam.setCategoryIds(categoryIds);\n+        return postService.create(postParam.convertTo());\n     }\n \n     @NonNull\n     private Category createDefaultCategory() {\n         CategoryParam category = new CategoryParam();\n-\n         category.setName(\"未分类\");\n         category.setSlugName(\"default\");\n         category.setDescription(\"未分类\");\n-\n         ValidationUtils.validate(category);\n-\n         return categoryService.create(category.convertTo());\n     }\n ",
    "output": "Complete install method."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/freemarker/tag/PostTagDirective.java b/src/main/java/run/halo/app/model/freemarker/tag/PostTagDirective.java\n--- a/src/main/java/run/halo/app/model/freemarker/tag/PostTagDirective.java\n+++ b/src/main/java/run/halo/app/model/freemarker/tag/PostTagDirective.java\n@@ -43,7 +43,11 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars, Templ\n             String method = params.get(HaloConst.METHOD_KEY).toString();\n             Integer categoryId = Integer.parseInt(params.get(\"categoryId\").toString());\n             Integer tagId = Integer.parseInt(params.get(\"tagId\").toString());\n+            int top = Integer.parseInt(params.get(\"top\").toString());\n             switch (method) {\n+                case \"latest\":\n+                    env.setVariable(\"posts\", builder.build().wrap(postService.listLatest(top)));\n+                    break;\n                 case \"count\":\n                     env.setVariable(\"count\", builder.build().wrap(postService.count()));\n                     break;\n\ndiff --git a/src/main/java/run/halo/app/service/base/BasePostService.java b/src/main/java/run/halo/app/service/base/BasePostService.java\n--- a/src/main/java/run/halo/app/service/base/BasePostService.java\n+++ b/src/main/java/run/halo/app/service/base/BasePostService.java\n@@ -112,14 +112,22 @@ public interface BasePostService<POST extends BasePost> extends CrudService<POST\n     Optional<POST> getNextPost(@NonNull Date date);\n \n     /**\n-     * Lists latest posts.\n+     * Pages latest posts.\n      *\n      * @param top top number must not be less than 0\n      * @return latest posts\n      */\n     @NonNull\n     Page<POST> pageLatest(int top);\n \n+    /**\n+     * Lists latest posts.\n+     * @param top top number must not be less than 0\n+     * @return latest posts\n+     */\n+    @NonNull\n+    List<POST> listLatest(int top);\n+\n     /**\n      * Gets a page of sheet.\n      *\n\ndiff --git a/src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java b/src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java\n@@ -134,6 +134,20 @@ public Page<POST> pageLatest(int top) {\n         return listAll(latestPageable);\n     }\n \n+    /**\n+     * Lists latest posts.\n+     *\n+     * @param top top number must not be less than 0\n+     * @return latest posts\n+     */\n+    @Override\n+    public List<POST> listLatest(int top) {\n+        Assert.isTrue(top > 0, \"Top number must not be less than 0\");\n+\n+        PageRequest latestPageable = PageRequest.of(0, top, Sort.by(DESC, \"editTime\"));\n+        return basePostRepository.findAllByStatus(PostStatus.PUBLISHED, latestPageable).getContent();\n+    }\n+\n     @Override\n     public Page<POST> pageBy(Pageable pageable) {\n         Assert.notNull(pageable, \"Page info must not be null\");",
    "output": "Refactor PostTagDirective."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/freemarker/tag/PostTagDirective.java b/src/main/java/run/halo/app/model/freemarker/tag/PostTagDirective.java\n--- a/src/main/java/run/halo/app/model/freemarker/tag/PostTagDirective.java\n+++ b/src/main/java/run/halo/app/model/freemarker/tag/PostTagDirective.java\n@@ -4,7 +4,9 @@\n import freemarker.template.*;\n import org.springframework.stereotype.Component;\n import run.halo.app.model.support.HaloConst;\n+import run.halo.app.service.PostCategoryService;\n import run.halo.app.service.PostService;\n+import run.halo.app.service.PostTagService;\n \n import java.io.IOException;\n import java.util.Map;\n@@ -20,10 +22,17 @@ public class PostTagDirective implements TemplateDirectiveModel {\n \n     private final PostService postService;\n \n+    private final PostTagService postTagService;\n+\n+    private final PostCategoryService postCategoryService;\n+\n     public PostTagDirective(Configuration configuration,\n-                            PostService postService) {\n+                            PostService postService,\n+                            PostTagService postTagService,\n+                            PostCategoryService postCategoryService) {\n         this.postService = postService;\n-\n+        this.postTagService = postTagService;\n+        this.postCategoryService = postCategoryService;\n         configuration.setSharedVariable(\"postTag\", this);\n     }\n \n@@ -32,6 +41,8 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars, Templ\n         final DefaultObjectWrapperBuilder builder = new DefaultObjectWrapperBuilder(Configuration.VERSION_2_3_25);\n         if (params.containsKey(HaloConst.METHOD_KEY)) {\n             String method = params.get(HaloConst.METHOD_KEY).toString();\n+            Integer categoryId = Integer.parseInt(params.get(\"categoryId\").toString());\n+            Integer tagId = Integer.parseInt(params.get(\"tagId\").toString());\n             switch (method) {\n                 case \"count\":\n                     env.setVariable(\"count\", builder.build().wrap(postService.count()));\n@@ -42,6 +53,12 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars, Templ\n                 case \"archiveMonth\":\n                     env.setVariable(\"archives\", builder.build().wrap(postService.listMonthArchives()));\n                     break;\n+                case \"listByCategoryId\":\n+                    env.setVariable(\"posts\", builder.build().wrap(postCategoryService.listPostBy(categoryId)));\n+                    break;\n+                case \"listByTagId\":\n+                    env.setVariable(\"posts\", builder.build().wrap(postTagService.listPostsBy(tagId)));\n+                    break;\n                 default:\n                     break;\n             }",
    "output": "Refactor PostTagDirective."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/freemarker/tag/CategoryTagDirective.java b/src/main/java/run/halo/app/model/freemarker/tag/CategoryTagDirective.java\n--- a/src/main/java/run/halo/app/model/freemarker/tag/CategoryTagDirective.java\n+++ b/src/main/java/run/halo/app/model/freemarker/tag/CategoryTagDirective.java\n@@ -5,6 +5,7 @@\n import org.springframework.stereotype.Component;\n import run.halo.app.model.support.HaloConst;\n import run.halo.app.service.CategoryService;\n+import run.halo.app.service.PostCategoryService;\n \n import java.io.IOException;\n import java.util.Map;\n@@ -20,9 +21,11 @@ public class CategoryTagDirective implements TemplateDirectiveModel {\n \n     private final CategoryService categoryService;\n \n-    public CategoryTagDirective(Configuration configuration, CategoryService categoryService) {\n-        this.categoryService = categoryService;\n+    private final PostCategoryService postCategoryService;\n \n+    public CategoryTagDirective(Configuration configuration, CategoryService categoryService, PostCategoryService postCategoryService) {\n+        this.categoryService = categoryService;\n+        this.postCategoryService = postCategoryService;\n         configuration.setSharedVariable(\"categoryTag\", this);\n     }\n \n@@ -32,10 +35,13 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars, Templ\n \n         if (params.containsKey(HaloConst.METHOD_KEY)) {\n             String method = params.get(HaloConst.METHOD_KEY).toString();\n+            Integer postId = Integer.parseInt(params.get(\"postId\").toString());\n             switch (method) {\n                 case \"list\":\n                     env.setVariable(\"categories\", builder.build().wrap(categoryService.listAll()));\n                     break;\n+                case \"listByPostId\":\n+                    env.setVariable(\"categories\", builder.build().wrap(postCategoryService.listCategoryBy(postId)));\n                 case \"count\":\n                     env.setVariable(\"count\", builder.build().wrap(categoryService.count()));\n                     break;\n\ndiff --git a/src/main/java/run/halo/app/model/freemarker/tag/TagTagDirective.java b/src/main/java/run/halo/app/model/freemarker/tag/TagTagDirective.java\n--- a/src/main/java/run/halo/app/model/freemarker/tag/TagTagDirective.java\n+++ b/src/main/java/run/halo/app/model/freemarker/tag/TagTagDirective.java\n@@ -1,10 +1,11 @@\n package run.halo.app.model.freemarker.tag;\n \n-import run.halo.app.model.support.HaloConst;\n-import run.halo.app.service.TagService;\n import freemarker.core.Environment;\n import freemarker.template.*;\n import org.springframework.stereotype.Component;\n+import run.halo.app.model.support.HaloConst;\n+import run.halo.app.service.PostTagService;\n+import run.halo.app.service.TagService;\n \n import java.io.IOException;\n import java.util.Map;\n@@ -20,8 +21,11 @@ public class TagTagDirective implements TemplateDirectiveModel {\n \n     private final TagService tagService;\n \n-    public TagTagDirective(Configuration configuration, TagService tagService) {\n+    private final PostTagService postTagService;\n+\n+    public TagTagDirective(Configuration configuration, TagService tagService, PostTagService postTagService) {\n         this.tagService = tagService;\n+        this.postTagService = postTagService;\n         configuration.setSharedVariable(\"tagTag\", this);\n     }\n \n@@ -31,10 +35,14 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars, Templ\n \n         if (params.containsKey(HaloConst.METHOD_KEY)) {\n             String method = params.get(HaloConst.METHOD_KEY).toString();\n+            Integer postId = Integer.parseInt(params.get(\"postId\").toString());\n             switch (method) {\n                 case \"list\":\n                     env.setVariable(\"tags\", builder.build().wrap(tagService.listAll()));\n                     break;\n+                case \"listByPostId\":\n+                    env.setVariable(\"tags\", builder.build().wrap(postTagService.listTagsBy(postId)));\n+                    break;\n                 case \"count\":\n                     env.setVariable(\"count\", builder.build().wrap(tagService.count()));\n                     break;",
    "output": "Refactor freemarker directive."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/HaloConfiguration.java b/src/main/java/run/halo/app/config/HaloConfiguration.java\n--- a/src/main/java/run/halo/app/config/HaloConfiguration.java\n+++ b/src/main/java/run/halo/app/config/HaloConfiguration.java\n@@ -21,6 +21,7 @@\n import run.halo.app.security.filter.ApiAuthenticationFilter;\n import run.halo.app.security.handler.AdminAuthenticationFailureHandler;\n import run.halo.app.security.handler.DefaultAuthenticationFailureHandler;\n+import run.halo.app.service.OptionService;\n import run.halo.app.service.UserService;\n import run.halo.app.utils.HttpClientUtils;\n \n@@ -113,8 +114,9 @@ public FilterRegistrationBean<ApiAuthenticationFilter> apiAuthenticationFilter(H\n     public FilterRegistrationBean<AdminAuthenticationFilter> adminAuthenticationFilter(StringCacheStore cacheStore,\n                                                                                        UserService userService,\n                                                                                        HaloProperties haloProperties,\n-                                                                                       ObjectMapper objectMapper) {\n-        AdminAuthenticationFilter adminAuthenticationFilter = new AdminAuthenticationFilter(cacheStore, userService, haloProperties);\n+                                                                                       ObjectMapper objectMapper,\n+                                                                                       OptionService optionService) {\n+        AdminAuthenticationFilter adminAuthenticationFilter = new AdminAuthenticationFilter(cacheStore, userService, haloProperties, optionService);\n \n         AdminAuthenticationFailureHandler failureHandler = new AdminAuthenticationFailureHandler();\n         failureHandler.setProductionEnv(haloProperties.isProductionEnv());\n\ndiff --git a/src/main/java/run/halo/app/controller/admin/api/AdminController.java b/src/main/java/run/halo/app/controller/admin/api/AdminController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/AdminController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/AdminController.java\n@@ -39,8 +39,9 @@ public StatisticDTO getCount() {\n         return adminService.getCount();\n     }\n \n-    @PostMapping(\"auth/login\")\n+    @PostMapping(\"login\")\n     @ApiOperation(\"Login\")\n+    @CacheLock\n     public AuthToken auth(@RequestBody @Valid LoginParam loginParam) {\n         return adminService.authenticate(loginParam);\n     }\n\ndiff --git a/src/main/java/run/halo/app/exception/NotInstallException.java b/src/main/java/run/halo/app/exception/NotInstallException.java\n--- a/src/main/java/run/halo/app/exception/NotInstallException.java\n+++ b/src/main/java/run/halo/app/exception/NotInstallException.java\n@@ -0,0 +1,18 @@\n+package run.halo.app.exception;\n+\n+/**\n+ * Not install exception.\n+ *\n+ * @author johnniang\n+ * @date 19-4-29\n+ */\n+public class NotInstallException extends BadRequestException {\n+\n+    public NotInstallException(String message) {\n+        super(message);\n+    }\n+\n+    public NotInstallException(String message, Throwable cause) {\n+        super(message, cause);\n+    }\n+}\n\ndiff --git a/src/main/java/run/halo/app/security/filter/AdminAuthenticationFilter.java b/src/main/java/run/halo/app/security/filter/AdminAuthenticationFilter.java\n--- a/src/main/java/run/halo/app/security/filter/AdminAuthenticationFilter.java\n+++ b/src/main/java/run/halo/app/security/filter/AdminAuthenticationFilter.java\n@@ -9,20 +9,22 @@\n import run.halo.app.cache.StringCacheStore;\n import run.halo.app.config.properties.HaloProperties;\n import run.halo.app.exception.AuthenticationException;\n+import run.halo.app.exception.NotInstallException;\n import run.halo.app.model.entity.User;\n+import run.halo.app.model.properties.PrimaryProperties;\n import run.halo.app.security.authentication.AuthenticationImpl;\n import run.halo.app.security.context.SecurityContextHolder;\n import run.halo.app.security.context.SecurityContextImpl;\n import run.halo.app.security.support.UserDetail;\n import run.halo.app.security.util.SecurityUtils;\n+import run.halo.app.service.OptionService;\n import run.halo.app.service.UserService;\n \n import javax.servlet.FilterChain;\n import javax.servlet.ServletException;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n import java.io.IOException;\n-import java.util.List;\n import java.util.Optional;\n \n /**\n@@ -64,25 +66,35 @@ public class AdminAuthenticationFilter extends AbstractAuthenticationFilter {\n \n     private final UserService userService;\n \n+    private final OptionService optionService;\n+\n     public AdminAuthenticationFilter(StringCacheStore cacheStore,\n                                      UserService userService,\n-                                     HaloProperties haloProperties) {\n+                                     HaloProperties haloProperties,\n+                                     OptionService optionService) {\n         super(haloProperties);\n         this.cacheStore = cacheStore;\n         this.userService = userService;\n         this.haloProperties = haloProperties;\n+        this.optionService = optionService;\n     }\n \n     @Override\n     protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n \n-        if (!haloProperties.isProductionEnv()) {\n-            List<User> users = userService.listAll();\n-            if (!users.isEmpty()) {\n-                // Set security context\n-                User user = users.get(0);\n-                SecurityContextHolder.setContext(new SecurityContextImpl(new AuthenticationImpl(new UserDetail(user))));\n-            }\n+        // Check whether the blog is installed or not\n+        Boolean isInstalled = optionService.getByPropertyOrDefault(PrimaryProperties.IS_INSTALLED, Boolean.class, false);\n+\n+        if (!isInstalled) {\n+            // If not installed\n+            getFailureHandler().onFailure(request, response, new NotInstallException(\"The blog has not been initialized yet!\"));\n+            return;\n+        }\n+\n+        if (!haloProperties.isAuthEnabled()) {\n+            userService.getCurrentUser().ifPresent(user ->\n+                    SecurityContextHolder.setContext(new SecurityContextImpl(new AuthenticationImpl(new UserDetail(user)))));\n+\n             // If authentication disabled\n             filterChain.doFilter(request, response);\n             return;\n@@ -141,6 +153,10 @@ private String getTokenFromRequest(@NonNull HttpServletRequest request) {\n         // Get from param\n         if (StringUtils.isBlank(token)) {\n             token = request.getParameter(ADMIN_TOKEN_PARAM_NAME);\n+\n+            log.debug(\"Got token from parameter: [{}: {}]\", ADMIN_TOKEN_PARAM_NAME, token);\n+        } else {\n+            log.debug(\"Got token from header: [{}: {}]\", ADMIN_TOKEN_HEADER_NAME, token);\n         }\n \n         return token;\n\ndiff --git a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/AdminServiceImpl.java\n@@ -78,7 +78,7 @@ public AuthToken authenticate(LoginParam loginParam) {\n \n         if (SecurityContextHolder.getContext().isAuthenticated()) {\n             // If the user has been logged in\n-            throw new BadRequestException(\"您已经登录，无需重复登录\");\n+            throw new BadRequestException(\"You have been logged in, do not log in repeatedly please\");\n         }\n \n         String username = loginParam.getUsername();",
    "output": "Check installation before requesting api"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/security/filter/AdminAuthenticationFilter.java b/src/main/java/run/halo/app/security/filter/AdminAuthenticationFilter.java\n--- a/src/main/java/run/halo/app/security/filter/AdminAuthenticationFilter.java\n+++ b/src/main/java/run/halo/app/security/filter/AdminAuthenticationFilter.java\n@@ -115,20 +115,6 @@ protected void doFilterInternal(HttpServletRequest request, HttpServletResponse\n             return;\n         }\n \n-        // Get info from session\n-        Object adminSessionValue = request.getSession().getAttribute(ADMIN_SESSION_KEY);\n-\n-        if (adminSessionValue instanceof UserDetail) {\n-            // Convert to user detail\n-            UserDetail userDetail = (UserDetail) adminSessionValue;\n-\n-            // Set security context\n-            SecurityContextHolder.setContext(new SecurityContextImpl(new AuthenticationImpl(userDetail)));\n-\n-            filterChain.doFilter(request, response);\n-            return;\n-        }\n-\n         if (shouldSkipAuthenticateFailure(request)) {\n             // If should skip this authentication failure\n             log.debug(\"Skipping authentication failure, url: [{}], method: [{}]\", request.getServletPath(), request.getMethod());",
    "output": "Remove session authentication"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/cache/lock/CacheLockInterceptor.java b/src/main/java/run/halo/app/cache/lock/CacheLockInterceptor.java\n--- a/src/main/java/run/halo/app/cache/lock/CacheLockInterceptor.java\n+++ b/src/main/java/run/halo/app/cache/lock/CacheLockInterceptor.java\n@@ -1,9 +1,5 @@\n package run.halo.app.cache.lock;\n \n-import run.halo.app.cache.StringCacheStore;\n-import run.halo.app.exception.FrequentAccessException;\n-import run.halo.app.exception.ServiceException;\n-import cn.hutool.extra.servlet.ServletUtil;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.lang3.StringUtils;\n import org.aspectj.lang.ProceedingJoinPoint;\n@@ -13,8 +9,11 @@\n import org.springframework.context.annotation.Configuration;\n import org.springframework.lang.NonNull;\n import org.springframework.util.Assert;\n+import run.halo.app.cache.StringCacheStore;\n+import run.halo.app.exception.FrequentAccessException;\n+import run.halo.app.exception.ServiceException;\n+import run.halo.app.utils.ServletUtils;\n \n-import javax.servlet.http.HttpServletRequest;\n import java.lang.annotation.Annotation;\n \n /**\n@@ -34,12 +33,8 @@ public class CacheLockInterceptor {\n \n     private final StringCacheStore cacheStore;\n \n-    private final HttpServletRequest httpServletRequest;\n-\n-    public CacheLockInterceptor(StringCacheStore cacheStore,\n-                                HttpServletRequest httpServletRequest) {\n+    public CacheLockInterceptor(StringCacheStore cacheStore) {\n         this.cacheStore = cacheStore;\n-        this.httpServletRequest = httpServletRequest;\n     }\n \n     @Around(\"@annotation(run.halo.app.cache.lock.CacheLock)\")\n@@ -121,7 +116,7 @@ private String buildCacheLockKey(@NonNull CacheLock cacheLock, @NonNull Proceedi\n \n         if (cacheLock.traceRequest()) {\n             // Append http request info\n-            cacheKeyBuilder.append(delimiter).append(ServletUtil.getClientIP(httpServletRequest));\n+            cacheKeyBuilder.append(delimiter).append(ServletUtils.getRequestIp());\n         }\n \n         return cacheKeyBuilder.toString();",
    "output": "Remove http servlet request inject"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/security/token/AuthToken.java b/src/main/java/run/halo/app/security/token/AuthToken.java\n--- a/src/main/java/run/halo/app/security/token/AuthToken.java\n+++ b/src/main/java/run/halo/app/security/token/AuthToken.java\n@@ -0,0 +1,32 @@\n+package run.halo.app.security.token;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.Data;\n+\n+/**\n+ * Access token.\n+ *\n+ * @author johnniang\n+ * @date 19-4-29\n+ */\n+@Data\n+public class AuthToken {\n+\n+    /**\n+     * Access token.\n+     */\n+    @JsonProperty(\"access_token\")\n+    private String accessToken;\n+\n+    /**\n+     * Expired in. (seconds)\n+     */\n+    @JsonProperty(\"expired_in\")\n+    private int expiredIn;\n+\n+    /**\n+     * Refresh token.\n+     */\n+    @JsonProperty(\"refresh_token\")\n+    private String refreshToken;\n+}",
    "output": "Create AuthToken entity"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/InstallController.java b/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n@@ -2,6 +2,7 @@\n \n import freemarker.template.Configuration;\n import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang3.StringUtils;\n import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.lang.NonNull;\n import org.springframework.stereotype.Controller;\n@@ -165,7 +166,8 @@ private void initSettings(InstallParam installParam) {\n         properties.put(PrimaryProperties.IS_INSTALLED, Boolean.TRUE.toString());\n         properties.put(BlogProperties.BLOG_LOCALE, installParam.getLocale());\n         properties.put(BlogProperties.BLOG_TITLE, installParam.getTitle());\n-        properties.put(BlogProperties.BLOG_URL, installParam.getUrl());\n+        properties.put(BlogProperties.BLOG_URL, StringUtils.isBlank(installParam.getUrl()) ?\n+                optionService.getBlogBaseUrl() : installParam.getUrl());\n         properties.put(PrimaryProperties.THEME, DEFAULT_THEME_ID);\n         properties.put(PrimaryProperties.BIRTHDAY, String.valueOf(System.currentTimeMillis()));\n         properties.put(EmailProperties.ENABLED, Boolean.FALSE.toString());",
    "output": "Replace blank blog url with machine ip when installing"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/HaloConfiguration.java b/src/main/java/run/halo/app/config/HaloConfiguration.java\n--- a/src/main/java/run/halo/app/config/HaloConfiguration.java\n+++ b/src/main/java/run/halo/app/config/HaloConfiguration.java\n@@ -124,7 +124,7 @@ public FilterRegistrationBean<AdminAuthenticationFilter> adminAuthenticationFilt\n         adminAuthenticationFilter.addExcludeUrlPatterns(\n                 \"/api/admin/login\",\n                 \"/api/admin/installations\",\n-                \"/api/admin/recoveries/migration/*\"\n+                \"/api/admin/recoveries/migrations/*\"\n         );\n         adminAuthenticationFilter.addTryAuthUrlMethodPattern(\"/api/admin/comments\", HttpMethod.POST.name());\n         adminAuthenticationFilter.addTryAuthUrlMethodPattern(\"/api/comments\", HttpMethod.POST.name());\n\ndiff --git a/src/main/java/run/halo/app/config/properties/HaloProperties.java b/src/main/java/run/halo/app/config/properties/HaloProperties.java\n--- a/src/main/java/run/halo/app/config/properties/HaloProperties.java\n+++ b/src/main/java/run/halo/app/config/properties/HaloProperties.java\n@@ -1,8 +1,12 @@\n package run.halo.app.config.properties;\n \n-import run.halo.app.model.support.HaloConst;\n import lombok.Data;\n import org.springframework.boot.context.properties.ConfigurationProperties;\n+import run.halo.app.model.support.HaloConst;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n \n /**\n  * Halo configuration properties.\n@@ -31,5 +35,9 @@ public class HaloProperties {\n     /**\n      * Work directory.\n      */\n-    private String workDir = HaloConst.USER_HOME + \"/halo/\";\n+    private String workDir = HaloConst.USER_HOME + \"/.halo/\";\n+\n+    public HaloProperties() throws IOException {\n+        Files.createDirectories(Paths.get(workDir));\n+    }\n }",
    "output": "Initialize work directory when starting up"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/OptionController.java b/src/main/java/run/halo/app/controller/admin/api/OptionController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/OptionController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/OptionController.java\n@@ -1,6 +1,7 @@\n package run.halo.app.controller.admin.api;\n \n import io.swagger.annotations.ApiOperation;\n+import org.springframework.util.CollectionUtils;\n import org.springframework.web.bind.annotation.*;\n import run.halo.app.model.dto.OptionDTO;\n import run.halo.app.model.params.OptionParam;\n@@ -38,12 +39,17 @@ public void saveOptions(@Valid @RequestBody List<OptionParam> optionParams) {\n \n     @GetMapping(\"map_view\")\n     @ApiOperation(\"Lists all options with map view\")\n-    public Map<String, Object> listAllWithMapView() {\n-        return optionService.listOptions();\n+    public Map<String, Object> listAllWithMapView(@RequestParam(value = \"key\", required = false) List<String> keys) {\n+        if (CollectionUtils.isEmpty(keys)) {\n+            return optionService.listOptions();\n+        }\n+\n+        return optionService.listOptions(keys);\n     }\n \n     @GetMapping(\"map_keys\")\n     @ApiOperation(\"List all of options by keys\")\n+    @Deprecated\n     public Map<String, Object> listByKeysWithMapView(@RequestParam(value = \"keys\") String keys) {\n         return optionService.listByKeys(keys);\n     }\n\ndiff --git a/src/main/java/run/halo/app/service/OptionService.java b/src/main/java/run/halo/app/service/OptionService.java\n--- a/src/main/java/run/halo/app/service/OptionService.java\n+++ b/src/main/java/run/halo/app/service/OptionService.java\n@@ -73,13 +73,17 @@ public interface OptionService extends CrudService<Option, Integer> {\n     @NonNull\n     Map<String, Object> listOptions();\n \n+    @NonNull\n+    Map<String, Object> listOptions(List<String> keys);\n+\n     /**\n      * List by keys\n      *\n      * @param params params\n      * @return Map\n      */\n     @NonNull\n+    @Deprecated\n     Map<String, Object> listByKeys(String params);\n \n     /**\n\ndiff --git a/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java b/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n@@ -178,6 +178,23 @@ public Map<String, Object> listOptions() {\n         });\n     }\n \n+    @Override\n+    public Map<String, Object> listOptions(List<String> keys) {\n+        if (CollectionUtils.isEmpty(keys)) {\n+            return Collections.emptyMap();\n+        }\n+\n+        Map<String, Object> optionMap = listOptions();\n+\n+        Map<String, Object> result = new HashMap<>(keys.size());\n+\n+        keys.stream()\n+                .filter(optionMap::containsKey)\n+                .forEach(key -> result.put(key, optionMap.get(key)));\n+\n+        return result;\n+    }\n+\n     @Override\n     public Map<String, Object> listByKeys(String params) {\n         Assert.notNull(params, \"Keys must not be null\");",
    "output": "Refactor list options by keys"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/security/filter/AdminAuthenticationFilter.java b/src/main/java/run/halo/app/security/filter/AdminAuthenticationFilter.java\n--- a/src/main/java/run/halo/app/security/filter/AdminAuthenticationFilter.java\n+++ b/src/main/java/run/halo/app/security/filter/AdminAuthenticationFilter.java\n@@ -15,7 +15,6 @@\n import run.halo.app.security.context.SecurityContextImpl;\n import run.halo.app.security.support.UserDetail;\n import run.halo.app.service.UserService;\n-import run.halo.app.utils.JsonUtils;\n \n import javax.servlet.FilterChain;\n import javax.servlet.ServletException;\n@@ -84,15 +83,14 @@ protected void doFilterInternal(HttpServletRequest request, HttpServletResponse\n         if (StringUtils.isNotBlank(token)) {\n \n             // Valid the token\n-            // TODO Add key prefix\n-            Optional<String> userDetailOptional = cacheStore.get(token);\n+            Optional<UserDetail> optionalUserDetail = cacheStore.getAny(token, UserDetail.class);\n \n-            if (!userDetailOptional.isPresent()) {\n+            if (!optionalUserDetail.isPresent()) {\n                 getFailureHandler().onFailure(request, response, new AuthenticationException(\"The token has been expired or not exist\").setErrorData(token));\n                 return;\n             }\n \n-            UserDetail userDetail = JsonUtils.jsonToObject(userDetailOptional.get(), UserDetail.class);\n+            UserDetail userDetail = optionalUserDetail.get();\n \n             // Set security\n             SecurityContextHolder.setContext(new SecurityContextImpl(new AuthenticationImpl(userDetail)));\n\ndiff --git a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n@@ -36,7 +36,6 @@\n import run.halo.app.utils.FileUtils;\n import run.halo.app.utils.FilenameUtils;\n import run.halo.app.utils.HaloUtils;\n-import run.halo.app.utils.JsonUtils;\n \n import java.io.ByteArrayInputStream;\n import java.io.File;\n@@ -122,12 +121,13 @@ public Optional<ThemeProperty> getThemeBy(String themeId) {\n \n     @Override\n     public Set<ThemeProperty> getThemes() {\n-        Optional<String> themeCacheString = cacheStore.get(THEMES_CACHE_KEY);\n+\n+        Optional<ThemeProperty[]> themePropertiesOptional = cacheStore.getAny(THEMES_CACHE_KEY, ThemeProperty[].class);\n \n         try {\n-            if (themeCacheString.isPresent()) {\n+            if (themePropertiesOptional.isPresent()) {\n                 // Convert to theme properties\n-                ThemeProperty[] themeProperties = JsonUtils.jsonToObject(themeCacheString.get(), ThemeProperty[].class);\n+                ThemeProperty[] themeProperties = themePropertiesOptional.get();\n                 return new HashSet<>(Arrays.asList(themeProperties));\n             }\n \n@@ -142,7 +142,7 @@ public Set<ThemeProperty> getThemes() {\n             Set<ThemeProperty> themes = themePaths.stream().map(this::getProperty).collect(Collectors.toSet());\n \n             // Cache the themes\n-            cacheStore.put(THEMES_CACHE_KEY, JsonUtils.objectToJson(themes));\n+            cacheStore.putAny(THEMES_CACHE_KEY, themes);\n \n             return themes;\n         } catch (IOException e) {\n\ndiff --git a/src/main/java/run/halo/app/service/impl/UserServiceImpl.java b/src/main/java/run/halo/app/service/impl/UserServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/UserServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/UserServiceImpl.java\n@@ -128,7 +128,7 @@ public User login(String key, String password, HttpSession httpSession) {\n         if (!BCrypt.checkpw(password, user.getPassword())) {\n             // If the password is mismatch\n             // Add login failure count\n-            Integer loginFailureCount = stringCacheStore.get(LOGIN_FAILURE_COUNT_KEY).map(Integer::valueOf).orElse(0);\n+            Integer loginFailureCount = stringCacheStore.getAny(LOGIN_FAILURE_COUNT_KEY, Integer.class).orElse(0);\n \n             if (loginFailureCount >= MAX_LOGIN_TRY - 1) {\n                 // Set expiration\n@@ -139,7 +139,7 @@ public User login(String key, String password, HttpSession httpSession) {\n \n             loginFailureCount++;\n \n-            stringCacheStore.put(LOGIN_FAILURE_COUNT_KEY, loginFailureCount.toString(), LOCK_MINUTES, TimeUnit.MINUTES);\n+            stringCacheStore.putAny(LOGIN_FAILURE_COUNT_KEY, loginFailureCount, LOCK_MINUTES, TimeUnit.MINUTES);\n \n             int remainder = MAX_LOGIN_TRY - loginFailureCount;\n ",
    "output": "Refactor string cache store usage"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/cache/StringCacheStore.java b/src/main/java/run/halo/app/cache/StringCacheStore.java\n--- a/src/main/java/run/halo/app/cache/StringCacheStore.java\n+++ b/src/main/java/run/halo/app/cache/StringCacheStore.java\n@@ -1,6 +1,15 @@\n package run.halo.app.cache;\n \n+import com.fasterxml.jackson.core.JsonProcessingException;\n import lombok.extern.slf4j.Slf4j;\n+import org.springframework.lang.NonNull;\n+import org.springframework.util.Assert;\n+import run.halo.app.exception.ServiceException;\n+import run.halo.app.utils.JsonUtils;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n \n /**\n  * String cache store.\n@@ -10,4 +19,32 @@\n @Slf4j\n public abstract class StringCacheStore extends AbstractCacheStore<String, String> {\n \n+    public <T> void putAny(String key, T value) {\n+        try {\n+            put(key, JsonUtils.objectToJson(value));\n+        } catch (JsonProcessingException e) {\n+            throw new ServiceException(\"Failed to convert \" + value + \" to json\", e);\n+        }\n+    }\n+\n+    public <T> void putAny(@NonNull String key, @NonNull T value, long timeout, @NonNull TimeUnit timeUnit) {\n+        try {\n+            put(key, JsonUtils.objectToJson(value), timeout, timeUnit);\n+        } catch (JsonProcessingException e) {\n+            throw new ServiceException(\"Failed to convert \" + value + \" to json\", e);\n+        }\n+    }\n+\n+    public <T> Optional<T> getAny(String key, Class<T> type) {\n+        Assert.notNull(type, \"Type must not be null\");\n+\n+        return get(key).map(value -> {\n+            try {\n+                return JsonUtils.jsonToObject(value, type);\n+            } catch (IOException e) {\n+                log.error(\"Failed to convert json to type: \" + type.getName(), e);\n+                return null;\n+            }\n+        });\n+    }\n }\n\ndiff --git a/src/test/java/run/halo/app/utils/JsonUtilsTest.java b/src/test/java/run/halo/app/utils/JsonUtilsTest.java\n--- a/src/test/java/run/halo/app/utils/JsonUtilsTest.java\n+++ b/src/test/java/run/halo/app/utils/JsonUtilsTest.java\n@@ -0,0 +1,27 @@\n+package run.halo.app.utils;\n+\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * @author johnniang\n+ * @date 19-4-29\n+ */\n+public class JsonUtilsTest {\n+\n+    @Test\n+    public void longConvertTest() throws IOException {\n+        long num = 10;\n+\n+        String result = JsonUtils.objectToJson(num);\n+\n+        assertEquals(\"10\", result);\n+\n+        num = JsonUtils.jsonToObject(\"10\", Long.class);\n+\n+        assertEquals(10, num);\n+    }\n+}\n\\ No newline at end of file",
    "output": "Enhance string cache store"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java b/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n--- a/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n+++ b/src/main/java/run/halo/app/event/freemarker/FreemarkerConfigAwareListener.java\n@@ -1,4 +1,4 @@\n-package run.halo.app.event.theme;\n+package run.halo.app.event.freemarker;\n \n import freemarker.template.Configuration;\n import freemarker.template.TemplateModelException;\n@@ -9,6 +9,8 @@\n import org.springframework.core.annotation.Order;\n import org.springframework.scheduling.annotation.Async;\n import org.springframework.stereotype.Component;\n+import run.halo.app.event.options.OptionUpdatedEvent;\n+import run.halo.app.event.theme.ThemeActivatedEvent;\n import run.halo.app.event.user.UserUpdatedEvent;\n import run.halo.app.handler.theme.config.support.ThemeProperty;\n import run.halo.app.service.OptionService;\n@@ -76,11 +78,19 @@ public void onThemeActivatedEvent(ThemeActivatedEvent themeActivatedEvent) throw\n     @Async\n     @EventListener\n     public void onUserUpdate(UserUpdatedEvent event) throws TemplateModelException {\n-        log.debug(\"Received user update event, user id: [{}]\", event.getUserId());\n+        log.debug(\"Received user updated event, user id: [{}]\", event.getUserId());\n \n         loadUserConfig();\n     }\n \n+    @Async\n+    @EventListener\n+    public void onOptionUpdate(OptionUpdatedEvent event) throws TemplateModelException {\n+        log.debug(\"Received option updated event\");\n+\n+        loadOptionsConfig();\n+    }\n+\n \n     private void loadUserConfig() throws TemplateModelException {\n         configuration.setSharedVariable(\"user\", userService.getCurrentUser().orElse(null));\n\ndiff --git a/src/main/java/run/halo/app/event/options/OptionUpdatedEvent.java b/src/main/java/run/halo/app/event/options/OptionUpdatedEvent.java\n--- a/src/main/java/run/halo/app/event/options/OptionUpdatedEvent.java\n+++ b/src/main/java/run/halo/app/event/options/OptionUpdatedEvent.java\n@@ -0,0 +1,21 @@\n+package run.halo.app.event.options;\n+\n+import org.springframework.context.ApplicationEvent;\n+\n+/**\n+ * Option updated event.\n+ *\n+ * @author johnniang\n+ * @date 19-4-29\n+ */\n+public class OptionUpdatedEvent extends ApplicationEvent {\n+\n+    /**\n+     * Create a new ApplicationEvent.\n+     *\n+     * @param source the object on which the event initially occurred (never {@code null})\n+     */\n+    public OptionUpdatedEvent(Object source) {\n+        super(source);\n+    }\n+}\n\ndiff --git a/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java b/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n@@ -5,10 +5,12 @@\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.lang3.StringUtils;\n import org.springframework.context.ApplicationContext;\n+import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.stereotype.Service;\n import org.springframework.util.Assert;\n import org.springframework.util.CollectionUtils;\n import run.halo.app.cache.StringCacheStore;\n+import run.halo.app.event.options.OptionUpdatedEvent;\n import run.halo.app.exception.MissingPropertyException;\n import run.halo.app.model.dto.OptionDTO;\n import run.halo.app.model.entity.Option;\n@@ -43,13 +45,17 @@ public class OptionServiceImpl extends AbstractCrudService<Option, Integer> impl\n \n     private final Map<String, PropertyEnum> propertyEnumMap;\n \n+    private final ApplicationEventPublisher eventPublisher;\n+\n     public OptionServiceImpl(OptionRepository optionRepository,\n                              ApplicationContext applicationContext,\n-                             StringCacheStore cacheStore) {\n+                             StringCacheStore cacheStore,\n+                             ApplicationEventPublisher eventPublisher) {\n         super(optionRepository);\n         this.optionRepository = optionRepository;\n         this.applicationContext = applicationContext;\n         this.cacheStore = cacheStore;\n+        this.eventPublisher = eventPublisher;\n \n         propertyEnumMap = Collections.unmodifiableMap(PropertyEnum.getValuePropertyEnumMap());\n     }\n@@ -96,6 +102,8 @@ public void save(Map<String, String> options) {\n \n         // TODO Optimize the queries\n         options.forEach(this::save);\n+\n+        publishEvent();\n     }\n \n     @Override\n@@ -106,13 +114,17 @@ public void save(List<OptionParam> optionParams) {\n \n         // TODO Optimize the query\n         optionParams.forEach(optionParam -> save(optionParam.getKey(), optionParam.getValue()));\n+\n+        publishEvent();\n     }\n \n     @Override\n     public void saveProperty(PropertyEnum property, String value) {\n         Assert.notNull(property, \"Property must not be null\");\n \n         save(property.getValue(), value);\n+\n+        publishEvent();\n     }\n \n     @Override\n@@ -122,6 +134,8 @@ public void saveProperties(Map<? extends PropertyEnum, String> properties) {\n         }\n \n         properties.forEach((property, value) -> save(property.getValue(), value));\n+\n+        publishEvent();\n     }\n \n     @Override\n@@ -164,11 +178,11 @@ public Map<String, Object> listOptions() {\n     @Override\n     public Map<String, Object> listByKeys(String params) {\n         Assert.notNull(params, \"Keys must not be null\");\n-        Map<String,Object> options = listOptions();\n-        Map<String,Object> result = new HashMap<>();\n+        Map<String, Object> options = listOptions();\n+        Map<String, Object> result = new HashMap<>();\n         String[] keysParam = params.split(\",\");\n         for (String key : keysParam) {\n-            result.put(key,options.get(key));\n+            result.put(key, options.get(key));\n         }\n         return result;\n     }\n@@ -342,4 +356,8 @@ public String getBlogBaseUrl() {\n \n         return blogUrl;\n     }\n+\n+    private void publishEvent() {\n+        eventPublisher.publishEvent(new OptionUpdatedEvent(this));\n+    }\n }",
    "output": "Complete option updated event"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/RecoveryController.java b/src/main/java/run/halo/app/controller/admin/api/RecoveryController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/RecoveryController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/RecoveryController.java\n@@ -7,6 +7,7 @@\n import org.springframework.web.bind.annotation.RequestPart;\n import org.springframework.web.bind.annotation.RestController;\n import org.springframework.web.multipart.MultipartFile;\n+import run.halo.app.cache.lock.CacheLock;\n import run.halo.app.exception.BadRequestException;\n import run.halo.app.model.properties.PrimaryProperties;\n import run.halo.app.service.OptionService;\n@@ -34,6 +35,7 @@ public RecoveryController(RecoveryService recoveryService,\n \n     @PostMapping(\"migrations/v0_4_3\")\n     @ApiOperation(\"Migrates from halo v0.4.3\")\n+    @CacheLock\n     public void migrateFromVersion_0_4_3(\n             @ApiParam(\"This file content type should be json\")\n             @RequestPart(\"file\") MultipartFile file) {\n\ndiff --git a/src/main/java/run/halo/app/service/base/BaseCommentService.java b/src/main/java/run/halo/app/service/base/BaseCommentService.java\n--- a/src/main/java/run/halo/app/service/base/BaseCommentService.java\n+++ b/src/main/java/run/halo/app/service/base/BaseCommentService.java\n@@ -29,6 +29,7 @@ public interface BaseCommentService<COMMENT extends BaseComment> extends CrudSer\n      * %s: parent commentator author name\n      * %s: comment content\n      */\n+    @Deprecated\n     String COMMENT_TEMPLATE = \"<a href='#comment-id-%d'>@%s</a> %s\";\n \n     /**\n@@ -157,7 +158,7 @@ public interface BaseCommentService<COMMENT extends BaseComment> extends CrudSer\n     /**\n      * Target must exist.\n      *\n-     * @param targetId target id must not be null\n+     * @param targetId target id must not be null (post id, sheet id or journal id)\n      */\n     void targetMustExist(@NonNull Integer targetId);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java b/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n@@ -105,17 +105,10 @@ public Page<BaseCommentVO> pageVosBy(Integer postId, Pageable pageable) {\n         // List all the top comments (Caution: This list will be cleared)\n         List<COMMENT> comments = baseCommentRepository.findAllByPostIdAndStatus(postId, CommentStatus.PUBLISHED);\n \n-        // Init the top virtual comment\n-        BaseCommentVO topVirtualComment = new BaseCommentVO();\n-        topVirtualComment.setId(0L);\n-        topVirtualComment.setChildren(new LinkedList<>());\n-\n         Comparator<BaseCommentVO> commentVOComparator = buildCommentComparator(pageable.getSortOr(Sort.by(Sort.Direction.DESC, \"createTime\")));\n \n-        // Concrete the comment tree\n-        concreteTree(topVirtualComment, new LinkedList<>(comments), commentVOComparator);\n-\n-        List<BaseCommentVO> topComments = topVirtualComment.getChildren();\n+        // Convert to vo\n+        List<BaseCommentVO> topComments = convertToVo(comments, commentVOComparator);\n \n         List<BaseCommentVO> pageContent;\n \n@@ -370,6 +363,30 @@ protected Comparator<BaseCommentVO> buildCommentComparator(Sort sort) {\n         };\n     }\n \n+    /**\n+     * Converts to base comment vo tree.\n+     *\n+     * @param comments   comments list could be null\n+     * @param comparator comment comparator could be null\n+     * @return a comment vo tree\n+     */\n+    @NonNull\n+    protected List<BaseCommentVO> convertToVo(@Nullable List<COMMENT> comments, @Nullable Comparator<BaseCommentVO> comparator) {\n+        if (CollectionUtils.isEmpty(comments)) {\n+            return Collections.emptyList();\n+        }\n+\n+        // Init the top virtual comment\n+        BaseCommentVO topVirtualComment = new BaseCommentVO();\n+        topVirtualComment.setId(0L);\n+        topVirtualComment.setChildren(new LinkedList<>());\n+\n+        // Concrete the comment tree\n+        concreteTree(topVirtualComment, new LinkedList<>(comments), comparator);\n+\n+        return topVirtualComment.getChildren();\n+    }\n+\n     /**\n      * Concretes comment tree.\n      *\n@@ -379,9 +396,8 @@ protected Comparator<BaseCommentVO> buildCommentComparator(Sort sort) {\n      */\n     protected void concreteTree(@NonNull BaseCommentVO parentComment,\n                                 @Nullable Collection<COMMENT> comments,\n-                                @NonNull Comparator<BaseCommentVO> commentComparator) {\n+                                @Nullable Comparator<BaseCommentVO> commentComparator) {\n         Assert.notNull(parentComment, \"Parent comment must not be null\");\n-        Assert.notNull(commentComparator, \"Comment comparator must not be null\");\n \n         if (CollectionUtils.isEmpty(comments)) {\n             return;\n@@ -419,7 +435,9 @@ protected void concreteTree(@NonNull BaseCommentVO parentComment,\n             // Recursively concrete the children\n             parentComment.getChildren().forEach(childComment -> concreteTree(childComment, comments, commentComparator));\n             // Sort the children\n-            parentComment.getChildren().sort(commentComparator);\n+            if (commentComparator != null) {\n+                parentComment.getChildren().sort(commentComparator);\n+            }\n         }\n     }\n ",
    "output": "Refactor pageVosBy in BaseCommentService"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/OptionController.java b/src/main/java/run/halo/app/controller/admin/api/OptionController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/OptionController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/OptionController.java\n@@ -42,6 +42,12 @@ public Map<String, Object> listAllWithMapView() {\n         return optionService.listOptions();\n     }\n \n+    @GetMapping(\"map_keys\")\n+    @ApiOperation(\"List all of options by keys\")\n+    public Map<String, Object> listByKeysWithMapView(@RequestParam(value = \"keys\") String keys) {\n+        return optionService.listByKeys(keys);\n+    }\n+\n     @PostMapping(\"map_view/saving\")\n     @ApiOperation(\"Saves options by option map\")\n     public void saveOptionsWithMapView(@RequestBody Map<String, String> optionMap) {\n\ndiff --git a/src/main/java/run/halo/app/service/OptionService.java b/src/main/java/run/halo/app/service/OptionService.java\n--- a/src/main/java/run/halo/app/service/OptionService.java\n+++ b/src/main/java/run/halo/app/service/OptionService.java\n@@ -80,6 +80,15 @@ public interface OptionService extends CrudService<Option, Integer> {\n     @NonNull\n     Map<String, Object> listOptions();\n \n+    /**\n+     * List by keys\n+     *\n+     * @param params params\n+     * @return Map\n+     */\n+    @NonNull\n+    Map<String, Object> listByKeys(String params);\n+\n     /**\n      * Lists all option dtos.\n      *\n\ndiff --git a/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java b/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n@@ -161,6 +161,18 @@ public Map<String, Object> listOptions() {\n         return result;\n     }\n \n+    @Override\n+    public Map<String, Object> listByKeys(String params) {\n+        Assert.notNull(params, \"Keys must not be null\");\n+        Map<String,Object> options = listOptions();\n+        Map<String,Object> result = new HashMap<>();\n+        String[] keysParam = params.split(\",\");\n+        for (String key : keysParam) {\n+            result.put(key,options.get(key));\n+        }\n+        return result;\n+    }\n+\n     @Override\n     public List<OptionDTO> listDtos() {\n         return listAll().stream().map(option -> new OptionDTO().<OptionDTO>convertFrom(option)).collect(Collectors.toList());",
    "output": "Create tree_keys api for option."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/InstallController.java b/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n@@ -5,8 +5,11 @@\n import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.lang.NonNull;\n import org.springframework.stereotype.Controller;\n-import org.springframework.web.bind.annotation.*;\n-import org.springframework.web.multipart.MultipartFile;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+import run.halo.app.cache.lock.CacheLock;\n import run.halo.app.event.logger.LogEvent;\n import run.halo.app.exception.BadRequestException;\n import run.halo.app.model.entity.*;\n@@ -72,6 +75,7 @@ public InstallController(UserService userService,\n \n     @PostMapping\n     @ResponseBody\n+    @CacheLock\n     public BaseResponse<String> installBlog(@RequestBody @Valid InstallParam installParam) {\n         // TODO Install blog.\n         // Check is installed\n\ndiff --git a/src/main/java/run/halo/app/service/impl/UserServiceImpl.java b/src/main/java/run/halo/app/service/impl/UserServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/UserServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/UserServiceImpl.java\n@@ -8,6 +8,7 @@\n import org.springframework.util.Assert;\n import org.springframework.util.CollectionUtils;\n import run.halo.app.cache.StringCacheStore;\n+import run.halo.app.cache.lock.CacheLock;\n import run.halo.app.event.logger.LogEvent;\n import run.halo.app.exception.BadRequestException;\n import run.halo.app.exception.NotFoundException;\n@@ -202,6 +203,17 @@ public User createBy(UserParam userParam) {\n         return create(user);\n     }\n \n+    @Override\n+    @CacheLock\n+    public User create(User user) {\n+        // Check user\n+        if (count() != 0) {\n+            throw new BadRequestException(\"This blog already exists a blogger\");\n+        }\n+\n+        return super.create(user);\n+    }\n+\n     @Override\n     public User update(User user) {\n         User updatedUser = super.update(user);",
    "output": "Prevent to create one more users"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java b/src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/BasePostServiceImpl.java\n@@ -307,10 +307,10 @@ protected void urlMustNotExist(@NonNull POST post) {\n \n         if (ServiceUtils.isEmptyId(post.getId())) {\n             // The sheet will be created\n-            exist = basePostRepository.countByUrl(post.getUrl());\n+            exist = basePostRepository.existsByUrl(post.getUrl());\n         } else {\n             // The sheet will be updated\n-            exist = basePostRepository.countByIdNotAndUrl(post.getId(), post.getUrl());\n+            exist = basePostRepository.existsByIdNotAndUrl(post.getId(), post.getUrl());\n         }\n \n         if (exist) {",
    "output": "Fix existence query bug again"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/repository/base/BasePostRepository.java b/src/main/java/run/halo/app/repository/base/BasePostRepository.java\n--- a/src/main/java/run/halo/app/repository/base/BasePostRepository.java\n+++ b/src/main/java/run/halo/app/repository/base/BasePostRepository.java\n@@ -108,9 +108,9 @@ public interface BasePostRepository<POST extends BasePost> extends BaseRepositor\n      */\n     long countByStatus(@NonNull PostStatus status);\n \n-    boolean countByUrl(@NonNull String title);\n+    boolean existsByUrl(@NonNull String title);\n \n-    boolean countByIdNotAndUrl(@NonNull Integer id, @NonNull String title);\n+    boolean existsByIdNotAndUrl(@NonNull Integer id, @NonNull String title);\n \n     /**\n      * Get post by url",
    "output": "Fix existence query bug"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/event/theme/FreemarkerConfigAwareListener.java b/src/main/java/run/halo/app/event/theme/FreemarkerConfigAwareListener.java\n--- a/src/main/java/run/halo/app/event/theme/FreemarkerConfigAwareListener.java\n+++ b/src/main/java/run/halo/app/event/theme/FreemarkerConfigAwareListener.java\n@@ -58,9 +58,11 @@ public FreemarkerConfigAwareListener(OptionService optionService,\n     @Order(Ordered.HIGHEST_PRECEDENCE + 1)\n     public void onApplicationStartedEvent(ApplicationStartedEvent applicationStartedEvent) {\n         try {\n+            configuration.setSharedVariable(\"theme\", themeService.getActivatedTheme());\n             configuration.setSharedVariable(\"options\", optionsService.listOptions());\n             configuration.setSharedVariable(\"user\", userService.getCurrentUser().orElse(null));\n             configuration.setSharedVariable(\"settings\", themeSettingService.listAsMapBy(themeService.getActivatedThemeId()));\n+            log.info(\"Initialized freemarker configuration\");\n         } catch (TemplateModelException e) {\n             log.warn(\"Failed to configure freemarker\", e);\n             // Ignore this error\n@@ -70,8 +72,10 @@ public void onApplicationStartedEvent(ApplicationStartedEvent applicationStarted\n     @Async\n     @EventListener\n     public void onThemeActivatedEvent(ThemeActivatedEvent themeActivatedEvent) {\n+        log.debug(\"Received theme activated event\");\n+\n         try {\n-            ThemeProperty activatedTheme = themeActivatedEvent.getThemeProperty();\n+            ThemeProperty activatedTheme = themeService.getActivatedTheme();\n             log.debug(\"Set shared variable theme: [{}]\", activatedTheme);\n             configuration.setSharedVariable(\"theme\", activatedTheme);\n             Map<String, Object> options = optionService.listOptions();\n@@ -81,6 +85,7 @@ public void onThemeActivatedEvent(ThemeActivatedEvent themeActivatedEvent) {\n             configuration.setSharedVariable(\"settings\", themeSettingService.listAsMapBy(themeService.getActivatedThemeId()));\n         } catch (TemplateModelException e) {\n             log.warn(\"Failed to configure freemarker\", e);\n+            // Ignore this error\n         }\n     }\n }\n\ndiff --git a/src/main/java/run/halo/app/event/theme/ThemeActivatedEvent.java b/src/main/java/run/halo/app/event/theme/ThemeActivatedEvent.java\n--- a/src/main/java/run/halo/app/event/theme/ThemeActivatedEvent.java\n+++ b/src/main/java/run/halo/app/event/theme/ThemeActivatedEvent.java\n@@ -13,21 +13,13 @@\n  */\n public class ThemeActivatedEvent extends ApplicationEvent {\n \n-    private final ThemeProperty themeProperty;\n-\n     /**\n      * Creates a new ApplicationEvent.\n      *\n-     * @param source        the object on which the event initially occurred (never {@code null})\n-     * @param themeProperty theme property must not be null\n+     * @param source the object on which the event initially occurred (never {@code null})\n      */\n-    public ThemeActivatedEvent(Object source, @NonNull ThemeProperty themeProperty) {\n+    public ThemeActivatedEvent(Object source) {\n         super(source);\n-        Assert.notNull(themeProperty, \"Activated theme property must not be null\");\n-        this.themeProperty = themeProperty;\n     }\n \n-    public ThemeProperty getThemeProperty() {\n-        return themeProperty;\n-    }\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n@@ -332,7 +332,7 @@ public ThemeProperty activateTheme(String themeId) {\n         clearThemeCache();\n \n         // Publish a theme activated event\n-        eventPublisher.publishEvent(new ThemeActivatedEvent(this, themeProperty));\n+        eventPublisher.publishEvent(new ThemeActivatedEvent(this));\n \n         return themeProperty;\n     }",
    "output": "Remove theme property in theme activated event"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/InstallController.java b/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/InstallController.java\n@@ -1,12 +1,9 @@\n-package run.halo.app.controller.core;\n+package run.halo.app.controller.admin.api;\n \n-import cn.hutool.core.util.StrUtil;\n import freemarker.template.Configuration;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.stereotype.Controller;\n-import org.springframework.ui.Model;\n-import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.PostMapping;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.ResponseBody;\n@@ -71,26 +68,6 @@ public InstallController(UserService userService,\n         this.eventPublisher = eventPublisher;\n     }\n \n-    /**\n-     * Render install page\n-     *\n-     * @param model model\n-     * @return template path: common/install.ftl\n-     */\n-    @GetMapping\n-    public String install(Model model) {\n-        try {\n-            if (StrUtil.equals(Boolean.TRUE.toString(), optionService.getByProperty(PrimaryProperties.IS_INSTALLED).orElse(Boolean.FALSE.toString()))) {\n-                model.addAttribute(\"isInstall\", true);\n-            } else {\n-                model.addAttribute(\"isInstall\", false);\n-            }\n-        } catch (Exception e) {\n-            log.error(\"Error occurred\", e);\n-        }\n-        return \"common/install\";\n-    }\n-\n     @PostMapping\n     @ResponseBody\n     public BaseResponse<?> installBlog(@Valid InstallParam installParam) {",
    "output": "Remove useless installation render"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/JournalController.java b/src/main/java/run/halo/app/controller/admin/api/JournalController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/JournalController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/JournalController.java\n@@ -80,15 +80,11 @@ public JournalDTO updateBy(@PathVariable(\"id\") Integer id,\n         return new JournalDTO().convertFrom(journalService.update(journal));\n     }\n \n-    /**\n-     * Delete journal by id.\n-     *\n-     * @param journalId journalId\n-     */\n     @DeleteMapping(\"{journalId:\\\\d+}\")\n-    @ApiOperation(\"Delete link by id\")\n-    public void deletePermanently(@PathVariable(\"journalId\") Integer journalId) {\n-        journalService.removeById(journalId);\n+    @ApiOperation(\"Delete journal\")\n+    public JournalDTO deleteBy(@PathVariable(\"journalId\") Integer journalId) {\n+        Journal deletedJournal = journalService.removeById(journalId);\n+        return journalService.convertTo(deletedJournal);\n     }\n \n     @GetMapping(\"{journalId:\\\\d+}/comments/tree_view\")\n\ndiff --git a/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java b/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n@@ -16,7 +16,6 @@\n import run.halo.app.event.comment.CommentNewEvent;\n import run.halo.app.event.comment.CommentPassEvent;\n import run.halo.app.event.comment.CommentReplyEvent;\n-import run.halo.app.exception.NotFoundException;\n import run.halo.app.model.dto.BaseCommentDTO;\n import run.halo.app.model.entity.BaseComment;\n import run.halo.app.model.entity.User;\n@@ -29,7 +28,6 @@\n import run.halo.app.model.support.CommentPage;\n import run.halo.app.model.vo.BaseCommentVO;\n import run.halo.app.model.vo.BaseCommentWithParentVO;\n-import run.halo.app.repository.PostRepository;\n import run.halo.app.repository.base.BaseCommentRepository;\n import run.halo.app.security.authentication.Authentication;\n import run.halo.app.security.context.SecurityContextHolder;\n@@ -359,16 +357,16 @@ protected Comparator<BaseCommentVO> buildCommentComparator(Sort sort) {\n             Assert.notNull(toCompareComment, \"Comment to compare must not be null\");\n \n             // Get sort order\n-            Sort.Order order = sort.filter(anOrder -> anOrder.getProperty().equals(\"createTime\"))\n+            Sort.Order order = sort.filter(anOrder -> anOrder.getProperty().equals(\"id\"))\n                     .get()\n                     .findFirst()\n-                    .orElseGet(() -> Sort.Order.desc(\"createTime\"));\n+                    .orElseGet(() -> Sort.Order.desc(\"id\"));\n \n             // Init sign\n             int sign = order.getDirection().isAscending() ? 1 : -1;\n \n-            // Compare createTime property\n-            return sign * currentComment.getCreateTime().compareTo(toCompareComment.getCreateTime());\n+            // Compare id property\n+            return sign * currentComment.getId().compareTo(toCompareComment.getId());\n         };\n     }\n ",
    "output": "Fix comment sort bug"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/dto/MenuDTO.java b/src/main/java/run/halo/app/model/dto/MenuDTO.java\n--- a/src/main/java/run/halo/app/model/dto/MenuDTO.java\n+++ b/src/main/java/run/halo/app/model/dto/MenuDTO.java\n@@ -19,7 +19,7 @@ public class MenuDTO implements OutputConverter<MenuDTO, Menu> {\n \n     private String url;\n \n-    private Integer sort;\n+    private Integer priority;\n \n     private String target;\n \n\ndiff --git a/src/main/java/run/halo/app/model/params/MenuParam.java b/src/main/java/run/halo/app/model/params/MenuParam.java\n--- a/src/main/java/run/halo/app/model/params/MenuParam.java\n+++ b/src/main/java/run/halo/app/model/params/MenuParam.java\n@@ -28,7 +28,7 @@ public class MenuParam implements InputConverter<Menu> {\n     private String url;\n \n     @Min(value = 0, message = \"Menu priority must not be less than {value}\")\n-    private Integer sort;\n+    private Integer priority;\n \n     @Size(max = 50, message = \"Length of menu target must not be more than {max}\")\n     private String target;",
    "output": "Change menu sort to priority."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/JournalController.java b/src/main/java/run/halo/app/controller/admin/api/JournalController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/JournalController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/JournalController.java\n@@ -53,7 +53,7 @@ public JournalController(JournalService journalService,\n     @ApiOperation(\"Gets latest journals\")\n     public Page<JournalWithCmtCountDTO> pageBy(@PageableDefault(sort = \"updateTime\", direction = DESC) Pageable pageable,\n                                                JournalQuery journalQuery) {\n-        Page<Journal> journalPage = journalService.pageBy(journalQuery,pageable);\n+        Page<Journal> journalPage = journalService.pageBy(journalQuery, pageable);\n         return journalService.convertToCmtCountDto(journalPage);\n     }\n \n@@ -80,6 +80,17 @@ public JournalDTO updateBy(@PathVariable(\"id\") Integer id,\n         return new JournalDTO().convertFrom(journalService.update(journal));\n     }\n \n+    /**\n+     * Delete journal by id.\n+     *\n+     * @param journalId journalId\n+     */\n+    @DeleteMapping(\"{journalId:\\\\d+}\")\n+    @ApiOperation(\"Delete link by id\")\n+    public void deletePermanently(@PathVariable(\"journalId\") Integer journalId) {\n+        journalService.removeById(journalId);\n+    }\n+\n     @GetMapping(\"{journalId:\\\\d+}/comments/tree_view\")\n     @ApiOperation(\"Lists comments with tree view\")\n     public Page<BaseCommentVO> listCommentTree(@PathVariable(\"journalId\") Integer journalId,",
    "output": "Update JournalController.java"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/entity/Attachment.java b/src/main/java/run/halo/app/model/entity/Attachment.java\n--- a/src/main/java/run/halo/app/model/entity/Attachment.java\n+++ b/src/main/java/run/halo/app/model/entity/Attachment.java\n@@ -92,7 +92,6 @@ public class Attachment extends BaseEntity {\n     @Override\n     public void prePersist() {\n         super.prePersist();\n-        id = null;\n \n         if (fileKey == null) {\n             fileKey = \"\";\n\ndiff --git a/src/main/java/run/halo/app/service/impl/RecoveryServiceImpl.java b/src/main/java/run/halo/app/service/impl/RecoveryServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/RecoveryServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/RecoveryServiceImpl.java\n@@ -440,7 +440,7 @@ private List<Attachment> handleAttachments(@Nullable Object attachmentsObject) {\n             }\n \n             // Set location\n-            String attachLocation = attachmentMap.get(\"attachLocation\").toString();\n+            String attachLocation = attachmentMap.getOrDefault(\"attachLocation\", \"\").toString();\n             if (StringUtils.equalsIgnoreCase(attachLocation, \"qiniu\")) {\n                 attachment.setType(AttachmentType.QNYUN);\n             } else if (StringUtils.equalsIgnoreCase(attachLocation, \"upyun\")) {",
    "output": "Fix migration bug"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/entity/BaseComment.java b/src/main/java/run/halo/app/model/entity/BaseComment.java\n--- a/src/main/java/run/halo/app/model/entity/BaseComment.java\n+++ b/src/main/java/run/halo/app/model/entity/BaseComment.java\n@@ -103,7 +103,6 @@ public class BaseComment extends BaseEntity {\n     @Override\n     public void prePersist() {\n         super.prePersist();\n-        id = null;\n \n         if (parentId == null || parentId < 0) {\n             parentId = 0L;\n\ndiff --git a/src/main/java/run/halo/app/service/impl/RecoveryServiceImpl.java b/src/main/java/run/halo/app/service/impl/RecoveryServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/RecoveryServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/RecoveryServiceImpl.java\n@@ -1,5 +1,6 @@\n package run.halo.app.service.impl;\n \n+import cn.hutool.core.lang.Assert;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.lang3.StringUtils;\n import org.springframework.lang.NonNull;\n@@ -10,6 +11,7 @@\n import run.halo.app.exception.ServiceException;\n import run.halo.app.model.entity.*;\n import run.halo.app.model.enums.AttachmentType;\n+import run.halo.app.model.enums.CommentStatus;\n import run.halo.app.model.enums.PostStatus;\n import run.halo.app.service.*;\n import run.halo.app.utils.BeanUtils;\n@@ -19,6 +21,7 @@\n import java.io.InputStreamReader;\n import java.text.SimpleDateFormat;\n import java.util.*;\n+import java.util.stream.Collectors;\n \n /**\n  * Recovery service implementation.\n@@ -139,7 +142,7 @@ private List<BasePost> handleBasePosts(@Nullable Object postsObject) {\n             post.setFormatContent(postMap.getOrDefault(\"postContent\", \"\").toString());\n             post.setSummary(postMap.getOrDefault(\"postSummary\", \"\").toString());\n             post.setThumbnail(postMap.getOrDefault(\"postThumbnail\", \"\").toString());\n-            post.setVisits(getLongOrDefault(postMap.get(\"postViews\").toString(), 0L));\n+            post.setVisits(getLongOrDefault(postMap.getOrDefault(\"postViews\", \"\").toString(), 0L));\n             post.setDisallowComment(false);\n             post.setTemplate(postMap.getOrDefault(\"customTpl\", \"\").toString());\n \n@@ -150,19 +153,19 @@ private List<BasePost> handleBasePosts(@Nullable Object postsObject) {\n             }\n \n             // Set create time\n-            Long createTime = getLongOrDefault(postMap.get(\"postDate\").toString(), 0L);\n+            Long createTime = getLongOrDefault(postMap.getOrDefault(\"postDate\", \"\").toString(), 0L);\n             if (createTime != 0L) {\n                 post.setCreateTime(new Date(createTime));\n             }\n \n             // Set update time\n-            Long updateTime = getLongOrDefault(postMap.get(\"postUpdate\").toString(), 0L);\n+            Long updateTime = getLongOrDefault(postMap.getOrDefault(\"postUpdate\", \"\").toString(), 0L);\n             if (updateTime != 0L) {\n                 post.setUpdateTime(new Date(updateTime));\n             }\n \n             // Set status (default draft)\n-            Integer postStatus = getIntegerOrDefault(postMap.get(\"postStatus\").toString(), 1);\n+            Integer postStatus = getIntegerOrDefault(postMap.getOrDefault(\"postStatus\", \"\").toString(), 1);\n             if (postStatus == 0) {\n                 post.setStatus(PostStatus.PUBLISHED);\n             } else if (postStatus == 1) {\n@@ -199,6 +202,19 @@ private Post handlePost(@NonNull BasePost basePost, @NonNull Map<String, Object>\n \n         Object commentsObject = postMap.get(\"comments\");\n         // TODO Handle comments\n+        List<BaseComment> baseComments = handleComment(commentsObject, createdPost.getId());\n+\n+        List<PostComment> postComments = baseComments.stream()\n+                .map(baseComment -> BeanUtils.transformFrom(baseComment, PostComment.class))\n+                .collect(Collectors.toList());\n+\n+        try {\n+            // Create comments\n+            List<PostComment> createdPostComments = postCommentService.createInBatch(postComments);\n+        } catch (Exception e) {\n+            log.warn(\"Failed to create post comments for post with id \" + createdPost.getId(), e);\n+            // Ignore this exception\n+        }\n \n         return createdPost;\n     }\n@@ -212,10 +228,69 @@ private Sheet handleSheet(@NonNull BasePost basePost, @NonNull Map<String, Objec\n \n         Object commentsObject = postMap.get(\"comments\");\n         // TODO Handle comments\n+        List<BaseComment> baseComments = handleComment(commentsObject, createdSheet.getId());\n+\n+        List<SheetComment> sheetComments = baseComments.stream()\n+                .map(baseComment -> BeanUtils.transformFrom(baseComment, SheetComment.class))\n+                .collect(Collectors.toList());\n+\n+        // Create comments\n+        try {\n+            sheetCommentService.createInBatch(sheetComments);\n+        } catch (Exception e) {\n+            log.warn(\"Failed to create sheet comments for sheet with id \" + createdSheet.getId(), e);\n+            // Ignore this exception\n+        }\n \n         return createdSheet;\n     }\n \n+    private List<BaseComment> handleComment(@Nullable Object commentsObject, @NonNull Integer postId) {\n+        Assert.notNull(postId, \"Post id must not be null\");\n+\n+        if (!(commentsObject instanceof List)) {\n+            return Collections.emptyList();\n+        }\n+\n+        List<Object> commentObjectList = (List<Object>) commentsObject;\n+\n+        List<BaseComment> result = new LinkedList<>();\n+\n+        commentObjectList.forEach(commentObject -> {\n+            if (!(commentObject instanceof Map)) {\n+                return;\n+            }\n+\n+            Map<String, Object> commentMap = (Map<String, Object>) commentObject;\n+\n+            BaseComment baseComment = new BaseComment();\n+            baseComment.setId(getLongOrDefault(commentMap.getOrDefault(\"commentId\", \"\").toString(), null));\n+            baseComment.setAuthor(commentMap.getOrDefault(\"commentAuthor\", \"\").toString());\n+            baseComment.setEmail(commentMap.getOrDefault(\"commentAuthorEmail\", \"\").toString());\n+            baseComment.setIpAddress(commentMap.getOrDefault(\"commentAuthorIp\", \"\").toString());\n+            baseComment.setAuthorUrl(commentMap.getOrDefault(\"commentAuthorUrl\", \"\").toString());\n+            baseComment.setGavatarMd5(commentMap.getOrDefault(\"commentAuthorAvatarMd5\", \"\").toString());\n+            baseComment.setContent(commentMap.getOrDefault(\"commentContent\", \"\").toString());\n+            baseComment.setUserAgent(commentMap.getOrDefault(\"commentAgent\", \"\").toString());\n+            baseComment.setIsAdmin(getBooleanOrDefault(commentMap.getOrDefault(\"isAdmin\", \"\").toString(), false));\n+            baseComment.setPostId(postId);\n+            baseComment.setParentId(getLongOrDefault(commentMap.getOrDefault(\"commentParent\", \"\").toString(), 0L));\n+\n+            Integer commentStatus = getIntegerOrDefault(commentMap.getOrDefault(\"commentStatus\", \"\").toString(), 1);\n+            if (commentStatus == 0) {\n+                baseComment.setStatus(CommentStatus.PUBLISHED);\n+            } else if (commentStatus == 1) {\n+                baseComment.setStatus(CommentStatus.AUDITING);\n+            } else {\n+                baseComment.setStatus(CommentStatus.RECYCLE);\n+            }\n+\n+            result.add(baseComment);\n+        });\n+\n+        return result;\n+    }\n+\n \n     @NonNull\n     private List<Menu> handleMenus(@Nullable Object menusObject) {\n@@ -390,7 +465,7 @@ private List<Attachment> handleAttachments(@Nullable Object attachmentsObject) {\n     }\n \n     @NonNull\n-    private Integer getIntegerOrDefault(@Nullable String numberString, int defaultNumber) {\n+    private Integer getIntegerOrDefault(@Nullable String numberString, @Nullable Integer defaultNumber) {\n         try {\n             return Integer.valueOf(numberString);\n         } catch (Exception e) {\n@@ -400,7 +475,7 @@ private Integer getIntegerOrDefault(@Nullable String numberString, int defaultNu\n     }\n \n     @NonNull\n-    private Long getLongOrDefault(@Nullable String numberString, long defaultNumber) {\n+    private Long getLongOrDefault(@Nullable String numberString, @Nullable Long defaultNumber) {\n         try {\n             return Long.valueOf(numberString);\n         } catch (Exception e) {\n@@ -409,4 +484,23 @@ private Long getLongOrDefault(@Nullable String numberString, long defaultNumber)\n         }\n     }\n \n+    private Boolean getBooleanOrDefault(@Nullable String boolString, @Nullable Boolean defaultValue) {\n+        if (StringUtils.equalsIgnoreCase(boolString, \"0\")) {\n+            return false;\n+        }\n+\n+        if (StringUtils.equalsIgnoreCase(boolString, \"1\")) {\n+            return true;\n+        }\n+\n+        if (StringUtils.equalsIgnoreCase(boolString, \"true\")) {\n+            return true;\n+        }\n+\n+        if (StringUtils.equalsIgnoreCase(boolString, \"false\")) {\n+            return false;\n+        }\n+\n+        return defaultValue;\n+    }\n }",
    "output": "Complete comments migration"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/BackupController.java b/src/main/java/run/halo/app/controller/admin/api/BackupController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/BackupController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/BackupController.java\n@@ -0,0 +1,22 @@\n+package run.halo.app.controller.admin.api;\n+\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import run.halo.app.service.BackupService;\n+\n+/**\n+ * Backup controller\n+ *\n+ * @author johnniang\n+ * @date 19-4-26\n+ */\n+@RestController\n+@RequestMapping(\"/api/admin/backups\")\n+public class BackupController {\n+\n+    private final BackupService backupService;\n+\n+    public BackupController(BackupService backupService) {\n+        this.backupService = backupService;\n+    }\n+}\n\ndiff --git a/src/main/java/run/halo/app/controller/admin/api/RecoveryController.java b/src/main/java/run/halo/app/controller/admin/api/RecoveryController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/RecoveryController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/RecoveryController.java\n@@ -0,0 +1,22 @@\n+package run.halo.app.controller.admin.api;\n+\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import run.halo.app.service.RecoveryService;\n+\n+/**\n+ * Recovery controller\n+ *\n+ * @author johnniang\n+ * @date 19-4-26\n+ */\n+@RestController\n+@RequestMapping(\"/api/admin/recoveries\")\n+public class RecoveryController {\n+\n+    private final RecoveryService recoveryService;\n+\n+    public RecoveryController(RecoveryService recoveryService) {\n+        this.recoveryService = recoveryService;\n+    }\n+}\n\ndiff --git a/src/main/java/run/halo/app/controller/core/CommonController.java b/src/main/java/run/halo/app/controller/core/CommonController.java\n--- a/src/main/java/run/halo/app/controller/core/CommonController.java\n+++ b/src/main/java/run/halo/app/controller/core/CommonController.java\n@@ -35,15 +35,10 @@ public class CommonController implements ErrorController {\n \n     private final ThemeService themeService;\n \n-    private final OptionService optionService;\n-\n-    public CommonController(ThemeService themeService,\n-                            OptionService optionService) {\n+    public CommonController(ThemeService themeService) {\n         this.themeService = themeService;\n-        this.optionService = optionService;\n     }\n \n-\n     /**\n      * Handle error\n      *\n@@ -109,7 +104,7 @@ public String adminInternalError() {\n      * @return String\n      */\n     @GetMapping(value = \"/404\")\n-    public String contentNotFround() throws FileNotFoundException {\n+    public String contentNotFround() {\n         if (!themeService.isTemplateExist(NOT_FROUND_TEMPLATE)) {\n             return \"common/error/404\";\n         }\n\ndiff --git a/src/main/java/run/halo/app/event/post/PostVisitEventListener.java b/src/main/java/run/halo/app/event/post/PostVisitEventListener.java\n--- a/src/main/java/run/halo/app/event/post/PostVisitEventListener.java\n+++ b/src/main/java/run/halo/app/event/post/PostVisitEventListener.java\n@@ -1,6 +1,5 @@\n package run.halo.app.event.post;\n \n-import lombok.extern.slf4j.Slf4j;\n import org.springframework.context.event.EventListener;\n import org.springframework.scheduling.annotation.Async;\n import org.springframework.stereotype.Component;\n@@ -12,7 +11,6 @@\n  * @author johnniang\n  * @date 19-4-22\n  */\n-@Slf4j\n @Component\n public class PostVisitEventListener extends AbstractVisitEventListener {\n \n\ndiff --git a/src/main/java/run/halo/app/event/post/SheetVisitEventListener.java b/src/main/java/run/halo/app/event/post/SheetVisitEventListener.java\n--- a/src/main/java/run/halo/app/event/post/SheetVisitEventListener.java\n+++ b/src/main/java/run/halo/app/event/post/SheetVisitEventListener.java\n@@ -2,6 +2,7 @@\n \n import org.springframework.context.event.EventListener;\n import org.springframework.scheduling.annotation.Async;\n+import org.springframework.stereotype.Component;\n import run.halo.app.service.SheetService;\n \n /**\n@@ -10,6 +11,7 @@\n  * @author johnniang\n  * @date 19-4-24\n  */\n+@Component\n public class SheetVisitEventListener extends AbstractVisitEventListener {\n \n     protected SheetVisitEventListener(SheetService sheetService) {\n\ndiff --git a/src/main/java/run/halo/app/service/BackupService.java b/src/main/java/run/halo/app/service/BackupService.java\n--- a/src/main/java/run/halo/app/service/BackupService.java\n+++ b/src/main/java/run/halo/app/service/BackupService.java\n@@ -0,0 +1,10 @@\n+package run.halo.app.service;\n+\n+/**\n+ * Backup service interface.\n+ *\n+ * @author johnniang\n+ * @date 19-4-26\n+ */\n+public interface BackupService {\n+}\n\ndiff --git a/src/main/java/run/halo/app/service/RecoveryService.java b/src/main/java/run/halo/app/service/RecoveryService.java\n--- a/src/main/java/run/halo/app/service/RecoveryService.java\n+++ b/src/main/java/run/halo/app/service/RecoveryService.java\n@@ -0,0 +1,11 @@\n+package run.halo.app.service;\n+\n+/**\n+ * Recovery service interface.\n+ *\n+ * @author johnniang\n+ * @date 19-4-26\n+ */\n+public interface RecoveryService {\n+\n+}\n\ndiff --git a/src/main/java/run/halo/app/service/impl/BackupServiceImpl.java b/src/main/java/run/halo/app/service/impl/BackupServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/BackupServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/BackupServiceImpl.java\n@@ -0,0 +1,15 @@\n+package run.halo.app.service.impl;\n+\n+import org.springframework.stereotype.Service;\n+import run.halo.app.service.BackupService;\n+\n+/**\n+ * Backup service implementation.\n+ *\n+ * @author johnniang\n+ * @date 19-4-26\n+ */\n+@Service\n+public class BackupServiceImpl implements BackupService {\n+\n+}\n\ndiff --git a/src/main/java/run/halo/app/service/impl/RecoveryServiceImpl.java b/src/main/java/run/halo/app/service/impl/RecoveryServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/RecoveryServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/RecoveryServiceImpl.java\n@@ -0,0 +1,15 @@\n+package run.halo.app.service.impl;\n+\n+import org.springframework.stereotype.Service;\n+import run.halo.app.service.RecoveryService;\n+\n+/**\n+ * Recovery service implementation.\n+ *\n+ * @author johnniang\n+ * @date 19-4-26\n+ */\n+@Service\n+public class RecoveryServiceImpl implements RecoveryService {\n+\n+}",
    "output": "Build basic controllers and services for backup and recovery"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/TagController.java b/src/main/java/run/halo/app/controller/admin/api/TagController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/TagController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/TagController.java\n@@ -1,6 +1,7 @@\n package run.halo.app.controller.admin.api;\n \n import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiParam;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.data.domain.Sort;\n import org.springframework.data.web.SortDefault;\n@@ -36,7 +37,9 @@ public TagController(TagService tagService,\n     }\n \n     @GetMapping\n+    @ApiOperation(\"Lists tag\")\n     public List<? extends TagDTO> listTags(@SortDefault(sort = \"updateTime\", direction = Sort.Direction.DESC) Sort sort,\n+                                           @ApiParam(\"Return more information(post count) if it is set\")\n                                            @RequestParam(name = \"more\", required = false, defaultValue = \"false\") Boolean more) {\n         if (more) {\n             return postTagService.listTagWithCountDtos(sort);\n@@ -45,14 +48,15 @@ public List<? extends TagDTO> listTags(@SortDefault(sort = \"updateTime\", directi\n     }\n \n     @PostMapping\n+    @ApiOperation(\"Creates tag\")\n     public TagDTO createTag(@Valid @RequestBody TagParam tagParam) {\n         // Convert to tag\n         Tag tag = tagParam.convertTo();\n \n         log.debug(\"Tag to be created: [{}]\", tag);\n \n         // Create and convert\n-        return new TagDTO().convertFrom(tagService.create(tag));\n+        return tagService.convertTo(tagService.create(tag));\n     }\n \n     /**\n@@ -64,7 +68,7 @@ public TagDTO createTag(@Valid @RequestBody TagParam tagParam) {\n     @GetMapping(\"{tagId:\\\\d+}\")\n     @ApiOperation(\"Get tag detail by id\")\n     public TagDTO getBy(@PathVariable(\"tagId\") Integer tagId) {\n-        return new TagDTO().convertFrom(tagService.getById(tagId));\n+        return tagService.convertTo(tagService.getById(tagId));\n     }\n \n     @PutMapping(\"{tagId:\\\\d+}\")\n@@ -78,20 +82,17 @@ public TagDTO updateBy(@PathVariable(\"tagId\") Integer tagId,\n         tagParam.update(tag);\n \n         // Update tag\n-        return new TagDTO().convertFrom(tagService.update(tag));\n+        return tagService.convertTo(tagService.update(tag));\n     }\n \n-    /**\n-     * Delete tag by id.\n-     *\n-     * @param tagId tag id\n-     */\n     @DeleteMapping(\"{tagId:\\\\d+}\")\n-    @ApiOperation(\"Delete tag by id\")\n-    public void deletePermanently(@PathVariable(\"tagId\") Integer tagId) {\n+    @ApiOperation(\"Deletes tag\")\n+    public TagDTO deletePermanently(@PathVariable(\"tagId\") Integer tagId) {\n         // Remove the tag\n-        tagService.removeById(tagId);\n+        Tag deletedTag = tagService.removeById(tagId);\n         // Remove the post tag relationship\n         postTagService.removeByTagId(tagId);\n+\n+        return tagService.convertTo(deletedTag);\n     }\n }\n\ndiff --git a/src/main/java/run/halo/app/service/TagService.java b/src/main/java/run/halo/app/service/TagService.java\n--- a/src/main/java/run/halo/app/service/TagService.java\n+++ b/src/main/java/run/halo/app/service/TagService.java\n@@ -1,6 +1,7 @@\n package run.halo.app.service;\n \n import org.springframework.lang.NonNull;\n+import org.springframework.lang.Nullable;\n import run.halo.app.model.dto.TagDTO;\n import run.halo.app.model.entity.Tag;\n import run.halo.app.service.base.CrudService;\n@@ -25,11 +26,20 @@ public interface TagService extends CrudService<Tag, Integer> {\n     Tag getBySlugNameOfNonNull(@NonNull String slugName);\n \n     /**\n-     * Converts to tag output dtos.\n+     * Converts to tag dto.\n+     *\n+     * @param tag tag must not be null\n+     * @return tag dto\n+     */\n+    @NonNull\n+    TagDTO convertTo(@NonNull Tag tag);\n+\n+    /**\n+     * Converts to tag dtos.\n      *\n      * @param tags tag list\n      * @return a list of tag output dto\n      */\n     @NonNull\n-    List<TagDTO> convertTo(List<Tag> tags);\n+    List<TagDTO> convertTo(@Nullable List<Tag> tags);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/CategoryServiceImpl.java b/src/main/java/run/halo/app/service/impl/CategoryServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/CategoryServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/CategoryServiceImpl.java\n@@ -177,8 +177,7 @@ public List<CategoryDTO> convertTo(List<Category> categories) {\n             return Collections.emptyList();\n         }\n \n-        return categories\n-                .stream()\n+        return categories.stream()\n                 .map(this::convertTo)\n                 .collect(Collectors.toList());\n     }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/TagServiceImpl.java b/src/main/java/run/halo/app/service/impl/TagServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/TagServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/TagServiceImpl.java\n@@ -1,15 +1,16 @@\n package run.halo.app.service.impl;\n \n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.stereotype.Service;\n+import org.springframework.util.Assert;\n+import org.springframework.util.CollectionUtils;\n import run.halo.app.exception.AlreadyExistsException;\n import run.halo.app.exception.NotFoundException;\n import run.halo.app.model.dto.TagDTO;\n import run.halo.app.model.entity.Tag;\n import run.halo.app.repository.TagRepository;\n import run.halo.app.service.TagService;\n import run.halo.app.service.base.AbstractCrudService;\n-import lombok.extern.slf4j.Slf4j;\n-import org.springframework.stereotype.Service;\n-import org.springframework.util.CollectionUtils;\n \n import java.util.Collections;\n import java.util.List;\n@@ -59,12 +60,21 @@ public Tag getBySlugNameOfNonNull(String slugName) {\n         return tagRepository.getBySlugName(slugName).orElseThrow(() -> new NotFoundException(\"The tag does not exist\").setErrorData(slugName));\n     }\n \n+    @Override\n+    public TagDTO convertTo(Tag tag) {\n+        Assert.notNull(tag, \"Tag must not be null\");\n+\n+        return new TagDTO().convertFrom(tag);\n+    }\n+\n     @Override\n     public List<TagDTO> convertTo(List<Tag> tags) {\n-        return CollectionUtils.isEmpty(tags) ?\n-                Collections.emptyList() :\n-                tags.stream()\n-                        .map(tag -> (TagDTO) new TagDTO().convertFrom(tag))\n-                        .collect(Collectors.toList());\n+        if (CollectionUtils.isEmpty(tags)) {\n+            return Collections.emptyList();\n+        }\n+\n+        return tags.stream()\n+                .map(this::convertTo)\n+                .collect(Collectors.toList());\n     }\n }",
    "output": "Refactor tag dto conversion"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/CategoryController.java b/src/main/java/run/halo/app/controller/admin/api/CategoryController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/CategoryController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/CategoryController.java\n@@ -37,21 +37,14 @@ public CategoryController(CategoryService categoryService,\n         this.postCategoryService = postCategoryService;\n     }\n \n-\n-    /**\n-     * Get Category by id\n-     *\n-     * @param id id\n-     * @return CategoryDTO\n-     */\n-    @GetMapping(\"{id:\\\\d+}\")\n-    @ApiOperation(\"Get category detail by id\")\n-    public CategoryDTO getBy(@PathVariable(\"id\") Integer id) {\n-        return new CategoryDTO().convertFrom(categoryService.getById(id));\n+    @GetMapping(\"{categoryId:\\\\d+}\")\n+    @ApiOperation(\"Gets category detail\")\n+    public CategoryDTO getBy(@PathVariable(\"categoryId\") Integer categoryId) {\n+        return categoryService.convertTo(categoryService.getById(categoryId));\n     }\n \n     @GetMapping\n-    @ApiOperation(\"List all categories\")\n+    @ApiOperation(\"Lists all categories\")\n     public List<? extends CategoryDTO> listAll(\n             @SortDefault(sort = \"updateTime\", direction = DESC) Sort sort,\n             @RequestParam(name = \"more\", required = false, defaultValue = \"false\") boolean more) {\n@@ -63,37 +56,33 @@ public List<? extends CategoryDTO> listAll(\n     }\n \n     @GetMapping(\"tree_view\")\n-    @ApiOperation(\"List as category tree\")\n+    @ApiOperation(\"List all categories as tree\")\n     public List<CategoryVO> listAsTree(@SortDefault(sort = \"name\", direction = ASC) Sort sort) {\n         return categoryService.listAsTree(sort);\n     }\n \n     @PostMapping\n-    public CategoryDTO createBy(@Valid @RequestBody CategoryParam categoryParam) {\n+    @ApiOperation(\"Creates category\")\n+    public CategoryDTO createBy(@RequestBody @Valid CategoryParam categoryParam) {\n         // Convert to category\n         Category category = categoryParam.convertTo();\n \n         // Save it\n-        return new CategoryDTO().convertFrom(categoryService.create(category));\n+        return categoryService.convertTo(categoryService.create(category));\n     }\n \n-    @PutMapping(\"{id:\\\\d+}\")\n-    @ApiOperation(\"Update category\")\n-    public CategoryDTO updateBy(@PathVariable(\"id\") Integer id,\n+    @PutMapping(\"{categoryId:\\\\d+}\")\n+    @ApiOperation(\"Updates category\")\n+    public CategoryDTO updateBy(@PathVariable(\"categoryId\") Integer categoryId,\n                                 @RequestBody @Valid CategoryParam categoryParam) {\n-        Category categoryToUpdate = categoryService.getById(id);\n+        Category categoryToUpdate = categoryService.getById(categoryId);\n         categoryParam.update(categoryToUpdate);\n-        return new CategoryDTO().convertFrom(categoryService.update(categoryToUpdate));\n+        return categoryService.convertTo(categoryService.update(categoryToUpdate));\n     }\n \n-    /**\n-     * Delete category by id.\n-     *\n-     * @param id id\n-     */\n-    @DeleteMapping(\"{id:\\\\d+}\")\n-    @ApiOperation(\"Delete category\")\n-    public void deletePermanently(@PathVariable(\"id\") Integer id) {\n-        categoryService.removeCategoryAndPostCategoryBy(id);\n+    @DeleteMapping(\"{categoryId:\\\\d+}\")\n+    @ApiOperation(\"Deletes category\")\n+    public void deletePermanently(@PathVariable(\"categoryId\") Integer categoryId) {\n+        categoryService.removeCategoryAndPostCategoryBy(categoryId);\n     }\n }\n\ndiff --git a/src/main/java/run/halo/app/service/CategoryService.java b/src/main/java/run/halo/app/service/CategoryService.java\n--- a/src/main/java/run/halo/app/service/CategoryService.java\n+++ b/src/main/java/run/halo/app/service/CategoryService.java\n@@ -18,14 +18,6 @@\n  */\n public interface CategoryService extends CrudService<Category, Integer> {\n \n-    /**\n-     * Remove category and relationship\n-     *\n-     * @param id id\n-     */\n-    @Deprecated\n-    void remove(@NonNull Integer id);\n-\n     /**\n      * Lists as category tree.\n      *\n@@ -52,9 +44,19 @@ public interface CategoryService extends CrudService<Category, Integer> {\n     @Transactional\n     void removeCategoryAndPostCategoryBy(Integer categoryId);\n \n+\n     /**\n      * Converts to category dto.\n      *\n+     * @param category category must not be null\n+     * @return category dto\n+     */\n+    @NonNull\n+    CategoryDTO convertTo(@NonNull Category category);\n+\n+    /**\n+     * Converts to category dto list.\n+     *\n      * @param categories category list\n      * @return a list of category dto\n      */\n\ndiff --git a/src/main/java/run/halo/app/service/impl/CategoryServiceImpl.java b/src/main/java/run/halo/app/service/impl/CategoryServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/CategoryServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/CategoryServiceImpl.java\n@@ -1,5 +1,11 @@\n package run.halo.app.service.impl;\n \n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.data.domain.Sort;\n+import org.springframework.lang.NonNull;\n+import org.springframework.stereotype.Service;\n+import org.springframework.util.Assert;\n+import org.springframework.util.CollectionUtils;\n import run.halo.app.exception.AlreadyExistsException;\n import run.halo.app.exception.NotFoundException;\n import run.halo.app.model.dto.CategoryDTO;\n@@ -9,12 +15,6 @@\n import run.halo.app.service.CategoryService;\n import run.halo.app.service.PostCategoryService;\n import run.halo.app.service.base.AbstractCrudService;\n-import lombok.extern.slf4j.Slf4j;\n-import org.springframework.data.domain.Sort;\n-import org.springframework.lang.NonNull;\n-import org.springframework.stereotype.Service;\n-import org.springframework.util.Assert;\n-import org.springframework.util.CollectionUtils;\n \n import java.util.Collections;\n import java.util.LinkedList;\n@@ -42,16 +42,6 @@ public CategoryServiceImpl(CategoryRepository categoryRepository,\n         this.postCategoryService = postCategoryService;\n     }\n \n-    /**\n-     * Remove category and relationship\n-     *\n-     * @param id id\n-     */\n-    @Override\n-    public void remove(Integer id) {\n-        // TODO 删除分类，以及和文章的对应关系\n-    }\n-\n     @Override\n     public Category create(Category category) {\n         Assert.notNull(category, \"Category to create must not be null\");\n@@ -174,6 +164,13 @@ public void removeCategoryAndPostCategoryBy(Integer categoryId) {\n         postCategoryService.removeByCategoryId(categoryId);\n     }\n \n+    @Override\n+    public CategoryDTO convertTo(Category category) {\n+        Assert.notNull(category, \"Category must not be null\");\n+\n+        return new CategoryDTO().convertFrom(category);\n+    }\n+\n     @Override\n     public List<CategoryDTO> convertTo(List<Category> categories) {\n         if (CollectionUtils.isEmpty(categories)) {\n@@ -182,7 +179,7 @@ public List<CategoryDTO> convertTo(List<Category> categories) {\n \n         return categories\n                 .stream()\n-                .map(category -> new CategoryDTO().<CategoryDTO>convertFrom(category))\n+                .map(this::convertTo)\n                 .collect(Collectors.toList());\n     }\n }",
    "output": "Refactor category dto conversion"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/CategoryController.java b/src/main/java/run/halo/app/controller/admin/api/CategoryController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/CategoryController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/CategoryController.java\n@@ -37,6 +37,19 @@ public CategoryController(CategoryService categoryService,\n         this.postCategoryService = postCategoryService;\n     }\n \n+\n+    /**\n+     * Get Category by id\n+     *\n+     * @param id id\n+     * @return CategoryDTO\n+     */\n+    @GetMapping(\"{id:\\\\d+}\")\n+    @ApiOperation(\"Get category detail by id\")\n+    public CategoryDTO getBy(@PathVariable(\"id\") Integer id) {\n+        return new CategoryDTO().convertFrom(categoryService.getById(id));\n+    }\n+\n     @GetMapping\n     @ApiOperation(\"List all categories\")\n     public List<? extends CategoryDTO> listAll(\n@@ -64,16 +77,13 @@ public CategoryDTO createBy(@Valid @RequestBody CategoryParam categoryParam) {\n         return new CategoryDTO().convertFrom(categoryService.create(category));\n     }\n \n-    /**\n-     * Get Category by id\n-     *\n-     * @param id id\n-     * @return CategoryDTO\n-     */\n-    @GetMapping(\"{id:\\\\d+}\")\n-    @ApiOperation(\"Get category detail by id\")\n-    public CategoryDTO getBy(@PathVariable(\"id\") Integer id) {\n-        return new CategoryDTO().convertFrom(categoryService.getById(id));\n+    @PutMapping(\"{id:\\\\d+}\")\n+    @ApiOperation(\"Update category\")\n+    public CategoryDTO updateBy(@PathVariable(\"id\") Integer id,\n+                                @RequestBody @Valid CategoryParam categoryParam) {\n+        Category categoryToUpdate = categoryService.getById(id);\n+        categoryParam.update(categoryToUpdate);\n+        return new CategoryDTO().convertFrom(categoryService.update(categoryToUpdate));\n     }\n \n     /**\n@@ -82,7 +92,7 @@ public CategoryDTO getBy(@PathVariable(\"id\") Integer id) {\n      * @param id id\n      */\n     @DeleteMapping(\"{id:\\\\d+}\")\n-    @ApiOperation(\"Delete category by id\")\n+    @ApiOperation(\"Delete category\")\n     public void deletePermanently(@PathVariable(\"id\") Integer id) {\n         categoryService.removeCategoryAndPostCategoryBy(id);\n     }",
    "output": "Complete category updating api"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/api/JournalController.java b/src/main/java/run/halo/app/controller/content/api/JournalController.java\n--- a/src/main/java/run/halo/app/controller/content/api/JournalController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/JournalController.java\n@@ -38,20 +38,20 @@ public JournalController(JournalService journalService,\n         this.optionService = optionService;\n     }\n \n-    @GetMapping(\"{sheetId:\\\\d+}/comments/tree_view\")\n+    @GetMapping(\"{journalId:\\\\d+}/comments/tree_view\")\n     @ApiOperation(\"Lists comments with tree view\")\n-    public Page<BaseCommentVO> listCommentsTree(@PathVariable(\"sheetId\") Integer sheetId,\n+    public Page<BaseCommentVO> listCommentsTree(@PathVariable(\"journalId\") Integer journalId,\n                                                 @RequestParam(name = \"page\", required = false, defaultValue = \"0\") int page,\n                                                 @SortDefault(sort = \"createTime\", direction = DESC) Sort sort) {\n-        return journalCommentService.pageVosBy(sheetId, PageRequest.of(page, optionService.getCommentPageSize(), sort));\n+        return journalCommentService.pageVosBy(journalId, PageRequest.of(page, optionService.getCommentPageSize(), sort));\n     }\n \n-    @GetMapping(\"{sheetId:\\\\d+}/comments/list_view\")\n+    @GetMapping(\"{journalId:\\\\d+}/comments/list_view\")\n     @ApiOperation(\"Lists comment with list view\")\n-    public Page<BaseCommentWithParentVO> listComments(@PathVariable(\"sheetId\") Integer sheetId,\n+    public Page<BaseCommentWithParentVO> listComments(@PathVariable(\"journalId\") Integer journalId,\n                                                       @RequestParam(name = \"page\", required = false, defaultValue = \"0\") int page,\n                                                       @SortDefault(sort = \"createTime\", direction = DESC) Sort sort) {\n-        return journalCommentService.pageWithParentVoBy(sheetId, PageRequest.of(page, optionService.getCommentPageSize(), sort));\n+        return journalCommentService.pageWithParentVoBy(journalId, PageRequest.of(page, optionService.getCommentPageSize(), sort));\n     }\n \n     @PostMapping(\"comments\")\n\ndiff --git a/src/main/java/run/halo/app/controller/content/api/SheetController.java b/src/main/java/run/halo/app/controller/content/api/SheetController.java\n--- a/src/main/java/run/halo/app/controller/content/api/SheetController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/SheetController.java\n@@ -0,0 +1,63 @@\n+package run.halo.app.controller.content.api;\n+\n+import io.swagger.annotations.ApiOperation;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.PageRequest;\n+import org.springframework.data.domain.Sort;\n+import org.springframework.data.web.SortDefault;\n+import org.springframework.web.bind.annotation.*;\n+import run.halo.app.model.dto.BaseCommentDTO;\n+import run.halo.app.model.params.SheetCommentParam;\n+import run.halo.app.model.vo.BaseCommentVO;\n+import run.halo.app.model.vo.BaseCommentWithParentVO;\n+import run.halo.app.service.OptionService;\n+import run.halo.app.service.SheetCommentService;\n+import run.halo.app.service.SheetService;\n+\n+import static org.springframework.data.domain.Sort.Direction.DESC;\n+\n+/**\n+ * Sheet controller.\n+ *\n+ * @author johnniang\n+ * @date 19-4-26\n+ */\n+@RestController(\"PortalSheetController\")\n+@RequestMapping(\"/api/sheets\")\n+public class SheetController {\n+\n+    private final SheetService sheetService;\n+\n+    private final SheetCommentService sheetCommentService;\n+\n+    private final OptionService optionService;\n+\n+    public SheetController(SheetService sheetService, SheetCommentService sheetCommentService, OptionService optionService) {\n+        this.sheetService = sheetService;\n+        this.sheetCommentService = sheetCommentService;\n+        this.optionService = optionService;\n+    }\n+\n+\n+    @GetMapping(\"{sheetId:\\\\d+}/comments/tree_view\")\n+    @ApiOperation(\"Lists comments with tree view\")\n+    public Page<BaseCommentVO> listCommentsTree(@PathVariable(\"sheetId\") Integer sheetId,\n+                                                @RequestParam(name = \"page\", required = false, defaultValue = \"0\") int page,\n+                                                @SortDefault(sort = \"createTime\", direction = DESC) Sort sort) {\n+        return sheetCommentService.pageVosBy(sheetId, PageRequest.of(page, optionService.getCommentPageSize(), sort));\n+    }\n+\n+    @GetMapping(\"{sheetId:\\\\d+}/comments/list_view\")\n+    @ApiOperation(\"Lists comment with list view\")\n+    public Page<BaseCommentWithParentVO> listComments(@PathVariable(\"sheetId\") Integer sheetId,\n+                                                      @RequestParam(name = \"page\", required = false, defaultValue = \"0\") int page,\n+                                                      @SortDefault(sort = \"createTime\", direction = DESC) Sort sort) {\n+        return sheetCommentService.pageWithParentVoBy(sheetId, PageRequest.of(page, optionService.getCommentPageSize(), sort));\n+    }\n+\n+    @PostMapping(\"comments\")\n+    @ApiOperation(\"Comments a post\")\n+    public BaseCommentDTO comment(@RequestBody SheetCommentParam sheetCommentParam) {\n+        return sheetCommentService.convertTo(sheetCommentService.createBy(sheetCommentParam));\n+    }\n+}",
    "output": "Merge remote-tracking branch 'origin/v1' into v1"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/JournalController.java b/src/main/java/run/halo/app/controller/admin/api/JournalController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/JournalController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/JournalController.java\n@@ -5,14 +5,12 @@\n import org.springframework.data.domain.PageRequest;\n import org.springframework.data.domain.Pageable;\n import org.springframework.data.domain.Sort;\n+import org.springframework.data.web.PageableDefault;\n import org.springframework.data.web.SortDefault;\n import org.springframework.web.bind.annotation.*;\n-import run.halo.app.model.dto.BaseCommentDTO;\n import run.halo.app.model.dto.JournalDTO;\n import run.halo.app.model.dto.JournalWithCmtCountDTO;\n import run.halo.app.model.entity.Journal;\n-import run.halo.app.model.entity.JournalComment;\n-import run.halo.app.model.params.JournalCommentParam;\n import run.halo.app.model.params.JournalParam;\n import run.halo.app.model.vo.BaseCommentVO;\n import run.halo.app.model.vo.BaseCommentWithParentVO;\n@@ -51,7 +49,7 @@ public JournalController(JournalService journalService,\n \n     @GetMapping\n     @ApiOperation(\"Gets latest journals\")\n-    public Page<JournalWithCmtCountDTO> pageBy(Pageable pageable) {\n+    public Page<JournalWithCmtCountDTO> pageBy(@PageableDefault(sort = \"updateTime\", direction = DESC) Pageable pageable) {\n         Page<Journal> journalPage = journalService.listAll(pageable);\n         return journalService.convertToCmtCountDto(journalPage);\n     }\n@@ -70,6 +68,15 @@ public JournalDTO createBy(@RequestBody @Valid JournalParam journalParam) {\n         return journalService.convertTo(createdJournal);\n     }\n \n+    @PutMapping(\"{id:\\\\d+}\")\n+    @ApiOperation(\"Updates a Journal\")\n+    public JournalDTO updateBy(@PathVariable(\"id\") Integer id,\n+                               @RequestBody @Valid JournalParam journalParam) {\n+        Journal journal = journalService.getById(id);\n+        journalParam.update(journal);\n+        return new JournalDTO().convertFrom(journalService.update(journal));\n+    }\n+\n     @GetMapping(\"{journalId:\\\\d+}/comments/tree_view\")\n     @ApiOperation(\"Lists comments with tree view\")\n     public Page<BaseCommentVO> listCommentTree(@PathVariable(\"journalId\") Integer journalId,\n\ndiff --git a/src/main/java/run/halo/app/model/dto/JournalDTO.java b/src/main/java/run/halo/app/model/dto/JournalDTO.java\n--- a/src/main/java/run/halo/app/model/dto/JournalDTO.java\n+++ b/src/main/java/run/halo/app/model/dto/JournalDTO.java\n@@ -4,6 +4,8 @@\n import run.halo.app.model.dto.base.OutputConverter;\n import run.halo.app.model.entity.Journal;\n \n+import java.util.Date;\n+\n /**\n  * Journal dto.\n  *\n@@ -18,4 +20,6 @@ public class JournalDTO implements OutputConverter<JournalDTO, Journal> {\n     private String content;\n \n     private Long likes;\n+\n+    private Date createTime;\n }",
    "output": "Create journal update api for journal."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/api/JournalController.java b/src/main/java/run/halo/app/controller/content/api/JournalController.java\n--- a/src/main/java/run/halo/app/controller/content/api/JournalController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/JournalController.java\n@@ -38,20 +38,20 @@ public JournalController(JournalService journalService,\n         this.optionService = optionService;\n     }\n \n-    @GetMapping(\"{sheetId:\\\\d+}/comments/tree_view\")\n+    @GetMapping(\"{journalId:\\\\d+}/comments/tree_view\")\n     @ApiOperation(\"Lists comments with tree view\")\n-    public Page<BaseCommentVO> listCommentsTree(@PathVariable(\"sheetId\") Integer sheetId,\n+    public Page<BaseCommentVO> listCommentsTree(@PathVariable(\"journalId\") Integer journalId,\n                                                 @RequestParam(name = \"page\", required = false, defaultValue = \"0\") int page,\n                                                 @SortDefault(sort = \"createTime\", direction = DESC) Sort sort) {\n-        return journalCommentService.pageVosBy(sheetId, PageRequest.of(page, optionService.getCommentPageSize(), sort));\n+        return journalCommentService.pageVosBy(journalId, PageRequest.of(page, optionService.getCommentPageSize(), sort));\n     }\n \n-    @GetMapping(\"{sheetId:\\\\d+}/comments/list_view\")\n+    @GetMapping(\"{journalId:\\\\d+}/comments/list_view\")\n     @ApiOperation(\"Lists comment with list view\")\n-    public Page<BaseCommentWithParentVO> listComments(@PathVariable(\"sheetId\") Integer sheetId,\n+    public Page<BaseCommentWithParentVO> listComments(@PathVariable(\"journalId\") Integer journalId,\n                                                       @RequestParam(name = \"page\", required = false, defaultValue = \"0\") int page,\n                                                       @SortDefault(sort = \"createTime\", direction = DESC) Sort sort) {\n-        return journalCommentService.pageWithParentVoBy(sheetId, PageRequest.of(page, optionService.getCommentPageSize(), sort));\n+        return journalCommentService.pageWithParentVoBy(journalId, PageRequest.of(page, optionService.getCommentPageSize(), sort));\n     }\n \n     @PostMapping(\"comments\")\n\ndiff --git a/src/main/java/run/halo/app/controller/content/api/SheetController.java b/src/main/java/run/halo/app/controller/content/api/SheetController.java\n--- a/src/main/java/run/halo/app/controller/content/api/SheetController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/SheetController.java\n@@ -0,0 +1,63 @@\n+package run.halo.app.controller.content.api;\n+\n+import io.swagger.annotations.ApiOperation;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.PageRequest;\n+import org.springframework.data.domain.Sort;\n+import org.springframework.data.web.SortDefault;\n+import org.springframework.web.bind.annotation.*;\n+import run.halo.app.model.dto.BaseCommentDTO;\n+import run.halo.app.model.params.SheetCommentParam;\n+import run.halo.app.model.vo.BaseCommentVO;\n+import run.halo.app.model.vo.BaseCommentWithParentVO;\n+import run.halo.app.service.OptionService;\n+import run.halo.app.service.SheetCommentService;\n+import run.halo.app.service.SheetService;\n+\n+import static org.springframework.data.domain.Sort.Direction.DESC;\n+\n+/**\n+ * Sheet controller.\n+ *\n+ * @author johnniang\n+ * @date 19-4-26\n+ */\n+@RestController(\"PortalSheetController\")\n+@RequestMapping(\"/api/sheets\")\n+public class SheetController {\n+\n+    private final SheetService sheetService;\n+\n+    private final SheetCommentService sheetCommentService;\n+\n+    private final OptionService optionService;\n+\n+    public SheetController(SheetService sheetService, SheetCommentService sheetCommentService, OptionService optionService) {\n+        this.sheetService = sheetService;\n+        this.sheetCommentService = sheetCommentService;\n+        this.optionService = optionService;\n+    }\n+\n+\n+    @GetMapping(\"{sheetId:\\\\d+}/comments/tree_view\")\n+    @ApiOperation(\"Lists comments with tree view\")\n+    public Page<BaseCommentVO> listCommentsTree(@PathVariable(\"sheetId\") Integer sheetId,\n+                                                @RequestParam(name = \"page\", required = false, defaultValue = \"0\") int page,\n+                                                @SortDefault(sort = \"createTime\", direction = DESC) Sort sort) {\n+        return sheetCommentService.pageVosBy(sheetId, PageRequest.of(page, optionService.getCommentPageSize(), sort));\n+    }\n+\n+    @GetMapping(\"{sheetId:\\\\d+}/comments/list_view\")\n+    @ApiOperation(\"Lists comment with list view\")\n+    public Page<BaseCommentWithParentVO> listComments(@PathVariable(\"sheetId\") Integer sheetId,\n+                                                      @RequestParam(name = \"page\", required = false, defaultValue = \"0\") int page,\n+                                                      @SortDefault(sort = \"createTime\", direction = DESC) Sort sort) {\n+        return sheetCommentService.pageWithParentVoBy(sheetId, PageRequest.of(page, optionService.getCommentPageSize(), sort));\n+    }\n+\n+    @PostMapping(\"comments\")\n+    @ApiOperation(\"Comments a post\")\n+    public BaseCommentDTO comment(@RequestBody SheetCommentParam sheetCommentParam) {\n+        return sheetCommentService.convertTo(sheetCommentService.createBy(sheetCommentParam));\n+    }\n+}",
    "output": "Complete sheet list and creation api"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/api/CommentController.java b/src/main/java/run/halo/app/controller/content/api/CommentController.java\n--- a/src/main/java/run/halo/app/controller/content/api/CommentController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/CommentController.java\n@@ -1,33 +0,0 @@\n-package run.halo.app.controller.content.api;\n-\n-import io.swagger.annotations.ApiOperation;\n-import org.springframework.web.bind.annotation.PostMapping;\n-import org.springframework.web.bind.annotation.RequestBody;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RestController;\n-import run.halo.app.model.dto.BaseCommentDTO;\n-import run.halo.app.model.params.PostCommentParam;\n-import run.halo.app.service.PostCommentService;\n-\n-/**\n- * Portal comment controller.\n- *\n- * @author johnniang\n- * @date 4/3/19\n- */\n-@RestController(\"ApiContentCommentController\")\n-@RequestMapping(\"/api/comments\")\n-public class CommentController {\n-\n-    private final PostCommentService postCommentService;\n-\n-    public CommentController(PostCommentService postCommentService) {\n-        this.postCommentService = postCommentService;\n-    }\n-\n-    @PostMapping\n-    @ApiOperation(\"Comments a post\")\n-    public BaseCommentDTO comment(@RequestBody PostCommentParam postCommentParam) {\n-        return postCommentService.convertTo(postCommentService.createBy(postCommentParam));\n-    }\n-}\n\ndiff --git a/src/main/java/run/halo/app/controller/content/api/JournalController.java b/src/main/java/run/halo/app/controller/content/api/JournalController.java\n--- a/src/main/java/run/halo/app/controller/content/api/JournalController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/JournalController.java\n@@ -0,0 +1,62 @@\n+package run.halo.app.controller.content.api;\n+\n+import io.swagger.annotations.ApiOperation;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.PageRequest;\n+import org.springframework.data.domain.Sort;\n+import org.springframework.data.web.SortDefault;\n+import org.springframework.web.bind.annotation.*;\n+import run.halo.app.model.dto.BaseCommentDTO;\n+import run.halo.app.model.params.JournalCommentParam;\n+import run.halo.app.model.vo.BaseCommentVO;\n+import run.halo.app.model.vo.BaseCommentWithParentVO;\n+import run.halo.app.service.JournalCommentService;\n+import run.halo.app.service.JournalService;\n+import run.halo.app.service.OptionService;\n+\n+import static org.springframework.data.domain.Sort.Direction.DESC;\n+\n+/**\n+ * @author johnniang\n+ * @date 19-4-26\n+ */\n+@RestController(\"PortalJournalController\")\n+@RequestMapping(\"/api/journals\")\n+public class JournalController {\n+\n+    private final JournalService journalService;\n+\n+    private final JournalCommentService journalCommentService;\n+\n+    private final OptionService optionService;\n+\n+    public JournalController(JournalService journalService,\n+                             JournalCommentService journalCommentService,\n+                             OptionService optionService) {\n+        this.journalService = journalService;\n+        this.journalCommentService = journalCommentService;\n+        this.optionService = optionService;\n+    }\n+\n+    @GetMapping(\"{sheetId:\\\\d+}/comments/tree_view\")\n+    @ApiOperation(\"Lists comments with tree view\")\n+    public Page<BaseCommentVO> listCommentsTree(@PathVariable(\"sheetId\") Integer sheetId,\n+                                                @RequestParam(name = \"page\", required = false, defaultValue = \"0\") int page,\n+                                                @SortDefault(sort = \"createTime\", direction = DESC) Sort sort) {\n+        return journalCommentService.pageVosBy(sheetId, PageRequest.of(page, optionService.getCommentPageSize(), sort));\n+    }\n+\n+    @GetMapping(\"{sheetId:\\\\d+}/comments/list_view\")\n+    @ApiOperation(\"Lists comment with list view\")\n+    public Page<BaseCommentWithParentVO> listComments(@PathVariable(\"sheetId\") Integer sheetId,\n+                                                      @RequestParam(name = \"page\", required = false, defaultValue = \"0\") int page,\n+                                                      @SortDefault(sort = \"createTime\", direction = DESC) Sort sort) {\n+        return journalCommentService.pageWithParentVoBy(sheetId, PageRequest.of(page, optionService.getCommentPageSize(), sort));\n+    }\n+\n+    @PostMapping(\"comments\")\n+    @ApiOperation(\"Comments a post\")\n+    public BaseCommentDTO comment(@RequestBody JournalCommentParam journalCommentParam) {\n+        return journalCommentService.convertTo(journalCommentService.createBy(journalCommentParam));\n+    }\n+}\n\ndiff --git a/src/main/java/run/halo/app/controller/content/api/PostController.java b/src/main/java/run/halo/app/controller/content/api/PostController.java\n--- a/src/main/java/run/halo/app/controller/content/api/PostController.java\n+++ b/src/main/java/run/halo/app/controller/content/api/PostController.java\n@@ -8,10 +8,12 @@\n import org.springframework.data.web.PageableDefault;\n import org.springframework.data.web.SortDefault;\n import org.springframework.web.bind.annotation.*;\n+import run.halo.app.model.dto.BaseCommentDTO;\n import run.halo.app.model.dto.post.BasePostDetailDTO;\n import run.halo.app.model.dto.post.BasePostSimpleDTO;\n import run.halo.app.model.entity.Post;\n import run.halo.app.model.enums.PostStatus;\n+import run.halo.app.model.params.PostCommentParam;\n import run.halo.app.model.vo.BaseCommentVO;\n import run.halo.app.model.vo.BaseCommentWithParentVO;\n import run.halo.app.service.OptionService;\n@@ -87,6 +89,12 @@ public Page<BaseCommentWithParentVO> listComments(@PathVariable(\"postId\") Intege\n         return postCommentService.pageWithParentVoBy(postId, PageRequest.of(page, optionService.getCommentPageSize(), sort));\n     }\n \n+    @PostMapping(\"comments\")\n+    @ApiOperation(\"Comments a post\")\n+    public BaseCommentDTO comment(@RequestBody PostCommentParam postCommentParam) {\n+        return postCommentService.convertTo(postCommentService.createBy(postCommentParam));\n+    }\n+\n     @PostMapping(\"{postId:\\\\d+}/likes\")\n     @ApiOperation(\"Likes a post\")\n     public void like(@PathVariable(\"postId\") Integer postId) {",
    "output": "Complete journal list and creation api"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/MenuController.java b/src/main/java/run/halo/app/controller/admin/api/MenuController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/MenuController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/MenuController.java\n@@ -44,6 +44,18 @@ public List<MenuVO> listAsTree(@SortDefault(sort = \"name\", direction = ASC) Sort\n         return menuService.listAsTree(sort);\n     }\n \n+    /**\n+     * Get menu by menuId.\n+     *\n+     * @param menuId menuId\n+     * @return MenuDTO\n+     */\n+    @GetMapping(\"{menuId:\\\\d+}\")\n+    @ApiOperation(\"Get menu detail by id\")\n+    public MenuDTO getBy(@PathVariable(\"menuId\") Integer menuId) {\n+        return new MenuDTO().convertFrom(menuService.getById(menuId));\n+    }\n+\n     @PostMapping\n     @ApiOperation(\"Creates a menu\")\n     public MenuDTO createBy(@RequestBody @Valid MenuParam menuParam) {\n\ndiff --git a/src/main/java/run/halo/app/controller/admin/api/PhotoController.java b/src/main/java/run/halo/app/controller/admin/api/PhotoController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/PhotoController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/PhotoController.java\n@@ -75,7 +75,21 @@ public void deletePermanently(@PathVariable(\"photoId\") Integer photoId) {\n     }\n \n     @PostMapping\n-    public Photo createBy(@Valid @RequestBody PhotoParam photoParam) {\n-        return photoService.createBy(photoParam);\n+    public PhotoDTO createBy(@Valid @RequestBody PhotoParam photoParam) {\n+        return new PhotoDTO().convertFrom(photoService.createBy(photoParam));\n+    }\n+\n+    @PutMapping(\"{photoId:\\\\d+}\")\n+    @ApiOperation(\"Updates a photo\")\n+    public PhotoDTO updateBy(@PathVariable(\"photoId\") Integer photoId,\n+                             @RequestBody @Valid PhotoParam photoParam) {\n+        // Get the photo\n+        Photo photo = photoService.getById(photoId);\n+\n+        // Update changed properties of the photo\n+        photoParam.update(photo);\n+\n+        // Update menu in database\n+        return new PhotoDTO().convertFrom(photoService.update(photo));\n     }\n }\n\ndiff --git a/src/main/java/run/halo/app/model/dto/PhotoDTO.java b/src/main/java/run/halo/app/model/dto/PhotoDTO.java\n--- a/src/main/java/run/halo/app/model/dto/PhotoDTO.java\n+++ b/src/main/java/run/halo/app/model/dto/PhotoDTO.java\n@@ -24,4 +24,8 @@ public class PhotoDTO implements OutputConverter<PhotoDTO, Photo> {\n     private String url;\n \n     private String team;\n+\n+    private String location;\n+\n+    private String description;\n }",
    "output": "Create menu get api for menu."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/JournalCommentController.java b/src/main/java/run/halo/app/controller/admin/api/JournalCommentController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/JournalCommentController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/JournalCommentController.java\n@@ -7,6 +7,7 @@\n import org.springframework.web.bind.annotation.*;\n import run.halo.app.model.dto.BaseCommentDTO;\n import run.halo.app.model.entity.JournalComment;\n+import run.halo.app.model.enums.CommentStatus;\n import run.halo.app.model.params.CommentQuery;\n import run.halo.app.model.params.JournalCommentParam;\n import run.halo.app.model.vo.JournalCommentWithJournalVO;\n@@ -53,4 +54,19 @@ public BaseCommentDTO createCommentBy(@RequestBody JournalCommentParam journalCo\n         return journalCommentService.convertTo(journalComment);\n     }\n \n+    @PutMapping(\"{commentId:\\\\d+}/status/{status}\")\n+    @ApiOperation(\"Updates comment status\")\n+    public BaseCommentDTO updateStatusBy(@PathVariable(\"commentId\") Long commentId,\n+                                         @PathVariable(\"status\") CommentStatus status) {\n+        // Update comment status\n+        JournalComment updatedJournalComment = journalCommentService.updateStatus(commentId, status);\n+        return journalCommentService.convertTo(updatedJournalComment);\n+    }\n+\n+    @DeleteMapping(\"{commentId:\\\\d+}\")\n+    @ApiOperation(\"Deletes comment permanently and recursively\")\n+    public BaseCommentDTO deleteBy(@PathVariable(\"commentId\") Long commentId) {\n+        JournalComment deletedJournalComment = journalCommentService.removeById(commentId);\n+        return journalCommentService.convertTo(deletedJournalComment);\n+    }\n }\n\ndiff --git a/src/main/java/run/halo/app/controller/admin/api/PostCommentController.java b/src/main/java/run/halo/app/controller/admin/api/PostCommentController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/PostCommentController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/PostCommentController.java\n@@ -61,15 +61,13 @@ public BaseCommentDTO updateStatusBy(@PathVariable(\"commentId\") Long commentId,\n                                          @PathVariable(\"status\") CommentStatus status) {\n         // Update comment status\n         PostComment updatedPostComment = postCommentService.updateStatus(commentId, status);\n-\n         return postCommentService.convertTo(updatedPostComment);\n     }\n \n     @DeleteMapping(\"{commentId:\\\\d+}\")\n     @ApiOperation(\"Deletes comment permanently and recursively\")\n     public BaseCommentDTO deleteBy(@PathVariable(\"commentId\") Long commentId) {\n         PostComment deletedPostComment = postCommentService.removeById(commentId);\n-\n         return postCommentService.convertTo(deletedPostComment);\n     }\n }\n\ndiff --git a/src/main/java/run/halo/app/controller/admin/api/SheetCommentController.java b/src/main/java/run/halo/app/controller/admin/api/SheetCommentController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/SheetCommentController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/SheetCommentController.java\n@@ -7,6 +7,7 @@\n import org.springframework.web.bind.annotation.*;\n import run.halo.app.model.dto.BaseCommentDTO;\n import run.halo.app.model.entity.SheetComment;\n+import run.halo.app.model.enums.CommentStatus;\n import run.halo.app.model.params.CommentQuery;\n import run.halo.app.model.params.SheetCommentParam;\n import run.halo.app.model.vo.SheetCommentWithSheetVO;\n@@ -51,4 +52,20 @@ public BaseCommentDTO createBy(@RequestBody SheetCommentParam commentParam) {\n         SheetComment createdComment = sheetCommentService.createBy(commentParam);\n         return sheetCommentService.convertTo(createdComment);\n     }\n+\n+    @PutMapping(\"{commentId:\\\\d+}/status/{status}\")\n+    @ApiOperation(\"Updates comment status\")\n+    public BaseCommentDTO updateStatusBy(@PathVariable(\"commentId\") Long commentId,\n+                                         @PathVariable(\"status\") CommentStatus status) {\n+        // Update comment status\n+        SheetComment updatedSheetComment = sheetCommentService.updateStatus(commentId, status);\n+        return sheetCommentService.convertTo(updatedSheetComment);\n+    }\n+\n+    @DeleteMapping(\"{commentId:\\\\d+}\")\n+    @ApiOperation(\"Deletes comment permanently and recursively\")\n+    public BaseCommentDTO deleteBy(@PathVariable(\"commentId\") Long commentId) {\n+        SheetComment deletedSheetComment = sheetCommentService.removeById(commentId);\n+        return sheetCommentService.convertTo(deletedSheetComment);\n+    }\n }",
    "output": "Perfect sheet and journal comment controller"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/SheetCommentController.java b/src/main/java/run/halo/app/controller/admin/api/SheetCommentController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/SheetCommentController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/SheetCommentController.java\n@@ -0,0 +1,33 @@\n+package run.halo.app.controller.admin.api;\n+\n+import io.swagger.annotations.ApiOperation;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import run.halo.app.model.dto.BaseCommentDTO;\n+import run.halo.app.model.entity.SheetComment;\n+import run.halo.app.model.params.SheetCommentParam;\n+import run.halo.app.service.SheetCommentService;\n+\n+/**\n+ * @author johnniang\n+ * @date 19-4-25\n+ */\n+@RestController\n+@RequestMapping(\"/api/admin/sheets/comments\")\n+public class SheetCommentController {\n+\n+    private final SheetCommentService sheetCommentService;\n+\n+    public SheetCommentController(SheetCommentService sheetCommentService) {\n+        this.sheetCommentService = sheetCommentService;\n+    }\n+\n+    @PostMapping\n+    @ApiOperation(\"Creates a comment (new or reply)\")\n+    public BaseCommentDTO createBy(@RequestBody SheetCommentParam commentParam) {\n+        SheetComment createdComment = sheetCommentService.createBy(commentParam);\n+        return sheetCommentService.convertTo(createdComment);\n+    }\n+}\n\ndiff --git a/src/main/java/run/halo/app/model/params/SheetCommentParam.java b/src/main/java/run/halo/app/model/params/SheetCommentParam.java\n--- a/src/main/java/run/halo/app/model/params/SheetCommentParam.java\n+++ b/src/main/java/run/halo/app/model/params/SheetCommentParam.java\n@@ -0,0 +1,19 @@\n+package run.halo.app.model.params;\n+\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+import run.halo.app.model.entity.SheetComment;\n+\n+/**\n+ * Sheet comment param.\n+ *\n+ * @author johnniang\n+ * @date 19-4-25\n+ */\n+@Data\n+@ToString(callSuper = true)\n+@EqualsAndHashCode(callSuper = true)\n+public class SheetCommentParam extends BaseCommentParam<SheetComment> {\n+\n+}",
    "output": "Complete sheet comment creation api"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/JournalCommentController.java b/src/main/java/run/halo/app/controller/admin/api/JournalCommentController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/JournalCommentController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/JournalCommentController.java\n@@ -1,15 +1,21 @@\n package run.halo.app.controller.admin.api;\n \n import io.swagger.annotations.ApiOperation;\n-import org.springframework.web.bind.annotation.PostMapping;\n-import org.springframework.web.bind.annotation.RequestBody;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.web.PageableDefault;\n+import org.springframework.web.bind.annotation.*;\n import run.halo.app.model.dto.BaseCommentDTO;\n import run.halo.app.model.entity.JournalComment;\n+import run.halo.app.model.params.CommentQuery;\n import run.halo.app.model.params.JournalCommentParam;\n+import run.halo.app.model.vo.JournalCommentWithJournalVO;\n import run.halo.app.service.JournalCommentService;\n \n+import java.util.List;\n+\n+import static org.springframework.data.domain.Sort.Direction.DESC;\n+\n /**\n  * Journal comment controller.\n  *\n@@ -26,6 +32,20 @@ public JournalCommentController(JournalCommentService journalCommentService) {\n         this.journalCommentService = journalCommentService;\n     }\n \n+    @GetMapping\n+    @ApiOperation(\"Lists journal comments\")\n+    public Page<JournalCommentWithJournalVO> pageBy(@PageableDefault(sort = \"updateTime\", direction = DESC) Pageable pageable,\n+                                                    CommentQuery commentQuery) {\n+        Page<JournalComment> journalCommentPage = journalCommentService.pageBy(commentQuery, pageable);\n+\n+        return journalCommentService.convertToWithJournalVo(journalCommentPage);\n+    }\n+\n+    @GetMapping(\"latest\")\n+    public List<JournalCommentWithJournalVO> listLatest(@RequestParam(name = \"top\", defaultValue = \"10\") int top) {\n+        return journalCommentService.convertToWithJournalVo(journalCommentService.pageLatest(top).getContent());\n+    }\n+\n     @PostMapping\n     @ApiOperation(\"Creates a journal comment\")\n     public BaseCommentDTO createCommentBy(@RequestBody JournalCommentParam journalCommentParam) {\n\ndiff --git a/src/main/java/run/halo/app/controller/admin/api/PostCommentController.java b/src/main/java/run/halo/app/controller/admin/api/PostCommentController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/PostCommentController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/PostCommentController.java\n@@ -34,7 +34,7 @@ public PostCommentController(PostCommentService postCommentService) {\n     }\n \n     @GetMapping\n-    @ApiOperation(\"Lists comments\")\n+    @ApiOperation(\"Lists post comments\")\n     public Page<PostCommentWithPostVO> pageBy(@PageableDefault(sort = \"updateTime\", direction = DESC) Pageable pageable,\n                                               CommentQuery commentQuery) {\n         Page<PostComment> commentPage = postCommentService.pageBy(commentQuery, pageable);\n\ndiff --git a/src/main/java/run/halo/app/model/vo/JournalCommentWithJournalVO.java b/src/main/java/run/halo/app/model/vo/JournalCommentWithJournalVO.java\n--- a/src/main/java/run/halo/app/model/vo/JournalCommentWithJournalVO.java\n+++ b/src/main/java/run/halo/app/model/vo/JournalCommentWithJournalVO.java\n@@ -0,0 +1,21 @@\n+package run.halo.app.model.vo;\n+\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+import run.halo.app.model.dto.BaseCommentDTO;\n+import run.halo.app.model.dto.JournalDTO;\n+\n+/**\n+ * Journal comment with journal vo.\n+ *\n+ * @author johnniang\n+ * @date 19-4-25\n+ */\n+@Data\n+@ToString(callSuper = true)\n+@EqualsAndHashCode(callSuper = true)\n+public class JournalCommentWithJournalVO extends BaseCommentDTO {\n+\n+    private JournalDTO journal;\n+}\n\ndiff --git a/src/main/java/run/halo/app/service/JournalCommentService.java b/src/main/java/run/halo/app/service/JournalCommentService.java\n--- a/src/main/java/run/halo/app/service/JournalCommentService.java\n+++ b/src/main/java/run/halo/app/service/JournalCommentService.java\n@@ -1,8 +1,14 @@\n package run.halo.app.service;\n \n+import org.springframework.data.domain.Page;\n+import org.springframework.lang.NonNull;\n+import org.springframework.lang.Nullable;\n import run.halo.app.model.entity.JournalComment;\n+import run.halo.app.model.vo.JournalCommentWithJournalVO;\n import run.halo.app.service.base.BaseCommentService;\n \n+import java.util.List;\n+\n /**\n  * Journal comment service interface.\n  *\n@@ -11,4 +17,9 @@\n  */\n public interface JournalCommentService extends BaseCommentService<JournalComment> {\n \n+    @NonNull\n+    List<JournalCommentWithJournalVO> convertToWithJournalVo(@Nullable List<JournalComment> journalComments);\n+\n+    @NonNull\n+    Page<JournalCommentWithJournalVO> convertToWithJournalVo(@NonNull Page<JournalComment> journalCommentPage);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/JournalCommentServiceImpl.java b/src/main/java/run/halo/app/service/impl/JournalCommentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/JournalCommentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/JournalCommentServiceImpl.java\n@@ -1,13 +1,27 @@\n package run.halo.app.service.impl;\n \n+import cn.hutool.core.collection.CollectionUtil;\n+import cn.hutool.core.lang.Assert;\n import org.springframework.context.ApplicationEventPublisher;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.PageImpl;\n import org.springframework.stereotype.Service;\n import run.halo.app.exception.NotFoundException;\n+import run.halo.app.model.dto.JournalDTO;\n+import run.halo.app.model.entity.Journal;\n import run.halo.app.model.entity.JournalComment;\n+import run.halo.app.model.vo.JournalCommentWithJournalVO;\n import run.halo.app.repository.JournalCommentRepository;\n import run.halo.app.repository.JournalRepository;\n import run.halo.app.service.JournalCommentService;\n import run.halo.app.service.OptionService;\n+import run.halo.app.utils.ServiceUtils;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n /**\n  * Journal comment service implementation.\n@@ -36,4 +50,39 @@ public void targetMustExist(Integer journalId) {\n             throw new NotFoundException(\"The journal with id \" + journalId + \" was not found\");\n         }\n     }\n+\n+    @Override\n+    public List<JournalCommentWithJournalVO> convertToWithJournalVo(List<JournalComment> journalComments) {\n+\n+        if (CollectionUtil.isEmpty(journalComments)) {\n+            return Collections.emptyList();\n+        }\n+\n+        Set<Integer> journalIds = ServiceUtils.fetchProperty(journalComments, JournalComment::getPostId);\n+\n+        // Get all journals\n+        List<Journal> journals = journalRepository.findAllById(journalIds);\n+\n+        Map<Integer, Journal> journalMap = ServiceUtils.convertToMap(journals, Journal::getId);\n+\n+        return journalComments.stream()\n+                .filter(journalComment -> journalMap.containsKey(journalComment.getPostId()))\n+                .map(journalComment -> {\n+                    JournalCommentWithJournalVO journalCmtWithJournalVo = new JournalCommentWithJournalVO().convertFrom(journalComment);\n+                    journalCmtWithJournalVo.setJournal(new JournalDTO().convertFrom(journalMap.get(journalComment.getPostId())));\n+                    return journalCmtWithJournalVo;\n+                })\n+                .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public Page<JournalCommentWithJournalVO> convertToWithJournalVo(Page<JournalComment> journalCommentPage) {\n+        Assert.notNull(journalCommentPage, \"Journal comment page must not be null\");\n+\n+        // Convert the list\n+        List<JournalCommentWithJournalVO> journalCmtWithJournalVOS = convertToWithJournalVo(journalCommentPage.getContent());\n+\n+        // Build and return\n+        return new PageImpl<>(journalCmtWithJournalVOS, journalCommentPage.getPageable(), journalCommentPage.getTotalElements());\n+    }\n }",
    "output": "Complete journal comment list api"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/JournalCommentController.java b/src/main/java/run/halo/app/controller/admin/api/JournalCommentController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/JournalCommentController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/JournalCommentController.java\n@@ -0,0 +1,36 @@\n+package run.halo.app.controller.admin.api;\n+\n+import io.swagger.annotations.ApiOperation;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+import run.halo.app.model.dto.BaseCommentDTO;\n+import run.halo.app.model.entity.JournalComment;\n+import run.halo.app.model.params.JournalCommentParam;\n+import run.halo.app.service.JournalCommentService;\n+\n+/**\n+ * Journal comment controller.\n+ *\n+ * @author johnniang\n+ * @date 19-4-25\n+ */\n+@RestController\n+@RequestMapping(\"/api/admin/journals/comments\")\n+public class JournalCommentController {\n+\n+    private final JournalCommentService journalCommentService;\n+\n+    public JournalCommentController(JournalCommentService journalCommentService) {\n+        this.journalCommentService = journalCommentService;\n+    }\n+\n+    @PostMapping\n+    @ApiOperation(\"Creates a journal comment\")\n+    public BaseCommentDTO createCommentBy(@RequestBody JournalCommentParam journalCommentParam) {\n+        JournalComment journalComment = journalCommentService.createBy(journalCommentParam);\n+        return journalCommentService.convertTo(journalComment);\n+    }\n+\n+}\n\ndiff --git a/src/main/java/run/halo/app/controller/admin/api/JournalController.java b/src/main/java/run/halo/app/controller/admin/api/JournalController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/JournalController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/JournalController.java\n@@ -70,13 +70,6 @@ public JournalDTO createBy(@RequestBody @Valid JournalParam journalParam) {\n         return journalService.convertTo(createdJournal);\n     }\n \n-    @PostMapping(\"comments\")\n-    @ApiOperation(\"Create a journal comment\")\n-    public BaseCommentDTO createCommentBy(@RequestBody JournalCommentParam journalCommentParam) {\n-        JournalComment journalComment = journalCommentService.createBy(journalCommentParam);\n-        return journalCommentService.convertTo(journalComment);\n-    }\n-\n     @GetMapping(\"{journalId:\\\\d+}/comments/tree_view\")\n     @ApiOperation(\"Lists comments with tree view\")\n     public Page<BaseCommentVO> listCommentTree(@PathVariable(\"journalId\") Integer journalId,\n\ndiff --git a/src/main/java/run/halo/app/service/JournalService.java b/src/main/java/run/halo/app/service/JournalService.java\n--- a/src/main/java/run/halo/app/service/JournalService.java\n+++ b/src/main/java/run/halo/app/service/JournalService.java\n@@ -46,15 +46,6 @@ public interface JournalService extends CrudService<Journal, Integer> {\n     @NonNull\n     JournalDTO convertTo(@NonNull Journal journal);\n \n-    /**\n-     * Converts to journal with comment count dto.\n-     *\n-     * @param journal journal must not be null\n-     * @return journal with comment count dto\n-     */\n-    @NonNull\n-    JournalWithCmtCountDTO convertToCmtCountDto(@NonNull Journal journal);\n-\n     /**\n      * Converts to journal with comment count dto list.\n      *\n\ndiff --git a/src/main/java/run/halo/app/service/impl/JournalServiceImpl.java b/src/main/java/run/halo/app/service/impl/JournalServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/JournalServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/JournalServiceImpl.java\n@@ -1,19 +1,25 @@\n package run.halo.app.service.impl;\n \n-import cn.hutool.core.lang.Assert;\n import org.springframework.data.domain.Page;\n-import org.springframework.data.domain.Pageable;\n+import org.springframework.data.domain.PageImpl;\n import org.springframework.stereotype.Service;\n+import org.springframework.util.Assert;\n+import org.springframework.util.CollectionUtils;\n import run.halo.app.model.dto.JournalDTO;\n import run.halo.app.model.dto.JournalWithCmtCountDTO;\n import run.halo.app.model.entity.Journal;\n import run.halo.app.model.params.JournalParam;\n import run.halo.app.repository.JournalRepository;\n+import run.halo.app.service.JournalCommentService;\n import run.halo.app.service.JournalService;\n import run.halo.app.service.base.AbstractCrudService;\n import run.halo.app.utils.ServiceUtils;\n \n+import java.util.Collections;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n /**\n  * Journal service implementation.\n@@ -26,9 +32,13 @@ public class JournalServiceImpl extends AbstractCrudService<Journal, Integer> im\n \n     private final JournalRepository journalRepository;\n \n-    public JournalServiceImpl(JournalRepository journalRepository) {\n+    private final JournalCommentService journalCommentService;\n+\n+    public JournalServiceImpl(JournalRepository journalRepository,\n+                              JournalCommentService journalCommentService) {\n         super(journalRepository);\n         this.journalRepository = journalRepository;\n+        this.journalCommentService = journalCommentService;\n     }\n \n     @Override\n@@ -50,20 +60,37 @@ public JournalDTO convertTo(Journal journal) {\n         return new JournalDTO().convertFrom(journal);\n     }\n \n-    @Override\n-    public JournalWithCmtCountDTO convertToCmtCountDto(Journal journal) {\n-\n-        return null;\n-    }\n-\n     @Override\n     public List<JournalWithCmtCountDTO> convertToCmtCountDto(List<Journal> journals) {\n-        return null;\n+        if (CollectionUtils.isEmpty(journals)) {\n+            return Collections.emptyList();\n+        }\n+\n+        // Get journal ids\n+        Set<Integer> journalIds = ServiceUtils.fetchProperty(journals, Journal::getId);\n+\n+        // Get comment count map\n+        Map<Integer, Long> journalCommentCountMap = journalCommentService.countByPostIds(journalIds);\n+\n+        return journals.stream()\n+                .map(journal -> {\n+                    JournalWithCmtCountDTO journalWithCmtCountDTO = new JournalWithCmtCountDTO().convertFrom(journal);\n+                    // Set comment count\n+                    journalWithCmtCountDTO.setCommentCount(journalCommentCountMap.getOrDefault(journal.getId(), 0L));\n+                    return journalWithCmtCountDTO;\n+                })\n+                .collect(Collectors.toList());\n     }\n \n     @Override\n     public Page<JournalWithCmtCountDTO> convertToCmtCountDto(Page<Journal> journalPage) {\n-        return null;\n+        Assert.notNull(journalPage, \"Journal page must not be null\");\n+\n+        // Convert\n+        List<JournalWithCmtCountDTO> journalWithCmtCountDTOS = convertToCmtCountDto(journalPage.getContent());\n+\n+        // Build and return\n+        return new PageImpl<>(journalWithCmtCountDTOS, journalPage.getPageable(), journalPage.getTotalElements());\n     }\n \n ",
    "output": "Complete JournalService#convertToCmtCountDto"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/SheetController.java b/src/main/java/run/halo/app/controller/admin/api/SheetController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/SheetController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/SheetController.java\n@@ -5,11 +5,11 @@\n import org.springframework.data.domain.Pageable;\n import org.springframework.data.web.PageableDefault;\n import org.springframework.web.bind.annotation.*;\n-import run.halo.app.model.dto.post.SheetDetailDTO;\n-import run.halo.app.model.vo.SheetListVO;\n+import run.halo.app.model.dto.post.BasePostDetailDTO;\n import run.halo.app.model.entity.Sheet;\n import run.halo.app.model.enums.PostStatus;\n import run.halo.app.model.params.SheetParam;\n+import run.halo.app.model.vo.SheetListVO;\n import run.halo.app.service.SheetService;\n \n import javax.validation.Valid;\n@@ -34,28 +34,28 @@ public SheetController(SheetService sheetService) {\n \n     @GetMapping(\"{sheetId:\\\\d+}\")\n     @ApiOperation(\"Gets a sheet\")\n-    public SheetDetailDTO getBy(@PathVariable(\"sheetId\") Integer sheetId) {\n+    public BasePostDetailDTO getBy(@PathVariable(\"sheetId\") Integer sheetId) {\n         Sheet sheet = sheetService.getById(sheetId);\n-        return sheetService.convertToDetailDto(sheet);\n+        return sheetService.convertToDetail(sheet);\n     }\n \n     @GetMapping\n     @ApiOperation(\"Gets a page of sheet\")\n     public Page<SheetListVO> pageBy(@PageableDefault(sort = \"editTime\", direction = DESC) Pageable pageable) {\n         Page<Sheet> sheetPage = sheetService.pageBy(pageable);\n-        return sheetService.convertToListDto(sheetPage);\n+        return sheetService.convertToListVo(sheetPage);\n     }\n \n     @PostMapping\n     @ApiOperation(\"Creates a sheet\")\n-    public SheetDetailDTO createBy(@RequestBody @Valid SheetParam sheetParam) {\n+    public BasePostDetailDTO createBy(@RequestBody @Valid SheetParam sheetParam) {\n         Sheet sheet = sheetService.createBy(sheetParam.convertTo());\n-        return sheetService.convertToDetailDto(sheet);\n+        return sheetService.convertToDetail(sheet);\n     }\n \n     @PutMapping(\"{sheetId:\\\\d+}\")\n     @ApiOperation(\"Updates a sheet\")\n-    public SheetDetailDTO updateBy(\n+    public BasePostDetailDTO updateBy(\n             @PathVariable(\"sheetId\") Integer sheetId,\n             @RequestBody @Valid SheetParam sheetParam) {\n         Sheet sheetToUpdate = sheetService.getById(sheetId);\n@@ -64,7 +64,7 @@ public SheetDetailDTO updateBy(\n \n         Sheet sheet = sheetService.updateBy(sheetToUpdate);\n \n-        return sheetService.convertToDetailDto(sheet);\n+        return sheetService.convertToDetail(sheet);\n     }\n \n     @PutMapping(\"{sheetId:\\\\d+}/{status}\")\n@@ -82,8 +82,8 @@ public void updateStatusBy(\n \n     @DeleteMapping(\"{sheetId:\\\\d+}\")\n     @ApiOperation(\"Deletes a sheet\")\n-    public SheetDetailDTO deleteBy(@PathVariable(\"sheetId\") Integer sheetId) {\n+    public BasePostDetailDTO deleteBy(@PathVariable(\"sheetId\") Integer sheetId) {\n         Sheet sheet = sheetService.removeById(sheetId);\n-        return sheetService.convertToDetailDto(sheet);\n+        return sheetService.convertToDetail(sheet);\n     }\n }\n\ndiff --git a/src/main/java/run/halo/app/controller/content/ContentSheetController.java b/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n@@ -8,7 +8,6 @@\n import org.springframework.web.bind.annotation.RequestParam;\n import run.halo.app.model.entity.Sheet;\n import run.halo.app.model.enums.PostStatus;\n-import run.halo.app.service.PostCommentService;\n import run.halo.app.service.SheetService;\n import run.halo.app.service.ThemeService;\n \n@@ -22,15 +21,11 @@ public class ContentSheetController {\n \n     private final SheetService sheetService;\n \n-    private final PostCommentService postCommentService;\n-\n     private final ThemeService themeService;\n \n     public ContentSheetController(SheetService sheetService,\n-                                  PostCommentService postCommentService,\n                                   ThemeService themeService) {\n         this.sheetService = sheetService;\n-        this.postCommentService = postCommentService;\n         this.themeService = themeService;\n     }\n \n@@ -67,7 +62,7 @@ public String sheet(@PathVariable(value = \"url\") String url,\n                         Model model) {\n         Sheet sheet = sheetService.getBy(PostStatus.PUBLISHED, url);\n \n-        model.addAttribute(\"sheet\", sheetService.convertToDetailDto(sheet));\n+        model.addAttribute(\"sheet\", sheetService.convertToDetail(sheet));\n \n         if (StrUtil.isNotEmpty(sheet.getTemplate())) {\n             return themeService.render(sheet.getTemplate());\n\ndiff --git a/src/main/java/run/halo/app/service/SheetService.java b/src/main/java/run/halo/app/service/SheetService.java\n--- a/src/main/java/run/halo/app/service/SheetService.java\n+++ b/src/main/java/run/halo/app/service/SheetService.java\n@@ -37,24 +37,14 @@ public interface SheetService extends BasePostService<Sheet> {\n     @Override\n     Sheet getBy(PostStatus status, String url);\n \n-    /**\n-     * Converts to detail dto.\n-     *\n-     * @param sheet sheet must not be null\n-     * @return sheet detail dto\n-     */\n-    @NonNull\n-    SheetDetailDTO convertToDetailDto(@NonNull Sheet sheet);\n-\n-\n     /**\n      * Converts to list dto page.\n      *\n      * @param sheetPage sheet page must not be nulls\n      * @return a page of sheet list dto\n      */\n     @NonNull\n-    Page<SheetListVO> convertToListDto(@NonNull Page<Sheet> sheetPage);\n+    Page<SheetListVO> convertToListVo(@NonNull Page<Sheet> sheetPage);\n \n \n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java b/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n@@ -80,15 +80,7 @@ public Sheet getBy(PostStatus status, String url) {\n     }\n \n     @Override\n-    public SheetDetailDTO convertToDetailDto(Sheet sheet) {\n-        Assert.notNull(sheet, \"Sheet must not be null\");\n-\n-        // Convert and return\n-        return new SheetDetailDTO().convertFrom(sheet);\n-    }\n-\n-    @Override\n-    public Page<SheetListVO> convertToListDto(Page<Sheet> sheetPage) {\n+    public Page<SheetListVO> convertToListVo(Page<Sheet> sheetPage) {\n         Assert.notNull(sheetPage, \"Sheet page must not be null\");\n \n         // Get all sheet id",
    "output": "Refactor sheet service and contorller"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/JournalController.java b/src/main/java/run/halo/app/controller/admin/api/JournalController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/JournalController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/JournalController.java\n@@ -2,7 +2,10 @@\n \n import io.swagger.annotations.ApiOperation;\n import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.PageRequest;\n import org.springframework.data.domain.Pageable;\n+import org.springframework.data.domain.Sort;\n+import org.springframework.data.web.SortDefault;\n import org.springframework.web.bind.annotation.*;\n import run.halo.app.model.dto.BaseCommentDTO;\n import run.halo.app.model.dto.JournalDTO;\n@@ -11,12 +14,17 @@\n import run.halo.app.model.entity.JournalComment;\n import run.halo.app.model.params.JournalCommentParam;\n import run.halo.app.model.params.JournalParam;\n+import run.halo.app.model.vo.BaseCommentVO;\n+import run.halo.app.model.vo.BaseCommentWithParentVO;\n import run.halo.app.service.JournalCommentService;\n import run.halo.app.service.JournalService;\n+import run.halo.app.service.OptionService;\n \n import javax.validation.Valid;\n import java.util.List;\n \n+import static org.springframework.data.domain.Sort.Direction.DESC;\n+\n /**\n  * Journal controller.\n  *\n@@ -31,10 +39,14 @@ public class JournalController {\n \n     private final JournalCommentService journalCommentService;\n \n+    private final OptionService optionService;\n+\n     public JournalController(JournalService journalService,\n-                             JournalCommentService journalCommentService) {\n+                             JournalCommentService journalCommentService,\n+                             OptionService optionService) {\n         this.journalService = journalService;\n         this.journalCommentService = journalCommentService;\n+        this.optionService = optionService;\n     }\n \n     @GetMapping\n@@ -64,4 +76,20 @@ public BaseCommentDTO createCommentBy(@RequestBody JournalCommentParam journalCo\n         JournalComment journalComment = journalCommentService.createBy(journalCommentParam);\n         return journalCommentService.convertTo(journalComment);\n     }\n+\n+    @GetMapping(\"{journalId:\\\\d+}/comments/tree_view\")\n+    @ApiOperation(\"Lists comments with tree view\")\n+    public Page<BaseCommentVO> listCommentTree(@PathVariable(\"journalId\") Integer journalId,\n+                                               @RequestParam(name = \"page\", required = false, defaultValue = \"0\") int page,\n+                                               @SortDefault(sort = \"createTime\", direction = DESC) Sort sort) {\n+        return journalCommentService.pageVosBy(journalId, PageRequest.of(page, optionService.getCommentPageSize(), sort));\n+    }\n+\n+    @GetMapping(\"{journalId:\\\\d+}/comments/list_view\")\n+    @ApiOperation(\"Lists comment with list view\")\n+    public Page<BaseCommentWithParentVO> listComments(@PathVariable(\"journalId\") Integer journalId,\n+                                                      @RequestParam(name = \"page\", required = false, defaultValue = \"0\") int page,\n+                                                      @SortDefault(sort = \"createTime\", direction = DESC) Sort sort) {\n+        return journalCommentService.pageWithParentVoBy(journalId, PageRequest.of(page, optionService.getCommentPageSize(), sort));\n+    }\n }\n\ndiff --git a/src/main/java/run/halo/app/controller/admin/api/MainController.java b/src/main/java/run/halo/app/controller/admin/api/MainController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/MainController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/MainController.java\n@@ -1,4 +1,4 @@\n-package run.halo.app.controller.admin;\n+package run.halo.app.controller.admin.api;\n \n import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.GetMapping;\n\ndiff --git a/src/main/java/run/halo/app/model/dto/CommentDTO.java b/src/main/java/run/halo/app/model/dto/CommentDTO.java\n--- a/src/main/java/run/halo/app/model/dto/CommentDTO.java\n+++ b/src/main/java/run/halo/app/model/dto/CommentDTO.java\n@@ -1,18 +0,0 @@\n-package run.halo.app.model.dto;\n-\n-import lombok.Data;\n-import lombok.EqualsAndHashCode;\n-import lombok.ToString;\n-\n-/**\n- * Comment output dto.\n- *\n- * @author johnniang\n- */\n-@Data\n-@ToString(callSuper = true)\n-@EqualsAndHashCode(callSuper = true)\n-@Deprecated\n-public class CommentDTO extends BaseCommentDTO {\n-\n-}\n\ndiff --git a/src/main/java/run/halo/app/model/dto/base/InputConverter.java b/src/main/java/run/halo/app/model/dto/base/InputConverter.java\n--- a/src/main/java/run/halo/app/model/dto/base/InputConverter.java\n+++ b/src/main/java/run/halo/app/model/dto/base/InputConverter.java\n@@ -22,7 +22,7 @@ public interface InputConverter<DOMAIN> {\n     @SuppressWarnings(\"unchecked\")\n     default DOMAIN convertTo() {\n         // Get parameterized type\n-        ParameterizedType currentType = getParameterizedType();\n+        ParameterizedType currentType = parameterizedType();\n \n         // Assert not equal\n         Objects.requireNonNull(currentType, \"Cannot fetch actual type because parameterized type is null\");\n@@ -47,7 +47,7 @@ default void update(DOMAIN domain) {\n      * @return parameterized type or null\n      */\n     @Nullable\n-    default ParameterizedType getParameterizedType() {\n+    default ParameterizedType parameterizedType() {\n         return ReflectionUtils.getParameterizedType(InputConverter.class, this.getClass());\n     }\n }\n\ndiff --git a/src/main/java/run/halo/app/model/params/BaseCommentParam.java b/src/main/java/run/halo/app/model/params/BaseCommentParam.java\n--- a/src/main/java/run/halo/app/model/params/BaseCommentParam.java\n+++ b/src/main/java/run/halo/app/model/params/BaseCommentParam.java\n@@ -42,7 +42,7 @@ public abstract class BaseCommentParam<COMMENT> implements InputConverter<COMMEN\n     private Long parentId = 0L;\n \n     @Override\n-    public ParameterizedType getParameterizedType() {\n+    public ParameterizedType parameterizedType() {\n         return ReflectionUtils.getParameterizedTypeBySuperClass(BaseCommentParam.class, this.getClass());\n     }\n }",
    "output": "Complete journal comment list api"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/dto/base/InputConverter.java b/src/main/java/run/halo/app/model/dto/base/InputConverter.java\n--- a/src/main/java/run/halo/app/model/dto/base/InputConverter.java\n+++ b/src/main/java/run/halo/app/model/dto/base/InputConverter.java\n@@ -1,15 +1,12 @@\n package run.halo.app.model.dto.base;\n \n-import run.halo.app.utils.ReflectionUtils;\n+import org.springframework.lang.Nullable;\n import run.halo.app.utils.BeanUtils;\n import run.halo.app.utils.ReflectionUtils;\n \n import java.lang.reflect.ParameterizedType;\n import java.util.Objects;\n \n-import static run.halo.app.utils.BeanUtils.transformFrom;\n-import static run.halo.app.utils.BeanUtils.updateProperties;\n-\n /**\n  * Converter interface for input DTO.\n  *\n@@ -25,7 +22,7 @@ public interface InputConverter<DOMAIN> {\n     @SuppressWarnings(\"unchecked\")\n     default DOMAIN convertTo() {\n         // Get parameterized type\n-        ParameterizedType currentType = ReflectionUtils.getParameterizedType(InputConverter.class, this.getClass());\n+        ParameterizedType currentType = getParameterizedType();\n \n         // Assert not equal\n         Objects.requireNonNull(currentType, \"Cannot fetch actual type because parameterized type is null\");\n@@ -43,5 +40,15 @@ default DOMAIN convertTo() {\n     default void update(DOMAIN domain) {\n         BeanUtils.updateProperties(this, domain);\n     }\n+\n+    /**\n+     * Get parameterized type.\n+     *\n+     * @return parameterized type or null\n+     */\n+    @Nullable\n+    default ParameterizedType getParameterizedType() {\n+        return ReflectionUtils.getParameterizedType(InputConverter.class, this.getClass());\n+    }\n }\n \n\ndiff --git a/src/main/java/run/halo/app/model/params/BaseCommentParam.java b/src/main/java/run/halo/app/model/params/BaseCommentParam.java\n--- a/src/main/java/run/halo/app/model/params/BaseCommentParam.java\n+++ b/src/main/java/run/halo/app/model/params/BaseCommentParam.java\n@@ -0,0 +1,48 @@\n+package run.halo.app.model.params;\n+\n+import lombok.Data;\n+import run.halo.app.model.dto.base.InputConverter;\n+import run.halo.app.utils.ReflectionUtils;\n+\n+import javax.validation.constraints.Email;\n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotBlank;\n+import javax.validation.constraints.Size;\n+import java.lang.reflect.ParameterizedType;\n+\n+/**\n+ * Base Comment param.\n+ *\n+ * @author johnniang\n+ * @date 3/22/19\n+ */\n+@Data\n+public abstract class BaseCommentParam<COMMENT> implements InputConverter<COMMENT> {\n+\n+    @NotBlank(message = \"Comment author name must not be blank\")\n+    @Size(max = 50, message = \"Length of comment author name must not be more than {max}\")\n+    private String author;\n+\n+    @NotBlank(message = \"Comment email must not be blank\")\n+    @Email(message = \"Comment email's format is incorrect\")\n+    @Size(max = 255, message = \"Length of comment email must not be more than {max}\")\n+    private String email;\n+\n+    @Size(max = 127, message = \"Length of comment author url must not be more than {max}\")\n+    private String authorUrl;\n+\n+    @NotBlank(message = \"Comment content must not be blank\")\n+    @Size(max = 1023, message = \"Length of comment content must not be more than {max}\")\n+    private String content;\n+\n+    @Min(value = 1, message = \"Post id must not be less than {value}\")\n+    private Integer postId;\n+\n+    @Min(value = 0, message = \"Comment parent id must not be less than {value}\")\n+    private Long parentId = 0L;\n+\n+    @Override\n+    public ParameterizedType getParameterizedType() {\n+        return ReflectionUtils.getParameterizedTypeBySuperClass(BaseCommentParam.class, this.getClass());\n+    }\n+}\n\ndiff --git a/src/main/java/run/halo/app/utils/ReflectionUtils.java b/src/main/java/run/halo/app/utils/ReflectionUtils.java\n--- a/src/main/java/run/halo/app/utils/ReflectionUtils.java\n+++ b/src/main/java/run/halo/app/utils/ReflectionUtils.java\n@@ -20,20 +20,20 @@ private ReflectionUtils() {\n     /**\n      * Gets parameterized type.\n      *\n-     * @param interfaceType interface type must not be null\n-     * @param genericTypes  generic type array\n+     * @param superType    super type must not be null (super class or super interface)\n+     * @param genericTypes generic type array\n      * @return parameterized type of the interface or null if it is mismatch\n      */\n     @Nullable\n-    public static ParameterizedType getParameterizedType(@NonNull Class<?> interfaceType, Type... genericTypes) {\n-        Assert.notNull(interfaceType, \"Interface type must not be null\");\n+    public static ParameterizedType getParameterizedType(@NonNull Class<?> superType, Type... genericTypes) {\n+        Assert.notNull(superType, \"Interface or super type must not be null\");\n \n         ParameterizedType currentType = null;\n \n         for (Type genericType : genericTypes) {\n             if (genericType instanceof ParameterizedType) {\n                 ParameterizedType parameterizedType = (ParameterizedType) genericType;\n-                if (parameterizedType.getRawType().getTypeName().equals(interfaceType.getTypeName())) {\n+                if (parameterizedType.getRawType().getTypeName().equals(superType.getTypeName())) {\n                     currentType = parameterizedType;\n                     break;\n                 }\n@@ -53,6 +53,7 @@ public static ParameterizedType getParameterizedType(@NonNull Class<?> interface\n     @Nullable\n     public static ParameterizedType getParameterizedType(@NonNull Class<?> interfaceType, Class<?> implementationClass) {\n         Assert.notNull(interfaceType, \"Interface type must not be null\");\n+        Assert.isTrue(interfaceType.isInterface(), \"The give type must be an interface\");\n \n         if (implementationClass == null) {\n             // If the super class is Object parent then return null\n@@ -71,4 +72,21 @@ public static ParameterizedType getParameterizedType(@NonNull Class<?> interface\n \n         return getParameterizedType(interfaceType, superclass);\n     }\n+\n+    /**\n+     * Gets parameterized type by super class.\n+     *\n+     * @param superClassType super class type must not be null\n+     * @param extensionClass extension class\n+     * @return parameterized type or null\n+     */\n+    @Nullable\n+    public static ParameterizedType getParameterizedTypeBySuperClass(@NonNull Class<?> superClassType, Class<?> extensionClass) {\n+\n+        if (extensionClass == null) {\n+            return null;\n+        }\n+\n+        return getParameterizedType(superClassType, extensionClass.getGenericSuperclass());\n+    }\n }\n\ndiff --git a/src/test/java/run/halo/app/utils/ReflectionUtilsTest.java b/src/test/java/run/halo/app/utils/ReflectionUtilsTest.java\n--- a/src/test/java/run/halo/app/utils/ReflectionUtilsTest.java\n+++ b/src/test/java/run/halo/app/utils/ReflectionUtilsTest.java\n@@ -0,0 +1,60 @@\n+package run.halo.app.utils;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.junit.Test;\n+import run.halo.app.model.dto.base.InputConverter;\n+import run.halo.app.model.params.BaseCommentParam;\n+import run.halo.app.model.params.JournalCommentParam;\n+\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n+\n+/**\n+ * Reflection utils test.\n+ *\n+ * @author johnniang\n+ * @date 19-4-25\n+ */\n+@Slf4j\n+public class ReflectionUtilsTest {\n+\n+    @Test\n+    public void getBaseCommentParamParameterizedTypeTest() {\n+        Class<JournalCommentParam> paramClass = JournalCommentParam.class;\n+\n+        log.debug(paramClass.getTypeName());\n+        log.debug(paramClass.getSuperclass().getTypeName());\n+        Type genericSuperclass = paramClass.getGenericSuperclass();\n+        log.debug(genericSuperclass.getTypeName());\n+        for (Type genericInterface : paramClass.getGenericInterfaces()) {\n+            log.debug(genericInterface.getTypeName());\n+            log.debug(genericInterface.getClass().toString());\n+        }\n+\n+        Type[] genericInterfaces = paramClass.getSuperclass().getGenericInterfaces();\n+        for (Type genericInterface : genericInterfaces) {\n+            log.debug(genericInterface.getTypeName());\n+            log.debug(genericInterface.getClass().toString());\n+        }\n+\n+        ParameterizedType parameterizedType = ReflectionUtils.getParameterizedTypeBySuperClass(BaseCommentParam.class, paramClass);\n+\n+        log.debug(parameterizedType.getTypeName());\n+        for (Type type : parameterizedType.getActualTypeArguments()) {\n+            log.debug(type.getTypeName());\n+        }\n+\n+\n+//        ParameterizedType parameterizedType = ReflectionUtils.getParameterizedType(InputConverter.class, paramClass);\n+//\n+//        log.debug(parameterizedType.toString());\n+//\n+//        log.debug(parameterizedType.getActualTypeArguments()[0].toString());\n+//\n+//        parameterizedType = ReflectionUtils.getParameterizedType(BaseCommentParam.class, paramClass);\n+//\n+//        log.debug(parameterizedType.toString());\n+//\n+//        log.debug(parameterizedType.getActualTypeArguments()[0].toString());\n+    }\n+}\n\\ No newline at end of file",
    "output": "Enhance InputConverter"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/properties/CommentProperties.java b/src/main/java/run/halo/app/model/properties/CommentProperties.java\n--- a/src/main/java/run/halo/app/model/properties/CommentProperties.java\n+++ b/src/main/java/run/halo/app/model/properties/CommentProperties.java\n@@ -8,19 +8,19 @@\n  */\n public enum CommentProperties implements PropertyEnum {\n \n-    GAVATAR_DEFAULT(\"comment_gavatar_default\", String.class, \"\"),\n+    GAVATAR_DEFAULT(\"comment_gavatar_default\", String.class, \"mm\"),\n \n-    NEW_NEED_CHECK(\"comment_new_need_check\", Boolean.class, \"\"),\n+    NEW_NEED_CHECK(\"comment_new_need_check\", Boolean.class, \"true\"),\n \n-    NEW_NOTICE(\"comment_new_notice\", Boolean.class, \"\"),\n+    NEW_NOTICE(\"comment_new_notice\", Boolean.class, \"false\"),\n \n-    PASS_NOTICE(\"comment_pass_notice\", Boolean.class, \"\"),\n+    PASS_NOTICE(\"comment_pass_notice\", Boolean.class, \"false\"),\n \n-    REPLY_NOTICE(\"comment_reply_notice\", Boolean.class, \"\"),\n+    REPLY_NOTICE(\"comment_reply_notice\", Boolean.class, \"false\"),\n \n-    API_ENABLED(\"comment_api_enabled\", Boolean.class, \"\"),\n+    API_ENABLED(\"comment_api_enabled\", Boolean.class, \"false\"),\n \n-    PAGE_SIZE(\"comment_page_size\", Integer.class, \"\"),\n+    PAGE_SIZE(\"comment_page_size\", Integer.class, \"10\"),\n \n     CONTENT_PLACEHOLDER(\"comment_content_placeholder\", String.class, \"\"),\n \n@@ -29,7 +29,7 @@ public enum CommentProperties implements PropertyEnum {\n     private final String value;\n \n     private final Class<?> type;\n-    \n+\n     private final String defaultValue;\n \n     CommentProperties(String value, Class<?> type, String defaultValue) {\n\ndiff --git a/src/main/java/run/halo/app/model/properties/EmailProperties.java b/src/main/java/run/halo/app/model/properties/EmailProperties.java\n--- a/src/main/java/run/halo/app/model/properties/EmailProperties.java\n+++ b/src/main/java/run/halo/app/model/properties/EmailProperties.java\n@@ -20,7 +20,7 @@ public enum EmailProperties implements PropertyEnum {\n \n     FROM_NAME(\"email_from_name\", String.class, \"\"),\n \n-    ENABLED(\"email_enabled\", Boolean.class, \"\");\n+    ENABLED(\"email_enabled\", Boolean.class, \"false\");\n \n     private final String value;\n \n\ndiff --git a/src/main/java/run/halo/app/model/properties/OtherProperties.java b/src/main/java/run/halo/app/model/properties/OtherProperties.java\n--- a/src/main/java/run/halo/app/model/properties/OtherProperties.java\n+++ b/src/main/java/run/halo/app/model/properties/OtherProperties.java\n@@ -8,7 +8,7 @@\n  */\n public enum OtherProperties implements PropertyEnum {\n \n-    API_ENABLED(\"api_enabled\", Boolean.class, \"\"),\n+    API_ENABLED(\"api_enabled\", Boolean.class, \"false\"),\n \n     API_TOKEN(\"api_token\", String.class, \"\"),\n \n\ndiff --git a/src/main/java/run/halo/app/model/properties/PostProperties.java b/src/main/java/run/halo/app/model/properties/PostProperties.java\n--- a/src/main/java/run/halo/app/model/properties/PostProperties.java\n+++ b/src/main/java/run/halo/app/model/properties/PostProperties.java\n@@ -8,7 +8,7 @@\n  */\n public enum PostProperties implements PropertyEnum {\n \n-    SUMMARY_LENGTH(\"post_summary_length\", Integer.class, \"\"),\n+    SUMMARY_LENGTH(\"post_summary_length\", Integer.class, \"150\"),\n \n     RSS_PAGE_SIZE(\"rss_page_size\", Integer.class, \"20\"),\n \n\ndiff --git a/src/main/java/run/halo/app/model/properties/QnYunProperties.java b/src/main/java/run/halo/app/model/properties/QnYunProperties.java\n--- a/src/main/java/run/halo/app/model/properties/QnYunProperties.java\n+++ b/src/main/java/run/halo/app/model/properties/QnYunProperties.java\n@@ -8,7 +8,7 @@\n  */\n public enum QnYunProperties implements PropertyEnum {\n \n-    ZONE(\"oss_qiniu_zone\", String.class, \"\"),\n+    ZONE(\"oss_qiniu_zone\", String.class, \"auto\"),\n \n     ACCESS_KEY(\"oss_qiniu_access_key\", String.class, \"\"),\n \n@@ -23,7 +23,7 @@ public enum QnYunProperties implements PropertyEnum {\n     private final String value;\n \n     private final Class<?> type;\n-    \n+\n     private final String defaultValue;\n \n     QnYunProperties(String value, Class<?> type, String defaultValue) {",
    "output": "Complate properties default value."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/entity/BaseComment.java b/src/main/java/run/halo/app/model/entity/BaseComment.java\n--- a/src/main/java/run/halo/app/model/entity/BaseComment.java\n+++ b/src/main/java/run/halo/app/model/entity/BaseComment.java\n@@ -132,7 +132,6 @@ public void prePersist() {\n         if (isAdmin == null) {\n             isAdmin = false;\n         }\n-\n     }\n \n }\n\ndiff --git a/src/main/java/run/halo/app/model/entity/Journal.java b/src/main/java/run/halo/app/model/entity/Journal.java\n--- a/src/main/java/run/halo/app/model/entity/Journal.java\n+++ b/src/main/java/run/halo/app/model/entity/Journal.java\n@@ -13,4 +13,13 @@\n @DiscriminatorValue(\"2\")\n public class Journal extends BaseComment {\n \n+\n+    @Override\n+    public void prePersist() {\n+        super.prePersist();\n+\n+        if (getPostId() == null) {\n+            setPostId(0);\n+        }\n+    }\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java b/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n@@ -207,41 +207,40 @@ public Map<Integer, Long> countByPostIds(Collection<Integer> postIds) {\n     }\n \n     @Override\n-    public COMMENT createBy(COMMENT COMMENT) {\n-        Assert.notNull(COMMENT, \"Domain must not be null\");\n+    public COMMENT createBy(COMMENT comment) {\n+        Assert.notNull(comment, \"Domain must not be null\");\n \n         // Check post id\n-        boolean isPostExist = postRepository.existsById(COMMENT.getPostId());\n-        if (!isPostExist) {\n-            throw new NotFoundException(\"The post with id \" + COMMENT.getPostId() + \" was not found\");\n+        if (!ServiceUtils.isEmptyId(comment.getPostId())) {\n+            postMustExist(comment.getPostId());\n         }\n \n         // Check parent id\n-        if (!ServiceUtils.isEmptyId(COMMENT.getParentId())) {\n-            mustExistById(COMMENT.getParentId());\n+        if (!ServiceUtils.isEmptyId(comment.getParentId())) {\n+            mustExistById(comment.getParentId());\n         }\n \n         // Check user login status and set this field\n         Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n \n         // Set some default values\n-        COMMENT.setIpAddress(ServletUtils.getRequestIp());\n-        COMMENT.setUserAgent(ServletUtils.getHeaderIgnoreCase(HttpHeaders.USER_AGENT));\n-        COMMENT.setGavatarMd5(DigestUtils.md5Hex(COMMENT.getEmail()));\n+        comment.setIpAddress(ServletUtils.getRequestIp());\n+        comment.setUserAgent(ServletUtils.getHeaderIgnoreCase(HttpHeaders.USER_AGENT));\n+        comment.setGavatarMd5(DigestUtils.md5Hex(comment.getEmail()));\n \n         if (authentication != null) {\n             // Comment of blogger\n-            COMMENT.setIsAdmin(true);\n-            COMMENT.setStatus(CommentStatus.PUBLISHED);\n+            comment.setIsAdmin(true);\n+            comment.setStatus(CommentStatus.PUBLISHED);\n         } else {\n             // Comment of guest\n             // Handle comment status\n             Boolean needAudit = optionService.getByPropertyOrDefault(CommentProperties.NEW_NEED_CHECK, Boolean.class, true);\n-            COMMENT.setStatus(needAudit ? CommentStatus.AUDITING : CommentStatus.PUBLISHED);\n+            comment.setStatus(needAudit ? CommentStatus.AUDITING : CommentStatus.PUBLISHED);\n         }\n \n         // Create comment\n-        COMMENT createdComment = create(COMMENT);\n+        COMMENT createdComment = create(comment);\n \n         if (ServiceUtils.isEmptyId(createdComment.getParentId())) {\n             if (authentication == null) {\n@@ -302,6 +301,18 @@ public BaseCommentDTO convertTo(COMMENT comment) {\n         return new BaseCommentDTO().convertFrom(comment);\n     }\n \n+    /**\n+     * Post must exist.\n+     *\n+     * @param postId post id must not be null\n+     */\n+    protected void postMustExist(@NonNull Integer postId) {\n+        boolean isPostExist = postRepository.existsById(postId);\n+        if (!isPostExist) {\n+            throw new NotFoundException(\"The post with id \" + postId + \" was not found\");\n+        }\n+    }\n+\n     @NonNull\n     protected Specification<COMMENT> buildSpecByQuery(@NonNull CommentQuery commentQuery) {\n         Assert.notNull(commentQuery, \"Comment query must not be null\");\n\ndiff --git a/src/main/java/run/halo/app/service/impl/JournalServiceImpl.java b/src/main/java/run/halo/app/service/impl/JournalServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/JournalServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/JournalServiceImpl.java\n@@ -6,6 +6,7 @@\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.Pageable;\n import org.springframework.stereotype.Service;\n+import run.halo.app.exception.ForbiddenException;\n import run.halo.app.model.entity.Journal;\n import run.halo.app.model.entity.User;\n import run.halo.app.model.params.JournalParam;\n@@ -16,6 +17,7 @@\n import run.halo.app.security.context.SecurityContextHolder;\n import run.halo.app.service.JournalService;\n import run.halo.app.service.OptionService;\n+import run.halo.app.utils.ServiceUtils;\n import run.halo.app.utils.ValidationUtils;\n \n /**\n@@ -51,6 +53,11 @@ public Journal createBy(JournalParam journalParam) {\n             journalParam.setAuthor(StringUtils.isBlank(user.getNickname()) ? user.getUsername() : user.getNickname());\n             journalParam.setAuthorUrl(optionService.getByPropertyOfNullable(BlogProperties.BLOG_URL));\n             journalParam.setEmail(user.getEmail());\n+        } else {\n+            // Guest comment\n+            if (ServiceUtils.isEmptyId(journalParam.getParentId())) {\n+                throw new ForbiddenException(\"You have no right to create a journal\");\n+            }\n         }\n \n         // Validate the journal param",
    "output": "Fix journal creation error"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/listener/StartedListener.java b/src/main/java/run/halo/app/listener/StartedListener.java\n--- a/src/main/java/run/halo/app/listener/StartedListener.java\n+++ b/src/main/java/run/halo/app/listener/StartedListener.java\n@@ -1,6 +1,5 @@\n package run.halo.app.listener;\n \n-import com.fasterxml.jackson.databind.ObjectMapper;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.context.event.ApplicationStartedEvent;\n@@ -11,18 +10,15 @@\n import run.halo.app.model.entity.User;\n import run.halo.app.model.params.UserParam;\n import run.halo.app.model.properties.PrimaryProperties;\n-import run.halo.app.model.support.HaloConst;\n import run.halo.app.service.OptionService;\n import run.halo.app.service.ThemeService;\n import run.halo.app.service.UserService;\n import run.halo.app.utils.FileUtils;\n \n-import java.io.IOException;\n import java.net.URI;\n import java.nio.file.*;\n import java.util.Collections;\n import java.util.List;\n-import java.util.Map;\n \n /**\n  * The method executed after the application is started.\n@@ -40,9 +36,6 @@ public class StartedListener implements ApplicationListener<ApplicationStartedEv\n     @Autowired\n     private OptionService optionService;\n \n-    @Autowired\n-    private ObjectMapper objectMapper;\n-\n     @Autowired\n     private ThemeService themeService;\n \n@@ -52,7 +45,6 @@ public class StartedListener implements ApplicationListener<ApplicationStartedEv\n     @Override\n     public void onApplicationEvent(ApplicationStartedEvent event) {\n         // save halo version to database\n-        this.cacheOwo();\n         this.printStartInfo();\n         this.initThemes();\n \n@@ -94,22 +86,6 @@ private void printStartInfo() {\n         }\n     }\n \n-    /**\n-     * Cache Owo\n-     */\n-    private void cacheOwo() {\n-        try {\n-            // The Map is LinkedHashMap\n-            @SuppressWarnings(\"unchecked\")\n-            Map<String, String> owoMap = objectMapper.readValue(ResourceUtils.getURL(\"classpath:static/halo-common/OwO/OwO.path.json\"), Map.class);\n-\n-            HaloConst.OWO_MAP = Collections.unmodifiableMap(owoMap);\n-        } catch (IOException e) {\n-            log.error(\"Failed to read owo json\", e);\n-            // TODO Consider to throw an exception\n-        }\n-    }\n-\n     /**\n      * Init internal themes\n      */\n\ndiff --git a/src/main/java/run/halo/app/model/support/HaloConst.java b/src/main/java/run/halo/app/model/support/HaloConst.java\n--- a/src/main/java/run/halo/app/model/support/HaloConst.java\n+++ b/src/main/java/run/halo/app/model/support/HaloConst.java\n@@ -1,8 +1,5 @@\n package run.halo.app.model.support;\n \n-import java.util.Collections;\n-import java.util.Map;\n-\n /**\n  * <pre>\n  *     公共常量\n@@ -42,64 +39,44 @@ public class HaloConst {\n      * Custom freemarker tag method key.\n      */\n     public static final String METHOD_KEY = \"method\";\n-\n-    /**\n-     * Owo map. (Unmodified map)\n-     */\n-    public static Map<String, String> OWO_MAP = Collections.emptyMap();\n-\n-    /**\n-     * user_session\n-     */\n-    public static String USER_SESSION_KEY = \"user_session\";\n-\n-    /**\n-     * 文章阅读数缓存\n-     */\n-    public static Map<Long, Long> POSTS_VIEWS;\n-\n     /**\n      * 网易云音乐短代码前缀\n      */\n     public static final String NETEASE_MUSIC_PREFIX = \"[music:\";\n-\n     /**\n      * 网易云音乐 iframe 代码\n      */\n     public static final String NETEASE_MUSIC_IFRAME = \"<iframe frameborder=\\\"no\\\" border=\\\"0\\\" marginwidth=\\\"0\\\" marginheight=\\\"0\\\" width=330 height=86 src=\\\"//music.163.com/outchain/player?type=2&id=$1&auto=1&height=66\\\"></iframe>\";\n-\n     /**\n      * 网易云音乐短代码正则表达式\n      */\n     public static final String NETEASE_MUSIC_REG_PATTERN = \"\\\\[music:(\\\\d+)\\\\]\";\n-\n     /**\n      * 哔哩哔哩视频短代码前缀\n      */\n     public static final String BILIBILI_VIDEO_PREFIX = \"[bilibili:\";\n-\n     /**\n      * 哔哩哔哩视频 iframe 代码\n      */\n     public static final String BILIBILI_VIDEO_IFRAME = \"<iframe height=$3 width=$2 src=\\\"//player.bilibili.com/player.html?aid=$1\\\" scrolling=\\\"no\\\" border=\\\"0\\\" frameborder=\\\"no\\\" framespacing=\\\"0\\\" allowfullscreen=\\\"true\\\"> </iframe>\";\n-\n     /**\n      * 哔哩哔哩视频正则表达式\n      */\n     public static final String BILIBILI_VIDEO_REG_PATTERN = \"\\\\[bilibili:(\\\\d+)\\\\,(\\\\d+)\\\\,(\\\\d+)\\\\]\";\n-\n     /**\n      * YouTube 视频短代码前缀\n      */\n     public static final String YOUTUBE_VIDEO_PREFIX = \"[youtube:\";\n-\n     /**\n      * YouTube 视频 iframe 代码\n      */\n     public static final String YOUTUBE_VIDEO_IFRAME = \"<iframe width=$2 height=$3 src=\\\"https://www.youtube.com/embed/$1\\\" frameborder=\\\"0\\\" allow=\\\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\\\" allowfullscreen></iframe>\";\n-\n     /**\n      * YouTube 视频正则表达式\n      */\n     public static final String YOUTUBE_VIDEO_REG_PATTERN = \"\\\\[youtube:(\\\\w+)\\\\,(\\\\d+)\\\\,(\\\\d+)\\\\]\";\n+    /**\n+     * user_session\n+     */\n+    public static String USER_SESSION_KEY = \"user_session\";\n }\n\ndiff --git a/src/main/java/run/halo/app/utils/OwoUtil.java b/src/main/java/run/halo/app/utils/OwoUtil.java\n--- a/src/main/java/run/halo/app/utils/OwoUtil.java\n+++ b/src/main/java/run/halo/app/utils/OwoUtil.java\n@@ -1,33 +0,0 @@\n-package run.halo.app.utils;\n-\n-import lombok.extern.slf4j.Slf4j;\n-import org.springframework.util.CollectionUtils;\n-\n-import static run.halo.app.model.support.HaloConst.OWO_MAP;\n-\n-/**\n- * Owo util\n- *\n- * @author : RYAN0UP\n- * @date : 2017/12/22\n- */\n-@Slf4j\n-public class OwoUtil {\n-\n-    /**\n-     * Owo mark converted into a picture address\n-     *\n-     * @param content content\n-     * @return picture address\n-     */\n-    public static String parseOwo(String content) {\n-        if (CollectionUtils.isEmpty(OWO_MAP)) {\n-            return content;\n-        }\n-\n-        for (String key : OWO_MAP.keySet()) {\n-            content = content.replace(key, OWO_MAP.get(key).toString());\n-        }\n-        return content;\n-    }\n-}",
    "output": "Remove Owo plugin."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/JournalController.java b/src/main/java/run/halo/app/controller/admin/api/JournalController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/JournalController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/JournalController.java\n@@ -1,6 +1,8 @@\n package run.halo.app.controller.admin.api;\n \n import io.swagger.annotations.ApiOperation;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n import org.springframework.web.bind.annotation.*;\n import run.halo.app.model.dto.BaseCommentDTO;\n import run.halo.app.model.entity.Journal;\n@@ -25,6 +27,13 @@ public JournalController(JournalService journalService) {\n         this.journalService = journalService;\n     }\n \n+    @GetMapping\n+    @ApiOperation(\"Gets latest journals\")\n+    public Page<BaseCommentDTO> pageBy(Pageable pageable) {\n+        Page<Journal> journalPage = journalService.pageBy(pageable);\n+        return journalService.convertTo(journalPage);\n+    }\n+\n     @GetMapping(\"latest\")\n     @ApiOperation(\"Gets latest journals\")\n     public List<BaseCommentDTO> pageLatest(@RequestParam(name = \"top\", defaultValue = \"10\") int top) {\n\ndiff --git a/src/main/java/run/halo/app/repository/JournalRepository.java b/src/main/java/run/halo/app/repository/JournalRepository.java\n--- a/src/main/java/run/halo/app/repository/JournalRepository.java\n+++ b/src/main/java/run/halo/app/repository/JournalRepository.java\n@@ -1,5 +1,7 @@\n package run.halo.app.repository;\n \n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n import org.springframework.data.jpa.repository.Query;\n import org.springframework.lang.NonNull;\n import run.halo.app.model.entity.Journal;\n@@ -25,4 +27,13 @@ public interface JournalRepository extends BaseCommentRepository<Journal> {\n     @Query(\"select new run.halo.app.model.projection.CommentCountProjection(count(comment.id), comment.postId) from Journal comment where comment.postId in ?1 group by comment.postId\")\n     @NonNull\n     List<CommentCountProjection> countByPostIds(@NonNull Iterable<Integer> postIds);\n+\n+    /**\n+     * Finds all journals by parent id.\n+     *\n+     * @param parentId parent id must not be null\n+     * @param pageable page info must not be null\n+     * @return a page of journal\n+     */\n+    Page<Journal> findAllByParentId(@NonNull Long parentId, @NonNull Pageable pageable);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/JournalService.java b/src/main/java/run/halo/app/service/JournalService.java\n--- a/src/main/java/run/halo/app/service/JournalService.java\n+++ b/src/main/java/run/halo/app/service/JournalService.java\n@@ -1,5 +1,7 @@\n package run.halo.app.service;\n \n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n import org.springframework.lang.NonNull;\n import run.halo.app.model.entity.Journal;\n import run.halo.app.model.params.JournalParam;\n@@ -22,4 +24,11 @@ public interface JournalService extends BaseCommentService<Journal> {\n     @NonNull\n     Journal createBy(@NonNull JournalParam journalParam);\n \n+    /**\n+     * Gets a page of journal\n+     *\n+     * @param pageable page info must not be null\n+     * @return a page of journal\n+     */\n+    Page<Journal> pageBy(@NonNull Pageable pageable);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/base/BaseCommentService.java b/src/main/java/run/halo/app/service/base/BaseCommentService.java\n--- a/src/main/java/run/halo/app/service/base/BaseCommentService.java\n+++ b/src/main/java/run/halo/app/service/base/BaseCommentService.java\n@@ -133,4 +133,13 @@ public interface BaseCommentService<COMMENT extends BaseComment> extends CrudSer\n      */\n     @NonNull\n     List<BaseCommentDTO> convertTo(@NonNull List<COMMENT> comments);\n+\n+    /**\n+     * Converts to base comment dto page.\n+     *\n+     * @param commentPage comment page must not be null\n+     * @return a page of base comment dto\n+     */\n+    @NonNull\n+    Page<BaseCommentDTO> convertTo(@NonNull Page<COMMENT> commentPage);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java b/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/BaseCommentServiceImpl.java\n@@ -78,12 +78,7 @@ public List<COMMENT> listBy(Integer postId) {\n \n     @Override\n     public Page<COMMENT> pageLatest(int top) {\n-        Assert.isTrue(top > 0, \"Top number must not be less than 0\");\n-\n-        // Build page request\n-        PageRequest latestPageable = PageRequest.of(0, top, Sort.by(Sort.Direction.DESC, \"createTime\"));\n-\n-        return listAll(latestPageable);\n+        return listAll(buildLatestPageable(top));\n     }\n \n     @Override\n@@ -293,6 +288,13 @@ public List<BaseCommentDTO> convertTo(List<COMMENT> comments) {\n                 .collect(Collectors.toList());\n     }\n \n+    @Override\n+    public Page<BaseCommentDTO> convertTo(Page<COMMENT> commentPage) {\n+        Assert.notNull(commentPage, \"Comment page must not be null\");\n+\n+        return commentPage.map(this::convertTo);\n+    }\n+\n     @Override\n     public BaseCommentDTO convertTo(COMMENT comment) {\n         Assert.notNull(comment, \"Comment must not be null\");\n@@ -301,7 +303,7 @@ public BaseCommentDTO convertTo(COMMENT comment) {\n     }\n \n     @NonNull\n-    private Specification<COMMENT> buildSpecByQuery(@NonNull CommentQuery commentQuery) {\n+    protected Specification<COMMENT> buildSpecByQuery(@NonNull CommentQuery commentQuery) {\n         Assert.notNull(commentQuery, \"Comment query must not be null\");\n \n         return (Specification<COMMENT>) (root, query, criteriaBuilder) -> {\n@@ -332,7 +334,7 @@ private Specification<COMMENT> buildSpecByQuery(@NonNull CommentQuery commentQue\n      * @param sort sort info\n      * @return comment comparator\n      */\n-    private Comparator<BaseCommentVO> buildCommentComparator(Sort sort) {\n+    protected Comparator<BaseCommentVO> buildCommentComparator(Sort sort) {\n         return (currentComment, toCompareComment) -> {\n             Assert.notNull(currentComment, \"Current comment must not be null\");\n             Assert.notNull(toCompareComment, \"Comment to compare must not be null\");\n@@ -358,9 +360,9 @@ private Comparator<BaseCommentVO> buildCommentComparator(Sort sort) {\n      * @param comments          comment list must not null\n      * @param commentComparator comment vo comparator\n      */\n-    private void concreteTree(@NonNull BaseCommentVO parentComment,\n-                              @Nullable Collection<COMMENT> comments,\n-                              @NonNull Comparator<BaseCommentVO> commentComparator) {\n+    protected void concreteTree(@NonNull BaseCommentVO parentComment,\n+                                @Nullable Collection<COMMENT> comments,\n+                                @NonNull Comparator<BaseCommentVO> commentComparator) {\n         Assert.notNull(parentComment, \"Parent comment must not be null\");\n         Assert.notNull(commentComparator, \"Comment comparator must not be null\");\n \n@@ -403,4 +405,17 @@ private void concreteTree(@NonNull BaseCommentVO parentComment,\n             parentComment.getChildren().sort(commentComparator);\n         }\n     }\n+\n+    /**\n+     * Builds latest page request.\n+     *\n+     * @param top top must not be less than 1\n+     * @return latest page request\n+     */\n+    @NonNull\n+    Pageable buildLatestPageable(int top) {\n+        Assert.isTrue(top > 0, \"Top number must not be less than 0\");\n+\n+        return PageRequest.of(0, top, Sort.by(Sort.Direction.DESC, \"createTime\"));\n+    }\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/JournalServiceImpl.java b/src/main/java/run/halo/app/service/impl/JournalServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/JournalServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/JournalServiceImpl.java\n@@ -3,6 +3,8 @@\n import cn.hutool.core.lang.Assert;\n import org.apache.commons.lang3.StringUtils;\n import org.springframework.context.ApplicationEventPublisher;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n import org.springframework.stereotype.Service;\n import run.halo.app.model.entity.Journal;\n import run.halo.app.model.entity.User;\n@@ -57,4 +59,17 @@ public Journal createBy(JournalParam journalParam) {\n         // Convert, create and return\n         return createBy(journalParam.convertTo());\n     }\n+\n+    @Override\n+    public Page<Journal> pageBy(Pageable pageable) {\n+        Assert.notNull(pageable, \"Page info must not be null\");\n+\n+        return journalRepository.findAllByParentId(0L, pageable);\n+    }\n+\n+    @Override\n+    public Page<Journal> pageLatest(int top) {\n+        return pageBy(buildLatestPageable(top));\n+    }\n+\n }",
    "output": "Complete get journal page api"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/properties/PropertyEnum.java b/src/main/java/run/halo/app/model/properties/PropertyEnum.java\n--- a/src/main/java/run/halo/app/model/properties/PropertyEnum.java\n+++ b/src/main/java/run/halo/app/model/properties/PropertyEnum.java\n@@ -1,6 +1,5 @@\n package run.halo.app.model.properties;\n \n-import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.lang3.StringUtils;\n import org.springframework.lang.NonNull;\n import org.springframework.lang.Nullable;\n\ndiff --git a/src/main/java/run/halo/app/service/JournalService.java b/src/main/java/run/halo/app/service/JournalService.java\n--- a/src/main/java/run/halo/app/service/JournalService.java\n+++ b/src/main/java/run/halo/app/service/JournalService.java\n@@ -1,14 +1,14 @@\n package run.halo.app.service;\n \n import run.halo.app.model.entity.Journal;\n-import run.halo.app.service.base.CrudService;\n+import run.halo.app.service.base.BaseCommentService;\n \n /**\n  * Journal service interface.\n  *\n  * @author johnniang\n  * @date 19-4-24\n  */\n-public interface JournalService extends CrudService<Journal, Long> {\n+public interface JournalService extends BaseCommentService<Journal> {\n \n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/JournalServiceImpl.java b/src/main/java/run/halo/app/service/impl/JournalServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/JournalServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/JournalServiceImpl.java\n@@ -1,22 +1,29 @@\n package run.halo.app.service.impl;\n \n+import org.springframework.context.ApplicationEventPublisher;\n+import org.springframework.stereotype.Service;\n import run.halo.app.model.entity.Journal;\n import run.halo.app.repository.JournalRepository;\n+import run.halo.app.repository.PostRepository;\n import run.halo.app.service.JournalService;\n-import run.halo.app.service.base.AbstractCrudService;\n+import run.halo.app.service.OptionService;\n \n /**\n  * Journal service implementation.\n  *\n  * @author johnniang\n  * @date 19-4-24\n  */\n-public class JournalServiceImpl extends AbstractCrudService<Journal, Long> implements JournalService {\n+@Service\n+public class JournalServiceImpl extends BaseCommentServiceImpl<Journal> implements JournalService {\n \n     private final JournalRepository journalRepository;\n \n-    public JournalServiceImpl(JournalRepository journalRepository) {\n-        super(journalRepository);\n+    public JournalServiceImpl(JournalRepository journalRepository,\n+                              PostRepository postRepository,\n+                              OptionService optionService,\n+                              ApplicationEventPublisher eventPublisher) {\n+        super(journalRepository, postRepository, optionService, eventPublisher);\n         this.journalRepository = journalRepository;\n     }\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java b/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n@@ -130,7 +130,7 @@ public Map<String, Object> listOptions() {\n \n         Set<String> keys = ServiceUtils.fetchProperty(options, Option::getKey);\n \n-        Map<String, Object> result = ServiceUtils.convertToMap(options, Option::getKey, option -> {\n+        Map<String, Object> userDefinedOptionMap = ServiceUtils.convertToMap(options, Option::getKey, option -> {\n             String key = option.getKey();\n \n             PropertyEnum propertyEnum = propertyEnumMap.get(key);\n@@ -142,6 +142,8 @@ public Map<String, Object> listOptions() {\n             return PropertyEnum.convertTo(option.getValue(), propertyEnum);\n         });\n \n+        Map<String, Object> result = new HashMap<>(userDefinedOptionMap);\n+\n         // Add default property\n         propertyEnumMap.keySet()\n                 .stream()",
    "output": "Fix option list bug"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/GalleryController.java b/src/main/java/run/halo/app/controller/admin/api/GalleryController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/GalleryController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/GalleryController.java\n@@ -8,9 +8,12 @@\n import org.springframework.data.web.SortDefault;\n import org.springframework.web.bind.annotation.*;\n import run.halo.app.model.dto.GalleryDTO;\n+import run.halo.app.model.entity.Gallery;\n+import run.halo.app.model.params.GalleryParam;\n import run.halo.app.model.params.GalleryQuery;\n import run.halo.app.service.GalleryService;\n \n+import javax.validation.Valid;\n import java.util.List;\n \n import static org.springframework.data.domain.Sort.Direction.DESC;\n@@ -70,4 +73,9 @@ public GalleryDTO getBy(@PathVariable(\"galleryId\") Integer galleryId) {\n     public void deletePermanently(@PathVariable(\"galleryId\") Integer galleryId) {\n         galleryService.removeById(galleryId);\n     }\n+\n+    @PostMapping\n+    public Gallery createBy(@Valid @RequestBody GalleryParam galleryParam) {\n+        return galleryService.createBy(galleryParam);\n+    }\n }\n\ndiff --git a/src/main/java/run/halo/app/controller/admin/api/LogController.java b/src/main/java/run/halo/app/controller/admin/api/LogController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/LogController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/LogController.java\n@@ -1,12 +1,12 @@\n package run.halo.app.controller.admin.api;\n \n-import run.halo.app.model.dto.LogDTO;\n-import run.halo.app.service.LogService;\n import io.swagger.annotations.ApiOperation;\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestParam;\n import org.springframework.web.bind.annotation.RestController;\n+import run.halo.app.model.dto.LogDTO;\n+import run.halo.app.service.LogService;\n \n import java.util.List;\n \n\ndiff --git a/src/main/java/run/halo/app/controller/admin/api/OptionController.java b/src/main/java/run/halo/app/controller/admin/api/OptionController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/OptionController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/OptionController.java\n@@ -1,10 +1,10 @@\n package run.halo.app.controller.admin.api;\n \n+import io.swagger.annotations.ApiOperation;\n+import org.springframework.web.bind.annotation.*;\n import run.halo.app.model.dto.OptionDTO;\n import run.halo.app.model.params.OptionParam;\n import run.halo.app.service.OptionService;\n-import io.swagger.annotations.ApiOperation;\n-import org.springframework.web.bind.annotation.*;\n \n import javax.validation.Valid;\n import java.util.List;\n\ndiff --git a/src/main/java/run/halo/app/controller/admin/api/PostController.java b/src/main/java/run/halo/app/controller/admin/api/PostController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/PostController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/PostController.java\n@@ -8,7 +8,6 @@\n import run.halo.app.model.dto.post.PostMinimalDTO;\n import run.halo.app.model.dto.post.PostSimpleDTO;\n import run.halo.app.model.entity.Post;\n-import run.halo.app.model.entity.Sheet;\n import run.halo.app.model.enums.PostStatus;\n import run.halo.app.model.params.PostParam;\n import run.halo.app.model.params.PostQuery;\n\ndiff --git a/src/main/java/run/halo/app/controller/admin/api/TagController.java b/src/main/java/run/halo/app/controller/admin/api/TagController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/TagController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/TagController.java\n@@ -1,15 +1,15 @@\n package run.halo.app.controller.admin.api;\n \n-import run.halo.app.model.dto.TagDTO;\n-import run.halo.app.model.entity.Tag;\n-import run.halo.app.model.params.TagParam;\n-import run.halo.app.service.PostTagService;\n-import run.halo.app.service.TagService;\n import io.swagger.annotations.ApiOperation;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.data.domain.Sort;\n import org.springframework.data.web.SortDefault;\n import org.springframework.web.bind.annotation.*;\n+import run.halo.app.model.dto.TagDTO;\n+import run.halo.app.model.entity.Tag;\n+import run.halo.app.model.params.TagParam;\n+import run.halo.app.service.PostTagService;\n+import run.halo.app.service.TagService;\n \n import javax.validation.Valid;\n import java.util.List;\n\ndiff --git a/src/main/java/run/halo/app/controller/admin/api/UserController.java b/src/main/java/run/halo/app/controller/admin/api/UserController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/UserController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/UserController.java\n@@ -1,11 +1,11 @@\n package run.halo.app.controller.admin.api;\n \n+import org.springframework.web.bind.annotation.*;\n import run.halo.app.model.dto.UserDTO;\n import run.halo.app.model.entity.User;\n import run.halo.app.model.params.PasswordParam;\n import run.halo.app.model.params.UserParam;\n import run.halo.app.service.UserService;\n-import org.springframework.web.bind.annotation.*;\n \n import javax.validation.Valid;\n \n\ndiff --git a/src/main/java/run/halo/app/model/params/GalleryParam.java b/src/main/java/run/halo/app/model/params/GalleryParam.java\n--- a/src/main/java/run/halo/app/model/params/GalleryParam.java\n+++ b/src/main/java/run/halo/app/model/params/GalleryParam.java\n@@ -0,0 +1,35 @@\n+package run.halo.app.model.params;\n+\n+import lombok.Data;\n+import run.halo.app.model.dto.base.InputConverter;\n+import run.halo.app.model.entity.Gallery;\n+\n+import javax.validation.constraints.NotBlank;\n+import java.util.Date;\n+\n+/**\n+ * Post param.\n+ *\n+ * @author RYAN0UP\n+ * @date 2019/04/25\n+ */\n+@Data\n+public class GalleryParam implements InputConverter<Gallery> {\n+\n+    @NotBlank(message = \"Gallery name must not be blank\")\n+    private String name;\n+\n+    private String description;\n+\n+    private Date takeTime;\n+\n+    private String location;\n+\n+    @NotBlank(message = \"Gallery thumbnail must not be blank\")\n+    private String thumbnail;\n+\n+    @NotBlank(message = \"Gallery url must not be blank\")\n+    private String url;\n+\n+    private String team;\n+}\n\ndiff --git a/src/main/java/run/halo/app/service/GalleryService.java b/src/main/java/run/halo/app/service/GalleryService.java\n--- a/src/main/java/run/halo/app/service/GalleryService.java\n+++ b/src/main/java/run/halo/app/service/GalleryService.java\n@@ -6,6 +6,7 @@\n import org.springframework.lang.NonNull;\n import run.halo.app.model.dto.GalleryDTO;\n import run.halo.app.model.entity.Gallery;\n+import run.halo.app.model.params.GalleryParam;\n import run.halo.app.model.params.GalleryQuery;\n import run.halo.app.model.vo.GalleryTeamVO;\n import run.halo.app.service.base.CrudService;\n@@ -53,4 +54,13 @@ public interface GalleryService extends CrudService<Gallery, Integer> {\n      */\n     @NonNull\n     Page<GalleryDTO> pageDtosBy(@NonNull Pageable pageable, GalleryQuery galleryQuery);\n+\n+    /**\n+     * Creates gallery by gallery param.\n+     *\n+     * @param galleryParam must not be null\n+     * @return create gallery\n+     */\n+    @NonNull\n+    Gallery createBy(@NonNull GalleryParam galleryParam);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/GalleryServiceImpl.java b/src/main/java/run/halo/app/service/impl/GalleryServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/GalleryServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/GalleryServiceImpl.java\n@@ -10,6 +10,7 @@\n import org.springframework.util.Assert;\n import run.halo.app.model.dto.GalleryDTO;\n import run.halo.app.model.entity.Gallery;\n+import run.halo.app.model.params.GalleryParam;\n import run.halo.app.model.params.GalleryQuery;\n import run.halo.app.model.vo.GalleryTeamVO;\n import run.halo.app.repository.GalleryRepository;\n@@ -111,6 +112,13 @@ public Page<GalleryDTO> pageDtosBy(Pageable pageable, GalleryQuery galleryQuery)\n         return galleryPage.map(gallery -> new GalleryDTO().convertFrom(gallery));\n     }\n \n+    @Override\n+    public Gallery createBy(GalleryParam galleryParam) {\n+        Assert.notNull(galleryParam, \"Gallery param must not be null\");\n+\n+        return create(galleryParam.convertTo());\n+    }\n+\n     @NonNull\n     private Specification<Gallery> buildSpecByQuery(@NonNull GalleryQuery galleryQuery) {\n         Assert.notNull(galleryQuery, \"Attachment query must not be null\");",
    "output": "Create gallery save api for gallery."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/GalleryController.java b/src/main/java/run/halo/app/controller/admin/api/GalleryController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/GalleryController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/GalleryController.java\n@@ -1,14 +1,20 @@\n package run.halo.app.controller.admin.api;\n \n-import run.halo.app.model.dto.GalleryDTO;\n-import run.halo.app.service.GalleryService;\n import io.swagger.annotations.ApiOperation;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n import org.springframework.data.domain.Sort;\n+import org.springframework.data.web.PageableDefault;\n import org.springframework.data.web.SortDefault;\n import org.springframework.web.bind.annotation.*;\n+import run.halo.app.model.dto.GalleryDTO;\n+import run.halo.app.model.params.GalleryQuery;\n+import run.halo.app.service.GalleryService;\n \n import java.util.List;\n \n+import static org.springframework.data.domain.Sort.Direction.DESC;\n+\n /**\n  * Gallery controller\n  *\n@@ -31,11 +37,17 @@ public GalleryController(GalleryService galleryService) {\n      * @param sort sort\n      * @return all of galleries\n      */\n-    @GetMapping\n+    @GetMapping(value = \"latest\")\n     public List<GalleryDTO> listGalleries(@SortDefault(sort = \"updateTime\", direction = Sort.Direction.DESC) Sort sort) {\n         return galleryService.listDtos(sort);\n     }\n \n+    @GetMapping\n+    public Page<GalleryDTO> pageBy(@PageableDefault(sort = \"updateTime\", direction = DESC) Pageable pageable,\n+                                   GalleryQuery galleryQuery) {\n+        return galleryService.pageDtosBy(pageable, galleryQuery);\n+    }\n+\n     /**\n      * Get gallery by id.\n      *\n\ndiff --git a/src/main/java/run/halo/app/model/params/GalleryQuery.java b/src/main/java/run/halo/app/model/params/GalleryQuery.java\n--- a/src/main/java/run/halo/app/model/params/GalleryQuery.java\n+++ b/src/main/java/run/halo/app/model/params/GalleryQuery.java\n@@ -0,0 +1,20 @@\n+package run.halo.app.model.params;\n+\n+import lombok.Data;\n+\n+/**\n+ * Gallery query params.\n+ *\n+ * @author : RYAN0UP\n+ * @date : 2019/04/25\n+ */\n+@Data\n+public class GalleryQuery {\n+\n+    /**\n+     * Keyword.\n+     */\n+    private String keyword;\n+\n+    private String team;\n+}\n\ndiff --git a/src/main/java/run/halo/app/repository/GalleryRepository.java b/src/main/java/run/halo/app/repository/GalleryRepository.java\n--- a/src/main/java/run/halo/app/repository/GalleryRepository.java\n+++ b/src/main/java/run/halo/app/repository/GalleryRepository.java\n@@ -1,6 +1,7 @@\n package run.halo.app.repository;\n \n import org.springframework.data.domain.Sort;\n+import org.springframework.data.jpa.repository.JpaSpecificationExecutor;\n import run.halo.app.model.entity.Gallery;\n import run.halo.app.repository.base.BaseRepository;\n \n@@ -11,7 +12,7 @@\n  *\n  * @author johnniang\n  */\n-public interface GalleryRepository extends BaseRepository<Gallery, Integer> {\n+public interface GalleryRepository extends BaseRepository<Gallery, Integer>, JpaSpecificationExecutor<Gallery> {\n \n     /**\n      * Query galleries by team\n\ndiff --git a/src/main/java/run/halo/app/service/GalleryService.java b/src/main/java/run/halo/app/service/GalleryService.java\n--- a/src/main/java/run/halo/app/service/GalleryService.java\n+++ b/src/main/java/run/halo/app/service/GalleryService.java\n@@ -1,9 +1,12 @@\n package run.halo.app.service;\n \n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n import org.springframework.data.domain.Sort;\n import org.springframework.lang.NonNull;\n import run.halo.app.model.dto.GalleryDTO;\n import run.halo.app.model.entity.Gallery;\n+import run.halo.app.model.params.GalleryQuery;\n import run.halo.app.model.vo.GalleryTeamVO;\n import run.halo.app.service.base.CrudService;\n \n@@ -40,4 +43,14 @@ public interface GalleryService extends CrudService<Gallery, Integer> {\n      * @return list of galleries\n      */\n     List<GalleryDTO> listByTeam(@NonNull String team, Sort sort);\n+\n+    /**\n+     * Pages gallery output dtos.\n+     *\n+     * @param pageable     page info must not be null\n+     * @param galleryQuery galleryQuery\n+     * @return a page of gallery output dto\n+     */\n+    @NonNull\n+    Page<GalleryDTO> pageDtosBy(@NonNull Pageable pageable, GalleryQuery galleryQuery);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/GalleryServiceImpl.java b/src/main/java/run/halo/app/service/impl/GalleryServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/GalleryServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/GalleryServiceImpl.java\n@@ -1,16 +1,23 @@\n package run.halo.app.service.impl;\n \n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n import org.springframework.data.domain.Sort;\n+import org.springframework.data.jpa.domain.Specification;\n+import org.springframework.lang.NonNull;\n import org.springframework.stereotype.Service;\n import org.springframework.util.Assert;\n import run.halo.app.model.dto.GalleryDTO;\n import run.halo.app.model.entity.Gallery;\n+import run.halo.app.model.params.GalleryQuery;\n import run.halo.app.model.vo.GalleryTeamVO;\n import run.halo.app.repository.GalleryRepository;\n import run.halo.app.service.GalleryService;\n import run.halo.app.service.base.AbstractCrudService;\n import run.halo.app.utils.ServiceUtils;\n \n+import javax.persistence.criteria.Predicate;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Map;\n@@ -92,4 +99,41 @@ public List<GalleryDTO> listByTeam(String team, Sort sort) {\n         List<Gallery> galleries = galleryRepository.findByTeam(team, sort);\n         return galleries.stream().map(gallery -> (GalleryDTO) new GalleryDTO().convertFrom(gallery)).collect(Collectors.toList());\n     }\n+\n+    @Override\n+    public Page<GalleryDTO> pageDtosBy(Pageable pageable, GalleryQuery galleryQuery) {\n+        Assert.notNull(pageable, \"Page info must not be null\");\n+\n+        // List all\n+        Page<Gallery> galleryPage = galleryRepository.findAll(buildSpecByQuery(galleryQuery), pageable);\n+\n+        // Convert and return\n+        return galleryPage.map(gallery -> new GalleryDTO().convertFrom(gallery));\n+    }\n+\n+    @NonNull\n+    private Specification<Gallery> buildSpecByQuery(@NonNull GalleryQuery galleryQuery) {\n+        Assert.notNull(galleryQuery, \"Attachment query must not be null\");\n+\n+        return (Specification<Gallery>) (root, query, criteriaBuilder) -> {\n+            List<Predicate> predicates = new LinkedList<>();\n+\n+            if (galleryQuery.getTeam() != null) {\n+                predicates.add(criteriaBuilder.equal(root.get(\"team\"), galleryQuery.getTeam()));\n+            }\n+\n+            if (galleryQuery.getKeyword() != null) {\n+\n+                String likeCondition = String.format(\"%%%s%%\", StringUtils.strip(galleryQuery.getKeyword()));\n+\n+                Predicate nameLike = criteriaBuilder.like(root.get(\"name\"), likeCondition);\n+                Predicate descriptionLike = criteriaBuilder.like(root.get(\"description\"), likeCondition);\n+                Predicate locationLike = criteriaBuilder.like(root.get(\"location\"), likeCondition);\n+\n+                predicates.add(criteriaBuilder.or(nameLike, descriptionLike, locationLike));\n+            }\n+\n+            return query.where(predicates.toArray(new Predicate[0])).getRestriction();\n+        };\n+    }\n }",
    "output": "Create page api for gallery."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/event/post/AbstractVisitEventListener.java b/src/main/java/run/halo/app/event/post/AbstractVisitEventListener.java\n--- a/src/main/java/run/halo/app/event/post/AbstractVisitEventListener.java\n+++ b/src/main/java/run/halo/app/event/post/AbstractVisitEventListener.java\n@@ -17,9 +17,9 @@\n @Slf4j\n public abstract class AbstractVisitEventListener {\n \n-    private final Map<Integer, BlockingQueue<Integer>> postVisitQueueMap;\n+    private final Map<Integer, BlockingQueue<Integer>> visitQueueMap;\n \n-    private final Map<Integer, PostVisitTask> postVisitTaskMap;\n+    private final Map<Integer, PostVisitTask> visitTaskMap;\n \n     private final BasePostService basePostService;\n \n@@ -36,8 +36,8 @@ protected AbstractVisitEventListener(BasePostService basePostService) {\n             initCapacity = (int) count;\n         }\n \n-        postVisitQueueMap = new ConcurrentHashMap<>(initCapacity << 1);\n-        postVisitTaskMap = new ConcurrentHashMap<>(initCapacity << 1);\n+        visitQueueMap = new ConcurrentHashMap<>(initCapacity << 1);\n+        visitTaskMap = new ConcurrentHashMap<>(initCapacity << 1);\n \n         this.executor = Executors.newCachedThreadPool();\n     }\n@@ -57,9 +57,9 @@ protected void handleVisitEvent(@NonNull AbstractVisitEvent event) throws Interr\n         log.debug(\"Received a visit event, post id: [{}]\", id);\n \n         // Get post visit queue\n-        BlockingQueue<Integer> postVisitQueue = postVisitQueueMap.computeIfAbsent(id, this::createEmptyQueue);\n+        BlockingQueue<Integer> postVisitQueue = visitQueueMap.computeIfAbsent(id, this::createEmptyQueue);\n \n-        postVisitTaskMap.computeIfAbsent(id, this::createPostVisitTask);\n+        visitTaskMap.computeIfAbsent(id, this::createPostVisitTask);\n \n         // Put a visit for the post\n         postVisitQueue.put(id);\n@@ -87,17 +87,17 @@ private BlockingQueue<Integer> createEmptyQueue(Integer postId) {\n      */\n     private class PostVisitTask implements Runnable {\n \n-        private final Integer postId;\n+        private final Integer id;\n \n-        private PostVisitTask(Integer postId) {\n-            this.postId = postId;\n+        private PostVisitTask(Integer id) {\n+            this.id = id;\n         }\n \n         @Override\n         public void run() {\n             while (!Thread.currentThread().isInterrupted()) {\n                 try {\n-                    BlockingQueue<Integer> postVisitQueue = postVisitQueueMap.get(postId);\n+                    BlockingQueue<Integer> postVisitQueue = visitQueueMap.get(id);\n                     Integer postId = postVisitQueue.take();\n \n                     log.debug(\"Took a new visit for post id: [{}]\", postId);",
    "output": "Change some variable names"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/PostController.java b/src/main/java/run/halo/app/controller/admin/api/PostController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/PostController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/PostController.java\n@@ -8,6 +8,7 @@\n import run.halo.app.model.dto.post.PostMinimalDTO;\n import run.halo.app.model.dto.post.PostSimpleDTO;\n import run.halo.app.model.entity.Post;\n+import run.halo.app.model.entity.Sheet;\n import run.halo.app.model.enums.PostStatus;\n import run.halo.app.model.params.PostParam;\n import run.halo.app.model.params.PostQuery;\n@@ -107,6 +108,19 @@ public PostDetailVO updateBy(@Valid @RequestBody PostParam postParam,\n         return postService.updateBy(postToUpdate, postParam.getTagIds(), postParam.getCategoryIds());\n     }\n \n+    @PutMapping(\"{postId:\\\\d+}/{status}\")\n+    public void updateStatusBy(\n+            @PathVariable(\"postId\") Integer postId,\n+            @PathVariable(\"status\") PostStatus status) {\n+        Post post = postService.getById(postId);\n+\n+        // Set status\n+        post.setStatus(status);\n+\n+        // Update\n+        postService.update(post);\n+    }\n+\n     @DeleteMapping(\"{postId:\\\\d+}\")\n     public void deletePermanently(@PathVariable(\"postId\") Integer postId) {\n         // Remove it\n\ndiff --git a/src/main/java/run/halo/app/controller/admin/api/SheetController.java b/src/main/java/run/halo/app/controller/admin/api/SheetController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/SheetController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/SheetController.java\n@@ -58,7 +58,12 @@ public SheetDetailDTO createBy(@RequestBody @Valid SheetParam sheetParam) {\n     public SheetDetailDTO updateBy(\n             @PathVariable(\"sheetId\") Integer sheetId,\n             @RequestBody @Valid SheetParam sheetParam) {\n-        Sheet sheet = sheetService.updateBy(sheetParam.convertTo());\n+        Sheet sheetToUpdate = sheetService.getById(sheetId);\n+\n+        sheetParam.update(sheetToUpdate);\n+\n+        Sheet sheet = sheetService.updateBy(sheetToUpdate);\n+\n         return sheetService.convertToDetailDto(sheet);\n     }\n ",
    "output": "Fixed sheet update error."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/params/SheetParam.java b/src/main/java/run/halo/app/model/params/SheetParam.java\n--- a/src/main/java/run/halo/app/model/params/SheetParam.java\n+++ b/src/main/java/run/halo/app/model/params/SheetParam.java\n@@ -1,6 +1,7 @@\n package run.halo.app.model.params;\n \n import cn.hutool.crypto.digest.BCrypt;\n+import lombok.Data;\n import org.apache.commons.lang3.StringUtils;\n import run.halo.app.model.dto.base.InputConverter;\n import run.halo.app.model.entity.Sheet;\n@@ -15,6 +16,7 @@\n  * @author johnniang\n  * @date 19-4-24\n  */\n+@Data\n public class SheetParam implements InputConverter<Sheet> {\n \n     @NotBlank(message = \"Title must not be blank\")",
    "output": "Add @Data for SheetParam."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/params/SheetParam.java b/src/main/java/run/halo/app/model/params/SheetParam.java\n--- a/src/main/java/run/halo/app/model/params/SheetParam.java\n+++ b/src/main/java/run/halo/app/model/params/SheetParam.java\n@@ -36,7 +36,6 @@ public class SheetParam implements InputConverter<Sheet> {\n     @Size(max = 255, message = \"Length of password must not be more than {max}\")\n     private String password;\n \n-    @NotBlank(message = \"Template must not be blank\")\n     @Size(max = 255, message = \"Length of template must not be more than {max}\")\n     private String template;\n ",
    "output": "Refactor SheetParam."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/SheetController.java b/src/main/java/run/halo/app/controller/admin/api/SheetController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/SheetController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/SheetController.java\n@@ -5,6 +5,7 @@\n import org.springframework.data.domain.Pageable;\n import org.springframework.data.web.PageableDefault;\n import org.springframework.web.bind.annotation.*;\n+import run.halo.app.model.dto.post.SheetDetailDTO;\n import run.halo.app.model.dto.post.SheetListDTO;\n import run.halo.app.model.entity.Sheet;\n import run.halo.app.model.enums.PostStatus;\n@@ -33,8 +34,9 @@ public SheetController(SheetService sheetService) {\n \n     @GetMapping(\"{sheetId:\\\\d+}\")\n     @ApiOperation(\"Gets a sheet\")\n-    public Sheet getBy(@PathVariable(\"sheetId\") Integer sheetId) {\n-        return sheetService.getById(sheetId);\n+    public SheetDetailDTO getBy(@PathVariable(\"sheetId\") Integer sheetId) {\n+        Sheet sheet = sheetService.getById(sheetId);\n+        return sheetService.convertToDetailDto(sheet);\n     }\n \n     @GetMapping\n@@ -46,34 +48,37 @@ public Page<SheetListDTO> pageBy(@PageableDefault(sort = \"editTime\", direction =\n \n     @PostMapping\n     @ApiOperation(\"Creates a sheet\")\n-    public Sheet createBy(@RequestBody @Valid SheetParam sheetParam) {\n-        return sheetService.createBy(sheetParam.convertTo());\n+    public SheetDetailDTO createBy(@RequestBody @Valid SheetParam sheetParam) {\n+        Sheet sheet = sheetService.createBy(sheetParam.convertTo());\n+        return sheetService.convertToDetailDto(sheet);\n     }\n \n     @PutMapping(\"{sheetId:\\\\d+}\")\n     @ApiOperation(\"Updates a sheet\")\n-    public Sheet updateBy(\n+    public SheetDetailDTO updateBy(\n             @PathVariable(\"sheetId\") Integer sheetId,\n             @RequestBody @Valid SheetParam sheetParam) {\n-        return sheetService.updateBy(sheetParam.convertTo());\n+        Sheet sheet = sheetService.updateBy(sheetParam.convertTo());\n+        return sheetService.convertToDetailDto(sheet);\n     }\n \n     @PutMapping(\"{sheetId:\\\\d+}/{status}\")\n-    public Sheet updateStatusBy(\n+    public void updateStatusBy(\n             @PathVariable(\"sheetId\") Integer sheetId,\n             @PathVariable(\"status\") PostStatus status) {\n         Sheet sheet = sheetService.getById(sheetId);\n \n         // Set status\n         sheet.setStatus(status);\n \n-        // Update and return\n-        return sheetService.update(sheet);\n+        // Update\n+        sheetService.update(sheet);\n     }\n \n     @DeleteMapping(\"{sheetId:\\\\d+}\")\n     @ApiOperation(\"Deletes a sheet\")\n-    public Sheet deleteBy(@PathVariable(\"sheetId\") Integer sheetId) {\n-        return sheetService.removeById(sheetId);\n+    public SheetDetailDTO deleteBy(@PathVariable(\"sheetId\") Integer sheetId) {\n+        Sheet sheet = sheetService.removeById(sheetId);\n+        return sheetService.convertToDetailDto(sheet);\n     }\n }\n\ndiff --git a/src/main/java/run/halo/app/service/SheetService.java b/src/main/java/run/halo/app/service/SheetService.java\n--- a/src/main/java/run/halo/app/service/SheetService.java\n+++ b/src/main/java/run/halo/app/service/SheetService.java\n@@ -44,15 +44,6 @@ public interface SheetService extends CrudService<Sheet, Integer> {\n     @NonNull\n     Page<Sheet> pageBy(@NonNull Pageable pageable);\n \n-    /**\n-     * Converts to detail dto.\n-     *\n-     * @param sheet sheet must not be null\n-     * @return sheet detail dto\n-     */\n-    @NonNull\n-    SheetDetailDTO convertToDetailDto(@NonNull Sheet sheet);\n-\n     /**\n      * Gets sheet by post status and url.\n      *\n@@ -63,6 +54,17 @@ public interface SheetService extends CrudService<Sheet, Integer> {\n     @NonNull\n     Sheet getBy(@NonNull PostStatus status, @NonNull String url);\n \n+\n+    /**\n+     * Converts to detail dto.\n+     *\n+     * @param sheet sheet must not be null\n+     * @return sheet detail dto\n+     */\n+    @NonNull\n+    SheetDetailDTO convertToDetailDto(@NonNull Sheet sheet);\n+\n+\n     /**\n      * Converts to list dto page.\n      *\n@@ -71,4 +73,6 @@ public interface SheetService extends CrudService<Sheet, Integer> {\n      */\n     @NonNull\n     Page<SheetListDTO> convertToListDto(@NonNull Page<Sheet> sheetPage);\n+\n+\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java b/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n@@ -137,6 +137,7 @@ private Sheet createOrUpdateBy(@NonNull Sheet sheet) {\n         // The sheet will be updated\n         // Set edit time\n         sheet.setEditTime(DateUtils.now());\n+\n         // Update it\n         return update(sheet);\n     }",
    "output": "Refactor sheet apis"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/admin/api/SheetController.java b/src/main/java/run/halo/app/controller/admin/api/SheetController.java\n--- a/src/main/java/run/halo/app/controller/admin/api/SheetController.java\n+++ b/src/main/java/run/halo/app/controller/admin/api/SheetController.java\n@@ -5,6 +5,7 @@\n import org.springframework.data.domain.Pageable;\n import org.springframework.data.web.PageableDefault;\n import org.springframework.web.bind.annotation.*;\n+import run.halo.app.model.dto.post.SheetListDTO;\n import run.halo.app.model.entity.Sheet;\n import run.halo.app.model.enums.PostStatus;\n import run.halo.app.model.params.SheetParam;\n@@ -38,8 +39,9 @@ public Sheet getBy(@PathVariable(\"sheetId\") Integer sheetId) {\n \n     @GetMapping\n     @ApiOperation(\"Gets a page of sheet\")\n-    public Page<Sheet> pageBy(@PageableDefault(sort = \"editTime\", direction = DESC) Pageable pageable) {\n-        return sheetService.pageBy(pageable);\n+    public Page<SheetListDTO> pageBy(@PageableDefault(sort = \"editTime\", direction = DESC) Pageable pageable) {\n+        Page<Sheet> sheetPage = sheetService.pageBy(pageable);\n+        return sheetService.convertToListDto(sheetPage);\n     }\n \n     @PostMapping\n\ndiff --git a/src/main/java/run/halo/app/service/SheetCommentService.java b/src/main/java/run/halo/app/service/SheetCommentService.java\n--- a/src/main/java/run/halo/app/service/SheetCommentService.java\n+++ b/src/main/java/run/halo/app/service/SheetCommentService.java\n@@ -1,14 +1,14 @@\n package run.halo.app.service;\n \n import run.halo.app.model.entity.SheetComment;\n-import run.halo.app.service.base.CrudService;\n+import run.halo.app.service.base.BaseCommentService;\n \n /**\n  * Sheet comment service interface.\n  *\n  * @author johnniang\n  * @date 19-4-24\n  */\n-public interface SheetCommentService extends CrudService<SheetComment, Long> {\n+public interface SheetCommentService extends BaseCommentService<SheetComment> {\n \n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/SheetCommentServiceImpl.java b/src/main/java/run/halo/app/service/impl/SheetCommentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/SheetCommentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/SheetCommentServiceImpl.java\n@@ -1,10 +1,13 @@\n package run.halo.app.service.impl;\n \n+import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.stereotype.Service;\n import run.halo.app.model.entity.SheetComment;\n+import run.halo.app.repository.PostRepository;\n import run.halo.app.repository.SheetCommentRepository;\n+import run.halo.app.service.OptionService;\n import run.halo.app.service.SheetCommentService;\n-import run.halo.app.service.base.AbstractCrudService;\n+import run.halo.app.service.base.BaseCommentServiceImpl;\n \n /**\n  * Sheet comment service implementation.\n@@ -13,12 +16,15 @@\n  * @date 19-4-24\n  */\n @Service\n-public class SheetCommentServiceImpl extends AbstractCrudService<SheetComment, Long> implements SheetCommentService {\n+public class SheetCommentServiceImpl extends BaseCommentServiceImpl<SheetComment> implements SheetCommentService {\n \n     private final SheetCommentRepository sheetCommentRepository;\n \n-    public SheetCommentServiceImpl(SheetCommentRepository sheetCommentRepository) {\n-        super(sheetCommentRepository);\n+    public SheetCommentServiceImpl(SheetCommentRepository sheetCommentRepository,\n+                                   PostRepository postRepository,\n+                                   OptionService optionService,\n+                                   ApplicationEventPublisher eventPublisher) {\n+        super(sheetCommentRepository, postRepository, optionService, eventPublisher);\n         this.sheetCommentRepository = sheetCommentRepository;\n     }\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java b/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n@@ -22,6 +22,7 @@\n import run.halo.app.utils.ServiceUtils;\n \n import java.util.List;\n+import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n \n@@ -107,9 +108,13 @@ public Page<SheetListDTO> convertToListDto(Page<Sheet> sheetPage) {\n \n         Set<Integer> sheetIds = ServiceUtils.fetchProperty(sheets, Sheet::getId);\n \n+        // key: sheet id, value: comment count\n+        Map<Integer, Long> sheetCommentCountMap = sheetCommentService.countByPostIds(sheetIds);\n \n         return sheetPage.map(sheet -> {\n-            return new SheetListDTO().convertFrom(sheet);\n+            SheetListDTO sheetListDTO = new SheetListDTO().convertFrom(sheet);\n+            sheetListDTO.setCommentCount(sheetCommentCountMap.getOrDefault(sheet.getId(), 0L));\n+            return sheetListDTO;\n         });\n     }\n ",
    "output": "Refactor sheet pageBy api"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/vo/CommentVO.java b/src/main/java/run/halo/app/model/vo/CommentVO.java\n--- a/src/main/java/run/halo/app/model/vo/CommentVO.java\n+++ b/src/main/java/run/halo/app/model/vo/CommentVO.java\n@@ -1,22 +0,0 @@\n-package run.halo.app.model.vo;\n-\n-import lombok.Data;\n-import lombok.ToString;\n-import run.halo.app.model.dto.CommentDTO;\n-\n-import java.util.List;\n-\n-/**\n- * Comment vo.\n- *\n- * @author johnniang\n- * @date 3/25/19\n- */\n-@Data\n-@ToString(callSuper = true)\n-@Deprecated\n-public class CommentVO extends CommentDTO {\n-\n-    private List<CommentVO> children;\n-\n-}\n\ndiff --git a/src/main/java/run/halo/app/model/vo/CommentWithParentVO.java b/src/main/java/run/halo/app/model/vo/CommentWithParentVO.java\n--- a/src/main/java/run/halo/app/model/vo/CommentWithParentVO.java\n+++ b/src/main/java/run/halo/app/model/vo/CommentWithParentVO.java\n@@ -1,35 +0,0 @@\n-package run.halo.app.model.vo;\n-\n-import lombok.Data;\n-import lombok.EqualsAndHashCode;\n-import lombok.ToString;\n-import lombok.extern.slf4j.Slf4j;\n-import run.halo.app.model.dto.CommentDTO;\n-\n-/**\n- * Comment list with parent comment vo.\n- *\n- * @author johnniang\n- * @date 3/31/19\n- */\n-@Data\n-@ToString(callSuper = true)\n-@EqualsAndHashCode(callSuper = true)\n-@Slf4j\n-@Deprecated\n-public class CommentWithParentVO extends CommentDTO implements Cloneable {\n-\n-    /**\n-     * Parent comment.\n-     */\n-    private CommentWithParentVO parent;\n-\n-    public CommentWithParentVO clone() {\n-        try {\n-            return (CommentWithParentVO) super.clone();\n-        } catch (CloneNotSupportedException e) {\n-            log.error(\"Clone not support exception\", e);\n-            return null;\n-        }\n-    }\n-}\n\ndiff --git a/src/main/java/run/halo/app/service/base/BaseCommentService.java b/src/main/java/run/halo/app/service/base/BaseCommentService.java\n--- a/src/main/java/run/halo/app/service/base/BaseCommentService.java\n+++ b/src/main/java/run/halo/app/service/base/BaseCommentService.java\n@@ -28,7 +28,6 @@ public interface BaseCommentService<COMMENT extends BaseComment> extends CrudSer\n      * %s: parent commentator author name\n      * %s: comment content\n      */\n-    @Deprecated\n     String COMMENT_TEMPLATE = \"<a href='#comment-id-%d'>@%s</a> %s\";\n \n     /**\n\ndiff --git a/src/main/java/run/halo/app/service/base/BaseCommentServiceImpl.java b/src/main/java/run/halo/app/service/base/BaseCommentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/base/BaseCommentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/base/BaseCommentServiceImpl.java\n@@ -26,7 +26,6 @@\n import run.halo.app.model.support.CommentPage;\n import run.halo.app.model.vo.BaseCommentVO;\n import run.halo.app.model.vo.BaseCommentWithParentVO;\n-import run.halo.app.model.vo.CommentWithParentVO;\n import run.halo.app.repository.PostRepository;\n import run.halo.app.repository.base.BaseCommentRepository;\n import run.halo.app.security.authentication.Authentication;\n@@ -183,7 +182,7 @@ public Page<BaseCommentWithParentVO> pageWithParentVoBy(Integer postId, Pageable\n \n                 if (parentComment != null) {\n                     // Convert to parent comment vo\n-                    parentCommentVo = new CommentWithParentVO().convertFrom(parentComment);\n+                    parentCommentVo = new BaseCommentWithParentVO().convertFrom(parentComment);\n                     // Cache the parent comment vo\n                     parentCommentVoMap.put(parentComment.getId(), parentCommentVo);\n                 }",
    "output": "Remove useless class"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java b/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n@@ -11,7 +11,6 @@\n import run.halo.app.exception.NotFoundException;\n import run.halo.app.model.dto.post.SheetDetailDTO;\n import run.halo.app.model.dto.post.SheetListDTO;\n-import run.halo.app.model.entity.Post;\n import run.halo.app.model.entity.Sheet;\n import run.halo.app.model.enums.PostStatus;\n import run.halo.app.repository.SheetRepository;\n@@ -22,9 +21,8 @@\n import run.halo.app.utils.MarkdownUtils;\n import run.halo.app.utils.ServiceUtils;\n \n-import java.util.Optional;\n-\n import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n \n /**\n@@ -37,13 +35,13 @@\n public class SheetServiceImpl extends AbstractCrudService<Sheet, Integer> implements SheetService {\n \n     private final SheetRepository sheetRepository;\n+\n     private final ApplicationEventPublisher eventPublisher;\n \n-    public SheetServiceImpl(SheetRepository sheetRepository,\n-                            ApplicationEventPublisher eventPublisher) {\n     private final SheetCommentService sheetCommentService;\n \n     public SheetServiceImpl(SheetRepository sheetRepository,\n+                            ApplicationEventPublisher eventPublisher,\n                             SheetCommentService sheetCommentService) {\n         super(sheetRepository);\n         this.sheetRepository = sheetRepository;",
    "output": "Resolve conflict"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/controller/content/ContentSheetController.java b/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n--- a/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n+++ b/src/main/java/run/halo/app/controller/content/ContentSheetController.java\n@@ -1,20 +1,17 @@\n package run.halo.app.controller.content;\n \n+import cn.hutool.core.util.StrUtil;\n import org.springframework.stereotype.Controller;\n import org.springframework.ui.Model;\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.RequestParam;\n-import run.halo.app.exception.NotFoundException;\n-import run.halo.app.model.entity.Comment;\n-import run.halo.app.model.entity.Post;\n+import run.halo.app.model.entity.Sheet;\n import run.halo.app.model.enums.PostStatus;\n import run.halo.app.service.CommentService;\n-import run.halo.app.service.PostService;\n+import run.halo.app.service.SheetService;\n import run.halo.app.service.ThemeService;\n \n-import java.util.List;\n-\n /**\n  * @author : RYAN0UP\n  * @date : 2019-03-21\n@@ -23,24 +20,24 @@\n public class ContentSheetController {\n \n \n-    private final PostService postService;\n+    private final SheetService sheetService;\n \n     private final CommentService commentService;\n \n     private final ThemeService themeService;\n \n-    public ContentSheetController(PostService postService,\n+    public ContentSheetController(SheetService sheetService,\n                                   CommentService commentService,\n                                   ThemeService themeService) {\n-        this.postService = postService;\n+        this.sheetService = sheetService;\n         this.commentService = commentService;\n         this.themeService = themeService;\n     }\n \n     /**\n      * Render gallery page\n      *\n-     * @return template path: themes/{theme}/gallery\n+     * @return template path: themes/{theme}/gallery.ftl\n      */\n     @GetMapping(value = \"/gallery\")\n     public String gallery() {\n@@ -50,58 +47,31 @@ public String gallery() {\n     /**\n      * Render links page\n      *\n-     * @return template path: themes/{theme}/links\n+     * @return template path: themes/{theme}/links.ftl\n      */\n     @GetMapping(value = \"/links\")\n     public String links() {\n         return themeService.render(\"links\");\n     }\n \n     /**\n-     * Render custom page\n+     * Render custom sheet\n      *\n-     * @param url   page url\n+     * @param url   sheet url\n      * @param model model\n-     * @return template path: themes/{theme}/post\n+     * @return template path: themes/{theme}/sheet.ftl\n      */\n     @GetMapping(value = \"/s/{url}\")\n     public String sheet(@PathVariable(value = \"url\") String url,\n-                          @RequestParam(value = \"cp\", defaultValue = \"1\") Integer cp,\n-                          Model model) {\n-        final Post post = postService.getByUrl(url);\n-\n-        if (!post.getStatus().equals(PostStatus.PUBLISHED)) {\n-            throw new NotFoundException(\"The post isn't published\").setErrorData(url);\n-        }\n+                        @RequestParam(value = \"cp\", defaultValue = \"1\") Integer cp,\n+                        Model model) {\n+        final Sheet sheet = sheetService.getBy(PostStatus.PUBLISHED, url);\n \n-        List<Comment> comments;\n+        model.addAttribute(\"sheet\", sheet);\n \n-        // TODO Complete this api\n-\n-//        if (StrUtil.equals(OPTIONS.get(BlogProperties.NEW_COMMENT_NEED_CHECK.getValue()), \"true\") || OPTIONS.get(BlogProperties.NEW_COMMENT_NEED_CHECK.getValue()) == null) {\n-//            comments = commentService.findCommentsByPostAndCommentStatus(post, CommentStatus.PUBLISHED.getValue());\n-//        } else {\n-//            comments = commentService.findCommentsByPostAndCommentStatusNot(post, CommentStatusEnum.RECYCLE.getCode());\n-//        }\n-//        //默认显示10条\n-//        int size = 10;\n-//        if (StrUtil.isNotBlank(OPTIONS.get(BlogPropertiesEnum.INDEX_COMMENTS.getProp()))) {\n-//            size = Integer.parseInt(OPTIONS.get(BlogPropertiesEnum.INDEX_COMMENTS.getProp()));\n-//        }\n-//        //评论分页\n-//        final ListPage<Comment> commentsPage = new ListPage<>(CommentUtil.getComments(comments), cp, size);\n-//        final int[] rainbow = PageUtil.rainbow(cp, commentsPage.getTotalPage(), 3);\n-//        model.addAttribute(\"is_page\", true);\n-//        model.addAttribute(\"post\", post);\n-//        model.addAttribute(\"comments\", commentsPage);\n-//        model.addAttribute(\"commentsCount\", comments.size());\n-//        model.addAttribute(\"rainbow\", rainbow);\n-//        postService.cacheViews(post.getPostId());\n-//\n-//        //如果设置了自定义模板，则渲染自定义模板\n-//        if (StrUtil.isNotEmpty(post.getCustomTpl())) {\n-//            return this.render(post.getCustomTpl());\n-//        }\n+        if (StrUtil.isNotEmpty(sheet.getTemplate())) {\n+            return themeService.render(sheet.getTemplate());\n+        }\n         return themeService.render(\"sheet\");\n     }\n }\n\ndiff --git a/src/main/java/run/halo/app/repository/SheetRepository.java b/src/main/java/run/halo/app/repository/SheetRepository.java\n--- a/src/main/java/run/halo/app/repository/SheetRepository.java\n+++ b/src/main/java/run/halo/app/repository/SheetRepository.java\n@@ -1,8 +1,13 @@\n package run.halo.app.repository;\n \n+import org.springframework.lang.NonNull;\n+import run.halo.app.model.entity.Post;\n import run.halo.app.model.entity.Sheet;\n+import run.halo.app.model.enums.PostStatus;\n import run.halo.app.repository.base.BasePostRepository;\n \n+import java.util.Optional;\n+\n /**\n  * Sheet repository.\n  *\n@@ -11,4 +16,6 @@\n  */\n public interface SheetRepository extends BasePostRepository<Sheet> {\n \n+    @NonNull\n+    Optional<Sheet> getByUrlAndStatus(@NonNull String url, @NonNull PostStatus status);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/SheetService.java b/src/main/java/run/halo/app/service/SheetService.java\n--- a/src/main/java/run/halo/app/service/SheetService.java\n+++ b/src/main/java/run/halo/app/service/SheetService.java\n@@ -5,6 +5,7 @@\n import org.springframework.lang.NonNull;\n import run.halo.app.model.dto.post.SheetDetailDTO;\n import run.halo.app.model.entity.Sheet;\n+import run.halo.app.model.enums.PostStatus;\n import run.halo.app.service.base.CrudService;\n \n /**\n@@ -50,4 +51,14 @@ public interface SheetService extends CrudService<Sheet, Integer> {\n      */\n     @NonNull\n     SheetDetailDTO convertToDetailDto(@NonNull Sheet sheet);\n+\n+    /**\n+     * Gets sheet by post status and url.\n+     *\n+     * @param status post status must not be null\n+     * @param url    sheet url must not be blank\n+     * @return sheet info\n+     */\n+    @NonNull\n+    Sheet getBy(@NonNull PostStatus status, @NonNull String url);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java b/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/SheetServiceImpl.java\n@@ -1,20 +1,27 @@\n package run.halo.app.service.impl;\n \n+import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.Pageable;\n import org.springframework.lang.NonNull;\n import org.springframework.stereotype.Service;\n import org.springframework.util.Assert;\n+import run.halo.app.event.post.VisitEvent;\n import run.halo.app.exception.AlreadyExistsException;\n+import run.halo.app.exception.NotFoundException;\n import run.halo.app.model.dto.post.SheetDetailDTO;\n+import run.halo.app.model.entity.Post;\n import run.halo.app.model.entity.Sheet;\n+import run.halo.app.model.enums.PostStatus;\n import run.halo.app.repository.SheetRepository;\n import run.halo.app.service.SheetService;\n import run.halo.app.service.base.AbstractCrudService;\n import run.halo.app.utils.DateUtils;\n import run.halo.app.utils.MarkdownUtils;\n import run.halo.app.utils.ServiceUtils;\n \n+import java.util.Optional;\n+\n /**\n  * Sheet service implementation.\n  *\n@@ -25,10 +32,13 @@\n public class SheetServiceImpl extends AbstractCrudService<Sheet, Integer> implements SheetService {\n \n     private final SheetRepository sheetRepository;\n+    private final ApplicationEventPublisher eventPublisher;\n \n-    public SheetServiceImpl(SheetRepository sheetRepository) {\n+    public SheetServiceImpl(SheetRepository sheetRepository,\n+                            ApplicationEventPublisher eventPublisher) {\n         super(sheetRepository);\n         this.sheetRepository = sheetRepository;\n+        this.eventPublisher = eventPublisher;\n     }\n \n     @Override\n@@ -48,6 +58,30 @@ public Page<Sheet> pageBy(Pageable pageable) {\n         return listAll(pageable);\n     }\n \n+    /**\n+     * Gets sheet by post status and url.\n+     *\n+     * @param status post status must not be null\n+     * @param url    sheet url must not be blank\n+     * @return sheet info\n+     */\n+    @Override\n+    public Sheet getBy(PostStatus status, String url) {\n+        Assert.notNull(status, \"Post status must not be null\");\n+        Assert.hasText(url, \"Sheet url must not be blank\");\n+\n+        Optional<Sheet> sheetOptional = sheetRepository.getByUrlAndStatus(url, status);\n+\n+        Sheet sheet = sheetOptional.orElseThrow(() -> new NotFoundException(\"The sheet with status \" + status + \" and url \" + url + \"was not existed\").setErrorData(url));\n+\n+        if (PostStatus.PUBLISHED.equals(status)) {\n+            // Log it\n+            eventPublisher.publishEvent(new VisitEvent(this, sheet.getId()));\n+        }\n+\n+        return sheet;\n+    }\n+\n     @Override\n     public SheetDetailDTO convertToDetailDto(Sheet sheet) {\n         Assert.notNull(sheet, \"Sheet must not be null\");",
    "output": "Render sheet page."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n@@ -172,7 +172,7 @@ public List<String> getCustomTpl(String themeId) {\n         if (null != themeFiles && themeFiles.length > 0) {\n             for (File file : themeFiles) {\n                 String[] split = StrUtil.removeSuffix(file.getName(), HaloConst.SUFFIX_FTL).split(\"_\");\n-                if (split.length == 2 && \"page\".equals(split[0])) {\n+                if (split.length == 2 && \"sheet\".equals(split[0])) {\n                     templates.add(StrUtil.removeSuffix(file.getName(), HaloConst.SUFFIX_FTL));\n                 }\n             }",
    "output": "Change page to sheet."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/web/controller/content/ContentSheetController.java b/src/main/java/run/halo/app/web/controller/content/ContentSheetController.java\n--- a/src/main/java/run/halo/app/web/controller/content/ContentSheetController.java\n+++ b/src/main/java/run/halo/app/web/controller/content/ContentSheetController.java\n@@ -20,7 +20,7 @@\n  * @date : 2019-03-21\n  */\n @Controller\n-public class ContentPageController {\n+public class ContentSheetController {\n \n \n     private final PostService postService;\n@@ -29,9 +29,9 @@ public class ContentPageController {\n \n     private final ThemeService themeService;\n \n-    public ContentPageController(PostService postService,\n-                                 CommentService commentService,\n-                                 ThemeService themeService) {\n+    public ContentSheetController(PostService postService,\n+                                  CommentService commentService,\n+                                  ThemeService themeService) {\n         this.postService = postService;\n         this.commentService = commentService;\n         this.themeService = themeService;\n@@ -64,8 +64,8 @@ public String links() {\n      * @param model model\n      * @return template path: themes/{theme}/post\n      */\n-    @GetMapping(value = \"/p/{url}\")\n-    public String getPage(@PathVariable(value = \"url\") String url,\n+    @GetMapping(value = \"/s/{url}\")\n+    public String sheet(@PathVariable(value = \"url\") String url,\n                           @RequestParam(value = \"cp\", defaultValue = \"1\") Integer cp,\n                           Model model) {\n         final Post post = postService.getByUrl(url);\n@@ -102,6 +102,6 @@ public String getPage(@PathVariable(value = \"url\") String url,\n //        if (StrUtil.isNotEmpty(post.getCustomTpl())) {\n //            return this.render(post.getCustomTpl());\n //        }\n-        return themeService.render(\"page\");\n+        return themeService.render(\"sheet\");\n     }\n }",
    "output": "Change page to sheet."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/event/comment/CommentEventListener.java b/src/main/java/run/halo/app/event/comment/CommentEventListener.java\n--- a/src/main/java/run/halo/app/event/comment/CommentEventListener.java\n+++ b/src/main/java/run/halo/app/event/comment/CommentEventListener.java\n@@ -15,7 +15,6 @@\n \n import java.util.HashMap;\n import java.util.Map;\n-import java.util.Optional;\n \n /**\n  * Comment event listener.\n\ndiff --git a/src/main/java/run/halo/app/model/entity/Sheet.java b/src/main/java/run/halo/app/model/entity/Sheet.java\n--- a/src/main/java/run/halo/app/model/entity/Sheet.java\n+++ b/src/main/java/run/halo/app/model/entity/Sheet.java\n@@ -9,7 +9,7 @@\n  * @author johnniang\n  * @date 3/22/19\n  */\n-@Entity(name = \"Page\")\n+@Entity(name = \"Sheet\")\n @DiscriminatorValue(\"1\")\n-public class Page extends BasePost {\n+public class Sheet extends BasePost {\n }\n\ndiff --git a/src/main/java/run/halo/app/repository/SheetRepository.java b/src/main/java/run/halo/app/repository/SheetRepository.java\n--- a/src/main/java/run/halo/app/repository/SheetRepository.java\n+++ b/src/main/java/run/halo/app/repository/SheetRepository.java\n@@ -1,7 +1,6 @@\n package run.halo.app.repository;\n \n-import run.halo.app.model.entity.Page;\n-import run.halo.app.repository.base.BasePostRepository;\n+import run.halo.app.model.entity.Sheet;\n import run.halo.app.repository.base.BasePostRepository;\n \n /**\n@@ -10,6 +9,6 @@\n  * @author johnniang\n  * @date 3/22/19\n  */\n-public interface PageRepository extends BasePostRepository<Page> {\n+public interface SheetRepository extends BasePostRepository<Sheet> {\n \n }\n\ndiff --git a/src/test/java/run/halo/app/repository/SheetRepositoryTest.java b/src/test/java/run/halo/app/repository/SheetRepositoryTest.java\n--- a/src/test/java/run/halo/app/repository/SheetRepositoryTest.java\n+++ b/src/test/java/run/halo/app/repository/SheetRepositoryTest.java\n@@ -1,6 +1,6 @@\n package run.halo.app.repository;\n \n-import run.halo.app.model.entity.Page;\n+import run.halo.app.model.entity.Sheet;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -19,14 +19,14 @@\n @RunWith(SpringRunner.class)\n @SpringBootTest\n @ActiveProfiles(\"test\")\n-public class PageRepositoryTest {\n+public class SheetRepositoryTest {\n \n     @Autowired\n-    private PageRepository pageRepository;\n+    private SheetRepository sheetRepository;\n \n     @Test\n     public void listAllTest() {\n-        List<Page> allPages = pageRepository.findAll();\n-        System.out.println(allPages);\n+        List<Sheet> allSheets = sheetRepository.findAll();\n+        System.out.println(allSheets);\n     }\n }",
    "output": "Change Page entity to Sheet"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/event/comment/CommentEventListener.java b/src/main/java/run/halo/app/event/comment/CommentEventListener.java\n--- a/src/main/java/run/halo/app/event/comment/CommentEventListener.java\n+++ b/src/main/java/run/halo/app/event/comment/CommentEventListener.java\n@@ -15,7 +15,6 @@\n \n import java.util.HashMap;\n import java.util.Map;\n-import java.util.Optional;\n \n /**\n  * Comment event listener.\n\ndiff --git a/src/main/java/run/halo/app/model/entity/Sheet.java b/src/main/java/run/halo/app/model/entity/Sheet.java\n--- a/src/main/java/run/halo/app/model/entity/Sheet.java\n+++ b/src/main/java/run/halo/app/model/entity/Sheet.java\n@@ -9,7 +9,7 @@\n  * @author johnniang\n  * @date 3/22/19\n  */\n-@Entity(name = \"Page\")\n+@Entity(name = \"Sheet\")\n @DiscriminatorValue(\"1\")\n-public class Page extends BasePost {\n+public class Sheet extends BasePost {\n }\n\ndiff --git a/src/main/java/run/halo/app/repository/SheetRepository.java b/src/main/java/run/halo/app/repository/SheetRepository.java\n--- a/src/main/java/run/halo/app/repository/SheetRepository.java\n+++ b/src/main/java/run/halo/app/repository/SheetRepository.java\n@@ -1,7 +1,6 @@\n package run.halo.app.repository;\n \n-import run.halo.app.model.entity.Page;\n-import run.halo.app.repository.base.BasePostRepository;\n+import run.halo.app.model.entity.Sheet;\n import run.halo.app.repository.base.BasePostRepository;\n \n /**\n@@ -10,6 +9,6 @@\n  * @author johnniang\n  * @date 3/22/19\n  */\n-public interface PageRepository extends BasePostRepository<Page> {\n+public interface SheetRepository extends BasePostRepository<Sheet> {\n \n }\n\ndiff --git a/src/test/java/run/halo/app/repository/SheetRepositoryTest.java b/src/test/java/run/halo/app/repository/SheetRepositoryTest.java\n--- a/src/test/java/run/halo/app/repository/SheetRepositoryTest.java\n+++ b/src/test/java/run/halo/app/repository/SheetRepositoryTest.java\n@@ -1,6 +1,6 @@\n package run.halo.app.repository;\n \n-import run.halo.app.model.entity.Page;\n+import run.halo.app.model.entity.Sheet;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -19,14 +19,14 @@\n @RunWith(SpringRunner.class)\n @SpringBootTest\n @ActiveProfiles(\"test\")\n-public class PageRepositoryTest {\n+public class SheetRepositoryTest {\n \n     @Autowired\n-    private PageRepository pageRepository;\n+    private SheetRepository sheetRepository;\n \n     @Test\n     public void listAllTest() {\n-        List<Page> allPages = pageRepository.findAll();\n-        System.out.println(allPages);\n+        List<Sheet> allSheets = sheetRepository.findAll();\n+        System.out.println(allSheets);\n     }\n }",
    "output": "Change Post entity to Sheet"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/event/post/VisitEventListener.java b/src/main/java/run/halo/app/event/post/VisitEventListener.java\n--- a/src/main/java/run/halo/app/event/post/VisitEventListener.java\n+++ b/src/main/java/run/halo/app/event/post/VisitEventListener.java\n@@ -39,8 +39,8 @@ public VisitEventListener(PostService postService) {\n             initCapacity = (int) count;\n         }\n \n-        postVisitQueueMap = new ConcurrentHashMap<>(initCapacity);\n-        postVisitTaskMap = new ConcurrentHashMap<>(initCapacity);\n+        postVisitQueueMap = new ConcurrentHashMap<>(initCapacity << 1);\n+        postVisitTaskMap = new ConcurrentHashMap<>(initCapacity << 1);\n \n         this.executor = Executors.newCachedThreadPool();\n     }\n@@ -109,7 +109,7 @@ public void run() {\n \n                     log.debug(\"Increased visits for post id: [{}]\", postId);\n                 } catch (InterruptedException e) {\n-                    log.warn(\"Post visit task: \" + Thread.currentThread().getName() + \" was interrupted\", e);\n+                    log.debug(\"Post visit task: \" + Thread.currentThread().getName() + \" was interrupted\", e);\n                     // Ignore this exception\n                 }\n             }",
    "output": "Increase post visit queue and post visit task map init capacity"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/event/comment/CommentEventListener.java b/src/main/java/run/halo/app/event/comment/CommentEventListener.java\n--- a/src/main/java/run/halo/app/event/comment/CommentEventListener.java\n+++ b/src/main/java/run/halo/app/event/comment/CommentEventListener.java\n@@ -1,14 +1,21 @@\n package run.halo.app.event.comment;\n \n+import cn.hutool.core.text.StrBuilder;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.context.event.EventListener;\n import org.springframework.scheduling.annotation.Async;\n import org.springframework.stereotype.Component;\n+import run.halo.app.exception.ServiceException;\n import run.halo.app.model.entity.Comment;\n+import run.halo.app.model.entity.Post;\n+import run.halo.app.model.entity.User;\n+import run.halo.app.model.properties.BlogProperties;\n import run.halo.app.model.properties.CommentProperties;\n-import run.halo.app.service.CommentService;\n-import run.halo.app.service.MailService;\n-import run.halo.app.service.OptionService;\n+import run.halo.app.service.*;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n \n /**\n  * Comment event listener.\n@@ -26,12 +33,20 @@ public class CommentEventListener {\n \n     private final CommentService commentService;\n \n+    private final PostService postService;\n+\n+    private final UserService userService;\n+\n     public CommentEventListener(MailService mailService,\n                                 OptionService optionService,\n-                                CommentService commentService) {\n+                                CommentService commentService,\n+                                PostService postService,\n+                                UserService userService) {\n         this.mailService = mailService;\n         this.optionService = optionService;\n         this.commentService = commentService;\n+        this.postService = postService;\n+        this.userService = userService;\n     }\n \n     @Async\n@@ -44,10 +59,23 @@ public void handleCommentNewEvent(CommentNewEvent newEvent) {\n             return;\n         }\n \n+        User user = userService.getCurrentUser().orElseThrow(() -> new ServiceException(\"Can not find blog owner\"));\n+\n         // Get comment id\n         Comment comment = commentService.getById(newEvent.getCommentId());\n \n-        // TODO Complete mail sending\n+        Post post = postService.getById(comment.getPostId());\n+\n+        Map<String, Object> data = new HashMap<>();\n+\n+        StrBuilder url = new StrBuilder(optionService.getByPropertyOfNullable(BlogProperties.BLOG_URL))\n+                .append(\"/archives/\")\n+                .append(post.getUrl());\n+        data.put(\"url\", url.toString());\n+        data.put(\"page\", post.getTitle());\n+        data.put(\"author\", comment.getAuthor());\n+        data.put(\"content\",comment.getContent());\n+        mailService.sendTemplateMail(user.getEmail(), \"您的博客有新的评论\", data, \"common/mail_template/mail_notice.ftl\");\n     }\n \n     @Async\n\ndiff --git a/src/main/java/run/halo/app/web/controller/admin/MainController.java b/src/main/java/run/halo/app/web/controller/admin/MainController.java\n--- a/src/main/java/run/halo/app/web/controller/admin/MainController.java\n+++ b/src/main/java/run/halo/app/web/controller/admin/MainController.java\n@@ -0,0 +1,20 @@\n+package run.halo.app.web.controller.admin;\n+\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.GetMapping;\n+\n+/**\n+ * Admin page.\n+ *\n+ * @author : RYAN0UP\n+ * @date : 2019-04-23\n+ */\n+@Controller\n+public class MainController {\n+\n+\n+    @GetMapping(\"/admin\")\n+    public String admin() {\n+        return \"redirect:/admin/index.html\";\n+    }\n+}\n\ndiff --git a/src/main/java/run/halo/app/web/controller/content/ContentArchiveController.java b/src/main/java/run/halo/app/web/controller/content/ContentArchiveController.java\n--- a/src/main/java/run/halo/app/web/controller/content/ContentArchiveController.java\n+++ b/src/main/java/run/halo/app/web/controller/content/ContentArchiveController.java\n@@ -33,7 +33,7 @@\n  */\n @Slf4j\n @Controller\n-@RequestMapping(value = \"archives\")\n+@RequestMapping(value = \"/archives\")\n public class ContentArchiveController {\n \n     private final PostService postService;\n\ndiff --git a/src/main/java/run/halo/app/web/controller/content/ContentIndexController.java b/src/main/java/run/halo/app/web/controller/content/ContentIndexController.java\n--- a/src/main/java/run/halo/app/web/controller/content/ContentIndexController.java\n+++ b/src/main/java/run/halo/app/web/controller/content/ContentIndexController.java\n@@ -83,9 +83,4 @@ public String index(Model model,\n         model.addAttribute(\"rainbow\", rainbow);\n         return themeService.render(\"index\");\n     }\n-\n-    @GetMapping(\"/admin\")\n-    public String admin() {\n-        return \"redirect:/admin/index.html\";\n-    }\n }",
    "output": "Send email to admin when have a new comment."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java b/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n--- a/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n+++ b/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n@@ -74,18 +74,21 @@ public void addArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers)\n      */\n     @Override\n     public void addResourceHandlers(ResourceHandlerRegistry registry) {\n+        String workDir = FILE_PROTOCOL + haloProperties.getWorkDir();\n         registry.addResourceHandler(\"/static/**\")\n                 .addResourceLocations(\"classpath:/static/\");\n         registry.addResourceHandler(\"/**\")\n-                .addResourceLocations(\"classpath:/admin/\")\n-                .addResourceLocations(FILE_PROTOCOL + haloProperties.getWorkDir() + \"templates/themes/\");\n+                .addResourceLocations(workDir + \"templates/themes/\")\n+                .addResourceLocations(workDir + \"templates/admin/\")\n+                .addResourceLocations(\"classpath:/admin/\");\n         registry.addResourceHandler(\"/upload/**\")\n-                .addResourceLocations(FILE_PROTOCOL + haloProperties.getWorkDir() + \"upload/\");\n+                .addResourceLocations(workDir + \"upload/\");\n         registry.addResourceHandler(\"/favicon.ico\")\n                 .addResourceLocations(\"classpath:/static/halo-admin/images/favicon.ico\");\n         registry.addResourceHandler(\"/backup/**\")\n-                .addResourceLocations(FILE_PROTOCOL + haloProperties.getWorkDir() + \"backup/\");\n+                .addResourceLocations(workDir + \"backup/\");\n         registry.addResourceHandler(\"/admin/**\")\n+                .addResourceLocations(workDir + \"templates/admin/\")\n                 .addResourceLocations(\"classpath:/admin/\");\n \n         if (!haloProperties.isDocDisabled()) {",
    "output": "Add additional admin resources location"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java b/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n--- a/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n+++ b/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n@@ -1,7 +1,6 @@\n package run.halo.app.config;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n-import freemarker.template.TemplateExceptionHandler;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.boot.jackson.JsonComponentModule;\n import org.springframework.context.annotation.Bean;\n@@ -78,7 +77,7 @@ public void addResourceHandlers(ResourceHandlerRegistry registry) {\n         registry.addResourceHandler(\"/static/**\")\n                 .addResourceLocations(\"classpath:/static/\");\n         registry.addResourceHandler(\"/**\")\n-                .addResourceLocations(\"classpath:/templates/themes/\")\n+                .addResourceLocations(\"classpath:/admin/\")\n                 .addResourceLocations(FILE_PROTOCOL + haloProperties.getWorkDir() + \"templates/themes/\");\n         registry.addResourceHandler(\"/upload/**\")\n                 .addResourceLocations(FILE_PROTOCOL + haloProperties.getWorkDir() + \"upload/\");\n@@ -87,7 +86,7 @@ public void addResourceHandlers(ResourceHandlerRegistry registry) {\n         registry.addResourceHandler(\"/backup/**\")\n                 .addResourceLocations(FILE_PROTOCOL + haloProperties.getWorkDir() + \"backup/\");\n         registry.addResourceHandler(\"/admin/**\")\n-                .addResourceLocations(\"classpath:/static/admin/\");\n+                .addResourceLocations(\"classpath:/admin/\");\n \n         if (!haloProperties.isDocDisabled()) {\n             // If doc is enable\n\ndiff --git a/src/main/java/run/halo/app/web/controller/content/ContentIndexController.java b/src/main/java/run/halo/app/web/controller/content/ContentIndexController.java\n--- a/src/main/java/run/halo/app/web/controller/content/ContentIndexController.java\n+++ b/src/main/java/run/halo/app/web/controller/content/ContentIndexController.java\n@@ -83,4 +83,9 @@ public String index(Model model,\n         model.addAttribute(\"rainbow\", rainbow);\n         return themeService.render(\"index\");\n     }\n+\n+    @GetMapping(\"/admin\")\n+    public String admin() {\n+        return \"redirect:/admin/index.html\";\n+    }\n }",
    "output": "Complete admin redirection"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/exception/EmailException.java b/src/main/java/run/halo/app/exception/EmailException.java\n--- a/src/main/java/run/halo/app/exception/EmailException.java\n+++ b/src/main/java/run/halo/app/exception/EmailException.java\n@@ -0,0 +1,18 @@\n+package run.halo.app.exception;\n+\n+/**\n+ * Email exception.\n+ *\n+ * @author johnniang\n+ * @date 19-4-23\n+ */\n+public class EmailException extends ServiceException {\n+\n+    public EmailException(String message) {\n+        super(message);\n+    }\n+\n+    public EmailException(String message, Throwable cause) {\n+        super(message, cause);\n+    }\n+}\n\ndiff --git a/src/main/java/run/halo/app/service/impl/MailServiceImpl.java b/src/main/java/run/halo/app/service/impl/MailServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/MailServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/MailServiceImpl.java\n@@ -1,17 +1,16 @@\n package run.halo.app.service.impl;\n \n-import run.halo.app.exception.ServiceException;\n-import run.halo.app.model.properties.EmailProperties;\n-import run.halo.app.service.MailService;\n-import run.halo.app.service.OptionService;\n import cn.hutool.core.text.StrBuilder;\n import freemarker.template.Template;\n import io.github.biezhi.ome.OhMyEmail;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.stereotype.Service;\n import org.springframework.ui.freemarker.FreeMarkerTemplateUtils;\n import org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer;\n-import run.halo.app.exception.ServiceException;\n+import run.halo.app.exception.EmailException;\n+import run.halo.app.model.properties.EmailProperties;\n+import run.halo.app.service.MailService;\n+import run.halo.app.service.OptionService;\n \n import java.io.File;\n import java.util.Map;\n@@ -74,7 +73,7 @@ public void sendMail(String to, String subject, String content) {\n         } catch (Exception e) {\n             log.debug(\"Email properties: to username: [{}], from username: [{}], subject: [{}], content: [{}]\",\n                     to, fromUsername, subject, content);\n-            throw new ServiceException(\"Failed to send email to \" + to, e);\n+            throw new EmailException(\"Failed to send email to \" + to, e);\n         }\n     }\n \n@@ -104,7 +103,7 @@ public void sendTemplateMail(String to, String subject, Map<String, Object> cont\n         } catch (Exception e) {\n             log.debug(\"Email properties: to username: [{}], from username: [{}], subject: [{}], template name: [{}], content: [{}]\",\n                     to, fromUsername, subject, templateName, content);\n-            throw new ServiceException(\"Failed to send template email to \" + to, e).setErrorData(templateName);\n+            throw new EmailException(\"Failed to send template email to \" + to, e).setErrorData(templateName);\n         }\n     }\n \n@@ -135,7 +134,7 @@ public void sendAttachMail(String to, String subject, Map<String, Object> conten\n         } catch (Exception e) {\n             log.debug(\"Email properties: to username: [{}], from username: [{}], subject: [{}], template name: [{}], attachment: [{}], content: [{}]\",\n                     to, fromUsername, subject, templateName, attachFilename, content);\n-            throw new ServiceException(\"Failed to send attachment email to \" + to, e);\n+            throw new EmailException(\"Failed to send attachment email to \" + to, e);\n         }\n     }\n ",
    "output": "Replace ServiceException with EmailException in MailService"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/FreeMarkerAutoConfiguration.java b/src/main/java/run/halo/app/config/FreeMarkerAutoConfiguration.java\n--- a/src/main/java/run/halo/app/config/FreeMarkerAutoConfiguration.java\n+++ b/src/main/java/run/halo/app/config/FreeMarkerAutoConfiguration.java\n@@ -9,6 +9,8 @@\n import run.halo.app.model.freemarker.method.RecentPostsMethod;\n import run.halo.app.model.freemarker.tag.*;\n import run.halo.app.service.OptionService;\n+import run.halo.app.service.ThemeService;\n+import run.halo.app.service.ThemeSettingService;\n import run.halo.app.service.UserService;\n \n import javax.annotation.PostConstruct;\n@@ -32,6 +34,12 @@ public class FreeMarkerAutoConfiguration {\n     @Autowired\n     private UserService userService;\n \n+    @Autowired\n+    private ThemeService themeService;\n+\n+    @Autowired\n+    private ThemeSettingService themeSettingService;\n+\n     @Autowired\n     private PostTagDirective postTagDirective;\n \n@@ -66,15 +74,16 @@ public class FreeMarkerAutoConfiguration {\n     public void setSharedVariable() {\n         try {\n             configuration.setSharedVariable(\"options\", optionsService.listOptions());\n-            configuration.setSharedVariable(\"user\",userService.getCurrentUser().orElse(null));\n+            configuration.setSharedVariable(\"user\", userService.getCurrentUser().orElse(null));\n+            configuration.setSharedVariable(\"settings\", themeSettingService.listAsMapBy(themeService.getActivatedThemeId()));\n             //Freemarker custom tags\n             configuration.setSharedVariable(\"categoryTag\", categoryTagDirective);\n             configuration.setSharedVariable(\"commentTag\", commentTagDirective);\n             configuration.setSharedVariable(\"linkTag\", linkTagDirective);\n             configuration.setSharedVariable(\"menuTag\", menuTagDirective);\n             configuration.setSharedVariable(\"tagTag\", tagTagDirective);\n             configuration.setSharedVariable(\"postTag\", postTagDirective);\n-            configuration.setSharedVariable(\"galleryTag\",galleryTagDirective);\n+            configuration.setSharedVariable(\"galleryTag\", galleryTagDirective);\n             configuration.setSharedVariable(\"randomMethod\", randomMethod);\n             configuration.setSharedVariable(\"recentPostsMethod\", recentPostsMethod);\n             configuration.setSharedVariable(\"recentCommentsMethod\", recentCommentsMethod);\n\ndiff --git a/src/main/java/run/halo/app/event/theme/FreemarkerConfigAwareListener.java b/src/main/java/run/halo/app/event/theme/FreemarkerConfigAwareListener.java\n--- a/src/main/java/run/halo/app/event/theme/FreemarkerConfigAwareListener.java\n+++ b/src/main/java/run/halo/app/event/theme/FreemarkerConfigAwareListener.java\n@@ -10,6 +10,7 @@\n import run.halo.app.handler.theme.config.support.ThemeProperty;\n import run.halo.app.service.OptionService;\n import run.halo.app.service.ThemeService;\n+import run.halo.app.service.ThemeSettingService;\n \n import java.util.Map;\n \n@@ -29,12 +30,16 @@ public class FreemarkerConfigAwareListener {\n \n     private final ThemeService themeService;\n \n+    private final ThemeSettingService themeSettingService;\n+\n     public FreemarkerConfigAwareListener(OptionService optionService,\n                                          Configuration configuration,\n-                                         ThemeService themeService) {\n+                                         ThemeService themeService,\n+                                         ThemeSettingService themeSettingService) {\n         this.optionService = optionService;\n         this.configuration = configuration;\n         this.themeService = themeService;\n+        this.themeSettingService = themeSettingService;\n     }\n \n     @Async\n@@ -59,6 +64,8 @@ public void onThemeActivatedEvent(ThemeActivatedEvent themeActivatedEvent) {\n             Map<String, String> options = optionService.listOptions();\n             log.debug(\"Set shared variable options: [{}]\", options);\n             configuration.setSharedVariable(\"options\", options);\n+            log.debug(\"Set shared variable theme settings: [{}]\", options);\n+            configuration.setSharedVariable(\"setting\",themeSettingService.listAsMapBy(themeService.getActivatedThemeId()));\n         } catch (TemplateModelException e) {\n             log.warn(\"Failed to configure freemarker\", e);\n         }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/ThemeSettingServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeSettingServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeSettingServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeSettingServiceImpl.java\n@@ -1,11 +1,14 @@\n package run.halo.app.service.impl;\n \n+import freemarker.template.Configuration;\n+import freemarker.template.TemplateModelException;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.lang3.StringUtils;\n import org.springframework.lang.NonNull;\n import org.springframework.stereotype.Service;\n import org.springframework.util.Assert;\n import org.springframework.util.CollectionUtils;\n+import run.halo.app.exception.ServiceException;\n import run.halo.app.handler.theme.config.support.Group;\n import run.halo.app.handler.theme.config.support.Item;\n import run.halo.app.model.entity.ThemeSetting;\n@@ -31,11 +34,15 @@ public class ThemeSettingServiceImpl extends AbstractCrudService<ThemeSetting, I\n \n     private final ThemeService themeService;\n \n+    private final Configuration configuration;\n+\n     public ThemeSettingServiceImpl(ThemeSettingRepository themeSettingRepository,\n-                                   ThemeService themeService) {\n+                                   ThemeService themeService,\n+                                   Configuration configuration) {\n         super(themeSettingRepository);\n         this.themeSettingRepository = themeSettingRepository;\n         this.themeService = themeService;\n+        this.configuration = configuration;\n     }\n \n     @Override\n@@ -94,6 +101,12 @@ public void save(Map<String, Object> settings, String themeId) {\n \n         // Save the settings\n         settings.forEach((key, value) -> save(key, value.toString(), themeId));\n+\n+        try {\n+            configuration.setSharedVariable(\"settings\", listAsMapBy(themeService.getActivatedThemeId()));\n+        } catch (TemplateModelException e) {\n+            throw new ServiceException(\"Save theme settings error\", e);\n+        }\n     }\n \n     @Override",
    "output": "Update anatole theme."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/ThemeService.java b/src/main/java/run/halo/app/service/ThemeService.java\n--- a/src/main/java/run/halo/app/service/ThemeService.java\n+++ b/src/main/java/run/halo/app/service/ThemeService.java\n@@ -38,7 +38,7 @@ public interface ThemeService {\n     /**\n      * The type of file that can be modified.\n      */\n-    String[] CAN_EDIT_SUFFIX = {\"ftl\", \"css\", \"js\"};\n+    String[] CAN_EDIT_SUFFIX = {\".ftl\", \".css\", \".js\", \".yaml\", \".yml\", \".properties\"};\n \n     /**\n      * These file names cannot be displayed.\n\ndiff --git a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n@@ -573,7 +573,7 @@ private boolean isEditable(@NonNull Path path) {\n \n         // Check suffix\n         for (String suffix : CAN_EDIT_SUFFIX) {\n-            if (path.endsWith(suffix)) {\n+            if (path.toString().endsWith(suffix)) {\n                 return true;\n             }\n         }",
    "output": "Update CAN_EDIT_SUFFIX."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/web/controller/admin/api/ThemeController.java b/src/main/java/run/halo/app/web/controller/admin/api/ThemeController.java\n--- a/src/main/java/run/halo/app/web/controller/admin/api/ThemeController.java\n+++ b/src/main/java/run/halo/app/web/controller/admin/api/ThemeController.java\n@@ -1,6 +1,7 @@\n package run.halo.app.web.controller.admin.api;\n \n import io.swagger.annotations.ApiOperation;\n+import org.springframework.http.HttpStatus;\n import org.springframework.web.bind.annotation.*;\n import org.springframework.web.multipart.MultipartFile;\n import run.halo.app.handler.theme.config.support.Group;\n@@ -52,8 +53,8 @@ public List<ThemeFile> listFiles() {\n     }\n \n     @GetMapping(\"files/content\")\n-    public String getContentBy(@RequestParam(name = \"path\") String path) {\n-        return themeService.getTemplateContent(path);\n+    public BaseResponse<String> getContentBy(@RequestParam(name = \"path\") String path) {\n+        return BaseResponse.ok(HttpStatus.OK.getReasonPhrase(), themeService.getTemplateContent(path));\n     }\n \n     @PutMapping(\"files/content\")",
    "output": "Enable base response in content fetching api"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/event/logger/LogEvent.java b/src/main/java/run/halo/app/event/logger/LogEvent.java\n--- a/src/main/java/run/halo/app/event/logger/LogEvent.java\n+++ b/src/main/java/run/halo/app/event/logger/LogEvent.java\n@@ -0,0 +1,38 @@\n+package run.halo.app.event.logger;\n+\n+import org.springframework.context.ApplicationEvent;\n+import run.halo.app.model.enums.LogType;\n+import run.halo.app.model.params.LogParam;\n+import run.halo.app.utils.ValidationUtils;\n+\n+/**\n+ * @author johnniang\n+ * @date 19-4-20\n+ */\n+public class LogEvent extends ApplicationEvent {\n+\n+    private final LogParam logParam;\n+\n+    /**\n+     * Create a new ApplicationEvent.\n+     *\n+     * @param source   the object on which the event initially occurred (never {@code null})\n+     * @param logParam login param\n+     */\n+    public LogEvent(Object source, LogParam logParam) {\n+        super(source);\n+\n+        // Validate the log param\n+        ValidationUtils.validate(logParam);\n+\n+        this.logParam = logParam;\n+    }\n+\n+    public LogEvent(Object source, String logKey, LogType logType, String content) {\n+        this(source, new LogParam(logKey, logType, content));\n+    }\n+\n+    public LogParam getLogParam() {\n+        return logParam;\n+    }\n+}\n\ndiff --git a/src/main/java/run/halo/app/event/logger/LogEventListener.java b/src/main/java/run/halo/app/event/logger/LogEventListener.java\n--- a/src/main/java/run/halo/app/event/logger/LogEventListener.java\n+++ b/src/main/java/run/halo/app/event/logger/LogEventListener.java\n@@ -0,0 +1,32 @@\n+package run.halo.app.event.logger;\n+\n+import org.springframework.context.event.EventListener;\n+import org.springframework.scheduling.annotation.Async;\n+import org.springframework.stereotype.Component;\n+import run.halo.app.model.entity.Log;\n+import run.halo.app.service.LogService;\n+\n+/**\n+ * Log event listener.\n+ *\n+ * @author johnniang\n+ * @date 19-4-21\n+ */\n+@Component\n+public class LogEventListener {\n+\n+    private final LogService logService;\n+\n+    public LogEventListener(LogService logService) {\n+        this.logService = logService;\n+    }\n+\n+    @EventListener\n+    @Async\n+    public void onApplicationEvent(LogEvent event) {\n+        // Convert to log\n+        Log logToCreate = event.getLogParam().convertTo();\n+        // Create log\n+        logService.create(logToCreate);\n+    }\n+}\n\ndiff --git a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n@@ -11,15 +11,13 @@\n import org.springframework.lang.NonNull;\n import org.springframework.lang.Nullable;\n import org.springframework.stereotype.Service;\n-import org.springframework.transaction.annotation.Transactional;\n import org.springframework.util.Assert;\n import org.springframework.util.CollectionUtils;\n-import run.halo.app.event.log.LogEvent;\n+import run.halo.app.event.logger.LogEvent;\n import run.halo.app.event.post.VisitEvent;\n import run.halo.app.exception.AlreadyExistsException;\n import run.halo.app.exception.BadRequestException;\n import run.halo.app.exception.NotFoundException;\n-import run.halo.app.exception.ServiceException;\n import run.halo.app.model.dto.CategoryOutputDTO;\n import run.halo.app.model.dto.TagOutputDTO;\n import run.halo.app.model.dto.post.PostMinimalOutputDTO;\n\ndiff --git a/src/main/java/run/halo/app/service/impl/UserServiceImpl.java b/src/main/java/run/halo/app/service/impl/UserServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/UserServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/UserServiceImpl.java\n@@ -8,7 +8,7 @@\n import org.springframework.util.Assert;\n import org.springframework.util.CollectionUtils;\n import run.halo.app.cache.StringCacheStore;\n-import run.halo.app.event.log.LogEvent;\n+import run.halo.app.event.logger.LogEvent;\n import run.halo.app.exception.BadRequestException;\n import run.halo.app.exception.NotFoundException;\n import run.halo.app.model.entity.User;\n\ndiff --git a/src/main/java/run/halo/app/web/controller/core/InstallController.java b/src/main/java/run/halo/app/web/controller/core/InstallController.java\n--- a/src/main/java/run/halo/app/web/controller/core/InstallController.java\n+++ b/src/main/java/run/halo/app/web/controller/core/InstallController.java\n@@ -10,7 +10,7 @@\n import org.springframework.web.bind.annotation.PostMapping;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.ResponseBody;\n-import run.halo.app.event.log.LogEvent;\n+import run.halo.app.event.logger.LogEvent;\n import run.halo.app.exception.BadRequestException;\n import run.halo.app.model.entity.*;\n import run.halo.app.model.enums.AttachmentType;\n\ndiff --git a/src/test/java/run/halo/app/event/LogEventListenerTest.java b/src/test/java/run/halo/app/event/LogEventListenerTest.java\n--- a/src/test/java/run/halo/app/event/LogEventListenerTest.java\n+++ b/src/test/java/run/halo/app/event/LogEventListenerTest.java\n@@ -3,8 +3,8 @@\n import lombok.extern.slf4j.Slf4j;\n import org.junit.Test;\n import org.springframework.context.ApplicationListener;\n-import run.halo.app.event.log.LogEvent;\n-import run.halo.app.event.log.LogEventListener;\n+import run.halo.app.event.logger.LogEvent;\n+import run.halo.app.event.logger.LogEventListener;\n import run.halo.app.utils.ReflectionUtils;\n \n import java.lang.reflect.ParameterizedType;",
    "output": "Change log package to logger"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/HaloConfiguration.java b/src/main/java/run/halo/app/config/HaloConfiguration.java\n--- a/src/main/java/run/halo/app/config/HaloConfiguration.java\n+++ b/src/main/java/run/halo/app/config/HaloConfiguration.java\n@@ -85,7 +85,7 @@ public FilterRegistrationBean<LogFilter> logFilter() {\n \n         logFilter.setOrder(Ordered.HIGHEST_PRECEDENCE + 9);\n         logFilter.setFilter(new LogFilter());\n-        logFilter.addUrlPatterns(\"/api/*\");\n+        logFilter.addUrlPatterns(\"/*\");\n \n         return logFilter;\n     }\n\ndiff --git a/src/main/java/run/halo/app/service/PostCategoryService.java b/src/main/java/run/halo/app/service/PostCategoryService.java\n--- a/src/main/java/run/halo/app/service/PostCategoryService.java\n+++ b/src/main/java/run/halo/app/service/PostCategoryService.java\n@@ -4,6 +4,7 @@\n import org.springframework.data.domain.Pageable;\n import org.springframework.lang.NonNull;\n import org.springframework.lang.Nullable;\n+import org.springframework.transaction.annotation.Transactional;\n import run.halo.app.model.entity.Category;\n import run.halo.app.model.entity.Post;\n import run.halo.app.model.entity.PostCategory;\n@@ -103,6 +104,7 @@ public interface PostCategoryService extends CrudService<PostCategory, Integer>\n      * @return a list of post category deleted\n      */\n     @NonNull\n+    @Transactional\n     List<PostCategory> removeByPostId(@NonNull Integer postId);\n \n     /**\n@@ -112,5 +114,6 @@ public interface PostCategoryService extends CrudService<PostCategory, Integer>\n      * @return a list of post category deleted\n      */\n     @NonNull\n+    @Transactional\n     List<PostCategory> removeByCategoryId(@NonNull Integer categoryId);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/PostTagService.java b/src/main/java/run/halo/app/service/PostTagService.java\n--- a/src/main/java/run/halo/app/service/PostTagService.java\n+++ b/src/main/java/run/halo/app/service/PostTagService.java\n@@ -1,5 +1,6 @@\n package run.halo.app.service;\n \n+import org.springframework.transaction.annotation.Transactional;\n import run.halo.app.model.dto.TagWithCountOutputDTO;\n import run.halo.app.model.entity.Post;\n import run.halo.app.model.entity.PostTag;\n@@ -113,6 +114,7 @@ public interface PostTagService extends CrudService<PostTag, Integer> {\n      * @return a list of post tag\n      */\n     @NonNull\n+    @Transactional\n     List<PostTag> removeByPostId(@NonNull Integer postId);\n \n     /**\n@@ -122,5 +124,6 @@ public interface PostTagService extends CrudService<PostTag, Integer> {\n      * @return a list of post tag\n      */\n     @NonNull\n+    @Transactional\n     List<PostTag> removeByTagId(@NonNull Integer tagId);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/base/CrudService.java b/src/main/java/run/halo/app/service/base/CrudService.java\n--- a/src/main/java/run/halo/app/service/base/CrudService.java\n+++ b/src/main/java/run/halo/app/service/base/CrudService.java\n@@ -1,5 +1,6 @@\n package run.halo.app.service.base;\n \n+import org.springframework.transaction.annotation.Transactional;\n import run.halo.app.exception.NotFoundException;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.Pageable;\n@@ -124,6 +125,7 @@ public interface CrudService<DOMAIN, ID> {\n      * @return DOMAIN\n      */\n     @NonNull\n+    @Transactional\n     DOMAIN create(@NonNull DOMAIN domain);\n \n     /**\n@@ -133,6 +135,7 @@ public interface CrudService<DOMAIN, ID> {\n      * @return List\n      */\n     @NonNull\n+    @Transactional\n     List<DOMAIN> createInBatch(@NonNull Collection<DOMAIN> domains);\n \n     /**\n@@ -142,6 +145,7 @@ public interface CrudService<DOMAIN, ID> {\n      * @return DOMAIN\n      */\n     @NonNull\n+    @Transactional\n     DOMAIN update(@NonNull DOMAIN domain);\n \n     /**\n@@ -151,6 +155,7 @@ public interface CrudService<DOMAIN, ID> {\n      * @return List\n      */\n     @NonNull\n+    @Transactional\n     List<DOMAIN> updateInBatch(@NonNull Collection<DOMAIN> domains);\n \n     /**\n@@ -161,6 +166,7 @@ public interface CrudService<DOMAIN, ID> {\n      * @throws NotFoundException If the specified id does not exist\n      */\n     @NonNull\n+    @Transactional\n     DOMAIN removeById(@NonNull ID id);\n \n     /**\n@@ -170,31 +176,36 @@ public interface CrudService<DOMAIN, ID> {\n      * @return DOMAIN\n      */\n     @Nullable\n+    @Transactional\n     DOMAIN removeByIdOfNullable(@NonNull ID id);\n \n     /**\n      * Remove by domain\n      *\n      * @param domain domain\n      */\n+    @Transactional\n     void remove(@NonNull DOMAIN domain);\n \n     /**\n      * Remove by ids\n      *\n      * @param ids ids\n      */\n+    @Transactional\n     void removeInBatch(@NonNull Collection<ID> ids);\n \n     /**\n      * Remove all by domains\n      *\n      * @param domains domains\n      */\n+    @Transactional\n     void removeAll(@NonNull Collection<DOMAIN> domains);\n \n     /**\n      * Remove all\n      */\n+    @Transactional\n     void removeAll();\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/PostCategoryServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostCategoryServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostCategoryServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostCategoryServiceImpl.java\n@@ -171,7 +171,7 @@ public Set<Integer> listCategoryIdsByPostId(Integer postId) {\n \n     @Override\n     public List<PostCategory> removeByPostId(Integer postId) {\n-        Assert.notNull(postId, \"Post id must not be null\");\n+        Assert.notNull(postId, \"PoremoveByIdst id must not be null\");\n \n         return postCategoryRepository.deleteByPostId(postId);\n     }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n@@ -443,7 +443,6 @@ public List<ArchiveMonthVO> listMonthArchives() {\n     }\n \n     @Override\n-    @Transactional\n     public Post removeById(Integer postId) {\n         Assert.notNull(postId, \"Post id must not be null\");\n \n@@ -501,6 +500,7 @@ public Page<PostListVO> convertToListVo(Page<Post> postPage) {\n             postListVO.setTags(Optional.ofNullable(tagListMap.get(post.getId()))\n                     .orElseGet(LinkedList::new)\n                     .stream()\n+                    .filter(Objects::nonNull)\n                     .map(tag -> new TagOutputDTO().<TagOutputDTO>convertFrom(tag))\n                     .collect(Collectors.toList()));\n \n\ndiff --git a/src/main/java/run/halo/app/web/controller/content/api/CommentController.java b/src/main/java/run/halo/app/web/controller/content/api/CommentController.java\n--- a/src/main/java/run/halo/app/web/controller/content/api/CommentController.java\n+++ b/src/main/java/run/halo/app/web/controller/content/api/CommentController.java\n@@ -1,5 +1,6 @@\n package run.halo.app.web.controller.content.api;\n \n+import io.swagger.annotations.ApiOperation;\n import run.halo.app.model.dto.CommentOutputDTO;\n import run.halo.app.model.entity.User;\n import run.halo.app.model.params.CommentParam;\n@@ -43,6 +44,7 @@ public CommentController(CommentService commentService,\n     }\n \n     @PostMapping\n+    @ApiOperation(\"Comments a post\")\n     public CommentOutputDTO comment(@RequestBody CommentParam commentParam, HttpServletRequest request) {\n         // Get authentication\n         Authentication authentication = SecurityContextHolder.getContext().getAuthentication();",
    "output": "Fix tag deletion bug"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/event/LogEvent.java b/src/main/java/run/halo/app/event/LogEvent.java\n--- a/src/main/java/run/halo/app/event/LogEvent.java\n+++ b/src/main/java/run/halo/app/event/LogEvent.java\n@@ -1,38 +0,0 @@\n-package run.halo.app.event;\n-\n-import org.springframework.context.ApplicationEvent;\n-import run.halo.app.model.enums.LogType;\n-import run.halo.app.model.params.LogParam;\n-import run.halo.app.utils.ValidationUtils;\n-\n-/**\n- * @author johnniang\n- * @date 19-4-20\n- */\n-public class LogEvent extends ApplicationEvent {\n-\n-    private final LogParam logParam;\n-\n-    /**\n-     * Create a new ApplicationEvent.\n-     *\n-     * @param source   the object on which the event initially occurred (never {@code null})\n-     * @param logParam\n-     */\n-    public LogEvent(Object source, LogParam logParam) {\n-        super(source);\n-\n-        // Validate the log param\n-        ValidationUtils.validate(logParam);\n-\n-        this.logParam = logParam;\n-    }\n-\n-    public LogEvent(Object source, String logKey, LogType logType, String content) {\n-        this(source, new LogParam(logKey, logType, content));\n-    }\n-\n-    public LogParam getLogParam() {\n-        return logParam;\n-    }\n-}\n\ndiff --git a/src/main/java/run/halo/app/event/LogEventListener.java b/src/main/java/run/halo/app/event/LogEventListener.java\n--- a/src/main/java/run/halo/app/event/LogEventListener.java\n+++ b/src/main/java/run/halo/app/event/LogEventListener.java\n@@ -1,32 +0,0 @@\n-package run.halo.app.event;\n-\n-import org.springframework.context.event.EventListener;\n-import org.springframework.scheduling.annotation.Async;\n-import org.springframework.stereotype.Component;\n-import run.halo.app.model.entity.Log;\n-import run.halo.app.service.LogService;\n-\n-/**\n- * Log event listener.\n- *\n- * @author johnniang\n- * @date 19-4-21\n- */\n-@Component\n-public class LogEventListener {\n-\n-    private final LogService logService;\n-\n-    public LogEventListener(LogService logService) {\n-        this.logService = logService;\n-    }\n-\n-    @EventListener\n-    @Async\n-    public void onApplicationEvent(LogEvent event) {\n-        // Convert to log\n-        Log logToCreate = event.getLogParam().convertTo();\n-        // Create log\n-        logService.create(logToCreate);\n-    }\n-}\n\ndiff --git a/src/main/java/run/halo/app/event/post/VisitEvent.java b/src/main/java/run/halo/app/event/post/VisitEvent.java\n--- a/src/main/java/run/halo/app/event/post/VisitEvent.java\n+++ b/src/main/java/run/halo/app/event/post/VisitEvent.java\n@@ -1,4 +1,4 @@\n-package run.halo.app.event;\n+package run.halo.app.event.post;\n \n import org.springframework.context.ApplicationEvent;\n import org.springframework.lang.NonNull;\n\ndiff --git a/src/main/java/run/halo/app/event/post/VisitEventListener.java b/src/main/java/run/halo/app/event/post/VisitEventListener.java\n--- a/src/main/java/run/halo/app/event/post/VisitEventListener.java\n+++ b/src/main/java/run/halo/app/event/post/VisitEventListener.java\n@@ -1,4 +1,4 @@\n-package run.halo.app.event;\n+package run.halo.app.event.post;\n \n import lombok.extern.slf4j.Slf4j;\n import org.springframework.context.event.EventListener;\n\ndiff --git a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n@@ -14,9 +14,10 @@\n import org.springframework.transaction.annotation.Transactional;\n import org.springframework.util.Assert;\n import org.springframework.util.CollectionUtils;\n-import run.halo.app.event.LogEvent;\n-import run.halo.app.event.VisitEvent;\n+import run.halo.app.event.log.LogEvent;\n+import run.halo.app.event.post.VisitEvent;\n import run.halo.app.exception.AlreadyExistsException;\n+import run.halo.app.exception.BadRequestException;\n import run.halo.app.exception.NotFoundException;\n import run.halo.app.exception.ServiceException;\n import run.halo.app.model.dto.CategoryOutputDTO;\n@@ -348,7 +349,8 @@ public void increaseVisit(long visits, Integer postId) {\n         long affectedRows = postRepository.updateVisit(visits, postId);\n \n         if (affectedRows != 1) {\n-            throw new ServiceException(\"Failed to increase visits \" + visits + \" for post with id \" + postId);\n+            log.error(\"Post with id: [{}] may not be found\", postId);\n+            throw new BadRequestException(\"Failed to increase visits \" + visits + \" for post with id \" + postId);\n         }\n     }\n \n@@ -360,7 +362,8 @@ public void increaseLike(long likes, Integer postId) {\n         long affectedRows = postRepository.updateLikes(likes, postId);\n \n         if (affectedRows != 1) {\n-            throw new ServiceException(\"Failed to increase likes \" + likes + \" for post with id \" + postId);\n+            log.error(\"Post with id: [{}] may not be found\", postId);\n+            throw new BadRequestException(\"Failed to increase likes \" + likes + \" for post with id \" + postId);\n         }\n     }\n \n\ndiff --git a/src/main/java/run/halo/app/service/impl/UserServiceImpl.java b/src/main/java/run/halo/app/service/impl/UserServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/UserServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/UserServiceImpl.java\n@@ -8,7 +8,7 @@\n import org.springframework.util.Assert;\n import org.springframework.util.CollectionUtils;\n import run.halo.app.cache.StringCacheStore;\n-import run.halo.app.event.LogEvent;\n+import run.halo.app.event.log.LogEvent;\n import run.halo.app.exception.BadRequestException;\n import run.halo.app.exception.NotFoundException;\n import run.halo.app.model.entity.User;\n\ndiff --git a/src/main/java/run/halo/app/web/controller/admin/api/PostController.java b/src/main/java/run/halo/app/web/controller/admin/api/PostController.java\n--- a/src/main/java/run/halo/app/web/controller/admin/api/PostController.java\n+++ b/src/main/java/run/halo/app/web/controller/admin/api/PostController.java\n@@ -82,6 +82,12 @@ public PostDetailVO getBy(@PathVariable(\"postId\") Integer postId) {\n         return postService.getDetailVoBy(postId);\n     }\n \n+    @PostMapping(\"{postId:\\\\d+}/likes\")\n+    @ApiOperation(\"Likes a post\")\n+    public void like(@PathVariable(\"postId\") Integer postId) {\n+        postService.increaseLike(postId);\n+    }\n+\n     @PostMapping\n     public PostDetailVO createBy(@Valid @RequestBody PostParam postParam) {\n         // Convert to\n\ndiff --git a/src/main/java/run/halo/app/web/controller/content/api/PostController.java b/src/main/java/run/halo/app/web/controller/content/api/PostController.java\n--- a/src/main/java/run/halo/app/web/controller/content/api/PostController.java\n+++ b/src/main/java/run/halo/app/web/controller/content/api/PostController.java\n@@ -92,4 +92,10 @@ public Page<CommentWithParentVO> listComments(@PathVariable(\"postId\") Integer po\n                                                   @SortDefault(sort = \"createTime\", direction = DESC) Sort sort) {\n         return commentService.pageWithParentVoBy(postId, PageRequest.of(page, optionService.getCommentPageSize(), sort));\n     }\n+\n+    @PostMapping(\"{postId:\\\\d+}/likes\")\n+    @ApiOperation(\"Likes a post\")\n+    public void like(@PathVariable(\"postId\") Integer postId) {\n+        postService.increaseLike(postId);\n+    }\n }\n\ndiff --git a/src/main/java/run/halo/app/web/controller/core/InstallController.java b/src/main/java/run/halo/app/web/controller/core/InstallController.java\n--- a/src/main/java/run/halo/app/web/controller/core/InstallController.java\n+++ b/src/main/java/run/halo/app/web/controller/core/InstallController.java\n@@ -10,7 +10,7 @@\n import org.springframework.web.bind.annotation.PostMapping;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.ResponseBody;\n-import run.halo.app.event.LogEvent;\n+import run.halo.app.event.log.LogEvent;\n import run.halo.app.exception.BadRequestException;\n import run.halo.app.model.entity.*;\n import run.halo.app.model.enums.AttachmentType;\n\ndiff --git a/src/test/java/run/halo/app/event/LogEventListenerTest.java b/src/test/java/run/halo/app/event/LogEventListenerTest.java\n--- a/src/test/java/run/halo/app/event/LogEventListenerTest.java\n+++ b/src/test/java/run/halo/app/event/LogEventListenerTest.java\n@@ -3,6 +3,8 @@\n import lombok.extern.slf4j.Slf4j;\n import org.junit.Test;\n import org.springframework.context.ApplicationListener;\n+import run.halo.app.event.log.LogEvent;\n+import run.halo.app.event.log.LogEventListener;\n import run.halo.app.utils.ReflectionUtils;\n \n import java.lang.reflect.ParameterizedType;",
    "output": "Complete post likes feature"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/event/ApplicationEventQueuePublisher.java b/src/main/java/run/halo/app/event/ApplicationEventQueuePublisher.java\n--- a/src/main/java/run/halo/app/event/ApplicationEventQueuePublisher.java\n+++ b/src/main/java/run/halo/app/event/ApplicationEventQueuePublisher.java\n@@ -1,85 +0,0 @@\n-package run.halo.app.event;\n-\n-import lombok.extern.slf4j.Slf4j;\n-import org.springframework.context.ApplicationEvent;\n-import org.springframework.context.ApplicationListener;\n-\n-import javax.annotation.PreDestroy;\n-import java.util.EventListener;\n-import java.util.List;\n-import java.util.concurrent.BlockingQueue;\n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.Executors;\n-import java.util.concurrent.LinkedBlockingQueue;\n-\n-/**\n- * Event queue dispatcher.\n- *\n- * @author johnniang\n- * @date 19-4-20\n- */\n-@Slf4j\n-@Deprecated\n-public class ApplicationEventQueuePublisher {\n-\n-    private final BlockingQueue<Object> events = new LinkedBlockingQueue<>();\n-\n-    private final ApplicationListenerManager listenerManager;\n-\n-    private final ExecutorService executorService;\n-\n-    public ApplicationEventQueuePublisher(ApplicationListenerManager listenerManager) {\n-        this.listenerManager = listenerManager;\n-        this.executorService = Executors.newSingleThreadExecutor();\n-\n-        executorService.execute(new EventQueueConsumer());\n-    }\n-\n-    public void publishEvent(Object event) {\n-        try {\n-            events.put(event);\n-        } catch (InterruptedException e) {\n-            log.warn(\"Failed to put event to the queue\", e);\n-            // Ignore this error\n-        }\n-    }\n-\n-    @PreDestroy\n-    protected void destroy() {\n-        log.info(\"Shutting down all event queue consumer\");\n-        this.executorService.shutdownNow();\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    private class EventQueueConsumer implements Runnable {\n-\n-        @Override\n-        public void run() {\n-\n-            while (!Thread.currentThread().isInterrupted()) {\n-                try {\n-                    // Take an event\n-                    Object event = events.take();\n-\n-                    // Get listeners\n-                    List<EventListener> listeners = listenerManager.getListeners(event);\n-\n-                    // Handle the event\n-                    listeners.forEach(listener -> {\n-                        if (listener instanceof ApplicationListener && event instanceof ApplicationEvent) {\n-                            ApplicationEvent applicationEvent = (ApplicationEvent) event;\n-                            // Fire event\n-                            ((ApplicationListener) listener).onApplicationEvent(applicationEvent);\n-                        }\n-                    });\n-\n-                    log.info(\"Event queue consumer has been shut down\");\n-                } catch (InterruptedException e) {\n-                    log.warn(\"Failed to take event\", e);\n-                } catch (Exception e) {\n-                    log.error(\"Failed to handle event\", e);\n-                }\n-            }\n-        }\n-    }\n-}\n\ndiff --git a/src/main/java/run/halo/app/event/ApplicationListenerManager.java b/src/main/java/run/halo/app/event/ApplicationListenerManager.java\n--- a/src/main/java/run/halo/app/event/ApplicationListenerManager.java\n+++ b/src/main/java/run/halo/app/event/ApplicationListenerManager.java\n@@ -1,84 +0,0 @@\n-package run.halo.app.event;\n-\n-import cn.hutool.core.lang.Assert;\n-import lombok.extern.slf4j.Slf4j;\n-import org.springframework.context.ApplicationContext;\n-import org.springframework.context.ApplicationListener;\n-import org.springframework.lang.NonNull;\n-import org.springframework.lang.Nullable;\n-import run.halo.app.utils.ReflectionUtils;\n-\n-import java.lang.reflect.ParameterizedType;\n-import java.lang.reflect.Type;\n-import java.util.*;\n-import java.util.concurrent.ConcurrentHashMap;\n-\n-/**\n- * Application listener manager.\n- *\n- * @author johnniang\n- * @date 19-4-21\n- */\n-@Slf4j\n-@Deprecated\n-public class ApplicationListenerManager {\n-\n-    /**\n-     * Listener Map.\n-     */\n-    private final Map<String, List<EventListener>> listenerMap = new ConcurrentHashMap<>();\n-\n-    public ApplicationListenerManager(ApplicationContext applicationContext) {\n-        // TODO Need to refactor\n-        // Register all listener on starting up\n-        applicationContext.getBeansOfType(ApplicationListener.class).values().forEach(this::register);\n-\n-        log.debug(\"Initialized event listeners\");\n-    }\n-\n-    public List<EventListener> getListeners(@Nullable Object event) {\n-        if (event == null) {\n-            return Collections.emptyList();\n-        }\n-\n-        // Get listeners\n-        List<EventListener> listeners = listenerMap.get(event.getClass().getTypeName());\n-        // Clone the listeners\n-        return listeners == null ? Collections.emptyList() : new LinkedList<>(listeners);\n-    }\n-\n-    public synchronized void register(@NonNull ApplicationListener<?> listener) {\n-        // Get actual generic type\n-        Type actualType = resolveActualGenericType(listener);\n-\n-        if (actualType == null) {\n-            return;\n-        }\n-\n-        // Add this listener\n-        listenerMap.computeIfAbsent(actualType.getTypeName(), (key) -> new LinkedList<>()).add(listener);\n-    }\n-\n-    public synchronized void unRegister(@NonNull ApplicationListener<?> listener) {\n-        // Get actual generic type\n-        Type actualType = resolveActualGenericType(listener);\n-\n-        if (actualType == null) {\n-            return;\n-        }\n-\n-        // Remove it from listener map\n-        listenerMap.getOrDefault(actualType.getTypeName(), Collections.emptyList()).remove(listener);\n-    }\n-\n-    @Nullable\n-    private Type resolveActualGenericType(@NonNull ApplicationListener<?> listener) {\n-        Assert.notNull(listener, \"Application listener must not be null\");\n-\n-        log.debug(\"Attempting to resolve type of Application listener: [{}]\", listener);\n-\n-        ParameterizedType parameterizedType = ReflectionUtils.getParameterizedType(ApplicationListener.class, ((ApplicationListener) listener).getClass());\n-\n-        return parameterizedType == null ? null : parameterizedType.getActualTypeArguments()[0];\n-    }\n-}\n\ndiff --git a/src/main/java/run/halo/app/web/controller/content/ContentArchiveController.java b/src/main/java/run/halo/app/web/controller/content/ContentArchiveController.java\n--- a/src/main/java/run/halo/app/web/controller/content/ContentArchiveController.java\n+++ b/src/main/java/run/halo/app/web/controller/content/ContentArchiveController.java\n@@ -126,7 +126,6 @@ public String post(@PathVariable(\"url\") String url,\n         model.addAttribute(\"comments\", comments);\n         model.addAttribute(\"pageRainbow\", pageRainbow);\n \n-        // Log it\n         return themeService.render(\"post\");\n     }\n }",
    "output": "Remove deprecated classes"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/enums/LogType.java b/src/main/java/run/halo/app/model/enums/LogType.java\n--- a/src/main/java/run/halo/app/model/enums/LogType.java\n+++ b/src/main/java/run/halo/app/model/enums/LogType.java\n@@ -7,13 +7,15 @@\n  */\n public enum LogType implements ValueEnum<Integer> {\n \n-    POST_PUBLISHED(0),\n-    POST_EDITED(1),\n-    POST_DELETED(5),\n-    LOGGED_IN(2),\n-    LOGGED_OUT(3),\n-    LOGIN_FAILED(4),\n-    ;\n+    BLOG_INITIALIZED(0),\n+    POST_PUBLISHED(5),\n+    POST_EDITED(15),\n+    POST_DELETED(20),\n+    LOGGED_IN(25),\n+    LOGGED_OUT(30),\n+    LOGIN_FAILED(35),\n+    PASSWORD_UPDATED(40),\n+    PROFILE_UPDATED(45);\n \n     private final Integer value;\n \n\ndiff --git a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n@@ -413,7 +413,12 @@ public Post removeById(Integer postId) {\n \n         log.debug(\"Removed post categories: [{}]\", postCategories);\n \n-        return super.removeById(postId);\n+        Post deletedPost = super.removeById(postId);\n+\n+        // Log it\n+        eventPublisher.publishEvent(new LogEvent(this, postId.toString(), LogType.POST_DELETED, deletedPost.getTitle()));\n+\n+        return deletedPost;\n     }\n \n     @Override\n\ndiff --git a/src/main/java/run/halo/app/service/impl/UserServiceImpl.java b/src/main/java/run/halo/app/service/impl/UserServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/UserServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/UserServiceImpl.java\n@@ -1,9 +1,18 @@\n package run.halo.app.service.impl;\n \n+import cn.hutool.core.lang.Validator;\n+import cn.hutool.crypto.digest.BCrypt;\n+import org.springframework.context.ApplicationEventPublisher;\n+import org.springframework.lang.NonNull;\n+import org.springframework.stereotype.Service;\n+import org.springframework.util.Assert;\n+import org.springframework.util.CollectionUtils;\n import run.halo.app.cache.StringCacheStore;\n+import run.halo.app.event.LogEvent;\n import run.halo.app.exception.BadRequestException;\n import run.halo.app.exception.NotFoundException;\n import run.halo.app.model.entity.User;\n+import run.halo.app.model.enums.LogType;\n import run.halo.app.model.params.UserParam;\n import run.halo.app.repository.UserRepository;\n import run.halo.app.security.context.SecurityContextHolder;\n@@ -13,18 +22,6 @@\n import run.halo.app.service.base.AbstractCrudService;\n import run.halo.app.utils.DateUtils;\n import run.halo.app.utils.HaloUtils;\n-import cn.hutool.core.lang.Validator;\n-import cn.hutool.crypto.digest.BCrypt;\n-import org.springframework.lang.NonNull;\n-import org.springframework.stereotype.Service;\n-import org.springframework.util.Assert;\n-import org.springframework.util.CollectionUtils;\n-import run.halo.app.exception.BadRequestException;\n-import run.halo.app.exception.NotFoundException;\n-import run.halo.app.repository.UserRepository;\n-import run.halo.app.security.context.SecurityContextHolder;\n-import run.halo.app.security.support.UserDetail;\n-import run.halo.app.service.base.AbstractCrudService;\n \n import javax.servlet.http.HttpSession;\n import java.util.Date;\n@@ -45,11 +42,15 @@ public class UserServiceImpl extends AbstractCrudService<User, Integer> implemen\n \n     private final StringCacheStore stringCacheStore;\n \n+    private final ApplicationEventPublisher eventPublisher;\n+\n     public UserServiceImpl(UserRepository userRepository,\n-                           StringCacheStore stringCacheStore) {\n+                           StringCacheStore stringCacheStore,\n+                           ApplicationEventPublisher eventPublisher) {\n         super(userRepository);\n         this.userRepository = userRepository;\n         this.stringCacheStore = stringCacheStore;\n+        this.eventPublisher = eventPublisher;\n     }\n \n     @Override\n@@ -142,6 +143,9 @@ public User login(String key, String password, HttpSession httpSession) {\n \n             String errorMessage = String.format(\"Username or password incorrect, you%shave %s\", remainder <= 0 ? \"\" : \" still \", HaloUtils.pluralize(remainder, \"chance\", \"chances\"));\n \n+            // Lot it\n+            eventPublisher.publishEvent(new LogEvent(this, key, LogType.LOGIN_FAILED, password));\n+\n             throw new BadRequestException(errorMessage);\n         }\n \n@@ -151,6 +155,9 @@ public User login(String key, String password, HttpSession httpSession) {\n         // Set session\n         httpSession.setAttribute(AdminAuthenticationFilter.ADMIN_SESSION_KEY, new UserDetail(user));\n \n+        // Log it\n+        eventPublisher.publishEvent(new LogEvent(this, user.getId().toString(), LogType.LOGGED_IN, user.getUsername()));\n+\n         return user;\n     }\n \n@@ -176,7 +183,12 @@ public User updatePassword(String oldPassword, String newPassword, Integer userI\n         setPassword(newPassword, user);\n \n         // Update this user\n-        return update(user);\n+        User updatedUser = update(user);\n+\n+        // Log it\n+        eventPublisher.publishEvent(new LogEvent(this, updatedUser.getId().toString(), LogType.PASSWORD_UPDATED, oldPassword));\n+\n+        return updatedUser;\n     }\n \n     @Override\n@@ -191,6 +203,16 @@ public User createBy(UserParam userParam, String password) {\n         return create(user);\n     }\n \n+    @Override\n+    public User update(User user) {\n+        User updatedUser = super.update(user);\n+\n+        // Log it\n+        eventPublisher.publishEvent(new LogEvent(this, user.getId().toString(), LogType.PROFILE_UPDATED, user.getUsername()));\n+\n+        return updatedUser;\n+    }\n+\n     private void setPassword(@NonNull String plainPassword, @NonNull User user) {\n         Assert.hasText(plainPassword, \"Plain password must not be blank\");\n         Assert.notNull(user, \"User must not be null\");\n\ndiff --git a/src/main/java/run/halo/app/web/controller/core/InstallController.java b/src/main/java/run/halo/app/web/controller/core/InstallController.java\n--- a/src/main/java/run/halo/app/web/controller/core/InstallController.java\n+++ b/src/main/java/run/halo/app/web/controller/core/InstallController.java\n@@ -3,15 +3,18 @@\n import cn.hutool.core.util.StrUtil;\n import freemarker.template.Configuration;\n import lombok.extern.slf4j.Slf4j;\n+import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.stereotype.Controller;\n import org.springframework.ui.Model;\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.PostMapping;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.ResponseBody;\n+import run.halo.app.event.LogEvent;\n import run.halo.app.exception.BadRequestException;\n import run.halo.app.model.entity.*;\n import run.halo.app.model.enums.AttachmentType;\n+import run.halo.app.model.enums.LogType;\n import run.halo.app.model.params.InstallParam;\n import run.halo.app.model.properties.*;\n import run.halo.app.model.support.BaseResponse;\n@@ -48,20 +51,24 @@ public class InstallController {\n \n     private final Configuration configuration;\n \n+    private final ApplicationEventPublisher eventPublisher;\n+\n     public InstallController(UserService userService,\n                              CategoryService categoryService,\n                              PostService postService,\n                              CommentService commentService,\n                              OptionService optionService,\n                              MenuService menuService,\n-                             Configuration configuration) {\n+                             Configuration configuration,\n+                             ApplicationEventPublisher eventPublisher) {\n         this.userService = userService;\n         this.categoryService = categoryService;\n         this.postService = postService;\n         this.commentService = commentService;\n         this.optionService = optionService;\n         this.menuService = menuService;\n         this.configuration = configuration;\n+        this.eventPublisher = eventPublisher;\n     }\n \n     /**\n@@ -92,6 +99,7 @@ public BaseResponse<?> installBlog(@Valid InstallParam installParam) {\n         boolean isInstalled = Boolean.parseBoolean(optionService.getByProperty(PrimaryProperties.IS_INSTALLED).orElse(Boolean.FALSE.toString()));\n \n         if (isInstalled) {\n+            // TODO i18n\n             throw new BadRequestException(\"该博客已初始化，不能再次安装！\");\n         }\n \n@@ -115,6 +123,12 @@ public BaseResponse<?> installBlog(@Valid InstallParam installParam) {\n \n         // TODO Handle option cache\n \n+        // TODO i18n\n+        eventPublisher.publishEvent(\n+                new LogEvent(this, user.getId().toString(), LogType.BLOG_INITIALIZED, \"博客已成功初始化\")\n+        );\n+\n+        // TODO i18n\n         return BaseResponse.ok(\"安装完成！\");\n     }\n \n@@ -127,6 +141,7 @@ private void createDefaultMenu() {\n         menuService.create(menuIndex);\n \n         Menu menuArchive = new Menu();\n+        // TODO i18n\n         menuArchive.setName(\"归档\");\n         menuArchive.setUrl(\"/archives\");\n         menuArchive.setSort(2);\n@@ -148,7 +163,6 @@ private Category createDefaultCategory() {\n         Category category = new Category();\n \n         // TODO Multi level category\n-\n         category.setName(\"未分类\");\n         category.setSlugName(\"default\");\n         category.setDescription(\"未分类\");",
    "output": "Complete log creation"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/event/ApplicationEventQueuePublisher.java b/src/main/java/run/halo/app/event/ApplicationEventQueuePublisher.java\n--- a/src/main/java/run/halo/app/event/ApplicationEventQueuePublisher.java\n+++ b/src/main/java/run/halo/app/event/ApplicationEventQueuePublisher.java\n@@ -3,7 +3,6 @@\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.context.ApplicationEvent;\n import org.springframework.context.ApplicationListener;\n-import org.springframework.stereotype.Component;\n \n import javax.annotation.PreDestroy;\n import java.util.EventListener;\n@@ -20,7 +19,7 @@\n  * @date 19-4-20\n  */\n @Slf4j\n-@Component\n+@Deprecated\n public class ApplicationEventQueuePublisher {\n \n     private final BlockingQueue<Object> events = new LinkedBlockingQueue<>();\n\ndiff --git a/src/main/java/run/halo/app/event/ApplicationListenerManager.java b/src/main/java/run/halo/app/event/ApplicationListenerManager.java\n--- a/src/main/java/run/halo/app/event/ApplicationListenerManager.java\n+++ b/src/main/java/run/halo/app/event/ApplicationListenerManager.java\n@@ -6,7 +6,6 @@\n import org.springframework.context.ApplicationListener;\n import org.springframework.lang.NonNull;\n import org.springframework.lang.Nullable;\n-import org.springframework.stereotype.Component;\n import run.halo.app.utils.ReflectionUtils;\n \n import java.lang.reflect.ParameterizedType;\n@@ -21,7 +20,7 @@\n  * @date 19-4-21\n  */\n @Slf4j\n-@Component\n+@Deprecated\n public class ApplicationListenerManager {\n \n     /**\n\ndiff --git a/src/main/java/run/halo/app/event/LogEventListener.java b/src/main/java/run/halo/app/event/LogEventListener.java\n--- a/src/main/java/run/halo/app/event/LogEventListener.java\n+++ b/src/main/java/run/halo/app/event/LogEventListener.java\n@@ -1,6 +1,7 @@\n package run.halo.app.event;\n \n-import org.springframework.context.ApplicationListener;\n+import org.springframework.context.event.EventListener;\n+import org.springframework.scheduling.annotation.Async;\n import org.springframework.stereotype.Component;\n import run.halo.app.model.entity.Log;\n import run.halo.app.service.LogService;\n@@ -12,15 +13,16 @@\n  * @date 19-4-21\n  */\n @Component\n-public class LogEventListener implements ApplicationListener<LogEvent> {\n+public class LogEventListener {\n \n     private final LogService logService;\n \n     public LogEventListener(LogService logService) {\n         this.logService = logService;\n     }\n \n-    @Override\n+    @EventListener\n+    @Async\n     public void onApplicationEvent(LogEvent event) {\n         // Convert to log\n         Log logToCreate = event.getLogParam().convertTo();\n\ndiff --git a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n@@ -2,6 +2,7 @@\n \n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.lang3.StringUtils;\n+import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.PageRequest;\n import org.springframework.data.domain.Pageable;\n@@ -13,7 +14,6 @@\n import org.springframework.transaction.annotation.Transactional;\n import org.springframework.util.Assert;\n import org.springframework.util.CollectionUtils;\n-import run.halo.app.event.ApplicationEventQueuePublisher;\n import run.halo.app.event.LogEvent;\n import run.halo.app.exception.AlreadyExistsException;\n import run.halo.app.exception.NotFoundException;\n@@ -69,23 +69,23 @@ public class PostServiceImpl extends AbstractCrudService<Post, Integer> implemen\n \n     private final CommentService commentService;\n \n-    private final ApplicationEventQueuePublisher eventQueuePublisher;\n+    private final ApplicationEventPublisher eventPublisher;\n \n     public PostServiceImpl(PostRepository postRepository,\n                            TagService tagService,\n                            CategoryService categoryService,\n                            PostTagService postTagService,\n                            PostCategoryService postCategoryService,\n                            CommentService commentService,\n-                           ApplicationEventQueuePublisher eventQueuePublisher) {\n+                           ApplicationEventPublisher eventPublisher) {\n         super(postRepository);\n         this.postRepository = postRepository;\n         this.tagService = tagService;\n         this.categoryService = categoryService;\n         this.postTagService = postTagService;\n         this.postCategoryService = postCategoryService;\n         this.commentService = commentService;\n-        this.eventQueuePublisher = eventQueuePublisher;\n+        this.eventPublisher = eventPublisher;\n     }\n \n     @Override\n@@ -227,7 +227,7 @@ public Post create(Post post) {\n \n         // Log the creation\n         LogEvent logEvent = new LogEvent(this, createdPost.getId().toString(), LogType.POST_PUBLISHED, createdPost.getTitle());\n-        eventQueuePublisher.publishEvent(logEvent);\n+        eventPublisher.publishEvent(logEvent);\n \n         return createdPost;\n     }\n@@ -238,7 +238,7 @@ public Post update(Post post) {\n \n         // Log the creation\n         LogEvent logEvent = new LogEvent(this, updatedPost.getId().toString(), LogType.POST_EDITED, updatedPost.getTitle());\n-        eventQueuePublisher.publishEvent(logEvent);\n+        eventPublisher.publishEvent(logEvent);\n \n         return updatedPost;\n     }",
    "output": "Deprecate event queue publisher and listener manager"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/params/AttachmentQuery.java b/src/main/java/run/halo/app/model/params/AttachmentQuery.java\n--- a/src/main/java/run/halo/app/model/params/AttachmentQuery.java\n+++ b/src/main/java/run/halo/app/model/params/AttachmentQuery.java\n@@ -17,4 +17,6 @@ public class AttachmentQuery {\n     private String keyword;\n \n     private String mediaType;\n+\n+    private String attachmentType;\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java b/src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java\n@@ -13,8 +13,10 @@\n import run.halo.app.model.dto.AttachmentOutputDTO;\n import run.halo.app.model.entity.Attachment;\n import run.halo.app.model.enums.AttachmentType;\n+import run.halo.app.model.enums.converter.AttachmentTypeConverter;\n import run.halo.app.model.params.AttachmentQuery;\n import run.halo.app.model.properties.AttachmentProperties;\n+import run.halo.app.model.properties.PropertyEnum;\n import run.halo.app.model.support.UploadResult;\n import run.halo.app.repository.AttachmentRepository;\n import run.halo.app.service.AttachmentService;\n@@ -73,6 +75,10 @@ private Specification<Attachment> buildSpecByQuery(@NonNull AttachmentQuery atta\n                 predicates.add(criteriaBuilder.equal(root.get(\"mediaType\"), attachmentQuery.getMediaType()));\n             }\n \n+            if(attachmentQuery.getAttachmentType() != null){\n+                predicates.add(criteriaBuilder.equal(root.get(\"type\"), PropertyEnum.convertToEnum(attachmentQuery.getAttachmentType(),AttachmentType.class)));\n+            }\n+\n             if (attachmentQuery.getKeyword() != null) {\n \n                 String likeCondition = String.format(\"%%%s%%\", StringUtils.strip(attachmentQuery.getKeyword()));",
    "output": "Support attachment query by type."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/web/controller/content/ContentIndexController.java b/src/main/java/run/halo/app/web/controller/content/ContentIndexController.java\n--- a/src/main/java/run/halo/app/web/controller/content/ContentIndexController.java\n+++ b/src/main/java/run/halo/app/web/controller/content/ContentIndexController.java\n@@ -73,7 +73,7 @@ public String index(Model model,\n                         }) Sort sort) {\n         log.debug(\"Requested index page, sort info: [{}]\", sort);\n         int pageSize = optionService.getPostPageSize();\n-        Pageable pageable = PageRequest.of(page - 1, pageSize, sort);\n+        Pageable pageable = PageRequest.of(page >= 1 ? page - 1 : page, pageSize, sort);\n \n         Page<PostListVO> posts = postService.pageListVoBy(PostStatus.PUBLISHED, pageable);\n         int[] rainbow = PageUtil.rainbow(page, posts.getTotalPages(), 3);",
    "output": "Update anatole theme."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/freemarker/tag/PostTagDirective.java b/src/main/java/run/halo/app/model/freemarker/tag/PostTagDirective.java\n--- a/src/main/java/run/halo/app/model/freemarker/tag/PostTagDirective.java\n+++ b/src/main/java/run/halo/app/model/freemarker/tag/PostTagDirective.java\n@@ -33,6 +33,12 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars, Templ\n                 case \"count\":\n                     env.setVariable(\"count\", builder.build().wrap(postService.count()));\n                     break;\n+                case \"archiveYear\":\n+                    env.setVariable(\"archives\",builder.build().wrap(postService.listYearArchives()));\n+                    break;\n+                case \"archiveMonth\":\n+                    env.setVariable(\"archives\",builder.build().wrap(postService.listMonthArchives()));\n+                    break;\n                 default:\n                     break;\n             }\n\ndiff --git a/src/main/java/run/halo/app/web/controller/content/ContentArchiveController.java b/src/main/java/run/halo/app/web/controller/content/ContentArchiveController.java\n--- a/src/main/java/run/halo/app/web/controller/content/ContentArchiveController.java\n+++ b/src/main/java/run/halo/app/web/controller/content/ContentArchiveController.java\n@@ -4,6 +4,7 @@\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.PageRequest;\n+import org.springframework.data.domain.Pageable;\n import org.springframework.data.domain.Sort;\n import org.springframework.data.web.SortDefault;\n import org.springframework.stereotype.Controller;\n@@ -17,6 +18,7 @@\n import run.halo.app.model.entity.Tag;\n import run.halo.app.model.enums.PostStatus;\n import run.halo.app.model.vo.CommentVO;\n+import run.halo.app.model.vo.PostListVO;\n import run.halo.app.service.*;\n \n import java.util.List;\n@@ -60,6 +62,38 @@ public ContentArchiveController(PostService postService,\n         this.optionService = optionService;\n     }\n \n+    /**\n+     * Render post archives page.\n+     *\n+     * @param model model\n+     * @return template path : theme/{theme}/archives.ftl\n+     */\n+    @GetMapping\n+    public String archives(Model model) {\n+        return this.archives(model, 1, Sort.by(DESC, \"createTime\"));\n+    }\n+\n+    /**\n+     * Render post archives page.\n+     *\n+     * @param model model\n+     * @return template path : theme/{theme}/archives.ftl\n+     */\n+    @GetMapping(value = \"page/{page}\")\n+    public String archives(Model model,\n+                           @PathVariable(value = \"page\") Integer page,\n+                           @SortDefault(sort = \"createTime\", direction = DESC) Sort sort) {\n+        Pageable pageable = PageRequest.of(page - 1, optionService.getPostPageSize(), sort);\n+\n+        Page<PostListVO> posts = postService.pageListVoBy(PostStatus.PUBLISHED, pageable);\n+        int[] pageRainbow = PageUtil.rainbow(page, posts.getTotalPages(), 3);\n+\n+        model.addAttribute(\"is_archives\", true);\n+        model.addAttribute(\"pageRainbow\", pageRainbow);\n+        model.addAttribute(\"posts\", posts);\n+        return themeService.render(\"archives\");\n+    }\n+\n     /**\n      * Render post page.\n      *\n\ndiff --git a/src/main/java/run/halo/app/web/controller/content/ContentIndexController.java b/src/main/java/run/halo/app/web/controller/content/ContentIndexController.java\n--- a/src/main/java/run/halo/app/web/controller/content/ContentIndexController.java\n+++ b/src/main/java/run/halo/app/web/controller/content/ContentIndexController.java\n@@ -74,8 +74,10 @@ public String index(Model model,\n         log.debug(\"Requested index page, sort info: [{}]\", sort);\n         int pageSize = optionService.getPostPageSize();\n         Pageable pageable = PageRequest.of(page - 1, pageSize, sort);\n+\n         Page<PostListVO> posts = postService.pageListVoBy(PostStatus.PUBLISHED, pageable);\n         int[] rainbow = PageUtil.rainbow(page, posts.getTotalPages(), 3);\n+\n         model.addAttribute(\"is_index\", true);\n         model.addAttribute(\"posts\", posts);\n         model.addAttribute(\"rainbow\", rainbow);",
    "output": "Complete archives page controller."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/SwaggerConfiguration.java b/src/main/java/run/halo/app/config/SwaggerConfiguration.java\n--- a/src/main/java/run/halo/app/config/SwaggerConfiguration.java\n+++ b/src/main/java/run/halo/app/config/SwaggerConfiguration.java\n@@ -63,8 +63,8 @@ public SwaggerConfiguration(HaloProperties haloProperties) {\n     public Docket haloDefaultApi() {\n         log.debug(\"Doc disabled: [{}]\", haloProperties.isDocDisabled());\n         // TODO Build with different security configuration\n-        return buildApiDocket(\"run.halo.app.portal.api\",\n-                \"run.halo.app.web.controller.portal.api\",\n+        return buildApiDocket(\"run.halo.app.content.api\",\n+                \"run.halo.app.web.controller.content.api\",\n                 \"/api/**\")\n                 .enable(!haloProperties.isDocDisabled());\n     }\n\ndiff --git a/src/main/java/run/halo/app/web/controller/content/api/ArchiveController.java b/src/main/java/run/halo/app/web/controller/content/api/ArchiveController.java\n--- a/src/main/java/run/halo/app/web/controller/content/api/ArchiveController.java\n+++ b/src/main/java/run/halo/app/web/controller/content/api/ArchiveController.java\n@@ -1,4 +1,4 @@\n-package run.halo.app.web.controller.portal.api;\n+package run.halo.app.web.controller.content.api;\n \n import run.halo.app.model.vo.ArchiveMonthVO;\n import run.halo.app.model.vo.ArchiveYearVO;\n\ndiff --git a/src/main/java/run/halo/app/web/controller/content/api/CommentController.java b/src/main/java/run/halo/app/web/controller/content/api/CommentController.java\n--- a/src/main/java/run/halo/app/web/controller/content/api/CommentController.java\n+++ b/src/main/java/run/halo/app/web/controller/content/api/CommentController.java\n@@ -1,4 +1,4 @@\n-package run.halo.app.web.controller.portal.api;\n+package run.halo.app.web.controller.content.api;\n \n import run.halo.app.model.dto.CommentOutputDTO;\n import run.halo.app.model.entity.User;\n\ndiff --git a/src/main/java/run/halo/app/web/controller/content/api/LinkController.java b/src/main/java/run/halo/app/web/controller/content/api/LinkController.java\n--- a/src/main/java/run/halo/app/web/controller/content/api/LinkController.java\n+++ b/src/main/java/run/halo/app/web/controller/content/api/LinkController.java\n@@ -1,4 +1,4 @@\n-package run.halo.app.web.controller.portal.api;\n+package run.halo.app.web.controller.content.api;\n \n import run.halo.app.model.vo.LinkTeamVO;\n import run.halo.app.service.LinkService;\n\ndiff --git a/src/main/java/run/halo/app/web/controller/content/api/MenuController.java b/src/main/java/run/halo/app/web/controller/content/api/MenuController.java\n--- a/src/main/java/run/halo/app/web/controller/content/api/MenuController.java\n+++ b/src/main/java/run/halo/app/web/controller/content/api/MenuController.java\n@@ -1,4 +1,4 @@\n-package run.halo.app.web.controller.portal.api;\n+package run.halo.app.web.controller.content.api;\n \n import run.halo.app.model.dto.MenuOutputDTO;\n import run.halo.app.service.MenuService;\n\ndiff --git a/src/main/java/run/halo/app/web/controller/content/api/OptionController.java b/src/main/java/run/halo/app/web/controller/content/api/OptionController.java\n--- a/src/main/java/run/halo/app/web/controller/content/api/OptionController.java\n+++ b/src/main/java/run/halo/app/web/controller/content/api/OptionController.java\n@@ -1,4 +1,4 @@\n-package run.halo.app.web.controller.portal.api;\n+package run.halo.app.web.controller.content.api;\n \n import run.halo.app.model.dto.OptionOutputDTO;\n import run.halo.app.model.support.BaseResponse;\n\ndiff --git a/src/main/java/run/halo/app/web/controller/content/api/PostController.java b/src/main/java/run/halo/app/web/controller/content/api/PostController.java\n--- a/src/main/java/run/halo/app/web/controller/content/api/PostController.java\n+++ b/src/main/java/run/halo/app/web/controller/content/api/PostController.java\n@@ -1,4 +1,4 @@\n-package run.halo.app.web.controller.portal.api;\n+package run.halo.app.web.controller.content.api;\n \n import run.halo.app.model.dto.post.PostDetailOutputDTO;\n import run.halo.app.model.dto.post.PostSimpleOutputDTO;\n\ndiff --git a/src/main/java/run/halo/app/web/controller/content/api/TagController.java b/src/main/java/run/halo/app/web/controller/content/api/TagController.java\n--- a/src/main/java/run/halo/app/web/controller/content/api/TagController.java\n+++ b/src/main/java/run/halo/app/web/controller/content/api/TagController.java\n@@ -1,4 +1,4 @@\n-package run.halo.app.web.controller.portal.api;\n+package run.halo.app.web.controller.content.api;\n \n import run.halo.app.model.dto.TagOutputDTO;\n import run.halo.app.model.dto.post.PostSimpleOutputDTO;\n\ndiff --git a/src/main/java/run/halo/app/web/controller/content/api/UserController.java b/src/main/java/run/halo/app/web/controller/content/api/UserController.java\n--- a/src/main/java/run/halo/app/web/controller/content/api/UserController.java\n+++ b/src/main/java/run/halo/app/web/controller/content/api/UserController.java\n@@ -1,4 +1,4 @@\n-package run.halo.app.web.controller.portal.api;\n+package run.halo.app.web.controller.content.api;\n \n import run.halo.app.model.dto.UserOutputDTO;\n import run.halo.app.service.UserService;",
    "output": "Change portal.api to content.api."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/PostService.java b/src/main/java/run/halo/app/service/PostService.java\n--- a/src/main/java/run/halo/app/service/PostService.java\n+++ b/src/main/java/run/halo/app/service/PostService.java\n@@ -77,6 +77,15 @@ public interface PostService extends CrudService<Post, Integer> {\n     @NonNull\n     Page<Post> pageBy(@NonNull PostQuery postQuery, @NonNull Pageable pageable);\n \n+    /**\n+     * Pages post by keyword\n+     *\n+     * @param keyword  keyword\n+     * @param pageable pageable\n+     * @return a page of post\n+     */\n+    @NonNull\n+    Page<Post> pageBy(@NonNull String keyword, @NonNull Pageable pageable);\n \n     /**\n      * Lists simple output dto by status.\n\ndiff --git a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n@@ -117,6 +117,18 @@ public Page<Post> pageBy(PostQuery postQuery, Pageable pageable) {\n         return postRepository.findAll(buildSpecByQuery(postQuery), pageable);\n     }\n \n+    @Override\n+    public Page<Post> pageBy(String keyword, Pageable pageable) {\n+        Assert.notNull(keyword, \"keyword must not be null\");\n+        Assert.notNull(pageable, \"Page info must not be null\");\n+\n+        PostQuery postQuery = new PostQuery();\n+        postQuery.setKeyword(keyword);\n+\n+        // Build specification and find all\n+        return postRepository.findAll(buildSpecByQuery(postQuery), pageable);\n+    }\n+\n     /**\n      * Build specification by post query.\n      *\n\ndiff --git a/src/main/java/run/halo/app/web/controller/content/ContentSearchController.java b/src/main/java/run/halo/app/web/controller/content/ContentSearchController.java\n--- a/src/main/java/run/halo/app/web/controller/content/ContentSearchController.java\n+++ b/src/main/java/run/halo/app/web/controller/content/ContentSearchController.java\n@@ -0,0 +1,83 @@\n+package run.halo.app.web.controller.content;\n+\n+import cn.hutool.core.util.PageUtil;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.PageRequest;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.domain.Sort;\n+import org.springframework.data.web.SortDefault;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.util.HtmlUtils;\n+import run.halo.app.model.entity.Post;\n+import run.halo.app.model.vo.PostListVO;\n+import run.halo.app.service.OptionService;\n+import run.halo.app.service.PostService;\n+import run.halo.app.service.ThemeService;\n+\n+import static org.springframework.data.domain.Sort.Direction.DESC;\n+\n+/**\n+ * Search Controller\n+ *\n+ * @author : RYAN0UP\n+ * @date : 2019-04-21\n+ */\n+@Controller\n+@RequestMapping(value = \"/search\")\n+public class ContentSearchController {\n+\n+    private final PostService postService;\n+\n+    private final OptionService optionService;\n+\n+    private final ThemeService themeService;\n+\n+    public ContentSearchController(PostService postService, OptionService optionService, ThemeService themeService) {\n+        this.postService = postService;\n+        this.optionService = optionService;\n+        this.themeService = themeService;\n+    }\n+\n+    /**\n+     * Render post search page.\n+     *\n+     * @param model   model\n+     * @param keyword keyword\n+     * @return template path : themes/{theme}/search\n+     */\n+    @GetMapping\n+    public String search(Model model,\n+                         @RequestParam(value = \"keyword\") String keyword) {\n+        return this.search(model, HtmlUtils.htmlEscape(keyword), 1, Sort.by(DESC, \"createTime\"));\n+    }\n+\n+    /**\n+     * Render post search page.\n+     *\n+     * @param model   model\n+     * @param keyword keyword\n+     * @return template path :themes/{theme}/search\n+     */\n+    @GetMapping(value = \"page/{page}\")\n+    public String search(Model model,\n+                         @RequestParam(value = \"keyword\") String keyword,\n+                         @PathVariable(value = \"page\") Integer page,\n+                         @SortDefault(sort = \"createTime\", direction = DESC) Sort sort) {\n+        final Pageable pageable = PageRequest.of(page - 1, optionService.getPostPageSize(), sort);\n+        final Page<Post> posts = postService.pageBy(keyword, pageable);\n+\n+        final Page<PostListVO> postPage = postService.convertToListVo(posts);\n+\n+        final int[] rainbow = PageUtil.rainbow(page, postPage.getTotalPages(), 3);\n+        model.addAttribute(\"is_search\", true);\n+        model.addAttribute(\"keyword\", keyword);\n+        model.addAttribute(\"posts\", postPage);\n+        model.addAttribute(\"rainbow\", rainbow);\n+        return themeService.render(\"search\");\n+    }\n+}",
    "output": "Complete search controller."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/web/controller/content/ContentPageController.java b/src/main/java/run/halo/app/web/controller/content/ContentPageController.java\n--- a/src/main/java/run/halo/app/web/controller/content/ContentPageController.java\n+++ b/src/main/java/run/halo/app/web/controller/content/ContentPageController.java\n@@ -10,7 +10,6 @@\n import run.halo.app.model.entity.Post;\n import run.halo.app.model.enums.PostStatus;\n import run.halo.app.service.CommentService;\n-import run.halo.app.service.GalleryService;\n import run.halo.app.service.PostService;\n import run.halo.app.service.ThemeService;\n \n@@ -23,19 +22,16 @@\n @Controller\n public class ContentPageController {\n \n-    private final GalleryService galleryService;\n \n     private final PostService postService;\n \n     private final CommentService commentService;\n \n     private final ThemeService themeService;\n \n-    public ContentPageController(GalleryService galleryService,\n-                                 PostService postService,\n+    public ContentPageController(PostService postService,\n                                  CommentService commentService,\n                                  ThemeService themeService) {\n-        this.galleryService = galleryService;\n         this.postService = postService;\n         this.commentService = commentService;\n         this.themeService = themeService;",
    "output": "Update common_macro.ftl."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n@@ -41,6 +41,7 @@\n import java.util.function.Supplier;\n import java.util.stream.Collectors;\n \n+import static org.springframework.data.domain.Sort.Direction.ASC;\n import static org.springframework.data.domain.Sort.Direction.DESC;\n \n /**\n@@ -466,7 +467,7 @@ public List<Post> listPrePosts(Date date, int size) {\n \n         return postRepository.findAllByStatusAndCreateTimeAfter(PostStatus.PUBLISHED,\n                 date,\n-                PageRequest.of(0, size, Sort.by(DESC, \"createTime\")))\n+                PageRequest.of(0, size, Sort.by(ASC, \"createTime\")))\n                 .getContent();\n     }\n \n\ndiff --git a/src/main/java/run/halo/app/web/controller/content/ContentArchiveController.java b/src/main/java/run/halo/app/web/controller/content/ContentArchiveController.java\n--- a/src/main/java/run/halo/app/web/controller/content/ContentArchiveController.java\n+++ b/src/main/java/run/halo/app/web/controller/content/ContentArchiveController.java\n@@ -1,5 +1,6 @@\n package run.halo.app.web.controller.content;\n \n+import lombok.extern.slf4j.Slf4j;\n import org.springframework.stereotype.Controller;\n import org.springframework.ui.Model;\n import org.springframework.web.bind.annotation.GetMapping;\n@@ -22,6 +23,7 @@\n  * @author : RYAN0UP\n  * @date : 2019-03-17\n  */\n+@Slf4j\n @Controller\n @RequestMapping(value = \"archives\")\n public class ContentArchiveController {\n@@ -64,8 +66,14 @@ public String post(@PathVariable(\"url\") String url,\n                        Model model) {\n         Post post = postService.getBy(PostStatus.PUBLISHED, url);\n \n-        postService.getNextPost(post.getCreateTime()).ifPresent(nextPost -> model.addAttribute(\"nextPost\", nextPost));\n-        postService.getPrePost(post.getCreateTime()).ifPresent(prePost -> model.addAttribute(\"prePost\", prePost));\n+        postService.getNextPost(post.getCreateTime()).ifPresent(nextPost -> {\n+            log.debug(\"Next post: [{}]\", nextPost);\n+            model.addAttribute(\"nextPost\", nextPost);\n+        });\n+        postService.getPrePost(post.getCreateTime()).ifPresent(prePost -> {\n+            log.debug(\"Pre post: [{}]\", prePost);\n+            model.addAttribute(\"prePost\", prePost);\n+        });\n \n         List<Category> categories = postCategoryService.listCategoryBy(post.getId());\n         List<Tag> tags = postTagService.listTagsBy(post.getId());",
    "output": "Fix list previous posts bug"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/PostService.java b/src/main/java/run/halo/app/service/PostService.java\n--- a/src/main/java/run/halo/app/service/PostService.java\n+++ b/src/main/java/run/halo/app/service/PostService.java\n@@ -224,9 +224,41 @@ public interface PostService extends CrudService<Post, Integer> {\n     @NonNull\n     Post filterIfEncrypt(@NonNull Post post);\n \n+    /**\n+     * Gets previous post.\n+     *\n+     * @param date date must not be null\n+     * @return an optional post\n+     */\n+    @NonNull\n+    Optional<Post> getPrePost(@NonNull Date date);\n+\n+    /**\n+     * Gets next post.\n+     *\n+     * @param date date must not be null\n+     * @return an optional post\n+     */\n     @NonNull\n-    Optional<Post> getPrePost(@NonNull Date createTime);\n+    Optional<Post> getNextPost(@NonNull Date date);\n \n+    /**\n+     * Lists previous posts.\n+     *\n+     * @param date date must not be null\n+     * @param size previous max post size\n+     * @return a list of previous post\n+     */\n+    @NonNull\n+    List<Post> listPrePosts(@NonNull Date date, int size);\n+\n+    /**\n+     * Lits next posts.\n+     *\n+     * @param date date must not be null\n+     * @param size next max post size\n+     * @return a list of next post\n+     */\n     @NonNull\n-    Optional<Post> getNextPost(@NonNull Date createTime);\n+    List<Post> listNextPosts(@NonNull Date date, int size);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n@@ -447,29 +447,37 @@ public Post filterIfEncrypt(Post post) {\n     }\n \n     @Override\n-    public Optional<Post> getPrePost(Date createTime) {\n-        Assert.notNull(createTime, \"Create time must not be null\");\n+    public Optional<Post> getPrePost(Date date) {\n+        List<Post> posts = listPrePosts(date, 1);\n \n-        Page<Post> prePostPage = postRepository.findAllByStatusAndCreateTimeAfter(PostStatus.PUBLISHED, createTime, PageRequest.of(0, 1));\n+        return CollectionUtils.isEmpty(posts) ? Optional.empty() : Optional.of(posts.get(0));\n+    }\n \n-        if (prePostPage.isEmpty()) {\n-            return Optional.empty();\n-        }\n+    @Override\n+    public Optional<Post> getNextPost(Date date) {\n+        List<Post> posts = listNextPosts(date, 1);\n \n-        return Optional.of(prePostPage.getContent().get(0));\n+        return CollectionUtils.isEmpty(posts) ? Optional.empty() : Optional.of(posts.get(0));\n     }\n \n     @Override\n-    public Optional<Post> getNextPost(Date createTime) {\n-        Assert.notNull(createTime, \"Create time must not be null\");\n+    public List<Post> listPrePosts(Date date, int size) {\n+        Assert.notNull(date, \"Date must not be null\");\n \n-        Page<Post> nextPostPage = postRepository.findAllByStatusAndCreateTimeBefore(PostStatus.PUBLISHED, createTime, PageRequest.of(0, 1));\n+        return postRepository.findAllByStatusAndCreateTimeAfter(PostStatus.PUBLISHED,\n+                date,\n+                PageRequest.of(0, size, Sort.by(DESC, \"createTime\")))\n+                .getContent();\n+    }\n \n-        if (nextPostPage.isEmpty()) {\n-            return Optional.empty();\n-        }\n+    @Override\n+    public List<Post> listNextPosts(Date date, int size) {\n+        Assert.notNull(date, \"Date must not be null\");\n \n-        return Optional.of(nextPostPage.getContent().get(0));\n+        return postRepository.findAllByStatusAndCreateTimeBefore(PostStatus.PUBLISHED,\n+                date,\n+                PageRequest.of(0, size, Sort.by(DESC, \"createTime\")))\n+                .getContent();\n     }\n \n     /**",
    "output": "Add list previous and next posts service"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/repository/PostRepository.java b/src/main/java/run/halo/app/repository/PostRepository.java\n--- a/src/main/java/run/halo/app/repository/PostRepository.java\n+++ b/src/main/java/run/halo/app/repository/PostRepository.java\n@@ -10,6 +10,7 @@\n import run.halo.app.repository.base.BasePostRepository;\n \n import java.util.Date;\n+import java.util.Optional;\n \n \n /**\n@@ -27,8 +28,11 @@ public interface PostRepository extends BasePostRepository<Post>, JpaSpecificati\n     Long countLike();\n \n     @NonNull\n-    Page<Post> findAllByStatusAndCreateTimeBefore(PostStatus status, Date createTime, @NonNull Pageable pageable);\n+    Page<Post> findAllByStatusAndCreateTimeBefore(@NonNull PostStatus status, @NonNull Date createTime, @NonNull Pageable pageable);\n \n     @NonNull\n-    Page<Post> findAllByStatusAndCreateTimeAfter(PostStatus status, Date createTime, @NonNull Pageable pageable);\n+    Page<Post> findAllByStatusAndCreateTimeAfter(@NonNull PostStatus status, @NonNull Date createTime, @NonNull Pageable pageable);\n+\n+    @NonNull\n+    Optional<Post> getByUrlAndStatus(@NonNull String url, @NonNull PostStatus status);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/PostService.java b/src/main/java/run/halo/app/service/PostService.java\n--- a/src/main/java/run/halo/app/service/PostService.java\n+++ b/src/main/java/run/halo/app/service/PostService.java\n@@ -139,6 +139,16 @@ public interface PostService extends CrudService<Post, Integer> {\n     @NonNull\n     Post getByUrl(@NonNull String url);\n \n+    /**\n+     * Gets post by post status and url.\n+     *\n+     * @param status post status must not be null\n+     * @param url    post url must not be blank\n+     * @return post info\n+     */\n+    @NonNull\n+    Post getBy(@NonNull PostStatus status, @NonNull String url);\n+\n     /**\n      * Get post detail vo by post id.\n      *\n@@ -196,22 +206,6 @@ public interface PostService extends CrudService<Post, Integer> {\n     @NonNull\n     Page<PostListVO> convertToListVo(@NonNull Page<Post> postPage);\n \n-    /**\n-     * Get pre post by current post date.\n-     * @param date date\n-     * @return post\n-     */\n-    @NonNull\n-    Post getPrePostOfNullable(@NonNull Date date);\n-\n-    /**\n-     * Get next post by current post date.\n-     * @param date date\n-     * @return post\n-     */\n-    @NonNull\n-    Post getNextPostOfNullable(@NonNull Date date);\n-\n     /**\n      * Lists all posts by post status.\n      *\n\ndiff --git a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n@@ -258,6 +258,16 @@ public Post getByUrl(String url) {\n         return postRepository.getByUrl(url).orElseThrow(() -> new NotFoundException(\"The post does not exist\").setErrorData(url));\n     }\n \n+    @Override\n+    public Post getBy(PostStatus status, String url) {\n+        Assert.notNull(status, \"Post status must not be null\");\n+        Assert.hasText(url, \"Post url must not be blank\");\n+\n+        Optional<Post> postOptional = postRepository.getByUrlAndStatus(url, status);\n+\n+        return postOptional.orElseThrow(() -> new NotFoundException(\"The post with status \" + status + \" and url \" + url + \"was not existed\").setErrorData(url));\n+    }\n+\n     @Override\n     public PostDetailVO getDetailVoBy(Integer postId) {\n         Assert.notNull(postId, \"post id must not be null\");\n@@ -363,16 +373,6 @@ public Post removeById(Integer postId) {\n         return super.removeById(postId);\n     }\n \n-    @Override\n-    public Post getPrePostOfNullable(Date date) {\n-        return getPrePost(date).orElse(null);\n-    }\n-\n-    @Override\n-    public Post getNextPostOfNullable(Date date) {\n-        return getNextPost(date).orElse(null);\n-    }\n-\n     @Override\n     public Page<PostSimpleOutputDTO> convertToSimpleDto(@NonNull Page<Post> postPage) {\n         Assert.notNull(postPage, \"Post page must not be null\");\n@@ -469,7 +469,7 @@ public Optional<Post> getNextPost(Date createTime) {\n             return Optional.empty();\n         }\n \n-        return Optional.of(nextPostPage.getContent().get(nextPostPage.getContent().size()-1));\n+        return Optional.of(nextPostPage.getContent().get(0));\n     }\n \n     /**\n\ndiff --git a/src/main/java/run/halo/app/web/controller/content/ContentArchiveController.java b/src/main/java/run/halo/app/web/controller/content/ContentArchiveController.java\n--- a/src/main/java/run/halo/app/web/controller/content/ContentArchiveController.java\n+++ b/src/main/java/run/halo/app/web/controller/content/ContentArchiveController.java\n@@ -23,7 +23,7 @@\n  * @date : 2019-03-17\n  */\n @Controller\n-@RequestMapping(value = \"/archives\")\n+@RequestMapping(value = \"archives\")\n public class ContentArchiveController {\n \n     private final PostService postService;\n@@ -57,33 +57,21 @@ public ContentArchiveController(PostService postService,\n      * @param model   model\n      * @return template path: theme/{theme}/post.ftl\n      */\n-    @GetMapping(value = \"{url}\")\n-    public String post(@PathVariable String url,\n+    @GetMapping(\"{url}\")\n+    public String post(@PathVariable(\"url\") String url,\n                        @RequestParam(value = \"cp\", defaultValue = \"1\") Integer cp,\n                        HttpServletRequest request,\n                        Model model) {\n-        final Post post = postService.getByUrl(url);\n-        if (null == post || !post.getStatus().equals(PostStatus.PUBLISHED)) {\n-            return \"redirect:/404\";\n-        }\n-\n-        final Date publishTime = post.getCreateTime();\n-        final Post nextPost = postService.getNextPostOfNullable(publishTime);\n-        final Post prePost = postService.getPrePostOfNullable(publishTime);\n-\n-        if (null != prePost) {\n-            model.addAttribute(\"prePost\", prePost);\n-        }\n-        if (null != nextPost) {\n-            model.addAttribute(\"nextPost\", nextPost);\n-        }\n+        Post post = postService.getBy(PostStatus.PUBLISHED, url);\n \n+        postService.getNextPost(post.getCreateTime()).ifPresent(nextPost -> model.addAttribute(\"nextPost\", nextPost));\n+        postService.getPrePost(post.getCreateTime()).ifPresent(prePost -> model.addAttribute(\"prePost\", prePost));\n \n         List<Category> categories = postCategoryService.listCategoryBy(post.getId());\n         List<Tag> tags = postTagService.listTagsBy(post.getId());\n \n         model.addAttribute(\"is_post\", true);\n-        model.addAttribute(\"post\",post);\n+        model.addAttribute(\"post\", post);\n         model.addAttribute(\"categories\", categories);\n         model.addAttribute(\"tags\", tags);\n         return themeService.render(\"post\");",
    "output": "Optimize content archive controller"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/entity/Attachment.java b/src/main/java/run/halo/app/model/entity/Attachment.java\n--- a/src/main/java/run/halo/app/model/entity/Attachment.java\n+++ b/src/main/java/run/halo/app/model/entity/Attachment.java\n@@ -1,6 +1,5 @@\n package run.halo.app.model.entity;\n \n-import run.halo.app.model.enums.AttachmentType;\n import lombok.Data;\n import lombok.EqualsAndHashCode;\n import lombok.ToString;\n\ndiff --git a/src/main/java/run/halo/app/repository/PostRepository.java b/src/main/java/run/halo/app/repository/PostRepository.java\n--- a/src/main/java/run/halo/app/repository/PostRepository.java\n+++ b/src/main/java/run/halo/app/repository/PostRepository.java\n@@ -6,6 +6,7 @@\n import org.springframework.data.jpa.repository.Query;\n import org.springframework.lang.NonNull;\n import run.halo.app.model.entity.Post;\n+import run.halo.app.model.enums.PostStatus;\n import run.halo.app.repository.base.BasePostRepository;\n \n import java.util.Date;\n@@ -26,8 +27,8 @@ public interface PostRepository extends BasePostRepository<Post>, JpaSpecificati\n     Long countLike();\n \n     @NonNull\n-    Page<Post> findAllByStatusAndCreateTimeBefore(Date createTime, @NonNull Pageable pageable);\n+    Page<Post> findAllByStatusAndCreateTimeBefore(PostStatus status, Date createTime, @NonNull Pageable pageable);\n \n     @NonNull\n-    Page<Post> findAllByStatusAndCreateTimeAfter(Date createTime, @NonNull Pageable pageable);\n+    Page<Post> findAllByStatusAndCreateTimeAfter(PostStatus status, Date createTime, @NonNull Pageable pageable);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/PostService.java b/src/main/java/run/halo/app/service/PostService.java\n--- a/src/main/java/run/halo/app/service/PostService.java\n+++ b/src/main/java/run/halo/app/service/PostService.java\n@@ -196,6 +196,22 @@ public interface PostService extends CrudService<Post, Integer> {\n     @NonNull\n     Page<PostListVO> convertToListVo(@NonNull Page<Post> postPage);\n \n+    /**\n+     * Get pre post by current post date.\n+     * @param date date\n+     * @return post\n+     */\n+    @NonNull\n+    Post getPrePostOfNullable(@NonNull Date date);\n+\n+    /**\n+     * Get next post by current post date.\n+     * @param date date\n+     * @return post\n+     */\n+    @NonNull\n+    Post getNextPostOfNullable(@NonNull Date date);\n+\n     /**\n      * Lists all posts by post status.\n      *\n\ndiff --git a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n@@ -363,6 +363,15 @@ public Post removeById(Integer postId) {\n         return super.removeById(postId);\n     }\n \n+    @Override\n+    public Post getPrePostOfNullable(Date date) {\n+        return getPrePost(date).orElse(null);\n+    }\n+\n+    @Override\n+    public Post getNextPostOfNullable(Date date) {\n+        return getNextPost(date).orElse(null);\n+    }\n \n     @Override\n     public Page<PostSimpleOutputDTO> convertToSimpleDto(@NonNull Page<Post> postPage) {\n@@ -441,7 +450,7 @@ public Post filterIfEncrypt(Post post) {\n     public Optional<Post> getPrePost(Date createTime) {\n         Assert.notNull(createTime, \"Create time must not be null\");\n \n-        Page<Post> prePostPage = postRepository.findAllByStatusAndCreateTimeAfter(createTime, PageRequest.of(0, 1));\n+        Page<Post> prePostPage = postRepository.findAllByStatusAndCreateTimeAfter(PostStatus.PUBLISHED, createTime, PageRequest.of(0, 1));\n \n         if (prePostPage.isEmpty()) {\n             return Optional.empty();\n@@ -454,13 +463,13 @@ public Optional<Post> getPrePost(Date createTime) {\n     public Optional<Post> getNextPost(Date createTime) {\n         Assert.notNull(createTime, \"Create time must not be null\");\n \n-        Page<Post> prePostPage = postRepository.findAllByStatusAndCreateTimeBefore(createTime, PageRequest.of(0, 1));\n+        Page<Post> nextPostPage = postRepository.findAllByStatusAndCreateTimeBefore(PostStatus.PUBLISHED, createTime, PageRequest.of(0, 1));\n \n-        if (prePostPage.isEmpty()) {\n+        if (nextPostPage.isEmpty()) {\n             return Optional.empty();\n         }\n \n-        return Optional.of(prePostPage.getContent().get(0));\n+        return Optional.of(nextPostPage.getContent().get(nextPostPage.getContent().size()-1));\n     }\n \n     /**\n\ndiff --git a/src/main/java/run/halo/app/web/controller/content/ContentArchiveController.java b/src/main/java/run/halo/app/web/controller/content/ContentArchiveController.java\n--- a/src/main/java/run/halo/app/web/controller/content/ContentArchiveController.java\n+++ b/src/main/java/run/halo/app/web/controller/content/ContentArchiveController.java\n@@ -0,0 +1,91 @@\n+package run.halo.app.web.controller.content;\n+\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import run.halo.app.model.entity.Category;\n+import run.halo.app.model.entity.Post;\n+import run.halo.app.model.entity.Tag;\n+import run.halo.app.model.enums.PostStatus;\n+import run.halo.app.service.*;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import java.util.Date;\n+import java.util.List;\n+\n+/**\n+ * Blog archive page controller\n+ *\n+ * @author : RYAN0UP\n+ * @date : 2019-03-17\n+ */\n+@Controller\n+@RequestMapping(value = \"/archives\")\n+public class ContentArchiveController {\n+\n+    private final PostService postService;\n+\n+    private final CommentService commentService;\n+\n+    private final ThemeService themeService;\n+\n+    private final PostCategoryService postCategoryService;\n+\n+    private final PostTagService postTagService;\n+\n+    public ContentArchiveController(PostService postService,\n+                                    CommentService commentService,\n+                                    ThemeService themeService,\n+                                    PostCategoryService postCategoryService,\n+                                    PostTagService postTagService) {\n+        this.postService = postService;\n+        this.commentService = commentService;\n+        this.themeService = themeService;\n+        this.postCategoryService = postCategoryService;\n+        this.postTagService = postTagService;\n+    }\n+\n+    /**\n+     * Render post page.\n+     *\n+     * @param url     post slug url.\n+     * @param cp      comment page number\n+     * @param request request\n+     * @param model   model\n+     * @return template path: theme/{theme}/post.ftl\n+     */\n+    @GetMapping(value = \"{url}\")\n+    public String post(@PathVariable String url,\n+                       @RequestParam(value = \"cp\", defaultValue = \"1\") Integer cp,\n+                       HttpServletRequest request,\n+                       Model model) {\n+        final Post post = postService.getByUrl(url);\n+        if (null == post || !post.getStatus().equals(PostStatus.PUBLISHED)) {\n+            return \"redirect:/404\";\n+        }\n+\n+        final Date publishTime = post.getCreateTime();\n+        final Post nextPost = postService.getNextPostOfNullable(publishTime);\n+        final Post prePost = postService.getPrePostOfNullable(publishTime);\n+\n+        if (null != prePost) {\n+            model.addAttribute(\"prePost\", prePost);\n+        }\n+        if (null != nextPost) {\n+            model.addAttribute(\"nextPost\", nextPost);\n+        }\n+\n+\n+        List<Category> categories = postCategoryService.listCategoryBy(post.getId());\n+        List<Tag> tags = postTagService.listTagsBy(post.getId());\n+\n+        model.addAttribute(\"is_post\", true);\n+        model.addAttribute(\"post\",post);\n+        model.addAttribute(\"categories\", categories);\n+        model.addAttribute(\"tags\", tags);\n+        return themeService.render(\"post\");\n+    }\n+}",
    "output": "Update anatole theme."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/repository/PostRepository.java b/src/main/java/run/halo/app/repository/PostRepository.java\n--- a/src/main/java/run/halo/app/repository/PostRepository.java\n+++ b/src/main/java/run/halo/app/repository/PostRepository.java\n@@ -1,10 +1,15 @@\n package run.halo.app.repository;\n \n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n import org.springframework.data.jpa.repository.JpaSpecificationExecutor;\n import org.springframework.data.jpa.repository.Query;\n+import org.springframework.lang.NonNull;\n import run.halo.app.model.entity.Post;\n import run.halo.app.repository.base.BasePostRepository;\n \n+import java.util.Date;\n+\n \n /**\n  * Post repository.\n@@ -19,4 +24,10 @@ public interface PostRepository extends BasePostRepository<Post>, JpaSpecificati\n \n     @Query(\"select sum(p.likes) from Post p\")\n     Long countLike();\n+\n+    @NonNull\n+    Page<Post> findAllByStatusAndCreateTimeBefore(Date createTime, @NonNull Pageable pageable);\n+\n+    @NonNull\n+    Page<Post> findAllByStatusAndCreateTimeAfter(Date createTime, @NonNull Pageable pageable);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/PostService.java b/src/main/java/run/halo/app/service/PostService.java\n--- a/src/main/java/run/halo/app/service/PostService.java\n+++ b/src/main/java/run/halo/app/service/PostService.java\n@@ -15,7 +15,9 @@\n import run.halo.app.model.vo.PostListVO;\n import run.halo.app.service.base.CrudService;\n \n+import java.util.Date;\n import java.util.List;\n+import java.util.Optional;\n import java.util.Set;\n \n /**\n@@ -211,4 +213,10 @@ public interface PostService extends CrudService<Post, Integer> {\n      */\n     @NonNull\n     Post filterIfEncrypt(@NonNull Post post);\n+\n+    @NonNull\n+    Optional<Post> getPrePost(@NonNull Date createTime);\n+\n+    @NonNull\n+    Optional<Post> getNextPost(@NonNull Date createTime);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n@@ -437,6 +437,32 @@ public Post filterIfEncrypt(Post post) {\n         return post;\n     }\n \n+    @Override\n+    public Optional<Post> getPrePost(Date createTime) {\n+        Assert.notNull(createTime, \"Create time must not be null\");\n+\n+        Page<Post> prePostPage = postRepository.findAllByStatusAndCreateTimeAfter(createTime, PageRequest.of(0, 1));\n+\n+        if (prePostPage.isEmpty()) {\n+            return Optional.empty();\n+        }\n+\n+        return Optional.of(prePostPage.getContent().get(0));\n+    }\n+\n+    @Override\n+    public Optional<Post> getNextPost(Date createTime) {\n+        Assert.notNull(createTime, \"Create time must not be null\");\n+\n+        Page<Post> prePostPage = postRepository.findAllByStatusAndCreateTimeBefore(createTime, PageRequest.of(0, 1));\n+\n+        if (prePostPage.isEmpty()) {\n+            return Optional.empty();\n+        }\n+\n+        return Optional.of(prePostPage.getContent().get(0));\n+    }\n+\n     /**\n      * Converts to post minimal output dto.\n      *",
    "output": "Add get preview and next post feature"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/PostService.java b/src/main/java/run/halo/app/service/PostService.java\n--- a/src/main/java/run/halo/app/service/PostService.java\n+++ b/src/main/java/run/halo/app/service/PostService.java\n@@ -193,4 +193,22 @@ public interface PostService extends CrudService<Post, Integer> {\n      */\n     @NonNull\n     Page<PostListVO> convertToListVo(@NonNull Page<Post> postPage);\n+\n+    /**\n+     * Lists all posts by post status.\n+     *\n+     * @param status post status must not be null\n+     * @return a list of post\n+     */\n+    @NonNull\n+    List<Post> listAllBy(@NonNull PostStatus status);\n+\n+    /**\n+     * Filters post content if the password is not blank.\n+     *\n+     * @param post original post must not be null\n+     * @return filtered post\n+     */\n+    @NonNull\n+    Post filterIfEncrypt(@NonNull Post post);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n@@ -416,6 +416,27 @@ public Page<PostListVO> convertToListVo(Page<Post> postPage) {\n         });\n     }\n \n+    @Override\n+    public List<Post> listAllBy(PostStatus status) {\n+        Assert.notNull(status, \"Post status must not be null\");\n+\n+        return postRepository.findAllByStatus(status);\n+    }\n+\n+    @Override\n+    public Post filterIfEncrypt(Post post) {\n+        Assert.notNull(post, \"Post must not be null\");\n+\n+        if (StringUtils.isNotBlank(post.getPassword())) {\n+            String tip = \"The post is encrypted by author\";\n+            post.setSummary(tip);\n+            post.setOriginalContent(tip);\n+            post.setFormatContent(tip);\n+        }\n+\n+        return post;\n+    }\n+\n     /**\n      * Converts to post minimal output dto.\n      *\n\ndiff --git a/src/main/java/run/halo/app/web/controller/content/ContentFeedController.java b/src/main/java/run/halo/app/web/controller/content/ContentFeedController.java\n--- a/src/main/java/run/halo/app/web/controller/content/ContentFeedController.java\n+++ b/src/main/java/run/halo/app/web/controller/content/ContentFeedController.java\n@@ -1,17 +1,12 @@\n package run.halo.app.web.controller.content;\n \n-import run.halo.app.model.entity.Post;\n-import run.halo.app.model.enums.PostStatus;\n-import run.halo.app.model.enums.PostType;\n-import run.halo.app.service.OptionService;\n-import run.halo.app.service.PostService;\n-import cn.hutool.core.util.StrUtil;\n import freemarker.template.Template;\n import freemarker.template.TemplateException;\n-import org.springframework.data.domain.Page;\n import org.springframework.data.domain.PageRequest;\n import org.springframework.data.domain.Pageable;\n import org.springframework.data.domain.Sort;\n+import org.springframework.http.MediaType;\n+import org.springframework.lang.NonNull;\n import org.springframework.stereotype.Controller;\n import org.springframework.ui.Model;\n import org.springframework.ui.freemarker.FreeMarkerTemplateUtils;\n@@ -20,11 +15,14 @@\n import org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer;\n import run.halo.app.model.entity.Post;\n import run.halo.app.model.enums.PostStatus;\n+import run.halo.app.service.OptionService;\n import run.halo.app.service.PostService;\n \n import java.io.IOException;\n import java.util.List;\n \n+import static org.springframework.data.domain.Sort.Direction.DESC;\n+\n /**\n  * @author : RYAN0UP\n  * @date : 2019-03-21\n@@ -38,6 +36,10 @@ public class ContentFeedController {\n \n     private final FreeMarkerConfigurer freeMarker;\n \n+    private final static String UTF_8_SUFFIX = \";charset=UTF-8\";\n+\n+    private final static String XML_MEDIA_TYPE = MediaType.APPLICATION_XML_VALUE + UTF_8_SUFFIX;\n+\n     public ContentFeedController(PostService postService,\n                                  OptionService optionService,\n                                  FreeMarkerConfigurer freeMarker) {\n@@ -54,14 +56,11 @@ public ContentFeedController(PostService postService,\n      * @throws IOException       IOException\n      * @throws TemplateException TemplateException\n      */\n-    @GetMapping(value = {\"feed\", \"feed.xml\", \"rss\", \"rss.xml\"}, produces = \"application/xml;charset=UTF-8\")\n+    @GetMapping(value = {\"feed\", \"feed.xml\", \"rss\", \"rss.xml\"}, produces = XML_MEDIA_TYPE)\n     @ResponseBody\n     public String feed(Model model) throws IOException, TemplateException {\n-        int rssPageSize = optionService.getRssPageSize();\n-        final Sort sort = new Sort(Sort.Direction.DESC, \"postDate\");\n-        final Pageable pageable = PageRequest.of(0, rssPageSize, sort);\n-        model.addAttribute(\"posts\", buildPosts(pageable));\n-        final Template template = freeMarker.getConfiguration().getTemplate(\"common/web/rss.ftl\");\n+        model.addAttribute(\"posts\", buildPosts(buildPostPageable(optionService.getRssPageSize())));\n+        Template template = freeMarker.getConfiguration().getTemplate(\"common/web/rss.ftl\");\n         return FreeMarkerTemplateUtils.processTemplateIntoString(template, model);\n     }\n \n@@ -73,14 +72,11 @@ public String feed(Model model) throws IOException, TemplateException {\n      * @throws IOException       IOException\n      * @throws TemplateException TemplateException\n      */\n-    @GetMapping(value = {\"atom\", \"atom.xml\"}, produces = \"application/xml;charset=UTF-8\")\n+    @GetMapping(value = {\"atom\", \"atom.xml\"}, produces = XML_MEDIA_TYPE)\n     @ResponseBody\n     public String atom(Model model) throws IOException, TemplateException {\n-        int pageSize = optionService.getPostPageSize();\n-        final Sort sort = new Sort(Sort.Direction.DESC, \"createTime\");\n-        final Pageable pageable = PageRequest.of(0, pageSize, sort);\n-        model.addAttribute(\"posts\", buildPosts(pageable));\n-        final Template template = freeMarker.getConfiguration().getTemplate(\"common/web/atom.ftl\");\n+        model.addAttribute(\"posts\", buildPosts(buildPostPageable(optionService.getPostPageSize())));\n+        Template template = freeMarker.getConfiguration().getTemplate(\"common/web/atom.ftl\");\n         return FreeMarkerTemplateUtils.processTemplateIntoString(template, model);\n     }\n \n@@ -92,11 +88,11 @@ public String atom(Model model) throws IOException, TemplateException {\n      * @throws IOException       IOException\n      * @throws TemplateException TemplateException\n      */\n-    @GetMapping(value = {\"sitemap\", \"sitemap.xml\"}, produces = \"application/xml;charset=UTF-8\")\n+    @GetMapping(value = {\"sitemap\", \"sitemap.xml\"}, produces = XML_MEDIA_TYPE)\n     @ResponseBody\n     public String sitemapXml(Model model) throws IOException, TemplateException {\n         model.addAttribute(\"posts\", buildPosts(null));\n-        final Template template = freeMarker.getConfiguration().getTemplate(\"common/web/sitemap_xml.ftl\");\n+        Template template = freeMarker.getConfiguration().getTemplate(\"common/web/sitemap_xml.ftl\");\n         return FreeMarkerTemplateUtils.processTemplateIntoString(template, model);\n     }\n \n@@ -106,7 +102,7 @@ public String sitemapXml(Model model) throws IOException, TemplateException {\n      * @param model model\n      * @return String\n      */\n-    @GetMapping(value = \"sitemap.html\", produces = {\"text/html\"})\n+    @GetMapping(value = \"sitemap.html\", produces = MediaType.TEXT_PLAIN_VALUE)\n     public String sitemapHtml(Model model) {\n         model.addAttribute(\"posts\", buildPosts(null));\n         return \"common/web/sitemap_html\";\n@@ -120,27 +116,35 @@ public String sitemapHtml(Model model) {\n      * @throws IOException       IOException\n      * @throws TemplateException TemplateException\n      */\n-    @GetMapping(value = \"robots.txt\", produces = {\"text/plain\"})\n+    @GetMapping(value = \"robots.txt\", produces = MediaType.TEXT_PLAIN_VALUE)\n     @ResponseBody\n     public String robots(Model model) throws IOException, TemplateException {\n-        final Template template = freeMarker.getConfiguration().getTemplate(\"common/web/robots.ftl\");\n+        Template template = freeMarker.getConfiguration().getTemplate(\"common/web/robots.ftl\");\n         return FreeMarkerTemplateUtils.processTemplateIntoString(template, model);\n     }\n \n+    /**\n+     * Builds page info for post.\n+     *\n+     * @param size page size\n+     * @return page info\n+     */\n+    @NonNull\n+    private Pageable buildPostPageable(int size) {\n+        return PageRequest.of(0, size, Sort.by(DESC, \"createTime\"));\n+    }\n+\n     /**\n      * Build posts for feed\n      *\n      * @param pageable pageable\n      * @return List<Post>\n      */\n     private List<Post> buildPosts(Pageable pageable) {\n-        final Page<Post> postsPage = postService.pageBy(PostStatus.PUBLISHED, pageable).map(post -> {\n-            if (StrUtil.isNotEmpty(post.getPassword())) {\n-                post.setFormatContent(\"该文章为加密文章\");\n-                post.setSummary(\"该文章为加密文章\");\n-            }\n-            return post;\n-        });\n-        return postsPage.getContent();\n+        if (pageable == null) {\n+            return postService.listAllBy(PostStatus.PUBLISHED);\n+        }\n+\n+        return postService.pageBy(PostStatus.PUBLISHED, pageable).map(postService::filterIfEncrypt).getContent();\n     }\n }",
    "output": "Refactor content feed part"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java b/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n--- a/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n+++ b/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n@@ -3,7 +3,6 @@\n import com.fasterxml.jackson.databind.ObjectMapper;\n import freemarker.template.TemplateExceptionHandler;\n import lombok.extern.slf4j.Slf4j;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.jackson.JsonComponentModule;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.ComponentScan;\n@@ -44,8 +43,11 @@ public class WebMvcAutoConfiguration implements WebMvcConfigurer {\n \n     private static final String FILE_PROTOCOL = \"file:///\";\n \n-    @Autowired\n-    private HaloProperties haloProperties;\n+    private final HaloProperties haloProperties;\n+\n+    public WebMvcAutoConfiguration(HaloProperties haloProperties) {\n+        this.haloProperties = haloProperties;\n+    }\n \n     @Override\n     public void extendMessageConverters(List<HttpMessageConverter<?>> converters) {\n\ndiff --git a/src/main/java/run/halo/app/web/controller/base/ControllerExceptionHandler.java b/src/main/java/run/halo/app/web/controller/base/ControllerExceptionHandler.java\n--- a/src/main/java/run/halo/app/web/controller/base/ControllerExceptionHandler.java\n+++ b/src/main/java/run/halo/app/web/controller/base/ControllerExceptionHandler.java\n@@ -1,5 +1,6 @@\n package run.halo.app.web.controller.base;\n \n+import org.springframework.web.HttpMediaTypeNotAcceptableException;\n import run.halo.app.exception.HaloException;\n import run.halo.app.model.support.BaseResponse;\n import run.halo.app.utils.ExceptionUtils;\n@@ -82,6 +83,14 @@ public BaseResponse handleHttpRequestMethodNotSupportedException(HttpRequestMeth\n         return baseResponse;\n     }\n \n+    @ExceptionHandler(HttpMediaTypeNotAcceptableException.class)\n+    @ResponseStatus(HttpStatus.NOT_ACCEPTABLE)\n+    public BaseResponse handleHttpMediaTypeNotAcceptableException(HttpMediaTypeNotAcceptableException e) {\n+        BaseResponse<?> baseResponse = handleBaseException(e);\n+        baseResponse.setStatus(HttpStatus.NOT_ACCEPTABLE.value());\n+        return baseResponse;\n+    }\n+\n     @ExceptionHandler(HttpMessageNotReadableException.class)\n     @ResponseStatus(HttpStatus.BAD_REQUEST)\n     public BaseResponse handleHttpMessageNotReadableException(HttpMessageNotReadableException e) {",
    "output": "Handle HttpMediaTypeNotAcceptableException with 406 status"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/event/LogEvent.java b/src/main/java/run/halo/app/event/LogEvent.java\n--- a/src/main/java/run/halo/app/event/LogEvent.java\n+++ b/src/main/java/run/halo/app/event/LogEvent.java\n@@ -0,0 +1,19 @@\n+package run.halo.app.event;\n+\n+import org.springframework.context.ApplicationEvent;\n+\n+/**\n+ * @author johnniang\n+ * @date 19-4-20\n+ */\n+public class LogEvent extends ApplicationEvent {\n+\n+    /**\n+     * Create a new ApplicationEvent.\n+     *\n+     * @param source the object on which the event initially occurred (never {@code null})\n+     */\n+    public LogEvent(Object source) {\n+        super(source);\n+    }\n+}\n\ndiff --git a/src/main/java/run/halo/app/service/impl/ThemeSettingServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeSettingServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeSettingServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeSettingServiceImpl.java\n@@ -115,19 +115,17 @@ public Map<String, Object> listAsMapBy(String themeId) {\n \n         // Build settings from user-defined\n         themeSettings.forEach(themeSetting -> {\n-            Item item = itemMap.get(themeSetting.getKey());\n-\n-\n-            // Convert data to corresponding data type\n             String key = themeSetting.getKey();\n \n-            Object convertedValue = themeSetting.getValue();\n+            Item item = itemMap.get(key);\n \n-            if (item != null) {\n-                convertedValue = item.getDataType().convertTo(themeSetting.getValue());\n-                log.debug(\"Converted user-defined data from [{}] to [{}], type: [{}]\", themeSetting.getValue(), convertedValue, item.getDataType());\n+            if (item == null) {\n+                return;\n             }\n \n+            Object convertedValue = item.getDataType().convertTo(themeSetting.getValue());\n+            log.debug(\"Converted user-defined data from [{}] to [{}], type: [{}]\", themeSetting.getValue(), convertedValue, item.getDataType());\n+\n             result.put(key, convertedValue);\n         });\n ",
    "output": "Disallow to return some settings that aren't in theme configuration"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/HaloConfiguration.java b/src/main/java/run/halo/app/config/HaloConfiguration.java\n--- a/src/main/java/run/halo/app/config/HaloConfiguration.java\n+++ b/src/main/java/run/halo/app/config/HaloConfiguration.java\n@@ -95,7 +95,7 @@ public FilterRegistrationBean<ApiAuthenticationFilter> apiAuthenticationFilter(H\n         ApiAuthenticationFilter apiFilter = new ApiAuthenticationFilter(haloProperties);\n \n         DefaultAuthenticationFailureHandler failureHandler = new DefaultAuthenticationFailureHandler();\n-        failureHandler.setProductionEnv(haloProperties.getProductionEnv());\n+        failureHandler.setProductionEnv(haloProperties.isProductionEnv());\n         failureHandler.setObjectMapper(objectMapper);\n \n         // Set failure handler\n@@ -117,7 +117,7 @@ public FilterRegistrationBean<AdminAuthenticationFilter> adminAuthenticationFilt\n         AdminAuthenticationFilter adminAuthenticationFilter = new AdminAuthenticationFilter(cacheStore, userService, haloProperties);\n \n         AdminAuthenticationFailureHandler failureHandler = new AdminAuthenticationFailureHandler();\n-        failureHandler.setProductionEnv(haloProperties.getProductionEnv());\n+        failureHandler.setProductionEnv(haloProperties.isProductionEnv());\n         failureHandler.setObjectMapper(objectMapper);\n \n         // Config the admin filter\n\ndiff --git a/src/main/java/run/halo/app/config/SwaggerConfiguration.java b/src/main/java/run/halo/app/config/SwaggerConfiguration.java\n--- a/src/main/java/run/halo/app/config/SwaggerConfiguration.java\n+++ b/src/main/java/run/halo/app/config/SwaggerConfiguration.java\n@@ -61,22 +61,22 @@ public SwaggerConfiguration(HaloProperties haloProperties) {\n \n     @Bean\n     public Docket haloDefaultApi() {\n-        log.debug(\"Doc disabled: [{}]\", haloProperties.getDocDisabled());\n+        log.debug(\"Doc disabled: [{}]\", haloProperties.isDocDisabled());\n         // TODO Build with different security configuration\n         return buildApiDocket(\"run.halo.app.portal.api\",\n                 \"run.halo.app.web.controller.portal.api\",\n                 \"/api/**\")\n-                .enable(!haloProperties.getDocDisabled());\n+                .enable(!haloProperties.isDocDisabled());\n     }\n \n     @Bean\n     public Docket haloAdminApi() {\n-        log.debug(\"Doc disabled: [{}]\", haloProperties.getDocDisabled());\n+        log.debug(\"Doc disabled: [{}]\", haloProperties.isDocDisabled());\n         // TODO Build with different security configuration\n         return buildApiDocket(\"run.halo.app.admin\",\n                 \"run.halo.app.web.controller.admin\",\n                 \"/api/admin/**\")\n-                .enable(!haloProperties.getDocDisabled());\n+                .enable(!haloProperties.isDocDisabled());\n     }\n \n     @Bean\n\ndiff --git a/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java b/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n--- a/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n+++ b/src/main/java/run/halo/app/config/WebMvcAutoConfiguration.java\n@@ -1,6 +1,7 @@\n package run.halo.app.config;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n+import freemarker.template.TemplateExceptionHandler;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.jackson.JsonComponentModule;\n@@ -86,7 +87,7 @@ public void addResourceHandlers(ResourceHandlerRegistry registry) {\n         registry.addResourceHandler(\"/admin/**\")\n                 .addResourceLocations(\"classpath:/static/admin/\");\n \n-        if (!haloProperties.getDocDisabled()) {\n+        if (!haloProperties.isDocDisabled()) {\n             // If doc is enable\n             registry.addResourceHandler(\"swagger-ui.html\")\n                     .addResourceLocations(\"classpath:/META-INF/resources/\");\n@@ -106,10 +107,13 @@ public void addFormatters(FormatterRegistry registry) {\n      * @return new FreeMarkerConfigurer\n      */\n     @Bean\n-    public FreeMarkerConfigurer freemarkerConfig() {\n+    public FreeMarkerConfigurer freemarkerConfig(HaloProperties haloProperties) {\n         FreeMarkerConfigurer configurer = new FreeMarkerConfigurer();\n         configurer.setTemplateLoaderPaths(FILE_PROTOCOL + haloProperties.getWorkDir() + \"templates/\", \"classpath:/templates/\");\n         configurer.setDefaultEncoding(\"UTF-8\");\n+        if (haloProperties.isProductionEnv()) {\n+            configurer.getConfiguration().setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);\n+        }\n         return configurer;\n     }\n \n\ndiff --git a/src/main/java/run/halo/app/config/properties/HaloProperties.java b/src/main/java/run/halo/app/config/properties/HaloProperties.java\n--- a/src/main/java/run/halo/app/config/properties/HaloProperties.java\n+++ b/src/main/java/run/halo/app/config/properties/HaloProperties.java\n@@ -16,17 +16,17 @@ public class HaloProperties {\n     /**\n      * Doc api disabled. (Default is true)\n      */\n-    private Boolean docDisabled = true;\n+    private boolean docDisabled = true;\n \n     /**\n      * Production env. (Default is true)\n      */\n-    private Boolean productionEnv = true;\n+    private boolean productionEnv = true;\n \n     /**\n      * Authentication enabled\n      */\n-    private Boolean authEnabled = true;\n+    private boolean authEnabled = true;\n \n     /**\n      * Work directory.\n\ndiff --git a/src/main/java/run/halo/app/listener/StartedListener.java b/src/main/java/run/halo/app/listener/StartedListener.java\n--- a/src/main/java/run/halo/app/listener/StartedListener.java\n+++ b/src/main/java/run/halo/app/listener/StartedListener.java\n@@ -57,7 +57,7 @@ public void onApplicationEvent(ApplicationStartedEvent event) {\n         this.initThemes();\n \n         // Init user in development environment\n-        if (!haloProperties.getProductionEnv()) {\n+        if (!haloProperties.isProductionEnv()) {\n             initAnTestUserIfAbsent();\n         }\n     }\n@@ -89,7 +89,7 @@ private void printStartInfo() {\n         log.info(\"Halo started at         {}\", blogUrl);\n         // TODO admin may be changeable\n         log.info(\"Halo admin started at   {}/admin\", blogUrl);\n-        if (!haloProperties.getDocDisabled()) {\n+        if (!haloProperties.isDocDisabled()) {\n             log.debug(\"Halo doc was enable at  {}/swagger-ui.html\", blogUrl);\n         }\n     }\n@@ -140,7 +140,7 @@ private void initThemes() {\n             // Create theme folder\n             Path themePath = themeService.getBasePath();\n \n-            if (!haloProperties.getProductionEnv() || Files.notExists(themePath)) {\n+            if (!haloProperties.isProductionEnv() || Files.notExists(themePath)) {\n                 log.info(\"Copying theme folder from [{}] to [{}]\", source, themePath);\n \n                 FileUtils.copyFolder(source, themePath);\n\ndiff --git a/src/main/java/run/halo/app/security/filter/AbstractAuthenticationFilter.java b/src/main/java/run/halo/app/security/filter/AbstractAuthenticationFilter.java\n--- a/src/main/java/run/halo/app/security/filter/AbstractAuthenticationFilter.java\n+++ b/src/main/java/run/halo/app/security/filter/AbstractAuthenticationFilter.java\n@@ -125,7 +125,7 @@ public AuthenticationFailureHandler getFailureHandler() {\n                 if (failureHandler == null) {\n                     // Create default authentication failure handler\n                     DefaultAuthenticationFailureHandler failureHandler = new DefaultAuthenticationFailureHandler();\n-                    failureHandler.setProductionEnv(haloProperties.getProductionEnv());\n+                    failureHandler.setProductionEnv(haloProperties.isProductionEnv());\n \n                     this.failureHandler = failureHandler;\n                 }\n\ndiff --git a/src/main/java/run/halo/app/security/filter/AdminAuthenticationFilter.java b/src/main/java/run/halo/app/security/filter/AdminAuthenticationFilter.java\n--- a/src/main/java/run/halo/app/security/filter/AdminAuthenticationFilter.java\n+++ b/src/main/java/run/halo/app/security/filter/AdminAuthenticationFilter.java\n@@ -66,7 +66,7 @@ public AdminAuthenticationFilter(StringCacheStore cacheStore,\n     @Override\n     protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n \n-        if (!haloProperties.getAuthEnabled()) {\n+        if (!haloProperties.isProductionEnv()) {\n             List<User> users = userService.listAll();\n             if (!users.isEmpty()) {\n                 // Set security context\n\ndiff --git a/src/main/java/run/halo/app/service/impl/ThemeSettingServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeSettingServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeSettingServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeSettingServiceImpl.java\n@@ -83,8 +83,10 @@ public List<ThemeSetting> listBy(String themeId) {\n     @Override\n     public Map<String, Object> listAsMapBy(String themeId) {\n \n+        List<ThemeSetting> themeSettings = listBy(themeId);\n+\n         // TODO Convert to corresponding data type\n-        return ServiceUtils.convertToMap(listBy(themeId), ThemeSetting::getKey, ThemeSetting::getValue);\n+        return ServiceUtils.convertToMap(themeSettings, ThemeSetting::getKey, ThemeSetting::getValue);\n     }\n \n     /**",
    "output": "Change halo properties boxed bool type to primitive bool type"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/web/controller/admin/api/AttachmentController.java b/src/main/java/run/halo/app/web/controller/admin/api/AttachmentController.java\n--- a/src/main/java/run/halo/app/web/controller/admin/api/AttachmentController.java\n+++ b/src/main/java/run/halo/app/web/controller/admin/api/AttachmentController.java\n@@ -101,9 +101,9 @@ public List<AttachmentOutputDTO> uploadAttachments(@RequestPart(\"files\") Multipa\n         return result;\n     }\n \n-    @GetMapping(\"mediaTypes\")\n-    @ApiOperation(\"List all of media types\")\n-    public List<String> mediaTypes(){\n+    @GetMapping(\"media_types\")\n+    @ApiOperation(\"Lists all of media types\")\n+    public List<String> listMediaTypes() {\n         return attachmentService.listAllMediaType();\n     }\n }",
    "output": "Change list media types api path to snake style"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/event/theme/FreemarkerConfigAwareListener.java b/src/main/java/run/halo/app/event/theme/FreemarkerConfigAwareListener.java\n--- a/src/main/java/run/halo/app/event/theme/FreemarkerConfigAwareListener.java\n+++ b/src/main/java/run/halo/app/event/theme/FreemarkerConfigAwareListener.java\n@@ -19,8 +19,8 @@\n  * @author johnniang\n  * @date 19-4-20\n  */\n-@Component\n @Slf4j\n+@Component\n public class FreemarkerConfigAwareListener {\n \n     private final OptionService optionService;\n\ndiff --git a/src/main/java/run/halo/app/service/ThemeService.java b/src/main/java/run/halo/app/service/ThemeService.java\n--- a/src/main/java/run/halo/app/service/ThemeService.java\n+++ b/src/main/java/run/halo/app/service/ThemeService.java\n@@ -210,7 +210,7 @@ public interface ThemeService {\n      * @return theme property\n      */\n     @NonNull\n-    ThemeProperty activeTheme(@NonNull String themeId);\n+    ThemeProperty activateTheme(@NonNull String themeId);\n \n     /**\n      * Upload theme.\n\ndiff --git a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n@@ -316,7 +316,7 @@ public ThemeProperty getActivatedTheme() {\n     }\n \n     @Override\n-    public ThemeProperty activeTheme(String themeId) {\n+    public ThemeProperty activateTheme(String themeId) {\n         // Check existence of the theme\n         ThemeProperty themeProperty = getThemeOfNonNullBy(themeId);\n \n@@ -508,6 +508,7 @@ private void clearThemeCache() {\n      */\n     private void setActivatedTheme(@Nullable ThemeProperty activatedTheme) {\n         this.activatedTheme = activatedTheme;\n+        this.activatedThemeId = activatedTheme.getId();\n     }\n \n     /**\n\ndiff --git a/src/main/java/run/halo/app/web/controller/admin/api/ThemeController.java b/src/main/java/run/halo/app/web/controller/admin/api/ThemeController.java\n--- a/src/main/java/run/halo/app/web/controller/admin/api/ThemeController.java\n+++ b/src/main/java/run/halo/app/web/controller/admin/api/ThemeController.java\n@@ -71,7 +71,7 @@ public List<String> customTemplate() {\n     @PostMapping(\"{themeId}/activation\")\n     @ApiOperation(\"Activates a theme\")\n     public ThemeProperty active(@PathVariable(\"themeId\") String themeId) {\n-        return themeService.activeTheme(themeId);\n+        return themeService.activateTheme(themeId);\n     }\n \n     @GetMapping(\"activation\")",
    "output": "Fix theme activation bug"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/params/AttachmentQuery.java b/src/main/java/run/halo/app/model/params/AttachmentQuery.java\n--- a/src/main/java/run/halo/app/model/params/AttachmentQuery.java\n+++ b/src/main/java/run/halo/app/model/params/AttachmentQuery.java\n@@ -15,4 +15,6 @@ public class AttachmentQuery {\n      * Keyword.\n      */\n     private String keyword;\n+\n+    private String mediaType;\n }\n\ndiff --git a/src/main/java/run/halo/app/repository/AttachmentRepository.java b/src/main/java/run/halo/app/repository/AttachmentRepository.java\n--- a/src/main/java/run/halo/app/repository/AttachmentRepository.java\n+++ b/src/main/java/run/halo/app/repository/AttachmentRepository.java\n@@ -1,13 +1,23 @@\n package run.halo.app.repository;\n \n import org.springframework.data.jpa.repository.JpaSpecificationExecutor;\n+import org.springframework.data.jpa.repository.Query;\n import run.halo.app.model.entity.Attachment;\n import run.halo.app.repository.base.BaseRepository;\n \n+import java.util.List;\n+\n /**\n  * Attachment repository\n  *\n  * @author johnniang\n  */\n public interface AttachmentRepository extends BaseRepository<Attachment, Integer>, JpaSpecificationExecutor<Attachment> {\n+\n+    /**\n+     * Find all attachment media type.\n+     * @return list of media type.\n+     */\n+    @Query(value = \"select distinct a.mediaType from Attachment a\")\n+    List<String> findAllMediaType();\n }\n\ndiff --git a/src/main/java/run/halo/app/repository/PostRepository.java b/src/main/java/run/halo/app/repository/PostRepository.java\n--- a/src/main/java/run/halo/app/repository/PostRepository.java\n+++ b/src/main/java/run/halo/app/repository/PostRepository.java\n@@ -1,9 +1,8 @@\n package run.halo.app.repository;\n \n-import run.halo.app.model.entity.Post;\n-import run.halo.app.repository.base.BasePostRepository;\n import org.springframework.data.jpa.repository.JpaSpecificationExecutor;\n import org.springframework.data.jpa.repository.Query;\n+import run.halo.app.model.entity.Post;\n import run.halo.app.repository.base.BasePostRepository;\n \n \n\ndiff --git a/src/main/java/run/halo/app/service/AttachmentService.java b/src/main/java/run/halo/app/service/AttachmentService.java\n--- a/src/main/java/run/halo/app/service/AttachmentService.java\n+++ b/src/main/java/run/halo/app/service/AttachmentService.java\n@@ -10,6 +10,8 @@\n import run.halo.app.model.params.AttachmentQuery;\n import run.halo.app.service.base.CrudService;\n \n+import java.util.List;\n+\n \n /**\n  * Attachment service.\n@@ -54,4 +56,10 @@ public interface AttachmentService extends CrudService<Attachment, Integer> {\n      */\n     @NonNull\n     AttachmentOutputDTO convertToDto(@NonNull Attachment attachment);\n+\n+    /**\n+     * List all media type.\n+     * @return list of media type\n+     */\n+    List<String> listAllMediaType();\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java b/src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java\n@@ -69,6 +69,10 @@ private Specification<Attachment> buildSpecByQuery(@NonNull AttachmentQuery atta\n         return (Specification<Attachment>) (root, query, criteriaBuilder) -> {\n             List<Predicate> predicates = new LinkedList<>();\n \n+            if (attachmentQuery.getMediaType() != null) {\n+                predicates.add(criteriaBuilder.equal(root.get(\"mediaType\"), attachmentQuery.getMediaType()));\n+            }\n+\n             if (attachmentQuery.getKeyword() != null) {\n \n                 String likeCondition = String.format(\"%%%s%%\", StringUtils.strip(attachmentQuery.getKeyword()));\n@@ -151,6 +155,11 @@ public AttachmentOutputDTO convertToDto(Attachment attachment) {\n         return attachmentOutputDTO;\n     }\n \n+    @Override\n+    public List<String> listAllMediaType() {\n+        return attachmentRepository.findAllMediaType();\n+    }\n+\n     /**\n      * Get attachment type from options.\n      *\n\ndiff --git a/src/main/java/run/halo/app/web/controller/admin/api/AttachmentController.java b/src/main/java/run/halo/app/web/controller/admin/api/AttachmentController.java\n--- a/src/main/java/run/halo/app/web/controller/admin/api/AttachmentController.java\n+++ b/src/main/java/run/halo/app/web/controller/admin/api/AttachmentController.java\n@@ -100,4 +100,10 @@ public List<AttachmentOutputDTO> uploadAttachments(@RequestPart(\"files\") Multipa\n \n         return result;\n     }\n+\n+    @GetMapping(\"mediaTypes\")\n+    @ApiOperation(\"List all of media types\")\n+    public List<String> mediaTypes(){\n+        return attachmentService.listAllMediaType();\n+    }\n }",
    "output": "Support attachment query by media type."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/Application.java b/src/main/java/run/halo/app/Application.java\n--- a/src/main/java/run/halo/app/Application.java\n+++ b/src/main/java/run/halo/app/Application.java\n@@ -1,5 +1,6 @@\n package run.halo.app;\n \n+import org.springframework.scheduling.annotation.EnableAsync;\n import run.halo.app.repository.base.BaseRepositoryImpl;\n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n@@ -18,6 +19,7 @@\n @SpringBootApplication\n @EnableJpaAuditing\n @EnableScheduling\n+@EnableAsync\n @EnableJpaRepositories(basePackages = \"run.halo.app.repository\", repositoryBaseClass = BaseRepositoryImpl.class)\n public class Application {\n \n\ndiff --git a/src/main/java/run/halo/app/event/theme/FreemarkerConfigAwareListener.java b/src/main/java/run/halo/app/event/theme/FreemarkerConfigAwareListener.java\n--- a/src/main/java/run/halo/app/event/theme/FreemarkerConfigAwareListener.java\n+++ b/src/main/java/run/halo/app/event/theme/FreemarkerConfigAwareListener.java\n@@ -0,0 +1,66 @@\n+package run.halo.app.event.theme;\n+\n+import freemarker.template.Configuration;\n+import freemarker.template.TemplateModelException;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.boot.context.event.ApplicationStartedEvent;\n+import org.springframework.context.event.EventListener;\n+import org.springframework.scheduling.annotation.Async;\n+import org.springframework.stereotype.Component;\n+import run.halo.app.handler.theme.config.support.ThemeProperty;\n+import run.halo.app.service.OptionService;\n+import run.halo.app.service.ThemeService;\n+\n+import java.util.Map;\n+\n+/**\n+ * Theme activated listener.\n+ *\n+ * @author johnniang\n+ * @date 19-4-20\n+ */\n+@Component\n+@Slf4j\n+public class FreemarkerConfigAwareListener {\n+\n+    private final OptionService optionService;\n+\n+    private final Configuration configuration;\n+\n+    private final ThemeService themeService;\n+\n+    public FreemarkerConfigAwareListener(OptionService optionService,\n+                                         Configuration configuration,\n+                                         ThemeService themeService) {\n+        this.optionService = optionService;\n+        this.configuration = configuration;\n+        this.themeService = themeService;\n+    }\n+\n+    @Async\n+    @EventListener\n+    public void onApplicationStartedEvent(ApplicationStartedEvent applicationStartedEvent) {\n+        try {\n+            ThemeProperty activatedTheme = themeService.getActivatedTheme();\n+            log.debug(\"Set shared variable theme: [{}]\", activatedTheme);\n+            configuration.setSharedVariable(\"theme\", activatedTheme);\n+        } catch (TemplateModelException e) {\n+            log.warn(\"Failed to configure freemarker\", e);\n+        }\n+    }\n+\n+    @Async\n+    @EventListener\n+    public void onThemeActivatedEvent(ThemeActivatedEvent themeActivatedEvent) {\n+        try {\n+            ThemeProperty activatedTheme = themeActivatedEvent.getThemeProperty();\n+            log.debug(\"Set shared variable theme: [{}]\", activatedTheme);\n+            configuration.setSharedVariable(\"theme\", activatedTheme);\n+            Map<String, String> options = optionService.listOptions();\n+            log.debug(\"Set shared variable options: [{}]\", options);\n+            configuration.setSharedVariable(\"options\", options);\n+        } catch (TemplateModelException e) {\n+            log.warn(\"Failed to configure freemarker\", e);\n+        }\n+    }\n+}\n\ndiff --git a/src/main/java/run/halo/app/event/theme/ThemeActivatedEvent.java b/src/main/java/run/halo/app/event/theme/ThemeActivatedEvent.java\n--- a/src/main/java/run/halo/app/event/theme/ThemeActivatedEvent.java\n+++ b/src/main/java/run/halo/app/event/theme/ThemeActivatedEvent.java\n@@ -0,0 +1,33 @@\n+package run.halo.app.event.theme;\n+\n+import org.springframework.context.ApplicationEvent;\n+import org.springframework.lang.NonNull;\n+import org.springframework.util.Assert;\n+import run.halo.app.handler.theme.config.support.ThemeProperty;\n+\n+/**\n+ * Theme activated event.\n+ *\n+ * @author johnniang\n+ * @date 19-4-20\n+ */\n+public class ThemeActivatedEvent extends ApplicationEvent {\n+\n+    private final ThemeProperty themeProperty;\n+\n+    /**\n+     * Create a new ApplicationEvent.\n+     *\n+     * @param source        the object on which the event initially occurred (never {@code null})\n+     * @param themeProperty theme property must not be null\n+     */\n+    public ThemeActivatedEvent(Object source, @NonNull ThemeProperty themeProperty) {\n+        super(source);\n+        Assert.notNull(themeProperty, \"Activated theme property must not be null\");\n+        this.themeProperty = themeProperty;\n+    }\n+\n+    public ThemeProperty getThemeProperty() {\n+        return themeProperty;\n+    }\n+}\n\ndiff --git a/src/main/java/run/halo/app/listener/StartedListener.java b/src/main/java/run/halo/app/listener/StartedListener.java\n--- a/src/main/java/run/halo/app/listener/StartedListener.java\n+++ b/src/main/java/run/halo/app/listener/StartedListener.java\n@@ -61,7 +61,7 @@ public class StartedListener implements ApplicationListener<ApplicationStartedEv\n     public void onApplicationEvent(ApplicationStartedEvent event) {\n         // save halo version to database\n         this.cacheOwo();\n-        this.cacheActiveTheme();\n+//        this.cacheActiveTheme();\n         this.printStartInfo();\n         this.initThemes();\n \n@@ -97,7 +97,7 @@ private void initAnTestUserIfAbsent() {\n      */\n     private void cacheActiveTheme() {\n         try {\n-            configuration.setSharedVariable(\"themeId\", themeService.getActivatedThemeId());\n+            configuration.setSharedVariable(\"theme\", themeService.getActivatedTheme());\n         } catch (TemplateModelException e) {\n             log.error(\"\", e);\n         }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n@@ -6,11 +6,11 @@\n import cn.hutool.core.text.StrBuilder;\n import cn.hutool.core.util.StrUtil;\n import freemarker.template.Configuration;\n-import freemarker.template.TemplateModelException;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.lang3.StringUtils;\n import org.eclipse.jgit.api.Git;\n import org.eclipse.jgit.api.errors.GitAPIException;\n+import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.http.ResponseEntity;\n import org.springframework.lang.NonNull;\n import org.springframework.lang.Nullable;\n@@ -21,6 +21,7 @@\n import org.springframework.web.multipart.MultipartFile;\n import run.halo.app.cache.StringCacheStore;\n import run.halo.app.config.properties.HaloProperties;\n+import run.halo.app.event.theme.ThemeActivatedEvent;\n import run.halo.app.exception.*;\n import run.halo.app.handler.theme.config.ThemeConfigResolver;\n import run.halo.app.handler.theme.config.ThemePropertyResolver;\n@@ -74,6 +75,8 @@ public class ThemeServiceImpl implements ThemeService {\n \n     private final RestTemplate restTemplate;\n \n+    private final ApplicationEventPublisher eventPublisher;\n+\n     /**\n      * Activated theme id.\n      */\n@@ -90,7 +93,8 @@ public ThemeServiceImpl(HaloProperties haloProperties,\n                             Configuration configuration,\n                             ThemeConfigResolver themeConfigResolver,\n                             ThemePropertyResolver themePropertyResolver,\n-                            RestTemplate restTemplate) {\n+                            RestTemplate restTemplate,\n+                            ApplicationEventPublisher eventPublisher) {\n         this.optionService = optionService;\n         this.cacheStore = cacheStore;\n         this.configuration = configuration;\n@@ -99,6 +103,7 @@ public ThemeServiceImpl(HaloProperties haloProperties,\n         this.restTemplate = restTemplate;\n \n         workDir = Paths.get(haloProperties.getWorkDir(), THEME_FOLDER);\n+        this.eventPublisher = eventPublisher;\n     }\n \n     @Override\n@@ -112,9 +117,6 @@ public Optional<ThemeProperty> getThemeBy(String themeId) {\n \n         Set<ThemeProperty> themes = getThemes();\n \n-        log.debug(\"Themes type: [{}]\", themes.getClass());\n-        log.debug(\"Themes: [{}]\", themes);\n-\n         return themes.stream().filter(themeProperty -> StringUtils.equals(themeProperty.getId(), themeId)).findFirst();\n     }\n \n@@ -327,13 +329,8 @@ public ThemeProperty activeTheme(String themeId) {\n         // Clear the cache\n         clearThemeCache();\n \n-        try {\n-            // TODO Refactor here in the future\n-            configuration.setSharedVariable(\"themeId\", themeId);\n-            configuration.setSharedVariable(\"options\", optionService.listOptions());\n-        } catch (TemplateModelException e) {\n-            throw new ServiceException(\"Failed to set shared variable\", e).setErrorData(themeId);\n-        }\n+        // Publish a theme activated event\n+        eventPublisher.publishEvent(new ThemeActivatedEvent(this, themeProperty));\n \n         return themeProperty;\n     }",
    "output": "Refactor freemarker configuration with event"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/handler/theme/config/support/ThemeProperty.java b/src/main/java/run/halo/app/handler/theme/config/support/ThemeProperty.java\n--- a/src/main/java/run/halo/app/handler/theme/config/support/ThemeProperty.java\n+++ b/src/main/java/run/halo/app/handler/theme/config/support/ThemeProperty.java\n@@ -49,10 +49,15 @@ public class ThemeProperty {\n     private Author author;\n \n     /**\n-     * Folder name.\n+     * Theme path.\n      */\n     private String themePath;\n \n+    /**\n+     * Theme folder name.\n+     */\n+    private String folderName;\n+\n     /**\n      * Has options.\n      */\n\ndiff --git a/src/main/java/run/halo/app/listener/StartedListener.java b/src/main/java/run/halo/app/listener/StartedListener.java\n--- a/src/main/java/run/halo/app/listener/StartedListener.java\n+++ b/src/main/java/run/halo/app/listener/StartedListener.java\n@@ -97,7 +97,7 @@ private void initAnTestUserIfAbsent() {\n      */\n     private void cacheActiveTheme() {\n         try {\n-            configuration.setSharedVariable(\"themeName\", themeService.getActivatedThemeId());\n+            configuration.setSharedVariable(\"themeId\", themeService.getActivatedThemeId());\n         } catch (TemplateModelException e) {\n             log.error(\"\", e);\n         }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n@@ -282,10 +282,8 @@ public List<Group> fetchConfig(String themeId) {\n     public String render(String pageName) {\n         // Get activated theme\n         ThemeProperty activatedTheme = getActivatedTheme();\n-        // Get theme folder name\n-        String themeFolderName = Paths.get(activatedTheme.getThemePath()).getFileName().toString();\n         // Build render url\n-        return String.format(RENDER_TEMPLATE, themeFolderName, pageName);\n+        return String.format(RENDER_TEMPLATE, activatedTheme.getFolderName(), pageName);\n     }\n \n     @Override\n@@ -331,7 +329,7 @@ public ThemeProperty activeTheme(String themeId) {\n \n         try {\n             // TODO Refactor here in the future\n-            configuration.setSharedVariable(\"themeName\", themeId);\n+            configuration.setSharedVariable(\"themeId\", themeId);\n             configuration.setSharedVariable(\"options\", optionService.listOptions());\n         } catch (TemplateModelException e) {\n             throw new ServiceException(\"Failed to set shared variable\", e).setErrorData(themeId);\n@@ -644,6 +642,7 @@ private Optional<ThemeProperty> getPropertyOfNullable(Path themePath) {\n \n             // Resolve additional properties\n             themeProperty.setThemePath(themePath.toString());\n+            themeProperty.setFolderName(themePath.getFileName().toString());\n             themeProperty.setHasOptions(hasOptions(themePath));\n             themeProperty.setActivated(false);\n ",
    "output": "Merge remote-tracking branch 'origin/v1' into v1"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/FreeMarkerAutoConfiguration.java b/src/main/java/run/halo/app/config/FreeMarkerAutoConfiguration.java\n--- a/src/main/java/run/halo/app/config/FreeMarkerAutoConfiguration.java\n+++ b/src/main/java/run/halo/app/config/FreeMarkerAutoConfiguration.java\n@@ -9,6 +9,7 @@\n import run.halo.app.model.freemarker.method.RecentPostsMethod;\n import run.halo.app.model.freemarker.tag.*;\n import run.halo.app.service.OptionService;\n+import run.halo.app.service.UserService;\n \n import javax.annotation.PostConstruct;\n \n@@ -28,6 +29,9 @@ public class FreeMarkerAutoConfiguration {\n     @Autowired\n     private OptionService optionsService;\n \n+    @Autowired\n+    private UserService userService;\n+\n     @Autowired\n     private PostTagDirective postTagDirective;\n \n@@ -59,6 +63,7 @@ public class FreeMarkerAutoConfiguration {\n     public void setSharedVariable() {\n         try {\n             configuration.setSharedVariable(\"options\", optionsService.listOptions());\n+            configuration.setSharedVariable(\"user\",userService.getCurrentUser().orElse(null));\n             //Freemarker custom tags\n             configuration.setSharedVariable(\"categoryTag\", categoryTagDirective);\n             configuration.setSharedVariable(\"commentTag\", commentTagDirective);",
    "output": "Update anatole theme."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/handler/theme/config/support/ThemeProperty.java b/src/main/java/run/halo/app/handler/theme/config/support/ThemeProperty.java\n--- a/src/main/java/run/halo/app/handler/theme/config/support/ThemeProperty.java\n+++ b/src/main/java/run/halo/app/handler/theme/config/support/ThemeProperty.java\n@@ -49,10 +49,15 @@ public class ThemeProperty {\n     private Author author;\n \n     /**\n-     * Folder name.\n+     * Theme path.\n      */\n     private String themePath;\n \n+    /**\n+     * Theme folder name.\n+     */\n+    private String folderName;\n+\n     /**\n      * Has options.\n      */\n\ndiff --git a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n@@ -282,10 +282,8 @@ public List<Group> fetchConfig(String themeId) {\n     public String render(String pageName) {\n         // Get activated theme\n         ThemeProperty activatedTheme = getActivatedTheme();\n-        // Get theme folder name\n-        String themeFolderName = Paths.get(activatedTheme.getThemePath()).getFileName().toString();\n         // Build render url\n-        return String.format(RENDER_TEMPLATE, themeFolderName, pageName);\n+        return String.format(RENDER_TEMPLATE, activatedTheme.getFolderName(), pageName);\n     }\n \n     @Override\n@@ -644,6 +642,7 @@ private Optional<ThemeProperty> getPropertyOfNullable(Path themePath) {\n \n             // Resolve additional properties\n             themeProperty.setThemePath(themePath.toString());\n+            themeProperty.setFolderName(themePath.getFileName().toString());\n             themeProperty.setHasOptions(hasOptions(themePath));\n             themeProperty.setActivated(false);\n ",
    "output": "Add theme folder name in theme property"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/listener/StartedListener.java b/src/main/java/run/halo/app/listener/StartedListener.java\n--- a/src/main/java/run/halo/app/listener/StartedListener.java\n+++ b/src/main/java/run/halo/app/listener/StartedListener.java\n@@ -97,7 +97,7 @@ private void initAnTestUserIfAbsent() {\n      */\n     private void cacheActiveTheme() {\n         try {\n-            configuration.setSharedVariable(\"themeName\", themeService.getActivatedThemeId());\n+            configuration.setSharedVariable(\"themeId\", themeService.getActivatedThemeId());\n         } catch (TemplateModelException e) {\n             log.error(\"\", e);\n         }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n@@ -331,7 +331,7 @@ public ThemeProperty activeTheme(String themeId) {\n \n         try {\n             // TODO Refactor here in the future\n-            configuration.setSharedVariable(\"themeName\", themeId);\n+            configuration.setSharedVariable(\"themeId\", themeId);\n             configuration.setSharedVariable(\"options\", optionService.listOptions());\n         } catch (TemplateModelException e) {\n             throw new ServiceException(\"Failed to set shared variable\", e).setErrorData(themeId);",
    "output": "Replace themeName with themeId"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/params/AttachmentParam.java b/src/main/java/run/halo/app/model/params/AttachmentParam.java\n--- a/src/main/java/run/halo/app/model/params/AttachmentParam.java\n+++ b/src/main/java/run/halo/app/model/params/AttachmentParam.java\n@@ -5,6 +5,7 @@\n import run.halo.app.model.entity.Attachment;\n \n import javax.validation.constraints.NotBlank;\n+import javax.validation.constraints.Size;\n \n /**\n  * Attachment params.\n@@ -16,5 +17,7 @@\n public class AttachmentParam implements InputConverter<Attachment> {\n \n     @NotBlank(message = \"Attachment name must not be blank\")\n+    @Size(max = 255, message = \"Length of attachment name must not be more than {max}\")\n     private String name;\n+\n }\n\ndiff --git a/src/main/java/run/halo/app/service/ThemeService.java b/src/main/java/run/halo/app/service/ThemeService.java\n--- a/src/main/java/run/halo/app/service/ThemeService.java\n+++ b/src/main/java/run/halo/app/service/ThemeService.java\n@@ -195,6 +195,14 @@ public interface ThemeService {\n     @NonNull\n     String getActivatedThemeId();\n \n+    /**\n+     * Gets activated theme property.\n+     *\n+     * @return activated theme property\n+     */\n+    @NonNull\n+    ThemeProperty getActivatedTheme();\n+\n     /**\n      * Actives a theme.\n      *\n\ndiff --git a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n@@ -79,6 +79,11 @@ public class ThemeServiceImpl implements ThemeService {\n      */\n     private String activatedThemeId;\n \n+    /**\n+     * Activated theme property.\n+     */\n+    private ThemeProperty activatedTheme;\n+\n     public ThemeServiceImpl(HaloProperties haloProperties,\n                             OptionService optionService,\n                             StringCacheStore cacheStore,\n@@ -275,22 +280,41 @@ public List<Group> fetchConfig(String themeId) {\n \n     @Override\n     public String render(String pageName) {\n-        return String.format(RENDER_TEMPLATE, getActivatedThemeId(), pageName);\n+        // Get activated theme\n+        ThemeProperty activatedTheme = getActivatedTheme();\n+        // Get theme folder name\n+        String themeFolderName = Paths.get(activatedTheme.getThemePath()).getFileName().toString();\n+        // Build render url\n+        return String.format(RENDER_TEMPLATE, themeFolderName, pageName);\n     }\n \n     @Override\n     public String getActivatedThemeId() {\n-        if (StringUtils.isBlank(activatedThemeId)) {\n+        if (activatedThemeId == null) {\n             synchronized (this) {\n-                if (StringUtils.isBlank(activatedThemeId)) {\n-                    return optionService.getByProperty(PrimaryProperties.THEME).orElse(DEFAULT_THEME_ID);\n+                if (activatedThemeId == null) {\n+                    activatedThemeId = optionService.getByProperty(PrimaryProperties.THEME).orElse(DEFAULT_THEME_ID);\n                 }\n             }\n         }\n \n         return activatedThemeId;\n     }\n \n+    @Override\n+    public ThemeProperty getActivatedTheme() {\n+        if (activatedTheme == null) {\n+            synchronized (this) {\n+                if (activatedTheme == null) {\n+                    // Get theme property\n+                    activatedTheme = getThemeOfNonNullBy(getActivatedThemeId());\n+                }\n+            }\n+        }\n+\n+        return activatedTheme;\n+    }\n+\n     @Override\n     public ThemeProperty activeTheme(String themeId) {\n         // Check existence of the theme\n@@ -299,9 +323,8 @@ public ThemeProperty activeTheme(String themeId) {\n         // Save the theme to database\n         optionService.saveProperty(PrimaryProperties.THEME, themeId);\n \n-\n-        // Set the activated theme id\n-        setActivatedThemeId(themeId);\n+        // Set activated theme\n+        setActivatedTheme(themeProperty);\n \n         // Clear the cache\n         clearThemeCache();\n@@ -404,8 +427,6 @@ public ThemeProperty fetch(String uri) {\n                 cloneFromGit(uri, themeTmpPath);\n             } else {\n                 downloadZipAndUnzip(uri, themeTmpPath);\n-//            } else {\n-//                throw new UnsupportedMediaTypeException(\"Unsupported download type: \" + uri);\n             }\n \n             return add(themeTmpPath);\n@@ -486,12 +507,12 @@ private void clearThemeCache() {\n     }\n \n     /**\n-     * Set activated theme id.\n+     * Sets activated theme.\n      *\n-     * @param themeId theme id\n+     * @param activatedTheme activated theme\n      */\n-    private void setActivatedThemeId(@Nullable String themeId) {\n-        this.activatedThemeId = themeId;\n+    private void setActivatedTheme(@Nullable ThemeProperty activatedTheme) {\n+        this.activatedTheme = activatedTheme;\n     }\n \n     /**",
    "output": "Fix theme render build error"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/params/AttachmentParam.java b/src/main/java/run/halo/app/model/params/AttachmentParam.java\n--- a/src/main/java/run/halo/app/model/params/AttachmentParam.java\n+++ b/src/main/java/run/halo/app/model/params/AttachmentParam.java\n@@ -0,0 +1,20 @@\n+package run.halo.app.model.params;\n+\n+import lombok.Data;\n+import run.halo.app.model.dto.base.InputConverter;\n+import run.halo.app.model.entity.Attachment;\n+\n+import javax.validation.constraints.NotBlank;\n+\n+/**\n+ * Attachment params.\n+ *\n+ * @author : RYAN0UP\n+ * @date : 2019/04/20\n+ */\n+@Data\n+public class AttachmentParam implements InputConverter<Attachment> {\n+\n+    @NotBlank(message = \"Attachment name must not be blank\")\n+    private String name;\n+}\n\ndiff --git a/src/main/java/run/halo/app/web/controller/admin/api/AttachmentController.java b/src/main/java/run/halo/app/web/controller/admin/api/AttachmentController.java\n--- a/src/main/java/run/halo/app/web/controller/admin/api/AttachmentController.java\n+++ b/src/main/java/run/halo/app/web/controller/admin/api/AttachmentController.java\n@@ -9,9 +9,11 @@\n import org.springframework.web.multipart.MultipartFile;\n import run.halo.app.model.dto.AttachmentOutputDTO;\n import run.halo.app.model.entity.Attachment;\n+import run.halo.app.model.params.AttachmentParam;\n import run.halo.app.model.params.AttachmentQuery;\n import run.halo.app.service.AttachmentService;\n \n+import javax.validation.Valid;\n import java.util.LinkedList;\n import java.util.List;\n \n@@ -58,6 +60,15 @@ public AttachmentOutputDTO getBy(@PathVariable(\"id\") Integer id) {\n         return attachmentService.convertToDto(attachment);\n     }\n \n+    @PutMapping(\"{attachmentId:\\\\d+}\")\n+    @ApiOperation(\"Updates a attachment\")\n+    public AttachmentOutputDTO updateBy(@PathVariable(\"attachmentId\") Integer attachmentId,\n+                                        @RequestBody @Valid AttachmentParam attachmentParam) {\n+        Attachment attachment = attachmentService.getById(attachmentId);\n+        attachmentParam.update(attachment);\n+        return new AttachmentOutputDTO().convertFrom(attachmentService.update(attachment));\n+    }\n+\n     /**\n      * Delete attachment by id\n      *",
    "output": "Create update api for attachment."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/handler/theme/config/support/ThemeProperty.java b/src/main/java/run/halo/app/handler/theme/config/support/ThemeProperty.java\n--- a/src/main/java/run/halo/app/handler/theme/config/support/ThemeProperty.java\n+++ b/src/main/java/run/halo/app/handler/theme/config/support/ThemeProperty.java\n@@ -2,6 +2,8 @@\n \n import lombok.Data;\n \n+import java.util.Objects;\n+\n /**\n  * Theme property.\n  *\n@@ -84,4 +86,17 @@ public static class Author {\n          */\n         private String avatar;\n     }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        ThemeProperty that = (ThemeProperty) o;\n+        return id.equals(that.id);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(id);\n+    }\n }\n\ndiff --git a/src/main/java/run/halo/app/service/ThemeService.java b/src/main/java/run/halo/app/service/ThemeService.java\n--- a/src/main/java/run/halo/app/service/ThemeService.java\n+++ b/src/main/java/run/halo/app/service/ThemeService.java\n@@ -11,6 +11,7 @@\n import java.nio.file.Path;\n import java.util.List;\n import java.util.Optional;\n+import java.util.Set;\n \n /**\n  * @author : RYAN0UP\n@@ -86,10 +87,10 @@ public interface ThemeService {\n     /**\n      * Gets all themes\n      *\n-     * @return list of themes\n+     * @return set of themes\n      */\n     @NonNull\n-    List<ThemeProperty> getThemes();\n+    Set<ThemeProperty> getThemes();\n \n     /**\n      * Lists theme folder by absolute path.\n\ndiff --git a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n@@ -93,7 +93,7 @@ public ThemeProperty getThemeOfNonNullBy(String themeId) {\n     public Optional<ThemeProperty> getThemeBy(String themeId) {\n         Assert.hasText(themeId, \"Theme id must not be blank\");\n \n-        List<ThemeProperty> themes = getThemes();\n+        Set<ThemeProperty> themes = getThemes();\n \n         log.debug(\"Themes type: [{}]\", themes.getClass());\n         log.debug(\"Themes: [{}]\", themes);\n@@ -102,38 +102,33 @@ public Optional<ThemeProperty> getThemeBy(String themeId) {\n     }\n \n     @Override\n-    public List<ThemeProperty> getThemes() {\n-        // Fetch themes from cache\n-        List<ThemeProperty> result = cacheStore.get(THEMES_CACHE_KEY).map(themesCache -> {\n-            try {\n+    public Set<ThemeProperty> getThemes() {\n+        Optional<String> themeCacheString = cacheStore.get(THEMES_CACHE_KEY);\n+\n+        try {\n+            if (themeCacheString.isPresent()) {\n                 // Convert to theme properties\n-                ThemeProperty[] themeProperties = JsonUtils.jsonToObject(themesCache, ThemeProperty[].class);\n-                return Arrays.asList(themeProperties);\n-            } catch (IOException e) {\n-                throw new ServiceException(\"Failed to parse json\", e);\n+                ThemeProperty[] themeProperties = JsonUtils.jsonToObject(themeCacheString.get(), ThemeProperty[].class);\n+                return new HashSet<>(Arrays.asList(themeProperties));\n             }\n-        }).orElseGet(() -> {\n-            try {\n-                // List and filter sub folders\n-                List<Path> themePaths = Files.list(getBasePath()).filter(path -> Files.isDirectory(path)).collect(Collectors.toList());\n \n-                if (CollectionUtils.isEmpty(themePaths)) {\n-                    return Collections.emptyList();\n-                }\n+            // List and filter sub folders\n+            List<Path> themePaths = Files.list(getBasePath()).filter(path -> Files.isDirectory(path)).collect(Collectors.toList());\n \n-                // Get theme properties\n-                List<ThemeProperty> themes = themePaths.stream().map(this::getProperty).collect(Collectors.toList());\n+            if (CollectionUtils.isEmpty(themePaths)) {\n+                return Collections.emptySet();\n+            }\n \n-                // Cache the themes\n-                cacheStore.put(THEMES_CACHE_KEY, JsonUtils.objectToJson(themes));\n+            // Get theme properties\n+            Set<ThemeProperty> themes = themePaths.stream().map(this::getProperty).collect(Collectors.toSet());\n \n-                return themes;\n-            } catch (Exception e) {\n-                throw new ServiceException(\"Themes scan failed\", e);\n-            }\n-        });\n+            // Cache the themes\n+            cacheStore.put(THEMES_CACHE_KEY, JsonUtils.objectToJson(themes));\n \n-        return CollectionUtils.isEmpty(result) ? Collections.emptyList() : result;\n+            return themes;\n+        } catch (IOException e) {\n+            throw new ServiceException(\"Failed to get themes\", e);\n+        }\n     }\n \n     @Override\n\ndiff --git a/src/main/java/run/halo/app/web/controller/admin/api/ThemeController.java b/src/main/java/run/halo/app/web/controller/admin/api/ThemeController.java\n--- a/src/main/java/run/halo/app/web/controller/admin/api/ThemeController.java\n+++ b/src/main/java/run/halo/app/web/controller/admin/api/ThemeController.java\n@@ -12,6 +12,7 @@\n \n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n \n /**\n  * Theme controller.\n@@ -41,7 +42,7 @@ public ThemeProperty getBy(@PathVariable(\"themeId\") String themeId) {\n \n     @GetMapping\n     @ApiOperation(\"List all themes\")\n-    public List<ThemeProperty> listAll() {\n+    public Set<ThemeProperty> listAll() {\n         return themeService.getThemes();\n     }\n \n@@ -118,7 +119,7 @@ public void deleteBy(@PathVariable(\"themeId\") String themeId) {\n \n     @PostMapping(\"upload\")\n     @ApiOperation(\"Upload theme\")\n-    public ThemeProperty uploadTheme(@RequestPart(\"file\") MultipartFile file){\n+    public ThemeProperty uploadTheme(@RequestPart(\"file\") MultipartFile file) {\n         return themeService.upload(file);\n     }\n }",
    "output": "Change theme property list to set"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/utils/FileUtils.java b/src/main/java/run/halo/app/utils/FileUtils.java\n--- a/src/main/java/run/halo/app/utils/FileUtils.java\n+++ b/src/main/java/run/halo/app/utils/FileUtils.java\n@@ -2,6 +2,7 @@\n \n import lombok.extern.slf4j.Slf4j;\n import org.springframework.lang.NonNull;\n+import org.springframework.lang.Nullable;\n import org.springframework.util.Assert;\n import run.halo.app.exception.ForbiddenException;\n \n@@ -11,6 +12,7 @@\n import java.nio.file.*;\n import java.nio.file.attribute.BasicFileAttributes;\n import java.util.Comparator;\n+import java.util.zip.ZipEntry;\n import java.util.zip.ZipInputStream;\n \n /**\n@@ -68,6 +70,86 @@ public static void deleteFolder(Path deletingPath) throws IOException {\n                 .forEach(File::delete);\n     }\n \n+    /**\n+     * Unzip content to the target path.\n+     *\n+     * @param zis        zip input stream must not be null\n+     * @param targetPath target path must not be null and not empty\n+     * @throws IOException\n+     */\n+    public static void unzip(@NonNull ZipInputStream zis, @NonNull Path targetPath) throws IOException {\n+        Assert.notNull(zis, \"Zip input stream must not be null\");\n+        Assert.notNull(targetPath, \"Target path must not be null\");\n+\n+        // Create path if absent\n+        createIfAbsent(targetPath);\n+\n+        // Must be empty\n+        mustBeEmpty(targetPath);\n+\n+        ZipEntry zipEntry = zis.getNextEntry();\n+\n+        while (zipEntry != null) {\n+            // Resolve the entry path\n+            Path entryPath = targetPath.resolve(zipEntry.getName());\n+\n+            // Check directory\n+            FileUtils.checkDirectoryTraversal(targetPath, entryPath);\n+\n+            if (zipEntry.isDirectory()) {\n+                // Create directories\n+                Files.createDirectories(entryPath);\n+            } else {\n+                // Copy file\n+                Files.copy(zis, entryPath);\n+            }\n+\n+            zipEntry = zis.getNextEntry();\n+        }\n+    }\n+\n+    /**\n+     * Creates directories if absent.\n+     *\n+     * @param path path must not be null\n+     * @throws IOException\n+     */\n+    public static void createIfAbsent(@NonNull Path path) throws IOException {\n+        Assert.notNull(path, \"Path must not be null\");\n+\n+        if (Files.notExists(path)) {\n+            // Create directories\n+            Files.createDirectories(path);\n+\n+            log.debug(\"Created directory: [{}]\", path);\n+        }\n+    }\n+\n+    /**\n+     * Checks if the given path is empty.\n+     *\n+     * @param path path must not be null\n+     * @return true if the given path is empty; false otherwise\n+     * @throws IOException\n+     */\n+    public static boolean isEmpty(@NonNull Path path) throws IOException {\n+        Assert.notNull(path, \"Path must not be null\");\n+\n+        return Files.list(path).count() == 0;\n+    }\n+\n+    /**\n+     * The given path must be empty.\n+     *\n+     * @param path path must not be null\n+     * @throws IOException\n+     */\n+    public static void mustBeEmpty(@NonNull Path path) throws IOException {\n+        if (!isEmpty(path)) {\n+            throw new DirectoryNotEmptyException(\"Target directory: \" + path + \" was not empty\");\n+        }\n+    }\n+\n     /**\n      * Checks directory traversal vulnerability.\n      *\n@@ -105,26 +187,51 @@ public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Pa\n         throw new ForbiddenException(\"You cannot access \" + pathToCheck).setErrorData(pathToCheck);\n     }\n \n-    public static void closeQuietly(InputStream inputStream) {\n+    /**\n+     * Closes input stream quietly.\n+     *\n+     * @param inputStream input stream\n+     */\n+    public static void closeQuietly(@Nullable InputStream inputStream) {\n         try {\n             if (inputStream != null) {\n                 inputStream.close();\n             }\n         } catch (IOException e) {\n             // Ignore this exception\n-            log.error(\"Failed to close input stream\", e);\n+            log.warn(\"Failed to close input stream\", e);\n         }\n     }\n \n-    public static void closeQuietly(ZipInputStream zipInputStream) {\n+    /**\n+     * Closes zip input stream quietly.\n+     *\n+     * @param zipInputStream zip input stream\n+     */\n+    public static void closeQuietly(@Nullable ZipInputStream zipInputStream) {\n         try {\n             if (zipInputStream != null) {\n                 zipInputStream.closeEntry();\n                 zipInputStream.close();\n             }\n         } catch (IOException e) {\n             // Ignore this exception\n-            log.error(\"Failed to close zip input stream\", e);\n+            log.warn(\"Failed to close zip input stream\", e);\n+        }\n+    }\n+\n+    /**\n+     * Deletes folder quietly.\n+     *\n+     * @param deletingPath deleting path must not be null\n+     */\n+    public static void deleteFolderQuietly(@NonNull Path deletingPath) {\n+        try {\n+            if (deletingPath != null) {\n+                FileUtils.deleteFolder(deletingPath);\n+            }\n+        } catch (IOException e) {\n+            log.warn(\"Failed to delete \" + deletingPath);\n         }\n     }\n }",
    "output": "Add some useful features to FileUtils"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/utils/FileUtils.java b/src/main/java/run/halo/app/utils/FileUtils.java\n--- a/src/main/java/run/halo/app/utils/FileUtils.java\n+++ b/src/main/java/run/halo/app/utils/FileUtils.java\n@@ -1,20 +1,25 @@\n package run.halo.app.utils;\n \n+import lombok.extern.slf4j.Slf4j;\n import org.springframework.lang.NonNull;\n import org.springframework.util.Assert;\n+import run.halo.app.exception.ForbiddenException;\n \n import java.io.File;\n import java.io.IOException;\n+import java.io.InputStream;\n import java.nio.file.*;\n import java.nio.file.attribute.BasicFileAttributes;\n import java.util.Comparator;\n+import java.util.zip.ZipInputStream;\n \n /**\n  * File utilities.\n  *\n  * @author johnniang\n  * @date 4/9/19\n  */\n+@Slf4j\n public class FileUtils {\n \n     private FileUtils() {\n@@ -62,4 +67,64 @@ public static void deleteFolder(Path deletingPath) throws IOException {\n                 .map(Path::toFile)\n                 .forEach(File::delete);\n     }\n+\n+    /**\n+     * Checks directory traversal vulnerability.\n+     *\n+     * @param parentPath  parent path must not be null.\n+     * @param pathToCheck path to check must not be null\n+     */\n+    public static void checkDirectoryTraversal(@NonNull String parentPath, @NonNull String pathToCheck) {\n+        checkDirectoryTraversal(Paths.get(parentPath), Paths.get(pathToCheck));\n+    }\n+\n+    /**\n+     * Checks directory traversal vulnerability.\n+     *\n+     * @param parentPath  parent path must not be null.\n+     * @param pathToCheck path to check must not be null\n+     */\n+    public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull String pathToCheck) {\n+        checkDirectoryTraversal(parentPath, Paths.get(pathToCheck));\n+    }\n+\n+    /**\n+     * Checks directory traversal vulnerability.\n+     *\n+     * @param parentPath  parent path must not be null.\n+     * @param pathToCheck path to check must not be null\n+     */\n+    public static void checkDirectoryTraversal(@NonNull Path parentPath, @NonNull Path pathToCheck) {\n+        Assert.notNull(parentPath, \"Parent path must not be null\");\n+        Assert.notNull(pathToCheck, \"Path to check must not be null\");\n+\n+        if (pathToCheck.startsWith(parentPath.normalize())) {\n+            return;\n+        }\n+\n+        throw new ForbiddenException(\"You cannot access \" + pathToCheck).setErrorData(pathToCheck);\n+    }\n+\n+    public static void closeQuietly(InputStream inputStream) {\n+        try {\n+            if (inputStream != null) {\n+                inputStream.close();\n+            }\n+        } catch (IOException e) {\n+            // Ignore this exception\n+            log.error(\"Failed to close input stream\", e);\n+        }\n+    }\n+\n+    public static void closeQuietly(ZipInputStream zipInputStream) {\n+        try {\n+            if (zipInputStream != null) {\n+                zipInputStream.closeEntry();\n+                zipInputStream.close();\n+            }\n+        } catch (IOException e) {\n+            // Ignore this exception\n+            log.error(\"Failed to close zip input stream\", e);\n+        }\n+    }\n }\n\ndiff --git a/src/test/java/run/halo/app/utils/DirectoryAttackTest.java b/src/test/java/run/halo/app/utils/DirectoryAttackTest.java\n--- a/src/test/java/run/halo/app/utils/DirectoryAttackTest.java\n+++ b/src/test/java/run/halo/app/utils/DirectoryAttackTest.java\n@@ -3,6 +3,7 @@\n import org.junit.Assert;\n import org.junit.Test;\n \n+import java.io.IOException;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n \n@@ -17,10 +18,9 @@ public class DirectoryAttackTest {\n     private String userHome = System.getProperty(\"user.home\");\n \n     @Test\n-    public void compareDirectoryTest() {\n+    public void compareDirectoryFailureTest() {\n \n-        String workDir = userHome + \"/halo-test/\";\n-        Path workDirPath = Paths.get(workDir);\n+        Path workDirPath = Paths.get(userHome + \"/halo-test/\");\n \n         Path testPath = Paths.get(userHome + \"/../../etc/passwd\");\n \n@@ -30,4 +30,42 @@ public void compareDirectoryTest() {\n         Assert.assertFalse(testPath.startsWith(workDirPath));\n         Assert.assertFalse(workDirPath.startsWith(testPath));\n     }\n+\n+    @Test\n+    public void compareDirectorySuccessfullyTest() {\n+        Path workDirPath = Paths.get(userHome + \"/halo-test/\");\n+\n+        Path testPath = Paths.get(userHome + \"/halo-test/test.txt\");\n+\n+        System.out.println(\"Work directory path: \" + workDirPath);\n+        System.out.println(\"Test path: \" + testPath);\n+\n+        Assert.assertTrue(testPath.startsWith(workDirPath));\n+        Assert.assertFalse(workDirPath.startsWith(testPath));\n+    }\n+\n+\n+    @Test\n+    public void compareDirectorySuccessfullyTest2() {\n+        Path workDirPath = Paths.get(userHome + \"/../../etc/\").normalize();\n+\n+        Path testPath = Paths.get(\"/etc/passwd\");\n+\n+        System.out.println(\"Work directory path: \" + workDirPath);\n+        System.out.println(\"Test path: \" + testPath);\n+\n+        Assert.assertTrue(testPath.startsWith(workDirPath));\n+        Assert.assertFalse(workDirPath.startsWith(testPath));\n+    }\n+\n+    @Test\n+    public void getRealPathTest() {\n+        String pathname = \"/home/test/../../etc/\";\n+        Path path = Paths.get(pathname);\n+\n+        System.out.println(\"Path: \" + path);\n+        System.out.println(\"Absolute path: \" + path.toAbsolutePath());\n+        System.out.println(\"Name count: \" + path.getNameCount());\n+        System.out.println(\"Normalized path: \" + path.normalize());\n+    }\n }",
    "output": "Perfect FileUtils"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/params/AttachmentQuery.java b/src/main/java/run/halo/app/model/params/AttachmentQuery.java\n--- a/src/main/java/run/halo/app/model/params/AttachmentQuery.java\n+++ b/src/main/java/run/halo/app/model/params/AttachmentQuery.java\n@@ -0,0 +1,18 @@\n+package run.halo.app.model.params;\n+\n+import lombok.Data;\n+\n+/**\n+ * Attachment query params.\n+ *\n+ * @author : RYAN0UP\n+ * @date : 2019/04/18\n+ */\n+@Data\n+public class AttachmentQuery {\n+\n+    /**\n+     * Keyword.\n+     */\n+    private String keyword;\n+}\n\ndiff --git a/src/main/java/run/halo/app/repository/AttachmentRepository.java b/src/main/java/run/halo/app/repository/AttachmentRepository.java\n--- a/src/main/java/run/halo/app/repository/AttachmentRepository.java\n+++ b/src/main/java/run/halo/app/repository/AttachmentRepository.java\n@@ -1,13 +1,13 @@\n package run.halo.app.repository;\n \n+import org.springframework.data.jpa.repository.JpaSpecificationExecutor;\n import run.halo.app.model.entity.Attachment;\n import run.halo.app.repository.base.BaseRepository;\n-import run.halo.app.repository.base.BaseRepository;\n \n /**\n  * Attachment repository\n  *\n  * @author johnniang\n  */\n-public interface AttachmentRepository extends BaseRepository<Attachment, Integer> {\n+public interface AttachmentRepository extends BaseRepository<Attachment, Integer>, JpaSpecificationExecutor<Attachment> {\n }\n\ndiff --git a/src/main/java/run/halo/app/service/AttachmentService.java b/src/main/java/run/halo/app/service/AttachmentService.java\n--- a/src/main/java/run/halo/app/service/AttachmentService.java\n+++ b/src/main/java/run/halo/app/service/AttachmentService.java\n@@ -7,6 +7,7 @@\n import run.halo.app.exception.FileOperationException;\n import run.halo.app.model.dto.AttachmentOutputDTO;\n import run.halo.app.model.entity.Attachment;\n+import run.halo.app.model.params.AttachmentQuery;\n import run.halo.app.service.base.CrudService;\n \n \n@@ -24,7 +25,7 @@ public interface AttachmentService extends CrudService<Attachment, Integer> {\n      * @return a page of attachment output dto\n      */\n     @NonNull\n-    Page<AttachmentOutputDTO> pageDtosBy(@NonNull Pageable pageable);\n+    Page<AttachmentOutputDTO> pageDtosBy(@NonNull Pageable pageable, AttachmentQuery attachmentQuery);\n \n     /**\n      * Uploads file.\n\ndiff --git a/src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java b/src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java\n@@ -4,6 +4,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.Pageable;\n+import org.springframework.data.jpa.domain.Specification;\n import org.springframework.lang.NonNull;\n import org.springframework.stereotype.Service;\n import org.springframework.util.Assert;\n@@ -12,13 +13,17 @@\n import run.halo.app.model.dto.AttachmentOutputDTO;\n import run.halo.app.model.entity.Attachment;\n import run.halo.app.model.enums.AttachmentType;\n+import run.halo.app.model.params.AttachmentQuery;\n import run.halo.app.model.properties.AttachmentProperties;\n import run.halo.app.model.support.UploadResult;\n import run.halo.app.repository.AttachmentRepository;\n import run.halo.app.service.AttachmentService;\n import run.halo.app.service.OptionService;\n import run.halo.app.service.base.AbstractCrudService;\n \n+import javax.persistence.criteria.Predicate;\n+import java.util.LinkedList;\n+import java.util.List;\n import java.util.Objects;\n \n /**\n@@ -47,16 +52,36 @@ public AttachmentServiceImpl(AttachmentRepository attachmentRepository,\n     }\n \n     @Override\n-    public Page<AttachmentOutputDTO> pageDtosBy(Pageable pageable) {\n+    public Page<AttachmentOutputDTO> pageDtosBy(@NonNull Pageable pageable, AttachmentQuery attachmentQuery) {\n         Assert.notNull(pageable, \"Page info must not be null\");\n \n         // List all\n-        Page<Attachment> attachmentPage = listAll(pageable);\n+        Page<Attachment> attachmentPage = attachmentRepository.findAll(buildSpecByQuery(attachmentQuery), pageable);\n \n         // Convert and return\n         return attachmentPage.map(this::convertToDto);\n     }\n \n+    @NonNull\n+    private Specification<Attachment> buildSpecByQuery(@NonNull AttachmentQuery attachmentQuery) {\n+        Assert.notNull(attachmentQuery, \"Attachment query must not be null\");\n+\n+        return (Specification<Attachment>) (root, query, criteriaBuilder) -> {\n+            List<Predicate> predicates = new LinkedList<>();\n+\n+            if (attachmentQuery.getKeyword() != null) {\n+\n+                String likeCondition = String.format(\"%%%s%%\", StringUtils.strip(attachmentQuery.getKeyword()));\n+\n+                Predicate nameLike = criteriaBuilder.like(root.get(\"name\"), likeCondition);\n+\n+                predicates.add(criteriaBuilder.or(nameLike));\n+            }\n+\n+            return query.where(predicates.toArray(new Predicate[0])).getRestriction();\n+        };\n+    }\n+\n     @Override\n     public Attachment upload(MultipartFile file) {\n         Assert.notNull(file, \"Multipart file must not be null\");\n\ndiff --git a/src/main/java/run/halo/app/web/controller/admin/api/AttachmentController.java b/src/main/java/run/halo/app/web/controller/admin/api/AttachmentController.java\n--- a/src/main/java/run/halo/app/web/controller/admin/api/AttachmentController.java\n+++ b/src/main/java/run/halo/app/web/controller/admin/api/AttachmentController.java\n@@ -9,6 +9,7 @@\n import org.springframework.web.multipart.MultipartFile;\n import run.halo.app.model.dto.AttachmentOutputDTO;\n import run.halo.app.model.entity.Attachment;\n+import run.halo.app.model.params.AttachmentQuery;\n import run.halo.app.service.AttachmentService;\n \n import java.util.LinkedList;\n@@ -39,8 +40,9 @@ public AttachmentController(AttachmentService attachmentService) {\n      * @return Page<AttachmentOutputDTO>\n      */\n     @GetMapping\n-    public Page<AttachmentOutputDTO> pageBy(@PageableDefault(sort = \"updateTime\", direction = DESC) Pageable pageable) {\n-        return attachmentService.pageDtosBy(pageable);\n+    public Page<AttachmentOutputDTO> pageBy(@PageableDefault(sort = \"updateTime\", direction = DESC) Pageable pageable,\n+                                            AttachmentQuery attachmentQuery) {\n+        return attachmentService.pageDtosBy(pageable, attachmentQuery);\n     }\n \n     /**",
    "output": "Support attachment search."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/ThemeService.java b/src/main/java/run/halo/app/service/ThemeService.java\n--- a/src/main/java/run/halo/app/service/ThemeService.java\n+++ b/src/main/java/run/halo/app/service/ThemeService.java\n@@ -7,6 +7,7 @@\n import run.halo.app.model.support.ThemeFile;\n \n import java.io.File;\n+import java.io.IOException;\n import java.nio.file.Path;\n import java.util.List;\n import java.util.Optional;\n@@ -204,9 +205,19 @@ public interface ThemeService {\n \n     /**\n      * Upload theme.\n+     *\n      * @param file multipart file must not be null\n      * @return theme info\n      */\n     @NonNull\n     ThemeProperty upload(@NonNull MultipartFile file);\n+\n+    /**\n+     * Adds a new theme.\n+     *\n+     * @param themeTmpPath theme temporary path must not be null\n+     * @return theme property\n+     */\n+    @NonNull\n+    ThemeProperty add(@NonNull Path themeTmpPath) throws IOException;\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n@@ -10,7 +10,6 @@\n import freemarker.template.TemplateModelException;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.lang3.StringUtils;\n-import org.springframework.http.MediaType;\n import org.springframework.lang.NonNull;\n import org.springframework.lang.Nullable;\n import org.springframework.stereotype.Service;\n@@ -20,22 +19,19 @@\n import run.halo.app.cache.StringCacheStore;\n import run.halo.app.config.properties.HaloProperties;\n import run.halo.app.exception.*;\n-import run.halo.app.handler.file.FileHandler;\n import run.halo.app.handler.theme.ThemeConfigResolver;\n import run.halo.app.handler.theme.ThemePropertyResolver;\n import run.halo.app.handler.theme.support.Group;\n import run.halo.app.handler.theme.support.ThemeProperty;\n import run.halo.app.model.properties.PrimaryProperties;\n import run.halo.app.model.support.HaloConst;\n import run.halo.app.model.support.ThemeFile;\n-import run.halo.app.model.support.UploadResult;\n import run.halo.app.service.OptionService;\n import run.halo.app.service.ThemeService;\n+import run.halo.app.utils.FileUtils;\n import run.halo.app.utils.FilenameUtils;\n import run.halo.app.utils.JsonUtils;\n \n-import javax.imageio.ImageIO;\n-import java.awt.image.BufferedImage;\n import java.io.File;\n import java.io.IOException;\n import java.nio.file.Files;\n@@ -287,15 +283,6 @@ public String getActivatedThemeId() {\n         return activatedThemeId;\n     }\n \n-    /**\n-     * Set activated theme id.\n-     *\n-     * @param themeId theme id\n-     */\n-    private void setActivatedThemeId(@Nullable String themeId) {\n-        this.activatedThemeId = themeId;\n-    }\n-\n     @Override\n     public ThemeProperty activeTheme(String themeId) {\n         // Check existence of the theme\n@@ -322,12 +309,6 @@ public ThemeProperty activeTheme(String themeId) {\n         return themeProperty;\n     }\n \n-    /**\n-     * Upload theme.\n-     *\n-     * @param file multipart file must not be null\n-     * @return theme info\n-     */\n     @Override\n     public ThemeProperty upload(MultipartFile file) {\n         Assert.notNull(file, \"Multipart file must not be null\");\n@@ -346,7 +327,7 @@ public ThemeProperty upload(MultipartFile file) {\n             file.transferTo(uploadPath);\n \n             // Unzip theme package\n-            ZipUtil.unzip(uploadPath.toFile(),uploadPath.getParent().toFile());\n+            ZipUtil.unzip(uploadPath.toFile(), uploadPath.getParent().toFile());\n \n             // Delete theme package\n             FileUtil.del(uploadPath.toFile());\n@@ -360,6 +341,36 @@ public ThemeProperty upload(MultipartFile file) {\n         }\n     }\n \n+    @Override\n+    public ThemeProperty add(Path themeTmpPath) throws IOException {\n+        Assert.notNull(themeTmpPath, \"Theme temporary path must not be null\");\n+        Assert.isTrue(Files.isDirectory(themeTmpPath), \"Theme temporary path must be a directory\");\n+\n+        // Check property config\n+        Path configPath = getThemePropertyPathOfNullable(themeTmpPath).orElseThrow(() -> new ThemePropertyMissingException(\"Theme property file is dismiss\").setErrorData(themeTmpPath));\n+\n+        ThemeProperty tmpThemeProperty = getProperty(configPath);\n+\n+        // Copy the temporary path to current theme folder\n+        Path targetThemePath = workDir.resolve(tmpThemeProperty.getId());\n+        FileUtils.copyFolder(themeTmpPath, targetThemePath);\n+\n+        // Delete temp theme folder\n+        FileUtils.deleteFolder(themeTmpPath);\n+\n+        // Get property again\n+        return getProperty(targetThemePath);\n+    }\n+\n+    /**\n+     * Set activated theme id.\n+     *\n+     * @param themeId theme id\n+     */\n+    private void setActivatedThemeId(@Nullable String themeId) {\n+        this.activatedThemeId = themeId;\n+    }\n+\n     /**\n      * Lists theme files as tree view.\n      *\n@@ -446,8 +457,14 @@ private void checkDirectory(@NonNull String absoluteName) {\n         }\n     }\n \n-    @Nullable\n-    private Path getPropertyPath(@NonNull Path themePath) {\n+    /**\n+     * Gets property path of nullable.\n+     *\n+     * @param themePath theme path.\n+     * @return an optional property path\n+     */\n+    @NonNull\n+    private Optional<Path> getThemePropertyPathOfNullable(@NonNull Path themePath) {\n         Assert.notNull(themePath, \"Theme path must not be null\");\n \n         for (String propertyPathName : THEME_PROPERTY_FILE_NAMES) {\n@@ -456,28 +473,28 @@ private Path getPropertyPath(@NonNull Path themePath) {\n             log.debug(\"Attempting to find property file: [{}]\", propertyPath);\n             if (Files.exists(propertyPath) && Files.isReadable(propertyPath)) {\n                 log.debug(\"Found property file: [{}]\", propertyPath);\n-                return propertyPath;\n+                return Optional.of(propertyPath);\n             }\n         }\n \n-        return null;\n+        return Optional.empty();\n     }\n \n     /**\n-     * Gets theme property.\n+     * Gets property path of non null.\n      *\n-     * @param themePath must not be null\n-     * @return theme property\n+     * @param themePath theme path.\n+     * @return property path won't be null\n      */\n     @NonNull\n-    private ThemeProperty getProperty(@NonNull Path themePath) {\n-        Assert.notNull(themePath, \"Theme path must not be null\");\n+    private Path getThemePropertyPath(@NonNull Path themePath) {\n+        return getThemePropertyPathOfNullable(themePath).orElseThrow(() -> new ThemePropertyMissingException(themePath + \" dose not exist any theme property file\").setErrorData(themePath));\n+    }\n \n-        Path propertyPath = getPropertyPath(themePath);\n+    private Optional<ThemeProperty> getPropertyOfNullable(Path themePath) {\n+        Assert.notNull(themePath, \"Theme path must not be null\");\n \n-        if (propertyPath == null) {\n-            throw new ThemePropertyMissingException(themePath + \" dose not exist any theme property file\").setErrorData(themePath);\n-        }\n+        Path propertyPath = getThemePropertyPath(themePath);\n \n         try {\n             // Get property content\n@@ -504,10 +521,24 @@ private ThemeProperty getProperty(@NonNull Path themePath) {\n                 themeProperty.setActivated(true);\n             }\n \n-            return themeProperty;\n+            return Optional.of(themeProperty);\n+\n         } catch (IOException e) {\n-            throw new ThemePropertyMissingException(\"Cannot resolve theme property\", e).setErrorData(propertyPath.toString());\n+            log.error(\"Failed to load theme property file\", e);\n         }\n+\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * Gets theme property.\n+     *\n+     * @param themePath must not be null\n+     * @return theme property\n+     */\n+    @NonNull\n+    private ThemeProperty getProperty(@NonNull Path themePath) {\n+        return getPropertyOfNullable(themePath).orElseThrow(() -> new ThemePropertyMissingException(\"Cannot resolve theme property\").setErrorData(themePath));\n     }\n \n     /**\n@@ -517,6 +548,7 @@ private ThemeProperty getProperty(@NonNull Path themePath) {\n      * @return screenshots file name or null if the given theme path has not screenshots\n      * @throws IOException throws when listing files\n      */\n+    @NonNull\n     private Optional<String> getScreenshotsFileName(@NonNull Path themePath) throws IOException {\n         Assert.notNull(themePath, \"Theme path must not be null\");\n \n\ndiff --git a/src/main/java/run/halo/app/utils/FileUtils.java b/src/main/java/run/halo/app/utils/FileUtils.java\n--- a/src/main/java/run/halo/app/utils/FileUtils.java\n+++ b/src/main/java/run/halo/app/utils/FileUtils.java\n@@ -3,9 +3,11 @@\n import org.springframework.lang.NonNull;\n import org.springframework.util.Assert;\n \n+import java.io.File;\n import java.io.IOException;\n import java.nio.file.*;\n import java.nio.file.attribute.BasicFileAttributes;\n+import java.util.Comparator;\n \n /**\n  * File utilities.\n@@ -46,4 +48,18 @@ public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IO\n             }\n         });\n     }\n+\n+    /**\n+     * Deletes folder recursively.\n+     *\n+     * @param deletingPath deleting path must not be null\n+     */\n+    public static void deleteFolder(Path deletingPath) throws IOException {\n+        Assert.notNull(deletingPath, \"Deleting path must not be null\");\n+\n+        Files.walk(deletingPath)\n+                .sorted(Comparator.reverseOrder())\n+                .map(Path::toFile)\n+                .forEach(File::delete);\n+    }\n }",
    "output": "Add a common theme addition service"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/support/HaloConst.java b/src/main/java/run/halo/app/model/support/HaloConst.java\n--- a/src/main/java/run/halo/app/model/support/HaloConst.java\n+++ b/src/main/java/run/halo/app/model/support/HaloConst.java\n@@ -22,7 +22,7 @@ public class HaloConst {\n     /**\n      * Default theme name.\n      */\n-    public final static String DEFAULT_THEME_NAME = \"anatole\";\n+    public final static String DEFAULT_THEME_ID = \"caicai_anatole\";\n \n     /**\n      * version constant\n\ndiff --git a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n@@ -44,7 +44,7 @@\n import java.util.*;\n import java.util.stream.Collectors;\n \n-import static run.halo.app.model.support.HaloConst.DEFAULT_THEME_NAME;\n+import static run.halo.app.model.support.HaloConst.DEFAULT_THEME_ID;\n \n /**\n  * @author : RYAN0UP\n@@ -279,7 +279,7 @@ public String getActivatedThemeId() {\n         if (StringUtils.isBlank(activatedThemeId)) {\n             synchronized (this) {\n                 if (StringUtils.isBlank(activatedThemeId)) {\n-                    return optionService.getByProperty(PrimaryProperties.THEME).orElse(DEFAULT_THEME_NAME);\n+                    return optionService.getByProperty(PrimaryProperties.THEME).orElse(DEFAULT_THEME_ID);\n                 }\n             }\n         }\n\ndiff --git a/src/main/java/run/halo/app/web/controller/core/InstallController.java b/src/main/java/run/halo/app/web/controller/core/InstallController.java\n--- a/src/main/java/run/halo/app/web/controller/core/InstallController.java\n+++ b/src/main/java/run/halo/app/web/controller/core/InstallController.java\n@@ -21,7 +21,7 @@\n import java.util.HashMap;\n import java.util.Map;\n \n-import static run.halo.app.model.support.HaloConst.DEFAULT_THEME_NAME;\n+import static run.halo.app.model.support.HaloConst.DEFAULT_THEME_ID;\n \n /**\n  * Installation controller.\n@@ -166,7 +166,7 @@ private void initSettings(InstallParam installParam) {\n         properties.put(BlogProperties.BLOG_LOCALE, installParam.getLocale());\n         properties.put(BlogProperties.BLOG_TITLE, installParam.getTitle());\n         properties.put(BlogProperties.BLOG_URL, installParam.getUrl());\n-        properties.put(PrimaryProperties.THEME, DEFAULT_THEME_NAME);\n+        properties.put(PrimaryProperties.THEME, DEFAULT_THEME_ID);\n         properties.put(PrimaryProperties.BIRTHDAY, String.valueOf(System.currentTimeMillis()));\n         properties.put(EmailProperties.ENABLED, Boolean.FALSE.toString());\n         properties.put(CommentProperties.NEW_NOTICE, Boolean.FALSE.toString());",
    "output": "Change default theme id to caicai_anatole"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n@@ -223,11 +223,11 @@ public void deleteTheme(String themeId) {\n \n         try {\n             // Delete the folder\n-            Files.deleteIfExists(Paths.get(themeProperty.getThemePath()));\n+            FileUtil.del(Paths.get(themeProperty.getThemePath()));\n \n             // Delete theme cache\n             cacheStore.delete(THEMES_CACHE_KEY);\n-        } catch (IOException e) {\n+        } catch (Exception e) {\n             throw new ServiceException(\"Failed to delete theme folder\", e).setErrorData(themeId);\n         }\n     }\n@@ -351,6 +351,8 @@ public ThemeProperty upload(MultipartFile file) {\n             // Delete theme package\n             FileUtil.del(uploadPath.toFile());\n \n+            cacheStore.delete(THEMES_CACHE_KEY);\n+\n             return getProperty(Paths.get(workDir.toString(), originalBasename));\n         } catch (IOException e) {\n             log.error(\"Failed to upload theme to local: \" + uploadPath, e);",
    "output": "Clear cache when theme uploaded."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/ThemeService.java b/src/main/java/run/halo/app/service/ThemeService.java\n--- a/src/main/java/run/halo/app/service/ThemeService.java\n+++ b/src/main/java/run/halo/app/service/ThemeService.java\n@@ -1,6 +1,7 @@\n package run.halo.app.service;\n \n import org.springframework.lang.NonNull;\n+import org.springframework.web.multipart.MultipartFile;\n import run.halo.app.handler.theme.support.Group;\n import run.halo.app.handler.theme.support.ThemeProperty;\n import run.halo.app.model.support.ThemeFile;\n@@ -200,4 +201,12 @@ public interface ThemeService {\n      */\n     @NonNull\n     ThemeProperty activeTheme(@NonNull String themeId);\n+\n+    /**\n+     * Upload theme.\n+     * @param file multipart file must not be null\n+     * @return theme info\n+     */\n+    @NonNull\n+    ThemeProperty upload(@NonNull MultipartFile file);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n@@ -1,33 +1,41 @@\n package run.halo.app.service.impl;\n \n+import cn.hutool.core.io.FileUtil;\n import cn.hutool.core.io.file.FileReader;\n import cn.hutool.core.io.file.FileWriter;\n import cn.hutool.core.text.StrBuilder;\n import cn.hutool.core.util.StrUtil;\n+import cn.hutool.core.util.ZipUtil;\n import freemarker.template.Configuration;\n import freemarker.template.TemplateModelException;\n import lombok.extern.slf4j.Slf4j;\n import org.apache.commons.lang3.StringUtils;\n+import org.springframework.http.MediaType;\n import org.springframework.lang.NonNull;\n import org.springframework.lang.Nullable;\n import org.springframework.stereotype.Service;\n import org.springframework.util.Assert;\n import org.springframework.util.CollectionUtils;\n+import org.springframework.web.multipart.MultipartFile;\n import run.halo.app.cache.StringCacheStore;\n import run.halo.app.config.properties.HaloProperties;\n import run.halo.app.exception.*;\n+import run.halo.app.handler.file.FileHandler;\n import run.halo.app.handler.theme.ThemeConfigResolver;\n import run.halo.app.handler.theme.ThemePropertyResolver;\n import run.halo.app.handler.theme.support.Group;\n import run.halo.app.handler.theme.support.ThemeProperty;\n import run.halo.app.model.properties.PrimaryProperties;\n import run.halo.app.model.support.HaloConst;\n import run.halo.app.model.support.ThemeFile;\n+import run.halo.app.model.support.UploadResult;\n import run.halo.app.service.OptionService;\n import run.halo.app.service.ThemeService;\n import run.halo.app.utils.FilenameUtils;\n import run.halo.app.utils.JsonUtils;\n \n+import javax.imageio.ImageIO;\n+import java.awt.image.BufferedImage;\n import java.io.File;\n import java.io.IOException;\n import java.nio.file.Files;\n@@ -314,6 +322,42 @@ public ThemeProperty activeTheme(String themeId) {\n         return themeProperty;\n     }\n \n+    /**\n+     * Upload theme.\n+     *\n+     * @param file multipart file must not be null\n+     * @return theme info\n+     */\n+    @Override\n+    public ThemeProperty upload(MultipartFile file) {\n+        Assert.notNull(file, \"Multipart file must not be null\");\n+\n+        // Get upload path\n+        Path uploadPath = Paths.get(workDir.toString(), file.getOriginalFilename());\n+\n+        final String originalBasename = FilenameUtils.getBasename(file.getOriginalFilename());\n+\n+        log.info(\"Uploading theme to directory: [{}]\", uploadPath.toString());\n+\n+        try {\n+            // Create directory\n+            Files.createDirectories(uploadPath.getParent());\n+            Files.createFile(uploadPath);\n+            file.transferTo(uploadPath);\n+\n+            // Unzip theme package\n+            ZipUtil.unzip(uploadPath.toFile(),uploadPath.getParent().toFile());\n+\n+            // Delete theme package\n+            FileUtil.del(uploadPath.toFile());\n+\n+            return getProperty(Paths.get(workDir.toString(), originalBasename));\n+        } catch (IOException e) {\n+            log.error(\"Failed to upload theme to local: \" + uploadPath, e);\n+            throw new ServiceException(\"Failed to upload theme to local\").setErrorData(uploadPath);\n+        }\n+    }\n+\n     /**\n      * Lists theme files as tree view.\n      *\n\ndiff --git a/src/main/java/run/halo/app/web/controller/admin/api/ThemeController.java b/src/main/java/run/halo/app/web/controller/admin/api/ThemeController.java\n--- a/src/main/java/run/halo/app/web/controller/admin/api/ThemeController.java\n+++ b/src/main/java/run/halo/app/web/controller/admin/api/ThemeController.java\n@@ -2,6 +2,7 @@\n \n import io.swagger.annotations.ApiOperation;\n import org.springframework.web.bind.annotation.*;\n+import org.springframework.web.multipart.MultipartFile;\n import run.halo.app.handler.theme.support.Group;\n import run.halo.app.model.support.BaseResponse;\n import run.halo.app.model.support.ThemeFile;\n@@ -115,4 +116,9 @@ public void deleteBy(@PathVariable(\"themeId\") String themeId) {\n         themeService.deleteTheme(themeId);\n     }\n \n+    @PostMapping(\"upload\")\n+    @ApiOperation(\"Upload theme\")\n+    public ThemeProperty uploadTheme(@RequestPart(\"file\") MultipartFile file){\n+        return themeService.upload(file);\n+    }\n }",
    "output": "Complates upload theme api."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/dto/AttachmentOutputDTO.java b/src/main/java/run/halo/app/model/dto/AttachmentOutputDTO.java\n--- a/src/main/java/run/halo/app/model/dto/AttachmentOutputDTO.java\n+++ b/src/main/java/run/halo/app/model/dto/AttachmentOutputDTO.java\n@@ -5,6 +5,8 @@\n import run.halo.app.model.enums.AttachmentType;\n import lombok.Data;\n \n+import java.util.Date;\n+\n /**\n  * Attachment output dto.\n  *\n@@ -35,4 +37,6 @@ public class AttachmentOutputDTO implements OutputConverter<AttachmentOutputDTO,\n     private Long size;\n \n     private AttachmentType type;\n+\n+    private Date createTime;\n }",
    "output": "Add createTime for AttachmentOutputDTO."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/web/controller/admin/api/AttachmentController.java b/src/main/java/run/halo/app/web/controller/admin/api/AttachmentController.java\n--- a/src/main/java/run/halo/app/web/controller/admin/api/AttachmentController.java\n+++ b/src/main/java/run/halo/app/web/controller/admin/api/AttachmentController.java\n@@ -52,7 +52,8 @@ public Page<AttachmentOutputDTO> pageBy(@PageableDefault(sort = \"updateTime\", di\n     @GetMapping(\"{id:\\\\d+}\")\n     @ApiOperation(\"Get attachment detail by id\")\n     public AttachmentOutputDTO getBy(@PathVariable(\"id\") Integer id) {\n-        return new AttachmentOutputDTO().convertFrom(attachmentService.getById(id));\n+        Attachment attachment = attachmentService.getById(id);\n+        return attachmentService.convertToDto(attachment);\n     }\n \n     /**",
    "output": "Resolve attachment relative path problem again."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/handler/theme/support/ThemeProperty.java b/src/main/java/run/halo/app/handler/theme/support/ThemeProperty.java\n--- a/src/main/java/run/halo/app/handler/theme/support/ThemeProperty.java\n+++ b/src/main/java/run/halo/app/handler/theme/support/ThemeProperty.java\n@@ -78,5 +78,10 @@ public static class Author {\n          * Author website.\n          */\n         private String website;\n+\n+        /**\n+         * Author avatar.\n+         */\n+        private String avatar;\n     }\n }",
    "output": "Add avatar property in ThemeProperty#Author"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/dto/base/OutputConverter.java b/src/main/java/run/halo/app/model/dto/base/OutputConverter.java\n--- a/src/main/java/run/halo/app/model/dto/base/OutputConverter.java\n+++ b/src/main/java/run/halo/app/model/dto/base/OutputConverter.java\n@@ -1,5 +1,7 @@\n package run.halo.app.model.dto.base;\n \n+import org.springframework.lang.NonNull;\n+\n import static run.halo.app.utils.BeanUtils.updateProperties;\n \n /**\n@@ -20,6 +22,7 @@ public interface OutputConverter<DTO extends OutputConverter<DTO, DOMAIN>, DOMAI\n      * @return converted dto data\n      */\n     @SuppressWarnings(\"unchecked\")\n+    @NonNull\n     default <T extends DTO> T convertFrom(DOMAIN domain) {\n \n         updateProperties(domain, this);\n\ndiff --git a/src/main/java/run/halo/app/service/AttachmentService.java b/src/main/java/run/halo/app/service/AttachmentService.java\n--- a/src/main/java/run/halo/app/service/AttachmentService.java\n+++ b/src/main/java/run/halo/app/service/AttachmentService.java\n@@ -1,13 +1,12 @@\n package run.halo.app.service;\n \n-import run.halo.app.exception.FileOperationException;\n-import run.halo.app.model.dto.AttachmentOutputDTO;\n-import run.halo.app.model.entity.Attachment;\n-import run.halo.app.service.base.CrudService;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.Pageable;\n import org.springframework.lang.NonNull;\n import org.springframework.web.multipart.MultipartFile;\n+import run.halo.app.exception.FileOperationException;\n+import run.halo.app.model.dto.AttachmentOutputDTO;\n+import run.halo.app.model.entity.Attachment;\n import run.halo.app.service.base.CrudService;\n \n \n@@ -45,4 +44,13 @@ public interface AttachmentService extends CrudService<Attachment, Integer> {\n      */\n     @NonNull\n     Attachment removePermanently(@NonNull Integer id);\n+\n+    /**\n+     * Converts to attachment output dto.\n+     *\n+     * @param attachment attachment must not be null\n+     * @return an attachment output dto\n+     */\n+    @NonNull\n+    AttachmentOutputDTO convertToDto(@NonNull Attachment attachment);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java b/src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/AttachmentServiceImpl.java\n@@ -1,5 +1,13 @@\n package run.halo.app.service.impl;\n \n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.lang.NonNull;\n+import org.springframework.stereotype.Service;\n+import org.springframework.util.Assert;\n+import org.springframework.web.multipart.MultipartFile;\n import run.halo.app.handler.file.FileHandlers;\n import run.halo.app.model.dto.AttachmentOutputDTO;\n import run.halo.app.model.entity.Attachment;\n@@ -10,15 +18,8 @@\n import run.halo.app.service.AttachmentService;\n import run.halo.app.service.OptionService;\n import run.halo.app.service.base.AbstractCrudService;\n-import lombok.extern.slf4j.Slf4j;\n-import org.springframework.data.domain.Page;\n-import org.springframework.data.domain.Pageable;\n-import org.springframework.lang.NonNull;\n-import org.springframework.stereotype.Service;\n-import org.springframework.util.Assert;\n-import org.springframework.web.multipart.MultipartFile;\n-import run.halo.app.handler.file.FileHandlers;\n-import run.halo.app.service.base.AbstractCrudService;\n+\n+import java.util.Objects;\n \n /**\n  * AttachmentService implementation class\n@@ -53,7 +54,7 @@ public Page<AttachmentOutputDTO> pageDtosBy(Pageable pageable) {\n         Page<Attachment> attachmentPage = listAll(pageable);\n \n         // Convert and return\n-        return attachmentPage.map(attachment -> new AttachmentOutputDTO().convertFrom(attachment));\n+        return attachmentPage.map(this::convertToDto);\n     }\n \n     @Override\n@@ -102,6 +103,29 @@ public Attachment removePermanently(Integer id) {\n         return deletedAttachment;\n     }\n \n+    @Override\n+    public AttachmentOutputDTO convertToDto(Attachment attachment) {\n+        Assert.notNull(attachment, \"Attachment must not be null\");\n+\n+        // Get blog base url\n+        String blogBaseUrl = optionService.getBlogBaseUrl();\n+\n+        // Convert to output dto\n+        AttachmentOutputDTO attachmentOutputDTO = new AttachmentOutputDTO().convertFrom(attachment);\n+\n+        if (Objects.equals(attachmentOutputDTO.getType(), AttachmentType.LOCAL)) {\n+            // Append blog base url to path and thumbnail\n+            String fullPath = StringUtils.join(blogBaseUrl, \"/\", attachmentOutputDTO.getPath());\n+            String fullThumbPath = StringUtils.join(blogBaseUrl, \"/\", attachmentOutputDTO.getThumbPath());\n+\n+            // Set full path and full thumb path\n+            attachmentOutputDTO.setPath(fullPath);\n+            attachmentOutputDTO.setThumbPath(fullThumbPath);\n+        }\n+\n+        return attachmentOutputDTO;\n+    }\n+\n     /**\n      * Get attachment type from options.\n      *\n\ndiff --git a/src/main/java/run/halo/app/web/controller/admin/api/AttachmentController.java b/src/main/java/run/halo/app/web/controller/admin/api/AttachmentController.java\n--- a/src/main/java/run/halo/app/web/controller/admin/api/AttachmentController.java\n+++ b/src/main/java/run/halo/app/web/controller/admin/api/AttachmentController.java\n@@ -1,15 +1,15 @@\n package run.halo.app.web.controller.admin.api;\n \n-import run.halo.app.model.dto.AttachmentOutputDTO;\n-import run.halo.app.model.entity.Attachment;\n-import run.halo.app.service.AttachmentService;\n import io.swagger.annotations.ApiOperation;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.Pageable;\n import org.springframework.data.web.PageableDefault;\n import org.springframework.http.MediaType;\n import org.springframework.web.bind.annotation.*;\n import org.springframework.web.multipart.MultipartFile;\n+import run.halo.app.model.dto.AttachmentOutputDTO;\n+import run.halo.app.model.entity.Attachment;\n+import run.halo.app.service.AttachmentService;\n \n import java.util.LinkedList;\n import java.util.List;\n@@ -63,13 +63,13 @@ public AttachmentOutputDTO getBy(@PathVariable(\"id\") Integer id) {\n     @DeleteMapping(\"{id:\\\\d+}\")\n     @ApiOperation(\"Delete attachment by id\")\n     public AttachmentOutputDTO deletePermanently(@PathVariable(\"id\") Integer id) {\n-        return new AttachmentOutputDTO().convertFrom(attachmentService.removePermanently(id));\n+        return attachmentService.convertToDto(attachmentService.removePermanently(id));\n     }\n \n     @PostMapping(\"upload\")\n     @ApiOperation(\"Uploads single file\")\n     public AttachmentOutputDTO uploadAttachment(@RequestPart(\"file\") MultipartFile file) {\n-        return new AttachmentOutputDTO().convertFrom(attachmentService.upload(file));\n+        return attachmentService.convertToDto(attachmentService.upload(file));\n     }\n \n     @PostMapping(value = \"uploads\", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)\n@@ -81,7 +81,7 @@ public List<AttachmentOutputDTO> uploadAttachments(@RequestPart(\"files\") Multipa\n             // Upload single file\n             Attachment attachment = attachmentService.upload(file);\n             // Convert and add\n-            result.add(new AttachmentOutputDTO().convertFrom(attachment));\n+            result.add(attachmentService.convertToDto(attachment));\n         }\n \n         return result;",
    "output": "Resolve attachment relative path problem"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java b/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n@@ -8,6 +8,7 @@\n import org.springframework.stereotype.Service;\n import org.springframework.util.Assert;\n import org.springframework.util.CollectionUtils;\n+import run.halo.app.cache.StringCacheStore;\n import run.halo.app.exception.MissingPropertyException;\n import run.halo.app.model.dto.OptionOutputDTO;\n import run.halo.app.model.entity.Option;\n@@ -16,6 +17,7 @@\n import run.halo.app.model.properties.*;\n import run.halo.app.repository.OptionRepository;\n import run.halo.app.service.OptionService;\n+import run.halo.app.service.ThemeService;\n import run.halo.app.service.base.AbstractCrudService;\n import run.halo.app.utils.HaloUtils;\n import run.halo.app.utils.ServiceUtils;\n@@ -40,11 +42,15 @@ public class OptionServiceImpl extends AbstractCrudService<Option, Integer> impl\n \n     private final ApplicationContext applicationContext;\n \n+    private final StringCacheStore cacheStore;\n+\n     public OptionServiceImpl(OptionRepository optionRepository,\n-                             ApplicationContext applicationContext) {\n+                             ApplicationContext applicationContext,\n+                             StringCacheStore cacheStore) {\n         super(optionRepository);\n         this.optionRepository = optionRepository;\n         this.applicationContext = applicationContext;\n+        this.cacheStore = cacheStore;\n     }\n \n     @Override\n@@ -77,6 +83,8 @@ public void save(String key, String value) {\n         Option savedOption = optionRepository.save(option);\n \n         log.debug(\"Saved option: [{}]\", savedOption);\n+\n+        cacheStore.delete(ThemeService.THEMES_CACHE_KEY);\n     }\n \n     @Override",
    "output": "Clear theme cache when saving options"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/listener/StartedListener.java b/src/main/java/run/halo/app/listener/StartedListener.java\n--- a/src/main/java/run/halo/app/listener/StartedListener.java\n+++ b/src/main/java/run/halo/app/listener/StartedListener.java\n@@ -1,6 +1,5 @@\n package run.halo.app.listener;\n \n-import cn.hutool.core.util.StrUtil;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import freemarker.template.TemplateModelException;\n import lombok.extern.slf4j.Slf4j;\n@@ -13,14 +12,12 @@\n import run.halo.app.config.properties.HaloProperties;\n import run.halo.app.model.entity.User;\n import run.halo.app.model.params.UserParam;\n-import run.halo.app.model.properties.BlogProperties;\n import run.halo.app.model.properties.PrimaryProperties;\n import run.halo.app.model.support.HaloConst;\n import run.halo.app.service.OptionService;\n import run.halo.app.service.ThemeService;\n import run.halo.app.service.UserService;\n import run.halo.app.utils.FileUtils;\n-import run.halo.app.utils.HaloUtils;\n \n import java.io.IOException;\n import java.net.URI;\n@@ -163,7 +160,7 @@ private void initThemes() {\n             // Create theme folder\n             Path themePath = themeService.getBasePath();\n \n-            if (Files.notExists(themePath)) {\n+            if (!haloProperties.getProductionEnv() || Files.notExists(themePath)) {\n                 log.info(\"Copying theme folder from [{}] to [{}]\", source, themePath);\n \n                 FileUtils.copyFolder(source, themePath);",
    "output": "Allow copying theme folder in non production environment"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/support/ThemeFile.java b/src/main/java/run/halo/app/model/support/ThemeFile.java\n--- a/src/main/java/run/halo/app/model/support/ThemeFile.java\n+++ b/src/main/java/run/halo/app/model/support/ThemeFile.java\n@@ -3,6 +3,7 @@\n import lombok.Data;\n import lombok.ToString;\n \n+import java.util.Comparator;\n import java.util.List;\n \n /**\n@@ -13,7 +14,7 @@\n  */\n @Data\n @ToString\n-public class ThemeFile {\n+public class ThemeFile implements Comparator<ThemeFile> {\n \n     private String name;\n \n@@ -24,4 +25,17 @@ public class ThemeFile {\n     private Boolean editable;\n \n     private List<ThemeFile> node;\n+\n+    @Override\n+    public int compare(ThemeFile leftFile, ThemeFile rightFile) {\n+        if (leftFile.isFile && !rightFile.isFile) {\n+            return 1;\n+        }\n+\n+        if (!leftFile.isFile && rightFile.isFile) {\n+            return -1;\n+        }\n+\n+        return leftFile.getName().compareTo(rightFile.getName());\n+    }\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n@@ -343,7 +343,7 @@ private List<ThemeFile> listThemeFileTree(@NonNull Path topPath) {\n             });\n \n             // Sort with isFile param\n-            themeFiles.sort(Comparator.comparing(ThemeFile::getIsFile));\n+            themeFiles.sort(new ThemeFile());\n \n             return themeFiles;\n         } catch (IOException e) {",
    "output": "Refactor theme files comparision rule"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/dto/post/PostSimpleOutputDTO.java b/src/main/java/run/halo/app/model/dto/post/PostSimpleOutputDTO.java\n--- a/src/main/java/run/halo/app/model/dto/post/PostSimpleOutputDTO.java\n+++ b/src/main/java/run/halo/app/model/dto/post/PostSimpleOutputDTO.java\n@@ -24,15 +24,15 @@ public class PostSimpleOutputDTO extends PostMinimalOutputDTO {\n \n     private String thumbnail;\n \n-    private Long visits;\n+    private Long visits = 0L;\n \n     private Boolean disallowComment;\n \n     private String template;\n \n-    private Integer topPriority;\n+    private Integer topPriority = 0;\n \n     private PostCreateFrom createFrom;\n \n-    private Long likes;\n+    private Long likes = 0L;\n }\n\ndiff --git a/src/main/java/run/halo/app/service/PostService.java b/src/main/java/run/halo/app/service/PostService.java\n--- a/src/main/java/run/halo/app/service/PostService.java\n+++ b/src/main/java/run/halo/app/service/PostService.java\n@@ -183,5 +183,14 @@ public interface PostService extends CrudService<Post, Integer> {\n      * @return a page of post simple output dto\n      */\n     @NonNull\n-    Page<PostSimpleOutputDTO> convertTo(@NonNull Page<Post> postPage);\n+    Page<PostSimpleOutputDTO> convertToSimpleDto(@NonNull Page<Post> postPage);\n+\n+    /**\n+     * Converts to a page of post list vo.\n+     *\n+     * @param postPage post page must not be null\n+     * @return a page of post list vo\n+     */\n+    @NonNull\n+    Page<PostListVO> convertToListVo(@NonNull Page<Post> postPage);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n@@ -116,6 +116,13 @@ public Page<Post> pageBy(PostQuery postQuery, Pageable pageable) {\n         return postRepository.findAll(buildSpecByQuery(postQuery), pageable);\n     }\n \n+    /**\n+     * Build specification by post query.\n+     *\n+     * @param postQuery post query must not be null\n+     * @return a post specification\n+     */\n+    @NonNull\n     private Specification<Post> buildSpecByQuery(@NonNull PostQuery postQuery) {\n         Assert.notNull(postQuery, \"Post query must not be null\");\n \n@@ -167,44 +174,7 @@ public Page<PostSimpleOutputDTO> pageSimpleDtoByStatus(PostStatus status, Pageab\n     public Page<PostListVO> pageListVoBy(PostStatus status, Pageable pageable) {\n         Page<Post> postPage = pageBy(status, pageable);\n \n-        List<Post> posts = postPage.getContent();\n-\n-        Set<Integer> postIds = ServiceUtils.fetchProperty(posts, Post::getId);\n-\n-        // Get tag list map\n-        Map<Integer, List<Tag>> tagListMap = postTagService.listTagListMapBy(postIds);\n-\n-        // Get category list map\n-        Map<Integer, List<Category>> categoryListMap = postCategoryService.listCategoryListMap(postIds);\n-\n-        // Get comment count\n-        Map<Integer, Long> commentCountMap = commentService.countByPostIds(postIds);\n-\n-\n-        return postPage.map(post -> {\n-            PostListVO postListVO = new PostListVO().convertFrom(post);\n-\n-            Optional.ofNullable(tagListMap.get(post.getId())).orElseGet(LinkedList::new);\n-\n-            // Set tags\n-            postListVO.setTags(Optional.ofNullable(tagListMap.get(post.getId()))\n-                    .orElseGet(LinkedList::new)\n-                    .stream()\n-                    .map(tag -> new TagOutputDTO().<TagOutputDTO>convertFrom(tag))\n-                    .collect(Collectors.toList()));\n-\n-            // Set categories\n-            postListVO.setCategories(Optional.ofNullable(categoryListMap.get(post.getId()))\n-                    .orElseGet(LinkedList::new)\n-                    .stream()\n-                    .map(category -> new CategoryOutputDTO().<CategoryOutputDTO>convertFrom(category))\n-                    .collect(Collectors.toList()));\n-\n-            // Set comment count\n-            postListVO.setCommentCount(commentCountMap.getOrDefault(post.getId(), 0L));\n-\n-            return postListVO;\n-        });\n+        return convertToListVo(postPage);\n     }\n \n     /**\n@@ -393,6 +363,58 @@ public Post removeById(Integer postId) {\n         return super.removeById(postId);\n     }\n \n+\n+    @Override\n+    public Page<PostSimpleOutputDTO> convertToSimpleDto(@NonNull Page<Post> postPage) {\n+        Assert.notNull(postPage, \"Post page must not be null\");\n+\n+        return postPage.map(post -> new PostSimpleOutputDTO().convertFrom(post));\n+    }\n+\n+    @Override\n+    public Page<PostListVO> convertToListVo(Page<Post> postPage) {\n+        Assert.notNull(postPage, \"Post page must not be null\");\n+\n+        List<Post> posts = postPage.getContent();\n+\n+        Set<Integer> postIds = ServiceUtils.fetchProperty(posts, Post::getId);\n+\n+        // Get tag list map\n+        Map<Integer, List<Tag>> tagListMap = postTagService.listTagListMapBy(postIds);\n+\n+        // Get category list map\n+        Map<Integer, List<Category>> categoryListMap = postCategoryService.listCategoryListMap(postIds);\n+\n+        // Get comment count\n+        Map<Integer, Long> commentCountMap = commentService.countByPostIds(postIds);\n+\n+\n+        return postPage.map(post -> {\n+            PostListVO postListVO = new PostListVO().convertFrom(post);\n+\n+            Optional.ofNullable(tagListMap.get(post.getId())).orElseGet(LinkedList::new);\n+\n+            // Set tags\n+            postListVO.setTags(Optional.ofNullable(tagListMap.get(post.getId()))\n+                    .orElseGet(LinkedList::new)\n+                    .stream()\n+                    .map(tag -> new TagOutputDTO().<TagOutputDTO>convertFrom(tag))\n+                    .collect(Collectors.toList()));\n+\n+            // Set categories\n+            postListVO.setCategories(Optional.ofNullable(categoryListMap.get(post.getId()))\n+                    .orElseGet(LinkedList::new)\n+                    .stream()\n+                    .map(category -> new CategoryOutputDTO().<CategoryOutputDTO>convertFrom(category))\n+                    .collect(Collectors.toList()));\n+\n+            // Set comment count\n+            postListVO.setCommentCount(commentCountMap.getOrDefault(post.getId(), 0L));\n+\n+            return postListVO;\n+        });\n+    }\n+\n     /**\n      * Converts to post minimal output dto.\n      *\n@@ -411,13 +433,6 @@ private List<PostMinimalOutputDTO> convertTo(@NonNull List<Post> posts) {\n                 .collect(Collectors.toList());\n     }\n \n-    @Override\n-    public Page<PostSimpleOutputDTO> convertTo(@NonNull Page<Post> postPage) {\n-        Assert.notNull(postPage, \"Post page must not be null\");\n-\n-        return postPage.map(post -> new PostSimpleOutputDTO().convertFrom(post));\n-    }\n-\n     /**\n      * Converts to post detail vo.\n      *\n\ndiff --git a/src/main/java/run/halo/app/web/controller/admin/api/PostController.java b/src/main/java/run/halo/app/web/controller/admin/api/PostController.java\n--- a/src/main/java/run/halo/app/web/controller/admin/api/PostController.java\n+++ b/src/main/java/run/halo/app/web/controller/admin/api/PostController.java\n@@ -12,6 +12,7 @@\n import run.halo.app.model.params.PostParam;\n import run.halo.app.model.params.PostQuery;\n import run.halo.app.model.vo.PostDetailVO;\n+import run.halo.app.model.vo.PostListVO;\n import run.halo.app.service.*;\n \n import javax.validation.Valid;\n@@ -53,10 +54,10 @@ public PostController(PostService postService,\n \n     @GetMapping\n     @ApiOperation(\"Lists posts\")\n-    public Page<PostSimpleOutputDTO> pageBy(@PageableDefault(sort = \"updateTime\", direction = DESC) Pageable pageable,\n-                                            PostQuery postQuery) {\n+    public Page<PostListVO> pageBy(@PageableDefault(sort = \"updateTime\", direction = DESC) Pageable pageable,\n+                                   PostQuery postQuery) {\n         Page<Post> postPage = postService.pageBy(postQuery, pageable);\n-        return postService.convertTo(postPage);\n+        return postService.convertToListVo(postPage);\n     }\n \n     @GetMapping(\"latest\")",
    "output": "Extract pageListVoBy to convertToListVo in PostService"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/params/PostQuery.java b/src/main/java/run/halo/app/model/params/PostQuery.java\n--- a/src/main/java/run/halo/app/model/params/PostQuery.java\n+++ b/src/main/java/run/halo/app/model/params/PostQuery.java\n@@ -0,0 +1,30 @@\n+package run.halo.app.model.params;\n+\n+import lombok.Data;\n+import run.halo.app.model.enums.PostStatus;\n+\n+/**\n+ * Post query.\n+ *\n+ * @author johnniang\n+ * @date 4/10/19\n+ */\n+@Data\n+public class PostQuery {\n+\n+    /**\n+     * Keyword.\n+     */\n+    private String keyword;\n+\n+    /**\n+     * Post status.\n+     */\n+    private PostStatus status;\n+\n+    /**\n+     * Category id.\n+     */\n+    private Integer categoryId;\n+\n+}\n\ndiff --git a/src/main/java/run/halo/app/service/PostService.java b/src/main/java/run/halo/app/service/PostService.java\n--- a/src/main/java/run/halo/app/service/PostService.java\n+++ b/src/main/java/run/halo/app/service/PostService.java\n@@ -1,19 +1,19 @@\n package run.halo.app.service;\n \n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.lang.NonNull;\n+import org.springframework.transaction.annotation.Transactional;\n import run.halo.app.model.dto.post.PostMinimalOutputDTO;\n import run.halo.app.model.dto.post.PostSimpleOutputDTO;\n import run.halo.app.model.entity.Post;\n import run.halo.app.model.enums.PostStatus;\n+import run.halo.app.model.params.PostQuery;\n import run.halo.app.model.vo.ArchiveMonthVO;\n import run.halo.app.model.vo.ArchiveYearVO;\n import run.halo.app.model.vo.PostDetailVO;\n import run.halo.app.model.vo.PostListVO;\n import run.halo.app.service.base.CrudService;\n-import org.springframework.data.domain.Page;\n-import org.springframework.data.domain.Pageable;\n-import org.springframework.lang.NonNull;\n-import org.springframework.transaction.annotation.Transactional;\n-import run.halo.app.service.base.CrudService;\n \n import java.util.List;\n import java.util.Set;\n@@ -56,18 +56,28 @@ public interface PostService extends CrudService<Post, Integer> {\n     Page<Post> pageLatest(int top);\n \n     /**\n-     * List by status and type\n+     * Lists by status and type\n      *\n      * @param status   post status must not be null\n      * @param pageable page info must not be null\n-     * @return Page<PostSimpleOutputDTO>\n+     * @return a page of post\n      */\n     @NonNull\n     Page<Post> pageBy(@NonNull PostStatus status, @NonNull Pageable pageable);\n \n+    /**\n+     * Pages posts.\n+     *\n+     * @param postQuery post query must not be null\n+     * @param pageable  page info must not be null\n+     * @return a page of post\n+     */\n+    @NonNull\n+    Page<Post> pageBy(@NonNull PostQuery postQuery, @NonNull Pageable pageable);\n+\n \n     /**\n-     * List simple output dto by status and type\n+     * Lists simple output dto by status and type\n      *\n      * @param status   post status must not be null\n      * @param pageable page info must not be null\n@@ -165,4 +175,13 @@ public interface PostService extends CrudService<Post, Integer> {\n      */\n     @NonNull\n     List<ArchiveMonthVO> listMonthArchives();\n+\n+    /**\n+     * Converts to a page of post simple output dto.\n+     *\n+     * @param postPage post page must not be null\n+     * @return a page of post simple output dto\n+     */\n+    @NonNull\n+    Page<PostSimpleOutputDTO> convertTo(@NonNull Page<Post> postPage);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/PostServiceImpl.java\n@@ -1,10 +1,12 @@\n package run.halo.app.service.impl;\n \n import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang3.StringUtils;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.PageRequest;\n import org.springframework.data.domain.Pageable;\n import org.springframework.data.domain.Sort;\n+import org.springframework.data.jpa.domain.Specification;\n import org.springframework.lang.NonNull;\n import org.springframework.lang.Nullable;\n import org.springframework.stereotype.Service;\n@@ -19,6 +21,7 @@\n import run.halo.app.model.dto.post.PostSimpleOutputDTO;\n import run.halo.app.model.entity.*;\n import run.halo.app.model.enums.PostStatus;\n+import run.halo.app.model.params.PostQuery;\n import run.halo.app.model.vo.ArchiveMonthVO;\n import run.halo.app.model.vo.ArchiveYearVO;\n import run.halo.app.model.vo.PostDetailVO;\n@@ -30,6 +33,9 @@\n import run.halo.app.utils.MarkdownUtils;\n import run.halo.app.utils.ServiceUtils;\n \n+import javax.persistence.criteria.Predicate;\n+import javax.persistence.criteria.Root;\n+import javax.persistence.criteria.Subquery;\n import java.util.*;\n import java.util.function.Function;\n import java.util.function.Supplier;\n@@ -101,6 +107,50 @@ public Page<Post> pageBy(PostStatus status, Pageable pageable) {\n         return postRepository.findAllByStatus(status, pageable);\n     }\n \n+    @Override\n+    public Page<Post> pageBy(PostQuery postQuery, Pageable pageable) {\n+        Assert.notNull(postQuery, \"Post query must not be null\");\n+        Assert.notNull(pageable, \"Page info must not be null\");\n+\n+        // Build specification and find all\n+        return postRepository.findAll(buildSpecByQuery(postQuery), pageable);\n+    }\n+\n+    private Specification<Post> buildSpecByQuery(@NonNull PostQuery postQuery) {\n+        Assert.notNull(postQuery, \"Post query must not be null\");\n+\n+        return (Specification<Post>) (root, query, criteriaBuilder) -> {\n+            List<Predicate> predicates = new LinkedList<>();\n+\n+            if (postQuery.getStatus() != null) {\n+                predicates.add(criteriaBuilder.equal(root.get(\"status\"), postQuery.getStatus()));\n+            }\n+\n+            if (postQuery.getCategoryId() != null) {\n+                Subquery<Post> postSubquery = query.subquery(Post.class);\n+                Root<PostCategory> postCategoryRoot = postSubquery.from(PostCategory.class);\n+                postSubquery.select(postCategoryRoot.get(\"postId\"));\n+                postSubquery.where(\n+                        criteriaBuilder.equal(root.get(\"id\"), postCategoryRoot.get(\"postId\")),\n+                        criteriaBuilder.equal(postCategoryRoot.get(\"categoryId\"), postQuery.getCategoryId()));\n+                predicates.add(criteriaBuilder.exists(postSubquery));\n+            }\n+\n+            if (postQuery.getKeyword() != null) {\n+                // Format like condition\n+                String likeCondition = String.format(\"%%%s%%\", StringUtils.strip(postQuery.getKeyword()));\n+\n+                // Build like predicate\n+                Predicate titleLike = criteriaBuilder.like(root.get(\"title\"), likeCondition);\n+                Predicate originalContentLike = criteriaBuilder.like(root.get(\"originalContent\"), likeCondition);\n+\n+                predicates.add(criteriaBuilder.or(titleLike, originalContentLike));\n+            }\n+\n+            return query.where(predicates.toArray(new Predicate[0])).getRestriction();\n+        };\n+    }\n+\n     /**\n      * List by status and type\n      *\n@@ -361,6 +411,13 @@ private List<PostMinimalOutputDTO> convertTo(@NonNull List<Post> posts) {\n                 .collect(Collectors.toList());\n     }\n \n+    @Override\n+    public Page<PostSimpleOutputDTO> convertTo(@NonNull Page<Post> postPage) {\n+        Assert.notNull(postPage, \"Post page must not be null\");\n+\n+        return postPage.map(post -> new PostSimpleOutputDTO().convertFrom(post));\n+    }\n+\n     /**\n      * Converts to post detail vo.\n      *\n\ndiff --git a/src/main/java/run/halo/app/web/controller/admin/api/PostController.java b/src/main/java/run/halo/app/web/controller/admin/api/PostController.java\n--- a/src/main/java/run/halo/app/web/controller/admin/api/PostController.java\n+++ b/src/main/java/run/halo/app/web/controller/admin/api/PostController.java\n@@ -10,6 +10,7 @@\n import run.halo.app.model.entity.Post;\n import run.halo.app.model.enums.PostStatus;\n import run.halo.app.model.params.PostParam;\n+import run.halo.app.model.params.PostQuery;\n import run.halo.app.model.vo.PostDetailVO;\n import run.halo.app.service.*;\n \n@@ -50,6 +51,14 @@ public PostController(PostService postService,\n         this.optionService = optionService;\n     }\n \n+    @GetMapping\n+    @ApiOperation(\"Lists posts\")\n+    public Page<PostSimpleOutputDTO> pageBy(@PageableDefault(sort = \"updateTime\", direction = DESC) Pageable pageable,\n+                                            PostQuery postQuery) {\n+        Page<Post> postPage = postService.pageBy(postQuery, pageable);\n+        return postService.convertTo(postPage);\n+    }\n+\n     @GetMapping(\"latest\")\n     @ApiOperation(\"Pages latest post\")\n     public List<PostMinimalOutputDTO> pageLatest(@RequestParam(name = \"top\", defaultValue = \"10\") int top) {",
    "output": "Complete post query api"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/handler/theme/ThemeConfigResolvers.java b/src/main/java/run/halo/app/handler/theme/ThemeConfigResolvers.java\n--- a/src/main/java/run/halo/app/handler/theme/ThemeConfigResolvers.java\n+++ b/src/main/java/run/halo/app/handler/theme/ThemeConfigResolvers.java\n@@ -0,0 +1,71 @@\n+package run.halo.app.handler.theme;\n+\n+import org.springframework.lang.NonNull;\n+import org.springframework.lang.Nullable;\n+import org.springframework.stereotype.Component;\n+import run.halo.app.handler.theme.impl.YamlThemeConfigResolverImpl;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * Theme configuration resolver manager.\n+ *\n+ * @author johnniang\n+ * @date 4/10/19\n+ */\n+@Component\n+public class ThemeConfigResolvers {\n+\n+    private final Map<ConfigType, ThemeConfigResolver> resolverMap = new ConcurrentHashMap<>(2);\n+\n+    public ThemeConfigResolvers() {\n+        resolverMap.put(ConfigType.YAML, new YamlThemeConfigResolverImpl());\n+        // TODO Add another theme config resolver\n+    }\n+\n+    /**\n+     * Config type enum.\n+     */\n+    public enum ConfigType {\n+\n+        YAML,\n+\n+        PROPERTY\n+    }\n+\n+    /**\n+     * Resolves the content.\n+     *\n+     * @param content content must not be blank\n+     * @param type    config type\n+     * @return a list of group\n+     * @throws IOException throws when content conversion fails\n+     */\n+    public List<Group> resolve(@NonNull String content, @Nullable ConfigType type) throws IOException {\n+        ThemeConfigResolver resolver = getResolver(type);\n+\n+        if (resolver == null) {\n+            throw new UnsupportedOperationException(\"Unsupported theme config type: \" + type);\n+        }\n+\n+        return resolver.resolve(content);\n+    }\n+\n+    /**\n+     * Resolves the content.\n+     *\n+     * @param content content must not be blank\n+     * @return a list of group\n+     * @throws IOException throws when content conversion fails\n+     */\n+    public List<Group> resolve(String content) throws IOException {\n+        return resolve(content, ConfigType.YAML);\n+    }\n+\n+    private ThemeConfigResolver getResolver(@Nullable ConfigType type) {\n+        return type == null ? null : resolverMap.get(type);\n+    }\n+}\n\ndiff --git a/src/main/java/run/halo/app/handler/theme/impl/YamlThemeConfigResolverImpl.java b/src/main/java/run/halo/app/handler/theme/impl/YamlThemeConfigResolverImpl.java\n--- a/src/main/java/run/halo/app/handler/theme/impl/YamlThemeConfigResolverImpl.java\n+++ b/src/main/java/run/halo/app/handler/theme/impl/YamlThemeConfigResolverImpl.java\n@@ -3,7 +3,6 @@\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n import org.springframework.lang.Nullable;\n-import org.springframework.stereotype.Component;\n import run.halo.app.handler.theme.Group;\n import run.halo.app.handler.theme.Item;\n import run.halo.app.handler.theme.Option;\n@@ -23,7 +22,6 @@\n  * @author johnniang\n  * @date 4/10/19\n  */\n-@Component\n public class YamlThemeConfigResolverImpl implements ThemeConfigResolver {\n \n     private final ObjectMapper yamlMapper = new ObjectMapper(new YAMLFactory());\n\ndiff --git a/src/main/java/run/halo/app/service/ThemeService.java b/src/main/java/run/halo/app/service/ThemeService.java\n--- a/src/main/java/run/halo/app/service/ThemeService.java\n+++ b/src/main/java/run/halo/app/service/ThemeService.java\n@@ -2,6 +2,7 @@\n \n import org.springframework.lang.NonNull;\n import org.springframework.lang.Nullable;\n+import run.halo.app.handler.theme.Group;\n import run.halo.app.model.support.ThemeFile;\n import run.halo.app.model.support.ThemeProperty;\n \n@@ -164,10 +165,10 @@ public interface ThemeService {\n      * Fetches theme configuration.\n      *\n      * @param themeId must not be blank\n-     * @return theme configuration or null if not found\n+     * @return theme configuration\n      */\n-    @Nullable\n-    Object fetchConfig(@NonNull String themeId);\n+    @NonNull\n+    List<Group> fetchConfig(@NonNull String themeId);\n \n     /**\n      * Renders a theme page.\n\ndiff --git a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n@@ -21,6 +21,8 @@\n import run.halo.app.exception.ForbiddenException;\n import run.halo.app.exception.NotFoundException;\n import run.halo.app.exception.ServiceException;\n+import run.halo.app.handler.theme.Group;\n+import run.halo.app.handler.theme.ThemeConfigResolvers;\n import run.halo.app.model.properties.PrimaryProperties;\n import run.halo.app.model.support.HaloConst;\n import run.halo.app.model.support.ThemeFile;\n@@ -60,22 +62,23 @@ public class ThemeServiceImpl implements ThemeService {\n      */\n     private String activatedThemeId;\n \n-    private final ObjectMapper yamlMapper;\n-\n     private final OptionService optionService;\n \n     private final StringCacheStore cacheStore;\n \n     private final Configuration configuration;\n \n+    private final ThemeConfigResolvers resolvers;\n+\n     public ThemeServiceImpl(HaloProperties haloProperties,\n                             OptionService optionService,\n                             StringCacheStore cacheStore,\n-                            Configuration configuration) {\n+                            Configuration configuration,\n+                            ThemeConfigResolvers resolvers) {\n         this.optionService = optionService;\n         this.cacheStore = cacheStore;\n         this.configuration = configuration;\n-        yamlMapper = new ObjectMapper(new YAMLFactory());\n+        this.resolvers = resolvers;\n         workDir = Paths.get(haloProperties.getWorkDir(), THEME_FOLDER);\n     }\n \n@@ -224,15 +227,15 @@ public void deleteTheme(String themeId) {\n     }\n \n     @Override\n-    public Object fetchConfig(String themeId) {\n+    public List<Group> fetchConfig(String themeId) {\n         Assert.hasText(themeId, \"Theme name must not be blank\");\n \n         // Get theme property\n         ThemeProperty themeProperty = getThemeOfNonNullBy(themeId);\n \n         if (!themeProperty.isHasOptions()) {\n-            // If this theme dose not has an option, then return null\n-            return null;\n+            // If this theme dose not has an option, then return empty list\n+            return Collections.emptyList();\n         }\n \n         try {\n@@ -247,14 +250,15 @@ public Object fetchConfig(String themeId) {\n                     continue;\n                 }\n \n-                // Read the yaml file and return the object value\n-                return yamlMapper.readValue(optionsPath.toFile(), Object.class);\n+                // Read the yaml file\n+                String optionContent = new String(Files.readAllBytes(optionsPath));\n+                // Resolve it\n+                return resolvers.resolve(optionContent);\n             }\n \n-            return null;\n+            return Collections.emptyList();\n         } catch (IOException e) {\n-            log.error(\"Failed to read options.yaml\", e);\n-            return null;\n+            throw new ServiceException(\"Failed to read options file\", e);\n         }\n     }\n \n\ndiff --git a/src/main/java/run/halo/app/web/controller/admin/api/ThemeController.java b/src/main/java/run/halo/app/web/controller/admin/api/ThemeController.java\n--- a/src/main/java/run/halo/app/web/controller/admin/api/ThemeController.java\n+++ b/src/main/java/run/halo/app/web/controller/admin/api/ThemeController.java\n@@ -2,6 +2,7 @@\n \n import io.swagger.annotations.ApiOperation;\n import org.springframework.web.bind.annotation.*;\n+import run.halo.app.handler.theme.Group;\n import run.halo.app.model.support.BaseResponse;\n import run.halo.app.model.support.ThemeFile;\n import run.halo.app.model.support.ThemeProperty;\n@@ -97,8 +98,8 @@ public void saveSettingsBy(@RequestBody Map<String, Object> settings) {\n \n     @GetMapping(\"{themeId}/configurations\")\n     @ApiOperation(\"Fetches theme configuration by theme id\")\n-    public BaseResponse<Object> fetchConfig(@PathVariable(\"themeId\") String themeId) {\n-        return BaseResponse.ok(themeService.fetchConfig(themeId));\n+    public List<Group> fetchConfig(@PathVariable(\"themeId\") String themeId) {\n+        return themeService.fetchConfig(themeId);\n     }\n \n     @PostMapping(\"{themeId}/settings\")",
    "output": "Perfect theme configuration resolve"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/handler/theme/Item.java b/src/main/java/run/halo/app/handler/theme/Item.java\n--- a/src/main/java/run/halo/app/handler/theme/Item.java\n+++ b/src/main/java/run/halo/app/handler/theme/Item.java\n@@ -0,0 +1,47 @@\n+package run.halo.app.handler.theme;\n+\n+import lombok.Data;\n+import run.halo.app.model.enums.DataType;\n+import run.halo.app.model.enums.InputType;\n+\n+import java.util.List;\n+\n+/**\n+ * Theme configuration: Item entity\n+ *\n+ * @author johnniang\n+ * @date 4/10/19\n+ */\n+@Data\n+public class Item {\n+\n+    /**\n+     * Item name.\n+     */\n+    private String name;\n+\n+    /**\n+     * Item label.\n+     */\n+    private String label;\n+\n+    /**\n+     * Item input type, default is text.\n+     */\n+    private InputType type;\n+\n+    /**\n+     * Item data type, default is string.\n+     */\n+    private DataType dataType;\n+\n+    /**\n+     * Item default value.\n+     */\n+    private Object defaultValue;\n+\n+    /**\n+     * Item's options, default is empty list\n+     */\n+    private List<Option> options;\n+}\n\ndiff --git a/src/main/java/run/halo/app/handler/theme/Option.java b/src/main/java/run/halo/app/handler/theme/Option.java\n--- a/src/main/java/run/halo/app/handler/theme/Option.java\n+++ b/src/main/java/run/halo/app/handler/theme/Option.java\n@@ -0,0 +1,23 @@\n+package run.halo.app.handler.theme;\n+\n+import lombok.Data;\n+\n+/**\n+ * Theme configuration: option entity.\n+ *\n+ * @author johnniang\n+ * @date 4/10/19\n+ */\n+@Data\n+public class Option {\n+\n+    /**\n+     * Option label.\n+     */\n+    private String label;\n+\n+    /**\n+     * Option value.\n+     */\n+    private Object value;\n+}\n\ndiff --git a/src/main/java/run/halo/app/handler/theme/Tab.java b/src/main/java/run/halo/app/handler/theme/Tab.java\n--- a/src/main/java/run/halo/app/handler/theme/Tab.java\n+++ b/src/main/java/run/halo/app/handler/theme/Tab.java\n@@ -0,0 +1,30 @@\n+package run.halo.app.handler.theme;\n+\n+import lombok.Data;\n+\n+import java.util.List;\n+\n+/**\n+ * Theme configuration: Tab entity.\n+ *\n+ * @author johnniang\n+ * @date 4/10/19\n+ */\n+@Data\n+public class Tab {\n+\n+    /**\n+     * Tab name.\n+     */\n+    private String name;\n+\n+    /**\n+     * Tab label.\n+     */\n+    private String label;\n+\n+    /**\n+     * Tab's items, default is empty list.\n+     */\n+    private List<Item> items;\n+}\n\ndiff --git a/src/main/java/run/halo/app/handler/theme/ThemeConfigResolver.java b/src/main/java/run/halo/app/handler/theme/ThemeConfigResolver.java\n--- a/src/main/java/run/halo/app/handler/theme/ThemeConfigResolver.java\n+++ b/src/main/java/run/halo/app/handler/theme/ThemeConfigResolver.java\n@@ -0,0 +1,12 @@\n+package run.halo.app.handler.theme;\n+\n+/**\n+ * Theme configuration resolver.\n+ *\n+ * @author johnniang\n+ * @date 4/10/19\n+ */\n+public class ThemeConfigResolver {\n+\n+\n+}\n\ndiff --git a/src/test/java/run/halo/app/utils/YamlTest.java b/src/test/java/run/halo/app/utils/YamlTest.java\n--- a/src/test/java/run/halo/app/utils/YamlTest.java\n+++ b/src/test/java/run/halo/app/utils/YamlTest.java\n@@ -2,9 +2,11 @@\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n-import lombok.Data;\n import org.junit.Test;\n import org.springframework.lang.Nullable;\n+import run.halo.app.handler.theme.Item;\n+import run.halo.app.handler.theme.Option;\n+import run.halo.app.handler.theme.Tab;\n import run.halo.app.model.enums.DataType;\n import run.halo.app.model.enums.InputType;\n \n@@ -357,27 +359,4 @@ private List<Option> handleOptions(@Nullable Object options) {\n         return result;\n     }\n \n-    @Data\n-    private class Tab {\n-        private String name;\n-        private String label;\n-        private List<Item> items;\n-    }\n-\n-    @Data\n-    private class Item {\n-        private String name;\n-        private String label;\n-        private InputType type;\n-        private DataType dataType;\n-        private Object defaultValue;\n-\n-        private List<Option> options;\n-    }\n-\n-    @Data\n-    private class Option {\n-        private String label;\n-        private Object value;\n-    }\n }",
    "output": "Move theme configuration entities"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/entity/ThemeSetting.java b/src/main/java/run/halo/app/model/entity/ThemeSetting.java\n--- a/src/main/java/run/halo/app/model/entity/ThemeSetting.java\n+++ b/src/main/java/run/halo/app/model/entity/ThemeSetting.java\n@@ -5,6 +5,7 @@\n import lombok.ToString;\n import org.hibernate.annotations.SQLDelete;\n import org.hibernate.annotations.Where;\n+import run.halo.app.model.enums.DataType;\n \n import javax.persistence.*;\n \n@@ -45,4 +46,17 @@ public class ThemeSetting extends BaseEntity {\n     @Column(name = \"theme_id\", columnDefinition = \"varchar(255) not null\")\n     private String themeId;\n \n+    @Column(name = \"data_type\", columnDefinition = \"int default 0\")\n+    private DataType type;\n+\n+    @Override\n+    protected void prePersist() {\n+        super.prePersist();\n+\n+        id = null;\n+\n+        if (type == null) {\n+            type = DataType.STRING;\n+        }\n+    }\n }\n\ndiff --git a/src/main/java/run/halo/app/model/enums/DataType.java b/src/main/java/run/halo/app/model/enums/DataType.java\n--- a/src/main/java/run/halo/app/model/enums/DataType.java\n+++ b/src/main/java/run/halo/app/model/enums/DataType.java\n@@ -0,0 +1,30 @@\n+package run.halo.app.model.enums;\n+\n+/**\n+ * Data type enum.\n+ *\n+ * @author johnniang\n+ * @date 4/9/19\n+ */\n+public enum DataType implements ValueEnum<Integer> {\n+\n+    STRING(0),\n+\n+    LONG(1),\n+\n+    DOUBLE(2),\n+\n+    BOOL(3);\n+\n+    private Integer value;\n+\n+    DataType(Integer value) {\n+        this.value = value;\n+    }\n+\n+\n+    @Override\n+    public Integer getValue() {\n+        return value;\n+    }\n+}\n\ndiff --git a/src/main/java/run/halo/app/model/enums/converter/DataTypeConverter.java b/src/main/java/run/halo/app/model/enums/converter/DataTypeConverter.java\n--- a/src/main/java/run/halo/app/model/enums/converter/DataTypeConverter.java\n+++ b/src/main/java/run/halo/app/model/enums/converter/DataTypeConverter.java\n@@ -0,0 +1,19 @@\n+package run.halo.app.model.enums.converter;\n+\n+import run.halo.app.model.enums.DataType;\n+\n+import javax.persistence.Converter;\n+\n+/**\n+ * Data type converter.\n+ *\n+ * @author johnniang\n+ * @date 4/10/19\n+ */\n+@Converter(autoApply = true)\n+public class DataTypeConverter extends AbstractConverter<DataType, Integer> {\n+\n+    public DataTypeConverter() {\n+        super(DataType.class);\n+    }\n+}\n\ndiff --git a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n@@ -297,6 +297,9 @@ public ThemeProperty activeTheme(String themeId) {\n         // Set the activated theme id\n         setActivatedThemeId(themeId);\n \n+        // Clear the cache\n+        cacheStore.delete(THEMES_CACHE_KEY);\n+\n         try {\n             // TODO Refactor here in the future\n             configuration.setSharedVariable(\"themeName\", themeId);",
    "output": "Add data type property into ThemeSetting entity"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/entity/ThemeSetting.java b/src/main/java/run/halo/app/model/entity/ThemeSetting.java\n--- a/src/main/java/run/halo/app/model/entity/ThemeSetting.java\n+++ b/src/main/java/run/halo/app/model/entity/ThemeSetting.java\n@@ -23,13 +23,9 @@\n @EqualsAndHashCode(callSuper = true)\n public class ThemeSetting extends BaseEntity {\n \n-    /**\n-     * Theme id as id.\n-     */\n     @Id\n-    @Column(name = \"id\", columnDefinition = \"varchar(255) not null\")\n     @GeneratedValue(strategy = GenerationType.IDENTITY)\n-    private String id;\n+    private Integer id;\n \n     /**\n      * Setting key.\n@@ -43,4 +39,10 @@ public class ThemeSetting extends BaseEntity {\n     @Column(name = \"setting_value\", columnDefinition = \"varchar(10239) not null\")\n     private String value;\n \n+    /**\n+     * Theme id.\n+     */\n+    @Column(name = \"theme_id\", columnDefinition = \"varchar(255) not null\")\n+    private String themeId;\n+\n }",
    "output": "Refactor ThemeSetting entity"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/listener/StartedListener.java b/src/main/java/run/halo/app/listener/StartedListener.java\n--- a/src/main/java/run/halo/app/listener/StartedListener.java\n+++ b/src/main/java/run/halo/app/listener/StartedListener.java\n@@ -1,6 +1,5 @@\n package run.halo.app.listener;\n \n-import cn.hutool.core.io.FileUtil;\n import cn.hutool.core.util.StrUtil;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import freemarker.template.TemplateModelException;\n@@ -20,10 +19,12 @@\n import run.halo.app.service.OptionService;\n import run.halo.app.service.ThemeService;\n import run.halo.app.service.UserService;\n+import run.halo.app.utils.FileUtils;\n import run.halo.app.utils.HaloUtils;\n \n-import java.io.File;\n import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.*;\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n@@ -158,21 +159,40 @@ private void cacheOwo() {\n     private void initThemes() {\n         // Whether the blog has initialized\n         Boolean isInstalled = optionService.getByPropertyOrDefault(PrimaryProperties.IS_INSTALLED, Boolean.class, false);\n+\n+        if (isInstalled) {\n+            // Skip\n+            return;\n+        }\n+\n         try {\n-            if (isInstalled) {\n-                // Skip\n-                return;\n+            String themeClassPath = ResourceUtils.CLASSPATH_URL_PREFIX + ThemeService.THEME_FOLDER;\n+\n+            URI themeUri = ResourceUtils.getURL(themeClassPath).toURI();\n+\n+            Path source;\n+\n+            if (themeUri.getScheme().equalsIgnoreCase(\"jar\")) {\n+                // Create new file system for jar\n+                FileSystem fileSystem = FileSystems.newFileSystem(themeUri, Collections.emptyMap());\n+                source = fileSystem.getPath(\"/BOOT-INF/classes/\" + ThemeService.THEME_FOLDER);\n+            } else {\n+                source = Paths.get(themeUri);\n             }\n \n-            File internalThemePath = new File(ResourceUtils.getURL(ResourceUtils.CLASSPATH_URL_PREFIX).getPath(), \"templates/themes\");\n-            File[] internalThemes = internalThemePath.listFiles();\n-            if (null != internalThemes) {\n-                for (File theme : internalThemes) {\n-                    FileUtil.copy(theme, themeService.getThemeBasePath(), true);\n-                }\n+            // Create theme folder\n+            Path themePath = themeService.getBasePath();\n+\n+            if (Files.notExists(themePath)) {\n+                log.info(\"Copying theme folder from [{}] to [{}]\", source, themePath);\n+\n+                FileUtils.copyFolder(source, themePath);\n+            } else {\n+                log.info(\"Skip copying theme folder due to existence of theme folder\");\n             }\n         } catch (Exception e) {\n             throw new RuntimeException(\"Init internal theme to user path error\", e);\n         }\n     }\n+\n }\n\ndiff --git a/src/main/java/run/halo/app/service/ThemeService.java b/src/main/java/run/halo/app/service/ThemeService.java\n--- a/src/main/java/run/halo/app/service/ThemeService.java\n+++ b/src/main/java/run/halo/app/service/ThemeService.java\n@@ -16,6 +16,43 @@\n  */\n public interface ThemeService {\n \n+    /**\n+     * Theme property file name.\n+     */\n+    String THEME_PROPERTY_FILE_NAME = \"theme.properties\";\n+\n+\n+    /**\n+     * Configuration file name.\n+     */\n+    String[] OPTIONS_NAMES = {\"options.yaml\", \"options.yml\"};\n+\n+    /**\n+     * The type of file that can be modified.\n+     */\n+    String[] CAN_EDIT_SUFFIX = {\"ftl\", \"css\", \"js\"};\n+\n+    /**\n+     * These file names cannot be displayed.\n+     */\n+    String[] FILTER_FILES = {\".git\", \".DS_Store\", THEME_PROPERTY_FILE_NAME, \"options.yaml\", \"option.yml\"};\n+\n+    /**\n+     * Theme folder location.\n+     */\n+    String THEME_FOLDER = \"templates/themes\";\n+\n+\n+    /**\n+     * Render template.\n+     */\n+    String RENDER_TEMPLATE = \"themes/%s/%s\";\n+\n+    /**\n+     * Theme cache key.\n+     */\n+    String THEMES_CACHE_KEY = \"themes\";\n+\n     /**\n      * Get theme property by theme id.\n      *\n\ndiff --git a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n@@ -47,43 +47,6 @@\n @Service\n public class ThemeServiceImpl implements ThemeService {\n \n-    /**\n-     * Theme property file name.\n-     */\n-    private final static String THEME_PROPERTY_FILE_NAME = \"theme.properties\";\n-\n-\n-    /**\n-     * Configuration file name.\n-     */\n-    private final static String[] OPTIONS_NAMES = {\"options.yaml\", \"options.yml\"};\n-\n-    /**\n-     * The type of file that can be modified.\n-     */\n-    private static String[] CAN_EDIT_SUFFIX = {\"ftl\", \"css\", \"js\"};\n-\n-    /**\n-     * These file names cannot be displayed.\n-     */\n-    private static String[] FILTER_FILES = {\".git\", \".DS_Store\", THEME_PROPERTY_FILE_NAME, \"options.yaml\", \"option.yml\"};\n-\n-    /**\n-     * Theme folder location.\n-     */\n-    private final static String THEME_FOLDER = \"templates/themes\";\n-\n-\n-    /**\n-     * Render template.\n-     */\n-    private final static String RENDER_TEMPLATE = \"themes/%s/%s\";\n-\n-    /**\n-     * Theme cache key.\n-     */\n-    private final static String THEMES_CACHE_KEY = \"themes\";\n-\n     /**\n      * Theme work directory.\n      */\n\ndiff --git a/src/main/java/run/halo/app/utils/FileUtils.java b/src/main/java/run/halo/app/utils/FileUtils.java\n--- a/src/main/java/run/halo/app/utils/FileUtils.java\n+++ b/src/main/java/run/halo/app/utils/FileUtils.java\n@@ -0,0 +1,49 @@\n+package run.halo.app.utils;\n+\n+import org.springframework.lang.NonNull;\n+import org.springframework.util.Assert;\n+\n+import java.io.IOException;\n+import java.nio.file.*;\n+import java.nio.file.attribute.BasicFileAttributes;\n+\n+/**\n+ * File utilities.\n+ *\n+ * @author johnniang\n+ * @date 4/9/19\n+ */\n+public class FileUtils {\n+\n+    private FileUtils() {\n+    }\n+\n+    /**\n+     * Copies folder.\n+     *\n+     * @param source source path must not be null\n+     * @param target target path must not be null\n+     */\n+    public static void copyFolder(@NonNull Path source, @NonNull Path target) throws IOException {\n+        Assert.notNull(source, \"Source path must not be null\");\n+        Assert.notNull(target, \"Target path must not be null\");\n+\n+        Files.walkFileTree(source, new SimpleFileVisitor<Path>() {\n+\n+            private Path current;\n+\n+            @Override\n+            public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n+                current = target.resolve(source.relativize(dir).toString());\n+                Files.createDirectories(current);\n+                return FileVisitResult.CONTINUE;\n+            }\n+\n+            @Override\n+            public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n+                Files.copy(file, target.resolve(source.relativize(file).toString()), StandardCopyOption.REPLACE_EXISTING);\n+                return FileVisitResult.CONTINUE;\n+            }\n+        });\n+    }\n+}",
    "output": "Complete copy folder from jar file"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/dto/OptionOutputDTO.java b/src/main/java/run/halo/app/model/dto/OptionOutputDTO.java\n--- a/src/main/java/run/halo/app/model/dto/OptionOutputDTO.java\n+++ b/src/main/java/run/halo/app/model/dto/OptionOutputDTO.java\n@@ -13,8 +13,8 @@\n @Data\n public class OptionOutputDTO implements OutputConverter<OptionOutputDTO, Option> {\n \n-    private String optionKey;\n+    private String key;\n \n-    private String optionValue;\n+    private String value;\n \n }\n\ndiff --git a/src/main/java/run/halo/app/repository/OptionRepository.java b/src/main/java/run/halo/app/repository/OptionRepository.java\n--- a/src/main/java/run/halo/app/repository/OptionRepository.java\n+++ b/src/main/java/run/halo/app/repository/OptionRepository.java\n@@ -26,5 +26,5 @@ public interface OptionRepository extends BaseRepository<Option, Integer> {\n      *\n      * @param key key\n      */\n-    void removeByKey(String key);\n+    void deleteByKey(String key);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java b/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n@@ -46,7 +46,7 @@ public void save(String key, String value) {\n \n         if (StringUtils.isBlank(value)) {\n             // If the value is blank, remove the key\n-            optionRepository.removeByKey(key);\n+            optionRepository.deleteByKey(key);\n             log.debug(\"Removed option key: [{}]\", key);\n             return;\n         }",
    "output": "Fix option list bug"
  },
  {
    "input": "diff --git a/.mvn/wrapper/MavenWrapperDownloader.java b/.mvn/wrapper/MavenWrapperDownloader.java\n--- a/.mvn/wrapper/MavenWrapperDownloader.java\n+++ b/.mvn/wrapper/MavenWrapperDownloader.java\n@@ -1,114 +0,0 @@\n-/*\n-Licensed to the Apache Software Foundation (ASF) under one\n-or more contributor license agreements.  See the NOTICE file\n-distributed with this work for additional information\n-regarding copyright ownership.  The ASF licenses this file\n-to you under the Apache License, Version 2.0 (the\n-\"License\"); you may not use this file except in compliance\n-with the License.  You may obtain a copy of the License at\n-\n-  http://www.apache.org/licenses/LICENSE-2.0\n-\n-Unless required by applicable law or agreed to in writing,\n-software distributed under the License is distributed on an\n-\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-KIND, either express or implied.  See the License for the\n-specific language governing permissions and limitations\n-under the License.\n-*/\n-\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.FileOutputStream;\n-import java.io.IOException;\n-import java.net.URL;\n-import java.nio.channels.Channels;\n-import java.nio.channels.ReadableByteChannel;\n-import java.util.Properties;\n-\n-public class MavenWrapperDownloader {\n-\n-    /**\n-     * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.\n-     */\n-    private static final String DEFAULT_DOWNLOAD_URL =\n-            \"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.4.2/maven-wrapper-0.4.2.jar\";\n-\n-    /**\n-     * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to\n-     * use instead of the default one.\n-     */\n-    private static final String MAVEN_WRAPPER_PROPERTIES_PATH =\n-            \".mvn/wrapper/maven-wrapper.properties\";\n-\n-    /**\n-     * Path where the maven-wrapper.jar will be saved to.\n-     */\n-    private static final String MAVEN_WRAPPER_JAR_PATH =\n-            \".mvn/wrapper/maven-wrapper.jar\";\n-\n-    /**\n-     * Name of the property which should be used to override the default download url for the wrapper.\n-     */\n-    private static final String PROPERTY_NAME_WRAPPER_URL = \"wrapperUrl\";\n-\n-    public static void main(String args[]) {\n-        System.out.println(\"- Downloader started\");\n-        File baseDirectory = new File(args[0]);\n-        System.out.println(\"- Using base directory: \" + baseDirectory.getAbsolutePath());\n-\n-        // If the maven-wrapper.properties exists, read it and check if it contains a custom\n-        // wrapperUrl parameter.\n-        File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);\n-        String url = DEFAULT_DOWNLOAD_URL;\n-        if(mavenWrapperPropertyFile.exists()) {\n-            FileInputStream mavenWrapperPropertyFileInputStream = null;\n-            try {\n-                mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);\n-                Properties mavenWrapperProperties = new Properties();\n-                mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);\n-                url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);\n-            } catch (IOException e) {\n-                System.out.println(\"- ERROR loading '\" + MAVEN_WRAPPER_PROPERTIES_PATH + \"'\");\n-            } finally {\n-                try {\n-                    if(mavenWrapperPropertyFileInputStream != null) {\n-                        mavenWrapperPropertyFileInputStream.close();\n-                    }\n-                } catch (IOException e) {\n-                    // Ignore ...\n-                }\n-            }\n-        }\n-        System.out.println(\"- Downloading from: : \" + url);\n-\n-        File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);\n-        if(!outputFile.getParentFile().exists()) {\n-            if(!outputFile.getParentFile().mkdirs()) {\n-                System.out.println(\n-                        \"- ERROR creating output direcrory '\" + outputFile.getParentFile().getAbsolutePath() + \"'\");\n-            }\n-        }\n-        System.out.println(\"- Downloading to: \" + outputFile.getAbsolutePath());\n-        try {\n-            downloadFileFromURL(url, outputFile);\n-            System.out.println(\"Done\");\n-            System.exit(0);\n-        } catch (Throwable e) {\n-            System.out.println(\"- Error downloading\");\n-            e.printStackTrace();\n-            System.exit(1);\n-        }\n-    }\n-\n-    private static void downloadFileFromURL(String urlString, File destination) throws Exception {\n-        URL website = new URL(urlString);\n-        ReadableByteChannel rbc;\n-        rbc = Channels.newChannel(website.openStream());\n-        FileOutputStream fos = new FileOutputStream(destination);\n-        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);\n-        fos.close();\n-        rbc.close();\n-    }\n-\n-}",
    "output": "Change build tool from maven to gradle"
  },
  {
    "input": "diff --git a/src/test/java/run/halo/app/utils/DirectoryAttackTest.java b/src/test/java/run/halo/app/utils/DirectoryAttackTest.java\n--- a/src/test/java/run/halo/app/utils/DirectoryAttackTest.java\n+++ b/src/test/java/run/halo/app/utils/DirectoryAttackTest.java\n@@ -0,0 +1,33 @@\n+package run.halo.app.utils;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+/**\n+ * Directory attack test.\n+ *\n+ * @author johnniang\n+ * @date 4/9/19\n+ */\n+public class DirectoryAttackTest {\n+\n+    private String userHome = System.getProperty(\"user.home\");\n+\n+    @Test\n+    public void compareDirectoryTest() {\n+\n+        String workDir = userHome + \"/halo-test/\";\n+        Path workDirPath = Paths.get(workDir);\n+\n+        Path testPath = Paths.get(userHome + \"/../../etc/passwd\");\n+\n+        System.out.println(\"Work directory path: \" + workDirPath);\n+        System.out.println(\"Test path: \" + testPath);\n+\n+        Assert.assertFalse(testPath.startsWith(workDirPath));\n+        Assert.assertFalse(workDirPath.startsWith(testPath));\n+    }\n+}",
    "output": "Add DirectoryAttackTest"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/web/controller/admin/api/ThemeController.java b/src/main/java/run/halo/app/web/controller/admin/api/ThemeController.java\n--- a/src/main/java/run/halo/app/web/controller/admin/api/ThemeController.java\n+++ b/src/main/java/run/halo/app/web/controller/admin/api/ThemeController.java\n@@ -87,11 +87,16 @@ public BaseResponse<Object> fetchConfig() {\n         return BaseResponse.ok(themeService.fetchConfig(themeService.getActivatedThemeId()));\n     }\n \n+    @GetMapping(\"{themeId}/configurations\")\n+    @ApiOperation(\"Fetches theme configuration by theme id\")\n+    public BaseResponse<Object> fetchConfig(@PathVariable(\"themeId\") String themeId) {\n+        return BaseResponse.ok(themeService.fetchConfig(themeId));\n+    }\n+\n     @DeleteMapping(\"{themeId}\")\n     @ApiOperation(\"Deletes a theme\")\n     public void deleteBy(@PathVariable(\"themeId\") String themeId) {\n         themeService.deleteTheme(themeId);\n     }\n \n-\n }",
    "output": "Add a fetch theme configuration by theme id api"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/support/ThemeProperty.java b/src/main/java/run/halo/app/model/support/ThemeProperty.java\n--- a/src/main/java/run/halo/app/model/support/ThemeProperty.java\n+++ b/src/main/java/run/halo/app/model/support/ThemeProperty.java\n@@ -52,7 +52,7 @@ public class ThemeProperty {\n     /**\n      * Folder name.\n      */\n-    private String folderName;\n+    private String themePath;\n \n     /**\n      * Has options.\n\ndiff --git a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n@@ -412,8 +412,8 @@ private ThemeProperty getProperty(@NonNull Path themePath) {\n             themeProperty.setVersion(properties.getProperty(\"theme.version\"));\n             themeProperty.setAuthor(properties.getProperty(\"theme.author\"));\n             themeProperty.setAuthorWebsite(properties.getProperty(\"theme.author.website\"));\n-            themeProperty.setFolderName(themePath.getFileName().toString());\n-            themeProperty.setHasOptions(hasOptions(propertyPath));\n+            themeProperty.setThemePath(themePath.toString());\n+            themeProperty.setHasOptions(hasOptions(themePath));\n \n             return themeProperty;\n         } catch (IOException e) {\n@@ -435,6 +435,8 @@ private boolean hasOptions(@NonNull Path themePath) {\n             // Resolve the options path\n             Path optionsPath = themePath.resolve(optionsName);\n \n+            log.debug(\"Check options file for path: [{}]\", optionsPath);\n+\n             if (Files.exists(optionsPath)) {\n                 return true;\n             }",
    "output": "Fix hasOptions bug"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/entity/ThemeSetting.java b/src/main/java/run/halo/app/model/entity/ThemeSetting.java\n--- a/src/main/java/run/halo/app/model/entity/ThemeSetting.java\n+++ b/src/main/java/run/halo/app/model/entity/ThemeSetting.java\n@@ -15,7 +15,7 @@\n  * @date 4/8/19\n  */\n @Entity\n-@Table(name = \"theme_settings\", indexes = {@Index(columnList = \"theme\"), @Index(columnList = \"setting_key\")})\n+@Table(name = \"theme_settings\", indexes = {@Index(columnList = \"setting_key\")})\n @SQLDelete(sql = \"update theme_settings set deleted = true where id = ?\")\n @Where(clause = \"deleted = false\")\n @Data\n\ndiff --git a/src/main/java/run/halo/app/repository/OptionRepository.java b/src/main/java/run/halo/app/repository/OptionRepository.java\n--- a/src/main/java/run/halo/app/repository/OptionRepository.java\n+++ b/src/main/java/run/halo/app/repository/OptionRepository.java\n@@ -19,12 +19,12 @@ public interface OptionRepository extends BaseRepository<Option, Integer> {\n      * @param key key\n      * @return Option\n      */\n-    Optional<Option> findByOptionKey(String key);\n+    Optional<Option> findByKey(String key);\n \n     /**\n      * Delete option by key\n      *\n      * @param key key\n      */\n-    void removeByOptionKey(String key);\n+    void removeByKey(String key);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java b/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n@@ -46,13 +46,13 @@ public void save(String key, String value) {\n \n         if (StringUtils.isBlank(value)) {\n             // If the value is blank, remove the key\n-            optionRepository.removeByOptionKey(key);\n+            optionRepository.removeByKey(key);\n             log.debug(\"Removed option key: [{}]\", key);\n             return;\n         }\n \n         // TODO Consider cache options with map\n-        Option option = optionRepository.findByOptionKey(key).map(anOption -> {\n+        Option option = optionRepository.findByKey(key).map(anOption -> {\n             log.debug(\"Updating option key: [{}], value: from [{}] to [{}]\", key, anOption.getValue(), value);\n             // Exist\n             anOption.setValue(value);\n@@ -143,7 +143,7 @@ public String getByKeyOfNonNull(String key) {\n     public Optional<String> getByKey(String key) {\n         Assert.hasText(key, \"Option key must not be blank\");\n \n-        return optionRepository.findByOptionKey(key).map(Option::getValue);\n+        return optionRepository.findByKey(key).map(Option::getValue);\n     }\n \n     @Override\n\ndiff --git a/src/test/java/run/halo/app/service/impl/OptionServiceImplTest.java b/src/test/java/run/halo/app/service/impl/OptionServiceImplTest.java\n--- a/src/test/java/run/halo/app/service/impl/OptionServiceImplTest.java\n+++ b/src/test/java/run/halo/app/service/impl/OptionServiceImplTest.java\n@@ -76,13 +76,13 @@ private void getQiniuZoneTest(Zone actualZone, Option option) {\n         QnYunProperties zoneProperty = QnYunProperties.ZONE;\n \n         // Given\n-        given(optionRepository.findByOptionKey(zoneProperty.getValue())).willReturn(Optional.ofNullable(option));\n+        given(optionRepository.findByKey(zoneProperty.getValue())).willReturn(Optional.ofNullable(option));\n \n         // When\n         Zone zone = optionService.getQnYunZone();\n \n         // Then\n-        then(optionRepository).should().findByOptionKey(zoneProperty.getValue());\n+        then(optionRepository).should().findByKey(zoneProperty.getValue());\n \n         assertNotNull(zone);\n         assertThat(zone.getRegion(), equalTo(actualZone.getRegion()));",
    "output": "Fix some implicit bugs"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/model/entity/Option.java b/src/main/java/run/halo/app/model/entity/Option.java\n--- a/src/main/java/run/halo/app/model/entity/Option.java\n+++ b/src/main/java/run/halo/app/model/entity/Option.java\n@@ -20,7 +20,7 @@\n @SQLDelete(sql = \"update options set deleted = true where id = ?\")\n @Where(clause = \"deleted = false\")\n @Data\n-@ToString\n+@ToString(callSuper = true)\n @EqualsAndHashCode(callSuper = true)\n @NoArgsConstructor\n public class Option extends BaseEntity {\n@@ -33,23 +33,23 @@ public class Option extends BaseEntity {\n      * option key\n      */\n     @Column(name = \"option_key\", columnDefinition = \"varchar(100) not null\")\n-    private String optionKey;\n+    private String key;\n \n     /**\n      * option value\n      */\n     @Column(name = \"option_value\", columnDefinition = \"varchar(1023) not null\")\n-    private String optionValue;\n+    private String value;\n \n     /**\n      * source,default is system\n      */\n     @Column(name = \"option_source\", columnDefinition = \"int default 0\")\n     private OptionSource source;\n \n-    public Option(String optionKey, String optionValue) {\n-        this.optionKey = optionKey;\n-        this.optionValue = optionValue;\n+    public Option(String key, String value) {\n+        this.key = key;\n+        this.value = value;\n     }\n \n     @Override\n\ndiff --git a/src/main/java/run/halo/app/model/entity/ThemeSetting.java b/src/main/java/run/halo/app/model/entity/ThemeSetting.java\n--- a/src/main/java/run/halo/app/model/entity/ThemeSetting.java\n+++ b/src/main/java/run/halo/app/model/entity/ThemeSetting.java\n@@ -0,0 +1,39 @@\n+package run.halo.app.model.entity;\n+\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+import org.hibernate.annotations.SQLDelete;\n+import org.hibernate.annotations.Where;\n+\n+import javax.persistence.*;\n+\n+/**\n+ * Theme setting entity.\n+ *\n+ * @author johnniang\n+ * @date 4/8/19\n+ */\n+@Entity\n+@Table(name = \"theme_settings\", indexes = {@Index(columnList = \"theme\"), @Index(columnList = \"setting_key\")})\n+@SQLDelete(sql = \"update theme_settings set deleted = true where id = ?\")\n+@Where(clause = \"deleted = false\")\n+@Data\n+@ToString(callSuper = true)\n+@EqualsAndHashCode(callSuper = true)\n+public class ThemeSetting extends BaseEntity {\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Integer id;\n+\n+    @Column(name = \"theme\", columnDefinition = \"varchar(255) not null\")\n+    private String theme;\n+\n+    @Column(name = \"setting_key\", columnDefinition = \"varchar(255) not null\")\n+    private String key;\n+\n+    @Column(name = \"setting_value\", columnDefinition = \"varchar(10239) not null\")\n+    private String value;\n+\n+}\n\ndiff --git a/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java b/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n@@ -61,16 +61,16 @@ public void save(String key, String value, OptionSource source) {\n \n         // TODO Consider cache options with map\n         Option option = optionRepository.findByOptionKey(key).map(anOption -> {\n-            log.debug(\"Updating option key: [{}], value: from [{}] to [{}]\", key, anOption.getOptionValue(), value);\n+            log.debug(\"Updating option key: [{}], value: from [{}] to [{}]\", key, anOption.getValue(), value);\n             // Exist\n-            anOption.setOptionValue(value);\n+            anOption.setValue(value);\n             return anOption;\n         }).orElseGet(() -> {\n             log.debug(\"Creating option key: [{}], value: [{}]\", key, value);\n             // Not exist\n             Option anOption = new Option();\n-            anOption.setOptionKey(key);\n-            anOption.setOptionValue(value);\n+            anOption.setKey(key);\n+            anOption.setValue(value);\n             anOption.setSource(source);\n             return anOption;\n         });\n@@ -131,7 +131,7 @@ public void saveProperties(Map<? extends PropertyEnum, String> properties, Optio\n      */\n     @Override\n     public Map<String, String> listOptions() {\n-        return ServiceUtils.convertToMap(listAll(), Option::getOptionKey, Option::getOptionValue);\n+        return ServiceUtils.convertToMap(listAll(), Option::getKey, Option::getValue);\n     }\n \n     @Override\n@@ -159,7 +159,7 @@ public String getByKeyOfNonNull(String key) {\n     public Optional<String> getByKey(String key) {\n         Assert.hasText(key, \"Option key must not be blank\");\n \n-        return optionRepository.findByOptionKey(key).map(Option::getOptionValue);\n+        return optionRepository.findByOptionKey(key).map(Option::getValue);\n     }\n \n     @Override",
    "output": "Add ThemeSetting entity"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java b/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n@@ -24,8 +24,6 @@\n import java.util.Optional;\n import java.util.stream.Collectors;\n \n-import static run.halo.app.model.support.HaloConst.DEFAULT_THEME_NAME;\n-\n /**\n  * OptionService implementation class\n  *\n@@ -57,15 +55,18 @@ public void save(String key, String value, OptionSource source) {\n         if (StringUtils.isBlank(value)) {\n             // If the value is blank, remove the key\n             optionRepository.removeByOptionKey(key);\n+            log.debug(\"Removed option key: [{}]\", key);\n             return;\n         }\n \n         // TODO Consider cache options with map\n         Option option = optionRepository.findByOptionKey(key).map(anOption -> {\n+            log.debug(\"Updating option key: [{}], value: from [{}] to [{}]\", key, anOption.getOptionValue(), value);\n             // Exist\n             anOption.setOptionValue(value);\n             return anOption;\n         }).orElseGet(() -> {\n+            log.debug(\"Creating option key: [{}], value: [{}]\", key, value);\n             // Not exist\n             Option anOption = new Option();\n             anOption.setOptionKey(key);\n@@ -75,7 +76,9 @@ public void save(String key, String value, OptionSource source) {\n         });\n \n         // Save or update the options\n-        optionRepository.save(option);\n+        Option savedOption = optionRepository.save(option);\n+\n+        log.debug(\"Saved option: [{}]\", savedOption);\n     }\n \n     /**\n\ndiff --git a/src/main/java/run/halo/app/web/controller/admin/api/ThemeController.java b/src/main/java/run/halo/app/web/controller/admin/api/ThemeController.java\n--- a/src/main/java/run/halo/app/web/controller/admin/api/ThemeController.java\n+++ b/src/main/java/run/halo/app/web/controller/admin/api/ThemeController.java\n@@ -75,13 +75,7 @@ public List<String> customTemplate() {\n         return themeService.getCustomTpl(themeService.getTheme());\n     }\n \n-    /**\n-     * Active theme.\n-     *\n-     * @param theme theme name\n-     * @throws TemplateModelException TemplateModelException\n-     */\n-    @GetMapping(value = \"active\")\n+    @PostMapping(\"active\")\n     @ApiOperation(\"Active a theme\")\n     public void active(String theme) throws TemplateModelException {\n         // TODO Check existence of the theme\n@@ -90,11 +84,6 @@ public void active(String theme) throws TemplateModelException {\n         configuration.setSharedVariable(\"options\", optionService.listOptions());\n     }\n \n-    /**\n-     * Deletes a theme.\n-     *\n-     * @param key theme key\n-     */\n     @DeleteMapping(\"{key}\")\n     @ApiOperation(\"Deletes a theme\")\n     public void deleteBy(@PathVariable(\"key\") String key) {",
    "output": "Add some logs in save option service"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/listener/StartedListener.java b/src/main/java/run/halo/app/listener/StartedListener.java\n--- a/src/main/java/run/halo/app/listener/StartedListener.java\n+++ b/src/main/java/run/halo/app/listener/StartedListener.java\n@@ -111,7 +111,7 @@ private void cacheThemes() {\n      */\n     private void cacheActiveTheme() {\n         try {\n-            configuration.setSharedVariable(\"themeName\", optionService.getTheme());\n+            configuration.setSharedVariable(\"themeName\", themeService.getTheme());\n         } catch (TemplateModelException e) {\n             log.error(\"\", e);\n         }\n\ndiff --git a/src/main/java/run/halo/app/service/OptionService.java b/src/main/java/run/halo/app/service/OptionService.java\n--- a/src/main/java/run/halo/app/service/OptionService.java\n+++ b/src/main/java/run/halo/app/service/OptionService.java\n@@ -280,12 +280,4 @@ public interface OptionService extends CrudService<Option, Integer> {\n     @NonNull\n     Locale getLocale();\n \n-    /**\n-     * Gets current active theme.\n-     *\n-     * @return current active theme\n-     */\n-    @NonNull\n-    String getTheme();\n-\n }\n\ndiff --git a/src/main/java/run/halo/app/service/ThemeService.java b/src/main/java/run/halo/app/service/ThemeService.java\n--- a/src/main/java/run/halo/app/service/ThemeService.java\n+++ b/src/main/java/run/halo/app/service/ThemeService.java\n@@ -129,4 +129,12 @@ public interface ThemeService {\n     @NonNull\n     String render(@NonNull String pageName);\n \n+    /**\n+     * Gets current theme name.\n+     *\n+     * @return current theme name\n+     */\n+    @NonNull\n+    String getTheme();\n+\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java b/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n@@ -290,9 +290,4 @@ public Locale getLocale() {\n             }\n         }).orElseGet(Locale::getDefault);\n     }\n-\n-    @Override\n-    public String getTheme() {\n-        return getByProperty(PrimaryProperties.THEME).orElse(DEFAULT_THEME_NAME);\n-    }\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n@@ -9,11 +9,11 @@\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n import lombok.extern.slf4j.Slf4j;\n-import org.springframework.lang.NonNull;\n import org.springframework.stereotype.Service;\n import org.springframework.util.Assert;\n import run.halo.app.config.properties.HaloProperties;\n import run.halo.app.exception.NotFoundException;\n+import run.halo.app.model.properties.PrimaryProperties;\n import run.halo.app.model.support.HaloConst;\n import run.halo.app.model.support.Theme;\n import run.halo.app.model.support.ThemeFile;\n@@ -31,6 +31,8 @@\n import java.util.Comparator;\n import java.util.List;\n \n+import static run.halo.app.model.support.HaloConst.DEFAULT_THEME_NAME;\n+\n /**\n  * @author : RYAN0UP\n  * @date : 2019/3/26\n@@ -206,7 +208,7 @@ public List<String> getCustomTpl(String theme) {\n      */\n     @Override\n     public boolean isTemplateExist(String template) {\n-        StrBuilder templatePath = new StrBuilder(getThemeName());\n+        StrBuilder templatePath = new StrBuilder(getTheme());\n         templatePath.append(\"/\");\n         templatePath.append(template);\n         File file = new File(getThemeBasePath(), templatePath.toString());\n@@ -332,16 +334,12 @@ public Object fetchConfig(String themeName) {\n \n     @Override\n     public String render(String pageName) {\n-        return String.format(RENDER_TEMPLATE, optionService.getTheme(), pageName);\n+        return String.format(RENDER_TEMPLATE, getTheme(), pageName);\n     }\n \n-    /**\n-     * Gets theme name.\n-     *\n-     * @return theme name.\n-     */\n-    @NonNull\n-    private String getThemeName() {\n-        return optionService.getTheme();\n+    @Override\n+    public String getTheme() {\n+        return optionService.getByProperty(PrimaryProperties.THEME).orElse(DEFAULT_THEME_NAME);\n     }\n+\n }\n\ndiff --git a/src/main/java/run/halo/app/web/controller/admin/api/ThemeController.java b/src/main/java/run/halo/app/web/controller/admin/api/ThemeController.java\n--- a/src/main/java/run/halo/app/web/controller/admin/api/ThemeController.java\n+++ b/src/main/java/run/halo/app/web/controller/admin/api/ThemeController.java\n@@ -56,7 +56,7 @@ public List<Theme> listAll() {\n      */\n     @GetMapping(\"files\")\n     public List<ThemeFile> listFiles() {\n-        return themeService.listThemeFolderBy(optionService.getTheme());\n+        return themeService.listThemeFolderBy(themeService.getTheme());\n     }\n \n     @GetMapping(\"files/content\")\n@@ -72,7 +72,7 @@ public void updateContentBy(@RequestParam(name = \"path\") String path,\n \n     @GetMapping(\"files/custom\")\n     public List<String> customTemplate() {\n-        return themeService.getCustomTpl(optionService.getTheme());\n+        return themeService.getCustomTpl(themeService.getTheme());\n     }\n \n     /**\n@@ -103,7 +103,7 @@ public void deleteBy(@PathVariable(\"key\") String key) {\n \n     @GetMapping(\"configurations\")\n     @ApiOperation(\"Fetches theme configuration\")\n-    public BaseResponse<Object> fetchConfig(@RequestParam(\"name\") String name) {\n-        return BaseResponse.ok(themeService.fetchConfig(name));\n+    public BaseResponse<Object> fetchConfig() {\n+        return BaseResponse.ok(themeService.fetchConfig(themeService.getTheme()));\n     }\n }\n\ndiff --git a/src/main/java/run/halo/app/web/controller/content/base/BaseContentController.java b/src/main/java/run/halo/app/web/controller/content/base/BaseContentController.java\n--- a/src/main/java/run/halo/app/web/controller/content/base/BaseContentController.java\n+++ b/src/main/java/run/halo/app/web/controller/content/base/BaseContentController.java\n@@ -1,11 +0,0 @@\n-package run.halo.app.web.controller.content.base;\n-\n-/**\n- * Content base Controller\n- *\n- * @author : RYAN0UP\n- * @date : 2017/12/15\n- */\n-public abstract class BaseContentController {\n-\n-}\n\ndiff --git a/src/main/java/run/halo/app/web/controller/core/CommonController.java b/src/main/java/run/halo/app/web/controller/core/CommonController.java\n--- a/src/main/java/run/halo/app/web/controller/core/CommonController.java\n+++ b/src/main/java/run/halo/app/web/controller/core/CommonController.java\n@@ -114,7 +114,7 @@ public String contentNotFround() throws FileNotFoundException {\n             return \"common/error/404\";\n         }\n         StrBuilder path = new StrBuilder(\"themes/\");\n-        path.append(optionService.getTheme());\n+        path.append(themeService.getTheme());\n         path.append(\"/404\");\n         return path.toString();\n     }\n@@ -130,7 +130,7 @@ public String contentInternalError() {\n             return \"common/error/500\";\n         }\n         StrBuilder path = new StrBuilder(\"themes/\");\n-        path.append(optionService.getTheme());\n+        path.append(themeService.getTheme());\n         path.append(\"/500\");\n         return path.toString();\n     }",
    "output": "Refactor ThemeService"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n@@ -95,8 +95,16 @@ public List<Theme> getThemes() {\n                     }\n                     theme = new Theme();\n                     theme.setKey(file.getName());\n-                    File optionsPath = new File(file.getAbsolutePath(), \"module/options.ftl\");\n-                    theme.setHasOptions(optionsPath.exists());\n+                    theme.setHasOptions(false);\n+                    for (String optionsName : OPTIONS_NAMES) {\n+                        // Resolve the options path\n+                        Path optionsPath = workDir.resolve(file.getName()).resolve(optionsName);\n+\n+                        if (!Files.exists(optionsPath)) {\n+                            continue;\n+                        }\n+                        theme.setHasOptions(true);\n+                    }\n                     theme.setProperties(getProperties(new File(getThemeBasePath(), file.getName())));\n                     themes.add(theme);\n                 }",
    "output": "Refactor ThemeService."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/ThemeService.java b/src/main/java/run/halo/app/service/ThemeService.java\n--- a/src/main/java/run/halo/app/service/ThemeService.java\n+++ b/src/main/java/run/halo/app/service/ThemeService.java\n@@ -1,13 +1,14 @@\n package run.halo.app.service;\n \n import org.springframework.lang.NonNull;\n+import org.springframework.lang.Nullable;\n import run.halo.app.model.support.Theme;\n import run.halo.app.model.support.ThemeFile;\n import run.halo.app.model.support.ThemeProperties;\n \n import java.io.File;\n+import java.nio.file.Path;\n import java.util.List;\n-import java.util.Map;\n \n /**\n  * @author : RYAN0UP\n@@ -70,6 +71,13 @@ public interface ThemeService {\n      */\n     File getThemeBasePath();\n \n+    /**\n+     * Gets theme base path.\n+     *\n+     * @return theme base path\n+     */\n+    Path getBasePath();\n+\n     /**\n      * Get theme Properties.\n      *\n@@ -93,6 +101,7 @@ public interface ThemeService {\n      * @param absolutePath absolute path\n      * @param content      new content\n      */\n+    @Deprecated\n     void saveTemplateContent(@NonNull String absolutePath, @NonNull String content);\n \n     /**\n@@ -106,8 +115,8 @@ public interface ThemeService {\n      * Fetchs theme configuration.\n      *\n      * @param themeName theme name must not be blank\n-     * @return theme configuration\n+     * @return theme configuration or null if not found\n      */\n-    @NonNull\n-    Map<String, Object> fetchConfig(@NonNull String themeName);\n+    @Nullable\n+    Object fetchConfig(@NonNull String themeName);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n@@ -6,6 +6,9 @@\n import cn.hutool.core.text.StrBuilder;\n import cn.hutool.core.util.StrUtil;\n import cn.hutool.setting.dialect.Props;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+import lombok.extern.slf4j.Slf4j;\n import org.springframework.stereotype.Service;\n import org.springframework.util.Assert;\n import run.halo.app.config.properties.HaloProperties;\n@@ -18,15 +21,19 @@\n import run.halo.app.utils.FilenameUtils;\n \n import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n import java.util.ArrayList;\n import java.util.Comparator;\n import java.util.List;\n-import java.util.Map;\n \n /**\n  * @author : RYAN0UP\n  * @date : 2019/3/26\n  */\n+@Slf4j\n @Service\n public class ThemeServiceImpl implements ThemeService {\n \n@@ -40,10 +47,17 @@ public class ThemeServiceImpl implements ThemeService {\n      */\n     private static String[] FILTER_FILES = {\".git\", \".DS_Store\", \"theme.properties\"};\n \n-    private final HaloProperties haloProperties;\n+    private final static String THEME_FOLDER = \"templates/themes\";\n+\n+    private final static String[] OPTIONS_NAMES = {\"options.yaml\", \"options.yml\"};\n+\n+    private final Path workDir;\n+\n+    private final ObjectMapper yamlMapper;\n \n     public ThemeServiceImpl(HaloProperties haloProperties) {\n-        this.haloProperties = haloProperties;\n+        yamlMapper = new ObjectMapper(new YAMLFactory());\n+        workDir = Paths.get(haloProperties.getWorkDir(), THEME_FOLDER);\n     }\n \n     /**\n@@ -193,7 +207,12 @@ public boolean isThemeExist(String theme) {\n      */\n     @Override\n     public File getThemeBasePath() {\n-        return new File(haloProperties.getWorkDir(), \"templates/themes\");\n+        return getBasePath().toFile();\n+    }\n+\n+    @Override\n+    public Path getBasePath() {\n+        return workDir;\n     }\n \n     /**\n@@ -260,10 +279,29 @@ public void deleteTheme(String key) {\n     }\n \n     @Override\n-    public Map<String, Object> fetchConfig(String themeName) {\n+    public Object fetchConfig(String themeName) {\n         Assert.hasText(themeName, \"Theme name must not be blank\");\n \n+        try {\n+            for (String optionsName : OPTIONS_NAMES) {\n+                // Resolve the options path\n+                Path optionsPath = workDir.resolve(themeName).resolve(optionsName);\n \n-        return null;\n+                log.debug(\"Finding options in: [{}]\", optionsPath.toString());\n+\n+                // Check existence\n+                if (!Files.exists(optionsPath)) {\n+                    continue;\n+                }\n+\n+                // Read the yaml file and return the object value\n+                return yamlMapper.readValue(optionsPath.toFile(), Object.class);\n+            }\n+\n+            return null;\n+        } catch (IOException e) {\n+            log.error(\"Failed to read options.yaml\", e);\n+            return null;\n+        }\n     }\n }\n\ndiff --git a/src/main/java/run/halo/app/web/controller/admin/api/ThemeController.java b/src/main/java/run/halo/app/web/controller/admin/api/ThemeController.java\n--- a/src/main/java/run/halo/app/web/controller/admin/api/ThemeController.java\n+++ b/src/main/java/run/halo/app/web/controller/admin/api/ThemeController.java\n@@ -7,6 +7,7 @@\n import run.halo.app.model.enums.OptionSource;\n import run.halo.app.model.properties.PrimaryProperties;\n import run.halo.app.model.properties.PropertyEnum;\n+import run.halo.app.model.support.BaseResponse;\n import run.halo.app.model.support.HaloConst;\n import run.halo.app.model.support.Theme;\n import run.halo.app.model.support.ThemeFile;\n@@ -106,4 +107,10 @@ public void active(@RequestParam(name = \"theme\", defaultValue = \"anatole\") Strin\n     public void deleteBy(@PathVariable(\"key\") String key) {\n         themeService.deleteTheme(key);\n     }\n+\n+    @GetMapping(\"configurations\")\n+    @ApiOperation(\"Fetches theme configuration\")\n+    public BaseResponse<Object> fetchConfig(@RequestParam(\"name\") String name) {\n+        return BaseResponse.ok(themeService.fetchConfig(name));\n+    }\n }",
    "output": "Complete theme configuration fetch api"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/ThemeService.java b/src/main/java/run/halo/app/service/ThemeService.java\n--- a/src/main/java/run/halo/app/service/ThemeService.java\n+++ b/src/main/java/run/halo/app/service/ThemeService.java\n@@ -7,6 +7,7 @@\n \n import java.io.File;\n import java.util.List;\n+import java.util.Map;\n \n /**\n  * @author : RYAN0UP\n@@ -27,6 +28,7 @@ public interface ThemeService {\n      * @param absolutePath absolutePath\n      * @return List<ThemeFile>\n      */\n+    @Deprecated\n     List<ThemeFile> listThemeFolder(@NonNull String absolutePath);\n \n     /**\n@@ -82,6 +84,7 @@ public interface ThemeService {\n      * @param absolutePath absolute path\n      * @return template content\n      */\n+    @Deprecated\n     String getTemplateContent(@NonNull String absolutePath);\n \n     /**\n@@ -98,4 +101,13 @@ public interface ThemeService {\n      * @param key theme key\n      */\n     void deleteTheme(@NonNull String key);\n+\n+    /**\n+     * Fetchs theme configuration.\n+     *\n+     * @param themeName theme name must not be blank\n+     * @return theme configuration\n+     */\n+    @NonNull\n+    Map<String, Object> fetchConfig(@NonNull String themeName);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n@@ -7,6 +7,7 @@\n import cn.hutool.core.util.StrUtil;\n import cn.hutool.setting.dialect.Props;\n import org.springframework.stereotype.Service;\n+import org.springframework.util.Assert;\n import run.halo.app.config.properties.HaloProperties;\n import run.halo.app.exception.NotFoundException;\n import run.halo.app.model.support.HaloConst;\n@@ -20,6 +21,7 @@\n import java.util.ArrayList;\n import java.util.Comparator;\n import java.util.List;\n+import java.util.Map;\n \n /**\n  * @author : RYAN0UP\n@@ -256,4 +258,12 @@ public void deleteTheme(String key) {\n         FileUtil.del(file);\n         HaloConst.THEMES = this.getThemes();\n     }\n+\n+    @Override\n+    public Map<String, Object> fetchConfig(String themeName) {\n+        Assert.hasText(themeName, \"Theme name must not be blank\");\n+\n+\n+        return null;\n+    }\n }\n\ndiff --git a/src/test/java/run/halo/app/utils/YamlTest.java b/src/test/java/run/halo/app/utils/YamlTest.java\n--- a/src/test/java/run/halo/app/utils/YamlTest.java\n+++ b/src/test/java/run/halo/app/utils/YamlTest.java\n@@ -0,0 +1,46 @@\n+package run.halo.app.utils;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Yaml test.\n+ *\n+ * @author johnniang\n+ * @date 4/8/19\n+ */\n+public class YamlTest {\n+\n+    private final ObjectMapper yamlMapper = new ObjectMapper(new YAMLFactory());\n+\n+    private final ObjectMapper jsonMapper = new ObjectMapper();\n+\n+    @Test\n+    public void readYamlTest() throws IOException {\n+\n+        String yaml = \"style:\\n\" +\n+                \"  name: Style settings\\n\" +\n+                \"  items:\\n\" +\n+                \"    post_title_lower:\\n\" +\n+                \"      name: post_title_lower\\n\" +\n+                \"      description: Post title lower\\n\" +\n+                \"      type: radio\\n\" +\n+                \"      defaultValue: true\\n\" +\n+                \"      options:\\n\" +\n+                \"        - value: true\\n\" +\n+                \"          label: Enabled\\n\" +\n+                \"        - value: false\\n\" +\n+                \"          label: Disabled\\n\" +\n+                \"    custom_style:\\n\" +\n+                \"      name: custom_style\\n\" +\n+                \"      description: Custom style\\n\" +\n+                \"      type: textarea\\n\";\n+\n+        Object config = yamlMapper.readValue(yaml, Object.class);\n+\n+        System.out.println(jsonMapper.writeValueAsString(config));\n+    }\n+}",
    "output": "Deprecate some dangerous services"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/handler/file/LocalFileHandler.java b/src/main/java/run/halo/app/handler/file/LocalFileHandler.java\n--- a/src/main/java/run/halo/app/handler/file/LocalFileHandler.java\n+++ b/src/main/java/run/halo/app/handler/file/LocalFileHandler.java\n@@ -91,7 +91,7 @@ public UploadResult upload(MultipartFile file) {\n         Assert.notNull(file, \"Multipart file must not be null\");\n \n         // Get current time\n-        Calendar current = Calendar.getInstance(Locale.CHINESE);\n+        Calendar current = Calendar.getInstance(optionService.getLocale());\n         // Get month and day of month\n         int year = current.get(Calendar.YEAR);\n         int month = current.get(Calendar.MONTH) + 1;\n\ndiff --git a/src/main/java/run/halo/app/model/properties/BlogProperties.java b/src/main/java/run/halo/app/model/properties/BlogProperties.java\n--- a/src/main/java/run/halo/app/model/properties/BlogProperties.java\n+++ b/src/main/java/run/halo/app/model/properties/BlogProperties.java\n@@ -6,6 +6,11 @@\n  */\n public enum BlogProperties implements PropertyEnum {\n \n+    /**\n+     * Blog locale.\n+     */\n+    BLOG_LOCALE(\"blog_locale\", String.class),\n+\n     /**\n      * Blog title.\n      */\n\ndiff --git a/src/main/java/run/halo/app/service/OptionService.java b/src/main/java/run/halo/app/service/OptionService.java\n--- a/src/main/java/run/halo/app/service/OptionService.java\n+++ b/src/main/java/run/halo/app/service/OptionService.java\n@@ -268,4 +268,12 @@ public interface OptionService extends CrudService<Option, Integer> {\n      */\n     @NonNull\n     Zone getQnYunZone();\n+\n+    /**\n+     * Gets locale.\n+     *\n+     * @return locale user set or default locale\n+     */\n+    @NonNull\n+    Locale getLocale();\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java b/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/OptionServiceImpl.java\n@@ -269,4 +269,15 @@ public Zone getQnYunZone() {\n \n         }).orElseGet(Zone::autoZone);\n     }\n+\n+    @Override\n+    public Locale getLocale() {\n+        return getByProperty(BlogProperties.BLOG_LOCALE).map(localeStr -> {\n+            try {\n+                return Locale.forLanguageTag(localeStr);\n+            } catch (Exception e) {\n+                return Locale.getDefault();\n+            }\n+        }).orElseGet(Locale::getDefault);\n+    }\n }\n\ndiff --git a/src/main/java/run/halo/app/web/controller/core/InstallController.java b/src/main/java/run/halo/app/web/controller/core/InstallController.java\n--- a/src/main/java/run/halo/app/web/controller/core/InstallController.java\n+++ b/src/main/java/run/halo/app/web/controller/core/InstallController.java\n@@ -164,6 +164,7 @@ private void initSettings(InstallParam installParam) {\n         // Init default properties\n         Map<PropertyEnum, String> properties = new HashMap<>(11);\n         properties.put(PrimaryProperties.IS_INSTALLED, Boolean.TRUE.toString());\n+        properties.put(BlogProperties.BLOG_LOCALE, installParam.getLocale());\n         properties.put(BlogProperties.BLOG_TITLE, installParam.getTitle());\n         properties.put(BlogProperties.BLOG_URL, installParam.getUrl());\n         properties.put(PrimaryProperties.THEME, DEFAULT_THEME_NAME);",
    "output": "Revert"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/web/controller/admin/api/ThemeController.java b/src/main/java/run/halo/app/web/controller/admin/api/ThemeController.java\n--- a/src/main/java/run/halo/app/web/controller/admin/api/ThemeController.java\n+++ b/src/main/java/run/halo/app/web/controller/admin/api/ThemeController.java\n@@ -73,6 +73,11 @@ public void updateContentBy(@RequestParam(name = \"path\") String path,\n         themeService.saveTemplateContent(path, content);\n     }\n \n+    @GetMapping(\"files/custom\")\n+    public List<String> customTemplate(){\n+        return themeService.getCustomTpl(HaloConst.ACTIVATED_THEME_NAME);\n+    }\n+\n     /**\n      * Active theme\n      *",
    "output": "Create api for get custom template."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/service/ThemeService.java b/src/main/java/run/halo/app/service/ThemeService.java\n--- a/src/main/java/run/halo/app/service/ThemeService.java\n+++ b/src/main/java/run/halo/app/service/ThemeService.java\n@@ -3,7 +3,6 @@\n import run.halo.app.model.support.Theme;\n import run.halo.app.model.support.ThemeFile;\n import run.halo.app.model.support.ThemeProperties;\n-import run.halo.app.model.support.ThemeFile;\n \n import java.io.File;\n import java.util.List;\n@@ -75,4 +74,20 @@ public interface ThemeService {\n      * @return ThemeProperties\n      */\n     ThemeProperties getProperties(File path);\n+\n+    /**\n+     * Get template content by template absolute path.\n+     *\n+     * @param absolutePath absolute path\n+     * @return template content\n+     */\n+    String getTemplateContent(String absolutePath);\n+\n+    /**\n+     * Save template content by template absolute path.\n+     *\n+     * @param absolutePath absolute path\n+     * @param content      new content\n+     */\n+    void saveTemplateContent(String absolutePath, String content);\n }\n\ndiff --git a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/run/halo/app/service/impl/ThemeServiceImpl.java\n@@ -1,17 +1,18 @@\n package run.halo.app.service.impl;\n \n+import cn.hutool.core.io.file.FileReader;\n+import cn.hutool.core.io.file.FileWriter;\n+import cn.hutool.core.text.StrBuilder;\n+import cn.hutool.core.util.StrUtil;\n+import cn.hutool.setting.dialect.Props;\n+import org.springframework.stereotype.Service;\n import run.halo.app.config.properties.HaloProperties;\n import run.halo.app.model.support.HaloConst;\n import run.halo.app.model.support.Theme;\n import run.halo.app.model.support.ThemeFile;\n import run.halo.app.model.support.ThemeProperties;\n import run.halo.app.service.ThemeService;\n import run.halo.app.utils.FilenameUtils;\n-import cn.hutool.core.text.StrBuilder;\n-import cn.hutool.core.util.StrUtil;\n-import cn.hutool.setting.dialect.Props;\n-import org.springframework.stereotype.Service;\n-import run.halo.app.model.support.ThemeFile;\n \n import java.io.File;\n import java.util.ArrayList;\n@@ -203,4 +204,28 @@ public ThemeProperties getProperties(File path) {\n         }\n         return properties;\n     }\n+\n+    /**\n+     * Get template content by template absolute path.\n+     *\n+     * @param absolutePath absolute path\n+     * @return template content\n+     */\n+    @Override\n+    public String getTemplateContent(String absolutePath) {\n+        final FileReader fileReader = new FileReader(absolutePath);\n+        return fileReader.readString();\n+    }\n+\n+    /**\n+     * Save template content by template absolute path.\n+     *\n+     * @param absolutePath absolute path\n+     * @param content      new content\n+     */\n+    @Override\n+    public void saveTemplateContent(String absolutePath, String content) {\n+        final FileWriter fileWriter = new FileWriter(absolutePath);\n+        fileWriter.write(content);\n+    }\n }\n\ndiff --git a/src/main/java/run/halo/app/web/controller/admin/api/ThemeController.java b/src/main/java/run/halo/app/web/controller/admin/api/ThemeController.java\n--- a/src/main/java/run/halo/app/web/controller/admin/api/ThemeController.java\n+++ b/src/main/java/run/halo/app/web/controller/admin/api/ThemeController.java\n@@ -1,24 +1,16 @@\n package run.halo.app.web.controller.admin.api;\n \n-import run.halo.app.model.enums.OptionSource;\n-import run.halo.app.model.properties.PrimaryProperties;\n-import run.halo.app.model.properties.PropertyEnum;\n-import run.halo.app.model.support.HaloConst;\n-import run.halo.app.model.support.Theme;\n-import run.halo.app.model.support.ThemeFile;\n-import run.halo.app.service.OptionService;\n-import run.halo.app.service.ThemeService;\n import freemarker.template.Configuration;\n import freemarker.template.TemplateModelException;\n import io.swagger.annotations.ApiOperation;\n-import org.springframework.web.bind.annotation.GetMapping;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestParam;\n-import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.bind.annotation.*;\n import run.halo.app.model.enums.OptionSource;\n import run.halo.app.model.properties.PrimaryProperties;\n+import run.halo.app.model.properties.PropertyEnum;\n+import run.halo.app.model.support.HaloConst;\n import run.halo.app.model.support.Theme;\n import run.halo.app.model.support.ThemeFile;\n+import run.halo.app.service.OptionService;\n import run.halo.app.service.ThemeService;\n \n import java.util.HashMap;\n@@ -70,6 +62,17 @@ public List<ThemeFile> listFiles() {\n         return themeService.listThemeFolderBy(HaloConst.ACTIVATED_THEME_NAME);\n     }\n \n+    @GetMapping(\"files/content\")\n+    public String getContentBy(@RequestParam(name = \"path\") String path) {\n+        return themeService.getTemplateContent(path);\n+    }\n+\n+    @PutMapping(\"files/content\")\n+    public void updateContentBy(@RequestParam(name = \"path\") String path,\n+                                @RequestParam(name = \"content\") String content) {\n+        themeService.saveTemplateContent(path, content);\n+    }\n+\n     /**\n      * Active theme\n      *",
    "output": "Complete admin theme api."
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/config/SwaggerConfiguration.java b/src/main/java/run/halo/app/config/SwaggerConfiguration.java\n--- a/src/main/java/run/halo/app/config/SwaggerConfiguration.java\n+++ b/src/main/java/run/halo/app/config/SwaggerConfiguration.java\n@@ -1,8 +1,5 @@\n package run.halo.app.config;\n \n-import run.halo.app.config.properties.HaloProperties;\n-import run.halo.app.model.entity.User;\n-import run.halo.app.security.support.UserDetail;\n import com.fasterxml.classmate.TypeResolver;\n import io.swagger.models.auth.In;\n import lombok.extern.slf4j.Slf4j;\n@@ -14,6 +11,8 @@\n import org.springframework.lang.NonNull;\n import org.springframework.util.Assert;\n import org.springframework.web.bind.annotation.RequestMethod;\n+import run.halo.app.config.properties.HaloProperties;\n+import run.halo.app.model.entity.User;\n import run.halo.app.security.support.UserDetail;\n import springfox.documentation.builders.*;\n import springfox.documentation.schema.AlternateTypeRule;\n@@ -103,8 +102,8 @@ private Docket buildApiDocket(@NonNull String groupName, @NonNull String basePac\n                 .paths(PathSelectors.ant(antPattern))\n                 .build()\n                 .apiInfo(apiInfo())\n-                .securitySchemes(Arrays.asList(apiKeys()))\n-                .securityContexts(Arrays.asList(securityContext()))\n+                .securitySchemes(Collections.singletonList(apiKeys()))\n+                .securityContexts(Collections.singletonList(securityContext()))\n                 .useDefaultResponseMessages(false)\n                 .globalResponseMessage(RequestMethod.GET, globalResponses)\n                 .globalResponseMessage(RequestMethod.POST, globalResponses)\n@@ -126,7 +125,7 @@ private SecurityContext securityContext() {\n \n     private List<SecurityReference> defaultAuth() {\n         AuthorizationScope[] authorizationScopes = {new AuthorizationScope(\"global\", \"accessEverything\")};\n-        return Arrays.asList(new SecurityReference(\"TOKEN ACCESS\", authorizationScopes));\n+        return Collections.singletonList(new SecurityReference(\"TOKEN ACCESS\", authorizationScopes));\n     }\n \n \n@@ -177,7 +176,7 @@ private Type emptyMixin(Class<?> clazz) {\n     private Type sortMixin() {\n         return new AlternateTypeBuilder()\n                 .fullyQualifiedClassName(String.format(\"%s.generated.%s\", Sort.class.getPackage().getName(), Sort.class.getSimpleName()))\n-                .withProperties(Arrays.asList(property(String[].class, \"sort\")))\n+                .withProperties(Collections.singletonList(property(String[].class, \"sort\")))\n                 .build();\n     }\n ",
    "output": "Update Arrays.asList with Collections.singletonList"
  },
  {
    "input": "diff --git a/src/main/java/run/halo/app/Application.java b/src/main/java/run/halo/app/Application.java\n--- a/src/main/java/run/halo/app/Application.java\n+++ b/src/main/java/run/halo/app/Application.java\n@@ -18,7 +18,7 @@\n @SpringBootApplication\n @EnableJpaAuditing\n @EnableScheduling\n-@EnableJpaRepositories(basePackages = {\"run.halo.app.repository\"}, repositoryBaseClass = BaseRepositoryImpl.class)\n+@EnableJpaRepositories(basePackages = \"run.halo.app.repository\", repositoryBaseClass = BaseRepositoryImpl.class)\n public class Application {\n \n     public static void main(String[] args) {\n\ndiff --git a/src/main/java/run/halo/app/config/SwaggerConfiguration.java b/src/main/java/run/halo/app/config/SwaggerConfiguration.java\n--- a/src/main/java/run/halo/app/config/SwaggerConfiguration.java\n+++ b/src/main/java/run/halo/app/config/SwaggerConfiguration.java\n@@ -63,7 +63,7 @@ public SwaggerConfiguration(HaloProperties haloProperties) {\n     @Bean\n     public Docket haloDefaultApi() {\n         log.debug(\"Doc disabled: [{}]\", haloProperties.getDocDisabled());\n-        return buildApiDocket(\"run.halo.app.default\",\n+        return buildApiDocket(\"run.halo.app.portal.api\",\n                 \"run.halo.app.web.controller.portal.api\",\n                 \"/api/**\")\n                 .enable(!haloProperties.getDocDisabled());\n\ndiff --git a/src/main/java/run/halo/app/model/properties/AttachmentProperties.java b/src/main/java/run/halo/app/model/properties/AttachmentProperties.java\n--- a/src/main/java/run/halo/app/model/properties/AttachmentProperties.java\n+++ b/src/main/java/run/halo/app/model/properties/AttachmentProperties.java\n@@ -22,7 +22,6 @@ public enum AttachmentProperties implements PropertyEnum {\n         this.type = type;\n     }\n \n-\n     @Override\n     public Class<?> getType() {\n         return type;",
    "output": "Change dev database config from mysql to h2"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/params/MenuParam.java b/src/main/java/cc/ryanc/halo/model/params/MenuParam.java\n--- a/src/main/java/cc/ryanc/halo/model/params/MenuParam.java\n+++ b/src/main/java/cc/ryanc/halo/model/params/MenuParam.java\n@@ -4,7 +4,6 @@\n import cc.ryanc.halo.model.entity.Menu;\n import lombok.Data;\n import lombok.ToString;\n-import org.hibernate.validator.constraints.URL;\n \n import javax.validation.constraints.Min;\n import javax.validation.constraints.NotBlank;\n@@ -26,7 +25,6 @@ public class MenuParam implements InputConverter<Menu> {\n \n     @NotBlank(message = \"Menu url must not be blank\")\n     @Size(max = 1023, message = \"Length of menu url must not be more than {max}\")\n-    @URL(message = \"Menu url has incorrect url format\")\n     private String url;\n \n     @Min(value = 0, message = \"Menu sort must not be less than {value}\")",
    "output": "Remove url validation on url property of Menu"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/service/base/AbstractCrudService.java b/src/main/java/cc/ryanc/halo/service/base/AbstractCrudService.java\n--- a/src/main/java/cc/ryanc/halo/service/base/AbstractCrudService.java\n+++ b/src/main/java/cc/ryanc/halo/service/base/AbstractCrudService.java\n@@ -134,7 +134,7 @@ public Optional<DOMAIN> fetchById(ID id) {\n      */\n     @Override\n     public DOMAIN getById(ID id) {\n-        return fetchById(id).orElseThrow(() -> new NotFoundException(domainName + \" was not found\"));\n+        return fetchById(id).orElseThrow(() -> new NotFoundException(domainName + \" was not found or has been deleted\"));\n     }\n \n     /**\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/MenuController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/MenuController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/MenuController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/MenuController.java\n@@ -41,4 +41,24 @@ public List<MenuOutputDTO> listAll(@SortDefault(sort = \"sort\", direction = DESC)\n     public MenuOutputDTO createBy(@RequestBody @Valid MenuParam menuParam) {\n         return new MenuOutputDTO().convertFrom(menuService.createBy(menuParam));\n     }\n+\n+    @PutMapping(\"{menuId:\\\\d+}\")\n+    @ApiOperation(\"Updates a menu\")\n+    public MenuOutputDTO updateBy(@PathVariable(\"menuId\") Integer menuId,\n+                                  @RequestBody @Valid MenuParam menuParam) {\n+        // Get the menu\n+        Menu menu = menuService.getById(menuId);\n+\n+        // Update changed properties of the menu\n+        menuParam.update(menu);\n+\n+        // Update menu in database\n+        return new MenuOutputDTO().convertFrom(menuService.update(menu));\n+    }\n+\n+    @DeleteMapping(\"{menuId:\\\\d+}\")\n+    @ApiOperation(\"Deletes a menu\")\n+    public MenuOutputDTO deleteBy(@PathVariable(\"menuId\") Integer menuId) {\n+        return new MenuOutputDTO().convertFrom(menuService.removeById(menuId));\n+    }\n }",
    "output": "Complete menu updation and deletion api"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/entity/Menu.java b/src/main/java/cc/ryanc/halo/model/entity/Menu.java\n--- a/src/main/java/cc/ryanc/halo/model/entity/Menu.java\n+++ b/src/main/java/cc/ryanc/halo/model/entity/Menu.java\n@@ -31,13 +31,13 @@ public class Menu extends BaseEntity {\n     /**\n      * Menu name.\n      */\n-    @Column(name = \"name\", columnDefinition = \"varchar(255) not null\")\n+    @Column(name = \"name\", columnDefinition = \"varchar(50) not null\")\n     private String name;\n \n     /**\n      * Menu access url.\n      */\n-    @Column(name = \"url\", columnDefinition = \"varchar(255) not null\")\n+    @Column(name = \"url\", columnDefinition = \"varchar(1023) not null\")\n     private String url;\n \n     /**\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/params/MenuParam.java b/src/main/java/cc/ryanc/halo/model/params/MenuParam.java\n--- a/src/main/java/cc/ryanc/halo/model/params/MenuParam.java\n+++ b/src/main/java/cc/ryanc/halo/model/params/MenuParam.java\n@@ -0,0 +1,40 @@\n+package cc.ryanc.halo.model.params;\n+\n+import cc.ryanc.halo.model.dto.base.InputConverter;\n+import cc.ryanc.halo.model.entity.Menu;\n+import lombok.Data;\n+import lombok.ToString;\n+import org.hibernate.validator.constraints.URL;\n+\n+import javax.validation.constraints.Min;\n+import javax.validation.constraints.NotBlank;\n+import javax.validation.constraints.Size;\n+\n+/**\n+ * Menu param.\n+ *\n+ * @author johnniang\n+ * @date 4/3/19\n+ */\n+@Data\n+@ToString\n+public class MenuParam implements InputConverter<Menu> {\n+\n+    @NotBlank(message = \"Menu name must not be blank\")\n+    @Size(max = 50, message = \"Length of menu name must not be more than {max}\")\n+    private String name;\n+\n+    @NotBlank(message = \"Menu url must not be blank\")\n+    @Size(max = 1023, message = \"Length of menu url must not be more than {max}\")\n+    @URL(message = \"Menu url has incorrect url format\")\n+    private String url;\n+\n+    @Min(value = 0, message = \"Menu sort must not be less than {value}\")\n+    private Integer sort;\n+\n+    @Size(max = 50, message = \"Length of menu target must not be more than {max}\")\n+    private String target;\n+\n+    @Size(max = 50, message = \"Length of menu icon must not be more than {max}\")\n+    private String icon;\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/repository/MenuRepository.java b/src/main/java/cc/ryanc/halo/repository/MenuRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/MenuRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/MenuRepository.java\n@@ -2,11 +2,20 @@\n \n import cc.ryanc.halo.model.entity.Menu;\n import cc.ryanc.halo.repository.base.BaseRepository;\n+import org.springframework.lang.NonNull;\n \n /**\n  * Menu repository.\n  *\n  * @author johnniang\n  */\n public interface MenuRepository extends BaseRepository<Menu, Integer> {\n+\n+    /**\n+     * Exists by menu name.\n+     *\n+     * @param name must not be blank\n+     * @return true if exists; false otherwise\n+     */\n+    boolean existsByName(@NonNull String name);\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/MenuService.java b/src/main/java/cc/ryanc/halo/service/MenuService.java\n--- a/src/main/java/cc/ryanc/halo/service/MenuService.java\n+++ b/src/main/java/cc/ryanc/halo/service/MenuService.java\n@@ -2,6 +2,7 @@\n \n import cc.ryanc.halo.model.dto.MenuOutputDTO;\n import cc.ryanc.halo.model.entity.Menu;\n+import cc.ryanc.halo.model.params.MenuParam;\n import cc.ryanc.halo.service.base.CrudService;\n import org.springframework.data.domain.Sort;\n import org.springframework.lang.NonNull;\n@@ -23,4 +24,13 @@ public interface MenuService extends CrudService<Menu, Integer> {\n      */\n     @NonNull\n     List<MenuOutputDTO> listDtos(@NonNull Sort sort);\n+\n+    /**\n+     * Creates a menu.\n+     *\n+     * @param menuParam must not be null\n+     * @return created menu\n+     */\n+    @NonNull\n+    Menu createBy(@NonNull MenuParam menuParam);\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/MenuServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/MenuServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/MenuServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/MenuServiceImpl.java\n@@ -1,7 +1,9 @@\n package cc.ryanc.halo.service.impl;\n \n+import cc.ryanc.halo.exception.AlreadyExistsException;\n import cc.ryanc.halo.model.dto.MenuOutputDTO;\n import cc.ryanc.halo.model.entity.Menu;\n+import cc.ryanc.halo.model.params.MenuParam;\n import cc.ryanc.halo.repository.MenuRepository;\n import cc.ryanc.halo.service.MenuService;\n import cc.ryanc.halo.service.base.AbstractCrudService;\n@@ -37,6 +39,22 @@ public List<MenuOutputDTO> listDtos(Sort sort) {\n         return convertTo(listAll(sort));\n     }\n \n+    @Override\n+    public Menu createBy(MenuParam menuParam) {\n+        Assert.notNull(menuParam, \"Menu param must not be null\");\n+\n+        // Check the name\n+        boolean exists = menuRepository.existsByName(menuParam.getName());\n+\n+        if (exists) {\n+            throw new AlreadyExistsException(\"The menu name \" + menuParam.getName() + \" has already existed\").setErrorData(menuParam.getName());\n+        }\n+\n+        // Create an return\n+        return create(menuParam.convertTo());\n+    }\n+\n+\n     private List<MenuOutputDTO> convertTo(List<Menu> menus) {\n         if (CollectionUtils.isEmpty(menus)) {\n             return Collections.emptyList();\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/MenuController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/MenuController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/MenuController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/MenuController.java\n@@ -1,8 +1,18 @@\n package cc.ryanc.halo.web.controller.admin.api;\n \n+import cc.ryanc.halo.model.dto.MenuOutputDTO;\n+import cc.ryanc.halo.model.entity.Menu;\n+import cc.ryanc.halo.model.params.MenuParam;\n import cc.ryanc.halo.service.MenuService;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RestController;\n+import io.swagger.annotations.ApiOperation;\n+import org.springframework.data.domain.Sort;\n+import org.springframework.data.web.SortDefault;\n+import org.springframework.web.bind.annotation.*;\n+\n+import javax.validation.Valid;\n+import java.util.List;\n+\n+import static org.springframework.data.domain.Sort.Direction.DESC;\n \n /**\n  * Menu controller.\n@@ -20,4 +30,15 @@ public MenuController(MenuService menuService) {\n         this.menuService = menuService;\n     }\n \n+    @GetMapping\n+    @ApiOperation(\"Lists all menus\")\n+    public List<MenuOutputDTO> listAll(@SortDefault(sort = \"sort\", direction = DESC) Sort sort) {\n+        return menuService.listDtos(sort);\n+    }\n+\n+    @PostMapping\n+    @ApiOperation(\"Creates a menu\")\n+    public MenuOutputDTO createBy(@RequestBody @Valid MenuParam menuParam) {\n+        return new MenuOutputDTO().convertFrom(menuService.createBy(menuParam));\n+    }\n }",
    "output": "Complete menu creation api"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/dto/MenuOutputDTO.java b/src/main/java/cc/ryanc/halo/model/dto/MenuOutputDTO.java\n--- a/src/main/java/cc/ryanc/halo/model/dto/MenuOutputDTO.java\n+++ b/src/main/java/cc/ryanc/halo/model/dto/MenuOutputDTO.java\n@@ -0,0 +1,27 @@\n+package cc.ryanc.halo.model.dto;\n+\n+import cc.ryanc.halo.model.dto.base.OutputConverter;\n+import cc.ryanc.halo.model.entity.Menu;\n+import lombok.Data;\n+\n+/**\n+ * Menu output dto.\n+ *\n+ * @author johnniang\n+ * @date 4/3/19\n+ */\n+@Data\n+public class MenuOutputDTO implements OutputConverter<MenuOutputDTO, Menu> {\n+\n+    private Integer id;\n+\n+    private String name;\n+\n+    private String url;\n+\n+    private Integer sort;\n+\n+    private String target;\n+\n+    private String icon;\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/entity/Menu.java b/src/main/java/cc/ryanc/halo/model/entity/Menu.java\n--- a/src/main/java/cc/ryanc/halo/model/entity/Menu.java\n+++ b/src/main/java/cc/ryanc/halo/model/entity/Menu.java\n@@ -62,6 +62,19 @@ public class Menu extends BaseEntity {\n     @Override\n     public void prePersist() {\n         super.prePersist();\n+\n         id = null;\n+\n+        if (sort == null) {\n+            sort = 0;\n+        }\n+\n+        if (target == null) {\n+            target = \"_self\";\n+        }\n+\n+        if (icon == null) {\n+            icon = \"\";\n+        }\n     }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/MenuService.java b/src/main/java/cc/ryanc/halo/service/MenuService.java\n--- a/src/main/java/cc/ryanc/halo/service/MenuService.java\n+++ b/src/main/java/cc/ryanc/halo/service/MenuService.java\n@@ -1,7 +1,12 @@\n package cc.ryanc.halo.service;\n \n+import cc.ryanc.halo.model.dto.MenuOutputDTO;\n import cc.ryanc.halo.model.entity.Menu;\n import cc.ryanc.halo.service.base.CrudService;\n+import org.springframework.data.domain.Sort;\n+import org.springframework.lang.NonNull;\n+\n+import java.util.List;\n \n /**\n  * Menu service.\n@@ -10,4 +15,12 @@\n  */\n public interface MenuService extends CrudService<Menu, Integer> {\n \n+    /**\n+     * Lists all menu dtos.\n+     *\n+     * @param sort must not be null\n+     * @return a list of menu output dto\n+     */\n+    @NonNull\n+    List<MenuOutputDTO> listDtos(@NonNull Sort sort);\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/MenuServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/MenuServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/MenuServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/MenuServiceImpl.java\n@@ -1,10 +1,18 @@\n package cc.ryanc.halo.service.impl;\n \n+import cc.ryanc.halo.model.dto.MenuOutputDTO;\n import cc.ryanc.halo.model.entity.Menu;\n import cc.ryanc.halo.repository.MenuRepository;\n import cc.ryanc.halo.service.MenuService;\n import cc.ryanc.halo.service.base.AbstractCrudService;\n+import org.springframework.data.domain.Sort;\n import org.springframework.stereotype.Service;\n+import org.springframework.util.Assert;\n+import org.springframework.util.CollectionUtils;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n \n /**\n  * MenuService implementation class\n@@ -21,4 +29,21 @@ public MenuServiceImpl(MenuRepository menuRepository) {\n         super(menuRepository);\n         this.menuRepository = menuRepository;\n     }\n+\n+    @Override\n+    public List<MenuOutputDTO> listDtos(Sort sort) {\n+        Assert.notNull(sort, \"Sort info must not be null\");\n+\n+        return convertTo(listAll(sort));\n+    }\n+\n+    private List<MenuOutputDTO> convertTo(List<Menu> menus) {\n+        if (CollectionUtils.isEmpty(menus)) {\n+            return Collections.emptyList();\n+        }\n+\n+        return menus.stream()\n+                .map(menu -> new MenuOutputDTO().<MenuOutputDTO>convertFrom(menu))\n+                .collect(Collectors.toList());\n+    }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java\n@@ -307,14 +307,15 @@ public List<ArchiveMonthVO> listMonthArchives() {\n \n         List<ArchiveMonthVO> archives = new LinkedList<>();\n \n-        yearMonthPostMap.forEach((year, monthPostMap) -> monthPostMap.forEach((month, postList) -> {\n-            ArchiveMonthVO archive = new ArchiveMonthVO();\n-            archive.setYear(year);\n-            archive.setMonth(month);\n-            archive.setPosts(convertTo(postList));\n+        yearMonthPostMap.forEach((year, monthPostMap) ->\n+                monthPostMap.forEach((month, postList) -> {\n+                    ArchiveMonthVO archive = new ArchiveMonthVO();\n+                    archive.setYear(year);\n+                    archive.setMonth(month);\n+                    archive.setPosts(convertTo(postList));\n \n-            archives.add(archive);\n-        }));\n+                    archives.add(archive);\n+                }));\n \n         // Sort this list\n         archives.sort(new ArchiveMonthVO.ArchiveComparator());\n@@ -355,7 +356,8 @@ private List<PostMinimalOutputDTO> convertTo(@NonNull List<Post> posts) {\n         }\n \n         // Convert\n-        return posts.stream().map(post -> new PostMinimalOutputDTO().<PostMinimalOutputDTO>convertFrom(post))\n+        return posts.stream()\n+                .map(post -> new PostMinimalOutputDTO().<PostMinimalOutputDTO>convertFrom(post))\n                 .collect(Collectors.toList());\n     }\n \n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/MenuController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/MenuController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/MenuController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/MenuController.java\n@@ -0,0 +1,23 @@\n+package cc.ryanc.halo.web.controller.admin.api;\n+\n+import cc.ryanc.halo.service.MenuService;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+/**\n+ * Menu controller.\n+ *\n+ * @author johnniang\n+ * @date 4/3/19\n+ */\n+@RestController\n+@RequestMapping(\"/admin/api/menus\")\n+public class MenuController {\n+\n+    private final MenuService menuService;\n+\n+    public MenuController(MenuService menuService) {\n+        this.menuService = menuService;\n+    }\n+\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/portal/api/MenuController.java b/src/main/java/cc/ryanc/halo/web/controller/portal/api/MenuController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/portal/api/MenuController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/portal/api/MenuController.java\n@@ -0,0 +1,37 @@\n+package cc.ryanc.halo.web.controller.portal.api;\n+\n+import cc.ryanc.halo.model.dto.MenuOutputDTO;\n+import cc.ryanc.halo.service.MenuService;\n+import io.swagger.annotations.ApiOperation;\n+import org.springframework.data.domain.Sort;\n+import org.springframework.data.web.SortDefault;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import java.util.List;\n+\n+import static org.springframework.data.domain.Sort.Direction.DESC;\n+\n+/**\n+ * Portal menu controller.\n+ *\n+ * @author johnniang\n+ * @date 4/3/19\n+ */\n+@RestController(\"PortalMenuController\")\n+@RequestMapping(\"/api/menus\")\n+public class MenuController {\n+\n+    private final MenuService menuService;\n+\n+    public MenuController(MenuService menuService) {\n+        this.menuService = menuService;\n+    }\n+\n+    @GetMapping\n+    @ApiOperation(\"Lists all menus\")\n+    public List<MenuOutputDTO> listAll(@SortDefault(sort = \"sort\", direction = DESC) Sort sort) {\n+        return menuService.listDtos(sort);\n+    }\n+}",
    "output": "Complete menu list api"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/freemarker/tag/CategoryTagDirective.java b/src/main/java/cc/ryanc/halo/model/freemarker/tag/CategoryTagDirective.java\n--- a/src/main/java/cc/ryanc/halo/model/freemarker/tag/CategoryTagDirective.java\n+++ b/src/main/java/cc/ryanc/halo/model/freemarker/tag/CategoryTagDirective.java\n@@ -37,6 +37,7 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars, Templ\n                     break;\n                 case \"count\":\n                     env.setVariable(\"count\", builder.build().wrap(categoryService.count()));\n+                    break;\n                 default:\n                     break;\n             }\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/freemarker/tag/LinkTagDirective.java b/src/main/java/cc/ryanc/halo/model/freemarker/tag/LinkTagDirective.java\n--- a/src/main/java/cc/ryanc/halo/model/freemarker/tag/LinkTagDirective.java\n+++ b/src/main/java/cc/ryanc/halo/model/freemarker/tag/LinkTagDirective.java\n@@ -40,6 +40,7 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars, Templ\n                     break;\n                 case \"count\":\n                     env.setVariable(\"count\", builder.build().wrap(linkService.count()));\n+                    break;\n                 default:\n                     break;\n             }\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/freemarker/tag/MenuTagDirective.java b/src/main/java/cc/ryanc/halo/model/freemarker/tag/MenuTagDirective.java\n--- a/src/main/java/cc/ryanc/halo/model/freemarker/tag/MenuTagDirective.java\n+++ b/src/main/java/cc/ryanc/halo/model/freemarker/tag/MenuTagDirective.java\n@@ -37,6 +37,7 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars, Templ\n                     break;\n                 case \"count\":\n                     env.setVariable(\"count\", builder.build().wrap(menuService.count()));\n+                    break;\n                 default:\n                     break;\n             }\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/freemarker/tag/TagTagDirective.java b/src/main/java/cc/ryanc/halo/model/freemarker/tag/TagTagDirective.java\n--- a/src/main/java/cc/ryanc/halo/model/freemarker/tag/TagTagDirective.java\n+++ b/src/main/java/cc/ryanc/halo/model/freemarker/tag/TagTagDirective.java\n@@ -37,6 +37,7 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars, Templ\n                     break;\n                 case \"count\":\n                     env.setVariable(\"count\", builder.build().wrap(tagService.count()));\n+                    break;\n                 default:\n                     break;\n             }",
    "output": "Fixed bugs."
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/listener/StartedListener.java b/src/main/java/cc/ryanc/halo/listener/StartedListener.java\n--- a/src/main/java/cc/ryanc/halo/listener/StartedListener.java\n+++ b/src/main/java/cc/ryanc/halo/listener/StartedListener.java\n@@ -11,7 +11,6 @@\n import cc.ryanc.halo.service.ThemeService;\n import cc.ryanc.halo.service.UserService;\n import cc.ryanc.halo.utils.HaloUtils;\n-import cc.ryanc.halo.web.controller.content.base.BaseContentController;\n import cn.hutool.core.io.FileUtil;\n import cn.hutool.core.util.StrUtil;\n import com.fasterxml.jackson.databind.ObjectMapper;\n@@ -30,6 +29,7 @@\n import java.util.List;\n import java.util.Map;\n \n+import static cc.ryanc.halo.model.support.HaloConst.ACTIVATED_THEME_NAME;\n import static cc.ryanc.halo.model.support.HaloConst.DEFAULT_THEME_NAME;\n \n /**\n@@ -113,10 +113,10 @@ private void cacheThemes() {\n      * Get active theme\n      */\n     private void getActiveTheme() {\n-        BaseContentController.THEME = optionService.getByProperty(PrimaryProperties.THEME).orElse(DEFAULT_THEME_NAME);\n+        ACTIVATED_THEME_NAME = optionService.getByProperty(PrimaryProperties.THEME).orElse(DEFAULT_THEME_NAME);\n \n         try {\n-            configuration.setSharedVariable(\"themeName\", BaseContentController.THEME);\n+            configuration.setSharedVariable(\"themeName\", ACTIVATED_THEME_NAME);\n         } catch (TemplateModelException e) {\n             e.printStackTrace();\n         }\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/support/HaloConst.java b/src/main/java/cc/ryanc/halo/model/support/HaloConst.java\n--- a/src/main/java/cc/ryanc/halo/model/support/HaloConst.java\n+++ b/src/main/java/cc/ryanc/halo/model/support/HaloConst.java\n@@ -24,6 +24,11 @@ public class HaloConst {\n      */\n     public final static String DEFAULT_THEME_NAME = \"anatole\";\n \n+    /**\n+     * Activated theme name.\n+     */\n+    public static String ACTIVATED_THEME_NAME = \"anatole\";\n+\n     /**\n      * version constant\n      */\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/ThemeServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/ThemeServiceImpl.java\n@@ -7,7 +7,6 @@\n import cc.ryanc.halo.model.support.ThemeProperties;\n import cc.ryanc.halo.service.ThemeService;\n import cc.ryanc.halo.utils.FilenameUtils;\n-import cc.ryanc.halo.web.controller.content.base.BaseContentController;\n import cn.hutool.core.text.StrBuilder;\n import cn.hutool.core.util.StrUtil;\n import cn.hutool.setting.dialect.Props;\n@@ -151,7 +150,7 @@ public List<String> getCustomTpl(String theme) {\n      */\n     @Override\n     public boolean isTemplateExist(String template) {\n-        StrBuilder templatePath = new StrBuilder(BaseContentController.THEME);\n+        StrBuilder templatePath = new StrBuilder(HaloConst.ACTIVATED_THEME_NAME);\n         templatePath.append(\"/\");\n         templatePath.append(template);\n         File file = new File(getThemeBasePath(), templatePath.toString());\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/ThemeController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/ThemeController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/ThemeController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/ThemeController.java\n@@ -3,11 +3,11 @@\n import cc.ryanc.halo.model.enums.OptionSource;\n import cc.ryanc.halo.model.properties.PrimaryProperties;\n import cc.ryanc.halo.model.properties.PropertyEnum;\n+import cc.ryanc.halo.model.support.HaloConst;\n import cc.ryanc.halo.model.support.Theme;\n import cc.ryanc.halo.model.support.ThemeFile;\n import cc.ryanc.halo.service.OptionService;\n import cc.ryanc.halo.service.ThemeService;\n-import cc.ryanc.halo.web.controller.content.base.BaseContentController;\n import freemarker.template.Configuration;\n import freemarker.template.TemplateModelException;\n import io.swagger.annotations.ApiOperation;\n@@ -62,7 +62,7 @@ public List<Theme> listAll() {\n      */\n     @GetMapping(\"files\")\n     public List<ThemeFile> listFiles() {\n-        return themeService.listThemeFolderBy(BaseContentController.THEME);\n+        return themeService.listThemeFolderBy(HaloConst.ACTIVATED_THEME_NAME);\n     }\n \n     /**\n@@ -78,7 +78,7 @@ public void active(@RequestParam(name = \"themeName\", defaultValue = \"anatole\") S\n         properties.put(PrimaryProperties.THEME, themeName);\n         // TODO Refactor: saveProperties => saveProperty\n         optionService.saveProperties(properties, OptionSource.SYSTEM);\n-        BaseContentController.THEME = themeName;\n+        HaloConst.ACTIVATED_THEME_NAME = themeName;\n         configuration.setSharedVariable(\"themeName\", themeName);\n         configuration.setSharedVariable(\"options\", optionService.listOptions());\n     }\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/content/base/BaseContentController.java b/src/main/java/cc/ryanc/halo/web/controller/content/base/BaseContentController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/content/base/BaseContentController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/content/base/BaseContentController.java\n@@ -2,7 +2,7 @@\n \n import cn.hutool.core.text.StrBuilder;\n \n-import static cc.ryanc.halo.model.support.HaloConst.DEFAULT_THEME_NAME;\n+import static cc.ryanc.halo.model.support.HaloConst.ACTIVATED_THEME_NAME;\n \n /**\n  * Content base Controller\n@@ -12,12 +12,6 @@\n  */\n public abstract class BaseContentController {\n \n-    /**\n-     * Default theme\n-     */\n-    @Deprecated\n-    public static String THEME = DEFAULT_THEME_NAME;\n-\n     /**\n      * Render page by template name\n      *\n@@ -26,7 +20,7 @@ public abstract class BaseContentController {\n      */\n     public String render(String pageName) {\n         final StrBuilder themeStr = new StrBuilder(\"themes/\");\n-        themeStr.append(THEME);\n+        themeStr.append(ACTIVATED_THEME_NAME);\n         themeStr.append(\"/\");\n         themeStr.append(pageName);\n         return themeStr.toString();\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/core/CommonController.java b/src/main/java/cc/ryanc/halo/web/controller/core/CommonController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/core/CommonController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/core/CommonController.java\n@@ -3,7 +3,6 @@\n import cc.ryanc.halo.model.entity.User;\n import cc.ryanc.halo.model.support.HaloConst;\n import cc.ryanc.halo.service.ThemeService;\n-import cc.ryanc.halo.web.controller.content.base.BaseContentController;\n import cn.hutool.core.text.StrBuilder;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -107,7 +106,7 @@ public String contentNotFround() throws FileNotFoundException {\n             return \"common/error/404\";\n         }\n         StrBuilder path = new StrBuilder(\"themes/\");\n-        path.append(BaseContentController.THEME);\n+        path.append(HaloConst.ACTIVATED_THEME_NAME);\n         path.append(\"/404\");\n         return path.toString();\n     }\n@@ -123,7 +122,7 @@ public String contentInternalError() throws FileNotFoundException {\n             return \"common/error/500\";\n         }\n         StrBuilder path = new StrBuilder(\"themes/\");\n-        path.append(BaseContentController.THEME);\n+        path.append(HaloConst.ACTIVATED_THEME_NAME);\n         path.append(\"/500\");\n         return path.toString();\n     }",
    "output": "Remove the THEME attribute from BaseContentController."
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/web/controller/portal/api/OptionController.java b/src/main/java/cc/ryanc/halo/web/controller/portal/api/OptionController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/portal/api/OptionController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/portal/api/OptionController.java\n@@ -0,0 +1,49 @@\n+package cc.ryanc.halo.web.controller.portal.api;\n+\n+import cc.ryanc.halo.model.dto.OptionOutputDTO;\n+import cc.ryanc.halo.model.support.BaseResponse;\n+import cc.ryanc.halo.service.OptionService;\n+import io.swagger.annotations.ApiOperation;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+/**\n+ * Portal option controller.\n+ *\n+ * @author johnniang\n+ * @date 4/3/19\n+ */\n+@RestController(\"PortalOptionController\")\n+@RequestMapping(\"/api/options\")\n+public class OptionController {\n+\n+    private final OptionService optionService;\n+\n+    public OptionController(OptionService optionService) {\n+        this.optionService = optionService;\n+    }\n+\n+    @GetMapping(\"list_view\")\n+    @ApiOperation(\"Lists all options with list view\")\n+    public List<OptionOutputDTO> listAll() {\n+        return optionService.listDtos();\n+    }\n+\n+    @GetMapping(\"map_view\")\n+    @ApiOperation(\"Lists all options with map view\")\n+    public Map<String, String> listAllWithMapView() {\n+        return optionService.listOptions();\n+    }\n+\n+    @GetMapping(\"keys/{key}\")\n+    @ApiOperation(\"Gets option value by option key\")\n+    public BaseResponse<String> getBy(@PathVariable(\"key\") String key) {\n+        return BaseResponse.ok(HttpStatus.OK.getReasonPhrase(), optionService.getByKey(key).orElse(\"\"));\n+    }\n+}",
    "output": "Complete portal option apis"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/dto/LinkTeamOutputDTO.java b/src/main/java/cc/ryanc/halo/model/dto/LinkTeamOutputDTO.java\n--- a/src/main/java/cc/ryanc/halo/model/dto/LinkTeamOutputDTO.java\n+++ b/src/main/java/cc/ryanc/halo/model/dto/LinkTeamOutputDTO.java\n@@ -1,19 +0,0 @@\n-package cc.ryanc.halo.model.dto;\n-\n-import cc.ryanc.halo.model.dto.base.OutputConverter;\n-import cc.ryanc.halo.model.entity.Link;\n-import lombok.Data;\n-\n-import java.util.List;\n-\n-/**\n- * @author : RYAN0UP\n- * @date : 2019/3/22\n- */\n-@Data\n-public class LinkTeamOutputDTO implements OutputConverter<LinkTeamOutputDTO, Link> {\n-\n-    private String team;\n-\n-    private List<Link> links;\n-}\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/freemarker/tag/LinkTagDirective.java b/src/main/java/cc/ryanc/halo/model/freemarker/tag/LinkTagDirective.java\n--- a/src/main/java/cc/ryanc/halo/model/freemarker/tag/LinkTagDirective.java\n+++ b/src/main/java/cc/ryanc/halo/model/freemarker/tag/LinkTagDirective.java\n@@ -35,7 +35,7 @@ public void execute(Environment env, Map params, TemplateModel[] loopVars, Templ\n                 case \"list\":\n                     env.setVariable(\"links\", builder.build().wrap(linkService.listAll()));\n                     break;\n-                case \"listTeam\":\n+                case \"listTeamVos\":\n                     env.setVariable(\"links\", builder.build().wrap(null));\n                     break;\n                 case \"count\":\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/vo/LinkTeamVO.java b/src/main/java/cc/ryanc/halo/model/vo/LinkTeamVO.java\n--- a/src/main/java/cc/ryanc/halo/model/vo/LinkTeamVO.java\n+++ b/src/main/java/cc/ryanc/halo/model/vo/LinkTeamVO.java\n@@ -0,0 +1,22 @@\n+package cc.ryanc.halo.model.vo;\n+\n+import cc.ryanc.halo.model.dto.LinkOutputDTO;\n+import lombok.Data;\n+import lombok.ToString;\n+\n+import java.util.List;\n+\n+/**\n+ * Link team vo.\n+ *\n+ * @author : RYAN0UP\n+ * @date : 2019/3/22\n+ */\n+@Data\n+@ToString\n+public class LinkTeamVO {\n+\n+    private String team;\n+\n+    private List<LinkOutputDTO> links;\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/portal/api/LinkController.java b/src/main/java/cc/ryanc/halo/web/controller/portal/api/LinkController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/portal/api/LinkController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/portal/api/LinkController.java\n@@ -0,0 +1,32 @@\n+package cc.ryanc.halo.web.controller.portal.api;\n+\n+import cc.ryanc.halo.model.vo.LinkTeamVO;\n+import cc.ryanc.halo.service.LinkService;\n+import org.springframework.data.domain.Sort;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import java.util.List;\n+\n+/**\n+ * Portal link controller.\n+ *\n+ * @author johnniang\n+ * @date 4/3/19\n+ */\n+@RestController(\"PortalLinkController\")\n+@RequestMapping(\"/api/links\")\n+public class LinkController {\n+\n+    private final LinkService linkService;\n+\n+    public LinkController(LinkService linkService) {\n+        this.linkService = linkService;\n+    }\n+\n+    @GetMapping(\"team_view\")\n+    public List<LinkTeamVO> listTeamVos(Sort sort) {\n+        return linkService.listTeamVos(sort);\n+    }\n+}",
    "output": "Complete link team view api"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/entity/Link.java b/src/main/java/cc/ryanc/halo/model/entity/Link.java\n--- a/src/main/java/cc/ryanc/halo/model/entity/Link.java\n+++ b/src/main/java/cc/ryanc/halo/model/entity/Link.java\n@@ -37,13 +37,13 @@ public class Link extends BaseEntity {\n     /**\n      * Link website address.\n      */\n-    @Column(name = \"url\", columnDefinition = \"varchar(255) not null\")\n+    @Column(name = \"url\", columnDefinition = \"varchar(1023) not null\")\n     private String url;\n \n     /**\n      * Website logo.\n      */\n-    @Column(name = \"logo\", columnDefinition = \"varchar(255) default ''\")\n+    @Column(name = \"logo\", columnDefinition = \"varchar(1023) default ''\")\n     private String logo;\n \n     /**\n@@ -62,6 +62,19 @@ public class Link extends BaseEntity {\n     @Override\n     public void prePersist() {\n         super.prePersist();\n+\n         id = null;\n+\n+        if (logo == null) {\n+            logo = \"\";\n+        }\n+\n+        if (description == null) {\n+            description = \"\";\n+        }\n+\n+        if (team == null) {\n+            team = \"\";\n+        }\n     }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/params/LinkParam.java b/src/main/java/cc/ryanc/halo/model/params/LinkParam.java\n--- a/src/main/java/cc/ryanc/halo/model/params/LinkParam.java\n+++ b/src/main/java/cc/ryanc/halo/model/params/LinkParam.java\n@@ -0,0 +1,38 @@\n+package cc.ryanc.halo.model.params;\n+\n+import cc.ryanc.halo.model.dto.base.InputConverter;\n+import cc.ryanc.halo.model.entity.Link;\n+import lombok.Data;\n+import org.hibernate.validator.constraints.URL;\n+\n+import javax.validation.constraints.NotBlank;\n+import javax.validation.constraints.Size;\n+\n+/**\n+ * Link param.\n+ *\n+ * @author johnniang\n+ * @date 4/3/19\n+ */\n+@Data\n+public class LinkParam implements InputConverter<Link> {\n+\n+    @NotBlank(message = \"Link name must not be blank\")\n+    @Size(max = 255, message = \"Length of link name must not be more than {max}\")\n+    private String name;\n+\n+    @NotBlank(message = \"Link url must not be blank\")\n+    @Size(max = 1023, message = \"Length of link url must not be more than {max}\")\n+    @URL(message = \"Link url format is incorrect\")\n+    private String url;\n+\n+    @Size(max = 1023, message = \"Length of link logo must not be more than {max}\")\n+    private String logo;\n+\n+    @Size(max = 255, message = \"Length of link description must not be more than {max}\")\n+    private String description;\n+\n+    @Size(max = 255, message = \"Length of link team must not be more than {max}\")\n+    private String team;\n+\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/LinkService.java b/src/main/java/cc/ryanc/halo/service/LinkService.java\n--- a/src/main/java/cc/ryanc/halo/service/LinkService.java\n+++ b/src/main/java/cc/ryanc/halo/service/LinkService.java\n@@ -1,8 +1,9 @@\n package cc.ryanc.halo.service;\n \n import cc.ryanc.halo.model.dto.LinkOutputDTO;\n-import cc.ryanc.halo.model.dto.LinkTeamOutputDTO;\n import cc.ryanc.halo.model.entity.Link;\n+import cc.ryanc.halo.model.params.LinkParam;\n+import cc.ryanc.halo.model.vo.LinkTeamVO;\n import cc.ryanc.halo.service.base.CrudService;\n import org.springframework.data.domain.Sort;\n import org.springframework.lang.NonNull;\n@@ -22,12 +23,40 @@ public interface LinkService extends CrudService<Link, Integer> {\n      * @param sort sort\n      * @return all links\n      */\n+    @NonNull\n     List<LinkOutputDTO> listDtos(@NonNull Sort sort);\n \n     /**\n      * List link by group\n      *\n-     * @return List<LinkTeamOutputDTO>\n+     * @return a list of link team vo\n      */\n-    List<LinkTeamOutputDTO> listTeam();\n+    @NonNull\n+    List<LinkTeamVO> listTeamVos();\n+\n+    /**\n+     * Lists link team vos.\n+     *\n+     * @param sort must not be null\n+     * @return a list of link team vo\n+     */\n+    @NonNull\n+    List<LinkTeamVO> listTeamVos(@NonNull Sort sort);\n+\n+    /**\n+     * Creates link by link param.\n+     *\n+     * @param linkParam must not be null\n+     * @return create link\n+     */\n+    @NonNull\n+    Link createBy(@NonNull LinkParam linkParam);\n+\n+    /**\n+     * Exists by link name.\n+     *\n+     * @param name must not be blank\n+     * @return true if exists; false otherwise\n+     */\n+    boolean existByName(String name);\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/LinkServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/LinkServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/LinkServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/LinkServiceImpl.java\n@@ -1,16 +1,23 @@\n package cc.ryanc.halo.service.impl;\n \n+import cc.ryanc.halo.exception.AlreadyExistsException;\n import cc.ryanc.halo.model.dto.LinkOutputDTO;\n-import cc.ryanc.halo.model.dto.LinkTeamOutputDTO;\n import cc.ryanc.halo.model.entity.Link;\n+import cc.ryanc.halo.model.params.LinkParam;\n+import cc.ryanc.halo.model.vo.LinkTeamVO;\n import cc.ryanc.halo.repository.LinkRepository;\n import cc.ryanc.halo.service.LinkService;\n import cc.ryanc.halo.service.base.AbstractCrudService;\n+import cc.ryanc.halo.utils.ServiceUtils;\n+import org.springframework.data.domain.Example;\n import org.springframework.data.domain.Sort;\n+import org.springframework.lang.NonNull;\n+import org.springframework.lang.Nullable;\n import org.springframework.stereotype.Service;\n import org.springframework.util.Assert;\n+import org.springframework.util.CollectionUtils;\n \n-import java.util.List;\n+import java.util.*;\n import java.util.stream.Collectors;\n \n /**\n@@ -39,17 +46,79 @@ public LinkServiceImpl(LinkRepository linkRepository) {\n     public List<LinkOutputDTO> listDtos(Sort sort) {\n         Assert.notNull(sort, \"Sort info must not be null\");\n \n-        return listAll(sort).stream().map(link -> (LinkOutputDTO) new LinkOutputDTO().convertFrom(link)).collect(Collectors.toList());\n+        return convertTo(listAll(sort));\n     }\n \n     /**\n      * List link by group\n      *\n-     * @return List<LinkTeamOutputDTO>\n+     * @return List<LinkTeamVO>\n      */\n     @Override\n-    public List<LinkTeamOutputDTO> listTeam() {\n+    public List<LinkTeamVO> listTeamVos() {\n         // TODO list team\n         return null;\n     }\n+\n+    @Override\n+    public List<LinkTeamVO> listTeamVos(Sort sort) {\n+        Assert.notNull(sort, \"Sort info must not be null\");\n+\n+        // List all links\n+        List<LinkOutputDTO> links = listDtos(sort);\n+\n+        // Get teams\n+        Set<String> teams = ServiceUtils.fetchProperty(links, LinkOutputDTO::getTeam);\n+\n+        // Convert to team link list map (Key: team, value: link list)\n+        Map<String, List<LinkOutputDTO>> teamLinkListMap = ServiceUtils.convertToListMap(teams, links, LinkOutputDTO::getTeam);\n+\n+        List<LinkTeamVO> result = new LinkedList<>();\n+\n+        // Wrap link team vo list\n+        teamLinkListMap.forEach((team, linkList) -> {\n+            // Build link team vo\n+            LinkTeamVO linkTeamVO = new LinkTeamVO();\n+            linkTeamVO.setTeam(team);\n+            linkTeamVO.setLinks(linkList);\n+\n+            // Add it to result\n+            result.add(linkTeamVO);\n+        });\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public Link createBy(LinkParam linkParam) {\n+        Assert.notNull(linkParam, \"Link param must not be null\");\n+\n+        // Check the name\n+        boolean exist = existByName(linkParam.getName());\n+\n+        if (exist) {\n+            throw new AlreadyExistsException(\"Link name \" + linkParam.getName() + \" has already existed\").setErrorData(linkParam.getName());\n+        }\n+\n+        return create(linkParam.convertTo());\n+    }\n+\n+    @Override\n+    public boolean existByName(String name) {\n+        Assert.hasText(name, \"Link name must not be blank\");\n+        Link link = new Link();\n+        link.setName(name);\n+\n+        return linkRepository.exists(Example.of(link));\n+    }\n+\n+    @NonNull\n+    private List<LinkOutputDTO> convertTo(@Nullable List<Link> links) {\n+        if (CollectionUtils.isEmpty(links)) {\n+            return Collections.emptyList();\n+        }\n+\n+        return links.stream().map(link -> new LinkOutputDTO().<LinkOutputDTO>convertFrom(link))\n+                .collect(Collectors.toList());\n+    }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/LinkController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/LinkController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/LinkController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/LinkController.java\n@@ -1,12 +1,15 @@\n package cc.ryanc.halo.web.controller.admin.api;\n \n import cc.ryanc.halo.model.dto.LinkOutputDTO;\n+import cc.ryanc.halo.model.entity.Link;\n+import cc.ryanc.halo.model.params.LinkParam;\n import cc.ryanc.halo.service.LinkService;\n import io.swagger.annotations.ApiOperation;\n import org.springframework.data.domain.Sort;\n import org.springframework.data.web.SortDefault;\n import org.springframework.web.bind.annotation.*;\n \n+import javax.validation.Valid;\n import java.util.List;\n \n /**\n@@ -16,7 +19,7 @@\n  * @date : 2019/3/21\n  */\n @RestController\n-@RequestMapping(value = \"/admin/api/links\")\n+@RequestMapping(\"/admin/api/links\")\n public class LinkController {\n \n     private final LinkService linkService;\n@@ -48,6 +51,12 @@ public LinkOutputDTO getBy(@PathVariable(\"id\") Integer id) {\n         return new LinkOutputDTO().convertFrom(linkService.getById(id));\n     }\n \n+    @PostMapping\n+    public LinkOutputDTO createBy(@RequestBody @Valid LinkParam linkParam) {\n+        Link link = linkService.createBy(linkParam);\n+        return new LinkOutputDTO().convertFrom(link);\n+    }\n+\n     /**\n      * Delete link by id.\n      *",
    "output": "Complete link creation api"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/PostController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/PostController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/PostController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/PostController.java\n@@ -5,17 +5,12 @@\n import cc.ryanc.halo.model.entity.Post;\n import cc.ryanc.halo.model.enums.PostStatus;\n import cc.ryanc.halo.model.params.PostParam;\n-import cc.ryanc.halo.model.vo.CommentWithParentVO;\n-import cc.ryanc.halo.model.vo.CommentVO;\n import cc.ryanc.halo.model.vo.PostDetailVO;\n import cc.ryanc.halo.service.*;\n import io.swagger.annotations.ApiOperation;\n import org.springframework.data.domain.Page;\n-import org.springframework.data.domain.PageRequest;\n import org.springframework.data.domain.Pageable;\n-import org.springframework.data.domain.Sort;\n import org.springframework.data.web.PageableDefault;\n-import org.springframework.data.web.SortDefault;\n import org.springframework.web.bind.annotation.*;\n \n import javax.validation.Valid;\n@@ -104,19 +99,4 @@ public void deletePermanently(@PathVariable(\"postId\") Integer postId) {\n         postTagService.removeByPostId(postId);\n     }\n \n-    @GetMapping(\"{postId:\\\\d+}/comments/tree_view\")\n-    @ApiOperation(\"Lists comments with tree view\")\n-    public Page<CommentVO> listCommentsTree(@PathVariable(\"postId\") Integer postId,\n-                                            @RequestParam(name = \"page\", required = false, defaultValue = \"0\") int page,\n-                                            @SortDefault(sort = \"createTime\", direction = DESC) Sort sort) {\n-        return commentService.pageVosBy(postId, PageRequest.of(page, optionService.getCommentPageSize(), sort));\n-    }\n-\n-    @GetMapping(\"{postId:\\\\d+}/comments/list_view\")\n-    @ApiOperation(\"Lists comment with list view\")\n-    public Page<CommentWithParentVO> listComments(@PathVariable(\"postId\") Integer postId,\n-                                                  @RequestParam(name = \"page\", required = false, defaultValue = \"0\") int page,\n-                                                  @SortDefault(sort = \"createTime\", direction = DESC) Sort sort) {\n-        return commentService.pageWithParentVoBy(postId, PageRequest.of(page, optionService.getCommentPageSize(), sort));\n-    }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/portal/api/PostController.java b/src/main/java/cc/ryanc/halo/web/controller/portal/api/PostController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/portal/api/PostController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/portal/api/PostController.java\n@@ -3,11 +3,18 @@\n import cc.ryanc.halo.model.dto.post.PostDetailOutputDTO;\n import cc.ryanc.halo.model.dto.post.PostSimpleOutputDTO;\n import cc.ryanc.halo.model.enums.PostStatus;\n+import cc.ryanc.halo.model.vo.CommentVO;\n+import cc.ryanc.halo.model.vo.CommentWithParentVO;\n+import cc.ryanc.halo.service.CommentService;\n+import cc.ryanc.halo.service.OptionService;\n import cc.ryanc.halo.service.PostService;\n import io.swagger.annotations.ApiOperation;\n import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.PageRequest;\n import org.springframework.data.domain.Pageable;\n+import org.springframework.data.domain.Sort;\n import org.springframework.data.web.PageableDefault;\n+import org.springframework.data.web.SortDefault;\n import org.springframework.web.bind.annotation.*;\n \n import static org.springframework.data.domain.Sort.Direction.DESC;\n@@ -24,8 +31,16 @@ public class PostController {\n \n     private final PostService postService;\n \n-    public PostController(PostService postService) {\n+    private final CommentService commentService;\n+\n+    private final OptionService optionService;\n+\n+    public PostController(PostService postService,\n+                          CommentService commentService,\n+                          OptionService optionService) {\n         this.postService = postService;\n+        this.commentService = commentService;\n+        this.optionService = optionService;\n     }\n \n     @GetMapping\n@@ -53,4 +68,20 @@ public PostDetailOutputDTO getBy(@PathVariable(\"postId\") Integer postId,\n \n         return postDetail;\n     }\n+\n+    @GetMapping(\"{postId:\\\\d+}/comments/tree_view\")\n+    @ApiOperation(\"Lists comments with tree view\")\n+    public Page<CommentVO> listCommentsTree(@PathVariable(\"postId\") Integer postId,\n+                                            @RequestParam(name = \"page\", required = false, defaultValue = \"0\") int page,\n+                                            @SortDefault(sort = \"createTime\", direction = DESC) Sort sort) {\n+        return commentService.pageVosBy(postId, PageRequest.of(page, optionService.getCommentPageSize(), sort));\n+    }\n+\n+    @GetMapping(\"{postId:\\\\d+}/comments/list_view\")\n+    @ApiOperation(\"Lists comment with list view\")\n+    public Page<CommentWithParentVO> listComments(@PathVariable(\"postId\") Integer postId,\n+                                                  @RequestParam(name = \"page\", required = false, defaultValue = \"0\") int page,\n+                                                  @SortDefault(sort = \"createTime\", direction = DESC) Sort sort) {\n+        return commentService.pageWithParentVoBy(postId, PageRequest.of(page, optionService.getCommentPageSize(), sort));\n+    }\n }",
    "output": "Move comment list api from admin to portal"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/config/HaloConfiguration.java b/src/main/java/cc/ryanc/halo/config/HaloConfiguration.java\n--- a/src/main/java/cc/ryanc/halo/config/HaloConfiguration.java\n+++ b/src/main/java/cc/ryanc/halo/config/HaloConfiguration.java\n@@ -122,12 +122,13 @@ public FilterRegistrationBean<AdminAuthenticationFilter> adminAuthenticationFilt\n         // Config the admin filter\n         adminAuthenticationFilter.addExcludeUrlPatterns(\"/admin/api/login\");\n         adminAuthenticationFilter.addTryAuthUrlMethodPattern(\"/admin/api/comments\", HttpMethod.POST.name());\n+        adminAuthenticationFilter.addTryAuthUrlMethodPattern(\"/api/comments\", HttpMethod.POST.name());\n         adminAuthenticationFilter.setFailureHandler(\n                 failureHandler);\n \n         FilterRegistrationBean<AdminAuthenticationFilter> authenticationFilter = new FilterRegistrationBean<>();\n         authenticationFilter.setFilter(adminAuthenticationFilter);\n-        authenticationFilter.addUrlPatterns(\"/admin/*\");\n+        authenticationFilter.addUrlPatterns(\"/admin/*\", \"/api/comments\");\n         authenticationFilter.setOrder(1);\n         return authenticationFilter;\n     }\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/CommentController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/CommentController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/CommentController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/CommentController.java\n@@ -3,12 +3,10 @@\n import cc.ryanc.halo.model.dto.CommentOutputDTO;\n import cc.ryanc.halo.model.entity.Comment;\n import cc.ryanc.halo.model.entity.User;\n-import cc.ryanc.halo.model.properties.BlogProperties;\n import cc.ryanc.halo.model.enums.CommentStatus;\n import cc.ryanc.halo.model.params.CommentParam;\n+import cc.ryanc.halo.model.properties.BlogProperties;\n import cc.ryanc.halo.model.vo.CommentWithPostVO;\n-import cc.ryanc.halo.security.authentication.Authentication;\n-import cc.ryanc.halo.security.context.SecurityContextHolder;\n import cc.ryanc.halo.service.CommentService;\n import cc.ryanc.halo.service.OptionService;\n import cc.ryanc.halo.service.PostService;\n@@ -62,16 +60,11 @@ public Page<CommentWithPostVO> pageBy(@PageableDefault(sort = \"updateTime\", dire\n     }\n \n     @PostMapping\n-    public CommentOutputDTO createBy(@RequestBody CommentParam commentParam, HttpServletRequest request) {\n-        // Get authentication\n-        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n-        if (authentication != null) {\n-            User user = authentication.getDetail().getUser();\n-            // If the admin is login\n-            commentParam.setAuthor(StringUtils.isEmpty(user.getNickname()) ? user.getUsername() : user.getNickname());\n-            commentParam.setEmail(user.getEmail());\n-            commentParam.setAuthorUrl(optionService.getByPropertyOfNullable(BlogProperties.BLOG_URL));\n-        }\n+    public CommentOutputDTO createBy(@RequestBody CommentParam commentParam, HttpServletRequest request, User user) {\n+        // Set some default info\n+        commentParam.setAuthor(StringUtils.isEmpty(user.getNickname()) ? user.getUsername() : user.getNickname());\n+        commentParam.setEmail(user.getEmail());\n+        commentParam.setAuthorUrl(optionService.getByPropertyOfNullable(BlogProperties.BLOG_URL));\n \n         // Validate the comment param manually\n         ValidationUtils.validate(commentParam);\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/portal/api/CommentController.java b/src/main/java/cc/ryanc/halo/web/controller/portal/api/CommentController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/portal/api/CommentController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/portal/api/CommentController.java\n@@ -0,0 +1,70 @@\n+package cc.ryanc.halo.web.controller.portal.api;\n+\n+import cc.ryanc.halo.model.dto.CommentOutputDTO;\n+import cc.ryanc.halo.model.entity.User;\n+import cc.ryanc.halo.model.params.CommentParam;\n+import cc.ryanc.halo.model.properties.BlogProperties;\n+import cc.ryanc.halo.security.authentication.Authentication;\n+import cc.ryanc.halo.security.context.SecurityContextHolder;\n+import cc.ryanc.halo.service.CommentService;\n+import cc.ryanc.halo.service.OptionService;\n+import cc.ryanc.halo.service.PostService;\n+import cc.ryanc.halo.utils.ValidationUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import javax.servlet.http.HttpServletRequest;\n+\n+/**\n+ * Portal comment controller.\n+ *\n+ * @author johnniang\n+ * @date 4/3/19\n+ */\n+@RestController(\"PortalCommentController\")\n+@RequestMapping(\"/api/comments\")\n+public class CommentController {\n+\n+    private final CommentService commentService;\n+\n+    private final OptionService optionService;\n+\n+    private final PostService postService;\n+\n+    public CommentController(CommentService commentService,\n+                             OptionService optionService,\n+                             PostService postService) {\n+        this.commentService = commentService;\n+        this.optionService = optionService;\n+        this.postService = postService;\n+    }\n+\n+    @PostMapping\n+    public CommentOutputDTO comment(@RequestBody CommentParam commentParam, HttpServletRequest request) {\n+        // Get authentication\n+        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n+        if (authentication != null) {\n+            User user = authentication.getDetail().getUser();\n+            // If the admin is login\n+            commentParam.setAuthor(StringUtils.isEmpty(user.getNickname()) ? user.getUsername() : user.getNickname());\n+            commentParam.setEmail(user.getEmail());\n+            commentParam.setAuthorUrl(optionService.getByPropertyOfNullable(BlogProperties.BLOG_URL));\n+        }\n+\n+        // Validate the comment param manually\n+        ValidationUtils.validate(commentParam);\n+\n+        // Check post id\n+        postService.mustExistById(commentParam.getPostId());\n+\n+        // Check parent id\n+        if (commentParam.getParentId() != null && commentParam.getParentId() > 0) {\n+            commentService.mustExistById(commentParam.getParentId());\n+        }\n+\n+        return new CommentOutputDTO().convertFrom(commentService.createBy(commentParam.convertTo(), request));\n+    }\n+}",
    "output": "Complete portal comment api"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/service/UserService.java b/src/main/java/cc/ryanc/halo/service/UserService.java\n--- a/src/main/java/cc/ryanc/halo/service/UserService.java\n+++ b/src/main/java/cc/ryanc/halo/service/UserService.java\n@@ -26,8 +26,19 @@ public interface UserService extends CrudService<User, Integer> {\n      */\n     int MAX_LOGIN_TRY = 5;\n \n+    /**\n+     * Lock minutes.\n+     */\n     int LOCK_MINUTES = 10;\n \n+    /**\n+     * Gets current user.\n+     *\n+     * @return an optional user\n+     */\n+    @NonNull\n+    Optional<User> getCurrentUser();\n+\n     /**\n      * Gets user by username.\n      *\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/UserServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/UserServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/UserServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/UserServiceImpl.java\n@@ -18,9 +18,11 @@\n import org.springframework.lang.NonNull;\n import org.springframework.stereotype.Service;\n import org.springframework.util.Assert;\n+import org.springframework.util.CollectionUtils;\n \n import javax.servlet.http.HttpSession;\n import java.util.Date;\n+import java.util.List;\n import java.util.Optional;\n import java.util.concurrent.TimeUnit;\n \n@@ -44,6 +46,20 @@ public UserServiceImpl(UserRepository userRepository,\n         this.stringCacheStore = stringCacheStore;\n     }\n \n+    @Override\n+    public Optional<User> getCurrentUser() {\n+        // Find all users\n+        List<User> users = listAll();\n+\n+        if (CollectionUtils.isEmpty(users)) {\n+            // Return empty user\n+            return Optional.empty();\n+        }\n+\n+        // Return the first user\n+        return Optional.of(users.get(0));\n+    }\n+\n     @Override\n     public Optional<User> getByUsername(String username) {\n         return userRepository.findByUsername(username);\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/portal/api/TagController.java b/src/main/java/cc/ryanc/halo/web/controller/portal/api/TagController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/portal/api/TagController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/portal/api/TagController.java\n@@ -6,6 +6,7 @@\n import cc.ryanc.halo.service.PostTagService;\n import cc.ryanc.halo.service.TagService;\n import io.swagger.annotations.ApiOperation;\n+import io.swagger.annotations.ApiParam;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.Pageable;\n import org.springframework.data.domain.Sort;\n@@ -39,6 +40,7 @@ public TagController(TagService tagService, PostTagService postTagService) {\n     @GetMapping\n     @ApiOperation(\"Lists tags\")\n     public List<? extends TagOutputDTO> listTags(@SortDefault(sort = \"updateTime\", direction = DESC) Sort sort,\n+                                                 @ApiParam(\"If the param is true, post count of tag will be returned\")\n                                                  @RequestParam(name = \"more\", required = false, defaultValue = \"false\") Boolean more) {\n         if (more) {\n             return postTagService.listTagWithCountDtos(sort);\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/portal/api/UserController.java b/src/main/java/cc/ryanc/halo/web/controller/portal/api/UserController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/portal/api/UserController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/portal/api/UserController.java\n@@ -0,0 +1,31 @@\n+package cc.ryanc.halo.web.controller.portal.api;\n+\n+import cc.ryanc.halo.model.dto.UserOutputDTO;\n+import cc.ryanc.halo.service.UserService;\n+import io.swagger.annotations.ApiOperation;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+/**\n+ * Portal user controller.\n+ *\n+ * @author johnniang\n+ * @date 4/3/19\n+ */\n+@RestController(\"PortalUserController\")\n+@RequestMapping(\"/api/users\")\n+public class UserController {\n+\n+    private final UserService userService;\n+\n+    public UserController(UserService userService) {\n+        this.userService = userService;\n+    }\n+\n+    @GetMapping(\"profile\")\n+    @ApiOperation(\"Gets blogger profile\")\n+    public UserOutputDTO getProfile() {\n+        return userService.getCurrentUser().map(user -> new UserOutputDTO().<UserOutputDTO>convertFrom(user)).get();\n+    }\n+}",
    "output": "Complete cc.ryanc.halo.web.controller.portal.api.UserController#getProfile"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/entity/BasePost.java b/src/main/java/cc/ryanc/halo/model/entity/BasePost.java\n--- a/src/main/java/cc/ryanc/halo/model/entity/BasePost.java\n+++ b/src/main/java/cc/ryanc/halo/model/entity/BasePost.java\n@@ -5,6 +5,8 @@\n import lombok.Data;\n import lombok.EqualsAndHashCode;\n import lombok.ToString;\n+import org.hibernate.annotations.SQLDelete;\n+import org.hibernate.annotations.Where;\n \n import javax.persistence.*;\n import java.util.Date;\n@@ -15,7 +17,9 @@\n  * @author johnniang\n  */\n @Entity(name = \"base_post\")\n-@Table(name = \"posts\")\n+@Table(name = \"posts\", indexes = @Index(columnList = \"url\"))\n+@SQLDelete(sql = \"update posts set deleted = true where id = ?\")\n+@Where(clause = \"deleted = false\")\n @DiscriminatorColumn(name = \"type\", discriminatorType = DiscriminatorType.INTEGER, columnDefinition = \"int default 0\")\n @Data\n @ToString\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/entity/Journal.java b/src/main/java/cc/ryanc/halo/model/entity/Journal.java\n--- a/src/main/java/cc/ryanc/halo/model/entity/Journal.java\n+++ b/src/main/java/cc/ryanc/halo/model/entity/Journal.java\n@@ -1,8 +1,5 @@\n package cc.ryanc.halo.model.entity;\n \n-import org.hibernate.annotations.SQLDelete;\n-import org.hibernate.annotations.Where;\n-\n import javax.persistence.DiscriminatorValue;\n import javax.persistence.Entity;\n \n@@ -13,8 +10,6 @@\n  * @date 3/22/19\n  */\n @Entity(name = \"Journal\")\n-@Where(clause = \"deleted = false\")\n-@SQLDelete(sql = \"update posts set deleted = true where id = ?\")\n @DiscriminatorValue(\"2\")\n public class Journal extends BasePost {\n \n\ndiff --git a/src/main/java/cc/ryanc/halo/model/entity/Page.java b/src/main/java/cc/ryanc/halo/model/entity/Page.java\n--- a/src/main/java/cc/ryanc/halo/model/entity/Page.java\n+++ b/src/main/java/cc/ryanc/halo/model/entity/Page.java\n@@ -1,8 +1,5 @@\n package cc.ryanc.halo.model.entity;\n \n-import org.hibernate.annotations.SQLDelete;\n-import org.hibernate.annotations.Where;\n-\n import javax.persistence.DiscriminatorValue;\n import javax.persistence.Entity;\n \n@@ -13,8 +10,6 @@\n  * @date 3/22/19\n  */\n @Entity(name = \"Page\")\n-@Where(clause = \"deleted = false\")\n-@SQLDelete(sql = \"update posts set deleted = true where id = ?\")\n @DiscriminatorValue(\"1\")\n public class Page extends BasePost {\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/entity/Post.java b/src/main/java/cc/ryanc/halo/model/entity/Post.java\n--- a/src/main/java/cc/ryanc/halo/model/entity/Post.java\n+++ b/src/main/java/cc/ryanc/halo/model/entity/Post.java\n@@ -1,8 +1,5 @@\n package cc.ryanc.halo.model.entity;\n \n-import org.hibernate.annotations.SQLDelete;\n-import org.hibernate.annotations.Where;\n-\n import javax.persistence.DiscriminatorValue;\n import javax.persistence.Entity;\n \n@@ -12,8 +9,6 @@\n  * @author johnniang\n  */\n @Entity(name = \"Post\")\n-@SQLDelete(sql = \"update posts set deleted = true where id = ?\")\n-@Where(clause = \"deleted = false\")\n @DiscriminatorValue(value = \"0\")\n public class Post extends BasePost {\n \n\ndiff --git a/src/main/java/cc/ryanc/halo/model/entity/Tag.java b/src/main/java/cc/ryanc/halo/model/entity/Tag.java\n--- a/src/main/java/cc/ryanc/halo/model/entity/Tag.java\n+++ b/src/main/java/cc/ryanc/halo/model/entity/Tag.java\n@@ -16,7 +16,7 @@\n  */\n @Data\n @Entity\n-@Table(name = \"tags\")\n+@Table(name = \"tags\", indexes = @Index(columnList = \"slug_name\"))\n @SQLDelete(sql = \"update tags set deleted = true where id = ?\")\n @Where(clause = \"deleted = false\")\n @ToString",
    "output": "Refactor some entities"
  },
  {
    "input": "diff --git a/src/test/java/cc/ryanc/halo/model/enums/AttachmentTypeTest.java b/src/test/java/cc/ryanc/halo/model/enums/AttachmentTypeTest.java\n--- a/src/test/java/cc/ryanc/halo/model/enums/AttachmentTypeTest.java\n+++ b/src/test/java/cc/ryanc/halo/model/enums/AttachmentTypeTest.java\n@@ -24,9 +24,9 @@ public class AttachmentTypeTest {\n \n     @Test\n     public void conversionTest() {\n-        assertThat(conversionService.convert(\"SERVER\", AttachmentType.class), equalTo(AttachmentType.LOCAL));\n-        assertThat(conversionService.convert(\"server\", AttachmentType.class), equalTo(AttachmentType.LOCAL));\n-        assertThat(conversionService.convert(\"Server\", AttachmentType.class), equalTo(AttachmentType.LOCAL));\n-        assertThat(conversionService.convert(\"SerVer\", AttachmentType.class), equalTo(AttachmentType.LOCAL));\n+        assertThat(conversionService.convert(\"LOCAL\", AttachmentType.class), equalTo(AttachmentType.LOCAL));\n+        assertThat(conversionService.convert(\"local\", AttachmentType.class), equalTo(AttachmentType.LOCAL));\n+        assertThat(conversionService.convert(\"Local\", AttachmentType.class), equalTo(AttachmentType.LOCAL));\n+        assertThat(conversionService.convert(\"LoCal\", AttachmentType.class), equalTo(AttachmentType.LOCAL));\n     }\n }\n\\ No newline at end of file\n\ndiff --git a/src/test/java/cc/ryanc/halo/utils/HaloUtilsTest.java b/src/test/java/cc/ryanc/halo/utils/HaloUtilsTest.java\n--- a/src/test/java/cc/ryanc/halo/utils/HaloUtilsTest.java\n+++ b/src/test/java/cc/ryanc/halo/utils/HaloUtilsTest.java\n@@ -70,7 +70,7 @@ public void pluralizeTest() {\n         assertThat(pluralizedFormat, equalTo(\"2 chances\"));\n \n         pluralizedFormat = HaloUtils.pluralize(0, label, pluralLabel);\n-        assertThat(pluralizedFormat, equalTo(\"no chance\"));\n+        assertThat(pluralizedFormat, equalTo(\"no chances\"));\n \n         // Test random positive time\n         IntStream.range(0, 10000).forEach(i -> {\n@@ -83,7 +83,7 @@ public void pluralizeTest() {\n         IntStream.range(0, 10000).forEach(i -> {\n             long time = (-1) * RandomUtils.nextLong();\n             String result = HaloUtils.pluralize(time, label, pluralLabel);\n-            assertThat(result, equalTo(\"no \" + label));\n+            assertThat(result, equalTo(\"no \" + pluralLabel));\n         });\n \n     }",
    "output": "Fix test errors and comment build.testResources in pom.xml"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/service/PostTagService.java b/src/main/java/cc/ryanc/halo/service/PostTagService.java\n--- a/src/main/java/cc/ryanc/halo/service/PostTagService.java\n+++ b/src/main/java/cc/ryanc/halo/service/PostTagService.java\n@@ -5,6 +5,8 @@\n import cc.ryanc.halo.model.entity.PostTag;\n import cc.ryanc.halo.model.entity.Tag;\n import cc.ryanc.halo.service.base.CrudService;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n import org.springframework.data.domain.Sort;\n import org.springframework.lang.NonNull;\n import org.springframework.lang.Nullable;\n@@ -58,6 +60,15 @@ public interface PostTagService extends CrudService<PostTag, Integer> {\n     @NonNull\n     List<Post> listPostsBy(@NonNull Integer tagId);\n \n+    /**\n+     * Pages posts by tag id.\n+     *\n+     * @param tagId    must not be null\n+     * @param pageable must not be null\n+     * @return a page of post\n+     */\n+    Page<Post> pagePostsBy(@NonNull Integer tagId, Pageable pageable);\n+\n     /**\n      * Merges or creates post tags by post id and tag id set if absent.\n      *\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/TagService.java b/src/main/java/cc/ryanc/halo/service/TagService.java\n--- a/src/main/java/cc/ryanc/halo/service/TagService.java\n+++ b/src/main/java/cc/ryanc/halo/service/TagService.java\n@@ -21,7 +21,8 @@ public interface TagService extends CrudService<Tag, Integer> {\n      * @param slugName slug name\n      * @return Tag\n      */\n-    Tag getBySlugName(@NonNull String slugName);\n+    @NonNull\n+    Tag getBySlugNameOfNonNull(@NonNull String slugName);\n \n     /**\n      * Converts to tag output dtos.\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/PostTagServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/PostTagServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/PostTagServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/PostTagServiceImpl.java\n@@ -11,6 +11,8 @@\n import cc.ryanc.halo.service.PostTagService;\n import cc.ryanc.halo.service.base.AbstractCrudService;\n import cc.ryanc.halo.utils.ServiceUtils;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n import org.springframework.data.domain.Sort;\n import org.springframework.stereotype.Service;\n import org.springframework.util.Assert;\n@@ -111,6 +113,17 @@ public List<Post> listPostsBy(Integer tagId) {\n         return postRepository.findAllById(postIds);\n     }\n \n+    @Override\n+    public Page<Post> pagePostsBy(Integer tagId, Pageable pageable) {\n+        Assert.notNull(tagId, \"Tag id must not be null\");\n+        Assert.notNull(pageable, \"Page info must not be null\");\n+\n+        // Find all post ids\n+        Set<Integer> postIds = postTagRepository.findAllPostIdsByTagId(tagId);\n+\n+        return postRepository.findAllByIdIn(postIds, pageable);\n+    }\n+\n     @Override\n     public List<PostTag> mergeOrCreateByIfAbsent(Integer postId, Set<Integer> tagIds) {\n         Assert.notNull(postId, \"Post id must not be null\");\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/TagServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/TagServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/TagServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/TagServiceImpl.java\n@@ -55,7 +55,7 @@ public Tag create(Tag tag) {\n      * @return Tag\n      */\n     @Override\n-    public Tag getBySlugName(String slugName) {\n+    public Tag getBySlugNameOfNonNull(String slugName) {\n         return tagRepository.getBySlugName(slugName).orElseThrow(() -> new NotFoundException(\"The tag does not exist\").setErrorData(slugName));\n     }\n \n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/content/ContentTagController.java b/src/main/java/cc/ryanc/halo/web/controller/content/ContentTagController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/content/ContentTagController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/content/ContentTagController.java\n@@ -79,7 +79,7 @@ public String tags(Model model,\n                        @PathVariable(\"slugName\") String slugName,\n                        @PathVariable(\"page\") Integer page,\n                        @SortDefault(sort = \"postDate\", direction = DESC) Sort sort) {\n-        final Tag tag = tagService.getBySlugName(slugName);\n+        final Tag tag = tagService.getBySlugNameOfNonNull(slugName);\n         if (null == tag) {\n             return this.renderNotFound();\n         }\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/portal/api/TagController.java b/src/main/java/cc/ryanc/halo/web/controller/portal/api/TagController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/portal/api/TagController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/portal/api/TagController.java\n@@ -1,18 +1,22 @@\n package cc.ryanc.halo.web.controller.portal.api;\n \n import cc.ryanc.halo.model.dto.TagOutputDTO;\n+import cc.ryanc.halo.model.dto.post.PostSimpleOutputDTO;\n+import cc.ryanc.halo.model.entity.Tag;\n import cc.ryanc.halo.service.PostTagService;\n import cc.ryanc.halo.service.TagService;\n import io.swagger.annotations.ApiOperation;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n import org.springframework.data.domain.Sort;\n+import org.springframework.data.web.PageableDefault;\n import org.springframework.data.web.SortDefault;\n-import org.springframework.web.bind.annotation.GetMapping;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestParam;\n-import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.bind.annotation.*;\n \n import java.util.List;\n \n+import static org.springframework.data.domain.Sort.Direction.DESC;\n+\n /**\n  * Portal tag controller.\n  *\n@@ -34,12 +38,22 @@ public TagController(TagService tagService, PostTagService postTagService) {\n \n     @GetMapping\n     @ApiOperation(\"Lists tags\")\n-    public List<? extends TagOutputDTO> listTags(@SortDefault(sort = \"updateTime\", direction = Sort.Direction.DESC) Sort sort,\n+    public List<? extends TagOutputDTO> listTags(@SortDefault(sort = \"updateTime\", direction = DESC) Sort sort,\n                                                  @RequestParam(name = \"more\", required = false, defaultValue = \"false\") Boolean more) {\n         if (more) {\n             return postTagService.listTagWithCountDtos(sort);\n         }\n         return tagService.convertTo(tagService.listAll(sort));\n     }\n \n+    @GetMapping(\"{slugName}/posts\")\n+    @ApiOperation(\"Lists posts by tag slug name\")\n+    public Page<PostSimpleOutputDTO> listPostsBy(@PathVariable(\"slugName\") String slugName,\n+                                                 @PageableDefault(sort = \"updateTime\", direction = DESC) Pageable pageable) {\n+        // Get tag by slug name\n+        Tag tag = tagService.getBySlugNameOfNonNull(slugName);\n+\n+        // Get posts, convert and return\n+        return postTagService.pagePostsBy(tag.getId(), pageable).map(post -> new PostSimpleOutputDTO().convertFrom(post));\n+    }\n }",
    "output": "Complete cc.ryanc.halo.web.controller.portal.api.TagController.listPostsBy api"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/repository/base/BaseRepository.java b/src/main/java/cc/ryanc/halo/repository/base/BaseRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/base/BaseRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/base/BaseRepository.java\n@@ -1,5 +1,7 @@\n package cc.ryanc.halo.repository.base;\n \n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n import org.springframework.data.domain.Sort;\n import org.springframework.data.jpa.repository.JpaRepository;\n import org.springframework.data.repository.NoRepositoryBean;\n@@ -18,7 +20,7 @@\n public interface BaseRepository<DOMAIN, ID> extends JpaRepository<DOMAIN, ID> {\n \n     /**\n-     * Finds all domain by id list and the specified sort.\n+     * Finds all domain by id list.\n      *\n      * @param ids  id list of domain must not be null\n      * @param sort the specified sort must not be null\n@@ -27,6 +29,16 @@ public interface BaseRepository<DOMAIN, ID> extends JpaRepository<DOMAIN, ID> {\n     @NonNull\n     List<DOMAIN> findAllByIdIn(@NonNull Iterable<ID> ids, @NonNull Sort sort);\n \n+    /**\n+     * Finds all domain by domain id list.\n+     *\n+     * @param ids      must not be null\n+     * @param pageable must not be null\n+     * @return a list of domains\n+     */\n+    @NonNull\n+    Page<DOMAIN> findAllByIdIn(@NonNull Iterable<ID> ids, @NonNull Pageable pageable);\n+\n     /**\n      * Deletes by id list.\n      *\n\ndiff --git a/src/main/java/cc/ryanc/halo/repository/base/BaseRepositoryImpl.java b/src/main/java/cc/ryanc/halo/repository/base/BaseRepositoryImpl.java\n--- a/src/main/java/cc/ryanc/halo/repository/base/BaseRepositoryImpl.java\n+++ b/src/main/java/cc/ryanc/halo/repository/base/BaseRepositoryImpl.java\n@@ -1,10 +1,14 @@\n package cc.ryanc.halo.repository.base;\n \n import lombok.extern.slf4j.Slf4j;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.PageImpl;\n+import org.springframework.data.domain.Pageable;\n import org.springframework.data.domain.Sort;\n import org.springframework.data.jpa.domain.Specification;\n import org.springframework.data.jpa.repository.support.JpaEntityInformation;\n import org.springframework.data.jpa.repository.support.SimpleJpaRepository;\n+import org.springframework.data.repository.support.PageableExecutionUtils;\n import org.springframework.lang.Nullable;\n import org.springframework.util.Assert;\n \n@@ -45,23 +49,45 @@ public BaseRepositoryImpl(JpaEntityInformation<DOMAIN, ID> entityInformation, En\n     @Override\n     public List<DOMAIN> findAllByIdIn(Iterable<ID> ids, Sort sort) {\n         Assert.notNull(ids, \"The given Iterable of Id's must not be null!\");\n+        Assert.notNull(sort, \"Sort info must nto be null\");\n \n         log.debug(\"Customized findAllById method was invoked\");\n \n         if (!ids.iterator().hasNext()) {\n             return Collections.emptyList();\n         }\n-        if (!this.entityInformation.hasCompositeId()) {\n-            ByIdsSpecification<DOMAIN> specification = new ByIdsSpecification<>(this.entityInformation);\n-            TypedQuery<DOMAIN> query = super.getQuery(specification, sort);\n-            return query.setParameter(specification.parameter, ids).getResultList();\n-        } else {\n-            List<DOMAIN> results = new ArrayList<>();\n \n+        if (entityInformation.hasCompositeId()) {\n+            List<DOMAIN> results = new ArrayList<>();\n             ids.forEach(id -> super.findById(id).ifPresent(results::add));\n-\n             return results;\n         }\n+\n+        ByIdsSpecification<DOMAIN> specification = new ByIdsSpecification<>(entityInformation);\n+        TypedQuery<DOMAIN> query = super.getQuery(specification, sort);\n+        return query.setParameter(specification.parameter, ids).getResultList();\n+    }\n+\n+    @Override\n+    public Page<DOMAIN> findAllByIdIn(Iterable<ID> ids, Pageable pageable) {\n+        Assert.notNull(ids, \"The given Iterable of Id's must not be null!\");\n+        Assert.notNull(pageable, \"Page info must nto be null\");\n+\n+        if (!ids.iterator().hasNext()) {\n+            return new PageImpl<>(Collections.emptyList());\n+        }\n+\n+        if (entityInformation.hasCompositeId()) {\n+            throw new UnsupportedOperationException(\"Unsupported find all by composite id with page info\");\n+        }\n+\n+        ByIdsSpecification<DOMAIN> specification = new ByIdsSpecification<>(entityInformation);\n+        TypedQuery<DOMAIN> query = super.getQuery(specification, pageable).setParameter(specification.parameter, ids);\n+        TypedQuery<Long> countQuery = getCountQuery(specification, getDomainClass()).setParameter(specification.parameter, ids);\n+\n+        return pageable.isUnpaged() ?\n+                new PageImpl<>(query.getResultList())\n+                : readPage(query, getDomainClass(), pageable, countQuery);\n     }\n \n     /**\n@@ -84,6 +110,17 @@ public long deleteByIdIn(Iterable<ID> ids) {\n         return domains.size();\n     }\n \n+    protected <S extends DOMAIN> Page<S> readPage(TypedQuery<S> query, Class<S> domainClass, Pageable pageable, TypedQuery<Long> countQuery) {\n+\n+        if (pageable.isPaged()) {\n+            query.setFirstResult((int) pageable.getOffset());\n+            query.setMaxResults(pageable.getPageSize());\n+        }\n+\n+        return PageableExecutionUtils.getPage(query.getResultList(), pageable,\n+                () -> executeCountQuery(countQuery));\n+    }\n+\n     private static final class ByIdsSpecification<T> implements Specification<T> {\n         private static final long serialVersionUID = 1L;\n         private final JpaEntityInformation<T, ?> entityInformation;\n@@ -101,4 +138,24 @@ public Predicate toPredicate(Root<T> root, CriteriaQuery<?> query, CriteriaBuild\n             return path.in(this.parameter);\n         }\n     }\n+\n+    /**\n+     * Executes a count query and transparently sums up all values returned.\n+     *\n+     * @param query must not be {@literal null}.\n+     * @return\n+     */\n+    private static long executeCountQuery(TypedQuery<Long> query) {\n+\n+        Assert.notNull(query, \"TypedQuery must not be null!\");\n+\n+        List<Long> totals = query.getResultList();\n+        long total = 0L;\n+\n+        for (Long element : totals) {\n+            total += element == null ? 0 : element;\n+        }\n+\n+        return total;\n+    }\n }",
    "output": "Add another cc.ryanc.halo.repository.base.BaseRepository.findAllByIdIn(java.lang.Iterable<ID>, org.springframework.data.domain.Pageable) common method"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/web/controller/portal/api/ArchiveController.java b/src/main/java/cc/ryanc/halo/web/controller/portal/api/ArchiveController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/portal/api/ArchiveController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/portal/api/ArchiveController.java\n@@ -15,7 +15,7 @@\n  * @author johnniang\n  * @date 4/2/19\n  */\n-@RestController\n+@RestController(\"PortalArchiveController\")\n @RequestMapping(\"/api/archives\")\n public class ArchiveController {\n \n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/portal/api/PostController.java b/src/main/java/cc/ryanc/halo/web/controller/portal/api/PostController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/portal/api/PostController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/portal/api/PostController.java\n@@ -0,0 +1,56 @@\n+package cc.ryanc.halo.web.controller.portal.api;\n+\n+import cc.ryanc.halo.model.dto.post.PostDetailOutputDTO;\n+import cc.ryanc.halo.model.dto.post.PostSimpleOutputDTO;\n+import cc.ryanc.halo.model.enums.PostStatus;\n+import cc.ryanc.halo.service.PostService;\n+import io.swagger.annotations.ApiOperation;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.web.PageableDefault;\n+import org.springframework.web.bind.annotation.*;\n+\n+import static org.springframework.data.domain.Sort.Direction.DESC;\n+\n+/**\n+ * Portal post controller.\n+ *\n+ * @author johnniang\n+ * @date 4/2/19\n+ */\n+@RestController(\"PortalPostController\")\n+@RequestMapping(\"/api/posts\")\n+public class PostController {\n+\n+    private final PostService postService;\n+\n+    public PostController(PostService postService) {\n+        this.postService = postService;\n+    }\n+\n+    @GetMapping\n+    @ApiOperation(\"Lists posts\")\n+    public Page<PostSimpleOutputDTO> pageBy(@PageableDefault(sort = \"updateTime\", direction = DESC) Pageable pageable) {\n+        return postService.pageSimpleDtoByStatus(PostStatus.PUBLISHED, pageable);\n+    }\n+\n+    @GetMapping(\"{postId:\\\\d+}\")\n+    @ApiOperation(\"Gets a post\")\n+    public PostDetailOutputDTO getBy(@PathVariable(\"postId\") Integer postId,\n+                                     @RequestParam(value = \"formatDisabled\", required = false, defaultValue = \"true\") Boolean formatDisabled,\n+                                     @RequestParam(value = \"sourceDisabled\", required = false, defaultValue = \"false\") Boolean sourceDisabled) {\n+        PostDetailOutputDTO postDetail = new PostDetailOutputDTO().convertFrom(postService.getById(postId));\n+\n+        if (formatDisabled) {\n+            // Clear the format content\n+            postDetail.setFormatContent(null);\n+        }\n+\n+        if (sourceDisabled) {\n+            // Clear the original content\n+            postDetail.setOriginalContent(null);\n+        }\n+\n+        return postDetail;\n+    }\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/portal/api/TagController.java b/src/main/java/cc/ryanc/halo/web/controller/portal/api/TagController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/portal/api/TagController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/portal/api/TagController.java\n@@ -19,7 +19,7 @@\n  * @author johnniang\n  * @date 4/2/19\n  */\n-@RestController\n+@RestController(\"PortalTagController\")\n @RequestMapping(\"/api/tags\")\n public class TagController {\n \n@@ -41,4 +41,5 @@ public List<? extends TagOutputDTO> listTags(@SortDefault(sort = \"updateTime\", d\n         }\n         return tagService.convertTo(tagService.listAll(sort));\n     }\n+\n }",
    "output": "Complete cc.ryanc.halo.web.controller.portal.api.PostController#pageBy and #getBy"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/CategoryController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/CategoryController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/CategoryController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/CategoryController.java\n@@ -35,7 +35,7 @@ public CategoryController(CategoryService categoryService, PostCategoryService p\n         this.postCategoryService = postCategoryService;\n     }\n \n-    @GetMapping(\"tree\")\n+    @GetMapping(\"tree_view\")\n     @ApiOperation(\"List as category tree\")\n     public List<CategoryVO> listAsTree(@SortDefault(sort = \"name\", direction = ASC) Sort sort) {\n         return categoryService.listAsTree(sort);\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/portal/api/TagController.java b/src/main/java/cc/ryanc/halo/web/controller/portal/api/TagController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/portal/api/TagController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/portal/api/TagController.java\n@@ -0,0 +1,44 @@\n+package cc.ryanc.halo.web.controller.portal.api;\n+\n+import cc.ryanc.halo.model.dto.TagOutputDTO;\n+import cc.ryanc.halo.service.PostTagService;\n+import cc.ryanc.halo.service.TagService;\n+import io.swagger.annotations.ApiOperation;\n+import org.springframework.data.domain.Sort;\n+import org.springframework.data.web.SortDefault;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import java.util.List;\n+\n+/**\n+ * Portal tag controller.\n+ *\n+ * @author johnniang\n+ * @date 4/2/19\n+ */\n+@RestController\n+@RequestMapping(\"/api/tags\")\n+public class TagController {\n+\n+    private final TagService tagService;\n+\n+    private final PostTagService postTagService;\n+\n+    public TagController(TagService tagService, PostTagService postTagService) {\n+        this.tagService = tagService;\n+        this.postTagService = postTagService;\n+    }\n+\n+    @GetMapping\n+    @ApiOperation(\"Lists tags\")\n+    public List<? extends TagOutputDTO> listTags(@SortDefault(sort = \"updateTime\", direction = Sort.Direction.DESC) Sort sort,\n+                                                 @RequestParam(name = \"more\", required = false, defaultValue = \"false\") Boolean more) {\n+        if (more) {\n+            return postTagService.listTagWithCountDtos(sort);\n+        }\n+        return tagService.convertTo(tagService.listAll(sort));\n+    }\n+}",
    "output": "Add TagController for portal api"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/service/impl/ThemeServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/ThemeServiceImpl.java\n@@ -25,14 +25,13 @@\n @Service\n public class ThemeServiceImpl implements ThemeService {\n \n+    private static String[] CAN_EDIT_SUFFIX = {\"ftl\", \"css\", \"js\"};\n     private final HaloProperties haloProperties;\n \n     public ThemeServiceImpl(HaloProperties haloProperties) {\n         this.haloProperties = haloProperties;\n     }\n \n-    private static String[] CAN_EDIT_SUFFIX = {\"ftl\", \"css\", \"js\"};\n-\n     /**\n      * Gets all themes\n      *\n@@ -106,6 +105,7 @@ public List<ThemeFile> listThemeFolder(String absolutePath) {\n         } catch (Exception e) {\n             throw new RuntimeException(\"Failed to get theme template\", e);\n         }\n+        templates.sort(Comparator.comparing(ThemeFile::getIsFile));\n         return templates;\n     }\n ",
    "output": "Refactor ThemeService"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/support/ThemeFile.java b/src/main/java/cc/ryanc/halo/model/support/ThemeFile.java\n--- a/src/main/java/cc/ryanc/halo/model/support/ThemeFile.java\n+++ b/src/main/java/cc/ryanc/halo/model/support/ThemeFile.java\n@@ -19,5 +19,7 @@ public class ThemeFile {\n \n     private Boolean isFile;\n \n+    private Boolean canEdit;\n+\n     private List<ThemeFile> node;\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/ThemeServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/ThemeServiceImpl.java\n@@ -5,6 +5,7 @@\n import cc.ryanc.halo.model.support.ThemeFile;\n import cc.ryanc.halo.model.support.ThemeProperties;\n import cc.ryanc.halo.service.ThemeService;\n+import cc.ryanc.halo.utils.FilenameUtils;\n import cc.ryanc.halo.web.controller.content.base.BaseContentController;\n import cn.hutool.core.text.StrBuilder;\n import cn.hutool.core.util.StrUtil;\n@@ -13,6 +14,7 @@\n \n import java.io.File;\n import java.util.ArrayList;\n+import java.util.Comparator;\n import java.util.List;\n \n /**\n@@ -22,6 +24,8 @@\n @Service\n public class ThemeServiceImpl implements ThemeService {\n \n+    private static String[] CAN_EDIT_SUFFIX = {\"ftl\", \"css\", \"js\"};\n+\n     /**\n      * Gets all themes\n      *\n@@ -80,13 +84,22 @@ public List<ThemeFile> listThemeFolder(String absolutePath) {\n                         file.setName(base.getName());\n                         file.setPath(base.getAbsolutePath());\n                         file.setIsFile(true);\n+                        for (String suffix : CAN_EDIT_SUFFIX) {\n+                            if (FilenameUtils.getExtension(file.getName()).equals(suffix)) {\n+                                file.setCanEdit(true);\n+                                break;\n+                            } else {\n+                                file.setCanEdit(false);\n+                            }\n+                        }\n                     }\n                     templates.add(file);\n                 }\n             }\n         } catch (Exception e) {\n             throw new RuntimeException(\"Failed to get theme template\", e);\n         }\n+        templates.sort(Comparator.comparing(ThemeFile::getIsFile));\n         return templates;\n     }\n ",
    "output": "Refactor ThemeService"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/entity/BasePost.java b/src/main/java/cc/ryanc/halo/model/entity/BasePost.java\n--- a/src/main/java/cc/ryanc/halo/model/entity/BasePost.java\n+++ b/src/main/java/cc/ryanc/halo/model/entity/BasePost.java\n@@ -122,8 +122,49 @@ public class BasePost extends BaseEntity {\n     @Override\n     public void prePersist() {\n         super.prePersist();\n+\n         id = null;\n         editTime = getCreateTime();\n+\n+        if (status == null) {\n+            status = PostStatus.DRAFT;\n+        }\n+\n+        if (summary == null) {\n+            summary = \"\";\n+        }\n+\n+        if (thumbnail == null) {\n+            thumbnail = \"\";\n+        }\n+\n+        if (visits == null) {\n+            visits = 0L;\n+        }\n+\n+        if (disallowComment == null) {\n+            disallowComment = false;\n+        }\n+\n+        if (password == null) {\n+            password = \"\";\n+        }\n+\n+        if (template == null) {\n+            template = \"\";\n+        }\n+\n+        if (topPriority == null) {\n+            topPriority = 0;\n+        }\n+\n+        if (createFrom == null) {\n+            createFrom = PostCreateFrom.ADMIN;\n+        }\n+\n+        if (likes == null) {\n+            likes = 0L;\n+        }\n     }\n \n }",
    "output": "Add some default value before persisting"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/vo/ArchiveMonthVO.java b/src/main/java/cc/ryanc/halo/model/vo/ArchiveMonthVO.java\n--- a/src/main/java/cc/ryanc/halo/model/vo/ArchiveMonthVO.java\n+++ b/src/main/java/cc/ryanc/halo/model/vo/ArchiveMonthVO.java\n@@ -4,6 +4,8 @@\n import lombok.EqualsAndHashCode;\n import lombok.ToString;\n \n+import java.util.Comparator;\n+\n /**\n  * Archive vo.\n  *\n@@ -17,14 +19,17 @@ public class ArchiveMonthVO extends ArchiveYearVO {\n \n     private Integer month;\n \n-    @Override\n-    public int compare(ArchiveYearVO current, ArchiveYearVO other) {\n-        int compare = super.compare(current, other);\n+    public static class ArchiveComparator implements Comparator<ArchiveMonthVO> {\n \n-        if (compare != 0) {\n-            return compare;\n-        }\n+        @Override\n+        public int compare(ArchiveMonthVO left, ArchiveMonthVO right) {\n+            int compare = right.getYear() - left.getYear();\n \n-        return ((ArchiveMonthVO) current).month - ((ArchiveMonthVO) other).month;\n+            if (compare != 0) {\n+                return compare;\n+            }\n+\n+            return right.getMonth() - left.getMonth();\n+        }\n     }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/vo/ArchiveYearVO.java b/src/main/java/cc/ryanc/halo/model/vo/ArchiveYearVO.java\n--- a/src/main/java/cc/ryanc/halo/model/vo/ArchiveYearVO.java\n+++ b/src/main/java/cc/ryanc/halo/model/vo/ArchiveYearVO.java\n@@ -17,14 +17,17 @@\n @Data\n @ToString\n @EqualsAndHashCode\n-public class ArchiveYearVO implements Comparator<ArchiveYearVO> {\n+public class ArchiveYearVO {\n \n     private Integer year;\n \n     private List<PostMinimalOutputDTO> posts;\n \n-    @Override\n-    public int compare(ArchiveYearVO current, ArchiveYearVO other) {\n-        return current.year - other.year;\n+    public static class ArchiveComparator implements Comparator<ArchiveYearVO> {\n+\n+        @Override\n+        public int compare(ArchiveYearVO left, ArchiveYearVO right) {\n+            return right.getYear() - left.getYear();\n+        }\n     }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java\n@@ -263,14 +263,15 @@ public List<ArchiveYearVO> listYearArchives() {\n         // Get all posts\n         List<Post> posts = postRepository.findAllByStatus(PostStatus.PUBLISHED, Sort.by(DESC, \"createTime\"));\n \n-        Map<Integer, List<Post>> yearPostMap = new HashMap<>();\n+        Map<Integer, List<Post>> yearPostMap = new HashMap<>(8);\n \n         posts.forEach(post -> {\n             Calendar calendar = DateUtils.convertTo(post.getCreateTime());\n             yearPostMap.computeIfAbsent(calendar.get(Calendar.YEAR), year -> new LinkedList<>())\n                     .add(post);\n         });\n \n+\n         List<ArchiveYearVO> archives = new LinkedList<>();\n \n         yearPostMap.forEach((year, postList) -> {\n@@ -283,14 +284,42 @@ public List<ArchiveYearVO> listYearArchives() {\n             archives.add(archive);\n         });\n \n-        // TODO Sort this list and inner list\n+        // Sort this list\n+        archives.sort(new ArchiveYearVO.ArchiveComparator());\n \n         return archives;\n     }\n \n     @Override\n     public List<ArchiveMonthVO> listMonthArchives() {\n-        return null;\n+        // Get all posts\n+        List<Post> posts = postRepository.findAllByStatus(PostStatus.PUBLISHED, Sort.by(DESC, \"createTime\"));\n+\n+        Map<Integer, Map<Integer, List<Post>>> yearMonthPostMap = new HashMap<>(8);\n+\n+        posts.forEach(post -> {\n+            Calendar calendar = DateUtils.convertTo(post.getCreateTime());\n+\n+            yearMonthPostMap.computeIfAbsent(calendar.get(Calendar.YEAR), year -> new HashMap<>())\n+                    .computeIfAbsent((calendar.get(Calendar.MONTH) + 1), month -> new LinkedList<>())\n+                    .add(post);\n+        });\n+\n+        List<ArchiveMonthVO> archives = new LinkedList<>();\n+\n+        yearMonthPostMap.forEach((year, monthPostMap) -> monthPostMap.forEach((month, postList) -> {\n+            ArchiveMonthVO archive = new ArchiveMonthVO();\n+            archive.setYear(year);\n+            archive.setMonth(month);\n+            archive.setPosts(convertTo(postList));\n+\n+            archives.add(archive);\n+        }));\n+\n+        // Sort this list\n+        archives.sort(new ArchiveMonthVO.ArchiveComparator());\n+\n+        return archives;\n     }\n \n     @Override",
    "output": "Complete ArchiveController#listMonthArchives"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/support/ThemeFile.java b/src/main/java/cc/ryanc/halo/model/support/ThemeFile.java\n--- a/src/main/java/cc/ryanc/halo/model/support/ThemeFile.java\n+++ b/src/main/java/cc/ryanc/halo/model/support/ThemeFile.java\n@@ -15,6 +15,8 @@ public class ThemeFile {\n \n     private String name;\n \n+    private String path;\n+\n     private Boolean isFile;\n \n     private List<ThemeFile> node;\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/ThemeServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/ThemeServiceImpl.java\n@@ -72,11 +72,13 @@ public List<ThemeFile> listThemeFolder(String absolutePath) {\n                 for (File base : baseFiles) {\n                     ThemeFile file = new ThemeFile();\n                     if (base.isDirectory()) {\n-                        file.setName(base.getAbsolutePath());\n+                        file.setName(base.getName());\n+                        file.setPath(base.getAbsolutePath());\n                         file.setIsFile(false);\n                         file.setNode(listThemeFolder(base.getAbsolutePath()));\n                     } else {\n-                        file.setName(base.getAbsolutePath());\n+                        file.setName(base.getName());\n+                        file.setPath(base.getAbsolutePath());\n                         file.setIsFile(true);\n                     }\n                     templates.add(file);",
    "output": "Refactor ThemeService"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/support/ThemeFile.java b/src/main/java/cc/ryanc/halo/model/support/ThemeFile.java\n--- a/src/main/java/cc/ryanc/halo/model/support/ThemeFile.java\n+++ b/src/main/java/cc/ryanc/halo/model/support/ThemeFile.java\n@@ -0,0 +1,21 @@\n+package cc.ryanc.halo.model.support;\n+\n+import lombok.Data;\n+import lombok.ToString;\n+\n+import java.util.List;\n+\n+/**\n+ * @author RYAN0UP\n+ * @date 2019/04/02\n+ */\n+@Data\n+@ToString\n+public class ThemeFile {\n+\n+    private String name;\n+\n+    private Boolean isFile;\n+\n+    private List<ThemeFile> node;\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/ThemeService.java b/src/main/java/cc/ryanc/halo/service/ThemeService.java\n--- a/src/main/java/cc/ryanc/halo/service/ThemeService.java\n+++ b/src/main/java/cc/ryanc/halo/service/ThemeService.java\n@@ -1,6 +1,7 @@\n package cc.ryanc.halo.service;\n \n import cc.ryanc.halo.model.support.Theme;\n+import cc.ryanc.halo.model.support.ThemeFile;\n import cc.ryanc.halo.model.support.ThemeProperties;\n \n import java.io.File;\n@@ -20,12 +21,20 @@ public interface ThemeService {\n     List<Theme> getThemes();\n \n     /**\n-     * Gets theme templates\n+     * Lists theme folder by absolute path.\n+     *\n+     * @param absolutePath absolutePath\n+     * @return List<ThemeFile>\n+     */\n+    List<ThemeFile> listThemeFolder(String absolutePath);\n+\n+    /**\n+     * Lists theme folder by theme name.\n      *\n      * @param theme theme\n-     * @return List<String>\n+     * @return List<ThemeFile>\n      */\n-    List<String> getTemplates(String theme);\n+    List<ThemeFile> listThemeFolderBy(String theme);\n \n     /**\n      * Gets custom template, such as page_xxx.ftl, and xxx will be template name\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/ThemeServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/ThemeServiceImpl.java\n@@ -2,6 +2,7 @@\n \n import cc.ryanc.halo.model.support.HaloConst;\n import cc.ryanc.halo.model.support.Theme;\n+import cc.ryanc.halo.model.support.ThemeFile;\n import cc.ryanc.halo.model.support.ThemeProperties;\n import cc.ryanc.halo.service.ThemeService;\n import cc.ryanc.halo.web.controller.content.base.BaseContentController;\n@@ -56,31 +57,29 @@ public List<Theme> getThemes() {\n     }\n \n     /**\n-     * Gets theme templates\n+     * Lists theme folder by absolute path.\n      *\n-     * @param theme theme\n-     * @return List<String>\n+     * @param absolutePath absolutePath\n+     * @return List<ThemeFile>\n      */\n     @Override\n-    public List<String> getTemplates(String theme) {\n-        final List<String> templates = new ArrayList<>();\n+    public List<ThemeFile> listThemeFolder(String absolutePath) {\n+        final List<ThemeFile> templates = new ArrayList<>();\n         try {\n-            final File themesPath = new File(getThemeBasePath(), theme);\n-            final File modulePath = new File(themesPath.getAbsolutePath(), \"module\");\n-            final File[] baseFiles = themesPath.listFiles();\n-            final File[] moduleFiles = modulePath.listFiles();\n-            if (null != moduleFiles) {\n-                for (File file : moduleFiles) {\n-                    if (file.isFile() && file.getName().endsWith(HaloConst.SUFFIX_FTL)) {\n-                        templates.add(\"module/\" + file.getName());\n-                    }\n-                }\n-            }\n+            File absolutePathFile = new File(absolutePath);\n+            File[] baseFiles = absolutePathFile.listFiles();\n             if (null != baseFiles) {\n-                for (File file : baseFiles) {\n-                    if (file.isFile() && file.getName().endsWith(HaloConst.SUFFIX_FTL)) {\n-                        templates.add(file.getName());\n+                for (File base : baseFiles) {\n+                    ThemeFile file = new ThemeFile();\n+                    if (base.isDirectory()) {\n+                        file.setName(base.getAbsolutePath());\n+                        file.setIsFile(false);\n+                        file.setNode(listThemeFolder(base.getAbsolutePath()));\n+                    } else {\n+                        file.setName(base.getAbsolutePath());\n+                        file.setIsFile(true);\n                     }\n+                    templates.add(file);\n                 }\n             }\n         } catch (Exception e) {\n@@ -89,6 +88,18 @@ public List<String> getTemplates(String theme) {\n         return templates;\n     }\n \n+    /**\n+     * Lists theme folder by theme name.\n+     *\n+     * @param theme theme\n+     * @return List<ThemeFile>\n+     */\n+    @Override\n+    public List<ThemeFile> listThemeFolderBy(String theme) {\n+        File themePath = new File(getThemeBasePath(), theme);\n+        return listThemeFolder(themePath.getAbsolutePath());\n+    }\n+\n     /**\n      * Gets custom template, such as page_xxx.ftl, and xxx will be template name\n      *\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/ThemeController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/ThemeController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/ThemeController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/ThemeController.java\n@@ -4,6 +4,7 @@\n import cc.ryanc.halo.model.properties.PrimaryProperties;\n import cc.ryanc.halo.model.properties.PropertyEnum;\n import cc.ryanc.halo.model.support.Theme;\n+import cc.ryanc.halo.model.support.ThemeFile;\n import cc.ryanc.halo.service.OptionService;\n import cc.ryanc.halo.service.ThemeService;\n import cc.ryanc.halo.web.controller.content.base.BaseContentController;\n@@ -52,6 +53,16 @@ public List<Theme> listAll() {\n         return themeService.getThemes();\n     }\n \n+    /**\n+     * List all of theme files.\n+     *\n+     * @return List<ThemeFile>\n+     */\n+    @GetMapping(value = \"/files\")\n+    public List<ThemeFile> listFiles() {\n+        return themeService.listThemeFolderBy(BaseContentController.THEME);\n+    }\n+\n     /**\n      * Active theme\n      *",
    "output": "Create api of theme files."
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/service/OptionService.java b/src/main/java/cc/ryanc/halo/service/OptionService.java\n--- a/src/main/java/cc/ryanc/halo/service/OptionService.java\n+++ b/src/main/java/cc/ryanc/halo/service/OptionService.java\n@@ -4,13 +4,14 @@\n import cc.ryanc.halo.model.dto.OptionOutputDTO;\n import cc.ryanc.halo.model.entity.Option;\n import cc.ryanc.halo.model.enums.OptionSource;\n-import cc.ryanc.halo.model.properties.PropertyEnum;\n import cc.ryanc.halo.model.enums.ValueEnum;\n import cc.ryanc.halo.model.params.OptionParam;\n+import cc.ryanc.halo.model.properties.PropertyEnum;\n import cc.ryanc.halo.service.base.CrudService;\n import com.qiniu.common.Zone;\n import org.springframework.lang.NonNull;\n import org.springframework.lang.Nullable;\n+import org.springframework.transaction.annotation.Transactional;\n \n import java.util.List;\n import java.util.Locale;\n@@ -37,6 +38,7 @@ public interface OptionService extends CrudService<Option, Integer> {\n      * @param value  value\n      * @param source source\n      */\n+    @Transactional\n     void save(@NonNull String key, String value, @NonNull OptionSource source);\n \n     /**\n@@ -45,6 +47,7 @@ public interface OptionService extends CrudService<Option, Integer> {\n      * @param options options\n      * @param source  source\n      */\n+    @Transactional\n     void save(@NonNull Map<String, String> options, @NonNull OptionSource source);\n \n     /**\n@@ -53,6 +56,7 @@ public interface OptionService extends CrudService<Option, Integer> {\n      * @param optionParams option params\n      * @param source       source\n      */\n+    @Transactional\n     void save(List<OptionParam> optionParams, @NonNull OptionSource source);\n \n     /**\n@@ -61,20 +65,23 @@ public interface OptionService extends CrudService<Option, Integer> {\n      * @param properties blog properties\n      * @param source     source\n      */\n+    @Transactional\n     void saveProperties(@NonNull Map<? extends PropertyEnum, String> properties, @NonNull OptionSource source);\n \n     /**\n      * Get all options\n      *\n      * @return Map\n      */\n+    @NonNull\n     Map<String, String> listOptions();\n \n     /**\n      * Lists all option dtos.\n      *\n      * @return a list of option dto\n      */\n+    @NonNull\n     List<OptionOutputDTO> listDtos();\n \n     /**",
    "output": "Add @Transactional annotation on option saving methods"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/properties/PrimaryProperties.java b/src/main/java/cc/ryanc/halo/model/properties/PrimaryProperties.java\n--- a/src/main/java/cc/ryanc/halo/model/properties/PrimaryProperties.java\n+++ b/src/main/java/cc/ryanc/halo/model/properties/PrimaryProperties.java\n@@ -26,10 +26,10 @@ public enum PrimaryProperties implements PropertyEnum {\n \n     @Override\n     public Class<?> getType() {\n-        return null;\n+        return type;\n     }\n \n     @Override\n     public String getValue() {\n-        return null;\n+        return value;\n     }}",
    "output": "Fix PrimaryProperties implementation bug"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/filter/CorsFilter.java b/src/main/java/cc/ryanc/halo/filter/CorsFilter.java\n--- a/src/main/java/cc/ryanc/halo/filter/CorsFilter.java\n+++ b/src/main/java/cc/ryanc/halo/filter/CorsFilter.java\n@@ -1,11 +1,15 @@\n package cc.ryanc.halo.filter;\n \n+import cc.ryanc.halo.security.filter.AdminAuthenticationFilter;\n+import org.apache.commons.lang3.StringUtils;\n import org.springframework.http.HttpHeaders;\n import org.springframework.web.cors.CorsUtils;\n-import org.springframework.web.filter.OncePerRequestFilter;\n+import org.springframework.web.filter.GenericFilterBean;\n \n import javax.servlet.FilterChain;\n import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n import java.io.IOException;\n@@ -15,23 +19,24 @@\n  *\n  * @author johnniang\n  */\n-public class CorsFilter extends OncePerRequestFilter {\n+public class CorsFilter extends GenericFilterBean {\n+\n+    private final static String ALLOW_HEADERS = StringUtils.joinWith(\",\", HttpHeaders.CONTENT_TYPE, AdminAuthenticationFilter.ADMIN_TOKEN_HEADER_NAME);\n \n     @Override\n-    protected void doFilterInternal(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, FilterChain filterChain) throws ServletException, IOException {\n+    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n+        HttpServletRequest httpServletRequest = (HttpServletRequest) request;\n+        HttpServletResponse httpServletResponse = (HttpServletResponse) response;\n \n         // Set customized header\n         httpServletResponse.setHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN, httpServletRequest.getHeader(HttpHeaders.ORIGIN));\n-        httpServletResponse.setHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_HEADERS, \"*\");\n-        httpServletResponse.setHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_METHODS, \"GET, POST, PUT, DELETE, OPTION\");\n+        httpServletResponse.setHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_HEADERS, ALLOW_HEADERS);\n+        httpServletResponse.setHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_METHODS, \"GET, POST, PUT, DELETE, OPTIONS\");\n         httpServletResponse.setHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_CREDENTIALS, \"true\");\n         httpServletResponse.setHeader(HttpHeaders.ACCESS_CONTROL_MAX_AGE, \"3600\");\n \n-        if (CorsUtils.isPreFlightRequest(httpServletRequest)) {\n-            return;\n+        if (!CorsUtils.isPreFlightRequest(httpServletRequest)) {\n+            chain.doFilter(httpServletRequest, httpServletResponse);\n         }\n-\n-        filterChain.doFilter(httpServletRequest, httpServletResponse);\n     }\n-\n }",
    "output": "Fix CORS bug"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/OptionController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/OptionController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/OptionController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/OptionController.java\n@@ -3,10 +3,12 @@\n import cc.ryanc.halo.model.dto.OptionOutputDTO;\n import cc.ryanc.halo.model.params.OptionParam;\n import cc.ryanc.halo.service.OptionService;\n+import io.swagger.annotations.ApiOperation;\n import org.springframework.web.bind.annotation.*;\n \n import javax.validation.Valid;\n import java.util.List;\n+import java.util.Map;\n \n /**\n  * Option Controller.\n@@ -31,6 +33,18 @@ public List<OptionOutputDTO> listAll() {\n \n     @PostMapping(\"saving\")\n     public void saveOptions(@Valid @RequestBody List<OptionParam> optionParams) {\n-        optionService.save(optionParams,\"system\");\n+        optionService.save(optionParams, \"system\");\n+    }\n+\n+    @GetMapping(\"map_view\")\n+    @ApiOperation(\"Lists all options with map view\")\n+    public Map<String, String> listAllWithMapView() {\n+        return optionService.listOptions();\n+    }\n+\n+    @PostMapping(\"map_view/saving\")\n+    @ApiOperation(\"Saves options by option map\")\n+    public void saveOptionsWithMapView(@RequestBody Map<String, String> optionMap) {\n+        optionService.save(optionMap, \"system\");\n     }\n }",
    "output": "Add option map view list an creation api"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/service/impl/CommentServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/CommentServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/CommentServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/CommentServiceImpl.java\n@@ -111,11 +111,22 @@ public Comment createBy(Comment comment, HttpServletRequest request) {\n         comment.setContent(OwoUtil.parseOwo(formatContent(comment.getContent())));\n         comment.setIpAddress(ServletUtil.getClientIP(request));\n         comment.setUserAgent(ServletUtil.getHeaderIgnoreCase(request, HttpHeaders.USER_AGENT));\n-        // TODO Check user login status and set this field\n+\n+\n+        // Check user login status and set this field\n         Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n         if (authentication != null) {\n             // If the user is login\n             comment.setIsAdmin(true);\n+            comment.setStatus(CommentStatus.PUBLISHED);\n+        } else {\n+            // Handle comment status\n+            Boolean needAudit = optionService.getByPropertyOrDefault(BlogProperties.NEW_COMMENT_NEED_CHECK, Boolean.class, true);\n+            if (needAudit) {\n+                comment.setStatus(CommentStatus.AUDITING);\n+            } else {\n+                comment.setStatus(CommentStatus.PUBLISHED);\n+            }\n         }\n \n         comment.setAuthor(HtmlUtils.htmlEscape(comment.getAuthor()));\n@@ -126,14 +137,6 @@ public Comment createBy(Comment comment, HttpServletRequest request) {\n             comment.setAuthorUrl(URLUtil.normalize(comment.getAuthorUrl()));\n         }\n \n-        // Handle comment status\n-        Boolean needAudit = optionService.getByPropertyOrDefault(BlogProperties.NEW_COMMENT_NEED_CHECK, Boolean.class, true);\n-        if (needAudit) {\n-            comment.setStatus(CommentStatus.AUDITING);\n-        } else {\n-            comment.setStatus(CommentStatus.PUBLISHED);\n-        }\n-\n         Comment createdComment = create(comment);\n \n         // TODO Handle email sending\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/CommentController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/CommentController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/CommentController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/CommentController.java\n@@ -14,13 +14,13 @@\n import cc.ryanc.halo.service.PostService;\n import cc.ryanc.halo.utils.ValidationUtils;\n import io.swagger.annotations.ApiOperation;\n+import org.apache.commons.lang3.StringUtils;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.Pageable;\n import org.springframework.data.web.PageableDefault;\n import org.springframework.web.bind.annotation.*;\n \n import javax.servlet.http.HttpServletRequest;\n-import javax.validation.Valid;\n import java.util.List;\n \n import static org.springframework.data.domain.Sort.Direction.DESC;\n@@ -62,15 +62,15 @@ public Page<CommentListVO> pageBy(@PageableDefault(sort = \"updateTime\", directio\n     }\n \n     @PostMapping\n-    public CommentOutputDTO createBy(@Valid @RequestBody CommentParam commentParam, HttpServletRequest request) {\n+    public CommentOutputDTO createBy(@RequestBody CommentParam commentParam, HttpServletRequest request) {\n         // Get authentication\n         Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n         if (authentication != null) {\n             User user = authentication.getDetail().getUser();\n             // If the admin is login\n-            commentParam.setAuthor(user.getNickname());\n+            commentParam.setAuthor(StringUtils.isEmpty(user.getNickname()) ? user.getUsername() : user.getNickname());\n             commentParam.setEmail(user.getEmail());\n-            commentParam.setAuthor(optionService.getByPropertyOfNullable(BlogProperties.BLOG_URL));\n+            commentParam.setAuthorUrl(optionService.getByPropertyOfNullable(BlogProperties.BLOG_URL));\n         }\n \n         // Validate the comment param manually",
    "output": "Fix comment creation bug when admin is logging in"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/entity/Comment.java b/src/main/java/cc/ryanc/halo/model/entity/Comment.java\n--- a/src/main/java/cc/ryanc/halo/model/entity/Comment.java\n+++ b/src/main/java/cc/ryanc/halo/model/entity/Comment.java\n@@ -36,7 +36,7 @@ public class Comment extends BaseEntity {\n     /**\n      * Commentator's email.\n      */\n-    @Column(name = \"email\", columnDefinition = \"varchar(255) default ''\")\n+    @Column(name = \"email\", columnDefinition = \"varchar(255) not null\")\n     private String email;\n \n     /**\n@@ -107,6 +107,31 @@ public void prePersist() {\n         if (parentId == null || parentId < 0) {\n             parentId = 0L;\n         }\n+\n+        if (ipAddress == null) {\n+            ipAddress = \"\";\n+        }\n+\n+        if (authorUrl == null) {\n+            authorUrl = \"\";\n+        }\n+\n+        if (gavatarMd5 == null) {\n+            gavatarMd5 = \"\";\n+        }\n+\n+        if (status == null) {\n+            status = CommentStatus.AUDITING;\n+        }\n+\n+        if (userAgent == null) {\n+            userAgent = \"\";\n+        }\n+\n+        if (isAdmin == null) {\n+            isAdmin = false;\n+        }\n+\n     }\n \n }",
    "output": "Add some default values when persisting Comment entity"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/config/HaloConfiguration.java b/src/main/java/cc/ryanc/halo/config/HaloConfiguration.java\n--- a/src/main/java/cc/ryanc/halo/config/HaloConfiguration.java\n+++ b/src/main/java/cc/ryanc/halo/config/HaloConfiguration.java\n@@ -111,7 +111,7 @@ public FilterRegistrationBean<AdminAuthenticationFilter> adminAuthenticationFilt\n                                                                                        ObjectMapper objectMapper) {\n         AdminAuthenticationFilter adminAuthenticationFilter = new AdminAuthenticationFilter(cacheStore, userService, haloProperties);\n         // Config the admin filter\n-        adminAuthenticationFilter.setExcludeUrlPatterns(\"/admin/api/login\")\n+        adminAuthenticationFilter.addExcludeUrlPatterns(\"/admin/api/login\")\n                 .setFailureHandler(new AdminAuthenticationFailureHandler()\n                         .setProductionEnv(haloProperties.getProductionEnv())\n                         .setObjectMapper(objectMapper));\n\ndiff --git a/src/main/java/cc/ryanc/halo/security/filter/AdminAuthenticationFilter.java b/src/main/java/cc/ryanc/halo/security/filter/AdminAuthenticationFilter.java\n--- a/src/main/java/cc/ryanc/halo/security/filter/AdminAuthenticationFilter.java\n+++ b/src/main/java/cc/ryanc/halo/security/filter/AdminAuthenticationFilter.java\n@@ -59,7 +59,7 @@ public class AdminAuthenticationFilter extends OncePerRequestFilter {\n \n     private final AntPathMatcher antPathMatcher;\n \n-    private Collection<String> excludeUrlPatterns;\n+    private Set<String> excludeUrlPatterns = new HashSet<>(1);\n \n     public AdminAuthenticationFilter(StringCacheStore cacheStore,\n                                      UserService userService,\n@@ -155,12 +155,26 @@ public AdminAuthenticationFilter setFailureHandler(AuthenticationFailureHandler\n     }\n \n     /**\n-     * Set exclude url patterns.\n+     * Sets exclude url patterns.\n      *\n-     * @param excludeUrls exclude urls\n+     * @param excludeUrlPatterns exclude urls\n      */\n-    public AdminAuthenticationFilter setExcludeUrlPatterns(String... excludeUrls) {\n-        this.excludeUrlPatterns = excludeUrls == null ? Collections.emptyList() : Collections.unmodifiableCollection(Arrays.asList(excludeUrls));\n+    public AdminAuthenticationFilter setExcludeUrlPatterns(Collection<String> excludeUrlPatterns) {\n+        Assert.notNull(excludeUrlPatterns, \"Exclude url patterns must not be null\");\n+\n+        this.excludeUrlPatterns = new HashSet<>(excludeUrlPatterns);\n+        return this;\n+    }\n+\n+    /**\n+     * Adds exclude url patterns.\n+     *\n+     * @param excludeUrlPatterns exclude urls\n+     */\n+    public AdminAuthenticationFilter addExcludeUrlPatterns(String... excludeUrlPatterns) {\n+        Assert.notNull(excludeUrlPatterns, \"Exclude url patterns must not be null\");\n+\n+        Collections.addAll(this.excludeUrlPatterns, excludeUrlPatterns);\n         return this;\n     }\n ",
    "output": "Enhance exclude url patterns of AdminAuthenticationFilter"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/enums/BlogProperties.java b/src/main/java/cc/ryanc/halo/model/enums/BlogProperties.java\n--- a/src/main/java/cc/ryanc/halo/model/enums/BlogProperties.java\n+++ b/src/main/java/cc/ryanc/halo/model/enums/BlogProperties.java\n@@ -131,16 +131,6 @@ public enum BlogProperties implements PropertyEnum {\n      */\n     WIDGET_DAYCOUNT(\"widget_daycount\", Boolean.class),\n \n-    /**\n-     * 默认缩略图地址\n-     */\n-    DEFAULT_THUMBNAIL(\"/static/halo-content/images/thumbnail/thumbnail.png\", String.class),\n-\n-    /**\n-     * 自动备份\n-     */\n-    AUTO_BACKUP(\"auto_backup\", Boolean.class),\n-\n     /**\n      * API Token\n      */\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/core/InstallController.java b/src/main/java/cc/ryanc/halo/web/controller/core/InstallController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/core/InstallController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/core/InstallController.java\n@@ -233,7 +233,6 @@ private void initSettings(InstallParam installParam) {\n //            post.setStatus(PostStatus.PUBLISHED);\n //            post.setUrl(\"hello-halo\");\n //            post.setDisallowComment(true);\n-//            post.setThumbnail(\"/static/halo-frontend/images/thumbnail/thumbnail-\" + RandomUtil.randomInt(1, 11) + \".jpg\");\n //            postService.create(post);\n //\n //            //第一个评论",
    "output": "Remove useless files"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/dto/CountOutputDTO.java b/src/main/java/cc/ryanc/halo/model/dto/CountOutputDTO.java\n--- a/src/main/java/cc/ryanc/halo/model/dto/CountOutputDTO.java\n+++ b/src/main/java/cc/ryanc/halo/model/dto/CountOutputDTO.java\n@@ -11,11 +11,17 @@\n @Data\n public class CountOutputDTO {\n \n-    private Long postCount;\n+    private long postCount;\n \n-    private Long commentCount;\n+    private long commentCount;\n \n-    private Long attachmentCount;\n+    private long attachmentCount;\n \n-    private Long establishDays;\n+    private long establishDays;\n+\n+    private long linkCount;\n+\n+    private long visitCount;\n+\n+    private long likeCount;\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/entity/Journal.java b/src/main/java/cc/ryanc/halo/model/entity/Journal.java\n--- a/src/main/java/cc/ryanc/halo/model/entity/Journal.java\n+++ b/src/main/java/cc/ryanc/halo/model/entity/Journal.java\n@@ -12,7 +12,7 @@\n  * @author johnniang\n  * @date 3/22/19\n  */\n-@Entity(name = \"journal\")\n+@Entity(name = \"Journal\")\n @Where(clause = \"deleted = false\")\n @SQLDelete(sql = \"update posts set deleted = true where id = ?\")\n @DiscriminatorValue(\"2\")\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/entity/Page.java b/src/main/java/cc/ryanc/halo/model/entity/Page.java\n--- a/src/main/java/cc/ryanc/halo/model/entity/Page.java\n+++ b/src/main/java/cc/ryanc/halo/model/entity/Page.java\n@@ -12,7 +12,7 @@\n  * @author johnniang\n  * @date 3/22/19\n  */\n-@Entity(name = \"page\")\n+@Entity(name = \"Page\")\n @Where(clause = \"deleted = false\")\n @SQLDelete(sql = \"update posts set deleted = true where id = ?\")\n @DiscriminatorValue(\"1\")\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/entity/Post.java b/src/main/java/cc/ryanc/halo/model/entity/Post.java\n--- a/src/main/java/cc/ryanc/halo/model/entity/Post.java\n+++ b/src/main/java/cc/ryanc/halo/model/entity/Post.java\n@@ -11,7 +11,7 @@\n  *\n  * @author johnniang\n  */\n-@Entity(name = \"post\")\n+@Entity(name = \"Post\")\n @SQLDelete(sql = \"update posts set deleted = true where id = ?\")\n @Where(clause = \"deleted = false\")\n @DiscriminatorValue(value = \"0\")\n\ndiff --git a/src/main/java/cc/ryanc/halo/repository/PostRepository.java b/src/main/java/cc/ryanc/halo/repository/PostRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/PostRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/PostRepository.java\n@@ -3,6 +3,7 @@\n import cc.ryanc.halo.model.entity.Post;\n import cc.ryanc.halo.repository.base.BasePostRepository;\n import org.springframework.data.jpa.repository.JpaSpecificationExecutor;\n+import org.springframework.data.jpa.repository.Query;\n \n \n /**\n@@ -13,4 +14,9 @@\n  */\n public interface PostRepository extends BasePostRepository<Post>, JpaSpecificationExecutor<Post> {\n \n+    @Query(\"select sum(p.visits) from Post p\")\n+    Long countVisit();\n+\n+    @Query(\"select sum(p.likes) from Post p\")\n+    Long countLike();\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/PostService.java b/src/main/java/cc/ryanc/halo/service/PostService.java\n--- a/src/main/java/cc/ryanc/halo/service/PostService.java\n+++ b/src/main/java/cc/ryanc/halo/service/PostService.java\n@@ -4,7 +4,6 @@\n import cc.ryanc.halo.model.dto.post.PostSimpleOutputDTO;\n import cc.ryanc.halo.model.entity.Post;\n import cc.ryanc.halo.model.enums.PostStatus;\n-import cc.ryanc.halo.model.enums.PostType;\n import cc.ryanc.halo.model.vo.PostDetailVO;\n import cc.ryanc.halo.model.vo.PostListVO;\n import cc.ryanc.halo.service.base.CrudService;\n@@ -131,4 +130,18 @@ public interface PostService extends CrudService<Post, Integer> {\n      */\n     @NonNull\n     PostDetailVO getDetailVoBy(@NonNull Integer postId);\n+\n+    /**\n+     * Counts visit total number.\n+     *\n+     * @return visit total number\n+     */\n+    long countVisit();\n+\n+    /**\n+     * Counts like total number.\n+     *\n+     * @return like total number\n+     */\n+    long countLike();\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java\n@@ -8,7 +8,6 @@\n import cc.ryanc.halo.model.dto.post.PostSimpleOutputDTO;\n import cc.ryanc.halo.model.entity.*;\n import cc.ryanc.halo.model.enums.PostStatus;\n-import cc.ryanc.halo.model.enums.PostType;\n import cc.ryanc.halo.model.vo.PostDetailVO;\n import cc.ryanc.halo.model.vo.PostListVO;\n import cc.ryanc.halo.repository.PostRepository;\n@@ -244,6 +243,16 @@ public PostDetailVO getDetailVoBy(Integer postId) {\n         return convertTo(post);\n     }\n \n+    @Override\n+    public long countVisit() {\n+        return Optional.ofNullable(postRepository.countVisit()).orElse(0L);\n+    }\n+\n+    @Override\n+    public long countLike() {\n+        return Optional.ofNullable(postRepository.countLike()).orElse(0L);\n+    }\n+\n     @Override\n     @Transactional\n     public Post removeById(Integer postId) {\n@@ -254,7 +263,7 @@ public Post removeById(Integer postId) {\n         // Remove post tags\n         List<PostTag> postTags = postTagService.removeByPostId(postId);\n \n-        log.debug(\"Removd post tags: [{}]\", postTags);\n+        log.debug(\"Removed post tags: [{}]\", postTags);\n \n         // Remove post categories\n         List<PostCategory> postCategories = postCategoryService.removeByPostId(postId);\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/AdminController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/AdminController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/AdminController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/AdminController.java\n@@ -38,16 +38,20 @@ public class AdminController {\n \n     private final UserService userService;\n \n+    private final LinkService linkService;\n+\n     public AdminController(PostService postService,\n                            AttachmentService attachmentService,\n                            CommentService commentService,\n                            OptionService optionService,\n-                           UserService userService) {\n+                           UserService userService,\n+                           LinkService linkService) {\n         this.postService = postService;\n         this.attachmentService = attachmentService;\n         this.commentService = commentService;\n         this.optionService = optionService;\n         this.userService = userService;\n+        this.linkService = linkService;\n     }\n \n     @GetMapping(\"counts\")\n@@ -58,6 +62,9 @@ public CountOutputDTO getCount() {\n         countOutputDTO.setAttachmentCount(attachmentService.count());\n         countOutputDTO.setCommentCount(commentService.count());\n         countOutputDTO.setEstablishDays(Long.valueOf(optionService.getByProperty(BlogProperties.WIDGET_DAYCOUNT).orElse(\"0\")));\n+        countOutputDTO.setLinkCount(linkService.count());\n+        countOutputDTO.setVisitCount(postService.countVisit());\n+        countOutputDTO.setLikeCount(postService.countLike());\n         return countOutputDTO;\n     }\n ",
    "output": "Add additional counts to return"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/AttachmentController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/AttachmentController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/AttachmentController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/AttachmentController.java\n@@ -1,14 +1,19 @@\n package cc.ryanc.halo.web.controller.admin.api;\n \n import cc.ryanc.halo.model.dto.AttachmentOutputDTO;\n+import cc.ryanc.halo.model.entity.Attachment;\n import cc.ryanc.halo.service.AttachmentService;\n import io.swagger.annotations.ApiOperation;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.Pageable;\n import org.springframework.data.web.PageableDefault;\n+import org.springframework.http.MediaType;\n import org.springframework.web.bind.annotation.*;\n import org.springframework.web.multipart.MultipartFile;\n \n+import java.util.LinkedList;\n+import java.util.List;\n+\n import static org.springframework.data.domain.Sort.Direction.DESC;\n \n /**\n@@ -23,7 +28,6 @@ public class AttachmentController {\n \n     private final AttachmentService attachmentService;\n \n-\n     public AttachmentController(AttachmentService attachmentService) {\n         this.attachmentService = attachmentService;\n     }\n@@ -63,7 +67,23 @@ public AttachmentOutputDTO deletePermanently(@PathVariable(\"id\") Integer id) {\n     }\n \n     @PostMapping(\"upload\")\n-    public AttachmentOutputDTO uploadAttachment(@RequestParam(\"file\") MultipartFile file) {\n+    @ApiOperation(\"Uploads single file\")\n+    public AttachmentOutputDTO uploadAttachment(@RequestPart(\"file\") MultipartFile file) {\n         return new AttachmentOutputDTO().convertFrom(attachmentService.upload(file));\n     }\n+\n+    @PostMapping(value = \"uploads\", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)\n+    @ApiOperation(\"Uploads multi files (Invalid in Swagger UI)\")\n+    public List<AttachmentOutputDTO> uploadAttachments(@RequestPart(\"files\") MultipartFile[] files) {\n+        List<AttachmentOutputDTO> result = new LinkedList<>();\n+\n+        for (MultipartFile file : files) {\n+            // Upload single file\n+            Attachment attachment = attachmentService.upload(file);\n+            // Convert and add\n+            result.add(new AttachmentOutputDTO().convertFrom(attachment));\n+        }\n+\n+        return result;\n+    }\n }",
    "output": "Complete multi files upload api"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/cache/InMemoryCacheStore.java b/src/main/java/cc/ryanc/halo/cache/InMemoryCacheStore.java\n--- a/src/main/java/cc/ryanc/halo/cache/InMemoryCacheStore.java\n+++ b/src/main/java/cc/ryanc/halo/cache/InMemoryCacheStore.java\n@@ -99,9 +99,11 @@ private class CacheExpiryCleaner extends TimerTask {\n \n         @Override\n         public void run() {\n-            log.trace(\"Cache clean task is cleaning\");\n-            cacheContainer.keySet().forEach(InMemoryCacheStore.this::get);\n-            log.trace(\"Cache lean task cleaned\");\n+            cacheContainer.keySet().forEach(key -> {\n+                if (!InMemoryCacheStore.this.get(key).isPresent()) {\n+                    log.debug(\"Deleted the cache: [{}] for expiration\", key);\n+                }\n+            });\n         }\n     }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/cache/lock/CacheLockInterceptor.java b/src/main/java/cc/ryanc/halo/cache/lock/CacheLockInterceptor.java\n--- a/src/main/java/cc/ryanc/halo/cache/lock/CacheLockInterceptor.java\n+++ b/src/main/java/cc/ryanc/halo/cache/lock/CacheLockInterceptor.java\n@@ -95,6 +95,8 @@ private String buildCacheLockKey(@NonNull CacheLock cacheLock, @NonNull Proceedi\n \n         if (StringUtils.isNotBlank(cacheLock.prefix())) {\n             cacheKeyBuilder.append(cacheLock.prefix());\n+        } else {\n+            cacheKeyBuilder.append(methodSignature.getMethod().toString());\n         }\n \n         // Handle cache lock key building\n\ndiff --git a/src/main/java/cc/ryanc/halo/security/context/SecurityContext.java b/src/main/java/cc/ryanc/halo/security/context/SecurityContext.java\n--- a/src/main/java/cc/ryanc/halo/security/context/SecurityContext.java\n+++ b/src/main/java/cc/ryanc/halo/security/context/SecurityContext.java\n@@ -30,7 +30,7 @@ public interface SecurityContext {\n      *\n      * @return true if authenticate; false otherwise\n      */\n-    default boolean isAuthenticate() {\n+    default boolean isAuthenticated() {\n         return getAuthentication() != null;\n     }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/security/context/SecurityContextHolder.java b/src/main/java/cc/ryanc/halo/security/context/SecurityContextHolder.java\n--- a/src/main/java/cc/ryanc/halo/security/context/SecurityContextHolder.java\n+++ b/src/main/java/cc/ryanc/halo/security/context/SecurityContextHolder.java\n@@ -58,6 +58,6 @@ public static void clearContext() {\n      */\n     @NonNull\n     private static SecurityContext createEmptyContext() {\n-        return new SecurityContextImpl();\n+        return new SecurityContextImpl(null);\n     }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/UserServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/UserServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/UserServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/UserServiceImpl.java\n@@ -84,7 +84,7 @@ public User login(String key, String password, HttpSession httpSession) {\n         Assert.notNull(httpSession, \"Http session must not be null\");\n \n         // Check login status\n-        if (SecurityContextHolder.getContext().isAuthenticate()) {\n+        if (SecurityContextHolder.getContext().isAuthenticated()) {\n             throw new BadRequestException(\"You have logged in already, no need to log in again\");\n         }\n \n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/AdminController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/AdminController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/AdminController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/AdminController.java\n@@ -1,13 +1,17 @@\n package cc.ryanc.halo.web.controller.admin.api;\n \n import cc.ryanc.halo.cache.lock.CacheLock;\n+import cc.ryanc.halo.exception.BadRequestException;\n import cc.ryanc.halo.model.dto.CountOutputDTO;\n import cc.ryanc.halo.model.dto.UserOutputDTO;\n import cc.ryanc.halo.model.enums.BlogProperties;\n import cc.ryanc.halo.model.enums.PostStatus;\n import cc.ryanc.halo.model.params.LoginParam;\n+import cc.ryanc.halo.security.context.SecurityContextHolder;\n+import cc.ryanc.halo.security.filter.AdminAuthenticationFilter;\n import cc.ryanc.halo.service.*;\n import io.swagger.annotations.ApiOperation;\n+import lombok.extern.slf4j.Slf4j;\n import org.springframework.web.bind.annotation.*;\n \n import javax.servlet.http.HttpServletRequest;\n@@ -19,6 +23,7 @@\n  * @author johnniang\n  * @date 3/19/19\n  */\n+@Slf4j\n @RestController\n @RequestMapping(\"/admin/api\")\n public class AdminController {\n@@ -62,4 +67,20 @@ public CountOutputDTO getCount() {\n     public UserOutputDTO login(@Valid @RequestBody LoginParam loginParam, HttpServletRequest request) {\n         return new UserOutputDTO().convertFrom(userService.login(loginParam.getUsername(), loginParam.getPassword(), request.getSession()));\n     }\n+\n+    @PostMapping(\"logout\")\n+    @ApiOperation(\"Logs out (Clear session)\")\n+    @CacheLock\n+    public void logout(HttpServletRequest request) {\n+        // Check if the current is logging in\n+        boolean authenticated = SecurityContextHolder.getContext().isAuthenticated();\n+\n+        if (!authenticated) {\n+            throw new BadRequestException(\"You haven't logged in yet, so you can't log out\");\n+        }\n+\n+        request.getSession().removeAttribute(AdminAuthenticationFilter.ADMIN_SESSION_KEY);\n+\n+        log.info(\"You have been logged out, Welcome to you next time!\");\n+    }\n }",
    "output": "Complete logout api"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/cache/InMemoryCacheStore.java b/src/main/java/cc/ryanc/halo/cache/InMemoryCacheStore.java\n--- a/src/main/java/cc/ryanc/halo/cache/InMemoryCacheStore.java\n+++ b/src/main/java/cc/ryanc/halo/cache/InMemoryCacheStore.java\n@@ -4,6 +4,7 @@\n import org.springframework.util.Assert;\n \n import java.util.Optional;\n+import java.util.Timer;\n import java.util.TimerTask;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.locks.Lock;\n@@ -17,6 +18,11 @@\n @Slf4j\n public class InMemoryCacheStore extends StringCacheStore {\n \n+    /**\n+     * Cleaner schedule period. (ms)\n+     */\n+    private final static long PERIOD = 60 * 1000;\n+\n     /**\n      * Cache container.\n      */\n@@ -27,6 +33,11 @@ public class InMemoryCacheStore extends StringCacheStore {\n      */\n     private Lock lock = new ReentrantLock();\n \n+    public InMemoryCacheStore() {\n+        // Run a cache store cleaner\n+        new Timer().scheduleAtFixedRate(new CacheExpiryCleaner(), 0, PERIOD);\n+    }\n+\n     @Override\n     Optional<CacheWrapper<String>> getInternal(String key) {\n         Assert.hasText(key, \"Cache key must not be blank\");\n@@ -79,17 +90,18 @@ public void delete(String key) {\n     }\n \n     /**\n-     * Cache store cleaner.\n+     * Cache cleaner.\n      *\n      * @author johnniang\n      * @date 03/28/19\n      */\n-    private class CacheStoreCleaner extends TimerTask {\n+    private class CacheExpiryCleaner extends TimerTask {\n \n         @Override\n         public void run() {\n-\n+            log.trace(\"Cache clean task is cleaning\");\n             cacheContainer.keySet().forEach(InMemoryCacheStore.this::get);\n+            log.trace(\"Cache lean task cleaned\");\n         }\n     }\n }",
    "output": "Run a timer for cache cleaner"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/Application.java b/src/main/java/cc/ryanc/halo/Application.java\n--- a/src/main/java/cc/ryanc/halo/Application.java\n+++ b/src/main/java/cc/ryanc/halo/Application.java\n@@ -3,7 +3,6 @@\n import cc.ryanc.halo.repository.base.BaseRepositoryImpl;\n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n-import org.springframework.cache.annotation.EnableCaching;\n import org.springframework.data.jpa.repository.config.EnableJpaAuditing;\n import org.springframework.data.jpa.repository.config.EnableJpaRepositories;\n import org.springframework.scheduling.annotation.EnableScheduling;\n@@ -17,7 +16,6 @@\n  * @date : 2017/11/14\n  */\n @SpringBootApplication\n-@EnableCaching\n @EnableJpaAuditing\n @EnableScheduling\n @EnableJpaRepositories(basePackages = {\"cc.ryanc.halo.repository\"}, repositoryBaseClass = BaseRepositoryImpl.class)",
    "output": "Merge remote-tracking branch 'origin/v1' into v1"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/Application.java b/src/main/java/cc/ryanc/halo/Application.java\n--- a/src/main/java/cc/ryanc/halo/Application.java\n+++ b/src/main/java/cc/ryanc/halo/Application.java\n@@ -3,7 +3,6 @@\n import cc.ryanc.halo.repository.base.BaseRepositoryImpl;\n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n-import org.springframework.cache.annotation.EnableCaching;\n import org.springframework.data.jpa.repository.config.EnableJpaAuditing;\n import org.springframework.data.jpa.repository.config.EnableJpaRepositories;\n import org.springframework.scheduling.annotation.EnableScheduling;\n@@ -17,7 +16,6 @@\n  * @date : 2017/11/14\n  */\n @SpringBootApplication\n-@EnableCaching\n @EnableJpaAuditing\n @EnableScheduling\n @EnableJpaRepositories(basePackages = {\"cc.ryanc.halo.repository\"}, repositoryBaseClass = BaseRepositoryImpl.class)",
    "output": "Remove ehcache"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/service/impl/UserServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/UserServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/UserServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/UserServiceImpl.java\n@@ -95,12 +95,11 @@ public User login(String key, String password, HttpSession httpSession) {\n \n         // Check expiration\n         if (user.getExpireTime() != null && user.getExpireTime().after(now)) {\n-            long seconds = TimeUnit.MINUTES.toSeconds(user.getExpireTime().getTime() - now.getTime());\n+            long seconds = TimeUnit.MILLISECONDS.toSeconds(user.getExpireTime().getTime() - now.getTime());\n             // If expired\n-            throw new BadRequestException(\"You have been temporarily disabled，please try again \" + seconds + \" second(s) later\").setErrorData(seconds);\n+            throw new BadRequestException(\"You have been temporarily disabled，please try again \" + HaloUtils.timeFormat(seconds) + \" later\").setErrorData(seconds);\n         }\n \n-\n         if (!BCrypt.checkpw(password, user.getPassword())) {\n             // If the password is mismatch\n             // Add login failure count\n\ndiff --git a/src/main/java/cc/ryanc/halo/utils/HaloUtils.java b/src/main/java/cc/ryanc/halo/utils/HaloUtils.java\n--- a/src/main/java/cc/ryanc/halo/utils/HaloUtils.java\n+++ b/src/main/java/cc/ryanc/halo/utils/HaloUtils.java\n@@ -16,12 +16,8 @@\n import java.net.URLConnection;\n import java.net.UnknownHostException;\n import java.nio.file.Files;\n-import java.nio.file.LinkOption;\n-import java.nio.file.Path;\n import java.nio.file.Paths;\n-import java.nio.file.attribute.BasicFileAttributeView;\n import java.nio.file.attribute.BasicFileAttributes;\n-import java.util.Calendar;\n import java.util.Date;\n import java.util.Properties;\n import java.util.UUID;\n@@ -37,28 +33,65 @@\n @Slf4j\n public class HaloUtils {\n \n+\n+    @NonNull\n+    public static String timeFormat(long totalSeconds) {\n+        if (totalSeconds <= 0) {\n+            return \"0 second\";\n+        }\n+\n+        StringBuilder timeBuilder = new StringBuilder();\n+\n+        long hours = totalSeconds / 3600;\n+        long minutes = totalSeconds % 3600 / 60;\n+        long seconds = totalSeconds % 3600 % 60;\n+\n+        if (hours > 0) {\n+            if (StringUtils.isNotBlank(timeBuilder)) {\n+                timeBuilder.append(\", \");\n+            }\n+            timeBuilder.append(pluralize(hours, \"hour\", \"hours\"));\n+        }\n+\n+        if (minutes > 0) {\n+            if (StringUtils.isNotBlank(timeBuilder)) {\n+                timeBuilder.append(\", \");\n+            }\n+            timeBuilder.append(pluralize(minutes, \"minute\", \"minutes\"));\n+        }\n+\n+        if (seconds > 0) {\n+            if (StringUtils.isNotBlank(timeBuilder)) {\n+                timeBuilder.append(\", \");\n+            }\n+            timeBuilder.append(pluralize(seconds, \"second\", \"seconds\"));\n+        }\n+\n+        return timeBuilder.toString();\n+    }\n+\n     /**\n-     * Pluralize the time label format.\n+     * Pluralize the times label format.\n      *\n-     * @param time        time\n+     * @param times       times\n      * @param label       label\n      * @param pluralLabel plural label\n      * @return pluralized format\n      */\n     @NonNull\n-    public static String pluralize(long time, @NonNull String label, @NonNull String pluralLabel) {\n+    public static String pluralize(long times, @NonNull String label, @NonNull String pluralLabel) {\n         Assert.hasText(label, \"Label must not be blank\");\n         Assert.hasText(pluralLabel, \"Plural label must not be blank\");\n \n-        if (time <= 0) {\n+        if (times <= 0) {\n             return \"no \" + label;\n         }\n \n-        if (time == 1) {\n-            return time + \" \" + label;\n+        if (times == 1) {\n+            return times + \" \" + label;\n         }\n \n-        return time + \" \" + pluralLabel;\n+        return times + \" \" + pluralLabel;\n     }\n \n     /**\n@@ -184,18 +217,13 @@ public static String getMachineIP() {\n      * @return 时间\n      */\n     public static Date getCreateTime(String srcPath) {\n-        final Path path = Paths.get(srcPath);\n-        final BasicFileAttributeView basicview = Files.getFileAttributeView(path, BasicFileAttributeView.class, LinkOption.NOFOLLOW_LINKS);\n-        BasicFileAttributes attr;\n         try {\n-            attr = basicview.readAttributes();\n-            return new Date(attr.creationTime().toMillis());\n-        } catch (Exception e) {\n-            e.printStackTrace();\n+            BasicFileAttributes basicFileAttributes = Files.readAttributes(Paths.get(srcPath), BasicFileAttributes.class);\n+            basicFileAttributes.creationTime().toMillis();\n+            return new Date(basicFileAttributes.creationTime().toMillis());\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Failed to open the \" + srcPath + \" file\", e);\n         }\n-        final Calendar cal = Calendar.getInstance();\n-        cal.set(1970, 0, 1, 0, 0, 0);\n-        return cal.getTime();\n     }\n \n     /**\n\ndiff --git a/src/test/java/cc/ryanc/halo/utils/HaloUtilsTest.java b/src/test/java/cc/ryanc/halo/utils/HaloUtilsTest.java\n--- a/src/test/java/cc/ryanc/halo/utils/HaloUtilsTest.java\n+++ b/src/test/java/cc/ryanc/halo/utils/HaloUtilsTest.java\n@@ -16,6 +16,47 @@\n  */\n public class HaloUtilsTest {\n \n+    @Test\n+    public void timeFormatTest() {\n+        long seconds = 0;\n+        String timeFormat = HaloUtils.timeFormat(seconds);\n+        assertThat(timeFormat, equalTo(\"0 second\"));\n+\n+        seconds = -1;\n+        timeFormat = HaloUtils.timeFormat(seconds);\n+        assertThat(timeFormat, equalTo(\"0 second\"));\n+\n+        seconds = 30;\n+        timeFormat = HaloUtils.timeFormat(seconds);\n+        assertThat(timeFormat, equalTo(\"30 seconds\"));\n+\n+        seconds = 60;\n+        timeFormat = HaloUtils.timeFormat(seconds);\n+        assertThat(timeFormat, equalTo(\"1 minute\"));\n+\n+        seconds = 120;\n+        timeFormat = HaloUtils.timeFormat(seconds);\n+        assertThat(timeFormat, equalTo(\"2 minutes\"));\n+\n+        seconds = 3600;\n+        timeFormat = HaloUtils.timeFormat(seconds);\n+        assertThat(timeFormat, equalTo(\"1 hour\"));\n+\n+        seconds = 7200;\n+        timeFormat = HaloUtils.timeFormat(seconds);\n+        assertThat(timeFormat, equalTo(\"2 hours\"));\n+\n+        seconds = 7200 + 30;\n+        timeFormat = HaloUtils.timeFormat(seconds);\n+        assertThat(timeFormat, equalTo(\"2 hours, 30 seconds\"));\n+\n+        seconds = 7200 + 60 + 30;\n+        timeFormat = HaloUtils.timeFormat(seconds);\n+        assertThat(timeFormat, equalTo(\"2 hours, 1 minute, 30 seconds\"));\n+\n+\n+    }\n+\n     @Test\n     public void pluralizeTest() {\n ",
    "output": "Format error tip for banning"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/security/context/SecurityContext.java b/src/main/java/cc/ryanc/halo/security/context/SecurityContext.java\n--- a/src/main/java/cc/ryanc/halo/security/context/SecurityContext.java\n+++ b/src/main/java/cc/ryanc/halo/security/context/SecurityContext.java\n@@ -24,4 +24,13 @@ public interface SecurityContext {\n      * @param authentication the new authentication or null if no further authentication should not be stored\n      */\n     void setAuthentication(@Nullable Authentication authentication);\n+\n+    /**\n+     * Check if the current context has authenticated or not.\n+     *\n+     * @return true if authenticate; false otherwise\n+     */\n+    default boolean isAuthenticate() {\n+        return getAuthentication() != null;\n+    }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/UserServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/UserServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/UserServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/UserServiceImpl.java\n@@ -6,18 +6,21 @@\n import cc.ryanc.halo.model.entity.User;\n import cc.ryanc.halo.model.params.UserParam;\n import cc.ryanc.halo.repository.UserRepository;\n+import cc.ryanc.halo.security.context.SecurityContextHolder;\n import cc.ryanc.halo.security.filter.AdminAuthenticationFilter;\n import cc.ryanc.halo.security.support.UserDetail;\n import cc.ryanc.halo.service.UserService;\n import cc.ryanc.halo.service.base.AbstractCrudService;\n import cc.ryanc.halo.utils.DateUtils;\n+import cc.ryanc.halo.utils.HaloUtils;\n import cn.hutool.core.lang.Validator;\n import cn.hutool.crypto.digest.BCrypt;\n import org.springframework.lang.NonNull;\n import org.springframework.stereotype.Service;\n import org.springframework.util.Assert;\n \n import javax.servlet.http.HttpSession;\n+import java.util.Date;\n import java.util.Optional;\n import java.util.concurrent.TimeUnit;\n \n@@ -80,24 +83,32 @@ public User login(String key, String password, HttpSession httpSession) {\n         Assert.hasText(password, \"Password must not be blank\");\n         Assert.notNull(httpSession, \"Http session must not be null\");\n \n+        // Check login status\n+        if (SecurityContextHolder.getContext().isAuthenticate()) {\n+            throw new BadRequestException(\"You have logged in already, no need to log in again\");\n+        }\n+\n         // Ger user by username\n         User user = Validator.isEmail(key) ? getByEmailOfNonNull(key) : getByUsernameOfNonNull(key);\n \n+        Date now = DateUtils.now();\n+\n         // Check expiration\n-        if (user.getExpireTime() != null && DateUtils.now().before(user.getExpireTime())) {\n+        if (user.getExpireTime() != null && user.getExpireTime().after(now)) {\n+            long seconds = TimeUnit.MINUTES.toSeconds(user.getExpireTime().getTime() - now.getTime());\n             // If expired\n-            throw new BadRequestException(\"账号已被禁止登陆，请 \" + LOCK_MINUTES + \" 分钟后再试\");\n+            throw new BadRequestException(\"You have been temporarily disabled，please try again \" + seconds + \" second(s) later\").setErrorData(seconds);\n         }\n \n \n         if (!BCrypt.checkpw(password, user.getPassword())) {\n-            // If the password is mismatched\n+            // If the password is mismatch\n             // Add login failure count\n             Integer loginFailureCount = stringCacheStore.get(LOGIN_FAILURE_COUNT_KEY).map(Integer::valueOf).orElse(0);\n \n-            if (loginFailureCount >= MAX_LOGIN_TRY) {\n+            if (loginFailureCount >= MAX_LOGIN_TRY - 1) {\n                 // Set expiration\n-                user.setExpireTime(org.apache.commons.lang3.time.DateUtils.addMilliseconds(DateUtils.now(), LOCK_MINUTES));\n+                user.setExpireTime(org.apache.commons.lang3.time.DateUtils.addMinutes(now, LOCK_MINUTES));\n                 // Update user\n                 update(user);\n             }\n@@ -106,9 +117,16 @@ public User login(String key, String password, HttpSession httpSession) {\n \n             stringCacheStore.put(LOGIN_FAILURE_COUNT_KEY, loginFailureCount.toString(), LOCK_MINUTES, TimeUnit.MINUTES);\n \n-            throw new BadRequestException(\"账号或者密码错误，您还有\" + (MAX_LOGIN_TRY - loginFailureCount) + \"次机会\");\n+            int remainder = MAX_LOGIN_TRY - loginFailureCount;\n+\n+            String errorMessage = String.format(\"Username or password incorrect, you%shave %s\", remainder <= 0 ? \"\" : \" still \", HaloUtils.pluralize(remainder, \"chance\", \"chances\"));\n+\n+            throw new BadRequestException(errorMessage);\n         }\n \n+        // Clear the login failure count cache\n+        stringCacheStore.delete(LOGIN_FAILURE_COUNT_KEY);\n+\n         // Set session\n         httpSession.setAttribute(AdminAuthenticationFilter.ADMIN_SESSION_KEY, new UserDetail(user));\n \n\ndiff --git a/src/main/java/cc/ryanc/halo/utils/HaloUtils.java b/src/main/java/cc/ryanc/halo/utils/HaloUtils.java\n--- a/src/main/java/cc/ryanc/halo/utils/HaloUtils.java\n+++ b/src/main/java/cc/ryanc/halo/utils/HaloUtils.java\n@@ -37,6 +37,30 @@\n @Slf4j\n public class HaloUtils {\n \n+    /**\n+     * Pluralize the time label format.\n+     *\n+     * @param time        time\n+     * @param label       label\n+     * @param pluralLabel plural label\n+     * @return pluralized format\n+     */\n+    @NonNull\n+    public static String pluralize(long time, @NonNull String label, @NonNull String pluralLabel) {\n+        Assert.hasText(label, \"Label must not be blank\");\n+        Assert.hasText(pluralLabel, \"Plural label must not be blank\");\n+\n+        if (time <= 0) {\n+            return \"no \" + label;\n+        }\n+\n+        if (time == 1) {\n+            return time + \" \" + label;\n+        }\n+\n+        return time + \" \" + pluralLabel;\n+    }\n+\n     /**\n      * Gets random uuid without dash.\n      *\n\ndiff --git a/src/test/java/cc/ryanc/halo/utils/HaloUtilsTest.java b/src/test/java/cc/ryanc/halo/utils/HaloUtilsTest.java\n--- a/src/test/java/cc/ryanc/halo/utils/HaloUtilsTest.java\n+++ b/src/test/java/cc/ryanc/halo/utils/HaloUtilsTest.java\n@@ -0,0 +1,54 @@\n+package cc.ryanc.halo.utils;\n+\n+import org.apache.commons.lang3.RandomUtils;\n+import org.junit.Test;\n+\n+import java.util.stream.IntStream;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.junit.Assert.assertThat;\n+\n+/**\n+ * Halo utilities test.\n+ *\n+ * @author johnniang\n+ * @date 3/29/19\n+ */\n+public class HaloUtilsTest {\n+\n+    @Test\n+    public void pluralizeTest() {\n+\n+        String label = \"chance\";\n+        String pluralLabel = \"chances\";\n+\n+        String pluralizedFormat = HaloUtils.pluralize(1, label, pluralLabel);\n+        assertThat(pluralizedFormat, equalTo(\"1 chance\"));\n+\n+        pluralizedFormat = HaloUtils.pluralize(2, label, pluralLabel);\n+        assertThat(pluralizedFormat, equalTo(\"2 chances\"));\n+\n+        pluralizedFormat = HaloUtils.pluralize(0, label, pluralLabel);\n+        assertThat(pluralizedFormat, equalTo(\"no chance\"));\n+\n+        // Test random positive time\n+        IntStream.range(0, 10000).forEach(i -> {\n+            long time = RandomUtils.nextLong(2, Long.MAX_VALUE);\n+            String result = HaloUtils.pluralize(time, label, pluralLabel);\n+            assertThat(result, equalTo(time + \" \" + pluralLabel));\n+        });\n+\n+        // Test random negative time\n+        IntStream.range(0, 10000).forEach(i -> {\n+            long time = (-1) * RandomUtils.nextLong();\n+            String result = HaloUtils.pluralize(time, label, pluralLabel);\n+            assertThat(result, equalTo(\"no \" + label));\n+        });\n+\n+    }\n+\n+    @Test(expected = IllegalArgumentException.class)\n+    public void pluralizeLabelExceptionTest() {\n+        HaloUtils.pluralize(1, null, null);\n+    }\n+}\n\\ No newline at end of file",
    "output": "Fix user login error"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/filter/CorsFilter.java b/src/main/java/cc/ryanc/halo/filter/CorsFilter.java\n--- a/src/main/java/cc/ryanc/halo/filter/CorsFilter.java\n+++ b/src/main/java/cc/ryanc/halo/filter/CorsFilter.java\n@@ -21,7 +21,7 @@ public class CorsFilter extends OncePerRequestFilter {\n     protected void doFilterInternal(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, FilterChain filterChain) throws ServletException, IOException {\n \n         // Set customized header\n-        httpServletResponse.setHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN, \"*\");\n+        httpServletResponse.setHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN, httpServletRequest.getHeader(HttpHeaders.ORIGIN));\n         httpServletResponse.setHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_HEADERS, \"*\");\n         httpServletResponse.setHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_METHODS, \"GET, POST, PUT, DELETE, OPTION\");\n         httpServletResponse.setHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_CREDENTIALS, \"true\");\n\ndiff --git a/src/main/java/cc/ryanc/halo/security/handler/DefaultAuthenticationFailureHandler.java b/src/main/java/cc/ryanc/halo/security/handler/DefaultAuthenticationFailureHandler.java\n--- a/src/main/java/cc/ryanc/halo/security/handler/DefaultAuthenticationFailureHandler.java\n+++ b/src/main/java/cc/ryanc/halo/security/handler/DefaultAuthenticationFailureHandler.java\n@@ -35,6 +35,7 @@ public DefaultAuthenticationFailureHandler(boolean productionEnv,\n     @Override\n     public void onFailure(HttpServletRequest request, HttpServletResponse response, HaloException exception) throws IOException, ServletException {\n         log.warn(\"Handle unsuccessful authentication, ip: [{}]\", ServletUtil.getClientIP(request));\n+        log.error(\"Authentication failure\", exception);\n \n         BaseResponse<Object> errorDetail = new BaseResponse<>();\n \n@@ -46,8 +47,6 @@ public void onFailure(HttpServletRequest request, HttpServletResponse response,\n             errorDetail.setDevMessage(ExceptionUtils.getStackTrace(exception));\n         }\n \n-        log.debug(\"Response error: [{}]\", errorDetail);\n-\n         response.setContentType(MediaType.APPLICATION_JSON_UTF8_VALUE);\n         response.setStatus(exception.getStatus().value());\n         response.getWriter().write(objectMapper.writeValueAsString(errorDetail));",
    "output": "Return access control allow origin with origin where belongs to client"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/utils/Md5Util.java b/src/main/java/cc/ryanc/halo/utils/Md5Util.java\n--- a/src/main/java/cc/ryanc/halo/utils/Md5Util.java\n+++ b/src/main/java/cc/ryanc/halo/utils/Md5Util.java\n@@ -1,60 +0,0 @@\n-package cc.ryanc.halo.utils;\n-\n-import cn.hutool.core.text.StrBuilder;\n-import org.springframework.web.multipart.MultipartFile;\n-\n-import java.io.InputStream;\n-import java.security.MessageDigest;\n-\n-/**\n- * <pre>\n- *      获取文件hash\n- * </pre>\n- *\n- * @author : Yawn\n- * @date : 2018/12/04\n- */\n-public class Md5Util {\n-\n-    /**\n-     * 计算文件MD5编码\n-     *\n-     * @param file file\n-     * @return byte\n-     * @throws Exception Exception\n-     */\n-    private static byte[] createChecksum(MultipartFile file) throws Exception {\n-        final InputStream fis = file.getInputStream();\n-\n-        final byte[] buffer = new byte[1024];\n-        final MessageDigest complete = MessageDigest.getInstance(\"MD5\");\n-        int numRead;\n-\n-        do {\n-            numRead = fis.read(buffer);\n-            if (numRead > 0) {\n-                complete.update(buffer, 0, numRead);\n-            }\n-        } while (numRead != -1);\n-\n-        fis.close();\n-        return complete.digest();\n-    }\n-\n-    /**\n-     * 生成文件hash值\n-     *\n-     * @param file file\n-     * @return String\n-     * @throws Exception Exception\n-     */\n-    public static String getMD5Checksum(MultipartFile file) throws Exception {\n-        final byte[] b = createChecksum(file);\n-        StrBuilder result = new StrBuilder();\n-\n-        for (int i = 0; i < b.length; i++) {\n-            result.append(Integer.toString((b[i] & 0xff) + 0x100, 16).substring(1));\n-        }\n-        return result.toString();\n-    }\n-}\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/base/BaseController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/base/BaseController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/base/BaseController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/base/BaseController.java\n@@ -1,40 +0,0 @@\n-package cc.ryanc.halo.web.controller.admin.base;\n-\n-import cc.ryanc.halo.service.OptionService;\n-import cc.ryanc.halo.service.ThemeService;\n-import freemarker.template.Configuration;\n-import freemarker.template.TemplateModelException;\n-import org.springframework.beans.factory.annotation.Autowired;\n-\n-import static cc.ryanc.halo.model.support.HaloConst.THEMES;\n-\n-/**\n- * Admin base Controller\n- *\n- * @author : RYAN0UP\n- * @date : 2019/3/16\n- */\n-public abstract class BaseController {\n-\n-    @Autowired\n-    public Configuration configuration;\n-\n-    @Autowired\n-    public OptionService optionService;\n-\n-    @Autowired\n-    public ThemeService themeService;\n-\n-    /**\n-     * Clear all caches\n-     */\n-    public void refreshCache() {\n-        try {\n-            THEMES.clear();\n-            THEMES = themeService.getThemes();\n-            configuration.setSharedVariable(\"options\", optionService.listOptions());\n-        } catch (TemplateModelException e) {\n-            e.printStackTrace();\n-        }\n-    }\n-}",
    "output": "Remove useless classes"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/utils/ValidationUtils.java b/src/main/java/cc/ryanc/halo/utils/ValidationUtils.java\n--- a/src/main/java/cc/ryanc/halo/utils/ValidationUtils.java\n+++ b/src/main/java/cc/ryanc/halo/utils/ValidationUtils.java\n@@ -1,93 +1,100 @@\n package cc.ryanc.halo.utils;\n \n+import org.springframework.lang.NonNull;\n+import org.springframework.lang.Nullable;\n import org.springframework.util.CollectionUtils;\n import org.springframework.validation.FieldError;\n \n import javax.validation.ConstraintViolation;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n+import javax.validation.ConstraintViolationException;\n+import javax.validation.Validation;\n+import javax.validation.Validator;\n+import java.util.*;\n \n /**\n- * 有关字段验证的工具类\n+ * Object validation utilities.\n  *\n  * @author johnniang\n+ * @data 03/29/19\n  */\n public class ValidationUtils {\n \n+    private static Validator VALIDATOR;\n+\n     private ValidationUtils() {\n     }\n \n     /**\n-     * 将字段验证错误转换为标准的map型，key:value = field:message\n+     * Gets validator, or create it.\n      *\n-     * @param constraintViolations constraint violations(contain error information)\n-     * @return 如果返回null则未出现错误\n+     * @return validator\n      */\n-    public static Map<String, String> mapWithValidError(Set<ConstraintViolation<Object>> constraintViolations) {\n-        Map<String, String> errMap = null;\n-        if (!CollectionUtils.isEmpty(constraintViolations)) {\n-            // if not empty\n-            errMap = new HashMap<>(4);\n-            for (ConstraintViolation<Object> constraintViolation : constraintViolations) {\n-                errMap.put(constraintViolation.getPropertyPath().toString(), constraintViolation.getMessage());\n+    @NonNull\n+    public static Validator getValidatorOrCreate() {\n+        if (VALIDATOR == null) {\n+            synchronized (ValidationUtils.class) {\n+                // Init the validation\n+                VALIDATOR = Validation.buildDefaultValidatorFactory().getValidator();\n             }\n         }\n-        return errMap;\n+\n+        return VALIDATOR;\n     }\n \n-    public static String stringWithValidError(Set<ConstraintViolation<?>> violations, boolean allError) {\n-        StringBuilder errString = new StringBuilder();\n-        if (!CollectionUtils.isEmpty(violations)) {\n-            for (ConstraintViolation<?> violation : violations) {\n-                if (errString.length() > 0) {\n-                    errString.append(\",\");\n-                }\n-                errString.append(violation.getMessage());\n-                if (!allError && errString.length() > 0) {\n-                    return errString.toString();\n-                }\n-            }\n+    /**\n+     * Validates bean by hand.\n+     *\n+     * @param obj    bean to be validated\n+     * @param groups validation group\n+     * @throws ConstraintViolationException throw if validation failure\n+     */\n+    public static void validate(Object obj, Class<?>... groups) {\n+\n+        Validator validator = getValidatorOrCreate();\n+\n+        // Validate the object\n+        Set<ConstraintViolation<Object>> constraintViolations = validator.validate(obj, groups);\n+\n+        if (!CollectionUtils.isEmpty(constraintViolations)) {\n+            // If contain some errors then throw constraint violation exception\n+            throw new ConstraintViolationException(constraintViolations);\n         }\n-        return errString.toString();\n     }\n \n+\n     /**\n      * 将字段验证错误转换为标准的map型，key:value = field:message\n      *\n-     * @param fieldErrors 字段错误组\n-     * @return 如果返回null，则表示未出现错误\n+     * @param constraintViolations constraint violations(contain error information)\n+     * @return error detail map\n      */\n-    public static Map<String, String> mapWithFieldError(List<FieldError> fieldErrors) {\n-        Map<String, String> errMap = null;\n-\n-        if (!CollectionUtils.isEmpty(fieldErrors)) {\n-            // 如果不为空\n-            errMap = new HashMap<>(4);\n-            for (FieldError fieldError : fieldErrors) {\n-                errMap.put(fieldError.getField(), fieldError.getDefaultMessage());\n-            }\n+    @NonNull\n+    public static Map<String, String> mapWithValidError(Set<ConstraintViolation<?>> constraintViolations) {\n+        if (CollectionUtils.isEmpty(constraintViolations)) {\n+            return Collections.emptyMap();\n         }\n \n+        Map<String, String> errMap = new HashMap<>(4);\n+        // Format the error message\n+        constraintViolations.forEach(\n+                constraintViolation ->\n+                        errMap.put(constraintViolation.getPropertyPath().toString(), constraintViolation.getMessage()));\n         return errMap;\n     }\n \n-    public static String stringWithFieldError(List<FieldError> fieldErrors, boolean allError) {\n-        StringBuilder errString = new StringBuilder();\n-        if (!CollectionUtils.isEmpty(fieldErrors)) {\n-            // 如果不为空\n-            for (FieldError fieldError : fieldErrors) {\n-                if (errString.length() > 0) {\n-                    errString.append(\",\");\n-                }\n-                errString.append(fieldError.getField()).append(\":\").append(fieldError.getDefaultMessage());\n-                if (!allError && errString.length() > 0) {\n-                    return errString.toString();\n-                }\n-            }\n+    /**\n+     * 将字段验证错误转换为标准的map型，key:value = field:message\n+     *\n+     * @param fieldErrors 字段错误组\n+     * @return 如果返回null，则表示未出现错误\n+     */\n+    public static Map<String, String> mapWithFieldError(@Nullable List<FieldError> fieldErrors) {\n+        if (CollectionUtils.isEmpty(fieldErrors)) {\n+            return Collections.emptyMap();\n         }\n \n-        return errString.toString();\n+        Map<String, String> errMap = new HashMap<>(4);\n+        fieldErrors.forEach(filedError -> errMap.put(filedError.getField(), filedError.getDefaultMessage()));\n+        return errMap;\n     }\n }\n\\ No newline at end of file\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/base/ControllerExceptionHandler.java b/src/main/java/cc/ryanc/halo/web/controller/base/ControllerExceptionHandler.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/base/ControllerExceptionHandler.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/base/ControllerExceptionHandler.java\n@@ -18,10 +18,8 @@\n import org.springframework.web.bind.annotation.RestControllerAdvice;\n import org.springframework.web.servlet.NoHandlerFoundException;\n \n-import javax.validation.ConstraintViolation;\n import javax.validation.ConstraintViolationException;\n import java.util.Map;\n-import java.util.Set;\n \n /**\n  * Exception handler of controller.\n@@ -54,10 +52,10 @@ public BaseResponse handleMissingServletRequestParameterException(MissingServlet\n     @ExceptionHandler(ConstraintViolationException.class)\n     @ResponseStatus(HttpStatus.BAD_REQUEST)\n     public BaseResponse handleConstraintViolationException(ConstraintViolationException e) {\n-        BaseResponse<Set<ConstraintViolation<?>>> baseResponse = handleBaseException(e);\n+        BaseResponse<Map<String, String>> baseResponse = handleBaseException(e);\n         baseResponse.setStatus(HttpStatus.BAD_REQUEST.value());\n         baseResponse.setMessage(\"Field validation error\");\n-        baseResponse.setData(e.getConstraintViolations());\n+        baseResponse.setData(ValidationUtils.mapWithValidError(e.getConstraintViolations()));\n         return baseResponse;\n     }\n ",
    "output": "Refactor ValidationUtils"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/cache/InMemoryCacheStore.java b/src/main/java/cc/ryanc/halo/cache/InMemoryCacheStore.java\n--- a/src/main/java/cc/ryanc/halo/cache/InMemoryCacheStore.java\n+++ b/src/main/java/cc/ryanc/halo/cache/InMemoryCacheStore.java\n@@ -4,6 +4,7 @@\n import org.springframework.util.Assert;\n \n import java.util.Optional;\n+import java.util.TimerTask;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.locks.Lock;\n import java.util.concurrent.locks.ReentrantLock;\n@@ -76,4 +77,19 @@ public void delete(String key) {\n \n         cacheContainer.remove(key);\n     }\n+\n+    /**\n+     * Cache store cleaner.\n+     *\n+     * @author johnniang\n+     * @date 03/28/19\n+     */\n+    private class CacheStoreCleaner extends TimerTask {\n+\n+        @Override\n+        public void run() {\n+\n+            cacheContainer.keySet().forEach(InMemoryCacheStore.this::get);\n+        }\n+    }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/config/HaloConfiguration.java b/src/main/java/cc/ryanc/halo/config/HaloConfiguration.java\n--- a/src/main/java/cc/ryanc/halo/config/HaloConfiguration.java\n+++ b/src/main/java/cc/ryanc/halo/config/HaloConfiguration.java\n@@ -9,6 +9,7 @@\n import cc.ryanc.halo.security.filter.ApiAuthenticationFilter;\n import cc.ryanc.halo.security.handler.AdminAuthenticationFailureHandler;\n import cc.ryanc.halo.security.handler.DefaultAuthenticationFailureHandler;\n+import cc.ryanc.halo.service.UserService;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n@@ -80,8 +81,9 @@ public FilterRegistrationBean<ApiAuthenticationFilter> apiAuthenticationFilter(H\n     @Bean\n     public FilterRegistrationBean<AdminAuthenticationFilter> adminAuthenticationFilter(HaloProperties haloProperties,\n                                                                                        ObjectMapper objectMapper,\n-                                                                                       StringCacheStore cacheStore) {\n-        AdminAuthenticationFilter adminFilter = new AdminAuthenticationFilter(cacheStore, \"/admin/api/login\");\n+                                                                                       StringCacheStore cacheStore,\n+                                                                                       UserService userService) {\n+        AdminAuthenticationFilter adminFilter = new AdminAuthenticationFilter(cacheStore, userService, \"/admin/api/login\");\n         // Set auth enabled\n         adminFilter.setAuthEnabled(haloProperties.getAuthEnabled());\n \n\ndiff --git a/src/main/java/cc/ryanc/halo/security/filter/AdminAuthenticationFilter.java b/src/main/java/cc/ryanc/halo/security/filter/AdminAuthenticationFilter.java\n--- a/src/main/java/cc/ryanc/halo/security/filter/AdminAuthenticationFilter.java\n+++ b/src/main/java/cc/ryanc/halo/security/filter/AdminAuthenticationFilter.java\n@@ -2,11 +2,13 @@\n \n import cc.ryanc.halo.cache.StringCacheStore;\n import cc.ryanc.halo.exception.AuthenticationException;\n+import cc.ryanc.halo.model.entity.User;\n import cc.ryanc.halo.security.authentication.AuthenticationImpl;\n import cc.ryanc.halo.security.context.SecurityContextHolder;\n import cc.ryanc.halo.security.context.SecurityContextImpl;\n import cc.ryanc.halo.security.handler.AuthenticationFailureHandler;\n import cc.ryanc.halo.security.support.UserDetail;\n+import cc.ryanc.halo.service.UserService;\n import cc.ryanc.halo.utils.JsonUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.springframework.http.HttpHeaders;\n@@ -21,10 +23,7 @@\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n import java.io.IOException;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.Optional;\n+import java.util.*;\n \n /**\n  * Admin authentication filter.\n@@ -57,12 +56,15 @@ public class AdminAuthenticationFilter extends OncePerRequestFilter {\n \n     private final StringCacheStore cacheStore;\n \n+    private final UserService userService;\n+\n     private final Collection<String> excludeUrlPatterns;\n \n     private final AntPathMatcher antPathMatcher;\n \n-    public AdminAuthenticationFilter(StringCacheStore cacheStore, String... excludeUrls) {\n+    public AdminAuthenticationFilter(StringCacheStore cacheStore, UserService userService, String... excludeUrls) {\n         this.cacheStore = cacheStore;\n+        this.userService = userService;\n         this.excludeUrlPatterns = excludeUrls == null ? Collections.emptyList() : Collections.unmodifiableCollection(Arrays.asList(excludeUrls));\n         antPathMatcher = new AntPathMatcher();\n     }\n@@ -71,6 +73,12 @@ public AdminAuthenticationFilter(StringCacheStore cacheStore, String... excludeU\n     protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n \n         if (!authEnabled) {\n+            List<User> users = userService.listAll();\n+            if (!users.isEmpty()) {\n+                // Set security context\n+                User user = users.get(0);\n+                SecurityContextHolder.setContext(new SecurityContextImpl(new AuthenticationImpl(new UserDetail(user))));\n+            }\n             // If authentication disabled\n             filterChain.doFilter(request, response);\n             return;",
    "output": "Set SecurityContext for development"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/config/HaloConfiguration.java b/src/main/java/cc/ryanc/halo/config/HaloConfiguration.java\n--- a/src/main/java/cc/ryanc/halo/config/HaloConfiguration.java\n+++ b/src/main/java/cc/ryanc/halo/config/HaloConfiguration.java\n@@ -82,6 +82,9 @@ public FilterRegistrationBean<AdminAuthenticationFilter> adminAuthenticationFilt\n                                                                                        ObjectMapper objectMapper,\n                                                                                        StringCacheStore cacheStore) {\n         AdminAuthenticationFilter adminFilter = new AdminAuthenticationFilter(cacheStore, \"/admin/api/login\");\n+        // Set auth enabled\n+        adminFilter.setAuthEnabled(haloProperties.getAuthEnabled());\n+\n         // Set failure handler\n         adminFilter.setFailureHandler(new AdminAuthenticationFailureHandler(haloProperties.getProductionEnv(), objectMapper));\n \n\ndiff --git a/src/main/java/cc/ryanc/halo/config/properties/HaloProperties.java b/src/main/java/cc/ryanc/halo/config/properties/HaloProperties.java\n--- a/src/main/java/cc/ryanc/halo/config/properties/HaloProperties.java\n+++ b/src/main/java/cc/ryanc/halo/config/properties/HaloProperties.java\n@@ -24,6 +24,11 @@ public class HaloProperties {\n      */\n     private Boolean productionEnv = true;\n \n+    /**\n+     * Authentication enabled\n+     */\n+    private Boolean authEnabled = true;\n+\n     /**\n      * Work directory.\n      */\n\ndiff --git a/src/main/java/cc/ryanc/halo/security/filter/AdminAuthenticationFilter.java b/src/main/java/cc/ryanc/halo/security/filter/AdminAuthenticationFilter.java\n--- a/src/main/java/cc/ryanc/halo/security/filter/AdminAuthenticationFilter.java\n+++ b/src/main/java/cc/ryanc/halo/security/filter/AdminAuthenticationFilter.java\n@@ -50,6 +50,11 @@ public class AdminAuthenticationFilter extends OncePerRequestFilter {\n \n     private AuthenticationFailureHandler failureHandler;\n \n+    /**\n+     * Authentication enabled.\n+     */\n+    private boolean authEnabled = true;\n+\n     private final StringCacheStore cacheStore;\n \n     private final Collection<String> excludeUrlPatterns;\n@@ -64,6 +69,13 @@ public AdminAuthenticationFilter(StringCacheStore cacheStore, String... excludeU\n \n     @Override\n     protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n+\n+        if (!authEnabled) {\n+            // If authentication disabled\n+            filterChain.doFilter(request, response);\n+            return;\n+        }\n+\n         // Get token from request\n         String token = getTokenFromRequest(request);\n \n@@ -112,6 +124,10 @@ public void setFailureHandler(AuthenticationFailureHandler failureHandler) {\n         this.failureHandler = failureHandler;\n     }\n \n+    public void setAuthEnabled(boolean authEnabled) {\n+        this.authEnabled = authEnabled;\n+    }\n+\n     /**\n      * Gets token from request.\n      *",
    "output": "Provide an authentication enabled option"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/cache/InMemoryCacheStore.java b/src/main/java/cc/ryanc/halo/cache/InMemoryCacheStore.java\n--- a/src/main/java/cc/ryanc/halo/cache/InMemoryCacheStore.java\n+++ b/src/main/java/cc/ryanc/halo/cache/InMemoryCacheStore.java\n@@ -5,6 +5,8 @@\n \n import java.util.Optional;\n import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n \n /**\n  * In-memory cache store.\n@@ -19,6 +21,11 @@ public class InMemoryCacheStore extends StringCacheStore {\n      */\n     private final static ConcurrentHashMap<String, CacheWrapper<String>> cacheContainer = new ConcurrentHashMap<>();\n \n+    /**\n+     * Lock.\n+     */\n+    private Lock lock = new ReentrantLock();\n+\n     @Override\n     Optional<CacheWrapper<String>> getInternal(String key) {\n         Assert.hasText(key, \"Cache key must not be blank\");\n@@ -38,26 +45,29 @@ void putInternal(String key, CacheWrapper<String> cacheWrapper) {\n     }\n \n     @Override\n-    synchronized Boolean putInternalIfAbsent(String key, CacheWrapper<String> cacheWrapper) {\n+    Boolean putInternalIfAbsent(String key, CacheWrapper<String> cacheWrapper) {\n         Assert.hasText(key, \"Cache key must not be blank\");\n         Assert.notNull(cacheWrapper, \"Cache wrapper must not be null\");\n \n         log.debug(\"Preparing to put key: [{}], value: [{}]\", key, cacheWrapper);\n \n-        // Get the value before\n-        Optional<String> valueOptional = get(key);\n-\n-        if (valueOptional.isPresent()) {\n-            log.warn(\"Failed to put the cache, because the key: [{}] has been present already\", key);\n-            return false;\n+        try {\n+            lock.lock();\n+            // Get the value before\n+            Optional<String> valueOptional = get(key);\n+\n+            if (valueOptional.isPresent()) {\n+                log.warn(\"Failed to put the cache, because the key: [{}] has been present already\", key);\n+                return false;\n+            }\n+\n+            // Put the cache wrapper\n+            putInternal(key, cacheWrapper);\n+            log.debug(\"Put successfully\");\n+            return true;\n+        } finally {\n+            lock.unlock();\n         }\n-\n-        // Put the cache wrapper\n-        putInternal(key, cacheWrapper);\n-\n-        log.debug(\"Put successfully\");\n-\n-        return true;\n     }\n \n     @Override",
    "output": "Replace synchronized with ReentrantLock"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/cache/InMemoryCacheStore.java b/src/main/java/cc/ryanc/halo/cache/InMemoryCacheStore.java\n--- a/src/main/java/cc/ryanc/halo/cache/InMemoryCacheStore.java\n+++ b/src/main/java/cc/ryanc/halo/cache/InMemoryCacheStore.java\n@@ -27,7 +27,7 @@ Optional<CacheWrapper<String>> getInternal(String key) {\n     }\n \n     @Override\n-    synchronized void putInternal(String key, CacheWrapper<String> cacheWrapper) {\n+    void putInternal(String key, CacheWrapper<String> cacheWrapper) {\n         Assert.hasText(key, \"Cache key must not be blank\");\n         Assert.notNull(cacheWrapper, \"Cache wrapper must not be null\");\n \n@@ -61,7 +61,7 @@ synchronized Boolean putInternalIfAbsent(String key, CacheWrapper<String> cacheW\n     }\n \n     @Override\n-    public synchronized void delete(String key) {\n+    public void delete(String key) {\n         Assert.hasText(key, \"Cache key must not be blank\");\n \n         cacheContainer.remove(key);",
    "output": "Remove useless synchronized key work"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/cache/AbstractCacheStore.java b/src/main/java/cc/ryanc/halo/cache/AbstractCacheStore.java\n--- a/src/main/java/cc/ryanc/halo/cache/AbstractCacheStore.java\n+++ b/src/main/java/cc/ryanc/halo/cache/AbstractCacheStore.java\n@@ -111,7 +111,6 @@ private CacheWrapper<V> buildCacheWrapper(@NonNull V value, long timeout, @Nulla\n             expireAt = DateUtils.addMilliseconds(now, Long.valueOf(millis).intValue());\n         }\n \n-\n         // Build cache wrapper\n         CacheWrapper<V> cacheWrapper = new CacheWrapper<>();\n         cacheWrapper.setCreateAt(now);\n\ndiff --git a/src/main/java/cc/ryanc/halo/cache/CacheWrapper.java b/src/main/java/cc/ryanc/halo/cache/CacheWrapper.java\n--- a/src/main/java/cc/ryanc/halo/cache/CacheWrapper.java\n+++ b/src/main/java/cc/ryanc/halo/cache/CacheWrapper.java\n@@ -2,6 +2,7 @@\n \n import lombok.*;\n \n+import java.io.Serializable;\n import java.util.Date;\n \n /**\n@@ -10,11 +11,11 @@\n  * @author johnniang\n  */\n @Data\n-@EqualsAndHashCode\n @ToString\n+@EqualsAndHashCode\n @NoArgsConstructor\n @AllArgsConstructor\n-public class CacheWrapper<V> {\n+class CacheWrapper<V> implements Serializable {\n \n     /**\n      * Cache data\n\ndiff --git a/src/main/java/cc/ryanc/halo/cache/InMemoryCacheStore.java b/src/main/java/cc/ryanc/halo/cache/InMemoryCacheStore.java\n--- a/src/main/java/cc/ryanc/halo/cache/InMemoryCacheStore.java\n+++ b/src/main/java/cc/ryanc/halo/cache/InMemoryCacheStore.java\n@@ -42,10 +42,24 @@ Boolean putInternalIfAbsent(String key, CacheWrapper<String> cacheWrapper) {\n         Assert.hasText(key, \"Cache key must not be blank\");\n         Assert.notNull(cacheWrapper, \"Cache wrapper must not be null\");\n \n+        log.debug(\"Preparing to put key: [{}], value: [{}]\", key, cacheWrapper);\n+\n         // Put the cache wrapper\n         CacheWrapper<String> putCacheWrapper = cacheContainer.putIfAbsent(key, cacheWrapper);\n \n-        return cacheWrapper.equals(putCacheWrapper);\n+        if (putCacheWrapper == null) {\n+            putCacheWrapper = cacheWrapper;\n+        }\n+\n+        boolean isEqual = cacheWrapper.equals(putCacheWrapper);\n+\n+        if (isEqual) {\n+            log.debug(\"Put successfully\");\n+        } else {\n+            log.warn(\"Failed to put the cache, because the key: [{}] has been present already\", key);\n+        }\n+\n+        return isEqual;\n     }\n \n     @Override\n\ndiff --git a/src/main/java/cc/ryanc/halo/config/HaloConfiguration.java b/src/main/java/cc/ryanc/halo/config/HaloConfiguration.java\n--- a/src/main/java/cc/ryanc/halo/config/HaloConfiguration.java\n+++ b/src/main/java/cc/ryanc/halo/config/HaloConfiguration.java\n@@ -38,7 +38,7 @@ public StringCacheStore stringCacheStore() {\n      * @return Cors filter registration bean\n      */\n     @Bean\n-    FilterRegistrationBean<CorsFilter> corsFilter() {\n+    public FilterRegistrationBean<CorsFilter> corsFilter() {\n         FilterRegistrationBean<CorsFilter> corsFilter = new FilterRegistrationBean<>();\n \n         corsFilter.setOrder(Ordered.HIGHEST_PRECEDENCE + 10);\n@@ -54,7 +54,7 @@ FilterRegistrationBean<CorsFilter> corsFilter() {\n      * @return Log filter registration bean\n      */\n     @Bean\n-    FilterRegistrationBean<LogFilter> logFilter() {\n+    public FilterRegistrationBean<LogFilter> logFilter() {\n         FilterRegistrationBean<LogFilter> logFilter = new FilterRegistrationBean<>();\n \n         logFilter.setOrder(Ordered.HIGHEST_PRECEDENCE + 9);",
    "output": "Fix putIfAbsent bug in InMemoryCacheStore"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/security/handler/AdminAuthenticationFailureHandler.java b/src/main/java/cc/ryanc/halo/security/handler/AdminAuthenticationFailureHandler.java\n--- a/src/main/java/cc/ryanc/halo/security/handler/AdminAuthenticationFailureHandler.java\n+++ b/src/main/java/cc/ryanc/halo/security/handler/AdminAuthenticationFailureHandler.java\n@@ -1,7 +1,13 @@\n package cc.ryanc.halo.security.handler;\n \n+import cc.ryanc.halo.exception.HaloException;\n import com.fasterxml.jackson.databind.ObjectMapper;\n \n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+\n /**\n  * Authentication failure handler.\n  *\n@@ -13,8 +19,9 @@ public AdminAuthenticationFailureHandler(boolean productionEnv, ObjectMapper obj\n         super(productionEnv, objectMapper);\n     }\n \n-//    @Override\n-//    public void onFailure(HttpServletRequest request, HttpServletResponse response, HaloException exception) throws IOException, ServletException {\n-//        // TODO handler the admin authentication failure.\n-//    }\n+    @Override\n+    public void onFailure(HttpServletRequest request, HttpServletResponse response, HaloException exception) throws IOException, ServletException {\n+        // TODO handler the admin authentication failure.\n+        super.onFailure(request, response, exception);\n+    }\n }",
    "output": "Refactor admin authentication failure handler"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/security/handler/DefaultAuthenticationFailureHandler.java b/src/main/java/cc/ryanc/halo/security/handler/DefaultAuthenticationFailureHandler.java\n--- a/src/main/java/cc/ryanc/halo/security/handler/DefaultAuthenticationFailureHandler.java\n+++ b/src/main/java/cc/ryanc/halo/security/handler/DefaultAuthenticationFailureHandler.java\n@@ -36,10 +36,11 @@ public DefaultAuthenticationFailureHandler(boolean productionEnv,\n     public void onFailure(HttpServletRequest request, HttpServletResponse response, HaloException exception) throws IOException, ServletException {\n         log.warn(\"Handle unsuccessful authentication, ip: [{}]\", ServletUtil.getClientIP(request));\n \n-        BaseResponse errorDetail = new BaseResponse();\n+        BaseResponse<Object> errorDetail = new BaseResponse<>();\n \n         errorDetail.setStatus(exception.getStatus().value());\n         errorDetail.setMessage(exception.getMessage());\n+        errorDetail.setData(exception.getErrorData());\n \n         if (!productionEnv) {\n             errorDetail.setDevMessage(ExceptionUtils.getStackTrace(exception));",
    "output": "Set error data when authentication failure"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/listener/StartedListener.java b/src/main/java/cc/ryanc/halo/listener/StartedListener.java\n--- a/src/main/java/cc/ryanc/halo/listener/StartedListener.java\n+++ b/src/main/java/cc/ryanc/halo/listener/StartedListener.java\n@@ -1,11 +1,14 @@\n package cc.ryanc.halo.listener;\n \n import cc.ryanc.halo.config.properties.HaloProperties;\n+import cc.ryanc.halo.model.entity.User;\n import cc.ryanc.halo.model.enums.BlogProperties;\n+import cc.ryanc.halo.model.params.UserParam;\n import cc.ryanc.halo.model.support.HaloConst;\n import cc.ryanc.halo.model.support.Theme;\n import cc.ryanc.halo.service.OptionService;\n import cc.ryanc.halo.service.ThemeService;\n+import cc.ryanc.halo.service.UserService;\n import cc.ryanc.halo.utils.HaloUtils;\n import cc.ryanc.halo.web.controller.content.base.BaseContentController;\n import cn.hutool.core.io.FileUtil;\n@@ -58,6 +61,9 @@ public class StartedListener implements ApplicationListener<ApplicationStartedEv\n     @Autowired\n     private ThemeService themeService;\n \n+    @Autowired\n+    private UserService userService;\n+\n     @Override\n     public void onApplicationEvent(ApplicationStartedEvent event) {\n         // save halo version to database\n@@ -66,6 +72,32 @@ public void onApplicationEvent(ApplicationStartedEvent event) {\n         this.getActiveTheme();\n         this.printStartInfo();\n         this.initThemes();\n+\n+        // Init user in development environment\n+        if (!haloProperties.getProductionEnv()) {\n+            initAnTestUserIfAbsent();\n+        }\n+    }\n+\n+    /**\n+     * Initialize an test user if absent\n+     */\n+    private void initAnTestUserIfAbsent() {\n+        // Create an user if absent\n+        List<User> users = userService.listAll();\n+\n+        if (users.isEmpty()) {\n+            UserParam userParam = new UserParam();\n+            userParam.setUsername(\"test\");\n+            userParam.setNickname(\"developer\");\n+            userParam.setEmail(\"test@test.com\");\n+\n+            log.debug(\"Initializing a test user: [{}]\", userParam);\n+\n+            User testUser = userService.createBy(userParam, \"opentest\");\n+\n+            log.debug(\"Initialized a test user: [{}]\", testUser);\n+        }\n     }\n \n     /**\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/entity/User.java b/src/main/java/cc/ryanc/halo/model/entity/User.java\n--- a/src/main/java/cc/ryanc/halo/model/entity/User.java\n+++ b/src/main/java/cc/ryanc/halo/model/entity/User.java\n@@ -1,5 +1,6 @@\n package cc.ryanc.halo.model.entity;\n \n+import cc.ryanc.halo.utils.DateUtils;\n import lombok.Data;\n import lombok.EqualsAndHashCode;\n import lombok.ToString;\n@@ -20,7 +21,7 @@\n @Table(name = \"users\")\n @SQLDelete(sql = \"update users set deleted = true where id = ?\")\n @Where(clause = \"deleted = false\")\n-@ToString\n+@ToString(callSuper = true)\n @EqualsAndHashCode(callSuper = true)\n public class User extends BaseEntity {\n \n@@ -76,6 +77,23 @@ public class User extends BaseEntity {\n     @Override\n     public void prePersist() {\n         super.prePersist();\n+\n         id = null;\n+\n+        if (email == null) {\n+            email = \"\";\n+        }\n+\n+        if (avatar == null) {\n+            avatar = \"\";\n+        }\n+\n+        if (description == null) {\n+            description = \"\";\n+        }\n+\n+        if (expireTime == null) {\n+            expireTime = DateUtils.now();\n+        }\n     }\n }",
    "output": "Initialize a test user if absent when startup"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/service/impl/OptionServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/OptionServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/OptionServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/OptionServiceImpl.java\n@@ -52,7 +52,7 @@ public OptionServiceImpl(OptionRepository optionRepository) {\n     public void save(String key, String value, String source) {\n         Assert.hasText(key, \"Option key must not be blank\");\n \n-        if (StringUtils.isNotBlank(value)) {\n+        if (StringUtils.isBlank(value)) {\n             // If the value is blank, remove the key\n             optionRepository.removeByOptionKey(key);\n             return;",
    "output": "Fixed save options error"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/handler/file/FileHandler.java b/src/main/java/cc/ryanc/halo/handler/file/FileHandler.java\n--- a/src/main/java/cc/ryanc/halo/handler/file/FileHandler.java\n+++ b/src/main/java/cc/ryanc/halo/handler/file/FileHandler.java\n@@ -1,4 +1,4 @@\n-package cc.ryanc.halo.filehandler;\n+package cc.ryanc.halo.handler.file;\n \n import cc.ryanc.halo.exception.FileOperationException;\n import cc.ryanc.halo.model.enums.AttachmentType;\n\ndiff --git a/src/main/java/cc/ryanc/halo/handler/file/FileHandlerConfiguration.java b/src/main/java/cc/ryanc/halo/handler/file/FileHandlerConfiguration.java\n--- a/src/main/java/cc/ryanc/halo/handler/file/FileHandlerConfiguration.java\n+++ b/src/main/java/cc/ryanc/halo/handler/file/FileHandlerConfiguration.java\n@@ -1,4 +1,4 @@\n-package cc.ryanc.halo.filehandler;\n+package cc.ryanc.halo.handler.file;\n \n import cc.ryanc.halo.config.properties.HaloProperties;\n import cc.ryanc.halo.service.OptionService;\n\ndiff --git a/src/main/java/cc/ryanc/halo/handler/file/FileHandlers.java b/src/main/java/cc/ryanc/halo/handler/file/FileHandlers.java\n--- a/src/main/java/cc/ryanc/halo/handler/file/FileHandlers.java\n+++ b/src/main/java/cc/ryanc/halo/handler/file/FileHandlers.java\n@@ -1,4 +1,4 @@\n-package cc.ryanc.halo.filehandler;\n+package cc.ryanc.halo.handler.file;\n \n import cc.ryanc.halo.exception.FileOperationException;\n import cc.ryanc.halo.model.entity.Attachment;\n\ndiff --git a/src/main/java/cc/ryanc/halo/handler/file/LocalFileHandler.java b/src/main/java/cc/ryanc/halo/handler/file/LocalFileHandler.java\n--- a/src/main/java/cc/ryanc/halo/handler/file/LocalFileHandler.java\n+++ b/src/main/java/cc/ryanc/halo/handler/file/LocalFileHandler.java\n@@ -1,4 +1,4 @@\n-package cc.ryanc.halo.filehandler;\n+package cc.ryanc.halo.handler.file;\n \n import cc.ryanc.halo.config.properties.HaloProperties;\n import cc.ryanc.halo.exception.FileOperationException;\n\ndiff --git a/src/main/java/cc/ryanc/halo/handler/file/QnYunFileHandler.java b/src/main/java/cc/ryanc/halo/handler/file/QnYunFileHandler.java\n--- a/src/main/java/cc/ryanc/halo/handler/file/QnYunFileHandler.java\n+++ b/src/main/java/cc/ryanc/halo/handler/file/QnYunFileHandler.java\n@@ -1,4 +1,4 @@\n-package cc.ryanc.halo.filehandler;\n+package cc.ryanc.halo.handler.file;\n \n import cc.ryanc.halo.exception.FileOperationException;\n import cc.ryanc.halo.model.enums.AttachmentType;\n@@ -28,7 +28,7 @@\n import java.nio.file.Paths;\n import java.util.Objects;\n \n-import static cc.ryanc.halo.filehandler.FileHandler.isImageType;\n+import static cc.ryanc.halo.handler.file.FileHandler.isImageType;\n \n /**\n  * Qi niu yun file handler.\n\ndiff --git a/src/main/java/cc/ryanc/halo/handler/file/UpYunFileHandler.java b/src/main/java/cc/ryanc/halo/handler/file/UpYunFileHandler.java\n--- a/src/main/java/cc/ryanc/halo/handler/file/UpYunFileHandler.java\n+++ b/src/main/java/cc/ryanc/halo/handler/file/UpYunFileHandler.java\n@@ -1,4 +1,4 @@\n-package cc.ryanc.halo.filehandler;\n+package cc.ryanc.halo.handler.file;\n \n import cc.ryanc.halo.exception.FileOperationException;\n import cc.ryanc.halo.model.enums.AttachmentType;\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/AttachmentServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/AttachmentServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/AttachmentServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/AttachmentServiceImpl.java\n@@ -1,6 +1,6 @@\n package cc.ryanc.halo.service.impl;\n \n-import cc.ryanc.halo.filehandler.FileHandlers;\n+import cc.ryanc.halo.handler.file.FileHandlers;\n import cc.ryanc.halo.model.dto.AttachmentOutputDTO;\n import cc.ryanc.halo.model.entity.Attachment;\n import cc.ryanc.halo.model.enums.AttachmentType;",
    "output": "Rename filehandler to handler"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/dto/AttachmentOutputDTO.java b/src/main/java/cc/ryanc/halo/model/dto/AttachmentOutputDTO.java\n--- a/src/main/java/cc/ryanc/halo/model/dto/AttachmentOutputDTO.java\n+++ b/src/main/java/cc/ryanc/halo/model/dto/AttachmentOutputDTO.java\n@@ -2,6 +2,7 @@\n \n import cc.ryanc.halo.model.dto.base.OutputConverter;\n import cc.ryanc.halo.model.entity.Attachment;\n+import cc.ryanc.halo.model.enums.AttachmentType;\n import lombok.Data;\n \n /**\n@@ -27,9 +28,11 @@ public class AttachmentOutputDTO implements OutputConverter<AttachmentOutputDTO,\n \n     private String suffix;\n \n-    private String dimension;\n+    private Integer width;\n \n-    private String size;\n+    private Integer height;\n \n-    private Integer type;\n+    private Long size;\n+\n+    private AttachmentType type;\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/enums/converter/AbstractConverter.java b/src/main/java/cc/ryanc/halo/model/enums/converter/AbstractConverter.java\n--- a/src/main/java/cc/ryanc/halo/model/enums/converter/AbstractConverter.java\n+++ b/src/main/java/cc/ryanc/halo/model/enums/converter/AbstractConverter.java\n@@ -0,0 +1,36 @@\n+package cc.ryanc.halo.model.enums.converter;\n+\n+import cc.ryanc.halo.model.enums.ValueEnum;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import javax.persistence.AttributeConverter;\n+\n+/**\n+ * Abstract converter.\n+ *\n+ * @param <E> enum generic\n+ * @param <V> value generic\n+ * @author johnniang\n+ * @date 12/6/18\n+ */\n+@Slf4j\n+public abstract class AbstractConverter<E extends ValueEnum<V>, V> implements AttributeConverter<E, V> {\n+\n+    private final Class<E> clazz;\n+\n+    protected AbstractConverter(Class<E> clazz) {\n+        this.clazz = clazz;\n+    }\n+\n+    @Override\n+    public V convertToDatabaseColumn(E attribute) {\n+        log.debug(\"Convert to database column: [{}], class type: [{}]\", attribute, clazz.getSimpleName());\n+        return attribute == null ? null : attribute.getValue();\n+    }\n+\n+    @Override\n+    public E convertToEntityAttribute(V dbData) {\n+        log.debug(\"Convert to entity attribute: [{}], class type: [{}]\", dbData, clazz.getSimpleName());\n+        return dbData == null ? null : ValueEnum.valueToEnum(clazz, dbData);\n+    }\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/enums/converter/AttachmentTypeConverter.java b/src/main/java/cc/ryanc/halo/model/enums/converter/AttachmentTypeConverter.java\n--- a/src/main/java/cc/ryanc/halo/model/enums/converter/AttachmentTypeConverter.java\n+++ b/src/main/java/cc/ryanc/halo/model/enums/converter/AttachmentTypeConverter.java\n@@ -0,0 +1,19 @@\n+package cc.ryanc.halo.model.enums.converter;\n+\n+import cc.ryanc.halo.model.enums.AttachmentType;\n+\n+import javax.persistence.Converter;\n+\n+/**\n+ * Attachment type converter\n+ *\n+ * @author johnniang\n+ * @date 3/27/19\n+ */\n+@Converter(autoApply = true)\n+public class AttachmentTypeConverter extends AbstractConverter<AttachmentType, Integer> {\n+\n+    public AttachmentTypeConverter() {\n+        super(AttachmentType.class);\n+    }\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/enums/converter/CommentStatusConverter.java b/src/main/java/cc/ryanc/halo/model/enums/converter/CommentStatusConverter.java\n--- a/src/main/java/cc/ryanc/halo/model/enums/converter/CommentStatusConverter.java\n+++ b/src/main/java/cc/ryanc/halo/model/enums/converter/CommentStatusConverter.java\n@@ -0,0 +1,20 @@\n+package cc.ryanc.halo.model.enums.converter;\n+\n+import cc.ryanc.halo.model.enums.CommentStatus;\n+\n+import javax.persistence.Converter;\n+\n+/**\n+ * Comment status converter.\n+ *\n+ * @author johnniang\n+ * @date 3/27/19\n+ */\n+@Converter(autoApply = true)\n+public class CommentStatusConverter extends AbstractConverter<CommentStatus, Integer> {\n+\n+    public CommentStatusConverter() {\n+        super(CommentStatus.class);\n+    }\n+\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/enums/converter/LogTypeConverter.java b/src/main/java/cc/ryanc/halo/model/enums/converter/LogTypeConverter.java\n--- a/src/main/java/cc/ryanc/halo/model/enums/converter/LogTypeConverter.java\n+++ b/src/main/java/cc/ryanc/halo/model/enums/converter/LogTypeConverter.java\n@@ -0,0 +1,19 @@\n+package cc.ryanc.halo.model.enums.converter;\n+\n+import cc.ryanc.halo.model.enums.LogType;\n+\n+import javax.persistence.Converter;\n+\n+/**\n+ * Log type converter.\n+ *\n+ * @author johnniang\n+ * @date 3/27/19\n+ */\n+@Converter(autoApply = true)\n+public class LogTypeConverter extends AbstractConverter<LogType, Integer> {\n+\n+    public LogTypeConverter() {\n+        super(LogType.class);\n+    }\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/enums/converter/PostCreateFromConverter.java b/src/main/java/cc/ryanc/halo/model/enums/converter/PostCreateFromConverter.java\n--- a/src/main/java/cc/ryanc/halo/model/enums/converter/PostCreateFromConverter.java\n+++ b/src/main/java/cc/ryanc/halo/model/enums/converter/PostCreateFromConverter.java\n@@ -0,0 +1,19 @@\n+package cc.ryanc.halo.model.enums.converter;\n+\n+import cc.ryanc.halo.model.enums.PostCreateFrom;\n+\n+import javax.persistence.Converter;\n+\n+/**\n+ * Post create from converter.\n+ *\n+ * @author johnniang\n+ * @date 3/27/19\n+ */\n+@Converter(autoApply = true)\n+public class PostCreateFromConverter extends AbstractConverter<PostCreateFrom, Integer> {\n+\n+    public PostCreateFromConverter() {\n+        super(PostCreateFrom.class);\n+    }\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/enums/converter/PostStatusConverter.java b/src/main/java/cc/ryanc/halo/model/enums/converter/PostStatusConverter.java\n--- a/src/main/java/cc/ryanc/halo/model/enums/converter/PostStatusConverter.java\n+++ b/src/main/java/cc/ryanc/halo/model/enums/converter/PostStatusConverter.java\n@@ -0,0 +1,19 @@\n+package cc.ryanc.halo.model.enums.converter;\n+\n+import cc.ryanc.halo.model.enums.PostStatus;\n+\n+import javax.persistence.Converter;\n+\n+/**\n+ * PostStatus converter.\n+ *\n+ * @author johnniang\n+ * @date 3/27/19\n+ */\n+@Converter(autoApply = true)\n+public class PostStatusConverter extends AbstractConverter<PostStatus, Integer> {\n+\n+    public PostStatusConverter() {\n+        super(PostStatus.class);\n+    }\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/enums/converter/PostTypeConverter.java b/src/main/java/cc/ryanc/halo/model/enums/converter/PostTypeConverter.java\n--- a/src/main/java/cc/ryanc/halo/model/enums/converter/PostTypeConverter.java\n+++ b/src/main/java/cc/ryanc/halo/model/enums/converter/PostTypeConverter.java\n@@ -0,0 +1,19 @@\n+package cc.ryanc.halo.model.enums.converter;\n+\n+import cc.ryanc.halo.model.enums.PostType;\n+\n+import javax.persistence.Converter;\n+\n+/**\n+ * PostType converter.\n+ *\n+ * @author johnniang\n+ * @date 3/27/19\n+ */\n+@Converter(autoApply = true)\n+public class PostTypeConverter extends AbstractConverter<PostType, Integer> {\n+\n+    public PostTypeConverter() {\n+        super(PostType.class);\n+    }\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/AttachmentServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/AttachmentServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/AttachmentServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/AttachmentServiceImpl.java\n@@ -79,6 +79,8 @@ public Attachment upload(MultipartFile file) {\n         attachment.setSize(uploadResult.getSize());\n         attachment.setType(attachmentType);\n \n+        log.debug(\"Creating attachment: [{}]\", attachment);\n+\n         // Create and return\n         return create(attachment);\n     }",
    "output": "Add all enum type converter"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/filehandler/QnYunFileHandler.java b/src/main/java/cc/ryanc/halo/filehandler/QnYunFileHandler.java\n--- a/src/main/java/cc/ryanc/halo/filehandler/QnYunFileHandler.java\n+++ b/src/main/java/cc/ryanc/halo/filehandler/QnYunFileHandler.java\n@@ -127,6 +127,7 @@ public UploadResult upload(MultipartFile file) {\n     @Override\n     public void delete(String key) {\n         Assert.notNull(key, \"File key must not be blank\");\n+\n         // Get all config\n         Zone zone = optionService.getQnYunZone();\n         String accessKey = optionService.getByPropertyOfNonNull(QnYunProperties.ACCESS_KEY);\n\ndiff --git a/src/main/java/cc/ryanc/halo/filehandler/UpYunFileHandler.java b/src/main/java/cc/ryanc/halo/filehandler/UpYunFileHandler.java\n--- a/src/main/java/cc/ryanc/halo/filehandler/UpYunFileHandler.java\n+++ b/src/main/java/cc/ryanc/halo/filehandler/UpYunFileHandler.java\n@@ -1,7 +1,6 @@\n package cc.ryanc.halo.filehandler;\n \n import cc.ryanc.halo.exception.FileOperationException;\n-import cc.ryanc.halo.exception.PropertyFormatException;\n import cc.ryanc.halo.model.enums.AttachmentType;\n import cc.ryanc.halo.model.enums.UpYunProperties;\n import cc.ryanc.halo.model.support.UploadResult;\n@@ -39,11 +38,6 @@ public UploadResult upload(MultipartFile file) {\n         Assert.notNull(file, \"Multipart file must not be null\");\n \n         String ossSource = optionService.getByPropertyOfNonNull(UpYunProperties.OSS_SOURCE);\n-\n-        if (StringUtils.startsWith(ossSource, \"/\")) {\n-            throw new PropertyFormatException(UpYunProperties.OSS_SOURCE.getValue() + \": \" + ossSource + \" doesn't start with '/'\");\n-        }\n-\n         String ossPassword = optionService.getByPropertyOfNonNull(UpYunProperties.OSS_PASSWORD);\n         String ossBucket = optionService.getByPropertyOfNonNull(UpYunProperties.OSS_BUCKET);\n         String ossDomain = optionService.getByPropertyOfNonNull(UpYunProperties.OSS_DOMAIN);\n@@ -102,8 +96,29 @@ public UploadResult upload(MultipartFile file) {\n \n     @Override\n     public void delete(String key) {\n+        Assert.notNull(key, \"File key must not be blank\");\n+\n+        // Get config\n+        String ossSource = optionService.getByPropertyOfNonNull(UpYunProperties.OSS_SOURCE);\n+        String ossPassword = optionService.getByPropertyOfNonNull(UpYunProperties.OSS_PASSWORD);\n+        String ossBucket = optionService.getByPropertyOfNonNull(UpYunProperties.OSS_BUCKET);\n+        String ossOperator = optionService.getByPropertyOfNonNull(UpYunProperties.OSS_OPERATOR);\n \n-        // TODO Handle file deletion\n+        // Create up yun\n+        UpYun upYun = new UpYun(ossBucket, ossOperator, ossPassword);\n+        // Set api domain with ED_AUTO\n+        upYun.setApiDomain(UpYun.ED_AUTO);\n+\n+        try {\n+            String filePath = ossSource + key;\n+            // Delete the file\n+            boolean deleteResult = upYun.deleteFile(filePath);\n+            if (!deleteResult) {\n+                log.warn(\"Failed to delete file \" + filePath + \" from UpYun\");\n+            }\n+        } catch (Exception e) {\n+            throw new FileOperationException(\"Failed to delete file \" + key + \" from UpYun\", e);\n+        }\n     }\n \n     @Override",
    "output": "Complete UpYun deletion handler"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/filehandler/FileHandlers.java b/src/main/java/cc/ryanc/halo/filehandler/FileHandlers.java\n--- a/src/main/java/cc/ryanc/halo/filehandler/FileHandlers.java\n+++ b/src/main/java/cc/ryanc/halo/filehandler/FileHandlers.java\n@@ -1,13 +1,15 @@\n package cc.ryanc.halo.filehandler;\n \n import cc.ryanc.halo.exception.FileOperationException;\n+import cc.ryanc.halo.model.entity.Attachment;\n import cc.ryanc.halo.model.enums.AttachmentType;\n import cc.ryanc.halo.model.support.UploadResult;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.context.ApplicationContext;\n import org.springframework.lang.NonNull;\n import org.springframework.lang.Nullable;\n import org.springframework.stereotype.Component;\n+import org.springframework.util.Assert;\n import org.springframework.util.CollectionUtils;\n import org.springframework.web.multipart.MultipartFile;\n \n@@ -34,27 +36,46 @@ public FileHandlers(ApplicationContext applicationContext) {\n         addFileHandlers(applicationContext.getBeansOfType(FileHandler.class).values());\n     }\n \n-    public UploadResult upload(MultipartFile file, AttachmentType attachmentType) {\n+    /**\n+     * Uploads files.\n+     *\n+     * @param file           multipart file must not be null\n+     * @param attachmentType attachment type must not be null\n+     * @return upload result\n+     * @throws FileOperationException throws when fail to delete attachment or no available file handler to upload it\n+     */\n+    @NonNull\n+    public UploadResult upload(@NonNull MultipartFile file, @NonNull AttachmentType attachmentType) {\n+        Assert.notNull(file, \"Multipart file must not be null\");\n+        Assert.notNull(attachmentType, \"Attachment type must not be null\");\n+\n         for (FileHandler fileHandler : fileHandlers) {\n             if (fileHandler.supportType(attachmentType)) {\n                 return fileHandler.upload(file);\n             }\n         }\n \n-        log.error(\"There is no available file handle for attachment type: [{}]\", attachmentType);\n-        throw new FileOperationException(\"No available file handler to filehandler the file\").setErrorData(attachmentType);\n+        throw new FileOperationException(\"No available file handler to upload the file\").setErrorData(attachmentType);\n     }\n \n-    public void delete(String key, AttachmentType attachmentType) {\n+    /**\n+     * Deletes attachment.\n+     *\n+     * @param attachment attachment detail must not be null\n+     * @throws FileOperationException throws when fail to delete attachment or no available file handler to delete it\n+     */\n+    public void delete(@NonNull Attachment attachment) {\n+        Assert.notNull(attachment, \"Attachment must not be null\");\n+\n         for (FileHandler fileHandler : fileHandlers) {\n-            if (fileHandler.supportType(attachmentType)) {\n-                fileHandler.delete(key);\n+            if (fileHandler.supportType(attachment.getType())) {\n+                // Delete the file\n+                fileHandler.delete(attachment.getFileKey());\n                 return;\n             }\n         }\n \n-        log.error(\"There is no available file handle for attachment type: [{}]\", attachmentType);\n-        throw new FileOperationException(\"No available file handler to delete the file\").setErrorData(attachmentType);\n+        throw new FileOperationException(\"No available file handler to delete the file\").setErrorData(attachment);\n     }\n \n     /**\n\ndiff --git a/src/main/java/cc/ryanc/halo/filehandler/QnYunFileHandler.java b/src/main/java/cc/ryanc/halo/filehandler/QnYunFileHandler.java\n--- a/src/main/java/cc/ryanc/halo/filehandler/QnYunFileHandler.java\n+++ b/src/main/java/cc/ryanc/halo/filehandler/QnYunFileHandler.java\n@@ -124,6 +124,9 @@ public UploadResult upload(MultipartFile file) {\n \n     @Override\n     public void delete(String key) {\n+        Assert.notNull(key, \"File key must not be blank\");\n+\n+\n         // TODO Handle file deletion\n     }\n \n\ndiff --git a/src/main/java/cc/ryanc/halo/service/AttachmentService.java b/src/main/java/cc/ryanc/halo/service/AttachmentService.java\n--- a/src/main/java/cc/ryanc/halo/service/AttachmentService.java\n+++ b/src/main/java/cc/ryanc/halo/service/AttachmentService.java\n@@ -23,7 +23,8 @@ public interface AttachmentService extends CrudService<Attachment, Integer> {\n      * @param pageable page info must not be null\n      * @return a page of attachment output dto\n      */\n-    Page<AttachmentOutputDTO> pageDtosBy(Pageable pageable);\n+    @NonNull\n+    Page<AttachmentOutputDTO> pageDtosBy(@NonNull Pageable pageable);\n \n     /**\n      * Uploads file.\n@@ -34,4 +35,13 @@ public interface AttachmentService extends CrudService<Attachment, Integer> {\n      */\n     @NonNull\n     Attachment upload(@NonNull MultipartFile file);\n+\n+    /**\n+     * Removes attachment permanently.\n+     *\n+     * @param id attachment id must not be null\n+     * @return attachment detail deleted\n+     */\n+    @NonNull\n+    Attachment removePermanently(@NonNull Integer id);\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/AttachmentServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/AttachmentServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/AttachmentServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/AttachmentServiceImpl.java\n@@ -1,5 +1,6 @@\n package cc.ryanc.halo.service.impl;\n \n+import cc.ryanc.halo.filehandler.FileHandlers;\n import cc.ryanc.halo.model.dto.AttachmentOutputDTO;\n import cc.ryanc.halo.model.entity.Attachment;\n import cc.ryanc.halo.model.enums.AttachmentType;\n@@ -9,7 +10,6 @@\n import cc.ryanc.halo.service.AttachmentService;\n import cc.ryanc.halo.service.OptionService;\n import cc.ryanc.halo.service.base.AbstractCrudService;\n-import cc.ryanc.halo.filehandler.FileHandlers;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.Pageable;\n@@ -83,6 +83,19 @@ public Attachment upload(MultipartFile file) {\n         return create(attachment);\n     }\n \n+    @Override\n+    public Attachment removePermanently(Integer id) {\n+        // Remove it from database\n+        Attachment deletedAttachment = removeById(id);\n+\n+        // Remove the file\n+        fileHandlers.delete(deletedAttachment);\n+\n+        log.debug(\"Deleted attachment: [{}]\", deletedAttachment);\n+\n+        return deletedAttachment;\n+    }\n+\n     /**\n      * Get attachment type from options.\n      *\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/AttachmentController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/AttachmentController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/AttachmentController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/AttachmentController.java\n@@ -58,8 +58,8 @@ public AttachmentOutputDTO getBy(@PathVariable(\"id\") Integer id) {\n      */\n     @DeleteMapping(\"{id:\\\\d+}\")\n     @ApiOperation(\"Delete attachment by id\")\n-    public void deletePermanently(@PathVariable(\"id\") Integer id) {\n-        attachmentService.removeById(id);\n+    public AttachmentOutputDTO deletePermanently(@PathVariable(\"id\") Integer id) {\n+        return new AttachmentOutputDTO().convertFrom(attachmentService.removePermanently(id));\n     }\n \n     @PostMapping(\"upload\")",
    "output": "Complete attachment deletion permanently service"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/filehandler/LocalFileHandler.java b/src/main/java/cc/ryanc/halo/filehandler/LocalFileHandler.java\n--- a/src/main/java/cc/ryanc/halo/filehandler/LocalFileHandler.java\n+++ b/src/main/java/cc/ryanc/halo/filehandler/LocalFileHandler.java\n@@ -120,6 +120,7 @@ public UploadResult upload(MultipartFile file) {\n             UploadResult uploadResult = new UploadResult();\n             uploadResult.setFilename(basename);\n             uploadResult.setFilePath(subFilePath);\n+            uploadResult.setKey(subFilePath);\n             uploadResult.setSuffix(extension);\n             uploadResult.setMediaType(MediaType.valueOf(Objects.requireNonNull(file.getContentType())));\n             uploadResult.setSize(file.getSize());\n\ndiff --git a/src/main/java/cc/ryanc/halo/filehandler/QnYunFileHandler.java b/src/main/java/cc/ryanc/halo/filehandler/QnYunFileHandler.java\n--- a/src/main/java/cc/ryanc/halo/filehandler/QnYunFileHandler.java\n+++ b/src/main/java/cc/ryanc/halo/filehandler/QnYunFileHandler.java\n@@ -74,7 +74,11 @@ public UploadResult upload(MultipartFile file) {\n         // Create temp path\n         Path tmpPath = Paths.get(System.getProperty(\"java.io.tmpdir\"), bucket);\n \n+\n         try {\n+            String basename = FilenameUtils.getBasename(file.getOriginalFilename());\n+            String extension = FilenameUtils.getExtension(file.getOriginalFilename());\n+\n             // Get file recorder for temp directory\n             FileRecorder fileRecorder = new FileRecorder(tmpPath.toFile());\n             // Get upload manager\n@@ -96,9 +100,10 @@ public UploadResult upload(MultipartFile file) {\n \n             // Build upload result\n             UploadResult result = new UploadResult();\n-            result.setFilename(putSet.getHash());\n+            result.setFilename(basename);\n             result.setFilePath(filePath);\n-            result.setSuffix(FilenameUtils.getExtension(file.getOriginalFilename()));\n+            result.setKey(putSet.getKey());\n+            result.setSuffix(extension);\n             result.setWidth(putSet.getWidth());\n             result.setHeight(putSet.getHeight());\n             result.setMediaType(MediaType.valueOf(Objects.requireNonNull(file.getContentType())));\n\ndiff --git a/src/main/java/cc/ryanc/halo/filehandler/UpYunFileHandler.java b/src/main/java/cc/ryanc/halo/filehandler/UpYunFileHandler.java\n--- a/src/main/java/cc/ryanc/halo/filehandler/UpYunFileHandler.java\n+++ b/src/main/java/cc/ryanc/halo/filehandler/UpYunFileHandler.java\n@@ -66,7 +66,7 @@ public UploadResult upload(MultipartFile file) {\n             // Get md5 value of the file\n             String md5OfFile = DigestUtils.md5DigestAsHex(file.getInputStream());\n             // Build file path\n-            String upFilePath = ossSource + md5OfFile + '.' + extension;\n+            String upFilePath = StringUtils.appendIfMissing(ossSource, \"/\") + md5OfFile + '.' + extension;\n             // Set md5Content\n             upYun.setContentMD5(md5OfFile);\n             // Write file\n@@ -81,6 +81,7 @@ public UploadResult upload(MultipartFile file) {\n             UploadResult uploadResult = new UploadResult();\n             uploadResult.setFilename(basename);\n             uploadResult.setFilePath(filePath);\n+            uploadResult.setKey(upFilePath);\n             uploadResult.setMediaType(MediaType.valueOf(Objects.requireNonNull(file.getContentType())));\n             uploadResult.setSuffix(extension);\n             uploadResult.setSize(file.getSize());",
    "output": "Set key filed on UploadResult"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/service/MailService.java b/src/main/java/cc/ryanc/halo/service/MailService.java\n--- a/src/main/java/cc/ryanc/halo/service/MailService.java\n+++ b/src/main/java/cc/ryanc/halo/service/MailService.java\n@@ -10,6 +10,11 @@\n  */\n public interface MailService {\n \n+    /**\n+     * Reload email config.\n+     */\n+    void reloadMailConfig();\n+\n     /**\n      * Send a simple email\n      *\n@@ -36,7 +41,7 @@ public interface MailService {\n      * @param subject      subject\n      * @param content      content\n      * @param templateName template name\n-     * @param attachSrc    attachment path\n+     * @param attachFilename    attachment path\n      */\n-    void sendAttachMail(String to, String subject, Map<String, Object> content, String templateName, String attachSrc);\n+    void sendAttachMail(String to, String subject, Map<String, Object> content, String templateName, String attachFilename);\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/MailServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/MailServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/MailServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/MailServiceImpl.java\n@@ -1,63 +1,83 @@\n package cc.ryanc.halo.service.impl;\n \n+import cc.ryanc.halo.exception.ServiceException;\n import cc.ryanc.halo.model.enums.BlogProperties;\n+import cc.ryanc.halo.model.enums.EmailProperties;\n import cc.ryanc.halo.service.MailService;\n import cc.ryanc.halo.service.OptionService;\n-import cc.ryanc.halo.utils.HaloUtils;\n import cn.hutool.core.text.StrBuilder;\n import freemarker.template.Template;\n import io.github.biezhi.ome.OhMyEmail;\n+import lombok.extern.slf4j.Slf4j;\n import org.springframework.stereotype.Service;\n import org.springframework.ui.freemarker.FreeMarkerTemplateUtils;\n import org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer;\n \n import java.io.File;\n import java.util.Map;\n+import java.util.Properties;\n \n /**\n  * @author : RYAN0UP\n  * @date : 2019-03-17\n  */\n+@Slf4j\n @Service\n public class MailServiceImpl implements MailService {\n \n     private final FreeMarkerConfigurer freeMarker;\n \n     private final OptionService optionService;\n \n+    private boolean loaded = false;\n+\n     public MailServiceImpl(FreeMarkerConfigurer freeMarker,\n                            OptionService optionService) {\n         this.freeMarker = freeMarker;\n         this.optionService = optionService;\n+\n+        try {\n+            reloadMailConfig();\n+        } catch (Exception e) {\n+            log.warn(\"You have to configure the email settings correctly before using email service\");\n+        }\n+    }\n+\n+    @Override\n+    public void reloadMailConfig() {\n+        loaded = false;\n+        // Get default properties\n+        loadConfig();\n     }\n \n     /**\n-     * Send a simple email\n+     * Sends a simple email\n      *\n      * @param to      recipient\n      * @param subject subject\n      * @param content content\n      */\n     @Override\n     public void sendMail(String to, String subject, String content) {\n-        HaloUtils.configMail(\n-                optionService.getByPropertyOfNonNull(BlogProperties.MAIL_SMTP_HOST),\n-                optionService.getByPropertyOfNonNull(BlogProperties.MAIL_SMTP_USERNAME),\n-                optionService.getByPropertyOfNonNull(BlogProperties.MAIL_SMTP_PASSWORD));\n+        loadConfig();\n+\n+        String fromUsername = optionService.getByPropertyOfNonNull(EmailProperties.FROM_NAME);\n+\n         try {\n             OhMyEmail.subject(subject)\n-                    .from(optionService.getByPropertyOfNonNull(BlogProperties.MAIL_FROM_NAME))\n+                    .from(fromUsername)\n                     .to(to)\n                     .text(content)\n                     .send();\n         } catch (Exception e) {\n-            // TODO Handle this exception.\n-            e.printStackTrace();\n+            log.debug(\"Email properties: to username: [{}], from username: [{}], subject: [{}], content: [{}]\",\n+                    to, fromUsername, subject, content);\n+            throw new ServiceException(\"Failed to send email to \" + to, e);\n         }\n     }\n \n     /**\n-     * Send template mail\n+     * Sends template mail\n      *\n      * @param to           recipient\n      * @param subject      subject\n@@ -66,54 +86,75 @@ public void sendMail(String to, String subject, String content) {\n      */\n     @Override\n     public void sendTemplateMail(String to, String subject, Map<String, Object> content, String templateName) {\n-        HaloUtils.configMail(\n-                optionService.getByPropertyOfNonNull(BlogProperties.MAIL_SMTP_HOST),\n-                optionService.getByPropertyOfNonNull(BlogProperties.MAIL_SMTP_USERNAME),\n-                optionService.getByPropertyOfNonNull(BlogProperties.MAIL_SMTP_PASSWORD));\n-        StrBuilder text = new StrBuilder();\n+        loadConfig();\n+\n+        String fromUsername = optionService.getByPropertyOfNonNull(EmailProperties.FROM_NAME);\n+\n         try {\n-            final Template template = freeMarker.getConfiguration().getTemplate(templateName);\n+            StrBuilder text = new StrBuilder();\n+            Template template = freeMarker.getConfiguration().getTemplate(templateName);\n             text.append(FreeMarkerTemplateUtils.processTemplateIntoString(template, content));\n             OhMyEmail.subject(subject)\n-                    .from(optionService.getByPropertyOfNonNull(BlogProperties.MAIL_FROM_NAME))\n+                    .from(fromUsername)\n                     .to(to)\n                     .html(text.toString())\n                     .send();\n         } catch (Exception e) {\n-            // TODO Handle this exception.\n-            e.printStackTrace();\n+            log.debug(\"Email properties: to username: [{}], from username: [{}], subject: [{}], template name: [{}], content: [{}]\",\n+                    to, fromUsername, subject, templateName, content);\n+            throw new ServiceException(\"Failed to send template email to \" + to, e).setErrorData(templateName);\n         }\n     }\n \n     /**\n-     * Send mail with attachments\n+     * Sends mail with attachments\n      *\n-     * @param to           recipient\n-     * @param subject      subject\n-     * @param content      content\n-     * @param templateName template name\n-     * @param attachSrc    attachment path\n+     * @param to             recipient\n+     * @param subject        subject\n+     * @param content        content\n+     * @param templateName   template name\n+     * @param attachFilename attachment path\n      */\n     @Override\n-    public void sendAttachMail(String to, String subject, Map<String, Object> content, String templateName, String attachSrc) {\n-        HaloUtils.configMail(\n-                optionService.getByPropertyOfNonNull(BlogProperties.MAIL_SMTP_HOST),\n-                optionService.getByPropertyOfNonNull(BlogProperties.MAIL_SMTP_USERNAME),\n-                optionService.getByPropertyOfNonNull(BlogProperties.MAIL_SMTP_PASSWORD));\n-        File file = new File(attachSrc);\n-        StrBuilder text = new StrBuilder();\n+    public void sendAttachMail(String to, String subject, Map<String, Object> content, String templateName, String attachFilename) {\n+        loadConfig();\n+\n+        String fromUsername = optionService.getByPropertyOfNonNull(BlogProperties.MAIL_FROM_NAME);\n+\n+        File file = new File(attachFilename);\n         try {\n-            final Template template = freeMarker.getConfiguration().getTemplate(templateName);\n-            text.append(FreeMarkerTemplateUtils.processTemplateIntoString(template, content));\n+            Template template = freeMarker.getConfiguration().getTemplate(templateName);\n             OhMyEmail.subject(subject)\n-                    .from(optionService.getByPropertyOfNonNull(BlogProperties.MAIL_FROM_NAME))\n+                    .from(fromUsername)\n                     .to(to)\n-                    .html(text.toString())\n+                    .html(FreeMarkerTemplateUtils.processTemplateIntoString(template, content))\n                     .attach(file, file.getName())\n                     .send();\n         } catch (Exception e) {\n-            // TODO Handle this exception.\n-            e.printStackTrace();\n+            log.debug(\"Email properties: to username: [{}], from username: [{}], subject: [{}], template name: [{}], attachment: [{}], content: [{}]\",\n+                    to, fromUsername, subject, templateName, attachFilename, content);\n+            throw new ServiceException(\"Failed to send attachment email to \" + to, e);\n         }\n     }\n+\n+    /**\n+     * Load email config.\n+     */\n+    private synchronized void loadConfig() {\n+        if (loaded = true) {\n+            return;\n+        }\n+\n+        // Get default properties\n+        Properties defaultProperties = OhMyEmail.defaultConfig(log.isDebugEnabled());\n+        // Set smtp host\n+        defaultProperties.setProperty(\"mail.smtp.host\", optionService.getByPropertyOfNonNull(EmailProperties.SMTP_HOST));\n+        // Config email\n+        OhMyEmail.config(defaultProperties,\n+                optionService.getByPropertyOfNonNull(EmailProperties.SMTP_USERNAME),\n+                optionService.getByPropertyOfNonNull(EmailProperties.SMTP_PASSWORD));\n+\n+        // Set config loaded with true\n+        loaded = true;\n+    }\n }",
    "output": "Refactor MailService"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/enums/EmailProperties.java b/src/main/java/cc/ryanc/halo/model/enums/EmailProperties.java\n--- a/src/main/java/cc/ryanc/halo/model/enums/EmailProperties.java\n+++ b/src/main/java/cc/ryanc/halo/model/enums/EmailProperties.java\n@@ -0,0 +1,41 @@\n+package cc.ryanc.halo.model.enums;\n+\n+/**\n+ * Email properties.\n+ *\n+ * @author johnniang\n+ * @date 3/27/19\n+ */\n+public enum EmailProperties implements PropertyEnum {\n+\n+    SMTP_HOST(\"email_smtp_host\", String.class),\n+    SMTP_USERNAME(\"email_smtp_username\", String.class),\n+    SMTP_PASSWORD(\"email_smtp_password\", String.class),\n+    FROM_NAME(\"email_from_name\", String.class),\n+    ENABLED(\"email_enabled\", Boolean.class),\n+    COMMENT_REPLY_NOTICE_ENABLED(\"email_comment_reply_notice_enabled\", Boolean.class),\n+    NEW_COMMENT_NOTICE_ENABLED(\"email_new_comment_notice_enabled\", Boolean.class),\n+    COMMENT_PASS_NOTICE_ENABLED(\"email_comment_pass_notice_enabled\", Boolean.class);\n+\n+    private final String value;\n+\n+    private final Class<?> type;\n+\n+    EmailProperties(String value, Class<?> type) {\n+        if (!PropertyEnum.isSupportedType(type)) {\n+            throw new IllegalArgumentException(\"Unsupported blog property type: \" + type);\n+        }\n+\n+        this.value = value;\n+        this.type = type;\n+    }\n+\n+    @Override\n+    public Class<?> getType() {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getValue() {\n+        return null;\n+    }}\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/enums/UpYunProperties.java b/src/main/java/cc/ryanc/halo/model/enums/UpYunProperties.java\n--- a/src/main/java/cc/ryanc/halo/model/enums/UpYunProperties.java\n+++ b/src/main/java/cc/ryanc/halo/model/enums/UpYunProperties.java\n@@ -20,18 +20,22 @@ public enum UpYunProperties implements PropertyEnum {\n     private Class<?> type;\n \n     UpYunProperties(String value, Class<?> type) {\n+        if (!PropertyEnum.isSupportedType(type)) {\n+            throw new IllegalArgumentException(\"Unsupported blog property type: \" + type);\n+        }\n+\n         this.value = value;\n         this.type = type;\n     }\n \n \n     @Override\n     public Class<?> getType() {\n-        return null;\n+        return type;\n     }\n \n     @Override\n     public String getValue() {\n-        return null;\n+        return value;\n     }\n }",
    "output": "Add EmailProperties"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/entity/Attachment.java b/src/main/java/cc/ryanc/halo/model/entity/Attachment.java\n--- a/src/main/java/cc/ryanc/halo/model/entity/Attachment.java\n+++ b/src/main/java/cc/ryanc/halo/model/entity/Attachment.java\n@@ -41,6 +41,12 @@ public class Attachment extends BaseEntity {\n     @Column(name = \"path\", columnDefinition = \"varchar(1023) not null\")\n     private String path;\n \n+    /**\n+     * File key: oss file key or local file key (Just for deleting)\n+     */\n+    @Column(name = \"file_key\", columnDefinition = \"varchar(2047) default ''\")\n+    private String fileKey;\n+\n     /**\n      * 缩略图路径\n      */\n@@ -88,6 +94,10 @@ public void prePersist() {\n         super.prePersist();\n         id = null;\n \n+        if (fileKey == null) {\n+            fileKey = \"\";\n+        }\n+\n         if (thumbPath == null) {\n             thumbPath = \"\";\n         }\n@@ -107,7 +117,5 @@ public void prePersist() {\n         if (type == null) {\n             type = AttachmentType.SERVER;\n         }\n-\n     }\n-\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/support/UploadResult.java b/src/main/java/cc/ryanc/halo/model/support/UploadResult.java\n--- a/src/main/java/cc/ryanc/halo/model/support/UploadResult.java\n+++ b/src/main/java/cc/ryanc/halo/model/support/UploadResult.java\n@@ -16,6 +16,8 @@ public class UploadResult {\n \n     private String filePath;\n \n+    private String key;\n+\n     private String thumbPath;\n \n     private String suffix;\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/upload/FileHandler.java b/src/main/java/cc/ryanc/halo/service/upload/FileHandler.java\n--- a/src/main/java/cc/ryanc/halo/service/upload/FileHandler.java\n+++ b/src/main/java/cc/ryanc/halo/service/upload/FileHandler.java\n@@ -0,0 +1,33 @@\n+package cc.ryanc.halo.service.upload;\n+\n+import cc.ryanc.halo.exception.FileUploadException;\n+import cc.ryanc.halo.model.support.UploadResult;\n+import org.springframework.lang.NonNull;\n+import org.springframework.web.multipart.MultipartFile;\n+\n+/**\n+ * File handler interface.\n+ *\n+ * @author johnniang\n+ * @date 3/27/19\n+ */\n+public interface FileHandler {\n+\n+    /**\n+     * Uploads file.\n+     *\n+     * @param file multipart file must not be null\n+     * @return upload result\n+     * @throws FileUploadException throws when fail to upload the file\n+     */\n+    @NonNull\n+    UploadResult upload(@NonNull MultipartFile file);\n+\n+    /**\n+     * Deletes file.\n+     *\n+     * @param key file key must not be null\n+     */\n+    boolean delete(@NonNull String key);\n+\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/upload/LocalFileHandler.java b/src/main/java/cc/ryanc/halo/service/upload/LocalFileHandler.java\n--- a/src/main/java/cc/ryanc/halo/service/upload/LocalFileHandler.java\n+++ b/src/main/java/cc/ryanc/halo/service/upload/LocalFileHandler.java\n@@ -0,0 +1,30 @@\n+package cc.ryanc.halo.service.upload;\n+\n+import cc.ryanc.halo.model.support.UploadResult;\n+import cc.ryanc.halo.service.OptionService;\n+import org.springframework.web.multipart.MultipartFile;\n+\n+/**\n+ * Local file handler.\n+ *\n+ * @author johnniang\n+ * @date 3/27/19\n+ */\n+public class LocalFileHandler implements FileHandler {\n+\n+    private final OptionService optionService;\n+\n+    public LocalFileHandler(OptionService optionService) {\n+        this.optionService = optionService;\n+    }\n+\n+    @Override\n+    public UploadResult upload(MultipartFile file) {\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean delete(String key) {\n+        return false;\n+    }\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/upload/QnYunFileHandler.java b/src/main/java/cc/ryanc/halo/service/upload/QnYunFileHandler.java\n--- a/src/main/java/cc/ryanc/halo/service/upload/QnYunFileHandler.java\n+++ b/src/main/java/cc/ryanc/halo/service/upload/QnYunFileHandler.java\n@@ -0,0 +1,30 @@\n+package cc.ryanc.halo.service.upload;\n+\n+import cc.ryanc.halo.model.support.UploadResult;\n+import cc.ryanc.halo.service.OptionService;\n+import org.springframework.web.multipart.MultipartFile;\n+\n+/**\n+ * Qi niu yun file handler.\n+ *\n+ * @author johnniang\n+ * @date 3/27/19\n+ */\n+public class QnYunFileHandler implements FileHandler {\n+\n+    private final OptionService optionService;\n+\n+    public QnYunFileHandler(OptionService optionService) {\n+        this.optionService = optionService;\n+    }\n+\n+    @Override\n+    public UploadResult upload(MultipartFile file) {\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean delete(String key) {\n+        return false;\n+    }\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/upload/UpYunFileHandler.java b/src/main/java/cc/ryanc/halo/service/upload/UpYunFileHandler.java\n--- a/src/main/java/cc/ryanc/halo/service/upload/UpYunFileHandler.java\n+++ b/src/main/java/cc/ryanc/halo/service/upload/UpYunFileHandler.java\n@@ -0,0 +1,30 @@\n+package cc.ryanc.halo.service.upload;\n+\n+import cc.ryanc.halo.model.support.UploadResult;\n+import cc.ryanc.halo.service.OptionService;\n+import org.springframework.web.multipart.MultipartFile;\n+\n+/**\n+ * Up Yun file handler.\n+ *\n+ * @author johnniang\n+ * @date 3/27/19\n+ */\n+public class UpYunFileHandler implements FileHandler {\n+\n+    private final OptionService optionService;\n+\n+    public UpYunFileHandler(OptionService optionService) {\n+        this.optionService = optionService;\n+    }\n+\n+    @Override\n+    public UploadResult upload(MultipartFile file) {\n+        return null;\n+    }\n+\n+    @Override\n+    public boolean delete(String key) {\n+        return false;\n+    }\n+}",
    "output": "Build FileHandler basic structure"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/service/impl/FileServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/FileServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/FileServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/FileServiceImpl.java\n@@ -57,7 +57,7 @@ public class FileServiceImpl implements FileService {\n     private final MediaType imageType = MediaType.valueOf(\"image/*\");\n \n     public FileServiceImpl(HaloProperties haloProperties,\n-                           OptionService optionService) throws URISyntaxException {\n+                           OptionService optionService) {\n         this.optionService = optionService;\n \n         // Get work dir\n@@ -146,7 +146,7 @@ public UploadResult uploadToLocal(MultipartFile file) {\n             uploadResult.setSize(file.getSize());\n \n             // Check file type\n-            if (isImageType(file.getContentType())) {\n+            if (isImageType(uploadResult.getMediaType())) {\n                 // Upload a thumbnail\n                 String thumbnailBasename = basename + '-' + \"thumbnail\";\n                 String thumbnailSubFilePath = subDir + thumbnailBasename + '.' + extension;\n@@ -230,12 +230,15 @@ public UploadResult uploadToQnYun(MultipartFile file) {\n             UploadResult result = new UploadResult();\n             result.setFilename(putSet.getHash());\n             result.setFilePath(filePath);\n-            result.setThumbPath(StringUtils.isBlank(smallUrl) ? filePath : filePath + smallUrl);\n             result.setSuffix(FilenameUtils.getExtension(file.getOriginalFilename()));\n             result.setWidth(putSet.getWidth());\n             result.setHeight(putSet.getHeight());\n             result.setMediaType(MediaType.valueOf(Objects.requireNonNull(file.getContentType())));\n \n+            if (isImageType(result.getMediaType())) {\n+                result.setThumbPath(StringUtils.isBlank(smallUrl) ? filePath : filePath + smallUrl);\n+            }\n+\n             return result;\n         } catch (IOException e) {\n             if (e instanceof QiniuException) {",
    "output": "Handle thumbnail while media type of the file is an image type"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/listener/StartedListener.java b/src/main/java/cc/ryanc/halo/listener/StartedListener.java\n--- a/src/main/java/cc/ryanc/halo/listener/StartedListener.java\n+++ b/src/main/java/cc/ryanc/halo/listener/StartedListener.java\n@@ -142,20 +142,23 @@ private void cacheOwo() {\n      * Init internal themes\n      */\n     private void initThemes() {\n-        // Whether the blog is initialized\n-        Boolean isInstall = optionService.getByProperty(BlogProperties.IS_INSTALL, Boolean.class, false);\n+        // Whether the blog has initialized\n+        Boolean isInstalled = optionService.getByProperty(BlogProperties.IS_INSTALL, Boolean.class, false);\n         try {\n-            if (!isInstall) {\n-                File internalThemePath = new File(ResourceUtils.getURL(\"classpath:\").getPath(), \"templates/themes\");\n-                File[] internalThemes = internalThemePath.listFiles();\n-                if (null != internalThemes) {\n-                    for (File theme : internalThemes) {\n-                        FileUtil.copy(theme, themeService.getThemeBasePath(), true);\n-                    }\n+            if (isInstalled) {\n+                // Skip\n+                return;\n+            }\n+\n+            File internalThemePath = new File(ResourceUtils.getURL(ResourceUtils.CLASSPATH_URL_PREFIX).getPath(), \"templates/themes\");\n+            File[] internalThemes = internalThemePath.listFiles();\n+            if (null != internalThemes) {\n+                for (File theme : internalThemes) {\n+                    FileUtil.copy(theme, themeService.getThemeBasePath(), true);\n                 }\n             }\n         } catch (Exception e) {\n-            throw new RuntimeException(\"Init internal theme to user path error\");\n+            throw new RuntimeException(\"Init internal theme to user path error\", e);\n         }\n     }\n }",
    "output": "Beauty initThemes"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/listener/StartedListener.java b/src/main/java/cc/ryanc/halo/listener/StartedListener.java\n--- a/src/main/java/cc/ryanc/halo/listener/StartedListener.java\n+++ b/src/main/java/cc/ryanc/halo/listener/StartedListener.java\n@@ -143,9 +143,9 @@ private void cacheOwo() {\n      */\n     private void initThemes() {\n         // Whether the blog is initialized\n-        String isInstall = optionService.getByKeyOfNullable(BlogProperties.IS_INSTALL.getValue());\n+        Boolean isInstall = optionService.getByProperty(BlogProperties.IS_INSTALL, Boolean.class, false);\n         try {\n-            if (null == isInstall) {\n+            if (!isInstall) {\n                 File internalThemePath = new File(ResourceUtils.getURL(\"classpath:\").getPath(), \"templates/themes\");\n                 File[] internalThemes = internalThemePath.listFiles();\n                 if (null != internalThemes) {",
    "output": "Refactor StartedListener"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/listener/StartedListener.java b/src/main/java/cc/ryanc/halo/listener/StartedListener.java\n--- a/src/main/java/cc/ryanc/halo/listener/StartedListener.java\n+++ b/src/main/java/cc/ryanc/halo/listener/StartedListener.java\n@@ -8,6 +8,7 @@\n import cc.ryanc.halo.service.ThemeService;\n import cc.ryanc.halo.utils.HaloUtils;\n import cc.ryanc.halo.web.controller.content.base.BaseContentController;\n+import cn.hutool.core.io.FileUtil;\n import cn.hutool.core.util.StrUtil;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import freemarker.template.TemplateModelException;\n@@ -19,6 +20,7 @@\n import org.springframework.context.annotation.Configuration;\n import org.springframework.util.ResourceUtils;\n \n+import java.io.File;\n import java.io.IOException;\n import java.util.Collections;\n import java.util.List;\n@@ -63,6 +65,7 @@ public void onApplicationEvent(ApplicationStartedEvent event) {\n         this.cacheOwo();\n         this.getActiveTheme();\n         this.printStartInfo();\n+        this.initThemes();\n     }\n \n     /**\n@@ -134,4 +137,25 @@ private void cacheOwo() {\n             // TODO Consider to throw an exception\n         }\n     }\n+\n+    /**\n+     * Init internal themes\n+     */\n+    private void initThemes() {\n+        // Whether the blog is initialized\n+        String isInstall = optionService.getByKeyOfNullable(BlogProperties.IS_INSTALL.getValue());\n+        try {\n+            if (null == isInstall) {\n+                File internalThemePath = new File(ResourceUtils.getURL(\"classpath:\").getPath(), \"templates/themes\");\n+                File[] internalThemes = internalThemePath.listFiles();\n+                if (null != internalThemes) {\n+                    for (File theme : internalThemes) {\n+                        FileUtil.copy(theme, themeService.getThemeBasePath(), true);\n+                    }\n+                }\n+            }\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Init internal theme to user path error\");\n+        }\n+    }\n }",
    "output": "Create initTheme method for StartedListener"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/support/Theme.java b/src/main/java/cc/ryanc/halo/model/support/Theme.java\n--- a/src/main/java/cc/ryanc/halo/model/support/Theme.java\n+++ b/src/main/java/cc/ryanc/halo/model/support/Theme.java\n@@ -25,11 +25,6 @@ public class Theme implements Serializable {\n      */\n     private boolean hasOptions;\n \n-    /**\n-     * Is internal theme\n-     */\n-    private boolean isInternal;\n-\n     /**\n      * Theme properties\n      */\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/ThemeServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/ThemeServiceImpl.java\n@@ -145,7 +145,7 @@ public boolean isThemeExist(String theme) {\n      */\n     @Override\n     public File getThemeBasePath() {\n-        return new File(System.getProperties().getProperty(\"user.home\"), \".halo/templates/themes\");\n+        return new File(System.getProperties().getProperty(\"user.home\"), \"halo/templates/themes\");\n     }\n \n     /**",
    "output": "Fix errors caused by ThemeService"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/listener/StartedListener.java b/src/main/java/cc/ryanc/halo/listener/StartedListener.java\n--- a/src/main/java/cc/ryanc/halo/listener/StartedListener.java\n+++ b/src/main/java/cc/ryanc/halo/listener/StartedListener.java\n@@ -5,8 +5,8 @@\n import cc.ryanc.halo.model.support.HaloConst;\n import cc.ryanc.halo.model.support.Theme;\n import cc.ryanc.halo.service.OptionService;\n+import cc.ryanc.halo.service.ThemeService;\n import cc.ryanc.halo.utils.HaloUtils;\n-import cc.ryanc.halo.utils.ThemeUtils;\n import cc.ryanc.halo.web.controller.content.base.BaseContentController;\n import cn.hutool.core.util.StrUtil;\n import com.fasterxml.jackson.databind.ObjectMapper;\n@@ -53,6 +53,9 @@ public class StartedListener implements ApplicationListener<ApplicationStartedEv\n     @Autowired\n     private ObjectMapper objectMapper;\n \n+    @Autowired\n+    private ThemeService themeService;\n+\n     @Override\n     public void onApplicationEvent(ApplicationStartedEvent event) {\n         // save halo version to database\n@@ -66,7 +69,7 @@ public void onApplicationEvent(ApplicationStartedEvent event) {\n      * Cache themes to map\n      */\n     private void cacheThemes() {\n-        final List<Theme> themes = ThemeUtils.getThemes();\n+        final List<Theme> themes = themeService.getThemes();\n         if (null != themes) {\n             HaloConst.THEMES = themes;\n         }\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/base/BaseController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/base/BaseController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/base/BaseController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/base/BaseController.java\n@@ -1,7 +1,7 @@\n package cc.ryanc.halo.web.controller.admin.base;\n \n import cc.ryanc.halo.service.OptionService;\n-import cc.ryanc.halo.utils.ThemeUtils;\n+import cc.ryanc.halo.service.ThemeService;\n import freemarker.template.Configuration;\n import freemarker.template.TemplateModelException;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -22,13 +22,16 @@ public abstract class BaseController {\n     @Autowired\n     public OptionService optionService;\n \n+    @Autowired\n+    public ThemeService themeService;\n+\n     /**\n      * Clear all caches\n      */\n     public void refreshCache() {\n         try {\n             THEMES.clear();\n-            THEMES = ThemeUtils.getThemes();\n+            THEMES = themeService.getThemes();\n             configuration.setSharedVariable(\"options\", optionService.listOptions());\n         } catch (TemplateModelException e) {\n             e.printStackTrace();\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/core/CommonController.java b/src/main/java/cc/ryanc/halo/web/controller/core/CommonController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/core/CommonController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/core/CommonController.java\n@@ -3,10 +3,10 @@\n import cc.ryanc.halo.logging.Logger;\n import cc.ryanc.halo.model.entity.User;\n import cc.ryanc.halo.model.support.HaloConst;\n-import cc.ryanc.halo.utils.ThemeUtils;\n+import cc.ryanc.halo.service.ThemeService;\n import cc.ryanc.halo.web.controller.content.base.BaseContentController;\n import cn.hutool.core.text.StrBuilder;\n-import cn.hutool.json.JSONObject;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.web.servlet.error.ErrorController;\n import org.springframework.stereotype.Controller;\n import org.springframework.util.StringUtils;\n@@ -35,6 +35,9 @@ public class CommonController implements ErrorController {\n \n     private final Logger log = Logger.getLogger(getClass());\n \n+    @Autowired\n+    private ThemeService themeService;\n+\n     /**\n      * Handle error\n      *\n@@ -101,7 +104,7 @@ public String adminInternalError() {\n      */\n     @GetMapping(value = \"/404\")\n     public String contentNotFround() throws FileNotFoundException {\n-        if (!ThemeUtils.isTemplateExist(NOT_FROUND_TEMPLATE)) {\n+        if (!themeService.isTemplateExist(NOT_FROUND_TEMPLATE)) {\n             return \"common/error/404\";\n         }\n         StrBuilder path = new StrBuilder(\"themes/\");\n@@ -117,7 +120,7 @@ public String contentNotFround() throws FileNotFoundException {\n      */\n     @GetMapping(value = \"/500\")\n     public String contentInternalError() throws FileNotFoundException {\n-        if (!ThemeUtils.isTemplateExist(INTERNAL_ERROR_TEMPLATE)) {\n+        if (!themeService.isTemplateExist(INTERNAL_ERROR_TEMPLATE)) {\n             return \"common/error/500\";\n         }\n         StrBuilder path = new StrBuilder(\"themes/\");",
    "output": "Fix errors caused by ThemeService"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/service/ThemeService.java b/src/main/java/cc/ryanc/halo/service/ThemeService.java\n--- a/src/main/java/cc/ryanc/halo/service/ThemeService.java\n+++ b/src/main/java/cc/ryanc/halo/service/ThemeService.java\n@@ -0,0 +1,68 @@\n+package cc.ryanc.halo.service;\n+\n+import cc.ryanc.halo.model.support.Theme;\n+import cc.ryanc.halo.model.support.ThemeProperties;\n+\n+import java.io.File;\n+import java.util.List;\n+\n+/**\n+ * @author : RYAN0UP\n+ * @date : 2019/3/26\n+ */\n+public interface ThemeService {\n+\n+    /**\n+     * Gets all themes\n+     *\n+     * @return list of themes\n+     */\n+    List<Theme> getThemes();\n+\n+    /**\n+     * Gets theme templates\n+     *\n+     * @param theme theme\n+     * @return List<String>\n+     */\n+    List<String> getTemplates(String theme);\n+\n+    /**\n+     * Gets custom template, such as page_xxx.ftl, and xxx will be template name\n+     *\n+     * @param theme theme name\n+     * @return List\n+     */\n+    List<String> getCustomTpl(String theme);\n+\n+    /**\n+     * Judging whether template exists under the specified theme\n+     *\n+     * @param template template\n+     * @return boolean\n+     */\n+    boolean isTemplateExist(String template);\n+\n+    /**\n+     * Judging whether theme exists under template path\n+     *\n+     * @param theme theme name\n+     * @return boolean\n+     */\n+    boolean isThemeExist(String theme);\n+\n+    /**\n+     * Gets theme base path.\n+     *\n+     * @return File\n+     */\n+    File getThemeBasePath();\n+\n+    /**\n+     * Get theme Properties.\n+     *\n+     * @param path path\n+     * @return ThemeProperties\n+     */\n+    ThemeProperties getProperties(File path);\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/ThemeServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/ThemeServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/ThemeServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/ThemeServiceImpl.java\n@@ -1,34 +1,33 @@\n-package cc.ryanc.halo.utils;\n+package cc.ryanc.halo.service.impl;\n \n import cc.ryanc.halo.model.support.HaloConst;\n import cc.ryanc.halo.model.support.Theme;\n import cc.ryanc.halo.model.support.ThemeProperties;\n+import cc.ryanc.halo.service.ThemeService;\n import cc.ryanc.halo.web.controller.content.base.BaseContentController;\n import cn.hutool.core.text.StrBuilder;\n import cn.hutool.core.util.StrUtil;\n import cn.hutool.setting.dialect.Props;\n-import lombok.extern.slf4j.Slf4j;\n+import org.springframework.stereotype.Service;\n \n import java.io.File;\n-import java.io.FileNotFoundException;\n import java.util.ArrayList;\n import java.util.List;\n \n /**\n- * Theme utils\n- *\n  * @author : RYAN0UP\n  * @date : 2019/3/26\n  */\n-@Slf4j\n-public class ThemeUtils {\n+@Service\n+public class ThemeServiceImpl implements ThemeService {\n \n     /**\n      * Gets all themes\n      *\n      * @return list of themes\n      */\n-    public static List<Theme> getThemes() {\n+    @Override\n+    public List<Theme> getThemes() {\n         final List<Theme> themes = new ArrayList<>();\n         final File[] files = getThemeBasePath().listFiles();\n         try {\n@@ -62,7 +61,8 @@ public static List<Theme> getThemes() {\n      * @param theme theme\n      * @return List<String>\n      */\n-    public static List<String> getTemplates(String theme) {\n+    @Override\n+    public List<String> getTemplates(String theme) {\n         final List<String> templates = new ArrayList<>();\n         try {\n             final File themesPath = new File(getThemeBasePath(), theme);\n@@ -95,7 +95,8 @@ public static List<String> getTemplates(String theme) {\n      * @param theme theme name\n      * @return List\n      */\n-    public static List<String> getCustomTpl(String theme) throws FileNotFoundException {\n+    @Override\n+    public List<String> getCustomTpl(String theme) {\n         final List<String> templates = new ArrayList<>();\n         final File themePath = new File(getThemeBasePath(), theme);\n         final File[] themeFiles = themePath.listFiles();\n@@ -116,7 +117,8 @@ public static List<String> getCustomTpl(String theme) throws FileNotFoundExcepti\n      * @param template template\n      * @return boolean\n      */\n-    public static boolean isTemplateExist(String template) throws FileNotFoundException {\n+    @Override\n+    public boolean isTemplateExist(String template) {\n         StrBuilder templatePath = new StrBuilder(BaseContentController.THEME);\n         templatePath.append(\"/\");\n         templatePath.append(template);\n@@ -129,9 +131,9 @@ public static boolean isTemplateExist(String template) throws FileNotFoundExcept\n      *\n      * @param theme theme name\n      * @return boolean\n-     * @throws FileNotFoundException FileNotFoundException\n      */\n-    public static boolean isThemeExist(String theme) throws FileNotFoundException {\n+    @Override\n+    public boolean isThemeExist(String theme) {\n         File file = new File(getThemeBasePath(), theme);\n         return file.exists();\n     }\n@@ -141,7 +143,8 @@ public static boolean isThemeExist(String theme) throws FileNotFoundException {\n      *\n      * @return File\n      */\n-    private static File getThemeBasePath() {\n+    @Override\n+    public File getThemeBasePath() {\n         return new File(System.getProperties().getProperty(\"user.home\"), \".halo/templates/themes\");\n     }\n \n@@ -151,7 +154,8 @@ private static File getThemeBasePath() {\n      * @param path path\n      * @return ThemeProperties\n      */\n-    private static ThemeProperties getProperties(File path) {\n+    @Override\n+    public ThemeProperties getProperties(File path) {\n         File propertiesFile = new File(path, \"theme.properties\");\n         ThemeProperties properties = new ThemeProperties();\n         if (propertiesFile.exists()) {\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/ThemeController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/ThemeController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/ThemeController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/ThemeController.java\n@@ -3,7 +3,7 @@\n import cc.ryanc.halo.model.enums.BlogProperties;\n import cc.ryanc.halo.model.support.Theme;\n import cc.ryanc.halo.service.OptionService;\n-import cc.ryanc.halo.utils.ThemeUtils;\n+import cc.ryanc.halo.service.ThemeService;\n import cc.ryanc.halo.web.controller.content.base.BaseContentController;\n import freemarker.template.Configuration;\n import freemarker.template.TemplateModelException;\n@@ -29,10 +29,14 @@ public class ThemeController {\n \n     private final Configuration configuration;\n \n+    private final ThemeService themeService;\n+\n     public ThemeController(OptionService optionService,\n-                           Configuration configuration) {\n+                           Configuration configuration,\n+                           ThemeService themeService) {\n         this.optionService = optionService;\n         this.configuration = configuration;\n+        this.themeService = themeService;\n     }\n \n     /**\n@@ -43,7 +47,7 @@ public ThemeController(OptionService optionService,\n     @GetMapping\n     @ApiOperation(\"List all themes\")\n     public List<Theme> listAll() {\n-        return ThemeUtils.getThemes();\n+        return themeService.getThemes();\n     }\n \n     /**",
    "output": "Create ThemeService"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/config/properties/HaloProperties.java b/src/main/java/cc/ryanc/halo/config/properties/HaloProperties.java\n--- a/src/main/java/cc/ryanc/halo/config/properties/HaloProperties.java\n+++ b/src/main/java/cc/ryanc/halo/config/properties/HaloProperties.java\n@@ -21,4 +21,9 @@ public class HaloProperties {\n      * Production env. (Default is true)\n      */\n     private Boolean productionEnv = true;\n+\n+    /**\n+     * Work directory.\n+     */\n+    private String workDir = \"${user.home}/halo/\";\n }",
    "output": "Add workDir config"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/projection/TagPostCountProjection.java b/src/main/java/cc/ryanc/halo/model/projection/TagPostCountProjection.java\n--- a/src/main/java/cc/ryanc/halo/model/projection/TagPostCountProjection.java\n+++ b/src/main/java/cc/ryanc/halo/model/projection/TagPostCountProjection.java\n@@ -0,0 +1,28 @@\n+package cc.ryanc.halo.model.projection;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+\n+/**\n+ * Tag post count projection.\n+ *\n+ * @author johnniang\n+ * @date 3/26/19\n+ */\n+@Data\n+@AllArgsConstructor\n+@NoArgsConstructor\n+public class TagPostCountProjection {\n+\n+    /**\n+     * Post count.\n+     */\n+    private Long count;\n+\n+    /**\n+     * Tag id\n+     */\n+    private Integer tagId;\n+\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/repository/PostTagRepository.java b/src/main/java/cc/ryanc/halo/repository/PostTagRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/PostTagRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/PostTagRepository.java\n@@ -1,6 +1,7 @@\n package cc.ryanc.halo.repository;\n \n import cc.ryanc.halo.model.entity.PostTag;\n+import cc.ryanc.halo.model.projection.TagPostCountProjection;\n import cc.ryanc.halo.repository.base.BaseRepository;\n import org.springframework.data.jpa.repository.Query;\n import org.springframework.lang.NonNull;\n@@ -80,4 +81,23 @@ public interface PostTagRepository extends BaseRepository<PostTag, Integer> {\n      */\n     @NonNull\n     List<PostTag> deleteByTagId(@NonNull Integer tagId);\n+\n+    /**\n+     * Finds post count by tag id collection.\n+     *\n+     * @param tagIds tag id collection must not be null\n+     * @return a list of tag post count projection\n+     */\n+    @Query(\"select new cc.ryanc.halo.model.projection.TagPostCountProjection(count(pt.postId), pt.tagId) from PostTag pt where pt.tagId in ?1 group by pt.tagId\")\n+    @NonNull\n+    List<TagPostCountProjection> findPostCountByTagIds(@NonNull Iterable<Integer> tagIds);\n+\n+    /**\n+     * Finds post count of tag.\n+     *\n+     * @return a list of tag post count projection\n+     */\n+    @Query(\"select new cc.ryanc.halo.model.projection.TagPostCountProjection(count(pt.postId), pt.tagId) from PostTag pt group by pt.tagId\")\n+    @NonNull\n+    List<TagPostCountProjection> findPostCount();\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/PostTagServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/PostTagServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/PostTagServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/PostTagServiceImpl.java\n@@ -4,6 +4,7 @@\n import cc.ryanc.halo.model.entity.Post;\n import cc.ryanc.halo.model.entity.PostTag;\n import cc.ryanc.halo.model.entity.Tag;\n+import cc.ryanc.halo.model.projection.TagPostCountProjection;\n import cc.ryanc.halo.repository.PostRepository;\n import cc.ryanc.halo.repository.PostTagRepository;\n import cc.ryanc.halo.repository.TagRepository;\n@@ -59,9 +60,16 @@ public List<TagWithCountOutputDTO> listTagWithCountDtos(Sort sort) {\n         // Find all tags\n         List<Tag> tags = tagRepository.findAll(sort);\n \n+        // Find all post count\n+        Map<Integer, Long> tagPostCountMap = ServiceUtils.convertToMap(postTagRepository.findPostCount(), TagPostCountProjection::getTagId, TagPostCountProjection::getCount);\n+\n         // Find post count\n         return tags.stream().map(\n-                tag -> new TagWithCountOutputDTO().<TagWithCountOutputDTO>convertFrom(tag)\n+                tag -> {\n+                    TagWithCountOutputDTO tagWithCountOutputDTO = new TagWithCountOutputDTO().convertFrom(tag);\n+                    tagWithCountOutputDTO.setPostCount(tagPostCountMap.getOrDefault(tag.getId(), 0L));\n+                    return tagWithCountOutputDTO;\n+                }\n         ).collect(Collectors.toList());\n     }\n ",
    "output": "Fix tag count fetch feature"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/listener/StartedListener.java b/src/main/java/cc/ryanc/halo/listener/StartedListener.java\n--- a/src/main/java/cc/ryanc/halo/listener/StartedListener.java\n+++ b/src/main/java/cc/ryanc/halo/listener/StartedListener.java\n@@ -88,11 +88,11 @@ private void getActiveTheme() {\n     private void printStartInfo() {\n         String blogUrl = getBaseUrl();\n \n-        log.info(\"Halo started at    {}\", blogUrl);\n+        log.info(\"Halo started at         {}\", blogUrl);\n         // TODO admin may be changeable\n-        log.info(\"Halo admin is at   {}/admin\", blogUrl);\n+        log.info(\"Halo admin started at   {}/admin\", blogUrl);\n         if (!haloProperties.getDocDisabled()) {\n-            log.debug(\"Halo doc enable at {}/swagger-ui.html\", blogUrl);\n+            log.debug(\"Halo doc was enable at  {}/swagger-ui.html\", blogUrl);\n         }\n     }\n \n\ndiff --git a/src/main/java/cc/ryanc/halo/model/params/TagParam.java b/src/main/java/cc/ryanc/halo/model/params/TagParam.java\n--- a/src/main/java/cc/ryanc/halo/model/params/TagParam.java\n+++ b/src/main/java/cc/ryanc/halo/model/params/TagParam.java\n@@ -3,11 +3,9 @@\n import cc.ryanc.halo.model.dto.base.InputConverter;\n import cc.ryanc.halo.model.entity.Tag;\n import cc.ryanc.halo.utils.HaloUtils;\n-import cc.ryanc.halo.utils.SlugUtils;\n+import cn.hutool.core.util.URLUtil;\n import lombok.Data;\n-import org.apache.commons.lang3.RandomUtils;\n import org.apache.commons.lang3.StringUtils;\n-import org.springframework.util.Assert;\n \n import javax.validation.constraints.NotBlank;\n import javax.validation.constraints.Size;\n@@ -32,7 +30,7 @@ public class TagParam implements InputConverter<Tag> {\n     public Tag convertTo() {\n         if (StringUtils.isBlank(slugName)) {\n             // Handle slug name\n-            slugName = SlugUtils.slugify(name);\n+            slugName = URLUtil.normalize(name);\n         }\n \n         slugName = HaloUtils.initializeUrlIfBlank(slugName);\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/TagController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/TagController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/TagController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/TagController.java\n@@ -58,24 +58,38 @@ public TagOutputDTO createTag(@Valid @RequestBody TagParam tagParam) {\n     /**\n      * Get tag by id\n      *\n-     * @param id id\n+     * @param tagId tag id\n      * @return TagOutputDTO\n      */\n-    @GetMapping(\"{id:\\\\d+}\")\n+    @GetMapping(\"{tagId:\\\\d+}\")\n     @ApiOperation(\"Get tag detail by id\")\n-    public TagOutputDTO getBy(@PathVariable(\"id\") Integer id) {\n-        return new TagOutputDTO().convertFrom(tagService.getById(id));\n+    public TagOutputDTO getBy(@PathVariable(\"tagId\") Integer tagId) {\n+        return new TagOutputDTO().convertFrom(tagService.getById(tagId));\n+    }\n+\n+    @PutMapping(\"{tagId:\\\\d+}\")\n+    @ApiOperation(\"Updates tag\")\n+    public TagOutputDTO updateBy(@PathVariable(\"tagId\") Integer tagId,\n+                                 @Valid @RequestBody TagParam tagParam) {\n+        // Get old tag\n+        Tag tag = tagService.getById(tagId);\n+\n+        // Update tag\n+        tagParam.update(tag);\n+\n+        // Update tag\n+        return new TagOutputDTO().convertFrom(tagService.update(tag));\n     }\n \n     /**\n      * Delete tag by id.\n      *\n-     * @param id id\n+     * @param tagId tag id\n      */\n-    @DeleteMapping(\"{id:\\\\d+}\")\n+    @DeleteMapping(\"{tagId:\\\\d+}\")\n     @ApiOperation(\"Delete tag by id\")\n-    public void deletePermanently(@PathVariable(\"id\") Integer id) {\n-        tagService.removeById(id);\n-        postTagService.removeByTagId(id);\n+    public void deletePermanently(@PathVariable(\"tagId\") Integer tagId) {\n+        tagService.removeById(tagId);\n+        postTagService.removeByTagId(tagId);\n     }\n }",
    "output": "Complete tag update api"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/CommentController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/CommentController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/CommentController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/CommentController.java\n@@ -70,7 +70,7 @@ public CommentOutputDTO createBy(@Valid @RequestBody CommentParam commentParam,\n     }\n \n     @PutMapping(\"{commentId:\\\\d+}/status/{status}\")\n-    @ApiOperation(\"Update comment status\")\n+    @ApiOperation(\"Updates comment status\")\n     public CommentOutputDTO updateStatusBy(@PathVariable(\"commentId\") Long commentId,\n                                            @PathVariable(\"status\") CommentStatus status) {\n         // Update comment status\n@@ -80,6 +80,7 @@ public CommentOutputDTO updateStatusBy(@PathVariable(\"commentId\") Long commentId\n     }\n \n     @DeleteMapping(\"{commentId:\\\\d+}\")\n+    @ApiOperation(\"Deletes comment permanently and recursively\")\n     public CommentOutputDTO deleteBy(@PathVariable(\"commentId\") Long commentId) {\n         // Get comment by id\n         Comment comment = commentService.getById(commentId);\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/GalleryController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/GalleryController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/GalleryController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/GalleryController.java\n@@ -39,23 +39,23 @@ public List<GalleryOutputDTO> listGalleries(@SortDefault(sort = \"updateTime\", di\n     /**\n      * Get gallery by id.\n      *\n-     * @param id gallery id\n+     * @param galleryId gallery id\n      * @return GalleryOutputDTO\n      */\n-    @GetMapping(\"{id:\\\\d+}\")\n+    @GetMapping(\"{galleryId:\\\\d+}\")\n     @ApiOperation(\"Get gallery detail by id\")\n-    public GalleryOutputDTO getBy(@PathVariable(\"id\") Integer id) {\n-        return new GalleryOutputDTO().convertFrom(galleryService.getById(id));\n+    public GalleryOutputDTO getBy(@PathVariable(\"galleryId\") Integer galleryId) {\n+        return new GalleryOutputDTO().convertFrom(galleryService.getById(galleryId));\n     }\n \n     /**\n      * Delete gallery by id.\n      *\n-     * @param id id\n+     * @param galleryId gallery id\n      */\n-    @DeleteMapping(\"{id:\\\\d+}\")\n+    @DeleteMapping(\"{galleryId:\\\\d+}\")\n     @ApiOperation(\"Delete gallery by id\")\n-    public void deletePermanently(@PathVariable(\"id\") Integer id) {\n-        galleryService.removeById(id);\n+    public void deletePermanently(@PathVariable(\"galleryId\") Integer galleryId) {\n+        galleryService.removeById(galleryId);\n     }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/PostController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/PostController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/PostController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/PostController.java\n@@ -63,9 +63,9 @@ public List<PostMinimalOutputDTO> pageLatest(@RequestParam(name = \"top\", default\n     @GetMapping(\"status/{status}\")\n     @ApiOperation(\"Gets a page of post by post status\")\n     public Page<? extends PostSimpleOutputDTO> pageByStatus(@PathVariable(name = \"status\") PostStatus status,\n-                                                            @RequestParam(value = \"more_info\", required = false, defaultValue = \"false\") Boolean moreInfo,\n+                                                            @RequestParam(value = \"more\", required = false, defaultValue = \"false\") Boolean more,\n                                                             @PageableDefault(sort = \"updateTime\", direction = DESC) Pageable pageable) {\n-        if (moreInfo) {\n+        if (more) {\n             return postService.pageListVoBy(status, pageable);\n         }\n         return postService.pageSimpleDtoByStatus(status, pageable);\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/TagController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/TagController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/TagController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/TagController.java\n@@ -1,7 +1,6 @@\n package cc.ryanc.halo.web.controller.admin.api;\n \n import cc.ryanc.halo.model.dto.TagOutputDTO;\n-import cc.ryanc.halo.model.dto.TagWithCountOutputDTO;\n import cc.ryanc.halo.model.entity.Tag;\n import cc.ryanc.halo.model.params.TagParam;\n import cc.ryanc.halo.service.PostTagService;\n@@ -36,13 +35,12 @@ public TagController(TagService tagService,\n         this.postTagService = postTagService;\n     }\n \n-    @GetMapping(\"/addition\")\n-    public List<TagWithCountOutputDTO> listTagsWithCount(@SortDefault(sort = \"updateTime\", direction = Sort.Direction.DESC) Sort sort) {\n-        return postTagService.listTagWithCountDtos(sort);\n-    }\n-\n     @GetMapping\n-    public List<TagOutputDTO> listTags(@SortDefault(sort = \"updateTime\", direction = Sort.Direction.DESC) Sort sort) {\n+    public List<? extends TagOutputDTO> listTags(@SortDefault(sort = \"updateTime\", direction = Sort.Direction.DESC) Sort sort,\n+                                                 @RequestParam(name = \"more\", required = false, defaultValue = \"false\") Boolean more) {\n+        if (more) {\n+            return postTagService.listTagWithCountDtos(sort);\n+        }\n         return tagService.convertTo(tagService.listAll(sort));\n     }\n ",
    "output": "Refactor listTags api"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/CommentController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/CommentController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/CommentController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/CommentController.java\n@@ -71,12 +71,22 @@ public CommentOutputDTO createBy(@Valid @RequestBody CommentParam commentParam,\n \n     @PutMapping(\"{commentId:\\\\d+}/status/{status}\")\n     @ApiOperation(\"Update comment status\")\n-    public CommentOutputDTO deleteBy(@PathVariable(\"commentId\") Long commentId,\n-                                     @PathVariable(\"status\") CommentStatus status) {\n+    public CommentOutputDTO updateStatusBy(@PathVariable(\"commentId\") Long commentId,\n+                                           @PathVariable(\"status\") CommentStatus status) {\n         // Update comment status\n         Comment updatedComment = commentService.updateStatus(commentId, status);\n \n         return new CommentOutputDTO().convertFrom(updatedComment);\n     }\n \n+    @DeleteMapping(\"{commentId:\\\\d+}\")\n+    public CommentOutputDTO deleteBy(@PathVariable(\"commentId\") Long commentId) {\n+        // Get comment by id\n+        Comment comment = commentService.getById(commentId);\n+\n+        // Remove it\n+        commentService.remove(comment);\n+\n+        return new CommentOutputDTO().convertFrom(comment);\n+    }\n }",
    "output": "Complete delete comment api"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/service/CommentService.java b/src/main/java/cc/ryanc/halo/service/CommentService.java\n--- a/src/main/java/cc/ryanc/halo/service/CommentService.java\n+++ b/src/main/java/cc/ryanc/halo/service/CommentService.java\n@@ -27,7 +27,7 @@ public interface CommentService extends CrudService<Comment, Long> {\n      * %s: parent commentator author name\n      * %s: comment content\n      */\n-    String COMMENT_TEMPLATE = \"<a href='#comment-id-%d>@%s</a> %s\";\n+    String COMMENT_TEMPLATE = \"<a href='#comment-id-%d'>@%s</a> %s\";\n \n     /**\n      * Lists latest comments.\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/CommentServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/CommentServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/CommentServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/CommentServiceImpl.java\n@@ -219,7 +219,11 @@ private void concreteTree(CommentVO parentComment, List<Comment> comments, Compa\n                 // Convert to comment vo\n                 CommentVO commentVO = new CommentVO().convertFrom(comment);\n \n-                // TODO Add template\n+                // Add additional content\n+                if (commentVO.getParentId() > 0) {\n+                    // TODO Provide an optional additional content\n+                    commentVO.setContent(String.format(COMMENT_TEMPLATE, parentComment.getId(), parentComment.getAuthor(), commentVO.getContent()));\n+                }\n \n                 // Init children container\n                 if (parentComment.getChildren() == null) {",
    "output": "Add additional content in comment content"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/vo/CommentListVO.java b/src/main/java/cc/ryanc/halo/model/vo/CommentListVO.java\n--- a/src/main/java/cc/ryanc/halo/model/vo/CommentListVO.java\n+++ b/src/main/java/cc/ryanc/halo/model/vo/CommentListVO.java\n@@ -14,7 +14,7 @@\n @Data\n @ToString\n @EqualsAndHashCode(callSuper = true)\n-public class CommentVO extends CommentOutputDTO {\n+public class CommentListVO extends CommentOutputDTO {\n \n     private PostMinimalOutputDTO post;\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/CommentService.java b/src/main/java/cc/ryanc/halo/service/CommentService.java\n--- a/src/main/java/cc/ryanc/halo/service/CommentService.java\n+++ b/src/main/java/cc/ryanc/halo/service/CommentService.java\n@@ -3,7 +3,7 @@\n import cc.ryanc.halo.model.entity.Comment;\n import cc.ryanc.halo.model.enums.CommentStatus;\n import cc.ryanc.halo.model.params.CommentParam;\n-import cc.ryanc.halo.model.vo.CommentVO;\n+import cc.ryanc.halo.model.vo.CommentListVO;\n import cc.ryanc.halo.service.base.CrudService;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.Pageable;\n@@ -36,7 +36,7 @@ public interface CommentService extends CrudService<Comment, Long> {\n      * @return a page of comments\n      */\n     @NonNull\n-    Page<CommentVO> pageLatest(int top);\n+    Page<CommentListVO> pageLatest(int top);\n \n     /**\n      * Pages comments.\n@@ -46,7 +46,7 @@ public interface CommentService extends CrudService<Comment, Long> {\n      * @return a page of comment\n      */\n     @NonNull\n-    Page<CommentVO> pageBy(@NonNull CommentStatus status, @NonNull Pageable pageable);\n+    Page<CommentListVO> pageBy(@NonNull CommentStatus status, @NonNull Pageable pageable);\n \n     /**\n      * Lists comments by post id.\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/CommentServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/CommentServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/CommentServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/CommentServiceImpl.java\n@@ -8,7 +8,7 @@\n import cc.ryanc.halo.model.enums.CommentStatus;\n import cc.ryanc.halo.model.params.CommentParam;\n import cc.ryanc.halo.model.projection.CommentCountProjection;\n-import cc.ryanc.halo.model.vo.CommentVO;\n+import cc.ryanc.halo.model.vo.CommentListVO;\n import cc.ryanc.halo.repository.CommentRepository;\n import cc.ryanc.halo.repository.PostRepository;\n import cc.ryanc.halo.service.CommentService;\n@@ -59,7 +59,7 @@ public CommentServiceImpl(CommentRepository commentRepository,\n     }\n \n     @Override\n-    public Page<CommentVO> pageLatest(int top) {\n+    public Page<CommentListVO> pageLatest(int top) {\n         Assert.isTrue(top > 0, \"Top number must not be less than 0\");\n \n         // Build page request\n@@ -69,7 +69,7 @@ public Page<CommentVO> pageLatest(int top) {\n     }\n \n     @Override\n-    public Page<CommentVO> pageBy(CommentStatus status, Pageable pageable) {\n+    public Page<CommentListVO> pageBy(CommentStatus status, Pageable pageable) {\n         Assert.notNull(status, \"Comment status must not be null\");\n         Assert.notNull(pageable, \"Page info must not be null\");\n \n@@ -152,7 +152,7 @@ public Comment createBy(CommentParam commentParam, HttpServletRequest request) {\n      * @return a page of comment vo\n      */\n     @NonNull\n-    private Page<CommentVO> convertBy(@NonNull Page<Comment> commentPage) {\n+    private Page<CommentListVO> convertBy(@NonNull Page<Comment> commentPage) {\n         Assert.notNull(commentPage, \"Comment page must not be null\");\n \n         return new PageImpl<>(convertBy(commentPage.getContent()), commentPage.getPageable(), commentPage.getTotalElements());\n@@ -165,7 +165,7 @@ private Page<CommentVO> convertBy(@NonNull Page<Comment> commentPage) {\n      * @return a list of comment vo\n      */\n     @NonNull\n-    private List<CommentVO> convertBy(@Nullable List<Comment> comments) {\n+    private List<CommentListVO> convertBy(@Nullable List<Comment> comments) {\n         if (CollectionUtils.isEmpty(comments)) {\n             return Collections.emptyList();\n         }\n@@ -178,12 +178,12 @@ private List<CommentVO> convertBy(@Nullable List<Comment> comments) {\n \n         return comments.stream().map(comment -> {\n             // Convert to vo\n-            CommentVO commentVO = new CommentVO().convertFrom(comment);\n+            CommentListVO commentListVO = new CommentListVO().convertFrom(comment);\n \n             // Get post and set to the vo\n-            commentVO.setPost(new PostMinimalOutputDTO().convertFrom(postMap.get(comment.getPostId())));\n+            commentListVO.setPost(new PostMinimalOutputDTO().convertFrom(postMap.get(comment.getPostId())));\n \n-            return commentVO;\n+            return commentListVO;\n         }).collect(Collectors.toList());\n     }\n \n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/CommentController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/CommentController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/CommentController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/CommentController.java\n@@ -3,7 +3,7 @@\n import cc.ryanc.halo.model.dto.CommentOutputDTO;\n import cc.ryanc.halo.model.enums.CommentStatus;\n import cc.ryanc.halo.model.params.CommentParam;\n-import cc.ryanc.halo.model.vo.CommentVO;\n+import cc.ryanc.halo.model.vo.CommentListVO;\n import cc.ryanc.halo.service.CommentService;\n import cc.ryanc.halo.service.OptionService;\n import cc.ryanc.halo.service.PostService;\n@@ -45,18 +45,19 @@ public CommentController(CommentService commentService,\n \n     @GetMapping(\"latest\")\n     @ApiOperation(\"Pages latest comments\")\n-    public List<CommentVO> pageLatest(@RequestParam(name = \"top\", defaultValue = \"10\") int top) {\n+    public List<CommentListVO> pageLatest(@RequestParam(name = \"top\", defaultValue = \"10\") int top) {\n         return commentService.pageLatest(top).getContent();\n     }\n \n     @GetMapping(\"status/{status}\")\n-    public Page<CommentVO> pageBy(@PageableDefault(sort = \"updateTime\", direction = DESC) Pageable pageable,\n-                                  @PathVariable(\"status\") CommentStatus status) {\n+    public Page<CommentListVO> pageBy(@PageableDefault(sort = \"updateTime\", direction = DESC) Pageable pageable,\n+                                      @PathVariable(\"status\") CommentStatus status) {\n         return commentService.pageBy(status, pageable);\n     }\n \n     @PostMapping\n     public CommentOutputDTO createBy(@Valid @RequestBody CommentParam commentParam, HttpServletRequest request) {\n         return new CommentOutputDTO().convertFrom(commentService.createBy(commentParam, request));\n     }\n+\n }",
    "output": "Rename CommentVO to CommentListVO"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/service/impl/CommentServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/CommentServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/CommentServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/CommentServiceImpl.java\n@@ -103,39 +103,28 @@ public Comment createBy(CommentParam commentParam, HttpServletRequest request) {\n         Assert.notNull(commentParam, \"Comment param must not be null\");\n         Assert.notNull(request, \"Http servlet request must not be null\");\n \n-        // Post id must exist\n-        boolean postExist = postRepository.existsById(commentParam.getPostId());\n-        if (!postExist) {\n+        if (!postRepository.existsById(commentParam.getPostId())) {\n+            // Post id must exist\n             log.error(\"Post: [{}] was not found\", commentParam.getPostId());\n             throw new NotFoundException(\"The post was not found\").setErrorData(commentParam.getPostId());\n         }\n \n+        if (commentParam.getParentId() != null && commentParam.getParentId() > 0) {\n+            // Validate the comment parent id\n+            mustExistById(commentParam.getParentId());\n+        }\n+\n         // Convert to comment\n         Comment comment = commentParam.convertTo();\n \n         // Set some default value\n+        comment.setContent(OwoUtil.parseOwo(formatContent(comment.getContent())));\n         comment.setIpAddress(ServletUtil.getClientIP(request));\n         // TODO Check user login status and set this field\n         comment.setIsAdmin(false);\n         comment.setAuthor(HtmlUtils.htmlEscape(comment.getAuthor()));\n         comment.setGavatarMd5(SecureUtil.md5(comment.getEmail()));\n \n-        if (comment.getParentId() != null && comment.getParentId() > 0) {\n-            // Validate the comment parent id\n-            Comment parentComment = getById(comment.getParentId());\n-\n-            // Format content and set it\n-            String formattedContent = String.format(COMMENT_TEMPLATE,\n-                    parentComment.getId(),\n-                    parentComment.getAuthor(),\n-                    OwoUtil.parseOwo(formatContent(comment.getContent())));\n-            comment.setContent(formattedContent);\n-        } else {\n-            comment.setParentId(0L);\n-            // Top comment\n-            comment.setContent(OwoUtil.parseOwo(formatContent(comment.getContent())));\n-        }\n-\n         if (StringUtils.isNotBlank(comment.getAuthorUrl())) {\n             // Normalize the author url and set it\n             comment.setAuthorUrl(URLUtil.normalize(comment.getAuthorUrl()));",
    "output": "Remove comment template splicing"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/Application.java b/src/main/java/cc/ryanc/halo/Application.java\n--- a/src/main/java/cc/ryanc/halo/Application.java\n+++ b/src/main/java/cc/ryanc/halo/Application.java\n@@ -28,7 +28,7 @@ public class Application {\n \n     public static void main(String[] args) {\n         // Customize the spring config location\n-        System.setProperty(\"spring.config.location\", \"classpath:/,classpath:/config/,file:./,file:./config/,file:${user.home}/halo/,file:${user.home}/halo-dev\");\n+        System.setProperty(\"spring.config.additional-location\", \"file:${user.home}/halo/,file:${user.home}/halo-dev/\");\n \n         // Run application\n         SpringApplication.run(Application.class, args);",
    "output": "Fix spring.config.additional-location default config again"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/Application.java b/src/main/java/cc/ryanc/halo/Application.java\n--- a/src/main/java/cc/ryanc/halo/Application.java\n+++ b/src/main/java/cc/ryanc/halo/Application.java\n@@ -27,7 +27,8 @@ public class Application {\n     private final static Logger LOG = Logger.getLogger(Application.class);\n \n     public static void main(String[] args) {\n-        System.setProperty(\"spring.config.additional-location\", \"file:${user.home}/halo/\");\n+        // Customize the spring config location\n+        System.setProperty(\"spring.config.location\", \"classpath:/,classpath:/config/,file:./,file:./config/,file:${user.home}/halo/,file:${user.home}/halo-dev\");\n \n         // Run application\n         SpringApplication.run(Application.class, args);",
    "output": "Fix spring.config.additional-location default config"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/config/WebMvcAutoConfiguration.java b/src/main/java/cc/ryanc/halo/config/WebMvcAutoConfiguration.java\n--- a/src/main/java/cc/ryanc/halo/config/WebMvcAutoConfiguration.java\n+++ b/src/main/java/cc/ryanc/halo/config/WebMvcAutoConfiguration.java\n@@ -18,15 +18,14 @@\n import org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;\n import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\n import org.springframework.web.method.support.HandlerMethodArgumentResolver;\n-import org.springframework.web.servlet.LocaleResolver;\n import org.springframework.web.servlet.config.annotation.EnableWebMvc;\n import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\n+import org.springframework.web.servlet.config.annotation.ViewResolverRegistry;\n import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n-import org.springframework.web.servlet.i18n.LocaleChangeInterceptor;\n-import org.springframework.web.servlet.i18n.SessionLocaleResolver;\n+import org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer;\n+import org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver;\n \n import java.util.List;\n-import java.util.Locale;\n \n /**\n  * <pre>\n@@ -99,4 +98,25 @@ public void addResourceHandlers(ResourceHandlerRegistry registry) {\n     public void addFormatters(FormatterRegistry registry) {\n         registry.addConverterFactory(new StringToEnumConverterFactory());\n     }\n+\n+    @Bean\n+    public FreeMarkerConfigurer freemarkerConfig() {\n+        FreeMarkerConfigurer configurer = new FreeMarkerConfigurer();\n+        configurer.setTemplateLoaderPaths(\"file:///\" + System.getProperties().getProperty(\"user.home\") + \"/halo/templates/\", \"classpath:/templates/\");\n+        configurer.setDefaultEncoding(\"UTF-8\");\n+        return configurer;\n+    }\n+\n+    @Override\n+    public void configureViewResolvers(ViewResolverRegistry registry) {\n+        FreeMarkerViewResolver resolver = new FreeMarkerViewResolver();\n+        resolver.setAllowRequestOverride(false);\n+        resolver.setCache(false);\n+        resolver.setExposeRequestAttributes(false);\n+        resolver.setExposeSessionAttributes(false);\n+        resolver.setExposeSpringMacroHelpers(true);\n+        resolver.setSuffix(\".ftl\");\n+        resolver.setContentType(\"text/html; charset=UTF-8\");\n+        registry.viewResolver(resolver);\n+    }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/utils/ThemeUtils.java b/src/main/java/cc/ryanc/halo/utils/ThemeUtils.java\n--- a/src/main/java/cc/ryanc/halo/utils/ThemeUtils.java\n+++ b/src/main/java/cc/ryanc/halo/utils/ThemeUtils.java\n@@ -74,7 +74,6 @@ private static List<Theme> getThemesByPath(File themesBasePath, boolean isIntern\n                             theme.setHasUpdate(false);\n                         }\n                         theme.setProperties(getProperties(new File(themesBasePath,file.getName())));\n-                        theme.setInternal(isInternal);\n                         themes.add(theme);\n                     }\n                 }",
    "output": "Config freemarker template loader"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/Application.java b/src/main/java/cc/ryanc/halo/Application.java\n--- a/src/main/java/cc/ryanc/halo/Application.java\n+++ b/src/main/java/cc/ryanc/halo/Application.java\n@@ -27,6 +27,8 @@ public class Application {\n     private final static Logger LOG = Logger.getLogger(Application.class);\n \n     public static void main(String[] args) {\n+        System.setProperty(\"spring.config.additional-location\", \"file:${user.home}/halo/\");\n+\n         // Run application\n         SpringApplication.run(Application.class, args);\n     }\n\ndiff --git a/src/main/java/cc/ryanc/halo/listener/StartedListener.java b/src/main/java/cc/ryanc/halo/listener/StartedListener.java\n--- a/src/main/java/cc/ryanc/halo/listener/StartedListener.java\n+++ b/src/main/java/cc/ryanc/halo/listener/StartedListener.java\n@@ -86,9 +86,10 @@ private void getActiveTheme() {\n     }\n \n     private void printStartInfo() {\n-        String blogUrl = getBlogUrl();\n+        String blogUrl = getBaseUrl();\n \n         log.info(\"Halo started at    {}\", blogUrl);\n+        // TODO admin may be changeable\n         log.info(\"Halo admin is at   {}/admin\", blogUrl);\n         if (!haloProperties.getDocDisabled()) {\n             log.debug(\"Halo doc enable at {}/swagger-ui.html\", blogUrl);\n@@ -100,7 +101,7 @@ private void printStartInfo() {\n      *\n      * @return blog url (If blog url isn't present, current machine IP address will be default)\n      */\n-    private String getBlogUrl() {\n+    private String getBaseUrl() {\n         // Get server port\n         String serverPort = applicationContext.getEnvironment().getProperty(\"server.port\", \"8080\");\n ",
    "output": "Add spring.config.additional-location default config"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/listener/StartedListener.java b/src/main/java/cc/ryanc/halo/listener/StartedListener.java\n--- a/src/main/java/cc/ryanc/halo/listener/StartedListener.java\n+++ b/src/main/java/cc/ryanc/halo/listener/StartedListener.java\n@@ -9,7 +9,7 @@\n import cc.ryanc.halo.utils.ThemeUtils;\n import cc.ryanc.halo.web.controller.content.base.BaseContentController;\n import cn.hutool.core.util.StrUtil;\n-import cn.hutool.json.JSONUtil;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n import freemarker.template.TemplateModelException;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -19,13 +19,12 @@\n import org.springframework.context.annotation.Configuration;\n import org.springframework.util.ResourceUtils;\n \n-import java.io.File;\n-import java.io.FileNotFoundException;\n-import java.nio.charset.Charset;\n+import java.io.IOException;\n+import java.util.Collections;\n import java.util.List;\n+import java.util.Map;\n \n import static cc.ryanc.halo.model.support.HaloConst.DEFAULT_THEME_NAME;\n-import static org.springframework.util.ResourceUtils.CLASSPATH_URL_PREFIX;\n \n /**\n  * <pre>\n@@ -51,6 +50,9 @@ public class StartedListener implements ApplicationListener<ApplicationStartedEv\n     @Autowired\n     private OptionService optionService;\n \n+    @Autowired\n+    private ObjectMapper objectMapper;\n+\n     @Override\n     public void onApplicationEvent(ApplicationStartedEvent event) {\n         // save halo version to database\n@@ -84,9 +86,6 @@ private void getActiveTheme() {\n     }\n \n     private void printStartInfo() {\n-        // Get server port\n-        String serverPort = applicationContext.getEnvironment().getProperty(\"server.port\");\n-\n         String blogUrl = getBlogUrl();\n \n         log.info(\"Halo started at    {}\", blogUrl);\n@@ -103,7 +102,7 @@ private void printStartInfo() {\n      */\n     private String getBlogUrl() {\n         // Get server port\n-        String serverPort = applicationContext.getEnvironment().getProperty(\"server.port\");\n+        String serverPort = applicationContext.getEnvironment().getProperty(\"server.port\", \"8080\");\n \n         String blogUrl = optionService.getByPropertyOfNullable(BlogProperties.BLOG_URL);\n \n@@ -121,10 +120,14 @@ private String getBlogUrl() {\n      */\n     private void cacheOwo() {\n         try {\n-            File file = new File(ResourceUtils.getURL(CLASSPATH_URL_PREFIX).getPath(), \"static/halo-common/OwO/OwO.path.json\");\n-            HaloConst.OWO = JSONUtil.readJSONObject(file, Charset.forName(\"UTF-8\"));\n-        } catch (FileNotFoundException e) {\n-            e.printStackTrace();\n+            // The Map is LinkedHashMap\n+            @SuppressWarnings(\"unchecked\")\n+            Map<String, String> owoMap = objectMapper.readValue(ResourceUtils.getURL(\"classpath:static/halo-common/OwO/OwO.path.json\"), Map.class);\n+\n+            HaloConst.OWO_MAP = Collections.unmodifiableMap(owoMap);\n+        } catch (IOException e) {\n+            log.error(\"Failed to read owo json\", e);\n+            // TODO Consider to throw an exception\n         }\n     }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/support/HaloConst.java b/src/main/java/cc/ryanc/halo/model/support/HaloConst.java\n--- a/src/main/java/cc/ryanc/halo/model/support/HaloConst.java\n+++ b/src/main/java/cc/ryanc/halo/model/support/HaloConst.java\n@@ -2,6 +2,7 @@\n \n import cn.hutool.json.JSONObject;\n \n+import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n \n@@ -34,8 +35,14 @@ public class HaloConst {\n     /**\n      * All of the Owo\n      */\n+    @Deprecated\n     public static JSONObject OWO;\n \n+    /**\n+     * Owo map. (Unmodified)\n+     */\n+    public static Map<String, String> OWO_MAP = Collections.emptyMap();\n+\n     /**\n      * All of the themes\n      */\n\ndiff --git a/src/main/java/cc/ryanc/halo/utils/OwoUtil.java b/src/main/java/cc/ryanc/halo/utils/OwoUtil.java\n--- a/src/main/java/cc/ryanc/halo/utils/OwoUtil.java\n+++ b/src/main/java/cc/ryanc/halo/utils/OwoUtil.java\n@@ -1,8 +1,9 @@\n package cc.ryanc.halo.utils;\n \n import lombok.extern.slf4j.Slf4j;\n+import org.springframework.util.CollectionUtils;\n \n-import static cc.ryanc.halo.model.support.HaloConst.OWO;\n+import static cc.ryanc.halo.model.support.HaloConst.OWO_MAP;\n \n /**\n  * Owo util\n@@ -20,8 +21,12 @@ public class OwoUtil {\n      * @return picture address\n      */\n     public static String parseOwo(String content) {\n-        for (String key : OWO.keySet()) {\n-            content = content.replace(key, OWO.get(key).toString());\n+        if (CollectionUtils.isEmpty(OWO_MAP)) {\n+            return content;\n+        }\n+\n+        for (String key : OWO_MAP.keySet()) {\n+            content = content.replace(key, OWO_MAP.get(key).toString());\n         }\n         return content;\n     }",
    "output": "Refactor cache owo"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/repository/JournalRepository.java b/src/main/java/cc/ryanc/halo/repository/JournalRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/JournalRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/JournalRepository.java\n@@ -1,14 +1,14 @@\n package cc.ryanc.halo.repository;\n \n import cc.ryanc.halo.model.entity.Journal;\n-import cc.ryanc.halo.repository.base.BaseRepository;\n+import cc.ryanc.halo.repository.base.BasePostRepository;\n \n /**\n  * Journal repository.\n  *\n  * @author johnniang\n  * @date 3/22/19\n  */\n-public interface JournalRepository extends BaseRepository<Journal, Integer> {\n+public interface JournalRepository extends BasePostRepository<Journal> {\n \n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/repository/PageRepository.java b/src/main/java/cc/ryanc/halo/repository/PageRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/PageRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/PageRepository.java\n@@ -1,14 +1,14 @@\n package cc.ryanc.halo.repository;\n \n import cc.ryanc.halo.model.entity.Page;\n-import cc.ryanc.halo.repository.base.BaseRepository;\n+import cc.ryanc.halo.repository.base.BasePostRepository;\n \n /**\n  * Page repository.\n  *\n  * @author johnniang\n  * @date 3/22/19\n  */\n-public interface PageRepository extends BaseRepository<Page, Integer> {\n+public interface PageRepository extends BasePostRepository<Page> {\n \n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/repository/PostRepository.java b/src/main/java/cc/ryanc/halo/repository/PostRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/PostRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/PostRepository.java\n@@ -1,14 +1,8 @@\n package cc.ryanc.halo.repository;\n \n import cc.ryanc.halo.model.entity.Post;\n-import cc.ryanc.halo.model.enums.PostStatus;\n-import cc.ryanc.halo.repository.base.BaseRepository;\n-import org.springframework.data.domain.Page;\n-import org.springframework.data.domain.Pageable;\n+import cc.ryanc.halo.repository.base.BasePostRepository;\n import org.springframework.data.jpa.repository.JpaSpecificationExecutor;\n-import org.springframework.lang.NonNull;\n-\n-import java.util.Optional;\n \n \n /**\n@@ -17,48 +11,6 @@\n  * @author johnniang\n  * @author RYAN0UP\n  */\n-public interface PostRepository extends BaseRepository<Post, Integer>, JpaSpecificationExecutor<Post> {\n-\n-    /**\n-     * Finds posts by status and type.\n-     *\n-     * @param status   status\n-     * @param pageable pageable\n-     * @return Page<Post>\n-     */\n-    @NonNull\n-    Page<Post> findAllByStatus(@NonNull PostStatus status, @NonNull Pageable pageable);\n-\n-    /**\n-     * Counts posts by status and type.\n-     *\n-     * @param status status\n-     * @return posts count\n-     */\n-    long countByStatus(@NonNull PostStatus status);\n-\n-    /**\n-     * Count by post url.\n-     *\n-     * @param url post url must not be blank\n-     * @return the count\n-     */\n-    long countByUrl(@NonNull String url);\n-\n-    /**\n-     * Count by not url and post id not in.\n-     *\n-     * @param id  post id must not be null\n-     * @param url post url must not be null\n-     * @return the count\n-     */\n-    long countByIdNotAndUrl(@NonNull Integer id, @NonNull String url);\n+public interface PostRepository extends BasePostRepository<Post>, JpaSpecificationExecutor<Post> {\n \n-    /**\n-     * Get post by url\n-     *\n-     * @param url post url\n-     * @return Optional<Post>\n-     */\n-    Optional<Post> getByUrl(@NonNull String url);\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/repository/base/BasePostRepository.java b/src/main/java/cc/ryanc/halo/repository/base/BasePostRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/base/BasePostRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/base/BasePostRepository.java\n@@ -0,0 +1,64 @@\n+package cc.ryanc.halo.repository.base;\n+\n+import cc.ryanc.halo.model.entity.BasePost;\n+import cc.ryanc.halo.model.enums.PostStatus;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.repository.NoRepositoryBean;\n+import org.springframework.lang.NonNull;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Base post repository.\n+ *\n+ * @author johnniang\n+ * @date 3/22/19\n+ */\n+@NoRepositoryBean\n+public interface BasePostRepository<DOMAIN extends BasePost> extends BaseRepository<DOMAIN, Integer> {\n+\n+    /**\n+     * Finds posts by status and type.\n+     *\n+     * @param status   status\n+     * @param pageable pageable\n+     * @return Page<Post>\n+     */\n+    @NonNull\n+    Page<DOMAIN> findAllByStatus(@NonNull PostStatus status, @NonNull Pageable pageable);\n+\n+    /**\n+     * Counts posts by status and type.\n+     *\n+     * @param status status\n+     * @return posts count\n+     */\n+    long countByStatus(@NonNull PostStatus status);\n+\n+    /**\n+     * Count by post url.\n+     *\n+     * @param url post url must not be blank\n+     * @return the count\n+     */\n+    long countByUrl(@NonNull String url);\n+\n+    /**\n+     * Count by not url and post id not in.\n+     *\n+     * @param id  post id must not be null\n+     * @param url post url must not be null\n+     * @return the count\n+     */\n+    long countByIdNotAndUrl(@NonNull Integer id, @NonNull String url);\n+\n+    /**\n+     * Get post by url\n+     *\n+     * @param url post url\n+     * @return Optional<Post>\n+     */\n+    Optional<DOMAIN> getByUrl(@NonNull String url);\n+\n+}",
    "output": "Abstract PostRepository for Post, Page and Journal entities"
  },
  {
    "input": "diff --git a/.mvn/wrapper/MavenWrapperDownloader.java b/.mvn/wrapper/MavenWrapperDownloader.java\n--- a/.mvn/wrapper/MavenWrapperDownloader.java\n+++ b/.mvn/wrapper/MavenWrapperDownloader.java\n@@ -0,0 +1,114 @@\n+/*\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+*/\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.nio.channels.Channels;\n+import java.nio.channels.ReadableByteChannel;\n+import java.util.Properties;\n+\n+public class MavenWrapperDownloader {\n+\n+    /**\n+     * Default URL to download the maven-wrapper.jar from, if no 'downloadUrl' is provided.\n+     */\n+    private static final String DEFAULT_DOWNLOAD_URL =\n+            \"https://repo.maven.apache.org/maven2/io/takari/maven-wrapper/0.4.2/maven-wrapper-0.4.2.jar\";\n+\n+    /**\n+     * Path to the maven-wrapper.properties file, which might contain a downloadUrl property to\n+     * use instead of the default one.\n+     */\n+    private static final String MAVEN_WRAPPER_PROPERTIES_PATH =\n+            \".mvn/wrapper/maven-wrapper.properties\";\n+\n+    /**\n+     * Path where the maven-wrapper.jar will be saved to.\n+     */\n+    private static final String MAVEN_WRAPPER_JAR_PATH =\n+            \".mvn/wrapper/maven-wrapper.jar\";\n+\n+    /**\n+     * Name of the property which should be used to override the default download url for the wrapper.\n+     */\n+    private static final String PROPERTY_NAME_WRAPPER_URL = \"wrapperUrl\";\n+\n+    public static void main(String args[]) {\n+        System.out.println(\"- Downloader started\");\n+        File baseDirectory = new File(args[0]);\n+        System.out.println(\"- Using base directory: \" + baseDirectory.getAbsolutePath());\n+\n+        // If the maven-wrapper.properties exists, read it and check if it contains a custom\n+        // wrapperUrl parameter.\n+        File mavenWrapperPropertyFile = new File(baseDirectory, MAVEN_WRAPPER_PROPERTIES_PATH);\n+        String url = DEFAULT_DOWNLOAD_URL;\n+        if(mavenWrapperPropertyFile.exists()) {\n+            FileInputStream mavenWrapperPropertyFileInputStream = null;\n+            try {\n+                mavenWrapperPropertyFileInputStream = new FileInputStream(mavenWrapperPropertyFile);\n+                Properties mavenWrapperProperties = new Properties();\n+                mavenWrapperProperties.load(mavenWrapperPropertyFileInputStream);\n+                url = mavenWrapperProperties.getProperty(PROPERTY_NAME_WRAPPER_URL, url);\n+            } catch (IOException e) {\n+                System.out.println(\"- ERROR loading '\" + MAVEN_WRAPPER_PROPERTIES_PATH + \"'\");\n+            } finally {\n+                try {\n+                    if(mavenWrapperPropertyFileInputStream != null) {\n+                        mavenWrapperPropertyFileInputStream.close();\n+                    }\n+                } catch (IOException e) {\n+                    // Ignore ...\n+                }\n+            }\n+        }\n+        System.out.println(\"- Downloading from: : \" + url);\n+\n+        File outputFile = new File(baseDirectory.getAbsolutePath(), MAVEN_WRAPPER_JAR_PATH);\n+        if(!outputFile.getParentFile().exists()) {\n+            if(!outputFile.getParentFile().mkdirs()) {\n+                System.out.println(\n+                        \"- ERROR creating output direcrory '\" + outputFile.getParentFile().getAbsolutePath() + \"'\");\n+            }\n+        }\n+        System.out.println(\"- Downloading to: \" + outputFile.getAbsolutePath());\n+        try {\n+            downloadFileFromURL(url, outputFile);\n+            System.out.println(\"Done\");\n+            System.exit(0);\n+        } catch (Throwable e) {\n+            System.out.println(\"- Error downloading\");\n+            e.printStackTrace();\n+            System.exit(1);\n+        }\n+    }\n+\n+    private static void downloadFileFromURL(String urlString, File destination) throws Exception {\n+        URL website = new URL(urlString);\n+        ReadableByteChannel rbc;\n+        rbc = Channels.newChannel(website.openStream());\n+        FileOutputStream fos = new FileOutputStream(destination);\n+        fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);\n+        fos.close();\n+        rbc.close();\n+    }\n+\n+}",
    "output": "Remove unused maven profiles and add mvnw support"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/entity/Option.java b/src/main/java/cc/ryanc/halo/model/entity/Option.java\n--- a/src/main/java/cc/ryanc/halo/model/entity/Option.java\n+++ b/src/main/java/cc/ryanc/halo/model/entity/Option.java\n@@ -41,13 +41,13 @@ public class Option extends BaseEntity {\n     /**\n      * source,default is system\n      */\n-    @Column(name = \"source\", columnDefinition = \"varchar(127) default 'system'\")\n-    private String source;\n+    @Column(name = \"option_source\", columnDefinition = \"varchar(127) default 'system'\")\n+    private String optionSource;\n \n     @Override\n     public void prePersist() {\n         super.prePersist();\n         id = null;\n-        source = \"system\";\n+        optionSource = \"system\";\n     }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/OptionService.java b/src/main/java/cc/ryanc/halo/service/OptionService.java\n--- a/src/main/java/cc/ryanc/halo/service/OptionService.java\n+++ b/src/main/java/cc/ryanc/halo/service/OptionService.java\n@@ -22,31 +22,35 @@ public interface OptionService extends CrudService<Option, Integer> {\n     /**\n      * Save one option\n      *\n-     * @param key   key must not be blank\n-     * @param value value\n+     * @param key    key must not be blank\n+     * @param value  value\n+     * @param source source\n      */\n-    void save(@NonNull String key, String value);\n+    void save(@NonNull String key, String value, String source);\n \n     /**\n      * Save multiple options\n      *\n      * @param options options\n+     * @param source  source\n      */\n-    void save(@NonNull Map<String, String> options);\n+    void save(@NonNull Map<String, String> options, String source);\n \n     /**\n      * SAve multiple options\n      *\n      * @param optionParams option params\n+     * @param source       source\n      */\n-    void save(List<OptionParam> optionParams);\n+    void save(List<OptionParam> optionParams, String source);\n \n     /**\n      * Saves blog properties.\n      *\n      * @param properties blog properties\n+     * @param source     source\n      */\n-    void saveProperties(@NonNull Map<BlogProperties, String> properties);\n+    void saveProperties(@NonNull Map<BlogProperties, String> properties, String source);\n \n     /**\n      * Get all options\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/OptionServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/OptionServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/OptionServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/OptionServiceImpl.java\n@@ -37,11 +37,12 @@ public OptionServiceImpl(OptionRepository optionRepository) {\n     /**\n      * Saves one option\n      *\n-     * @param key   key\n-     * @param value value\n+     * @param key    key\n+     * @param value  value\n+     * @param source source\n      */\n     @Override\n-    public void save(String key, String value) {\n+    public void save(String key, String value, String source) {\n         Assert.hasText(key, \"Option key must not be blank\");\n \n         if (StringUtils.isNotBlank(value)) {\n@@ -59,6 +60,7 @@ public void save(String key, String value) {\n             Option anOption = new Option();\n             anOption.setOptionKey(key);\n             anOption.setOptionValue(value);\n+            anOption.setOptionSource(source);\n             return anOption;\n         });\n \n@@ -70,35 +72,36 @@ public void save(String key, String value) {\n      * Saves multiple options\n      *\n      * @param options options\n+     * @param source  source\n      */\n     @Override\n-    public void save(Map<String, String> options) {\n+    public void save(Map<String, String> options, String source) {\n         if (CollectionUtils.isEmpty(options)) {\n             return;\n         }\n \n         // (Not recommended) Don't write \"this::save\" here\n         // Types of key and value are String\n-        options.forEach((key, value) -> save(key, value));\n+        options.forEach((key, value) -> save(key, value, source));\n     }\n \n     @Override\n-    public void save(List<OptionParam> optionParams) {\n+    public void save(List<OptionParam> optionParams, String source) {\n         if (CollectionUtils.isEmpty(optionParams)) {\n             return;\n         }\n \n         // TODO Optimize the query\n-        optionParams.forEach(optionParam -> save(optionParam.getOptionKey(), optionParam.getOptionValue()));\n+        optionParams.forEach(optionParam -> save(optionParam.getOptionKey(), optionParam.getOptionValue(), source));\n     }\n \n     @Override\n-    public void saveProperties(Map<BlogProperties, String> properties) {\n+    public void saveProperties(Map<BlogProperties, String> properties, String source) {\n         if (CollectionUtils.isEmpty(properties)) {\n             return;\n         }\n \n-        properties.forEach((property, value) -> save(property.getValue(), value));\n+        properties.forEach((property, value) -> save(property.getValue(), value, source));\n     }\n \n     /**\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/OptionController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/OptionController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/OptionController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/OptionController.java\n@@ -31,6 +31,6 @@ public List<OptionOutputDTO> listAll() {\n \n     @PostMapping(\"saving\")\n     public void saveOptions(@Valid @RequestBody List<OptionParam> optionParams) {\n-        optionService.save(optionParams);\n+        optionService.save(optionParams,\"system\");\n     }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/ThemeController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/ThemeController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/ThemeController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/ThemeController.java\n@@ -59,7 +59,7 @@ public List<Theme> listAll() {\n     public void active(@RequestParam(name = \"themeName\", defaultValue = \"anatole\") String themeName) throws TemplateModelException {\n         Map<BlogProperties, String> properties = new HashMap<>(1);\n         properties.put(BlogProperties.THEME, themeName);\n-        optionService.saveProperties(properties);\n+        optionService.saveProperties(properties,\"system\");\n         BaseContentController.THEME = themeName;\n         OPTIONS.clear();\n         OPTIONS.putAll(optionService.listOptions());\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/core/InstallController.java b/src/main/java/cc/ryanc/halo/web/controller/core/InstallController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/core/InstallController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/core/InstallController.java\n@@ -191,7 +191,7 @@ private void initSettings(InstallParam installParam) {\n         properties.put(BlogProperties.ATTACH_LOC, AttachOrigin.SERVER.getValue().toString());\n \n         // Create properties\n-        optionService.saveProperties(properties);\n+        optionService.saveProperties(properties,\"system\");\n     }\n \n     /**",
    "output": "Refactor OptionService"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/entity/Category.java b/src/main/java/cc/ryanc/halo/model/entity/Category.java\n--- a/src/main/java/cc/ryanc/halo/model/entity/Category.java\n+++ b/src/main/java/cc/ryanc/halo/model/entity/Category.java\n@@ -1,14 +1,12 @@\n package cc.ryanc.halo.model.entity;\n \n-import cc.ryanc.halo.utils.DateUtils;\n import lombok.Data;\n import lombok.EqualsAndHashCode;\n import lombok.ToString;\n import org.hibernate.annotations.SQLDelete;\n import org.hibernate.annotations.Where;\n \n import javax.persistence.*;\n-import java.util.Date;\n \n /**\n  * Category entity.\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/entity/Comment.java b/src/main/java/cc/ryanc/halo/model/entity/Comment.java\n--- a/src/main/java/cc/ryanc/halo/model/entity/Comment.java\n+++ b/src/main/java/cc/ryanc/halo/model/entity/Comment.java\n@@ -1,15 +1,13 @@\n package cc.ryanc.halo.model.entity;\n \n import cc.ryanc.halo.model.enums.CommentStatus;\n-import cc.ryanc.halo.utils.DateUtils;\n import lombok.Data;\n import lombok.EqualsAndHashCode;\n import lombok.ToString;\n import org.hibernate.annotations.SQLDelete;\n import org.hibernate.annotations.Where;\n \n import javax.persistence.*;\n-import java.util.Date;\n \n /**\n  * Comment entity.\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/entity/Gallery.java b/src/main/java/cc/ryanc/halo/model/entity/Gallery.java\n--- a/src/main/java/cc/ryanc/halo/model/entity/Gallery.java\n+++ b/src/main/java/cc/ryanc/halo/model/entity/Gallery.java\n@@ -1,6 +1,5 @@\n package cc.ryanc.halo.model.entity;\n \n-import cc.ryanc.halo.utils.DateUtils;\n import lombok.Data;\n import lombok.EqualsAndHashCode;\n import lombok.ToString;\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/entity/Link.java b/src/main/java/cc/ryanc/halo/model/entity/Link.java\n--- a/src/main/java/cc/ryanc/halo/model/entity/Link.java\n+++ b/src/main/java/cc/ryanc/halo/model/entity/Link.java\n@@ -1,14 +1,12 @@\n package cc.ryanc.halo.model.entity;\n \n-import cc.ryanc.halo.utils.DateUtils;\n import lombok.Data;\n import lombok.EqualsAndHashCode;\n import lombok.ToString;\n import org.hibernate.annotations.SQLDelete;\n import org.hibernate.annotations.Where;\n \n import javax.persistence.*;\n-import java.util.Date;\n \n /**\n  * Link entity\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/entity/Log.java b/src/main/java/cc/ryanc/halo/model/entity/Log.java\n--- a/src/main/java/cc/ryanc/halo/model/entity/Log.java\n+++ b/src/main/java/cc/ryanc/halo/model/entity/Log.java\n@@ -2,15 +2,13 @@\n \n \n import cc.ryanc.halo.model.enums.LogType;\n-import cc.ryanc.halo.utils.DateUtils;\n import lombok.Data;\n import lombok.EqualsAndHashCode;\n import lombok.ToString;\n import org.hibernate.annotations.SQLDelete;\n import org.hibernate.annotations.Where;\n \n import javax.persistence.*;\n-import java.util.Date;\n \n /**\n  * Log entity.\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/entity/Menu.java b/src/main/java/cc/ryanc/halo/model/entity/Menu.java\n--- a/src/main/java/cc/ryanc/halo/model/entity/Menu.java\n+++ b/src/main/java/cc/ryanc/halo/model/entity/Menu.java\n@@ -1,14 +1,12 @@\n package cc.ryanc.halo.model.entity;\n \n-import cc.ryanc.halo.utils.DateUtils;\n import lombok.Data;\n import lombok.EqualsAndHashCode;\n import lombok.ToString;\n import org.hibernate.annotations.SQLDelete;\n import org.hibernate.annotations.Where;\n \n import javax.persistence.*;\n-import java.util.Date;\n \n /**\n  * Menu entity\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/entity/Option.java b/src/main/java/cc/ryanc/halo/model/entity/Option.java\n--- a/src/main/java/cc/ryanc/halo/model/entity/Option.java\n+++ b/src/main/java/cc/ryanc/halo/model/entity/Option.java\n@@ -1,14 +1,12 @@\n package cc.ryanc.halo.model.entity;\n \n-import cc.ryanc.halo.utils.DateUtils;\n import lombok.Data;\n import lombok.EqualsAndHashCode;\n import lombok.ToString;\n import org.hibernate.annotations.SQLDelete;\n import org.hibernate.annotations.Where;\n \n import javax.persistence.*;\n-import java.util.Date;\n \n /**\n  * Setting entity.\n@@ -29,20 +27,27 @@ public class Option extends BaseEntity {\n     private Integer id;\n \n     /**\n-     * 设置项 Key\n+     * option key\n      */\n     @Column(name = \"option_key\", columnDefinition = \"varchar(100) not null\")\n     private String optionKey;\n \n     /**\n-     * 设置项 Value\n+     * option value\n      */\n     @Column(name = \"option_value\", columnDefinition = \"varchar(1023) not null\")\n     private String optionValue;\n \n+    /**\n+     * source,default is system\n+     */\n+    @Column(name = \"source\", columnDefinition = \"varchar(127) default 'system'\")\n+    private String source;\n+\n     @Override\n     public void prePersist() {\n         super.prePersist();\n         id = null;\n+        source = \"system\";\n     }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/entity/PostCategory.java b/src/main/java/cc/ryanc/halo/model/entity/PostCategory.java\n--- a/src/main/java/cc/ryanc/halo/model/entity/PostCategory.java\n+++ b/src/main/java/cc/ryanc/halo/model/entity/PostCategory.java\n@@ -1,14 +1,11 @@\n package cc.ryanc.halo.model.entity;\n \n-import cc.ryanc.halo.utils.DateUtils;\n import lombok.Data;\n-import lombok.EqualsAndHashCode;\n import lombok.ToString;\n import org.hibernate.annotations.SQLDelete;\n import org.hibernate.annotations.Where;\n \n import javax.persistence.*;\n-import java.util.Date;\n import java.util.Objects;\n \n /**\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/entity/Tag.java b/src/main/java/cc/ryanc/halo/model/entity/Tag.java\n--- a/src/main/java/cc/ryanc/halo/model/entity/Tag.java\n+++ b/src/main/java/cc/ryanc/halo/model/entity/Tag.java\n@@ -5,11 +5,8 @@\n import lombok.ToString;\n import org.hibernate.annotations.SQLDelete;\n import org.hibernate.annotations.Where;\n-import org.springframework.data.annotation.CreatedDate;\n-import org.springframework.data.annotation.LastModifiedDate;\n \n import javax.persistence.*;\n-import java.util.Date;\n \n /**\n  * Tag entity",
    "output": "Refactor Option entity"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/web/controller/content/ContentFeedController.java b/src/main/java/cc/ryanc/halo/web/controller/content/ContentFeedController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/content/ContentFeedController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/content/ContentFeedController.java\n@@ -75,7 +75,7 @@ public String feed(Model model) throws IOException, TemplateException {\n     @GetMapping(value = {\"atom\", \"atom.xml\"}, produces = \"application/xml;charset=UTF-8\")\n     @ResponseBody\n     public String atom(Model model) throws IOException, TemplateException {\n-        int pageSize = HaloUtils.getDefaultPageSize(20);\n+        int pageSize = HaloUtils.getDefaultPageSize();\n         final Sort sort = new Sort(Sort.Direction.DESC, \"createTime\");\n         final Pageable pageable = PageRequest.of(0, pageSize, sort);\n         model.addAttribute(\"posts\", buildPosts(pageable));\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/content/ContentIndexController.java b/src/main/java/cc/ryanc/halo/web/controller/content/ContentIndexController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/content/ContentIndexController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/content/ContentIndexController.java\n@@ -65,7 +65,7 @@ public String index(Model model,\n                                 @SortDefault(sort = \"createTime\", direction = DESC)\n                         }) Sort sort) {\n         log.debug(\"Requested index page, sort info: [{}]\", sort);\n-        int pageSize = HaloUtils.getDefaultPageSize(10);\n+        int pageSize = HaloUtils.getDefaultPageSize();\n         Pageable pageable = PageRequest.of(page - 1, pageSize, sort);\n         Page<PostListVO> posts = postService.pageListVoBy(PostStatus.PUBLISHED, PostType.POST, pageable);\n         int[] rainbow = PageUtil.rainbow(page, posts.getTotalPages(), 3);",
    "output": "Refactor ContentFeedController.java"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/utils/HaloUtils.java b/src/main/java/cc/ryanc/halo/utils/HaloUtils.java\n--- a/src/main/java/cc/ryanc/halo/utils/HaloUtils.java\n+++ b/src/main/java/cc/ryanc/halo/utils/HaloUtils.java\n@@ -94,10 +94,12 @@ public static String getMachineIP() {\n      *\n      * @return default page size\n      */\n-    public static int getDefaultPageSize() {\n-        return Integer.valueOf(OPTIONS.getOrDefault(\n-                BlogProperties.INDEX_POSTS.getValue(),\n-                String.valueOf(DEFAULT_PAGE_SIZE)));\n+    public static int getDefaultPageSize(int pageSize) {\n+        if (StrUtil.isNotBlank(OPTIONS.get(BlogProperties.INDEX_POSTS))) {\n+            return Integer.parseInt(OPTIONS.get(BlogProperties.INDEX_POSTS));\n+        }\n+\n+        return pageSize;\n     }\n \n     /**\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/content/ContentFeedController.java b/src/main/java/cc/ryanc/halo/web/controller/content/ContentFeedController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/content/ContentFeedController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/content/ContentFeedController.java\n@@ -5,9 +5,11 @@\n import cc.ryanc.halo.model.enums.PostStatus;\n import cc.ryanc.halo.model.enums.PostType;\n import cc.ryanc.halo.service.PostService;\n+import cc.ryanc.halo.utils.HaloUtils;\n import cn.hutool.core.util.StrUtil;\n import freemarker.template.Template;\n import freemarker.template.TemplateException;\n+import javafx.geometry.Pos;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.PageRequest;\n import org.springframework.data.domain.Pageable;\n@@ -57,15 +59,7 @@ public String feed(Model model) throws IOException, TemplateException {\n         }\n         final Sort sort = new Sort(Sort.Direction.DESC, \"postDate\");\n         final Pageable pageable = PageRequest.of(0, Integer.parseInt(rssPosts), sort);\n-        final Page<Post> postsPage = postService.pageBy(PostStatus.PUBLISHED, PostType.POST, pageable).map(post -> {\n-            if (StrUtil.isNotEmpty(post.getPassword())) {\n-                post.setFormatContent(\"该文章为加密文章\");\n-                post.setSummary(\"该文章为加密文章\");\n-            }\n-            return post;\n-        });\n-        final List<Post> posts = postsPage.getContent();\n-        model.addAttribute(\"posts\", posts);\n+        model.addAttribute(\"posts\", buildPosts(pageable));\n         final Template template = freeMarker.getConfiguration().getTemplate(\"common/web/rss.ftl\");\n         return FreeMarkerTemplateUtils.processTemplateIntoString(template, model);\n     }\n@@ -81,21 +75,10 @@ public String feed(Model model) throws IOException, TemplateException {\n     @GetMapping(value = {\"atom\", \"atom.xml\"}, produces = \"application/xml;charset=UTF-8\")\n     @ResponseBody\n     public String atom(Model model) throws IOException, TemplateException {\n-        String rssPosts = OPTIONS.get(BlogProperties.RSS_POSTS.getValue());\n-        if (StrUtil.isBlank(rssPosts)) {\n-            rssPosts = \"20\";\n-        }\n-        final Sort sort = new Sort(Sort.Direction.DESC, \"postDate\");\n-        final Pageable pageable = PageRequest.of(0, Integer.parseInt(rssPosts), sort);\n-        final Page<Post> postsPage = postService.pageBy(PostStatus.PUBLISHED, PostType.POST, pageable).map(post -> {\n-            if (StrUtil.isNotEmpty(post.getPassword())) {\n-                post.setFormatContent(\"该文章为加密文章\");\n-                post.setSummary(\"该文章为加密文章\");\n-            }\n-            return post;\n-        });\n-        final List<Post> posts = postsPage.getContent();\n-        model.addAttribute(\"posts\", posts);\n+        int pageSize = HaloUtils.getDefaultPageSize(20);\n+        final Sort sort = new Sort(Sort.Direction.DESC, \"createTime\");\n+        final Pageable pageable = PageRequest.of(0, pageSize, sort);\n+        model.addAttribute(\"posts\", buildPosts(pageable));\n         final Template template = freeMarker.getConfiguration().getTemplate(\"common/web/atom.ftl\");\n         return FreeMarkerTemplateUtils.processTemplateIntoString(template, model);\n     }\n@@ -111,15 +94,7 @@ public String atom(Model model) throws IOException, TemplateException {\n     @GetMapping(value = {\"sitemap\", \"sitemap.xml\"}, produces = \"application/xml;charset=UTF-8\")\n     @ResponseBody\n     public String sitemapXml(Model model) throws IOException, TemplateException {\n-        final Page<Post> postsPage = postService.pageBy(PostStatus.PUBLISHED, PostType.POST, null).map(post -> {\n-            if (StrUtil.isNotEmpty(post.getPassword())) {\n-                post.setFormatContent(\"该文章为加密文章\");\n-                post.setSummary(\"该文章为加密文章\");\n-            }\n-            return post;\n-        });\n-        final List<Post> posts = postsPage.getContent();\n-        model.addAttribute(\"posts\", posts);\n+        model.addAttribute(\"posts\", buildPosts(null));\n         final Template template = freeMarker.getConfiguration().getTemplate(\"common/web/sitemap_xml.ftl\");\n         return FreeMarkerTemplateUtils.processTemplateIntoString(template, model);\n     }\n@@ -132,15 +107,7 @@ public String sitemapXml(Model model) throws IOException, TemplateException {\n      */\n     @GetMapping(value = \"sitemap.html\", produces = {\"text/html\"})\n     public String sitemapHtml(Model model) {\n-        final Page<Post> postsPage = postService.pageBy(PostStatus.PUBLISHED, PostType.POST, null).map(post -> {\n-            if (StrUtil.isNotEmpty(post.getPassword())) {\n-                post.setFormatContent(\"该文章为加密文章\");\n-                post.setSummary(\"该文章为加密文章\");\n-            }\n-            return post;\n-        });\n-        final List<Post> posts = postsPage.getContent();\n-        model.addAttribute(\"posts\", posts);\n+        model.addAttribute(\"posts\", buildPosts(null));\n         return \"common/web/sitemap_html\";\n     }\n \n@@ -158,4 +125,20 @@ public String robots(Model model) throws IOException, TemplateException {\n         final Template template = freeMarker.getConfiguration().getTemplate(\"common/web/robots.ftl\");\n         return FreeMarkerTemplateUtils.processTemplateIntoString(template, model);\n     }\n+\n+    /**\n+     * Build posts for feed\n+     * @param pageable pageable\n+     * @return List<Post>\n+     */\n+    private List<Post> buildPosts(Pageable pageable){\n+        final Page<Post> postsPage = postService.pageBy(PostStatus.PUBLISHED, PostType.POST, pageable).map(post -> {\n+            if (StrUtil.isNotEmpty(post.getPassword())) {\n+                post.setFormatContent(\"该文章为加密文章\");\n+                post.setSummary(\"该文章为加密文章\");\n+            }\n+            return post;\n+        });\n+        return postsPage.getContent();\n+    }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/content/ContentIndexController.java b/src/main/java/cc/ryanc/halo/web/controller/content/ContentIndexController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/content/ContentIndexController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/content/ContentIndexController.java\n@@ -65,14 +65,9 @@ public String index(Model model,\n                                 @SortDefault(sort = \"createTime\", direction = DESC)\n                         }) Sort sort) {\n         log.debug(\"Requested index page, sort info: [{}]\", sort);\n-\n-        int size = HaloUtils.getDefaultPageSize();\n-        Pageable pageable = PageRequest.of(page - 1, size, sort);\n+        int pageSize = HaloUtils.getDefaultPageSize(10);\n+        Pageable pageable = PageRequest.of(page - 1, pageSize, sort);\n         Page<PostListVO> posts = postService.pageListVoBy(PostStatus.PUBLISHED, PostType.POST, pageable);\n-        if (null == posts) {\n-            // TODO There will never be null\n-            return this.renderNotFound();\n-        }\n         int[] rainbow = PageUtil.rainbow(page, posts.getTotalPages(), 3);\n         model.addAttribute(\"is_index\", true);\n         model.addAttribute(\"posts\", posts);\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/content/ContentTagController.java b/src/main/java/cc/ryanc/halo/web/controller/content/ContentTagController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/content/ContentTagController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/content/ContentTagController.java\n@@ -81,7 +81,7 @@ public String tags(Model model,\n         if (null == tag) {\n             return this.renderNotFound();\n         }\n-        int size = HaloUtils.getDefaultPageSize();\n+        int size = HaloUtils.getDefaultPageSize(10);\n         final Pageable pageable = PageRequest.of(page - 1, size, sort);\n \n         // TODO get posts by tag",
    "output": "Merge branch 'v1' of C:\\Users\\RYAN0UP\\Desktop\\halo with conflicts."
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/listener/StartedListener.java b/src/main/java/cc/ryanc/halo/listener/StartedListener.java\n--- a/src/main/java/cc/ryanc/halo/listener/StartedListener.java\n+++ b/src/main/java/cc/ryanc/halo/listener/StartedListener.java\n@@ -8,7 +8,6 @@\n import cc.ryanc.halo.utils.HaloUtils;\n import cc.ryanc.halo.utils.ThemeUtils;\n import cc.ryanc.halo.web.controller.content.base.BaseContentController;\n-import cc.ryanc.halo.web.controller.support.PageJacksonSerializer;\n import cn.hutool.core.util.StrUtil;\n import cn.hutool.json.JSONUtil;\n import freemarker.template.TemplateModelException;\n@@ -67,7 +66,8 @@ public void onApplicationEvent(ApplicationStartedEvent event) {\n      * Cache options to map\n      */\n     private void cacheOptions() {\n-        HaloConst.OPTIONS = optionService.listOptions();\n+        OPTIONS.clear();\n+        OPTIONS.putAll(optionService.listOptions());\n     }\n \n     /**\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/support/HaloConst.java b/src/main/java/cc/ryanc/halo/model/support/HaloConst.java\n--- a/src/main/java/cc/ryanc/halo/model/support/HaloConst.java\n+++ b/src/main/java/cc/ryanc/halo/model/support/HaloConst.java\n@@ -2,10 +2,10 @@\n \n import cn.hutool.json.JSONObject;\n \n-import java.util.ArrayList;\n-import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n \n /**\n  * <pre>\n@@ -36,7 +36,7 @@ public class HaloConst {\n     /**\n      * All of the options\n      */\n-    public static Map<String, String> OPTIONS;\n+    public final static ConcurrentMap<String, String> OPTIONS = new ConcurrentHashMap<>();\n \n     /**\n      * All of the Owo\n\ndiff --git a/src/main/java/cc/ryanc/halo/utils/HaloUtils.java b/src/main/java/cc/ryanc/halo/utils/HaloUtils.java\n--- a/src/main/java/cc/ryanc/halo/utils/HaloUtils.java\n+++ b/src/main/java/cc/ryanc/halo/utils/HaloUtils.java\n@@ -95,11 +95,9 @@ public static String getMachineIP() {\n      * @return default page size\n      */\n     public static int getDefaultPageSize() {\n-        if (StrUtil.isNotBlank(OPTIONS.get(BlogProperties.INDEX_POSTS))) {\n-            return Integer.parseInt(OPTIONS.get(BlogProperties.INDEX_POSTS));\n-        }\n-\n-        return DEFAULT_PAGE_SIZE;\n+        return Integer.valueOf(OPTIONS.getOrDefault(\n+                BlogProperties.INDEX_POSTS.getValue(),\n+                String.valueOf(DEFAULT_PAGE_SIZE)));\n     }\n \n     /**\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/ThemeController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/ThemeController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/ThemeController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/ThemeController.java\n@@ -62,7 +62,7 @@ public void active(@RequestParam(name = \"themeName\", defaultValue = \"anatole\") S\n         optionService.saveProperties(properties);\n         BaseContentController.THEME = themeName;\n         OPTIONS.clear();\n-        OPTIONS = optionService.listOptions();\n+        OPTIONS.putAll(optionService.listOptions());\n         configuration.setSharedVariable(\"themeName\", themeName);\n         configuration.setSharedVariable(\"options\", OPTIONS);\n     }\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/base/BaseController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/base/BaseController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/base/BaseController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/base/BaseController.java\n@@ -30,7 +30,7 @@ public void refreshCache() {\n         try {\n             OPTIONS.clear();\n             THEMES.clear();\n-            OPTIONS = optionService.listOptions();\n+            OPTIONS.putAll(optionService.listOptions());\n             THEMES = ThemeUtils.getThemes();\n             configuration.setSharedVariable(\"options\", OPTIONS);\n         } catch (TemplateModelException e) {\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/core/InstallController.java b/src/main/java/cc/ryanc/halo/web/controller/core/InstallController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/core/InstallController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/core/InstallController.java\n@@ -295,7 +295,7 @@ public JsonResult doInstall(@RequestParam(\"blogLocale\") String blogLocale,\n             menuService.create(menuArchive);\n \n             OPTIONS.clear();\n-            OPTIONS = optionService.listOptions();\n+            OPTIONS.putAll(optionService.listOptions());\n             configuration.setSharedVariable(\"options\", OPTIONS);\n //            configuration.setSharedVariable(\"user\", userService.findUser());\n         } catch (Exception e) {",
    "output": "Resolve implicit concurrency problem"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/entity/Comment.java b/src/main/java/cc/ryanc/halo/model/entity/Comment.java\n--- a/src/main/java/cc/ryanc/halo/model/entity/Comment.java\n+++ b/src/main/java/cc/ryanc/halo/model/entity/Comment.java\n@@ -89,6 +89,12 @@ public class Comment extends BaseEntity {\n     @Column(name = \"post_id\", columnDefinition = \"int not null\")\n     private Integer postId;\n \n+    /**\n+     * 是否置顶\n+     */\n+    @Column(name = \"top_priority\", columnDefinition = \"int default 0\")\n+    private Integer topPriority;\n+\n     /**\n      * 上级评论\n      */",
    "output": "Add top priority property in Comment entity"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/entity/Post.java b/src/main/java/cc/ryanc/halo/model/entity/Post.java\n--- a/src/main/java/cc/ryanc/halo/model/entity/Post.java\n+++ b/src/main/java/cc/ryanc/halo/model/entity/Post.java\n@@ -135,6 +135,9 @@ public void prePersist() {\n         super.prePersist();\n         id = null;\n         editTime = getCreateTime();\n+        if (type == null) {\n+            type = PostType.POST;\n+        }\n     }\n \n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/params/PostParam.java b/src/main/java/cc/ryanc/halo/model/params/PostParam.java\n--- a/src/main/java/cc/ryanc/halo/model/params/PostParam.java\n+++ b/src/main/java/cc/ryanc/halo/model/params/PostParam.java\n@@ -4,6 +4,7 @@\n import cc.ryanc.halo.model.entity.Post;\n import cc.ryanc.halo.model.enums.PostCreateFrom;\n import cc.ryanc.halo.model.enums.PostStatus;\n+import cc.ryanc.halo.model.enums.PostType;\n import cc.ryanc.halo.utils.HaloUtils;\n import cn.hutool.crypto.digest.BCrypt;\n import lombok.Data;\n@@ -70,6 +71,9 @@ public Post convertTo() {\n             post.setPassword(BCrypt.hashpw(password, BCrypt.gensalt()));\n         }\n \n+        // Set post type to\n+        post.setType(PostType.POST);\n+\n         return post;\n     }\n \n@@ -89,5 +93,6 @@ public void update(Post post) {\n         if (StringUtils.isNotBlank(password)) {\n             post.setPassword(BCrypt.hashpw(password, BCrypt.gensalt()));\n         }\n+\n     }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java\n@@ -28,10 +28,7 @@\n import org.springframework.transaction.annotation.Transactional;\n import org.springframework.util.Assert;\n \n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n+import java.util.*;\n import java.util.function.Function;\n import java.util.function.Supplier;\n import java.util.stream.Collectors;\n@@ -135,13 +132,21 @@ public Page<PostListVO> pageListVoBy(PostStatus status, PostType type, Pageable\n         return postPage.map(post -> {\n             PostListVO postListVO = new PostListVO().convertFrom(post);\n \n+            Optional.ofNullable(tagListMap.get(post.getId())).orElseGet(LinkedList::new);\n+\n             // Set tags\n-            List<TagOutputDTO> tagOutputDTOS = tagListMap.get(post.getId()).stream().map(tag -> (TagOutputDTO) new TagOutputDTO().convertFrom(tag)).collect(Collectors.toList());\n-            postListVO.setTags(tagOutputDTOS);\n+            postListVO.setTags(Optional.ofNullable(tagListMap.get(post.getId()))\n+                    .orElseGet(LinkedList::new)\n+                    .stream()\n+                    .map(tag -> new TagOutputDTO().<TagOutputDTO>convertFrom(tag))\n+                    .collect(Collectors.toList()));\n \n             // Set categories\n-            List<CategoryOutputDTO> categoryOutputDTOS = categoryListMap.get(post.getId()).stream().map(category -> (CategoryOutputDTO) new CategoryOutputDTO().convertFrom(category)).collect(Collectors.toList());\n-            postListVO.setCategories(categoryOutputDTOS);\n+            postListVO.setCategories(Optional.ofNullable(categoryListMap.get(post.getId()))\n+                    .orElseGet(LinkedList::new)\n+                    .stream()\n+                    .map(category -> new CategoryOutputDTO().<CategoryOutputDTO>convertFrom(category))\n+                    .collect(Collectors.toList()));\n \n             // Set comment count\n             postListVO.setCommentCount(commentCountMap.getOrDefault(post.getId(), 0L));\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/PostController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/PostController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/PostController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/PostController.java\n@@ -43,8 +43,12 @@ public List<PostMinimalOutputDTO> pageLatest(@RequestParam(name = \"top\", default\n \n     @GetMapping(\"status/{status}\")\n     @ApiOperation(\"Gets a page of post by post status\")\n-    public Page<PostSimpleOutputDTO> pageByStatus(@PathVariable(name = \"status\") PostStatus status,\n-                                                  @PageableDefault(sort = \"updateTime\", direction = DESC) Pageable pageable) {\n+    public Page<? extends PostSimpleOutputDTO> pageByStatus(@PathVariable(name = \"status\") PostStatus status,\n+                                                            @RequestParam(value = \"more_info\", required = false, defaultValue = \"false\") Boolean moreInfo,\n+                                                            @PageableDefault(sort = \"updateTime\", direction = DESC) Pageable pageable) {\n+        if (moreInfo) {\n+            return postService.pageListVoBy(status, PostType.POST, pageable);\n+        }\n         return postService.pageSimpleDtoByStatus(status, PostType.POST, pageable);\n     }\n ",
    "output": "Fix null pointer exception"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/vo/PostListVO.java b/src/main/java/cc/ryanc/halo/model/vo/PostListVO.java\n--- a/src/main/java/cc/ryanc/halo/model/vo/PostListVO.java\n+++ b/src/main/java/cc/ryanc/halo/model/vo/PostListVO.java\n@@ -18,7 +18,10 @@\n @Data\n public class PostListVO extends PostSimpleOutputDTO {\n \n+    private Long commentCount;\n+\n     private List<TagOutputDTO> tags;\n \n     private List<CategoryOutputDTO> categories;\n+\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/repository/CommentRepository.java b/src/main/java/cc/ryanc/halo/repository/CommentRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/CommentRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/CommentRepository.java\n@@ -2,12 +2,16 @@\n \n import cc.ryanc.halo.model.entity.Comment;\n import cc.ryanc.halo.model.enums.CommentStatus;\n+import cc.ryanc.halo.model.projection.CommentCountProjection;\n import cc.ryanc.halo.repository.base.BaseRepository;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.Pageable;\n+import org.springframework.data.jpa.repository.Query;\n import org.springframework.lang.NonNull;\n import org.springframework.lang.Nullable;\n \n+import java.util.List;\n+\n /**\n  * Comment repository.\n  *\n@@ -25,4 +29,26 @@ public interface CommentRepository extends BaseRepository<Comment, Long> {\n      */\n     @NonNull\n     Page<Comment> findAllByStatus(@Nullable CommentStatus status, @NonNull Pageable pageable);\n+\n+    /**\n+     * Finds all comments by post ids.\n+     *\n+     * @param postIds post ids must not be null\n+     * @return a list of comment\n+     */\n+    @NonNull\n+    List<Comment> findAllByPostIdIn(@NonNull Iterable<Integer> postIds);\n+\n+    /**\n+     * Finds all comments by post id.\n+     *\n+     * @param postId post id must not be null\n+     * @return a list of comment\n+     */\n+    @NonNull\n+    List<Comment> findAllByPostId(@NonNull Integer postId);\n+\n+    @Query(\"select new cc.ryanc.halo.model.projection.CommentCountProjection(count(comment.id), comment.postId) from Comment comment where comment.postId in ?1 group by comment.postId\")\n+    @NonNull\n+    List<CommentCountProjection> countByPostIds(@NonNull Iterable<Integer> postIds);\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/CommentServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/CommentServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/CommentServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/CommentServiceImpl.java\n@@ -4,10 +4,11 @@\n import cc.ryanc.halo.model.entity.Comment;\n import cc.ryanc.halo.model.entity.Post;\n import cc.ryanc.halo.model.enums.CommentStatus;\n+import cc.ryanc.halo.model.projection.CommentCountProjection;\n import cc.ryanc.halo.model.vo.CommentVO;\n import cc.ryanc.halo.repository.CommentRepository;\n+import cc.ryanc.halo.repository.PostRepository;\n import cc.ryanc.halo.service.CommentService;\n-import cc.ryanc.halo.service.PostService;\n import cc.ryanc.halo.service.base.AbstractCrudService;\n import cc.ryanc.halo.utils.ServiceUtils;\n import org.springframework.data.domain.*;\n@@ -17,10 +18,7 @@\n import org.springframework.util.Assert;\n import org.springframework.util.CollectionUtils;\n \n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n+import java.util.*;\n import java.util.stream.Collectors;\n \n /**\n@@ -34,13 +32,13 @@ public class CommentServiceImpl extends AbstractCrudService<Comment, Long> imple\n \n     private final CommentRepository commentRepository;\n \n-    private final PostService postService;\n+    private final PostRepository postRepository;\n \n     public CommentServiceImpl(CommentRepository commentRepository,\n-                              PostService postService) {\n+                              PostRepository postRepository) {\n         super(commentRepository);\n         this.commentRepository = commentRepository;\n-        this.postService = postService;\n+        this.postRepository = postRepository;\n     }\n \n     @Override\n@@ -64,6 +62,25 @@ public Page<CommentVO> pageBy(CommentStatus status, Pageable pageable) {\n         return convertBy(commentPage);\n     }\n \n+    @Override\n+    public List<Comment> listBy(Integer postId) {\n+        Assert.notNull(postId, \"Post id must not be null\");\n+\n+        return commentRepository.findAllByPostId(postId);\n+    }\n+\n+    @Override\n+    public Map<Integer, Long> countByPostIds(Collection<Integer> postIds) {\n+        if (CollectionUtils.isEmpty(postIds)) {\n+            return Collections.emptyMap();\n+        }\n+\n+        // Get all comment counts\n+        List<CommentCountProjection> commentCountProjections = commentRepository.countByPostIds(postIds);\n+\n+        return ServiceUtils.convertToMap(commentCountProjections, CommentCountProjection::getPostId, CommentCountProjection::getCount);\n+    }\n+\n     /**\n      * Converts to comment vo page.\n      *\n@@ -93,7 +110,7 @@ private List<CommentVO> convertBy(@Nullable List<Comment> comments) {\n         Set<Integer> postIds = ServiceUtils.fetchProperty(comments, Comment::getPostId);\n \n         // Get all posts\n-        Map<Integer, Post> postMap = ServiceUtils.convertToMap(postService.listAllByIds(postIds), Post::getId);\n+        Map<Integer, Post> postMap = ServiceUtils.convertToMap(postRepository.findAllById(postIds), Post::getId);\n \n         return comments.stream().map(comment -> {\n             // Convert to vo\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java\n@@ -62,37 +62,15 @@ public PostServiceImpl(PostRepository postRepository,\n                            TagService tagService,\n                            CategoryService categoryService,\n                            PostTagService postTagService,\n-                           PostCategoryService postCategoryService) {\n+                           PostCategoryService postCategoryService,\n+                           CommentService commentService) {\n         super(postRepository);\n         this.postRepository = postRepository;\n         this.tagService = tagService;\n         this.categoryService = categoryService;\n         this.postTagService = postTagService;\n         this.postCategoryService = postCategoryService;\n-    }\n-\n-    /**\n-     * Save post with tags and categories\n-     *\n-     * @param post       post\n-     * @param tags       tags\n-     * @param categories categories\n-     * @return saved post\n-     */\n-    @Override\n-    public Post save(Post post, List<Tag> tags, List<Category> categories) {\n-        // TODO 保存文章以及对应标签和分类\n-        return null;\n-    }\n-\n-    /**\n-     * Remove post and relationship\n-     *\n-     * @param id id\n-     */\n-    @Override\n-    public void remove(Integer id) {\n-        // TODO 删除文章以及关联关系\n+        this.commentService = commentService;\n     }\n \n     @Override\n@@ -144,10 +122,16 @@ public Page<PostListVO> pageListVoBy(PostStatus status, PostType type, Pageable\n \n         Set<Integer> postIds = ServiceUtils.fetchProperty(posts, Post::getId);\n \n+        // Get tag list map\n         Map<Integer, List<Tag>> tagListMap = postTagService.listTagListMapBy(postIds);\n \n+        // Get category list map\n         Map<Integer, List<Category>> categoryListMap = postCategoryService.listCategoryListMap(postIds);\n \n+        // Get comment count\n+        Map<Integer, Long> commentCountMap = commentService.countByPostIds(postIds);\n+\n+\n         return postPage.map(post -> {\n             PostListVO postListVO = new PostListVO().convertFrom(post);\n \n@@ -159,6 +143,9 @@ public Page<PostListVO> pageListVoBy(PostStatus status, PostType type, Pageable\n             List<CategoryOutputDTO> categoryOutputDTOS = categoryListMap.get(post.getId()).stream().map(category -> (CategoryOutputDTO) new CategoryOutputDTO().convertFrom(category)).collect(Collectors.toList());\n             postListVO.setCategories(categoryOutputDTOS);\n \n+            // Set comment count\n+            postListVO.setCommentCount(commentCountMap.getOrDefault(post.getId(), 0L));\n+\n             return postListVO;\n         });\n     }",
    "output": "Add comment count support in PostListVO"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/dto/post/PostMinimalOutputDTO.java b/src/main/java/cc/ryanc/halo/model/dto/post/PostMinimalOutputDTO.java\n--- a/src/main/java/cc/ryanc/halo/model/dto/post/PostMinimalOutputDTO.java\n+++ b/src/main/java/cc/ryanc/halo/model/dto/post/PostMinimalOutputDTO.java\n@@ -8,6 +8,8 @@\n import lombok.EqualsAndHashCode;\n import lombok.ToString;\n \n+import java.util.Date;\n+\n /**\n  * Post minimal output dto.\n  *\n@@ -42,4 +44,19 @@ public class PostMinimalOutputDTO implements OutputConverter<PostMinimalOutputDT\n      * Post type\n      */\n     private PostType type;\n+\n+    /**\n+     * 更新时间戳\n+     */\n+    private Date updateTime;\n+\n+    /**\n+     * 创建时间戳\n+     */\n+    private Date createTime;\n+\n+    /**\n+     * Edit time.\n+     */\n+    private Date editTime;\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/dto/post/PostSimpleOutputDTO.java b/src/main/java/cc/ryanc/halo/model/dto/post/PostSimpleOutputDTO.java\n--- a/src/main/java/cc/ryanc/halo/model/dto/post/PostSimpleOutputDTO.java\n+++ b/src/main/java/cc/ryanc/halo/model/dto/post/PostSimpleOutputDTO.java\n@@ -66,18 +66,4 @@ public class PostSimpleOutputDTO extends PostMinimalOutputDTO {\n      */\n     private Long likes;\n \n-    /**\n-     * 创建时间戳\n-     */\n-    private Date createTime;\n-\n-    /**\n-     * 更新时间戳\n-     */\n-    private Date updateTime;\n-\n-    /**\n-     * Edit time.\n-     */\n-    private Date editTime;\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/entity/PostCategory.java b/src/main/java/cc/ryanc/halo/model/entity/PostCategory.java\n--- a/src/main/java/cc/ryanc/halo/model/entity/PostCategory.java\n+++ b/src/main/java/cc/ryanc/halo/model/entity/PostCategory.java\n@@ -51,14 +51,13 @@ public void prePersist() {\n     public boolean equals(Object o) {\n         if (this == o) return true;\n         if (o == null || getClass() != o.getClass()) return false;\n-        if (!super.equals(o)) return false;\n         PostCategory that = (PostCategory) o;\n         return categoryId.equals(that.categoryId) &&\n                 postId.equals(that.postId);\n     }\n \n     @Override\n     public int hashCode() {\n-        return Objects.hash(super.hashCode(), categoryId, postId);\n+        return Objects.hash(categoryId, postId);\n     }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/entity/PostTag.java b/src/main/java/cc/ryanc/halo/model/entity/PostTag.java\n--- a/src/main/java/cc/ryanc/halo/model/entity/PostTag.java\n+++ b/src/main/java/cc/ryanc/halo/model/entity/PostTag.java\n@@ -49,14 +49,13 @@ public void prePersist() {\n     public boolean equals(Object o) {\n         if (this == o) return true;\n         if (o == null || getClass() != o.getClass()) return false;\n-        if (!super.equals(o)) return false;\n         PostTag postTag = (PostTag) o;\n         return Objects.equals(postId, postTag.postId) &&\n                 Objects.equals(tagId, postTag.tagId);\n     }\n \n     @Override\n     public int hashCode() {\n-        return Objects.hash(super.hashCode(), postId, tagId);\n+        return Objects.hash(postId, tagId);\n     }\n }",
    "output": "Disable invoke super equal and hashCode method in PostTag and PostCategory"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/repository/PostRepository.java b/src/main/java/cc/ryanc/halo/repository/PostRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/PostRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/PostRepository.java\n@@ -48,6 +48,15 @@ public interface PostRepository extends BaseRepository<Post, Integer>, JpaSpecif\n      */\n     long countByUrl(@NonNull String url);\n \n+    /**\n+     * Count by not url and post id not in.\n+     *\n+     * @param id  post id must not be null\n+     * @param url post url must not be null\n+     * @return the count\n+     */\n+    long countByIdNotAndUrl(@NonNull Integer id, @NonNull String url);\n+\n     /**\n      * Get post by url\n      *\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java\n@@ -189,7 +189,12 @@ private PostDetailVO createOrUpdate(@NonNull Post post, Set<Integer> tagIds, Set\n         Assert.notNull(postOperation, \"Post operation must not be null\");\n \n         // Check url\n-        long count = postRepository.countByUrl(post.getUrl());\n+        long count;\n+        if (post.getId() != null) {\n+            count = postRepository.countByIdNotAndUrl(post.getId(), post.getUrl());\n+        } else {\n+            count = postRepository.countByUrl(post.getUrl());\n+        }\n \n         if (count > 0) {\n             throw new AlreadyExistsException(\"The post url has been exist already\").setErrorData(post.getUrl());",
    "output": "Fix update post bug"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/repository/PostCategoryRepository.java b/src/main/java/cc/ryanc/halo/repository/PostCategoryRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/PostCategoryRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/PostCategoryRepository.java\n@@ -5,6 +5,7 @@\n import org.springframework.data.jpa.repository.Query;\n import org.springframework.lang.NonNull;\n \n+import java.util.Collection;\n import java.util.List;\n import java.util.Set;\n \n@@ -44,4 +45,13 @@ public interface PostCategoryRepository extends BaseRepository<PostCategory, Int\n      */\n     @NonNull\n     List<PostCategory> findAllByPostIdIn(@NonNull Iterable<Integer> postIds);\n+\n+    /**\n+     * Finds all post categories by post id.\n+     *\n+     * @param postId post id must not be null\n+     * @return a list of post categories\n+     */\n+    @NonNull\n+    List<PostCategory> findAllByPostId(@NonNull Integer postId);\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/PostCategoryServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/PostCategoryServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/PostCategoryServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/PostCategoryServiceImpl.java\n@@ -96,12 +96,15 @@ public List<PostCategory> createBy(Integer postId, Set<Integer> categoryIds) {\n         }\n \n         // Build post categories\n-        List<PostCategory> postCategories = categoryIds.stream().map(categoryId -> {\n+        Set<PostCategory> postCategories = categoryIds.stream().map(categoryId -> {\n             PostCategory postCategory = new PostCategory();\n             postCategory.setPostId(postId);\n             postCategory.setCategoryId(categoryId);\n             return postCategory;\n-        }).collect(Collectors.toList());\n+        }).collect(Collectors.toSet());\n+\n+        // List all post categories and remove them\n+        postCategories.removeAll(postCategoryRepository.findAllByPostId(postId));\n \n         // Create them\n         return createInBatch(postCategories);\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/PostTagServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/PostTagServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/PostTagServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/PostTagServiceImpl.java\n@@ -120,6 +120,9 @@ public List<PostTag> createBy(Integer postId, Set<Integer> tagIds) {\n             return postTag;\n         }).collect(Collectors.toSet());\n \n+        // Get post tag exist and remove them\n+        postTags.removeAll(postTagRepository.findAllByPostId(postId));\n+\n         // Create in batch\n         return createInBatch(postTags);\n     }\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/PostController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/PostController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/PostController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/PostController.java\n@@ -31,24 +31,8 @@ public class PostController {\n \n     private final PostService postService;\n \n-    private final TagService tagService;\n-\n-    private final CategoryService categoryService;\n-\n-    private final PostTagService postTagService;\n-\n-    private final PostCategoryService postCategoryService;\n-\n-    public PostController(PostService postService,\n-                          TagService tagService,\n-                          CategoryService categoryService,\n-                          PostTagService postTagService,\n-                          PostCategoryService postCategoryService) {\n+    public PostController(PostService postService) {\n         this.postService = postService;\n-        this.tagService = tagService;\n-        this.categoryService = categoryService;\n-        this.postTagService = postTagService;\n-        this.postCategoryService = postCategoryService;\n     }\n \n     @GetMapping(\"latest\")",
    "output": "Enhance post creation api"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/entity/PostCategory.java b/src/main/java/cc/ryanc/halo/model/entity/PostCategory.java\n--- a/src/main/java/cc/ryanc/halo/model/entity/PostCategory.java\n+++ b/src/main/java/cc/ryanc/halo/model/entity/PostCategory.java\n@@ -9,6 +9,7 @@\n \n import javax.persistence.*;\n import java.util.Date;\n+import java.util.Objects;\n \n /**\n  * Post category entity.\n@@ -21,7 +22,6 @@\n @Where(clause = \"deleted = false\")\n @Data\n @ToString\n-@EqualsAndHashCode(callSuper = true)\n public class PostCategory extends BaseEntity {\n \n     @Id\n@@ -46,4 +46,19 @@ public void prePersist() {\n         super.prePersist();\n         id = null;\n     }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        if (!super.equals(o)) return false;\n+        PostCategory that = (PostCategory) o;\n+        return categoryId.equals(that.categoryId) &&\n+                postId.equals(that.postId);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(super.hashCode(), categoryId, postId);\n+    }\n }",
    "output": "Customize PostCategory#equals and PostTag#hashCode"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/entity/PostTag.java b/src/main/java/cc/ryanc/halo/model/entity/PostTag.java\n--- a/src/main/java/cc/ryanc/halo/model/entity/PostTag.java\n+++ b/src/main/java/cc/ryanc/halo/model/entity/PostTag.java\n@@ -1,16 +1,16 @@\n package cc.ryanc.halo.model.entity;\n \n-import cc.ryanc.halo.utils.DateUtils;\n import lombok.Data;\n-import lombok.EqualsAndHashCode;\n import lombok.ToString;\n import org.hibernate.annotations.SQLDelete;\n import org.hibernate.annotations.Where;\n \n import javax.persistence.*;\n-import java.util.Date;\n+import java.util.Objects;\n \n /**\n+ * Post tag entity.\n+ *\n  * @author : RYAN0UP\n  * @date : 2019-03-12\n  */\n@@ -20,7 +20,6 @@\n @SQLDelete(sql = \"update post_tags set deleted = true where id = ?\")\n @Where(clause = \"deleted = false\")\n @ToString\n-@EqualsAndHashCode(callSuper = true)\n public class PostTag extends BaseEntity {\n \n     @Id\n@@ -45,4 +44,19 @@ public void prePersist() {\n         super.prePersist();\n         id = null;\n     }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) return true;\n+        if (o == null || getClass() != o.getClass()) return false;\n+        if (!super.equals(o)) return false;\n+        PostTag postTag = (PostTag) o;\n+        return Objects.equals(postId, postTag.postId) &&\n+                Objects.equals(tagId, postTag.tagId);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(super.hashCode(), postId, tagId);\n+    }\n }",
    "output": "Customize PostTag#equals and PostTag#hashCode"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/utils/HaloUtils.java b/src/main/java/cc/ryanc/halo/utils/HaloUtils.java\n--- a/src/main/java/cc/ryanc/halo/utils/HaloUtils.java\n+++ b/src/main/java/cc/ryanc/halo/utils/HaloUtils.java\n@@ -1,5 +1,6 @@\n package cc.ryanc.halo.utils;\n \n+import cc.ryanc.halo.model.enums.BlogProperties;\n import cn.hutool.core.text.StrBuilder;\n import cn.hutool.core.util.StrUtil;\n import com.qiniu.common.Zone;\n@@ -88,18 +89,18 @@ public static String getMachineIP() {\n         return machineAddress.getHostAddress();\n     }\n \n-//    /**\n-//     * Gets default page size.\n-//     *\n-//     * @return default page size\n-//     */\n-//    public static int getDefaultPageSize() {\n-//        if (StrUtil.isNotBlank(OPTIONS.get(BlogPropertiesEnum.INDEX_POSTS.getProp()))) {\n-//            return Integer.parseInt(OPTIONS.get(BlogPropertiesEnum.INDEX_POSTS.getProp()));\n-//        }\n-//\n-//        return DEFAULT_PAGE_SIZE;\n-//    }\n+    /**\n+     * Gets default page size.\n+     *\n+     * @return default page size\n+     */\n+    public static int getDefaultPageSize() {\n+        if (StrUtil.isNotBlank(OPTIONS.get(BlogProperties.INDEX_POSTS))) {\n+            return Integer.parseInt(OPTIONS.get(BlogProperties.INDEX_POSTS));\n+        }\n+\n+        return DEFAULT_PAGE_SIZE;\n+    }\n \n     /**\n      * Gets default qiniuyun zone.\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/content/ContentIndexController.java b/src/main/java/cc/ryanc/halo/web/controller/content/ContentIndexController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/content/ContentIndexController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/content/ContentIndexController.java\n@@ -1,13 +1,12 @@\n package cc.ryanc.halo.web.controller.content;\n \n-import cc.ryanc.halo.model.enums.BlogProperties;\n import cc.ryanc.halo.model.enums.PostStatus;\n import cc.ryanc.halo.model.enums.PostType;\n import cc.ryanc.halo.model.vo.PostListVO;\n import cc.ryanc.halo.service.PostService;\n+import cc.ryanc.halo.utils.HaloUtils;\n import cc.ryanc.halo.web.controller.content.base.BaseContentController;\n import cn.hutool.core.util.PageUtil;\n-import cn.hutool.core.util.StrUtil;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.PageRequest;\n@@ -20,7 +19,6 @@\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.RequestMapping;\n \n-import static cc.ryanc.halo.model.support.HaloConst.OPTIONS;\n import static org.springframework.data.domain.Sort.Direction.DESC;\n \n /**\n@@ -68,16 +66,14 @@ public String index(Model model,\n                         }) Sort sort) {\n         log.debug(\"Requested index page, sort info: [{}]\", sort);\n \n-        int size = 10;\n-        if (StrUtil.isNotBlank(OPTIONS.get(BlogProperties.INDEX_POSTS.getValue()))) {\n-            size = Integer.parseInt(OPTIONS.get(BlogProperties.INDEX_POSTS.getValue()));\n-        }\n-        final Pageable pageable = PageRequest.of(page - 1, size, sort);\n-        final Page<PostListVO> posts = postService.pageListVoBy(PostStatus.PUBLISHED, PostType.POST, pageable);\n+        int size = HaloUtils.getDefaultPageSize();\n+        Pageable pageable = PageRequest.of(page - 1, size, sort);\n+        Page<PostListVO> posts = postService.pageListVoBy(PostStatus.PUBLISHED, PostType.POST, pageable);\n         if (null == posts) {\n+            // TODO There will never be null\n             return this.renderNotFound();\n         }\n-        final int[] rainbow = PageUtil.rainbow(page, posts.getTotalPages(), 3);\n+        int[] rainbow = PageUtil.rainbow(page, posts.getTotalPages(), 3);\n         model.addAttribute(\"is_index\", true);\n         model.addAttribute(\"posts\", posts);\n         model.addAttribute(\"rainbow\", rainbow);",
    "output": "Enable getDefaultPageSize again"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/repository/PostRepository.java b/src/main/java/cc/ryanc/halo/repository/PostRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/PostRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/PostRepository.java\n@@ -9,6 +9,8 @@\n import org.springframework.data.jpa.repository.JpaSpecificationExecutor;\n import org.springframework.lang.NonNull;\n \n+import java.util.Optional;\n+\n \n /**\n  * Post repository.\n@@ -45,4 +47,13 @@ public interface PostRepository extends BaseRepository<Post, Integer>, JpaSpecif\n      * @return the count\n      */\n     long countByUrl(@NonNull String url);\n+\n+    /**\n+     * Get post by url\n+     *\n+     * @param url  post url\n+     * @param type post type enum\n+     * @return Optional<Post>\n+     */\n+    Optional<Post> getByUrlAndType(@NonNull String url, @NonNull PostType type);\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/PostService.java b/src/main/java/cc/ryanc/halo/service/PostService.java\n--- a/src/main/java/cc/ryanc/halo/service/PostService.java\n+++ b/src/main/java/cc/ryanc/halo/service/PostService.java\n@@ -125,4 +125,13 @@ public interface PostService extends CrudService<Post, Integer> {\n     @NonNull\n     @Transactional\n     Post createBy(@NonNull Post post, Set<Integer> tagIds, Set<Integer> categoryIds);\n+\n+    /**\n+     * Get post by url.\n+     *\n+     * @param url  post url.\n+     * @param type post type enum.\n+     * @return Post\n+     */\n+    Post getByUrl(@NonNull String url, @NonNull PostType type);\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java\n@@ -1,6 +1,7 @@\n package cc.ryanc.halo.service.impl;\n \n import cc.ryanc.halo.exception.AlreadyExistsException;\n+import cc.ryanc.halo.exception.NotFoundException;\n import cc.ryanc.halo.model.dto.CategoryOutputDTO;\n import cc.ryanc.halo.model.dto.TagOutputDTO;\n import cc.ryanc.halo.model.dto.post.PostMinimalOutputDTO;\n@@ -201,4 +202,16 @@ public Post createBy(Post post, Set<Integer> tagIds, Set<Integer> categoryIds) {\n \n         return post;\n     }\n+\n+    /**\n+     * Get post by url.\n+     *\n+     * @param url  post url.\n+     * @param type post type enum.\n+     * @return Post\n+     */\n+    @Override\n+    public Post getByUrl(String url, PostType type) {\n+        return postRepository.getByUrlAndType(url, type).orElseThrow(()->new NotFoundException(\"The post does not exist\").setErrorData(url));\n+    }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/content/ContentPageController.java b/src/main/java/cc/ryanc/halo/web/controller/content/ContentPageController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/content/ContentPageController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/content/ContentPageController.java\n@@ -0,0 +1,103 @@\n+package cc.ryanc.halo.web.controller.content;\n+\n+import cc.ryanc.halo.model.entity.Comment;\n+import cc.ryanc.halo.model.entity.Gallery;\n+import cc.ryanc.halo.model.entity.Post;\n+import cc.ryanc.halo.model.enums.PostStatus;\n+import cc.ryanc.halo.model.enums.PostType;\n+import cc.ryanc.halo.service.CommentService;\n+import cc.ryanc.halo.service.GalleryService;\n+import cc.ryanc.halo.service.PostService;\n+import cc.ryanc.halo.web.controller.content.base.BaseContentController;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestParam;\n+\n+import java.util.List;\n+\n+/**\n+ * @author : RYAN0UP\n+ * @date : 2019-03-21\n+ */\n+@Controller\n+public class ContentPageController extends BaseContentController {\n+\n+    private final GalleryService galleryService;\n+\n+    private final PostService postService;\n+\n+    private final CommentService commentService;\n+\n+    public ContentPageController(GalleryService galleryService, PostService postService, CommentService commentService) {\n+        this.galleryService = galleryService;\n+        this.postService = postService;\n+        this.commentService = commentService;\n+    }\n+\n+    /**\n+     * Render gallery page\n+     *\n+     * @return template path: themes/{theme}/gallery\n+     */\n+    @GetMapping(value = \"/gallery\")\n+    public String gallery(Model model) {\n+        final List<Gallery> galleries = galleryService.listAll();\n+        model.addAttribute(\"galleries\", galleries);\n+        return this.render(\"gallery\");\n+    }\n+\n+    /**\n+     * Render links page\n+     *\n+     * @return template path: themes/{theme}/links\n+     */\n+    @GetMapping(value = \"/links\")\n+    public String links() {\n+        return this.render(\"links\");\n+    }\n+\n+    /**\n+     * Render custom page\n+     *\n+     * @param url page url\n+     * @param model   model\n+     * @return template path: themes/{theme}/post\n+     */\n+    @GetMapping(value = \"/p/{url}\")\n+    public String getPage(@PathVariable(value = \"url\") String url,\n+                          @RequestParam(value = \"cp\", defaultValue = \"1\") Integer cp,\n+                          Model model) {\n+        final Post post = postService.getByUrl(url, PostType.POST);\n+        if (null == post || !post.getStatus().equals(PostStatus.PUBLISHED)) {\n+            return this.renderNotFound();\n+        }\n+        List<Comment> comments;\n+//        if (StrUtil.equals(OPTIONS.get(BlogProperties.NEW_COMMENT_NEED_CHECK.getValue()), \"true\") || OPTIONS.get(BlogProperties.NEW_COMMENT_NEED_CHECK.getValue()) == null) {\n+//            comments = commentService.findCommentsByPostAndCommentStatus(post, CommentStatus.PUBLISHED.getValue());\n+//        } else {\n+//            comments = commentService.findCommentsByPostAndCommentStatusNot(post, CommentStatusEnum.RECYCLE.getCode());\n+//        }\n+//        //默认显示10条\n+//        int size = 10;\n+//        if (StrUtil.isNotBlank(OPTIONS.get(BlogPropertiesEnum.INDEX_COMMENTS.getProp()))) {\n+//            size = Integer.parseInt(OPTIONS.get(BlogPropertiesEnum.INDEX_COMMENTS.getProp()));\n+//        }\n+//        //评论分页\n+//        final ListPage<Comment> commentsPage = new ListPage<>(CommentUtil.getComments(comments), cp, size);\n+//        final int[] rainbow = PageUtil.rainbow(cp, commentsPage.getTotalPage(), 3);\n+//        model.addAttribute(\"is_page\", true);\n+//        model.addAttribute(\"post\", post);\n+//        model.addAttribute(\"comments\", commentsPage);\n+//        model.addAttribute(\"commentsCount\", comments.size());\n+//        model.addAttribute(\"rainbow\", rainbow);\n+//        postService.cacheViews(post.getPostId());\n+//\n+//        //如果设置了自定义模板，则渲染自定义模板\n+//        if (StrUtil.isNotEmpty(post.getCustomTpl())) {\n+//            return this.render(post.getCustomTpl());\n+//        }\n+        return this.render(\"page\");\n+    }\n+}",
    "output": "Create ContentPageController"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/ThemeController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/ThemeController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/ThemeController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/ThemeController.java\n@@ -29,7 +29,7 @@ public class ThemeController {\n \n     private final OptionService optionService;\n \n-    private Configuration configuration;\n+    private final Configuration configuration;\n \n     public ThemeController(OptionService optionService,\n                            Configuration configuration) {\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/content/ContentCategoryController.java b/src/main/java/cc/ryanc/halo/web/controller/content/ContentCategoryController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/content/ContentCategoryController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/content/ContentCategoryController.java\n@@ -24,9 +24,9 @@\n @RequestMapping(value = \"/categories\")\n public class ContentCategoryController extends BaseContentController {\n \n-    private CategoryService categoryService;\n+    private final CategoryService categoryService;\n \n-    private PostService postService;\n+    private final PostService postService;\n \n     public ContentCategoryController(CategoryService categoryService,\n                                      PostService postService) {\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/content/ContentFeedController.java b/src/main/java/cc/ryanc/halo/web/controller/content/ContentFeedController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/content/ContentFeedController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/content/ContentFeedController.java\n@@ -0,0 +1,161 @@\n+package cc.ryanc.halo.web.controller.content;\n+\n+import cc.ryanc.halo.model.entity.Post;\n+import cc.ryanc.halo.model.enums.BlogProperties;\n+import cc.ryanc.halo.model.enums.PostStatus;\n+import cc.ryanc.halo.model.enums.PostType;\n+import cc.ryanc.halo.service.PostService;\n+import cn.hutool.core.util.StrUtil;\n+import freemarker.template.Template;\n+import freemarker.template.TemplateException;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.PageRequest;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.domain.Sort;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.ui.freemarker.FreeMarkerTemplateUtils;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.ResponseBody;\n+import org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import static cc.ryanc.halo.model.support.HaloConst.OPTIONS;\n+\n+/**\n+ * @author : RYAN0UP\n+ * @date : 2019-03-21\n+ */\n+@Controller\n+public class ContentFeedController {\n+\n+    private final PostService postService;\n+\n+    private final FreeMarkerConfigurer freeMarker;\n+\n+    public ContentFeedController(PostService postService, FreeMarkerConfigurer freeMarker) {\n+        this.postService = postService;\n+        this.freeMarker = freeMarker;\n+    }\n+\n+    /**\n+     * Get post rss\n+     *\n+     * @param model model\n+     * @return String\n+     * @throws IOException       IOException\n+     * @throws TemplateException TemplateException\n+     */\n+    @GetMapping(value = {\"feed\", \"feed.xml\", \"rss\", \"rss.xml\"}, produces = \"application/xml;charset=UTF-8\")\n+    @ResponseBody\n+    public String feed(Model model) throws IOException, TemplateException {\n+        String rssPosts = OPTIONS.get(BlogProperties.RSS_POSTS.getValue());\n+        if (StrUtil.isBlank(rssPosts)) {\n+            rssPosts = \"20\";\n+        }\n+        final Sort sort = new Sort(Sort.Direction.DESC, \"postDate\");\n+        final Pageable pageable = PageRequest.of(0, Integer.parseInt(rssPosts), sort);\n+        final Page<Post> postsPage = postService.pageBy(PostStatus.PUBLISHED, PostType.POST, pageable).map(post -> {\n+            if (StrUtil.isNotEmpty(post.getPassword())) {\n+                post.setFormatContent(\"该文章为加密文章\");\n+                post.setSummary(\"该文章为加密文章\");\n+            }\n+            return post;\n+        });\n+        final List<Post> posts = postsPage.getContent();\n+        model.addAttribute(\"posts\", posts);\n+        final Template template = freeMarker.getConfiguration().getTemplate(\"common/web/rss.ftl\");\n+        return FreeMarkerTemplateUtils.processTemplateIntoString(template, model);\n+    }\n+\n+    /**\n+     * Get atom.xml\n+     *\n+     * @param model model\n+     * @return String\n+     * @throws IOException       IOException\n+     * @throws TemplateException TemplateException\n+     */\n+    @GetMapping(value = {\"atom\", \"atom.xml\"}, produces = \"application/xml;charset=UTF-8\")\n+    @ResponseBody\n+    public String atom(Model model) throws IOException, TemplateException {\n+        String rssPosts = OPTIONS.get(BlogProperties.RSS_POSTS.getValue());\n+        if (StrUtil.isBlank(rssPosts)) {\n+            rssPosts = \"20\";\n+        }\n+        final Sort sort = new Sort(Sort.Direction.DESC, \"postDate\");\n+        final Pageable pageable = PageRequest.of(0, Integer.parseInt(rssPosts), sort);\n+        final Page<Post> postsPage = postService.pageBy(PostStatus.PUBLISHED, PostType.POST, pageable).map(post -> {\n+            if (StrUtil.isNotEmpty(post.getPassword())) {\n+                post.setFormatContent(\"该文章为加密文章\");\n+                post.setSummary(\"该文章为加密文章\");\n+            }\n+            return post;\n+        });\n+        final List<Post> posts = postsPage.getContent();\n+        model.addAttribute(\"posts\", posts);\n+        final Template template = freeMarker.getConfiguration().getTemplate(\"common/web/atom.ftl\");\n+        return FreeMarkerTemplateUtils.processTemplateIntoString(template, model);\n+    }\n+\n+    /**\n+     * Get sitemap.xml.\n+     *\n+     * @param model model\n+     * @return String\n+     * @throws IOException       IOException\n+     * @throws TemplateException TemplateException\n+     */\n+    @GetMapping(value = {\"sitemap\", \"sitemap.xml\"}, produces = \"application/xml;charset=UTF-8\")\n+    @ResponseBody\n+    public String sitemapXml(Model model) throws IOException, TemplateException {\n+        final Page<Post> postsPage = postService.pageBy(PostStatus.PUBLISHED, PostType.POST, null).map(post -> {\n+            if (StrUtil.isNotEmpty(post.getPassword())) {\n+                post.setFormatContent(\"该文章为加密文章\");\n+                post.setSummary(\"该文章为加密文章\");\n+            }\n+            return post;\n+        });\n+        final List<Post> posts = postsPage.getContent();\n+        model.addAttribute(\"posts\", posts);\n+        final Template template = freeMarker.getConfiguration().getTemplate(\"common/web/sitemap_xml.ftl\");\n+        return FreeMarkerTemplateUtils.processTemplateIntoString(template, model);\n+    }\n+\n+    /**\n+     * Get sitemap.html.\n+     *\n+     * @param model model\n+     * @return String\n+     */\n+    @GetMapping(value = \"sitemap.html\", produces = {\"text/html\"})\n+    public String sitemapHtml(Model model) {\n+        final Page<Post> postsPage = postService.pageBy(PostStatus.PUBLISHED, PostType.POST, null).map(post -> {\n+            if (StrUtil.isNotEmpty(post.getPassword())) {\n+                post.setFormatContent(\"该文章为加密文章\");\n+                post.setSummary(\"该文章为加密文章\");\n+            }\n+            return post;\n+        });\n+        final List<Post> posts = postsPage.getContent();\n+        model.addAttribute(\"posts\", posts);\n+        return \"common/web/sitemap_html\";\n+    }\n+\n+    /**\n+     * Get robots.\n+     *\n+     * @param model model\n+     * @return String\n+     * @throws IOException       IOException\n+     * @throws TemplateException TemplateException\n+     */\n+    @GetMapping(value = \"robots.txt\", produces = {\"text/plain\"})\n+    @ResponseBody\n+    public String robots(Model model) throws IOException, TemplateException {\n+        final Template template = freeMarker.getConfiguration().getTemplate(\"common/web/robots.ftl\");\n+        return FreeMarkerTemplateUtils.processTemplateIntoString(template, model);\n+    }\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/content/ContentIndexController.java b/src/main/java/cc/ryanc/halo/web/controller/content/ContentIndexController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/content/ContentIndexController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/content/ContentIndexController.java\n@@ -34,7 +34,7 @@\n @RequestMapping\n public class ContentIndexController extends BaseContentController {\n \n-    private PostService postService;\n+    private final PostService postService;\n \n     public ContentIndexController(PostService postService) {\n         this.postService = postService;\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/content/ContentTagController.java b/src/main/java/cc/ryanc/halo/web/controller/content/ContentTagController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/content/ContentTagController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/content/ContentTagController.java\n@@ -31,9 +31,9 @@\n @RequestMapping(value = \"/tags\")\n public class ContentTagController extends BaseContentController {\n \n-    private TagService tagService;\n+    private final TagService tagService;\n \n-    private PostService postService;\n+    private final PostService postService;\n \n     public ContentTagController(TagService tagService, PostService postService) {\n         this.tagService = tagService;",
    "output": "Create ContentFeedController"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/config/WebMvcAutoConfiguration.java b/src/main/java/cc/ryanc/halo/config/WebMvcAutoConfiguration.java\n--- a/src/main/java/cc/ryanc/halo/config/WebMvcAutoConfiguration.java\n+++ b/src/main/java/cc/ryanc/halo/config/WebMvcAutoConfiguration.java\n@@ -83,6 +83,8 @@ public void addResourceHandlers(ResourceHandlerRegistry registry) {\n                 .addResourceLocations(\"classpath:/static/halo-admin/images/favicon.ico\");\n         registry.addResourceHandler(\"/backup/**\")\n                 .addResourceLocations(\"file:///\" + System.getProperties().getProperty(\"user.home\") + \"/halo/backup/\");\n+        registry.addResourceHandler(\"/admin/**\")\n+                .addResourceLocations(\"classpath:/static/admin/\");\n \n         if (!haloProperties.getDocDisabled()) {\n             // If doc is enable\n@@ -93,30 +95,6 @@ public void addResourceHandlers(ResourceHandlerRegistry registry) {\n         }\n     }\n \n-    /**\n-     * 国际化设置\n-     *\n-     * @return LocaleResolver\n-     */\n-    @Bean\n-    public LocaleResolver localeResolver() {\n-        final SessionLocaleResolver slr = new SessionLocaleResolver();\n-        slr.setDefaultLocale(Locale.CHINA);\n-        return slr;\n-    }\n-\n-    /**\n-     * 国际化参数拦截器\n-     *\n-     * @return LocaleChangeInterceptor\n-     */\n-    @Bean\n-    public LocaleChangeInterceptor localeChangeInterceptor() {\n-        final LocaleChangeInterceptor lci = new LocaleChangeInterceptor();\n-        lci.setParamName(\"lang\");\n-        return lci;\n-    }\n-\n     @Override\n     public void addFormatters(FormatterRegistry registry) {\n         registry.addConverterFactory(new StringToEnumConverterFactory());",
    "output": "Refactor WebMvcAutoConfiguration"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/dto/CategoryOutputDTO.java b/src/main/java/cc/ryanc/halo/model/dto/CategoryOutputDTO.java\n--- a/src/main/java/cc/ryanc/halo/model/dto/CategoryOutputDTO.java\n+++ b/src/main/java/cc/ryanc/halo/model/dto/CategoryOutputDTO.java\n@@ -13,6 +13,8 @@\n @Data\n public class CategoryOutputDTO implements OutputConverter<CategoryOutputDTO, Category> {\n \n+    private Integer id;\n+\n     private String name;\n \n     private String slugName;\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/vo/CategoryVO.java b/src/main/java/cc/ryanc/halo/model/vo/CategoryVO.java\n--- a/src/main/java/cc/ryanc/halo/model/vo/CategoryVO.java\n+++ b/src/main/java/cc/ryanc/halo/model/vo/CategoryVO.java\n@@ -0,0 +1,18 @@\n+package cc.ryanc.halo.model.vo;\n+\n+import cc.ryanc.halo.model.dto.CategoryOutputDTO;\n+import lombok.Data;\n+\n+import java.util.List;\n+\n+/**\n+ * Category vo.\n+ *\n+ * @author johnniang\n+ * @date 3/21/19\n+ */\n+@Data\n+public class CategoryVO extends CategoryOutputDTO {\n+\n+    private List<CategoryVO> children;\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/CategoryService.java b/src/main/java/cc/ryanc/halo/service/CategoryService.java\n--- a/src/main/java/cc/ryanc/halo/service/CategoryService.java\n+++ b/src/main/java/cc/ryanc/halo/service/CategoryService.java\n@@ -1,7 +1,12 @@\n package cc.ryanc.halo.service;\n \n import cc.ryanc.halo.model.entity.Category;\n+import cc.ryanc.halo.model.vo.CategoryVO;\n import cc.ryanc.halo.service.base.CrudService;\n+import org.springframework.data.domain.Sort;\n+import org.springframework.lang.NonNull;\n+\n+import java.util.List;\n \n /**\n  * Category service.\n@@ -15,5 +20,15 @@ public interface CategoryService extends CrudService<Category, Integer> {\n      *\n      * @param id id\n      */\n-    void remove(Integer id);\n+    @Deprecated\n+    void remove(@NonNull Integer id);\n+\n+    /**\n+     * List as category tree.\n+     *\n+     * @param sort sort info must not be null\n+     * @return a category tree\n+     */\n+    @NonNull\n+    List<CategoryVO> listAsTree(@NonNull Sort sort);\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/CategoryServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/CategoryServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/CategoryServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/CategoryServiceImpl.java\n@@ -1,10 +1,20 @@\n package cc.ryanc.halo.service.impl;\n \n import cc.ryanc.halo.model.entity.Category;\n+import cc.ryanc.halo.model.vo.CategoryVO;\n import cc.ryanc.halo.repository.CategoryRepository;\n import cc.ryanc.halo.service.CategoryService;\n import cc.ryanc.halo.service.base.AbstractCrudService;\n+import org.springframework.data.domain.Sort;\n+import org.springframework.lang.NonNull;\n import org.springframework.stereotype.Service;\n+import org.springframework.util.Assert;\n+import org.springframework.util.CollectionUtils;\n+\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Optional;\n \n /**\n  * CategoryService implementation class\n@@ -31,4 +41,78 @@ public CategoryServiceImpl(CategoryRepository categoryRepository) {\n     public void remove(Integer id) {\n         // TODO 删除分类，以及和文章的对应关系\n     }\n+\n+    @Override\n+    public List<CategoryVO> listAsTree(Sort sort) {\n+        Assert.notNull(sort, \"Sort info must not be null\");\n+\n+        // List all category\n+        List<Category> categories = listAll(sort);\n+\n+        if (CollectionUtils.isEmpty(categories)) {\n+            return Collections.emptyList();\n+        }\n+\n+        // Create top category\n+        CategoryVO topLevelCategory = createTopLevelCategory();\n+\n+        // Concrete the tree\n+        concreteTree(topLevelCategory, categories);\n+\n+        return topLevelCategory.getChildren();\n+    }\n+\n+    /**\n+     * Concrete category tree.\n+     *\n+     * @param parentCategory parent category vo must not be null\n+     * @param categories     a list of category\n+     */\n+    private void concreteTree(CategoryVO parentCategory, List<Category> categories) {\n+        Assert.notNull(parentCategory, \"Parent category must not be null\");\n+\n+        if (CollectionUtils.isEmpty(categories)) {\n+            return;\n+        }\n+\n+        // Create children container for removing after\n+        List<Category> children = new LinkedList<>();\n+\n+        categories.forEach(category -> {\n+            if (parentCategory.getId().equals(category.getParentId())) {\n+                // Save child category\n+                children.add(category);\n+\n+                // Convert to child category vo\n+                CategoryVO child = new CategoryVO().convertFrom(category);\n+\n+                // Init children if absent\n+                Optional.ofNullable(parentCategory.getChildren()).orElseGet(LinkedList::new).add(child);\n+            }\n+        });\n+\n+        // Remove all child categories\n+        categories.removeAll(children);\n+\n+        // Foreach children vos\n+        if (!CollectionUtils.isEmpty(parentCategory.getChildren())) {\n+            parentCategory.getChildren().forEach(childCategory -> concreteTree(childCategory, categories));\n+        }\n+    }\n+\n+    /**\n+     * Creates a top level category.\n+     *\n+     * @return top level category with id 0\n+     */\n+    @NonNull\n+    private CategoryVO createTopLevelCategory() {\n+        CategoryVO topCategory = new CategoryVO();\n+        // Set default value\n+        topCategory.setId(0);\n+        topCategory.setChildren(new LinkedList<>());\n+        topCategory.setParentId(-1);\n+\n+        return topCategory;\n+    }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/CategoryController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/CategoryController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/CategoryController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/CategoryController.java\n@@ -0,0 +1,37 @@\n+package cc.ryanc.halo.web.controller.admin.api;\n+\n+import cc.ryanc.halo.model.vo.CategoryVO;\n+import cc.ryanc.halo.service.CategoryService;\n+import io.swagger.annotations.ApiOperation;\n+import org.springframework.data.domain.Sort;\n+import org.springframework.data.web.SortDefault;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import java.util.List;\n+\n+import static org.springframework.data.domain.Sort.Direction.DESC;\n+\n+/**\n+ * Category controller.\n+ *\n+ * @author johnniang\n+ * @date 3/21/19\n+ */\n+@RestController\n+@RequestMapping(\"/admin/api/categories\")\n+public class CategoryController {\n+\n+    private final CategoryService categoryService;\n+\n+    public CategoryController(CategoryService categoryService) {\n+        this.categoryService = categoryService;\n+    }\n+\n+    @GetMapping(\"tree\")\n+    @ApiOperation(\"List as category tree\")\n+    public List<CategoryVO> listAsTree(@SortDefault(sort = \"name\", direction = DESC) Sort sort) {\n+        return categoryService.listAsTree(sort);\n+    }\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/PostController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/PostController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/PostController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/PostController.java\n@@ -38,7 +38,7 @@ public List<PostMinimalOutputDTO> pageLatest(@RequestParam(name = \"top\", default\n     }\n \n     @GetMapping(\"status/{status}\")\n-    @ApiOperation(\"\")\n+    @ApiOperation(\"Gets a page of post by post status\")\n     public Page<PostSimpleOutputDTO> pageByStatus(@PathVariable(name = \"status\") PostStatus status,\n                                                   @PageableDefault(sort = \"updateTime\", direction = DESC) Pageable pageable) {\n         return postService.pageSimpleDtoByStatus(status, PostType.POST, pageable);",
    "output": "Complete category tree view api"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/service/impl/UserServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/UserServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/UserServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/UserServiceImpl.java\n@@ -80,7 +80,7 @@ public User login(String key, String password) {\n         // Check expiration\n         if (user.getExpireTime() != null && DateUtils.now().before(user.getExpireTime())) {\n             // If expired\n-            throw new BadRequestException(\"账号已被禁止登陆，请10分钟后再试\");\n+            throw new BadRequestException(\"账号已被禁止登陆，请 \" + LOCK_MINUTES + \" 分钟后再试\");\n         }\n \n \n@@ -100,7 +100,7 @@ public User login(String key, String password) {\n \n             stringCacheStore.put(LOGIN_FAILURE_COUNT_KEY, loginFailureCount.toString(), LOCK_MINUTES, TimeUnit.MINUTES);\n \n-            throw new BadRequestException(\"账号或者密码错误，您还有\" + (5 - loginFailureCount) + \"次机会\");\n+            throw new BadRequestException(\"账号或者密码错误，您还有\" + (MAX_LOGIN_TRY - loginFailureCount) + \"次机会\");\n         }\n \n         // TODO Set session",
    "output": "Refactor UserServiceImpl"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/service/impl/UserServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/UserServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/UserServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/UserServiceImpl.java\n@@ -8,7 +8,6 @@\n import cc.ryanc.halo.service.UserService;\n import cc.ryanc.halo.service.base.AbstractCrudService;\n import cc.ryanc.halo.utils.DateUtils;\n-import cc.ryanc.halo.utils.LocaleMessageUtil;\n import cn.hutool.core.lang.Validator;\n import cn.hutool.crypto.digest.BCrypt;\n import org.springframework.stereotype.Service;\n@@ -30,15 +29,11 @@ public class UserServiceImpl extends AbstractCrudService<User, Integer> implemen\n \n     private final StringCacheStore stringCacheStore;\n \n-    private final LocaleMessageUtil localeMessageUtil;\n-\n     public UserServiceImpl(UserRepository userRepository,\n-                           StringCacheStore stringCacheStore,\n-                           LocaleMessageUtil localeMessageUtil) {\n+                           StringCacheStore stringCacheStore) {\n         super(userRepository);\n         this.userRepository = userRepository;\n         this.stringCacheStore = stringCacheStore;\n-        this.localeMessageUtil = localeMessageUtil;\n     }\n \n     @Override\n@@ -85,7 +80,7 @@ public User login(String key, String password) {\n         // Check expiration\n         if (user.getExpireTime() != null && DateUtils.now().before(user.getExpireTime())) {\n             // If expired\n-            throw new BadRequestException(localeMessageUtil.getMessage(\"code.admin.login.disabled\"));\n+            throw new BadRequestException(\"账号已被禁止登陆，请10分钟后再试\");\n         }\n \n \n@@ -105,7 +100,7 @@ public User login(String key, String password) {\n \n             stringCacheStore.put(LOGIN_FAILURE_COUNT_KEY, loginFailureCount.toString(), LOCK_MINUTES, TimeUnit.MINUTES);\n \n-            throw new BadRequestException(localeMessageUtil.getMessage(\"code.admin.login.failed\", new Integer[]{(MAX_LOGIN_TRY - loginFailureCount)}));\n+            throw new BadRequestException(\"账号或者密码错误，您还有\" + (5 - loginFailureCount) + \"次机会\");\n         }\n \n         // TODO Set session\n\ndiff --git a/src/main/java/cc/ryanc/halo/utils/LocaleMessageUtil.java b/src/main/java/cc/ryanc/halo/utils/LocaleMessageUtil.java\n--- a/src/main/java/cc/ryanc/halo/utils/LocaleMessageUtil.java\n+++ b/src/main/java/cc/ryanc/halo/utils/LocaleMessageUtil.java\n@@ -1,56 +0,0 @@\n-package cc.ryanc.halo.utils;\n-\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.context.MessageSource;\n-import org.springframework.context.i18n.LocaleContextHolder;\n-import org.springframework.stereotype.Component;\n-\n-import java.util.Locale;\n-\n-/**\n- * <pre>\n- *      国际化工具类\n- * </pre>\n- *\n- * @author : RYAN0UP\n- * @date : 2018/9/10\n- */\n-@Component\n-public class LocaleMessageUtil {\n-\n-    @Autowired\n-    private MessageSource messageSource;\n-\n-    public String getMessage(String code) {\n-        return this.getMessage(code, new Object[]{});\n-    }\n-\n-    public String getMessage(String code, String defaultMessage) {\n-        return this.getMessage(code, null, defaultMessage);\n-    }\n-\n-    public String getMessage(String code, String defaultMessage, Locale locale) {\n-        return this.getMessage(code, null, defaultMessage, locale);\n-    }\n-\n-    public String getMessage(String code, Locale locale) {\n-        return this.getMessage(code, null, \"\", locale);\n-    }\n-\n-    public String getMessage(String code, Object[] args) {\n-        return this.getMessage(code, args, \"\");\n-    }\n-\n-    public String getMessage(String code, Object[] args, Locale locale) {\n-        return this.getMessage(code, args, \"\", locale);\n-    }\n-\n-    public String getMessage(String code, Object[] args, String defaultMessage) {\n-        Locale locale = LocaleContextHolder.getLocale();\n-        return this.getMessage(code, args, defaultMessage, locale);\n-    }\n-\n-    public String getMessage(String code, Object[] args, String defaultMessage, Locale locale) {\n-        return messageSource.getMessage(code, args, defaultMessage, locale);\n-    }\n-}\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/base/BaseController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/base/BaseController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/base/BaseController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/base/BaseController.java\n@@ -1,7 +1,6 @@\n package cc.ryanc.halo.web.controller.admin.base;\n \n import cc.ryanc.halo.service.OptionService;\n-import cc.ryanc.halo.utils.LocaleMessageUtil;\n import cc.ryanc.halo.utils.ThemeUtils;\n import freemarker.template.Configuration;\n import freemarker.template.TemplateModelException;\n@@ -24,9 +23,6 @@ public abstract class BaseController {\n     @Autowired\n     public OptionService optionService;\n \n-    @Autowired\n-    public LocaleMessageUtil localeMessageUtil;\n-\n     /**\n      * Clear all caches\n      */\n@@ -41,25 +37,4 @@ public void refreshCache() {\n             e.printStackTrace();\n         }\n     }\n-\n-    /**\n-     * Get message with code\n-     *\n-     * @param code code\n-     * @return String\n-     */\n-    public String localeMessage(String code) {\n-        return localeMessageUtil.getMessage(code);\n-    }\n-\n-    /**\n-     * Get message with code and params\n-     *\n-     * @param code code\n-     * @param args args\n-     * @return String\n-     */\n-    public String localeMessage(String code, Object[] args) {\n-        return localeMessageUtil.getMessage(code, args);\n-    }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/core/InstallController.java b/src/main/java/cc/ryanc/halo/web/controller/core/InstallController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/core/InstallController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/core/InstallController.java\n@@ -101,7 +101,6 @@ public BaseResponse<?> installBlog(@Valid InstallParam installParam) {\n         boolean isInstalled = Boolean.parseBoolean(OPTIONS.getOrDefault(BlogProperties.IS_INSTALL, \"false\"));\n \n         if (isInstalled) {\n-            // TODO i18n\n             throw new BadRequestException(\"该博客已初始化，不能再次安装！\");\n         }\n \n@@ -125,8 +124,7 @@ public BaseResponse<?> installBlog(@Valid InstallParam installParam) {\n \n         // TODO Handle option cache\n \n-        // TODO i18n\n-        return BaseResponse.ok(\"Setup successfully!\");\n+        return BaseResponse.ok(\"安装完成！\");\n     }\n \n     private void createDefaultMenu() {\n@@ -159,11 +157,10 @@ private Category createDefaultCategory() {\n         Category category = new Category();\n \n         // TODO Multi level category\n-        // TODO and i18n for the category name, description\n \n-        category.setName(\"Initial Blog\");\n-        category.setSlugName(\"initial_blog\");\n-        category.setDescription(\"Initial Blog for alphabet\");\n+        category.setName(\"未分类\");\n+        category.setSlugName(\"default\");\n+        category.setDescription(\"未分类\");\n         return categoryService.create(category);\n     }\n ",
    "output": "Remove i18n"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/utils/ThemeUtils.java b/src/main/java/cc/ryanc/halo/utils/ThemeUtils.java\n--- a/src/main/java/cc/ryanc/halo/utils/ThemeUtils.java\n+++ b/src/main/java/cc/ryanc/halo/utils/ThemeUtils.java\n@@ -184,6 +184,22 @@ public static boolean isTemplateExist(String template) throws FileNotFoundExcept\n         return result;\n     }\n \n+    /**\n+     * Judging whether theme exists under template path\n+     *\n+     * @param theme theme name\n+     * @return boolean\n+     * @throws FileNotFoundException FileNotFoundException\n+     */\n+    public static boolean isThemeExist(String theme) throws FileNotFoundException {\n+        boolean result = false;\n+        File file = new File(getThemesPath(theme), theme);\n+        if (file.exists()) {\n+            result = true;\n+        }\n+        return result;\n+    }\n+\n     /**\n      * Judging whether the theme is a internal theme or not\n      *",
    "output": "Complete ThemeUtils#isThemeExist"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/dto/GalleryOutputDTO.java b/src/main/java/cc/ryanc/halo/model/dto/GalleryOutputDTO.java\n--- a/src/main/java/cc/ryanc/halo/model/dto/GalleryOutputDTO.java\n+++ b/src/main/java/cc/ryanc/halo/model/dto/GalleryOutputDTO.java\n@@ -0,0 +1,21 @@\n+package cc.ryanc.halo.model.dto;\n+\n+import cc.ryanc.halo.model.dto.base.OutputConverter;\n+import cc.ryanc.halo.model.entity.Gallery;\n+import lombok.Data;\n+\n+/**\n+ * @author : RYAN0UP\n+ * @date : 2019/3/21\n+ */\n+@Data\n+public class GalleryOutputDTO implements OutputConverter<GalleryOutputDTO, Gallery> {\n+\n+    private Integer id;\n+\n+    private String name;\n+\n+    private String thumbnail;\n+\n+    private String url;\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/GalleryService.java b/src/main/java/cc/ryanc/halo/service/GalleryService.java\n--- a/src/main/java/cc/ryanc/halo/service/GalleryService.java\n+++ b/src/main/java/cc/ryanc/halo/service/GalleryService.java\n@@ -1,7 +1,13 @@\n package cc.ryanc.halo.service;\n \n+import cc.ryanc.halo.model.dto.GalleryOutputDTO;\n+import cc.ryanc.halo.model.dto.LinkOutputDTO;\n import cc.ryanc.halo.model.entity.Gallery;\n import cc.ryanc.halo.service.base.CrudService;\n+import org.springframework.data.domain.Sort;\n+import org.springframework.lang.NonNull;\n+\n+import java.util.List;\n \n /**\n  * Gallery service.\n@@ -10,4 +16,11 @@\n  */\n public interface GalleryService extends CrudService<Gallery, Integer> {\n \n+    /**\n+     * List gallery dtos.\n+     *\n+     * @param sort sort\n+     * @return all galleries\n+     */\n+    List<GalleryOutputDTO> listDtos(@NonNull Sort sort);\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/GalleryServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/GalleryServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/GalleryServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/GalleryServiceImpl.java\n@@ -1,10 +1,16 @@\n package cc.ryanc.halo.service.impl;\n \n+import cc.ryanc.halo.model.dto.GalleryOutputDTO;\n import cc.ryanc.halo.model.entity.Gallery;\n import cc.ryanc.halo.repository.GalleryRepository;\n import cc.ryanc.halo.service.GalleryService;\n import cc.ryanc.halo.service.base.AbstractCrudService;\n+import org.springframework.data.domain.Sort;\n import org.springframework.stereotype.Service;\n+import org.springframework.util.Assert;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n \n /**\n  * GalleryService implementation class\n@@ -21,4 +27,17 @@ public GalleryServiceImpl(GalleryRepository galleryRepository) {\n         super(galleryRepository);\n         this.galleryRepository = galleryRepository;\n     }\n+\n+    /**\n+     * List gallery dtos.\n+     *\n+     * @param sort sort\n+     * @return all galleries\n+     */\n+    @Override\n+    public List<GalleryOutputDTO> listDtos(Sort sort) {\n+        Assert.notNull(sort, \"Sort info must not be null\");\n+\n+        return listAll(sort).stream().map(gallery -> (GalleryOutputDTO) new GalleryOutputDTO().convertFrom(gallery)).collect(Collectors.toList());\n+    }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/GalleryController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/GalleryController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/GalleryController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/GalleryController.java\n@@ -0,0 +1,39 @@\n+package cc.ryanc.halo.web.controller.admin.api;\n+\n+import cc.ryanc.halo.model.dto.GalleryOutputDTO;\n+import cc.ryanc.halo.service.GalleryService;\n+import org.springframework.data.domain.Sort;\n+import org.springframework.data.web.SortDefault;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import java.util.List;\n+\n+/**\n+ * Gallery controller\n+ *\n+ * @author : RYAN0UP\n+ * @date : 2019/3/21\n+ */\n+@RestController\n+@RequestMapping(\"/admin/api/galleries\")\n+public class GalleryController {\n+\n+    private final GalleryService galleryService;\n+\n+    public GalleryController(GalleryService galleryService) {\n+        this.galleryService = galleryService;\n+    }\n+\n+    /**\n+     * List all galleries\n+     *\n+     * @param sort sort\n+     * @return all of galleries\n+     */\n+    @GetMapping\n+    public List<GalleryOutputDTO> listGalleries(@SortDefault(sort = \"updateTime\", direction = Sort.Direction.DESC) Sort sort) {\n+        return galleryService.listDtos(sort);\n+    }\n+}",
    "output": "Create gallery api"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/dto/LinkOutputDTO.java b/src/main/java/cc/ryanc/halo/model/dto/LinkOutputDTO.java\n--- a/src/main/java/cc/ryanc/halo/model/dto/LinkOutputDTO.java\n+++ b/src/main/java/cc/ryanc/halo/model/dto/LinkOutputDTO.java\n@@ -0,0 +1,25 @@\n+package cc.ryanc.halo.model.dto;\n+\n+import cc.ryanc.halo.model.dto.base.OutputConverter;\n+import cc.ryanc.halo.model.entity.Link;\n+import lombok.Data;\n+\n+/**\n+ * Link output dto.\n+ *\n+ * @author : RYAN0UP\n+ * @date : 2019/3/21\n+ */\n+@Data\n+public class LinkOutputDTO implements OutputConverter<LinkOutputDTO, Link> {\n+\n+    private Integer id;\n+\n+    private String name;\n+\n+    private String url;\n+\n+    private String description;\n+\n+    private String team;\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/LinkService.java b/src/main/java/cc/ryanc/halo/service/LinkService.java\n--- a/src/main/java/cc/ryanc/halo/service/LinkService.java\n+++ b/src/main/java/cc/ryanc/halo/service/LinkService.java\n@@ -1,7 +1,12 @@\n package cc.ryanc.halo.service;\n \n+import cc.ryanc.halo.model.dto.LinkOutputDTO;\n import cc.ryanc.halo.model.entity.Link;\n import cc.ryanc.halo.service.base.CrudService;\n+import org.springframework.data.domain.Sort;\n+import org.springframework.lang.NonNull;\n+\n+import java.util.List;\n \n /**\n  * Link service.\n@@ -10,4 +15,11 @@\n  */\n public interface LinkService extends CrudService<Link, Integer> {\n \n+    /**\n+     * List link dtos.\n+     *\n+     * @param sort sort\n+     * @return all links\n+     */\n+    List<LinkOutputDTO> listDtos(@NonNull Sort sort);\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/LinkServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/LinkServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/LinkServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/LinkServiceImpl.java\n@@ -1,10 +1,16 @@\n package cc.ryanc.halo.service.impl;\n \n+import cc.ryanc.halo.model.dto.LinkOutputDTO;\n import cc.ryanc.halo.model.entity.Link;\n import cc.ryanc.halo.repository.LinkRepository;\n import cc.ryanc.halo.service.LinkService;\n import cc.ryanc.halo.service.base.AbstractCrudService;\n+import org.springframework.data.domain.Sort;\n import org.springframework.stereotype.Service;\n+import org.springframework.util.Assert;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n \n /**\n  * LinkService implementation class\n@@ -21,4 +27,17 @@ public LinkServiceImpl(LinkRepository linkRepository) {\n         super(linkRepository);\n         this.linkRepository = linkRepository;\n     }\n+\n+    /**\n+     * List link dtos.\n+     *\n+     * @param sort sort\n+     * @return all links\n+     */\n+    @Override\n+    public List<LinkOutputDTO> listDtos(Sort sort) {\n+        Assert.notNull(sort, \"Sort info must not be null\");\n+\n+        return listAll(sort).stream().map(link -> (LinkOutputDTO) new LinkOutputDTO().convertFrom(link)).collect(Collectors.toList());\n+    }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/utils/ThemeUtils.java b/src/main/java/cc/ryanc/halo/utils/ThemeUtils.java\n--- a/src/main/java/cc/ryanc/halo/utils/ThemeUtils.java\n+++ b/src/main/java/cc/ryanc/halo/utils/ThemeUtils.java\n@@ -33,7 +33,7 @@ public static List<Theme> getThemes() {\n             themes.addAll(getThemesByPath(getInternalThemesPath(), true));\n             themes.addAll(getThemesByPath(getUsersThemesPath(), false));\n         } catch (Exception e) {\n-            throw new RuntimeException(\"Themes scan failed\",e);\n+            throw new RuntimeException(\"Themes scan failed\", e);\n         }\n         return themes;\n     }\n@@ -77,7 +77,7 @@ private static List<Theme> getThemesByPath(File themesPath, boolean isInternal)\n                 }\n             }\n         } catch (Exception e) {\n-            throw new RuntimeException(\"Themes scan failed\",e);\n+            throw new RuntimeException(\"Themes scan failed\", e);\n         }\n         return themes;\n     }\n@@ -108,7 +108,7 @@ public static File getUsersThemesPath() {\n      * @return File\n      */\n     public static File getThemesPath(String themeName) throws FileNotFoundException {\n-        return isInternal(themeName)?getInternalThemesPath():getUsersThemesPath();\n+        return isInternal(themeName) ? getInternalThemesPath() : getUsersThemesPath();\n     }\n \n     /**\n@@ -139,7 +139,7 @@ public static List<String> getTemplates(String theme) {\n                 }\n             }\n         } catch (Exception e) {\n-            throw new RuntimeException(\"Failed to get theme template\",e);\n+            throw new RuntimeException(\"Failed to get theme template\", e);\n         }\n         return templates;\n     }\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/LinkController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/LinkController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/LinkController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/LinkController.java\n@@ -0,0 +1,39 @@\n+package cc.ryanc.halo.web.controller.admin.api;\n+\n+import cc.ryanc.halo.model.dto.LinkOutputDTO;\n+import cc.ryanc.halo.service.LinkService;\n+import org.springframework.data.domain.Sort;\n+import org.springframework.data.web.SortDefault;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import java.util.List;\n+\n+/**\n+ * Link Controller\n+ *\n+ * @author : RYAN0UP\n+ * @date : 2019/3/21\n+ */\n+@RestController\n+@RequestMapping(value = \"/admin/api/links\")\n+public class LinkController {\n+\n+    private final LinkService linkService;\n+\n+    public LinkController(LinkService linkService) {\n+        this.linkService = linkService;\n+    }\n+\n+    /**\n+     * List all links\n+     *\n+     * @param sort sort\n+     * @return List\n+     */\n+    @GetMapping\n+    public List<LinkOutputDTO> listLinks(@SortDefault(sort = \"updateTime\", direction = Sort.Direction.DESC) Sort sort) {\n+        return linkService.listDtos(sort);\n+    }\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/ThemeController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/ThemeController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/ThemeController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/ThemeController.java\n@@ -0,0 +1,69 @@\n+package cc.ryanc.halo.web.controller.admin.api;\n+\n+import cc.ryanc.halo.model.enums.BlogProperties;\n+import cc.ryanc.halo.model.support.Theme;\n+import cc.ryanc.halo.service.OptionService;\n+import cc.ryanc.halo.utils.ThemeUtils;\n+import cc.ryanc.halo.web.controller.content.base.BaseContentController;\n+import freemarker.template.Configuration;\n+import freemarker.template.TemplateModelException;\n+import io.swagger.annotations.ApiOperation;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static cc.ryanc.halo.model.support.HaloConst.OPTIONS;\n+\n+/**\n+ * @author : RYAN0UP\n+ * @date : 2019/3/20\n+ */\n+@RestController\n+@RequestMapping(\"/admin/api/themes\")\n+public class ThemeController {\n+\n+    private final OptionService optionService;\n+\n+    private Configuration configuration;\n+\n+    public ThemeController(OptionService optionService,\n+                           Configuration configuration) {\n+        this.optionService = optionService;\n+        this.configuration = configuration;\n+    }\n+\n+    /**\n+     * List all themes\n+     *\n+     * @return themes\n+     */\n+    @GetMapping\n+    @ApiOperation(\"List all themes\")\n+    public List<Theme> listAll() {\n+        return ThemeUtils.getThemes();\n+    }\n+\n+    /**\n+     * Active theme\n+     *\n+     * @param themeName theme name\n+     * @throws TemplateModelException TemplateModelException\n+     */\n+    @GetMapping(value = \"active\")\n+    @ApiOperation(\"Active theme\")\n+    public void active(@RequestParam(name = \"themeName\", defaultValue = \"anatole\") String themeName) throws TemplateModelException {\n+        Map<BlogProperties, String> properties = new HashMap<>(1);\n+        properties.put(BlogProperties.THEME, themeName);\n+        optionService.saveProperties(properties);\n+        BaseContentController.THEME = themeName;\n+        OPTIONS.clear();\n+        OPTIONS = optionService.listOptions();\n+        configuration.setSharedVariable(\"themeName\", themeName);\n+        configuration.setSharedVariable(\"options\", OPTIONS);\n+    }\n+}",
    "output": "Merge remote-tracking branch 'origin/v1' into v1"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/dto/AttachmentOutputDTO.java b/src/main/java/cc/ryanc/halo/model/dto/AttachmentOutputDTO.java\n--- a/src/main/java/cc/ryanc/halo/model/dto/AttachmentOutputDTO.java\n+++ b/src/main/java/cc/ryanc/halo/model/dto/AttachmentOutputDTO.java\n@@ -0,0 +1,60 @@\n+package cc.ryanc.halo.model.dto;\n+\n+import cc.ryanc.halo.model.dto.base.OutputConverter;\n+import cc.ryanc.halo.model.entity.Attachment;\n+import lombok.Data;\n+\n+/**\n+ * Attachment output dto.\n+ *\n+ * @author johnniang\n+ * @date 3/21/19\n+ */\n+@Data\n+public class AttachmentOutputDTO implements OutputConverter<AttachmentOutputDTO, Attachment> {\n+\n+    /**\n+     * Attachment id.\n+     */\n+    private Integer id;\n+\n+    /**\n+     * 附件名称\n+     */\n+    private String name;\n+\n+    /**\n+     * 附件路径\n+     */\n+    private String path;\n+\n+    /**\n+     * 缩略图路径\n+     */\n+    private String thumbPath;\n+\n+    /**\n+     * 附件类型\n+     */\n+    private String mediaType;\n+\n+    /**\n+     * 附件后缀\n+     */\n+    private String suffix;\n+\n+    /**\n+     * 附件尺寸\n+     */\n+    private String dimension;\n+\n+    /**\n+     * 附件大小\n+     */\n+    private String size;\n+\n+    /**\n+     * 附件上传类型\n+     */\n+    private Integer type;\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/dto/TagOutputDTO.java b/src/main/java/cc/ryanc/halo/model/dto/TagOutputDTO.java\n--- a/src/main/java/cc/ryanc/halo/model/dto/TagOutputDTO.java\n+++ b/src/main/java/cc/ryanc/halo/model/dto/TagOutputDTO.java\n@@ -13,6 +13,8 @@\n @Data\n public class TagOutputDTO implements OutputConverter<TagOutputDTO, Tag> {\n \n+    private Integer id;\n+\n     private String name;\n \n     private String slugName;\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/AttachmentService.java b/src/main/java/cc/ryanc/halo/service/AttachmentService.java\n--- a/src/main/java/cc/ryanc/halo/service/AttachmentService.java\n+++ b/src/main/java/cc/ryanc/halo/service/AttachmentService.java\n@@ -1,7 +1,10 @@\n package cc.ryanc.halo.service;\n \n+import cc.ryanc.halo.model.dto.AttachmentOutputDTO;\n import cc.ryanc.halo.model.entity.Attachment;\n import cc.ryanc.halo.service.base.CrudService;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n \n \n /**\n@@ -11,4 +14,11 @@\n  */\n public interface AttachmentService extends CrudService<Attachment, Integer> {\n \n+    /**\n+     * Pages attachment output dtos.\n+     *\n+     * @param pageable page info must not be null\n+     * @return a page of attachment output dto\n+     */\n+    Page<AttachmentOutputDTO> pageDtosBy(Pageable pageable);\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/AttachmentServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/AttachmentServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/AttachmentServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/AttachmentServiceImpl.java\n@@ -1,10 +1,14 @@\n package cc.ryanc.halo.service.impl;\n \n+import cc.ryanc.halo.model.dto.AttachmentOutputDTO;\n import cc.ryanc.halo.model.entity.Attachment;\n import cc.ryanc.halo.repository.AttachmentRepository;\n import cc.ryanc.halo.service.AttachmentService;\n import cc.ryanc.halo.service.base.AbstractCrudService;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n import org.springframework.stereotype.Service;\n+import org.springframework.util.Assert;\n \n /**\n  * AttachmentService implementation class\n@@ -21,4 +25,15 @@ public AttachmentServiceImpl(AttachmentRepository attachmentRepository) {\n         super(attachmentRepository);\n         this.attachmentRepository = attachmentRepository;\n     }\n+\n+    @Override\n+    public Page<AttachmentOutputDTO> pageDtosBy(Pageable pageable) {\n+        Assert.notNull(pageable, \"Page info must not be null\");\n+\n+        // List all\n+        Page<Attachment> attachmentPage = listAll(pageable);\n+\n+        // Convert and return\n+        return attachmentPage.map(attachment -> new AttachmentOutputDTO().convertFrom(attachment));\n+    }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/AttachmentController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/AttachmentController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/AttachmentController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/AttachmentController.java\n@@ -0,0 +1,34 @@\n+package cc.ryanc.halo.web.controller.admin.api;\n+\n+import cc.ryanc.halo.model.dto.AttachmentOutputDTO;\n+import cc.ryanc.halo.service.AttachmentService;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.web.PageableDefault;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import static org.springframework.data.domain.Sort.Direction.DESC;\n+\n+/**\n+ * Attachment controller.\n+ *\n+ * @author johnniang\n+ * @date 3/21/19\n+ */\n+@RestController\n+@RequestMapping(\"/admin/api/attachments\")\n+public class AttachmentController {\n+\n+    private final AttachmentService attachmentService;\n+\n+    public AttachmentController(AttachmentService attachmentService) {\n+        this.attachmentService = attachmentService;\n+    }\n+\n+    @GetMapping\n+    public Page<AttachmentOutputDTO> pageBy(@PageableDefault(sort = \"updateTime\", direction = DESC) Pageable pageable) {\n+        return attachmentService.pageDtosBy(pageable);\n+    }\n+}",
    "output": "Complete page attachments api"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/dto/LinkOutputDTO.java b/src/main/java/cc/ryanc/halo/model/dto/LinkOutputDTO.java\n--- a/src/main/java/cc/ryanc/halo/model/dto/LinkOutputDTO.java\n+++ b/src/main/java/cc/ryanc/halo/model/dto/LinkOutputDTO.java\n@@ -0,0 +1,25 @@\n+package cc.ryanc.halo.model.dto;\n+\n+import cc.ryanc.halo.model.dto.base.OutputConverter;\n+import cc.ryanc.halo.model.entity.Link;\n+import lombok.Data;\n+\n+/**\n+ * Link output dto.\n+ *\n+ * @author : RYAN0UP\n+ * @date : 2019/3/21\n+ */\n+@Data\n+public class LinkOutputDTO implements OutputConverter<LinkOutputDTO, Link> {\n+\n+    private Integer id;\n+\n+    private String name;\n+\n+    private String url;\n+\n+    private String description;\n+\n+    private String team;\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/LinkService.java b/src/main/java/cc/ryanc/halo/service/LinkService.java\n--- a/src/main/java/cc/ryanc/halo/service/LinkService.java\n+++ b/src/main/java/cc/ryanc/halo/service/LinkService.java\n@@ -1,7 +1,12 @@\n package cc.ryanc.halo.service;\n \n+import cc.ryanc.halo.model.dto.LinkOutputDTO;\n import cc.ryanc.halo.model.entity.Link;\n import cc.ryanc.halo.service.base.CrudService;\n+import org.springframework.data.domain.Sort;\n+import org.springframework.lang.NonNull;\n+\n+import java.util.List;\n \n /**\n  * Link service.\n@@ -10,4 +15,11 @@\n  */\n public interface LinkService extends CrudService<Link, Integer> {\n \n+    /**\n+     * List link dtos.\n+     *\n+     * @param sort sort\n+     * @return all links\n+     */\n+    List<LinkOutputDTO> listDtos(@NonNull Sort sort);\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/LinkServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/LinkServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/LinkServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/LinkServiceImpl.java\n@@ -1,10 +1,16 @@\n package cc.ryanc.halo.service.impl;\n \n+import cc.ryanc.halo.model.dto.LinkOutputDTO;\n import cc.ryanc.halo.model.entity.Link;\n import cc.ryanc.halo.repository.LinkRepository;\n import cc.ryanc.halo.service.LinkService;\n import cc.ryanc.halo.service.base.AbstractCrudService;\n+import org.springframework.data.domain.Sort;\n import org.springframework.stereotype.Service;\n+import org.springframework.util.Assert;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n \n /**\n  * LinkService implementation class\n@@ -21,4 +27,17 @@ public LinkServiceImpl(LinkRepository linkRepository) {\n         super(linkRepository);\n         this.linkRepository = linkRepository;\n     }\n+\n+    /**\n+     * List link dtos.\n+     *\n+     * @param sort sort\n+     * @return all links\n+     */\n+    @Override\n+    public List<LinkOutputDTO> listDtos(Sort sort) {\n+        Assert.notNull(sort, \"Sort info must not be null\");\n+\n+        return listAll(sort).stream().map(link -> (LinkOutputDTO) new LinkOutputDTO().convertFrom(link)).collect(Collectors.toList());\n+    }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/utils/ThemeUtils.java b/src/main/java/cc/ryanc/halo/utils/ThemeUtils.java\n--- a/src/main/java/cc/ryanc/halo/utils/ThemeUtils.java\n+++ b/src/main/java/cc/ryanc/halo/utils/ThemeUtils.java\n@@ -33,7 +33,7 @@ public static List<Theme> getThemes() {\n             themes.addAll(getThemesByPath(getInternalThemesPath(), true));\n             themes.addAll(getThemesByPath(getUsersThemesPath(), false));\n         } catch (Exception e) {\n-            throw new RuntimeException(\"Themes scan failed\",e);\n+            throw new RuntimeException(\"Themes scan failed\", e);\n         }\n         return themes;\n     }\n@@ -77,7 +77,7 @@ private static List<Theme> getThemesByPath(File themesPath, boolean isInternal)\n                 }\n             }\n         } catch (Exception e) {\n-            throw new RuntimeException(\"Themes scan failed\",e);\n+            throw new RuntimeException(\"Themes scan failed\", e);\n         }\n         return themes;\n     }\n@@ -108,7 +108,7 @@ public static File getUsersThemesPath() {\n      * @return File\n      */\n     public static File getThemesPath(String themeName) throws FileNotFoundException {\n-        return isInternal(themeName)?getInternalThemesPath():getUsersThemesPath();\n+        return isInternal(themeName) ? getInternalThemesPath() : getUsersThemesPath();\n     }\n \n     /**\n@@ -139,7 +139,7 @@ public static List<String> getTemplates(String theme) {\n                 }\n             }\n         } catch (Exception e) {\n-            throw new RuntimeException(\"Failed to get theme template\",e);\n+            throw new RuntimeException(\"Failed to get theme template\", e);\n         }\n         return templates;\n     }\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/LinkController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/LinkController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/LinkController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/LinkController.java\n@@ -0,0 +1,39 @@\n+package cc.ryanc.halo.web.controller.admin.api;\n+\n+import cc.ryanc.halo.model.dto.LinkOutputDTO;\n+import cc.ryanc.halo.service.LinkService;\n+import org.springframework.data.domain.Sort;\n+import org.springframework.data.web.SortDefault;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import java.util.List;\n+\n+/**\n+ * Link Controller\n+ *\n+ * @author : RYAN0UP\n+ * @date : 2019/3/21\n+ */\n+@RestController\n+@RequestMapping(value = \"/admin/api/links\")\n+public class LinkController {\n+\n+    private final LinkService linkService;\n+\n+    public LinkController(LinkService linkService) {\n+        this.linkService = linkService;\n+    }\n+\n+    /**\n+     * List all links\n+     *\n+     * @param sort sort\n+     * @return List\n+     */\n+    @GetMapping\n+    public List<LinkOutputDTO> listLinks(@SortDefault(sort = \"updateTime\", direction = Sort.Direction.DESC) Sort sort) {\n+        return linkService.listDtos(sort);\n+    }\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/ThemeController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/ThemeController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/ThemeController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/ThemeController.java\n@@ -0,0 +1,69 @@\n+package cc.ryanc.halo.web.controller.admin.api;\n+\n+import cc.ryanc.halo.model.enums.BlogProperties;\n+import cc.ryanc.halo.model.support.Theme;\n+import cc.ryanc.halo.service.OptionService;\n+import cc.ryanc.halo.utils.ThemeUtils;\n+import cc.ryanc.halo.web.controller.content.base.BaseContentController;\n+import freemarker.template.Configuration;\n+import freemarker.template.TemplateModelException;\n+import io.swagger.annotations.ApiOperation;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static cc.ryanc.halo.model.support.HaloConst.OPTIONS;\n+\n+/**\n+ * @author : RYAN0UP\n+ * @date : 2019/3/20\n+ */\n+@RestController\n+@RequestMapping(\"/admin/api/themes\")\n+public class ThemeController {\n+\n+    private final OptionService optionService;\n+\n+    private Configuration configuration;\n+\n+    public ThemeController(OptionService optionService,\n+                           Configuration configuration) {\n+        this.optionService = optionService;\n+        this.configuration = configuration;\n+    }\n+\n+    /**\n+     * List all themes\n+     *\n+     * @return themes\n+     */\n+    @GetMapping\n+    @ApiOperation(\"List all themes\")\n+    public List<Theme> listAll() {\n+        return ThemeUtils.getThemes();\n+    }\n+\n+    /**\n+     * Active theme\n+     *\n+     * @param themeName theme name\n+     * @throws TemplateModelException TemplateModelException\n+     */\n+    @GetMapping(value = \"active\")\n+    @ApiOperation(\"Active theme\")\n+    public void active(@RequestParam(name = \"themeName\", defaultValue = \"anatole\") String themeName) throws TemplateModelException {\n+        Map<BlogProperties, String> properties = new HashMap<>(1);\n+        properties.put(BlogProperties.THEME, themeName);\n+        optionService.saveProperties(properties);\n+        BaseContentController.THEME = themeName;\n+        OPTIONS.clear();\n+        OPTIONS = optionService.listOptions();\n+        configuration.setSharedVariable(\"themeName\", themeName);\n+        configuration.setSharedVariable(\"options\", OPTIONS);\n+    }\n+}",
    "output": "Create theme api and link api"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/repository/CommentRepository.java b/src/main/java/cc/ryanc/halo/repository/CommentRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/CommentRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/CommentRepository.java\n@@ -1,10 +1,28 @@\n package cc.ryanc.halo.repository;\n \n import cc.ryanc.halo.model.entity.Comment;\n+import cc.ryanc.halo.model.enums.CommentStatus;\n import cc.ryanc.halo.repository.base.BaseRepository;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.lang.NonNull;\n+import org.springframework.lang.Nullable;\n \n /**\n+ * Comment repository.\n  *\n+ * @author johnniang\n+ * @date 3/21/19\n  */\n public interface CommentRepository extends BaseRepository<Comment, Long> {\n+\n+    /**\n+     * Finds all comments by status.\n+     *\n+     * @param status   status must not be null\n+     * @param pageable page info must not be null\n+     * @return a page of comment\n+     */\n+    @NonNull\n+    Page<Comment> findAllByStatus(@Nullable CommentStatus status, @NonNull Pageable pageable);\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/CommentService.java b/src/main/java/cc/ryanc/halo/service/CommentService.java\n--- a/src/main/java/cc/ryanc/halo/service/CommentService.java\n+++ b/src/main/java/cc/ryanc/halo/service/CommentService.java\n@@ -1,9 +1,12 @@\n package cc.ryanc.halo.service;\n \n import cc.ryanc.halo.model.entity.Comment;\n+import cc.ryanc.halo.model.enums.CommentStatus;\n import cc.ryanc.halo.model.vo.CommentVO;\n import cc.ryanc.halo.service.base.CrudService;\n import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.lang.NonNull;\n \n /**\n  * Comment service.\n@@ -18,5 +21,16 @@ public interface CommentService extends CrudService<Comment, Long> {\n      * @param top top number must not be less than 0\n      * @return a page of comments\n      */\n+    @NonNull\n     Page<CommentVO> pageLatest(int top);\n+\n+    /**\n+     * Pages comments.\n+     *\n+     * @param status   comment status must not be null\n+     * @param pageable page info must not be null\n+     * @return a page of comment\n+     */\n+    @NonNull\n+    Page<CommentVO> pageBy(@NonNull CommentStatus status, @NonNull Pageable pageable);\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/CommentServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/CommentServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/CommentServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/CommentServiceImpl.java\n@@ -3,20 +3,25 @@\n import cc.ryanc.halo.model.dto.post.PostMinimalOutputDTO;\n import cc.ryanc.halo.model.entity.Comment;\n import cc.ryanc.halo.model.entity.Post;\n+import cc.ryanc.halo.model.enums.CommentStatus;\n import cc.ryanc.halo.model.vo.CommentVO;\n import cc.ryanc.halo.repository.CommentRepository;\n import cc.ryanc.halo.service.CommentService;\n import cc.ryanc.halo.service.PostService;\n import cc.ryanc.halo.service.base.AbstractCrudService;\n import cc.ryanc.halo.utils.ServiceUtils;\n-import org.springframework.data.domain.Page;\n-import org.springframework.data.domain.PageRequest;\n-import org.springframework.data.domain.Sort;\n+import org.springframework.data.domain.*;\n+import org.springframework.lang.NonNull;\n+import org.springframework.lang.Nullable;\n import org.springframework.stereotype.Service;\n import org.springframework.util.Assert;\n+import org.springframework.util.CollectionUtils;\n \n+import java.util.Collections;\n+import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import java.util.stream.Collectors;\n \n /**\n  * CommentService implementation class\n@@ -45,23 +50,59 @@ public Page<CommentVO> pageLatest(int top) {\n         // Build page request\n         PageRequest latestPageable = PageRequest.of(0, top, Sort.by(Sort.Direction.DESC, \"createTime\"));\n \n-        // List all comments\n-        Page<Comment> comments = listAll(latestPageable);\n+        return convertBy(listAll(latestPageable));\n+    }\n+\n+    @Override\n+    public Page<CommentVO> pageBy(CommentStatus status, Pageable pageable) {\n+        Assert.notNull(status, \"Comment status must not be null\");\n+        Assert.notNull(pageable, \"Page info must not be null\");\n+\n+        // Find all \n+        Page<Comment> commentPage = commentRepository.findAllByStatus(status, pageable);\n+\n+        return convertBy(commentPage);\n+    }\n+\n+    /**\n+     * Converts to comment vo page.\n+     *\n+     * @param commentPage comment page must not be null\n+     * @return a page of comment vo\n+     */\n+    @NonNull\n+    private Page<CommentVO> convertBy(@NonNull Page<Comment> commentPage) {\n+        Assert.notNull(commentPage, \"Comment page must not be null\");\n+\n+        return new PageImpl<>(convertBy(commentPage.getContent()), commentPage.getPageable(), commentPage.getTotalElements());\n+    }\n+\n+    /**\n+     * Converts to comment vo list.\n+     *\n+     * @param comments comment list\n+     * @return a list of comment vo\n+     */\n+    @NonNull\n+    private List<CommentVO> convertBy(@Nullable List<Comment> comments) {\n+        if (CollectionUtils.isEmpty(comments)) {\n+            return Collections.emptyList();\n+        }\n \n         // Fetch goods ids\n-        Set<Integer> postIds = ServiceUtils.fetchProperty(comments.getContent(), Comment::getPostId);\n+        Set<Integer> postIds = ServiceUtils.fetchProperty(comments, Comment::getPostId);\n \n         // Get all posts\n         Map<Integer, Post> postMap = ServiceUtils.convertToMap(postService.listAllByIds(postIds), Post::getId);\n \n-        return comments.map(comment -> {\n+        return comments.stream().map(comment -> {\n             // Convert to vo\n             CommentVO commentVO = new CommentVO().convertFrom(comment);\n \n             // Get post and set to the vo\n             commentVO.setPost(new PostMinimalOutputDTO().convertFrom(postMap.get(comment.getPostId())));\n \n             return commentVO;\n-        });\n+        }).collect(Collectors.toList());\n     }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/CommentController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/CommentController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/CommentController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/CommentController.java\n@@ -1,15 +1,18 @@\n package cc.ryanc.halo.web.controller.admin.api;\n \n+import cc.ryanc.halo.model.enums.CommentStatus;\n import cc.ryanc.halo.model.vo.CommentVO;\n import cc.ryanc.halo.service.CommentService;\n import io.swagger.annotations.ApiOperation;\n-import org.springframework.web.bind.annotation.GetMapping;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestParam;\n-import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.web.PageableDefault;\n+import org.springframework.web.bind.annotation.*;\n \n import java.util.List;\n \n+import static org.springframework.data.domain.Sort.Direction.DESC;\n+\n /**\n  * Comment controller.\n  *\n@@ -31,4 +34,10 @@ public CommentController(CommentService commentService) {\n     public List<CommentVO> pageLatest(@RequestParam(name = \"top\", defaultValue = \"10\") int top) {\n         return commentService.pageLatest(top).getContent();\n     }\n+\n+    @GetMapping(\"status/{status}\")\n+    public Page<CommentVO> pageBy(@PageableDefault(sort = \"updateTime\", direction = DESC) Pageable pageable,\n+                                  @PathVariable(\"status\") CommentStatus status) {\n+        return commentService.pageBy(status, pageable);\n+    }\n }",
    "output": "Complete page by status api"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/entity/Link.java b/src/main/java/cc/ryanc/halo/model/entity/Link.java\n--- a/src/main/java/cc/ryanc/halo/model/entity/Link.java\n+++ b/src/main/java/cc/ryanc/halo/model/entity/Link.java\n@@ -57,8 +57,8 @@ public class Link extends BaseEntity {\n     /**\n      * 分组\n      */\n-    @Column(name = \"group\", columnDefinition = \"varchar(255) default ''\")\n-    private String group;\n+    @Column(name = \"team\", columnDefinition = \"varchar(255) default ''\")\n+    private String team;\n \n \n     @Override",
    "output": "Change table 'links' column from 'group' to 'team'"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/service/TagService.java b/src/main/java/cc/ryanc/halo/service/TagService.java\n--- a/src/main/java/cc/ryanc/halo/service/TagService.java\n+++ b/src/main/java/cc/ryanc/halo/service/TagService.java\n@@ -3,6 +3,8 @@\n import cc.ryanc.halo.model.dto.TagOutputDTO;\n import cc.ryanc.halo.model.entity.Tag;\n import cc.ryanc.halo.service.base.CrudService;\n+import org.springframework.data.domain.Sort;\n+import org.springframework.lang.NonNull;\n \n import java.util.List;\n \n@@ -21,4 +23,13 @@ public interface TagService extends CrudService<Tag, Integer> {\n      */\n     void remove(Integer id);\n \n+    /**\n+     * Lists all tag dtos.\n+     *\n+     * @param sort sort info must not be null\n+     * @return a list of tag dto\n+     */\n+    @NonNull\n+    List<TagOutputDTO> listDtos(@NonNull Sort sort);\n+\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/TagServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/TagServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/TagServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/TagServiceImpl.java\n@@ -1,12 +1,18 @@\n package cc.ryanc.halo.service.impl;\n \n import cc.ryanc.halo.exception.AlreadyExistsException;\n+import cc.ryanc.halo.model.dto.TagOutputDTO;\n import cc.ryanc.halo.model.entity.Tag;\n import cc.ryanc.halo.repository.TagRepository;\n import cc.ryanc.halo.service.TagService;\n import cc.ryanc.halo.service.base.AbstractCrudService;\n import lombok.extern.slf4j.Slf4j;\n+import org.springframework.data.domain.Sort;\n import org.springframework.stereotype.Service;\n+import org.springframework.util.Assert;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n \n /**\n  * TagService implementation class\n@@ -35,6 +41,13 @@ public void remove(Integer id) {\n         // TODO 删除标签，以及对应的文章关系\n     }\n \n+    @Override\n+    public List<TagOutputDTO> listDtos(Sort sort) {\n+        Assert.notNull(sort, \"Sort info must not be null\");\n+\n+        return listAll(sort).stream().map(tag -> (TagOutputDTO) new TagOutputDTO().convertFrom(tag)).collect(Collectors.toList());\n+    }\n+\n     @Override\n     public Tag create(Tag tag) {\n         // Check if the tag is exist\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/TagController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/TagController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/TagController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/TagController.java\n@@ -13,6 +13,7 @@\n \n import javax.validation.Valid;\n import java.util.List;\n+import java.util.stream.Collectors;\n \n /**\n  * Tag controller.\n@@ -35,11 +36,16 @@ public TagController(TagService tagService,\n         this.postTagService = postTagService;\n     }\n \n-    @GetMapping\n-    public List<TagWithCountOutputDTO> listTags(@SortDefault(sort = \"updateTime\", direction = Sort.Direction.DESC) Sort sort) {\n+    @GetMapping(\"/addition\")\n+    public List<TagWithCountOutputDTO> listTagsWithCount(@SortDefault(sort = \"updateTime\", direction = Sort.Direction.DESC) Sort sort) {\n         return postTagService.listTagWithCountDtos(sort);\n     }\n \n+    @GetMapping\n+    public List<TagOutputDTO> listTags(@SortDefault(sort = \"updateTime\", direction = Sort.Direction.DESC) Sort sort) {\n+        return tagService.listDtos(sort);\n+    }\n+\n     @PostMapping\n     public TagOutputDTO createTag(@Valid @RequestBody TagParam tagParam) {\n         // Convert to tag",
    "output": "Complete tag list api"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/service/TagService.java b/src/main/java/cc/ryanc/halo/service/TagService.java\n--- a/src/main/java/cc/ryanc/halo/service/TagService.java\n+++ b/src/main/java/cc/ryanc/halo/service/TagService.java\n@@ -1,8 +1,11 @@\n package cc.ryanc.halo.service;\n \n+import cc.ryanc.halo.model.dto.TagOutputDTO;\n import cc.ryanc.halo.model.entity.Tag;\n import cc.ryanc.halo.service.base.CrudService;\n \n+import java.util.List;\n+\n \n /**\n  * Tag service.\n@@ -17,4 +20,5 @@ public interface TagService extends CrudService<Tag, Integer> {\n      * @param id id\n      */\n     void remove(Integer id);\n+\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/TagController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/TagController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/TagController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/TagController.java\n@@ -1,8 +1,10 @@\n package cc.ryanc.halo.web.controller.admin.api;\n \n import cc.ryanc.halo.model.dto.TagOutputDTO;\n+import cc.ryanc.halo.model.dto.TagWithCountOutputDTO;\n import cc.ryanc.halo.model.entity.Tag;\n import cc.ryanc.halo.model.params.TagParam;\n+import cc.ryanc.halo.service.PostTagService;\n import cc.ryanc.halo.service.TagService;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.data.domain.Sort;\n@@ -25,14 +27,17 @@ public class TagController {\n \n     private final TagService tagService;\n \n-    public TagController(TagService tagService) {\n+    private final PostTagService postTagService;\n+\n+    public TagController(TagService tagService,\n+                         PostTagService postTagService) {\n         this.tagService = tagService;\n+        this.postTagService = postTagService;\n     }\n \n     @GetMapping\n-    public List<TagOutputDTO> listTags(@SortDefault(sort = \"updateTime\", direction = Sort.Direction.DESC) Sort sort) {\n-\n-        return null;\n+    public List<TagWithCountOutputDTO> listTags(@SortDefault(sort = \"updateTime\", direction = Sort.Direction.DESC) Sort sort) {\n+        return postTagService.listTagWithCountDtos(sort);\n     }\n \n     @PostMapping",
    "output": "Complete listTags api"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/web/controller/base/CommonResultControllerAdvice.java b/src/main/java/cc/ryanc/halo/web/controller/base/CommonResultControllerAdvice.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/base/CommonResultControllerAdvice.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/base/CommonResultControllerAdvice.java\n@@ -4,26 +4,53 @@\n import org.springframework.core.MethodParameter;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.MediaType;\n+import org.springframework.http.converter.HttpMessageConverter;\n+import org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter;\n import org.springframework.http.converter.json.MappingJacksonValue;\n import org.springframework.http.server.ServerHttpRequest;\n import org.springframework.http.server.ServerHttpResponse;\n+import org.springframework.lang.NonNull;\n+import org.springframework.lang.Nullable;\n import org.springframework.web.bind.annotation.ControllerAdvice;\n-import org.springframework.web.servlet.mvc.method.annotation.AbstractMappingJacksonResponseBodyAdvice;\n+import org.springframework.web.servlet.mvc.method.annotation.ResponseBodyAdvice;\n \n /**\n  * Controller advice for comment result.\n  *\n  * @author johnniang\n  */\n @ControllerAdvice(\"cc.ryanc.halo.web.controller\")\n-public class CommonResultControllerAdvice extends AbstractMappingJacksonResponseBodyAdvice {\n+public class CommonResultControllerAdvice implements ResponseBodyAdvice<Object> {\n \n     @Override\n-    protected void beforeBodyWriteInternal(MappingJacksonValue bodyContainer,\n-                                           MediaType contentType,\n-                                           MethodParameter returnType,\n-                                           ServerHttpRequest request,\n-                                           ServerHttpResponse response) {\n+    public boolean supports(MethodParameter returnType, Class<? extends HttpMessageConverter<?>> converterType) {\n+        return AbstractJackson2HttpMessageConverter.class.isAssignableFrom(converterType);\n+    }\n+\n+    @Override\n+    @NonNull\n+    public final Object beforeBodyWrite(@Nullable Object body, MethodParameter returnType,\n+                                        MediaType contentType, Class<? extends HttpMessageConverter<?>> converterType,\n+                                        ServerHttpRequest request, ServerHttpResponse response) {\n+        MappingJacksonValue container = getOrCreateContainer(body);\n+        // The contain body will never be null\n+        beforeBodyWriteInternal(container, contentType, returnType, request, response);\n+        return container;\n+    }\n+\n+    /**\n+     * Wrap the body in a {@link MappingJacksonValue} value container (for providing\n+     * additional serialization instructions) or simply cast it if already wrapped.\n+     */\n+    private MappingJacksonValue getOrCreateContainer(Object body) {\n+        return (body instanceof MappingJacksonValue ? (MappingJacksonValue) body : new MappingJacksonValue(body));\n+    }\n+\n+    private void beforeBodyWriteInternal(MappingJacksonValue bodyContainer,\n+                                         MediaType contentType,\n+                                         MethodParameter returnType,\n+                                         ServerHttpRequest request,\n+                                         ServerHttpResponse response) {\n         // Get return body\n         Object returnBody = bodyContainer.getValue();\n \n@@ -39,4 +66,5 @@ protected void beforeBodyWriteInternal(MappingJacksonValue bodyContainer,\n         bodyContainer.setValue(baseResponse);\n         response.setStatusCode(HttpStatus.valueOf(baseResponse.getStatus()));\n     }\n+\n }",
    "output": "Refactor CommonResultControllerAdvice"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/config/HaloConfiguration.java b/src/main/java/cc/ryanc/halo/config/HaloConfiguration.java\n--- a/src/main/java/cc/ryanc/halo/config/HaloConfiguration.java\n+++ b/src/main/java/cc/ryanc/halo/config/HaloConfiguration.java\n@@ -43,7 +43,7 @@ FilterRegistrationBean<CorsFilter> corsFilter() {\n \n         corsFilter.setOrder(Ordered.HIGHEST_PRECEDENCE + 10);\n         corsFilter.setFilter(new CorsFilter());\n-        corsFilter.addUrlPatterns(\"/api/*\");\n+        corsFilter.addUrlPatterns(\"/api/*\", \"/admin/api/*\");\n \n         return corsFilter;\n     }",
    "output": "Enable /admin/api/* CORS"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/utils/ThemeUtils.java b/src/main/java/cc/ryanc/halo/utils/ThemeUtils.java\n--- a/src/main/java/cc/ryanc/halo/utils/ThemeUtils.java\n+++ b/src/main/java/cc/ryanc/halo/utils/ThemeUtils.java\n@@ -116,7 +116,7 @@ public static File getThemesPath(String themeName) throws FileNotFoundException\n      * @param theme theme\n      * @return List<String>\n      */\n-    public static List<String> getTplName(String theme) {\n+    public static List<String> getTemplates(String theme) {\n         final List<String> templates = new ArrayList<>();\n         try {\n             final File themesPath = new File(getThemesPath(theme), theme);\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/ThemeController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/ThemeController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/ThemeController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/ThemeController.java\n@@ -27,6 +27,4 @@ public class ThemeController {\n     public List<Theme> listAll() {\n         return ThemeUtils.getThemes();\n     }\n-\n-\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/content/ContentCategoryController.java b/src/main/java/cc/ryanc/halo/web/controller/content/ContentCategoryController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/content/ContentCategoryController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/content/ContentCategoryController.java\n@@ -0,0 +1,78 @@\n+package cc.ryanc.halo.web.controller.content;\n+\n+import cc.ryanc.halo.model.entity.Category;\n+import cc.ryanc.halo.service.CategoryService;\n+import cc.ryanc.halo.service.PostService;\n+import cc.ryanc.halo.web.controller.content.base.BaseContentController;\n+import org.springframework.data.domain.Sort;\n+import org.springframework.data.web.SortDefault;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+\n+import java.util.List;\n+\n+import static org.springframework.data.domain.Sort.Direction.DESC;\n+\n+/**\n+ * @author : RYAN0UP\n+ * @date : 2019/3/20\n+ */\n+@Controller\n+@RequestMapping(value = \"/categories\")\n+public class ContentCategoryController extends BaseContentController {\n+\n+    private CategoryService categoryService;\n+\n+    private PostService postService;\n+\n+    public ContentCategoryController(CategoryService categoryService,\n+                                     PostService postService) {\n+        this.categoryService = categoryService;\n+        this.postService = postService;\n+    }\n+\n+    /**\n+     * Render category list page\n+     *\n+     * @param model model\n+     * @return template path: /{theme}/categories.ftl\n+     */\n+    @GetMapping\n+    public String categories(Model model) {\n+        final List<Category> categories = categoryService.listAll();\n+        model.addAttribute(\"categories\", categories);\n+        return this.render(\"categories\");\n+    }\n+\n+    /**\n+     * Render post list page by category\n+     *\n+     * @param model    model\n+     * @param slugName slugName\n+     * @return template path: /{theme}/category.ftl\n+     */\n+    @GetMapping(value = \"{slugName}\")\n+    public String categories(Model model,\n+                             @PathVariable(\"slugName\") String slugName) {\n+        return this.categories(model, slugName, 1, Sort.by(DESC, \"postDate\"));\n+    }\n+\n+    /**\n+     * Render post list page by category\n+     *\n+     * @param model    model\n+     * @param slugName slugName\n+     * @param page     current page number\n+     * @return template path: /{theme}/category.ftl\n+     */\n+    @GetMapping(\"{slugName}/page/{page}\")\n+    public String categories(Model model,\n+                             @PathVariable(\"slugName\") String slugName,\n+                             @PathVariable(\"page\") Integer page,\n+                             @SortDefault(sort = \"postDate\", direction = DESC) Sort sort) {\n+        return \"\";\n+    }\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/content/ContentIndexController.java b/src/main/java/cc/ryanc/halo/web/controller/content/ContentIndexController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/content/ContentIndexController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/content/ContentIndexController.java\n@@ -0,0 +1,86 @@\n+package cc.ryanc.halo.web.controller.content;\n+\n+import cc.ryanc.halo.model.enums.BlogProperties;\n+import cc.ryanc.halo.model.enums.PostStatus;\n+import cc.ryanc.halo.model.enums.PostType;\n+import cc.ryanc.halo.model.vo.PostListVO;\n+import cc.ryanc.halo.service.PostService;\n+import cc.ryanc.halo.web.controller.content.base.BaseContentController;\n+import cn.hutool.core.util.PageUtil;\n+import cn.hutool.core.util.StrUtil;\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.PageRequest;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.domain.Sort;\n+import org.springframework.data.web.SortDefault;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+\n+import static cc.ryanc.halo.model.support.HaloConst.OPTIONS;\n+import static org.springframework.data.domain.Sort.Direction.DESC;\n+\n+/**\n+ * Blog index page controller\n+ *\n+ * @author : RYAN0UP\n+ * @date : 2019-03-17\n+ */\n+@Slf4j\n+@Controller\n+@RequestMapping\n+public class ContentIndexController extends BaseContentController {\n+\n+    private PostService postService;\n+\n+    public ContentIndexController(PostService postService) {\n+        this.postService = postService;\n+    }\n+\n+\n+    /**\n+     * Render blog index\n+     *\n+     * @param model model\n+     * @return template path: /{theme}/post.ftl\n+     */\n+    @GetMapping\n+    public String index(Model model) {\n+        return this.index(model, 1, Sort.by(DESC, \"topPriority\").and(Sort.by(DESC, \"createTime\")));\n+    }\n+\n+    /**\n+     * Render blog index\n+     *\n+     * @param model model\n+     * @param page  current page number\n+     * @return template path: /{theme}/post.ftl\n+     */\n+    @GetMapping(value = \"page/{page}\")\n+    public String index(Model model,\n+                        @PathVariable(value = \"page\") Integer page,\n+                        @SortDefault.SortDefaults({\n+                                @SortDefault(sort = \"topPriority\", direction = DESC),\n+                                @SortDefault(sort = \"createTime\", direction = DESC)\n+                        }) Sort sort) {\n+        log.debug(\"Requested index page, sort info: [{}]\", sort);\n+\n+        int size = 10;\n+        if (StrUtil.isNotBlank(OPTIONS.get(BlogProperties.INDEX_POSTS.getValue()))) {\n+            size = Integer.parseInt(OPTIONS.get(BlogProperties.INDEX_POSTS.getValue()));\n+        }\n+        final Pageable pageable = PageRequest.of(page - 1, size, sort);\n+        final Page<PostListVO> posts = postService.pageListVoBy(PostStatus.PUBLISHED, PostType.POST, pageable);\n+        if (null == posts) {\n+            return this.renderNotFound();\n+        }\n+        final int[] rainbow = PageUtil.rainbow(page, posts.getTotalPages(), 3);\n+        model.addAttribute(\"is_index\", true);\n+        model.addAttribute(\"posts\", posts);\n+        model.addAttribute(\"rainbow\", rainbow);\n+        return this.render(\"index\");\n+    }\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/content/IndexController.java b/src/main/java/cc/ryanc/halo/web/controller/content/IndexController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/content/IndexController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/content/IndexController.java\n@@ -1,21 +0,0 @@\n-package cc.ryanc.halo.web.controller.content;\n-\n-import org.springframework.stereotype.Controller;\n-import org.springframework.web.bind.annotation.GetMapping;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-\n-/**\n- * Blog index page controller\n- *\n- * @author : RYAN0UP\n- * @date : 2019-03-17\n- */\n-@Controller\n-@RequestMapping\n-public class IndexController {\n-\n-    @GetMapping(value = \"/sweetalert\")\n-    public String sweetalert(){\n-        return \"sweetalert\";\n-    }\n-}",
    "output": "Create ContentCategoryController and ContentIndexController"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/dto/CategoryOutputDTO.java b/src/main/java/cc/ryanc/halo/model/dto/CategoryOutputDTO.java\n--- a/src/main/java/cc/ryanc/halo/model/dto/CategoryOutputDTO.java\n+++ b/src/main/java/cc/ryanc/halo/model/dto/CategoryOutputDTO.java\n@@ -15,7 +15,7 @@ public class CategoryOutputDTO implements OutputConverter<CategoryOutputDTO, Cat\n \n     private String name;\n \n-    private String snakeName;\n+    private String slugName;\n \n     private String description;\n \n\ndiff --git a/src/main/java/cc/ryanc/halo/model/dto/TagOutputDTO.java b/src/main/java/cc/ryanc/halo/model/dto/TagOutputDTO.java\n--- a/src/main/java/cc/ryanc/halo/model/dto/TagOutputDTO.java\n+++ b/src/main/java/cc/ryanc/halo/model/dto/TagOutputDTO.java\n@@ -15,5 +15,5 @@ public class TagOutputDTO implements OutputConverter<TagOutputDTO, Tag> {\n \n     private String name;\n \n-    private String snakeName;\n+    private String slugName;\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/entity/Category.java b/src/main/java/cc/ryanc/halo/model/entity/Category.java\n--- a/src/main/java/cc/ryanc/halo/model/entity/Category.java\n+++ b/src/main/java/cc/ryanc/halo/model/entity/Category.java\n@@ -37,8 +37,8 @@ public class Category {\n     /**\n      * 缩略名\n      */\n-    @Column(name = \"snake_name\", columnDefinition = \"varchar(50) not null\")\n-    private String snakeName;\n+    @Column(name = \"slug_name\", columnDefinition = \"varchar(50) not null\")\n+    private String slugName;\n \n     /**\n      * 描述\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/entity/Tag.java b/src/main/java/cc/ryanc/halo/model/entity/Tag.java\n--- a/src/main/java/cc/ryanc/halo/model/entity/Tag.java\n+++ b/src/main/java/cc/ryanc/halo/model/entity/Tag.java\n@@ -35,8 +35,8 @@ public class Tag {\n     /**\n      * 缩略名\n      */\n-    @Column(name = \"snake_name\", columnDefinition = \"varchar(255) not null\")\n-    private String snakeName;\n+    @Column(name = \"slug_name\", columnDefinition = \"varchar(255) not null\")\n+    private String slugName;\n \n     /**\n      * 创建时间戳\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/ThemeController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/ThemeController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/ThemeController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/ThemeController.java\n@@ -0,0 +1,32 @@\n+package cc.ryanc.halo.web.controller.admin.api;\n+\n+import cc.ryanc.halo.model.support.Theme;\n+import cc.ryanc.halo.utils.ThemeUtils;\n+import io.swagger.annotations.ApiOperation;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import java.util.List;\n+\n+/**\n+ * @author : RYAN0UP\n+ * @date : 2019/3/20\n+ */\n+@RestController\n+@RequestMapping(\"/admin/api/themes\")\n+public class ThemeController {\n+\n+    /**\n+     * List all themes\n+     *\n+     * @return themes\n+     */\n+    @GetMapping\n+    @ApiOperation(\"List all themes\")\n+    public List<Theme> listAll() {\n+        return ThemeUtils.getThemes();\n+    }\n+\n+\n+}",
    "output": "Create ThemeController and Change the field snakeName to slugName"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/service/impl/PostCategoryServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/PostCategoryServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/PostCategoryServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/PostCategoryServiceImpl.java\n@@ -71,7 +71,7 @@ public Map<Integer, List<Category>> listCategoryListMap(Collection<Integer> post\n         Map<Integer, List<Category>> categoryListMap = new HashMap<>();\n \n         // Foreach and collect\n-        postCategories.forEach(postCategory -> categoryListMap.putIfAbsent(postCategory.getPostId(), new LinkedList<>()).add(categoryMap.get(postCategory.getCategoryId())));\n+        postCategories.forEach(postCategory -> categoryListMap.computeIfAbsent(postCategory.getPostId(), postId -> new LinkedList<>()).add(categoryMap.get(postCategory.getCategoryId())));\n \n         return categoryListMap;\n     }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/PostTagServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/PostTagServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/PostTagServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/PostTagServiceImpl.java\n@@ -71,7 +71,7 @@ public Map<Integer, List<Tag>> listTagListMapBy(Collection<Integer> postIds) {\n         Map<Integer, List<Tag>> tagListMap = new HashMap<>();\n \n         // Foreach and collect\n-        postTags.forEach(postTag -> tagListMap.putIfAbsent(postTag.getPostId(), new LinkedList<>()).add(tagMap.get(postTag.getTagId())));\n+        postTags.forEach(postTag -> tagListMap.computeIfAbsent(postTag.getPostId(), postId -> new LinkedList<>()).add(tagMap.get(postTag.getTagId())));\n \n         return tagListMap;\n     }",
    "output": "Replace Map#putIfAbsent with Map#computeIfAbsent"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/dto/OptionOutputDTO.java b/src/main/java/cc/ryanc/halo/model/dto/OptionOutputDTO.java\n--- a/src/main/java/cc/ryanc/halo/model/dto/OptionOutputDTO.java\n+++ b/src/main/java/cc/ryanc/halo/model/dto/OptionOutputDTO.java\n@@ -0,0 +1,20 @@\n+package cc.ryanc.halo.model.dto;\n+\n+import cc.ryanc.halo.model.dto.base.OutputConverter;\n+import cc.ryanc.halo.model.entity.Option;\n+import lombok.Data;\n+\n+/**\n+ * Option output dto.\n+ *\n+ * @author johnniang\n+ * @date 3/20/19\n+ */\n+@Data\n+public class OptionOutputDTO implements OutputConverter<OptionOutputDTO, Option> {\n+\n+    private String optionKey;\n+\n+    private String optionValue;\n+\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/params/OptionParam.java b/src/main/java/cc/ryanc/halo/model/params/OptionParam.java\n--- a/src/main/java/cc/ryanc/halo/model/params/OptionParam.java\n+++ b/src/main/java/cc/ryanc/halo/model/params/OptionParam.java\n@@ -0,0 +1,26 @@\n+package cc.ryanc.halo.model.params;\n+\n+import cc.ryanc.halo.model.dto.base.InputConverter;\n+import cc.ryanc.halo.model.entity.Option;\n+import lombok.Data;\n+\n+import javax.validation.constraints.NotBlank;\n+import javax.validation.constraints.Size;\n+\n+/**\n+ * Optiona param.\n+ *\n+ * @author johnniang\n+ * @date 3/20/19\n+ */\n+@Data\n+public class OptionParam implements InputConverter<Option> {\n+\n+    @NotBlank(message = \"Option key must not be blank\")\n+    @Size(max = 100, message = \"Length of option key must not be more than {max}\")\n+    private String optionKey;\n+\n+\n+    @Size(max = 1023, message = \"Length of option value must not be more than {max}\")\n+    private String optionValue;\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/OptionService.java b/src/main/java/cc/ryanc/halo/service/OptionService.java\n--- a/src/main/java/cc/ryanc/halo/service/OptionService.java\n+++ b/src/main/java/cc/ryanc/halo/service/OptionService.java\n@@ -1,11 +1,14 @@\n package cc.ryanc.halo.service;\n \n+import cc.ryanc.halo.model.dto.OptionOutputDTO;\n import cc.ryanc.halo.model.entity.Option;\n import cc.ryanc.halo.model.enums.BlogProperties;\n+import cc.ryanc.halo.model.params.OptionParam;\n import cc.ryanc.halo.service.base.CrudService;\n import org.springframework.lang.NonNull;\n import org.springframework.lang.Nullable;\n \n+import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n \n@@ -31,6 +34,13 @@ public interface OptionService extends CrudService<Option, Integer> {\n      */\n     void save(@NonNull Map<String, String> options);\n \n+    /**\n+     * SAve multiple options\n+     *\n+     * @param optionParams option params\n+     */\n+    void save(List<OptionParam> optionParams);\n+\n     /**\n      * Saves blog properties.\n      *\n@@ -45,6 +55,13 @@ public interface OptionService extends CrudService<Option, Integer> {\n      */\n     Map<String, String> listOptions();\n \n+    /**\n+     * Lists all option dtos.\n+     *\n+     * @return a list of option dto\n+     */\n+    List<OptionOutputDTO> listDtos();\n+\n     /**\n      * Get option by key\n      *\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/OptionServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/OptionServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/OptionServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/OptionServiceImpl.java\n@@ -1,7 +1,9 @@\n package cc.ryanc.halo.service.impl;\n \n+import cc.ryanc.halo.model.dto.OptionOutputDTO;\n import cc.ryanc.halo.model.entity.Option;\n import cc.ryanc.halo.model.enums.BlogProperties;\n+import cc.ryanc.halo.model.params.OptionParam;\n import cc.ryanc.halo.repository.OptionRepository;\n import cc.ryanc.halo.service.OptionService;\n import cc.ryanc.halo.service.base.AbstractCrudService;\n@@ -11,8 +13,10 @@\n import org.springframework.util.Assert;\n import org.springframework.util.CollectionUtils;\n \n+import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n+import java.util.stream.Collectors;\n \n /**\n  * OptionService implementation class\n@@ -78,6 +82,16 @@ public void save(Map<String, String> options) {\n         options.forEach((key, value) -> save(key, value));\n     }\n \n+    @Override\n+    public void save(List<OptionParam> optionParams) {\n+        if (CollectionUtils.isEmpty(optionParams)) {\n+            return;\n+        }\n+\n+        // TODO Optimize the query\n+        optionParams.forEach(optionParam -> save(optionParam.getOptionKey(), optionParam.getOptionValue()));\n+    }\n+\n     @Override\n     public void saveProperties(Map<BlogProperties, String> properties) {\n         if (CollectionUtils.isEmpty(properties)) {\n@@ -97,6 +111,11 @@ public Map<String, String> listOptions() {\n         return ServiceUtils.convertToMap(listAll(), Option::getOptionKey, Option::getOptionValue);\n     }\n \n+    @Override\n+    public List<OptionOutputDTO> listDtos() {\n+        return listAll().stream().map(option -> (OptionOutputDTO) new OptionOutputDTO().convertFrom(option)).collect(Collectors.toList());\n+    }\n+\n     /**\n      * Gets option by key\n      *\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/OptionController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/OptionController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/OptionController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/OptionController.java\n@@ -0,0 +1,36 @@\n+package cc.ryanc.halo.web.controller.admin.api;\n+\n+import cc.ryanc.halo.model.dto.OptionOutputDTO;\n+import cc.ryanc.halo.model.params.OptionParam;\n+import cc.ryanc.halo.service.OptionService;\n+import org.springframework.web.bind.annotation.*;\n+\n+import javax.validation.Valid;\n+import java.util.List;\n+\n+/**\n+ * Option Controller.\n+ *\n+ * @author johnniang\n+ * @date 3/20/19\n+ */\n+@RestController\n+@RequestMapping(\"/admin/api/options\")\n+public class OptionController {\n+\n+    private final OptionService optionService;\n+\n+    public OptionController(OptionService optionService) {\n+        this.optionService = optionService;\n+    }\n+\n+    @GetMapping\n+    public List<OptionOutputDTO> listAll() {\n+        return optionService.listDtos();\n+    }\n+\n+    @PostMapping(\"saving\")\n+    public void saveOptions(@Valid @RequestBody List<OptionParam> optionParams) {\n+        optionService.save(optionParams);\n+    }\n+}",
    "output": "Complete saveOptions api"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/UserController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/UserController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/UserController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/UserController.java\n@@ -0,0 +1,28 @@\n+package cc.ryanc.halo.web.controller.admin.api;\n+\n+import cc.ryanc.halo.model.dto.UserOutputDTO;\n+import cc.ryanc.halo.model.entity.User;\n+import cc.ryanc.halo.service.UserService;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+/**\n+ * @author johnniang\n+ * @date 3/19/19\n+ */\n+@RestController\n+@RequestMapping(\"/admin/api/users\")\n+public class UserController {\n+\n+    private final UserService userService;\n+\n+    public UserController(UserService userService) {\n+        this.userService = userService;\n+    }\n+\n+    @GetMapping(\"me\")\n+    public UserOutputDTO getOwnDetail(User user) {\n+        return new UserOutputDTO().convertFrom(user);\n+    }\n+}",
    "output": "Complete get own detail api"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/dto/CountOutputDTO.java b/src/main/java/cc/ryanc/halo/model/dto/CountOutputDTO.java\n--- a/src/main/java/cc/ryanc/halo/model/dto/CountOutputDTO.java\n+++ b/src/main/java/cc/ryanc/halo/model/dto/CountOutputDTO.java\n@@ -0,0 +1,33 @@\n+package cc.ryanc.halo.model.dto;\n+\n+import lombok.Data;\n+\n+/**\n+ * Count output DTO.\n+ *\n+ * @author johnniang\n+ * @date 3/19/19\n+ */\n+@Data\n+public class CountOutputDTO {\n+\n+    /**\n+     * Post count.\n+     */\n+    private Long postCount;\n+\n+    /**\n+     * Comment count.\n+     */\n+    private Long commentCount;\n+\n+    /**\n+     * Attachment count.\n+     */\n+    private Long attachmentCount;\n+\n+    /**\n+     * Establish days\n+     */\n+    private Long establishDays;\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/AdminController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/AdminController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/AdminController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/AdminController.java\n@@ -0,0 +1,49 @@\n+package cc.ryanc.halo.web.controller.admin.api;\n+\n+import cc.ryanc.halo.model.dto.CountOutputDTO;\n+import cc.ryanc.halo.model.enums.BlogProperties;\n+import cc.ryanc.halo.model.enums.PostStatus;\n+import cc.ryanc.halo.model.enums.PostType;\n+import cc.ryanc.halo.service.AttachmentService;\n+import cc.ryanc.halo.service.CommentService;\n+import cc.ryanc.halo.service.OptionService;\n+import cc.ryanc.halo.service.PostService;\n+import io.swagger.annotations.ApiOperation;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+/**\n+ * @author johnniang\n+ * @date 3/19/19\n+ */\n+@RestController\n+@RequestMapping(\"/admin/api\")\n+public class AdminController {\n+\n+    private final PostService postService;\n+\n+    private final AttachmentService attachmentService;\n+\n+    private final CommentService commentService;\n+\n+    private final OptionService optionService;\n+\n+    public AdminController(PostService postService, AttachmentService attachmentService, CommentService commentService, OptionService optionService) {\n+        this.postService = postService;\n+        this.attachmentService = attachmentService;\n+        this.commentService = commentService;\n+        this.optionService = optionService;\n+    }\n+\n+    @GetMapping(\"counts\")\n+    @ApiOperation(\"Gets count info\")\n+    public CountOutputDTO getCount() {\n+        CountOutputDTO countOutputDTO = new CountOutputDTO();\n+        countOutputDTO.setPostCount(postService.countByStatus(PostStatus.PUBLISHED, PostType.POST));\n+        countOutputDTO.setAttachmentCount(attachmentService.count());\n+        countOutputDTO.setCommentCount(commentService.count());\n+        countOutputDTO.setEstablishDays(Long.valueOf(optionService.getByProperty(BlogProperties.WIDGET_DAYCOUNT).orElse(\"0\")));\n+        return countOutputDTO;\n+    }\n+}",
    "output": "Complete count api"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/config/SwaggerConfiguration.java b/src/main/java/cc/ryanc/halo/config/SwaggerConfiguration.java\n--- a/src/main/java/cc/ryanc/halo/config/SwaggerConfiguration.java\n+++ b/src/main/java/cc/ryanc/halo/config/SwaggerConfiguration.java\n@@ -1,15 +1,18 @@\n package cc.ryanc.halo.config;\n \n import cc.ryanc.halo.config.properties.HaloProperties;\n+import cc.ryanc.halo.model.entity.User;\n+import cc.ryanc.halo.security.support.UserDetail;\n import com.fasterxml.classmate.TypeResolver;\n import io.swagger.models.auth.In;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.core.Ordered;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.PageImpl;\n import org.springframework.data.domain.Pageable;\n import org.springframework.data.domain.Sort;\n-import org.springframework.http.HttpHeaders;\n import org.springframework.lang.NonNull;\n import org.springframework.util.Assert;\n import org.springframework.web.bind.annotation.RequestMethod;\n@@ -20,6 +23,7 @@\n import springfox.documentation.spi.DocumentationType;\n import springfox.documentation.spi.service.contexts.SecurityContext;\n import springfox.documentation.spring.web.plugins.Docket;\n+import springfox.documentation.spring.web.plugins.JacksonSerializerConvention;\n import springfox.documentation.swagger.web.SecurityConfiguration;\n import springfox.documentation.swagger.web.SecurityConfigurationBuilder;\n import springfox.documentation.swagger2.annotations.EnableSwagger2;\n@@ -139,7 +143,7 @@ private ApiInfo apiInfo() {\n     }\n \n     @Bean\n-    public AlternateTypeRuleConvention pageableConvention(final TypeResolver resolver) {\n+    public AlternateTypeRuleConvention customizeConvention(TypeResolver resolver) {\n         return new AlternateTypeRuleConvention() {\n             @Override\n             public int getOrder() {\n@@ -149,6 +153,8 @@ public int getOrder() {\n             @Override\n             public List<AlternateTypeRule> rules() {\n                 return Arrays.asList(\n+                        newRule(User.class, emptyMixin(User.class)),\n+                        newRule(UserDetail.class, emptyMixin(UserDetail.class)),\n                         newRule(resolver.resolve(Pageable.class), resolver.resolve(pageableMixin())),\n                         newRule(resolver.resolve(Sort.class), resolver.resolve(sortMixin())));\n             }\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/base/CommonResultControllerAdvice.java b/src/main/java/cc/ryanc/halo/web/controller/base/CommonResultControllerAdvice.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/base/CommonResultControllerAdvice.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/base/CommonResultControllerAdvice.java\n@@ -15,7 +15,7 @@\n  *\n  * @author johnniang\n  */\n-@ControllerAdvice(\"cc.ryanc.halo.web.controller.api\")\n+@ControllerAdvice(\"cc.ryanc.halo.web.controller\")\n public class CommonResultControllerAdvice extends AbstractMappingJacksonResponseBodyAdvice {\n \n     @Override\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/support/PageJacksonSerializer.java b/src/main/java/cc/ryanc/halo/web/controller/support/PageJacksonSerializer.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/support/PageJacksonSerializer.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/support/PageJacksonSerializer.java\n@@ -24,7 +24,12 @@ public void serialize(Page page, JsonGenerator generator, SerializerProvider ser\n         generator.writeNumberField(\"total\", page.getTotalElements());\n         generator.writeNumberField(\"page\", page.getNumber());\n         generator.writeNumberField(\"rpp\", page.getSize());\n-\n+        generator.writeBooleanField(\"hasNext\", page.hasNext());\n+        generator.writeBooleanField(\"hasPrevious\", page.hasPrevious());\n+        generator.writeBooleanField(\"isFirst\", page.isFirst());\n+        generator.writeBooleanField(\"isLast\", page.isLast());\n+        generator.writeBooleanField(\"isEmpty\", page.isEmpty());\n+        generator.writeBooleanField(\"hasContent\", page.hasContent());\n         generator.writeEndObject();\n     }\n }",
    "output": "Wrap response globally"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/CommentController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/CommentController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/CommentController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/CommentController.java\n@@ -0,0 +1,33 @@\n+package cc.ryanc.halo.web.controller.admin.api;\n+\n+import cc.ryanc.halo.model.vo.CommentVO;\n+import cc.ryanc.halo.service.CommentService;\n+import io.swagger.annotations.ApiOperation;\n+import org.springframework.data.domain.Page;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+/**\n+ * Comment controller.\n+ *\n+ * @author johnniang\n+ * @date 3/19/19\n+ */\n+@RestController\n+@RequestMapping(\"/admin/api/comments\")\n+public class CommentController {\n+\n+    private final CommentService commentService;\n+\n+    public CommentController(CommentService commentService) {\n+        this.commentService = commentService;\n+    }\n+\n+    @GetMapping(\"latest\")\n+    @ApiOperation(\"Pages latest comments\")\n+    public Page<CommentVO> pageLatest(@RequestParam(name = \"top\", defaultValue = \"10\") int top) {\n+        return commentService.pageLatest(top);\n+    }\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/LogController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/LogController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/LogController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/LogController.java\n@@ -26,7 +26,7 @@ public LogController(LogService logService) {\n     }\n \n     @GetMapping(\"latest\")\n-    @ApiOperation(\"Page latest logs\")\n+    @ApiOperation(\"Pages latest logs\")\n     public Page<LogOutputDTO> pageLatest(@RequestParam(name = \"top\", defaultValue = \"10\") int top) {\n         return logService.pageLatest(top);\n     }\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/PostController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/PostController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/PostController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/PostController.java\n@@ -26,7 +26,7 @@ public PostController(PostService postService) {\n     }\n \n     @GetMapping(\"latest\")\n-    @ApiOperation(\"Page latest post\")\n+    @ApiOperation(\"Pages latest post\")\n     public Page<PostSimpleOutputDTO> pageLatest(@RequestParam(name = \"top\", defaultValue = \"10\") int top) {\n         return postService.pageLatest(top);\n     }",
    "output": "Add CommentController"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/config/SwaggerConfiguration.java b/src/main/java/cc/ryanc/halo/config/SwaggerConfiguration.java\n--- a/src/main/java/cc/ryanc/halo/config/SwaggerConfiguration.java\n+++ b/src/main/java/cc/ryanc/halo/config/SwaggerConfiguration.java\n@@ -72,7 +72,7 @@ public Docket haloAdminApi() {\n         log.debug(\"Doc disabled: [{}]\", haloProperties.getDocDisabled());\n         return buildApiDocket(\"cc.ryanc.halo.admin\",\n                 \"cc.ryanc.halo.web.controller.admin\",\n-                \"/api/admin/**\")\n+                \"/admin/api/**\")\n                 .enable(!haloProperties.getDocDisabled());\n     }\n \n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/LogController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/LogController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/LogController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/LogController.java\n@@ -0,0 +1,33 @@\n+package cc.ryanc.halo.web.controller.admin.api;\n+\n+import cc.ryanc.halo.model.dto.LogOutputDTO;\n+import cc.ryanc.halo.service.LogService;\n+import io.swagger.annotations.ApiOperation;\n+import org.springframework.data.domain.Page;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+/**\n+ * Log controller.\n+ *\n+ * @author johnniang\n+ * @date 3/19/19\n+ */\n+@RestController\n+@RequestMapping(\"/admin/api/logs\")\n+public class LogController {\n+\n+    private final LogService logService;\n+\n+    public LogController(LogService logService) {\n+        this.logService = logService;\n+    }\n+\n+    @GetMapping(\"latest\")\n+    @ApiOperation(\"Page latest logs\")\n+    public Page<LogOutputDTO> pageLatest(@RequestParam(name = \"top\", defaultValue = \"10\") int top) {\n+        return logService.pageLatest(top);\n+    }\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/api/PostController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/api/PostController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/api/PostController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/api/PostController.java\n@@ -2,6 +2,7 @@\n \n import cc.ryanc.halo.model.dto.post.PostSimpleOutputDTO;\n import cc.ryanc.halo.service.PostService;\n+import io.swagger.annotations.ApiOperation;\n import org.springframework.data.domain.Page;\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.RequestMapping;\n@@ -15,7 +16,7 @@\n  * @date 3/19/19\n  */\n @RestController\n-@RequestMapping(\"/api/admin/posts\")\n+@RequestMapping(\"/admin/api/posts\")\n public class PostController {\n \n     private final PostService postService;\n@@ -25,6 +26,7 @@ public PostController(PostService postService) {\n     }\n \n     @GetMapping(\"latest\")\n+    @ApiOperation(\"Page latest post\")\n     public Page<PostSimpleOutputDTO> pageLatest(@RequestParam(name = \"top\", defaultValue = \"10\") int top) {\n         return postService.pageLatest(top);\n     }",
    "output": "Add LogController"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/config/WebMvcAutoConfiguration.java b/src/main/java/cc/ryanc/halo/config/WebMvcAutoConfiguration.java\n--- a/src/main/java/cc/ryanc/halo/config/WebMvcAutoConfiguration.java\n+++ b/src/main/java/cc/ryanc/halo/config/WebMvcAutoConfiguration.java\n@@ -1,16 +1,23 @@\n package cc.ryanc.halo.config;\n \n import cc.ryanc.halo.config.properties.HaloProperties;\n-import cc.ryanc.halo.security.resolver.AuthenticationArgumentResolver;\n import cc.ryanc.halo.factory.StringToEnumConverterFactory;\n+import cc.ryanc.halo.security.resolver.AuthenticationArgumentResolver;\n+import cc.ryanc.halo.web.controller.support.PageJacksonSerializer;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.jackson.JsonComponentModule;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.ComponentScan;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.PropertySource;\n-import org.springframework.web.method.support.HandlerMethodArgumentResolver;\n+import org.springframework.data.domain.PageImpl;\n import org.springframework.format.FormatterRegistry;\n+import org.springframework.http.converter.HttpMessageConverter;\n+import org.springframework.http.converter.json.Jackson2ObjectMapperBuilder;\n+import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;\n+import org.springframework.web.method.support.HandlerMethodArgumentResolver;\n import org.springframework.web.servlet.LocaleResolver;\n import org.springframework.web.servlet.config.annotation.EnableWebMvc;\n import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\n@@ -39,6 +46,20 @@ public class WebMvcAutoConfiguration implements WebMvcConfigurer {\n     @Autowired\n     private HaloProperties haloProperties;\n \n+    @Override\n+    public void extendMessageConverters(List<HttpMessageConverter<?>> converters) {\n+        converters.stream()\n+                .filter(c -> c instanceof MappingJackson2HttpMessageConverter)\n+                .findFirst().ifPresent(converter -> {\n+            MappingJackson2HttpMessageConverter mappingJackson2HttpMessageConverter = (MappingJackson2HttpMessageConverter) converter;\n+            Jackson2ObjectMapperBuilder builder = Jackson2ObjectMapperBuilder.json();\n+            JsonComponentModule module = new JsonComponentModule();\n+            module.addSerializer(PageImpl.class, new PageJacksonSerializer());\n+            ObjectMapper objectMapper = builder.modules(module).build();\n+            mappingJackson2HttpMessageConverter.setObjectMapper(objectMapper);\n+        });\n+    }\n+\n     @Override\n     public void addArgumentResolvers(List<HandlerMethodArgumentResolver> resolvers) {\n         resolvers.add(new AuthenticationArgumentResolver());\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/support/PageJacksonSerializer.java b/src/main/java/cc/ryanc/halo/web/controller/support/PageJacksonSerializer.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/support/PageJacksonSerializer.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/support/PageJacksonSerializer.java\n@@ -1,9 +1,8 @@\n-package cc.ryanc.halo.web.support;\n+package cc.ryanc.halo.web.controller.support;\n \n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.databind.JsonSerializer;\n import com.fasterxml.jackson.databind.SerializerProvider;\n-import org.springframework.boot.jackson.JsonComponent;\n import org.springframework.data.domain.Page;\n \n import java.io.IOException;\n@@ -14,7 +13,6 @@\n  * @author johnniang\n  * @date 3/19/19\n  */\n-@JsonComponent\n public class PageJacksonSerializer extends JsonSerializer<Page> {\n \n     @Override",
    "output": "Registry PageJacksonSerializer manually"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/web/support/PageJacksonSerializer.java b/src/main/java/cc/ryanc/halo/web/support/PageJacksonSerializer.java\n--- a/src/main/java/cc/ryanc/halo/web/support/PageJacksonSerializer.java\n+++ b/src/main/java/cc/ryanc/halo/web/support/PageJacksonSerializer.java\n@@ -0,0 +1,32 @@\n+package cc.ryanc.halo.web.support;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import org.springframework.boot.jackson.JsonComponent;\n+import org.springframework.data.domain.Page;\n+\n+import java.io.IOException;\n+\n+/**\n+ * Custom serializer for Page object.\n+ *\n+ * @author johnniang\n+ * @date 3/19/19\n+ */\n+@JsonComponent\n+public class PageJacksonSerializer extends JsonSerializer<Page> {\n+\n+    @Override\n+    public void serialize(Page page, JsonGenerator generator, SerializerProvider serializers) throws IOException {\n+        generator.writeStartObject();\n+\n+        generator.writeObjectField(\"content\", page.getContent());\n+        generator.writeNumberField(\"pages\", page.getTotalPages());\n+        generator.writeNumberField(\"total\", page.getTotalElements());\n+        generator.writeNumberField(\"page\", page.getNumber());\n+        generator.writeNumberField(\"rpp\", page.getSize());\n+\n+        generator.writeEndObject();\n+    }\n+}",
    "output": "Add PageJacksonSerializer for unifying page response"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/support/BaseResponse.java b/src/main/java/cc/ryanc/halo/model/support/BaseResponse.java\n--- a/src/main/java/cc/ryanc/halo/model/support/BaseResponse.java\n+++ b/src/main/java/cc/ryanc/halo/model/support/BaseResponse.java\n@@ -12,7 +12,7 @@\n @EqualsAndHashCode\n @NoArgsConstructor\n @AllArgsConstructor\n-public class ErrorResponse {\n+public class BaseResponse {\n \n     private Integer status;\n \n\ndiff --git a/src/main/java/cc/ryanc/halo/security/handler/DefaultAuthenticationFailureHandler.java b/src/main/java/cc/ryanc/halo/security/handler/DefaultAuthenticationFailureHandler.java\n--- a/src/main/java/cc/ryanc/halo/security/handler/DefaultAuthenticationFailureHandler.java\n+++ b/src/main/java/cc/ryanc/halo/security/handler/DefaultAuthenticationFailureHandler.java\n@@ -1,7 +1,7 @@\n package cc.ryanc.halo.security.handler;\n \n import cc.ryanc.halo.exception.HaloException;\n-import cc.ryanc.halo.model.support.ErrorResponse;\n+import cc.ryanc.halo.model.support.BaseResponse;\n import cc.ryanc.halo.utils.ExceptionUtils;\n import cn.hutool.extra.servlet.ServletUtil;\n import com.fasterxml.jackson.databind.ObjectMapper;\n@@ -36,7 +36,7 @@ public DefaultAuthenticationFailureHandler(boolean productionEnv,\n     public void onFailure(HttpServletRequest request, HttpServletResponse response, HaloException exception) throws IOException, ServletException {\n         log.warn(\"Handle unsuccessful authentication, ip: [{}]\", ServletUtil.getClientIP(request));\n \n-        ErrorResponse errorDetail = new ErrorResponse();\n+        BaseResponse errorDetail = new BaseResponse();\n \n         errorDetail.setMessage(exception.getMessage());\n \n\ndiff --git a/src/main/java/cc/ryanc/halo/service/CommentService.java b/src/main/java/cc/ryanc/halo/service/CommentService.java\n--- a/src/main/java/cc/ryanc/halo/service/CommentService.java\n+++ b/src/main/java/cc/ryanc/halo/service/CommentService.java\n@@ -18,5 +18,5 @@ public interface CommentService extends CrudService<Comment, Long> {\n      * @param top top number must not be less than 0\n      * @return a page of comments\n      */\n-    Page<CommentVO> listLatest(int top);\n+    Page<CommentVO> pageLatest(int top);\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/LogService.java b/src/main/java/cc/ryanc/halo/service/LogService.java\n--- a/src/main/java/cc/ryanc/halo/service/LogService.java\n+++ b/src/main/java/cc/ryanc/halo/service/LogService.java\n@@ -18,5 +18,5 @@ public interface LogService extends CrudService<Log, Long> {\n      * @param top top number must not be less than 0\n      * @return a page of latest logs\n      */\n-    Page<LogOutputDTO> listLatest(int top);\n+    Page<LogOutputDTO> pageLatest(int top);\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/PostService.java b/src/main/java/cc/ryanc/halo/service/PostService.java\n--- a/src/main/java/cc/ryanc/halo/service/PostService.java\n+++ b/src/main/java/cc/ryanc/halo/service/PostService.java\n@@ -44,7 +44,7 @@ public interface PostService extends CrudService<Post, Integer> {\n      * @return latest posts\n      */\n     @NonNull\n-    Page<PostSimpleOutputDTO> listLatest(int top);\n+    Page<PostSimpleOutputDTO> pageLatest(int top);\n \n     /**\n      * List by status and type\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/CommentServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/CommentServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/CommentServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/CommentServiceImpl.java\n@@ -39,7 +39,7 @@ public CommentServiceImpl(CommentRepository commentRepository,\n     }\n \n     @Override\n-    public Page<CommentVO> listLatest(int top) {\n+    public Page<CommentVO> pageLatest(int top) {\n         Assert.isTrue(top > 0, \"Top number must not be less than 0\");\n \n         // Build page request\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/LogServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/LogServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/LogServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/LogServiceImpl.java\n@@ -28,7 +28,7 @@ public LogServiceImpl(LogRepository logRepository) {\n     }\n \n     @Override\n-    public Page<LogOutputDTO> listLatest(int top) {\n+    public Page<LogOutputDTO> pageLatest(int top) {\n         Assert.isTrue(top > 0, \"Top number must not be less than 0\");\n \n         // Build page request\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/OptionServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/OptionServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/OptionServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/OptionServiceImpl.java\n@@ -30,7 +30,7 @@ public OptionServiceImpl(OptionRepository optionRepository) {\n     }\n \n     /**\n-     * Save one option\n+     * Saves one option\n      *\n      * @param key   key\n      * @param value value\n@@ -45,24 +45,24 @@ public void save(String key, String value) {\n             return;\n         }\n \n-        Option options = optionRepository.findByOptionKey(key).map(option -> {\n+        Option option = optionRepository.findByOptionKey(key).map(anOption -> {\n             // Exist\n-            option.setOptionValue(value);\n-            return option;\n+            anOption.setOptionValue(value);\n+            return anOption;\n         }).orElseGet(() -> {\n             // Not exist\n-            Option option = new Option();\n-            option.setOptionKey(key);\n-            option.setOptionValue(value);\n-            return option;\n+            Option anOption = new Option();\n+            anOption.setOptionKey(key);\n+            anOption.setOptionValue(value);\n+            return anOption;\n         });\n \n         // Save or update the options\n-        optionRepository.save(options);\n+        optionRepository.save(option);\n     }\n \n     /**\n-     * Save multiple options\n+     * Saves multiple options\n      *\n      * @param options options\n      */\n@@ -74,7 +74,7 @@ public void save(Map<String, String> options) {\n     }\n \n     /**\n-     * Get all options\n+     * Gets all options\n      *\n      * @return Map\n      */\n@@ -84,7 +84,7 @@ public Map<String, String> listOptions() {\n     }\n \n     /**\n-     * Get option by key\n+     * Gets option by key\n      *\n      * @param key key\n      * @return String\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java\n@@ -59,7 +59,7 @@ public void remove(Integer id) {\n     }\n \n     @Override\n-    public Page<PostSimpleOutputDTO> listLatest(int top) {\n+    public Page<PostSimpleOutputDTO> pageLatest(int top) {\n         Assert.isTrue(top > 0, \"Top number must not be less than 0\");\n \n         PageRequest latestPageable = PageRequest.of(0, top, Sort.by(Sort.Direction.DESC, \"editTime\"));\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/AdminController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/AdminController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/AdminController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/AdminController.java\n@@ -52,11 +52,11 @@ public AdminController(PostService postService,\n     @GetMapping(value = {\"\", \"index\"})\n     public String admin(Model model) {\n \n-        Page<PostSimpleOutputDTO> postPage = postService.listLatest(5);\n+        Page<PostSimpleOutputDTO> postPage = postService.pageLatest(5);\n \n-        Page<CommentVO> commentPage = commentService.listLatest(5);\n+        Page<CommentVO> commentPage = commentService.pageLatest(5);\n \n-        Page<LogOutputDTO> logPage = logService.listLatest(5);\n+        Page<LogOutputDTO> logPage = logService.pageLatest(5);\n \n         model.addAttribute(\"postsCount\", postPage.getTotalElements());\n         model.addAttribute(\"commentsCount\", commentPage.getTotalElements());",
    "output": "Rename ErrorResponse into BaseResponse"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/repository/UserRepository.java b/src/main/java/cc/ryanc/halo/repository/UserRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/UserRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/UserRepository.java\n@@ -21,4 +21,13 @@ public interface UserRepository extends BaseRepository<User, Integer> {\n      */\n     @NonNull\n     Optional<User> findByUsername(@NonNull String username);\n+\n+    /**\n+     * Gets user by email.\n+     *\n+     * @param email email must not be blank\n+     * @return an optional user\n+     */\n+    @NonNull\n+    Optional<User> findByEmail(@NonNull String email);\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/UserService.java b/src/main/java/cc/ryanc/halo/service/UserService.java\n--- a/src/main/java/cc/ryanc/halo/service/UserService.java\n+++ b/src/main/java/cc/ryanc/halo/service/UserService.java\n@@ -38,19 +38,38 @@ public interface UserService extends CrudService<User, Integer> {\n     /**\n      * Gets non null user by username.\n      *\n+     * @param username username\n      * @return user info\n      * @throws NotFoundException throws when the username does not exist\n      */\n     @NonNull\n     User getByUsernameOfNonNull(@NonNull String username);\n \n+    /**\n+     * Gets user by email.\n+     *\n+     * @param email email must not be blank\n+     * @return an optional user\n+     */\n+    @NonNull\n+    Optional<User> getByEmail(@NonNull String email);\n+\n+    /**\n+     * Gets non null user by email.\n+     *\n+     * @param email email\n+     * @return user info\n+     * @throws NotFoundException throws when the username does not exist\n+     */\n+    User getByEmailOfNonNull(@NonNull String email);\n+\n     /**\n      * Logins by username and password.\n      *\n-     * @param username username must not be blank\n+     * @param key      username or email must not be blank\n      * @param password password must not be blank\n      * @return user info\n      */\n     @NonNull\n-    User login(@NonNull String username, @NonNull String password);\n+    User login(@NonNull String key, @NonNull String password);\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/UserServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/UserServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/UserServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/UserServiceImpl.java\n@@ -8,6 +8,8 @@\n import cc.ryanc.halo.service.UserService;\n import cc.ryanc.halo.service.base.AbstractCrudService;\n import cc.ryanc.halo.utils.DateUtils;\n+import cc.ryanc.halo.utils.LocaleMessageUtil;\n+import cn.hutool.core.lang.Validator;\n import cn.hutool.crypto.digest.BCrypt;\n import org.springframework.stereotype.Service;\n import org.springframework.util.Assert;\n@@ -28,11 +30,15 @@ public class UserServiceImpl extends AbstractCrudService<User, Integer> implemen\n \n     private final StringCacheStore stringCacheStore;\n \n+    private final LocaleMessageUtil localeMessageUtil;\n+\n     public UserServiceImpl(UserRepository userRepository,\n-                           StringCacheStore stringCacheStore) {\n+                           StringCacheStore stringCacheStore,\n+                           LocaleMessageUtil localeMessageUtil) {\n         super(userRepository);\n         this.userRepository = userRepository;\n         this.stringCacheStore = stringCacheStore;\n+        this.localeMessageUtil = localeMessageUtil;\n     }\n \n     @Override\n@@ -45,19 +51,41 @@ public User getByUsernameOfNonNull(String username) {\n         return getByUsername(username).orElseThrow(() -> new NotFoundException(\"The username dose not exist\").setErrorData(username));\n     }\n \n+    /**\n+     * Gets user by email.\n+     *\n+     * @param email email must not be blank\n+     * @return an optional user\n+     */\n+    @Override\n+    public Optional<User> getByEmail(String email) {\n+        return userRepository.findByEmail(email);\n+    }\n+\n+    /**\n+     * Gets non null user by email.\n+     *\n+     * @param email email\n+     * @return user info\n+     * @throws NotFoundException throws when the username does not exist\n+     */\n+    @Override\n+    public User getByEmailOfNonNull(String email) {\n+        return getByEmail(email).orElseThrow(() -> new NotFoundException(\"The email dose not exist\").setErrorData(email));\n+    }\n+\n     @Override\n-    public User login(String username, String password) {\n-        Assert.hasText(username, \"Username must not be blank\");\n+    public User login(String key, String password) {\n+        Assert.hasText(key, \"Username or email must not be blank\");\n         Assert.hasText(password, \"Password must not be blank\");\n \n         // Ger user by username\n-        User user = getByUsernameOfNonNull(username);\n+        User user = Validator.isEmail(key) ? getByEmailOfNonNull(key) : getByUsernameOfNonNull(key);\n \n         // Check expiration\n         if (user.getExpireTime() != null && DateUtils.now().before(user.getExpireTime())) {\n             // If expired\n-            // TODO replace by i18n\n-            throw new BadRequestException(\"You have been locked temporarily\");\n+            throw new BadRequestException(localeMessageUtil.getMessage(\"code.admin.login.disabled\"));\n         }\n \n \n@@ -77,8 +105,7 @@ public User login(String username, String password) {\n \n             stringCacheStore.put(LOGIN_FAILURE_COUNT_KEY, loginFailureCount.toString(), LOCK_MINUTES, TimeUnit.MINUTES);\n \n-            // TODO replace by i18n\n-            throw new BadRequestException(\"Username or password is mismatched, last \" + (MAX_LOGIN_TRY - loginFailureCount) + \" retry(s)\");\n+            throw new BadRequestException(localeMessageUtil.getMessage(\"code.admin.login.failed\", new Integer[]{(MAX_LOGIN_TRY - loginFailureCount)}));\n         }\n \n         // TODO Set session",
    "output": "Merge remote-tracking branch 'origin/v1' into v1"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/repository/UserRepository.java b/src/main/java/cc/ryanc/halo/repository/UserRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/UserRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/UserRepository.java\n@@ -21,4 +21,13 @@ public interface UserRepository extends BaseRepository<User, Integer> {\n      */\n     @NonNull\n     Optional<User> findByUsername(@NonNull String username);\n+\n+    /**\n+     * Gets user by email.\n+     *\n+     * @param email email must not be blank\n+     * @return an optional user\n+     */\n+    @NonNull\n+    Optional<User> findByEmail(@NonNull String email);\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/UserService.java b/src/main/java/cc/ryanc/halo/service/UserService.java\n--- a/src/main/java/cc/ryanc/halo/service/UserService.java\n+++ b/src/main/java/cc/ryanc/halo/service/UserService.java\n@@ -38,19 +38,38 @@ public interface UserService extends CrudService<User, Integer> {\n     /**\n      * Gets non null user by username.\n      *\n+     * @param username username\n      * @return user info\n      * @throws NotFoundException throws when the username does not exist\n      */\n     @NonNull\n     User getByUsernameOfNonNull(@NonNull String username);\n \n+    /**\n+     * Gets user by email.\n+     *\n+     * @param email email must not be blank\n+     * @return an optional user\n+     */\n+    @NonNull\n+    Optional<User> getByEmail(@NonNull String email);\n+\n+    /**\n+     * Gets non null user by email.\n+     *\n+     * @param email email\n+     * @return user info\n+     * @throws NotFoundException throws when the username does not exist\n+     */\n+    User getByEmailOfNonNull(@NonNull String email);\n+\n     /**\n      * Logins by username and password.\n      *\n-     * @param username username must not be blank\n+     * @param key      username or email must not be blank\n      * @param password password must not be blank\n      * @return user info\n      */\n     @NonNull\n-    User login(@NonNull String username, @NonNull String password);\n+    User login(@NonNull String key, @NonNull String password);\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/UserServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/UserServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/UserServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/UserServiceImpl.java\n@@ -8,6 +8,8 @@\n import cc.ryanc.halo.service.UserService;\n import cc.ryanc.halo.service.base.AbstractCrudService;\n import cc.ryanc.halo.utils.DateUtils;\n+import cc.ryanc.halo.utils.LocaleMessageUtil;\n+import cn.hutool.core.lang.Validator;\n import cn.hutool.crypto.digest.BCrypt;\n import org.springframework.stereotype.Service;\n import org.springframework.util.Assert;\n@@ -28,11 +30,15 @@ public class UserServiceImpl extends AbstractCrudService<User, Integer> implemen\n \n     private final StringCacheStore stringCacheStore;\n \n+    private final LocaleMessageUtil localeMessageUtil;\n+\n     public UserServiceImpl(UserRepository userRepository,\n-                           StringCacheStore stringCacheStore) {\n+                           StringCacheStore stringCacheStore,\n+                           LocaleMessageUtil localeMessageUtil) {\n         super(userRepository);\n         this.userRepository = userRepository;\n         this.stringCacheStore = stringCacheStore;\n+        this.localeMessageUtil = localeMessageUtil;\n     }\n \n     @Override\n@@ -45,19 +51,41 @@ public User getByUsernameOfNonNull(String username) {\n         return getByUsername(username).orElseThrow(() -> new NotFoundException(\"The username dose not exist\").setErrorData(username));\n     }\n \n+    /**\n+     * Gets user by email.\n+     *\n+     * @param email email must not be blank\n+     * @return an optional user\n+     */\n+    @Override\n+    public Optional<User> getByEmail(String email) {\n+        return userRepository.findByEmail(email);\n+    }\n+\n+    /**\n+     * Gets non null user by email.\n+     *\n+     * @param email email\n+     * @return user info\n+     * @throws NotFoundException throws when the username does not exist\n+     */\n+    @Override\n+    public User getByEmailOfNonNull(String email) {\n+        return getByEmail(email).orElseThrow(() -> new NotFoundException(\"The email dose not exist\").setErrorData(email));\n+    }\n+\n     @Override\n-    public User login(String username, String password) {\n-        Assert.hasText(username, \"Username must not be blank\");\n+    public User login(String key, String password) {\n+        Assert.hasText(key, \"Username or email must not be blank\");\n         Assert.hasText(password, \"Password must not be blank\");\n \n         // Ger user by username\n-        User user = getByUsernameOfNonNull(username);\n+        User user = Validator.isEmail(key) ? getByEmailOfNonNull(key) : getByUsernameOfNonNull(key);\n \n         // Check expiration\n         if (user.getExpireTime() != null && DateUtils.now().before(user.getExpireTime())) {\n             // If expired\n-            // TODO replace by i18n\n-            throw new BadRequestException(\"You have been locked temporarily\");\n+            throw new BadRequestException(localeMessageUtil.getMessage(\"code.admin.login.disabled\"));\n         }\n \n \n@@ -77,8 +105,7 @@ public User login(String username, String password) {\n \n             stringCacheStore.put(LOGIN_FAILURE_COUNT_KEY, loginFailureCount.toString(), LOCK_MINUTES, TimeUnit.MINUTES);\n \n-            // TODO replace by i18n\n-            throw new BadRequestException(\"Username or password is mismatched, last \" + (MAX_LOGIN_TRY - loginFailureCount) + \" retry(s)\");\n+            throw new BadRequestException(localeMessageUtil.getMessage(\"code.admin.login.failed\", new Integer[]{(MAX_LOGIN_TRY - loginFailureCount)}));\n         }\n \n         // TODO Set session",
    "output": "Complate admin login service method"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/cache/StringCacheStore.java b/src/main/java/cc/ryanc/halo/cache/StringCacheStore.java\n--- a/src/main/java/cc/ryanc/halo/cache/StringCacheStore.java\n+++ b/src/main/java/cc/ryanc/halo/cache/StringCacheStore.java\n@@ -21,7 +21,7 @@\n @Slf4j\n public abstract class StringCacheStore implements CacheStore<String, String> {\n \n-    public <T> void putForWechat(String key, T value, long timeout, TimeUnit timeUnit) {\n+    public <T> void putForString(String key, T value, long timeout, TimeUnit timeUnit) {\n         Assert.hasText(key, \"Cache key must not be blank\");\n         Assert.notNull(value, \"Cache value must not be null\");\n         Assert.isTrue(timeout > 0, \"Timeout must not be less than 0\");\n@@ -59,7 +59,7 @@ public <T> void putForWechat(String key, T value, long timeout, TimeUnit timeUni\n \n     @SuppressWarnings(\"unchecked\")\n     @NonNull\n-    public <T> Optional<T> getForWechat(@NonNull String key, @NonNull Class<T> type) {\n+    public <T> Optional<T> getForString(@NonNull String key, @NonNull Class<T> type) {\n         Assert.hasText(key, \"Cache key must not be blank\");\n         Assert.notNull(type, \"Cache type must not be null\");\n ",
    "output": "Change StringCacheStore method names"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/cache/CacheStore.java b/src/main/java/cc/ryanc/halo/cache/CacheStore.java\n--- a/src/main/java/cc/ryanc/halo/cache/CacheStore.java\n+++ b/src/main/java/cc/ryanc/halo/cache/CacheStore.java\n@@ -0,0 +1,44 @@\n+package cc.ryanc.halo.cache;\n+\n+import org.springframework.lang.NonNull;\n+\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Cache store interface.\n+ *\n+ * @param <K> cache key type\n+ * @param <V> cache value type\n+ * @author johnniang\n+ * *\n+ */\n+public interface CacheStore<K, V> {\n+\n+    /**\n+     * Gets by cache key.\n+     *\n+     * @param key must not be null\n+     * @return cache value\n+     */\n+    @NonNull\n+    Optional<V> get(@NonNull K key);\n+\n+    /**\n+     * Puts a cache.\n+     *\n+     * @param key      cache key must not be null\n+     * @param value    cache value must not be null\n+     * @param timeout  the key expiration must not be less than 0\n+     * @param timeUnit timeout unit\n+     */\n+    void put(@NonNull K key, @NonNull V value, long timeout, @NonNull TimeUnit timeUnit);\n+\n+    /**\n+     * Delete a key.\n+     *\n+     * @param key cache key must not be null\n+     */\n+    void delete(@NonNull K key);\n+\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/cache/CacheWrapper.java b/src/main/java/cc/ryanc/halo/cache/CacheWrapper.java\n--- a/src/main/java/cc/ryanc/halo/cache/CacheWrapper.java\n+++ b/src/main/java/cc/ryanc/halo/cache/CacheWrapper.java\n@@ -0,0 +1,38 @@\n+package cc.ryanc.halo.cache;\n+\n+import lombok.*;\n+\n+import java.util.Date;\n+\n+/**\n+ * Cache wrapper.\n+ *\n+ * @author johnniang\n+ */\n+@Data\n+@EqualsAndHashCode\n+@ToString\n+@NoArgsConstructor\n+@AllArgsConstructor\n+public class CacheWrapper<T> {\n+\n+    /**\n+     * Cache key.\n+     */\n+    private String key;\n+\n+    /**\n+     * Cache data\n+     */\n+    private T data;\n+\n+    /**\n+     * Expired time.\n+     */\n+    private Date expireAt;\n+\n+    /**\n+     * Create time.\n+     */\n+    private Date createAt;\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/cache/InMemoryCacheStore.java b/src/main/java/cc/ryanc/halo/cache/InMemoryCacheStore.java\n--- a/src/main/java/cc/ryanc/halo/cache/InMemoryCacheStore.java\n+++ b/src/main/java/cc/ryanc/halo/cache/InMemoryCacheStore.java\n@@ -0,0 +1,31 @@\n+package cc.ryanc.halo.cache;\n+\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * In-memory cache store.\n+ *\n+ * @author johnniang\n+ */\n+public class InMemoryCacheStore extends StringCacheStore {\n+\n+    private final static ConcurrentHashMap<String, String> cacheContainer = new ConcurrentHashMap<>();\n+\n+    @Override\n+    public Optional<String> get(String key) {\n+        return Optional.ofNullable(cacheContainer.get(key));\n+    }\n+\n+    @Override\n+    public void put(String key, String value, long timeout, TimeUnit timeUnit) {\n+        cacheContainer.put(key, value);\n+    }\n+\n+    @Override\n+    public void delete(String key) {\n+        // TODO Consider to delete the cache periodic\n+        cacheContainer.remove(key);\n+    }\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/cache/StringCacheStore.java b/src/main/java/cc/ryanc/halo/cache/StringCacheStore.java\n--- a/src/main/java/cc/ryanc/halo/cache/StringCacheStore.java\n+++ b/src/main/java/cc/ryanc/halo/cache/StringCacheStore.java\n@@ -0,0 +1,101 @@\n+package cc.ryanc.halo.cache;\n+\n+import cc.ryanc.halo.exception.ServiceException;\n+import cc.ryanc.halo.utils.JsonUtils;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang3.time.DateUtils;\n+import org.springframework.lang.NonNull;\n+import org.springframework.util.Assert;\n+\n+import java.io.IOException;\n+import java.util.Date;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Wechat cache store.\n+ *\n+ * @author johnniang\n+ */\n+@Slf4j\n+public abstract class StringCacheStore implements CacheStore<String, String> {\n+\n+    public <T> void putForWechat(String key, T value, long timeout, TimeUnit timeUnit) {\n+        Assert.hasText(key, \"Cache key must not be blank\");\n+        Assert.notNull(value, \"Cache value must not be null\");\n+        Assert.isTrue(timeout > 0, \"Timeout must not be less than 0\");\n+        Assert.notNull(timeUnit, \"Time unit must not be null\");\n+\n+        // Convert to second\n+        Long seconds = timeUnit.toSeconds(timeout);\n+\n+        // Round the seconds\n+        if (seconds == 0) {\n+            seconds = 1L;\n+        }\n+\n+        Date now = new Date();\n+\n+        // Calculate expire at\n+        Date expireAt = DateUtils.addSeconds(now, seconds.intValue());\n+\n+        // Build cache wrapper\n+        CacheWrapper<T> wrapper = new CacheWrapper<>();\n+        wrapper.setCreateAt(now);\n+        wrapper.setExpireAt(expireAt);\n+        wrapper.setKey(key);\n+        wrapper.setData(value);\n+\n+        try {\n+            // Convert wrapper to json\n+            String valueJson = JsonUtils.objectToJson(wrapper);\n+            // Put the the value json to cache store\n+            put(key, valueJson, timeout, timeUnit);\n+        } catch (JsonProcessingException e) {\n+            throw new ServiceException(\"Failed to convert object to json\", e).setErrorData(wrapper);\n+        }\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @NonNull\n+    public <T> Optional<T> getForWechat(@NonNull String key, @NonNull Class<T> type) {\n+        Assert.hasText(key, \"Cache key must not be blank\");\n+        Assert.notNull(type, \"Cache type must not be null\");\n+\n+        return get(key).map(value -> {\n+            try {\n+                CacheWrapper<?> cacheWrapper = JsonUtils.jsonToObject(value, CacheWrapper.class);\n+\n+                if (cacheWrapper == null) {\n+                    log.error(\"Cache wrapper is null, key: [{}]\", key);\n+                    return null;\n+                }\n+\n+                log.debug(\"Cache wrapper: [{}]\", cacheWrapper);\n+\n+                Date now = new Date();\n+\n+                if (cacheWrapper.getExpireAt().before(now)) {\n+                    // Expired then delete it\n+                    log.debug(\"Cache key: [{}] has been expired\", key);\n+\n+                    delete(key);\n+                    return null;\n+                }\n+\n+                Object data = cacheWrapper.getData();\n+\n+                if (data != null && data.getClass().isAssignableFrom(type)) {\n+                    return (T) data;\n+                }\n+\n+                log.error(\"Data type: [{}], but specified type: [{}]\", data == null ? null : data.getClass(), type);\n+                throw new ServiceException(\"Cache value type is mismatched with the specified type\");\n+            } catch (IOException e) {\n+                throw new ServiceException(\"Failed to convert from json to object\", e).setErrorData(value);\n+            }\n+        });\n+    }\n+\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/config/HaloConfiguration.java b/src/main/java/cc/ryanc/halo/config/HaloConfiguration.java\n--- a/src/main/java/cc/ryanc/halo/config/HaloConfiguration.java\n+++ b/src/main/java/cc/ryanc/halo/config/HaloConfiguration.java\n@@ -1,5 +1,7 @@\n package cc.ryanc.halo.config;\n \n+import cc.ryanc.halo.cache.InMemoryCacheStore;\n+import cc.ryanc.halo.cache.StringCacheStore;\n import cc.ryanc.halo.config.properties.HaloProperties;\n import cc.ryanc.halo.filter.CorsFilter;\n import cc.ryanc.halo.filter.LogFilter;\n@@ -8,6 +10,7 @@\n import cc.ryanc.halo.security.handler.AdminAuthenticationFailureHandler;\n import cc.ryanc.halo.security.handler.DefaultAuthenticationFailureHandler;\n import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.boot.web.servlet.FilterRegistrationBean;\n import org.springframework.context.annotation.Bean;\n@@ -23,6 +26,12 @@\n @EnableConfigurationProperties(HaloProperties.class)\n public class HaloConfiguration {\n \n+    @Bean\n+    @ConditionalOnMissingBean\n+    public StringCacheStore stringCacheStore() {\n+        return new InMemoryCacheStore();\n+    }\n+\n     /**\n      * Creates a CorsFilter.\n      *",
    "output": "Add custom temporary store support"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/config/FreeMarkerAutoConfiguration.java b/src/main/java/cc/ryanc/halo/config/FreeMarkerAutoConfiguration.java\n--- a/src/main/java/cc/ryanc/halo/config/FreeMarkerAutoConfiguration.java\n+++ b/src/main/java/cc/ryanc/halo/config/FreeMarkerAutoConfiguration.java\n@@ -1,8 +1,19 @@\n package cc.ryanc.halo.config;\n \n+import cc.ryanc.halo.model.freemarker.method.RandomMethod;\n+import cc.ryanc.halo.model.freemarker.method.RecentCommentsMethod;\n+import cc.ryanc.halo.model.freemarker.method.RecentPostsMethod;\n+import cc.ryanc.halo.model.freemarker.tag.ArticleTagDirective;\n+import cc.ryanc.halo.model.freemarker.tag.CommonTagDirective;\n+import cc.ryanc.halo.service.OptionService;\n+import cc.ryanc.halo.service.UserService;\n+import freemarker.template.TemplateModelException;\n import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.annotation.Configuration;\n \n+import javax.annotation.PostConstruct;\n+\n /**\n  * <pre>\n  *     FreeMarker配置\n@@ -15,43 +26,43 @@\n @Configuration\n public class FreeMarkerAutoConfiguration {\n \n-//    @Autowired\n-//    private freemarker.template.Configuration configuration;\n-//\n-//    @Autowired\n-//    private OptionsService optionsService;\n-//\n-//    @Autowired\n-//    private UserService userService;\n-//\n-//    @Autowired\n-//    private CommonTagDirective commonTagDirective;\n-//\n-//    @Autowired\n-//    private ArticleTagDirective articleTagDirective;\n-//\n-//    @Autowired\n-//    private RandomMethod randomMethod;\n-//\n-//    @Autowired\n-//    private RecentPostsMethod recentPostsMethod;\n-//\n-//    @Autowired\n-//    private RecentCommentsMethod recentCommentsMethod;\n-//\n-//    @PostConstruct\n-//    public void setSharedVariable() {\n-//        try {\n-//            //自定义标签\n-//            configuration.setSharedVariable(\"commonTag\", commonTagDirective);\n-//            configuration.setSharedVariable(\"articleTag\", articleTagDirective);\n-//            configuration.setSharedVariable(\"options\", optionsService.findAllOptions());\n+    @Autowired\n+    private freemarker.template.Configuration configuration;\n+\n+    @Autowired\n+    private OptionService optionsService;\n+\n+    @Autowired\n+    private UserService userService;\n+\n+    @Autowired\n+    private CommonTagDirective commonTagDirective;\n+\n+    @Autowired\n+    private ArticleTagDirective articleTagDirective;\n+\n+    @Autowired\n+    private RandomMethod randomMethod;\n+\n+    @Autowired\n+    private RecentPostsMethod recentPostsMethod;\n+\n+    @Autowired\n+    private RecentCommentsMethod recentCommentsMethod;\n+\n+    @PostConstruct\n+    public void setSharedVariable() {\n+        try {\n+            //自定义标签\n+            configuration.setSharedVariable(\"commonTag\", commonTagDirective);\n+            configuration.setSharedVariable(\"articleTag\", articleTagDirective);\n+            configuration.setSharedVariable(\"options\", optionsService.listOptions());\n //            configuration.setSharedVariable(\"user\", userService.findUser());\n-//            configuration.setSharedVariable(\"randomMethod\", randomMethod);\n-//            configuration.setSharedVariable(\"recentPostsMethod\", recentPostsMethod);\n-//            configuration.setSharedVariable(\"recentCommentsMethod\", recentCommentsMethod);\n-//        } catch (TemplateModelException e) {\n-//            log.error(\"Custom tags failed to load：{}\", e.getMessage());\n-//        }\n-//    }\n+            configuration.setSharedVariable(\"randomMethod\", randomMethod);\n+            configuration.setSharedVariable(\"recentPostsMethod\", recentPostsMethod);\n+            configuration.setSharedVariable(\"recentCommentsMethod\", recentCommentsMethod);\n+        } catch (TemplateModelException e) {\n+            log.error(\"Custom tags failed to load：{}\", e.getMessage());\n+        }\n+    }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/freemarker/tag/CommonTagDirective.java b/src/main/java/cc/ryanc/halo/model/freemarker/tag/CommonTagDirective.java\n--- a/src/main/java/cc/ryanc/halo/model/freemarker/tag/CommonTagDirective.java\n+++ b/src/main/java/cc/ryanc/halo/model/freemarker/tag/CommonTagDirective.java\n@@ -1,10 +1,8 @@\n package cc.ryanc.halo.model.freemarker.tag;\n \n+import cc.ryanc.halo.service.*;\n import freemarker.core.Environment;\n-import freemarker.template.TemplateDirectiveBody;\n-import freemarker.template.TemplateDirectiveModel;\n-import freemarker.template.TemplateException;\n-import freemarker.template.TemplateModel;\n+import freemarker.template.*;\n import org.springframework.stereotype.Component;\n \n import java.io.IOException;\n@@ -23,9 +21,55 @@ public class CommonTagDirective implements TemplateDirectiveModel {\n \n     private static final String METHOD_KEY = \"method\";\n \n+    private final MenuService menuService;\n+\n+    private final CategoryService categoryService;\n+\n+    private final TagService tagService;\n+\n+    private final LinkService linkService;\n+\n+    private final CommentService commentService;\n+\n+    public CommonTagDirective(MenuService menuService,\n+                              CategoryService categoryService,\n+                              TagService tagService,\n+                              LinkService linkService,\n+                              CommentService commentService) {\n+        this.menuService = menuService;\n+        this.categoryService = categoryService;\n+        this.tagService = tagService;\n+        this.linkService = linkService;\n+        this.commentService = commentService;\n+    }\n+\n     @Override\n     public void execute(Environment env, Map params, TemplateModel[] loopVars, TemplateDirectiveBody body) throws TemplateException, IOException {\n-        // TODO Complete comment tag directive.\n+        final DefaultObjectWrapperBuilder builder = new DefaultObjectWrapperBuilder(Configuration.VERSION_2_3_25);\n+\n+        if (params.containsKey(METHOD_KEY)) {\n+            String method = params.get(METHOD_KEY).toString();\n+            switch (method) {\n+                case \"menus\":\n+                    env.setVariable(\"menus\", builder.build().wrap(menuService.listAll()));\n+                    break;\n+                case \"categories\":\n+                    env.setVariable(\"categories\", builder.build().wrap(categoryService.listAll()));\n+                    break;\n+                case \"tags\":\n+                    env.setVariable(\"tags\", builder.build().wrap(tagService.listAll()));\n+                    break;\n+                case \"links\":\n+                    env.setVariable(\"links\", builder.build().wrap(linkService.listAll()));\n+                    break;\n+                case \"newComments\":\n+                    env.setVariable(\"newComments\", builder.build().wrap(commentService.listAll()));\n+                    break;\n+                default:\n+                    break;\n+            }\n+        }\n+        body.render(env.getOut());\n     }\n \n }",
    "output": "v1.0"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/config/WebMvcAutoConfiguration.java b/src/main/java/cc/ryanc/halo/config/WebMvcAutoConfiguration.java\n--- a/src/main/java/cc/ryanc/halo/config/WebMvcAutoConfiguration.java\n+++ b/src/main/java/cc/ryanc/halo/config/WebMvcAutoConfiguration.java\n@@ -54,7 +54,8 @@ public void addResourceHandlers(ResourceHandlerRegistry registry) {\n         registry.addResourceHandler(\"/static/**\")\n                 .addResourceLocations(\"classpath:/static/\");\n         registry.addResourceHandler(\"/**\")\n-                .addResourceLocations(\"classpath:/templates/themes/\");\n+                .addResourceLocations(\"classpath:/templates/themes/\")\n+                .addResourceLocations(\"file:///\" + System.getProperties().getProperty(\"user.home\") + \"/halo/templates/themes/\");\n         registry.addResourceHandler(\"/upload/**\")\n                 .addResourceLocations(\"file:///\" + System.getProperties().getProperty(\"user.home\") + \"/halo/upload/\");\n         registry.addResourceHandler(\"/favicon.ico\")\n\ndiff --git a/src/main/java/cc/ryanc/halo/repository/OptionRepository.java b/src/main/java/cc/ryanc/halo/repository/OptionRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/OptionRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/OptionRepository.java\n@@ -3,11 +3,27 @@\n import cc.ryanc.halo.model.entity.Option;\n import cc.ryanc.halo.repository.base.BaseRepository;\n \n+import java.util.Optional;\n+\n /**\n  * Option repository.\n  *\n  * @author johnniang\n  */\n public interface OptionRepository extends BaseRepository<Option, Integer> {\n \n+    /**\n+     * Query option by key\n+     *\n+     * @param key key\n+     * @return Option\n+     */\n+    Optional<Option> findByOptionKey(String key);\n+\n+    /**\n+     * Delete option by key\n+     *\n+     * @param key key\n+     */\n+    void removeByOptionKey(String key);\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/OptionService.java b/src/main/java/cc/ryanc/halo/service/OptionService.java\n--- a/src/main/java/cc/ryanc/halo/service/OptionService.java\n+++ b/src/main/java/cc/ryanc/halo/service/OptionService.java\n@@ -3,11 +3,42 @@\n import cc.ryanc.halo.model.entity.Option;\n import cc.ryanc.halo.service.base.CrudService;\n \n+import java.util.Map;\n+\n /**\n  * Option service.\n  *\n  * @author johnniang\n  */\n public interface OptionService extends CrudService<Option, Integer> {\n \n+    /**\n+     * Save one option\n+     *\n+     * @param key   key\n+     * @param value value\n+     */\n+    void saveOption(String key, String value);\n+\n+    /**\n+     * Save multiple options\n+     *\n+     * @param options options\n+     */\n+    void saveOptions(Map<String, String> options);\n+\n+    /**\n+     * Get all options\n+     *\n+     * @return Map\n+     */\n+    Map<String, String> listOptions();\n+\n+    /**\n+     * Get option by key\n+     *\n+     * @param key key\n+     * @return String\n+     */\n+    String getByKey(String key);\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/OptionServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/OptionServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/OptionServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/OptionServiceImpl.java\n@@ -4,7 +4,12 @@\n import cc.ryanc.halo.repository.OptionRepository;\n import cc.ryanc.halo.service.OptionService;\n import cc.ryanc.halo.service.base.AbstractCrudService;\n+import cc.ryanc.halo.utils.ServiceUtils;\n+import cn.hutool.core.util.StrUtil;\n import org.springframework.stereotype.Service;\n+import org.springframework.util.CollectionUtils;\n+\n+import java.util.Map;\n \n /**\n  * OptionService implementation class\n@@ -21,4 +26,65 @@ public OptionServiceImpl(OptionRepository optionRepository) {\n         super(optionRepository);\n         this.optionRepository = optionRepository;\n     }\n+\n+    /**\n+     * Save one option\n+     *\n+     * @param key   key\n+     * @param value value\n+     */\n+    @Override\n+    public void saveOption(String key, String value) {\n+        if (StrUtil.equals(value, \"\")) {\n+            optionRepository.removeByOptionKey(key);\n+        } else if (StrUtil.isNotEmpty(key)) {\n+            Option options = optionRepository.findByOptionKey(key).map(option -> {\n+                // Exist\n+                option.setOptionValue(value);\n+                return option;\n+            }).orElseGet(() -> {\n+                // Not exist\n+                Option option = new Option();\n+                option.setOptionKey(key);\n+                option.setOptionValue(value);\n+                return option;\n+            });\n+\n+            // Save or update the options\n+            optionRepository.save(options);\n+        }\n+    }\n+\n+    /**\n+     * Save multiple options\n+     *\n+     * @param options options\n+     */\n+    @Override\n+    public void saveOptions(Map<String, String> options) {\n+        if (!CollectionUtils.isEmpty(options)) {\n+            options.forEach(this::saveOption);\n+        }\n+    }\n+\n+    /**\n+     * Get all options\n+     *\n+     * @return Map\n+     */\n+    @Override\n+    public Map<String, String> listOptions() {\n+        return ServiceUtils.convertToMap(listAll(), Option::getOptionKey, Option::getOptionValue);\n+    }\n+\n+    /**\n+     * Get option by key\n+     *\n+     * @param key key\n+     * @return String\n+     */\n+    @Override\n+    public String getByKey(String key) {\n+        return optionRepository.findByOptionKey(key).map(Option::getOptionValue).orElse(null);\n+    }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/utils/HaloUtils.java b/src/main/java/cc/ryanc/halo/utils/HaloUtils.java\n--- a/src/main/java/cc/ryanc/halo/utils/HaloUtils.java\n+++ b/src/main/java/cc/ryanc/halo/utils/HaloUtils.java\n@@ -1,8 +1,6 @@\n package cc.ryanc.halo.utils;\n \n-import cc.ryanc.halo.model.support.BackupDto;\n import cc.ryanc.halo.model.support.Theme;\n-import cn.hutool.core.io.FileUtil;\n import cn.hutool.core.text.StrBuilder;\n import cn.hutool.core.util.StrUtil;\n import com.qiniu.common.Zone;\n@@ -208,17 +206,35 @@ public static String getImageWh(File file) {\n     }\n \n     /**\n-     * 获取所有主题\n+     * Scan internal themes and user's themes\n      *\n      * @return List\n      */\n     public static List<Theme> getThemes() {\n         final List<Theme> themes = new ArrayList<>();\n         try {\n-            // 获取项目根路径\n-            final File basePath = new File(ResourceUtils.getURL(\"classpath:\").getPath());\n-            // 获取主题路径\n-            final File themesPath = new File(basePath.getAbsolutePath(), \"templates/themes\");\n+            final File classPath = new File(ResourceUtils.getURL(\"classpath:\").getPath());\n+            final File internalThemesPath = new File(classPath.getAbsolutePath(), \"templates/themes\");\n+            themes.addAll(getThemesByPath(internalThemesPath));\n+\n+            final File userPath = new File(System.getProperties().getProperty(\"user.home\"));\n+            final File userThemesPath = new File(userPath.getAbsolutePath(),\"halo/templates/themes\");\n+            themes.addAll(getThemesByPath(userThemesPath));\n+        } catch (Exception e) {\n+            log.error(\"Themes scan failed\", e);\n+        }\n+        return themes;\n+    }\n+\n+    /**\n+     * Scan themes by directory\n+     *\n+     * @param file file\n+     * @return List<Theme>\n+     */\n+    private static List<Theme> getThemesByPath(File themesPath) {\n+        final List<Theme> themes = new ArrayList<>();\n+        try {\n             final File[] files = themesPath.listFiles();\n             if (null != files) {\n                 Theme theme;\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/ThemeController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/ThemeController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/ThemeController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/ThemeController.java\n@@ -1,8 +1,16 @@\n package cc.ryanc.halo.web.controller.admin;\n \n+import cc.ryanc.halo.model.support.Theme;\n+import cc.ryanc.halo.service.OptionService;\n+import cc.ryanc.halo.utils.HaloUtils;\n import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.RequestMapping;\n \n+import java.util.List;\n+import java.util.Map;\n+\n /**\n  * Themes controller\n  *\n@@ -12,4 +20,22 @@\n @Controller\n @RequestMapping(value = \"/admin/themes\")\n public class ThemeController {\n+\n+    private OptionService optionService;\n+\n+    public ThemeController(OptionService optionService) {\n+        this.optionService = optionService;\n+    }\n+\n+    @GetMapping\n+    public String themes(Model model) {\n+        Map<String, String> options = optionService.listOptions();\n+        model.addAttribute(\"options\",options);\n+\n+        List<Theme> themes = HaloUtils.getThemes();\n+\n+        model.addAttribute(\"themes\", themes);\n+\n+        return \"admin/admin_theme\";\n+    }\n }",
    "output": "v1.0"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/dto/UserOutputDTO.java b/src/main/java/cc/ryanc/halo/model/dto/UserOutputDTO.java\n--- a/src/main/java/cc/ryanc/halo/model/dto/UserOutputDTO.java\n+++ b/src/main/java/cc/ryanc/halo/model/dto/UserOutputDTO.java\n@@ -0,0 +1,66 @@\n+package cc.ryanc.halo.model.dto;\n+\n+import cc.ryanc.halo.model.dto.base.OutputConverter;\n+import cc.ryanc.halo.model.entity.User;\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+\n+import java.util.Date;\n+\n+/**\n+ * User output dto.\n+ *\n+ * @author johnniang\n+ * @date 3/16/19\n+ */\n+@Data\n+@ToString\n+@EqualsAndHashCode\n+public class UserOutputDTO implements OutputConverter<UserOutputDTO, User> {\n+\n+    /**\n+     * User id.\n+     */\n+    private Integer id;\n+\n+    /**\n+     * 用户名\n+     */\n+    private String username;\n+\n+    /**\n+     * 昵称\n+     */\n+    private String nickname;\n+\n+    /**\n+     * 邮箱\n+     */\n+    private String email;\n+\n+    /**\n+     * 头像\n+     */\n+    private String avatar;\n+\n+    /**\n+     * 描述\n+     */\n+    private String description;\n+\n+    /**\n+     * Expire time.\n+     */\n+    private Date expireTime;\n+\n+    /**\n+     * 创建时间戳\n+     */\n+    private Date createTime;\n+\n+    /**\n+     * 更新时间戳\n+     */\n+    private Date updateTime;\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/entity/User.java b/src/main/java/cc/ryanc/halo/model/entity/User.java\n--- a/src/main/java/cc/ryanc/halo/model/entity/User.java\n+++ b/src/main/java/cc/ryanc/halo/model/entity/User.java\n@@ -61,6 +61,13 @@ public class User {\n     @Column(name = \"description\", columnDefinition = \"varchar(1023) default ''\")\n     private String description;\n \n+    /**\n+     * Expire time.\n+     */\n+    @Column(name = \"expire_time\", columnDefinition = \"timestamp default CURRENT_TIMESTAMP\")\n+    @Temporal(TemporalType.TIMESTAMP)\n+    private Date expireTime;\n+\n     /**\n      * 创建时间戳\n      */",
    "output": "Add expireTime property in User entity"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/dto/post/PostMinimalOutputDTO.java b/src/main/java/cc/ryanc/halo/model/dto/post/PostMinimalOutputDTO.java\n--- a/src/main/java/cc/ryanc/halo/model/dto/post/PostMinimalOutputDTO.java\n+++ b/src/main/java/cc/ryanc/halo/model/dto/post/PostMinimalOutputDTO.java\n@@ -3,6 +3,7 @@\n import cc.ryanc.halo.model.dto.base.OutputConverter;\n import cc.ryanc.halo.model.entity.Post;\n import cc.ryanc.halo.model.enums.PostStatus;\n+import cc.ryanc.halo.model.enums.PostType;\n import lombok.Data;\n import lombok.EqualsAndHashCode;\n import lombok.ToString;\n@@ -23,7 +24,7 @@ public class PostMinimalOutputDTO implements OutputConverter<PostMinimalOutputDT\n     private Integer id;\n \n     /**\n-     * 文章标题\n+     * Post title\n      */\n     private String title;\n \n@@ -36,4 +37,9 @@ public class PostMinimalOutputDTO implements OutputConverter<PostMinimalOutputDT\n      * Post url.\n      */\n     private String url;\n+\n+    /**\n+     * Post type\n+     */\n+    private PostType type;\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java\n@@ -45,7 +45,7 @@ public String listPosts(Model model,\n                             @RequestParam(value = \"status\", defaultValue = \"published\") PostStatus status) {\n         final Page<PostSimpleOutputDTO> postPage = postService.pageByStatusAndType(status, PostType.POST, pageable);\n \n-        model.addAttribute(\"posts\", postPage.getContent());\n+        model.addAttribute(\"posts\", postPage);\n         model.addAttribute(\"publishedCount\", postService.countByStatusAndType(PostStatus.PUBLISHED, PostType.POST));\n         model.addAttribute(\"draftCount\", postService.countByStatusAndType(PostStatus.DRAFT, PostType.POST));\n         model.addAttribute(\"recycleCount\", postService.countByStatusAndType(PostStatus.RECYCLE, PostType.POST));",
    "output": "complate some page"
  },
  {
    "input": "diff --git a/src/test/java/cc/ryanc/halo/model/enums/AttachOriginTest.java b/src/test/java/cc/ryanc/halo/model/enums/AttachOriginTest.java\n--- a/src/test/java/cc/ryanc/halo/model/enums/AttachOriginTest.java\n+++ b/src/test/java/cc/ryanc/halo/model/enums/AttachOriginTest.java\n@@ -0,0 +1,31 @@\n+package cc.ryanc.halo.model.enums;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.core.convert.ConversionService;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.junit.Assert.assertThat;\n+\n+/**\n+ * Attach origin test.\n+ *\n+ * @author johnniang\n+ */\n+@RunWith(SpringRunner.class)\n+@SpringBootTest\n+public class AttachOriginTest {\n+\n+    @Autowired\n+    private ConversionService conversionService;\n+\n+    @Test\n+    public void conversionTest() {\n+        assertThat(conversionService.convert(\"SERVER\", AttachOrigin.class), equalTo(AttachOrigin.SERVER));\n+        assertThat(conversionService.convert(\"server\", AttachOrigin.class), equalTo(AttachOrigin.SERVER));\n+        assertThat(conversionService.convert(\"Server\", AttachOrigin.class), equalTo(AttachOrigin.SERVER));\n+    }\n+}\n\\ No newline at end of file",
    "output": "Add custom conversion test"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/repository/PostRepository.java b/src/main/java/cc/ryanc/halo/repository/PostRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/PostRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/PostRepository.java\n@@ -7,6 +7,7 @@\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.Pageable;\n import org.springframework.data.jpa.repository.JpaSpecificationExecutor;\n+import org.springframework.lang.NonNull;\n \n \n /**\n@@ -18,23 +19,22 @@\n public interface PostRepository extends BaseRepository<Post, Integer>, JpaSpecificationExecutor<Post> {\n \n     /**\n-     * Find posts by status and type\n+     * Finds posts by status and type.\n      *\n      * @param status   status\n      * @param type     type\n      * @param pageable pageable\n-     *\n      * @return Page<Post>\n      */\n-    Page<Post> queryAllByStatusAndType(PostStatus status, PostType type, Pageable pageable);\n+    @NonNull\n+    Page<Post> findAllByStatusAndType(@NonNull PostStatus status, @NonNull PostType type, @NonNull Pageable pageable);\n \n     /**\n-     * Count posts by status and type\n+     * Counts posts by status and type.\n      *\n      * @param status status\n      * @param type   type\n-     *\n      * @return posts count\n      */\n-    Long countAllByStatusAndType(PostStatus status, PostType type);\n+    long countByStatusAndType(@NonNull PostStatus status, @NonNull PostType type);\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/security/filter/AdminAuthenticationFilter.java b/src/main/java/cc/ryanc/halo/security/filter/AdminAuthenticationFilter.java\n--- a/src/main/java/cc/ryanc/halo/security/filter/AdminAuthenticationFilter.java\n+++ b/src/main/java/cc/ryanc/halo/security/filter/AdminAuthenticationFilter.java\n@@ -21,6 +21,7 @@ public class AdminAuthenticationFilter extends OncePerRequestFilter {\n     @Override\n     protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n         // TODO Handle admin authentication\n+        filterChain.doFilter(request, response);\n     }\n \n     public void setFailureHandler(AuthenticationFailureHandler failureHandler) {\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/PostService.java b/src/main/java/cc/ryanc/halo/service/PostService.java\n--- a/src/main/java/cc/ryanc/halo/service/PostService.java\n+++ b/src/main/java/cc/ryanc/halo/service/PostService.java\n@@ -37,7 +37,7 @@ public interface PostService extends CrudService<Post, Integer> {\n      * @return Page<PostSimpleOutputDTO>\n      */\n     @NonNull\n-    Page<PostSimpleOutputDTO> listByStatus(PostStatus status, PostType type, Pageable pageable);\n+    Page<PostSimpleOutputDTO> pageByStatusAndType(PostStatus status, PostType type, Pageable pageable);\n \n     /**\n      * Count posts by status and type\n@@ -46,5 +46,5 @@ public interface PostService extends CrudService<Post, Integer> {\n      * @param type type\n      * @return posts count\n      */\n-    Long countByStatus(PostStatus status, PostType type);\n+    Long countByStatusAndType(PostStatus status, PostType type);\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java\n@@ -51,8 +51,8 @@ public Page<PostSimpleOutputDTO> listLatest(int top) {\n      * @return Page<PostSimpleOutputDTO>\n      */\n     @Override\n-    public Page<PostSimpleOutputDTO> listByStatus(PostStatus status, PostType type, Pageable pageable) {\n-        Page<Post> posts = postRepository.queryAllByStatusAndType(status, type, pageable);\n+    public Page<PostSimpleOutputDTO> pageByStatusAndType(PostStatus status, PostType type, Pageable pageable) {\n+        Page<Post> posts = postRepository.findAllByStatusAndType(status, type, pageable);\n         return posts.map(post -> new PostSimpleOutputDTO().convertFrom(post));\n     }\n \n@@ -65,7 +65,7 @@ public Page<PostSimpleOutputDTO> listByStatus(PostStatus status, PostType type,\n      * @return posts count\n      */\n     @Override\n-    public Long countByStatus(PostStatus status, PostType type) {\n-        return postRepository.countAllByStatusAndType(status,type);\n+    public Long countByStatusAndType(PostStatus status, PostType type) {\n+        return postRepository.countByStatusAndType(status,type);\n     }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java\n@@ -5,10 +5,8 @@\n import cc.ryanc.halo.model.enums.PostType;\n import cc.ryanc.halo.service.PostService;\n import org.springframework.data.domain.Page;\n-import org.springframework.data.domain.PageRequest;\n import org.springframework.data.domain.Pageable;\n-import org.springframework.data.domain.Sort;\n-import org.springframework.data.web.SortDefault;\n+import org.springframework.data.web.PageableDefault;\n import org.springframework.stereotype.Controller;\n import org.springframework.ui.Model;\n import org.springframework.web.bind.annotation.GetMapping;\n@@ -36,28 +34,23 @@ public PostController(PostService postService) {\n     /**\n      * posts manage\n      *\n-     * @param model  model\n-     * @param status post status\n-     * @param page   current page\n-     * @param sort   sort\n-     *\n+     * @param model    model\n+     * @param status   post status\n+     * @param pageable page info\n      * @return template path: admin/admin_post.ftl\n      */\n     @GetMapping\n-    public String posts(Model model,\n-                        @RequestParam(value = \"status\", defaultValue = \"published\") PostStatus status,\n-                        @RequestParam(value = \"page\", defaultValue = \"0\") Integer page,\n-                        @SortDefault.SortDefaults({\n-                                @SortDefault(sort = \"topPriority\", direction = DESC),\n-                                @SortDefault(sort = \"createTime\", direction = DESC)\n-                        }) Sort sort) {\n-        final Pageable pageable = PageRequest.of(page, 10, sort);\n-        final Page<PostSimpleOutputDTO> posts = postService.listByStatus(status, PostType.POST, pageable);\n-        model.addAttribute(\"posts\", posts);\n-        model.addAttribute(\"publishedCount\", postService.countByStatus(PostStatus.PUBLISHED, PostType.POST));\n-        model.addAttribute(\"draftCount\", postService.countByStatus(PostStatus.DRAFT, PostType.POST));\n-        model.addAttribute(\"recycleCount\", postService.countByStatus(PostStatus.RECYCLE, PostType.POST));\n+    public String listPosts(Model model,\n+                            @PageableDefault(sort = {\"topPriority\", \"createTime\"}, direction = DESC) Pageable pageable,\n+                            @RequestParam(value = \"status\", defaultValue = \"published\") PostStatus status) {\n+        final Page<PostSimpleOutputDTO> postPage = postService.pageByStatusAndType(status, PostType.POST, pageable);\n+\n+        model.addAttribute(\"posts\", postPage.getContent());\n+        model.addAttribute(\"publishedCount\", postService.countByStatusAndType(PostStatus.PUBLISHED, PostType.POST));\n+        model.addAttribute(\"draftCount\", postService.countByStatusAndType(PostStatus.DRAFT, PostType.POST));\n+        model.addAttribute(\"recycleCount\", postService.countByStatusAndType(PostStatus.RECYCLE, PostType.POST));\n         model.addAttribute(\"status\", status);\n         return \"admin/admin_post\";\n     }\n+\n }",
    "output": "Refactor related page operations"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/config/WebMvcAutoConfiguration.java b/src/main/java/cc/ryanc/halo/config/WebMvcAutoConfiguration.java\n--- a/src/main/java/cc/ryanc/halo/config/WebMvcAutoConfiguration.java\n+++ b/src/main/java/cc/ryanc/halo/config/WebMvcAutoConfiguration.java\n@@ -2,13 +2,15 @@\n \n import cc.ryanc.halo.config.properties.HaloProperties;\n import cc.ryanc.halo.security.resolver.AuthenticationArgumentResolver;\n+import cc.ryanc.halo.factory.StringToEnumConverterFactory;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.ComponentScan;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.PropertySource;\n import org.springframework.web.method.support.HandlerMethodArgumentResolver;\n+import org.springframework.format.FormatterRegistry;\n import org.springframework.web.servlet.LocaleResolver;\n import org.springframework.web.servlet.config.annotation.EnableWebMvc;\n import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\n@@ -92,4 +94,9 @@ public LocaleChangeInterceptor localeChangeInterceptor() {\n         lci.setParamName(\"lang\");\n         return lci;\n     }\n+\n+    @Override\n+    public void addFormatters(FormatterRegistry registry) {\n+        registry.addConverterFactory(new StringToEnumConverterFactory());\n+    }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/factory/StringToEnumConverterFactory.java b/src/main/java/cc/ryanc/halo/factory/StringToEnumConverterFactory.java\n--- a/src/main/java/cc/ryanc/halo/factory/StringToEnumConverterFactory.java\n+++ b/src/main/java/cc/ryanc/halo/factory/StringToEnumConverterFactory.java\n@@ -0,0 +1,35 @@\n+package cc.ryanc.halo.factory;\n+\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.core.convert.converter.ConverterFactory;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * @author : RYAN0UP\n+ * @date : 2019/3/14\n+ */\n+@Component\n+public class StringToEnumConverterFactory implements ConverterFactory<String, Enum> {\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public <T extends Enum> Converter<String, T> getConverter(Class<T> targetType) {\n+        return new StringToEnumConverter(targetType);\n+    }\n+\n+    private static class StringToEnumConverter<T extends Enum>\n+            implements Converter<String, T> {\n+\n+        private Class<T> enumType;\n+\n+        private StringToEnumConverter(Class<T> enumType) {\n+            this.enumType = enumType;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        @Override\n+        public T convert(String source) {\n+            return (T) Enum.valueOf(this.enumType, source.toUpperCase());\n+        }\n+    }\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java\n@@ -8,7 +8,6 @@\n import org.springframework.data.domain.PageRequest;\n import org.springframework.data.domain.Pageable;\n import org.springframework.data.domain.Sort;\n-import org.springframework.data.web.PageableDefault;\n import org.springframework.data.web.SortDefault;\n import org.springframework.stereotype.Controller;\n import org.springframework.ui.Model;\n@@ -28,7 +27,7 @@\n @RequestMapping(value = \"/admin/posts\")\n public class PostController {\n \n-    private PostService postService;\n+    private final PostService postService;\n \n     public PostController(PostService postService) {\n         this.postService = postService;\n@@ -41,23 +40,23 @@ public PostController(PostService postService) {\n      * @param status post status\n      * @param page   current page\n      * @param sort   sort\n+     *\n      * @return template path: admin/admin_post.ftl\n      */\n     @GetMapping\n     public String posts(Model model,\n-                        @RequestParam(value = \"status\", defaultValue = \"PUBLISHED\") PostStatus status,\n-                        @PageableDefault Pageable defaultPageable,\n+                        @RequestParam(value = \"status\", defaultValue = \"published\") PostStatus status,\n                         @RequestParam(value = \"page\", defaultValue = \"0\") Integer page,\n                         @SortDefault.SortDefaults({\n-                                @SortDefault(sort = \"postPriority\", direction = DESC),\n-                                @SortDefault(sort = \"postDate\", direction = DESC)\n+                                @SortDefault(sort = \"topPriority\", direction = DESC),\n+                                @SortDefault(sort = \"createTime\", direction = DESC)\n                         }) Sort sort) {\n         final Pageable pageable = PageRequest.of(page, 10, sort);\n         final Page<PostSimpleOutputDTO> posts = postService.listByStatus(status, PostType.POST, pageable);\n         model.addAttribute(\"posts\", posts);\n-        model.addAttribute(\"publishCount\", postService.countByStatus(PostStatus.PUBLISHED, PostType.POST));\n+        model.addAttribute(\"publishedCount\", postService.countByStatus(PostStatus.PUBLISHED, PostType.POST));\n         model.addAttribute(\"draftCount\", postService.countByStatus(PostStatus.DRAFT, PostType.POST));\n-        model.addAttribute(\"trashCount\", postService.countByStatus(PostStatus.RECYCLE, PostType.POST));\n+        model.addAttribute(\"recycleCount\", postService.countByStatus(PostStatus.RECYCLE, PostType.POST));\n         model.addAttribute(\"status\", status);\n         return \"admin/admin_post\";\n     }",
    "output": "Merge remote-tracking branch 'origin/v1' into v1\n\n# Conflicts:\n#\tsrc/main/java/cc/ryanc/halo/config/WebMvcAutoConfiguration.java\n#\tsrc/main/java/cc/ryanc/halo/web/controller/admin/PostController.java"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/config/WebMvcAutoConfiguration.java b/src/main/java/cc/ryanc/halo/config/WebMvcAutoConfiguration.java\n--- a/src/main/java/cc/ryanc/halo/config/WebMvcAutoConfiguration.java\n+++ b/src/main/java/cc/ryanc/halo/config/WebMvcAutoConfiguration.java\n@@ -1,15 +1,16 @@\n package cc.ryanc.halo.config;\n \n import cc.ryanc.halo.config.properties.HaloProperties;\n+import cc.ryanc.halo.factory.StringToEnumConverterFactory;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.ComponentScan;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.PropertySource;\n+import org.springframework.format.FormatterRegistry;\n import org.springframework.web.servlet.LocaleResolver;\n import org.springframework.web.servlet.config.annotation.EnableWebMvc;\n-import org.springframework.web.servlet.config.annotation.InterceptorRegistry;\n import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\n import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n import org.springframework.web.servlet.i18n.LocaleChangeInterceptor;\n@@ -32,7 +33,7 @@\n @PropertySource(value = \"classpath:application.yaml\", ignoreResourceNotFound = true, encoding = \"UTF-8\")\n public class WebMvcAutoConfiguration implements WebMvcConfigurer {\n \n-//    @Autowired\n+    //    @Autowired\n //    private LoginInterceptor loginInterceptor;\n //\n //    @Autowired\n@@ -130,4 +131,9 @@ public LocaleChangeInterceptor localeChangeInterceptor() {\n         lci.setParamName(\"lang\");\n         return lci;\n     }\n+\n+    @Override\n+    public void addFormatters(FormatterRegistry registry) {\n+        registry.addConverterFactory(new StringToEnumConverterFactory());\n+    }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/factory/StringToEnumConverterFactory.java b/src/main/java/cc/ryanc/halo/factory/StringToEnumConverterFactory.java\n--- a/src/main/java/cc/ryanc/halo/factory/StringToEnumConverterFactory.java\n+++ b/src/main/java/cc/ryanc/halo/factory/StringToEnumConverterFactory.java\n@@ -0,0 +1,35 @@\n+package cc.ryanc.halo.factory;\n+\n+import org.springframework.core.convert.converter.Converter;\n+import org.springframework.core.convert.converter.ConverterFactory;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * @author : RYAN0UP\n+ * @date : 2019/3/14\n+ */\n+@Component\n+public class StringToEnumConverterFactory implements ConverterFactory<String, Enum> {\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public <T extends Enum> Converter<String, T> getConverter(Class<T> targetType) {\n+        return new StringToEnumConverter(targetType);\n+    }\n+\n+    private static class StringToEnumConverter<T extends Enum>\n+            implements Converter<String, T> {\n+\n+        private Class<T> enumType;\n+\n+        private StringToEnumConverter(Class<T> enumType) {\n+            this.enumType = enumType;\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        @Override\n+        public T convert(String source) {\n+            return (T) Enum.valueOf(this.enumType, source.toUpperCase());\n+        }\n+    }\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java\n@@ -27,7 +27,7 @@\n @RequestMapping(value = \"/admin/posts\")\n public class PostController {\n \n-    private PostService postService;\n+    private final PostService postService;\n \n     public PostController(PostService postService) {\n         this.postService = postService;\n@@ -45,18 +45,18 @@ public PostController(PostService postService) {\n      */\n     @GetMapping\n     public String posts(Model model,\n-                        @RequestParam(value = \"status\", defaultValue = \"0\") PostStatus status,\n+                        @RequestParam(value = \"status\", defaultValue = \"published\") PostStatus status,\n                         @RequestParam(value = \"page\", defaultValue = \"0\") Integer page,\n                         @SortDefault.SortDefaults({\n-                                @SortDefault(sort = \"postPriority\", direction = DESC),\n-                                @SortDefault(sort = \"postDate\", direction = DESC)\n+                                @SortDefault(sort = \"topPriority\", direction = DESC),\n+                                @SortDefault(sort = \"createTime\", direction = DESC)\n                         }) Sort sort) {\n         final Pageable pageable = PageRequest.of(page, 10, sort);\n         final Page<PostSimpleOutputDTO> posts = postService.listByStatus(status, PostType.POST, pageable);\n         model.addAttribute(\"posts\", posts);\n-        model.addAttribute(\"publishCount\", postService.countByStatus(PostStatus.PUBLISHED, PostType.POST));\n+        model.addAttribute(\"publishedCount\", postService.countByStatus(PostStatus.PUBLISHED, PostType.POST));\n         model.addAttribute(\"draftCount\", postService.countByStatus(PostStatus.DRAFT, PostType.POST));\n-        model.addAttribute(\"trashCount\", postService.countByStatus(PostStatus.RECYCLE, PostType.POST));\n+        model.addAttribute(\"recycleCount\", postService.countByStatus(PostStatus.RECYCLE, PostType.POST));\n         model.addAttribute(\"status\", status);\n         return \"admin/admin_post\";\n     }",
    "output": "config StringToEnumConverterFactory"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/repository/PostRepository.java b/src/main/java/cc/ryanc/halo/repository/PostRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/PostRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/PostRepository.java\n@@ -1,6 +1,8 @@\n package cc.ryanc.halo.repository;\n \n import cc.ryanc.halo.model.entity.Post;\n+import cc.ryanc.halo.model.enums.PostStatus;\n+import cc.ryanc.halo.model.enums.PostType;\n import cc.ryanc.halo.repository.base.BaseRepository;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.Pageable;\n@@ -24,7 +26,7 @@ public interface PostRepository extends BaseRepository<Post, Integer>, JpaSpecif\n      *\n      * @return Page<Post>\n      */\n-    Page<Post> queryAllByStatusAndType(int status, Integer type, Pageable pageable);\n+    Page<Post> queryAllByStatusAndType(PostStatus status, PostType type, Pageable pageable);\n \n     /**\n      * Count posts by status and type\n@@ -34,5 +36,5 @@ public interface PostRepository extends BaseRepository<Post, Integer>, JpaSpecif\n      *\n      * @return posts count\n      */\n-    Long countAllByStatusAndType(int status, Integer type);\n+    Long countAllByStatusAndType(PostStatus status, PostType type);\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/PostService.java b/src/main/java/cc/ryanc/halo/service/PostService.java\n--- a/src/main/java/cc/ryanc/halo/service/PostService.java\n+++ b/src/main/java/cc/ryanc/halo/service/PostService.java\n@@ -2,6 +2,8 @@\n \n import cc.ryanc.halo.model.dto.post.PostSimpleOutputDTO;\n import cc.ryanc.halo.model.entity.Post;\n+import cc.ryanc.halo.model.enums.PostStatus;\n+import cc.ryanc.halo.model.enums.PostType;\n import cc.ryanc.halo.service.base.CrudService;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.Pageable;\n@@ -35,7 +37,7 @@ public interface PostService extends CrudService<Post, Integer> {\n      * @return Page<PostSimpleOutputDTO>\n      */\n     @NonNull\n-    Page<PostSimpleOutputDTO> listByStatus(int status, Integer type, Pageable pageable);\n+    Page<PostSimpleOutputDTO> listByStatus(PostStatus status, PostType type, Pageable pageable);\n \n     /**\n      * Count posts by status and type\n@@ -44,5 +46,5 @@ public interface PostService extends CrudService<Post, Integer> {\n      * @param type type\n      * @return posts count\n      */\n-    Long countByStatus(int status,Integer type);\n+    Long countByStatus(PostStatus status, PostType type);\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java\n@@ -2,6 +2,8 @@\n \n import cc.ryanc.halo.model.dto.post.PostSimpleOutputDTO;\n import cc.ryanc.halo.model.entity.Post;\n+import cc.ryanc.halo.model.enums.PostStatus;\n+import cc.ryanc.halo.model.enums.PostType;\n import cc.ryanc.halo.repository.PostRepository;\n import cc.ryanc.halo.service.PostService;\n import cc.ryanc.halo.service.base.AbstractCrudService;\n@@ -49,7 +51,7 @@ public Page<PostSimpleOutputDTO> listLatest(int top) {\n      * @return Page<PostSimpleOutputDTO>\n      */\n     @Override\n-    public Page<PostSimpleOutputDTO> listByStatus(int status, Integer type, Pageable pageable) {\n+    public Page<PostSimpleOutputDTO> listByStatus(PostStatus status, PostType type, Pageable pageable) {\n         Page<Post> posts = postRepository.queryAllByStatusAndType(status, type, pageable);\n         return posts.map(post -> new PostSimpleOutputDTO().convertFrom(post));\n     }\n@@ -63,7 +65,7 @@ public Page<PostSimpleOutputDTO> listByStatus(int status, Integer type, Pageable\n      * @return posts count\n      */\n     @Override\n-    public Long countByStatus(int status, Integer type) {\n+    public Long countByStatus(PostStatus status, PostType type) {\n         return postRepository.countAllByStatusAndType(status,type);\n     }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java\n@@ -45,18 +45,18 @@ public PostController(PostService postService) {\n      */\n     @GetMapping\n     public String posts(Model model,\n-                        @RequestParam(value = \"status\", defaultValue = \"0\") Integer status,\n+                        @RequestParam(value = \"status\", defaultValue = \"0\") PostStatus status,\n                         @RequestParam(value = \"page\", defaultValue = \"0\") Integer page,\n                         @SortDefault.SortDefaults({\n                                 @SortDefault(sort = \"postPriority\", direction = DESC),\n                                 @SortDefault(sort = \"postDate\", direction = DESC)\n                         }) Sort sort) {\n         final Pageable pageable = PageRequest.of(page, 10, sort);\n-        final Page<PostSimpleOutputDTO> posts = postService.listByStatus(status, PostType.POST.getValue(), pageable);\n+        final Page<PostSimpleOutputDTO> posts = postService.listByStatus(status, PostType.POST, pageable);\n         model.addAttribute(\"posts\", posts);\n-        model.addAttribute(\"publishCount\", postService.countByStatus(PostStatus.PUBLISHED.getValue(), PostType.POST.getValue()));\n-        model.addAttribute(\"draftCount\", postService.countByStatus(PostStatus.DRAFT.getValue(), PostType.POST.getValue()));\n-        model.addAttribute(\"trashCount\", postService.countByStatus(PostStatus.RECYCLE.getValue(), PostType.POST.getValue()));\n+        model.addAttribute(\"publishCount\", postService.countByStatus(PostStatus.PUBLISHED, PostType.POST));\n+        model.addAttribute(\"draftCount\", postService.countByStatus(PostStatus.DRAFT, PostType.POST));\n+        model.addAttribute(\"trashCount\", postService.countByStatus(PostStatus.RECYCLE, PostType.POST));\n         model.addAttribute(\"status\", status);\n         return \"admin/admin_post\";\n     }",
    "output": "Code optimization"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/repository/PostRepository.java b/src/main/java/cc/ryanc/halo/repository/PostRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/PostRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/PostRepository.java\n@@ -2,14 +2,37 @@\n \n import cc.ryanc.halo.model.entity.Post;\n import cc.ryanc.halo.repository.base.BaseRepository;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n import org.springframework.data.jpa.repository.JpaSpecificationExecutor;\n \n \n /**\n  * Post repository.\n  *\n  * @author johnniang\n+ * @author RYAN0UP\n  */\n public interface PostRepository extends BaseRepository<Post, Integer>, JpaSpecificationExecutor<Post> {\n \n+    /**\n+     * Find posts by status and type\n+     *\n+     * @param status   status\n+     * @param type     type\n+     * @param pageable pageable\n+     *\n+     * @return Page<Post>\n+     */\n+    Page<Post> queryAllByStatusAndType(int status, Integer type, Pageable pageable);\n+\n+    /**\n+     * Count posts by status and type\n+     *\n+     * @param status status\n+     * @param type   type\n+     *\n+     * @return posts count\n+     */\n+    Long countAllByStatusAndType(int status, Integer type);\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/PostService.java b/src/main/java/cc/ryanc/halo/service/PostService.java\n--- a/src/main/java/cc/ryanc/halo/service/PostService.java\n+++ b/src/main/java/cc/ryanc/halo/service/PostService.java\n@@ -4,22 +4,45 @@\n import cc.ryanc.halo.model.entity.Post;\n import cc.ryanc.halo.service.base.CrudService;\n import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n import org.springframework.lang.NonNull;\n \n /**\n  * Post service.\n  *\n  * @author johnniang\n+ * @author RYAN0UP\n  */\n public interface PostService extends CrudService<Post, Integer> {\n \n     /**\n      * Lists latest posts.\n      *\n      * @param top top number must not be less than 0\n+     *\n      * @return latest posts\n      */\n     @NonNull\n     Page<PostSimpleOutputDTO> listLatest(int top);\n \n+    /**\n+     * List by status and type\n+     *\n+     * @param status status\n+     * @param type   type\n+     * @param pageable pageable\n+     *\n+     * @return Page<PostSimpleOutputDTO>\n+     */\n+    @NonNull\n+    Page<PostSimpleOutputDTO> listByStatus(int status, Integer type, Pageable pageable);\n+\n+    /**\n+     * Count posts by status and type\n+     *\n+     * @param status status\n+     * @param type type\n+     * @return posts count\n+     */\n+    Long countByStatus(int status,Integer type);\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java\n@@ -7,6 +7,7 @@\n import cc.ryanc.halo.service.base.AbstractCrudService;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.PageRequest;\n+import org.springframework.data.domain.Pageable;\n import org.springframework.data.domain.Sort;\n import org.springframework.stereotype.Service;\n import org.springframework.util.Assert;\n@@ -15,6 +16,7 @@\n  * Post service implementation.\n  *\n  * @author johnniang\n+ * @author RYAN0UP\n  */\n @Service\n public class PostServiceImpl extends AbstractCrudService<Post, Integer> implements PostService {\n@@ -36,4 +38,32 @@ public Page<PostSimpleOutputDTO> listLatest(int top) {\n \n         return posts.map(post -> new PostSimpleOutputDTO().convertFrom(post));\n     }\n+\n+    /**\n+     * List by status and type\n+     *\n+     * @param status   status\n+     * @param type     type\n+     * @param pageable pageable\n+     *\n+     * @return Page<PostSimpleOutputDTO>\n+     */\n+    @Override\n+    public Page<PostSimpleOutputDTO> listByStatus(int status, Integer type, Pageable pageable) {\n+        Page<Post> posts = postRepository.queryAllByStatusAndType(status, type, pageable);\n+        return posts.map(post -> new PostSimpleOutputDTO().convertFrom(post));\n+    }\n+\n+    /**\n+     * Count posts by status and type\n+     *\n+     * @param status status\n+     * @param type   type\n+     *\n+     * @return posts count\n+     */\n+    @Override\n+    public Long countByStatus(int status, Integer type) {\n+        return postRepository.countAllByStatusAndType(status,type);\n+    }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java\n@@ -1,7 +1,21 @@\n package cc.ryanc.halo.web.controller.admin;\n \n+import cc.ryanc.halo.model.dto.post.PostSimpleOutputDTO;\n+import cc.ryanc.halo.model.enums.PostStatus;\n+import cc.ryanc.halo.model.enums.PostType;\n+import cc.ryanc.halo.service.PostService;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.PageRequest;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.domain.Sort;\n+import org.springframework.data.web.SortDefault;\n import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+\n+import static org.springframework.data.domain.Sort.Direction.DESC;\n \n /**\n  * Posts controller\n@@ -12,4 +26,38 @@\n @Controller\n @RequestMapping(value = \"/admin/posts\")\n public class PostController {\n+\n+    private PostService postService;\n+\n+    public PostController(PostService postService) {\n+        this.postService = postService;\n+    }\n+\n+    /**\n+     * posts manage\n+     *\n+     * @param model  model\n+     * @param status post status\n+     * @param page   current page\n+     * @param sort   sort\n+     *\n+     * @return template path: admin/admin_post.ftl\n+     */\n+    @GetMapping\n+    public String posts(Model model,\n+                        @RequestParam(value = \"status\", defaultValue = \"0\") Integer status,\n+                        @RequestParam(value = \"page\", defaultValue = \"0\") Integer page,\n+                        @SortDefault.SortDefaults({\n+                                @SortDefault(sort = \"postPriority\", direction = DESC),\n+                                @SortDefault(sort = \"postDate\", direction = DESC)\n+                        }) Sort sort) {\n+        final Pageable pageable = PageRequest.of(page, 10, sort);\n+        final Page<PostSimpleOutputDTO> posts = postService.listByStatus(status, PostType.POST.getValue(), pageable);\n+        model.addAttribute(\"posts\", posts);\n+        model.addAttribute(\"publishCount\", postService.countByStatus(PostStatus.PUBLISHED.getValue(), PostType.POST.getValue()));\n+        model.addAttribute(\"draftCount\", postService.countByStatus(PostStatus.DRAFT.getValue(), PostType.POST.getValue()));\n+        model.addAttribute(\"trashCount\", postService.countByStatus(PostStatus.RECYCLE.getValue(), PostType.POST.getValue()));\n+        model.addAttribute(\"status\", status);\n+        return \"admin/admin_post\";\n+    }\n }",
    "output": "posts manage"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/dto/post/PostWithTitleDTO.java b/src/main/java/cc/ryanc/halo/model/dto/post/PostWithTitleDTO.java\n--- a/src/main/java/cc/ryanc/halo/model/dto/post/PostWithTitleDTO.java\n+++ b/src/main/java/cc/ryanc/halo/model/dto/post/PostWithTitleDTO.java\n@@ -19,6 +19,4 @@ public class PostWithTitleDTO implements OutputConverter<PostWithTitleDTO, Post>\n     private Integer id;\n \n     private String title;\n-\n-    private String type;\n }",
    "output": "fix bug"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/dto/post/PostMinimalOutputDTO.java b/src/main/java/cc/ryanc/halo/model/dto/post/PostMinimalOutputDTO.java\n--- a/src/main/java/cc/ryanc/halo/model/dto/post/PostMinimalOutputDTO.java\n+++ b/src/main/java/cc/ryanc/halo/model/dto/post/PostMinimalOutputDTO.java\n@@ -2,6 +2,7 @@\n \n import cc.ryanc.halo.model.dto.base.OutputConverter;\n import cc.ryanc.halo.model.entity.Post;\n+import cc.ryanc.halo.model.enums.PostStatus;\n import lombok.Data;\n import lombok.EqualsAndHashCode;\n import lombok.ToString;\n@@ -14,13 +15,25 @@\n @Data\n @ToString\n @EqualsAndHashCode\n-public class PostWithTitleDTO implements OutputConverter<PostWithTitleDTO, Post> {\n+public class PostMinimalOutputDTO implements OutputConverter<PostMinimalOutputDTO, Post> {\n \n+    /**\n+     * Post id.\n+     */\n     private Integer id;\n \n     /**\n      * 文章标题\n      */\n     private String title;\n \n+    /**\n+     * Post status.\n+     */\n+    private PostStatus status;\n+\n+    /**\n+     * Post url.\n+     */\n+    private String url;\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/dto/post/PostSimpleOutputDTO.java b/src/main/java/cc/ryanc/halo/model/dto/post/PostSimpleOutputDTO.java\n--- a/src/main/java/cc/ryanc/halo/model/dto/post/PostSimpleOutputDTO.java\n+++ b/src/main/java/cc/ryanc/halo/model/dto/post/PostSimpleOutputDTO.java\n@@ -16,7 +16,7 @@\n @Data\n @ToString\n @EqualsAndHashCode(callSuper = true)\n-public class PostSimpleOutputDTO extends PostWithTitleDTO {\n+public class PostSimpleOutputDTO extends PostMinimalOutputDTO {\n \n     /**\n      * 文章类型\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/entity/Post.java b/src/main/java/cc/ryanc/halo/model/entity/Post.java\n--- a/src/main/java/cc/ryanc/halo/model/entity/Post.java\n+++ b/src/main/java/cc/ryanc/halo/model/entity/Post.java\n@@ -1,6 +1,7 @@\n package cc.ryanc.halo.model.entity;\n \n import cc.ryanc.halo.model.enums.PostCreateFrom;\n+import cc.ryanc.halo.model.enums.PostStatus;\n import cc.ryanc.halo.model.enums.PostType;\n import lombok.Data;\n import lombok.EqualsAndHashCode;\n@@ -44,6 +45,18 @@ public class Post {\n     @Column(name = \"type\", columnDefinition = \"int default 0\")\n     private PostType type;\n \n+    /**\n+     * Post status.\n+     */\n+    @Column(name = \"status\", columnDefinition = \"int default 1\")\n+    private PostStatus status;\n+\n+    /**\n+     * Post url.\n+     */\n+    @Column(name = \"url\", columnDefinition = \"varchar(255) not null\")\n+    private String url;\n+\n     /**\n      * 源内容\n      */\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/enums/PostStatus.java b/src/main/java/cc/ryanc/halo/model/enums/PostStatus.java\n--- a/src/main/java/cc/ryanc/halo/model/enums/PostStatus.java\n+++ b/src/main/java/cc/ryanc/halo/model/enums/PostStatus.java\n@@ -0,0 +1,35 @@\n+package cc.ryanc.halo.model.enums;\n+\n+/**\n+ * Post status.\n+ *\n+ * @author johnniang\n+ */\n+public enum PostStatus implements ValueEnum<Integer> {\n+\n+    /**\n+     * Published status.\n+     */\n+    PUBLISHED(0),\n+\n+    /**\n+     * Draft status.\n+     */\n+    DRAFT(1),\n+\n+    /**\n+     * Recycle status.\n+     */\n+    RECYCLE(2);\n+\n+    private final int value;\n+\n+    PostStatus(int value) {\n+        this.value = value;\n+    }\n+\n+    @Override\n+    public Integer getValue() {\n+        return value;\n+    }\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/vo/CommentVO.java b/src/main/java/cc/ryanc/halo/model/vo/CommentVO.java\n--- a/src/main/java/cc/ryanc/halo/model/vo/CommentVO.java\n+++ b/src/main/java/cc/ryanc/halo/model/vo/CommentVO.java\n@@ -1,7 +1,7 @@\n package cc.ryanc.halo.model.vo;\n \n import cc.ryanc.halo.model.dto.CommentOutputDTO;\n-import cc.ryanc.halo.model.dto.post.PostWithTitleDTO;\n+import cc.ryanc.halo.model.dto.post.PostMinimalOutputDTO;\n import lombok.Data;\n import lombok.EqualsAndHashCode;\n import lombok.ToString;\n@@ -16,5 +16,5 @@\n @EqualsAndHashCode(callSuper = true)\n public class CommentVO extends CommentOutputDTO {\n \n-    private PostWithTitleDTO post;\n+    private PostMinimalOutputDTO post;\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/CommentServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/CommentServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/CommentServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/CommentServiceImpl.java\n@@ -1,6 +1,6 @@\n package cc.ryanc.halo.service.impl;\n \n-import cc.ryanc.halo.model.dto.post.PostWithTitleDTO;\n+import cc.ryanc.halo.model.dto.post.PostMinimalOutputDTO;\n import cc.ryanc.halo.model.entity.Comment;\n import cc.ryanc.halo.model.entity.Post;\n import cc.ryanc.halo.model.vo.CommentVO;\n@@ -59,7 +59,7 @@ public Page<CommentVO> listLatest(int top) {\n             CommentVO commentVO = new CommentVO().convertFrom(comment);\n \n             // Get post and set to the vo\n-            commentVO.setPost(new PostWithTitleDTO().convertFrom(postMap.get(comment.getPostId())));\n+            commentVO.setPost(new PostMinimalOutputDTO().convertFrom(postMap.get(comment.getPostId())));\n \n             return commentVO;\n         });",
    "output": "Add status and url filed into Post entity"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/dto/post/PostWithTitleDTO.java b/src/main/java/cc/ryanc/halo/model/dto/post/PostWithTitleDTO.java\n--- a/src/main/java/cc/ryanc/halo/model/dto/post/PostWithTitleDTO.java\n+++ b/src/main/java/cc/ryanc/halo/model/dto/post/PostWithTitleDTO.java\n@@ -18,9 +18,7 @@ public class PostWithTitleDTO implements OutputConverter<PostWithTitleDTO, Post>\n \n     private Integer id;\n \n-    /**\n-     * 文章标题\n-     */\n     private String title;\n \n+    private String type;\n }",
    "output": "admin dashboard data"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/dto/LogOutputDTO.java b/src/main/java/cc/ryanc/halo/model/dto/LogOutputDTO.java\n--- a/src/main/java/cc/ryanc/halo/model/dto/LogOutputDTO.java\n+++ b/src/main/java/cc/ryanc/halo/model/dto/LogOutputDTO.java\n@@ -0,0 +1,46 @@\n+package cc.ryanc.halo.model.dto;\n+\n+import cc.ryanc.halo.model.dto.base.OutputConverter;\n+import cc.ryanc.halo.model.entity.Log;\n+import cc.ryanc.halo.model.enums.LogType;\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+import lombok.ToString;\n+\n+import java.util.Date;\n+\n+@Data\n+@ToString\n+@EqualsAndHashCode\n+public class LogOutputDTO implements OutputConverter<LogOutputDTO, Log> {\n+\n+    /**\n+     * Log id.\n+     */\n+    private Long id;\n+\n+    /**\n+     * 日志标识\n+     */\n+    private String logKey;\n+\n+    /**\n+     * 日志事件类型\n+     */\n+    private LogType type;\n+\n+    /**\n+     * 日志内容\n+     */\n+    private String content;\n+\n+    /**\n+     * 操作 IP\n+     */\n+    private String ipAddress;\n+\n+    /**\n+     * 创建时间戳\n+     */\n+    private Date createTime;\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/LogService.java b/src/main/java/cc/ryanc/halo/service/LogService.java\n--- a/src/main/java/cc/ryanc/halo/service/LogService.java\n+++ b/src/main/java/cc/ryanc/halo/service/LogService.java\n@@ -1,7 +1,9 @@\n package cc.ryanc.halo.service;\n \n+import cc.ryanc.halo.model.dto.LogOutputDTO;\n import cc.ryanc.halo.model.entity.Log;\n import cc.ryanc.halo.service.base.CrudService;\n+import org.springframework.data.domain.Page;\n \n /**\n  * Log service.\n@@ -10,4 +12,11 @@\n  */\n public interface LogService extends CrudService<Log, Long> {\n \n+    /**\n+     * Lists latest logs.\n+     *\n+     * @param top top number must not be less than 0\n+     * @return a page of latest logs\n+     */\n+    Page<LogOutputDTO> listLatest(int top);\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/LogServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/LogServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/LogServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/LogServiceImpl.java\n@@ -1,10 +1,15 @@\n package cc.ryanc.halo.service.impl;\n \n+import cc.ryanc.halo.model.dto.LogOutputDTO;\n import cc.ryanc.halo.model.entity.Log;\n import cc.ryanc.halo.repository.LogRepository;\n import cc.ryanc.halo.service.LogService;\n import cc.ryanc.halo.service.base.AbstractCrudService;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.PageRequest;\n+import org.springframework.data.domain.Sort;\n import org.springframework.stereotype.Service;\n+import org.springframework.util.Assert;\n \n /**\n  * LogService implementation class\n@@ -21,4 +26,15 @@ public LogServiceImpl(LogRepository logRepository) {\n         super(logRepository);\n         this.logRepository = logRepository;\n     }\n+\n+    @Override\n+    public Page<LogOutputDTO> listLatest(int top) {\n+        Assert.isTrue(top > 0, \"Top number must not be less than 0\");\n+\n+        // Build page request\n+        PageRequest latestPageable = PageRequest.of(0, top, Sort.by(Sort.Direction.DESC, \"createTime\"));\n+\n+        // List all\n+        return listAll(latestPageable).map(log -> new LogOutputDTO().convertFrom(log));\n+    }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/AdminController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/AdminController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/AdminController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/AdminController.java\n@@ -3,6 +3,7 @@\n import cc.ryanc.halo.model.dto.PostSimpleOutputDTO;\n import cc.ryanc.halo.service.AttachmentService;\n import cc.ryanc.halo.service.CommentService;\n+import cc.ryanc.halo.service.LogService;\n import cc.ryanc.halo.service.PostService;\n import org.springframework.data.domain.Page;\n import org.springframework.stereotype.Controller;\n@@ -26,12 +27,16 @@ public class AdminController {\n \n     private final AttachmentService attachmentService;\n \n+    private final LogService logService;\n+\n     public AdminController(PostService postService,\n                            CommentService commentService,\n-                           AttachmentService attachmentService) {\n+                           AttachmentService attachmentService,\n+                           LogService logService) {\n         this.postService = postService;\n         this.commentService = commentService;\n         this.attachmentService = attachmentService;\n+        this.logService = logService;\n     }\n \n     /**\n@@ -50,6 +55,7 @@ public String admin(Model model) {\n         model.addAttribute(\"attachmentsCount\", attachmentService.count());\n \n         model.addAttribute(\"latestPosts\", postPage.getContent());\n+        model.addAttribute(\"latestLogs\", logService.listLatest(10).getContent());\n         return \"admin/admin_index\";\n     }\n }",
    "output": "complete list latest logs service"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/entity/Log.java b/src/main/java/cc/ryanc/halo/model/entity/Log.java\n--- a/src/main/java/cc/ryanc/halo/model/entity/Log.java\n+++ b/src/main/java/cc/ryanc/halo/model/entity/Log.java\n@@ -1,7 +1,7 @@\n package cc.ryanc.halo.model.entity;\n \n \n-import cc.ryanc.halo.model.entity.enums.LogType;\n+import cc.ryanc.halo.model.enums.LogType;\n import lombok.Data;\n import lombok.EqualsAndHashCode;\n import lombok.ToString;\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/entity/Post.java b/src/main/java/cc/ryanc/halo/model/entity/Post.java\n--- a/src/main/java/cc/ryanc/halo/model/entity/Post.java\n+++ b/src/main/java/cc/ryanc/halo/model/entity/Post.java\n@@ -1,7 +1,7 @@\n package cc.ryanc.halo.model.entity;\n \n-import cc.ryanc.halo.model.entity.enums.PostCreateFrom;\n-import cc.ryanc.halo.model.entity.enums.PostType;\n+import cc.ryanc.halo.model.enums.PostCreateFrom;\n+import cc.ryanc.halo.model.enums.PostType;\n import lombok.Data;\n import lombok.EqualsAndHashCode;\n import lombok.ToString;\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/enums/AttachOrigin.java b/src/main/java/cc/ryanc/halo/model/enums/AttachOrigin.java\n--- a/src/main/java/cc/ryanc/halo/model/enums/AttachOrigin.java\n+++ b/src/main/java/cc/ryanc/halo/model/enums/AttachOrigin.java\n@@ -1,4 +1,4 @@\n-package cc.ryanc.halo.model.entity.enums;\n+package cc.ryanc.halo.model.enums;\n \n /**\n  * Attach origin.\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/enums/CommentStatus.java b/src/main/java/cc/ryanc/halo/model/enums/CommentStatus.java\n--- a/src/main/java/cc/ryanc/halo/model/enums/CommentStatus.java\n+++ b/src/main/java/cc/ryanc/halo/model/enums/CommentStatus.java\n@@ -1,4 +1,4 @@\n-package cc.ryanc.halo.model.entity.enums;\n+package cc.ryanc.halo.model.enums;\n \n /**\n  * Comment status.\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/enums/LogType.java b/src/main/java/cc/ryanc/halo/model/enums/LogType.java\n--- a/src/main/java/cc/ryanc/halo/model/enums/LogType.java\n+++ b/src/main/java/cc/ryanc/halo/model/enums/LogType.java\n@@ -1,4 +1,4 @@\n-package cc.ryanc.halo.model.entity.enums;\n+package cc.ryanc.halo.model.enums;\n \n /**\n  * Log type.\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/enums/PostCreateFrom.java b/src/main/java/cc/ryanc/halo/model/enums/PostCreateFrom.java\n--- a/src/main/java/cc/ryanc/halo/model/enums/PostCreateFrom.java\n+++ b/src/main/java/cc/ryanc/halo/model/enums/PostCreateFrom.java\n@@ -1,4 +1,4 @@\n-package cc.ryanc.halo.model.entity.enums;\n+package cc.ryanc.halo.model.enums;\n \n /**\n  * Post create from type.\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/enums/PostType.java b/src/main/java/cc/ryanc/halo/model/enums/PostType.java\n--- a/src/main/java/cc/ryanc/halo/model/enums/PostType.java\n+++ b/src/main/java/cc/ryanc/halo/model/enums/PostType.java\n@@ -1,4 +1,4 @@\n-package cc.ryanc.halo.model.entity.enums;\n+package cc.ryanc.halo.model.enums;\n \n /**\n  * Post type.\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/enums/ValueEnum.java b/src/main/java/cc/ryanc/halo/model/enums/ValueEnum.java\n--- a/src/main/java/cc/ryanc/halo/model/enums/ValueEnum.java\n+++ b/src/main/java/cc/ryanc/halo/model/enums/ValueEnum.java\n@@ -1,4 +1,4 @@\n-package cc.ryanc.halo.model.entity.enums;\n+package cc.ryanc.halo.model.enums;\n \n import org.springframework.util.Assert;\n ",
    "output": "Move enum base package"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/repository/AttachmentRepository.java b/src/main/java/cc/ryanc/halo/repository/AttachmentRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/AttachmentRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/AttachmentRepository.java\n@@ -1,4 +1,4 @@\n-package cc.ryanc.halo.repository.v1;\n+package cc.ryanc.halo.repository;\n \n import cc.ryanc.halo.model.entity.Attachment;\n import cc.ryanc.halo.repository.base.BaseRepository;\n\ndiff --git a/src/main/java/cc/ryanc/halo/repository/CategoryRepository.java b/src/main/java/cc/ryanc/halo/repository/CategoryRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/CategoryRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/CategoryRepository.java\n@@ -1,4 +1,4 @@\n-package cc.ryanc.halo.repository.v1;\n+package cc.ryanc.halo.repository;\n \n import cc.ryanc.halo.model.entity.Category;\n import cc.ryanc.halo.repository.base.BaseRepository;\n\ndiff --git a/src/main/java/cc/ryanc/halo/repository/CommentRepository.java b/src/main/java/cc/ryanc/halo/repository/CommentRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/CommentRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/CommentRepository.java\n@@ -1,4 +1,4 @@\n-package cc.ryanc.halo.repository.v1;\n+package cc.ryanc.halo.repository;\n \n import cc.ryanc.halo.model.entity.Comment;\n import cc.ryanc.halo.repository.base.BaseRepository;\n\ndiff --git a/src/main/java/cc/ryanc/halo/repository/GalleryRepository.java b/src/main/java/cc/ryanc/halo/repository/GalleryRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/GalleryRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/GalleryRepository.java\n@@ -1,4 +1,4 @@\n-package cc.ryanc.halo.repository.v1;\n+package cc.ryanc.halo.repository;\n \n import cc.ryanc.halo.model.entity.Gallery;\n import cc.ryanc.halo.repository.base.BaseRepository;\n\ndiff --git a/src/main/java/cc/ryanc/halo/repository/LinkRepository.java b/src/main/java/cc/ryanc/halo/repository/LinkRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/LinkRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/LinkRepository.java\n@@ -1,4 +1,4 @@\n-package cc.ryanc.halo.repository.v1;\n+package cc.ryanc.halo.repository;\n \n import cc.ryanc.halo.model.entity.Link;\n import cc.ryanc.halo.repository.base.BaseRepository;\n\ndiff --git a/src/main/java/cc/ryanc/halo/repository/LogRepository.java b/src/main/java/cc/ryanc/halo/repository/LogRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/LogRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/LogRepository.java\n@@ -1,4 +1,4 @@\n-package cc.ryanc.halo.repository.v1;\n+package cc.ryanc.halo.repository;\n \n import cc.ryanc.halo.model.entity.Log;\n import cc.ryanc.halo.repository.base.BaseRepository;\n\ndiff --git a/src/main/java/cc/ryanc/halo/repository/MenuRepository.java b/src/main/java/cc/ryanc/halo/repository/MenuRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/MenuRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/MenuRepository.java\n@@ -1,4 +1,4 @@\n-package cc.ryanc.halo.repository.v1;\n+package cc.ryanc.halo.repository;\n \n import cc.ryanc.halo.model.entity.Menu;\n import cc.ryanc.halo.repository.base.BaseRepository;\n\ndiff --git a/src/main/java/cc/ryanc/halo/repository/OptionRepository.java b/src/main/java/cc/ryanc/halo/repository/OptionRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/OptionRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/OptionRepository.java\n@@ -1,4 +1,4 @@\n-package cc.ryanc.halo.repository.v1;\n+package cc.ryanc.halo.repository;\n \n import cc.ryanc.halo.model.entity.Option;\n import cc.ryanc.halo.repository.base.BaseRepository;\n\ndiff --git a/src/main/java/cc/ryanc/halo/repository/PostCategoryRepository.java b/src/main/java/cc/ryanc/halo/repository/PostCategoryRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/PostCategoryRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/PostCategoryRepository.java\n@@ -1,4 +1,4 @@\n-package cc.ryanc.halo.repository.v1;\n+package cc.ryanc.halo.repository;\n \n import cc.ryanc.halo.model.entity.PostCategory;\n import cc.ryanc.halo.repository.base.BaseRepository;\n\ndiff --git a/src/main/java/cc/ryanc/halo/repository/PostRepository.java b/src/main/java/cc/ryanc/halo/repository/PostRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/PostRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/PostRepository.java\n@@ -1,4 +1,4 @@\n-package cc.ryanc.halo.repository.v1;\n+package cc.ryanc.halo.repository;\n \n import cc.ryanc.halo.model.entity.Post;\n import cc.ryanc.halo.repository.base.BaseRepository;\n\ndiff --git a/src/main/java/cc/ryanc/halo/repository/PostTagRepository.java b/src/main/java/cc/ryanc/halo/repository/PostTagRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/PostTagRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/PostTagRepository.java\n@@ -1,4 +1,4 @@\n-package cc.ryanc.halo.repository.v1;\n+package cc.ryanc.halo.repository;\n \n import cc.ryanc.halo.model.entity.Tag;\n import cc.ryanc.halo.repository.base.BaseRepository;\n\ndiff --git a/src/main/java/cc/ryanc/halo/repository/TagRepository.java b/src/main/java/cc/ryanc/halo/repository/TagRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/TagRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/TagRepository.java\n@@ -1,4 +1,4 @@\n-package cc.ryanc.halo.repository.v1;\n+package cc.ryanc.halo.repository;\n \n import cc.ryanc.halo.model.entity.Tag;\n import cc.ryanc.halo.repository.base.BaseRepository;\n\ndiff --git a/src/main/java/cc/ryanc/halo/repository/UserRepository.java b/src/main/java/cc/ryanc/halo/repository/UserRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/UserRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/UserRepository.java\n@@ -1,4 +1,4 @@\n-package cc.ryanc.halo.repository.v1;\n+package cc.ryanc.halo.repository;\n \n import cc.ryanc.halo.model.entity.User;\n import cc.ryanc.halo.repository.base.BaseRepository;",
    "output": "change repository package"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/service/AttachmentService.java b/src/main/java/cc/ryanc/halo/service/AttachmentService.java\n--- a/src/main/java/cc/ryanc/halo/service/AttachmentService.java\n+++ b/src/main/java/cc/ryanc/halo/service/AttachmentService.java\n@@ -1,4 +1,4 @@\n-package cc.ryanc.halo.service.v1;\n+package cc.ryanc.halo.service;\n \n import cc.ryanc.halo.model.entity.Attachment;\n import cc.ryanc.halo.service.base.CrudService;\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/CategoryService.java b/src/main/java/cc/ryanc/halo/service/CategoryService.java\n--- a/src/main/java/cc/ryanc/halo/service/CategoryService.java\n+++ b/src/main/java/cc/ryanc/halo/service/CategoryService.java\n@@ -1,4 +1,4 @@\n-package cc.ryanc.halo.service.v1;\n+package cc.ryanc.halo.service;\n \n import cc.ryanc.halo.model.entity.Category;\n import cc.ryanc.halo.service.base.CrudService;\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/CommentService.java b/src/main/java/cc/ryanc/halo/service/CommentService.java\n--- a/src/main/java/cc/ryanc/halo/service/CommentService.java\n+++ b/src/main/java/cc/ryanc/halo/service/CommentService.java\n@@ -1,4 +1,4 @@\n-package cc.ryanc.halo.service.v1;\n+package cc.ryanc.halo.service;\n \n import cc.ryanc.halo.model.entity.Comment;\n import cc.ryanc.halo.service.base.CrudService;\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/GalleryService.java b/src/main/java/cc/ryanc/halo/service/GalleryService.java\n--- a/src/main/java/cc/ryanc/halo/service/GalleryService.java\n+++ b/src/main/java/cc/ryanc/halo/service/GalleryService.java\n@@ -1,4 +1,4 @@\n-package cc.ryanc.halo.service.v1;\n+package cc.ryanc.halo.service;\n \n import cc.ryanc.halo.model.entity.Gallery;\n import cc.ryanc.halo.service.base.CrudService;\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/LinkService.java b/src/main/java/cc/ryanc/halo/service/LinkService.java\n--- a/src/main/java/cc/ryanc/halo/service/LinkService.java\n+++ b/src/main/java/cc/ryanc/halo/service/LinkService.java\n@@ -1,4 +1,4 @@\n-package cc.ryanc.halo.service.v1;\n+package cc.ryanc.halo.service;\n \n import cc.ryanc.halo.model.entity.Link;\n import cc.ryanc.halo.service.base.CrudService;\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/LogService.java b/src/main/java/cc/ryanc/halo/service/LogService.java\n--- a/src/main/java/cc/ryanc/halo/service/LogService.java\n+++ b/src/main/java/cc/ryanc/halo/service/LogService.java\n@@ -1,4 +1,4 @@\n-package cc.ryanc.halo.service.v1;\n+package cc.ryanc.halo.service;\n \n import cc.ryanc.halo.model.entity.Log;\n import cc.ryanc.halo.service.base.CrudService;\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/MenuService.java b/src/main/java/cc/ryanc/halo/service/MenuService.java\n--- a/src/main/java/cc/ryanc/halo/service/MenuService.java\n+++ b/src/main/java/cc/ryanc/halo/service/MenuService.java\n@@ -1,4 +1,4 @@\n-package cc.ryanc.halo.service.v1;\n+package cc.ryanc.halo.service;\n \n import cc.ryanc.halo.model.entity.Menu;\n import cc.ryanc.halo.service.base.CrudService;\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/OptionService.java b/src/main/java/cc/ryanc/halo/service/OptionService.java\n--- a/src/main/java/cc/ryanc/halo/service/OptionService.java\n+++ b/src/main/java/cc/ryanc/halo/service/OptionService.java\n@@ -1,4 +1,4 @@\n-package cc.ryanc.halo.service.v1;\n+package cc.ryanc.halo.service;\n \n import cc.ryanc.halo.model.entity.Option;\n import cc.ryanc.halo.service.base.CrudService;\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/PostService.java b/src/main/java/cc/ryanc/halo/service/PostService.java\n--- a/src/main/java/cc/ryanc/halo/service/PostService.java\n+++ b/src/main/java/cc/ryanc/halo/service/PostService.java\n@@ -1,4 +1,4 @@\n-package cc.ryanc.halo.service.v1;\n+package cc.ryanc.halo.service;\n \n import cc.ryanc.halo.model.entity.Post;\n import cc.ryanc.halo.service.base.CrudService;\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/TagService.java b/src/main/java/cc/ryanc/halo/service/TagService.java\n--- a/src/main/java/cc/ryanc/halo/service/TagService.java\n+++ b/src/main/java/cc/ryanc/halo/service/TagService.java\n@@ -1,4 +1,4 @@\n-package cc.ryanc.halo.service.v1;\n+package cc.ryanc.halo.service;\n \n import cc.ryanc.halo.model.entity.Tag;\n import cc.ryanc.halo.service.base.CrudService;\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/UserService.java b/src/main/java/cc/ryanc/halo/service/UserService.java\n--- a/src/main/java/cc/ryanc/halo/service/UserService.java\n+++ b/src/main/java/cc/ryanc/halo/service/UserService.java\n@@ -1,4 +1,4 @@\n-package cc.ryanc.halo.service.v1;\n+package cc.ryanc.halo.service;\n \n import cc.ryanc.halo.model.entity.User;\n import cc.ryanc.halo.service.base.CrudService;",
    "output": "change service package"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/service/v1/AttachmentService.java b/src/main/java/cc/ryanc/halo/service/v1/AttachmentService.java\n--- a/src/main/java/cc/ryanc/halo/service/v1/AttachmentService.java\n+++ b/src/main/java/cc/ryanc/halo/service/v1/AttachmentService.java\n@@ -0,0 +1,14 @@\n+package cc.ryanc.halo.service.v1;\n+\n+import cc.ryanc.halo.model.entity.Attachment;\n+import cc.ryanc.halo.service.base.CrudService;\n+\n+\n+/**\n+ * Attachment service.\n+ *\n+ * @author johnniang\n+ */\n+public interface AttachmentService extends CrudService<Attachment, Integer> {\n+\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/v1/CategoryService.java b/src/main/java/cc/ryanc/halo/service/v1/CategoryService.java\n--- a/src/main/java/cc/ryanc/halo/service/v1/CategoryService.java\n+++ b/src/main/java/cc/ryanc/halo/service/v1/CategoryService.java\n@@ -0,0 +1,13 @@\n+package cc.ryanc.halo.service.v1;\n+\n+import cc.ryanc.halo.model.entity.Category;\n+import cc.ryanc.halo.service.base.CrudService;\n+\n+/**\n+ * Category service.\n+ *\n+ * @author johnniang\n+ */\n+public interface CategoryService extends CrudService<Category, Integer> {\n+\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/v1/CommentService.java b/src/main/java/cc/ryanc/halo/service/v1/CommentService.java\n--- a/src/main/java/cc/ryanc/halo/service/v1/CommentService.java\n+++ b/src/main/java/cc/ryanc/halo/service/v1/CommentService.java\n@@ -0,0 +1,13 @@\n+package cc.ryanc.halo.service.v1;\n+\n+import cc.ryanc.halo.model.entity.Comment;\n+import cc.ryanc.halo.service.base.CrudService;\n+\n+/**\n+ * Comment service.\n+ *\n+ * @author johnniang\n+ */\n+public interface CommentService extends CrudService<Comment, Long> {\n+\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/v1/GalleryService.java b/src/main/java/cc/ryanc/halo/service/v1/GalleryService.java\n--- a/src/main/java/cc/ryanc/halo/service/v1/GalleryService.java\n+++ b/src/main/java/cc/ryanc/halo/service/v1/GalleryService.java\n@@ -0,0 +1,13 @@\n+package cc.ryanc.halo.service.v1;\n+\n+import cc.ryanc.halo.model.entity.Gallery;\n+import cc.ryanc.halo.service.base.CrudService;\n+\n+/**\n+ * Gallery service.\n+ *\n+ * @author johnniang\n+ */\n+public interface GalleryService extends CrudService<Gallery, Integer> {\n+\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/v1/LinkService.java b/src/main/java/cc/ryanc/halo/service/v1/LinkService.java\n--- a/src/main/java/cc/ryanc/halo/service/v1/LinkService.java\n+++ b/src/main/java/cc/ryanc/halo/service/v1/LinkService.java\n@@ -0,0 +1,13 @@\n+package cc.ryanc.halo.service.v1;\n+\n+import cc.ryanc.halo.model.entity.Link;\n+import cc.ryanc.halo.service.base.CrudService;\n+\n+/**\n+ * Link service.\n+ *\n+ * @author johnniang\n+ */\n+public interface LinkService extends CrudService<Link, Integer> {\n+\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/v1/LogService.java b/src/main/java/cc/ryanc/halo/service/v1/LogService.java\n--- a/src/main/java/cc/ryanc/halo/service/v1/LogService.java\n+++ b/src/main/java/cc/ryanc/halo/service/v1/LogService.java\n@@ -0,0 +1,13 @@\n+package cc.ryanc.halo.service.v1;\n+\n+import cc.ryanc.halo.model.entity.Log;\n+import cc.ryanc.halo.service.base.CrudService;\n+\n+/**\n+ * Log service.\n+ *\n+ * @author johnniang\n+ */\n+public interface LogService extends CrudService<Log, Long> {\n+\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/v1/MenuService.java b/src/main/java/cc/ryanc/halo/service/v1/MenuService.java\n--- a/src/main/java/cc/ryanc/halo/service/v1/MenuService.java\n+++ b/src/main/java/cc/ryanc/halo/service/v1/MenuService.java\n@@ -0,0 +1,13 @@\n+package cc.ryanc.halo.service.v1;\n+\n+import cc.ryanc.halo.model.entity.Menu;\n+import cc.ryanc.halo.service.base.CrudService;\n+\n+/**\n+ * Menu service.\n+ *\n+ * @author johnniang\n+ */\n+public interface MenuService extends CrudService<Menu, Integer> {\n+\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/v1/OptionService.java b/src/main/java/cc/ryanc/halo/service/v1/OptionService.java\n--- a/src/main/java/cc/ryanc/halo/service/v1/OptionService.java\n+++ b/src/main/java/cc/ryanc/halo/service/v1/OptionService.java\n@@ -0,0 +1,13 @@\n+package cc.ryanc.halo.service.v1;\n+\n+import cc.ryanc.halo.model.entity.Option;\n+import cc.ryanc.halo.service.base.CrudService;\n+\n+/**\n+ * Option service.\n+ *\n+ * @author johnniang\n+ */\n+public interface OptionService extends CrudService<Option, Integer> {\n+\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/v1/PostService.java b/src/main/java/cc/ryanc/halo/service/v1/PostService.java\n--- a/src/main/java/cc/ryanc/halo/service/v1/PostService.java\n+++ b/src/main/java/cc/ryanc/halo/service/v1/PostService.java\n@@ -0,0 +1,13 @@\n+package cc.ryanc.halo.service.v1;\n+\n+import cc.ryanc.halo.model.entity.Post;\n+import cc.ryanc.halo.service.base.CrudService;\n+\n+/**\n+ * Post service.\n+ *\n+ * @author johnniang\n+ */\n+public interface PostService extends CrudService<Post, Integer> {\n+\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/v1/TagService.java b/src/main/java/cc/ryanc/halo/service/v1/TagService.java\n--- a/src/main/java/cc/ryanc/halo/service/v1/TagService.java\n+++ b/src/main/java/cc/ryanc/halo/service/v1/TagService.java\n@@ -0,0 +1,15 @@\n+package cc.ryanc.halo.service.v1;\n+\n+import cc.ryanc.halo.model.entity.Tag;\n+import cc.ryanc.halo.service.base.CrudService;\n+\n+import java.util.List;\n+\n+\n+/**\n+ * Tag service.\n+ *\n+ * @author johnniang\n+ */\n+public interface TagService extends CrudService<Tag, Integer> {\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/v1/UserService.java b/src/main/java/cc/ryanc/halo/service/v1/UserService.java\n--- a/src/main/java/cc/ryanc/halo/service/v1/UserService.java\n+++ b/src/main/java/cc/ryanc/halo/service/v1/UserService.java\n@@ -0,0 +1,13 @@\n+package cc.ryanc.halo.service.v1;\n+\n+import cc.ryanc.halo.model.entity.User;\n+import cc.ryanc.halo.service.base.CrudService;\n+\n+/**\n+ * User service.\n+ *\n+ * @author johnniang\n+ */\n+public interface UserService extends CrudService<User, Integer> {\n+\n+}",
    "output": "Add all services with basic structure"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/config/WebMvcAutoConfiguration.java b/src/main/java/cc/ryanc/halo/config/WebMvcAutoConfiguration.java\n--- a/src/main/java/cc/ryanc/halo/config/WebMvcAutoConfiguration.java\n+++ b/src/main/java/cc/ryanc/halo/config/WebMvcAutoConfiguration.java\n@@ -98,7 +98,7 @@ public void addResourceHandlers(ResourceHandlerRegistry registry) {\n         registry.addResourceHandler(\"/upload/**\")\n                 .addResourceLocations(\"file:///\" + System.getProperties().getProperty(\"user.home\") + \"/halo/upload/\");\n         registry.addResourceHandler(\"/favicon.ico\")\n-                .addResourceLocations(\"classpath:/static/halo-backend/images/favicon.ico\");\n+                .addResourceLocations(\"classpath:/static/halo-admin/images/favicon.ico\");\n         registry.addResourceHandler(\"/backup/**\")\n                 .addResourceLocations(\"file:///\" + System.getProperties().getProperty(\"user.home\") + \"/halo/backup/\");\n \n\ndiff --git a/src/main/java/cc/ryanc/halo/model/enums/BlogPropertiesEnum.java b/src/main/java/cc/ryanc/halo/model/enums/BlogPropertiesEnum.java\n--- a/src/main/java/cc/ryanc/halo/model/enums/BlogPropertiesEnum.java\n+++ b/src/main/java/cc/ryanc/halo/model/enums/BlogPropertiesEnum.java\n@@ -138,7 +138,7 @@ public enum BlogPropertiesEnum {\n     /**\n      * 默认缩略图地址\n      */\n-    DEFAULT_THUMBNAIL(\"/static/halo-frontend/images/thumbnail/thumbnail.png\"),\n+    DEFAULT_THUMBNAIL(\"/static/halo-content/images/thumbnail/thumbnail.png\"),\n \n     /**\n      * 自动备份\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/PageController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/PageController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/PageController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/PageController.java\n@@ -260,7 +260,7 @@ public JsonResult pushPage(@ModelAttribute Post post, HttpSession session) {\n             post.setPostContent(MarkdownUtils.renderMarkdown(post.getPostContentMd()));\n             //当没有选择文章缩略图的时候，自动分配一张内置的缩略图\n             if (StrUtil.equals(post.getPostThumbnail(), BlogPropertiesEnum.DEFAULT_THUMBNAIL.getProp())) {\n-                post.setPostThumbnail(OPTIONS.get(BlogPropertiesEnum.BLOG_URL.getProp()) + \"/static/halo-frontend/images/thumbnail/thumbnail-\" + RandomUtil.randomInt(1, 11) + \".jpg\");\n+                post.setPostThumbnail(OPTIONS.get(BlogPropertiesEnum.BLOG_URL.getProp()) + \"/static/halo-content/images/thumbnail/thumbnail-\" + RandomUtil.randomInt(1, 11) + \".jpg\");\n             }\n             postService.create(post);\n             logsService.save(LogsRecord.PUSH_PAGE, post.getPostTitle(), request);\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java\n@@ -162,7 +162,7 @@ public JsonResult save(@ModelAttribute Post post,\n             }\n             //当没有选择文章缩略图的时候，自动分配一张内置的缩略图\n             if (StrUtil.equals(post.getPostThumbnail(), BlogPropertiesEnum.DEFAULT_THUMBNAIL.getProp())) {\n-                post.setPostThumbnail(OPTIONS.get(BlogPropertiesEnum.BLOG_URL.getProp()) + \"/static/halo-frontend/images/thumbnail/thumbnail-\" + RandomUtil.randomInt(1, 11) + \".jpg\");\n+                post.setPostThumbnail(OPTIONS.get(BlogPropertiesEnum.BLOG_URL.getProp()) + \"/static/halo-content/images/thumbnail/thumbnail-\" + RandomUtil.randomInt(1, 11) + \".jpg\");\n             }\n             postService.create(post);\n             logsService.save(LogsRecord.PUSH_POST, post.getPostTitle(), request);\n@@ -200,7 +200,7 @@ public JsonResult update(@ModelAttribute Post post,\n         }\n         //当没有选择文章缩略图的时候，自动分配一张内置的缩略图\n         if (StrUtil.equals(post.getPostThumbnail(), BlogPropertiesEnum.DEFAULT_THUMBNAIL.getProp())) {\n-            post.setPostThumbnail(OPTIONS.get(BlogPropertiesEnum.BLOG_URL.getProp()) + \"/static/halo-frontend/images/thumbnail/thumbnail-\" + RandomUtil.randomInt(1, 11) + \".jpg\");\n+            post.setPostThumbnail(OPTIONS.get(BlogPropertiesEnum.BLOG_URL.getProp()) + \"/static/halo-content/images/thumbnail/thumbnail-\" + RandomUtil.randomInt(1, 11) + \".jpg\");\n         }\n         post = postService.create(post);\n         if (null != post) {\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/core/InstallController.java b/src/main/java/cc/ryanc/halo/web/controller/core/InstallController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/core/InstallController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/core/InstallController.java\n@@ -142,7 +142,7 @@ public JsonResult doInstall(@RequestParam(\"blogLocale\") String blogLocale,\n             post.setUser(user);\n             post.setCategories(categories);\n             post.setAllowComment(AllowCommentEnum.ALLOW.getCode());\n-            post.setPostThumbnail(\"/static/halo-frontend/images/thumbnail/thumbnail-\" + RandomUtil.randomInt(1, 11) + \".jpg\");\n+            post.setPostThumbnail(\"/static/halo-content/images/thumbnail/thumbnail-\" + RandomUtil.randomInt(1, 11) + \".jpg\");\n             postService.create(post);\n \n             //第一个评论",
    "output": "change resource path"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/entity/enums/AttachOrigin.java b/src/main/java/cc/ryanc/halo/model/entity/enums/AttachOrigin.java\n--- a/src/main/java/cc/ryanc/halo/model/entity/enums/AttachOrigin.java\n+++ b/src/main/java/cc/ryanc/halo/model/entity/enums/AttachOrigin.java\n@@ -7,17 +7,35 @@\n  * @date : 2019-03-12\n  */\n public enum AttachOrigin implements ValueEnum<Integer> {\n-    ;\n+\n+    /**\n+     * 服务器\n+     */\n+    SERVER(0),\n+\n+    /**\n+     * 又拍云\n+     */\n+    UPYUN(1),\n+\n+    /**\n+     * 七牛云\n+     */\n+    QINIUYUN(2);\n \n     private Integer value;\n \n+    AttachOrigin(Integer value) {\n+        this.value = value;\n+    }\n+\n     /**\n      * Get enum value.\n      *\n      * @return enum value\n      */\n     @Override\n     public Integer getValue() {\n-        return null;\n+        return value;\n     }\n }",
    "output": "modify AttachOrigin enum"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/entity/enums/AttachOrigin.java b/src/main/java/cc/ryanc/halo/model/entity/enums/AttachOrigin.java\n--- a/src/main/java/cc/ryanc/halo/model/entity/enums/AttachOrigin.java\n+++ b/src/main/java/cc/ryanc/halo/model/entity/enums/AttachOrigin.java\n@@ -1,10 +1,13 @@\n package cc.ryanc.halo.model.entity.enums;\n \n /**\n+ * Attach origin.\n+ *\n  * @author : RYAN0UP\n  * @date : 2019-03-12\n  */\n-public enum AttachOrigin implements ValueEnum<Integer> {;\n+public enum AttachOrigin implements ValueEnum<Integer> {\n+    ;\n \n     private Integer value;\n \n\ndiff --git a/src/main/java/cc/ryanc/halo/repository/AttachmentRepository.java b/src/main/java/cc/ryanc/halo/repository/AttachmentRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/AttachmentRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/AttachmentRepository.java\n@@ -2,7 +2,6 @@\n \n import cc.ryanc.halo.model.domain.Attachment;\n import cc.ryanc.halo.repository.base.BaseRepository;\n-import org.springframework.data.jpa.repository.JpaRepository;\n \n /**\n  * <pre>\n\ndiff --git a/src/main/java/cc/ryanc/halo/repository/v1/AttachmentRepository.java b/src/main/java/cc/ryanc/halo/repository/v1/AttachmentRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/v1/AttachmentRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/v1/AttachmentRepository.java\n@@ -0,0 +1,12 @@\n+package cc.ryanc.halo.repository.v1;\n+\n+import cc.ryanc.halo.model.entity.Attachment;\n+import cc.ryanc.halo.repository.base.BaseRepository;\n+\n+/**\n+ * Attachment repository\n+ *\n+ * @author johnniang\n+ */\n+public interface AttachmentRepository extends BaseRepository<Attachment, Integer> {\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/repository/v1/CategoryRepository.java b/src/main/java/cc/ryanc/halo/repository/v1/CategoryRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/v1/CategoryRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/v1/CategoryRepository.java\n@@ -0,0 +1,12 @@\n+package cc.ryanc.halo.repository.v1;\n+\n+import cc.ryanc.halo.model.entity.Category;\n+import cc.ryanc.halo.repository.base.BaseRepository;\n+\n+/**\n+ * Category repository.\n+ *\n+ * @author johnniang\n+ */\n+public interface CategoryRepository extends BaseRepository<Category, Integer> {\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/repository/v1/CommentRepository.java b/src/main/java/cc/ryanc/halo/repository/v1/CommentRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/v1/CommentRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/v1/CommentRepository.java\n@@ -0,0 +1,10 @@\n+package cc.ryanc.halo.repository.v1;\n+\n+import cc.ryanc.halo.model.entity.Comment;\n+import cc.ryanc.halo.repository.base.BaseRepository;\n+\n+/**\n+ *\n+ */\n+public interface CommentRepository extends BaseRepository<Comment, Long> {\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/repository/v1/GalleryRepository.java b/src/main/java/cc/ryanc/halo/repository/v1/GalleryRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/v1/GalleryRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/v1/GalleryRepository.java\n@@ -0,0 +1,12 @@\n+package cc.ryanc.halo.repository.v1;\n+\n+import cc.ryanc.halo.model.entity.Gallery;\n+import cc.ryanc.halo.repository.base.BaseRepository;\n+\n+/**\n+ * Gallery repository.\n+ *\n+ * @author johnniang\n+ */\n+public interface GalleryRepository extends BaseRepository<Gallery, Integer> {\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/repository/v1/LinkRepository.java b/src/main/java/cc/ryanc/halo/repository/v1/LinkRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/v1/LinkRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/v1/LinkRepository.java\n@@ -0,0 +1,12 @@\n+package cc.ryanc.halo.repository.v1;\n+\n+import cc.ryanc.halo.model.entity.Link;\n+import cc.ryanc.halo.repository.base.BaseRepository;\n+\n+/**\n+ * Link repository.\n+ *\n+ * @author johnniang\n+ */\n+public interface LinkRepository extends BaseRepository<Link, Integer> {\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/repository/v1/LogRepository.java b/src/main/java/cc/ryanc/halo/repository/v1/LogRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/v1/LogRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/v1/LogRepository.java\n@@ -0,0 +1,13 @@\n+package cc.ryanc.halo.repository.v1;\n+\n+import cc.ryanc.halo.model.entity.Log;\n+import cc.ryanc.halo.repository.base.BaseRepository;\n+\n+/**\n+ * Log repository.\n+ *\n+ * @author johnniang\n+ */\n+public interface LogRepository extends BaseRepository<Log, Long> {\n+\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/repository/v1/MenuRepository.java b/src/main/java/cc/ryanc/halo/repository/v1/MenuRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/v1/MenuRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/v1/MenuRepository.java\n@@ -0,0 +1,12 @@\n+package cc.ryanc.halo.repository.v1;\n+\n+import cc.ryanc.halo.model.entity.Menu;\n+import cc.ryanc.halo.repository.base.BaseRepository;\n+\n+/**\n+ * Menu repository.\n+ *\n+ * @author johnniang\n+ */\n+public interface MenuRepository extends BaseRepository<Menu, Integer> {\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/repository/v1/OptionRepository.java b/src/main/java/cc/ryanc/halo/repository/v1/OptionRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/v1/OptionRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/v1/OptionRepository.java\n@@ -0,0 +1,13 @@\n+package cc.ryanc.halo.repository.v1;\n+\n+import cc.ryanc.halo.model.entity.Option;\n+import cc.ryanc.halo.repository.base.BaseRepository;\n+\n+/**\n+ * Option repository.\n+ *\n+ * @author johnniang\n+ */\n+public interface OptionRepository extends BaseRepository<Option, Integer> {\n+\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/repository/v1/PostCategoryRepository.java b/src/main/java/cc/ryanc/halo/repository/v1/PostCategoryRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/v1/PostCategoryRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/v1/PostCategoryRepository.java\n@@ -0,0 +1,14 @@\n+package cc.ryanc.halo.repository.v1;\n+\n+import cc.ryanc.halo.model.entity.PostCategory;\n+import cc.ryanc.halo.repository.base.BaseRepository;\n+\n+\n+/**\n+ * Post category repository.\n+ *\n+ * @author johnniang\n+ */\n+public interface PostCategoryRepository extends BaseRepository<PostCategory, Integer> {\n+\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/repository/v1/PostRepository.java b/src/main/java/cc/ryanc/halo/repository/v1/PostRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/v1/PostRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/v1/PostRepository.java\n@@ -0,0 +1,15 @@\n+package cc.ryanc.halo.repository.v1;\n+\n+import cc.ryanc.halo.model.entity.Post;\n+import cc.ryanc.halo.repository.base.BaseRepository;\n+import org.springframework.data.jpa.repository.JpaSpecificationExecutor;\n+\n+\n+/**\n+ * Post repository.\n+ *\n+ * @author johnniang\n+ */\n+public interface PostRepository extends BaseRepository<Post, Integer>, JpaSpecificationExecutor<Post> {\n+\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/repository/v1/PostTagRepository.java b/src/main/java/cc/ryanc/halo/repository/v1/PostTagRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/v1/PostTagRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/v1/PostTagRepository.java\n@@ -0,0 +1,14 @@\n+package cc.ryanc.halo.repository.v1;\n+\n+import cc.ryanc.halo.model.entity.Tag;\n+import cc.ryanc.halo.repository.base.BaseRepository;\n+\n+\n+/**\n+ * Post tag repository.\n+ *\n+ * @author johnniang\n+ */\n+public interface PostTagRepository extends BaseRepository<Tag, Integer> {\n+\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/repository/v1/TagRepository.java b/src/main/java/cc/ryanc/halo/repository/v1/TagRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/v1/TagRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/v1/TagRepository.java\n@@ -0,0 +1,13 @@\n+package cc.ryanc.halo.repository.v1;\n+\n+import cc.ryanc.halo.model.entity.Tag;\n+import cc.ryanc.halo.repository.base.BaseRepository;\n+\n+/**\n+ * Tag repository.\n+ *\n+ * @author johnniang\n+ */\n+public interface TagRepository extends BaseRepository<Tag, Integer> {\n+\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/repository/v1/UserRepository.java b/src/main/java/cc/ryanc/halo/repository/v1/UserRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/v1/UserRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/v1/UserRepository.java\n@@ -0,0 +1,13 @@\n+package cc.ryanc.halo.repository.v1;\n+\n+import cc.ryanc.halo.model.entity.User;\n+import cc.ryanc.halo.repository.base.BaseRepository;\n+\n+/**\n+ * User repository.\n+ *\n+ * @author johnniang\n+ */\n+public interface UserRepository extends BaseRepository<User, Integer> {\n+\n+}",
    "output": "Add all repositories with basic structure"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/domain/Attachment.java b/src/main/java/cc/ryanc/halo/model/domain/Attachment.java\n--- a/src/main/java/cc/ryanc/halo/model/domain/Attachment.java\n+++ b/src/main/java/cc/ryanc/halo/model/domain/Attachment.java\n@@ -22,6 +22,7 @@\n @Entity\n @Table(name = \"halo_attachment\")\n @EntityListeners(AuditingEntityListener.class)\n+@Deprecated\n public class Attachment implements Serializable {\n \n     private static final long serialVersionUID = 3060117944880138064L;\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/domain/Category.java b/src/main/java/cc/ryanc/halo/model/domain/Category.java\n--- a/src/main/java/cc/ryanc/halo/model/domain/Category.java\n+++ b/src/main/java/cc/ryanc/halo/model/domain/Category.java\n@@ -22,6 +22,7 @@\n @ToString\n @Entity\n @Table(name = \"halo_category\")\n+@Deprecated\n public class Category implements Serializable {\n \n     private static final long serialVersionUID = 8383678847517271505L;\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/domain/Comment.java b/src/main/java/cc/ryanc/halo/model/domain/Comment.java\n--- a/src/main/java/cc/ryanc/halo/model/domain/Comment.java\n+++ b/src/main/java/cc/ryanc/halo/model/domain/Comment.java\n@@ -27,6 +27,7 @@\n @Entity\n @Table(name = \"halo_comment\")\n @EntityListeners(AuditingEntityListener.class)\n+@Deprecated\n public class Comment implements Serializable {\n \n     private static final long serialVersionUID = -6639021627094260505L;\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/domain/Gallery.java b/src/main/java/cc/ryanc/halo/model/domain/Gallery.java\n--- a/src/main/java/cc/ryanc/halo/model/domain/Gallery.java\n+++ b/src/main/java/cc/ryanc/halo/model/domain/Gallery.java\n@@ -21,6 +21,7 @@\n @ToString\n @Entity\n @Table(name = \"halo_gallery\")\n+@Deprecated\n public class Gallery implements Serializable {\n \n     private static final long serialVersionUID = 1646093266970933841L;\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/domain/Link.java b/src/main/java/cc/ryanc/halo/model/domain/Link.java\n--- a/src/main/java/cc/ryanc/halo/model/domain/Link.java\n+++ b/src/main/java/cc/ryanc/halo/model/domain/Link.java\n@@ -22,6 +22,7 @@\n @ToString\n @Entity\n @Table(name = \"halo_link\")\n+@Deprecated\n public class Link implements Serializable {\n \n     private static final long serialVersionUID = 5441686055841177588L;\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/domain/Logs.java b/src/main/java/cc/ryanc/halo/model/domain/Logs.java\n--- a/src/main/java/cc/ryanc/halo/model/domain/Logs.java\n+++ b/src/main/java/cc/ryanc/halo/model/domain/Logs.java\n@@ -21,6 +21,7 @@\n @ToString\n @Entity\n @Table(name = \"halo_logs\")\n+@Deprecated\n @EntityListeners(AuditingEntityListener.class)\n public class Logs implements Serializable {\n \n\ndiff --git a/src/main/java/cc/ryanc/halo/model/domain/Menu.java b/src/main/java/cc/ryanc/halo/model/domain/Menu.java\n--- a/src/main/java/cc/ryanc/halo/model/domain/Menu.java\n+++ b/src/main/java/cc/ryanc/halo/model/domain/Menu.java\n@@ -23,6 +23,7 @@\n @ToString\n @Entity\n @Table(name = \"halo_menu\")\n+@Deprecated\n public class Menu implements Serializable {\n \n     private static final long serialVersionUID = -7726233157376388786L;\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/domain/Options.java b/src/main/java/cc/ryanc/halo/model/domain/Options.java\n--- a/src/main/java/cc/ryanc/halo/model/domain/Options.java\n+++ b/src/main/java/cc/ryanc/halo/model/domain/Options.java\n@@ -18,6 +18,7 @@\n @ToString\n @Entity\n @Table(name = \"halo_options\")\n+@Deprecated\n public class Options implements Serializable {\n \n     private static final long serialVersionUID = -4065369084341893446L;\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/domain/Post.java b/src/main/java/cc/ryanc/halo/model/domain/Post.java\n--- a/src/main/java/cc/ryanc/halo/model/domain/Post.java\n+++ b/src/main/java/cc/ryanc/halo/model/domain/Post.java\n@@ -28,6 +28,7 @@\n @Entity\n @Table(name = \"halo_post\")\n @EntityListeners(AuditingEntityListener.class)\n+@Deprecated\n public class Post implements Serializable {\n \n     private static final long serialVersionUID = -6019684584665869629L;\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/domain/Tag.java b/src/main/java/cc/ryanc/halo/model/domain/Tag.java\n--- a/src/main/java/cc/ryanc/halo/model/domain/Tag.java\n+++ b/src/main/java/cc/ryanc/halo/model/domain/Tag.java\n@@ -22,6 +22,7 @@\n @ToString\n @Entity\n @Table(name = \"halo_tag\")\n+@Deprecated\n public class Tag implements Serializable {\n \n     private static final long serialVersionUID = -7501342327884372194L;\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/domain/User.java b/src/main/java/cc/ryanc/halo/model/domain/User.java\n--- a/src/main/java/cc/ryanc/halo/model/domain/User.java\n+++ b/src/main/java/cc/ryanc/halo/model/domain/User.java\n@@ -25,6 +25,7 @@\n @ToString\n @Entity\n @Table(name = \"halo_user\")\n+@Deprecated\n public class User implements Serializable {\n \n     private static final long serialVersionUID = -5144055068797033748L;",
    "output": "Merge remote-tracking branch 'origin/v1' into v1"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/domain/Attachment.java b/src/main/java/cc/ryanc/halo/model/domain/Attachment.java\n--- a/src/main/java/cc/ryanc/halo/model/domain/Attachment.java\n+++ b/src/main/java/cc/ryanc/halo/model/domain/Attachment.java\n@@ -22,6 +22,7 @@\n @Entity\n @Table(name = \"halo_attachment\")\n @EntityListeners(AuditingEntityListener.class)\n+@Deprecated\n public class Attachment implements Serializable {\n \n     private static final long serialVersionUID = 3060117944880138064L;\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/domain/Category.java b/src/main/java/cc/ryanc/halo/model/domain/Category.java\n--- a/src/main/java/cc/ryanc/halo/model/domain/Category.java\n+++ b/src/main/java/cc/ryanc/halo/model/domain/Category.java\n@@ -22,6 +22,7 @@\n @ToString\n @Entity\n @Table(name = \"halo_category\")\n+@Deprecated\n public class Category implements Serializable {\n \n     private static final long serialVersionUID = 8383678847517271505L;\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/domain/Comment.java b/src/main/java/cc/ryanc/halo/model/domain/Comment.java\n--- a/src/main/java/cc/ryanc/halo/model/domain/Comment.java\n+++ b/src/main/java/cc/ryanc/halo/model/domain/Comment.java\n@@ -27,6 +27,7 @@\n @Entity\n @Table(name = \"halo_comment\")\n @EntityListeners(AuditingEntityListener.class)\n+@Deprecated\n public class Comment implements Serializable {\n \n     private static final long serialVersionUID = -6639021627094260505L;\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/domain/Gallery.java b/src/main/java/cc/ryanc/halo/model/domain/Gallery.java\n--- a/src/main/java/cc/ryanc/halo/model/domain/Gallery.java\n+++ b/src/main/java/cc/ryanc/halo/model/domain/Gallery.java\n@@ -21,6 +21,7 @@\n @ToString\n @Entity\n @Table(name = \"halo_gallery\")\n+@Deprecated\n public class Gallery implements Serializable {\n \n     private static final long serialVersionUID = 1646093266970933841L;\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/domain/Link.java b/src/main/java/cc/ryanc/halo/model/domain/Link.java\n--- a/src/main/java/cc/ryanc/halo/model/domain/Link.java\n+++ b/src/main/java/cc/ryanc/halo/model/domain/Link.java\n@@ -22,6 +22,7 @@\n @ToString\n @Entity\n @Table(name = \"halo_link\")\n+@Deprecated\n public class Link implements Serializable {\n \n     private static final long serialVersionUID = 5441686055841177588L;\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/domain/Logs.java b/src/main/java/cc/ryanc/halo/model/domain/Logs.java\n--- a/src/main/java/cc/ryanc/halo/model/domain/Logs.java\n+++ b/src/main/java/cc/ryanc/halo/model/domain/Logs.java\n@@ -21,6 +21,7 @@\n @ToString\n @Entity\n @Table(name = \"halo_logs\")\n+@Deprecated\n @EntityListeners(AuditingEntityListener.class)\n public class Logs implements Serializable {\n \n\ndiff --git a/src/main/java/cc/ryanc/halo/model/domain/Menu.java b/src/main/java/cc/ryanc/halo/model/domain/Menu.java\n--- a/src/main/java/cc/ryanc/halo/model/domain/Menu.java\n+++ b/src/main/java/cc/ryanc/halo/model/domain/Menu.java\n@@ -23,6 +23,7 @@\n @ToString\n @Entity\n @Table(name = \"halo_menu\")\n+@Deprecated\n public class Menu implements Serializable {\n \n     private static final long serialVersionUID = -7726233157376388786L;\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/domain/Options.java b/src/main/java/cc/ryanc/halo/model/domain/Options.java\n--- a/src/main/java/cc/ryanc/halo/model/domain/Options.java\n+++ b/src/main/java/cc/ryanc/halo/model/domain/Options.java\n@@ -18,6 +18,7 @@\n @ToString\n @Entity\n @Table(name = \"halo_options\")\n+@Deprecated\n public class Options implements Serializable {\n \n     private static final long serialVersionUID = -4065369084341893446L;\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/domain/Post.java b/src/main/java/cc/ryanc/halo/model/domain/Post.java\n--- a/src/main/java/cc/ryanc/halo/model/domain/Post.java\n+++ b/src/main/java/cc/ryanc/halo/model/domain/Post.java\n@@ -28,6 +28,7 @@\n @Entity\n @Table(name = \"halo_post\")\n @EntityListeners(AuditingEntityListener.class)\n+@Deprecated\n public class Post implements Serializable {\n \n     private static final long serialVersionUID = -6019684584665869629L;\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/domain/Tag.java b/src/main/java/cc/ryanc/halo/model/domain/Tag.java\n--- a/src/main/java/cc/ryanc/halo/model/domain/Tag.java\n+++ b/src/main/java/cc/ryanc/halo/model/domain/Tag.java\n@@ -22,6 +22,7 @@\n @ToString\n @Entity\n @Table(name = \"halo_tag\")\n+@Deprecated\n public class Tag implements Serializable {\n \n     private static final long serialVersionUID = -7501342327884372194L;\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/domain/User.java b/src/main/java/cc/ryanc/halo/model/domain/User.java\n--- a/src/main/java/cc/ryanc/halo/model/domain/User.java\n+++ b/src/main/java/cc/ryanc/halo/model/domain/User.java\n@@ -25,6 +25,7 @@\n @ToString\n @Entity\n @Table(name = \"halo_user\")\n+@Deprecated\n public class User implements Serializable {\n \n     private static final long serialVersionUID = -5144055068797033748L;",
    "output": "Tag @Deprecated annotation on old domains"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/dto/base/AbstractInputConverter.java b/src/main/java/cc/ryanc/halo/model/dto/base/AbstractInputConverter.java\n--- a/src/main/java/cc/ryanc/halo/model/dto/base/AbstractInputConverter.java\n+++ b/src/main/java/cc/ryanc/halo/model/dto/base/AbstractInputConverter.java\n@@ -1,40 +0,0 @@\n-package cc.ryanc.halo.model.dto.base;\n-\n-import java.lang.reflect.ParameterizedType;\n-import java.lang.reflect.Type;\n-\n-import static cc.ryanc.halo.utils.BeanUtils.transformFrom;\n-import static cc.ryanc.halo.utils.BeanUtils.updateProperties;\n-\n-/**\n- * Convenience for input dto.Abstract input dto converter.\n- *\n- * @author johnniang\n- */\n-@Deprecated\n-public abstract class AbstractInputConverter<DOMAIN> implements InputConverter<DOMAIN> {\n-\n-    @SuppressWarnings(\"unchecked\")\n-    private final Class<DOMAIN> domainType = (Class<DOMAIN>) fetchType(0);\n-\n-    @Override\n-    public DOMAIN convertTo() {\n-        return transformFrom(this, domainType);\n-    }\n-\n-    @Override\n-    public void update(DOMAIN domain) {\n-        updateProperties(this, domain);\n-    }\n-\n-    /**\n-     * Get actual generic type.\n-     *\n-     * @param index generic type index\n-     * @return real type will be returned\n-     */\n-    private Type fetchType(int index) {\n-        return ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[index];\n-    }\n-\n-}\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/dto/base/AbstractOutputConverter.java b/src/main/java/cc/ryanc/halo/model/dto/base/AbstractOutputConverter.java\n--- a/src/main/java/cc/ryanc/halo/model/dto/base/AbstractOutputConverter.java\n+++ b/src/main/java/cc/ryanc/halo/model/dto/base/AbstractOutputConverter.java\n@@ -1,42 +0,0 @@\n-package cc.ryanc.halo.model.dto.base;\n-\n-import org.springframework.util.Assert;\n-\n-import java.lang.reflect.ParameterizedType;\n-import java.lang.reflect.Type;\n-\n-import static cc.ryanc.halo.utils.BeanUtils.updateProperties;\n-\n-/**\n- * Abstract output dto converter. (it must be extended by DTO)\n- *\n- * @author johnniang\n- */\n-@Deprecated\n-public abstract class AbstractOutputConverter<DTO extends OutputConverter<DTO, DOMAIN>, DOMAIN> implements OutputConverter<DTO, DOMAIN> {\n-\n-    @SuppressWarnings(\"unchecked\")\n-    private final Class<DTO> dtoType = (Class<DTO>) fetchType(0);\n-\n-    public AbstractOutputConverter() {\n-        Assert.isTrue(dtoType.equals(getClass()), \"this converter must be extended by DTO type\");\n-    }\n-\n-    @Override\n-    @SuppressWarnings(\"unchecked\")\n-    public <T extends DTO> T convertFrom(DOMAIN domain) {\n-        updateProperties(domain, this);\n-        return (T) this;\n-    }\n-\n-    /**\n-     * Get actual generic type.\n-     *\n-     * @param index generic type index\n-     * @return real type will be returned\n-     */\n-    private Type fetchType(int index) {\n-        return ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[index];\n-    }\n-\n-}",
    "output": "Remove Abstract*Converter"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/dto/AttachmentAdminOutputDTO.java b/src/main/java/cc/ryanc/halo/model/dto/AttachmentAdminOutputDTO.java\n--- a/src/main/java/cc/ryanc/halo/model/dto/AttachmentAdminOutputDTO.java\n+++ b/src/main/java/cc/ryanc/halo/model/dto/AttachmentAdminOutputDTO.java\n@@ -1,15 +1,15 @@\n package cc.ryanc.halo.model.dto;\n \n import cc.ryanc.halo.model.domain.Attachment;\n-import cc.ryanc.halo.model.dto.base.AbstractOutputConverter;\n+import cc.ryanc.halo.model.dto.base.OutputConverter;\n import lombok.Data;\n \n /**\n  * @author : RYAN0UP\n  * @date : 2019-03-10\n  */\n @Data\n-public class AttachmentAdminOutputDTO extends AbstractOutputConverter<AttachmentAdminOutputDTO, Attachment> {\n+public class AttachmentAdminOutputDTO implements OutputConverter<AttachmentAdminOutputDTO, Attachment> {\n \n     private Long attachId;\n \n\ndiff --git a/src/main/java/cc/ryanc/halo/model/dto/CommentAdminOutputDTO.java b/src/main/java/cc/ryanc/halo/model/dto/CommentAdminOutputDTO.java\n--- a/src/main/java/cc/ryanc/halo/model/dto/CommentAdminOutputDTO.java\n+++ b/src/main/java/cc/ryanc/halo/model/dto/CommentAdminOutputDTO.java\n@@ -2,7 +2,7 @@\n \n import cc.ryanc.halo.model.domain.Comment;\n import cc.ryanc.halo.model.domain.Post;\n-import cc.ryanc.halo.model.dto.base.AbstractOutputConverter;\n+import cc.ryanc.halo.model.dto.base.OutputConverter;\n import com.fasterxml.jackson.annotation.JsonFormat;\n import lombok.Data;\n \n@@ -13,7 +13,7 @@\n  * @date : 2019-03-09\n  */\n @Data\n-public class CommentAdminOutputDTO extends AbstractOutputConverter<CommentAdminOutputDTO, Comment> {\n+public class CommentAdminOutputDTO implements OutputConverter<CommentAdminOutputDTO, Comment> {\n \n     private Long commentId;\n \n\ndiff --git a/src/main/java/cc/ryanc/halo/model/dto/PostAdminOutputDTO.java b/src/main/java/cc/ryanc/halo/model/dto/PostAdminOutputDTO.java\n--- a/src/main/java/cc/ryanc/halo/model/dto/PostAdminOutputDTO.java\n+++ b/src/main/java/cc/ryanc/halo/model/dto/PostAdminOutputDTO.java\n@@ -4,7 +4,7 @@\n import cc.ryanc.halo.model.domain.Comment;\n import cc.ryanc.halo.model.domain.Post;\n import cc.ryanc.halo.model.domain.Tag;\n-import cc.ryanc.halo.model.dto.base.AbstractOutputConverter;\n+import cc.ryanc.halo.model.dto.base.OutputConverter;\n import com.fasterxml.jackson.annotation.JsonFormat;\n import lombok.Data;\n \n@@ -17,7 +17,7 @@\n  * @author johnniang\n  */\n @Data\n-public class PostAdminOutputDTO extends AbstractOutputConverter<PostAdminOutputDTO, Post> {\n+public class PostAdminOutputDTO implements OutputConverter<PostAdminOutputDTO, Post> {\n \n     private Long postId;\n \n\ndiff --git a/src/main/java/cc/ryanc/halo/model/dto/PostListOutputDTO.java b/src/main/java/cc/ryanc/halo/model/dto/PostListOutputDTO.java\n--- a/src/main/java/cc/ryanc/halo/model/dto/PostListOutputDTO.java\n+++ b/src/main/java/cc/ryanc/halo/model/dto/PostListOutputDTO.java\n@@ -1,7 +1,7 @@\n package cc.ryanc.halo.model.dto;\n \n import cc.ryanc.halo.model.domain.*;\n-import cc.ryanc.halo.model.dto.base.AbstractOutputConverter;\n+import cc.ryanc.halo.model.dto.base.OutputConverter;\n import com.fasterxml.jackson.annotation.JsonFormat;\n import lombok.Data;\n \n@@ -14,7 +14,7 @@\n  * @author johnniang\n  */\n @Data\n-public class PostListOutputDTO extends AbstractOutputConverter<PostListOutputDTO, Post> {\n+public class PostListOutputDTO implements OutputConverter<PostListOutputDTO, Post> {\n \n     private Long postId;\n \n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java\n@@ -23,6 +23,7 @@\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.propertyeditors.CustomDateEditor;\n+import org.springframework.data.domain.Page;\n import org.springframework.data.domain.PageRequest;\n import org.springframework.data.domain.Pageable;\n import org.springframework.data.domain.Sort;",
    "output": "Update all output and input dtos"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/web/controller/core/BaseController.java b/src/main/java/cc/ryanc/halo/web/controller/core/BaseController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/core/BaseController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/core/BaseController.java\n@@ -20,7 +20,7 @@ public abstract class BaseController {\n     protected Logger log = Logger.getLogger(getClass());\n \n     /**\n-     * 根据主题名称渲染页面\n+     * 根据模板名称渲染页面\n      *\n      * @param pageName pageName\n      * @return 返回拼接好的模板路径\n@@ -29,7 +29,23 @@ public String render(String pageName) {\n         final StrBuilder themeStr = new StrBuilder(\"themes/\");\n         themeStr.append(THEME);\n         themeStr.append(\"/\");\n-        return themeStr.append(pageName).toString();\n+        themeStr.append(pageName);\n+        return themeStr.toString();\n+    }\n+\n+    /**\n+     * 根据主题以及模板名渲染页面\n+     *\n+     * @param theme    主题\n+     * @param pageName 模板名\n+     * @return String\n+     */\n+    public String render(String theme, String pageName) {\n+        final StrBuilder themeStr = new StrBuilder(\"themes/\");\n+        themeStr.append(theme);\n+        themeStr.append(\"/\");\n+        themeStr.append(pageName);\n+        return themeStr.toString();\n     }\n \n     /**\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/front/FrontIndexController.java b/src/main/java/cc/ryanc/halo/web/controller/front/FrontIndexController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/front/FrontIndexController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/front/FrontIndexController.java\n@@ -17,6 +17,7 @@\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n \n import static cc.ryanc.halo.model.support.HaloConst.OPTIONS;\n import static org.springframework.data.domain.Sort.Direction.DESC;\n@@ -44,8 +45,9 @@ public class FrontIndexController extends BaseController {\n      * @return 模板路径\n      */\n     @GetMapping\n-    public String index(Model model) {\n-        return this.index(model, 1, Sort.by(DESC, \"postPriority\").and(Sort.by(DESC, \"postDate\")));\n+    public String index(@RequestParam(value = \"theme\", defaultValue = \"\") String theme,\n+                        Model model) {\n+        return this.index(model, theme, 1, Sort.by(DESC, \"postPriority\").and(Sort.by(DESC, \"postDate\")));\n     }\n \n     /**\n@@ -57,6 +59,7 @@ public String index(Model model) {\n      */\n     @GetMapping(value = \"page/{page}\")\n     public String index(Model model,\n+                        @RequestParam(value = \"theme\", defaultValue = \"\") String theme,\n                         @PathVariable(value = \"page\") Integer page,\n                         @SortDefault.SortDefaults({\n                                 @SortDefault(sort = \"postPriority\", direction = DESC),\n@@ -79,6 +82,9 @@ public String index(Model model,\n         model.addAttribute(\"is_index\", true);\n         model.addAttribute(\"posts\", posts);\n         model.addAttribute(\"rainbow\", rainbow);\n+        if (StrUtil.isNotEmpty(theme)) {\n+            return this.render(theme, \"index\");\n+        }\n         return this.render(\"index\");\n     }\n }",
    "output": "Merge remote-tracking branch 'origin/dev' into dev"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/listener/StartedListener.java b/src/main/java/cc/ryanc/halo/listener/StartedListener.java\n--- a/src/main/java/cc/ryanc/halo/listener/StartedListener.java\n+++ b/src/main/java/cc/ryanc/halo/listener/StartedListener.java\n@@ -66,12 +66,7 @@ private void printStartInfo() {\n         // Get server port\n         String serverPort = applicationContext.getEnvironment().getProperty(\"server.port\");\n \n-        String blogUrl = HaloConst.OPTIONS.get(BlogPropertiesEnum.BLOG_URL.getProp());\n-        if (StrUtil.isNotBlank(blogUrl)) {\n-            blogUrl = StrUtil.removeSuffix(blogUrl, \"/\");\n-        } else {\n-            blogUrl = \"http://localhost:\" + serverPort;\n-        }\n+        String blogUrl = getBlogUrl();\n \n         log.info(\"Halo started at    {}\", blogUrl);\n         log.info(\"Halo admin is at   {}/admin\", blogUrl);\n@@ -80,6 +75,26 @@ private void printStartInfo() {\n         }\n     }\n \n+    /**\n+     * Gets blog url.\n+     *\n+     * @return blog url (If blog url isn't present, current machine IP address will be default)\n+     */\n+    private String getBlogUrl() {\n+        // Get server port\n+        String serverPort = applicationContext.getEnvironment().getProperty(\"server.port\");\n+\n+        String blogUrl = HaloConst.OPTIONS.get(BlogPropertiesEnum.BLOG_URL.getProp());\n+\n+        if (StrUtil.isNotBlank(blogUrl)) {\n+            blogUrl = StrUtil.removeSuffix(blogUrl, \"/\");\n+        } else {\n+            blogUrl = String.format(\"http://%s:%s\", HaloUtils.getMachineIP(), serverPort);\n+        }\n+\n+        return blogUrl;\n+    }\n+\n     /**\n      * 加载主题设置\n      */\n\ndiff --git a/src/main/java/cc/ryanc/halo/utils/HaloUtils.java b/src/main/java/cc/ryanc/halo/utils/HaloUtils.java\n--- a/src/main/java/cc/ryanc/halo/utils/HaloUtils.java\n+++ b/src/main/java/cc/ryanc/halo/utils/HaloUtils.java\n@@ -17,8 +17,10 @@\n import javax.imageio.ImageIO;\n import java.awt.image.BufferedImage;\n import java.io.*;\n+import java.net.InetAddress;\n import java.net.URL;\n import java.net.URLConnection;\n+import java.net.UnknownHostException;\n import java.nio.file.Files;\n import java.nio.file.LinkOption;\n import java.nio.file.Path;\n@@ -42,6 +44,21 @@ public class HaloUtils {\n \n     public final static int DEFAULT_PAGE_SIZE = 10;\n \n+    /**\n+     * Gets machine IP address.\n+     *\n+     * @return current machine IP address.\n+     */\n+    public static String getMachineIP() {\n+        InetAddress machineAddress;\n+        try {\n+            machineAddress = InetAddress.getLocalHost();\n+        } catch (UnknownHostException e) {\n+            machineAddress = InetAddress.getLoopbackAddress();\n+        }\n+        return machineAddress.getHostAddress();\n+    }\n+\n     /**\n      * Gets default page size.\n      *\n@@ -187,9 +204,9 @@ public static String getImageWh(File file) {\n             final BufferedImage image = ImageIO.read(new FileInputStream(file));\n             return image.getWidth() + \"x\" + image.getHeight();\n         } catch (Exception e) {\n-            e.printStackTrace();\n-            return \"\";\n+            log.error(\"Failed to get read image file\", e);\n         }\n+        return \"\";\n     }\n \n     /**\n@@ -232,7 +249,7 @@ public static List<Theme> getThemes() {\n                 }\n             }\n         } catch (Exception e) {\n-            log.error(\"Themes scan failed：{}\", e.getMessage());\n+            log.error(\"Themes scan failed\", e);\n         }\n         return themes;\n     }\n@@ -268,7 +285,7 @@ public static List<String> getTplName(String theme) {\n                 }\n             }\n         } catch (Exception e) {\n-            log.error(\"Failed to get theme template: {}\", e.getMessage());\n+            log.error(\"Failed to get theme template\", e);\n         }\n         return tpls;\n     }\n@@ -294,7 +311,7 @@ public static List<String> getCustomTpl(String theme) {\n                 }\n             }\n         } catch (FileNotFoundException e) {\n-            e.printStackTrace();\n+            log.error(\"File not found\", e);\n         }\n         return tpls;\n     }\n@@ -318,7 +335,7 @@ public static void postToFile(String data, String filePath, String fileName) thr\n             bufferedWriter = new BufferedWriter(fileWriter);\n             bufferedWriter.write(data);\n         } catch (Exception e) {\n-            e.printStackTrace();\n+            log.error(\"Failed to export file\", e);\n         } finally {\n             if (null != bufferedWriter) {\n                 bufferedWriter.close();\n@@ -392,7 +409,7 @@ public static String baiduPost(String blogUrl, String token, String urls) {\n                 result.append(line);\n             }\n         } catch (Exception e) {\n-            e.printStackTrace();\n+            log.error(\"Failed to create baidu post\", e);\n         } finally {\n             try {\n                 if (null != out) {\n@@ -402,7 +419,7 @@ public static String baiduPost(String blogUrl, String token, String urls) {\n                     in.close();\n                 }\n             } catch (IOException ex) {\n-                ex.printStackTrace();\n+                // Ignore this exception\n             }\n         }\n         return result.toString();\n\ndiff --git a/src/test/java/cc/ryanc/halo/utils/InetAddressTest.java b/src/test/java/cc/ryanc/halo/utils/InetAddressTest.java\n--- a/src/test/java/cc/ryanc/halo/utils/InetAddressTest.java\n+++ b/src/test/java/cc/ryanc/halo/utils/InetAddressTest.java\n@@ -0,0 +1,23 @@\n+package cc.ryanc.halo.utils;\n+\n+import org.junit.Test;\n+\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+\n+/**\n+ * InetAddress test.\n+ *\n+ * @author johnniang\n+ */\n+public class InetAddressTest {\n+\n+    @Test\n+    public void getMachaineAddressTest() throws UnknownHostException {\n+        InetAddress localHost = InetAddress.getLocalHost();\n+        System.out.println(\"Localhost: \" + localHost.getHostAddress());\n+\n+        InetAddress loopbackAddress = InetAddress.getLoopbackAddress();\n+        System.out.println(\"Loopback: \" + loopbackAddress.getHostAddress());\n+    }\n+}",
    "output": "Enhance HaloUtils"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/config/SwaggerConfiguration.java b/src/main/java/cc/ryanc/halo/config/SwaggerConfiguration.java\n--- a/src/main/java/cc/ryanc/halo/config/SwaggerConfiguration.java\n+++ b/src/main/java/cc/ryanc/halo/config/SwaggerConfiguration.java\n@@ -30,6 +30,8 @@\n import java.util.Collections;\n import java.util.List;\n \n+import static cc.ryanc.halo.model.support.HaloConst.HALO_VERSION;\n+import static cc.ryanc.halo.model.support.HaloConst.TOKEN_HEADER;\n import static springfox.documentation.schema.AlternateTypeRules.newRule;\n \n /**\n@@ -101,7 +103,7 @@ private Docket buildApiDocket(@NonNull String groupName, @NonNull String basePac\n     }\n \n     private ApiKey apiKeys() {\n-        return new ApiKey(\"TOKEN ACCESS\", HttpHeaders.AUTHORIZATION, In.HEADER.name());\n+        return new ApiKey(\"TOKEN ACCESS\", TOKEN_HEADER, In.HEADER.name());\n     }\n \n     private SecurityContext securityContext() {\n@@ -121,7 +123,7 @@ private ApiInfo apiInfo() {\n         return new ApiInfoBuilder()\n                 .title(\"Halo API Documentation\")\n                 .description(\"Documentation for Halo API\")\n-                .version(\"v0.4.2\")\n+                .version(HALO_VERSION)\n                 .termsOfServiceUrl(\"https://ryanc.cc/\")\n                 .contact(new Contact(\"RYAN0UP\", \"https://ryanc.cc/\", \"i#ryanc.cc\"))\n                 .build();\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/support/HaloConst.java b/src/main/java/cc/ryanc/halo/model/support/HaloConst.java\n--- a/src/main/java/cc/ryanc/halo/model/support/HaloConst.java\n+++ b/src/main/java/cc/ryanc/halo/model/support/HaloConst.java\n@@ -20,6 +20,11 @@ public class HaloConst {\n      */\n     public static final String HALO_VERSION = \"0.4.2\";\n \n+    /**\n+     * Token key\n+     */\n+    public static final String TOKEN_HEADER = \"token\";\n+\n     /**\n      * 所有设置选项（key,value）\n      */\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/interceptor/ApiInterceptor.java b/src/main/java/cc/ryanc/halo/web/interceptor/ApiInterceptor.java\n--- a/src/main/java/cc/ryanc/halo/web/interceptor/ApiInterceptor.java\n+++ b/src/main/java/cc/ryanc/halo/web/interceptor/ApiInterceptor.java\n@@ -1,8 +1,8 @@\n package cc.ryanc.halo.web.interceptor;\n \n-import cc.ryanc.halo.model.support.JsonResult;\n import cc.ryanc.halo.model.enums.BlogPropertiesEnum;\n import cc.ryanc.halo.model.enums.TrueFalseEnum;\n+import cc.ryanc.halo.model.support.JsonResult;\n import cn.hutool.core.util.StrUtil;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import org.springframework.http.HttpStatus;\n@@ -16,6 +16,7 @@\n import java.nio.charset.StandardCharsets;\n \n import static cc.ryanc.halo.model.support.HaloConst.OPTIONS;\n+import static cc.ryanc.halo.model.support.HaloConst.TOKEN_HEADER;\n \n /**\n  * <pre>\n@@ -28,8 +29,6 @@\n @Component\n public class ApiInterceptor implements HandlerInterceptor {\n \n-    private static final String TOKEN = \"token\";\n-\n     private final ObjectMapper objectMapper;\n \n     public ApiInterceptor(ObjectMapper objectMapper) {\n@@ -38,19 +37,20 @@ public ApiInterceptor(ObjectMapper objectMapper) {\n \n     @Override\n     public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n-        if (StrUtil.equals(TrueFalseEnum.TRUE.getDesc(), OPTIONS.get(BlogPropertiesEnum.API_STATUS.getProp()))) {\n-            if (StrUtil.equals(request.getHeader(TOKEN), OPTIONS.get(BlogPropertiesEnum.API_TOKEN.getProp()))) {\n-                return true;\n-            } else {\n-                response.setCharacterEncoding(StandardCharsets.UTF_8.name());\n-                response.setContentType(MediaType.APPLICATION_JSON_UTF8_VALUE);\n-                JsonResult result = new JsonResult(HttpStatus.BAD_REQUEST.value(), \"Invalid Token\");\n-                response.getWriter().write(objectMapper.writeValueAsString(result));\n-                return false;\n-            }\n+        if (!StrUtil.equals(TrueFalseEnum.TRUE.getDesc(), OPTIONS.get(BlogPropertiesEnum.API_STATUS.getProp()))) {\n+            response.sendRedirect(\"/404\");\n+            return false;\n         }\n-        response.sendRedirect(\"/404\");\n-        return false;\n+\n+        if (!StrUtil.equals(request.getHeader(TOKEN_HEADER), OPTIONS.get(BlogPropertiesEnum.API_TOKEN.getProp()))) {\n+            response.setCharacterEncoding(StandardCharsets.UTF_8.name());\n+            response.setContentType(MediaType.APPLICATION_JSON_UTF8_VALUE);\n+            JsonResult result = new JsonResult(HttpStatus.BAD_REQUEST.value(), \"Invalid Token\");\n+            response.getWriter().write(objectMapper.writeValueAsString(result));\n+            return false;\n+        }\n+\n+        return true;\n     }\n \n     @Override",
    "output": "Restructure api interceptor"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/Application.java b/src/main/java/cc/ryanc/halo/Application.java\n--- a/src/main/java/cc/ryanc/halo/Application.java\n+++ b/src/main/java/cc/ryanc/halo/Application.java\n@@ -1,14 +1,10 @@\n package cc.ryanc.halo;\n \n-import cc.ryanc.halo.config.properties.HaloProperties;\n import cc.ryanc.halo.logging.Logger;\n import cc.ryanc.halo.repository.base.BaseRepositoryImpl;\n-import org.springframework.boot.CommandLineRunner;\n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n import org.springframework.cache.annotation.EnableCaching;\n-import org.springframework.context.ApplicationContext;\n-import org.springframework.context.annotation.Bean;\n import org.springframework.data.jpa.repository.config.EnableJpaAuditing;\n import org.springframework.data.jpa.repository.config.EnableJpaRepositories;\n import org.springframework.scheduling.annotation.EnableScheduling;\n@@ -34,18 +30,4 @@ public static void main(String[] args) {\n         // Run application\n         SpringApplication.run(Application.class, args);\n     }\n-\n-    @Bean\n-    CommandLineRunner runner(ApplicationContext context, HaloProperties haloProperties) {\n-        return args -> {\n-            // Get server port\n-            String serverPort = context.getEnvironment().getProperty(\"server.port\");\n-\n-            LOG.debug(\"Halo started at    {}:{}\", \"http://localhost\", serverPort);\n-\n-            if (!haloProperties.getDocDisabled()) {\n-                LOG.debug(\"Halo doc enable at {}:{}/{}\", \"http://localhost\", serverPort, \"swagger-ui.html\");\n-            }\n-        };\n-    }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/listener/StartedListener.java b/src/main/java/cc/ryanc/halo/listener/StartedListener.java\n--- a/src/main/java/cc/ryanc/halo/listener/StartedListener.java\n+++ b/src/main/java/cc/ryanc/halo/listener/StartedListener.java\n@@ -1,6 +1,8 @@\n package cc.ryanc.halo.listener;\n \n+import cc.ryanc.halo.config.properties.HaloProperties;\n import cc.ryanc.halo.model.enums.BlogPropertiesEnum;\n+import cc.ryanc.halo.model.support.HaloConst;\n import cc.ryanc.halo.model.support.Theme;\n import cc.ryanc.halo.service.OptionsService;\n import cc.ryanc.halo.utils.HaloUtils;\n@@ -10,6 +12,7 @@\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.context.event.ApplicationStartedEvent;\n+import org.springframework.context.ApplicationContext;\n import org.springframework.context.ApplicationListener;\n import org.springframework.context.annotation.Configuration;\n \n@@ -37,6 +40,12 @@ public class StartedListener implements ApplicationListener<ApplicationStartedEv\n     @Autowired\n     private freemarker.template.Configuration configuration;\n \n+    @Autowired\n+    private ApplicationContext applicationContext;\n+\n+    @Autowired\n+    private HaloProperties haloProperties;\n+\n     @Override\n     public void onApplicationEvent(ApplicationStartedEvent event) {\n         // save halo version to database\n@@ -49,6 +58,26 @@ public void onApplicationEvent(ApplicationStartedEvent event) {\n         this.loadOptions();\n         this.loadThemes();\n         this.loadOwo();\n+\n+        this.printStartInfo();\n+    }\n+\n+    private void printStartInfo() {\n+        // Get server port\n+        String serverPort = applicationContext.getEnvironment().getProperty(\"server.port\");\n+\n+        String blogUrl = HaloConst.OPTIONS.get(BlogPropertiesEnum.BLOG_URL.getProp());\n+        if (StrUtil.isNotBlank(blogUrl)) {\n+            blogUrl = StrUtil.removeSuffix(blogUrl, \"/\");\n+        } else {\n+            blogUrl = \"http://localhost:\" + serverPort;\n+        }\n+\n+        log.info(\"Halo started at    {}\", blogUrl);\n+        log.info(\"Halo admin is at   {}/admin\", blogUrl);\n+        if (!haloProperties.getDocDisabled()) {\n+            log.debug(\"Halo doc enable at {}/swagger-ui.html\", blogUrl);\n+        }\n     }\n \n     /**\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/OptionsServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/OptionsServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/OptionsServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/OptionsServiceImpl.java\n@@ -55,26 +55,11 @@ public void saveOptions(Map<String, String> options) {\n      */\n     @Override\n     public void saveOption(String key, String value) {\n-        if (StrUtil.equals(value, \"\")) {\n-//            options = new Options();\n-//            options.setOptionName(key);\n-//            this.remove(options);\n-\n+        if (StrUtil.isBlank(value)) {\n+            // If value is empty\n             removeByIdOfNullable(key);\n         } else if (StrUtil.isNotEmpty(key)) {\n             //如果查询到有该设置选项则做更新操作，反之保存新的设置选项\n-\n-//                if (null == optionsRepository.findOptionsByOptionName(key)) {\n-//                    options = new Options();\n-//                    options.setOptionName(key);\n-//                    options.setOptionValue(value);\n-//                    optionsRepository.save(options);\n-//                } else {\n-//                    options = optionsRepository.findOptionsByOptionName(key);\n-//                    options.setOptionValue(value);\n-//                    optionsRepository.save(options);\n-//                }\n-\n             Options options = fetchById(key).map(option -> {\n                 // Exist\n                 option.setOptionValue(value);\n@@ -99,13 +84,6 @@ public void saveOption(String key, String value) {\n      */\n     @Override\n     public Map<String, String> findAllOptions() {\n-//        final Map<String, String> options = new HashMap<>();\n-//        final List<Options> optionsList = optionsRepository.findAll();\n-//        if (null != optionsList) {\n-//            optionsList.forEach(option -> options.put(option.getOptionName(), option.getOptionValue()));\n-//        }\n-//        return options;\n-\n         return ServiceUtils.convertToMap(listAll(), Options::getOptionName, Options::getOptionValue);\n     }\n \n@@ -117,12 +95,6 @@ public Map<String, String> findAllOptions() {\n      */\n     @Override\n     public String findOneOption(String key) {\n-//        final Options options = getByIdOfNullable(key);\n-//        if (null != options) {\n-//            return options.getOptionValue();\n-//        }\n-//        return null;\n-\n         return fetchById(key).map(Options::getOptionValue).orElse(null);\n     }\n }",
    "output": "Update start information"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/Application.java b/src/main/java/cc/ryanc/halo/Application.java\n--- a/src/main/java/cc/ryanc/halo/Application.java\n+++ b/src/main/java/cc/ryanc/halo/Application.java\n@@ -1,11 +1,14 @@\n package cc.ryanc.halo;\n \n+import cc.ryanc.halo.config.properties.HaloProperties;\n import cc.ryanc.halo.logging.Logger;\n import cc.ryanc.halo.repository.base.BaseRepositoryImpl;\n+import org.springframework.boot.CommandLineRunner;\n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n import org.springframework.cache.annotation.EnableCaching;\n import org.springframework.context.ApplicationContext;\n+import org.springframework.context.annotation.Bean;\n import org.springframework.data.jpa.repository.config.EnableJpaAuditing;\n import org.springframework.data.jpa.repository.config.EnableJpaRepositories;\n import org.springframework.scheduling.annotation.EnableScheduling;\n@@ -29,10 +32,20 @@ public class Application {\n \n     public static void main(String[] args) {\n         // Run application\n-        ApplicationContext context = SpringApplication.run(Application.class, args);\n-        // Get server port\n-        String serverPort = context.getEnvironment().getProperty(\"server.port\");\n+        SpringApplication.run(Application.class, args);\n+    }\n+\n+    @Bean\n+    CommandLineRunner runner(ApplicationContext context, HaloProperties haloProperties) {\n+        return args -> {\n+            // Get server port\n+            String serverPort = context.getEnvironment().getProperty(\"server.port\");\n+\n+            LOG.debug(\"Halo started at    {}:{}\", \"http://localhost\", serverPort);\n \n-        LOG.debug(\"Halo started at http://localhost:\" + serverPort);\n+            if (!haloProperties.getDocDisabled()) {\n+                LOG.debug(\"Halo doc enable at {}:{}/{}\", \"http://localhost\", serverPort, \"swagger-ui.html\");\n+            }\n+        };\n     }\n }",
    "output": "Add doc tip when starting up"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/config/HaloConfiguration.java b/src/main/java/cc/ryanc/halo/config/HaloConfiguration.java\n--- a/src/main/java/cc/ryanc/halo/config/HaloConfiguration.java\n+++ b/src/main/java/cc/ryanc/halo/config/HaloConfiguration.java\n@@ -0,0 +1,16 @@\n+package cc.ryanc.halo.config;\n+\n+import cc.ryanc.halo.config.properties.HaloProperties;\n+import org.springframework.boot.context.properties.EnableConfigurationProperties;\n+import org.springframework.context.annotation.Configuration;\n+\n+/**\n+ * Halo configuration.\n+ *\n+ * @author johnniang\n+ */\n+@Configuration\n+@EnableConfigurationProperties(HaloProperties.class)\n+public class HaloConfiguration {\n+\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/config/properties/HaloProperties.java b/src/main/java/cc/ryanc/halo/config/properties/HaloProperties.java\n--- a/src/main/java/cc/ryanc/halo/config/properties/HaloProperties.java\n+++ b/src/main/java/cc/ryanc/halo/config/properties/HaloProperties.java\n@@ -0,0 +1,19 @@\n+package cc.ryanc.halo.config.properties;\n+\n+import lombok.Data;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+\n+/**\n+ * Halo configuration properties.\n+ *\n+ * @author johnniang\n+ */\n+@Data\n+@ConfigurationProperties(\"halo\")\n+public class HaloProperties {\n+\n+    /**\n+     * Doc api disabled. (Default is true)\n+     */\n+    private Boolean docDisabled = true;\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/front/FrontPageController.java b/src/main/java/cc/ryanc/halo/web/controller/front/FrontPageController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/front/FrontPageController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/front/FrontPageController.java\n@@ -80,7 +80,7 @@ public String getPage(@PathVariable(value = \"postUrl\") String postUrl,\n         if (null == post || !post.getPostStatus().equals(PostStatusEnum.PUBLISHED.getCode())) {\n             return this.renderNotFound();\n         }\n-        List<Comment> comments = null;\n+        List<Comment> comments;\n         if (StrUtil.equals(OPTIONS.get(BlogPropertiesEnum.NEW_COMMENT_NEED_CHECK.getProp()), TrueFalseEnum.TRUE.getDesc()) || OPTIONS.get(BlogPropertiesEnum.NEW_COMMENT_NEED_CHECK.getProp()) == null) {\n             comments = commentService.findCommentsByPostAndCommentStatus(post, CommentStatusEnum.PUBLISHED.getCode());\n         } else {\n@@ -92,7 +92,7 @@ public String getPage(@PathVariable(value = \"postUrl\") String postUrl,\n             size = Integer.parseInt(OPTIONS.get(BlogPropertiesEnum.INDEX_COMMENTS.getProp()));\n         }\n         //评论分页\n-        final ListPage<Comment> commentsPage = new ListPage<Comment>(CommentUtil.getComments(comments), cp, size);\n+        final ListPage<Comment> commentsPage = new ListPage<>(CommentUtil.getComments(comments), cp, size);\n         final int[] rainbow = PageUtil.rainbow(cp, commentsPage.getTotalPage(), 3);\n         model.addAttribute(\"is_page\", true);\n         model.addAttribute(\"post\", post);",
    "output": "Add halo configuration"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java\n@@ -10,6 +10,7 @@\n import cc.ryanc.halo.model.enums.ResultCodeEnum;\n import cc.ryanc.halo.service.LogsService;\n import cc.ryanc.halo.service.PostService;\n+import cc.ryanc.halo.utils.BeanUtils;\n import cc.ryanc.halo.utils.HaloUtils;\n import cc.ryanc.halo.utils.LocaleMessageUtil;\n import cc.ryanc.halo.utils.MarkdownUtils;\n@@ -177,11 +178,8 @@ public JsonResult update(@ModelAttribute Post post,\n                              @RequestParam(\"tagList\") String tagList) {\n         //old data\n         final Post oldPost = postService.fetchById(post.getPostId()).orElse(new Post());\n-        post.setPostViews(oldPost.getPostViews());\n-        post.setPostPriority(oldPost.getPostPriority());\n-        post.setPostSource(oldPost.getPostSource());\n+        BeanUtils.updateProperties(oldPost,post);\n         post.setPostContent(MarkdownUtils.renderMarkdown(post.getPostContentMd()));\n-        post.setUser(oldPost.getUser());\n         if (null == post.getPostDate()) {\n             post.setPostDate(new Date());\n         }",
    "output": ":bug: fixed data lost when post update"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java\n@@ -178,6 +178,8 @@ public JsonResult update(@ModelAttribute Post post,\n         //old data\n         final Post oldPost = postService.fetchById(post.getPostId()).orElse(new Post());\n         post.setPostViews(oldPost.getPostViews());\n+        post.setPostPriority(oldPost.getPostPriority());\n+        post.setPostSource(oldPost.getPostSource());\n         post.setPostContent(MarkdownUtils.renderMarkdown(post.getPostContentMd()));\n         post.setUser(oldPost.getUser());\n         if (null == post.getPostDate()) {",
    "output": ":bug: fixed data lost when post update"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/listener/StartedListener.java b/src/main/java/cc/ryanc/halo/listener/StartedListener.java\n--- a/src/main/java/cc/ryanc/halo/listener/StartedListener.java\n+++ b/src/main/java/cc/ryanc/halo/listener/StartedListener.java\n@@ -1,7 +1,7 @@\n package cc.ryanc.halo.listener;\n \n-import cc.ryanc.halo.model.support.Theme;\n import cc.ryanc.halo.model.enums.BlogPropertiesEnum;\n+import cc.ryanc.halo.model.support.Theme;\n import cc.ryanc.halo.service.OptionsService;\n import cc.ryanc.halo.utils.HaloUtils;\n import cc.ryanc.halo.web.controller.core.BaseController;\n@@ -39,6 +39,8 @@ public class StartedListener implements ApplicationListener<ApplicationStartedEv\n \n     @Override\n     public void onApplicationEvent(ApplicationStartedEvent event) {\n+        // save halo version to database\n+        optionsService.saveOption(\"version\", HALO_VERSION);\n         try {\n             this.loadActiveTheme();\n         } catch (TemplateModelException e) {\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/support/HaloConst.java b/src/main/java/cc/ryanc/halo/model/support/HaloConst.java\n--- a/src/main/java/cc/ryanc/halo/model/support/HaloConst.java\n+++ b/src/main/java/cc/ryanc/halo/model/support/HaloConst.java\n@@ -15,6 +15,11 @@\n  */\n public class HaloConst {\n \n+    /**\n+     * version constant\n+     */\n+    public static final String HALO_VERSION = \"0.4.2\";\n+\n     /**\n      * 所有设置选项（key,value）\n      */",
    "output": ":art: add halo version to database"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/utils/HaloUtils.java b/src/main/java/cc/ryanc/halo/utils/HaloUtils.java\n--- a/src/main/java/cc/ryanc/halo/utils/HaloUtils.java\n+++ b/src/main/java/cc/ryanc/halo/utils/HaloUtils.java\n@@ -40,7 +40,7 @@\n @Slf4j\n public class HaloUtils {\n \n-    private final static int DEFAULT_PAGE_SIZE = 10;\n+    public final static int DEFAULT_PAGE_SIZE = 10;\n \n     /**\n      * Gets default page size.\n\ndiff --git a/src/test/java/cc/ryanc/halo/utils/HaloUtilsTest.java b/src/test/java/cc/ryanc/halo/utils/HaloUtilsTest.java\n--- a/src/test/java/cc/ryanc/halo/utils/HaloUtilsTest.java\n+++ b/src/test/java/cc/ryanc/halo/utils/HaloUtilsTest.java\n@@ -0,0 +1,66 @@\n+package cc.ryanc.halo.utils;\n+\n+import cc.ryanc.halo.model.enums.BlogPropertiesEnum;\n+import cc.ryanc.halo.model.support.HaloConst;\n+import com.qiniu.common.Zone;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+\n+/**\n+ * HaloUtils test.\n+ *\n+ * @author johnniang\n+ */\n+public class HaloUtilsTest {\n+\n+    @Test\n+    public void getDefaultPageSizeTest() {\n+        // Get page size\n+        int pageSize = HaloUtils.getDefaultPageSize();\n+        assertEquals(HaloUtils.DEFAULT_PAGE_SIZE, pageSize);\n+\n+        // Cover the default page size\n+        HaloConst.OPTIONS.put(BlogPropertiesEnum.INDEX_POSTS.getProp(), String.valueOf(5));\n+\n+        // Get page size again\n+        pageSize = HaloUtils.getDefaultPageSize();\n+        assertEquals(5, pageSize);\n+    }\n+\n+    @Test\n+    public void getDefaultQiniuZoneTest() {\n+        Zone zone = HaloUtils.getDefaultQiniuZone();\n+        assertEquals(Zone.autoZone().getRegion(), zone.getRegion());\n+\n+        // Set zone manually\n+        HaloConst.OPTIONS.put(\"qiniu_zone\", \"z0\");\n+        // Set zone manually\n+        zone = HaloUtils.getDefaultQiniuZone();\n+        assertEquals(Zone.zone0().getRegion(), zone.getRegion());\n+\n+        // Set zone manually\n+        HaloConst.OPTIONS.put(\"qiniu_zone\", \"z1\");\n+        // Set zone manually\n+        zone = HaloUtils.getDefaultQiniuZone();\n+        assertEquals(Zone.zone1().getRegion(), zone.getRegion());\n+\n+        // Set zone manually\n+        HaloConst.OPTIONS.put(\"qiniu_zone\", \"z2\");\n+        // Set zone manually\n+        zone = HaloUtils.getDefaultQiniuZone();\n+        assertEquals(Zone.zone2().getRegion(), zone.getRegion());\n+\n+        // Set zone manually\n+        HaloConst.OPTIONS.put(\"qiniu_zone\", \"na0\");\n+        // Set zone manually\n+        zone = HaloUtils.getDefaultQiniuZone();\n+        assertEquals(Zone.zoneNa0().getRegion(), zone.getRegion());\n+\n+        // Set zone manually\n+        HaloConst.OPTIONS.put(\"qiniu_zone\", \"as0\");\n+        // Set zone manually\n+        zone = HaloUtils.getDefaultQiniuZone();\n+        assertEquals(Zone.zoneAs0().getRegion(), zone.getRegion());\n+    }\n+}\n\\ No newline at end of file",
    "output": "Add HaloUtilsTest for HaloUtils #110"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/utils/HaloUtils.java b/src/main/java/cc/ryanc/halo/utils/HaloUtils.java\n--- a/src/main/java/cc/ryanc/halo/utils/HaloUtils.java\n+++ b/src/main/java/cc/ryanc/halo/utils/HaloUtils.java\n@@ -62,9 +62,15 @@ public static int getDefaultPageSize() {\n      */\n     @NonNull\n     public static Zone getDefaultQiniuZone() {\n-        Zone zone;\n         // Get zone from setting\n         String qiniuZone = OPTIONS.get(\"qiniu_zone\");\n+\n+        if (StrUtil.isBlank(qiniuZone)) {\n+            return Zone.autoZone();\n+        }\n+\n+        Zone zone;\n+\n         switch (qiniuZone) {\n             case \"z0\":\n                 zone = Zone.zone0();",
    "output": "Fix NPE on HaloUtils.getDefaultQiniuZone method(issue: #110)"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/repository/PostRepository.java b/src/main/java/cc/ryanc/halo/repository/PostRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/PostRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/PostRepository.java\n@@ -6,10 +6,10 @@\n import cc.ryanc.halo.repository.base.BaseRepository;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.Pageable;\n-import org.springframework.data.jpa.repository.JpaRepository;\n import org.springframework.data.jpa.repository.JpaSpecificationExecutor;\n import org.springframework.data.jpa.repository.Query;\n import org.springframework.data.repository.query.Param;\n+import org.springframework.lang.NonNull;\n \n import java.util.Date;\n import java.util.List;\n@@ -216,4 +216,14 @@ public interface PostRepository extends BaseRepository<Post, Long>, JpaSpecifica\n      */\n     @Query(value = \"SELECT * FROM halo_post WHERE post_status = 0 AND post_type = 'post' ORDER BY post_date DESC LIMIT :limit\", nativeQuery = true)\n     List<Post> getPostsByLimit(@Param(value = \"limit\") int limit);\n+\n+    /**\n+     * Finds all posts by post type.\n+     *\n+     * @param postType post type must not be blank\n+     * @param pageable page info must not be null\n+     * @return a page of posts\n+     */\n+    @NonNull\n+    Page<Post> findAllByPostType(@NonNull String postType, @NonNull Pageable pageable);\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java\n@@ -242,7 +242,7 @@ public Post findByPostUrl(String postUrl, String postType) {\n     public List<Post> findPostLatest() {\n         Pageable pageable = PageRequest.of(0, 5, Sort.by(Sort.Direction.DESC, \"postDate\"));\n \n-        Page<Post> postPage = postRepository.findAll(pageable);\n+        Page<Post> postPage = postRepository.findAllByPostType(\"post\", pageable);\n \n         return postPage.getContent();\n     }",
    "output": "Fix an implicit refactoring"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/service/impl/AttachmentServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/AttachmentServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/AttachmentServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/AttachmentServiceImpl.java\n@@ -2,9 +2,9 @@\n \n import cc.ryanc.halo.logging.Logger;\n import cc.ryanc.halo.model.domain.Attachment;\n-import cc.ryanc.halo.model.support.QiNiuPutSet;\n import cc.ryanc.halo.model.enums.AttachLocationEnum;\n import cc.ryanc.halo.model.enums.BlogPropertiesEnum;\n+import cc.ryanc.halo.model.support.QiNiuPutSet;\n import cc.ryanc.halo.repository.AttachmentRepository;\n import cc.ryanc.halo.service.AttachmentService;\n import cc.ryanc.halo.service.base.AbstractCrudService;\n@@ -260,8 +260,8 @@ public Map<String, String> attachUpload(MultipartFile file, HttpServletRequest r\n     public Map<String, String> attachQiNiuUpload(MultipartFile file, HttpServletRequest request) {\n         final Map<String, String> resultMap = new HashMap<>(7);\n         try {\n-            // TODO Dynamically set this zone of qiniuyun (七牛云上传附件失败 #110)\n-            final Configuration cfg = new Configuration(Zone.zone0());\n+            // TODO Wait for testing (七牛云上传附件失败 #110)\n+            final Configuration cfg = new Configuration(HaloUtils.getDefaultQiniuZone());\n             final String key = Md5Util.getMD5Checksum(file);\n             final String accessKey = OPTIONS.get(\"qiniu_access_key\");\n             final String secretKey = OPTIONS.get(\"qiniu_secret_key\");\n\ndiff --git a/src/main/java/cc/ryanc/halo/utils/HaloUtils.java b/src/main/java/cc/ryanc/halo/utils/HaloUtils.java\n--- a/src/main/java/cc/ryanc/halo/utils/HaloUtils.java\n+++ b/src/main/java/cc/ryanc/halo/utils/HaloUtils.java\n@@ -1,14 +1,16 @@\n package cc.ryanc.halo.utils;\n \n-import cc.ryanc.halo.model.support.BackupDto;\n-import cc.ryanc.halo.model.support.Theme;\n import cc.ryanc.halo.model.enums.BlogPropertiesEnum;\n import cc.ryanc.halo.model.enums.CommonParamsEnum;\n+import cc.ryanc.halo.model.support.BackupDto;\n+import cc.ryanc.halo.model.support.Theme;\n import cn.hutool.core.io.FileUtil;\n import cn.hutool.core.text.StrBuilder;\n import cn.hutool.core.util.StrUtil;\n+import com.qiniu.common.Zone;\n import io.github.biezhi.ome.OhMyEmail;\n import lombok.extern.slf4j.Slf4j;\n+import org.springframework.lang.NonNull;\n import org.springframework.util.Assert;\n import org.springframework.util.ResourceUtils;\n \n@@ -53,6 +55,40 @@ public static int getDefaultPageSize() {\n         return DEFAULT_PAGE_SIZE;\n     }\n \n+    /**\n+     * Gets default qiniuyun zone.\n+     *\n+     * @return qiniuyun zone\n+     */\n+    @NonNull\n+    public static Zone getDefaultQiniuZone() {\n+        Zone zone;\n+        // Get zone from setting\n+        String qiniuZone = OPTIONS.get(\"qiniu_zone\");\n+        switch (qiniuZone) {\n+            case \"z0\":\n+                zone = Zone.zone0();\n+                break;\n+            case \"z1\":\n+                zone = Zone.zone1();\n+                break;\n+            case \"z2\":\n+                zone = Zone.zone2();\n+                break;\n+            case \"na0\":\n+                zone = Zone.zoneNa0();\n+                break;\n+            case \"as0\":\n+                zone = Zone.zoneAs0();\n+                break;\n+            default:\n+                // Default is detecting zone automatically\n+                zone = Zone.autoZone();\n+        }\n+\n+        return zone;\n+    }\n+\n     /**\n      * 获取备份文件信息\n      *\n@@ -298,7 +334,7 @@ public static void configMail(String smtpHost, String userName, String password)\n         Assert.hasText(smtpHost, \"SMTP host config must not be blank\");\n         Assert.hasText(userName, \"Email username must not be blank\");\n         Assert.hasText(password, \"Email password must not be blank\");\n-        \n+\n         final Properties properties = OhMyEmail.defaultConfig(false);\n         properties.setProperty(\"mail.smtp.host\", smtpHost);\n         OhMyEmail.config(properties, userName, password);",
    "output": "Attempt to resolve issue: #110"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/domain/Post.java b/src/main/java/cc/ryanc/halo/model/domain/Post.java\n--- a/src/main/java/cc/ryanc/halo/model/domain/Post.java\n+++ b/src/main/java/cc/ryanc/halo/model/domain/Post.java\n@@ -154,13 +154,11 @@ public class Post implements Serializable {\n     /**\n      * Post priority (default is 0)\n      */\n-    @ColumnDefault(\"0\")\n     private Integer postPriority;\n \n     /**\n-     * 发布来源\n+     * 发布来源 (default is admin)\n      */\n-    @ColumnDefault(\"admin\")\n     private String postSource;\n \n     @JsonFormat(pattern = \"yyyy-MM-dd HH:mm\")\n@@ -189,6 +187,10 @@ public void prePersist() {\n             postPriority = 0;\n         }\n \n+        if (postSource == null) {\n+            postSource = \"admin\";\n+        }\n+\n         postId = null;\n     }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/repository/PostRepository.java b/src/main/java/cc/ryanc/halo/repository/PostRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/PostRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/PostRepository.java\n@@ -24,14 +24,6 @@\n  */\n public interface PostRepository extends BaseRepository<Post, Long>, JpaSpecificationExecutor<Post> {\n \n-    /**\n-     * 查询前五条文章\n-     *\n-     * @return List\n-     */\n-    @Query(value = \"SELECT * FROM halo_post WHERE post_type='post' ORDER BY post_date DESC LIMIT 5\", nativeQuery = true)\n-    List<Post> findTopFive();\n-\n     /**\n      * 查询所有文章 根据文章类型\n      *\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java\n@@ -3,10 +3,10 @@\n import cc.ryanc.halo.model.domain.Category;\n import cc.ryanc.halo.model.domain.Post;\n import cc.ryanc.halo.model.domain.Tag;\n-import cc.ryanc.halo.model.support.Archive;\n import cc.ryanc.halo.model.enums.BlogPropertiesEnum;\n import cc.ryanc.halo.model.enums.PostStatusEnum;\n import cc.ryanc.halo.model.enums.PostTypeEnum;\n+import cc.ryanc.halo.model.support.Archive;\n import cc.ryanc.halo.repository.PostRepository;\n import cc.ryanc.halo.service.CategoryService;\n import cc.ryanc.halo.service.PostService;\n@@ -18,7 +18,9 @@\n import org.springframework.cache.annotation.CachePut;\n import org.springframework.cache.annotation.Cacheable;\n import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.PageRequest;\n import org.springframework.data.domain.Pageable;\n+import org.springframework.data.domain.Sort;\n import org.springframework.data.jpa.domain.Specification;\n import org.springframework.lang.NonNull;\n import org.springframework.stereotype.Service;\n@@ -238,7 +240,11 @@ public Post findByPostUrl(String postUrl, String postType) {\n     @Override\n     @Cacheable(value = POSTS_CACHE_NAME, key = \"'posts_latest'\")\n     public List<Post> findPostLatest() {\n-        return postRepository.findTopFive();\n+        Pageable pageable = PageRequest.of(0, 5, Sort.by(Sort.Direction.DESC, \"postDate\"));\n+\n+        Page<Post> postPage = postRepository.findAll(pageable);\n+\n+        return postPage.getContent();\n     }\n \n     /**",
    "output": "Fix native query error"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/dto/PostDetailOutputDTO.java b/src/main/java/cc/ryanc/halo/model/dto/PostDetailOutputDTO.java\n--- a/src/main/java/cc/ryanc/halo/model/dto/PostDetailOutputDTO.java\n+++ b/src/main/java/cc/ryanc/halo/model/dto/PostDetailOutputDTO.java\n@@ -0,0 +1,57 @@\n+package cc.ryanc.halo.model.dto;\n+\n+import cc.ryanc.halo.model.domain.*;\n+import cc.ryanc.halo.model.dto.base.AbstractOutputConverter;\n+import com.fasterxml.jackson.annotation.JsonFormat;\n+\n+import java.util.Date;\n+import java.util.List;\n+\n+/**\n+ * Post detail output dto.\n+ *\n+ * @author johnniang\n+ */\n+public class PostDetailOutputDTO extends AbstractOutputConverter<PostDetailOutputDTO, Post> {\n+\n+    private Long postId;\n+\n+    private User user;\n+\n+    private String postTitle;\n+\n+    private String postType;\n+\n+    private String postContent;\n+\n+    private String postUrl;\n+\n+    private String postSummary;\n+\n+    private List<Category> categories;\n+\n+    private List<Tag> tags;\n+\n+    private List<Comment> comments;\n+\n+    private String postThumbnail;\n+\n+    @JsonFormat(pattern = \"yyyy-MM-dd HH:mm\")\n+    private Date postDate;\n+\n+    @JsonFormat(pattern = \"yyyy-MM-dd HH:mm\")\n+    private Date postUpdate;\n+\n+    private Integer postStatus;\n+\n+    private Long postViews;\n+\n+    private Integer allowComment;\n+\n+    private String postPassword;\n+\n+    private String customTpl;\n+\n+    private Integer postPriority;\n+\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/dto/PostSimpleOutputDTO.java b/src/main/java/cc/ryanc/halo/model/dto/PostSimpleOutputDTO.java\n--- a/src/main/java/cc/ryanc/halo/model/dto/PostSimpleOutputDTO.java\n+++ b/src/main/java/cc/ryanc/halo/model/dto/PostSimpleOutputDTO.java\n@@ -0,0 +1,52 @@\n+package cc.ryanc.halo.model.dto;\n+\n+import cc.ryanc.halo.model.domain.*;\n+import cc.ryanc.halo.model.dto.base.AbstractOutputConverter;\n+import com.fasterxml.jackson.annotation.JsonFormat;\n+import lombok.Data;\n+\n+import java.util.Date;\n+import java.util.List;\n+\n+/**\n+ * Post output dto without markdown and content.\n+ *\n+ * @author johnniang\n+ */\n+@Data\n+public class PostSimpleOutputDTO extends AbstractOutputConverter<PostSimpleOutputDTO, Post> {\n+\n+    private Long postId;\n+\n+    private String postTitle;\n+\n+    private String postType;\n+\n+    private String postUrl;\n+\n+    private String postSummary;\n+\n+    private List<Category> categories;\n+\n+    private List<Tag> tags;\n+\n+    private String postThumbnail;\n+\n+    @JsonFormat(pattern = \"yyyy-MM-dd HH:mm\")\n+    private Date postDate;\n+\n+    @JsonFormat(pattern = \"yyyy-MM-dd HH:mm\")\n+    private Date postUpdate;\n+\n+    private Integer postStatus;\n+\n+    private Long postViews;\n+\n+    private Integer allowComment;\n+\n+    private String postPassword;\n+\n+    private String customTpl;\n+\n+    private Integer postPriority;\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/api/ApiJournalController.java b/src/main/java/cc/ryanc/halo/web/controller/api/ApiJournalController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/api/ApiJournalController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/api/ApiJournalController.java\n@@ -1,6 +1,7 @@\n package cc.ryanc.halo.web.controller.api;\n \n import cc.ryanc.halo.model.domain.Post;\n+import cc.ryanc.halo.model.dto.PostDetailOutputDTO;\n import cc.ryanc.halo.model.params.JournalParam;\n import cc.ryanc.halo.service.PostService;\n import org.springframework.http.HttpStatus;\n@@ -32,11 +33,11 @@ public ApiJournalController(PostService postService) {\n      */\n     @PostMapping\n     @ResponseStatus(HttpStatus.CREATED)\n-    public Post save(@RequestBody JournalParam journalParam) {\n+    public PostDetailOutputDTO save(@RequestBody JournalParam journalParam) {\n         // TODO need to validate token\n \n         Post post = journalParam.convertTo();\n \n-        return postService.create(post);\n+        return new PostDetailOutputDTO().convertFrom(postService.create(post));\n     }\n }",
    "output": "Add Post output dtos"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/params/JournalParam.java b/src/main/java/cc/ryanc/halo/model/params/JournalParam.java\n--- a/src/main/java/cc/ryanc/halo/model/params/JournalParam.java\n+++ b/src/main/java/cc/ryanc/halo/model/params/JournalParam.java\n@@ -2,6 +2,7 @@\n \n import cc.ryanc.halo.model.domain.Post;\n import cc.ryanc.halo.model.dto.base.AbstractInputConverter;\n+import cc.ryanc.halo.model.enums.PostTypeEnum;\n import cc.ryanc.halo.utils.MarkdownUtils;\n import lombok.Data;\n \n@@ -31,9 +32,12 @@ public class JournalParam extends AbstractInputConverter<Post> {\n \n     @Override\n     public Post convertTo() {\n-        Post post = super.convertTo();\n+        Post post = new Post();\n+        post.setPostTitle(title);\n         post.setPostContentMd(content);\n         post.setPostContent(MarkdownUtils.renderMarkdown(content));\n+        post.setPostSource(source);\n+        post.setPostType(PostTypeEnum.POST_TYPE_JOURNAL.getDesc());\n         return post;\n     }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/utils/HaloUtils.java b/src/main/java/cc/ryanc/halo/utils/HaloUtils.java\n--- a/src/main/java/cc/ryanc/halo/utils/HaloUtils.java\n+++ b/src/main/java/cc/ryanc/halo/utils/HaloUtils.java\n@@ -295,6 +295,10 @@ public static void postToFile(String data, String filePath, String fileName) thr\n      * @param password password\n      */\n     public static void configMail(String smtpHost, String userName, String password) {\n+        Assert.hasText(smtpHost, \"SMTP host config must not be blank\");\n+        Assert.hasText(userName, \"Email username must not be blank\");\n+        Assert.hasText(password, \"Email password must not be blank\");\n+        \n         final Properties properties = OhMyEmail.defaultConfig(false);\n         properties.setProperty(\"mail.smtp.host\", smtpHost);\n         OhMyEmail.config(properties, userName, password);\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/AdminController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/AdminController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/AdminController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/AdminController.java\n@@ -240,6 +240,7 @@ public JsonResult sendResetPasswordEmail(@RequestParam(value = \"userName\") Strin\n             session.setAttribute(RESET_PASSWORD_SESSION_KEY, code);\n             return JsonResult.success(\"邮件发送成功，请登录您的邮箱进行下一步操作\");\n         } catch (Exception e) {\n+            log.error(\"Failed to send password email\", e);\n             return JsonResult.fail(\"邮件发送失败，请确定已经配置好了发信服务器信息\");\n         }\n     }\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/api/ApiJournalController.java b/src/main/java/cc/ryanc/halo/web/controller/api/ApiJournalController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/api/ApiJournalController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/api/ApiJournalController.java\n@@ -1,15 +1,10 @@\n package cc.ryanc.halo.web.controller.api;\n \n import cc.ryanc.halo.model.domain.Post;\n-import cc.ryanc.halo.model.enums.PostTypeEnum;\n import cc.ryanc.halo.model.params.JournalParam;\n-import cc.ryanc.halo.model.support.JsonResult;\n import cc.ryanc.halo.service.PostService;\n-import cc.ryanc.halo.utils.MarkdownUtils;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.web.bind.annotation.PostMapping;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.*;\n \n /**\n  * <pre>\n@@ -20,25 +15,28 @@\n  * @date : 2019/03/04\n  */\n @RestController\n-@RequestMapping(value = \"/api/journal\")\n+@RequestMapping(value = \"/api/journals\")\n public class ApiJournalController {\n \n-    @Autowired\n-    private PostService postService;\n+    private final PostService postService;\n+\n+    public ApiJournalController(PostService postService) {\n+        this.postService = postService;\n+    }\n \n     /**\n      * 发布日志\n      *\n      * @param journalParam journalParam\n      * @return JsonResult\n      */\n-    @PostMapping(value = \"/save\")\n-    public JsonResult save(JournalParam journalParam) {\n-        Post post = new Post();\n-        post.setPostContentMd(MarkdownUtils.renderMarkdown(journalParam.getContent()));\n-        post.setPostSource(journalParam.getSource());\n-        post.setPostType(PostTypeEnum.POST_TYPE_JOURNAL.getDesc());\n-        post = postService.create(post);\n-        return JsonResult.success(\"ok\");\n+    @PostMapping\n+    @ResponseStatus(HttpStatus.CREATED)\n+    public Post save(@RequestBody JournalParam journalParam) {\n+        // TODO need to validate token\n+\n+        Post post = journalParam.convertTo();\n+\n+        return postService.create(post);\n     }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/base/ControllerExceptionHandler.java b/src/main/java/cc/ryanc/halo/web/controller/base/ControllerExceptionHandler.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/base/ControllerExceptionHandler.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/base/ControllerExceptionHandler.java\n@@ -8,7 +8,9 @@\n import org.springframework.dao.DataIntegrityViolationException;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n+import org.springframework.http.converter.HttpMessageNotReadableException;\n import org.springframework.util.Assert;\n+import org.springframework.web.HttpRequestMethodNotSupportedException;\n import org.springframework.web.bind.MethodArgumentNotValidException;\n import org.springframework.web.bind.MissingServletRequestParameterException;\n import org.springframework.web.bind.annotation.ExceptionHandler;\n@@ -69,6 +71,23 @@ public JsonResult handleMethodArgumentNotValidException(MethodArgumentNotValidEx\n         return jsonResult;\n     }\n \n+    @ExceptionHandler(HttpRequestMethodNotSupportedException.class)\n+    @ResponseStatus(HttpStatus.BAD_REQUEST)\n+    public JsonResult handleHttpRequestMethodNotSupportedException(HttpRequestMethodNotSupportedException e) {\n+        JsonResult jsonResult = handleBaseException(e);\n+        jsonResult.setCode(HttpStatus.BAD_REQUEST.value());\n+        return jsonResult;\n+    }\n+\n+    @ExceptionHandler(HttpMessageNotReadableException.class)\n+    @ResponseStatus(HttpStatus.BAD_REQUEST)\n+    public JsonResult handleHttpMessageNotReadableException(HttpMessageNotReadableException e) {\n+        JsonResult jsonResult = handleBaseException(e);\n+        jsonResult.setCode(HttpStatus.BAD_REQUEST.value());\n+        jsonResult.setMsg(\"Required request body is missing\");\n+        return jsonResult;\n+    }\n+\n     @ExceptionHandler(NoHandlerFoundException.class)\n     @ResponseStatus(HttpStatus.BAD_GATEWAY)\n     public JsonResult handleNoHandlerFoundException(NoHandlerFoundException e) {\n\ndiff --git a/src/test/java/cc/ryanc/halo/utils/BeanUtilsTest.java b/src/test/java/cc/ryanc/halo/utils/BeanUtilsTest.java\n--- a/src/test/java/cc/ryanc/halo/utils/BeanUtilsTest.java\n+++ b/src/test/java/cc/ryanc/halo/utils/BeanUtilsTest.java\n@@ -30,6 +30,9 @@ public void transformFrom() {\n         assertEquals(a.getB(), b.getB());\n         assertNull(b.getC());\n \n+        TestD d = new TestD(a);\n+        TestE e = BeanUtils.transformFrom(d, TestE.class);\n+        assertEquals(d.getA().getA(), e.getA().getA());\n     }\n \n     @Test\n@@ -95,4 +98,17 @@ static class TestC {\n         private Integer b;\n     }\n \n+    @Data\n+    @NoArgsConstructor\n+    @AllArgsConstructor\n+    static class TestD {\n+        private TestA a;\n+    }\n+\n+    @Data\n+    @NoArgsConstructor\n+    @AllArgsConstructor\n+    static class TestE {\n+        private TestA a;\n+    }\n }\n\\ No newline at end of file",
    "output": "Enhance ApiJournalController"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/config/WebMvcAutoConfiguration.java b/src/main/java/cc/ryanc/halo/config/WebMvcAutoConfiguration.java\n--- a/src/main/java/cc/ryanc/halo/config/WebMvcAutoConfiguration.java\n+++ b/src/main/java/cc/ryanc/halo/config/WebMvcAutoConfiguration.java\n@@ -1,6 +1,7 @@\n package cc.ryanc.halo.config;\n \n import cc.ryanc.halo.filter.CorsFilter;\n+import cc.ryanc.halo.filter.LogFilter;\n import cc.ryanc.halo.web.interceptor.ApiInterceptor;\n import cc.ryanc.halo.web.interceptor.InstallInterceptor;\n import cc.ryanc.halo.web.interceptor.LocaleInterceptor;\n@@ -14,7 +15,10 @@\n import org.springframework.context.annotation.PropertySource;\n import org.springframework.core.Ordered;\n import org.springframework.web.servlet.LocaleResolver;\n-import org.springframework.web.servlet.config.annotation.*;\n+import org.springframework.web.servlet.config.annotation.EnableWebMvc;\n+import org.springframework.web.servlet.config.annotation.InterceptorRegistry;\n+import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;\n+import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n import org.springframework.web.servlet.i18n.LocaleChangeInterceptor;\n import org.springframework.web.servlet.i18n.SessionLocaleResolver;\n \n@@ -108,13 +112,29 @@ public void addResourceHandlers(ResourceHandlerRegistry registry) {\n     FilterRegistrationBean<CorsFilter> corsFilter() {\n         FilterRegistrationBean<CorsFilter> corsFilter = new FilterRegistrationBean<>();\n \n-        corsFilter.setOrder(Ordered.HIGHEST_PRECEDENCE);\n+        corsFilter.setOrder(Ordered.HIGHEST_PRECEDENCE + 10);\n         corsFilter.setFilter(new CorsFilter());\n         corsFilter.addUrlPatterns(\"/api/*\");\n \n         return corsFilter;\n     }\n \n+    /**\n+     * Creates a LogFilter.\n+     *\n+     * @return Log filter registration bean\n+     */\n+    @Bean\n+    FilterRegistrationBean<LogFilter> logFilter() {\n+        FilterRegistrationBean<LogFilter> logFilter = new FilterRegistrationBean<>();\n+\n+        logFilter.setOrder(Ordered.HIGHEST_PRECEDENCE + 9);\n+        logFilter.setFilter(new LogFilter());\n+        logFilter.addUrlPatterns(\"/api/*\", \"/admin/*\");\n+\n+        return logFilter;\n+    }\n+\n     /**\n      * 国际化设置\n      *\n\ndiff --git a/src/main/java/cc/ryanc/halo/filter/LogFilter.java b/src/main/java/cc/ryanc/halo/filter/LogFilter.java\n--- a/src/main/java/cc/ryanc/halo/filter/LogFilter.java\n+++ b/src/main/java/cc/ryanc/halo/filter/LogFilter.java\n@@ -0,0 +1,39 @@\n+package cc.ryanc.halo.filter;\n+\n+import cc.ryanc.halo.logging.Logger;\n+import cn.hutool.extra.servlet.ServletUtil;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+\n+/**\n+ * Filter for logging.\n+ *\n+ * @author johnniang\n+ */\n+public class LogFilter extends OncePerRequestFilter {\n+\n+    private Logger logger = Logger.getLogger(getClass());\n+\n+    @Override\n+    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n+\n+        String remoteAddr = ServletUtil.getClientIP(request);\n+\n+        logger.debug(\"\");\n+        logger.debug(\"Starting url: [{}], method: [{}], ip: [{}]\", request.getRequestURL(), request.getMethod(), remoteAddr);\n+\n+        // Set start time\n+        long startTime = System.currentTimeMillis();\n+\n+        // Do filter\n+        filterChain.doFilter(request, response);\n+\n+        logger.debug(\"Ending   url: [{}], method: [{}], ip: [{}], status: [{}], usage: [{}] ms\", request.getRequestURL(), request.getMethod(), remoteAddr, response.getStatus(), (System.currentTimeMillis() - startTime));\n+        logger.debug(\"\");\n+    }\n+}",
    "output": "Add LogFilter for development"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/params/PasswordResetParam.java b/src/main/java/cc/ryanc/halo/model/params/PasswordResetParam.java\n--- a/src/main/java/cc/ryanc/halo/model/params/PasswordResetParam.java\n+++ b/src/main/java/cc/ryanc/halo/model/params/PasswordResetParam.java\n@@ -0,0 +1,26 @@\n+package cc.ryanc.halo.model.params;\n+\n+import lombok.Data;\n+\n+import javax.validation.constraints.NotBlank;\n+import javax.validation.constraints.Size;\n+\n+/**\n+ * Parameter of password resetting.\n+ *\n+ * @author johnniang\n+ */\n+@Data\n+public class PasswordResetParam {\n+\n+    @NotBlank(message = \"Password must not be blank\")\n+    @Size(min = 6, max = 18, message = \"Length of password must be between {min} to {max}\")\n+    private String password;\n+\n+    @NotBlank(message = \"Confirm password must not be blank\")\n+    @Size(min = 6, max = 18, message = \"Length of confirm password must be between {min} to {max}\")\n+    private String definePassword;\n+\n+    @NotBlank(message = \"Reset code must not be blank\")\n+    private String code;\n+}",
    "output": "Add PostParam dto"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/AdminController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/AdminController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/AdminController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/AdminController.java\n@@ -3,6 +3,7 @@\n import cc.ryanc.halo.logging.Logger;\n import cc.ryanc.halo.model.domain.*;\n import cc.ryanc.halo.model.enums.*;\n+import cc.ryanc.halo.model.params.PasswordResetParam;\n import cc.ryanc.halo.model.support.JsonResult;\n import cc.ryanc.halo.model.support.LogsRecord;\n import cc.ryanc.halo.service.*;\n@@ -264,28 +265,23 @@ public String toResetPassword(@RequestParam(value = \"code\", defaultValue = \"\") S\n     /**\n      * 重置密码\n      *\n-     * @param password       password\n-     * @param definePassword definePassword\n+     * @param resetParam password reset param\n      * @return String\n      */\n     @PostMapping(value = \"/resetPassword\")\n     @ResponseBody\n-    public JsonResult resetPassword(@RequestParam(value = \"password\") String password,\n-                                    @RequestParam(value = \"definePassword\") String definePassword,\n-                                    @RequestParam(value = \"code\") String code,\n+    public JsonResult resetPassword(@RequestBody PasswordResetParam resetParam,\n                                     HttpSession session) {\n         final String sessionCode = (String) session.getAttribute(RESET_PASSWORD_SESSION_KEY);\n-        if (null == sessionCode || !StrUtil.equals(sessionCode, code)) {\n+        if (null == sessionCode || !StrUtil.equals(sessionCode, resetParam.getCode())) {\n             return JsonResult.fail(\"不允许该操作！\");\n         }\n-        if (StrUtil.isBlank(password) || StrUtil.isBlank(definePassword)) {\n-            return JsonResult.fail(\"请输入完整信息！\");\n-        }\n-        if (!StrUtil.equals(password, definePassword)) {\n+\n+        if (!StrUtil.equals(resetParam.getPassword(), resetParam.getDefinePassword())) {\n             return JsonResult.fail(\"两次密码不一样！\");\n         }\n         final User user = userService.findUser();\n-        user.setUserPass(SecureUtil.md5(password));\n+        user.setUserPass(SecureUtil.md5(resetParam.getPassword()));\n         userService.update(user);\n         userService.updateUserNormal();\n         session.removeAttribute(RESET_PASSWORD_SESSION_KEY);",
    "output": "Refactor resetPassword in AdminController"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/AdminController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/AdminController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/AdminController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/AdminController.java\n@@ -2,9 +2,9 @@\n \n import cc.ryanc.halo.logging.Logger;\n import cc.ryanc.halo.model.domain.*;\n+import cc.ryanc.halo.model.enums.*;\n import cc.ryanc.halo.model.support.JsonResult;\n import cc.ryanc.halo.model.support.LogsRecord;\n-import cc.ryanc.halo.model.enums.*;\n import cc.ryanc.halo.service.*;\n import cc.ryanc.halo.utils.LocaleMessageUtil;\n import cc.ryanc.halo.utils.MarkdownUtils;\n@@ -49,6 +49,8 @@\n @RequestMapping(value = \"/admin\")\n public class AdminController extends BaseController {\n \n+    private final static String RESET_PASSWORD_SESSION_KEY = \"resetPasswordCode\";\n+\n     private final Logger log = Logger.getLogger(getClass());\n \n     @Autowired\n@@ -234,7 +236,7 @@ public JsonResult sendResetPasswordEmail(@RequestParam(value = \"userName\") Strin\n             url.append(\"/admin/toResetPassword?code=\");\n             url.append(code);\n             mailService.sendMail(user.getUserEmail(), \"请根据该链接重置你的博客密码\", \"请点击该链接重置你的密码：\" + url);\n-            session.setAttribute(\"resetPasswordCode\", code);\n+            session.setAttribute(RESET_PASSWORD_SESSION_KEY, code);\n             return JsonResult.success(\"邮件发送成功，请登录您的邮箱进行下一步操作\");\n         } catch (Exception e) {\n             return JsonResult.fail(\"邮件发送失败，请确定已经配置好了发信服务器信息\");\n@@ -251,15 +253,10 @@ public JsonResult sendResetPasswordEmail(@RequestParam(value = \"userName\") Strin\n     public String toResetPassword(@RequestParam(value = \"code\", defaultValue = \"\") String code,\n                                   Model model,\n                                   HttpSession session) {\n-        final String sessionCode = (String) session.getAttribute(\"resetPasswordCode\");\n-        if (StrUtil.isEmpty(code)) {\n-            this.renderNotFound();\n-        }\n-        if (!sessionCode.equals(code)) {\n-            model.addAttribute(\"isRight\", false);\n-        } else {\n-            model.addAttribute(\"isRight\", true);\n-        }\n+        String sessionCode = (String) session.getAttribute(RESET_PASSWORD_SESSION_KEY);\n+\n+        model.addAttribute(\"isRight\", StrUtil.equals(sessionCode, code));\n+\n         model.addAttribute(\"code\", code);\n         return \"admin/admin_resetpassword\";\n     }\n@@ -277,14 +274,11 @@ public JsonResult resetPassword(@RequestParam(value = \"password\") String passwor\n                                     @RequestParam(value = \"definePassword\") String definePassword,\n                                     @RequestParam(value = \"code\") String code,\n                                     HttpSession session) {\n-        final String sessionCode = (String) session.getAttribute(\"resetPasswordCode\");\n-        if (null == sessionCode) {\n-            return JsonResult.fail(\"不允许该操作！\");\n-        }\n-        if (!StrUtil.equals(code, sessionCode)) {\n+        final String sessionCode = (String) session.getAttribute(RESET_PASSWORD_SESSION_KEY);\n+        if (null == sessionCode || !StrUtil.equals(sessionCode, code)) {\n             return JsonResult.fail(\"不允许该操作！\");\n         }\n-        if (StrUtil.isEmpty(password) || StrUtil.isEmpty(definePassword)) {\n+        if (StrUtil.isBlank(password) || StrUtil.isBlank(definePassword)) {\n             return JsonResult.fail(\"请输入完整信息！\");\n         }\n         if (!StrUtil.equals(password, definePassword)) {\n@@ -294,7 +288,7 @@ public JsonResult resetPassword(@RequestParam(value = \"password\") String passwor\n         user.setUserPass(SecureUtil.md5(password));\n         userService.update(user);\n         userService.updateUserNormal();\n-        session.removeAttribute(\"resetPasswordCode\");\n+        session.removeAttribute(RESET_PASSWORD_SESSION_KEY);\n         return JsonResult.success(\"重置密码成功！\");\n     }\n \n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/core/CommonController.java b/src/main/java/cc/ryanc/halo/web/controller/core/CommonController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/core/CommonController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/core/CommonController.java\n@@ -38,11 +38,14 @@ public String handleError(HttpServletRequest request) {\n         // Get the exception\n         Throwable throwable = (Throwable) request.getAttribute(\"javax.servlet.error.exception\");\n \n-        if (throwable != null && StringUtils.startsWithIgnoreCase(throwable.getMessage(), \"Could not resolve view with name '\")) {\n+        if (throwable != null) {\n             log.error(\"Captured an exception\", throwable);\n-            // TODO May cause unreasoned problem\n-            // if Ftl was not found then redirect to /404\n-            return \"redirect:/404\";\n+\n+            if (StringUtils.startsWithIgnoreCase(throwable.getMessage(), \"Could not resolve view with name '\")) {\n+                // TODO May cause unreasoned problem\n+                // if Ftl was not found then redirect to /404\n+                return \"redirect:/404\";\n+            }\n         }\n \n         if (statusCode.equals(CommonParamsEnum.NOT_FOUND.getValue())) {",
    "output": "Fix NPE when resetting password"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/utils/MarkdownUtils.java b/src/main/java/cc/ryanc/halo/utils/MarkdownUtils.java\n--- a/src/main/java/cc/ryanc/halo/utils/MarkdownUtils.java\n+++ b/src/main/java/cc/ryanc/halo/utils/MarkdownUtils.java\n@@ -77,8 +77,4 @@ public static Map<String, List<String>> getFrontMatter(String content) {\n         document.accept(visitor);\n         return visitor.getData();\n     }\n-\n-    public static void main(String[] args) {\n-        System.out.println(\"[bilibili:44971847]\".replaceAll(HaloConst.BILIBILI_VIDEO_REG_PATTERN, HaloConst.BILIBILI_VIDEO_IFRAME));\n-    }\n }",
    "output": "Merge remote-tracking branch 'origin/dev' into dev"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/utils/BeanUtils.java b/src/main/java/cc/ryanc/halo/utils/BeanUtils.java\n--- a/src/main/java/cc/ryanc/halo/utils/BeanUtils.java\n+++ b/src/main/java/cc/ryanc/halo/utils/BeanUtils.java\n@@ -45,7 +45,8 @@ public static <T> T transformFrom(@Nullable Object source, @NonNull Class<T> tar\n         // Init the instance\n         try {\n             // New instance for the target class\n-            T targetInstance = targetClass.getDeclaredConstructor().newInstance();\n+            // TODO Class.newInstance() is deprecated in Java 9\n+            T targetInstance = targetClass.newInstance();\n             // Copy properties\n             org.springframework.beans.BeanUtils.copyProperties(source, targetInstance, getNullPropertyNames(source));\n             // Return the target instance\n\ndiff --git a/src/test/java/cc/ryanc/halo/utils/BeanUtilsTest.java b/src/test/java/cc/ryanc/halo/utils/BeanUtilsTest.java\n--- a/src/test/java/cc/ryanc/halo/utils/BeanUtilsTest.java\n+++ b/src/test/java/cc/ryanc/halo/utils/BeanUtilsTest.java\n@@ -0,0 +1,98 @@\n+package cc.ryanc.halo.utils;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Data;\n+import lombok.NoArgsConstructor;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.junit.Assert.*;\n+\n+/**\n+ * BeanUtils test.\n+ *\n+ * @author johnniang\n+ */\n+public class BeanUtilsTest {\n+\n+    @Test\n+    public void transformFrom() {\n+        TestA a = new TestA(1, 2);\n+\n+        TestC c = BeanUtils.transformFrom(a, TestC.class);\n+        assertEquals(a.getA(), c.getA());\n+        assertEquals(a.getB(), c.getB());\n+\n+        TestB b = BeanUtils.transformFrom(a, TestB.class);\n+        assertEquals(a.getB(), b.getB());\n+        assertNull(b.getC());\n+\n+    }\n+\n+    @Test\n+    public void transformFromInBatch() {\n+        TestA[] as = {\n+                new TestA(1, 2),\n+                new TestA(3, 4)\n+        };\n+\n+        List<TestA> aList = Arrays.asList(as);\n+\n+        List<TestC> cs = BeanUtils.transformFromInBatch(aList, TestC.class);\n+        assertEquals(as.length, cs.size());\n+        for (int i = 0; i < cs.size(); i++) {\n+            assertEquals(as[i].getA(), cs.get(i).getA());\n+            assertEquals(as[i].getB(), cs.get(i).getB());\n+        }\n+\n+        List<TestB> bs = BeanUtils.transformFromInBatch(aList, TestB.class);\n+        assertEquals(as.length, bs.size());\n+        for (int i = 0; i < bs.size(); i++) {\n+            assertEquals(as[i].getB(), bs.get(i).getB());\n+            assertNull(bs.get(i).getC());\n+        }\n+    }\n+\n+    @Test\n+    public void updateProperties() {\n+        TestA a = new TestA(1, 2);\n+        TestB b = new TestB(3, 4);\n+        TestC c = new TestC(5, 6);\n+\n+        BeanUtils.updateProperties(a, b);\n+        assertEquals(b.getB(), a.getB());\n+        assertEquals(b.getC(), Integer.valueOf(4));\n+\n+        BeanUtils.updateProperties(a, c);\n+        assertEquals(c.getA(), a.getA());\n+        assertEquals(c.getB(), a.getB());\n+    }\n+\n+    @Data\n+    @NoArgsConstructor\n+    @AllArgsConstructor\n+    static class TestA {\n+        private Integer a;\n+        private Integer b;\n+    }\n+\n+    @Data\n+    @NoArgsConstructor\n+    @AllArgsConstructor\n+    static class TestB {\n+        private Integer b;\n+        private Integer c;\n+    }\n+\n+    @Data\n+    @NoArgsConstructor\n+    @AllArgsConstructor\n+    static class TestC {\n+        private Integer a;\n+        private Integer b;\n+    }\n+\n+}\n\\ No newline at end of file",
    "output": "Add BeanUtilsTest"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/utils/MarkdownUtils.java b/src/main/java/cc/ryanc/halo/utils/MarkdownUtils.java\n--- a/src/main/java/cc/ryanc/halo/utils/MarkdownUtils.java\n+++ b/src/main/java/cc/ryanc/halo/utils/MarkdownUtils.java\n@@ -77,8 +77,4 @@ public static Map<String, List<String>> getFrontMatter(String content) {\n         document.accept(visitor);\n         return visitor.getData();\n     }\n-\n-    public static void main(String[] args) {\n-        System.out.println(\"[bilibili:44971847]\".replaceAll(HaloConst.BILIBILI_VIDEO_REG_PATTERN, HaloConst.BILIBILI_VIDEO_IFRAME));\n-    }\n }",
    "output": ":hammer: remove main method from MarkdownUtils.java"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/web/controller/api/ApiPostController.java b/src/main/java/cc/ryanc/halo/web/controller/api/ApiPostController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/api/ApiPostController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/api/ApiPostController.java\n@@ -1,9 +1,7 @@\n package cc.ryanc.halo.web.controller.api;\n \n import cc.ryanc.halo.exception.NotFoundException;\n-import cc.ryanc.halo.model.domain.Category;\n import cc.ryanc.halo.model.domain.Post;\n-import cc.ryanc.halo.model.domain.Tag;\n import cc.ryanc.halo.model.dto.JsonResult;\n import cc.ryanc.halo.model.enums.PostStatusEnum;\n import cc.ryanc.halo.model.enums.PostTypeEnum;\n@@ -20,6 +18,8 @@\n import org.springframework.http.HttpStatus;\n import org.springframework.web.bind.annotation.*;\n \n+import java.util.Optional;\n+\n import static cc.ryanc.halo.utils.HaloUtils.getDefaultPageSize;\n import static org.springframework.data.domain.Sort.Direction.DESC;\n \n@@ -171,55 +171,14 @@ public JsonResult posts(@PathVariable(value = \"page\") Integer page,\n      */\n     @GetMapping(value = \"/{postId}\")\n     public Post posts(@PathVariable(value = \"postId\") Long postId) {\n-        final Post post = postService.findByPostId(postId, PostTypeEnum.POST_TYPE_POST.getDesc());\n-\n-        if (post == null) {\n-            throw new NotFoundException(\"Post with id: \" + postId + \" was not found\").setErrorData(postId);\n-        }\n+        // Find post by post id\n+        Post post = Optional.ofNullable(postService.findByPostId(postId, PostTypeEnum.POST_TYPE_POST.getDesc()))\n+                .orElseThrow(() -> new NotFoundException(\"Post with id: \" + postId + \" was not found\").setErrorData(postId));\n \n         // Cache views\n         postService.cacheViews(post.getPostId());\n \n         return post;\n     }\n \n-    /**\n-     * 根据分类目录查询所有文章 分页\n-     *\n-     * @param cateUrl 分类目录路径\n-     * @param page    页码\n-     * @return String\n-     */\n-    @GetMapping(value = \"/categories/{cateUrl}/{page}\")\n-    @Deprecated\n-    public JsonResult categories(@PathVariable(\"cateUrl\") String cateUrl,\n-                                 @PathVariable(\"page\") Integer page,\n-                                 @SortDefault(sort = \"postDate\", direction = DESC) Sort sort) {\n-        final Category category = categoryService.findByCateUrl(cateUrl);\n-        final Pageable pageable = PageRequest.of(page - 1, getDefaultPageSize(), sort);\n-        final Page<Post> posts = postService.findPostByCategories(category, pageable);\n-\n-        return JsonResult.ok(HttpStatus.OK.getReasonPhrase(), posts);\n-    }\n-\n-\n-    /**\n-     * 根据标签路径查询所有文章 分页\n-     *\n-     * @param tagUrl 标签路径\n-     * @param page   页码\n-     * @return String\n-     */\n-    @GetMapping(value = \"/tags/{tagUrl}/{page}\")\n-    @Deprecated\n-    public JsonResult tags(@PathVariable(\"tagUrl\") String tagUrl,\n-                           @PathVariable(\"page\") Integer page,\n-                           @SortDefault(sort = \"postDate\", direction = DESC) Sort sort) {\n-        final Tag tag = tagService.findByTagUrl(tagUrl);\n-        final Pageable pageable = PageRequest.of(page - 1, getDefaultPageSize(), sort);\n-        final Page<Post> posts = postService.findPostsByTags(tag, pageable);\n-\n-        return JsonResult.ok(HttpStatus.OK.getReasonPhrase(), posts);\n-    }\n-\n }",
    "output": "Remove deprecated code(#106)"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/utils/HaloUtils.java b/src/main/java/cc/ryanc/halo/utils/HaloUtils.java\n--- a/src/main/java/cc/ryanc/halo/utils/HaloUtils.java\n+++ b/src/main/java/cc/ryanc/halo/utils/HaloUtils.java\n@@ -2,6 +2,7 @@\n \n import cc.ryanc.halo.model.dto.BackupDto;\n import cc.ryanc.halo.model.dto.Theme;\n+import cc.ryanc.halo.model.enums.BlogPropertiesEnum;\n import cc.ryanc.halo.model.enums.CommonParamsEnum;\n import cn.hutool.core.io.FileUtil;\n import cn.hutool.core.text.StrBuilder;\n@@ -24,6 +25,8 @@\n import java.nio.file.attribute.BasicFileAttributes;\n import java.util.*;\n \n+import static cc.ryanc.halo.model.dto.HaloConst.OPTIONS;\n+\n /**\n  * <pre>\n  * 常用工具\n@@ -35,6 +38,21 @@\n @Slf4j\n public class HaloUtils {\n \n+    private final static int DEFAULT_PAGE_SIZE = 10;\n+\n+    /**\n+     * Gets default page size.\n+     *\n+     * @return default page size\n+     */\n+    public static int getDefaultPageSize() {\n+        if (StrUtil.isNotBlank(OPTIONS.get(BlogPropertiesEnum.INDEX_POSTS.getProp()))) {\n+            return Integer.parseInt(OPTIONS.get(BlogPropertiesEnum.INDEX_POSTS.getProp()));\n+        }\n+\n+        return DEFAULT_PAGE_SIZE;\n+    }\n+\n     /**\n      * 获取备份文件信息\n      *\n@@ -48,7 +66,7 @@ public static List<BackupDto> getBackUps(String dir) {\n         final File srcPath = new File(srcPathStr.toString());\n         final File[] files = srcPath.listFiles();\n         final List<BackupDto> backupDtos = new ArrayList<>();\n-        BackupDto backupDto = null;\n+        BackupDto backupDto;\n         // 遍历文件\n         if (null != files) {\n             for (File file : files) {\n@@ -107,8 +125,7 @@ public static Date getCreateTime(String srcPath) {\n         BasicFileAttributes attr;\n         try {\n             attr = basicview.readAttributes();\n-            final Date createDate = new Date(attr.creationTime().toMillis());\n-            return createDate;\n+            return new Date(attr.creationTime().toMillis());\n         } catch (Exception e) {\n             e.printStackTrace();\n         }\n@@ -147,7 +164,7 @@ public static List<Theme> getThemes() {\n             final File themesPath = new File(basePath.getAbsolutePath(), \"templates/themes\");\n             final File[] files = themesPath.listFiles();\n             if (null != files) {\n-                Theme theme = null;\n+                Theme theme;\n                 for (File file : files) {\n                     if (file.isDirectory()) {\n                         if (StrUtil.equals(\"__MACOSX\", file.getName())) {\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/api/ApiPostController.java b/src/main/java/cc/ryanc/halo/web/controller/api/ApiPostController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/api/ApiPostController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/api/ApiPostController.java\n@@ -5,7 +5,6 @@\n import cc.ryanc.halo.model.domain.Post;\n import cc.ryanc.halo.model.domain.Tag;\n import cc.ryanc.halo.model.dto.JsonResult;\n-import cc.ryanc.halo.model.enums.BlogPropertiesEnum;\n import cc.ryanc.halo.model.enums.PostStatusEnum;\n import cc.ryanc.halo.model.enums.PostTypeEnum;\n import cc.ryanc.halo.service.CategoryService;\n@@ -19,12 +18,9 @@\n import org.springframework.data.domain.Sort;\n import org.springframework.data.web.SortDefault;\n import org.springframework.http.HttpStatus;\n-import org.springframework.web.bind.annotation.GetMapping;\n-import org.springframework.web.bind.annotation.PathVariable;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.web.bind.annotation.*;\n \n-import static cc.ryanc.halo.model.dto.HaloConst.OPTIONS;\n+import static cc.ryanc.halo.utils.HaloUtils.getDefaultPageSize;\n import static org.springframework.data.domain.Sort.Direction.DESC;\n \n /**\n@@ -114,14 +110,27 @@ public class ApiPostController {\n      * @return JsonResult\n      */\n     @GetMapping(value = \"/page/{page}\")\n-    public JsonResult posts(@PathVariable(value = \"page\") Integer page, @SortDefault(sort = \"postDate\", direction = DESC) Sort sort) {\n-        int size = 10;\n-        if (StrUtil.isNotBlank(OPTIONS.get(BlogPropertiesEnum.INDEX_POSTS.getProp()))) {\n-            size = Integer.parseInt(OPTIONS.get(BlogPropertiesEnum.INDEX_POSTS.getProp()));\n+    public JsonResult posts(@PathVariable(value = \"page\") Integer page,\n+                            @SortDefault(sort = \"postDate\", direction = DESC) Sort sort,\n+                            @RequestParam(value = \"cateUrl\", required = false) String cateUrl,\n+                            @RequestParam(value = \"tagUrl\", required = false) String tagUrl) {\n+        // Build page info\n+        Pageable pageable = PageRequest.of(page - 1, getDefaultPageSize(), sort);\n+\n+        Page<Post> postPage;\n+\n+        if (StrUtil.isNotBlank(cateUrl)) {\n+            // Query by category url\n+            postPage = postService.findPostByCategories(categoryService.findByCateUrl(cateUrl), pageable);\n+        } else if (StrUtil.isNotBlank(tagUrl)) {\n+            // Query by tag url\n+            postPage = postService.findPostsByTags(tagService.findByTagUrl(tagUrl), pageable);\n+        } else {\n+            // Query default\n+            postPage = postService.findPostByStatus(PostStatusEnum.PUBLISHED.getCode(), PostTypeEnum.POST_TYPE_POST.getDesc(), pageable);\n         }\n-        final Pageable pageable = PageRequest.of(page - 1, size, sort);\n-        final Page<Post> posts = postService.findPostByStatus(PostStatusEnum.PUBLISHED.getCode(), PostTypeEnum.POST_TYPE_POST.getDesc(), pageable);\n-        return JsonResult.ok(HttpStatus.OK.getReasonPhrase(), posts);\n+\n+        return JsonResult.ok(HttpStatus.OK.getReasonPhrase(), postPage);\n     }\n \n     /**\n@@ -182,20 +191,15 @@ public Post posts(@PathVariable(value = \"postId\") Long postId) {\n      * @return String\n      */\n     @GetMapping(value = \"/categories/{cateUrl}/{page}\")\n+    @Deprecated\n     public JsonResult categories(@PathVariable(\"cateUrl\") String cateUrl,\n                                  @PathVariable(\"page\") Integer page,\n                                  @SortDefault(sort = \"postDate\", direction = DESC) Sort sort) {\n         final Category category = categoryService.findByCateUrl(cateUrl);\n-        int size = 10;\n-        if (StrUtil.isNotBlank(OPTIONS.get(BlogPropertiesEnum.INDEX_POSTS.getProp()))) {\n-            size = Integer.parseInt(OPTIONS.get(BlogPropertiesEnum.INDEX_POSTS.getProp()));\n-        }\n-        final Pageable pageable = PageRequest.of(page - 1, size, sort);\n+        final Pageable pageable = PageRequest.of(page - 1, getDefaultPageSize(), sort);\n         final Page<Post> posts = postService.findPostByCategories(category, pageable);\n-        if (null == posts) {\n-            return new JsonResult(HttpStatus.NO_CONTENT.value(), HttpStatus.NO_CONTENT.getReasonPhrase());\n-        }\n-        return new JsonResult(HttpStatus.OK.value(), HttpStatus.OK.getReasonPhrase(), posts);\n+\n+        return JsonResult.ok(HttpStatus.OK.getReasonPhrase(), posts);\n     }\n \n \n@@ -207,19 +211,15 @@ public JsonResult categories(@PathVariable(\"cateUrl\") String cateUrl,\n      * @return String\n      */\n     @GetMapping(value = \"/tags/{tagUrl}/{page}\")\n+    @Deprecated\n     public JsonResult tags(@PathVariable(\"tagUrl\") String tagUrl,\n                            @PathVariable(\"page\") Integer page,\n                            @SortDefault(sort = \"postDate\", direction = DESC) Sort sort) {\n         final Tag tag = tagService.findByTagUrl(tagUrl);\n-        int size = 10;\n-        if (StrUtil.isNotBlank(OPTIONS.get(BlogPropertiesEnum.INDEX_POSTS.getProp()))) {\n-            size = Integer.parseInt(OPTIONS.get(BlogPropertiesEnum.INDEX_POSTS.getProp()));\n-        }\n-        final Pageable pageable = PageRequest.of(page - 1, size, sort);\n+        final Pageable pageable = PageRequest.of(page - 1, getDefaultPageSize(), sort);\n         final Page<Post> posts = postService.findPostsByTags(tag, pageable);\n-        if (null == posts) {\n-            return new JsonResult(HttpStatus.NO_CONTENT.value(), HttpStatus.NO_CONTENT.getReasonPhrase());\n-        }\n-        return new JsonResult(HttpStatus.OK.value(), HttpStatus.OK.getReasonPhrase(), posts);\n+\n+        return JsonResult.ok(HttpStatus.OK.getReasonPhrase(), posts);\n     }\n+\n }",
    "output": "Refactor cc.ryanc.halo.web.controller.api.ApiPostController(issue: #106) again"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/domain/Post.java b/src/main/java/cc/ryanc/halo/model/domain/Post.java\n--- a/src/main/java/cc/ryanc/halo/model/domain/Post.java\n+++ b/src/main/java/cc/ryanc/halo/model/domain/Post.java\n@@ -3,6 +3,7 @@\n import cn.hutool.core.date.DateTime;\n import cn.hutool.core.date.DateUtil;\n import com.fasterxml.jackson.annotation.JsonFormat;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n import lombok.Data;\n import lombok.ToString;\n import org.hibernate.annotations.ColumnDefault;\n@@ -68,6 +69,7 @@ public class Post implements Serializable {\n      * 文章内容 html格式\n      */\n     @Lob\n+    @JsonIgnore\n     private String postContent;\n \n     /**\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/api/ApiPostController.java b/src/main/java/cc/ryanc/halo/web/controller/api/ApiPostController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/api/ApiPostController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/api/ApiPostController.java\n@@ -1,12 +1,16 @@\n package cc.ryanc.halo.web.controller.api;\n \n import cc.ryanc.halo.exception.NotFoundException;\n+import cc.ryanc.halo.model.domain.Category;\n import cc.ryanc.halo.model.domain.Post;\n+import cc.ryanc.halo.model.domain.Tag;\n import cc.ryanc.halo.model.dto.JsonResult;\n import cc.ryanc.halo.model.enums.BlogPropertiesEnum;\n import cc.ryanc.halo.model.enums.PostStatusEnum;\n import cc.ryanc.halo.model.enums.PostTypeEnum;\n+import cc.ryanc.halo.service.CategoryService;\n import cc.ryanc.halo.service.PostService;\n+import cc.ryanc.halo.service.TagService;\n import cn.hutool.core.util.StrUtil;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.data.domain.Page;\n@@ -38,6 +42,12 @@ public class ApiPostController {\n     @Autowired\n     private PostService postService;\n \n+    @Autowired\n+    private CategoryService categoryService;\n+\n+    @Autowired\n+    private TagService tagService;\n+\n     /**\n      * 获取文章列表 分页\n      *\n@@ -163,4 +173,53 @@ public Post posts(@PathVariable(value = \"postId\") Long postId) {\n \n         return post;\n     }\n+\n+    /**\n+     * 根据分类目录查询所有文章 分页\n+     *\n+     * @param cateUrl 分类目录路径\n+     * @param page    页码\n+     * @return String\n+     */\n+    @GetMapping(value = \"/categories/{cateUrl}/{page}\")\n+    public JsonResult categories(@PathVariable(\"cateUrl\") String cateUrl,\n+                                 @PathVariable(\"page\") Integer page,\n+                                 @SortDefault(sort = \"postDate\", direction = DESC) Sort sort) {\n+        final Category category = categoryService.findByCateUrl(cateUrl);\n+        int size = 10;\n+        if (StrUtil.isNotBlank(OPTIONS.get(BlogPropertiesEnum.INDEX_POSTS.getProp()))) {\n+            size = Integer.parseInt(OPTIONS.get(BlogPropertiesEnum.INDEX_POSTS.getProp()));\n+        }\n+        final Pageable pageable = PageRequest.of(page - 1, size, sort);\n+        final Page<Post> posts = postService.findPostByCategories(category, pageable);\n+        if (null == posts) {\n+            return new JsonResult(HttpStatus.NO_CONTENT.value(), HttpStatus.NO_CONTENT.getReasonPhrase());\n+        }\n+        return new JsonResult(HttpStatus.OK.value(), HttpStatus.OK.getReasonPhrase(), posts);\n+    }\n+\n+\n+    /**\n+     * 根据标签路径查询所有文章 分页\n+     *\n+     * @param tagUrl 标签路径\n+     * @param page   页码\n+     * @return String\n+     */\n+    @GetMapping(value = \"/tags/{tagUrl}/{page}\")\n+    public JsonResult tags(@PathVariable(\"tagUrl\") String tagUrl,\n+                           @PathVariable(\"page\") Integer page,\n+                           @SortDefault(sort = \"postDate\", direction = DESC) Sort sort) {\n+        final Tag tag = tagService.findByTagUrl(tagUrl);\n+        int size = 10;\n+        if (StrUtil.isNotBlank(OPTIONS.get(BlogPropertiesEnum.INDEX_POSTS.getProp()))) {\n+            size = Integer.parseInt(OPTIONS.get(BlogPropertiesEnum.INDEX_POSTS.getProp()));\n+        }\n+        final Pageable pageable = PageRequest.of(page - 1, size, sort);\n+        final Page<Post> posts = postService.findPostsByTags(tag, pageable);\n+        if (null == posts) {\n+            return new JsonResult(HttpStatus.NO_CONTENT.value(), HttpStatus.NO_CONTENT.getReasonPhrase());\n+        }\n+        return new JsonResult(HttpStatus.OK.value(), HttpStatus.OK.getReasonPhrase(), posts);\n+    }\n }",
    "output": ":sparkles: #106"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/domain/Post.java b/src/main/java/cc/ryanc/halo/model/domain/Post.java\n--- a/src/main/java/cc/ryanc/halo/model/domain/Post.java\n+++ b/src/main/java/cc/ryanc/halo/model/domain/Post.java\n@@ -152,7 +152,7 @@ public class Post implements Serializable {\n      * Post priority (default is 0)\n      */\n     @ColumnDefault(\"0\")\n-    private Integer priority;\n+    private Integer postPriority;\n \n     @JsonFormat(pattern = \"yyyy-MM-dd HH:mm\")\n     public Date getPostDate() {\n@@ -176,8 +176,8 @@ public void prePersist() {\n             postUpdate = now;\n         }\n \n-        if (priority == null) {\n-            priority = 0;\n+        if (postPriority == null) {\n+            postPriority = 0;\n         }\n \n         postId = null;\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/front/FrontIndexController.java b/src/main/java/cc/ryanc/halo/web/controller/front/FrontIndexController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/front/FrontIndexController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/front/FrontIndexController.java\n@@ -46,7 +46,7 @@ public class FrontIndexController extends BaseController {\n      */\n     @GetMapping\n     public String index(Model model) {\n-        return this.index(model, 1, Sort.by(DESC, \"priority\").and(Sort.by(DESC, \"postDate\")));\n+        return this.index(model, 1, Sort.by(DESC, \"postPriority\").and(Sort.by(DESC, \"postDate\")));\n     }\n \n     /**\n@@ -60,7 +60,7 @@ public String index(Model model) {\n     public String index(Model model,\n                         @PathVariable(value = \"page\") Integer page,\n                         @SortDefault.SortDefaults({\n-                                @SortDefault(sort = \"priority\", direction = DESC),\n+                                @SortDefault(sort = \"postPriority\", direction = DESC),\n                                 @SortDefault(sort = \"postDate\", direction = DESC)\n                         }) Sort sort) {\n         log.debug(\"Requested index page, sort info: [{}]\", sort);",
    "output": ":pencil2: modify the property of the post class priority to postPriority"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/web/controller/core/BaseController.java b/src/main/java/cc/ryanc/halo/web/controller/core/BaseController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/core/BaseController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/core/BaseController.java\n@@ -1,5 +1,6 @@\n package cc.ryanc.halo.web.controller.core;\n \n+import cc.ryanc.halo.logging.Logger;\n import cn.hutool.core.text.StrBuilder;\n \n /**\n@@ -12,6 +13,8 @@\n  */\n public abstract class BaseController {\n \n+    protected Logger log = Logger.getLogger(getClass());\n+\n     /**\n      * 定义默认主题\n      */\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/front/FrontArchiveController.java b/src/main/java/cc/ryanc/halo/web/controller/front/FrontArchiveController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/front/FrontArchiveController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/front/FrontArchiveController.java\n@@ -44,7 +44,6 @@\n  * @author : RYAN0UP\n  * @date : 2018/4/26\n  */\n-@Slf4j\n @Controller\n @RequestMapping(value = \"/archives\")\n public class FrontArchiveController extends BaseController {\n@@ -141,7 +140,7 @@ public String getPost(@PathVariable String postUrl,\n             model.addAttribute(\"afterPost\", nextPost);\n             model.addAttribute(\"nextPost\", nextPost);\n         }\n-        List<Comment> comments = null;\n+        List<Comment> comments;\n         if (StrUtil.equals(OPTIONS.get(BlogPropertiesEnum.NEW_COMMENT_NEED_CHECK.getProp()), TrueFalseEnum.TRUE.getDesc()) || OPTIONS.get(BlogPropertiesEnum.NEW_COMMENT_NEED_CHECK.getProp()) == null) {\n             comments = commentService.findCommentsByPostAndCommentStatus(post, CommentStatusEnum.PUBLISHED.getCode());\n         } else {\n@@ -162,7 +161,7 @@ public String getPost(@PathVariable String postUrl,\n             size = Integer.parseInt(OPTIONS.get(BlogPropertiesEnum.INDEX_COMMENTS.getProp()));\n         }\n         //评论分页\n-        final ListPage<Comment> commentsPage = new ListPage<Comment>(CommentUtil.getComments(comments), cp, size);\n+        final ListPage<Comment> commentsPage = new ListPage<>(CommentUtil.getComments(comments), cp, size);\n         final int[] rainbow = PageUtil.rainbow(cp, commentsPage.getTotalPage(), 3);\n         model.addAttribute(\"is_post\", true);\n         model.addAttribute(\"comments\", commentsPage);\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/front/FrontCommentController.java b/src/main/java/cc/ryanc/halo/web/controller/front/FrontCommentController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/front/FrontCommentController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/front/FrontCommentController.java\n@@ -1,5 +1,6 @@\n package cc.ryanc.halo.web.controller.front;\n \n+import cc.ryanc.halo.logging.Logger;\n import cc.ryanc.halo.model.domain.Comment;\n import cc.ryanc.halo.model.domain.Post;\n import cc.ryanc.halo.model.dto.JsonResult;\n@@ -43,10 +44,11 @@\n  * @author : RYAN0UP\n  * @date : 2018/4/26\n  */\n-@Slf4j\n @Controller\n public class FrontCommentController {\n \n+    private final Logger log = Logger.getLogger(getClass());\n+\n     @Autowired\n     private CommentService commentService;\n \n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/front/FrontIndexController.java b/src/main/java/cc/ryanc/halo/web/controller/front/FrontIndexController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/front/FrontIndexController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/front/FrontIndexController.java\n@@ -30,7 +30,6 @@\n  * @author : RYAN0UP\n  * @date : 2018/4/26\n  */\n-@Slf4j\n @Controller\n @RequestMapping(value = {\"/\", \"index\"})\n public class FrontIndexController extends BaseController {\n@@ -47,7 +46,7 @@ public class FrontIndexController extends BaseController {\n      */\n     @GetMapping\n     public String index(Model model) {\n-        return this.index(model, 1, Sort.by(DESC, \"postDate\"));\n+        return this.index(model, 1, Sort.by(DESC, \"priority\").and(Sort.by(DESC, \"postDate\")));\n     }\n \n     /**\n@@ -60,7 +59,12 @@ public String index(Model model) {\n     @GetMapping(value = \"page/{page}\")\n     public String index(Model model,\n                         @PathVariable(value = \"page\") Integer page,\n-                        @SortDefault(sort = \"postDate\", direction = DESC) Sort sort) {\n+                        @SortDefault.SortDefaults({\n+                                @SortDefault(sort = \"priority\", direction = DESC),\n+                                @SortDefault(sort = \"postDate\", direction = DESC)\n+                        }) Sort sort) {\n+        log.debug(\"Requested index page, sort info: [{}]\", sort);\n+\n         //默认显示10条\n         int size = 10;\n         if (StrUtil.isNotBlank(OPTIONS.get(BlogPropertiesEnum.INDEX_POSTS.getProp()))) {\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/front/FrontSearchController.java b/src/main/java/cc/ryanc/halo/web/controller/front/FrontSearchController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/front/FrontSearchController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/front/FrontSearchController.java\n@@ -1,5 +1,6 @@\n package cc.ryanc.halo.web.controller.front;\n \n+import cc.ryanc.halo.logging.Logger;\n import cc.ryanc.halo.model.domain.Post;\n import cc.ryanc.halo.model.enums.BlogPropertiesEnum;\n import cc.ryanc.halo.model.enums.PostStatusEnum;\n@@ -34,11 +35,12 @@\n  * @author : RYAN0UP\n  * @date : 2019/1/11\n  */\n-@Slf4j\n @Controller\n @RequestMapping(value = \"/search\")\n public class FrontSearchController extends BaseController {\n \n+    private final Logger log = Logger.getLogger(getClass());\n+\n     @Autowired\n     private PostService postService;\n ",
    "output": "Complete topping post feature(issue: #103)"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/domain/Attachment.java b/src/main/java/cc/ryanc/halo/model/domain/Attachment.java\n--- a/src/main/java/cc/ryanc/halo/model/domain/Attachment.java\n+++ b/src/main/java/cc/ryanc/halo/model/domain/Attachment.java\n@@ -1,6 +1,7 @@\n package cc.ryanc.halo.model.domain;\n \n import lombok.Data;\n+import lombok.ToString;\n import org.springframework.data.annotation.CreatedDate;\n import org.springframework.data.jpa.domain.support.AuditingEntityListener;\n \n@@ -17,6 +18,7 @@\n  * @date : 2018/1/10\n  */\n @Data\n+@ToString\n @Entity\n @Table(name = \"halo_attachment\")\n @EntityListeners(AuditingEntityListener.class)\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/domain/Category.java b/src/main/java/cc/ryanc/halo/model/domain/Category.java\n--- a/src/main/java/cc/ryanc/halo/model/domain/Category.java\n+++ b/src/main/java/cc/ryanc/halo/model/domain/Category.java\n@@ -2,6 +2,7 @@\n \n import com.fasterxml.jackson.annotation.JsonIgnore;\n import lombok.Data;\n+import lombok.ToString;\n \n import javax.persistence.*;\n import javax.validation.constraints.NotBlank;\n@@ -18,6 +19,7 @@\n  * @date : 2017/11/30\n  */\n @Data\n+@ToString\n @Entity\n @Table(name = \"halo_category\")\n public class Category implements Serializable {\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/domain/Comment.java b/src/main/java/cc/ryanc/halo/model/domain/Comment.java\n--- a/src/main/java/cc/ryanc/halo/model/domain/Comment.java\n+++ b/src/main/java/cc/ryanc/halo/model/domain/Comment.java\n@@ -3,6 +3,7 @@\n import com.fasterxml.jackson.annotation.JsonFormat;\n import com.fasterxml.jackson.annotation.JsonIgnore;\n import lombok.Data;\n+import lombok.ToString;\n import org.springframework.data.annotation.CreatedDate;\n import org.springframework.data.jpa.domain.support.AuditingEntityListener;\n \n@@ -22,6 +23,7 @@\n  * @date : 2018/1/22\n  */\n @Data\n+@ToString\n @Entity\n @Table(name = \"halo_comment\")\n @EntityListeners(AuditingEntityListener.class)\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/domain/Gallery.java b/src/main/java/cc/ryanc/halo/model/domain/Gallery.java\n--- a/src/main/java/cc/ryanc/halo/model/domain/Gallery.java\n+++ b/src/main/java/cc/ryanc/halo/model/domain/Gallery.java\n@@ -1,6 +1,7 @@\n package cc.ryanc.halo.model.domain;\n \n import lombok.Data;\n+import lombok.ToString;\n \n import javax.persistence.Entity;\n import javax.persistence.GeneratedValue;\n@@ -17,6 +18,7 @@\n  * @date : 2018/2/26\n  */\n @Data\n+@ToString\n @Entity\n @Table(name = \"halo_gallery\")\n public class Gallery implements Serializable {\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/domain/Link.java b/src/main/java/cc/ryanc/halo/model/domain/Link.java\n--- a/src/main/java/cc/ryanc/halo/model/domain/Link.java\n+++ b/src/main/java/cc/ryanc/halo/model/domain/Link.java\n@@ -1,6 +1,7 @@\n package cc.ryanc.halo.model.domain;\n \n import lombok.Data;\n+import lombok.ToString;\n \n import javax.persistence.Entity;\n import javax.persistence.GeneratedValue;\n@@ -18,6 +19,7 @@\n  * @date : 2017/11/14\n  */\n @Data\n+@ToString\n @Entity\n @Table(name = \"halo_link\")\n public class Link implements Serializable {\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/domain/Logs.java b/src/main/java/cc/ryanc/halo/model/domain/Logs.java\n--- a/src/main/java/cc/ryanc/halo/model/domain/Logs.java\n+++ b/src/main/java/cc/ryanc/halo/model/domain/Logs.java\n@@ -1,6 +1,7 @@\n package cc.ryanc.halo.model.domain;\n \n import lombok.Data;\n+import lombok.ToString;\n import org.springframework.data.annotation.CreatedDate;\n import org.springframework.data.jpa.domain.support.AuditingEntityListener;\n \n@@ -17,6 +18,7 @@\n  * @date : 2018/1/19\n  */\n @Data\n+@ToString\n @Entity\n @Table(name = \"halo_logs\")\n @EntityListeners(AuditingEntityListener.class)\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/domain/Menu.java b/src/main/java/cc/ryanc/halo/model/domain/Menu.java\n--- a/src/main/java/cc/ryanc/halo/model/domain/Menu.java\n+++ b/src/main/java/cc/ryanc/halo/model/domain/Menu.java\n@@ -1,6 +1,7 @@\n package cc.ryanc.halo.model.domain;\n \n import lombok.Data;\n+import lombok.ToString;\n \n import javax.persistence.Entity;\n import javax.persistence.GeneratedValue;\n@@ -19,6 +20,7 @@\n  * @date : 2018/1/24\n  */\n @Data\n+@ToString\n @Entity\n @Table(name = \"halo_menu\")\n public class Menu implements Serializable {\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/domain/Options.java b/src/main/java/cc/ryanc/halo/model/domain/Options.java\n--- a/src/main/java/cc/ryanc/halo/model/domain/Options.java\n+++ b/src/main/java/cc/ryanc/halo/model/domain/Options.java\n@@ -1,6 +1,7 @@\n package cc.ryanc.halo.model.domain;\n \n import lombok.Data;\n+import lombok.ToString;\n \n import javax.persistence.*;\n import java.io.Serializable;\n@@ -14,6 +15,7 @@\n  * @date : 2017/11/14\n  */\n @Data\n+@ToString\n @Entity\n @Table(name = \"halo_options\")\n public class Options implements Serializable {\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/domain/Post.java b/src/main/java/cc/ryanc/halo/model/domain/Post.java\n--- a/src/main/java/cc/ryanc/halo/model/domain/Post.java\n+++ b/src/main/java/cc/ryanc/halo/model/domain/Post.java\n@@ -5,7 +5,7 @@\n import com.fasterxml.jackson.annotation.JsonFormat;\n import lombok.Data;\n import lombok.ToString;\n-import org.springframework.data.annotation.CreatedDate;\n+import org.hibernate.annotations.ColumnDefault;\n import org.springframework.data.annotation.LastModifiedDate;\n import org.springframework.data.jpa.domain.support.AuditingEntityListener;\n \n@@ -148,6 +148,12 @@ public class Post implements Serializable {\n      */\n     private String customTpl;\n \n+    /**\n+     * Post priority (default is 0)\n+     */\n+    @ColumnDefault(\"0\")\n+    private Integer priority;\n+\n     @JsonFormat(pattern = \"yyyy-MM-dd HH:mm\")\n     public Date getPostDate() {\n         return postDate;\n@@ -161,13 +167,19 @@ public Date getPostUpdate() {\n     @PrePersist\n     public void prePersist() {\n         DateTime now = DateUtil.date();\n+\n         if (postDate == null) {\n             postDate = now;\n         }\n \n         if (postUpdate == null) {\n             postUpdate = now;\n         }\n+\n+        if (priority == null) {\n+            priority = 0;\n+        }\n+\n         postId = null;\n     }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/core/CommonController.java b/src/main/java/cc/ryanc/halo/web/controller/core/CommonController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/core/CommonController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/core/CommonController.java\n@@ -40,6 +40,7 @@ public String handleError(HttpServletRequest request) {\n         Throwable throwable = (Throwable) request.getAttribute(\"javax.servlet.error.exception\");\n \n         if (throwable != null && StringUtils.startsWithIgnoreCase(throwable.getMessage(), \"Could not resolve view with name '\")) {\n+            log.error(\"Captured an exception\", throwable);\n             // TODO May cause unreasoned problem\n             // if Ftl was not found then redirect to /404\n             return \"redirect:/404\";",
    "output": "Add priority column in Post domain"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/domain/Tag.java b/src/main/java/cc/ryanc/halo/model/domain/Tag.java\n--- a/src/main/java/cc/ryanc/halo/model/domain/Tag.java\n+++ b/src/main/java/cc/ryanc/halo/model/domain/Tag.java\n@@ -2,6 +2,7 @@\n \n import com.fasterxml.jackson.annotation.JsonIgnore;\n import lombok.Data;\n+import lombok.ToString;\n \n import javax.persistence.*;\n import javax.validation.constraints.NotEmpty;\n@@ -18,6 +19,7 @@\n  * @date : 2018/1/12\n  */\n @Data\n+@ToString\n @Entity\n @Table(name = \"halo_tag\")\n public class Tag implements Serializable {\n\ndiff --git a/src/main/java/cc/ryanc/halo/model/domain/User.java b/src/main/java/cc/ryanc/halo/model/domain/User.java\n--- a/src/main/java/cc/ryanc/halo/model/domain/User.java\n+++ b/src/main/java/cc/ryanc/halo/model/domain/User.java\n@@ -2,6 +2,7 @@\n \n import com.fasterxml.jackson.annotation.JsonIgnore;\n import lombok.Data;\n+import lombok.ToString;\n \n import javax.persistence.Entity;\n import javax.persistence.GeneratedValue;\n@@ -21,6 +22,7 @@\n  * @date : 2017/11/14\n  */\n @Data\n+@ToString\n @Entity\n @Table(name = \"halo_user\")\n public class User implements Serializable {\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/base/ControllerExceptionHandler.java b/src/main/java/cc/ryanc/halo/web/controller/base/ControllerExceptionHandler.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/base/ControllerExceptionHandler.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/base/ControllerExceptionHandler.java\n@@ -53,7 +53,7 @@ public JsonResult handleMissingServletRequestParameterException(MissingServletRe\n     public JsonResult handleConstraintViolationException(ConstraintViolationException e) {\n         JsonResult jsonResult = handleBaseException(e);\n         jsonResult.setCode(HttpStatus.BAD_REQUEST.value());\n-        jsonResult.setMsg(\"Filed validation error\");\n+        jsonResult.setMsg(\"Field validation error\");\n         jsonResult.setResult(e.getConstraintViolations());\n         return jsonResult;\n     }\n@@ -63,7 +63,7 @@ public JsonResult handleConstraintViolationException(ConstraintViolationExceptio\n     public JsonResult handleMethodArgumentNotValidException(MethodArgumentNotValidException e) {\n         JsonResult jsonResult = handleBaseException(e);\n         jsonResult.setCode(HttpStatus.BAD_REQUEST.value());\n-        jsonResult.setMsg(\"Filed validation error\");\n+        jsonResult.setMsg(\"Field validation error\");\n         Map<String, String> errMap = ValidationUtils.mapWithFieldError(e.getBindingResult().getFieldErrors());\n         jsonResult.setResult(errMap);\n         return jsonResult;\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/core/CommonController.java b/src/main/java/cc/ryanc/halo/web/controller/core/CommonController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/core/CommonController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/core/CommonController.java\n@@ -39,7 +39,7 @@ public String handleError(HttpServletRequest request) {\n         // Get the exception\n         Throwable throwable = (Throwable) request.getAttribute(\"javax.servlet.error.exception\");\n \n-        if (StringUtils.startsWithIgnoreCase(throwable.getMessage(), \"Could not resolve view with name '\")) {\n+        if (throwable != null && StringUtils.startsWithIgnoreCase(throwable.getMessage(), \"Could not resolve view with name '\")) {\n             // TODO May cause unreasoned problem\n             // if Ftl was not found then redirect to /404\n             return \"redirect:/404\";",
    "output": "Fix NullPointerException when getting ServletException"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/listener/StartedListener.java b/src/main/java/cc/ryanc/halo/listener/StartedListener.java\n--- a/src/main/java/cc/ryanc/halo/listener/StartedListener.java\n+++ b/src/main/java/cc/ryanc/halo/listener/StartedListener.java\n@@ -6,15 +6,13 @@\n import cc.ryanc.halo.utils.HaloUtils;\n import cc.ryanc.halo.web.controller.core.BaseController;\n import cn.hutool.core.util.StrUtil;\n-import cn.hutool.cron.CronUtil;\n import freemarker.template.TemplateModelException;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.context.event.ApplicationStartedEvent;\n import org.springframework.context.ApplicationListener;\n import org.springframework.context.annotation.Configuration;\n \n-import javax.annotation.PreDestroy;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -49,15 +47,6 @@ public void onApplicationEvent(ApplicationStartedEvent event) {\n         this.loadOptions();\n         this.loadThemes();\n         this.loadOwo();\n-        //启动定时任务\n-//        CronUtil.start();\n-//        log.info(\"The scheduled task starts successfully!\");\n-    }\n-\n-    @PreDestroy\n-    public void onDestroy() {\n-        log.info(\"Destroyed the cron scheduler\");\n-        CronUtil.stop();\n     }\n \n     /**\n\ndiff --git a/src/main/java/cc/ryanc/halo/utils/SpringUtil.java b/src/main/java/cc/ryanc/halo/utils/SpringUtil.java\n--- a/src/main/java/cc/ryanc/halo/utils/SpringUtil.java\n+++ b/src/main/java/cc/ryanc/halo/utils/SpringUtil.java\n@@ -1,53 +0,0 @@\n-package cc.ryanc.halo.utils;\n-\n-import org.springframework.beans.BeansException;\n-import org.springframework.context.ApplicationContext;\n-import org.springframework.context.ApplicationContextAware;\n-import org.springframework.stereotype.Component;\n-\n-/**\n- * @author : RYAN0UP\n- * @date : 2018/12/5\n- */\n-@Component\n-public class SpringUtil implements ApplicationContextAware {\n-\n-    private static ApplicationContext applicationContext;\n-\n-    /**\n-     * 获取applicationContext\n-     *\n-     * @return ApplicationContext\n-     */\n-    public static ApplicationContext getApplicationContext() {\n-        return applicationContext;\n-    }\n-\n-    @Override\n-    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n-        if (SpringUtil.applicationContext == null) {\n-            SpringUtil.applicationContext = applicationContext;\n-        }\n-    }\n-\n-    /**\n-     * 通过name获取 Bean.\n-     *\n-     * @param name name\n-     * @return Object\n-     */\n-    public static Object getBean(String name) {\n-        return getApplicationContext().getBean(name);\n-    }\n-\n-    /**\n-     * 通过class获取Bean\n-     *\n-     * @param clazz clazz\n-     * @param <T>   <T>\n-     * @return T\n-     */\n-    public static <T> T getBean(Class<T> clazz) {\n-        return getApplicationContext().getBean(clazz);\n-    }\n-}",
    "output": ":hammer: remove cron.setting and hutool-cron repository"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/listener/StartedListener.java b/src/main/java/cc/ryanc/halo/listener/StartedListener.java\n--- a/src/main/java/cc/ryanc/halo/listener/StartedListener.java\n+++ b/src/main/java/cc/ryanc/halo/listener/StartedListener.java\n@@ -14,6 +14,7 @@\n import org.springframework.context.ApplicationListener;\n import org.springframework.context.annotation.Configuration;\n \n+import javax.annotation.PreDestroy;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -53,6 +54,12 @@ public void onApplicationEvent(ApplicationStartedEvent event) {\n         log.info(\"The scheduled task starts successfully!\");\n     }\n \n+    @PreDestroy\n+    public void onDestroy() {\n+        log.info(\"Destroyed the cron scheduler\");\n+        CronUtil.stop();\n+    }\n+\n     /**\n      * 加载主题设置\n      */",
    "output": "Add application-dev.yaml for development"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/config/WebMvcAutoConfiguration.java b/src/main/java/cc/ryanc/halo/config/WebMvcAutoConfiguration.java\n--- a/src/main/java/cc/ryanc/halo/config/WebMvcAutoConfiguration.java\n+++ b/src/main/java/cc/ryanc/halo/config/WebMvcAutoConfiguration.java\n@@ -95,26 +95,6 @@ public void addResourceHandlers(ResourceHandlerRegistry registry) {\n                 .addResourceLocations(\"file:///\" + System.getProperties().getProperty(\"user.home\") + \"/halo/backup/\");\n     }\n \n-//    /**\n-//     * 跨域\n-//     *\n-//     * @param registry registry\n-//     */\n-//    @Override\n-//    public void addCorsMappings(CorsRegistry registry) {\n-//        registry.addMapping(\"/api/**\")\n-//                .allowedHeaders(\"*\")\n-//                .allowedOrigins(\"*\")\n-//                .allowedMethods(\"GET\", \"POST\")\n-//                .exposedHeaders(\"access-control-allow-headers\",\n-//                        \"access-control-allow-methods\",\n-//                        \"access-control-allow-origin\",\n-//                        \"access-control-max-age\",\n-//                        \"X-Frame-Options\",\n-//                        \"token\")\n-//                .allowCredentials(false).maxAge(3600);\n-//    }\n-\n     /**\n      * Creates a CorsFilter.\n      *\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/ThemeController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/ThemeController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/ThemeController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/ThemeController.java\n@@ -48,8 +48,6 @@\n @RequestMapping(value = \"/admin/themes\")\n public class ThemeController extends BaseController {\n \n-    private static final String NOT_FOUND_GIT = \"-bash: git: command not found\";\n-\n     @Autowired\n     private OptionsService optionsService;\n \n@@ -121,7 +119,7 @@ public JsonResult uploadTheme(@RequestParam(\"file\") MultipartFile file,\n             if (!file.isEmpty()) {\n                 //获取项目根路径\n                 final File basePath = new File(ResourceUtils.getURL(\"classpath:\").getPath());\n-                final File themePath = new File(basePath.getAbsolutePath(), new StringBuffer(\"templates/themes/\").append(file.getOriginalFilename()).toString());\n+                final File themePath = new File(basePath.getAbsolutePath(), new StrBuilder(\"templates/themes/\").append(file.getOriginalFilename()).toString());\n                 file.transferTo(themePath);\n                 log.info(\"Upload topic success, path is \" + themePath.getAbsolutePath());\n                 logsService.save(LogsRecord.UPLOAD_THEME, file.getOriginalFilename(), request);\n@@ -187,10 +185,7 @@ public JsonResult cloneFromRemote(@RequestParam(value = \"remoteAddr\") String rem\n         try {\n             final File basePath = new File(ResourceUtils.getURL(\"classpath:\").getPath());\n             final File themePath = new File(basePath.getAbsolutePath(), \"templates/themes\");\n-            final String cmdResult = RuntimeUtil.execForStr(\"git clone \" + remoteAddr + \" \" + themePath.getAbsolutePath() + \"/\" + themeName);\n-            if (NOT_FOUND_GIT.equals(cmdResult)) {\n-                return new JsonResult(ResultCodeEnum.FAIL.getCode(), localeMessageUtil.getMessage(\"code.admin.theme.no-git\"));\n-            }\n+            RuntimeUtil.execForStr(\"git clone \" + remoteAddr + \" \" + themePath.getAbsolutePath() + \"/\" + themeName);\n             THEMES.clear();\n             THEMES = HaloUtils.getThemes();\n         } catch (FileNotFoundException e) {\n@@ -212,10 +207,7 @@ public JsonResult pullFromRemote(@RequestParam(value = \"themeName\") String theme\n         try {\n             final File basePath = new File(ResourceUtils.getURL(\"classpath:\").getPath());\n             final File themePath = new File(basePath.getAbsolutePath(), \"templates/themes\");\n-            final String cmdResult = RuntimeUtil.execForStr(\"cd \" + themePath.getAbsolutePath() + \"/\" + themeName + \" && git pull\");\n-            if (NOT_FOUND_GIT.equals(cmdResult)) {\n-                return new JsonResult(ResultCodeEnum.FAIL.getCode(), localeMessageUtil.getMessage(\"code.admin.theme.no-git\"));\n-            }\n+            RuntimeUtil.execForStr(\"cd \" + themePath.getAbsolutePath() + \"/\" + themeName,\"git pull\");\n             THEMES.clear();\n             THEMES = HaloUtils.getThemes();\n         } catch (Exception e) {",
    "output": "Merge remote-tracking branch 'origin/dev' into dev"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/domain/Post.java b/src/main/java/cc/ryanc/halo/model/domain/Post.java\n--- a/src/main/java/cc/ryanc/halo/model/domain/Post.java\n+++ b/src/main/java/cc/ryanc/halo/model/domain/Post.java\n@@ -113,7 +113,6 @@ public class Post implements Serializable {\n     /**\n      * 发表日期\n      */\n-    @CreatedDate\n     private Date postDate;\n \n     /**\n@@ -171,9 +170,4 @@ public void prePersist() {\n         }\n         postId = null;\n     }\n-\n-    @PreUpdate\n-    public void preUpdate() {\n-        postUpdate = DateUtil.date();\n-    }\n }",
    "output": "Fix issue: 102"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/AttachmentController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/AttachmentController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/AttachmentController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/AttachmentController.java\n@@ -104,7 +104,7 @@ public String uploadModal() {\n      * @param request request\n      * @return Map\n      */\n-    @PostMapping(value = \"/upload\", produces = {\"application/json;charset=UTF-8\"})\n+    @PostMapping(\"/upload\")\n     @ResponseBody\n     public Map<String, Object> upload(@RequestParam(\"file\") MultipartFile file,\n                                       HttpServletRequest request) {\n@@ -206,14 +206,14 @@ public JsonResult removeAttachment(@RequestParam(\"attachId\") Long attachId,\n             }\n             if (flag) {\n                 attachmentService.removeById(attachId);\n-                log.info(\"Delete file {} successfully!\", attachName);\n+                log.info(\"Deleted attachment [{}] successfully\", attachName);\n                 logsService.save(LogsRecord.REMOVE_FILE, attachName, request);\n             } else {\n-                log.error(\"Deleting attachment {} failed!\", attachName);\n+                log.error(\"Failed to delete attachment: [{}]\", attachName);\n                 return JsonResult.fail(localeMessageUtil.getMessage(\"code.admin.common.delete-failed\"));\n             }\n         } catch (Exception e) {\n-            log.error(\"Deleting attachment \" + attachName + \" failed.\", e);\n+            log.error(\"Failed to deleted \" + attachName, e);\n \n             return JsonResult.fail(localeMessageUtil.getMessage(\"code.admin.common.delete-failed\"));\n         }\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/BackupController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/BackupController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/BackupController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/BackupController.java\n@@ -28,7 +28,7 @@\n \n import javax.servlet.http.HttpSession;\n import java.io.File;\n-import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n@@ -66,15 +66,15 @@ public class BackupController {\n      */\n     @GetMapping\n     public String backup(@RequestParam(value = \"type\", defaultValue = \"resources\") String type, Model model) {\n-        List<BackupDto> backups = null;\n+        List<BackupDto> backups;\n         if (StrUtil.equals(type, BackupTypeEnum.RESOURCES.getDesc())) {\n             backups = HaloUtils.getBackUps(BackupTypeEnum.RESOURCES.getDesc());\n         } else if (StrUtil.equals(type, BackupTypeEnum.DATABASES.getDesc())) {\n             backups = HaloUtils.getBackUps(BackupTypeEnum.DATABASES.getDesc());\n         } else if (StrUtil.equals(type, BackupTypeEnum.POSTS.getDesc())) {\n             backups = HaloUtils.getBackUps(BackupTypeEnum.POSTS.getDesc());\n         } else {\n-            backups = new ArrayList<>();\n+            backups = Collections.emptyList();\n         }\n         model.addAttribute(\"backups\", backups);\n         model.addAttribute(\"type\", type);\n@@ -92,13 +92,17 @@ public String backup(@RequestParam(value = \"type\", defaultValue = \"resources\") S\n     public JsonResult doBackup(@RequestParam(\"type\") String type) {\n         if (StrUtil.equals(BackupTypeEnum.RESOURCES.getDesc(), type)) {\n             return this.backupResources();\n-        } else if (StrUtil.equals(BackupTypeEnum.DATABASES.getDesc(), type)) {\n+        }\n+\n+        if (StrUtil.equals(BackupTypeEnum.DATABASES.getDesc(), type)) {\n             return this.backupDatabase();\n-        } else if (StrUtil.equals(BackupTypeEnum.POSTS.getDesc(), type)) {\n+        }\n+\n+        if (StrUtil.equals(BackupTypeEnum.POSTS.getDesc(), type)) {\n             return this.backupPosts();\n-        } else {\n-            return new JsonResult(ResultCodeEnum.FAIL.getCode(), localeMessageUtil.getMessage(\"code.admin.backup.backup-failed\"));\n         }\n+\n+        return JsonResult.fail(localeMessageUtil.getMessage(\"code.admin.backup.backup-failed\"));\n     }\n \n     /**\n@@ -116,10 +120,10 @@ private JsonResult backupDatabase() {\n             //压缩文件\n             ZipUtil.zip(srcPath + \"halo.mv.db\", System.getProperties().getProperty(\"user.home\") + \"/halo/backup/databases/\" + distName + \".zip\");\n             log.info(\"Current time: {}, database backup was performed.\", DateUtil.now());\n-            return new JsonResult(ResultCodeEnum.SUCCESS.getCode(), localeMessageUtil.getMessage(\"code.admin.backup.backup-success\"));\n+            return JsonResult.success(localeMessageUtil.getMessage(\"code.admin.backup.backup-success\"));\n         } catch (Exception e) {\n-            log.error(\"Backup database failed: {}\", e.getMessage());\n-            return new JsonResult(ResultCodeEnum.FAIL.getCode(), localeMessageUtil.getMessage(\"code.admin.backup.backup-failed\"));\n+            log.error(\"Failed to backup database\", e);\n+            return JsonResult.fail(localeMessageUtil.getMessage(\"code.admin.backup.backup-failed\"));\n         }\n     }\n \n@@ -139,10 +143,10 @@ private JsonResult backupResources() {\n             //执行打包\n             ZipUtil.zip(srcPath, System.getProperties().getProperty(\"user.home\") + \"/halo/backup/resources/\" + distName + \".zip\");\n             log.info(\"Current time: {}, the resource file backup was performed.\", DateUtil.now());\n-            return new JsonResult(ResultCodeEnum.SUCCESS.getCode(), localeMessageUtil.getMessage(\"code.admin.backup.backup-success\"));\n+            return JsonResult.success(localeMessageUtil.getMessage(\"code.admin.backup.backup-success\"));\n         } catch (Exception e) {\n-            log.error(\"Backup resource file failed: {}\", e.getMessage());\n-            return new JsonResult(ResultCodeEnum.FAIL.getCode(), localeMessageUtil.getMessage(\"code.admin.backup.backup-failed\"));\n+            log.error(\"Failed to backup resource file\", e);\n+            return JsonResult.fail(localeMessageUtil.getMessage(\"code.admin.backup.backup-failed\"));\n         }\n     }\n \n@@ -194,10 +198,10 @@ private JsonResult backupPosts() {\n             ZipUtil.zip(srcPath.toString(), srcPath.toString() + \".zip\");\n             FileUtil.del(srcPath.toString());\n             log.info(\"Current time: {}, performed an article backup.\", DateUtil.now());\n-            return new JsonResult(ResultCodeEnum.SUCCESS.getCode(), localeMessageUtil.getMessage(\"code.admin.backup.backup-success\"));\n+            return JsonResult.success(localeMessageUtil.getMessage(\"code.admin.backup.backup-success\"));\n         } catch (Exception e) {\n-            log.error(\"Backup article failed: {}\", e.getMessage());\n-            return new JsonResult(ResultCodeEnum.FAIL.getCode(), localeMessageUtil.getMessage(\"code.admin.backup.backup-failed\"));\n+            log.error(\"Failed to backup article\", e);\n+            return JsonResult.fail(localeMessageUtil.getMessage(\"code.admin.backup.backup-failed\"));\n         }\n     }\n \n@@ -215,9 +219,12 @@ public JsonResult delBackup(@RequestParam(\"fileName\") String fileName,\n         final String srcPath = System.getProperties().getProperty(\"user.home\") + \"/halo/backup/\" + type + \"/\" + fileName;\n         try {\n             FileUtil.del(srcPath);\n-            return new JsonResult(ResultCodeEnum.SUCCESS.getCode(), localeMessageUtil.getMessage(\"code.admin.common.delete-success\"));\n+\n+            return JsonResult.success(localeMessageUtil.getMessage(\"code.admin.common.delete-success\"));\n         } catch (Exception e) {\n-            return new JsonResult(ResultCodeEnum.FAIL.getCode(), localeMessageUtil.getMessage(\"code.admin.common.delete-failed\"));\n+            log.error(\"Failed to delete backup file: \" + fileName + \", type: \" + type, e);\n+\n+            return JsonResult.fail(localeMessageUtil.getMessage(\"code.admin.common.delete-failed\"));\n         }\n     }\n \n@@ -236,13 +243,14 @@ public JsonResult sendToEmail(@RequestParam(\"fileName\") String fileName,\n         final String srcPath = System.getProperties().getProperty(\"user.home\") + \"/halo/backup/\" + type + \"/\" + fileName;\n         final User user = (User) session.getAttribute(USER_SESSION_KEY);\n         if (null == user.getUserEmail() || StrUtil.isEmpty(user.getUserEmail())) {\n-            return new JsonResult(ResultCodeEnum.FAIL.getCode(), localeMessageUtil.getMessage(\"code.admin.backup.no-email\"));\n+            return JsonResult.fail(localeMessageUtil.getMessage(\"code.admin.backup.no-email\"));\n         }\n         if (StrUtil.equals(OPTIONS.get(BlogPropertiesEnum.SMTP_EMAIL_ENABLE.getProp()), TrueFalseEnum.FALSE.getDesc())) {\n-            return new JsonResult(ResultCodeEnum.FAIL.getCode(), localeMessageUtil.getMessage(\"code.admin.common.no-post\"));\n+            return JsonResult.fail(localeMessageUtil.getMessage(\"code.admin.common.no-post\"));\n         }\n         new EmailToAdmin(srcPath, user).start();\n-        return new JsonResult(ResultCodeEnum.SUCCESS.getCode(), localeMessageUtil.getMessage(\"code.admin.backup.email-success\"));\n+\n+        return JsonResult.success(localeMessageUtil.getMessage(\"code.admin.backup.email-success\"));\n     }\n \n     /**\n@@ -267,7 +275,7 @@ public void run() {\n                 content.put(\"size\", HaloUtils.parseSize(file.length()));\n                 mailService.sendAttachMail(user.getUserEmail(), localeMessageUtil.getMessage(\"code.admin.backup.have-new-backup\"), content, \"common/mail_template/mail_attach.ftl\", srcPath);\n             } catch (Exception e) {\n-                log.error(\"Mail server not configured: {}\", e.getMessage());\n+                log.error(\"Mail server was not configured\", e);\n             }\n         }\n     }",
    "output": "Enhance cc.ryanc.halo.web.controller.admin.BackupController"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/AttachmentController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/AttachmentController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/AttachmentController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/AttachmentController.java\n@@ -82,6 +82,7 @@ public String selectAttachment(Model model,\n         if (StrUtil.equals(type, PostTypeEnum.POST_TYPE_POST.getDesc())) {\n             return \"admin/widget/_attachment-select-post\";\n         }\n+\n         return \"admin/widget/_attachment-select\";\n     }\n \n@@ -107,7 +108,7 @@ public String uploadModal() {\n     @ResponseBody\n     public Map<String, Object> upload(@RequestParam(\"file\") MultipartFile file,\n                                       HttpServletRequest request) {\n-        final Map<String, Object> result = new HashMap<>(3);\n+        final Map<String, Object> result = new HashMap<>(4);\n         if (!file.isEmpty()) {\n             try {\n                 final Map<String, String> resultMap = attachmentService.upload(file, request);\n@@ -135,12 +136,16 @@ public Map<String, Object> upload(@RequestParam(\"file\") MultipartFile file,\n                 result.put(\"filename\", resultMap.get(\"filePath\"));\n                 logsService.save(LogsRecord.UPLOAD_FILE, resultMap.get(\"fileName\"), request);\n             } catch (Exception e) {\n-                log.error(\"Upload file failed:{}\", e.getMessage());\n+                log.error(\"Upload file failed\", e);\n                 result.put(\"success\", ResultCodeEnum.FAIL.getCode());\n                 result.put(\"message\", localeMessageUtil.getMessage(\"code.admin.attachment.upload-failed\"));\n             }\n         } else {\n-            log.error(\"File cannot be empty!\");\n+            log.error(\"File cannot be empty! File name: [{}]\", file.getOriginalFilename());\n+\n+            // Return error message\n+            result.put(\"success\", ResultCodeEnum.FAIL.getCode());\n+            result.put(\"message\", \"File cannot be empty\");\n         }\n         return result;\n     }\n@@ -205,13 +210,14 @@ public JsonResult removeAttachment(@RequestParam(\"attachId\") Long attachId,\n                 logsService.save(LogsRecord.REMOVE_FILE, attachName, request);\n             } else {\n                 log.error(\"Deleting attachment {} failed!\", attachName);\n-                return new JsonResult(ResultCodeEnum.FAIL.getCode(), localeMessageUtil.getMessage(\"code.admin.common.delete-failed\"));\n+                return JsonResult.fail(localeMessageUtil.getMessage(\"code.admin.common.delete-failed\"));\n             }\n         } catch (Exception e) {\n-            e.printStackTrace();\n-            log.error(\"Deleting attachment {} failed: {}\", attachName, e.getMessage());\n-            return new JsonResult(ResultCodeEnum.FAIL.getCode(), localeMessageUtil.getMessage(\"code.admin.common.delete-failed\"));\n+            log.error(\"Deleting attachment \" + attachName + \" failed.\", e);\n+\n+            return JsonResult.fail(localeMessageUtil.getMessage(\"code.admin.common.delete-failed\"));\n         }\n-        return new JsonResult(ResultCodeEnum.SUCCESS.getCode(), localeMessageUtil.getMessage(\"code.admin.common.delete-success\"));\n+\n+        return JsonResult.success(localeMessageUtil.getMessage(\"code.admin.common.delete-success\"));\n     }\n }",
    "output": "Enhance cc.ryanc.halo.web.controller.admin.AttachmentController"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/service/CommentService.java b/src/main/java/cc/ryanc/halo/service/CommentService.java\n--- a/src/main/java/cc/ryanc/halo/service/CommentService.java\n+++ b/src/main/java/cc/ryanc/halo/service/CommentService.java\n@@ -19,15 +19,6 @@\n  */\n public interface CommentService extends CrudService<Comment, Long> {\n \n-    /**\n-     * 删除评论\n-     *\n-     * @param commentId commentId\n-     * @return Optional\n-     */\n-    @Deprecated\n-    Optional<Comment> remove(Long commentId);\n-\n     /**\n      * 查询所有的评论，用于后台管理\n      *\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/CommentServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/CommentServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/CommentServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/CommentServiceImpl.java\n@@ -48,20 +48,6 @@ public Comment create(Comment comment) {\n         return super.create(comment);\n     }\n \n-    /**\n-     * 删除评论\n-     *\n-     * @param commentId commentId\n-     * @return Optional\n-     */\n-    @Override\n-    @CacheEvict(value = {COMMENTS_CACHE_NAME, POSTS_CACHE_NAME}, allEntries = true, beforeInvocation = true)\n-    public Optional<Comment> remove(Long commentId) {\n-        final Optional<Comment> comment = this.fetchById(commentId);\n-        commentRepository.delete(comment.orElse(null));\n-        return comment;\n-    }\n-\n     /**\n      * 查询所有的评论，用于后台管理\n      *\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/CommentController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/CommentController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/CommentController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/CommentController.java\n@@ -128,7 +128,7 @@ public String moveToAway(@RequestParam(\"commentId\") Long commentId,\n                              @RequestParam(\"status\") Integer status,\n                              @PageableDefault Pageable pageable) {\n         try {\n-            commentService.remove(commentId);\n+            commentService.removeById(commentId);\n         } catch (Exception e) {\n             log.error(\"Delete comment failed: {}\", e.getMessage());\n         }",
    "output": "Remove deprecated method(remove) in CommentService"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/domain/Comment.java b/src/main/java/cc/ryanc/halo/model/domain/Comment.java\n--- a/src/main/java/cc/ryanc/halo/model/domain/Comment.java\n+++ b/src/main/java/cc/ryanc/halo/model/domain/Comment.java\n@@ -1,5 +1,6 @@\n package cc.ryanc.halo.model.domain;\n \n+import com.fasterxml.jackson.annotation.JsonFormat;\n import com.fasterxml.jackson.annotation.JsonIgnore;\n import lombok.Data;\n import org.springframework.data.annotation.CreatedDate;\n@@ -111,4 +112,9 @@ public class Comment implements Serializable {\n      */\n     @Transient\n     private List<Comment> childComments;\n+\n+    @JsonFormat(pattern = \"yyyy-MM-dd HH:mm\")\n+    public Date getCommentDate() {\n+        return commentDate;\n+    }\n }",
    "output": ":bug: #91"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/web/controller/api/ApiPostController.java b/src/main/java/cc/ryanc/halo/web/controller/api/ApiPostController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/api/ApiPostController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/api/ApiPostController.java\n@@ -1,5 +1,6 @@\n package cc.ryanc.halo.web.controller.api;\n \n+import cc.ryanc.halo.exception.NotFoundException;\n import cc.ryanc.halo.model.domain.Post;\n import cc.ryanc.halo.model.dto.JsonResult;\n import cc.ryanc.halo.model.enums.BlogPropertiesEnum;\n@@ -150,13 +151,16 @@ public JsonResult posts(@PathVariable(value = \"page\") Integer page, @SortDefault\n      * @return JsonResult\n      */\n     @GetMapping(value = \"/{postId}\")\n-    public JsonResult posts(@PathVariable(value = \"postId\") Long postId) {\n+    public Post posts(@PathVariable(value = \"postId\") Long postId) {\n         final Post post = postService.findByPostId(postId, PostTypeEnum.POST_TYPE_POST.getDesc());\n-        if (null != post) {\n-            postService.cacheViews(post.getPostId());\n-            return new JsonResult(ResponseStatusEnum.SUCCESS.getCode(), ResponseStatusEnum.SUCCESS.getMsg(), post);\n-        } else {\n-            return new JsonResult(ResponseStatusEnum.NOTFOUND.getCode(), ResponseStatusEnum.NOTFOUND.getMsg());\n+\n+        if (post == null) {\n+            throw new NotFoundException(\"Post with id: \" + postId + \" was not found\").setErrorData(postId);\n         }\n+\n+        // Cache views\n+        postService.cacheViews(post.getPostId());\n+\n+        return post;\n     }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/api/ApiTagController.java b/src/main/java/cc/ryanc/halo/web/controller/api/ApiTagController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/api/ApiTagController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/api/ApiTagController.java\n@@ -1,5 +1,6 @@\n package cc.ryanc.halo.web.controller.api;\n \n+import cc.ryanc.halo.exception.NotFoundException;\n import cc.ryanc.halo.model.domain.Tag;\n import cc.ryanc.halo.model.dto.JsonResult;\n import cc.ryanc.halo.model.enums.ResponseStatusEnum;\n@@ -78,12 +79,13 @@ public JsonResult tags() {\n      * @return JsonResult\n      */\n     @GetMapping(value = \"/{tagUrl}\")\n-    public JsonResult tags(@PathVariable(\"tagUrl\") String tagUrl) {\n+    public Tag tags(@PathVariable(\"tagUrl\") String tagUrl) {\n         final Tag tag = tagService.findByTagUrl(tagUrl);\n-        if (null != tag) {\n-            return new JsonResult(ResponseStatusEnum.SUCCESS.getCode(), ResponseStatusEnum.SUCCESS.getMsg(), tag);\n-        } else {\n-            return new JsonResult(ResponseStatusEnum.NOTFOUND.getCode(), ResponseStatusEnum.NOTFOUND.getMsg());\n+\n+        if (tag == null) {\n+            throw new NotFoundException(\"Tag with url: \" + tagUrl + \" was not found\");\n         }\n+\n+        return tag;\n     }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/api/ApiUserController.java b/src/main/java/cc/ryanc/halo/web/controller/api/ApiUserController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/api/ApiUserController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/api/ApiUserController.java\n@@ -1,8 +1,6 @@\n package cc.ryanc.halo.web.controller.api;\n \n import cc.ryanc.halo.model.domain.User;\n-import cc.ryanc.halo.model.dto.JsonResult;\n-import cc.ryanc.halo.model.enums.ResponseStatusEnum;\n import cc.ryanc.halo.service.UserService;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.web.bind.annotation.GetMapping;\n@@ -47,8 +45,7 @@ public class ApiUserController {\n      * @return JsonResult\n      */\n     @GetMapping\n-    public JsonResult user() {\n-        final User user = userService.findUser();\n-        return new JsonResult(ResponseStatusEnum.SUCCESS.getCode(), ResponseStatusEnum.SUCCESS.getMsg(), user);\n+    public User user() {\n+        return userService.findUser();\n     }\n }",
    "output": "Refactor the rest controllers"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/web/controller/api/ApiPageController.java b/src/main/java/cc/ryanc/halo/web/controller/api/ApiPageController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/api/ApiPageController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/api/ApiPageController.java\n@@ -1,5 +1,6 @@\n package cc.ryanc.halo.web.controller.api;\n \n+import cc.ryanc.halo.exception.NotFoundException;\n import cc.ryanc.halo.model.domain.Post;\n import cc.ryanc.halo.model.dto.JsonResult;\n import cc.ryanc.halo.model.enums.PostTypeEnum;\n@@ -60,13 +61,15 @@ public class ApiPageController {\n      * @return JsonResult\n      */\n     @GetMapping(value = \"/{postId}\")\n-    public JsonResult pages(@PathVariable(value = \"postId\") Long postId) {\n+    public Post pages(@PathVariable(value = \"postId\") Long postId) {\n         final Post post = postService.findByPostId(postId, PostTypeEnum.POST_TYPE_PAGE.getDesc());\n-        if (null != post) {\n-            postService.cacheViews(post.getPostId());\n-            return new JsonResult(ResponseStatusEnum.SUCCESS.getCode(), ResponseStatusEnum.SUCCESS.getMsg(), post);\n-        } else {\n-            return new JsonResult(ResponseStatusEnum.NOTFOUND.getCode(), ResponseStatusEnum.NOTFOUND.getMsg());\n+        if (post == null) {\n+            throw new NotFoundException(\"Post with id: \" + postId + \" was not found\").setErrorData(postId);\n         }\n+\n+        // Cache views\n+        postService.cacheViews(postId);\n+\n+        return post;\n     }\n }",
    "output": "Refactor ApiPageController"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/web/controller/api/ApiOptionController.java b/src/main/java/cc/ryanc/halo/web/controller/api/ApiOptionController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/api/ApiOptionController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/api/ApiOptionController.java\n@@ -5,6 +5,7 @@\n import cc.ryanc.halo.model.enums.ResponseStatusEnum;\n import cc.ryanc.halo.service.OptionsService;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n import org.springframework.web.bind.annotation.*;\n \n import java.util.Map;\n@@ -55,9 +56,8 @@ public class ApiOptionController {\n      * @return JsonResult\n      */\n     @GetMapping\n-    public JsonResult options() {\n-        final Map<String, String> options = optionsService.findAllOptions();\n-        return new JsonResult(ResponseStatusEnum.SUCCESS.getCode(), ResponseStatusEnum.SUCCESS.getMsg(), options);\n+    public Map<String, String> options() {\n+        return optionsService.findAllOptions();\n     }\n \n     /**\n@@ -79,7 +79,6 @@ public JsonResult options() {\n      */\n     @GetMapping(value = \"/one\")\n     public JsonResult option(@RequestParam(value = \"optionName\") String optionName) {\n-        final String optionValue = optionsService.findOneOption(optionName);\n-        return new JsonResult(ResponseStatusEnum.SUCCESS.getCode(), ResponseStatusEnum.SUCCESS.getMsg(), optionValue);\n+        return new JsonResult(HttpStatus.OK.value(), HttpStatus.OK.getReasonPhrase(), optionsService.findOneOption(optionName));\n     }\n }",
    "output": "Refactor ApiOptionController"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/web/controller/api/ApiMenuController.java b/src/main/java/cc/ryanc/halo/web/controller/api/ApiMenuController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/api/ApiMenuController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/api/ApiMenuController.java\n@@ -1,11 +1,8 @@\n package cc.ryanc.halo.web.controller.api;\n \n import cc.ryanc.halo.model.domain.Menu;\n-import cc.ryanc.halo.model.dto.JsonResult;\n-import cc.ryanc.halo.model.enums.ResponseStatusEnum;\n import cc.ryanc.halo.service.MenuService;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.web.bind.annotation.CrossOrigin;\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RestController;\n@@ -53,12 +50,7 @@ public class ApiMenuController {\n      * @return JsonResult\n      */\n     @GetMapping\n-    public JsonResult menus() {\n-        final List<Menu> menus = menuService.listAll();\n-        if (null != menus && menus.size() > 0) {\n-            return new JsonResult(ResponseStatusEnum.SUCCESS.getCode(), ResponseStatusEnum.SUCCESS.getMsg(), menus);\n-        } else {\n-            return new JsonResult(ResponseStatusEnum.EMPTY.getCode(), ResponseStatusEnum.EMPTY.getMsg());\n-        }\n+    public List<Menu> menus() {\n+        return menuService.listAll();\n     }\n }",
    "output": "Refactor ApiMenuController"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/web/controller/api/ApiLinkController.java b/src/main/java/cc/ryanc/halo/web/controller/api/ApiLinkController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/api/ApiLinkController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/api/ApiLinkController.java\n@@ -52,12 +52,7 @@ public class ApiLinkController {\n      * @return JsonResult\n      */\n     @GetMapping\n-    public JsonResult links() {\n-        final List<Link> links = linkService.listAll();\n-        if (null != links && links.size() > 0) {\n-            return new JsonResult(ResponseStatusEnum.SUCCESS.getCode(), ResponseStatusEnum.SUCCESS.getMsg(), links);\n-        } else {\n-            return new JsonResult(ResponseStatusEnum.EMPTY.getCode(), ResponseStatusEnum.EMPTY.getMsg());\n-        }\n+    public List<Link> links() {\n+        return linkService.listAll();\n     }\n }",
    "output": "Refactor ApiLinkController"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/web/controller/api/ApiGalleryController.java b/src/main/java/cc/ryanc/halo/web/controller/api/ApiGalleryController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/api/ApiGalleryController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/api/ApiGalleryController.java\n@@ -52,13 +52,8 @@ public class ApiGalleryController {\n      * @return JsonResult\n      */\n     @GetMapping\n-    public JsonResult galleries() {\n-        final List<Gallery> galleries = galleryService.listAll();\n-        if (null != galleries && galleries.size() > 0) {\n-            return new JsonResult(ResponseStatusEnum.SUCCESS.getCode(), ResponseStatusEnum.SUCCESS.getMsg(), galleries);\n-        } else {\n-            return new JsonResult(ResponseStatusEnum.EMPTY.getCode(), ResponseStatusEnum.EMPTY.getMsg());\n-        }\n+    public List<Gallery> galleries() {\n+        return galleryService.listAll();\n     }\n \n     /**\n@@ -89,12 +84,7 @@ public JsonResult galleries() {\n      * @return JsonResult\n      */\n     @GetMapping(value = \"/{id}\")\n-    public JsonResult galleries(@PathVariable(\"id\") Long id) {\n-        final Optional<Gallery> gallery = galleryService.fetchById(id);\n-        if (gallery.isPresent()) {\n-            return new JsonResult(ResponseStatusEnum.SUCCESS.getCode(), ResponseStatusEnum.SUCCESS.getMsg(), gallery.get());\n-        } else {\n-            return new JsonResult(ResponseStatusEnum.NOTFOUND.getCode(), ResponseStatusEnum.NOTFOUND.getMsg());\n-        }\n+    public Gallery galleries(@PathVariable(\"id\") Long id) {\n+        return galleryService.getById(id);\n     }\n }",
    "output": "Refactor ApiGalleryController"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/web/controller/api/ApiCommentController.java b/src/main/java/cc/ryanc/halo/web/controller/api/ApiCommentController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/api/ApiCommentController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/api/ApiCommentController.java\n@@ -1,10 +1,11 @@\n package cc.ryanc.halo.web.controller.api;\n \n+import cc.ryanc.halo.exception.BadRequestException;\n+import cc.ryanc.halo.logging.Logger;\n import cc.ryanc.halo.model.domain.Comment;\n import cc.ryanc.halo.model.domain.Post;\n import cc.ryanc.halo.model.dto.JsonResult;\n import cc.ryanc.halo.model.enums.BlogPropertiesEnum;\n-import cc.ryanc.halo.model.enums.ResponseStatusEnum;\n import cc.ryanc.halo.model.enums.TrueFalseEnum;\n import cc.ryanc.halo.service.CommentService;\n import cc.ryanc.halo.service.PostService;\n@@ -16,8 +17,7 @@\n import cn.hutool.extra.servlet.ServletUtil;\n import cn.hutool.http.HtmlUtil;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.validation.BindingResult;\n-import org.springframework.validation.ObjectError;\n+import org.springframework.http.HttpStatus;\n import org.springframework.web.bind.annotation.*;\n \n import javax.servlet.http.HttpServletRequest;\n@@ -37,6 +37,8 @@\n @RequestMapping(value = \"/api/comments\")\n public class ApiCommentController {\n \n+    private final Logger log = Logger.getLogger(getClass());\n+\n     @Autowired\n     private CommentService commentService;\n \n@@ -47,22 +49,15 @@ public class ApiCommentController {\n      * 新增评论\n      *\n      * @param comment comment\n-     * @param result  result\n      * @param postId  postId\n      * @param request request\n      * @return JsonResult\n      */\n     @PostMapping(value = \"/save\")\n     @ResponseBody\n     public JsonResult save(@Valid Comment comment,\n-                           BindingResult result,\n                            @RequestParam(value = \"postId\") Long postId,\n                            HttpServletRequest request) {\n-        if (result.hasErrors()) {\n-            for (ObjectError error : result.getAllErrors()) {\n-                return new JsonResult(ResponseStatusEnum.ERROR.getCode(), error.getDefaultMessage());\n-            }\n-        }\n         try {\n             Comment lastComment = null;\n             final Post post = postService.fetchById(postId).orElse(new Post());\n@@ -92,12 +87,12 @@ public JsonResult save(@Valid Comment comment,\n             }\n             commentService.create(comment);\n             if (StrUtil.equals(OPTIONS.get(BlogPropertiesEnum.NEW_COMMENT_NEED_CHECK.getProp()), TrueFalseEnum.TRUE.getDesc()) || OPTIONS.get(BlogPropertiesEnum.NEW_COMMENT_NEED_CHECK.getProp()) == null) {\n-                return new JsonResult(ResponseStatusEnum.SUCCESS.getCode(), \"你的评论已经提交，待博主审核之后可显示。\");\n+                return new JsonResult(HttpStatus.OK.value(), \"你的评论已经提交，待博主审核之后可显示。\");\n             } else {\n-                return new JsonResult(ResponseStatusEnum.SUCCESS.getCode(), \"你的评论已经提交，刷新后即可显示。\");\n+                return new JsonResult(HttpStatus.OK.value(), \"你的评论已经提交，刷新后即可显示。\");\n             }\n         } catch (Exception e) {\n-            return new JsonResult(ResponseStatusEnum.ERROR.getCode(), \"评论失败！\");\n+            throw new BadRequestException(\"评论失败！\", e);\n         }\n     }\n }",
    "output": "Refactor ApiCommentController"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/web/controller/api/ApiCategoryController.java b/src/main/java/cc/ryanc/halo/web/controller/api/ApiCategoryController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/api/ApiCategoryController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/api/ApiCategoryController.java\n@@ -1,8 +1,6 @@\n package cc.ryanc.halo.web.controller.api;\n \n import cc.ryanc.halo.model.domain.Category;\n-import cc.ryanc.halo.model.dto.JsonResult;\n-import cc.ryanc.halo.model.enums.ResponseStatusEnum;\n import cc.ryanc.halo.service.CategoryService;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.web.bind.annotation.*;\n@@ -48,13 +46,8 @@ public class ApiCategoryController {\n      * @return JsonResult\n      */\n     @GetMapping\n-    public JsonResult categories() {\n-        List<Category> categories = categoryService.listAll();\n-        if (null != categories && categories.size() > 0) {\n-            return new JsonResult(ResponseStatusEnum.SUCCESS.getCode(), ResponseStatusEnum.SUCCESS.getMsg(), categories);\n-        } else {\n-            return new JsonResult(ResponseStatusEnum.EMPTY.getCode(), ResponseStatusEnum.EMPTY.getMsg());\n-        }\n+    public List<Category> categories() {\n+        return categoryService.listAll();\n     }\n \n     /**\n@@ -80,12 +73,7 @@ public JsonResult categories() {\n      * @return JsonResult\n      */\n     @GetMapping(value = \"/{cateUrl}\")\n-    public JsonResult categories(@PathVariable(\"cateUrl\") String cateUrl) {\n-        final Category category = categoryService.findByCateUrl(cateUrl);\n-        if (null != category) {\n-            return new JsonResult(ResponseStatusEnum.SUCCESS.getCode(), ResponseStatusEnum.SUCCESS.getMsg(), category);\n-        } else {\n-            return new JsonResult(ResponseStatusEnum.EMPTY.getCode(), ResponseStatusEnum.EMPTY.getMsg());\n-        }\n+    public Category categories(@PathVariable(\"cateUrl\") String cateUrl) {\n+        return categoryService.findByCateUrl(cateUrl);\n     }\n }",
    "output": "Refactor ApiCategoryController"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/dto/JsonResult.java b/src/main/java/cc/ryanc/halo/model/dto/JsonResult.java\n--- a/src/main/java/cc/ryanc/halo/model/dto/JsonResult.java\n+++ b/src/main/java/cc/ryanc/halo/model/dto/JsonResult.java\n@@ -23,11 +23,19 @@ public class JsonResult {\n      */\n     private String msg;\n \n+    /**\n+     * Dev message.(only setting in dev environment)\n+     */\n+    private String devMsg;\n+\n     /**\n      * 返回的数据\n      */\n     private Object result;\n \n+    public JsonResult() {\n+    }\n+\n     /**\n      * 只返回状态码\n      *\n@@ -71,4 +79,11 @@ public JsonResult(Integer code, Object result) {\n         this.code = code;\n         this.result = result;\n     }\n+\n+    public JsonResult(Integer code, String msg, String devMsg, Object result) {\n+        this.code = code;\n+        this.msg = msg;\n+        this.devMsg = devMsg;\n+        this.result = result;\n+    }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/utils/ExceptionUtils.java b/src/main/java/cc/ryanc/halo/utils/ExceptionUtils.java\n--- a/src/main/java/cc/ryanc/halo/utils/ExceptionUtils.java\n+++ b/src/main/java/cc/ryanc/halo/utils/ExceptionUtils.java\n@@ -0,0 +1,33 @@\n+package cc.ryanc.halo.utils;\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+\n+/**\n+ * Exception utilities.\n+ * <p>Part from apache commons lang3 project.</p>\n+ *\n+ * @author johnniang\n+ * @see \"org.apache.commons.lang3.exception.ExceptionUtils\"\n+ */\n+public class ExceptionUtils {\n+\n+    /**\n+     * <p>Gets the stack trace from a Throwable as a String.</p>\n+     *\n+     * <p>The result of this method vary by JDK version as this method\n+     * uses {@link Throwable#printStackTrace(java.io.PrintWriter)}.\n+     * On JDK1.3 and earlier, the cause exception will not be shown\n+     * unless the specified throwable alters printStackTrace.</p>\n+     *\n+     * @param throwable the <code>Throwable</code> to be examined\n+     * @return the stack trace as generated by the exception's\n+     * <code>printStackTrace(PrintWriter)</code> method\n+     */\n+    public static String getStackTrace(final Throwable throwable) {\n+        final StringWriter sw = new StringWriter();\n+        final PrintWriter pw = new PrintWriter(sw, true);\n+        throwable.printStackTrace(pw);\n+        return sw.getBuffer().toString();\n+    }\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/base/ControllerExceptionHandler.java b/src/main/java/cc/ryanc/halo/web/controller/base/ControllerExceptionHandler.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/base/ControllerExceptionHandler.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/base/ControllerExceptionHandler.java\n@@ -0,0 +1,113 @@\n+package cc.ryanc.halo.web.controller.base;\n+\n+import cc.ryanc.halo.exception.HaloException;\n+import cc.ryanc.halo.logging.Logger;\n+import cc.ryanc.halo.model.dto.JsonResult;\n+import cc.ryanc.halo.utils.ExceptionUtils;\n+import cc.ryanc.halo.utils.ValidationUtils;\n+import org.springframework.dao.DataIntegrityViolationException;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.util.Assert;\n+import org.springframework.web.bind.MethodArgumentNotValidException;\n+import org.springframework.web.bind.MissingServletRequestParameterException;\n+import org.springframework.web.bind.annotation.ExceptionHandler;\n+import org.springframework.web.bind.annotation.ResponseStatus;\n+import org.springframework.web.bind.annotation.RestControllerAdvice;\n+import org.springframework.web.servlet.NoHandlerFoundException;\n+\n+import javax.validation.ConstraintViolationException;\n+import java.util.Map;\n+\n+/**\n+ * Exception handler of controller.\n+ */\n+@RestControllerAdvice\n+public class ControllerExceptionHandler {\n+\n+    private final Logger log = Logger.getLogger(getClass());\n+\n+    @ExceptionHandler(DataIntegrityViolationException.class)\n+    @ResponseStatus(HttpStatus.BAD_REQUEST)\n+    public JsonResult handleDataIntegrityViolationException(DataIntegrityViolationException e) {\n+        JsonResult jsonResult = handleBaseException(e);\n+        if (e.getCause() instanceof org.hibernate.exception.ConstraintViolationException) {\n+            jsonResult = handleBaseException(e.getCause());\n+        }\n+        jsonResult.setMsg(\"Failed to validate request parameter\");\n+        return jsonResult;\n+    }\n+\n+    @ExceptionHandler(MissingServletRequestParameterException.class)\n+    @ResponseStatus(HttpStatus.BAD_REQUEST)\n+    public JsonResult handleMissingServletRequestParameterException(MissingServletRequestParameterException e) {\n+        JsonResult jsonResult = handleBaseException(e);\n+        jsonResult.setMsg(String.format(\"Missing request parameter, required %s type %s parameter\", e.getParameterType(), e.getParameterName()));\n+        return jsonResult;\n+    }\n+\n+    @ExceptionHandler(ConstraintViolationException.class)\n+    @ResponseStatus(HttpStatus.BAD_REQUEST)\n+    public JsonResult handleConstraintViolationException(ConstraintViolationException e) {\n+        JsonResult jsonResult = handleBaseException(e);\n+        jsonResult.setCode(HttpStatus.BAD_REQUEST.value());\n+        jsonResult.setMsg(\"Filed validation error\");\n+        jsonResult.setResult(e.getConstraintViolations());\n+        return jsonResult;\n+    }\n+\n+    @ExceptionHandler(MethodArgumentNotValidException.class)\n+    @ResponseStatus(HttpStatus.BAD_REQUEST)\n+    public JsonResult handleMethodArgumentNotValidException(MethodArgumentNotValidException e) {\n+        JsonResult jsonResult = handleBaseException(e);\n+        jsonResult.setCode(HttpStatus.BAD_REQUEST.value());\n+        jsonResult.setMsg(\"Filed validation error\");\n+        Map<String, String> errMap = ValidationUtils.mapWithFieldError(e.getBindingResult().getFieldErrors());\n+        jsonResult.setResult(errMap);\n+        return jsonResult;\n+    }\n+\n+    @ExceptionHandler(NoHandlerFoundException.class)\n+    @ResponseStatus(HttpStatus.BAD_GATEWAY)\n+    public JsonResult handleNoHandlerFoundException(NoHandlerFoundException e) {\n+        JsonResult jsonResult = handleBaseException(e);\n+        HttpStatus status = HttpStatus.BAD_GATEWAY;\n+        jsonResult.setCode(status.value());\n+        jsonResult.setMsg(status.getReasonPhrase());\n+        return jsonResult;\n+    }\n+\n+    @ExceptionHandler(HaloException.class)\n+    public ResponseEntity<JsonResult> handleHaloException(HaloException e) {\n+        JsonResult jsonResult = handleBaseException(e);\n+        jsonResult.setCode(e.getStatus().value());\n+        jsonResult.setResult(e.getErrorData());\n+        return new ResponseEntity<>(jsonResult, e.getStatus());\n+    }\n+\n+    @ExceptionHandler(Exception.class)\n+    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)\n+    public JsonResult handleGlobalException(Exception e) {\n+        JsonResult jsonResult = handleBaseException(e);\n+        HttpStatus status = HttpStatus.INTERNAL_SERVER_ERROR;\n+        jsonResult.setCode(status.value());\n+        jsonResult.setMsg(status.getReasonPhrase());\n+        return jsonResult;\n+    }\n+\n+    private JsonResult handleBaseException(Throwable t) {\n+        Assert.notNull(t, \"Throwable must not be null\");\n+\n+        log.error(\"Captured an exception\", t);\n+\n+        JsonResult jsonResult = new JsonResult();\n+        jsonResult.setMsg(t.getMessage());\n+\n+        if (log.isDebugEnabled()) {\n+            jsonResult.setDevMsg(ExceptionUtils.getStackTrace(t));\n+        }\n+\n+        return jsonResult;\n+    }\n+\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/interceptor/ApiInterceptor.java b/src/main/java/cc/ryanc/halo/web/interceptor/ApiInterceptor.java\n--- a/src/main/java/cc/ryanc/halo/web/interceptor/ApiInterceptor.java\n+++ b/src/main/java/cc/ryanc/halo/web/interceptor/ApiInterceptor.java\n@@ -4,6 +4,7 @@\n import cc.ryanc.halo.model.enums.TrueFalseEnum;\n import cn.hutool.core.util.StrUtil;\n import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n import org.springframework.web.servlet.HandlerInterceptor;\n import org.springframework.web.servlet.ModelAndView;\n@@ -28,6 +29,12 @@ public class ApiInterceptor implements HandlerInterceptor {\n \n     private static final String TOKEN = \"token\";\n \n+    private final ObjectMapper objectMapper;\n+\n+    public ApiInterceptor(ObjectMapper objectMapper) {\n+        this.objectMapper = objectMapper;\n+    }\n+\n     @Override\n     public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n         if (StrUtil.equals(TrueFalseEnum.TRUE.getDesc(), OPTIONS.get(BlogPropertiesEnum.API_STATUS.getProp()))) {\n@@ -37,10 +44,9 @@ public boolean preHandle(HttpServletRequest request, HttpServletResponse respons\n                 response.setCharacterEncoding(\"UTF-8\");\n                 response.setContentType(\"application/json;charset=utf-8\");\n                 Map<String, Object> map = new HashMap<>(2);\n-                ObjectMapper mapper = new ObjectMapper();\n-                map.put(\"code\", 400);\n+                map.put(\"code\", HttpStatus.BAD_REQUEST.value());\n                 map.put(\"msg\", \"Invalid Token\");\n-                response.getWriter().write(mapper.writeValueAsString(map));\n+                response.getWriter().write(objectMapper.writeValueAsString(map));\n                 return false;\n             }\n         }",
    "output": "Complete ControllerExceptionHandler"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/utils/ValidationUtils.java b/src/main/java/cc/ryanc/halo/utils/ValidationUtils.java\n--- a/src/main/java/cc/ryanc/halo/utils/ValidationUtils.java\n+++ b/src/main/java/cc/ryanc/halo/utils/ValidationUtils.java\n@@ -0,0 +1,93 @@\n+package cc.ryanc.halo.utils;\n+\n+import org.springframework.util.CollectionUtils;\n+import org.springframework.validation.FieldError;\n+\n+import javax.validation.ConstraintViolation;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * 有关字段验证的工具类\n+ *\n+ * @author johnniang\n+ */\n+public class ValidationUtils {\n+\n+    private ValidationUtils() {\n+    }\n+\n+    /**\n+     * 将字段验证错误转换为标准的map型，key:value = field:message\n+     *\n+     * @param constraintViolations constraint violations(contain error information)\n+     * @return 如果返回null则未出现错误\n+     */\n+    public static Map<String, String> mapWithValidError(Set<ConstraintViolation<Object>> constraintViolations) {\n+        Map<String, String> errMap = null;\n+        if (!CollectionUtils.isEmpty(constraintViolations)) {\n+            // if not empty\n+            errMap = new HashMap<>(4);\n+            for (ConstraintViolation<Object> constraintViolation : constraintViolations) {\n+                errMap.put(constraintViolation.getPropertyPath().toString(), constraintViolation.getMessage());\n+            }\n+        }\n+        return errMap;\n+    }\n+\n+    public static String stringWithValidError(Set<ConstraintViolation<?>> violations, boolean allError) {\n+        StringBuilder errString = new StringBuilder();\n+        if (!CollectionUtils.isEmpty(violations)) {\n+            for (ConstraintViolation<?> violation : violations) {\n+                if (errString.length() > 0) {\n+                    errString.append(\",\");\n+                }\n+                errString.append(violation.getMessage());\n+                if (!allError && errString.length() > 0) {\n+                    return errString.toString();\n+                }\n+            }\n+        }\n+        return errString.toString();\n+    }\n+\n+    /**\n+     * 将字段验证错误转换为标准的map型，key:value = field:message\n+     *\n+     * @param fieldErrors 字段错误组\n+     * @return 如果返回null，则表示未出现错误\n+     */\n+    public static Map<String, String> mapWithFieldError(List<FieldError> fieldErrors) {\n+        Map<String, String> errMap = null;\n+\n+        if (!CollectionUtils.isEmpty(fieldErrors)) {\n+            // 如果不为空\n+            errMap = new HashMap<>(4);\n+            for (FieldError fieldError : fieldErrors) {\n+                errMap.put(fieldError.getField(), fieldError.getDefaultMessage());\n+            }\n+        }\n+\n+        return errMap;\n+    }\n+\n+    public static String stringWithFieldError(List<FieldError> fieldErrors, boolean allError) {\n+        StringBuilder errString = new StringBuilder();\n+        if (!CollectionUtils.isEmpty(fieldErrors)) {\n+            // 如果不为空\n+            for (FieldError fieldError : fieldErrors) {\n+                if (errString.length() > 0) {\n+                    errString.append(\",\");\n+                }\n+                errString.append(fieldError.getField()).append(\":\").append(fieldError.getDefaultMessage());\n+                if (!allError && errString.length() > 0) {\n+                    return errString.toString();\n+                }\n+            }\n+        }\n+\n+        return errString.toString();\n+    }\n+}\n\\ No newline at end of file",
    "output": "Add ValidationUtils"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/web/controller/api/ApiArchivesController.java b/src/main/java/cc/ryanc/halo/web/controller/api/ApiArchivesController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/api/ApiArchivesController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/api/ApiArchivesController.java\n@@ -20,7 +20,6 @@\n  * @author : RYAN0UP\n  * @date : 2018/6/6\n  */\n-@CrossOrigin\n @RestController\n @RequestMapping(value = \"/api/archives\")\n public class ApiArchivesController {\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/api/ApiCategoryController.java b/src/main/java/cc/ryanc/halo/web/controller/api/ApiCategoryController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/api/ApiCategoryController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/api/ApiCategoryController.java\n@@ -17,7 +17,6 @@\n  * @author : RYAN0UP\n  * @date : 2018/6/6\n  */\n-@CrossOrigin\n @RestController\n @RequestMapping(value = \"/api/categories\")\n public class ApiCategoryController {\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/api/ApiCommentController.java b/src/main/java/cc/ryanc/halo/web/controller/api/ApiCommentController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/api/ApiCommentController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/api/ApiCommentController.java\n@@ -33,7 +33,6 @@\n  * @author : RYAN0UP\n  * @date : 2018/6/6\n  */\n-@CrossOrigin\n @RestController\n @RequestMapping(value = \"/api/comments\")\n public class ApiCommentController {\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/api/ApiGalleryController.java b/src/main/java/cc/ryanc/halo/web/controller/api/ApiGalleryController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/api/ApiGalleryController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/api/ApiGalleryController.java\n@@ -18,7 +18,6 @@\n  * @author : RYAN0UP\n  * @date : 2018/6/6\n  */\n-@CrossOrigin\n @RestController\n @RequestMapping(value = \"/api/galleries\")\n public class ApiGalleryController {\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/api/ApiLinkController.java b/src/main/java/cc/ryanc/halo/web/controller/api/ApiLinkController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/api/ApiLinkController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/api/ApiLinkController.java\n@@ -20,7 +20,6 @@\n  * @author : RYAN0UP\n  * @date : 2018/6/6\n  */\n-@CrossOrigin\n @RestController\n @RequestMapping(value = \"/api/links\")\n public class ApiLinkController {\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/api/ApiMenuController.java b/src/main/java/cc/ryanc/halo/web/controller/api/ApiMenuController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/api/ApiMenuController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/api/ApiMenuController.java\n@@ -20,7 +20,6 @@\n  * @author : RYAN0UP\n  * @date : 2018/6/6\n  */\n-@CrossOrigin\n @RestController\n @RequestMapping(value = \"/api/menus\")\n public class ApiMenuController {\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/api/ApiOptionController.java b/src/main/java/cc/ryanc/halo/web/controller/api/ApiOptionController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/api/ApiOptionController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/api/ApiOptionController.java\n@@ -17,7 +17,6 @@\n  * @author : RYAN0UP\n  * @date : 2018/7/19\n  */\n-@CrossOrigin\n @RestController\n @RequestMapping(value = \"/api/options\")\n public class ApiOptionController {\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/api/ApiPageController.java b/src/main/java/cc/ryanc/halo/web/controller/api/ApiPageController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/api/ApiPageController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/api/ApiPageController.java\n@@ -16,7 +16,6 @@\n  * @author : RYAN0UP\n  * @date : 2018/6/6\n  */\n-@CrossOrigin\n @RestController\n @RequestMapping(value = \"/api/pages\")\n public class ApiPageController {\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/api/ApiPostController.java b/src/main/java/cc/ryanc/halo/web/controller/api/ApiPostController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/api/ApiPostController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/api/ApiPostController.java\n@@ -27,7 +27,6 @@\n  * @author : RYAN0UP\n  * @date : 2018/6/6\n  */\n-@CrossOrigin\n @RestController\n @RequestMapping(value = \"/api/posts\")\n public class ApiPostController {\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/api/ApiTagController.java b/src/main/java/cc/ryanc/halo/web/controller/api/ApiTagController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/api/ApiTagController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/api/ApiTagController.java\n@@ -18,7 +18,6 @@\n  * @date : 2018/6/6\n  */\n @CrossOrigin\n-@RestController\n @RequestMapping(value = \"/api/tags\")\n public class ApiTagController {\n \n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/api/ApiUserController.java b/src/main/java/cc/ryanc/halo/web/controller/api/ApiUserController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/api/ApiUserController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/api/ApiUserController.java\n@@ -5,7 +5,6 @@\n import cc.ryanc.halo.model.enums.ResponseStatusEnum;\n import cc.ryanc.halo.service.UserService;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.web.bind.annotation.CrossOrigin;\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RestController;\n@@ -18,7 +17,6 @@\n  * @author : RYAN0UP\n  * @date : 2018/6/6\n  */\n-@CrossOrigin\n @RestController\n @RequestMapping(value = \"/api/user\")\n public class ApiUserController {",
    "output": "Remove CrossOrigin annotation on Api*Controller"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/config/WebMvcAutoConfiguration.java b/src/main/java/cc/ryanc/halo/config/WebMvcAutoConfiguration.java\n--- a/src/main/java/cc/ryanc/halo/config/WebMvcAutoConfiguration.java\n+++ b/src/main/java/cc/ryanc/halo/config/WebMvcAutoConfiguration.java\n@@ -1,15 +1,18 @@\n package cc.ryanc.halo.config;\n \n+import cc.ryanc.halo.filter.CorsFilter;\n import cc.ryanc.halo.web.interceptor.ApiInterceptor;\n import cc.ryanc.halo.web.interceptor.InstallInterceptor;\n import cc.ryanc.halo.web.interceptor.LocaleInterceptor;\n import cc.ryanc.halo.web.interceptor.LoginInterceptor;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.web.servlet.FilterRegistrationBean;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.ComponentScan;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.PropertySource;\n+import org.springframework.core.Ordered;\n import org.springframework.web.servlet.LocaleResolver;\n import org.springframework.web.servlet.config.annotation.*;\n import org.springframework.web.servlet.i18n.LocaleChangeInterceptor;\n@@ -92,24 +95,40 @@ public void addResourceHandlers(ResourceHandlerRegistry registry) {\n                 .addResourceLocations(\"file:///\" + System.getProperties().getProperty(\"user.home\") + \"/halo/backup/\");\n     }\n \n+//    /**\n+//     * 跨域\n+//     *\n+//     * @param registry registry\n+//     */\n+//    @Override\n+//    public void addCorsMappings(CorsRegistry registry) {\n+//        registry.addMapping(\"/api/**\")\n+//                .allowedHeaders(\"*\")\n+//                .allowedOrigins(\"*\")\n+//                .allowedMethods(\"GET\", \"POST\")\n+//                .exposedHeaders(\"access-control-allow-headers\",\n+//                        \"access-control-allow-methods\",\n+//                        \"access-control-allow-origin\",\n+//                        \"access-control-max-age\",\n+//                        \"X-Frame-Options\",\n+//                        \"token\")\n+//                .allowCredentials(false).maxAge(3600);\n+//    }\n+\n     /**\n-     * 跨域\n+     * Creates a CorsFilter.\n      *\n-     * @param registry registry\n+     * @return Cors filter registration bean\n      */\n-    @Override\n-    public void addCorsMappings(CorsRegistry registry) {\n-        registry.addMapping(\"/api/**\")\n-                .allowedHeaders(\"*\")\n-                .allowedOrigins(\"*\")\n-                .allowedMethods(\"GET\", \"POST\")\n-                .exposedHeaders(\"access-control-allow-headers\",\n-                        \"access-control-allow-methods\",\n-                        \"access-control-allow-origin\",\n-                        \"access-control-max-age\",\n-                        \"X-Frame-Options\",\n-                        \"token\")\n-                .allowCredentials(false).maxAge(3600);\n+    @Bean\n+    FilterRegistrationBean<CorsFilter> corsFilter() {\n+        FilterRegistrationBean<CorsFilter> corsFilter = new FilterRegistrationBean<>();\n+\n+        corsFilter.setOrder(Ordered.HIGHEST_PRECEDENCE);\n+        corsFilter.setFilter(new CorsFilter());\n+        corsFilter.addUrlPatterns(\"/api/*\");\n+\n+        return corsFilter;\n     }\n \n     /**\n\ndiff --git a/src/main/java/cc/ryanc/halo/filter/CorsFilter.java b/src/main/java/cc/ryanc/halo/filter/CorsFilter.java\n--- a/src/main/java/cc/ryanc/halo/filter/CorsFilter.java\n+++ b/src/main/java/cc/ryanc/halo/filter/CorsFilter.java\n@@ -0,0 +1,37 @@\n+package cc.ryanc.halo.filter;\n+\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.web.cors.CorsUtils;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import java.io.IOException;\n+\n+/**\n+ * Filter for CORS.\n+ *\n+ * @author johnniang\n+ */\n+public class CorsFilter extends OncePerRequestFilter {\n+\n+    @Override\n+    protected void doFilterInternal(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, FilterChain filterChain) throws ServletException, IOException {\n+\n+        // Set customized header\n+        httpServletResponse.setHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN, \"*\");\n+        httpServletResponse.setHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_HEADERS, \"*\");\n+        httpServletResponse.setHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_METHODS, \"GET, POST, PUT, DELETE, OPTION\");\n+        httpServletResponse.setHeader(HttpHeaders.ACCESS_CONTROL_ALLOW_CREDENTIALS, \"false\");\n+        httpServletResponse.setHeader(HttpHeaders.ACCESS_CONTROL_MAX_AGE, \"3600\");\n+\n+        if (CorsUtils.isPreFlightRequest(httpServletRequest)) {\n+            return;\n+        }\n+\n+        filterChain.doFilter(httpServletRequest, httpServletResponse);\n+    }\n+\n+}",
    "output": "Refactor Cors configuration"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/service/UserService.java b/src/main/java/cc/ryanc/halo/service/UserService.java\n--- a/src/main/java/cc/ryanc/halo/service/UserService.java\n+++ b/src/main/java/cc/ryanc/halo/service/UserService.java\n@@ -1,6 +1,7 @@\n package cc.ryanc.halo.service;\n \n import cc.ryanc.halo.model.domain.User;\n+import cc.ryanc.halo.service.base.CrudService;\n \n import java.util.Date;\n \n@@ -12,14 +13,7 @@\n  * @author : RYAN0UP\n  * @date : 2017/11/14\n  */\n-public interface UserService {\n-\n-    /**\n-     * 保存个人资料\n-     *\n-     * @param user user\n-     */\n-    void save(User user);\n+public interface UserService extends CrudService<User, Long> {\n \n     /**\n      * 根据用户名和密码查询，用于登录\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/UserServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/UserServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/UserServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/UserServiceImpl.java\n@@ -4,7 +4,7 @@\n import cc.ryanc.halo.model.enums.TrueFalseEnum;\n import cc.ryanc.halo.repository.UserRepository;\n import cc.ryanc.halo.service.UserService;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import cc.ryanc.halo.service.base.AbstractCrudService;\n import org.springframework.stereotype.Service;\n \n import java.util.Date;\n@@ -19,19 +19,13 @@\n  * @date : 2017/11/14\n  */\n @Service\n-public class UserServiceImpl implements UserService {\n+public class UserServiceImpl extends AbstractCrudService<User, Long> implements UserService {\n \n-    @Autowired\n-    private UserRepository userRepository;\n+    private final UserRepository userRepository;\n \n-    /**\n-     * 保存个人资料\n-     *\n-     * @param user user\n-     */\n-    @Override\n-    public void save(User user) {\n-        userRepository.save(user);\n+    public UserServiceImpl(UserRepository userRepository) {\n+        super(userRepository);\n+        this.userRepository = userRepository;\n     }\n \n     /**\n@@ -95,7 +89,9 @@ public void updateUserLoginEnable(String enable) {\n         final User user = this.findUser();\n         user.setLoginError(0);\n         user.setLoginEnable(enable);\n-        userRepository.save(user);\n+\n+        // Update user\n+        update(user);\n     }\n \n     /**\n@@ -108,8 +104,9 @@ public void updateUserLoginEnable(String enable) {\n     public User updateUserLoginLast(Date lastDate) {\n         final User user = this.findUser();\n         user.setLoginLast(lastDate);\n-        userRepository.save(user);\n-        return user;\n+\n+        // Update user\n+        return update(user);\n     }\n \n     /**\n@@ -121,7 +118,11 @@ public User updateUserLoginLast(Date lastDate) {\n     public Integer updateUserLoginError() {\n         final User user = this.findUser();\n         user.setLoginError((user.getLoginError() == null ? 0 : user.getLoginError()) + 1);\n-        userRepository.save(user);\n+\n+        // Update user\n+        update(user);\n+\n+        // Return login error times\n         return user.getLoginError();\n     }\n \n@@ -136,7 +137,7 @@ public User updateUserNormal() {\n         user.setLoginEnable(TrueFalseEnum.TRUE.getDesc());\n         user.setLoginError(0);\n         user.setLoginLast(new Date());\n-        userRepository.save(user);\n-        return user;\n+\n+        return update(user);\n     }\n-}\n+}\n\\ No newline at end of file\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/UserController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/UserController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/UserController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/UserController.java\n@@ -67,7 +67,7 @@ public JsonResult saveProfile(@Valid @ModelAttribute User user, BindingResult re\n                     return new JsonResult(ResultCodeEnum.FAIL.getCode(), error.getDefaultMessage());\n                 }\n             }\n-            userService.save(user);\n+            userService.create(user);\n             configuration.setSharedVariable(\"user\", userService.findUser());\n             session.removeAttribute(USER_SESSION_KEY);\n         } catch (Exception e) {\n@@ -96,7 +96,7 @@ public JsonResult changePass(@ModelAttribute(\"beforePass\") String beforePass,\n             final User user = userService.findByUserIdAndUserPass(userId, SecureUtil.md5(beforePass));\n             if (null != user) {\n                 user.setUserPass(SecureUtil.md5(newPass));\n-                userService.save(user);\n+                userService.update(user);\n                 session.removeAttribute(USER_SESSION_KEY);\n             } else {\n                 return new JsonResult(ResultCodeEnum.FAIL.getCode(), localeMessageUtil.getMessage(\"code.admin.user.old-password-error\"));\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/core/InstallController.java b/src/main/java/cc/ryanc/halo/web/controller/core/InstallController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/core/InstallController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/core/InstallController.java\n@@ -116,7 +116,7 @@ public JsonResult doInstall(@RequestParam(\"blogLocale\") String blogLocale,\n             user.setUserDisplayName(userDisplayName);\n             user.setUserEmail(userEmail);\n             user.setUserPass(SecureUtil.md5(userPwd));\n-            userService.save(user);\n+            userService.create(user);\n \n             //默认分类\n             final Category category = new Category();",
    "output": "Refactor UserService"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/freemarker/tag/CommonTagDirective.java b/src/main/java/cc/ryanc/halo/model/freemarker/tag/CommonTagDirective.java\n--- a/src/main/java/cc/ryanc/halo/model/freemarker/tag/CommonTagDirective.java\n+++ b/src/main/java/cc/ryanc/halo/model/freemarker/tag/CommonTagDirective.java\n@@ -50,7 +50,7 @@ public void execute(Environment environment, Map map, TemplateModel[] templateMo\n                     environment.setVariable(\"categories\", builder.build().wrap(categoryService.listAll()));\n                     break;\n                 case \"tags\":\n-                    environment.setVariable(\"tags\", builder.build().wrap(tagService.findAll()));\n+                    environment.setVariable(\"tags\", builder.build().wrap(tagService.listAll()));\n                     break;\n                 case \"links\":\n                     environment.setVariable(\"links\", builder.build().wrap(linkService.listAll()));\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/TagService.java b/src/main/java/cc/ryanc/halo/service/TagService.java\n--- a/src/main/java/cc/ryanc/halo/service/TagService.java\n+++ b/src/main/java/cc/ryanc/halo/service/TagService.java\n@@ -1,9 +1,9 @@\n package cc.ryanc.halo.service;\n \n import cc.ryanc.halo.model.domain.Tag;\n+import cc.ryanc.halo.service.base.CrudService;\n \n import java.util.List;\n-import java.util.Optional;\n \n /**\n  * <pre>\n@@ -13,38 +13,7 @@\n  * @author : RYAN0UP\n  * @date : 2018/1/12\n  */\n-public interface TagService {\n-\n-    /**\n-     * 新增/修改标签\n-     *\n-     * @param tag tag\n-     * @return Tag\n-     */\n-    Tag save(Tag tag);\n-\n-    /**\n-     * 根据编号移除标签\n-     *\n-     * @param tagId tagId\n-     * @return Tag\n-     */\n-    Tag remove(Long tagId);\n-\n-    /**\n-     * 获取所有标签\n-     *\n-     * @return List\n-     */\n-    List<Tag> findAll();\n-\n-    /**\n-     * 根据编号查询标签\n-     *\n-     * @param tagId tagId\n-     * @return Optional\n-     */\n-    Optional<Tag> findByTagId(Long tagId);\n+public interface TagService extends CrudService<Tag, Long> {\n \n     /**\n      * 根据标签路径查询\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/TagServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/TagServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/TagServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/TagServiceImpl.java\n@@ -3,13 +3,12 @@\n import cc.ryanc.halo.model.domain.Tag;\n import cc.ryanc.halo.repository.TagRepository;\n import cc.ryanc.halo.service.TagService;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import cc.ryanc.halo.service.base.AbstractCrudService;\n import org.springframework.cache.annotation.CacheEvict;\n import org.springframework.stereotype.Service;\n \n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Optional;\n \n /**\n  * <pre>\n@@ -20,12 +19,16 @@\n  * @date : 2018/1/12\n  */\n @Service\n-public class TagServiceImpl implements TagService {\n+public class TagServiceImpl extends AbstractCrudService<Tag, Long> implements TagService {\n \n     private static final String POSTS_CACHE_NAME = \"posts\";\n \n-    @Autowired\n-    private TagRepository tagRepository;\n+    private final TagRepository tagRepository;\n+\n+    public TagServiceImpl(TagRepository tagRepository) {\n+        super(tagRepository);\n+        this.tagRepository = tagRepository;\n+    }\n \n     /**\n      * 新增/修改标签\n@@ -35,8 +38,8 @@ public class TagServiceImpl implements TagService {\n      */\n     @Override\n     @CacheEvict(value = POSTS_CACHE_NAME, allEntries = true, beforeInvocation = true)\n-    public Tag save(Tag tag) {\n-        return tagRepository.save(tag);\n+    public Tag create(Tag tag) {\n+        return super.create(tag);\n     }\n \n     /**\n@@ -47,31 +50,8 @@ public Tag save(Tag tag) {\n      */\n     @Override\n     @CacheEvict(value = POSTS_CACHE_NAME, allEntries = true, beforeInvocation = true)\n-    public Tag remove(Long tagId) {\n-        final Optional<Tag> tag = findByTagId(tagId);\n-        tagRepository.delete(tag.get());\n-        return tag.get();\n-    }\n-\n-    /**\n-     * 获取所有标签\n-     *\n-     * @return List\n-     */\n-    @Override\n-    public List<Tag> findAll() {\n-        return tagRepository.findAll();\n-    }\n-\n-    /**\n-     * 根据编号查询标签\n-     *\n-     * @param tagId tagId\n-     * @return Optional\n-     */\n-    @Override\n-    public Optional<Tag> findByTagId(Long tagId) {\n-        return tagRepository.findById(tagId);\n+    public Tag removeById(Long tagId) {\n+        return super.removeById(tagId);\n     }\n \n     /**\n@@ -115,7 +95,7 @@ public List<Tag> strListToTagList(String tagList) {\n                 nt = new Tag();\n                 nt.setTagName(tag);\n                 nt.setTagUrl(tag);\n-                tagsList.add(save(nt));\n+                tagsList.add(create(nt));\n             }\n         }\n         return tagsList;\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/AdminController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/AdminController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/AdminController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/AdminController.java\n@@ -306,7 +306,7 @@ public JsonResult markdownImport(@RequestParam(\"file\") MultipartFile file,\n                             tag = new Tag();\n                             tag.setTagName(ele);\n                             tag.setTagUrl(ele);\n-                            tag = tagService.save(tag);\n+                            tag = tagService.create(tag);\n                         }\n                         tags.add(tag);\n                     } else if (\"categories\".equals(key)) {\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/TagController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/TagController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/TagController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/TagController.java\n@@ -68,7 +68,7 @@ public JsonResult saveTag(@Valid Tag tag, BindingResult result) {\n                 return new JsonResult(ResultCodeEnum.FAIL.getCode(), localeMessageUtil.getMessage(\"code.admin.common.url-is-exists\"));\n             }\n         }\n-        tag = tagService.save(tag);\n+        tag = tagService.create(tag);\n         if (null == tag) {\n             return new JsonResult(ResultCodeEnum.FAIL.getCode(), localeMessageUtil.getMessage(\"code.admin.common.save-failed\"));\n         }\n@@ -84,7 +84,7 @@ public JsonResult saveTag(@Valid Tag tag, BindingResult result) {\n     @GetMapping(value = \"/remove\")\n     public String removeTag(@RequestParam(\"tagId\") Long tagId) {\n         try {\n-            tagService.remove(tagId);\n+            tagService.removeById(tagId);\n         } catch (Exception e) {\n             log.error(\"Failed to delete tag: {}\", e.getMessage());\n         }\n@@ -100,7 +100,7 @@ public String removeTag(@RequestParam(\"tagId\") Long tagId) {\n      */\n     @GetMapping(value = \"/edit\")\n     public String toEditTag(Model model, @RequestParam(\"tagId\") Long tagId) {\n-        final Tag tag = tagService.findByTagId(tagId).orElse(new Tag());\n+        final Tag tag = tagService.fetchById(tagId).orElse(new Tag());\n         model.addAttribute(\"updateTag\", tag);\n         return \"admin/admin_tag\";\n     }\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/api/ApiTagController.java b/src/main/java/cc/ryanc/halo/web/controller/api/ApiTagController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/api/ApiTagController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/api/ApiTagController.java\n@@ -49,7 +49,7 @@ public class ApiTagController {\n      */\n     @GetMapping\n     public JsonResult tags() {\n-        final List<Tag> tags = tagService.findAll();\n+        final List<Tag> tags = tagService.listAll();\n         if (null != tags && tags.size() > 0) {\n             return new JsonResult(ResponseStatusEnum.SUCCESS.getCode(), ResponseStatusEnum.SUCCESS.getMsg(), tags);\n         } else {",
    "output": "Refactor TagService"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/freemarker/tag/CommonTagDirective.java b/src/main/java/cc/ryanc/halo/model/freemarker/tag/CommonTagDirective.java\n--- a/src/main/java/cc/ryanc/halo/model/freemarker/tag/CommonTagDirective.java\n+++ b/src/main/java/cc/ryanc/halo/model/freemarker/tag/CommonTagDirective.java\n@@ -44,7 +44,7 @@ public void execute(Environment environment, Map map, TemplateModel[] templateMo\n             String method = map.get(METHOD_KEY).toString();\n             switch (method) {\n                 case \"menus\":\n-                    environment.setVariable(\"menus\", builder.build().wrap(menuService.findAll()));\n+                    environment.setVariable(\"menus\", builder.build().wrap(menuService.listAll()));\n                     break;\n                 case \"categories\":\n                     environment.setVariable(\"categories\", builder.build().wrap(categoryService.listAll()));\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/MenuService.java b/src/main/java/cc/ryanc/halo/service/MenuService.java\n--- a/src/main/java/cc/ryanc/halo/service/MenuService.java\n+++ b/src/main/java/cc/ryanc/halo/service/MenuService.java\n@@ -1,6 +1,7 @@\n package cc.ryanc.halo.service;\n \n import cc.ryanc.halo.model.domain.Menu;\n+import cc.ryanc.halo.service.base.CrudService;\n \n import java.util.List;\n import java.util.Optional;\n@@ -13,36 +14,6 @@\n  * @author : RYAN0UP\n  * @date : 2018/1/24\n  */\n-public interface MenuService {\n+public interface MenuService extends CrudService<Menu, Long> {\n \n-    /**\n-     * 新增/修改菜单\n-     *\n-     * @param menu menu\n-     * @return Menu\n-     */\n-    Menu save(Menu menu);\n-\n-    /**\n-     * 查询所有菜单\n-     *\n-     * @return List\n-     */\n-    List<Menu> findAll();\n-\n-    /**\n-     * 删除菜单\n-     *\n-     * @param menuId menuId\n-     * @return Menu\n-     */\n-    Menu remove(Long menuId);\n-\n-    /**\n-     * 根据编号查询菜单\n-     *\n-     * @param menuId menuId\n-     * @return Optional\n-     */\n-    Optional<Menu> findByMenuId(Long menuId);\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/MenuServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/MenuServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/MenuServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/MenuServiceImpl.java\n@@ -3,7 +3,7 @@\n import cc.ryanc.halo.model.domain.Menu;\n import cc.ryanc.halo.repository.MenuRepository;\n import cc.ryanc.halo.service.MenuService;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import cc.ryanc.halo.service.base.AbstractCrudService;\n import org.springframework.cache.annotation.CacheEvict;\n import org.springframework.cache.annotation.Cacheable;\n import org.springframework.stereotype.Service;\n@@ -20,14 +20,18 @@\n  * @date : 2018/1/24\n  */\n @Service\n-public class MenuServiceImpl implements MenuService {\n+public class MenuServiceImpl extends AbstractCrudService<Menu, Long> implements MenuService {\n \n     private static final String MENUS_CACHE_KEY = \"'menu'\";\n \n     private static final String MENUS_CACHE_NAME = \"menus\";\n \n-    @Autowired\n-    private MenuRepository menuRepository;\n+    private final MenuRepository menuRepository;\n+\n+    public MenuServiceImpl(MenuRepository menuRepository) {\n+        super(menuRepository);\n+        this.menuRepository = menuRepository;\n+    }\n \n     /**\n      * 查询所有菜单\n@@ -36,8 +40,8 @@ public class MenuServiceImpl implements MenuService {\n      */\n     @Override\n     @Cacheable(value = MENUS_CACHE_NAME, key = MENUS_CACHE_KEY)\n-    public List<Menu> findAll() {\n-        return menuRepository.findAll();\n+    public List<Menu> listAll() {\n+        return super.listAll();\n     }\n \n     /**\n@@ -48,8 +52,8 @@ public List<Menu> findAll() {\n      */\n     @Override\n     @CacheEvict(value = MENUS_CACHE_NAME, allEntries = true, beforeInvocation = true)\n-    public Menu save(Menu menu) {\n-        return menuRepository.save(menu);\n+    public Menu create(Menu menu) {\n+        return super.create(menu);\n     }\n \n     /**\n@@ -60,20 +64,8 @@ public Menu save(Menu menu) {\n      */\n     @Override\n     @CacheEvict(value = MENUS_CACHE_NAME, allEntries = true, beforeInvocation = true)\n-    public Menu remove(Long menuId) {\n-        final Optional<Menu> menu = this.findByMenuId(menuId);\n-        menuRepository.delete(menu.orElse(null));\n-        return menu.orElse(null);\n+    public Menu removeById(Long menuId) {\n+        return super.removeById(menuId);\n     }\n \n-    /**\n-     * 根据编号查询菜单\n-     *\n-     * @param menuId menuId\n-     * @return Menu\n-     */\n-    @Override\n-    public Optional<Menu> findByMenuId(Long menuId) {\n-        return menuRepository.findById(menuId);\n-    }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/MenuController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/MenuController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/MenuController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/MenuController.java\n@@ -54,7 +54,7 @@ public JsonResult saveMenu(@Valid Menu menu, BindingResult result) {\n                 return new JsonResult(ResultCodeEnum.FAIL.getCode(), error.getDefaultMessage());\n             }\n         }\n-        menu = menuService.save(menu);\n+        menu = menuService.create(menu);\n         if (null != menu) {\n             return new JsonResult(ResultCodeEnum.SUCCESS.getCode(), \"菜单保存成功！\");\n         } else {\n@@ -71,7 +71,7 @@ public JsonResult saveMenu(@Valid Menu menu, BindingResult result) {\n      */\n     @GetMapping(value = \"/edit\")\n     public String updateMenu(@RequestParam(\"menuId\") Long menuId, Model model) {\n-        final Menu menu = menuService.findByMenuId(menuId).orElse(new Menu());\n+        final Menu menu = menuService.fetchById(menuId).orElse(new Menu());\n         model.addAttribute(\"updateMenu\", menu);\n         return \"/admin/admin_menu\";\n     }\n@@ -85,7 +85,7 @@ public String updateMenu(@RequestParam(\"menuId\") Long menuId, Model model) {\n     @GetMapping(value = \"/remove\")\n     public String removeMenu(@RequestParam(\"menuId\") Long menuId) {\n         try {\n-            menuService.remove(menuId);\n+            menuService.removeById(menuId);\n         } catch (Exception e) {\n             log.error(\"Deleting menu failed: {}\", e.getMessage());\n         }\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/api/ApiMenuController.java b/src/main/java/cc/ryanc/halo/web/controller/api/ApiMenuController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/api/ApiMenuController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/api/ApiMenuController.java\n@@ -55,7 +55,7 @@ public class ApiMenuController {\n      */\n     @GetMapping\n     public JsonResult menus() {\n-        final List<Menu> menus = menuService.findAll();\n+        final List<Menu> menus = menuService.listAll();\n         if (null != menus && menus.size() > 0) {\n             return new JsonResult(ResponseStatusEnum.SUCCESS.getCode(), ResponseStatusEnum.SUCCESS.getMsg(), menus);\n         } else {\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/core/InstallController.java b/src/main/java/cc/ryanc/halo/web/controller/core/InstallController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/core/InstallController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/core/InstallController.java\n@@ -178,14 +178,14 @@ public JsonResult doInstall(@RequestParam(\"blogLocale\") String blogLocale,\n             menuIndex.setMenuUrl(\"/\");\n             menuIndex.setMenuSort(1);\n             menuIndex.setMenuIcon(\" \");\n-            menuService.save(menuIndex);\n+            menuService.create(menuIndex);\n \n             final Menu menuArchive = new Menu();\n             menuArchive.setMenuName(\"归档\");\n             menuArchive.setMenuUrl(\"/archives\");\n             menuArchive.setMenuSort(2);\n             menuArchive.setMenuIcon(\" \");\n-            menuService.save(menuArchive);\n+            menuService.create(menuArchive);\n \n             OPTIONS.clear();\n             OPTIONS = optionsService.findAllOptions();",
    "output": "Refactor MenuService"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/service/LogsService.java b/src/main/java/cc/ryanc/halo/service/LogsService.java\n--- a/src/main/java/cc/ryanc/halo/service/LogsService.java\n+++ b/src/main/java/cc/ryanc/halo/service/LogsService.java\n@@ -1,6 +1,7 @@\n package cc.ryanc.halo.service;\n \n import cc.ryanc.halo.model.domain.Logs;\n+import cc.ryanc.halo.service.base.CrudService;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.Pageable;\n \n@@ -15,7 +16,7 @@\n  * @author : RYAN0UP\n  * @date : 2018/1/19\n  */\n-public interface LogsService {\n+public interface LogsService extends CrudService<Logs, Long> {\n \n     /**\n      * 保存日志\n@@ -26,19 +27,6 @@ public interface LogsService {\n      */\n     void save(String logTitle, String logContent, HttpServletRequest request);\n \n-    /**\n-     * 移除所有日志\n-     */\n-    void removeAll();\n-\n-    /**\n-     * 查询所有日志并分页\n-     *\n-     * @param pageable pageable\n-     * @return Page\n-     */\n-    Page<Logs> findAll(Pageable pageable);\n-\n     /**\n      * 查询最新的五条日志\n      *\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/base/AbstractCrudService.java b/src/main/java/cc/ryanc/halo/service/base/AbstractCrudService.java\n--- a/src/main/java/cc/ryanc/halo/service/base/AbstractCrudService.java\n+++ b/src/main/java/cc/ryanc/halo/service/base/AbstractCrudService.java\n@@ -179,5 +179,8 @@ public void removeAll(Collection<DOMAIN> domains) {\n         repository.deleteInBatch(domains);\n     }\n \n-\n+    @Override\n+    public void removeAll() {\n+        repository.deleteAll();\n+    }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/base/CrudService.java b/src/main/java/cc/ryanc/halo/service/base/CrudService.java\n--- a/src/main/java/cc/ryanc/halo/service/base/CrudService.java\n+++ b/src/main/java/cc/ryanc/halo/service/base/CrudService.java\n@@ -77,4 +77,5 @@ public interface CrudService<DOMAIN, ID> {\n \n     void removeAll(@NonNull Collection<DOMAIN> domains);\n \n+    void removeAll();\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/LogsServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/LogsServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/LogsServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/LogsServiceImpl.java\n@@ -3,8 +3,8 @@\n import cc.ryanc.halo.model.domain.Logs;\n import cc.ryanc.halo.repository.LogsRepository;\n import cc.ryanc.halo.service.LogsService;\n+import cc.ryanc.halo.service.base.AbstractCrudService;\n import cn.hutool.extra.servlet.ServletUtil;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.Pageable;\n import org.springframework.stereotype.Service;\n@@ -21,10 +21,15 @@\n  * @date : 2018/1/19\n  */\n @Service\n-public class LogsServiceImpl implements LogsService {\n+public class LogsServiceImpl extends AbstractCrudService<Logs, Long> implements LogsService {\n+\n+    private final LogsRepository logsRepository;\n+\n+    public LogsServiceImpl(LogsRepository logsRepository) {\n+        super(logsRepository);\n+        this.logsRepository = logsRepository;\n+    }\n \n-    @Autowired\n-    private LogsRepository logsRepository;\n \n     /**\n      * 保存日志\n@@ -42,25 +47,6 @@ public void save(String logTitle, String logContent, HttpServletRequest request)\n         logsRepository.save(logs);\n     }\n \n-    /**\n-     * 移除所有日志\n-     */\n-    @Override\n-    public void removeAll() {\n-        logsRepository.deleteAll();\n-    }\n-\n-    /**\n-     * 查询所有日志并分页\n-     *\n-     * @param pageable pageable\n-     * @return Page\n-     */\n-    @Override\n-    public Page<Logs> findAll(Pageable pageable) {\n-        return logsRepository.findAll(pageable);\n-    }\n-\n     /**\n      * 查询最新的五条日志\n      *\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/AdminController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/AdminController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/AdminController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/AdminController.java\n@@ -205,7 +205,7 @@ public String logOut(HttpSession session) {\n      */\n     @GetMapping(value = \"/logs\")\n     public String logs(Model model, @PageableDefault Pageable pageable) {\n-        final Page<Logs> logs = logsService.findAll(pageable);\n+        final Page<Logs> logs = logsService.listAll(pageable);\n         model.addAttribute(\"logs\", logs);\n         return \"admin/widget/_logs-all\";\n     }",
    "output": "Refactor LogsService"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/freemarker/tag/CommonTagDirective.java b/src/main/java/cc/ryanc/halo/model/freemarker/tag/CommonTagDirective.java\n--- a/src/main/java/cc/ryanc/halo/model/freemarker/tag/CommonTagDirective.java\n+++ b/src/main/java/cc/ryanc/halo/model/freemarker/tag/CommonTagDirective.java\n@@ -53,7 +53,7 @@ public void execute(Environment environment, Map map, TemplateModel[] templateMo\n                     environment.setVariable(\"tags\", builder.build().wrap(tagService.findAll()));\n                     break;\n                 case \"links\":\n-                    environment.setVariable(\"links\", builder.build().wrap(linkService.findAll()));\n+                    environment.setVariable(\"links\", builder.build().wrap(linkService.listAll()));\n                     break;\n                 case \"newComments\":\n                     environment.setVariable(\"newComments\", builder.build().wrap(commentService.findAll(1)));\n\ndiff --git a/src/main/java/cc/ryanc/halo/repository/base/BaseRepositoryImpl.java b/src/main/java/cc/ryanc/halo/repository/base/BaseRepositoryImpl.java\n--- a/src/main/java/cc/ryanc/halo/repository/base/BaseRepositoryImpl.java\n+++ b/src/main/java/cc/ryanc/halo/repository/base/BaseRepositoryImpl.java\n@@ -13,7 +13,6 @@\n import javax.persistence.criteria.*;\n import java.util.ArrayList;\n import java.util.Collections;\n-import java.util.Iterator;\n import java.util.List;\n \n /**\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/LinkService.java b/src/main/java/cc/ryanc/halo/service/LinkService.java\n--- a/src/main/java/cc/ryanc/halo/service/LinkService.java\n+++ b/src/main/java/cc/ryanc/halo/service/LinkService.java\n@@ -1,9 +1,7 @@\n package cc.ryanc.halo.service;\n \n import cc.ryanc.halo.model.domain.Link;\n-\n-import java.util.List;\n-import java.util.Optional;\n+import cc.ryanc.halo.service.base.CrudService;\n \n /**\n  * <pre>\n@@ -13,36 +11,6 @@\n  * @author : RYAN0UP\n  * @date : 2017/11/14\n  */\n-public interface LinkService {\n-\n-    /**\n-     * 新增/修改友情链接\n-     *\n-     * @param link link\n-     * @return Link\n-     */\n-    Link save(Link link);\n-\n-    /**\n-     * 根据编号删除\n-     *\n-     * @param linkId linkId\n-     * @return Link\n-     */\n-    Link remove(Long linkId);\n-\n-    /**\n-     * 查询所有\n-     *\n-     * @return List\n-     */\n-    List<Link> findAll();\n+public interface LinkService extends CrudService<Link, Long> {\n \n-    /**\n-     * 根据编号查询单个链接\n-     *\n-     * @param linkId linkId\n-     * @return Link\n-     */\n-    Optional<Link> findByLinkId(Long linkId);\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/LinkServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/LinkServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/LinkServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/LinkServiceImpl.java\n@@ -3,7 +3,7 @@\n import cc.ryanc.halo.model.domain.Link;\n import cc.ryanc.halo.repository.LinkRepository;\n import cc.ryanc.halo.service.LinkService;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import cc.ryanc.halo.service.base.AbstractCrudService;\n import org.springframework.cache.annotation.CacheEvict;\n import org.springframework.cache.annotation.Cacheable;\n import org.springframework.stereotype.Service;\n@@ -20,14 +20,18 @@\n  * @date : 2017/11/14\n  */\n @Service\n-public class LinkServiceImpl implements LinkService {\n+public class LinkServiceImpl extends AbstractCrudService<Link, Long> implements LinkService {\n \n     private static final String LINKS_CACHE_KEY = \"'link'\";\n \n     private static final String LINKS_CACHE_NAME = \"links\";\n \n-    @Autowired\n-    private LinkRepository linkRepository;\n+    private final LinkRepository linkRepository;\n+\n+    public LinkServiceImpl(LinkRepository linkRepository) {\n+        super(linkRepository);\n+        this.linkRepository = linkRepository;\n+    }\n \n     /**\n      * 新增/修改友情链接\n@@ -37,8 +41,8 @@ public class LinkServiceImpl implements LinkService {\n      */\n     @Override\n     @CacheEvict(value = LINKS_CACHE_NAME, allEntries = true, beforeInvocation = true)\n-    public Link save(Link link) {\n-        return linkRepository.save(link);\n+    public Link create(Link link) {\n+        return super.create(link);\n     }\n \n     /**\n@@ -49,10 +53,8 @@ public Link save(Link link) {\n      */\n     @Override\n     @CacheEvict(value = LINKS_CACHE_NAME, allEntries = true, beforeInvocation = true)\n-    public Link remove(Long linkId) {\n-        final Optional<Link> link = this.findByLinkId(linkId);\n-        linkRepository.delete(link.get());\n-        return link.get();\n+    public Link removeById(Long linkId) {\n+        return super.removeById(linkId);\n     }\n \n     /**\n@@ -62,18 +64,8 @@ public Link remove(Long linkId) {\n      */\n     @Override\n     @Cacheable(value = LINKS_CACHE_NAME, key = LINKS_CACHE_KEY)\n-    public List<Link> findAll() {\n-        return linkRepository.findAll();\n+    public List<Link> listAll() {\n+        return super.listAll();\n     }\n \n-    /**\n-     * 根据编号查询友情链接\n-     *\n-     * @param linkId linkId\n-     * @return Optional\n-     */\n-    @Override\n-    public Optional<Link> findByLinkId(Long linkId) {\n-        return linkRepository.findById(linkId);\n-    }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/PageController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/PageController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/PageController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/PageController.java\n@@ -107,7 +107,7 @@ public String links() {\n      */\n     @GetMapping(value = \"/links/edit\")\n     public String toEditLink(Model model, @RequestParam(\"linkId\") Long linkId) {\n-        final Optional<Link> link = linkService.findByLinkId(linkId);\n+        final Optional<Link> link = linkService.fetchById(linkId);\n         model.addAttribute(\"updateLink\", link.orElse(new Link()));\n         return \"admin/admin_page_link\";\n     }\n@@ -126,7 +126,7 @@ public JsonResult saveLink(@Valid Link link, BindingResult result) {\n                 return new JsonResult(ResultCodeEnum.FAIL.getCode(), error.getDefaultMessage());\n             }\n         }\n-        link = linkService.save(link);\n+        link = linkService.create(link);\n         if (null == link) {\n             return new JsonResult(ResultCodeEnum.FAIL.getCode(), localeMessageUtil.getMessage(\"code.admin.common.save-failed\"));\n         }\n@@ -142,7 +142,7 @@ public JsonResult saveLink(@Valid Link link, BindingResult result) {\n     @GetMapping(value = \"/links/remove\")\n     public String removeLink(@RequestParam(\"linkId\") Long linkId) {\n         try {\n-            linkService.remove(linkId);\n+            linkService.removeById(linkId);\n         } catch (Exception e) {\n             log.error(\"Deleting a friendship link failed: {}\", e.getMessage());\n         }\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/api/ApiLinkController.java b/src/main/java/cc/ryanc/halo/web/controller/api/ApiLinkController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/api/ApiLinkController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/api/ApiLinkController.java\n@@ -54,7 +54,7 @@ public class ApiLinkController {\n      */\n     @GetMapping\n     public JsonResult links() {\n-        final List<Link> links = linkService.findAll();\n+        final List<Link> links = linkService.listAll();\n         if (null != links && links.size() > 0) {\n             return new JsonResult(ResponseStatusEnum.SUCCESS.getCode(), ResponseStatusEnum.SUCCESS.getMsg(), links);\n         } else {",
    "output": "Refactor LinkService"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/Application.java b/src/main/java/cc/ryanc/halo/Application.java\n--- a/src/main/java/cc/ryanc/halo/Application.java\n+++ b/src/main/java/cc/ryanc/halo/Application.java\n@@ -1,11 +1,13 @@\n package cc.ryanc.halo;\n \n+import cc.ryanc.halo.repository.base.BaseRepositoryImpl;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n import org.springframework.cache.annotation.EnableCaching;\n import org.springframework.context.ApplicationContext;\n import org.springframework.data.jpa.repository.config.EnableJpaAuditing;\n+import org.springframework.data.jpa.repository.config.EnableJpaRepositories;\n \n /**\n  * <pre>\n@@ -19,6 +21,7 @@\n @SpringBootApplication\n @EnableCaching\n @EnableJpaAuditing\n+@EnableJpaRepositories(basePackages = \"cc.ryanc.halo.repository\", repositoryBaseClass = BaseRepositoryImpl.class)\n public class Application {\n     public static void main(String[] args) {\n         ApplicationContext context = SpringApplication.run(Application.class, args);\n\ndiff --git a/src/main/java/cc/ryanc/halo/repository/base/BaseRepositoryImpl.java b/src/main/java/cc/ryanc/halo/repository/base/BaseRepositoryImpl.java\n--- a/src/main/java/cc/ryanc/halo/repository/base/BaseRepositoryImpl.java\n+++ b/src/main/java/cc/ryanc/halo/repository/base/BaseRepositoryImpl.java\n@@ -0,0 +1,91 @@\n+package cc.ryanc.halo.repository.base;\n+\n+import cc.ryanc.halo.logging.Logger;\n+import org.springframework.data.domain.Sort;\n+import org.springframework.data.jpa.domain.Specification;\n+import org.springframework.data.jpa.repository.support.JpaEntityInformation;\n+import org.springframework.data.jpa.repository.support.SimpleJpaRepository;\n+import org.springframework.lang.Nullable;\n+import org.springframework.util.Assert;\n+\n+import javax.persistence.EntityManager;\n+import javax.persistence.TypedQuery;\n+import javax.persistence.criteria.*;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+/**\n+ * Implementation of base repository.\n+ *\n+ * @param <DOMAIN> domain type\n+ * @param <ID>     id type\n+ */\n+public class BaseRepositoryImpl<DOMAIN, ID> extends SimpleJpaRepository<DOMAIN, ID> implements BaseRepository<DOMAIN, ID> {\n+\n+    private final Logger log = Logger.getLogger(getClass());\n+\n+    private final JpaEntityInformation<DOMAIN, ID> entityInformation;\n+\n+    private final EntityManager entityManager;\n+\n+    public BaseRepositoryImpl(JpaEntityInformation<DOMAIN, ID> entityInformation, EntityManager entityManager) {\n+        super(entityInformation, entityManager);\n+        this.entityInformation = entityInformation;\n+        this.entityManager = entityManager;\n+    }\n+\n+    @Override\n+    public List<DOMAIN> findAllByIdIn(Iterable<ID> ids, Sort sort) {\n+        Assert.notNull(ids, \"The given Iterable of Id's must not be null!\");\n+\n+        log.debug(\"Customized findAllById method was invoked\");\n+\n+        if (!ids.iterator().hasNext()) {\n+            return Collections.emptyList();\n+        }\n+        if (!this.entityInformation.hasCompositeId()) {\n+            ByIdsSpecification<DOMAIN> specification = new ByIdsSpecification<>(this.entityInformation);\n+            TypedQuery<DOMAIN> query = super.getQuery(specification, sort);\n+            return query.setParameter(specification.parameter, ids).getResultList();\n+        } else {\n+            List<DOMAIN> results = new ArrayList<>();\n+\n+            ids.forEach(id -> super.findById(id).ifPresent(results::add));\n+\n+            return results;\n+        }\n+    }\n+\n+    @Override\n+    public long deleteByIdIn(Iterable<ID> ids) {\n+\n+        log.debug(\"Customized deleteByIdIn method was invoked\");\n+        // Find all domains\n+        List<DOMAIN> domains = findAllById(ids);\n+\n+        // Delete in batch\n+        deleteInBatch(domains);\n+\n+        // Return the size of domain deleted\n+        return domains.size();\n+    }\n+\n+    private static final class ByIdsSpecification<T> implements Specification<T> {\n+        private static final long serialVersionUID = 1L;\n+        private final JpaEntityInformation<T, ?> entityInformation;\n+        @Nullable\n+        ParameterExpression<Iterable> parameter;\n+\n+        ByIdsSpecification(JpaEntityInformation<T, ?> entityInformation) {\n+            this.entityInformation = entityInformation;\n+        }\n+\n+        public Predicate toPredicate(Root<T> root, CriteriaQuery<?> query, CriteriaBuilder cb) {\n+            Path<?> path = root.get(this.entityInformation.getIdAttribute());\n+            this.parameter = cb.parameter(Iterable.class);\n+            return path.in(this.parameter);\n+        }\n+    }\n+}",
    "output": "Customize base repository implementation"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/service/GalleryService.java b/src/main/java/cc/ryanc/halo/service/GalleryService.java\n--- a/src/main/java/cc/ryanc/halo/service/GalleryService.java\n+++ b/src/main/java/cc/ryanc/halo/service/GalleryService.java\n@@ -1,11 +1,7 @@\n package cc.ryanc.halo.service;\n \n import cc.ryanc.halo.model.domain.Gallery;\n-import org.springframework.data.domain.Page;\n-import org.springframework.data.domain.Pageable;\n-\n-import java.util.List;\n-import java.util.Optional;\n+import cc.ryanc.halo.service.base.CrudService;\n \n /**\n  * <pre>\n@@ -15,44 +11,6 @@\n  * @author : RYAN0UP\n  * @date : 2018/2/26\n  */\n-public interface GalleryService {\n-\n-    /**\n-     * 保存图片\n-     *\n-     * @param gallery gallery\n-     * @return Gallery\n-     */\n-    Gallery save(Gallery gallery);\n-\n-    /**\n-     * 根据编号删除图片\n-     *\n-     * @param galleryId galleryId\n-     * @return Gallery\n-     */\n-    Gallery remove(Long galleryId);\n-\n-    /**\n-     * 查询所有图片 分页\n-     *\n-     * @param pageable pageable\n-     * @return Page\n-     */\n-    Page<Gallery> findAll(Pageable pageable);\n-\n-    /**\n-     * 查询所有图片 不分页\n-     *\n-     * @return List\n-     */\n-    List<Gallery> findAll();\n+public interface GalleryService extends CrudService<Gallery, Long> {\n \n-    /**\n-     * 根据编号查询图片信息\n-     *\n-     * @param galleryId galleryId\n-     * @return Optional\n-     */\n-    Optional<Gallery> findByGalleryId(Long galleryId);\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/CategoryServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/CategoryServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/CategoryServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/CategoryServiceImpl.java\n@@ -9,7 +9,6 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Optional;\n \n /**\n  * <pre>\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/GalleryServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/GalleryServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/GalleryServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/GalleryServiceImpl.java\n@@ -3,15 +3,12 @@\n import cc.ryanc.halo.model.domain.Gallery;\n import cc.ryanc.halo.repository.GalleryRepository;\n import cc.ryanc.halo.service.GalleryService;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import cc.ryanc.halo.service.base.AbstractCrudService;\n import org.springframework.cache.annotation.CacheEvict;\n import org.springframework.cache.annotation.Cacheable;\n-import org.springframework.data.domain.Page;\n-import org.springframework.data.domain.Pageable;\n import org.springframework.stereotype.Service;\n \n import java.util.List;\n-import java.util.Optional;\n \n /**\n  * <pre>\n@@ -22,12 +19,16 @@\n  * @date : 2018/2/26\n  */\n @Service\n-public class GalleryServiceImpl implements GalleryService {\n+public class GalleryServiceImpl extends AbstractCrudService<Gallery, Long> implements GalleryService {\n \n     private static final String GALLERIES_CACHE_NAME = \"galleries\";\n \n-    @Autowired\n-    private GalleryRepository galleryRepository;\n+    private final GalleryRepository galleryRepository;\n+\n+    public GalleryServiceImpl(GalleryRepository galleryRepository) {\n+        super(galleryRepository);\n+        this.galleryRepository = galleryRepository;\n+    }\n \n     /**\n      * 保存图片\n@@ -37,8 +38,8 @@ public class GalleryServiceImpl implements GalleryService {\n      */\n     @Override\n     @CacheEvict(value = GALLERIES_CACHE_NAME, allEntries = true, beforeInvocation = true)\n-    public Gallery save(Gallery gallery) {\n-        return galleryRepository.save(gallery);\n+    public Gallery create(Gallery gallery) {\n+        return super.create(gallery);\n     }\n \n     /**\n@@ -49,21 +50,8 @@ public Gallery save(Gallery gallery) {\n      */\n     @Override\n     @CacheEvict(value = GALLERIES_CACHE_NAME, allEntries = true, beforeInvocation = true)\n-    public Gallery remove(Long galleryId) {\n-        final Optional<Gallery> gallery = this.findByGalleryId(galleryId);\n-        galleryRepository.delete(gallery.get());\n-        return gallery.get();\n-    }\n-\n-    /**\n-     * 查询所有图片 分页\n-     *\n-     * @param pageable pageable\n-     * @return Page\n-     */\n-    @Override\n-    public Page<Gallery> findAll(Pageable pageable) {\n-        return galleryRepository.findAll(pageable);\n+    public Gallery removeById(Long galleryId) {\n+        return super.removeById(galleryId);\n     }\n \n     /**\n@@ -73,18 +61,8 @@ public Page<Gallery> findAll(Pageable pageable) {\n      */\n     @Override\n     @Cacheable(value = GALLERIES_CACHE_NAME, key = \"'gallery'\")\n-    public List<Gallery> findAll() {\n-        return galleryRepository.findAll();\n+    public List<Gallery> listAll() {\n+        return super.listAll();\n     }\n \n-    /**\n-     * 根据编号查询图片信息\n-     *\n-     * @param galleryId galleryId\n-     * @return Optional\n-     */\n-    @Override\n-    public Optional<Gallery> findByGalleryId(Long galleryId) {\n-        return galleryRepository.findById(galleryId);\n-    }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/PageController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/PageController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/PageController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/PageController.java\n@@ -158,7 +158,7 @@ public String removeLink(@RequestParam(\"linkId\") Long linkId) {\n     @GetMapping(value = \"/galleries\")\n     public String gallery(Model model,\n                           @PageableDefault(size = 18, sort = \"galleryId\", direction = Sort.Direction.DESC) Pageable pageable) {\n-        final Page<Gallery> galleries = galleryService.findAll(pageable);\n+        final Page<Gallery> galleries = galleryService.listAll(pageable);\n         model.addAttribute(\"galleries\", galleries);\n         return \"admin/admin_page_gallery\";\n     }\n@@ -175,7 +175,7 @@ public String saveGallery(@ModelAttribute Gallery gallery) {\n             if (StrUtil.isEmpty(gallery.getGalleryThumbnailUrl())) {\n                 gallery.setGalleryThumbnailUrl(gallery.getGalleryUrl());\n             }\n-            galleryService.save(gallery);\n+            galleryService.create(gallery);\n         } catch (Exception e) {\n             e.printStackTrace();\n         }\n@@ -191,7 +191,7 @@ public String saveGallery(@ModelAttribute Gallery gallery) {\n      */\n     @GetMapping(value = \"/gallery\")\n     public String gallery(Model model, @RequestParam(\"galleryId\") Long galleryId) {\n-        final Optional<Gallery> gallery = galleryService.findByGalleryId(galleryId);\n+        final Optional<Gallery> gallery = galleryService.fetchById(galleryId);\n         model.addAttribute(\"gallery\", gallery.orElse(new Gallery()));\n         return \"admin/widget/_gallery-detail\";\n     }\n@@ -206,7 +206,7 @@ public String gallery(Model model, @RequestParam(\"galleryId\") Long galleryId) {\n     @ResponseBody\n     public JsonResult removeGallery(@RequestParam(\"galleryId\") Long galleryId) {\n         try {\n-            galleryService.remove(galleryId);\n+            galleryService.removeById(galleryId);\n         } catch (Exception e) {\n             log.error(\"Failed to delete image: {}\", e.getMessage());\n             return new JsonResult(ResultCodeEnum.FAIL.getCode(), localeMessageUtil.getMessage(\"code.admin.common.delete-failed\"));\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/api/ApiGalleryController.java b/src/main/java/cc/ryanc/halo/web/controller/api/ApiGalleryController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/api/ApiGalleryController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/api/ApiGalleryController.java\n@@ -54,7 +54,7 @@ public class ApiGalleryController {\n      */\n     @GetMapping\n     public JsonResult galleries() {\n-        final List<Gallery> galleries = galleryService.findAll();\n+        final List<Gallery> galleries = galleryService.listAll();\n         if (null != galleries && galleries.size() > 0) {\n             return new JsonResult(ResponseStatusEnum.SUCCESS.getCode(), ResponseStatusEnum.SUCCESS.getMsg(), galleries);\n         } else {\n@@ -91,7 +91,7 @@ public JsonResult galleries() {\n      */\n     @GetMapping(value = \"/{id}\")\n     public JsonResult galleries(@PathVariable(\"id\") Long id) {\n-        final Optional<Gallery> gallery = galleryService.findByGalleryId(id);\n+        final Optional<Gallery> gallery = galleryService.fetchById(id);\n         if (gallery.isPresent()) {\n             return new JsonResult(ResponseStatusEnum.SUCCESS.getCode(), ResponseStatusEnum.SUCCESS.getMsg(), gallery.get());\n         } else {\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/front/FrontPageController.java b/src/main/java/cc/ryanc/halo/web/controller/front/FrontPageController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/front/FrontPageController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/front/FrontPageController.java\n@@ -50,7 +50,7 @@ public class FrontPageController extends BaseController {\n      */\n     @GetMapping(value = \"/gallery\")\n     public String gallery(Model model) {\n-        final List<Gallery> galleries = galleryService.findAll();\n+        final List<Gallery> galleries = galleryService.listAll();\n         model.addAttribute(\"galleries\", galleries);\n         return this.render(\"gallery\");\n     }",
    "output": "Refactor GalleryService"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/service/base/AbstractCrudService.java b/src/main/java/cc/ryanc/halo/service/base/AbstractCrudService.java\n--- a/src/main/java/cc/ryanc/halo/service/base/AbstractCrudService.java\n+++ b/src/main/java/cc/ryanc/halo/service/base/AbstractCrudService.java\n@@ -1,5 +1,21 @@\n package cc.ryanc.halo.service.base;\n \n+import cc.ryanc.halo.exception.NotFoundException;\n+import cc.ryanc.halo.logging.Logger;\n+import cc.ryanc.halo.repository.base.BaseRepository;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.domain.Sort;\n+import org.springframework.util.Assert;\n+import org.springframework.util.CollectionUtils;\n+\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+\n /**\n  * Abstract service implementation.\n  *\n@@ -8,4 +24,155 @@\n  */\n public abstract class AbstractCrudService<DOMAIN, ID> implements CrudService<DOMAIN, ID> {\n \n+    private final Logger log = Logger.getLogger(getClass());\n+\n+    private final String domainName;\n+\n+    private final BaseRepository<DOMAIN, ID> repository;\n+\n+    protected AbstractCrudService(BaseRepository<DOMAIN, ID> repository) {\n+        this.repository = repository;\n+\n+        // Get domain name\n+        Class<DOMAIN> domainClass = (Class<DOMAIN>) fetchType(0);\n+        domainName = domainClass.getSimpleName();\n+    }\n+\n+    /**\n+     * Gets actual generic type.\n+     *\n+     * @param index generic type index\n+     * @return real generic type will be returned\n+     */\n+    private Type fetchType(int index) {\n+        Assert.isTrue(index >= 0 && index <= 1, \"type index must be between 0 to 1\");\n+\n+        return ((ParameterizedType) this.getClass().getGenericSuperclass()).getActualTypeArguments()[index];\n+    }\n+\n+    @Override\n+    public List<DOMAIN> listAll() {\n+        return repository.findAll();\n+    }\n+\n+    @Override\n+    public List<DOMAIN> listAll(Sort sort) {\n+        Assert.notNull(sort, \"Sort info must not be null\");\n+\n+        return repository.findAll(sort);\n+    }\n+\n+    @Override\n+    public Page<DOMAIN> listAll(Pageable pageable) {\n+        Assert.notNull(pageable, \"Pageable info must not be null\");\n+\n+        return repository.findAll(pageable);\n+    }\n+\n+    @Override\n+    public List<DOMAIN> listAllByIds(Collection<ID> ids) {\n+        return CollectionUtils.isEmpty(ids) ? Collections.emptyList() : repository.findAllById(ids);\n+    }\n+\n+    @Override\n+    public List<DOMAIN> listAllByIds(Collection<ID> ids, Sort sort) {\n+        Assert.notNull(sort, \"Sort info must not be null\");\n+\n+        return CollectionUtils.isEmpty(ids) ? Collections.emptyList() : repository.findAllByIdIn(ids, sort);\n+    }\n+\n+    @Override\n+    public Optional<DOMAIN> fetchById(ID id) {\n+        Assert.notNull(id, domainName + \" id must not be null\");\n+\n+        return repository.findById(id);\n+    }\n+\n+    @Override\n+    public DOMAIN getById(ID id) {\n+        return fetchById(id).orElseThrow(() -> new NotFoundException(domainName + \" was not found\"));\n+    }\n+\n+    @Override\n+    public DOMAIN getNullableById(ID id) {\n+        return fetchById(id).orElse(null);\n+    }\n+\n+    @Override\n+    public boolean existsById(ID id) {\n+        Assert.notNull(id, domainName + \" id must not be null\");\n+\n+        return repository.existsById(id);\n+    }\n+\n+    @Override\n+    public void mustExistById(ID id) {\n+        if (!existsById(id)) {\n+            throw new NotFoundException(domainName + \" was not exist\");\n+        }\n+    }\n+\n+    @Override\n+    public DOMAIN create(DOMAIN domain) {\n+        Assert.notNull(domain, domainName + \" data must not be null\");\n+\n+        return repository.save(domain);\n+    }\n+\n+    @Override\n+    public List<DOMAIN> createInBatch(Collection<DOMAIN> domains) {\n+        return CollectionUtils.isEmpty(domains) ? Collections.emptyList() : repository.saveAll(domains);\n+    }\n+\n+    @Override\n+    public DOMAIN update(DOMAIN domain) {\n+        Assert.notNull(domain, domainName + \" data must not be null\");\n+\n+        return repository.saveAndFlush(domain);\n+    }\n+\n+    @Override\n+    public List<DOMAIN> updateInBatch(Collection<DOMAIN> domains) {\n+        return CollectionUtils.isEmpty(domains) ? Collections.emptyList() : repository.saveAll(domains);\n+    }\n+\n+    @Override\n+    public DOMAIN removeById(ID id) {\n+        // Get non null domain by id\n+        DOMAIN domain = getById(id);\n+\n+        // Remove it\n+        remove(domain);\n+\n+        // return the deleted domain\n+        return domain;\n+    }\n+\n+    @Override\n+    public void remove(DOMAIN domain) {\n+        Assert.notNull(domain, domainName + \" data must not be null\");\n+\n+        repository.delete(domain);\n+    }\n+\n+    @Override\n+    public void removeInBatch(Collection<ID> ids) {\n+        if (CollectionUtils.isEmpty(ids)) {\n+            log.warn(domainName + \" id collection is empty\");\n+            return;\n+        }\n+\n+        repository.deleteByIdIn(ids);\n+    }\n+\n+    @Override\n+    public void removeAll(Collection<DOMAIN> domains) {\n+        if (CollectionUtils.isEmpty(domains)) {\n+            log.warn(domainName + \" collection is empty\");\n+            return;\n+        }\n+        repository.deleteInBatch(domains);\n+    }\n+\n+\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/base/CrudService.java b/src/main/java/cc/ryanc/halo/service/base/CrudService.java\n--- a/src/main/java/cc/ryanc/halo/service/base/CrudService.java\n+++ b/src/main/java/cc/ryanc/halo/service/base/CrudService.java\n@@ -3,7 +3,10 @@\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.Pageable;\n import org.springframework.data.domain.Sort;\n+import org.springframework.lang.NonNull;\n+import org.springframework.lang.Nullable;\n \n+import java.util.Collection;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n@@ -19,58 +22,59 @@ public interface CrudService<DOMAIN, ID> {\n \n     // **************** Select\n \n+    @NonNull\n     List<DOMAIN> listAll();\n \n-    List<DOMAIN> listAll(Sort sort);\n+    @NonNull\n+    List<DOMAIN> listAll(@NonNull Sort sort);\n \n-    Page<DOMAIN> listAll(Pageable pageable);\n+    @NonNull\n+    Page<DOMAIN> listAll(@NonNull Pageable pageable);\n \n-//    <P> List<P> listAll(Class<P> projectionType);\n-//\n-//    <P> List<P> listAll(Class<P> projectionType, Sort sort);\n-//\n-//    <P> Page<P> listAll(Class<P> projectionType, Pageable pageable);\n+    @NonNull\n+    List<DOMAIN> listAllByIds(@NonNull Collection<ID> ids);\n \n-    List<DOMAIN> listAllByIds(Iterable<ID> ids);\n+    @NonNull\n+    List<DOMAIN> listAllByIds(@NonNull Collection<ID> ids, @NonNull Sort sort);\n \n-    List<DOMAIN> listAllByIds(Iterable<ID> ids, Sort sort);\n+    @NonNull\n+    Optional<DOMAIN> fetchById(@NonNull ID id);\n \n-    Map<ID, DOMAIN> listAllByIdsAsMap(Iterable<ID> ids);\n+    @NonNull\n+    DOMAIN getById(@NonNull ID id);\n \n-    Map<ID, DOMAIN> listAllByIdsAsMap(Iterable<ID> ids, Sort sort);\n+    @Nullable\n+    DOMAIN getNullableById(@NonNull ID id);\n \n-    Optional<DOMAIN> fetchById(ID id);\n+    boolean existsById(@NonNull ID id);\n \n-    DOMAIN getById(ID id);\n-\n-    DOMAIN getNullableById(ID id);\n-\n-    boolean existsById(ID id);\n-\n-    void mustExistById(ID id);\n+    void mustExistById(@NonNull ID id);\n \n \n     // **************** Create\n-    DOMAIN create(DOMAIN domain);\n+    @NonNull\n+    DOMAIN create(@NonNull DOMAIN domain);\n \n-    List<DOMAIN> createInBatch(Iterable<DOMAIN> domains);\n+    @NonNull\n+    List<DOMAIN> createInBatch(@NonNull Collection<DOMAIN> domains);\n \n \n     // **************** Update\n+    @NonNull\n+    DOMAIN update(@NonNull DOMAIN domain);\n \n-    DOMAIN update(DOMAIN domain);\n-\n-    List<DOMAIN> updateInBatch(Iterable<DOMAIN> domains);\n+    @NonNull\n+    List<DOMAIN> updateInBatch(@NonNull Collection<DOMAIN> domains);\n \n \n     // **************** Delete\n+    @NonNull\n+    DOMAIN removeById(@NonNull ID id);\n \n-    void removeById(ID id);\n-\n-    void remove(DOMAIN domain);\n+    void remove(@NonNull DOMAIN domain);\n \n-    void removeInBatch(Iterable<ID> ids);\n+    void removeInBatch(@NonNull Collection<ID> ids);\n \n-    void removeAll(Iterable<DOMAIN> domains);\n+    void removeAll(@NonNull Collection<DOMAIN> domains);\n \n }",
    "output": "Accomplish AbstractCrudService"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/utils/ServiceUtils.java b/src/main/java/cc/ryanc/halo/utils/ServiceUtils.java\n--- a/src/main/java/cc/ryanc/halo/utils/ServiceUtils.java\n+++ b/src/main/java/cc/ryanc/halo/utils/ServiceUtils.java\n@@ -0,0 +1,86 @@\n+package cc.ryanc.halo.utils;\n+\n+import cc.ryanc.halo.logging.Logger;\n+import org.springframework.util.Assert;\n+import org.springframework.util.CollectionUtils;\n+\n+import java.util.*;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Utilities for service.\n+ *\n+ * @author johnniang\n+ */\n+public class ServiceUtils {\n+\n+    private final static Logger LOGGER = Logger.getLogger(ServiceUtils.class);\n+\n+    private ServiceUtils() {\n+    }\n+\n+    /**\n+     * Fetches id to set.\n+     *\n+     * @param datas           data collection\n+     * @param mappingFunction calculate the id in data list\n+     * @param <ID>            id type\n+     * @param <T>             data type\n+     * @return a set of id\n+     */\n+    public static <ID, T> Set<ID> fetchProperty(final Collection<T> datas, Function<T, ID> mappingFunction) {\n+        return CollectionUtils.isEmpty(datas) ?\n+                Collections.emptySet() :\n+                datas.stream().map(mappingFunction).collect(Collectors.toSet());\n+    }\n+\n+    /**\n+     * Converts a list to a list map where list contains id in ids.\n+     *\n+     * @param ids             id collection\n+     * @param list            data list\n+     * @param mappingFunction calculate the id in data list\n+     * @param <ID>            id type\n+     * @param <D>             data type\n+     * @return a map which key is in ids and value containing in list\n+     */\n+    public static <ID, D> Map<ID, List<D>> convertToListMap(Collection<ID> ids, Collection<D> list, Function<D, ID> mappingFunction) {\n+        Assert.notNull(mappingFunction, \"mapping function must not be null\");\n+\n+        if (CollectionUtils.isEmpty(ids) || CollectionUtils.isEmpty(list)) {\n+            return Collections.emptyMap();\n+        }\n+\n+        Map<ID, List<D>> resultMap = new HashMap<>();\n+\n+        list.forEach(data -> resultMap.computeIfAbsent(mappingFunction.apply(data), id -> new LinkedList<>()).add(data));\n+\n+        ids.forEach(id -> resultMap.putIfAbsent(id, Collections.emptyList()));\n+\n+        return resultMap;\n+    }\n+\n+    /**\n+     * Converts to map (key from the list data)\n+     *\n+     * @param list            data list\n+     * @param mappingFunction calclulate the id from list data\n+     * @param <ID>            id type\n+     * @param <D>             data type\n+     * @return a map which key from list data and value is data\n+     */\n+    public static <ID, D> Map<ID, D> convertToMap(Collection<D> list, Function<D, ID> mappingFunction) {\n+        Assert.notNull(mappingFunction, \"mapping function must not be null\");\n+\n+        if (CollectionUtils.isEmpty(list)) {\n+            return Collections.emptyMap();\n+        }\n+\n+        Map<ID, D> resultMap = new HashMap<>();\n+\n+        list.forEach(data -> resultMap.putIfAbsent(mappingFunction.apply(data), data));\n+\n+        return resultMap;\n+    }\n+}",
    "output": "Add ServiceUtils"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/exception/AlreadyExistsException.java b/src/main/java/cc/ryanc/halo/exception/AlreadyExistsException.java\n--- a/src/main/java/cc/ryanc/halo/exception/AlreadyExistsException.java\n+++ b/src/main/java/cc/ryanc/halo/exception/AlreadyExistsException.java\n@@ -0,0 +1,18 @@\n+package cc.ryanc.halo.exception;\n+\n+/**\n+ * Exception caused by entity existence already.\n+ *\n+ * @author johnniang\n+ */\n+public class AlreadyExistsException extends BadRequestException {\n+\n+    public AlreadyExistsException(String message) {\n+        super(message);\n+    }\n+\n+    public AlreadyExistsException(String message, Throwable cause) {\n+        super(message, cause);\n+    }\n+\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/exception/BadRequestException.java b/src/main/java/cc/ryanc/halo/exception/BadRequestException.java\n--- a/src/main/java/cc/ryanc/halo/exception/BadRequestException.java\n+++ b/src/main/java/cc/ryanc/halo/exception/BadRequestException.java\n@@ -0,0 +1,24 @@\n+package cc.ryanc.halo.exception;\n+\n+import org.springframework.http.HttpStatus;\n+\n+/**\n+ * Exception caused by bad request.\n+ *\n+ * @author johnniang\n+ */\n+public class BadRequestException extends HaloException {\n+\n+    public BadRequestException(String message) {\n+        super(message);\n+    }\n+\n+    public BadRequestException(String message, Throwable cause) {\n+        super(message, cause);\n+    }\n+\n+    @Override\n+    public HttpStatus getStatus() {\n+        return HttpStatus.BAD_REQUEST;\n+    }\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/exception/ForbiddenException.java b/src/main/java/cc/ryanc/halo/exception/ForbiddenException.java\n--- a/src/main/java/cc/ryanc/halo/exception/ForbiddenException.java\n+++ b/src/main/java/cc/ryanc/halo/exception/ForbiddenException.java\n@@ -0,0 +1,24 @@\n+package cc.ryanc.halo.exception;\n+\n+import org.springframework.http.HttpStatus;\n+\n+/**\n+ * Exception caused by accessing forbidden resources.\n+ *\n+ * @author johnniang\n+ */\n+public class ForbiddenException extends HaloException {\n+\n+    public ForbiddenException(String message) {\n+        super(message);\n+    }\n+\n+    public ForbiddenException(String message, Throwable cause) {\n+        super(message, cause);\n+    }\n+\n+    @Override\n+    public HttpStatus getStatus() {\n+        return HttpStatus.FORBIDDEN;\n+    }\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/exception/HaloException.java b/src/main/java/cc/ryanc/halo/exception/HaloException.java\n--- a/src/main/java/cc/ryanc/halo/exception/HaloException.java\n+++ b/src/main/java/cc/ryanc/halo/exception/HaloException.java\n@@ -0,0 +1,46 @@\n+package cc.ryanc.halo.exception;\n+\n+import org.springframework.http.HttpStatus;\n+import org.springframework.lang.NonNull;\n+import org.springframework.lang.Nullable;\n+\n+/**\n+ * Base exception of the project.\n+ *\n+ * @author johnniang\n+ */\n+public abstract class HaloException extends RuntimeException {\n+\n+    /**\n+     * Error errorData.\n+     */\n+    private Object errorData;\n+\n+    public HaloException(String message) {\n+        super(message);\n+    }\n+\n+    public HaloException(String message, Throwable cause) {\n+        super(message, cause);\n+    }\n+\n+    @NonNull\n+    public abstract HttpStatus getStatus();\n+\n+    @Nullable\n+    public Object getErrorData() {\n+        return errorData;\n+    }\n+\n+    /**\n+     * Sets error errorData.\n+     *\n+     * @param errorData error data\n+     * @return current exception.\n+     */\n+    @NonNull\n+    public HaloException setErrorData(@Nullable Object errorData) {\n+        this.errorData = errorData;\n+        return this;\n+    }\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/exception/NotFoundException.java b/src/main/java/cc/ryanc/halo/exception/NotFoundException.java\n--- a/src/main/java/cc/ryanc/halo/exception/NotFoundException.java\n+++ b/src/main/java/cc/ryanc/halo/exception/NotFoundException.java\n@@ -0,0 +1,24 @@\n+package cc.ryanc.halo.exception;\n+\n+import org.springframework.http.HttpStatus;\n+\n+/**\n+ * Exception of entity not found.\n+ *\n+ * @author johnniang\n+ */\n+public class NotFoundException extends HaloException {\n+\n+    public NotFoundException(String message) {\n+        super(message);\n+    }\n+\n+    public NotFoundException(String message, Throwable cause) {\n+        super(message, cause);\n+    }\n+\n+    @Override\n+    public HttpStatus getStatus() {\n+        return HttpStatus.NOT_FOUND;\n+    }\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/exception/ServiceException.java b/src/main/java/cc/ryanc/halo/exception/ServiceException.java\n--- a/src/main/java/cc/ryanc/halo/exception/ServiceException.java\n+++ b/src/main/java/cc/ryanc/halo/exception/ServiceException.java\n@@ -0,0 +1,24 @@\n+package cc.ryanc.halo.exception;\n+\n+import org.springframework.http.HttpStatus;\n+\n+/**\n+ * Exception caused by service.\n+ *\n+ * @author johnniang\n+ */\n+public class ServiceException extends HaloException {\n+\n+    public ServiceException(String message) {\n+        super(message);\n+    }\n+\n+    public ServiceException(String message, Throwable cause) {\n+        super(message, cause);\n+    }\n+\n+    @Override\n+    public HttpStatus getStatus() {\n+        return HttpStatus.INTERNAL_SERVER_ERROR;\n+    }\n+}",
    "output": "Add HaloException(s)"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/repository/AttachmentRepository.java b/src/main/java/cc/ryanc/halo/repository/AttachmentRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/AttachmentRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/AttachmentRepository.java\n@@ -1,6 +1,7 @@\n package cc.ryanc.halo.repository;\n \n import cc.ryanc.halo.model.domain.Attachment;\n+import cc.ryanc.halo.repository.base.BaseRepository;\n import org.springframework.data.jpa.repository.JpaRepository;\n \n /**\n@@ -11,5 +12,5 @@\n  * @author : RYAN0UP\n  * @date : 2018/1/10\n  */\n-public interface AttachmentRepository extends JpaRepository<Attachment, Long> {\n+public interface AttachmentRepository extends BaseRepository<Attachment, Long> {\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/repository/CategoryRepository.java b/src/main/java/cc/ryanc/halo/repository/CategoryRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/CategoryRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/CategoryRepository.java\n@@ -1,6 +1,7 @@\n package cc.ryanc.halo.repository;\n \n import cc.ryanc.halo.model.domain.Category;\n+import cc.ryanc.halo.repository.base.BaseRepository;\n import org.springframework.data.jpa.repository.JpaRepository;\n \n /**\n@@ -11,7 +12,7 @@\n  * @author : RYAN0UP\n  * @date : 2017/11/30\n  */\n-public interface CategoryRepository extends JpaRepository<Category, Long> {\n+public interface CategoryRepository extends BaseRepository<Category, Long> {\n \n     /**\n      * 根据分类目录路径查询，用于验证是否已经存在该路径\n\ndiff --git a/src/main/java/cc/ryanc/halo/repository/CommentRepository.java b/src/main/java/cc/ryanc/halo/repository/CommentRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/CommentRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/CommentRepository.java\n@@ -2,6 +2,7 @@\n \n import cc.ryanc.halo.model.domain.Comment;\n import cc.ryanc.halo.model.domain.Post;\n+import cc.ryanc.halo.repository.base.BaseRepository;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.Pageable;\n import org.springframework.data.jpa.repository.JpaRepository;\n@@ -18,7 +19,7 @@\n  * @author : RYAN0UP\n  * @date : 2018/1/22\n  */\n-public interface CommentRepository extends JpaRepository<Comment, Long> {\n+public interface CommentRepository extends BaseRepository<Comment, Long> {\n \n     /**\n      * 根据评论状态查询所有评论 分页\n\ndiff --git a/src/main/java/cc/ryanc/halo/repository/GalleryRepository.java b/src/main/java/cc/ryanc/halo/repository/GalleryRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/GalleryRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/GalleryRepository.java\n@@ -1,6 +1,7 @@\n package cc.ryanc.halo.repository;\n \n import cc.ryanc.halo.model.domain.Gallery;\n+import cc.ryanc.halo.repository.base.BaseRepository;\n import org.springframework.data.jpa.repository.JpaRepository;\n \n /**\n@@ -11,5 +12,5 @@\n  * @author : RYAN0UP\n  * @date : 2018/2/26\n  */\n-public interface GalleryRepository extends JpaRepository<Gallery, Long> {\n+public interface GalleryRepository extends BaseRepository<Gallery, Long> {\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/repository/LinkRepository.java b/src/main/java/cc/ryanc/halo/repository/LinkRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/LinkRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/LinkRepository.java\n@@ -1,6 +1,7 @@\n package cc.ryanc.halo.repository;\n \n import cc.ryanc.halo.model.domain.Link;\n+import cc.ryanc.halo.repository.base.BaseRepository;\n import org.springframework.data.jpa.repository.JpaRepository;\n \n /**\n@@ -11,5 +12,5 @@\n  * @author : RYAN0UP\n  * @date : 2017/11/14\n  */\n-public interface LinkRepository extends JpaRepository<Link, Long> {\n+public interface LinkRepository extends BaseRepository<Link, Long> {\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/repository/LogsRepository.java b/src/main/java/cc/ryanc/halo/repository/LogsRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/LogsRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/LogsRepository.java\n@@ -1,6 +1,7 @@\n package cc.ryanc.halo.repository;\n \n import cc.ryanc.halo.model.domain.Logs;\n+import cc.ryanc.halo.repository.base.BaseRepository;\n import org.springframework.data.jpa.repository.JpaRepository;\n import org.springframework.data.jpa.repository.Query;\n \n@@ -14,7 +15,7 @@\n  * @author : RYAN0UP\n  * @date : 2018/1/19\n  */\n-public interface LogsRepository extends JpaRepository<Logs, Long> {\n+public interface LogsRepository extends BaseRepository<Logs, Long> {\n \n     /**\n      * 查询最新的五条数据\n\ndiff --git a/src/main/java/cc/ryanc/halo/repository/MenuRepository.java b/src/main/java/cc/ryanc/halo/repository/MenuRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/MenuRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/MenuRepository.java\n@@ -1,6 +1,7 @@\n package cc.ryanc.halo.repository;\n \n import cc.ryanc.halo.model.domain.Menu;\n+import cc.ryanc.halo.repository.base.BaseRepository;\n import org.springframework.data.jpa.repository.JpaRepository;\n \n /**\n@@ -11,5 +12,5 @@\n  * @author : RYAN0UP\n  * @date : 2018/1/24\n  */\n-public interface MenuRepository extends JpaRepository<Menu, Long> {\n+public interface MenuRepository extends BaseRepository<Menu, Long> {\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/repository/OptionsRepository.java b/src/main/java/cc/ryanc/halo/repository/OptionsRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/OptionsRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/OptionsRepository.java\n@@ -1,6 +1,7 @@\n package cc.ryanc.halo.repository;\n \n import cc.ryanc.halo.model.domain.Options;\n+import cc.ryanc.halo.repository.base.BaseRepository;\n import org.springframework.data.jpa.repository.JpaRepository;\n \n /**\n@@ -11,7 +12,7 @@\n  * @author : RYAN0UP\n  * @date : 2017/11/14\n  */\n-public interface OptionsRepository extends JpaRepository<Options, Long> {\n+public interface OptionsRepository extends BaseRepository<Options, Long> {\n \n     /**\n      * 根据key查询单个option\n\ndiff --git a/src/main/java/cc/ryanc/halo/repository/PostRepository.java b/src/main/java/cc/ryanc/halo/repository/PostRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/PostRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/PostRepository.java\n@@ -3,6 +3,7 @@\n import cc.ryanc.halo.model.domain.Category;\n import cc.ryanc.halo.model.domain.Post;\n import cc.ryanc.halo.model.domain.Tag;\n+import cc.ryanc.halo.repository.base.BaseRepository;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.Pageable;\n import org.springframework.data.jpa.repository.JpaRepository;\n@@ -21,7 +22,7 @@\n  * @author : RYAN0UP\n  * @date : 2017/11/14\n  */\n-public interface PostRepository extends JpaRepository<Post, Long>, JpaSpecificationExecutor<Post> {\n+public interface PostRepository extends BaseRepository<Post, Long>, JpaSpecificationExecutor<Post> {\n \n     /**\n      * 查询前五条文章\n\ndiff --git a/src/main/java/cc/ryanc/halo/repository/TagRepository.java b/src/main/java/cc/ryanc/halo/repository/TagRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/TagRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/TagRepository.java\n@@ -1,6 +1,7 @@\n package cc.ryanc.halo.repository;\n \n import cc.ryanc.halo.model.domain.Tag;\n+import cc.ryanc.halo.repository.base.BaseRepository;\n import org.springframework.data.jpa.repository.JpaRepository;\n \n /**\n@@ -11,7 +12,7 @@\n  * @author : RYAN0UP\n  * @date : 2018/1/12\n  */\n-public interface TagRepository extends JpaRepository<Tag, Long> {\n+public interface TagRepository extends BaseRepository<Tag, Long> {\n \n     /**\n      * 根据标签路径查询，用于验证是否已经存在该路径\n\ndiff --git a/src/main/java/cc/ryanc/halo/repository/UserRepository.java b/src/main/java/cc/ryanc/halo/repository/UserRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/UserRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/UserRepository.java\n@@ -1,6 +1,7 @@\n package cc.ryanc.halo.repository;\n \n import cc.ryanc.halo.model.domain.User;\n+import cc.ryanc.halo.repository.base.BaseRepository;\n import org.springframework.data.jpa.repository.JpaRepository;\n \n /**\n@@ -11,7 +12,7 @@\n  * @author : RYAN0UP\n  * @date : 2017/11/14\n  */\n-public interface UserRepository extends JpaRepository<User, Long> {\n+public interface UserRepository extends BaseRepository<User, Long> {\n \n     /**\n      * 根据用户名和密码查询\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/base/AbstractCrudService.java b/src/main/java/cc/ryanc/halo/service/base/AbstractCrudService.java\n--- a/src/main/java/cc/ryanc/halo/service/base/AbstractCrudService.java\n+++ b/src/main/java/cc/ryanc/halo/service/base/AbstractCrudService.java\n@@ -3,9 +3,9 @@\n /**\n  * Abstract service implementation.\n  *\n- * @param <ID>     id type\n  * @param <DOMAIN> domain type\n+ * @param <ID>     id type\n  */\n-public abstract class AbstractService<ID, DOMAIN> implements CrudService<ID, DOMAIN> {\n+public abstract class AbstractCrudService<DOMAIN, ID> implements CrudService<DOMAIN, ID> {\n \n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/base/CrudService.java b/src/main/java/cc/ryanc/halo/service/base/CrudService.java\n--- a/src/main/java/cc/ryanc/halo/service/base/CrudService.java\n+++ b/src/main/java/cc/ryanc/halo/service/base/CrudService.java\n@@ -9,13 +9,13 @@\n import java.util.Optional;\n \n /**\n- * CrudService interface contained public methods.\n+ * CrudService interface contains some common methods.\n  *\n- * @param <ID>     id type\n  * @param <DOMAIN> domain type\n+ * @param <ID>     id type\n  * @author johnniang\n  */\n-public interface CrudService<ID, DOMAIN> {\n+public interface CrudService<DOMAIN, ID> {\n \n     // **************** Select\n ",
    "output": "Replace JPARepository with BaseRepository"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/repository/base/BaseRepository.java b/src/main/java/cc/ryanc/halo/repository/base/BaseRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/base/BaseRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/base/BaseRepository.java\n@@ -0,0 +1,37 @@\n+package cc.ryanc.halo.repository.base;\n+\n+import org.springframework.data.domain.Sort;\n+import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.repository.NoRepositoryBean;\n+import org.springframework.lang.NonNull;\n+\n+import java.util.List;\n+\n+/**\n+ * Base repository interface contains some common methods.\n+ *\n+ * @param <DOMAIN> doamin type\n+ * @param <ID>     id type\n+ * @author johnniang\n+ */\n+@NoRepositoryBean\n+public interface BaseRepository<DOMAIN, ID> extends JpaRepository<DOMAIN, ID> {\n+\n+    /**\n+     * Finds all domain by id list and the specified sort.\n+     *\n+     * @param ids  id list of domain must not be null\n+     * @param sort the specified sort must not be null\n+     * @return a list of domains\n+     */\n+    @NonNull\n+    List<DOMAIN> findAllByIdIn(@NonNull Iterable<ID> ids, @NonNull Sort sort);\n+\n+    /**\n+     * Deletes by id list.\n+     *\n+     * @param ids id list of domain must not be null\n+     * @return number of rows affected\n+     */\n+    long deleteByIdIn(@NonNull Iterable<ID> ids);\n+}",
    "output": "Add BaseRepository"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/service/base/AbstractService.java b/src/main/java/cc/ryanc/halo/service/base/AbstractService.java\n--- a/src/main/java/cc/ryanc/halo/service/base/AbstractService.java\n+++ b/src/main/java/cc/ryanc/halo/service/base/AbstractService.java\n@@ -0,0 +1,11 @@\n+package cc.ryanc.halo.service.base;\n+\n+/**\n+ * Abstract service implementation.\n+ *\n+ * @param <ID>     id type\n+ * @param <DOMAIN> domain type\n+ */\n+public abstract class AbstractService<ID, DOMAIN> implements CrudService<ID, DOMAIN> {\n+\n+}\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/base/CrudService.java b/src/main/java/cc/ryanc/halo/service/base/CrudService.java\n--- a/src/main/java/cc/ryanc/halo/service/base/CrudService.java\n+++ b/src/main/java/cc/ryanc/halo/service/base/CrudService.java\n@@ -0,0 +1,76 @@\n+package cc.ryanc.halo.service.base;\n+\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.domain.Sort;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+/**\n+ * CrudService interface contained public methods.\n+ *\n+ * @param <ID>     id type\n+ * @param <DOMAIN> domain type\n+ * @author johnniang\n+ */\n+public interface CrudService<ID, DOMAIN> {\n+\n+    // **************** Select\n+\n+    List<DOMAIN> listAll();\n+\n+    List<DOMAIN> listAll(Sort sort);\n+\n+    Page<DOMAIN> listAll(Pageable pageable);\n+\n+//    <P> List<P> listAll(Class<P> projectionType);\n+//\n+//    <P> List<P> listAll(Class<P> projectionType, Sort sort);\n+//\n+//    <P> Page<P> listAll(Class<P> projectionType, Pageable pageable);\n+\n+    List<DOMAIN> listAllByIds(Iterable<ID> ids);\n+\n+    List<DOMAIN> listAllByIds(Iterable<ID> ids, Sort sort);\n+\n+    Map<ID, DOMAIN> listAllByIdsAsMap(Iterable<ID> ids);\n+\n+    Map<ID, DOMAIN> listAllByIdsAsMap(Iterable<ID> ids, Sort sort);\n+\n+    Optional<DOMAIN> fetchById(ID id);\n+\n+    DOMAIN getById(ID id);\n+\n+    DOMAIN getNullableById(ID id);\n+\n+    boolean existsById(ID id);\n+\n+    void mustExistById(ID id);\n+\n+\n+    // **************** Create\n+    DOMAIN create(DOMAIN domain);\n+\n+    List<DOMAIN> createInBatch(Iterable<DOMAIN> domains);\n+\n+\n+    // **************** Update\n+\n+    DOMAIN update(DOMAIN domain);\n+\n+    List<DOMAIN> updateInBatch(Iterable<DOMAIN> domains);\n+\n+\n+    // **************** Delete\n+\n+    void removeById(ID id);\n+\n+    void remove(DOMAIN domain);\n+\n+    void removeInBatch(Iterable<ID> ids);\n+\n+    void removeAll(Iterable<DOMAIN> domains);\n+\n+}",
    "output": "Add CrudService interface"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/service/PostService.java b/src/main/java/cc/ryanc/halo/service/PostService.java\n--- a/src/main/java/cc/ryanc/halo/service/PostService.java\n+++ b/src/main/java/cc/ryanc/halo/service/PostService.java\n@@ -7,6 +7,7 @@\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.Pageable;\n import org.springframework.lang.NonNull;\n+import org.springframework.lang.Nullable;\n import org.springframework.web.bind.annotation.RequestParam;\n \n import java.util.Date;\n@@ -86,7 +87,7 @@ public interface PostService {\n      * @return a page of posts\n      */\n     @NonNull\n-    Page<Post> searchPostsBy(String keyword, String postType, Integer postStatus, @NonNull Pageable pageable);\n+    Page<Post> searchPostsBy(@Nullable String keyword, @Nullable String postType, @Nullable Integer postStatus, @NonNull Pageable pageable);\n \n \n     /**\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java\n@@ -22,14 +22,21 @@\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.Pageable;\n import org.springframework.data.jpa.domain.Specification;\n+import org.springframework.data.jpa.domain.Specifications;\n import org.springframework.lang.NonNull;\n import org.springframework.lang.Nullable;\n import org.springframework.stereotype.Service;\n+import org.springframework.util.Assert;\n import org.springframework.util.StringUtils;\n \n+import javax.persistence.criteria.CriteriaBuilder;\n+import javax.persistence.criteria.CriteriaQuery;\n import javax.persistence.criteria.Predicate;\n+import javax.persistence.criteria.Root;\n import java.util.*;\n \n+import static org.springframework.data.jpa.domain.Specification.where;\n+\n /**\n  * <pre>\n  *     文章业务逻辑实现类\n@@ -575,26 +582,49 @@ public List<Post> getRecentPosts(int limit) {\n     }\n \n     @NonNull\n-    private Specification<Post> buildSearchSepcification(@Nullable String keyword, @Nullable String postType, @Nullable Integer postStatus) {\n-        return (Specification<Post>) (root, criteriaQuery, criteriaBuilder) -> {\n-            List<Predicate> predicates = new LinkedList<>();\n+    private Specification<Post> buildSearchSepcification(@NonNull String keyword,\n+                                                         @NonNull String postType,\n+                                                         @NonNull Integer postStatus) {\n+        return Specification.where(postTitleLike(keyword)).or(postContentLike(keyword)).and(postTypeEqual(postType)).and(postStatusEqual(postStatus));\n+//        return (root, criteriaQuery, criteriaBuilder) -> {\n+//            List<Predicate> predicates = new LinkedList<>();\n+//\n+//            if (StringUtils.hasText(keyword)) {\n+//                predicates.add(criteriaBuilder.like(root.get(\"postContent\"), keyword));\n+//                predicates.add(criteriaBuilder.or(criteriaBuilder.like(root.get(\"postTitle\"), keyword)));\n+//            }\n+//\n+//            if (StringUtils.hasText(postType)) {\n+//                predicates.add(criteriaBuilder.equal(root.get(\"postType\"), postType));\n+//            }\n+//\n+//            if (postStatus != null) {\n+//                predicates.add(criteriaBuilder.equal(root.get(\"postStatus\"), postStatus));\n+//            }\n+//\n+//            return criteriaQuery.where(predicates.toArray(new Predicate[0])).getRestriction();\n+//        };\n+    }\n \n-            if (StringUtils.hasText(keyword)) {\n-                predicates.add(criteriaBuilder.like(root.get(\"postContent\"), keyword));\n-            }\n+    private Specification<Post> postContentLike(@NonNull String keyword) {\n+        Assert.hasText(keyword, \"Keyword must not be blank\");\n \n-            if (StringUtils.hasText(postType)) {\n-                predicates.add(criteriaBuilder.equal(root.get(\"postType\"), postType));\n-                predicates.add(criteriaBuilder.or(criteriaBuilder.like(root.get(\"postType\"), postType)));\n-            }\n+        return (root, criteriaQuery, criteriaBuilder) ->\n+                criteriaBuilder.like(criteriaBuilder.lower(root.get(\"postContent\")), \"%\" + keyword.toLowerCase() + \"%\");\n+    }\n \n-            if (postStatus != null) {\n-                predicates.add(criteriaBuilder.equal(root.get(\"postStatus\"), postStatus));\n-                predicates.add(criteriaBuilder.or(criteriaBuilder.like(root.get(\"postStatus\"), postType)));\n-            }\n+    private Specification<Post> postTitleLike(@NonNull String keyword) {\n+        Assert.hasText(keyword, \"Keyword must not be blank\");\n+\n+        return (root, criteriaQuery, criteriaBuilder) ->\n+                criteriaBuilder.like(criteriaBuilder.lower(root.get(\"postTitle\")), \"%\" + keyword.toLowerCase() + \"%\");\n+    }\n \n-            return criteriaQuery.where(predicates.toArray(new Predicate[0])).getRestriction();\n-        };\n+    private Specification<Post> postTypeEqual(@NonNull String postType) {\n+        return (root, criteriaQuery, criteriaBuilder) -> criteriaBuilder.equal(root.get(\"postType\"), postType);\n     }\n \n+    private Specification<Post> postStatusEqual(@NonNull Integer postStatus) {\n+        return (root, criteriaQuery, criteriaBuilder) -> criteriaBuilder.equal(root.get(\"postStatus\"), postStatus);\n+    }\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/AttachmentController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/AttachmentController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/AttachmentController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/AttachmentController.java\n@@ -8,12 +8,10 @@\n import cc.ryanc.halo.service.AttachmentService;\n import cc.ryanc.halo.service.LogsService;\n import cc.ryanc.halo.utils.LocaleMessageUtil;\n-import cn.hutool.core.date.DateUtil;\n import cn.hutool.core.util.StrUtil;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.data.domain.Page;\n-import org.springframework.data.domain.PageRequest;\n import org.springframework.data.domain.Pageable;\n import org.springframework.data.domain.Sort;\n import org.springframework.data.web.PageableDefault;\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java\n@@ -110,7 +110,8 @@ public String searchPost(Model model,\n                              @RequestParam(value = \"keyword\") String keyword,\n                              @PageableDefault(sort = \"postId\", direction = DESC) Pageable pageable) {\n         try {\n-            model.addAttribute(\"posts\", postService.searchPosts(keyword, PostTypeEnum.POST_TYPE_POST.getDesc(), PostStatusEnum.PUBLISHED.getCode(), pageable));\n+            Page<Post> posts = postService.searchPostsBy(keyword, PostTypeEnum.POST_TYPE_POST.getDesc(), PostStatusEnum.PUBLISHED.getCode(), pageable);\n+            model.addAttribute(\"posts\", posts);\n         } catch (Exception e) {\n             log.error(\"未知错误：{}\", e.getMessage());\n         }\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/front/FrontSearchController.java b/src/main/java/cc/ryanc/halo/web/controller/front/FrontSearchController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/front/FrontSearchController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/front/FrontSearchController.java\n@@ -73,7 +73,10 @@ public String search(Model model,\n             size = Integer.parseInt(HaloConst.OPTIONS.get(BlogPropertiesEnum.INDEX_POSTS.getProp()));\n         }\n         final Pageable pageable = PageRequest.of(page - 1, size, sort);\n-        final Page<Post> posts = postService.searchPosts(HtmlUtil.escape(keyword), PostTypeEnum.POST_TYPE_POST.getDesc(), PostStatusEnum.PUBLISHED.getCode(), pageable);\n+        final Page<Post> posts = postService.searchPostsBy(HtmlUtil.escape(keyword), PostTypeEnum.POST_TYPE_POST.getDesc(), PostStatusEnum.PUBLISHED.getCode(), pageable);\n+\n+        log.debug(\"Search posts result: [{}]\", posts);\n+\n         final int[] rainbow = PageUtil.rainbow(page, posts.getTotalPages(), 3);\n         model.addAttribute(\"is_search\", true);\n         model.addAttribute(\"keyword\", keyword);",
    "output": "Enhance post search method"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/repository/PostRepository.java b/src/main/java/cc/ryanc/halo/repository/PostRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/PostRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/PostRepository.java\n@@ -5,7 +5,9 @@\n import cc.ryanc.halo.model.domain.Tag;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.Pageable;\n+import org.springframework.data.jpa.domain.Specification;\n import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.JpaSpecificationExecutor;\n import org.springframework.data.jpa.repository.Query;\n import org.springframework.data.repository.query.Param;\n \n@@ -20,7 +22,7 @@\n  * @author : RYAN0UP\n  * @date : 2017/11/14\n  */\n-public interface PostRepository extends JpaRepository<Post, Long> {\n+public interface PostRepository extends JpaRepository<Post, Long>, JpaSpecificationExecutor<Post> {\n \n     /**\n      * 查询前五条文章\n@@ -50,6 +52,7 @@ public interface PostRepository extends JpaRepository<Post, Long> {\n      * @param pageable    pageable\n      * @return Page\n      */\n+    @Deprecated\n     Page<Post> findByPostTypeAndPostStatusAndPostTitleLikeOrPostTypeAndPostStatusAndPostContentLike(\n             String postType0,\n             Integer postStatus0,\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/PostService.java b/src/main/java/cc/ryanc/halo/service/PostService.java\n--- a/src/main/java/cc/ryanc/halo/service/PostService.java\n+++ b/src/main/java/cc/ryanc/halo/service/PostService.java\n@@ -6,6 +6,7 @@\n import cc.ryanc.halo.model.dto.Archive;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.Pageable;\n+import org.springframework.lang.NonNull;\n import org.springframework.web.bind.annotation.RequestParam;\n \n import java.util.Date;\n@@ -70,9 +71,24 @@ public interface PostService {\n      * @param postStatus 文章状态\n      * @param pageable   分页信息\n      * @return Page\n+     * @see PostService#searchPostsBy(java.lang.String, java.lang.String, java.lang.Integer, org.springframework.data.domain.Pageable)\n      */\n+    @Deprecated\n     Page<Post> searchPosts(String keyword, String postType, Integer postStatus, Pageable pageable);\n \n+    /**\n+     * 模糊查询文章\n+     *\n+     * @param keyword    关键词\n+     * @param postType   文章类型\n+     * @param postStatus 文章状态\n+     * @param pageable   分页信息\n+     * @return a page of posts\n+     */\n+    @NonNull\n+    Page<Post> searchPostsBy(String keyword, String postType, Integer postStatus, @NonNull Pageable pageable);\n+\n+\n     /**\n      * 根据文章状态查询 分页，用于后台管理\n      *\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java\n@@ -13,7 +13,6 @@\n import cc.ryanc.halo.service.PostService;\n import cc.ryanc.halo.service.TagService;\n import cc.ryanc.halo.utils.HaloUtils;\n-import cn.hutool.core.date.DateUtil;\n import cn.hutool.core.util.StrUtil;\n import cn.hutool.http.HtmlUtil;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -22,12 +21,14 @@\n import org.springframework.cache.annotation.Cacheable;\n import org.springframework.data.domain.Page;\n import org.springframework.data.domain.Pageable;\n+import org.springframework.data.jpa.domain.Specification;\n+import org.springframework.lang.NonNull;\n+import org.springframework.lang.Nullable;\n import org.springframework.stereotype.Service;\n+import org.springframework.util.StringUtils;\n \n-import java.util.ArrayList;\n-import java.util.Date;\n-import java.util.List;\n-import java.util.Optional;\n+import javax.persistence.criteria.Predicate;\n+import java.util.*;\n \n /**\n  * <pre>\n@@ -165,6 +166,17 @@ public Page<Post> searchPosts(String keyword, String postType, Integer postStatu\n         return posts;\n     }\n \n+    @Override\n+    public Page<Post> searchPostsBy(String keyword, String postType, Integer postStatus, Pageable pageable) {\n+        return postRepository.findAll(buildSearchSepcification(keyword, postType, postStatus), pageable)\n+                .map(post -> {\n+                    if (StrUtil.isNotEmpty(post.getPostPassword())) {\n+                        post.setPostSummary(\"该文章为加密文章\");\n+                    }\n+                    return post;\n+                });\n+    }\n+\n     /**\n      * 根据文章状态查询 分页，用于后台管理\n      *\n@@ -397,7 +409,6 @@ public Page<Post> findPostByYearAndMonth(String year, String month, Pageable pag\n      * 根据分类目录查询文章\n      *\n      * @param category category\n-     * @param status   status\n      * @param pageable pageable\n      * @return Page\n      */\n@@ -417,7 +428,6 @@ public Page<Post> findPostByCategories(Category category, Pageable pageable) {\n      * 根据标签查询文章，分页\n      *\n      * @param tag      tag\n-     * @param status   status\n      * @param pageable pageable\n      * @return Page\n      */\n@@ -563,4 +573,28 @@ public Post buildCategoriesAndTags(Post post, List<String> cateList, String tagL\n     public List<Post> getRecentPosts(int limit) {\n         return postRepository.getPostsByLimit(limit);\n     }\n+\n+    @NonNull\n+    private Specification<Post> buildSearchSepcification(@Nullable String keyword, @Nullable String postType, @Nullable Integer postStatus) {\n+        return (Specification<Post>) (root, criteriaQuery, criteriaBuilder) -> {\n+            List<Predicate> predicates = new LinkedList<>();\n+\n+            if (StringUtils.hasText(keyword)) {\n+                predicates.add(criteriaBuilder.like(root.get(\"postContent\"), keyword));\n+            }\n+\n+            if (StringUtils.hasText(postType)) {\n+                predicates.add(criteriaBuilder.equal(root.get(\"postType\"), postType));\n+                predicates.add(criteriaBuilder.or(criteriaBuilder.like(root.get(\"postType\"), postType)));\n+            }\n+\n+            if (postStatus != null) {\n+                predicates.add(criteriaBuilder.equal(root.get(\"postStatus\"), postStatus));\n+                predicates.add(criteriaBuilder.or(criteriaBuilder.like(root.get(\"postStatus\"), postType)));\n+            }\n+\n+            return criteriaQuery.where(predicates.toArray(new Predicate[0])).getRestriction();\n+        };\n+    }\n+\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/PostController.java\n@@ -209,7 +209,6 @@ public JsonResult save(@ModelAttribute Post post,\n      * @param post     post\n      * @param cateList 分类目录\n      * @param tagList  标签\n-     * @param session  session\n      * @return JsonResult\n      */\n     @PostMapping(value = \"/update\")",
    "output": "Consider Specification to refactor search method on PostService"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/repository/PostRepository.java b/src/main/java/cc/ryanc/halo/repository/PostRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/PostRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/PostRepository.java\n@@ -234,7 +234,7 @@ public interface PostRepository extends JpaRepository<Post, Long> {\n      *\n      * @return Long\n      */\n-    @Query(value = \"SELECT SUM(POST_VIEWS) FROM halo_post\", nativeQuery = true)\n+    @Query(value = \"SELECT SUM(post_views) FROM halo_post\", nativeQuery = true)\n     Long getPostViewsSum();\n \n     /**",
    "output": "Update PostRepository.java"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/repository/PostRepository.java b/src/main/java/cc/ryanc/halo/repository/PostRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/PostRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/PostRepository.java\n@@ -234,7 +234,7 @@ public interface PostRepository extends JpaRepository<Post, Long> {\n      *\n      * @return Long\n      */\n-    @Query(value = \"SELECT SUM(POST_VIEWS) FROM HALO_POST\", nativeQuery = true)\n+    @Query(value = \"SELECT SUM(POST_VIEWS) FROM halo_post\", nativeQuery = true)\n     Long getPostViewsSum();\n \n     /**",
    "output": "Update PostRepository.java"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/repository/LogsRepository.java b/src/main/java/cc/ryanc/halo/repository/LogsRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/LogsRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/LogsRepository.java\n@@ -21,6 +21,6 @@ public interface LogsRepository extends JpaRepository<Logs, Long> {\n      *\n      * @return List\n      */\n-    @Query(value = \"SELECT * FROM halo_logs ORDER BY log_created DESC LIMIT 5\", nativeQuery = true)\n+    @Query(value = \"SELECT * FROM HALO_LOGS ORDER BY LOG_CREATED DESC LIMIT 5\", nativeQuery = true)\n     List<Logs> findTopFive();\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/repository/PostRepository.java b/src/main/java/cc/ryanc/halo/repository/PostRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/PostRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/PostRepository.java\n@@ -119,15 +119,15 @@ public interface PostRepository extends JpaRepository<Post, Long> {\n      *\n      * @return List\n      */\n-    @Query(value = \"select year(post_date) as year,month(post_date) as month,count(*) as count from halo_post where post_status=0 and post_type='post' group by year(post_date),month(post_date) order by year desc,month desc\", nativeQuery = true)\n+    @Query(value = \"SELECT YEAR(POST_DATE) AS YEAR,MONTH(POST_DATE) AS MONTH,COUNT(*) AS COUNT FROM HALO_POST WHERE POST_STATUS=0 and POST_TYPE='post' GROUP BY YEAR(post_date),MONTH(POST_DATE) ORDER BY YEAR DESC,MONTH DESC\", nativeQuery = true)\n     List<Object[]> findPostGroupByYearAndMonth();\n \n     /**\n      * 查询文章归档信息 根据年份\n      *\n      * @return List\n      */\n-    @Query(value = \"select year(post_date) as year,count(*) as count from halo_post where post_status=0 and post_type='post' group by year(post_date) order by year desc\", nativeQuery = true)\n+    @Query(value = \"SELECT YEAR(POST_DATE) AS YEAR,COUNT(*) AS COUNT FROM HALO_POST WHERE POST_STATUS=0 AND POST_TYPE='post' GROUP BY YEAR(POST_DATE) ORDER BY YEAR DESC\", nativeQuery = true)\n     List<Object[]> findPostGroupByYear();\n \n     /**\n@@ -137,7 +137,7 @@ public interface PostRepository extends JpaRepository<Post, Long> {\n      * @param month month\n      * @return List\n      */\n-    @Query(value = \"select *,year(post_date) as year,month(post_date) as month from halo_post where post_status=0 and post_type='post' and year(post_date)=:year and month(post_date)=:month order by post_date desc\", nativeQuery = true)\n+    @Query(value = \"SELECT *,YEAR(POST_DATE) AS YEAR,MONTH(POST_DATE) AS MONTH FROM HALO_POST WHERE POST_STATUS=0 and POST_TYPE='post' AND YEAR(POST_DATE)=:year AND MONTH(POST_DATE)=:month ORDER BY POST_DATE DESC\", nativeQuery = true)\n     List<Post> findPostByYearAndMonth(@Param(\"year\") String year, @Param(\"month\") String month);\n \n     /**\n@@ -146,7 +146,7 @@ public interface PostRepository extends JpaRepository<Post, Long> {\n      * @param year year\n      * @return List\n      */\n-    @Query(value = \"select *,year(post_date) as year from halo_post where post_status=0 and post_type='post' and year(post_date)=:year order by post_date desc\", nativeQuery = true)\n+    @Query(value = \"SELECT *,YEAR(post_date) AS YEAR FROM HALO_POST WHERE POST_STATUS=0 AND POST_TYPE='post' AND YEAR(POST_DATE)=:year ORDER BY POST_DATE DESC\", nativeQuery = true)\n     List<Post> findPostByYear(@Param(\"year\") String year);\n \n     /**\n@@ -157,7 +157,7 @@ public interface PostRepository extends JpaRepository<Post, Long> {\n      * @param pageable pageable\n      * @return Page\n      */\n-    @Query(value = \"select * from halo_post where post_status=0 and post_type='post' and year(post_date)=:year and month(post_date)=:month order by post_date desc\", countQuery = \"select count(*) from halo_post where post_status=0 and year(post_date)=:year and month(post_date)=:month\", nativeQuery = true)\n+    @Query(value = \"SELECT * FROM HALO_POST WHERE POST_STATUS=0 and POST_TYPE='post' AND YEAR(POST_DATE)=:year AND MONTH(POST_DATE)=:month ORDER BY POST_DATE DESC\", countQuery = \"SELECT COUNT(*) FROM HALO_POST WHERE POST_STATUS=0 AND YEAR(POST_DATE)=:year AND MONTH(POST_DATE)=:month\", nativeQuery = true)\n     Page<Post> findPostByYearAndMonth(@Param(\"year\") String year, @Param(\"month\") String month, Pageable pageable);\n \n     /**",
    "output": ":sparkles: 2019,Happy New Year!"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/service/impl/AttachmentServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/AttachmentServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/AttachmentServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/AttachmentServiceImpl.java\n@@ -129,7 +129,7 @@ public Map<String, String> upload(MultipartFile file, HttpServletRequest request\n         Map<String, String> resultMap;\n         String attachLoc = HaloConst.OPTIONS.get(BlogPropertiesEnum.ATTACH_LOC.getProp());\n         if (StrUtil.isEmpty(attachLoc)) {\n-            return null;\n+            attachLoc = \"server\";\n         }\n         switch (attachLoc) {\n             case \"server\":",
    "output": ":bookmark: 0.2.0"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/web/controller/api/ApiPageController.java b/src/main/java/cc/ryanc/halo/web/controller/api/ApiPageController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/api/ApiPageController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/api/ApiPageController.java\n@@ -34,6 +34,7 @@ public class ApiPageController {\n     public JsonResult pages(@PathVariable(value = \"postId\") Long postId) {\n         Post post = postService.findByPostId(postId, PostTypeEnum.POST_TYPE_PAGE.getDesc());\n         if (null != post) {\n+            postService.cacheViews(post.getPostId());\n             return new JsonResult(ResponseStatusEnum.SUCCESS.getCode(), ResponseStatusEnum.SUCCESS.getMsg(), post);\n         } else {\n             return new JsonResult(ResponseStatusEnum.NOTFOUND.getCode(), ResponseStatusEnum.NOTFOUND.getMsg());\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/api/ApiPostController.java b/src/main/java/cc/ryanc/halo/web/controller/api/ApiPostController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/api/ApiPostController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/api/ApiPostController.java\n@@ -16,8 +16,6 @@\n import org.springframework.data.domain.Sort;\n import org.springframework.web.bind.annotation.*;\n \n-import java.util.List;\n-\n /**\n  * <pre>\n  *     文章API\n@@ -43,7 +41,7 @@ public class ApiPostController {\n     @GetMapping(value = \"/page/{page}\")\n     public JsonResult posts(@PathVariable(value = \"page\") Integer page) {\n         Sort sort = new Sort(Sort.Direction.DESC, \"postDate\");\n-        Integer size = 10;\n+        int size = 10;\n         if (StrUtil.isNotBlank(HaloConst.OPTIONS.get(BlogPropertiesEnum.INDEX_POSTS.getProp()))) {\n             size = Integer.parseInt(HaloConst.OPTIONS.get(BlogPropertiesEnum.INDEX_POSTS.getProp()));\n         }\n@@ -55,16 +53,6 @@ public JsonResult posts(@PathVariable(value = \"page\") Integer page) {\n         return new JsonResult(ResponseStatusEnum.SUCCESS.getCode(), ResponseStatusEnum.SUCCESS.getMsg(), posts);\n     }\n \n-    @GetMapping(value = \"/hot\")\n-    public JsonResult hotPosts() {\n-        List<Post> posts = postService.hotPosts();\n-        if (null != posts && posts.size() > 0) {\n-            return new JsonResult(ResponseStatusEnum.SUCCESS.getCode(), ResponseStatusEnum.SUCCESS.getMsg(), posts);\n-        } else {\n-            return new JsonResult(ResponseStatusEnum.EMPTY.getCode(), ResponseStatusEnum.EMPTY.getMsg());\n-        }\n-    }\n-\n     /**\n      * 获取单个文章信息\n      *\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/core/InstallController.java b/src/main/java/cc/ryanc/halo/web/controller/core/InstallController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/core/InstallController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/core/InstallController.java\n@@ -4,6 +4,7 @@\n import cc.ryanc.halo.model.dto.HaloConst;\n import cc.ryanc.halo.model.dto.LogsRecord;\n import cc.ryanc.halo.model.enums.AllowCommentEnum;\n+import cc.ryanc.halo.model.enums.AttachLocationEnum;\n import cc.ryanc.halo.model.enums.BlogPropertiesEnum;\n import cc.ryanc.halo.model.enums.TrueFalseEnum;\n import cc.ryanc.halo.service.*;\n@@ -20,7 +21,9 @@\n \n import javax.servlet.http.HttpServletRequest;\n import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n \n /**\n  * <pre>\n@@ -156,27 +159,19 @@ public boolean doInstall(@RequestParam(\"blogLocale\") String blogLocale,\n             comment.setIsAdmin(0);\n             commentService.save(comment);\n \n-            optionsService.saveOption(BlogPropertiesEnum.IS_INSTALL.getProp(), TrueFalseEnum.TRUE.getDesc());\n-\n-            //语言设置\n-            optionsService.saveOption(BlogPropertiesEnum.BLOG_LOCALE.getProp(), blogLocale);\n-            //保存博客标题和博客地址设置\n-            optionsService.saveOption(BlogPropertiesEnum.BLOG_TITLE.getProp(), blogTitle);\n-            optionsService.saveOption(BlogPropertiesEnum.BLOG_URL.getProp(), blogUrl);\n-\n-            //设置默认主题\n-            optionsService.saveOption(BlogPropertiesEnum.THEME.getProp(), \"anatole\");\n-\n-            //建立网站时间\n-            optionsService.saveOption(BlogPropertiesEnum.BLOG_START.getProp(), DateUtil.format(DateUtil.date(), \"yyyy-MM-dd\"));\n-\n-            //默认不配置邮件系统\n-            optionsService.saveOption(BlogPropertiesEnum.SMTP_EMAIL_ENABLE.getProp(), TrueFalseEnum.FALSE.getDesc());\n-\n-            //新评论，审核通过，回复，默认不通知\n-            optionsService.saveOption(BlogPropertiesEnum.NEW_COMMENT_NOTICE.getProp(), TrueFalseEnum.FALSE.getDesc());\n-            optionsService.saveOption(BlogPropertiesEnum.COMMENT_PASS_NOTICE.getProp(), TrueFalseEnum.FALSE.getDesc());\n-            optionsService.saveOption(BlogPropertiesEnum.COMMENT_REPLY_NOTICE.getProp(), TrueFalseEnum.FALSE.getDesc());\n+            Map<String, String> options = new HashMap<>();\n+            options.put(BlogPropertiesEnum.IS_INSTALL.getProp(), TrueFalseEnum.TRUE.getDesc());\n+            options.put(BlogPropertiesEnum.BLOG_LOCALE.getProp(), blogLocale);\n+            options.put(BlogPropertiesEnum.BLOG_TITLE.getProp(), blogTitle);\n+            options.put(BlogPropertiesEnum.BLOG_URL.getProp(), blogUrl);\n+            options.put(BlogPropertiesEnum.THEME.getProp(), \"anatole\");\n+            options.put(BlogPropertiesEnum.BLOG_START.getProp(), DateUtil.format(DateUtil.date(), \"yyyy-MM-dd\"));\n+            options.put(BlogPropertiesEnum.SMTP_EMAIL_ENABLE.getProp(), TrueFalseEnum.FALSE.getDesc());\n+            options.put(BlogPropertiesEnum.NEW_COMMENT_NOTICE.getProp(), TrueFalseEnum.FALSE.getDesc());\n+            options.put(BlogPropertiesEnum.COMMENT_PASS_NOTICE.getProp(), TrueFalseEnum.FALSE.getDesc());\n+            options.put(BlogPropertiesEnum.COMMENT_REPLY_NOTICE.getProp(), TrueFalseEnum.FALSE.getDesc());\n+            options.put(BlogPropertiesEnum.ATTACH_LOC.getProp(), AttachLocationEnum.SERVER.getDesc());\n+            optionsService.saveOptions(options);\n \n             //更新日志\n             logsService.save(LogsRecord.INSTALL, \"安装成功，欢迎使用Halo。\", request);\n@@ -197,8 +192,7 @@ public boolean doInstall(@RequestParam(\"blogLocale\") String blogLocale,\n \n             HaloConst.OPTIONS.clear();\n             HaloConst.OPTIONS = optionsService.findAllOptions();\n-\n-            configuration.setSharedVariable(\"options\", optionsService.findAllOptions());\n+            configuration.setSharedVariable(\"options\", HaloConst.OPTIONS);\n             configuration.setSharedVariable(\"user\", userService.findUser());\n         } catch (Exception e) {\n             log.error(e.getMessage());",
    "output": "0.1.1"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/config/MvcConfig.java b/src/main/java/cc/ryanc/halo/config/MvcConfig.java\n--- a/src/main/java/cc/ryanc/halo/config/MvcConfig.java\n+++ b/src/main/java/cc/ryanc/halo/config/MvcConfig.java\n@@ -106,7 +106,8 @@ public void addCorsMappings(CorsRegistry registry) {\n                         \"access-control-allow-methods\",\n                         \"access-control-allow-origin\",\n                         \"access-control-max-age\",\n-                        \"X-Frame-Options\")\n+                        \"X-Frame-Options\",\n+                        \"token\")\n                 .allowCredentials(false).maxAge(3600);\n     }\n ",
    "output": "Update MvcConfig.java"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/config/MvcConfig.java b/src/main/java/cc/ryanc/halo/config/MvcConfig.java\n--- a/src/main/java/cc/ryanc/halo/config/MvcConfig.java\n+++ b/src/main/java/cc/ryanc/halo/config/MvcConfig.java\n@@ -99,10 +99,15 @@ public void addResourceHandlers(ResourceHandlerRegistry registry) {\n     @Override\n     public void addCorsMappings(CorsRegistry registry) {\n         registry.addMapping(\"/api/**\")\n-                .allowCredentials(true)\n                 .allowedHeaders(\"*\")\n                 .allowedOrigins(\"*\")\n-                .allowedMethods(\"*\");\n+                .allowedMethods(\"GET\", \"POST\")\n+                .exposedHeaders(\"access-control-allow-headers\",\n+                        \"access-control-allow-methods\",\n+                        \"access-control-allow-origin\",\n+                        \"access-control-max-age\",\n+                        \"X-Frame-Options\")\n+                .allowCredentials(false).maxAge(3600);\n     }\n \n     /**",
    "output": "Update MvcConfig.java"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/utils/CommentUtil.java b/src/main/java/cc/ryanc/halo/utils/CommentUtil.java\n--- a/src/main/java/cc/ryanc/halo/utils/CommentUtil.java\n+++ b/src/main/java/cc/ryanc/halo/utils/CommentUtil.java\n@@ -1,14 +1,17 @@\n package cc.ryanc.halo.utils;\n \n-import cc.ryanc.halo.model.domain.Comment;\n-\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n \n+import org.springframework.util.Assert;\n+import org.springframework.util.CollectionUtils;\n+\n+import cc.ryanc.halo.model.domain.Comment;\n+\n /**\n  * <pre>\n- *     拼装评论\n+ * 拼装评论\n  * </pre>\n  *\n  * @author : RYAN0UP\n@@ -23,6 +26,10 @@ public class CommentUtil {\n      * @return List\n      */\n     public static List<Comment> getComments(List<Comment> commentsRoot) {\n+        if (CollectionUtils.isEmpty(commentsRoot)) {\n+            return Collections.emptyList();\n+        }\n+\n         List<Comment> commentsResult = new ArrayList<>();\n \n         for (Comment comment : commentsRoot) {\n@@ -34,7 +41,7 @@ public static List<Comment> getComments(List<Comment> commentsRoot) {\n         for (Comment comment : commentsResult) {\n             comment.setChildComments(getChild(comment.getCommentId(), commentsRoot));\n         }\n-        //集合倒序，最新的评论在最前面\n+        // 集合倒序，最新的评论在最前面\n         Collections.reverse(commentsResult);\n         return commentsResult;\n     }\n@@ -47,6 +54,12 @@ public static List<Comment> getComments(List<Comment> commentsRoot) {\n      * @return List\n      */\n     private static List<Comment> getChild(Long id, List<Comment> commentsRoot) {\n+        Assert.notNull(id, \"comment id must not be null\");\n+\n+        if (CollectionUtils.isEmpty(commentsRoot)) {\n+            return null;\n+        }\n+\n         List<Comment> commentsChild = new ArrayList<>();\n         for (Comment comment : commentsRoot) {\n             if (comment.getCommentParent() != 0) {\n\ndiff --git a/src/main/java/cc/ryanc/halo/utils/HaloUtils.java b/src/main/java/cc/ryanc/halo/utils/HaloUtils.java\n--- a/src/main/java/cc/ryanc/halo/utils/HaloUtils.java\n+++ b/src/main/java/cc/ryanc/halo/utils/HaloUtils.java\n@@ -16,6 +16,8 @@\n import com.sun.syndication.io.WireFeedOutput;\n import io.github.biezhi.ome.OhMyEmail;\n import lombok.extern.slf4j.Slf4j;\n+\n+import org.springframework.util.Assert;\n import org.springframework.util.ResourceUtils;\n \n import javax.imageio.ImageIO;\n@@ -34,7 +36,7 @@\n \n /**\n  * <pre>\n- *     常用工具\n+ * 常用工具\n  * </pre>\n  *\n  * @author : RYAN0UP\n@@ -55,7 +57,7 @@ public static List<BackupDto> getBackUps(String dir) {\n         File[] files = srcPath.listFiles();\n         List<BackupDto> backupDtos = new ArrayList<>();\n         BackupDto backupDto = null;\n-        //遍历文件\n+        // 遍历文件\n         if (null != files) {\n             for (File file : files) {\n                 if (file.isFile()) {\n@@ -109,7 +111,8 @@ public static String parseSize(long size) {\n      */\n     public static Date getCreateTime(String srcPath) {\n         Path path = Paths.get(srcPath);\n-        BasicFileAttributeView basicview = Files.getFileAttributeView(path, BasicFileAttributeView.class, LinkOption.NOFOLLOW_LINKS);\n+        BasicFileAttributeView basicview = Files.getFileAttributeView(path, BasicFileAttributeView.class,\n+                LinkOption.NOFOLLOW_LINKS);\n         BasicFileAttributes attr;\n         try {\n             attr = basicview.readAttributes();\n@@ -147,9 +150,9 @@ public static String getImageWh(File file) {\n     public static List<Theme> getThemes() {\n         List<Theme> themes = new ArrayList<>();\n         try {\n-            //获取项目根路径\n+            // 获取项目根路径\n             File basePath = new File(ResourceUtils.getURL(\"classpath:\").getPath());\n-            //获取主题路径\n+            // 获取主题路径\n             File themesPath = new File(basePath.getAbsolutePath(), \"templates/themes\");\n             File[] files = themesPath.listFiles();\n             if (null != files) {\n@@ -161,7 +164,8 @@ public static List<Theme> getThemes() {\n                         }\n                         theme = new Theme();\n                         theme.setThemeName(file.getName());\n-                        File optionsPath = new File(themesPath.getAbsolutePath(), file.getName() + \"/module/options.ftl\");\n+                        File optionsPath = new File(themesPath.getAbsolutePath(),\n+                                file.getName() + \"/module/options.ftl\");\n                         if (optionsPath.exists()) {\n                             theme.setHasOptions(true);\n                         } else {\n@@ -192,9 +196,9 @@ public static List<Theme> getThemes() {\n     public static List<String> getTplName(String theme) {\n         List<String> tpls = new ArrayList<>();\n         try {\n-            //获取项目根路径\n+            // 获取项目根路径\n             File basePath = new File(ResourceUtils.getURL(\"classpath:\").getPath());\n-            //获取主题路径\n+            // 获取主题路径\n             File themesPath = new File(basePath.getAbsolutePath(), \"templates/themes/\" + theme);\n             File modulePath = new File(themesPath.getAbsolutePath(), \"module\");\n             File[] baseFiles = themesPath.listFiles();\n@@ -220,16 +224,15 @@ public static List<String> getTplName(String theme) {\n     }\n \n     /**\n-     * 获取定制模板\n-     * 格式 page_xxx\n+     * 获取定制模板 格式 page_xxx\n      *\n      * @return List\n      */\n     public static List<String> getCustomTpl(String theme) {\n         List<String> tpls = new ArrayList<>();\n         try {\n             File basePath = new File(ResourceUtils.getURL(\"classpath:\").getPath());\n-            //获取主题路径\n+            // 获取主题路径\n             File themePath = new File(basePath.getAbsolutePath(), \"templates/themes/\" + theme);\n             File[] themeFiles = themePath.listFiles();\n             if (null != themeFiles && themeFiles.length > 0) {\n@@ -284,6 +287,8 @@ public static void postToFile(String data, String filePath, String fileName) thr\n      * @throws FeedException\n      */\n     public static String getRss(List<Post> posts) throws FeedException {\n+        Assert.notEmpty(posts, \"posts must not be empty\");\n+\n         Channel channel = new Channel(\"rss_2.0\");\n         if (null == HaloConst.OPTIONS.get(BlogPropertiesEnum.BLOG_TITLE.getProp())) {\n             channel.setTitle(\"\");\n@@ -318,7 +323,8 @@ public static String getRss(List<Post> posts) throws FeedException {\n             value = new String(xmlChar);\n             content.setValue(value);\n             item.setContent(content);\n-            item.setLink(HaloConst.OPTIONS.get(BlogPropertiesEnum.BLOG_URL.getProp()) + \"/archives/\" + post.getPostUrl());\n+            item.setLink(\n+                    HaloConst.OPTIONS.get(BlogPropertiesEnum.BLOG_URL.getProp()) + \"/archives/\" + post.getPostUrl());\n             item.setPubDate(post.getPostDate());\n             items.add(item);\n         }\n@@ -334,12 +340,15 @@ public static String getRss(List<Post> posts) throws FeedException {\n      * @return String\n      */\n     public static String getSiteMap(List<Post> posts) {\n+        Assert.notEmpty(posts, \"post mut not be empty\");\n+\n         String head = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<urlset xmlns=\\\"http://www.sitemaps.org/schemas/sitemap/0.9\\\">\";\n         String urlBody = \"\";\n         String urlItem;\n         String urlPath = HaloConst.OPTIONS.get(BlogPropertiesEnum.BLOG_URL.getProp()) + \"/archives/\";\n         for (Post post : posts) {\n-            urlItem = \"<url><loc>\" + urlPath + post.getPostUrl() + \"</loc><lastmod>\" + DateUtil.format(post.getPostDate(), \"yyyy-MM-dd'T'HH:mm:ss.SSSXXX\") + \"</lastmod>\" + \"</url>\";\n+            urlItem = \"<url><loc>\" + urlPath + post.getPostUrl() + \"</loc><lastmod>\"\n+                    + DateUtil.format(post.getPostDate(), \"yyyy-MM-dd'T'HH:mm:ss.SSSXXX\") + \"</lastmod>\" + \"</url>\";\n             urlBody += urlItem;\n         }\n         return head + urlBody + \"</urlset>\";\n@@ -365,6 +374,8 @@ public static void configMail(String smtpHost, String userName, String password)\n      * @return String\n      */\n     public static String getHttpResponse(String enterUrl) {\n+        Assert.hasText(enterUrl, \"enter url must not be blank\");\n+\n         BufferedReader in = null;\n         StringBuffer result = null;\n         try {\n@@ -396,7 +407,6 @@ public static String getHttpResponse(String enterUrl) {\n         return null;\n     }\n \n-\n     /**\n      * 百度主动推送\n      *\n@@ -406,29 +416,33 @@ public static String getHttpResponse(String enterUrl) {\n      * @return String\n      */\n     public static String baiduPost(String blogUrl, String token, String urls) {\n+        Assert.hasText(blogUrl, \"blog url must not be blank\");\n+        Assert.hasText(token, \"token must not be blank\");\n+        Assert.hasText(urls, \"urls must not be blank\");\n+\n         String url = \"http://data.zz.baidu.com/urls?site=\" + blogUrl + \"&token=\" + token;\n         String result = \"\";\n         PrintWriter out = null;\n         BufferedReader in = null;\n         try {\n-            //建立URL之间的连接\n+            // 建立URL之间的连接\n             URLConnection conn = new URL(url).openConnection();\n-            //设置通用的请求属性\n+            // 设置通用的请求属性\n             conn.setRequestProperty(\"Host\", \"data.zz.baidu.com\");\n             conn.setRequestProperty(\"User-Agent\", \"curl/7.12.1\");\n             conn.setRequestProperty(\"Content-Length\", \"83\");\n             conn.setRequestProperty(\"Content-Type\", \"text/plain\");\n \n-            //发送POST请求必须设置如下两行\n+            // 发送POST请求必须设置如下两行\n             conn.setDoInput(true);\n             conn.setDoOutput(true);\n \n-            //获取conn对应的输出流\n+            // 获取conn对应的输出流\n             out = new PrintWriter(conn.getOutputStream());\n             out.print(urls.trim());\n-            //进行输出流的缓冲\n+            // 进行输出流的缓冲\n             out.flush();\n-            //通过BufferedReader输入流来读取Url的响应\n+            // 通过BufferedReader输入流来读取Url的响应\n             in = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n             String line;\n             while ((line = in.readLine()) != null) {",
    "output": "Merge pull request #41 from JohnNiang/dev\n\nEnhance utils"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/utils/CommentUtil.java b/src/main/java/cc/ryanc/halo/utils/CommentUtil.java\n--- a/src/main/java/cc/ryanc/halo/utils/CommentUtil.java\n+++ b/src/main/java/cc/ryanc/halo/utils/CommentUtil.java\n@@ -1,14 +1,17 @@\n package cc.ryanc.halo.utils;\n \n-import cc.ryanc.halo.model.domain.Comment;\n-\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n \n+import org.springframework.util.Assert;\n+import org.springframework.util.CollectionUtils;\n+\n+import cc.ryanc.halo.model.domain.Comment;\n+\n /**\n  * <pre>\n- *     拼装评论\n+ * 拼装评论\n  * </pre>\n  *\n  * @author : RYAN0UP\n@@ -23,6 +26,10 @@ public class CommentUtil {\n      * @return List\n      */\n     public static List<Comment> getComments(List<Comment> commentsRoot) {\n+        if (CollectionUtils.isEmpty(commentsRoot)) {\n+            return Collections.emptyList();\n+        }\n+\n         List<Comment> commentsResult = new ArrayList<>();\n \n         for (Comment comment : commentsRoot) {\n@@ -34,7 +41,7 @@ public static List<Comment> getComments(List<Comment> commentsRoot) {\n         for (Comment comment : commentsResult) {\n             comment.setChildComments(getChild(comment.getCommentId(), commentsRoot));\n         }\n-        //集合倒序，最新的评论在最前面\n+        // 集合倒序，最新的评论在最前面\n         Collections.reverse(commentsResult);\n         return commentsResult;\n     }\n@@ -47,6 +54,12 @@ public static List<Comment> getComments(List<Comment> commentsRoot) {\n      * @return List\n      */\n     private static List<Comment> getChild(Long id, List<Comment> commentsRoot) {\n+        Assert.notNull(id, \"comment id must not be null\");\n+\n+        if (CollectionUtils.isEmpty(commentsRoot)) {\n+            return null;\n+        }\n+\n         List<Comment> commentsChild = new ArrayList<>();\n         for (Comment comment : commentsRoot) {\n             if (comment.getCommentParent() != 0) {\n\ndiff --git a/src/main/java/cc/ryanc/halo/utils/HaloUtils.java b/src/main/java/cc/ryanc/halo/utils/HaloUtils.java\n--- a/src/main/java/cc/ryanc/halo/utils/HaloUtils.java\n+++ b/src/main/java/cc/ryanc/halo/utils/HaloUtils.java\n@@ -16,6 +16,8 @@\n import com.sun.syndication.io.WireFeedOutput;\n import io.github.biezhi.ome.OhMyEmail;\n import lombok.extern.slf4j.Slf4j;\n+\n+import org.springframework.util.Assert;\n import org.springframework.util.ResourceUtils;\n \n import javax.imageio.ImageIO;\n@@ -34,7 +36,7 @@\n \n /**\n  * <pre>\n- *     常用工具\n+ * 常用工具\n  * </pre>\n  *\n  * @author : RYAN0UP\n@@ -55,7 +57,7 @@ public static List<BackupDto> getBackUps(String dir) {\n         File[] files = srcPath.listFiles();\n         List<BackupDto> backupDtos = new ArrayList<>();\n         BackupDto backupDto = null;\n-        //遍历文件\n+        // 遍历文件\n         if (null != files) {\n             for (File file : files) {\n                 if (file.isFile()) {\n@@ -109,7 +111,8 @@ public static String parseSize(long size) {\n      */\n     public static Date getCreateTime(String srcPath) {\n         Path path = Paths.get(srcPath);\n-        BasicFileAttributeView basicview = Files.getFileAttributeView(path, BasicFileAttributeView.class, LinkOption.NOFOLLOW_LINKS);\n+        BasicFileAttributeView basicview = Files.getFileAttributeView(path, BasicFileAttributeView.class,\n+                LinkOption.NOFOLLOW_LINKS);\n         BasicFileAttributes attr;\n         try {\n             attr = basicview.readAttributes();\n@@ -147,9 +150,9 @@ public static String getImageWh(File file) {\n     public static List<Theme> getThemes() {\n         List<Theme> themes = new ArrayList<>();\n         try {\n-            //获取项目根路径\n+            // 获取项目根路径\n             File basePath = new File(ResourceUtils.getURL(\"classpath:\").getPath());\n-            //获取主题路径\n+            // 获取主题路径\n             File themesPath = new File(basePath.getAbsolutePath(), \"templates/themes\");\n             File[] files = themesPath.listFiles();\n             if (null != files) {\n@@ -161,7 +164,8 @@ public static List<Theme> getThemes() {\n                         }\n                         theme = new Theme();\n                         theme.setThemeName(file.getName());\n-                        File optionsPath = new File(themesPath.getAbsolutePath(), file.getName() + \"/module/options.ftl\");\n+                        File optionsPath = new File(themesPath.getAbsolutePath(),\n+                                file.getName() + \"/module/options.ftl\");\n                         if (optionsPath.exists()) {\n                             theme.setHasOptions(true);\n                         } else {\n@@ -192,9 +196,9 @@ public static List<Theme> getThemes() {\n     public static List<String> getTplName(String theme) {\n         List<String> tpls = new ArrayList<>();\n         try {\n-            //获取项目根路径\n+            // 获取项目根路径\n             File basePath = new File(ResourceUtils.getURL(\"classpath:\").getPath());\n-            //获取主题路径\n+            // 获取主题路径\n             File themesPath = new File(basePath.getAbsolutePath(), \"templates/themes/\" + theme);\n             File modulePath = new File(themesPath.getAbsolutePath(), \"module\");\n             File[] baseFiles = themesPath.listFiles();\n@@ -220,16 +224,15 @@ public static List<String> getTplName(String theme) {\n     }\n \n     /**\n-     * 获取定制模板\n-     * 格式 page_xxx\n+     * 获取定制模板 格式 page_xxx\n      *\n      * @return List\n      */\n     public static List<String> getCustomTpl(String theme) {\n         List<String> tpls = new ArrayList<>();\n         try {\n             File basePath = new File(ResourceUtils.getURL(\"classpath:\").getPath());\n-            //获取主题路径\n+            // 获取主题路径\n             File themePath = new File(basePath.getAbsolutePath(), \"templates/themes/\" + theme);\n             File[] themeFiles = themePath.listFiles();\n             if (null != themeFiles && themeFiles.length > 0) {\n@@ -284,6 +287,8 @@ public static void postToFile(String data, String filePath, String fileName) thr\n      * @throws FeedException\n      */\n     public static String getRss(List<Post> posts) throws FeedException {\n+        Assert.notEmpty(posts, \"posts must not be empty\");\n+\n         Channel channel = new Channel(\"rss_2.0\");\n         if (null == HaloConst.OPTIONS.get(BlogPropertiesEnum.BLOG_TITLE.getProp())) {\n             channel.setTitle(\"\");\n@@ -318,7 +323,8 @@ public static String getRss(List<Post> posts) throws FeedException {\n             value = new String(xmlChar);\n             content.setValue(value);\n             item.setContent(content);\n-            item.setLink(HaloConst.OPTIONS.get(BlogPropertiesEnum.BLOG_URL.getProp()) + \"/archives/\" + post.getPostUrl());\n+            item.setLink(\n+                    HaloConst.OPTIONS.get(BlogPropertiesEnum.BLOG_URL.getProp()) + \"/archives/\" + post.getPostUrl());\n             item.setPubDate(post.getPostDate());\n             items.add(item);\n         }\n@@ -334,12 +340,15 @@ public static String getRss(List<Post> posts) throws FeedException {\n      * @return String\n      */\n     public static String getSiteMap(List<Post> posts) {\n+        Assert.notEmpty(posts, \"post mut not be empty\");\n+\n         String head = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<urlset xmlns=\\\"http://www.sitemaps.org/schemas/sitemap/0.9\\\">\";\n         String urlBody = \"\";\n         String urlItem;\n         String urlPath = HaloConst.OPTIONS.get(BlogPropertiesEnum.BLOG_URL.getProp()) + \"/archives/\";\n         for (Post post : posts) {\n-            urlItem = \"<url><loc>\" + urlPath + post.getPostUrl() + \"</loc><lastmod>\" + DateUtil.format(post.getPostDate(), \"yyyy-MM-dd'T'HH:mm:ss.SSSXXX\") + \"</lastmod>\" + \"</url>\";\n+            urlItem = \"<url><loc>\" + urlPath + post.getPostUrl() + \"</loc><lastmod>\"\n+                    + DateUtil.format(post.getPostDate(), \"yyyy-MM-dd'T'HH:mm:ss.SSSXXX\") + \"</lastmod>\" + \"</url>\";\n             urlBody += urlItem;\n         }\n         return head + urlBody + \"</urlset>\";\n@@ -365,6 +374,8 @@ public static void configMail(String smtpHost, String userName, String password)\n      * @return String\n      */\n     public static String getHttpResponse(String enterUrl) {\n+        Assert.hasText(enterUrl, \"enter url must not be blank\");\n+\n         BufferedReader in = null;\n         StringBuffer result = null;\n         try {\n@@ -396,7 +407,6 @@ public static String getHttpResponse(String enterUrl) {\n         return null;\n     }\n \n-\n     /**\n      * 百度主动推送\n      *\n@@ -406,29 +416,33 @@ public static String getHttpResponse(String enterUrl) {\n      * @return String\n      */\n     public static String baiduPost(String blogUrl, String token, String urls) {\n+        Assert.hasText(blogUrl, \"blog url must not be blank\");\n+        Assert.hasText(token, \"token must not be blank\");\n+        Assert.hasText(urls, \"urls must not be blank\");\n+\n         String url = \"http://data.zz.baidu.com/urls?site=\" + blogUrl + \"&token=\" + token;\n         String result = \"\";\n         PrintWriter out = null;\n         BufferedReader in = null;\n         try {\n-            //建立URL之间的连接\n+            // 建立URL之间的连接\n             URLConnection conn = new URL(url).openConnection();\n-            //设置通用的请求属性\n+            // 设置通用的请求属性\n             conn.setRequestProperty(\"Host\", \"data.zz.baidu.com\");\n             conn.setRequestProperty(\"User-Agent\", \"curl/7.12.1\");\n             conn.setRequestProperty(\"Content-Length\", \"83\");\n             conn.setRequestProperty(\"Content-Type\", \"text/plain\");\n \n-            //发送POST请求必须设置如下两行\n+            // 发送POST请求必须设置如下两行\n             conn.setDoInput(true);\n             conn.setDoOutput(true);\n \n-            //获取conn对应的输出流\n+            // 获取conn对应的输出流\n             out = new PrintWriter(conn.getOutputStream());\n             out.print(urls.trim());\n-            //进行输出流的缓冲\n+            // 进行输出流的缓冲\n             out.flush();\n-            //通过BufferedReader输入流来读取Url的响应\n+            // 通过BufferedReader输入流来读取Url的响应\n             in = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n             String line;\n             while ((line = in.readLine()) != null) {",
    "output": ":art: Enhance utils"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/Application.java b/src/main/java/cc/ryanc/halo/Application.java\n--- a/src/main/java/cc/ryanc/halo/Application.java\n+++ b/src/main/java/cc/ryanc/halo/Application.java\n@@ -4,6 +4,7 @@\n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n import org.springframework.cache.annotation.EnableCaching;\n+import org.springframework.context.ApplicationContext;\n \n /**\n  * @author RYAN0UP\n@@ -14,7 +15,8 @@\n @EnableCaching\n public class Application {\n     public static void main(String[] args) {\n-        SpringApplication.run(Application.class, args);\n-        log.info(\"Halo started at http://localhost:8090\");\n+        ApplicationContext context = SpringApplication.run(Application.class, args);\n+        String serverPort = context.getEnvironment().getProperty(\"server.port\");\n+        log.info(\"Halo started at http://localhost:\" + serverPort);\n     }\n }",
    "output": "Merge branch 'master' into dev"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/web/controller/front/FrontArchiveController.java b/src/main/java/cc/ryanc/halo/web/controller/front/FrontArchiveController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/front/FrontArchiveController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/front/FrontArchiveController.java\n@@ -63,7 +63,7 @@ public String archives(Model model,\n         Sort sort = new Sort(Sort.Direction.DESC, \"postDate\");\n         Pageable pageable = PageRequest.of(page - 1, 5, sort);\n         Page<Post> posts = postService.findPostByStatus(0, PostType.POST_TYPE_POST.getDesc(), pageable);\n-        if(null==posts){\n+        if (null == posts) {\n             return this.renderNotFound();\n         }\n         model.addAttribute(\"posts\", posts);\n@@ -83,7 +83,7 @@ public String archives(Model model,\n                            @PathVariable(value = \"year\") String year,\n                            @PathVariable(value = \"month\") String month) {\n         Page<Post> posts = postService.findPostByYearAndMonth(year, month, null);\n-        if(null==posts){\n+        if (null == posts) {\n             return this.renderNotFound();\n         }\n         model.addAttribute(\"posts\", posts);\n@@ -100,7 +100,7 @@ public String archives(Model model,\n     @GetMapping(value = \"{postUrl}\")\n     public String getPost(@PathVariable String postUrl, Model model) {\n         Post post = postService.findByPostUrl(postUrl, PostType.POST_TYPE_POST.getDesc());\n-        if(null==post || post.getPostStatus()!=0){\n+        if (null == post || post.getPostStatus() != 0) {\n             return this.renderNotFound();\n         }\n         //获得当前文章的发布日期\n@@ -116,11 +116,12 @@ public String getPost(@PathVariable String postUrl, Model model) {\n         if (null != afterPosts && afterPosts.size() > 0) {\n             model.addAttribute(\"afterPost\", afterPosts.get(afterPosts.size() - 1));\n         }\n-        Sort sort = new Sort(Sort.Direction.DESC,\"commentDate\");\n-        Pageable pageable = PageRequest.of(0,999,sort);\n-        Page<Comment> comments = commentService.findCommentsByPostAndCommentStatus(post,pageable,0);\n+        Sort sort = new Sort(Sort.Direction.DESC, \"commentDate\");\n+        Pageable pageable = PageRequest.of(0, 999, sort);\n+        Page<Comment> comments = commentService.findCommentsByPostAndCommentStatus(post, pageable, 0);\n         model.addAttribute(\"post\", post);\n         model.addAttribute(\"comments\", CommentUtil.getComments(comments.getContent()));\n+        model.addAttribute(\"commentsCount\", comments.getTotalElements());\n         postService.updatePostView(post);\n         return this.render(\"post\");\n     }",
    "output": "0.0.6"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/repository/PostRepository.java b/src/main/java/cc/ryanc/halo/repository/PostRepository.java\n--- a/src/main/java/cc/ryanc/halo/repository/PostRepository.java\n+++ b/src/main/java/cc/ryanc/halo/repository/PostRepository.java\n@@ -196,4 +196,12 @@ public interface PostRepository extends JpaRepository<Post, Long> {\n      * @return List<Post>\n      */\n     List<Post> findPostsByPostTypeOrderByPostViewsDesc(String postStatus);\n+\n+    /**\n+     * 获取所有文章阅读量总和\n+     *\n+     * @return Long\n+     */\n+    @Query(value = \"select sum(post_views) from halo_post\", nativeQuery = true)\n+    Long getPostViewsSum();\n }\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/PostService.java b/src/main/java/cc/ryanc/halo/service/PostService.java\n--- a/src/main/java/cc/ryanc/halo/service/PostService.java\n+++ b/src/main/java/cc/ryanc/halo/service/PostService.java\n@@ -231,6 +231,13 @@ public interface PostService {\n      */\n     List<Post> relatedPosts(Post post);\n \n+    /**\n+     * 获取所有文章的阅读量\n+     *\n+     * @return Long\n+     */\n+    Long getPostViews();\n+\n     /**\n      * 生成rss\n      *\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/PostServiceImpl.java\n@@ -398,6 +398,16 @@ public List<Post> relatedPosts(Post post) {\n         return allPosts;\n     }\n \n+    /**\n+     * 获取所有文章的阅读量\n+     *\n+     * @return Long\n+     */\n+    @Override\n+    public Long getPostViews() {\n+        return postRepository.getPostViewsSum();\n+    }\n+\n     /**\n      * 生成rss\n      *\n\ndiff --git a/src/main/java/cc/ryanc/halo/service/impl/TagServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/TagServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/TagServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/TagServiceImpl.java\n@@ -4,8 +4,6 @@\n import cc.ryanc.halo.repository.TagRepository;\n import cc.ryanc.halo.service.TagService;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.cache.annotation.CacheEvict;\n-import org.springframework.cache.annotation.Cacheable;\n import org.springframework.stereotype.Service;\n \n import java.util.ArrayList;\n@@ -22,16 +20,13 @@ public class TagServiceImpl implements TagService {\n     @Autowired\n     private TagRepository tagRepository;\n \n-    private static final String TAGS_CACHE_NAME = \"tags\";\n-\n     /**\n      * 新增/修改标签\n      *\n      * @param tag tag\n      * @return Tag\n      */\n     @Override\n-    @CacheEvict(value = TAGS_CACHE_NAME, allEntries = true, beforeInvocation = true)\n     public Tag saveByTag(Tag tag) {\n         return tagRepository.save(tag);\n     }\n@@ -43,7 +38,6 @@ public Tag saveByTag(Tag tag) {\n      * @return Tag\n      */\n     @Override\n-    @CacheEvict(value = TAGS_CACHE_NAME, allEntries = true, beforeInvocation = true)\n     public Tag removeByTagId(Long tagId) {\n         Optional<Tag> tag = findByTagId(tagId);\n         tagRepository.delete(tag.get());\n@@ -56,7 +50,6 @@ public Tag removeByTagId(Long tagId) {\n      * @return List\n      */\n     @Override\n-    @Cacheable(value = TAGS_CACHE_NAME, key = \"'tag'\")\n     public List<Tag> findAllTags() {\n         return tagRepository.findAll();\n     }\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/AdminController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/AdminController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/AdminController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/AdminController.java\n@@ -90,6 +90,9 @@ public String index(Model model, HttpSession session) {\n         model.addAttribute(\"comments\", comments);\n \n         model.addAttribute(\"mediaCount\", HaloConst.ATTACHMENTS.size());\n+\n+        Long postViewsSum = postService.getPostViews();\n+        model.addAttribute(\"postViewsSum\",postViewsSum);\n         return \"admin/admin_index\";\n     }\n ",
    "output": ":alien: bored!"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/web/controller/api/ApiPostController.java b/src/main/java/cc/ryanc/halo/web/controller/api/ApiPostController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/api/ApiPostController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/api/ApiPostController.java\n@@ -32,7 +32,7 @@ public class ApiPostController {\n      * @param page 页码\n      * @return JsonResult\n      */\n-    @GetMapping(value = \"/posts/{page}\")\n+    @GetMapping(value = \"/page/{page}\")\n     public JsonResult posts(@PathVariable(value = \"page\") Integer page){\n         Sort sort = new Sort(Sort.Direction.DESC, \"postDate\");\n         Integer size = 10;\n@@ -53,7 +53,7 @@ public JsonResult posts(@PathVariable(value = \"page\") Integer page){\n      * @param postUrl 文章路径\n      * @return JsonResult\n      */\n-    @GetMapping(value = \"/posts/{postUrl}\")\n+    @GetMapping(value = \"/{postUrl}\")\n     public JsonResult posts(@PathVariable(value = \"postUrl\") String postUrl){\n         Post post = postService.findByPostUrl(postUrl,HaloConst.POST_TYPE_POST);\n         if(null!=post){",
    "output": ":apple: add maven-javadoc-plugin"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/service/impl/UserServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/UserServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/UserServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/UserServiceImpl.java\n@@ -40,7 +40,7 @@ public void saveByUser(User user) {\n      */\n     @Override\n     public List<User> userLoginByName(String userName, String userPass) {\n-        return userRepository.findByUserNameAndUserPass(userName,userPass);\n+        return userRepository.findByUserNameAndUserPass(userName, userPass);\n     }\n \n     /**\n@@ -52,7 +52,7 @@ public List<User> userLoginByName(String userName, String userPass) {\n      */\n     @Override\n     public List<User> userLoginByEmail(String userEmail, String userPass) {\n-        return userRepository.findByUserEmailAndUserPass(userEmail,userPass);\n+        return userRepository.findByUserEmailAndUserPass(userEmail, userPass);\n     }\n \n     /**\n@@ -63,9 +63,9 @@ public List<User> userLoginByEmail(String userEmail, String userPass) {\n     @Override\n     public User findUser() {\n         List<User> users = userRepository.findAll();\n-        if(users.size()>0){\n+        if (users != null && users.size() > 0) {\n             return users.get(0);\n-        }else{\n+        } else {\n             return new User();\n         }\n     }\n@@ -79,7 +79,7 @@ public User findUser() {\n      */\n     @Override\n     public User findByUserIdAndUserPass(Long userId, String userPass) {\n-        return userRepository.findByUserIdAndUserPass(userId,userPass);\n+        return userRepository.findByUserIdAndUserPass(userId, userPass);\n     }\n \n     /**\n@@ -115,7 +115,7 @@ public User updateUserLoginLast(Date lastDate) {\n     @Override\n     public Integer updateUserLoginError() {\n         User user = this.findUser();\n-        user.setLoginError(user.getLoginError()+1);\n+        user.setLoginError((user.getLoginError() == null ? 0 : user.getLoginError()) + 1);\n         userRepository.save(user);\n         return user.getLoginError();\n     }",
    "output": "Merge pull request #2 from JohnNiang/master\n\nfix bug: NullPointerException occurred when failed to login"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/service/impl/UserServiceImpl.java b/src/main/java/cc/ryanc/halo/service/impl/UserServiceImpl.java\n--- a/src/main/java/cc/ryanc/halo/service/impl/UserServiceImpl.java\n+++ b/src/main/java/cc/ryanc/halo/service/impl/UserServiceImpl.java\n@@ -40,7 +40,7 @@ public void saveByUser(User user) {\n      */\n     @Override\n     public List<User> userLoginByName(String userName, String userPass) {\n-        return userRepository.findByUserNameAndUserPass(userName,userPass);\n+        return userRepository.findByUserNameAndUserPass(userName, userPass);\n     }\n \n     /**\n@@ -52,7 +52,7 @@ public List<User> userLoginByName(String userName, String userPass) {\n      */\n     @Override\n     public List<User> userLoginByEmail(String userEmail, String userPass) {\n-        return userRepository.findByUserEmailAndUserPass(userEmail,userPass);\n+        return userRepository.findByUserEmailAndUserPass(userEmail, userPass);\n     }\n \n     /**\n@@ -63,9 +63,9 @@ public List<User> userLoginByEmail(String userEmail, String userPass) {\n     @Override\n     public User findUser() {\n         List<User> users = userRepository.findAll();\n-        if(users.size()>0){\n+        if (users != null && users.size() > 0) {\n             return users.get(0);\n-        }else{\n+        } else {\n             return new User();\n         }\n     }\n@@ -79,7 +79,7 @@ public User findUser() {\n      */\n     @Override\n     public User findByUserIdAndUserPass(Long userId, String userPass) {\n-        return userRepository.findByUserIdAndUserPass(userId,userPass);\n+        return userRepository.findByUserIdAndUserPass(userId, userPass);\n     }\n \n     /**\n@@ -115,7 +115,7 @@ public User updateUserLoginLast(Date lastDate) {\n     @Override\n     public Integer updateUserLoginError() {\n         User user = this.findUser();\n-        user.setLoginError(user.getLoginError()+1);\n+        user.setLoginError((user.getLoginError() == null ? 0 : user.getLoginError()) + 1);\n         userRepository.save(user);\n         return user.getLoginError();\n     }",
    "output": "fix bug: NullPointerException occurred when failed to login"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/config/StartupConfiguration.java b/src/main/java/cc/ryanc/halo/config/StartupConfiguration.java\n--- a/src/main/java/cc/ryanc/halo/config/StartupConfiguration.java\n+++ b/src/main/java/cc/ryanc/halo/config/StartupConfiguration.java\n@@ -50,7 +50,7 @@ private void loadActiveTheme(){\n                 BaseController.THEME = themeValue;\n             }\n         }catch (Exception e){\n-            log.error(\"未知错误：\"+e.getMessage());\n+            log.error(\"加载主题设置失败：{0}\",e.getMessage());\n         }\n     }\n \n@@ -64,7 +64,7 @@ private void loadOptions(){\n                 HaloConst.OPTIONS = options;\n             }\n         }catch (Exception e){\n-            log.error(\"未知错误：\"+e.getMessage());\n+            log.error(\"加载设置选项失败：{0}\",e.getMessage());\n         }\n     }\n \n@@ -78,7 +78,7 @@ private void loadFiles(){\n                 HaloConst.ATTACHMENTS = attachments;\n             }\n         }catch (Exception e){\n-            log.error(\"未知错误：\"+e.getMessage());\n+            log.error(\"加载所有文件失败：{0}\",e.getMessage());\n         }\n     }\n \n@@ -93,7 +93,7 @@ private void loadThemes(){\n                 HaloConst.THEMES = themes;\n             }\n         }catch (Exception e){\n-            log.error(\"加载主题失败：\"+e.getMessage());\n+            log.error(\"加载主题失败：{0}\",e.getMessage());\n         }\n     }\n }",
    "output": ":alien: :):):):):):):)"
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/CommentController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/CommentController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/CommentController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/CommentController.java\n@@ -2,6 +2,7 @@\n \r\n import cc.ryanc.halo.model.domain.Comment;\r\n import cc.ryanc.halo.model.domain.Post;\r\n+import cc.ryanc.halo.model.domain.User;\r\n import cc.ryanc.halo.model.dto.HaloConst;\r\n import cc.ryanc.halo.service.CommentService;\r\n import cc.ryanc.halo.service.MailService;\r\n@@ -110,11 +111,12 @@ public String moveToPublish(@PathParam(\"commentId\") Long commentId,\n                                 HttpSession session){\r\n         Comment comment = commentService.updateCommentStatus(commentId,0);\r\n \r\n+        //判断评论者的邮箱是否符合规则\r\n         Pattern patternEmail = Pattern.compile(\"\\\\w[-\\\\w.+]*@([A-Za-z0-9][-A-Za-z0-9]+\\\\.)+[A-Za-z]{2,14}\");\r\n         Matcher matcher = patternEmail.matcher(comment.getCommentAuthorEmail());\r\n \r\n         //判断是否启用邮件服务\r\n-        if(\"true\".equals(HaloConst.OPTIONS.get(\"smtp_email_enable\"))) {\r\n+        if(\"true\".equals(HaloConst.OPTIONS.get(\"smtp_email_enable\")) && \"true\".equals(HaloConst.OPTIONS.get(\"comment_pass_notice\"))) {\r\n             try {\r\n                 if (status == 1 && matcher.find()) {\r\n                     Map<String, Object> map = new HashMap<>();\r\n@@ -170,26 +172,53 @@ public String replyComment(@RequestParam(\"commentId\") Long commentId,\n                                @RequestParam(\"postId\") Long postId,\r\n                                @RequestParam(\"commentContent\") String commentContent,\r\n                                @RequestParam(\"userAgent\") String userAgent,\r\n-                               HttpServletRequest request){\r\n+                               HttpServletRequest request,\r\n+                               HttpSession session){\r\n         try {\r\n             Post post = new Post();\r\n             post.setPostId(postId);\r\n \r\n+            //博主信息\r\n+            User user = (User) session.getAttribute(HaloConst.USER_SESSION_KEY);\r\n+\r\n+            //被回复的评论\r\n+            Comment lastComment = commentService.findCommentById(commentId).get();\r\n+\r\n             //保存评论\r\n             Comment comment = new Comment();\r\n             comment.setPost(post);\r\n-            comment.setCommentAuthor(userService.findAllUser().get(0).getUserDisplayName());\r\n-            comment.setCommentAuthorEmail(userService.findAllUser().get(0).getUserEmail());\r\n+            comment.setCommentAuthor(user.getUserDisplayName());\r\n+            comment.setCommentAuthorEmail(user.getUserEmail());\r\n             comment.setCommentAuthorUrl(HaloConst.OPTIONS.get(\"site_url\"));\r\n             comment.setCommentAuthorIp(HaloUtil.getIpAddr(request));\r\n             comment.setCommentAuthorAvatarMd5(HaloUtil.getMD5(userService.findAllUser().get(0).getUserEmail()));\r\n             comment.setCommentDate(new Date());\r\n-            String at = \"<a href='#'>@\"+commentService.findCommentById(commentId).get().getCommentAuthor()+\"</a>\";\r\n-            comment.setCommentContent(at+commentContent);\r\n+            String lastContent = \" //<a href='#'>@\"+lastComment.getCommentAuthor()+\"</a>:\"+lastComment.getCommentContent();\r\n+            comment.setCommentContent(commentContent+lastContent);\r\n             comment.setCommentAgent(userAgent);\r\n             comment.setCommentParent(commentId);\r\n             comment.setCommentStatus(0);\r\n             commentService.saveByComment(comment);\r\n+\r\n+            //正则表达式判断对方的邮箱是否是正确的格式\r\n+            Pattern patternEmail = Pattern.compile(\"\\\\w[-\\\\w.+]*@([A-Za-z0-9][-A-Za-z0-9]+\\\\.)+[A-Za-z]{2,14}\");\r\n+            Matcher matcher = patternEmail.matcher(lastComment.getCommentAuthorEmail());\r\n+\r\n+            //邮件通知\r\n+            if(\"true\".equals(HaloConst.OPTIONS.get(\"smtp_email_enable\")) && \"true\".equals(HaloConst.OPTIONS.get(\"comment_reply_notice\"))) {\r\n+                if(matcher.find()){\r\n+                    Map<String, Object> map = new HashMap<>();\r\n+                    map.put(\"siteTitle\",HaloConst.OPTIONS.get(\"site_title\"));\r\n+                    map.put(\"commentAuthor\",lastComment.getCommentAuthor());\r\n+                    map.put(\"pageName\",lastComment.getPost().getPostTitle());\r\n+                    map.put(\"commentContent\",lastComment.getCommentContent());\r\n+                    map.put(\"replyAuthor\",user.getUserDisplayName());\r\n+                    map.put(\"replyContent\",commentContent);\r\n+                    map.put(\"siteUrl\",HaloConst.OPTIONS.get(\"site_url\"));\r\n+                    mailService.sendTemplateMail(\r\n+                            lastComment.getCommentAuthorEmail(),\"您在\"+HaloConst.OPTIONS.get(\"site_title\")+\"的评论有了新回复\",map,\"common/mail/mail_reply.ftl\");\r\n+                }\r\n+            }\r\n         }catch (Exception e){\r\n             log.error(\"回复评论失败！\"+e.getMessage());\r\n         }\r",
    "output": ":bug: Fixing some bug."
  },
  {
    "input": "diff --git a/src/main/java/cc/ryanc/halo/model/domain/Comment.java b/src/main/java/cc/ryanc/halo/model/domain/Comment.java\n--- a/src/main/java/cc/ryanc/halo/model/domain/Comment.java\n+++ b/src/main/java/cc/ryanc/halo/model/domain/Comment.java\n@@ -77,9 +77,7 @@ public class Comment implements Serializable {\n     /**\n      * 上一级\n      */\n-    //@OneToOne\n-    //@JoinColumn(name = \"comment_id\")\n-    //private Comment commentParent;\n+    private Long commentParent = 0L;\n \n     /**\n      * 评论状态，0：正常，1：待审核，2：回收站\n\ndiff --git a/src/main/java/cc/ryanc/halo/web/controller/admin/CommentController.java b/src/main/java/cc/ryanc/halo/web/controller/admin/CommentController.java\n--- a/src/main/java/cc/ryanc/halo/web/controller/admin/CommentController.java\n+++ b/src/main/java/cc/ryanc/halo/web/controller/admin/CommentController.java\n@@ -1,10 +1,12 @@\n package cc.ryanc.halo.web.controller.admin;\r\n \r\n import cc.ryanc.halo.model.domain.Comment;\r\n+import cc.ryanc.halo.model.domain.Post;\r\n import cc.ryanc.halo.model.dto.HaloConst;\r\n import cc.ryanc.halo.service.CommentService;\r\n import cc.ryanc.halo.service.MailService;\r\n import cc.ryanc.halo.service.UserService;\r\n+import cc.ryanc.halo.util.HaloUtil;\r\n import cc.ryanc.halo.web.controller.BaseController;\r\n import lombok.extern.slf4j.Slf4j;\r\n import org.springframework.beans.factory.annotation.Autowired;\r\n@@ -15,11 +17,14 @@\n import org.springframework.stereotype.Controller;\r\n import org.springframework.ui.Model;\r\n import org.springframework.web.bind.annotation.GetMapping;\r\n+import org.springframework.web.bind.annotation.PostMapping;\r\n import org.springframework.web.bind.annotation.RequestMapping;\r\n import org.springframework.web.bind.annotation.RequestParam;\r\n \r\n+import javax.servlet.http.HttpServletRequest;\r\n import javax.servlet.http.HttpSession;\r\n import javax.websocket.server.PathParam;\r\n+import java.util.Date;\r\n import java.util.HashMap;\r\n import java.util.Map;\r\n import java.util.Optional;\r\n@@ -151,4 +156,43 @@ public String moveToAway(@PathParam(\"commentId\") Long commentId,\n         }\r\n         return \"redirect:/admin/comments?status=\"+status;\r\n     }\r\n+\r\n+\r\n+    /**\r\n+     * 管理员回复评论\r\n+     *\r\n+     * @param commentId 被回复的评论\r\n+     * @param commentContent 回复的内容\r\n+     * @return string\r\n+     */\r\n+    @PostMapping(\"/reply\")\r\n+    public String replyComment(@RequestParam(\"commentId\") Long commentId,\r\n+                               @RequestParam(\"postId\") Long postId,\r\n+                               @RequestParam(\"commentContent\") String commentContent,\r\n+                               @RequestParam(\"userAgent\") String userAgent,\r\n+                               HttpServletRequest request){\r\n+        try {\r\n+            Post post = new Post();\r\n+            post.setPostId(postId);\r\n+\r\n+            //保存评论\r\n+            Comment comment = new Comment();\r\n+            comment.setPost(post);\r\n+            comment.setCommentAuthor(userService.findAllUser().get(0).getUserDisplayName());\r\n+            comment.setCommentAuthorEmail(userService.findAllUser().get(0).getUserEmail());\r\n+            comment.setCommentAuthorUrl(HaloConst.OPTIONS.get(\"site_url\"));\r\n+            comment.setCommentAuthorIp(HaloUtil.getIpAddr(request));\r\n+            comment.setCommentAuthorAvatarMd5(HaloUtil.getMD5(userService.findAllUser().get(0).getUserEmail()));\r\n+            comment.setCommentDate(new Date());\r\n+            String at = \"<a href='#'>@\"+commentService.findCommentById(commentId).get().getCommentAuthor()+\"</a>\";\r\n+            comment.setCommentContent(at+commentContent);\r\n+            comment.setCommentAgent(userAgent);\r\n+            comment.setCommentParent(commentId);\r\n+            comment.setCommentStatus(0);\r\n+            commentService.saveByComment(comment);\r\n+        }catch (Exception e){\r\n+            log.error(\"回复评论失败！\"+e.getMessage());\r\n+        }\r\n+        return \"redirect:/admin/comments\";\r\n+    }\r\n }\r",
    "output": ":alien: Update comment system"
  }
]