[
  {
    "input": "diff --git a/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/StampController.java b/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/StampController.java\n--- a/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/StampController.java\n+++ b/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/StampController.java\n@@ -72,10 +72,13 @@ public ResponseEntity<byte[]> addStamp(@ModelAttribute AddStampRequest request)\n         MultipartFile stampImage = request.getStampImage();\n         if (\"image\".equalsIgnoreCase(stampType)) {\n             if (stampImage == null) {\n-                throw new IllegalArgumentException(\"Stamp image file must be provided when stamp type is 'image'\");\n+                throw new IllegalArgumentException(\n+                        \"Stamp image file must be provided when stamp type is 'image'\");\n             }\n             String stampImageName = stampImage.getOriginalFilename();\n-            if (stampImageName == null || stampImageName.contains(\"..\") || stampImageName.startsWith(\"/\")) {\n+            if (stampImageName == null\n+                    || stampImageName.contains(\"..\")\n+                    || stampImageName.startsWith(\"/\")) {\n                 throw new IllegalArgumentException(\"Invalid stamp image file path\");\n             }\n         }",
    "output": "🤖 format everything with pre-commit by stirlingbot (#4104)\n\nAuto-generated by [create-pull-request][1] with **stirlingbot**\n\n[1]: https://github.com/peter-evans/create-pull-request\n\nSigned-off-by: stirlingbot[bot] <stirlingbot[bot]@users.noreply.github.com>\nCo-authored-by: stirlingbot[bot] <195170888+stirlingbot[bot]@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/StampController.java b/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/StampController.java\n--- a/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/StampController.java\n+++ b/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/StampController.java\n@@ -70,9 +70,14 @@ public ResponseEntity<byte[]> addStamp(@ModelAttribute AddStampRequest request)\n         String stampType = request.getStampType();\n         String stampText = request.getStampText();\n         MultipartFile stampImage = request.getStampImage();\n-        String stampImageName = stampImage.getOriginalFilename();\n-        if (stampImageName.contains(\"..\") || stampImageName.startsWith(\"/\")) {\n-            throw new IllegalArgumentException(\"Invalid stamp image file path\");\n+        if (\"image\".equalsIgnoreCase(stampType)) {\n+            if (stampImage == null) {\n+                throw new IllegalArgumentException(\"Stamp image file must be provided when stamp type is 'image'\");\n+            }\n+            String stampImageName = stampImage.getOriginalFilename();\n+            if (stampImageName == null || stampImageName.contains(\"..\") || stampImageName.startsWith(\"/\")) {\n+                throw new IllegalArgumentException(\"Invalid stamp image file path\");\n+            }\n         }\n         String alphabet = request.getAlphabet();\n         float fontSize = request.getFontSize();",
    "output": "fix(stamp): validate image filename only for image stamp type (#4099)\n\n# Description of Changes\n\n- **What was changed**: Moved the filename validation logic for\n`stampImage` inside a condition that checks whether the stamp type is\n`\"image\"`.\n- **Why the change was made**: Previously, the validation was applied\nregardless of stamp type, leading to unnecessary errors for\nnon-image-based stamps where no `stampImage` is provided.\n\nCloses #4097\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/DeveloperGuide.md#6-testing)\nfor more details.\n\n---------\n\nCo-authored-by: Copilot <175728472+Copilot@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java b/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java\n--- a/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java\n+++ b/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java\n@@ -108,9 +108,13 @@ PipelineResult runPipelineAgainstFiles(List<Resource> outputFiles, PipelineConfi\n             if (inputFileTypes == null) {\n                 inputFileTypes = new ArrayList<String>(Arrays.asList(\"ALL\"));\n             }\n-            if (!operation.matches(\"^[a-zA-Z0-9_-]+$\")) {\n-                throw new IllegalArgumentException(\"Invalid operation value received.\");\n+\n+            if (!apiDocService.isValidOperation(operation, parameters)) {\n+                log.error(\"Invalid operation or parameters: o:{} p:{}\", operation, parameters);\n+                throw new IllegalArgumentException(\n+                        \"Invalid operation: \" + operation + \" with parameters: \" + parameters);\n             }\n+\n             String url = getBaseUrl() + operation;\n             List<Resource> newOutputFiles = new ArrayList<>();\n             if (!isMultiInputOperation) {\n@@ -136,7 +140,7 @@ PipelineResult runPipelineAgainstFiles(List<Resource> outputFiles, PipelineConfi\n                             // skip\n                             // this\n                             // file\n-                            if (operation.startsWith(\"filter-\")\n+                            if (operation.startsWith(\"/api/v1/filter/filter-\")\n                                     && (response.getBody() == null\n                                             || response.getBody().length == 0)) {\n                                 filtersApplied = true;\n\ndiff --git a/app/core/src/test/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessorTest.java b/app/core/src/test/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessorTest.java\n--- a/app/core/src/test/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessorTest.java\n+++ b/app/core/src/test/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessorTest.java\n@@ -45,23 +45,26 @@ void setUp() {\n     @Test\n     void runPipelineWithFilterSetsFlag() throws Exception {\n         PipelineOperation op = new PipelineOperation();\n-        op.setOperation(\"filter-page-count\");\n+        op.setOperation(\"/api/v1/filter/filter-page-count\");\n         op.setParameters(Map.of());\n         PipelineConfig config = new PipelineConfig();\n         config.setOperations(List.of(op));\n \n-        Resource file = new ByteArrayResource(\"data\".getBytes()) {\n-            @Override\n-            public String getFilename() {\n-                return \"test.pdf\";\n-            }\n-        };\n+        Resource file =\n+                new ByteArrayResource(\"data\".getBytes()) {\n+                    @Override\n+                    public String getFilename() {\n+                        return \"test.pdf\";\n+                    }\n+                };\n \n         List<Resource> files = List.of(file);\n \n-        when(apiDocService.isMultiInput(\"filter-page-count\")).thenReturn(false);\n-        when(apiDocService.getExtensionTypes(false, \"filter-page-count\"))\n+        when(apiDocService.isMultiInput(\"/api/v1/filter/filter-page-count\")).thenReturn(false);\n+        when(apiDocService.getExtensionTypes(false, \"/api/v1/filter/filter-page-count\"))\n                 .thenReturn(List.of(\"pdf\"));\n+        when(apiDocService.isValidOperation(eq(\"/api/v1/filter/filter-page-count\"), anyMap()))\n+                .thenReturn(true);\n \n         doReturn(new ResponseEntity<>(new byte[0], HttpStatus.OK))\n                 .when(pipelineProcessor)",
    "output": "fix(pipeline): allow slashes in pipeline operation values (#4066)\n\n# Description of Changes\n\n- Extended the validation regex for `operation` in the pipeline\nprocessor to allow slashes (`/`), in addition to alphanumeric\ncharacters, underscores, and hyphens.\n- This resolves the issue where valid operation strings (e.g., with\nsubpaths like `/api/v1/general/remove-pages`) were incorrectly rejected.\n- Added an explicit log message for better debugging in case of invalid\n`operation` values.\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/app/common/src/main/java/stirling/software/common/configuration/InstallationPathConfig.java b/app/common/src/main/java/stirling/software/common/configuration/InstallationPathConfig.java\n--- a/app/common/src/main/java/stirling/software/common/configuration/InstallationPathConfig.java\n+++ b/app/common/src/main/java/stirling/software/common/configuration/InstallationPathConfig.java\n@@ -15,6 +15,7 @@ public class InstallationPathConfig {\n     private static final String CUSTOM_FILES_PATH;\n     private static final String CLIENT_WEBUI_PATH;\n     private static final String SCRIPTS_PATH;\n+    private static final String PIPELINE_PATH;\n \n     // Config paths\n     private static final String SETTINGS_PATH;\n@@ -33,6 +34,7 @@ public class InstallationPathConfig {\n         CONFIG_PATH = BASE_PATH + \"configs\" + File.separator;\n         CUSTOM_FILES_PATH = BASE_PATH + \"customFiles\" + File.separator;\n         CLIENT_WEBUI_PATH = BASE_PATH + \"clientWebUI\" + File.separator;\n+        PIPELINE_PATH = BASE_PATH + \"pipeline\" + File.separator;\n \n         // Initialize config paths\n         SETTINGS_PATH = CONFIG_PATH + \"settings.yml\";\n@@ -95,6 +97,10 @@ public static String getScriptsPath() {\n         return SCRIPTS_PATH;\n     }\n \n+    public static String getPipelinePath() {\n+        return PIPELINE_PATH;\n+    }\n+\n     public static String getSettingsPath() {\n         return SETTINGS_PATH;\n     }\n\ndiff --git a/app/common/src/main/java/stirling/software/common/util/GeneralUtils.java b/app/common/src/main/java/stirling/software/common/util/GeneralUtils.java\n--- a/app/common/src/main/java/stirling/software/common/util/GeneralUtils.java\n+++ b/app/common/src/main/java/stirling/software/common/util/GeneralUtils.java\n@@ -14,6 +14,7 @@\n import java.util.Enumeration;\n import java.util.List;\n import java.util.Locale;\n+import java.util.Set;\n import java.util.UUID;\n \n import org.springframework.core.io.ClassPathResource;\n@@ -34,8 +35,16 @@\n @Slf4j\n public class GeneralUtils {\n \n-    private static final List<String> DEFAULT_VALID_SCRIPTS =\n-            List.of(\"png_to_webp.py\", \"split_photos.py\");\n+    private static final Set<String> DEFAULT_VALID_SCRIPTS =\n+            Set.of(\"png_to_webp.py\", \"split_photos.py\");\n+    private static final Set<String> DEFAULT_VALID_PIPELINE =\n+            Set.of(\n+                    \"OCR images.json\",\n+                    \"Prepare-pdfs-for-email.json\",\n+                    \"split-rotate-auto-rename.json\");\n+\n+    private static final String DEFAULT_WEBUI_CONFIGS_DIR = \"defaultWebUIConfigs\";\n+    private static final String PYTHON_SCRIPTS_DIR = \"python\";\n \n     public static File convertMultipartFileToFile(MultipartFile multipartFile) throws IOException {\n         String customTempDir = System.getenv(\"STIRLING_TEMPFILES_DIRECTORY\");\n@@ -446,6 +455,48 @@ public static String generateMachineFingerprint() {\n         }\n     }\n \n+    /**\n+     * Extracts the default pipeline configurations from the classpath to the installation path.\n+     * Creates directories if needed and copies default JSON files.\n+     *\n+     * <p>Existing files will be overwritten atomically (when supported). In case of unsupported\n+     * atomic moves, falls back to non-atomic replace.\n+     *\n+     * @throws IOException if an I/O error occurs during file operations\n+     */\n+    public static void extractPipeline() throws IOException {\n+        Path pipelineDir =\n+                Paths.get(InstallationPathConfig.getPipelinePath(), DEFAULT_WEBUI_CONFIGS_DIR);\n+        Files.createDirectories(pipelineDir);\n+\n+        for (String name : DEFAULT_VALID_PIPELINE) {\n+            if (!Paths.get(name).getFileName().toString().equals(name)) {\n+                log.error(\"Invalid pipeline file name: {}\", name);\n+                throw new IllegalArgumentException(\"Invalid pipeline file name: \" + name);\n+            }\n+            Path target = pipelineDir.resolve(name);\n+            ClassPathResource res =\n+                    new ClassPathResource(\n+                            \"static/pipeline/\" + DEFAULT_WEBUI_CONFIGS_DIR + \"/\" + name);\n+            if (!res.exists()) {\n+                log.error(\"Resource not found: {}\", res.getPath());\n+                throw new IOException(\"Resource not found: \" + res.getPath());\n+            }\n+            copyResourceToFile(res, target);\n+        }\n+    }\n+\n+    /**\n+     * Extracts the specified Python script from the classpath to the installation path. Validates\n+     * name and copies file atomically when possible, overwriting existing.\n+     *\n+     * <p>Existing files will be overwritten atomically (when supported).\n+     *\n+     * @param scriptName the name of the script to extract\n+     * @return the path to the extracted script\n+     * @throws IllegalArgumentException if the script name is invalid or not allowed\n+     * @throws IOException if an I/O error occurs\n+     */\n     public static Path extractScript(String scriptName) throws IOException {\n         // Validate input\n         if (scriptName == null || scriptName.trim().isEmpty()) {\n@@ -455,26 +506,71 @@ public static Path extractScript(String scriptName) throws IOException {\n             throw new IllegalArgumentException(\n                     \"scriptName must not contain path traversal characters\");\n         }\n+        if (!Paths.get(scriptName).getFileName().toString().equals(scriptName)) {\n+            throw new IllegalArgumentException(\n+                    \"scriptName must not contain path traversal characters\");\n+        }\n \n         if (!DEFAULT_VALID_SCRIPTS.contains(scriptName)) {\n             throw new IllegalArgumentException(\n                     \"scriptName must be either 'png_to_webp.py' or 'split_photos.py'\");\n         }\n \n-        Path scriptsDir = Paths.get(InstallationPathConfig.getScriptsPath(), \"python\");\n+        Path scriptsDir = Paths.get(InstallationPathConfig.getScriptsPath(), PYTHON_SCRIPTS_DIR);\n         Files.createDirectories(scriptsDir);\n \n-        Path scriptFile = scriptsDir.resolve(scriptName);\n-        if (!Files.exists(scriptFile)) {\n-            ClassPathResource resource = new ClassPathResource(\"static/python/\" + scriptName);\n-            try (InputStream in = resource.getInputStream()) {\n-                Files.copy(in, scriptFile, StandardCopyOption.REPLACE_EXISTING);\n+        Path target = scriptsDir.resolve(scriptName);\n+        ClassPathResource res =\n+                new ClassPathResource(\"static/\" + PYTHON_SCRIPTS_DIR + \"/\" + scriptName);\n+        if (!res.exists()) {\n+            log.error(\"Resource not found: {}\", res.getPath());\n+            throw new IOException(\"Resource not found: \" + res.getPath());\n+        }\n+        copyResourceToFile(res, target);\n+        return target;\n+    }\n+\n+    /**\n+     * Copies a resource from the classpath to a specified target file.\n+     *\n+     * @param resource the ClassPathResource to copy\n+     * @param target the target Path where the resource will be copied\n+     * @throws IOException if an I/O error occurs during the copy operation\n+     */\n+    private static void copyResourceToFile(ClassPathResource resource, Path target)\n+            throws IOException {\n+        Path dir = target.getParent();\n+        Path tmp = Files.createTempFile(dir, target.getFileName().toString(), \".tmp\");\n+        try (InputStream in = resource.getInputStream()) {\n+            Files.copy(in, tmp, StandardCopyOption.REPLACE_EXISTING);\n+            try {\n+                Files.move(tmp, target, StandardCopyOption.ATOMIC_MOVE);\n+            } catch (AtomicMoveNotSupportedException e) {\n+                log.warn(\n+                        \"Atomic move not supported, falling back to non-atomic move for {}\",\n+                        target,\n+                        e);\n+                Files.move(tmp, target, StandardCopyOption.REPLACE_EXISTING);\n+            }\n+        } catch (FileAlreadyExistsException e) {\n+            log.debug(\"File already exists at {}, attempting to replace it.\", target);\n+            Files.move(tmp, target, StandardCopyOption.REPLACE_EXISTING);\n+        } catch (AccessDeniedException e) {\n+            log.error(\"Access denied while attempting to copy resource to {}\", target, e);\n+            throw e;\n+        } catch (FileSystemException e) {\n+            log.error(\"File system error occurred while copying resource to {}\", target, e);\n+            throw e;\n+        } catch (IOException e) {\n+            log.error(\"Failed to copy resource to {}\", target, e);\n+            throw e;\n+        } finally {\n+            try {\n+                Files.deleteIfExists(tmp);\n             } catch (IOException e) {\n-                log.error(\"Failed to extract Python script\", e);\n-                throw e;\n+                log.warn(\"Failed to delete temporary file {}\", tmp, e);\n             }\n         }\n-        return scriptFile;\n     }\n \n     public static boolean isVersionHigher(String currentVersion, String compareVersion) {\n\ndiff --git a/app/core/src/main/java/stirling/software/SPDF/config/InitialSetup.java b/app/core/src/main/java/stirling/software/SPDF/config/InitialSetup.java\n--- a/app/core/src/main/java/stirling/software/SPDF/config/InitialSetup.java\n+++ b/app/core/src/main/java/stirling/software/SPDF/config/InitialSetup.java\n@@ -35,6 +35,7 @@ public void init() throws IOException {\n         initEnableCSRFSecurity();\n         initLegalUrls();\n         initSetAppVersion();\n+        GeneralUtils.extractPipeline();\n     }\n \n     public void initUUIDKey() throws IOException {",
    "output": "fix(pipeline): correct paths for pipeline & support default WebUI pipeline config extraction (#4051)\n\n# Description of Changes\n\n- **What was changed:**  \n- Updated `.github/labeler-config-srvaroa.yml` to include\n`app/core/src/main/resources/static/pipeline/defaultWebUIConfigs/**`\nunder the labeler paths.\n- Removed `COPY pipeline /pipeline` from all three Dockerfiles to slim\ndown images.\n- Added a new `PIPELINE_PATH` constant and `getPipelinePath()` method in\n`InstallationPathConfig.java`.\n- Implemented `GeneralUtils.extractPipeline()` to copy default pipeline\nJSON configs (`OCR images.json`, `Prepare-pdfs-for-email.json`,\n`split-rotate-auto-rename.json`) from classpath into the installation\ndirectory.\n- Invoked `GeneralUtils.extractPipeline()` during initial setup in\n`InitialSetup.java`.\n  - Updated `.gitignore` to treat `./pipeline/` as ignored.  \n\n- **Why the change was made:**  \nEnsures that default WebUI pipeline configurations are automatically\nextracted at runtime rather than baked into the image, improving\nflexibility and reducing image size.\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/DeveloperGuide.md#6-testing)\nfor more details.\n\n---------\n\nCo-authored-by: Anthony Stirling <77850077+Frooodle@users.noreply.github.com>\nCo-authored-by: Copilot <175728472+Copilot@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/app/common/src/test/java/stirling/software/common/util/CustomHtmlSanitizerTest.java b/app/common/src/test/java/stirling/software/common/util/CustomHtmlSanitizerTest.java\n--- a/app/common/src/test/java/stirling/software/common/util/CustomHtmlSanitizerTest.java\n+++ b/app/common/src/test/java/stirling/software/common/util/CustomHtmlSanitizerTest.java\n@@ -25,12 +25,12 @@ void setUp() {\n         SsrfProtectionService mockSsrfProtectionService = mock(SsrfProtectionService.class);\n         stirling.software.common.model.ApplicationProperties mockApplicationProperties = mock(stirling.software.common.model.ApplicationProperties.class);\n         stirling.software.common.model.ApplicationProperties.System mockSystem = mock(stirling.software.common.model.ApplicationProperties.System.class);\n-        \n+\n         // Allow all URLs by default for basic tests\n         when(mockSsrfProtectionService.isUrlAllowed(org.mockito.ArgumentMatchers.anyString())).thenReturn(true);\n         when(mockApplicationProperties.getSystem()).thenReturn(mockSystem);\n         when(mockSystem.getDisableSanitize()).thenReturn(false); // Enable sanitization for tests\n-        \n+\n         customHtmlSanitizer = new CustomHtmlSanitizer(mockSsrfProtectionService, mockApplicationProperties);\n     }\n \n\ndiff --git a/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java b/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java\n--- a/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java\n+++ b/app/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java\n@@ -47,11 +47,11 @@ void setUp() {\n         SsrfProtectionService mockSsrfProtectionService = mock(SsrfProtectionService.class);\n         stirling.software.common.model.ApplicationProperties mockApplicationProperties = mock(stirling.software.common.model.ApplicationProperties.class);\n         stirling.software.common.model.ApplicationProperties.System mockSystem = mock(stirling.software.common.model.ApplicationProperties.System.class);\n-        \n+\n         when(mockSsrfProtectionService.isUrlAllowed(org.mockito.ArgumentMatchers.anyString())).thenReturn(true);\n         when(mockApplicationProperties.getSystem()).thenReturn(mockSystem);\n         when(mockSystem.getDisableSanitize()).thenReturn(false);\n-        \n+\n         customHtmlSanitizer = new CustomHtmlSanitizer(mockSsrfProtectionService, mockApplicationProperties);\n     }\n \n@@ -588,7 +588,7 @@ void convertEmlToPdfWithoutAttachments() throws Exception {\n         }\n \n         @Test\n-        @Disabled(\"Complex static mocking - temporarily disabled while refactoring\") \n+        @Disabled(\"Complex static mocking - temporarily disabled while refactoring\")\n         @DisplayName(\"Should convert EML to PDF with attachments when requested\")\n         void convertEmlToPdfWithAttachments() throws Exception {\n             String boundary = \"----=_Part_1234567890\";\n@@ -671,7 +671,7 @@ void convertEmlToPdfWithAttachments() throws Exception {\n \n         @Test\n         @Disabled(\"Complex static mocking - temporarily disabled while refactoring\")\n-        @DisplayName(\"Should handle errors during EML to PDF conversion\") \n+        @DisplayName(\"Should handle errors during EML to PDF conversion\")\n         void handleErrorsDuringConversion() {\n             String emlContent =\n                 createSimpleTextEmail(\"from@test.com\", \"to@test.com\", \"Subject\", \"Body\");\n\ndiff --git a/app/common/src/test/java/stirling/software/common/util/FileToPdfTest.java b/app/common/src/test/java/stirling/software/common/util/FileToPdfTest.java\n--- a/app/common/src/test/java/stirling/software/common/util/FileToPdfTest.java\n+++ b/app/common/src/test/java/stirling/software/common/util/FileToPdfTest.java\n@@ -26,11 +26,11 @@ void setUp() {\n         SsrfProtectionService mockSsrfProtectionService = mock(SsrfProtectionService.class);\n         stirling.software.common.model.ApplicationProperties mockApplicationProperties = mock(stirling.software.common.model.ApplicationProperties.class);\n         stirling.software.common.model.ApplicationProperties.System mockSystem = mock(stirling.software.common.model.ApplicationProperties.System.class);\n-        \n+\n         when(mockSsrfProtectionService.isUrlAllowed(org.mockito.ArgumentMatchers.anyString())).thenReturn(true);\n         when(mockApplicationProperties.getSystem()).thenReturn(mockSystem);\n         when(mockSystem.getDisableSanitize()).thenReturn(false);\n-        \n+\n         customHtmlSanitizer = new CustomHtmlSanitizer(mockSsrfProtectionService, mockApplicationProperties);\n     }\n ",
    "output": "🤖 format everything with pre-commit by stirlingbot (#4040)\n\nAuto-generated by [create-pull-request][1] with **stirlingbot**\n\n[1]: https://github.com/peter-evans/create-pull-request\n\nSigned-off-by: stirlingbot[bot] <stirlingbot[bot]@users.noreply.github.com>\nCo-authored-by: stirlingbot[bot] <195170888+stirlingbot[bot]@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/StampController.java b/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/StampController.java\n--- a/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/StampController.java\n+++ b/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/StampController.java\n@@ -67,7 +67,7 @@ public ResponseEntity<byte[]> addStamp(@ModelAttribute AddStampRequest request)\n         if (pdfFileName.contains(\"..\") || pdfFileName.startsWith(\"/\")) {\n             throw new IllegalArgumentException(\"Invalid PDF file path\");\n         }\n-        \n+\n         String stampType = request.getStampType();\n         String stampText = request.getStampText();\n         MultipartFile stampImage = request.getStampImage();",
    "output": "🤖 format everything with pre-commit by stirlingbot (#3995)\n\nAuto-generated by [create-pull-request][1] with **stirlingbot**\n\n[1]: https://github.com/peter-evans/create-pull-request\n\nSigned-off-by: stirlingbot[bot] <stirlingbot[bot]@users.noreply.github.com>\nCo-authored-by: stirlingbot[bot] <195170888+stirlingbot[bot]@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/app/common/src/main/java/stirling/software/common/configuration/InstallationPathConfig.java b/app/common/src/main/java/stirling/software/common/configuration/InstallationPathConfig.java\n--- a/app/common/src/main/java/stirling/software/common/configuration/InstallationPathConfig.java\n+++ b/app/common/src/main/java/stirling/software/common/configuration/InstallationPathConfig.java\n@@ -14,6 +14,7 @@ public class InstallationPathConfig {\n     private static final String CONFIG_PATH;\n     private static final String CUSTOM_FILES_PATH;\n     private static final String CLIENT_WEBUI_PATH;\n+    private static final String SCRIPTS_PATH;\n \n     // Config paths\n     private static final String SETTINGS_PATH;\n@@ -36,6 +37,7 @@ public class InstallationPathConfig {\n         // Initialize config paths\n         SETTINGS_PATH = CONFIG_PATH + \"settings.yml\";\n         CUSTOM_SETTINGS_PATH = CONFIG_PATH + \"custom_settings.yml\";\n+        SCRIPTS_PATH = CONFIG_PATH + \"scripts\" + File.separator;\n \n         // Initialize custom file paths\n         STATIC_PATH = CUSTOM_FILES_PATH + \"static\" + File.separator;\n@@ -89,6 +91,10 @@ public static String getClientWebUIPath() {\n         return CLIENT_WEBUI_PATH;\n     }\n \n+    public static String getScriptsPath() {\n+        return SCRIPTS_PATH;\n+    }\n+\n     public static String getSettingsPath() {\n         return SETTINGS_PATH;\n     }\n\ndiff --git a/app/common/src/main/java/stirling/software/common/util/GeneralUtils.java b/app/common/src/main/java/stirling/software/common/util/GeneralUtils.java\n--- a/app/common/src/main/java/stirling/software/common/util/GeneralUtils.java\n+++ b/app/common/src/main/java/stirling/software/common/util/GeneralUtils.java\n@@ -16,6 +16,7 @@\n import java.util.Locale;\n import java.util.UUID;\n \n+import org.springframework.core.io.ClassPathResource;\n import org.springframework.core.io.Resource;\n import org.springframework.core.io.ResourceLoader;\n import org.springframework.core.io.support.ResourcePatternUtils;\n@@ -33,6 +34,9 @@\n @Slf4j\n public class GeneralUtils {\n \n+    private static final List<String> DEFAULT_VALID_SCRIPTS =\n+            List.of(\"png_to_webp.py\", \"split_photos.py\");\n+\n     public static File convertMultipartFileToFile(MultipartFile multipartFile) throws IOException {\n         String customTempDir = System.getenv(\"STIRLING_TEMPFILES_DIRECTORY\");\n         if (customTempDir == null || customTempDir.isEmpty()) {\n@@ -442,6 +446,40 @@ public static String generateMachineFingerprint() {\n         }\n     }\n \n+    /**\n+     * Extracts a file from classpath:/static/python to a temporary directory and returns the path.\n+     */\n+    public static Path extractScript(String scriptName) throws IOException {\n+        // Validate input\n+        if (scriptName == null || scriptName.trim().isEmpty()) {\n+            throw new IllegalArgumentException(\"scriptName must not be null or empty\");\n+        }\n+        if (scriptName.contains(\"..\") || scriptName.contains(\"/\")) {\n+            throw new IllegalArgumentException(\n+                    \"scriptName must not contain path traversal characters\");\n+        }\n+\n+        if (!DEFAULT_VALID_SCRIPTS.contains(scriptName)) {\n+            throw new IllegalArgumentException(\n+                    \"scriptName must be either 'png_to_webp.py' or 'split_photos.py'\");\n+        }\n+\n+        Path scriptsDir = Paths.get(InstallationPathConfig.getScriptsPath(), \"python\");\n+        Files.createDirectories(scriptsDir);\n+\n+        Path scriptFile = scriptsDir.resolve(scriptName);\n+        if (!Files.exists(scriptFile)) {\n+            ClassPathResource resource = new ClassPathResource(\"static/python/\" + scriptName);\n+            try (InputStream in = resource.getInputStream()) {\n+                Files.copy(in, scriptFile, StandardCopyOption.REPLACE_EXISTING);\n+            } catch (IOException e) {\n+                log.error(\"Failed to extract Python script\", e);\n+                throw e;\n+            }\n+        }\n+        return scriptFile;\n+    }\n+\n     public static boolean isVersionHigher(String currentVersion, String compareVersion) {\n         if (currentVersion == null || compareVersion == null) {\n             return false;\n\ndiff --git a/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java b/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java\n--- a/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java\n+++ b/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java\n@@ -56,8 +56,8 @@ public class ConvertImgPDFController {\n             summary = \"Convert PDF to image(s)\",\n             description =\n                     \"This endpoint converts a PDF file to image(s) with the specified image format,\"\n-                            + \" color type, and DPI. Users can choose to get a single image or multiple\"\n-                            + \" images.  Input:PDF Output:Image Type:SI-Conditional\")\n+                        + \" color type, and DPI. Users can choose to get a single image or multiple\"\n+                        + \" images.  Input:PDF Output:Image Type:SI-Conditional\")\n     public ResponseEntity<byte[]> convertToImage(@ModelAttribute ConvertToImageRequest request)\n             throws Exception {\n         MultipartFile file = request.getFileInput();\n@@ -117,10 +117,14 @@ public ResponseEntity<byte[]> convertToImage(@ModelAttribute ConvertToImageReque\n                 }\n \n                 String pythonVersion = CheckProgramInstall.getAvailablePythonCommand();\n+                Path pngToWebpScript = GeneralUtils.extractScript(\"png_to_webp.py\");\n \n                 List<String> command = new ArrayList<>();\n                 command.add(pythonVersion);\n-                command.add(\"./scripts/png_to_webp.py\"); // Python script to handle the conversion\n+                command.add(\n+                        pngToWebpScript\n+                                .toAbsolutePath()\n+                                .toString()); // Python script to handle the conversion\n \n                 // Create a temporary directory for the output WebP files\n                 tempOutputDir = Files.createTempDirectory(\"webp_output\");\n@@ -232,7 +236,8 @@ public ResponseEntity<byte[]> convertToPdf(@ModelAttribute ConvertToPdfRequest r\n                 PdfUtils.imageToPdf(file, fitOption, autoRotate, colorType, pdfDocumentFactory);\n         return WebResponseUtils.bytesToWebResponse(\n                 bytes,\n-                new File(file[0].getOriginalFilename()).getName().replaceFirst(\"[.][^.]+$\", \"\") + \"_converted.pdf\");\n+                new File(file[0].getOriginalFilename()).getName().replaceFirst(\"[.][^.]+$\", \"\")\n+                        + \"_converted.pdf\");\n     }\n \n     private String getMediaType(String imageFormat) {\n\ndiff --git a/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/ExtractImageScansController.java b/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/ExtractImageScansController.java\n--- a/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/ExtractImageScansController.java\n+++ b/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/ExtractImageScansController.java\n@@ -34,6 +34,7 @@\n import stirling.software.common.service.CustomPDFDocumentFactory;\n import stirling.software.common.util.CheckProgramInstall;\n import stirling.software.common.util.ExceptionUtils;\n+import stirling.software.common.util.GeneralUtils;\n import stirling.software.common.util.ProcessExecutor;\n import stirling.software.common.util.ProcessExecutor.ProcessExecutorResult;\n import stirling.software.common.util.WebResponseUtils;\n@@ -54,9 +55,9 @@ public class ExtractImageScansController {\n             summary = \"Extract image scans from an input file\",\n             description =\n                     \"This endpoint extracts image scans from a given file based on certain\"\n-                            + \" parameters. Users can specify angle threshold, tolerance, minimum area,\"\n-                            + \" minimum contour area, and border size. Input:PDF Output:IMAGE/ZIP\"\n-                            + \" Type:SIMO\")\n+                        + \" parameters. Users can specify angle threshold, tolerance, minimum area,\"\n+                        + \" minimum contour area, and border size. Input:PDF Output:IMAGE/ZIP\"\n+                        + \" Type:SIMO\")\n     public ResponseEntity<byte[]> extractImageScans(\n             @ModelAttribute ExtractImageScansRequest request)\n             throws IOException, InterruptedException {\n@@ -78,6 +79,7 @@ public ResponseEntity<byte[]> extractImageScans(\n         }\n \n         String pythonVersion = CheckProgramInstall.getAvailablePythonCommand();\n+        Path splitPhotosScript = GeneralUtils.extractScript(\"split_photos.py\");\n         try {\n             // Check if input file is a PDF\n             if (\"pdf\".equalsIgnoreCase(extension)) {\n@@ -120,7 +122,7 @@ public ResponseEntity<byte[]> extractImageScans(\n                         new ArrayList<>(\n                                 Arrays.asList(\n                                         pythonVersion,\n-                                        \"./scripts/split_photos.py\",\n+                                        splitPhotosScript.toAbsolutePath().toString(),\n                                         images.get(i),\n                                         tempDir.toString(),\n                                         \"--angle_threshold\",",
    "output": "fix: correct paths for python scripts and implement classpath extraction (#3984)\n\n# Description of Changes\n\n- **What was changed**  \n- Relocated `png_to_webp.py` and `split_photos.py` from `scripts/` to\n`app/core/src/main/resources/static/python/`.\n- Updated `.github/labeler-config-srvaroa.yml` and\n`.pre-commit-config.yaml` to include the new script directory in their\nfile-matching patterns.\n- Added `GeneralUtils.extractScript(String scriptName)` to load Python\nscripts from the classpath (`static/python/`), extract them into a\ntemporary directory at runtime, and return the filesystem path.\n\n- **Why the change was made**  \n- To fix the Internal Server Error caused by missing script files at\ntheir old locations.\n- Ensure the Python helper scripts are packaged inside the JAR/WAR and\nreliably accessible when the application runs.\n  - Only local installations were affected\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/DeveloperGuide.md#6-testing)\nfor more details.\n\n---------\n\nCo-authored-by: Copilot <175728472+Copilot@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/app/core/src/main/java/stirling/software/SPDF/controller/api/security/WatermarkController.java b/app/core/src/main/java/stirling/software/SPDF/controller/api/security/WatermarkController.java\n--- a/app/core/src/main/java/stirling/software/SPDF/controller/api/security/WatermarkController.java\n+++ b/app/core/src/main/java/stirling/software/SPDF/controller/api/security/WatermarkController.java\n@@ -74,9 +74,19 @@ public void setAsText(String text) throws IllegalArgumentException {\n     public ResponseEntity<byte[]> addWatermark(@ModelAttribute AddWatermarkRequest request)\n             throws IOException, Exception {\n         MultipartFile pdfFile = request.getFileInput();\n+        String pdfFileName = pdfFile.getOriginalFilename();\n+        if (pdfFileName != null && (pdfFileName.contains(\"..\") || pdfFileName.startsWith(\"/\"))) {\n+            throw new SecurityException(\"Invalid file path in pdfFile\");\n+        }\n         String watermarkType = request.getWatermarkType();\n         String watermarkText = request.getWatermarkText();\n         MultipartFile watermarkImage = request.getWatermarkImage();\n+        if (watermarkImage != null) {\n+            String watermarkImageFileName = watermarkImage.getOriginalFilename();\n+            if (watermarkImageFileName != null && (watermarkImageFileName.contains(\"..\") || watermarkImageFileName.startsWith(\"/\"))) {\n+                throw new SecurityException(\"Invalid file path in watermarkImage\");\n+            }\n+        }\n         String alphabet = request.getAlphabet();\n         float fontSize = request.getFontSize();\n         float rotation = request.getRotation();",
    "output": "✨ (Snyk) Fixed finding: \"java/PT\" (#3976)\n\n**Pixee Fix ID:**\n[fb5fe72b-5b22-4654-a733-20930cb4f96a](https://stirlingpdf.getpixee.com/analysis/3c9d2b94-57c2-4525-9776-c5cd149902c4/fix/fb5fe72b-5b22-4654-a733-20930cb4f96a)\n\n<details>\n  <summary>Confidence: <b>HIGH</b></summary>\n\nFix confidence is a rating derived from an internal benchmark and\nincludes High, Medium, and Low confidence fixes. It comprises three\nweighted scores reflecting the safety, effectiveness and cleanliness of\nPixee's code changes within a fix. [View Details in\nPixee.](https://stirlingpdf.getpixee.com/analysis/3c9d2b94-57c2-4525-9776-c5cd149902c4/fix/fb5fe72b-5b22-4654-a733-20930cb4f96a)\n</details>\n\n---\n\n✨✨✨\n\n## Remediation\n\nThis change fixes \"java/PT\" (id = java/PT) identified by Snyk.\n\n## Details\n\nPath traversal is a security vulnerability that occurs when an attacker\nis able to access directories and files stored outside the intended\ndirectory. It bypasses security mechanisms by manipulating variables\nthat reference files with `../` sequences. The fix involved adding\nvalidation for `pdfFile` and `watermarkImage` to check for directory\ntraversal sequences, thereby preventing SecurityException occurrences.\n\nCo-authored-by: pixeebotstirling[bot] <221352955+pixeebotstirling[bot]@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java b/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java\n--- a/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java\n+++ b/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java\n@@ -329,6 +329,10 @@ List<Resource> generateInputFiles(File[] files) throws Exception {\n         }\n         List<Resource> outputFiles = new ArrayList<>();\n         for (File file : files) {\n+            Path normalizedPath = Paths.get(file.getName()).normalize();\n+            if (normalizedPath.startsWith(\"..\")) {\n+                throw new SecurityException(\"Potential path traversal attempt in file name: \" + file.getName());\n+            }\n             Path path = Paths.get(file.getAbsolutePath());\n             // debug statement\n             log.info(\"Reading file: \" + path);",
    "output": "✨ (Snyk) Fixed finding: \"java/PT\" (#3975)\n\n**Pixee Fix ID:**\n[203062ab-1b9b-42b8-be64-1358106dccab](https://stirlingpdf.getpixee.com/analysis/3c9d2b94-57c2-4525-9776-c5cd149902c4/fix/203062ab-1b9b-42b8-be64-1358106dccab)\n\n<details>\n  <summary>Confidence: <b>HIGH</b></summary>\n\nFix confidence is a rating derived from an internal benchmark and\nincludes High, Medium, and Low confidence fixes. It comprises three\nweighted scores reflecting the safety, effectiveness and cleanliness of\nPixee's code changes within a fix. [View Details in\nPixee.](https://stirlingpdf.getpixee.com/analysis/3c9d2b94-57c2-4525-9776-c5cd149902c4/fix/203062ab-1b9b-42b8-be64-1358106dccab)\n</details>\n\n---\n\n✨✨✨\n\n## Remediation\n\nThis change fixes \"java/PT\" (id = java/PT) identified by Snyk.\n\n## Details\n\nPath Traversal is a security vulnerability that allows attackers to gain\nunauthorized access to files and directories outside the permitted\naccess path by manipulating file paths. The fix involves adding\nvalidation to detect potential directory traversal attempts by\nnormalizing the file path and checking if it begins with '..', thereby\npreventing malicious manipulation.\n\nCo-authored-by: pixeebotstirling[bot] <221352955+pixeebotstirling[bot]@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/StampController.java b/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/StampController.java\n--- a/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/StampController.java\n+++ b/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/StampController.java\n@@ -42,6 +42,7 @@\n import stirling.software.common.util.TempFile;\n import stirling.software.common.util.TempFileManager;\n import stirling.software.common.util.WebResponseUtils;\n+import java.lang.IllegalArgumentException;\n \n @RestController\n @RequestMapping(\"/api/v1/misc\")\n@@ -62,9 +63,18 @@ public class StampController {\n     public ResponseEntity<byte[]> addStamp(@ModelAttribute AddStampRequest request)\n             throws IOException, Exception {\n         MultipartFile pdfFile = request.getFileInput();\n+        String pdfFileName = pdfFile.getOriginalFilename();\n+        if (pdfFileName.contains(\"..\") || pdfFileName.startsWith(\"/\")) {\n+            throw new IllegalArgumentException(\"Invalid PDF file path\");\n+        }\n+        \n         String stampType = request.getStampType();\n         String stampText = request.getStampText();\n         MultipartFile stampImage = request.getStampImage();\n+        String stampImageName = stampImage.getOriginalFilename();\n+        if (stampImageName.contains(\"..\") || stampImageName.startsWith(\"/\")) {\n+            throw new IllegalArgumentException(\"Invalid stamp image file path\");\n+        }\n         String alphabet = request.getAlphabet();\n         float fontSize = request.getFontSize();\n         float rotation = request.getRotation();",
    "output": "✨ (Snyk) Fixed finding: \"java/PT\" (#3974)\n\n**Pixee Fix ID:**\n[dab7f6f1-da39-4654-a537-2de8eee936db](https://stirlingpdf.getpixee.com/analysis/3c9d2b94-57c2-4525-9776-c5cd149902c4/fix/dab7f6f1-da39-4654-a537-2de8eee936db)\n\n<details>\n  <summary>Confidence: <b>HIGH</b></summary>\n\nFix confidence is a rating derived from an internal benchmark and\nincludes High, Medium, and Low confidence fixes. It comprises three\nweighted scores reflecting the safety, effectiveness and cleanliness of\nPixee's code changes within a fix. [View Details in\nPixee.](https://stirlingpdf.getpixee.com/analysis/3c9d2b94-57c2-4525-9776-c5cd149902c4/fix/dab7f6f1-da39-4654-a537-2de8eee936db)\n</details>\n\n---\n\n✨✨✨\n\n## Remediation\n\nThis change fixes \"java/PT\" (id = java/PT) identified by Snyk.\n\n## Details\n\nPath Traversal is a security vulnerability that allows attackers to\naccess files and directories stored outside the web root folder. The\nimpact can include unauthorized access to sensitive files. The fix\ninvolved adding validation checks on filenames to ensure they do not\ncontain suspicious patterns like '..' or '/' which are indicative of\npath traversal attempts.\n\nCo-authored-by: pixeebotstirling[bot] <221352955+pixeebotstirling[bot]@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java b/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java\n--- a/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java\n+++ b/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java\n@@ -108,7 +108,9 @@ PipelineResult runPipelineAgainstFiles(List<Resource> outputFiles, PipelineConfi\n             if (inputFileTypes == null) {\n                 inputFileTypes = new ArrayList<String>(Arrays.asList(\"ALL\"));\n             }\n-            // List outputFileTypes = apiDocService.getExtensionTypes(true, operation);\n+            if (!operation.matches(\"^[a-zA-Z0-9_-]+$\")) {\n+                throw new IllegalArgumentException(\"Invalid operation value received.\");\n+            }\n             String url = getBaseUrl() + operation;\n             List<Resource> newOutputFiles = new ArrayList<>();\n             if (!isMultiInputOperation) {",
    "output": "✨ (Snyk) Fixed finding: \"java/Ssrf\" (#3973)\n\n**Pixee Fix ID:**\n[54568072-e1ef-4428-9da3-46b9197f6dcd](https://stirlingpdf.getpixee.com/analysis/3c9d2b94-57c2-4525-9776-c5cd149902c4/fix/54568072-e1ef-4428-9da3-46b9197f6dcd)\n\n<details>\n  <summary>Confidence: <b>HIGH</b></summary>\n\nFix confidence is a rating derived from an internal benchmark and\nincludes High, Medium, and Low confidence fixes. It comprises three\nweighted scores reflecting the safety, effectiveness and cleanliness of\nPixee's code changes within a fix. [View Details in\nPixee.](https://stirlingpdf.getpixee.com/analysis/3c9d2b94-57c2-4525-9776-c5cd149902c4/fix/54568072-e1ef-4428-9da3-46b9197f6dcd)\n</details>\n\n---\n\n✨✨✨\n\n## Remediation\n\nThis change fixes \"java/Ssrf\" (id = java/Ssrf) identified by Snyk.\n\n## Details\n\nServer-Side Request Forgery (SSRF) can allow attackers to make\nunauthorized requests from the server, potentially accessing sensitive\ninternal systems. The fix involved adding a validation check to ensure\nthat the 'operation' parameter matches a safe regex pattern, thereby\npreventing such vulnerabilities.\n\nCo-authored-by: pixeebotstirling[bot] <221352955+pixeebotstirling[bot]@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java b/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java\n--- a/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java\n+++ b/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java\n@@ -1,6 +1,7 @@\n package stirling.software.SPDF.controller.api.converters;\n \n import java.io.ByteArrayOutputStream;\n+import java.io.File;\n import java.io.FileOutputStream;\n import java.io.IOException;\n import java.net.URLConnection;\n@@ -87,7 +88,7 @@ public ResponseEntity<byte[]> convertToImage(@ModelAttribute ConvertToImageReque\n             // returns bytes for image\n             boolean singleImage = \"single\".equals(singleOrMultiple);\n             String filename =\n-                    Filenames.toSimpleFileName(file.getOriginalFilename())\n+                    Filenames.toSimpleFileName(new File(file.getOriginalFilename()).getName())\n                             .replaceFirst(\"[.][^.]+$\", \"\");\n \n             result =\n@@ -231,7 +232,7 @@ public ResponseEntity<byte[]> convertToPdf(@ModelAttribute ConvertToPdfRequest r\n                 PdfUtils.imageToPdf(file, fitOption, autoRotate, colorType, pdfDocumentFactory);\n         return WebResponseUtils.bytesToWebResponse(\n                 bytes,\n-                file[0].getOriginalFilename().replaceFirst(\"[.][^.]+$\", \"\") + \"_converted.pdf\");\n+                new File(file[0].getOriginalFilename()).getName().replaceFirst(\"[.][^.]+$\", \"\") + \"_converted.pdf\");\n     }\n \n     private String getMediaType(String imageFormat) {",
    "output": "✨ (Snyk) Fixed finding: \"java/PT\" (#3972)\n\n**Pixee Fix ID:**\n[8be62d8f-950d-4780-bc08-a8c04d176806](https://stirlingpdf.getpixee.com/analysis/3c9d2b94-57c2-4525-9776-c5cd149902c4/fix/8be62d8f-950d-4780-bc08-a8c04d176806)\n\n<details>\n  <summary>Confidence: <b>HIGH</b></summary>\n\nFix confidence is a rating derived from an internal benchmark and\nincludes High, Medium, and Low confidence fixes. It comprises three\nweighted scores reflecting the safety, effectiveness and cleanliness of\nPixee's code changes within a fix. [View Details in\nPixee.](https://stirlingpdf.getpixee.com/analysis/3c9d2b94-57c2-4525-9776-c5cd149902c4/fix/8be62d8f-950d-4780-bc08-a8c04d176806)\n</details>\n\n---\n\n✨✨✨\n\n## Remediation\n\nThis change fixes \"java/PT\" (id = java/PT) identified by Snyk.\n\n## Details\n\nPath Traversal vulnerabilities allow attackers to manipulate paths to\naccess files and directories that are outside of the intended scope. The\nfix involves adding an import for java.io.File to handle file paths more\nsecurely.\n\nCo-authored-by: pixeebotstirling[bot] <221352955+pixeebotstirling[bot]@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/PrintFileController.java b/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/PrintFileController.java\n--- a/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/PrintFileController.java\n+++ b/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/PrintFileController.java\n@@ -7,6 +7,7 @@\n import java.awt.print.PrinterException;\n import java.awt.print.PrinterJob;\n import java.io.IOException;\n+import java.nio.file.Paths;\n import java.util.Arrays;\n \n import javax.imageio.ImageIO;\n@@ -45,6 +46,10 @@ public class PrintFileController {\n     public ResponseEntity<String> printFile(@ModelAttribute PrintFileRequest request)\n             throws IOException {\n         MultipartFile file = request.getFileInput();\n+        String originalFilename = file.getOriginalFilename();\n+        if (originalFilename != null && (originalFilename.contains(\"..\") || Paths.get(originalFilename).isAbsolute())) {\n+            throw new IOException(\"Invalid file path detected: \" + originalFilename);\n+        }\n         String printerName = request.getPrinterName();\n         String contentType = file.getContentType();\n         try {",
    "output": "✨ (Snyk) Fixed finding: \"java/PT\" (#3971)\n\n**Pixee Fix ID:**\n[baa2e86a-2e2f-4c8e-99e0-bc99ce846b94](https://stirlingpdf.getpixee.com/analysis/3c9d2b94-57c2-4525-9776-c5cd149902c4/fix/baa2e86a-2e2f-4c8e-99e0-bc99ce846b94)\n\n<details>\n  <summary>Confidence: <b>HIGH</b></summary>\n\nFix confidence is a rating derived from an internal benchmark and\nincludes High, Medium, and Low confidence fixes. It comprises three\nweighted scores reflecting the safety, effectiveness and cleanliness of\nPixee's code changes within a fix. [View Details in\nPixee.](https://stirlingpdf.getpixee.com/analysis/3c9d2b94-57c2-4525-9776-c5cd149902c4/fix/baa2e86a-2e2f-4c8e-99e0-bc99ce846b94)\n</details>\n\n---\n\n✨✨✨\n\n## Remediation\n\nThis change fixes \"java/PT\" (id = java/PT) identified by Snyk.\n\n## Details\n\nPath Traversal is a security vulnerability that enables attackers to\ngain unauthorized access to files and directories stored outside the web\nroot folder. To address this, a fix was made by adding\njava.nio.file.Paths import for path validation, ensuring that paths are\nproperly sanitized and validated.\n\nCo-authored-by: pixeebotstirling[bot] <221352955+pixeebotstirling[bot]@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/ScannerEffectController.java b/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/ScannerEffectController.java\n--- a/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/ScannerEffectController.java\n+++ b/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/ScannerEffectController.java\n@@ -33,7 +33,7 @@\n import lombok.RequiredArgsConstructor;\n import lombok.extern.slf4j.Slf4j;\n \n-import stirling.software.SPDF.model.api.misc.FakeScanRequest;\n+import stirling.software.SPDF.model.api.misc.ScannerEffectRequest;\n import stirling.software.common.service.CustomPDFDocumentFactory;\n import stirling.software.common.util.WebResponseUtils;\n \n@@ -42,7 +42,7 @@\n @Tag(name = \"Misc\", description = \"Miscellaneous PDF APIs\")\n @RequiredArgsConstructor\n @Slf4j\n-public class FakeScanController {\n+public class ScannerEffectController {\n \n     private final CustomPDFDocumentFactory pdfDocumentFactory;\n     private static final Random RANDOM = new Random();\n@@ -52,12 +52,12 @@ public class FakeScanController {\n     private static final int MAX_IMAGE_HEIGHT = 8192;\n     private static final long MAX_IMAGE_PIXELS = 16_777_216; // 4096x4096\n \n-    @PostMapping(value = \"/fake-scan\", consumes = \"multipart/form-data\")\n+    @PostMapping(value = \"/scanner-effect\", consumes = \"multipart/form-data\")\n     @Operation(\n-            summary = \"Convert PDF to look like a scanned document\",\n+            summary = \"Apply scanner effect to PDF\",\n             description =\n-                    \"Applies various effects to make a PDF look like it was scanned, including rotation, noise, and edge softening. Input:PDF Output:PDF Type:SISO\")\n-    public ResponseEntity<byte[]> fakeScan(@Valid @ModelAttribute FakeScanRequest request)\n+                    \"Applies various effects to simulate a scanned document, including rotation, noise, and edge softening. Input:PDF Output:PDF Type:SISO\")\n+    public ResponseEntity<byte[]> scannerEffect(@Valid @ModelAttribute ScannerEffectRequest request)\n             throws IOException {\n         MultipartFile file = request.getFileInput();\n \n@@ -80,7 +80,7 @@ public ResponseEntity<byte[]> fakeScan(@Valid @ModelAttribute FakeScanRequest re\n         float noise = request.getNoise();\n         boolean yellowish = request.isYellowish();\n         int resolution = request.getResolution();\n-        FakeScanRequest.Colorspace colorspace = request.getColorspace();\n+        ScannerEffectRequest.Colorspace colorspace = request.getColorspace();\n \n         try (PDDocument document = pdfDocumentFactory.load(file)) {\n             PDDocument outputDocument = new PDDocument();\n@@ -130,7 +130,7 @@ public ResponseEntity<byte[]> fakeScan(@Valid @ModelAttribute FakeScanRequest re\n \n                 // 1. Convert to grayscale or keep color\n                 BufferedImage processed;\n-                if (colorspace == FakeScanRequest.Colorspace.grayscale) {\n+                if (colorspace == ScannerEffectRequest.Colorspace.grayscale) {\n                     processed =\n                             new BufferedImage(\n                                     image.getWidth(),\n@@ -316,7 +316,7 @@ public ResponseEntity<byte[]> fakeScan(@Valid @ModelAttribute FakeScanRequest re\n             String outputFilename =\n                     Filenames.toSimpleFileName(file.getOriginalFilename())\n                                     .replaceFirst(\"[.][^.]+$\", \"\")\n-                            + \"_scanned.pdf\";\n+                            + \"_scanner_effect.pdf\";\n \n             return WebResponseUtils.bytesToWebResponse(\n                     outputStream.toByteArray(), outputFilename, MediaType.APPLICATION_PDF);\n\ndiff --git a/app/core/src/main/java/stirling/software/SPDF/controller/web/OtherWebController.java b/app/core/src/main/java/stirling/software/SPDF/controller/web/OtherWebController.java\n--- a/app/core/src/main/java/stirling/software/SPDF/controller/web/OtherWebController.java\n+++ b/app/core/src/main/java/stirling/software/SPDF/controller/web/OtherWebController.java\n@@ -70,11 +70,11 @@ public String addPageNumbersForm(Model model) {\n         return \"misc/add-page-numbers\";\n     }\n \n-    @GetMapping(\"/fake-scan\")\n+    @GetMapping(\"/scanner-effect\")\n     @Hidden\n-    public String fakeScanForm(Model model) {\n-        model.addAttribute(\"currentPage\", \"fake-scan\");\n-        return \"misc/fake-scan\";\n+    public String scannerEffectForm(Model model) {\n+        model.addAttribute(\"currentPage\", \"scanner-effect\");\n+        return \"misc/scanner-effect\";\n     }\n \n     @GetMapping(\"/extract-images\")\n\ndiff --git a/app/core/src/main/java/stirling/software/SPDF/model/api/misc/ScannerEffectRequest.java b/app/core/src/main/java/stirling/software/SPDF/model/api/misc/ScannerEffectRequest.java\n--- a/app/core/src/main/java/stirling/software/SPDF/model/api/misc/ScannerEffectRequest.java\n+++ b/app/core/src/main/java/stirling/software/SPDF/model/api/misc/ScannerEffectRequest.java\n@@ -11,7 +11,7 @@\n \n @Data\n @EqualsAndHashCode\n-public class FakeScanRequest {\n+public class ScannerEffectRequest {\n     public enum Quality {\n         low,\n         medium,",
    "output": "fake scan to scanner effect (#3954)\n\n# Description of Changes\n\n<!--\nPlease provide a summary of the changes, including:\n\n- What was changed\n- Why the change was made\n- Any challenges encountered\n\nCloses #(issue_number)\n-->\n\n---\n\n## Checklist\n\n### General\n\n- [ ] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [ ] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/HowToAddNewLanguage.md)\n(if applicable)\n- [ ] I have performed a self-review of my own code\n- [ ] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/app/common/src/main/java/stirling/software/common/aop/AutoJobAspect.java b/app/common/src/main/java/stirling/software/common/aop/AutoJobAspect.java\n--- a/app/common/src/main/java/stirling/software/common/aop/AutoJobAspect.java\n+++ b/app/common/src/main/java/stirling/software/common/aop/AutoJobAspect.java\n@@ -43,7 +43,11 @@ public Object wrapWithJobExecution(\n         // This aspect will run before any audit aspects due to @Order(0)\n         // Extract parameters from the request and annotation\n         boolean async = Boolean.parseBoolean(request.getParameter(\"async\"));\n-        log.debug(\"AutoJobAspect: Processing {} {} with async={}\", request.getMethod(), request.getRequestURI(), async);\n+        log.debug(\n+                \"AutoJobAspect: Processing {} {} with async={}\",\n+                request.getMethod(),\n+                request.getRequestURI(),\n+                async);\n         long timeout = autoJobPostMapping.timeout();\n         int retryCount = autoJobPostMapping.retryCount();\n         boolean trackProgress = autoJobPostMapping.trackProgress();\n@@ -219,10 +223,9 @@ private Object executeWithRetries(\n                 resourceWeight);\n     }\n \n-\n     /**\n-     * Processes arguments in-place to handle file resolution and async file persistence.\n-     * This approach avoids type mismatch issues by modifying the original objects directly.\n+     * Processes arguments in-place to handle file resolution and async file persistence. This\n+     * approach avoids type mismatch issues by modifying the original objects directly.\n      *\n      * @param originalArgs The original arguments\n      * @param async Whether this is an async operation\n\ndiff --git a/app/common/src/main/java/stirling/software/common/model/job/JobResult.java b/app/common/src/main/java/stirling/software/common/model/job/JobResult.java\n--- a/app/common/src/main/java/stirling/software/common/model/job/JobResult.java\n+++ b/app/common/src/main/java/stirling/software/common/model/job/JobResult.java\n@@ -30,8 +30,7 @@ public class JobResult {\n     private String error;\n \n     /** List of result files for jobs that produce files */\n-    @JsonIgnore\n-    private List<ResultFile> resultFiles;\n+    @JsonIgnore private List<ResultFile> resultFiles;\n \n     /** Time when the job was created */\n     private LocalDateTime createdAt;",
    "output": "Nav Bar Fixes for Mobile Devices (#3927)\n\n# Description of Changes\n\n<!--\nPlease provide a summary of the changes, including:\n\n- Nav bar was changed to be more responsive to mobile\n- DPR was disabled on mobile devices < 1200 pixels wide\n- Chevron up/down icons added to collapsable menu items on mobile\n- I changes bg-card styling to add a liltle bit of a margin to the\nbg-card components on mobile.\n- Changed from hover to open -> click to open on nav bar items, I feel\nthis is more intuitive, let me know what you think\n\nCloses #(issue_number)\n-->\n\n---\n\n## Checklist\n\n### General\n\n- [x ] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [ x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/HowToAddNewLanguage.md)\n(if applicable)\n- [ x] I have performed a self-review of my own code\n- [ x] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/DeveloperGuide.md#6-testing)\nfor more details.\n\n---------\n\nCo-authored-by: Ethan <ethan@MacBook-Pro.local>"
  },
  {
    "input": "diff --git a/app/common/src/main/java/stirling/software/common/config/TempFileShutdownHook.java b/app/common/src/main/java/stirling/software/common/config/TempFileShutdownHook.java\n--- a/app/common/src/main/java/stirling/software/common/config/TempFileShutdownHook.java\n+++ b/app/common/src/main/java/stirling/software/common/config/TempFileShutdownHook.java\n@@ -6,7 +6,6 @@\n import java.util.Set;\n \n import org.springframework.beans.factory.DisposableBean;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n import lombok.extern.slf4j.Slf4j;\n@@ -24,7 +23,6 @@ public class TempFileShutdownHook implements DisposableBean {\n \n     private final TempFileRegistry registry;\n \n-    @Autowired\n     public TempFileShutdownHook(TempFileRegistry registry) {\n         this.registry = registry;\n \n\ndiff --git a/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/UnlockPDFFormsController.java b/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/UnlockPDFFormsController.java\n--- a/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/UnlockPDFFormsController.java\n+++ b/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/UnlockPDFFormsController.java\n@@ -10,7 +10,6 @@\n import org.apache.pdfbox.pdmodel.common.PDStream;\n import org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm;\n import org.apache.pdfbox.pdmodel.interactive.form.PDField;\n-import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.ResponseEntity;\n import org.springframework.web.bind.annotation.ModelAttribute;\n import org.springframework.web.bind.annotation.PostMapping;\n@@ -34,7 +33,6 @@\n public class UnlockPDFFormsController {\n     private final CustomPDFDocumentFactory pdfDocumentFactory;\n \n-    @Autowired\n     public UnlockPDFFormsController(CustomPDFDocumentFactory pdfDocumentFactory) {\n         this.pdfDocumentFactory = pdfDocumentFactory;\n     }",
    "output": "refactor: move modules under app/ directory and update file paths (#3938)\n\n# Description of Changes\n\n- **What was changed:**  \n- Renamed top-level directories: `stirling-pdf` → `app/core`, `common` →\n`app/common`, `proprietary` → `app/proprietary`.\n- Updated all path references in `.gitattributes`, GitHub workflows\n(`.github/workflows/*`), scripts (`.github/scripts/*`), `.gitignore`,\nDockerfiles, license files, and template settings to reflect the new\nstructure.\n- Added a new CI job `check-generateOpenApiDocs` to generate and upload\nOpenAPI documentation.\n- Removed redundant `@Autowired` annotations from `TempFileShutdownHook`\nand `UnlockPDFFormsController`.\n- Minor formatting and comment adjustments in YAML templates and\nresource files.\n\n- **Why the change was made:**  \n- To introduce a clear `app/` directory hierarchy for core, common, and\nproprietary modules, improving organization and maintainability.\n- To ensure continuous integration and Docker builds continue to work\nseamlessly with the reorganized structure.\n- To automate OpenAPI documentation generation as part of the CI\npipeline.\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/common/src/test/java/stirling/software/common/service/TaskManagerTest.java b/common/src/test/java/stirling/software/common/service/TaskManagerTest.java\n--- a/common/src/test/java/stirling/software/common/service/TaskManagerTest.java\n+++ b/common/src/test/java/stirling/software/common/service/TaskManagerTest.java\n@@ -95,10 +95,10 @@ void testSetFileResult() throws Exception {\n         assertTrue(result.isComplete());\n         assertTrue(result.hasFiles());\n         assertFalse(result.hasMultipleFiles());\n-        \n+\n         var resultFiles = result.getAllResultFiles();\n         assertEquals(1, resultFiles.size());\n-        \n+\n         ResultFile resultFile = resultFiles.get(0);\n         assertEquals(fileId, resultFile.getFileId());\n         assertEquals(originalFileName, resultFile.getFileName());\n@@ -180,7 +180,7 @@ void testGetJobStats() throws Exception {\n         // Arrange\n         // Mock fileStorage.getFileSize for file operations\n         when(fileStorage.getFileSize(\"file-id\")).thenReturn(1024L);\n-        \n+\n         // 1. Create active job\n         String activeJobId = \"active-job\";\n         taskManager.createTask(activeJobId);\n@@ -232,7 +232,7 @@ void testCleanupOldJobs() throws Exception {\n         LocalDateTime oldTime = LocalDateTime.now().minusHours(1);\n         ReflectionTestUtils.setField(oldJob, \"completedAt\", oldTime);\n         ReflectionTestUtils.setField(oldJob, \"complete\", true);\n-        \n+\n         // Create a ResultFile and set it using the new approach\n         ResultFile resultFile = ResultFile.builder()\n                 .fileId(\"file-id\")",
    "output": "🤖 format everything with pre-commit by stirlingbot (#3942)\n\nAuto-generated by [create-pull-request][1] with **stirlingbot**\n\n[1]: https://github.com/peter-evans/create-pull-request\n\nSigned-off-by: stirlingbot[bot] <stirlingbot[bot]@users.noreply.github.com>\nCo-authored-by: stirlingbot[bot] <195170888+stirlingbot[bot]@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/common/src/main/java/stirling/software/common/aop/AutoJobAspect.java b/common/src/main/java/stirling/software/common/aop/AutoJobAspect.java\n--- a/common/src/main/java/stirling/software/common/aop/AutoJobAspect.java\n+++ b/common/src/main/java/stirling/software/common/aop/AutoJobAspect.java\n@@ -43,6 +43,7 @@ public Object wrapWithJobExecution(\n         // This aspect will run before any audit aspects due to @Order(0)\n         // Extract parameters from the request and annotation\n         boolean async = Boolean.parseBoolean(request.getParameter(\"async\"));\n+        log.debug(\"AutoJobAspect: Processing {} {} with async={}\", request.getMethod(), request.getRequestURI(), async);\n         long timeout = autoJobPostMapping.timeout();\n         int retryCount = autoJobPostMapping.retryCount();\n         boolean trackProgress = autoJobPostMapping.trackProgress();\n@@ -54,19 +55,8 @@ public Object wrapWithJobExecution(\n                 retryCount,\n                 trackProgress);\n \n-        // Copy and process arguments\n-        // In a test environment, we might need to update the original objects for verification\n-        boolean isTestEnvironment = false;\n-        try {\n-            isTestEnvironment = Class.forName(\"org.junit.jupiter.api.Test\") != null;\n-        } catch (ClassNotFoundException e) {\n-            // Not in a test environment\n-        }\n-\n-        Object[] args =\n-                isTestEnvironment\n-                        ? processArgsInPlace(joinPoint.getArgs(), async)\n-                        : copyAndProcessArgs(joinPoint.getArgs(), async);\n+        // Process arguments in-place to avoid type mismatch issues\n+        Object[] args = processArgsInPlace(joinPoint.getArgs(), async);\n \n         // Extract queueable and resourceWeight parameters and validate\n         boolean queueable = autoJobPostMapping.queueable();\n@@ -229,79 +219,10 @@ private Object executeWithRetries(\n                 resourceWeight);\n     }\n \n-    /**\n-     * Creates deep copies of arguments when needed to avoid mutating the original objects\n-     * Particularly important for PDFFile objects that might be reused by Spring\n-     *\n-     * @param originalArgs The original arguments\n-     * @param async Whether this is an async operation\n-     * @return A new array with safely processed arguments\n-     */\n-    private Object[] copyAndProcessArgs(Object[] originalArgs, boolean async) {\n-        if (originalArgs == null || originalArgs.length == 0) {\n-            return originalArgs;\n-        }\n-\n-        Object[] processedArgs = new Object[originalArgs.length];\n-\n-        // Copy all arguments\n-        for (int i = 0; i < originalArgs.length; i++) {\n-            Object arg = originalArgs[i];\n-\n-            if (arg instanceof PDFFile pdfFile) {\n-                // Create a copy of PDFFile to avoid mutating the original\n-                // Using direct property access instead of reflection for better performance\n-                PDFFile pdfFileCopy = new PDFFile();\n-                pdfFileCopy.setFileId(pdfFile.getFileId());\n-                pdfFileCopy.setFileInput(pdfFile.getFileInput());\n-\n-                // Case 1: fileId is provided but no fileInput\n-                if (pdfFileCopy.getFileInput() == null && pdfFileCopy.getFileId() != null) {\n-                    try {\n-                        log.debug(\"Using fileId {} to get file content\", pdfFileCopy.getFileId());\n-                        MultipartFile file = fileStorage.retrieveFile(pdfFileCopy.getFileId());\n-                        pdfFileCopy.setFileInput(file);\n-                    } catch (Exception e) {\n-                        throw new RuntimeException(\n-                                \"Failed to resolve file by ID: \" + pdfFileCopy.getFileId(), e);\n-                    }\n-                }\n-                // Case 2: For async requests, we need to make a copy of the MultipartFile\n-                else if (async && pdfFileCopy.getFileInput() != null) {\n-                    try {\n-                        log.debug(\"Making persistent copy of uploaded file for async processing\");\n-                        MultipartFile originalFile = pdfFileCopy.getFileInput();\n-                        String fileId = fileStorage.storeFile(originalFile);\n-\n-                        // Store the fileId for later reference\n-                        pdfFileCopy.setFileId(fileId);\n-\n-                        // Replace the original MultipartFile with our persistent copy\n-                        MultipartFile persistentFile = fileStorage.retrieveFile(fileId);\n-                        pdfFileCopy.setFileInput(persistentFile);\n-\n-                        log.debug(\"Created persistent file copy with fileId: {}\", fileId);\n-                    } catch (IOException e) {\n-                        throw new RuntimeException(\n-                                \"Failed to create persistent copy of uploaded file\", e);\n-                    }\n-                }\n-\n-                processedArgs[i] = pdfFileCopy;\n-            } else {\n-                // For non-PDFFile objects, just pass the original reference\n-                // If other classes need copy-on-write, add them here\n-                processedArgs[i] = arg;\n-            }\n-        }\n-\n-        return processedArgs;\n-    }\n \n     /**\n-     * Processes arguments in-place for testing purposes This is similar to our original\n-     * implementation before introducing copy-on-write It's only used in test environments to\n-     * maintain test compatibility\n+     * Processes arguments in-place to handle file resolution and async file persistence.\n+     * This approach avoids type mismatch issues by modifying the original objects directly.\n      *\n      * @param originalArgs The original arguments\n      * @param async Whether this is an async operation\n\ndiff --git a/common/src/main/java/stirling/software/common/model/job/JobResult.java b/common/src/main/java/stirling/software/common/model/job/JobResult.java\n--- a/common/src/main/java/stirling/software/common/model/job/JobResult.java\n+++ b/common/src/main/java/stirling/software/common/model/job/JobResult.java\n@@ -6,6 +6,8 @@\n import java.util.List;\n import java.util.concurrent.CopyOnWriteArrayList;\n \n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+\n import lombok.AllArgsConstructor;\n import lombok.Builder;\n import lombok.Data;\n@@ -28,6 +30,7 @@ public class JobResult {\n     private String error;\n \n     /** List of result files for jobs that produce files */\n+    @JsonIgnore\n     private List<ResultFile> resultFiles;\n \n     /** Time when the job was created */\n\ndiff --git a/common/src/main/java/stirling/software/common/service/TaskManager.java b/common/src/main/java/stirling/software/common/service/TaskManager.java\n--- a/common/src/main/java/stirling/software/common/service/TaskManager.java\n+++ b/common/src/main/java/stirling/software/common/service/TaskManager.java\n@@ -1,6 +1,5 @@\n package stirling.software.common.service;\n \n-import io.github.pixee.security.ZipSecurity;\n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n@@ -21,6 +20,8 @@\n import org.springframework.stereotype.Service;\n import org.springframework.web.multipart.MultipartFile;\n \n+import io.github.pixee.security.ZipSecurity;\n+\n import jakarta.annotation.PreDestroy;\n \n import lombok.extern.slf4j.Slf4j;\n@@ -361,7 +362,8 @@ private List<ResultFile> extractZipToIndividualFiles(\n         MultipartFile zipFile = fileStorage.retrieveFile(zipFileId);\n \n         try (ZipInputStream zipIn =\n-                ZipSecurity.createHardenedInputStream(new ByteArrayInputStream(zipFile.getBytes()))) {\n+                ZipSecurity.createHardenedInputStream(\n+                        new ByteArrayInputStream(zipFile.getBytes()))) {\n             ZipEntry entry;\n             while ((entry = zipIn.getNextEntry()) != null) {\n                 if (!entry.isDirectory()) {\n\ndiff --git a/stirling-pdf/src/main/java/stirling/software/SPDF/config/CleanUrlInterceptor.java b/stirling-pdf/src/main/java/stirling/software/SPDF/config/CleanUrlInterceptor.java\n--- a/stirling-pdf/src/main/java/stirling/software/SPDF/config/CleanUrlInterceptor.java\n+++ b/stirling-pdf/src/main/java/stirling/software/SPDF/config/CleanUrlInterceptor.java\n@@ -29,7 +29,8 @@ public class CleanUrlInterceptor implements HandlerInterceptor {\n                     \"type\",\n                     \"principal\",\n                     \"startDate\",\n-                    \"endDate\");\n+                    \"endDate\",\n+                    \"async\");\n \n     @Override\n     public boolean preHandle(",
    "output": "AOP Fixes for v2 async (#3934)\n\n# Description of Changes\n\n<!--\nPlease provide a summary of the changes, including:\n\n- What was changed\n- Why the change was made\n- Any challenges encountered\n\nCloses #(issue_number)\n-->\n\n---\n\n## Checklist\n\n### General\n\n- [ ] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [ ] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/HowToAddNewLanguage.md)\n(if applicable)\n- [ ] I have performed a self-review of my own code\n- [ ] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/common/src/main/java/stirling/software/common/configuration/AppConfig.java b/common/src/main/java/stirling/software/common/configuration/AppConfig.java\n--- a/common/src/main/java/stirling/software/common/configuration/AppConfig.java\n+++ b/common/src/main/java/stirling/software/common/configuration/AppConfig.java\n@@ -21,6 +21,7 @@\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.core.io.Resource;\n import org.springframework.core.io.ResourceLoader;\n+import org.springframework.util.ClassUtils;\n import org.thymeleaf.spring6.SpringTemplateEngine;\n \n import lombok.Getter;\n@@ -148,23 +149,11 @@ public boolean isRunningInDockerWithConfig() {\n     }\n \n     @Bean(name = \"activeSecurity\")\n-    public boolean activeSecurity() {\n-        String disableAdditionalFeatures = env.getProperty(\"DISABLE_ADDITIONAL_FEATURES\");\n-\n-        if (disableAdditionalFeatures != null) {\n-            // DISABLE_ADDITIONAL_FEATURES=true means security OFF, so return false\n-            // DISABLE_ADDITIONAL_FEATURES=false means security ON, so return true\n-            return !Boolean.parseBoolean(disableAdditionalFeatures);\n-        }\n-\n-        return env.getProperty(\"DOCKER_ENABLE_SECURITY\", Boolean.class, true);\n-    }\n-\n-    @Bean(name = \"missingActiveSecurity\")\n-    @ConditionalOnMissingClass(\n-            \"stirling.software.proprietary.security.configuration.SecurityConfiguration\")\n     public boolean missingActiveSecurity() {\n-        return true;\n+        return ClassUtils.isPresent(\n+            \"stirling.software.proprietary.security.configuration.SecurityConfiguration\",\n+            this.getClass().getClassLoader()\n+        );\n     }\n \n     @Bean(name = \"directoryFilter\")",
    "output": "Fix for `generateOpenApiDocs` Task (#3911)\n\n# Description of Changes\n\nFix for `generateOpenApiDocs` task\n\n---\n\n## Checklist\n\n### General\n\n- [ ] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [ ] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/HowToAddNewLanguage.md)\n(if applicable)\n- [ ] I have performed a self-review of my own code\n- [ ] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/DeveloperGuide.md#6-testing)\nfor more details.\n\n---------\n\nCo-authored-by: Anthony Stirling <77850077+Frooodle@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/stirling-pdf/src/main/java/stirling/software/SPDF/config/WebMvcConfig.java b/stirling-pdf/src/main/java/stirling/software/SPDF/config/WebMvcConfig.java\n--- a/stirling-pdf/src/main/java/stirling/software/SPDF/config/WebMvcConfig.java\n+++ b/stirling-pdf/src/main/java/stirling/software/SPDF/config/WebMvcConfig.java\n@@ -26,8 +26,6 @@ public void addResourceHandlers(ResourceHandlerRegistry registry) {\n         registry.addResourceHandler(\"/**\")\n                 .addResourceLocations(\n                         \"file:\" + InstallationPathConfig.getStaticPath(), \"classpath:/static/\");\n-        registry.addResourceHandler(\"/js/**\").addResourceLocations(\"classpath:/static/js/\");\n-        registry.addResourceHandler(\"/css/**\").addResourceLocations(\"classpath:/static/css/\");\n         // .setCachePeriod(0); // Optional: disable caching\n     }\n }",
    "output": "fix for #3907 resource override (#3910)\n\n# Description of Changes\n\n<!--\nPlease provide a summary of the changes, including:\n\n- What was changed\n- Why the change was made\n- Any challenges encountered\n\nCloses #(issue_number)\n-->\n\n---\n\n## Checklist\n\n### General\n\n- [ ] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [ ] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/HowToAddNewLanguage.md)\n(if applicable)\n- [ ] I have performed a self-review of my own code\n- [ ] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/stirling-pdf/src/main/java/stirling/software/SPDF/service/ApiDocService.java b/stirling-pdf/src/main/java/stirling/software/SPDF/service/ApiDocService.java\n--- a/stirling-pdf/src/main/java/stirling/software/SPDF/service/ApiDocService.java\n+++ b/stirling-pdf/src/main/java/stirling/software/SPDF/service/ApiDocService.java\n@@ -120,8 +120,8 @@ private synchronized void loadApiDocumentation() {\n             ObjectMapper mapper = new ObjectMapper();\n             apiDocsJsonRootNode = mapper.readTree(apiDocsJson);\n             JsonNode paths = apiDocsJsonRootNode.path(\"paths\");\n-            paths.fields()\n-                    .forEachRemaining(\n+            paths.propertyStream()\n+                    .forEach(\n                             entry -> {\n                                 String path = entry.getKey();\n                                 JsonNode pathNode = entry.getValue();",
    "output": "refactor: replace deprecated `fields()` with `propertyStream()` in ApiDocService (#3838)\n\n# Description of Changes\n\n- Replaced usage of the deprecated `fields()` method on `JsonNode` with\n`propertyStream()` in `ApiDocService`.\n- This change ensures compatibility with future Jackson versions and\navoids deprecation warnings.\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/stirling-pdf/src/main/java/stirling/software/SPDF/controller/api/misc/StampController.java b/stirling-pdf/src/main/java/stirling/software/SPDF/controller/api/misc/StampController.java\n--- a/stirling-pdf/src/main/java/stirling/software/SPDF/controller/api/misc/StampController.java\n+++ b/stirling-pdf/src/main/java/stirling/software/SPDF/controller/api/misc/StampController.java\n@@ -181,6 +181,9 @@ private void addTextStamp(\n             case \"chinese\":\n                 resourceDir = \"static/fonts/SimSun.ttf\";\n                 break;\n+            case \"thai\":\n+                resourceDir = \"static/fonts/NotoSansThai-Regular.ttf\";\n+                break;\n             case \"roman\":\n             default:\n                 resourceDir = \"static/fonts/NotoSans-Regular.ttf\";",
    "output": "feat: add Thai language option for stamp feature (#3825)\n\n# Description of Changes\n\n\nThis pull request adds support for Thai language text stamps in the\n`StampController` and updates the corresponding HTML template to include\nThai as an option in the language selection dropdown.\n\n### Thai language support:\n\n*\n[`stirling-pdf/src/main/java/stirling/software/SPDF/controller/api/misc/StampController.java`](diffhunk://#diff-1fc63d07188744082edc3780d43868119bf9876868c8c8db6ce324b57c60284eR184-R186):\nAdded a case for \"thai\" in the `addTextStamp` method, specifying the\nfont file `NotoSansThai-Regular.ttf` for Thai language support.\n*\n[`stirling-pdf/src/main/resources/templates/misc/stamp.html`](diffhunk://#diff-29cf511e86ebd2b1d4f378e4f0bd301aa5e024e6dc66f93672206c2b1ffa526cR91):\nAdded a new `<option>` for Thai language (\"ไทย\") in the dropdown menu\nfor language selection.\n\n\n### Preview:\n\n\n![image](https://github.com/user-attachments/assets/ef6d20e9-2df8-4970-bd4e-d4ee0780e8d1)\n\n\n\n[dummy_stamped.pdf](https://github.com/user-attachments/files/20910418/dummy_stamped.pdf)\n\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [x] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [x] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java b/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java\n--- a/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java\n+++ b/common/src/test/java/stirling/software/common/util/EmlToPdfTest.java\n@@ -503,6 +503,8 @@ class PdfConversionTests {\n \n         @Mock private PDDocument mockPdDocument;\n \n+        @Mock private TempFileManager mockTempFileManager;\n+\n         @Test\n         @DisplayName(\"Should convert EML to PDF without attachments when not requested\")\n         void convertEmlToPdfWithoutAttachments() throws Exception {\n@@ -530,7 +532,8 @@ void convertEmlToPdfWithoutAttachments() throws Exception {\n                                 any(),\n                                 any(byte[].class),\n                                 anyString(),\n-                                anyBoolean()))\n+                                anyBoolean(),\n+                                any(TempFileManager.class)))\n                     .thenReturn(fakePdfBytes);\n \n                 byte[] resultPdf =\n@@ -540,7 +543,8 @@ void convertEmlToPdfWithoutAttachments() throws Exception {\n                         emlBytes,\n                         \"test.eml\",\n                         false,\n-                        mockPdfDocumentFactory);\n+                        mockPdfDocumentFactory,\n+                        mockTempFileManager);\n \n                 assertArrayEquals(fakePdfBytes, resultPdf);\n \n@@ -556,7 +560,8 @@ void convertEmlToPdfWithoutAttachments() throws Exception {\n                             any(),\n                             any(byte[].class),\n                             anyString(),\n-                            anyBoolean()));\n+                            anyBoolean(),\n+                            any(TempFileManager.class)));\n                 verify(mockPdfDocumentFactory).load(resultPdf);\n             }\n         }\n@@ -595,7 +600,8 @@ void convertEmlToPdfWithAttachments() throws Exception {\n                                 any(),\n                                 any(byte[].class),\n                                 anyString(),\n-                                anyBoolean()))\n+                                anyBoolean(),\n+                                any(TempFileManager.class)))\n                     .thenReturn(fakePdfBytes);\n \n                 try (MockedStatic<EmlToPdf> ignored =\n@@ -616,7 +622,8 @@ void convertEmlToPdfWithAttachments() throws Exception {\n                             emlBytes,\n                             \"test.eml\",\n                             false,\n-                            mockPdfDocumentFactory);\n+                            mockPdfDocumentFactory,\n+                            mockTempFileManager);\n \n                     assertArrayEquals(fakePdfBytes, resultPdf);\n \n@@ -632,7 +639,8 @@ void convertEmlToPdfWithAttachments() throws Exception {\n                                 any(),\n                                 any(byte[].class),\n                                 anyString(),\n-                                anyBoolean()));\n+                                anyBoolean(),\n+                                any(TempFileManager.class)));\n \n                     verify(mockPdfDocumentFactory).load(resultPdf);\n                 }\n@@ -657,7 +665,8 @@ void handleErrorsDuringConversion() {\n                                 any(),\n                                 any(byte[].class),\n                                 anyString(),\n-                                anyBoolean()))\n+                                anyBoolean(),\n+                                any(TempFileManager.class)))\n                     .thenThrow(new IOException(errorMessage));\n \n                 IOException exception = assertThrows(\n@@ -668,7 +677,8 @@ void handleErrorsDuringConversion() {\n                         emlBytes,\n                         \"test.eml\",\n                         false,\n-                        mockPdfDocumentFactory));\n+                        mockPdfDocumentFactory,\n+                        mockTempFileManager));\n \n                 assertTrue(exception.getMessage().contains(errorMessage));\n             }",
    "output": "Added mockTempFileManager to tests in EML-to-PDF mockito to resolve errors (#3826)\n\n# Description of Changes\n\nResolving conflict that comes from conflicts between #3797 and #3806\n\n#3797 modified the code:\n- The convertEmlToPdf and convertHtmlToPdf methods now require a\nTempFileManager tempFileManager argument.\n- All code (including tests) that calls these methods must now provide a\nvalid TempFileManager instance.\n\nAfter that however, #3806 did not account for these changes,\nspecifically the changes to the required arguments.\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [x] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/stirling-pdf/src/main/java/stirling/software/SPDF/controller/api/security/WatermarkController.java b/stirling-pdf/src/main/java/stirling/software/SPDF/controller/api/security/WatermarkController.java\n--- a/stirling-pdf/src/main/java/stirling/software/SPDF/controller/api/security/WatermarkController.java\n+++ b/stirling-pdf/src/main/java/stirling/software/SPDF/controller/api/security/WatermarkController.java\n@@ -170,6 +170,9 @@ private void addTextWatermark(\n             case \"chinese\":\n                 resourceDir = \"static/fonts/SimSun.ttf\";\n                 break;\n+            case \"thai\":\n+                resourceDir = \"static/fonts/NotoSansThai-Regular.ttf\";\n+                break;\n             case \"roman\":\n             default:\n                 resourceDir = \"static/fonts/NotoSans-Regular.ttf\";",
    "output": "feat: add Thai language support and corresponding font for watermarking (#3819)\n\n# Description of Changes\nThis pull request adds support for Thai language in the watermark\nfunctionality.\n### Backend updates:\n\n*\n[`stirling-pdf/src/main/java/stirling/software/SPDF/controller/api/security/WatermarkController.java`](diffhunk://#diff-73e8448c42af57bb0549146473b5e7edc063533694813dfda7214e51005a90daR173-R175):\nAdded a new case for \"thai\" in the `addTextWatermark` method to use the\n`NotoSansThai-Regular.ttf` font for Thai text.\n\n### Frontend updates:\n\n*\n[`stirling-pdf/src/main/resources/templates/security/add-watermark.html`](diffhunk://#diff-dc75a6b50ba2a29c6cb17f0cfa65e4ffac88102d5834ea40fc9d9b3b4d00f8f3R41):\nAdded a new option for Thai language (`ไทย`) in the language dropdown\nmenu for watermark customization.\n\n\n![image](https://github.com/user-attachments/assets/9ad3bf7f-bcc6-4f10-818e-d3e7467ab6c0)\n\n### Sample PDF:\n\n\n![image](https://github.com/user-attachments/assets/d8b569e3-9dcb-42b3-9699-67ffa8043bd3)\n\n\n[dummy_watermarked.pdf](https://github.com/user-attachments/files/20903700/dummy_watermarked.pdf)\n\n\nCloses #3810\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [x] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [x] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/proprietary/src/main/java/stirling/software/proprietary/config/HttpRequestAuditPublisher.java b/proprietary/src/main/java/stirling/software/proprietary/config/HttpRequestAuditPublisher.java\n--- a/proprietary/src/main/java/stirling/software/proprietary/config/HttpRequestAuditPublisher.java\n+++ b/proprietary/src/main/java/stirling/software/proprietary/config/HttpRequestAuditPublisher.java\n@@ -1 +0,0 @@\n-",
    "output": "🤖 format everything with pre-commit by stirlingbot (#3786)\n\nAuto-generated by [create-pull-request][1] with **stirlingbot**\n\n[1]: https://github.com/peter-evans/create-pull-request\n\nSigned-off-by: stirlingbot[bot] <stirlingbot[bot]@users.noreply.github.com>\nCo-authored-by: stirlingbot[bot] <195170888+stirlingbot[bot]@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/common/src/main/java/stirling/software/common/util/GeneralUtils.java b/common/src/main/java/stirling/software/common/util/GeneralUtils.java\n--- a/common/src/main/java/stirling/software/common/util/GeneralUtils.java\n+++ b/common/src/main/java/stirling/software/common/util/GeneralUtils.java\n@@ -13,6 +13,7 @@\n import java.util.Arrays;\n import java.util.Enumeration;\n import java.util.List;\n+import java.util.Locale;\n import java.util.UUID;\n \n import org.springframework.core.io.Resource;\n@@ -199,11 +200,11 @@ public static String formatBytes(long bytes) {\n         if (bytes < 1024) {\n             return bytes + \" B\";\n         } else if (bytes < 1024 * 1024) {\n-            return String.format(\"%.2f KB\", bytes / 1024.0);\n+            return String.format(Locale.US, \"%.2f KB\", bytes / 1024.0);\n         } else if (bytes < 1024 * 1024 * 1024) {\n-            return String.format(\"%.2f MB\", bytes / (1024.0 * 1024.0));\n+            return String.format(Locale.US, \"%.2f MB\", bytes / (1024.0 * 1024.0));\n         } else {\n-            return String.format(\"%.2f GB\", bytes / (1024.0 * 1024.0 * 1024.0));\n+            return String.format(Locale.US, \"%.2f GB\", bytes / (1024.0 * 1024.0 * 1024.0));\n         }\n     }\n ",
    "output": "fix: ensure locale-safe formatting in GeneralUtils.formatBytes (#3762)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\n- Updated `GeneralUtils.formatBytes(long bytes)` to use `Locale.US` for\nconsistent number formatting across environments.\n- This resolves test failures caused by locale-specific formatting\n(e.g., comma vs. dot as decimal separator) that led to assertion\nmismatches during unit tests.\n\nsee: https://github.com/Stirling-Tools/Stirling-PDF/pull/3562\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [x] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/proprietary/src/main/java/stirling/software/proprietary/security/config/AccountWebController.java b/proprietary/src/main/java/stirling/software/proprietary/security/config/AccountWebController.java\n--- a/proprietary/src/main/java/stirling/software/proprietary/security/config/AccountWebController.java\n+++ b/proprietary/src/main/java/stirling/software/proprietary/security/config/AccountWebController.java\n@@ -331,6 +331,9 @@ public String showAddUserForm(\n                         case \"userNotFound\" -> \"userNotFoundMessage\";\n                         case \"downgradeCurrentUser\" -> \"downgradeCurrentUserMessage\";\n                         case \"disabledCurrentUser\" -> \"disabledCurrentUserMessage\";\n+                        case \"cannotMoveInternalUsers\" -> \"team.cannotMoveInternalUsers\";\n+                        case \"internalTeamNotAccessible\" -> \"team.internalTeamNotAccessible\";\n+                        case \"invalidRole\" -> \"invalidRoleMessage\";\n                         default -> messageType;\n                     };\n             model.addAttribute(\"changeMessage\", changeMessage);\n\ndiff --git a/proprietary/src/main/java/stirling/software/proprietary/security/controller/api/TeamController.java b/proprietary/src/main/java/stirling/software/proprietary/security/controller/api/TeamController.java\n--- a/proprietary/src/main/java/stirling/software/proprietary/security/controller/api/TeamController.java\n+++ b/proprietary/src/main/java/stirling/software/proprietary/security/controller/api/TeamController.java\n@@ -31,12 +31,12 @@ public class TeamController {\n     @PostMapping(\"/create\")\n     public RedirectView createTeam(@RequestParam(\"name\") String name) {\n         if (teamRepository.existsByNameIgnoreCase(name)) {\n-            return new RedirectView(\"/adminSettings?messageType=teamExists\");\n+            return new RedirectView(\"/teams?messageType=teamExists\");\n         }\n         Team team = new Team();\n         team.setName(name);\n         teamRepository.save(team);\n-        return new RedirectView(\"/adminSettings?messageType=teamCreated\");\n+        return new RedirectView(\"/teams?messageType=teamCreated\");\n     }\n \n     @PreAuthorize(\"hasRole('ROLE_ADMIN')\")\n@@ -45,21 +45,21 @@ public RedirectView renameTeam(\n             @RequestParam(\"teamId\") Long teamId, @RequestParam(\"newName\") String newName) {\n         Optional<Team> existing = teamRepository.findById(teamId);\n         if (existing.isEmpty()) {\n-            return new RedirectView(\"/adminSettings?messageType=teamNotFound\");\n+            return new RedirectView(\"/teams?messageType=teamNotFound\");\n         }\n         if (teamRepository.existsByNameIgnoreCase(newName)) {\n-            return new RedirectView(\"/adminSettings?messageType=teamNameExists\");\n+            return new RedirectView(\"/teams?messageType=teamNameExists\");\n         }\n         Team team = existing.get();\n \n         // Prevent renaming the Internal team\n         if (team.getName().equals(TeamService.INTERNAL_TEAM_NAME)) {\n-            return new RedirectView(\"/adminSettings?messageType=internalTeamNotAccessible\");\n+            return new RedirectView(\"/teams?messageType=internalTeamNotAccessible\");\n         }\n \n         team.setName(newName);\n         teamRepository.save(team);\n-        return new RedirectView(\"/adminSettings?messageType=teamRenamed\");\n+        return new RedirectView(\"/teams?messageType=teamRenamed\");\n     }\n \n     @PreAuthorize(\"hasRole('ROLE_ADMIN')\")\n@@ -68,23 +68,23 @@ public RedirectView renameTeam(\n     public RedirectView deleteTeam(@RequestParam(\"teamId\") Long teamId) {\n         Optional<Team> teamOpt = teamRepository.findById(teamId);\n         if (teamOpt.isEmpty()) {\n-            return new RedirectView(\"/adminSettings?messageType=teamNotFound\");\n+            return new RedirectView(\"/teams?messageType=teamNotFound\");\n         }\n \n         Team team = teamOpt.get();\n \n         // Prevent deleting the Internal team\n         if (team.getName().equals(TeamService.INTERNAL_TEAM_NAME)) {\n-            return new RedirectView(\"/adminSettings?messageType=internalTeamNotAccessible\");\n+            return new RedirectView(\"/teams?messageType=internalTeamNotAccessible\");\n         }\n \n         long memberCount = userRepository.countByTeam(team);\n         if (memberCount > 0) {\n-            return new RedirectView(\"/adminSettings?messageType=teamHasUsers\");\n+            return new RedirectView(\"/teams?messageType=teamHasUsers\");\n         }\n \n         teamRepository.delete(team);\n-        return new RedirectView(\"/adminSettings?messageType=teamDeleted\");\n+        return new RedirectView(\"/teams?messageType=teamDeleted\");\n     }\n \n     @PreAuthorize(\"hasRole('ROLE_ADMIN')\")\n\ndiff --git a/proprietary/src/main/java/stirling/software/proprietary/security/controller/web/TeamWebController.java b/proprietary/src/main/java/stirling/software/proprietary/security/controller/web/TeamWebController.java\n--- a/proprietary/src/main/java/stirling/software/proprietary/security/controller/web/TeamWebController.java\n+++ b/proprietary/src/main/java/stirling/software/proprietary/security/controller/web/TeamWebController.java\n@@ -1,5 +1,6 @@\n package stirling.software.proprietary.security.controller.web;\n \n+import jakarta.servlet.http.HttpServletRequest;\n import java.util.Date;\n import java.util.HashMap;\n import java.util.List;\n@@ -32,7 +33,7 @@ public class TeamWebController {\n \n     @GetMapping\n     @PreAuthorize(\"hasRole('ROLE_ADMIN')\")\n-    public String listTeams(Model model) {\n+    public String listTeams(HttpServletRequest request, Model model) {\n         // Get teams with user counts using a DTO projection\n         List<TeamWithUserCountDTO> allTeamsWithCounts = teamRepository.findAllTeamsWithUserCount();\n \n@@ -53,6 +54,27 @@ public String listTeams(Model model) {\n             teamLastRequest.put(teamId, lastActivity);\n         }\n \n+        String messageType = request.getParameter(\"messageType\");\n+        if (messageType != null) {\n+            if (\"teamCreated\".equals(messageType)) {\n+                model.addAttribute(\"addMessage\", \"teamCreated\");\n+            } else if (\"teamExists\".equals(messageType)) {\n+                model.addAttribute(\"errorMessage\", \"teamExists\");\n+            } else if (\"teamNotFound\".equals(messageType)) {\n+                model.addAttribute(\"errorMessage\", \"teamNotFound\");\n+            } else if (\"teamNameExists\".equals(messageType)) {\n+                model.addAttribute(\"errorMessage\", \"teamNameExists\");\n+            } else if (\"internalTeamNotAccessible\".equals(messageType)) {\n+                model.addAttribute(\"errorMessage\", \"team.internalTeamNotAccessible\");\n+            } else if (\"teamRenamed\".equals(messageType)) {\n+                model.addAttribute(\"changeMessage\", \"teamRenamed\");\n+            } else if (\"teamHasUsers\".equals(messageType)) {\n+                model.addAttribute(\"errorMessage\", \"teamHasUsers\");\n+            } else if (\"teamDeleted\".equals(messageType)) {\n+                model.addAttribute(\"deleteMessage\", \"teamDeleted\");\n+            }\n+        }\n+\n         // Add data to the model\n         model.addAttribute(\"teamsWithCounts\", teamsWithCounts);\n         model.addAttribute(\"teamLastRequest\", teamLastRequest);\n@@ -62,7 +84,8 @@ public String listTeams(Model model) {\n \n     @GetMapping(\"/{id}\")\n     @PreAuthorize(\"hasRole('ROLE_ADMIN')\")\n-    public String viewTeamDetails(@PathVariable(\"id\") Long id, Model model) {\n+    public String viewTeamDetails(\n+            HttpServletRequest request, @PathVariable(\"id\") Long id, Model model) {\n         // Get the team\n         Team team =\n                 teamRepository\n@@ -105,6 +128,13 @@ public String viewTeamDetails(@PathVariable(\"id\") Long id, Model model) {\n             userLastRequest.put(username, lastRequest);\n         }\n \n+        String errorMessage = request.getParameter(\"error\");\n+        if (errorMessage != null) {\n+            if (\"cannotMoveInternalUsers\".equals(errorMessage)) {\n+                model.addAttribute(\"errorMessage\", \"team.cannotMoveInternalUsers\");\n+            }\n+        }\n+\n         model.addAttribute(\"team\", team);\n         model.addAttribute(\"teamUsers\", teamUsers);\n         model.addAttribute(\"availableUsers\", availableUsers);",
    "output": "feat: Improve team management UX with message-based feedback and internal team protection (#3719)\n\n# Description of Changes\n\n- Refactored team management logic to unify and streamline feedback via\n`messageType` query parameters.\n- Added backend checks to prevent renaming, deleting, or reassigning\nusers to/from the protected Internal team.\n- Updated Thymeleaf templates (`teams.html`, `team-details.html`,\n`adminSettings.html`) to support user-visible success and error messages\nbased on controller redirects.\n- Ensured `team.cannotMoveInternalUsers`,\n`team.internalTeamNotAccessible`, and `invalidRoleMessage` are properly\ninternationalized.\n- Replaced hardcoded `/adminSettings` redirects with `/teams` for more\nconsistent UX.\n\n**Why**: \nTo provide admins with immediate, meaningful feedback during team\noperations and to enforce data integrity around protected teams like\n\"Internal\".\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [x] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details.\n\n---------\n\nCo-authored-by: Copilot <175728472+Copilot@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/proprietary/src/main/java/stirling/software/proprietary/security/InitialSecuritySetup.java b/proprietary/src/main/java/stirling/software/proprietary/security/InitialSecuritySetup.java\n--- a/proprietary/src/main/java/stirling/software/proprietary/security/InitialSecuritySetup.java\n+++ b/proprietary/src/main/java/stirling/software/proprietary/security/InitialSecuritySetup.java\n@@ -2,6 +2,7 @@\n \n import java.sql.SQLException;\n import java.util.List;\n+import java.util.Optional;\n import java.util.UUID;\n \n import org.springframework.stereotype.Component;\n@@ -53,10 +54,15 @@ public void init() {\n \n     private void assignUsersToDefaultTeamIfMissing() {\n         Team defaultTeam = teamService.getOrCreateDefaultTeam();\n+        Team internalTeam = teamService.getOrCreateInternalTeam();\n         List<User> usersWithoutTeam = userService.getUsersWithoutTeam();\n \n         for (User user : usersWithoutTeam) {\n-            user.setTeam(defaultTeam);\n+            if (user.getUsername().equalsIgnoreCase(Role.INTERNAL_API_USER.getRoleId())) {\n+                user.setTeam(internalTeam);\n+            } else {\n+                user.setTeam(defaultTeam);\n+            }\n         }\n \n         userService.saveAll(usersWithoutTeam); // batch save\n@@ -108,6 +114,20 @@ private void initializeInternalApiUser()\n                     false);\n             userService.addApiKeyToUser(Role.INTERNAL_API_USER.getRoleId());\n             log.info(\"Internal API user created: {}\", Role.INTERNAL_API_USER.getRoleId());\n+        } else {\n+            Optional<User> internalApiUserOpt =\n+                    userService.findByUsernameIgnoreCase(Role.INTERNAL_API_USER.getRoleId());\n+            if (internalApiUserOpt.isPresent()) {\n+                User internalApiUser = internalApiUserOpt.get();\n+                // move to team internal API user\n+                if (!internalApiUser.getTeam().getName().equals(TeamService.INTERNAL_TEAM_NAME)) {\n+                    log.info(\n+                            \"Moving internal API user to team: {}\", TeamService.INTERNAL_TEAM_NAME);\n+                    Team internalTeam = teamService.getOrCreateInternalTeam();\n+\n+                    userService.changeUserTeam(internalApiUser, internalTeam);\n+                }\n+            }\n         }\n         userService.syncCustomApiUser(applicationProperties.getSecurity().getCustomGlobalAPIKey());\n     }\n\ndiff --git a/proprietary/src/main/java/stirling/software/proprietary/security/model/User.java b/proprietary/src/main/java/stirling/software/proprietary/security/model/User.java\n--- a/proprietary/src/main/java/stirling/software/proprietary/security/model/User.java\n+++ b/proprietary/src/main/java/stirling/software/proprietary/security/model/User.java\n@@ -58,7 +58,7 @@ public class User implements Serializable {\n     @OneToMany(fetch = FetchType.EAGER, cascade = CascadeType.ALL, mappedBy = \"user\")\n     private Set<Authority> authorities = new HashSet<>();\n \n-    @ManyToOne(fetch = FetchType.LAZY)\n+    @ManyToOne(fetch = FetchType.EAGER)\n     @JoinColumn(name = \"team_id\")\n     private Team team;\n \n\ndiff --git a/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java b/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java\n--- a/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java\n+++ b/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java\n@@ -371,6 +371,16 @@ public void changeUserEnabled(User user, Boolean enbeled)\n         databaseService.exportDatabase();\n     }\n \n+    public void changeUserTeam(User user, Team team)\n+            throws SQLException, UnsupportedProviderException {\n+        if (team == null) {\n+            team = getDefaultTeam();\n+        }\n+        user.setTeam(team);\n+        userRepository.save(user);\n+        databaseService.exportDatabase();\n+    }\n+\n     public boolean isPasswordCorrect(User user, String currentPassword) {\n         return passwordEncoder.matches(currentPassword, user.getPassword());\n     }\n\ndiff --git a/stirling-pdf/src/test/java/stirling/software/SPDF/controller/api/MergeControllerTest.java b/stirling-pdf/src/test/java/stirling/software/SPDF/controller/api/MergeControllerTest.java\n--- a/stirling-pdf/src/test/java/stirling/software/SPDF/controller/api/MergeControllerTest.java\n+++ b/stirling-pdf/src/test/java/stirling/software/SPDF/controller/api/MergeControllerTest.java\n@@ -276,4 +276,4 @@ void testMergeDocuments_EmptyList_ReturnsEmptyDocument() throws IOException {\n         verify(mockMergedDocument, never()).addPage(any(PDPage.class));\n     }\n \n-}\n\\ No newline at end of file\n+}",
    "output": "Fix: Assign Internal API User to Internal Team and Eager-Load User’s Team Association (#3698)\n\n# Description of Changes\n\n- **What was changed**  \n- Added logic in `InitialSecuritySetup` to assign the\n`INTERNAL_API_USER` to a dedicated “internal” team both during initial\ncreation and on subsequent startups.\n- Enhanced `assignUsersToDefaultTeamIfMissing()` to route the internal\nAPI user to the `internalTeam`, while all other users go to the default\nteam.\n- Switched the JPA mapping of `User.team` from `LAZY` to `EAGER` fetch\nto ensure the team association is always loaded with the user.\n- Introduced a new `UserService.changeUserTeam(User, Team)` method to\nhandle moving an existing user to a different team and persist the\nchange.\n- Imported `java.util.Optional` to safely handle lookups of the internal\nAPI user.\n\n- **Why the change was made**  \n- To guarantee that the special internal API user is always part of the\n“internal” team and never left on the default team, preventing\npermission and routing issues.\n- Eagerly loading the `team` association avoids lazy-init exceptions in\ncontexts where the user’s team is needed immediately (e.g., security\nchecks).\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/proprietary/src/main/java/stirling/software/proprietary/security/configuration/MailConfig.java b/proprietary/src/main/java/stirling/software/proprietary/security/configuration/MailConfig.java\n--- a/proprietary/src/main/java/stirling/software/proprietary/security/configuration/MailConfig.java\n+++ b/proprietary/src/main/java/stirling/software/proprietary/security/configuration/MailConfig.java\n@@ -10,7 +10,6 @@\n \n import lombok.AllArgsConstructor;\n import lombok.extern.slf4j.Slf4j;\n-\n import stirling.software.common.model.ApplicationProperties;\n \n /**\n\ndiff --git a/proprietary/src/main/java/stirling/software/proprietary/security/model/User.java b/proprietary/src/main/java/stirling/software/proprietary/security/model/User.java\n--- a/proprietary/src/main/java/stirling/software/proprietary/security/model/User.java\n+++ b/proprietary/src/main/java/stirling/software/proprietary/security/model/User.java\n@@ -14,6 +14,7 @@\n import lombok.NoArgsConstructor;\n import lombok.Setter;\n import lombok.ToString;\n+import stirling.software.common.model.enumeration.Role;\n \n import stirling.software.common.model.enumeration.Role;\n \n\ndiff --git a/proprietary/src/main/java/stirling/software/proprietary/security/oauth2/CustomOAuth2AuthenticationFailureHandler.java b/proprietary/src/main/java/stirling/software/proprietary/security/oauth2/CustomOAuth2AuthenticationFailureHandler.java\n--- a/proprietary/src/main/java/stirling/software/proprietary/security/oauth2/CustomOAuth2AuthenticationFailureHandler.java\n+++ b/proprietary/src/main/java/stirling/software/proprietary/security/oauth2/CustomOAuth2AuthenticationFailureHandler.java\n@@ -1,7 +1,10 @@\n package stirling.software.proprietary.security.oauth2;\n \n+import jakarta.servlet.ServletException;\n+import jakarta.servlet.http.HttpServletRequest;\n+import jakarta.servlet.http.HttpServletResponse;\n import java.io.IOException;\n-\n+import lombok.extern.slf4j.Slf4j;\n import org.springframework.security.authentication.BadCredentialsException;\n import org.springframework.security.authentication.DisabledException;\n import org.springframework.security.authentication.LockedException;\n@@ -10,12 +13,6 @@\n import org.springframework.security.oauth2.core.OAuth2Error;\n import org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler;\n \n-import jakarta.servlet.ServletException;\n-import jakarta.servlet.http.HttpServletRequest;\n-import jakarta.servlet.http.HttpServletResponse;\n-\n-import lombok.extern.slf4j.Slf4j;\n-\n @Slf4j\n public class CustomOAuth2AuthenticationFailureHandler\n         extends SimpleUrlAuthenticationFailureHandler {\n\ndiff --git a/proprietary/src/main/java/stirling/software/proprietary/security/saml2/CertificateUtils.java b/proprietary/src/main/java/stirling/software/proprietary/security/saml2/CertificateUtils.java\n--- a/proprietary/src/main/java/stirling/software/proprietary/security/saml2/CertificateUtils.java\n+++ b/proprietary/src/main/java/stirling/software/proprietary/security/saml2/CertificateUtils.java\n@@ -6,7 +6,6 @@\n import java.security.cert.CertificateFactory;\n import java.security.cert.X509Certificate;\n import java.security.interfaces.RSAPrivateKey;\n-\n import org.bouncycastle.asn1.pkcs.PrivateKeyInfo;\n import org.bouncycastle.openssl.PEMKeyPair;\n import org.bouncycastle.openssl.PEMParser;\n\ndiff --git a/proprietary/src/main/java/stirling/software/proprietary/security/saml2/CustomSaml2AuthenticatedPrincipal.java b/proprietary/src/main/java/stirling/software/proprietary/security/saml2/CustomSaml2AuthenticatedPrincipal.java\n--- a/proprietary/src/main/java/stirling/software/proprietary/security/saml2/CustomSaml2AuthenticatedPrincipal.java\n+++ b/proprietary/src/main/java/stirling/software/proprietary/security/saml2/CustomSaml2AuthenticatedPrincipal.java\n@@ -3,7 +3,6 @@\n import java.io.Serializable;\n import java.util.List;\n import java.util.Map;\n-\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticatedPrincipal;\n \n\ndiff --git a/proprietary/src/main/java/stirling/software/proprietary/security/saml2/CustomSaml2AuthenticationFailureHandler.java b/proprietary/src/main/java/stirling/software/proprietary/security/saml2/CustomSaml2AuthenticationFailureHandler.java\n--- a/proprietary/src/main/java/stirling/software/proprietary/security/saml2/CustomSaml2AuthenticationFailureHandler.java\n+++ b/proprietary/src/main/java/stirling/software/proprietary/security/saml2/CustomSaml2AuthenticationFailureHandler.java\n@@ -1,19 +1,16 @@\n package stirling.software.proprietary.security.saml2;\n \n+import jakarta.servlet.http.HttpServletRequest;\n+import jakarta.servlet.http.HttpServletResponse;\n import java.io.IOException;\n-\n+import lombok.extern.slf4j.Slf4j;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.security.authentication.ProviderNotFoundException;\n import org.springframework.security.core.AuthenticationException;\n import org.springframework.security.saml2.core.Saml2Error;\n import org.springframework.security.saml2.provider.service.authentication.Saml2AuthenticationException;\n import org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler;\n \n-import jakarta.servlet.http.HttpServletRequest;\n-import jakarta.servlet.http.HttpServletResponse;\n-\n-import lombok.extern.slf4j.Slf4j;\n-\n @Slf4j\n @ConditionalOnProperty(name = \"security.saml2.enabled\", havingValue = \"true\")\n public class CustomSaml2AuthenticationFailureHandler extends SimpleUrlAuthenticationFailureHandler {\n\ndiff --git a/proprietary/src/main/java/stirling/software/proprietary/security/saml2/SAML2Configuration.java b/proprietary/src/main/java/stirling/software/proprietary/security/saml2/SAML2Configuration.java\n--- a/proprietary/src/main/java/stirling/software/proprietary/security/saml2/SAML2Configuration.java\n+++ b/proprietary/src/main/java/stirling/software/proprietary/security/saml2/SAML2Configuration.java\n@@ -1,9 +1,11 @@\n package stirling.software.proprietary.security.saml2;\n \n+import jakarta.servlet.http.HttpServletRequest;\n import java.security.cert.X509Certificate;\n import java.util.Collections;\n import java.util.UUID;\n-\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n import org.opensaml.saml.saml2.core.AuthnRequest;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnBooleanProperty;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n@@ -19,12 +21,6 @@\n import org.springframework.security.saml2.provider.service.registration.Saml2MessageBinding;\n import org.springframework.security.saml2.provider.service.web.HttpSessionSaml2AuthenticationRequestRepository;\n import org.springframework.security.saml2.provider.service.web.authentication.OpenSaml4AuthenticationRequestResolver;\n-\n-import jakarta.servlet.http.HttpServletRequest;\n-\n-import lombok.RequiredArgsConstructor;\n-import lombok.extern.slf4j.Slf4j;\n-\n import stirling.software.common.model.ApplicationProperties;\n import stirling.software.common.model.ApplicationProperties.Security.SAML2;\n \n\ndiff --git a/proprietary/src/main/java/stirling/software/proprietary/security/session/SessionRegistryConfig.java b/proprietary/src/main/java/stirling/software/proprietary/security/session/SessionRegistryConfig.java\n--- a/proprietary/src/main/java/stirling/software/proprietary/security/session/SessionRegistryConfig.java\n+++ b/proprietary/src/main/java/stirling/software/proprietary/security/session/SessionRegistryConfig.java\n@@ -3,6 +3,7 @@\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.security.core.session.SessionRegistryImpl;\n+import stirling.software.proprietary.security.database.repository.SessionRepository;\n \n import stirling.software.proprietary.security.database.repository.SessionRepository;\n \n@@ -15,8 +16,7 @@ public SessionRegistryImpl sessionRegistry() {\n     }\n \n     @Bean\n-    public SessionPersistentRegistry sessionPersistentRegistry(\n-            SessionRepository sessionRepository) {\n+    public SessionPersistentRegistry sessionPersistentRegistry(SessionRepository sessionRepository) {\n         return new SessionPersistentRegistry(sessionRepository);\n     }\n }\n\ndiff --git a/proprietary/src/main/java/stirling/software/proprietary/security/session/SessionScheduled.java b/proprietary/src/main/java/stirling/software/proprietary/security/session/SessionScheduled.java\n--- a/proprietary/src/main/java/stirling/software/proprietary/security/session/SessionScheduled.java\n+++ b/proprietary/src/main/java/stirling/software/proprietary/security/session/SessionScheduled.java\n@@ -4,13 +4,11 @@\n import java.time.temporal.ChronoUnit;\n import java.util.Date;\n import java.util.List;\n-\n+import lombok.RequiredArgsConstructor;\n import org.springframework.scheduling.annotation.Scheduled;\n import org.springframework.security.core.session.SessionInformation;\n import org.springframework.stereotype.Component;\n \n-import lombok.RequiredArgsConstructor;\n-\n @Component\n @RequiredArgsConstructor\n public class SessionScheduled {",
    "output": "moving security package and relevant files over to proprietary"
  },
  {
    "input": "diff --git a/common/src/main/java/stirling/software/common/configuration/AppConfig.java b/common/src/main/java/stirling/software/common/configuration/AppConfig.java\n--- a/common/src/main/java/stirling/software/common/configuration/AppConfig.java\n+++ b/common/src/main/java/stirling/software/common/configuration/AppConfig.java\n@@ -10,6 +10,7 @@\n import java.util.function.Predicate;\n \n import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.context.annotation.Bean;\n@@ -146,8 +147,16 @@ public boolean isRunningInDockerWithConfig() {\n         }\n     }\n \n-    @ConditionalOnMissingClass(\"stirling.software.SPDF.config.security.SecurityConfiguration\")\n     @Bean(name = \"activeSecurity\")\n+    @ConditionalOnClass(\n+            name = \"stirling.software.proprietary.security.configuration.SecurityConfiguration\")\n+    public boolean activeSecurity() {\n+        return true;\n+    }\n+\n+    @Bean(name = \"missingActiveSecurity\")\n+    @ConditionalOnMissingClass(\n+            \"stirling.software.proprietary.security.configuration.SecurityConfiguration\")\n     public boolean missingActiveSecurity() {\n         return false;\n     }",
    "output": "added back activeSecurity bean"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/EE/KeygenLicenseVerifier.java b/src/main/java/stirling/software/SPDF/EE/KeygenLicenseVerifier.java\n--- a/src/main/java/stirling/software/SPDF/EE/KeygenLicenseVerifier.java\n+++ b/src/main/java/stirling/software/SPDF/EE/KeygenLicenseVerifier.java\n@@ -520,7 +520,7 @@ private JsonNode validateLicense(\n \n         HttpResponse<String> response =\n                 httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n-        log.info(\"ValidateLicenseResponse body: {}\", response.body());\n+        log.debug(\"ValidateLicenseResponse body: {}\", response.body());\n         JsonNode jsonResponse = objectMapper.readTree(response.body());\n         if (response.statusCode() == 200) {\n             JsonNode metaNode = jsonResponse.path(\"meta\");\n@@ -529,9 +529,9 @@ private JsonNode validateLicense(\n             String detail = metaNode.path(\"detail\").asText();\n             String code = metaNode.path(\"code\").asText();\n \n-            log.info(\"License validity: \" + isValid);\n-            log.info(\"Validation detail: \" + detail);\n-            log.info(\"Validation code: \" + code);\n+            log.info(\"License validity: {}\", isValid);\n+            log.info(\"Validation detail: {}\", detail);\n+            log.info(\"Validation code: {}\", code);\n \n             // Check if the license itself has floating attribute\n             JsonNode licenseAttrs = jsonResponse.path(\"data\").path(\"attributes\");\n@@ -595,7 +595,7 @@ private JsonNode validateLicense(\n                             .path(\"isEnterprise\")\n                             .asBoolean(false);\n \n-            log.info(applicationProperties.toString());\n+            log.debug(applicationProperties.toString());\n \n         } else {\n             log.error(\"Error validating license. Status code: {}\", response.statusCode());",
    "output": "updating LICENSE-proprietary"
  },
  {
    "input": "diff --git a/proprietary/src/main/java/stirling/software/proprietary/security/oauth2/OAuth2Configuration.java b/proprietary/src/main/java/stirling/software/proprietary/security/oauth2/OAuth2Configuration.java\n--- a/proprietary/src/main/java/stirling/software/proprietary/security/oauth2/OAuth2Configuration.java\n+++ b/proprietary/src/main/java/stirling/software/proprietary/security/oauth2/OAuth2Configuration.java\n@@ -6,6 +6,7 @@\n import java.util.Optional;\n import java.util.Set;\n import lombok.extern.slf4j.Slf4j;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBooleanProperty;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.context.annotation.Bean;\n@@ -36,8 +37,7 @@\n \n @Slf4j\n @Configuration\n-@ConditionalOnProperty(value = \"security.oauth2.enabled\", havingValue = \"true\")\n-@ConditionalOnExpression(\"${docker.enable.security:true}\") // todo: change this\n+@ConditionalOnBooleanProperty(\"security.oauth2.enabled\")\n public class OAuth2Configuration {\n \n     public static final String REDIRECT_URI_PATH = \"{baseUrl}/login/oauth2/code/\";\n@@ -52,7 +52,6 @@ public OAuth2Configuration(\n     }\n \n     @Bean\n-    @ConditionalOnProperty(value = \"security.oauth2.enabled\", havingValue = \"true\")\n     public ClientRegistrationRepository clientRegistrationRepository()\n             throws NoProviderFoundException {\n         List<ClientRegistration> registrations = new ArrayList<>();\n\ndiff --git a/proprietary/src/main/java/stirling/software/proprietary/security/saml2/SAML2Configuration.java b/proprietary/src/main/java/stirling/software/proprietary/security/saml2/SAML2Configuration.java\n--- a/proprietary/src/main/java/stirling/software/proprietary/security/saml2/SAML2Configuration.java\n+++ b/proprietary/src/main/java/stirling/software/proprietary/security/saml2/SAML2Configuration.java\n@@ -7,6 +7,7 @@\n import lombok.RequiredArgsConstructor;\n import lombok.extern.slf4j.Slf4j;\n import org.opensaml.saml.saml2.core.AuthnRequest;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBooleanProperty;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n@@ -25,8 +26,8 @@\n \n @Configuration\n @Slf4j\n-@ConditionalOnProperty(value = \"security.saml2.enabled\", havingValue = \"true\")\n @RequiredArgsConstructor\n+@ConditionalOnBooleanProperty(\"security.saml2.enabled\")\n public class SAML2Configuration {\n \n     private final ApplicationProperties applicationProperties;",
    "output": "DOCKER_ENABLE_SECURITY > ADDITIONAL_FEATURES_OFF"
  },
  {
    "input": "diff --git a/proprietary/src/main/java/stirling/software/proprietary/security/configuration/DatabaseConfig.java b/proprietary/src/main/java/stirling/software/proprietary/security/configuration/DatabaseConfig.java\n--- a/proprietary/src/main/java/stirling/software/proprietary/security/configuration/DatabaseConfig.java\n+++ b/proprietary/src/main/java/stirling/software/proprietary/security/configuration/DatabaseConfig.java\n@@ -4,6 +4,7 @@\n import lombok.Getter;\n import lombok.extern.slf4j.Slf4j;\n import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnBooleanProperty;\n import org.springframework.boot.autoconfigure.domain.EntityScan;\n import org.springframework.boot.jdbc.DataSourceBuilder;\n import org.springframework.boot.jdbc.DatabaseDriver;\n@@ -54,14 +55,25 @@ public DatabaseConfig(\n     public DataSource dataSource() throws UnsupportedProviderException {\n         DataSourceBuilder<?> dataSourceBuilder = DataSourceBuilder.create();\n \n-        if (!runningProOrHigher) {\n+        if (!runningProOrHigher || !datasource.isEnableCustomDatabase()) {\n             return useDefaultDataSource(dataSourceBuilder);\n         }\n \n-        if (!datasource.isEnableCustomDatabase()) {\n-            return useDefaultDataSource(dataSourceBuilder);\n-        }\n+        return useCustomDataSource(dataSourceBuilder);\n+    }\n+\n+    private DataSource useDefaultDataSource(DataSourceBuilder<?> dataSourceBuilder) {\n+        log.info(\"Using default H2 database\");\n \n+        dataSourceBuilder.url(DATASOURCE_DEFAULT_URL)\n+            .driverClassName(DatabaseDriver.H2.getDriverClassName())\n+            .username(DEFAULT_USERNAME);\n+\n+        return dataSourceBuilder.build();\n+    }\n+\n+    @ConditionalOnBooleanProperty(name = \"premium.enabled\")\n+    private DataSource useCustomDataSource(DataSourceBuilder<?> dataSourceBuilder) throws UnsupportedProviderException {\n         log.info(\"Using custom database configuration\");\n \n         if (!datasource.getCustomDatabaseUrl().isBlank()) {\n@@ -73,28 +85,18 @@ public DataSource dataSource() throws UnsupportedProviderException {\n         } else {\n             dataSourceBuilder.driverClassName(getDriverClassName(datasource.getType()));\n             dataSourceBuilder.url(\n-                    generateCustomDataSourceUrl(\n-                            datasource.getType(),\n-                            datasource.getHostName(),\n-                            datasource.getPort(),\n-                            datasource.getName()));\n+                generateCustomDataSourceUrl(\n+                    datasource.getType(),\n+                    datasource.getHostName(),\n+                    datasource.getPort(),\n+                    datasource.getName()));\n         }\n         dataSourceBuilder.username(datasource.getUsername());\n         dataSourceBuilder.password(datasource.getPassword());\n \n         return dataSourceBuilder.build();\n     }\n \n-    private DataSource useDefaultDataSource(DataSourceBuilder<?> dataSourceBuilder) {\n-        log.info(\"Using default H2 database\");\n-\n-        dataSourceBuilder.url(DATASOURCE_DEFAULT_URL)\n-            .driverClassName(DatabaseDriver.H2.getDriverClassName())\n-            .username(DEFAULT_USERNAME);\n-\n-        return dataSourceBuilder.build();\n-    }\n-\n     /**\n      * Generate the URL the <code>DataSource</code> will use to connect to the database\n      *\n\ndiff --git a/proprietary/src/main/java/stirling/software/proprietary/security/configuration/SecurityConfiguration.java b/proprietary/src/main/java/stirling/software/proprietary/security/configuration/SecurityConfiguration.java\n--- a/proprietary/src/main/java/stirling/software/proprietary/security/configuration/SecurityConfiguration.java\n+++ b/proprietary/src/main/java/stirling/software/proprietary/security/configuration/SecurityConfiguration.java\n@@ -6,7 +6,6 @@\n import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n-import org.springframework.context.annotation.DependsOn;\n import org.springframework.context.annotation.Lazy;\n import org.springframework.security.authentication.ProviderManager;\n import org.springframework.security.authentication.dao.DaoAuthenticationProvider;\n@@ -26,7 +25,7 @@\n import org.springframework.security.web.csrf.CookieCsrfTokenRepository;\n import org.springframework.security.web.csrf.CsrfTokenRequestAttributeHandler;\n import org.springframework.security.web.savedrequest.NullRequestCache;\n-import org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n+import org.springframework.security.web.servlet.util.matcher.PathPatternRequestMatcher;\n import stirling.software.common.configuration.AppConfig;\n import stirling.software.common.model.ApplicationProperties;\n import stirling.software.proprietary.security.CustomAuthenticationFailureHandler;\n@@ -53,7 +52,6 @@\n @Configuration\n @EnableWebSecurity\n @EnableMethodSecurity\n-@DependsOn(\"runningProOrHigher\")\n public class SecurityConfiguration {\n \n     private final CustomUserDetailsService userDetailsService;\n@@ -167,7 +165,7 @@ public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n             http.requestCache(requestCache -> requestCache.requestCache(new NullRequestCache()));\n             http.logout(\n                 logout ->\n-                    logout.logoutRequestMatcher(new AntPathRequestMatcher(\"/logout\"))\n+                    logout.logoutRequestMatcher(PathPatternRequestMatcher.withDefaults().matcher(\"/logout\"))\n                         .logoutSuccessHandler(\n                             new CustomLogoutSuccessHandler(applicationProperties, appConfig))\n                         .clearAuthentication(true)\n\ndiff --git a/src/main/java/stirling/software/SPDF/SPDFApplication.java b/src/main/java/stirling/software/SPDF/SPDFApplication.java\n--- a/src/main/java/stirling/software/SPDF/SPDFApplication.java\n+++ b/src/main/java/stirling/software/SPDF/SPDFApplication.java\n@@ -35,7 +35,11 @@\n @Slf4j\n @EnableScheduling\n @SpringBootApplication(\n-        scanBasePackages = {\"stirling.software.common\", \"stirling.software.SPDF\"},\n+        scanBasePackages = {\n+            \"stirling.software.common\",\n+            \"stirling.software.SPDF\",\n+            \"stirling.software.proprietary.security\"\n+        },\n         exclude = {\n             DataSourceAutoConfiguration.class,\n             DataSourceTransactionManagerAutoConfiguration.class",
    "output": "added proprietary module to base packages for scanning\n\nclean up"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/UserAuthenticationFilter.java b/src/main/java/stirling/software/SPDF/config/security/UserAuthenticationFilter.java\n--- a/src/main/java/stirling/software/SPDF/config/security/UserAuthenticationFilter.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/UserAuthenticationFilter.java\n@@ -5,6 +5,7 @@\n import java.util.Optional;\n \n import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.context.annotation.Lazy;\n import org.springframework.http.HttpStatus;\n import org.springframework.security.core.Authentication;\n@@ -34,6 +35,7 @@\n \n @Slf4j\n @Component\n+@ConditionalOnProperty(name = \"premium.enabled\", havingValue = \"true\")\n public class UserAuthenticationFilter extends OncePerRequestFilter {\n \n     private final ApplicationProperties.Security securityProp;\n\ndiff --git a/src/main/java/stirling/software/SPDF/config/security/UserService.java b/src/main/java/stirling/software/SPDF/config/security/UserService.java\n--- a/src/main/java/stirling/software/SPDF/config/security/UserService.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/UserService.java\n@@ -11,6 +11,7 @@\n import java.util.UUID;\n \n import org.springframework.context.MessageSource;\n+import org.springframework.context.annotation.Lazy;\n import org.springframework.context.i18n.LocaleContextHolder;\n import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n import org.springframework.security.core.Authentication;\n@@ -56,7 +57,7 @@ public class UserService implements UserServiceInterface {\n \n     private final SessionPersistentRegistry sessionRegistry;\n \n-    private final DatabaseInterface databaseService;\n+    @Lazy private final DatabaseInterface databaseService;\n \n     private final ApplicationProperties.Security.OAUTH2 oAuth2;\n \n\ndiff --git a/src/main/java/stirling/software/SPDF/config/security/database/DatabaseConfig.java b/src/main/java/stirling/software/SPDF/config/security/database/DatabaseConfig.java\n--- a/src/main/java/stirling/software/SPDF/config/security/database/DatabaseConfig.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/database/DatabaseConfig.java\n@@ -3,9 +3,11 @@\n import javax.sql.DataSource;\n \n import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.boot.jdbc.DataSourceBuilder;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Lazy;\n \n import lombok.Getter;\n import lombok.extern.slf4j.Slf4j;\n@@ -16,7 +18,9 @@\n \n @Slf4j\n @Getter\n+@Lazy\n @Configuration\n+@ConditionalOnProperty(name = \"premium.proFeatures.database\", havingValue = \"true\")\n public class DatabaseConfig {\n \n     public final String DATASOURCE_DEFAULT_URL;\n\ndiff --git a/src/main/java/stirling/software/SPDF/config/security/session/SessionRegistryConfig.java b/src/main/java/stirling/software/SPDF/config/security/session/SessionRegistryConfig.java\n--- a/src/main/java/stirling/software/SPDF/config/security/session/SessionRegistryConfig.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/session/SessionRegistryConfig.java\n@@ -1,10 +1,12 @@\n package stirling.software.SPDF.config.security.session;\n \n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.security.core.session.SessionRegistryImpl;\n \n @Configuration\n+@ConditionalOnProperty(name = \"premium.enabled\", havingValue = \"true\")\n public class SessionRegistryConfig {\n \n     @Bean\n\ndiff --git a/src/main/java/stirling/software/SPDF/config/security/session/SessionRepository.java b/src/main/java/stirling/software/SPDF/config/security/session/SessionRepository.java\n--- a/src/main/java/stirling/software/SPDF/config/security/session/SessionRepository.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/session/SessionRepository.java\n@@ -3,6 +3,7 @@\n import java.util.Date;\n import java.util.List;\n \n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.data.jpa.repository.JpaRepository;\n import org.springframework.data.jpa.repository.Modifying;\n import org.springframework.data.jpa.repository.Query;\n@@ -14,6 +15,7 @@\n import stirling.software.SPDF.model.SessionEntity;\n \n @Repository\n+@ConditionalOnProperty(name = \"premium.enabled\", havingValue = \"true\")\n public interface SessionRepository extends JpaRepository<SessionEntity, String> {\n     List<SessionEntity> findByPrincipalName(String principalName);\n ",
    "output": "wip - making db and sessions conditional"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/security/GetInfoOnPDF.java b/src/main/java/stirling/software/SPDF/controller/api/security/GetInfoOnPDF.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/security/GetInfoOnPDF.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/security/GetInfoOnPDF.java\n@@ -91,6 +91,59 @@ private static void addOutlinesToArray(PDOutlineItem outline, ArrayNode arrayNod\n         }\n     }\n \n+    /**\n+     * Generates structured summary data about the PDF highlighting its unique characteristics such\n+     * as encryption status, permission restrictions, and standards compliance.\n+     *\n+     * @param document The PDF document to analyze\n+     * @return An ObjectNode containing structured summary data\n+     */\n+    private ObjectNode generatePDFSummaryData(PDDocument document) {\n+        ObjectNode summaryData = objectMapper.createObjectNode();\n+\n+        // Check if encrypted\n+        if (document.isEncrypted()) {\n+            summaryData.put(\"encrypted\", true);\n+        }\n+\n+        // Check permissions\n+        AccessPermission ap = document.getCurrentAccessPermission();\n+        ArrayNode restrictedPermissions = objectMapper.createArrayNode();\n+\n+        if (!ap.canAssembleDocument()) restrictedPermissions.add(\"document assembly\");\n+        if (!ap.canExtractContent()) restrictedPermissions.add(\"content extraction\");\n+        if (!ap.canExtractForAccessibility()) restrictedPermissions.add(\"accessibility extraction\");\n+        if (!ap.canFillInForm()) restrictedPermissions.add(\"form filling\");\n+        if (!ap.canModify()) restrictedPermissions.add(\"modification\");\n+        if (!ap.canModifyAnnotations()) restrictedPermissions.add(\"annotation modification\");\n+        if (!ap.canPrint()) restrictedPermissions.add(\"printing\");\n+\n+        if (restrictedPermissions.size() > 0) {\n+            summaryData.set(\"restrictedPermissions\", restrictedPermissions);\n+            summaryData.put(\"restrictedPermissionsCount\", restrictedPermissions.size());\n+        }\n+\n+        // Check standard compliance\n+        if (checkForStandard(document, \"PDF/A\")) {\n+            summaryData.put(\"standardCompliance\", \"PDF/A\");\n+            summaryData.put(\"standardPurpose\", \"long-term archiving\");\n+        } else if (checkForStandard(document, \"PDF/X\")) {\n+            summaryData.put(\"standardCompliance\", \"PDF/X\");\n+            summaryData.put(\"standardPurpose\", \"graphic exchange\");\n+        } else if (checkForStandard(document, \"PDF/UA\")) {\n+            summaryData.put(\"standardCompliance\", \"PDF/UA\");\n+            summaryData.put(\"standardPurpose\", \"universal accessibility\");\n+        } else if (checkForStandard(document, \"PDF/E\")) {\n+            summaryData.put(\"standardCompliance\", \"PDF/E\");\n+            summaryData.put(\"standardPurpose\", \"engineering workflows\");\n+        } else if (checkForStandard(document, \"PDF/VT\")) {\n+            summaryData.put(\"standardCompliance\", \"PDF/VT\");\n+            summaryData.put(\"standardPurpose\", \"variable and transactional printing\");\n+        }\n+\n+        return summaryData;\n+    }\n+\n     public static boolean checkForStandard(PDDocument document, String standardKeyword) {\n         // Check XMP Metadata\n         try {\n@@ -191,6 +244,12 @@ public ResponseEntity<byte[]> getPdfInfo(@ModelAttribute PDFFile request) throws\n             }\n             jsonOutput.set(\"FormFields\", formFieldsNode);\n \n+            // Generate structured summary data about PDF characteristics\n+            ObjectNode summaryData = generatePDFSummaryData(pdfBoxDoc);\n+            if (summaryData != null && summaryData.size() > 0) {\n+                jsonOutput.set(\"SummaryData\", summaryData);\n+            }\n+\n             // embeed files TODO size\n             if (catalog.getNames() != null) {\n                 PDEmbeddedFilesNameTreeNode efTree = catalog.getNames().getEmbeddedFiles();",
    "output": "GetInfo summary #2388 (#3585)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\n- What was changed\n- Why the change was made\n- Any challenges encountered\n\nCloses #(issue_number)\n\n---\n\n## Checklist\n\n### General\n\n- [ ] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [ ] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [ ] I have performed a self-review of my own code\n- [ ] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details.\n\nCo-authored-by: a <a>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/SplitPdfByChaptersController.java b/src/main/java/stirling/software/SPDF/controller/api/SplitPdfByChaptersController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/SplitPdfByChaptersController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/SplitPdfByChaptersController.java\n@@ -131,15 +131,15 @@ public ResponseEntity<byte[]> splitPdf(@ModelAttribute SplitPdfByChaptersRequest\n             Integer bookmarkLevel =\n                     request.getBookmarkLevel(); // levels start from 0 (top most bookmarks)\n             if (bookmarkLevel < 0) {\n-                return ResponseEntity.badRequest().body(\"Invalid bookmark level\".getBytes());\n+                throw new IllegalArgumentException(\"Invalid bookmark level\");\n             }\n             sourceDocument = pdfDocumentFactory.load(file);\n \n             PDDocumentOutline outline = sourceDocument.getDocumentCatalog().getDocumentOutline();\n \n             if (outline == null) {\n                 log.warn(\"No outline found for {}\", file.getOriginalFilename());\n-                return ResponseEntity.badRequest().body(\"No outline found\".getBytes());\n+                throw new IllegalArgumentException(\"No outline found\");\n             }\n             List<Bookmark> bookmarks = new ArrayList<>();\n             try {",
    "output": "Fix error display for Split by Chapter (#3621)\n\n## Summary\n- throw `IllegalArgumentException` when bookmark level is invalid or\nwhen a PDF has no outline\n- rely on global error handling so frontend shows the message\n\n## Testing\n- `./gradlew build`\n\n\n------\nhttps://chatgpt.com/codex/tasks/task_b_683dc51dd31083288be3f9892889fa59"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/SecurityConfiguration.java b/src/main/java/stirling/software/SPDF/config/security/SecurityConfiguration.java\n--- a/src/main/java/stirling/software/SPDF/config/security/SecurityConfiguration.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/SecurityConfiguration.java\n@@ -26,7 +26,7 @@\n import org.springframework.security.web.csrf.CookieCsrfTokenRepository;\n import org.springframework.security.web.csrf.CsrfTokenRequestAttributeHandler;\n import org.springframework.security.web.savedrequest.NullRequestCache;\n-import org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n+import org.springframework.security.web.servlet.util.matcher.PathPatternRequestMatcher;\n \n import lombok.extern.slf4j.Slf4j;\n \n@@ -157,7 +157,9 @@ public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n             http.requestCache(requestCache -> requestCache.requestCache(new NullRequestCache()));\n             http.logout(\n                     logout ->\n-                            logout.logoutRequestMatcher(new AntPathRequestMatcher(\"/logout\"))\n+                            logout.logoutRequestMatcher(\n+                                            PathPatternRequestMatcher.withDefaults()\n+                                                    .matcher(\"/logout\"))\n                                     .logoutSuccessHandler(\n                                             new CustomLogoutSuccessHandler(applicationProperties))\n                                     .clearAuthentication(true)",
    "output": "Replace deprecated AntPathRequestMatcher with PathPatternRequestMatcher (#3606)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\n\nhttps://docs.spring.io/spring-security/reference/api/java/org/springframework/security/web/util/matcher/AntPathRequestMatcher.html\n\n---\n\n## Checklist\n\n### General\n\n- [ ] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [ ] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [ ] I have performed a self-review of my own code\n- [ ] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/common/src/test/java/stirling/software/common/util/CheckProgramInstallTest.java b/common/src/test/java/stirling/software/common/util/CheckProgramInstallTest.java\n--- a/common/src/test/java/stirling/software/common/util/CheckProgramInstallTest.java\n+++ b/common/src/test/java/stirling/software/common/util/CheckProgramInstallTest.java\n@@ -1,24 +1,26 @@\n package stirling.software.common.util;\n \n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.anyList;\n+import static org.mockito.Mockito.mockStatic;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n import java.io.IOException;\n import java.lang.reflect.Field;\n import java.util.Arrays;\n-import java.util.List;\n+\n import org.junit.jupiter.api.AfterEach;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.mockito.MockedStatic;\n import org.mockito.Mockito;\n+\n import stirling.software.common.util.ProcessExecutor.ProcessExecutorResult;\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertNull;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-import static org.mockito.ArgumentMatchers.any;\n-import static org.mockito.Mockito.mockStatic;\n-import static org.mockito.Mockito.times;\n-import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.when;\n \n class CheckProgramInstallTest {\n \n@@ -140,7 +142,7 @@ void testGetAvailablePythonCommand_WhenPythonReturnsNonZeroExitCode()\n     void testGetAvailablePythonCommand_WhenNoPythonIsAvailable()\n             throws IOException, InterruptedException {\n         // Arrange\n-        when(mockExecutor.runCommandWithOutputHandling(any(List.class)))\n+        when(mockExecutor.runCommandWithOutputHandling(anyList()))\n                 .thenThrow(new IOException(\"Command not found\"));\n \n         // Act\n@@ -168,7 +170,7 @@ void testGetAvailablePythonCommand_CachesResult() throws IOException, Interrupte\n         String firstCall = CheckProgramInstall.getAvailablePythonCommand();\n \n         // Change the mock to simulate a change in the environment\n-        when(mockExecutor.runCommandWithOutputHandling(any(List.class)))\n+        when(mockExecutor.runCommandWithOutputHandling(anyList()))\n                 .thenThrow(new IOException(\"Command not found\"));\n \n         String secondCall = CheckProgramInstall.getAvailablePythonCommand();\n\ndiff --git a/common/src/test/java/stirling/software/common/util/PDFToFileTest.java b/common/src/test/java/stirling/software/common/util/PDFToFileTest.java\n--- a/common/src/test/java/stirling/software/common/util/PDFToFileTest.java\n+++ b/common/src/test/java/stirling/software/common/util/PDFToFileTest.java\n@@ -4,6 +4,7 @@\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyList;\n import static org.mockito.ArgumentMatchers.argThat;\n import static org.mockito.Mockito.mockStatic;\n import static org.mockito.Mockito.when;\n@@ -132,7 +133,7 @@ void testProcessPdfToMarkdown_SingleOutputFile() throws IOException, Interrupted\n                     .when(() -> ProcessExecutor.getInstance(ProcessExecutor.Processes.PDFTOHTML))\n                     .thenReturn(mockProcessExecutor);\n \n-            when(mockProcessExecutor.runCommandWithOutputHandling(any(List.class), any(File.class)))\n+            when(mockProcessExecutor.runCommandWithOutputHandling(anyList(), any(File.class)))\n                     .thenAnswer(\n                             invocation -> {\n                                 // When command is executed, simulate creation of output files\n@@ -175,7 +176,7 @@ void testProcessPdfToMarkdown_MultipleOutputFiles() throws IOException, Interrup\n                     .when(() -> ProcessExecutor.getInstance(ProcessExecutor.Processes.PDFTOHTML))\n                     .thenReturn(mockProcessExecutor);\n \n-            when(mockProcessExecutor.runCommandWithOutputHandling(any(List.class), any(File.class)))\n+            when(mockProcessExecutor.runCommandWithOutputHandling(anyList(), any(File.class)))\n                     .thenAnswer(\n                             invocation -> {\n                                 // When command is executed, simulate creation of output files\n@@ -251,7 +252,7 @@ void testProcessPdfToHtml() throws IOException, InterruptedException {\n                     .when(() -> ProcessExecutor.getInstance(ProcessExecutor.Processes.PDFTOHTML))\n                     .thenReturn(mockProcessExecutor);\n \n-            when(mockProcessExecutor.runCommandWithOutputHandling(any(List.class), any(File.class)))\n+            when(mockProcessExecutor.runCommandWithOutputHandling(anyList(), any(File.class)))\n                     .thenAnswer(\n                             invocation -> {\n                                 // When command is executed, simulate creation of output files\n@@ -537,7 +538,7 @@ void testProcessPdfToOfficeFormat_NoFilename() throws IOException, InterruptedEx\n                     .when(() -> ProcessExecutor.getInstance(ProcessExecutor.Processes.LIBRE_OFFICE))\n                     .thenReturn(mockProcessExecutor);\n \n-            when(mockProcessExecutor.runCommandWithOutputHandling(any(List.class)))\n+            when(mockProcessExecutor.runCommandWithOutputHandling(anyList()))\n                     .thenAnswer(\n                             invocation -> {\n                                 // When command is executed, find the output directory argument",
    "output": "Replace `any()` with `anyList()` in Mockito tests for stronger type safety (#3583)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\n- **What was changed**  \n- Updated static imports in `CheckProgramInstallTest.java` and\n`PDFToFileTest.java` from `ArgumentMatchers.any` to\n`ArgumentMatchers.anyList`.\n- Changed all calls to `runCommandWithOutputHandling(any(List.class))`\nto `runCommandWithOutputHandling(anyList())`.\n- Removed unused `import java.util.List;` statements where no longer\nneeded.\n\n- **Why the change was made**  \n- `anyList()` provides stronger type safety than the raw `any()`,\navoiding unchecked warnings and making intent clearer when matching\n`List` arguments in Mockito.\n- Cleaning up unused imports keeps the test codebase tidy and free of\nclutter.\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/src/test/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessorTest.java b/src/test/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessorTest.java\n--- a/src/test/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessorTest.java\n+++ b/src/test/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessorTest.java\n@@ -73,4 +73,3 @@ public String getFilename() {\n         assertTrue(result.getOutputFiles().isEmpty(), \"Filtered file list should be empty\");\n     }\n }\n-",
    "output": "🤖 format everything with pre-commit by <stirlingbot> (#3588)\n\nAuto-generated by [create-pull-request][1] with **stirlingbot**\n\n[1]: https://github.com/peter-evans/create-pull-request\n\nSigned-off-by: stirlingbot[bot] <195170888+stirlingbot[bot]@users.noreply.github.com>\nCo-authored-by: stirlingbot[bot] <195170888+stirlingbot[bot]@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/web/UploadLimitService.java b/src/main/java/stirling/software/SPDF/controller/web/UploadLimitService.java\n--- a/src/main/java/stirling/software/SPDF/controller/web/UploadLimitService.java\n+++ b/src/main/java/stirling/software/SPDF/controller/web/UploadLimitService.java\n@@ -1,5 +1,6 @@\n package stirling.software.SPDF.controller.web;\n \n+import java.util.Locale;\n import java.util.regex.Pattern;\n \n import org.springframework.beans.factory.annotation.Autowired;\n@@ -52,6 +53,6 @@ private String humanReadableByteCount(long bytes) {\n         if (bytes < 1024) return bytes + \" B\";\n         int exp = (int) (Math.log(bytes) / Math.log(1024));\n         String pre = \"KMGTPE\".charAt(exp - 1) + \"B\";\n-        return String.format(\"%.1f %s\", bytes / Math.pow(1024, exp), pre);\n+        return String.format(Locale.US, \"%.1f %s\", bytes / Math.pow(1024, exp), pre);\n     }\n }\n\ndiff --git a/src/test/java/stirling/software/SPDF/controller/web/UploadLimitServiceTest.java b/src/test/java/stirling/software/SPDF/controller/web/UploadLimitServiceTest.java\n--- a/src/test/java/stirling/software/SPDF/controller/web/UploadLimitServiceTest.java\n+++ b/src/test/java/stirling/software/SPDF/controller/web/UploadLimitServiceTest.java\n@@ -0,0 +1,79 @@\n+package stirling.software.SPDF.controller.web;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import stirling.software.SPDF.model.ApplicationProperties;\n+\n+class UploadLimitServiceTest {\n+\n+    private UploadLimitService uploadLimitService;\n+    private ApplicationProperties applicationProperties;\n+    private ApplicationProperties.System systemProps;\n+\n+    @BeforeEach\n+    void setUp() {\n+        applicationProperties = mock(ApplicationProperties.class);\n+        systemProps = mock(ApplicationProperties.System.class);\n+        when(applicationProperties.getSystem()).thenReturn(systemProps);\n+\n+        uploadLimitService = new UploadLimitService();\n+        // inject mock\n+        try {\n+            var field = UploadLimitService.class.getDeclaredField(\"applicationProperties\");\n+            field.setAccessible(true);\n+            field.set(uploadLimitService, applicationProperties);\n+        } catch (ReflectiveOperationException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    @ParameterizedTest(name = \"getUploadLimit case #{index}: input={0}, expected={1}\")\n+    @MethodSource(\"uploadLimitParams\")\n+    void shouldComputeUploadLimitCorrectly(String input, long expected) {\n+        when(systemProps.getFileUploadLimit()).thenReturn(input);\n+\n+        long result = uploadLimitService.getUploadLimit();\n+        assertEquals(expected, result);\n+    }\n+\n+    static Stream<Arguments> uploadLimitParams() {\n+        return Stream.of(\n+                // empty or null input yields 0\n+                Arguments.of(null, 0L),\n+                Arguments.of(\"\", 0L),\n+                // invalid formats\n+                Arguments.of(\"1234MB\", 0L),\n+                Arguments.of(\"5TB\", 0L),\n+                // valid formats\n+                Arguments.of(\"10KB\", 10 * 1024L),\n+                Arguments.of(\"2MB\", 2 * 1024 * 1024L),\n+                Arguments.of(\"1GB\", 1L * 1024 * 1024 * 1024),\n+                Arguments.of(\"5mb\", 5 * 1024 * 1024L),\n+                Arguments.of(\"0MB\", 0L));\n+    }\n+\n+    @ParameterizedTest(name = \"getReadableUploadLimit case #{index}: rawValue={0}, expected={1}\")\n+    @MethodSource(\"readableLimitParams\")\n+    void shouldReturnReadableFormat(String rawValue, String expected) {\n+        when(systemProps.getFileUploadLimit()).thenReturn(rawValue);\n+        String result = uploadLimitService.getReadableUploadLimit();\n+        assertEquals(expected, result);\n+    }\n+\n+    static Stream<Arguments> readableLimitParams() {\n+        return Stream.of(\n+                Arguments.of(null, \"0 B\"),\n+                Arguments.of(\"\", \"0 B\"),\n+                Arguments.of(\"1KB\", \"1.0 KB\"),\n+                Arguments.of(\"2MB\", \"2.0 MB\"));\n+    }\n+}",
    "output": "Enforce `Locale.US` for Consistent Decimal Formatting in Byte-Size Output (#3562)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\n- **What was changed**  \n  - Added `import java.util.Locale;`  \n- Updated the `String.format` call in `humanReadableByteCount` to use\n`Locale.US`\n\n- **Why the change was made**  \nBy default, `String.format` uses the JVM’s default locale, which in some\nenvironments (e.g., Germany) formats decimals with a comma. Tests\nexpected a dot (`.`) as the decimal separator (e.g., `\"1.0 KB\"`), so we\nforce `Locale.US` to ensure consistent output across all locales.\n\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/web/HomeWebController.java b/src/main/java/stirling/software/SPDF/controller/web/HomeWebController.java\n--- a/src/main/java/stirling/software/SPDF/controller/web/HomeWebController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/web/HomeWebController.java\n@@ -77,9 +77,8 @@ public String root(Model model) {\n     }\n \n     @GetMapping(\"/home-legacy\")\n-    public String homeLegacy(Model model) {\n-        model.addAttribute(\"currentPage\", \"home-legacy\");\n-        return \"home-legacy\";\n+    public String redirectHomeLegacy() {\n+        return \"redirect:/\";\n     }\n \n     @GetMapping(value = \"/robots.txt\", produces = MediaType.TEXT_PLAIN_VALUE)",
    "output": "remove legacy homepage (#3518)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\n- What was changed\n- Why the change was made\n- Any challenges encountered\n\nCloses #(issue_number)\n\n---\n\n## Checklist\n\n### General\n\n- [ ] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [ ] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [ ] I have performed a self-review of my own code\n- [ ] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/src/test/java/stirling/software/SPDF/EE/LicenseKeyCheckerTest.java b/src/test/java/stirling/software/SPDF/EE/LicenseKeyCheckerTest.java\n--- a/src/test/java/stirling/software/SPDF/EE/LicenseKeyCheckerTest.java\n+++ b/src/test/java/stirling/software/SPDF/EE/LicenseKeyCheckerTest.java\n@@ -0,0 +1,77 @@\n+package stirling.software.SPDF.EE;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import stirling.software.SPDF.EE.KeygenLicenseVerifier.License;\n+import stirling.software.SPDF.model.ApplicationProperties;\n+\n+@ExtendWith(MockitoExtension.class)\n+class LicenseKeyCheckerTest {\n+\n+    @Mock private KeygenLicenseVerifier verifier;\n+\n+    @Test\n+    void premiumDisabled_skipsVerification() {\n+        ApplicationProperties props = new ApplicationProperties();\n+        props.getPremium().setEnabled(false);\n+        props.getPremium().setKey(\"dummy\");\n+\n+        LicenseKeyChecker checker = new LicenseKeyChecker(verifier, props);\n+\n+        assertEquals(License.NORMAL, checker.getPremiumLicenseEnabledResult());\n+        verifyNoInteractions(verifier);\n+    }\n+\n+    @Test\n+    void directKey_verified() {\n+        ApplicationProperties props = new ApplicationProperties();\n+        props.getPremium().setEnabled(true);\n+        props.getPremium().setKey(\"abc\");\n+        when(verifier.verifyLicense(\"abc\")).thenReturn(License.PRO);\n+\n+        LicenseKeyChecker checker = new LicenseKeyChecker(verifier, props);\n+\n+        assertEquals(License.PRO, checker.getPremiumLicenseEnabledResult());\n+        verify(verifier).verifyLicense(\"abc\");\n+    }\n+\n+    @Test\n+    void fileKey_verified(@TempDir Path temp) throws IOException {\n+        Path file = temp.resolve(\"license.txt\");\n+        Files.writeString(file, \"filekey\");\n+\n+        ApplicationProperties props = new ApplicationProperties();\n+        props.getPremium().setEnabled(true);\n+        props.getPremium().setKey(\"file:\" + file.toString());\n+        when(verifier.verifyLicense(\"filekey\")).thenReturn(License.ENTERPRISE);\n+\n+        LicenseKeyChecker checker = new LicenseKeyChecker(verifier, props);\n+\n+        assertEquals(License.ENTERPRISE, checker.getPremiumLicenseEnabledResult());\n+        verify(verifier).verifyLicense(\"filekey\");\n+    }\n+\n+    @Test\n+    void missingFile_resultsNormal(@TempDir Path temp) {\n+        Path file = temp.resolve(\"missing.txt\");\n+        ApplicationProperties props = new ApplicationProperties();\n+        props.getPremium().setEnabled(true);\n+        props.getPremium().setKey(\"file:\" + file.toString());\n+\n+        LicenseKeyChecker checker = new LicenseKeyChecker(verifier, props);\n+\n+        assertEquals(License.NORMAL, checker.getPremiumLicenseEnabledResult());\n+        verifyNoInteractions(verifier);\n+    }\n+}\n\ndiff --git a/src/test/java/stirling/software/SPDF/utils/GeneralUtilsAdditionalTest.java b/src/test/java/stirling/software/SPDF/utils/GeneralUtilsAdditionalTest.java\n--- a/src/test/java/stirling/software/SPDF/utils/GeneralUtilsAdditionalTest.java\n+++ b/src/test/java/stirling/software/SPDF/utils/GeneralUtilsAdditionalTest.java\n@@ -0,0 +1,41 @@\n+package stirling.software.SPDF.utils;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+import org.junit.jupiter.api.Test;\n+\n+class GeneralUtilsAdditionalTest {\n+\n+    @Test\n+    void testConvertSizeToBytes() {\n+        assertEquals(1024L, GeneralUtils.convertSizeToBytes(\"1KB\"));\n+        assertEquals(1024L * 1024, GeneralUtils.convertSizeToBytes(\"1MB\"));\n+        assertEquals(1024L * 1024 * 1024, GeneralUtils.convertSizeToBytes(\"1GB\"));\n+        assertEquals(100L * 1024 * 1024, GeneralUtils.convertSizeToBytes(\"100\"));\n+        assertNull(GeneralUtils.convertSizeToBytes(\"invalid\"));\n+        assertNull(GeneralUtils.convertSizeToBytes(null));\n+    }\n+\n+    @Test\n+    void testFormatBytes() {\n+        assertEquals(\"512 B\", GeneralUtils.formatBytes(512));\n+        assertEquals(\"1.00 KB\", GeneralUtils.formatBytes(1024));\n+        assertEquals(\"1.00 MB\", GeneralUtils.formatBytes(1024L * 1024));\n+        assertEquals(\"1.00 GB\", GeneralUtils.formatBytes(1024L * 1024 * 1024));\n+    }\n+\n+    @Test\n+    void testURLHelpersAndUUID() {\n+        assertTrue(GeneralUtils.isValidURL(\"https://example.com\"));\n+        assertFalse(GeneralUtils.isValidURL(\"htp:/bad\"));\n+        assertFalse(GeneralUtils.isURLReachable(\"http://localhost\"));\n+        assertFalse(GeneralUtils.isURLReachable(\"ftp://example.com\"));\n+\n+        assertTrue(GeneralUtils.isValidUUID(\"123e4567-e89b-12d3-a456-426614174000\"));\n+        assertFalse(GeneralUtils.isValidUUID(\"not-a-uuid\"));\n+\n+        assertFalse(GeneralUtils.isVersionHigher(null, \"1.0\"));\n+        assertTrue(GeneralUtils.isVersionHigher(\"2.0\", \"1.9\"));\n+        assertFalse(GeneralUtils.isVersionHigher(\"1.0\", \"1.0.1\"));\n+    }\n+}\n\ndiff --git a/src/test/java/stirling/software/SPDF/utils/PdfUtilsTest.java b/src/test/java/stirling/software/SPDF/utils/PdfUtilsTest.java\n--- a/src/test/java/stirling/software/SPDF/utils/PdfUtilsTest.java\n+++ b/src/test/java/stirling/software/SPDF/utils/PdfUtilsTest.java\n@@ -5,19 +5,28 @@\n import static org.junit.jupiter.api.Assertions.assertThrows;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+import java.awt.Color;\n+import java.awt.Graphics2D;\n+import java.awt.image.BufferedImage;\n+import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.Set;\n \n import org.apache.pdfbox.cos.COSName;\n+import org.apache.pdfbox.pdmodel.PDDocument;\n import org.apache.pdfbox.pdmodel.PDPage;\n import org.apache.pdfbox.pdmodel.PDResources;\n import org.apache.pdfbox.pdmodel.common.PDRectangle;\n import org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;\n import org.junit.jupiter.api.Test;\n import org.mockito.Mockito;\n \n+import stirling.software.SPDF.model.ApplicationProperties;\n+import stirling.software.SPDF.service.CustomPDFDocumentFactory;\n+import stirling.software.SPDF.service.PdfMetadataService;\n+\n public class PdfUtilsTest {\n \n     @Test\n@@ -49,4 +58,68 @@ void testHasImagesOnPage() throws IOException {\n \n         assertTrue(PdfUtils.hasImagesOnPage(page));\n     }\n+\n+    @Test\n+    void testPageCountComparators() throws Exception {\n+        PDDocument doc1 = new PDDocument();\n+        doc1.addPage(new PDPage());\n+        doc1.addPage(new PDPage());\n+        doc1.addPage(new PDPage());\n+        PdfUtils utils = new PdfUtils();\n+        assertTrue(utils.pageCount(doc1, 2, \"greater\"));\n+\n+        PDDocument doc2 = new PDDocument();\n+        doc2.addPage(new PDPage());\n+        doc2.addPage(new PDPage());\n+        doc2.addPage(new PDPage());\n+        assertTrue(utils.pageCount(doc2, 3, \"equal\"));\n+\n+        PDDocument doc3 = new PDDocument();\n+        doc3.addPage(new PDPage());\n+        doc3.addPage(new PDPage());\n+        assertTrue(utils.pageCount(doc3, 5, \"less\"));\n+\n+        PDDocument doc4 = new PDDocument();\n+        doc4.addPage(new PDPage());\n+        assertThrows(IllegalArgumentException.class, () -> utils.pageCount(doc4, 1, \"bad\"));\n+    }\n+\n+    @Test\n+    void testPageSize() throws Exception {\n+        PDDocument doc = new PDDocument();\n+        PDPage page = new PDPage(PDRectangle.A4);\n+        doc.addPage(page);\n+        PDRectangle rect = page.getMediaBox();\n+        String expected = rect.getWidth() + \"x\" + rect.getHeight();\n+        PdfUtils utils = new PdfUtils();\n+        assertTrue(utils.pageSize(doc, expected));\n+    }\n+\n+    @Test\n+    void testOverlayImage() throws Exception {\n+        PDDocument doc = new PDDocument();\n+        doc.addPage(new PDPage(PDRectangle.A4));\n+        ByteArrayOutputStream pdfOut = new ByteArrayOutputStream();\n+        doc.save(pdfOut);\n+        doc.close();\n+\n+        BufferedImage image = new BufferedImage(10, 10, BufferedImage.TYPE_INT_RGB);\n+        Graphics2D g = image.createGraphics();\n+        g.setColor(Color.RED);\n+        g.fillRect(0, 0, 10, 10);\n+        g.dispose();\n+        ByteArrayOutputStream imgOut = new ByteArrayOutputStream();\n+        javax.imageio.ImageIO.write(image, \"png\", imgOut);\n+\n+        PdfMetadataService meta =\n+                new PdfMetadataService(new ApplicationProperties(), \"label\", false, null);\n+        CustomPDFDocumentFactory factory = new CustomPDFDocumentFactory(meta);\n+\n+        byte[] result =\n+                PdfUtils.overlayImage(\n+                        factory, pdfOut.toByteArray(), imgOut.toByteArray(), 0, 0, false);\n+        try (PDDocument resultDoc = factory.load(result)) {\n+            assertEquals(1, resultDoc.getNumberOfPages());\n+        }\n+    }\n }",
    "output": "Add additional unit tests for utils and EE (#3557)\n\n## Summary\n- add tests for LicenseKeyChecker\n- expand GeneralUtils coverage\n- cover extra PdfUtils functionality\n- merge PdfUtilsMoreTest into PdfUtilsTest\n\n## Testing\n- `./gradlew test --no-daemon`\n- `./gradlew build spotlessApply --no-daemon`"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/LibreOfficeListener.java b/src/main/java/stirling/software/SPDF/LibreOfficeListener.java\n--- a/src/main/java/stirling/software/SPDF/LibreOfficeListener.java\n+++ b/src/main/java/stirling/software/SPDF/LibreOfficeListener.java\n@@ -31,7 +31,8 @@ private boolean isListenerRunning() {\n         log.info(\"waiting for listener to start\");\n         try (Socket socket = new Socket()) {\n             socket.connect(\n-                    new InetSocketAddress(\"localhost\", 2002), 1000); // Timeout after 1 second\n+                    new InetSocketAddress(\"localhost\", LISTENER_PORT),\n+                    1000); // Timeout after 1 second\n             return true;\n         } catch (Exception e) {\n             return false;\n\ndiff --git a/src/main/java/stirling/software/SPDF/config/FileFallbackTemplateResolver.java b/src/main/java/stirling/software/SPDF/config/FileFallbackTemplateResolver.java\n--- a/src/main/java/stirling/software/SPDF/config/FileFallbackTemplateResolver.java\n+++ b/src/main/java/stirling/software/SPDF/config/FileFallbackTemplateResolver.java\n@@ -11,8 +11,11 @@\n import org.thymeleaf.templateresource.FileTemplateResource;\n import org.thymeleaf.templateresource.ITemplateResource;\n \n+import lombok.extern.slf4j.Slf4j;\n+\n import stirling.software.SPDF.model.InputStreamTemplateResource;\n \n+@Slf4j\n public class FileFallbackTemplateResolver extends AbstractConfigurableTemplateResolver {\n \n     private final ResourceLoader resourceLoader;\n@@ -40,7 +43,8 @@ protected ITemplateResource computeTemplateResource(\n                 return new FileTemplateResource(resource.getFile().getPath(), characterEncoding);\n             }\n         } catch (IOException e) {\n-\n+            // Log the exception to help with debugging issues loading external templates\n+            log.warn(\"Unable to read template '{}' from file system\", resourceName, e);\n         }\n \n         InputStream inputStream =\n\ndiff --git a/src/main/java/stirling/software/SPDF/model/InputStreamTemplateResource.java b/src/main/java/stirling/software/SPDF/model/InputStreamTemplateResource.java\n--- a/src/main/java/stirling/software/SPDF/model/InputStreamTemplateResource.java\n+++ b/src/main/java/stirling/software/SPDF/model/InputStreamTemplateResource.java\n@@ -39,7 +39,6 @@ public String getBaseName() {\n \n     @Override\n     public boolean exists() {\n-        // TODO Auto-generated method stub\n-        return false;\n+        return inputStream != null;\n     }\n }",
    "output": "Fix TemplateResolver and LibreOfficeListener bugs (#3555)\n\n## Summary\n- log missing exceptions in FileFallbackTemplateResolver\n- implement exists check for InputStreamTemplateResource\n- use LISTENER_PORT constant when verifying LibreOffice listener\n\n## Testing\n- `./gradlew build --no-daemon`\n- `./gradlew test --no-daemon`\n\n---------\n\nCo-authored-by: Copilot <175728472+Copilot@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java b/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java\n@@ -93,6 +93,7 @@ PipelineResult runPipelineAgainstFiles(List<Resource> outputFiles, PipelineConfi\n         ByteArrayOutputStream logStream = new ByteArrayOutputStream();\n         PrintStream logPrintStream = new PrintStream(logStream);\n         boolean hasErrors = false;\n+        boolean filtersApplied = false;\n         for (PipelineOperation pipelineOperation : config.getOperations()) {\n             String operation = pipelineOperation.getOperation();\n             boolean isMultiInputOperation = apiDocService.isMultiInput(operation);\n@@ -134,7 +135,7 @@ PipelineResult runPipelineAgainstFiles(List<Resource> outputFiles, PipelineConfi\n                             if (operation.startsWith(\"filter-\")\n                                     && (response.getBody() == null\n                                             || response.getBody().length == 0)) {\n-                                result.setFiltersApplied(true);\n+                                filtersApplied = true;\n                                 log.info(\"Skipping file due to filtering {}\", operation);\n                                 continue;\n                             }\n@@ -215,12 +216,12 @@ PipelineResult runPipelineAgainstFiles(List<Resource> outputFiles, PipelineConfi\n             log.error(\"Errors occurred during processing. Log: {}\", logStream.toString());\n         }\n         result.setHasErrors(hasErrors);\n-        result.setFiltersApplied(hasErrors);\n+        result.setFiltersApplied(filtersApplied);\n         result.setOutputFiles(outputFiles);\n         return result;\n     }\n \n-    private ResponseEntity<byte[]> sendWebRequest(String url, MultiValueMap<String, Object> body) {\n+    /* package */ ResponseEntity<byte[]> sendWebRequest(String url, MultiValueMap<String, Object> body) {\n         RestTemplate restTemplate = new RestTemplate();\n         // Set up headers, including API key\n         HttpHeaders headers = new HttpHeaders();\n\ndiff --git a/src/test/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessorTest.java b/src/test/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessorTest.java\n--- a/src/test/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessorTest.java\n+++ b/src/test/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessorTest.java\n@@ -0,0 +1,76 @@\n+package stirling.software.SPDF.controller.api.pipeline;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.mockito.ArgumentMatchers.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.springframework.core.io.ByteArrayResource;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+\n+import jakarta.servlet.ServletContext;\n+\n+import stirling.software.SPDF.model.PipelineConfig;\n+import stirling.software.SPDF.model.PipelineOperation;\n+import stirling.software.SPDF.model.PipelineResult;\n+\n+@ExtendWith(MockitoExtension.class)\n+class PipelineProcessorTest {\n+\n+    @Mock\n+    ApiDocService apiDocService;\n+\n+    @Mock\n+    UserServiceInterface userService;\n+\n+    @Mock\n+    ServletContext servletContext;\n+\n+    PipelineProcessor pipelineProcessor;\n+\n+    @BeforeEach\n+    void setUp() {\n+        pipelineProcessor = spy(new PipelineProcessor(apiDocService, userService, servletContext));\n+    }\n+\n+    @Test\n+    void runPipelineWithFilterSetsFlag() throws Exception {\n+        PipelineOperation op = new PipelineOperation();\n+        op.setOperation(\"filter-page-count\");\n+        op.setParameters(Map.of());\n+        PipelineConfig config = new PipelineConfig();\n+        config.setOperations(List.of(op));\n+\n+        Resource file = new ByteArrayResource(\"data\".getBytes()) {\n+            @Override\n+            public String getFilename() {\n+                return \"test.pdf\";\n+            }\n+        };\n+\n+        List<Resource> files = List.of(file);\n+\n+        when(apiDocService.isMultiInput(\"filter-page-count\")).thenReturn(false);\n+        when(apiDocService.getExtensionTypes(false, \"filter-page-count\")).thenReturn(List.of(\"pdf\"));\n+\n+        doReturn(new ResponseEntity<>(new byte[0], HttpStatus.OK))\n+                .when(pipelineProcessor)\n+                .sendWebRequest(anyString(), any());\n+\n+        PipelineResult result = pipelineProcessor.runPipelineAgainstFiles(files, config);\n+\n+        assertTrue(result.isFiltersApplied(), \"Filter flag should be true when operation filters file\");\n+        assertFalse(result.isHasErrors(), \"No errors should occur\");\n+        assertTrue(result.getOutputFiles().isEmpty(), \"Filtered file list should be empty\");\n+    }\n+}\n+",
    "output": "Fix test compilation around pipeline processor (#3554)\n\n## Summary\n- allow tests to spy on PipelineProcessor web requests\n- fix ResponseEntity usage in PipelineProcessorTest\n\n## Testing\n- `./gradlew test --offline` *(fails: No route to host while downloading\ngradle-8.14-all.zip)*"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/InitialSetup.java b/src/main/java/stirling/software/SPDF/config/InitialSetup.java\n--- a/src/main/java/stirling/software/SPDF/config/InitialSetup.java\n+++ b/src/main/java/stirling/software/SPDF/config/InitialSetup.java\n@@ -73,7 +73,7 @@ public void initLegalUrls() throws IOException {\n         // Initialize Terms and Conditions\n         String termsUrl = applicationProperties.getLegal().getTermsAndConditions();\n         if (StringUtils.isEmpty(termsUrl)) {\n-            String defaultTermsUrl = \"https://www.stirlingpdf.com/terms-and-conditions\";\n+            String defaultTermsUrl = \"https://www.stirlingpdf.com/terms\";\n             GeneralUtils.saveKeyToSettings(\"legal.termsAndConditions\", defaultTermsUrl);\n             applicationProperties.getLegal().setTermsAndConditions(defaultTermsUrl);\n         }\n\ndiff --git a/src/main/java/stirling/software/SPDF/config/MetricsConfig.java b/src/main/java/stirling/software/SPDF/config/MetricsConfig.java\n--- a/src/main/java/stirling/software/SPDF/config/MetricsConfig.java\n+++ b/src/main/java/stirling/software/SPDF/config/MetricsConfig.java\n@@ -15,7 +15,7 @@ public MeterFilter meterFilter() {\n         return new MeterFilter() {\n             @Override\n             public MeterFilterReply accept(Meter.Id id) {\n-                if (id.getName().equals(\"http.requests\")) {\n+                if (\"http.requests\".equals(id.getName())) {\n                     return MeterFilterReply.NEUTRAL;\n                 }\n                 return MeterFilterReply.DENY;\n\ndiff --git a/src/main/java/stirling/software/SPDF/config/OpenApiConfig.java b/src/main/java/stirling/software/SPDF/config/OpenApiConfig.java\n--- a/src/main/java/stirling/software/SPDF/config/OpenApiConfig.java\n+++ b/src/main/java/stirling/software/SPDF/config/OpenApiConfig.java\n@@ -5,7 +5,9 @@\n \n import io.swagger.v3.oas.models.Components;\n import io.swagger.v3.oas.models.OpenAPI;\n+import io.swagger.v3.oas.models.info.Contact;\n import io.swagger.v3.oas.models.info.Info;\n+import io.swagger.v3.oas.models.info.License;\n import io.swagger.v3.oas.models.security.SecurityRequirement;\n import io.swagger.v3.oas.models.security.SecurityScheme;\n \n@@ -31,14 +33,25 @@ public OpenAPI customOpenAPI() {\n             // default version if all else fails\n             version = \"1.0.0\";\n         }\n+        Info info =\n+                new Info()\n+                        .title(DEFAULT_TITLE)\n+                        .version(version)\n+                        .license(\n+                                new License()\n+                                        .name(\"MIT\")\n+                                        .url(\n+                                                \"https://raw.githubusercontent.com/Stirling-Tools/Stirling-PDF/refs/heads/main/LICENSE\")\n+                                        .identifier(\"MIT\"))\n+                        .termsOfService(\"https://www.stirlingpdf.com/terms\")\n+                        .contact(\n+                                new Contact()\n+                                        .name(\"Stirling Software\")\n+                                        .url(\"https://www.stirlingpdf.com\")\n+                                        .email(\"contact@stirlingpdf.com\"))\n+                        .description(DEFAULT_DESCRIPTION);\n         if (!applicationProperties.getSecurity().getEnableLogin()) {\n-            return new OpenAPI()\n-                    .components(new Components())\n-                    .info(\n-                            new Info()\n-                                    .title(DEFAULT_TITLE)\n-                                    .version(version)\n-                                    .description(DEFAULT_DESCRIPTION));\n+            return new OpenAPI().components(new Components()).info(info);\n         } else {\n             SecurityScheme apiKeyScheme =\n                     new SecurityScheme()\n@@ -47,11 +60,7 @@ public OpenAPI customOpenAPI() {\n                             .name(\"X-API-KEY\");\n             return new OpenAPI()\n                     .components(new Components().addSecuritySchemes(\"apiKey\", apiKeyScheme))\n-                    .info(\n-                            new Info()\n-                                    .title(DEFAULT_TITLE)\n-                                    .version(version)\n-                                    .description(DEFAULT_DESCRIPTION))\n+                    .info(info)\n                     .addSecurityItem(new SecurityRequirement().addList(\"apiKey\"));\n         }\n     }",
    "output": "Update legal URLs and improve OpenAPI metadata configuration (#3522)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\n- Updated default Terms & Conditions URL from `/terms-and-conditions` to\n`/terms` in:\n  - `InitialSetup.java`\n  - `settings.yml.template`\n  - `allEndpointsRemovedSettings.yml`\n- Improved OpenAPI metadata in `OpenApiConfig.java`:\n  - Added contact information (`name`, `url`, `email`)\n  - Added license section with MIT license\n  - Included terms of service link\n- Changed string comparison in `MetricsConfig.java` to use\n`\"constant\".equals(...)` format\n- Cleaned up and unified YAML formatting and comments\n- Merged and restructured `enterpriseEdition` settings under\n`premium.proFeatures`\n\n### Why the change was made\n\n- Ensure legal links are consistent and up-to-date\n- Improve clarity and completeness of the OpenAPI specification for\nexternal consumers\n- Follow best practices for code readability and configuration structure\n- Prevent misconfiguration from outdated or redundant YAML sections\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/EE/EEAppConfig.java b/src/main/java/stirling/software/SPDF/EE/EEAppConfig.java\n--- a/src/main/java/stirling/software/SPDF/EE/EEAppConfig.java\n+++ b/src/main/java/stirling/software/SPDF/EE/EEAppConfig.java\n@@ -33,7 +33,7 @@ public EEAppConfig(\n     public boolean runningProOrHigher() {\n         return licenseKeyChecker.getPremiumLicenseEnabledResult() != License.NORMAL;\n     }\n-    \n+\n     @Bean(name = \"license\")\n     public String licenseType() {\n         return licenseKeyChecker.getPremiumLicenseEnabledResult().name();\n\ndiff --git a/src/main/java/stirling/software/SPDF/config/AppConfig.java b/src/main/java/stirling/software/SPDF/config/AppConfig.java\n--- a/src/main/java/stirling/software/SPDF/config/AppConfig.java\n+++ b/src/main/java/stirling/software/SPDF/config/AppConfig.java\n@@ -36,7 +36,7 @@ public class AppConfig {\n     private final ApplicationProperties applicationProperties;\n \n     private final Environment env;\n-    \n+\n     @Bean\n     @ConditionalOnProperty(name = \"system.customHTMLFiles\", havingValue = \"true\")\n     public SpringTemplateEngine templateEngine(ResourceLoader resourceLoader) {\n@@ -197,12 +197,12 @@ public String stirlingPDFLabel() {\n     public String uuid() {\n         return applicationProperties.getAutomaticallyGenerated().getUUID();\n     }\n-    \n+\n     @Bean(name = \"disablePixel\")\n     public boolean disablePixel() {\n         return Boolean.getBoolean(env.getProperty(\"DISABLE_PIXEL\"));\n     }\n-    \n+\n     @Bean(name = \"machineType\")\n     public String determineMachineType() {\n         try {",
    "output": "🤖 format everything with pre-commit by <stirlingbot> (#3514)\n\nAuto-generated by [create-pull-request][1] with **stirlingbot**\n\n[1]: https://github.com/peter-evans/create-pull-request\n\nSigned-off-by: stirlingbot[bot] <195170888+stirlingbot[bot]@users.noreply.github.com>\nCo-authored-by: stirlingbot[bot] <195170888+stirlingbot[bot]@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/AnalysisController.java b/src/main/java/stirling/software/SPDF/controller/api/AnalysisController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/AnalysisController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/AnalysisController.java\n@@ -180,14 +180,15 @@ public Map<String, Object> getSecurityInfo(@ModelAttribute PDFFile file) throws\n \n                 // Get permissions\n                 Map<String, Boolean> permissions = new HashMap<>();\n-                permissions.put(\"canPrint\", document.getCurrentAccessPermission().canPrint());\n-                permissions.put(\"canModify\", document.getCurrentAccessPermission().canModify());\n+                permissions.put(\"preventPrinting\", !document.getCurrentAccessPermission().canPrint());\n                 permissions.put(\n-                        \"canExtractContent\",\n-                        document.getCurrentAccessPermission().canExtractContent());\n+                        \"preventModify\", !document.getCurrentAccessPermission().canModify());\n                 permissions.put(\n-                        \"canModifyAnnotations\",\n-                        document.getCurrentAccessPermission().canModifyAnnotations());\n+                        \"preventExtractContent\",\n+                        !document.getCurrentAccessPermission().canExtractContent());\n+                permissions.put(\n+                        \"preventModifyAnnotations\",\n+                        !document.getCurrentAccessPermission().canModifyAnnotations());\n \n                 securityInfo.put(\"permissions\", permissions);\n             } else {\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/api/security/GetInfoOnPDF.java b/src/main/java/stirling/software/SPDF/controller/api/security/GetInfoOnPDF.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/security/GetInfoOnPDF.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/security/GetInfoOnPDF.java\n@@ -622,8 +622,8 @@ private void setNodePermissions(PDDocument pdfBoxDoc, ObjectNode permissionsNode\n         permissionsNode.put(\"Document Assembly\", getPermissionState(ap.canAssembleDocument()));\n         permissionsNode.put(\"Extracting Content\", getPermissionState(ap.canExtractContent()));\n         permissionsNode.put(\n-                \"Extracting for accessibility\",\n-                getPermissionState(ap.canExtractForAccessibility()));\n+            \"Extracting for accessibility\",\n+            getPermissionState(ap.canExtractForAccessibility()));\n         permissionsNode.put(\"Form Filling\", getPermissionState(ap.canFillInForm()));\n         permissionsNode.put(\"Modifying\", getPermissionState(ap.canModify()));\n         permissionsNode.put(\"Modifying annotations\", getPermissionState(ap.canModifyAnnotations()));\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/api/security/PasswordController.java b/src/main/java/stirling/software/SPDF/controller/api/security/PasswordController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/security/PasswordController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/security/PasswordController.java\n@@ -63,25 +63,25 @@ public ResponseEntity<byte[]> addPassword(@ModelAttribute AddPasswordRequest req\n         String ownerPassword = request.getOwnerPassword();\n         String password = request.getPassword();\n         int keyLength = request.getKeyLength();\n-        boolean canAssembleDocument = request.isCanAssembleDocument();\n-        boolean canExtractContent = request.isCanExtractContent();\n-        boolean canExtractForAccessibility = request.isCanExtractForAccessibility();\n-        boolean canFillInForm = request.isCanFillInForm();\n-        boolean canModify = request.isCanModify();\n-        boolean canModifyAnnotations = request.isCanModifyAnnotations();\n-        boolean canPrint = request.isCanPrint();\n-        boolean canPrintFaithful = request.isCanPrintFaithful();\n+        boolean preventAssembly = request.isPreventAssembly();\n+        boolean preventExtractContent = request.isPreventExtractContent();\n+        boolean preventExtractForAccessibility = request.isPreventExtractForAccessibility();\n+        boolean preventFillInForm = request.isPreventFillInForm();\n+        boolean preventModify = request.isPreventModify();\n+        boolean preventModifyAnnotations = request.isPreventModifyAnnotations();\n+        boolean preventPrinting = request.isPreventPrinting();\n+        boolean preventPrintingFaithful = request.isPreventPrintingFaithful();\n \n         PDDocument document = pdfDocumentFactory.load(fileInput);\n         AccessPermission ap = new AccessPermission();\n-        ap.setCanAssembleDocument(!canAssembleDocument);\n-        ap.setCanExtractContent(!canExtractContent);\n-        ap.setCanExtractForAccessibility(!canExtractForAccessibility);\n-        ap.setCanFillInForm(!canFillInForm);\n-        ap.setCanModify(!canModify);\n-        ap.setCanModifyAnnotations(!canModifyAnnotations);\n-        ap.setCanPrint(!canPrint);\n-        ap.setCanPrintFaithful(!canPrintFaithful);\n+        ap.setCanAssembleDocument(!preventAssembly);\n+        ap.setCanExtractContent(!preventExtractContent);\n+        ap.setCanExtractForAccessibility(!preventExtractForAccessibility);\n+        ap.setCanFillInForm(!preventFillInForm);\n+        ap.setCanModify(!preventModify);\n+        ap.setCanModifyAnnotations(!preventModifyAnnotations);\n+        ap.setCanPrint(!preventPrinting);\n+        ap.setCanPrintFaithful(!preventPrintingFaithful);\n         StandardProtectionPolicy spp = new StandardProtectionPolicy(ownerPassword, password, ap);\n \n         if (!\"\".equals(ownerPassword) || !\"\".equals(password)) {\n\ndiff --git a/src/main/java/stirling/software/SPDF/model/api/security/AddPasswordRequest.java b/src/main/java/stirling/software/SPDF/model/api/security/AddPasswordRequest.java\n--- a/src/main/java/stirling/software/SPDF/model/api/security/AddPasswordRequest.java\n+++ b/src/main/java/stirling/software/SPDF/model/api/security/AddPasswordRequest.java\n@@ -29,31 +29,29 @@ public class AddPasswordRequest extends PDFFile {\n             defaultValue = \"256\")\n     private int keyLength = 256;\n \n-    @Schema(description = \"Whether the document assembly is allowed\", example = \"false\")\n-    private boolean canAssembleDocument;\n+    @Schema(description = \"Whether document assembly is prevented\", example = \"false\")\n+    private boolean preventAssembly;\n \n-    @Schema(\n-            description = \"Whether content extraction for accessibility is allowed\",\n-            example = \"false\")\n-    private boolean canExtractContent;\n+    @Schema(description = \"Whether content extraction is prevented\", example = \"false\")\n+    private boolean preventExtractContent;\n \n     @Schema(\n-            description = \"Whether content extraction for accessibility is allowed\",\n+            description = \"Whether content extraction for accessibility is prevented\",\n             example = \"false\")\n-    private boolean canExtractForAccessibility;\n+    private boolean preventExtractForAccessibility;\n \n-    @Schema(description = \"Whether form filling is allowed\", example = \"false\")\n-    private boolean canFillInForm;\n+    @Schema(description = \"Whether form filling is prevented\", example = \"false\")\n+    private boolean preventFillInForm;\n \n-    @Schema(description = \"Whether the document modification is allowed\", example = \"false\")\n-    private boolean canModify;\n+    @Schema(description = \"Whether document modification is prevented\", example = \"false\")\n+    private boolean preventModify;\n \n-    @Schema(description = \"Whether modification of annotations is allowed\", example = \"false\")\n-    private boolean canModifyAnnotations;\n+    @Schema(description = \"Whether modification of annotations is prevented\", example = \"false\")\n+    private boolean preventModifyAnnotations;\n \n-    @Schema(description = \"Whether printing of the document is allowed\", example = \"false\")\n-    private boolean canPrint;\n+    @Schema(description = \"Whether printing of the document is prevented\", example = \"false\")\n+    private boolean preventPrinting;\n \n-    @Schema(description = \"Whether faithful printing is allowed\", example = \"false\")\n-    private boolean canPrintFaithful;\n+    @Schema(description = \"Whether faithful printing is prevented\", example = \"false\")\n+    private boolean preventPrintingFaithful;\n }",
    "output": "Refactor permission variable names (#3457)\n\n## Refactor: Improve clarity of permission variable names\n\nRenamed confusing `can[Action]` boolean variables to `prevent[Action]`\n(e.g., `canPrint` -> `preventPrinting`) in `PasswordController.java`,\n`AddPasswordRequest.java`, and `add-password.html`.\n\n\nThe previous `can[Action]` convention was misleading, as `true` meant\nthe action was *disallowed*. The new `prevent[Action]` naming directly\nreflects the intent (`true` = prevented), improving code clarity.\n\n**Changes:**\n\n*   Updated variable names in controller logic\n*   Updated `@Schema` descriptions in `AddPasswordRequest.java`\n* Updated corresponding HTML element attributes (`id`, `name`, `for`) in\n`add-password.html`\n\n**Important Notes:**\n\n* The underlying logic still inverts the boolean when setting\npermissions (e.g., `AccessPermission.setCanPrint(!preventPrinting)`).\n* User-facing UI text remains unchanged per request of @Frooodle in\n#3420.\n\n**Why not invert the API logic**\n*   Inverting API (to can[action] logic) would either invalidate the UI\n* Inverting API AND changing UI would warrant bigger translation effort\nto change it in all languages\n* This version is consistent (meaning what the UI says is actually done)\nand preserve the UI language (meaning no translations needed) however it\nis inconsistent with PDFBox methods naming scheme\n\n**PDFBox**\n\n* **PDFBox Interaction:** This refactor addresses the naming *within*\nStirling-PDF's API and Front-end layers only. The controller logic\nintentionally inverts the `prevent[Action]` boolean\n(`ap.setCanPrint(!preventPrinting)`) to correctly interact with the\nunderlying PDFBox methods. No further renaming related to these\npermissions is necessary as the PDFBox methods themselves retain the\n`can[Action]` names.\n\n\nUnderlying logic is not changed so it should work but just in case I\ntested locally on an Adobe PDF that contained form in Chrome.\n\n\n\n## New variable names in API\n\n![new API variable\nnames](https://github.com/user-attachments/assets/f3d56aaf-0455-4f65-af14-c1a07a02d11a)\n\n**Related Issues:**\n\nCloses #3427\nCloses #3420\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [x] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/EE/EEAppConfig.java b/src/main/java/stirling/software/SPDF/EE/EEAppConfig.java\n--- a/src/main/java/stirling/software/SPDF/EE/EEAppConfig.java\n+++ b/src/main/java/stirling/software/SPDF/EE/EEAppConfig.java\n@@ -33,6 +33,11 @@ public EEAppConfig(\n     public boolean runningProOrHigher() {\n         return licenseKeyChecker.getPremiumLicenseEnabledResult() != License.NORMAL;\n     }\n+    \n+    @Bean(name = \"license\")\n+    public String licenseType() {\n+        return licenseKeyChecker.getPremiumLicenseEnabledResult().name();\n+    }\n \n     @Bean(name = \"runningEE\")\n     public boolean runningEnterprise() {\n\ndiff --git a/src/main/java/stirling/software/SPDF/config/AppConfig.java b/src/main/java/stirling/software/SPDF/config/AppConfig.java\n--- a/src/main/java/stirling/software/SPDF/config/AppConfig.java\n+++ b/src/main/java/stirling/software/SPDF/config/AppConfig.java\n@@ -5,6 +5,7 @@\n import java.nio.file.Path;\n import java.nio.file.Paths;\n import java.util.List;\n+import java.util.Locale;\n import java.util.Properties;\n import java.util.function.Predicate;\n \n@@ -15,6 +16,7 @@\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Lazy;\n import org.springframework.context.annotation.Scope;\n+import org.springframework.core.env.Environment;\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.core.io.Resource;\n import org.springframework.core.io.ResourceLoader;\n@@ -33,6 +35,8 @@ public class AppConfig {\n \n     private final ApplicationProperties applicationProperties;\n \n+    private final Environment env;\n+    \n     @Bean\n     @ConditionalOnProperty(name = \"system.customHTMLFiles\", havingValue = \"true\")\n     public SpringTemplateEngine templateEngine(ResourceLoader resourceLoader) {\n@@ -193,4 +197,37 @@ public String stirlingPDFLabel() {\n     public String uuid() {\n         return applicationProperties.getAutomaticallyGenerated().getUUID();\n     }\n+    \n+    @Bean(name = \"disablePixel\")\n+    public boolean disablePixel() {\n+        return Boolean.getBoolean(env.getProperty(\"DISABLE_PIXEL\"));\n+    }\n+    \n+    @Bean(name = \"machineType\")\n+    public String determineMachineType() {\n+        try {\n+            boolean isDocker = runningInDocker();\n+            boolean isKubernetes = System.getenv(\"KUBERNETES_SERVICE_HOST\") != null;\n+            boolean isBrowserOpen = \"true\".equalsIgnoreCase(env.getProperty(\"BROWSER_OPEN\"));\n+\n+            if (isKubernetes) {\n+                return \"Kubernetes\";\n+            } else if (isDocker) {\n+                return \"Docker\";\n+            } else if (isBrowserOpen) {\n+                String os = System.getProperty(\"os.name\").toLowerCase(Locale.ROOT);\n+                if (os.contains(\"win\")) {\n+                    return \"Client-windows\";\n+                } else if (os.contains(\"mac\")) {\n+                    return \"Client-mac\";\n+                } else {\n+                    return \"Client-unix\";\n+                }\n+            } else {\n+                return \"Server-jar\";\n+            }\n+        } catch (Exception e) {\n+            return \"Unknown\";\n+        }\n+    }\n }\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java b/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java\n@@ -626,25 +626,32 @@ private byte[] generatMD5(byte[] data) throws IOException {\n \n     // Scale factors for different optimization levels\n     private double getScaleFactorForLevel(int optimizeLevel) {\n-        return switch (optimizeLevel) {\n-            case 4 -> 0.9; // 90% - lite compression\n-            case 5 -> 0.8; // 80% - lite compression\n-            case 6 -> 0.7; // 70% - lite compression\n-            case 7 -> 0.6; // 60% - intense compression\n-            case 8 -> 0.5; // 50% - intense compression\n-            case 9, 10 -> 0.4; // 40% - intense compression\n-            default -> 1.0; // No scaling for levels 1-3\n-        };\n+    \treturn switch (optimizeLevel) {\n+        case 3 -> 0.85;\n+        case 4 -> 0.75;\n+        case 5 -> 0.65;\n+        case 6 -> 0.55;\n+        case 7 -> 0.45;\n+        case 8 -> 0.35;\n+        case 9 -> 0.25;\n+        case 10 -> 0.15;\n+        default -> 1.0;\n+    };\n     }\n \n     // JPEG quality for different optimization levels\n     private float getJpegQualityForLevel(int optimizeLevel) {\n-        return switch (optimizeLevel) {\n-            case 7 -> 0.8f; // 80% quality\n-            case 8 -> 0.6f; // 60% quality\n-            case 9, 10 -> 0.4f; // 40% quality\n-            default -> 0.7f; // 70% quality for levels 1-6\n-        };\n+    \treturn switch (optimizeLevel) {\n+        case 3 -> 0.85f;\n+        case 4 -> 0.80f;\n+        case 5 -> 0.75f;\n+        case 6 -> 0.70f;\n+        case 7 -> 0.60f;\n+        case 8 -> 0.50f;\n+        case 9 -> 0.35f;\n+        case 10 -> 0.2f;\n+        default -> 0.7f;\n+    };\n     }\n \n     @PostMapping(consumes = \"multipart/form-data\", value = \"/compress-pdf\")\n@@ -698,7 +705,7 @@ public ResponseEntity<byte[]> optimizePdf(@ModelAttribute OptimizePdfRequest req\n \n             while (!sizeMet && optimizeLevel <= 9) {\n                 // Apply image compression for levels 4-9\n-                if ((optimizeLevel >= 4 || Boolean.TRUE.equals(convertToGrayscale))\n+                if ((optimizeLevel >= 3 || Boolean.TRUE.equals(convertToGrayscale))\n                         && !imageCompressionApplied) {\n                     double scaleFactor = getScaleFactorForLevel(optimizeLevel);\n                     float jpegQuality = getJpegQualityForLevel(optimizeLevel);\n@@ -790,10 +797,14 @@ private void applyQpdfCompression(\n         log.info(\"Pre-QPDF file size: {}\", GeneralUtils.formatBytes(preQpdfSize));\n \n         // Map optimization levels to QPDF compression levels\n-        int qpdfCompressionLevel =\n-                optimizeLevel <= 3\n-                        ? optimizeLevel * 3 // Level 1->3, 2->6, 3->9\n-                        : 9; // Max compression for levels 4-9\n+        int qpdfCompressionLevel;\n+        if (optimizeLevel == 1) {\n+            qpdfCompressionLevel = 5;\n+        } else if (optimizeLevel == 2) {\n+            qpdfCompressionLevel = 9;\n+        } else {\n+            qpdfCompressionLevel = 9;\n+        }\n \n         // Create output file for QPDF\n         Path qpdfOutputFile = Files.createTempFile(\"qpdf_output_\", \".pdf\");\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/api/security/RedactController.java b/src/main/java/stirling/software/SPDF/controller/api/security/RedactController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/security/RedactController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/security/RedactController.java\n@@ -170,16 +170,17 @@ private void redactPages(\n     }\n \n     private Color decodeOrDefault(String hex, Color defaultColor) {\n-        Color color = null;\n         try {\n-            color = Color.decode(hex);\n+            if (hex != null && !hex.startsWith(\"#\")) {\n+                hex = \"#\" + hex;\n+            }\n+            return Color.decode(hex);\n         } catch (Exception e) {\n-            color = defaultColor;\n+            return defaultColor;\n         }\n-\n-        return color;\n     }\n \n+\n     private List<Integer> getPageNumbers(ManualRedactPdfRequest request, int pagesCount) {\n         String pageNumbersInput = request.getPageNumbers();\n         String[] parsedPageNumbers =\n\ndiff --git a/src/main/java/stirling/software/SPDF/model/api/security/RedactPdfRequest.java b/src/main/java/stirling/software/SPDF/model/api/security/RedactPdfRequest.java\n--- a/src/main/java/stirling/software/SPDF/model/api/security/RedactPdfRequest.java\n+++ b/src/main/java/stirling/software/SPDF/model/api/security/RedactPdfRequest.java\n@@ -23,7 +23,7 @@ public class RedactPdfRequest extends PDFFile {\n     @Schema(description = \"Whether to use whole word search\", defaultValue = \"false\")\n     private boolean wholeWordSearch;\n \n-    @Schema(description = \"The color for redaction\", defaultValue = \"#000000\")\n+    @Schema(description = \"Hexadecimal color code for redaction, e.g. #FF0000 or 000000\", defaultValue = \"#000000\")\n     private String redactColor = \"#000000\";\n \n     @Schema(description = \"Custom padding for redaction\", type = \"number\")",
    "output": "pixel changes, redact color fix, version bump, aggressive compression (#3502)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\n- What was changed\n- Why the change was made\n- Any challenges encountered\n\nCloses #(issue_number)\n\n---\n\n## Checklist\n\n### General\n\n- [ ] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [ ] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [ ] I have performed a self-review of my own code\n- [ ] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/security/CertSignController.java b/src/main/java/stirling/software/SPDF/controller/api/security/CertSignController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/security/CertSignController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/security/CertSignController.java\n@@ -1,6 +1,7 @@\n package stirling.software.SPDF.controller.api.security;\n \n import java.awt.*;\n+import java.beans.PropertyEditorSupport;\n import java.io.*;\n import java.nio.file.Files;\n import java.security.*;\n@@ -53,7 +54,10 @@\n import org.bouncycastle.pkcs.PKCS8EncryptedPrivateKeyInfo;\n import org.bouncycastle.pkcs.PKCSException;\n import org.springframework.core.io.ClassPathResource;\n+import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.WebDataBinder;\n+import org.springframework.web.bind.annotation.InitBinder;\n import org.springframework.web.bind.annotation.ModelAttribute;\n import org.springframework.web.bind.annotation.PostMapping;\n import org.springframework.web.bind.annotation.RequestMapping;\n@@ -82,6 +86,18 @@ public class CertSignController {\n         Security.addProvider(new BouncyCastleProvider());\n     }\n \n+    @InitBinder\n+    public void initBinder(WebDataBinder binder) {\n+        binder.registerCustomEditor(\n+                MultipartFile.class,\n+                new PropertyEditorSupport() {\n+                    @Override\n+                    public void setAsText(String text) throws IllegalArgumentException {\n+                        setValue(null);\n+                    }\n+                });\n+    }\n+\n     private final CustomPDFDocumentFactory pdfDocumentFactory;\n \n     private static void sign(\n@@ -103,8 +119,7 @@ private static void sign(\n             signature.setLocation(location);\n             signature.setReason(reason);\n             signature.setSignDate(Calendar.getInstance());\n-\n-            if (showSignature) {\n+            if (Boolean.TRUE.equals(showSignature)) {\n                 SignatureOptions signatureOptions = new SignatureOptions();\n                 signatureOptions.setVisualSignature(\n                         instance.createVisibleSignature(doc, signature, pageNumber, showLogo));\n@@ -121,13 +136,18 @@ private static void sign(\n         }\n     }\n \n-    @PostMapping(consumes = \"multipart/form-data\", value = \"/cert-sign\")\n+    @PostMapping(\n+            consumes = {\n+                MediaType.MULTIPART_FORM_DATA_VALUE,\n+                MediaType.APPLICATION_FORM_URLENCODED_VALUE\n+            },\n+            value = \"/cert-sign\")\n     @Operation(\n             summary = \"Sign PDF with a Digital Certificate\",\n             description =\n                     \"This endpoint accepts a PDF file, a digital certificate and related\"\n-                            + \" information to sign the PDF. It then returns the digitally signed PDF\"\n-                            + \" file. Input:PDF Output:PDF Type:SISO\")\n+                        + \" information to sign the PDF. It then returns the digitally signed PDF\"\n+                        + \" file. Input:PDF Output:PDF Type:SISO\")\n     public ResponseEntity<byte[]> signPDFWithCert(@ModelAttribute SignPDFWithCertRequest request)\n             throws Exception {\n         MultipartFile pdf = request.getFileInput();\n@@ -137,12 +157,13 @@ public ResponseEntity<byte[]> signPDFWithCert(@ModelAttribute SignPDFWithCertReq\n         MultipartFile p12File = request.getP12File();\n         MultipartFile jksfile = request.getJksFile();\n         String password = request.getPassword();\n-        Boolean showSignature = request.isShowSignature();\n+        Boolean showSignature = request.getShowSignature();\n         String reason = request.getReason();\n         String location = request.getLocation();\n         String name = request.getName();\n-        Integer pageNumber = request.getPageNumber() - 1;\n-        Boolean showLogo = request.isShowLogo();\n+        // Convert 1-indexed page number (user input) to 0-indexed page number (API requirement)\n+        Integer pageNumber = request.getPageNumber() != null ? (request.getPageNumber() - 1) : null;\n+        Boolean showLogo = request.getShowLogo();\n \n         if (certType == null) {\n             throw new IllegalArgumentException(\"Cert type must be provided\");\n@@ -279,7 +300,7 @@ public InputStream createVisibleSignature(\n                 widget.setAppearance(appearance);\n \n                 try (PDPageContentStream cs = new PDPageContentStream(doc, appearanceStream)) {\n-                    if (showLogo) {\n+                    if (Boolean.TRUE.equals(showLogo)) {\n                         cs.saveGraphicsState();\n                         PDExtendedGraphicsState extState = new PDExtendedGraphicsState();\n                         extState.setBlendMode(BlendMode.MULTIPLY);\n\ndiff --git a/src/main/java/stirling/software/SPDF/model/api/security/SignPDFWithCertRequest.java b/src/main/java/stirling/software/SPDF/model/api/security/SignPDFWithCertRequest.java\n--- a/src/main/java/stirling/software/SPDF/model/api/security/SignPDFWithCertRequest.java\n+++ b/src/main/java/stirling/software/SPDF/model/api/security/SignPDFWithCertRequest.java\n@@ -20,7 +20,8 @@ public class SignPDFWithCertRequest extends PDFFile {\n \n     @Schema(\n             description =\n-                    \"The private key for the digital certificate (required for PEM type certificates)\")\n+                    \"The private key for the digital certificate (required for PEM type\"\n+                            + \" certificates)\")\n     private MultipartFile privateKeyFile;\n \n     @Schema(description = \"The digital certificate (required for PEM type certificates)\")\n@@ -32,11 +33,11 @@ public class SignPDFWithCertRequest extends PDFFile {\n     @Schema(description = \"The JKS keystore file (Java Key Store)\")\n     private MultipartFile jksFile;\n \n-    @Schema(description = \"The password for the keystore or the private key\")\n+    @Schema(description = \"The password for the keystore or the private key\", format = \"password\")\n     private String password;\n \n     @Schema(description = \"Whether to visually show the signature in the PDF file\")\n-    private boolean showSignature;\n+    private Boolean showSignature;\n \n     @Schema(description = \"The reason for signing the PDF\")\n     private String reason;\n@@ -49,9 +50,10 @@ public class SignPDFWithCertRequest extends PDFFile {\n \n     @Schema(\n             description =\n-                    \"The page number where the signature should be visible. This is required if showSignature is set to true\")\n+                    \"The page number where the signature should be visible. This is required if\"\n+                            + \" showSignature is set to true\")\n     private Integer pageNumber;\n \n     @Schema(description = \"Whether to visually show a signature logo along with the signature\")\n-    private boolean showLogo;\n+    private Boolean showLogo;\n }",
    "output": "Fix cert-sign API NullPointerException when pageNumber is omitted for invisible signatures (#3463)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\n- **What was changed**  \n- Updated `SignPDFWithCertRequest` to use `Boolean` for `showSignature`\nand `showLogo`, and made `pageNumber` nullable.\n  - In `CertSignController`:\n- Added an `@InitBinder` to convert empty multipart fields to `null`.\n- Extended `@PostMapping` to consume both `multipart/form-data` and\n`application/x-www-form-urlencoded`.\n- Wrapped `pageNumber` calculation in a null-check (`pageNumber =\nrequest.getPageNumber() != null ? request.getPageNumber() - 1 : null`).\n- Changed signature-visualization and logo checks to\n`Boolean.TRUE.equals(...)` to avoid unboxing NPE.\n  - Cleaned up imports and schema annotations in the request model.\n\n- **Why the change was made**  \n- Prevent a 500 Internal Server Error caused by calling `.intValue()` on\na null `pageNumber` when `showSignature=false` (invisible signatures).\n- Ensure that omitting `pageNumber` doesn’t break clients using the “try\nit out” swagger UI or `curl`-based requests.\n\n- **Any challenges encountered**  \n- Configuring Spring’s data binder to treat empty file inputs as `null`\nrequired a custom `PropertyEditorSupport`.\n- Balancing backward compatibility with stricter type handling\n(switching from primitive `boolean` to boxed `Boolean`).\n\nCloses #3459\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/AnalysisController.java b/src/main/java/stirling/software/SPDF/controller/api/AnalysisController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/AnalysisController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/AnalysisController.java\n@@ -59,7 +59,8 @@ public Map<String, Object> getBasicInfo(@ModelAttribute PDFFile file) throws IOE\n             description = \"Returns title, author, subject, etc. Input:PDF Output:JSON Type:SISO\")\n     public Map<String, String> getDocumentProperties(@ModelAttribute PDFFile file)\n             throws IOException {\n-        try (PDDocument document = pdfDocumentFactory.load(file.getFileInput())) {\n+        // Load the document in read-only mode to prevent modifications and ensure the integrity of the original file.\n+        try (PDDocument document = pdfDocumentFactory.load(file.getFileInput(), true)) {\n             PDDocumentInformation info = document.getDocumentInformation();\n             Map<String, String> properties = new HashMap<>();\n             properties.put(\"title\", info.getTitle());",
    "output": "fix read wrong properties (#3472)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\nTest file:\n\n\n[12345678.pdf](https://github.com/user-attachments/files/20028981/12345678.pdf)\n\nBehavior without readOnly\n\n```json\n{\n  \"creator\": null,\n  \"modificationDate\": \"java.util.GregorianCalendar[time=1746381303000,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=java.util.SimpleTimeZone[id=GMT,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2025,MONTH=4,WEEK_OF_YEAR=19,WEEK_OF_MONTH=2,DAY_OF_MONTH=4,DAY_OF_YEAR=124,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=55,SECOND=3,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]\",\n  \"keywords\": null,\n  \"author\": \"\",\n  \"subject\": null,\n  \"producer\": \"Stirling-PDF v0.46.0\",\n  \"title\": \"Microsoft Word - Dokument1\",\n  \"creationDate\": \"java.util.GregorianCalendar[time=1746381238000,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=java.util.SimpleTimeZone[id=GMT+02:00,offset=7200000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2025,MONTH=4,WEEK_OF_YEAR=19,WEEK_OF_MONTH=2,DAY_OF_MONTH=4,DAY_OF_YEAR=124,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=53,SECOND=58,MILLISECOND=0,ZONE_OFFSET=7200000,DST_OFFSET=0]\"\n}\n```\n\nwith readOnly=true\n\n```json\n{\n  \"creator\": null,\n  \"modificationDate\": \"java.util.GregorianCalendar[time=1746381238000,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=java.util.SimpleTimeZone[id=GMT+02:00,offset=7200000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2025,MONTH=4,WEEK_OF_YEAR=19,WEEK_OF_MONTH=2,DAY_OF_MONTH=4,DAY_OF_YEAR=124,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=53,SECOND=58,MILLISECOND=0,ZONE_OFFSET=7200000,DST_OFFSET=0]\",\n  \"keywords\": null,\n  \"author\": \"\",\n  \"subject\": null,\n  \"producer\": \"Microsoft: Print To PDF\",\n  \"title\": \"Microsoft Word - Dokument1\",\n  \"creationDate\": \"java.util.GregorianCalendar[time=1746381238000,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=java.util.SimpleTimeZone[id=GMT+02:00,offset=7200000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2025,MONTH=4,WEEK_OF_YEAR=19,WEEK_OF_MONTH=2,DAY_OF_MONTH=4,DAY_OF_YEAR=124,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=53,SECOND=58,MILLISECOND=0,ZONE_OFFSET=7200000,DST_OFFSET=0]\"\n}\n```\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details.\n\n---------\n\nCo-authored-by: Copilot <175728472+Copilot@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/misc/ReplaceAndInvertColorController.java b/src/main/java/stirling/software/SPDF/controller/api/misc/ReplaceAndInvertColorController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/misc/ReplaceAndInvertColorController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/misc/ReplaceAndInvertColorController.java\n@@ -25,7 +25,7 @@\n @RequiredArgsConstructor\n public class ReplaceAndInvertColorController {\n \n-    private ReplaceAndInvertColorService replaceAndInvertColorService;\n+    private final ReplaceAndInvertColorService replaceAndInvertColorService;\n \n     @PostMapping(consumes = \"multipart/form-data\", value = \"/replace-invert-pdf\")\n     @Operation(\n\ndiff --git a/src/main/java/stirling/software/SPDF/service/misc/ReplaceAndInvertColorService.java b/src/main/java/stirling/software/SPDF/service/misc/ReplaceAndInvertColorService.java\n--- a/src/main/java/stirling/software/SPDF/service/misc/ReplaceAndInvertColorService.java\n+++ b/src/main/java/stirling/software/SPDF/service/misc/ReplaceAndInvertColorService.java\n@@ -16,7 +16,7 @@\n @Service\n @RequiredArgsConstructor\n public class ReplaceAndInvertColorService {\n-    private ReplaceAndInvertColorFactory replaceAndInvertColorFactory;\n+    private final ReplaceAndInvertColorFactory replaceAndInvertColorFactory;\n \n     public InputStreamResource replaceAndInvertColor(\n             MultipartFile file,",
    "output": "Fix NullPointerException by Enabling Constructor Injection for Color Replacement Components (#3469)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\n- **What was changed**  \nAdded the `final` modifier to the `ReplaceAndInvertColorService` field\nin `ReplaceAndInvertColorController` and to the\n`ReplaceAndInvertColorFactory` field in `ReplaceAndInvertColorService`.\nThis ensures that Lombok’s `@RequiredArgsConstructor` generates\nconstructors for these dependencies, enabling proper constructor-based\ninjection instead of leaving them null.\n\n- **Why the change was made**  \nWithout the `final` keyword, Lombok does not include non-final fields in\nthe generated constructor, causing Spring to leave them uninitialized\nand resulting in a `NullPointerException` during runtime when invoking\n`replaceAndInvert` on the factory/service.\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/database/DatabaseService.java b/src/main/java/stirling/software/SPDF/config/security/database/DatabaseService.java\n--- a/src/main/java/stirling/software/SPDF/config/security/database/DatabaseService.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/database/DatabaseService.java\n@@ -246,26 +246,28 @@ private boolean isH2Database() {\n         boolean isDBUrlH2 =\n                 datasource.getCustomDatabaseUrl().contains(\"h2\")\n                         || datasource.getCustomDatabaseUrl().contains(\"H2\");\n-\n-        if (isTypeH2 && !isDBUrlH2) {\n-            log.warn(\n-                    \"Datasource type is H2, but the URL does not contain 'h2'. \"\n-                            + \"Please check your configuration.\");\n-            throw new IllegalStateException(\n-                    \"Datasource type is H2, but the URL does not contain 'h2'. Please check your\"\n-                            + \" configuration.\");\n-        } else if (!isTypeH2 && isDBUrlH2) {\n-            log.warn(\n-                    \"Datasource URL contains 'h2', but the type is not H2. \"\n-                            + \"Please check your configuration.\");\n-            throw new IllegalStateException(\n-                    \"Datasource URL contains 'h2', but the type is not H2. Please check your\"\n-                            + \" configuration.\");\n+        boolean isCustomDatabase = datasource.isEnableCustomDatabase();\n+\n+        if (isCustomDatabase) {\n+            if (isTypeH2 && !isDBUrlH2) {\n+                log.warn(\n+                        \"Datasource type is H2, but the URL does not contain 'h2'. \"\n+                                + \"Please check your configuration.\");\n+                throw new IllegalStateException(\n+                        \"Datasource type is H2, but the URL does not contain 'h2'. Please check\"\n+                                + \" your configuration.\");\n+            } else if (!isTypeH2 && isDBUrlH2) {\n+                log.warn(\n+                        \"Datasource URL contains 'h2', but the type is not H2. \"\n+                                + \"Please check your configuration.\");\n+                throw new IllegalStateException(\n+                        \"Datasource URL contains 'h2', but the type is not H2. Please check your\"\n+                                + \" configuration.\");\n+            }\n         }\n-\n         boolean isH2 = isTypeH2 && isDBUrlH2;\n \n-        return !datasource.isEnableCustomDatabase() || isH2;\n+        return !isCustomDatabase || isH2;\n     }\n \n     /**",
    "output": "Validate H2 Database Type and URL Consistency for Custom Databases (#3458)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\n- **What was changed**  \nIntroduced a local `isCustomDatabase` flag (based on\n`datasource.isEnableCustomDatabase()`) to ensure that the H2-specific\nURL/type consistency checks (and corresponding warnings/exceptions) only\nrun when a custom database configuration is enabled. Refactored the\nreturn statement to use this flag (`return !isCustomDatabase || isH2;`)\ninstead of calling `isEnableCustomDatabase()` directly.\n\n- **Why the change was made**  \nPreviously, even when custom database support was disabled, the method\nwould still validate H2 configuration and potentially throw an\n`IllegalStateException`. By guarding those checks, we avoid spurious\nwarnings or exceptions in default (non-custom) setups and make the\nmethod’s behavior more predictable.\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [ ] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/web/AccountWebController.java b/src/main/java/stirling/software/SPDF/controller/web/AccountWebController.java\n--- a/src/main/java/stirling/software/SPDF/controller/web/AccountWebController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/web/AccountWebController.java\n@@ -191,7 +191,7 @@ public String login(HttpServletRequest request, Model model, Authentication auth\n         }\n \n         if (request.getParameter(\"logout\") != null) {\n-            model.addAttribute(\"logoutMessage\", \"You have been logged out.\");\n+            model.addAttribute(\"logoutMessage\", \"login.logoutMessage\");\n         }\n \n         return \"login\";",
    "output": "Internationalize logout message (#3450)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\n- **What was changed**  \n- Controller now uses the `login.logoutMessage` i18n key instead of\nhard-coded text.\n- Added `login.logoutMessage` entry to `messages_de_DE.properties` and\n`messages_en_GB.properties`.\n- Updated `login.html` to resolve the logout message via\n`th:text=\"#{…}\"`.\n\n- **Why the change was made**  \n  - To support localization for logout feedback.\n- To eliminate hard-coded strings from the view layer and rely on\nmessage bundles.\n\nbefore:\n\n\n![image](https://github.com/user-attachments/assets/5e9975f6-717f-4035-8e3c-76df8c0275bb)\n\n\nafter:\n\n\n![image](https://github.com/user-attachments/assets/934f45ad-d490-4a34-9399-5c9031f2db2d)\n\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [x] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/database/DatabaseService.java b/src/main/java/stirling/software/SPDF/config/security/database/DatabaseService.java\n--- a/src/main/java/stirling/software/SPDF/config/security/database/DatabaseService.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/database/DatabaseService.java\n@@ -240,8 +240,32 @@ public String getH2Version() {\n     private boolean isH2Database() {\n         ApplicationProperties.Datasource datasource =\n                 applicationProperties.getSystem().getDatasource();\n-        return !datasource.isEnableCustomDatabase()\n-                || datasource.getType().equalsIgnoreCase(ApplicationProperties.Driver.H2.name());\n+\n+        boolean isTypeH2 =\n+                datasource.getType().equalsIgnoreCase(ApplicationProperties.Driver.H2.name());\n+        boolean isDBUrlH2 =\n+                datasource.getCustomDatabaseUrl().contains(\"h2\")\n+                        || datasource.getCustomDatabaseUrl().contains(\"H2\");\n+\n+        if (isTypeH2 && !isDBUrlH2) {\n+            log.warn(\n+                    \"Datasource type is H2, but the URL does not contain 'h2'. \"\n+                            + \"Please check your configuration.\");\n+            throw new IllegalStateException(\n+                    \"Datasource type is H2, but the URL does not contain 'h2'. Please check your\"\n+                            + \" configuration.\");\n+        } else if (!isTypeH2 && isDBUrlH2) {\n+            log.warn(\n+                    \"Datasource URL contains 'h2', but the type is not H2. \"\n+                            + \"Please check your configuration.\");\n+            throw new IllegalStateException(\n+                    \"Datasource URL contains 'h2', but the type is not H2. Please check your\"\n+                            + \" configuration.\");\n+        }\n+\n+        boolean isH2 = isTypeH2 && isDBUrlH2;\n+\n+        return !datasource.isEnableCustomDatabase() || isH2;\n     }\n \n     /**",
    "output": "Validate H2 datasource configuration in DatabaseService (#3449)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\n- **What was changed**  \nUpdated the `isH2Database()` method in `DatabaseService.java` to perform\nadditional consistency checks between the configured datasource type and\nthe JDBC URL:\n- Compute `isTypeH2` based on\n`datasource.getType().equalsIgnoreCase(\"H2\")`.\n- Compute `isDBUrlH2` by checking if `datasource.getCustomDatabaseUrl()`\ncontains “h2” (case-insensitive).\n- Log a warning and throw `IllegalStateException` when the type is H2\nbut URL doesn’t contain “h2”, or vice versa.\n- Return the original boolean logic (`!enableCustomDatabase || isH2`)\nonly when both type and URL agree.\n\n- **Why the change was made**  \nTo prevent runtime misconfigurations where the declared database driver\n(H2) does not match the actual JDBC URL (or vice versa), providing\nearly, clear feedback to users and avoiding obscure errors later in\nstartup.\n\n\nCloses #3428\n\n---\n\n## Checklist\n\n### General\n\n- [ ] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [ ] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [ ] I have performed a self-review of my own code\n- [ ] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details.\n\nCo-authored-by: Anthony Stirling <77850077+Frooodle@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/UserBasedRateLimitingFilter.java b/src/main/java/stirling/software/SPDF/config/security/UserBasedRateLimitingFilter.java\n--- a/src/main/java/stirling/software/SPDF/config/security/UserBasedRateLimitingFilter.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/UserBasedRateLimitingFilter.java\n@@ -141,7 +141,7 @@ private Bucket createUserBucket(int limitPerDay) {\n                         .build();\n         return Bucket.builder().addLimit(limit).build();\n     }\n-    \n+\n     private static String stripNewlines(final String s) {\n         return s.replaceAll(\"[\\n\\r]\", \"\");\n     }",
    "output": "🤖 format everything with pre-commit by <stirlingbot> (#3429)\n\nAuto-generated by [create-pull-request][1] with **stirlingbot**\n\n[1]: https://github.com/peter-evans/create-pull-request\n\nSigned-off-by: stirlingbot[bot] <195170888+stirlingbot[bot]@users.noreply.github.com>\nCo-authored-by: stirlingbot[bot] <195170888+stirlingbot[bot]@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/UserBasedRateLimitingFilter.java b/src/main/java/stirling/software/SPDF/config/security/UserBasedRateLimitingFilter.java\n--- a/src/main/java/stirling/software/SPDF/config/security/UserBasedRateLimitingFilter.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/UserBasedRateLimitingFilter.java\n@@ -121,7 +121,7 @@ private void processRequest(\n         if (probe.isConsumed()) {\n             response.setHeader(\n                     \"X-Rate-Limit-Remaining\",\n-                    Newlines.stripAll(Long.toString(probe.getRemainingTokens())));\n+                    stripNewlines(Newlines.stripAll(Long.toString(probe.getRemainingTokens()))));\n             filterChain.doFilter(request, response);\n         } else {\n             long waitForRefill = probe.getNanosToWaitForRefill() / 1_000_000_000;\n@@ -141,4 +141,8 @@ private Bucket createUserBucket(int limitPerDay) {\n                         .build();\n         return Bucket.builder().addLimit(limit).build();\n     }\n+    \n+    private static String stripNewlines(final String s) {\n+        return s.replaceAll(\"[\\n\\r]\", \"\");\n+    }\n }",
    "output": "(Snyk) Fixed finding: \"Improper Neutralization of CRLF Sequences in HTTP Headers\" (#3424)\n\n## Remediation\n\nThis change fixes \"Improper Neutralization of CRLF Sequences in HTTP\nHeaders\" (id = java/HttpResponseSplitting) identified by Snyk.\n\n## Details\n\nThis change ensures that HTTP response header values can't contain\nnewline characters, leaving you vulnerable to HTTP response splitting\nand other attacks.\n\nIf malicious users can get newline characters into an HTTP response\nheader, they can inject and forge new header values that look like they\ncame from the server, and trick web gateways, proxies, and browsers.\nThis leads to vulnerabilities like Cross-site Scripting (XSS), HTTP\nresponse splitting, and more attacks from there.\n\nOur change simply makes sure that if the string passed to be a new\nresponse header value is non-null, all the newline characters (CR and\nLF) will be removed:\n```diff\n+ import io.github.pixee.security.Newlines;\n  ...\n  String orderId = getUserOrderId();\n- response.setHeader(\"X-Acme-Order-ID\", orderId);\n+ response.setHeader(\"X-Acme-Order-ID\", Newlines.stripAll(orderId));\n```\n\nNote: Many modern application servers will sanitize these values, but\nit's almost never specified in documentation, and thus there is little\nguarantee against regression. Given that, we still recommend this\npractice.\n\n<details>\n  <summary>More reading</summary>\n\n*\n[https://cwe.mitre.org/data/definitions/113](https://cwe.mitre.org/data/definitions/113)\n*\n[https://www.netsparker.com/blog/web-security/crlf-http-header/](https://www.netsparker.com/blog/web-security/crlf-http-header/)\n*\n[https://owasp.org/www-community/attacks/HTTP_Response_Splitting](https://owasp.org/www-community/attacks/HTTP_Response_Splitting)\n*\n[https://regilero.github.io/security/english/2015/10/04/http_smuggling_in_2015_part_one/](https://regilero.github.io/security/english/2015/10/04/http_smuggling_in_2015_part_one/)\n</details>\n\nCo-authored-by: pixeebot[bot] <104101892+pixeebot[bot]@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineController.java b/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineController.java\n@@ -51,7 +51,7 @@ public PipelineController(\n         this.postHogService = postHogService;\n     }\n \n-    @PostMapping(\"/handleData\")\n+    @PostMapping(value = \"/handleData\", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)\n     public ResponseEntity<byte[]> handleData(@ModelAttribute HandleDataRequest request)\n             throws JsonMappingException, JsonProcessingException {\n         MultipartFile[] files = request.getFileInput();\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/api/security/ValidateSignatureController.java b/src/main/java/stirling/software/SPDF/controller/api/security/ValidateSignatureController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/security/ValidateSignatureController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/security/ValidateSignatureController.java\n@@ -22,6 +22,7 @@\n import org.bouncycastle.cms.jcajce.JcaSimpleSignerInfoVerifierBuilder;\n import org.bouncycastle.util.Store;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n import org.springframework.web.bind.annotation.ModelAttribute;\n import org.springframework.web.bind.annotation.PostMapping;\n@@ -58,7 +59,7 @@ public ValidateSignatureController(\n             description =\n                     \"Validates the digital signatures in a PDF file against default or custom\"\n                             + \" certificates. Input:PDF Output:JSON Type:SISO\")\n-    @PostMapping(value = \"/validate-signature\")\n+    @PostMapping(value = \"/validate-signature\", consumes = MediaType.MULTIPART_FORM_DATA_VALUE)\n     public ResponseEntity<List<SignatureValidationResult>> validateSignature(\n             @ModelAttribute SignatureValidationRequest request) throws IOException {\n         List<SignatureValidationResult> results = new ArrayList<>();\n\ndiff --git a/src/main/java/stirling/software/SPDF/model/api/PDFFile.java b/src/main/java/stirling/software/SPDF/model/api/PDFFile.java\n--- a/src/main/java/stirling/software/SPDF/model/api/PDFFile.java\n+++ b/src/main/java/stirling/software/SPDF/model/api/PDFFile.java\n@@ -6,10 +6,12 @@\n \n import lombok.Data;\n import lombok.EqualsAndHashCode;\n+import lombok.NoArgsConstructor;\n \n @Data\n+@NoArgsConstructor\n @EqualsAndHashCode\n public class PDFFile {\n-    @Schema(description = \"The input PDF file\")\n+    @Schema(description = \"The input PDF file\", format = \"binary\")\n     private MultipartFile fileInput;\n }",
    "output": "Changes from Version 2.2.0 to 2.8.6 `org.springdoc:springdoc-openapi-starter-webmvc-ui` (#3400)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\n- What was changed\n- Why the change was made\n- Any challenges encountered\n\nCloses #3399\n\n---\n\n## Checklist\n\n### General\n\n- [ ] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [ ] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [ ] I have performed a self-review of my own code\n- [ ] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details.\n\n---------\n\nCo-authored-by: Anthony Stirling <77850077+Frooodle@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/UserService.java b/src/main/java/stirling/software/SPDF/config/security/UserService.java\n--- a/src/main/java/stirling/software/SPDF/config/security/UserService.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/UserService.java\n@@ -423,6 +423,8 @@ public String getCurrentUsername() {\n \n         if (principal instanceof UserDetails detailsUser) {\n             return detailsUser.getUsername();\n+        } else if (principal instanceof stirling.software.SPDF.model.User domainUser) {\n+            return domainUser.getUsername();\n         } else if (principal instanceof OAuth2User oAuth2User) {\n             return oAuth2User.getAttribute(\n                     applicationProperties.getSecurity().getOauth2().getUseAsUsername());",
    "output": "Support domain `User` instances in `getCurrentUsername` method (#3383)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\n- **What was changed**  \nThe `getCurrentUsername()` method in `UserService` now recognizes and\nhandles principals of type `stirling.software.SPDF.model.User`.\nPreviously, only `UserDetails` and `OAuth2User` were supported; any\n`User` domain object was falling through to the default case and not\nreturning the expected username.\n\n- **Why the change was made**  \nIn order to allow our custom domain `User` entities to be used directly\nas the authenticated principal (for example, when loading a user via JWT\nor session), we need to extract the username from that object. This\nmakes authentication flows more consistent and prevents unexpected\n`null` or fallback values when the principal is our own `User` type.\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details.\n\nCo-authored-by: Anthony Stirling <77850077+Frooodle@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/EE/KeygenLicenseVerifier.java b/src/main/java/stirling/software/SPDF/EE/KeygenLicenseVerifier.java\n--- a/src/main/java/stirling/software/SPDF/EE/KeygenLicenseVerifier.java\n+++ b/src/main/java/stirling/software/SPDF/EE/KeygenLicenseVerifier.java\n@@ -390,7 +390,7 @@ private boolean processJWTLicensePayload(String payload) {\n                 // Extract max users and isEnterprise from policy or metadata\n                 int users = policyObj.optInt(\"users\", 0);\n                 isEnterpriseLicense = policyObj.optBoolean(\"isEnterprise\", false);\n-                \n+\n                 if (users > 0) {\n                     applicationProperties.getPremium().setMaxUsers(users);\n                     log.info(\"License allows for {} users\", users);\n@@ -402,7 +402,7 @@ private boolean processJWTLicensePayload(String payload) {\n                         users = metadata.optInt(\"users\", 1);\n                         applicationProperties.getPremium().setMaxUsers(users);\n                         log.info(\"License allows for {} users (from metadata)\", users);\n-                        \n+\n                         // Check for isEnterprise flag in metadata\n                         isEnterpriseLicense = metadata.optBoolean(\"isEnterprise\", false);\n                     } else {\n@@ -411,7 +411,7 @@ private boolean processJWTLicensePayload(String payload) {\n                         log.info(\"Using default of 1 user for license\");\n                     }\n                 }\n-               \n+\n             }\n \n             return true;\n@@ -507,16 +507,16 @@ private JsonNode validateLicense(String licenseKey, String machineFingerprint)\n                             .path(\"users\")\n                             .asInt(0);\n             applicationProperties.getPremium().setMaxUsers(users);\n-            \n+\n             // Extract isEnterprise flag\n-            isEnterpriseLicense = \n+            isEnterpriseLicense =\n                     jsonResponse\n                             .path(\"data\")\n                             .path(\"attributes\")\n                             .path(\"metadata\")\n                             .path(\"isEnterprise\")\n                             .asBoolean(false);\n-            \n+\n             log.info(applicationProperties.toString());\n \n         } else {\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/web/UploadLimitService.java b/src/main/java/stirling/software/SPDF/controller/web/UploadLimitService.java\n--- a/src/main/java/stirling/software/SPDF/controller/web/UploadLimitService.java\n+++ b/src/main/java/stirling/software/SPDF/controller/web/UploadLimitService.java\n@@ -16,7 +16,7 @@ public class UploadLimitService {\n     private ApplicationProperties applicationProperties;\n \n     public long getUploadLimit() {\n-        String maxUploadSize = \n+        String maxUploadSize =\n             applicationProperties.getSystem().getFileUploadLimit() != null\n                 ? applicationProperties.getSystem().getFileUploadLimit()\n                 : \"\";\n@@ -52,4 +52,4 @@ private String humanReadableByteCount(long bytes) {\n         String pre = \"KMGTPE\".charAt(exp - 1) + \"B\";\n         return String.format(\"%.1f %s\", bytes / Math.pow(1024, exp), pre);\n     }\n-}\n\\ No newline at end of file\n+}",
    "output": "🤖 format everything with pre-commit by <stirlingbot> (#3374)\n\nAuto-generated by [create-pull-request][1] with **stirlingbot**\n\n[1]: https://github.com/peter-evans/create-pull-request\n\nSigned-off-by: stirlingbot[bot] <195170888+stirlingbot[bot]@users.noreply.github.com>\nCo-authored-by: stirlingbot[bot] <195170888+stirlingbot[bot]@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/web/HomeWebController.java b/src/main/java/stirling/software/SPDF/controller/web/HomeWebController.java\n--- a/src/main/java/stirling/software/SPDF/controller/web/HomeWebController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/web/HomeWebController.java\n@@ -67,6 +67,9 @@ public String getReleaseNotes(Model model) {\n     @GetMapping(\"/\")\n     public String home(Model model) {\n         model.addAttribute(\"currentPage\", \"home\");\n+        String showSurvey = System.getenv(\"SHOW_SURVEY\");\n+        boolean showSurveyValue = showSurvey == null || \"true\".equalsIgnoreCase(showSurvey);\n+        model.addAttribute(\"showSurveyFromDocker\", showSurveyValue);\n         return \"home\";\n     }\n ",
    "output": "Add SHOW_SURVEY Environment variable to Docker (#3378)\n\nIn the previous implementation, the survey was displayed on the main\nscreen when the homepage was opened for the 5th, 10th, 15th, 22nd, 30th,\n50th, 75th, 100th, 150th, or 200th time, as long as the \"Do not show\nagain\" option hadn't been selected.\n\nWith this new feature, if the SHOW_SURVEY environment variable is set to\ntrue or not set at all in the Docker configuration, the survey will\ncontinue to be shown as before.\n\n<img width=\"1679\" alt=\"Screenshot 2025-04-18 at 08 17 37\"\nsrc=\"https://github.com/user-attachments/assets/696b9dc2-9502-4d66-9991-d2b81b52cd02\"\n/>\n\nHowever, if the SHOW_SURVEY parameter is explicitly set to false, the\nsurvey will no longer be displayed.\n\n<img width=\"1707\" alt=\"Screenshot 2025-04-18 at 08 18 39\"\nsrc=\"https://github.com/user-attachments/assets/b57c568a-b5e7-4927-bccf-f9a398bea702\"\n/>\n\n\nCloses #1573\n\n---\n\n## Checklist\n\n### General\n\n- [X] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [X] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [X] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [X] I have performed a self-review of my own code\n- [X] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [X] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [X] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineDirectoryProcessor.java b/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineDirectoryProcessor.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineDirectoryProcessor.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineDirectoryProcessor.java\n@@ -208,7 +208,8 @@ private File[] collectFilesForProcessing(Path dir, Path jsonFile, PipelineOperat\n                                         // Check against allowed extensions\n                                         boolean isAllowed =\n                                                 allowAllFiles\n-                                                        || inputExtensions.contains(extension);\n+                                                        || inputExtensions.contains(\n+                                                                extension.toLowerCase());\n                                         if (!isAllowed) {\n                                             log.info(\n                                                     \"Skipping file with unsupported extension: {} ({})\",\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java b/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java\n@@ -112,7 +112,8 @@ PipelineResult runPipelineAgainstFiles(List<Resource> outputFiles, PipelineConfi\n                 for (Resource file : outputFiles) {\n                     boolean hasInputFileType = false;\n                     for (String extension : inputFileTypes) {\n-                        if (\"ALL\".equals(extension) || file.getFilename().endsWith(extension)) {\n+                        if (\"ALL\".equals(extension)\n+                                || file.getFilename().toLowerCase().endsWith(extension)) {\n                             hasInputFileType = true;\n                             MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();\n                             body.add(\"fileInput\", file);\n@@ -166,7 +167,9 @@ PipelineResult runPipelineAgainstFiles(List<Resource> outputFiles, PipelineConfi\n                                     .filter(\n                                             file ->\n                                                     finalinputFileTypes.stream()\n-                                                            .anyMatch(file.getFilename()::endsWith))\n+                                                            .anyMatch(\n+                                                                    file.getFilename().toLowerCase()\n+                                                                            ::endsWith))\n                                     .toList();\n                 }\n                 // Check if there are matching files",
    "output": "Make file extension checks case-insensitive in pipeline (#3368)\n\n# Description of Changes\n\nFile extensions in the pipeline were being checked in a case-sensitive\nmanner. Since supported extensions were defined in lowercase only, files\nwith uppercase extensions were being rejected directly, and logs like\nthe following were being printed:\n\n<img width=\"1542\" alt=\"Screenshot 2025-04-17 at 00 14 16\"\nsrc=\"https://github.com/user-attachments/assets/a584b8d8-0a56-4a76-b409-9d6cd38f1a80\"\n/>\n\nWith this change, the uploaded file’s extension is now converted to\nlowercase using toLowerCase, making the extension check\ncase-insensitive. After this change, the logs flow as expected, as shown\nbelow:\n\n<img width=\"1317\" alt=\"Screenshot 2025-04-17 at 00 49 52\"\nsrc=\"https://github.com/user-attachments/assets/2abdcfc7-4c74-4b06-bbea-ef12e0f737b4\"\n/>\n\nCloses #3243\n\n---\n\n## Checklist\n\n### General\n\n- [X] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [X] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [X] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [X] I have performed a self-review of my own code\n- [X] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [X] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/AppConfig.java b/src/main/java/stirling/software/SPDF/config/AppConfig.java\n--- a/src/main/java/stirling/software/SPDF/config/AppConfig.java\n+++ b/src/main/java/stirling/software/SPDF/config/AppConfig.java\n@@ -109,33 +109,6 @@ public boolean rateLimit() {\n         return (rateLimit != null) ? Boolean.valueOf(rateLimit) : false;\n     }\n \n-    @Bean(name = \"uploadLimit\")\n-    public long uploadLimit() {\n-        String maxUploadSize =\n-                applicationProperties.getSystem().getFileUploadLimit() != null\n-                        ? applicationProperties.getSystem().getFileUploadLimit()\n-                        : \"\";\n-\n-        if (maxUploadSize.isEmpty()) {\n-            return 0;\n-        } else if (!new Regex(\"^[1-9][0-9]{0,2}[KMGkmg][Bb]$\").matches(maxUploadSize)) {\n-            log.error(\n-                    \"Invalid maxUploadSize format. Expected format: [1-9][0-9]{0,2}[KMGkmg][Bb], but got: {}\",\n-                    maxUploadSize);\n-            return 0;\n-        } else {\n-            String unit = maxUploadSize.replaceAll(\"[1-9][0-9]{0,2}\", \"\").toUpperCase();\n-            String number = maxUploadSize.replaceAll(\"[KMGkmg][Bb]\", \"\");\n-            long size = Long.parseLong(number);\n-            return switch (unit) {\n-                case \"KB\" -> size * 1024;\n-                case \"MB\" -> size * 1024 * 1024;\n-                case \"GB\" -> size * 1024 * 1024 * 1024;\n-                default -> 0;\n-            };\n-        }\n-    }\n-\n     @Bean(name = \"RunningInDocker\")\n     public boolean runningInDocker() {\n         return Files.exists(Paths.get(\"/.dockerenv\"));\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/web/GlobalUploadLimitWebController.java b/src/main/java/stirling/software/SPDF/controller/web/GlobalUploadLimitWebController.java\n--- a/src/main/java/stirling/software/SPDF/controller/web/GlobalUploadLimitWebController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/web/GlobalUploadLimitWebController.java\n@@ -1,30 +0,0 @@\n-package stirling.software.SPDF.controller.web;\n-\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n-import org.springframework.web.bind.annotation.ControllerAdvice;\n-import org.springframework.web.bind.annotation.ModelAttribute;\n-\n-@Component\n-@ControllerAdvice\n-public class GlobalUploadLimitWebController {\n-\n-    @Autowired() private long uploadLimit;\n-\n-    @ModelAttribute(\"uploadLimit\")\n-    public long populateUploadLimit() {\n-        return uploadLimit;\n-    }\n-\n-    @ModelAttribute(\"uploadLimitReadable\")\n-    public String populateReadableLimit() {\n-        return humanReadableByteCount(uploadLimit);\n-    }\n-\n-    private String humanReadableByteCount(long bytes) {\n-        if (bytes < 1024) return bytes + \" B\";\n-        int exp = (int) (Math.log(bytes) / Math.log(1024));\n-        String pre = \"KMGTPE\".charAt(exp - 1) + \"B\";\n-        return String.format(\"%.1f %s\", bytes / Math.pow(1024, exp), pre);\n-    }\n-}\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/web/UploadLimitService.java b/src/main/java/stirling/software/SPDF/controller/web/UploadLimitService.java\n--- a/src/main/java/stirling/software/SPDF/controller/web/UploadLimitService.java\n+++ b/src/main/java/stirling/software/SPDF/controller/web/UploadLimitService.java\n@@ -0,0 +1,55 @@\n+package stirling.software.SPDF.controller.web;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import stirling.software.SPDF.model.ApplicationProperties;\n+\n+import java.util.regex.Pattern;\n+\n+@Service\n+@Slf4j\n+public class UploadLimitService {\n+\n+    @Autowired\n+    private ApplicationProperties applicationProperties;\n+\n+    public long getUploadLimit() {\n+        String maxUploadSize = \n+            applicationProperties.getSystem().getFileUploadLimit() != null\n+                ? applicationProperties.getSystem().getFileUploadLimit()\n+                : \"\";\n+\n+        if (maxUploadSize.isEmpty()) {\n+            return 0;\n+        } else if (!Pattern.compile(\"^[1-9][0-9]{0,2}[KMGkmg][Bb]$\").matcher(maxUploadSize).matches()) {\n+            log.error(\n+                \"Invalid maxUploadSize format. Expected format: [1-9][0-9]{0,2}[KMGkmg][Bb], but got: {}\",\n+                maxUploadSize);\n+            return 0;\n+        } else {\n+            String unit = maxUploadSize.replaceAll(\"[1-9][0-9]{0,2}\", \"\").toUpperCase();\n+            String number = maxUploadSize.replaceAll(\"[KMGkmg][Bb]\", \"\");\n+            long size = Long.parseLong(number);\n+            return switch (unit) {\n+                case \"KB\" -> size * 1024;\n+                case \"MB\" -> size * 1024 * 1024;\n+                case \"GB\" -> size * 1024 * 1024 * 1024;\n+                default -> 0;\n+            };\n+        }\n+    }\n+\n+    //TODO: why do this server side not client?\n+    public String getReadableUploadLimit() {\n+        return humanReadableByteCount(getUploadLimit());\n+    }\n+\n+    private String humanReadableByteCount(long bytes) {\n+        if (bytes < 1024) return bytes + \" B\";\n+        int exp = (int) (Math.log(bytes) / Math.log(1024));\n+        String pre = \"KMGTPE\".charAt(exp - 1) + \"B\";\n+        return String.format(\"%.1f %s\", bytes / Math.pow(1024, exp), pre);\n+    }\n+}\n\\ No newline at end of file",
    "output": "fix pipelines via changing to service (#3358)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\n- What was changed\n- Why the change was made\n- Any challenges encountered\n\nCloses #(issue_number)\n\n---\n\n## Checklist\n\n### General\n\n- [ ] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [ ] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [ ] I have performed a self-review of my own code\n- [ ] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/service/PostHogService.java b/src/main/java/stirling/software/SPDF/service/PostHogService.java\n--- a/src/main/java/stirling/software/SPDF/service/PostHogService.java\n+++ b/src/main/java/stirling/software/SPDF/service/PostHogService.java\n@@ -63,6 +63,8 @@ public void captureEvent(String eventName, Map<String, Object> properties) {\n         if (!applicationProperties.getSystem().isAnalyticsEnabled()) {\n             return;\n         }\n+\n+        properties.put(\"app_version\", appVersion);\n         postHog.capture(uniqueId, eventName, properties);\n     }\n ",
    "output": "3335 feature request add app version to posthog (#3348)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\nAdded app_version to all posthog captures\n\nCloses #(3335)\n\n---\n\n## Checklist\n\n### General\n\n- [ ] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [ ] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [ ] I have performed a self-review of my own code\n- [ ] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/EE/KeygenLicenseVerifier.java b/src/main/java/stirling/software/SPDF/EE/KeygenLicenseVerifier.java\n--- a/src/main/java/stirling/software/SPDF/EE/KeygenLicenseVerifier.java\n+++ b/src/main/java/stirling/software/SPDF/EE/KeygenLicenseVerifier.java\n@@ -53,24 +53,37 @@ public KeygenLicenseVerifier(ApplicationProperties applicationProperties) {\n     }\n \n     public License verifyLicense(String licenseKeyOrCert) {\n-        if (isCertificateLicense(licenseKeyOrCert)) {\n-            log.info(\"Detected certificate-based license. Processing...\");\n-            return resultToEnum(verifyCertificateLicense(licenseKeyOrCert), License.ENTERPRISE);\n-        } else if (isJWTLicense(licenseKeyOrCert)) {\n-            log.info(\"Detected JWT-style license key. Processing...\");\n-            return resultToEnum(verifyJWTLicense(licenseKeyOrCert), License.ENTERPRISE);\n-        } else {\n-            log.info(\"Detected standard license key. Processing...\");\n-            return resultToEnum(verifyStandardLicense(licenseKeyOrCert), License.PRO);\n-        }\n+    \tLicense license;\n+\n+    \tif (isCertificateLicense(licenseKeyOrCert)) {\n+    \t    log.info(\"Detected certificate-based license. Processing...\");\n+    \t    boolean isValid = verifyCertificateLicense(licenseKeyOrCert);\n+    \t    if (isValid) {\n+    \t        license = isEnterpriseLicense ? License.ENTERPRISE : License.PRO;\n+    \t    } else {\n+    \t        license = License.NORMAL;\n+    \t    }\n+    \t} else if (isJWTLicense(licenseKeyOrCert)) {\n+    \t    log.info(\"Detected JWT-style license key. Processing...\");\n+    \t    boolean isValid = verifyJWTLicense(licenseKeyOrCert);\n+    \t    if (isValid) {\n+    \t        license = isEnterpriseLicense ? License.ENTERPRISE : License.PRO;\n+    \t    } else {\n+    \t        license = License.NORMAL;\n+    \t    }\n+    \t} else {\n+    \t    log.info(\"Detected standard license key. Processing...\");\n+    \t    boolean isValid = verifyStandardLicense(licenseKeyOrCert);\n+    \t    if (isValid) {\n+    \t        license = isEnterpriseLicense ? License.ENTERPRISE : License.PRO;\n+    \t    } else {\n+    \t        license = License.NORMAL;\n+    \t    }\n+    \t}\n+    \treturn license;\n     }\n \n-    private License resultToEnum(boolean result, License option) {\n-        if (result) {\n-            return option;\n-        }\n-        return License.NORMAL;\n-    }\n+    private boolean isEnterpriseLicense = false;\n \n     private boolean isCertificateLicense(String license) {\n         return license != null && license.trim().startsWith(CERT_PREFIX);\n@@ -82,8 +95,6 @@ private boolean isJWTLicense(String license) {\n \n     private boolean verifyCertificateLicense(String licenseFile) {\n         try {\n-            log.info(\"Verifying certificate-based license\");\n-\n             String encodedPayload = licenseFile;\n             // Remove the header\n             encodedPayload = encodedPayload.replace(CERT_PREFIX, \"\");\n@@ -106,8 +117,6 @@ private boolean verifyCertificateLicense(String licenseFile) {\n                 encryptedData = (String) attrs.get(\"enc\");\n                 encodedSignature = (String) attrs.get(\"sig\");\n                 algorithm = (String) attrs.get(\"alg\");\n-\n-                log.info(\"Certificate algorithm: {}\", algorithm);\n             } catch (JSONException e) {\n                 log.error(\"Failed to parse license file: {}\", e.getMessage());\n                 return false;\n@@ -151,7 +160,6 @@ private boolean verifyCertificateLicense(String licenseFile) {\n     private boolean verifyEd25519Signature(String encryptedData, String encodedSignature) {\n         try {\n             log.info(\"Signature to verify: {}\", encodedSignature);\n-            log.info(\"Public key being used: {}\", PUBLIC_KEY);\n \n             byte[] signatureBytes = Base64.getDecoder().decode(encodedSignature);\n \n@@ -185,7 +193,7 @@ private boolean verifyEd25519Signature(String encryptedData, String encodedSigna\n \n     private boolean processCertificateData(String certData) {\n         try {\n-            log.info(\"Processing certificate data: {}\", certData);\n+\n \n             JSONObject licenseData = new JSONObject(certData);\n             JSONObject metaObj = licenseData.optJSONObject(\"meta\");\n@@ -234,18 +242,9 @@ private boolean processCertificateData(String certData) {\n                         applicationProperties.getPremium().setMaxUsers(users);\n                         log.info(\"License allows for {} users\", users);\n                     }\n+                    isEnterpriseLicense = metadataObj.optBoolean(\"isEnterprise\", false);\n                 }\n \n-                // Check maxUsers directly in attributes if present from policy definition\n-                //                if (attributesObj.has(\"maxUsers\")) {\n-                //                    int maxUsers = attributesObj.optInt(\"maxUsers\", 0);\n-                //                    if (maxUsers > 0) {\n-                //                        applicationProperties.getPremium().setMaxUsers(maxUsers);\n-                //                        log.info(\"License directly specifies {} max users\",\n-                // maxUsers);\n-                //                    }\n-                //                }\n-\n                 // Check license status if available\n                 String status = attributesObj.optString(\"status\", null);\n                 if (status != null\n@@ -388,9 +387,10 @@ private boolean processJWTLicensePayload(String payload) {\n                 String policyId = policyObj.optString(\"id\", \"unknown\");\n                 log.info(\"License uses policy: {}\", policyId);\n \n-                // Extract max users from policy if available (customize based on your policy\n-                // structure)\n+                // Extract max users and isEnterprise from policy or metadata\n                 int users = policyObj.optInt(\"users\", 0);\n+                isEnterpriseLicense = policyObj.optBoolean(\"isEnterprise\", false);\n+                \n                 if (users > 0) {\n                     applicationProperties.getPremium().setMaxUsers(users);\n                     log.info(\"License allows for {} users\", users);\n@@ -402,12 +402,16 @@ private boolean processJWTLicensePayload(String payload) {\n                         users = metadata.optInt(\"users\", 1);\n                         applicationProperties.getPremium().setMaxUsers(users);\n                         log.info(\"License allows for {} users (from metadata)\", users);\n+                        \n+                        // Check for isEnterprise flag in metadata\n+                        isEnterpriseLicense = metadata.optBoolean(\"isEnterprise\", false);\n                     } else {\n                         // Default value\n                         applicationProperties.getPremium().setMaxUsers(1);\n                         log.info(\"Using default of 1 user for license\");\n                     }\n                 }\n+               \n             }\n \n             return true;\n@@ -494,6 +498,7 @@ private JsonNode validateLicense(String licenseKey, String machineFingerprint)\n             log.info(\"Validation detail: \" + detail);\n             log.info(\"Validation code: \" + code);\n \n+            // Extract user count\n             int users =\n                     jsonResponse\n                             .path(\"data\")\n@@ -502,6 +507,16 @@ private JsonNode validateLicense(String licenseKey, String machineFingerprint)\n                             .path(\"users\")\n                             .asInt(0);\n             applicationProperties.getPremium().setMaxUsers(users);\n+            \n+            // Extract isEnterprise flag\n+            isEnterpriseLicense = \n+                    jsonResponse\n+                            .path(\"data\")\n+                            .path(\"attributes\")\n+                            .path(\"metadata\")\n+                            .path(\"isEnterprise\")\n+                            .asBoolean(false);\n+            \n             log.info(applicationProperties.toString());\n \n         } else {",
    "output": "Allow non cert files to be enterprise (#3346)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\n- What was changed\n- Why the change was made\n- Any challenges encountered\n\nCloses #(issue_number)\n\n---\n\n## Checklist\n\n### General\n\n- [ ] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [ ] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [ ] I have performed a self-review of my own code\n- [ ] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/AppConfig.java b/src/main/java/stirling/software/SPDF/config/AppConfig.java\n--- a/src/main/java/stirling/software/SPDF/config/AppConfig.java\n+++ b/src/main/java/stirling/software/SPDF/config/AppConfig.java\n@@ -20,6 +20,8 @@\n import org.springframework.core.io.ResourceLoader;\n import org.thymeleaf.spring6.SpringTemplateEngine;\n \n+import com.posthog.java.shaded.kotlin.text.Regex;\n+\n import lombok.extern.slf4j.Slf4j;\n \n import stirling.software.SPDF.model.ApplicationProperties;\n@@ -107,6 +109,33 @@ public boolean rateLimit() {\n         return (rateLimit != null) ? Boolean.valueOf(rateLimit) : false;\n     }\n \n+    @Bean(name = \"uploadLimit\")\n+    public long uploadLimit() {\n+        String maxUploadSize =\n+                applicationProperties.getSystem().getFileUploadLimit() != null\n+                        ? applicationProperties.getSystem().getFileUploadLimit()\n+                        : \"\";\n+\n+        if (maxUploadSize.isEmpty()) {\n+            return 0;\n+        } else if (!new Regex(\"^[1-9][0-9]{0,2}[KMGkmg][Bb]$\").matches(maxUploadSize)) {\n+            log.error(\n+                    \"Invalid maxUploadSize format. Expected format: [1-9][0-9]{0,2}[KMGkmg][Bb], but got: {}\",\n+                    maxUploadSize);\n+            return 0;\n+        } else {\n+            String unit = maxUploadSize.replaceAll(\"[1-9][0-9]{0,2}\", \"\").toUpperCase();\n+            String number = maxUploadSize.replaceAll(\"[KMGkmg][Bb]\", \"\");\n+            long size = Long.parseLong(number);\n+            return switch (unit) {\n+                case \"KB\" -> size * 1024;\n+                case \"MB\" -> size * 1024 * 1024;\n+                case \"GB\" -> size * 1024 * 1024 * 1024;\n+                default -> 0;\n+            };\n+        }\n+    }\n+\n     @Bean(name = \"RunningInDocker\")\n     public boolean runningInDocker() {\n         return Files.exists(Paths.get(\"/.dockerenv\"));\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/web/GlobalUploadLimitWebController.java b/src/main/java/stirling/software/SPDF/controller/web/GlobalUploadLimitWebController.java\n--- a/src/main/java/stirling/software/SPDF/controller/web/GlobalUploadLimitWebController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/web/GlobalUploadLimitWebController.java\n@@ -0,0 +1,30 @@\n+package stirling.software.SPDF.controller.web;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.bind.annotation.ControllerAdvice;\n+import org.springframework.web.bind.annotation.ModelAttribute;\n+\n+@Component\n+@ControllerAdvice\n+public class GlobalUploadLimitWebController {\n+\n+    @Autowired() private long uploadLimit;\n+\n+    @ModelAttribute(\"uploadLimit\")\n+    public long populateUploadLimit() {\n+        return uploadLimit;\n+    }\n+\n+    @ModelAttribute(\"uploadLimitReadable\")\n+    public String populateReadableLimit() {\n+        return humanReadableByteCount(uploadLimit);\n+    }\n+\n+    private String humanReadableByteCount(long bytes) {\n+        if (bytes < 1024) return bytes + \" B\";\n+        int exp = (int) (Math.log(bytes) / Math.log(1024));\n+        String pre = \"KMGTPE\".charAt(exp - 1) + \"B\";\n+        return String.format(\"%.1f %s\", bytes / Math.pow(1024, exp), pre);\n+    }\n+}\n\ndiff --git a/src/main/java/stirling/software/SPDF/model/ApplicationProperties.java b/src/main/java/stirling/software/SPDF/model/ApplicationProperties.java\n--- a/src/main/java/stirling/software/SPDF/model/ApplicationProperties.java\n+++ b/src/main/java/stirling/software/SPDF/model/ApplicationProperties.java\n@@ -290,6 +290,7 @@ public static class System {\n         private Boolean disableSanitize;\n         private Boolean enableUrlToPDF;\n         private CustomPaths customPaths = new CustomPaths();\n+        private String fileUploadLimit;\n \n         public boolean isAnalyticsEnabled() {\n             return this.getEnableAnalytics() != null && this.getEnableAnalytics();",
    "output": "Upload File Size Limit (#3334)\n\n# Description of Changes\n\nThe change this PR aims to introduce is a setting for enabling an upload\nfile size limit. The author of the issue mentioned in this PR wanted\nthis feature as they themselves enforced a limit of 50MB file sizes on\ntheir NGINX configuration.\nThis was implemented by adding an entry to the\n[settings.yml.template](https://github.com/PedroPF1234/Stirling-PDF/blob/e52fc0e478e279169329b7e30782d57b2dbd8cbe/src/main/resources/settings.yml.template)\nfile. This entry has two sub-configurations in which you declare if the\napplication should enable upload file size limiting and then you declare\nthe limit itself.\n\nFor this to be available in code, a new field in the\n[System](https://github.com/PedroPF1234/Stirling-PDF/blob/e52fc0e478e279169329b7e30782d57b2dbd8cbe/src/main/java/stirling/software/SPDF/model/ApplicationProperties.java#L280)\nclass was added, one named `uploadLimit`.\n\nAfter that, inside the [AppConfig](url) class, a new thymeleaf bean was\ncreated, one called `uploadLimit`. This bean takes the values available\nin the `System` class and creates a `long` value representing the limit\nvalue. This value is interpreted as non-existent if it is `0`, otherwise\nit is the value in `bytes` of the upload limit.\n\nIn order to make this value available in the\n[common.html](https://github.com/PedroPF1234/Stirling-PDF/blob/e52fc0e478e279169329b7e30782d57b2dbd8cbe/src/main/resources/templates/fragments/common.html)\nfile, where the submitFile form is imported from, a new controller\n[GlobalUploadLimitWebController](https://github.com/PedroPF1234/Stirling-PDF/blob/e52fc0e478e279169329b7e30782d57b2dbd8cbe/src/main/java/stirling/software/SPDF/controller/web/GlobalUploadLimitWebController.java)\nwas created. This controller has the tag `ControllerAdvice` so that\nevery controller has the `ModelAttributes` defined within it. I am not\nsure if this was a good approach but upon first investigations, I\ncouldn't find another method to make these attributes available in every\nController, or template. If there is already a place like this in the\ncode with this specific purpose, please let me know so I can fix it.\n\nAfter making these attributes available, I updated the code in\n`common.html`to now display the upload limit if it is defined. This was\ndone with localization in mind.\n\nLastly, the\n[downloader.js](https://github.com/PedroPF1234/Stirling-PDF/blob/e52fc0e478e279169329b7e30782d57b2dbd8cbe/src/main/resources/static/js/downloader.js)\nand\n[fileInput.js](https://github.com/PedroPF1234/Stirling-PDF/blob/e52fc0e478e279169329b7e30782d57b2dbd8cbe/src/main/resources/static/js/fileInput.js)\nfiles to include logic to enforce the upload limit if it is defined.\n\nThe UI updates, when the upload limit is defined, are as so:\n<img width=\"708\" alt=\"image\"\nsrc=\"https://github.com/user-attachments/assets/4852fa10-2ec3-45cb-83e6-41a102f256d4\"\n/>\n\nWhen the limit is disabled, the page looks exactly as it did before any\nimplementation:\n<img width=\"707\" alt=\"image\"\nsrc=\"https://github.com/user-attachments/assets/21e5e810-ffdc-4a99-a16d-491aea103709\"\n/>\\\\\n\nThank you.\n\nCloses #2903\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [x] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [x] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [x] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [x] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details.\n\n---------\n\nCo-authored-by: Anthony Stirling <77850077+Frooodle@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java b/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java\n--- a/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java\n+++ b/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java\n@@ -45,6 +45,10 @@ public void disableEndpoint(String endpoint) {\n         }\n     }\n \n+    public Map<String, Boolean> getEndpointStatuses() {\n+        return endpointStatuses;\n+    }\n+\n     public boolean isEndpointEnabled(String endpoint) {\n         if (endpoint.startsWith(\"/\")) {\n             endpoint = endpoint.substring(1);\n\ndiff --git a/src/main/java/stirling/software/SPDF/config/EndpointInterceptor.java b/src/main/java/stirling/software/SPDF/config/EndpointInterceptor.java\n--- a/src/main/java/stirling/software/SPDF/config/EndpointInterceptor.java\n+++ b/src/main/java/stirling/software/SPDF/config/EndpointInterceptor.java\n@@ -23,7 +23,29 @@ public boolean preHandle(\n             HttpServletRequest request, HttpServletResponse response, Object handler)\n             throws Exception {\n         String requestURI = request.getRequestURI();\n-        if (!endpointConfiguration.isEndpointEnabled(requestURI)) {\n+        boolean isEnabled;\n+\n+        // Extract the specific endpoint name (e.g: /api/v1/general/remove-pages -> remove-pages)\n+        if (requestURI.contains(\"/api/v1\") && requestURI.split(\"/\").length > 4) {\n+\n+            String[] requestURIParts = requestURI.split(\"/\");\n+            String requestEndpoint;\n+\n+            // Endpoint: /api/v1/convert/pdf/img becomes pdf-to-img\n+            if (\"convert\".equals(requestURIParts[3]) && requestURIParts.length > 5) {\n+                requestEndpoint = requestURIParts[4] + \"-to-\" + requestURIParts[5];\n+            } else {\n+                requestEndpoint = requestURIParts[4];\n+            }\n+\n+            log.debug(\"Request endpoint: {}\", requestEndpoint);\n+            isEnabled = endpointConfiguration.isEndpointEnabled(requestEndpoint);\n+            log.debug(\"Is endpoint enabled: {}\", isEnabled);\n+        } else {\n+            isEnabled = endpointConfiguration.isEndpointEnabled(requestURI);\n+        }\n+\n+        if (!isEnabled) {\n             response.sendError(HttpServletResponse.SC_FORBIDDEN, \"This endpoint is disabled\");\n             return false;\n         }\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/api/SettingsController.java b/src/main/java/stirling/software/SPDF/controller/api/SettingsController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/SettingsController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/SettingsController.java\n@@ -1,17 +1,20 @@\n package stirling.software.SPDF.controller.api;\n \n import java.io.IOException;\n+import java.util.Map;\n \n import org.springframework.http.HttpStatus;\n import org.springframework.http.ResponseEntity;\n import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.PostMapping;\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestMapping;\n \n import io.swagger.v3.oas.annotations.Hidden;\n import io.swagger.v3.oas.annotations.tags.Tag;\n \n+import stirling.software.SPDF.config.EndpointConfiguration;\n import stirling.software.SPDF.config.InstallationPathConfig;\n import stirling.software.SPDF.model.ApplicationProperties;\n import stirling.software.SPDF.utils.GeneralUtils;\n@@ -23,9 +26,13 @@\n public class SettingsController {\n \n     private final ApplicationProperties applicationProperties;\n+    private final EndpointConfiguration endpointConfiguration;\n \n-    public SettingsController(ApplicationProperties applicationProperties) {\n+    public SettingsController(\n+            ApplicationProperties applicationProperties,\n+            EndpointConfiguration endpointConfiguration) {\n         this.applicationProperties = applicationProperties;\n+        this.endpointConfiguration = endpointConfiguration;\n     }\n \n     @PostMapping(\"/update-enable-analytics\")\n@@ -41,4 +48,10 @@ public ResponseEntity<String> updateApiKey(@RequestBody Boolean enabled) throws\n         applicationProperties.getSystem().setEnableAnalytics(enabled);\n         return ResponseEntity.ok(\"Updated\");\n     }\n+\n+    @GetMapping(\"/get-endpoints-status\")\n+    @Hidden\n+    public ResponseEntity<Map<String, Boolean>> getDisabledEndpoints() {\n+        return ResponseEntity.ok(endpointConfiguration.getEndpointStatuses());\n+    }\n }",
    "output": "Pipeline shows disabled endpoints fix (#2881) (#3282)\n\n# Description of Changes\n\nPreviously, the dropdown menu in the pipeline configuration displayed\nall endpoints, including disabled ones, and allowed API calls to them.\n\nChanges:\n\n- Updated EndpointInterceptor to correctly parse request URIs and match\nthem to corresponding endpoint names in settings.yml, ensuring disabled\nendpoints are blocked.\n\n- Added a new API endpoint in SettingsController to expose the\nendpointStatus map, allowing the frontend to check which endpoints are\ndisabled.\n\n- Updated pipeline.js to use this new API and hide disabled endpoints\nfrom the dropdown menu.\n\nTests:\n\n- Created a new Docker Compose setup using a custom settings.yml where\nall endpoints are disabled.\n\n- Implemented a test script to run this setup, send API requests to\ndisabled endpoints, and verify they are correctly blocked.\n\n[Bug Fix Video](https://youtu.be/L1z3jZh8z8E)\n\nCloses #2881\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [x] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details.\n\n---------\n\nCo-authored-by: Anthony Stirling <77850077+Frooodle@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/UserService.java b/src/main/java/stirling/software/SPDF/config/security/UserService.java\n--- a/src/main/java/stirling/software/SPDF/config/security/UserService.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/UserService.java\n@@ -475,6 +475,12 @@ public void syncCustomApiUser(String customApiKey) {\n \n     @Override\n     public long getTotalUsersCount() {\n-        return userRepository.count();\n+        // Count all users in the database\n+        long userCount = userRepository.count();\n+        // Exclude the internal API user from the count\n+        if (findByUsernameIgnoreCase(Role.INTERNAL_API_USER.getRoleId()).isPresent()) {\n+            userCount -= 1;\n+        }\n+        return userCount;\n     }\n }",
    "output": "Exclude Internal API User from Total User Count (#3299)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\n- **What was changed**:  \nModified the `getTotalUsersCount()` method in `UserService` to subtract\none user from the count if the internal API user is present in the\ndatabase. This ensures that the internal service account does not skew\nuser metrics.\n\n- **Why the change was made**:  \nTo prevent the internal API user (used for backend operations) from\nbeing included in total user statistics, which should reflect only real\nuser accounts.\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/model/ApplicationProperties.java b/src/main/java/stirling/software/SPDF/model/ApplicationProperties.java\n--- a/src/main/java/stirling/software/SPDF/model/ApplicationProperties.java\n+++ b/src/main/java/stirling/software/SPDF/model/ApplicationProperties.java\n@@ -394,6 +394,7 @@ public static class AutomaticallyGenerated {\n \n     // TODO: Remove post migration\n     @Data\n+    @Deprecated(since = \"0.45.0\")\n     public static class EnterpriseEdition {\n         private boolean enabled;\n         @ToString.Exclude private String key;",
    "output": "Deprecate `EnterpriseEdition` (#3291)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\n- **What was changed**:  \nAdded the `@Deprecated(since = \"0.45.0\")` annotation to the\n`EnterpriseEdition` inner class within `ApplicationProperties`.\n\n- **Why the change was made**:  \nThis class is marked for removal after the migration process.\nDeprecating it now provides a clear signal to developers and automated\ntools that this class should no longer be used, easing future\nmaintenance and cleanup.\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/EE/EEAppConfig.java b/src/main/java/stirling/software/SPDF/EE/EEAppConfig.java\n--- a/src/main/java/stirling/software/SPDF/EE/EEAppConfig.java\n+++ b/src/main/java/stirling/software/SPDF/EE/EEAppConfig.java\n@@ -11,6 +11,7 @@\n import stirling.software.SPDF.model.ApplicationProperties;\n import stirling.software.SPDF.model.ApplicationProperties.EnterpriseEdition;\n import stirling.software.SPDF.model.ApplicationProperties.Premium;\n+import stirling.software.SPDF.model.ApplicationProperties.Premium.ProFeatures.GoogleDrive;\n \n @Configuration\n @Order(Ordered.HIGHEST_PRECEDENCE)\n@@ -43,6 +44,17 @@ public boolean ssoAutoLogin() {\n         return applicationProperties.getPremium().getProFeatures().isSsoAutoLogin();\n     }\n \n+    @Bean(name = \"GoogleDriveEnabled\")\n+    public boolean googleDriveEnabled() {\n+        return runningProOrHigher()\n+                && applicationProperties.getPremium().getProFeatures().getGoogleDrive().isEnabled();\n+    }\n+\n+    @Bean(name = \"GoogleDriveConfig\")\n+    public GoogleDrive googleDriveConfig() {\n+        return applicationProperties.getPremium().getProFeatures().getGoogleDrive();\n+    }\n+\n     // TODO: Remove post migration\n     public void migrateEnterpriseSettingsToPremium(ApplicationProperties applicationProperties) {\n         EnterpriseEdition enterpriseEdition = applicationProperties.getEnterpriseEdition();\n\ndiff --git a/src/main/java/stirling/software/SPDF/model/ApplicationProperties.java b/src/main/java/stirling/software/SPDF/model/ApplicationProperties.java\n--- a/src/main/java/stirling/software/SPDF/model/ApplicationProperties.java\n+++ b/src/main/java/stirling/software/SPDF/model/ApplicationProperties.java\n@@ -430,6 +430,7 @@ public static class Premium {\n         public static class ProFeatures {\n             private boolean ssoAutoLogin;\n             private CustomMetadata customMetadata = new CustomMetadata();\n+            private GoogleDrive googleDrive = new GoogleDrive();\n \n             @Data\n             public static class CustomMetadata {\n@@ -448,6 +449,26 @@ public String getProducer() {\n                             : producer;\n                 }\n             }\n+\n+            @Data\n+            public static class GoogleDrive {\n+                private boolean enabled;\n+                private String clientId;\n+                private String apiKey;\n+                private String appId;\n+\n+                public String getClientId() {\n+                    return clientId == null || clientId.trim().isEmpty() ? \"\" : clientId;\n+                }\n+\n+                public String getApiKey() {\n+                    return apiKey == null || apiKey.trim().isEmpty() ? \"\" : apiKey;\n+                }\n+\n+                public String getAppId() {\n+                    return appId == null || appId.trim().isEmpty() ? \"\" : appId;\n+                }\n+            }\n         }\n \n         @Data",
    "output": "2946 feature request integrate file selector with google drive and onedrive (#3253)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n- Why the change was made\n- Any challenges encountered\n\n\n- Added google drive integration config to premium settings in\nsetting.yml\n- Added google drive button to file picker when enabled \n- Picker appears and allows users to load pdfs and other files into the\ntools\n\n\nCloses #(2946)\n\n---\n\n### Documentation\n[Docs Update\nPR](https://github.com/Stirling-Tools/Stirling-Tools.github.io/pull/67)\n\n---------\n\nCo-authored-by: Anthony Stirling <77850077+Frooodle@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/oauth2/OAuth2Configuration.java b/src/main/java/stirling/software/SPDF/config/security/oauth2/OAuth2Configuration.java\n--- a/src/main/java/stirling/software/SPDF/config/security/oauth2/OAuth2Configuration.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/oauth2/OAuth2Configuration.java\n@@ -186,7 +186,6 @@ private Optional<ClientRegistration> oidcClientRegistration() {\n                         oauth.getClientSecret(),\n                         oauth.getScopes(),\n                         UsernameAttribute.valueOf(oauth.getUseAsUsername().toUpperCase()),\n-                        oauth.getLogoutUrl(),\n                         null,\n                         null,\n                         null);\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/web/OtherWebController.java b/src/main/java/stirling/software/SPDF/controller/web/OtherWebController.java\n--- a/src/main/java/stirling/software/SPDF/controller/web/OtherWebController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/web/OtherWebController.java\n@@ -122,7 +122,8 @@ public List<String> getAvailableTesseractLanguages() {\n         return Arrays.stream(files)\n                 .filter(file -> file.getName().endsWith(\".traineddata\"))\n                 .map(file -> file.getName().replace(\".traineddata\", \"\"))\n-                .filter(lang -> !lang.equalsIgnoreCase(\"osd\")).sorted()\n+                .filter(lang -> !lang.equalsIgnoreCase(\"osd\"))\n+                .sorted()\n                 .toList();\n     }\n \n\ndiff --git a/src/main/java/stirling/software/SPDF/model/ApplicationProperties.java b/src/main/java/stirling/software/SPDF/model/ApplicationProperties.java\n--- a/src/main/java/stirling/software/SPDF/model/ApplicationProperties.java\n+++ b/src/main/java/stirling/software/SPDF/model/ApplicationProperties.java\n@@ -230,7 +230,6 @@ public static class OAUTH2 {\n             private Collection<String> scopes = new ArrayList<>();\n             private String provider;\n             private Client client = new Client();\n-            private String logoutUrl;\n \n             public void setScopes(String scopes) {\n                 List<String> scopesList =\n\ndiff --git a/src/main/java/stirling/software/SPDF/model/provider/GitHubProvider.java b/src/main/java/stirling/software/SPDF/model/provider/GitHubProvider.java\n--- a/src/main/java/stirling/software/SPDF/model/provider/GitHubProvider.java\n+++ b/src/main/java/stirling/software/SPDF/model/provider/GitHubProvider.java\n@@ -29,7 +29,6 @@ public GitHubProvider(\n                 clientSecret,\n                 scopes,\n                 useAsUsername != null ? useAsUsername : UsernameAttribute.LOGIN,\n-                null,\n                 AUTHORIZATION_URI,\n                 TOKEN_URI,\n                 USER_INFO_URI);\n\ndiff --git a/src/main/java/stirling/software/SPDF/model/provider/GoogleProvider.java b/src/main/java/stirling/software/SPDF/model/provider/GoogleProvider.java\n--- a/src/main/java/stirling/software/SPDF/model/provider/GoogleProvider.java\n+++ b/src/main/java/stirling/software/SPDF/model/provider/GoogleProvider.java\n@@ -30,7 +30,6 @@ public GoogleProvider(\n                 clientSecret,\n                 scopes,\n                 useAsUsername,\n-                null,\n                 AUTHORIZATION_URI,\n                 TOKEN_URI,\n                 USER_INFO_URI);\n\ndiff --git a/src/main/java/stirling/software/SPDF/model/provider/KeycloakProvider.java b/src/main/java/stirling/software/SPDF/model/provider/KeycloakProvider.java\n--- a/src/main/java/stirling/software/SPDF/model/provider/KeycloakProvider.java\n+++ b/src/main/java/stirling/software/SPDF/model/provider/KeycloakProvider.java\n@@ -29,7 +29,6 @@ public KeycloakProvider(\n                 useAsUsername,\n                 null,\n                 null,\n-                null,\n                 null);\n     }\n \n\ndiff --git a/src/main/java/stirling/software/SPDF/model/provider/Provider.java b/src/main/java/stirling/software/SPDF/model/provider/Provider.java\n--- a/src/main/java/stirling/software/SPDF/model/provider/Provider.java\n+++ b/src/main/java/stirling/software/SPDF/model/provider/Provider.java\n@@ -25,7 +25,6 @@ public class Provider {\n     private String clientSecret;\n     private Collection<String> scopes;\n     private UsernameAttribute useAsUsername;\n-    private String logoutUrl;\n     private String authorizationUri;\n     private String tokenUri;\n     private String userInfoUri;\n@@ -38,7 +37,6 @@ public Provider(\n             String clientSecret,\n             Collection<String> scopes,\n             UsernameAttribute useAsUsername,\n-            String logoutUrl,\n             String authorizationUri,\n             String tokenUri,\n             String userInfoUri) {\n@@ -50,7 +48,6 @@ public Provider(\n         this.scopes = scopes == null ? new ArrayList<>() : scopes;\n         this.useAsUsername =\n                 useAsUsername != null ? validateUsernameAttribute(useAsUsername) : EMAIL;\n-        this.logoutUrl = logoutUrl;\n         this.authorizationUri = authorizationUri;\n         this.tokenUri = tokenUri;\n         this.userInfoUri = userInfoUri;",
    "output": "Removing redundant logoutUrl from oauth (#3281)\n\nRemoved redundant logoutUrl from oauth code\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [x] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [x] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [x] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [x] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [x] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/UserService.java b/src/main/java/stirling/software/SPDF/config/security/UserService.java\n--- a/src/main/java/stirling/software/SPDF/config/security/UserService.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/UserService.java\n@@ -205,6 +205,7 @@ public void saveUser(String username, String password)\n         user.setPassword(passwordEncoder.encode(password));\n         user.setEnabled(true);\n         user.setAuthenticationType(AuthenticationType.WEB);\n+        user.addAuthority(new Authority(Role.USER.getRoleId(), user));\n         userRepository.save(user);\n         databaseService.exportDatabase();\n     }\n@@ -230,6 +231,22 @@ public void saveUser(String username, String password, String role)\n         saveUser(username, password, role, false);\n     }\n \n+    public void saveUser(String username, String password, boolean firstLogin, boolean enabled)\n+            throws IllegalArgumentException, SQLException, UnsupportedProviderException {\n+        if (!isUsernameValid(username)) {\n+            throw new IllegalArgumentException(getInvalidUsernameMessage());\n+        }\n+        User user = new User();\n+        user.setUsername(username);\n+        user.setPassword(passwordEncoder.encode(password));\n+        user.addAuthority(new Authority(Role.USER.getRoleId(), user));\n+        user.setEnabled(enabled);\n+        user.setAuthenticationType(AuthenticationType.WEB);\n+        user.setFirstLogin(firstLogin);\n+        userRepository.save(user);\n+        databaseService.exportDatabase();\n+    }\n+\n     public void deleteUser(String username) {\n         Optional<User> userOpt = findByUsernameIgnoreCase(username);\n         if (userOpt.isPresent()) {\n@@ -352,6 +369,7 @@ public boolean isUsernameValid(String username) {\n \n         List<String> notAllowedUserList = new ArrayList<>();\n         notAllowedUserList.add(\"ALL_USERS\".toLowerCase());\n+        notAllowedUserList.add(\"anonymoususer\");\n         boolean notAllowedUser = notAllowedUserList.contains(username.toLowerCase());\n         return (isValidSimpleUsername || isValidEmail) && !notAllowedUser;\n     }",
    "output": "Add default authority assignment and enhanced user creation method (#3266)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\n- **What was changed**:\n- Automatically assign the `USER` role to newly created users in the\n`saveUser(String username, String password)` method.\n- Introduced a new `saveUser(String username, String password, boolean\nfirstLogin, boolean enabled)` method to allow setting `firstLogin` and\n`enabled` flags at creation time.\n- Added `\"anonymoususer\"` to the list of restricted usernames in\n`isUsernameValid`.\n\n- **Why the change was made**:\n- Ensures users have proper default roles assigned to avoid permission\nissues post-creation.\n- Provides more flexibility for user creation in scenarios like\npre-provisioning or scripting users with specific states.\n- Prevents the creation of potentially reserved or insecure usernames\nlike `anonymoususer`.\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/database/DatabaseService.java b/src/main/java/stirling/software/SPDF/config/security/database/DatabaseService.java\n--- a/src/main/java/stirling/software/SPDF/config/security/database/DatabaseService.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/database/DatabaseService.java\n@@ -17,6 +17,7 @@\n import java.util.ArrayList;\n import java.util.Comparator;\n import java.util.List;\n+import java.util.stream.Collectors;\n \n import javax.sql.DataSource;\n \n@@ -169,7 +170,7 @@ public void exportDatabase() {\n         List<FileInfo> filteredBackupList =\n                 this.getBackupList().stream()\n                         .filter(backup -> !backup.getFileName().startsWith(BACKUP_PREFIX + \"user_\"))\n-                        .toList();\n+                        .collect(Collectors.toList());\n \n         if (filteredBackupList.size() > 5) {\n             deleteOldestBackup(filteredBackupList);",
    "output": "🔧 Replace toList() with collect(Collectors.toList()) (#3259)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\n- Replaced the usage of `toList()` with `collect(Collectors.toList())`\nin `DatabaseService.java`.\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/security/GetInfoOnPDF.java b/src/main/java/stirling/software/SPDF/controller/api/security/GetInfoOnPDF.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/security/GetInfoOnPDF.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/security/GetInfoOnPDF.java\n@@ -126,7 +126,8 @@ public static boolean checkForStandard(PDDocument document, String standardKeywo\n     @Operation(summary = \"Summary here\", description = \"desc. Input:PDF Output:JSON Type:SISO\")\n     public ResponseEntity<byte[]> getPdfInfo(@ModelAttribute PDFFile request) throws IOException {\n         MultipartFile inputFile = request.getFileInput();\n-        try (PDDocument pdfBoxDoc = pdfDocumentFactory.load(inputFile); ) {\n+        boolean readonly = true;\n+        try (PDDocument pdfBoxDoc = pdfDocumentFactory.load(inputFile, readonly); ) {\n             ObjectMapper objectMapper = new ObjectMapper();\n             ObjectNode jsonOutput = objectMapper.createObjectNode();\n ",
    "output": "Change PDF load Get Info on PDF to readonly (#3254)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\n- Fixed the behavior, that the metadata of a pdf was changed when using\nthe \"Get info on PDF\" function. Notably the Producer and\nModificationDate are updated currently, wich is not in line with the\ndescription \"Get Info\".\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [x] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details.\n\nCo-authored-by: maxi322 <maxi322@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/MergeController.java b/src/main/java/stirling/software/SPDF/controller/api/MergeController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/MergeController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/MergeController.java\n@@ -147,10 +147,10 @@ public ResponseEntity<byte[]> mergePdfs(@ModelAttribute MergePdfsRequest form)\n                 filesToDelete.add(tempFile); // Add temp file to the list for later deletion\n                 mergerUtility.addSource(tempFile); // Add source file to the merger utility\n             }\n-            \n+\n             mergedTempFile = Files.createTempFile(\"merged-\", \".pdf\").toFile();\n             mergerUtility.setDestinationFileName(mergedTempFile.getAbsolutePath());\n-            \n+\n             mergerUtility.mergeDocuments(\n                     pdfDocumentFactory.getStreamCacheFunction(totalSize)); // Merge the documents\n \n@@ -189,14 +189,14 @@ public ResponseEntity<byte[]> mergePdfs(@ModelAttribute MergePdfsRequest form)\n             log.error(\"Error in merge pdf process\", ex);\n             throw ex;\n         } finally {\n-        \tif (mergedDocument != null) {\n+            if (mergedDocument != null) {\n                 mergedDocument.close(); // Close the merged document\n             }\n             for (File file : filesToDelete) {\n                 if (file != null) {\n                     Files.deleteIfExists(file.toPath()); // Delete temporary files\n                 }\n-            } \n+            }\n             if (mergedTempFile != null) {\n                 Files.deleteIfExists(mergedTempFile.toPath());\n             }",
    "output": "Python fix for new release (#3247)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\n- What was changed\n- Why the change was made\n- Any challenges encountered\n\nCloses #(issue_number)\n\n---\n\n## Checklist\n\n### General\n\n- [ ] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [ ] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [ ] I have performed a self-review of my own code\n- [ ] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details.\n\n---------\n\nCo-authored-by: a <a>\nCo-authored-by: pixeebot[bot] <104101892+pixeebot[bot]@users.noreply.github.com>\nCo-authored-by: Connor Yoh <con.yoh13@gmail.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java b/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java\n@@ -864,4 +864,4 @@ private int incrementOptimizeLevel(int currentLevel, long currentSize, long targ\n         }\n         return Math.min(9, currentLevel + 1);\n     }\n-}\n\\ No newline at end of file\n+}",
    "output": "🤖 format everything with pre-commit by <stirlingbot> (#3220)\n\nAuto-generated by [create-pull-request][1] with **stirlingbot**\n\n[1]: https://github.com/peter-evans/create-pull-request\n\nSigned-off-by: stirlingbot[bot] <195170888+stirlingbot[bot]@users.noreply.github.com>\nCo-authored-by: stirlingbot[bot] <195170888+stirlingbot[bot]@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/UserController.java b/src/main/java/stirling/software/SPDF/controller/api/UserController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/UserController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/UserController.java\n@@ -333,7 +333,7 @@ public RedirectView deleteUser(\n         }\n         // Invalidate all sessions before deleting the user\n         List<SessionInformation> sessionsInformations =\n-                sessionRegistry.getAllSessions(authentication.getPrincipal(), false);\n+                sessionRegistry.getAllSessions(username, false);\n         for (SessionInformation sessionsInformation : sessionsInformations) {\n             sessionRegistry.expireSession(sessionsInformation.getSessionId());\n             sessionRegistry.removeSessionInformation(sessionsInformation.getSessionId());",
    "output": "Fix: Session of admin is destroyed instead of the deleted user (#3218)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\n- Replaced `authentication.getPrincipal()` with `username` in the\n`sessionRegistry.getAllSessions(...)` call inside the `deleteUser`\nmethod of `UserController`.\n- The original implementation incorrectly used the currently\nauthenticated principal to fetch sessions, which could lead to only\ninvalidating the sessions of the user performing the deletion — not the\ntarget user being deleted.\n- By using the `username` parameter directly, this ensures **all\nsessions of the user being deleted are properly expired and removed**.\n\nCloses #(issue_number)\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/web/GeneralWebController.java b/src/main/java/stirling/software/SPDF/controller/web/GeneralWebController.java\n--- a/src/main/java/stirling/software/SPDF/controller/web/GeneralWebController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/web/GeneralWebController.java\n@@ -13,7 +13,6 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.core.io.Resource;\n import org.springframework.core.io.ResourceLoader;\n-import org.springframework.core.io.support.ResourcePatternUtils;\n import org.springframework.stereotype.Controller;\n import org.springframework.ui.Model;\n import org.springframework.web.bind.annotation.GetMapping;\n@@ -31,6 +30,7 @@\n import stirling.software.SPDF.controller.api.pipeline.UserServiceInterface;\n import stirling.software.SPDF.model.SignatureFile;\n import stirling.software.SPDF.service.SignatureService;\n+import stirling.software.SPDF.utils.GeneralUtils;\n \n @Controller\n @Tag(name = \"General\", description = \"General APIs\")\n@@ -241,8 +241,7 @@ private List<FontResource> getFontNames() {\n     private List<FontResource> getFontNamesFromLocation(String locationPattern) {\n         try {\n             Resource[] resources =\n-                    ResourcePatternUtils.getResourcePatternResolver(resourceLoader)\n-                            .getResources(locationPattern);\n+                    GeneralUtils.getResourcesFromLocationPattern(locationPattern, resourceLoader);\n             return Arrays.stream(resources)\n                     .map(\n                             resource -> {\n\ndiff --git a/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java b/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java\n--- a/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java\n+++ b/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java\n@@ -15,6 +15,9 @@\n import java.util.List;\n import java.util.UUID;\n \n+import org.springframework.core.io.Resource;\n+import org.springframework.core.io.ResourceLoader;\n+import org.springframework.core.io.support.ResourcePatternUtils;\n import org.springframework.web.multipart.MultipartFile;\n \n import com.fathzer.soft.javaluator.DoubleEvaluator;\n@@ -73,6 +76,19 @@ public static String convertToFileName(String name) {\n         return safeName;\n     }\n \n+    // Get resources from a location pattern\n+    public static Resource[] getResourcesFromLocationPattern(\n+            String locationPattern, ResourceLoader resourceLoader) throws Exception {\n+        // Normalize the path for file resources\n+        if (locationPattern.startsWith(\"file:\")) {\n+            String rawPath = locationPattern.substring(5).replace(\"\\\\*\", \"\").replace(\"/*\", \"\");\n+            Path normalizePath = Paths.get(rawPath).normalize();\n+            locationPattern = \"file:\" + normalizePath.toString().replace(\"\\\\\", \"/\") + \"/*\";\n+        }\n+        return ResourcePatternUtils.getResourcePatternResolver(resourceLoader)\n+                .getResources(locationPattern);\n+    }\n+\n     public static boolean isValidURL(String urlStr) {\n         try {\n             Urls.create(",
    "output": "Normalize File Path for Font Resource Loading (#3179)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\n- Added logic to normalize file paths when retrieving font resources.\n- Ensured that file paths starting with `file:` are properly sanitized\nand formatted to prevent inconsistencies.\n- Replaced `\\*` and `/*` in the path to ensure proper pattern matching.\n- Used `Paths.get(rawPath).normalize()` to avoid potential path\ntraversal issues.\n- Updated `locationPattern` to ensure it uses a consistent format across\ndifferent operating systems.\n\nThis change improves reliability in loading fonts from local file paths\nand prevents potential errors related to improperly formatted paths.\n\nCloses #3178\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/SPDFApplication.java b/src/main/java/stirling/software/SPDF/SPDFApplication.java\n--- a/src/main/java/stirling/software/SPDF/SPDFApplication.java\n+++ b/src/main/java/stirling/software/SPDF/SPDFApplication.java\n@@ -37,6 +37,7 @@ public class SPDFApplication {\n \n     private static String serverPortStatic;\n     private static String baseUrlStatic;\n+    private static String contextPathStatic;\n \n     private final Environment env;\n     private final ApplicationProperties applicationProperties;\n@@ -45,6 +46,9 @@ public class SPDFApplication {\n     @Value(\"${baseUrl:http://localhost}\")\n     private String baseUrl;\n \n+    @Value(\"${server.servlet.context-path:/}\")\n+    private String contextPath;\n+\n     public SPDFApplication(\n             Environment env,\n             ApplicationProperties applicationProperties,\n@@ -138,7 +142,8 @@ public static void main(String[] args) throws IOException, InterruptedException\n     @PostConstruct\n     public void init() {\n         baseUrlStatic = this.baseUrl;\n-        String url = baseUrl + \":\" + getStaticPort();\n+        contextPathStatic = this.contextPath;\n+        String url = baseUrl + \":\" + getStaticPort() + contextPath;\n         if (webBrowser != null\n                 && Boolean.parseBoolean(System.getProperty(\"STIRLING_PDF_DESKTOP_UI\", \"false\"))) {\n             webBrowser.initWebUI(url);\n@@ -195,7 +200,7 @@ public void cleanup() {\n \n     private static void printStartupLogs() {\n         log.info(\"Stirling-PDF Started.\");\n-        String url = baseUrlStatic + \":\" + getStaticPort();\n+        String url = baseUrlStatic + \":\" + getStaticPort() + contextPathStatic;\n         log.info(\"Navigate to {}\", url);\n     }\n \n@@ -220,4 +225,8 @@ public static String getStaticBaseUrl() {\n     public static String getStaticPort() {\n         return serverPortStatic;\n     }\n+\n+    public static String getStaticContextPath() {\n+        return contextPathStatic;\n+    }\n }\n\ndiff --git a/src/main/java/stirling/software/SPDF/config/AppConfig.java b/src/main/java/stirling/software/SPDF/config/AppConfig.java\n--- a/src/main/java/stirling/software/SPDF/config/AppConfig.java\n+++ b/src/main/java/stirling/software/SPDF/config/AppConfig.java\n@@ -8,6 +8,7 @@\n import java.util.Properties;\n import java.util.function.Predicate;\n \n+import org.springframework.beans.factory.annotation.Value;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.context.annotation.Bean;\n@@ -78,6 +79,11 @@ public List<String> languages() {\n         return applicationProperties.getUi().getLanguages();\n     }\n \n+    @Bean\n+    public String contextPath(@Value(\"${server.servlet.context-path}\") String contextPath) {\n+        return contextPath;\n+    }\n+\n     @Bean(name = \"navBarText\")\n     public String navBarText() {\n         String defaultNavBar =",
    "output": "Fix: Context Path Handling and Static Asset Loading Improvements (#3198)\n\n# Description of Changes\n\n### Summary\nThis PR improves how Stirling-PDF handles the `context-path`\nconfiguration in both backend and frontend components. It ensures proper\nURL generation when a custom `context-path` is set in the application\nproperties. Additionally, it fixes static asset loading issues related\nto relative paths.\n\n### Changes Implemented:\n- **Backend Enhancements:**\n- Introduced `contextPathStatic` as a static variable in\n`SPDFApplication.java` to store the configured\n`server.servlet.context-path`.\n- Modified log outputs and UI initialization URLs to include\n`contextPathStatic`.\n- Registered `contextPath` as a Spring Bean in `AppConfig.java` to make\nit accessible in templates.\n\n- **Frontend Fixes:**\n- Updated JavaScript files (`downloader.js`, `home.js`) to dynamically\nretrieve and use `contextPath`.\n- Adjusted Thymeleaf template files (`navbar.html`, `home.html`,\n`merge-pdfs.html`) to reference `contextPath` correctly.\n- Fixed incorrect static file paths (`pdf.worker.mjs`, `pdf.mjs`) by\nreplacing absolute paths (`/`) with relative ones (`./`).\n\n### Why These Changes?\n- Fixes issues where deployments under subpaths (e.g.,\n`example.com/stirling-pdf/`) resulted in incorrect asset and navigation\nlinks.\n- Ensures compatibility with different deployment configurations where\n`context-path` is not `/`.\n\n### Challenges Encountered\n- Ensuring all JavaScript and template references were correctly updated\nto use `contextPath` dynamically.\n- Maintaining backward compatibility for deployments that use `/` as the\ncontext path.\n\nCloses #3193 #3181\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/RotationController.java b/src/main/java/stirling/software/SPDF/controller/api/RotationController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/RotationController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/RotationController.java\n@@ -43,6 +43,12 @@ public ResponseEntity<byte[]> rotatePDF(@ModelAttribute RotatePDFRequest request\n             throws IOException {\n         MultipartFile pdfFile = request.getFileInput();\n         Integer angle = request.getAngle();\n+\n+        // Validate the angle is a multiple of 90\n+        if (angle % 90 != 0) {\n+            throw new IllegalArgumentException(\"Angle must be a multiple of 90\");\n+        }\n+\n         // Load the PDF document\n         PDDocument document = pdfDocumentFactory.load(request);\n \n\ndiff --git a/src/test/java/stirling/software/SPDF/controller/api/RotationControllerTest.java b/src/test/java/stirling/software/SPDF/controller/api/RotationControllerTest.java\n--- a/src/test/java/stirling/software/SPDF/controller/api/RotationControllerTest.java\n+++ b/src/test/java/stirling/software/SPDF/controller/api/RotationControllerTest.java\n@@ -0,0 +1,74 @@\n+package stirling.software.SPDF.controller.api;\n+\n+import org.apache.pdfbox.pdmodel.PDDocument;\n+import org.apache.pdfbox.pdmodel.PDPage;\n+import java.io.IOException;\n+import org.apache.pdfbox.pdmodel.PDPageTree;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.mock.web.MockMultipartFile;\n+import stirling.software.SPDF.service.CustomPDFDocumentFactory;\n+import stirling.software.SPDF.model.api.general.RotatePDFRequest;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class RotationControllerTest {\n+\n+    @Mock private CustomPDFDocumentFactory pdfDocumentFactory;\n+\n+    @InjectMocks private RotationController rotationController;\n+\n+    @Test\n+    public void testRotatePDF() throws IOException {\n+        // Create a mock file\n+        MockMultipartFile mockFile =\n+                new MockMultipartFile(\"file\", \"test.pdf\", \"application/pdf\", new byte[] {1, 2, 3});\n+        RotatePDFRequest request = new RotatePDFRequest();\n+        request.setFileInput(mockFile);\n+        request.setAngle(90);\n+\n+        PDDocument mockDocument = mock(PDDocument.class);\n+        PDPageTree mockPages = mock(PDPageTree.class);\n+        PDPage mockPage = mock(PDPage.class);\n+\n+        when(pdfDocumentFactory.load(request)).thenReturn(mockDocument);\n+        when(mockDocument.getPages()).thenReturn(mockPages);\n+        when(mockPages.iterator())\n+                .thenReturn(java.util.Collections.singletonList(mockPage).iterator());\n+        when(mockPage.getRotation()).thenReturn(0);\n+\n+        // Act\n+        ResponseEntity<byte[]> response = rotationController.rotatePDF(request);\n+\n+        // Assert\n+        verify(mockPage).setRotation(90);\n+        assertNotNull(response);\n+        assertEquals(200, response.getStatusCode().value());\n+    }\n+\n+    @Test\n+    public void testRotatePDFInvalidAngle() throws IOException {\n+        // Create a mock file\n+        MockMultipartFile mockFile =\n+                new MockMultipartFile(\"file\", \"test.pdf\", \"application/pdf\", new byte[] {1, 2, 3});\n+        RotatePDFRequest request = new RotatePDFRequest();\n+        request.setFileInput(mockFile);\n+        request.setAngle(45); // Invalid angle\n+\n+        // Act & Assert: Controller direkt aufrufen und Exception erwarten\n+        IllegalArgumentException exception =\n+                assertThrows(\n+                        IllegalArgumentException.class,\n+                        () -> rotationController.rotatePDF(request));\n+        assertEquals(\"Angle must be a multiple of 90\", exception.getMessage());\n+    }\n+}",
    "output": "Add: Validation for rotation angle and create unit tests for RotationController (#3162)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\n- What was changed\n- Why the change was made\n- Any challenges encountered\n\nCloses #(issue_number)\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [x] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java b/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java\n@@ -209,7 +209,7 @@ private void compressImagesInPDF(Path pdfFile, double scaleFactor, float jpegQua\n                     // First get the actual size of the original image by encoding it to the chosen\n                     // format\n                     ByteArrayOutputStream originalImageStream = new ByteArrayOutputStream();\n-                    if (format.equals(\"jpeg\")) {\n+                    if (\"jpeg\".equals(format)) {\n                         // Get the best available JPEG writer (prioritizes TwelveMonkeys if\n                         // available)\n                         Iterator<ImageWriter> writers = ImageIO.getImageWritersByFormatName(\"jpeg\");\n@@ -252,7 +252,7 @@ private void compressImagesInPDF(Path pdfFile, double scaleFactor, float jpegQua\n \n                     // Now compress the scaled image\n                     ByteArrayOutputStream compressedImageStream = new ByteArrayOutputStream();\n-                    if (format.equals(\"jpeg\")) {\n+                    if (\"jpeg\".equals(format)) {\n                         Iterator<ImageWriter> writers = ImageIO.getImageWritersByFormatName(format);\n                         if (writers.hasNext()) {\n                             ImageWriter writer = writers.next();\n@@ -338,10 +338,10 @@ private void compressImagesInPDF(Path pdfFile, double scaleFactor, float jpegQua\n                     compressedImages,\n                     skippedImages);\n             log.info(\n-                    \"Total original image size: {}, compressed: {} (reduced by {:.1f}%)\",\n+                    \"Total original image size: {}, compressed: {} (reduced by {}%)\",\n                     GeneralUtils.formatBytes(totalOriginalBytes),\n                     GeneralUtils.formatBytes(totalCompressedBytes),\n-                    overallImageReduction);\n+                    String.format(\"%.1f\", overallImageReduction));\n \n             // Save the document\n             log.info(\"Saving compressed PDF to {}\", pdfFile.toString());\n@@ -351,10 +351,10 @@ private void compressImagesInPDF(Path pdfFile, double scaleFactor, float jpegQua\n             long compressedFileSize = Files.size(pdfFile);\n             double overallReduction = 100.0 - ((compressedFileSize * 100.0) / originalFileSize);\n             log.info(\n-                    \"Overall PDF compression: {} → {} (reduced by {:.1f}%)\",\n+                    \"Overall PDF compression: {} → {} (reduced by {}%)\",\n                     GeneralUtils.formatBytes(originalFileSize),\n                     GeneralUtils.formatBytes(compressedFileSize),\n-                    overallReduction);\n+                    String.format(\"%.1f\", overallReduction));\n         }\n     }\n \n@@ -477,8 +477,8 @@ public ResponseEntity<byte[]> optimizePdf(@ModelAttribute OptimizePdfRequest req\n                     long postQpdfSize = Files.size(tempOutputFile);\n                     double qpdfReduction = 100.0 - ((postQpdfSize * 100.0) / preQpdfSize);\n                     log.info(\n-                            \"Post-QPDF file size: {} (reduced by {:.1f}%)\",\n-                            GeneralUtils.formatBytes(postQpdfSize), qpdfReduction);\n+                            \"Post-QPDF file size: {} (reduced by {}%)\",\n+                            GeneralUtils.formatBytes(postQpdfSize), String.format(\"%.1f\", qpdfReduction));\n \n                 } else {\n                     tempOutputFile = tempInputFile;",
    "output": "Fix: string comparison and formatting inconsistencies in `CompressController` (#3168)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\n- Replaced `format.equals(\"jpeg\")` with `\"jpeg\".equals(format)` to\nprevent potential `NullPointerException`\n- Standardized percentage reduction logging by formatting values before\npassing them into the log statement\n- Fixed inconsistent formatting in log messages by replacing `{:.1f}%`\nwith pre-formatted string values\n\n`63.32 MB → 61.77 MB (reduced by {:.1f}%)` -> `63.32 MB → 61.77 MB\n(reduced by 2.5%)`\n\nThese changes improve code robustness and ensure consistent logging\noutput.\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/utils/FileInfo.java b/src/main/java/stirling/software/SPDF/utils/FileInfo.java\n--- a/src/main/java/stirling/software/SPDF/utils/FileInfo.java\n+++ b/src/main/java/stirling/software/SPDF/utils/FileInfo.java\n@@ -4,6 +4,7 @@\n import java.nio.file.Paths;\n import java.time.LocalDateTime;\n import java.time.format.DateTimeFormatter;\n+import java.util.Locale;\n \n import lombok.AllArgsConstructor;\n import lombok.Data;\n@@ -27,11 +28,11 @@ public Path getFilePathAsPath() {\n     // Formats the file size into a human-readable string.\n     public String getFormattedFileSize() {\n         if (fileSize >= 1024 * 1024 * 1024) {\n-            return String.format(\"%.2f GB\", fileSize / (1024.0 * 1024 * 1024));\n+            return String.format(Locale.US, \"%.2f GB\", fileSize / (1024.0 * 1024 * 1024));\n         } else if (fileSize >= 1024 * 1024) {\n-            return String.format(\"%.2f MB\", fileSize / (1024.0 * 1024));\n+            return String.format(Locale.US, \"%.2f MB\", fileSize / (1024.0 * 1024));\n         } else if (fileSize >= 1024) {\n-            return String.format(\"%.2f KB\", fileSize / 1024.0);\n+            return String.format(Locale.US, \"%.2f KB\", fileSize / 1024.0);\n         } else {\n             return String.format(\"%d Bytes\", fileSize);\n         }\n\ndiff --git a/src/test/java/stirling/software/SPDF/utils/FileInfoTest.java b/src/test/java/stirling/software/SPDF/utils/FileInfoTest.java\n--- a/src/test/java/stirling/software/SPDF/utils/FileInfoTest.java\n+++ b/src/test/java/stirling/software/SPDF/utils/FileInfoTest.java\n@@ -0,0 +1,32 @@\n+package stirling.software.SPDF.utils;\n+\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.CsvSource;\n+\n+import java.time.LocalDateTime;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class FileInfoTest {\n+\n+    @ParameterizedTest(name = \"{index}: fileSize={0}\")\n+    @CsvSource({\n+            \"0, '0 Bytes'\",\n+            \"1023, '1023 Bytes'\",\n+            \"1024, '1.00 KB'\",\n+            \"1048575, '1024.00 KB'\", // Do we really want this as result?\n+            \"1048576, '1.00 MB'\",\n+            \"1073741823, '1024.00 MB'\", // Do we really want this as result?\n+            \"1073741824, '1.00 GB'\"\n+    })\n+    void testGetFormattedFileSize(long fileSize, String expectedFormattedSize) {\n+        FileInfo fileInfo = new FileInfo(\n+                \"example.txt\",\n+                \"/path/to/example.txt\",\n+                LocalDateTime.now(),\n+                fileSize,\n+                LocalDateTime.now().minusDays(1));\n+\n+        assertEquals(expectedFormattedSize, fileInfo.getFormattedFileSize());\n+    }\n+}",
    "output": "Add unit test for FileInfo.getFormattedFileSize (#3132)\n\n# Description of Changes\n\nAdd Unit Test for FileInfo.getFormattedFileSize\n\nCloses #3089\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [x] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [x] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/model/UsernameAttribute.java b/src/main/java/stirling/software/SPDF/model/UsernameAttribute.java\n--- a/src/main/java/stirling/software/SPDF/model/UsernameAttribute.java\n+++ b/src/main/java/stirling/software/SPDF/model/UsernameAttribute.java\n@@ -4,10 +4,12 @@\n \n @Getter\n public enum UsernameAttribute {\n+    MAIL(\"mail\"),\n     EMAIL(\"email\"),\n     LOGIN(\"login\"),\n     PROFILE(\"profile\"),\n     NAME(\"name\"),\n+    UID(\"uid\"),\n     USERNAME(\"username\"),\n     NICKNAME(\"nickname\"),\n     GIVEN_NAME(\"given_name\"),",
    "output": "New Claim Attributes `mail` & `uid` (#3154)\n\n# Description of Changes\n\nAdded new claims to `UsernameAttributes`:\n- `mail`\n- `uid`\n\nCloses #3115 \n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [x] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [x] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [x] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [x] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertWebsiteToPDF.java b/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertWebsiteToPDF.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertWebsiteToPDF.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertWebsiteToPDF.java\n@@ -72,7 +72,7 @@ public ResponseEntity<byte[]> urlToPdf(@ModelAttribute UrlToPdfRequest request)\n             List<String> command = new ArrayList<>();\n             command.add(runtimePathConfig.getWeasyPrintPath());\n             command.add(URL);\n-            command.add(\"--pdf-forms\"); \n+            command.add(\"--pdf-forms\");\n             command.add(tempOutputFile.toString());\n \n             ProcessExecutorResult returnCode =\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java b/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java\n@@ -203,7 +203,7 @@ private void compressImagesInPDF(Path pdfFile, double scaleFactor, float jpegQua\n \n                     // Choose appropriate format and compression\n                     String format = bufferedImage.getColorModel().hasAlpha() ? \"png\" : \"jpeg\";\n-                    \n+\n                     // First get the actual size of the original image by encoding it to the chosen format\n                     ByteArrayOutputStream originalImageStream = new ByteArrayOutputStream();\n                     if (format.equals(\"jpeg\")) {\n@@ -365,7 +365,7 @@ private double getScaleFactorForLevel(int optimizeLevel) {\n             default -> 1.0; // No image scaling for levels 1-3\n         };\n     }\n-    \n+\n     // New method for JPEG quality based on optimization level\n     private float getJpegQualityForLevel(int optimizeLevel) {\n         return switch (optimizeLevel) {\n@@ -416,31 +416,31 @@ public ResponseEntity<byte[]> optimizePdf(@ModelAttribute OptimizePdfRequest req\n             boolean sizeMet = false;\n             boolean imageCompressionApplied = false; // Track if we've already compressed images\n             boolean qpdfCompressionApplied = false;\n-            \n+\n             while (!sizeMet && optimizeLevel <= 9) {\n                 // Apply appropriate compression based on level\n-                \n+\n                 // Levels 4-9: Apply image compression\n                 if (optimizeLevel >= 4 && !imageCompressionApplied) {\n                     double scaleFactor = getScaleFactorForLevel(optimizeLevel);\n                     float jpegQuality = getJpegQualityForLevel(optimizeLevel);\n                     compressImagesInPDF(tempInputFile, scaleFactor, jpegQuality);\n                     imageCompressionApplied = true; // Mark that we've compressed images\n                 }\n-                \n+\n                 // All levels (1-9): Apply QPDF compression\n                 if (!qpdfCompressionApplied) {\n                 \tlong preQpdfSize = Files.size(tempInputFile);\n                 \tlog.info(\"Pre-QPDF file size: {}\", GeneralUtils.formatBytes(preQpdfSize));\n-                \t\n+\n                     // For levels 1-3, map to qpdf compression levels 1-9\n                     int qpdfCompressionLevel = optimizeLevel;\n                     if (optimizeLevel <= 3) {\n                         qpdfCompressionLevel = optimizeLevel * 3; // Level 1->3, 2->6, 3->9\n                     } else {\n                         qpdfCompressionLevel = 9; // Max QPDF compression for levels 4-9\n                     }\n-                    \n+\n                     // Run QPDF optimization\n                     List<String> command = new ArrayList<>();\n                     command.add(\"qpdf\");\n@@ -474,7 +474,7 @@ public ResponseEntity<byte[]> optimizePdf(@ModelAttribute OptimizePdfRequest req\n                             \"Post-QPDF file size: {} (reduced by {:.1f}%)\",\n                             GeneralUtils.formatBytes(postQpdfSize),\n                             qpdfReduction);\n-                    \n+\n                 } else {\n                     tempOutputFile = tempInputFile;\n                 }\n@@ -550,4 +550,4 @@ private int incrementOptimizeLevel(int currentLevel, long currentSize, long targ\n         }\n         return Math.min(9, currentLevel + 1);\n     }\n-}\n\\ No newline at end of file\n+}\n\ndiff --git a/src/main/java/stirling/software/SPDF/utils/FileToPdf.java b/src/main/java/stirling/software/SPDF/utils/FileToPdf.java\n--- a/src/main/java/stirling/software/SPDF/utils/FileToPdf.java\n+++ b/src/main/java/stirling/software/SPDF/utils/FileToPdf.java\n@@ -53,7 +53,7 @@ public static byte[] convertHtmlToPdf(\n             command.add(\"-e\");\n             command.add(\"utf-8\");\n             command.add(\"-v\");\n-            command.add(\"--pdf-forms\"); \n+            command.add(\"--pdf-forms\");\n             command.add(tempInputFile.toString());\n             command.add(tempOutputFile.toString());\n ",
    "output": "🤖 format everything with pre-commit by <stirlingbot> (#3103)\n\nAuto-generated by [create-pull-request][1] with **stirlingbot**\n\n[1]: https://github.com/peter-evans/create-pull-request\n\nSigned-off-by: stirlingbot[bot] <195170888+stirlingbot[bot]@users.noreply.github.com>\nCo-authored-by: stirlingbot[bot] <195170888+stirlingbot[bot]@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/UI/impl/DesktopBrowser.java b/src/main/java/stirling/software/SPDF/UI/impl/DesktopBrowser.java\n--- a/src/main/java/stirling/software/SPDF/UI/impl/DesktopBrowser.java\n+++ b/src/main/java/stirling/software/SPDF/UI/impl/DesktopBrowser.java\n@@ -93,8 +93,21 @@ public void initWebUI(String url) {\n                                     setupMainFrame();\n                                     setupLoadHandler();\n \n-                                    // Show the frame immediately but transparent\n-                                    frame.setVisible(true);\n+                                    // Force initialize UI after 7 seconds if not already done\n+                                    Timer timeoutTimer =\n+                                            new Timer(\n+                                                    2500,\n+                                                    e -> {\n+                                                        log.warn(\n+                                                                \"Loading timeout reached. Forcing\"\n+                                                                        + \" UI transition.\");\n+                                                        if (!browserInitialized) {\n+                                                            // Force UI initialization\n+                                                            forceInitializeUI();\n+                                                        }\n+                                                    });\n+                                    timeoutTimer.setRepeats(false);\n+                                    timeoutTimer.start();\n                                 });\n                     } catch (Exception e) {\n                         log.error(\"Error initializing JCEF browser: \", e);\n@@ -238,8 +251,8 @@ public void onLoadingStateChange(\n                             boolean canGoBack,\n                             boolean canGoForward) {\n                         log.debug(\n-                                \"Loading state change - isLoading: {}, canGoBack: {}, canGoForward: {}, \"\n-                                        + \"browserInitialized: {}, Time elapsed: {}ms\",\n+                                \"Loading state change - isLoading: {}, canGoBack: {}, canGoForward:\"\n+                                        + \" {}, browserInitialized: {}, Time elapsed: {}ms\",\n                                 isLoading,\n                                 canGoBack,\n                                 canGoForward,\n@@ -248,7 +261,8 @@ public void onLoadingStateChange(\n \n                         if (!isLoading && !browserInitialized) {\n                             log.info(\n-                                    \"Browser finished loading, preparing to initialize UI components\");\n+                                    \"Browser finished loading, preparing to initialize UI\"\n+                                            + \" components\");\n                             browserInitialized = true;\n                             SwingUtilities.invokeLater(\n                                     () -> {\n@@ -289,10 +303,12 @@ public void onLoadingStateChange(\n                                                                         browser.getUIComponent()\n                                                                                 .requestFocus();\n                                                                         log.info(\n-                                                                                \"Browser component focused\");\n+                                                                                \"Browser component\"\n+                                                                                        + \" focused\");\n                                                                     } catch (Exception ex) {\n                                                                         log.error(\n-                                                                                \"Error focusing browser\",\n+                                                                                \"Error focusing\"\n+                                                                                        + \" browser\",\n                                                                                 ex);\n                                                                     }\n                                                                 });\n@@ -415,4 +431,67 @@ public void cleanup() {\n         if (cefApp != null) cefApp.dispose();\n         if (loadingWindow != null) loadingWindow.dispose();\n     }\n+\n+    public static void forceInitializeUI() {\n+        try {\n+            if (loadingWindow != null) {\n+                log.info(\"Forcing start of UI initialization sequence\");\n+\n+                // Close loading window first\n+                loadingWindow.setVisible(false);\n+                loadingWindow.dispose();\n+                loadingWindow = null;\n+                log.info(\"Loading window disposed\");\n+\n+                // Then setup the main frame\n+                frame.setVisible(false);\n+                frame.dispose();\n+                frame.setOpacity(1.0f);\n+                frame.setUndecorated(false);\n+                frame.pack();\n+                frame.setSize(UIScaling.scaleWidth(1280), UIScaling.scaleHeight(800));\n+                frame.setLocationRelativeTo(null);\n+                log.debug(\"Frame reconfigured\");\n+\n+                // Show the main frame\n+                frame.setVisible(true);\n+                frame.requestFocus();\n+                frame.toFront();\n+                log.info(\"Main frame displayed and focused\");\n+\n+                // Focus the browser component if available\n+                if (browser != null) {\n+                    Timer focusTimer =\n+                            new Timer(\n+                                    100,\n+                                    e -> {\n+                                        try {\n+                                            browser.getUIComponent().requestFocus();\n+                                            log.info(\"Browser component focused\");\n+                                        } catch (Exception ex) {\n+                                            log.error(\n+                                                    \"Error focusing browser during force ui\"\n+                                                            + \" initialization.\",\n+                                                    ex);\n+                                        }\n+                                    });\n+                    focusTimer.setRepeats(false);\n+                    focusTimer.start();\n+                }\n+            }\n+        } catch (Exception e) {\n+            log.error(\"Error during Forced UI initialization.\", e);\n+            // Attempt cleanup on error\n+            if (loadingWindow != null) {\n+                loadingWindow.dispose();\n+                loadingWindow = null;\n+            }\n+            if (frame != null) {\n+                frame.setVisible(true);\n+                frame.setOpacity(1.0f);\n+                frame.setUndecorated(false);\n+                frame.requestFocus();\n+            }\n+        }\n+    }\n }",
    "output": "fix desktop client stuck at 90% (#3111)\n\nSo I have added a timer to force show the desktop client after 7seconds\nof intiliazation (if not already visible) because it gets stuck at 90%\nsometimes\n\n#2487 #2595 \n\n---\n\n## Checklist\n\n### General\n\n- [X] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [X] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [X] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [X] I have performed a self-review of my own code\n- [X] My changes generate no new warnings\n\n### Documentation \n-- No functionality change.\n### UI Changes (if applicable)\n\n- [X] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n\n- [X] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details.\n\n\n\n\nhttps://github.com/user-attachments/assets/e889701e-bb21-4a06-b221-98a0faad6f2e"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertWebsiteToPDF.java b/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertWebsiteToPDF.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertWebsiteToPDF.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertWebsiteToPDF.java\n@@ -72,6 +72,7 @@ public ResponseEntity<byte[]> urlToPdf(@ModelAttribute UrlToPdfRequest request)\n             List<String> command = new ArrayList<>();\n             command.add(runtimePathConfig.getWeasyPrintPath());\n             command.add(URL);\n+            command.add(\"--pdf-forms\"); \n             command.add(tempOutputFile.toString());\n \n             ProcessExecutorResult returnCode =\n\ndiff --git a/src/main/java/stirling/software/SPDF/utils/FileToPdf.java b/src/main/java/stirling/software/SPDF/utils/FileToPdf.java\n--- a/src/main/java/stirling/software/SPDF/utils/FileToPdf.java\n+++ b/src/main/java/stirling/software/SPDF/utils/FileToPdf.java\n@@ -53,6 +53,7 @@ public static byte[] convertHtmlToPdf(\n             command.add(\"-e\");\n             command.add(\"utf-8\");\n             command.add(\"-v\");\n+            command.add(\"--pdf-forms\"); \n             command.add(tempInputFile.toString());\n             command.add(tempOutputFile.toString());\n ",
    "output": "Weasyprint forms #3077 (#3084)\n\nThis pull request introduces a small but important change to the PDF\nconversion functionality. The change ensures that PDF forms are\nsupported by adding the `--pdf-forms` option to the command lists in two\nmethods.\n\nChanges to support PDF forms:\n\n*\n[`src/main/java/stirling/software/SPDF/controller/api/converters/ConvertWebsiteToPDF.java`](diffhunk://#diff-0e78e0f49bdd0d38127cd04656de55c2eca0b56197e098c6bfceb65e8cc3cff5R75):\nAdded the `--pdf-forms` option to the command list in the `urlToPdf`\nmethod.\n*\n[`src/main/java/stirling/software/SPDF/utils/FileToPdf.java`](diffhunk://#diff-337516e2839031154412aa3e7c9a73402f3a630813a1946eae78f8a84e9bbe7fR56):\nAdded the `--pdf-forms` option to the command list in the\n`convertHtmlToPdf` method.\n\nCloses #3077\n\n---\n\n## Checklist\n\n### General\n\n- [ ] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [ ] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [ ] I have performed a self-review of my own code\n- [ ] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java b/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java\n--- a/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java\n+++ b/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java\n@@ -11,7 +11,6 @@\n import org.springframework.stereotype.Service;\n \n import lombok.extern.slf4j.Slf4j;\n-\n import stirling.software.SPDF.model.ApplicationProperties;\n \n @Service\n@@ -164,14 +163,8 @@ public void init() {\n         addEndpointToGroup(\"CLI\", \"ocr-pdf\");\n         addEndpointToGroup(\"CLI\", \"html-to-pdf\");\n         addEndpointToGroup(\"CLI\", \"url-to-pdf\");\n-        addEndpointToGroup(\"CLI\", \"book-to-pdf\");\n-        addEndpointToGroup(\"CLI\", \"pdf-to-book\");\n         addEndpointToGroup(\"CLI\", \"pdf-to-rtf\");\n \n-        // Calibre\n-        addEndpointToGroup(\"Calibre\", \"book-to-pdf\");\n-        addEndpointToGroup(\"Calibre\", \"pdf-to-book\");\n-\n         // python\n         addEndpointToGroup(\"Python\", \"extract-image-scans\");\n         addEndpointToGroup(\"Python\", \"html-to-pdf\");",
    "output": "Remove book site and translation entries (#3078)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\n- What was changed\n- Why the change was made\n- Any challenges encountered\n\nCloses #(issue_number)\n\n---\n\n## Checklist\n\n### General\n\n- [ ] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [ ] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [ ] I have performed a self-review of my own code\n- [ ] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/utils/FileToPdf.java b/src/main/java/stirling/software/SPDF/utils/FileToPdf.java\n--- a/src/main/java/stirling/software/SPDF/utils/FileToPdf.java\n+++ b/src/main/java/stirling/software/SPDF/utils/FileToPdf.java\n@@ -169,7 +169,7 @@ private static Path unzipAndGetMainHtml(byte[] fileBytes) throws IOException {\n             }\n         }\n \n-        // search for the main HTML file.\n+        // Search for the main HTML file.\n         try (Stream<Path> walk = Files.walk(tempDirectory)) {\n             List<Path> htmlFiles =\n                     walk.filter(file -> file.toString().endsWith(\".html\"))\n@@ -190,46 +190,20 @@ private static Path unzipAndGetMainHtml(byte[] fileBytes) throws IOException {\n         }\n     }\n \n-    public static byte[] convertBookTypeToPdf(byte[] bytes, String originalFilename)\n-            throws IOException, InterruptedException {\n-        if (originalFilename == null || originalFilename.lastIndexOf('.') == -1) {\n-            throw new IllegalArgumentException(\"Invalid original filename.\");\n-        }\n-\n-        String fileExtension = originalFilename.substring(originalFilename.lastIndexOf('.'));\n-        List<String> command = new ArrayList<>();\n-        Path tempOutputFile = Files.createTempFile(\"output_\", \".pdf\");\n-        Path tempInputFile = null;\n-\n-        try {\n-            // Create temp file with appropriate extension\n-            tempInputFile = Files.createTempFile(\"input_\", fileExtension);\n-            Files.write(tempInputFile, bytes);\n-\n-            command.add(\"ebook-convert\");\n-            command.add(tempInputFile.toString());\n-            command.add(tempOutputFile.toString());\n-            ProcessExecutorResult returnCode =\n-                    ProcessExecutor.getInstance(ProcessExecutor.Processes.CALIBRE)\n-                            .runCommandWithOutputHandling(command);\n-\n-            return Files.readAllBytes(tempOutputFile);\n-        } finally {\n-            // Clean up temporary files\n-            if (tempInputFile != null) {\n-                Files.deleteIfExists(tempInputFile);\n-            }\n-            Files.deleteIfExists(tempOutputFile);\n-        }\n-    }\n-\n     static String sanitizeZipFilename(String entryName) {\n         if (entryName == null || entryName.trim().isEmpty()) {\n-            return entryName;\n+            return \"\";\n         }\n+        // Remove any drive letters (e.g., \"C:\\\") and leading forward/backslashes\n+        entryName = entryName.replaceAll(\"^[a-zA-Z]:[\\\\\\\\/]+\", \"\");\n+        entryName = entryName.replaceAll(\"^[\\\\\\\\/]+\", \"\");\n+\n+        // Recursively remove path traversal sequences\n         while (entryName.contains(\"../\") || entryName.contains(\"..\\\\\")) {\n             entryName = entryName.replace(\"../\", \"\").replace(\"..\\\\\", \"\");\n         }\n+        // Normalize all backslashes to forward slashes\n+        entryName = entryName.replaceAll(\"\\\\\\\\\", \"/\");\n         return entryName;\n     }\n }\n\ndiff --git a/src/main/java/stirling/software/SPDF/utils/ProcessExecutor.java b/src/main/java/stirling/software/SPDF/utils/ProcessExecutor.java\n--- a/src/main/java/stirling/software/SPDF/utils/ProcessExecutor.java\n+++ b/src/main/java/stirling/software/SPDF/utils/ProcessExecutor.java\n@@ -1,6 +1,10 @@\n package stirling.software.SPDF.utils;\n \n-import java.io.*;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.InterruptedIOException;\n import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n import java.util.List;\n@@ -222,15 +226,15 @@ public ProcessExecutorResult runCommandWithOutputHandling(\n             boolean isQpdf =\n                     command != null && !command.isEmpty() && command.get(0).contains(\"qpdf\");\n \n-            if (outputLines.size() > 0) {\n+            if (!outputLines.isEmpty()) {\n                 String outputMessage = String.join(\"\\n\", outputLines);\n                 messages += outputMessage;\n                 if (!liveUpdates) {\n                     log.info(\"Command output:\\n\" + outputMessage);\n                 }\n             }\n \n-            if (errorLines.size() > 0) {\n+            if (!errorLines.isEmpty()) {\n                 String errorMessage = String.join(\"\\n\", errorLines);\n                 messages += errorMessage;\n                 if (!liveUpdates) {\n\ndiff --git a/src/test/java/stirling/software/SPDF/utils/FileToPdfTest.java b/src/test/java/stirling/software/SPDF/utils/FileToPdfTest.java\n--- a/src/test/java/stirling/software/SPDF/utils/FileToPdfTest.java\n+++ b/src/test/java/stirling/software/SPDF/utils/FileToPdfTest.java\n@@ -5,31 +5,79 @@\n \n import java.io.IOException;\n \n-import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.*;\n \n public class FileToPdfTest {\n \n+    /**\n+     * Test the HTML to PDF conversion.\n+     * This test expects an IOException when an empty HTML input is provided.\n+     */\n     @Test\n     public void testConvertHtmlToPdf() {\n         HTMLToPdfRequest request = new HTMLToPdfRequest();\n-        byte[] fileBytes = new byte[0]; // Sample file bytes\n-        String fileName = \"test.html\"; // Sample file name\n-        boolean disableSanitize = false; // Sample boolean value\n-\n-        // Check if the method throws IOException\n-        assertThrows(IOException.class, () -> {\n-            FileToPdf.convertHtmlToPdf(\"/path/\",request, fileBytes, fileName, disableSanitize);\n-        });\n+        byte[] fileBytes = new byte[0]; // Sample file bytes (empty input)\n+        String fileName = \"test.html\"; // Sample file name indicating an HTML file\n+        boolean disableSanitize = false; // Flag to control sanitization\n+\n+        // Expect an IOException to be thrown due to empty input\n+        Throwable thrown =\n+                assertThrows(\n+                        IOException.class,\n+                        () ->\n+                                FileToPdf.convertHtmlToPdf(\n+                                        \"/path/\", request, fileBytes, fileName, disableSanitize));\n+        assertNotNull(thrown);\n+    }\n+\n+    /**\n+     * Test sanitizeZipFilename with null or empty input.\n+     * It should return an empty string in these cases.\n+     */\n+    @Test\n+    public void testSanitizeZipFilename_NullOrEmpty() {\n+        assertEquals(\"\", FileToPdf.sanitizeZipFilename(null));\n+        assertEquals(\"\", FileToPdf.sanitizeZipFilename(\"   \"));\n+    }\n+\n+    /**\n+     * Test sanitizeZipFilename to ensure it removes path traversal sequences.\n+     * This includes removing both forward and backward slash sequences.\n+     */\n+    @Test\n+    public void testSanitizeZipFilename_RemovesTraversalSequences() {\n+        String input = \"../some/../path/..\\\\to\\\\file.txt\";\n+        String expected = \"some/path/to/file.txt\";\n+\n+        // Print output for debugging purposes\n+        System.out.println(\"sanitizeZipFilename \" + FileToPdf.sanitizeZipFilename(input));\n+        System.out.flush();\n+\n+        // Expect that the method replaces backslashes with forward slashes\n+        // and removes path traversal sequences\n+        assertEquals(expected, FileToPdf.sanitizeZipFilename(input));\n+    }\n+\n+    /**\n+     * Test sanitizeZipFilename to ensure that it removes leading drive letters and slashes.\n+     */\n+    @Test\n+    public void testSanitizeZipFilename_RemovesLeadingDriveAndSlashes() {\n+        String input = \"C:\\\\folder\\\\file.txt\";\n+        String expected = \"folder/file.txt\";\n+        assertEquals(expected, FileToPdf.sanitizeZipFilename(input));\n+\n+        input = \"/folder/file.txt\";\n+        expected = \"folder/file.txt\";\n+        assertEquals(expected, FileToPdf.sanitizeZipFilename(input));\n     }\n \n+    /**\n+     * Test sanitizeZipFilename to verify that safe filenames remain unchanged.\n+     */\n     @Test\n-    public void testConvertBookTypeToPdf() {\n-        byte[] bytes = new byte[10]; // Sample bytes\n-        String originalFilename = \"test.epub\"; // Sample original filename\n-\n-        // Check if the method throws IOException\n-        assertThrows(IOException.class, () -> {\n-            FileToPdf.convertBookTypeToPdf(bytes, originalFilename);\n-        });\n+    public void testSanitizeZipFilename_NoChangeForSafeNames() {\n+        String input = \"folder/subfolder/file.txt\";\n+        assertEquals(input, FileToPdf.sanitizeZipFilename(input));\n     }\n }",
    "output": "Remove `convertBookTypeToPdf` and Improve File Sanitization in `FileToPdf` (#3072)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\n- **Removed `convertBookTypeToPdf` method**: \n- This method used `ebook-convert` from Calibre, which required external\ndependencies.\n- Its removal eliminates unnecessary process execution and simplifies\nthe codebase.\n  \n- **Enhanced `sanitizeZipFilename` function**:\n  - Added handling for drive letters (e.g., `C:\\`).\n  - Ensured all slashes are normalized to forward slashes.\n- Improved recursive path traversal removal to prevent directory escape\nvulnerabilities.\n\n- **Refactored `ProcessExecutor` output handling**:\n  - Replaced redundant `.size() > 0` checks with `.isEmpty()`.\n  \n- **Expanded unit tests in `FileToPdfTest`**:\n  - Added tests for `sanitizeZipFilename` to cover edge cases.\n  - Improved test descriptions and added assertion messages.\n  - Added debug print statements for easier test debugging.\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/SecurityConfiguration.java b/src/main/java/stirling/software/SPDF/config/security/SecurityConfiguration.java\n--- a/src/main/java/stirling/software/SPDF/config/security/SecurityConfiguration.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/SecurityConfiguration.java\n@@ -285,7 +285,7 @@ public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n                                 });\n             }\n         } else {\n-            log.info(\"SAML 2 login is not enabled. Using default.\");\n+            log.debug(\"SAML 2 login is not enabled. Using default.\");\n             http.authorizeHttpRequests(authz -> authz.anyRequest().permitAll());\n         }\n         return http.build();\n\ndiff --git a/src/main/java/stirling/software/SPDF/config/security/oauth2/OAuth2Configuration.java b/src/main/java/stirling/software/SPDF/config/security/oauth2/OAuth2Configuration.java\n--- a/src/main/java/stirling/software/SPDF/config/security/oauth2/OAuth2Configuration.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/oauth2/OAuth2Configuration.java\n@@ -200,7 +200,7 @@ private Optional<ClientRegistration> oidcClientRegistration() {\n                                 .scope(oidcProvider.getScopes())\n                                 .userNameAttributeName(oidcProvider.getUseAsUsername().getName())\n                                 .clientName(clientName)\n-                                .redirectUri(REDIRECT_URI_PATH + name)\n+                                .redirectUri(REDIRECT_URI_PATH + \"oidc\")\n                                 .authorizationGrantType(AUTHORIZATION_CODE)\n                                 .build())\n                 : Optional.empty();",
    "output": "OAuth 2 `redirectUri` hotfix (#3066)\n\n# Description of Changes\n\n- Reverted path in `OAuth2Configuration` for `redirectUri` back to\n'oidc' to fix the Redirect Uri error users were facing when using SSO\nwith Authentik\n- Changed log level for some logs\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [x] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [x] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [x] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [x] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/InitialSecuritySetup.java b/src/main/java/stirling/software/SPDF/config/security/InitialSecuritySetup.java\n--- a/src/main/java/stirling/software/SPDF/config/security/InitialSecuritySetup.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/InitialSecuritySetup.java\n@@ -36,12 +36,13 @@ public InitialSecuritySetup(\n     @PostConstruct\n     public void init() {\n         try {\n-            if (databaseService.hasBackup()) {\n-                databaseService.importDatabase();\n-            }\n \n             if (!userService.hasUsers()) {\n-                initializeAdminUser();\n+                if (databaseService.hasBackup()) {\n+                    databaseService.importDatabase();\n+                } else {\n+                    initializeAdminUser();\n+                }\n             }\n \n             userService.migrateOauth2ToSSO();\n\ndiff --git a/src/main/java/stirling/software/SPDF/config/security/UserService.java b/src/main/java/stirling/software/SPDF/config/security/UserService.java\n--- a/src/main/java/stirling/software/SPDF/config/security/UserService.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/UserService.java\n@@ -121,12 +121,14 @@ private String generateApiKey() {\n     }\n \n     public User addApiKeyToUser(String username) {\n-        Optional<User> user = findByUsernameIgnoreCase(username);\n-        if (user.isPresent()) {\n-            user.get().setApiKey(generateApiKey());\n-            return userRepository.save(user.get());\n+        Optional<User> userOpt = findByUsernameIgnoreCase(username);\n+        User user = saveUser(userOpt, generateApiKey());\n+        try {\n+            databaseService.exportDatabase();\n+        } catch (SQLException | UnsupportedProviderException e) {\n+            log.error(\"Error exporting database after adding API key to user\", e);\n         }\n-        throw new UsernameNotFoundException(\"User not found\");\n+        return user;\n     }\n \n     public User refreshApiKeyForUser(String username) {\n@@ -171,6 +173,14 @@ public void saveUser(String username, AuthenticationType authenticationType)\n         saveUser(username, authenticationType, Role.USER.getRoleId());\n     }\n \n+    private User saveUser(Optional<User> user, String apiKey) {\n+        if (user.isPresent()) {\n+            user.get().setApiKey(apiKey);\n+            return userRepository.save(user.get());\n+        }\n+        throw new UsernameNotFoundException(\"User not found\");\n+    }\n+\n     public void saveUser(String username, AuthenticationType authenticationType, String role)\n             throws IllegalArgumentException, SQLException, UnsupportedProviderException {\n         if (!isUsernameValid(username)) {",
    "output": "Restrict Backup Import to Initialization Process and Refactor API Key Handling (#3061)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\n- **What was changed:**\n- Updated the backup import logic in `InitialSecuritySetup` so that the\ndatabase backup is only imported during initialization when there are no\nusers present. If no backup exists, the admin user is initialized\ninstead.\n- Refactored the API key addition in `UserService` by extracting the\nlogic into a private helper method `saveUser(Optional<User> user)` and\nadded a call to export the database after updating the user's API key.\n\n- **Why the change was made:**\n- To prevent accidental or unintended backup imports outside the\ninitialization process, ensuring the system only imports backups when\nnecessary.\n- To improve code clarity and maintainability in the user API key\nmanagement process, while ensuring that the database state is preserved\nvia an export after key updates.\n\nCloses https://github.com/Stirling-Tools/Stirling-PDF/discussions/3057\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/SPDFApplication.java b/src/main/java/stirling/software/SPDF/SPDFApplication.java\n--- a/src/main/java/stirling/software/SPDF/SPDFApplication.java\n+++ b/src/main/java/stirling/software/SPDF/SPDFApplication.java\n@@ -1,7 +1,6 @@\n package stirling.software.SPDF;\n \n import java.io.IOException;\n-import java.net.ServerSocket;\n import java.net.URISyntaxException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n@@ -29,6 +28,7 @@\n import stirling.software.SPDF.config.ConfigInitializer;\n import stirling.software.SPDF.config.InstallationPathConfig;\n import stirling.software.SPDF.model.ApplicationProperties;\n+import stirling.software.SPDF.utils.UrlUtils;\n \n @Slf4j\n @EnableScheduling\n@@ -64,6 +64,12 @@ public static void main(String[] args) throws IOException, InterruptedException\n             app.setHeadless(false);\n             props.put(\"java.awt.headless\", \"false\");\n             props.put(\"spring.main.web-application-type\", \"servlet\");\n+\n+            int desiredPort = 8080;\n+            String port = UrlUtils.findAvailablePort(desiredPort);\n+            props.put(\"server.port\", port);\n+            System.setProperty(\"server.port\", port);\n+            log.info(\"Desktop UI mode: Using port {}\", port);\n         }\n \n         app.setAdditionalProfiles(getActiveProfile(args));\n@@ -160,7 +166,17 @@ public void init() {\n     }\n \n     @Value(\"${server.port:8080}\")\n-    public void setServerPortStatic(String port) {\n+    public void setServerPort(String port) {\n+        if (\"auto\".equalsIgnoreCase(port)) {\n+            // Use Spring Boot's automatic port assignment (server.port=0)\n+            SPDFApplication.serverPortStatic =\n+                    \"0\"; // This will let Spring Boot assign an available port\n+        } else {\n+            SPDFApplication.serverPortStatic = port;\n+        }\n+    }\n+\n+    public static void setServerPortStatic(String port) {\n         if (\"auto\".equalsIgnoreCase(port)) {\n             // Use Spring Boot's automatic port assignment (server.port=0)\n             SPDFApplication.serverPortStatic =\n@@ -197,36 +213,11 @@ private static String[] getActiveProfile(String[] args) {\n         return new String[] {\"default\"};\n     }\n \n-    private static boolean isPortAvailable(int port) {\n-        try (ServerSocket socket = new ServerSocket(port)) {\n-            return true;\n-        } catch (IOException e) {\n-            return false;\n-        }\n-    }\n-\n-    // Optionally keep this method if you want to provide a manual port-incrementation fallback.\n-    private static String findAvailablePort(int startPort) {\n-        int port = startPort;\n-        while (!isPortAvailable(port)) {\n-            port++;\n-        }\n-        return String.valueOf(port);\n-    }\n-\n     public static String getStaticBaseUrl() {\n         return baseUrlStatic;\n     }\n \n-    public String getNonStaticBaseUrl() {\n-        return baseUrlStatic;\n-    }\n-\n     public static String getStaticPort() {\n         return serverPortStatic;\n     }\n-\n-    public String getNonStaticPort() {\n-        return serverPortStatic;\n-    }\n }\n\ndiff --git a/src/main/java/stirling/software/SPDF/config/RuntimePathConfig.java b/src/main/java/stirling/software/SPDF/config/RuntimePathConfig.java\n--- a/src/main/java/stirling/software/SPDF/config/RuntimePathConfig.java\n+++ b/src/main/java/stirling/software/SPDF/config/RuntimePathConfig.java\n@@ -57,12 +57,11 @@ public RuntimePathConfig(ApplicationProperties properties) {\n         this.pipelineDefaultWebUiConfigs = webUiConfigsPath;\n \n         boolean isDocker = isRunningInDocker();\n-        \n+\n         // Initialize Operation paths\n         String weasyPrintPath = isDocker ? \"/opt/venv/bin/weasyprint\" : \"weasyprint\";\n         String unoConvertPath = isDocker ? \"/opt/venv/bin/unoconvert\" : \"unoconvert\";\n \n-\n         // Check for custom operation paths\n         Operations operations = properties.getSystem().getCustomPaths().getOperations();\n         if (operations != null) {\n@@ -78,9 +77,8 @@ public RuntimePathConfig(ApplicationProperties properties) {\n         this.weasyPrintPath = weasyPrintPath;\n         this.unoConvertPath = unoConvertPath;\n     }\n-    \n+\n     private boolean isRunningInDocker() {\n         return Files.exists(Paths.get(\"/.dockerenv\"));\n     }\n-    \n }\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java b/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java\n@@ -52,7 +52,8 @@ public CompressController(CustomPDDocumentFactory pdfDocumentFactory) {\n         this.pdfDocumentFactory = pdfDocumentFactory;\n     }\n \n-    private void compressImagesInPDF(Path pdfFile, double initialScaleFactor, boolean grayScale) throws Exception {\n+    private void compressImagesInPDF(Path pdfFile, double initialScaleFactor, boolean grayScale)\n+            throws Exception {\n         byte[] fileBytes = Files.readAllBytes(pdfFile);\n         try (PDDocument doc = Loader.loadPDF(fileBytes)) {\n             double scaleFactor = initialScaleFactor;\n\ndiff --git a/src/main/java/stirling/software/SPDF/utils/UrlUtils.java b/src/main/java/stirling/software/SPDF/utils/UrlUtils.java\n--- a/src/main/java/stirling/software/SPDF/utils/UrlUtils.java\n+++ b/src/main/java/stirling/software/SPDF/utils/UrlUtils.java\n@@ -1,5 +1,8 @@\n package stirling.software.SPDF.utils;\n \n+import java.io.IOException;\n+import java.net.ServerSocket;\n+\n import jakarta.servlet.http.HttpServletRequest;\n \n public class UrlUtils {\n@@ -14,4 +17,20 @@ public static String getOrigin(HttpServletRequest request) {\n \n         return scheme + \"://\" + serverName + \":\" + serverPort + contextPath;\n     }\n+\n+    public static boolean isPortAvailable(int port) {\n+        try (ServerSocket socket = new ServerSocket(port)) {\n+            return true;\n+        } catch (IOException e) {\n+            return false;\n+        }\n+    }\n+\n+    public static String findAvailablePort(int startPort) {\n+        int port = startPort;\n+        while (!isPortAvailable(port)) {\n+            port++;\n+        }\n+        return String.valueOf(port);\n+    }\n }\n\ndiff --git a/src/test/java/stirling/software/SPDF/SPDFApplicationTest.java b/src/test/java/stirling/software/SPDF/SPDFApplicationTest.java\n--- a/src/test/java/stirling/software/SPDF/SPDFApplicationTest.java\n+++ b/src/test/java/stirling/software/SPDF/SPDFApplicationTest.java\n@@ -31,7 +31,7 @@ public class SPDFApplicationTest {\n     private ApplicationProperties applicationProperties;\n \n     @InjectMocks\n-    private SPDFApplication SPDFApplication;\n+    private SPDFApplication sPDFApplication;\n \n     @BeforeEach\n     public void setUp() {\n@@ -49,8 +49,4 @@ public void testGetStaticPort() {\n         assertEquals(\"8080\", SPDFApplication.getStaticPort());\n     }\n \n-    @Test\n-    public void testGetNonStaticPort() {\n-        assertEquals(\"8080\", SPDFApplication.getNonStaticPort());\n-    }\n }",
    "output": "dynamic port for UI from 8080 up (8081 etc) (#3042)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\n- What was changed\n- Why the change was made\n- Any challenges encountered\n\nCloses #(issue_number)\n\n---\n\n## Checklist\n\n### General\n\n- [ ] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [ ] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [ ] I have performed a self-review of my own code\n- [ ] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/AppUpdateService.java b/src/main/java/stirling/software/SPDF/config/AppUpdateService.java\n--- a/src/main/java/stirling/software/SPDF/config/AppUpdateService.java\n+++ b/src/main/java/stirling/software/SPDF/config/AppUpdateService.java\n@@ -2,13 +2,13 @@\n \n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Scope;\n-import org.springframework.stereotype.Service;\n \n import stirling.software.SPDF.config.interfaces.ShowAdminInterface;\n import stirling.software.SPDF.model.ApplicationProperties;\n \n-@Service\n+@Configuration\n class AppUpdateService {\n \n     private final ApplicationProperties applicationProperties;",
    "output": "Enhance AppUpdateService: Add `@Configuration` Annotation for Improved Spring Boot Integration (#3036)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\nThe AppUpdateService class now includes the `@Configuration` annotation\nin addition to the existing `@Service` annotation.\n\nThis update ensures that the class is properly registered as a\nconfiguration class within the Spring application context, thereby\nimproving bean management and integration.\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [ ] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/service/PostHogService.java b/src/main/java/stirling/software/SPDF/service/PostHogService.java\n--- a/src/main/java/stirling/software/SPDF/service/PostHogService.java\n+++ b/src/main/java/stirling/software/SPDF/service/PostHogService.java\n@@ -207,8 +207,7 @@ private Map<String, Object> getDockerMetrics() {\n \n     private void addIfNotEmpty(Map<String, Object> map, String key, Object value) {\n         if (value != null) {\n-            if (value instanceof String) {\n-                String strValue = (String) value;\n+            if (value instanceof String strValue) {\n                 if (!StringUtils.isBlank(strValue)) {\n                     map.put(key, strValue.trim());\n                 }",
    "output": "Fix: Analytics Initialization Behavior (#3031)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\nWhat was changed:\n\n- Modified the default value of enableAnalytics in settings.yml.template\nfrom `true` to `undefined`.\n\nWhy the change was made:\n\n- The analytics setting was updated to prevent the value from defaulting\nto true during initialization, which suppressed the display of the\nprompt dialog. Changing it to `undefined` ensures that the user is\nexplicitly prompted to enable or disable analytics, thereby improving\nuser control.\n\nCloses #(issue_number)\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [ ] I have performed a self-review of my own code\n- [ ] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java b/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java\n@@ -31,6 +31,7 @@\n import io.swagger.v3.oas.annotations.tags.Tag;\n \n import lombok.extern.slf4j.Slf4j;\n+\n import stirling.software.SPDF.model.api.misc.OptimizePdfRequest;\n import stirling.software.SPDF.service.CustomPDDocumentFactory;\n import stirling.software.SPDF.utils.GeneralUtils;\n@@ -51,7 +52,7 @@ public CompressController(CustomPDDocumentFactory pdfDocumentFactory) {\n         this.pdfDocumentFactory = pdfDocumentFactory;\n     }\n \n-    private void compressImagesInPDF(Path pdfFile, double initialScaleFactor) throws Exception {\n+    private void compressImagesInPDF(Path pdfFile, double initialScaleFactor, boolean grayScale) throws Exception {\n         byte[] fileBytes = Files.readAllBytes(pdfFile);\n         try (PDDocument doc = Loader.loadPDF(fileBytes)) {\n             double scaleFactor = initialScaleFactor;\n@@ -76,11 +77,23 @@ private void compressImagesInPDF(Path pdfFile, double initialScaleFactor) throws\n                                     bufferedImage.getScaledInstance(\n                                             newWidth, newHeight, Image.SCALE_SMOOTH);\n \n-                            BufferedImage scaledBufferedImage =\n-                                    new BufferedImage(\n-                                            newWidth, newHeight, BufferedImage.TYPE_INT_RGB);\n-                            scaledBufferedImage.getGraphics().drawImage(scaledImage, 0, 0, null);\n-\n+                            BufferedImage scaledBufferedImage;\n+                            if (grayScale\n+                                    || bufferedImage.getType() == BufferedImage.TYPE_BYTE_GRAY) {\n+                                scaledBufferedImage =\n+                                        new BufferedImage(\n+                                                newWidth, newHeight, BufferedImage.TYPE_BYTE_GRAY);\n+                                scaledBufferedImage\n+                                        .getGraphics()\n+                                        .drawImage(scaledImage, 0, 0, null);\n+                            } else {\n+                                scaledBufferedImage =\n+                                        new BufferedImage(\n+                                                newWidth, newHeight, BufferedImage.TYPE_INT_RGB);\n+                                scaledBufferedImage\n+                                        .getGraphics()\n+                                        .drawImage(scaledImage, 0, 0, null);\n+                            }\n                             ByteArrayOutputStream compressedImageStream =\n                                     new ByteArrayOutputStream();\n                             ImageIO.write(scaledBufferedImage, \"jpeg\", compressedImageStream);\n@@ -139,6 +152,7 @@ public ResponseEntity<byte[]> optimizePdf(@ModelAttribute OptimizePdfRequest req\n             }\n \n             boolean sizeMet = false;\n+            boolean grayscaleEnabled = Boolean.TRUE.equals(request.getGrayscale());\n             while (!sizeMet && optimizeLevel <= 9) {\n \n                 // Apply additional image compression for levels 6-9\n@@ -152,7 +166,7 @@ public ResponseEntity<byte[]> optimizePdf(@ModelAttribute OptimizePdfRequest req\n                                 case 9 -> 0.5; // 60% of original size\n                                 default -> 1.0;\n                             };\n-                    compressImagesInPDF(tempInputFile, scaleFactor);\n+                    compressImagesInPDF(tempInputFile, scaleFactor, grayscaleEnabled);\n                 }\n \n                 // Run QPDF optimization\n@@ -169,6 +183,7 @@ public ResponseEntity<byte[]> optimizePdf(@ModelAttribute OptimizePdfRequest req\n                 command.add(\"--compression-level=\" + optimizeLevel);\n                 command.add(\"--compress-streams=y\");\n                 command.add(\"--object-streams=generate\");\n+                command.add(\"--no-warn\");\n                 command.add(tempInputFile.toString());\n                 command.add(tempOutputFile.toString());\n \n\ndiff --git a/src/main/java/stirling/software/SPDF/model/api/misc/OptimizePdfRequest.java b/src/main/java/stirling/software/SPDF/model/api/misc/OptimizePdfRequest.java\n--- a/src/main/java/stirling/software/SPDF/model/api/misc/OptimizePdfRequest.java\n+++ b/src/main/java/stirling/software/SPDF/model/api/misc/OptimizePdfRequest.java\n@@ -29,4 +29,13 @@ public class OptimizePdfRequest extends PDFFile {\n                     \"Whether to normalize the PDF content for better compatibility. Default is false.\",\n             defaultValue = \"false\")\n     private Boolean normalize = false;\n+\n+    @Schema(\n+            description = \"Whether to convert the PDF to grayscale. Default is false.\",\n+            defaultValue = \"false\")\n+    private Boolean grayscale = false;\n+\n+    public Boolean getGrayscale() {\n+        return grayscale;\n+    }\n }",
    "output": "Feature/convert to grayscale (#3003)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\n- What was changed\n  -Grayscale Image Compression:\nModified the compressImagesInPDF method to optionally convert images to\ngrayscale during compression. This is\nachieved by checking if the grayScale flag is true (or if the image is\nalready in grayscale) and then processing the image\n   accordingly.\n\n   UI Update:\nUpdated the compress-pdf.html file by adding a checkbox for grayscale\ncompression. Additionally, a new translation\nkey compress.grayscale.label with the text \"Apply Grayscale for\nCompression\" has been added across all supported\n   languages. \n- Why the change was made\n  -Enhanced Compression Options:\nThis feature provides users with an option to compress images in PDFs\nmore effectively by reducing the color complexity, which can lead to\nsmaller file sizes.\n\nImproved Flexibility:\nIt allows users to decide whether they want to maintain the original\ncolor images or opt for a grayscale version.\n- Any challenges encountered\n- The translation for compress.grayscale.label was generated using an\nautomated translator, so it might not be completely accurate and could\nrequire further review.\n\nCloses #2603\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [x] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/UserService.java b/src/main/java/stirling/software/SPDF/config/security/UserService.java\n--- a/src/main/java/stirling/software/SPDF/config/security/UserService.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/UserService.java\n@@ -139,6 +139,9 @@ public String getApiKeyForUser(String username) {\n         User user =\n                 findByUsernameIgnoreCase(username)\n                         .orElseThrow(() -> new UsernameNotFoundException(\"User not found\"));\n+        if(user.getApiKey() == null || user.getApiKey().length() == 0) {\n+        \tuser = addApiKeyToUser(username); \n+        }\n         return user.getApiKey();\n     }\n ",
    "output": "Update UserService.java to generate API key if empty (#3016)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\n- What was changed\n- Why the change was made\n- Any challenges encountered\n\nCloses #(issue_number)\n\n---\n\n## Checklist\n\n### General\n\n- [ ] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [ ] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [ ] I have performed a self-review of my own code\n- [ ] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/utils/misc/InvertFullColorStrategy.java b/src/main/java/stirling/software/SPDF/utils/misc/InvertFullColorStrategy.java\n--- a/src/main/java/stirling/software/SPDF/utils/misc/InvertFullColorStrategy.java\n+++ b/src/main/java/stirling/software/SPDF/utils/misc/InvertFullColorStrategy.java\n@@ -30,52 +30,69 @@ public InvertFullColorStrategy(MultipartFile file, ReplaceAndInvert replaceAndIn\n     @Override\n     public InputStreamResource replace() throws IOException {\n \n-        // Create a temporary file, with the original filename from the multipart file\n-        File file = Files.createTempFile(\"temp\", getFileInput().getOriginalFilename()).toFile();\n-\n-        // Transfer the content of the multipart file to the file\n-        getFileInput().transferTo(file);\n-\n-        // Load the uploaded PDF\n-        PDDocument document = Loader.loadPDF(file);\n-\n-        // Render each page and invert colors\n-        PDFRenderer pdfRenderer = new PDFRenderer(document);\n-        for (int page = 0; page < document.getNumberOfPages(); page++) {\n-            BufferedImage image =\n-                    pdfRenderer.renderImageWithDPI(page, 300); // Render page at 300 DPI\n-\n-            // Invert the colors\n-            invertImageColors(image);\n-\n-            // Create a new PDPage from the inverted image\n-            PDPage pdPage = document.getPage(page);\n-            PDImageXObject pdImage =\n-                    PDImageXObject.createFromFileByContent(\n-                            convertToBufferedImageTpFile(image), document);\n-\n-            PDPageContentStream contentStream =\n-                    new PDPageContentStream(\n-                            document, pdPage, PDPageContentStream.AppendMode.OVERWRITE, true);\n-            contentStream.drawImage(\n-                    pdImage,\n-                    0,\n-                    0,\n-                    pdPage.getMediaBox().getWidth(),\n-                    pdPage.getMediaBox().getHeight());\n-            contentStream.close();\n-        }\n-\n-        // Save the modified PDF to a ByteArrayOutputStream\n-        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n-        document.save(byteArrayOutputStream);\n-        document.close();\n+        File file = null;\n+        try {\n+            // Create a temporary file, with the original filename from the multipart file\n+            file = Files.createTempFile(\"temp\", getFileInput().getOriginalFilename()).toFile();\n+\n+            // Transfer the content of the multipart file to the file\n+            getFileInput().transferTo(file);\n+\n+            // Load the uploaded PDF\n+            PDDocument document = Loader.loadPDF(file);\n+\n+            // Render each page and invert colors\n+            PDFRenderer pdfRenderer = new PDFRenderer(document);\n+            for (int page = 0; page < document.getNumberOfPages(); page++) {\n+                BufferedImage image =\n+                        pdfRenderer.renderImageWithDPI(page, 300); // Render page at 300 DPI\n+\n+                // Invert the colors\n+                invertImageColors(image);\n+\n+                // Create a new PDPage from the inverted image\n+                PDPage pdPage = document.getPage(page);\n+                File tempImageFile = null;\n+                try {\n+                    tempImageFile = convertToBufferedImageTpFile(image);\n+                    PDImageXObject pdImage =\n+                            PDImageXObject.createFromFileByContent(tempImageFile, document);\n+\n+                    PDPageContentStream contentStream =\n+                            new PDPageContentStream(\n+                                    document,\n+                                    pdPage,\n+                                    PDPageContentStream.AppendMode.OVERWRITE,\n+                                    true);\n+                    contentStream.drawImage(\n+                            pdImage,\n+                            0,\n+                            0,\n+                            pdPage.getMediaBox().getWidth(),\n+                            pdPage.getMediaBox().getHeight());\n+                    contentStream.close();\n+                } finally {\n+                    if (tempImageFile != null && tempImageFile.exists()) {\n+                        Files.delete(tempImageFile.toPath());\n+                    }\n+                }\n+            }\n \n-        // Prepare the modified PDF for download\n-        ByteArrayInputStream inputStream =\n-                new ByteArrayInputStream(byteArrayOutputStream.toByteArray());\n-        InputStreamResource resource = new InputStreamResource(inputStream);\n-        return resource;\n+            // Save the modified PDF to a ByteArrayOutputStream\n+            ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n+            document.save(byteArrayOutputStream);\n+            document.close();\n+\n+            // Prepare the modified PDF for download\n+            ByteArrayInputStream inputStream =\n+                    new ByteArrayInputStream(byteArrayOutputStream.toByteArray());\n+            InputStreamResource resource = new InputStreamResource(inputStream);\n+            return resource;\n+        } finally {\n+            if (file != null && file.exists()) {\n+                Files.delete(file.toPath());\n+            }\n+        }\n     }\n \n     // Method to invert image colors\n@@ -98,7 +115,7 @@ private void invertImageColors(BufferedImage image) {\n \n     // Helper method to convert BufferedImage to InputStream\n     private File convertToBufferedImageTpFile(BufferedImage image) throws IOException {\n-        File file = new File(\"image.png\");\n+        File file = File.createTempFile(\"image\", \".png\");\n         ImageIO.write(image, \"png\", file);\n         return file;\n     }",
    "output": "Fix/full invert crash 2942 (#2957)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\n- What was changed\n- Modified the `convertToBufferedImageTpFile` to use\n`File.createTempFile()` instead of writing to `\"image.png\"` in the\ncurrent directory.\n- This change ensures the file is saved in the default temporary\ndirectory, preventing permission issues.\n\n- Why the change was made\n- Previously, the method attempted to save the file in the current\nworking directory, which caused permission errors\n(`java.io.FileNotFoundException: image.png (Permission denied)`).\n \n- Any challenges encountered\n\nCloses #2942\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [x] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java b/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java\n@@ -5,6 +5,7 @@\n import java.io.ByteArrayOutputStream;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n import java.util.ArrayList;\n import java.util.List;\n \n@@ -94,7 +95,9 @@ private void compressImagesInPDF(Path pdfFile, double initialScaleFactor) throws\n                     }\n                 }\n             }\n-            doc.save(pdfFile.toString());\n+            Path tempOutput = Files.createTempFile(\"output_\", \".pdf\");\n+            doc.save(tempOutput.toString());\n+            Files.move(tempOutput, pdfFile, StandardCopyOption.REPLACE_EXISTING);\n         }\n     }\n \n@@ -188,7 +191,7 @@ public ResponseEntity<byte[]> optimizePdf(@ModelAttribute OptimizePdfRequest req\n                     optimizeLevel =\n                             incrementOptimizeLevel(\n                                     optimizeLevel, outputFileSize, expectedOutputSize);\n-                    if (autoMode && optimizeLevel > 9) {\n+                    if (autoMode && optimizeLevel >= 9) {\n                         log.info(\"Maximum compression level reached in auto mode\");\n                         sizeMet = true;\n                     }",
    "output": "fix(pdf): resolve compression error and file overwrite issues (#2937)\n\n# Description of Changes\n\n- **What was changed:**\n- Modified the file handling logic to avoid overwriting the source PDF\nwhile it is being read, which previously led to corrupted output files.\n-Modified the logic where optimizeLevel is 9 and we are chacking for\noptimizeLevel < 9.\n- **Why the change was made:**\n- The original compression process would stuck when dealing with larger\nfiles, failing to meet the specified target size limits.\n- Overwriting the input file during processing was causing warnings and\npotential file corruption, which could lead to instability and incorrect\noutputs.\n\n- **Any challenges encountered:**\n\nCloses #2930\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [x] I have tested my changes locally"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/SplitPdfBySectionsController.java b/src/main/java/stirling/software/SPDF/controller/api/SplitPdfBySectionsController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/SplitPdfBySectionsController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/SplitPdfBySectionsController.java\n@@ -100,6 +100,8 @@ public ResponseEntity<byte[]> splitPdf(@ModelAttribute SplitPdfBySectionsRequest\n \n                 if (sectionNum == horiz * verti) pageNum++;\n             }\n+\n+            zipOut.finish();\n             data = Files.readAllBytes(zipFile);\n             return WebResponseUtils.bytesToWebResponse(\n                     data, filename + \"_split.zip\", MediaType.APPLICATION_OCTET_STREAM);",
    "output": "Fix issue #2511: Fix broken ZIP issue by adding zipOut.finish() (#2890)\n\n---\n\n# Description of Changes\n\n### What was changed\n- Added `zipOut.finish()` to ensure the ZIP file is properly finalized\nafter writing all entries.\n- This ensures the central directory metadata is written, fixing the\nissue where the ZIP file was incomplete or broken.\n\n### Why the change was made\n- The issue (#2511) reported that splitting a PDF resulted in a broken\nZIP file. The root cause was the missing central directory due to\nimproper stream finalization.\n- Adding `zipOut.finish()` explicitly ensures the ZIP file is correctly\nstructured and can be extracted without errors.\n\n### Challenges encountered\n\nCloses #2511\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [x] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details.\n- Tested with various PDFs to ensure the ZIP file is created correctly.\n  - Verified ZIP integrity using `unzip -t` and manual extraction.\n\n---"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java b/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java\n--- a/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java\n+++ b/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java\n@@ -265,9 +265,6 @@ public void init() {\n         // Pdftohtml dependent endpoints\n         addEndpointToGroup(\"Pdftohtml\", \"pdf-to-html\");\n         addEndpointToGroup(\"Pdftohtml\", \"pdf-to-markdown\");\n-\n-        // disabled for now while we resolve issues\n-        disableEndpoint(\"pdf-to-pdfa\");\n     }\n \n     private void processEnvironmentConfigs() {\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertPDFToPDFA.java b/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertPDFToPDFA.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertPDFToPDFA.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertPDFToPDFA.java\n@@ -73,8 +73,8 @@ public ResponseEntity<byte[]> pdfToPdfA(@ModelAttribute PdfToPdfARequest request\n             // Determine PDF/A filter based on requested format\n             String pdfFilter =\n                     \"pdfa\".equals(outputFormat)\n-                            ? \"writer_pdf_Export:{'SelectPdfVersion':{'Value':'2'}}:writer_pdf_Export\"\n-                            : \"writer_pdf_Export:{'SelectPdfVersion':{'Value':'1'}}:writer_pdf_Export\";\n+                            ? \"pdf:writer_pdf_Export:{\\\"SelectPdfVersion\\\":{\\\"type\\\":\\\"long\\\",\\\"value\\\":\\\"2\\\"}}\"\n+                            : \"pdf:writer_pdf_Export:{\\\"SelectPdfVersion\\\":{\\\"type\\\":\\\"long\\\",\\\"value\\\":\\\"1\\\"}}\";\n \n             // Prepare LibreOffice command\n             List<String> command =\n@@ -84,7 +84,7 @@ public ResponseEntity<byte[]> pdfToPdfA(@ModelAttribute PdfToPdfARequest request\n                                     \"--headless\",\n                                     \"--nologo\",\n                                     \"--convert-to\",\n-                                    \"pdf:\" + pdfFilter,\n+                                    pdfFilter,\n                                     \"--outdir\",\n                                     tempOutputDir.toString(),\n                                     tempInputFile.toString()));",
    "output": "PDFA fixes (#2896)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\n- What was changed\n- Why the change was made\n- Any challenges encountered\n\nCloses #(issue_number)\n\n---\n\n## Checklist\n\n### General\n\n- [ ] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [ ] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [ ] I have performed a self-review of my own code\n- [ ] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/utils/ProcessExecutor.java b/src/main/java/stirling/software/SPDF/utils/ProcessExecutor.java\n--- a/src/main/java/stirling/software/SPDF/utils/ProcessExecutor.java\n+++ b/src/main/java/stirling/software/SPDF/utils/ProcessExecutor.java\n@@ -218,6 +218,9 @@ public ProcessExecutorResult runCommandWithOutputHandling(\n             errorReaderThread.join();\n             outputReaderThread.join();\n \n+            boolean isQpdf =\n+                    command != null && !command.isEmpty() && command.get(0).contains(\"qpdf\");\n+\n             if (outputLines.size() > 0) {\n                 String outputMessage = String.join(\"\\n\", outputLines);\n                 messages += outputMessage;\n@@ -233,20 +236,28 @@ public ProcessExecutorResult runCommandWithOutputHandling(\n                     log.warn(\"Command error output:\\n\" + errorMessage);\n                 }\n                 if (exitCode != 0) {\n-                    throw new IOException(\n-                            \"Command process failed with exit code \"\n-                                    + exitCode\n-                                    + \". Error message: \"\n-                                    + errorMessage);\n+                    if (isQpdf && exitCode == 3) {\n+                        log.warn(\"qpdf succeeded with warnings: {}\", messages);\n+                    } else {\n+                        throw new IOException(\n+                                \"Command process failed with exit code \"\n+                                        + exitCode\n+                                        + \". Error message: \"\n+                                        + errorMessage);\n+                    }\n                 }\n             }\n \n             if (exitCode != 0) {\n-                throw new IOException(\n-                        \"Command process failed with exit code \"\n-                                + exitCode\n-                                + \"\\nLogs: \"\n-                                + messages);\n+                if (isQpdf && exitCode == 3) {\n+                    log.warn(\"qpdf succeeded with warnings: {}\", messages);\n+                } else {\n+                    throw new IOException(\n+                            \"Command process failed with exit code \"\n+                                    + exitCode\n+                                    + \"\\nLogs: \"\n+                                    + messages);\n+                }\n             }\n         } finally {\n             semaphore.release();",
    "output": "Fix issue #2842: Handle qpdf exit code 3 as success with warnings (#2883)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\n- **What was changed**:\n- Modified the `ProcessExecutor` class to accept exit code `3` from\n**qpdf** as a success with warnings.\n- Added a check to ensure that only **qpdf**’s exit code `3` is treated\nas a warning.\n- Added a warning log for **qpdf** exit code `3` to provide better\nvisibility into the repair process.\n\n- **Why the change was made**:\n- The repair process was failing when **qpdf** returned exit code `3`,\neven though the operation succeeded with warnings. This caused\nunnecessary errors for users.\n- The changes ensure that PDFs with minor structural issues (e.g.,\nmismatched object counts) are still repaired successfully, while logging\nwarnings for transparency.\n- Added a check to ensure that only **qpdf**’s exit code `3` is treated\nas a warning, preventing potential issues with other tools that might\nuse exit code `3` for actual errors.\n\nCloses #2842\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Testing (if applicable)\n\n- [x] I have tested my changes locally.\n- Verified that exit code `3` is only treated as a warning for **qpdf**\nand not for other tools.\n\n---\n\n### Additional Notes\n- The changes align with **qpdf**'s behavior, where exit code `3`\nindicates a successful operation with warnings.\n- Added a check to ensure that only **qpdf**’s exit code `3` is treated\nas a warning, preventing potential issues with other tools.\n\nCo-authored-by: Anthony Stirling <77850077+Frooodle@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertHtmlToPDF.java b/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertHtmlToPDF.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertHtmlToPDF.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertHtmlToPDF.java\n@@ -44,7 +44,7 @@ public ConvertHtmlToPDF(\n     @Operation(\n             summary = \"Convert an HTML or ZIP (containing HTML and CSS) to PDF\",\n             description =\n-                    \"This endpoint takes an HTML or ZIP file input and converts it to a PDF format.\")\n+                    \"This endpoint takes an HTML or ZIP file input and converts it to a PDF format. Input:HTML Output:PDF Type:SISO\")\n     public ResponseEntity<byte[]> HtmlToPdf(@ModelAttribute HTMLToPdfRequest request)\n             throws Exception {\n         MultipartFile fileInput = request.getFileInput();\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/api/misc/OCRController.java b/src/main/java/stirling/software/SPDF/controller/api/misc/OCRController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/misc/OCRController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/misc/OCRController.java\n@@ -8,7 +8,7 @@\n import java.util.stream.Collectors;\n import java.util.zip.ZipEntry;\n import java.util.zip.ZipOutputStream;\n-\n+import io.swagger.v3.oas.annotations.Operation;\n import javax.imageio.ImageIO;\n \n import org.apache.pdfbox.multipdf.PDFMergerUtility;\n@@ -65,6 +65,9 @@ public List<String> getAvailableTesseractLanguages() {\n     }\n \n     @PostMapping(consumes = \"multipart/form-data\", value = \"/ocr-pdf\")\n+     @Operation(\n+        summary = \"Process PDF files with OCR using Tesseract\",\n+        description = \"Takes a PDF file as input, performs OCR using specified languages and OCR type (skip-text/force-ocr), and returns the processed PDF. Input:PDF Output:PDF Type:SISO\")\n     public ResponseEntity<byte[]> processPdfWithOCR(\n             @ModelAttribute ProcessPdfWithOcrRequest request)\n             throws IOException, InterruptedException {",
    "output": "Pipeline fix for some features missing documentation (#2882)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\n- What was changed\n- Why the change was made\n- Any challenges encountered\n\nCloses #(issue_number)\n\n---\n\n## Checklist\n\n### General\n\n- [ ] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [ ] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [ ] I have performed a self-review of my own code\n- [ ] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/AdditionalLanguageJsController.java b/src/main/java/stirling/software/SPDF/controller/api/AdditionalLanguageJsController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/AdditionalLanguageJsController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/AdditionalLanguageJsController.java\n@@ -32,7 +32,10 @@ public void generateAdditionalLanguageJs(HttpServletResponse response) throws IO\n         response.setContentType(\"application/javascript\");\n         PrintWriter writer = response.getWriter();\n         // Erstelle das JavaScript dynamisch\n-        writer.println(\"const supportedLanguages = \" + toJsonArray(new ArrayList<>(supportedLanguages)) + \";\");\n+        writer.println(\n+                \"const supportedLanguages = \"\n+                        + toJsonArray(new ArrayList<>(supportedLanguages))\n+                        + \";\");\n         // Generiere die `getDetailedLanguageCode`-Funktion\n         writer.println(\n                 \"\"\"\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertHtmlToPDF.java b/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertHtmlToPDF.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertHtmlToPDF.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertHtmlToPDF.java\n@@ -13,8 +13,8 @@\n import io.swagger.v3.oas.annotations.Operation;\n import io.swagger.v3.oas.annotations.tags.Tag;\n \n-import stirling.software.SPDF.model.api.converters.HTMLToPdfRequest;\n import stirling.software.SPDF.model.ApplicationProperties;\n+import stirling.software.SPDF.model.api.converters.HTMLToPdfRequest;\n import stirling.software.SPDF.service.CustomPDDocumentFactory;\n import stirling.software.SPDF.utils.FileToPdf;\n import stirling.software.SPDF.utils.WebResponseUtils;\n@@ -28,16 +28,16 @@ public class ConvertHtmlToPDF {\n \n     private final CustomPDDocumentFactory pdfDocumentFactory;\n \n-\tprivate final ApplicationProperties applicationProperties;\n+    private final ApplicationProperties applicationProperties;\n \n     @Autowired\n     public ConvertHtmlToPDF(\n             CustomPDDocumentFactory pdfDocumentFactory,\n             @Qualifier(\"bookAndHtmlFormatsInstalled\") boolean bookAndHtmlFormatsInstalled,\n-\t\t\tApplicationProperties applicationProperties) {\n+            ApplicationProperties applicationProperties) {\n         this.pdfDocumentFactory = pdfDocumentFactory;\n         this.bookAndHtmlFormatsInstalled = bookAndHtmlFormatsInstalled;\n-\t\tthis.applicationProperties = applicationProperties;\n+        this.applicationProperties = applicationProperties;\n     }\n \n     @PostMapping(consumes = \"multipart/form-data\", value = \"/html/pdf\")\n@@ -60,15 +60,16 @@ public ResponseEntity<byte[]> HtmlToPdf(@ModelAttribute HTMLToPdfRequest request\n             throw new IllegalArgumentException(\"File must be either .html or .zip format.\");\n         }\n \n-\t\tboolean disableSanitize = Boolean.TRUE.equals(applicationProperties.getSystem().getDisableSanitize());\n+        boolean disableSanitize =\n+                Boolean.TRUE.equals(applicationProperties.getSystem().getDisableSanitize());\n \n         byte[] pdfBytes =\n                 FileToPdf.convertHtmlToPdf(\n                         request,\n                         fileInput.getBytes(),\n                         originalFilename,\n                         bookAndHtmlFormatsInstalled,\n-\t\t\t\t\t\tdisableSanitize);\n+                        disableSanitize);\n \n         pdfBytes = pdfDocumentFactory.createNewBytesBasedOnOldDocument(pdfBytes);\n \n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertMarkdownToPdf.java b/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertMarkdownToPdf.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertMarkdownToPdf.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertMarkdownToPdf.java\n@@ -23,8 +23,8 @@\n import io.swagger.v3.oas.annotations.Operation;\n import io.swagger.v3.oas.annotations.tags.Tag;\n \n-import stirling.software.SPDF.model.api.GeneralFile;\n import stirling.software.SPDF.model.ApplicationProperties;\n+import stirling.software.SPDF.model.api.GeneralFile;\n import stirling.software.SPDF.service.CustomPDDocumentFactory;\n import stirling.software.SPDF.utils.FileToPdf;\n import stirling.software.SPDF.utils.WebResponseUtils;\n@@ -38,16 +38,16 @@ public class ConvertMarkdownToPdf {\n \n     private final CustomPDDocumentFactory pdfDocumentFactory;\n \n-\tprivate final ApplicationProperties applicationProperties;\n+    private final ApplicationProperties applicationProperties;\n \n     @Autowired\n     public ConvertMarkdownToPdf(\n             CustomPDDocumentFactory pdfDocumentFactory,\n             @Qualifier(\"bookAndHtmlFormatsInstalled\") boolean bookAndHtmlFormatsInstalled,\n-\t\t\tApplicationProperties applicationProperties) {\n+            ApplicationProperties applicationProperties) {\n         this.pdfDocumentFactory = pdfDocumentFactory;\n         this.bookAndHtmlFormatsInstalled = bookAndHtmlFormatsInstalled;\n-\t\tthis.applicationProperties = applicationProperties;\n+        this.applicationProperties = applicationProperties;\n     }\n \n     @PostMapping(consumes = \"multipart/form-data\", value = \"/markdown/pdf\")\n@@ -81,15 +81,16 @@ public ResponseEntity<byte[]> markdownToPdf(@ModelAttribute GeneralFile request)\n \n         String htmlContent = renderer.render(document);\n \n-\t\tboolean disableSanitize = Boolean.TRUE.equals(applicationProperties.getSystem().getDisableSanitize());\n+        boolean disableSanitize =\n+                Boolean.TRUE.equals(applicationProperties.getSystem().getDisableSanitize());\n \n         byte[] pdfBytes =\n                 FileToPdf.convertHtmlToPdf(\n                         null,\n                         htmlContent.getBytes(),\n                         \"converted.html\",\n                         bookAndHtmlFormatsInstalled,\n-\t\t\t\t\t\tdisableSanitize);\n+                        disableSanitize);\n         pdfBytes = pdfDocumentFactory.createNewBytesBasedOnOldDocument(pdfBytes);\n         String outputFilename =\n                 originalFilename.replaceFirst(\"[.][^.]+$\", \"\")\n\ndiff --git a/src/main/java/stirling/software/SPDF/service/LanguageService.java b/src/main/java/stirling/software/SPDF/service/LanguageService.java\n--- a/src/main/java/stirling/software/SPDF/service/LanguageService.java\n+++ b/src/main/java/stirling/software/SPDF/service/LanguageService.java\n@@ -1,10 +1,10 @@\n package stirling.software.SPDF.service;\n \n import java.io.IOException;\n+import java.util.Arrays;\n import java.util.HashSet;\n import java.util.Set;\n import java.util.stream.Collectors;\n-import java.util.Arrays;\n \n import org.springframework.core.io.Resource;\n import org.springframework.core.io.support.PathMatchingResourcePatternResolver;\n@@ -21,8 +21,7 @@ public class LanguageService {\n     private final PathMatchingResourcePatternResolver resourcePatternResolver =\n             new PathMatchingResourcePatternResolver();\n \n-    public LanguageService(\n-            ApplicationProperties applicationProperties) {\n+    public LanguageService(ApplicationProperties applicationProperties) {\n         this.applicationProperties = applicationProperties;\n     }\n \n\ndiff --git a/src/main/java/stirling/software/SPDF/utils/FileToPdf.java b/src/main/java/stirling/software/SPDF/utils/FileToPdf.java\n--- a/src/main/java/stirling/software/SPDF/utils/FileToPdf.java\n+++ b/src/main/java/stirling/software/SPDF/utils/FileToPdf.java\n@@ -27,7 +27,7 @@ public static byte[] convertHtmlToPdf(\n             byte[] fileBytes,\n             String fileName,\n             boolean htmlFormatsInstalled,\n-\t\t\tboolean disableSanitize)\n+            boolean disableSanitize)\n             throws IOException, InterruptedException {\n \n         Path tempOutputFile = Files.createTempFile(\"output_\", \".pdf\");\n@@ -36,7 +36,9 @@ public static byte[] convertHtmlToPdf(\n         try {\n             if (fileName.endsWith(\".html\")) {\n                 tempInputFile = Files.createTempFile(\"input_\", \".html\");\n-                String sanitizedHtml = sanitizeHtmlContent(new String(fileBytes, StandardCharsets.UTF_8), disableSanitize);\n+                String sanitizedHtml =\n+                        sanitizeHtmlContent(\n+                                new String(fileBytes, StandardCharsets.UTF_8), disableSanitize);\n                 Files.write(tempInputFile, sanitizedHtml.getBytes(StandardCharsets.UTF_8));\n             } else if (fileName.endsWith(\".zip\")) {\n                 tempInputFile = Files.createTempFile(\"input_\", \".zip\");\n@@ -93,7 +95,8 @@ private static String sanitizeHtmlContent(String htmlContent, boolean disableSan\n         return (!disableSanitize) ? CustomHtmlSanitizer.sanitize(htmlContent) : htmlContent;\n     }\n \n-    private static void sanitizeHtmlFilesInZip(Path zipFilePath, boolean disableSanitize) throws IOException {\n+    private static void sanitizeHtmlFilesInZip(Path zipFilePath, boolean disableSanitize)\n+            throws IOException {\n         Path tempUnzippedDir = Files.createTempDirectory(\"unzipped_\");\n         try (ZipInputStream zipIn =\n                 ZipSecurity.createHardenedInputStream(\n\ndiff --git a/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java b/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java\n--- a/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java\n+++ b/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java\n@@ -587,9 +587,7 @@ public static String generateMachineFingerprint() {\n             for (byte b : hash) {\n                 fingerprint.append(String.format(\"%02x\", b));\n             }\n-\n             return fingerprint.toString();\n-\n         } catch (Exception e) {\n             return \"GenericID\";\n         }",
    "output": "Update sonarqube.yml and removal of gradle keys (#2866)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\n- What was changed\n- Why the change was made\n- Any challenges encountered\n\nCloses #(issue_number)\n\n---\n\n## Checklist\n\n### General\n\n- [ ] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [ ] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [ ] I have performed a self-review of my own code\n- [ ] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/AppConfig.java b/src/main/java/stirling/software/SPDF/config/AppConfig.java\n--- a/src/main/java/stirling/software/SPDF/config/AppConfig.java\n+++ b/src/main/java/stirling/software/SPDF/config/AppConfig.java\n@@ -4,6 +4,7 @@\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n+import java.util.List;\n import java.util.Properties;\n import java.util.function.Predicate;\n \n@@ -74,6 +75,11 @@ public String homeText() {\n                 : \"null\";\n     }\n \n+    @Bean(name = \"languages\")\n+    public List<String> languages() {\n+        return applicationProperties.getUi().getLanguages();\n+    }\n+\n     @Bean(name = \"navBarText\")\n     public String navBarText() {\n         String defaultNavBar =\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/api/AdditionalLanguageJsController.java b/src/main/java/stirling/software/SPDF/controller/api/AdditionalLanguageJsController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/AdditionalLanguageJsController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/AdditionalLanguageJsController.java\n@@ -2,7 +2,9 @@\n \n import java.io.IOException;\n import java.io.PrintWriter;\n+import java.util.ArrayList;\n import java.util.List;\n+import java.util.Set;\n \n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.RequestMapping;\n@@ -26,11 +28,11 @@ public AdditionalLanguageJsController(LanguageService languageService) {\n     @Hidden\n     @GetMapping(value = \"/additionalLanguageCode.js\", produces = \"application/javascript\")\n     public void generateAdditionalLanguageJs(HttpServletResponse response) throws IOException {\n-        List<String> supportedLanguages = languageService.getSupportedLanguages();\n+        Set<String> supportedLanguages = languageService.getSupportedLanguages();\n         response.setContentType(\"application/javascript\");\n         PrintWriter writer = response.getWriter();\n         // Erstelle das JavaScript dynamisch\n-        writer.println(\"const supportedLanguages = \" + toJsonArray(supportedLanguages) + \";\");\n+        writer.println(\"const supportedLanguages = \" + toJsonArray(new ArrayList<>(supportedLanguages)) + \";\");\n         // Generiere die `getDetailedLanguageCode`-Funktion\n         writer.println(\n                 \"\"\"\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/web/DatabaseWebController.java b/src/main/java/stirling/software/SPDF/controller/web/DatabaseWebController.java\n--- a/src/main/java/stirling/software/SPDF/controller/web/DatabaseWebController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/web/DatabaseWebController.java\n@@ -36,8 +36,9 @@ public String database(HttpServletRequest request, Model model, Authentication a\n         }\n         List<FileInfo> backupList = databaseService.getBackupList();\n         model.addAttribute(\"backupFiles\", backupList);\n-        model.addAttribute(\"databaseVersion\", databaseService.getH2Version());\n-        if (\"Unknown\".equalsIgnoreCase(databaseService.getH2Version())) {\n+        String dbVersion = databaseService.getH2Version();\n+        model.addAttribute(\"databaseVersion\", dbVersion);\n+        if (\"Unknown\".equalsIgnoreCase(dbVersion)) {\n             model.addAttribute(\"infoMessage\", \"notSupported\");\n         }\n         return \"database\";\n\ndiff --git a/src/main/java/stirling/software/SPDF/model/ApplicationProperties.java b/src/main/java/stirling/software/SPDF/model/ApplicationProperties.java\n--- a/src/main/java/stirling/software/SPDF/model/ApplicationProperties.java\n+++ b/src/main/java/stirling/software/SPDF/model/ApplicationProperties.java\n@@ -265,7 +265,8 @@ public Provider get(String registrationId) throws UnsupportedProviderException {\n                             return getKeycloak();\n                         default:\n                             throw new UnsupportedProviderException(\n-                                    \"Logout from the provider is not supported? Report it at https://github.com/Stirling-Tools/Stirling-PDF/issues\");\n+                                    \"Logout from the provider is not supported? Report it at\"\n+                                            + \" https://github.com/Stirling-Tools/Stirling-PDF/issues\");\n                     }\n                 }\n             }\n@@ -313,10 +314,10 @@ public enum Driver {\n         @Override\n         public String toString() {\n             return \"\"\"\n-                    Driver {\n-                      driverName='%s'\n-                    }\n-                    \"\"\"\n+            Driver {\n+              driverName='%s'\n+            }\n+            \"\"\"\n                     .formatted(driverName);\n         }\n     }\n@@ -326,6 +327,7 @@ public static class Ui {\n         private String appName;\n         private String homeDescription;\n         private String appNameNavbar;\n+        private List<String> languages;\n \n         public String getAppName() {\n             return appName != null && appName.trim().length() > 0 ? appName : null;\n\ndiff --git a/src/main/java/stirling/software/SPDF/service/LanguageService.java b/src/main/java/stirling/software/SPDF/service/LanguageService.java\n--- a/src/main/java/stirling/software/SPDF/service/LanguageService.java\n+++ b/src/main/java/stirling/software/SPDF/service/LanguageService.java\n@@ -1,41 +1,57 @@\n package stirling.software.SPDF.service;\n \n import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.List;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.Arrays;\n \n import org.springframework.core.io.Resource;\n import org.springframework.core.io.support.PathMatchingResourcePatternResolver;\n import org.springframework.stereotype.Service;\n \n+import lombok.extern.slf4j.Slf4j;\n+import stirling.software.SPDF.model.ApplicationProperties;\n+\n @Service\n+@Slf4j\n public class LanguageService {\n \n+    private final ApplicationProperties applicationProperties;\n     private final PathMatchingResourcePatternResolver resourcePatternResolver =\n             new PathMatchingResourcePatternResolver();\n \n-    public List<String> getSupportedLanguages() {\n-        List<String> supportedLanguages = new ArrayList<>();\n+    public LanguageService(\n+            ApplicationProperties applicationProperties) {\n+        this.applicationProperties = applicationProperties;\n+    }\n \n+    public Set<String> getSupportedLanguages() {\n         try {\n             Resource[] resources =\n                     resourcePatternResolver.getResources(\"classpath*:messages_*.properties\");\n-            for (Resource resource : resources) {\n-                if (resource.exists() && resource.isReadable()) {\n-                    String filename = resource.getFilename();\n-                    if (filename != null\n-                            && filename.startsWith(\"messages_\")\n-                            && filename.endsWith(\".properties\")) {\n-                        String languageCode =\n-                                filename.replace(\"messages_\", \"\").replace(\".properties\", \"\");\n-                        supportedLanguages.add(languageCode);\n-                    }\n-                }\n-            }\n+\n+            return Arrays.stream(resources)\n+                    .map(Resource::getFilename)\n+                    .filter(\n+                            filename ->\n+                                    filename != null\n+                                            && filename.startsWith(\"messages_\")\n+                                            && filename.endsWith(\".properties\"))\n+                    .map(filename -> filename.replace(\"messages_\", \"\").replace(\".properties\", \"\"))\n+                    .filter(\n+                            languageCode -> {\n+                                Set<String> allowedLanguages =\n+                                        new HashSet<>(applicationProperties.getUi().getLanguages());\n+                                return allowedLanguages.isEmpty()\n+                                        || allowedLanguages.contains(languageCode)\n+                                        || \"en_GB\".equals(languageCode);\n+                            })\n+                    .collect(Collectors.toSet());\n+\n         } catch (IOException e) {\n-            e.printStackTrace();\n+            log.error(\"Error retrieving supported languages\", e);\n+            return new HashSet<>();\n         }\n-\n-        return supportedLanguages;\n     }\n }",
    "output": "Add: Configurable UI Language Support with Dynamic Filtering (#2846)\n\n# Description of Changes\n\n### Summary\n- Added support for configuring UI languages via `settings.yml`\n(`languages` field).\n- Modified `LanguageService` to respect the configured languages, while\nensuring British English (`en_GB`) is always enabled.\n- Updated Thymeleaf templates to dynamically display only the allowed\nlanguages.\n- Improved logging and refactored some list-to-set conversions for\nbetter efficiency.\n\n### Why the Change?\n- Allows administrators to limit available UI languages instead of\ndisplaying all detected languages.\n- Provides better customization options and simplifies language\nmanagement.\n\n### Challenges Encountered\n- Ensuring backwards compatibility: If `languages` is empty, all\nlanguages remain enabled.\n- Handling `Set<String>` instead of `List<String>` in `LanguageService`\nfor optimized lookups.\n\n---\n\n## Checklist\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [x] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [x] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [x] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertHtmlToPDF.java b/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertHtmlToPDF.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertHtmlToPDF.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertHtmlToPDF.java\n@@ -14,6 +14,7 @@\n import io.swagger.v3.oas.annotations.tags.Tag;\n \n import stirling.software.SPDF.model.api.converters.HTMLToPdfRequest;\n+import stirling.software.SPDF.model.ApplicationProperties;\n import stirling.software.SPDF.service.CustomPDDocumentFactory;\n import stirling.software.SPDF.utils.FileToPdf;\n import stirling.software.SPDF.utils.WebResponseUtils;\n@@ -27,12 +28,16 @@ public class ConvertHtmlToPDF {\n \n     private final CustomPDDocumentFactory pdfDocumentFactory;\n \n+\tprivate final ApplicationProperties applicationProperties;\n+\n     @Autowired\n     public ConvertHtmlToPDF(\n             CustomPDDocumentFactory pdfDocumentFactory,\n-            @Qualifier(\"bookAndHtmlFormatsInstalled\") boolean bookAndHtmlFormatsInstalled) {\n+            @Qualifier(\"bookAndHtmlFormatsInstalled\") boolean bookAndHtmlFormatsInstalled,\n+\t\t\tApplicationProperties applicationProperties) {\n         this.pdfDocumentFactory = pdfDocumentFactory;\n         this.bookAndHtmlFormatsInstalled = bookAndHtmlFormatsInstalled;\n+\t\tthis.applicationProperties = applicationProperties;\n     }\n \n     @PostMapping(consumes = \"multipart/form-data\", value = \"/html/pdf\")\n@@ -54,12 +59,16 @@ public ResponseEntity<byte[]> HtmlToPdf(@ModelAttribute HTMLToPdfRequest request\n                 || (!originalFilename.endsWith(\".html\") && !originalFilename.endsWith(\".zip\"))) {\n             throw new IllegalArgumentException(\"File must be either .html or .zip format.\");\n         }\n+\n+\t\tboolean disableSanitize = Boolean.TRUE.equals(applicationProperties.getSystem().getDisableSanitize());\n+\n         byte[] pdfBytes =\n                 FileToPdf.convertHtmlToPdf(\n                         request,\n                         fileInput.getBytes(),\n                         originalFilename,\n-                        bookAndHtmlFormatsInstalled);\n+                        bookAndHtmlFormatsInstalled,\n+\t\t\t\t\t\tdisableSanitize);\n \n         pdfBytes = pdfDocumentFactory.createNewBytesBasedOnOldDocument(pdfBytes);\n \n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertMarkdownToPdf.java b/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertMarkdownToPdf.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertMarkdownToPdf.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertMarkdownToPdf.java\n@@ -24,6 +24,7 @@\n import io.swagger.v3.oas.annotations.tags.Tag;\n \n import stirling.software.SPDF.model.api.GeneralFile;\n+import stirling.software.SPDF.model.ApplicationProperties;\n import stirling.software.SPDF.service.CustomPDDocumentFactory;\n import stirling.software.SPDF.utils.FileToPdf;\n import stirling.software.SPDF.utils.WebResponseUtils;\n@@ -37,12 +38,16 @@ public class ConvertMarkdownToPdf {\n \n     private final CustomPDDocumentFactory pdfDocumentFactory;\n \n+\tprivate final ApplicationProperties applicationProperties;\n+\n     @Autowired\n     public ConvertMarkdownToPdf(\n             CustomPDDocumentFactory pdfDocumentFactory,\n-            @Qualifier(\"bookAndHtmlFormatsInstalled\") boolean bookAndHtmlFormatsInstalled) {\n+            @Qualifier(\"bookAndHtmlFormatsInstalled\") boolean bookAndHtmlFormatsInstalled,\n+\t\t\tApplicationProperties applicationProperties) {\n         this.pdfDocumentFactory = pdfDocumentFactory;\n         this.bookAndHtmlFormatsInstalled = bookAndHtmlFormatsInstalled;\n+\t\tthis.applicationProperties = applicationProperties;\n     }\n \n     @PostMapping(consumes = \"multipart/form-data\", value = \"/markdown/pdf\")\n@@ -76,12 +81,15 @@ public ResponseEntity<byte[]> markdownToPdf(@ModelAttribute GeneralFile request)\n \n         String htmlContent = renderer.render(document);\n \n+\t\tboolean disableSanitize = Boolean.TRUE.equals(applicationProperties.getSystem().getDisableSanitize());\n+\n         byte[] pdfBytes =\n                 FileToPdf.convertHtmlToPdf(\n                         null,\n                         htmlContent.getBytes(),\n                         \"converted.html\",\n-                        bookAndHtmlFormatsInstalled);\n+                        bookAndHtmlFormatsInstalled,\n+\t\t\t\t\t\tdisableSanitize);\n         pdfBytes = pdfDocumentFactory.createNewBytesBasedOnOldDocument(pdfBytes);\n         String outputFilename =\n                 originalFilename.replaceFirst(\"[.][^.]+$\", \"\")\n\ndiff --git a/src/main/java/stirling/software/SPDF/model/ApplicationProperties.java b/src/main/java/stirling/software/SPDF/model/ApplicationProperties.java\n--- a/src/main/java/stirling/software/SPDF/model/ApplicationProperties.java\n+++ b/src/main/java/stirling/software/SPDF/model/ApplicationProperties.java\n@@ -283,6 +283,7 @@ public static class System {\n         private Boolean enableAlphaFunctionality;\n         private String enableAnalytics;\n         private Datasource datasource;\n+        private Boolean disableSanitize;\n     }\n \n     @Data\n\ndiff --git a/src/main/java/stirling/software/SPDF/utils/FileToPdf.java b/src/main/java/stirling/software/SPDF/utils/FileToPdf.java\n--- a/src/main/java/stirling/software/SPDF/utils/FileToPdf.java\n+++ b/src/main/java/stirling/software/SPDF/utils/FileToPdf.java\n@@ -26,7 +26,8 @@ public static byte[] convertHtmlToPdf(\n             HTMLToPdfRequest request,\n             byte[] fileBytes,\n             String fileName,\n-            boolean htmlFormatsInstalled)\n+            boolean htmlFormatsInstalled,\n+\t\t\tboolean disableSanitize)\n             throws IOException, InterruptedException {\n \n         Path tempOutputFile = Files.createTempFile(\"output_\", \".pdf\");\n@@ -35,13 +36,12 @@ public static byte[] convertHtmlToPdf(\n         try {\n             if (fileName.endsWith(\".html\")) {\n                 tempInputFile = Files.createTempFile(\"input_\", \".html\");\n-                String sanitizedHtml =\n-                        sanitizeHtmlContent(new String(fileBytes, StandardCharsets.UTF_8));\n+                String sanitizedHtml = sanitizeHtmlContent(new String(fileBytes, StandardCharsets.UTF_8), disableSanitize);\n                 Files.write(tempInputFile, sanitizedHtml.getBytes(StandardCharsets.UTF_8));\n             } else if (fileName.endsWith(\".zip\")) {\n                 tempInputFile = Files.createTempFile(\"input_\", \".zip\");\n                 Files.write(tempInputFile, fileBytes);\n-                sanitizeHtmlFilesInZip(tempInputFile);\n+                sanitizeHtmlFilesInZip(tempInputFile, disableSanitize);\n             } else {\n                 throw new IllegalArgumentException(\"Unsupported file format: \" + fileName);\n             }\n@@ -89,11 +89,11 @@ public static byte[] convertHtmlToPdf(\n         return pdfBytes;\n     }\n \n-    private static String sanitizeHtmlContent(String htmlContent) {\n-        return CustomHtmlSanitizer.sanitize(htmlContent);\n+    private static String sanitizeHtmlContent(String htmlContent, boolean disableSanitize) {\n+        return (!disableSanitize) ? CustomHtmlSanitizer.sanitize(htmlContent) : htmlContent;\n     }\n \n-    private static void sanitizeHtmlFilesInZip(Path zipFilePath) throws IOException {\n+    private static void sanitizeHtmlFilesInZip(Path zipFilePath, boolean disableSanitize) throws IOException {\n         Path tempUnzippedDir = Files.createTempDirectory(\"unzipped_\");\n         try (ZipInputStream zipIn =\n                 ZipSecurity.createHardenedInputStream(\n@@ -106,7 +106,7 @@ private static void sanitizeHtmlFilesInZip(Path zipFilePath) throws IOException\n                     if (entry.getName().toLowerCase().endsWith(\".html\")\n                             || entry.getName().toLowerCase().endsWith(\".htm\")) {\n                         String content = new String(zipIn.readAllBytes(), StandardCharsets.UTF_8);\n-                        String sanitizedContent = sanitizeHtmlContent(content);\n+                        String sanitizedContent = sanitizeHtmlContent(content, disableSanitize);\n                         Files.write(filePath, sanitizedContent.getBytes(StandardCharsets.UTF_8));\n                     } else {\n                         Files.copy(zipIn, filePath);\n\ndiff --git a/src/test/java/stirling/software/SPDF/utils/FileToPdfTest.java b/src/test/java/stirling/software/SPDF/utils/FileToPdfTest.java\n--- a/src/test/java/stirling/software/SPDF/utils/FileToPdfTest.java\n+++ b/src/test/java/stirling/software/SPDF/utils/FileToPdfTest.java\n@@ -15,10 +15,11 @@ public void testConvertHtmlToPdf() {\n         byte[] fileBytes = new byte[0]; // Sample file bytes\n         String fileName = \"test.html\"; // Sample file name\n         boolean htmlFormatsInstalled = true; // Sample boolean value\n+        boolean disableSanitize = false; // Sample boolean value\n \n         // Check if the method throws IOException\n         assertThrows(IOException.class, () -> {\n-            FileToPdf.convertHtmlToPdf(request, fileBytes, fileName, htmlFormatsInstalled);\n+            FileToPdf.convertHtmlToPdf(request, fileBytes, fileName, htmlFormatsInstalled, disableSanitize);\n         });\n     }\n ",
    "output": "added option for disabling HTML Sanitize (#2831)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\n- added disableSanitize: false # set to 'true' to disable Sanitize HTML,\nset to false to enable Sanitize HTML; (can lead to injections in HTML)\n- Some users uses this on local boxes, and uses Google Fonts, and base64\nimage src.\n\n\n### General\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [x] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [x] I have performed a self-review of my own code\n- [ ] My changes generate no new warnings\n\n### Documentation\n\n- [x] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details.\n\n---------\n\nCo-authored-by: blaz.carli <blaz.carli@arctur.si>\nCo-authored-by: Anthony Stirling <77850077+Frooodle@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/web/HomeWebController.java b/src/main/java/stirling/software/SPDF/controller/web/HomeWebController.java\n--- a/src/main/java/stirling/software/SPDF/controller/web/HomeWebController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/web/HomeWebController.java\n@@ -74,6 +74,12 @@ public String root(Model model) {\n         return \"redirect:/\";\n     }\n \n+    @GetMapping(\"/home-legacy\")\n+    public String homeLegacy(Model model) {\n+        model.addAttribute(\"currentPage\", \"home-legacy\");\n+        return \"home-legacy\";\n+    }\n+\n     @GetMapping(value = \"/robots.txt\", produces = MediaType.TEXT_PLAIN_VALUE)\n     @ResponseBody\n     @Hidden",
    "output": "Homepage update (#2663)\n\n# Description\n\nPlease provide a summary of the changes, including relevant motivation\nand context.\n\nCloses #(issue_number)\n\n## Checklist\n\n- [ ] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [ ] I have performed a self-review of my own code\n- [ ] I have attached images of the change if it is UI based\n- [ ] I have commented my code, particularly in hard-to-understand areas\n- [ ] If my code has heavily changed functionality I have updated\nrelevant docs on [Stirling-PDFs doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n- [ ] My changes generate no new warnings\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n---------\n\nCo-authored-by: Reece Browne <reece@stirling.pdf>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java b/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java\n--- a/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java\n+++ b/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java\n@@ -285,7 +285,10 @@ private static List<Integer> handlePart(String part, int totalPages, int offset)\n             String[] rangeParts = part.split(\"-\");\n             try {\n                 int start = Integer.parseInt(rangeParts[0]);\n-                int end = Integer.parseInt(rangeParts[1]);\n+                int end =\n+                        (rangeParts.length > 1 && !rangeParts[1].isEmpty())\n+                                ? Integer.parseInt(rangeParts[1])\n+                                : totalPages;\n                 for (int i = start; i <= end; i++) {\n                     if (i >= 1 && i <= totalPages) {\n                         partResult.add(i - 1 + offset);",
    "output": "[Fix] Handle missing end page in PDF split range (#2816)\n\n## Summary of Changes\n\n**What was changed:**\n- Updated the `handlePart` method to handle cases where the end page is\nnot specified (e.g., '1-').\n- The method now defaults to the last page of the PDF, improving the\nfeature's usability.\n\n**Why the change was made:**\n- Users often forget the total page count when splitting PDFs. The new\nfeature ensures that when only the starting page is specified, the range\ndefaults to the last page, preventing errors like\n`ArrayIndexOutOfBoundsException`.\n\n**Any challenges encountered:**\n- No significant challenges encountered while implementing this feature.\n\n**Closes #1576**\n\n---\n\n## Checklist\n\n### General\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n- [x] I have performed a self-review of my own code\n- [x] My changes generate no new warnings\n\n\n### Testing\n- [x] I have tested my changes locally."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/AnalysisController.java b/src/main/java/stirling/software/SPDF/controller/api/AnalysisController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/AnalysisController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/AnalysisController.java\n@@ -23,18 +23,18 @@\n @Tag(name = \"Analysis\", description = \"Analysis APIs\")\n public class AnalysisController {\n \n-\t\n+\n \t@PostMapping(value = \"/page-count\", consumes = \"multipart/form-data\")\n-\t@Operation(summary = \"Get PDF page count\", \n+\t@Operation(summary = \"Get PDF page count\",\n \t          description = \"Returns total number of pages in PDF. Input:PDF Output:JSON Type:SISO\")\n \tpublic Map<String, Integer> getPageCount(@ModelAttribute PDFFile file) throws IOException {\n \t\ttry (PDDocument document = Loader.loadPDF(file.getFileInput().getBytes())) {\n \t       return Map.of(\"pageCount\", document.getNumberOfPages());\n \t   }\n \t}\n-\t\n+\n     @PostMapping(value =\"/basic-info\", consumes = \"multipart/form-data\")\n-    @Operation(summary = \"Get basic PDF information\", \n+    @Operation(summary = \"Get basic PDF information\",\n                description = \"Returns page count, version, file size. Input:PDF Output:JSON Type:SISO\")\n     public Map<String, Object> getBasicInfo(@ModelAttribute PDFFile file) throws IOException {\n         try (PDDocument document = Loader.loadPDF(file.getFileInput().getBytes())) {\n@@ -47,7 +47,7 @@ public Map<String, Object> getBasicInfo(@ModelAttribute PDFFile file) throws IOE\n     }\n \n     @PostMapping(value =\"/document-properties\", consumes = \"multipart/form-data\")\n-    @Operation(summary = \"Get PDF document properties\", \n+    @Operation(summary = \"Get PDF document properties\",\n                description = \"Returns title, author, subject, etc. Input:PDF Output:JSON Type:SISO\")\n     public Map<String, String> getDocumentProperties(@ModelAttribute PDFFile file) throws IOException {\n         try (PDDocument document = Loader.loadPDF(file.getFileInput().getBytes())) {\n@@ -66,13 +66,13 @@ public Map<String, String> getDocumentProperties(@ModelAttribute PDFFile file) t\n     }\n \n     @PostMapping(value =\"/page-dimensions\", consumes = \"multipart/form-data\")\n-    @Operation(summary = \"Get page dimensions for all pages\", \n+    @Operation(summary = \"Get page dimensions for all pages\",\n                description = \"Returns width and height of each page. Input:PDF Output:JSON Type:SISO\")\n     public List<Map<String, Float>> getPageDimensions(@ModelAttribute PDFFile file) throws IOException {\n         try (PDDocument document = Loader.loadPDF(file.getFileInput().getBytes())) {\n             List<Map<String, Float>> dimensions = new ArrayList<>();\n             PDPageTree pages = document.getPages();\n-            \n+\n             for (PDPage page : pages) {\n                 Map<String, Float> pageDim = new HashMap<>();\n                 pageDim.put(\"width\", page.getBBox().getWidth());\n@@ -84,13 +84,13 @@ public List<Map<String, Float>> getPageDimensions(@ModelAttribute PDFFile file)\n     }\n \n     @PostMapping(value =\"/form-fields\", consumes = \"multipart/form-data\")\n-    @Operation(summary = \"Get form field information\", \n+    @Operation(summary = \"Get form field information\",\n                description = \"Returns count and details of form fields. Input:PDF Output:JSON Type:SISO\")\n     public Map<String, Object> getFormFields(@ModelAttribute PDFFile file) throws IOException {\n         try (PDDocument document = Loader.loadPDF(file.getFileInput().getBytes())) {\n             Map<String, Object> formInfo = new HashMap<>();\n             PDAcroForm form = document.getDocumentCatalog().getAcroForm();\n-            \n+\n             if (form != null) {\n                 formInfo.put(\"fieldCount\", form.getFields().size());\n                 formInfo.put(\"hasXFA\", form.hasXFA());\n@@ -105,7 +105,7 @@ public Map<String, Object> getFormFields(@ModelAttribute PDFFile file) throws IO\n     }\n \n     @PostMapping(value =\"/annotation-info\", consumes = \"multipart/form-data\")\n-    @Operation(summary = \"Get annotation information\", \n+    @Operation(summary = \"Get annotation information\",\n                description = \"Returns count and types of annotations. Input:PDF Output:JSON Type:SISO\")\n     public Map<String, Object> getAnnotationInfo(@ModelAttribute PDFFile file) throws IOException {\n         try (PDDocument document = Loader.loadPDF(file.getFileInput().getBytes())) {\n@@ -128,7 +128,7 @@ public Map<String, Object> getAnnotationInfo(@ModelAttribute PDFFile file) throw\n     }\n \n     @PostMapping(value =\"/font-info\", consumes = \"multipart/form-data\")\n-    @Operation(summary = \"Get font information\", \n+    @Operation(summary = \"Get font information\",\n                description = \"Returns list of fonts used in the document. Input:PDF Output:JSON Type:SISO\")\n     public Map<String, Object> getFontInfo(@ModelAttribute PDFFile file) throws IOException {\n         try (PDDocument document = Loader.loadPDF(file.getFileInput().getBytes())) {\n@@ -148,33 +148,33 @@ public Map<String, Object> getFontInfo(@ModelAttribute PDFFile file) throws IOEx\n     }\n \n     @PostMapping(value =\"/security-info\", consumes = \"multipart/form-data\")\n-    @Operation(summary = \"Get security information\", \n+    @Operation(summary = \"Get security information\",\n                description = \"Returns encryption and permission details. Input:PDF Output:JSON Type:SISO\")\n     public Map<String, Object> getSecurityInfo(@ModelAttribute PDFFile file) throws IOException {\n         try (PDDocument document = Loader.loadPDF(file.getFileInput().getBytes())) {\n             Map<String, Object> securityInfo = new HashMap<>();\n             PDEncryption encryption = document.getEncryption();\n-            \n+\n             if (encryption != null) {\n                 securityInfo.put(\"isEncrypted\", true);\n                 securityInfo.put(\"keyLength\", encryption.getLength());\n-                \n+\n                 // Get permissions\n                 Map<String, Boolean> permissions = new HashMap<>();\n                 permissions.put(\"canPrint\", document.getCurrentAccessPermission().canPrint());\n                 permissions.put(\"canModify\", document.getCurrentAccessPermission().canModify());\n                 permissions.put(\"canExtractContent\", document.getCurrentAccessPermission().canExtractContent());\n                 permissions.put(\"canModifyAnnotations\", document.getCurrentAccessPermission().canModifyAnnotations());\n-                \n+\n                 securityInfo.put(\"permissions\", permissions);\n             } else {\n                 securityInfo.put(\"isEncrypted\", false);\n             }\n-            \n+\n             return securityInfo;\n         }\n     }\n-    \n \n \n-}\n\\ No newline at end of file\n+\n+}",
    "output": "🤖 format everything with pre-commit by <stirlingbot> (#2794)\n\nAuto-generated by [create-pull-request][1] with **stirlingbot**\n\n[1]: https://github.com/peter-evans/create-pull-request\n\nSigned-off-by: stirlingbot[bot] <195170888+stirlingbot[bot]@users.noreply.github.com>\nCo-authored-by: stirlingbot[bot] <195170888+stirlingbot[bot]@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/AnalysisController.java b/src/main/java/stirling/software/SPDF/controller/api/AnalysisController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/AnalysisController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/AnalysisController.java\n@@ -0,0 +1,180 @@\n+package stirling.software.SPDF.controller.api;\n+\n+import org.apache.pdfbox.Loader;\n+import org.apache.pdfbox.cos.COSName;\n+import org.apache.pdfbox.pdmodel.PDDocument;\n+import org.apache.pdfbox.pdmodel.PDPage;\n+import org.apache.pdfbox.pdmodel.PDPageTree;\n+import org.apache.pdfbox.pdmodel.PDDocumentInformation;\n+import org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm;\n+import org.apache.pdfbox.pdmodel.interactive.annotation.PDAnnotation;\n+import org.apache.pdfbox.pdmodel.encryption.PDEncryption;\n+import org.springframework.web.bind.annotation.*;\n+import org.springframework.web.multipart.MultipartFile;\n+import io.swagger.v3.oas.annotations.Operation;\n+import io.swagger.v3.oas.annotations.tags.Tag;\n+import stirling.software.SPDF.model.api.PDFFile;\n+\n+import java.io.IOException;\n+import java.util.*;\n+\n+@RestController\n+@RequestMapping(\"/api/v1/analysis\")\n+@Tag(name = \"Analysis\", description = \"Analysis APIs\")\n+public class AnalysisController {\n+\n+\t\n+\t@PostMapping(value = \"/page-count\", consumes = \"multipart/form-data\")\n+\t@Operation(summary = \"Get PDF page count\", \n+\t          description = \"Returns total number of pages in PDF. Input:PDF Output:JSON Type:SISO\")\n+\tpublic Map<String, Integer> getPageCount(@ModelAttribute PDFFile file) throws IOException {\n+\t\ttry (PDDocument document = Loader.loadPDF(file.getFileInput().getBytes())) {\n+\t       return Map.of(\"pageCount\", document.getNumberOfPages());\n+\t   }\n+\t}\n+\t\n+    @PostMapping(value =\"/basic-info\", consumes = \"multipart/form-data\")\n+    @Operation(summary = \"Get basic PDF information\", \n+               description = \"Returns page count, version, file size. Input:PDF Output:JSON Type:SISO\")\n+    public Map<String, Object> getBasicInfo(@ModelAttribute PDFFile file) throws IOException {\n+        try (PDDocument document = Loader.loadPDF(file.getFileInput().getBytes())) {\n+            Map<String, Object> info = new HashMap<>();\n+            info.put(\"pageCount\", document.getNumberOfPages());\n+            info.put(\"pdfVersion\", document.getVersion());\n+            info.put(\"fileSize\", file.getFileInput().getSize());\n+            return info;\n+        }\n+    }\n+\n+    @PostMapping(value =\"/document-properties\", consumes = \"multipart/form-data\")\n+    @Operation(summary = \"Get PDF document properties\", \n+               description = \"Returns title, author, subject, etc. Input:PDF Output:JSON Type:SISO\")\n+    public Map<String, String> getDocumentProperties(@ModelAttribute PDFFile file) throws IOException {\n+        try (PDDocument document = Loader.loadPDF(file.getFileInput().getBytes())) {\n+            PDDocumentInformation info = document.getDocumentInformation();\n+            Map<String, String> properties = new HashMap<>();\n+            properties.put(\"title\", info.getTitle());\n+            properties.put(\"author\", info.getAuthor());\n+            properties.put(\"subject\", info.getSubject());\n+            properties.put(\"keywords\", info.getKeywords());\n+            properties.put(\"creator\", info.getCreator());\n+            properties.put(\"producer\", info.getProducer());\n+            properties.put(\"creationDate\", info.getCreationDate().toString());\n+            properties.put(\"modificationDate\", info.getModificationDate().toString());\n+            return properties;\n+        }\n+    }\n+\n+    @PostMapping(value =\"/page-dimensions\", consumes = \"multipart/form-data\")\n+    @Operation(summary = \"Get page dimensions for all pages\", \n+               description = \"Returns width and height of each page. Input:PDF Output:JSON Type:SISO\")\n+    public List<Map<String, Float>> getPageDimensions(@ModelAttribute PDFFile file) throws IOException {\n+        try (PDDocument document = Loader.loadPDF(file.getFileInput().getBytes())) {\n+            List<Map<String, Float>> dimensions = new ArrayList<>();\n+            PDPageTree pages = document.getPages();\n+            \n+            for (PDPage page : pages) {\n+                Map<String, Float> pageDim = new HashMap<>();\n+                pageDim.put(\"width\", page.getBBox().getWidth());\n+                pageDim.put(\"height\", page.getBBox().getHeight());\n+                dimensions.add(pageDim);\n+            }\n+            return dimensions;\n+        }\n+    }\n+\n+    @PostMapping(value =\"/form-fields\", consumes = \"multipart/form-data\")\n+    @Operation(summary = \"Get form field information\", \n+               description = \"Returns count and details of form fields. Input:PDF Output:JSON Type:SISO\")\n+    public Map<String, Object> getFormFields(@ModelAttribute PDFFile file) throws IOException {\n+        try (PDDocument document = Loader.loadPDF(file.getFileInput().getBytes())) {\n+            Map<String, Object> formInfo = new HashMap<>();\n+            PDAcroForm form = document.getDocumentCatalog().getAcroForm();\n+            \n+            if (form != null) {\n+                formInfo.put(\"fieldCount\", form.getFields().size());\n+                formInfo.put(\"hasXFA\", form.hasXFA());\n+                formInfo.put(\"isSignaturesExist\", form.isSignaturesExist());\n+            } else {\n+                formInfo.put(\"fieldCount\", 0);\n+                formInfo.put(\"hasXFA\", false);\n+                formInfo.put(\"isSignaturesExist\", false);\n+            }\n+            return formInfo;\n+        }\n+    }\n+\n+    @PostMapping(value =\"/annotation-info\", consumes = \"multipart/form-data\")\n+    @Operation(summary = \"Get annotation information\", \n+               description = \"Returns count and types of annotations. Input:PDF Output:JSON Type:SISO\")\n+    public Map<String, Object> getAnnotationInfo(@ModelAttribute PDFFile file) throws IOException {\n+        try (PDDocument document = Loader.loadPDF(file.getFileInput().getBytes())) {\n+            Map<String, Object> annotInfo = new HashMap<>();\n+            int totalAnnotations = 0;\n+            Map<String, Integer> annotationTypes = new HashMap<>();\n+\n+            for (PDPage page : document.getPages()) {\n+                for (PDAnnotation annot : page.getAnnotations()) {\n+                    totalAnnotations++;\n+                    String subType = annot.getSubtype();\n+                    annotationTypes.merge(subType, 1, Integer::sum);\n+                }\n+            }\n+\n+            annotInfo.put(\"totalCount\", totalAnnotations);\n+            annotInfo.put(\"typeBreakdown\", annotationTypes);\n+            return annotInfo;\n+        }\n+    }\n+\n+    @PostMapping(value =\"/font-info\", consumes = \"multipart/form-data\")\n+    @Operation(summary = \"Get font information\", \n+               description = \"Returns list of fonts used in the document. Input:PDF Output:JSON Type:SISO\")\n+    public Map<String, Object> getFontInfo(@ModelAttribute PDFFile file) throws IOException {\n+        try (PDDocument document = Loader.loadPDF(file.getFileInput().getBytes())) {\n+            Map<String, Object> fontInfo = new HashMap<>();\n+            Set<String> fontNames = new HashSet<>();\n+\n+            for (PDPage page : document.getPages()) {\n+                for (COSName font : page.getResources().getFontNames()) {\n+                    fontNames.add(font.getName());\n+                }\n+            }\n+\n+            fontInfo.put(\"fontCount\", fontNames.size());\n+            fontInfo.put(\"fonts\", fontNames);\n+            return fontInfo;\n+        }\n+    }\n+\n+    @PostMapping(value =\"/security-info\", consumes = \"multipart/form-data\")\n+    @Operation(summary = \"Get security information\", \n+               description = \"Returns encryption and permission details. Input:PDF Output:JSON Type:SISO\")\n+    public Map<String, Object> getSecurityInfo(@ModelAttribute PDFFile file) throws IOException {\n+        try (PDDocument document = Loader.loadPDF(file.getFileInput().getBytes())) {\n+            Map<String, Object> securityInfo = new HashMap<>();\n+            PDEncryption encryption = document.getEncryption();\n+            \n+            if (encryption != null) {\n+                securityInfo.put(\"isEncrypted\", true);\n+                securityInfo.put(\"keyLength\", encryption.getLength());\n+                \n+                // Get permissions\n+                Map<String, Boolean> permissions = new HashMap<>();\n+                permissions.put(\"canPrint\", document.getCurrentAccessPermission().canPrint());\n+                permissions.put(\"canModify\", document.getCurrentAccessPermission().canModify());\n+                permissions.put(\"canExtractContent\", document.getCurrentAccessPermission().canExtractContent());\n+                permissions.put(\"canModifyAnnotations\", document.getCurrentAccessPermission().canModifyAnnotations());\n+                \n+                securityInfo.put(\"permissions\", permissions);\n+            } else {\n+                securityInfo.put(\"isEncrypted\", false);\n+            }\n+            \n+            return securityInfo;\n+        }\n+    }\n+    \n+\n+\n+}\n\\ No newline at end of file",
    "output": "Test cleanup, JVM GC and api (#2787)\n\n# Description of Changes\n\nPlease provide a summary of the changes, including:\n\n- What was changed\n- Why the change was made\n- Any challenges encountered\n\nCloses #(issue_number)\n\n---\n\n## Checklist\n\n### General\n\n- [ ] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [ ] I have read the [Stirling-PDF Developer\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md)\n(if applicable)\n- [ ] I have read the [How to add new languages to\nStirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md)\n(if applicable)\n- [ ] I have performed a self-review of my own code\n- [ ] My changes generate no new warnings\n\n### Documentation\n\n- [ ] I have updated relevant docs on [Stirling-PDF's doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n(if functionality has heavily changed)\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n### UI Changes (if applicable)\n\n- [ ] Screenshots or videos demonstrating the UI changes are attached\n(e.g., as comments or direct attachments in the PR)\n\n### Testing (if applicable)\n\n- [ ] I have tested my changes locally. Refer to the [Testing\nGuide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md#6-testing)\nfor more details.\n\n---------\n\nCo-authored-by: a <a>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/service/MetricsAggregatorService.java b/src/main/java/stirling/software/SPDF/service/MetricsAggregatorService.java\n--- a/src/main/java/stirling/software/SPDF/service/MetricsAggregatorService.java\n+++ b/src/main/java/stirling/software/SPDF/service/MetricsAggregatorService.java\n@@ -39,7 +39,7 @@ public void aggregateAndSendMetrics() {\n                             if (method == null || uri == null) {\n                                 return;\n                             }\n-                            if (!method.equals(\"GET\") && !method.equals(\"POST\")) {\n+                            if (!\"GET\".equals(method) && !\"POST\".equals(method)) {\n                                 return;\n                             }\n                             // Skip URIs that are 2 characters or shorter",
    "output": "Switch order of literals to prevent NullPointerException (#2769)\n\nThis change defensively switches the order of literals in comparison\nexpressions to ensure that no null pointer exceptions are unexpectedly\nthrown. Runtime exceptions especially can cause exceptional and\nunexpected code paths to be taken, and this can result in unexpected\nbehavior.\n\nBoth simple vulnerabilities (like information disclosure) and complex\nvulnerabilities (like business logic flaws) can take advantage of these\nunexpected code paths.\n\nOur changes look something like this:\n\n```diff\n  String fieldName = header.getFieldName();\n  String fieldValue = header.getFieldValue();\n- if(fieldName.equals(\"requestId\")) {\n+ if(\"requestId\".equals(fieldName)) {\n    logRequest(fieldValue);\n  }\n```\n\n<details>\n  <summary>More reading</summary>\n\n*\n[https://cwe.mitre.org/data/definitions/476.html](https://cwe.mitre.org/data/definitions/476.html)\n*\n[https://en.wikibooks.org/wiki/Java_Programming/Preventing_NullPointerException](https://en.wikibooks.org/wiki/Java_Programming/Preventing_NullPointerException)\n*\n[https://rules.sonarsource.com/java/RSPEC-1132/](https://rules.sonarsource.com/java/RSPEC-1132/)\n</details>\n\n🧚🤖  Powered by Pixeebot  \n\n[Feedback](https://ask.pixee.ai/feedback) |\n[Community](https://pixee-community.slack.com/signup#/domain-signup) |\n[Docs](https://docs.pixee.ai/) | Codemod ID:\npixee:java/switch-literal-first\n![](https://d1zaessa2hpsmj.cloudfront.net/pixel/v1/track?writeKey=2PI43jNm7atYvAuK7rJUz3Kcd6A&event=DRIP_PR%7CStirling-Tools%2FStirling-PDF%7Cc45a84d1797c774f11f1a6a0ccbbd8ee5a208be3)\n\n\n<!--{\"type\":\"DRIP\",\"codemod\":\"pixee:java/switch-literal-first\"}-->\n\nCo-authored-by: pixeebot[bot] <104101892+pixeebot[bot]@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/EE/EEAppConfig.java b/src/main/java/stirling/software/SPDF/EE/EEAppConfig.java\n--- a/src/main/java/stirling/software/SPDF/EE/EEAppConfig.java\n+++ b/src/main/java/stirling/software/SPDF/EE/EEAppConfig.java\n@@ -25,7 +25,7 @@ public EEAppConfig(\n \n     @Bean(name = \"runningEE\")\n     public boolean runningEnterpriseEdition() {\n-    \treturn licenseKeyChecker.getEnterpriseEnabledResult();\n+        return licenseKeyChecker.getEnterpriseEnabledResult();\n     }\n \n     @Bean(name = \"SSOAutoLogin\")\n\ndiff --git a/src/main/java/stirling/software/SPDF/config/security/database/DatabaseConfig.java b/src/main/java/stirling/software/SPDF/config/security/database/DatabaseConfig.java\n--- a/src/main/java/stirling/software/SPDF/config/security/database/DatabaseConfig.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/database/DatabaseConfig.java\n@@ -33,7 +33,11 @@ public class DatabaseConfig {\n     public DatabaseConfig(\n             ApplicationProperties applicationProperties,\n             @Qualifier(\"runningEE\") boolean runningEE) {\n-    \tDATASOURCE_DEFAULT_URL = \"jdbc:h2:file:\" + InstallationPathConfig.getConfigPath() + File.separator + \"stirling-pdf-DB-2.3.232;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE\";\n+        DATASOURCE_DEFAULT_URL =\n+                \"jdbc:h2:file:\"\n+                        + InstallationPathConfig.getConfigPath()\n+                        + File.separator\n+                        + \"stirling-pdf-DB-2.3.232;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE\";\n         this.applicationProperties = applicationProperties;\n         this.runningEE = runningEE;\n     }\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/web/GeneralWebController.java b/src/main/java/stirling/software/SPDF/controller/web/GeneralWebController.java\n--- a/src/main/java/stirling/software/SPDF/controller/web/GeneralWebController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/web/GeneralWebController.java\n@@ -55,7 +55,10 @@ public String pipelineForm(Model model) {\n         List<String> pipelineConfigs = new ArrayList<>();\n         List<Map<String, String>> pipelineConfigsWithNames = new ArrayList<>();\n         if (new File(InstallationPathConfig.getPipelineDefaultWebUIConfigsDir()).exists()) {\n-            try (Stream<Path> paths = Files.walk(Paths.get(InstallationPathConfig.getPipelineDefaultWebUIConfigsDir()))) {\n+            try (Stream<Path> paths =\n+                    Files.walk(\n+                            Paths.get(\n+                                    InstallationPathConfig.getPipelineDefaultWebUIConfigsDir()))) {\n                 List<Path> jsonFiles =\n                         paths.filter(Files::isRegularFile)\n                                 .filter(p -> p.toString().endsWith(\".json\"))",
    "output": "#2418 updating jpackage config (#2713)\n\n# Description\r\n\r\nUpdating the `jpackage` configuration in our build.gradle and CI to\r\nenable installation of the app on multiple OSs\r\n\r\nCloses #2418 \r\n\r\n## Checklist\r\n\r\n- [x] I have read the [Contribution\r\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\r\n- [x] I have performed a self-review of my own code\r\n- [x] I have attached images of the change if it is UI based\r\n- [x] I have commented my code, particularly in hard-to-understand areas\r\n- [x] If my code has heavily changed functionality I have updated\r\nrelevant docs on [Stirling-PDFs doc\r\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\r\n- [x] My changes generate no new warnings\r\n- [x] I have read the section [Add New Translation\r\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\r\n(for new translation tags only)"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/model/api/misc/OptimizePdfRequest.java b/src/main/java/stirling/software/SPDF/model/api/misc/OptimizePdfRequest.java\n--- a/src/main/java/stirling/software/SPDF/model/api/misc/OptimizePdfRequest.java\n+++ b/src/main/java/stirling/software/SPDF/model/api/misc/OptimizePdfRequest.java\n@@ -26,7 +26,7 @@ public class OptimizePdfRequest extends PDFFile {\n \n     @Schema(\n             description =\n-                    \"Whether to normalize the PDF content for better compatibility. Default is true.\",\n-            defaultValue = \"true\")\n-    private Boolean normalize = true;\n+                    \"Whether to normalize the PDF content for better compatibility. Default is false.\",\n+            defaultValue = \"false\")\n+    private Boolean normalize = false;\n }",
    "output": "Update OptimizePdfRequest.java (#2720)\n\n# Description\n\nPlease provide a summary of the changes, including relevant motivation\nand context.\n\nCloses #2417\n\n## Checklist\n\n- [ ] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [ ] I have performed a self-review of my own code\n- [ ] I have attached images of the change if it is UI based\n- [ ] I have commented my code, particularly in hard-to-understand areas\n- [ ] If my code has heavily changed functionality I have updated\nrelevant docs on [Stirling-PDFs doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n- [ ] My changes generate no new warnings\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/InstallationPathConfig.java b/src/main/java/stirling/software/SPDF/config/InstallationPathConfig.java\n--- a/src/main/java/stirling/software/SPDF/config/InstallationPathConfig.java\n+++ b/src/main/java/stirling/software/SPDF/config/InstallationPathConfig.java\n@@ -23,12 +23,12 @@ public class InstallationPathConfig {\n     private static final String PIPELINE_WATCHED_FOLDERS_PATH;\n     private static final String PIPELINE_FINISHED_FOLDERS_PATH;\n     private static final String PIPELINE_DEFAULT_WEB_UI_CONFIGS;\n-    \n+\n     // Custom file paths\n     private static final String STATIC_PATH;\n     private static final String TEMPLATES_PATH;\n     private static final String SIGNATURES_PATH;\n-    \n+\n     static {\n         BASE_PATH = initializeBasePath();\n \n@@ -47,7 +47,7 @@ public class InstallationPathConfig {\n         PIPELINE_WATCHED_FOLDERS_PATH = PIPELINE_PATH + \"watchedFolders\" + File.separator;\n         PIPELINE_FINISHED_FOLDERS_PATH = PIPELINE_PATH + \"finishedFolders\" + File.separator;\n         PIPELINE_DEFAULT_WEB_UI_CONFIGS = PIPELINE_PATH + \"defaultWebUIConfigs\" + File.separator;\n-        \n+\n         // Initialize custom file paths\n         STATIC_PATH = CUSTOM_FILES_PATH + \"static\" + File.separator;\n         TEMPLATES_PATH = CUSTOM_FILES_PATH + \"templates\" + File.separator;\n@@ -123,7 +123,7 @@ public static String getPipelineFinishedFoldersDir() {\n     public static String getPipelineDefaultWebUIConfigsDir() {\n         return PIPELINE_DEFAULT_WEB_UI_CONFIGS;\n     }\n-    \n+\n     public static String getStaticPath() {\n         return STATIC_PATH;\n     }\n\ndiff --git a/src/main/java/stirling/software/SPDF/config/security/database/DatabaseConfig.java b/src/main/java/stirling/software/SPDF/config/security/database/DatabaseConfig.java\n--- a/src/main/java/stirling/software/SPDF/config/security/database/DatabaseConfig.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/database/DatabaseConfig.java\n@@ -21,7 +21,7 @@\n public class DatabaseConfig {\n \n     public final String DATASOURCE_DEFAULT_URL;\n-            \n+\n     public static final String DATASOURCE_URL_TEMPLATE = \"jdbc:%s://%s:%4d/%s\";\n     public static final String DEFAULT_DRIVER = \"org.h2.Driver\";\n     public static final String DEFAULT_USERNAME = \"sa\";",
    "output": "🤖 format everything with pre-commit by <github-actions[bot]> (#2685)\n\nAuto-generated by [create-pull-request][1]\n\n[1]: https://github.com/peter-evans/create-pull-request\n\n---------\n\nCo-authored-by: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>\nCo-authored-by: Ludy <Ludy87@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java b/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java\n--- a/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java\n+++ b/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java\n@@ -182,7 +182,6 @@ public void init() {\n         addEndpointToGroup(\"Python\", \"extract-image-scans\");\n         addEndpointToGroup(\"Python\", \"html-to-pdf\");\n         addEndpointToGroup(\"Python\", \"url-to-pdf\");\n-        addEndpointToGroup(\"Python\", \"pdf-to-img\");\n         addEndpointToGroup(\"Python\", \"file-to-pdf\");\n \n         // openCV",
    "output": "test all pages load correctly  (#2699)\n\n# Description\n\nPlease provide a summary of the changes, including relevant motivation\nand context.\n\nCloses #(issue_number)\n\n## Checklist\n\n- [ ] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [ ] I have performed a self-review of my own code\n- [ ] I have attached images of the change if it is UI based\n- [ ] I have commented my code, particularly in hard-to-understand areas\n- [ ] If my code has heavily changed functionality I have updated\nrelevant docs on [Stirling-PDFs doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n- [ ] My changes generate no new warnings\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/EE/EEAppConfig.java b/src/main/java/stirling/software/SPDF/EE/EEAppConfig.java\n--- a/src/main/java/stirling/software/SPDF/EE/EEAppConfig.java\n+++ b/src/main/java/stirling/software/SPDF/EE/EEAppConfig.java\n@@ -25,7 +25,7 @@ public EEAppConfig(\n \n     @Bean(name = \"runningEE\")\n     public boolean runningEnterpriseEdition() {\n-        return licenseKeyChecker.getEnterpriseEnabledResult();\n+    \treturn licenseKeyChecker.getEnterpriseEnabledResult();\n     }\n \n     @Bean(name = \"SSOAutoLogin\")\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/api/security/WatermarkController.java b/src/main/java/stirling/software/SPDF/controller/api/security/WatermarkController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/security/WatermarkController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/security/WatermarkController.java\n@@ -214,6 +214,7 @@ private void addTextWatermark(\n                                 + Math.abs(watermarkHeight * Math.cos(radians)));\n \n         // Calculating the number of rows and columns.\n+\n         int watermarkRows = (int) (pageHeight / newWatermarkHeight + 1);\n         int watermarkCols = (int) (pageWidth / newWatermarkWidth + 1);\n ",
    "output": "Add tests via TestDriverAI (#1957) (#2005)\n\n* initial Commit\n\n* update prerun\n\n* tweak the prompt\n\n* update the test\n\n* finetune prompt\n\n* change the prompt\n\n* minor change to retry test\n\n* add debug\n\n---------\n\n# Description\n\nPlease provide a summary of the changes, including relevant motivation\nand context.\n\nCloses #(issue_number)\n\n## Checklist\n\n- [ ] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [ ] I have performed a self-review of my own code\n- [ ] I have commented my code, particularly in hard-to-understand areas\n- [ ] My changes generate no new warnings\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n---------\n\nSigned-off-by: GitHub Action <action@github.com>\nSigned-off-by: dependabot[bot] <support@github.com>\nSigned-off-by: Ludovic Ortega <ludovic.ortega@adminafk.fr>\nCo-authored-by: Tarun Kumar S <srfashions.tarun@gmail.com>\nCo-authored-by: Ian Jennings <ian@meetjennings.com>\nCo-authored-by: Corbinian Grimm <23664150+pixma140@users.noreply.github.com>\nCo-authored-by: albanobattistella <34811668+albanobattistella@users.noreply.github.com>\nCo-authored-by: Eric <71648843+sbplat@users.noreply.github.com>\nCo-authored-by: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>\nCo-authored-by: GitHub Action <action@github.com>\nCo-authored-by: swanemar <107953493+swanemar@users.noreply.github.com>\nCo-authored-by: pixeebot[bot] <104101892+pixeebot[bot]@users.noreply.github.com>\nCo-authored-by: github-actions[bot] <github-actions[bot]@users.noreply.github.com>\nCo-authored-by: Manuel Mora Gordillo <manuito@gmail.com>\nCo-authored-by: Manu <manuel@fusiontelecom.co>\nCo-authored-by: Ludy <Ludy87@users.noreply.github.com>\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>\nCo-authored-by: Florian Fish <florian@poissonmail.fr>\nCo-authored-by: reecebrowne <74901996+reecebrowne@users.noreply.github.com>\nCo-authored-by: Dimitrios Kaitantzidis <james_k23@hotmail.gr>\nCo-authored-by: Rania Amina <reaamina@gmail.com>\nCo-authored-by: Copilot Autofix powered by AI <62310815+github-advanced-security[bot]@users.noreply.github.com>\nCo-authored-by: Ludovic Ortega <ludovic.ortega@adminafk.fr>\nCo-authored-by: Philip H. <47042125+pheiduck@users.noreply.github.com>\nCo-authored-by: Saud Fatayerji <Sf298@users.noreply.github.com>\nCo-authored-by: MaratheHarshad <97970262+MaratheHarshad@users.noreply.github.com>\nCo-authored-by: Harshad Marathe <harshad@DESKTOP-1MNKUHA>\nCo-authored-by: ninjat <hotanya.r@gmail.com>\nCo-authored-by: Peter Dave Hello <hsu@peterdavehello.org>\nCo-authored-by: Rafael Encinas <rafael.encinas@encora.com>\nCo-authored-by: Renan <82916964+thisisrenan@users.noreply.github.com>\nCo-authored-by: leo-jmateo <128976497+leo-jmateo@users.noreply.github.com>\nCo-authored-by: S. Neuhaus <neuhaus@users.noreply.github.com>\nCo-authored-by: Dimitris Kaitantzidis <44621809+DimK10@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/UserService.java b/src/main/java/stirling/software/SPDF/config/security/UserService.java\n--- a/src/main/java/stirling/software/SPDF/config/security/UserService.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/UserService.java\n@@ -329,12 +329,16 @@ public boolean isPasswordCorrect(User user, String currentPassword) {\n \n     public boolean isUsernameValid(String username) {\n         // Checks whether the simple username is formatted correctly\n+        // Regular expression for user name: Min. 3 characters, max. 50 characters\n         boolean isValidSimpleUsername =\n-                username.matches(\"^[a-zA-Z0-9][a-zA-Z0-9@._+-]*[a-zA-Z0-9]$\");\n+                username.matches(\"^[a-zA-Z0-9](?!.*[-@._+]{2,})[a-zA-Z0-9@._+-]{1,48}[a-zA-Z0-9]$\");\n+\n         // Checks whether the email address is formatted correctly\n+        // Regular expression for email addresses: Max. 320 characters, with RFC-like validation\n         boolean isValidEmail =\n                 username.matches(\n-                        \"^(?=.{1,64}@)[A-Za-z0-9]+(\\\\.[A-Za-z0-9_+.-]+)*@[^-][A-Za-z0-9-]+(\\\\.[A-Za-z0-9-]+)*(\\\\.[A-Za-z]{2,})$\");\n+                        \"^(?=.{1,320}$)(?=.{1,64}@)[A-Za-z0-9](?:[A-Za-z0-9_.+-]*[A-Za-z0-9])?@[^-][A-Za-z0-9-]+(?:\\\\\\\\.[A-Za-z0-9-]+)*(?:\\\\\\\\.[A-Za-z]{2,})$\");\n+\n         List<String> notAllowedUserList = new ArrayList<>();\n         notAllowedUserList.add(\"ALL_USERS\".toLowerCase());\n         boolean notAllowedUser = notAllowedUserList.contains(username.toLowerCase());",
    "output": "Restriction of username and email (#2676)\n\n# Description\n\n-\nhttps://github.com/Stirling-Tools/Stirling-PDF/security/code-scanning/8\n-\nhttps://github.com/Stirling-Tools/Stirling-PDF/security/code-scanning/9\n-\nhttps://github.com/Stirling-Tools/Stirling-PDF/security/code-scanning/21\n-\nhttps://github.com/Stirling-Tools/Stirling-PDF/security/code-scanning/22\n\n## Checklist\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have performed a self-review of my own code\n- [ ] I have attached images of the change if it is UI based\n- [ ] I have commented my code, particularly in hard-to-understand areas\n- [ ] If my code has heavily changed functionality I have updated\nrelevant docs on [Stirling-PDFs doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n- [x] My changes generate no new warnings\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/InstallationPathConfig.java b/src/main/java/stirling/software/SPDF/config/InstallationPathConfig.java\n--- a/src/main/java/stirling/software/SPDF/config/InstallationPathConfig.java\n+++ b/src/main/java/stirling/software/SPDF/config/InstallationPathConfig.java\n@@ -22,12 +22,13 @@ public class InstallationPathConfig {\n     // Pipeline paths\n     private static final String PIPELINE_WATCHED_FOLDERS_PATH;\n     private static final String PIPELINE_FINISHED_FOLDERS_PATH;\n-\n+    private static final String PIPELINE_DEFAULT_WEB_UI_CONFIGS;\n+    \n     // Custom file paths\n     private static final String STATIC_PATH;\n     private static final String TEMPLATES_PATH;\n     private static final String SIGNATURES_PATH;\n-\n+    \n     static {\n         BASE_PATH = initializeBasePath();\n \n@@ -45,7 +46,8 @@ public class InstallationPathConfig {\n         // Initialize pipeline paths\n         PIPELINE_WATCHED_FOLDERS_PATH = PIPELINE_PATH + \"watchedFolders\" + File.separator;\n         PIPELINE_FINISHED_FOLDERS_PATH = PIPELINE_PATH + \"finishedFolders\" + File.separator;\n-\n+        PIPELINE_DEFAULT_WEB_UI_CONFIGS = PIPELINE_PATH + \"defaultWebUIConfigs\" + File.separator;\n+        \n         // Initialize custom file paths\n         STATIC_PATH = CUSTOM_FILES_PATH + \"static\" + File.separator;\n         TEMPLATES_PATH = CUSTOM_FILES_PATH + \"templates\" + File.separator;\n@@ -118,6 +120,10 @@ public static String getPipelineFinishedFoldersDir() {\n         return PIPELINE_FINISHED_FOLDERS_PATH;\n     }\n \n+    public static String getPipelineDefaultWebUIConfigsDir() {\n+        return PIPELINE_DEFAULT_WEB_UI_CONFIGS;\n+    }\n+    \n     public static String getStaticPath() {\n         return STATIC_PATH;\n     }\n\ndiff --git a/src/main/java/stirling/software/SPDF/config/security/database/DatabaseConfig.java b/src/main/java/stirling/software/SPDF/config/security/database/DatabaseConfig.java\n--- a/src/main/java/stirling/software/SPDF/config/security/database/DatabaseConfig.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/database/DatabaseConfig.java\n@@ -1,5 +1,7 @@\n package stirling.software.SPDF.config.security.database;\n \n+import java.io.File;\n+\n import javax.sql.DataSource;\n \n import org.springframework.beans.factory.annotation.Qualifier;\n@@ -9,6 +11,7 @@\n \n import lombok.Getter;\n import lombok.extern.slf4j.Slf4j;\n+import stirling.software.SPDF.config.InstallationPathConfig;\n import stirling.software.SPDF.model.ApplicationProperties;\n import stirling.software.SPDF.model.provider.UnsupportedProviderException;\n \n@@ -17,8 +20,8 @@\n @Configuration\n public class DatabaseConfig {\n \n-    public static final String DATASOURCE_DEFAULT_URL =\n-            \"jdbc:h2:file:./configs/stirling-pdf-DB-2.3.232;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE\";\n+    public final String DATASOURCE_DEFAULT_URL;\n+            \n     public static final String DATASOURCE_URL_TEMPLATE = \"jdbc:%s://%s:%4d/%s\";\n     public static final String DEFAULT_DRIVER = \"org.h2.Driver\";\n     public static final String DEFAULT_USERNAME = \"sa\";\n@@ -30,6 +33,7 @@ public class DatabaseConfig {\n     public DatabaseConfig(\n             ApplicationProperties applicationProperties,\n             @Qualifier(\"runningEE\") boolean runningEE) {\n+    \tDATASOURCE_DEFAULT_URL = \"jdbc:h2:file:\" + InstallationPathConfig.getConfigPath() + File.separator + \"stirling-pdf-DB-2.3.232;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE\";\n         this.applicationProperties = applicationProperties;\n         this.runningEE = runningEE;\n     }\n\ndiff --git a/src/main/java/stirling/software/SPDF/config/security/database/DatabaseService.java b/src/main/java/stirling/software/SPDF/config/security/database/DatabaseService.java\n--- a/src/main/java/stirling/software/SPDF/config/security/database/DatabaseService.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/database/DatabaseService.java\n@@ -26,6 +26,7 @@\n import org.springframework.stereotype.Service;\n \n import lombok.extern.slf4j.Slf4j;\n+import stirling.software.SPDF.config.InstallationPathConfig;\n import stirling.software.SPDF.config.interfaces.DatabaseInterface;\n import stirling.software.SPDF.model.ApplicationProperties;\n import stirling.software.SPDF.model.exception.BackupNotFoundException;\n@@ -37,12 +38,14 @@ public class DatabaseService implements DatabaseInterface {\n \n     public static final String BACKUP_PREFIX = \"backup_\";\n     public static final String SQL_SUFFIX = \".sql\";\n-    private static final String BACKUP_DIR = \"configs/db/backup/\";\n+    private final Path BACKUP_DIR;\n \n     private final ApplicationProperties applicationProperties;\n     private final DataSource dataSource;\n \n     public DatabaseService(ApplicationProperties applicationProperties, DataSource dataSource) {\n+        this.BACKUP_DIR =\n+                Paths.get(InstallationPathConfig.getConfigPath(), \"db\", \"backup\").normalize();\n         this.applicationProperties = applicationProperties;\n         this.dataSource = dataSource;\n     }\n@@ -56,9 +59,8 @@ public DatabaseService(ApplicationProperties applicationProperties, DataSource d\n     @Override\n     public boolean hasBackup() {\n         createBackupDirectory();\n-        Path filePath = Paths.get(BACKUP_DIR);\n \n-        if (Files.exists(filePath)) {\n+        if (Files.exists(BACKUP_DIR)) {\n             return !getBackupList().isEmpty();\n         }\n \n@@ -77,11 +79,9 @@ public List<FileInfo> getBackupList() {\n         if (isH2Database()) {\n             createBackupDirectory();\n \n-            Path backupPath = Paths.get(BACKUP_DIR);\n-\n             try (DirectoryStream<Path> stream =\n                     Files.newDirectoryStream(\n-                            backupPath,\n+                            BACKUP_DIR,\n                             path ->\n                                     path.getFileName().toString().startsWith(BACKUP_PREFIX)\n                                             && path.getFileName()\n@@ -114,10 +114,9 @@ public List<FileInfo> getBackupList() {\n     }\n \n     private void createBackupDirectory() {\n-        Path backupPath = Paths.get(BACKUP_DIR);\n-        if (!Files.exists(backupPath)) {\n+        if (!Files.exists(BACKUP_DIR)) {\n             try {\n-                Files.createDirectories(backupPath);\n+                Files.createDirectories(BACKUP_DIR);\n                 log.debug(\"create backup directory: {}\", BACKUP_DIR);\n             } catch (IOException e) {\n                 log.error(\"Error create backup directory: {}\", e.getMessage(), e);\n@@ -271,7 +270,7 @@ public boolean deleteBackupFile(String fileName) throws IOException {\n      */\n     public Path getBackupFilePath(String fileName) {\n         createBackupDirectory();\n-        Path filePath = Paths.get(BACKUP_DIR, fileName).normalize();\n+        Path filePath = BACKUP_DIR.resolve(fileName).normalize();\n         if (!filePath.startsWith(BACKUP_DIR)) {\n             throw new SecurityException(\"Path traversal detected\");\n         }\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/web/GeneralWebController.java b/src/main/java/stirling/software/SPDF/controller/web/GeneralWebController.java\n--- a/src/main/java/stirling/software/SPDF/controller/web/GeneralWebController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/web/GeneralWebController.java\n@@ -54,8 +54,8 @@ public String pipelineForm(Model model) {\n         model.addAttribute(\"currentPage\", \"pipeline\");\n         List<String> pipelineConfigs = new ArrayList<>();\n         List<Map<String, String>> pipelineConfigsWithNames = new ArrayList<>();\n-        if (new File(\"./pipeline/defaultWebUIConfigs/\").exists()) {\n-            try (Stream<Path> paths = Files.walk(Paths.get(\"./pipeline/defaultWebUIConfigs/\"))) {\n+        if (new File(InstallationPathConfig.getPipelineDefaultWebUIConfigsDir()).exists()) {\n+            try (Stream<Path> paths = Files.walk(Paths.get(InstallationPathConfig.getPipelineDefaultWebUIConfigsDir()))) {\n                 List<Path> jsonFiles =\n                         paths.filter(Files::isRegularFile)\n                                 .filter(p -> p.toString().endsWith(\".json\"))",
    "output": "install paths dynmaic (#2668)\n\n# Description\n\nPlease provide a summary of the changes, including relevant motivation\nand context.\n\nCloses #(issue_number)\n\n## Checklist\n\n- [ ] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [ ] I have performed a self-review of my own code\n- [ ] I have attached images of the change if it is UI based\n- [ ] I have commented my code, particularly in hard-to-understand areas\n- [ ] If my code has heavily changed functionality I have updated\nrelevant docs on [Stirling-PDFs doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n- [ ] My changes generate no new warnings\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)"
  },
  {
    "input": "diff --git a/src/test/java/stirling/software/SPDF/SPDFApplicationTest.java b/src/test/java/stirling/software/SPDF/SPDFApplicationTest.java\n--- a/src/test/java/stirling/software/SPDF/SPDFApplicationTest.java\n+++ b/src/test/java/stirling/software/SPDF/SPDFApplicationTest.java\n@@ -29,7 +29,7 @@ public class SPDFApplicationTest {\n \n     @Mock\n     private ApplicationProperties applicationProperties;\n-    \n+\n     @InjectMocks\n     private SPDFApplication SPDFApplication;\n \n\ndiff --git a/src/test/java/stirling/software/SPDF/config/security/database/DatabaseConfigTest.java b/src/test/java/stirling/software/SPDF/config/security/database/DatabaseConfigTest.java\n--- a/src/test/java/stirling/software/SPDF/config/security/database/DatabaseConfigTest.java\n+++ b/src/test/java/stirling/software/SPDF/config/security/database/DatabaseConfigTest.java\n@@ -103,4 +103,4 @@ void exceptionThrown_whenDBTypeIsUnsupported(String datasourceType) {\n \n         assertThrows(UnsupportedProviderException.class, () -> databaseConfig.dataSource());\n     }\n-}\n\\ No newline at end of file\n+}\n\ndiff --git a/src/test/java/stirling/software/SPDF/controller/api/RearrangePagesPDFControllerTest.java b/src/test/java/stirling/software/SPDF/controller/api/RearrangePagesPDFControllerTest.java\n--- a/src/test/java/stirling/software/SPDF/controller/api/RearrangePagesPDFControllerTest.java\n+++ b/src/test/java/stirling/software/SPDF/controller/api/RearrangePagesPDFControllerTest.java\n@@ -98,4 +98,4 @@ void oddEvenMerge_multi_test(int totalNumberOfPages, String expectedPageOrder) {\n         assertNotNull(newPageOrder, \"Returning null instead of page order list\");\n         assertEquals(Arrays.stream(expectedPageOrder.split(\",\")).map(Integer::parseInt).toList(), newPageOrder, \"Page order doesn't match\");\n     }\n-}\n\\ No newline at end of file\n+}",
    "output": "Fix: Thymeleaf syntax `(/*[[...]]*/)` (#2659)\n\n# Description\n\nPlease provide a summary of the changes, including relevant motivation\nand context.\n\nCloses #(issue_number)\n\n## Checklist\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have performed a self-review of my own code\n- [ ] I have attached images of the change if it is UI based\n- [ ] I have commented my code, particularly in hard-to-understand areas\n- [ ] If my code has heavily changed functionality I have updated\nrelevant docs on [Stirling-PDFs doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n- [x] My changes generate no new warnings\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/database/DatabaseService.java b/src/main/java/stirling/software/SPDF/config/security/database/DatabaseService.java\n--- a/src/main/java/stirling/software/SPDF/config/security/database/DatabaseService.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/database/DatabaseService.java\n@@ -55,6 +55,7 @@ public DatabaseService(ApplicationProperties applicationProperties, DataSource d\n      */\n     @Override\n     public boolean hasBackup() {\n+        createBackupDirectory();\n         Path filePath = Paths.get(BACKUP_DIR);\n \n         if (Files.exists(filePath)) {\n@@ -74,6 +75,8 @@ public List<FileInfo> getBackupList() {\n         List<FileInfo> backupFiles = new ArrayList<>();\n \n         if (isH2Database()) {\n+            createBackupDirectory();\n+\n             Path backupPath = Paths.get(BACKUP_DIR);\n \n             try (DirectoryStream<Path> stream =\n@@ -110,6 +113,18 @@ public List<FileInfo> getBackupList() {\n         return backupFiles;\n     }\n \n+    private void createBackupDirectory() {\n+        Path backupPath = Paths.get(BACKUP_DIR);\n+        if (!Files.exists(backupPath)) {\n+            try {\n+                Files.createDirectories(backupPath);\n+                log.debug(\"create backup directory: {}\", BACKUP_DIR);\n+            } catch (IOException e) {\n+                log.error(\"Error create backup directory: {}\", e.getMessage(), e);\n+            }\n+        }\n+    }\n+\n     @Override\n     public void importDatabase() {\n         if (!hasBackup()) throw new BackupNotFoundException(\"No backup scripts were found.\");\n@@ -255,6 +270,7 @@ public boolean deleteBackupFile(String fileName) throws IOException {\n      * @return the <code>Path</code> object for the given file name\n      */\n     public Path getBackupFilePath(String fileName) {\n+        createBackupDirectory();\n         Path filePath = Paths.get(BACKUP_DIR, fileName).normalize();\n         if (!filePath.startsWith(BACKUP_DIR)) {\n             throw new SecurityException(\"Path traversal detected\");",
    "output": "Fix: `NoSuchFileException` if `configs\\db\\backup` is not present on first start (#2665)\n\n# Description\n\n```bash\n20:38:21.452 [restartedMain] ERROR s.s.S.c.s.database.DatabaseService - Error reading backup directory: configs\\db\\backup\njava.nio.file.NoSuchFileException: configs\\db\\backup\n        at java.base/sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:85)\n        at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:103)\n        at java.base/sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:108)\n        at java.base/sun.nio.fs.WindowsDirectoryStream.<init>(WindowsDirectoryStream.java:86)\n        at java.base/sun.nio.fs.WindowsFileSystemProvider.newDirectoryStream(WindowsFileSystemProvider.java:541)\n        at java.base/java.nio.file.Files.newDirectoryStream(Files.java:613)\n        at stirling.software.SPDF.config.security.database.DatabaseService.getBackupList(DatabaseService.java:80)\n        at stirling.software.SPDF.config.security.database.DatabaseService.exportDatabase(DatabaseService.java:156)\n        at stirling.software.SPDF.config.security.UserService.saveUser(UserService.java:214)\n        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)\n        at java.base/java.lang.reflect.Method.invoke(Method.java:580)\n        at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:359)\n        at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:723)\n        at stirling.software.SPDF.config.security.UserService$$SpringCGLIB$$3.saveUser(<generated>)\n        at stirling.software.SPDF.config.security.InitialSecuritySetup.createDefaultAdminUser(InitialSecuritySetup.java:76)\n        at stirling.software.SPDF.config.security.InitialSecuritySetup.initializeAdminUser(InitialSecuritySetup.java:67)\n        at stirling.software.SPDF.config.security.InitialSecuritySetup.init(InitialSecuritySetup.java:42)\n        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)\n        at java.base/java.lang.reflect.Method.invoke(Method.java:580)\n        at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMethod.invoke(InitDestroyAnnotationBeanPostProcessor.java:457)\n        at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeInitMethods(InitDestroyAnnotationBeanPostProcessor.java:401)\n        at org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(InitDestroyAnnotationBeanPostProcessor.java:219)\n        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:423)\n        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1800)\n        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:601)\n        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:523)\n        at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:336)\n        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:289)\n        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:334)\n        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)\n        at org.springframework.beans.factory.support.DefaultListableBeanFactory.instantiateSingleton(DefaultListableBeanFactory.java:1122)\n        at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingleton(DefaultListableBeanFactory.java:1093)\n        at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:1030)\n        at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:987)\n        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:627)\n        at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146)\n        at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:752)\n        at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:439)\n        at org.springframework.boot.SpringApplication.run(SpringApplication.java:318)\n        at stirling.software.SPDF.SPDFApplication.main(SPDFApplication.java:117)\n        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)\n        at java.base/java.lang.reflect.Method.invoke(Method.java:580)\n        at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:50)\n```\n\n## Checklist\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have performed a self-review of my own code\n- [ ] I have attached images of the change if it is UI based\n- [ ] I have commented my code, particularly in hard-to-understand areas\n- [ ] If my code has heavily changed functionality I have updated\nrelevant docs on [Stirling-PDFs doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n- [x] My changes generate no new warnings\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/database/DatabaseConfig.java b/src/main/java/stirling/software/SPDF/config/security/database/DatabaseConfig.java\n--- a/src/main/java/stirling/software/SPDF/config/security/database/DatabaseConfig.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/database/DatabaseConfig.java\n@@ -27,7 +27,7 @@ public class DatabaseConfig {\n     private final ApplicationProperties applicationProperties;\n     private final boolean runningEE;\n \n-    public DatabaseConfig(ApplicationProperties applicationProperties, boolean runningEE) {\n+    public DatabaseConfig(ApplicationProperties applicationProperties, @Qualifier(\"runningEE\") boolean runningEE) {\n         this.applicationProperties = applicationProperties;\n         this.runningEE = runningEE;\n     }",
    "output": "@Qualifier(\"runningEE\")"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/database/DatabaseService.java b/src/main/java/stirling/software/SPDF/config/security/database/DatabaseService.java\n--- a/src/main/java/stirling/software/SPDF/config/security/database/DatabaseService.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/database/DatabaseService.java\n@@ -178,9 +178,9 @@ public void exportDatabase() {\n             } catch (CannotReadScriptException e) {\n                 log.error(\"Error during database export: File {} not found\", insertOutputFilePath);\n             }\n-        }\n \n-        log.info(\"Database export completed: {}\", insertOutputFilePath);\n+            log.info(\"Database export completed: {}\", insertOutputFilePath);\n+        }\n     }\n \n     private static void deleteOldestBackup(List<FileInfo> filteredBackupList) {\n@@ -226,7 +226,7 @@ private boolean isH2Database() {\n         ApplicationProperties.Datasource datasource =\n                 applicationProperties.getSystem().getDatasource();\n         return !datasource.isEnableCustomDatabase()\n-                || datasource.getType().equals(ApplicationProperties.Driver.H2.name());\n+                || datasource.getType().equalsIgnoreCase(ApplicationProperties.Driver.H2.name());\n     }\n \n     /**\n\ndiff --git a/src/main/java/stirling/software/SPDF/config/security/database/ScheduledTasks.java b/src/main/java/stirling/software/SPDF/config/security/database/ScheduledTasks.java\n--- a/src/main/java/stirling/software/SPDF/config/security/database/ScheduledTasks.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/database/ScheduledTasks.java\n@@ -2,13 +2,16 @@\n \n import java.sql.SQLException;\n \n+import org.springframework.context.annotation.Conditional;\n import org.springframework.scheduling.annotation.Scheduled;\n import org.springframework.stereotype.Component;\n \n import stirling.software.SPDF.config.interfaces.DatabaseInterface;\n+import stirling.software.SPDF.controller.api.H2SQLCondition;\n import stirling.software.SPDF.model.provider.UnsupportedProviderException;\n \n @Component\n+@Conditional(H2SQLCondition.class)\n public class ScheduledTasks {\n \n     private final DatabaseInterface databaseService;\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/api/DatabaseController.java b/src/main/java/stirling/software/SPDF/controller/api/DatabaseController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/DatabaseController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/DatabaseController.java\n@@ -8,6 +8,7 @@\n import java.nio.file.StandardCopyOption;\n \n import org.eclipse.jetty.http.HttpStatus;\n+import org.springframework.context.annotation.Conditional;\n import org.springframework.core.io.InputStreamResource;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.MediaType;\n@@ -30,6 +31,7 @@\n @Controller\n @RequestMapping(\"/api/v1/database\")\n @PreAuthorize(\"hasRole('ROLE_ADMIN')\")\n+@Conditional(H2SQLCondition.class)\n @Tag(name = \"Database\", description = \"Database APIs for backup, import, and management\")\n public class DatabaseController {\n \n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/api/H2SQLCondition.java b/src/main/java/stirling/software/SPDF/controller/api/H2SQLCondition.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/H2SQLCondition.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/H2SQLCondition.java\n@@ -0,0 +1,19 @@\n+package stirling.software.SPDF.controller.api;\n+\n+import org.springframework.context.annotation.Condition;\n+import org.springframework.context.annotation.ConditionContext;\n+import org.springframework.core.type.AnnotatedTypeMetadata;\n+\n+public class H2SQLCondition implements Condition {\n+\n+    @Override\n+    public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {\n+        boolean enableCustomDatabase =\n+                Boolean.parseBoolean(\n+                        context.getEnvironment()\n+                                .getProperty(\"system.datasource.enableCustomDatabase\"));\n+        String dataSourceType = context.getEnvironment().getProperty(\"system.datasource.type\");\n+        return !enableCustomDatabase\n+                || (enableCustomDatabase && \"h2\".equalsIgnoreCase(dataSourceType));\n+    }\n+}\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/web/DatabaseWebController.java b/src/main/java/stirling/software/SPDF/controller/web/DatabaseWebController.java\n--- a/src/main/java/stirling/software/SPDF/controller/web/DatabaseWebController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/web/DatabaseWebController.java\n@@ -37,6 +37,9 @@ public String database(HttpServletRequest request, Model model, Authentication a\n         List<FileInfo> backupList = databaseService.getBackupList();\n         model.addAttribute(\"backupFiles\", backupList);\n         model.addAttribute(\"databaseVersion\", databaseService.getH2Version());\n+        if (\"Unknown\".equalsIgnoreCase(databaseService.getH2Version())) {\n+            model.addAttribute(\"infoMessage\", \"notSupported\");\n+        }\n         return \"database\";\n     }\n }",
    "output": "Add Conditional Handling for H2SQL Databases and Improve Database Compatibility (#2632)\n\n# Description\n\n1. **Conditional Support for DatabaseController**:\n- The `DatabaseController` is now annotated with\n`@Conditional(H2SQLCondition.class)` to ensure it is only available for\nH2SQL database setups.\n- This prevents unnecessary exposure of endpoints when the application\nis configured for H2SQL.\n\n2. **Database Web Template Adjustments**:\n- The UI elements related to database management are conditionally\nhidden when the database type is not supported (e.g., `databaseVersion\n== 'Unknown'`).\n- Improves user experience by avoiding unsupported operations for\nnon-H2SQL or unknown databases.\n\n3. **Model Attribute Updates**:\n- Added a check in `DatabaseWebController` to set an informational\nmessage (`notSupported`) when the database version is unknown.\n\n4. **H2 Database Compatibility**:\n- Additional adjustments to ensure the application gracefully handles\nH2-specific functionality without affecting other database\nconfigurations.\n\n5. **Build File Updates**:\n- Updated the `build.gradle` file to exclude `H2SQLCondition` and\nrelated controllers when specific configurations (e.g., security or\ndatabase type) are disabled.\n\n### Benefits:\n- Enhances application flexibility by adapting to the configured\ndatabase type.\n- Improves user feedback with clear messaging and UI adjustments for\nunsupported operations.\n- Prevents accidental exposure of database endpoints in H2SQL setups.\n\n## Checklist\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have performed a self-review of my own code\n- [ ] I have attached images of the change if it is UI based\n- [x] I have commented my code, particularly in hard-to-understand areas\n- [ ] If my code has heavily changed functionality I have updated\nrelevant docs on [Stirling-PDFs doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n- [x] My changes generate no new warnings\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java b/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java\n@@ -13,6 +13,9 @@\n import java.util.zip.ZipOutputStream;\n \n import org.apache.commons.io.FileUtils;\n+import org.apache.pdfbox.Loader;\n+import org.apache.pdfbox.pdmodel.PDDocument;\n+import org.apache.pdfbox.pdmodel.PDPage;\n import org.apache.pdfbox.rendering.ImageType;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.MediaType;\n@@ -31,11 +34,8 @@\n import stirling.software.SPDF.model.api.converters.ConvertToImageRequest;\n import stirling.software.SPDF.model.api.converters.ConvertToPdfRequest;\n import stirling.software.SPDF.service.CustomPDDocumentFactory;\n-import stirling.software.SPDF.utils.CheckProgramInstall;\n-import stirling.software.SPDF.utils.PdfUtils;\n-import stirling.software.SPDF.utils.ProcessExecutor;\n+import stirling.software.SPDF.utils.*;\n import stirling.software.SPDF.utils.ProcessExecutor.ProcessExecutorResult;\n-import stirling.software.SPDF.utils.WebResponseUtils;\n \n @RestController\n @RequestMapping(\"/api/v1/convert\")\n@@ -62,14 +62,20 @@ public ResponseEntity<byte[]> convertToImage(@ModelAttribute ConvertToImageReque\n         String singleOrMultiple = request.getSingleOrMultiple();\n         String colorType = request.getColorType();\n         String dpi = request.getDpi();\n-\n+        String pageNumbers = request.getPageNumbers();\n         Path tempFile = null;\n         Path tempOutputDir = null;\n         Path tempPdfPath = null;\n         byte[] result = null;\n-\n+        String[] pageOrderArr =\n+                (pageNumbers != null && !pageNumbers.trim().isEmpty())\n+                        ? pageNumbers.split(\",\")\n+                        : new String[] {\"all\"};\n+        ;\n         try {\n-            byte[] pdfBytes = file.getBytes();\n+            // Load the input PDF\n+            byte[] newPdfBytes = rearrangePdfPages(file.getBytes(), pageOrderArr);\n+\n             ImageType colorTypeResult = ImageType.RGB;\n             if (\"greyscale\".equals(colorType)) {\n                 colorTypeResult = ImageType.GRAY;\n@@ -84,7 +90,7 @@ public ResponseEntity<byte[]> convertToImage(@ModelAttribute ConvertToImageReque\n \n             result =\n                     PdfUtils.convertFromPdf(\n-                            pdfBytes,\n+                            newPdfBytes,\n                             \"webp\".equalsIgnoreCase(imageFormat)\n                                     ? \"png\"\n                                     : imageFormat.toUpperCase(),\n@@ -227,4 +233,46 @@ private String getMediaType(String imageFormat) {\n         String mimeType = URLConnection.guessContentTypeFromName(\".\" + imageFormat);\n         return \"null\".equals(mimeType) ? \"application/octet-stream\" : mimeType;\n     }\n+\n+    /**\n+     * Rearranges the pages of the given PDF document based on the specified page order.\n+     *\n+     * @param pdfBytes The byte array of the original PDF file.\n+     * @param pageOrderArr An array of page numbers indicating the new order.\n+     * @return A byte array of the rearranged PDF.\n+     * @throws IOException If an error occurs while processing the PDF.\n+     */\n+    private byte[] rearrangePdfPages(byte[] pdfBytes, String[] pageOrderArr) throws IOException {\n+        // Load the input PDF\n+        PDDocument document = Loader.loadPDF(pdfBytes);\n+        int totalPages = document.getNumberOfPages();\n+        List<Integer> newPageOrder = GeneralUtils.parsePageList(pageOrderArr, totalPages, false);\n+\n+        // Create a new list to hold the pages in the new order\n+        List<PDPage> newPages = new ArrayList<>();\n+        for (int pageIndex : newPageOrder) {\n+            newPages.add(document.getPage(pageIndex));\n+        }\n+\n+        // Remove all the pages from the original document\n+        for (int i = document.getNumberOfPages() - 1; i >= 0; i--) {\n+            document.removePage(i);\n+        }\n+\n+        // Add the pages in the new order\n+        for (PDPage page : newPages) {\n+            document.addPage(page);\n+        }\n+\n+        // Convert PDDocument to byte array\n+        byte[] newPdfBytes;\n+        try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) {\n+            document.save(baos);\n+            newPdfBytes = baos.toByteArray();\n+        } finally {\n+            document.close();\n+        }\n+\n+        return newPdfBytes;\n+    }\n }\n\ndiff --git a/src/main/java/stirling/software/SPDF/model/api/converters/ConvertToImageRequest.java b/src/main/java/stirling/software/SPDF/model/api/converters/ConvertToImageRequest.java\n--- a/src/main/java/stirling/software/SPDF/model/api/converters/ConvertToImageRequest.java\n+++ b/src/main/java/stirling/software/SPDF/model/api/converters/ConvertToImageRequest.java\n@@ -21,6 +21,11 @@ public class ConvertToImageRequest extends PDFFile {\n             allowableValues = {\"single\", \"multiple\"})\n     private String singleOrMultiple;\n \n+    @Schema(\n+            description =\n+                    \"The pages to select, Supports ranges (e.g., '1,3,5-9'), or 'all' or functions in the format 'an+b' where 'a' is the multiplier of the page number 'n', and 'b' is a constant (e.g., '2n+1', '3n', '6n-5')\\\"\")\n+    private String pageNumbers;\n+\n     @Schema(\n             description = \"The color type of the output image(s)\",\n             allowableValues = {\"color\", \"greyscale\", \"blackwhite\"})",
    "output": "Pdf to image custom page selection (#2576)\n\n# Description\n\nImplemented custom page selection for the pdf-to-image feature, allowing\nusers to specify which PDF pages to convert to images.\n\n1. Variable Renaming: Changed singleOrMultiple to imageResultType\nbecause it supports three options: single, multiple, and custom.\n2. New Field: Added pageNumbers to accept user-defined page selections.\nThis field appears only when custom is selected in the UI.\n3. New Method: Added getPageIndicesToConvert to process and validate the\nspecified page numbers.\n4. Method Update: Updated convertFromPdf to handle custom page numbers,\nensuring only selected pages are converted.\n5. Translation Properties: Added two new English translation properties,\ncustom and customPageNumber, to all language files with placeholder\nvalues. These will need to be translated into country-specific languages\nin the future.\n\nNote: If an invalid page number is provided (zero, negative, or exceeds\npage count), a single image containing all PDF pages is generated.\n\nCloses #918 \n\n## Checklist\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have performed a self-review of my own code\n- [x] I have attached images of the change if it is UI based\n- [x] I have commented my code, particularly in hard-to-understand areas\n- [x] If my code has heavily changed functionality I have updated\nrelevant docs on [Stirling-PDFs doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n- [x] My changes generate no new warnings\n- [x] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)\n\n![Screenshot 2025-01-02 at 12 31\n29 AM](https://github.com/user-attachments/assets/c4ba3f31-5dd6-4a17-991e-51b86c2eb466)\n![Screenshot 2025-01-02 at 12 31\n49 AM](https://github.com/user-attachments/assets/3e800a95-2088-4f69-8a01-bd03d7b9e471)\n\n---------\n\nCo-authored-by: Sai Kumar J <saikumar@Sais-MacBook-Air.local>\nCo-authored-by: Ludy <Ludy87@users.noreply.github.com>\nCo-authored-by: saikumar <saikumar.jetti@gmail.com>\nCo-authored-by: Anthony Stirling <77850077+Frooodle@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/UserAuthenticationFilter.java b/src/main/java/stirling/software/SPDF/config/security/UserAuthenticationFilter.java\n--- a/src/main/java/stirling/software/SPDF/config/security/UserAuthenticationFilter.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/UserAuthenticationFilter.java\n@@ -22,22 +22,31 @@\n import jakarta.servlet.ServletException;\n import jakarta.servlet.http.HttpServletRequest;\n import jakarta.servlet.http.HttpServletResponse;\n+import lombok.extern.slf4j.Slf4j;\n import stirling.software.SPDF.config.security.saml2.CustomSaml2AuthenticatedPrincipal;\n import stirling.software.SPDF.config.security.session.SessionPersistentRegistry;\n import stirling.software.SPDF.model.ApiKeyAuthenticationToken;\n+import stirling.software.SPDF.model.ApplicationProperties;\n+import stirling.software.SPDF.model.ApplicationProperties.Security;\n+import stirling.software.SPDF.model.ApplicationProperties.Security.OAUTH2;\n+import stirling.software.SPDF.model.ApplicationProperties.Security.SAML2;\n import stirling.software.SPDF.model.User;\n \n+@Slf4j\n @Component\n public class UserAuthenticationFilter extends OncePerRequestFilter {\n \n+    private final ApplicationProperties applicationProperties;\n     private final UserService userService;\n     private final SessionPersistentRegistry sessionPersistentRegistry;\n     private final boolean loginEnabledValue;\n \n     public UserAuthenticationFilter(\n+            @Lazy ApplicationProperties applicationProperties,\n             @Lazy UserService userService,\n             SessionPersistentRegistry sessionPersistentRegistry,\n             @Qualifier(\"loginEnabled\") boolean loginEnabledValue) {\n+        this.applicationProperties = applicationProperties;\n         this.userService = userService;\n         this.sessionPersistentRegistry = sessionPersistentRegistry;\n         this.loginEnabledValue = loginEnabledValue;\n@@ -121,33 +130,67 @@ protected void doFilterInternal(\n \n         // Check if the authenticated user is disabled and invalidate their session if so\n         if (authentication != null && authentication.isAuthenticated()) {\n+\n+            Security securityProp = applicationProperties.getSecurity();\n+            LoginMethod loginMethod = LoginMethod.UNKNOWN;\n+\n+            boolean blockRegistration = false;\n+\n+            // Extract username and determine the login method\n             Object principal = authentication.getPrincipal();\n             String username = null;\n             if (principal instanceof UserDetails) {\n                 username = ((UserDetails) principal).getUsername();\n+                loginMethod = LoginMethod.USERDETAILS;\n             } else if (principal instanceof OAuth2User) {\n                 username = ((OAuth2User) principal).getName();\n+                loginMethod = LoginMethod.OAUTH2USER;\n+                OAUTH2 oAuth = securityProp.getOauth2();\n+                blockRegistration = oAuth != null && oAuth.getBlockRegistration();\n             } else if (principal instanceof CustomSaml2AuthenticatedPrincipal) {\n                 username = ((CustomSaml2AuthenticatedPrincipal) principal).getName();\n+                loginMethod = LoginMethod.SAML2USER;\n+                SAML2 saml2 = securityProp.getSaml2();\n+                blockRegistration = saml2 != null && saml2.getBlockRegistration();\n             } else if (principal instanceof String) {\n                 username = (String) principal;\n+                loginMethod = LoginMethod.STRINGUSER;\n             }\n \n+            // Retrieve all active sessions for the user\n             List<SessionInformation> sessionsInformations =\n                     sessionPersistentRegistry.getAllSessions(principal, false);\n \n+            // Check if the user exists, is disabled, or needs session invalidation\n             if (username != null) {\n+                log.debug(\"Validating user: {}\", username);\n                 boolean isUserExists = userService.usernameExistsIgnoreCase(username);\n                 boolean isUserDisabled = userService.isUserDisabled(username);\n \n+                boolean notSsoLogin =\n+                        !loginMethod.equals(LoginMethod.OAUTH2USER)\n+                                && !loginMethod.equals(LoginMethod.SAML2USER);\n+\n+                // Block user registration if not allowed by configuration\n+                if (blockRegistration && !isUserExists) {\n+                    log.warn(\"Blocked registration for OAuth2/SAML user: {}\", username);\n+                    response.sendRedirect(\n+                            request.getContextPath() + \"/logout?oauth2_admin_blocked_user=true\");\n+                    return;\n+                }\n+\n+                // Expire sessions and logout if the user does not exist or is disabled\n                 if (!isUserExists || isUserDisabled) {\n+                    log.info(\n+                            \"Invalidating session for disabled or non-existent user: {}\", username);\n                     for (SessionInformation sessionsInformation : sessionsInformations) {\n                         sessionsInformation.expireNow();\n                         sessionPersistentRegistry.expireSession(sessionsInformation.getSessionId());\n                     }\n                 }\n \n-                if (!isUserExists) {\n+                // Redirect to logout if credentials are invalid\n+                if (!isUserExists && notSsoLogin) {\n                     response.sendRedirect(request.getContextPath() + \"/logout?badcredentials=true\");\n                     return;\n                 }\n@@ -161,6 +204,25 @@ protected void doFilterInternal(\n         filterChain.doFilter(request, response);\n     }\n \n+    private enum LoginMethod {\n+        USERDETAILS(\"UserDetails\"),\n+        OAUTH2USER(\"OAuth2User\"),\n+        STRINGUSER(\"StringUser\"),\n+        UNKNOWN(\"Unknown\"),\n+        SAML2USER(\"Saml2User\");\n+\n+        private String method;\n+\n+        LoginMethod(String method) {\n+            this.method = method;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return method;\n+        }\n+    }\n+\n     @Override\n     protected boolean shouldNotFilter(HttpServletRequest request) throws ServletException {\n         String uri = request.getRequestURI();\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/web/AccountWebController.java b/src/main/java/stirling/software/SPDF/controller/web/AccountWebController.java\n--- a/src/main/java/stirling/software/SPDF/controller/web/AccountWebController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/web/AccountWebController.java\n@@ -163,6 +163,9 @@ public String login(HttpServletRequest request, Model model, Authentication auth\n                 case \"invalid_destination\":\n                     erroroauth = \"login.invalid_destination\";\n                     break;\n+                case \"relying_party_registration_not_found\":\n+                    erroroauth = \"login.relyingPartyRegistrationNotFound\";\n+                    break;\n                 // Valid InResponseTo was not available from the validation context, unable to\n                 // evaluate\n                 case \"invalid_in_response_to\":",
    "output": "Fixes SSO login rejection (#2566)\n\n# Description\n\n## Checklist\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have performed a self-review of my own code\n- [ ] I have attached images of the change if it is UI based\n- [x] I have commented my code, particularly in hard-to-understand areas\n- [ ] If my code has heavily changed functionality I have updated\nrelevant docs on [Stirling-PDFs doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n- [x] My changes generate no new warnings\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java b/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java\n--- a/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java\n+++ b/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java\n@@ -13,6 +13,8 @@\n import java.util.Enumeration;\n import java.util.List;\n import java.util.UUID;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n \n import org.simpleyaml.configuration.file.YamlFile;\n import org.simpleyaml.configuration.file.YamlFileWrapper;\n@@ -220,32 +222,51 @@ public static List<Integer> evaluateNFunc(String expression, int maxValue) {\n             throw new IllegalArgumentException(\"Invalid expression\");\n         }\n \n-        int n = 0;\n-        while (true) {\n+        for (int n = 1; n <= maxValue; n++) {\n             // Replace 'n' with the current value of n, correctly handling numbers before\n             // 'n'\n-            String sanitizedExpression = insertMultiplicationBeforeN(expression, n);\n+            String sanitizedExpression = sanitizeNFunction(expression, n);\n             Double result = evaluator.evaluate(sanitizedExpression);\n \n             // Check if the result is null or not within bounds\n-            if (result == null || result <= 0 || result.intValue() > maxValue) {\n-                if (n != 0) break;\n-            } else {\n+            if (result == null)\n+                break;\n+\n+            if (result.intValue() > 0 && result.intValue() <= maxValue)\n                 results.add(result.intValue());\n-            }\n-            n++;\n         }\n \n         return results;\n     }\n \n+    private static String sanitizeNFunction(String expression, int nValue) {\n+        String sanitizedExpression = expression.replace(\" \", \"\");\n+        String multiplyByOpeningRoundBracketPattern = \"([0-9n)])\\\\(\"; // example: n(n-1), 9(n-1), (n-1)(n-2)\n+        sanitizedExpression = sanitizedExpression.replaceAll(multiplyByOpeningRoundBracketPattern, \"$1*(\");\n+\n+        String multiplyByClosingRoundBracketPattern = \"\\\\)([0-9n)])\"; // example: (n-1)n, (n-1)9, (n-1)(n-2)\n+        sanitizedExpression = sanitizedExpression.replaceAll(multiplyByClosingRoundBracketPattern, \")*$1\");\n+\n+        sanitizedExpression = insertMultiplicationBeforeN(sanitizedExpression, nValue);\n+        return sanitizedExpression;\n+    }\n+\n     private static String insertMultiplicationBeforeN(String expression, int nValue) {\n         // Insert multiplication between a number and 'n' (e.g., \"4n\" becomes \"4*n\")\n         String withMultiplication = expression.replaceAll(\"(\\\\d)n\", \"$1*n\");\n+        withMultiplication = formatConsecutiveNsForNFunction(withMultiplication);\n         // Now replace 'n' with its current value\n         return withMultiplication.replace(\"n\", String.valueOf(nValue));\n     }\n \n+    private static String formatConsecutiveNsForNFunction(String expression) {\n+        String text = expression;\n+        while (text.matches(\".*n{2,}.*\")) {\n+            text = text.replaceAll(\"(?<!n)n{2}\", \"n*n\");\n+        }\n+        return text;\n+    }\n+\n     private static List<Integer> handlePart(String part, int totalPages, int offset) {\n         List<Integer> partResult = new ArrayList<>();\n \n\ndiff --git a/src/test/java/stirling/software/SPDF/utils/GeneralUtilsTest.java b/src/test/java/stirling/software/SPDF/utils/GeneralUtilsTest.java\n--- a/src/test/java/stirling/software/SPDF/utils/GeneralUtilsTest.java\n+++ b/src/test/java/stirling/software/SPDF/utils/GeneralUtilsTest.java\n@@ -52,14 +52,68 @@ void nFuncAdvanced2() {\n     @Test\n     void nFuncAdvanced3() {\n         List<Integer> result = GeneralUtils.parsePageList(new String[]{\"4n+1\"}, 9, true);\n-        assertEquals(List.of(1, 5, 9), result, \"'All' keyword should return all pages.\");\n+        assertEquals(List.of(5, 9), result, \"'All' keyword should return all pages.\");\n+    }\n+\n+    @Test\n+    void nFunc_spaces() {\n+        List<Integer> result = GeneralUtils.parsePageList(new String[]{\"n + 1\"}, 9, true);\n+        assertEquals(List.of(2, 3, 4, 5, 6, 7, 8, 9), result);\n+    }\n+\n+    @Test\n+    void nFunc_consecutive_Ns_nnn() {\n+        List<Integer> result = GeneralUtils.parsePageList(new String[]{\"nnn\"}, 9, true);\n+        assertEquals(List.of(1, 8), result);\n+    }\n+\n+    @Test\n+    void nFunc_consecutive_Ns_nn() {\n+        List<Integer> result = GeneralUtils.parsePageList(new String[]{\"nn\"}, 9, true);\n+        assertEquals(List.of(1, 4, 9), result);\n+    }\n+\n+    @Test\n+    void nFunc_opening_closing_round_brackets() {\n+        List<Integer> result = GeneralUtils.parsePageList(new String[]{\"(n-1)(n-2)\"}, 9, true);\n+        assertEquals(List.of(2, 6), result);\n+    }\n+\n+    @Test\n+    void nFunc_opening_round_brackets() {\n+        List<Integer> result = GeneralUtils.parsePageList(new String[]{\"2(n-1)\"}, 9, true);\n+        assertEquals(List.of(2, 4, 6, 8), result);\n+    }\n+\n+    @Test\n+    void nFunc_opening_round_brackets_n() {\n+        List<Integer> result = GeneralUtils.parsePageList(new String[]{\"n(n-1)\"}, 9, true);\n+        assertEquals(List.of(2, 6), result);\n+    }\n+\n+    @Test\n+    void nFunc_closing_round_brackets() {\n+        List<Integer> result = GeneralUtils.parsePageList(new String[]{\"(n-1)2\"}, 9, true);\n+        assertEquals(List.of(2, 4, 6, 8), result);\n+    }\n+\n+    @Test\n+    void nFunc_closing_round_brackets_n() {\n+        List<Integer> result = GeneralUtils.parsePageList(new String[]{\"(n-1)n\"}, 9, true);\n+        assertEquals(List.of(2, 6), result);\n+    }\n+\n+    @Test\n+    void nFunc_function_surrounded_with_brackets() {\n+        List<Integer> result = GeneralUtils.parsePageList(new String[]{\"(n-1)\"}, 9, true);\n+        assertEquals(List.of(1, 2, 3, 4, 5, 6, 7, 8), result);\n     }\n \n \n     @Test\n     void nFuncAdvanced4() {\n         List<Integer> result = GeneralUtils.parsePageList(new String[]{\"3+2n\"}, 9, true);\n-        assertEquals(List.of(3, 5, 7, 9), result, \"'All' keyword should return all pages.\");\n+        assertEquals(List.of(5, 7, 9), result, \"'All' keyword should return all pages.\");\n     }\n \n     @Test\n@@ -80,7 +134,6 @@ void testParsePageListWithRangeOneBasedOutput() {\n         assertEquals(List.of(1, 2, 3), result, \"Range should be parsed correctly.\");\n     }\n \n-\n     @Test\n     void testParsePageListWithRangeZeroBaseOutput() {\n         List<Integer> result = GeneralUtils.parsePageList(new String[]{\"1-3\"}, 5, false);",
    "output": "Enhancement: Enhance NFunction evaluation and support advanced NFunctions (#2577)\n\n# Description\n\nEnhance NFunction sanitization and support advanced functions:\n- Start page counting from 1 rather than 0 as PDFs are one based from\nthe user's perspective, thus functions results would be affected by\nstarting with \"0\" rather than \"1\".\n- Ignore out of bound results rather than stopping iterations to work\nwith functions such as (n - 4) when page count is 10 as we would get\npositive values when n > 4.\n- Remove spaces to support expressions such as 2n + 1 rather just 2n+1.\n- Support advanced functions as follows:\n- Support expressions such as follows 5(n-1), n(n-1), expressions\nfollowed by opening rounded without '*' operator.\n- Support expressions such as follows (n-1)5, (n-1)n, expressions\npreceded closing rounded without '*' operator.\n- Support consecutive \"n\" expressions, examples: nnn, 2nn, nn*3, nnnn.\n\nCloses #(issue_number)\n\n## Checklist\n\n- [x] I have read the [Contribution\nGuidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md)\n- [x] I have performed a self-review of my own code\n- [ ] I have attached images of the change if it is UI based\n- [x] I have commented my code, particularly in hard-to-understand areas\n- [ ] If my code has heavily changed functionality I have updated\nrelevant docs on [Stirling-PDFs doc\nrepo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/)\n- [x] My changes generate no new warnings\n- [ ] I have read the section [Add New Translation\nTags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags)\n(for new translation tags only)"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/utils/PdfUtils.java b/src/main/java/stirling/software/SPDF/utils/PdfUtils.java\n--- a/src/main/java/stirling/software/SPDF/utils/PdfUtils.java\n+++ b/src/main/java/stirling/software/SPDF/utils/PdfUtils.java\n@@ -352,12 +352,17 @@ public static PDDocument convertPdfToPdfImage(PDDocument document) throws IOExce\n         pdfRenderer.setSubsamplingAllowed(true);\n         for (int page = 0; page < document.getNumberOfPages(); ++page) {\n             BufferedImage bim = pdfRenderer.renderImageWithDPI(page, 300, ImageType.RGB);\n-            PDPage newPage = new PDPage(new PDRectangle(bim.getWidth(), bim.getHeight()));\n+            PDPage originalPage = document.getPage(page);\n+\n+            float width = originalPage.getMediaBox().getWidth();\n+            float height = originalPage.getMediaBox().getHeight();\n+\n+            PDPage newPage = new PDPage(new PDRectangle(width, height));\n             imageDocument.addPage(newPage);\n             PDImageXObject pdImage = LosslessFactory.createFromImage(imageDocument, bim);\n             PDPageContentStream contentStream =\n                     new PDPageContentStream(imageDocument, newPage, AppendMode.APPEND, true, true);\n-            contentStream.drawImage(pdImage, 0, 0);\n+            contentStream.drawImage(pdImage, 0, 0, width, height);\n             contentStream.close();\n         }\n         return imageDocument;",
    "output": "Merge pull request #2503 from omar-ahmed42/fix-page-resize-in-redact-img-conversion\n\nFix: Draw image with the original PDF page dimensions"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/utils/PdfUtils.java b/src/main/java/stirling/software/SPDF/utils/PdfUtils.java\n--- a/src/main/java/stirling/software/SPDF/utils/PdfUtils.java\n+++ b/src/main/java/stirling/software/SPDF/utils/PdfUtils.java\n@@ -352,12 +352,17 @@ public static PDDocument convertPdfToPdfImage(PDDocument document) throws IOExce\n         pdfRenderer.setSubsamplingAllowed(true);\n         for (int page = 0; page < document.getNumberOfPages(); ++page) {\n             BufferedImage bim = pdfRenderer.renderImageWithDPI(page, 300, ImageType.RGB);\n-            PDPage newPage = new PDPage(new PDRectangle(bim.getWidth(), bim.getHeight()));\n+            PDPage originalPage = document.getPage(page);\n+\n+            float width = originalPage.getMediaBox().getWidth();\n+            float height = originalPage.getMediaBox().getHeight();\n+\n+            PDPage newPage = new PDPage(new PDRectangle(width, height));\n             imageDocument.addPage(newPage);\n             PDImageXObject pdImage = LosslessFactory.createFromImage(imageDocument, bim);\n             PDPageContentStream contentStream =\n                     new PDPageContentStream(imageDocument, newPage, AppendMode.APPEND, true, true);\n-            contentStream.drawImage(pdImage, 0, 0);\n+            contentStream.drawImage(pdImage, 0, 0, width, height);\n             contentStream.close();\n         }\n         return imageDocument;",
    "output": "Draw image with the original PDF page dimensions"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/AppConfig.java b/src/main/java/stirling/software/SPDF/config/AppConfig.java\n--- a/src/main/java/stirling/software/SPDF/config/AppConfig.java\n+++ b/src/main/java/stirling/software/SPDF/config/AppConfig.java\n@@ -99,6 +99,27 @@ public boolean runningInDocker() {\n         return Files.exists(Paths.get(\"/.dockerenv\"));\n     }\n \n+    @Bean(name = \"configDirMounted\")\n+    public boolean isRunningInDockerWithConfig() {\n+        Path dockerEnv = Paths.get(\"/.dockerenv\");\n+        // default to true if not docker\n+        if (!Files.exists(dockerEnv)) {\n+            return true;\n+        }\n+\n+        Path mountInfo = Paths.get(\"/proc/1/mountinfo\");\n+        // this should always exist, if not some unknown usecase\n+        if (!Files.exists(mountInfo)) {\n+            return true;\n+        }\n+\n+        try {\n+            return Files.lines(mountInfo).anyMatch(line -> line.contains(\" /configs \"));\n+        } catch (IOException e) {\n+            return false;\n+        }\n+    }\n+\n     @Bean(name = \"bookAndHtmlFormatsInstalled\")\n     public boolean bookAndHtmlFormatsInstalled() {\n         String installOps = System.getProperty(\"INSTALL_BOOK_AND_ADVANCED_HTML_OPS\");\n\ndiff --git a/src/main/java/stirling/software/SPDF/service/PostHogService.java b/src/main/java/stirling/software/SPDF/service/PostHogService.java\n--- a/src/main/java/stirling/software/SPDF/service/PostHogService.java\n+++ b/src/main/java/stirling/software/SPDF/service/PostHogService.java\n@@ -31,11 +31,13 @@ public class PostHogService {\n     private final ApplicationProperties applicationProperties;\n     private final UserServiceInterface userService;\n     private final Environment env;\n+    private boolean configDirMounted;\n \n     @Autowired\n     public PostHogService(\n             PostHog postHog,\n             @Qualifier(\"UUID\") String uuid,\n+            @Qualifier(\"configDirMounted\") boolean configDirMounted,\n             @Qualifier(\"appVersion\") String appVersion,\n             ApplicationProperties applicationProperties,\n             @Autowired(required = false) UserServiceInterface userService,\n@@ -46,6 +48,7 @@ public PostHogService(\n         this.applicationProperties = applicationProperties;\n         this.userService = userService;\n         this.env = env;\n+        this.configDirMounted = configDirMounted;\n         captureSystemInfo();\n     }\n \n@@ -80,6 +83,7 @@ public Map<String, Object> captureServerMetrics() {\n                 deploymentType = \"DOCKER\";\n             }\n             metrics.put(\"deployment_type\", deploymentType);\n+            metrics.put(\"mounted_config_dir\", configDirMounted);\n \n             // System info\n             metrics.put(\"os_name\", System.getProperty(\"os.name\"));",
    "output": "Merge pull request #2500 from Stirling-Tools/configCheck\n\nConfig mount check"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/SPdfApplication.java b/src/main/java/stirling/software/SPDF/SPdfApplication.java\n--- a/src/main/java/stirling/software/SPDF/SPdfApplication.java\n+++ b/src/main/java/stirling/software/SPDF/SPdfApplication.java\n@@ -23,6 +23,7 @@\n import org.springframework.scheduling.annotation.EnableScheduling;\n \n import io.github.pixee.security.SystemCommand;\n+\n import jakarta.annotation.PostConstruct;\n import jakarta.annotation.PreDestroy;\n import lombok.extern.slf4j.Slf4j;\n@@ -154,7 +155,7 @@ public void init() {\n                 && Boolean.parseBoolean(System.getProperty(\"STIRLING_PDF_DESKTOP_UI\", \"false\"))) {\n             webBrowser.initWebUI(url);\n         } else {\n-        \tString browserOpenEnv = env.getProperty(\"BROWSER_OPEN\");\n+            String browserOpenEnv = env.getProperty(\"BROWSER_OPEN\");\n             boolean browserOpen = browserOpenEnv != null && \"true\".equalsIgnoreCase(browserOpenEnv);\n             if (browserOpen) {\n                 try {\n@@ -173,7 +174,7 @@ public void init() {\n                 }\n             }\n         }\n-        logger.info(\"Running configs {}\", applicationProperties.toString()); \n+        logger.info(\"Running configs {}\", applicationProperties.toString());\n     }\n \n     @PreDestroy\n\ndiff --git a/src/main/java/stirling/software/SPDF/config/AppConfig.java b/src/main/java/stirling/software/SPDF/config/AppConfig.java\n--- a/src/main/java/stirling/software/SPDF/config/AppConfig.java\n+++ b/src/main/java/stirling/software/SPDF/config/AppConfig.java\n@@ -101,6 +101,27 @@ public boolean runningInDocker() {\n         return Files.exists(Paths.get(\"/.dockerenv\"));\n     }\n \n+    @Bean(name = \"configDirMounted\")\n+    public boolean isRunningInDockerWithConfig() {\n+        Path dockerEnv = Paths.get(\"/.dockerenv\");\n+        // default to true if not docker\n+        if (!Files.exists(dockerEnv)) {\n+            return true;\n+        }\n+\n+        Path mountInfo = Paths.get(\"/proc/1/mountinfo\");\n+        // this should always exist, if not some unknown usecase\n+        if (!Files.exists(mountInfo)) {\n+            return true;\n+        }\n+\n+        try {\n+            return Files.lines(mountInfo).anyMatch(line -> line.contains(\" /configs \"));\n+        } catch (IOException e) {\n+            return false;\n+        }\n+    }\n+\n     @Bean(name = \"bookAndHtmlFormatsInstalled\")\n     public boolean bookAndHtmlFormatsInstalled() {\n         String installOps = System.getProperty(\"INSTALL_BOOK_AND_ADVANCED_HTML_OPS\");\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/api/security/PasswordController.java b/src/main/java/stirling/software/SPDF/controller/api/security/PasswordController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/security/PasswordController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/security/PasswordController.java\n@@ -39,7 +39,10 @@ public PasswordController(CustomPDDocumentFactory pdfDocumentFactory) {\n     }\n \n     @PostMapping(consumes = \"multipart/form-data\", value = \"/remove-password\")\n-    @Operation(summary = \"Remove password from a PDF file\", description = \"This endpoint removes the password from a protected PDF file. Users need to provide the existing password. Input:PDF Output:PDF Type:SISO\")\n+    @Operation(\n+            summary = \"Remove password from a PDF file\",\n+            description =\n+                    \"This endpoint removes the password from a protected PDF file. Users need to provide the existing password. Input:PDF Output:PDF Type:SISO\")\n     public ResponseEntity<byte[]> removePassword(@ModelAttribute PDFPasswordRequest request)\n             throws IOException {\n         MultipartFile fileInput = request.getFileInput();\n@@ -49,12 +52,15 @@ public ResponseEntity<byte[]> removePassword(@ModelAttribute PDFPasswordRequest\n         return WebResponseUtils.pdfDocToWebResponse(\n                 document,\n                 Filenames.toSimpleFileName(fileInput.getOriginalFilename())\n-                        .replaceFirst(\"[.][^.]+$\", \"\")\n+                                .replaceFirst(\"[.][^.]+$\", \"\")\n                         + \"_password_removed.pdf\");\n     }\n \n     @PostMapping(consumes = \"multipart/form-data\", value = \"/add-password\")\n-    @Operation(summary = \"Add password to a PDF file\", description = \"This endpoint adds password protection to a PDF file. Users can specify a set of permissions that should be applied to the file. Input:PDF Output:PDF\")\n+    @Operation(\n+            summary = \"Add password to a PDF file\",\n+            description =\n+                    \"This endpoint adds password protection to a PDF file. Users can specify a set of permissions that should be applied to the file. Input:PDF Output:PDF\")\n     public ResponseEntity<byte[]> addPassword(@ModelAttribute AddPasswordRequest request)\n             throws IOException {\n         MultipartFile fileInput = request.getFileInput();\n@@ -92,12 +98,12 @@ public ResponseEntity<byte[]> addPassword(@ModelAttribute AddPasswordRequest req\n             return WebResponseUtils.pdfDocToWebResponse(\n                     document,\n                     Filenames.toSimpleFileName(fileInput.getOriginalFilename())\n-                            .replaceFirst(\"[.][^.]+$\", \"\")\n+                                    .replaceFirst(\"[.][^.]+$\", \"\")\n                             + \"_permissions.pdf\");\n         return WebResponseUtils.pdfDocToWebResponse(\n                 document,\n                 Filenames.toSimpleFileName(fileInput.getOriginalFilename())\n-                        .replaceFirst(\"[.][^.]+$\", \"\")\n+                                .replaceFirst(\"[.][^.]+$\", \"\")\n                         + \"_passworded.pdf\");\n     }\n }\n\ndiff --git a/src/main/java/stirling/software/SPDF/service/PostHogService.java b/src/main/java/stirling/software/SPDF/service/PostHogService.java\n--- a/src/main/java/stirling/software/SPDF/service/PostHogService.java\n+++ b/src/main/java/stirling/software/SPDF/service/PostHogService.java\n@@ -31,11 +31,13 @@ public class PostHogService {\n     private final ApplicationProperties applicationProperties;\n     private final UserServiceInterface userService;\n     private final Environment env;\n+    private boolean configDirMounted;\n \n     @Autowired\n     public PostHogService(\n             PostHog postHog,\n             @Qualifier(\"UUID\") String uuid,\n+            @Qualifier(\"configDirMounted\") boolean configDirMounted,\n             @Qualifier(\"appVersion\") String appVersion,\n             ApplicationProperties applicationProperties,\n             @Autowired(required = false) UserServiceInterface userService,\n@@ -46,6 +48,7 @@ public PostHogService(\n         this.applicationProperties = applicationProperties;\n         this.userService = userService;\n         this.env = env;\n+        this.configDirMounted = configDirMounted;\n         captureSystemInfo();\n     }\n \n@@ -80,6 +83,7 @@ public Map<String, Object> captureServerMetrics() {\n                 deploymentType = \"DOCKER\";\n             }\n             metrics.put(\"deployment_type\", deploymentType);\n+            metrics.put(\"mounted_config_dir\", configDirMounted);\n \n             // System info\n             metrics.put(\"os_name\", System.getProperty(\"os.name\"));\n\ndiff --git a/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java b/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java\n--- a/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java\n+++ b/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java\n@@ -121,10 +121,15 @@ private static boolean isLocalAddress(String host) {\n             InetAddress address = InetAddress.getByName(host);\n \n             // Check for local addresses\n-            return address.isAnyLocalAddress() ||  // Matches 0.0.0.0 or similar\n-                   address.isLoopbackAddress() || // Matches 127.0.0.1 or ::1\n-                   address.isSiteLocalAddress() || // Matches private IPv4 ranges: 192.168.x.x, 10.x.x.x, 172.16.x.x to 172.31.x.x\n-                   address.getHostAddress().startsWith(\"fe80:\"); // Matches link-local IPv6 addresses\n+            return address.isAnyLocalAddress()\n+                    || // Matches 0.0.0.0 or similar\n+                    address.isLoopbackAddress()\n+                    || // Matches 127.0.0.1 or ::1\n+                    address.isSiteLocalAddress()\n+                    || // Matches private IPv4 ranges: 192.168.x.x, 10.x.x.x, 172.16.x.x to\n+                    // 172.31.x.x\n+                    address.getHostAddress()\n+                            .startsWith(\"fe80:\"); // Matches link-local IPv6 addresses\n         } catch (Exception e) {\n             return false; // Return false for invalid or unresolved addresses\n         }",
    "output": "mounted_config_dir"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/model/ApplicationProperties.java b/src/main/java/stirling/software/SPDF/model/ApplicationProperties.java\n--- a/src/main/java/stirling/software/SPDF/model/ApplicationProperties.java\n+++ b/src/main/java/stirling/software/SPDF/model/ApplicationProperties.java\n@@ -122,18 +122,19 @@ public static class InitialLogin {\n \n         @Getter\n         @Setter\n+        @ToString\n         public static class SAML2 {\n             private Boolean enabled = false;\n             private Boolean autoCreateUser = false;\n             private Boolean blockRegistration = false;\n             private String registrationId = \"stirling\";\n-            private String idpMetadataUri;\n+            @ToString.Exclude private String idpMetadataUri;\n             private String idpSingleLogoutUrl;\n             private String idpSingleLoginUrl;\n             private String idpIssuer;\n             private String idpCert;\n-            private String privateKey;\n-            private String spCert;\n+            @ToString.Exclude private String privateKey;\n+            @ToString.Exclude private String spCert;\n \n             public InputStream getIdpMetadataUri() throws IOException {\n                 if (idpMetadataUri.startsWith(\"classpath:\")) {",
    "output": "Merge pull request #2498 from Ludy87/code_refactoring\n\nExclude Sensitive and Error-Prone Fields from toString() in SAML2 Con…"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/model/ApplicationProperties.java b/src/main/java/stirling/software/SPDF/model/ApplicationProperties.java\n--- a/src/main/java/stirling/software/SPDF/model/ApplicationProperties.java\n+++ b/src/main/java/stirling/software/SPDF/model/ApplicationProperties.java\n@@ -122,18 +122,19 @@ public static class InitialLogin {\n \n         @Getter\n         @Setter\n+        @ToString\n         public static class SAML2 {\n             private Boolean enabled = false;\n             private Boolean autoCreateUser = false;\n             private Boolean blockRegistration = false;\n             private String registrationId = \"stirling\";\n-            private String idpMetadataUri;\n+            @ToString.Exclude private String idpMetadataUri;\n             private String idpSingleLogoutUrl;\n             private String idpSingleLoginUrl;\n             private String idpIssuer;\n             private String idpCert;\n-            private String privateKey;\n-            private String spCert;\n+            @ToString.Exclude private String privateKey;\n+            @ToString.Exclude private String spCert;\n \n             public InputStream getIdpMetadataUri() throws IOException {\n                 if (idpMetadataUri.startsWith(\"classpath:\")) {",
    "output": "Exclude Sensitive and Error-Prone Fields from toString() in SAML2 Configuration"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java b/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java\n@@ -208,7 +208,13 @@ public ResponseEntity<byte[]> convertToPdf(@ModelAttribute ConvertToPdfRequest r\n         String fitOption = request.getFitOption();\n         String colorType = request.getColorType();\n         boolean autoRotate = request.isAutoRotate();\n-\n+        // Handle Null entries for formdata\n+        if (colorType == null || colorType.isBlank()) {\n+            colorType = \"color\";\n+        }\n+        if (fitOption == null || fitOption.isEmpty()) {\n+            fitOption = \"fillPage\";\n+        }\n         // Convert the file to PDF and get the resulting bytes\n         byte[] bytes =\n                 PdfUtils.imageToPdf(file, fitOption, autoRotate, colorType, pdfDocumentFactory);",
    "output": "Merge pull request #2493 from reecebrowne/bug/2490/2488/image-to-pdf\n\nImg to pdf bug fixes"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/interfaces/DatabaseBackupInterface.java b/src/main/java/stirling/software/SPDF/config/interfaces/DatabaseBackupInterface.java\n--- a/src/main/java/stirling/software/SPDF/config/interfaces/DatabaseBackupInterface.java\n+++ b/src/main/java/stirling/software/SPDF/config/interfaces/DatabaseBackupInterface.java\n@@ -6,6 +6,7 @@\n import stirling.software.SPDF.utils.FileInfo;\n \n public interface DatabaseBackupInterface {\n+\n     void exportDatabase() throws IOException;\n \n     boolean importDatabase();\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/api/DatabaseController.java b/src/main/java/stirling/software/SPDF/controller/api/DatabaseController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/DatabaseController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/DatabaseController.java\n@@ -25,6 +25,7 @@\n \n import io.swagger.v3.oas.annotations.Hidden;\n import io.swagger.v3.oas.annotations.Operation;\n+import io.swagger.v3.oas.annotations.Parameter;\n import io.swagger.v3.oas.annotations.tags.Tag;\n \n import lombok.extern.slf4j.Slf4j;\n@@ -34,24 +35,28 @@\n @Controller\n @RequestMapping(\"/api/v1/database\")\n @PreAuthorize(\"hasRole('ROLE_ADMIN')\")\n-@Tag(name = \"Database\", description = \"Database APIs\")\n+@Tag(name = \"Database\", description = \"Database APIs for backup, import, and management\")\n public class DatabaseController {\n \n     @Autowired DatabaseBackupHelper databaseBackupHelper;\n \n-    @Hidden\n-    @PostMapping(consumes = \"multipart/form-data\", value = \"import-database\")\n     @Operation(\n-            summary = \"Import database backup\",\n-            description = \"This endpoint imports a database backup from a SQL file.\")\n+            summary = \"Import a database backup file\",\n+            description = \"Uploads and imports a database backup SQL file.\")\n+    @PostMapping(consumes = \"multipart/form-data\", value = \"import-database\")\n     public String importDatabase(\n-            @RequestParam(\"fileInput\") MultipartFile file, RedirectAttributes redirectAttributes)\n-            throws IllegalArgumentException, IOException {\n+            @Parameter(description = \"SQL file to import\", required = true)\n+                    @RequestParam(\"fileInput\")\n+                    MultipartFile file,\n+            RedirectAttributes redirectAttributes)\n+            throws IOException {\n+\n         if (file == null || file.isEmpty()) {\n             redirectAttributes.addAttribute(\"error\", \"fileNullOrEmpty\");\n             return \"redirect:/database\";\n         }\n         log.info(\"Received file: {}\", file.getOriginalFilename());\n+\n         Path tempTemplatePath = Files.createTempFile(\"backup_\", \".sql\");\n         try (InputStream in = file.getInputStream()) {\n             Files.copy(in, tempTemplatePath, StandardCopyOption.REPLACE_EXISTING);\n@@ -69,9 +74,15 @@ public String importDatabase(\n     }\n \n     @Hidden\n+    @Operation(\n+            summary = \"Import database backup by filename\",\n+            description = \"Imports a database backup file from the server using its file name.\")\n     @GetMapping(\"/import-database-file/{fileName}\")\n-    public String importDatabaseFromBackupUI(@PathVariable String fileName)\n-            throws IllegalArgumentException, IOException {\n+    public String importDatabaseFromBackupUI(\n+            @Parameter(description = \"Name of the file to import\", required = true) @PathVariable\n+                    String fileName)\n+            throws IOException {\n+\n         if (fileName == null || fileName.isEmpty()) {\n             return \"redirect:/database?error=fileNullOrEmpty\";\n         }\n@@ -85,6 +96,7 @@ public String importDatabaseFromBackupUI(@PathVariable String fileName)\n             return \"redirect:/database?error=fileNotFound\";\n         }\n         log.info(\"Received file: {}\", fileName);\n+\n         if (databaseBackupHelper.importDatabaseFromUI(fileName)) {\n             log.info(\"File {} imported to database\", fileName);\n             return \"redirect:/database?infoMessage=importIntoDatabaseSuccessed\";\n@@ -93,12 +105,14 @@ public String importDatabaseFromBackupUI(@PathVariable String fileName)\n     }\n \n     @Hidden\n-    @GetMapping(\"/delete/{fileName}\")\n     @Operation(\n             summary = \"Delete a database backup file\",\n-            description =\n-                    \"This endpoint deletes a database backup file with the specified file name.\")\n-    public String deleteFile(@PathVariable String fileName) {\n+            description = \"Deletes a specified database backup file from the server.\")\n+    @GetMapping(\"/delete/{fileName}\")\n+    public String deleteFile(\n+            @Parameter(description = \"Name of the file to delete\", required = true) @PathVariable\n+                    String fileName) {\n+\n         if (fileName == null || fileName.isEmpty()) {\n             throw new IllegalArgumentException(\"File must not be null or empty\");\n         }\n@@ -117,12 +131,13 @@ public String deleteFile(@PathVariable String fileName) {\n     }\n \n     @Hidden\n-    @GetMapping(\"/download/{fileName}\")\n     @Operation(\n             summary = \"Download a database backup file\",\n-            description =\n-                    \"This endpoint downloads a database backup file with the specified file name.\")\n-    public ResponseEntity<?> downloadFile(@PathVariable String fileName) {\n+            description = \"Downloads the specified database backup file from the server.\")\n+    @GetMapping(\"/download/{fileName}\")\n+    public ResponseEntity<?> downloadFile(\n+            @Parameter(description = \"Name of the file to download\", required = true) @PathVariable\n+                    String fileName) {\n         if (fileName == null || fileName.isEmpty()) {\n             throw new IllegalArgumentException(\"File must not be null or empty\");\n         }\n@@ -141,4 +156,22 @@ public ResponseEntity<?> downloadFile(@PathVariable String fileName) {\n                     .build();\n         }\n     }\n+\n+    @Operation(\n+            summary = \"Create a database backup\",\n+            description =\n+                    \"This endpoint triggers the creation of a database backup and redirects to the\"\n+                            + \" database management page.\")\n+    @GetMapping(\"/createDatabaseBackup\")\n+    public String createDatabaseBackup() {\n+        try {\n+            log.info(\"Starting database backup creation...\");\n+            databaseBackupHelper.exportDatabase();\n+            log.info(\"Database backup successfully created.\");\n+        } catch (IOException e) {\n+            log.error(\"Error creating database backup: {}\", e.getMessage(), e);\n+            return \"redirect:/database?error=\" + e.getMessage();\n+        }\n+        return \"redirect:/database?infoMessage=backupCreated\";\n+    }\n }",
    "output": "Merge pull request #2491 from Ludy87/database_create_m\n\nAdds manual backup creation"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java b/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java\n@@ -215,7 +215,7 @@ public ResponseEntity<byte[]> convertToPdf(@ModelAttribute ConvertToPdfRequest r\n             colorType = \"color\";\n         }\n         if (fitOption == null || fitOption.isEmpty()) {\n-            fitOption = \"fitDocumentToImage\";\n+            fitOption = \"fillPage\";\n         }\n         // Convert the file to PDF and get the resulting bytes\n         byte[] bytes =",
    "output": "Correct default fit"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java b/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java\n@@ -210,7 +210,13 @@ public ResponseEntity<byte[]> convertToPdf(@ModelAttribute ConvertToPdfRequest r\n         String fitOption = request.getFitOption();\n         String colorType = request.getColorType();\n         boolean autoRotate = request.isAutoRotate();\n-\n+        // Handle Null entries for formdata\n+        if (colorType == null || colorType.isBlank()) {\n+            colorType = \"color\";\n+        }\n+        if (fitOption == null || fitOption.isEmpty()) {\n+            fitOption = \"fitDocumentToImage\";\n+        }\n         // Convert the file to PDF and get the resulting bytes\n         byte[] bytes =\n                 PdfUtils.imageToPdf(file, fitOption, autoRotate, colorType, pdfDocumentFactory);",
    "output": "Add default to convert image to pdf api"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/interfaces/DatabaseBackupInterface.java b/src/main/java/stirling/software/SPDF/config/interfaces/DatabaseBackupInterface.java\n--- a/src/main/java/stirling/software/SPDF/config/interfaces/DatabaseBackupInterface.java\n+++ b/src/main/java/stirling/software/SPDF/config/interfaces/DatabaseBackupInterface.java\n@@ -6,6 +6,7 @@\n import stirling.software.SPDF.utils.FileInfo;\n \n public interface DatabaseBackupInterface {\n+\n     void exportDatabase() throws IOException;\n \n     boolean importDatabase();\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/api/DatabaseController.java b/src/main/java/stirling/software/SPDF/controller/api/DatabaseController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/DatabaseController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/DatabaseController.java\n@@ -25,6 +25,7 @@\n \n import io.swagger.v3.oas.annotations.Hidden;\n import io.swagger.v3.oas.annotations.Operation;\n+import io.swagger.v3.oas.annotations.Parameter;\n import io.swagger.v3.oas.annotations.tags.Tag;\n \n import lombok.extern.slf4j.Slf4j;\n@@ -34,24 +35,28 @@\n @Controller\n @RequestMapping(\"/api/v1/database\")\n @PreAuthorize(\"hasRole('ROLE_ADMIN')\")\n-@Tag(name = \"Database\", description = \"Database APIs\")\n+@Tag(name = \"Database\", description = \"Database APIs for backup, import, and management\")\n public class DatabaseController {\n \n     @Autowired DatabaseBackupHelper databaseBackupHelper;\n \n-    @Hidden\n-    @PostMapping(consumes = \"multipart/form-data\", value = \"import-database\")\n     @Operation(\n-            summary = \"Import database backup\",\n-            description = \"This endpoint imports a database backup from a SQL file.\")\n+            summary = \"Import a database backup file\",\n+            description = \"Uploads and imports a database backup SQL file.\")\n+    @PostMapping(consumes = \"multipart/form-data\", value = \"import-database\")\n     public String importDatabase(\n-            @RequestParam(\"fileInput\") MultipartFile file, RedirectAttributes redirectAttributes)\n-            throws IllegalArgumentException, IOException {\n+            @Parameter(description = \"SQL file to import\", required = true)\n+                    @RequestParam(\"fileInput\")\n+                    MultipartFile file,\n+            RedirectAttributes redirectAttributes)\n+            throws IOException {\n+\n         if (file == null || file.isEmpty()) {\n             redirectAttributes.addAttribute(\"error\", \"fileNullOrEmpty\");\n             return \"redirect:/database\";\n         }\n         log.info(\"Received file: {}\", file.getOriginalFilename());\n+\n         Path tempTemplatePath = Files.createTempFile(\"backup_\", \".sql\");\n         try (InputStream in = file.getInputStream()) {\n             Files.copy(in, tempTemplatePath, StandardCopyOption.REPLACE_EXISTING);\n@@ -69,9 +74,15 @@ public String importDatabase(\n     }\n \n     @Hidden\n+    @Operation(\n+            summary = \"Import database backup by filename\",\n+            description = \"Imports a database backup file from the server using its file name.\")\n     @GetMapping(\"/import-database-file/{fileName}\")\n-    public String importDatabaseFromBackupUI(@PathVariable String fileName)\n-            throws IllegalArgumentException, IOException {\n+    public String importDatabaseFromBackupUI(\n+            @Parameter(description = \"Name of the file to import\", required = true) @PathVariable\n+                    String fileName)\n+            throws IOException {\n+\n         if (fileName == null || fileName.isEmpty()) {\n             return \"redirect:/database?error=fileNullOrEmpty\";\n         }\n@@ -85,6 +96,7 @@ public String importDatabaseFromBackupUI(@PathVariable String fileName)\n             return \"redirect:/database?error=fileNotFound\";\n         }\n         log.info(\"Received file: {}\", fileName);\n+\n         if (databaseBackupHelper.importDatabaseFromUI(fileName)) {\n             log.info(\"File {} imported to database\", fileName);\n             return \"redirect:/database?infoMessage=importIntoDatabaseSuccessed\";\n@@ -93,12 +105,14 @@ public String importDatabaseFromBackupUI(@PathVariable String fileName)\n     }\n \n     @Hidden\n-    @GetMapping(\"/delete/{fileName}\")\n     @Operation(\n             summary = \"Delete a database backup file\",\n-            description =\n-                    \"This endpoint deletes a database backup file with the specified file name.\")\n-    public String deleteFile(@PathVariable String fileName) {\n+            description = \"Deletes a specified database backup file from the server.\")\n+    @GetMapping(\"/delete/{fileName}\")\n+    public String deleteFile(\n+            @Parameter(description = \"Name of the file to delete\", required = true) @PathVariable\n+                    String fileName) {\n+\n         if (fileName == null || fileName.isEmpty()) {\n             throw new IllegalArgumentException(\"File must not be null or empty\");\n         }\n@@ -117,12 +131,13 @@ public String deleteFile(@PathVariable String fileName) {\n     }\n \n     @Hidden\n-    @GetMapping(\"/download/{fileName}\")\n     @Operation(\n             summary = \"Download a database backup file\",\n-            description =\n-                    \"This endpoint downloads a database backup file with the specified file name.\")\n-    public ResponseEntity<?> downloadFile(@PathVariable String fileName) {\n+            description = \"Downloads the specified database backup file from the server.\")\n+    @GetMapping(\"/download/{fileName}\")\n+    public ResponseEntity<?> downloadFile(\n+            @Parameter(description = \"Name of the file to download\", required = true) @PathVariable\n+                    String fileName) {\n         if (fileName == null || fileName.isEmpty()) {\n             throw new IllegalArgumentException(\"File must not be null or empty\");\n         }\n@@ -141,4 +156,22 @@ public ResponseEntity<?> downloadFile(@PathVariable String fileName) {\n                     .build();\n         }\n     }\n+\n+    @Operation(\n+            summary = \"Create a database backup\",\n+            description =\n+                    \"This endpoint triggers the creation of a database backup and redirects to the\"\n+                            + \" database management page.\")\n+    @GetMapping(\"/createDatabaseBackup\")\n+    public String createDatabaseBackup() {\n+        try {\n+            log.info(\"Starting database backup creation...\");\n+            databaseBackupHelper.exportDatabase();\n+            log.info(\"Database backup successfully created.\");\n+        } catch (IOException e) {\n+            log.error(\"Error creating database backup: {}\", e.getMessage(), e);\n+            return \"redirect:/database?error=\" + e.getMessage();\n+        }\n+        return \"redirect:/database?infoMessage=backupCreated\";\n+    }\n }",
    "output": "Adds manual backup creation"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/security/PasswordController.java b/src/main/java/stirling/software/SPDF/controller/api/security/PasswordController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/security/PasswordController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/security/PasswordController.java\n@@ -39,10 +39,7 @@ public PasswordController(CustomPDDocumentFactory pdfDocumentFactory) {\n     }\n \n     @PostMapping(consumes = \"multipart/form-data\", value = \"/remove-password\")\n-    @Operation(\n-            summary = \"Remove password from a PDF file\",\n-            description =\n-                    \"This endpoint removes the password from a protected PDF file. Users need to provide the existing password. Input:PDF Output:PDF Type:SISO\")\n+    @Operation(summary = \"Remove password from a PDF file\", description = \"This endpoint removes the password from a protected PDF file. Users need to provide the existing password. Input:PDF Output:PDF Type:SISO\")\n     public ResponseEntity<byte[]> removePassword(@ModelAttribute PDFPasswordRequest request)\n             throws IOException {\n         MultipartFile fileInput = request.getFileInput();\n@@ -52,15 +49,12 @@ public ResponseEntity<byte[]> removePassword(@ModelAttribute PDFPasswordRequest\n         return WebResponseUtils.pdfDocToWebResponse(\n                 document,\n                 Filenames.toSimpleFileName(fileInput.getOriginalFilename())\n-                                .replaceFirst(\"[.][^.]+$\", \"\")\n+                        .replaceFirst(\"[.][^.]+$\", \"\")\n                         + \"_password_removed.pdf\");\n     }\n \n     @PostMapping(consumes = \"multipart/form-data\", value = \"/add-password\")\n-    @Operation(\n-            summary = \"Add password to a PDF file\",\n-            description =\n-                    \"This endpoint adds password protection to a PDF file. Users can specify a set of permissions that should be applied to the file. Input:PDF Output:PDF\")\n+    @Operation(summary = \"Add password to a PDF file\", description = \"This endpoint adds password protection to a PDF file. Users can specify a set of permissions that should be applied to the file. Input:PDF Output:PDF\")\n     public ResponseEntity<byte[]> addPassword(@ModelAttribute AddPasswordRequest request)\n             throws IOException {\n         MultipartFile fileInput = request.getFileInput();\n@@ -98,12 +92,12 @@ public ResponseEntity<byte[]> addPassword(@ModelAttribute AddPasswordRequest req\n             return WebResponseUtils.pdfDocToWebResponse(\n                     document,\n                     Filenames.toSimpleFileName(fileInput.getOriginalFilename())\n-                                    .replaceFirst(\"[.][^.]+$\", \"\")\n+                            .replaceFirst(\"[.][^.]+$\", \"\")\n                             + \"_permissions.pdf\");\n         return WebResponseUtils.pdfDocToWebResponse(\n                 document,\n                 Filenames.toSimpleFileName(fileInput.getOriginalFilename())\n-                                .replaceFirst(\"[.][^.]+$\", \"\")\n+                        .replaceFirst(\"[.][^.]+$\", \"\")\n                         + \"_passworded.pdf\");\n     }\n }\n\ndiff --git a/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java b/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java\n--- a/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java\n+++ b/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java\n@@ -88,15 +88,45 @@ public static boolean isValidURL(String urlStr) {\n \n     public static boolean isURLReachable(String urlStr) {\n         try {\n+            // Parse the URL\n             URL url = URI.create(urlStr).toURL();\n+\n+            // Allow only http and https protocols\n+            String protocol = url.getProtocol();\n+            if (!protocol.equals(\"http\") && !protocol.equals(\"https\")) {\n+                return false; // Disallow other protocols\n+            }\n+\n+            // Check if the host is a local address\n+            String host = url.getHost();\n+            if (isLocalAddress(host)) {\n+                return false; // Exclude local addresses\n+            }\n+\n+            // Check if the URL is reachable\n             HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n             connection.setRequestMethod(\"HEAD\");\n+            // connection.setConnectTimeout(5000); // Set connection timeout\n+            // connection.setReadTimeout(5000);    // Set read timeout\n             int responseCode = connection.getResponseCode();\n             return (200 <= responseCode && responseCode <= 399);\n-        } catch (MalformedURLException e) {\n-            return false;\n-        } catch (IOException e) {\n-            return false;\n+        } catch (Exception e) {\n+            return false; // Return false in case of any exception\n+        }\n+    }\n+\n+    private static boolean isLocalAddress(String host) {\n+        try {\n+            // Resolve DNS to IP address\n+            InetAddress address = InetAddress.getByName(host);\n+\n+            // Check for local addresses\n+            return address.isAnyLocalAddress() ||  // Matches 0.0.0.0 or similar\n+                   address.isLoopbackAddress() || // Matches 127.0.0.1 or ::1\n+                   address.isSiteLocalAddress() || // Matches private IPv4 ranges: 192.168.x.x, 10.x.x.x, 172.16.x.x to 172.31.x.x\n+                   address.getHostAddress().startsWith(\"fe80:\"); // Matches link-local IPv6 addresses\n+        } catch (Exception e) {\n+            return false; // Return false for invalid or unresolved addresses\n         }\n     }\n ",
    "output": "Merge remote-tracking branch 'origin/main' into csrf2"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/security/PasswordController.java b/src/main/java/stirling/software/SPDF/controller/api/security/PasswordController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/security/PasswordController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/security/PasswordController.java\n@@ -39,10 +39,7 @@ public PasswordController(CustomPDDocumentFactory pdfDocumentFactory) {\n     }\n \n     @PostMapping(consumes = \"multipart/form-data\", value = \"/remove-password\")\n-    @Operation(\n-            summary = \"Remove password from a PDF file\",\n-            description =\n-                    \"This endpoint removes the password from a protected PDF file. Users need to provide the existing password. Input:PDF Output:PDF Type:SISO\")\n+    @Operation(summary = \"Remove password from a PDF file\", description = \"This endpoint removes the password from a protected PDF file. Users need to provide the existing password. Input:PDF Output:PDF Type:SISO\")\n     public ResponseEntity<byte[]> removePassword(@ModelAttribute PDFPasswordRequest request)\n             throws IOException {\n         MultipartFile fileInput = request.getFileInput();\n@@ -52,15 +49,12 @@ public ResponseEntity<byte[]> removePassword(@ModelAttribute PDFPasswordRequest\n         return WebResponseUtils.pdfDocToWebResponse(\n                 document,\n                 Filenames.toSimpleFileName(fileInput.getOriginalFilename())\n-                                .replaceFirst(\"[.][^.]+$\", \"\")\n+                        .replaceFirst(\"[.][^.]+$\", \"\")\n                         + \"_password_removed.pdf\");\n     }\n \n     @PostMapping(consumes = \"multipart/form-data\", value = \"/add-password\")\n-    @Operation(\n-            summary = \"Add password to a PDF file\",\n-            description =\n-                    \"This endpoint adds password protection to a PDF file. Users can specify a set of permissions that should be applied to the file. Input:PDF Output:PDF\")\n+    @Operation(summary = \"Add password to a PDF file\", description = \"This endpoint adds password protection to a PDF file. Users can specify a set of permissions that should be applied to the file. Input:PDF Output:PDF\")\n     public ResponseEntity<byte[]> addPassword(@ModelAttribute AddPasswordRequest request)\n             throws IOException {\n         MultipartFile fileInput = request.getFileInput();\n@@ -98,12 +92,12 @@ public ResponseEntity<byte[]> addPassword(@ModelAttribute AddPasswordRequest req\n             return WebResponseUtils.pdfDocToWebResponse(\n                     document,\n                     Filenames.toSimpleFileName(fileInput.getOriginalFilename())\n-                                    .replaceFirst(\"[.][^.]+$\", \"\")\n+                            .replaceFirst(\"[.][^.]+$\", \"\")\n                             + \"_permissions.pdf\");\n         return WebResponseUtils.pdfDocToWebResponse(\n                 document,\n                 Filenames.toSimpleFileName(fileInput.getOriginalFilename())\n-                                .replaceFirst(\"[.][^.]+$\", \"\")\n+                        .replaceFirst(\"[.][^.]+$\", \"\")\n                         + \"_passworded.pdf\");\n     }\n }\n\ndiff --git a/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java b/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java\n--- a/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java\n+++ b/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java\n@@ -88,15 +88,45 @@ public static boolean isValidURL(String urlStr) {\n \n     public static boolean isURLReachable(String urlStr) {\n         try {\n+            // Parse the URL\n             URL url = URI.create(urlStr).toURL();\n+\n+            // Allow only http and https protocols\n+            String protocol = url.getProtocol();\n+            if (!protocol.equals(\"http\") && !protocol.equals(\"https\")) {\n+                return false; // Disallow other protocols\n+            }\n+\n+            // Check if the host is a local address\n+            String host = url.getHost();\n+            if (isLocalAddress(host)) {\n+                return false; // Exclude local addresses\n+            }\n+\n+            // Check if the URL is reachable\n             HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n             connection.setRequestMethod(\"HEAD\");\n+            // connection.setConnectTimeout(5000); // Set connection timeout\n+            // connection.setReadTimeout(5000);    // Set read timeout\n             int responseCode = connection.getResponseCode();\n             return (200 <= responseCode && responseCode <= 399);\n-        } catch (MalformedURLException e) {\n-            return false;\n-        } catch (IOException e) {\n-            return false;\n+        } catch (Exception e) {\n+            return false; // Return false in case of any exception\n+        }\n+    }\n+\n+    private static boolean isLocalAddress(String host) {\n+        try {\n+            // Resolve DNS to IP address\n+            InetAddress address = InetAddress.getByName(host);\n+\n+            // Check for local addresses\n+            return address.isAnyLocalAddress() ||  // Matches 0.0.0.0 or similar\n+                   address.isLoopbackAddress() || // Matches 127.0.0.1 or ::1\n+                   address.isSiteLocalAddress() || // Matches private IPv4 ranges: 192.168.x.x, 10.x.x.x, 172.16.x.x to 172.31.x.x\n+                   address.getHostAddress().startsWith(\"fe80:\"); // Matches link-local IPv6 addresses\n+        } catch (Exception e) {\n+            return false; // Return false for invalid or unresolved addresses\n         }\n     }\n ",
    "output": "Merge branch 'main' into testStuff"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/SPdfApplication.java b/src/main/java/stirling/software/SPDF/SPdfApplication.java\n--- a/src/main/java/stirling/software/SPDF/SPdfApplication.java\n+++ b/src/main/java/stirling/software/SPDF/SPdfApplication.java\n@@ -22,6 +22,7 @@\n import org.springframework.core.env.Environment;\n import org.springframework.scheduling.annotation.EnableScheduling;\n \n+import io.github.pixee.security.SystemCommand;\n import jakarta.annotation.PostConstruct;\n import jakarta.annotation.PreDestroy;\n import lombok.extern.slf4j.Slf4j;\n@@ -147,16 +148,32 @@ private static void printStartupLogs() {\n \n     @PostConstruct\n     public void init() {\n-        log.info(\n-                \"1 STIRLING_PDF_DESKTOP_UI={}\",\n-                Boolean.parseBoolean(System.getProperty(\"STIRLING_PDF_DESKTOP_UI\", \"false\")));\n         baseUrlStatic = this.baseUrl;\n         String url = baseUrl + \":\" + getStaticPort();\n         if (webBrowser != null\n                 && Boolean.parseBoolean(System.getProperty(\"STIRLING_PDF_DESKTOP_UI\", \"false\"))) {\n-\n             webBrowser.initWebUI(url);\n+        } else {\n+        \tString browserOpenEnv = env.getProperty(\"BROWSER_OPEN\");\n+            boolean browserOpen = browserOpenEnv != null && \"true\".equalsIgnoreCase(browserOpenEnv);\n+            if (browserOpen) {\n+                try {\n+                    String os = System.getProperty(\"os.name\").toLowerCase();\n+                    Runtime rt = Runtime.getRuntime();\n+                    if (os.contains(\"win\")) {\n+                        // For Windows\n+                        SystemCommand.runCommand(rt, \"rundll32 url.dll,FileProtocolHandler \" + url);\n+                    } else if (os.contains(\"mac\")) {\n+                        SystemCommand.runCommand(rt, \"open \" + url);\n+                    } else if (os.contains(\"nix\") || os.contains(\"nux\")) {\n+                        SystemCommand.runCommand(rt, \"xdg-open \" + url);\n+                    }\n+                } catch (Exception e) {\n+                    logger.error(\"Error opening browser: {}\", e.getMessage());\n+                }\n+            }\n         }\n+        logger.info(\"Running configs {}\", applicationProperties.toString()); \n     }\n \n     @PreDestroy\n\ndiff --git a/src/main/java/stirling/software/SPDF/UI/impl/DesktopBrowser.java b/src/main/java/stirling/software/SPDF/UI/impl/DesktopBrowser.java\n--- a/src/main/java/stirling/software/SPDF/UI/impl/DesktopBrowser.java\n+++ b/src/main/java/stirling/software/SPDF/UI/impl/DesktopBrowser.java\n@@ -58,23 +58,19 @@ public class DesktopBrowser implements WebBrowser {\n     private static SystemTray systemTray;\n \n     public DesktopBrowser() {\n-        log.info(\"DesktopBrowser 1\");\n         SwingUtilities.invokeLater(\n                 () -> {\n                     loadingWindow = new LoadingWindow(null, \"Initializing...\");\n                     loadingWindow.setVisible(true);\n-                    log.info(\"DesktopBrowser 2\");\n                 });\n     }\n \n     public void initWebUI(String url) {\n         CompletableFuture.runAsync(\n                 () -> {\n                     try {\n-                        log.info(\"DesktopBrowser 4\");\n                         CefAppBuilder builder = new CefAppBuilder();\n                         configureCefSettings(builder);\n-\n                         builder.setProgressHandler(createProgressHandler());\n \n                         // Build and initialize CEF\n@@ -94,7 +90,6 @@ public void initWebUI(String url) {\n                                     // Show the frame immediately but transparent\n                                     frame.setVisible(true);\n                                 });\n-                        log.info(\"DesktopBrowser 5\");\n                     } catch (Exception e) {\n                         log.error(\"Error initializing JCEF browser: \", e);\n                         cleanup();\n@@ -156,7 +151,6 @@ public void handleProgress(EnumProgress state, float percent) {\n                 Objects.requireNonNull(state, \"state cannot be null\");\n                 SwingUtilities.invokeLater(\n                         () -> {\n-                            log.info(\"state {}\", state.name());\n                             if (loadingWindow != null) {\n                                 switch (state) {\n                                     case LOCATING:\n@@ -226,7 +220,6 @@ public void onLoadingStateChange(\n                             boolean isLoading,\n                             boolean canGoBack,\n                             boolean canGoForward) {\n-                        log.info(\"Loading state changed: \" + isLoading);\n                         if (!isLoading && !browserInitialized) {\n                             browserInitialized = true;\n                             SwingUtilities.invokeLater(\n@@ -343,7 +336,6 @@ private void loadIcon() {\n             if (icon != null) {\n                 frame.setIconImage(icon);\n                 setupTrayIcon(icon);\n-                log.info(\"Successfully set frame icon\");\n             } else {\n                 log.warn(\"Could not load icon from any source\");\n             }",
    "output": "logs and cleanup"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/SPdfApplication.java b/src/main/java/stirling/software/SPDF/SPdfApplication.java\n--- a/src/main/java/stirling/software/SPDF/SPdfApplication.java\n+++ b/src/main/java/stirling/software/SPDF/SPdfApplication.java\n@@ -79,11 +79,11 @@ public static void main(String[] args) throws IOException, InterruptedException\n \n         Properties props = new Properties();\n \n-        if (\"true\".equals(System.getenv(\"STIRLING_PDF_DESKTOP_UI\"))) {\n+        if (Boolean.parseBoolean(System.getProperty(\"STIRLING_PDF_DESKTOP_UI\", \"false\"))) {\n             System.setProperty(\"java.awt.headless\", \"false\");\n             app.setHeadless(false);\n-            //            props.put(\"java.awt.headless\", \"false\");\n-            //            props.put(\"spring.main.web-application-type\", \"servlet\");\n+            props.put(\"java.awt.headless\", \"false\");\n+            props.put(\"spring.main.web-application-type\", \"servlet\");\n         }\n \n         app.setAdditionalProfiles(\"default\");\n@@ -118,7 +118,7 @@ public static void main(String[] args) throws IOException, InterruptedException\n                             propertyFiles.get(\"spring.config.additional-location\")));\n         }\n \n-        if (props.isEmpty()) {\n+        if (!props.isEmpty()) {\n             finalProps.putAll(props);\n         }\n         app.setDefaultProperties(finalProps);\n@@ -147,9 +147,13 @@ private static void printStartupLogs() {\n \n     @PostConstruct\n     public void init() {\n+        log.info(\n+                \"1 STIRLING_PDF_DESKTOP_UI={}\",\n+                Boolean.parseBoolean(System.getProperty(\"STIRLING_PDF_DESKTOP_UI\", \"false\")));\n         baseUrlStatic = this.baseUrl;\n         String url = baseUrl + \":\" + getStaticPort();\n-        if (webBrowser != null && \"true\".equals(System.getenv(\"STIRLING_PDF_DESKTOP_UI\"))) {\n+        if (webBrowser != null\n+                && Boolean.parseBoolean(System.getProperty(\"STIRLING_PDF_DESKTOP_UI\", \"false\"))) {\n \n             webBrowser.initWebUI(url);\n         }\n\ndiff --git a/src/main/java/stirling/software/SPDF/UI/impl/DesktopBrowser.java b/src/main/java/stirling/software/SPDF/UI/impl/DesktopBrowser.java\n--- a/src/main/java/stirling/software/SPDF/UI/impl/DesktopBrowser.java\n+++ b/src/main/java/stirling/software/SPDF/UI/impl/DesktopBrowser.java\n@@ -58,17 +58,20 @@ public class DesktopBrowser implements WebBrowser {\n     private static SystemTray systemTray;\n \n     public DesktopBrowser() {\n+        log.info(\"DesktopBrowser 1\");\n         SwingUtilities.invokeLater(\n                 () -> {\n                     loadingWindow = new LoadingWindow(null, \"Initializing...\");\n                     loadingWindow.setVisible(true);\n+                    log.info(\"DesktopBrowser 2\");\n                 });\n     }\n \n     public void initWebUI(String url) {\n         CompletableFuture.runAsync(\n                 () -> {\n                     try {\n+                        log.info(\"DesktopBrowser 4\");\n                         CefAppBuilder builder = new CefAppBuilder();\n                         configureCefSettings(builder);\n \n@@ -91,7 +94,7 @@ public void initWebUI(String url) {\n                                     // Show the frame immediately but transparent\n                                     frame.setVisible(true);\n                                 });\n-\n+                        log.info(\"DesktopBrowser 5\");\n                     } catch (Exception e) {\n                         log.error(\"Error initializing JCEF browser: \", e);\n                         cleanup();\n@@ -153,27 +156,28 @@ public void handleProgress(EnumProgress state, float percent) {\n                 Objects.requireNonNull(state, \"state cannot be null\");\n                 SwingUtilities.invokeLater(\n                         () -> {\n+                            log.info(\"state {}\", state.name());\n                             if (loadingWindow != null) {\n                                 switch (state) {\n                                     case LOCATING:\n-                                        loadingWindow.setStatus(\"Locating Chromium...\");\n+                                        loadingWindow.setStatus(\"Locating Files...\");\n                                         loadingWindow.setProgress(0);\n                                         break;\n                                     case DOWNLOADING:\n                                         if (percent >= 0) {\n                                             loadingWindow.setStatus(\n                                                     String.format(\n-                                                            \"Downloading Chromium: %.0f%%\",\n+                                                            \"Downloading additional files: %.0f%%\",\n                                                             percent));\n                                             loadingWindow.setProgress((int) percent);\n                                         }\n                                         break;\n                                     case EXTRACTING:\n-                                        loadingWindow.setStatus(\"Extracting Chromium...\");\n+                                        loadingWindow.setStatus(\"Extracting files...\");\n                                         loadingWindow.setProgress(60);\n                                         break;\n                                     case INITIALIZING:\n-                                        loadingWindow.setStatus(\"Initializing browser...\");\n+                                        loadingWindow.setStatus(\"Initializing UI...\");\n                                         loadingWindow.setProgress(80);\n                                         break;\n                                     case INITIALIZED:",
    "output": "fixes!"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java b/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java\n--- a/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java\n+++ b/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java\n@@ -88,15 +88,45 @@ public static boolean isValidURL(String urlStr) {\n \n     public static boolean isURLReachable(String urlStr) {\n         try {\n+            // Parse the URL\n             URL url = URI.create(urlStr).toURL();\n+\n+            // Allow only http and https protocols\n+            String protocol = url.getProtocol();\n+            if (!protocol.equals(\"http\") && !protocol.equals(\"https\")) {\n+                return false; // Disallow other protocols\n+            }\n+\n+            // Check if the host is a local address\n+            String host = url.getHost();\n+            if (isLocalAddress(host)) {\n+                return false; // Exclude local addresses\n+            }\n+\n+            // Check if the URL is reachable\n             HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n             connection.setRequestMethod(\"HEAD\");\n+            // connection.setConnectTimeout(5000); // Set connection timeout\n+            // connection.setReadTimeout(5000);    // Set read timeout\n             int responseCode = connection.getResponseCode();\n             return (200 <= responseCode && responseCode <= 399);\n-        } catch (MalformedURLException e) {\n-            return false;\n-        } catch (IOException e) {\n-            return false;\n+        } catch (Exception e) {\n+            return false; // Return false in case of any exception\n+        }\n+    }\n+\n+    private static boolean isLocalAddress(String host) {\n+        try {\n+            // Resolve DNS to IP address\n+            InetAddress address = InetAddress.getByName(host);\n+\n+            // Check for local addresses\n+            return address.isAnyLocalAddress() ||  // Matches 0.0.0.0 or similar\n+                   address.isLoopbackAddress() || // Matches 127.0.0.1 or ::1\n+                   address.isSiteLocalAddress() || // Matches private IPv4 ranges: 192.168.x.x, 10.x.x.x, 172.16.x.x to 172.31.x.x\n+                   address.getHostAddress().startsWith(\"fe80:\"); // Matches link-local IPv6 addresses\n+        } catch (Exception e) {\n+            return false; // Return false for invalid or unresolved addresses\n         }\n     }\n ",
    "output": "Merge pull request #2434 from Ludy87/security_fix_1\n\nSecurity fix: Server-Side Request Forgery"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/SPdfApplication.java b/src/main/java/stirling/software/SPDF/SPdfApplication.java\n--- a/src/main/java/stirling/software/SPDF/SPdfApplication.java\n+++ b/src/main/java/stirling/software/SPDF/SPdfApplication.java\n@@ -75,19 +75,17 @@ private static boolean isPortAvailable(int port) {\n \n     public static void main(String[] args) throws IOException, InterruptedException {\n \n-        \n-\n         SpringApplication app = new SpringApplication(SPdfApplication.class);\n-        \n+\n         Properties props = new Properties();\n-        \n-        if(\"true\".equals(System.getenv(\"STIRLING_PDF_DESKTOP_UI\"))) {\n-\t        System.setProperty(\"java.awt.headless\", \"false\");\n-\t        app.setHeadless(false);\n-\t        props.put(\"java.awt.headless\", \"false\");\n-\t        props.put(\"spring.main.web-application-type\", \"servlet\");\n+\n+        if (\"true\".equals(System.getenv(\"STIRLING_PDF_DESKTOP_UI\"))) {\n+            System.setProperty(\"java.awt.headless\", \"false\");\n+            app.setHeadless(false);\n+            //            props.put(\"java.awt.headless\", \"false\");\n+            //            props.put(\"spring.main.web-application-type\", \"servlet\");\n         }\n-        \n+\n         app.setAdditionalProfiles(\"default\");\n         app.addInitializers(new ConfigInitializer());\n         Map<String, String> propertyFiles = new HashMap<>();\n@@ -112,10 +110,17 @@ public static void main(String[] args) throws IOException, InterruptedException\n             logger.warn(\"Custom configuration file 'configs/custom_settings.yml' does not exist.\");\n         }\n         Properties finalProps = new Properties();\n-        finalProps.putAll(Collections.singletonMap(\n-                \"spring.config.additional-location\",\n-                propertyFiles.get(\"spring.config.additional-location\")));\n-        finalProps.putAll(props);\n+\n+        if (!propertyFiles.isEmpty()) {\n+            finalProps.putAll(\n+                    Collections.singletonMap(\n+                            \"spring.config.additional-location\",\n+                            propertyFiles.get(\"spring.config.additional-location\")));\n+        }\n+\n+        if (props.isEmpty()) {\n+            finalProps.putAll(props);\n+        }\n         app.setDefaultProperties(finalProps);\n \n         app.run(args);\n\ndiff --git a/src/main/java/stirling/software/SPDF/UI/impl/LoadingWindow.java b/src/main/java/stirling/software/SPDF/UI/impl/LoadingWindow.java\n--- a/src/main/java/stirling/software/SPDF/UI/impl/LoadingWindow.java\n+++ b/src/main/java/stirling/software/SPDF/UI/impl/LoadingWindow.java\n@@ -90,7 +90,6 @@ public void setProgress(final int progress) {\n                     try {\n                         progressBar.setValue(Math.min(Math.max(progress, 0), 100));\n                         progressBar.setString(progress + \"%\");\n-                        log.info(progress + \"%\");\n                         mainPanel.revalidate();\n                         mainPanel.repaint();\n                     } catch (Exception e) {",
    "output": "fixes"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/SPdfApplication.java b/src/main/java/stirling/software/SPDF/SPdfApplication.java\n--- a/src/main/java/stirling/software/SPDF/SPdfApplication.java\n+++ b/src/main/java/stirling/software/SPDF/SPdfApplication.java\n@@ -79,10 +79,15 @@ public static void main(String[] args) throws IOException, InterruptedException\n \n         SpringApplication app = new SpringApplication(SPdfApplication.class);\n         \n+        Properties props = new Properties();\n+        \n         if(\"true\".equals(System.getenv(\"STIRLING_PDF_DESKTOP_UI\"))) {\n \t        System.setProperty(\"java.awt.headless\", \"false\");\n \t        app.setHeadless(false);\n+\t        props.put(\"java.awt.headless\", \"false\");\n+\t        props.put(\"spring.main.web-application-type\", \"servlet\");\n         }\n+        \n         app.setAdditionalProfiles(\"default\");\n         app.addInitializers(new ConfigInitializer());\n         Map<String, String> propertyFiles = new HashMap<>();\n@@ -106,18 +111,12 @@ public static void main(String[] args) throws IOException, InterruptedException\n         } else {\n             logger.warn(\"Custom configuration file 'configs/custom_settings.yml' does not exist.\");\n         }\n-\n-        if (!propertyFiles.isEmpty()) {\n-            app.setDefaultProperties(\n-                    Collections.singletonMap(\n-                            \"spring.config.additional-location\",\n-                            propertyFiles.get(\"spring.config.additional-location\")));\n-        }\n-\n-        Properties props = new Properties();\n-        props.put(\"java.awt.headless\", \"false\");\n-        props.put(\"spring.main.web-application-type\", \"servlet\");\n-        app.setDefaultProperties(props);\n+        Properties finalProps = new Properties();\n+        finalProps.putAll(Collections.singletonMap(\n+                \"spring.config.additional-location\",\n+                propertyFiles.get(\"spring.config.additional-location\")));\n+        finalProps.putAll(props);\n+        app.setDefaultProperties(finalProps);\n \n         app.run(args);\n ",
    "output": "prop fixes"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/SPdfApplication.java b/src/main/java/stirling/software/SPDF/SPdfApplication.java\n--- a/src/main/java/stirling/software/SPDF/SPdfApplication.java\n+++ b/src/main/java/stirling/software/SPDF/SPdfApplication.java\n@@ -75,10 +75,14 @@ private static boolean isPortAvailable(int port) {\n \n     public static void main(String[] args) throws IOException, InterruptedException {\n \n-        System.setProperty(\"java.awt.headless\", \"false\");\n+        \n \n         SpringApplication app = new SpringApplication(SPdfApplication.class);\n-        app.setHeadless(false);\n+        \n+        if(\"true\".equals(System.getenv(\"STIRLING_PDF_DESKTOP_UI\"))) {\n+\t        System.setProperty(\"java.awt.headless\", \"false\");\n+\t        app.setHeadless(false);\n+        }\n         app.setAdditionalProfiles(\"default\");\n         app.addInitializers(new ConfigInitializer());\n         Map<String, String> propertyFiles = new HashMap<>();",
    "output": "headless"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java b/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java\n--- a/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java\n+++ b/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java\n@@ -88,15 +88,45 @@ public static boolean isValidURL(String urlStr) {\n \n     public static boolean isURLReachable(String urlStr) {\n         try {\n+            // Parse the URL\n             URL url = URI.create(urlStr).toURL();\n+\n+            // Allow only http and https protocols\n+            String protocol = url.getProtocol();\n+            if (!protocol.equals(\"http\") && !protocol.equals(\"https\")) {\n+                return false; // Disallow other protocols\n+            }\n+\n+            // Check if the host is a local address\n+            String host = url.getHost();\n+            if (isLocalAddress(host)) {\n+                return false; // Exclude local addresses\n+            }\n+\n+            // Check if the URL is reachable\n             HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n             connection.setRequestMethod(\"HEAD\");\n+            connection.setConnectTimeout(5000); // Set connection timeout\n+            connection.setReadTimeout(5000);    // Set read timeout\n             int responseCode = connection.getResponseCode();\n             return (200 <= responseCode && responseCode <= 399);\n-        } catch (MalformedURLException e) {\n-            return false;\n-        } catch (IOException e) {\n-            return false;\n+        } catch (Exception e) {\n+            return false; // Return false in case of any exception\n+        }\n+    }\n+\n+    private static boolean isLocalAddress(String host) {\n+        try {\n+            // Resolve DNS to IP address\n+            InetAddress address = InetAddress.getByName(host);\n+\n+            // Check for local addresses\n+            return address.isAnyLocalAddress() ||  // Matches 0.0.0.0 or similar\n+                   address.isLoopbackAddress() || // Matches 127.0.0.1 or ::1\n+                   address.isSiteLocalAddress() || // Matches private IPv4 ranges: 192.168.x.x, 10.x.x.x, 172.16.x.x to 172.31.x.x\n+                   address.getHostAddress().startsWith(\"fe80:\"); // Matches link-local IPv6 addresses\n+        } catch (Exception e) {\n+            return false; // Return false for invalid or unresolved addresses\n         }\n     }\n ",
    "output": "Security fix: Server-Side Request Forgery\n\nhttps://github.com/Stirling-Tools/Stirling-PDF/security/advisories/GHSA-4v4c-9hpr-93vx"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/security/PasswordController.java b/src/main/java/stirling/software/SPDF/controller/api/security/PasswordController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/security/PasswordController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/security/PasswordController.java\n@@ -39,10 +39,7 @@ public PasswordController(CustomPDDocumentFactory pdfDocumentFactory) {\n     }\n \n     @PostMapping(consumes = \"multipart/form-data\", value = \"/remove-password\")\n-    @Operation(\n-            summary = \"Remove password from a PDF file\",\n-            description =\n-                    \"This endpoint removes the password from a protected PDF file. Users need to provide the existing password. Input:PDF Output:PDF Type:SISO\")\n+    @Operation(summary = \"Remove password from a PDF file\", description = \"This endpoint removes the password from a protected PDF file. Users need to provide the existing password. Input:PDF Output:PDF Type:SISO\")\n     public ResponseEntity<byte[]> removePassword(@ModelAttribute PDFPasswordRequest request)\n             throws IOException {\n         MultipartFile fileInput = request.getFileInput();\n@@ -52,15 +49,12 @@ public ResponseEntity<byte[]> removePassword(@ModelAttribute PDFPasswordRequest\n         return WebResponseUtils.pdfDocToWebResponse(\n                 document,\n                 Filenames.toSimpleFileName(fileInput.getOriginalFilename())\n-                                .replaceFirst(\"[.][^.]+$\", \"\")\n+                        .replaceFirst(\"[.][^.]+$\", \"\")\n                         + \"_password_removed.pdf\");\n     }\n \n     @PostMapping(consumes = \"multipart/form-data\", value = \"/add-password\")\n-    @Operation(\n-            summary = \"Add password to a PDF file\",\n-            description =\n-                    \"This endpoint adds password protection to a PDF file. Users can specify a set of permissions that should be applied to the file. Input:PDF Output:PDF\")\n+    @Operation(summary = \"Add password to a PDF file\", description = \"This endpoint adds password protection to a PDF file. Users can specify a set of permissions that should be applied to the file. Input:PDF Output:PDF\")\n     public ResponseEntity<byte[]> addPassword(@ModelAttribute AddPasswordRequest request)\n             throws IOException {\n         MultipartFile fileInput = request.getFileInput();\n@@ -98,12 +92,12 @@ public ResponseEntity<byte[]> addPassword(@ModelAttribute AddPasswordRequest req\n             return WebResponseUtils.pdfDocToWebResponse(\n                     document,\n                     Filenames.toSimpleFileName(fileInput.getOriginalFilename())\n-                                    .replaceFirst(\"[.][^.]+$\", \"\")\n+                            .replaceFirst(\"[.][^.]+$\", \"\")\n                             + \"_permissions.pdf\");\n         return WebResponseUtils.pdfDocToWebResponse(\n                 document,\n                 Filenames.toSimpleFileName(fileInput.getOriginalFilename())\n-                                .replaceFirst(\"[.][^.]+$\", \"\")\n+                        .replaceFirst(\"[.][^.]+$\", \"\")\n                         + \"_passworded.pdf\");\n     }\n }",
    "output": "Merge pull request #2412 from reecebrowne/feature/1856/decrypt\n\nFeature/1856/decrypt"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/security/WatermarkController.java b/src/main/java/stirling/software/SPDF/controller/api/security/WatermarkController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/security/WatermarkController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/security/WatermarkController.java\n@@ -69,6 +69,7 @@ public ResponseEntity<byte[]> addWatermark(@ModelAttribute AddWatermarkRequest r\n         float opacity = request.getOpacity();\n         int widthSpacer = request.getWidthSpacer();\n         int heightSpacer = request.getHeightSpacer();\n+        String customColor = request.getCustomColor();\n         boolean convertPdfToImage = request.isConvertPDFToImage();\n \n         // Load the input PDF\n@@ -97,7 +98,8 @@ public ResponseEntity<byte[]> addWatermark(@ModelAttribute AddWatermarkRequest r\n                         widthSpacer,\n                         heightSpacer,\n                         fontSize,\n-                        alphabet);\n+                        alphabet,\n+                        customColor);\n             } else if (\"image\".equalsIgnoreCase(watermarkType)) {\n                 addImageWatermark(\n                         contentStream,\n@@ -136,7 +138,8 @@ private void addTextWatermark(\n             int widthSpacer,\n             int heightSpacer,\n             float fontSize,\n-            String alphabet)\n+            String alphabet,\n+            String colorString)\n             throws IOException {\n         String resourceDir = \"\";\n         PDFont font = new PDType1Font(Standard14Fonts.FontName.HELVETICA);\n@@ -173,7 +176,18 @@ private void addTextWatermark(\n         }\n \n         contentStream.setFont(font, fontSize);\n-        contentStream.setNonStrokingColor(Color.LIGHT_GRAY);\n+\n+        Color redactColor;\n+        try {\n+            if (!colorString.startsWith(\"#\")) {\n+                colorString = \"#\" + colorString;\n+            }\n+            redactColor = Color.decode(colorString);\n+        } catch (NumberFormatException e) {\n+\n+            redactColor = Color.LIGHT_GRAY;\n+        }\n+        contentStream.setNonStrokingColor(redactColor);\n \n         String[] textLines = watermarkText.split(\"\\\\\\\\n\");\n         float maxLineWidth = 0;\n\ndiff --git a/src/main/java/stirling/software/SPDF/model/api/security/AddWatermarkRequest.java b/src/main/java/stirling/software/SPDF/model/api/security/AddWatermarkRequest.java\n--- a/src/main/java/stirling/software/SPDF/model/api/security/AddWatermarkRequest.java\n+++ b/src/main/java/stirling/software/SPDF/model/api/security/AddWatermarkRequest.java\n@@ -45,6 +45,9 @@ public class AddWatermarkRequest extends PDFFile {\n     @Schema(description = \"The height spacer between watermark elements\", example = \"50\")\n     private int heightSpacer;\n \n+    @Schema(description = \"The color for watermark\", defaultValue = \"#d3d3d3\")\n+    private String customColor = \"#d3d3d3\";\n+\n     @Schema(description = \"Convert the redacted PDF to an image\", defaultValue = \"false\")\n     private boolean convertPDFToImage;\n }",
    "output": "Merge branch 'main' into feature/1856/decrypt"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/InitialSetup.java b/src/main/java/stirling/software/SPDF/config/InitialSetup.java\n--- a/src/main/java/stirling/software/SPDF/config/InitialSetup.java\n+++ b/src/main/java/stirling/software/SPDF/config/InitialSetup.java\n@@ -1,11 +1,14 @@\n package stirling.software.SPDF.config;\n \n import java.io.IOException;\n+import java.util.Properties;\n import java.util.UUID;\n \n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.core.Ordered;\n import org.springframework.core.annotation.Order;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.Resource;\n import org.springframework.stereotype.Component;\n \n import io.micrometer.common.util.StringUtils;\n@@ -23,6 +26,18 @@ public class InitialSetup {\n     @Autowired private ApplicationProperties applicationProperties;\n \n     @PostConstruct\n+    public void init() throws IOException {\n+        initUUIDKey();\n+        \n+        initSecretKey();\n+        \n+        initEnableCSRFSecurity();\n+        \n+        initLegalUrls();\n+        \n+        initSetAppVersion();\n+    }\n+    \n     public void initUUIDKey() throws IOException {\n         String uuid = applicationProperties.getAutomaticallyGenerated().getUUID();\n         if (!GeneralUtils.isValidUUID(uuid)) {\n@@ -32,7 +47,6 @@ public void initUUIDKey() throws IOException {\n         }\n     }\n \n-    @PostConstruct\n     public void initSecretKey() throws IOException {\n         String secretKey = applicationProperties.getAutomaticallyGenerated().getKey();\n         if (!GeneralUtils.isValidUUID(secretKey)) {\n@@ -42,22 +56,49 @@ public void initSecretKey() throws IOException {\n         }\n     }\n \n-    @PostConstruct\n+    public void initEnableCSRFSecurity() throws IOException {\n+    \tif(GeneralUtils.isVersionHigher(\"0.36.0\", applicationProperties.getAutomaticallyGenerated().getAppVersion())) {\n+\t        Boolean csrf = applicationProperties.getSecurity().getCsrfDisabled();\n+\t\t\tif (!csrf) {\n+\t            GeneralUtils.saveKeyToConfig(\"security.csrfDisabled\", false, false);\n+\t            GeneralUtils.saveKeyToConfig(\"system.enableAnalytics\", \"true\", false);\n+\t            applicationProperties.getSecurity().setCsrfDisabled(false);\n+\t            \n+\t        }\n+    \t}\n+    }\n+    \n     public void initLegalUrls() throws IOException {\n         // Initialize Terms and Conditions\n         String termsUrl = applicationProperties.getLegal().getTermsAndConditions();\n         if (StringUtils.isEmpty(termsUrl)) {\n             String defaultTermsUrl = \"https://www.stirlingpdf.com/terms-and-conditions\";\n-            GeneralUtils.saveKeyToConfig(\"legal.termsAndConditions\", defaultTermsUrl);\n+            GeneralUtils.saveKeyToConfig(\"legal.termsAndConditions\", defaultTermsUrl, false);\n             applicationProperties.getLegal().setTermsAndConditions(defaultTermsUrl);\n         }\n \n         // Initialize Privacy Policy\n         String privacyUrl = applicationProperties.getLegal().getPrivacyPolicy();\n         if (StringUtils.isEmpty(privacyUrl)) {\n             String defaultPrivacyUrl = \"https://www.stirlingpdf.com/privacy-policy\";\n-            GeneralUtils.saveKeyToConfig(\"legal.privacyPolicy\", defaultPrivacyUrl);\n+            GeneralUtils.saveKeyToConfig(\"legal.privacyPolicy\", defaultPrivacyUrl, false);\n             applicationProperties.getLegal().setPrivacyPolicy(defaultPrivacyUrl);\n         }\n     }\n+    \n+    public void initSetAppVersion() throws IOException {\n+    \t\n+    \tString appVersion = \"0.0.0\";\n+    \tResource resource = new ClassPathResource(\"version.properties\");\n+        Properties props = new Properties();\n+        try {\n+            props.load(resource.getInputStream());\n+            appVersion =props.getProperty(\"version\");\n+        } catch(Exception e) {\n+        \t\n+        }\n+        applicationProperties.getAutomaticallyGenerated().setAppVersion(appVersion);\n+        GeneralUtils.saveKeyToConfig(\"AutomaticallyGenerated.appVersion\", appVersion,false);\n+    \t}\n+    \n }\n\ndiff --git a/src/main/java/stirling/software/SPDF/model/ApplicationProperties.java b/src/main/java/stirling/software/SPDF/model/ApplicationProperties.java\n--- a/src/main/java/stirling/software/SPDF/model/ApplicationProperties.java\n+++ b/src/main/java/stirling/software/SPDF/model/ApplicationProperties.java\n@@ -285,6 +285,7 @@ public static class Metrics {\n     public static class AutomaticallyGenerated {\n         @ToString.Exclude private String key;\n         private String UUID;\n+        private String appVersion;\n     }\n \n     @Data\n\ndiff --git a/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java b/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java\n--- a/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java\n+++ b/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java\n@@ -288,6 +288,10 @@ public static boolean isValidUUID(String uuid) {\n     public static void saveKeyToConfig(String id, String key) throws IOException {\n         saveKeyToConfig(id, key, true);\n     }\n+    public static void saveKeyToConfig(String id, boolean key) throws IOException {\n+        saveKeyToConfig(id, key, true);\n+    }\n+    \n \n     public static void saveKeyToConfig(String id, String key, boolean autoGenerated)\n             throws IOException {\n@@ -306,6 +310,25 @@ public static void saveKeyToConfig(String id, String key, boolean autoGenerated)\n         }\n         settingsYml.save();\n     }\n+    \n+    public static void saveKeyToConfig(String id, boolean key, boolean autoGenerated) \n+    \t\tthrows IOException {\n+    \t\t    Path path = Paths.get(\"configs\", \"settings.yml\");\n+    \t\t    \n+    \t\t    final YamlFile settingsYml = new YamlFile(path.toFile());\n+    \t\t    DumperOptions yamlOptionssettingsYml = \n+    \t\t        ((SimpleYamlImplementation) settingsYml.getImplementation()).getDumperOptions();\n+    \t\t    yamlOptionssettingsYml.setSplitLines(false);\n+    \t\t    \n+    \t\t    settingsYml.loadWithComments();\n+    \t\t    \n+    \t\t    YamlFileWrapper writer = settingsYml.path(id).set(key);\n+    \t\t    if (autoGenerated) {\n+    \t\t        writer.comment(\"# Automatically Generated Settings (Do Not Edit Directly)\");\n+    \t\t    }\n+    \t\t    settingsYml.save();\n+    \t\t}\n+    \n \n     public static String generateMachineFingerprint() {\n         try {\n@@ -349,4 +372,34 @@ public static String generateMachineFingerprint() {\n             return \"GenericID\";\n         }\n     }\n+    \n+    public static boolean isVersionHigher(String currentVersion, String compareVersion) {\n+        if (currentVersion == null || compareVersion == null) {\n+            return false;\n+        }\n+\n+        // Split versions into components\n+        String[] current = currentVersion.split(\"\\\\.\");\n+        String[] compare = compareVersion.split(\"\\\\.\");\n+\n+        // Get the length of the shorter version array\n+        int length = Math.min(current.length, compare.length);\n+\n+        // Compare each component\n+        for (int i = 0; i < length; i++) {\n+            int currentPart = Integer.parseInt(current[i]);\n+            int comparePart = Integer.parseInt(compare[i]);\n+\n+            if (currentPart > comparePart) {\n+                return true;\n+            }\n+            if (currentPart < comparePart) {\n+                return false;\n+            }\n+        }\n+\n+        // If all components so far are equal, the longer version is considered higher\n+        return current.length > compare.length;\n+    }\n+    \n }",
    "output": "ensure csrf is enabled"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/EE/LicenseKeyChecker.java b/src/main/java/stirling/software/SPDF/EE/LicenseKeyChecker.java\n--- a/src/main/java/stirling/software/SPDF/EE/LicenseKeyChecker.java\n+++ b/src/main/java/stirling/software/SPDF/EE/LicenseKeyChecker.java\n@@ -28,7 +28,7 @@ public LicenseKeyChecker(\n         this.checkLicense();\n     }\n \n-    @Scheduled(initialDelay = 604800000,fixedRate = 604800000) // 7 days in milliseconds\n+    @Scheduled(initialDelay = 604800000, fixedRate = 604800000) // 7 days in milliseconds\n     public void checkLicensePeriodically() {\n         checkLicense();\n     }\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/api/security/GetInfoOnPDF.java b/src/main/java/stirling/software/SPDF/controller/api/security/GetInfoOnPDF.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/security/GetInfoOnPDF.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/security/GetInfoOnPDF.java\n@@ -595,7 +595,9 @@ private void setNodePermissions(PDDocument pdfBoxDoc, ObjectNode permissionsNode\n \n         permissionsNode.put(\"Document Assembly\", getPermissionState(ap.canAssembleDocument()));\n         permissionsNode.put(\"Extracting Content\", getPermissionState(ap.canExtractContent()));\n-        permissionsNode.put(\"Extracting for accessibility\", getPermissionState(ap.canExtractForAccessibility()));\n+        permissionsNode.put(\n+                \"Extracting for accessibility\",\n+                getPermissionState(ap.canExtractForAccessibility()));\n         permissionsNode.put(\"Form Filling\", getPermissionState(ap.canFillInForm()));\n         permissionsNode.put(\"Modifying\", getPermissionState(ap.canModify()));\n         permissionsNode.put(\"Modifying annotations\", getPermissionState(ap.canModifyAnnotations()));\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/api/security/ValidateSignatureController.java b/src/main/java/stirling/software/SPDF/controller/api/security/ValidateSignatureController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/security/ValidateSignatureController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/security/ValidateSignatureController.java\n@@ -92,20 +92,29 @@ public ResponseEntity<List<SignatureValidationResult>> validateSignature(\n                     SignerInformationStore signerStore = signedData.getSignerInfos();\n \n                     for (SignerInformation signer : signerStore.getSigners()) {\n-                        X509CertificateHolder certHolder = (X509CertificateHolder) certStore.getMatches(signer.getSID()).iterator().next();\n-                        X509Certificate cert = new JcaX509CertificateConverter().getCertificate(certHolder);\n-\n-                        boolean isValid = signer.verify(new JcaSimpleSignerInfoVerifierBuilder().build(cert));\n+                        X509CertificateHolder certHolder =\n+                                (X509CertificateHolder)\n+                                        certStore.getMatches(signer.getSID()).iterator().next();\n+                        X509Certificate cert =\n+                                new JcaX509CertificateConverter().getCertificate(certHolder);\n+\n+                        boolean isValid =\n+                                signer.verify(new JcaSimpleSignerInfoVerifierBuilder().build(cert));\n                         result.setValid(isValid);\n \n                         // Additional validations\n-                        result.setChainValid(customCert != null \n-                            ? certValidationService.validateCertificateChainWithCustomCert(cert, customCert)\n-                            : certValidationService.validateCertificateChain(cert));\n-\n-                        result.setTrustValid(customCert != null \n-                            ? certValidationService.validateTrustWithCustomCert(cert, customCert)\n-                            : certValidationService.validateTrustStore(cert));\n+                        result.setChainValid(\n+                                customCert != null\n+                                        ? certValidationService\n+                                                .validateCertificateChainWithCustomCert(\n+                                                        cert, customCert)\n+                                        : certValidationService.validateCertificateChain(cert));\n+\n+                        result.setTrustValid(\n+                                customCert != null\n+                                        ? certValidationService.validateTrustWithCustomCert(\n+                                                cert, customCert)\n+                                        : certValidationService.validateTrustStore(cert));\n \n                         result.setNotRevoked(!certValidationService.isRevoked(cert));\n                         result.setNotExpired(!cert.getNotAfter().before(new Date()));\n@@ -123,17 +132,18 @@ public ResponseEntity<List<SignatureValidationResult>> validateSignature(\n                         result.setValidFrom(cert.getNotBefore().toString());\n                         result.setValidUntil(cert.getNotAfter().toString());\n                         result.setSignatureAlgorithm(cert.getSigAlgName());\n-                        \n+\n                         // Get key size (if possible)\n                         try {\n-                            result.setKeySize(((RSAPublicKey) cert.getPublicKey()).getModulus().bitLength());\n+                            result.setKeySize(\n+                                    ((RSAPublicKey) cert.getPublicKey()).getModulus().bitLength());\n                         } catch (Exception e) {\n                             // If not RSA or error, set to 0\n                             result.setKeySize(0);\n                         }\n \n                         result.setVersion(String.valueOf(cert.getVersion()));\n-                        \n+\n                         // Set key usage\n                         List<String> keyUsages = new ArrayList<>();\n                         boolean[] keyUsageFlags = cert.getKeyUsage();\n@@ -150,9 +160,11 @@ public ResponseEntity<List<SignatureValidationResult>> validateSignature(\n                             }\n                         }\n                         result.setKeyUsages(keyUsages);\n-                        \n+\n                         // Check if self-signed\n-                        result.setSelfSigned(cert.getSubjectX500Principal().equals(cert.getIssuerX500Principal()));\n+                        result.setSelfSigned(\n+                                cert.getSubjectX500Principal()\n+                                        .equals(cert.getIssuerX500Principal()));\n                     }\n                 } catch (Exception e) {\n                     result.setValid(false);\n\ndiff --git a/src/main/java/stirling/software/SPDF/model/api/security/SignatureValidationResult.java b/src/main/java/stirling/software/SPDF/model/api/security/SignatureValidationResult.java\n--- a/src/main/java/stirling/software/SPDF/model/api/security/SignatureValidationResult.java\n+++ b/src/main/java/stirling/software/SPDF/model/api/security/SignatureValidationResult.java\n@@ -16,16 +16,15 @@ public class SignatureValidationResult {\n     private boolean trustValid;\n     private boolean notExpired;\n     private boolean notRevoked;\n-    \n-    private String issuerDN;          // Certificate issuer's Distinguished Name\n-    private String subjectDN;         // Certificate subject's Distinguished Name\n-    private String serialNumber;      // Certificate serial number\n-    private String validFrom;         // Certificate validity start date\n-    private String validUntil;        // Certificate validity end date\n-    private String signatureAlgorithm;// Algorithm used for signing\n-    private int keySize;              // Key size in bits\n-    private String version;           // Certificate version\n-    private List<String> keyUsages;   // List of key usage purposes\n-    private boolean isSelfSigned;     // Whether the certificate is self-signed\n-    \n+\n+    private String issuerDN; // Certificate issuer's Distinguished Name\n+    private String subjectDN; // Certificate subject's Distinguished Name\n+    private String serialNumber; // Certificate serial number\n+    private String validFrom; // Certificate validity start date\n+    private String validUntil; // Certificate validity end date\n+    private String signatureAlgorithm; // Algorithm used for signing\n+    private int keySize; // Key size in bits\n+    private String version; // Certificate version\n+    private List<String> keyUsages; // List of key usage purposes\n+    private boolean isSelfSigned; // Whether the certificate is self-signed\n }\n\ndiff --git a/src/main/java/stirling/software/SPDF/service/CertificateValidationService.java b/src/main/java/stirling/software/SPDF/service/CertificateValidationService.java\n--- a/src/main/java/stirling/software/SPDF/service/CertificateValidationService.java\n+++ b/src/main/java/stirling/software/SPDF/service/CertificateValidationService.java\n@@ -1,6 +1,5 @@\n package stirling.software.SPDF.service;\n \n-import io.github.pixee.security.BoundedLineReader;\n import java.io.BufferedReader;\n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n@@ -24,6 +23,8 @@\n \n import org.springframework.stereotype.Service;\n \n+import io.github.pixee.security.BoundedLineReader;\n+\n import jakarta.annotation.PostConstruct;\n \n @Service",
    "output": "format"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/security/WatermarkController.java b/src/main/java/stirling/software/SPDF/controller/api/security/WatermarkController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/security/WatermarkController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/security/WatermarkController.java\n@@ -69,6 +69,7 @@ public ResponseEntity<byte[]> addWatermark(@ModelAttribute AddWatermarkRequest r\n         float opacity = request.getOpacity();\n         int widthSpacer = request.getWidthSpacer();\n         int heightSpacer = request.getHeightSpacer();\n+        String customColor = request.getCustomColor();\n         boolean convertPdfToImage = request.isConvertPDFToImage();\n \n         // Load the input PDF\n@@ -97,7 +98,8 @@ public ResponseEntity<byte[]> addWatermark(@ModelAttribute AddWatermarkRequest r\n                         widthSpacer,\n                         heightSpacer,\n                         fontSize,\n-                        alphabet);\n+                        alphabet,\n+                        customColor);\n             } else if (\"image\".equalsIgnoreCase(watermarkType)) {\n                 addImageWatermark(\n                         contentStream,\n@@ -136,7 +138,8 @@ private void addTextWatermark(\n             int widthSpacer,\n             int heightSpacer,\n             float fontSize,\n-            String alphabet)\n+            String alphabet,\n+            String colorString)\n             throws IOException {\n         String resourceDir = \"\";\n         PDFont font = new PDType1Font(Standard14Fonts.FontName.HELVETICA);\n@@ -173,7 +176,18 @@ private void addTextWatermark(\n         }\n \n         contentStream.setFont(font, fontSize);\n-        contentStream.setNonStrokingColor(Color.LIGHT_GRAY);\n+\n+        Color redactColor;\n+        try {\n+            if (!colorString.startsWith(\"#\")) {\n+                colorString = \"#\" + colorString;\n+            }\n+            redactColor = Color.decode(colorString);\n+        } catch (NumberFormatException e) {\n+\n+            redactColor = Color.LIGHT_GRAY;\n+        }\n+        contentStream.setNonStrokingColor(redactColor);\n \n         String[] textLines = watermarkText.split(\"\\\\\\\\n\");\n         float maxLineWidth = 0;\n\ndiff --git a/src/main/java/stirling/software/SPDF/model/api/security/AddWatermarkRequest.java b/src/main/java/stirling/software/SPDF/model/api/security/AddWatermarkRequest.java\n--- a/src/main/java/stirling/software/SPDF/model/api/security/AddWatermarkRequest.java\n+++ b/src/main/java/stirling/software/SPDF/model/api/security/AddWatermarkRequest.java\n@@ -45,6 +45,9 @@ public class AddWatermarkRequest extends PDFFile {\n     @Schema(description = \"The height spacer between watermark elements\", example = \"50\")\n     private int heightSpacer;\n \n+    @Schema(description = \"The color for watermark\", defaultValue = \"#d3d3d3\")\n+    private String customColor = \"#d3d3d3\";\n+\n     @Schema(description = \"Convert the redacted PDF to an image\", defaultValue = \"false\")\n     private boolean convertPDFToImage;\n }",
    "output": "Text color selection for watermark (#2415)\n\n* added custom color selection for Watermark\n\n* using the same translation as AddStampRequest.customColor for the new watermark.customColor\n\n* fixed the space issue between words"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/security/PasswordController.java b/src/main/java/stirling/software/SPDF/controller/api/security/PasswordController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/security/PasswordController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/security/PasswordController.java\n@@ -39,10 +39,7 @@ public PasswordController(CustomPDDocumentFactory pdfDocumentFactory) {\n     }\n \n     @PostMapping(consumes = \"multipart/form-data\", value = \"/remove-password\")\n-    @Operation(\n-            summary = \"Remove password from a PDF file\",\n-            description =\n-                    \"This endpoint removes the password from a protected PDF file. Users need to provide the existing password. Input:PDF Output:PDF Type:SISO\")\n+    @Operation(summary = \"Remove password from a PDF file\", description = \"This endpoint removes the password from a protected PDF file. Users need to provide the existing password. Input:PDF Output:PDF Type:SISO\")\n     public ResponseEntity<byte[]> removePassword(@ModelAttribute PDFPasswordRequest request)\n             throws IOException {\n         MultipartFile fileInput = request.getFileInput();\n@@ -52,15 +49,12 @@ public ResponseEntity<byte[]> removePassword(@ModelAttribute PDFPasswordRequest\n         return WebResponseUtils.pdfDocToWebResponse(\n                 document,\n                 Filenames.toSimpleFileName(fileInput.getOriginalFilename())\n-                                .replaceFirst(\"[.][^.]+$\", \"\")\n+                        .replaceFirst(\"[.][^.]+$\", \"\")\n                         + \"_password_removed.pdf\");\n     }\n \n     @PostMapping(consumes = \"multipart/form-data\", value = \"/add-password\")\n-    @Operation(\n-            summary = \"Add password to a PDF file\",\n-            description =\n-                    \"This endpoint adds password protection to a PDF file. Users can specify a set of permissions that should be applied to the file. Input:PDF Output:PDF\")\n+    @Operation(summary = \"Add password to a PDF file\", description = \"This endpoint adds password protection to a PDF file. Users can specify a set of permissions that should be applied to the file. Input:PDF Output:PDF\")\n     public ResponseEntity<byte[]> addPassword(@ModelAttribute AddPasswordRequest request)\n             throws IOException {\n         MultipartFile fileInput = request.getFileInput();\n@@ -98,12 +92,12 @@ public ResponseEntity<byte[]> addPassword(@ModelAttribute AddPasswordRequest req\n             return WebResponseUtils.pdfDocToWebResponse(\n                     document,\n                     Filenames.toSimpleFileName(fileInput.getOriginalFilename())\n-                                    .replaceFirst(\"[.][^.]+$\", \"\")\n+                            .replaceFirst(\"[.][^.]+$\", \"\")\n                             + \"_permissions.pdf\");\n         return WebResponseUtils.pdfDocToWebResponse(\n                 document,\n                 Filenames.toSimpleFileName(fileInput.getOriginalFilename())\n-                                .replaceFirst(\"[.][^.]+$\", \"\")\n+                        .replaceFirst(\"[.][^.]+$\", \"\")\n                         + \"_passworded.pdf\");\n     }\n }",
    "output": "Merge branch 'decrypt' of https://github.com/Stirling-Tools/Stirling-PDF"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/EE/LicenseKeyChecker.java b/src/main/java/stirling/software/SPDF/EE/LicenseKeyChecker.java\n--- a/src/main/java/stirling/software/SPDF/EE/LicenseKeyChecker.java\n+++ b/src/main/java/stirling/software/SPDF/EE/LicenseKeyChecker.java\n@@ -28,7 +28,7 @@ public LicenseKeyChecker(\n         this.checkLicense();\n     }\n \n-    @Scheduled(fixedRate = 604800000) // 7 days in milliseconds\n+    @Scheduled(initialDelay = 604800000,fixedRate = 604800000) // 7 days in milliseconds\n     public void checkLicensePeriodically() {\n         checkLicense();\n     }",
    "output": "quick fixes (#2404)"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/security/GetInfoOnPDF.java b/src/main/java/stirling/software/SPDF/controller/api/security/GetInfoOnPDF.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/security/GetInfoOnPDF.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/security/GetInfoOnPDF.java\n@@ -322,27 +322,14 @@ public ResponseEntity<byte[]> getPdfInfo(@ModelAttribute PDFFile request) throws\n                 PDEncryption pdfEncryption = pdfBoxDoc.getEncryption();\n                 encryption.put(\"EncryptionAlgorithm\", pdfEncryption.getFilter());\n                 encryption.put(\"KeyLength\", pdfEncryption.getLength());\n-                AccessPermission ap = pdfBoxDoc.getCurrentAccessPermission();\n-                if (ap != null) {\n-                    ObjectNode permissionsNode = objectMapper.createObjectNode();\n-\n-                    permissionsNode.put(\"CanAssembleDocument\", ap.canAssembleDocument());\n-                    permissionsNode.put(\"CanExtractContent\", ap.canExtractContent());\n-                    permissionsNode.put(\n-                            \"CanExtractForAccessibility\", ap.canExtractForAccessibility());\n-                    permissionsNode.put(\"CanFillInForm\", ap.canFillInForm());\n-                    permissionsNode.put(\"CanModify\", ap.canModify());\n-                    permissionsNode.put(\"CanModifyAnnotations\", ap.canModifyAnnotations());\n-                    permissionsNode.put(\"CanPrint\", ap.canPrint());\n-\n-                    encryption.set(\n-                            \"Permissions\", permissionsNode); // set the node under \"Permissions\"\n-                }\n                 // Add other encryption-related properties as needed\n             } else {\n                 encryption.put(\"IsEncrypted\", false);\n             }\n \n+            ObjectNode permissionsNode = objectMapper.createObjectNode();\n+            setNodePermissions(pdfBoxDoc, permissionsNode);\n+\n             ObjectNode pageInfoParent = objectMapper.createObjectNode();\n             for (int pageNum = 0; pageNum < pdfBoxDoc.getNumberOfPages(); pageNum++) {\n                 ObjectNode pageInfo = objectMapper.createObjectNode();\n@@ -584,6 +571,7 @@ public ResponseEntity<byte[]> getPdfInfo(@ModelAttribute PDFFile request) throws\n             jsonOutput.set(\"DocumentInfo\", docInfoNode);\n             jsonOutput.set(\"Compliancy\", compliancy);\n             jsonOutput.set(\"Encryption\", encryption);\n+            jsonOutput.set(\"Permissions\", permissionsNode); // set the node under \"Permissions\"\n             jsonOutput.set(\"Other\", other);\n             jsonOutput.set(\"PerPageInfo\", pageInfoParent);\n \n@@ -602,6 +590,22 @@ public ResponseEntity<byte[]> getPdfInfo(@ModelAttribute PDFFile request) throws\n         return null;\n     }\n \n+    private void setNodePermissions(PDDocument pdfBoxDoc, ObjectNode permissionsNode) {\n+        AccessPermission ap = pdfBoxDoc.getCurrentAccessPermission();\n+\n+        permissionsNode.put(\"Document Assembly\", getPermissionState(ap.canAssembleDocument()));\n+        permissionsNode.put(\"Extracting Content\", getPermissionState(ap.canExtractContent()));\n+        permissionsNode.put(\"Extracting for accessibility\", getPermissionState(ap.canExtractForAccessibility()));\n+        permissionsNode.put(\"Form Filling\", getPermissionState(ap.canFillInForm()));\n+        permissionsNode.put(\"Modifying\", getPermissionState(ap.canModify()));\n+        permissionsNode.put(\"Modifying annotations\", getPermissionState(ap.canModifyAnnotations()));\n+        permissionsNode.put(\"Printing\", getPermissionState(ap.canPrint()));\n+    }\n+\n+    private String getPermissionState(boolean state) {\n+        return state ? \"Allowed\" : \"Not Allowed\";\n+    }\n+\n     private static void addOutlinesToArray(PDOutlineItem outline, ArrayNode arrayNode) {\n         if (outline == null) return;\n ",
    "output": "Feature: Show permissions as a separate tab (#2396)\n\nShow permissions as a separate tab\n\n- Move permissions code into a separate for better readability and maintainability.\n- Separate `Permissions` node from `Encryption` so that it would be displayed in the frontend as a separate tab.\n- Use more user friendly permission labels such as replacing `canModify` with `Modifying` and values such as `Allowed` and `Not Allowed` instead of `true`, `false`.\n- Show permissions regardless of the encryption state."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/service/MetricsAggregatorService.java b/src/main/java/stirling/software/SPDF/service/MetricsAggregatorService.java\n--- a/src/main/java/stirling/software/SPDF/service/MetricsAggregatorService.java\n+++ b/src/main/java/stirling/software/SPDF/service/MetricsAggregatorService.java\n@@ -24,7 +24,7 @@ public MetricsAggregatorService(MeterRegistry meterRegistry, PostHogService post\n         this.postHogService = postHogService;\n     }\n \n-    @Scheduled(fixedRate = 1800000) // Run every 30 minutes\n+    @Scheduled(fixedRate = 7200000) // Run every 2 hours\n     public void aggregateAndSendMetrics() {\n         Map<String, Object> metrics = new HashMap<>();\n         Search.in(meterRegistry)",
    "output": "Update MetricsAggregatorService.java"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/misc/MetadataController.java b/src/main/java/stirling/software/SPDF/controller/api/misc/MetadataController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/misc/MetadataController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/misc/MetadataController.java\n@@ -14,6 +14,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.WebDataBinder;\n+import org.springframework.web.bind.annotation.InitBinder;\n import org.springframework.web.bind.annotation.ModelAttribute;\n import org.springframework.web.bind.annotation.PostMapping;\n import org.springframework.web.bind.annotation.RequestMapping;\n@@ -26,6 +28,7 @@\n \n import stirling.software.SPDF.model.api.misc.MetadataRequest;\n import stirling.software.SPDF.utils.WebResponseUtils;\n+import stirling.software.SPDF.utils.propertyeditor.StringToMapPropertyEditor;\n \n @RestController\n @RequestMapping(\"/api/v1/misc\")\n@@ -44,6 +47,11 @@ private String checkUndefined(String entry) {\n         return entry;\n     }\n \n+    @InitBinder\n+    public void initBinder(WebDataBinder binder) {\n+        binder.registerCustomEditor(Map.class, \"allRequestParams\", new StringToMapPropertyEditor());\n+    }\n+\n     @PostMapping(consumes = \"multipart/form-data\", value = \"/update-metadata\")\n     @Operation(\n             summary = \"Update metadata of a PDF file\",\n\ndiff --git a/src/main/java/stirling/software/SPDF/utils/propertyeditor/StringToMapPropertyEditor.java b/src/main/java/stirling/software/SPDF/utils/propertyeditor/StringToMapPropertyEditor.java\n--- a/src/main/java/stirling/software/SPDF/utils/propertyeditor/StringToMapPropertyEditor.java\n+++ b/src/main/java/stirling/software/SPDF/utils/propertyeditor/StringToMapPropertyEditor.java\n@@ -0,0 +1,26 @@\n+package stirling.software.SPDF.utils.propertyeditor;\n+\n+import java.beans.PropertyEditorSupport;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+public class StringToMapPropertyEditor extends PropertyEditorSupport {\n+\n+    private final ObjectMapper objectMapper = new ObjectMapper();\n+\n+    @Override\n+    public void setAsText(String text) throws IllegalArgumentException {\n+        try {\n+            TypeReference<HashMap<String, String>> typeRef =\n+                    new TypeReference<HashMap<String, String>>() {};\n+            Map<String, String> map = objectMapper.readValue(text, typeRef);\n+            setValue(map);\n+        } catch (Exception e) {\n+            throw new IllegalArgumentException(\n+                    \"Failed to convert java.lang.String to java.util.Map\");\n+        }\n+    }\n+}",
    "output": "Fix deserialization failure in Change Metadata (#2382)\n\n* Fix deserialization failure from String to Map\n\nFix deserialization failure from String to Map that caused the following exception:\nResolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity<byte[]> stirling.software.SPDF.controller.api.misc.MetadataController.metadata(stirling.software.SPDF.model.api.misc.MetadataRequest) throws java.io.IOException: [Field error in object 'metadataRequest' on field 'allRequestParams': rejected value [{\"customKey1\" : \"YourCustomKey\", \"customKeyValue1\", \"YourCustomValue\"}]; codes [typeMismatch.metadataRequest.allRequestParams,typeMismatch.allRequestParams,typeMismatch.java.util.Map,typeMismatch];\n\n* Fix form binding for dynamic Map entries in Change Metadata\n\n- Implemented support for dynamic key-value inputs in Change Metadata form using proper `name` attributes for Map (`allRequestParams`) binding.\n- Fix form binding for dynamic Map (`allRequestParams`) entries in Change Metadata as the `allRequestParams` (Map name) was being sent as an empty map."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/misc/StampController.java b/src/main/java/stirling/software/SPDF/controller/api/misc/StampController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/misc/StampController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/misc/StampController.java\n@@ -147,7 +147,7 @@ public ResponseEntity<byte[]> addStamp(@ModelAttribute AddStampRequest request)\n         return WebResponseUtils.pdfDocToWebResponse(\n                 document,\n                 Filenames.toSimpleFileName(pdfFile.getOriginalFilename())\n-                                .replaceFirst(\"[.][^.]+$\", \"\")\n+                        .replaceFirst(\"[.][^.]+$\", \"\")\n                         + \"_stamped.pdf\");\n     }\n \n@@ -191,7 +191,7 @@ private void addTextStamp(\n             String fileExtension = resourceDir.substring(resourceDir.lastIndexOf(\".\"));\n             File tempFile = Files.createTempFile(\"NotoSansFont\", fileExtension).toFile();\n             try (InputStream is = classPathResource.getInputStream();\n-                    FileOutputStream os = new FileOutputStream(tempFile)) {\n+                 FileOutputStream os = new FileOutputStream(tempFile)) {\n                 IOUtils.copy(is, os);\n                 font = PDType0Font.load(document, tempFile);\n             } finally {\n@@ -229,10 +229,22 @@ private void addTextStamp(\n                     calculatePositionY(\n                             pageSize, position, calculateTextCapHeight(font, fontSize), margin);\n         }\n+        // Split the stampText into multiple lines\n+        String[] lines = stampText.split(\"\\\\\\\\n\");\n+\n+        // Calculate dynamic line height based on font ascent and descent\n+        float ascent = font.getFontDescriptor().getAscent();\n+        float descent = font.getFontDescriptor().getDescent();\n+        float lineHeight = ((ascent - descent) / 1000) * fontSize;\n \n         contentStream.beginText();\n-        contentStream.setTextMatrix(Matrix.getRotateInstance(Math.toRadians(rotation), x, y));\n-        contentStream.showText(stampText);\n+        for (int i = 0; i < lines.length; i++) {\n+            String line = lines[i];\n+            // Set the text matrix for each line with rotation\n+            contentStream.setTextMatrix(\n+                    Matrix.getRotateInstance(Math.toRadians(rotation), x, y - (i * lineHeight)));\n+            contentStream.showText(line);\n+        }\n         contentStream.endText();\n     }\n \n@@ -327,4 +339,4 @@ private float calculateTextWidth(String text, PDFont font, float fontSize) throw\n     private float calculateTextCapHeight(PDFont font, float fontSize) {\n         return font.getFontDescriptor().getCapHeight() / 1000 * fontSize;\n     }\n-}\n+}\n\\ No newline at end of file",
    "output": "added support for new line break in stampController (#2370)\n\nadded support for new line in stampController\n\nCo-authored-by: Anthony Stirling <77850077+Frooodle@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/utils/FileToPdf.java b/src/main/java/stirling/software/SPDF/utils/FileToPdf.java\n--- a/src/main/java/stirling/software/SPDF/utils/FileToPdf.java\n+++ b/src/main/java/stirling/software/SPDF/utils/FileToPdf.java\n@@ -105,7 +105,7 @@ private static void sanitizeHtmlFilesInZip(Path zipFilePath) throws IOException\n                         new ByteArrayInputStream(Files.readAllBytes(zipFilePath)))) {\n             ZipEntry entry = zipIn.getNextEntry();\n             while (entry != null) {\n-                Path filePath = tempUnzippedDir.resolve(entry.getName());\n+                Path filePath = tempUnzippedDir.resolve(sanitizeZipFilename(entry.getName()));\n                 if (!entry.isDirectory()) {\n                     Files.createDirectories(filePath.getParent());\n                     if (entry.getName().toLowerCase().endsWith(\".html\")\n@@ -175,7 +175,7 @@ private static Path unzipAndGetMainHtml(byte[] fileBytes) throws IOException {\n                 ZipSecurity.createHardenedInputStream(new ByteArrayInputStream(fileBytes))) {\n             ZipEntry entry = zipIn.getNextEntry();\n             while (entry != null) {\n-                Path filePath = tempDirectory.resolve(entry.getName());\n+                Path filePath = tempDirectory.resolve(sanitizeZipFilename(entry.getName()));\n                 if (entry.isDirectory()) {\n                     Files.createDirectories(filePath); // Explicitly create the directory structure\n                 } else {\n@@ -241,4 +241,14 @@ public static byte[] convertBookTypeToPdf(byte[] bytes, String originalFilename)\n             Files.deleteIfExists(tempOutputFile);\n         }\n     }\n+    \n+    static String sanitizeZipFilename(String entryName) {\n+        if (entryName == null || entryName.trim().isEmpty()) {\n+            return entryName;\n+        }\n+        while (entryName.contains(\"../\") || entryName.contains(\"..\\\\\")) {\n+            entryName = entryName.replace(\"../\", \"\").replace(\"..\\\\\", \"\");\n+        }\n+        return entryName;\n+    }\n }",
    "output": "(CodeQL) Fixed finding: \"Arbitrary file access during archive extraction (\"Zip Slip\")\n\" (#2344)\n\n(CodeQL) Fixed finding: \"Arbitrary file access during archive extraction (\"Zip Slip\")\n\"\n\nCo-authored-by: pixeebot[bot] <104101892+pixeebot[bot]@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/service/MetricsAggregatorService.java b/src/main/java/stirling/software/SPDF/service/MetricsAggregatorService.java\n--- a/src/main/java/stirling/software/SPDF/service/MetricsAggregatorService.java\n+++ b/src/main/java/stirling/software/SPDF/service/MetricsAggregatorService.java\n@@ -39,6 +39,13 @@ public void aggregateAndSendMetrics() {\n                             if (method == null || uri == null) {\n                                 return;\n                             }\n+                            if (!method.equals(\"GET\") && !method.equals(\"POST\")) {\n+                                return;\n+                            }\n+                            // Skip URIs that are 2 characters or shorter\n+                            if (uri.length() <= 2) {\n+                                return;\n+                            }\n \n                             String key =\n                                     String.format(",
    "output": "Update MetricsAggregatorService.java"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/service/MetricsAggregatorService.java b/src/main/java/stirling/software/SPDF/service/MetricsAggregatorService.java\n--- a/src/main/java/stirling/software/SPDF/service/MetricsAggregatorService.java\n+++ b/src/main/java/stirling/software/SPDF/service/MetricsAggregatorService.java\n@@ -24,7 +24,7 @@ public MetricsAggregatorService(MeterRegistry meterRegistry, PostHogService post\n         this.postHogService = postHogService;\n     }\n \n-    @Scheduled(fixedRate = 900000) // Run every 15 minutes\n+    @Scheduled(fixedRate = 1800000) // Run every 30 minutes\n     public void aggregateAndSendMetrics() {\n         Map<String, Object> metrics = new HashMap<>();\n         Search.in(meterRegistry)\n\ndiff --git a/src/main/java/stirling/software/SPDF/service/PostHogService.java b/src/main/java/stirling/software/SPDF/service/PostHogService.java\n--- a/src/main/java/stirling/software/SPDF/service/PostHogService.java\n+++ b/src/main/java/stirling/software/SPDF/service/PostHogService.java\n@@ -15,6 +15,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.core.env.Environment;\n import org.springframework.stereotype.Service;\n \n import com.posthog.java.PostHog;\n@@ -26,19 +27,25 @@\n public class PostHogService {\n     private final PostHog postHog;\n     private final String uniqueId;\n+    private final String appVersion;\n     private final ApplicationProperties applicationProperties;\n     private final UserServiceInterface userService;\n-\n+    private final Environment env;\n+    \n     @Autowired\n     public PostHogService(\n             PostHog postHog,\n             @Qualifier(\"UUID\") String uuid,\n+            @Qualifier(\"appVersion\") String appVersion,\n             ApplicationProperties applicationProperties,\n-            @Autowired(required = false) UserServiceInterface userService) {\n+            @Autowired(required = false) UserServiceInterface userService,\n+            Environment env) {\n         this.postHog = postHog;\n         this.uniqueId = uuid;\n+        this.appVersion = appVersion;\n         this.applicationProperties = applicationProperties;\n         this.userService = userService;\n+        this.env = env;\n         captureSystemInfo();\n     }\n \n@@ -64,6 +71,16 @@ public Map<String, Object> captureServerMetrics() {\n         Map<String, Object> metrics = new HashMap<>();\n \n         try {\n+        \t//Application version\n+        \tmetrics.put(\"app_version\", appVersion);\n+        \t String deploymentType = \"JAR\"; // default\n+             if (\"true\".equalsIgnoreCase(env.getProperty(\"BROWSER_OPEN\"))) {\n+                 deploymentType = \"EXE\";\n+             } else if (isRunningInDocker()) {\n+                 deploymentType = \"DOCKER\";\n+             }\n+             metrics.put(\"deployment_type\", deploymentType);\n+        \t\n             // System info\n             metrics.put(\"os_name\", System.getProperty(\"os.name\"));\n             metrics.put(\"os_version\", System.getProperty(\"os.version\"));\n@@ -132,7 +149,6 @@ public Map<String, Object> captureServerMetrics() {\n \n             // Docker detection and stats\n             boolean isDocker = isRunningInDocker();\n-            metrics.put(\"is_docker\", isDocker);\n             if (isDocker) {\n                 metrics.put(\"docker_metrics\", getDockerMetrics());\n             }",
    "output": "metrics"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/SecurityConfiguration.java b/src/main/java/stirling/software/SPDF/config/security/SecurityConfiguration.java\n--- a/src/main/java/stirling/software/SPDF/config/security/SecurityConfiguration.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/SecurityConfiguration.java\n@@ -245,7 +245,8 @@ public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n             }\n \n             // Handle SAML\n-            if (applicationProperties.getSecurity().isSaml2Activ()) {\n+            if (applicationProperties.getSecurity().isSaml2Activ()\n+                    && applicationProperties.getSystem().getEnableAlphaFunctionality()) {\n                 http.authenticationProvider(samlAuthenticationProvider());\n                 http.saml2Login(\n                                 saml2 ->\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/web/DatabaseWebController.java b/src/main/java/stirling/software/SPDF/controller/web/DatabaseWebController.java\n--- a/src/main/java/stirling/software/SPDF/controller/web/DatabaseWebController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/web/DatabaseWebController.java\n@@ -34,7 +34,9 @@ public String database(HttpServletRequest request, Model model, Authentication a\n         }\n \n         List<FileInfo> backupList = databaseBackupHelper.getBackupList();\n-        model.addAttribute(\"systemUpdate\", backupList);\n+        model.addAttribute(\"backupFiles\", backupList);\n+\n+        model.addAttribute(\"databaseVersion\", databaseBackupHelper.getH2Version());\n \n         return \"database\";\n     }",
    "output": "Bump com.h2database:h2 from 2.1.214 to 2.3.232 (#2314)"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/SecurityConfiguration.java b/src/main/java/stirling/software/SPDF/config/security/SecurityConfiguration.java\n--- a/src/main/java/stirling/software/SPDF/config/security/SecurityConfiguration.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/SecurityConfiguration.java\n@@ -245,8 +245,7 @@ public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n             }\n \n             // Handle SAML\n-            if (applicationProperties.getSecurity().isSaml2Activ()\n-                    && applicationProperties.getSystem().getEnableAlphaFunctionality()) {\n+            if (applicationProperties.getSecurity().isSaml2Activ()) {\n                 http.authenticationProvider(samlAuthenticationProvider());\n                 http.saml2Login(\n                                 saml2 ->\n@@ -452,7 +451,7 @@ public RelyingPartyRegistrationRepository relyingPartyRegistrations() throws Exc\n         RelyingPartyRegistration rp =\n                 RelyingPartyRegistration.withRegistrationId(samlConf.getRegistrationId())\n                         .signingX509Credentials((c) -> c.add(signingCredential))\n-                        .assertingPartyDetails(\n+                        .assertingPartyMetadata(\n                                 (details) ->\n                                         details.entityId(samlConf.getIdpIssuer())\n                                                 .singleSignOnServiceLocation(",
    "output": "Fix: Fixes dependency bug and replaces obsolete method (#2309)"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/security/CertSignController.java b/src/main/java/stirling/software/SPDF/controller/api/security/CertSignController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/security/CertSignController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/security/CertSignController.java\n@@ -98,10 +98,10 @@ class CreateSignature extends CreateSignatureBase {\n \n         public CreateSignature(KeyStore keystore, char[] pin)\n                 throws KeyStoreException,\n-                        UnrecoverableKeyException,\n-                        NoSuchAlgorithmException,\n-                        IOException,\n-                        CertificateException {\n+                UnrecoverableKeyException,\n+                NoSuchAlgorithmException,\n+                IOException,\n+                CertificateException {\n             super(keystore, pin);\n             ClassPathResource resource = new ClassPathResource(\"static/images/signature.png\");\n             try (InputStream is = resource.getInputStream()) {\n@@ -160,8 +160,7 @@ public InputStream createVisibleSignature(\n                         extState.setNonStrokingAlphaConstant(0.5f);\n                         cs.setGraphicsStateParameters(extState);\n                         cs.transform(Matrix.getScaleInstance(0.08f, 0.08f));\n-                        PDImageXObject img =\n-                                PDImageXObject.createFromFileByExtension(logoFile, doc);\n+                        PDImageXObject img = PDImageXObject.createFromFileByExtension(logoFile, doc);\n                         cs.drawImage(img, 100, 0);\n                         cs.restoreGraphicsState();\n                     }\n@@ -209,10 +208,7 @@ public CertSignController(CustomPDDocumentFactory pdfDocumentFactory) {\n     }\n \n     @PostMapping(consumes = \"multipart/form-data\", value = \"/cert-sign\")\n-    @Operation(\n-            summary = \"Sign PDF with a Digital Certificate\",\n-            description =\n-                    \"This endpoint accepts a PDF file, a digital certificate and related information to sign the PDF. It then returns the digitally signed PDF file. Input:PDF Output:PDF Type:SISO\")\n+    @Operation(summary = \"Sign PDF with a Digital Certificate\", description = \"This endpoint accepts a PDF file, a digital certificate and related information to sign the PDF. It then returns the digitally signed PDF file. Input:PDF Output:PDF Type:SISO\")\n     public ResponseEntity<byte[]> signPDFWithCert(@ModelAttribute SignPDFWithCertRequest request)\n             throws Exception {\n         MultipartFile pdf = request.getFileInput();\n@@ -242,7 +238,7 @@ public ResponseEntity<byte[]> signPDFWithCert(@ModelAttribute SignPDFWithCertReq\n                 PrivateKey privateKey = getPrivateKeyFromPEM(privateKeyFile.getBytes(), password);\n                 Certificate cert = (Certificate) getCertificateFromPEM(certFile.getBytes());\n                 ks.setKeyEntry(\n-                        \"alias\", privateKey, password.toCharArray(), new Certificate[] {cert});\n+                        \"alias\", privateKey, password.toCharArray(), new Certificate[] { cert });\n                 break;\n             case \"PKCS12\":\n                 ks = KeyStore.getInstance(\"PKCS12\");\n@@ -314,22 +310,19 @@ private static void sign(\n \n     private PrivateKey getPrivateKeyFromPEM(byte[] pemBytes, String password)\n             throws IOException, OperatorCreationException, PKCSException {\n-        try (PEMParser pemParser =\n-                new PEMParser(new InputStreamReader(new ByteArrayInputStream(pemBytes)))) {\n+        try (PEMParser pemParser = new PEMParser(new InputStreamReader(new ByteArrayInputStream(pemBytes)))) {\n             Object pemObject = pemParser.readObject();\n             JcaPEMKeyConverter converter = new JcaPEMKeyConverter().setProvider(\"BC\");\n             PrivateKeyInfo pkInfo;\n             if (pemObject instanceof PKCS8EncryptedPrivateKeyInfo) {\n-                InputDecryptorProvider decProv =\n-                        new JceOpenSSLPKCS8DecryptorProviderBuilder().build(password.toCharArray());\n+                InputDecryptorProvider decProv = new JceOpenSSLPKCS8DecryptorProviderBuilder()\n+                        .build(password.toCharArray());\n                 pkInfo = ((PKCS8EncryptedPrivateKeyInfo) pemObject).decryptPrivateKeyInfo(decProv);\n             } else if (pemObject instanceof PEMEncryptedKeyPair) {\n-                PEMDecryptorProvider decProv =\n-                        new JcePEMDecryptorProviderBuilder().build(password.toCharArray());\n-                pkInfo =\n-                        ((PEMEncryptedKeyPair) pemObject)\n-                                .decryptKeyPair(decProv)\n-                                .getPrivateKeyInfo();\n+                PEMDecryptorProvider decProv = new JcePEMDecryptorProviderBuilder().build(password.toCharArray());\n+                pkInfo = ((PEMEncryptedKeyPair) pemObject)\n+                        .decryptKeyPair(decProv)\n+                        .getPrivateKeyInfo();\n             } else {\n                 pkInfo = ((PEMKeyPair) pemObject).getPrivateKeyInfo();\n             }",
    "output": "Feature/2198/multitool multi select move pages (#2294)\n\n* Multitool - Select multiple pages for rotation tool\n\n* Multitool multi select delete feature\n\n* Multitool multi select UI improvements and big fixes\n\n* Multitool multi select select all and UI improvements\n\n* Multi tool multi select, download selected, clean up and bug fixes\n\n* Groundwork for multiselect drag and drop\n\n* Multi select drag and drop finalised\n\n* Update translation files\n\nSigned-off-by: GitHub Action <action@github.com>\n\n* Turn off select mode after multidrag\n\n---------\n\nSigned-off-by: GitHub Action <action@github.com>\nCo-authored-by: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/service/MetricsAggregatorService.java b/src/main/java/stirling/software/SPDF/service/MetricsAggregatorService.java\n--- a/src/main/java/stirling/software/SPDF/service/MetricsAggregatorService.java\n+++ b/src/main/java/stirling/software/SPDF/service/MetricsAggregatorService.java\n@@ -32,11 +32,19 @@ public void aggregateAndSendMetrics() {\n                 .counters()\n                 .forEach(\n                         counter -> {\n-                            String key =\n-                                    String.format(\n-                                            \"http_requests_%s_%s\",\n-                                            counter.getId().getTag(\"method\"),\n-                                            counter.getId().getTag(\"uri\").replace(\"/\", \"_\"));\n+                            String method = counter.getId().getTag(\"method\");\n+                            String uri = counter.getId().getTag(\"uri\");\n+                            \n+                            // Skip if either method or uri is null\n+                            if (method == null || uri == null) {\n+                                return;\n+                            }\n+                \n+                            String key = String.format(\n+                                \"http_requests_%s_%s\",\n+                                method,\n+                                uri.replace(\"/\", \"_\")\n+                            );\n \n                             double currentCount = counter.count();\n                             double lastCount = lastSentMetrics.getOrDefault(key, 0.0);",
    "output": "Update MetricsAggregatorService.java (#2272)"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/database/DatabaseBackupHelper.java b/src/main/java/stirling/software/SPDF/config/security/database/DatabaseBackupHelper.java\n--- a/src/main/java/stirling/software/SPDF/config/security/database/DatabaseBackupHelper.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/database/DatabaseBackupHelper.java\n@@ -34,6 +34,12 @@ public class DatabaseBackupHelper implements DatabaseBackupInterface {\n     @Value(\"${spring.datasource.url}\")\n     private String url;\n \n+    @Value(\"${spring.datasource.username}\")\n+    private String databaseUsername;\n+\n+    @Value(\"${spring.datasource.password}\")\n+    private String databasePassword;\n+\n     private Path backupPath = Paths.get(\"configs/db/backup/\");\n \n     @Override\n@@ -134,7 +140,8 @@ public void exportDatabase() throws IOException {\n                 this.getBackupFilePath(\"backup_\" + dateNow.format(myFormatObj) + \".sql\");\n         String query = \"SCRIPT SIMPLE COLUMNS DROP to ?;\";\n \n-        try (Connection conn = DriverManager.getConnection(url, \"sa\", \"\");\n+        try (Connection conn =\n+                        DriverManager.getConnection(url, databaseUsername, databasePassword);\n                 PreparedStatement stmt = conn.prepareStatement(query)) {\n             stmt.setString(1, insertOutputFilePath.toString());\n             stmt.execute();\n@@ -147,7 +154,8 @@ public void exportDatabase() throws IOException {\n     // Retrieves the H2 database version.\n     public String getH2Version() {\n         String version = \"Unknown\";\n-        try (Connection conn = DriverManager.getConnection(url, \"sa\", \"\")) {\n+        try (Connection conn =\n+                DriverManager.getConnection(url, databaseUsername, databasePassword)) {\n             try (Statement stmt = conn.createStatement();\n                     ResultSet rs = stmt.executeQuery(\"SELECT H2VERSION() AS version\")) {\n                 if (rs.next()) {\n@@ -189,7 +197,8 @@ public Path getBackupFilePath(String fileName) {\n     private boolean executeDatabaseScript(Path scriptPath) {\n         String query = \"RUNSCRIPT from ?;\";\n \n-        try (Connection conn = DriverManager.getConnection(url, \"sa\", \"\");\n+        try (Connection conn =\n+                        DriverManager.getConnection(url, databaseUsername, databasePassword);\n                 PreparedStatement stmt = conn.prepareStatement(query)) {\n             stmt.setString(1, scriptPath.toString());\n             stmt.execute();",
    "output": "Read login data from application.properties (#2263)\n\nCo-authored-by: Anthony Stirling <77850077+Frooodle@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/UserService.java b/src/main/java/stirling/software/SPDF/config/security/UserService.java\n--- a/src/main/java/stirling/software/SPDF/config/security/UserService.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/UserService.java\n@@ -304,7 +304,13 @@ public boolean isUsernameValid(String username) {\n         boolean isValidEmail =\n                 username.matches(\n                         \"^(?=.{1,64}@)[A-Za-z0-9]+(\\\\.[A-Za-z0-9_+.-]+)*@[^-][A-Za-z0-9-]+(\\\\.[A-Za-z0-9-]+)*(\\\\.[A-Za-z]{2,})$\");\n-        return isValidSimpleUsername || isValidEmail;\n+\n+        List<String> notAllowedUserList = new ArrayList<>();\n+        notAllowedUserList.add(\"ALL_USERS\".toLowerCase());\n+\n+        boolean notAllowedUser = notAllowedUserList.contains(username.toLowerCase());\n+\n+        return (isValidSimpleUsername || isValidEmail) && !notAllowedUser;\n     }\n \n     private String getInvalidUsernameMessage() {",
    "output": "Prohibit the registration of unauthorized usernames (#2240)"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/security/WatermarkController.java b/src/main/java/stirling/software/SPDF/controller/api/security/WatermarkController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/security/WatermarkController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/security/WatermarkController.java\n@@ -187,18 +187,32 @@ private void addTextWatermark(\n         float watermarkHeight = heightSpacer + fontSize * textLines.length;\n         float pageWidth = page.getMediaBox().getWidth();\n         float pageHeight = page.getMediaBox().getHeight();\n-        int watermarkRows = (int) (pageHeight / watermarkHeight + 1);\n-        int watermarkCols = (int) (pageWidth / watermarkWidth + 1);\n+\n+\n+        //Calculating the new width and height depending on the angle.\n+        float radians = (float) Math.toRadians(rotation);\n+        float newWatermarkWidth =\n+                (float)\n+                        (Math.abs(watermarkWidth * Math.cos(radians))\n+                                + Math.abs(watermarkHeight * Math.sin(radians)));\n+        float newWatermarkHeight =\n+                (float)\n+                        (Math.abs(watermarkWidth * Math.sin(radians))\n+                                + Math.abs(watermarkHeight * Math.cos(radians)));\n+\n+        //Calculating the number of rows and columns.\n+        int watermarkRows = (int) (pageHeight / newWatermarkHeight + 1);\n+        int watermarkCols = (int) (pageWidth / newWatermarkWidth + 1);\n \n         // Add the text watermark\n-        for (int i = 0; i < watermarkRows; i++) {\n-            for (int j = 0; j < watermarkCols; j++) {\n+        for (int i = 0; i <= watermarkRows; i++) {\n+            for (int j = 0; j <= watermarkCols; j++) {\n                 contentStream.beginText();\n                 contentStream.setTextMatrix(\n                         Matrix.getRotateInstance(\n                                 (float) Math.toRadians(rotation),\n-                                j * watermarkWidth,\n-                                i * watermarkHeight));\n+                                j * newWatermarkWidth,\n+                                i * newWatermarkHeight));\n \n                 for (int k = 0; k < textLines.length; ++k) {\n                     contentStream.showText(textLines[k]);",
    "output": "Increase watermark coverage to fill page (#2049) (#2220)\n\n* Increase watermark coverage to fill page (#2049)\r\n\r\n* Increase watermark coverage to fill page with the new calculation (#2049)"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java b/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java\n--- a/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java\n+++ b/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java\n@@ -182,20 +182,23 @@ public void init() {\n         addEndpointToGroup(\"Python\", \"html-to-pdf\");\n         addEndpointToGroup(\"Python\", \"url-to-pdf\");\n         addEndpointToGroup(\"Python\", \"pdf-to-img\");\n+        addEndpointToGroup(\"Python\", \"file-to-pdf\");\n \n         // openCV\n         addEndpointToGroup(\"OpenCV\", \"extract-image-scans\");\n \n         // LibreOffice\n-        addEndpointToGroup(\"LibreOffice\", \"repair\");  // Ghostscript\n+        addEndpointToGroup(\"LibreOffice\", \"repair\");\n         addEndpointToGroup(\"LibreOffice\", \"file-to-pdf\");\n-        addEndpointToGroup(\"Unoconv\", \"file-to-pdf\");\n         addEndpointToGroup(\"LibreOffice\", \"pdf-to-word\");\n         addEndpointToGroup(\"LibreOffice\", \"pdf-to-presentation\");\n         addEndpointToGroup(\"LibreOffice\", \"pdf-to-rtf\");\n         addEndpointToGroup(\"LibreOffice\", \"pdf-to-html\");\n         addEndpointToGroup(\"LibreOffice\", \"pdf-to-xml\");\n \n+        // Unoconv\n+        addEndpointToGroup(\"Unoconv\", \"file-to-pdf\");\n+\n         // OCRmyPDF\n         addEndpointToGroup(\"OCRmyPDF\", \"compress-pdf\");\n         addEndpointToGroup(\"OCRmyPDF\", \"pdf-to-pdfa\");\n@@ -248,6 +251,7 @@ public void init() {\n         // Ghostscript dependent endpoints\n         addEndpointToGroup(\"Ghostscript\", \"compress-pdf\");\n         addEndpointToGroup(\"Ghostscript\", \"pdf-to-pdfa\");\n+        addEndpointToGroup(\"Ghostscript\", \"repair\");\n \n         // Weasyprint dependent endpoints\n         addEndpointToGroup(\"Weasyprint\", \"html-to-pdf\");",
    "output": "adds missing dependencies in the endpoints (#2224)"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java b/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java\n--- a/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java\n+++ b/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java\n@@ -117,7 +117,6 @@ public void init() {\n         addEndpointToGroup(\"Convert\", \"img-to-pdf\");\n         addEndpointToGroup(\"Convert\", \"pdf-to-pdfa\");\n         addEndpointToGroup(\"Convert\", \"file-to-pdf\");\n-        addEndpointToGroup(\"Convert\", \"xlsx-to-pdf\");\n         addEndpointToGroup(\"Convert\", \"pdf-to-word\");\n         addEndpointToGroup(\"Convert\", \"pdf-to-presentation\");\n         addEndpointToGroup(\"Convert\", \"pdf-to-text\");\n@@ -163,7 +162,6 @@ public void init() {\n         addEndpointToGroup(\"CLI\", \"repair\");\n         addEndpointToGroup(\"CLI\", \"pdf-to-pdfa\");\n         addEndpointToGroup(\"CLI\", \"file-to-pdf\");\n-        addEndpointToGroup(\"CLI\", \"xlsx-to-pdf\");\n         addEndpointToGroup(\"CLI\", \"pdf-to-word\");\n         addEndpointToGroup(\"CLI\", \"pdf-to-presentation\");\n         addEndpointToGroup(\"CLI\", \"pdf-to-html\");\n@@ -189,10 +187,9 @@ public void init() {\n         addEndpointToGroup(\"OpenCV\", \"extract-image-scans\");\n \n         // LibreOffice\n-        addEndpointToGroup(\"LibreOffice\", \"repair\");\n+        addEndpointToGroup(\"LibreOffice\", \"repair\");  // Ghostscript\n         addEndpointToGroup(\"LibreOffice\", \"file-to-pdf\");\n         addEndpointToGroup(\"Unoconv\", \"file-to-pdf\");\n-        addEndpointToGroup(\"LibreOffice\", \"xlsx-to-pdf\");\n         addEndpointToGroup(\"LibreOffice\", \"pdf-to-word\");\n         addEndpointToGroup(\"LibreOffice\", \"pdf-to-presentation\");\n         addEndpointToGroup(\"LibreOffice\", \"pdf-to-rtf\");",
    "output": "Removes references to nonexistent endpoint (#2223)"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/UserService.java b/src/main/java/stirling/software/SPDF/config/security/UserService.java\n--- a/src/main/java/stirling/software/SPDF/config/security/UserService.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/UserService.java\n@@ -19,10 +19,12 @@\n import org.springframework.security.oauth2.core.user.OAuth2User;\n import org.springframework.stereotype.Service;\n \n+import lombok.extern.slf4j.Slf4j;\n import stirling.software.SPDF.config.interfaces.DatabaseBackupInterface;\n import stirling.software.SPDF.config.security.saml2.CustomSaml2AuthenticatedPrincipal;\n import stirling.software.SPDF.config.security.session.SessionPersistentRegistry;\n import stirling.software.SPDF.controller.api.pipeline.UserServiceInterface;\n+import stirling.software.SPDF.model.ApplicationProperties;\n import stirling.software.SPDF.model.AuthenticationType;\n import stirling.software.SPDF.model.Authority;\n import stirling.software.SPDF.model.Role;\n@@ -31,6 +33,7 @@\n import stirling.software.SPDF.repository.UserRepository;\n \n @Service\n+@Slf4j\n public class UserService implements UserServiceInterface {\n \n     @Autowired private UserRepository userRepository;\n@@ -45,6 +48,8 @@ public class UserService implements UserServiceInterface {\n \n     @Autowired DatabaseBackupInterface databaseBackupHelper;\n \n+    @Autowired ApplicationProperties applicationProperties;\n+\n     // Handle OAUTH2 login and user auto creation.\n     public boolean processOAuth2PostLogin(String username, boolean autoCreateUser)\n             throws IllegalArgumentException, IOException {\n@@ -354,6 +359,14 @@ public String getCurrentUsername() {\n \n         if (principal instanceof UserDetails) {\n             return ((UserDetails) principal).getUsername();\n+        } else if (principal instanceof OAuth2User) {\n+            return ((OAuth2User) principal)\n+                    .getAttribute(\n+                            applicationProperties.getSecurity().getOauth2().getUseAsUsername());\n+        } else if (principal instanceof CustomSaml2AuthenticatedPrincipal) {\n+            return ((CustomSaml2AuthenticatedPrincipal) principal).getName();\n+        } else if (principal instanceof String) {\n+            return (String) principal;\n         } else {\n             return principal.toString();\n         }",
    "output": "Fix: Reading the username based on the login method. (#2211)"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java b/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java\n--- a/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java\n+++ b/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java\n@@ -191,6 +191,7 @@ public void init() {\n         // LibreOffice\n         addEndpointToGroup(\"LibreOffice\", \"repair\");\n         addEndpointToGroup(\"LibreOffice\", \"file-to-pdf\");\n+        addEndpointToGroup(\"Unoconv\", \"file-to-pdf\");\n         addEndpointToGroup(\"LibreOffice\", \"xlsx-to-pdf\");\n         addEndpointToGroup(\"LibreOffice\", \"pdf-to-word\");\n         addEndpointToGroup(\"LibreOffice\", \"pdf-to-presentation\");\n\ndiff --git a/src/main/java/stirling/software/SPDF/config/ExternalAppDepConfig.java b/src/main/java/stirling/software/SPDF/config/ExternalAppDepConfig.java\n--- a/src/main/java/stirling/software/SPDF/config/ExternalAppDepConfig.java\n+++ b/src/main/java/stirling/software/SPDF/config/ExternalAppDepConfig.java\n@@ -42,6 +42,7 @@ private boolean isCommandAvailable(String command) {\n                     put(\"ocrmypdf\", List.of(\"OCRmyPDF\"));\n                     put(\"weasyprint\", List.of(\"Weasyprint\"));\n                     put(\"pdftohtml\", List.of(\"Pdftohtml\"));\n+                    put(\"unoconv\", List.of(\"Unoconv\"));\n                 }\n             };\n \n@@ -101,6 +102,7 @@ public void checkDependencies() {\n         checkDependencyAndDisableGroup(\"ocrmypdf\");\n         checkDependencyAndDisableGroup(\"weasyprint\");\n         checkDependencyAndDisableGroup(\"pdftohtml\");\n+        checkDependencyAndDisableGroup(\"unoconv\");\n \n         // Special handling for Python/OpenCV dependencies\n         boolean pythonAvailable = isCommandAvailable(\"python3\") || isCommandAvailable(\"python\");",
    "output": "Searchbar in nav auto select, and exe nolonger disable CLI (#2197)\n\n* fix remmeber me\r\n\r\n* remove uselss comment\r\n\r\n* Update translation files (#2185)\r\n\r\nSigned-off-by: GitHub Action <action@github.com>\r\nCo-authored-by: GitHub Action <action@github.com>\r\n\r\n* exe no longer disable CLI\r\n\r\n---------\r\n\r\nSigned-off-by: GitHub Action <action@github.com>\r\nCo-authored-by: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>\r\nCo-authored-by: GitHub Action <action@github.com>\r\nCo-authored-by: a <a>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/SecurityConfiguration.java b/src/main/java/stirling/software/SPDF/config/security/SecurityConfiguration.java\n--- a/src/main/java/stirling/software/SPDF/config/security/SecurityConfiguration.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/SecurityConfiguration.java\n@@ -156,10 +156,14 @@ public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n             http.rememberMe(\n                     rememberMeConfigurer ->\n                             rememberMeConfigurer // Use the configurator directly\n-                                    .key(\"uniqueAndSecret\")\n                                     .tokenRepository(persistentTokenRepository())\n-                                    .tokenValiditySeconds(1209600) // 2 weeks\n-                    );\n+                                    .tokenValiditySeconds(14 * 24 * 60 * 60) // 14 days\n+                                    .userDetailsService(\n+                                            userDetailsService) // Your existing UserDetailsService\n+                                    .useSecureCookie(true) // Enable secure cookie\n+                                    .rememberMeParameter(\"remember-me\") // Form parameter name\n+                                    .rememberMeCookieName(\"remember-me\") // Cookie name\n+                                    .alwaysRemember(false));\n             http.authorizeHttpRequests(\n                     authz ->\n                             authz.requestMatchers(\n\ndiff --git a/src/main/java/stirling/software/SPDF/repository/JPATokenRepositoryImpl.java b/src/main/java/stirling/software/SPDF/repository/JPATokenRepositoryImpl.java\n--- a/src/main/java/stirling/software/SPDF/repository/JPATokenRepositoryImpl.java\n+++ b/src/main/java/stirling/software/SPDF/repository/JPATokenRepositoryImpl.java\n@@ -5,6 +5,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.web.authentication.rememberme.PersistentRememberMeToken;\n import org.springframework.security.web.authentication.rememberme.PersistentTokenRepository;\n+import org.springframework.transaction.annotation.Transactional;\n \n import stirling.software.SPDF.model.PersistentLogin;\n \n@@ -13,6 +14,7 @@ public class JPATokenRepositoryImpl implements PersistentTokenRepository {\n     @Autowired private PersistentLoginRepository persistentLoginRepository;\n \n     @Override\n+    @Transactional\n     public void createNewToken(PersistentRememberMeToken token) {\n         PersistentLogin newToken = new PersistentLogin();\n         newToken.setSeries(token.getSeries());\n@@ -23,6 +25,7 @@ public void createNewToken(PersistentRememberMeToken token) {\n     }\n \n     @Override\n+    @Transactional\n     public void updateToken(String series, String tokenValue, Date lastUsed) {\n         PersistentLogin existingToken = persistentLoginRepository.findById(series).orElse(null);\n         if (existingToken != null) {\n@@ -43,11 +46,11 @@ public PersistentRememberMeToken getTokenForSeries(String seriesId) {\n     }\n \n     @Override\n+    @Transactional\n     public void removeUserTokens(String username) {\n-        for (PersistentLogin token : persistentLoginRepository.findAll()) {\n-            if (token.getUsername().equals(username)) {\n-                persistentLoginRepository.delete(token);\n-            }\n+        try {\n+            persistentLoginRepository.deleteByUsername(username);\n+        } catch (Exception e) {\n         }\n     }\n }\n\ndiff --git a/src/main/java/stirling/software/SPDF/repository/PersistentLoginRepository.java b/src/main/java/stirling/software/SPDF/repository/PersistentLoginRepository.java\n--- a/src/main/java/stirling/software/SPDF/repository/PersistentLoginRepository.java\n+++ b/src/main/java/stirling/software/SPDF/repository/PersistentLoginRepository.java\n@@ -6,4 +6,6 @@\n import stirling.software.SPDF.model.PersistentLogin;\n \n @Repository\n-public interface PersistentLoginRepository extends JpaRepository<PersistentLogin, String> {}\n+public interface PersistentLoginRepository extends JpaRepository<PersistentLogin, String> {\n+    void deleteByUsername(String username);\n+}",
    "output": "fix remmeber me (#2184)\n\n* fix remmeber me\r\n\r\n* remove uselss comment\r\n\r\n* Update translation files (#2185)\r\n\r\nSigned-off-by: GitHub Action <action@github.com>\r\nCo-authored-by: GitHub Action <action@github.com>\r\n\r\n---------\r\n\r\nSigned-off-by: GitHub Action <action@github.com>\r\nCo-authored-by: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>\r\nCo-authored-by: GitHub Action <action@github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/AdditionalLanguageJsController.java b/src/main/java/stirling/software/SPDF/controller/api/AdditionalLanguageJsController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/AdditionalLanguageJsController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/AdditionalLanguageJsController.java\n@@ -0,0 +1,65 @@\n+package stirling.software.SPDF.controller.api;\n+\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.List;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import io.swagger.v3.oas.annotations.Hidden;\n+\n+import jakarta.servlet.http.HttpServletResponse;\n+import stirling.software.SPDF.service.LanguageService;\n+\n+@RestController\n+@RequestMapping(\"/js\")\n+public class AdditionalLanguageJsController {\n+\n+    @Autowired private LanguageService languageService;\n+\n+    @Hidden\n+    @GetMapping(value = \"/additionalLanguageCode.js\", produces = \"application/javascript\")\n+    public void generateAdditionalLanguageJs(HttpServletResponse response) throws IOException {\n+        List<String> supportedLanguages = languageService.getSupportedLanguages();\n+\n+        response.setContentType(\"application/javascript\");\n+        PrintWriter writer = response.getWriter();\n+\n+        // Erstelle das JavaScript dynamisch\n+        writer.println(\"const supportedLanguages = \" + toJsonArray(supportedLanguages) + \";\");\n+\n+        // Generiere die `getDetailedLanguageCode`-Funktion\n+        writer.println(\n+                \"\"\"\n+                function getDetailedLanguageCode() {\n+                    const userLanguages = navigator.languages ? navigator.languages : [navigator.language];\n+                    for (let lang of userLanguages) {\n+                        let matchedLang = supportedLanguages.find(supportedLang => supportedLang.startsWith(lang.replace('-', '_')));\n+                        if (matchedLang) {\n+                            return matchedLang;\n+                        }\n+                    }\n+                    // Fallback\n+                    return \"en_GB\";\n+                }\n+                \"\"\");\n+\n+        writer.flush();\n+    }\n+\n+    // Hilfsfunktion zum Konvertieren der Liste in ein JSON-Array\n+    private String toJsonArray(List<String> list) {\n+        StringBuilder jsonArray = new StringBuilder(\"[\");\n+        for (int i = 0; i < list.size(); i++) {\n+            jsonArray.append(\"\\\"\").append(list.get(i)).append(\"\\\"\");\n+            if (i < list.size() - 1) {\n+                jsonArray.append(\",\");\n+            }\n+        }\n+        jsonArray.append(\"]\");\n+        return jsonArray.toString();\n+    }\n+}\n\ndiff --git a/src/main/java/stirling/software/SPDF/service/LanguageService.java b/src/main/java/stirling/software/SPDF/service/LanguageService.java\n--- a/src/main/java/stirling/software/SPDF/service/LanguageService.java\n+++ b/src/main/java/stirling/software/SPDF/service/LanguageService.java\n@@ -0,0 +1,41 @@\n+package stirling.software.SPDF.service;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.springframework.core.io.Resource;\n+import org.springframework.core.io.support.PathMatchingResourcePatternResolver;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class LanguageService {\n+\n+    private final PathMatchingResourcePatternResolver resourcePatternResolver =\n+            new PathMatchingResourcePatternResolver();\n+\n+    public List<String> getSupportedLanguages() {\n+        List<String> supportedLanguages = new ArrayList<>();\n+\n+        try {\n+            Resource[] resources =\n+                    resourcePatternResolver.getResources(\"classpath*:messages_*.properties\");\n+            for (Resource resource : resources) {\n+                if (resource.exists() && resource.isReadable()) {\n+                    String filename = resource.getFilename();\n+                    if (filename != null\n+                            && filename.startsWith(\"messages_\")\n+                            && filename.endsWith(\".properties\")) {\n+                        String languageCode =\n+                                filename.replace(\"messages_\", \"\").replace(\".properties\", \"\");\n+                        supportedLanguages.add(languageCode);\n+                    }\n+                }\n+            }\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+\n+        return supportedLanguages;\n+    }\n+}",
    "output": "Fix: Auto language detection #2122 (#2148)\n\n* Fix: Auto language detection #2122\r\n\r\n* add LanguageService and AdditionalLanguageJsController\r\n\r\n* hidden swagger"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/security/CertSignController.java b/src/main/java/stirling/software/SPDF/controller/api/security/CertSignController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/security/CertSignController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/security/CertSignController.java\n@@ -8,6 +8,7 @@\n import java.io.InputStream;\n import java.io.InputStreamReader;\n import java.io.OutputStream;\n+import java.nio.file.Files;\n import java.security.KeyStore;\n import java.security.KeyStoreException;\n import java.security.NoSuchAlgorithmException;\n@@ -21,6 +22,7 @@\n import java.util.Calendar;\n import java.util.List;\n \n+import org.apache.commons.io.FileUtils;\n import org.apache.pdfbox.examples.signature.CreateSignatureBase;\n import org.apache.pdfbox.pdmodel.PDDocument;\n import org.apache.pdfbox.pdmodel.PDPage;\n@@ -92,7 +94,7 @@ public class CertSignController {\n     }\n \n     class CreateSignature extends CreateSignatureBase {\n-        File imageFile;\n+        File logoFile;\n \n         public CreateSignature(KeyStore keystore, char[] pin)\n                 throws KeyStoreException,\n@@ -102,11 +104,17 @@ public CreateSignature(KeyStore keystore, char[] pin)\n                         CertificateException {\n             super(keystore, pin);\n             ClassPathResource resource = new ClassPathResource(\"static/images/signature.png\");\n-            imageFile = resource.getFile();\n+            try (InputStream is = resource.getInputStream()) {\n+                logoFile = Files.createTempFile(\"signature\", \".png\").toFile();\n+                FileUtils.copyInputStreamToFile(is, logoFile);\n+            } catch (IOException e) {\n+                logger.error(\"Failed to load image signature file\");\n+                throw e;\n+            }\n         }\n \n         public InputStream createVisibleSignature(\n-                PDDocument srcDoc, PDSignature signature, Integer pageNumber, Boolean showImage)\n+                PDDocument srcDoc, PDSignature signature, Integer pageNumber, Boolean showLogo)\n                 throws IOException {\n             // modified from org.apache.pdfbox.examples.signature.CreateVisibleSignature2\n             try (PDDocument doc = new PDDocument()) {\n@@ -145,15 +153,15 @@ public InputStream createVisibleSignature(\n                 widget.setAppearance(appearance);\n \n                 try (PDPageContentStream cs = new PDPageContentStream(doc, appearanceStream)) {\n-                    if (showImage) {\n+                    if (showLogo) {\n                         cs.saveGraphicsState();\n                         PDExtendedGraphicsState extState = new PDExtendedGraphicsState();\n                         extState.setBlendMode(BlendMode.MULTIPLY);\n                         extState.setNonStrokingAlphaConstant(0.5f);\n                         cs.setGraphicsStateParameters(extState);\n                         cs.transform(Matrix.getScaleInstance(0.08f, 0.08f));\n                         PDImageXObject img =\n-                                PDImageXObject.createFromFileByExtension(imageFile, doc);\n+                                PDImageXObject.createFromFileByExtension(logoFile, doc);\n                         cs.drawImage(img, 100, 0);\n                         cs.restoreGraphicsState();\n                     }\n@@ -219,6 +227,7 @@ public ResponseEntity<byte[]> signPDFWithCert(@ModelAttribute SignPDFWithCertReq\n         String location = request.getLocation();\n         String name = request.getName();\n         Integer pageNumber = request.getPageNumber() - 1;\n+        Boolean showLogo = request.isShowLogo();\n \n         if (certType == null) {\n             throw new IllegalArgumentException(\"Cert type must be provided\");\n@@ -258,7 +267,8 @@ public ResponseEntity<byte[]> signPDFWithCert(@ModelAttribute SignPDFWithCertReq\n                 pageNumber,\n                 name,\n                 location,\n-                reason);\n+                reason,\n+                showLogo);\n         return WebResponseUtils.boasToWebResponse(\n                 baos,\n                 Filenames.toSimpleFileName(pdf.getOriginalFilename()).replaceFirst(\"[.][^.]+$\", \"\")\n@@ -274,7 +284,8 @@ private static void sign(\n             Integer pageNumber,\n             String name,\n             String location,\n-            String reason) {\n+            String reason,\n+            Boolean showLogo) {\n         try (PDDocument doc = pdfDocumentFactory.load(input)) {\n             PDSignature signature = new PDSignature();\n             signature.setFilter(PDSignature.FILTER_ADOBE_PPKLITE);\n@@ -287,7 +298,7 @@ private static void sign(\n             if (showSignature) {\n                 SignatureOptions signatureOptions = new SignatureOptions();\n                 signatureOptions.setVisualSignature(\n-                        instance.createVisibleSignature(doc, signature, pageNumber, true));\n+                        instance.createVisibleSignature(doc, signature, pageNumber, showLogo));\n                 signatureOptions.setPage(pageNumber);\n \n                 doc.addSignature(signature, instance, signatureOptions);\n\ndiff --git a/src/main/java/stirling/software/SPDF/model/api/security/SignPDFWithCertRequest.java b/src/main/java/stirling/software/SPDF/model/api/security/SignPDFWithCertRequest.java\n--- a/src/main/java/stirling/software/SPDF/model/api/security/SignPDFWithCertRequest.java\n+++ b/src/main/java/stirling/software/SPDF/model/api/security/SignPDFWithCertRequest.java\n@@ -50,4 +50,7 @@ public class SignPDFWithCertRequest extends PDFFile {\n             description =\n                     \"The page number where the signature should be visible. This is required if showSignature is set to true\")\n     private Integer pageNumber;\n+\n+    @Schema(description = \"Whether to visually show a signature logo along with the signature\")\n+    private boolean showLogo;\n }",
    "output": "fix signature logo not loading and add option to disable it (#2143)\n\n* fix signature logo not loading and add option to disable it\r\n\r\n* Hardening suggestions for Stirling-PDF / fix-sig-logo (#2144)\r\n\r\nModernize and secure temp file creation\r\n\r\nCo-authored-by: pixeebot[bot] <104101892+pixeebot[bot]@users.noreply.github.com>\r\n\r\n---------\r\n\r\nCo-authored-by: pixeebot[bot] <104101892+pixeebot[bot]@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/SecurityConfiguration.java b/src/main/java/stirling/software/SPDF/config/security/SecurityConfiguration.java\n--- a/src/main/java/stirling/software/SPDF/config/security/SecurityConfiguration.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/SecurityConfiguration.java\n@@ -36,6 +36,8 @@\n import org.springframework.security.web.SecurityFilterChain;\n import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\n import org.springframework.security.web.authentication.rememberme.PersistentTokenRepository;\n+import org.springframework.security.web.csrf.CookieCsrfTokenRepository;\n+import org.springframework.security.web.csrf.CsrfTokenRequestAttributeHandler;\n import org.springframework.security.web.savedrequest.NullRequestCache;\n import org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n \n@@ -94,6 +96,16 @@ public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n                     userAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);\n             if (applicationProperties.getSecurity().getCsrfDisabled()) {\n                 http.csrf(csrf -> csrf.disable());\n+            } else {\n+                CookieCsrfTokenRepository cookieRepo =\n+                        CookieCsrfTokenRepository.withHttpOnlyFalse();\n+                CsrfTokenRequestAttributeHandler requestHandler =\n+                        new CsrfTokenRequestAttributeHandler();\n+                requestHandler.setCsrfRequestAttributeName(null);\n+                http.csrf(\n+                        csrf ->\n+                                csrf.csrfTokenRepository(cookieRepo)\n+                                        .csrfTokenRequestHandler(requestHandler));\n             }\n             http.addFilterBefore(rateLimitingFilter(), UsernamePasswordAuthenticationFilter.class);\n             http.addFilterAfter(firstLoginFilter, UsernamePasswordAuthenticationFilter.class);\n@@ -113,6 +125,7 @@ public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n                             logout.logoutRequestMatcher(new AntPathRequestMatcher(\"/logout\"))\n                                     .logoutSuccessHandler(\n                                             new CustomLogoutSuccessHandler(applicationProperties))\n+                                    .clearAuthentication(true)\n                                     .invalidateHttpSession(true) // Invalidate session\n                                     .deleteCookies(\"JSESSIONID\", \"remember-me\"));\n             http.rememberMe(\n@@ -223,6 +236,16 @@ public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n         } else {\n             if (applicationProperties.getSecurity().getCsrfDisabled()) {\n                 http.csrf(csrf -> csrf.disable());\n+            } else {\n+                CookieCsrfTokenRepository cookieRepo =\n+                        CookieCsrfTokenRepository.withHttpOnlyFalse();\n+                CsrfTokenRequestAttributeHandler requestHandler =\n+                        new CsrfTokenRequestAttributeHandler();\n+                requestHandler.setCsrfRequestAttributeName(null);\n+                http.csrf(\n+                        csrf ->\n+                                csrf.csrfTokenRepository(cookieRepo)\n+                                        .csrfTokenRequestHandler(requestHandler));\n             }\n             http.authorizeHttpRequests(authz -> authz.anyRequest().permitAll());\n         }",
    "output": "Fix csrf (#2126)\n\n* apply fix\r\n\r\n* Fixes empty th:action\r\n\r\n* Update build.gradle\r\n\r\n* fix\r\n\r\n* formatting\r\n\r\n---------\r\n\r\nCo-authored-by: Dimitrios Kaitantzidis <james_k23@hotmail.gr>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/utils/misc/CustomColorReplaceStrategy.java b/src/main/java/stirling/software/SPDF/utils/misc/CustomColorReplaceStrategy.java\n--- a/src/main/java/stirling/software/SPDF/utils/misc/CustomColorReplaceStrategy.java\n+++ b/src/main/java/stirling/software/SPDF/utils/misc/CustomColorReplaceStrategy.java\n@@ -5,6 +5,7 @@\n import java.io.ByteArrayOutputStream;\n import java.io.File;\n import java.io.IOException;\n+import java.nio.file.Files;\n import java.util.List;\n import java.util.Set;\n \n@@ -53,7 +54,7 @@ public InputStreamResource replace() throws IOException {\n         }\n \n         // Create a temporary file, with the original filename from the multipart file\n-        File file = File.createTempFile(\"temp\", getFileInput().getOriginalFilename());\n+        File file = Files.createTempFile(\"temp\", getFileInput().getOriginalFilename()).toFile();\n \n         // Transfer the content of the multipart file to the file\n         getFileInput().transferTo(file);\n\ndiff --git a/src/main/java/stirling/software/SPDF/utils/misc/InvertFullColorStrategy.java b/src/main/java/stirling/software/SPDF/utils/misc/InvertFullColorStrategy.java\n--- a/src/main/java/stirling/software/SPDF/utils/misc/InvertFullColorStrategy.java\n+++ b/src/main/java/stirling/software/SPDF/utils/misc/InvertFullColorStrategy.java\n@@ -6,6 +6,7 @@\n import java.io.ByteArrayOutputStream;\n import java.io.File;\n import java.io.IOException;\n+import java.nio.file.Files;\n \n import javax.imageio.ImageIO;\n \n@@ -30,7 +31,7 @@ public InvertFullColorStrategy(MultipartFile file, ReplaceAndInvert replaceAndIn\n     public InputStreamResource replace() throws IOException {\n \n         // Create a temporary file, with the original filename from the multipart file\n-        File file = File.createTempFile(\"temp\", getFileInput().getOriginalFilename());\n+        File file = Files.createTempFile(\"temp\", getFileInput().getOriginalFilename()).toFile();\n \n         // Transfer the content of the multipart file to the file\n         getFileInput().transferTo(file);",
    "output": "Modernize and secure temp file creation (#2106)\n\nCo-authored-by: pixeebot[bot] <104101892+pixeebot[bot]@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/saml2/CertificateUtils.java b/src/main/java/stirling/software/SPDF/config/security/saml2/CertificateUtils.java\n--- a/src/main/java/stirling/software/SPDF/config/security/saml2/CertificateUtils.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/saml2/CertificateUtils.java\n@@ -1,48 +1,42 @@\n package stirling.software.SPDF.config.security.saml2;\n \n import java.io.ByteArrayInputStream;\n+import java.io.InputStreamReader;\n import java.nio.charset.StandardCharsets;\n import java.security.KeyFactory;\n import java.security.cert.CertificateFactory;\n import java.security.cert.X509Certificate;\n import java.security.interfaces.RSAPrivateKey;\n import java.security.spec.PKCS8EncodedKeySpec;\n-import java.util.Base64;\n \n+import org.bouncycastle.util.io.pem.PemObject;\n+import org.bouncycastle.util.io.pem.PemReader;\n import org.springframework.core.io.Resource;\n-import org.springframework.util.FileCopyUtils;\n \n public class CertificateUtils {\n \n     public static X509Certificate readCertificate(Resource certificateResource) throws Exception {\n-        String certificateString =\n-                new String(\n-                        FileCopyUtils.copyToByteArray(certificateResource.getInputStream()),\n-                        StandardCharsets.UTF_8);\n-        String certContent =\n-                certificateString\n-                        .replace(\"-----BEGIN CERTIFICATE-----\", \"\")\n-                        .replace(\"-----END CERTIFICATE-----\", \"\")\n-                        .replaceAll(\"\\\\R\", \"\")\n-                        .replaceAll(\"\\\\s+\", \"\");\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-        byte[] decodedCert = Base64.getDecoder().decode(certContent);\n-        return (X509Certificate) cf.generateCertificate(new ByteArrayInputStream(decodedCert));\n+        try (PemReader pemReader =\n+                new PemReader(\n+                        new InputStreamReader(\n+                                certificateResource.getInputStream(), StandardCharsets.UTF_8))) {\n+            PemObject pemObject = pemReader.readPemObject();\n+            byte[] decodedCert = pemObject.getContent();\n+            CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n+            return (X509Certificate) cf.generateCertificate(new ByteArrayInputStream(decodedCert));\n+        }\n     }\n \n     public static RSAPrivateKey readPrivateKey(Resource privateKeyResource) throws Exception {\n-        String privateKeyString =\n-                new String(\n-                        FileCopyUtils.copyToByteArray(privateKeyResource.getInputStream()),\n-                        StandardCharsets.UTF_8);\n-        String privateKeyContent =\n-                privateKeyString\n-                        .replace(\"-----BEGIN PRIVATE KEY-----\", \"\")\n-                        .replace(\"-----END PRIVATE KEY-----\", \"\")\n-                        .replaceAll(\"\\\\R\", \"\")\n-                        .replaceAll(\"\\\\s+\", \"\");\n-        KeyFactory kf = KeyFactory.getInstance(\"RSA\");\n-        byte[] decodedKey = Base64.getDecoder().decode(privateKeyContent);\n-        return (RSAPrivateKey) kf.generatePrivate(new PKCS8EncodedKeySpec(decodedKey));\n+        try (PemReader pemReader =\n+                new PemReader(\n+                        new InputStreamReader(\n+                                privateKeyResource.getInputStream(), StandardCharsets.UTF_8))) {\n+            PemObject pemObject = pemReader.readPemObject();\n+            byte[] decodedKey = pemObject.getContent();\n+            return (RSAPrivateKey)\n+                    KeyFactory.getInstance(\"RSA\")\n+                            .generatePrivate(new PKCS8EncodedKeySpec(decodedKey));\n+        }\n     }\n }\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/web/AccountWebController.java b/src/main/java/stirling/software/SPDF/controller/web/AccountWebController.java\n--- a/src/main/java/stirling/software/SPDF/controller/web/AccountWebController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/web/AccountWebController.java\n@@ -89,10 +89,9 @@ public String login(HttpServletRequest request, Model model, Authentication auth\n         }\n \n         SAML2 saml2 = securityProps.getSaml2();\n-        if (saml2 != null) {\n-            if (saml2.getEnabled()) {\n-                providerList.put(\"/saml2/authenticate/\" + saml2.getRegistrationId(), \"SAML 2\");\n-            }\n+        if (securityProps.isSaml2Activ()\n+                && applicationProperties.getSystem().getEnableAlphaFunctionality()) {\n+            providerList.put(\"/saml2/authenticate/\" + saml2.getRegistrationId(), \"SAML 2\");\n         }\n         // Remove any null keys/values from the providerList\n         providerList\n@@ -101,7 +100,8 @@ public String login(HttpServletRequest request, Model model, Authentication auth\n         model.addAttribute(\"providerlist\", providerList);\n \n         model.addAttribute(\"loginMethod\", securityProps.getLoginMethod());\n-        model.addAttribute(\"altLogin\", securityProps.isAltLogin());\n+        boolean altLogin = providerList.size() > 0 ? securityProps.isAltLogin() : false;\n+        model.addAttribute(\"altLogin\", altLogin);\n \n         model.addAttribute(\"currentPage\", \"login\");\n \n@@ -164,6 +164,17 @@ public String login(HttpServletRequest request, Model model, Authentication auth\n                 case \"userIsDisabled\":\n                     erroroauth = \"login.userIsDisabled\";\n                     break;\n+                case \"invalid_destination\":\n+                    erroroauth = \"login.invalid_destination\";\n+                    break;\n+                    // Valid InResponseTo was not available from the validation context, unable to\n+                    // evaluate\n+                case \"invalid_in_response_to\":\n+                    erroroauth = \"login.invalid_in_response_to\";\n+                    break;\n+                case \"not_authentication_provider_found\":\n+                    erroroauth = \"login.not_authentication_provider_found\";\n+                    break;\n                 default:\n                     break;\n             }",
    "output": "Optimierung der SAML2-Integration und Verbesserung der Zertifikats- und Fehlerbehandlung (#2105)\n\n* certificate processing\r\n\r\n* Hides dialog when provider list is empty\r\n\r\n* removed: unused"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java b/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java\n--- a/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java\n+++ b/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java\n@@ -5,6 +5,7 @@\n import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.ConcurrentHashMap;\n+import java.util.stream.Collectors;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -42,7 +43,7 @@ public void enableEndpoint(String endpoint) {\n \n     public void disableEndpoint(String endpoint) {\n         if (!endpointStatuses.containsKey(endpoint) || endpointStatuses.get(endpoint) != false) {\n-            logger.info(\"Disabling {}\", endpoint);\n+            logger.debug(\"Disabling {}\", endpoint);\n             endpointStatuses.put(endpoint, false);\n         }\n     }\n@@ -76,6 +77,23 @@ public void disableGroup(String group) {\n         }\n     }\n \n+    public void logDisabledEndpointsSummary() {\n+        List<String> disabledList =\n+                endpointStatuses.entrySet().stream()\n+                        .filter(entry -> !entry.getValue()) // only get disabled endpoints (value\n+                        // is false)\n+                        .map(Map.Entry::getKey)\n+                        .sorted()\n+                        .collect(Collectors.toList());\n+\n+        if (!disabledList.isEmpty()) {\n+            logger.info(\n+                    \"Total disabled endpoints: {}. Disabled endpoints: {}\",\n+                    disabledList.size(),\n+                    String.join(\", \", disabledList));\n+        }\n+    }\n+\n     public void init() {\n         // Adding endpoints to \"PageOps\" group\n         addEndpointToGroup(\"PageOps\", \"remove-pages\");\n@@ -163,14 +181,12 @@ public void init() {\n \n         // python\n         addEndpointToGroup(\"Python\", \"extract-image-scans\");\n-        addEndpointToGroup(\"Python\", REMOVE_BLANKS);\n         addEndpointToGroup(\"Python\", \"html-to-pdf\");\n         addEndpointToGroup(\"Python\", \"url-to-pdf\");\n         addEndpointToGroup(\"Python\", \"pdf-to-img\");\n \n         // openCV\n         addEndpointToGroup(\"OpenCV\", \"extract-image-scans\");\n-        addEndpointToGroup(\"OpenCV\", REMOVE_BLANKS);\n \n         // LibreOffice\n         addEndpointToGroup(\"LibreOffice\", \"repair\");\n@@ -230,6 +246,17 @@ public void init() {\n         addEndpointToGroup(\"Javascript\", \"sign\");\n         addEndpointToGroup(\"Javascript\", \"compare\");\n         addEndpointToGroup(\"Javascript\", \"adjust-contrast\");\n+\n+        // Ghostscript dependent endpoints\n+        addEndpointToGroup(\"Ghostscript\", \"compress-pdf\");\n+        addEndpointToGroup(\"Ghostscript\", \"pdf-to-pdfa\");\n+\n+        // Weasyprint dependent endpoints\n+        addEndpointToGroup(\"Weasyprint\", \"html-to-pdf\");\n+        addEndpointToGroup(\"Weasyprint\", \"url-to-pdf\");\n+\n+        // Pdftohtml dependent endpoints\n+        addEndpointToGroup(\"Pdftohtml\", \"pdf-to-html\");\n     }\n \n     private void processEnvironmentConfigs() {\n@@ -251,5 +278,9 @@ private void processEnvironmentConfigs() {\n         }\n     }\n \n+    public Set<String> getEndpointsForGroup(String group) {\n+        return endpointGroups.getOrDefault(group, new HashSet<>());\n+    }\n+\n     private static final String REMOVE_BLANKS = \"remove-blanks\";\n }\n\ndiff --git a/src/main/java/stirling/software/SPDF/config/ExternalAppDepConfig.java b/src/main/java/stirling/software/SPDF/config/ExternalAppDepConfig.java\n--- a/src/main/java/stirling/software/SPDF/config/ExternalAppDepConfig.java\n+++ b/src/main/java/stirling/software/SPDF/config/ExternalAppDepConfig.java\n@@ -0,0 +1,146 @@\n+package stirling.software.SPDF.config;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Configuration;\n+\n+import jakarta.annotation.PostConstruct;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Configuration\n+@Slf4j\n+public class ExternalAppDepConfig {\n+    @Autowired private EndpointConfiguration endpointConfiguration;\n+\n+    private boolean isCommandAvailable(String command) {\n+        try {\n+            ProcessBuilder processBuilder = new ProcessBuilder();\n+            if (System.getProperty(\"os.name\").toLowerCase().contains(\"windows\")) {\n+                processBuilder.command(\"where\", command);\n+            } else {\n+                processBuilder.command(\"which\", command);\n+            }\n+            Process process = processBuilder.start();\n+            int exitCode = process.waitFor();\n+            return exitCode == 0;\n+        } catch (Exception e) {\n+            log.debug(\"Error checking for command {}: {}\", command, e.getMessage());\n+            return false;\n+        }\n+    }\n+\n+    private final Map<String, List<String>> commandToGroupMapping =\n+            new HashMap<>() {\n+                {\n+                    put(\"gs\", List.of(\"Ghostscript\"));\n+                    put(\"soffice\", List.of(\"LibreOffice\"));\n+                    put(\"ocrmypdf\", List.of(\"OCRmyPDF\"));\n+                    put(\"weasyprint\", List.of(\"Weasyprint\"));\n+                    put(\"pdftohtml\", List.of(\"Pdftohtml\"));\n+                }\n+            };\n+\n+    private List<String> getAffectedFeatures(String group) {\n+        return endpointConfiguration.getEndpointsForGroup(group).stream()\n+                .map(endpoint -> formatEndpointAsFeature(endpoint))\n+                .collect(Collectors.toList());\n+    }\n+\n+    private String formatEndpointAsFeature(String endpoint) {\n+        // First replace common terms\n+        String feature = endpoint.replace(\"-\", \" \").replace(\"pdf\", \"PDF\").replace(\"img\", \"image\");\n+\n+        // Split into words and capitalize each word\n+        return Arrays.stream(feature.split(\"\\\\s+\"))\n+                .map(word -> capitalizeWord(word))\n+                .collect(Collectors.joining(\" \"));\n+    }\n+\n+    private String capitalizeWord(String word) {\n+        if (word.isEmpty()) {\n+            return word;\n+        }\n+        if (\"pdf\".equalsIgnoreCase(word)) {\n+            return \"PDF\";\n+        }\n+        return word.substring(0, 1).toUpperCase() + word.substring(1).toLowerCase();\n+    }\n+\n+    private void checkDependencyAndDisableGroup(String command) {\n+        boolean isAvailable = isCommandAvailable(command);\n+        if (!isAvailable) {\n+            List<String> affectedGroups = commandToGroupMapping.get(command);\n+\n+            if (affectedGroups != null) {\n+                for (String group : affectedGroups) {\n+                    List<String> affectedFeatures = getAffectedFeatures(group);\n+                    endpointConfiguration.disableGroup(group);\n+                    log.warn(\n+                            \"Missing dependency: {} - Disabling group: {} (Affected features: {})\",\n+                            command,\n+                            group,\n+                            affectedFeatures != null && !affectedFeatures.isEmpty()\n+                                    ? String.join(\", \", affectedFeatures)\n+                                    : \"unknown\");\n+                }\n+            }\n+        }\n+    }\n+\n+    @PostConstruct\n+    public void checkDependencies() {\n+\n+        // Check core dependencies\n+        checkDependencyAndDisableGroup(\"gs\");\n+        checkDependencyAndDisableGroup(\"soffice\");\n+        checkDependencyAndDisableGroup(\"ocrmypdf\");\n+        checkDependencyAndDisableGroup(\"weasyprint\");\n+        checkDependencyAndDisableGroup(\"pdftohtml\");\n+\n+        // Special handling for Python/OpenCV dependencies\n+        boolean pythonAvailable = isCommandAvailable(\"python3\") || isCommandAvailable(\"python\");\n+        if (!pythonAvailable) {\n+            List<String> pythonFeatures = getAffectedFeatures(\"Python\");\n+            List<String> openCVFeatures = getAffectedFeatures(\"OpenCV\");\n+\n+            endpointConfiguration.disableGroup(\"Python\");\n+            endpointConfiguration.disableGroup(\"OpenCV\");\n+            log.warn(\n+                    \"Missing dependency: Python - Disabling Python features: {} and OpenCV features: {}\",\n+                    String.join(\", \", pythonFeatures),\n+                    String.join(\", \", openCVFeatures));\n+        } else {\n+            // If Python is available, check for OpenCV\n+            try {\n+                ProcessBuilder processBuilder = new ProcessBuilder();\n+                if (System.getProperty(\"os.name\").toLowerCase().contains(\"windows\")) {\n+                    processBuilder.command(\"python\", \"-c\", \"import cv2\");\n+                } else {\n+                    processBuilder.command(\"python3\", \"-c\", \"import cv2\");\n+                }\n+                Process process = processBuilder.start();\n+                int exitCode = process.waitFor();\n+                if (exitCode != 0) {\n+                    List<String> openCVFeatures = getAffectedFeatures(\"OpenCV\");\n+                    endpointConfiguration.disableGroup(\"OpenCV\");\n+                    log.warn(\n+                            \"OpenCV not available in Python - Disabling OpenCV features: {}\",\n+                            String.join(\", \", openCVFeatures));\n+                }\n+            } catch (Exception e) {\n+                List<String> openCVFeatures = getAffectedFeatures(\"OpenCV\");\n+                endpointConfiguration.disableGroup(\"OpenCV\");\n+                log.warn(\n+                        \"Error checking OpenCV: {} - Disabling OpenCV features: {}\",\n+                        e.getMessage(),\n+                        String.join(\", \", openCVFeatures));\n+            }\n+        }\n+        endpointConfiguration.logDisabledEndpointsSummary();\n+    }\n+}",
    "output": "Auto detect presence of external dependencies (LibreOffice etc) and disable/enable features dynamically (#2082)\n\n* Create ExternalAppDepConfig.java\r\n\r\n* Update EndpointConfiguration.java\r\n\r\n* Hardening suggestions for Stirling-PDF / ExternalAppDepConfig (#2083)\r\n\r\nSwitch order of literals to prevent NullPointerException\r\n\r\nCo-authored-by: pixeebot[bot] <104101892+pixeebot[bot]@users.noreply.github.com>\r\n\r\n---------\r\n\r\nCo-authored-by: pixeebot[bot] <104101892+pixeebot[bot]@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/service/PostHogService.java b/src/main/java/stirling/software/SPDF/service/PostHogService.java\n--- a/src/main/java/stirling/software/SPDF/service/PostHogService.java\n+++ b/src/main/java/stirling/software/SPDF/service/PostHogService.java\n@@ -54,7 +54,7 @@ private void captureSystemInfo() {\n     }\n \n     public void captureEvent(String eventName, Map<String, Object> properties) {\n-        if (!Boolean.getBoolean(applicationProperties.getSystem().getEnableAnalytics())) {\n+        if (!Boolean.parseBoolean(applicationProperties.getSystem().getEnableAnalytics())) {\n             return;\n         }\n         postHog.capture(uniqueId, eventName, properties);",
    "output": "Update PostHogService.java"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/service/PostHogService.java b/src/main/java/stirling/software/SPDF/service/PostHogService.java\n--- a/src/main/java/stirling/software/SPDF/service/PostHogService.java\n+++ b/src/main/java/stirling/software/SPDF/service/PostHogService.java\n@@ -43,7 +43,7 @@ public PostHogService(\n     }\n \n     private void captureSystemInfo() {\n-        if (!Boolean.getBoolean(applicationProperties.getSystem().getEnableAnalytics())) {\n+        if (!Boolean.parseBoolean(applicationProperties.getSystem().getEnableAnalytics())) {\n             return;\n         }\n         try {",
    "output": "Fix metricCollection"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/EE/EEAppConfig.java b/src/main/java/stirling/software/SPDF/EE/EEAppConfig.java\n--- a/src/main/java/stirling/software/SPDF/EE/EEAppConfig.java\n+++ b/src/main/java/stirling/software/SPDF/EE/EEAppConfig.java\n@@ -7,20 +7,19 @@\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Lazy;\n \n+import lombok.extern.slf4j.Slf4j;\n import stirling.software.SPDF.model.ApplicationProperties;\n \n @Configuration\n @Lazy\n+@Slf4j\n public class EEAppConfig {\n \n-    private static final Logger logger = LoggerFactory.getLogger(EEAppConfig.class);\n-\n     @Autowired ApplicationProperties applicationProperties;\n-\n     @Autowired private LicenseKeyChecker licenseKeyChecker;\n \n     @Bean(name = \"runningEE\")\n     public boolean runningEnterpriseEdition() {\n-        return licenseKeyChecker.getEnterpriseEnabledResult();\n+    \treturn licenseKeyChecker.getEnterpriseEnabledResult();\n     }\n-}\n+}\n\\ No newline at end of file",
    "output": "Remove pro badge if enabled"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/AppConfig.java b/src/main/java/stirling/software/SPDF/config/AppConfig.java\n--- a/src/main/java/stirling/software/SPDF/config/AppConfig.java\n+++ b/src/main/java/stirling/software/SPDF/config/AppConfig.java\n@@ -15,6 +15,7 @@\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Lazy;\n+import org.springframework.context.annotation.Scope;\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.core.io.Resource;\n import org.springframework.core.io.ResourceLoader;\n@@ -162,12 +163,14 @@ public String accessibilityStatement() {\n     }\n \n     @Bean(name = \"analyticsPrompt\")\n+    @Scope(\"request\")\n     public boolean analyticsPrompt() {\n         return applicationProperties.getSystem().getEnableAnalytics() == null\n                 || \"undefined\".equals(applicationProperties.getSystem().getEnableAnalytics());\n     }\n \n     @Bean(name = \"analyticsEnabled\")\n+    @Scope(\"request\")\n     public boolean analyticsEnabled() {\n         if (applicationProperties.getEnterpriseEdition().isEnabled()) return true;\n         return applicationProperties.getSystem().getEnableAnalytics() != null\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/api/SettingsController.java b/src/main/java/stirling/software/SPDF/controller/api/SettingsController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/SettingsController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/SettingsController.java\n@@ -32,6 +32,7 @@ public ResponseEntity<String> updateApiKey(@RequestBody Boolean enabled) throws\n         }\n         GeneralUtils.saveKeyToConfig(\"system.enableAnalytics\", String.valueOf(enabled), false);\n         applicationProperties.getSystem().setEnableAnalytics(String.valueOf(enabled));\n+\n         return ResponseEntity.ok(\"Updated\");\n     }\n }",
    "output": "Fixes for analyticsPrompt"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/InitialSetup.java b/src/main/java/stirling/software/SPDF/config/InitialSetup.java\n--- a/src/main/java/stirling/software/SPDF/config/InitialSetup.java\n+++ b/src/main/java/stirling/software/SPDF/config/InitialSetup.java\n@@ -8,6 +8,7 @@\n import org.springframework.core.annotation.Order;\n import org.springframework.stereotype.Component;\n \n+import io.micrometer.common.util.StringUtils;\n import jakarta.annotation.PostConstruct;\n import lombok.extern.slf4j.Slf4j;\n import stirling.software.SPDF.model.ApplicationProperties;\n@@ -39,4 +40,26 @@ public void initSecretKey() throws IOException {\n             applicationProperties.getAutomaticallyGenerated().setKey(secretKey);\n         }\n     }\n+    \n+    @PostConstruct\n+    public void initLegalUrls() throws IOException {\n+        // Initialize Terms and Conditions\n+        String termsUrl = applicationProperties.getLegal().getTermsAndConditions();\n+        if (StringUtils.isEmpty(termsUrl)) {\n+            String defaultTermsUrl = \"https://www.stirlingpdf.com/terms-and-conditions\";\n+            GeneralUtils.saveKeyToConfig(\"legal.termsAndConditions\", defaultTermsUrl);\n+            applicationProperties.getLegal().setTermsAndConditions(defaultTermsUrl);\n+        }\n+\n+        // Initialize Privacy Policy\n+        String privacyUrl = applicationProperties.getLegal().getPrivacyPolicy();\n+        if (StringUtils.isEmpty(privacyUrl)) {\n+            String defaultPrivacyUrl = \"https://www.stirlingpdf.com/privacy-policy\";\n+            GeneralUtils.saveKeyToConfig(\"legal.privacyPolicy\", defaultPrivacyUrl);\n+            applicationProperties.getLegal().setPrivacyPolicy(defaultPrivacyUrl);\n+        }\n+    }\n+    \n }\n+\n+\n\ndiff --git a/src/main/java/stirling/software/SPDF/config/security/SecurityConfiguration.java b/src/main/java/stirling/software/SPDF/config/security/SecurityConfiguration.java\n--- a/src/main/java/stirling/software/SPDF/config/security/SecurityConfiguration.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/SecurityConfiguration.java\n@@ -203,7 +203,7 @@ public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n             }\n \n             // Handle SAML\n-            if (applicationProperties.getSecurity().isSaml2Activ()) {\n+            if (applicationProperties.getSecurity().isSaml2Activ() && applicationProperties.getSystem().getEnableAlphaFunctionality()) {\n                 http.authenticationProvider(samlAuthenticationProvider());\n                 http.saml2Login(\n                                 saml2 ->\n\ndiff --git a/src/main/java/stirling/software/SPDF/config/security/UserService.java b/src/main/java/stirling/software/SPDF/config/security/UserService.java\n--- a/src/main/java/stirling/software/SPDF/config/security/UserService.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/UserService.java\n@@ -45,9 +45,6 @@ public class UserService implements UserServiceInterface {\n \n     @Autowired DatabaseBackupInterface databaseBackupHelper;\n \n-    public long getTotalUserCount() {\n-        return userRepository.count();\n-    }\n \n     // Handle OAUTH2 login and user auto creation.\n     public boolean processOAuth2PostLogin(String username, boolean autoCreateUser)\n@@ -362,4 +359,9 @@ public String getCurrentUsername() {\n             return principal.toString();\n         }\n     }\n+\n+\t@Override\n+\tpublic long getTotalUsersCount() {\n+\t\treturn userRepository.count();\n+\t}\n }\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/api/pipeline/UserServiceInterface.java b/src/main/java/stirling/software/SPDF/controller/api/pipeline/UserServiceInterface.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/pipeline/UserServiceInterface.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/pipeline/UserServiceInterface.java\n@@ -4,4 +4,6 @@ public interface UserServiceInterface {\n     String getApiKeyForUser(String username);\n \n     String getCurrentUsername();\n+    \n+    long getTotalUsersCount();\n }\n\ndiff --git a/src/main/java/stirling/software/SPDF/service/PostHogService.java b/src/main/java/stirling/software/SPDF/service/PostHogService.java\n--- a/src/main/java/stirling/software/SPDF/service/PostHogService.java\n+++ b/src/main/java/stirling/software/SPDF/service/PostHogService.java\n@@ -19,22 +19,26 @@\n \n import com.posthog.java.PostHog;\n \n+import stirling.software.SPDF.controller.api.pipeline.UserServiceInterface;\n import stirling.software.SPDF.model.ApplicationProperties;\n \n @Service\n public class PostHogService {\n     private final PostHog postHog;\n     private final String uniqueId;\n     private final ApplicationProperties applicationProperties;\n+    private final UserServiceInterface userService;\n+\n \n     @Autowired\n     public PostHogService(\n             PostHog postHog,\n             @Qualifier(\"UUID\") String uuid,\n-            ApplicationProperties applicationProperties) {\n+            ApplicationProperties applicationProperties, @Autowired(required = false) UserServiceInterface userService) {\n         this.postHog = postHog;\n         this.uniqueId = uuid;\n         this.applicationProperties = applicationProperties;\n+        this.userService = userService;\n         captureSystemInfo();\n     }\n \n@@ -133,6 +137,11 @@ public Map<String, Object> captureServerMetrics() {\n                 metrics.put(\"docker_metrics\", getDockerMetrics());\n             }\n             metrics.put(\"application_properties\", captureApplicationProperties());\n+            \n+            \n+            if(userService != null) {\n+            \tmetrics.put(\"total_users_created\", userService.getTotalUsersCount());\n+            }\n \n         } catch (Exception e) {\n             metrics.put(\"error\", e.getMessage());",
    "output": "Default terms and conditions to stirlingpdf.com (#2058)"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/PdfImageRemovalController.java b/src/main/java/stirling/software/SPDF/controller/api/PdfImageRemovalController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/PdfImageRemovalController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/PdfImageRemovalController.java\n@@ -9,6 +9,7 @@\n import org.springframework.web.bind.annotation.*;\n \n import io.swagger.v3.oas.annotations.Operation;\n+import io.swagger.v3.oas.annotations.tags.Tag;\n \n import stirling.software.SPDF.model.api.PDFFile;\n import stirling.software.SPDF.service.CustomPDDocumentFactory;",
    "output": "bug Update remove image to show on api docs"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/PdfImageRemovalController.java b/src/main/java/stirling/software/SPDF/controller/api/PdfImageRemovalController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/PdfImageRemovalController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/PdfImageRemovalController.java\n@@ -21,6 +21,7 @@\n  */\n @RestController\n @RequestMapping(\"/api/v1/general\")\n+@Tag(name = \"General\", description = \"General APIs\")\n public class PdfImageRemovalController {\n \n     // Service for removing images from PDFs",
    "output": "Update PdfImageRemovalController.java"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/SPdfApplication.java b/src/main/java/stirling/software/SPDF/SPdfApplication.java\n--- a/src/main/java/stirling/software/SPDF/SPdfApplication.java\n+++ b/src/main/java/stirling/software/SPDF/SPdfApplication.java\n@@ -37,7 +37,7 @@ public class SPdfApplication {\n \n     @Value(\"${server.port:8080}\")\n     public void setServerPortStatic(String port) {\n-        if (port.equalsIgnoreCase(\"auto\")) {\n+        if (\"auto\".equalsIgnoreCase(port)) {\n             // Use Spring Boot's automatic port assignment (server.port=0)\n             SPdfApplication.serverPortStatic =\n                     \"0\"; // This will let Spring Boot assign an available port\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/api/ScalePagesController.java b/src/main/java/stirling/software/SPDF/controller/api/ScalePagesController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/ScalePagesController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/ScalePagesController.java\n@@ -109,7 +109,7 @@ public ResponseEntity<byte[]> scalePages(@ModelAttribute ScalePagesRequest reque\n     }\n \n     private PDRectangle getTargetSize(String targetPDRectangle, PDDocument sourceDocument) {\n-        if (targetPDRectangle.equals(\"KEEP\")) {\n+        if (\"KEEP\".equals(targetPDRectangle)) {\n             if (sourceDocument.getNumberOfPages() == 0) {\n                 return null;\n             }\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java b/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java\n@@ -82,17 +82,17 @@ public ResponseEntity<byte[]> convertToImage(@ModelAttribute ConvertToImageReque\n         result =\n                 PdfUtils.convertFromPdf(\n                         pdfBytes,\n-                        imageFormat.equalsIgnoreCase(\"webp\") ? \"png\" : imageFormat.toUpperCase(),\n+                        \"webp\".equalsIgnoreCase(imageFormat) ? \"png\" : imageFormat.toUpperCase(),\n                         colorTypeResult,\n                         singleImage,\n                         Integer.valueOf(dpi),\n                         filename);\n         if (result == null || result.length == 0) {\n             logger.error(\"resultant bytes for {} is null, error converting \", filename);\n         }\n-        if (imageFormat.equalsIgnoreCase(\"webp\") && !CheckProgramInstall.isPythonAvailable()) {\n+        if (\"webp\".equalsIgnoreCase(imageFormat) && !CheckProgramInstall.isPythonAvailable()) {\n             throw new IOException(\"Python is not installed. Required for WebP conversion.\");\n-        } else if (imageFormat.equalsIgnoreCase(\"webp\")\n+        } else if (\"webp\".equalsIgnoreCase(imageFormat)\n                 && CheckProgramInstall.isPythonAvailable()) {\n             // Write the output stream to a temp file\n             Path tempFile = Files.createTempFile(\"temp_png\", \".png\");",
    "output": "Switch order of literals to prevent NullPointerException (#2035)\n\nCo-authored-by: pixeebot[bot] <104101892+pixeebot[bot]@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/SPdfApplication.java b/src/main/java/stirling/software/SPDF/SPdfApplication.java\n--- a/src/main/java/stirling/software/SPDF/SPdfApplication.java\n+++ b/src/main/java/stirling/software/SPDF/SPdfApplication.java\n@@ -78,9 +78,9 @@ public void init() {\n                     // For Windows\n                     SystemCommand.runCommand(rt, \"rundll32 url.dll,FileProtocolHandler \" + url);\n                 } else if (os.contains(\"mac\")) {\n-                    rt.exec(\"open \" + url);\n+                    SystemCommand.runCommand(rt, \"open \" + url);\n                 } else if (os.contains(\"nix\") || os.contains(\"nux\")) {\n-                    rt.exec(\"xdg-open \" + url);\n+                    SystemCommand.runCommand(rt, \"xdg-open \" + url);\n                 }\n             } catch (Exception e) {\n                 logger.error(\"Error opening browser: {}\", e.getMessage());",
    "output": "Introduced protections against system command injection (#2011)\n\n* Introduced protections against system command injection\r\n\r\n* Update translation files (#2034)\r\n\r\nSigned-off-by: GitHub Action <action@github.com>\r\nCo-authored-by: GitHub Action <action@github.com>\r\n\r\n---------\r\n\r\nSigned-off-by: GitHub Action <action@github.com>\r\nCo-authored-by: pixeebot[bot] <104101892+pixeebot[bot]@users.noreply.github.com>\r\nCo-authored-by: Anthony Stirling <77850077+Frooodle@users.noreply.github.com>\r\nCo-authored-by: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>\r\nCo-authored-by: GitHub Action <action@github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/SPdfApplication.java b/src/main/java/stirling/software/SPDF/SPdfApplication.java\n--- a/src/main/java/stirling/software/SPDF/SPdfApplication.java\n+++ b/src/main/java/stirling/software/SPDF/SPdfApplication.java\n@@ -39,7 +39,8 @@ public class SPdfApplication {\n     public void setServerPortStatic(String port) {\n         if (port.equalsIgnoreCase(\"auto\")) {\n             // Use Spring Boot's automatic port assignment (server.port=0)\n-            SPdfApplication.serverPortStatic = \"0\"; // This will let Spring Boot assign an available port\n+            SPdfApplication.serverPortStatic =\n+                    \"0\"; // This will let Spring Boot assign an available port\n         } else {\n             SPdfApplication.serverPortStatic = port;\n         }",
    "output": "fix Show Javascript card layout (#1959)"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/SplitPdfByChaptersController.java b/src/main/java/stirling/software/SPDF/controller/api/SplitPdfByChaptersController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/SplitPdfByChaptersController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/SplitPdfByChaptersController.java\n@@ -67,15 +67,6 @@ public ResponseEntity<byte[]> splitPdf(@ModelAttribute SplitPdfByChaptersRequest\n         }\n         PDDocument sourceDocument = Loader.loadPDF(file.getBytes());\n \n-        // checks if the document is encrypted by an empty user password\n-        if (sourceDocument.isEncrypted()) {\n-            try {\n-                sourceDocument.setAllSecurityToBeRemoved(true);\n-                logger.info(\"Removing security from the source document \");\n-            } catch (Exception e) {\n-                logger.warn(\"Cannot decrypt the pdf\");\n-            }\n-        }\n         PDDocumentOutline outline = sourceDocument.getDocumentCatalog().getDocumentOutline();\n \n         if (outline == null) {\n\ndiff --git a/src/main/java/stirling/software/SPDF/service/CustomPDDocumentFactory.java b/src/main/java/stirling/software/SPDF/service/CustomPDDocumentFactory.java\n--- a/src/main/java/stirling/software/SPDF/service/CustomPDDocumentFactory.java\n+++ b/src/main/java/stirling/software/SPDF/service/CustomPDDocumentFactory.java\n@@ -7,6 +7,8 @@\n \n import org.apache.pdfbox.Loader;\n import org.apache.pdfbox.pdmodel.PDDocument;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n import org.springframework.web.multipart.MultipartFile;\n@@ -18,6 +20,8 @@\n @Component\n public class CustomPDDocumentFactory {\n \n+    private static final Logger logger = LoggerFactory.getLogger(CustomPDDocumentFactory.class);\n+\n     private final PdfMetadataService pdfMetadataService;\n \n     @Autowired\n@@ -71,6 +75,7 @@ public PDDocument load(InputStream input) throws IOException {\n     public PDDocument load(byte[] input) throws IOException {\n         PDDocument document = Loader.loadPDF(input);\n         pdfMetadataService.setDefaultMetadata(document);\n+        removezeropassword(document);\n         return document;\n     }\n \n@@ -96,5 +101,17 @@ private PDDocument load(byte[] bytes, String password) throws IOException {\n         return document;\n     }\n \n+    private PDDocument removezeropassword(PDDocument document) throws IOException {\n+        if (document.isEncrypted()) {\n+            try {\n+                logger.info(\"Removing security from the source document\");\n+                document.setAllSecurityToBeRemoved(true);\n+            } catch (Exception e) {\n+                logger.warn(\"Cannot decrypt the pdf\");\n+            }\n+        }\n+        return document;\n+    }\n+\n     // Add other load methods as needed, following the same pattern\n }",
    "output": "[fix]: check for encryption in PageNumbers (#1949)\n\n[fix]: check for empty password encryption on load\r\n\r\nCo-authored-by: maxi322 <maxi322@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/SPdfApplication.java b/src/main/java/stirling/software/SPDF/SPdfApplication.java\n--- a/src/main/java/stirling/software/SPDF/SPdfApplication.java\n+++ b/src/main/java/stirling/software/SPDF/SPdfApplication.java\n@@ -1,6 +1,7 @@\n package stirling.software.SPDF;\n \n import java.io.IOException;\n+import java.net.ServerSocket;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n@@ -30,14 +31,35 @@ public class SPdfApplication {\n     private static final Logger logger = LoggerFactory.getLogger(SPdfApplication.class);\n \n     @Autowired private Environment env;\n-\n     @Autowired ApplicationProperties applicationProperties;\n \n     private static String serverPortStatic;\n \n     @Value(\"${server.port:8080}\")\n     public void setServerPortStatic(String port) {\n-        SPdfApplication.serverPortStatic = port;\n+        if (port.equalsIgnoreCase(\"auto\")) {\n+            // Use Spring Boot's automatic port assignment (server.port=0)\n+            SPdfApplication.serverPortStatic = \"0\"; // This will let Spring Boot assign an available port\n+        } else {\n+            SPdfApplication.serverPortStatic = port;\n+        }\n+    }\n+\n+    // Optionally keep this method if you want to provide a manual port-incrementation fallback.\n+    private static String findAvailablePort(int startPort) {\n+        int port = startPort;\n+        while (!isPortAvailable(port)) {\n+            port++;\n+        }\n+        return String.valueOf(port);\n+    }\n+\n+    private static boolean isPortAvailable(int port) {\n+        try (ServerSocket socket = new ServerSocket(port)) {\n+            return true;\n+        } catch (IOException e) {\n+            return false;\n+        }\n     }\n \n     @PostConstruct\n@@ -47,13 +69,17 @@ public void init() {\n         boolean browserOpen = browserOpenEnv != null && \"true\".equalsIgnoreCase(browserOpenEnv);\n         if (browserOpen) {\n             try {\n-                String url = \"http://localhost:\" + getNonStaticPort();\n+                String url = \"http://localhost:\" + getStaticPort();\n \n                 String os = System.getProperty(\"os.name\").toLowerCase();\n                 Runtime rt = Runtime.getRuntime();\n                 if (os.contains(\"win\")) {\n                     // For Windows\n                     SystemCommand.runCommand(rt, \"rundll32 url.dll,FileProtocolHandler \" + url);\n+                } else if (os.contains(\"mac\")) {\n+                    rt.exec(\"open \" + url);\n+                } else if (os.contains(\"nix\") || os.contains(\"nux\")) {\n+                    rt.exec(\"xdg-open \" + url);\n                 }\n             } catch (Exception e) {\n                 logger.error(\"Error opening browser: {}\", e.getMessage());\n@@ -69,15 +95,13 @@ public static void main(String[] args) throws IOException, InterruptedException\n         app.addInitializers(new ConfigInitializer());\n         Map<String, String> propertyFiles = new HashMap<>();\n \n-        // stirling pdf settings file\n+        // External config files\n         if (Files.exists(Paths.get(\"configs/settings.yml\"))) {\n             propertyFiles.put(\"spring.config.additional-location\", \"file:configs/settings.yml\");\n         } else {\n-            logger.warn(\n-                    \"External configuration file 'configs/settings.yml' does not exist. Using default configuration and environment configuration instead.\");\n+            logger.warn(\"External configuration file 'configs/settings.yml' does not exist.\");\n         }\n \n-        // custom javs settings file\n         if (Files.exists(Paths.get(\"configs/custom_settings.yml\"))) {\n             String existingLocation =\n                     propertyFiles.getOrDefault(\"spring.config.additional-location\", \"\");\n@@ -100,19 +124,14 @@ public static void main(String[] args) throws IOException, InterruptedException\n \n         app.run(args);\n \n-        try {\n-            Thread.sleep(1000);\n-        } catch (InterruptedException e) {\n-            Thread.currentThread().interrupt();\n-            throw new RuntimeException(\"Thread interrupted while sleeping\", e);\n-        }\n-\n+        // Ensure directories are created\n         try {\n             Files.createDirectories(Path.of(\"customFiles/static/\"));\n             Files.createDirectories(Path.of(\"customFiles/templates/\"));\n         } catch (Exception e) {\n             logger.error(\"Error creating directories: {}\", e.getMessage());\n         }\n+\n         printStartupLogs();\n     }\n \n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/web/ConverterWebController.java b/src/main/java/stirling/software/SPDF/controller/web/ConverterWebController.java\n--- a/src/main/java/stirling/software/SPDF/controller/web/ConverterWebController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/web/ConverterWebController.java\n@@ -15,7 +15,7 @@\n @Tag(name = \"Convert\", description = \"Convert APIs\")\n public class ConverterWebController {\n \n-    @ConditionalOnExpression(\"#{bookAndHtmlFormatsInstalled}\")\n+    @ConditionalOnExpression(\"${bookAndHtmlFormatsInstalled}\")\n     @GetMapping(\"/book-to-pdf\")\n     @Hidden\n     public String convertBookToPdfForm(Model model) {\n@@ -60,7 +60,7 @@ public String convertToPdfForm(Model model) {\n \n     // PDF TO......\n \n-    @ConditionalOnExpression(\"#{bookAndHtmlFormatsInstalled}\")\n+    @ConditionalOnExpression(\"${bookAndHtmlFormatsInstalled}\")\n     @GetMapping(\"/pdf-to-book\")\n     @Hidden\n     public String convertPdfToBookForm(Model model) {",
    "output": "Added functionality to use the next available port (#1913)\n\n* Added [Feature Request]: command flag to use the next available port #1882\r\n\r\n* Added [Feature Request]: command flag to use the next available port #1882\r\n\r\n* minor changes - build successful\r\n\r\n* Update: port finding starts from 0 instead of default 8080 port\r\n\r\n* Update: port finding starts from 0 instead of default 8080 port\r\n\r\n---------\r\n\r\nCo-authored-by: Anthony Stirling <77850077+Frooodle@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/misc/ExtractImagesController.java b/src/main/java/stirling/software/SPDF/controller/api/misc/ExtractImagesController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/misc/ExtractImagesController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/misc/ExtractImagesController.java\n@@ -90,22 +90,35 @@ public ResponseEntity<byte[]> extractImages(@ModelAttribute PDFExtractImagesRequ\n             // Iterate over each page\n             for (int pgNum = 0; pgNum < document.getPages().getCount(); pgNum++) {\n                 PDPage page = document.getPage(pgNum);\n-                int pageNum = document.getPages().indexOf(page) + 1;\n-                // Submit a task for processing each page\n                 Future<Void> future =\n                         executor.submit(\n                                 () -> {\n-                                    extractImagesFromPage(\n-                                            page,\n-                                            format,\n-                                            filename,\n-                                            pageNum,\n-                                            processedImages,\n-                                            zos,\n-                                            allowDuplicates);\n-                                    return null;\n+                                    // Use the page number directly from the iterator, so no need to\n+                                    // calculate manually\n+                                    int pageNum = document.getPages().indexOf(page) + 1;\n+\n+                                    try {\n+                                        // Call the image extraction method for each page\n+                                        extractImagesFromPage(\n+                                                page,\n+                                                format,\n+                                                filename,\n+                                                pageNum,\n+                                                processedImages,\n+                                                zos,\n+                                                allowDuplicates);\n+                                    } catch (IOException e) {\n+                                        // Log the error and continue processing other pages\n+                                        logger.error(\n+                                                \"Error extracting images from page {}: {}\",\n+                                                pageNum,\n+                                                e.getMessage());\n+                                    }\n+\n+                                    return null; // Callable requires a return type\n                                 });\n \n+                // Add the Future object to the list to track completion\n                 futures.add(future);\n             }\n ",
    "output": "fixed colorspace array exception (#1925)\n\n* fixed colorspace array exception\n\n* used lsf4j logger instead of prntln\n\n* removed unnecessary comment"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertPDFToPDFA.java b/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertPDFToPDFA.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertPDFToPDFA.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertPDFToPDFA.java\n@@ -1,22 +1,15 @@\n package stirling.software.SPDF.controller.api.converters;\n \n-import java.io.ByteArrayOutputStream;\n import java.io.FileOutputStream;\n import java.io.OutputStream;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.util.ArrayList;\n import java.util.List;\n-import java.util.stream.Collectors;\n \n-import org.apache.pdfbox.pdmodel.PDDocument;\n-import org.apache.pdfbox.pdmodel.PDDocumentCatalog;\n-import org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm;\n-import org.apache.pdfbox.pdmodel.interactive.form.PDField;\n-import org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n import org.springframework.web.bind.annotation.ModelAttribute;\n import org.springframework.web.bind.annotation.PostMapping;\n@@ -29,7 +22,6 @@\n import io.swagger.v3.oas.annotations.tags.Tag;\n \n import stirling.software.SPDF.model.api.converters.PdfToPdfARequest;\n-import stirling.software.SPDF.service.CustomPDDocumentFactory;\n import stirling.software.SPDF.utils.ProcessExecutor;\n import stirling.software.SPDF.utils.ProcessExecutor.ProcessExecutorResult;\n import stirling.software.SPDF.utils.WebResponseUtils;\n@@ -41,13 +33,6 @@ public class ConvertPDFToPDFA {\n \n     private static final Logger logger = LoggerFactory.getLogger(ConvertPDFToPDFA.class);\n \n-    private final CustomPDDocumentFactory pdfDocumentFactory;\n-\n-    @Autowired\n-    public ConvertPDFToPDFA(CustomPDDocumentFactory pdfDocumentFactory) {\n-        this.pdfDocumentFactory = pdfDocumentFactory;\n-    }\n-\n     @PostMapping(consumes = \"multipart/form-data\", value = \"/pdf/pdfa\")\n     @Operation(\n             summary = \"Convert a PDF to a PDF/A\",\n@@ -61,32 +46,7 @@ public ResponseEntity<byte[]> pdfToPdfA(@ModelAttribute PdfToPdfARequest request\n         // Convert MultipartFile to byte[]\n         byte[] pdfBytes = inputFile.getBytes();\n \n-        // Load the PDF document\n-        PDDocument document = pdfDocumentFactory.load(pdfBytes);\n-\n-        // Get the document catalog\n-        PDDocumentCatalog catalog = document.getDocumentCatalog();\n-\n-        // Get the AcroForm\n-        PDAcroForm acroForm = catalog.getAcroForm();\n-        if (acroForm != null) {\n-            // Remove signature fields safely\n-            List<PDField> fieldsToRemove =\n-                    acroForm.getFields().stream()\n-                            .filter(field -> field instanceof PDSignatureField)\n-                            .collect(Collectors.toList());\n-\n-            if (!fieldsToRemove.isEmpty()) {\n-                acroForm.flatten(fieldsToRemove, false);\n-\n-                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-                document.save(baos);\n-                pdfBytes = baos.toByteArray();\n-            }\n-        }\n-        document.close();\n-\n-        // Save the uploaded (and possibly modified) file to a temporary location\n+        // Save the uploaded file to a temporary location\n         Path tempInputFile = Files.createTempFile(\"input_\", \".pdf\");\n         try (OutputStream outputStream = new FileOutputStream(tempInputFile.toFile())) {\n             outputStream.write(pdfBytes);\n@@ -95,28 +55,37 @@ public ResponseEntity<byte[]> pdfToPdfA(@ModelAttribute PdfToPdfARequest request\n         // Prepare the output file path\n         Path tempOutputFile = Files.createTempFile(\"output_\", \".pdf\");\n \n-        // Prepare the OCRmyPDF command\n+        // Prepare the ghostscript command\n         List<String> command = new ArrayList<>();\n-        command.add(\"ocrmypdf\");\n-        command.add(\"--skip-text\");\n-        command.add(\"--tesseract-timeout=0\");\n-        command.add(\"--output-type\");\n-        command.add(outputFormat.toString());\n-        command.add(tempInputFile.toString());\n+        command.add(\"gs\");\n+        command.add(\"-dPDFA=\" + (\"pdfa\".equals(outputFormat) ? \"2\" : \"1\"));\n+        command.add(\"-dNOPAUSE\");\n+        command.add(\"-dBATCH\");\n+        command.add(\"-sColorConversionStrategy=UseDeviceIndependentColor\");\n+        command.add(\"-sDEVICE=pdfwrite\");\n+        command.add(\"-dPDFACompatibilityPolicy=2\");\n+        command.add(\"-o\");\n         command.add(tempOutputFile.toString());\n+        command.add(tempInputFile.toString());\n \n         ProcessExecutorResult returnCode =\n-                ProcessExecutor.getInstance(ProcessExecutor.Processes.OCR_MY_PDF)\n+                ProcessExecutor.getInstance(ProcessExecutor.Processes.GHOSTSCRIPT)\n                         .runCommandWithOutputHandling(command);\n \n+        if (returnCode.getRc() != 0) {\n+            logger.info(\n+                    outputFormat + \" conversion failed with return code: \" + returnCode.getRc());\n+        }\n+\n         try {\n-            PDDocument doc = pdfDocumentFactory.load(tempOutputFile.toFile());\n+            byte[] pdfBytesOutput = Files.readAllBytes(tempOutputFile);\n             // Return the optimized PDF as a response\n             String outputFilename =\n                     Filenames.toSimpleFileName(inputFile.getOriginalFilename())\n                                     .replaceFirst(\"[.][^.]+$\", \"\")\n                             + \"_PDFA.pdf\";\n-            return WebResponseUtils.pdfDocToWebResponse(doc, outputFilename);\n+            return WebResponseUtils.bytesToWebResponse(\n+                    pdfBytesOutput, outputFilename, MediaType.APPLICATION_PDF);\n         } finally {\n             // Clean up the temporary files\n             Files.deleteIfExists(tempInputFile);",
    "output": "Fix pdfa conversion (#1907)\n\n* fix: use gs to convert to pdfa and return output by reading file as bytes\r\n\r\n* feat: update translation files for pdfToPDFA.credit\r\n\r\n* Hardening suggestions for Stirling-PDF / fix_pdfa_conversion (#1908)\r\n\r\nSwitch order of literals to prevent NullPointerException\r\n\r\nCo-authored-by: pixeebot[bot] <104101892+pixeebot[bot]@users.noreply.github.com>\r\n\r\n---------\r\n\r\nCo-authored-by: pixeebot[bot] <104101892+pixeebot[bot]@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/UserAuthenticationFilter.java b/src/main/java/stirling/software/SPDF/config/security/UserAuthenticationFilter.java\n--- a/src/main/java/stirling/software/SPDF/config/security/UserAuthenticationFilter.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/UserAuthenticationFilter.java\n@@ -159,7 +159,7 @@ protected boolean shouldNotFilter(HttpServletRequest request) throws ServletExce\n         };\n \n         for (String pattern : permitAllPatterns) {\n-            if (uri.startsWith(pattern) || uri.endsWith(\".svg\")) {\n+            if (uri.startsWith(pattern) || uri.endsWith(\".svg\") || uri.endsWith(\".png\") || uri.endsWith(\".ico\")) {\n                 return true;\n             }\n         }\n\ndiff --git a/src/main/java/stirling/software/SPDF/utils/RequestUriUtils.java b/src/main/java/stirling/software/SPDF/utils/RequestUriUtils.java\n--- a/src/main/java/stirling/software/SPDF/utils/RequestUriUtils.java\n+++ b/src/main/java/stirling/software/SPDF/utils/RequestUriUtils.java\n@@ -4,16 +4,7 @@ public class RequestUriUtils {\n \n     public static boolean isStaticResource(String requestURI) {\n \n-        return requestURI.startsWith(\"/css/\")\n-                || requestURI.startsWith(\"/fonts/\")\n-                || requestURI.startsWith(\"/js/\")\n-                || requestURI.startsWith(\"/images/\")\n-                || requestURI.startsWith(\"/public/\")\n-                || requestURI.startsWith(\"/pdfjs/\")\n-                || requestURI.startsWith(\"/pdfjs-legacy/\")\n-                || requestURI.endsWith(\".svg\")\n-                || requestURI.endsWith(\".webmanifest\")\n-                || requestURI.startsWith(\"/api/v1/info/status\");\n+        return isStaticResource(\"\", requestURI);\n     }\n \n     public static boolean isStaticResource(String contextPath, String requestURI) {\n@@ -24,7 +15,10 @@ public static boolean isStaticResource(String contextPath, String requestURI) {\n                 || requestURI.startsWith(contextPath + \"/images/\")\n                 || requestURI.startsWith(contextPath + \"/public/\")\n                 || requestURI.startsWith(contextPath + \"/pdfjs/\")\n+                || requestURI.startsWith(contextPath + \"/login\")\n                 || requestURI.endsWith(\".svg\")\n+                || requestURI.endsWith(\".png\")\n+                || requestURI.endsWith(\".ico\")\n                 || requestURI.endsWith(\".webmanifest\")\n                 || requestURI.startsWith(contextPath + \"/api/v1/info/status\");\n     }\n\ndiff --git a/src/test/java/stirling/software/SPDF/utils/RequestUriUtilsTest.java b/src/test/java/stirling/software/SPDF/utils/RequestUriUtilsTest.java\n--- a/src/test/java/stirling/software/SPDF/utils/RequestUriUtilsTest.java\n+++ b/src/test/java/stirling/software/SPDF/utils/RequestUriUtilsTest.java\n@@ -19,7 +19,7 @@ public void testIsStaticResource() {\n         assertFalse(RequestUriUtils.isStaticResource(\"/api/v1/users\"));\n         assertFalse(RequestUriUtils.isStaticResource(\"/api/v1/orders\"));\n         assertFalse(RequestUriUtils.isStaticResource(\"/\"));\n-        assertFalse(RequestUriUtils.isStaticResource(\"/login\"));\n+        assertTrue(RequestUriUtils.isStaticResource(\"/login\"));\n         assertFalse(RequestUriUtils.isStaticResource(\"/register\"));\n         assertFalse(RequestUriUtils.isStaticResource(\"/api/v1/products\"));\n     }",
    "output": "Minor fixes stopping invalid sessions (#1850)\n\n* Update UserAuthenticationFilter.java\r\n\r\n* Update RequestUriUtils.java\r\n\r\n* Update RequestUriUtils.java\r\n\r\n* Update RequestUriUtilsTest.java"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/ScalePagesController.java b/src/main/java/stirling/software/SPDF/controller/api/ScalePagesController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/ScalePagesController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/ScalePagesController.java\n@@ -47,30 +47,11 @@ public ResponseEntity<byte[]> scalePages(@ModelAttribute ScalePagesRequest reque\n         String targetPDRectangle = request.getPageSize();\n         float scaleFactor = request.getScaleFactor();\n \n-        Map<String, PDRectangle> sizeMap = new HashMap<>();\n-        // Add A0 - A10\n-        sizeMap.put(\"A0\", PDRectangle.A0);\n-        sizeMap.put(\"A1\", PDRectangle.A1);\n-        sizeMap.put(\"A2\", PDRectangle.A2);\n-        sizeMap.put(\"A3\", PDRectangle.A3);\n-        sizeMap.put(\"A4\", PDRectangle.A4);\n-        sizeMap.put(\"A5\", PDRectangle.A5);\n-        sizeMap.put(\"A6\", PDRectangle.A6);\n-\n-        // Add other sizes\n-        sizeMap.put(\"LETTER\", PDRectangle.LETTER);\n-        sizeMap.put(\"LEGAL\", PDRectangle.LEGAL);\n-\n-        if (!sizeMap.containsKey(targetPDRectangle)) {\n-            throw new IllegalArgumentException(\n-                    \"Invalid PDRectangle. It must be one of the following: A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10\");\n-        }\n-\n-        PDRectangle targetSize = sizeMap.get(targetPDRectangle);\n-\n         PDDocument sourceDocument = Loader.loadPDF(file.getBytes());\n         PDDocument outputDocument = new PDDocument();\n \n+        PDRectangle targetSize = getTargetSize(targetPDRectangle, sourceDocument);\n+\n         int totalPages = sourceDocument.getNumberOfPages();\n         for (int i = 0; i < totalPages; i++) {\n             PDPage sourcePage = sourceDocument.getPage(i);\n@@ -116,4 +97,45 @@ public ResponseEntity<byte[]> scalePages(@ModelAttribute ScalePagesRequest reque\n                 Filenames.toSimpleFileName(file.getOriginalFilename()).replaceFirst(\"[.][^.]+$\", \"\")\n                         + \"_scaled.pdf\");\n     }\n+\n+    private PDRectangle getTargetSize(String targetPDRectangle, PDDocument sourceDocument) {\n+        if (targetPDRectangle.equals(\"KEEP\")) {\n+            if (sourceDocument.getNumberOfPages() == 0) {\n+                return null;\n+            }\n+\n+            // use the first page to determine the target page size\n+            PDPage sourcePage = sourceDocument.getPage(0);\n+            PDRectangle sourceSize = sourcePage.getMediaBox();\n+\n+            return sourceSize;\n+        }\n+\n+        Map<String, PDRectangle> sizeMap = getSizeMap();\n+\n+        if (sizeMap.containsKey(targetPDRectangle)) {\n+            return sizeMap.get(targetPDRectangle);\n+        }\n+\n+        throw new IllegalArgumentException(\n+                \"Invalid PDRectangle. It must be one of the following: A0, A1, A2, A3, A4, A5, A6, LETTER, LEGAL, KEEP\");\n+    }\n+\n+    private Map<String, PDRectangle> getSizeMap() {\n+        Map<String, PDRectangle> sizeMap = new HashMap<>();\n+        // Add A0 - A6\n+        sizeMap.put(\"A0\", PDRectangle.A0);\n+        sizeMap.put(\"A1\", PDRectangle.A1);\n+        sizeMap.put(\"A2\", PDRectangle.A2);\n+        sizeMap.put(\"A3\", PDRectangle.A3);\n+        sizeMap.put(\"A4\", PDRectangle.A4);\n+        sizeMap.put(\"A5\", PDRectangle.A5);\n+        sizeMap.put(\"A6\", PDRectangle.A6);\n+\n+        // Add other sizes\n+        sizeMap.put(\"LETTER\", PDRectangle.LETTER);\n+        sizeMap.put(\"LEGAL\", PDRectangle.LEGAL);\n+\n+        return sizeMap;\n+    }\n }\n\ndiff --git a/src/main/java/stirling/software/SPDF/model/api/PDFWithPageSize.java b/src/main/java/stirling/software/SPDF/model/api/PDFWithPageSize.java\n--- a/src/main/java/stirling/software/SPDF/model/api/PDFWithPageSize.java\n+++ b/src/main/java/stirling/software/SPDF/model/api/PDFWithPageSize.java\n@@ -11,7 +11,7 @@ public class PDFWithPageSize extends PDFFile {\n \n     @Schema(\n             description =\n-                    \"The scale of pages in the output PDF. Acceptable values are A0-A6, LETTER, LEGAL.\",\n-            allowableValues = {\"A0\", \"A1\", \"A2\", \"A3\", \"A4\", \"A5\", \"A6\", \"LETTER\", \"LEGAL\"})\n+                    \"The scale of pages in the output PDF. Acceptable values are A0-A6, LETTER, LEGAL, KEEP.\",\n+            allowableValues = {\"A0\", \"A1\", \"A2\", \"A3\", \"A4\", \"A5\", \"A6\", \"LETTER\", \"LEGAL\", \"KEEP\"})\n     private String pageSize;\n }",
    "output": "Page Scale:  add pageSize KEEP  #1798 (#1800)\n\n* add `scalePages.keepPageSize` i18n key (#1798)\r\n\r\n* add KEEP option to frontend (#1798)\r\n\r\n* extract ScalePagesController.getTargetSize() (#1798)\r\n\r\n* make ScalePageController honor `pageSize` value `KEEP`\r\n\r\n* PR feedback: make caption shorter, avoid unnecessary verbosity (#1798)\r\n\r\n* Update messages_ar_AR.properties\r\n\r\n---------\r\n\r\nCo-authored-by: Anthony Stirling <77850077+Frooodle@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/repository/UserRepository.java b/src/main/java/stirling/software/SPDF/repository/UserRepository.java\n--- a/src/main/java/stirling/software/SPDF/repository/UserRepository.java\n+++ b/src/main/java/stirling/software/SPDF/repository/UserRepository.java\n@@ -4,6 +4,7 @@\n \n import org.springframework.data.jpa.repository.JpaRepository;\n import org.springframework.data.jpa.repository.Query;\n+import org.springframework.data.repository.query.Param;\n import org.springframework.stereotype.Repository;\n \n import stirling.software.SPDF.model.User;\n@@ -13,7 +14,8 @@ public interface UserRepository extends JpaRepository<User, Long> {\n     Optional<User> findByUsernameIgnoreCase(String username);\n \n     @Query(\"FROM User u LEFT JOIN FETCH u.settings where upper(u.username) = upper(:username)\")\n-    Optional<User> findByUsernameIgnoreCaseWithSettings(String username);\n+    Optional<User> findByUsernameIgnoreCaseWithSettings(@Param(\"username\") String username);\n+\n \n     Optional<User> findByUsername(String username);\n ",
    "output": "Footer link to Stirlingpdf.com (#1827)\n\n* fix\r\n\r\n* remove donate\r\n\r\n* Footer to have link to website\r\n\r\n---------\r\n\r\nCo-authored-by: a <a>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/SPdfApplication.java b/src/main/java/stirling/software/SPDF/SPdfApplication.java\n--- a/src/main/java/stirling/software/SPDF/SPdfApplication.java\n+++ b/src/main/java/stirling/software/SPDF/SPdfApplication.java\n@@ -31,6 +31,7 @@ public class SPdfApplication {\n \n     @Autowired private Environment env;\n \n+\n     @Autowired ApplicationProperties applicationProperties;\n \n     private static String serverPortStatic;\n\ndiff --git a/src/main/java/stirling/software/SPDF/config/security/UserService.java b/src/main/java/stirling/software/SPDF/config/security/UserService.java\n--- a/src/main/java/stirling/software/SPDF/config/security/UserService.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/UserService.java\n@@ -1,5 +1,9 @@\n package stirling.software.SPDF.config.security;\n \n+import java.io.IOException;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.MessageSource;\n import org.springframework.context.i18n.LocaleContextHolder;\n@@ -13,6 +17,7 @@\n import org.springframework.security.crypto.password.PasswordEncoder;\n import org.springframework.security.oauth2.core.user.OAuth2User;\n import org.springframework.stereotype.Service;\n+\n import stirling.software.SPDF.config.DatabaseBackupInterface;\n import stirling.software.SPDF.config.security.session.SessionPersistentRegistry;\n import stirling.software.SPDF.controller.api.pipeline.UserServiceInterface;\n@@ -23,10 +28,6 @@\n import stirling.software.SPDF.repository.AuthorityRepository;\n import stirling.software.SPDF.repository.UserRepository;\n \n-import java.io.IOException;\n-import java.util.*;\n-import java.util.stream.Collectors;\n-\n @Service\n public class UserService implements UserServiceInterface {\n \n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/api/misc/PageNumbersController.java b/src/main/java/stirling/software/SPDF/controller/api/misc/PageNumbersController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/misc/PageNumbersController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/misc/PageNumbersController.java\n@@ -43,6 +43,7 @@ public class PageNumbersController {\n                     \"This operation takes an input PDF file and adds page numbers to it. Input:PDF Output:PDF Type:SISO\")\n     public ResponseEntity<byte[]> addPageNumbers(@ModelAttribute AddPageNumbersRequest request)\n             throws IOException {\n+\n         MultipartFile file = request.getFileInput();\n         String customMargin = request.getCustomMargin();\n         int position = request.getPosition();\n@@ -52,7 +53,8 @@ public ResponseEntity<byte[]> addPageNumbers(@ModelAttribute AddPageNumbersReque\n         int pageNumber = startingNumber;\n         byte[] fileBytes = file.getBytes();\n         PDDocument document = Loader.loadPDF(fileBytes);\n-\n+        float font_size = request.getFontSize();\n+        String font_type = request.getFontType();\n         float marginFactor;\n         switch (customMargin.toLowerCase()) {\n             case \"small\":\n@@ -73,7 +75,7 @@ public ResponseEntity<byte[]> addPageNumbers(@ModelAttribute AddPageNumbersReque\n                 break;\n         }\n \n-        float fontSize = 12.0f;\n+        float fontSize = font_size;\n         if (pagesToNumber == null || pagesToNumber.length() == 0) {\n             pagesToNumber = \"all\";\n         }\n@@ -131,7 +133,20 @@ public ResponseEntity<byte[]> addPageNumbers(@ModelAttribute AddPageNumbersReque\n                     new PDPageContentStream(\n                             document, page, PDPageContentStream.AppendMode.APPEND, true, true);\n             contentStream.beginText();\n-            contentStream.setFont(new PDType1Font(Standard14Fonts.FontName.HELVETICA), fontSize);\n+            switch (font_type.toLowerCase()) {\n+                case \"helvetica\":\n+                    contentStream.setFont(\n+                            new PDType1Font(Standard14Fonts.FontName.HELVETICA), fontSize);\n+                    break;\n+                case \"courier\":\n+                    contentStream.setFont(\n+                            new PDType1Font(Standard14Fonts.FontName.COURIER), fontSize);\n+                    break;\n+                case \"times\":\n+                    contentStream.setFont(\n+                            new PDType1Font(Standard14Fonts.FontName.TIMES_ROMAN), fontSize);\n+                    break;\n+            }\n             contentStream.newLineAtOffset(x, y);\n             contentStream.showText(text);\n             contentStream.endText();\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/web/AccountWebController.java b/src/main/java/stirling/software/SPDF/controller/web/AccountWebController.java\n--- a/src/main/java/stirling/software/SPDF/controller/web/AccountWebController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/web/AccountWebController.java\n@@ -1,10 +1,10 @@\n package stirling.software.SPDF.controller.web;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import io.swagger.v3.oas.annotations.tags.Tag;\n-import jakarta.servlet.http.HttpServletRequest;\n-import lombok.extern.slf4j.Slf4j;\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.security.core.Authentication;\n@@ -13,6 +13,14 @@\n import org.springframework.stereotype.Controller;\n import org.springframework.ui.Model;\n import org.springframework.web.bind.annotation.GetMapping;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+import io.swagger.v3.oas.annotations.tags.Tag;\n+\n+import jakarta.servlet.http.HttpServletRequest;\n+import lombok.extern.slf4j.Slf4j;\n import stirling.software.SPDF.config.security.session.SessionPersistentRegistry;\n import stirling.software.SPDF.model.*;\n import stirling.software.SPDF.model.ApplicationProperties.Security.OAUTH2;\n@@ -22,11 +30,6 @@\n import stirling.software.SPDF.model.provider.KeycloakProvider;\n import stirling.software.SPDF.repository.UserRepository;\n \n-import java.time.Instant;\n-import java.time.temporal.ChronoUnit;\n-import java.util.*;\n-import java.util.stream.Collectors;\n-\n @Controller\n @Slf4j\n @Tag(name = \"Account Security\", description = \"Account Security APIs\")\n\ndiff --git a/src/main/java/stirling/software/SPDF/model/User.java b/src/main/java/stirling/software/SPDF/model/User.java\n--- a/src/main/java/stirling/software/SPDF/model/User.java\n+++ b/src/main/java/stirling/software/SPDF/model/User.java\n@@ -1,14 +1,14 @@\n package stirling.software.SPDF.model;\n \n-import jakarta.persistence.*;\n-\n import java.io.Serializable;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n import java.util.stream.Collectors;\n \n+import jakarta.persistence.*;\n+\n @Entity\n @Table(name = \"users\")\n public class User implements Serializable {\n\ndiff --git a/src/main/java/stirling/software/SPDF/model/api/misc/AddPageNumbersRequest.java b/src/main/java/stirling/software/SPDF/model/api/misc/AddPageNumbersRequest.java\n--- a/src/main/java/stirling/software/SPDF/model/api/misc/AddPageNumbersRequest.java\n+++ b/src/main/java/stirling/software/SPDF/model/api/misc/AddPageNumbersRequest.java\n@@ -15,6 +15,9 @@ public class AddPageNumbersRequest extends PDFWithPageNums {\n             allowableValues = {\"small\", \"medium\", \"large\"})\n     private String customMargin;\n \n+    private float fontSize;\n+    private String fontType;\n+\n     @Schema(description = \"Position: 1 of 9 positions\", minimum = \"1\", maximum = \"9\")\n     private int position;\n \n\ndiff --git a/src/main/java/stirling/software/SPDF/repository/UserRepository.java b/src/main/java/stirling/software/SPDF/repository/UserRepository.java\n--- a/src/main/java/stirling/software/SPDF/repository/UserRepository.java\n+++ b/src/main/java/stirling/software/SPDF/repository/UserRepository.java\n@@ -1,11 +1,12 @@\n package stirling.software.SPDF.repository;\n \n+import java.util.Optional;\n+\n import org.springframework.data.jpa.repository.JpaRepository;\n import org.springframework.data.jpa.repository.Query;\n import org.springframework.stereotype.Repository;\n-import stirling.software.SPDF.model.User;\n \n-import java.util.Optional;\n+import stirling.software.SPDF.model.User;\n \n @Repository\n public interface UserRepository extends JpaRepository<User, Long> {\n\ndiff --git a/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java b/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java\n--- a/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java\n+++ b/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java\n@@ -262,5 +262,4 @@ public static boolean createDir(String path) {\n         }\n         return true;\n     }\n-\n }",
    "output": "Added functionality to set font size and font type in both frontend and backend. (#1783)\n\n* Added variables\r\n\r\n* Added functionality to add font size and font type in both frontend and backend\r\n\r\n* new changes suggested has been added\r\n\r\n---------\r\n\r\nCo-authored-by: Anthony Stirling <77850077+Frooodle@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/database/DatabaseBackupHelper.java b/src/main/java/stirling/software/SPDF/config/security/database/DatabaseBackupHelper.java\n--- a/src/main/java/stirling/software/SPDF/config/security/database/DatabaseBackupHelper.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/database/DatabaseBackupHelper.java\n@@ -163,6 +163,10 @@ public String getH2Version() {\n \n     // Deletes a backup file.\n     public boolean deleteBackupFile(String fileName) throws IOException {\n+        if (!isValidFileName(fileName)) {\n+            log.error(\"Invalid file name: {}\", fileName);\n+            return false;\n+        }\n         Path filePath = this.getBackupFilePath(fileName);\n         if (Files.deleteIfExists(filePath)) {\n             log.info(\"Deleted backup file: {}\", fileName);\n@@ -175,7 +179,11 @@ public boolean deleteBackupFile(String fileName) throws IOException {\n \n     // Gets the Path object for a given backup file name.\n     public Path getBackupFilePath(String fileName) {\n-        return Paths.get(backupPath.toString(), fileName);\n+        Path filePath = Paths.get(backupPath.toString(), fileName).normalize();\n+        if (!filePath.startsWith(backupPath)) {\n+            throw new SecurityException(\"Path traversal detected\");\n+        }\n+        return filePath;\n     }\n \n     private boolean executeDatabaseScript(Path scriptPath) {\n@@ -202,4 +210,19 @@ private void ensureBackupDirectoryExists() {\n             }\n         }\n     }\n+\n+    private boolean isValidFileName(String fileName) {\n+        // Check for invalid characters or sequences\n+        return fileName != null\n+                && !fileName.contains(\"..\")\n+                && !fileName.contains(\"/\")\n+                && !fileName.contains(\"\\\\\")\n+                && !fileName.contains(\":\")\n+                && !fileName.contains(\"*\")\n+                && !fileName.contains(\"?\")\n+                && !fileName.contains(\"\\\"\")\n+                && !fileName.contains(\"<\")\n+                && !fileName.contains(\">\")\n+                && !fileName.contains(\"|\");\n+    }\n }",
    "output": "Validates the file name (#1793)"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/misc/ExtractImagesController.java b/src/main/java/stirling/software/SPDF/controller/api/misc/ExtractImagesController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/misc/ExtractImagesController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/misc/ExtractImagesController.java\n@@ -5,6 +5,9 @@\n import java.awt.image.RenderedImage;\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Arrays;\n import java.util.HashSet;\n import java.util.Set;\n import java.util.concurrent.ExecutionException;\n@@ -36,7 +39,8 @@\n import io.swagger.v3.oas.annotations.Operation;\n import io.swagger.v3.oas.annotations.tags.Tag;\n \n-import stirling.software.SPDF.model.api.PDFWithImageFormatRequest;\n+import stirling.software.SPDF.model.api.PDFExtractImagesRequest;\n+import stirling.software.SPDF.utils.ImageProcessingUtils;\n import stirling.software.SPDF.utils.WebResponseUtils;\n \n @RestController\n@@ -51,11 +55,11 @@ public class ExtractImagesController {\n             summary = \"Extract images from a PDF file\",\n             description =\n                     \"This endpoint extracts images from a given PDF file and returns them in a zip file. Users can specify the output image format. Input: PDF Output: IMAGE/ZIP Type: SIMO\")\n-    public ResponseEntity<byte[]> extractImages(@ModelAttribute PDFWithImageFormatRequest request)\n+    public ResponseEntity<byte[]> extractImages(@ModelAttribute PDFExtractImagesRequest request)\n             throws IOException, InterruptedException, ExecutionException {\n         MultipartFile file = request.getFileInput();\n         String format = request.getFormat();\n-\n+        boolean allowDuplicates = request.isAllowDuplicates();\n         System.out.println(\n                 System.currentTimeMillis() + \" file=\" + file.getName() + \", format=\" + format);\n         PDDocument document = Loader.loadPDF(file.getBytes());\n@@ -75,7 +79,7 @@ public ResponseEntity<byte[]> extractImages(@ModelAttribute PDFWithImageFormatRe\n         String filename =\n                 Filenames.toSimpleFileName(file.getOriginalFilename())\n                         .replaceFirst(\"[.][^.]+$\", \"\");\n-        Set<Integer> processedImages = new HashSet<>();\n+        Set<byte[]> processedImages = new HashSet<>();\n \n         if (useMultithreading) {\n             // Executor service to handle multithreading\n@@ -92,7 +96,13 @@ public ResponseEntity<byte[]> extractImages(@ModelAttribute PDFWithImageFormatRe\n                         executor.submit(\n                                 () -> {\n                                     extractImagesFromPage(\n-                                            page, format, filename, pageNum, processedImages, zos);\n+                                            page,\n+                                            format,\n+                                            filename,\n+                                            pageNum,\n+                                            processedImages,\n+                                            zos,\n+                                            allowDuplicates);\n                                     return null;\n                                 });\n \n@@ -110,7 +120,8 @@ public ResponseEntity<byte[]> extractImages(@ModelAttribute PDFWithImageFormatRe\n             // Single-threaded extraction\n             for (int pgNum = 0; pgNum < document.getPages().getCount(); pgNum++) {\n                 PDPage page = document.getPage(pgNum);\n-                extractImagesFromPage(page, format, filename, pgNum + 1, processedImages, zos);\n+                extractImagesFromPage(\n+                        page, format, filename, pgNum + 1, processedImages, zos, allowDuplicates);\n             }\n         }\n \n@@ -137,21 +148,34 @@ private void extractImagesFromPage(\n             String format,\n             String filename,\n             int pageNum,\n-            Set<Integer> processedImages,\n-            ZipOutputStream zos)\n+            Set<byte[]> processedImages,\n+            ZipOutputStream zos,\n+            boolean allowDuplicates)\n             throws IOException {\n+        MessageDigest md;\n+        try {\n+            md = MessageDigest.getInstance(\"MD5\");\n+        } catch (NoSuchAlgorithmException e) {\n+            logger.error(\"MD5 algorithm not available for extractImages hash.\", e);\n+            return;\n+        }\n         if (page.getResources() == null || page.getResources().getXObjectNames() == null) {\n             return;\n         }\n+        int count = 1;\n         for (COSName name : page.getResources().getXObjectNames()) {\n             if (page.getResources().isImageXObject(name)) {\n                 PDImageXObject image = (PDImageXObject) page.getResources().getXObject(name);\n-                int imageHash = image.hashCode();\n-                synchronized (processedImages) {\n-                    if (processedImages.contains(imageHash)) {\n-                        continue; // Skip already processed images\n+                if (!allowDuplicates) {\n+                    byte[] data = ImageProcessingUtils.getImageData(image.getImage());\n+                    byte[] imageHash = md.digest(data);\n+                    synchronized (processedImages) {\n+                        if (processedImages.stream()\n+                                .anyMatch(hash -> Arrays.equals(hash, imageHash))) {\n+                            continue; // Skip already processed images\n+                        }\n+                        processedImages.add(imageHash);\n                     }\n-                    processedImages.add(imageHash);\n                 }\n \n                 RenderedImage renderedImage = image.getImage();\n@@ -160,7 +184,7 @@ private void extractImagesFromPage(\n                 BufferedImage bufferedImage = convertToRGB(renderedImage, format);\n \n                 // Write image to zip file\n-                String imageName = filename + \"_\" + imageHash + \" (Page \" + pageNum + \").\" + format;\n+                String imageName = filename + \"_page_\" + pageNum + \"_\" + count++ + \".\" + format;\n                 synchronized (zos) {\n                     zos.putNextEntry(new ZipEntry(imageName));\n                     ByteArrayOutputStream imageBaos = new ByteArrayOutputStream();\n\ndiff --git a/src/main/java/stirling/software/SPDF/model/api/PDFExtractImagesRequest.java b/src/main/java/stirling/software/SPDF/model/api/PDFExtractImagesRequest.java\n--- a/src/main/java/stirling/software/SPDF/model/api/PDFExtractImagesRequest.java\n+++ b/src/main/java/stirling/software/SPDF/model/api/PDFExtractImagesRequest.java\n@@ -0,0 +1,16 @@\n+package stirling.software.SPDF.model.api;\n+\n+import io.swagger.v3.oas.annotations.media.Schema;\n+\n+import lombok.Data;\n+import lombok.EqualsAndHashCode;\n+\n+@Data\n+@EqualsAndHashCode(callSuper = true)\n+public class PDFExtractImagesRequest extends PDFWithImageFormatRequest {\n+\n+    @Schema(\n+            description =\n+                    \"Boolean to enable/disable the saving of duplicate images, true to enable duplicates\")\n+    private boolean allowDuplicates;\n+}\n\ndiff --git a/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java b/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java\n--- a/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java\n+++ b/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java\n@@ -262,4 +262,5 @@ public static boolean createDir(String path) {\n         }\n         return true;\n     }\n+\n }\n\ndiff --git a/src/main/java/stirling/software/SPDF/utils/ImageProcessingUtils.java b/src/main/java/stirling/software/SPDF/utils/ImageProcessingUtils.java\n--- a/src/main/java/stirling/software/SPDF/utils/ImageProcessingUtils.java\n+++ b/src/main/java/stirling/software/SPDF/utils/ImageProcessingUtils.java\n@@ -1,6 +1,10 @@\n package stirling.software.SPDF.utils;\n \n import java.awt.image.BufferedImage;\n+import java.awt.image.DataBuffer;\n+import java.awt.image.DataBufferByte;\n+import java.awt.image.DataBufferInt;\n+import java.nio.ByteBuffer;\n \n public class ImageProcessingUtils {\n \n@@ -29,4 +33,30 @@ static BufferedImage convertColorType(BufferedImage sourceImage, String colorTyp\n         }\n         return convertedImage;\n     }\n+\n+    public static byte[] getImageData(BufferedImage image) {\n+        DataBuffer dataBuffer = image.getRaster().getDataBuffer();\n+        if (dataBuffer instanceof DataBufferByte) {\n+            return ((DataBufferByte) dataBuffer).getData();\n+        } else if (dataBuffer instanceof DataBufferInt) {\n+            int[] intData = ((DataBufferInt) dataBuffer).getData();\n+            ByteBuffer byteBuffer = ByteBuffer.allocate(intData.length * 4);\n+            byteBuffer.asIntBuffer().put(intData);\n+            return byteBuffer.array();\n+        } else {\n+            int width = image.getWidth();\n+            int height = image.getHeight();\n+            byte[] data = new byte[width * height * 3];\n+            int index = 0;\n+            for (int y = 0; y < height; y++) {\n+                for (int x = 0; x < width; x++) {\n+                    int rgb = image.getRGB(x, y);\n+                    data[index++] = (byte) ((rgb >> 16) & 0xFF); // Red\n+                    data[index++] = (byte) ((rgb >> 8) & 0xFF); // Green\n+                    data[index++] = (byte) (rgb & 0xFF); // Blue\n+                }\n+            }\n+            return data;\n+        }\n+    }\n }",
    "output": "Extract images enhancements (#1757)\n\n* fix\r\n\r\n* extarct images\r\n\r\n* langs\r\n\r\n* logging\r\n\r\n* cuke fix\r\n\r\n---------\r\n\r\nCo-authored-by: a <a>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/AppConfig.java b/src/main/java/stirling/software/SPDF/config/AppConfig.java\n--- a/src/main/java/stirling/software/SPDF/config/AppConfig.java\n+++ b/src/main/java/stirling/software/SPDF/config/AppConfig.java\n@@ -126,13 +126,12 @@ public String finishedFoldersDir() {\n     }\n \n     @Bean(name = \"directoryFilter\")\n-    public Predicate<Path> processPDFOnlyFilter() {\n+    public Predicate<Path> processOnlyFiles() {\n         return path -> {\n             if (Files.isDirectory(path)) {\n                 return !path.toString().contains(\"processing\");\n             } else {\n-                String fileName = path.getFileName().toString();\n-                return fileName.endsWith(\".pdf\");\n+                return true;\n             }\n         };\n     }",
    "output": "Fixes   #1552 and  #1554 (#1753)\n\n* fix\r\n\r\n* cleanups!\r\n\r\n* fix\r\n\r\n* fix for #1552 pipeline not accepting non pdfs\r\n\r\n* fix for #1154 font not accepting numbers etc\r\n\r\n* Update User.java\r\n\r\n---------\r\n\r\nCo-authored-by: a <a>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/misc/AutoRenameController.java b/src/main/java/stirling/software/SPDF/controller/api/misc/AutoRenameController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/misc/AutoRenameController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/misc/AutoRenameController.java\n@@ -33,7 +33,7 @@ public class AutoRenameController {\n     private static final Logger logger = LoggerFactory.getLogger(AutoRenameController.class);\n \n     private static final float TITLE_FONT_SIZE_THRESHOLD = 20.0f;\n-    private static final int LINE_LIMIT = 11;\n+    private static final int LINE_LIMIT = 200;\n \n     @PostMapping(consumes = \"multipart/form-data\", value = \"/auto-rename\")\n     @Operation(",
    "output": "Increase linecounts to check #1618 (#1752)\n\nIncrease linecounts to check #1618"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/UserService.java b/src/main/java/stirling/software/SPDF/config/security/UserService.java\n--- a/src/main/java/stirling/software/SPDF/config/security/UserService.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/UserService.java\n@@ -1,13 +1,5 @@\n package stirling.software.SPDF.config.security;\n \n-import java.io.IOException;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.Optional;\n-import java.util.UUID;\n-import java.util.stream.Collectors;\n-\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.MessageSource;\n import org.springframework.context.i18n.LocaleContextHolder;\n@@ -21,7 +13,6 @@\n import org.springframework.security.crypto.password.PasswordEncoder;\n import org.springframework.security.oauth2.core.user.OAuth2User;\n import org.springframework.stereotype.Service;\n-\n import stirling.software.SPDF.config.DatabaseBackupInterface;\n import stirling.software.SPDF.config.security.session.SessionPersistentRegistry;\n import stirling.software.SPDF.controller.api.pipeline.UserServiceInterface;\n@@ -32,6 +23,10 @@\n import stirling.software.SPDF.repository.AuthorityRepository;\n import stirling.software.SPDF.repository.UserRepository;\n \n+import java.io.IOException;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n @Service\n public class UserService implements UserServiceInterface {\n \n@@ -221,7 +216,7 @@ public boolean hasUsers() {\n \n     public void updateUserSettings(String username, Map<String, String> updates)\n             throws IOException {\n-        Optional<User> userOpt = findByUsernameIgnoreCase(username);\n+        Optional<User> userOpt = findByUsernameIgnoreCaseWithSettings(username);\n         if (userOpt.isPresent()) {\n             User user = userOpt.get();\n             Map<String, String> settingsMap = user.getSettings();\n@@ -246,6 +241,10 @@ public Optional<User> findByUsernameIgnoreCase(String username) {\n         return userRepository.findByUsernameIgnoreCase(username);\n     }\n \n+    public Optional<User> findByUsernameIgnoreCaseWithSettings(String username) {\n+        return userRepository.findByUsernameIgnoreCaseWithSettings(username);\n+    }\n+\n     public Authority findRole(User user) {\n         return authorityRepository.findByUserId(user.getId());\n     }\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/web/AccountWebController.java b/src/main/java/stirling/software/SPDF/controller/web/AccountWebController.java\n--- a/src/main/java/stirling/software/SPDF/controller/web/AccountWebController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/web/AccountWebController.java\n@@ -1,15 +1,10 @@\n package stirling.software.SPDF.controller.web;\n \n-import java.time.Instant;\n-import java.time.temporal.ChronoUnit;\n-import java.util.Date;\n-import java.util.HashMap;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Optional;\n-import java.util.stream.Collectors;\n-\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.swagger.v3.oas.annotations.tags.Tag;\n+import jakarta.servlet.http.HttpServletRequest;\n+import lombok.extern.slf4j.Slf4j;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.security.core.Authentication;\n@@ -18,27 +13,20 @@\n import org.springframework.stereotype.Controller;\n import org.springframework.ui.Model;\n import org.springframework.web.bind.annotation.GetMapping;\n-\n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n-\n-import io.swagger.v3.oas.annotations.tags.Tag;\n-\n-import jakarta.servlet.http.HttpServletRequest;\n-import lombok.extern.slf4j.Slf4j;\n import stirling.software.SPDF.config.security.session.SessionPersistentRegistry;\n-import stirling.software.SPDF.model.ApplicationProperties;\n+import stirling.software.SPDF.model.*;\n import stirling.software.SPDF.model.ApplicationProperties.Security.OAUTH2;\n import stirling.software.SPDF.model.ApplicationProperties.Security.OAUTH2.Client;\n-import stirling.software.SPDF.model.Authority;\n-import stirling.software.SPDF.model.Role;\n-import stirling.software.SPDF.model.SessionEntity;\n-import stirling.software.SPDF.model.User;\n import stirling.software.SPDF.model.provider.GithubProvider;\n import stirling.software.SPDF.model.provider.GoogleProvider;\n import stirling.software.SPDF.model.provider.KeycloakProvider;\n import stirling.software.SPDF.repository.UserRepository;\n \n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n @Controller\n @Slf4j\n @Tag(name = \"Account Security\", description = \"Account Security APIs\")\n@@ -361,7 +349,7 @@ public String account(HttpServletRequest request, Model model, Authentication au\n             if (username != null) {\n                 // Fetch user details from the database\n                 Optional<User> user =\n-                        userRepository.findByUsernameIgnoreCase(\n+                        userRepository.findByUsernameIgnoreCaseWithSettings(\n                                 username); // Assuming findByUsername method exists\n                 if (!user.isPresent()) {\n                     return \"redirect:/error\";\n\ndiff --git a/src/main/java/stirling/software/SPDF/model/User.java b/src/main/java/stirling/software/SPDF/model/User.java\n--- a/src/main/java/stirling/software/SPDF/model/User.java\n+++ b/src/main/java/stirling/software/SPDF/model/User.java\n@@ -1,27 +1,14 @@\n package stirling.software.SPDF.model;\n \n+import jakarta.persistence.*;\n+\n import java.io.Serializable;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n import java.util.stream.Collectors;\n \n-import jakarta.persistence.CascadeType;\n-import jakarta.persistence.CollectionTable;\n-import jakarta.persistence.Column;\n-import jakarta.persistence.ElementCollection;\n-import jakarta.persistence.Entity;\n-import jakarta.persistence.FetchType;\n-import jakarta.persistence.GeneratedValue;\n-import jakarta.persistence.GenerationType;\n-import jakarta.persistence.Id;\n-import jakarta.persistence.JoinColumn;\n-import jakarta.persistence.Lob;\n-import jakarta.persistence.MapKeyColumn;\n-import jakarta.persistence.OneToMany;\n-import jakarta.persistence.Table;\n-\n @Entity\n @Table(name = \"users\")\n public class User implements Serializable {\n@@ -57,7 +44,7 @@ public class User implements Serializable {\n     @OneToMany(fetch = FetchType.EAGER, cascade = CascadeType.ALL, mappedBy = \"user\")\n     private Set<Authority> authorities = new HashSet<>();\n \n-    @ElementCollection(fetch = FetchType.EAGER)\n+    @ElementCollection\n     @MapKeyColumn(name = \"setting_key\")\n     @Lob\n     @Column(name = \"setting_value\", columnDefinition = \"CLOB\")\n\ndiff --git a/src/main/java/stirling/software/SPDF/repository/UserRepository.java b/src/main/java/stirling/software/SPDF/repository/UserRepository.java\n--- a/src/main/java/stirling/software/SPDF/repository/UserRepository.java\n+++ b/src/main/java/stirling/software/SPDF/repository/UserRepository.java\n@@ -1,16 +1,19 @@\n package stirling.software.SPDF.repository;\n \n-import java.util.Optional;\n-\n import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.data.jpa.repository.Query;\n import org.springframework.stereotype.Repository;\n-\n import stirling.software.SPDF.model.User;\n \n+import java.util.Optional;\n+\n @Repository\n public interface UserRepository extends JpaRepository<User, Long> {\n     Optional<User> findByUsernameIgnoreCase(String username);\n \n+    @Query(\"FROM User u LEFT JOIN FETCH u.settings where upper(u.username) = upper(:username)\")\n+    Optional<User> findByUsernameIgnoreCaseWithSettings(String username);\n+\n     Optional<User> findByUsername(String username);\n \n     Optional<User> findByApiKey(String apiKey);",
    "output": "Fixes LazyInitializationException in User entity (#1749)\n\nTemp integration of playground dist files of pdfme as-is to investigate the result"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/LoginAttemptService.java b/src/main/java/stirling/software/SPDF/config/security/LoginAttemptService.java\n--- a/src/main/java/stirling/software/SPDF/config/security/LoginAttemptService.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/LoginAttemptService.java\n@@ -7,36 +7,45 @@\n import org.springframework.stereotype.Service;\n \n import jakarta.annotation.PostConstruct;\n+import lombok.extern.slf4j.Slf4j;\n import stirling.software.SPDF.model.ApplicationProperties;\n import stirling.software.SPDF.model.AttemptCounter;\n \n @Service\n+@Slf4j\n public class LoginAttemptService {\n \n-    @Autowired ApplicationProperties applicationProperties;\n+    @Autowired private ApplicationProperties applicationProperties;\n \n     private int MAX_ATTEMPT;\n     private long ATTEMPT_INCREMENT_TIME;\n     private ConcurrentHashMap<String, AttemptCounter> attemptsCache;\n+    private boolean isBlockedEnabled = true;\n \n     @PostConstruct\n     public void init() {\n         MAX_ATTEMPT = applicationProperties.getSecurity().getLoginAttemptCount();\n+        if (MAX_ATTEMPT == -1) {\n+            isBlockedEnabled = false;\n+            log.info(\"Login attempt tracking is disabled.\");\n+        }\n         ATTEMPT_INCREMENT_TIME =\n                 TimeUnit.MINUTES.toMillis(\n                         applicationProperties.getSecurity().getLoginResetTimeMinutes());\n         attemptsCache = new ConcurrentHashMap<>();\n     }\n \n     public void loginSucceeded(String key) {\n-        if (key == null || key.trim().isEmpty()) {\n+        if (!isBlockedEnabled || key == null || key.trim().isEmpty()) {\n             return;\n         }\n         attemptsCache.remove(key.toLowerCase());\n     }\n \n     public void loginFailed(String key) {\n-        if (key == null || key.trim().isEmpty()) return;\n+        if (!isBlockedEnabled || key == null || key.trim().isEmpty()) {\n+            return;\n+        }\n \n         AttemptCounter attemptCounter = attemptsCache.get(key.toLowerCase());\n         if (attemptCounter == null) {\n@@ -51,7 +60,9 @@ public void loginFailed(String key) {\n     }\n \n     public boolean isBlocked(String key) {\n-        if (key == null || key.trim().isEmpty()) return false;\n+        if (!isBlockedEnabled || key == null || key.trim().isEmpty()) {\n+            return false;\n+        }\n         AttemptCounter attemptCounter = attemptsCache.get(key.toLowerCase());\n         if (attemptCounter == null) {\n             return false;\n@@ -61,7 +72,9 @@ public boolean isBlocked(String key) {\n     }\n \n     public int getRemainingAttempts(String key) {\n-        if (key == null || key.trim().isEmpty()) return MAX_ATTEMPT;\n+        if (!isBlockedEnabled || key == null || key.trim().isEmpty()) {\n+            return Integer.MAX_VALUE; // Arbitrarily high number if tracking is disabled\n+        }\n \n         AttemptCounter attemptCounter = attemptsCache.get(key.toLowerCase());\n         if (attemptCounter == null) {",
    "output": "Add: Make Login Attempt Service deactivatable (#1747)"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/model/User.java b/src/main/java/stirling/software/SPDF/model/User.java\n--- a/src/main/java/stirling/software/SPDF/model/User.java\n+++ b/src/main/java/stirling/software/SPDF/model/User.java\n@@ -57,7 +57,7 @@ public class User implements Serializable {\n     @OneToMany(fetch = FetchType.EAGER, cascade = CascadeType.ALL, mappedBy = \"user\")\n     private Set<Authority> authorities = new HashSet<>();\n \n-    @ElementCollection\n+    @ElementCollection(fetch = FetchType.EAGER)\n     @MapKeyColumn(name = \"setting_key\")\n     @Lob\n     @Column(name = \"setting_value\", columnDefinition = \"CLOB\")",
    "output": "Fixes for eager loading (#1748)\n\n* fix\r\n\r\n* cleanups!\r\n\r\n* fix\r\n\r\n---------\r\n\r\nCo-authored-by: a <a>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/UserAuthenticationFilter.java b/src/main/java/stirling/software/SPDF/config/security/UserAuthenticationFilter.java\n--- a/src/main/java/stirling/software/SPDF/config/security/UserAuthenticationFilter.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/UserAuthenticationFilter.java\n@@ -58,7 +58,7 @@ protected void doFilterInternal(\n                 try {\n                     // Use API key to authenticate. This requires you to have an authentication\n                     // provider for API keys.\n-                    Optional<User> user = userService.loadUserByApiKey(apiKey);\n+                    Optional<User> user = userService.getUserByApiKey(apiKey);\n                     if (!user.isPresent()) {\n                         response.setStatus(HttpStatus.UNAUTHORIZED.value());\n                         response.getWriter().write(\"Invalid API Key.\");",
    "output": "Fix: authentication ApiKey NullPointerException (#1744)"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/UserService.java b/src/main/java/stirling/software/SPDF/config/security/UserService.java\n--- a/src/main/java/stirling/software/SPDF/config/security/UserService.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/UserService.java\n@@ -22,7 +22,6 @@\n import org.springframework.security.oauth2.core.user.OAuth2User;\n import org.springframework.stereotype.Service;\n \n-import lombok.extern.slf4j.Slf4j;\n import stirling.software.SPDF.config.DatabaseBackupInterface;\n import stirling.software.SPDF.config.security.session.SessionPersistentRegistry;\n import stirling.software.SPDF.controller.api.pipeline.UserServiceInterface;\n\ndiff --git a/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java b/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java\n--- a/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java\n+++ b/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java\n@@ -4,7 +4,9 @@\n import java.io.FileOutputStream;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.net.HttpURLConnection;\n import java.net.MalformedURLException;\n+import java.net.URL;\n import java.nio.file.FileVisitResult;\n import java.nio.file.Files;\n import java.nio.file.Path;\n@@ -13,8 +15,6 @@\n import java.nio.file.attribute.BasicFileAttributes;\n import java.util.ArrayList;\n import java.util.List;\n-import java.net.URL;\n-import java.net.HttpURLConnection;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -73,8 +73,7 @@ public static boolean isValidURL(String urlStr) {\n         } catch (MalformedURLException e) {\n             return false;\n         }\n-       \n-    }   \n+    }\n \n     public static boolean isURLReachable(String urlStr) {\n         try {\n@@ -112,16 +111,19 @@ public static Long convertSizeToBytes(String sizeStr) {\n         sizeStr = sizeStr.replace(\",\", \".\").replace(\" \", \"\");\n         try {\n             if (sizeStr.endsWith(\"KB\")) {\n-                return (long) (Double.parseDouble(sizeStr.substring(0, sizeStr.length() - 2)) * 1024);\n+                return (long)\n+                        (Double.parseDouble(sizeStr.substring(0, sizeStr.length() - 2)) * 1024);\n             } else if (sizeStr.endsWith(\"MB\")) {\n-                return (long) (Double.parseDouble(sizeStr.substring(0, sizeStr.length() - 2))\n-                        * 1024\n-                        * 1024);\n+                return (long)\n+                        (Double.parseDouble(sizeStr.substring(0, sizeStr.length() - 2))\n+                                * 1024\n+                                * 1024);\n             } else if (sizeStr.endsWith(\"GB\")) {\n-                return (long) (Double.parseDouble(sizeStr.substring(0, sizeStr.length() - 2))\n-                        * 1024\n-                        * 1024\n-                        * 1024);\n+                return (long)\n+                        (Double.parseDouble(sizeStr.substring(0, sizeStr.length() - 2))\n+                                * 1024\n+                                * 1024\n+                                * 1024);\n             } else if (sizeStr.endsWith(\"B\")) {\n                 return Long.parseLong(sizeStr.substring(0, sizeStr.length() - 1));\n             } else {\n@@ -191,8 +193,7 @@ public static List<Integer> evaluateNFunc(String expression, int maxValue) {\n \n             // Check if the result is null or not within bounds\n             if (result == null || result <= 0 || result.intValue() > maxValue) {\n-                if (n != 0)\n-                    break;\n+                if (n != 0) break;\n             } else {\n                 results.add(result.intValue());\n             }",
    "output": "Multiple flag fix (#1742)\n\n* fix\r\n\r\n* multiple file logic cleanup\r\n\r\n* fix\r\n\r\n---------\r\n\r\nCo-authored-by: a <a>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/misc/ExtractImagesController.java b/src/main/java/stirling/software/SPDF/controller/api/misc/ExtractImagesController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/misc/ExtractImagesController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/misc/ExtractImagesController.java\n@@ -140,6 +140,9 @@ private void extractImagesFromPage(\n             Set<Integer> processedImages,\n             ZipOutputStream zos)\n             throws IOException {\n+        if(page.getResources() == null || page.getResources().getXObjectNames() == null) {\n+    \t\treturn;\n+    \t}\n         for (COSName name : page.getResources().getXObjectNames()) {\n             if (page.getResources().isImageXObject(name)) {\n                 PDImageXObject image = (PDImageXObject) page.getResources().getXObject(name);",
    "output": "ExtractImagesController. null checks"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java b/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java\n--- a/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java\n+++ b/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java\n@@ -166,6 +166,7 @@ public void init() {\n         addEndpointToGroup(\"Python\", REMOVE_BLANKS);\n         addEndpointToGroup(\"Python\", \"html-to-pdf\");\n         addEndpointToGroup(\"Python\", \"url-to-pdf\");\n+        addEndpointToGroup(\"Python\", \"pdf-to-img\");\n \n         // openCV\n         addEndpointToGroup(\"OpenCV\", \"extract-image-scans\");\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java b/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java\n@@ -1,11 +1,23 @@\n package stirling.software.SPDF.controller.api.converters;\n \n+import java.io.ByteArrayOutputStream;\n+import java.io.FileOutputStream;\n import java.io.IOException;\n import java.net.URLConnection;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n \n+import org.apache.commons.io.FileUtils;\n import org.apache.pdfbox.rendering.ImageType;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpHeaders;\n import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n import org.springframework.web.bind.annotation.ModelAttribute;\n@@ -21,6 +33,8 @@\n import stirling.software.SPDF.model.api.converters.ConvertToImageRequest;\n import stirling.software.SPDF.model.api.converters.ConvertToPdfRequest;\n import stirling.software.SPDF.utils.PdfUtils;\n+import stirling.software.SPDF.utils.ProcessExecutor;\n+import stirling.software.SPDF.utils.ProcessExecutor.ProcessExecutorResult;\n import stirling.software.SPDF.utils.WebResponseUtils;\n \n @RestController\n@@ -60,15 +74,92 @@ public ResponseEntity<byte[]> convertToImage(@ModelAttribute ConvertToImageReque\n         result =\n                 PdfUtils.convertFromPdf(\n                         pdfBytes,\n-                        imageFormat.toUpperCase(),\n+                        imageFormat.equalsIgnoreCase(\"webp\") ? \"png\" : imageFormat.toUpperCase(),\n                         colorTypeResult,\n                         singleImage,\n                         Integer.valueOf(dpi),\n                         filename);\n-\n         if (result == null || result.length == 0) {\n             logger.error(\"resultant bytes for {} is null, error converting \", filename);\n         }\n+        if (imageFormat.equalsIgnoreCase(\"webp\")) {\n+            // Write the output stream to a temp file\n+            Path tempFile = Files.createTempFile(\"temp_png\", \".png\");\n+            try (FileOutputStream fos = new FileOutputStream(tempFile.toFile())) {\n+                fos.write(result);\n+                fos.flush();\n+            }\n+\n+            String pythonVersion = \"python3\";\n+            try {\n+                ProcessExecutor.getInstance(ProcessExecutor.Processes.PYTHON_OPENCV)\n+                        .runCommandWithOutputHandling(Arrays.asList(\"python3\", \"--version\"));\n+            } catch (IOException e) {\n+                ProcessExecutor.getInstance(ProcessExecutor.Processes.PYTHON_OPENCV)\n+                        .runCommandWithOutputHandling(Arrays.asList(\"python\", \"--version\"));\n+                pythonVersion = \"python\";\n+            }\n+\n+            List<String> command = new ArrayList<>();\n+            command.add(pythonVersion);\n+            command.add(\"./scripts/png_to_webp.py\"); // Python script to handle the conversion\n+\n+                // Create a temporary directory for the output WebP files\n+            Path tempOutputDir = Files.createTempDirectory(\"webp_output\");\n+            if (singleImage) {\n+                // Run the Python script to convert PNG to WebP\n+                command.add(tempFile.toString());\n+                command.add(tempOutputDir.toString());\n+                command.add(\"--single\");\n+            } else {\n+                // Save the uploaded PDF to a temporary file\n+                Path tempPdfPath = Files.createTempFile(\"temp_pdf\", \".pdf\");\n+                file.transferTo(tempPdfPath.toFile());\n+                // Run the Python script to convert PDF to WebP\n+                command.add(tempPdfPath.toString());\n+                command.add(tempOutputDir.toString());\n+            }\n+            command.add(\"--dpi\");\n+            command.add(dpi);\n+            ProcessExecutorResult resultProcess =\n+                    ProcessExecutor.getInstance(ProcessExecutor.Processes.PYTHON_OPENCV)\n+                            .runCommandWithOutputHandling(command);\n+\n+            // Find all WebP files in the output directory\n+            List<Path> webpFiles =\n+                    Files.walk(tempOutputDir)\n+                            .filter(path -> path.toString().endsWith(\".webp\"))\n+                            .collect(Collectors.toList());\n+\n+            if (webpFiles.isEmpty()) {\n+                logger.error(\"No WebP files were created in: {}\", tempOutputDir.toString());\n+                throw new IOException(\"No WebP files were created. \" + resultProcess.getMessages());\n+            }\n+\n+            byte[] bodyBytes = new byte[0];\n+\n+            if (webpFiles.size() == 1) {\n+                // Return the single WebP file directly\n+                Path webpFilePath = webpFiles.get(0);\n+                bodyBytes = Files.readAllBytes(webpFilePath);\n+            } else {\n+                // Create a ZIP file containing all WebP images\n+                ByteArrayOutputStream zipOutputStream = new ByteArrayOutputStream();\n+                try (ZipOutputStream zos = new ZipOutputStream(zipOutputStream)) {\n+                    for (Path webpFile : webpFiles) {\n+                        zos.putNextEntry(new ZipEntry(webpFile.getFileName().toString()));\n+                        Files.copy(webpFile, zos);\n+                        zos.closeEntry();\n+                    }\n+                }\n+                bodyBytes = zipOutputStream.toByteArray();\n+            }\n+            // Clean up the temporary files\n+            Files.deleteIfExists(tempFile);\n+            if (tempOutputDir != null) FileUtils.deleteDirectory(tempOutputDir.toFile());\n+            result = bodyBytes;\n+        }\n+\n         if (singleImage) {\n             String docName = filename + \".\" + imageFormat;\n             MediaType mediaType = MediaType.parseMediaType(getMediaType(imageFormat));\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/web/ConverterWebController.java b/src/main/java/stirling/software/SPDF/controller/web/ConverterWebController.java\n--- a/src/main/java/stirling/software/SPDF/controller/web/ConverterWebController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/web/ConverterWebController.java\n@@ -21,14 +21,6 @@ public String convertBookToPdfForm(Model model) {\n         return \"convert/book-to-pdf\";\n     }\n \n-    @ConditionalOnExpression(\"#{bookAndHtmlFormatsInstalled}\")\n-    @GetMapping(\"/pdf-to-book\")\n-    @Hidden\n-    public String convertPdfToBookForm(Model model) {\n-        model.addAttribute(\"currentPage\", \"pdf-to-book\");\n-        return \"convert/pdf-to-book\";\n-    }\n-\n     @GetMapping(\"/img-to-pdf\")\n     @Hidden\n     public String convertImgToPdfForm(Model model) {\n@@ -57,13 +49,6 @@ public String convertURLToPdfForm(Model model) {\n         return \"convert/url-to-pdf\";\n     }\n \n-    @GetMapping(\"/pdf-to-img\")\n-    @Hidden\n-    public String pdfToimgForm(Model model) {\n-        model.addAttribute(\"currentPage\", \"pdf-to-img\");\n-        return \"convert/pdf-to-img\";\n-    }\n-\n     @GetMapping(\"/file-to-pdf\")\n     @Hidden\n     public String convertToPdfForm(Model model) {\n@@ -73,6 +58,21 @@ public String convertToPdfForm(Model model) {\n \n     // PDF TO......\n \n+    @ConditionalOnExpression(\"#{bookAndHtmlFormatsInstalled}\")\n+    @GetMapping(\"/pdf-to-book\")\n+    @Hidden\n+    public String convertPdfToBookForm(Model model) {\n+        model.addAttribute(\"currentPage\", \"pdf-to-book\");\n+        return \"convert/pdf-to-book\";\n+    }\n+\n+    @GetMapping(\"/pdf-to-img\")\n+    @Hidden\n+    public String pdfToimgForm(Model model) {\n+        model.addAttribute(\"currentPage\", \"pdf-to-img\");\n+        return \"convert/pdf-to-img\";\n+    }\n+\n     @GetMapping(\"/pdf-to-html\")\n     @Hidden\n     public ModelAndView pdfToHTML() {\n\ndiff --git a/src/main/java/stirling/software/SPDF/model/api/converters/ConvertToImageRequest.java b/src/main/java/stirling/software/SPDF/model/api/converters/ConvertToImageRequest.java\n--- a/src/main/java/stirling/software/SPDF/model/api/converters/ConvertToImageRequest.java\n+++ b/src/main/java/stirling/software/SPDF/model/api/converters/ConvertToImageRequest.java\n@@ -12,7 +12,7 @@ public class ConvertToImageRequest extends PDFFile {\n \n     @Schema(\n             description = \"The output image format\",\n-            allowableValues = {\"png\", \"jpeg\", \"jpg\", \"gif\"})\n+            allowableValues = {\"png\", \"jpeg\", \"jpg\", \"gif\", \"webp\"})\n     private String imageFormat;\n \n     @Schema(",
    "output": "Add: Convert PDF to WebP (#1666)\n\n* Add PDF to WebP\r\n\r\n* add swagger param\r\n\r\n* back\r\n\r\n* creates a custom image for Docker from pymupdf\r\n\r\n* Converting with pdf2image and Pillow instead of pymupdf\r\n\r\n* webp remove to pdf-to-img\r\n\r\n* remove mupdf"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/service/PdfImageRemovalService.java b/src/main/java/stirling/software/SPDF/service/PdfImageRemovalService.java\n--- a/src/main/java/stirling/software/SPDF/service/PdfImageRemovalService.java\n+++ b/src/main/java/stirling/software/SPDF/service/PdfImageRemovalService.java\n@@ -1,6 +1,8 @@\n package stirling.software.SPDF.service;\n \n import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n \n import org.apache.pdfbox.cos.COSName;\n import org.apache.pdfbox.pdmodel.PDDocument;\n@@ -16,7 +18,7 @@ public class PdfImageRemovalService {\n     /**\n      * Removes all image objects from the provided PDF document.\n      *\n-     * This method iterates over each page in the document and removes any image XObjects found\n+     * <p>This method iterates over each page in the document and removes any image XObjects found\n      * in the page's resources.\n      *\n      * @param document The PDF document from which images will be removed.\n@@ -27,14 +29,22 @@ public PDDocument removeImagesFromPdf(PDDocument document) throws IOException {\n         // Iterate over each page in the PDF document\n         for (PDPage page : document.getPages()) {\n             PDResources resources = page.getResources();\n+            // Collect the XObject names to remove\n+            List<COSName> namesToRemove = new ArrayList<>();\n+\n             // Iterate over all XObject names in the page's resources\n             for (COSName name : resources.getXObjectNames()) {\n                 // Check if the XObject is an image\n                 if (resources.isImageXObject(name)) {\n-                    // Remove the image XObject by setting it to null\n-                    resources.put(name, (PDXObject) null);\n+                    // Collect the name for removal\n+                    namesToRemove.add(name);\n                 }\n             }\n+\n+            // Now, modify the resources by removing the collected names\n+            for (COSName name : namesToRemove) {\n+                resources.put(name, (PDXObject) null);\n+            }\n         }\n         return document;\n     }",
    "output": "Fix ConcurrentModificationException by modifying resources outside the iteration. (#1719)\n\nFix ConcurrentModificationException by collecting XObject names\r\n\r\n- Changed  to use a list to collect XObject names before removal.\r\n- Avoids ConcurrentModificationException by modifying resources outside the iteration.\r\n\r\nCo-authored-by: Anthony Stirling <77850077+Frooodle@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/ConfigInitializer.java b/src/main/java/stirling/software/SPDF/config/ConfigInitializer.java\n--- a/src/main/java/stirling/software/SPDF/config/ConfigInitializer.java\n+++ b/src/main/java/stirling/software/SPDF/config/ConfigInitializer.java\n@@ -14,6 +14,8 @@\n \n import org.simpleyaml.configuration.comments.CommentType;\n import org.simpleyaml.configuration.file.YamlFile;\n+import org.simpleyaml.configuration.implementation.SimpleYamlImplementation;\n+import org.simpleyaml.configuration.implementation.snakeyaml.lib.DumperOptions;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.context.ApplicationContextInitializer;\n@@ -71,16 +73,28 @@ public void ensureConfigExists() throws IOException, URISyntaxException {\n             }\n \n             final YamlFile settingsTemplateFile = new YamlFile(tempTemplatePath.toFile());\n+            DumperOptions yamlOptionsSettingsTemplateFile =\n+                    ((SimpleYamlImplementation) settingsTemplateFile.getImplementation())\n+                            .getDumperOptions();\n+            yamlOptionsSettingsTemplateFile.setSplitLines(false);\n             settingsTemplateFile.loadWithComments();\n \n             final YamlFile settingsFile = new YamlFile(settingsPath.toFile());\n+            DumperOptions yamlOptionsSettingsFile =\n+                    ((SimpleYamlImplementation) settingsFile.getImplementation())\n+                            .getDumperOptions();\n+            yamlOptionsSettingsFile.setSplitLines(false);\n             settingsFile.loadWithComments();\n \n             // Load headers and comments\n             String header = settingsTemplateFile.getHeader();\n \n             // Create a new file for temporary settings\n             final YamlFile tempSettingFile = new YamlFile(settingsPath.toFile());\n+            DumperOptions yamlOptionsTempSettingFile =\n+                    ((SimpleYamlImplementation) tempSettingFile.getImplementation())\n+                            .getDumperOptions();\n+            yamlOptionsTempSettingFile.setSplitLines(false);\n             tempSettingFile.createNewFile(true);\n             tempSettingFile.setHeader(header);\n \n\ndiff --git a/src/main/java/stirling/software/SPDF/config/security/InitialSecuritySetup.java b/src/main/java/stirling/software/SPDF/config/security/InitialSecuritySetup.java\n--- a/src/main/java/stirling/software/SPDF/config/security/InitialSecuritySetup.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/InitialSecuritySetup.java\n@@ -6,6 +6,8 @@\n import java.util.UUID;\n \n import org.simpleyaml.configuration.file.YamlFile;\n+import org.simpleyaml.configuration.implementation.SimpleYamlImplementation;\n+import org.simpleyaml.configuration.implementation.snakeyaml.lib.DumperOptions;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n@@ -92,6 +94,9 @@ private void saveKeyToConfig(String key) throws IOException {\n         Path path = Paths.get(\"configs\", \"settings.yml\"); // Target the configs/settings.yml\n \n         final YamlFile settingsYml = new YamlFile(path.toFile());\n+        DumperOptions yamlOptionssettingsYml =\n+                ((SimpleYamlImplementation) settingsYml.getImplementation()).getDumperOptions();\n+        yamlOptionssettingsYml.setSplitLines(false);\n \n         settingsYml.loadWithComments();\n ",
    "output": "Fix: YamlFile - String length limit disable (#1716)\n\nCo-authored-by: Anthony Stirling <77850077+Frooodle@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/UserAuthenticationFilter.java b/src/main/java/stirling/software/SPDF/config/security/UserAuthenticationFilter.java\n--- a/src/main/java/stirling/software/SPDF/config/security/UserAuthenticationFilter.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/UserAuthenticationFilter.java\n@@ -2,13 +2,16 @@\n \n import java.io.IOException;\n import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n \n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.context.annotation.Lazy;\n import org.springframework.http.HttpStatus;\n import org.springframework.security.core.Authentication;\n import org.springframework.security.core.AuthenticationException;\n+import org.springframework.security.core.authority.SimpleGrantedAuthority;\n import org.springframework.security.core.context.SecurityContextHolder;\n import org.springframework.security.core.session.SessionInformation;\n import org.springframework.security.core.userdetails.UserDetails;\n@@ -22,6 +25,7 @@\n import jakarta.servlet.http.HttpServletResponse;\n import stirling.software.SPDF.config.security.session.SessionPersistentRegistry;\n import stirling.software.SPDF.model.ApiKeyAuthenticationToken;\n+import stirling.software.SPDF.model.User;\n \n @Component\n public class UserAuthenticationFilter extends OncePerRequestFilter {\n@@ -54,15 +58,20 @@ protected void doFilterInternal(\n                 try {\n                     // Use API key to authenticate. This requires you to have an authentication\n                     // provider for API keys.\n-                    UserDetails userDetails = userService.loadUserByApiKey(apiKey);\n-                    if (userDetails == null) {\n+                    Optional<User> user = userService.loadUserByApiKey(apiKey);\n+                    if (!user.isPresent()) {\n                         response.setStatus(HttpStatus.UNAUTHORIZED.value());\n                         response.getWriter().write(\"Invalid API Key.\");\n                         return;\n                     }\n-                    authentication =\n-                            new ApiKeyAuthenticationToken(\n-                                    userDetails, apiKey, userDetails.getAuthorities());\n+                    List<SimpleGrantedAuthority> authorities =\n+                            user.get().getAuthorities().stream()\n+                                    .map(\n+                                            authority ->\n+                                                    new SimpleGrantedAuthority(\n+                                                            authority.getAuthority()))\n+                                    .collect(Collectors.toList());\n+                    authentication = new ApiKeyAuthenticationToken(user.get(), apiKey, authorities);\n                     SecurityContextHolder.getContext().setAuthentication(authentication);\n                 } catch (AuthenticationException e) {\n                     // If API key authentication fails, deny the request\n\ndiff --git a/src/main/java/stirling/software/SPDF/config/security/UserService.java b/src/main/java/stirling/software/SPDF/config/security/UserService.java\n--- a/src/main/java/stirling/software/SPDF/config/security/UserService.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/UserService.java\n@@ -22,6 +22,7 @@\n import org.springframework.security.oauth2.core.user.OAuth2User;\n import org.springframework.stereotype.Service;\n \n+import lombok.extern.slf4j.Slf4j;\n import stirling.software.SPDF.config.DatabaseBackupInterface;\n import stirling.software.SPDF.config.security.session.SessionPersistentRegistry;\n import stirling.software.SPDF.controller.api.pipeline.UserServiceInterface;\n@@ -65,16 +66,16 @@ public boolean processOAuth2PostLogin(String username, boolean autoCreateUser)\n     }\n \n     public Authentication getAuthentication(String apiKey) {\n-        User user = getUserByApiKey(apiKey);\n-        if (user == null) {\n+        Optional<User> user = getUserByApiKey(apiKey);\n+        if (!user.isPresent()) {\n             throw new UsernameNotFoundException(\"API key is not valid\");\n         }\n \n         // Convert the user into an Authentication object\n         return new UsernamePasswordAuthenticationToken(\n                 user, // principal (typically the user)\n                 null, // credentials (we don't expose the password or API key here)\n-                getAuthorities(user) // user's authorities (roles/permissions)\n+                getAuthorities(user.get()) // user's authorities (roles/permissions)\n                 );\n     }\n \n@@ -89,17 +90,17 @@ private String generateApiKey() {\n         String apiKey;\n         do {\n             apiKey = UUID.randomUUID().toString();\n-        } while (userRepository.findByApiKey(apiKey) != null); // Ensure uniqueness\n+        } while (userRepository.findByApiKey(apiKey).isPresent()); // Ensure uniqueness\n         return apiKey;\n     }\n \n     public User addApiKeyToUser(String username) {\n-        User user =\n-                findByUsernameIgnoreCase(username)\n-                        .orElseThrow(() -> new UsernameNotFoundException(\"User not found\"));\n-\n-        user.setApiKey(generateApiKey());\n-        return userRepository.save(user);\n+        Optional<User> user = findByUsernameIgnoreCase(username);\n+        if (user.isPresent()) {\n+            user.get().setApiKey(generateApiKey());\n+            return userRepository.save(user.get());\n+        }\n+        throw new UsernameNotFoundException(\"User not found\");\n     }\n \n     public User refreshApiKeyForUser(String username) {\n@@ -114,21 +115,18 @@ public String getApiKeyForUser(String username) {\n     }\n \n     public boolean isValidApiKey(String apiKey) {\n-        return userRepository.findByApiKey(apiKey) != null;\n+        return userRepository.findByApiKey(apiKey).isPresent();\n     }\n \n-    public User getUserByApiKey(String apiKey) {\n+    public Optional<User> getUserByApiKey(String apiKey) {\n         return userRepository.findByApiKey(apiKey);\n     }\n \n-    public UserDetails loadUserByApiKey(String apiKey) {\n-        User user = userRepository.findByApiKey(apiKey);\n-        if (user != null) {\n-            // Convert your User entity to a UserDetails object with authorities\n-            return new org.springframework.security.core.userdetails.User(\n-                    user.getUsername(),\n-                    user.getPassword(), // you might not need this for API key auth\n-                    getAuthorities(user));\n+    public Optional<User> loadUserByApiKey(String apiKey) {\n+        Optional<User> user = userRepository.findByApiKey(apiKey);\n+\n+        if (user.isPresent()) {\n+            return user;\n         }\n         return null; // or throw an exception\n     }\n\ndiff --git a/src/main/java/stirling/software/SPDF/model/Authority.java b/src/main/java/stirling/software/SPDF/model/Authority.java\n--- a/src/main/java/stirling/software/SPDF/model/Authority.java\n+++ b/src/main/java/stirling/software/SPDF/model/Authority.java\n@@ -1,5 +1,7 @@\n package stirling.software.SPDF.model;\n \n+import java.io.Serializable;\n+\n import jakarta.persistence.Column;\n import jakarta.persistence.Entity;\n import jakarta.persistence.GeneratedValue;\n@@ -11,7 +13,9 @@\n \n @Entity\n @Table(name = \"authorities\")\n-public class Authority {\n+public class Authority implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n \n     public Authority() {}\n \n\ndiff --git a/src/main/java/stirling/software/SPDF/model/User.java b/src/main/java/stirling/software/SPDF/model/User.java\n--- a/src/main/java/stirling/software/SPDF/model/User.java\n+++ b/src/main/java/stirling/software/SPDF/model/User.java\n@@ -1,5 +1,6 @@\n package stirling.software.SPDF.model;\n \n+import java.io.Serializable;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Map;\n@@ -23,7 +24,9 @@\n \n @Entity\n @Table(name = \"users\")\n-public class User {\n+public class User implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n \n     @Id\n     @GeneratedValue(strategy = GenerationType.IDENTITY)\n\ndiff --git a/src/main/java/stirling/software/SPDF/repository/UserRepository.java b/src/main/java/stirling/software/SPDF/repository/UserRepository.java\n--- a/src/main/java/stirling/software/SPDF/repository/UserRepository.java\n+++ b/src/main/java/stirling/software/SPDF/repository/UserRepository.java\n@@ -13,5 +13,5 @@ public interface UserRepository extends JpaRepository<User, Long> {\n \n     Optional<User> findByUsername(String username);\n \n-    User findByApiKey(String apiKey);\n+    Optional<User> findByApiKey(String apiKey);\n }",
    "output": "Fix: Failed authentication #1704 (#1708)\n\n* Fix: Failed authentication #1704\r\n\r\n* Update account.html"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/misc/OCRController.java b/src/main/java/stirling/software/SPDF/controller/api/misc/OCRController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/misc/OCRController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/misc/OCRController.java\n@@ -13,8 +13,7 @@\n import java.util.zip.ZipEntry;\n import java.util.zip.ZipOutputStream;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n import org.springframework.web.bind.annotation.ModelAttribute;\n@@ -27,6 +26,7 @@\n import io.swagger.v3.oas.annotations.Operation;\n import io.swagger.v3.oas.annotations.tags.Tag;\n \n+import stirling.software.SPDF.model.ApplicationProperties;\n import stirling.software.SPDF.model.api.misc.ProcessPdfWithOcrRequest;\n import stirling.software.SPDF.utils.ProcessExecutor;\n import stirling.software.SPDF.utils.ProcessExecutor.ProcessExecutorResult;\n@@ -37,10 +37,10 @@\n @Tag(name = \"Misc\", description = \"Miscellaneous APIs\")\n public class OCRController {\n \n-    private static final Logger logger = LoggerFactory.getLogger(OCRController.class);\n+    @Autowired ApplicationProperties applicationProperties;\n \n     public List<String> getAvailableTesseractLanguages() {\n-        String tessdataDir = \"/usr/share/tessdata\";\n+        String tessdataDir = applicationProperties.getSystem().getTessdataDir();\n         File[] files = new File(tessdataDir).listFiles();\n         if (files == null) {\n             return Collections.emptyList();\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/web/OtherWebController.java b/src/main/java/stirling/software/SPDF/controller/web/OtherWebController.java\n--- a/src/main/java/stirling/software/SPDF/controller/web/OtherWebController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/web/OtherWebController.java\n@@ -6,6 +6,7 @@\n import java.util.List;\n import java.util.stream.Collectors;\n \n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Controller;\n import org.springframework.ui.Model;\n import org.springframework.web.bind.annotation.GetMapping;\n@@ -14,10 +15,14 @@\n import io.swagger.v3.oas.annotations.Hidden;\n import io.swagger.v3.oas.annotations.tags.Tag;\n \n+import stirling.software.SPDF.model.ApplicationProperties;\n+\n @Controller\n @Tag(name = \"Misc\", description = \"Miscellaneous APIs\")\n public class OtherWebController {\n \n+    @Autowired ApplicationProperties applicationProperties;\n+\n     @GetMapping(\"/compress-pdf\")\n     @Hidden\n     public String compressPdfForm(Model model) {\n@@ -97,7 +102,7 @@ public String printFileForm(Model model) {\n     }\n \n     public List<String> getAvailableTesseractLanguages() {\n-        String tessdataDir = \"/usr/share/tessdata\";\n+        String tessdataDir = applicationProperties.getSystem().getTessdataDir();\n         File[] files = new File(tessdataDir).listFiles();\n         if (files == null) {\n             return Collections.emptyList();\n\ndiff --git a/src/main/java/stirling/software/SPDF/model/ApplicationProperties.java b/src/main/java/stirling/software/SPDF/model/ApplicationProperties.java\n--- a/src/main/java/stirling/software/SPDF/model/ApplicationProperties.java\n+++ b/src/main/java/stirling/software/SPDF/model/ApplicationProperties.java\n@@ -431,6 +431,15 @@ public static class System {\n         private boolean showUpdate;\n         private Boolean showUpdateOnlyAdmin;\n         private boolean customHTMLFiles;\n+        private String tessdataDir;\n+\n+        public String getTessdataDir() {\n+            return tessdataDir;\n+        }\n+\n+        public void setTessdataDir(String tessdataDir) {\n+            this.tessdataDir = tessdataDir;\n+        }\n \n         public boolean isCustomHTMLFiles() {\n             return customHTMLFiles;",
    "output": "tessdata available to local Windows users (#1677)\n\ntessdata available to local Windows users"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertWebsiteToPDF.java b/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertWebsiteToPDF.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertWebsiteToPDF.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertWebsiteToPDF.java\n@@ -39,6 +39,12 @@ public ResponseEntity<byte[]> urlToPdf(@ModelAttribute UrlToPdfRequest request)\n         if (!URL.matches(\"^https?://.*\") || !GeneralUtils.isValidURL(URL)) {\n             throw new IllegalArgumentException(\"Invalid URL format provided.\");\n         }\n+\n+        // validate the URL is reachable\n+        if (!GeneralUtils.isURLReachable(URL)) {\n+            throw new IllegalArgumentException(\"URL is not reachable, please provide a valid URL.\");\n+        }\n+\n         Path tempOutputFile = null;\n         byte[] pdfBytes;\n         try {\n\ndiff --git a/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java b/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java\n--- a/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java\n+++ b/src/main/java/stirling/software/SPDF/utils/GeneralUtils.java\n@@ -13,6 +13,8 @@\n import java.nio.file.attribute.BasicFileAttributes;\n import java.util.ArrayList;\n import java.util.List;\n+import java.net.URL;\n+import java.net.HttpURLConnection;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -71,6 +73,21 @@ public static boolean isValidURL(String urlStr) {\n         } catch (MalformedURLException e) {\n             return false;\n         }\n+       \n+    }   \n+\n+    public static boolean isURLReachable(String urlStr) {\n+        try {\n+            URL url = new URL(urlStr);\n+            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n+            connection.setRequestMethod(\"HEAD\");\n+            int responseCode = connection.getResponseCode();\n+            return (200 <= responseCode && responseCode <= 399);\n+        } catch (MalformedURLException e) {\n+            return false;\n+        } catch (IOException e) {\n+            return false;\n+        }\n     }\n \n     public static File multipartToFile(MultipartFile multipart) throws IOException {\n@@ -95,19 +112,16 @@ public static Long convertSizeToBytes(String sizeStr) {\n         sizeStr = sizeStr.replace(\",\", \".\").replace(\" \", \"\");\n         try {\n             if (sizeStr.endsWith(\"KB\")) {\n-                return (long)\n-                        (Double.parseDouble(sizeStr.substring(0, sizeStr.length() - 2)) * 1024);\n+                return (long) (Double.parseDouble(sizeStr.substring(0, sizeStr.length() - 2)) * 1024);\n             } else if (sizeStr.endsWith(\"MB\")) {\n-                return (long)\n-                        (Double.parseDouble(sizeStr.substring(0, sizeStr.length() - 2))\n-                                * 1024\n-                                * 1024);\n+                return (long) (Double.parseDouble(sizeStr.substring(0, sizeStr.length() - 2))\n+                        * 1024\n+                        * 1024);\n             } else if (sizeStr.endsWith(\"GB\")) {\n-                return (long)\n-                        (Double.parseDouble(sizeStr.substring(0, sizeStr.length() - 2))\n-                                * 1024\n-                                * 1024\n-                                * 1024);\n+                return (long) (Double.parseDouble(sizeStr.substring(0, sizeStr.length() - 2))\n+                        * 1024\n+                        * 1024\n+                        * 1024);\n             } else if (sizeStr.endsWith(\"B\")) {\n                 return Long.parseLong(sizeStr.substring(0, sizeStr.length() - 1));\n             } else {\n@@ -170,13 +184,15 @@ public static List<Integer> evaluateNFunc(String expression, int maxValue) {\n \n         int n = 0;\n         while (true) {\n-            // Replace 'n' with the current value of n, correctly handling numbers before 'n'\n+            // Replace 'n' with the current value of n, correctly handling numbers before\n+            // 'n'\n             String sanitizedExpression = insertMultiplicationBeforeN(expression, n);\n             Double result = evaluator.evaluate(sanitizedExpression);\n \n             // Check if the result is null or not within bounds\n             if (result == null || result <= 0 || result.intValue() > maxValue) {\n-                if (n != 0) break;\n+                if (n != 0)\n+                    break;\n             } else {\n                 results.add(result.intValue());\n             }\n\ndiff --git a/src/test/java/stirling/software/SPDF/controller/api/converters/ConvertWebsiteToPdfTest.java b/src/test/java/stirling/software/SPDF/controller/api/converters/ConvertWebsiteToPdfTest.java\n--- a/src/test/java/stirling/software/SPDF/controller/api/converters/ConvertWebsiteToPdfTest.java\n+++ b/src/test/java/stirling/software/SPDF/controller/api/converters/ConvertWebsiteToPdfTest.java\n@@ -0,0 +1,41 @@\n+package stirling.software.SPDF.controller.api.converters;\n+\n+import org.junit.jupiter.api.Test;\n+import org.springframework.http.ResponseEntity;\n+\n+import stirling.software.SPDF.model.api.converters.UrlToPdfRequest;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class ConvertWebsiteToPdfTest {\n+    @Test\n+    public void test_exemption_is_thrown_when_invalid_url_format_provided() {\n+\n+        String invalid_format_Url = \"invalid-url\";\n+        // Arrange\n+        ConvertWebsiteToPDF convertWebsiteToPDF = new ConvertWebsiteToPDF();\n+        UrlToPdfRequest request = new UrlToPdfRequest();\n+        request.setUrlInput(invalid_format_Url);\n+        // Act\n+        IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, () -> {\n+            convertWebsiteToPDF.urlToPdf(request);\n+        });\n+        // Assert\n+        assertEquals(\"Invalid URL format provided.\", thrown.getMessage());\n+    }\n+\n+    @Test\n+    public void test_exemption_is_thrown_when_url_is_not_reachable() {\n+\n+        String unreachable_Url = \"https://www.googleeeexyz.com\";\n+        // Arrange\n+        ConvertWebsiteToPDF convertWebsiteToPDF = new ConvertWebsiteToPDF();\n+        UrlToPdfRequest request = new UrlToPdfRequest();\n+        request.setUrlInput(unreachable_Url);\n+        // Act\n+        IllegalArgumentException thrown = assertThrows(IllegalArgumentException.class, () -> {\n+            convertWebsiteToPDF.urlToPdf(request);\n+        });\n+        // Assert\n+        assertEquals(\"URL is not reachable, please provide a valid URL.\", thrown.getMessage());\n+    }\n+}",
    "output": "Bug fix UI crash when url is unrechable (#1642)\n\n* feat: Add URL  reachability check in ConvertWebsiteToPDF\r\n\r\n* Add tests for URL reachability in ConvertWebsiteToPdfTest\r\n\r\n* test: Update URL in ConvertWebsiteToPdfTest for testing"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java b/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java\n--- a/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java\n+++ b/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java\n@@ -137,6 +137,7 @@ public void init() {\n         addEndpointToGroup(\"Other\", \"auto-rename\");\n         addEndpointToGroup(\"Other\", \"get-info-on-pdf\");\n         addEndpointToGroup(\"Other\", \"show-javascript\");\n+        addEndpointToGroup(\"Other\", \"remove-image-pdf\");\n \n         // CLI\n         addEndpointToGroup(\"CLI\", \"compress-pdf\");\n@@ -221,6 +222,7 @@ public void init() {\n         addEndpointToGroup(\"Java\", \"split-pdf-by-sections\");\n         addEndpointToGroup(\"Java\", REMOVE_BLANKS);\n         addEndpointToGroup(\"Java\", \"pdf-to-text\");\n+        addEndpointToGroup(\"Java\", \"remove-image-pdf\");\n \n         // Javascript\n         addEndpointToGroup(\"Javascript\", \"pdf-organizer\");\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/api/PdfImageRemovalController.java b/src/main/java/stirling/software/SPDF/controller/api/PdfImageRemovalController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/PdfImageRemovalController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/PdfImageRemovalController.java\n@@ -0,0 +1,82 @@\n+package stirling.software.SPDF.controller.api;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+\n+import org.apache.pdfbox.Loader;\n+import org.apache.pdfbox.pdmodel.PDDocument;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.*;\n+import org.springframework.web.multipart.MultipartFile;\n+\n+import io.swagger.v3.oas.annotations.Operation;\n+\n+import stirling.software.SPDF.model.api.PDFFile;\n+import stirling.software.SPDF.service.PdfImageRemovalService;\n+import stirling.software.SPDF.utils.WebResponseUtils;\n+\n+\n+/**\n+ * Controller class for handling PDF image removal requests.\n+ * Provides an endpoint to remove images from a PDF file to reduce its size.\n+ */\n+@RestController\n+@RequestMapping(\"/api/v1/general\")\n+public class PdfImageRemovalController {\n+\n+    // Service for removing images from PDFs\n+    @Autowired private PdfImageRemovalService pdfImageRemovalService;\n+\n+    /**\n+     * Constructor for dependency injection of PdfImageRemovalService.\n+     *\n+     * @param pdfImageRemovalService The service used for removing images from PDFs.\n+     */\n+    public PdfImageRemovalController(PdfImageRemovalService pdfImageRemovalService) {\n+        this.pdfImageRemovalService = pdfImageRemovalService;\n+    }\n+\n+    /**\n+     * Endpoint to remove images from a PDF file.\n+     *\n+     * This method processes the uploaded PDF file, removes all images, and returns\n+     * the modified PDF file with a new name indicating that images were removed.\n+     *\n+     * @param file The PDF file with images to be removed.\n+     * @return ResponseEntity containing the modified PDF file as byte array with appropriate content type and filename.\n+     * @throws IOException If an error occurs while processing the PDF file.\n+     */\n+    @PostMapping(consumes = \"multipart/form-data\", value = \"/remove-image-pdf\")\n+    @Operation(\n+            summary = \"Remove images from file to reduce the file size.\",\n+            description =\n+                    \"This endpoint remove images from file to reduce the file size.Input:PDF Output:PDF Type:MISO\")\n+    public ResponseEntity<byte[]> removeImages(@ModelAttribute PDFFile file) throws IOException {\n+\n+        MultipartFile pdf = file.getFileInput();\n+\n+        // Convert the MultipartFile to a byte array\n+        byte[] pdfBytes = pdf.getBytes();\n+\n+        // Load the PDF document from the byte array\n+        PDDocument document = Loader.loadPDF(pdfBytes);\n+\n+        // Remove images from the PDF document using the service\n+        PDDocument modifiedDocument = pdfImageRemovalService.removeImagesFromPdf(document);\n+\n+        // Create a ByteArrayOutputStream to hold the modified PDF data\n+        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n+\n+        // Save the modified PDF document to the output stream\n+        modifiedDocument.save(outputStream);\n+        modifiedDocument.close();\n+\n+        // Generate a new filename for the modified PDF\n+        String mergedFileName =\n+                pdf.getOriginalFilename().replaceFirst(\"[.][^.]+$\", \"\") + \"_removed_images.pdf\";\n+\n+        // Convert the byte array to a web response and return it\n+        return WebResponseUtils.bytesToWebResponse(outputStream.toByteArray(), mergedFileName);\n+    }\n+}\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/web/GeneralWebController.java b/src/main/java/stirling/software/SPDF/controller/web/GeneralWebController.java\n--- a/src/main/java/stirling/software/SPDF/controller/web/GeneralWebController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/web/GeneralWebController.java\n@@ -310,4 +310,11 @@ public String autoSPlitPDFForm(Model model) {\n         model.addAttribute(\"currentPage\", \"auto-split-pdf\");\n         return \"auto-split-pdf\";\n     }\n+\n+    @GetMapping(\"/remove-image-pdf\")\n+    @Hidden\n+    public String removeImagePdfForm(Model model) {\n+        model.addAttribute(\"currentPage\", \"remove-image-pdf\");\n+        return \"remove-image-pdf\";\n+    }\n }\n\ndiff --git a/src/main/java/stirling/software/SPDF/service/PdfImageRemovalService.java b/src/main/java/stirling/software/SPDF/service/PdfImageRemovalService.java\n--- a/src/main/java/stirling/software/SPDF/service/PdfImageRemovalService.java\n+++ b/src/main/java/stirling/software/SPDF/service/PdfImageRemovalService.java\n@@ -0,0 +1,43 @@\n+package stirling.software.SPDF.service;\n+\n+import java.io.IOException;\n+\n+import org.apache.pdfbox.cos.COSName;\n+import org.apache.pdfbox.pdmodel.PDDocument;\n+import org.apache.pdfbox.pdmodel.PDPage;\n+import org.apache.pdfbox.pdmodel.PDResources;\n+import org.apache.pdfbox.pdmodel.graphics.PDXObject;\n+import org.springframework.stereotype.Service;\n+\n+/**\n+ * Service class responsible for removing image objects from a PDF document.\n+ */\n+@Service\n+public class PdfImageRemovalService {\n+\n+    /**\n+     * Removes all image objects from the provided PDF document.\n+     *\n+     * This method iterates over each page in the document and removes any\n+     * image XObjects found in the page's resources.\n+     *\n+     * @param document The PDF document from which images will be removed.\n+     * @return The modified PDF document with images removed.\n+     * @throws IOException If an error occurs while processing the PDF document.\n+     */\n+    public PDDocument removeImagesFromPdf(PDDocument document) throws IOException {\n+        // Iterate over each page in the PDF document\n+        for (PDPage page : document.getPages()) {\n+            PDResources resources = page.getResources();\n+            // Iterate over all XObject names in the page's resources\n+            for (COSName name : resources.getXObjectNames()) {\n+                // Check if the XObject is an image\n+                if (resources.isImageXObject(name)) {\n+                    // Remove the image XObject by setting it to null\n+                    resources.put(name, (PDXObject) null);\n+                }\n+            }\n+        }\n+        return document;\n+    }\n+}",
    "output": "Issue1632 remove images (#1645)\n\n* Implemented PdfImageRemovalService.java and PdfImageRemovalController.java. Image can be removed testing using Postman, but the file size doesn't change.\r\n\r\n* Fix removal logic in service file to decrease file size.\r\n\r\n* Implement \"Remove Image\" feature on the website\r\n\r\nUpdated the front-end code to integrate the \"Remove Image\" feature. The new functionality is now fully operational on the website, allowing users to remove images as expected.\r\n\r\n* Add comments to PdfImageRemovalController and PdfImageRemovalService.\r\n\r\n* Change the google material icon in navbar, homepage and remove-image-pdf.html."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/security/RedactController.java b/src/main/java/stirling/software/SPDF/controller/api/security/RedactController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/security/RedactController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/security/RedactController.java\n@@ -1,21 +1,14 @@\n package stirling.software.SPDF.controller.api.security;\n \n import java.awt.Color;\n-import java.awt.image.BufferedImage;\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n import java.util.List;\n \n import org.apache.pdfbox.Loader;\n import org.apache.pdfbox.pdmodel.PDDocument;\n-import org.apache.pdfbox.pdmodel.PDPage;\n import org.apache.pdfbox.pdmodel.PDPageContentStream;\n-import org.apache.pdfbox.pdmodel.PDPageContentStream.AppendMode;\n import org.apache.pdfbox.pdmodel.common.PDRectangle;\n-import org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory;\n-import org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;\n-import org.apache.pdfbox.rendering.ImageType;\n-import org.apache.pdfbox.rendering.PDFRenderer;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.http.ResponseEntity;\n@@ -32,6 +25,7 @@\n import stirling.software.SPDF.model.PDFText;\n import stirling.software.SPDF.model.api.security.RedactPdfRequest;\n import stirling.software.SPDF.pdf.TextFinder;\n+import stirling.software.SPDF.utils.PdfUtils;\n import stirling.software.SPDF.utils.WebResponseUtils;\n \n @RestController\n@@ -81,22 +75,9 @@ public ResponseEntity<byte[]> redactPdf(@ModelAttribute RedactPdfRequest request\n         }\n \n         if (convertPDFToImage) {\n-            PDDocument imageDocument = new PDDocument();\n-            PDFRenderer pdfRenderer = new PDFRenderer(document);\n-            pdfRenderer.setSubsamplingAllowed(true);\n-            for (int page = 0; page < document.getNumberOfPages(); ++page) {\n-                BufferedImage bim = pdfRenderer.renderImageWithDPI(page, 300, ImageType.RGB);\n-                PDPage newPage = new PDPage(new PDRectangle(bim.getWidth(), bim.getHeight()));\n-                imageDocument.addPage(newPage);\n-                PDImageXObject pdImage = LosslessFactory.createFromImage(imageDocument, bim);\n-                PDPageContentStream contentStream =\n-                        new PDPageContentStream(\n-                                imageDocument, newPage, AppendMode.APPEND, true, true);\n-                contentStream.drawImage(pdImage, 0, 0);\n-                contentStream.close();\n-            }\n+            PDDocument convertedPdf = PdfUtils.convertPdfToPdfImage(document);\n             document.close();\n-            document = imageDocument;\n+            document = convertedPdf;\n         }\n \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/api/security/WatermarkController.java b/src/main/java/stirling/software/SPDF/controller/api/security/WatermarkController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/security/WatermarkController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/security/WatermarkController.java\n@@ -36,6 +36,7 @@\n import io.swagger.v3.oas.annotations.tags.Tag;\n \n import stirling.software.SPDF.model.api.security.AddWatermarkRequest;\n+import stirling.software.SPDF.utils.PdfUtils;\n import stirling.software.SPDF.utils.WebResponseUtils;\n \n @RestController\n@@ -60,6 +61,7 @@ public ResponseEntity<byte[]> addWatermark(@ModelAttribute AddWatermarkRequest r\n         float opacity = request.getOpacity();\n         int widthSpacer = request.getWidthSpacer();\n         int heightSpacer = request.getHeightSpacer();\n+        boolean convertPdfToImage = request.isConvertPDFToImage();\n \n         // Load the input PDF\n         PDDocument document = Loader.loadPDF(pdfFile.getBytes());\n@@ -104,6 +106,12 @@ public ResponseEntity<byte[]> addWatermark(@ModelAttribute AddWatermarkRequest r\n             contentStream.close();\n         }\n \n+        if (convertPdfToImage) {\n+            PDDocument convertedPdf = PdfUtils.convertPdfToPdfImage(document);\n+            document.close();\n+            document = convertedPdf;\n+        }\n+\n         return WebResponseUtils.pdfDocToWebResponse(\n                 document,\n                 Filenames.toSimpleFileName(pdfFile.getOriginalFilename())\n\ndiff --git a/src/main/java/stirling/software/SPDF/model/api/security/AddWatermarkRequest.java b/src/main/java/stirling/software/SPDF/model/api/security/AddWatermarkRequest.java\n--- a/src/main/java/stirling/software/SPDF/model/api/security/AddWatermarkRequest.java\n+++ b/src/main/java/stirling/software/SPDF/model/api/security/AddWatermarkRequest.java\n@@ -44,4 +44,7 @@ public class AddWatermarkRequest extends PDFFile {\n \n     @Schema(description = \"The height spacer between watermark elements\", example = \"50\")\n     private int heightSpacer;\n+\n+    @Schema(description = \"Convert the redacted PDF to an image\", defaultValue = \"false\")\n+    private boolean convertPDFToImage;\n }\n\ndiff --git a/src/main/java/stirling/software/SPDF/utils/PdfUtils.java b/src/main/java/stirling/software/SPDF/utils/PdfUtils.java\n--- a/src/main/java/stirling/software/SPDF/utils/PdfUtils.java\n+++ b/src/main/java/stirling/software/SPDF/utils/PdfUtils.java\n@@ -341,6 +341,30 @@ public static byte[] convertFromPdf(\n         }\n     }\n \n+    /**\n+     * Converts a given Pdf file to PDF-Image.\n+     *\n+     * @param document to be converted. Note: the caller is responsible for closing the document\n+     * @return converted document to PDF-Image\n+     * @throws IOException if conversion fails\n+     */\n+    public static PDDocument convertPdfToPdfImage(PDDocument document) throws IOException {\n+        PDDocument imageDocument = new PDDocument();\n+        PDFRenderer pdfRenderer = new PDFRenderer(document);\n+        pdfRenderer.setSubsamplingAllowed(true);\n+        for (int page = 0; page < document.getNumberOfPages(); ++page) {\n+            BufferedImage bim = pdfRenderer.renderImageWithDPI(page, 300, ImageType.RGB);\n+            PDPage newPage = new PDPage(new PDRectangle(bim.getWidth(), bim.getHeight()));\n+            imageDocument.addPage(newPage);\n+            PDImageXObject pdImage = LosslessFactory.createFromImage(imageDocument, bim);\n+            PDPageContentStream contentStream =\n+                    new PDPageContentStream(imageDocument, newPage, AppendMode.APPEND, true, true);\n+            contentStream.drawImage(pdImage, 0, 0);\n+            contentStream.close();\n+        }\n+        return imageDocument;\n+    }\n+\n     private static BufferedImage prepareImageForPdfToImage(\n             int maxWidth, int height, String imageType) {\n         BufferedImage combined;",
    "output": "Add a checkbox to WatermarkController to convert the pdf to pdf-image (#1633)\n\n* Add a checkbox to WatermarkController to convert the pdf to pdf-image\r\n\r\n* 381: Fix messages_en_GB\r\n\r\n---------\r\n\r\nCo-authored-by: Anthony Stirling <77850077+Frooodle@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/test/java/stirling/software/SPDF/SPdfApplicationTest.java b/src/test/java/stirling/software/SPDF/SPdfApplicationTest.java\n--- a/src/test/java/stirling/software/SPDF/SPdfApplicationTest.java\n+++ b/src/test/java/stirling/software/SPDF/SPdfApplicationTest.java\n@@ -1,10 +1,11 @@\n-package stirling.software.SPDF.utils;\n+package stirling.software.SPDF;\n \n import static org.junit.jupiter.api.Assertions.*;\n \n import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.nio.file.Paths;\n \n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n@@ -14,7 +15,6 @@\n import org.mockito.junit.jupiter.MockitoExtension;\n import org.springframework.core.env.Environment;\n \n-import stirling.software.SPDF.SPdfApplication;\n import stirling.software.SPDF.model.ApplicationProperties;\n \n @ExtendWith(MockitoExtension.class)\n@@ -43,12 +43,43 @@ public void testSetServerPortStatic() {\n \n     @Test\n     public void testMainApplicationStartup() throws IOException, InterruptedException {\n+        // Setup mock environment for the main method\n+        Path configPath = Path.of(\"test/configs\");\n+        Path settingsPath = Paths.get(\"test/configs/settings.yml\");\n+        Path customSettingsPath = Paths.get(\"test/configs/custom_settings.yml\");\n+        Path staticPath = Path.of(\"test/customFiles/static/\");\n+        Path templatesPath = Path.of(\"test/customFiles/templates/\");\n+\n+        // Ensure the files do not exist for the test\n+        if (Files.exists(settingsPath)) {\n+            Files.delete(settingsPath);\n+        }\n+        if (Files.exists(customSettingsPath)) {\n+            Files.delete(customSettingsPath);\n+        }\n+        if (Files.exists(staticPath)) {\n+            Files.delete(staticPath);\n+        }\n+        if (Files.exists(templatesPath)) {\n+            Files.delete(templatesPath);\n+        }\n+\n+        // Ensure the directories are created for testing\n+        Files.createDirectories(configPath);\n+        Files.createDirectories(staticPath);\n+        Files.createDirectories(templatesPath);\n+\n+        Files.createFile(settingsPath);\n+        Files.createFile(customSettingsPath);\n+\n         // Run the main method\n         SPdfApplication.main(new String[]{});\n \n         // Verify that the directories were created\n-        assertTrue(Files.exists(Path.of(\"customFiles/static/\")));\n-        assertTrue(Files.exists(Path.of(\"customFiles/templates/\")));\n+        assertTrue(Files.exists(settingsPath));\n+        assertTrue(Files.exists(customSettingsPath));\n+        assertTrue(Files.exists(staticPath));\n+        assertTrue(Files.exists(templatesPath));\n     }\n \n     @Test\n\ndiff --git a/src/test/java/stirling/software/SPDF/utils/FileToPdfTest.java b/src/test/java/stirling/software/SPDF/utils/FileToPdfTest.java\n--- a/src/test/java/stirling/software/SPDF/utils/FileToPdfTest.java\n+++ b/src/test/java/stirling/software/SPDF/utils/FileToPdfTest.java\n@@ -13,7 +13,7 @@ public class FileToPdfTest {\n     @Test\n     public void testConvertHtmlToPdf() {\n         HTMLToPdfRequest request = new HTMLToPdfRequest();\n-        byte[] fileBytes = new byte[10]; // Sample file bytes\n+        byte[] fileBytes = new byte[0]; // Sample file bytes\n         String fileName = \"test.html\"; // Sample file name\n         boolean htmlFormatsInstalled = true; // Sample boolean value\n ",
    "output": "Fix: fail JUnit test (#1625)"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/misc/BlankPageController.java b/src/main/java/stirling/software/SPDF/controller/api/misc/BlankPageController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/misc/BlankPageController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/misc/BlankPageController.java\n@@ -1,12 +1,12 @@\n package stirling.software.SPDF.controller.api.misc;\n \n import java.awt.image.BufferedImage;\n+import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n-import java.util.stream.Collectors;\n-import java.util.stream.IntStream;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n \n import org.apache.pdfbox.Loader;\n import org.apache.pdfbox.pdmodel.PDDocument;\n@@ -17,6 +17,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n import org.springframework.web.bind.annotation.ModelAttribute;\n import org.springframework.web.bind.annotation.PostMapping;\n@@ -50,66 +51,89 @@ public ResponseEntity<byte[]> removeBlankPages(@ModelAttribute RemoveBlankPagesR\n         int threshold = request.getThreshold();\n         float whitePercent = request.getWhitePercent();\n \n-        PDDocument document = null;\n-        try {\n-            document = Loader.loadPDF(inputFile.getBytes());\n+        try (PDDocument document = Loader.loadPDF(inputFile.getBytes())) {\n             PDPageTree pages = document.getDocumentCatalog().getPages();\n             PDFTextStripper textStripper = new PDFTextStripper();\n \n-            List<Integer> pagesToKeepIndex = new ArrayList<>();\n+            List<PDPage> nonBlankPages = new ArrayList<>();\n+            List<PDPage> blankPages = new ArrayList<>();\n             int pageIndex = 0;\n+\n             PDFRenderer pdfRenderer = new PDFRenderer(document);\n             pdfRenderer.setSubsamplingAllowed(true);\n             for (PDPage page : pages) {\n-                logger.info(\"checking page \" + pageIndex);\n+                logger.info(\"checking page {}\", pageIndex);\n                 textStripper.setStartPage(pageIndex + 1);\n                 textStripper.setEndPage(pageIndex + 1);\n                 String pageText = textStripper.getText(document);\n                 boolean hasText = !pageText.trim().isEmpty();\n \n-                Boolean blank = true;\n+                boolean blank = true;\n                 if (hasText) {\n-                    logger.info(\"page \" + pageIndex + \" has text, not blank\");\n+                    logger.info(\"page {} has text, not blank\", pageIndex);\n                     blank = false;\n                 } else {\n                     boolean hasImages = PdfUtils.hasImagesOnPage(page);\n                     if (hasImages) {\n-                        logger.info(\"page \" + pageIndex + \" has image, running blank detection\");\n+                        logger.info(\"page {} has image, running blank detection\", pageIndex);\n                         // Render image and save as temp file\n                         BufferedImage image = pdfRenderer.renderImageWithDPI(pageIndex, 30);\n                         blank = isBlankImage(image, threshold, whitePercent, threshold);\n                     }\n                 }\n \n                 if (blank) {\n-                    logger.info(\"Skipping, Image was  blank for page #\" + pageIndex);\n+                    logger.info(\"Skipping, Image was  blank for page #{}\", pageIndex);\n+                    blankPages.add(page);\n                 } else {\n-                    logger.info(\"page \" + pageIndex + \" has image which is not blank\");\n-                    pagesToKeepIndex.add(pageIndex);\n+                    logger.info(\"page {} has image which is not blank\", pageIndex);\n+                    nonBlankPages.add(page);\n                 }\n \n                 pageIndex++;\n             }\n-            // Remove pages not present in pagesToKeepIndex\n-            List<Integer> pageIndices =\n-                    IntStream.range(0, pages.getCount()).boxed().collect(Collectors.toList());\n-            Collections.reverse(pageIndices); // Reverse to prevent index shifting during removal\n-            for (Integer i : pageIndices) {\n-                if (!pagesToKeepIndex.contains(i)) {\n-                    pages.remove(i);\n-                }\n-            }\n \n-            return WebResponseUtils.pdfDocToWebResponse(\n-                    document,\n+            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+            ZipOutputStream zos = new ZipOutputStream(baos);\n+\n+            String filename =\n                     Filenames.toSimpleFileName(inputFile.getOriginalFilename())\n-                                    .replaceFirst(\"[.][^.]+$\", \"\")\n-                            + \"_blanksRemoved.pdf\");\n+                            .replaceFirst(\"[.][^.]+$\", \"\");\n+\n+            if (!nonBlankPages.isEmpty()) {\n+                createZipEntry(zos, nonBlankPages, filename + \"_nonBlankPages.pdf\");\n+            } else {\n+                createZipEntry(zos, blankPages, filename + \"_allBlankPages.pdf\");\n+            }\n+\n+            if (!nonBlankPages.isEmpty() && !blankPages.isEmpty()) {\n+                createZipEntry(zos, blankPages, filename + \"_blankPages.pdf\");\n+            }\n+\n+            zos.close();\n+\n+            logger.info(\"Returning ZIP file: {}\", filename + \"_processed.zip\");\n+            return WebResponseUtils.boasToWebResponse(\n+                    baos, filename + \"_processed.zip\", MediaType.APPLICATION_OCTET_STREAM);\n+\n         } catch (IOException e) {\n             logger.error(\"exception\", e);\n             return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);\n-        } finally {\n-            if (document != null) document.close();\n+        }\n+    }\n+\n+    public void createZipEntry(ZipOutputStream zos, List<PDPage> pages, String entryName)\n+            throws IOException {\n+        try (PDDocument document = new PDDocument()) {\n+\n+            for (PDPage page : pages) {\n+                document.addPage(page);\n+            }\n+\n+            ZipEntry zipEntry = new ZipEntry(entryName);\n+            zos.putNextEntry(zipEntry);\n+            document.save(zos);\n+            zos.closeEntry();\n         }\n     }\n ",
    "output": "blank pages returns removed pages for verification #1574  (#1619)\n\nseparated blank and non-blank pages and created unified ZIP archive\r\n\r\nCo-authored-by: mannam <101550345+ManoharMannam@users.noreply.github.com>\r\nCo-authored-by: Anthony Stirling <77850077+Frooodle@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/SPdfApplication.java b/src/main/java/stirling/software/SPDF/SPdfApplication.java\n--- a/src/main/java/stirling/software/SPDF/SPdfApplication.java\n+++ b/src/main/java/stirling/software/SPDF/SPdfApplication.java\n@@ -45,7 +45,6 @@ public void init() {\n         // Check if the BROWSER_OPEN environment variable is set to true\n         String browserOpenEnv = env.getProperty(\"BROWSER_OPEN\");\n         boolean browserOpen = browserOpenEnv != null && \"true\".equalsIgnoreCase(browserOpenEnv);\n-\n         if (browserOpen) {\n             try {\n                 String url = \"http://localhost:\" + getNonStaticPort();",
    "output": "Update test.yml (#1623)\n\n* Update test.yml\r\n\r\n* Update SPdfApplication.java"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/SPdfApplication.java b/src/main/java/stirling/software/SPDF/SPdfApplication.java\n--- a/src/main/java/stirling/software/SPDF/SPdfApplication.java\n+++ b/src/main/java/stirling/software/SPDF/SPdfApplication.java\n@@ -79,13 +79,13 @@ public static void main(String[] args) throws IOException, InterruptedException\n \n         // custom javs settings file\n         if (Files.exists(Paths.get(\"configs/custom_settings.yml\"))) {\n-            String existing = propertyFiles.getOrDefault(\"spring.config.additional-location\", \"\");\n-            if (!existing.isEmpty()) {\n-                existing += \",\";\n+            String existingLocation = propertyFiles.getOrDefault(\"spring.config.additional-location\", \"\");\n+            if (!existingLocation.isEmpty()) {\n+                existingLocation += \",\";\n             }\n             propertyFiles.put(\n                     \"spring.config.additional-location\",\n-                    existing + \"file:configs/custom_settings.yml\");\n+                    existingLocation + \"file:configs/custom_settings.yml\");\n         } else {\n             logger.warn(\"Custom configuration file 'configs/custom_settings.yml' does not exist.\");\n         }\n\ndiff --git a/src/main/java/stirling/software/SPDF/config/CleanUrlInterceptor.java b/src/main/java/stirling/software/SPDF/config/CleanUrlInterceptor.java\n--- a/src/main/java/stirling/software/SPDF/config/CleanUrlInterceptor.java\n+++ b/src/main/java/stirling/software/SPDF/config/CleanUrlInterceptor.java\n@@ -32,25 +32,25 @@ public boolean preHandle(\n         String queryString = request.getQueryString();\n         if (queryString != null && !queryString.isEmpty()) {\n             String requestURI = request.getRequestURI();\n-            Map<String, String> parameters = new HashMap<>();\n+            Map<String, String> allowedParameters = new HashMap<>();\n \n             // Keep only the allowed parameters\n             String[] queryParameters = queryString.split(\"&\");\n             for (String param : queryParameters) {\n-                String[] keyValue = param.split(\"=\");\n-                if (keyValue.length != 2) {\n+                String[] keyValuePair = param.split(\"=\");\n+                if (keyValuePair.length != 2) {\n                     continue;\n                 }\n-                if (ALLOWED_PARAMS.contains(keyValue[0])) {\n-                    parameters.put(keyValue[0], keyValue[1]);\n+                if (ALLOWED_PARAMS.contains(keyValuePair[0])) {\n+                    allowedParameters.put(keyValuePair[0], keyValuePair[1]);\n                 }\n             }\n \n             // If there are any parameters that are not allowed\n-            if (parameters.size() != queryParameters.length) {\n+            if (allowedParameters.size() != queryParameters.length) {\n                 // Construct new query string\n                 StringBuilder newQueryString = new StringBuilder();\n-                for (Map.Entry<String, String> entry : parameters.entrySet()) {\n+                for (Map.Entry<String, String> entry : allowedParameters.entrySet()) {\n                     if (newQueryString.length() > 0) {\n                         newQueryString.append(\"&\");\n                     }",
    "output": "Refactored Identifiers (#1609)"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/database/DatabaseBackupHelper.java b/src/main/java/stirling/software/SPDF/config/security/database/DatabaseBackupHelper.java\n--- a/src/main/java/stirling/software/SPDF/config/security/database/DatabaseBackupHelper.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/database/DatabaseBackupHelper.java\n@@ -179,11 +179,12 @@ public Path getBackupFilePath(String fileName) {\n     }\n \n     private boolean executeDatabaseScript(Path scriptPath) {\n-        try (Connection conn = DriverManager.getConnection(url, \"sa\", \"\");\n-                Statement stmt = conn.createStatement()) {\n+        String query = \"RUNSCRIPT from ?;\";\n \n-            String query = \"RUNSCRIPT from '\" + scriptPath.toString() + \"';\";\n-            stmt.execute(query);\n+        try (Connection conn = DriverManager.getConnection(url, \"sa\", \"\");\n+                PreparedStatement stmt = conn.prepareStatement(query)) {\n+            stmt.setString(1, scriptPath.toString());\n+            stmt.execute();\n             log.info(\"Database import completed: {}\", scriptPath);\n             return true;\n         } catch (SQLException e) {\n\ndiff --git a/src/main/java/stirling/software/SPDF/model/ApplicationProperties.java b/src/main/java/stirling/software/SPDF/model/ApplicationProperties.java\n--- a/src/main/java/stirling/software/SPDF/model/ApplicationProperties.java\n+++ b/src/main/java/stirling/software/SPDF/model/ApplicationProperties.java\n@@ -360,6 +360,8 @@ public String toString() {\n                         + useAsUsername\n                         + \", provider=\"\n                         + provider\n+                        + \", client=\"\n+                        + client\n                         + \", scopes=\"\n                         + scopes\n                         + \"]\";",
    "output": "minor changes in the DEV tools and more (#1578)"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/repository/AuthorityRepository.java b/src/main/java/stirling/software/SPDF/repository/AuthorityRepository.java\n--- a/src/main/java/stirling/software/SPDF/repository/AuthorityRepository.java\n+++ b/src/main/java/stirling/software/SPDF/repository/AuthorityRepository.java\n@@ -3,9 +3,11 @@\n import java.util.Set;\n \n import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.stereotype.Repository;\n \n import stirling.software.SPDF.model.Authority;\n \n+@Repository\n public interface AuthorityRepository extends JpaRepository<Authority, Long> {\n     // Set<Authority> findByUsername(String username);\n     Set<Authority> findByUser_Username(String username);\n\ndiff --git a/src/main/java/stirling/software/SPDF/repository/PersistentLoginRepository.java b/src/main/java/stirling/software/SPDF/repository/PersistentLoginRepository.java\n--- a/src/main/java/stirling/software/SPDF/repository/PersistentLoginRepository.java\n+++ b/src/main/java/stirling/software/SPDF/repository/PersistentLoginRepository.java\n@@ -1,7 +1,9 @@\n package stirling.software.SPDF.repository;\n \n import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.stereotype.Repository;\n \n import stirling.software.SPDF.model.PersistentLogin;\n \n+@Repository\n public interface PersistentLoginRepository extends JpaRepository<PersistentLogin, String> {}\n\ndiff --git a/src/main/java/stirling/software/SPDF/repository/UserRepository.java b/src/main/java/stirling/software/SPDF/repository/UserRepository.java\n--- a/src/main/java/stirling/software/SPDF/repository/UserRepository.java\n+++ b/src/main/java/stirling/software/SPDF/repository/UserRepository.java\n@@ -3,10 +3,12 @@\n import java.util.Optional;\n \n import org.springframework.data.jpa.repository.JpaRepository;\n+import org.springframework.stereotype.Repository;\n \n import stirling.software.SPDF.model.User;\n \n-public interface UserRepository extends JpaRepository<User, String> {\n+@Repository\n+public interface UserRepository extends JpaRepository<User, Long> {\n     Optional<User> findByUsernameIgnoreCase(String username);\n \n     Optional<User> findByUsername(String username);",
    "output": "Adding declaration as repository component & changing primary key type (#1559)\n\n* Adding declaration as repository component & changing primary key type\n\n* Update AuthorityRepository.java\n\n* Update PersistentLoginRepository.java\n\n---------\n\nCo-authored-by: Anthony Stirling <77850077+Frooodle@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java b/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java\n@@ -99,7 +99,7 @@ public ResponseEntity<byte[]> optimizePdf(@ModelAttribute OptimizePdfRequest req\n                 List<String> command = new ArrayList<>();\n                 command.add(\"gs\");\n                 command.add(\"-sDEVICE=pdfwrite\");\n-                command.add(\"-dCompatibilityLevel=1.4\");\n+                command.add(\"-dCompatibilityLevel=1.5\");\n \n                 switch (optimizeLevel) {\n                     case 1:",
    "output": "version bump, multi file fix and disable survey (#1550)\n\n* version bump, multi file fix and disable survey\r\n\r\n* example test stuff\r\n\r\n* logs\r\n\r\n* Update docker-compose-latest.yml\r\n\r\n---------\r\n\r\nCo-authored-by: a <a>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/database/DatabaseBackupHelper.java b/src/main/java/stirling/software/SPDF/config/security/database/DatabaseBackupHelper.java\n--- a/src/main/java/stirling/software/SPDF/config/security/database/DatabaseBackupHelper.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/database/DatabaseBackupHelper.java\n@@ -8,6 +8,7 @@\n import java.nio.file.attribute.BasicFileAttributes;\n import java.sql.Connection;\n import java.sql.DriverManager;\n+import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.sql.Statement;\n@@ -131,11 +132,12 @@ public void exportDatabase() throws IOException {\n         DateTimeFormatter myFormatObj = DateTimeFormatter.ofPattern(\"yyyyMMddHHmm\");\n         Path insertOutputFilePath =\n                 this.getBackupFilePath(\"backup_\" + dateNow.format(myFormatObj) + \".sql\");\n-        String query = \"SCRIPT SIMPLE COLUMNS DROP to '\" + insertOutputFilePath.toString() + \"';\";\n+        String query = \"SCRIPT SIMPLE COLUMNS DROP to ?;\";\n \n         try (Connection conn = DriverManager.getConnection(url, \"sa\", \"\");\n-                Statement stmt = conn.createStatement()) {\n-            stmt.execute(query);\n+                PreparedStatement stmt = conn.prepareStatement(query)) {\n+            stmt.setString(1, insertOutputFilePath.toString());\n+            stmt.execute();\n             log.info(\"Database export completed: {}\", insertOutputFilePath);\n         } catch (SQLException e) {\n             log.error(\"Error during database export: {}\", e.getMessage(), e);",
    "output": "Refactored to use parameterized SQL APIs (#1545)\n\nCo-authored-by: pixeebot[bot] <104101892+pixeebot[bot]@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/security/PasswordController.java b/src/main/java/stirling/software/SPDF/controller/api/security/PasswordController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/security/PasswordController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/security/PasswordController.java\n@@ -68,7 +68,6 @@ public ResponseEntity<byte[]> addPassword(@ModelAttribute AddPasswordRequest req\n         boolean canModifyAnnotations = request.isCanModifyAnnotations();\n         boolean canPrint = request.isCanPrint();\n         boolean canPrintFaithful = request.isCanPrintFaithful();\n-        System.out.println(fileInput.getOriginalFilename());\n         PDDocument document = Loader.loadPDF(fileInput.getBytes());\n         AccessPermission ap = new AccessPermission();\n         ap.setCanAssembleDocument(!canAssembleDocument);",
    "output": "Update PasswordController.java"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/security/PasswordController.java b/src/main/java/stirling/software/SPDF/controller/api/security/PasswordController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/security/PasswordController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/security/PasswordController.java\n@@ -68,7 +68,7 @@ public ResponseEntity<byte[]> addPassword(@ModelAttribute AddPasswordRequest req\n         boolean canModifyAnnotations = request.isCanModifyAnnotations();\n         boolean canPrint = request.isCanPrint();\n         boolean canPrintFaithful = request.isCanPrintFaithful();\n-\n+        System.out.println(fileInput.getOriginalFilename());\n         PDDocument document = Loader.loadPDF(fileInput.getBytes());\n         AccessPermission ap = new AccessPermission();\n         ap.setCanAssembleDocument(!canAssembleDocument);",
    "output": "auto decrypt, update discord, fix multi file support for some inputs"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/web/AccountWebController.java b/src/main/java/stirling/software/SPDF/controller/web/AccountWebController.java\n--- a/src/main/java/stirling/software/SPDF/controller/web/AccountWebController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/web/AccountWebController.java\n@@ -43,6 +43,7 @@ public class AccountWebController {\n \n     @GetMapping(\"/login\")\n     public String login(HttpServletRequest request, Model model, Authentication authentication) {\n+\n         if (authentication != null && authentication.isAuthenticated()) {\n             return \"redirect:/\";\n         }\n@@ -72,6 +73,10 @@ public String login(HttpServletRequest request, Model model, Authentication auth\n                 }\n             }\n         }\n+        // Remove any null keys/values from the providerList\n+        providerList\n+                .entrySet()\n+                .removeIf(entry -> entry.getKey() == null || entry.getValue() == null);\n         model.addAttribute(\"providerlist\", providerList);\n \n         model.addAttribute(\"loginMethod\", applicationProperties.getSecurity().getLoginMethod());",
    "output": "removes empty list entries (#1523)"
  },
  {
    "input": "diff --git a/src/test/java/stirling/software/SPDF/utils/SPdfApplicationTest.java b/src/test/java/stirling/software/SPDF/utils/SPdfApplicationTest.java\n--- a/src/test/java/stirling/software/SPDF/utils/SPdfApplicationTest.java\n+++ b/src/test/java/stirling/software/SPDF/utils/SPdfApplicationTest.java\n@@ -5,7 +5,6 @@\n import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n-import java.nio.file.Paths;\n \n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n@@ -44,18 +43,6 @@ public void testSetServerPortStatic() {\n \n     @Test\n     public void testMainApplicationStartup() throws IOException, InterruptedException {\n-        // Setup mock environment for the main method\n-        Path settingsPath = Paths.get(\"configs/settings.yml\");\n-        Path customSettingsPath = Paths.get(\"configs/custom_settings.yml\");\n-\n-        // Ensure the files do not exist for the test\n-        if (Files.exists(settingsPath)) {\n-            Files.delete(settingsPath);\n-        }\n-        if (Files.exists(customSettingsPath)) {\n-            Files.delete(customSettingsPath);\n-        }\n-\n         // Run the main method\n         SPdfApplication.main(new String[]{});\n ",
    "output": "[Bugfix] Prevents the deletion of productive data (#1522)\n\nprevents the deletion of productive data"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/model/User.java b/src/main/java/stirling/software/SPDF/model/User.java\n--- a/src/main/java/stirling/software/SPDF/model/User.java\n+++ b/src/main/java/stirling/software/SPDF/model/User.java\n@@ -16,6 +16,7 @@\n import jakarta.persistence.GenerationType;\n import jakarta.persistence.Id;\n import jakarta.persistence.JoinColumn;\n+import jakarta.persistence.Lob;\n import jakarta.persistence.MapKeyColumn;\n import jakarta.persistence.OneToMany;\n import jakarta.persistence.Table;\n@@ -55,7 +56,8 @@ public class User {\n \n     @ElementCollection\n     @MapKeyColumn(name = \"setting_key\")\n-    @Column(name = \"setting_value\")\n+    @Lob\n+    @Column(name = \"setting_value\", columnDefinition = \"CLOB\")\n     @CollectionTable(name = \"user_settings\", joinColumns = @JoinColumn(name = \"user_id\"))\n     private Map<String, String> settings = new HashMap<>(); // Key-value pairs of settings.\n ",
    "output": "Fix: synchronizing the browser settings to the database  #1481 (#1510)\n\nCo-authored-by: Anthony Stirling <77850077+Frooodle@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/UserBasedRateLimitingFilter.java b/src/main/java/stirling/software/SPDF/config/security/UserBasedRateLimitingFilter.java\n--- a/src/main/java/stirling/software/SPDF/config/security/UserBasedRateLimitingFilter.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/UserBasedRateLimitingFilter.java\n@@ -19,7 +19,6 @@\n import io.github.bucket4j.Bandwidth;\n import io.github.bucket4j.Bucket;\n import io.github.bucket4j.ConsumptionProbe;\n-import io.github.bucket4j.Refill;\n import io.github.pixee.security.Newlines;\n \n import jakarta.servlet.FilterChain;\n@@ -142,7 +141,10 @@ private void processRequest(\n \n     private Bucket createUserBucket(int limitPerDay) {\n         Bandwidth limit =\n-                Bandwidth.classic(limitPerDay, Refill.intervally(limitPerDay, Duration.ofDays(1)));\n+                Bandwidth.builder()\n+                        .capacity(limitPerDay)\n+                        .refillIntervally(limitPerDay, Duration.ofDays(1))\n+                        .build();\n         return Bucket.builder().addLimit(limit).build();\n     }\n }",
    "output": "Updating build.gradle libraries (#1465)"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/utils/PdfUtils.java b/src/main/java/stirling/software/SPDF/utils/PdfUtils.java\n--- a/src/main/java/stirling/software/SPDF/utils/PdfUtils.java\n+++ b/src/main/java/stirling/software/SPDF/utils/PdfUtils.java\n@@ -1,27 +1,27 @@\n package stirling.software.SPDF.utils;\n \n-import java.awt.Graphics;\n+import java.awt.*;\n import java.awt.image.BufferedImage;\n import java.awt.image.RenderedImage;\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.Calendar;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.zip.ZipEntry;\n import java.util.zip.ZipOutputStream;\n \n-import javax.imageio.IIOImage;\n-import javax.imageio.ImageIO;\n-import javax.imageio.ImageReader;\n-import javax.imageio.ImageWriteParam;\n-import javax.imageio.ImageWriter;\n+import javax.imageio.*;\n import javax.imageio.stream.ImageOutputStream;\n \n import org.apache.pdfbox.Loader;\n import org.apache.pdfbox.cos.COSName;\n-import org.apache.pdfbox.pdmodel.*;\n+import org.apache.pdfbox.pdmodel.PDDocument;\n+import org.apache.pdfbox.pdmodel.PDPage;\n+import org.apache.pdfbox.pdmodel.PDPageContentStream;\n import org.apache.pdfbox.pdmodel.PDPageContentStream.AppendMode;\n+import org.apache.pdfbox.pdmodel.PDResources;\n import org.apache.pdfbox.pdmodel.common.PDRectangle;\n import org.apache.pdfbox.pdmodel.graphics.PDXObject;\n import org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject;\n@@ -245,19 +245,64 @@ public static byte[] convertFromPdf(\n                     writer.dispose();\n                 } else {\n                     // Combine all images into a single big image\n-                    BufferedImage image = pdfRenderer.renderImageWithDPI(0, DPI, colorType);\n+\n+                    // Calculate the combined image dimensions\n+                    int maxWidth = 0;\n+                    int totalHeight = 0;\n+\n+                    BufferedImage pdfSizeImage = null;\n+                    int pdfSizeImageIndex = -1;\n+\n+                    // Using a map to store the rendered dimensions of each page size\n+                    // to avoid rendering the same page sizes multiple times\n+                    HashMap<PdfRenderSettingsKey, PdfImageDimensionValue> pageSizes =\n+                            new HashMap<>();\n+                    for (int i = 0; i < pageCount; ++i) {\n+                        PDPage page = document.getPage(i);\n+                        PDRectangle mediaBox = page.getMediaBox();\n+                        int rotation = page.getRotation();\n+                        PdfRenderSettingsKey settings =\n+                                new PdfRenderSettingsKey(\n+                                        mediaBox.getWidth(), mediaBox.getHeight(), rotation);\n+                        PdfImageDimensionValue dimension = pageSizes.get(settings);\n+                        if (dimension == null) {\n+                            // Render the image to get the dimensions\n+                            pdfSizeImage = pdfRenderer.renderImageWithDPI(i, DPI, colorType);\n+                            pdfSizeImageIndex = i;\n+                            dimension =\n+                                    new PdfImageDimensionValue(\n+                                            pdfSizeImage.getWidth(), pdfSizeImage.getHeight());\n+                            pageSizes.put(settings, dimension);\n+                            if (pdfSizeImage.getWidth() > maxWidth) {\n+                                maxWidth = pdfSizeImage.getWidth();\n+                            }\n+                        }\n+                        totalHeight += dimension.height();\n+                    }\n+\n+                    // Create a new BufferedImage to store the combined images\n                     BufferedImage combined =\n-                            new BufferedImage(\n-                                    image.getWidth(),\n-                                    image.getHeight() * pageCount,\n-                                    BufferedImage.TYPE_INT_RGB);\n+                            prepareImageForPdfToImage(maxWidth, totalHeight, imageType);\n                     Graphics g = combined.getGraphics();\n \n+                    int currentHeight = 0;\n+                    BufferedImage pageImage;\n+\n+                    // Check if the first image is the last rendered image\n+                    boolean firstImageAlreadyRendered = pdfSizeImageIndex == 0;\n+\n                     for (int i = 0; i < pageCount; ++i) {\n-                        if (i != 0) {\n-                            image = pdfRenderer.renderImageWithDPI(i, DPI, colorType);\n+                        if (firstImageAlreadyRendered && i == 0) {\n+                            pageImage = pdfSizeImage;\n+                        } else {\n+                            pageImage = pdfRenderer.renderImageWithDPI(i, DPI, colorType);\n                         }\n-                        g.drawImage(image, 0, i * image.getHeight(), null);\n+\n+                        // Calculate the x-coordinate to center the image\n+                        int x = (maxWidth - pageImage.getWidth()) / 2;\n+\n+                        g.drawImage(pageImage, x, currentHeight, null);\n+                        currentHeight += pageImage.getHeight();\n                     }\n \n                     // Write the image to the output stream\n@@ -296,6 +341,23 @@ public static byte[] convertFromPdf(\n         }\n     }\n \n+    private static BufferedImage prepareImageForPdfToImage(\n+            int maxWidth, int height, String imageType) {\n+        BufferedImage combined;\n+        if (\"png\".equalsIgnoreCase(imageType)) {\n+            combined = new BufferedImage(maxWidth, height, BufferedImage.TYPE_INT_ARGB);\n+        } else {\n+            combined = new BufferedImage(maxWidth, height, BufferedImage.TYPE_INT_RGB);\n+        }\n+        if (!\"png\".equalsIgnoreCase(imageType)) {\n+            Graphics g = combined.getGraphics();\n+            g.setColor(Color.WHITE);\n+            g.fillRect(0, 0, combined.getWidth(), combined.getHeight());\n+            g.dispose();\n+        }\n+        return combined;\n+    }\n+\n     public static byte[] imageToPdf(\n             MultipartFile[] files, String fitOption, boolean autoRotate, String colorType)\n             throws IOException {\n@@ -443,4 +505,10 @@ public static void setMetadataToPdf(PDDocument pdf, PdfMetadata pdfMetadata) {\n         pdf.getDocumentInformation().setCreationDate(pdfMetadata.getCreationDate());\n         pdf.getDocumentInformation().setModificationDate(Calendar.getInstance());\n     }\n+\n+    /** Key for storing the dimensions of a rendered image in a map. */\n+    private record PdfRenderSettingsKey(float mediaBoxWidth, float mediaBoxHeight, int rotation) {}\n+\n+    /** Value for storing the dimensions of a rendered image in a map. */\n+    private record PdfImageDimensionValue(int width, int height) {}\n }",
    "output": "PDF-to-Image different page formats fix (#1460)\n\n* Improve the PDF rendering process for pages of varying sizes\r\n\r\nThis commit includes changes to handle the rendering of PDF documents with pages of different sizes. The updated code calculates the dimensions of each page upfront and assembles a final combined image that accommodates for the differing page dimensions. This approach avoids repetitive renderings of the same page sizes.\r\n\r\n* Refactor image preparation for Pdf to Image"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/utils/PDFToFile.java b/src/main/java/stirling/software/SPDF/utils/PDFToFile.java\n--- a/src/main/java/stirling/software/SPDF/utils/PDFToFile.java\n+++ b/src/main/java/stirling/software/SPDF/utils/PDFToFile.java\n@@ -140,6 +140,8 @@ public ResponseEntity<byte[]> processPdfToOfficeFormat(\n                     new ArrayList<>(\n                             Arrays.asList(\n                                     \"soffice\",\n+                                    \"--headless\",\n+                                    \"--nologo\",\n                                     \"--infilter=\" + libreOfficeFilter,\n                                     \"--convert-to\",\n                                     outputFormat,",
    "output": "When converting PDF to word, add parameters to speed up soffice startup (#1450)\n\nWhen converting PDF to word, add parameters to speed up soffice startup"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/RearrangePagesPDFController.java b/src/main/java/stirling/software/SPDF/controller/api/RearrangePagesPDFController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/RearrangePagesPDFController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/RearrangePagesPDFController.java\n@@ -145,6 +145,28 @@ private List<Integer> oddEvenSplit(int totalPages) {\n         return newPageOrder;\n     }\n \n+    /**\n+     * Rearrange pages in a PDF file by merging odd and even pages. The first half of the pages will\n+     * be the odd pages, and the second half will be the even pages as input. <br>\n+     * This method is visible for testing purposes only.\n+     *\n+     * @param totalPages Total number of pages in the PDF file.\n+     * @return List of page numbers in the new order. The first page is 0.\n+     */\n+    List<Integer> oddEvenMerge(int totalPages) {\n+        List<Integer> newPageOrderZeroBased = new ArrayList<>();\n+        int numberOfOddPages = (totalPages + 1) / 2;\n+\n+        for (int oneBasedIndex = 1; oneBasedIndex < (numberOfOddPages + 1); oneBasedIndex++) {\n+            newPageOrderZeroBased.add((oneBasedIndex - 1));\n+            if (numberOfOddPages + oneBasedIndex <= totalPages) {\n+                newPageOrderZeroBased.add((numberOfOddPages + oneBasedIndex - 1));\n+            }\n+        }\n+\n+        return newPageOrderZeroBased;\n+    }\n+\n     private List<Integer> processSortTypes(String sortTypes, int totalPages) {\n         try {\n             SortTypes mode = SortTypes.valueOf(sortTypes.toUpperCase());\n@@ -159,6 +181,8 @@ private List<Integer> processSortTypes(String sortTypes, int totalPages) {\n                     return sideStitchBooklet(totalPages);\n                 case ODD_EVEN_SPLIT:\n                     return oddEvenSplit(totalPages);\n+                case ODD_EVEN_MERGE:\n+                    return oddEvenMerge(totalPages);\n                 case REMOVE_FIRST:\n                     return removeFirst(totalPages);\n                 case REMOVE_LAST:\n\ndiff --git a/src/main/java/stirling/software/SPDF/model/SortTypes.java b/src/main/java/stirling/software/SPDF/model/SortTypes.java\n--- a/src/main/java/stirling/software/SPDF/model/SortTypes.java\n+++ b/src/main/java/stirling/software/SPDF/model/SortTypes.java\n@@ -6,6 +6,7 @@ public enum SortTypes {\n     BOOKLET_SORT,\n     SIDE_STITCH_BOOKLET_SORT,\n     ODD_EVEN_SPLIT,\n+    ODD_EVEN_MERGE,\n     REMOVE_FIRST,\n     REMOVE_LAST,\n     REMOVE_FIRST_AND_LAST,\n\ndiff --git a/src/main/java/stirling/software/SPDF/model/api/general/RearrangePagesRequest.java b/src/main/java/stirling/software/SPDF/model/api/general/RearrangePagesRequest.java\n--- a/src/main/java/stirling/software/SPDF/model/api/general/RearrangePagesRequest.java\n+++ b/src/main/java/stirling/software/SPDF/model/api/general/RearrangePagesRequest.java\n@@ -19,6 +19,7 @@ public class RearrangePagesRequest extends PDFWithPageNums {\n                             + \"DUPLEX_SORT: Sorts pages as if all fronts were scanned then all backs in reverse (1, n, 2, n-1, ...). \"\n                             + \"BOOKLET_SORT: Arranges pages for booklet printing (last, first, second, second last, ...).\\n\"\n                             + \"ODD_EVEN_SPLIT: Splits and arranges pages into odd and even numbered pages.\\n\"\n+                            + \"ODD_EVEN_MERGE: Merges pages and organises them alternately into odd and even pages.\\n\"\n                             + \"REMOVE_FIRST: Removes the first page.\\n\"\n                             + \"REMOVE_LAST: Removes the last page.\\n\"\n                             + \"REMOVE_FIRST_AND_LAST: Removes both the first and the last pages.\\n\")\n\ndiff --git a/src/test/java/stirling/software/SPDF/controller/api/RearrangePagesPDFControllerTest.java b/src/test/java/stirling/software/SPDF/controller/api/RearrangePagesPDFControllerTest.java\n--- a/src/test/java/stirling/software/SPDF/controller/api/RearrangePagesPDFControllerTest.java\n+++ b/src/test/java/stirling/software/SPDF/controller/api/RearrangePagesPDFControllerTest.java\n@@ -0,0 +1,82 @@\n+package stirling.software.SPDF.controller.api;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.CsvSource;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class RearrangePagesPDFControllerTest {\n+\n+    /**\n+     * Tests the behavior of the oddEvenMerge method when there are no pages in the document.\n+     */\n+    @Test\n+    void oddEvenMerge_noPages() {\n+        RearrangePagesPDFController sut = new RearrangePagesPDFController();\n+        int totalNumberOfPages = 0;\n+\n+        List<Integer> newPageOrder = sut.oddEvenMerge(totalNumberOfPages);\n+\n+        assertNotNull(newPageOrder, \"Returning null instead of page order list\");\n+        assertEquals(List.of(), newPageOrder, \"Page order doesn't match\");\n+    }\n+\n+    /**\n+     * Tests the behavior of the oddEvenMerge method when there are odd total pages in the document.\n+     */\n+    @Test\n+    void oddEvenMerge_oddTotalPageNumber() {\n+        RearrangePagesPDFController sut = new RearrangePagesPDFController();\n+        int totalNumberOfPages = 5;\n+\n+        List<Integer> newPageOrder = sut.oddEvenMerge(totalNumberOfPages);\n+\n+        assertNotNull(newPageOrder, \"Returning null instead of page order list\");\n+        assertEquals(Arrays.asList(0,3,1,4,2), newPageOrder, \"Page order doesn't match\");\n+    }\n+\n+    /**\n+     * Tests the behavior of the oddEvenMerge method when there are even total pages in the document.\n+     */\n+    @Test\n+    void oddEvenMerge_evenTotalPageNumber() {\n+        RearrangePagesPDFController sut = new RearrangePagesPDFController();\n+        int totalNumberOfPages = 6;\n+\n+        List<Integer> newPageOrder = sut.oddEvenMerge(totalNumberOfPages);\n+\n+        assertNotNull(newPageOrder, \"Returning null instead of page order list\");\n+        assertEquals(Arrays.asList(0,3,1,4,2,5), newPageOrder, \"Page order doesn't match\");\n+    }\n+\n+    /**\n+     * Tests the behavior of the oddEvenMerge method with multiple test cases of multiple pages.\n+     * @param totalNumberOfPages The total number of pages in the document.\n+     * @param expectedPageOrder The expected order of the pages after rearranging.\n+     */\n+    @ParameterizedTest\n+    @CsvSource({\n+            \"1, '0'\",\n+            \"2, '0,1'\",\n+            \"3, '0,2,1'\",\n+            \"4, '0,2,1,3'\",\n+            \"5, '0,3,1,4,2'\",\n+            \"6, '0,3,1,4,2,5'\",\n+            \"10, '0,5,1,6,2,7,3,8,4,9'\",\n+            \"50, '0,25,1,26,2,27,3,28,4,29,5,30,6,31,7,32,8,33,9,34,10,35,\" +\n+                    \"11,36,12,37,13,38,14,39,15,40,16,41,17,42,18,43,19,44,20,45,21,46,\" +\n+                    \"22,47,23,48,24,49'\"\n+    })\n+    void oddEvenMerge_multi_test(int totalNumberOfPages, String expectedPageOrder) {\n+        RearrangePagesPDFController sut = new RearrangePagesPDFController();\n+\n+        List<Integer> newPageOrder = sut.oddEvenMerge(totalNumberOfPages);\n+\n+        assertNotNull(newPageOrder, \"Returning null instead of page order list\");\n+        assertEquals(Arrays.stream(expectedPageOrder.split(\",\")).map(Integer::parseInt).toList(), newPageOrder, \"Page order doesn't match\");\n+    }\n+}\n\\ No newline at end of file",
    "output": "Add Odd-Even Merge operation mode (#1445)\n\n* Add ODD_EVEN_MERGE sort type\r\n\r\n* Add process method to merge odd and even PDF pages\r\n\r\n* Add test cases for Odd-Even merge method\r\n\r\n* Add Odd-Even Merge mode in PDF Organizer webpage\r\n\r\nThis also add a new translatable text message variable pdfOrganiser.mode.10 with translation for english and german\r\n\r\n* Add ODD_EVEN_MERGE documentation to RearrangePagesRequest\r\n\r\n* Add english translation for pdfOrganiser.mode.10\r\n\r\n---------\r\n\r\nCo-authored-by: Anthony Stirling <77850077+Frooodle@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/CustomAuthenticationSuccessHandler.java b/src/main/java/stirling/software/SPDF/config/security/CustomAuthenticationSuccessHandler.java\n--- a/src/main/java/stirling/software/SPDF/config/security/CustomAuthenticationSuccessHandler.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/CustomAuthenticationSuccessHandler.java\n@@ -37,7 +37,8 @@ public void onAuthenticationSuccess(\n                         : null;\n \n         if (savedRequest != null\n-                && !RequestUriUtils.isStaticResource(savedRequest.getRedirectUrl())) {\n+                && !RequestUriUtils.isStaticResource(\n+                        request.getContextPath(), savedRequest.getRedirectUrl())) {\n             // Redirect to the original destination\n             super.onAuthenticationSuccess(request, response, authentication);\n         } else {\n\ndiff --git a/src/main/java/stirling/software/SPDF/config/security/FirstLoginFilter.java b/src/main/java/stirling/software/SPDF/config/security/FirstLoginFilter.java\n--- a/src/main/java/stirling/software/SPDF/config/security/FirstLoginFilter.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/FirstLoginFilter.java\n@@ -28,8 +28,10 @@ protected void doFilterInternal(\n             throws ServletException, IOException {\n         String method = request.getMethod();\n         String requestURI = request.getRequestURI();\n+        String contextPath = request.getContextPath();\n+\n         // Check if the request is for static resources\n-        boolean isStaticResource = RequestUriUtils.isStaticResource(requestURI);\n+        boolean isStaticResource = RequestUriUtils.isStaticResource(contextPath, requestURI);\n \n         // If it's a static resource, just continue the filter chain and skip the logic below\n         if (isStaticResource) {\n@@ -43,8 +45,8 @@ protected void doFilterInternal(\n             if (\"GET\".equalsIgnoreCase(method)\n                     && user.isPresent()\n                     && user.get().isFirstLogin()\n-                    && !\"/change-creds\".equals(requestURI)) {\n-                response.sendRedirect(request.getContextPath() + \"/change-creds\");\n+                    && !(contextPath + \"/change-creds\").equals(requestURI)) {\n+                response.sendRedirect(contextPath + \"/change-creds\");\n                 return;\n             }\n         }\n\ndiff --git a/src/main/java/stirling/software/SPDF/config/security/IPRateLimitingFilter.java b/src/main/java/stirling/software/SPDF/config/security/IPRateLimitingFilter.java\n--- a/src/main/java/stirling/software/SPDF/config/security/IPRateLimitingFilter.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/IPRateLimitingFilter.java\n@@ -33,7 +33,8 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha\n             String method = httpRequest.getMethod();\n             String requestURI = httpRequest.getRequestURI();\n             // Check if the request is for static resources\n-            boolean isStaticResource = RequestUriUtils.isStaticResource(requestURI);\n+            boolean isStaticResource =\n+                    RequestUriUtils.isStaticResource(httpRequest.getContextPath(), requestURI);\n \n             // If it's a static resource, just continue the filter chain and skip the logic below\n             if (isStaticResource) {\n\ndiff --git a/src/main/java/stirling/software/SPDF/config/security/oauth2/CustomOAuth2AuthenticationSuccessHandler.java b/src/main/java/stirling/software/SPDF/config/security/oauth2/CustomOAuth2AuthenticationSuccessHandler.java\n--- a/src/main/java/stirling/software/SPDF/config/security/oauth2/CustomOAuth2AuthenticationSuccessHandler.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/oauth2/CustomOAuth2AuthenticationSuccessHandler.java\n@@ -48,13 +48,14 @@ public void onAuthenticationSuccess(\n \n         // Get the saved request\n         HttpSession session = request.getSession(false);\n+        String contextPath = request.getContextPath();\n         SavedRequest savedRequest =\n                 (session != null)\n                         ? (SavedRequest) session.getAttribute(\"SPRING_SECURITY_SAVED_REQUEST\")\n                         : null;\n \n         if (savedRequest != null\n-                && !RequestUriUtils.isStaticResource(savedRequest.getRedirectUrl())) {\n+                && !RequestUriUtils.isStaticResource(contextPath, savedRequest.getRedirectUrl())) {\n             // Redirect to the original destination\n             super.onAuthenticationSuccess(request, response, authentication);\n         } else {\n@@ -75,16 +76,15 @@ public void onAuthenticationSuccess(\n                     && !userService.isAuthenticationTypeByUsername(\n                             username, AuthenticationType.OAUTH2)\n                     && oAuth.getAutoCreateUser()) {\n-                response.sendRedirect(\n-                        request.getContextPath() + \"/logout?oauth2AuthenticationErrorWeb=true\");\n+                response.sendRedirect(contextPath + \"/logout?oauth2AuthenticationErrorWeb=true\");\n                 return;\n             } else {\n                 try {\n                     userService.processOAuth2PostLogin(username, oAuth.getAutoCreateUser());\n-                    response.sendRedirect(\"/\");\n+                    response.sendRedirect(contextPath + \"/\");\n                     return;\n                 } catch (IllegalArgumentException e) {\n-                    response.sendRedirect(\"/logout?invalidUsername=true\");\n+                    response.sendRedirect(contextPath + \"/logout?invalidUsername=true\");\n                     return;\n                 }\n             }\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/api/UserController.java b/src/main/java/stirling/software/SPDF/controller/api/UserController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/UserController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/UserController.java\n@@ -59,7 +59,7 @@ public String register(@ModelAttribute UsernameAndPass requestModel, Model model\n     @PostMapping(\"/change-username\")\n     public RedirectView changeUsername(\n             Principal principal,\n-            @RequestParam(name = \"currentPassword\") String currentPassword,\n+            @RequestParam(name = \"currentPasswordChangeUsername\") String currentPassword,\n             @RequestParam(name = \"newUsername\") String newUsername,\n             HttpServletRequest request,\n             HttpServletResponse response,\n\ndiff --git a/src/main/java/stirling/software/SPDF/utils/RequestUriUtils.java b/src/main/java/stirling/software/SPDF/utils/RequestUriUtils.java\n--- a/src/main/java/stirling/software/SPDF/utils/RequestUriUtils.java\n+++ b/src/main/java/stirling/software/SPDF/utils/RequestUriUtils.java\n@@ -12,6 +12,20 @@ public static boolean isStaticResource(String requestURI) {\n                 || requestURI.startsWith(\"/pdfjs/\")\n                 || requestURI.startsWith(\"/pdfjs-legacy/\")\n                 || requestURI.endsWith(\".svg\")\n+                || requestURI.endsWith(\".webmanifest\")\n                 || requestURI.startsWith(\"/api/v1/info/status\");\n     }\n+\n+    public static boolean isStaticResource(String contextPath, String requestURI) {\n+\n+        return requestURI.startsWith(contextPath + \"/css/\")\n+                || requestURI.startsWith(contextPath + \"/fonts/\")\n+                || requestURI.startsWith(contextPath + \"/js/\")\n+                || requestURI.startsWith(contextPath + \"/images/\")\n+                || requestURI.startsWith(contextPath + \"/public/\")\n+                || requestURI.startsWith(contextPath + \"/pdfjs/\")\n+                || requestURI.endsWith(\".svg\")\n+                || requestURI.endsWith(\".webmanifest\")\n+                || requestURI.startsWith(contextPath + \"/api/v1/info/status\");\n+    }\n }",
    "output": "Bugfix: missing contextPath (#1434)"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/UserAuthenticationFilter.java b/src/main/java/stirling/software/SPDF/config/security/UserAuthenticationFilter.java\n--- a/src/main/java/stirling/software/SPDF/config/security/UserAuthenticationFilter.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/UserAuthenticationFilter.java\n@@ -104,6 +104,7 @@ protected boolean shouldNotFilter(HttpServletRequest request) throws ServletExce\n             contextPath + \"/fonts/\",\n             contextPath + \"/js/\",\n             contextPath + \"/pdfjs/\",\n+            contextPath + \"/pdfjs-legacy/\",\n             contextPath + \"/api/v1/info/status\",\n             contextPath + \"/site.webmanifest\"\n         };\n\ndiff --git a/src/main/java/stirling/software/SPDF/utils/RequestUriUtils.java b/src/main/java/stirling/software/SPDF/utils/RequestUriUtils.java\n--- a/src/main/java/stirling/software/SPDF/utils/RequestUriUtils.java\n+++ b/src/main/java/stirling/software/SPDF/utils/RequestUriUtils.java\n@@ -10,6 +10,7 @@ public static boolean isStaticResource(String requestURI) {\n                 || requestURI.startsWith(\"/images/\")\n                 || requestURI.startsWith(\"/public/\")\n                 || requestURI.startsWith(\"/pdfjs/\")\n+                || requestURI.startsWith(\"/pdfjs-legacy/\")\n                 || requestURI.endsWith(\".svg\")\n                 || requestURI.startsWith(\"/api/v1/info/status\");\n     }",
    "output": "change to Pdf.js-Legacy Version 4.3.136 (#1444)\n\n* add: PDF.js-Legacy\r\n\r\n* change path"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/MergeController.java b/src/main/java/stirling/software/SPDF/controller/api/MergeController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/MergeController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/MergeController.java\n@@ -10,11 +10,16 @@\n import java.util.Arrays;\n import java.util.Comparator;\n import java.util.List;\n+import java.util.stream.Collectors;\n \n import org.apache.pdfbox.Loader;\n import org.apache.pdfbox.multipdf.PDFMergerUtility;\n import org.apache.pdfbox.pdmodel.PDDocument;\n+import org.apache.pdfbox.pdmodel.PDDocumentCatalog;\n import org.apache.pdfbox.pdmodel.PDPage;\n+import org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm;\n+import org.apache.pdfbox.pdmodel.interactive.form.PDField;\n+import org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.http.ResponseEntity;\n@@ -38,6 +43,7 @@ public class MergeController {\n \n     private static final Logger logger = LoggerFactory.getLogger(MergeController.class);\n \n+    // Merges a list of PDDocument objects into a single PDDocument\n     public PDDocument mergeDocuments(List<PDDocument> documents) throws IOException {\n         PDDocument mergedDoc = new PDDocument();\n         for (PDDocument doc : documents) {\n@@ -48,6 +54,7 @@ public PDDocument mergeDocuments(List<PDDocument> documents) throws IOException\n         return mergedDoc;\n     }\n \n+    // Returns a comparator for sorting MultipartFile arrays based on the given sort type\n     private Comparator<MultipartFile> getSortComparator(String sortType) {\n         switch (sortType) {\n             case \"byFileName\":\n@@ -108,37 +115,78 @@ private Comparator<MultipartFile> getSortComparator(String sortType) {\n                     \"This endpoint merges multiple PDF files into a single PDF file. The merged file will contain all pages from the input files in the order they were provided. Input:PDF Output:PDF Type:MISO\")\n     public ResponseEntity<byte[]> mergePdfs(@ModelAttribute MergePdfsRequest form)\n             throws IOException {\n-        List<File> filesToDelete = new ArrayList<File>();\n+        List<File> filesToDelete = new ArrayList<>(); // List of temporary files to delete\n+        ByteArrayOutputStream docOutputstream =\n+                new ByteArrayOutputStream(); // Stream for the merged document\n+        PDDocument mergedDocument = null;\n+\n+        boolean removeCertSign = form.isRemoveCertSign();\n+\n         try {\n             MultipartFile[] files = form.getFileInput();\n-            Arrays.sort(files, getSortComparator(form.getSortType()));\n-\n-            PDFMergerUtility mergedDoc = new PDFMergerUtility();\n-            ByteArrayOutputStream docOutputstream = new ByteArrayOutputStream();\n+            Arrays.sort(\n+                    files,\n+                    getSortComparator(\n+                            form.getSortType())); // Sort files based on the given sort type\n \n+            PDFMergerUtility mergerUtility = new PDFMergerUtility();\n             for (MultipartFile multipartFile : files) {\n-                File tempFile = GeneralUtils.convertMultipartFileToFile(multipartFile);\n-                filesToDelete.add(tempFile);\n-                mergedDoc.addSource(tempFile);\n+                File tempFile =\n+                        GeneralUtils.convertMultipartFileToFile(\n+                                multipartFile); // Convert MultipartFile to File\n+                filesToDelete.add(tempFile); // Add temp file to the list for later deletion\n+                mergerUtility.addSource(tempFile); // Add source file to the merger utility\n             }\n+            mergerUtility.setDestinationStream(\n+                    docOutputstream); // Set the output stream for the merged document\n+            mergerUtility.mergeDocuments(null); // Merge the documents\n \n-            mergedDoc.setDestinationFileName(\n-                    files[0].getOriginalFilename().replaceFirst(\"[.][^.]+$\", \"\") + \"_merged.pdf\");\n-            mergedDoc.setDestinationStream(docOutputstream);\n+            byte[] mergedPdfBytes = docOutputstream.toByteArray(); // Get merged document bytes\n \n-            mergedDoc.mergeDocuments(null);\n+            // Load the merged PDF document\n+            mergedDocument = Loader.loadPDF(mergedPdfBytes);\n \n+            // Remove signatures if removeCertSign is true\n+            if (removeCertSign) {\n+                PDDocumentCatalog catalog = mergedDocument.getDocumentCatalog();\n+                PDAcroForm acroForm = catalog.getAcroForm();\n+                if (acroForm != null) {\n+                    List<PDField> fieldsToRemove =\n+                            acroForm.getFields().stream()\n+                                    .filter(field -> field instanceof PDSignatureField)\n+                                    .collect(Collectors.toList());\n+\n+                    if (!fieldsToRemove.isEmpty()) {\n+                        acroForm.flatten(\n+                                fieldsToRemove,\n+                                false); // Flatten the fields, effectively removing them\n+                    }\n+                }\n+            }\n+\n+            // Save the modified document to a new ByteArrayOutputStream\n+            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+            mergedDocument.save(baos);\n+\n+            String mergedFileName =\n+                    files[0].getOriginalFilename().replaceFirst(\"[.][^.]+$\", \"\")\n+                            + \"_merged_unsigned.pdf\";\n             return WebResponseUtils.bytesToWebResponse(\n-                    docOutputstream.toByteArray(), mergedDoc.getDestinationFileName());\n+                    baos.toByteArray(), mergedFileName); // Return the modified PDF\n+\n         } catch (Exception ex) {\n             logger.error(\"Error in merge pdf process\", ex);\n             throw ex;\n         } finally {\n             for (File file : filesToDelete) {\n                 if (file != null) {\n-                    Files.deleteIfExists(file.toPath());\n+                    Files.deleteIfExists(file.toPath()); // Delete temporary files\n                 }\n             }\n+            docOutputstream.close();\n+            if (mergedDocument != null) {\n+                mergedDocument.close(); // Close the merged document\n+            }\n         }\n     }\n }\n\ndiff --git a/src/main/java/stirling/software/SPDF/model/api/general/MergePdfsRequest.java b/src/main/java/stirling/software/SPDF/model/api/general/MergePdfsRequest.java\n--- a/src/main/java/stirling/software/SPDF/model/api/general/MergePdfsRequest.java\n+++ b/src/main/java/stirling/software/SPDF/model/api/general/MergePdfsRequest.java\n@@ -21,4 +21,10 @@ public class MergePdfsRequest extends MultiplePDFFiles {\n             },\n             defaultValue = \"orderProvided\")\n     private String sortType = \"orderProvided\";\n+\n+    @Schema(\n+            description =\n+                    \"Flag indicating whether to remove certification signatures from the merged PDF. If true, all certification signatures will be removed from the final merged document.\",\n+            example = \"true\")\n+    private boolean isRemoveCertSign;\n }",
    "output": "Add: Option to remove the digital signature when merging (#1424)"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/CleanUrlInterceptor.java b/src/main/java/stirling/software/SPDF/config/CleanUrlInterceptor.java\n--- a/src/main/java/stirling/software/SPDF/config/CleanUrlInterceptor.java\n+++ b/src/main/java/stirling/software/SPDF/config/CleanUrlInterceptor.java\n@@ -58,7 +58,7 @@ public boolean preHandle(\n \n                 // Redirect to the URL with only allowed query parameters\n                 String redirectUrl = requestURI + \"?\" + newQueryString;\n-                \n+\n                 response.sendRedirect(request.getContextPath() + redirectUrl);\n                 return false;\n             }\n\ndiff --git a/src/main/java/stirling/software/SPDF/config/security/CustomAuthenticationFailureHandler.java b/src/main/java/stirling/software/SPDF/config/security/CustomAuthenticationFailureHandler.java\n--- a/src/main/java/stirling/software/SPDF/config/security/CustomAuthenticationFailureHandler.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/CustomAuthenticationFailureHandler.java\n@@ -43,7 +43,7 @@ public void onAuthenticationFailure(\n         logger.error(\"Failed login attempt from IP: {}\", ip);\n \n         String contextPath = request.getContextPath();\n-        \n+\n         if (exception.getClass().isAssignableFrom(InternalAuthenticationServiceException.class)\n                 || \"Password must not be null\".equalsIgnoreCase(exception.getMessage())) {\n             response.sendRedirect(contextPath + \"/login?error=oauth2AuthenticationError\");\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java b/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java\n@@ -105,7 +105,14 @@ List<Resource> runPipelineAgainstFiles(List<Resource> outputFiles, PipelineConfi\n                             body.add(\"fileInput\", file);\n \n                             for (Entry<String, Object> entry : parameters.entrySet()) {\n-                                body.add(entry.getKey(), entry.getValue());\n+                                if (entry.getValue() instanceof List) {\n+                                    List<?> list = (List<?>) entry.getValue();\n+                                    for (Object item : list) {\n+                                        body.add(entry.getKey(), item);\n+                                    }\n+                                } else {\n+                                    body.add(entry.getKey(), entry.getValue());\n+                                }\n                             }\n \n                             ResponseEntity<byte[]> response = sendWebRequest(url, body);\n@@ -167,7 +174,14 @@ List<Resource> runPipelineAgainstFiles(List<Resource> outputFiles, PipelineConfi\n                     }\n \n                     for (Entry<String, Object> entry : parameters.entrySet()) {\n-                        body.add(entry.getKey(), entry.getValue());\n+                        if (entry.getValue() instanceof List) {\n+                            List<?> list = (List<?>) entry.getValue();\n+                            for (Object item : list) {\n+                                body.add(entry.getKey(), item);\n+                            }\n+                        } else {\n+                            body.add(entry.getKey(), entry.getValue());\n+                        }\n                     }\n \n                     ResponseEntity<byte[]> response = sendWebRequest(url, body);\n\ndiff --git a/src/main/java/stirling/software/SPDF/utils/UrlUtils.java b/src/main/java/stirling/software/SPDF/utils/UrlUtils.java\n--- a/src/main/java/stirling/software/SPDF/utils/UrlUtils.java\n+++ b/src/main/java/stirling/software/SPDF/utils/UrlUtils.java\n@@ -4,8 +4,7 @@\n \n public class UrlUtils {\n \n-private UrlUtils() {\n-}\n+    private UrlUtils() {}\n \n     public static String getOrigin(HttpServletRequest request) {\n         String scheme = request.getScheme(); // http or https",
    "output": "Pipeline fixes for json lists + delete func (#1425)\n\n* init\r\n\r\n* revert\r\n\r\n* pipelines fixes for lists\r\n\r\n* pipeline fixes to allow json lists\r\n\r\n* formatting\r\n\r\n* pipeline changes\r\n\r\n* langs\r\n\r\n---------\r\n\r\nCo-authored-by: a <a>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/CleanUrlInterceptor.java b/src/main/java/stirling/software/SPDF/config/CleanUrlInterceptor.java\n--- a/src/main/java/stirling/software/SPDF/config/CleanUrlInterceptor.java\n+++ b/src/main/java/stirling/software/SPDF/config/CleanUrlInterceptor.java\n@@ -58,7 +58,8 @@ public boolean preHandle(\n \n                 // Redirect to the URL with only allowed query parameters\n                 String redirectUrl = requestURI + \"?\" + newQueryString;\n-                response.sendRedirect(redirectUrl);\n+                \n+                response.sendRedirect(request.getContextPath() + redirectUrl);\n                 return false;\n             }\n         }\n\ndiff --git a/src/main/java/stirling/software/SPDF/config/security/CustomAuthenticationFailureHandler.java b/src/main/java/stirling/software/SPDF/config/security/CustomAuthenticationFailureHandler.java\n--- a/src/main/java/stirling/software/SPDF/config/security/CustomAuthenticationFailureHandler.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/CustomAuthenticationFailureHandler.java\n@@ -42,9 +42,11 @@ public void onAuthenticationFailure(\n         String ip = request.getRemoteAddr();\n         logger.error(\"Failed login attempt from IP: {}\", ip);\n \n+        String contextPath = request.getContextPath();\n+        \n         if (exception.getClass().isAssignableFrom(InternalAuthenticationServiceException.class)\n                 || \"Password must not be null\".equalsIgnoreCase(exception.getMessage())) {\n-            response.sendRedirect(\"/login?error=oauth2AuthenticationError\");\n+            response.sendRedirect(contextPath + \"/login?error=oauth2AuthenticationError\");\n             return;\n         }\n \n@@ -59,13 +61,13 @@ public void onAuthenticationFailure(\n             loginAttemptService.loginFailed(username);\n             if (loginAttemptService.isBlocked(username)\n                     || exception.getClass().isAssignableFrom(LockedException.class)) {\n-                response.sendRedirect(\"/login?error=locked\");\n+                response.sendRedirect(contextPath + \"/login?error=locked\");\n                 return;\n             }\n         }\n         if (exception.getClass().isAssignableFrom(BadCredentialsException.class)\n                 || exception.getClass().isAssignableFrom(UsernameNotFoundException.class)) {\n-            response.sendRedirect(\"/login?error=badcredentials\");\n+            response.sendRedirect(contextPath + \"/login?error=badcredentials\");\n             return;\n         }\n \n\ndiff --git a/src/main/java/stirling/software/SPDF/config/security/FirstLoginFilter.java b/src/main/java/stirling/software/SPDF/config/security/FirstLoginFilter.java\n--- a/src/main/java/stirling/software/SPDF/config/security/FirstLoginFilter.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/FirstLoginFilter.java\n@@ -44,7 +44,7 @@ protected void doFilterInternal(\n                     && user.isPresent()\n                     && user.get().isFirstLogin()\n                     && !\"/change-creds\".equals(requestURI)) {\n-                response.sendRedirect(\"/change-creds\");\n+                response.sendRedirect(request.getContextPath() + \"/change-creds\");\n                 return;\n             }\n         }",
    "output": "Images and login context (#1417)\n\n* init\r\n\r\n* revert"
  }
]