[
  {
    "input": "diff --git a/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/StampController.java b/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/StampController.java\n--- a/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/StampController.java\n+++ b/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/StampController.java\n@@ -70,9 +70,14 @@ public ResponseEntity<byte[]> addStamp(@ModelAttribute AddStampRequest request)\n         String stampType = request.getStampType();\n         String stampText = request.getStampText();\n         MultipartFile stampImage = request.getStampImage();\n-        String stampImageName = stampImage.getOriginalFilename();\n-        if (stampImageName.contains(\"..\") || stampImageName.startsWith(\"/\")) {\n-            throw new IllegalArgumentException(\"Invalid stamp image file path\");\n+        if (\"image\".equalsIgnoreCase(stampType)) {\n+            if (stampImage == null) {\n+                throw new IllegalArgumentException(\"Stamp image file must be provided when stamp type is 'image'\");\n+            }\n+            String stampImageName = stampImage.getOriginalFilename();\n+            if (stampImageName == null || stampImageName.contains(\"..\") || stampImageName.startsWith(\"/\")) {\n+                throw new IllegalArgumentException(\"Invalid stamp image file path\");\n+            }\n         }\n         String alphabet = request.getAlphabet();\n         float fontSize = request.getFontSize();",
    "output": "Fix validate image filename only for image stamp type # Description of Changes - **What was changed**: Moved the filename validation logic for `stampImage` inside a condition that checks whether the stamp type is `\"image\"`. - **Why the change was made**: Previously, the validation was applied regardless of stamp type, leading to unnecessary errors for non-image-based stamps where no `stampImage` is provided. --- ## Checklist ### General - [x] I have read the [Contribution Guidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md) - [x] I have read the [Stirling-PDF Developer Guide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/DeveloperGuide.md) (if applicable) - [ ] I have read the [How to add new languages to Stirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/HowToAddNewLanguage.md) (if applicable) - [x] I have performed a self-review of my own code - [x] My changes generate no new warnings ### Documentation - [ ] I have updated relevant docs on [Stirling-PDF's doc repo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/) (if functionality has heavily changed) - [ ] I have read the section [Add New Translation Tags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/HowToAddNewLanguage.md#add-new-translation-tags) (for new translation tags only) ### UI Changes (if applicable) - [ ] Screenshots or videos demonstrating the UI changes are attached (e.g., as comments or direct attachments in the PR) ### Testing (if applicable) - [ ] I have tested my changes locally. Refer to the [Testing Guide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/DeveloperGuide.md-testing) for more details. --------- Co-authored-by: Copilot <175728472+Copilot@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java b/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java\n--- a/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java\n+++ b/app/core/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java\n@@ -108,9 +108,13 @@ PipelineResult runPipelineAgainstFiles(List<Resource> outputFiles, PipelineConfi\n             if (inputFileTypes == null) {\n                 inputFileTypes = new ArrayList<String>(Arrays.asList(\"ALL\"));\n             }\n-            if (!operation.matches(\"^[a-zA-Z0-9_-]+$\")) {\n-                throw new IllegalArgumentException(\"Invalid operation value received.\");\n+\n+            if (!apiDocService.isValidOperation(operation, parameters)) {\n+                log.error(\"Invalid operation or parameters: o:{} p:{}\", operation, parameters);\n+                throw new IllegalArgumentException(\n+                        \"Invalid operation: \" + operation + \" with parameters: \" + parameters);\n             }\n+\n             String url = getBaseUrl() + operation;\n             List<Resource> newOutputFiles = new ArrayList<>();\n             if (!isMultiInputOperation) {\n@@ -136,7 +140,7 @@ PipelineResult runPipelineAgainstFiles(List<Resource> outputFiles, PipelineConfi\n                             // skip\n                             // this\n                             // file\n-                            if (operation.startsWith(\"filter-\")\n+                            if (operation.startsWith(\"/api/v1/filter/filter-\")\n                                     && (response.getBody() == null\n                                             || response.getBody().length == 0)) {\n                                 filtersApplied = true;\n\ndiff --git a/app/core/src/test/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessorTest.java b/app/core/src/test/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessorTest.java\n--- a/app/core/src/test/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessorTest.java\n+++ b/app/core/src/test/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessorTest.java\n@@ -45,23 +45,26 @@ void setUp() {\n     @Test\n     void runPipelineWithFilterSetsFlag() throws Exception {\n         PipelineOperation op = new PipelineOperation();\n-        op.setOperation(\"filter-page-count\");\n+        op.setOperation(\"/api/v1/filter/filter-page-count\");\n         op.setParameters(Map.of());\n         PipelineConfig config = new PipelineConfig();\n         config.setOperations(List.of(op));\n \n-        Resource file = new ByteArrayResource(\"data\".getBytes()) {\n-            @Override\n-            public String getFilename() {\n-                return \"test.pdf\";\n-            }\n-        };\n+        Resource file =\n+                new ByteArrayResource(\"data\".getBytes()) {\n+                    @Override\n+                    public String getFilename() {\n+                        return \"test.pdf\";\n+                    }\n+                };\n \n         List<Resource> files = List.of(file);\n \n-        when(apiDocService.isMultiInput(\"filter-page-count\")).thenReturn(false);\n-        when(apiDocService.getExtensionTypes(false, \"filter-page-count\"))\n+        when(apiDocService.isMultiInput(\"/api/v1/filter/filter-page-count\")).thenReturn(false);\n+        when(apiDocService.getExtensionTypes(false, \"/api/v1/filter/filter-page-count\"))\n                 .thenReturn(List.of(\"pdf\"));\n+        when(apiDocService.isValidOperation(eq(\"/api/v1/filter/filter-page-count\"), anyMap()))\n+                .thenReturn(true);\n \n         doReturn(new ResponseEntity<>(new byte[0], HttpStatus.OK))\n                 .when(pipelineProcessor)",
    "output": "Fix allow slashes in pipeline operation values # Description of Changes - Extended the validation regex for `operation` in the pipeline processor to allow slashes (`/`), in addition to alphanumeric characters, underscores, and hyphens. - This resolves the issue where valid operation strings (e.g., with subpaths like `/api/v1/general/remove-pages`) were incorrectly rejected. - Added an explicit log message for better debugging in case of invalid `operation` values. --- ## Checklist ### General - [x] I have read the [Contribution Guidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md) - [x] I have read the [Stirling-PDF Developer Guide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/DeveloperGuide.md) (if applicable) - [ ] I have read the [How to add new languages to Stirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/HowToAddNewLanguage.md) (if applicable) - [x] I have performed a self-review of my own code - [x] My changes generate no new warnings ### Documentation - [ ] I have updated relevant docs on [Stirling-PDF's doc repo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/) (if functionality has heavily changed) - [ ] I have read the section [Add New Translation Tags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/HowToAddNewLanguage.md#add-new-translation-tags) (for new translation tags only) ### UI Changes (if applicable) - [ ] Screenshots or videos demonstrating the UI changes are attached (e.g., as comments or direct attachments in the PR) ### Testing (if applicable) - [ ] I have tested my changes locally. Refer to the [Testing Guide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/DeveloperGuide.md-testing) for more details."
  },
  {
    "input": "diff --git a/app/common/src/main/java/stirling/software/common/configuration/InstallationPathConfig.java b/app/common/src/main/java/stirling/software/common/configuration/InstallationPathConfig.java\n--- a/app/common/src/main/java/stirling/software/common/configuration/InstallationPathConfig.java\n+++ b/app/common/src/main/java/stirling/software/common/configuration/InstallationPathConfig.java\n@@ -15,6 +15,7 @@ public class InstallationPathConfig {\n     private static final String CUSTOM_FILES_PATH;\n     private static final String CLIENT_WEBUI_PATH;\n     private static final String SCRIPTS_PATH;\n+    private static final String PIPELINE_PATH;\n \n     // Config paths\n     private static final String SETTINGS_PATH;\n@@ -33,6 +34,7 @@ public class InstallationPathConfig {\n         CONFIG_PATH = BASE_PATH + \"configs\" + File.separator;\n         CUSTOM_FILES_PATH = BASE_PATH + \"customFiles\" + File.separator;\n         CLIENT_WEBUI_PATH = BASE_PATH + \"clientWebUI\" + File.separator;\n+        PIPELINE_PATH = BASE_PATH + \"pipeline\" + File.separator;\n \n         // Initialize config paths\n         SETTINGS_PATH = CONFIG_PATH + \"settings.yml\";\n@@ -95,6 +97,10 @@ public static String getScriptsPath() {\n         return SCRIPTS_PATH;\n     }\n \n+    public static String getPipelinePath() {\n+        return PIPELINE_PATH;\n+    }\n+\n     public static String getSettingsPath() {\n         return SETTINGS_PATH;\n     }\n\ndiff --git a/app/common/src/main/java/stirling/software/common/util/GeneralUtils.java b/app/common/src/main/java/stirling/software/common/util/GeneralUtils.java\n--- a/app/common/src/main/java/stirling/software/common/util/GeneralUtils.java\n+++ b/app/common/src/main/java/stirling/software/common/util/GeneralUtils.java\n@@ -14,6 +14,7 @@\n import java.util.Enumeration;\n import java.util.List;\n import java.util.Locale;\n+import java.util.Set;\n import java.util.UUID;\n \n import org.springframework.core.io.ClassPathResource;\n@@ -34,8 +35,16 @@\n @Slf4j\n public class GeneralUtils {\n \n-    private static final List<String> DEFAULT_VALID_SCRIPTS =\n-            List.of(\"png_to_webp.py\", \"split_photos.py\");\n+    private static final Set<String> DEFAULT_VALID_SCRIPTS =\n+            Set.of(\"png_to_webp.py\", \"split_photos.py\");\n+    private static final Set<String> DEFAULT_VALID_PIPELINE =\n+            Set.of(\n+                    \"OCR images.json\",\n+                    \"Prepare-pdfs-for-email.json\",\n+                    \"split-rotate-auto-rename.json\");\n+\n+    private static final String DEFAULT_WEBUI_CONFIGS_DIR = \"defaultWebUIConfigs\";\n+    private static final String PYTHON_SCRIPTS_DIR = \"python\";\n \n     public static File convertMultipartFileToFile(MultipartFile multipartFile) throws IOException {\n         String customTempDir = System.getenv(\"STIRLING_TEMPFILES_DIRECTORY\");\n@@ -446,6 +455,48 @@ public static String generateMachineFingerprint() {\n         }\n     }\n \n+    /**\n+     * Extracts the default pipeline configurations from the classpath to the installation path.\n+     * Creates directories if needed and copies default JSON files.\n+     *\n+     * <p>Existing files will be overwritten atomically (when supported). In case of unsupported\n+     * atomic moves, falls back to non-atomic replace.\n+     *\n+     * @throws IOException if an I/O error occurs during file operations\n+     */\n+    public static void extractPipeline() throws IOException {\n+        Path pipelineDir =\n+                Paths.get(InstallationPathConfig.getPipelinePath(), DEFAULT_WEBUI_CONFIGS_DIR);\n+        Files.createDirectories(pipelineDir);\n+\n+        for (String name : DEFAULT_VALID_PIPELINE) {\n+            if (!Paths.get(name).getFileName().toString().equals(name)) {\n+                log.error(\"Invalid pipeline file name: {}\", name);\n+                throw new IllegalArgumentException(\"Invalid pipeline file name: \" + name);\n+            }\n+            Path target = pipelineDir.resolve(name);\n+            ClassPathResource res =\n+                    new ClassPathResource(\n+                            \"static/pipeline/\" + DEFAULT_WEBUI_CONFIGS_DIR + \"/\" + name);\n+            if (!res.exists()) {\n+                log.error(\"Resource not found: {}\", res.getPath());\n+                throw new IOException(\"Resource not found: \" + res.getPath());\n+            }\n+            copyResourceToFile(res, target);\n+        }\n+    }\n+\n+    /**\n+     * Extracts the specified Python script from the classpath to the installation path. Validates\n+     * name and copies file atomically when possible, overwriting existing.\n+     *\n+     * <p>Existing files will be overwritten atomically (when supported).\n+     *\n+     * @param scriptName the name of the script to extract\n+     * @return the path to the extracted script\n+     * @throws IllegalArgumentException if the script name is invalid or not allowed\n+     * @throws IOException if an I/O error occurs\n+     */\n     public static Path extractScript(String scriptName) throws IOException {\n         // Validate input\n         if (scriptName == null || scriptName.trim().isEmpty()) {\n@@ -455,26 +506,71 @@ public static Path extractScript(String scriptName) throws IOException {\n             throw new IllegalArgumentException(\n                     \"scriptName must not contain path traversal characters\");\n         }\n+        if (!Paths.get(scriptName).getFileName().toString().equals(scriptName)) {\n+            throw new IllegalArgumentException(\n+                    \"scriptName must not contain path traversal characters\");\n+        }\n \n         if (!DEFAULT_VALID_SCRIPTS.contains(scriptName)) {\n             throw new IllegalArgumentException(\n                     \"scriptName must be either 'png_to_webp.py' or 'split_photos.py'\");\n         }\n \n-        Path scriptsDir = Paths.get(InstallationPathConfig.getScriptsPath(), \"python\");\n+        Path scriptsDir = Paths.get(InstallationPathConfig.getScriptsPath(), PYTHON_SCRIPTS_DIR);\n         Files.createDirectories(scriptsDir);\n \n-        Path scriptFile = scriptsDir.resolve(scriptName);\n-        if (!Files.exists(scriptFile)) {\n-            ClassPathResource resource = new ClassPathResource(\"static/python/\" + scriptName);\n-            try (InputStream in = resource.getInputStream()) {\n-                Files.copy(in, scriptFile, StandardCopyOption.REPLACE_EXISTING);\n+        Path target = scriptsDir.resolve(scriptName);\n+        ClassPathResource res =\n+                new ClassPathResource(\"static/\" + PYTHON_SCRIPTS_DIR + \"/\" + scriptName);\n+        if (!res.exists()) {\n+            log.error(\"Resource not found: {}\", res.getPath());\n+            throw new IOException(\"Resource not found: \" + res.getPath());\n+        }\n+        copyResourceToFile(res, target);\n+        return target;\n+    }\n+\n+    /**\n+     * Copies a resource from the classpath to a specified target file.\n+     *\n+     * @param resource the ClassPathResource to copy\n+     * @param target the target Path where the resource will be copied\n+     * @throws IOException if an I/O error occurs during the copy operation\n+     */\n+    private static void copyResourceToFile(ClassPathResource resource, Path target)\n+            throws IOException {\n+        Path dir = target.getParent();\n+        Path tmp = Files.createTempFile(dir, target.getFileName().toString(), \".tmp\");\n+        try (InputStream in = resource.getInputStream()) {\n+            Files.copy(in, tmp, StandardCopyOption.REPLACE_EXISTING);\n+            try {\n+                Files.move(tmp, target, StandardCopyOption.ATOMIC_MOVE);\n+            } catch (AtomicMoveNotSupportedException e) {\n+                log.warn(\n+                        \"Atomic move not supported, falling back to non-atomic move for {}\",\n+                        target,\n+                        e);\n+                Files.move(tmp, target, StandardCopyOption.REPLACE_EXISTING);\n+            }\n+        } catch (FileAlreadyExistsException e) {\n+            log.debug(\"File already exists at {}, attempting to replace it.\", target);\n+            Files.move(tmp, target, StandardCopyOption.REPLACE_EXISTING);\n+        } catch (AccessDeniedException e) {\n+            log.error(\"Access denied while attempting to copy resource to {}\", target, e);\n+            throw e;\n+        } catch (FileSystemException e) {\n+            log.error(\"File system error occurred while copying resource to {}\", target, e);\n+            throw e;\n+        } catch (IOException e) {\n+            log.error(\"Failed to copy resource to {}\", target, e);\n+            throw e;\n+        } finally {\n+            try {\n+                Files.deleteIfExists(tmp);\n             } catch (IOException e) {\n-                log.error(\"Failed to extract Python script\", e);\n-                throw e;\n+                log.warn(\"Failed to delete temporary file {}\", tmp, e);\n             }\n         }\n-        return scriptFile;\n     }\n \n     public static boolean isVersionHigher(String currentVersion, String compareVersion) {\n\ndiff --git a/app/core/src/main/java/stirling/software/SPDF/config/InitialSetup.java b/app/core/src/main/java/stirling/software/SPDF/config/InitialSetup.java\n--- a/app/core/src/main/java/stirling/software/SPDF/config/InitialSetup.java\n+++ b/app/core/src/main/java/stirling/software/SPDF/config/InitialSetup.java\n@@ -35,6 +35,7 @@ public void init() throws IOException {\n         initEnableCSRFSecurity();\n         initLegalUrls();\n         initSetAppVersion();\n+        GeneralUtils.extractPipeline();\n     }\n \n     public void initUUIDKey() throws IOException {",
    "output": "Fix correct paths for pipeline & support default WebUI pipeline config extraction # Description of Changes - **What was changed:** - Updated `.github/labeler-config-srvaroa.yml` to include `app/core/src/main/resources/static/pipeline/defaultWebUIConfigs/**` under the labeler paths. - Removed `COPY pipeline /pipeline` from all three Dockerfiles to slim down images. - Added a new `PIPELINE_PATH` constant and `getPipelinePath` method in `InstallationPathConfig.java`. - Implemented `GeneralUtils.extractPipeline` to copy default pipeline JSON configs (`OCR images.json`, `Prepare-pdfs-for-email.json`, `split-rotate-auto-rename.json`) from classpath into the installation directory. - Invoked `GeneralUtils.extractPipeline` during initial setup in `InitialSetup.java`. - Updated `.gitignore` to treat `./pipeline/` as ignored. - **Why the change was made:** Ensures that default WebUI pipeline configurations are automatically extracted at runtime rather than baked into the image, improving flexibility and reducing image size. --- ## Checklist ### General - [x] I have read the [Contribution Guidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md) - [x] I have read the [Stirling-PDF Developer Guide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/DeveloperGuide.md) (if applicable) - [ ] I have read the [How to add new languages to Stirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/HowToAddNewLanguage.md) (if applicable) - [x] I have performed a self-review of my own code - [x] My changes generate no new warnings ### Documentation - [ ] I have updated relevant docs on [Stirling-PDF's doc repo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/) (if functionality has heavily changed) - [ ] I have read the section [Add New Translation Tags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/HowToAddNewLanguage.md#add-new-translation-tags) (for new translation tags only) ### UI Changes (if applicable) - [ ] Screenshots or videos demonstrating the UI changes are attached (e.g., as comments or direct attachments in the PR) ### Testing (if applicable) - [ ] I have tested my changes locally. Refer to the [Testing Guide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/DeveloperGuide.md-testing) for more details. --------- Co-authored-by: Anthony Stirling <77850077+Frooodle@users.noreply.github.com> Co-authored-by: Copilot <175728472+Copilot@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/app/common/src/main/java/stirling/software/common/configuration/InstallationPathConfig.java b/app/common/src/main/java/stirling/software/common/configuration/InstallationPathConfig.java\n--- a/app/common/src/main/java/stirling/software/common/configuration/InstallationPathConfig.java\n+++ b/app/common/src/main/java/stirling/software/common/configuration/InstallationPathConfig.java\n@@ -14,6 +14,7 @@ public class InstallationPathConfig {\n     private static final String CONFIG_PATH;\n     private static final String CUSTOM_FILES_PATH;\n     private static final String CLIENT_WEBUI_PATH;\n+    private static final String SCRIPTS_PATH;\n \n     // Config paths\n     private static final String SETTINGS_PATH;\n@@ -36,6 +37,7 @@ public class InstallationPathConfig {\n         // Initialize config paths\n         SETTINGS_PATH = CONFIG_PATH + \"settings.yml\";\n         CUSTOM_SETTINGS_PATH = CONFIG_PATH + \"custom_settings.yml\";\n+        SCRIPTS_PATH = CONFIG_PATH + \"scripts\" + File.separator;\n \n         // Initialize custom file paths\n         STATIC_PATH = CUSTOM_FILES_PATH + \"static\" + File.separator;\n@@ -89,6 +91,10 @@ public static String getClientWebUIPath() {\n         return CLIENT_WEBUI_PATH;\n     }\n \n+    public static String getScriptsPath() {\n+        return SCRIPTS_PATH;\n+    }\n+\n     public static String getSettingsPath() {\n         return SETTINGS_PATH;\n     }\n\ndiff --git a/app/common/src/main/java/stirling/software/common/util/GeneralUtils.java b/app/common/src/main/java/stirling/software/common/util/GeneralUtils.java\n--- a/app/common/src/main/java/stirling/software/common/util/GeneralUtils.java\n+++ b/app/common/src/main/java/stirling/software/common/util/GeneralUtils.java\n@@ -16,6 +16,7 @@\n import java.util.Locale;\n import java.util.UUID;\n \n+import org.springframework.core.io.ClassPathResource;\n import org.springframework.core.io.Resource;\n import org.springframework.core.io.ResourceLoader;\n import org.springframework.core.io.support.ResourcePatternUtils;\n@@ -33,6 +34,9 @@\n @Slf4j\n public class GeneralUtils {\n \n+    private static final List<String> DEFAULT_VALID_SCRIPTS =\n+            List.of(\"png_to_webp.py\", \"split_photos.py\");\n+\n     public static File convertMultipartFileToFile(MultipartFile multipartFile) throws IOException {\n         String customTempDir = System.getenv(\"STIRLING_TEMPFILES_DIRECTORY\");\n         if (customTempDir == null || customTempDir.isEmpty()) {\n@@ -442,6 +446,40 @@ public static String generateMachineFingerprint() {\n         }\n     }\n \n+    /**\n+     * Extracts a file from classpath:/static/python to a temporary directory and returns the path.\n+     */\n+    public static Path extractScript(String scriptName) throws IOException {\n+        // Validate input\n+        if (scriptName == null || scriptName.trim().isEmpty()) {\n+            throw new IllegalArgumentException(\"scriptName must not be null or empty\");\n+        }\n+        if (scriptName.contains(\"..\") || scriptName.contains(\"/\")) {\n+            throw new IllegalArgumentException(\n+                    \"scriptName must not contain path traversal characters\");\n+        }\n+\n+        if (!DEFAULT_VALID_SCRIPTS.contains(scriptName)) {\n+            throw new IllegalArgumentException(\n+                    \"scriptName must be either 'png_to_webp.py' or 'split_photos.py'\");\n+        }\n+\n+        Path scriptsDir = Paths.get(InstallationPathConfig.getScriptsPath(), \"python\");\n+        Files.createDirectories(scriptsDir);\n+\n+        Path scriptFile = scriptsDir.resolve(scriptName);\n+        if (!Files.exists(scriptFile)) {\n+            ClassPathResource resource = new ClassPathResource(\"static/python/\" + scriptName);\n+            try (InputStream in = resource.getInputStream()) {\n+                Files.copy(in, scriptFile, StandardCopyOption.REPLACE_EXISTING);\n+            } catch (IOException e) {\n+                log.error(\"Failed to extract Python script\", e);\n+                throw e;\n+            }\n+        }\n+        return scriptFile;\n+    }\n+\n     public static boolean isVersionHigher(String currentVersion, String compareVersion) {\n         if (currentVersion == null || compareVersion == null) {\n             return false;\n\ndiff --git a/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java b/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java\n--- a/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java\n+++ b/app/core/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java\n@@ -56,8 +56,8 @@ public class ConvertImgPDFController {\n             summary = \"Convert PDF to image(s)\",\n             description =\n                     \"This endpoint converts a PDF file to image(s) with the specified image format,\"\n-                            + \" color type, and DPI. Users can choose to get a single image or multiple\"\n-                            + \" images.  Input:PDF Output:Image Type:SI-Conditional\")\n+                        + \" color type, and DPI. Users can choose to get a single image or multiple\"\n+                        + \" images.  Input:PDF Output:Image Type:SI-Conditional\")\n     public ResponseEntity<byte[]> convertToImage(@ModelAttribute ConvertToImageRequest request)\n             throws Exception {\n         MultipartFile file = request.getFileInput();\n@@ -117,10 +117,14 @@ public ResponseEntity<byte[]> convertToImage(@ModelAttribute ConvertToImageReque\n                 }\n \n                 String pythonVersion = CheckProgramInstall.getAvailablePythonCommand();\n+                Path pngToWebpScript = GeneralUtils.extractScript(\"png_to_webp.py\");\n \n                 List<String> command = new ArrayList<>();\n                 command.add(pythonVersion);\n-                command.add(\"./scripts/png_to_webp.py\"); // Python script to handle the conversion\n+                command.add(\n+                        pngToWebpScript\n+                                .toAbsolutePath()\n+                                .toString()); // Python script to handle the conversion\n \n                 // Create a temporary directory for the output WebP files\n                 tempOutputDir = Files.createTempDirectory(\"webp_output\");\n@@ -232,7 +236,8 @@ public ResponseEntity<byte[]> convertToPdf(@ModelAttribute ConvertToPdfRequest r\n                 PdfUtils.imageToPdf(file, fitOption, autoRotate, colorType, pdfDocumentFactory);\n         return WebResponseUtils.bytesToWebResponse(\n                 bytes,\n-                new File(file[0].getOriginalFilename()).getName().replaceFirst(\"[.][^.]+$\", \"\") + \"_converted.pdf\");\n+                new File(file[0].getOriginalFilename()).getName().replaceFirst(\"[.][^.]+$\", \"\")\n+                        + \"_converted.pdf\");\n     }\n \n     private String getMediaType(String imageFormat) {\n\ndiff --git a/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/ExtractImageScansController.java b/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/ExtractImageScansController.java\n--- a/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/ExtractImageScansController.java\n+++ b/app/core/src/main/java/stirling/software/SPDF/controller/api/misc/ExtractImageScansController.java\n@@ -34,6 +34,7 @@\n import stirling.software.common.service.CustomPDFDocumentFactory;\n import stirling.software.common.util.CheckProgramInstall;\n import stirling.software.common.util.ExceptionUtils;\n+import stirling.software.common.util.GeneralUtils;\n import stirling.software.common.util.ProcessExecutor;\n import stirling.software.common.util.ProcessExecutor.ProcessExecutorResult;\n import stirling.software.common.util.WebResponseUtils;\n@@ -54,9 +55,9 @@ public class ExtractImageScansController {\n             summary = \"Extract image scans from an input file\",\n             description =\n                     \"This endpoint extracts image scans from a given file based on certain\"\n-                            + \" parameters. Users can specify angle threshold, tolerance, minimum area,\"\n-                            + \" minimum contour area, and border size. Input:PDF Output:IMAGE/ZIP\"\n-                            + \" Type:SIMO\")\n+                        + \" parameters. Users can specify angle threshold, tolerance, minimum area,\"\n+                        + \" minimum contour area, and border size. Input:PDF Output:IMAGE/ZIP\"\n+                        + \" Type:SIMO\")\n     public ResponseEntity<byte[]> extractImageScans(\n             @ModelAttribute ExtractImageScansRequest request)\n             throws IOException, InterruptedException {\n@@ -78,6 +79,7 @@ public ResponseEntity<byte[]> extractImageScans(\n         }\n \n         String pythonVersion = CheckProgramInstall.getAvailablePythonCommand();\n+        Path splitPhotosScript = GeneralUtils.extractScript(\"split_photos.py\");\n         try {\n             // Check if input file is a PDF\n             if (\"pdf\".equalsIgnoreCase(extension)) {\n@@ -120,7 +122,7 @@ public ResponseEntity<byte[]> extractImageScans(\n                         new ArrayList<>(\n                                 Arrays.asList(\n                                         pythonVersion,\n-                                        \"./scripts/split_photos.py\",\n+                                        splitPhotosScript.toAbsolutePath().toString(),\n                                         images.get(i),\n                                         tempDir.toString(),\n                                         \"--angle_threshold\",",
    "output": "Fix correct paths for python scripts and implement classpath extraction"
  },
  {
    "input": "diff --git a/common/src/main/java/stirling/software/common/configuration/AppConfig.java b/common/src/main/java/stirling/software/common/configuration/AppConfig.java\n--- a/common/src/main/java/stirling/software/common/configuration/AppConfig.java\n+++ b/common/src/main/java/stirling/software/common/configuration/AppConfig.java\n@@ -21,6 +21,7 @@\n import org.springframework.core.io.ClassPathResource;\n import org.springframework.core.io.Resource;\n import org.springframework.core.io.ResourceLoader;\n+import org.springframework.util.ClassUtils;\n import org.thymeleaf.spring6.SpringTemplateEngine;\n \n import lombok.Getter;\n@@ -148,23 +149,11 @@ public boolean isRunningInDockerWithConfig() {\n     }\n \n     @Bean(name = \"activeSecurity\")\n-    public boolean activeSecurity() {\n-        String disableAdditionalFeatures = env.getProperty(\"DISABLE_ADDITIONAL_FEATURES\");\n-\n-        if (disableAdditionalFeatures != null) {\n-            // DISABLE_ADDITIONAL_FEATURES=true means security OFF, so return false\n-            // DISABLE_ADDITIONAL_FEATURES=false means security ON, so return true\n-            return !Boolean.parseBoolean(disableAdditionalFeatures);\n-        }\n-\n-        return env.getProperty(\"DOCKER_ENABLE_SECURITY\", Boolean.class, true);\n-    }\n-\n-    @Bean(name = \"missingActiveSecurity\")\n-    @ConditionalOnMissingClass(\n-            \"stirling.software.proprietary.security.configuration.SecurityConfiguration\")\n     public boolean missingActiveSecurity() {\n-        return true;\n+        return ClassUtils.isPresent(\n+            \"stirling.software.proprietary.security.configuration.SecurityConfiguration\",\n+            this.getClass().getClassLoader()\n+        );\n     }\n \n     @Bean(name = \"directoryFilter\")",
    "output": "Fix for `generateOpenApiDocs` Task # Description of Changes Fix for `generateOpenApiDocs` task --- ## Checklist ### General - [ ] I have read the [Contribution Guidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md) - [ ] I have read the [Stirling-PDF Developer Guide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/DeveloperGuide.md) (if applicable) - [ ] I have read the [How to add new languages to Stirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/HowToAddNewLanguage.md) (if applicable) - [ ] I have performed a self-review of my own code - [ ] My changes generate no new warnings ### Documentation - [ ] I have updated relevant docs on [Stirling-PDF's doc repo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/) (if functionality has heavily changed) - [ ] I have read the section [Add New Translation Tags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/HowToAddNewLanguage.md#add-new-translation-tags) (for new translation tags only) ### UI Changes (if applicable) - [ ] Screenshots or videos demonstrating the UI changes are attached (e.g., as comments or direct attachments in the PR) ### Testing (if applicable) - [ ] I have tested my changes locally. Refer to the [Testing Guide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/DeveloperGuide.md-testing) for more details. --------- Co-authored-by: Anthony Stirling <77850077+Frooodle@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/stirling-pdf/src/main/java/stirling/software/SPDF/config/WebMvcConfig.java b/stirling-pdf/src/main/java/stirling/software/SPDF/config/WebMvcConfig.java\n--- a/stirling-pdf/src/main/java/stirling/software/SPDF/config/WebMvcConfig.java\n+++ b/stirling-pdf/src/main/java/stirling/software/SPDF/config/WebMvcConfig.java\n@@ -26,8 +26,6 @@ public void addResourceHandlers(ResourceHandlerRegistry registry) {\n         registry.addResourceHandler(\"/**\")\n                 .addResourceLocations(\n                         \"file:\" + InstallationPathConfig.getStaticPath(), \"classpath:/static/\");\n-        registry.addResourceHandler(\"/js/**\").addResourceLocations(\"classpath:/static/js/\");\n-        registry.addResourceHandler(\"/css/**\").addResourceLocations(\"classpath:/static/css/\");\n         // .setCachePeriod(0); // Optional: disable caching\n     }\n }",
    "output": "Fix for resource override # Description of Changes <!-- Please provide a summary of the changes, including: - What was changed - Why the change was made - Any challenges encountered Closes #(issue_number) --> --- ## Checklist ### General - [ ] I have read the [Contribution Guidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md) - [ ] I have read the [Stirling-PDF Developer Guide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/DeveloperGuide.md) (if applicable) - [ ] I have read the [How to add new languages to Stirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/HowToAddNewLanguage.md) (if applicable) - [ ] I have performed a self-review of my own code - [ ] My changes generate no new warnings ### Documentation - [ ] I have updated relevant docs on [Stirling-PDF's doc repo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/) (if functionality has heavily changed) - [ ] I have read the section [Add New Translation Tags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/HowToAddNewLanguage.md#add-new-translation-tags) (for new translation tags only) ### UI Changes (if applicable) - [ ] Screenshots or videos demonstrating the UI changes are attached (e.g., as comments or direct attachments in the PR) ### Testing (if applicable) - [ ] I have tested my changes locally. Refer to the [Testing Guide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/devGuide/DeveloperGuide.md-testing) for more details."
  },
  {
    "input": "diff --git a/common/src/main/java/stirling/software/common/util/GeneralUtils.java b/common/src/main/java/stirling/software/common/util/GeneralUtils.java\n--- a/common/src/main/java/stirling/software/common/util/GeneralUtils.java\n+++ b/common/src/main/java/stirling/software/common/util/GeneralUtils.java\n@@ -13,6 +13,7 @@\n import java.util.Arrays;\n import java.util.Enumeration;\n import java.util.List;\n+import java.util.Locale;\n import java.util.UUID;\n \n import org.springframework.core.io.Resource;\n@@ -199,11 +200,11 @@ public static String formatBytes(long bytes) {\n         if (bytes < 1024) {\n             return bytes + \" B\";\n         } else if (bytes < 1024 * 1024) {\n-            return String.format(\"%.2f KB\", bytes / 1024.0);\n+            return String.format(Locale.US, \"%.2f KB\", bytes / 1024.0);\n         } else if (bytes < 1024 * 1024 * 1024) {\n-            return String.format(\"%.2f MB\", bytes / (1024.0 * 1024.0));\n+            return String.format(Locale.US, \"%.2f MB\", bytes / (1024.0 * 1024.0));\n         } else {\n-            return String.format(\"%.2f GB\", bytes / (1024.0 * 1024.0 * 1024.0));\n+            return String.format(Locale.US, \"%.2f GB\", bytes / (1024.0 * 1024.0 * 1024.0));\n         }\n     }\n ",
    "output": "Fix ensure locale-safe formatting in GeneralUtils.formatBytes"
  },
  {
    "input": "diff --git a/proprietary/src/main/java/stirling/software/proprietary/security/InitialSecuritySetup.java b/proprietary/src/main/java/stirling/software/proprietary/security/InitialSecuritySetup.java\n--- a/proprietary/src/main/java/stirling/software/proprietary/security/InitialSecuritySetup.java\n+++ b/proprietary/src/main/java/stirling/software/proprietary/security/InitialSecuritySetup.java\n@@ -2,6 +2,7 @@\n \n import java.sql.SQLException;\n import java.util.List;\n+import java.util.Optional;\n import java.util.UUID;\n \n import org.springframework.stereotype.Component;\n@@ -53,10 +54,15 @@ public void init() {\n \n     private void assignUsersToDefaultTeamIfMissing() {\n         Team defaultTeam = teamService.getOrCreateDefaultTeam();\n+        Team internalTeam = teamService.getOrCreateInternalTeam();\n         List<User> usersWithoutTeam = userService.getUsersWithoutTeam();\n \n         for (User user : usersWithoutTeam) {\n-            user.setTeam(defaultTeam);\n+            if (user.getUsername().equalsIgnoreCase(Role.INTERNAL_API_USER.getRoleId())) {\n+                user.setTeam(internalTeam);\n+            } else {\n+                user.setTeam(defaultTeam);\n+            }\n         }\n \n         userService.saveAll(usersWithoutTeam); // batch save\n@@ -108,6 +114,20 @@ private void initializeInternalApiUser()\n                     false);\n             userService.addApiKeyToUser(Role.INTERNAL_API_USER.getRoleId());\n             log.info(\"Internal API user created: {}\", Role.INTERNAL_API_USER.getRoleId());\n+        } else {\n+            Optional<User> internalApiUserOpt =\n+                    userService.findByUsernameIgnoreCase(Role.INTERNAL_API_USER.getRoleId());\n+            if (internalApiUserOpt.isPresent()) {\n+                User internalApiUser = internalApiUserOpt.get();\n+                // move to team internal API user\n+                if (!internalApiUser.getTeam().getName().equals(TeamService.INTERNAL_TEAM_NAME)) {\n+                    log.info(\n+                            \"Moving internal API user to team: {}\", TeamService.INTERNAL_TEAM_NAME);\n+                    Team internalTeam = teamService.getOrCreateInternalTeam();\n+\n+                    userService.changeUserTeam(internalApiUser, internalTeam);\n+                }\n+            }\n         }\n         userService.syncCustomApiUser(applicationProperties.getSecurity().getCustomGlobalAPIKey());\n     }\n\ndiff --git a/proprietary/src/main/java/stirling/software/proprietary/security/model/User.java b/proprietary/src/main/java/stirling/software/proprietary/security/model/User.java\n--- a/proprietary/src/main/java/stirling/software/proprietary/security/model/User.java\n+++ b/proprietary/src/main/java/stirling/software/proprietary/security/model/User.java\n@@ -58,7 +58,7 @@ public class User implements Serializable {\n     @OneToMany(fetch = FetchType.EAGER, cascade = CascadeType.ALL, mappedBy = \"user\")\n     private Set<Authority> authorities = new HashSet<>();\n \n-    @ManyToOne(fetch = FetchType.LAZY)\n+    @ManyToOne(fetch = FetchType.EAGER)\n     @JoinColumn(name = \"team_id\")\n     private Team team;\n \n\ndiff --git a/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java b/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java\n--- a/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java\n+++ b/proprietary/src/main/java/stirling/software/proprietary/security/service/UserService.java\n@@ -371,6 +371,16 @@ public void changeUserEnabled(User user, Boolean enbeled)\n         databaseService.exportDatabase();\n     }\n \n+    public void changeUserTeam(User user, Team team)\n+            throws SQLException, UnsupportedProviderException {\n+        if (team == null) {\n+            team = getDefaultTeam();\n+        }\n+        user.setTeam(team);\n+        userRepository.save(user);\n+        databaseService.exportDatabase();\n+    }\n+\n     public boolean isPasswordCorrect(User user, String currentPassword) {\n         return passwordEncoder.matches(currentPassword, user.getPassword());\n     }\n\ndiff --git a/stirling-pdf/src/test/java/stirling/software/SPDF/controller/api/MergeControllerTest.java b/stirling-pdf/src/test/java/stirling/software/SPDF/controller/api/MergeControllerTest.java\n--- a/stirling-pdf/src/test/java/stirling/software/SPDF/controller/api/MergeControllerTest.java\n+++ b/stirling-pdf/src/test/java/stirling/software/SPDF/controller/api/MergeControllerTest.java\n@@ -276,4 +276,4 @@ void testMergeDocuments_EmptyList_ReturnsEmptyDocument() throws IOException {\n         verify(mockMergedDocument, never()).addPage(any(PDPage.class));\n     }\n \n-}\n\\ No newline at end of file\n+}",
    "output": "Fix Assign Internal API User to Internal Team and Eager-Load User’s Team Association"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/SplitPdfByChaptersController.java b/src/main/java/stirling/software/SPDF/controller/api/SplitPdfByChaptersController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/SplitPdfByChaptersController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/SplitPdfByChaptersController.java\n@@ -131,15 +131,15 @@ public ResponseEntity<byte[]> splitPdf(@ModelAttribute SplitPdfByChaptersRequest\n             Integer bookmarkLevel =\n                     request.getBookmarkLevel(); // levels start from 0 (top most bookmarks)\n             if (bookmarkLevel < 0) {\n-                return ResponseEntity.badRequest().body(\"Invalid bookmark level\".getBytes());\n+                throw new IllegalArgumentException(\"Invalid bookmark level\");\n             }\n             sourceDocument = pdfDocumentFactory.load(file);\n \n             PDDocumentOutline outline = sourceDocument.getDocumentCatalog().getDocumentOutline();\n \n             if (outline == null) {\n                 log.warn(\"No outline found for {}\", file.getOriginalFilename());\n-                return ResponseEntity.badRequest().body(\"No outline found\".getBytes());\n+                throw new IllegalArgumentException(\"No outline found\");\n             }\n             List<Bookmark> bookmarks = new ArrayList<>();\n             try {",
    "output": "Fix error display for Split by Chapter ## Summary - throw `IllegalArgumentException` when bookmark level is invalid or when a PDF has no outline - rely on global error handling so frontend shows the message ## Testing - `./gradlew build` ------ https://chatgpt.com/codex/tasks/task_b_683dc51dd31083288be3f9892889fa59"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/web/HomeWebController.java b/src/main/java/stirling/software/SPDF/controller/web/HomeWebController.java\n--- a/src/main/java/stirling/software/SPDF/controller/web/HomeWebController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/web/HomeWebController.java\n@@ -77,9 +77,8 @@ public String root(Model model) {\n     }\n \n     @GetMapping(\"/home-legacy\")\n-    public String homeLegacy(Model model) {\n-        model.addAttribute(\"currentPage\", \"home-legacy\");\n-        return \"home-legacy\";\n+    public String redirectHomeLegacy() {\n+        return \"redirect:/\";\n     }\n \n     @GetMapping(value = \"/robots.txt\", produces = MediaType.TEXT_PLAIN_VALUE)",
    "output": "Remove legacy homepage # Description of Changes Please provide a summary of the changes, including: - What was changed - Why the change was made - Any challenges encountered Closes #(issue_number) --- ## Checklist ### General - [ ] I have read the [Contribution Guidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md) - [ ] I have read the [Stirling-PDF Developer Guide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md) (if applicable) - [ ] I have read the [How to add new languages to Stirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md) (if applicable) - [ ] I have performed a self-review of my own code - [ ] My changes generate no new warnings ### Documentation - [ ] I have updated relevant docs on [Stirling-PDF's doc repo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/) (if functionality has heavily changed) - [ ] I have read the section [Add New Translation Tags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags) (for new translation tags only) ### UI Changes (if applicable) - [ ] Screenshots or videos demonstrating the UI changes are attached (e.g., as comments or direct attachments in the PR) ### Testing (if applicable) - [ ] I have tested my changes locally. Refer to the [Testing Guide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md-testing) for more details."
  },
  {
    "input": "diff --git a/src/test/java/stirling/software/SPDF/EE/LicenseKeyCheckerTest.java b/src/test/java/stirling/software/SPDF/EE/LicenseKeyCheckerTest.java\n--- a/src/test/java/stirling/software/SPDF/EE/LicenseKeyCheckerTest.java\n+++ b/src/test/java/stirling/software/SPDF/EE/LicenseKeyCheckerTest.java\n@@ -0,0 +1,77 @@\n+package stirling.software.SPDF.EE;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.api.io.TempDir;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import stirling.software.SPDF.EE.KeygenLicenseVerifier.License;\n+import stirling.software.SPDF.model.ApplicationProperties;\n+\n+@ExtendWith(MockitoExtension.class)\n+class LicenseKeyCheckerTest {\n+\n+    @Mock private KeygenLicenseVerifier verifier;\n+\n+    @Test\n+    void premiumDisabled_skipsVerification() {\n+        ApplicationProperties props = new ApplicationProperties();\n+        props.getPremium().setEnabled(false);\n+        props.getPremium().setKey(\"dummy\");\n+\n+        LicenseKeyChecker checker = new LicenseKeyChecker(verifier, props);\n+\n+        assertEquals(License.NORMAL, checker.getPremiumLicenseEnabledResult());\n+        verifyNoInteractions(verifier);\n+    }\n+\n+    @Test\n+    void directKey_verified() {\n+        ApplicationProperties props = new ApplicationProperties();\n+        props.getPremium().setEnabled(true);\n+        props.getPremium().setKey(\"abc\");\n+        when(verifier.verifyLicense(\"abc\")).thenReturn(License.PRO);\n+\n+        LicenseKeyChecker checker = new LicenseKeyChecker(verifier, props);\n+\n+        assertEquals(License.PRO, checker.getPremiumLicenseEnabledResult());\n+        verify(verifier).verifyLicense(\"abc\");\n+    }\n+\n+    @Test\n+    void fileKey_verified(@TempDir Path temp) throws IOException {\n+        Path file = temp.resolve(\"license.txt\");\n+        Files.writeString(file, \"filekey\");\n+\n+        ApplicationProperties props = new ApplicationProperties();\n+        props.getPremium().setEnabled(true);\n+        props.getPremium().setKey(\"file:\" + file.toString());\n+        when(verifier.verifyLicense(\"filekey\")).thenReturn(License.ENTERPRISE);\n+\n+        LicenseKeyChecker checker = new LicenseKeyChecker(verifier, props);\n+\n+        assertEquals(License.ENTERPRISE, checker.getPremiumLicenseEnabledResult());\n+        verify(verifier).verifyLicense(\"filekey\");\n+    }\n+\n+    @Test\n+    void missingFile_resultsNormal(@TempDir Path temp) {\n+        Path file = temp.resolve(\"missing.txt\");\n+        ApplicationProperties props = new ApplicationProperties();\n+        props.getPremium().setEnabled(true);\n+        props.getPremium().setKey(\"file:\" + file.toString());\n+\n+        LicenseKeyChecker checker = new LicenseKeyChecker(verifier, props);\n+\n+        assertEquals(License.NORMAL, checker.getPremiumLicenseEnabledResult());\n+        verifyNoInteractions(verifier);\n+    }\n+}\n\ndiff --git a/src/test/java/stirling/software/SPDF/utils/GeneralUtilsAdditionalTest.java b/src/test/java/stirling/software/SPDF/utils/GeneralUtilsAdditionalTest.java\n--- a/src/test/java/stirling/software/SPDF/utils/GeneralUtilsAdditionalTest.java\n+++ b/src/test/java/stirling/software/SPDF/utils/GeneralUtilsAdditionalTest.java\n@@ -0,0 +1,41 @@\n+package stirling.software.SPDF.utils;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+import org.junit.jupiter.api.Test;\n+\n+class GeneralUtilsAdditionalTest {\n+\n+    @Test\n+    void testConvertSizeToBytes() {\n+        assertEquals(1024L, GeneralUtils.convertSizeToBytes(\"1KB\"));\n+        assertEquals(1024L * 1024, GeneralUtils.convertSizeToBytes(\"1MB\"));\n+        assertEquals(1024L * 1024 * 1024, GeneralUtils.convertSizeToBytes(\"1GB\"));\n+        assertEquals(100L * 1024 * 1024, GeneralUtils.convertSizeToBytes(\"100\"));\n+        assertNull(GeneralUtils.convertSizeToBytes(\"invalid\"));\n+        assertNull(GeneralUtils.convertSizeToBytes(null));\n+    }\n+\n+    @Test\n+    void testFormatBytes() {\n+        assertEquals(\"512 B\", GeneralUtils.formatBytes(512));\n+        assertEquals(\"1.00 KB\", GeneralUtils.formatBytes(1024));\n+        assertEquals(\"1.00 MB\", GeneralUtils.formatBytes(1024L * 1024));\n+        assertEquals(\"1.00 GB\", GeneralUtils.formatBytes(1024L * 1024 * 1024));\n+    }\n+\n+    @Test\n+    void testURLHelpersAndUUID() {\n+        assertTrue(GeneralUtils.isValidURL(\"https://example.com\"));\n+        assertFalse(GeneralUtils.isValidURL(\"htp:/bad\"));\n+        assertFalse(GeneralUtils.isURLReachable(\"http://localhost\"));\n+        assertFalse(GeneralUtils.isURLReachable(\"ftp://example.com\"));\n+\n+        assertTrue(GeneralUtils.isValidUUID(\"123e4567-e89b-12d3-a456-426614174000\"));\n+        assertFalse(GeneralUtils.isValidUUID(\"not-a-uuid\"));\n+\n+        assertFalse(GeneralUtils.isVersionHigher(null, \"1.0\"));\n+        assertTrue(GeneralUtils.isVersionHigher(\"2.0\", \"1.9\"));\n+        assertFalse(GeneralUtils.isVersionHigher(\"1.0\", \"1.0.1\"));\n+    }\n+}\n\ndiff --git a/src/test/java/stirling/software/SPDF/utils/PdfUtilsTest.java b/src/test/java/stirling/software/SPDF/utils/PdfUtilsTest.java\n--- a/src/test/java/stirling/software/SPDF/utils/PdfUtilsTest.java\n+++ b/src/test/java/stirling/software/SPDF/utils/PdfUtilsTest.java\n@@ -5,19 +5,28 @@\n import static org.junit.jupiter.api.Assertions.assertThrows;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n+import java.awt.Color;\n+import java.awt.Graphics2D;\n+import java.awt.image.BufferedImage;\n+import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.Set;\n \n import org.apache.pdfbox.cos.COSName;\n+import org.apache.pdfbox.pdmodel.PDDocument;\n import org.apache.pdfbox.pdmodel.PDPage;\n import org.apache.pdfbox.pdmodel.PDResources;\n import org.apache.pdfbox.pdmodel.common.PDRectangle;\n import org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;\n import org.junit.jupiter.api.Test;\n import org.mockito.Mockito;\n \n+import stirling.software.SPDF.model.ApplicationProperties;\n+import stirling.software.SPDF.service.CustomPDFDocumentFactory;\n+import stirling.software.SPDF.service.PdfMetadataService;\n+\n public class PdfUtilsTest {\n \n     @Test\n@@ -49,4 +58,68 @@ void testHasImagesOnPage() throws IOException {\n \n         assertTrue(PdfUtils.hasImagesOnPage(page));\n     }\n+\n+    @Test\n+    void testPageCountComparators() throws Exception {\n+        PDDocument doc1 = new PDDocument();\n+        doc1.addPage(new PDPage());\n+        doc1.addPage(new PDPage());\n+        doc1.addPage(new PDPage());\n+        PdfUtils utils = new PdfUtils();\n+        assertTrue(utils.pageCount(doc1, 2, \"greater\"));\n+\n+        PDDocument doc2 = new PDDocument();\n+        doc2.addPage(new PDPage());\n+        doc2.addPage(new PDPage());\n+        doc2.addPage(new PDPage());\n+        assertTrue(utils.pageCount(doc2, 3, \"equal\"));\n+\n+        PDDocument doc3 = new PDDocument();\n+        doc3.addPage(new PDPage());\n+        doc3.addPage(new PDPage());\n+        assertTrue(utils.pageCount(doc3, 5, \"less\"));\n+\n+        PDDocument doc4 = new PDDocument();\n+        doc4.addPage(new PDPage());\n+        assertThrows(IllegalArgumentException.class, () -> utils.pageCount(doc4, 1, \"bad\"));\n+    }\n+\n+    @Test\n+    void testPageSize() throws Exception {\n+        PDDocument doc = new PDDocument();\n+        PDPage page = new PDPage(PDRectangle.A4);\n+        doc.addPage(page);\n+        PDRectangle rect = page.getMediaBox();\n+        String expected = rect.getWidth() + \"x\" + rect.getHeight();\n+        PdfUtils utils = new PdfUtils();\n+        assertTrue(utils.pageSize(doc, expected));\n+    }\n+\n+    @Test\n+    void testOverlayImage() throws Exception {\n+        PDDocument doc = new PDDocument();\n+        doc.addPage(new PDPage(PDRectangle.A4));\n+        ByteArrayOutputStream pdfOut = new ByteArrayOutputStream();\n+        doc.save(pdfOut);\n+        doc.close();\n+\n+        BufferedImage image = new BufferedImage(10, 10, BufferedImage.TYPE_INT_RGB);\n+        Graphics2D g = image.createGraphics();\n+        g.setColor(Color.RED);\n+        g.fillRect(0, 0, 10, 10);\n+        g.dispose();\n+        ByteArrayOutputStream imgOut = new ByteArrayOutputStream();\n+        javax.imageio.ImageIO.write(image, \"png\", imgOut);\n+\n+        PdfMetadataService meta =\n+                new PdfMetadataService(new ApplicationProperties(), \"label\", false, null);\n+        CustomPDFDocumentFactory factory = new CustomPDFDocumentFactory(meta);\n+\n+        byte[] result =\n+                PdfUtils.overlayImage(\n+                        factory, pdfOut.toByteArray(), imgOut.toByteArray(), 0, 0, false);\n+        try (PDDocument resultDoc = factory.load(result)) {\n+            assertEquals(1, resultDoc.getNumberOfPages());\n+        }\n+    }\n }",
    "output": "Add additional unit tests for utils and EE ## Summary - add tests for LicenseKeyChecker - expand GeneralUtils coverage - cover extra PdfUtils functionality - merge PdfUtilsMoreTest into PdfUtilsTest ## Testing - `./gradlew test --no-daemon` - `./gradlew build spotlessApply --no-daemon`"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/LibreOfficeListener.java b/src/main/java/stirling/software/SPDF/LibreOfficeListener.java\n--- a/src/main/java/stirling/software/SPDF/LibreOfficeListener.java\n+++ b/src/main/java/stirling/software/SPDF/LibreOfficeListener.java\n@@ -31,7 +31,8 @@ private boolean isListenerRunning() {\n         log.info(\"waiting for listener to start\");\n         try (Socket socket = new Socket()) {\n             socket.connect(\n-                    new InetSocketAddress(\"localhost\", 2002), 1000); // Timeout after 1 second\n+                    new InetSocketAddress(\"localhost\", LISTENER_PORT),\n+                    1000); // Timeout after 1 second\n             return true;\n         } catch (Exception e) {\n             return false;\n\ndiff --git a/src/main/java/stirling/software/SPDF/config/FileFallbackTemplateResolver.java b/src/main/java/stirling/software/SPDF/config/FileFallbackTemplateResolver.java\n--- a/src/main/java/stirling/software/SPDF/config/FileFallbackTemplateResolver.java\n+++ b/src/main/java/stirling/software/SPDF/config/FileFallbackTemplateResolver.java\n@@ -11,8 +11,11 @@\n import org.thymeleaf.templateresource.FileTemplateResource;\n import org.thymeleaf.templateresource.ITemplateResource;\n \n+import lombok.extern.slf4j.Slf4j;\n+\n import stirling.software.SPDF.model.InputStreamTemplateResource;\n \n+@Slf4j\n public class FileFallbackTemplateResolver extends AbstractConfigurableTemplateResolver {\n \n     private final ResourceLoader resourceLoader;\n@@ -40,7 +43,8 @@ protected ITemplateResource computeTemplateResource(\n                 return new FileTemplateResource(resource.getFile().getPath(), characterEncoding);\n             }\n         } catch (IOException e) {\n-\n+            // Log the exception to help with debugging issues loading external templates\n+            log.warn(\"Unable to read template '{}' from file system\", resourceName, e);\n         }\n \n         InputStream inputStream =\n\ndiff --git a/src/main/java/stirling/software/SPDF/model/InputStreamTemplateResource.java b/src/main/java/stirling/software/SPDF/model/InputStreamTemplateResource.java\n--- a/src/main/java/stirling/software/SPDF/model/InputStreamTemplateResource.java\n+++ b/src/main/java/stirling/software/SPDF/model/InputStreamTemplateResource.java\n@@ -39,7 +39,6 @@ public String getBaseName() {\n \n     @Override\n     public boolean exists() {\n-        // TODO Auto-generated method stub\n-        return false;\n+        return inputStream != null;\n     }\n }",
    "output": "Fix TemplateResolver and LibreOfficeListener bugs ## Summary - log missing exceptions in FileFallbackTemplateResolver - implement exists check for InputStreamTemplateResource - use LISTENER_PORT constant when verifying LibreOffice listener ## Testing - `./gradlew build --no-daemon` - `./gradlew test --no-daemon` --------- Co-authored-by: Copilot <175728472+Copilot@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java b/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java\n@@ -93,6 +93,7 @@ PipelineResult runPipelineAgainstFiles(List<Resource> outputFiles, PipelineConfi\n         ByteArrayOutputStream logStream = new ByteArrayOutputStream();\n         PrintStream logPrintStream = new PrintStream(logStream);\n         boolean hasErrors = false;\n+        boolean filtersApplied = false;\n         for (PipelineOperation pipelineOperation : config.getOperations()) {\n             String operation = pipelineOperation.getOperation();\n             boolean isMultiInputOperation = apiDocService.isMultiInput(operation);\n@@ -134,7 +135,7 @@ PipelineResult runPipelineAgainstFiles(List<Resource> outputFiles, PipelineConfi\n                             if (operation.startsWith(\"filter-\")\n                                     && (response.getBody() == null\n                                             || response.getBody().length == 0)) {\n-                                result.setFiltersApplied(true);\n+                                filtersApplied = true;\n                                 log.info(\"Skipping file due to filtering {}\", operation);\n                                 continue;\n                             }\n@@ -215,12 +216,12 @@ PipelineResult runPipelineAgainstFiles(List<Resource> outputFiles, PipelineConfi\n             log.error(\"Errors occurred during processing. Log: {}\", logStream.toString());\n         }\n         result.setHasErrors(hasErrors);\n-        result.setFiltersApplied(hasErrors);\n+        result.setFiltersApplied(filtersApplied);\n         result.setOutputFiles(outputFiles);\n         return result;\n     }\n \n-    private ResponseEntity<byte[]> sendWebRequest(String url, MultiValueMap<String, Object> body) {\n+    /* package */ ResponseEntity<byte[]> sendWebRequest(String url, MultiValueMap<String, Object> body) {\n         RestTemplate restTemplate = new RestTemplate();\n         // Set up headers, including API key\n         HttpHeaders headers = new HttpHeaders();\n\ndiff --git a/src/test/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessorTest.java b/src/test/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessorTest.java\n--- a/src/test/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessorTest.java\n+++ b/src/test/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessorTest.java\n@@ -0,0 +1,76 @@\n+package stirling.software.SPDF.controller.api.pipeline;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.mockito.ArgumentMatchers.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.springframework.core.io.ByteArrayResource;\n+import org.springframework.core.io.Resource;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+\n+import jakarta.servlet.ServletContext;\n+\n+import stirling.software.SPDF.model.PipelineConfig;\n+import stirling.software.SPDF.model.PipelineOperation;\n+import stirling.software.SPDF.model.PipelineResult;\n+\n+@ExtendWith(MockitoExtension.class)\n+class PipelineProcessorTest {\n+\n+    @Mock\n+    ApiDocService apiDocService;\n+\n+    @Mock\n+    UserServiceInterface userService;\n+\n+    @Mock\n+    ServletContext servletContext;\n+\n+    PipelineProcessor pipelineProcessor;\n+\n+    @BeforeEach\n+    void setUp() {\n+        pipelineProcessor = spy(new PipelineProcessor(apiDocService, userService, servletContext));\n+    }\n+\n+    @Test\n+    void runPipelineWithFilterSetsFlag() throws Exception {\n+        PipelineOperation op = new PipelineOperation();\n+        op.setOperation(\"filter-page-count\");\n+        op.setParameters(Map.of());\n+        PipelineConfig config = new PipelineConfig();\n+        config.setOperations(List.of(op));\n+\n+        Resource file = new ByteArrayResource(\"data\".getBytes()) {\n+            @Override\n+            public String getFilename() {\n+                return \"test.pdf\";\n+            }\n+        };\n+\n+        List<Resource> files = List.of(file);\n+\n+        when(apiDocService.isMultiInput(\"filter-page-count\")).thenReturn(false);\n+        when(apiDocService.getExtensionTypes(false, \"filter-page-count\")).thenReturn(List.of(\"pdf\"));\n+\n+        doReturn(new ResponseEntity<>(new byte[0], HttpStatus.OK))\n+                .when(pipelineProcessor)\n+                .sendWebRequest(anyString(), any());\n+\n+        PipelineResult result = pipelineProcessor.runPipelineAgainstFiles(files, config);\n+\n+        assertTrue(result.isFiltersApplied(), \"Filter flag should be true when operation filters file\");\n+        assertFalse(result.isHasErrors(), \"No errors should occur\");\n+        assertTrue(result.getOutputFiles().isEmpty(), \"Filtered file list should be empty\");\n+    }\n+}\n+",
    "output": "Fix test compilation around pipeline processor ## Summary - allow tests to spy on PipelineProcessor web requests - fix ResponseEntity usage in PipelineProcessorTest ## Testing - `./gradlew test --offline` *(fails: No route to host while downloading .14-all.zip)*"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/security/CertSignController.java b/src/main/java/stirling/software/SPDF/controller/api/security/CertSignController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/security/CertSignController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/security/CertSignController.java\n@@ -1,6 +1,7 @@\n package stirling.software.SPDF.controller.api.security;\n \n import java.awt.*;\n+import java.beans.PropertyEditorSupport;\n import java.io.*;\n import java.nio.file.Files;\n import java.security.*;\n@@ -53,7 +54,10 @@\n import org.bouncycastle.pkcs.PKCS8EncryptedPrivateKeyInfo;\n import org.bouncycastle.pkcs.PKCSException;\n import org.springframework.core.io.ClassPathResource;\n+import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.WebDataBinder;\n+import org.springframework.web.bind.annotation.InitBinder;\n import org.springframework.web.bind.annotation.ModelAttribute;\n import org.springframework.web.bind.annotation.PostMapping;\n import org.springframework.web.bind.annotation.RequestMapping;\n@@ -82,6 +86,18 @@ public class CertSignController {\n         Security.addProvider(new BouncyCastleProvider());\n     }\n \n+    @InitBinder\n+    public void initBinder(WebDataBinder binder) {\n+        binder.registerCustomEditor(\n+                MultipartFile.class,\n+                new PropertyEditorSupport() {\n+                    @Override\n+                    public void setAsText(String text) throws IllegalArgumentException {\n+                        setValue(null);\n+                    }\n+                });\n+    }\n+\n     private final CustomPDFDocumentFactory pdfDocumentFactory;\n \n     private static void sign(\n@@ -103,8 +119,7 @@ private static void sign(\n             signature.setLocation(location);\n             signature.setReason(reason);\n             signature.setSignDate(Calendar.getInstance());\n-\n-            if (showSignature) {\n+            if (Boolean.TRUE.equals(showSignature)) {\n                 SignatureOptions signatureOptions = new SignatureOptions();\n                 signatureOptions.setVisualSignature(\n                         instance.createVisibleSignature(doc, signature, pageNumber, showLogo));\n@@ -121,13 +136,18 @@ private static void sign(\n         }\n     }\n \n-    @PostMapping(consumes = \"multipart/form-data\", value = \"/cert-sign\")\n+    @PostMapping(\n+            consumes = {\n+                MediaType.MULTIPART_FORM_DATA_VALUE,\n+                MediaType.APPLICATION_FORM_URLENCODED_VALUE\n+            },\n+            value = \"/cert-sign\")\n     @Operation(\n             summary = \"Sign PDF with a Digital Certificate\",\n             description =\n                     \"This endpoint accepts a PDF file, a digital certificate and related\"\n-                            + \" information to sign the PDF. It then returns the digitally signed PDF\"\n-                            + \" file. Input:PDF Output:PDF Type:SISO\")\n+                        + \" information to sign the PDF. It then returns the digitally signed PDF\"\n+                        + \" file. Input:PDF Output:PDF Type:SISO\")\n     public ResponseEntity<byte[]> signPDFWithCert(@ModelAttribute SignPDFWithCertRequest request)\n             throws Exception {\n         MultipartFile pdf = request.getFileInput();\n@@ -137,12 +157,13 @@ public ResponseEntity<byte[]> signPDFWithCert(@ModelAttribute SignPDFWithCertReq\n         MultipartFile p12File = request.getP12File();\n         MultipartFile jksfile = request.getJksFile();\n         String password = request.getPassword();\n-        Boolean showSignature = request.isShowSignature();\n+        Boolean showSignature = request.getShowSignature();\n         String reason = request.getReason();\n         String location = request.getLocation();\n         String name = request.getName();\n-        Integer pageNumber = request.getPageNumber() - 1;\n-        Boolean showLogo = request.isShowLogo();\n+        // Convert 1-indexed page number (user input) to 0-indexed page number (API requirement)\n+        Integer pageNumber = request.getPageNumber() != null ? (request.getPageNumber() - 1) : null;\n+        Boolean showLogo = request.getShowLogo();\n \n         if (certType == null) {\n             throw new IllegalArgumentException(\"Cert type must be provided\");\n@@ -279,7 +300,7 @@ public InputStream createVisibleSignature(\n                 widget.setAppearance(appearance);\n \n                 try (PDPageContentStream cs = new PDPageContentStream(doc, appearanceStream)) {\n-                    if (showLogo) {\n+                    if (Boolean.TRUE.equals(showLogo)) {\n                         cs.saveGraphicsState();\n                         PDExtendedGraphicsState extState = new PDExtendedGraphicsState();\n                         extState.setBlendMode(BlendMode.MULTIPLY);\n\ndiff --git a/src/main/java/stirling/software/SPDF/model/api/security/SignPDFWithCertRequest.java b/src/main/java/stirling/software/SPDF/model/api/security/SignPDFWithCertRequest.java\n--- a/src/main/java/stirling/software/SPDF/model/api/security/SignPDFWithCertRequest.java\n+++ b/src/main/java/stirling/software/SPDF/model/api/security/SignPDFWithCertRequest.java\n@@ -20,7 +20,8 @@ public class SignPDFWithCertRequest extends PDFFile {\n \n     @Schema(\n             description =\n-                    \"The private key for the digital certificate (required for PEM type certificates)\")\n+                    \"The private key for the digital certificate (required for PEM type\"\n+                            + \" certificates)\")\n     private MultipartFile privateKeyFile;\n \n     @Schema(description = \"The digital certificate (required for PEM type certificates)\")\n@@ -32,11 +33,11 @@ public class SignPDFWithCertRequest extends PDFFile {\n     @Schema(description = \"The JKS keystore file (Java Key Store)\")\n     private MultipartFile jksFile;\n \n-    @Schema(description = \"The password for the keystore or the private key\")\n+    @Schema(description = \"The password for the keystore or the private key\", format = \"password\")\n     private String password;\n \n     @Schema(description = \"Whether to visually show the signature in the PDF file\")\n-    private boolean showSignature;\n+    private Boolean showSignature;\n \n     @Schema(description = \"The reason for signing the PDF\")\n     private String reason;\n@@ -49,9 +50,10 @@ public class SignPDFWithCertRequest extends PDFFile {\n \n     @Schema(\n             description =\n-                    \"The page number where the signature should be visible. This is required if showSignature is set to true\")\n+                    \"The page number where the signature should be visible. This is required if\"\n+                            + \" showSignature is set to true\")\n     private Integer pageNumber;\n \n     @Schema(description = \"Whether to visually show a signature logo along with the signature\")\n-    private boolean showLogo;\n+    private Boolean showLogo;\n }",
    "output": "Fix cert-sign API NullPointerException when pageNumber is omitted for invisible signatures # Description of Changes Please provide a summary of the changes, including - **What was changed** - Updated `SignPDFWithCertRequest` to use `Boolean` for `showSignature` and `showLogo`, and made `pageNumber` nullable. - In `CertSignController` - Added an `@InitBinder` to convert empty multipart fields to `null`. - Extended `@PostMapping` to consume both `multipart/form-data` and `application/x-www-form-urlencoded`. - Wrapped `pageNumber` calculation in a null-check (`pageNumber = request.getPageNumber!= null ? request.getPageNumber- 1 : null`). - Changed signature-visualization and logo checks to `Boolean.TRUE.equals(...)` to avoid unboxing NPE. - Cleaned up imports and schema annotations in the request model. - **Why the change was made** - Prevent a 500 Internal Server Error caused by calling `.intValue` on a null `pageNumber` when `showSignature=false` (invisible signatures). - Ensure that omitting `pageNumber` doesn’t break clients using the “try it out” swagger UI or `curl`-based requests. - **Any challenges encountered** - Configuring Spring’s data binder to treat empty file inputs as `null` required a custom `PropertyEditorSupport`. - Balancing backward compatibility with stricter type handling (switching from primitive `boolean` to boxed `Boolean`). --- ## Checklist ### General - [x] I have read the [Contribution Guidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md) - [x] I have read the [Stirling-PDF Developer Guide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md) (if applicable) - [ ] I have read the [How to add new languages to Stirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md) (if applicable) - [x] I have performed a self-review of my own code - [x] My changes generate no new warnings ### Documentation - [ ] I have updated relevant docs on [Stirling-PDF's doc repo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/) (if functionality has heavily changed) - [ ] I have read the section [Add New Translation Tags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags) (for new translation tags only) ### UI Changes (if applicable) - [ ] Screenshots or videos demonstrating the UI changes are attached (e.g., as comments or direct attachments in the PR) ### Testing (if applicable) - [ ] I have tested my changes locally. Refer to the [Testing Guide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md-testing) for more details."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/AnalysisController.java b/src/main/java/stirling/software/SPDF/controller/api/AnalysisController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/AnalysisController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/AnalysisController.java\n@@ -59,7 +59,8 @@ public Map<String, Object> getBasicInfo(@ModelAttribute PDFFile file) throws IOE\n             description = \"Returns title, author, subject, etc. Input:PDF Output:JSON Type:SISO\")\n     public Map<String, String> getDocumentProperties(@ModelAttribute PDFFile file)\n             throws IOException {\n-        try (PDDocument document = pdfDocumentFactory.load(file.getFileInput())) {\n+        // Load the document in read-only mode to prevent modifications and ensure the integrity of the original file.\n+        try (PDDocument document = pdfDocumentFactory.load(file.getFileInput(), true)) {\n             PDDocumentInformation info = document.getDocumentInformation();\n             Map<String, String> properties = new HashMap<>();\n             properties.put(\"title\", info.getTitle());",
    "output": "Fix read wrong properties # Description of Changes Please provide a summary of the changes, including: Test file: [12345678.pdf](https://github.com/user-attachments/files/20028981/12345678.pdf) Behavior without readOnly ```json { \"creator\": null, \"modificationDate\": \"java.util.GregorianCalendar[time=1746381303000,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=java.util.SimpleTimeZone[id=GMT,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2025,MONTH=4,WEEK_OF_YEAR=19,WEEK_OF_MONTH=2,DAY_OF_MONTH=4,DAY_OF_YEAR=124,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=55,SECOND=3,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]\", \"keywords\": null, \"author\": \"\", \"subject\": null, \"producer\": \"Stirling-PDF v0.46.0\", \"title\": \"Microsoft Word - Dokument1\", \"creationDate\": \"java.util.GregorianCalendar[time=1746381238000,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=java.util.SimpleTimeZone[id=GMT+02:00,offset=7200000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2025,MONTH=4,WEEK_OF_YEAR=19,WEEK_OF_MONTH=2,DAY_OF_MONTH=4,DAY_OF_YEAR=124,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=53,SECOND=58,MILLISECOND=0,ZONE_OFFSET=7200000,DST_OFFSET=0]\" } ``` with readOnly=true ```json { \"creator\": null, \"modificationDate\": \"java.util.GregorianCalendar[time=1746381238000,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=java.util.SimpleTimeZone[id=GMT+02:00,offset=7200000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2025,MONTH=4,WEEK_OF_YEAR=19,WEEK_OF_MONTH=2,DAY_OF_MONTH=4,DAY_OF_YEAR=124,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=53,SECOND=58,MILLISECOND=0,ZONE_OFFSET=7200000,DST_OFFSET=0]\", \"keywords\": null, \"author\": \"\", \"subject\": null, \"producer\": \"Microsoft: Print To PDF\", \"title\": \"Microsoft Word - Dokument1\", \"creationDate\": \"java.util.GregorianCalendar[time=1746381238000,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=java.util.SimpleTimeZone[id=GMT+02:00,offset=7200000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2025,MONTH=4,WEEK_OF_YEAR=19,WEEK_OF_MONTH=2,DAY_OF_MONTH=4,DAY_OF_YEAR=124,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=7,HOUR_OF_DAY=19,MINUTE=53,SECOND=58,MILLISECOND=0,ZONE_OFFSET=7200000,DST_OFFSET=0]\" } ``` --- ## Checklist ### General - [x] I have read the [Contribution Guidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md) - [x] I have read the [Stirling-PDF Developer Guide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md) (if applicable) - [ ] I have read the [How to add new languages to Stirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md) (if applicable) - [x] I have performed a self-review of my own code - [x] My changes generate no new warnings ### Documentation - [ ] I have updated relevant docs on [Stirling-PDF's doc repo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/) (if functionality has heavily changed) - [ ] I have read the section [Add New Translation Tags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags) (for new translation tags only) ### UI Changes (if applicable) - [ ] Screenshots or videos demonstrating the UI changes are attached (e.g., as comments or direct attachments in the PR) ### Testing (if applicable) - [ ] I have tested my changes locally. Refer to the [Testing Guide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md-testing) for more details. --------- Co-authored-by: Copilot <175728472+Copilot@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/misc/ReplaceAndInvertColorController.java b/src/main/java/stirling/software/SPDF/controller/api/misc/ReplaceAndInvertColorController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/misc/ReplaceAndInvertColorController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/misc/ReplaceAndInvertColorController.java\n@@ -25,7 +25,7 @@\n @RequiredArgsConstructor\n public class ReplaceAndInvertColorController {\n \n-    private ReplaceAndInvertColorService replaceAndInvertColorService;\n+    private final ReplaceAndInvertColorService replaceAndInvertColorService;\n \n     @PostMapping(consumes = \"multipart/form-data\", value = \"/replace-invert-pdf\")\n     @Operation(\n\ndiff --git a/src/main/java/stirling/software/SPDF/service/misc/ReplaceAndInvertColorService.java b/src/main/java/stirling/software/SPDF/service/misc/ReplaceAndInvertColorService.java\n--- a/src/main/java/stirling/software/SPDF/service/misc/ReplaceAndInvertColorService.java\n+++ b/src/main/java/stirling/software/SPDF/service/misc/ReplaceAndInvertColorService.java\n@@ -16,7 +16,7 @@\n @Service\n @RequiredArgsConstructor\n public class ReplaceAndInvertColorService {\n-    private ReplaceAndInvertColorFactory replaceAndInvertColorFactory;\n+    private final ReplaceAndInvertColorFactory replaceAndInvertColorFactory;\n \n     public InputStreamResource replaceAndInvertColor(\n             MultipartFile file,",
    "output": "Fix NullPointerException by Enabling Constructor Injection for Color Replacement Components # Description of Changes Please provide a summary of the changes, including - **What was changed** Added the `final` modifier to the `ReplaceAndInvertColorService` field in `ReplaceAndInvertColorController` and to the `ReplaceAndInvertColorFactory` field in `ReplaceAndInvertColorService`. This ensures that Lombok’s `@RequiredArgsConstructor` generates constructors for these dependencies, enabling proper constructor-based injection instead of leaving them null. - **Why the change was made** Without the `final` keyword, Lombok does not include non-final fields in the generated constructor, causing Spring to leave them uninitialized and resulting in a `NullPointerException` during runtime when invoking `replaceAndInvert` on the factory/service. --- ## Checklist ### General - [x] I have read the [Contribution Guidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md) - [x] I have read the [Stirling-PDF Developer Guide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md) (if applicable) - [ ] I have read the [How to add new languages to Stirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md) (if applicable) - [x] I have performed a self-review of my own code - [x] My changes generate no new warnings ### Documentation - [ ] I have updated relevant docs on [Stirling-PDF's doc repo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/) (if functionality has heavily changed) - [ ] I have read the section [Add New Translation Tags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags) (for new translation tags only) ### UI Changes (if applicable) - [ ] Screenshots or videos demonstrating the UI changes are attached (e.g., as comments or direct attachments in the PR) ### Testing (if applicable) - [ ] I have tested my changes locally. Refer to the [Testing Guide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md-testing) for more details."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/web/HomeWebController.java b/src/main/java/stirling/software/SPDF/controller/web/HomeWebController.java\n--- a/src/main/java/stirling/software/SPDF/controller/web/HomeWebController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/web/HomeWebController.java\n@@ -67,6 +67,9 @@ public String getReleaseNotes(Model model) {\n     @GetMapping(\"/\")\n     public String home(Model model) {\n         model.addAttribute(\"currentPage\", \"home\");\n+        String showSurvey = System.getenv(\"SHOW_SURVEY\");\n+        boolean showSurveyValue = showSurvey == null || \"true\".equalsIgnoreCase(showSurvey);\n+        model.addAttribute(\"showSurveyFromDocker\", showSurveyValue);\n         return \"home\";\n     }\n ",
    "output": "Add SHOW_SURVEY Environment variable to Docker In the previous implementation, the survey was displayed on the main screen when the homepage was opened for the 5th, 10th, 15th, 22nd, 30th, 50th, 75th, 100th, 150th, or 200th time, as long as the \"Do not show again\" option hadn't been selected. With this new feature, if the SHOW_SURVEY environment variable is set to true or not set at all in the Docker configuration, the survey will continue to be shown as before. <img width=\"1679\" alt=\"Screenshot 2025-04-18 at 08 17 37\" src=\"https://github.com/user-attachments/assets/696b9dc2-9502-4d66-9991-d2b81b52cd02\" /> However, if the SHOW_SURVEY parameter is explicitly set to false, the survey will no longer be displayed. <img width=\"1707\" alt=\"Screenshot 2025-04-18 at 08 18 39\" src=\"https://github.com/user-attachments/assets/b57c568a-b5e7-4927-bccf-f9a398bea702\" /> --- ## Checklist ### General - [X] I have read the [Contribution Guidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md) - [X] I have read the [Stirling-PDF Developer Guide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md) (if applicable) - [X] I have read the [How to add new languages to Stirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md) (if applicable) - [X] I have performed a self-review of my own code - [X] My changes generate no new warnings ### Documentation - [ ] I have updated relevant docs on [Stirling-PDF's doc repo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/) (if functionality has heavily changed) - [ ] I have read the section [Add New Translation Tags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags) (for new translation tags only) ### UI Changes (if applicable) - [X] Screenshots or videos demonstrating the UI changes are attached (e.g., as comments or direct attachments in the PR) ### Testing (if applicable) - [X] I have tested my changes locally. Refer to the [Testing Guide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md-testing) for more details."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineDirectoryProcessor.java b/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineDirectoryProcessor.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineDirectoryProcessor.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineDirectoryProcessor.java\n@@ -208,7 +208,8 @@ private File[] collectFilesForProcessing(Path dir, Path jsonFile, PipelineOperat\n                                         // Check against allowed extensions\n                                         boolean isAllowed =\n                                                 allowAllFiles\n-                                                        || inputExtensions.contains(extension);\n+                                                        || inputExtensions.contains(\n+                                                                extension.toLowerCase());\n                                         if (!isAllowed) {\n                                             log.info(\n                                                     \"Skipping file with unsupported extension: {} ({})\",\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java b/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/pipeline/PipelineProcessor.java\n@@ -112,7 +112,8 @@ PipelineResult runPipelineAgainstFiles(List<Resource> outputFiles, PipelineConfi\n                 for (Resource file : outputFiles) {\n                     boolean hasInputFileType = false;\n                     for (String extension : inputFileTypes) {\n-                        if (\"ALL\".equals(extension) || file.getFilename().endsWith(extension)) {\n+                        if (\"ALL\".equals(extension)\n+                                || file.getFilename().toLowerCase().endsWith(extension)) {\n                             hasInputFileType = true;\n                             MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();\n                             body.add(\"fileInput\", file);\n@@ -166,7 +167,9 @@ PipelineResult runPipelineAgainstFiles(List<Resource> outputFiles, PipelineConfi\n                                     .filter(\n                                             file ->\n                                                     finalinputFileTypes.stream()\n-                                                            .anyMatch(file.getFilename()::endsWith))\n+                                                            .anyMatch(\n+                                                                    file.getFilename().toLowerCase()\n+                                                                            ::endsWith))\n                                     .toList();\n                 }\n                 // Check if there are matching files",
    "output": "Make file extension checks case-insensitive in pipeline # Description of Changes File extensions in the pipeline were being checked in a case-sensitive manner. Since supported extensions were defined in lowercase only, files with uppercase extensions were being rejected directly, and logs like the following were being printed <img width=\"1542\" alt=\"Screenshot 2025-04-17 at 00 14 16\" src=\"https://github.com/user-attachments/assets/a584b8d8-0a56-4a76-b409-9d6cd38f1a80\" /> With this change, the uploaded file’s extension is now converted to lowercase using toLowerCase, making the extension check case-insensitive. After this change, the logs flow as expected, as shown below <img width=\"1317\" alt=\"Screenshot 2025-04-17 at 00 49 52\" src=\"https://github.com/user-attachments/assets/2abdcfc7-4c74-4b06-bbea-ef12e0f737b4\" /> --- ## Checklist ### General - [X] I have read the [Contribution Guidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md) - [X] I have read the [Stirling-PDF Developer Guide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md) (if applicable) - [X] I have read the [How to add new languages to Stirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md) (if applicable) - [X] I have performed a self-review of my own code - [X] My changes generate no new warnings ### Documentation - [ ] I have updated relevant docs on [Stirling-PDF's doc repo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/) (if functionality has heavily changed) - [ ] I have read the section [Add New Translation Tags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags) (for new translation tags only) ### UI Changes (if applicable) - [ ] Screenshots or videos demonstrating the UI changes are attached (e.g., as comments or direct attachments in the PR) ### Testing (if applicable) - [X] I have tested my changes locally. Refer to the [Testing Guide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md-testing) for more details."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/AppConfig.java b/src/main/java/stirling/software/SPDF/config/AppConfig.java\n--- a/src/main/java/stirling/software/SPDF/config/AppConfig.java\n+++ b/src/main/java/stirling/software/SPDF/config/AppConfig.java\n@@ -109,33 +109,6 @@ public boolean rateLimit() {\n         return (rateLimit != null) ? Boolean.valueOf(rateLimit) : false;\n     }\n \n-    @Bean(name = \"uploadLimit\")\n-    public long uploadLimit() {\n-        String maxUploadSize =\n-                applicationProperties.getSystem().getFileUploadLimit() != null\n-                        ? applicationProperties.getSystem().getFileUploadLimit()\n-                        : \"\";\n-\n-        if (maxUploadSize.isEmpty()) {\n-            return 0;\n-        } else if (!new Regex(\"^[1-9][0-9]{0,2}[KMGkmg][Bb]$\").matches(maxUploadSize)) {\n-            log.error(\n-                    \"Invalid maxUploadSize format. Expected format: [1-9][0-9]{0,2}[KMGkmg][Bb], but got: {}\",\n-                    maxUploadSize);\n-            return 0;\n-        } else {\n-            String unit = maxUploadSize.replaceAll(\"[1-9][0-9]{0,2}\", \"\").toUpperCase();\n-            String number = maxUploadSize.replaceAll(\"[KMGkmg][Bb]\", \"\");\n-            long size = Long.parseLong(number);\n-            return switch (unit) {\n-                case \"KB\" -> size * 1024;\n-                case \"MB\" -> size * 1024 * 1024;\n-                case \"GB\" -> size * 1024 * 1024 * 1024;\n-                default -> 0;\n-            };\n-        }\n-    }\n-\n     @Bean(name = \"RunningInDocker\")\n     public boolean runningInDocker() {\n         return Files.exists(Paths.get(\"/.dockerenv\"));\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/web/GlobalUploadLimitWebController.java b/src/main/java/stirling/software/SPDF/controller/web/GlobalUploadLimitWebController.java\n--- a/src/main/java/stirling/software/SPDF/controller/web/GlobalUploadLimitWebController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/web/GlobalUploadLimitWebController.java\n@@ -1,30 +0,0 @@\n-package stirling.software.SPDF.controller.web;\n-\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n-import org.springframework.web.bind.annotation.ControllerAdvice;\n-import org.springframework.web.bind.annotation.ModelAttribute;\n-\n-@Component\n-@ControllerAdvice\n-public class GlobalUploadLimitWebController {\n-\n-    @Autowired() private long uploadLimit;\n-\n-    @ModelAttribute(\"uploadLimit\")\n-    public long populateUploadLimit() {\n-        return uploadLimit;\n-    }\n-\n-    @ModelAttribute(\"uploadLimitReadable\")\n-    public String populateReadableLimit() {\n-        return humanReadableByteCount(uploadLimit);\n-    }\n-\n-    private String humanReadableByteCount(long bytes) {\n-        if (bytes < 1024) return bytes + \" B\";\n-        int exp = (int) (Math.log(bytes) / Math.log(1024));\n-        String pre = \"KMGTPE\".charAt(exp - 1) + \"B\";\n-        return String.format(\"%.1f %s\", bytes / Math.pow(1024, exp), pre);\n-    }\n-}\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/web/UploadLimitService.java b/src/main/java/stirling/software/SPDF/controller/web/UploadLimitService.java\n--- a/src/main/java/stirling/software/SPDF/controller/web/UploadLimitService.java\n+++ b/src/main/java/stirling/software/SPDF/controller/web/UploadLimitService.java\n@@ -0,0 +1,55 @@\n+package stirling.software.SPDF.controller.web;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import stirling.software.SPDF.model.ApplicationProperties;\n+\n+import java.util.regex.Pattern;\n+\n+@Service\n+@Slf4j\n+public class UploadLimitService {\n+\n+    @Autowired\n+    private ApplicationProperties applicationProperties;\n+\n+    public long getUploadLimit() {\n+        String maxUploadSize = \n+            applicationProperties.getSystem().getFileUploadLimit() != null\n+                ? applicationProperties.getSystem().getFileUploadLimit()\n+                : \"\";\n+\n+        if (maxUploadSize.isEmpty()) {\n+            return 0;\n+        } else if (!Pattern.compile(\"^[1-9][0-9]{0,2}[KMGkmg][Bb]$\").matcher(maxUploadSize).matches()) {\n+            log.error(\n+                \"Invalid maxUploadSize format. Expected format: [1-9][0-9]{0,2}[KMGkmg][Bb], but got: {}\",\n+                maxUploadSize);\n+            return 0;\n+        } else {\n+            String unit = maxUploadSize.replaceAll(\"[1-9][0-9]{0,2}\", \"\").toUpperCase();\n+            String number = maxUploadSize.replaceAll(\"[KMGkmg][Bb]\", \"\");\n+            long size = Long.parseLong(number);\n+            return switch (unit) {\n+                case \"KB\" -> size * 1024;\n+                case \"MB\" -> size * 1024 * 1024;\n+                case \"GB\" -> size * 1024 * 1024 * 1024;\n+                default -> 0;\n+            };\n+        }\n+    }\n+\n+    //TODO: why do this server side not client?\n+    public String getReadableUploadLimit() {\n+        return humanReadableByteCount(getUploadLimit());\n+    }\n+\n+    private String humanReadableByteCount(long bytes) {\n+        if (bytes < 1024) return bytes + \" B\";\n+        int exp = (int) (Math.log(bytes) / Math.log(1024));\n+        String pre = \"KMGTPE\".charAt(exp - 1) + \"B\";\n+        return String.format(\"%.1f %s\", bytes / Math.pow(1024, exp), pre);\n+    }\n+}\n\\ No newline at end of file",
    "output": "Fix pipelines via changing to service # Description of Changes Please provide a summary of the changes, including: - What was changed - Why the change was made - Any challenges encountered Closes #(issue_number) --- ## Checklist ### General - [ ] I have read the [Contribution Guidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md) - [ ] I have read the [Stirling-PDF Developer Guide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md) (if applicable) - [ ] I have read the [How to add new languages to Stirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md) (if applicable) - [ ] I have performed a self-review of my own code - [ ] My changes generate no new warnings ### Documentation - [ ] I have updated relevant docs on [Stirling-PDF's doc repo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/) (if functionality has heavily changed) - [ ] I have read the section [Add New Translation Tags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags) (for new translation tags only) ### UI Changes (if applicable) - [ ] Screenshots or videos demonstrating the UI changes are attached (e.g., as comments or direct attachments in the PR) ### Testing (if applicable) - [ ] I have tested my changes locally. Refer to the [Testing Guide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md-testing) for more details."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/UserService.java b/src/main/java/stirling/software/SPDF/config/security/UserService.java\n--- a/src/main/java/stirling/software/SPDF/config/security/UserService.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/UserService.java\n@@ -205,6 +205,7 @@ public void saveUser(String username, String password)\n         user.setPassword(passwordEncoder.encode(password));\n         user.setEnabled(true);\n         user.setAuthenticationType(AuthenticationType.WEB);\n+        user.addAuthority(new Authority(Role.USER.getRoleId(), user));\n         userRepository.save(user);\n         databaseService.exportDatabase();\n     }\n@@ -230,6 +231,22 @@ public void saveUser(String username, String password, String role)\n         saveUser(username, password, role, false);\n     }\n \n+    public void saveUser(String username, String password, boolean firstLogin, boolean enabled)\n+            throws IllegalArgumentException, SQLException, UnsupportedProviderException {\n+        if (!isUsernameValid(username)) {\n+            throw new IllegalArgumentException(getInvalidUsernameMessage());\n+        }\n+        User user = new User();\n+        user.setUsername(username);\n+        user.setPassword(passwordEncoder.encode(password));\n+        user.addAuthority(new Authority(Role.USER.getRoleId(), user));\n+        user.setEnabled(enabled);\n+        user.setAuthenticationType(AuthenticationType.WEB);\n+        user.setFirstLogin(firstLogin);\n+        userRepository.save(user);\n+        databaseService.exportDatabase();\n+    }\n+\n     public void deleteUser(String username) {\n         Optional<User> userOpt = findByUsernameIgnoreCase(username);\n         if (userOpt.isPresent()) {\n@@ -352,6 +369,7 @@ public boolean isUsernameValid(String username) {\n \n         List<String> notAllowedUserList = new ArrayList<>();\n         notAllowedUserList.add(\"ALL_USERS\".toLowerCase());\n+        notAllowedUserList.add(\"anonymoususer\");\n         boolean notAllowedUser = notAllowedUserList.contains(username.toLowerCase());\n         return (isValidSimpleUsername || isValidEmail) && !notAllowedUser;\n     }",
    "output": "Add default authority assignment and enhanced user creation method # Description of Changes Please provide a summary of the changes, including - **What was changed** - Automatically assign the `USER` role to newly created users in the `saveUser(String username, String password)` method. - Introduced a new `saveUser(String username, String password, boolean firstLogin, boolean enabled)` method to allow setting `firstLogin` and `enabled` flags at creation time. - Added `\"anonymoususer\"` to the list of restricted usernames in `isUsernameValid`. - **Why the change was made** - Ensures users have proper default roles assigned to avoid permission issues post-creation. - Provides more flexibility for user creation in scenarios like pre-provisioning or scripting users with specific states. - Prevents the creation of potentially reserved or insecure usernames like `anonymoususer`. --- ## Checklist ### General - [x] I have read the [Contribution Guidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md) - [x] I have read the [Stirling-PDF Developer Guide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md) (if applicable) - [ ] I have read the [How to add new languages to Stirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md) (if applicable) - [x] I have performed a self-review of my own code - [x] My changes generate no new warnings ### Documentation - [ ] I have updated relevant docs on [Stirling-PDF's doc repo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/) (if functionality has heavily changed) - [ ] I have read the section [Add New Translation Tags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags) (for new translation tags only) ### UI Changes (if applicable) - [ ] Screenshots or videos demonstrating the UI changes are attached (e.g., as comments or direct attachments in the PR) ### Testing (if applicable) - [ ] I have tested my changes locally. Refer to the [Testing Guide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md-testing) for more details."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/security/GetInfoOnPDF.java b/src/main/java/stirling/software/SPDF/controller/api/security/GetInfoOnPDF.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/security/GetInfoOnPDF.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/security/GetInfoOnPDF.java\n@@ -126,7 +126,8 @@ public static boolean checkForStandard(PDDocument document, String standardKeywo\n     @Operation(summary = \"Summary here\", description = \"desc. Input:PDF Output:JSON Type:SISO\")\n     public ResponseEntity<byte[]> getPdfInfo(@ModelAttribute PDFFile request) throws IOException {\n         MultipartFile inputFile = request.getFileInput();\n-        try (PDDocument pdfBoxDoc = pdfDocumentFactory.load(inputFile); ) {\n+        boolean readonly = true;\n+        try (PDDocument pdfBoxDoc = pdfDocumentFactory.load(inputFile, readonly); ) {\n             ObjectMapper objectMapper = new ObjectMapper();\n             ObjectNode jsonOutput = objectMapper.createObjectNode();\n ",
    "output": "Change PDF load Get Info on PDF to readonly # Description of Changes Please provide a summary of the changes, including - Fixed the behavior, that the metadata of a pdf was changed when using the \"Get info on PDF\" function. Notably the Producer and ModificationDate are updated currently, wich is not in line with the description \"Get Info\". --- ## Checklist ### General - [x] I have read the [Contribution Guidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md) - [x] I have read the [Stirling-PDF Developer Guide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md) (if applicable) - [ ] I have read the [How to add new languages to Stirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md) (if applicable) - [x] I have performed a self-review of my own code - [x] My changes generate no new warnings ### Documentation - [ ] I have updated relevant docs on [Stirling-PDF's doc repo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/) (if functionality has heavily changed) - [ ] I have read the section [Add New Translation Tags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags) (for new translation tags only) ### UI Changes (if applicable) - [ ] Screenshots or videos demonstrating the UI changes are attached (e.g., as comments or direct attachments in the PR) ### Testing (if applicable) - [x] I have tested my changes locally. Refer to the [Testing Guide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md-testing) for more details. Co-authored-by: maxi322 <maxi322@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/UserController.java b/src/main/java/stirling/software/SPDF/controller/api/UserController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/UserController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/UserController.java\n@@ -333,7 +333,7 @@ public RedirectView deleteUser(\n         }\n         // Invalidate all sessions before deleting the user\n         List<SessionInformation> sessionsInformations =\n-                sessionRegistry.getAllSessions(authentication.getPrincipal(), false);\n+                sessionRegistry.getAllSessions(username, false);\n         for (SessionInformation sessionsInformation : sessionsInformations) {\n             sessionRegistry.expireSession(sessionsInformation.getSessionId());\n             sessionRegistry.removeSessionInformation(sessionsInformation.getSessionId());",
    "output": "Fix Session of admin is destroyed instead of the deleted user"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/SPDFApplication.java b/src/main/java/stirling/software/SPDF/SPDFApplication.java\n--- a/src/main/java/stirling/software/SPDF/SPDFApplication.java\n+++ b/src/main/java/stirling/software/SPDF/SPDFApplication.java\n@@ -37,6 +37,7 @@ public class SPDFApplication {\n \n     private static String serverPortStatic;\n     private static String baseUrlStatic;\n+    private static String contextPathStatic;\n \n     private final Environment env;\n     private final ApplicationProperties applicationProperties;\n@@ -45,6 +46,9 @@ public class SPDFApplication {\n     @Value(\"${baseUrl:http://localhost}\")\n     private String baseUrl;\n \n+    @Value(\"${server.servlet.context-path:/}\")\n+    private String contextPath;\n+\n     public SPDFApplication(\n             Environment env,\n             ApplicationProperties applicationProperties,\n@@ -138,7 +142,8 @@ public static void main(String[] args) throws IOException, InterruptedException\n     @PostConstruct\n     public void init() {\n         baseUrlStatic = this.baseUrl;\n-        String url = baseUrl + \":\" + getStaticPort();\n+        contextPathStatic = this.contextPath;\n+        String url = baseUrl + \":\" + getStaticPort() + contextPath;\n         if (webBrowser != null\n                 && Boolean.parseBoolean(System.getProperty(\"STIRLING_PDF_DESKTOP_UI\", \"false\"))) {\n             webBrowser.initWebUI(url);\n@@ -195,7 +200,7 @@ public void cleanup() {\n \n     private static void printStartupLogs() {\n         log.info(\"Stirling-PDF Started.\");\n-        String url = baseUrlStatic + \":\" + getStaticPort();\n+        String url = baseUrlStatic + \":\" + getStaticPort() + contextPathStatic;\n         log.info(\"Navigate to {}\", url);\n     }\n \n@@ -220,4 +225,8 @@ public static String getStaticBaseUrl() {\n     public static String getStaticPort() {\n         return serverPortStatic;\n     }\n+\n+    public static String getStaticContextPath() {\n+        return contextPathStatic;\n+    }\n }\n\ndiff --git a/src/main/java/stirling/software/SPDF/config/AppConfig.java b/src/main/java/stirling/software/SPDF/config/AppConfig.java\n--- a/src/main/java/stirling/software/SPDF/config/AppConfig.java\n+++ b/src/main/java/stirling/software/SPDF/config/AppConfig.java\n@@ -8,6 +8,7 @@\n import java.util.Properties;\n import java.util.function.Predicate;\n \n+import org.springframework.beans.factory.annotation.Value;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingClass;\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.context.annotation.Bean;\n@@ -78,6 +79,11 @@ public List<String> languages() {\n         return applicationProperties.getUi().getLanguages();\n     }\n \n+    @Bean\n+    public String contextPath(@Value(\"${server.servlet.context-path}\") String contextPath) {\n+        return contextPath;\n+    }\n+\n     @Bean(name = \"navBarText\")\n     public String navBarText() {\n         String defaultNavBar =",
    "output": "Fix Context Path Handling and Static Asset Loading Improvements"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/RotationController.java b/src/main/java/stirling/software/SPDF/controller/api/RotationController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/RotationController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/RotationController.java\n@@ -43,6 +43,12 @@ public ResponseEntity<byte[]> rotatePDF(@ModelAttribute RotatePDFRequest request\n             throws IOException {\n         MultipartFile pdfFile = request.getFileInput();\n         Integer angle = request.getAngle();\n+\n+        // Validate the angle is a multiple of 90\n+        if (angle % 90 != 0) {\n+            throw new IllegalArgumentException(\"Angle must be a multiple of 90\");\n+        }\n+\n         // Load the PDF document\n         PDDocument document = pdfDocumentFactory.load(request);\n \n\ndiff --git a/src/test/java/stirling/software/SPDF/controller/api/RotationControllerTest.java b/src/test/java/stirling/software/SPDF/controller/api/RotationControllerTest.java\n--- a/src/test/java/stirling/software/SPDF/controller/api/RotationControllerTest.java\n+++ b/src/test/java/stirling/software/SPDF/controller/api/RotationControllerTest.java\n@@ -0,0 +1,74 @@\n+package stirling.software.SPDF.controller.api;\n+\n+import org.apache.pdfbox.pdmodel.PDDocument;\n+import org.apache.pdfbox.pdmodel.PDPage;\n+import java.io.IOException;\n+import org.apache.pdfbox.pdmodel.PDPageTree;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.mock.web.MockMultipartFile;\n+import stirling.software.SPDF.service.CustomPDFDocumentFactory;\n+import stirling.software.SPDF.model.api.general.RotatePDFRequest;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class RotationControllerTest {\n+\n+    @Mock private CustomPDFDocumentFactory pdfDocumentFactory;\n+\n+    @InjectMocks private RotationController rotationController;\n+\n+    @Test\n+    public void testRotatePDF() throws IOException {\n+        // Create a mock file\n+        MockMultipartFile mockFile =\n+                new MockMultipartFile(\"file\", \"test.pdf\", \"application/pdf\", new byte[] {1, 2, 3});\n+        RotatePDFRequest request = new RotatePDFRequest();\n+        request.setFileInput(mockFile);\n+        request.setAngle(90);\n+\n+        PDDocument mockDocument = mock(PDDocument.class);\n+        PDPageTree mockPages = mock(PDPageTree.class);\n+        PDPage mockPage = mock(PDPage.class);\n+\n+        when(pdfDocumentFactory.load(request)).thenReturn(mockDocument);\n+        when(mockDocument.getPages()).thenReturn(mockPages);\n+        when(mockPages.iterator())\n+                .thenReturn(java.util.Collections.singletonList(mockPage).iterator());\n+        when(mockPage.getRotation()).thenReturn(0);\n+\n+        // Act\n+        ResponseEntity<byte[]> response = rotationController.rotatePDF(request);\n+\n+        // Assert\n+        verify(mockPage).setRotation(90);\n+        assertNotNull(response);\n+        assertEquals(200, response.getStatusCode().value());\n+    }\n+\n+    @Test\n+    public void testRotatePDFInvalidAngle() throws IOException {\n+        // Create a mock file\n+        MockMultipartFile mockFile =\n+                new MockMultipartFile(\"file\", \"test.pdf\", \"application/pdf\", new byte[] {1, 2, 3});\n+        RotatePDFRequest request = new RotatePDFRequest();\n+        request.setFileInput(mockFile);\n+        request.setAngle(45); // Invalid angle\n+\n+        // Act & Assert: Controller direkt aufrufen und Exception erwarten\n+        IllegalArgumentException exception =\n+                assertThrows(\n+                        IllegalArgumentException.class,\n+                        () -> rotationController.rotatePDF(request));\n+        assertEquals(\"Angle must be a multiple of 90\", exception.getMessage());\n+    }\n+}",
    "output": "Add Validation for rotation angle and create unit tests for RotationController"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java b/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java\n@@ -209,7 +209,7 @@ private void compressImagesInPDF(Path pdfFile, double scaleFactor, float jpegQua\n                     // First get the actual size of the original image by encoding it to the chosen\n                     // format\n                     ByteArrayOutputStream originalImageStream = new ByteArrayOutputStream();\n-                    if (format.equals(\"jpeg\")) {\n+                    if (\"jpeg\".equals(format)) {\n                         // Get the best available JPEG writer (prioritizes TwelveMonkeys if\n                         // available)\n                         Iterator<ImageWriter> writers = ImageIO.getImageWritersByFormatName(\"jpeg\");\n@@ -252,7 +252,7 @@ private void compressImagesInPDF(Path pdfFile, double scaleFactor, float jpegQua\n \n                     // Now compress the scaled image\n                     ByteArrayOutputStream compressedImageStream = new ByteArrayOutputStream();\n-                    if (format.equals(\"jpeg\")) {\n+                    if (\"jpeg\".equals(format)) {\n                         Iterator<ImageWriter> writers = ImageIO.getImageWritersByFormatName(format);\n                         if (writers.hasNext()) {\n                             ImageWriter writer = writers.next();\n@@ -338,10 +338,10 @@ private void compressImagesInPDF(Path pdfFile, double scaleFactor, float jpegQua\n                     compressedImages,\n                     skippedImages);\n             log.info(\n-                    \"Total original image size: {}, compressed: {} (reduced by {:.1f}%)\",\n+                    \"Total original image size: {}, compressed: {} (reduced by {}%)\",\n                     GeneralUtils.formatBytes(totalOriginalBytes),\n                     GeneralUtils.formatBytes(totalCompressedBytes),\n-                    overallImageReduction);\n+                    String.format(\"%.1f\", overallImageReduction));\n \n             // Save the document\n             log.info(\"Saving compressed PDF to {}\", pdfFile.toString());\n@@ -351,10 +351,10 @@ private void compressImagesInPDF(Path pdfFile, double scaleFactor, float jpegQua\n             long compressedFileSize = Files.size(pdfFile);\n             double overallReduction = 100.0 - ((compressedFileSize * 100.0) / originalFileSize);\n             log.info(\n-                    \"Overall PDF compression: {} → {} (reduced by {:.1f}%)\",\n+                    \"Overall PDF compression: {} → {} (reduced by {}%)\",\n                     GeneralUtils.formatBytes(originalFileSize),\n                     GeneralUtils.formatBytes(compressedFileSize),\n-                    overallReduction);\n+                    String.format(\"%.1f\", overallReduction));\n         }\n     }\n \n@@ -477,8 +477,8 @@ public ResponseEntity<byte[]> optimizePdf(@ModelAttribute OptimizePdfRequest req\n                     long postQpdfSize = Files.size(tempOutputFile);\n                     double qpdfReduction = 100.0 - ((postQpdfSize * 100.0) / preQpdfSize);\n                     log.info(\n-                            \"Post-QPDF file size: {} (reduced by {:.1f}%)\",\n-                            GeneralUtils.formatBytes(postQpdfSize), qpdfReduction);\n+                            \"Post-QPDF file size: {} (reduced by {}%)\",\n+                            GeneralUtils.formatBytes(postQpdfSize), String.format(\"%.1f\", qpdfReduction));\n \n                 } else {\n                     tempOutputFile = tempInputFile;",
    "output": "Fix string comparison and formatting inconsistencies in `CompressController`"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/utils/FileInfo.java b/src/main/java/stirling/software/SPDF/utils/FileInfo.java\n--- a/src/main/java/stirling/software/SPDF/utils/FileInfo.java\n+++ b/src/main/java/stirling/software/SPDF/utils/FileInfo.java\n@@ -4,6 +4,7 @@\n import java.nio.file.Paths;\n import java.time.LocalDateTime;\n import java.time.format.DateTimeFormatter;\n+import java.util.Locale;\n \n import lombok.AllArgsConstructor;\n import lombok.Data;\n@@ -27,11 +28,11 @@ public Path getFilePathAsPath() {\n     // Formats the file size into a human-readable string.\n     public String getFormattedFileSize() {\n         if (fileSize >= 1024 * 1024 * 1024) {\n-            return String.format(\"%.2f GB\", fileSize / (1024.0 * 1024 * 1024));\n+            return String.format(Locale.US, \"%.2f GB\", fileSize / (1024.0 * 1024 * 1024));\n         } else if (fileSize >= 1024 * 1024) {\n-            return String.format(\"%.2f MB\", fileSize / (1024.0 * 1024));\n+            return String.format(Locale.US, \"%.2f MB\", fileSize / (1024.0 * 1024));\n         } else if (fileSize >= 1024) {\n-            return String.format(\"%.2f KB\", fileSize / 1024.0);\n+            return String.format(Locale.US, \"%.2f KB\", fileSize / 1024.0);\n         } else {\n             return String.format(\"%d Bytes\", fileSize);\n         }\n\ndiff --git a/src/test/java/stirling/software/SPDF/utils/FileInfoTest.java b/src/test/java/stirling/software/SPDF/utils/FileInfoTest.java\n--- a/src/test/java/stirling/software/SPDF/utils/FileInfoTest.java\n+++ b/src/test/java/stirling/software/SPDF/utils/FileInfoTest.java\n@@ -0,0 +1,32 @@\n+package stirling.software.SPDF.utils;\n+\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.CsvSource;\n+\n+import java.time.LocalDateTime;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class FileInfoTest {\n+\n+    @ParameterizedTest(name = \"{index}: fileSize={0}\")\n+    @CsvSource({\n+            \"0, '0 Bytes'\",\n+            \"1023, '1023 Bytes'\",\n+            \"1024, '1.00 KB'\",\n+            \"1048575, '1024.00 KB'\", // Do we really want this as result?\n+            \"1048576, '1.00 MB'\",\n+            \"1073741823, '1024.00 MB'\", // Do we really want this as result?\n+            \"1073741824, '1.00 GB'\"\n+    })\n+    void testGetFormattedFileSize(long fileSize, String expectedFormattedSize) {\n+        FileInfo fileInfo = new FileInfo(\n+                \"example.txt\",\n+                \"/path/to/example.txt\",\n+                LocalDateTime.now(),\n+                fileSize,\n+                LocalDateTime.now().minusDays(1));\n+\n+        assertEquals(expectedFormattedSize, fileInfo.getFormattedFileSize());\n+    }\n+}",
    "output": "Add unit test for FileInfo.getFormattedFileSize # Description of Changes Add Unit Test for FileInfo.getFormattedFileSize --- ## Checklist ### General - [x] I have read the [Contribution Guidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md) - [x] I have read the [Stirling-PDF Developer Guide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md) (if applicable) - [x] I have read the [How to add new languages to Stirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md) (if applicable) - [x] I have performed a self-review of my own code - [x] My changes generate no new warnings ### Documentation - [ ] I have updated relevant docs on [Stirling-PDF's doc repo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/) (if functionality has heavily changed) - [ ] I have read the section [Add New Translation Tags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags) (for new translation tags only) ### UI Changes (if applicable) - [ ] Screenshots or videos demonstrating the UI changes are attached (e.g., as comments or direct attachments in the PR) ### Testing (if applicable) - [x] I have tested my changes locally. Refer to the [Testing Guide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md-testing) for more details."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/UI/impl/DesktopBrowser.java b/src/main/java/stirling/software/SPDF/UI/impl/DesktopBrowser.java\n--- a/src/main/java/stirling/software/SPDF/UI/impl/DesktopBrowser.java\n+++ b/src/main/java/stirling/software/SPDF/UI/impl/DesktopBrowser.java\n@@ -93,8 +93,21 @@ public void initWebUI(String url) {\n                                     setupMainFrame();\n                                     setupLoadHandler();\n \n-                                    // Show the frame immediately but transparent\n-                                    frame.setVisible(true);\n+                                    // Force initialize UI after 7 seconds if not already done\n+                                    Timer timeoutTimer =\n+                                            new Timer(\n+                                                    2500,\n+                                                    e -> {\n+                                                        log.warn(\n+                                                                \"Loading timeout reached. Forcing\"\n+                                                                        + \" UI transition.\");\n+                                                        if (!browserInitialized) {\n+                                                            // Force UI initialization\n+                                                            forceInitializeUI();\n+                                                        }\n+                                                    });\n+                                    timeoutTimer.setRepeats(false);\n+                                    timeoutTimer.start();\n                                 });\n                     } catch (Exception e) {\n                         log.error(\"Error initializing JCEF browser: \", e);\n@@ -238,8 +251,8 @@ public void onLoadingStateChange(\n                             boolean canGoBack,\n                             boolean canGoForward) {\n                         log.debug(\n-                                \"Loading state change - isLoading: {}, canGoBack: {}, canGoForward: {}, \"\n-                                        + \"browserInitialized: {}, Time elapsed: {}ms\",\n+                                \"Loading state change - isLoading: {}, canGoBack: {}, canGoForward:\"\n+                                        + \" {}, browserInitialized: {}, Time elapsed: {}ms\",\n                                 isLoading,\n                                 canGoBack,\n                                 canGoForward,\n@@ -248,7 +261,8 @@ public void onLoadingStateChange(\n \n                         if (!isLoading && !browserInitialized) {\n                             log.info(\n-                                    \"Browser finished loading, preparing to initialize UI components\");\n+                                    \"Browser finished loading, preparing to initialize UI\"\n+                                            + \" components\");\n                             browserInitialized = true;\n                             SwingUtilities.invokeLater(\n                                     () -> {\n@@ -289,10 +303,12 @@ public void onLoadingStateChange(\n                                                                         browser.getUIComponent()\n                                                                                 .requestFocus();\n                                                                         log.info(\n-                                                                                \"Browser component focused\");\n+                                                                                \"Browser component\"\n+                                                                                        + \" focused\");\n                                                                     } catch (Exception ex) {\n                                                                         log.error(\n-                                                                                \"Error focusing browser\",\n+                                                                                \"Error focusing\"\n+                                                                                        + \" browser\",\n                                                                                 ex);\n                                                                     }\n                                                                 });\n@@ -415,4 +431,67 @@ public void cleanup() {\n         if (cefApp != null) cefApp.dispose();\n         if (loadingWindow != null) loadingWindow.dispose();\n     }\n+\n+    public static void forceInitializeUI() {\n+        try {\n+            if (loadingWindow != null) {\n+                log.info(\"Forcing start of UI initialization sequence\");\n+\n+                // Close loading window first\n+                loadingWindow.setVisible(false);\n+                loadingWindow.dispose();\n+                loadingWindow = null;\n+                log.info(\"Loading window disposed\");\n+\n+                // Then setup the main frame\n+                frame.setVisible(false);\n+                frame.dispose();\n+                frame.setOpacity(1.0f);\n+                frame.setUndecorated(false);\n+                frame.pack();\n+                frame.setSize(UIScaling.scaleWidth(1280), UIScaling.scaleHeight(800));\n+                frame.setLocationRelativeTo(null);\n+                log.debug(\"Frame reconfigured\");\n+\n+                // Show the main frame\n+                frame.setVisible(true);\n+                frame.requestFocus();\n+                frame.toFront();\n+                log.info(\"Main frame displayed and focused\");\n+\n+                // Focus the browser component if available\n+                if (browser != null) {\n+                    Timer focusTimer =\n+                            new Timer(\n+                                    100,\n+                                    e -> {\n+                                        try {\n+                                            browser.getUIComponent().requestFocus();\n+                                            log.info(\"Browser component focused\");\n+                                        } catch (Exception ex) {\n+                                            log.error(\n+                                                    \"Error focusing browser during force ui\"\n+                                                            + \" initialization.\",\n+                                                    ex);\n+                                        }\n+                                    });\n+                    focusTimer.setRepeats(false);\n+                    focusTimer.start();\n+                }\n+            }\n+        } catch (Exception e) {\n+            log.error(\"Error during Forced UI initialization.\", e);\n+            // Attempt cleanup on error\n+            if (loadingWindow != null) {\n+                loadingWindow.dispose();\n+                loadingWindow = null;\n+            }\n+            if (frame != null) {\n+                frame.setVisible(true);\n+                frame.setOpacity(1.0f);\n+                frame.setUndecorated(false);\n+                frame.requestFocus();\n+            }\n+        }\n+    }\n }",
    "output": "Fix desktop client stuck at 90% So I have added a timer to force show the desktop client after 7seconds of intiliazation (if not already visible) because it gets stuck at 90% sometimes --- ## Checklist ### General - [X] I have read the [Contribution Guidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md) - [X] I have read the [Stirling-PDF Developer Guide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md) (if applicable) - [X] I have read the [How to add new languages to Stirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md) (if applicable) - [X] I have performed a self-review of my own code - [X] My changes generate no new warnings ### Documentation -- No functionality change. ### UI Changes (if applicable) - [X] Screenshots or videos demonstrating the UI changes are attached (e.g., as comments or direct attachments in the PR) - [X] I have tested my changes locally. Refer to the [Testing Guide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md-testing) for more details. https://github.com/user-attachments/assets/e889701e-bb21-4a06-b221-98a0faad6f2e"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java b/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java\n--- a/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java\n+++ b/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java\n@@ -11,7 +11,6 @@\n import org.springframework.stereotype.Service;\n \n import lombok.extern.slf4j.Slf4j;\n-\n import stirling.software.SPDF.model.ApplicationProperties;\n \n @Service\n@@ -164,14 +163,8 @@ public void init() {\n         addEndpointToGroup(\"CLI\", \"ocr-pdf\");\n         addEndpointToGroup(\"CLI\", \"html-to-pdf\");\n         addEndpointToGroup(\"CLI\", \"url-to-pdf\");\n-        addEndpointToGroup(\"CLI\", \"book-to-pdf\");\n-        addEndpointToGroup(\"CLI\", \"pdf-to-book\");\n         addEndpointToGroup(\"CLI\", \"pdf-to-rtf\");\n \n-        // Calibre\n-        addEndpointToGroup(\"Calibre\", \"book-to-pdf\");\n-        addEndpointToGroup(\"Calibre\", \"pdf-to-book\");\n-\n         // python\n         addEndpointToGroup(\"Python\", \"extract-image-scans\");\n         addEndpointToGroup(\"Python\", \"html-to-pdf\");",
    "output": "Remove book site and translation entries # Description of Changes Please provide a summary of the changes, including - What was changed - Why the change was made - Any challenges encountered Closes #(issue_number) --- ## Checklist ### General - [ ] I have read the [Contribution Guidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md) - [ ] I have read the [Stirling-PDF Developer Guide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md) (if applicable) - [ ] I have read the [How to add new languages to Stirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md) (if applicable) - [ ] I have performed a self-review of my own code - [ ] My changes generate no new warnings ### Documentation - [ ] I have updated relevant docs on [Stirling-PDF's doc repo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/) (if functionality has heavily changed) - [ ] I have read the section [Add New Translation Tags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags) (for new translation tags only) ### UI Changes (if applicable) - [ ] Screenshots or videos demonstrating the UI changes are attached (e.g., as comments or direct attachments in the PR) ### Testing (if applicable) - [ ] I have tested my changes locally. Refer to the [Testing Guide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md-testing) for more details."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/utils/FileToPdf.java b/src/main/java/stirling/software/SPDF/utils/FileToPdf.java\n--- a/src/main/java/stirling/software/SPDF/utils/FileToPdf.java\n+++ b/src/main/java/stirling/software/SPDF/utils/FileToPdf.java\n@@ -169,7 +169,7 @@ private static Path unzipAndGetMainHtml(byte[] fileBytes) throws IOException {\n             }\n         }\n \n-        // search for the main HTML file.\n+        // Search for the main HTML file.\n         try (Stream<Path> walk = Files.walk(tempDirectory)) {\n             List<Path> htmlFiles =\n                     walk.filter(file -> file.toString().endsWith(\".html\"))\n@@ -190,46 +190,20 @@ private static Path unzipAndGetMainHtml(byte[] fileBytes) throws IOException {\n         }\n     }\n \n-    public static byte[] convertBookTypeToPdf(byte[] bytes, String originalFilename)\n-            throws IOException, InterruptedException {\n-        if (originalFilename == null || originalFilename.lastIndexOf('.') == -1) {\n-            throw new IllegalArgumentException(\"Invalid original filename.\");\n-        }\n-\n-        String fileExtension = originalFilename.substring(originalFilename.lastIndexOf('.'));\n-        List<String> command = new ArrayList<>();\n-        Path tempOutputFile = Files.createTempFile(\"output_\", \".pdf\");\n-        Path tempInputFile = null;\n-\n-        try {\n-            // Create temp file with appropriate extension\n-            tempInputFile = Files.createTempFile(\"input_\", fileExtension);\n-            Files.write(tempInputFile, bytes);\n-\n-            command.add(\"ebook-convert\");\n-            command.add(tempInputFile.toString());\n-            command.add(tempOutputFile.toString());\n-            ProcessExecutorResult returnCode =\n-                    ProcessExecutor.getInstance(ProcessExecutor.Processes.CALIBRE)\n-                            .runCommandWithOutputHandling(command);\n-\n-            return Files.readAllBytes(tempOutputFile);\n-        } finally {\n-            // Clean up temporary files\n-            if (tempInputFile != null) {\n-                Files.deleteIfExists(tempInputFile);\n-            }\n-            Files.deleteIfExists(tempOutputFile);\n-        }\n-    }\n-\n     static String sanitizeZipFilename(String entryName) {\n         if (entryName == null || entryName.trim().isEmpty()) {\n-            return entryName;\n+            return \"\";\n         }\n+        // Remove any drive letters (e.g., \"C:\\\") and leading forward/backslashes\n+        entryName = entryName.replaceAll(\"^[a-zA-Z]:[\\\\\\\\/]+\", \"\");\n+        entryName = entryName.replaceAll(\"^[\\\\\\\\/]+\", \"\");\n+\n+        // Recursively remove path traversal sequences\n         while (entryName.contains(\"../\") || entryName.contains(\"..\\\\\")) {\n             entryName = entryName.replace(\"../\", \"\").replace(\"..\\\\\", \"\");\n         }\n+        // Normalize all backslashes to forward slashes\n+        entryName = entryName.replaceAll(\"\\\\\\\\\", \"/\");\n         return entryName;\n     }\n }\n\ndiff --git a/src/main/java/stirling/software/SPDF/utils/ProcessExecutor.java b/src/main/java/stirling/software/SPDF/utils/ProcessExecutor.java\n--- a/src/main/java/stirling/software/SPDF/utils/ProcessExecutor.java\n+++ b/src/main/java/stirling/software/SPDF/utils/ProcessExecutor.java\n@@ -1,6 +1,10 @@\n package stirling.software.SPDF.utils;\n \n-import java.io.*;\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.InterruptedIOException;\n import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n import java.util.List;\n@@ -222,15 +226,15 @@ public ProcessExecutorResult runCommandWithOutputHandling(\n             boolean isQpdf =\n                     command != null && !command.isEmpty() && command.get(0).contains(\"qpdf\");\n \n-            if (outputLines.size() > 0) {\n+            if (!outputLines.isEmpty()) {\n                 String outputMessage = String.join(\"\\n\", outputLines);\n                 messages += outputMessage;\n                 if (!liveUpdates) {\n                     log.info(\"Command output:\\n\" + outputMessage);\n                 }\n             }\n \n-            if (errorLines.size() > 0) {\n+            if (!errorLines.isEmpty()) {\n                 String errorMessage = String.join(\"\\n\", errorLines);\n                 messages += errorMessage;\n                 if (!liveUpdates) {\n\ndiff --git a/src/test/java/stirling/software/SPDF/utils/FileToPdfTest.java b/src/test/java/stirling/software/SPDF/utils/FileToPdfTest.java\n--- a/src/test/java/stirling/software/SPDF/utils/FileToPdfTest.java\n+++ b/src/test/java/stirling/software/SPDF/utils/FileToPdfTest.java\n@@ -5,31 +5,79 @@\n \n import java.io.IOException;\n \n-import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.*;\n \n public class FileToPdfTest {\n \n+    /**\n+     * Test the HTML to PDF conversion.\n+     * This test expects an IOException when an empty HTML input is provided.\n+     */\n     @Test\n     public void testConvertHtmlToPdf() {\n         HTMLToPdfRequest request = new HTMLToPdfRequest();\n-        byte[] fileBytes = new byte[0]; // Sample file bytes\n-        String fileName = \"test.html\"; // Sample file name\n-        boolean disableSanitize = false; // Sample boolean value\n-\n-        // Check if the method throws IOException\n-        assertThrows(IOException.class, () -> {\n-            FileToPdf.convertHtmlToPdf(\"/path/\",request, fileBytes, fileName, disableSanitize);\n-        });\n+        byte[] fileBytes = new byte[0]; // Sample file bytes (empty input)\n+        String fileName = \"test.html\"; // Sample file name indicating an HTML file\n+        boolean disableSanitize = false; // Flag to control sanitization\n+\n+        // Expect an IOException to be thrown due to empty input\n+        Throwable thrown =\n+                assertThrows(\n+                        IOException.class,\n+                        () ->\n+                                FileToPdf.convertHtmlToPdf(\n+                                        \"/path/\", request, fileBytes, fileName, disableSanitize));\n+        assertNotNull(thrown);\n+    }\n+\n+    /**\n+     * Test sanitizeZipFilename with null or empty input.\n+     * It should return an empty string in these cases.\n+     */\n+    @Test\n+    public void testSanitizeZipFilename_NullOrEmpty() {\n+        assertEquals(\"\", FileToPdf.sanitizeZipFilename(null));\n+        assertEquals(\"\", FileToPdf.sanitizeZipFilename(\"   \"));\n+    }\n+\n+    /**\n+     * Test sanitizeZipFilename to ensure it removes path traversal sequences.\n+     * This includes removing both forward and backward slash sequences.\n+     */\n+    @Test\n+    public void testSanitizeZipFilename_RemovesTraversalSequences() {\n+        String input = \"../some/../path/..\\\\to\\\\file.txt\";\n+        String expected = \"some/path/to/file.txt\";\n+\n+        // Print output for debugging purposes\n+        System.out.println(\"sanitizeZipFilename \" + FileToPdf.sanitizeZipFilename(input));\n+        System.out.flush();\n+\n+        // Expect that the method replaces backslashes with forward slashes\n+        // and removes path traversal sequences\n+        assertEquals(expected, FileToPdf.sanitizeZipFilename(input));\n+    }\n+\n+    /**\n+     * Test sanitizeZipFilename to ensure that it removes leading drive letters and slashes.\n+     */\n+    @Test\n+    public void testSanitizeZipFilename_RemovesLeadingDriveAndSlashes() {\n+        String input = \"C:\\\\folder\\\\file.txt\";\n+        String expected = \"folder/file.txt\";\n+        assertEquals(expected, FileToPdf.sanitizeZipFilename(input));\n+\n+        input = \"/folder/file.txt\";\n+        expected = \"folder/file.txt\";\n+        assertEquals(expected, FileToPdf.sanitizeZipFilename(input));\n     }\n \n+    /**\n+     * Test sanitizeZipFilename to verify that safe filenames remain unchanged.\n+     */\n     @Test\n-    public void testConvertBookTypeToPdf() {\n-        byte[] bytes = new byte[10]; // Sample bytes\n-        String originalFilename = \"test.epub\"; // Sample original filename\n-\n-        // Check if the method throws IOException\n-        assertThrows(IOException.class, () -> {\n-            FileToPdf.convertBookTypeToPdf(bytes, originalFilename);\n-        });\n+    public void testSanitizeZipFilename_NoChangeForSafeNames() {\n+        String input = \"folder/subfolder/file.txt\";\n+        assertEquals(input, FileToPdf.sanitizeZipFilename(input));\n     }\n }",
    "output": "Remove `convertBookTypeToPdf` and Improve File Sanitization in `FileToPdf` # Description of Changes Please provide a summary of the changes, including - **Removed `convertBookTypeToPdf` method** - This method used `ebook-convert` from Calibre, which required external dependencies. - Its removal eliminates unnecessary process execution and simplifies the codebase. - **Enhanced `sanitizeZipFilename` function** - Added handling for drive letters (e.g., `C:\\`). - Ensured all slashes are normalized to forward slashes. - Improved recursive path traversal removal to prevent directory escape vulnerabilities. - **Refactored `ProcessExecutor` output handling** - Replaced redundant `.size> 0` checks with `.isEmpty`. - **Expanded unit tests in `FileToPdfTest`** - Added tests for `sanitizeZipFilename` to cover edge cases. - Improved test descriptions and added assertion messages. - Added debug print statements for easier test debugging. --- ## Checklist ### General - [x] I have read the [Contribution Guidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md) - [x] I have read the [Stirling-PDF Developer Guide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md) (if applicable) - [ ] I have read the [How to add new languages to Stirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md) (if applicable) - [x] I have performed a self-review of my own code - [x] My changes generate no new warnings ### Documentation - [ ] I have updated relevant docs on [Stirling-PDF's doc repo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/) (if functionality has heavily changed) - [ ] I have read the section [Add New Translation Tags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags) (for new translation tags only) ### UI Changes (if applicable) - [ ] Screenshots or videos demonstrating the UI changes are attached (e.g., as comments or direct attachments in the PR) ### Testing (if applicable) - [ ] I have tested my changes locally. Refer to the [Testing Guide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md-testing) for more details."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/service/PostHogService.java b/src/main/java/stirling/software/SPDF/service/PostHogService.java\n--- a/src/main/java/stirling/software/SPDF/service/PostHogService.java\n+++ b/src/main/java/stirling/software/SPDF/service/PostHogService.java\n@@ -207,8 +207,7 @@ private Map<String, Object> getDockerMetrics() {\n \n     private void addIfNotEmpty(Map<String, Object> map, String key, Object value) {\n         if (value != null) {\n-            if (value instanceof String) {\n-                String strValue = (String) value;\n+            if (value instanceof String strValue) {\n                 if (!StringUtils.isBlank(strValue)) {\n                     map.put(key, strValue.trim());\n                 }",
    "output": "Fix Analytics Initialization Behavior"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java b/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/misc/CompressController.java\n@@ -5,6 +5,7 @@\n import java.io.ByteArrayOutputStream;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n import java.util.ArrayList;\n import java.util.List;\n \n@@ -94,7 +95,9 @@ private void compressImagesInPDF(Path pdfFile, double initialScaleFactor) throws\n                     }\n                 }\n             }\n-            doc.save(pdfFile.toString());\n+            Path tempOutput = Files.createTempFile(\"output_\", \".pdf\");\n+            doc.save(tempOutput.toString());\n+            Files.move(tempOutput, pdfFile, StandardCopyOption.REPLACE_EXISTING);\n         }\n     }\n \n@@ -188,7 +191,7 @@ public ResponseEntity<byte[]> optimizePdf(@ModelAttribute OptimizePdfRequest req\n                     optimizeLevel =\n                             incrementOptimizeLevel(\n                                     optimizeLevel, outputFileSize, expectedOutputSize);\n-                    if (autoMode && optimizeLevel > 9) {\n+                    if (autoMode && optimizeLevel >= 9) {\n                         log.info(\"Maximum compression level reached in auto mode\");\n                         sizeMet = true;\n                     }",
    "output": "Fix resolve compression error and file overwrite issues # Description of Changes - **What was changed:** - Modified the file handling logic to avoid overwriting the source PDF while it is being read, which previously led to corrupted output files. -Modified the logic where optimizeLevel is 9 and we are chacking for optimizeLevel < 9. - **Why the change was made:** - The original compression process would stuck when dealing with larger files, failing to meet the specified target size limits. - Overwriting the input file during processing was causing warnings and potential file corruption, which could lead to instability and incorrect outputs. - **Any challenges encountered:** --- ## Checklist ### General - [x] I have read the [Contribution Guidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md) - [x] I have read the [Stirling-PDF Developer Guide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md) (if applicable) - [] I have read the [How to add new languages to Stirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md) (if applicable) - [x] I have performed a self-review of my own code - [x] My changes generate no new warnings ### Documentation - [] I have updated relevant docs on [Stirling-PDF's doc repo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/) (if functionality has heavily changed) - [] I have read the section [Add New Translation Tags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags) (for new translation tags only) ### UI Changes (if applicable) - [ ] Screenshots or videos demonstrating the UI changes are attached (e.g., as comments or direct attachments in the PR) ### Testing (if applicable) - [x] I have tested my changes locally"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/SplitPdfBySectionsController.java b/src/main/java/stirling/software/SPDF/controller/api/SplitPdfBySectionsController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/SplitPdfBySectionsController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/SplitPdfBySectionsController.java\n@@ -100,6 +100,8 @@ public ResponseEntity<byte[]> splitPdf(@ModelAttribute SplitPdfBySectionsRequest\n \n                 if (sectionNum == horiz * verti) pageNum++;\n             }\n+\n+            zipOut.finish();\n             data = Files.readAllBytes(zipFile);\n             return WebResponseUtils.bytesToWebResponse(\n                     data, filename + \"_split.zip\", MediaType.APPLICATION_OCTET_STREAM);",
    "output": "Fix broken ZIP issue by adding zipOut.finish--- # Description of Changes ### What was changed - Added `zipOut.finish` to ensure the ZIP file is properly finalized after writing all entries. - This ensures the central directory metadata is written, fixing the issue where the ZIP file was incomplete or broken. ### Why the change was made - The issue reported that splitting a PDF resulted in a broken ZIP file. The root cause was the missing central directory due to improper stream finalization. - Adding `zipOut.finish` explicitly ensures the ZIP file is correctly structured and can be extracted without errors. ### Challenges encountered --- ## Checklist ### General - [x] I have read the [Contribution Guidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md) - [x] I have read the [Stirling-PDF Developer Guide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md) (if applicable) - [ ] I have read the [How to add new languages to Stirling-PDF](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md) (if applicable) - [x] I have performed a self-review of my own code - [x] My changes generate no new warnings ### Documentation - [ ] I have updated relevant docs on [Stirling-PDF's doc repo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/) (if functionality has heavily changed) - [ ] I have read the section [Add New Translation Tags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags) (for new translation tags only) ### UI Changes (if applicable) - [ ] Screenshots or videos demonstrating the UI changes are attached (e.g., as comments or direct attachments in the PR) ### Testing (if applicable) - [x] I have tested my changes locally. Refer to the [Testing Guide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md-testing) for more details. - Tested with various PDFs to ensure the ZIP file is created correctly. - Verified ZIP integrity using `unzip -t` and manual extraction. ---"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/utils/ProcessExecutor.java b/src/main/java/stirling/software/SPDF/utils/ProcessExecutor.java\n--- a/src/main/java/stirling/software/SPDF/utils/ProcessExecutor.java\n+++ b/src/main/java/stirling/software/SPDF/utils/ProcessExecutor.java\n@@ -218,6 +218,9 @@ public ProcessExecutorResult runCommandWithOutputHandling(\n             errorReaderThread.join();\n             outputReaderThread.join();\n \n+            boolean isQpdf =\n+                    command != null && !command.isEmpty() && command.get(0).contains(\"qpdf\");\n+\n             if (outputLines.size() > 0) {\n                 String outputMessage = String.join(\"\\n\", outputLines);\n                 messages += outputMessage;\n@@ -233,20 +236,28 @@ public ProcessExecutorResult runCommandWithOutputHandling(\n                     log.warn(\"Command error output:\\n\" + errorMessage);\n                 }\n                 if (exitCode != 0) {\n-                    throw new IOException(\n-                            \"Command process failed with exit code \"\n-                                    + exitCode\n-                                    + \". Error message: \"\n-                                    + errorMessage);\n+                    if (isQpdf && exitCode == 3) {\n+                        log.warn(\"qpdf succeeded with warnings: {}\", messages);\n+                    } else {\n+                        throw new IOException(\n+                                \"Command process failed with exit code \"\n+                                        + exitCode\n+                                        + \". Error message: \"\n+                                        + errorMessage);\n+                    }\n                 }\n             }\n \n             if (exitCode != 0) {\n-                throw new IOException(\n-                        \"Command process failed with exit code \"\n-                                + exitCode\n-                                + \"\\nLogs: \"\n-                                + messages);\n+                if (isQpdf && exitCode == 3) {\n+                    log.warn(\"qpdf succeeded with warnings: {}\", messages);\n+                } else {\n+                    throw new IOException(\n+                            \"Command process failed with exit code \"\n+                                    + exitCode\n+                                    + \"\\nLogs: \"\n+                                    + messages);\n+                }\n             }\n         } finally {\n             semaphore.release();",
    "output": "Handle qpdf exit code 3 as success with warnings # Description of Changes Please provide a summary of the changes, including - **What was changed** - Modified the `ProcessExecutor` class to accept exit code `3` from **qpdf** as a success with warnings. - Added a check to ensure that only **qpdf**’s exit code `3` is treated as a warning. - Added a warning log for **qpdf** exit code `3` to provide better visibility into the repair process. - **Why the change was made** - The repair process was failing when **qpdf** returned exit code `3`, even though the operation succeeded with warnings. This caused unnecessary errors for users. - The changes ensure that PDFs with minor structural issues (e.g., mismatched object counts) are still repaired successfully, while logging warnings for transparency. - Added a check to ensure that only **qpdf**’s exit code `3` is treated as a warning, preventing potential issues with other tools that might use exit code `3` for actual errors. --- ## Checklist ### General - [x] I have read the [Contribution Guidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md) - [x] I have read the [Stirling-PDF Developer Guide](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/DeveloperGuide.md) (if applicable) - [x] I have performed a self-review of my own code - [x] My changes generate no new warnings ### Testing (if applicable) - [x] I have tested my changes locally. - Verified that exit code `3` is only treated as a warning for **qpdf** and not for other tools. --- ### Additional Notes - The changes align with **qpdf**'s behavior, where exit code `3` indicates a successful operation with warnings. - Added a check to ensure that only **qpdf**’s exit code `3` is treated as a warning, preventing potential issues with other tools. Co-authored-by: Anthony Stirling <77850077+Frooodle@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/AppConfig.java b/src/main/java/stirling/software/SPDF/config/AppConfig.java\n--- a/src/main/java/stirling/software/SPDF/config/AppConfig.java\n+++ b/src/main/java/stirling/software/SPDF/config/AppConfig.java\n@@ -4,6 +4,7 @@\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n+import java.util.List;\n import java.util.Properties;\n import java.util.function.Predicate;\n \n@@ -74,6 +75,11 @@ public String homeText() {\n                 : \"null\";\n     }\n \n+    @Bean(name = \"languages\")\n+    public List<String> languages() {\n+        return applicationProperties.getUi().getLanguages();\n+    }\n+\n     @Bean(name = \"navBarText\")\n     public String navBarText() {\n         String defaultNavBar =\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/api/AdditionalLanguageJsController.java b/src/main/java/stirling/software/SPDF/controller/api/AdditionalLanguageJsController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/AdditionalLanguageJsController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/AdditionalLanguageJsController.java\n@@ -2,7 +2,9 @@\n \n import java.io.IOException;\n import java.io.PrintWriter;\n+import java.util.ArrayList;\n import java.util.List;\n+import java.util.Set;\n \n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.RequestMapping;\n@@ -26,11 +28,11 @@ public AdditionalLanguageJsController(LanguageService languageService) {\n     @Hidden\n     @GetMapping(value = \"/additionalLanguageCode.js\", produces = \"application/javascript\")\n     public void generateAdditionalLanguageJs(HttpServletResponse response) throws IOException {\n-        List<String> supportedLanguages = languageService.getSupportedLanguages();\n+        Set<String> supportedLanguages = languageService.getSupportedLanguages();\n         response.setContentType(\"application/javascript\");\n         PrintWriter writer = response.getWriter();\n         // Erstelle das JavaScript dynamisch\n-        writer.println(\"const supportedLanguages = \" + toJsonArray(supportedLanguages) + \";\");\n+        writer.println(\"const supportedLanguages = \" + toJsonArray(new ArrayList<>(supportedLanguages)) + \";\");\n         // Generiere die `getDetailedLanguageCode`-Funktion\n         writer.println(\n                 \"\"\"\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/web/DatabaseWebController.java b/src/main/java/stirling/software/SPDF/controller/web/DatabaseWebController.java\n--- a/src/main/java/stirling/software/SPDF/controller/web/DatabaseWebController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/web/DatabaseWebController.java\n@@ -36,8 +36,9 @@ public String database(HttpServletRequest request, Model model, Authentication a\n         }\n         List<FileInfo> backupList = databaseService.getBackupList();\n         model.addAttribute(\"backupFiles\", backupList);\n-        model.addAttribute(\"databaseVersion\", databaseService.getH2Version());\n-        if (\"Unknown\".equalsIgnoreCase(databaseService.getH2Version())) {\n+        String dbVersion = databaseService.getH2Version();\n+        model.addAttribute(\"databaseVersion\", dbVersion);\n+        if (\"Unknown\".equalsIgnoreCase(dbVersion)) {\n             model.addAttribute(\"infoMessage\", \"notSupported\");\n         }\n         return \"database\";\n\ndiff --git a/src/main/java/stirling/software/SPDF/model/ApplicationProperties.java b/src/main/java/stirling/software/SPDF/model/ApplicationProperties.java\n--- a/src/main/java/stirling/software/SPDF/model/ApplicationProperties.java\n+++ b/src/main/java/stirling/software/SPDF/model/ApplicationProperties.java\n@@ -265,7 +265,8 @@ public Provider get(String registrationId) throws UnsupportedProviderException {\n                             return getKeycloak();\n                         default:\n                             throw new UnsupportedProviderException(\n-                                    \"Logout from the provider is not supported? Report it at https://github.com/Stirling-Tools/Stirling-PDF/issues\");\n+                                    \"Logout from the provider is not supported? Report it at\"\n+                                            + \" https://github.com/Stirling-Tools/Stirling-PDF/issues\");\n                     }\n                 }\n             }\n@@ -313,10 +314,10 @@ public enum Driver {\n         @Override\n         public String toString() {\n             return \"\"\"\n-                    Driver {\n-                      driverName='%s'\n-                    }\n-                    \"\"\"\n+            Driver {\n+              driverName='%s'\n+            }\n+            \"\"\"\n                     .formatted(driverName);\n         }\n     }\n@@ -326,6 +327,7 @@ public static class Ui {\n         private String appName;\n         private String homeDescription;\n         private String appNameNavbar;\n+        private List<String> languages;\n \n         public String getAppName() {\n             return appName != null && appName.trim().length() > 0 ? appName : null;\n\ndiff --git a/src/main/java/stirling/software/SPDF/service/LanguageService.java b/src/main/java/stirling/software/SPDF/service/LanguageService.java\n--- a/src/main/java/stirling/software/SPDF/service/LanguageService.java\n+++ b/src/main/java/stirling/software/SPDF/service/LanguageService.java\n@@ -1,41 +1,57 @@\n package stirling.software.SPDF.service;\n \n import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.List;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.Arrays;\n \n import org.springframework.core.io.Resource;\n import org.springframework.core.io.support.PathMatchingResourcePatternResolver;\n import org.springframework.stereotype.Service;\n \n+import lombok.extern.slf4j.Slf4j;\n+import stirling.software.SPDF.model.ApplicationProperties;\n+\n @Service\n+@Slf4j\n public class LanguageService {\n \n+    private final ApplicationProperties applicationProperties;\n     private final PathMatchingResourcePatternResolver resourcePatternResolver =\n             new PathMatchingResourcePatternResolver();\n \n-    public List<String> getSupportedLanguages() {\n-        List<String> supportedLanguages = new ArrayList<>();\n+    public LanguageService(\n+            ApplicationProperties applicationProperties) {\n+        this.applicationProperties = applicationProperties;\n+    }\n \n+    public Set<String> getSupportedLanguages() {\n         try {\n             Resource[] resources =\n                     resourcePatternResolver.getResources(\"classpath*:messages_*.properties\");\n-            for (Resource resource : resources) {\n-                if (resource.exists() && resource.isReadable()) {\n-                    String filename = resource.getFilename();\n-                    if (filename != null\n-                            && filename.startsWith(\"messages_\")\n-                            && filename.endsWith(\".properties\")) {\n-                        String languageCode =\n-                                filename.replace(\"messages_\", \"\").replace(\".properties\", \"\");\n-                        supportedLanguages.add(languageCode);\n-                    }\n-                }\n-            }\n+\n+            return Arrays.stream(resources)\n+                    .map(Resource::getFilename)\n+                    .filter(\n+                            filename ->\n+                                    filename != null\n+                                            && filename.startsWith(\"messages_\")\n+                                            && filename.endsWith(\".properties\"))\n+                    .map(filename -> filename.replace(\"messages_\", \"\").replace(\".properties\", \"\"))\n+                    .filter(\n+                            languageCode -> {\n+                                Set<String> allowedLanguages =\n+                                        new HashSet<>(applicationProperties.getUi().getLanguages());\n+                                return allowedLanguages.isEmpty()\n+                                        || allowedLanguages.contains(languageCode)\n+                                        || \"en_GB\".equals(languageCode);\n+                            })\n+                    .collect(Collectors.toSet());\n+\n         } catch (IOException e) {\n-            e.printStackTrace();\n+            log.error(\"Error retrieving supported languages\", e);\n+            return new HashSet<>();\n         }\n-\n-        return supportedLanguages;\n     }\n }",
    "output": "Add Configurable UI Language Support with Dynamic Filtering"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/EE/EEAppConfig.java b/src/main/java/stirling/software/SPDF/EE/EEAppConfig.java\n--- a/src/main/java/stirling/software/SPDF/EE/EEAppConfig.java\n+++ b/src/main/java/stirling/software/SPDF/EE/EEAppConfig.java\n@@ -25,7 +25,7 @@ public EEAppConfig(\n \n     @Bean(name = \"runningEE\")\n     public boolean runningEnterpriseEdition() {\n-        return licenseKeyChecker.getEnterpriseEnabledResult();\n+    \treturn licenseKeyChecker.getEnterpriseEnabledResult();\n     }\n \n     @Bean(name = \"SSOAutoLogin\")\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/api/security/WatermarkController.java b/src/main/java/stirling/software/SPDF/controller/api/security/WatermarkController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/security/WatermarkController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/security/WatermarkController.java\n@@ -214,6 +214,7 @@ private void addTextWatermark(\n                                 + Math.abs(watermarkHeight * Math.cos(radians)));\n \n         // Calculating the number of rows and columns.\n+\n         int watermarkRows = (int) (pageHeight / newWatermarkHeight + 1);\n         int watermarkCols = (int) (pageWidth / newWatermarkWidth + 1);\n ",
    "output": "Add tests via TestDriverAI * initial Commit * update prerun * tweak the prompt * update the test * finetune prompt * change the prompt * minor change to retry test * add debug --------- # Description Please provide a summary of the changes, including relevant motivation and context. Closes #(issue_number) ## Checklist - [ ] I have read the [Contribution Guidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md) - [ ] I have performed a self-review of my own code - [ ] I have commented my code, particularly in hard-to-understand areas - [ ] My changes generate no new warnings - [ ] I have read the section [Add New Translation Tags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags) (for new translation tags only) --------- Signed-off-by: GitHub Action <action@github.com> Signed-off-by: dependabot[bot] <support@github.com> Signed-off-by: Ludovic Ortega <ludovic.ortega@adminafk.fr> Co-authored-by: Tarun Kumar S <srfashions.tarun@gmail.com> Co-authored-by: Ian Jennings <ian@meetjennings.com> Co-authored-by: Corbinian Grimm <23664150+pixma140@users.noreply.github.com> Co-authored-by: albanobattistella <34811668+albanobattistella@users.noreply.github.com> Co-authored-by: Eric <71648843+sbplat@users.noreply.github.com> Co-authored-by: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com> Co-authored-by: GitHub Action <action@github.com> Co-authored-by: swanemar <107953493+swanemar@users.noreply.github.com> Co-authored-by: pixeebot[bot] <104101892+pixeebot[bot]@users.noreply.github.com> Co-authored-by: github-actions[bot] <github-actions[bot]@users.noreply.github.com> Co-authored-by: Manuel Mora Gordillo <manuito@gmail.com> Co-authored-by: Manu <manuel@fusiontelecom.co> Co-authored-by: Ludy <Ludy87@users.noreply.github.com> Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com> Co-authored-by: Florian Fish <florian@poissonmail.fr> Co-authored-by: reecebrowne <74901996+reecebrowne@users.noreply.github.com> Co-authored-by: Dimitrios Kaitantzidis <james_k23@hotmail.gr> Co-authored-by: Rania Amina <reaamina@gmail.com> Co-authored-by: Copilot Autofix powered by AI <62310815+github-advanced-security[bot]@users.noreply.github.com> Co-authored-by: Ludovic Ortega <ludovic.ortega@adminafk.fr> Co-authored-by: Philip H. <47042125+pheiduck@users.noreply.github.com> Co-authored-by: Saud Fatayerji <Sf298@users.noreply.github.com> Co-authored-by: MaratheHarshad <97970262+MaratheHarshad@users.noreply.github.com> Co-authored-by: Harshad Marathe <harshad@MNKUHA> Co-authored-by: ninjat <hotanya.r@gmail.com> Co-authored-by: Peter Dave Hello <hsu@peterdavehello.org> Co-authored-by: Rafael Encinas <rafael.encinas@encora.com> Co-authored-by: Renan <82916964+thisisrenan@users.noreply.github.com> Co-authored-by: leo-jmateo <128976497+leo-jmateo@users.noreply.github.com> Co-authored-by: S. Neuhaus <neuhaus@users.noreply.github.com> Co-authored-by: Dimitris Kaitantzidis <44621809+DimK10@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/test/java/stirling/software/SPDF/SPDFApplicationTest.java b/src/test/java/stirling/software/SPDF/SPDFApplicationTest.java\n--- a/src/test/java/stirling/software/SPDF/SPDFApplicationTest.java\n+++ b/src/test/java/stirling/software/SPDF/SPDFApplicationTest.java\n@@ -29,7 +29,7 @@ public class SPDFApplicationTest {\n \n     @Mock\n     private ApplicationProperties applicationProperties;\n-    \n+\n     @InjectMocks\n     private SPDFApplication SPDFApplication;\n \n\ndiff --git a/src/test/java/stirling/software/SPDF/config/security/database/DatabaseConfigTest.java b/src/test/java/stirling/software/SPDF/config/security/database/DatabaseConfigTest.java\n--- a/src/test/java/stirling/software/SPDF/config/security/database/DatabaseConfigTest.java\n+++ b/src/test/java/stirling/software/SPDF/config/security/database/DatabaseConfigTest.java\n@@ -103,4 +103,4 @@ void exceptionThrown_whenDBTypeIsUnsupported(String datasourceType) {\n \n         assertThrows(UnsupportedProviderException.class, () -> databaseConfig.dataSource());\n     }\n-}\n\\ No newline at end of file\n+}\n\ndiff --git a/src/test/java/stirling/software/SPDF/controller/api/RearrangePagesPDFControllerTest.java b/src/test/java/stirling/software/SPDF/controller/api/RearrangePagesPDFControllerTest.java\n--- a/src/test/java/stirling/software/SPDF/controller/api/RearrangePagesPDFControllerTest.java\n+++ b/src/test/java/stirling/software/SPDF/controller/api/RearrangePagesPDFControllerTest.java\n@@ -98,4 +98,4 @@ void oddEvenMerge_multi_test(int totalNumberOfPages, String expectedPageOrder) {\n         assertNotNull(newPageOrder, \"Returning null instead of page order list\");\n         assertEquals(Arrays.stream(expectedPageOrder.split(\",\")).map(Integer::parseInt).toList(), newPageOrder, \"Page order doesn't match\");\n     }\n-}\n\\ No newline at end of file\n+}",
    "output": "Fix Thymeleaf syntax `(/*[[...]]*/)`"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/database/DatabaseService.java b/src/main/java/stirling/software/SPDF/config/security/database/DatabaseService.java\n--- a/src/main/java/stirling/software/SPDF/config/security/database/DatabaseService.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/database/DatabaseService.java\n@@ -55,6 +55,7 @@ public DatabaseService(ApplicationProperties applicationProperties, DataSource d\n      */\n     @Override\n     public boolean hasBackup() {\n+        createBackupDirectory();\n         Path filePath = Paths.get(BACKUP_DIR);\n \n         if (Files.exists(filePath)) {\n@@ -74,6 +75,8 @@ public List<FileInfo> getBackupList() {\n         List<FileInfo> backupFiles = new ArrayList<>();\n \n         if (isH2Database()) {\n+            createBackupDirectory();\n+\n             Path backupPath = Paths.get(BACKUP_DIR);\n \n             try (DirectoryStream<Path> stream =\n@@ -110,6 +113,18 @@ public List<FileInfo> getBackupList() {\n         return backupFiles;\n     }\n \n+    private void createBackupDirectory() {\n+        Path backupPath = Paths.get(BACKUP_DIR);\n+        if (!Files.exists(backupPath)) {\n+            try {\n+                Files.createDirectories(backupPath);\n+                log.debug(\"create backup directory: {}\", BACKUP_DIR);\n+            } catch (IOException e) {\n+                log.error(\"Error create backup directory: {}\", e.getMessage(), e);\n+            }\n+        }\n+    }\n+\n     @Override\n     public void importDatabase() {\n         if (!hasBackup()) throw new BackupNotFoundException(\"No backup scripts were found.\");\n@@ -255,6 +270,7 @@ public boolean deleteBackupFile(String fileName) throws IOException {\n      * @return the <code>Path</code> object for the given file name\n      */\n     public Path getBackupFilePath(String fileName) {\n+        createBackupDirectory();\n         Path filePath = Paths.get(BACKUP_DIR, fileName).normalize();\n         if (!filePath.startsWith(BACKUP_DIR)) {\n             throw new SecurityException(\"Path traversal detected\");",
    "output": "Fix `NoSuchFileException` if `configs\\db\\backup` is not present on first start"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/database/DatabaseService.java b/src/main/java/stirling/software/SPDF/config/security/database/DatabaseService.java\n--- a/src/main/java/stirling/software/SPDF/config/security/database/DatabaseService.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/database/DatabaseService.java\n@@ -178,9 +178,9 @@ public void exportDatabase() {\n             } catch (CannotReadScriptException e) {\n                 log.error(\"Error during database export: File {} not found\", insertOutputFilePath);\n             }\n-        }\n \n-        log.info(\"Database export completed: {}\", insertOutputFilePath);\n+            log.info(\"Database export completed: {}\", insertOutputFilePath);\n+        }\n     }\n \n     private static void deleteOldestBackup(List<FileInfo> filteredBackupList) {\n@@ -226,7 +226,7 @@ private boolean isH2Database() {\n         ApplicationProperties.Datasource datasource =\n                 applicationProperties.getSystem().getDatasource();\n         return !datasource.isEnableCustomDatabase()\n-                || datasource.getType().equals(ApplicationProperties.Driver.H2.name());\n+                || datasource.getType().equalsIgnoreCase(ApplicationProperties.Driver.H2.name());\n     }\n \n     /**\n\ndiff --git a/src/main/java/stirling/software/SPDF/config/security/database/ScheduledTasks.java b/src/main/java/stirling/software/SPDF/config/security/database/ScheduledTasks.java\n--- a/src/main/java/stirling/software/SPDF/config/security/database/ScheduledTasks.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/database/ScheduledTasks.java\n@@ -2,13 +2,16 @@\n \n import java.sql.SQLException;\n \n+import org.springframework.context.annotation.Conditional;\n import org.springframework.scheduling.annotation.Scheduled;\n import org.springframework.stereotype.Component;\n \n import stirling.software.SPDF.config.interfaces.DatabaseInterface;\n+import stirling.software.SPDF.controller.api.H2SQLCondition;\n import stirling.software.SPDF.model.provider.UnsupportedProviderException;\n \n @Component\n+@Conditional(H2SQLCondition.class)\n public class ScheduledTasks {\n \n     private final DatabaseInterface databaseService;\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/api/DatabaseController.java b/src/main/java/stirling/software/SPDF/controller/api/DatabaseController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/DatabaseController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/DatabaseController.java\n@@ -8,6 +8,7 @@\n import java.nio.file.StandardCopyOption;\n \n import org.eclipse.jetty.http.HttpStatus;\n+import org.springframework.context.annotation.Conditional;\n import org.springframework.core.io.InputStreamResource;\n import org.springframework.http.HttpHeaders;\n import org.springframework.http.MediaType;\n@@ -30,6 +31,7 @@\n @Controller\n @RequestMapping(\"/api/v1/database\")\n @PreAuthorize(\"hasRole('ROLE_ADMIN')\")\n+@Conditional(H2SQLCondition.class)\n @Tag(name = \"Database\", description = \"Database APIs for backup, import, and management\")\n public class DatabaseController {\n \n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/api/H2SQLCondition.java b/src/main/java/stirling/software/SPDF/controller/api/H2SQLCondition.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/H2SQLCondition.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/H2SQLCondition.java\n@@ -0,0 +1,19 @@\n+package stirling.software.SPDF.controller.api;\n+\n+import org.springframework.context.annotation.Condition;\n+import org.springframework.context.annotation.ConditionContext;\n+import org.springframework.core.type.AnnotatedTypeMetadata;\n+\n+public class H2SQLCondition implements Condition {\n+\n+    @Override\n+    public boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {\n+        boolean enableCustomDatabase =\n+                Boolean.parseBoolean(\n+                        context.getEnvironment()\n+                                .getProperty(\"system.datasource.enableCustomDatabase\"));\n+        String dataSourceType = context.getEnvironment().getProperty(\"system.datasource.type\");\n+        return !enableCustomDatabase\n+                || (enableCustomDatabase && \"h2\".equalsIgnoreCase(dataSourceType));\n+    }\n+}\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/web/DatabaseWebController.java b/src/main/java/stirling/software/SPDF/controller/web/DatabaseWebController.java\n--- a/src/main/java/stirling/software/SPDF/controller/web/DatabaseWebController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/web/DatabaseWebController.java\n@@ -37,6 +37,9 @@ public String database(HttpServletRequest request, Model model, Authentication a\n         List<FileInfo> backupList = databaseService.getBackupList();\n         model.addAttribute(\"backupFiles\", backupList);\n         model.addAttribute(\"databaseVersion\", databaseService.getH2Version());\n+        if (\"Unknown\".equalsIgnoreCase(databaseService.getH2Version())) {\n+            model.addAttribute(\"infoMessage\", \"notSupported\");\n+        }\n         return \"database\";\n     }\n }",
    "output": "Add Conditional Handling for H2SQL Databases and Improve Database Compatibility # Description 1. **Conditional Support for DatabaseController** - The `DatabaseController` is now annotated with `@Conditional(H2SQLCondition.class)` to ensure it is only available for H2SQL database setups. - This prevents unnecessary exposure of endpoints when the application is configured for H2SQL. 2. **Database Web Template Adjustments** - The UI elements related to database management are conditionally hidden when the database type is not supported (e.g., `databaseVersion == 'Unknown'`). - Improves user experience by avoiding unsupported operations for non-H2SQL or unknown databases. 3. **Model Attribute Updates** - Added a check in `DatabaseWebController` to set an informational message (`notSupported`) when the database version is unknown. 4. **H2 Database Compatibility** - Additional adjustments to ensure the application gracefully handles H2-specific functionality without affecting other database configurations. 5. **Build File Updates** - Updated the `build.gradle` file to exclude `H2SQLCondition` and related controllers when specific configurations (e.g., security or database type) are disabled. ### Benefits - Enhances application flexibility by adapting to the configured database type. - Improves user feedback with clear messaging and UI adjustments for unsupported operations. - Prevents accidental exposure of database endpoints in H2SQL setups. ## Checklist - [x] I have read the [Contribution Guidelines](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/CONTRIBUTING.md) - [x] I have performed a self-review of my own code - [ ] I have attached images of the change if it is UI based - [x] I have commented my code, particularly in hard-to-understand areas - [ ] If my code has heavily changed functionality I have updated relevant docs on [Stirling-PDFs doc repo](https://github.com/Stirling-Tools/Stirling-Tools.github.io/blob/main/docs/) - [x] My changes generate no new warnings - [ ] I have read the section [Add New Translation Tags](https://github.com/Stirling-Tools/Stirling-PDF/blob/main/HowToAddNewLanguage.md#add-new-translation-tags) (for new translation tags only)"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java b/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java\n@@ -210,7 +210,13 @@ public ResponseEntity<byte[]> convertToPdf(@ModelAttribute ConvertToPdfRequest r\n         String fitOption = request.getFitOption();\n         String colorType = request.getColorType();\n         boolean autoRotate = request.isAutoRotate();\n-\n+        // Handle Null entries for formdata\n+        if (colorType == null || colorType.isBlank()) {\n+            colorType = \"color\";\n+        }\n+        if (fitOption == null || fitOption.isEmpty()) {\n+            fitOption = \"fitDocumentToImage\";\n+        }\n         // Convert the file to PDF and get the resulting bytes\n         byte[] bytes =\n                 PdfUtils.imageToPdf(file, fitOption, autoRotate, colorType, pdfDocumentFactory);",
    "output": "Add default to convert image to pdf api"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/misc/MetadataController.java b/src/main/java/stirling/software/SPDF/controller/api/misc/MetadataController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/misc/MetadataController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/misc/MetadataController.java\n@@ -14,6 +14,8 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.WebDataBinder;\n+import org.springframework.web.bind.annotation.InitBinder;\n import org.springframework.web.bind.annotation.ModelAttribute;\n import org.springframework.web.bind.annotation.PostMapping;\n import org.springframework.web.bind.annotation.RequestMapping;\n@@ -26,6 +28,7 @@\n \n import stirling.software.SPDF.model.api.misc.MetadataRequest;\n import stirling.software.SPDF.utils.WebResponseUtils;\n+import stirling.software.SPDF.utils.propertyeditor.StringToMapPropertyEditor;\n \n @RestController\n @RequestMapping(\"/api/v1/misc\")\n@@ -44,6 +47,11 @@ private String checkUndefined(String entry) {\n         return entry;\n     }\n \n+    @InitBinder\n+    public void initBinder(WebDataBinder binder) {\n+        binder.registerCustomEditor(Map.class, \"allRequestParams\", new StringToMapPropertyEditor());\n+    }\n+\n     @PostMapping(consumes = \"multipart/form-data\", value = \"/update-metadata\")\n     @Operation(\n             summary = \"Update metadata of a PDF file\",\n\ndiff --git a/src/main/java/stirling/software/SPDF/utils/propertyeditor/StringToMapPropertyEditor.java b/src/main/java/stirling/software/SPDF/utils/propertyeditor/StringToMapPropertyEditor.java\n--- a/src/main/java/stirling/software/SPDF/utils/propertyeditor/StringToMapPropertyEditor.java\n+++ b/src/main/java/stirling/software/SPDF/utils/propertyeditor/StringToMapPropertyEditor.java\n@@ -0,0 +1,26 @@\n+package stirling.software.SPDF.utils.propertyeditor;\n+\n+import java.beans.PropertyEditorSupport;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+public class StringToMapPropertyEditor extends PropertyEditorSupport {\n+\n+    private final ObjectMapper objectMapper = new ObjectMapper();\n+\n+    @Override\n+    public void setAsText(String text) throws IllegalArgumentException {\n+        try {\n+            TypeReference<HashMap<String, String>> typeRef =\n+                    new TypeReference<HashMap<String, String>>() {};\n+            Map<String, String> map = objectMapper.readValue(text, typeRef);\n+            setValue(map);\n+        } catch (Exception e) {\n+            throw new IllegalArgumentException(\n+                    \"Failed to convert java.lang.String to java.util.Map\");\n+        }\n+    }\n+}",
    "output": "Fix deserialization failure in Change Metadata * Fix deserialization failure from String to Map Fix deserialization failure from String to Map that caused the following exception Resolved [org.springframework.web.bind.MethodArgumentNotValidException: Validation failed for argument [0] in public org.springframework.http.ResponseEntity<byte[]> stirling.software.SPDF.controller.api.misc.MetadataController.metadata(stirling.software.SPDF.model.api.misc.MetadataRequest) throws java.io.IOException: [Field error in object 'metadataRequest' on field 'allRequestParams': rejected value [{\"customKey1\" : \"YourCustomKey\", \"customKeyValue1\", \"YourCustomValue\"}]; codes [typeMismatch.metadataRequest.allRequestParams,typeMismatch.allRequestParams,typeMismatch.java.util.Map,typeMismatch]; * Fix form binding for dynamic Map entries in Change Metadata - Implemented support for dynamic key-value inputs in Change Metadata form using proper `name` attributes for Map (`allRequestParams`) binding. - Fix form binding for dynamic Map (`allRequestParams`) entries in Change Metadata as the `allRequestParams` (Map name) was being sent as an empty map."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/SecurityConfiguration.java b/src/main/java/stirling/software/SPDF/config/security/SecurityConfiguration.java\n--- a/src/main/java/stirling/software/SPDF/config/security/SecurityConfiguration.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/SecurityConfiguration.java\n@@ -245,8 +245,7 @@ public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n             }\n \n             // Handle SAML\n-            if (applicationProperties.getSecurity().isSaml2Activ()\n-                    && applicationProperties.getSystem().getEnableAlphaFunctionality()) {\n+            if (applicationProperties.getSecurity().isSaml2Activ()) {\n                 http.authenticationProvider(samlAuthenticationProvider());\n                 http.saml2Login(\n                                 saml2 ->\n@@ -452,7 +451,7 @@ public RelyingPartyRegistrationRepository relyingPartyRegistrations() throws Exc\n         RelyingPartyRegistration rp =\n                 RelyingPartyRegistration.withRegistrationId(samlConf.getRegistrationId())\n                         .signingX509Credentials((c) -> c.add(signingCredential))\n-                        .assertingPartyDetails(\n+                        .assertingPartyMetadata(\n                                 (details) ->\n                                         details.entityId(samlConf.getIdpIssuer())\n                                                 .singleSignOnServiceLocation(",
    "output": "Fix Fixes dependency bug and replaces obsolete method"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/UserService.java b/src/main/java/stirling/software/SPDF/config/security/UserService.java\n--- a/src/main/java/stirling/software/SPDF/config/security/UserService.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/UserService.java\n@@ -19,10 +19,12 @@\n import org.springframework.security.oauth2.core.user.OAuth2User;\n import org.springframework.stereotype.Service;\n \n+import lombok.extern.slf4j.Slf4j;\n import stirling.software.SPDF.config.interfaces.DatabaseBackupInterface;\n import stirling.software.SPDF.config.security.saml2.CustomSaml2AuthenticatedPrincipal;\n import stirling.software.SPDF.config.security.session.SessionPersistentRegistry;\n import stirling.software.SPDF.controller.api.pipeline.UserServiceInterface;\n+import stirling.software.SPDF.model.ApplicationProperties;\n import stirling.software.SPDF.model.AuthenticationType;\n import stirling.software.SPDF.model.Authority;\n import stirling.software.SPDF.model.Role;\n@@ -31,6 +33,7 @@\n import stirling.software.SPDF.repository.UserRepository;\n \n @Service\n+@Slf4j\n public class UserService implements UserServiceInterface {\n \n     @Autowired private UserRepository userRepository;\n@@ -45,6 +48,8 @@ public class UserService implements UserServiceInterface {\n \n     @Autowired DatabaseBackupInterface databaseBackupHelper;\n \n+    @Autowired ApplicationProperties applicationProperties;\n+\n     // Handle OAUTH2 login and user auto creation.\n     public boolean processOAuth2PostLogin(String username, boolean autoCreateUser)\n             throws IllegalArgumentException, IOException {\n@@ -354,6 +359,14 @@ public String getCurrentUsername() {\n \n         if (principal instanceof UserDetails) {\n             return ((UserDetails) principal).getUsername();\n+        } else if (principal instanceof OAuth2User) {\n+            return ((OAuth2User) principal)\n+                    .getAttribute(\n+                            applicationProperties.getSecurity().getOauth2().getUseAsUsername());\n+        } else if (principal instanceof CustomSaml2AuthenticatedPrincipal) {\n+            return ((CustomSaml2AuthenticatedPrincipal) principal).getName();\n+        } else if (principal instanceof String) {\n+            return (String) principal;\n         } else {\n             return principal.toString();\n         }",
    "output": "Fix Reading the username based on the login method."
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/SecurityConfiguration.java b/src/main/java/stirling/software/SPDF/config/security/SecurityConfiguration.java\n--- a/src/main/java/stirling/software/SPDF/config/security/SecurityConfiguration.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/SecurityConfiguration.java\n@@ -156,10 +156,14 @@ public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n             http.rememberMe(\n                     rememberMeConfigurer ->\n                             rememberMeConfigurer // Use the configurator directly\n-                                    .key(\"uniqueAndSecret\")\n                                     .tokenRepository(persistentTokenRepository())\n-                                    .tokenValiditySeconds(1209600) // 2 weeks\n-                    );\n+                                    .tokenValiditySeconds(14 * 24 * 60 * 60) // 14 days\n+                                    .userDetailsService(\n+                                            userDetailsService) // Your existing UserDetailsService\n+                                    .useSecureCookie(true) // Enable secure cookie\n+                                    .rememberMeParameter(\"remember-me\") // Form parameter name\n+                                    .rememberMeCookieName(\"remember-me\") // Cookie name\n+                                    .alwaysRemember(false));\n             http.authorizeHttpRequests(\n                     authz ->\n                             authz.requestMatchers(\n\ndiff --git a/src/main/java/stirling/software/SPDF/repository/JPATokenRepositoryImpl.java b/src/main/java/stirling/software/SPDF/repository/JPATokenRepositoryImpl.java\n--- a/src/main/java/stirling/software/SPDF/repository/JPATokenRepositoryImpl.java\n+++ b/src/main/java/stirling/software/SPDF/repository/JPATokenRepositoryImpl.java\n@@ -5,6 +5,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.web.authentication.rememberme.PersistentRememberMeToken;\n import org.springframework.security.web.authentication.rememberme.PersistentTokenRepository;\n+import org.springframework.transaction.annotation.Transactional;\n \n import stirling.software.SPDF.model.PersistentLogin;\n \n@@ -13,6 +14,7 @@ public class JPATokenRepositoryImpl implements PersistentTokenRepository {\n     @Autowired private PersistentLoginRepository persistentLoginRepository;\n \n     @Override\n+    @Transactional\n     public void createNewToken(PersistentRememberMeToken token) {\n         PersistentLogin newToken = new PersistentLogin();\n         newToken.setSeries(token.getSeries());\n@@ -23,6 +25,7 @@ public void createNewToken(PersistentRememberMeToken token) {\n     }\n \n     @Override\n+    @Transactional\n     public void updateToken(String series, String tokenValue, Date lastUsed) {\n         PersistentLogin existingToken = persistentLoginRepository.findById(series).orElse(null);\n         if (existingToken != null) {\n@@ -43,11 +46,11 @@ public PersistentRememberMeToken getTokenForSeries(String seriesId) {\n     }\n \n     @Override\n+    @Transactional\n     public void removeUserTokens(String username) {\n-        for (PersistentLogin token : persistentLoginRepository.findAll()) {\n-            if (token.getUsername().equals(username)) {\n-                persistentLoginRepository.delete(token);\n-            }\n+        try {\n+            persistentLoginRepository.deleteByUsername(username);\n+        } catch (Exception e) {\n         }\n     }\n }\n\ndiff --git a/src/main/java/stirling/software/SPDF/repository/PersistentLoginRepository.java b/src/main/java/stirling/software/SPDF/repository/PersistentLoginRepository.java\n--- a/src/main/java/stirling/software/SPDF/repository/PersistentLoginRepository.java\n+++ b/src/main/java/stirling/software/SPDF/repository/PersistentLoginRepository.java\n@@ -6,4 +6,6 @@\n import stirling.software.SPDF.model.PersistentLogin;\n \n @Repository\n-public interface PersistentLoginRepository extends JpaRepository<PersistentLogin, String> {}\n+public interface PersistentLoginRepository extends JpaRepository<PersistentLogin, String> {\n+    void deleteByUsername(String username);\n+}",
    "output": "Fix remmeber me * fix remmeber me * remove uselss comment * Update translation files Signed-off-by: GitHub Action <action@github.com> Co-authored-by: GitHub Action <action@github.com> --------- Signed-off-by: GitHub Action <action@github.com> Co-authored-by: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com> Co-authored-by: GitHub Action <action@github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/AdditionalLanguageJsController.java b/src/main/java/stirling/software/SPDF/controller/api/AdditionalLanguageJsController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/AdditionalLanguageJsController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/AdditionalLanguageJsController.java\n@@ -0,0 +1,65 @@\n+package stirling.software.SPDF.controller.api;\n+\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.util.List;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import io.swagger.v3.oas.annotations.Hidden;\n+\n+import jakarta.servlet.http.HttpServletResponse;\n+import stirling.software.SPDF.service.LanguageService;\n+\n+@RestController\n+@RequestMapping(\"/js\")\n+public class AdditionalLanguageJsController {\n+\n+    @Autowired private LanguageService languageService;\n+\n+    @Hidden\n+    @GetMapping(value = \"/additionalLanguageCode.js\", produces = \"application/javascript\")\n+    public void generateAdditionalLanguageJs(HttpServletResponse response) throws IOException {\n+        List<String> supportedLanguages = languageService.getSupportedLanguages();\n+\n+        response.setContentType(\"application/javascript\");\n+        PrintWriter writer = response.getWriter();\n+\n+        // Erstelle das JavaScript dynamisch\n+        writer.println(\"const supportedLanguages = \" + toJsonArray(supportedLanguages) + \";\");\n+\n+        // Generiere die `getDetailedLanguageCode`-Funktion\n+        writer.println(\n+                \"\"\"\n+                function getDetailedLanguageCode() {\n+                    const userLanguages = navigator.languages ? navigator.languages : [navigator.language];\n+                    for (let lang of userLanguages) {\n+                        let matchedLang = supportedLanguages.find(supportedLang => supportedLang.startsWith(lang.replace('-', '_')));\n+                        if (matchedLang) {\n+                            return matchedLang;\n+                        }\n+                    }\n+                    // Fallback\n+                    return \"en_GB\";\n+                }\n+                \"\"\");\n+\n+        writer.flush();\n+    }\n+\n+    // Hilfsfunktion zum Konvertieren der Liste in ein JSON-Array\n+    private String toJsonArray(List<String> list) {\n+        StringBuilder jsonArray = new StringBuilder(\"[\");\n+        for (int i = 0; i < list.size(); i++) {\n+            jsonArray.append(\"\\\"\").append(list.get(i)).append(\"\\\"\");\n+            if (i < list.size() - 1) {\n+                jsonArray.append(\",\");\n+            }\n+        }\n+        jsonArray.append(\"]\");\n+        return jsonArray.toString();\n+    }\n+}\n\ndiff --git a/src/main/java/stirling/software/SPDF/service/LanguageService.java b/src/main/java/stirling/software/SPDF/service/LanguageService.java\n--- a/src/main/java/stirling/software/SPDF/service/LanguageService.java\n+++ b/src/main/java/stirling/software/SPDF/service/LanguageService.java\n@@ -0,0 +1,41 @@\n+package stirling.software.SPDF.service;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.springframework.core.io.Resource;\n+import org.springframework.core.io.support.PathMatchingResourcePatternResolver;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class LanguageService {\n+\n+    private final PathMatchingResourcePatternResolver resourcePatternResolver =\n+            new PathMatchingResourcePatternResolver();\n+\n+    public List<String> getSupportedLanguages() {\n+        List<String> supportedLanguages = new ArrayList<>();\n+\n+        try {\n+            Resource[] resources =\n+                    resourcePatternResolver.getResources(\"classpath*:messages_*.properties\");\n+            for (Resource resource : resources) {\n+                if (resource.exists() && resource.isReadable()) {\n+                    String filename = resource.getFilename();\n+                    if (filename != null\n+                            && filename.startsWith(\"messages_\")\n+                            && filename.endsWith(\".properties\")) {\n+                        String languageCode =\n+                                filename.replace(\"messages_\", \"\").replace(\".properties\", \"\");\n+                        supportedLanguages.add(languageCode);\n+                    }\n+                }\n+            }\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+\n+        return supportedLanguages;\n+    }\n+}",
    "output": "Fix Auto language detection"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/security/CertSignController.java b/src/main/java/stirling/software/SPDF/controller/api/security/CertSignController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/security/CertSignController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/security/CertSignController.java\n@@ -8,6 +8,7 @@\n import java.io.InputStream;\n import java.io.InputStreamReader;\n import java.io.OutputStream;\n+import java.nio.file.Files;\n import java.security.KeyStore;\n import java.security.KeyStoreException;\n import java.security.NoSuchAlgorithmException;\n@@ -21,6 +22,7 @@\n import java.util.Calendar;\n import java.util.List;\n \n+import org.apache.commons.io.FileUtils;\n import org.apache.pdfbox.examples.signature.CreateSignatureBase;\n import org.apache.pdfbox.pdmodel.PDDocument;\n import org.apache.pdfbox.pdmodel.PDPage;\n@@ -92,7 +94,7 @@ public class CertSignController {\n     }\n \n     class CreateSignature extends CreateSignatureBase {\n-        File imageFile;\n+        File logoFile;\n \n         public CreateSignature(KeyStore keystore, char[] pin)\n                 throws KeyStoreException,\n@@ -102,11 +104,17 @@ public CreateSignature(KeyStore keystore, char[] pin)\n                         CertificateException {\n             super(keystore, pin);\n             ClassPathResource resource = new ClassPathResource(\"static/images/signature.png\");\n-            imageFile = resource.getFile();\n+            try (InputStream is = resource.getInputStream()) {\n+                logoFile = Files.createTempFile(\"signature\", \".png\").toFile();\n+                FileUtils.copyInputStreamToFile(is, logoFile);\n+            } catch (IOException e) {\n+                logger.error(\"Failed to load image signature file\");\n+                throw e;\n+            }\n         }\n \n         public InputStream createVisibleSignature(\n-                PDDocument srcDoc, PDSignature signature, Integer pageNumber, Boolean showImage)\n+                PDDocument srcDoc, PDSignature signature, Integer pageNumber, Boolean showLogo)\n                 throws IOException {\n             // modified from org.apache.pdfbox.examples.signature.CreateVisibleSignature2\n             try (PDDocument doc = new PDDocument()) {\n@@ -145,15 +153,15 @@ public InputStream createVisibleSignature(\n                 widget.setAppearance(appearance);\n \n                 try (PDPageContentStream cs = new PDPageContentStream(doc, appearanceStream)) {\n-                    if (showImage) {\n+                    if (showLogo) {\n                         cs.saveGraphicsState();\n                         PDExtendedGraphicsState extState = new PDExtendedGraphicsState();\n                         extState.setBlendMode(BlendMode.MULTIPLY);\n                         extState.setNonStrokingAlphaConstant(0.5f);\n                         cs.setGraphicsStateParameters(extState);\n                         cs.transform(Matrix.getScaleInstance(0.08f, 0.08f));\n                         PDImageXObject img =\n-                                PDImageXObject.createFromFileByExtension(imageFile, doc);\n+                                PDImageXObject.createFromFileByExtension(logoFile, doc);\n                         cs.drawImage(img, 100, 0);\n                         cs.restoreGraphicsState();\n                     }\n@@ -219,6 +227,7 @@ public ResponseEntity<byte[]> signPDFWithCert(@ModelAttribute SignPDFWithCertReq\n         String location = request.getLocation();\n         String name = request.getName();\n         Integer pageNumber = request.getPageNumber() - 1;\n+        Boolean showLogo = request.isShowLogo();\n \n         if (certType == null) {\n             throw new IllegalArgumentException(\"Cert type must be provided\");\n@@ -258,7 +267,8 @@ public ResponseEntity<byte[]> signPDFWithCert(@ModelAttribute SignPDFWithCertReq\n                 pageNumber,\n                 name,\n                 location,\n-                reason);\n+                reason,\n+                showLogo);\n         return WebResponseUtils.boasToWebResponse(\n                 baos,\n                 Filenames.toSimpleFileName(pdf.getOriginalFilename()).replaceFirst(\"[.][^.]+$\", \"\")\n@@ -274,7 +284,8 @@ private static void sign(\n             Integer pageNumber,\n             String name,\n             String location,\n-            String reason) {\n+            String reason,\n+            Boolean showLogo) {\n         try (PDDocument doc = pdfDocumentFactory.load(input)) {\n             PDSignature signature = new PDSignature();\n             signature.setFilter(PDSignature.FILTER_ADOBE_PPKLITE);\n@@ -287,7 +298,7 @@ private static void sign(\n             if (showSignature) {\n                 SignatureOptions signatureOptions = new SignatureOptions();\n                 signatureOptions.setVisualSignature(\n-                        instance.createVisibleSignature(doc, signature, pageNumber, true));\n+                        instance.createVisibleSignature(doc, signature, pageNumber, showLogo));\n                 signatureOptions.setPage(pageNumber);\n \n                 doc.addSignature(signature, instance, signatureOptions);\n\ndiff --git a/src/main/java/stirling/software/SPDF/model/api/security/SignPDFWithCertRequest.java b/src/main/java/stirling/software/SPDF/model/api/security/SignPDFWithCertRequest.java\n--- a/src/main/java/stirling/software/SPDF/model/api/security/SignPDFWithCertRequest.java\n+++ b/src/main/java/stirling/software/SPDF/model/api/security/SignPDFWithCertRequest.java\n@@ -50,4 +50,7 @@ public class SignPDFWithCertRequest extends PDFFile {\n             description =\n                     \"The page number where the signature should be visible. This is required if showSignature is set to true\")\n     private Integer pageNumber;\n+\n+    @Schema(description = \"Whether to visually show a signature logo along with the signature\")\n+    private boolean showLogo;\n }",
    "output": "Fix signature logo not loading and add option to disable it * fix signature logo not loading and add option to disable it * Hardening suggestions for Stirling-PDF / fix-sig-logo Modernize and secure temp file creation Co-authored-by: pixeebot[bot] <104101892+pixeebot[bot]@users.noreply.github.com> --------- Co-authored-by: pixeebot[bot] <104101892+pixeebot[bot]@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/SecurityConfiguration.java b/src/main/java/stirling/software/SPDF/config/security/SecurityConfiguration.java\n--- a/src/main/java/stirling/software/SPDF/config/security/SecurityConfiguration.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/SecurityConfiguration.java\n@@ -36,6 +36,8 @@\n import org.springframework.security.web.SecurityFilterChain;\n import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\n import org.springframework.security.web.authentication.rememberme.PersistentTokenRepository;\n+import org.springframework.security.web.csrf.CookieCsrfTokenRepository;\n+import org.springframework.security.web.csrf.CsrfTokenRequestAttributeHandler;\n import org.springframework.security.web.savedrequest.NullRequestCache;\n import org.springframework.security.web.util.matcher.AntPathRequestMatcher;\n \n@@ -94,6 +96,16 @@ public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n                     userAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);\n             if (applicationProperties.getSecurity().getCsrfDisabled()) {\n                 http.csrf(csrf -> csrf.disable());\n+            } else {\n+                CookieCsrfTokenRepository cookieRepo =\n+                        CookieCsrfTokenRepository.withHttpOnlyFalse();\n+                CsrfTokenRequestAttributeHandler requestHandler =\n+                        new CsrfTokenRequestAttributeHandler();\n+                requestHandler.setCsrfRequestAttributeName(null);\n+                http.csrf(\n+                        csrf ->\n+                                csrf.csrfTokenRepository(cookieRepo)\n+                                        .csrfTokenRequestHandler(requestHandler));\n             }\n             http.addFilterBefore(rateLimitingFilter(), UsernamePasswordAuthenticationFilter.class);\n             http.addFilterAfter(firstLoginFilter, UsernamePasswordAuthenticationFilter.class);\n@@ -113,6 +125,7 @@ public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n                             logout.logoutRequestMatcher(new AntPathRequestMatcher(\"/logout\"))\n                                     .logoutSuccessHandler(\n                                             new CustomLogoutSuccessHandler(applicationProperties))\n+                                    .clearAuthentication(true)\n                                     .invalidateHttpSession(true) // Invalidate session\n                                     .deleteCookies(\"JSESSIONID\", \"remember-me\"));\n             http.rememberMe(\n@@ -223,6 +236,16 @@ public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {\n         } else {\n             if (applicationProperties.getSecurity().getCsrfDisabled()) {\n                 http.csrf(csrf -> csrf.disable());\n+            } else {\n+                CookieCsrfTokenRepository cookieRepo =\n+                        CookieCsrfTokenRepository.withHttpOnlyFalse();\n+                CsrfTokenRequestAttributeHandler requestHandler =\n+                        new CsrfTokenRequestAttributeHandler();\n+                requestHandler.setCsrfRequestAttributeName(null);\n+                http.csrf(\n+                        csrf ->\n+                                csrf.csrfTokenRepository(cookieRepo)\n+                                        .csrfTokenRequestHandler(requestHandler));\n             }\n             http.authorizeHttpRequests(authz -> authz.anyRequest().permitAll());\n         }",
    "output": "Fix csrf * apply fix * Fixes empty th:action * Update build.gradle * fix * formatting --------- Co-authored-by: Dimitrios Kaitantzidis <james_k23@hotmail.gr>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/service/PostHogService.java b/src/main/java/stirling/software/SPDF/service/PostHogService.java\n--- a/src/main/java/stirling/software/SPDF/service/PostHogService.java\n+++ b/src/main/java/stirling/software/SPDF/service/PostHogService.java\n@@ -43,7 +43,7 @@ public PostHogService(\n     }\n \n     private void captureSystemInfo() {\n-        if (!Boolean.getBoolean(applicationProperties.getSystem().getEnableAnalytics())) {\n+        if (!Boolean.parseBoolean(applicationProperties.getSystem().getEnableAnalytics())) {\n             return;\n         }\n         try {",
    "output": "Fix metricCollection"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/EE/EEAppConfig.java b/src/main/java/stirling/software/SPDF/EE/EEAppConfig.java\n--- a/src/main/java/stirling/software/SPDF/EE/EEAppConfig.java\n+++ b/src/main/java/stirling/software/SPDF/EE/EEAppConfig.java\n@@ -7,20 +7,19 @@\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Lazy;\n \n+import lombok.extern.slf4j.Slf4j;\n import stirling.software.SPDF.model.ApplicationProperties;\n \n @Configuration\n @Lazy\n+@Slf4j\n public class EEAppConfig {\n \n-    private static final Logger logger = LoggerFactory.getLogger(EEAppConfig.class);\n-\n     @Autowired ApplicationProperties applicationProperties;\n-\n     @Autowired private LicenseKeyChecker licenseKeyChecker;\n \n     @Bean(name = \"runningEE\")\n     public boolean runningEnterpriseEdition() {\n-        return licenseKeyChecker.getEnterpriseEnabledResult();\n+    \treturn licenseKeyChecker.getEnterpriseEnabledResult();\n     }\n-}\n+}\n\\ No newline at end of file",
    "output": "Remove pro badge if enabled"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/SPdfApplication.java b/src/main/java/stirling/software/SPDF/SPdfApplication.java\n--- a/src/main/java/stirling/software/SPDF/SPdfApplication.java\n+++ b/src/main/java/stirling/software/SPDF/SPdfApplication.java\n@@ -39,7 +39,8 @@ public class SPdfApplication {\n     public void setServerPortStatic(String port) {\n         if (port.equalsIgnoreCase(\"auto\")) {\n             // Use Spring Boot's automatic port assignment (server.port=0)\n-            SPdfApplication.serverPortStatic = \"0\"; // This will let Spring Boot assign an available port\n+            SPdfApplication.serverPortStatic =\n+                    \"0\"; // This will let Spring Boot assign an available port\n         } else {\n             SPdfApplication.serverPortStatic = port;\n         }",
    "output": "Fix Show Javascript card layout"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertPDFToPDFA.java b/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertPDFToPDFA.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertPDFToPDFA.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertPDFToPDFA.java\n@@ -1,22 +1,15 @@\n package stirling.software.SPDF.controller.api.converters;\n \n-import java.io.ByteArrayOutputStream;\n import java.io.FileOutputStream;\n import java.io.OutputStream;\n import java.nio.file.Files;\n import java.nio.file.Path;\n import java.util.ArrayList;\n import java.util.List;\n-import java.util.stream.Collectors;\n \n-import org.apache.pdfbox.pdmodel.PDDocument;\n-import org.apache.pdfbox.pdmodel.PDDocumentCatalog;\n-import org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm;\n-import org.apache.pdfbox.pdmodel.interactive.form.PDField;\n-import org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n import org.springframework.web.bind.annotation.ModelAttribute;\n import org.springframework.web.bind.annotation.PostMapping;\n@@ -29,7 +22,6 @@\n import io.swagger.v3.oas.annotations.tags.Tag;\n \n import stirling.software.SPDF.model.api.converters.PdfToPdfARequest;\n-import stirling.software.SPDF.service.CustomPDDocumentFactory;\n import stirling.software.SPDF.utils.ProcessExecutor;\n import stirling.software.SPDF.utils.ProcessExecutor.ProcessExecutorResult;\n import stirling.software.SPDF.utils.WebResponseUtils;\n@@ -41,13 +33,6 @@ public class ConvertPDFToPDFA {\n \n     private static final Logger logger = LoggerFactory.getLogger(ConvertPDFToPDFA.class);\n \n-    private final CustomPDDocumentFactory pdfDocumentFactory;\n-\n-    @Autowired\n-    public ConvertPDFToPDFA(CustomPDDocumentFactory pdfDocumentFactory) {\n-        this.pdfDocumentFactory = pdfDocumentFactory;\n-    }\n-\n     @PostMapping(consumes = \"multipart/form-data\", value = \"/pdf/pdfa\")\n     @Operation(\n             summary = \"Convert a PDF to a PDF/A\",\n@@ -61,32 +46,7 @@ public ResponseEntity<byte[]> pdfToPdfA(@ModelAttribute PdfToPdfARequest request\n         // Convert MultipartFile to byte[]\n         byte[] pdfBytes = inputFile.getBytes();\n \n-        // Load the PDF document\n-        PDDocument document = pdfDocumentFactory.load(pdfBytes);\n-\n-        // Get the document catalog\n-        PDDocumentCatalog catalog = document.getDocumentCatalog();\n-\n-        // Get the AcroForm\n-        PDAcroForm acroForm = catalog.getAcroForm();\n-        if (acroForm != null) {\n-            // Remove signature fields safely\n-            List<PDField> fieldsToRemove =\n-                    acroForm.getFields().stream()\n-                            .filter(field -> field instanceof PDSignatureField)\n-                            .collect(Collectors.toList());\n-\n-            if (!fieldsToRemove.isEmpty()) {\n-                acroForm.flatten(fieldsToRemove, false);\n-\n-                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-                document.save(baos);\n-                pdfBytes = baos.toByteArray();\n-            }\n-        }\n-        document.close();\n-\n-        // Save the uploaded (and possibly modified) file to a temporary location\n+        // Save the uploaded file to a temporary location\n         Path tempInputFile = Files.createTempFile(\"input_\", \".pdf\");\n         try (OutputStream outputStream = new FileOutputStream(tempInputFile.toFile())) {\n             outputStream.write(pdfBytes);\n@@ -95,28 +55,37 @@ public ResponseEntity<byte[]> pdfToPdfA(@ModelAttribute PdfToPdfARequest request\n         // Prepare the output file path\n         Path tempOutputFile = Files.createTempFile(\"output_\", \".pdf\");\n \n-        // Prepare the OCRmyPDF command\n+        // Prepare the ghostscript command\n         List<String> command = new ArrayList<>();\n-        command.add(\"ocrmypdf\");\n-        command.add(\"--skip-text\");\n-        command.add(\"--tesseract-timeout=0\");\n-        command.add(\"--output-type\");\n-        command.add(outputFormat.toString());\n-        command.add(tempInputFile.toString());\n+        command.add(\"gs\");\n+        command.add(\"-dPDFA=\" + (\"pdfa\".equals(outputFormat) ? \"2\" : \"1\"));\n+        command.add(\"-dNOPAUSE\");\n+        command.add(\"-dBATCH\");\n+        command.add(\"-sColorConversionStrategy=UseDeviceIndependentColor\");\n+        command.add(\"-sDEVICE=pdfwrite\");\n+        command.add(\"-dPDFACompatibilityPolicy=2\");\n+        command.add(\"-o\");\n         command.add(tempOutputFile.toString());\n+        command.add(tempInputFile.toString());\n \n         ProcessExecutorResult returnCode =\n-                ProcessExecutor.getInstance(ProcessExecutor.Processes.OCR_MY_PDF)\n+                ProcessExecutor.getInstance(ProcessExecutor.Processes.GHOSTSCRIPT)\n                         .runCommandWithOutputHandling(command);\n \n+        if (returnCode.getRc() != 0) {\n+            logger.info(\n+                    outputFormat + \" conversion failed with return code: \" + returnCode.getRc());\n+        }\n+\n         try {\n-            PDDocument doc = pdfDocumentFactory.load(tempOutputFile.toFile());\n+            byte[] pdfBytesOutput = Files.readAllBytes(tempOutputFile);\n             // Return the optimized PDF as a response\n             String outputFilename =\n                     Filenames.toSimpleFileName(inputFile.getOriginalFilename())\n                                     .replaceFirst(\"[.][^.]+$\", \"\")\n                             + \"_PDFA.pdf\";\n-            return WebResponseUtils.pdfDocToWebResponse(doc, outputFilename);\n+            return WebResponseUtils.bytesToWebResponse(\n+                    pdfBytesOutput, outputFilename, MediaType.APPLICATION_PDF);\n         } finally {\n             // Clean up the temporary files\n             Files.deleteIfExists(tempInputFile);",
    "output": "Fix pdfa conversion * fix: use gs to convert to pdfa and return output by reading file as bytes * feat: update translation files for pdfToPDFA.credit * Hardening suggestions for Stirling-PDF / fix_pdfa_conversion Switch order of literals to prevent NullPointerException Co-authored-by: pixeebot[bot] <104101892+pixeebot[bot]@users.noreply.github.com> --------- Co-authored-by: pixeebot[bot] <104101892+pixeebot[bot]@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/LoginAttemptService.java b/src/main/java/stirling/software/SPDF/config/security/LoginAttemptService.java\n--- a/src/main/java/stirling/software/SPDF/config/security/LoginAttemptService.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/LoginAttemptService.java\n@@ -7,36 +7,45 @@\n import org.springframework.stereotype.Service;\n \n import jakarta.annotation.PostConstruct;\n+import lombok.extern.slf4j.Slf4j;\n import stirling.software.SPDF.model.ApplicationProperties;\n import stirling.software.SPDF.model.AttemptCounter;\n \n @Service\n+@Slf4j\n public class LoginAttemptService {\n \n-    @Autowired ApplicationProperties applicationProperties;\n+    @Autowired private ApplicationProperties applicationProperties;\n \n     private int MAX_ATTEMPT;\n     private long ATTEMPT_INCREMENT_TIME;\n     private ConcurrentHashMap<String, AttemptCounter> attemptsCache;\n+    private boolean isBlockedEnabled = true;\n \n     @PostConstruct\n     public void init() {\n         MAX_ATTEMPT = applicationProperties.getSecurity().getLoginAttemptCount();\n+        if (MAX_ATTEMPT == -1) {\n+            isBlockedEnabled = false;\n+            log.info(\"Login attempt tracking is disabled.\");\n+        }\n         ATTEMPT_INCREMENT_TIME =\n                 TimeUnit.MINUTES.toMillis(\n                         applicationProperties.getSecurity().getLoginResetTimeMinutes());\n         attemptsCache = new ConcurrentHashMap<>();\n     }\n \n     public void loginSucceeded(String key) {\n-        if (key == null || key.trim().isEmpty()) {\n+        if (!isBlockedEnabled || key == null || key.trim().isEmpty()) {\n             return;\n         }\n         attemptsCache.remove(key.toLowerCase());\n     }\n \n     public void loginFailed(String key) {\n-        if (key == null || key.trim().isEmpty()) return;\n+        if (!isBlockedEnabled || key == null || key.trim().isEmpty()) {\n+            return;\n+        }\n \n         AttemptCounter attemptCounter = attemptsCache.get(key.toLowerCase());\n         if (attemptCounter == null) {\n@@ -51,7 +60,9 @@ public void loginFailed(String key) {\n     }\n \n     public boolean isBlocked(String key) {\n-        if (key == null || key.trim().isEmpty()) return false;\n+        if (!isBlockedEnabled || key == null || key.trim().isEmpty()) {\n+            return false;\n+        }\n         AttemptCounter attemptCounter = attemptsCache.get(key.toLowerCase());\n         if (attemptCounter == null) {\n             return false;\n@@ -61,7 +72,9 @@ public boolean isBlocked(String key) {\n     }\n \n     public int getRemainingAttempts(String key) {\n-        if (key == null || key.trim().isEmpty()) return MAX_ATTEMPT;\n+        if (!isBlockedEnabled || key == null || key.trim().isEmpty()) {\n+            return Integer.MAX_VALUE; // Arbitrarily high number if tracking is disabled\n+        }\n \n         AttemptCounter attemptCounter = attemptsCache.get(key.toLowerCase());\n         if (attemptCounter == null) {",
    "output": "Add Make Login Attempt Service deactivatable"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/UserAuthenticationFilter.java b/src/main/java/stirling/software/SPDF/config/security/UserAuthenticationFilter.java\n--- a/src/main/java/stirling/software/SPDF/config/security/UserAuthenticationFilter.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/UserAuthenticationFilter.java\n@@ -58,7 +58,7 @@ protected void doFilterInternal(\n                 try {\n                     // Use API key to authenticate. This requires you to have an authentication\n                     // provider for API keys.\n-                    Optional<User> user = userService.loadUserByApiKey(apiKey);\n+                    Optional<User> user = userService.getUserByApiKey(apiKey);\n                     if (!user.isPresent()) {\n                         response.setStatus(HttpStatus.UNAUTHORIZED.value());\n                         response.getWriter().write(\"Invalid API Key.\");",
    "output": "Fix authentication ApiKey NullPointerException"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java b/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java\n--- a/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java\n+++ b/src/main/java/stirling/software/SPDF/config/EndpointConfiguration.java\n@@ -166,6 +166,7 @@ public void init() {\n         addEndpointToGroup(\"Python\", REMOVE_BLANKS);\n         addEndpointToGroup(\"Python\", \"html-to-pdf\");\n         addEndpointToGroup(\"Python\", \"url-to-pdf\");\n+        addEndpointToGroup(\"Python\", \"pdf-to-img\");\n \n         // openCV\n         addEndpointToGroup(\"OpenCV\", \"extract-image-scans\");\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java b/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/converters/ConvertImgPDFController.java\n@@ -1,11 +1,23 @@\n package stirling.software.SPDF.controller.api.converters;\n \n+import java.io.ByteArrayOutputStream;\n+import java.io.FileOutputStream;\n import java.io.IOException;\n import java.net.URLConnection;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n \n+import org.apache.commons.io.FileUtils;\n import org.apache.pdfbox.rendering.ImageType;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.http.HttpHeaders;\n import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n import org.springframework.web.bind.annotation.ModelAttribute;\n@@ -21,6 +33,8 @@\n import stirling.software.SPDF.model.api.converters.ConvertToImageRequest;\n import stirling.software.SPDF.model.api.converters.ConvertToPdfRequest;\n import stirling.software.SPDF.utils.PdfUtils;\n+import stirling.software.SPDF.utils.ProcessExecutor;\n+import stirling.software.SPDF.utils.ProcessExecutor.ProcessExecutorResult;\n import stirling.software.SPDF.utils.WebResponseUtils;\n \n @RestController\n@@ -60,15 +74,92 @@ public ResponseEntity<byte[]> convertToImage(@ModelAttribute ConvertToImageReque\n         result =\n                 PdfUtils.convertFromPdf(\n                         pdfBytes,\n-                        imageFormat.toUpperCase(),\n+                        imageFormat.equalsIgnoreCase(\"webp\") ? \"png\" : imageFormat.toUpperCase(),\n                         colorTypeResult,\n                         singleImage,\n                         Integer.valueOf(dpi),\n                         filename);\n-\n         if (result == null || result.length == 0) {\n             logger.error(\"resultant bytes for {} is null, error converting \", filename);\n         }\n+        if (imageFormat.equalsIgnoreCase(\"webp\")) {\n+            // Write the output stream to a temp file\n+            Path tempFile = Files.createTempFile(\"temp_png\", \".png\");\n+            try (FileOutputStream fos = new FileOutputStream(tempFile.toFile())) {\n+                fos.write(result);\n+                fos.flush();\n+            }\n+\n+            String pythonVersion = \"python3\";\n+            try {\n+                ProcessExecutor.getInstance(ProcessExecutor.Processes.PYTHON_OPENCV)\n+                        .runCommandWithOutputHandling(Arrays.asList(\"python3\", \"--version\"));\n+            } catch (IOException e) {\n+                ProcessExecutor.getInstance(ProcessExecutor.Processes.PYTHON_OPENCV)\n+                        .runCommandWithOutputHandling(Arrays.asList(\"python\", \"--version\"));\n+                pythonVersion = \"python\";\n+            }\n+\n+            List<String> command = new ArrayList<>();\n+            command.add(pythonVersion);\n+            command.add(\"./scripts/png_to_webp.py\"); // Python script to handle the conversion\n+\n+                // Create a temporary directory for the output WebP files\n+            Path tempOutputDir = Files.createTempDirectory(\"webp_output\");\n+            if (singleImage) {\n+                // Run the Python script to convert PNG to WebP\n+                command.add(tempFile.toString());\n+                command.add(tempOutputDir.toString());\n+                command.add(\"--single\");\n+            } else {\n+                // Save the uploaded PDF to a temporary file\n+                Path tempPdfPath = Files.createTempFile(\"temp_pdf\", \".pdf\");\n+                file.transferTo(tempPdfPath.toFile());\n+                // Run the Python script to convert PDF to WebP\n+                command.add(tempPdfPath.toString());\n+                command.add(tempOutputDir.toString());\n+            }\n+            command.add(\"--dpi\");\n+            command.add(dpi);\n+            ProcessExecutorResult resultProcess =\n+                    ProcessExecutor.getInstance(ProcessExecutor.Processes.PYTHON_OPENCV)\n+                            .runCommandWithOutputHandling(command);\n+\n+            // Find all WebP files in the output directory\n+            List<Path> webpFiles =\n+                    Files.walk(tempOutputDir)\n+                            .filter(path -> path.toString().endsWith(\".webp\"))\n+                            .collect(Collectors.toList());\n+\n+            if (webpFiles.isEmpty()) {\n+                logger.error(\"No WebP files were created in: {}\", tempOutputDir.toString());\n+                throw new IOException(\"No WebP files were created. \" + resultProcess.getMessages());\n+            }\n+\n+            byte[] bodyBytes = new byte[0];\n+\n+            if (webpFiles.size() == 1) {\n+                // Return the single WebP file directly\n+                Path webpFilePath = webpFiles.get(0);\n+                bodyBytes = Files.readAllBytes(webpFilePath);\n+            } else {\n+                // Create a ZIP file containing all WebP images\n+                ByteArrayOutputStream zipOutputStream = new ByteArrayOutputStream();\n+                try (ZipOutputStream zos = new ZipOutputStream(zipOutputStream)) {\n+                    for (Path webpFile : webpFiles) {\n+                        zos.putNextEntry(new ZipEntry(webpFile.getFileName().toString()));\n+                        Files.copy(webpFile, zos);\n+                        zos.closeEntry();\n+                    }\n+                }\n+                bodyBytes = zipOutputStream.toByteArray();\n+            }\n+            // Clean up the temporary files\n+            Files.deleteIfExists(tempFile);\n+            if (tempOutputDir != null) FileUtils.deleteDirectory(tempOutputDir.toFile());\n+            result = bodyBytes;\n+        }\n+\n         if (singleImage) {\n             String docName = filename + \".\" + imageFormat;\n             MediaType mediaType = MediaType.parseMediaType(getMediaType(imageFormat));\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/web/ConverterWebController.java b/src/main/java/stirling/software/SPDF/controller/web/ConverterWebController.java\n--- a/src/main/java/stirling/software/SPDF/controller/web/ConverterWebController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/web/ConverterWebController.java\n@@ -21,14 +21,6 @@ public String convertBookToPdfForm(Model model) {\n         return \"convert/book-to-pdf\";\n     }\n \n-    @ConditionalOnExpression(\"#{bookAndHtmlFormatsInstalled}\")\n-    @GetMapping(\"/pdf-to-book\")\n-    @Hidden\n-    public String convertPdfToBookForm(Model model) {\n-        model.addAttribute(\"currentPage\", \"pdf-to-book\");\n-        return \"convert/pdf-to-book\";\n-    }\n-\n     @GetMapping(\"/img-to-pdf\")\n     @Hidden\n     public String convertImgToPdfForm(Model model) {\n@@ -57,13 +49,6 @@ public String convertURLToPdfForm(Model model) {\n         return \"convert/url-to-pdf\";\n     }\n \n-    @GetMapping(\"/pdf-to-img\")\n-    @Hidden\n-    public String pdfToimgForm(Model model) {\n-        model.addAttribute(\"currentPage\", \"pdf-to-img\");\n-        return \"convert/pdf-to-img\";\n-    }\n-\n     @GetMapping(\"/file-to-pdf\")\n     @Hidden\n     public String convertToPdfForm(Model model) {\n@@ -73,6 +58,21 @@ public String convertToPdfForm(Model model) {\n \n     // PDF TO......\n \n+    @ConditionalOnExpression(\"#{bookAndHtmlFormatsInstalled}\")\n+    @GetMapping(\"/pdf-to-book\")\n+    @Hidden\n+    public String convertPdfToBookForm(Model model) {\n+        model.addAttribute(\"currentPage\", \"pdf-to-book\");\n+        return \"convert/pdf-to-book\";\n+    }\n+\n+    @GetMapping(\"/pdf-to-img\")\n+    @Hidden\n+    public String pdfToimgForm(Model model) {\n+        model.addAttribute(\"currentPage\", \"pdf-to-img\");\n+        return \"convert/pdf-to-img\";\n+    }\n+\n     @GetMapping(\"/pdf-to-html\")\n     @Hidden\n     public ModelAndView pdfToHTML() {\n\ndiff --git a/src/main/java/stirling/software/SPDF/model/api/converters/ConvertToImageRequest.java b/src/main/java/stirling/software/SPDF/model/api/converters/ConvertToImageRequest.java\n--- a/src/main/java/stirling/software/SPDF/model/api/converters/ConvertToImageRequest.java\n+++ b/src/main/java/stirling/software/SPDF/model/api/converters/ConvertToImageRequest.java\n@@ -12,7 +12,7 @@ public class ConvertToImageRequest extends PDFFile {\n \n     @Schema(\n             description = \"The output image format\",\n-            allowableValues = {\"png\", \"jpeg\", \"jpg\", \"gif\"})\n+            allowableValues = {\"png\", \"jpeg\", \"jpg\", \"gif\", \"webp\"})\n     private String imageFormat;\n \n     @Schema(",
    "output": "Add Convert PDF to WebP"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/service/PdfImageRemovalService.java b/src/main/java/stirling/software/SPDF/service/PdfImageRemovalService.java\n--- a/src/main/java/stirling/software/SPDF/service/PdfImageRemovalService.java\n+++ b/src/main/java/stirling/software/SPDF/service/PdfImageRemovalService.java\n@@ -1,6 +1,8 @@\n package stirling.software.SPDF.service;\n \n import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n \n import org.apache.pdfbox.cos.COSName;\n import org.apache.pdfbox.pdmodel.PDDocument;\n@@ -16,7 +18,7 @@ public class PdfImageRemovalService {\n     /**\n      * Removes all image objects from the provided PDF document.\n      *\n-     * This method iterates over each page in the document and removes any image XObjects found\n+     * <p>This method iterates over each page in the document and removes any image XObjects found\n      * in the page's resources.\n      *\n      * @param document The PDF document from which images will be removed.\n@@ -27,14 +29,22 @@ public PDDocument removeImagesFromPdf(PDDocument document) throws IOException {\n         // Iterate over each page in the PDF document\n         for (PDPage page : document.getPages()) {\n             PDResources resources = page.getResources();\n+            // Collect the XObject names to remove\n+            List<COSName> namesToRemove = new ArrayList<>();\n+\n             // Iterate over all XObject names in the page's resources\n             for (COSName name : resources.getXObjectNames()) {\n                 // Check if the XObject is an image\n                 if (resources.isImageXObject(name)) {\n-                    // Remove the image XObject by setting it to null\n-                    resources.put(name, (PDXObject) null);\n+                    // Collect the name for removal\n+                    namesToRemove.add(name);\n                 }\n             }\n+\n+            // Now, modify the resources by removing the collected names\n+            for (COSName name : namesToRemove) {\n+                resources.put(name, (PDXObject) null);\n+            }\n         }\n         return document;\n     }",
    "output": "Fix ConcurrentModificationException by modifying resources outside the iteration. Fix ConcurrentModificationException by collecting XObject names - Changed to use a list to collect XObject names before removal. - Avoids ConcurrentModificationException by modifying resources outside the iteration. Co-authored-by: Anthony Stirling <77850077+Frooodle@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/ConfigInitializer.java b/src/main/java/stirling/software/SPDF/config/ConfigInitializer.java\n--- a/src/main/java/stirling/software/SPDF/config/ConfigInitializer.java\n+++ b/src/main/java/stirling/software/SPDF/config/ConfigInitializer.java\n@@ -14,6 +14,8 @@\n \n import org.simpleyaml.configuration.comments.CommentType;\n import org.simpleyaml.configuration.file.YamlFile;\n+import org.simpleyaml.configuration.implementation.SimpleYamlImplementation;\n+import org.simpleyaml.configuration.implementation.snakeyaml.lib.DumperOptions;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.context.ApplicationContextInitializer;\n@@ -71,16 +73,28 @@ public void ensureConfigExists() throws IOException, URISyntaxException {\n             }\n \n             final YamlFile settingsTemplateFile = new YamlFile(tempTemplatePath.toFile());\n+            DumperOptions yamlOptionsSettingsTemplateFile =\n+                    ((SimpleYamlImplementation) settingsTemplateFile.getImplementation())\n+                            .getDumperOptions();\n+            yamlOptionsSettingsTemplateFile.setSplitLines(false);\n             settingsTemplateFile.loadWithComments();\n \n             final YamlFile settingsFile = new YamlFile(settingsPath.toFile());\n+            DumperOptions yamlOptionsSettingsFile =\n+                    ((SimpleYamlImplementation) settingsFile.getImplementation())\n+                            .getDumperOptions();\n+            yamlOptionsSettingsFile.setSplitLines(false);\n             settingsFile.loadWithComments();\n \n             // Load headers and comments\n             String header = settingsTemplateFile.getHeader();\n \n             // Create a new file for temporary settings\n             final YamlFile tempSettingFile = new YamlFile(settingsPath.toFile());\n+            DumperOptions yamlOptionsTempSettingFile =\n+                    ((SimpleYamlImplementation) tempSettingFile.getImplementation())\n+                            .getDumperOptions();\n+            yamlOptionsTempSettingFile.setSplitLines(false);\n             tempSettingFile.createNewFile(true);\n             tempSettingFile.setHeader(header);\n \n\ndiff --git a/src/main/java/stirling/software/SPDF/config/security/InitialSecuritySetup.java b/src/main/java/stirling/software/SPDF/config/security/InitialSecuritySetup.java\n--- a/src/main/java/stirling/software/SPDF/config/security/InitialSecuritySetup.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/InitialSecuritySetup.java\n@@ -6,6 +6,8 @@\n import java.util.UUID;\n \n import org.simpleyaml.configuration.file.YamlFile;\n+import org.simpleyaml.configuration.implementation.SimpleYamlImplementation;\n+import org.simpleyaml.configuration.implementation.snakeyaml.lib.DumperOptions;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n@@ -92,6 +94,9 @@ private void saveKeyToConfig(String key) throws IOException {\n         Path path = Paths.get(\"configs\", \"settings.yml\"); // Target the configs/settings.yml\n \n         final YamlFile settingsYml = new YamlFile(path.toFile());\n+        DumperOptions yamlOptionssettingsYml =\n+                ((SimpleYamlImplementation) settingsYml.getImplementation()).getDumperOptions();\n+        yamlOptionssettingsYml.setSplitLines(false);\n \n         settingsYml.loadWithComments();\n ",
    "output": "Fix YamlFile - String length limit disable"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/UserAuthenticationFilter.java b/src/main/java/stirling/software/SPDF/config/security/UserAuthenticationFilter.java\n--- a/src/main/java/stirling/software/SPDF/config/security/UserAuthenticationFilter.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/UserAuthenticationFilter.java\n@@ -2,13 +2,16 @@\n \n import java.io.IOException;\n import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n \n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.context.annotation.Lazy;\n import org.springframework.http.HttpStatus;\n import org.springframework.security.core.Authentication;\n import org.springframework.security.core.AuthenticationException;\n+import org.springframework.security.core.authority.SimpleGrantedAuthority;\n import org.springframework.security.core.context.SecurityContextHolder;\n import org.springframework.security.core.session.SessionInformation;\n import org.springframework.security.core.userdetails.UserDetails;\n@@ -22,6 +25,7 @@\n import jakarta.servlet.http.HttpServletResponse;\n import stirling.software.SPDF.config.security.session.SessionPersistentRegistry;\n import stirling.software.SPDF.model.ApiKeyAuthenticationToken;\n+import stirling.software.SPDF.model.User;\n \n @Component\n public class UserAuthenticationFilter extends OncePerRequestFilter {\n@@ -54,15 +58,20 @@ protected void doFilterInternal(\n                 try {\n                     // Use API key to authenticate. This requires you to have an authentication\n                     // provider for API keys.\n-                    UserDetails userDetails = userService.loadUserByApiKey(apiKey);\n-                    if (userDetails == null) {\n+                    Optional<User> user = userService.loadUserByApiKey(apiKey);\n+                    if (!user.isPresent()) {\n                         response.setStatus(HttpStatus.UNAUTHORIZED.value());\n                         response.getWriter().write(\"Invalid API Key.\");\n                         return;\n                     }\n-                    authentication =\n-                            new ApiKeyAuthenticationToken(\n-                                    userDetails, apiKey, userDetails.getAuthorities());\n+                    List<SimpleGrantedAuthority> authorities =\n+                            user.get().getAuthorities().stream()\n+                                    .map(\n+                                            authority ->\n+                                                    new SimpleGrantedAuthority(\n+                                                            authority.getAuthority()))\n+                                    .collect(Collectors.toList());\n+                    authentication = new ApiKeyAuthenticationToken(user.get(), apiKey, authorities);\n                     SecurityContextHolder.getContext().setAuthentication(authentication);\n                 } catch (AuthenticationException e) {\n                     // If API key authentication fails, deny the request\n\ndiff --git a/src/main/java/stirling/software/SPDF/config/security/UserService.java b/src/main/java/stirling/software/SPDF/config/security/UserService.java\n--- a/src/main/java/stirling/software/SPDF/config/security/UserService.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/UserService.java\n@@ -22,6 +22,7 @@\n import org.springframework.security.oauth2.core.user.OAuth2User;\n import org.springframework.stereotype.Service;\n \n+import lombok.extern.slf4j.Slf4j;\n import stirling.software.SPDF.config.DatabaseBackupInterface;\n import stirling.software.SPDF.config.security.session.SessionPersistentRegistry;\n import stirling.software.SPDF.controller.api.pipeline.UserServiceInterface;\n@@ -65,16 +66,16 @@ public boolean processOAuth2PostLogin(String username, boolean autoCreateUser)\n     }\n \n     public Authentication getAuthentication(String apiKey) {\n-        User user = getUserByApiKey(apiKey);\n-        if (user == null) {\n+        Optional<User> user = getUserByApiKey(apiKey);\n+        if (!user.isPresent()) {\n             throw new UsernameNotFoundException(\"API key is not valid\");\n         }\n \n         // Convert the user into an Authentication object\n         return new UsernamePasswordAuthenticationToken(\n                 user, // principal (typically the user)\n                 null, // credentials (we don't expose the password or API key here)\n-                getAuthorities(user) // user's authorities (roles/permissions)\n+                getAuthorities(user.get()) // user's authorities (roles/permissions)\n                 );\n     }\n \n@@ -89,17 +90,17 @@ private String generateApiKey() {\n         String apiKey;\n         do {\n             apiKey = UUID.randomUUID().toString();\n-        } while (userRepository.findByApiKey(apiKey) != null); // Ensure uniqueness\n+        } while (userRepository.findByApiKey(apiKey).isPresent()); // Ensure uniqueness\n         return apiKey;\n     }\n \n     public User addApiKeyToUser(String username) {\n-        User user =\n-                findByUsernameIgnoreCase(username)\n-                        .orElseThrow(() -> new UsernameNotFoundException(\"User not found\"));\n-\n-        user.setApiKey(generateApiKey());\n-        return userRepository.save(user);\n+        Optional<User> user = findByUsernameIgnoreCase(username);\n+        if (user.isPresent()) {\n+            user.get().setApiKey(generateApiKey());\n+            return userRepository.save(user.get());\n+        }\n+        throw new UsernameNotFoundException(\"User not found\");\n     }\n \n     public User refreshApiKeyForUser(String username) {\n@@ -114,21 +115,18 @@ public String getApiKeyForUser(String username) {\n     }\n \n     public boolean isValidApiKey(String apiKey) {\n-        return userRepository.findByApiKey(apiKey) != null;\n+        return userRepository.findByApiKey(apiKey).isPresent();\n     }\n \n-    public User getUserByApiKey(String apiKey) {\n+    public Optional<User> getUserByApiKey(String apiKey) {\n         return userRepository.findByApiKey(apiKey);\n     }\n \n-    public UserDetails loadUserByApiKey(String apiKey) {\n-        User user = userRepository.findByApiKey(apiKey);\n-        if (user != null) {\n-            // Convert your User entity to a UserDetails object with authorities\n-            return new org.springframework.security.core.userdetails.User(\n-                    user.getUsername(),\n-                    user.getPassword(), // you might not need this for API key auth\n-                    getAuthorities(user));\n+    public Optional<User> loadUserByApiKey(String apiKey) {\n+        Optional<User> user = userRepository.findByApiKey(apiKey);\n+\n+        if (user.isPresent()) {\n+            return user;\n         }\n         return null; // or throw an exception\n     }\n\ndiff --git a/src/main/java/stirling/software/SPDF/model/Authority.java b/src/main/java/stirling/software/SPDF/model/Authority.java\n--- a/src/main/java/stirling/software/SPDF/model/Authority.java\n+++ b/src/main/java/stirling/software/SPDF/model/Authority.java\n@@ -1,5 +1,7 @@\n package stirling.software.SPDF.model;\n \n+import java.io.Serializable;\n+\n import jakarta.persistence.Column;\n import jakarta.persistence.Entity;\n import jakarta.persistence.GeneratedValue;\n@@ -11,7 +13,9 @@\n \n @Entity\n @Table(name = \"authorities\")\n-public class Authority {\n+public class Authority implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n \n     public Authority() {}\n \n\ndiff --git a/src/main/java/stirling/software/SPDF/model/User.java b/src/main/java/stirling/software/SPDF/model/User.java\n--- a/src/main/java/stirling/software/SPDF/model/User.java\n+++ b/src/main/java/stirling/software/SPDF/model/User.java\n@@ -1,5 +1,6 @@\n package stirling.software.SPDF.model;\n \n+import java.io.Serializable;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Map;\n@@ -23,7 +24,9 @@\n \n @Entity\n @Table(name = \"users\")\n-public class User {\n+public class User implements Serializable {\n+\n+    private static final long serialVersionUID = 1L;\n \n     @Id\n     @GeneratedValue(strategy = GenerationType.IDENTITY)\n\ndiff --git a/src/main/java/stirling/software/SPDF/repository/UserRepository.java b/src/main/java/stirling/software/SPDF/repository/UserRepository.java\n--- a/src/main/java/stirling/software/SPDF/repository/UserRepository.java\n+++ b/src/main/java/stirling/software/SPDF/repository/UserRepository.java\n@@ -13,5 +13,5 @@ public interface UserRepository extends JpaRepository<User, Long> {\n \n     Optional<User> findByUsername(String username);\n \n-    User findByApiKey(String apiKey);\n+    Optional<User> findByApiKey(String apiKey);\n }",
    "output": "Fix Failed authentication"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/security/RedactController.java b/src/main/java/stirling/software/SPDF/controller/api/security/RedactController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/security/RedactController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/security/RedactController.java\n@@ -1,21 +1,14 @@\n package stirling.software.SPDF.controller.api.security;\n \n import java.awt.Color;\n-import java.awt.image.BufferedImage;\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n import java.util.List;\n \n import org.apache.pdfbox.Loader;\n import org.apache.pdfbox.pdmodel.PDDocument;\n-import org.apache.pdfbox.pdmodel.PDPage;\n import org.apache.pdfbox.pdmodel.PDPageContentStream;\n-import org.apache.pdfbox.pdmodel.PDPageContentStream.AppendMode;\n import org.apache.pdfbox.pdmodel.common.PDRectangle;\n-import org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory;\n-import org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject;\n-import org.apache.pdfbox.rendering.ImageType;\n-import org.apache.pdfbox.rendering.PDFRenderer;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.http.ResponseEntity;\n@@ -32,6 +25,7 @@\n import stirling.software.SPDF.model.PDFText;\n import stirling.software.SPDF.model.api.security.RedactPdfRequest;\n import stirling.software.SPDF.pdf.TextFinder;\n+import stirling.software.SPDF.utils.PdfUtils;\n import stirling.software.SPDF.utils.WebResponseUtils;\n \n @RestController\n@@ -81,22 +75,9 @@ public ResponseEntity<byte[]> redactPdf(@ModelAttribute RedactPdfRequest request\n         }\n \n         if (convertPDFToImage) {\n-            PDDocument imageDocument = new PDDocument();\n-            PDFRenderer pdfRenderer = new PDFRenderer(document);\n-            pdfRenderer.setSubsamplingAllowed(true);\n-            for (int page = 0; page < document.getNumberOfPages(); ++page) {\n-                BufferedImage bim = pdfRenderer.renderImageWithDPI(page, 300, ImageType.RGB);\n-                PDPage newPage = new PDPage(new PDRectangle(bim.getWidth(), bim.getHeight()));\n-                imageDocument.addPage(newPage);\n-                PDImageXObject pdImage = LosslessFactory.createFromImage(imageDocument, bim);\n-                PDPageContentStream contentStream =\n-                        new PDPageContentStream(\n-                                imageDocument, newPage, AppendMode.APPEND, true, true);\n-                contentStream.drawImage(pdImage, 0, 0);\n-                contentStream.close();\n-            }\n+            PDDocument convertedPdf = PdfUtils.convertPdfToPdfImage(document);\n             document.close();\n-            document = imageDocument;\n+            document = convertedPdf;\n         }\n \n         ByteArrayOutputStream baos = new ByteArrayOutputStream();\n\ndiff --git a/src/main/java/stirling/software/SPDF/controller/api/security/WatermarkController.java b/src/main/java/stirling/software/SPDF/controller/api/security/WatermarkController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/security/WatermarkController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/security/WatermarkController.java\n@@ -36,6 +36,7 @@\n import io.swagger.v3.oas.annotations.tags.Tag;\n \n import stirling.software.SPDF.model.api.security.AddWatermarkRequest;\n+import stirling.software.SPDF.utils.PdfUtils;\n import stirling.software.SPDF.utils.WebResponseUtils;\n \n @RestController\n@@ -60,6 +61,7 @@ public ResponseEntity<byte[]> addWatermark(@ModelAttribute AddWatermarkRequest r\n         float opacity = request.getOpacity();\n         int widthSpacer = request.getWidthSpacer();\n         int heightSpacer = request.getHeightSpacer();\n+        boolean convertPdfToImage = request.isConvertPDFToImage();\n \n         // Load the input PDF\n         PDDocument document = Loader.loadPDF(pdfFile.getBytes());\n@@ -104,6 +106,12 @@ public ResponseEntity<byte[]> addWatermark(@ModelAttribute AddWatermarkRequest r\n             contentStream.close();\n         }\n \n+        if (convertPdfToImage) {\n+            PDDocument convertedPdf = PdfUtils.convertPdfToPdfImage(document);\n+            document.close();\n+            document = convertedPdf;\n+        }\n+\n         return WebResponseUtils.pdfDocToWebResponse(\n                 document,\n                 Filenames.toSimpleFileName(pdfFile.getOriginalFilename())\n\ndiff --git a/src/main/java/stirling/software/SPDF/model/api/security/AddWatermarkRequest.java b/src/main/java/stirling/software/SPDF/model/api/security/AddWatermarkRequest.java\n--- a/src/main/java/stirling/software/SPDF/model/api/security/AddWatermarkRequest.java\n+++ b/src/main/java/stirling/software/SPDF/model/api/security/AddWatermarkRequest.java\n@@ -44,4 +44,7 @@ public class AddWatermarkRequest extends PDFFile {\n \n     @Schema(description = \"The height spacer between watermark elements\", example = \"50\")\n     private int heightSpacer;\n+\n+    @Schema(description = \"Convert the redacted PDF to an image\", defaultValue = \"false\")\n+    private boolean convertPDFToImage;\n }\n\ndiff --git a/src/main/java/stirling/software/SPDF/utils/PdfUtils.java b/src/main/java/stirling/software/SPDF/utils/PdfUtils.java\n--- a/src/main/java/stirling/software/SPDF/utils/PdfUtils.java\n+++ b/src/main/java/stirling/software/SPDF/utils/PdfUtils.java\n@@ -341,6 +341,30 @@ public static byte[] convertFromPdf(\n         }\n     }\n \n+    /**\n+     * Converts a given Pdf file to PDF-Image.\n+     *\n+     * @param document to be converted. Note: the caller is responsible for closing the document\n+     * @return converted document to PDF-Image\n+     * @throws IOException if conversion fails\n+     */\n+    public static PDDocument convertPdfToPdfImage(PDDocument document) throws IOException {\n+        PDDocument imageDocument = new PDDocument();\n+        PDFRenderer pdfRenderer = new PDFRenderer(document);\n+        pdfRenderer.setSubsamplingAllowed(true);\n+        for (int page = 0; page < document.getNumberOfPages(); ++page) {\n+            BufferedImage bim = pdfRenderer.renderImageWithDPI(page, 300, ImageType.RGB);\n+            PDPage newPage = new PDPage(new PDRectangle(bim.getWidth(), bim.getHeight()));\n+            imageDocument.addPage(newPage);\n+            PDImageXObject pdImage = LosslessFactory.createFromImage(imageDocument, bim);\n+            PDPageContentStream contentStream =\n+                    new PDPageContentStream(imageDocument, newPage, AppendMode.APPEND, true, true);\n+            contentStream.drawImage(pdImage, 0, 0);\n+            contentStream.close();\n+        }\n+        return imageDocument;\n+    }\n+\n     private static BufferedImage prepareImageForPdfToImage(\n             int maxWidth, int height, String imageType) {\n         BufferedImage combined;",
    "output": "Add a checkbox to WatermarkController to convert the pdf to pdf-image * Add a checkbox to WatermarkController to convert the pdf to pdf-image Fix messages_en_GB --------- Co-authored-by: Anthony Stirling <77850077+Frooodle@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/test/java/stirling/software/SPDF/SPdfApplicationTest.java b/src/test/java/stirling/software/SPDF/SPdfApplicationTest.java\n--- a/src/test/java/stirling/software/SPDF/SPdfApplicationTest.java\n+++ b/src/test/java/stirling/software/SPDF/SPdfApplicationTest.java\n@@ -1,10 +1,11 @@\n-package stirling.software.SPDF.utils;\n+package stirling.software.SPDF;\n \n import static org.junit.jupiter.api.Assertions.*;\n \n import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.nio.file.Paths;\n \n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n@@ -14,7 +15,6 @@\n import org.mockito.junit.jupiter.MockitoExtension;\n import org.springframework.core.env.Environment;\n \n-import stirling.software.SPDF.SPdfApplication;\n import stirling.software.SPDF.model.ApplicationProperties;\n \n @ExtendWith(MockitoExtension.class)\n@@ -43,12 +43,43 @@ public void testSetServerPortStatic() {\n \n     @Test\n     public void testMainApplicationStartup() throws IOException, InterruptedException {\n+        // Setup mock environment for the main method\n+        Path configPath = Path.of(\"test/configs\");\n+        Path settingsPath = Paths.get(\"test/configs/settings.yml\");\n+        Path customSettingsPath = Paths.get(\"test/configs/custom_settings.yml\");\n+        Path staticPath = Path.of(\"test/customFiles/static/\");\n+        Path templatesPath = Path.of(\"test/customFiles/templates/\");\n+\n+        // Ensure the files do not exist for the test\n+        if (Files.exists(settingsPath)) {\n+            Files.delete(settingsPath);\n+        }\n+        if (Files.exists(customSettingsPath)) {\n+            Files.delete(customSettingsPath);\n+        }\n+        if (Files.exists(staticPath)) {\n+            Files.delete(staticPath);\n+        }\n+        if (Files.exists(templatesPath)) {\n+            Files.delete(templatesPath);\n+        }\n+\n+        // Ensure the directories are created for testing\n+        Files.createDirectories(configPath);\n+        Files.createDirectories(staticPath);\n+        Files.createDirectories(templatesPath);\n+\n+        Files.createFile(settingsPath);\n+        Files.createFile(customSettingsPath);\n+\n         // Run the main method\n         SPdfApplication.main(new String[]{});\n \n         // Verify that the directories were created\n-        assertTrue(Files.exists(Path.of(\"customFiles/static/\")));\n-        assertTrue(Files.exists(Path.of(\"customFiles/templates/\")));\n+        assertTrue(Files.exists(settingsPath));\n+        assertTrue(Files.exists(customSettingsPath));\n+        assertTrue(Files.exists(staticPath));\n+        assertTrue(Files.exists(templatesPath));\n     }\n \n     @Test\n\ndiff --git a/src/test/java/stirling/software/SPDF/utils/FileToPdfTest.java b/src/test/java/stirling/software/SPDF/utils/FileToPdfTest.java\n--- a/src/test/java/stirling/software/SPDF/utils/FileToPdfTest.java\n+++ b/src/test/java/stirling/software/SPDF/utils/FileToPdfTest.java\n@@ -13,7 +13,7 @@ public class FileToPdfTest {\n     @Test\n     public void testConvertHtmlToPdf() {\n         HTMLToPdfRequest request = new HTMLToPdfRequest();\n-        byte[] fileBytes = new byte[10]; // Sample file bytes\n+        byte[] fileBytes = new byte[0]; // Sample file bytes\n         String fileName = \"test.html\"; // Sample file name\n         boolean htmlFormatsInstalled = true; // Sample boolean value\n ",
    "output": "Fix fail JUnit test"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/model/User.java b/src/main/java/stirling/software/SPDF/model/User.java\n--- a/src/main/java/stirling/software/SPDF/model/User.java\n+++ b/src/main/java/stirling/software/SPDF/model/User.java\n@@ -16,6 +16,7 @@\n import jakarta.persistence.GenerationType;\n import jakarta.persistence.Id;\n import jakarta.persistence.JoinColumn;\n+import jakarta.persistence.Lob;\n import jakarta.persistence.MapKeyColumn;\n import jakarta.persistence.OneToMany;\n import jakarta.persistence.Table;\n@@ -55,7 +56,8 @@ public class User {\n \n     @ElementCollection\n     @MapKeyColumn(name = \"setting_key\")\n-    @Column(name = \"setting_value\")\n+    @Lob\n+    @Column(name = \"setting_value\", columnDefinition = \"CLOB\")\n     @CollectionTable(name = \"user_settings\", joinColumns = @JoinColumn(name = \"user_id\"))\n     private Map<String, String> settings = new HashMap<>(); // Key-value pairs of settings.\n ",
    "output": "Fix synchronizing the browser settings to the database"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/RearrangePagesPDFController.java b/src/main/java/stirling/software/SPDF/controller/api/RearrangePagesPDFController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/RearrangePagesPDFController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/RearrangePagesPDFController.java\n@@ -145,6 +145,28 @@ private List<Integer> oddEvenSplit(int totalPages) {\n         return newPageOrder;\n     }\n \n+    /**\n+     * Rearrange pages in a PDF file by merging odd and even pages. The first half of the pages will\n+     * be the odd pages, and the second half will be the even pages as input. <br>\n+     * This method is visible for testing purposes only.\n+     *\n+     * @param totalPages Total number of pages in the PDF file.\n+     * @return List of page numbers in the new order. The first page is 0.\n+     */\n+    List<Integer> oddEvenMerge(int totalPages) {\n+        List<Integer> newPageOrderZeroBased = new ArrayList<>();\n+        int numberOfOddPages = (totalPages + 1) / 2;\n+\n+        for (int oneBasedIndex = 1; oneBasedIndex < (numberOfOddPages + 1); oneBasedIndex++) {\n+            newPageOrderZeroBased.add((oneBasedIndex - 1));\n+            if (numberOfOddPages + oneBasedIndex <= totalPages) {\n+                newPageOrderZeroBased.add((numberOfOddPages + oneBasedIndex - 1));\n+            }\n+        }\n+\n+        return newPageOrderZeroBased;\n+    }\n+\n     private List<Integer> processSortTypes(String sortTypes, int totalPages) {\n         try {\n             SortTypes mode = SortTypes.valueOf(sortTypes.toUpperCase());\n@@ -159,6 +181,8 @@ private List<Integer> processSortTypes(String sortTypes, int totalPages) {\n                     return sideStitchBooklet(totalPages);\n                 case ODD_EVEN_SPLIT:\n                     return oddEvenSplit(totalPages);\n+                case ODD_EVEN_MERGE:\n+                    return oddEvenMerge(totalPages);\n                 case REMOVE_FIRST:\n                     return removeFirst(totalPages);\n                 case REMOVE_LAST:\n\ndiff --git a/src/main/java/stirling/software/SPDF/model/SortTypes.java b/src/main/java/stirling/software/SPDF/model/SortTypes.java\n--- a/src/main/java/stirling/software/SPDF/model/SortTypes.java\n+++ b/src/main/java/stirling/software/SPDF/model/SortTypes.java\n@@ -6,6 +6,7 @@ public enum SortTypes {\n     BOOKLET_SORT,\n     SIDE_STITCH_BOOKLET_SORT,\n     ODD_EVEN_SPLIT,\n+    ODD_EVEN_MERGE,\n     REMOVE_FIRST,\n     REMOVE_LAST,\n     REMOVE_FIRST_AND_LAST,\n\ndiff --git a/src/main/java/stirling/software/SPDF/model/api/general/RearrangePagesRequest.java b/src/main/java/stirling/software/SPDF/model/api/general/RearrangePagesRequest.java\n--- a/src/main/java/stirling/software/SPDF/model/api/general/RearrangePagesRequest.java\n+++ b/src/main/java/stirling/software/SPDF/model/api/general/RearrangePagesRequest.java\n@@ -19,6 +19,7 @@ public class RearrangePagesRequest extends PDFWithPageNums {\n                             + \"DUPLEX_SORT: Sorts pages as if all fronts were scanned then all backs in reverse (1, n, 2, n-1, ...). \"\n                             + \"BOOKLET_SORT: Arranges pages for booklet printing (last, first, second, second last, ...).\\n\"\n                             + \"ODD_EVEN_SPLIT: Splits and arranges pages into odd and even numbered pages.\\n\"\n+                            + \"ODD_EVEN_MERGE: Merges pages and organises them alternately into odd and even pages.\\n\"\n                             + \"REMOVE_FIRST: Removes the first page.\\n\"\n                             + \"REMOVE_LAST: Removes the last page.\\n\"\n                             + \"REMOVE_FIRST_AND_LAST: Removes both the first and the last pages.\\n\")\n\ndiff --git a/src/test/java/stirling/software/SPDF/controller/api/RearrangePagesPDFControllerTest.java b/src/test/java/stirling/software/SPDF/controller/api/RearrangePagesPDFControllerTest.java\n--- a/src/test/java/stirling/software/SPDF/controller/api/RearrangePagesPDFControllerTest.java\n+++ b/src/test/java/stirling/software/SPDF/controller/api/RearrangePagesPDFControllerTest.java\n@@ -0,0 +1,82 @@\n+package stirling.software.SPDF.controller.api;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.CsvSource;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class RearrangePagesPDFControllerTest {\n+\n+    /**\n+     * Tests the behavior of the oddEvenMerge method when there are no pages in the document.\n+     */\n+    @Test\n+    void oddEvenMerge_noPages() {\n+        RearrangePagesPDFController sut = new RearrangePagesPDFController();\n+        int totalNumberOfPages = 0;\n+\n+        List<Integer> newPageOrder = sut.oddEvenMerge(totalNumberOfPages);\n+\n+        assertNotNull(newPageOrder, \"Returning null instead of page order list\");\n+        assertEquals(List.of(), newPageOrder, \"Page order doesn't match\");\n+    }\n+\n+    /**\n+     * Tests the behavior of the oddEvenMerge method when there are odd total pages in the document.\n+     */\n+    @Test\n+    void oddEvenMerge_oddTotalPageNumber() {\n+        RearrangePagesPDFController sut = new RearrangePagesPDFController();\n+        int totalNumberOfPages = 5;\n+\n+        List<Integer> newPageOrder = sut.oddEvenMerge(totalNumberOfPages);\n+\n+        assertNotNull(newPageOrder, \"Returning null instead of page order list\");\n+        assertEquals(Arrays.asList(0,3,1,4,2), newPageOrder, \"Page order doesn't match\");\n+    }\n+\n+    /**\n+     * Tests the behavior of the oddEvenMerge method when there are even total pages in the document.\n+     */\n+    @Test\n+    void oddEvenMerge_evenTotalPageNumber() {\n+        RearrangePagesPDFController sut = new RearrangePagesPDFController();\n+        int totalNumberOfPages = 6;\n+\n+        List<Integer> newPageOrder = sut.oddEvenMerge(totalNumberOfPages);\n+\n+        assertNotNull(newPageOrder, \"Returning null instead of page order list\");\n+        assertEquals(Arrays.asList(0,3,1,4,2,5), newPageOrder, \"Page order doesn't match\");\n+    }\n+\n+    /**\n+     * Tests the behavior of the oddEvenMerge method with multiple test cases of multiple pages.\n+     * @param totalNumberOfPages The total number of pages in the document.\n+     * @param expectedPageOrder The expected order of the pages after rearranging.\n+     */\n+    @ParameterizedTest\n+    @CsvSource({\n+            \"1, '0'\",\n+            \"2, '0,1'\",\n+            \"3, '0,2,1'\",\n+            \"4, '0,2,1,3'\",\n+            \"5, '0,3,1,4,2'\",\n+            \"6, '0,3,1,4,2,5'\",\n+            \"10, '0,5,1,6,2,7,3,8,4,9'\",\n+            \"50, '0,25,1,26,2,27,3,28,4,29,5,30,6,31,7,32,8,33,9,34,10,35,\" +\n+                    \"11,36,12,37,13,38,14,39,15,40,16,41,17,42,18,43,19,44,20,45,21,46,\" +\n+                    \"22,47,23,48,24,49'\"\n+    })\n+    void oddEvenMerge_multi_test(int totalNumberOfPages, String expectedPageOrder) {\n+        RearrangePagesPDFController sut = new RearrangePagesPDFController();\n+\n+        List<Integer> newPageOrder = sut.oddEvenMerge(totalNumberOfPages);\n+\n+        assertNotNull(newPageOrder, \"Returning null instead of page order list\");\n+        assertEquals(Arrays.stream(expectedPageOrder.split(\",\")).map(Integer::parseInt).toList(), newPageOrder, \"Page order doesn't match\");\n+    }\n+}\n\\ No newline at end of file",
    "output": "Add Odd-Even Merge operation mode * Add ODD_EVEN_MERGE sort type * Add process method to merge odd and even PDF pages * Add test cases for Odd-Even merge method * Add Odd-Even Merge mode in PDF Organizer webpage This also add a new translatable text message variable pdfOrganiser.mode.10 with translation for english and german * Add ODD_EVEN_MERGE documentation to RearrangePagesRequest * Add english translation for pdfOrganiser.mode.10 --------- Co-authored-by: Anthony Stirling <77850077+Frooodle@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/config/security/UserAuthenticationFilter.java b/src/main/java/stirling/software/SPDF/config/security/UserAuthenticationFilter.java\n--- a/src/main/java/stirling/software/SPDF/config/security/UserAuthenticationFilter.java\n+++ b/src/main/java/stirling/software/SPDF/config/security/UserAuthenticationFilter.java\n@@ -104,6 +104,7 @@ protected boolean shouldNotFilter(HttpServletRequest request) throws ServletExce\n             contextPath + \"/fonts/\",\n             contextPath + \"/js/\",\n             contextPath + \"/pdfjs/\",\n+            contextPath + \"/pdfjs-legacy/\",\n             contextPath + \"/api/v1/info/status\",\n             contextPath + \"/site.webmanifest\"\n         };\n\ndiff --git a/src/main/java/stirling/software/SPDF/utils/RequestUriUtils.java b/src/main/java/stirling/software/SPDF/utils/RequestUriUtils.java\n--- a/src/main/java/stirling/software/SPDF/utils/RequestUriUtils.java\n+++ b/src/main/java/stirling/software/SPDF/utils/RequestUriUtils.java\n@@ -10,6 +10,7 @@ public static boolean isStaticResource(String requestURI) {\n                 || requestURI.startsWith(\"/images/\")\n                 || requestURI.startsWith(\"/public/\")\n                 || requestURI.startsWith(\"/pdfjs/\")\n+                || requestURI.startsWith(\"/pdfjs-legacy/\")\n                 || requestURI.endsWith(\".svg\")\n                 || requestURI.startsWith(\"/api/v1/info/status\");\n     }",
    "output": "Change to Pdf.js-Legacy Version 4.3.136 * add: PDF.js-Legacy * change path"
  },
  {
    "input": "diff --git a/src/main/java/stirling/software/SPDF/controller/api/MergeController.java b/src/main/java/stirling/software/SPDF/controller/api/MergeController.java\n--- a/src/main/java/stirling/software/SPDF/controller/api/MergeController.java\n+++ b/src/main/java/stirling/software/SPDF/controller/api/MergeController.java\n@@ -10,11 +10,16 @@\n import java.util.Arrays;\n import java.util.Comparator;\n import java.util.List;\n+import java.util.stream.Collectors;\n \n import org.apache.pdfbox.Loader;\n import org.apache.pdfbox.multipdf.PDFMergerUtility;\n import org.apache.pdfbox.pdmodel.PDDocument;\n+import org.apache.pdfbox.pdmodel.PDDocumentCatalog;\n import org.apache.pdfbox.pdmodel.PDPage;\n+import org.apache.pdfbox.pdmodel.interactive.form.PDAcroForm;\n+import org.apache.pdfbox.pdmodel.interactive.form.PDField;\n+import org.apache.pdfbox.pdmodel.interactive.form.PDSignatureField;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.http.ResponseEntity;\n@@ -38,6 +43,7 @@ public class MergeController {\n \n     private static final Logger logger = LoggerFactory.getLogger(MergeController.class);\n \n+    // Merges a list of PDDocument objects into a single PDDocument\n     public PDDocument mergeDocuments(List<PDDocument> documents) throws IOException {\n         PDDocument mergedDoc = new PDDocument();\n         for (PDDocument doc : documents) {\n@@ -48,6 +54,7 @@ public PDDocument mergeDocuments(List<PDDocument> documents) throws IOException\n         return mergedDoc;\n     }\n \n+    // Returns a comparator for sorting MultipartFile arrays based on the given sort type\n     private Comparator<MultipartFile> getSortComparator(String sortType) {\n         switch (sortType) {\n             case \"byFileName\":\n@@ -108,37 +115,78 @@ private Comparator<MultipartFile> getSortComparator(String sortType) {\n                     \"This endpoint merges multiple PDF files into a single PDF file. The merged file will contain all pages from the input files in the order they were provided. Input:PDF Output:PDF Type:MISO\")\n     public ResponseEntity<byte[]> mergePdfs(@ModelAttribute MergePdfsRequest form)\n             throws IOException {\n-        List<File> filesToDelete = new ArrayList<File>();\n+        List<File> filesToDelete = new ArrayList<>(); // List of temporary files to delete\n+        ByteArrayOutputStream docOutputstream =\n+                new ByteArrayOutputStream(); // Stream for the merged document\n+        PDDocument mergedDocument = null;\n+\n+        boolean removeCertSign = form.isRemoveCertSign();\n+\n         try {\n             MultipartFile[] files = form.getFileInput();\n-            Arrays.sort(files, getSortComparator(form.getSortType()));\n-\n-            PDFMergerUtility mergedDoc = new PDFMergerUtility();\n-            ByteArrayOutputStream docOutputstream = new ByteArrayOutputStream();\n+            Arrays.sort(\n+                    files,\n+                    getSortComparator(\n+                            form.getSortType())); // Sort files based on the given sort type\n \n+            PDFMergerUtility mergerUtility = new PDFMergerUtility();\n             for (MultipartFile multipartFile : files) {\n-                File tempFile = GeneralUtils.convertMultipartFileToFile(multipartFile);\n-                filesToDelete.add(tempFile);\n-                mergedDoc.addSource(tempFile);\n+                File tempFile =\n+                        GeneralUtils.convertMultipartFileToFile(\n+                                multipartFile); // Convert MultipartFile to File\n+                filesToDelete.add(tempFile); // Add temp file to the list for later deletion\n+                mergerUtility.addSource(tempFile); // Add source file to the merger utility\n             }\n+            mergerUtility.setDestinationStream(\n+                    docOutputstream); // Set the output stream for the merged document\n+            mergerUtility.mergeDocuments(null); // Merge the documents\n \n-            mergedDoc.setDestinationFileName(\n-                    files[0].getOriginalFilename().replaceFirst(\"[.][^.]+$\", \"\") + \"_merged.pdf\");\n-            mergedDoc.setDestinationStream(docOutputstream);\n+            byte[] mergedPdfBytes = docOutputstream.toByteArray(); // Get merged document bytes\n \n-            mergedDoc.mergeDocuments(null);\n+            // Load the merged PDF document\n+            mergedDocument = Loader.loadPDF(mergedPdfBytes);\n \n+            // Remove signatures if removeCertSign is true\n+            if (removeCertSign) {\n+                PDDocumentCatalog catalog = mergedDocument.getDocumentCatalog();\n+                PDAcroForm acroForm = catalog.getAcroForm();\n+                if (acroForm != null) {\n+                    List<PDField> fieldsToRemove =\n+                            acroForm.getFields().stream()\n+                                    .filter(field -> field instanceof PDSignatureField)\n+                                    .collect(Collectors.toList());\n+\n+                    if (!fieldsToRemove.isEmpty()) {\n+                        acroForm.flatten(\n+                                fieldsToRemove,\n+                                false); // Flatten the fields, effectively removing them\n+                    }\n+                }\n+            }\n+\n+            // Save the modified document to a new ByteArrayOutputStream\n+            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+            mergedDocument.save(baos);\n+\n+            String mergedFileName =\n+                    files[0].getOriginalFilename().replaceFirst(\"[.][^.]+$\", \"\")\n+                            + \"_merged_unsigned.pdf\";\n             return WebResponseUtils.bytesToWebResponse(\n-                    docOutputstream.toByteArray(), mergedDoc.getDestinationFileName());\n+                    baos.toByteArray(), mergedFileName); // Return the modified PDF\n+\n         } catch (Exception ex) {\n             logger.error(\"Error in merge pdf process\", ex);\n             throw ex;\n         } finally {\n             for (File file : filesToDelete) {\n                 if (file != null) {\n-                    Files.deleteIfExists(file.toPath());\n+                    Files.deleteIfExists(file.toPath()); // Delete temporary files\n                 }\n             }\n+            docOutputstream.close();\n+            if (mergedDocument != null) {\n+                mergedDocument.close(); // Close the merged document\n+            }\n         }\n     }\n }\n\ndiff --git a/src/main/java/stirling/software/SPDF/model/api/general/MergePdfsRequest.java b/src/main/java/stirling/software/SPDF/model/api/general/MergePdfsRequest.java\n--- a/src/main/java/stirling/software/SPDF/model/api/general/MergePdfsRequest.java\n+++ b/src/main/java/stirling/software/SPDF/model/api/general/MergePdfsRequest.java\n@@ -21,4 +21,10 @@ public class MergePdfsRequest extends MultiplePDFFiles {\n             },\n             defaultValue = \"orderProvided\")\n     private String sortType = \"orderProvided\";\n+\n+    @Schema(\n+            description =\n+                    \"Flag indicating whether to remove certification signatures from the merged PDF. If true, all certification signatures will be removed from the final merged document.\",\n+            example = \"true\")\n+    private boolean isRemoveCertSign;\n }",
    "output": "Add Option to remove the digital signature when merging"
  }
]