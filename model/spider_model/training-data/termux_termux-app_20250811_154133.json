[
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/models/ReportInfo.java b/termux-shared/src/main/java/com/termux/shared/models/ReportInfo.java\n--- a/termux-shared/src/main/java/com/termux/shared/models/ReportInfo.java\n+++ b/termux-shared/src/main/java/com/termux/shared/models/ReportInfo.java\n@@ -1,5 +1,7 @@\n package com.termux.shared.models;\n \n+import androidx.annotation.Keep;\n+\n import com.termux.shared.markdown.MarkdownUtils;\n import com.termux.shared.android.AndroidUtils;\n \n@@ -10,6 +12,25 @@\n  */\n public class ReportInfo implements Serializable {\n \n+    /**\n+     * Explicitly define `serialVersionUID` to prevent exceptions on deserialization.\n+     *\n+     * Like when calling `Bundle.getSerializable()` on Android.\n+     * `android.os.BadParcelableException: Parcelable encountered IOException reading a Serializable object` (name = <class_name>)\n+     * `java.io.InvalidClassException: <class_name>; local class incompatible`\n+     *\n+     * The `@Keep` annotation is necessary to prevent the field from being removed by proguard when\n+     * app is compiled, even if its kept during library compilation.\n+     *\n+     * **See Also:**\n+     * - https://docs.oracle.com/javase/8/docs/platform/serialization/spec/version.html#a6678\n+     * - https://docs.oracle.com/javase/8/docs/platform/serialization/spec/class.html#a4100\n+     */\n+    @Keep\n+    private static final long serialVersionUID = 1L;\n+\n+\n+\n     /** The user action that was being processed for which the report was generated. */\n     public final String userAction;\n     /** The internal app component that sent the report. */\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/models/TextIOInfo.java b/termux-shared/src/main/java/com/termux/shared/models/TextIOInfo.java\n--- a/termux-shared/src/main/java/com/termux/shared/models/TextIOInfo.java\n+++ b/termux-shared/src/main/java/com/termux/shared/models/TextIOInfo.java\n@@ -3,6 +3,7 @@\n import android.graphics.Color;\n import android.graphics.Typeface;\n \n+import androidx.annotation.Keep;\n import androidx.annotation.NonNull;\n \n import com.termux.shared.activities.TextIOActivity;\n@@ -19,6 +20,25 @@\n  */\n public class TextIOInfo implements Serializable {\n \n+    /**\n+     * Explicitly define `serialVersionUID` to prevent exceptions on deserialization.\n+     *\n+     * Like when calling `Bundle.getSerializable()` on Android.\n+     * `android.os.BadParcelableException: Parcelable encountered IOException reading a Serializable object` (name = <class_name>)\n+     * `java.io.InvalidClassException: <class_name>; local class incompatible`\n+     *\n+     * The `@Keep` annotation is necessary to prevent the field from being removed by proguard when\n+     * app is compiled, even if its kept during library compilation.\n+     *\n+     * **See Also:**\n+     * - https://docs.oracle.com/javase/8/docs/platform/serialization/spec/version.html#a6678\n+     * - https://docs.oracle.com/javase/8/docs/platform/serialization/spec/class.html#a4100\n+     */\n+    @Keep\n+    private static final long serialVersionUID = 1L;\n+\n+\n+\n     public static final int GENERAL_DATA_SIZE_LIMIT_IN_BYTES = 1000;\n     public static final int LABEL_SIZE_LIMIT_IN_BYTES = 4000;\n     public static final int TEXT_SIZE_LIMIT_IN_BYTES = 100000 - GENERAL_DATA_SIZE_LIMIT_IN_BYTES - LABEL_SIZE_LIMIT_IN_BYTES; // < 100KB",
    "output": "Fixed: Add explicit `serialVersionUID` to `Serializable` classes like `ReportInfo` and `TextIOInfo`\n\nReading `ReportInfo` with `Bundle.getSerializable()` by `ReportActivity` is triggering exception when default algorithm is used for `serialVersionUID` in Termux:API plugin app when error notification created in `ResultReturner.returnData()` by `TermuxPluginUtils.sendPluginCommandErrorNotification()` is clicked.\n\n```\njava.lang.RuntimeException: Unable to start activity ComponentInfo{com.termux/com.termux.shared.activities.ReportActivity}: android.os.BadParcelableException: Parcelable encountered IOException reading a Serializable object (name = com.termux.shared.models.ReportInfo)\n\tat android.app.ActivityThread.performLaunchActivity(ActivityThread.java:4280)\n\tat android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:4467)\n\tat android.app.servertransaction.LaunchActivityItem.execute(LaunchActivityItem.java:222)\n\tat android.app.servertransaction.TransactionExecutor.executeNonLifecycleItem(TransactionExecutor.java:133)\n\tat android.app.servertransaction.TransactionExecutor.executeTransactionItems(TransactionExecutor.java:103)\n\tat android.app.servertransaction.TransactionExecutor.execute(TransactionExecutor.java:80)\n\tat android.app.ActivityThread$H.handleMessage(ActivityThread.java:2823)\n\tat android.os.Handler.dispatchMessage(Handler.java:110)\n\tat android.os.Looper.loopOnce(Looper.java:248)\n\tat android.os.Looper.loop(Looper.java:338)\n\tat android.app.ActivityThread.main(ActivityThread.java:9067)\n\tat java.lang.reflect.Method.invoke(Native Method)\n\tat com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:593)\n\tat com.android.internal.os.ZygoteInit.main(ZygoteInit.java:932)\nCaused by: android.os.BadParcelableException: Parcelable encountered IOException reading a Serializable object (name = com.termux.shared.models.ReportInfo)\n\tat android.os.Parcel.readSerializableInternal(Parcel.java:5520)\n\tat android.os.Parcel.readValue(Parcel.java:5038)\n\tat android.os.Parcel.readValue(Parcel.java:4702)\n\tat android.os.Parcel.-$$Nest$mreadValue(Unknown Source:0)\n\tat android.os.Parcel$LazyValue.apply(Parcel.java:4811)\n\tat android.os.Parcel$LazyValue.apply(Parcel.java:4764)\n\tat android.os.BaseBundle.unwrapLazyValueFromMapLocked(BaseBundle.java:446)\n\tat android.os.BaseBundle.getValueAt(BaseBundle.java:426)\n\tat android.os.BaseBundle.getValue(BaseBundle.java:397)\n\tat android.os.BaseBundle.getValue(BaseBundle.java:380)\n\tat android.os.BaseBundle.getValue(BaseBundle.java:373)\n\tat android.os.BaseBundle.getSerializable(BaseBundle.java:1522)\n\tat android.os.Bundle.getSerializable(Bundle.java:1339)\n\tat com.termux.shared.activities.ReportActivity.updateUI(ReportActivity.java:140)\n\tat com.termux.shared.activities.ReportActivity.onCreate(ReportActivity.java:93)\n\tat android.app.Activity.performCreate(Activity.java:9155)\n\tat android.app.Activity.performCreate(Activity.java:9133)\n\tat android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1521)\n\tat android.app.ActivityThread.performLaunchActivity(ActivityThread.java:4262)\n\t... 13 more\nCaused by: java.io.InvalidClassException: com.termux.shared.models.ReportInfo; local class incompatible: stream classdesc serialVersionUID = -5165426368218339031, local class serialVersionUID = 1\n\tat java.io.ObjectStreamClass.initNonProxy(ObjectStreamClass.java:652)\n\tat java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:1743)\n\tat java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1624)\n\tat java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1902)\n\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1442)\n\tat java.io.ObjectInputStream.readObject(ObjectInputStream.java:430)\n\tat android.os.Parcel.readSerializableInternal(Parcel.java:5507)\n\t... 31 more\n\n```\n\nIf using release APK with obfuscation enabled, then following exception will be triggered.\n\n```\njava.lang.RuntimeException: Unable to start activity ComponentInfo{com.termux/com.termux.shared.activities.ReportActivity}: android.os.BadParcelableException: Parcelable encountered ClassNotFoundException reading a Serializable object (name = I0.a)\n\tat android.app.ActivityThread.performLaunchActivity(ActivityThread.java:3864)\n\tat android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:4006)\n\tat android.app.servertransaction.LaunchActivityItem.execute(LaunchActivityItem.java:111)\n\tat android.app.servertransaction.TransactionExecutor.executeCallbacks(TransactionExecutor.java:135)\n\tat android.app.servertransaction.TransactionExecutor.execute(TransactionExecutor.java:95)\n\tat android.app.ActivityThread$H.handleMessage(ActivityThread.java:2462)\n\tat android.os.Handler.dispatchMessage(Handler.java:106)\n\tat android.os.Looper.loopOnce(Looper.java:240)\n\tat android.os.Looper.loop(Looper.java:351)\n\tat android.app.ActivityThread.main(ActivityThread.java:8377)\n\tat java.lang.reflect.Method.invoke(Native Method)\n\tat com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:584)\n\tat com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1013)\nCaused by: android.os.BadParcelableException: Parcelable encountered ClassNotFoundException reading a Serializable object (name = I0.a)\n\tat android.os.Parcel.readSerializableInternal(Parcel.java:5113)\n\tat android.os.Parcel.readValue(Parcel.java:4655)\n\tat android.os.Parcel.readValue(Parcel.java:4363)\n\tat android.os.Parcel.-$$Nest$mreadValue(Unknown Source:0)\n\tat android.os.Parcel$LazyValue.apply(Parcel.java:4461)\n\tat android.os.Parcel$LazyValue.apply(Parcel.java:4420)\n\tat android.os.BaseBundle.getValueAt(BaseBundle.java:394)\n\tat android.os.BaseBundle.getValue(BaseBundle.java:374)\n\tat android.os.BaseBundle.getValue(BaseBundle.java:357)\n\tat android.os.BaseBundle.getValue(BaseBundle.java:350)\n\tat android.os.BaseBundle.getSerializable(BaseBundle.java:1451)\n\tat android.os.Bundle.getSerializable(Bundle.java:1144)\n\tat com.termux.shared.activities.ReportActivity.updateUI(ReportActivity.java:136)\n\tat com.termux.shared.activities.ReportActivity.onCreate(ReportActivity.java:89)\n\tat android.app.Activity.performCreate(Activity.java:8397)\n\tat android.app.Activity.performCreate(Activity.java:8370)\n\tat android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1403)\n\tat android.app.ActivityThread.performLaunchActivity(ActivityThread.java:3837)\n\t... 12 more\nCaused by: java.lang.ClassNotFoundException: I0.a\n\tat java.lang.Class.classForName(Native Method)\n\tat java.lang.Class.forName(Class.java:536)\n\tat android.os.Parcel$2.resolveClass(Parcel.java:5090)\n\tat java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:1733)\n\tat java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1624)\n\tat java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1902)\n\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1442)\n\tat java.io.ObjectInputStream.readObject(ObjectInputStream.java:430)\n\tat android.os.Parcel.readSerializableInternal(Parcel.java:5096)\n\t... 29 more\nCaused by: java.lang.ClassNotFoundException: I0.a\n\t... 38 more\n```\n\nRelated issue https://github.com/termux/termux-api/issues/762"
  },
  {
    "input": "diff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n@@ -83,6 +83,10 @@ public final class TerminalEmulator {\n     private static final int ESC_APC = 20;\n     /** Escape processing: \"ESC _\" or Application Program Command (APC), followed by Escape. */\n     private static final int ESC_APC_ESCAPE = 21;\n+    /** Escape processing: ESC [ <parameter bytes> */\n+    private static final int ESC_CSI_UNSUPPORTED_PARAMETER_BYTE = 22;\n+    /** Escape processing: ESC [ <parameter bytes> <intermediate bytes> */\n+    private static final int ESC_CSI_UNSUPPORTED_INTERMEDIATE_BYTE = 23;\n \n     /** The number of parameter arguments including colon separated sub-parameters. */\n     private static final int MAX_ESCAPE_PARAMETERS = 32;\n@@ -658,6 +662,10 @@ public void processCodePoint(int b) {\n                     case ESC_CSI:\n                         doCsi(b);\n                         break;\n+                    case ESC_CSI_UNSUPPORTED_PARAMETER_BYTE:\n+                    case ESC_CSI_UNSUPPORTED_INTERMEDIATE_BYTE:\n+                        doCsiUnsupportedParameterOrIntermediateByte(b);\n+                        break;\n                     case ESC_CSI_EXCLAMATION:\n                         if (b == 'p') { // Soft terminal reset (DECSTR, http://vt100.net/docs/vt510-rm/DECSTR).\n                             reset();\n@@ -1059,6 +1067,37 @@ private int nextTabStop(int numTabs) {\n         return mRightMargin - 1;\n     }\n \n+    /**\n+     * Process byte while in the {@link #ESC_CSI_UNSUPPORTED_PARAMETER_BYTE} or\n+     * {@link #ESC_CSI_UNSUPPORTED_INTERMEDIATE_BYTE} escape state.\n+     *\n+     * Parse unsupported parameter, intermediate and final bytes but ignore them.\n+     *\n+     * > For Control Sequence Introducer, ... the ESC [ is followed by\n+     * > - any number (including none) of \"parameter bytes\" in the range 0x30–0x3F (ASCII 0–9:;<=>?),\n+     * > - then by any number of \"intermediate bytes\" in the range 0x20–0x2F (ASCII space and !\"#$%&'()*+,-./),\n+     * > - then finally by a single \"final byte\" in the range 0x40–0x7E (ASCII @A–Z[\\]^_`a–z{|}~).\n+     *\n+     * - https://en.wikipedia.org/wiki/ANSI_escape_code#Control_Sequence_Introducer_commands\n+     * - https://invisible-island.net/xterm/ecma-48-parameter-format.html#section5.4\n+     */\n+    private void doCsiUnsupportedParameterOrIntermediateByte(int b) {\n+        if (mEscapeState == ESC_CSI_UNSUPPORTED_PARAMETER_BYTE && b >= 0x30 && b <= 0x3F) {\n+            // Supported `0–9:;>?` or unsupported `<=` parameter byte after an\n+            // initial unsupported parameter byte in `doCsi()`, or a sequential parameter byte.\n+            continueSequence(ESC_CSI_UNSUPPORTED_PARAMETER_BYTE);\n+        } else if (b >= 0x20 && b <= 0x2F) {\n+            // Optional intermediate byte `!\"#$%&'()*+,-./` after parameter or intermediate byte.\n+            continueSequence(ESC_CSI_UNSUPPORTED_INTERMEDIATE_BYTE);\n+        } else if (b >= 0x40 && b <= 0x7E) {\n+            // Final byte `@A–Z[\\]^_`a–z{|}~` after parameter or intermediate byte.\n+            // Calling `unknownSequence()` would log an error with only a final byte, so ignore it for now.\n+            finishSequence();\n+        } else {\n+            unknownSequence(b);\n+        }\n+    }\n+\n     /** Process byte while in the {@link #ESC_CSI_QUESTIONMARK} escape state. */\n     private void doCsiQuestionMark(int b) {\n         switch (b) {\n@@ -1656,12 +1695,16 @@ private void doCsi(int b) {\n                     }\n                 mCursorCol = newCol;\n                 break;\n-            case '?': // Esc [ ? -- start of a private mode set\n+            case '?': // Esc [ ? -- start of a private parameter byte\n                 continueSequence(ESC_CSI_QUESTIONMARK);\n                 break;\n-            case '>': // \"Esc [ >\" --\n+            case '>': // \"Esc [ >\" -- start of a private parameter byte\n                 continueSequence(ESC_CSI_BIGGERTHAN);\n                 break;\n+            case '<': // \"Esc [ <\" -- start of a private parameter byte\n+            case '=': // \"Esc [ =\" -- start of a private parameter byte\n+                continueSequence(ESC_CSI_UNSUPPORTED_PARAMETER_BYTE);\n+                break;\n             case '`': // Horizontal position absolute (HPA - http://www.vt100.net/docs/vt510-rm/HPA).\n                 setCursorColRespectingOriginMode(getArg0(1) - 1);\n                 break;",
    "output": "Fixed: Fully consume unknown CSI sequences containing unsupported parameter and intermediate bytes\n\nStandard ECMA-48: Control Functions for Coded Character Sets specifies the format of CSI commands.\n- https://en.wikipedia.org/wiki/ANSI_escape_code#Control_Sequence_Introducer_commands\n- https://invisible-island.net/xterm/ecma-48-parameter-format.html#section5.4\n\nPreviously unsupported bytes would be echoed to the terminal.\n\n```shell\n$ printf '\\x1b[=u' # PF\nu\n$ printf '\\x1b[=5u' # PPF\n5u\n$ printf '\\x1b[=5!u' # PPIF\n5!u\n$ printf '\\x1b[=5!%u' # PPIIF\n5!0\n$ printf '\\x1b[=?5!%u' # PPPIIF\n?5!0\n```\n\nThis fixes a problem with fish shell 4.0.0 which uses that sequence.\n\nCloses #4338\n\nCo-authored-by: @krobelus <aclopte@gmail.com>\nCo-authored-by: @agnostic-apollo  <agnosticapollo@gmail.com>"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -736,7 +736,7 @@ private void onResetTerminalSession(TerminalSession session) {\n \n     private void showStylingDialog() {\n         Intent stylingIntent = new Intent();\n-        stylingIntent.setClassName(TermuxConstants.TERMUX_STYLING_PACKAGE_NAME, TermuxConstants.TERMUX_STYLING.TERMUX_STYLING_ACTIVITY_NAME);\n+        stylingIntent.setClassName(TermuxConstants.TERMUX_STYLING_PACKAGE_NAME, TermuxConstants.TERMUX_STYLING_APP.TERMUX_STYLING_ACTIVITY_NAME);\n         try {\n             startActivity(stylingIntent);\n         } catch (ActivityNotFoundException | IllegalArgumentException e) {",
    "output": "Fixed: Use `TERMUX_STYLING_APP` for `TERMUX_STYLING_ACTIVITY_NAME` as per 078eea2b"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n@@ -1,6 +1,7 @@\n package com.termux.shared.termux;\n \n import android.annotation.SuppressLint;\n+import android.content.Intent;\n \n import com.termux.shared.shell.command.ExecutionCommand;\n import com.termux.shared.shell.command.ExecutionCommand.Runner;\n@@ -11,7 +12,7 @@\n import java.util.List;\n \n /*\n- * Version: v0.52.0\n+ * Version: v0.53.0\n  * SPDX-License-Identifier: MIT\n  *\n  * Changelog\n@@ -277,6 +278,10 @@\n  *\n  * - 0.52.0 (2022-06-18)\n  *      - Added `TERMUX_PREFIX_DIR_IGNORED_SUB_FILES_PATHS_TO_CONSIDER_AS_EMPTY`.\n+ *\n+ * - 0.53.0 (2025-01-12)\n+ *      - Renamed `TERMUX_API`, `TERMUX_STYLING`, `TERMUX_TASKER`, `TERMUX_WIDGET` classes with `_APP` suffix added.\n+ *      - Added `TERMUX_*_MAIN_ACTIVITY_NAME` and `TERMUX_*_LAUNCHER_ACTIVITY_NAME` constants to each app class.\n  */\n \n /**\n@@ -1192,10 +1197,30 @@ public static final class RUN_COMMAND_SERVICE {\n     /**\n      * Termux:API app constants.\n      */\n-    public static final class TERMUX_API {\n+    public static final class TERMUX_API_APP {\n+\n+        /** Termux:API app main activity name. */\n+        public static final String TERMUX_API_MAIN_ACTIVITY_NAME = TERMUX_API_PACKAGE_NAME + \".activities.TermuxAPIMainActivity\"; // Default: \"com.termux.api.activities.TermuxAPIMainActivity\"\n+\n+        /** Termux:API app launcher activity name. This is an `activity-alias` for {@link #TERMUX_API_MAIN_ACTIVITY_NAME} used for launchers with {@link Intent#CATEGORY_LAUNCHER}. */\n+        public static final String TERMUX_API_LAUNCHER_ACTIVITY_NAME = TERMUX_API_PACKAGE_NAME + \".activities.TermuxAPILauncherActivity\"; // Default: \"com.termux.api.activities.TermuxAPILauncherActivity\"\n+\n+    }\n+\n+\n+\n+\n+\n+    /**\n+     * Termux:Boot app constants.\n+     */\n+    public static final class TERMUX_BOOT_APP {\n+\n+        /** Termux:Boot app main activity name. */\n+        public static final String TERMUX_BOOT_MAIN_ACTIVITY_NAME = TERMUX_BOOT_PACKAGE_NAME + \".activities.TermuxBootMainActivity\"; // Default: \"com.termux.boot.activities.TermuxBootMainActivity\"\n \n-        /** Termux:API app core activity name. */\n-        public static final String TERMUX_API_ACTIVITY_NAME = TERMUX_API_PACKAGE_NAME + \".activities.TermuxAPIActivity\"; // Default: \"com.termux.tasker.activities.TermuxAPIActivity\"\n+        /** Termux:Boot app launcher activity name. This is an `activity-alias` for {@link #TERMUX_BOOT_MAIN_ACTIVITY_NAME} used for launchers with {@link Intent#CATEGORY_LAUNCHER}. */\n+        public static final String TERMUX_BOOT_LAUNCHER_ACTIVITY_NAME = TERMUX_BOOT_PACKAGE_NAME + \".activities.TermuxBootLauncherActivity\"; // Default: \"com.termux.boot.activities.TermuxBootLauncherActivity\"\n \n     }\n \n@@ -1208,6 +1233,9 @@ public static final class TERMUX_API {\n      */\n     public static final class TERMUX_FLOAT_APP {\n \n+        /** Termux:Float app core activity name. */\n+        public static final String TERMUX_FLOAT_ACTIVITY_NAME = TERMUX_FLOAT_PACKAGE_NAME + \".TermuxFloatActivity\"; // Default: \"com.termux.window.TermuxFloatActivity\"\n+\n         /** Termux:Float app core service name. */\n         public static final String TERMUX_FLOAT_SERVICE_NAME = TERMUX_FLOAT_PACKAGE_NAME + \".TermuxFloatService\"; // Default: \"com.termux.window.TermuxFloatService\"\n \n@@ -1236,11 +1264,18 @@ public static final class TERMUX_FLOAT_SERVICE {\n     /**\n      * Termux:Styling app constants.\n      */\n-    public static final class TERMUX_STYLING {\n+    public static final class TERMUX_STYLING_APP {\n \n         /** Termux:Styling app core activity name. */\n         public static final String TERMUX_STYLING_ACTIVITY_NAME = TERMUX_STYLING_PACKAGE_NAME + \".TermuxStyleActivity\"; // Default: \"com.termux.styling.TermuxStyleActivity\"\n \n+\n+        /** Termux:Styling app main activity name. */\n+        public static final String TERMUX_STYLING_MAIN_ACTIVITY_NAME = TERMUX_STYLING_PACKAGE_NAME + \".activities.TermuxStylingMainActivity\"; // Default: \"com.termux.styling.activities.TermuxStylingMainActivity\"\n+\n+        /** Termux:Styling app launcher activity name. This is an `activity-alias` for {@link #TERMUX_STYLING_MAIN_ACTIVITY_NAME} used for launchers with {@link Intent#CATEGORY_LAUNCHER}. */\n+        public static final String TERMUX_STYLING_LAUNCHER_ACTIVITY_NAME = TERMUX_STYLING_PACKAGE_NAME + \".activities.TermuxStylingLauncherActivity\"; // Default: \"com.termux.styling.activities.TermuxStylingLauncherActivity\"\n+\n     }\n \n \n@@ -1250,10 +1285,13 @@ public static final class TERMUX_STYLING {\n     /**\n      * Termux:Tasker app constants.\n      */\n-    public static final class TERMUX_TASKER {\n+    public static final class TERMUX_TASKER_APP {\n+\n+        /** Termux:Tasker app main activity name. */\n+        public static final String TERMUX_TASKER_MAIN_ACTIVITY_NAME = TERMUX_TASKER_PACKAGE_NAME + \".activities.TermuxTaskerMainActivity\"; // Default: \"com.termux.tasker.activities.TermuxTaskerMainActivity\"\n \n-        /** Termux:Tasker app core activity name. */\n-        public static final String TERMUX_TASKER_ACTIVITY_NAME = TERMUX_TASKER_PACKAGE_NAME + \".activities.TermuxTaskerActivity\"; // Default: \"com.termux.tasker.activities.TermuxTaskerActivity\"\n+        /** Termux:Tasker app launcher activity name. This is an `activity-alias` for {@link #TERMUX_TASKER_MAIN_ACTIVITY_NAME} used for launchers with {@link Intent#CATEGORY_LAUNCHER}. */\n+        public static final String TERMUX_TASKER_LAUNCHER_ACTIVITY_NAME = TERMUX_TASKER_PACKAGE_NAME + \".activities.TermuxTaskerLauncherActivity\"; // Default: \"com.termux.tasker.activities.TermuxTaskerLauncherActivity\"\n \n     }\n \n@@ -1264,15 +1302,19 @@ public static final class TERMUX_TASKER {\n     /**\n      * Termux:Widget app constants.\n      */\n-    public static final class TERMUX_WIDGET {\n+    public static final class TERMUX_WIDGET_APP {\n \n-        /** Termux:Widget app core activity name. */\n-        public static final String TERMUX_WIDGET_ACTIVITY_NAME = TERMUX_WIDGET_PACKAGE_NAME + \".activities.TermuxWidgetActivity\"; // Default: \"com.termux.widget.activities.TermuxWidgetActivity\"\n+        /** Termux:Widget app main activity name. */\n+        public static final String TERMUX_WIDGET_MAIN_ACTIVITY_NAME = TERMUX_WIDGET_PACKAGE_NAME + \".activities.TermuxWidgetMainActivity\"; // Default: \"com.termux.widget.activities.TermuxWidgetMainActivity\"\n+\n+        /** Termux:Widget app launcher activity name. This is an `activity-alias` for {@link #TERMUX_WIDGET_MAIN_ACTIVITY_NAME} used for launchers with {@link Intent#CATEGORY_LAUNCHER}. */\n+        public static final String TERMUX_WIDGET_LAUNCHER_ACTIVITY_NAME = TERMUX_WIDGET_PACKAGE_NAME + \".activities.TermuxWidgetLauncherActivity\"; // Default: \"com.termux.widget.activities.TermuxWidgetLauncherActivity\"\n \n \n         /**  Intent {@code String} extra for the token of the Termux:Widget app shortcuts. */\n         public static final String EXTRA_TOKEN_NAME = TERMUX_PACKAGE_NAME + \".shortcut.token\"; // Default: \"com.termux.shortcut.token\"\n \n+\n         /**\n          * Termux:Widget app {@link android.appwidget.AppWidgetProvider} class.\n          */",
    "output": "Added: Rename app classes in `TermuxConstants` with `_APP` suffix added and add `TERMUX_*_MAIN_ACTIVITY_NAME` and `TERMUX_*_LAUNCHER_ACTIVITY_NAME` constants to each app class"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/api/file/FileReceiverActivity.java b/app/src/main/java/com/termux/app/api/file/FileReceiverActivity.java\n--- a/app/src/main/java/com/termux/app/api/file/FileReceiverActivity.java\n+++ b/app/src/main/java/com/termux/app/api/file/FileReceiverActivity.java\n@@ -55,6 +55,8 @@ public class FileReceiverActivity extends AppCompatActivity {\n     private static final String LOG_TAG = \"FileReceiverActivity\";\n \n     static boolean isSharedTextAnUrl(String sharedText) {\n+        if (sharedText == null || sharedText.isEmpty()) return false;\n+\n         return Patterns.WEB_URL.matcher(sharedText).matches()\n             || Pattern.matches(\"magnet:\\\\?xt=urn:btih:.*?\", sharedText);\n     }",
    "output": "Fixed: Fix tests added in b84dc703"
  },
  {
    "input": "diff --git a/app/src/test/java/com/termux/app/api/file/FileReceiverActivityTest.java b/app/src/test/java/com/termux/app/api/file/FileReceiverActivityTest.java\n--- a/app/src/test/java/com/termux/app/api/file/FileReceiverActivityTest.java\n+++ b/app/src/test/java/com/termux/app/api/file/FileReceiverActivityTest.java\n@@ -26,6 +26,8 @@ public void testIsSharedTextAnUrl() {\n \n         List<String> invalidUrls = new ArrayList<>();\n         invalidUrls.add(\"a test with example.com\");\n+        invalidUrls.add(\"\");\n+        invalidUrls.add(null);\n         for (String url : invalidUrls) {\n             Assert.assertFalse(FileReceiverActivity.isSharedTextAnUrl(url));\n         }",
    "output": "Added: Add empty and null strings tests for invalid urls to `FileReceiverActivityTest`"
  },
  {
    "input": "diff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n@@ -1418,8 +1418,8 @@ private void doEsc(int b) {\n                 // http://www.vt100.net/docs/vt100-ug/chapter3.html: \"Move the active position to the same horizontal\n                 // position on the preceding line. If the active position is at the top margin, a scroll down is performed\".\n                 if (mCursorRow <= mTopMargin) {\n-                    mScreen.blockCopy(0, mTopMargin, mColumns, mBottomMargin - (mTopMargin + 1), 0, mTopMargin + 1);\n-                    blockClear(0, mTopMargin, mColumns);\n+                    mScreen.blockCopy(mLeftMargin, mTopMargin, mRightMargin - mLeftMargin, mBottomMargin - (mTopMargin + 1), mLeftMargin, mTopMargin + 1);\n+                    blockClear(mLeftMargin, mTopMargin, mRightMargin - mLeftMargin);\n                 } else {\n                     mCursorRow--;\n                 }\n@@ -1628,8 +1628,8 @@ private void doCsi(int b) {\n                     final int linesToScrollArg = getArg0(1);\n                     final int linesBetweenTopAndBottomMargins = mBottomMargin - mTopMargin;\n                     final int linesToScroll = Math.min(linesBetweenTopAndBottomMargins, linesToScrollArg);\n-                    mScreen.blockCopy(0, mTopMargin, mColumns, linesBetweenTopAndBottomMargins - linesToScroll, 0, mTopMargin + linesToScroll);\n-                    blockClear(0, mTopMargin, mColumns, linesToScroll);\n+                    mScreen.blockCopy(mLeftMargin, mTopMargin, mRightMargin - mLeftMargin, linesBetweenTopAndBottomMargins - linesToScroll, mLeftMargin, mTopMargin + linesToScroll);\n+                    blockClear(mLeftMargin, mTopMargin, mRightMargin - mLeftMargin, linesToScroll);\n                 } else {\n                     // \"${CSI}${func};${startx};${starty};${firstrow};${lastrow}T\" - initiate highlight mouse tracking.\n                     unimplementedSequence(b);\n\ndiff --git a/terminal-emulator/src/test/java/com/termux/terminal/ScrollRegionTest.java b/terminal-emulator/src/test/java/com/termux/terminal/ScrollRegionTest.java\n--- a/terminal-emulator/src/test/java/com/termux/terminal/ScrollRegionTest.java\n+++ b/terminal-emulator/src/test/java/com/termux/terminal/ScrollRegionTest.java\n@@ -75,6 +75,16 @@ public void testNELRespectsLeftMargin() {\n \t\twithTerminalSized(3, 3).enterString(\"\\033[?69h\\033[2sABC\\033[?6h\\033ED\").assertLinesAre(\"ABC\", \" D \", \"   \");\n \t}\n \n+\tpublic void testRiRespectsLeftMargin() {\n+\t\t// Reverse Index (RI), ${ESC}M, should respect horizontal margins:\n+\t\twithTerminalSized(4, 3).enterString(\"ABCD\\033[?69h\\033[2;3s\\033[?6h\\033M\").assertLinesAre(\"A  D\", \" BC \", \"    \");\n+\t}\n+\n+\tpublic void testSdRespectsLeftMargin() {\n+\t\t// Scroll Down (SD), ${CSI}${N}T, should respect horizontal margins:\n+\t\twithTerminalSized(4, 3).enterString(\"ABCD\\033[?69h\\033[2;3s\\033[?6h\\033[2T\").assertLinesAre(\"A  D\", \"    \", \" BC \");\n+\t}\n+\n \tpublic void testBackwardIndex() {\n \t\t// vttest \"Menu 11.3.2: VT420 Cursor-Movement Test\", test 7.\n \t\t// Without margins:",
    "output": "Fixed: Make ScrollDown escape respect margins\n\nSD sequence (`${CSI}${N}T`) was scrolling the whole width\n of the terminal instead of just between the margins.\nRI sequence (`${ESC}M`, move cursor up 1 line) was doing the same.\nFixed that.\n\nFixes #2576 where in tmux scrolling one of several\n side-by-side panels down resulted in all visually scrolling."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxOpenReceiver.java b/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n--- a/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n+++ b/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n@@ -172,6 +172,13 @@ public Cursor query(@NonNull Uri uri, String[] projection, String selection, Str\n \n         @Override\n         public String getType(@NonNull Uri uri) {\n+            String path = uri.getLastPathSegment();\n+            int extIndex = path.lastIndexOf('.') + 1;\n+            if (extIndex > 0) {\n+                MimeTypeMap mimeMap = MimeTypeMap.getSingleton();\n+                String ext = path.substring(extIndex).toLowerCase();\n+                return mimeMap.getMimeTypeFromExtension(ext);\n+            }\n             return null;\n         }\n ",
    "output": "Added: Basic MIME type recognition in ContentProvider"
  },
  {
    "input": "diff --git a/terminal-view/src/main/java/com/termux/view/TerminalRenderer.java b/terminal-view/src/main/java/com/termux/view/TerminalRenderer.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalRenderer.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalRenderer.java\n@@ -233,7 +233,7 @@ private void drawTextRun(Canvas canvas, char[] text, int[] palette, float y, int\n             mTextPaint.setColor(foreColor);\n \n             // The text alignment is the default Paint.Align.LEFT.\n-            canvas.drawText(text, startCharIndex, runWidthChars, left, y - mFontLineSpacingAndAscent, mTextPaint);\n+            canvas.drawTextRun(text, startCharIndex, runWidthChars, startCharIndex, runWidthChars, left, y - mFontLineSpacingAndAscent, false, mTextPaint);\n         }\n \n         if (savedMatrix) canvas.restore();",
    "output": "Fixed: Use Canvas.drawTextRun instead of drawText\n\ndrawText does (very) basic BiDi, which causes inconsistent behaviour.\nThis ensures everything is LtR."
  },
  {
    "input": "diff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -100,6 +100,20 @@ public final class TerminalView extends View {\n     @RequiresApi(api = Build.VERSION_CODES.O)\n     private int mAutoFillType = AUTOFILL_TYPE_NONE;\n \n+    /**\n+     * The current AutoFill type returned for {@link View#getImportantForAutofill()} by\n+     * {@link #getImportantForAutofill()}.\n+     *\n+     * The default is {@link #IMPORTANT_FOR_AUTOFILL_NO} so that view is not considered important\n+     * for AutoFill. This value should be updated to required value, like\n+     * {@link #IMPORTANT_FOR_AUTOFILL_YES} before calling {@link AutofillManager#requestAutofill(View)}\n+     * so that Android and apps consider the view as important for AutoFill to process the request.\n+     * The updated value set will automatically be restored to {@link #IMPORTANT_FOR_AUTOFILL_NO} in\n+     * {@link #autofill(AutofillValue)} by calling {@link #resetAutoFill()}.\n+     */\n+    @RequiresApi(api = Build.VERSION_CODES.O)\n+    private int mAutoFillImportance = IMPORTANT_FOR_AUTOFILL_NO;\n+\n     /**\n      * The current AutoFill hints returned for {@link View#getAutofillHints()} ()} by {@link #getAutofillHints()} ()}.\n      *\n@@ -1078,13 +1092,14 @@ public AutofillValue getAutofillValue() {\n     @RequiresApi(api = Build.VERSION_CODES.O)\n     @Override\n     public int getImportantForAutofill() {\n-        return IMPORTANT_FOR_AUTOFILL_NO;\n+        return mAutoFillImportance;\n     }\n \n     @RequiresApi(api = Build.VERSION_CODES.O)\n     private synchronized void resetAutoFill() {\n         // Restore none type so that AutoFill UI isn't shown anymore.\n         mAutoFillType = AUTOFILL_TYPE_NONE;\n+        mAutoFillImportance = IMPORTANT_FOR_AUTOFILL_NO;\n         mAutoFillHints = new String[0];\n     }\n \n@@ -1134,6 +1149,9 @@ public synchronized void requestAutoFill(String[] autoFillHints) {\n             if (autofillManager != null && autofillManager.isEnabled()) {\n                 // Update type that will be returned by `getAutofillType()` so that AutoFill UI is shown.\n                 mAutoFillType = AUTOFILL_TYPE_TEXT;\n+                // Update importance that will be returned by `getImportantForAutofill()` so that\n+                // AutoFill considers the view as important.\n+                mAutoFillImportance = IMPORTANT_FOR_AUTOFILL_YES;\n                 // Update hints that will be returned by `getAutofillHints()` for which to show AutoFill UI.\n                 mAutoFillHints = autoFillHints;\n                 autofillManager.requestAutofill(this);",
    "output": "Fixed: Mark view as important for AutoFill before requesting an AutoFill\n\nCo-authored-by: @AChep <mail@artemchep.com>\nCo-authored-by: @agnostic-apollo  <agnosticapollo@gmail.com>"
  },
  {
    "input": "diff --git a/terminal-emulator/src/main/java/com/termux/terminal/JNI.java b/terminal-emulator/src/main/java/com/termux/terminal/JNI.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/JNI.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/JNI.java\n@@ -23,10 +23,10 @@ final class JNI {\n      * @return the file descriptor resulting from opening /dev/ptmx master device. The sub process will have opened the\n      * slave device counterpart (/dev/pts/$N) and have it as stdint, stdout and stderr.\n      */\n-    public static native int createSubprocess(String cmd, String cwd, String[] args, String[] envVars, int[] processId, int rows, int columns);\n+    public static native int createSubprocess(String cmd, String cwd, String[] args, String[] envVars, int[] processId, int rows, int columns, int cellWidth, int cellHeight);\n \n     /** Set the window size for a given pty, which allows connected programs to learn how large their screen is. */\n-    public static native void setPtyWindowSize(int fd, int rows, int cols);\n+    public static native void setPtyWindowSize(int fd, int rows, int cols, int cellWidth, int cellHeight);\n \n     /**\n      * Causes the calling thread to wait for the process associated with the receiver to finish executing.\n\ndiff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalSession.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalSession.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalSession.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalSession.java\n@@ -21,7 +21,7 @@\n  * A terminal session, consisting of a process coupled to a terminal interface.\n  * <p>\n  * The subprocess will be executed by the constructor, and when the size is made known by a call to\n- * {@link #updateSize(int, int)} terminal emulation will begin and threads will be spawned to handle the subprocess I/O.\n+ * {@link #updateSize(int, int, int, int)} terminal emulation will begin and threads will be spawned to handle the subprocess I/O.\n  * All terminal emulation and callback methods will be performed on the main thread.\n  * <p>\n  * The child process may be exited forcefully by using the {@link #finishIfRunning()} method.\n@@ -61,7 +61,7 @@ public final class TerminalSession extends TerminalOutput {\n \n     /**\n      * The file descriptor referencing the master half of a pseudo-terminal pair, resulting from calling\n-     * {@link JNI#createSubprocess(String, String, String[], String[], int[], int, int)}.\n+     * {@link JNI#createSubprocess(String, String, String[], String[], int[], int, int, int, int)}.\n      */\n     private int mTerminalFileDescriptor;\n \n@@ -100,11 +100,11 @@ public void updateTerminalSessionClient(TerminalSessionClient client) {\n     }\n \n     /** Inform the attached pty of the new size and reflow or initialize the emulator. */\n-    public void updateSize(int columns, int rows) {\n+    public void updateSize(int columns, int rows, int fontWidth, int fontHeight) {\n         if (mEmulator == null) {\n-            initializeEmulator(columns, rows);\n+            initializeEmulator(columns, rows, fontWidth, fontHeight);\n         } else {\n-            JNI.setPtyWindowSize(mTerminalFileDescriptor, rows, columns);\n+            JNI.setPtyWindowSize(mTerminalFileDescriptor, rows, columns, fontWidth, fontHeight);\n             mEmulator.resize(columns, rows);\n         }\n     }\n@@ -120,11 +120,11 @@ public String getTitle() {\n      * @param columns The number of columns in the terminal window.\n      * @param rows    The number of rows in the terminal window.\n      */\n-    public void initializeEmulator(int columns, int rows) {\n+    public void initializeEmulator(int columns, int rows, int cellWidth, int cellHeight) {\n         mEmulator = new TerminalEmulator(this, columns, rows, mTranscriptRows, mClient);\n \n         int[] processId = new int[1];\n-        mTerminalFileDescriptor = JNI.createSubprocess(mShellPath, mCwd, mArgs, mEnv, processId, rows, columns);\n+        mTerminalFileDescriptor = JNI.createSubprocess(mShellPath, mCwd, mArgs, mEnv, processId, rows, columns, cellWidth, cellHeight);\n         mShellPid = processId[0];\n         mClient.setTerminalShellPid(this, mShellPid);\n \n\ndiff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -975,7 +975,7 @@ public void updateSize() {\n         int newRows = Math.max(4, (viewHeight - mRenderer.mFontLineSpacingAndAscent) / mRenderer.mFontLineSpacing);\n \n         if (mEmulator == null || (newColumns != mEmulator.mColumns || newRows != mEmulator.mRows)) {\n-            mTermSession.updateSize(newColumns, newRows);\n+            mTermSession.updateSize(newColumns, newRows, (int) mRenderer.getFontWidth(), mRenderer.getFontLineSpacing());\n             mEmulator = mTermSession.getEmulator();\n             mClient.onEmulatorSet();\n ",
    "output": "Added|Changed: Fill `.ws_xpixel` and `.ws_ypixel` in `winsize`\n\nThis allows to get terminal size in pixel using `TIOCGWINSZ` ioctl.\nSet `.ws_xpixel` using `columns * cell_width` and set `.ws_ypixel` using `rows * cell_height`.\nCell width and height is font width and line spacing, respectively."
  },
  {
    "input": "diff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n@@ -79,6 +79,10 @@ public final class TerminalEmulator {\n     private static final int ESC_CSI_SINGLE_QUOTE = 18;\n     /** Escape processing: CSI ! */\n     private static final int ESC_CSI_EXCLAMATION = 19;\n+    /** Escape processing: \"ESC _\" or Application Program Command (APC). */\n+    private static final int ESC_APC = 20;\n+    /** Escape processing: \"ESC _\" or Application Program Command (APC), followed by Escape. */\n+    private static final int ESC_APC_ESCAPE = 21;\n \n     /** The number of parameter arguments. This name comes from the ANSI standard for terminal escape codes. */\n     private static final int MAX_ESCAPE_PARAMETERS = 16;\n@@ -548,6 +552,15 @@ private void processByte(byte byteToProcess) {\n     }\n \n     public void processCodePoint(int b) {\n+        // The Application Program-Control (APC) string might be arbitrary non-printable characters, so handle that early.\n+        if (mEscapeState == ESC_APC) {\n+            doApc(b);\n+            return;\n+        } else if (mEscapeState == ESC_APC_ESCAPE) {\n+            doApcEscape(b);\n+            return;\n+        }\n+\n         switch (b) {\n             case 0: // Null character (NUL, ^@). Do nothing.\n                 break;\n@@ -1004,6 +1017,30 @@ private void doDeviceControl(int b) {\n         }\n     }\n \n+    /**\n+     * When in {@link #ESC_APC} (APC, Application Program Command) sequence.\n+     */\n+    private void doApc(int b) {\n+        if (b == 27) {\n+            continueSequence(ESC_APC_ESCAPE);\n+        }\n+        // Eat APC sequences silently for now.\n+    }\n+\n+    /**\n+     * When in {@link #ESC_APC} (APC, Application Program Command) sequence.\n+     */\n+    private void doApcEscape(int b) {\n+        if (b == '\\\\') {\n+            // A String Terminator (ST), ending the APC escape sequence.\n+            finishSequence();\n+        } else {\n+            // The Escape character was not the start of a String Terminator (ST),\n+            // but instead just data inside of the APC escape sequence.\n+            continueSequence(ESC_APC);\n+        }\n+    }\n+\n     private int nextTabStop(int numTabs) {\n         for (int i = mCursorCol + 1; i < mColumns; i++)\n             if (mTabStop[i] && --numTabs == 0) return Math.min(i, mRightMargin);\n@@ -1399,6 +1436,9 @@ private void doEsc(int b) {\n             case '>': // DECKPNM\n                 setDecsetinternalBit(DECSET_BIT_APPLICATION_KEYPAD, false);\n                 break;\n+            case '_': // APC - Application Program Command.\n+                continueSequence(ESC_APC);\n+                break;\n             default:\n                 unknownSequence(b);\n                 break;\n\ndiff --git a/terminal-emulator/src/test/java/com/termux/terminal/ApcTest.java b/terminal-emulator/src/test/java/com/termux/terminal/ApcTest.java\n--- a/terminal-emulator/src/test/java/com/termux/terminal/ApcTest.java\n+++ b/terminal-emulator/src/test/java/com/termux/terminal/ApcTest.java\n@@ -0,0 +1,21 @@\n+package com.termux.terminal;\n+\n+public class ApcTest extends TerminalTestCase {\n+\n+    public void testApcConsumed() {\n+        // At time of writing this is part of what yazi sends for probing for kitty graphics protocol support:\n+        // https://github.com/sxyazi/yazi/blob/0cdaff98d0b3723caff63eebf1974e7907a43a2c/yazi-adapter/src/emulator.rs#L129\n+        // This should not result in anything being written to the screen: If kitty graphics protocol support\n+        // is implemented it should instead result in an error code on stdin, and if not it should be consumed\n+        // silently just as xterm does. See https://sw.kovidgoyal.net/kitty/graphics-protocol/.\n+        withTerminalSized(2, 2)\n+            .enterString(\"\\033_Gi=31,s=1,v=1,a=q,t=d,f=24;AAAA\\033\\\\\")\n+            .assertLinesAre(\"  \", \"  \");\n+\n+        // It is ok for the APC content to be non printable characters:\n+        withTerminalSized(12, 2)\n+            .enterString(\"hello \\033_some\\023\\033_\\\\apc#end\\033\\\\ world\")\n+            .assertLinesAre(\"hello  world\", \"            \");\n+    }\n+\n+}",
    "output": "Fixed: Parse (but ignore for now) terminal APC sequences"
  },
  {
    "input": "diff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -894,7 +894,7 @@ public boolean handleKeyCodeAction(int keyCode, int keyMod) {\n                 if (shiftDown) {\n                     long time = SystemClock.uptimeMillis();\n                     MotionEvent motionEvent = MotionEvent.obtain(time, time, MotionEvent.ACTION_DOWN, 0, 0, 0);\n-                    doScroll(motionEvent, keyCode == KeyEvent.KEYCODE_PAGE_UP ? -1 : 1);\n+                    doScroll(motionEvent, keyCode == KeyEvent.KEYCODE_PAGE_UP ? -mEmulator.mRows : mEmulator.mRows);\n                     motionEvent.recycle();\n                     return true;\n                 }",
    "output": "Make Shift-PgUp and Shift-PgDn scroll by pages rather than lines\n\nIn other terminals, such as gnome-terminal, Shift-PgUp and Shift-PgDn\nscroll the screen by a full page, rather than a single line. Adjust\ntermux to match."
  },
  {
    "input": "diff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n@@ -126,11 +126,6 @@ public final class TerminalEmulator {\n     private String mTitle;\n     private final Stack<String> mTitleStack = new Stack<>();\n \n-    /** If processing first character of first parameter of {@link #ESC_CSI}. */\n-    private boolean mIsCSIStart;\n-    /** The last character processed of a parameter of {@link #ESC_CSI}. */\n-    private Integer mLastCSIArg;\n-\n     /** The cursor position. Between (0,0) and (mRows-1, mColumns-1). */\n     private int mCursorRow, mCursorCol;\n \n@@ -1393,8 +1388,6 @@ private void doEsc(int b) {\n                 break;\n             case '[':\n                 continueSequence(ESC_CSI);\n-                mIsCSIStart = true;\n-                mLastCSIArg = null;\n                 break;\n             case '=': // DECKPAM\n                 setDecsetinternalBit(DECSET_BIT_APPLICATION_KEYPAD, true);\n@@ -1765,7 +1758,7 @@ private void doCsi(int b) {\n     private void selectGraphicRendition() {\n         if (mArgIndex >= mArgs.length) mArgIndex = mArgs.length - 1;\n         for (int i = 0; i <= mArgIndex; i++) {\n-            int code = mArgs[i];\n+            int code = getArg(i, 0, false);\n             if (code < 0) {\n                 if (mArgIndex > 0) {\n                     continue;\n@@ -1823,7 +1816,10 @@ private void selectGraphicRendition() {\n                     if (i + 4 > mArgIndex) {\n                         Logger.logWarn(mClient, LOG_TAG, \"Too few CSI\" + code + \";2 RGB arguments\");\n                     } else {\n-                        int red = mArgs[i + 2], green = mArgs[i + 3], blue = mArgs[i + 4];\n+                        int red = getArg(i + 2, 0, false);\n+                        int green = getArg(i + 3, 0, false);\n+                        int blue = getArg(i + 4, 0, false);\n+\n                         if (red < 0 || green < 0 || blue < 0 || red > 255 || green > 255 || blue > 255) {\n                             finishSequenceAndLogError(\"Invalid RGB: \" + red + \",\" + green + \",\" + blue);\n                         } else {\n@@ -1837,7 +1833,7 @@ private void selectGraphicRendition() {\n                         i += 4; // \"2;P_r;P_g;P_r\"\n                     }\n                 } else if (firstArg == 5) {\n-                    int color = mArgs[i + 2];\n+                    int color = getArg(i + 2, 0, false);\n                     i += 2; // \"5;P_s\"\n                     if (color >= 0 && color < TextStyle.NUM_INDEXED_COLORS) {\n                         if (code == 38) {\n@@ -2116,44 +2112,29 @@ private void scrollDownOneLine() {\n      *\n      * https://vt100.net/docs/vt510-rm/chapter4.html#S4.3.3\n      * */\n-    private void parseArg(int inputByte) {\n-        int[] bytes = new int[]{inputByte};\n-        // Only doing this for ESC_CSI and not for other ESC_CSI_* since they seem to be using their\n-        // own defaults with getArg*() calls, but there may be missed cases\n-        if (mEscapeState == ESC_CSI) {\n-            if ((mIsCSIStart && inputByte == ';') || // If sequence starts with a ; character, like \\033[;m\n-                (!mIsCSIStart && mLastCSIArg != null && mLastCSIArg == ';'  && inputByte == ';')) {  // If sequence contains sequential ; characters, like \\033[;;m\n-                bytes = new int[]{'0', ';'}; // Assume 0 was passed\n-            }\n-        }\n-\n-        mIsCSIStart = false;\n-\n-        for (int b : bytes) {\n-            if (b >= '0' && b <= '9') {\n-                if (mArgIndex < mArgs.length) {\n-                    int oldValue = mArgs[mArgIndex];\n-                    int thisDigit = b - '0';\n-                    int value;\n-                    if (oldValue >= 0) {\n-                        value = oldValue * 10 + thisDigit;\n-                    } else {\n-                        value = thisDigit;\n-                    }\n-                    if (value > 9999)\n-                        value = 9999;\n-                    mArgs[mArgIndex] = value;\n-                }\n-                continueSequence(mEscapeState);\n-            } else if (b == ';') {\n-                if (mArgIndex < mArgs.length) {\n-                    mArgIndex++;\n+    private void parseArg(int b) {\n+        if (b >= '0' && b <= '9') {\n+            if (mArgIndex < mArgs.length) {\n+                int oldValue = mArgs[mArgIndex];\n+                int thisDigit = b - '0';\n+                int value;\n+                if (oldValue >= 0) {\n+                    value = oldValue * 10 + thisDigit;\n+                } else {\n+                    value = thisDigit;\n                 }\n-                continueSequence(mEscapeState);\n-            } else {\n-                unknownSequence(b);\n+                if (value > 9999)\n+                    value = 9999;\n+                mArgs[mArgIndex] = value;\n+            }\n+            continueSequence(mEscapeState);\n+        } else if (b == ';') {\n+            if (mArgIndex < mArgs.length) {\n+                mArgIndex++;\n             }\n-            mLastCSIArg = b;\n+            continueSequence(mEscapeState);\n+        } else {\n+            unknownSequence(b);\n         }\n     }\n \n\ndiff --git a/terminal-emulator/src/test/java/com/termux/terminal/TerminalTest.java b/terminal-emulator/src/test/java/com/termux/terminal/TerminalTest.java\n--- a/terminal-emulator/src/test/java/com/termux/terminal/TerminalTest.java\n+++ b/terminal-emulator/src/test/java/com/termux/terminal/TerminalTest.java\n@@ -163,6 +163,13 @@ public void testSelectGraphics() {\n         assertEquals(TextStyle.COLOR_INDEX_FOREGROUND, mTerminal.mForeColor);\n         enterString(\"\\033[31;;m\");\n         assertEquals(TextStyle.COLOR_INDEX_FOREGROUND, mTerminal.mForeColor);\n+        enterString(\"\\033[31;m\");\n+        assertEquals(TextStyle.COLOR_INDEX_FOREGROUND, mTerminal.mForeColor);\n+        enterString(\"\\033[31;;41m\");\n+        assertEquals(TextStyle.COLOR_INDEX_FOREGROUND, mTerminal.mForeColor);\n+        assertEquals(1, mTerminal.mBackColor);\n+        enterString(\"\\033[0m\");\n+        assertEquals(TextStyle.COLOR_INDEX_BACKGROUND, mTerminal.mBackColor);\n \n \t\t// 256 colors:\n \t\tenterString(\"\\033[38;5;119m\");\n@@ -178,10 +185,18 @@ public void testSelectGraphics() {\n \t\tassertEquals(129, mTerminal.mBackColor);\n \n \t\t// Multiple parameters at once:\n-\t\tenterString(\"\\033[38;5;178;48;5;179;m\");\n+\t\tenterString(\"\\033[38;5;178;48;5;179m\");\n \t\tassertEquals(178, mTerminal.mForeColor);\n \t\tassertEquals(179, mTerminal.mBackColor);\n \n+\t\t// Omitted parameter means zero:\n+\t\tenterString(\"\\033[38;5;m\");\n+\t\tassertEquals(0, mTerminal.mForeColor);\n+\t\tassertEquals(179, mTerminal.mBackColor);\n+\t\tenterString(\"\\033[48;5;m\");\n+\t\tassertEquals(0, mTerminal.mForeColor);\n+\t\tassertEquals(0, mTerminal.mBackColor);\n+\n \t\t// 24 bit colors:\n \t\tenterString((\"\\033[0m\")); // Reset fg and bg colors.\n \t\tenterString(\"\\033[38;2;255;127;2m\");\n@@ -205,6 +220,16 @@ public void testSelectGraphics() {\n \t\tenterString(\"\\033[38;2;300;127;2;48;2;1;300;254m\");\n \t\tassertEquals(expectedForeground, mTerminal.mForeColor);\n \t\tassertEquals(expectedBackground, mTerminal.mBackColor);\n+\n+\t\t// 24 bit colors, omitted parameter means zero:\n+\t\tenterString(\"\\033[38;2;255;127;m\");\n+\t\texpectedForeground = 0xff000000 | (255 << 16) | (127 << 8);\n+\t\tassertEquals(expectedForeground, mTerminal.mForeColor);\n+\t\tassertEquals(expectedBackground, mTerminal.mBackColor);\n+\t\tenterString(\"\\033[38;2;123;;77m\");\n+\t\texpectedForeground = 0xff000000 | (123 << 16) | 77;\n+\t\tassertEquals(expectedForeground, mTerminal.mForeColor);\n+\t\tassertEquals(expectedBackground, mTerminal.mBackColor);\n \t}\n \n \tpublic void testBackgroundColorErase() {",
    "output": "Fixed: Improve handling of empty ';' SGR sequences\n\nCurrently the Termux terminal emulator prints \"HI\" in red with:\n\n```sh\nprintf \"\\e[31;m HI \\e[0m\"\n```\n\nThis is not how other terminals (tested on xterm, gnome-terminal,\nalacritty and the mac built in terminal) handle it, since they parse\n\"\"\\e[31;m\" as \"\\e[31;0m\", where the \"0\" resets the colors.\n\nThis change aligns with other terminals, as well as improves performance\nby avoiding allocating a new int[] array for each byte processed by\n`parseArg()`, and most importantly simplifies things by removing the\n`mIsCSIStart` and `mLastCSIArg` state, preparing for supporting ':'\nseparated sub parameters such as used in\nhttps://sw.kovidgoyal.net/kitty/underlines/"
  },
  {
    "input": "diff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n@@ -2092,13 +2092,14 @@ private void setCursorPosition(int x, int y) {\n \n     private void scrollDownOneLine() {\n         mScrollCounter++;\n+        long currentStyle = getStyle();\n         if (mLeftMargin != 0 || mRightMargin != mColumns) {\n             // Horizontal margin: Do not put anything into scroll history, just non-margin part of screen up.\n             mScreen.blockCopy(mLeftMargin, mTopMargin + 1, mRightMargin - mLeftMargin, mBottomMargin - mTopMargin - 1, mLeftMargin, mTopMargin);\n             // .. and blank bottom row between margins:\n-            mScreen.blockSet(mLeftMargin, mBottomMargin - 1, mRightMargin - mLeftMargin, 1, ' ', mEffect);\n+            mScreen.blockSet(mLeftMargin, mBottomMargin - 1, mRightMargin - mLeftMargin, 1, ' ', currentStyle);\n         } else {\n-            mScreen.scrollDownOneLine(mTopMargin, mBottomMargin, getStyle());\n+            mScreen.scrollDownOneLine(mTopMargin, mBottomMargin, currentStyle);\n         }\n     }\n \n\ndiff --git a/terminal-emulator/src/test/java/com/termux/terminal/ScrollRegionTest.java b/terminal-emulator/src/test/java/com/termux/terminal/ScrollRegionTest.java\n--- a/terminal-emulator/src/test/java/com/termux/terminal/ScrollRegionTest.java\n+++ b/terminal-emulator/src/test/java/com/termux/terminal/ScrollRegionTest.java\n@@ -127,4 +127,31 @@ public void testScrollRegionDoesNotLimitCursorMovement() {\n \t\t\t\t\"   xxx\"\n \t\t\t);\n \t}\n+\n+\t/**\n+\t * See <a href=\"https://github.com/termux/termux-packages/issues/12556\">reported issue</a>.\n+\t */\n+\tpublic void testClearingWhenScrollingWithMargins() {\n+\t\tint newForeground = 2;\n+\t\tint newBackground = 3;\n+\t\tint size = 3;\n+\t\tTerminalTestCase terminal = withTerminalSized(size, size)\n+\t\t\t// Enable horizontal margin and set left margin to 1:\n+\t\t\t.enterString(\"\\033[?69h\\033[2s\")\n+\t\t\t// Set foreground and background color:\n+\t\t\t.enterString(\"\\033[\" + (30 + newForeground) + \";\" + (40 + newBackground) + \"m\")\n+\t\t\t// Enter newlines to scroll down:\n+\t\t\t.enterString(\"\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\");\n+\t\tfor (int row = 0; row < size; row++) {\n+\t\t\tfor (int col = 0; col < size; col++) {\n+\t\t\t\t// The first column (outside of the scrolling area, due to us setting a left scroll\n+\t\t\t\t// margin of 1) should be unmodified, the others should use the current style:\n+\t\t\t\tint expectedForeground = col == 0 ? TextStyle.COLOR_INDEX_FOREGROUND : newForeground;\n+\t\t\t\tint expectedBackground = col == 0 ? TextStyle.COLOR_INDEX_BACKGROUND : newBackground;\n+\t\t\t\tterminal.assertForegroundColorAt(row, col, expectedForeground);\n+\t\t\t\tterminal.assertBackgroundColorAt(row, col, expectedBackground);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n }\n\ndiff --git a/terminal-emulator/src/test/java/com/termux/terminal/TerminalTestCase.java b/terminal-emulator/src/test/java/com/termux/terminal/TerminalTestCase.java\n--- a/terminal-emulator/src/test/java/com/termux/terminal/TerminalTestCase.java\n+++ b/terminal-emulator/src/test/java/com/termux/terminal/TerminalTestCase.java\n@@ -301,6 +301,11 @@ public void assertForegroundColorAt(int externalRow, int column, int color) {\n \t\tassertEquals(color, TextStyle.decodeForeColor(style));\n \t}\n \n+\tpublic void assertBackgroundColorAt(int externalRow, int column, int color) {\n+\t\tlong style = mTerminal.getScreen().mLines[mTerminal.getScreen().externalToInternalRow(externalRow)].getStyle(column);\n+\t\tassertEquals(color, TextStyle.decodeBackColor(style));\n+\t}\n+\n \tpublic TerminalTestCase assertColor(int colorIndex, int expected) {\n \t\tint actual = mTerminal.mColors.mCurrentColors[colorIndex];\n \t\tif (expected != actual) {",
    "output": "Fixed: Use current bg color when scrolling with horizontal margins\n\nFixes https://github.com/termux/termux-packages/issues/12556\n\nIssue was also reported here:\nhttps://www.reddit.com/r/termux/comments/1df1dii/how_can_i_fix_this_annoying_screenfilling_thing/"
  },
  {
    "input": "diff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalRow.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalRow.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalRow.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalRow.java\n@@ -11,11 +11,37 @@ public final class TerminalRow {\n \n     private static final float SPARE_CAPACITY_FACTOR = 1.5f;\n \n+    /**\n+     * Max combining characters that can exist in a column, that are separate from the base character\n+     * itself. Any additional combining characters will be ignored and not added to the column.\n+     *\n+     * There does not seem to be limit in unicode standard for max number of combination characters\n+     * that can be combined but such characters are primarily under 10.\n+     *\n+     * \"Section 3.6 Combination\" of unicode standard contains combining characters info.\n+     * - https://www.unicode.org/versions/Unicode15.0.0/ch03.pdf\n+     * - https://en.wikipedia.org/wiki/Combining_character#Unicode_ranges\n+     * - https://stackoverflow.com/questions/71237212/what-is-the-maximum-number-of-unicode-combined-characters-that-may-be-needed-to\n+     *\n+     * UAX15-D3 Stream-Safe Text Format limits to max 30 combining characters.\n+     * > The value of 30 is chosen to be significantly beyond what is required for any linguistic or technical usage.\n+     * > While it would have been feasible to chose a smaller number, this value provides a very wide margin,\n+     * > yet is well within the buffer size limits of practical implementations.\n+     * - https://unicode.org/reports/tr15/#Stream_Safe_Text_Format\n+     * - https://stackoverflow.com/a/11983435/14686958\n+     *\n+     * We choose the value 15 because it should be enough for terminal based applications and keep\n+     * the memory usage low for a terminal row, won't affect performance or cause terminal to\n+     * lag or hang, and will keep malicious applications from causing harm. The value can be\n+     * increased if ever needed for legitimate applications.\n+     */\n+    private static final int MAX_COMBINING_CHARACTERS_PER_COLUMN = 15;\n+\n     /** The number of columns in this terminal row. */\n     private final int mColumns;\n     /** The text filling this terminal row. */\n     public char[] mText;\n-    /** The number of java char:s used in {@link #mText}. */\n+    /** The number of java chars used in {@link #mText}. */\n     private short mSpaceUsed;\n     /** If this row has been line wrapped due to text output at the end of line. */\n     boolean mLineWrap;\n@@ -163,18 +189,25 @@ public void setChar(int columnToSet, int codePoint, long style) {\n         // Get the number of elements in the mText array this column uses now\n         int oldCharactersUsedForColumn;\n         if (columnToSet + oldCodePointDisplayWidth < mColumns) {\n-            oldCharactersUsedForColumn = findStartOfColumn(columnToSet + oldCodePointDisplayWidth) - oldStartOfColumnIndex;\n+            int oldEndOfColumnIndex = findStartOfColumn(columnToSet + oldCodePointDisplayWidth);\n+            oldCharactersUsedForColumn = oldEndOfColumnIndex - oldStartOfColumnIndex;\n         } else {\n             // Last character.\n             oldCharactersUsedForColumn = mSpaceUsed - oldStartOfColumnIndex;\n         }\n \n+        // If MAX_COMBINING_CHARACTERS_PER_COLUMN already exist in column, then ignore adding additional combining characters.\n+        if (newIsCombining) {\n+            int combiningCharsCount = WcWidth.zeroWidthCharsCount(mText, oldStartOfColumnIndex, oldStartOfColumnIndex + oldCharactersUsedForColumn);\n+            if (combiningCharsCount >= MAX_COMBINING_CHARACTERS_PER_COLUMN)\n+                return;\n+        }\n+\n         // Find how many chars this column will need\n         int newCharactersUsedForColumn = Character.charCount(codePoint);\n         if (newIsCombining) {\n             // Combining characters are added to the contents of the column instead of overwriting them, so that they\n             // modify the existing contents.\n-            // FIXME: Put a limit of combining characters.\n             // FIXME: Unassigned characters also get width=0.\n             newCharactersUsedForColumn += oldCharactersUsedForColumn;\n         }\n@@ -189,7 +222,7 @@ public void setChar(int columnToSet, int codePoint, long style) {\n             if (mSpaceUsed + javaCharDifference > text.length) {\n                 // We need to grow the array\n                 char[] newText = new char[text.length + mColumns];\n-                System.arraycopy(text, 0, newText, 0, oldStartOfColumnIndex + oldCharactersUsedForColumn);\n+                System.arraycopy(text, 0, newText, 0, oldNextColumnIndex);\n                 System.arraycopy(text, oldNextColumnIndex, newText, newNextColumnIndex, oldCharactersAfterColumn);\n                 mText = text = newText;\n             } else {\n\ndiff --git a/terminal-emulator/src/main/java/com/termux/terminal/WcWidth.java b/terminal-emulator/src/main/java/com/termux/terminal/WcWidth.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/WcWidth.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/WcWidth.java\n@@ -538,4 +538,29 @@ public static int width(char[] chars, int index) {\n         return Character.isHighSurrogate(c) ? width(Character.toCodePoint(c, chars[index + 1])) : width(c);\n     }\n \n+    /**\n+     * The zero width characters count like combining characters in the `chars` array from start\n+     * index to end index (exclusive).\n+     */\n+    public static int zeroWidthCharsCount(char[] chars, int start, int end) {\n+        if (start < 0 || start >= chars.length)\n+            return 0;\n+\n+        int count = 0;\n+        for (int i = start; i < end && i < chars.length;) {\n+            if (Character.isHighSurrogate(chars[i])) {\n+                if (width(Character.toCodePoint(chars[i], chars[i + 1])) <= 0) {\n+                    count++;\n+                }\n+                i += 2;\n+            } else {\n+                if (width(chars[i]) <= 0) {\n+                    count++;\n+                }\n+                i++;\n+            }\n+        }\n+        return count;\n+    }\n+\n }",
    "output": "Fixed: Limit max combining characters in TerminalRow to 15 characters to prevent buffer overflows\n\nThe exception below causing app crash happens because of malicious input where combining characters keep getting added to same column of the row and this increases the size of `mSpaceUsed` and `mText`, eventually causing a buffer overflow of `mSpaceUsed`, which is limited to max `32767` value as per java `short` limit, but the limit itself isn't the issue, but an endless number of combining characters being added. Check `MAX_COMBINING_CHARACTERS_PER_COLUMN` field javadocs for why the limit `15` was chosen.\n\n```\ncurl -o matroska.js https://kimapr.net/lappy/matroska.js\ncat matroska.js\n```\n\nThe `charCount` below refers to value of `Character.charCount(codePoint)`, like before `oldCharactersUsedForColumn` is appended to `newCharactersUsedForColumn`.\n\n```\nTerminalRow: codePoint=112, mColumns=98, mText=637, columnToSet=18, mSpaceUsed=590, javaCharDifference=0, oldStartOfColumnIndex=510, oldCharactersUsedForColumn=1, newCharactersUsedForColumn=1, oldNextColumnIndex=511, newNextColumnIndex=511, charCount=1, oldCodePointDisplayWidth=1, newCodePointDisplayWidth=1\nTerminalRow: codePoint=40, mColumns=98, mText=637, columnToSet=19, mSpaceUsed=590, javaCharDifference=0, oldStartOfColumnIndex=511, oldCharactersUsedForColumn=1, newCharactersUsedForColumn=1, oldNextColumnIndex=512, newNextColumnIndex=512, charCount=1, oldCodePointDisplayWidth=1, newCodePointDisplayWidth=1\nTerminalRow: codePoint=40, mColumns=98, mText=637, columnToSet=20, mSpaceUsed=590, javaCharDifference=0, oldStartOfColumnIndex=512, oldCharactersUsedForColumn=1, newCharactersUsedForColumn=1, oldNextColumnIndex=513, newNextColumnIndex=513, charCount=1, oldCodePointDisplayWidth=1, newCodePointDisplayWidth=1\nTerminalRow: codePoint=101, mColumns=98, mText=637, columnToSet=21, mSpaceUsed=590, javaCharDifference=0, oldStartOfColumnIndex=513, oldCharactersUsedForColumn=1, newCharactersUsedForColumn=1, oldNextColumnIndex=514, newNextColumnIndex=514, charCount=1, oldCodePointDisplayWidth=1, newCodePointDisplayWidth=1\nTerminalRow: codePoint=917772, mColumns=98, mText=147, columnToSet=18, mSpaceUsed=98, javaCharDifference=2, oldStartOfColumnIndex=18, oldCharactersUsedForColumn=1, newCharactersUsedForColumn=3, oldNextColumnIndex=19, newNextColumnIndex=21, charCount=2, oldCodePointDisplayWidth=1, newCodePointDisplayWidth=0\nI TerminalRow: codePoint=65024, mColumns=98, mText=147, columnToSet=18, mSpaceUsed=100, javaCharDifference=1, oldStartOfColumnIndex=18, oldCharactersUsedForColumn=3, newCharactersUsedForColumn=4, oldNextColumnIndex=21, newNextColumnIndex=22, charCount=1, oldCodePointDisplayWidth=1, newCodePointDisplayWidth=0\nTerminalRow: codePoint=917772, mColumns=98, mText=147, columnToSet=18, mSpaceUsed=101, javaCharDifference=2, oldStartOfColumnIndex=18, oldCharactersUsedForColumn=4, newCharactersUsedForColumn=6, oldNextColumnIndex=22, newNextColumnIndex=24, charCount=2, oldCodePointDisplayWidth=1, newCodePointDisplayWidth=0\n...\nTerminalRow: codePoint=917959, mColumns=98, mText=32781, columnToSet=18, mSpaceUsed=32763, javaCharDifference=2, oldStartOfColumnIndex=18, oldCharactersUsedForColumn=32666, newCharactersUsedForColumn=32668, oldNextColumnIndex=32684, newNextColumnIndex=32686, charCount=2, oldCodePointDisplayWidth=1, newCodePointDisplayWidth=0\nTerminalRow: codePoint=917939, mColumns=98, mText=32781, columnToSet=18, mSpaceUsed=32765, javaCharDifference=2, oldStartOfColumnIndex=18, oldCharactersUsedForColumn=32668, newCharactersUsedForColumn=32670, oldNextColumnIndex=32686, newNextColumnIndex=32688, charCount=2, oldCodePointDisplayWidth=1, newCodePointDisplayWidth=0\nTerminalRow: codePoint=917961, mColumns=98, mText=32781, columnToSet=18, mSpaceUsed=32767, javaCharDifference=2, oldStartOfColumnIndex=18, oldCharactersUsedForColumn=32670, newCharactersUsedForColumn=32672, oldNextColumnIndex=32688, newNextColumnIndex=32690, charCount=2, oldCodePointDisplayWidth=1, newCodePointDisplayWidth=0\nTerminalRow: codePoint=917804, mColumns=98, mText=32781, columnToSet=18, mSpaceUsed=-32767, javaCharDifference=2, oldStartOfColumnIndex=18, oldCharactersUsedForColumn=1, newCharactersUsedForColumn=3, oldNextColumnIndex=19, newNextColumnIndex=21, charCount=2, oldCodePointDisplayWidth=1, newCodePointDisplayWidth=0\n```\n\n```\njava.lang.ArrayIndexOutOfBoundsException: src.length=32781 srcPos=19 dst.length=32781 dstPos=21 length=-32786\n\tat java.lang.System.arraycopy(System.java:469)\n\tat com.termux.terminal.TerminalRow.setChar(TerminalRow.java:196)\n\tat com.termux.terminal.TerminalBuffer.setChar(TerminalBuffer.java:455)\n\tat com.termux.terminal.TerminalEmulator.emitCodePoint(TerminalEmulator.java:2380)\n\tat com.termux.terminal.TerminalEmulator.processCodePoint(TerminalEmulator.java:624)\n\tat com.termux.terminal.TerminalEmulator.processByte(TerminalEmulator.java:520)\n\tat com.termux.terminal.TerminalEmulator.append(TerminalEmulator.java:487)\n\tat com.termux.terminal.TerminalSession$MainThreadHandler.handleMessage(TerminalSession.java:358)\n\tat android.os.Handler.dispatchMessage(Handler.java:106)\n\tat android.os.Looper.loop(Looper.java:223)\n\tat android.app.ActivityThread.main(ActivityThread.java:7664)\n\tat java.lang.reflect.Method.invoke(Native Method)\n\tat com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:592)\n\tat com.android.internal.os.ZygoteInit.main(ZygoteInit.java:947)\n```\n\nSee also following links for history of related changes to `TerminalRow` for combining characters. Note that jackpal terminal does not crash for above, which termux-app is based on, but changes were done by fornwall in initial commit of termux-app to change the behaviour, hence the crash, but he added the `FIXME: Put a limit of combining characters` comment as a note to solve the current issue in future, which is now.\n\n- https://github.com/jackpal/Android-Terminal-Emulator/commit/9a47042620bec87617f0b4f5d50568535668fe26\n- https://github.com/jackpal/Android-Terminal-Emulator/pull/338\n- https://github.com/termux/termux-app/commit/a18ee58f7a4f56cab6ba4a8cacaa70c4c76379b3#diff-f84d215b18106c037e01986a3968fa54b74691174a78fcc99493f745d3805be5\n\nCloses #3839"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/termux/data/TermuxUrlUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/data/TermuxUrlUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/data/TermuxUrlUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/data/TermuxUrlUtils.java\n@@ -60,7 +60,7 @@ public static Pattern getUrlMatchRegex() {\n         regex_sb.append(\"(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)|\");\n \n         // Host name or domain.\n-        regex_sb.append(\"(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)(?:(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,})))?|\");\n+        regex_sb.append(\"(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)(?:(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*){1,}[a-z\\\\u00a1-\\\\uffff0-9]{1,}))?|\");\n \n         // Just path. Used in case of 'file://' scheme.\n         regex_sb.append(\"/(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)\");",
    "output": "Fixed: Allow numbers and hyphens in domain extension for url selector\n\nCloses #3550"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -590,7 +590,7 @@ private void setToggleKeyboardView() {\n         });\n \n         findViewById(R.id.toggle_keyboard_button).setOnLongClickListener(v -> {\n-            //toggleTerminalToolbar();\n+            toggleTerminalToolbar();\n             return true;\n         });\n     }",
    "output": "Fixed: Fix toggle toolbar not working due to accidental comment of function in a56ed577\n\nCloses #3258"
  },
  {
    "input": "diff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -11,6 +11,7 @@\n import android.os.Build;\n import android.os.Handler;\n import android.os.Looper;\n+import android.os.SystemClock;\n import android.text.Editable;\n import android.text.InputType;\n import android.text.TextUtils;\n@@ -872,13 +873,36 @@ public boolean handleKeyCode(int keyCode, int keyMod) {\n         if (mEmulator != null)\n             mEmulator.setCursorBlinkState(true);\n \n+        if (handleKeyCodeAction(keyCode, keyMod))\n+            return true;\n+\n         TerminalEmulator term = mTermSession.getEmulator();\n         String code = KeyHandler.getCode(keyCode, keyMod, term.isCursorKeysApplicationMode(), term.isKeypadApplicationMode());\n         if (code == null) return false;\n         mTermSession.write(code);\n         return true;\n     }\n \n+    public boolean handleKeyCodeAction(int keyCode, int keyMod) {\n+        boolean shiftDown = (keyMod & KeyHandler.KEYMOD_SHIFT) != 0;\n+\n+        switch (keyCode) {\n+            case KeyEvent.KEYCODE_PAGE_UP:\n+            case KeyEvent.KEYCODE_PAGE_DOWN:\n+                // shift+page_up and shift+page_down should scroll scrollback history instead of\n+                // scrolling command history or changing pages\n+                if (shiftDown) {\n+                    long time = SystemClock.uptimeMillis();\n+                    MotionEvent motionEvent = MotionEvent.obtain(time, time, MotionEvent.ACTION_DOWN, 0, 0, 0);\n+                    doScroll(motionEvent, keyCode == KeyEvent.KEYCODE_PAGE_UP ? -1 : 1);\n+                    motionEvent.recycle();\n+                    return true;\n+                }\n+        }\n+\n+       return false;\n+    }\n+\n     /**\n      * Called when a key is released in the view.\n      *",
    "output": "Fixed: Fix `SHIFT+PAGE_UP` and `SHIFT+PAGE_DOWN` behaviour to scroll `1` line of scrollback history instead of scrolling command history or changing pages\n\nThis will work for both `SHIFT` extra key and hardware keyboards. The `SHIFT` extra key can be long held to lock it in an enabled state and `PGUP` and `PGDN` keys can be long held to repeat scrolling.\n\nCloses #867"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/termux/extrakeys/ExtraKeysConstants.java b/termux-shared/src/main/java/com/termux/shared/termux/extrakeys/ExtraKeysConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/extrakeys/ExtraKeysConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/extrakeys/ExtraKeysConstants.java\n@@ -10,7 +10,10 @@\n public class ExtraKeysConstants {\n \n     /** Defines the repetitive keys that can be passed to {@link ExtraKeysView#setRepetitiveKeys(List)}. */\n-    public static List<String> PRIMARY_REPETITIVE_KEYS = Arrays.asList(\"UP\", \"DOWN\", \"LEFT\", \"RIGHT\", \"BKSP\", \"DEL\");\n+    public static List<String> PRIMARY_REPETITIVE_KEYS = Arrays.asList(\n+        \"UP\", \"DOWN\", \"LEFT\", \"RIGHT\",\n+        \"BKSP\", \"DEL\",\n+        \"PGUP\", \"PGDN\");\n \n \n ",
    "output": "Changed: Add `PGUP` and `PGDN` extra keys to repetitive keys so that long holding them triggers page scrolling instead of having to repeatedly press the key to change pages"
  },
  {
    "input": "diff --git a/terminal-emulator/src/main/java/com/termux/terminal/KeyHandler.java b/terminal-emulator/src/main/java/com/termux/terminal/KeyHandler.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/KeyHandler.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/KeyHandler.java\n@@ -227,9 +227,9 @@ public static String getCode(int keyCode, int keyMode, boolean cursorApp, boolea\n                 return transformForModifiers(\"\\033[3\", keyMode, '~');\n \n             case KEYCODE_PAGE_UP:\n-                return \"\\033[5~\";\n+                return transformForModifiers(\"\\033[5\", keyMode, '~');\n             case KEYCODE_PAGE_DOWN:\n-                return \"\\033[6~\";\n+                return transformForModifiers(\"\\033[6\", keyMode, '~');\n             case KEYCODE_DEL:\n                 String prefix = ((keyMode & KEYMOD_ALT) == 0) ? \"\" : \"\\033\";\n                 // Just do what xterm and gnome-terminal does:",
    "output": "feat(KeyHandler): respect modifiers with PgUp and PgDn"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/termux/settings/preferences/TermuxAPIAppSharedPreferences.java b/termux-shared/src/main/java/com/termux/shared/termux/settings/preferences/TermuxAPIAppSharedPreferences.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/settings/preferences/TermuxAPIAppSharedPreferences.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/settings/preferences/TermuxAPIAppSharedPreferences.java\n@@ -72,4 +72,13 @@ public void setLogLevel(Context context, int logLevel, boolean commitToFile) {\n         SharedPreferenceUtils.setInt(mSharedPreferences, TERMUX_API_APP.KEY_LOG_LEVEL, logLevel, commitToFile);\n     }\n \n+\n+    public int getLastPendingIntentRequestCode() {\n+        return SharedPreferenceUtils.getInt(mSharedPreferences, TERMUX_API_APP.KEY_LAST_PENDING_INTENT_REQUEST_CODE, TERMUX_API_APP.DEFAULT_VALUE_KEY_LAST_PENDING_INTENT_REQUEST_CODE);\n+    }\n+\n+    public void setLastPendingIntentRequestCode(int lastPendingIntentRequestCode) {\n+        SharedPreferenceUtils.setInt(mSharedPreferences, TERMUX_API_APP.KEY_LAST_PENDING_INTENT_REQUEST_CODE, lastPendingIntentRequestCode, true);\n+    }\n+\n }\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/settings/preferences/TermuxPreferenceConstants.java b/termux-shared/src/main/java/com/termux/shared/termux/settings/preferences/TermuxPreferenceConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/settings/preferences/TermuxPreferenceConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/settings/preferences/TermuxPreferenceConstants.java\n@@ -194,6 +194,13 @@ public static final class TERMUX_API_APP {\n          */\n         public static final String KEY_LOG_LEVEL = \"log_level\";\n \n+\n+        /**\n+         * Defines the key for last used PendingIntent request code.\n+         */\n+        public static final String KEY_LAST_PENDING_INTENT_REQUEST_CODE = \"last_pending_intent_request_code\";\n+        public static final int DEFAULT_VALUE_KEY_LAST_PENDING_INTENT_REQUEST_CODE = 0;\n+\n     }\n \n ",
    "output": "Added: Add `KEY_LAST_PENDING_INTENT_REQUEST_CODE` to `TermuxAPIAppSharedPreferences`"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/terminal/TermuxTerminalSessionActivityClient.java b/app/src/main/java/com/termux/app/terminal/TermuxTerminalSessionActivityClient.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxTerminalSessionActivityClient.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxTerminalSessionActivityClient.java\n@@ -183,20 +183,16 @@ public void onSessionFinished(@NonNull TerminalSession finishedSession) {\n     public void onCopyTextToClipboard(@NonNull TerminalSession session, String text) {\n         if (!mActivity.isVisible()) return;\n \n-        ClipboardManager clipboard = (ClipboardManager) mActivity.getSystemService(Context.CLIPBOARD_SERVICE);\n-        clipboard.setPrimaryClip(new ClipData(null, new String[]{\"text/plain\"}, new ClipData.Item(text)));\n+        ShareUtils.copyTextToClipboard(mActivity, text);\n     }\n \n     @Override\n     public void onPasteTextFromClipboard(@Nullable TerminalSession session) {\n         if (!mActivity.isVisible()) return;\n \n-        ClipboardManager clipboard = (ClipboardManager) mActivity.getSystemService(Context.CLIPBOARD_SERVICE);\n-        ClipData clipData = clipboard.getPrimaryClip();\n-        if (clipData != null) {\n-            CharSequence paste = clipData.getItemAt(0).coerceToText(mActivity);\n-            if (!TextUtils.isEmpty(paste)) mActivity.getTerminalView().mEmulator.paste(paste.toString());\n-        }\n+        String text = ShareUtils.getTextStringFromClipboardIfSet(mActivity, true);\n+        if (text != null)\n+            mActivity.getTerminalView().mEmulator.paste(text);\n     }\n \n     @Override\n\ndiff --git a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n@@ -702,9 +702,7 @@ public void showUrlSelection() {\n         // Click to copy url to clipboard:\n         final AlertDialog dialog = new AlertDialog.Builder(mActivity).setItems(urls, (di, which) -> {\n             String url = (String) urls[which];\n-            ClipboardManager clipboard = (ClipboardManager) mActivity.getSystemService(Context.CLIPBOARD_SERVICE);\n-            clipboard.setPrimaryClip(new ClipData(null, new String[]{\"text/plain\"}, new ClipData.Item(url)));\n-            Toast.makeText(mActivity, R.string.msg_select_url_copied_to_clipboard, Toast.LENGTH_LONG).show();\n+            ShareUtils.copyTextToClipboard(mActivity, url, mActivity.getString(R.string.msg_select_url_copied_to_clipboard));\n         }).setTitle(R.string.title_select_url_dialog).create();\n \n         // Long press to open URL:\n@@ -789,12 +787,9 @@ public void doPaste() {\n         if (session == null) return;\n         if (!session.isRunning()) return;\n \n-        ClipboardManager clipboard = (ClipboardManager) mActivity.getSystemService(Context.CLIPBOARD_SERVICE);\n-        ClipData clipData = clipboard.getPrimaryClip();\n-        if (clipData == null) return;\n-        CharSequence paste = clipData.getItemAt(0).coerceToText(mActivity);\n-        if (!TextUtils.isEmpty(paste))\n-            session.getEmulator().paste(paste.toString());\n+        String text = ShareUtils.getTextStringFromClipboardIfSet(mActivity, true);\n+        if (text != null)\n+            session.getEmulator().paste(text);\n     }\n \n }\n\ndiff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -566,11 +566,14 @@ public boolean onTouchEvent(MotionEvent event) {\n                 if (action == MotionEvent.ACTION_DOWN) showContextMenu();\n                 return true;\n             } else if (event.isButtonPressed(MotionEvent.BUTTON_TERTIARY)) {\n-                ClipboardManager clipboard = (ClipboardManager) getContext().getSystemService(Context.CLIPBOARD_SERVICE);\n-                ClipData clipData = clipboard.getPrimaryClip();\n+                ClipboardManager clipboardManager = (ClipboardManager) getContext().getSystemService(Context.CLIPBOARD_SERVICE);\n+                ClipData clipData = clipboardManager.getPrimaryClip();\n                 if (clipData != null) {\n-                    CharSequence paste = clipData.getItemAt(0).coerceToText(getContext());\n-                    if (!TextUtils.isEmpty(paste)) mEmulator.paste(paste.toString());\n+                    ClipData.Item clipItem = clipData.getItemAt(0);\n+                    if (clipItem != null) {\n+                        CharSequence text = clipItem.coerceToText(getContext());\n+                        if (!TextUtils.isEmpty(text)) mEmulator.paste(text.toString());\n+                    }\n                 }\n             } else if (mEmulator.isMouseTrackingActive()) { // BUTTON_PRIMARY.\n                 switch (event.getAction()) {\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/interact/ShareUtils.java b/termux-shared/src/main/java/com/termux/shared/interact/ShareUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/interact/ShareUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/interact/ShareUtils.java\n@@ -12,7 +12,6 @@\n import android.os.Environment;\n \n import androidx.appcompat.app.AppCompatActivity;\n-import androidx.core.content.ContextCompat;\n \n import com.termux.shared.R;\n import com.termux.shared.data.DataUtils;\n@@ -81,27 +80,82 @@ public static void shareText(final Context context, final String subject, final\n         openSystemAppChooser(context, shareTextIntent, DataUtils.isNullOrEmpty(title) ? context.getString(R.string.title_share_with) : title);\n     }\n \n+\n+\n+    /** Wrapper for {@link #copyTextToClipboard(Context, String, String, String)} with `null` `clipDataLabel` and `toastString`. */\n+    public static void copyTextToClipboard(Context context, final String text) {\n+        copyTextToClipboard(context, null, text, null);\n+    }\n+\n+    /** Wrapper for {@link #copyTextToClipboard(Context, String, String, String)} with `null` `clipDataLabel`. */\n+    public static void copyTextToClipboard(Context context, final String text, final String toastString) {\n+        copyTextToClipboard(context, null, text, toastString);\n+    }\n+\n     /**\n-     * Copy the text to clipboard.\n+     * Copy the text to primary clip of the clipboard.\n      *\n      * @param context The context for operations.\n+     * @param clipDataLabel The label to show to the user describing the copied text.\n      * @param text The text to copy.\n      * @param toastString If this is not {@code null} or empty, then a toast is shown if copying to\n      *                    clipboard is successful.\n      */\n-    public static void copyTextToClipboard(final Context context, final String text, final String toastString) {\n+    public static void copyTextToClipboard(Context context, @Nullable final String clipDataLabel,\n+                                           final String text, final String toastString) {\n         if (context == null || text == null) return;\n \n-        final ClipboardManager clipboardManager = ContextCompat.getSystemService(context, ClipboardManager.class);\n+        ClipboardManager clipboardManager = (ClipboardManager) context.getSystemService(Context.CLIPBOARD_SERVICE);\n+        if (clipboardManager == null) return;\n \n-        if (clipboardManager != null) {\n-            clipboardManager.setPrimaryClip(ClipData.newPlainText(null, DataUtils.getTruncatedCommandOutput(text, DataUtils.TRANSACTION_SIZE_LIMIT_IN_BYTES, true, false, false)));\n-            if (toastString != null && !toastString.isEmpty())\n-                Logger.showToast(context, toastString, true);\n-        }\n+        clipboardManager.setPrimaryClip(ClipData.newPlainText(clipDataLabel,\n+            DataUtils.getTruncatedCommandOutput(text, DataUtils.TRANSACTION_SIZE_LIMIT_IN_BYTES,\n+                true, false, false)));\n+\n+        if (toastString != null && !toastString.isEmpty())\n+            Logger.showToast(context, toastString, true);\n     }\n \n+\n+\n     /**\n+     * Wrapper for {@link #getTextFromClipboard(Context, boolean)} that returns primary text {@link String}\n+     * if its set and not empty.\n+     */\n+    @Nullable\n+    public static String getTextStringFromClipboardIfSet(Context context, boolean coerceToText) {\n+        CharSequence textCharSequence = getTextFromClipboard(context, coerceToText);\n+        if (textCharSequence == null) return null;\n+        String textString = textCharSequence.toString();\n+        return !textString.isEmpty() ? textString : null;\n+    }\n+\n+    /**\n+     * Get the text from primary clip of the clipboard.\n+     *\n+     * @param context The context for operations.\n+     * @param coerceToText Whether to call {@link ClipData.Item#coerceToText(Context)} to coerce\n+     *                     non-text data to text.\n+     * @return Returns the {@link CharSequence} of primary text. This will be `null` if failed to get it.\n+     */\n+    @Nullable\n+    public static CharSequence getTextFromClipboard(Context context, boolean coerceToText) {\n+        if (context == null) return null;\n+\n+        ClipboardManager clipboardManager = (ClipboardManager) context.getSystemService(Context.CLIPBOARD_SERVICE);\n+        if (clipboardManager == null) return null;\n+\n+        ClipData clipData = clipboardManager.getPrimaryClip();\n+        if (clipData == null) return null;\n+\n+        ClipData.Item clipItem = clipData.getItemAt(0);\n+        if (clipItem == null) return null;\n+\n+        return coerceToText ? clipItem.coerceToText(context) : clipItem.getText();\n+    }\n+\n+\n+\n      * Open a url.\n      *\n      * @param context The context for operations.",
    "output": "Changed: Use `ShareUtils` to copy and paste text and prevent potential `NPE`\n\nThe `copyTextToClipboard()` method has been updated to pass clip label when copying text to clipboard and `getTextFromClipboard()` and `getTextStringFromClipboardIfSet()` methods have been added to get current clipboard."
  },
  {
    "input": "diff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalBuffer.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalBuffer.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalBuffer.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalBuffer.java\n@@ -54,7 +54,7 @@ public String getSelectedText(int selX1, int selY1, int selX2, int selY2) {\n     }\n \n     public String getSelectedText(int selX1, int selY1, int selX2, int selY2, boolean joinBackLines) {\n-        return getSelectedText(selX1, selY1, selX2, selY2, true, false);\n+        return getSelectedText(selX1, selY1, selX2, selY2, joinBackLines, false);\n     }\n \n     public String getSelectedText(int selX1, int selY1, int selX2, int selY2, boolean joinBackLines, boolean joinFullLines) {",
    "output": "Fixed: Fix shared terminal transcript joining back lines\n\nRegression of 370ac2bd caused in 5f71e3e7 by the (in)famous @trygveaa"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/terminal/io/TermuxTerminalExtraKeys.java b/app/src/main/java/com/termux/app/terminal/io/TermuxTerminalExtraKeys.java\n--- a/app/src/main/java/com/termux/app/terminal/io/TermuxTerminalExtraKeys.java\n+++ b/app/src/main/java/com/termux/app/terminal/io/TermuxTerminalExtraKeys.java\n@@ -96,6 +96,10 @@ public void onTerminalExtraKeyButtonClick(View view, String key, boolean ctrlDow\n         } else if (\"PASTE\".equals(key)) {\n             if(mTermuxTerminalSessionActivityClient != null)\n                 mTermuxTerminalSessionActivityClient.onPasteTextFromClipboard(null);\n+        }  else if (\"SCROLL\".equals(key)) {\n+            TerminalView terminalView = mTermuxTerminalViewClient.getActivity().getTerminalView();\n+            if (terminalView != null && terminalView.mEmulator != null)\n+                terminalView.mEmulator.toggleAutoScrollDisabled();\n         } else {\n             super.onTerminalExtraKeyButtonClick(view, key, ctrlDown, altDown, shiftDown, fnDown);\n         }\n\ndiff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n@@ -252,6 +252,9 @@ public final class TerminalEmulator {\n      */\n     private int mScrollCounter = 0;\n \n+    /** If automatic scrolling of terminal is disabled */\n+    private boolean mAutoScrollDisabled;\n+\n     private byte mUtf8ToFollow, mUtf8Index;\n     private final byte[] mUtf8InputBuffer = new byte[4];\n     private int mLastEmittedCodePoint = -1;\n@@ -2412,6 +2415,15 @@ public void clearScrollCounter() {\n         mScrollCounter = 0;\n     }\n \n+    public boolean isAutoScrollDisabled() {\n+        return mAutoScrollDisabled;\n+    }\n+\n+    public void toggleAutoScrollDisabled() {\n+        mAutoScrollDisabled = !mAutoScrollDisabled;\n+    }\n+\n+\n     /** Reset terminal state so user can interact with it regardless of present state. */\n     public void reset() {\n         setCursorStyle();\n\ndiff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -409,19 +409,29 @@ protected int computeVerticalScrollOffset() {\n     }\n \n     public void onScreenUpdated() {\n+        onScreenUpdated(false);\n+    }\n+\n+    public void onScreenUpdated(boolean skipScrolling) {\n         if (mEmulator == null) return;\n \n         int rowsInHistory = mEmulator.getScreen().getActiveTranscriptRows();\n         if (mTopRow < -rowsInHistory) mTopRow = -rowsInHistory;\n \n-        boolean skipScrolling = false;\n-        if (isSelectingText()) {\n+        if (isSelectingText() || mEmulator.isAutoScrollDisabled()) {\n+\n             // Do not scroll when selecting text.\n             int rowShift = mEmulator.getScrollCounter();\n             if (-mTopRow + rowShift > rowsInHistory) {\n                 // .. unless we're hitting the end of history transcript, in which\n                 // case we abort text selection and scroll to end.\n-                stopTextSelectionMode();\n+                if (isSelectingText())\n+                    stopTextSelectionMode();\n+\n+                if (mEmulator.isAutoScrollDisabled()) {\n+                    mTopRow = -rowsInHistory;\n+                    skipScrolling = true;\n+                }\n             } else {\n                 skipScrolling = true;\n                 mTopRow -= rowShift;\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/extrakeys/ExtraKeysConstants.java b/termux-shared/src/main/java/com/termux/shared/termux/extrakeys/ExtraKeysConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/extrakeys/ExtraKeysConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/extrakeys/ExtraKeysConstants.java\n@@ -90,6 +90,7 @@ public static class EXTRA_KEY_DISPLAY_MAPS {\n             put(\"DRAWER\", \"☰\"); // U+2630 ☰ TRIGRAM FOR HEAVEN not well known but easy to understand\n             put(\"KEYBOARD\", \"⌨\"); // U+2328 ⌨ KEYBOARD not well known but easy to understand\n             put(\"PASTE\", \"⎘\"); // U+2398\n+            put(\"SCROLL\", \"⇳\"); // U+21F3\n         }};\n \n         public static final ExtraKeyDisplayMap LESS_KNOWN_CHARACTERS_DISPLAY = new ExtraKeyDisplayMap() {{",
    "output": "Added: Add `SCROLL` extra key to toggle auto scrolling of terminal to bottom on terminal text updates and termux activity return\n\nThe toggle will apply to each terminal session separately.\n\nCloses #2535"
  },
  {
    "input": "diff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n@@ -2136,6 +2136,8 @@ private void parseArg(int inputByte) {\n                     } else {\n                         value = thisDigit;\n                     }\n+                    if (value > 9999)\n+                        value = 9999;\n                     mArgs[mArgIndex] = value;\n                 }\n                 continueSequence(mEscapeState);",
    "output": "Fixed: Ensure CSI parameter value is not greater than `9999` as per vt510"
  },
  {
    "input": "diff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n@@ -126,6 +126,10 @@ public final class TerminalEmulator {\n     private String mTitle;\n     private final Stack<String> mTitleStack = new Stack<>();\n \n+    /** If processing first character of first parameter of {@link #ESC_CSI}. */\n+    private boolean mIsCSIStart;\n+    /** The last character processed of a parameter of {@link #ESC_CSI}. */\n+    private Integer mLastCSIArg;\n \n     /** The cursor position. Between (0,0) and (mRows-1, mColumns-1). */\n     private int mCursorRow, mCursorCol;\n@@ -1386,6 +1390,8 @@ private void doEsc(int b) {\n                 break;\n             case '[':\n                 continueSequence(ESC_CSI);\n+                mIsCSIStart = true;\n+                mLastCSIArg = null;\n                 break;\n             case '=': // DECKPAM\n                 setDecsetinternalBit(DECSET_BIT_APPLICATION_KEYPAD, true);\n@@ -2093,28 +2099,55 @@ private void scrollDownOneLine() {\n         }\n     }\n \n-    /** Process the next ASCII character of a parameter. */\n-    private void parseArg(int b) {\n-        if (b >= '0' && b <= '9') {\n-            if (mArgIndex < mArgs.length) {\n-                int oldValue = mArgs[mArgIndex];\n-                int thisDigit = b - '0';\n-                int value;\n-                if (oldValue >= 0) {\n-                    value = oldValue * 10 + thisDigit;\n-                } else {\n-                    value = thisDigit;\n-                }\n-                mArgs[mArgIndex] = value;\n+    /**\n+     * Process the next ASCII character of a parameter.\n+     *\n+     * Parameter characters modify the action or interpretation of the sequence. You can use up to\n+     * 16 parameters per sequence. You must use the ; character to separate parameters.\n+     * All parameters are unsigned, positive decimal integers, with the most significant\n+     * digit sent first. Any parameter greater than 9999 (decimal) is set to 9999\n+     * (decimal). If you do not specify a value, a 0 value is assumed. A 0 value\n+     * or omitted parameter indicates a default value for the sequence. For most\n+     * sequences, the default value is 1.\n+     *\n+     * https://vt100.net/docs/vt510-rm/chapter4.html#S4.3.3\n+     * */\n+    private void parseArg(int inputByte) {\n+        int[] bytes = new int[]{inputByte};\n+        // Only doing this for ESC_CSI and not for other ESC_CSI_* since they seem to be using their\n+        // own defaults with getArg*() calls, but there may be missed cases\n+        if (mEscapeState == ESC_CSI) {\n+            if ((mIsCSIStart && inputByte == ';') || // If sequence starts with a ; character, like \\033[;m\n+                (!mIsCSIStart && mLastCSIArg != null && mLastCSIArg == ';'  && inputByte == ';')) {  // If sequence contains sequential ; characters, like \\033[;;m\n+                bytes = new int[]{'0', ';'}; // Assume 0 was passed\n             }\n-            continueSequence(mEscapeState);\n-        } else if (b == ';') {\n-            if (mArgIndex < mArgs.length) {\n-                mArgIndex++;\n+        }\n+\n+        mIsCSIStart = false;\n+\n+        for (int b : bytes) {\n+            if (b >= '0' && b <= '9') {\n+                if (mArgIndex < mArgs.length) {\n+                    int oldValue = mArgs[mArgIndex];\n+                    int thisDigit = b - '0';\n+                    int value;\n+                    if (oldValue >= 0) {\n+                        value = oldValue * 10 + thisDigit;\n+                    } else {\n+                        value = thisDigit;\n+                    }\n+                    mArgs[mArgIndex] = value;\n+                }\n+                continueSequence(mEscapeState);\n+            } else if (b == ';') {\n+                if (mArgIndex < mArgs.length) {\n+                    mArgIndex++;\n+                }\n+                continueSequence(mEscapeState);\n+            } else {\n+                unknownSequence(b);\n             }\n-            continueSequence(mEscapeState);\n-        } else {\n-            unknownSequence(b);\n+            mLastCSIArg = b;\n         }\n     }\n \n\ndiff --git a/terminal-emulator/src/test/java/com/termux/terminal/TerminalTest.java b/terminal-emulator/src/test/java/com/termux/terminal/TerminalTest.java\n--- a/terminal-emulator/src/test/java/com/termux/terminal/TerminalTest.java\n+++ b/terminal-emulator/src/test/java/com/termux/terminal/TerminalTest.java\n@@ -151,6 +151,19 @@ public void testSelectGraphics() {\n \t\tassertEquals(TextStyle.COLOR_INDEX_FOREGROUND, mTerminal.mForeColor);\n \t\tassertEquals(TextStyle.COLOR_INDEX_BACKGROUND, mTerminal.mBackColor);\n \n+\t\t// Test CSI resetting to default if sequence starts with ; or has sequential ;;\n+        // Check TerminalEmulator.parseArg()\n+        enterString(\"\\033[31m\\033[m\");\n+        assertEquals(TextStyle.COLOR_INDEX_FOREGROUND, mTerminal.mForeColor);\n+        enterString(\"\\033[31m\\033[;m\");\n+        assertEquals(TextStyle.COLOR_INDEX_FOREGROUND, mTerminal.mForeColor);\n+        enterString(\"\\033[31m\\033[0m\");\n+        assertEquals(TextStyle.COLOR_INDEX_FOREGROUND, mTerminal.mForeColor);\n+        enterString(\"\\033[31m\\033[0;m\");\n+        assertEquals(TextStyle.COLOR_INDEX_FOREGROUND, mTerminal.mForeColor);\n+        enterString(\"\\033[31;;m\");\n+        assertEquals(TextStyle.COLOR_INDEX_FOREGROUND, mTerminal.mForeColor);\n+\n \t\t// 256 colors:\n \t\tenterString(\"\\033[38;5;119m\");\n \t\tassertEquals(119, mTerminal.mForeColor);",
    "output": "Fixed: Fix CSI parameters parsing like for SGR sequences that start with a `;` or have sequential `;` characters\n\nhttps://vt100.net/docs/vt510-rm/chapter4.html#S4.3.3\n\nhttps://en.wikipedia.org/wiki/ANSI_escape_code#CSI_(Control_Sequence_Introducer)_sequences\n\nCredits for finding the issue belongs to @Screwtapello\n\nhttps://github.com/mawww/kakoune/issues/4339#issuecomment-916980723\n\nCloses #2272, Closes mawww/kakoune#4339"
  },
  {
    "input": "diff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalColorScheme.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalColorScheme.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalColorScheme.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalColorScheme.java\n@@ -71,6 +71,7 @@ private void reset() {\n \n     public void updateWith(Properties props) {\n         reset();\n+        boolean cursorPropExists = false;\n         for (Map.Entry<Object, Object> entries : props.entrySet()) {\n             String key = (String) entries.getKey();\n             String value = (String) entries.getValue();\n@@ -82,6 +83,7 @@ public void updateWith(Properties props) {\n                 colorIndex = TextStyle.COLOR_INDEX_BACKGROUND;\n             } else if (key.equals(\"cursor\")) {\n                 colorIndex = TextStyle.COLOR_INDEX_CURSOR;\n+                cursorPropExists = true;\n             } else if (key.startsWith(\"color\")) {\n                 try {\n                     colorIndex = Integer.parseInt(key.substring(5));\n@@ -98,6 +100,27 @@ public void updateWith(Properties props) {\n \n             mDefaultColors[colorIndex] = colorValue;\n         }\n+\n+        if (!cursorPropExists)\n+            setCursorColorForBackground();\n+    }\n+\n+    /**\n+     * If the \"cursor\" color is not set by user, we need to decide on the appropriate color that will\n+     * be visible on the current terminal background. White will not be visible on light backgrounds\n+     * and black won't be visible on dark backgrounds. So we find the perceived brightness of the\n+     * background color and if its below the threshold (too dark), we use white cursor and if its\n+     * above (too bright), we use black cursor.\n+     */\n+    public void setCursorColorForBackground() {\n+        int backgroundColor = mDefaultColors[TextStyle.COLOR_INDEX_BACKGROUND];\n+        int brightness = TerminalColors.getPerceivedBrightnessOfColor(backgroundColor);\n+        if (brightness > 0) {\n+            if (brightness < 130)\n+                mDefaultColors[TextStyle.COLOR_INDEX_CURSOR] = 0xffffffff;\n+            else\n+                mDefaultColors[TextStyle.COLOR_INDEX_CURSOR] = 0xff000000;\n+        }\n     }\n \n }\n\ndiff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalColors.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalColors.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalColors.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalColors.java\n@@ -1,5 +1,7 @@\n package com.termux.terminal;\n \n+import android.graphics.Color;\n+\n /** Current terminal colors (if different from default). */\n public final class TerminalColors {\n \n@@ -73,4 +75,22 @@ public void tryParseColor(int intoIndex, String textParameter) {\n         if (c != 0) mCurrentColors[intoIndex] = c;\n     }\n \n+    /**\n+     * Get the perceived brightness of the color based on its RGB components.\n+     *\n+     * https://www.nbdtech.com/Blog/archive/2008/04/27/Calculating-the-Perceived-Brightness-of-a-Color.aspx\n+     * http://alienryderflex.com/hsp.html\n+     *\n+     * @param color The color code int.\n+     * @return Returns value between 0-255.\n+     */\n+    public static int getPerceivedBrightnessOfColor(int color) {\n+        return (int)\n+            Math.floor(Math.sqrt(\n+                Math.pow(Color.red(color), 2) * 0.241 +\n+                    Math.pow(Color.green(color), 2) * 0.691 +\n+                    Math.pow(Color.blue(color), 2) * 0.068\n+            ));\n+    }\n+\n }",
    "output": "Changed: Use black or white cursor color based on terminal background instead of always white if colors.properties didn't have cursor color set\n\nCredit for algorithm link belong to @Jamie-Landeg-Jones\n\nCloses #2653"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/reflection/ReflectionUtils.java b/termux-shared/src/main/java/com/termux/shared/reflection/ReflectionUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/reflection/ReflectionUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/reflection/ReflectionUtils.java\n@@ -28,7 +28,12 @@ public class ReflectionUtils {\n     public static void bypassHiddenAPIReflectionRestrictions() {\n         if (!HIDDEN_API_REFLECTION_RESTRICTIONS_BYPASSED && Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {\n             Logger.logDebug(LOG_TAG, \"Bypassing android hidden api reflection restrictions\");\n-            HiddenApiBypass.addHiddenApiExemptions(\"\");\n+            try {\n+                HiddenApiBypass.addHiddenApiExemptions(\"\");\n+            } catch (Throwable t) {\n+                Logger.logStackTraceWithMessage(LOG_TAG, \"Failed to bypass hidden API reflection restrictions\", t);\n+            }\n+\n             HIDDEN_API_REFLECTION_RESTRICTIONS_BYPASSED = true;\n         }\n     }",
    "output": "Fixed: Catch exceptions if failed to bypass hidden API restrictions\n\nAttempting to bypass restrictions while tests are running will fail due to call to `TermuxApplication.onCreate()` -> `TermuxShellEnvironment.init()` -> `SELinuxUtils.getContext()`"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/interact/MessageDialogUtils.java b/termux-shared/src/main/java/com/termux/shared/interact/MessageDialogUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/interact/MessageDialogUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/interact/MessageDialogUtils.java\n@@ -4,11 +4,14 @@\n import android.app.AlertDialog;\n import android.content.Context;\n import android.content.DialogInterface;\n+import android.graphics.Color;\n import android.view.LayoutInflater;\n import android.view.View;\n+import android.widget.Button;\n import android.widget.TextView;\n \n import com.termux.shared.R;\n+import com.termux.shared.logger.Logger;\n \n public class MessageDialogUtils {\n \n@@ -74,7 +77,19 @@ public static void showMessage(Context context, String titleText, String message\n         if (onDismiss != null)\n             builder.setOnDismissListener(onDismiss);\n \n-        builder.show();\n+        AlertDialog dialog = builder.create();\n+\n+        dialog.setOnShowListener(dialogInterface -> {\n+            Logger.logError(\"dialog\");\n+            Button button = dialog.getButton(AlertDialog.BUTTON_POSITIVE);\n+            if (button != null)\n+                button.setTextColor(Color.BLACK);\n+            button = dialog.getButton(AlertDialog.BUTTON_NEGATIVE);\n+            if (button != null)\n+                button.setTextColor(Color.BLACK);\n+        });\n+\n+        dialog.show();\n     }\n \n     public static void exitAppWithErrorMessage(Context context, String titleText, String messageText) {",
    "output": "Fixed: Fix message dialog button text not showing in day mode due to white text"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/android/PackageUtils.java b/termux-shared/src/main/java/com/termux/shared/android/PackageUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/android/PackageUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/android/PackageUtils.java\n@@ -710,6 +710,13 @@ public static String isAppInstalled(@NonNull final Context context, String appNa\n     }\n \n \n+    /** Wrapper for {@link #setComponentState(Context, String, String, boolean, String, boolean, boolean)} with\n+     * {@code alwaysShowToast} {@code true}. */\n+    public static String setComponentState(@NonNull final Context context, @NonNull String packageName,\n+                                           @NonNull String className, boolean newState, String toastString,\n+                                           boolean showErrorMessage) {\n+        return setComponentState(context, packageName, className, newState, toastString, showErrorMessage, true);\n+    }\n \n     /**\n      * Enable or disable a {@link ComponentName} with a call to\n@@ -718,28 +725,46 @@ public static String isAppInstalled(@NonNull final Context context, String appNa\n      * @param context The {@link Context} for operations.\n      * @param packageName The package name of the component.\n      * @param className The {@link Class} name of the component.\n-     * @param state If component should be enabled or disabled.\n+     * @param newState If component should be enabled or disabled.\n      * @param toastString If this is not {@code null} or empty, then a toast before setting state.\n      * @param showErrorMessage If an error message toast should be shown.\n+     * @param alwaysShowToast If toast should always be shown even if current state matches new state.\n      * @return Returns the errmsg if failed to set state, otherwise {@code null}.\n      */\n     @Nullable\n     public static String setComponentState(@NonNull final Context context, @NonNull String packageName,\n-                                           @NonNull String className, boolean state, String toastString,\n-                                           boolean showErrorMessage) {\n+                                           @NonNull String className, boolean newState, String toastString,\n+                                           boolean alwaysShowToast, boolean showErrorMessage) {\n         try {\n             PackageManager packageManager = context.getPackageManager();\n             if (packageManager != null) {\n-                ComponentName componentName = new ComponentName(packageName, className);\n+                if (toastString != null && alwaysShowToast) {\n+                    Logger.showToast(context, toastString, true);\n+                    toastString = null;\n+                }\n+\n+                Boolean currentlyDisabled = PackageUtils.isComponentDisabled(context, packageName, className, false);\n+                if (currentlyDisabled == null)\n+                    throw new UnsupportedOperationException(\"Failed to find if component currently disabled\");\n+\n+                Boolean setState = null;\n+                if (newState && currentlyDisabled)\n+                    setState = true;\n+                else if (!newState && !currentlyDisabled)\n+                    setState = false;\n+\n+                if (setState == null) return null;\n+\n                 if (toastString != null) Logger.showToast(context, toastString, true);\n+                ComponentName componentName = new ComponentName(packageName, className);\n                 packageManager.setComponentEnabledSetting(componentName,\n-                    state ? PackageManager.COMPONENT_ENABLED_STATE_ENABLED : PackageManager.COMPONENT_ENABLED_STATE_DISABLED,\n+                    setState ? PackageManager.COMPONENT_ENABLED_STATE_ENABLED : PackageManager.COMPONENT_ENABLED_STATE_DISABLED,\n                     PackageManager.DONT_KILL_APP);\n             }\n             return null;\n         } catch (final Exception e) {\n             String errmsg = context.getString(\n-                state ? R.string.error_enable_component_failed : R.string.error_disable_component_failed,\n+                newState ? R.string.error_enable_component_failed : R.string.error_disable_component_failed,\n                 packageName, className) + \": \" + e.getMessage();\n             if (showErrorMessage)\n                 Logger.showToast(context, errmsg, true);",
    "output": "Changed: Do not re-set component state if current state equals new state in `PackageUtils.setComponentState()`"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/terminal/TermuxTerminalSessionServiceClient.java b/app/src/main/java/com/termux/app/terminal/TermuxTerminalSessionServiceClient.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxTerminalSessionServiceClient.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxTerminalSessionServiceClient.java\n@@ -21,4 +21,11 @@ public TermuxTerminalSessionServiceClient(TermuxService service) {\n         this.mService = service;\n     }\n \n+    @Override\n+    public void setTerminalShellPid(@NonNull TerminalSession terminalSession, int pid) {\n+        TermuxSession termuxSession = mService.getTermuxSessionForTerminalSession(terminalSession);\n+        if (termuxSession != null)\n+            termuxSession.getExecutionCommand().mPid = pid;\n+    }\n+\n }",
    "output": "Fixed: Fix `ExecutionCommand.pid` not being set for first and background terminal sessions since `TermuxTerminalSessionClientBase` was still being used instead of `TermuxTerminalSessionActivityClient`\n\nThis commit adds onto 841c41bf and implements the `setTerminalShellPid()` interface method in `TermuxTerminalSessionServiceClient` so that `pid` is set properly for all cases."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/activities/SettingsActivity.java b/app/src/main/java/com/termux/app/activities/SettingsActivity.java\n--- a/app/src/main/java/com/termux/app/activities/SettingsActivity.java\n+++ b/app/src/main/java/com/termux/app/activities/SettingsActivity.java\n@@ -120,7 +120,7 @@ public void run() {\n \n                             StringBuilder aboutString = new StringBuilder();\n                             aboutString.append(TermuxUtils.getAppInfoMarkdownString(context, TermuxUtils.AppInfoMode.TERMUX_AND_PLUGIN_PACKAGES));\n-                            aboutString.append(\"\\n\\n\").append(AndroidUtils.getDeviceInfoMarkdownString(context));\n+                            aboutString.append(\"\\n\\n\").append(AndroidUtils.getDeviceInfoMarkdownString(context, true));\n                             aboutString.append(\"\\n\\n\").append(TermuxUtils.getImportantLinksMarkdownString(context));\n \n                             String userActionName = UserAction.ABOUT.getName();\n\ndiff --git a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n@@ -755,7 +755,7 @@ public void run() {\n                     reportString.append(\"\\n\\n\").append(TermuxUtils.getAppInfoMarkdownString(mActivity, TermuxUtils.AppInfoMode.TERMUX_PACKAGE));\n                 }\n \n-                reportString.append(\"\\n\\n\").append(AndroidUtils.getDeviceInfoMarkdownString(mActivity));\n+                reportString.append(\"\\n\\n\").append(AndroidUtils.getDeviceInfoMarkdownString(mActivity, true));\n \n                 if (TermuxBootstrap.isAppPackageManagerAPT()) {\n                     String termuxAptInfo = TermuxUtils.geAPTInfoMarkdownString(mActivity);\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/android/AndroidUtils.java b/termux-shared/src/main/java/com/termux/shared/android/AndroidUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/android/AndroidUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/android/AndroidUtils.java\n@@ -9,6 +9,7 @@\n import androidx.annotation.NonNull;\n \n import com.google.common.base.Joiner;\n+import com.termux.shared.R;\n import com.termux.shared.data.DataUtils;\n import com.termux.shared.logger.Logger;\n import com.termux.shared.markdown.MarkdownUtils;\n@@ -50,7 +51,7 @@ public static String getAppInfoMarkdownString(@NonNull final Context context) {\n             AndroidUtils.appendPropertyToMarkdown(markdownString,\"FILES_DIR\", filesDir);\n \n \n-        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.N ) {\n+        if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n             Long userId = PackageUtils.getUserIdForPackage(context);\n             if (userId == null || userId != 0)\n                 AndroidUtils.appendPropertyToMarkdown(markdownString, \"USER_ID\", userId);\n@@ -99,13 +100,18 @@ public static String getAppInfoMarkdownString(@NonNull final Context context, @N\n         return markdownString.toString();\n     }\n \n+    public static String getDeviceInfoMarkdownString(@NonNull final Context context) {\n+        return getDeviceInfoMarkdownString(context, false);\n+    }\n+\n     /**\n      * Get a markdown {@link String} for the device info.\n      *\n      * @param context The context for operations.\n+     * @param addPhantomProcessesInfo If phantom processes info should be added on Android >= 12.\n      * @return Returns the markdown {@link String}.\n      */\n-    public static String getDeviceInfoMarkdownString(@NonNull final Context context) {\n+    public static String getDeviceInfoMarkdownString(@NonNull final Context context, boolean addPhantomProcessesInfo) {\n         // Some properties cannot be read with {@link System#getProperty(String)} but can be read\n         // directly by running getprop command\n         Properties systemProperties = getSystemProperties();\n@@ -133,8 +139,16 @@ public static String getDeviceInfoMarkdownString(@NonNull final Context context)\n         appendPropertyToMarkdown(markdownString, \"TAGS\", Build.TAGS);\n \n         // If on Android >= 12\n-        if (Build.VERSION.SDK_INT > Build.VERSION_CODES.R)\n-            appendPropertyToMarkdown(markdownString, \"MONITOR_PHANTOM_PROCS\", FeatureFlagUtils.getFeatureFlagValueString(context, FeatureFlagUtils.SETTINGS_ENABLE_MONITOR_PHANTOM_PROCS).getName());\n+        if (Build.VERSION.SDK_INT > Build.VERSION_CODES.R) {\n+            Integer maxPhantomProcesses = PhantomProcessUtils.getActivityManagerMaxPhantomProcesses(context);\n+            if (maxPhantomProcesses != null)\n+                appendPropertyToMarkdown(markdownString, \"MAX_PHANTOM_PROCESSES\", maxPhantomProcesses);\n+            else\n+                appendLiteralPropertyToMarkdown(markdownString, \"MAX_PHANTOM_PROCESSES\", \"- (*\" + context.getString(R.string.msg_requires_dump_and_package_usage_stats_permissions) + \"*)\");\n+\n+            appendPropertyToMarkdown(markdownString, \"MONITOR_PHANTOM_PROCS\", PhantomProcessUtils.getFeatureFlagMonitorPhantomProcsValueString(context).getName());\n+            appendPropertyToMarkdown(markdownString, \"DEVICE_CONFIG_SYNC_DISABLED\", PhantomProcessUtils.getSettingsGlobalDeviceConfigSyncDisabled(context));\n+        }\n \n         markdownString.append(\"\\n\\n### Hardware\\n\");\n         appendPropertyToMarkdown(markdownString, \"MANUFACTURER\", Build.MANUFACTURER);\n@@ -222,6 +236,14 @@ public static String getPropertyMarkdown(String label, Object value) {\n         return MarkdownUtils.getSingleLineMarkdownStringEntry(label, value, \"-\");\n     }\n \n+    public static void appendLiteralPropertyToMarkdown(StringBuilder markdownString, String label, Object value) {\n+        markdownString.append(\"\\n\").append(getLiteralPropertyMarkdown(label, value));\n+    }\n+\n+    public static String getLiteralPropertyMarkdown(String label, Object value) {\n+        return MarkdownUtils.getLiteralSingleLineMarkdownStringEntry(label, value, \"-\");\n+    }\n+\n \n \n     public static String getCurrentTimeStamp() {\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/markdown/MarkdownUtils.java b/termux-shared/src/main/java/com/termux/shared/markdown/MarkdownUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/markdown/MarkdownUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/markdown/MarkdownUtils.java\n@@ -106,6 +106,10 @@ public static int getMaxConsecutiveBackTicksCount(String string) {\n \n \n \n+    public static String getLiteralSingleLineMarkdownStringEntry(String label, Object object, String def) {\n+        return \"**\" + label + \"**: \" + (object != null ? object.toString() : def) +  \"  \";\n+    }\n+\n     public static String getSingleLineMarkdownStringEntry(String label, Object object, String def) {\n         if (object != null)\n             return \"**\" + label + \"**: \" + getMarkdownCodeForString(object.toString(), false) +  \"  \";\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/crash/TermuxCrashUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/crash/TermuxCrashUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/crash/TermuxCrashUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/crash/TermuxCrashUtils.java\n@@ -324,7 +324,7 @@ public static void sendCrashReportNotification(final Context currentPackageConte\n             reportString.append(\"\\n\\n\").append(TermuxUtils.getAppInfoMarkdownString(currentPackageContext, appInfoMode, currentPackageName));\n \n         if (addDeviceInfo)\n-            reportString.append(\"\\n\\n\").append(AndroidUtils.getDeviceInfoMarkdownString(currentPackageContext));\n+            reportString.append(\"\\n\\n\").append(AndroidUtils.getDeviceInfoMarkdownString(currentPackageContext, true));\n \n         String userActionName = UserAction.CRASH_REPORT.getName();\n \n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/plugins/TermuxPluginUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/plugins/TermuxPluginUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/plugins/TermuxPluginUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/plugins/TermuxPluginUtils.java\n@@ -362,7 +362,7 @@ public static void sendPluginCommandErrorNotification(Context currentPackageCont\n                 callingPackageName != null ? callingPackageName : currentPackageName));\n \n         if (addDeviceInfo)\n-            reportString.append(\"\\n\\n\").append(AndroidUtils.getDeviceInfoMarkdownString(currentPackageContext));\n+            reportString.append(\"\\n\\n\").append(AndroidUtils.getDeviceInfoMarkdownString(currentPackageContext, true));\n \n         String userActionName = UserAction.PLUGIN_EXECUTION_COMMAND.getName();\n ",
    "output": "Added: Add `MAX_PHANTOM_PROCESSES` and `DEVICE_CONFIG_SYNC_DISABLED` value to device info output like shown in Termux About page\n\nRelated commit b6963035"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/android/FeatureFlagUtils.java b/termux-shared/src/main/java/com/termux/shared/android/FeatureFlagUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/android/FeatureFlagUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/android/FeatureFlagUtils.java\n@@ -80,19 +80,6 @@ public String getName() {\n \n     public static final String FEATURE_FLAGS_CLASS = \"android.util.FeatureFlagUtils\";\n \n-    /**\n-     * If set to false, then will disable trimming of phantom process and processes using excessive\n-     * CPU. Flag is available on Pixel Android 12L beta 3 and Android 13. Availability on other\n-     * devices will depend on if other vendors merged the 09dcdad5 commit or not in their releases\n-     * and if they actually want to support the flag.\n-     *\n-     * https://github.com/termux/termux-app/issues/2366\n-     * https://issuetracker.google.com/u/1/issues/205156966#comment28\n-     * https://cs.android.com/android/_/android/platform/frameworks/base/+/09dcdad5\n-     * https://github.com/agnostic-apollo/Android-Docs/tree/master/ocs/apps/processes/phantom-cached-and-empty-processes.md\n-     */\n-    public static final String SETTINGS_ENABLE_MONITOR_PHANTOM_PROCS = \"settings_enable_monitor_phantom_procs\";\n-\n     private static final String LOG_TAG = \"FeatureFlagUtils\";\n \n     /**\n@@ -133,6 +120,7 @@ public static Boolean featureFlagExists(@NonNull String feature) {\n      * @param feature The {@link String} name for feature.\n      * @return Returns {@link FeatureFlagValue}.\n      */\n+    @NonNull\n     public static FeatureFlagValue getFeatureFlagValueString(@NonNull Context context, @NonNull String feature) {\n         Boolean featureFlagExists = featureFlagExists(feature);\n         if (featureFlagExists == null) {\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/android/PhantomProcessUtils.java b/termux-shared/src/main/java/com/termux/shared/android/PhantomProcessUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/android/PhantomProcessUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/android/PhantomProcessUtils.java\n@@ -0,0 +1,115 @@\n+package com.termux.shared.android;\n+\n+import android.Manifest;\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.termux.shared.logger.Logger;\n+import com.termux.shared.shell.command.environment.AndroidShellEnvironment;\n+import com.termux.shared.shell.command.ExecutionCommand;\n+import com.termux.shared.shell.command.runner.app.AppShell;\n+\n+/**\n+ * Utils for phantom processes added in android 12.\n+ *\n+ * https://github.com/termux/termux-app/issues/2366\n+ * https://issuetracker.google.com/u/1/issues/205156966#comment28\n+ * https://cs.android.com/android/_/android/platform/frameworks/base/+/09dcdad5\n+ * https://github.com/agnostic-apollo/Android-Docs/tree/master/ocs/apps/processes/phantom-cached-and-empty-processes.md\n+ */\n+public class PhantomProcessUtils {\n+\n+    private static final String LOG_TAG = \"PhantomProcessUtils\";\n+\n+    /**\n+     * If feature flag set to false, then will disable trimming of phantom process and processes using\n+     * excessive CPU. Flag is available on Pixel Android 12L beta 3 and Android 13. Availability on\n+     * other devices will depend on if other vendors merged the 09dcdad5 commit or not in their releases\n+     * and if they actually want to support the flag. Check {@link FeatureFlagUtils} javadocs for\n+     * more details.\n+     */\n+    public static final String FEATURE_FLAG_SETTINGS_ENABLE_MONITOR_PHANTOM_PROCS = \"settings_enable_monitor_phantom_procs\";\n+\n+    /**\n+     * Maximum number of allowed phantom processes. It is also used as the label for the currently\n+     * enforced ActivityManagerConstants MAX_PHANTOM_PROCESSES value in the `dumpsys activity settings`\n+     * output.\n+     *\n+     * https://cs.android.com/android/platform/superproject/+/android-12.0.0_r4:frameworks/base/services/core/java/com/android/server/am/ActivityManagerConstants.java;l=574\n+     * https://cs.android.com/android/platform/superproject/+/android-12.0.0_r4:frameworks/base/services/core/java/com/android/server/am/ActivityManagerConstants.java;l=172\n+     */\n+    public static final String KEY_MAX_PHANTOM_PROCESSES = \"max_phantom_processes\";\n+\n+    /**\n+     * Whether or not syncs (bulk set operations) for DeviceConfig are disabled currently. The value\n+     * is boolean (1 or 0). The value '1' means that DeviceConfig#setProperties(DeviceConfig.Properties)\n+     * will return {@code false}.\n+     *\n+     * https://cs.android.com/android/platform/superproject/+/android-12.0.0_r4:frameworks/base/core/java/android/provider/DeviceConfig.java\n+     * https://cs.android.com/android/platform/superproject/+/android-12.0.0_r4:frameworks/base/packages/SettingsProvider/src/com/android/providers/settings/SettingsProvider.java;l=1186\n+     * https://cs.android.com/android/platform/superproject/+/android-12.0.0_r4:frameworks/base/packages/SettingsProvider/src/com/android/providers/settings/SettingsProvider.java;l=1142\n+     */\n+    public static final String SETTINGS_GLOBAL_DEVICE_CONFIG_SYNC_DISABLED = \"device_config_sync_disabled\";\n+\n+    /**\n+     * Get {@link #FEATURE_FLAG_SETTINGS_ENABLE_MONITOR_PHANTOM_PROCS} feature flag value.\n+     *\n+     * @param context The {@link Context} for operations.\n+     * @return Returns {@link FeatureFlagUtils.FeatureFlagValue}.\n+     */\n+    @NonNull\n+    public static FeatureFlagUtils.FeatureFlagValue getFeatureFlagMonitorPhantomProcsValueString(@NonNull Context context) {\n+        return FeatureFlagUtils.getFeatureFlagValueString(context, FEATURE_FLAG_SETTINGS_ENABLE_MONITOR_PHANTOM_PROCS);\n+    }\n+\n+    /**\n+     * Get currently enforced ActivityManagerConstants MAX_PHANTOM_PROCESSES value, defaults to 32.\n+     * Can be changed by modifying device config activity_manager namespace \"max_phantom_processes\" value.\n+     *\n+     * @param context The {@link Context} for operations.\n+     * @return Returns {@link Integer}.\n+     */\n+    @Nullable\n+    public static Integer getActivityManagerMaxPhantomProcesses(@NonNull Context context) {\n+        if (!PermissionUtils.checkPermissions(context, new String[]{Manifest.permission.DUMP, Manifest.permission.PACKAGE_USAGE_STATS})) {\n+            return null;\n+        }\n+\n+        // Dumpsys logs the currently enforced MAX_PHANTOM_PROCESSES value and not the device config setting.\n+        String script = \"/system/bin/dumpsys activity settings | /system/bin/grep -iE '^[\\t ]+\" + KEY_MAX_PHANTOM_PROCESSES + \"=[0-9]+$' | /system/bin/cut -d = -f2\";\n+        ExecutionCommand executionCommand = new ExecutionCommand(-1, \"/system/bin/sh\", null,\n+            script + \"\\n\", \"/\", ExecutionCommand.Runner.APP_SHELL.getName(), true);\n+        executionCommand.commandLabel = \" ActivityManager \" + KEY_MAX_PHANTOM_PROCESSES + \" Command\";\n+        executionCommand.backgroundCustomLogLevel = Logger.LOG_LEVEL_OFF;\n+        AppShell appShell = AppShell.execute(context, executionCommand, null, new AndroidShellEnvironment(), null, true);\n+        boolean stderrSet = !executionCommand.resultData.stderr.toString().isEmpty();\n+        if (appShell == null || !executionCommand.isSuccessful() || executionCommand.resultData.exitCode != 0 || stderrSet) {\n+            Logger.logErrorExtended(LOG_TAG, executionCommand.toString());\n+            return null;\n+        }\n+\n+        try {\n+            return Integer.parseInt(executionCommand.resultData.stdout.toString().trim());\n+        } catch (NumberFormatException e) {\n+            Logger.logStackTraceWithMessage(LOG_TAG, \"The \" + executionCommand.commandLabel + \" did not return a valid integer\", e);\n+            Logger.logErrorExtended(LOG_TAG, executionCommand.toString());\n+        }\n+\n+        return null;\n+    }\n+\n+    /**\n+     * Get {@link #SETTINGS_GLOBAL_DEVICE_CONFIG_SYNC_DISABLED} settings value.\n+     *\n+     * @param context The {@link Context} for operations.\n+     * @return Returns {@link Integer}.\n+     */\n+    @Nullable\n+    public static Integer getSettingsGlobalDeviceConfigSyncDisabled(@NonNull Context context) {\n+        return (Integer) SettingsProviderUtils.getSettingsValue(context, SettingsProviderUtils.SettingNamespace.GLOBAL,\n+            SettingsProviderUtils.SettingType.INT, SETTINGS_GLOBAL_DEVICE_CONFIG_SYNC_DISABLED, null);\n+    }\n+\n+}",
    "output": "Added: Add `PhantomProcessUtils` to get phantom processes related settings values\n\n- `settings_enable_monitor_phantom_procs` feature flag value can be received with a call to `getFeatureFlagMonitorPhantomProcsValueString()`. Likely only available on Android `12L+`.\n\n- `max_phantom_processes` value from `dumpsys activity settings` output can be received with a call to `getActivityManagerMaxPhantomProcesses()`. Requires granting Termux `DUMP` and `PACKAGE_USAGE_STATS` permission. Can be granted with `adb shell \"pm grant com.termux android.permission.PACKAGE_USAGE_STATS; pm grant com.termux android.permission.DUMP\"` and revoked with `adb shell \"pm revoke com.termux android.permission.PACKAGE_USAGE_STATS; pm revoke com.termux android.permission.DUMP\"`.\n\n- `device_config_sync_disabled` settings global namespace value can be received with a call to `getSettingsGlobalDeviceConfigSyncDisabled()`."
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/android/SettingsProviderUtils.java b/termux-shared/src/main/java/com/termux/shared/android/SettingsProviderUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/android/SettingsProviderUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/android/SettingsProviderUtils.java\n@@ -0,0 +1,99 @@\n+package com.termux.shared.android;\n+\n+import android.content.Context;\n+import android.provider.Settings;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.termux.shared.logger.Logger;\n+\n+public class SettingsProviderUtils {\n+\n+    private static final String LOG_TAG = \"SettingsProviderUtils\";\n+\n+    /** The namespaces for {@link Settings} provider. */\n+    public enum SettingNamespace {\n+        /** The {@link Settings.Global} namespace */\n+        GLOBAL,\n+\n+        /** The {@link Settings.Secure} namespace */\n+        SECURE,\n+\n+        /** The {@link Settings.System} namespace */\n+        SYSTEM\n+    }\n+\n+    /** The type of values for {@link Settings} provider. */\n+    public enum SettingType {\n+        FLOAT,\n+        INT,\n+        LONG,\n+        STRING,\n+        URI\n+    }\n+\n+    /**\n+     * Get settings key value from {@link SettingNamespace} namespace and of {@link SettingType} type.\n+     *\n+     * @param context The {@link Context} for operations.\n+     * @param namespace The {@link SettingNamespace} in which to get key value from.\n+     * @param type The {@link SettingType} for the key.\n+     * @param key The {@link String} name for key.\n+     * @param def The {@link Object} default value for key.\n+     * @return Returns the key value. This will be {@code null} if an exception is raised.\n+     */\n+    @Nullable\n+    public static Object getSettingsValue(@NonNull Context context, @NonNull SettingNamespace namespace,\n+                                          @NonNull SettingType type, @NonNull String key, @Nullable Object def) {\n+        try {\n+            switch (namespace) {\n+                case GLOBAL:\n+                    switch (type) {\n+                        case FLOAT:\n+                            return Settings.Global.getFloat(context.getContentResolver(), key);\n+                        case INT:\n+                            return Settings.Global.getInt(context.getContentResolver(), key);\n+                        case LONG:\n+                            return Settings.Global.getLong(context.getContentResolver(), key);\n+                        case STRING:\n+                            return Settings.Global.getString(context.getContentResolver(), key);\n+                        case URI:\n+                            return Settings.Global.getUriFor(key);\n+                    }\n+                case SECURE:\n+                    switch (type) {\n+                        case FLOAT:\n+                            return Settings.Secure.getFloat(context.getContentResolver(), key);\n+                        case INT:\n+                            return Settings.Secure.getInt(context.getContentResolver(), key);\n+                        case LONG:\n+                            return Settings.Secure.getLong(context.getContentResolver(), key);\n+                        case STRING:\n+                            return Settings.Secure.getString(context.getContentResolver(), key);\n+                        case URI:\n+                            return Settings.Secure.getUriFor(key);\n+                    }\n+                case SYSTEM:\n+                    switch (type) {\n+                        case FLOAT:\n+                            return Settings.System.getFloat(context.getContentResolver(), key);\n+                        case INT:\n+                            return Settings.System.getInt(context.getContentResolver(), key);\n+                        case LONG:\n+                            return Settings.System.getLong(context.getContentResolver(), key);\n+                        case STRING:\n+                            return Settings.System.getString(context.getContentResolver(), key);\n+                        case URI:\n+                            return Settings.System.getUriFor(key);\n+                    }\n+            }\n+        } catch (Settings.SettingNotFoundException e) {\n+            // Ignore\n+        } catch (Exception e) {\n+            Logger.logError(LOG_TAG, \"Failed to get \\\"\" + key + \"\\\" key value from settings \\\"\" + namespace.name() + \"\\\" namespace of type \\\"\" + type.name() + \"\\\"\");\n+        }\n+        return def;\n+    }\n+\n+}",
    "output": "Added: Add `SettingsProviderUtils` to get `Setting` global, secure and system namespace values"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxApplication.java b/app/src/main/java/com/termux/app/TermuxApplication.java\n--- a/app/src/main/java/com/termux/app/TermuxApplication.java\n+++ b/app/src/main/java/com/termux/app/TermuxApplication.java\n@@ -60,6 +60,9 @@ public void onCreate() {\n             }\n \n             TermuxAmSocketServer.setupTermuxAmSocketServer(context);\n+\n+        // Init TermuxShellEnvironment constants and caches after everything has been setup including termux-am-socket server\n+        TermuxShellEnvironment.init(this);\n         }\n     }\n \n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/shell/command/environment/TermuxShellEnvironment.java b/termux-shared/src/main/java/com/termux/shared/termux/shell/command/environment/TermuxShellEnvironment.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/shell/command/environment/TermuxShellEnvironment.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/shell/command/environment/TermuxShellEnvironment.java\n@@ -28,6 +28,11 @@ public TermuxShellEnvironment() {\n         shellCommandShellEnvironment = new TermuxShellCommandShellEnvironment();\n     }\n \n+    /** Init {@link TermuxShellEnvironment} constants and caches. */\n+    public synchronized static void init(@NonNull Context currentPackageContext) {\n+        TermuxAppShellEnvironment.setTermuxAppEnvironment(currentPackageContext);\n+    }\n+\n     /** Get shell environment for Termux. */\n     @NonNull\n     @Override",
    "output": "Added: Init `TermuxShellEnvironment` at app startup\n\nThis will currently cache `TermuxAppShellEnvironment` so that its not regenerated for each shell started since it contains some slightly expensive operations."
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/termux/shell/am/TermuxAmSocketServer.java b/termux-shared/src/main/java/com/termux/shared/termux/shell/am/TermuxAmSocketServer.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/shell/am/TermuxAmSocketServer.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/shell/am/TermuxAmSocketServer.java\n@@ -92,6 +92,7 @@ public static void setupTermuxAmSocketServer(@NonNull Context context) {\n         // exported in shell sessions and tasks and if state is changed, then env of older shells will\n         // retain invalid value. User should force stop the app to update state after changing prop.\n         TERMUX_APP_AM_SOCKET_SERVER_ENABLED = enabled;\n+        TermuxAppShellEnvironment.updateTermuxAppAMSocketServerEnabled(context);\n     }\n \n     /**\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/shell/command/environment/TermuxAppShellEnvironment.java b/termux-shared/src/main/java/com/termux/shared/termux/shell/command/environment/TermuxAppShellEnvironment.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/shell/command/environment/TermuxAppShellEnvironment.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/shell/command/environment/TermuxAppShellEnvironment.java\n@@ -161,4 +161,12 @@ public static void putTermuxAPKSignature(@NonNull Context currentPackageContext,\n         }\n     }\n \n+    /** Update {@link #ENV_TERMUX_APP__AM_SOCKET_SERVER_ENABLED} value in {@code environment}. */\n+    public synchronized static void updateTermuxAppAMSocketServerEnabled(@NonNull Context currentPackageContext) {\n+        if (termuxAppEnvironment == null) return;\n+        termuxAppEnvironment.remove(ENV_TERMUX_APP__AM_SOCKET_SERVER_ENABLED);\n+        ShellEnvironmentUtils.putToEnvIfSet(termuxAppEnvironment, ENV_TERMUX_APP__AM_SOCKET_SERVER_ENABLED,\n+            TermuxAmSocketServer.getTermuxAppAMSocketServerEnabled(currentPackageContext));\n+    }\n+\n }",
    "output": "Changed: Update `TERMUX_APP__AM_SOCKET_SERVER_ENABLED` environment variable value if `termux-am-socket` server state changes"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/shell/command/environment/UnixShellEnvironment.java b/termux-shared/src/main/java/com/termux/shared/shell/command/environment/UnixShellEnvironment.java\n--- a/termux-shared/src/main/java/com/termux/shared/shell/command/environment/UnixShellEnvironment.java\n+++ b/termux-shared/src/main/java/com/termux/shared/shell/command/environment/UnixShellEnvironment.java\n@@ -52,6 +52,9 @@ public abstract class UnixShellEnvironment implements IShellEnvironment {\n     public static final String ENV_TMPDIR = \"TMPDIR\";\n \n \n+    /** Names for common/supported login shell binaries. */\n+    public static final String[] LOGIN_SHELL_BINARIES = new String[]{\"login\", \"bash\", \"zsh\", \"fish\", \"sh\"};\n+\n \n \n     @NonNull\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/shell/command/runner/terminal/TermuxSession.java b/termux-shared/src/main/java/com/termux/shared/termux/shell/command/runner/terminal/TermuxSession.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/shell/command/runner/terminal/TermuxSession.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/shell/command/runner/terminal/TermuxSession.java\n@@ -93,7 +93,7 @@ public static TermuxSession execute(@NonNull final Context currentPackageContext\n         boolean isLoginShell = false;\n         if (executionCommand.executable == null) {\n             if (!executionCommand.isFailsafe) {\n-                for (String shellBinary : new String[]{\"login\", \"bash\", \"zsh\"}) {\n+                for (String shellBinary : UnixShellEnvironment.LOGIN_SHELL_BINARIES) {\n                     File shellFile = new File(defaultBinPath, shellBinary);\n                     if (shellFile.canExecute()) {\n                         executionCommand.executable = shellFile.getAbsolutePath();",
    "output": "Added: Add `UnixShellEnvironment.LOGIN_SHELL_BINARIES` variable for common/supported login shell binaries searched and add `fish` and `sh` shell as additional backups"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java b/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n@@ -991,7 +991,7 @@ public static Error copyOrMoveFile(String label, final String srcFilePath, final\n                     return FileUtilsErrno.ERRNO_CANNOT_OVERWRITE_A_DIFFERENT_FILE_TYPE.getError(label + \"source file\", mode.toLowerCase(), srcFilePath, destFilePath, destFileType.getName(), srcFileType.getName());\n \n                 // Delete the destination file\n-                error = deleteFile(label + \"destination file\", destFilePath, true);\n+                error = deleteFile(label + \"destination\", destFilePath, true);\n                 if (error != null)\n                     return error;\n             }\n@@ -1038,7 +1038,7 @@ public static Error copyOrMoveFile(String label, final String srcFilePath, final\n                     } else {\n                         // read the target for the source file and create a symlink at dest\n                         // source file metadata will be lost\n-                        error = createSymlinkFile(label + \"dest file\", Os.readlink(srcFilePath), destFilePath);\n+                        error = createSymlinkFile(label + \"dest\", Os.readlink(srcFilePath), destFilePath);\n                         if (error != null)\n                             return error;\n                     }\n@@ -1055,7 +1055,7 @@ public static Error copyOrMoveFile(String label, final String srcFilePath, final\n             // If source file had to be moved\n             if (moveFile) {\n                 // Delete the source file since copying would have succeeded\n-                error = deleteFile(label + \"source file\", srcFilePath, true);\n+                error = deleteFile(label + \"source\", srcFilePath, true);\n                 if (error != null)\n                     return error;\n             }",
    "output": "Fixed: Fix duplicate logging of `file` word in `FileUtils.copyOrMoveFile()`"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/android/AndroidUtils.java b/termux-shared/src/main/java/com/termux/shared/android/AndroidUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/android/AndroidUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/android/AndroidUtils.java\n@@ -9,6 +9,7 @@\n import androidx.annotation.NonNull;\n \n import com.google.common.base.Joiner;\n+import com.termux.shared.data.DataUtils;\n import com.termux.shared.logger.Logger;\n import com.termux.shared.markdown.MarkdownUtils;\n \n@@ -84,9 +85,17 @@ public static String getAppInfoMarkdownString(@NonNull final Context context, @N\n         AndroidUtils.appendPropertyToMarkdown(markdownString,\"IS_DEBUGGABLE_BUILD\", PackageUtils.isAppForPackageADebuggableBuild(applicationInfo));\n \n         if (PackageUtils.isAppInstalledOnExternalStorage(applicationInfo)) {\n+            AndroidUtils.appendPropertyToMarkdown(markdownString,\"APK_PATH\", PackageUtils.getBaseAPKPathForPackage(applicationInfo));\n             AndroidUtils.appendPropertyToMarkdown(markdownString,\"IS_INSTALLED_ON_EXTERNAL_STORAGE\", true);\n         }\n \n+        AndroidUtils.appendPropertyToMarkdown(markdownString,\"SE_PROCESS_CONTEXT\", SELinuxUtils.getContext());\n+        AndroidUtils.appendPropertyToMarkdown(markdownString,\"SE_FILE_CONTEXT\", SELinuxUtils.getFileContext(context.getFilesDir().getAbsolutePath()));\n+\n+        String seInfoUser = PackageUtils.getApplicationInfoSeInfoUserForPackage(applicationInfo);\n+        AndroidUtils.appendPropertyToMarkdown(markdownString,\"SE_INFO\", PackageUtils.getApplicationInfoSeInfoForPackage(applicationInfo) +\n+            (DataUtils.isNullOrEmpty(seInfoUser) ? \"\" : seInfoUser));\n+\n         return markdownString.toString();\n     }\n ",
    "output": "Added: Add package `APK_PATH`, `SE_PROCESS_CONTEXT`, `SE_FILE_CONTEXT` and `SE_INFO` when generating app info markdown string"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/android/PackageUtils.java b/termux-shared/src/main/java/com/termux/shared/android/PackageUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/android/PackageUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/android/PackageUtils.java\n@@ -375,6 +375,28 @@ public static int getTargetSDKForPackage(@NonNull final ApplicationInfo applicat\n \n \n \n+    /**\n+     * Get the base apk path for the package associated with the {@code context}.\n+     *\n+     * @param context The {@link Context} for the package.\n+     * @return Returns the base apk path.\n+     */\n+    public static String getBaseAPKPathForPackage(@NonNull final Context context) {\n+        return getBaseAPKPathForPackage(context.getApplicationInfo());\n+    }\n+\n+    /**\n+     * Get the base apk path for the package associated with the {@code applicationInfo}.\n+     *\n+     * @param applicationInfo The {@link ApplicationInfo} for the package.\n+     * @return Returns the base apk path.\n+     */\n+    public static String getBaseAPKPathForPackage(@NonNull final ApplicationInfo applicationInfo) {\n+        return applicationInfo.publicSourceDir;\n+    }\n+\n+\n+\n     /**\n      * Check if the app associated with the {@code context} has {@link ApplicationInfo#FLAG_DEBUGGABLE}\n      * set.",
    "output": "Added: Add functions to `PackageUtils` to get base APK path of package"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/android/PackageUtils.java b/termux-shared/src/main/java/com/termux/shared/android/PackageUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/android/PackageUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/android/PackageUtils.java\n@@ -196,6 +196,55 @@ public static Integer getApplicationInfoPrivateFlagsForPackage(@NonNull final Ap\n         }\n     }\n \n+    /**\n+     * Get the {@code seInfo} {@link Field} of the {@link ApplicationInfo} class.\n+     *\n+     * String retrieved from the seinfo tag found in selinux policy. This value can be set through\n+     * the mac_permissions.xml policy construct. This value is used for setting an SELinux security\n+     * context on the process as well as its data directory.\n+     *\n+     * https://cs.android.com/android/platform/superproject/+/android-7.1.0_r1:frameworks/base/core/java/android/content/pm/ApplicationInfo.java;l=609\n+     * https://cs.android.com/android/platform/superproject/+/android-12.0.0_r32:frameworks/base/core/java/android/content/pm/ApplicationInfo.java;l=981\n+     * https://cs.android.com/android/platform/superproject/+/android-7.0.0_r1:frameworks/base/services/core/java/com/android/server/pm/SELinuxMMAC.java;l=282\n+     * https://cs.android.com/android/platform/superproject/+/android-12.0.0_r32:frameworks/base/services/core/java/com/android/server/pm/SELinuxMMAC.java;l=375\n+     * https://cs.android.com/android/_/android/platform/frameworks/base/+/be0b8896d1bc385d4c8fb54c21929745935dcbea\n+     *\n+     * @param applicationInfo The {@link ApplicationInfo} for the package.\n+     * @return Returns the selinux info or {@code null} if an exception was raised.\n+     */\n+    @Nullable\n+    public static String getApplicationInfoSeInfoForPackage(@NonNull final ApplicationInfo applicationInfo) {\n+        ReflectionUtils.bypassHiddenAPIReflectionRestrictions();\n+        try {\n+            return (String) ReflectionUtils.invokeField(ApplicationInfo.class, Build.VERSION.SDK_INT < Build.VERSION_CODES.O ? \"seinfo\" : \"seInfo\", applicationInfo).value;\n+        } catch (Exception e) {\n+            // ClassCastException may be thrown\n+            Logger.logStackTraceWithMessage(LOG_TAG, \"Failed to get seInfo field value for ApplicationInfo class\", e);\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Get the {@code seInfoUser} {@link Field} of the {@link ApplicationInfo} class.\n+     *\n+     * Also check {@link #getApplicationInfoSeInfoForPackage(ApplicationInfo)}.\n+     *\n+     * @param applicationInfo The {@link ApplicationInfo} for the package.\n+     * @return Returns the selinux info user or {@code null} if an exception was raised.\n+     */\n+    @Nullable\n+    public static String getApplicationInfoSeInfoUserForPackage(@NonNull final ApplicationInfo applicationInfo) {\n+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) return null;\n+        ReflectionUtils.bypassHiddenAPIReflectionRestrictions();\n+        try {\n+            return (String) ReflectionUtils.invokeField(ApplicationInfo.class, \"seInfoUser\", applicationInfo).value;\n+        } catch (Exception e) {\n+            // ClassCastException may be thrown\n+            Logger.logStackTraceWithMessage(LOG_TAG, \"Failed to get seInfoUser field value for ApplicationInfo class\", e);\n+            return null;\n+        }\n+    }\n+\n     /**\n      * Get the {@code privateFlags} {@link Field} of the {@link ApplicationInfo} class.\n      *",
    "output": "Added: Add functions to `PackageUtils` to get `seInfo` and `seInfoUser` of package"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/android/SELinuxUtils.java b/termux-shared/src/main/java/com/termux/shared/android/SELinuxUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/android/SELinuxUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/android/SELinuxUtils.java\n@@ -0,0 +1,96 @@\n+package com.termux.shared.android;\n+\n+import android.annotation.SuppressLint;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.termux.shared.logger.Logger;\n+import com.termux.shared.reflection.ReflectionUtils;\n+\n+import java.lang.reflect.Method;\n+\n+public class SELinuxUtils {\n+\n+    public static final String ANDROID_OS_SELINUX_CLASS = \"android.os.SELinux\";\n+\n+    private static final String LOG_TAG = \"SELinuxUtils\";\n+\n+    /**\n+     * Gets the security context of the current process.\n+     *\n+     * @return Returns a {@link String} representing the security context of the current process.\n+     * This will be {@code null} if an exception is raised.\n+     */\n+    @Nullable\n+    public static String getContext() {\n+        ReflectionUtils.bypassHiddenAPIReflectionRestrictions();\n+        String methodName = \"getContext\";\n+        try {\n+            @SuppressLint(\"PrivateApi\") Class<?> clazz = Class.forName(ANDROID_OS_SELINUX_CLASS);\n+            Method method = ReflectionUtils.getDeclaredMethod(clazz, methodName);\n+            if (method == null) {\n+                Logger.logError(LOG_TAG, \"Failed to get \" + methodName + \"() method of \" + ANDROID_OS_SELINUX_CLASS + \" class\");\n+                return null;\n+            }\n+\n+            return (String) ReflectionUtils.invokeMethod(method, null).value;\n+        } catch (Exception e) {\n+            Logger.logStackTraceWithMessage(LOG_TAG, \"Failed to call \" + methodName + \"() method of \" + ANDROID_OS_SELINUX_CLASS + \" class\", e);\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Get the security context of a given process id.\n+     *\n+     * @param pid The pid of process.\n+     * @return Returns a {@link String} representing the security context of the given pid.\n+     * This will be {@code null} if an exception is raised.\n+     */\n+    @Nullable\n+    public static String getPidContext(int pid) {\n+        ReflectionUtils.bypassHiddenAPIReflectionRestrictions();\n+        String methodName = \"getPidContext\";\n+        try {\n+            @SuppressLint(\"PrivateApi\") Class<?> clazz = Class.forName(ANDROID_OS_SELINUX_CLASS);\n+            Method method = ReflectionUtils.getDeclaredMethod(clazz, methodName, int.class);\n+            if (method == null) {\n+                Logger.logError(LOG_TAG, \"Failed to get \" + methodName + \"() method of \" + ANDROID_OS_SELINUX_CLASS + \" class\");\n+                return null;\n+            }\n+\n+            return (String) ReflectionUtils.invokeMethod(method, null, pid).value;\n+        } catch (Exception e) {\n+            Logger.logStackTraceWithMessage(LOG_TAG, \"Failed to call \" + methodName + \"() method of \" + ANDROID_OS_SELINUX_CLASS + \" class\", e);\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Get the security context of a file object.\n+     *\n+     * @param path The pathname of the file object.\n+     * @return Returns a {@link String} representing the security context of the file.\n+     * This will be {@code null} if an exception is raised.\n+     */\n+    @Nullable\n+    public static String getFileContext(@NonNull String path) {\n+        ReflectionUtils.bypassHiddenAPIReflectionRestrictions();\n+        String methodName = \"getFileContext\";\n+        try {\n+            @SuppressLint(\"PrivateApi\") Class<?> clazz = Class.forName(ANDROID_OS_SELINUX_CLASS);\n+            Method method = ReflectionUtils.getDeclaredMethod(clazz, methodName, String.class);\n+            if (method == null) {\n+                Logger.logError(LOG_TAG, \"Failed to get \" + methodName + \"() method of \" + ANDROID_OS_SELINUX_CLASS + \" class\");\n+                return null;\n+            }\n+\n+            return (String) ReflectionUtils.invokeMethod(method, null, path).value;\n+        } catch (Exception e) {\n+            Logger.logStackTraceWithMessage(LOG_TAG, \"Failed to call \" + methodName + \"() method of \" + ANDROID_OS_SELINUX_CLASS + \" class\", e);\n+            return null;\n+        }\n+    }\n+\n+}",
    "output": "Added: Add `SELinuxUtils` to get process and file paths security contexts"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/termux/shell/command/runner/terminal/TermuxSession.java b/termux-shared/src/main/java/com/termux/shared/termux/shell/command/runner/terminal/TermuxSession.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/shell/command/runner/terminal/TermuxSession.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/shell/command/runner/terminal/TermuxSession.java\n@@ -67,6 +67,8 @@ public static TermuxSession execute(@NonNull final Context context, @NonNull Exe\n                                         @NonNull final TerminalSessionClient terminalSessionClient, final TermuxSessionClient termuxSessionClient,\n                                         @NonNull final ShellEnvironmentClient shellEnvironmentClient,\n                                         final boolean setStdoutOnExit) {\n+        if (executionCommand.executable != null && executionCommand.executable.isEmpty())\n+            executionCommand.executable = null;\n         if (executionCommand.workingDirectory == null || executionCommand.workingDirectory.isEmpty())\n             executionCommand.workingDirectory = shellEnvironmentClient.getDefaultWorkingDirectoryPath();\n         if (executionCommand.workingDirectory.isEmpty())",
    "output": "Changed: Ensure `TermuxSession` executable is `null` if its empty so that `login` shell can start"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/shell/command/runner/app/AppShell.java b/termux-shared/src/main/java/com/termux/shared/shell/command/runner/app/AppShell.java\n--- a/termux-shared/src/main/java/com/termux/shared/shell/command/runner/app/AppShell.java\n+++ b/termux-shared/src/main/java/com/termux/shared/shell/command/runner/app/AppShell.java\n@@ -69,6 +69,13 @@ public static AppShell execute(@NonNull final Context context, @NonNull Executio\n                                    final AppShellClient appShellClient,\n                                    @NonNull final ShellEnvironmentClient shellEnvironmentClient,\n                                    final boolean isSynchronous) {\n+        if (executionCommand.executable == null || executionCommand.executable.isEmpty()) {\n+            executionCommand.setStateFailed(Errno.ERRNO_FAILED.getCode(),\n+                currentPackageContext.getString(R.string.error_executable_unset, executionCommand.getCommandIdAndLabelLogString()));\n+            AppShell.processAppShellResult(null, executionCommand);\n+            return null;\n+        }\n+\n         if (executionCommand.workingDirectory == null || executionCommand.workingDirectory.isEmpty())\n             executionCommand.workingDirectory = shellEnvironmentClient.getDefaultWorkingDirectoryPath();\n         if (executionCommand.workingDirectory.isEmpty())",
    "output": "Changed: Ensure `AppShell` executable is not `null` before trying to execute it"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n@@ -11,7 +11,7 @@\n import java.util.List;\n \n /*\n- * Version: v0.46.0\n+ * Version: v0.47.0\n  * SPDX-License-Identifier: MIT\n  *\n  * Changelog\n@@ -257,6 +257,10 @@\n  *          `TERMUX_APP.RUN_COMMAND_SERVICE.EXTRA_SESSION_NAME` to `*.EXTRA_SHELL_NAME`,\n  *          `TERMUX_APP.TERMUX_SERVICE.EXTRA_SESSION_CREATE_MODE` to `*.EXTRA_SHELL_CREATE_MODE` and\n  *          `TERMUX_APP.RUN_COMMAND_SERVICE.EXTRA_SESSION_CREATE_MODE` to `*.EXTRA_SHELL_CREATE_MODE`.\n+ *\n+ * - 0.47.0 (2022-06-04)\n+ *      - Added `TERMUX_SITE` and `TERMUX_SITE_URL`.\n+ *      - Changed `TERMUX_DONATE_URL`.\n  */\n \n /**\n@@ -547,6 +551,12 @@ public final class TermuxConstants {\n      * Termux miscellaneous urls.\n      */\n \n+    /** Termux Site */\n+    public static final String TERMUX_SITE = TERMUX_APP_NAME + \" Site\"; // Default: \"Termux Site\"\n+\n+    /** Termux Site url */\n+    public static final String TERMUX_SITE_URL = \"https://termux.dev\"; // Default: \"https://termux.dev\"\n+\n     /** Termux Wiki */\n     public static final String TERMUX_WIKI = TERMUX_APP_NAME + \" Wiki\"; // Default: \"Termux Wiki\"\n \n@@ -575,7 +585,7 @@ public final class TermuxConstants {\n \n \n     /** Termux donate url */\n-    public static final String TERMUX_DONATE_URL = TERMUX_PACKAGES_GITHUB_REPO_URL + \"/wiki/Donate\"; // Default: \"https://github.com/termux/termux-packages/wiki/Donate\"\n+    public static final String TERMUX_DONATE_URL = TERMUX_SITE_URL + \"/donate\"; // Default: \"https://termux.dev/donate\"\n \n \n ",
    "output": "Added|Changed: Add termux site url and change donate url to https://termux.dev/donate"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/android/PackageUtils.java b/termux-shared/src/main/java/com/termux/shared/android/PackageUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/android/PackageUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/android/PackageUtils.java\n@@ -31,18 +31,31 @@ public class PackageUtils {\n     private static final String LOG_TAG = \"PackageUtils\";\n \n     /**\n-     * Get the {@link Context} for the package name.\n+     * Get the {@link Context} for the package name with {@link Context#CONTEXT_RESTRICTED} flags.\n      *\n      * @param context The {@link Context} to use to get the {@link Context} of the {@code packageName}.\n      * @param packageName The package name whose {@link Context} to get.\n      * @return Returns the {@link Context}. This will {@code null} if an exception is raised.\n      */\n     @Nullable\n     public static Context getContextForPackage(@NonNull final Context context, String packageName) {\n+       return getContextForPackage(context, packageName, Context.CONTEXT_RESTRICTED);\n+    }\n+\n+    /**\n+     * Get the {@link Context} for the package name.\n+     *\n+     * @param context The {@link Context} to use to get the {@link Context} of the {@code packageName}.\n+     * @param packageName The package name whose {@link Context} to get.\n+     * @param flags The flags for {@link Context} type.\n+     * @return Returns the {@link Context}. This will {@code null} if an exception is raised.\n+     */\n+    @Nullable\n+    public static Context getContextForPackage(@NonNull final Context context, String packageName, int flags) {\n         try {\n-            return context.createPackageContext(packageName, Context.CONTEXT_RESTRICTED);\n+            return context.createPackageContext(packageName, flags);\n         } catch (Exception e) {\n-            Logger.logVerbose(LOG_TAG, \"Failed to get \\\"\" + packageName + \"\\\" package context: \" + e.getMessage());\n+            Logger.logVerbose(LOG_TAG, \"Failed to get \\\"\" + packageName + \"\\\" package context with flags \" + flags + \": \" + e.getMessage());\n             return null;\n         }\n     }\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n@@ -50,7 +50,8 @@ public enum AppInfoMode {\n     private static final String LOG_TAG = \"TermuxUtils\";\n \n     /**\n-     * Get the {@link Context} for {@link TermuxConstants#TERMUX_PACKAGE_NAME} package.\n+     * Get the {@link Context} for {@link TermuxConstants#TERMUX_PACKAGE_NAME} package with the\n+     * {@link Context#CONTEXT_RESTRICTED} flag.\n      *\n      * @param context The {@link Context} to use to get the {@link Context} of the package.\n      * @return Returns the {@link Context}. This will {@code null} if an exception is raised.\n@@ -59,6 +60,17 @@ public static Context getTermuxPackageContext(@NonNull Context context) {\n         return PackageUtils.getContextForPackage(context, TermuxConstants.TERMUX_PACKAGE_NAME);\n     }\n \n+    /**\n+     * Get the {@link Context} for {@link TermuxConstants#TERMUX_PACKAGE_NAME} package with the\n+     * {@link Context#CONTEXT_INCLUDE_CODE} flag.\n+     *\n+     * @param context The {@link Context} to use to get the {@link Context} of the package.\n+     * @return Returns the {@link Context}. This will {@code null} if an exception is raised.\n+     */\n+    public static Context getTermuxPackageContextWithCode(@NonNull Context context) {\n+        return PackageUtils.getContextForPackage(context, TermuxConstants.TERMUX_PACKAGE_NAME, Context.CONTEXT_INCLUDE_CODE);\n+    }\n+\n     /**\n      * Get the {@link Context} for {@link TermuxConstants#TERMUX_API_PACKAGE_NAME} package.\n      *",
    "output": "Added: Add support to get termux app package context with code classloader for plugin usage"
  },
  {
    "input": "diff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -83,6 +83,12 @@ public final class TerminalView extends View {\n \n     private final boolean mAccessibilityEnabled;\n \n+    /** The {@link KeyEvent} is generated from a virtual keyboard, like manually with the {@link KeyEvent#KeyEvent(int, int)} constructor. */\n+    public final static int KEY_EVENT_SOURCE_VIRTUAL_KEYBOARD = KeyCharacterMap.VIRTUAL_KEYBOARD; // -1\n+\n+    /** The {@link KeyEvent} is generated from a non-physical device, like if 0 value is returned by {@link KeyEvent#getDeviceId()}. */\n+    public final static int KEY_EVENT_SOURCE_SOFT_KEYBOARD = 0;\n+\n     private static final String LOG_TAG = \"TerminalView\";\n \n     public TerminalView(Context context, AttributeSet attributes) { // NO_UCD (unused code)\n@@ -380,7 +386,7 @@ void sendTextToTerminal(CharSequence text) {\n                         }\n                     }\n \n-                    inputCodePoint(codePoint, ctrlHeld, false);\n+                    inputCodePoint(KEY_EVENT_SOURCE_SOFT_KEYBOARD, codePoint, ctrlHeld, false);\n                 }\n             }\n \n@@ -755,25 +761,25 @@ public boolean onKeyDown(int keyCode, KeyEvent event) {\n         if ((result & KeyCharacterMap.COMBINING_ACCENT) != 0) {\n             // If entered combining accent previously, write it out:\n             if (mCombiningAccent != 0)\n-                inputCodePoint(mCombiningAccent, controlDown, leftAltDown);\n+                inputCodePoint(event.getDeviceId(), mCombiningAccent, controlDown, leftAltDown);\n             mCombiningAccent = result & KeyCharacterMap.COMBINING_ACCENT_MASK;\n         } else {\n             if (mCombiningAccent != 0) {\n                 int combinedChar = KeyCharacterMap.getDeadChar(mCombiningAccent, result);\n                 if (combinedChar > 0) result = combinedChar;\n                 mCombiningAccent = 0;\n             }\n-            inputCodePoint(result, controlDown, leftAltDown);\n+            inputCodePoint(event.getDeviceId(), result, controlDown, leftAltDown);\n         }\n \n         if (mCombiningAccent != oldCombiningAccent) invalidate();\n \n         return true;\n     }\n \n-    public void inputCodePoint(int codePoint, boolean controlDownFromEvent, boolean leftAltDownFromEvent) {\n+    public void inputCodePoint(int eventSource, int codePoint, boolean controlDownFromEvent, boolean leftAltDownFromEvent) {\n         if (TERMINAL_VIEW_KEY_LOGGING_ENABLED) {\n-            mClient.logInfo(LOG_TAG, \"inputCodePoint(codePoint=\" + codePoint + \", controlDownFromEvent=\" + controlDownFromEvent + \", leftAltDownFromEvent=\"\n+            mClient.logInfo(LOG_TAG, \"inputCodePoint(eventSource=\" + eventSource + \", codePoint=\" + codePoint + \", controlDownFromEvent=\" + controlDownFromEvent + \", leftAltDownFromEvent=\"\n                 + leftAltDownFromEvent + \")\");\n         }\n \n@@ -813,19 +819,22 @@ public void inputCodePoint(int codePoint, boolean controlDownFromEvent, boolean\n         }\n \n         if (codePoint > -1) {\n-            // Work around bluetooth keyboards sending funny unicode characters instead\n-            // of the more normal ones from ASCII that terminal programs expect - the\n-            // desire to input the original characters should be low.\n-            switch (codePoint) {\n-                case 0x02DC: // SMALL TILDE.\n-                    codePoint = 0x007E; // TILDE (~).\n-                    break;\n-                case 0x02CB: // MODIFIER LETTER GRAVE ACCENT.\n-                    codePoint = 0x0060; // GRAVE ACCENT (`).\n-                    break;\n-                case 0x02C6: // MODIFIER LETTER CIRCUMFLEX ACCENT.\n-                    codePoint = 0x005E; // CIRCUMFLEX ACCENT (^).\n-                    break;\n+            // If not virtual or soft keyboard.\n+            if (eventSource > KEY_EVENT_SOURCE_SOFT_KEYBOARD) {\n+                // Work around bluetooth keyboards sending funny unicode characters instead\n+                // of the more normal ones from ASCII that terminal programs expect - the\n+                // desire to input the original characters should be low.\n+                switch (codePoint) {\n+                    case 0x02DC: // SMALL TILDE.\n+                        codePoint = 0x007E; // TILDE (~).\n+                        break;\n+                    case 0x02CB: // MODIFIER LETTER GRAVE ACCENT.\n+                        codePoint = 0x0060; // GRAVE ACCENT (`).\n+                        break;\n+                    case 0x02C6: // MODIFIER LETTER CIRCUMFLEX ACCENT.\n+                        codePoint = 0x005E; // CIRCUMFLEX ACCENT (^).\n+                        break;\n+                }\n             }\n \n             // If left alt, send escape before the code point to make e.g. Alt+B and Alt+F work in readline:\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/terminal/io/TerminalExtraKeys.java b/termux-shared/src/main/java/com/termux/shared/termux/terminal/io/TerminalExtraKeys.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/terminal/io/TerminalExtraKeys.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/terminal/io/TerminalExtraKeys.java\n@@ -67,7 +67,7 @@ protected void onTerminalExtraKeyButtonClick(View view, String key, boolean ctrl\n             // not a control char\n             if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {\n                 key.codePoints().forEach(codePoint -> {\n-                    mTerminalView.inputCodePoint(codePoint, ctrlDown, altDown);\n+                    mTerminalView.inputCodePoint(TerminalView.KEY_EVENT_SOURCE_VIRTUAL_KEYBOARD, codePoint, ctrlDown, altDown);\n                 });\n             } else {\n                 TerminalSession session = mTerminalView.getCurrentSession();",
    "output": "Changed: Do not modify code points for virtual or soft keyboard events\n\nCloses #2799"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n@@ -11,7 +11,7 @@\n import java.util.List;\n \n /*\n- * Version: v0.43.0\n+ * Version: v0.44.0\n  * SPDX-License-Identifier: MIT\n  *\n  * Changelog\n@@ -245,6 +245,9 @@\n  *\n  * - 0.43.0 (2022-05-29)\n  *      - Changed `TERMUX_SUPPORT_EMAIL_URL` to support@termux.dev.\n+ *\n+ * - 0.44.0 (2022-05-29)\n+ *      - Changed `TERMUX_APP.APPS_DIR_PATH` basename from `termux-app` to `com.termux`.\n  */\n \n /**\n@@ -896,10 +899,10 @@ public final class TermuxConstants {\n     public static final class TERMUX_APP {\n \n         /** Termux apps directory path */\n-        public static final String APPS_DIR_PATH = TERMUX_APPS_DIR_PATH + \"/termux-app\"; // Default: \"/data/data/com.termux/files/apps/termux-app\"\n+        public static final String APPS_DIR_PATH = TERMUX_APPS_DIR_PATH + \"/\" + TERMUX_PACKAGE_NAME; // Default: \"/data/data/com.termux/files/apps/com.termux\"\n \n         /** termux-am socket file path */\n-        public static final String TERMUX_AM_SOCKET_FILE_PATH = APPS_DIR_PATH + \"/termux-am/am.sock\"; // Default: \"/data/data/com.termux/files/apps/termux-app/termux-am/am.sock\"\n+        public static final String TERMUX_AM_SOCKET_FILE_PATH = APPS_DIR_PATH + \"/termux-am/am.sock\"; // Default: \"/data/data/com.termux/files/apps/com.termux/termux-am/am.sock\"\n \n \n         /** Termux app core activity name. */",
    "output": "Changed: Change `TERMUX_APP.APPS_DIR_PATH` basename from `termux-app` to `com.termux`\n\nThe apps directory will now use the unique package name of apps for basename that can be automatically generated instead of having to be hardcoded.\n\n`termux-am-socket` will be upgraded to `v1.4.0` for respective change."
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/android/PermissionUtils.java b/termux-shared/src/main/java/com/termux/shared/android/PermissionUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/android/PermissionUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/android/PermissionUtils.java\n@@ -357,6 +357,11 @@ public static Error requestManageStorageExternalPermission(@NonNull Context cont\n         intent.addCategory(\"android.intent.category.DEFAULT\");\n         intent.setData(Uri.parse(\"package:\" + context.getPackageName()));\n \n+        // Flag must not be passed for activity contexts, otherwise onActivityResult() will not be called with permission grant result.\n+        // Flag must be passed for non-activity contexts like services, otherwise \"Calling startActivity() from outside of an Activity context requires the FLAG_ACTIVITY_NEW_TASK flag\" exception will be raised.\n+        if (!(context instanceof Activity))\n+            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n+\n         Error error;\n         if (requestCode >=0)\n             error = ActivityUtils.startActivityForResult(context, requestCode, intent, true, false);\n@@ -474,6 +479,11 @@ public static Error requestDisplayOverOtherAppsPermission(@NonNull Context conte\n         Intent intent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION);\n         intent.setData(Uri.parse(\"package:\" + context.getPackageName()));\n \n+        // Flag must not be passed for activity contexts, otherwise onActivityResult() will not be called with permission grant result.\n+        // Flag must be passed for non-activity contexts like services, otherwise \"Calling startActivity() from outside of an Activity context requires the FLAG_ACTIVITY_NEW_TASK flag\" exception will be raised.\n+        if (!(context instanceof Activity))\n+            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n+\n         if (requestCode >=0)\n             return ActivityUtils.startActivityForResult(context, requestCode, intent);\n         else\n@@ -549,6 +559,11 @@ public static Error requestDisableBatteryOptimizations(@NonNull Context context,\n         Intent intent = new Intent(Settings.ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS);\n         intent.setData(Uri.parse(\"package:\" + context.getPackageName()));\n \n+        // Flag must not be passed for activity contexts, otherwise onActivityResult() will not be called with permission grant result.\n+        // Flag must be passed for non-activity contexts like services, otherwise \"Calling startActivity() from outside of an Activity context requires the FLAG_ACTIVITY_NEW_TASK flag\" exception will be raised.\n+        if (!(context instanceof Activity))\n+            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n+\n         if (requestCode >=0)\n             return ActivityUtils.startActivityForResult(context, requestCode, intent);\n         else",
    "output": "Fixed: Fix `Settings.ACTION_*` permission requests for non-activity contexts\n\nThis was caused by ce12b8ad\n\nCloses #2769"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n@@ -11,7 +11,7 @@\n import java.util.List;\n \n /*\n- * Version: v0.42.0\n+ * Version: v0.43.0\n  * SPDX-License-Identifier: MIT\n  *\n  * Changelog\n@@ -242,6 +242,9 @@\n  *\n  * - 0.42.0 (2022-04-29)\n  *      - Added `APK_RELEASE_TERMUX_DEVS` and `APK_RELEASE_TERMUX_DEVS_SIGNING_CERTIFICATE_SHA256_DIGEST`.\n+ *\n+ * - 0.43.0 (2022-05-29)\n+ *      - Changed `TERMUX_SUPPORT_EMAIL_URL` to support@termux.dev.\n  */\n \n /**\n@@ -546,10 +549,10 @@ public final class TermuxConstants {\n \n \n     /** Termux support email url */\n-    public static final String TERMUX_SUPPORT_EMAIL_URL = \"termuxreports@groups.io\"; // Default: \"termuxreports@groups.io\"\n+    public static final String TERMUX_SUPPORT_EMAIL_URL = \"support@termux.dev\"; // Default: \"support@termux.dev\"\n \n     /** Termux support email mailto url */\n-    public static final String TERMUX_SUPPORT_EMAIL_MAILTO_URL = \"mailto:\" + TERMUX_SUPPORT_EMAIL_URL; // Default: \"mailto:termuxreports@groups.io\"\n+    public static final String TERMUX_SUPPORT_EMAIL_MAILTO_URL = \"mailto:\" + TERMUX_SUPPORT_EMAIL_URL; // Default: \"mailto:support@termux.dev\"\n \n \n     /** Termux Reddit subreddit */",
    "output": "Changed: Change termux support email from termuxreports@groups.io to support@termux.dev"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/termux/crash/TermuxCrashUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/crash/TermuxCrashUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/crash/TermuxCrashUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/crash/TermuxCrashUtils.java\n@@ -5,6 +5,7 @@\n import android.app.PendingIntent;\n import android.content.Context;\n import android.content.Intent;\n+import android.os.Build;\n import android.os.Environment;\n \n import androidx.annotation.NonNull;\n@@ -402,6 +403,7 @@ public static Notification.Builder getCrashReportsNotificationBuilder(final Cont\n      * @param context The {@link Context} for operations.\n      */\n     public static void setupCrashReportsNotificationChannel(final Context context) {\n+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) return;\n         NotificationUtils.setupNotificationChannel(context, TermuxConstants.TERMUX_CRASH_REPORTS_NOTIFICATION_CHANNEL_ID,\n             TermuxConstants.TERMUX_CRASH_REPORTS_NOTIFICATION_CHANNEL_NAME, NotificationManager.IMPORTANCE_HIGH);\n     }\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/plugins/TermuxPluginUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/plugins/TermuxPluginUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/plugins/TermuxPluginUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/plugins/TermuxPluginUtils.java\n@@ -4,6 +4,7 @@\n import android.app.NotificationManager;\n import android.app.PendingIntent;\n import android.content.Context;\n+import android.os.Build;\n import android.os.Environment;\n \n import androidx.annotation.Nullable;\n@@ -415,6 +416,7 @@ public static Notification.Builder getPluginCommandErrorsNotificationBuilder(fin\n      * @param context The {@link Context} for operations.\n      */\n     public static void setupPluginCommandErrorsNotificationChannel(final Context context) {\n+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) return;\n         NotificationUtils.setupNotificationChannel(context, TermuxConstants.TERMUX_PLUGIN_COMMAND_ERRORS_NOTIFICATION_CHANNEL_ID,\n             TermuxConstants.TERMUX_PLUGIN_COMMAND_ERRORS_NOTIFICATION_CHANNEL_NAME, NotificationManager.IMPORTANCE_HIGH);\n     }",
    "output": "Fixed: Do not setup plugin and crash notification channel on API `< 24` since NotificationManager.IMPORTANCE_HIGH requires API 24"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n@@ -11,7 +11,7 @@\n import java.util.List;\n \n /*\n- * Version: v0.41.0\n+ * Version: v0.42.0\n  * SPDX-License-Identifier: MIT\n  *\n  * Changelog\n@@ -239,6 +239,9 @@\n  *\n  * - 0.41.0 (2022-04-17)\n  *      - Added `TERMUX_APP.TERMUX_AM_SOCKET_FILE_PATH`.\n+ *\n+ * - 0.42.0 (2022-04-29)\n+ *      - Added `APK_RELEASE_TERMUX_DEVS` and `APK_RELEASE_TERMUX_DEVS_SIGNING_CERTIFICATE_SHA256_DIGEST`.\n  */\n \n /**\n@@ -450,6 +453,12 @@ public final class TermuxConstants {\n     /** Google Play Store APK release signing certificate SHA-256 digest */\n     public static final String APK_RELEASE_GOOGLE_PLAYSTORE_SIGNING_CERTIFICATE_SHA256_DIGEST = \"738F0A30A04D3C8A1BE304AF18D0779BCF3EA88FB60808F657A3521861C2EBF9\"; // Default: \"738F0A30A04D3C8A1BE304AF18D0779BCF3EA88FB60808F657A3521861C2EBF9\"\n \n+    /** Termux Devs APK release */\n+    public static final String APK_RELEASE_TERMUX_DEVS = \"Termux Devs\"; // Default: \"Termux Devs\"\n+\n+    /** Termux Devs APK release signing certificate SHA-256 digest */\n+    public static final String APK_RELEASE_TERMUX_DEVS_SIGNING_CERTIFICATE_SHA256_DIGEST = \"F7A038EB551F1BE8FDF388686B784ABAB4552A5D82DF423E3D8F1B5CBE1C69AE\"; // Default: \"F7A038EB551F1BE8FDF388686B784ABAB4552A5D82DF423E3D8F1B5CBE1C69AE\"\n+\n \n \n \n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n@@ -634,6 +634,8 @@ public static String getAPKRelease(String signingCertificateSHA256Digest) {\n                 return TermuxConstants.APK_RELEASE_GITHUB;\n             case TermuxConstants.APK_RELEASE_GOOGLE_PLAYSTORE_SIGNING_CERTIFICATE_SHA256_DIGEST:\n                 return TermuxConstants.APK_RELEASE_GOOGLE_PLAYSTORE;\n+            case TermuxConstants.APK_RELEASE_TERMUX_DEVS_SIGNING_CERTIFICATE_SHA256_DIGEST:\n+                return TermuxConstants.APK_RELEASE_TERMUX_DEVS;\n             default:\n                 return \"Unknown\";\n         }",
    "output": "Added: Add TERMUX_DEVS key SHA-256 digest to official signing keys list"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/termux/shell/TermuxShellUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/shell/TermuxShellUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/shell/TermuxShellUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/shell/TermuxShellUtils.java\n@@ -1,11 +1,9 @@\n package com.termux.shared.termux.shell;\n \n import android.content.Context;\n-import android.os.Build;\n \n import androidx.annotation.NonNull;\n \n-import com.termux.shared.BuildConfig;\n import com.termux.shared.errors.Error;\n import com.termux.shared.file.filesystem.FileTypes;\n import com.termux.shared.termux.TermuxBootstrap;\n@@ -99,7 +97,7 @@ public static String[] buildEnvironment(Context currentPackageContext, boolean i\n             environment.add(\"LANG=en_US.UTF-8\");\n             environment.add(\"PWD=\" + workingDirectory);\n             environment.add(\"TMPDIR=\" + TermuxConstants.TERMUX_TMP_PREFIX_DIR_PATH);\n-            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N) {\n+            if (TermuxBootstrap.isAppPackageVariantAPTAndroid5()) {\n                 environment.add(\"PATH=\" + TermuxConstants.TERMUX_BIN_PREFIX_DIR_PATH + \":\" + TermuxConstants.TERMUX_BIN_PREFIX_DIR_PATH + \"/applets\");\n                 environment.add(\"LD_LIBRARY_PATH=\" + TermuxConstants.TERMUX_LIB_PREFIX_DIR_PATH);\n             } else {",
    "output": "Changed: Export correct PATH and also export LD_LIBRARY_PATH for `apt-android-5` variant instead of on Android 5/6\n\nOverrides 4e08f76f"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxBootstrap.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxBootstrap.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxBootstrap.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxBootstrap.java\n@@ -58,10 +58,10 @@ public static boolean isAppPackageVariantAPTAndroid7() {\n         return PackageVariant.APT_ANDROID_7.equals(TERMUX_APP_PACKAGE_VARIANT);\n     }\n \n-    ///** Is {@link PackageVariant#APT_ANDROID_5} set as {@link #TERMUX_APP_PACKAGE_VARIANT}. */\n-    //public static boolean isAppPackageVariantAPTAndroid5() {\n-    //    return PackageVariant.APT_ANDROID_5.equals(TERMUX_APP_PACKAGE_VARIANT);\n-    //}\n+    /** Is {@link PackageVariant#APT_ANDROID_5} set as {@link #TERMUX_APP_PACKAGE_VARIANT}. */\n+    public static boolean isAppPackageVariantAPTAndroid5() {\n+        return PackageVariant.APT_ANDROID_5.equals(TERMUX_APP_PACKAGE_VARIANT);\n+    }\n \n     ///** Is {@link PackageVariant#TAPM_ANDROID_7} set as {@link #TERMUX_APP_PACKAGE_VARIANT}. */\n     //public static boolean isAppPackageVariantTAPMAndroid7() {\n@@ -132,10 +132,10 @@ public static PackageManager managerOf(String name) {\n     public enum PackageVariant {\n \n         /** {@link PackageManager#APT} variant for Android 7+. */\n-        APT_ANDROID_7(\"apt-android-7\");\n+        APT_ANDROID_7(\"apt-android-7\"),\n \n-        ///** {@link PackageManager#APT} variant for Android 5+. */\n-        //APT_ANDROID_5(\"apt-android-5\");\n+        /** {@link PackageManager#APT} variant for Android 5+. */\n+        APT_ANDROID_5(\"apt-android-5\");\n \n         ///** {@link PackageManager#TAPM} variant for Android 7+. */\n         //TAPM_ANDROID_7(\"tapm-android-7\");",
    "output": "Added: Enable `TERMUX_PACKAGE_VARIANT` `apt-android-5` builds"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/net/socket/local/LocalSocketManager.java b/termux-shared/src/main/java/com/termux/shared/net/socket/local/LocalSocketManager.java\n--- a/termux-shared/src/main/java/com/termux/shared/net/socket/local/LocalSocketManager.java\n+++ b/termux-shared/src/main/java/com/termux/shared/net/socket/local/LocalSocketManager.java\n@@ -75,8 +75,10 @@ public synchronized Error start() {\n                 Logger.logDebug(LOG_TAG, \"Loading \\\"\" + LOCAL_SOCKET_LIBRARY + \"\\\" library\");\n                 System.loadLibrary(LOCAL_SOCKET_LIBRARY);\n                 localSocketLibraryLoaded = true;\n-            } catch (Exception e) {\n-                return LocalSocketErrno.ERRNO_START_LOCAL_SOCKET_LIB_LOAD_FAILED_WITH_EXCEPTION.getError(e, LOCAL_SOCKET_LIBRARY,  e.getMessage());\n+            } catch (Throwable t) {\n+                Error error = LocalSocketErrno.ERRNO_START_LOCAL_SOCKET_LIB_LOAD_FAILED_WITH_EXCEPTION.getError(t, LOCAL_SOCKET_LIBRARY,  t.getMessage());\n+                Logger.logErrorExtended(LOG_TAG, error.getErrorLogString());\n+                return error;\n             }\n         }\n ",
    "output": "Fixed: Catch `UnsatisfiedLinkError` for `local-socket` library"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxInstaller.java b/app/src/main/java/com/termux/app/TermuxInstaller.java\n--- a/app/src/main/java/com/termux/app/TermuxInstaller.java\n+++ b/app/src/main/java/com/termux/app/TermuxInstaller.java\n@@ -73,7 +73,8 @@ static void setupBootstrapIfNeeded(final Activity activity, final Runnable whenD\n         // Termux can only be run as the primary user (device owner) since only that\n         // account has the expected file system paths. Verify that:\n         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N && !PackageUtils.isCurrentUserThePrimaryUser(activity)) {\n-            bootstrapErrorMessage = activity.getString(R.string.bootstrap_error_not_primary_user_message, MarkdownUtils.getMarkdownCodeForString(TERMUX_PREFIX_DIR_PATH, false));\n+            bootstrapErrorMessage = activity.getString(R.string.bootstrap_error_not_primary_user_message,\n+                MarkdownUtils.getMarkdownCodeForString(TERMUX_PREFIX_DIR_PATH, false));\n             Logger.logError(LOG_TAG, \"isFilesDirectoryAccessible: \" + isFilesDirectoryAccessible);\n             Logger.logError(LOG_TAG, bootstrapErrorMessage);\n             sendBootstrapCrashReportNotification(activity, bootstrapErrorMessage);\n@@ -84,7 +85,14 @@ static void setupBootstrapIfNeeded(final Activity activity, final Runnable whenD\n         }\n \n         if (!isFilesDirectoryAccessible) {\n-            bootstrapErrorMessage = Error.getMinimalErrorString(filesDirectoryAccessibleError) + \"\\nTERMUX_FILES_DIR: \" + MarkdownUtils.getMarkdownCodeForString(TermuxConstants.TERMUX_FILES_DIR_PATH, false);\n+            bootstrapErrorMessage = Error.getMinimalErrorString(filesDirectoryAccessibleError);\n+            //noinspection SdCardPath\n+            if (PackageUtils.isAppInstalledOnExternalStorage(activity) &&\n+                !TermuxConstants.TERMUX_FILES_DIR_PATH.equals(activity.getFilesDir().getAbsolutePath().replaceAll(\"^/data/user/0/\", \"/data/data/\"))) {\n+                bootstrapErrorMessage += \"\\n\\n\" + activity.getString(R.string.bootstrap_error_installed_on_portable_sd,\n+                    MarkdownUtils.getMarkdownCodeForString(TERMUX_PREFIX_DIR_PATH, false));\n+            }\n+\n             Logger.logError(LOG_TAG, bootstrapErrorMessage);\n             sendBootstrapCrashReportNotification(activity, bootstrapErrorMessage);\n             MessageDialogUtils.showMessage(activity,",
    "output": "Added: Add message to bootstrap error if user installed termux on portable/external/removable sd card since its not supported on some devices"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/android/resource/ResourceUtils.java b/termux-shared/src/main/java/com/termux/shared/android/resource/ResourceUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/android/resource/ResourceUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/android/resource/ResourceUtils.java\n@@ -0,0 +1,136 @@\n+package com.termux.shared.android.resource;\n+\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.termux.shared.data.DataUtils;\n+import com.termux.shared.logger.Logger;\n+\n+public class ResourceUtils {\n+\n+    public static final String RES_TYPE_COLOR = \"color\";\n+    public static final String RES_TYPE_DRAWABLE = \"drawable\";\n+    public static final String RES_TYPE_ID = \"id\";\n+    public static final String RES_TYPE_LAYOUT = \"layout\";\n+    public static final String RES_TYPE_STRING = \"string\";\n+    public static final String RES_TYPE_STYLE = \"style\";\n+\n+\n+    private static final String LOG_TAG = \"ResourceUtils\";\n+\n+\n+    /** Wrapper for {@link #getResourceId(Context, String, String, String, boolean)} without {@code defPackage}. */\n+    @Nullable\n+    public static Integer getResourceId(@NonNull Context context, String name,\n+                                        @Nullable String defType,\n+                                        boolean logErrorMessage) {\n+        return getResourceId(context, name, defType, null, logErrorMessage);\n+    }\n+\n+    /**\n+     * Get resource identifier for the given resource name. A fully qualified resource name is of\n+     * the form \"package:type/entry\".  The first two components (package and type) are optional if\n+     * defType and defPackage, respectively, are specified here.\n+     *\n+     * @param context The {@link Context} for operations.\n+     * @param name The name of the desired resource.\n+     * @param defType Optional default resource type to find, if \"type/\" is not included in the name.\n+     *                Can be null to require an explicit type.\n+     * @param defPackage Optional default package to find, if \"package:\" is not included in the name.\n+     *                   Can be null to require an explicit package.\n+     * @param logErrorMessage If an error message should be logged if failed to find resource.\n+     * @return Returns the resource identifier if found. Otherwise {@code null} if an exception was\n+     * raised or resource was not found.\n+     */\n+    @Nullable\n+    public static Integer getResourceId(@NonNull Context context, String name,\n+                                        @Nullable String defType, @Nullable String defPackage,\n+                                        boolean logErrorMessage) {\n+        if (DataUtils.isNullOrEmpty(name)) return null;\n+\n+        Integer resourceId = null;\n+        try {\n+            resourceId = context.getResources().getIdentifier(name, defType, defPackage);\n+            if (resourceId == 0) resourceId = null;\n+        } catch (Exception e) {\n+            // Ignore\n+        }\n+\n+        if (resourceId == null && logErrorMessage) {\n+            Logger.logError(LOG_TAG, \"Resource id not found. name: \\\"\" + name + \"\\\", type: \\\"\" + defType+ \"\\\", package: \\\"\" + defPackage + \"\\\", component \\\"\" + context.getClass().getName() + \"\\\"\");\n+        }\n+\n+        return resourceId;\n+    }\n+\n+\n+\n+    /**\n+     * Get resource identifier for the given {@link #RES_TYPE_COLOR} resource name.\n+     *\n+     * This is a wrapper for {@link #getResourceId(Context, String, String, String, boolean)}.\n+     */\n+    @Nullable\n+    public static Integer getColorResourceId(@NonNull Context context, String name,\n+                                             @Nullable String defPackage, boolean logErrorMessage) {\n+        return getResourceId(context, name, RES_TYPE_COLOR, defPackage, logErrorMessage);\n+    }\n+\n+    /**\n+     * Get resource identifier for the given {@link #RES_TYPE_DRAWABLE} resource name.\n+     *\n+     * This is a wrapper for {@link #getResourceId(Context, String, String, String, boolean)}.\n+     */\n+    @Nullable\n+    public static Integer getDrawableResourceId(@NonNull Context context, String name,\n+                                                @Nullable String defPackage, boolean logErrorMessage) {\n+        return getResourceId(context, name, RES_TYPE_DRAWABLE, defPackage, logErrorMessage);\n+    }\n+\n+    /**\n+     * Get resource identifier for the given {@link #RES_TYPE_ID} resource name.\n+     *\n+     * This is a wrapper for {@link #getResourceId(Context, String, String, String, boolean)}.\n+     */\n+    @Nullable\n+    public static Integer getIdResourceId(@NonNull Context context, String name,\n+                                          @Nullable String defPackage, boolean logErrorMessage) {\n+        return getResourceId(context, name, RES_TYPE_ID, defPackage, logErrorMessage);\n+    }\n+\n+    /**\n+     * Get resource identifier for the given {@link #RES_TYPE_LAYOUT} resource name.\n+     *\n+     * This is a wrapper for {@link #getResourceId(Context, String, String, String, boolean)}.\n+     */\n+    @Nullable\n+    public static Integer getLayoutResourceId(@NonNull Context context, String name,\n+                                              @Nullable String defPackage, boolean logErrorMessage) {\n+        return getResourceId(context, name, RES_TYPE_LAYOUT, defPackage, logErrorMessage);\n+    }\n+\n+    /**\n+     * Get resource identifier for the given {@link #RES_TYPE_STRING} resource name.\n+     *\n+     * This is a wrapper for {@link #getResourceId(Context, String, String, String, boolean)}.\n+     */\n+    @Nullable\n+    public static Integer getStringResourceId(@NonNull Context context, String name,\n+                                              @Nullable String defPackage, boolean logErrorMessage) {\n+        return getResourceId(context, name, RES_TYPE_STRING, defPackage, logErrorMessage);\n+    }\n+\n+    /**\n+     * Get resource identifier for the given {@link #RES_TYPE_STYLE} resource name.\n+     *\n+     * This is a wrapper for {@link #getResourceId(Context, String, String, String, boolean)}.\n+     */\n+    @Nullable\n+    public static Integer getStyleResourceId(@NonNull Context context, String name,\n+                                             @Nullable String defPackage, boolean logErrorMessage) {\n+        return getResourceId(context, name, RES_TYPE_STYLE, defPackage, logErrorMessage);\n+    }\n+\n+}",
    "output": "Added: Add ResourceUtils to get resource ids from names\n\nThis will mainly be used later when MediaViewer gets added."
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/termux/shell/TermuxShellUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/shell/TermuxShellUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/shell/TermuxShellUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/shell/TermuxShellUtils.java\n@@ -1,9 +1,11 @@\n package com.termux.shared.termux.shell;\n \n import android.content.Context;\n+import android.os.Build;\n \n import androidx.annotation.NonNull;\n \n+import com.termux.shared.BuildConfig;\n import com.termux.shared.errors.Error;\n import com.termux.shared.file.filesystem.FileTypes;\n import com.termux.shared.termux.TermuxBootstrap;\n@@ -95,9 +97,14 @@ public static String[] buildEnvironment(Context currentPackageContext, boolean i\n             environment.add(\"PATH= \" + System.getenv(\"PATH\"));\n         } else {\n             environment.add(\"LANG=en_US.UTF-8\");\n-            environment.add(\"PATH=\" + TermuxConstants.TERMUX_BIN_PREFIX_DIR_PATH);\n             environment.add(\"PWD=\" + workingDirectory);\n             environment.add(\"TMPDIR=\" + TermuxConstants.TERMUX_TMP_PREFIX_DIR_PATH);\n+            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N) {\n+                environment.add(\"PATH=\" + TermuxConstants.TERMUX_BIN_PREFIX_DIR_PATH + \":\" + TermuxConstants.TERMUX_BIN_PREFIX_DIR_PATH + \"/applets\");\n+                environment.add(\"LD_LIBRARY_PATH=\" + TermuxConstants.TERMUX_LIB_PREFIX_DIR_PATH);\n+            } else {\n+                environment.add(\"PATH=\" + TermuxConstants.TERMUX_BIN_PREFIX_DIR_PATH);\n+            }\n         }\n \n         return environment.toArray(new String[0]);",
    "output": "Changed: Export correct PATH and also export LD_LIBRARY_PATH for Android 5/6 since packages won't use DT_RUNPATH"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -173,7 +173,7 @@ public final class TermuxActivity extends AppCompatActivity implements ServiceCo\n \n     private int mNavBarHeight;\n \n-    private int mTerminalToolbarDefaultHeight;\n+    private float mTerminalToolbarDefaultHeight;\n \n \n     private static final int CONTEXT_MENU_SELECT_URL_ID = 0;\n@@ -528,7 +528,7 @@ private void setTerminalToolbarHeight() {\n         if (terminalToolbarViewPager == null) return;\n \n         ViewGroup.LayoutParams layoutParams = terminalToolbarViewPager.getLayoutParams();\n-        layoutParams.height = (int) Math.round(mTerminalToolbarDefaultHeight *\n+        layoutParams.height = Math.round(mTerminalToolbarDefaultHeight *\n             (mTermuxTerminalExtraKeys.getExtraKeysInfo() == null ? 0 : mTermuxTerminalExtraKeys.getExtraKeysInfo().getMatrix().length) *\n             mProperties.getTerminalToolbarHeightScaleFactor());\n         terminalToolbarViewPager.setLayoutParams(layoutParams);\n@@ -835,6 +835,10 @@ public ViewPager getTerminalToolbarViewPager() {\n         return (ViewPager) findViewById(R.id.terminal_toolbar_view_pager);\n     }\n \n+    public float getTerminalToolbarDefaultHeight() {\n+        return mTerminalToolbarDefaultHeight;\n+    }\n+\n     public boolean isTerminalViewSelected() {\n         return getTerminalToolbarViewPager().getCurrentItem() == 0;\n     }\n@@ -960,7 +964,7 @@ private void reloadActivityStyling(boolean recreateActivity) {\n \n             if (mExtraKeysView != null) {\n                 mExtraKeysView.setButtonTextAllCaps(mProperties.shouldExtraKeysTextBeAllCaps());\n-                mExtraKeysView.reload(mTermuxTerminalExtraKeys.getExtraKeysInfo());\n+                mExtraKeysView.reload(mTermuxTerminalExtraKeys.getExtraKeysInfo(), mTerminalToolbarDefaultHeight);\n             }\n \n             // Update NightMode.APP_NIGHT_MODE\n\ndiff --git a/app/src/main/java/com/termux/app/terminal/io/TerminalToolbarViewPager.java b/app/src/main/java/com/termux/app/terminal/io/TerminalToolbarViewPager.java\n--- a/app/src/main/java/com/termux/app/terminal/io/TerminalToolbarViewPager.java\n+++ b/app/src/main/java/com/termux/app/terminal/io/TerminalToolbarViewPager.java\n@@ -47,7 +47,8 @@ public Object instantiateItem(@NonNull ViewGroup collection, int position) {\n                 extraKeysView.setExtraKeysViewClient(mActivity.getTermuxTerminalExtraKeys());\n                 extraKeysView.setButtonTextAllCaps(mActivity.getProperties().shouldExtraKeysTextBeAllCaps());\n                 mActivity.setExtraKeysView(extraKeysView);\n-                extraKeysView.reload(mActivity.getTermuxTerminalExtraKeys().getExtraKeysInfo());\n+                extraKeysView.reload(mActivity.getTermuxTerminalExtraKeys().getExtraKeysInfo(),\n+                    mActivity.getTerminalToolbarDefaultHeight());\n \n                 // apply extra keys fix if enabled in prefs\n                 if (mActivity.getProperties().isUsingFullScreen() && mActivity.getProperties().isUsingFullScreenWorkAround()) {\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/extrakeys/ExtraKeysView.java b/termux-shared/src/main/java/com/termux/shared/termux/extrakeys/ExtraKeysView.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/extrakeys/ExtraKeysView.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/extrakeys/ExtraKeysView.java\n@@ -60,7 +60,7 @@\n  * in {@link ExtraKeysView#ExtraKeysView(Context, AttributeSet)} by calling the respective functions.\n  * If you extend {@link ExtraKeysView}, you can also set them in the constructor, but do call super().\n  *\n- * After this you will have to make a call to {@link ExtraKeysView#reload(ExtraKeysInfo) and pass\n+ * After this you will have to make a call to {@link ExtraKeysView#reload(ExtraKeysInfo, float) and pass\n  * it the {@link ExtraKeysInfo} to load and display the extra keys. Read its class javadocs for more\n  * info on how to create it.\n  *\n@@ -379,9 +379,11 @@ public Map<SpecialButton, SpecialButtonState> getDefaultSpecialButtons(ExtraKeys\n      * Reload this instance of {@link ExtraKeysView} with the info passed in {@code extraKeysInfo}.\n      *\n      * @param extraKeysInfo The {@link ExtraKeysInfo} that defines the necessary info for the extra keys.\n+     * @param heightPx The height in pixels of the parent surrounding the {@link ExtraKeysView}. It must\n+     *                 be a single child.\n      */\n     @SuppressLint(\"ClickableViewAccessibility\")\n-    public void reload(ExtraKeysInfo extraKeysInfo) {\n+    public void reload(ExtraKeysInfo extraKeysInfo, float heightPx) {\n         if (extraKeysInfo == null)\n             return;\n \n@@ -469,7 +471,11 @@ public void reload(ExtraKeysInfo extraKeysInfo) {\n \n                 LayoutParams param = new GridLayout.LayoutParams();\n                 param.width = 0;\n-                param.height = 0;\n+                if(Build.VERSION.SDK_INT == Build.VERSION_CODES.LOLLIPOP) {\n+                   param.height = (int)(heightPx + 0.5);\n+                } else {\n+                    param.height = 0;\n+                }\n                 param.setMargins(0, 0, 0, 0);\n                 param.columnSpec = GridLayout.spec(col, GridLayout.FILL, 1.f);\n                 param.rowSpec = GridLayout.spec(row, GridLayout.FILL, 1.f);",
    "output": "Fixed: Fixed extra keys not showing properly on Android 5\n\nRelated issue #739"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/view/ViewUtils.java b/termux-shared/src/main/java/com/termux/shared/view/ViewUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/view/ViewUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/view/ViewUtils.java\n@@ -221,6 +221,10 @@ public static Activity getActivity(Context context) {\n     public static float dpToPx(Context context, float dp) {\n         return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, context.getResources().getDisplayMetrics());\n     }\n+\n+    /** Convert value in pixels (px) to device independent pixels (dp) units. */\n+    public static float pxToDp(Context context, float px) {\n+        return px / context.getResources().getDisplayMetrics().density;\n     }\n \n ",
    "output": "Added: Add `ViewUtils.pxToDp()`"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/view/ViewUtils.java b/termux-shared/src/main/java/com/termux/shared/view/ViewUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/view/ViewUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/view/ViewUtils.java\n@@ -216,15 +216,18 @@ public static Activity getActivity(Context context) {\n         return null;\n     }\n \n+\n     /** Convert value in device independent pixels (dp) to pixels (px) units. */\n-    public static int dpToPx(Context context, int dp) {\n-        return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, context.getResources().getDisplayMetrics());\n+    public static float dpToPx(Context context, float dp) {\n+        return TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, dp, context.getResources().getDisplayMetrics());\n+    }\n     }\n \n \n     public static void setLayoutMarginsInDp(@NonNull View view, int left, int top, int right, int bottom) {\n         Context context = view.getContext();\n-        setLayoutMarginsInPixels(view, dpToPx(context, left), dpToPx(context, top), dpToPx(context, right), dpToPx(context, bottom));\n+        setLayoutMarginsInPixels(view, (int) dpToPx(context, left), (int) dpToPx(context, top),\n+            (int) dpToPx(context, right), (int) dpToPx(context, bottom));\n     }\n \n     public static void setLayoutMarginsInPixels(@NonNull View view, int left, int top, int right, int bottom) {",
    "output": "Changed: Use float dp parameter instead of int for `ViewUtils.dpToPx()` to not lose precision"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/jni/models/JniResult.java b/termux-shared/src/main/java/com/termux/shared/jni/models/JniResult.java\n--- a/termux-shared/src/main/java/com/termux/shared/jni/models/JniResult.java\n+++ b/termux-shared/src/main/java/com/termux/shared/jni/models/JniResult.java\n@@ -1,5 +1,6 @@\n package com.termux.shared.jni.models;\n \n+import androidx.annotation.Keep;\n import androidx.annotation.NonNull;\n \n import com.termux.shared.logger.Logger;\n@@ -11,6 +12,7 @@\n  * https://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/functions.html\n  * https://developer.android.com/training/articles/perf-jni\n  */\n+@Keep\n public class JniResult {\n \n     /**\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/net/socket/local/PeerCred.java b/termux-shared/src/main/java/com/termux/shared/net/socket/local/PeerCred.java\n--- a/termux-shared/src/main/java/com/termux/shared/net/socket/local/PeerCred.java\n+++ b/termux-shared/src/main/java/com/termux/shared/net/socket/local/PeerCred.java\n@@ -2,6 +2,7 @@\n \n import android.content.Context;\n \n+import androidx.annotation.Keep;\n import androidx.annotation.NonNull;\n \n import com.termux.shared.android.ProcessUtils;\n@@ -10,6 +11,7 @@\n import com.termux.shared.markdown.MarkdownUtils;\n \n /** The {@link PeerCred} of the {@link LocalClientSocket} containing info of client/peer. */\n+@Keep\n public class PeerCred {\n \n     public static final String LOG_TAG = \"PeerCred\";",
    "output": "Fixed: Fix proguard removing JNI used methods for release builds\n\n```\nException in createServerSocketNative():\njava.lang.NoSuchMethodError: no non-static method \"Lcom/termux/shared/jni/models/JniResult;.<init>(IILjava/lang/String;I)V\"\n\tat com.termux.shared.net.socket.local.LocalSocketManager.createServerSocketNative(Native Method)\n\tat com.termux.shared.net.socket.local.LocalSocketManager.createServerSocket(LocalSocketManager.java:125)\n\tat com.termux.shared.net.socket.local.LocalServerSocket.start(LocalServerSocket.java:100)\n\tat com.termux.shared.net.socket.local.LocalSocketManager.start(LocalSocketManager.java:84)\n\tat com.termux.shared.shell.am.AmSocketServer.start(AmSocketServer.java:68)\n\tat com.termux.shared.termux.shell.am.TermuxAmSocketServer.start(TermuxAmSocketServer.java:101)\n\tat com.termux.shared.termux.shell.am.TermuxAmSocketServer.setupTermuxAmSocketServer(TermuxAmSocketServer.java:77)\n\tat com.termux.app.TermuxApplication.onCreate(TermuxApplication.java:53)\n\tat android.app.Instrumentation.callApplicationOnCreate(Instrumentation.java:1192)\n\tat android.app.ActivityThread.handleBindApplication(ActivityThread.java:6719)\n\tat android.app.ActivityThread.access$1300(ActivityThread.java:237)\n\tat android.app.ActivityThread$H.handleMessage(ActivityThread.java:1913)\n\tat android.os.Handler.dispatchMessage(Handler.java:106)\n\tat android.os.Looper.loop(Looper.java:223)\n\tat android.app.ActivityThread.main(ActivityThread.java:7664)\n\tat java.lang.reflect.Method.invoke(Native Method)\n\tat com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:592)\n\tat com.android.internal.os.ZygoteInit.main(ZygoteInit.java:947)\n```"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/termux/settings/properties/TermuxPropertyConstants.java b/termux-shared/src/main/java/com/termux/shared/termux/settings/properties/TermuxPropertyConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/settings/properties/TermuxPropertyConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/settings/properties/TermuxPropertyConstants.java\n@@ -1,6 +1,7 @@\n package com.termux.shared.termux.settings.properties;\n \n import com.google.common.collect.ImmutableBiMap;\n+import com.termux.shared.termux.shell.am.TermuxAmSocketServer;\n import com.termux.shared.theme.NightMode;\n import com.termux.shared.file.FileUtils;\n import com.termux.shared.file.filesystem.FileType;\n@@ -120,6 +121,11 @@ public final class TermuxPropertyConstants {\n \n \n \n+    /** Defines the key for whether the {@link TermuxAmSocketServer} should be run at app startup */\n+    public static final String KEY_RUN_TERMUX_AM_SOCKET_SERVER =  \"run-termux-am-socket-server\"; // Default: \"run-termux-am-socket-server\"\n+\n+\n+\n     /** Defines the key for whether url links in terminal transcript will automatically open on click or on tap */\n     public static final String KEY_TERMINAL_ONCLICK_URL_OPEN =  \"terminal-onclick-url-open\"; // Default: \"terminal-onclick-url-open\"\n \n@@ -379,6 +385,7 @@ public final class TermuxPropertyConstants {\n         KEY_ENFORCE_CHAR_BASED_INPUT,\n         KEY_EXTRA_KEYS_TEXT_ALL_CAPS,\n         KEY_HIDE_SOFT_KEYBOARD_ON_STARTUP,\n+        KEY_RUN_TERMUX_AM_SOCKET_SERVER,\n         KEY_TERMINAL_ONCLICK_URL_OPEN,\n         KEY_USE_CTRL_SPACE_WORKAROUND,\n         KEY_USE_FULLSCREEN,\n@@ -436,7 +443,8 @@ public final class TermuxPropertyConstants {\n      * default: true\n      */\n     public static final Set<String> TERMUX_DEFAULT_TRUE_BOOLEAN_BEHAVIOUR_PROPERTIES_LIST = new HashSet<>(Arrays.asList(\n-        KEY_EXTRA_KEYS_TEXT_ALL_CAPS\n+        KEY_EXTRA_KEYS_TEXT_ALL_CAPS,\n+        KEY_RUN_TERMUX_AM_SOCKET_SERVER\n     ));\n \n     /** Defines the set for keys loaded by termux that have default inverted boolean behaviour with false as default.\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/settings/properties/TermuxSharedProperties.java b/termux-shared/src/main/java/com/termux/shared/termux/settings/properties/TermuxSharedProperties.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/settings/properties/TermuxSharedProperties.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/settings/properties/TermuxSharedProperties.java\n@@ -583,6 +583,10 @@ public boolean shouldSoftKeyboardBeHiddenOnStartup() {\n         return (boolean) getInternalPropertyValue(TermuxPropertyConstants.KEY_HIDE_SOFT_KEYBOARD_ON_STARTUP, true);\n     }\n \n+    public boolean shouldRunTermuxAmSocketServer() {\n+        return (boolean) getInternalPropertyValue(TermuxPropertyConstants.KEY_RUN_TERMUX_AM_SOCKET_SERVER, true);\n+    }\n+\n     public boolean shouldOpenTerminalTranscriptURLOnClick() {\n         return (boolean) getInternalPropertyValue(TermuxPropertyConstants.KEY_TERMINAL_ONCLICK_URL_OPEN, true);\n     }",
    "output": "Added: Allow users to disable `termux-am` server\n\nThe user can add `run-termux-am-socket-server=false` entry to `termux.properties` file to disable the `termux-am` server to run at app startup which is connected to by `$PREFIX/bin/termux-am` from the `termux-am-socket` package. The default value is `true`. Changes require `termux-app` to be force stopped and restarted to provide consistent state for all termux sessions and tasks.\n\nThe prop will be used in a later commit."
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/android/ProcessUtils.java b/termux-shared/src/main/java/com/termux/shared/android/ProcessUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/android/ProcessUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/android/ProcessUtils.java\n@@ -0,0 +1,58 @@\n+package com.termux.shared.android;\n+\n+import android.app.ActivityManager;\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.termux.shared.logger.Logger;\n+\n+import java.util.List;\n+\n+public class ProcessUtils {\n+\n+    public static final String LOG_TAG = \"ProcessUtils\";\n+\n+    /**\n+     * Get the app process name for a pid with a call to {@link ActivityManager#getRunningAppProcesses()}.\n+     *\n+     * This will not return child process names. Android did not keep track of them before android 12\n+     * phantom process addition, but there is no API via IActivityManager to get them.\n+     *\n+     * To get process name for pids of own app's child processes, check `get_process_name_from_cmdline()`\n+     * in `local-socket.cpp`.\n+     *\n+     * https://cs.android.com/android/platform/superproject/+/android-12.0.0_r32:frameworks/base/core/java/android/app/ActivityManager.java;l=3362\n+     * https://cs.android.com/android/platform/superproject/+/android-12.0.0_r32:frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java;l=8434\n+     * https://cs.android.com/android/_/android/platform/frameworks/base/+/refs/tags/android-12.0.0_r32:services/core/java/com/android/server/am/PhantomProcessList.java\n+     * https://cs.android.com/android/_/android/platform/frameworks/base/+/refs/tags/android-12.0.0_r32:services/core/java/com/android/server/am/PhantomProcessRecord.java\n+     *\n+     * @param context The {@link Context} for operations.\n+     * @param pid The pid of the process.\n+     * @return Returns the app process name if found, otherwise {@code null}.\n+     */\n+    @Nullable\n+    public static String getAppProcessNameForPid(@NonNull Context context, int pid) {\n+        if (pid < 0) return null;\n+\n+        ActivityManager activityManager = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);\n+        if (activityManager == null) return null;\n+        try {\n+            List<ActivityManager.RunningAppProcessInfo> runningApps = activityManager.getRunningAppProcesses();\n+            if (runningApps == null) {\n+                return null;\n+            }\n+            for (ActivityManager.RunningAppProcessInfo procInfo : runningApps) {\n+                if (procInfo.pid == pid) {\n+                    return procInfo.processName;\n+                }\n+            }\n+        } catch (Exception e) {\n+            Logger.logStackTraceWithMessage(LOG_TAG, \"Failed to get app process name for pid \" + pid, e);\n+        }\n+\n+        return null;\n+    }\n+\n+}",
    "output": "Added: Add function to `ProcessUtils` to get app process name for a pid from `ActivityManager`"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/android/UserUtils.java b/termux-shared/src/main/java/com/termux/shared/android/UserUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/android/UserUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/android/UserUtils.java\n@@ -0,0 +1,143 @@\n+package com.termux.shared.android;\n+\n+import android.content.Context;\n+import android.content.pm.PackageManager;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.termux.shared.logger.Logger;\n+import com.termux.shared.reflection.ReflectionUtils;\n+\n+import java.lang.reflect.Method;\n+\n+public class UserUtils {\n+\n+    public static final String LOG_TAG = \"UserUtils\";\n+\n+    /**\n+     * Get the user name for user id with a call to {@link #getNameForUidFromPackageManager(Context, int)}\n+     * and if that fails, then a call to {@link #getNameForUidFromLibcore(int)}.\n+     *\n+     * @param context The {@link Context} for operations.\n+     * @param uid The user id.\n+     * @return Returns the user name if found, otherwise {@code null}.\n+     */\n+    @Nullable\n+    public static String getNameForUid(@NonNull Context context, int uid) {\n+        String name = getNameForUidFromPackageManager(context, uid);\n+        if (name == null)\n+            name = getNameForUidFromLibcore(uid);\n+        return name;\n+    }\n+\n+    /**\n+     * Get the user name for user id with a call to {@link PackageManager#getNameForUid(int)}.\n+     *\n+     * This will not return user names for non app user id like for root user 0, use {@link #getNameForUidFromLibcore(int)}\n+     * to get those.\n+     *\n+     * https://cs.android.com/android/platform/superproject/+/android-12.0.0_r32:frameworks/base/core/java/android/content/pm/PackageManager.java;l=5556\n+     * https://cs.android.com/android/platform/superproject/+/android-12.0.0_r32:frameworks/base/core/java/android/app/ApplicationPackageManager.java;l=1028\n+     * https://cs.android.com/android/platform/superproject/+/android-12.0.0_r32:frameworks/base/services/core/java/com/android/server/pm/PackageManagerService.java;l=10293\n+     *\n+     * @param context The {@link Context} for operations.\n+     * @param uid The user id.\n+     * @return Returns the user name if found, otherwise {@code null}.\n+     */\n+    @Nullable\n+    public static String getNameForUidFromPackageManager(@NonNull Context context, int uid) {\n+        if (uid < 0) return null;\n+\n+        try {\n+            String name = context.getPackageManager().getNameForUid(uid);\n+            if (name != null && name.endsWith(\":\" + uid))\n+                name = name.replaceAll(\":\" + uid + \"$\", \"\"); // Remove \":<uid>\" suffix\n+            return name;\n+        } catch (Exception e) {\n+            Logger.logStackTraceWithMessage(LOG_TAG, \"Failed to get name for uid \\\"\" + uid + \"\\\" from package manager\", e);\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Get the user name for user id with a call to `Libcore.os.getpwuid()`.\n+     *\n+     * This will return user names for non app user id like for root user 0 as well, but this call\n+     * is expensive due to usage of reflection, and requires hidden API bypass, check\n+     * {@link ReflectionUtils#bypassHiddenAPIReflectionRestrictions()} for details.\n+     *\n+     * `BlockGuardOs` implements the `Os` interface and its instance is stored in `Libcore` class static `os` field.\n+     * The `getpwuid` method is implemented by `ForwardingOs`, which is the super class of `BlockGuardOs`.\n+     * The `getpwuid` method returns `StructPasswd` object whose `pw_name` contains the user name for id.\n+     *\n+     * https://stackoverflow.com/a/28057167/14686958\n+     * https://cs.android.com/android/platform/superproject/+/android-12.0.0_r32:libcore/luni/src/main/java/libcore/io/Libcore.java;l=39\n+     * https://cs.android.com/android/platform/superproject/+/android-12.0.0_r32:libcore/luni/src/main/java/libcore/io/Os.java;l=279\n+     * https://cs.android.com/android/platform/superproject/+/android-12.0.0_r32:libcore/luni/src/main/java/libcore/io/BlockGuardOs.java\n+     * https://cs.android.com/android/platform/superproject/+/android-12.0.0_r32:libcore/luni/src/main/java/libcore/io/ForwardingOs.java;l=340\n+     * https://cs.android.com/android/platform/superproject/+/android-12.0.0_r32:libcore/luni/src/main/java/android/system/StructPasswd.java\n+     * https://cs.android.com/android/platform/superproject/+/android-12.0.0_r32:bionic/libc/bionic/grp_pwd.cpp;l=553\n+     * https://cs.android.com/android/platform/superproject/+/android-12.0.0_r32:system/core/libcutils/include/private/android_filesystem_config.h;l=43\n+     *\n+     * @param uid The user id.\n+     * @return Returns the user name if found, otherwise {@code null}.\n+     */\n+    @Nullable\n+    public static String getNameForUidFromLibcore(int uid) {\n+        if (uid < 0) return null;\n+\n+        ReflectionUtils.bypassHiddenAPIReflectionRestrictions();\n+        try {\n+            String libcoreClassName = \"libcore.io.Libcore\";\n+            Class<?> clazz = Class.forName(libcoreClassName);\n+            Object os; // libcore.io.BlockGuardOs\n+            try {\n+                os = ReflectionUtils.invokeField(Class.forName(libcoreClassName), \"os\", null).value;\n+            } catch (Exception e) {\n+                // ClassCastException may be thrown\n+                Logger.logStackTraceWithMessage(LOG_TAG, \"Failed to get \\\"os\\\" field value for \" + libcoreClassName + \" class\", e);\n+                return null;\n+            }\n+\n+            if (os == null) {\n+                Logger.logError(LOG_TAG, \"Failed to get BlockGuardOs class obj from Libcore\");\n+                return null;\n+            }\n+\n+            clazz = os.getClass().getSuperclass();  // libcore.io.ForwardingOs\n+            if (clazz == null) {\n+                Logger.logError(LOG_TAG, \"Failed to find super class ForwardingOs from object of class \" + os.getClass().getName());\n+                return null;\n+            }\n+\n+            Object structPasswd; // android.system.StructPasswd\n+            try {\n+                Method getpwuidMethod = ReflectionUtils.getDeclaredMethod(clazz, \"getpwuid\", int.class);\n+                if (getpwuidMethod == null) return null;\n+                structPasswd = ReflectionUtils.invokeMethod(getpwuidMethod, os, uid).value;\n+            } catch (Exception e) {\n+                Logger.logStackTraceWithMessage(LOG_TAG, \"Failed to invoke getpwuid() method of \" + clazz.getName() + \" class\", e);\n+                return null;\n+            }\n+\n+            if (structPasswd == null) {\n+                Logger.logError(LOG_TAG, \"Failed to get StructPasswd obj from call to ForwardingOs.getpwuid()\");\n+                return null;\n+            }\n+\n+            try {\n+                clazz = structPasswd.getClass();\n+                return (String) ReflectionUtils.invokeField(clazz, \"pw_name\", structPasswd).value;\n+            } catch (Exception e) {\n+                // ClassCastException may be thrown\n+                Logger.logStackTraceWithMessage(LOG_TAG, \"Failed to get \\\"pw_name\\\" field value for \" + clazz.getName() + \" class\", e);\n+                return null;\n+            }\n+        } catch (Exception e) {\n+            Logger.logStackTraceWithMessage(LOG_TAG, \"Failed to get name for uid \\\"\" + uid + \"\\\" from Libcore\", e);\n+            return null;\n+        }\n+    }\n+\n+}",
    "output": "Added: Add functions to `UserUtils` to get user name for user id from `PackageManager` and `Libcore`"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxApplication.java b/app/src/main/java/com/termux/app/TermuxApplication.java\n--- a/app/src/main/java/com/termux/app/TermuxApplication.java\n+++ b/app/src/main/java/com/termux/app/TermuxApplication.java\n@@ -4,16 +4,20 @@\n import android.content.Context;\n \n import com.termux.am.Am;\n+import com.termux.shared.errors.Error;\n import com.termux.shared.logger.Logger;\n import com.termux.shared.shell.LocalSocketListener;\n import com.termux.shared.termux.TermuxConstants;\n import com.termux.shared.termux.crash.TermuxCrashUtils;\n+import com.termux.shared.termux.file.TermuxFileUtils;\n import com.termux.shared.termux.settings.preferences.TermuxAppSharedPreferences;\n import com.termux.shared.termux.settings.properties.TermuxAppSharedProperties;\n import com.termux.shared.termux.theme.TermuxThemeUtils;\n \n public class TermuxApplication extends Application {\n \n+    private static final String LOG_TAG = \"TermuxApplication\";\n+\n     public void onCreate() {\n         super.onCreate();\n \n@@ -33,6 +37,21 @@ public void onCreate() {\n         // Set NightMode.APP_NIGHT_MODE\n         TermuxThemeUtils.setAppNightMode(properties.getNightMode());\n \n+        // Check and create termux files directory. If failed to access it like in case of secondary\n+        // user or external sd card installation, then don't run files directory related code\n+        Error error = TermuxFileUtils.isTermuxFilesDirectoryAccessible(this, true, true);\n+        if (error != null) {\n+            Logger.logErrorExtended(LOG_TAG, \"Termux files directory is not accessible\\n\" + error);\n+        } else {\n+            Logger.logInfo(LOG_TAG, \"Termux files directory is accessible\");\n+\n+            error = TermuxFileUtils.isAppsTermuxAppDirectoryAccessible(true, true);\n+            if (error != null) {\n+                Logger.logErrorExtended(LOG_TAG, \"Create apps/termux-app directory failed\\n\" + error);\n+                return;\n+            }\n+        }\n+\n         if (LocalSocketListener.tryEstablishLocalSocketListener(this, (args, out, err) -> {\n             try {\n                 new Am(out, err, this).run(args);\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n@@ -11,7 +11,7 @@\n import java.util.List;\n \n /*\n- * Version: v0.39.0\n+ * Version: v0.40.0\n  * SPDX-License-Identifier: MIT\n  *\n  * Changelog\n@@ -216,10 +216,10 @@\n  *      - Added `TERMUX_PROPERTIES_FILE_PATHS_LIST` and `TERMUX_FLOAT_PROPERTIES_FILE_PATHS_LIST`.\n  *\n  * - 0.34.0 (2021-10-26)\n- *  - Move `RESULT_SENDER` to `com.termux.shared.shell.command.ShellCommandConstants`.\n+ *      - Move `RESULT_SENDER` to `com.termux.shared.shell.command.ShellCommandConstants`.\n  *\n  * - 0.35.0 (2022-01-28)\n- *  - Add `TERMUX_APP.TERMUX_ACTIVITY.EXTRA_RECREATE_ACTIVITY`.\n+ *      - Add `TERMUX_APP.TERMUX_ACTIVITY.EXTRA_RECREATE_ACTIVITY`.\n  *\n  * - 0.36.0 (2022-03-10)\n  *      - Added `TERMUX_APP.TERMUX_SERVICE.EXTRA_RUNNER` and `TERMUX_APP.RUN_COMMAND_SERVICE.EXTRA_RUNNER`\n@@ -233,6 +233,9 @@\n  * - 0.39.0 (2022-03-18)\n  *      - Added `TERMUX_APP.TERMUX_SERVICE.EXTRA_SESSION_NAME`, `TERMUX_APP.RUN_COMMAND_SERVICE.EXTRA_SESSION_NAME`,\n  *          `TERMUX_APP.TERMUX_SERVICE.EXTRA_SESSION_CREATE_MODE` and `TERMUX_APP.RUN_COMMAND_SERVICE.EXTRA_SESSION_CREATE_MODE`.\n+ *\n+ * - 0.40.0 (2022-04-17)\n+ *      - Added `TERMUX_APPS_DIR_PATH` and `TERMUX_APP.APPS_DIR_PATH`.\n  */\n \n /**\n@@ -657,6 +660,11 @@ public final class TermuxConstants {\n \n \n \n+    /** Termux and plugin apps directory path */\n+    public static final String TERMUX_APPS_DIR_PATH = TERMUX_FILES_DIR_PATH + \"/apps\"; // Default: \"/data/data/com.termux/files/apps\"\n+    /** Termux and plugin apps directory */\n+    public static final File TERMUX_APPS_DIR = new File(TERMUX_APPS_DIR_PATH);\n+\n \n \n     /*\n@@ -872,6 +880,10 @@ public final class TermuxConstants {\n      */\n     public static final class TERMUX_APP {\n \n+        /** Termux apps directory path */\n+        public static final String APPS_DIR_PATH = TERMUX_APPS_DIR_PATH + \"/termux-app\"; // Default: \"/data/data/com.termux/files/apps/termux-app\"\n+\n+\n         /** Termux app core activity name. */\n         public static final String TERMUX_ACTIVITY_NAME = TERMUX_PACKAGE_NAME + \".app.TermuxActivity\"; // Default: \"com.termux.app.TermuxActivity\"\n \n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/file/TermuxFileUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/file/TermuxFileUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/file/TermuxFileUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/file/TermuxFileUtils.java\n@@ -307,6 +307,24 @@ public static Error isTermuxPrefixStagingDirectoryAccessible(boolean createDirec\n             false, false);\n     }\n \n+    /**\n+     * Validate if {@link TermuxConstants.TERMUX_APP#APPS_DIR_PATH} exists and has\n+     * {@link FileUtils#APP_WORKING_DIRECTORY_PERMISSIONS} permissions.\n+     *\n+     * @param createDirectoryIfMissing The {@code boolean} that decides if directory file\n+     *                                 should be created if its missing.\n+     * @param setMissingPermissions The {@code boolean} that decides if permissions are to be\n+     *                              automatically set.\n+     * @return Returns the {@code error} if path is not a directory file, failed to create it,\n+     * or validating permissions failed, otherwise {@code null}.\n+     */\n+    public static Error isAppsTermuxAppDirectoryAccessible(boolean createDirectoryIfMissing, boolean setMissingPermissions) {\n+        return FileUtils.validateDirectoryFileExistenceAndPermissions(\"apps/termux-app directory\", TermuxConstants.TERMUX_APP.APPS_DIR_PATH,\n+            null, createDirectoryIfMissing,\n+            FileUtils.APP_WORKING_DIRECTORY_PERMISSIONS, setMissingPermissions, true,\n+            false, false);\n+    }\n+\n     /**\n      * Get a markdown {@link String} for stat output for various Termux app files paths.\n      *",
    "output": "Added: Add `TERMUX_APPS_DIR_PATH` and `TERMUX_APP.APPS_DIR_PATH` and create them at application startup.\n\nThe termux files directory will also be checked and created if required at startup and code related to it will only be run if it is accessible. This can later also be used for init execution commands.\n\nThe `TERMUX_APP.APPS_DIR_PATH` will act as app specific directory for `termux-app` app related files. Other plugin apps will have their own directories under `TERMUX_APPS_DIR_PATH` if required."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -455,8 +455,10 @@ public synchronized AppShell createTermuxTask(ExecutionCommand executionCommand)\n             // If the execution command was started for a plugin, then process the error\n             if (executionCommand.isPluginExecutionCommand)\n                 TermuxPluginUtils.processPluginExecutionCommandError(this, LOG_TAG, executionCommand, false);\n-            else\n-                Logger.logErrorExtended(LOG_TAG, executionCommand.toString());\n+            else {\n+                Logger.logError(LOG_TAG, \"Set log level to debug or higher to see error in logs\");\n+                Logger.logErrorPrivateExtended(LOG_TAG, executionCommand.toString());\n+            }\n             return null;\n         }\n \n@@ -576,8 +578,10 @@ public synchronized TermuxSession createTermuxSession(ExecutionCommand execution\n             // If the execution command was started for a plugin, then process the error\n             if (executionCommand.isPluginExecutionCommand)\n                 TermuxPluginUtils.processPluginExecutionCommandError(this, LOG_TAG, executionCommand, false);\n-            else\n-                Logger.logErrorExtended(LOG_TAG, executionCommand.toString());\n+            else {\n+                Logger.logError(LOG_TAG, \"Set log level to debug or higher to see error in logs\");\n+                Logger.logErrorPrivateExtended(LOG_TAG, executionCommand.toString());\n+            }\n             return null;\n         }\n \n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/logger/Logger.java b/termux-shared/src/main/java/com/termux/shared/logger/Logger.java\n--- a/termux-shared/src/main/java/com/termux/shared/logger/Logger.java\n+++ b/termux-shared/src/main/java/com/termux/shared/logger/Logger.java\n@@ -120,6 +120,28 @@ public static void logErrorExtended(String message) {\n \n \n \n+    public static void logErrorPrivate(String tag, String message) {\n+        if (CURRENT_LOG_LEVEL >= LOG_LEVEL_DEBUG)\n+            logMessage(Log.ERROR, tag, message);\n+    }\n+\n+    public static void logErrorPrivate(String message) {\n+        if (CURRENT_LOG_LEVEL >= LOG_LEVEL_DEBUG)\n+            logMessage(Log.ERROR, DEFAULT_LOG_TAG, message);\n+    }\n+\n+    public static void logErrorPrivateExtended(String tag, String message) {\n+        if (CURRENT_LOG_LEVEL >= LOG_LEVEL_DEBUG)\n+            logExtendedMessage(Log.ERROR, tag, message);\n+    }\n+\n+    public static void logErrorPrivateExtended(String message) {\n+        if (CURRENT_LOG_LEVEL >= LOG_LEVEL_DEBUG)\n+            logExtendedMessage(Log.ERROR, DEFAULT_LOG_TAG, message);\n+    }\n+\n+\n+\n     public static void logWarn(String tag, String message) {\n         logMessage(Log.WARN, tag, message);\n     }\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/plugins/TermuxPluginUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/plugins/TermuxPluginUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/plugins/TermuxPluginUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/plugins/TermuxPluginUtils.java\n@@ -144,7 +144,9 @@ public static void processPluginExecutionCommandError(final Context context, Str\n         boolean isExecutionCommandLoggingEnabled = Logger.shouldEnableLoggingForCustomLogLevel(executionCommand.backgroundCustomLogLevel);\n \n         // Log the error and any exception. ResultData should not be logged if pending result since ResultSender will do it\n-        Logger.logErrorExtended(logTag, ExecutionCommand.getExecutionOutputLogString(executionCommand, true,\n+        Logger.logError(logTag, \"Processing plugin execution error for:\\n\" + executionCommand.getCommandIdAndLabelLogString());\n+        Logger.logError(logTag, \"Set log level to debug or higher to see error in logs\");\n+        Logger.logErrorPrivateExtended(logTag, ExecutionCommand.getExecutionOutputLogString(executionCommand, true,\n             !isPluginExecutionCommandWithPendingResult, isExecutionCommandLoggingEnabled));\n \n         // If execution command was started by a plugin which expects the result back\n@@ -161,7 +163,7 @@ public static void processPluginExecutionCommandError(final Context context, Str\n             if (error != null) {\n                 // error will be added to existing Errors\n                 resultData.setStateFailed(error);\n-                Logger.logErrorExtended(logTag, ExecutionCommand.getExecutionOutputLogString(executionCommand, true, true, isExecutionCommandLoggingEnabled));\n+                Logger.logErrorPrivateExtended(logTag, ExecutionCommand.getExecutionOutputLogString(executionCommand, true, true, isExecutionCommandLoggingEnabled));\n                 forceNotification = true;\n             }\n ",
    "output": "Added|Changed: Add `Logger.logErrorPrivate*()` functions which do not log errors that may contain potentially private info unless log level is debug or higher\n\nExecution commands and other errors that may contain potentially private info should not be logged unless user has explicitly allowed it since apps with `READ_LOGS` permission would be able to read the data. A notification for failed executions commands would still be shown if enabled and required."
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/reflection/ReflectionUtils.java b/termux-shared/src/main/java/com/termux/shared/reflection/ReflectionUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/reflection/ReflectionUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/reflection/ReflectionUtils.java\n@@ -86,7 +86,7 @@ public static class FieldInvokeResult {\n      * {@link Object} value.\n      */\n     @NonNull\n-    public static <T> FieldInvokeResult invokeField(@NonNull Class<T> clazz, @NonNull String fieldName, T object) {\n+    public static <T> FieldInvokeResult invokeField(@NonNull Class<? extends T> clazz, @NonNull String fieldName, T object) {\n         try {\n             Field field = getDeclaredField(clazz, fieldName);\n             if (field == null) return new FieldInvokeResult(false, null);",
    "output": "Fixed: Allow `Object` class object to be passed to `ReflectionUtils.invokeField()`"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java b/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n@@ -1116,6 +1116,21 @@ public static Error deleteSymlinkFile(String label, final String filePath, final\n         return deleteFile(label, filePath, ignoreNonExistentFile, false, FileType.SYMLINK.getValue());\n     }\n \n+    /**\n+     * Delete socket file at path.\n+     *\n+     * This function is a wrapper for {@link #deleteFile(String, String, boolean, boolean, int)}.\n+     *\n+     * @param label The optional label for file to delete. This can optionally be {@code null}.\n+     * @param filePath The {@code path} for file to delete.\n+     * @param ignoreNonExistentFile The {@code boolean} that decides if it should be considered an\n+     *                              error if file to deleted doesn't exist.\n+     * @return Returns the {@code error} if deletion was not successful, otherwise {@code null}.\n+     */\n+    public static Error deleteSocketFile(String label, final String filePath, final boolean ignoreNonExistentFile) {\n+        return deleteFile(label, filePath, ignoreNonExistentFile, false, FileType.SOCKET.getValue());\n+    }\n+\n     /**\n      * Delete regular, directory or symlink file at path.\n      *\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/file/filesystem/FileAttributes.java b/termux-shared/src/main/java/com/termux/shared/file/filesystem/FileAttributes.java\n--- a/termux-shared/src/main/java/com/termux/shared/file/filesystem/FileAttributes.java\n+++ b/termux-shared/src/main/java/com/termux/shared/file/filesystem/FileAttributes.java\n@@ -202,6 +202,10 @@ public boolean isFifo() {\n         return ((st_mode & UnixConstants.S_IFMT) == UnixConstants.S_IFIFO);\n     }\n \n+    public boolean isSocket() {\n+        return ((st_mode & UnixConstants.S_IFMT) == UnixConstants.S_IFSOCK);\n+    }\n+\n     public boolean isBlock() {\n         return ((st_mode & UnixConstants.S_IFMT) == UnixConstants.S_IFBLK);\n     }\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/file/filesystem/FileType.java b/termux-shared/src/main/java/com/termux/shared/file/filesystem/FileType.java\n--- a/termux-shared/src/main/java/com/termux/shared/file/filesystem/FileType.java\n+++ b/termux-shared/src/main/java/com/termux/shared/file/filesystem/FileType.java\n@@ -3,14 +3,15 @@\n /** The {@link Enum} that defines file types. */\n public enum FileType {\n \n-    NO_EXIST(\"no exist\", 0),    // 0000000\n-    REGULAR(\"regular\", 1),      // 0000001\n-    DIRECTORY(\"directory\", 2),  // 0000010\n-    SYMLINK(\"symlink\", 4),      // 0000100\n-    CHARACTER(\"character\", 8),  // 0001000\n-    FIFO(\"fifo\", 16),           // 0010000\n-    BLOCK(\"block\", 32),         // 0100000\n-    UNKNOWN(\"unknown\", 64);     // 1000000\n+    NO_EXIST(\"no exist\", 0),    // 00000000\n+    REGULAR(\"regular\", 1),      // 00000001\n+    DIRECTORY(\"directory\", 2),  // 00000010\n+    SYMLINK(\"symlink\", 4),      // 00000100\n+    SOCKET(\"socket\", 8),        // 00001000\n+    CHARACTER(\"character\", 16), // 00010000\n+    FIFO(\"fifo\", 32),           // 00100000\n+    BLOCK(\"block\", 64),         // 01000000\n+    UNKNOWN(\"unknown\", 128);    // 10000000\n \n     private final String name;\n     private final int value;\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/file/filesystem/FileTypes.java b/termux-shared/src/main/java/com/termux/shared/file/filesystem/FileTypes.java\n--- a/termux-shared/src/main/java/com/termux/shared/file/filesystem/FileTypes.java\n+++ b/termux-shared/src/main/java/com/termux/shared/file/filesystem/FileTypes.java\n@@ -104,6 +104,8 @@ else if (fileAttributes.isDirectory())\n             return FileType.DIRECTORY;\n         else if (fileAttributes.isSymbolicLink())\n             return FileType.SYMLINK;\n+        else if (fileAttributes.isSocket())\n+            return FileType.SOCKET;\n         else if (fileAttributes.isCharacter())\n             return FileType.CHARACTER;\n         else if (fileAttributes.isFifo())\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/file/filesystem/UnixConstants.java b/termux-shared/src/main/java/com/termux/shared/file/filesystem/UnixConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/file/filesystem/UnixConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/file/filesystem/UnixConstants.java\n@@ -88,6 +88,8 @@ private UnixConstants() { }\n \n     static final int S_IFLNK = OsConstants.S_IFLNK;\n \n+    static final int S_IFSOCK = OsConstants.S_IFSOCK;\n+\n     static final int S_IFCHR = OsConstants.S_IFCHR;\n \n     static final int S_IFBLK = OsConstants.S_IFBLK;",
    "output": "Added: Add `FileType.SOCKET` support and add `FileUtils.deleteSocketFile()` function"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java b/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n@@ -1178,12 +1178,12 @@ public static Error deleteFile(String label, final String filePath, final boolea\n             if ((allowedFileTypeFlags & fileType.getValue()) <= 0) {\n                 // If wrong file type is to be ignored\n                 if (ignoreWrongFileType) {\n-                    Logger.logVerbose(LOG_TAG, \"Ignoring deletion of \" + label + \"file at path \\\"\" + filePath + \"\\\" not matching allowed file types: \" + FileTypes.convertFileTypeFlagsToNamesString(allowedFileTypeFlags));\n+                    Logger.logVerbose(LOG_TAG, \"Ignoring deletion of \" + label + \"file at path \\\"\" + filePath + \"\\\" of type \\\"\" + fileType.getName() + \"\\\" not matching allowed file types: \" + FileTypes.convertFileTypeFlagsToNamesString(allowedFileTypeFlags));\n                     return null;\n                 }\n \n                 // Else return with error\n-                return FileUtilsErrno.ERRNO_FILE_NOT_AN_ALLOWED_FILE_TYPE.getError(label + \"file meant to be deleted\", filePath, FileTypes.convertFileTypeFlagsToNamesString(allowedFileTypeFlags));\n+                return FileUtilsErrno.ERRNO_FILE_NOT_AN_ALLOWED_FILE_TYPE.getError(label + \"file meant to be deleted\", filePath, fileType.getName(), FileTypes.convertFileTypeFlagsToNamesString(allowedFileTypeFlags));\n             }\n \n             Logger.logVerbose(LOG_TAG, \"Deleting \" + label + \"file at path \\\"\" + filePath + \"\\\"\");\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/file/FileUtilsErrno.java b/termux-shared/src/main/java/com/termux/shared/file/FileUtilsErrno.java\n--- a/termux-shared/src/main/java/com/termux/shared/file/FileUtilsErrno.java\n+++ b/termux-shared/src/main/java/com/termux/shared/file/FileUtilsErrno.java\n@@ -33,7 +33,7 @@ public class FileUtilsErrno extends Errno {\n     public static final Errno ERRNO_NON_SYMLINK_FILE_FOUND = new Errno(TYPE, 156, \"Non-symlink file found at %1$s path \\\"%2$s\\\".\");\n     public static final Errno ERRNO_NON_SYMLINK_FILE_FOUND_SHORT = new Errno(TYPE, 157, \"Non-symlink file found at %1$s path.\");\n \n-    public static final Errno ERRNO_FILE_NOT_AN_ALLOWED_FILE_TYPE = new Errno(TYPE, 158, \"The %1$s found at path \\\"%2$s\\\" is not one of allowed file types \\\"%3$s\\\".\");\n+    public static final Errno ERRNO_FILE_NOT_AN_ALLOWED_FILE_TYPE = new Errno(TYPE, 158, \"The %1$s found at path \\\"%2$s\\\" of type \\\"%3$s\\\" is not one of allowed file types \\\"%4$s\\\".\");\n \n     public static final Errno ERRNO_VALIDATE_FILE_EXISTENCE_AND_PERMISSIONS_FAILED_WITH_EXCEPTION = new Errno(TYPE, 159, \"Validating file existence and permissions of %1$s at path \\\"%2$s\\\" failed.\\nException: %3$s\");\n     public static final Errno ERRNO_VALIDATE_DIRECTORY_EXISTENCE_AND_PERMISSIONS_FAILED_WITH_EXCEPTION = new Errno(TYPE, 160, \"Validating directory existence and permissions of %1$s at path \\\"%2$s\\\" failed.\\nException: %3$s\");",
    "output": "Fixed: Log and add to Error the current file type in `FileUtils.deleteFile()` in addition to allowed file types"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/data/DataUtils.java b/termux-shared/src/main/java/com/termux/shared/data/DataUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/data/DataUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/data/DataUtils.java\n@@ -2,11 +2,15 @@\n \n import android.os.Bundle;\n \n+import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n \n+import com.google.common.base.Strings;\n+\n import java.io.ByteArrayOutputStream;\n import java.io.ObjectOutputStream;\n import java.io.Serializable;\n+import java.util.Collections;\n \n public class DataUtils {\n \n@@ -162,6 +166,51 @@ public static float rangedOrDefault(float value, float def, float min, float max\n \n \n \n+    /**\n+     * Add a space indent to a {@link String}. Each indent is 4 space characters long.\n+     *\n+     * @param string The {@link String} to add indent to.\n+     * @param count The indent count.\n+     * @return Returns the indented {@link String}.\n+     */\n+    public static String getSpaceIndentedString(String string, int count) {\n+        if (string == null || string.isEmpty())\n+            return string;\n+        else\n+            return getIndentedString(string, \"    \", count);\n+    }\n+\n+    /**\n+     * Add a tab indent to a {@link String}. Each indent is 1 tab character long.\n+     *\n+     * @param string The {@link String} to add indent to.\n+     * @param count The indent count.\n+     * @return Returns the indented {@link String}.\n+     */\n+    public static String getTabIndentedString(String string, int count) {\n+        if (string == null || string.isEmpty())\n+            return string;\n+        else\n+            return getIndentedString(string, \"\\t\", count);\n+    }\n+\n+    /**\n+     * Add an indent to a {@link String}.\n+     *\n+     * @param string The {@link String} to add indent to.\n+     * @param indent The indent characters.\n+     * @param count The indent count.\n+     * @return Returns the indented {@link String}.\n+     */\n+    public static String getIndentedString(String string, @NonNull String indent, int count) {\n+        if (string == null || string.isEmpty())\n+            return string;\n+        else\n+            return string.replaceAll(\"(?m)^\", Strings.repeat(indent, Math.max(count, 1)));\n+    }\n+\n+\n+\n     /**\n      * Get the object itself if it is not {@code null}, otherwise default.\n      *",
    "output": "Added: Add functions to `DataUtils` to get generic, space and tab indented strings"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/crash/CrashHandler.java b/termux-shared/src/main/java/com/termux/shared/crash/CrashHandler.java\n--- a/termux-shared/src/main/java/com/termux/shared/crash/CrashHandler.java\n+++ b/termux-shared/src/main/java/com/termux/shared/crash/CrashHandler.java\n@@ -50,6 +50,20 @@ public static void setDefaultCrashHandler(@NonNull final Context context, @NonNu\n         }\n     }\n \n+    /**\n+     * Set uncaught crash handler of current non-main thread to {@link CrashHandler}.\n+     */\n+    public static void setCrashHandler(@NonNull final Context context, @NonNull final CrashHandlerClient crashHandlerClient) {\n+        Thread.currentThread().setUncaughtExceptionHandler(new CrashHandler(context, crashHandlerClient, false));\n+    }\n+\n+    /**\n+     * Get {@link CrashHandler} instance that can be set as uncaught crash handler of a non-main thread.\n+     */\n+    public static CrashHandler getCrashHandler(@NonNull final Context context, @NonNull final CrashHandlerClient crashHandlerClient) {\n+        return new CrashHandler(context, crashHandlerClient, false);\n+    }\n+\n     /**\n      * Log a crash in the crash log file at path returned by {@link CrashHandlerClient#getCrashLogFilePath(Context)}.\n      *\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/crash/TermuxCrashUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/crash/TermuxCrashUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/crash/TermuxCrashUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/crash/TermuxCrashUtils.java\n@@ -54,9 +54,21 @@ public enum TYPE {\n     public static void setDefaultCrashHandler(@NonNull final Context context) {\n         CrashHandler.setDefaultCrashHandler(context, new TermuxCrashUtils(TYPE.UNCAUGHT_EXCEPTION));\n     }\n+\n+    /**\n+     * Set uncaught crash handler of current non-main thread to {@link CrashHandler} for Termux app\n+     * and its plugins to log crashes at {@link TermuxConstants#TERMUX_CRASH_LOG_FILE_PATH}.\n      */\n     public static void setCrashHandler(@NonNull final Context context) {\n-        CrashHandler.setCrashHandler(context, new TermuxCrashUtils(TYPE.UNCAUGHT_EXCEPTION));\n+        CrashHandler.setCrashHandler(context, new TermuxCrashUtils(TYPE.CAUGHT_EXCEPTION));\n+    }\n+\n+    /**\n+     * Get {@link CrashHandler} for Termux app and its plugins that can be set as the uncaught\n+     * crash handler of a non-main thread to log crashes at {@link TermuxConstants#TERMUX_CRASH_LOG_FILE_PATH}.\n+     */\n+    public static CrashHandler getCrashHandler(@NonNull final Context context) {\n+        return CrashHandler.getCrashHandler(context, new TermuxCrashUtils(TYPE.CAUGHT_EXCEPTION));\n     }\n \n     /**",
    "output": "Added: Add functions that can be used by non main threads to set `CrashHandler` as the `UncaughtExceptionHandler`"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxApplication.java b/app/src/main/java/com/termux/app/TermuxApplication.java\n--- a/app/src/main/java/com/termux/app/TermuxApplication.java\n+++ b/app/src/main/java/com/termux/app/TermuxApplication.java\n@@ -20,7 +20,7 @@ public void onCreate() {\n         Context context = getApplicationContext();\n \n         // Set crash handler for the app\n-        TermuxCrashUtils.setCrashHandler(this);\n+        TermuxCrashUtils.setDefaultCrashHandler(this);\n \n         // Set log config for the app\n         setLogConfig(context);\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/crash/CrashHandler.java b/termux-shared/src/main/java/com/termux/shared/crash/CrashHandler.java\n--- a/termux-shared/src/main/java/com/termux/shared/crash/CrashHandler.java\n+++ b/termux-shared/src/main/java/com/termux/shared/crash/CrashHandler.java\n@@ -19,28 +19,34 @@ public class CrashHandler implements Thread.UncaughtExceptionHandler {\n \n     private final Context mContext;\n     private final CrashHandlerClient mCrashHandlerClient;\n-    private final Thread.UncaughtExceptionHandler defaultUEH;\n+    private final Thread.UncaughtExceptionHandler mDefaultUEH;\n+    private final boolean mIsDefaultHandler;\n \n     private static final String LOG_TAG = \"CrashUtils\";\n \n-    private CrashHandler(@NonNull final Context context, @NonNull final CrashHandlerClient crashHandlerClient) {\n-        this.mContext = context;\n-        this.mCrashHandlerClient = crashHandlerClient;\n-        this.defaultUEH = Thread.getDefaultUncaughtExceptionHandler();\n+    private CrashHandler(@NonNull final Context context, @NonNull final CrashHandlerClient crashHandlerClient,\n+                         boolean isDefaultHandler) {\n+        mContext = context;\n+        mCrashHandlerClient = crashHandlerClient;\n+        mDefaultUEH = Thread.getDefaultUncaughtExceptionHandler();\n+        mIsDefaultHandler = isDefaultHandler;\n     }\n \n     public void uncaughtException(@NonNull Thread thread, @NonNull Throwable throwable) {\n         Logger.logInfo(LOG_TAG, \"uncaughtException() for \" + thread +  \": \" + throwable.getMessage());\n         logCrash(thread, throwable);\n-        defaultUEH.uncaughtException(thread, throwable);\n+\n+        // Don't stop the app if not on the main thread\n+        if (mIsDefaultHandler)\n+            mDefaultUEH.uncaughtException(thread, throwable);\n     }\n \n     /**\n-     * Set default uncaught crash handler of current thread to {@link CrashHandler}.\n+     * Set default uncaught crash handler for the app to {@link CrashHandler}.\n      */\n-    public static void setCrashHandler(@NonNull final Context context, @NonNull final CrashHandlerClient crashHandlerClient) {\n+    public static void setDefaultCrashHandler(@NonNull final Context context, @NonNull final CrashHandlerClient crashHandlerClient) {\n         if (!(Thread.getDefaultUncaughtExceptionHandler() instanceof CrashHandler)) {\n-            Thread.setDefaultUncaughtExceptionHandler(new CrashHandler(context, crashHandlerClient));\n+            Thread.setDefaultUncaughtExceptionHandler(new CrashHandler(context, crashHandlerClient, true));\n         }\n     }\n \n@@ -56,7 +62,7 @@ public static void logCrash(@NonNull Context context,\n                                 @NonNull CrashHandlerClient crashHandlerClient,\n                                 @NonNull Thread thread,  @NonNull Throwable throwable) {\n         Logger.logInfo(LOG_TAG, \"logCrash() for \" + thread +  \": \" + throwable.getMessage());\n-        new CrashHandler(context, crashHandlerClient).logCrash(thread, throwable);\n+        new CrashHandler(context, crashHandlerClient, false).logCrash(thread, throwable);\n     }\n \n     public void logCrash(@NonNull Thread thread, @NonNull Throwable throwable) {\n@@ -99,7 +105,7 @@ public interface CrashHandlerClient {\n         /**\n          * Called before {@link #logCrashToFile(Context, CrashHandlerClient, Thread, Throwable)} is called.\n          *\n-         * @param context The {@link Context} passed to {@link CrashHandler#CrashHandler(Context, CrashHandlerClient)}.\n+         * @param context The {@link Context} passed to {@link CrashHandler#CrashHandler(Context, CrashHandlerClient, boolean)}.\n          * @param thread The {@link Thread} in which the crash happened.\n          * @param throwable The {@link Throwable} thrown for the crash.\n          * @return Should return {@code true} if crash has been handled and should not be logged,\n@@ -110,7 +116,7 @@ public interface CrashHandlerClient {\n         /**\n          * Called after {@link #logCrashToFile(Context, CrashHandlerClient, Thread, Throwable)} is called.\n          *\n-         * @param context The {@link Context} passed to {@link CrashHandler#CrashHandler(Context, CrashHandlerClient)}.\n+         * @param context The {@link Context} passed to {@link CrashHandler#CrashHandler(Context, CrashHandlerClient, boolean)}.\n          * @param thread The {@link Thread} in which the crash happened.\n          * @param throwable The {@link Throwable} thrown for the crash.\n          */\n@@ -119,7 +125,7 @@ public interface CrashHandlerClient {\n         /**\n          * Get crash log file path.\n          *\n-         * @param context The {@link Context} passed to {@link CrashHandler#CrashHandler(Context, CrashHandlerClient)}.\n+         * @param context The {@link Context} passed to {@link CrashHandler#CrashHandler(Context, CrashHandlerClient, boolean)}.\n          * @return Should return the crash log file path.\n          */\n         @NonNull\n@@ -128,7 +134,7 @@ public interface CrashHandlerClient {\n         /**\n          * Get app info markdown string to add to crash log.\n          *\n-         * @param context The {@link Context} passed to {@link CrashHandler#CrashHandler(Context, CrashHandlerClient)}.\n+         * @param context The {@link Context} passed to {@link CrashHandler#CrashHandler(Context, CrashHandlerClient, boolean)}.\n          * @return Should return app info markdown string.\n          */\n         String getAppInfoMarkdownString(Context context);\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/crash/TermuxCrashUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/crash/TermuxCrashUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/crash/TermuxCrashUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/crash/TermuxCrashUtils.java\n@@ -48,8 +48,12 @@ public enum TYPE {\n     }\n \n     /**\n-     * Set default uncaught crash handler of current thread to {@link CrashHandler} for Termux app\n-     * and its plugin to log crashes at {@link TermuxConstants#TERMUX_CRASH_LOG_FILE_PATH}.\n+     * Set default uncaught crash handler of the app to {@link CrashHandler} for Termux app\n+     * and its plugins to log crashes at {@link TermuxConstants#TERMUX_CRASH_LOG_FILE_PATH}.\n+     */\n+    public static void setDefaultCrashHandler(@NonNull final Context context) {\n+        CrashHandler.setDefaultCrashHandler(context, new TermuxCrashUtils(TYPE.UNCAUGHT_EXCEPTION));\n+    }\n      */\n     public static void setCrashHandler(@NonNull final Context context) {\n         CrashHandler.setCrashHandler(context, new TermuxCrashUtils(TYPE.UNCAUGHT_EXCEPTION));",
    "output": "Fixed: Do not stop the app if `UncaughtExceptionHandler` implemented by `CrashHandler` receives an exception on a non main thread\n\nRename function that should be used by main thread of apps to `setDefaultCrashHandler()`.\n\nFunctions for other threads will be added in a later commit."
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/shell/command/ExecutionCommand.java b/termux-shared/src/main/java/com/termux/shared/shell/command/ExecutionCommand.java\n--- a/termux-shared/src/main/java/com/termux/shared/shell/command/ExecutionCommand.java\n+++ b/termux-shared/src/main/java/com/termux/shared/shell/command/ExecutionCommand.java\n@@ -472,7 +472,7 @@ public static String getExecutionCommandMarkdownString(final ExecutionCommand ex\n         markdownString.append(\"\\n\").append(MarkdownUtils.getSingleLineMarkdownStringEntry(\"Current State\", executionCommand.currentState.getName(), \"-\"));\n \n         markdownString.append(\"\\n\").append(MarkdownUtils.getSingleLineMarkdownStringEntry(\"Executable\", executionCommand.executable, \"-\"));\n-        markdownString.append(\"\\n\").append(getArgumentsMarkdownString(executionCommand.arguments));\n+        markdownString.append(\"\\n\").append(getArgumentsMarkdownString(\"Arguments\", executionCommand.arguments));\n         markdownString.append(\"\\n\").append(MarkdownUtils.getSingleLineMarkdownStringEntry(\"Working Directory\", executionCommand.workingDirectory, \"-\"));\n         markdownString.append(\"\\n\").append(MarkdownUtils.getSingleLineMarkdownStringEntry(\"Runner\", executionCommand.runner, \"-\"));\n         markdownString.append(\"\\n\").append(MarkdownUtils.getSingleLineMarkdownStringEntry(\"isFailsafe\", executionCommand.isFailsafe, \"-\"));\n@@ -547,7 +547,7 @@ public String getExecutableLogString() {\n     }\n \n     public String getArgumentsLogString() {\n-        return getArgumentsLogString(arguments);\n+        return getArgumentsLogString(\"Arguments\", arguments);\n     }\n \n     public String getWorkingDirectoryLogString() {\n@@ -623,8 +623,8 @@ public String getIsPluginExecutionCommandLogString() {\n      * @param argumentsArray The {@link String[]} argumentsArray to convert.\n      * @return Returns the log friendly {@link String}.\n      */\n-    public static String getArgumentsLogString(final String[] argumentsArray) {\n-        StringBuilder argumentsString = new StringBuilder(\"Arguments:\");\n+    public static String getArgumentsLogString(String label, final String[] argumentsArray) {\n+        StringBuilder argumentsString = new StringBuilder(label + \":\");\n \n         if (argumentsArray != null && argumentsArray.length != 0) {\n             argumentsString.append(\"\\n```\\n\");\n@@ -660,8 +660,8 @@ public static String getArgumentsLogString(final String[] argumentsArray) {\n      * @param argumentsArray The {@link String[]} argumentsArray to convert.\n      * @return Returns the markdown {@link String}.\n      */\n-    public static String getArgumentsMarkdownString(final String[] argumentsArray) {\n-        StringBuilder argumentsString = new StringBuilder(\"**Arguments:**\");\n+    public static String getArgumentsMarkdownString(String label, final String[] argumentsArray) {\n+        StringBuilder argumentsString = new StringBuilder(\"**\" + label + \":**\");\n \n         if (argumentsArray != null && argumentsArray.length != 0) {\n             argumentsString.append(\"\\n\");",
    "output": "Changed: Add label parameter to `ExecutionCommand` `getArgumentsLogString()` and `getArgumentsMarkdownString()` functions for external usage"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/errors/Error.java b/termux-shared/src/main/java/com/termux/shared/errors/Error.java\n--- a/termux-shared/src/main/java/com/termux/shared/errors/Error.java\n+++ b/termux-shared/src/main/java/com/termux/shared/errors/Error.java\n@@ -209,7 +209,7 @@ public String getErrorLogString() {\n \n         logString.append(getCodeString());\n         logString.append(\"\\n\").append(getTypeAndMessageLogString());\n-        if (this.throwablesList != null)\n+        if (throwablesList != null && throwablesList.size() > 0)\n             logString.append(\"\\n\").append(geStackTracesLogString());\n \n         return logString.toString();\n@@ -272,7 +272,8 @@ public String getErrorMarkdownString() {\n         markdownString.append(MarkdownUtils.getSingleLineMarkdownStringEntry(\"Error Code\", getCode(), \"-\"));\n         markdownString.append(\"\\n\").append(MarkdownUtils.getMultiLineMarkdownStringEntry(\n             (Errno.TYPE.equals(getType()) ? \"Error Message\" : \"Error Message (\" + getType() + \")\"), message, \"-\"));\n-        markdownString.append(\"\\n\\n\").append(geStackTracesMarkdownString());\n+        if (throwablesList != null && throwablesList.size() > 0)\n+            markdownString.append(\"\\n\\n\").append(geStackTracesMarkdownString());\n \n         return markdownString.toString();\n     }",
    "output": "Changed|Fixed: Do not add empty stacktraces entry to Error log and markdown String"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/termux/crash/TermuxCrashUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/crash/TermuxCrashUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/crash/TermuxCrashUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/crash/TermuxCrashUtils.java\n@@ -196,9 +196,9 @@ private static synchronized void notifyAppCrashFromCrashLogFileInner(final Conte\n      * @param message The message for the crash report.\n      * @param throwable The {@link Throwable} for the crash report.\n      */\n-    public static void sendPluginCrashReportNotification(final Context currentPackageContext, String logTag,\n-                                                         CharSequence title, String message, Throwable throwable) {\n-        TermuxCrashUtils.sendPluginCrashReportNotification(currentPackageContext, logTag,\n+    public static void sendCrashReportNotification(final Context currentPackageContext, String logTag,\n+                                                   CharSequence title, String message, Throwable throwable) {\n+        sendCrashReportNotification(currentPackageContext, logTag,\n             title, message,\n             MarkdownUtils.getMarkdownCodeForString(Logger.getMessageAndStackTraceString(message, throwable), true),\n             false, false, true);\n@@ -214,10 +214,10 @@ public static void sendPluginCrashReportNotification(final Context currentPackag\n      * @param notificationTextString The text of the notification.\n      * @param message The message for the crash report.\n      */\n-    public static void sendPluginCrashReportNotification(final Context currentPackageContext, String logTag,\n-                                                         CharSequence title, String notificationTextString,\n-                                                         String message) {\n-        TermuxCrashUtils.sendPluginCrashReportNotification(currentPackageContext, logTag,\n+    public static void sendCrashReportNotification(final Context currentPackageContext, String logTag,\n+                                                   CharSequence title, String notificationTextString,\n+                                                   String message) {\n+        sendCrashReportNotification(currentPackageContext, logTag,\n             title, notificationTextString, message,\n             false, false, true);\n     }\n@@ -238,12 +238,12 @@ public static void sendPluginCrashReportNotification(final Context currentPackag\n      * @param showToast If set to {@code true}, then a toast will be shown for {@code notificationTextString}.\n      * @param addDeviceInfo If set to {@code true}, then device info should be appended to the message.\n      */\n-    public static void sendPluginCrashReportNotification(final Context currentPackageContext, String logTag,\n-                                                         CharSequence title, String notificationTextString,\n-                                                         String message, boolean forceNotification,\n-                                                         boolean showToast,\n-                                                         boolean addDeviceInfo) {\n-        TermuxCrashUtils.sendCrashReportNotification(currentPackageContext, logTag,\n+    public static void sendCrashReportNotification(final Context currentPackageContext, String logTag,\n+                                                   CharSequence title, String notificationTextString,\n+                                                   String message, boolean forceNotification,\n+                                                   boolean showToast,\n+                                                   boolean addDeviceInfo) {\n+        sendCrashReportNotification(currentPackageContext, logTag,\n             title, notificationTextString, \"## \" + title + \"\\n\\n\" + message + \"\\n\\n\",\n             forceNotification, showToast, TermuxUtils.AppInfoMode.TERMUX_AND_PLUGIN_PACKAGE, addDeviceInfo);\n     }",
    "output": "Changed: Rename `TermuxCrashUtils` `sendPluginCrashReportNotification() to `sendCrashReportNotification()`"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxApplication.java b/app/src/main/java/com/termux/app/TermuxApplication.java\n--- a/app/src/main/java/com/termux/app/TermuxApplication.java\n+++ b/app/src/main/java/com/termux/app/TermuxApplication.java\n@@ -40,7 +40,7 @@ public void onCreate() {\n             } catch (Exception e) {\n                 return 1;\n             }\n-        }, TermuxConstants.TERMUX_VAR_PREFIX_DIR_PATH+\"/run/am-socket\", 100, 1000) == null) {\n+        }, TermuxConstants.TERMUX_FILES_DIR_PATH+\"/api/am-socket\", 100, 1000) == null) {\n             Logger.logWarn(\"TermuxApplication\", \"am socket cannot be created\");\n         }\n     }",
    "output": "Changed: Set socket dir to /data/data/com.termux/files/api/\n\nUsing the TermuxConstants.TERMUX_FILES_DIR variable to get full path\nTermuxConstants.TERMUX_FILES_DIR_PATH/api/am-socket."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxApplication.java b/app/src/main/java/com/termux/app/TermuxApplication.java\n--- a/app/src/main/java/com/termux/app/TermuxApplication.java\n+++ b/app/src/main/java/com/termux/app/TermuxApplication.java\n@@ -12,8 +12,6 @@\n import com.termux.shared.termux.settings.properties.TermuxAppSharedProperties;\n import com.termux.shared.termux.theme.TermuxThemeUtils;\n \n-import java.io.File;\n-\n public class TermuxApplication extends Application {\n \n     public void onCreate() {\n@@ -42,7 +40,7 @@ public void onCreate() {\n             } catch (Exception e) {\n                 return 1;\n             }\n-        }, new File(getFilesDir(), \"am-socket\").getAbsolutePath(), 100, 1000) == null) {\n+        }, TermuxConstants.TERMUX_VAR_PREFIX_DIR_PATH+\"/run/am-socket\", 100, 1000) == null) {\n             Logger.logWarn(\"TermuxApplication\", \"am socket cannot be created\");\n         }\n     }",
    "output": "Changed: Moved the am socket to PREFIX/var/run/am-socket"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/shell/LocalFilesystemSocket.java b/termux-shared/src/main/java/com/termux/shared/shell/LocalFilesystemSocket.java\n--- a/termux-shared/src/main/java/com/termux/shared/shell/LocalFilesystemSocket.java\n+++ b/termux-shared/src/main/java/com/termux/shared/shell/LocalFilesystemSocket.java\n@@ -209,16 +209,20 @@ public ServerSocket(Context c, String path, int backlog) throws IOException {\n             if (backlog <= 0) {\n                 throw new IllegalArgumentException(\"Backlog has to be at least 1\");\n             }\n-            if (path == null) {\n-                throw new IllegalArgumentException(\"path cannot be null\");\n+            if (path == null || path.length() == 0) {\n+                throw new IllegalArgumentException(\"path cannot be null or empty\");\n             }\n             this.path = path;\n-            File f = new File(path);\n-            File parent = f.getParentFile();\n-            if (parent != null) {\n-                parent.mkdirs();\n+            if (path.getBytes(StandardCharsets.UTF_8)[0] != 0) {\n+                // not a socket in the abstract linux namespace, make sure the path is accessible and clear\n+                File f = new File(path);\n+                File parent = f.getParentFile();\n+                if (parent != null) {\n+                    parent.mkdirs();\n+                }\n+                f.delete();\n             }\n-            f.delete();\n+    \n             fd = createserversocket(path.getBytes(StandardCharsets.UTF_8), backlog);\n             if (fd == -1) {\n                 throw new IOException(\"Could not create UNIX server socket at \\\"\"+path+\"\\\"\");\n@@ -245,9 +249,9 @@ public Socket accept() {\n                     c = -1;\n                     continue;\n                 }\n-                \n-                if (peeruid == app.getApplicationInfo().uid) {\n-                    // if the peer has the same uid, allow the connection\n+    \n+                // if the peer has the same uid or is root, allow the connection\n+                if (peeruid == app.getApplicationInfo().uid || peeruid == 0) {\n                     break;\n                 } else {\n                     Logger.logWarn(\"LocalFilesystemSocket.ServerSocket\", \"WARNING: An app with the uid of \"+peeruid+\" tried to connect to the socket at \\\"\"+path+\"\\\", closing connection.\");\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/shell/LocalSocketListener.java b/termux-shared/src/main/java/com/termux/shared/shell/LocalSocketListener.java\n--- a/termux-shared/src/main/java/com/termux/shared/shell/LocalSocketListener.java\n+++ b/termux-shared/src/main/java/com/termux/shared/shell/LocalSocketListener.java\n@@ -77,7 +77,6 @@ public void run() {\n                         while ((c = r.read()) > 0) {\n                             b.append((char) c);\n                         }\n-                        Logger.logDebug(LOG_TAG, b.toString());\n                         String outString;\n                         String errString;\n                         int ret;",
    "output": "Changed: Allow connections from root o sockets."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxApplication.java b/app/src/main/java/com/termux/app/TermuxApplication.java\n--- a/app/src/main/java/com/termux/app/TermuxApplication.java\n+++ b/app/src/main/java/com/termux/app/TermuxApplication.java\n@@ -3,13 +3,16 @@\n import android.app.Application;\n import android.content.Context;\n \n+import com.termux.am.Am;\n import com.termux.shared.termux.TermuxConstants;\n import com.termux.shared.termux.crash.TermuxCrashUtils;\n import com.termux.shared.termux.settings.preferences.TermuxAppSharedPreferences;\n import com.termux.shared.logger.Logger;\n import com.termux.shared.termux.settings.properties.TermuxAppSharedProperties;\n import com.termux.shared.termux.theme.TermuxThemeUtils;\n+import com.termux.shared.shell.LocalSocketListener;\n \n+import java.io.IOException;\n \n public class TermuxApplication extends Application {\n \n@@ -31,6 +34,20 @@ public void onCreate() {\n \n         // Set NightMode.APP_NIGHT_MODE\n         TermuxThemeUtils.setAppNightMode(properties.getNightMode());\n+\n+        try {\n+            new LocalSocketListener(this, (args, out, err) -> {\n+                try {\n+                    new Am(out, err, this).run(args);\n+                    return 0;\n+                } catch (Exception e) {\n+                    return 1;\n+                }\n+            }, TermuxConstants.TERMUX_PACKAGE_NAME+\"://call-am\", 1000);\n+        }\n+        catch (IOException e) {\n+            Logger.logDebug(\"TermuxApplication\", \"am socket already in use\");\n+        }\n     }\n \n     public static void setLogConfig(Context context) {\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/shell/LocalSocketListener.java b/termux-shared/src/main/java/com/termux/shared/shell/LocalSocketListener.java\n--- a/termux-shared/src/main/java/com/termux/shared/shell/LocalSocketListener.java\n+++ b/termux-shared/src/main/java/com/termux/shared/shell/LocalSocketListener.java\n@@ -0,0 +1,161 @@\n+package com.termux.shared.shell;\n+\n+import android.app.Application;\n+import android.net.LocalServerSocket;\n+import android.net.LocalSocket;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.termux.shared.logger.Logger;\n+\n+import java.io.BufferedWriter;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.io.PrintStream;\n+\n+public class LocalSocketListener\n+{\n+    public interface LocalSocketHandler {\n+        int handle(String[] args, PrintStream out, PrintStream err);\n+    }\n+    \n+    \n+    private static final String LOG_TAG = \"LocalSocketListener\";\n+    \n+    private final Thread thread;\n+    private final LocalServerSocket server;\n+    private final int timeoutMillis;\n+    \n+    public LocalSocketListener(@NonNull Application a, @NonNull LocalSocketHandler h, String address, int timeoutMillis) throws IOException {\n+        this.timeoutMillis = timeoutMillis;\n+        server = new LocalServerSocket(address);\n+        thread = new Thread(new LocalSocketListenerRunnable(a, h));\n+        thread.setUncaughtExceptionHandler((t, e) -> Logger.logStackTraceWithMessage(LOG_TAG, \"Uncaught exception in LocalSocketListenerRunnable\", e));\n+        thread.start();\n+    }\n+    \n+    @SuppressWarnings(\"unused\")\n+    public void stop() {\n+        try {\n+            thread.interrupt();\n+            server.close();\n+        } catch (Exception ignored) {}\n+    }\n+    \n+    private class LocalSocketListenerRunnable implements Runnable {\n+        private final Application a;\n+        private final TimeoutWatcher timeoutWatcher;\n+        private final Thread timeoutWatcherThread;\n+        private final LocalSocketHandler h;\n+        public LocalSocketListenerRunnable(@NonNull Application a, @NonNull LocalSocketHandler h) {\n+            this.a = a;\n+            this.h = h;\n+            timeoutWatcher = new TimeoutWatcher();\n+            timeoutWatcherThread = new Thread(timeoutWatcher);\n+            timeoutWatcherThread.start();\n+        }\n+        \n+        // the socket timeout for LocalSocket doesn't seem to work, so close the socket if the timeout is over, so the processing Thread doesn't get blocked.\n+        private class TimeoutWatcher implements Runnable {\n+            private final Object lock = new Object();\n+            private LocalSocket current = null;\n+            @Override\n+            public void run() {\n+                while (! Thread.currentThread().isInterrupted()) {\n+                    LocalSocket watch = current;\n+                    synchronized (lock) {\n+                        while (watch == null) {\n+                            try {\n+                                lock.wait();\n+                            }\n+                            catch (InterruptedException ignored) {\n+                                Thread.currentThread().interrupt();\n+                            }\n+                            watch = current;\n+                        }\n+                    }\n+                    try {\n+                        //noinspection BusyWait\n+                        Thread.sleep(timeoutMillis);\n+                    }\n+                    catch (InterruptedException e) {\n+                        Thread.currentThread().interrupt();\n+                    }\n+                    try {\n+                        watch.shutdownInput();\n+                    } catch (Exception ignored) {}\n+                    try {\n+                        watch.shutdownOutput();\n+                    } catch (Exception ignored) {}\n+                    try {\n+                        watch.close();\n+                    } catch (Exception ignored) {}\n+                }\n+            }\n+        }\n+        \n+        @Override\n+        public void run() {\n+            try {\n+                while (! Thread.currentThread().isInterrupted()) {\n+                    try (LocalSocket s = server.accept();\n+                         OutputStream sockout = s.getOutputStream();\n+                         InputStreamReader r = new InputStreamReader(s.getInputStream())) {\n+                        timeoutWatcher.current = s;\n+                        synchronized (timeoutWatcher.lock) {\n+                            timeoutWatcher.lock.notifyAll();\n+                        }\n+                        // ensure only Termux programs can connect\n+                        if (s.getPeerCredentials().getUid() != a.getApplicationInfo().uid) {\n+                            Logger.logDebug(LOG_TAG, \"A program with another UID tried to connect\");\n+                            continue;\n+                        }\n+                        StringBuilder b = new StringBuilder();\n+                        int c;\n+                        while ((c = r.read()) > 0) {\n+                            b.append((char) c);\n+                        }\n+                        String outString;\n+                        String errString;\n+                        int ret;\n+                        try (ByteArrayOutputStream out = new ByteArrayOutputStream();\n+                             PrintStream outp = new PrintStream(out);\n+                             ByteArrayOutputStream err = new ByteArrayOutputStream();\n+                             PrintStream errp = new PrintStream(err)) {\n+                            \n+                            ret = h.handle(ArgumentTokenizer.tokenize(b.toString()).toArray(new String[0]), outp, errp);\n+                            \n+                            outp.flush();\n+                            outString = out.toString(\"UTF-8\");\n+                            \n+                            errp.flush();\n+                            errString = err.toString(\"UTF-8\");\n+                        }\n+                        try (BufferedWriter w = new BufferedWriter(new OutputStreamWriter(sockout))) {\n+                            w.write(Integer.toString(ret));\n+                            w.write('\\0');\n+                            w.write(outString);\n+                            w.write('\\0');\n+                            w.write(errString);\n+                            w.flush();\n+                        }\n+                    } catch (Exception e) {\n+                        Logger.logStackTraceWithMessage(LOG_TAG, \"Exception while handling connection\", e);\n+                    }\n+                }\n+            }\n+            finally {\n+                try {\n+                    server.close();\n+                } catch (Exception ignored) {}\n+                if (timeoutWatcherThread.isAlive()) {\n+                    timeoutWatcherThread.interrupt();\n+                }\n+            }\n+            Logger.logDebug(LOG_TAG, \"LocalSocketListenerRunnable returned\");\n+        }\n+    }\n+}",
    "output": "Added: termux-am-library to integrate am with Termux."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -520,12 +520,14 @@ private void executeTermuxSessionCommand(ExecutionCommand executionCommand) {\n      */\n     @Nullable\n     public TermuxSession createTermuxSession(String executablePath, String[] arguments, String stdin, String workingDirectory, boolean isFailSafe, String sessionName) {\n-        return createTermuxSession(new ExecutionCommand(getNextExecutionId(), executablePath, arguments, stdin, workingDirectory, Runner.TERMINAL_SESSION.getName(), isFailSafe), sessionName);\n+        ExecutionCommand executionCommand = new ExecutionCommand(getNextExecutionId(), executablePath, arguments, stdin, workingDirectory, Runner.TERMINAL_SESSION.getName(), isFailSafe);\n+        executionCommand.sessionName = sessionName;\n+        return createTermuxSession(executionCommand);\n     }\n \n     /** Create a {@link TermuxSession}. */\n     @Nullable\n-    public synchronized TermuxSession createTermuxSession(ExecutionCommand executionCommand, String sessionName) {\n+    public synchronized TermuxSession createTermuxSession(ExecutionCommand executionCommand) {\n         if (executionCommand == null) return null;\n \n         Logger.logDebug(LOG_TAG, \"Creating \\\"\" + executionCommand.getCommandIdAndLabelLogString() + \"\\\" TermuxSession\");\n@@ -542,7 +544,7 @@ public synchronized TermuxSession createTermuxSession(ExecutionCommand execution\n         // Otherwise if command was manually started by the user like by adding a new terminal session,\n         // then no need to set stdout\n         executionCommand.terminalTranscriptRows = mProperties.getTerminalTranscriptRows();\n-        TermuxSession newTermuxSession = TermuxSession.execute(this, executionCommand, getTermuxTerminalSessionClient(), this, new TermuxShellEnvironmentClient(), sessionName, executionCommand.isPluginExecutionCommand);\n+        TermuxSession newTermuxSession = TermuxSession.execute(this, executionCommand, getTermuxTerminalSessionClient(), this, new TermuxShellEnvironmentClient(), executionCommand.isPluginExecutionCommand);\n         if (newTermuxSession == null) {\n             Logger.logError(LOG_TAG, \"Failed to execute new TermuxSession command for:\\n\" + executionCommand.getCommandIdAndLabelLogString());\n             // If the execution command was started for a plugin, then process the error\n\ndiff --git a/app/src/main/java/com/termux/app/terminal/TermuxTerminalSessionClient.java b/app/src/main/java/com/termux/app/terminal/TermuxTerminalSessionClient.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxTerminalSessionClient.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxTerminalSessionClient.java\n@@ -345,11 +345,22 @@ public void renameSession(final TerminalSession sessionToRename) {\n         if (sessionToRename == null) return;\n \n         TextInputDialogUtils.textInput(mActivity, R.string.title_rename_session, sessionToRename.mSessionName, R.string.action_rename_session_confirm, text -> {\n-            sessionToRename.mSessionName = text;\n+            renameSession(sessionToRename, text);\n             termuxSessionListNotifyUpdated();\n         }, -1, null, -1, null, null);\n     }\n \n+    private void renameSession(TerminalSession sessionToRename, String text) {\n+        if (sessionToRename == null) return;\n+        sessionToRename.mSessionName = text;\n+        TermuxService service = mActivity.getTermuxService();\n+        if (service != null) {\n+            TermuxSession termuxSession = service.getTermuxSessionForTerminalSession(sessionToRename);\n+            if (termuxSession != null)\n+                termuxSession.getExecutionCommand().sessionName = text;\n+        }\n+    }\n+\n     public void addNewSession(boolean isFailSafe, String sessionName) {\n         TermuxService service = mActivity.getTermuxService();\n         if (service == null) return;\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/shell/command/ExecutionCommand.java b/termux-shared/src/main/java/com/termux/shared/shell/command/ExecutionCommand.java\n--- a/termux-shared/src/main/java/com/termux/shared/shell/command/ExecutionCommand.java\n+++ b/termux-shared/src/main/java/com/termux/shared/shell/command/ExecutionCommand.java\n@@ -148,9 +148,12 @@ public static Runner runnerOf(@Nullable String name, @NonNull Runner def) {\n      */\n     public Integer backgroundCustomLogLevel;\n \n-    /** The session action of foreground commands. */\n+\n+    /** The session action of {@link Runner#TERMINAL_SESSION} commands. */\n     public String sessionAction;\n \n+    /** The session name of {@link Runner#TERMINAL_SESSION} commands. */\n+    public String sessionName;\n \n     /** The command label for the {@link ExecutionCommand}. */\n     public String commandLabel;\n@@ -343,6 +346,9 @@ public static String getExecutionInputLogString(final ExecutionCommand execution\n         if (!ignoreNull || executionCommand.sessionAction != null)\n             logString.append(\"\\n\").append(executionCommand.getSessionActionLogString());\n \n+        if (!ignoreNull || executionCommand.sessionName != null) {\n+            logString.append(\"\\n\").append(executionCommand.getSessionNameLogString());\n+        }\n         if (!ignoreNull || executionCommand.commandIntent != null)\n             logString.append(\"\\n\").append(executionCommand.getCommandIntentLogString());\n \n@@ -434,6 +440,7 @@ public static String getExecutionCommandMarkdownString(final ExecutionCommand ex\n         }\n \n         markdownString.append(\"\\n\").append(MarkdownUtils.getSingleLineMarkdownStringEntry(\"Session Action\", executionCommand.sessionAction, \"-\"));\n+        markdownString.append(\"\\n\").append(MarkdownUtils.getSingleLineMarkdownStringEntry(\"Session Name\", executionCommand.sessionName, \"-\"));\n \n \n         markdownString.append(\"\\n\").append(MarkdownUtils.getSingleLineMarkdownStringEntry(\"isPluginExecutionCommand\", executionCommand.isPluginExecutionCommand, \"-\"));\n@@ -524,6 +531,9 @@ public String getSessionActionLogString() {\n         return Logger.getSingleLineLogStringEntry(\"Session Action\", sessionAction, \"-\");\n     }\n \n+    public String getSessionNameLogString() {\n+        return Logger.getSingleLineLogStringEntry(\"Session Name\", sessionName, \"-\");\n+    }\n     public String getCommandDescriptionLogString() {\n         return Logger.getSingleLineLogStringEntry(\"Command Description\", commandDescription, \"-\");\n     }\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/shell/command/runner/terminal/TermuxSession.java b/termux-shared/src/main/java/com/termux/shared/termux/shell/command/runner/terminal/TermuxSession.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/shell/command/runner/terminal/TermuxSession.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/shell/command/runner/terminal/TermuxSession.java\n@@ -54,7 +54,6 @@ private TermuxSession(@NonNull final TerminalSession terminalSession, @NonNull f\n      * @param terminalSessionClient The {@link TerminalSessionClient} interface implementation.\n      * @param termuxSessionClient The {@link TermuxSessionClient} interface implementation.\n      * @param shellEnvironmentClient The {@link ShellEnvironmentClient} interface implementation.\n-     * @param sessionName The optional {@link TerminalSession} name.\n      * @param setStdoutOnExit If set to {@code true}, then the {@link ResultData#stdout}\n      *                        available in the {@link TermuxSessionClient#onTermuxSessionExited(TermuxSession)}\n      *                        callback will be set to the {@link TerminalSession} transcript. The session\n@@ -67,7 +66,7 @@ private TermuxSession(@NonNull final TerminalSession terminalSession, @NonNull f\n     public static TermuxSession execute(@NonNull final Context context, @NonNull ExecutionCommand executionCommand,\n                                         @NonNull final TerminalSessionClient terminalSessionClient, final TermuxSessionClient termuxSessionClient,\n                                         @NonNull final ShellEnvironmentClient shellEnvironmentClient,\n-                                        final String sessionName, final boolean setStdoutOnExit) {\n+                                        final boolean setStdoutOnExit) {\n         if (executionCommand.workingDirectory == null || executionCommand.workingDirectory.isEmpty())\n             executionCommand.workingDirectory = shellEnvironmentClient.getDefaultWorkingDirectoryPath();\n         if (executionCommand.workingDirectory.isEmpty())\n@@ -132,8 +131,8 @@ public static TermuxSession execute(@NonNull final Context context, @NonNull Exe\n         Logger.logDebug(LOG_TAG, \"Running \\\"\" + executionCommand.getCommandIdAndLabelLogString() + \"\\\" TermuxSession\");\n         TerminalSession terminalSession = new TerminalSession(executionCommand.executable, executionCommand.workingDirectory, executionCommand.arguments, environment, executionCommand.terminalTranscriptRows, terminalSessionClient);\n \n-        if (sessionName != null) {\n-            terminalSession.mSessionName = sessionName;\n+        if (executionCommand.sessionName != null) {\n+            terminalSession.mSessionName = executionCommand.sessionName;\n         }\n \n         return new TermuxSession(terminalSession, executionCommand, termuxSessionClient, setStdoutOnExit);",
    "output": "Changed: Maintain terminal session name in `ExecutionCommand.sessionName` in addition to `TerminalSession.mSessionName`"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/android/PermissionUtils.java b/termux-shared/src/main/java/com/termux/shared/android/PermissionUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/android/PermissionUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/android/PermissionUtils.java\n@@ -352,7 +352,6 @@ public static Error requestManageStorageExternalPermission(@NonNull Context cont\n         Intent intent = new Intent(Settings.ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION);\n         intent.addCategory(\"android.intent.category.DEFAULT\");\n         intent.setData(Uri.parse(\"package:\" + context.getPackageName()));\n-        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n \n         Error error;\n         if (requestCode >=0)\n@@ -464,7 +463,6 @@ public static Error requestDisplayOverOtherAppsPermission(@NonNull Context conte\n \n         Intent intent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION);\n         intent.setData(Uri.parse(\"package:\" + context.getPackageName()));\n-        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n \n         if (requestCode >=0)\n             return ActivityUtils.startActivityForResult(context, requestCode, intent);\n@@ -534,7 +532,6 @@ public static Error requestDisableBatteryOptimizations(@NonNull Context context,\n \n         Intent intent = new Intent(Settings.ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS);\n         intent.setData(Uri.parse(\"package:\" + context.getPackageName()));\n-        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n \n         if (requestCode >=0)\n             return ActivityUtils.startActivityForResult(context, requestCode, intent);",
    "output": "Fixed: Fix `Settings.ACTION_*` permission requests result callback\n\nAdding `FLAG_ACTIVITY_NEW_TASK` will start permission activity in separate task and `onActivityResult()` will be called early in the calling activity without grant/not-grant result being actually set."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/RunCommandService.java b/app/src/main/java/com/termux/app/RunCommandService.java\n--- a/app/src/main/java/com/termux/app/RunCommandService.java\n+++ b/app/src/main/java/com/termux/app/RunCommandService.java\n@@ -63,6 +63,8 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n         // Run again in case service is already started and onCreate() is not called\n         runStartForeground();\n \n+        Logger.logVerboseExtended(LOG_TAG, \"Intent Received:\\n\" + IntentUtils.getIntentString(intent));\n+\n         ExecutionCommand executionCommand = new ExecutionCommand();\n         executionCommand.pluginAPIHelp = this.getString(R.string.error_run_command_service_api_help, RUN_COMMAND_SERVICE.RUN_COMMAND_API_HELP_URL);\n \n\ndiff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -136,7 +136,11 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n         // Run again in case service is already started and onCreate() is not called\n         runStartForeground();\n \n-        String action = intent.getAction();\n+        String action = null;\n+        if (intent != null) {\n+            Logger.logVerboseExtended(LOG_TAG, \"Intent Received:\\n\" + IntentUtils.getIntentString(intent));\n+            action = intent.getAction();\n+        }\n \n         if (action != null) {\n             switch (action) {",
    "output": "Added: Log intents received by  and"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java b/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n@@ -1352,6 +1352,10 @@ public static Error deleteFilesOlderThanXDays(String label, final String filePat\n                 }\n             }\n \n+            // TODO: Use FileAttributes with support for atime (default), mtime, ctime. Add regex for ignoring file and dir absolute paths.\n+            // FIXME: iterateFiles() does not return subdirectories even with TrueFileFilter for file and dir.\n+            // FIXME: Empty directories remain\n+\n             // If directory exists, delete its contents\n             Calendar calendar = Calendar.getInstance();\n             calendar.add(Calendar.DATE, -(days));\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/settings/properties/TermuxPropertyConstants.java b/termux-shared/src/main/java/com/termux/shared/termux/settings/properties/TermuxPropertyConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/settings/properties/TermuxPropertyConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/settings/properties/TermuxPropertyConstants.java\n@@ -17,7 +17,7 @@\n import java.util.Set;\n \n /*\n- * Version: v0.16.0\n+ * Version: v0.17.0\n  * SPDX-License-Identifier: MIT\n  *\n  * Changelog\n@@ -73,6 +73,9 @@\n  *\n  * - 0.16.0 (2021-10-21)\n  *      - Add `KEY_NIGHT_MODE`.\n+ *\n+ * - 0.17.0 (2022-03-17)\n+ *      - Add `KEY_DELETE_TMPDIR_FILES_OLDER_THAN_X_DAYS_ON_EXIT`.\n  */\n \n /**\n@@ -96,6 +99,7 @@ public final class TermuxPropertyConstants {\n     public static final String KEY_DISABLE_HARDWARE_KEYBOARD_SHORTCUTS =  \"disable-hardware-keyboard-shortcuts\"; // Default: \"disable-hardware-keyboard-shortcuts\"\n \n \n+\n     /** Defines the key for whether a toast will be shown when user changes the terminal session */\n     public static final String KEY_DISABLE_TERMINAL_SESSION_CHANGE_TOAST =  \"disable-terminal-session-change-toast\"; // Default: \"disable-terminal-session-change-toast\"\n \n@@ -199,6 +203,19 @@ public final class TermuxPropertyConstants {\n \n \n \n+\n+    /**\n+     * Defines the key for how many days old the access time should be of files that should be\n+     * deleted from $TMPDIR on termux exit.\n+     * `-1` for none, `0` for all and `> 0` for x days.\n+     */\n+    public static final String KEY_DELETE_TMPDIR_FILES_OLDER_THAN_X_DAYS_ON_EXIT =  \"delete-tmpdir-files-older-than-x-days-on-exit\"; // Default: \"delete-tmpdir-files-older-than-x-days-on-exit\"\n+    public static final int IVALUE_DELETE_TMPDIR_FILES_OLDER_THAN_X_DAYS_ON_EXIT_MIN = -1;\n+    public static final int IVALUE_DELETE_TMPDIR_FILES_OLDER_THAN_X_DAYS_ON_EXIT_MAX = 100000;\n+    public static final int DEFAULT_IVALUE_DELETE_TMPDIR_FILES_OLDER_THAN_X_DAYS_ON_EXIT = 3;\n+\n+\n+\n     /** Defines the key for the terminal margin on left and right in dp units */\n     public static final String KEY_TERMINAL_MARGIN_HORIZONTAL =  \"terminal-margin-horizontal\"; // Default: \"terminal-margin-horizontal\"\n     public static final int IVALUE_TERMINAL_MARGIN_HORIZONTAL_MIN = 0;\n@@ -370,6 +387,7 @@ public final class TermuxPropertyConstants {\n \n         /* int */\n         KEY_BELL_BEHAVIOUR,\n+        KEY_DELETE_TMPDIR_FILES_OLDER_THAN_X_DAYS_ON_EXIT,\n         KEY_TERMINAL_CURSOR_BLINK_RATE,\n         KEY_TERMINAL_CURSOR_STYLE,\n         KEY_TERMINAL_MARGIN_HORIZONTAL,\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/settings/properties/TermuxSharedProperties.java b/termux-shared/src/main/java/com/termux/shared/termux/settings/properties/TermuxSharedProperties.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/settings/properties/TermuxSharedProperties.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/settings/properties/TermuxSharedProperties.java\n@@ -247,6 +247,8 @@ public static Object getInternalTermuxPropertyValueFromValue(Context context, St\n             /* int */\n             case TermuxPropertyConstants.KEY_BELL_BEHAVIOUR:\n                 return (int) getBellBehaviourInternalPropertyValueFromValue(value);\n+            case TermuxPropertyConstants.KEY_DELETE_TMPDIR_FILES_OLDER_THAN_X_DAYS_ON_EXIT:\n+                return (int) getDeleteTMPDIRFilesOlderThanXDaysOnExitInternalPropertyValueFromValue(value);\n             case TermuxPropertyConstants.KEY_TERMINAL_CURSOR_BLINK_RATE:\n                 return (int) getTerminalCursorBlinkRateInternalPropertyValueFromValue(value);\n             case TermuxPropertyConstants.KEY_TERMINAL_CURSOR_STYLE:\n@@ -320,6 +322,24 @@ public static int getBellBehaviourInternalPropertyValueFromValue(String value) {\n         return (int) SharedProperties.getDefaultIfNotInMap(TermuxPropertyConstants.KEY_BELL_BEHAVIOUR, TermuxPropertyConstants.MAP_BELL_BEHAVIOUR, SharedProperties.toLowerCase(value), TermuxPropertyConstants.DEFAULT_IVALUE_BELL_BEHAVIOUR, true, LOG_TAG);\n     }\n \n+    /**\n+     * Returns the int for the value if its not null and is between\n+     * {@link TermuxPropertyConstants#IVALUE_DELETE_TMPDIR_FILES_OLDER_THAN_X_DAYS_ON_EXIT_MIN} and\n+     * {@link TermuxPropertyConstants#IVALUE_DELETE_TMPDIR_FILES_OLDER_THAN_X_DAYS_ON_EXIT_MAX},\n+     * otherwise returns {@link TermuxPropertyConstants#DEFAULT_IVALUE_DELETE_TMPDIR_FILES_OLDER_THAN_X_DAYS_ON_EXIT}.\n+     *\n+     * @param value The {@link String} value to convert.\n+     * @return Returns the internal value for value.\n+     */\n+    public static int getDeleteTMPDIRFilesOlderThanXDaysOnExitInternalPropertyValueFromValue(String value) {\n+        return SharedProperties.getDefaultIfNotInRange(TermuxPropertyConstants.KEY_DELETE_TMPDIR_FILES_OLDER_THAN_X_DAYS_ON_EXIT,\n+            DataUtils.getIntFromString(value, TermuxPropertyConstants.DEFAULT_IVALUE_DELETE_TMPDIR_FILES_OLDER_THAN_X_DAYS_ON_EXIT),\n+            TermuxPropertyConstants.DEFAULT_IVALUE_DELETE_TMPDIR_FILES_OLDER_THAN_X_DAYS_ON_EXIT,\n+            TermuxPropertyConstants.IVALUE_DELETE_TMPDIR_FILES_OLDER_THAN_X_DAYS_ON_EXIT_MIN,\n+            TermuxPropertyConstants.IVALUE_DELETE_TMPDIR_FILES_OLDER_THAN_X_DAYS_ON_EXIT_MAX,\n+            true, true, LOG_TAG);\n+    }\n+\n     /**\n      * Returns the int for the value if its not null and is between\n      * {@link TermuxPropertyConstants#IVALUE_TERMINAL_CURSOR_BLINK_RATE_MIN} and\n@@ -583,6 +603,10 @@ public int getBellBehaviour() {\n         return (int) getInternalPropertyValue(TermuxPropertyConstants.KEY_BELL_BEHAVIOUR, true);\n     }\n \n+    public int getDeleteTMPDIRFilesOlderThanXDaysOnExit() {\n+        return (int) getInternalPropertyValue(TermuxPropertyConstants.KEY_DELETE_TMPDIR_FILES_OLDER_THAN_X_DAYS_ON_EXIT, true);\n+    }\n+\n     public int getTerminalCursorBlinkRate() {\n         return (int) getInternalPropertyValue(TermuxPropertyConstants.KEY_TERMINAL_CURSOR_BLINK_RATE, true);\n     }\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/shell/TermuxShellUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/shell/TermuxShellUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/shell/TermuxShellUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/shell/TermuxShellUtils.java\n@@ -5,11 +5,15 @@\n import androidx.annotation.NonNull;\n \n import com.termux.shared.errors.Error;\n+import com.termux.shared.file.filesystem.FileTypes;\n import com.termux.shared.termux.TermuxConstants;\n import com.termux.shared.file.FileUtils;\n import com.termux.shared.logger.Logger;\n import com.termux.shared.android.PackageUtils;\n import com.termux.shared.termux.TermuxUtils;\n+import com.termux.shared.termux.settings.properties.TermuxAppSharedProperties;\n+\n+import org.apache.commons.io.filefilter.TrueFileFilter;\n \n import java.io.File;\n import java.io.FileInputStream;\n@@ -27,6 +31,8 @@ public class TermuxShellUtils {\n \n     public static String TERMUX_API_VERSION_NAME;\n \n+    private static final String LOG_TAG = \"TermuxShellUtils\";\n+\n     public static String getDefaultWorkingDirectoryPath() {\n         return TermuxConstants.TERMUX_HOME_DIR_PATH;\n     }\n@@ -159,9 +165,29 @@ public static void clearTermuxTMPDIR(boolean onlyIfExists) {\n             return;\n \n         Error error;\n-        error = FileUtils.clearDirectory(\"$TMPDIR\", FileUtils.getCanonicalPath(TermuxConstants.TERMUX_TMP_PREFIX_DIR_PATH, null));\n-        if (error != null) {\n-            Logger.logErrorExtended(error.toString());\n+\n+        TermuxAppSharedProperties properties = TermuxAppSharedProperties.getProperties();\n+        int days = properties.getDeleteTMPDIRFilesOlderThanXDaysOnExit();\n+\n+        // Disable currently until FileUtils.deleteFilesOlderThanXDays() is fixed.\n+        if (days > 0)\n+            days = 0;\n+\n+        if (days < 0) {\n+            Logger.logInfo(LOG_TAG, \"Not clearing termux $TMPDIR\");\n+        } else if (days == 0) {\n+            error = FileUtils.clearDirectory(\"$TMPDIR\",\n+                FileUtils.getCanonicalPath(TermuxConstants.TERMUX_TMP_PREFIX_DIR_PATH, null));\n+            if (error != null) {\n+                Logger.logErrorExtended(LOG_TAG, \"Failed to clear termux $TMPDIR\\n\" + error);\n+            }\n+        } else {\n+            error = FileUtils.deleteFilesOlderThanXDays(\"$TMPDIR\",\n+                FileUtils.getCanonicalPath(TermuxConstants.TERMUX_TMP_PREFIX_DIR_PATH, null),\n+                TrueFileFilter.INSTANCE, days, true, FileTypes.FILE_TYPE_ANY_FLAGS);\n+            if (error != null) {\n+                Logger.logErrorExtended(LOG_TAG, \"Failed to delete files from termux $TMPDIR older than \" + days + \" days\\n\" + error);\n+            }\n         }\n     }\n ",
    "output": "Added: Allow users to adjust `$TMPDIR` clear mechanism on termux exit\n\nThe `delete-tmpdir-files-older-than-x-days-on-exit` key can be used to adjust how many days old the access time should be of files that should be deleted from `$TMPDIR` on termux exit. The user can set an integer value between `-1` and `100000`. Set `-1` to delete no files, `0` to delete all files and `> 0` for `x` days. The default value is `3` days. So adding an entry like `delete-tmpdir-files-older-than-x-days-on-exit=10` to `termux.properties` file will make termux delete files older than `10` when termux is exited. After updating the value, either restart termux or run `termux-reload-settings` for changes to take effect.\n\nNote that currently `> 0` will revert back to `0` since deletion is currently broken for empty sub directories and deletion needs to be done based on access time instead of modified time. It will need to be fixed in a later commit. Check `FileUtils.deleteFilesOlderThanXDays()`.\n\nRelated issue #2350"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n@@ -222,7 +222,7 @@ public boolean shouldUseCtrlSpaceWorkaround() {\n \n     @Override\n     public boolean isTerminalViewSelected() {\n-        return mActivity.getTerminalToolbarViewPager() == null || mActivity.isTerminalViewSelected();\n+        return mActivity.getTerminalToolbarViewPager() == null || mActivity.isTerminalViewSelected() || mActivity.getTerminalView().hasFocus();\n     }\n \n ",
    "output": "Fixed: Fix wrong input type selected if toolbar is switched back to extra keys after tapping terminal if in text input mode\n\nCloses #2503"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxInstaller.java b/app/src/main/java/com/termux/app/TermuxInstaller.java\n--- a/app/src/main/java/com/termux/app/TermuxInstaller.java\n+++ b/app/src/main/java/com/termux/app/TermuxInstaller.java\n@@ -286,6 +286,7 @@ public void run() {\n \n                     Logger.logInfo(LOG_TAG, \"Setting up storage symlinks at ~/storage/shared, ~/storage/downloads, ~/storage/dcim, ~/storage/pictures, ~/storage/music and ~/storage/movies for directories in \\\"\" + Environment.getExternalStorageDirectory().getAbsolutePath() + \"\\\".\");\n \n+                    // Get primary storage root \"/storage/emulated/0\" symlink\n                     File sharedDir = Environment.getExternalStorageDirectory();\n                     Os.symlink(sharedDir.getAbsolutePath(), new File(storageDir, \"shared\").getAbsolutePath());\n \n@@ -315,9 +316,17 @@ public void run() {\n                         Os.symlink(audiobooksDir.getAbsolutePath(), new File(storageDir, \"audiobooks\").getAbsolutePath());\n                     }\n \n-                    final File[] dirs = context.getExternalFilesDirs(null);\n-                    if (dirs != null && dirs.length > 1) {\n-                        for (int i = 1; i < dirs.length; i++) {\n+                    // Dir 0 should ideally be for primary storage\n+                    // https://cs.android.com/android/platform/superproject/+/android-12.0.0_r32:frameworks/base/core/java/android/app/ContextImpl.java;l=818\n+                    // https://cs.android.com/android/platform/superproject/+/android-12.0.0_r32:frameworks/base/core/java/android/os/Environment.java;l=219\n+                    // https://cs.android.com/android/platform/superproject/+/android-12.0.0_r32:frameworks/base/core/java/android/os/Environment.java;l=181\n+                    // https://cs.android.com/android/platform/superproject/+/android-12.0.0_r32:frameworks/base/services/core/java/com/android/server/StorageManagerService.java;l=3796\n+                    // https://cs.android.com/android/platform/superproject/+/android-7.0.0_r36:frameworks/base/services/core/java/com/android/server/MountService.java;l=3053\n+\n+                    // Create \"Android/data/com.termux\" symlinks\n+                    File[] dirs = context.getExternalFilesDirs(null);\n+                    if (dirs != null && dirs.length > 0) {\n+                        for (int i = 0; i < dirs.length; i++) {\n                             File dir = dirs[i];\n                             if (dir == null) continue;\n                             String symlinkName = \"external-\" + i;\n@@ -326,6 +335,18 @@ public void run() {\n                         }\n                     }\n \n+                    // Create \"Android/media/com.termux\" symlinks\n+                    dirs = context.getExternalMediaDirs();\n+                    if (dirs != null && dirs.length > 0) {\n+                        for (int i = 0; i < dirs.length; i++) {\n+                            File dir = dirs[i];\n+                            if (dir == null) continue;\n+                            String symlinkName = \"media-\" + i;\n+                            Logger.logInfo(LOG_TAG, \"Setting up storage symlinks at ~/storage/\" + symlinkName + \" for \\\"\" + dir.getAbsolutePath() + \"\\\".\");\n+                            Os.symlink(dir.getAbsolutePath(), new File(storageDir, symlinkName).getAbsolutePath());\n+                        }\n+                    }\n+\n                     Logger.logInfo(LOG_TAG, \"Storage symlinks created successfully.\");\n                 } catch (Exception e) {\n                     Logger.logErrorAndShowToast(context, LOG_TAG, e.getMessage());",
    "output": "Fixed: Add `media-*` symlinks to `Android/media` for all storages and `external-0` symlink to `Android/media` of primary storage\n\nThe `~/external-0` and `~/media-0` should point to primary storage and `1+` to others, possibly portable sd cards.\n\nNote that one can make portable sd card as primary storage as well instead of internal sd card with adoptable storage, which then links it to `/storage/emulated`, so the concept of `internal` and `external` sd card does not apply to primary storage for all cases.\n\nhttps://android.stackexchange.com/questions/214233/how-to-free-internal-storage-by-moving-data-or-using-symlink-bind-mount-with-a/214706#214706\n\nhttps://android.stackexchange.com/questions/217741/how-to-bind-mount-a-folder-inside-sdcard-with-correct-permissions/217936#217936\n\nhttps://android.stackexchange.com/questions/205430/what-is-storage-emulated-0/205494#205494\n\nhttps://source.android.com/devices/storage/adoptable\n\n```\n$ ls -l storage | cut -d ' ' -f 9-\n\naudiobooks -> /storage/emulated/0/Audiobooks\ndcim -> /storage/emulated/0/DCIM\ndocuments -> /storage/emulated/0/Documents\ndownloads -> /storage/emulated/0/Download\nexternal-0 -> /storage/emulated/0/Android/data/com.termux/files\nexternal-1 -> /storage/XXXX-XXXX/Android/data/com.termux/files\nmedia-0 -> /storage/emulated/0/Android/media/com.termux\nmedia-1 -> /storage/XXXX-XXXX/Android/media/com.termux\nmovies -> /storage/emulated/0/Movies\nmusic -> /storage/emulated/0/Music\npictures -> /storage/emulated/0/Pictures\npodcasts -> /storage/emulated/0/Podcasts\nshared -> /storage/emulated/0\n\n```\n\nCloses #2481"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxInstaller.java b/app/src/main/java/com/termux/app/TermuxInstaller.java\n--- a/app/src/main/java/com/termux/app/TermuxInstaller.java\n+++ b/app/src/main/java/com/termux/app/TermuxInstaller.java\n@@ -289,6 +289,9 @@ public void run() {\n                     File sharedDir = Environment.getExternalStorageDirectory();\n                     Os.symlink(sharedDir.getAbsolutePath(), new File(storageDir, \"shared\").getAbsolutePath());\n \n+                    File documentsDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS);\n+                    Os.symlink(documentsDir.getAbsolutePath(), new File(storageDir, \"documents\").getAbsolutePath());\n+\n                     File downloadsDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS);\n                     Os.symlink(downloadsDir.getAbsolutePath(), new File(storageDir, \"downloads\").getAbsolutePath());\n \n@@ -304,6 +307,14 @@ public void run() {\n                     File moviesDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_MOVIES);\n                     Os.symlink(moviesDir.getAbsolutePath(), new File(storageDir, \"movies\").getAbsolutePath());\n \n+                    File podcastsDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PODCASTS);\n+                    Os.symlink(podcastsDir.getAbsolutePath(), new File(storageDir, \"podcasts\").getAbsolutePath());\n+\n+                    if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.Q) {\n+                        File audiobooksDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_AUDIOBOOKS);\n+                        Os.symlink(audiobooksDir.getAbsolutePath(), new File(storageDir, \"audiobooks\").getAbsolutePath());\n+                    }\n+\n                     final File[] dirs = context.getExternalFilesDirs(null);\n                     if (dirs != null && dirs.length > 1) {\n                         for (int i = 1; i < dirs.length; i++) {",
    "output": "Added: Add `~/storage` symlinks for `documents`, `podcasts` and `audiobooks`\n\nThe `audiobooks` symlink will only be made on Android `10+`\n\nCloses #2648"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/activities/SettingsActivity.java b/app/src/main/java/com/termux/app/activities/SettingsActivity.java\n--- a/app/src/main/java/com/termux/app/activities/SettingsActivity.java\n+++ b/app/src/main/java/com/termux/app/activities/SettingsActivity.java\n@@ -60,12 +60,17 @@ public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {\n \n             setPreferencesFromResource(R.xml.root_preferences, rootKey);\n \n-            configureTermuxAPIPreference(context);\n-            configureTermuxFloatPreference(context);\n-            configureTermuxTaskerPreference(context);\n-            configureTermuxWidgetPreference(context);\n-            configureAboutPreference(context);\n-            configureDonatePreference(context);\n+            new Thread() {\n+                @Override\n+                public void run() {\n+                    configureTermuxAPIPreference(context);\n+                    configureTermuxFloatPreference(context);\n+                    configureTermuxTaskerPreference(context);\n+                    configureTermuxWidgetPreference(context);\n+                    configureAboutPreference(context);\n+                    configureDonatePreference(context);\n+                }\n+            }.start();\n         }\n \n         private void configureTermuxAPIPreference(@NonNull Context context) {",
    "output": "Changed: Use thread to setup settings components\n\nGetting plugin contexts may be considered as too much work on main thread in certain situations resulting in android complaining that app is not responding"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n@@ -5,7 +5,6 @@\n import android.content.ClipData;\n import android.content.ClipboardManager;\n import android.content.Context;\n-import android.content.Intent;\n import android.media.AudioManager;\n import android.os.Environment;\n import android.text.TextUtils;\n@@ -678,17 +677,10 @@ public void shareSessionTranscript() {\n         String transcriptText = ShellUtils.getTerminalSessionTranscriptText(session, false, true);\n         if (transcriptText == null) return;\n \n-        try {\n-            // See https://github.com/termux/termux-app/issues/1166.\n-            Intent intent = new Intent(Intent.ACTION_SEND);\n-            intent.setType(\"text/plain\");\n-            transcriptText = DataUtils.getTruncatedCommandOutput(transcriptText, DataUtils.TRANSACTION_SIZE_LIMIT_IN_BYTES, false, true, false).trim();\n-            intent.putExtra(Intent.EXTRA_TEXT, transcriptText);\n-            intent.putExtra(Intent.EXTRA_SUBJECT, mActivity.getString(R.string.title_share_transcript));\n-            mActivity.startActivity(Intent.createChooser(intent, mActivity.getString(R.string.title_share_transcript_with)));\n-        } catch (Exception e) {\n-            Logger.logStackTraceWithMessage(LOG_TAG,\"Failed to get share session transcript of length \" + transcriptText.length(), e);\n-        }\n+        // See https://github.com/termux/termux-app/issues/1166.\n+        transcriptText = DataUtils.getTruncatedCommandOutput(transcriptText, DataUtils.TRANSACTION_SIZE_LIMIT_IN_BYTES, false, true, false).trim();\n+        ShareUtils.shareText(mActivity, mActivity.getString(R.string.title_share_transcript),\n+            transcriptText, mActivity.getString(R.string.title_share_transcript_with));\n     }\n \n     public void showUrlSelection() {\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/interact/ShareUtils.java b/termux-shared/src/main/java/com/termux/shared/interact/ShareUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/interact/ShareUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/interact/ShareUtils.java\n@@ -23,6 +23,8 @@\n \n import java.nio.charset.Charset;\n \n+import javax.annotation.Nullable;\n+\n public class ShareUtils {\n \n     private static final String LOG_TAG = \"ShareUtils\";\n@@ -56,14 +58,26 @@ public static void openSystemAppChooser(final Context context, final Intent inte\n      * @param text The text to share.\n      */\n     public static void shareText(final Context context, final String subject, final String text) {\n+        shareText(context, subject, text, null);\n+    }\n+\n+    /**\n+     * Share text.\n+     *\n+     * @param context The context for operations.\n+     * @param subject The subject for sharing.\n+     * @param text The text to share.\n+     * @param title The title for share menu.\n+     */\n+    public static void shareText(final Context context, final String subject, final String text, @Nullable final String title) {\n         if (context == null || text == null) return;\n \n         final Intent shareTextIntent = new Intent(Intent.ACTION_SEND);\n         shareTextIntent.setType(\"text/plain\");\n         shareTextIntent.putExtra(Intent.EXTRA_SUBJECT, subject);\n         shareTextIntent.putExtra(Intent.EXTRA_TEXT, DataUtils.getTruncatedCommandOutput(text, DataUtils.TRANSACTION_SIZE_LIMIT_IN_BYTES, true, false, false));\n \n-        openSystemAppChooser(context, shareTextIntent, context.getString(R.string.title_share_with));\n+        openSystemAppChooser(context, shareTextIntent, DataUtils.isNullOrEmpty(title) ? context.getString(R.string.title_share_with) : title);\n     }\n \n     /**",
    "output": "Changed: Share terminal transcript with `ShareUtils`"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -199,11 +199,6 @@ public void onCreate(Bundle savedInstanceState) {\n \n         if (savedInstanceState != null)\n             mIsActivityRecreated = savedInstanceState.getBoolean(ARG_ACTIVITY_RECREATED, false);\n-        \n-        // Check if a crash happened on last run of the app or if a plugin crashed and show a\n-        // notification with the crash details if it did\n-        TermuxCrashUtils.notifyAppCrashFromCrashLogFile(this, LOG_TAG);\n-\n \n         // Delete ReportInfo serialized object files from cache older than 14 days\n         ReportActivity.deleteReportInfoFilesOlderThanXDays(this, 14, false);\n@@ -316,6 +311,10 @@ public void onResume() {\n         if (mTermuxTerminalViewClient != null)\n             mTermuxTerminalViewClient.onResume();\n \n+        // Check if a crash happened on last run of the app or if a plugin crashed and show a\n+        // notification with the crash details if it did\n+        TermuxCrashUtils.notifyAppCrashFromCrashLogFile(this, LOG_TAG);\n+\n         mIsOnResumeAfterOnCreate = false;\n     }\n ",
    "output": "Changed: Check crash log file whenever `TermuxActivity` is resumed instead of only on app startup\n\nThis adds onto 06dbfbdb since receiver would not be registered to receive `ACTION_NOTIFY_APP_CRASH` if `TermuxActivity` was not be in foreground"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -907,8 +907,9 @@ public static void updateTermuxActivityStyling(Context context, boolean recreate\n \n     private void registerTermuxActivityBroadcastReceiver() {\n         IntentFilter intentFilter = new IntentFilter();\n-        intentFilter.addAction(TERMUX_ACTIVITY.ACTION_REQUEST_PERMISSIONS);\n+        intentFilter.addAction(TERMUX_ACTIVITY.ACTION_NOTIFY_APP_CRASH);\n         intentFilter.addAction(TERMUX_ACTIVITY.ACTION_RELOAD_STYLE);\n+        intentFilter.addAction(TERMUX_ACTIVITY.ACTION_REQUEST_PERMISSIONS);\n \n         registerReceiver(mTermuxActivityBroadcastReceiver, intentFilter);\n     }\n@@ -936,14 +937,18 @@ public void onReceive(Context context, Intent intent) {\n                 fixTermuxActivityBroadcastReceieverIntent(intent);\n \n                 switch (intent.getAction()) {\n-                    case TERMUX_ACTIVITY.ACTION_REQUEST_PERMISSIONS:\n-                        Logger.logDebug(LOG_TAG, \"Received intent to request storage permissions\");\n-                        requestStoragePermission(false);\n+                    case TERMUX_ACTIVITY.ACTION_NOTIFY_APP_CRASH:\n+                        Logger.logDebug(LOG_TAG, \"Received intent to notify app crash\");\n+                        TermuxCrashUtils.notifyAppCrashFromCrashLogFile(context, LOG_TAG);\n                         return;\n                     case TERMUX_ACTIVITY.ACTION_RELOAD_STYLE:\n                         Logger.logDebug(LOG_TAG, \"Received intent to reload styling\");\n                         reloadActivityStyling(intent.getBooleanExtra(TERMUX_ACTIVITY.EXTRA_RECREATE_ACTIVITY, true));\n                         return;\n+                    case TERMUX_ACTIVITY.ACTION_REQUEST_PERMISSIONS:\n+                        Logger.logDebug(LOG_TAG, \"Received intent to request storage permissions\");\n+                        requestStoragePermission(false);\n+                        return;\n                     default:\n                 }\n             }\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n@@ -8,7 +8,7 @@\n import java.util.List;\n \n /*\n- * Version: v0.37.0\n+ * Version: v0.38.0\n  * SPDX-License-Identifier: MIT\n  *\n  * Changelog\n@@ -223,6 +223,9 @@\n  *\n  * - 0.37.0 (2022-03-15)\n  *  - Added `TERMUX_API_APT_*`.\n+ *\n+ * - 0.38.0 (2022-03-16)\n+ *      - Added `TERMUX_APP.TERMUX_ACTIVITY.ACTION_NOTIFY_APP_CRASH`.\n  */\n \n /**\n@@ -874,8 +877,9 @@ public static final class TERMUX_ACTIVITY {\n             public static final String EXTRA_FAILSAFE_SESSION = TermuxConstants.TERMUX_PACKAGE_NAME + \".app.failsafe_session\"; // Default: \"com.termux.app.failsafe_session\"\n \n \n-            /** Intent action to make termux request storage permissions */\n-            public static final String ACTION_REQUEST_PERMISSIONS = TermuxConstants.TERMUX_PACKAGE_NAME + \".app.request_storage_permissions\"; // Default: \"com.termux.app.request_storage_permissions\"\n+            /** Intent action to make termux app notify user that a crash happened. */\n+            public static final String ACTION_NOTIFY_APP_CRASH = TermuxConstants.TERMUX_PACKAGE_NAME + \".app.notify_app_crash\"; // Default: \"com.termux.app.notify_app_crash\"\n+\n \n             /** Intent action to make termux reload its termux session styling */\n             public static final String ACTION_RELOAD_STYLE = TermuxConstants.TERMUX_PACKAGE_NAME + \".app.reload_style\"; // Default: \"com.termux.app.reload_style\"\n@@ -886,6 +890,9 @@ public static final class TERMUX_ACTIVITY {\n             /**  Intent {@code boolean} extra for whether to recreate activity for the TERMUX_ACTIVITY.ACTION_RELOAD_STYLE intent. */\n             public static final String EXTRA_RECREATE_ACTIVITY = TERMUX_APP.TERMUX_ACTIVITY_NAME + \".EXTRA_RECREATE_ACTIVITY\"; // Default: \"com.termux.app.TermuxActivity.EXTRA_RECREATE_ACTIVITY\"\n \n+\n+            /** Intent action to make termux request storage permissions */\n+            public static final String ACTION_REQUEST_PERMISSIONS = TermuxConstants.TERMUX_PACKAGE_NAME + \".app.request_storage_permissions\"; // Default: \"com.termux.app.request_storage_permissions\"\n         }\n \n \n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/crash/TermuxCrashUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/crash/TermuxCrashUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/crash/TermuxCrashUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/crash/TermuxCrashUtils.java\n@@ -34,12 +34,70 @@\n \n public class TermuxCrashUtils implements CrashHandler.CrashHandlerClient {\n \n+    public enum TYPE {\n+        UNCAUGHT_EXCEPTION,\n+        CAUGHT_EXCEPTION;\n+    }\n+\n+    private final TYPE mType;\n+\n+    private static final String LOG_TAG = \"TermuxCrashUtils\";\n+\n+    TermuxCrashUtils(TYPE type) {\n+        mType = type;\n+    }\n+\n     /**\n      * Set default uncaught crash handler of current thread to {@link CrashHandler} for Termux app\n      * and its plugin to log crashes at {@link TermuxConstants#TERMUX_CRASH_LOG_FILE_PATH}.\n      */\n     public static void setCrashHandler(@NonNull final Context context) {\n-        CrashHandler.setCrashHandler(context, new TermuxCrashUtils());\n+        CrashHandler.setCrashHandler(context, new TermuxCrashUtils(TYPE.UNCAUGHT_EXCEPTION));\n+    }\n+\n+    /**\n+     * Log a crash to {@link TermuxConstants#TERMUX_CRASH_LOG_FILE_PATH} and notify termux app\n+     * by sending it the {@link TERMUX_APP.TERMUX_ACTIVITY#ACTION_NOTIFY_APP_CRASH} broadcast.\n+     *\n+     * @param context The {@link Context} for operations.\n+     * @param throwable The {@link Throwable} thrown for the crash.\n+     */\n+    public static void logCrash(@NonNull final Context context, final Throwable throwable) {\n+        if (throwable == null) return;\n+        CrashHandler.logCrash(context, new TermuxCrashUtils(TYPE.CAUGHT_EXCEPTION), Thread.currentThread(), throwable);\n+    }\n+\n+    @Override\n+    public boolean onPreLogCrash(Context context, Thread thread, Throwable throwable) {\n+        return false;\n+    }\n+\n+    @Override\n+    public void onPostLogCrash(final Context currentPackageContext, Thread thread, Throwable throwable) {\n+        if (currentPackageContext == null) return;\n+        String currentPackageName = currentPackageContext.getPackageName();\n+\n+        // Do not notify if is a non-termux app\n+        final Context context = TermuxUtils.getTermuxPackageContext(currentPackageContext);\n+        if (context == null) {\n+            Logger.logWarn(LOG_TAG, \"Ignoring call to onPostLogCrash() since failed to get \\\"\" + TermuxConstants.TERMUX_PACKAGE_NAME + \"\\\" package context from \\\"\" + currentPackageName + \"\\\" context\");\n+            return;\n+        }\n+\n+        // If an uncaught exception, then do not notify since the termux app itself would be crashing\n+        if (TYPE.UNCAUGHT_EXCEPTION.equals(mType) && TermuxConstants.TERMUX_PACKAGE_NAME.equals(currentPackageName))\n+            return;\n+\n+        String message = TERMUX_APP.TERMUX_ACTIVITY_NAME + \" that \\\"\" + currentPackageName + \"\\\" app crashed\";\n+\n+       try {\n+           Logger.logInfo(LOG_TAG, \"Sending broadcast to notify \" + message);\n+            Intent intent = new Intent(TERMUX_APP.TERMUX_ACTIVITY.ACTION_NOTIFY_APP_CRASH);\n+            intent.setPackage(TermuxConstants.TERMUX_PACKAGE_NAME);\n+            context.sendBroadcast(intent);\n+        } catch (Exception e) {\n+            Logger.logStackTraceWithMessage(LOG_TAG,\"Failed to notify \" + message, e);\n+        }\n     }\n \n     @NonNull",
    "output": "Added: Add support for `ACTION_NOTIFY_APP_CRASH` in receiver registered by `TermuxActivity` to notify users of plugin app crashes\n\nOnce plugins integrate changes for `TermuxCrashUtils.onPostLogCrash()`, they will send the `ACTION_NOTIFY_APP_CRASH` broadcast when an uncaught exception is caught by `CrashHandler`. If `TermuxActivity` is in foreground, then it will receive the broadcast and notify user of the crash by reading it from the crash log file without the user having to restart termux app to be notified."
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/crash/CrashHandler.java b/termux-shared/src/main/java/com/termux/shared/crash/CrashHandler.java\n--- a/termux-shared/src/main/java/com/termux/shared/crash/CrashHandler.java\n+++ b/termux-shared/src/main/java/com/termux/shared/crash/CrashHandler.java\n@@ -30,7 +30,8 @@ private CrashHandler(@NonNull final Context context, @NonNull final CrashHandler\n     }\n \n     public void uncaughtException(@NonNull Thread thread, @NonNull Throwable throwable) {\n-        logCrash(mContext, mCrashHandlerClient, thread, throwable);\n+        Logger.logInfo(LOG_TAG, \"uncaughtException() for \" + thread +  \": \" + throwable.getMessage());\n+        logCrash(thread, throwable);\n         defaultUEH.uncaughtException(thread, throwable);\n     }\n \n@@ -44,14 +45,30 @@ public static void setCrashHandler(@NonNull final Context context, @NonNull fina\n     }\n \n     /**\n-     * Log a crash in the crash log file at {@code crashlogFilePath}.\n+     * Log a crash in the crash log file at path returned by {@link CrashHandlerClient#getCrashLogFilePath(Context)}.\n      *\n      * @param context The {@link Context} for operations.\n      * @param crashHandlerClient The {@link CrashHandlerClient} implementation.\n      * @param thread The {@link Thread} in which the crash happened.\n      * @param throwable The {@link Throwable} thrown for the crash.\n      */\n-    public static void logCrash(@NonNull final Context context, @NonNull final CrashHandlerClient crashHandlerClient, final Thread thread, final Throwable throwable) {\n+    public static void logCrash(@NonNull Context context,\n+                                @NonNull CrashHandlerClient crashHandlerClient,\n+                                @NonNull Thread thread,  @NonNull Throwable throwable) {\n+        Logger.logInfo(LOG_TAG, \"logCrash() for \" + thread +  \": \" + throwable.getMessage());\n+        new CrashHandler(context, crashHandlerClient).logCrash(thread, throwable);\n+    }\n+\n+    public void logCrash(@NonNull Thread thread, @NonNull Throwable throwable) {\n+        if (!mCrashHandlerClient.onPreLogCrash(mContext, thread, throwable)) {\n+            logCrashToFile(mContext, mCrashHandlerClient, thread, throwable);\n+            mCrashHandlerClient.onPostLogCrash(mContext, thread, throwable);\n+        }\n+    }\n+\n+    public void logCrashToFile(@NonNull Context context,\n+                               @NonNull CrashHandlerClient crashHandlerClient,\n+                               @NonNull Thread thread, @NonNull Throwable throwable) {\n         StringBuilder reportString = new StringBuilder();\n \n         reportString.append(\"## Crash Details\\n\");\n@@ -79,6 +96,26 @@ public static void logCrash(@NonNull final Context context, @NonNull final Crash\n \n     public interface CrashHandlerClient {\n \n+        /**\n+         * Called before {@link #logCrashToFile(Context, CrashHandlerClient, Thread, Throwable)} is called.\n+         *\n+         * @param context The {@link Context} passed to {@link CrashHandler#CrashHandler(Context, CrashHandlerClient)}.\n+         * @param thread The {@link Thread} in which the crash happened.\n+         * @param throwable The {@link Throwable} thrown for the crash.\n+         * @return Should return {@code true} if crash has been handled and should not be logged,\n+         * otherwise {@code false}.\n+         */\n+        boolean onPreLogCrash(Context context, Thread thread, Throwable throwable);\n+\n+        /**\n+         * Called after {@link #logCrashToFile(Context, CrashHandlerClient, Thread, Throwable)} is called.\n+         *\n+         * @param context The {@link Context} passed to {@link CrashHandler#CrashHandler(Context, CrashHandlerClient)}.\n+         * @param thread The {@link Thread} in which the crash happened.\n+         * @param throwable The {@link Throwable} thrown for the crash.\n+         */\n+        void onPostLogCrash(Context context, Thread thread, Throwable throwable);\n+\n         /**\n          * Get crash log file path.\n          *",
    "output": "Added: Add support for `onPreLogCrash()` and `onPostLogCrash()` in `CrashHandler` so that `CrashHandlerClient` can decide which exceptions to log and add custom logic"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -648,7 +648,7 @@ private void startTermuxActivity() {\n         } else {\n             TermuxAppSharedPreferences preferences = TermuxAppSharedPreferences.build(this);\n             if (preferences == null) return;\n-            if (preferences.arePluginErrorNotificationsEnabled())\n+            if (preferences.arePluginErrorNotificationsEnabled(false))\n                 Logger.showToast(this, this.getString(R.string.error_display_over_other_apps_permission_not_granted), true);\n         }\n     }\n\ndiff --git a/app/src/main/java/com/termux/app/fragments/settings/termux/DebuggingPreferencesFragment.java b/app/src/main/java/com/termux/app/fragments/settings/termux/DebuggingPreferencesFragment.java\n--- a/app/src/main/java/com/termux/app/fragments/settings/termux/DebuggingPreferencesFragment.java\n+++ b/app/src/main/java/com/termux/app/fragments/settings/termux/DebuggingPreferencesFragment.java\n@@ -144,9 +144,9 @@ public boolean getBoolean(String key, boolean defValue) {\n             case \"terminal_view_key_logging_enabled\":\n                 return mPreferences.isTerminalViewKeyLoggingEnabled();\n             case \"plugin_error_notifications_enabled\":\n-                return mPreferences.arePluginErrorNotificationsEnabled();\n+                return mPreferences.arePluginErrorNotificationsEnabled(false);\n             case \"crash_report_notifications_enabled\":\n-                return mPreferences.areCrashReportNotificationsEnabled();\n+                return mPreferences.areCrashReportNotificationsEnabled(false);\n             default:\n                 return false;\n         }\n\ndiff --git a/app/src/main/java/com/termux/app/utils/PluginUtils.java b/app/src/main/java/com/termux/app/utils/PluginUtils.java\n--- a/app/src/main/java/com/termux/app/utils/PluginUtils.java\n+++ b/app/src/main/java/com/termux/app/utils/PluginUtils.java\n@@ -241,7 +241,7 @@ public static void sendPluginCommandErrorNotification(Context context, String lo\n         if (preferences == null) return;\n \n         // If user has disabled notifications for plugin commands, then just return\n-        if (!preferences.arePluginErrorNotificationsEnabled() && !forceNotification)\n+        if (!preferences.arePluginErrorNotificationsEnabled(true) && !forceNotification)\n             return;\n \n         logTag = DataUtils.getDefaultIfNull(logTag, LOG_TAG);\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/settings/preferences/TermuxAppSharedPreferences.java b/termux-shared/src/main/java/com/termux/shared/termux/settings/preferences/TermuxAppSharedPreferences.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/settings/preferences/TermuxAppSharedPreferences.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/settings/preferences/TermuxAppSharedPreferences.java\n@@ -20,6 +20,7 @@ public class TermuxAppSharedPreferences {\n \n     private final Context mContext;\n     private final SharedPreferences mSharedPreferences;\n+    private final SharedPreferences mMultiProcessSharedPreferences;\n \n     private int MIN_FONTSIZE;\n     private int MAX_FONTSIZE;\n@@ -30,6 +31,8 @@ public class TermuxAppSharedPreferences {\n     private TermuxAppSharedPreferences(@NonNull Context context) {\n         mContext = context;\n         mSharedPreferences = getPrivateSharedPreferences(mContext);\n+        mMultiProcessSharedPreferences = getPrivateAndMultiProcessSharedPreferences(mContext);\n+\n \n         setFontVariables(context);\n     }\n@@ -73,6 +76,12 @@ private static SharedPreferences getPrivateSharedPreferences(Context context) {\n     }\n \n \n+    private static SharedPreferences getPrivateAndMultiProcessSharedPreferences(Context context) {\n+        if (context == null) return null;\n+        return SharedPreferenceUtils.getPrivateAndMultiProcessSharedPreferences(context, TermuxConstants.TERMUX_DEFAULT_PREFERENCES_FILE_BASENAME_WITHOUT_EXTENSION);\n+    }\n+\n+\n \n     public boolean shouldShowTerminalToolbar() {\n         return SharedPreferenceUtils.getBoolean(mSharedPreferences, TERMUX_APP.KEY_SHOW_TERMINAL_TOOLBAR, TERMUX_APP.DEFAULT_VALUE_SHOW_TERMINAL_TOOLBAR);\n@@ -218,8 +227,11 @@ public void setTerminalViewKeyLoggingEnabled(boolean value) {\n \n \n \n-    public boolean arePluginErrorNotificationsEnabled() {\n-        return SharedPreferenceUtils.getBoolean(mSharedPreferences, TERMUX_APP.KEY_PLUGIN_ERROR_NOTIFICATIONS_ENABLED, TERMUX_APP.DEFAULT_VALUE_PLUGIN_ERROR_NOTIFICATIONS_ENABLED);\n+    public boolean arePluginErrorNotificationsEnabled(boolean readFromFile) {\n+        if (readFromFile)\n+            return SharedPreferenceUtils.getBoolean(mMultiProcessSharedPreferences, TERMUX_APP.KEY_PLUGIN_ERROR_NOTIFICATIONS_ENABLED, TERMUX_APP.DEFAULT_VALUE_PLUGIN_ERROR_NOTIFICATIONS_ENABLED);\n+        else\n+            return SharedPreferenceUtils.getBoolean(mSharedPreferences, TERMUX_APP.KEY_PLUGIN_ERROR_NOTIFICATIONS_ENABLED, TERMUX_APP.DEFAULT_VALUE_PLUGIN_ERROR_NOTIFICATIONS_ENABLED);\n     }\n \n     public void setPluginErrorNotificationsEnabled(boolean value) {\n@@ -228,8 +240,11 @@ public void setPluginErrorNotificationsEnabled(boolean value) {\n \n \n \n-    public boolean areCrashReportNotificationsEnabled() {\n-        return SharedPreferenceUtils.getBoolean(mSharedPreferences, TERMUX_APP.KEY_CRASH_REPORT_NOTIFICATIONS_ENABLED, TERMUX_APP.DEFAULT_VALUE_CRASH_REPORT_NOTIFICATIONS_ENABLED);\n+    public boolean areCrashReportNotificationsEnabled(boolean readFromFile) {\n+        if (readFromFile)\n+            return SharedPreferenceUtils.getBoolean(mMultiProcessSharedPreferences, TERMUX_APP.KEY_CRASH_REPORT_NOTIFICATIONS_ENABLED, TERMUX_APP.DEFAULT_VALUE_CRASH_REPORT_NOTIFICATIONS_ENABLED);\n+       else\n+            return SharedPreferenceUtils.getBoolean(mSharedPreferences, TERMUX_APP.KEY_CRASH_REPORT_NOTIFICATIONS_ENABLED, TERMUX_APP.DEFAULT_VALUE_CRASH_REPORT_NOTIFICATIONS_ENABLED);\n     }\n \n     public void setCrashReportNotificationsEnabled(boolean value) {",
    "output": "Added: Add multi process support in `TermuxAppSharedPreferences` since plugin apps may need to read values modified by termux app process"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n@@ -37,6 +37,8 @@ public class TermuxUtils {\n     public enum AppInfoMode {\n         /** Get info for Termux app only. */\n         TERMUX_PACKAGE,\n+        /** Get info for Termux app and plugin app if context is of plugin app. */\n+        TERMUX_AND_PLUGIN_PACKAGE,\n         /** Get info for Termux app and its plugins listed in {@link TermuxConstants#TERMUX_PLUGIN_APP_PACKAGE_NAMES_LIST}. */\n         TERMUX_AND_PLUGIN_PACKAGES,\n         /* Get info for all the Termux app plugins listed in {@link TermuxConstants#TERMUX_PLUGIN_APP_PACKAGE_NAMES_LIST}. */\n@@ -259,6 +261,9 @@ public static String getAppInfoMarkdownString(final Context currentPackageContex\n             case TERMUX_PACKAGE:\n                 return getAppInfoMarkdownString(currentPackageContext, false);\n \n+            case TERMUX_AND_PLUGIN_PACKAGE:\n+                return getAppInfoMarkdownString(currentPackageContext, true);\n+\n             case TERMUX_AND_PLUGIN_PACKAGES:\n                 appInfo.append(TermuxUtils.getAppInfoMarkdownString(currentPackageContext, false));\n ",
    "output": "Added: Add support for getting termux app and plugin app info only in `TermuxUtils.getAppInfoMarkdownString()`"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n@@ -273,11 +273,11 @@ public static String getAppInfoMarkdownString(final Context currentPackageContex\n             case TERMUX_AND_CALLING_PACKAGE:\n                 appInfo.append(TermuxUtils.getAppInfoMarkdownString(currentPackageContext, false));\n                 if (!DataUtils.isNullOrEmpty(callingPackageName)) {\n-                    String callingPackageAppInfo;\n+                    String callingPackageAppInfo = null;\n                     if (TermuxConstants.TERMUX_PLUGIN_APP_PACKAGE_NAMES_LIST.contains(callingPackageName)) {\n                         Context termuxPluginAppContext = PackageUtils.getContextForPackage(currentPackageContext, callingPackageName);\n                         if (termuxPluginAppContext != null)\n-                            callingPackageAppInfo = getAppInfoMarkdownString(termuxPluginAppContext, false);\n+                            appInfo.append(getAppInfoMarkdownString(termuxPluginAppContext, false));\n                         else\n                             callingPackageAppInfo = AndroidUtils.getAppInfoMarkdownString(currentPackageContext, callingPackageName);\n                     } else {",
    "output": "Fixed: Do not add double heading if callingPackageName passed to `TermuxUtils.getAppInfoMarkdownString()` is a plugin app"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n@@ -8,7 +8,7 @@\n import java.util.List;\n \n /*\n- * Version: v0.36.0\n+ * Version: v0.37.0\n  * SPDX-License-Identifier: MIT\n  *\n  * Changelog\n@@ -220,6 +220,9 @@\n  *\n  * - 0.36.0 (2022-03-10)\n  *      - Added `TERMUX_APP.TERMUX_SERVICE.EXTRA_RUNNER` and `TERMUX_APP.RUN_COMMAND_SERVICE.EXTRA_RUNNER`\n+ *\n+ * - 0.37.0 (2022-03-15)\n+ *  - Added `TERMUX_API_APT_*`.\n  */\n \n /**\n@@ -487,6 +490,16 @@ public final class TermuxConstants {\n     public static final String TERMUX_X11_PACKAGES_GITHUB_ISSUES_REPO_URL = TERMUX_X11_PACKAGES_GITHUB_REPO_URL + \"/issues\"; // Default: \"https://github.com/termux/x11-packages/issues\"\n \n \n+    /** Termux API apt package name */\n+    public static final String TERMUX_API_APT_PACKAGE_NAME = \"termux-api\"; // Default: \"termux-api\"\n+    /** Termux API apt Github repo name */\n+    public static final String TERMUX_API_APT_GITHUB_REPO_NAME = \"termux-api-package\"; // Default: \"termux-api-package\"\n+    /** Termux API apt Github repo url */\n+    public static final String TERMUX_API_APT_GITHUB_REPO_URL = TERMUX_GITHUB_ORGANIZATION_URL + \"/\" + TERMUX_API_APT_GITHUB_REPO_NAME; // Default: \"https://github.com/termux/termux-api-package\"\n+    /** Termux API apt Github issues repo url */\n+    public static final String TERMUX_API_APT_GITHUB_ISSUES_REPO_URL = TERMUX_API_APT_GITHUB_REPO_URL + \"/issues\"; // Default: \"https://github.com/termux/termux-api-package/issues\"\n+\n+\n \n \n ",
    "output": "Added: Add `TERMUX_API_APT_*` constants"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/android/PermissionUtils.java b/termux-shared/src/main/java/com/termux/shared/android/PermissionUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/android/PermissionUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/android/PermissionUtils.java\n@@ -15,6 +15,7 @@\n import android.provider.Settings;\n \n import androidx.annotation.NonNull;\n+import androidx.annotation.RequiresApi;\n import androidx.appcompat.app.AppCompatActivity;\n import androidx.core.content.ContextCompat;\n \n@@ -281,7 +282,7 @@ public static boolean checkAndRequestLegacyOrManageExternalStoragePermission(@No\n         if (requestCode < 0)\n             return false;\n \n-        if (requestLegacyStoragePermission) {\n+        if (requestLegacyStoragePermission || Build.VERSION.SDK_INT < Build.VERSION_CODES.R) {\n             requestLegacyStorageExternalPermission(context, requestCode);\n         } else {\n             requestManageStorageExternalPermission(context, requestCode);\n@@ -303,7 +304,7 @@ public static boolean checkAndRequestLegacyOrManageExternalStoragePermission(@No\n      * @return Returns {@code true} if permission is granted, otherwise {@code false}.\n      */\n     public static boolean checkStoragePermission(@NonNull Context context, boolean checkLegacyStoragePermission) {\n-        if (checkLegacyStoragePermission) {\n+        if (checkLegacyStoragePermission || Build.VERSION.SDK_INT < Build.VERSION_CODES.R) {\n             return checkPermissions(context,\n                 new String[]{Manifest.permission.READ_EXTERNAL_STORAGE,\n                     Manifest.permission.WRITE_EXTERNAL_STORAGE});\n@@ -328,6 +329,7 @@ public static boolean requestLegacyStorageExternalPermission(@NonNull Context co\n     }\n \n     /** Wrapper for {@link #requestManageStorageExternalPermission(Context, int)}. */\n+    @RequiresApi(api = Build.VERSION_CODES.R)\n     public static Error requestManageStorageExternalPermission(@NonNull Context context) {\n         return requestManageStorageExternalPermission(context, -1);\n     }\n@@ -343,6 +345,7 @@ public static Error requestManageStorageExternalPermission(@NonNull Context cont\n      *                    result it required.\n      * @return Returns the {@code error} if requesting the permission was not successful, otherwise {@code null}.\n      */\n+    @RequiresApi(api = Build.VERSION_CODES.R)\n     public static Error requestManageStorageExternalPermission(@NonNull Context context, int requestCode) {\n         Logger.logInfo(LOG_TAG, \"Requesting manage external storage permission\");\n \n@@ -376,8 +379,8 @@ public static Error requestManageStorageExternalPermission(@NonNull Context cont\n      * https://developer.android.com/training/data-storage/use-cases#opt-out-scoped-storage\n      */\n     public static boolean isLegacyExternalStoragePossible(@NonNull Context context) {\n-        return !(PackageUtils.getTargetSDKForPackage(context) >= Build.VERSION_CODES.R &&\n-            Build.VERSION.SDK_INT >= Build.VERSION_CODES.R);\n+        return !(Build.VERSION.SDK_INT >= Build.VERSION_CODES.R &&\n+            PackageUtils.getTargetSDKForPackage(context) >= Build.VERSION_CODES.R);\n     }\n \n     /**",
    "output": "Fixed: Suppress warnings for requiring android 11 to request `MANAGE_EXTERNAL_STORAGE` permission and call `Environment.isExternalStorageManager()`"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/android/PermissionUtils.java b/termux-shared/src/main/java/com/termux/shared/android/PermissionUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/android/PermissionUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/android/PermissionUtils.java\n@@ -133,9 +133,9 @@ public static boolean requestPermissions(@NonNull Context context, @NonNull Stri\n \n                 try {\n                     if (context instanceof AppCompatActivity)\n-                        ((AppCompatActivity) context).requestPermissions(new String[]{permission}, requestCode);\n+                        ((AppCompatActivity) context).requestPermissions(permissions, requestCode);\n                     else if (context instanceof Activity)\n-                        ((Activity) context).requestPermissions(new String[]{permission}, requestCode);\n+                        ((Activity) context).requestPermissions(permissions, requestCode);\n                     else {\n                         Error.logErrorAndShowToast(context, LOG_TAG,\n                             FunctionErrno.ERRNO_PARAMETER_NOT_INSTANCE_OF.getError(\"context\", \"requestPermissions\", \"Activity or AppCompatActivity\"));\n@@ -147,6 +147,8 @@ else if (context instanceof Activity)\n                     Logger.showToast(context, errmsg + \"\\n\" + e.getMessage(), true);\n                     return false;\n                 }\n+\n+                break;\n             }\n         }\n ",
    "output": "Fixed: Fix `PermissionUtils.requestPermissions()` not requesting multiple permissions correctly"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/settings/properties/SharedProperties.java b/termux-shared/src/main/java/com/termux/shared/settings/properties/SharedProperties.java\n--- a/termux-shared/src/main/java/com/termux/shared/settings/properties/SharedProperties.java\n+++ b/termux-shared/src/main/java/com/termux/shared/settings/properties/SharedProperties.java\n@@ -91,7 +91,7 @@ public class SharedProperties {\n      * @param sharedPropertiesParser The implementation of the {@link SharedPropertiesParser} interface.\n      */\n     public SharedProperties(@NonNull Context context, @Nullable File propertiesFile, Set<String> propertiesList, @NonNull SharedPropertiesParser sharedPropertiesParser) {\n-        mContext = context;\n+        mContext = context.getApplicationContext();\n         mPropertiesFile = propertiesFile;\n         mPropertiesList = propertiesList;\n         mSharedPropertiesParser = sharedPropertiesParser;\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/settings/properties/TermuxSharedProperties.java b/termux-shared/src/main/java/com/termux/shared/termux/settings/properties/TermuxSharedProperties.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/settings/properties/TermuxSharedProperties.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/settings/properties/TermuxSharedProperties.java\n@@ -26,7 +26,7 @@ public abstract class TermuxSharedProperties {\n \n     public TermuxSharedProperties(@NonNull Context context, @NonNull String label, File propertiesFile,\n                                   @NonNull Set<String> propertiesList, @NonNull SharedPropertiesParser sharedPropertiesParser) {\n-        mContext = context;\n+        mContext = context.getApplicationContext();\n         mLabel = label;\n         mPropertiesFile = propertiesFile;\n         mSharedProperties = new SharedProperties(context, mPropertiesFile, propertiesList, sharedPropertiesParser);",
    "output": "Changed: Use application context for SharedProperties"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -830,7 +830,7 @@ public boolean isVisible() {\n         return mIsVisible;\n     }\n \n-    public boolean isIsOnResumeAfterOnCreate() {\n+    public boolean isOnResumeAfterOnCreate() {\n         return mIsOnResumeAfterOnCreate;\n     }\n ",
    "output": "Fixed: Fix typo from 43858dfb"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -830,7 +830,7 @@ public boolean isVisible() {\n         return mIsVisible;\n     }\n \n-    public boolean ismIsOnResumeAfterOnCreate() {\n+    public boolean isIsOnResumeAfterOnCreate() {\n         return mIsOnResumeAfterOnCreate;\n     }\n ",
    "output": "Fixed: Fix typo from 43858dfb"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -248,14 +248,24 @@ public void onCreate(Bundle savedInstanceState) {\n \n         registerForContextMenu(mTerminalView);\n \n-        // Start the {@link TermuxService} and make it run regardless of who is bound to it\n-        Intent serviceIntent = new Intent(this, TermuxService.class);\n-        startService(serviceIntent);\n-\n-        // Attempt to bind to the service, this will call the {@link #onServiceConnected(ComponentName, IBinder)}\n-        // callback if it succeeds.\n-        if (!bindService(serviceIntent, this, 0))\n-            throw new RuntimeException(\"bindService() failed\");\n+        try {\n+            // Start the {@link TermuxService} and make it run regardless of who is bound to it\n+            Intent serviceIntent = new Intent(this, TermuxService.class);\n+            startService(serviceIntent);\n+\n+            // Attempt to bind to the service, this will call the {@link #onServiceConnected(ComponentName, IBinder)}\n+            // callback if it succeeds.\n+            if (!bindService(serviceIntent, this, 0))\n+                throw new RuntimeException(\"bindService() failed\");\n+        } catch (Exception e) {\n+            Logger.logStackTraceWithMessage(LOG_TAG,\"TermuxActivity failed to start TermuxService\", e);\n+            Logger.showToast(this,\n+                getString(e.getMessage() != null && e.getMessage().contains(\"app is in background\") ?\n+                    R.string.error_termux_service_start_failed_bg : R.string.error_termux_service_start_failed_general),\n+                true);\n+            mIsInvalidState = true;\n+            return;\n+        }\n \n         // Send the {@link TermuxConstants#BROADCAST_TERMUX_OPENED} broadcast to notify apps that Termux\n         // app has been opened.",
    "output": "Fixed: Fix app crash if failed to start TermuxService while in background due to android bg restrictions\n\nThe crash happens due to android 8.0 background restrictions if TermuxActivity is not in foreground/whitelist and attempts to start TermuxService. With this commit, the app will not crash but will just exit with a toast message.\n\nhttps://developer.android.com/about/versions/oreo/background#services\n\nhttps://cs.android.com/android/platform/superproject/+/android-12.0.0_r4:frameworks/base/services/core/java/com/android/server/am/ActiveServices.java;l=722\n\njava.lang.RuntimeException: Unable to start activity ComponentInfo{com.termux/com.termux.app.TermuxActivity}: java.lang.IllegalStateException: Not allowed to start service Intent { cmp=com.termux/.app.TermuxService }: app is in background uid UidRecord{533ae62 u0a187 TPSL idle procs:1 seq(0,0,0)}\n at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2947)\n at android.app.ActivityThread.handleLaunchActivity(ActivityThread.java:3082)\n at android.app.servertransaction.LaunchActivityItem.execute(LaunchActivityItem.java:78)\n at android.app.servertransaction.TransactionExecutor.executeCallbacks(TransactionExecutor.java:108)\n at android.app.servertransaction.TransactionExecutor.execute(TransactionExecutor.java:68)\n at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1832)\n at android.os.Handler.dispatchMessage(Handler.java:106)\n at android.os.Looper.loop(Looper.java:201)\n at android.app.ActivityThread.main(ActivityThread.java:6821)\n at java.lang.reflect.Method.invoke(Native Method)\n at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:547)\n at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:873)\nCaused by: java.lang.IllegalStateException: Not allowed to start service Intent { cmp=com.termux/.app.TermuxService }: app is in background uid UidRecord{533ae62 u0a187 TPSL idle procs:1 seq(0,0,0)}\n at android.app.ContextImpl.startServiceCommon(ContextImpl.java:1587)\n at android.app.ContextImpl.startService(ContextImpl.java:1542)\n at android.content.ContextWrapper.startService(ContextWrapper.java:674)\n at com.termux.app.TermuxActivity.onCreate(TermuxActivity.java:242)\n at android.app.Activity.performCreate(Activity.java:7224)\n at android.app.Activity.performCreate(Activity.java:7213)\n at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1272)\n at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2927)\n ... 11 more\n\nCloses #2552"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -151,7 +151,7 @@ public final class TermuxActivity extends AppCompatActivity implements ServiceCo\n     /**\n      * If onResume() was called after onCreate().\n      */\n-    private boolean isOnResumeAfterOnCreate = false;\n+    private boolean mIsOnResumeAfterOnCreate = false;\n \n     /**\n      * If activity was restarted like due to call to {@link #recreate()} after receiving\n@@ -189,7 +189,7 @@ public final class TermuxActivity extends AppCompatActivity implements ServiceCo\n     @Override\n     public void onCreate(Bundle savedInstanceState) {\n         Logger.logDebug(LOG_TAG, \"onCreate\");\n-        isOnResumeAfterOnCreate = true;\n+        mIsOnResumeAfterOnCreate = true;\n \n         if (savedInstanceState != null)\n             mIsActivityRecreated = savedInstanceState.getBoolean(ARG_ACTIVITY_RECREATED, false);\n@@ -298,7 +298,7 @@ public void onResume() {\n         if (mTermuxTerminalViewClient != null)\n             mTermuxTerminalViewClient.onResume();\n \n-        isOnResumeAfterOnCreate = false;\n+        mIsOnResumeAfterOnCreate = false;\n     }\n \n     @Override\n@@ -820,8 +820,8 @@ public boolean isVisible() {\n         return mIsVisible;\n     }\n \n-    public boolean isOnResumeAfterOnCreate() {\n-        return isOnResumeAfterOnCreate;\n+    public boolean ismIsOnResumeAfterOnCreate() {\n+        return mIsOnResumeAfterOnCreate;\n     }\n \n     public boolean isActivityRecreated() {",
    "output": "Fixed: Rename TermuxActivity isOnResumeAfterOnCreate to mIsOnResumeAfterOnCreate as per variable naming convention"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -153,6 +153,13 @@ public final class TermuxActivity extends AppCompatActivity implements ServiceCo\n      */\n     private boolean isOnResumeAfterOnCreate = false;\n \n+    /**\n+     * If activity was restarted like due to call to {@link #recreate()} after receiving\n+     * {@link TERMUX_ACTIVITY#ACTION_RELOAD_STYLE}, system dark night mode was changed or activity\n+     * was killed by android.\n+     */\n+    private boolean mIsActivityRecreated = false;\n+\n     /**\n      * The {@link TermuxActivity} is in an invalid state and must not be run.\n      */\n@@ -175,6 +182,7 @@ public final class TermuxActivity extends AppCompatActivity implements ServiceCo\n     private static final int CONTEXT_MENU_REPORT_ID = 9;\n \n     private static final String ARG_TERMINAL_TOOLBAR_TEXT_INPUT = \"terminal_toolbar_text_input\";\n+    private static final String ARG_ACTIVITY_RECREATED = \"activity_recreated\";\n \n     private static final String LOG_TAG = \"TermuxActivity\";\n \n@@ -183,6 +191,9 @@ public void onCreate(Bundle savedInstanceState) {\n         Logger.logDebug(LOG_TAG, \"onCreate\");\n         isOnResumeAfterOnCreate = true;\n \n+        if (savedInstanceState != null)\n+            mIsActivityRecreated = savedInstanceState.getBoolean(ARG_ACTIVITY_RECREATED, false);\n+\n         // Check if a crash happened on last run of the app and show a\n         // notification with the crash details if it did\n         CrashUtils.notifyAppCrashOnLastRun(this, LOG_TAG);\n@@ -339,6 +350,7 @@ public void onSaveInstanceState(@NonNull Bundle savedInstanceState) {\n \n         super.onSaveInstanceState(savedInstanceState);\n         saveTerminalToolbarTextInput(savedInstanceState);\n+        savedInstanceState.putBoolean(ARG_ACTIVITY_RECREATED, true);\n     }\n \n \n@@ -359,15 +371,17 @@ public void onServiceConnected(ComponentName componentName, IBinder service) {\n \n         setTermuxSessionsListView();\n \n+        final Intent intent = getIntent();\n+        setIntent(null);\n+\n         if (mTermuxService.isTermuxSessionsEmpty()) {\n             if (mIsVisible) {\n                 TermuxInstaller.setupBootstrapIfNeeded(TermuxActivity.this, () -> {\n                     if (mTermuxService == null) return; // Activity might have been destroyed.\n                     try {\n-                        Bundle bundle = getIntent().getExtras();\n                         boolean launchFailsafe = false;\n-                        if (bundle != null) {\n-                            launchFailsafe = bundle.getBoolean(TERMUX_ACTIVITY.EXTRA_FAILSAFE_SESSION, false);\n+                        if (intent != null && intent.getExtras() != null) {\n+                            launchFailsafe = intent.getExtras().getBoolean(TERMUX_ACTIVITY.EXTRA_FAILSAFE_SESSION, false);\n                         }\n                         mTermuxTerminalSessionClient.addNewSession(launchFailsafe, null);\n                     } catch (WindowManager.BadTokenException e) {\n@@ -379,10 +393,12 @@ public void onServiceConnected(ComponentName componentName, IBinder service) {\n                 finishActivityIfNotFinishing();\n             }\n         } else {\n-            Intent i = getIntent();\n-            if (i != null && Intent.ACTION_RUN.equals(i.getAction())) {\n+            // If termux was started from launcher \"New session\" shortcut and activity is recreated,\n+            // then the original intent will be re-delivered, resulting in a new session being re-added\n+            // each time.\n+            if (!mIsActivityRecreated && intent != null && Intent.ACTION_RUN.equals(intent.getAction())) {\n                 // Android 7.1 app shortcut from res/xml/shortcuts.xml.\n-                boolean isFailSafe = i.getBooleanExtra(TERMUX_ACTIVITY.EXTRA_FAILSAFE_SESSION, false);\n+                boolean isFailSafe = intent.getBooleanExtra(TERMUX_ACTIVITY.EXTRA_FAILSAFE_SESSION, false);\n                 mTermuxTerminalSessionClient.addNewSession(isFailSafe, null);\n             } else {\n                 mTermuxTerminalSessionClient.setCurrentSession(mTermuxTerminalSessionClient.getCurrentStoredSessionOrLast());\n@@ -541,7 +557,7 @@ private void setToggleKeyboardView() {\n         });\n \n         findViewById(R.id.toggle_keyboard_button).setOnLongClickListener(v -> {\n-            toggleTerminalToolbar();\n+            //toggleTerminalToolbar();\n             return true;\n         });\n     }\n@@ -808,6 +824,10 @@ public boolean isOnResumeAfterOnCreate() {\n         return isOnResumeAfterOnCreate;\n     }\n \n+    public boolean isActivityRecreated() {\n+        return mIsActivityRecreated;\n+    }\n+\n \n \n     public TermuxService getTermuxService() {\n\ndiff --git a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n@@ -105,7 +105,7 @@ public void onStart() {\n      */\n     public void onResume() {\n         // Show the soft keyboard if required\n-        setSoftKeyboardState(true, false);\n+        setSoftKeyboardState(true, mActivity.isActivityRecreated());\n \n         mTerminalCursorBlinkerStateAlreadySet = false;\n ",
    "output": "Fixed: Fix terminal sessions being re-added if \"New Session\" shortcut or termux-reload-settings was used\n\nIf TermuxActivity was recreated then the original intent was re-delivered, resulting in a new session being re-added each time.\n\nCloses #2566"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/shell/command/runner/app/AppShell.java b/termux-shared/src/main/java/com/termux/shared/shell/command/runner/app/AppShell.java\n--- a/termux-shared/src/main/java/com/termux/shared/shell/command/runner/app/AppShell.java\n+++ b/termux-shared/src/main/java/com/termux/shared/shell/command/runner/app/AppShell.java\n@@ -74,7 +74,7 @@ public static AppShell execute(@NonNull final Context context, @NonNull Executio\n         if (executionCommand.workingDirectory.isEmpty())\n             executionCommand.workingDirectory = \"/\";\n \n-        String[] env = shellEnvironmentClient.buildEnvironment(context, false, executionCommand.workingDirectory);\n+        String[] env = shellEnvironmentClient.buildEnvironment(context, executionCommand.isFailsafe, executionCommand.workingDirectory);\n \n         final String[] commandArray = shellEnvironmentClient.setupProcessArgs(executionCommand.executable, executionCommand.arguments);\n ",
    "output": "Fixed: Fix AppShell failsafe env"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -180,7 +180,6 @@ public final class TermuxActivity extends AppCompatActivity implements ServiceCo\n \n     @Override\n     public void onCreate(Bundle savedInstanceState) {\n-\n         Logger.logDebug(LOG_TAG, \"onCreate\");\n         isOnResumeAfterOnCreate = true;\n \n@@ -846,9 +845,10 @@ public TermuxAppSharedProperties getProperties() {\n \n \n \n-    public static void updateTermuxActivityStyling(Context context) {\n+    public static void updateTermuxActivityStyling(Context context, boolean recreateActivity) {\n         // Make sure that terminal styling is always applied.\n         Intent stylingIntent = new Intent(TERMUX_ACTIVITY.ACTION_RELOAD_STYLE);\n+        stylingIntent.putExtra(TERMUX_ACTIVITY.EXTRA_RECREATE_ACTIVITY, recreateActivity);\n         context.sendBroadcast(stylingIntent);\n     }\n \n@@ -889,15 +889,15 @@ public void onReceive(Context context, Intent intent) {\n                         return;\n                     case TERMUX_ACTIVITY.ACTION_RELOAD_STYLE:\n                         Logger.logDebug(LOG_TAG, \"Received intent to reload styling\");\n-                        reloadActivityStyling();\n+                        reloadActivityStyling(intent.getBooleanExtra(TERMUX_ACTIVITY.EXTRA_RECREATE_ACTIVITY, true));\n                         return;\n                     default:\n                 }\n             }\n         }\n     }\n \n-    private void reloadActivityStyling() {\n+    private void reloadActivityStyling(boolean recreateActivity) {\n         if (mProperties != null) {\n             mProperties.loadTermuxPropertiesFromDisk();\n \n@@ -925,7 +925,10 @@ private void reloadActivityStyling() {\n         // To change the activity and drawer theme, activity needs to be recreated.\n         // It will destroy the activity, including all stored variables and views, and onCreate()\n         // will be called again. Extra keys input text, terminal sessions and transcripts will be preserved.\n-        TermuxActivity.this.recreate();\n+        if (recreateActivity) {\n+            Logger.logDebug(LOG_TAG, \"Recreating activity\");\n+            TermuxActivity.this.recreate();\n+        }\n     }\n \n \n\ndiff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -540,7 +540,9 @@ public synchronized TermuxSession createTermuxSession(ExecutionCommand execution\n             mTermuxTerminalSessionClient.termuxSessionListNotifyUpdated();\n \n         updateNotification();\n-        TermuxActivity.updateTermuxActivityStyling(this);\n+\n+        // No need to recreate the activity since it likely just started and theme should already have applied\n+        TermuxActivity.updateTermuxActivityStyling(this, false);\n \n         return newTermuxSession;\n     }\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n@@ -8,7 +8,7 @@\n import java.util.List;\n \n /*\n- * Version: v0.34.0\n+ * Version: v0.35.0\n  * SPDX-License-Identifier: MIT\n  *\n  * Changelog\n@@ -214,6 +214,9 @@\n  *\n  * - 0.34.0 (2021-10-26)\n  *  - Move `RESULT_SENDER` to `com.termux.shared.shell.command.ShellCommandConstants`.\n+ *\n+ * - 0.35.0 (2022-01-28)\n+ *  - Add `TERMUX_APP.TERMUX_ACTIVITY.EXTRA_RECREATE_ACTIVITY`.\n  */\n \n /**\n@@ -864,6 +867,9 @@ public static final class TERMUX_ACTIVITY {\n             @Deprecated\n             public static final String EXTRA_RELOAD_STYLE = TermuxConstants.TERMUX_PACKAGE_NAME + \".app.reload_style\"; // Default: \"com.termux.app.reload_style\"\n \n+            /**  Intent {@code boolean} extra for whether to recreate activity for the TERMUX_ACTIVITY.ACTION_RELOAD_STYLE intent. */\n+            public static final String EXTRA_RECREATE_ACTIVITY = TERMUX_APP.TERMUX_ACTIVITY_NAME + \".EXTRA_RECREATE_ACTIVITY\"; // Default: \"com.termux.app.TermuxActivity.EXTRA_RECREATE_ACTIVITY\"\n+\n         }\n \n ",
    "output": "Changed: Do not recreate TermuxActivity enabled in 6631599f when TermuxService starts a session\n\nActivity will only be recreated when `termux-reload-settings` is run or `night-mode` config does not equal current system mode when TermuxActivity is initially started. Running `termux-reload-settings` can cause some problems if some variable whose state should be maintained or reset is not being done so correctly, like termux session shortcuts weren't before 4fd48a5a. It requires further testing and any bugs should be reported."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/settings/properties/TermuxAppSharedProperties.java b/app/src/main/java/com/termux/app/settings/properties/TermuxAppSharedProperties.java\n--- a/app/src/main/java/com/termux/app/settings/properties/TermuxAppSharedProperties.java\n+++ b/app/src/main/java/com/termux/app/settings/properties/TermuxAppSharedProperties.java\n@@ -22,7 +22,7 @@\n public class TermuxAppSharedProperties extends TermuxSharedProperties {\n \n     private ExtraKeysInfo mExtraKeysInfo;\n-    private List<KeyboardShortcut> mSessionShortcuts = new ArrayList<>();\n+    private List<KeyboardShortcut> mSessionShortcuts;\n \n     private static final String LOG_TAG = \"TermuxAppSharedProperties\";\n \n@@ -80,10 +80,7 @@ private void setExtraKeys() {\n      * Set the terminal sessions shortcuts.\n      */\n     private void setSessionShortcuts() {\n-        if (mSessionShortcuts == null)\n-            mSessionShortcuts = new ArrayList<>();\n-        else\n-            mSessionShortcuts.clear();\n+        mSessionShortcuts = new ArrayList<>();\n \n         // The {@link TermuxPropertyConstants#MAP_SESSION_SHORTCUTS} stores the session shortcut key and action pair\n         for (Map.Entry<String, Integer> entry : TermuxPropertyConstants.MAP_SESSION_SHORTCUTS.entrySet()) {",
    "output": "Fixed: Fix termux session shortcuts not working after TermuxActivity recreation\n\nThe `List<KeyboardShortcut> mSessionShortcuts = new ArrayList<>()` declaration was causing shortcuts list to be of size 0 in `TermuxTerminalViewClient.onCodePoint()` after re-creation, which resulted in session shortcuts not working."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/activities/SettingsActivity.java b/app/src/main/java/com/termux/app/activities/SettingsActivity.java\n--- a/app/src/main/java/com/termux/app/activities/SettingsActivity.java\n+++ b/app/src/main/java/com/termux/app/activities/SettingsActivity.java\n@@ -152,7 +152,7 @@ private void configureDonatePreference(@NonNull Context context) {\n                 }\n \n                 donatePreference.setOnPreferenceClickListener(preference -> {\n-                    ShareUtils.openURL(context, TermuxConstants.TERMUX_DONATE_URL);\n+                    ShareUtils.openUrl(context, TermuxConstants.TERMUX_DONATE_URL);\n                     return true;\n                 });\n             }\n\ndiff --git a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n@@ -180,7 +180,7 @@ public void onSingleTapUp(MotionEvent e) {\n \n             if (!urlSet.isEmpty()) {\n                 String url = (String) urlSet.iterator().next();\n-                ShareUtils.openURL(mActivity, url);\n+                ShareUtils.openUrl(mActivity, url);\n                 return;\n             }\n         }\n@@ -685,7 +685,7 @@ public void showUrlSelection() {\n             lv.setOnItemLongClickListener((parent, view, position, id) -> {\n                 dialog.dismiss();\n                 String url = (String) urls[position];\n-                ShareUtils.openURL(mActivity, url);\n+                ShareUtils.openUrl(mActivity, url);\n                 return true;\n             });\n         });\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/interact/ShareUtils.java b/termux-shared/src/main/java/com/termux/shared/interact/ShareUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/interact/ShareUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/interact/ShareUtils.java\n@@ -92,7 +92,7 @@ public static void copyTextToClipboard(final Context context, final String text,\n      * @param context The context for operations.\n      * @param url The url to open.\n      */\n-    public static void openURL(final Context context, final String url) {\n+    public static void openUrl(final Context context, final String url) {\n         if (context == null || url == null || url.isEmpty()) return;\n         Uri uri = Uri.parse(url);\n         Intent intent = new Intent(Intent.ACTION_VIEW, uri);",
    "output": "Changed: Rename ShareUtils openURL() to openUrl()"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/interact/ShareUtils.java b/termux-shared/src/main/java/com/termux/shared/interact/ShareUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/interact/ShareUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/interact/ShareUtils.java\n@@ -34,7 +34,7 @@ public class ShareUtils {\n      * @param intent The intent that describes the choices that should be shown.\n      * @param title The title for choose menu.\n      */\n-    private static void openSystemAppChooser(final Context context, final Intent intent, final String title) {\n+    public static void openSystemAppChooser(final Context context, final Intent intent, final String title) {\n         if (context == null) return;\n \n         final Intent chooserIntent = new Intent(Intent.ACTION_CHOOSER);",
    "output": "Changed: Change ShareUtils.openSystemAppChooser() to public"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxOpenReceiver.java b/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n--- a/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n+++ b/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n@@ -35,7 +35,7 @@ public class TermuxOpenReceiver extends BroadcastReceiver {\n     public void onReceive(Context context, Intent intent) {\n         final Uri data = intent.getData();\n         if (data == null) {\n-            Logger.logError(LOG_TAG, \"termux-open: Called without intent data\");\n+            Logger.logError(LOG_TAG, \"Called without intent data\");\n             return;\n         }\n \n@@ -68,7 +68,7 @@ public void onReceive(Context context, Intent intent) {\n             try {\n                 context.startActivity(urlIntent);\n             } catch (ActivityNotFoundException e) {\n-                Logger.logError(LOG_TAG, \"termux-open: No app handles the url \" + data);\n+                Logger.logError(LOG_TAG, \"No app handles the url \" + data);\n             }\n             return;\n         }\n@@ -82,7 +82,7 @@ public void onReceive(Context context, Intent intent) {\n \n         final File fileToShare = new File(filePath);\n         if (!(fileToShare.isFile() && fileToShare.canRead())) {\n-            Logger.logError(LOG_TAG, \"termux-open: Not a readable file: '\" + fileToShare.getAbsolutePath() + \"'\");\n+            Logger.logError(LOG_TAG, \"Not a readable file: '\" + fileToShare.getAbsolutePath() + \"'\");\n             return;\n         }\n \n@@ -120,7 +120,7 @@ public void onReceive(Context context, Intent intent) {\n         try {\n             context.startActivity(sendIntent);\n         } catch (ActivityNotFoundException e) {\n-            Logger.logError(LOG_TAG, \"termux-open: No app handles the url \" + data);\n+            Logger.logError(LOG_TAG, \"No app handles the url \" + data);\n         }\n     }\n ",
    "output": "Update: Remove duplicate log tag prefix from TermuxOpenReceiver"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxOpenReceiver.java b/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n--- a/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n+++ b/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n@@ -14,6 +14,7 @@\n import android.webkit.MimeTypeMap;\n \n import com.termux.app.utils.PluginUtils;\n+import com.termux.shared.data.DataUtils;\n import com.termux.shared.data.IntentUtils;\n import com.termux.shared.net.uri.UriUtils;\n import com.termux.shared.logger.Logger;\n@@ -74,6 +75,10 @@ public void onReceive(Context context, Intent intent) {\n \n         // Get full path including fragment (anything after last \"#\")\n         String filePath = UriUtils.getUriFilePathWithFragment(data);\n+        if (DataUtils.isNullOrEmpty(filePath)) {\n+            Logger.logError(LOG_TAG, \"filePath is null or empty\");\n+            return;\n+        }\n \n         final File fileToShare = new File(filePath);\n         if (!(fileToShare.isFile() && fileToShare.canRead())) {",
    "output": "Fixed: Do not open null or empty file paths passed to TermuxOpenReceiver"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxOpenReceiver.java b/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n--- a/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n+++ b/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n@@ -73,7 +73,7 @@ public void onReceive(Context context, Intent intent) {\n         }\n \n         // Get full path including fragment (anything after last \"#\")\n-        String filePath = UriUtils.getUriFilePath(data);\n+        String filePath = UriUtils.getUriFilePathWithFragment(data);\n \n         final File fileToShare = new File(filePath);\n         if (!(fileToShare.isFile() && fileToShare.canRead())) {\n\ndiff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -351,11 +351,11 @@ private void actionServiceExecute(Intent intent) {\n             Logger.logVerbose(LOG_TAG, \"uri: \\\"\" + executionCommand.executableUri + \"\\\", path: \\\"\" + executionCommand.executableUri.getPath() + \"\\\", fragment: \\\"\" + executionCommand.executableUri.getFragment() + \"\\\"\");\n \n             // Get full path including fragment (anything after last \"#\")\n-            executionCommand.executable = UriUtils.getUriFilePath(executionCommand.executableUri);\n+            executionCommand.executable = UriUtils.getUriFilePathWithFragment(executionCommand.executableUri);\n             executionCommand.arguments = IntentUtils.getStringArrayExtraIfSet(intent, TERMUX_SERVICE.EXTRA_ARGUMENTS, null);\n             if (executionCommand.inBackground)\n                 executionCommand.stdin = IntentUtils.getStringExtraIfSet(intent, TERMUX_SERVICE.EXTRA_STDIN, null);\n-                executionCommand.backgroundCustomLogLevel = IntentUtils.getIntegerExtraIfSet(intent, TERMUX_SERVICE.EXTRA_BACKGROUND_CUSTOM_LOG_LEVEL, null);\n+            executionCommand.backgroundCustomLogLevel = IntentUtils.getIntegerExtraIfSet(intent, TERMUX_SERVICE.EXTRA_BACKGROUND_CUSTOM_LOG_LEVEL, null);\n         }\n \n         executionCommand.workingDirectory = IntentUtils.getStringExtraIfSet(intent, TERMUX_SERVICE.EXTRA_WORKDIR, null);\n\ndiff --git a/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java b/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java\n--- a/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java\n+++ b/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java\n@@ -99,7 +99,7 @@ protected void onResume() {\n                 Logger.logVerbose(LOG_TAG, \"uri: \\\"\" + dataUri + \"\\\", path: \\\"\" + dataUri.getPath() + \"\\\", fragment: \\\"\" + dataUri.getFragment() + \"\\\"\");\n \n                 // Get full path including fragment (anything after last \"#\")\n-                String path = UriUtils.getUriFilePath(dataUri);\n+                String path = UriUtils.getUriFilePathWithFragment(dataUri);\n                 if (DataUtils.isNullOrEmpty(path)) {\n                     showErrorDialogAndQuit(\"File path from data uri is null, empty or invalid.\");\n                     return;\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/net/uri/UriUtils.java b/termux-shared/src/main/java/com/termux/shared/net/uri/UriUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/net/uri/UriUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/net/uri/UriUtils.java\n@@ -3,14 +3,15 @@\n import android.net.Uri;\n \n import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n \n import com.termux.shared.data.DataUtils;\n import com.termux.shared.file.FileUtils;\n \n public class UriUtils {\n \n     /**\n-     * Get the full file path from a {@link Uri}.\n+     * Get the full file path from a {@link Uri} including the fragment.\n      *\n      * If the {@link Uri} was created from file path with {@link Uri#parse(String)}, like \"am\"\n      * command \"-d\" option does, and the path contained a \"#\", then anything after it would become\n@@ -21,10 +22,11 @@ public class UriUtils {\n      * with {@link Uri.Builder#path(String)}, then \"#\" will automatically be encoded to \"%23\"\n      * and separate fragment will not exist.\n      *\n-     * @param uri The {@link Uri} to get basename from.\n+     * @param uri The {@link Uri} to get file path from.\n      * @return Returns the file path if found, otherwise {@code null}.\n      */\n-    public static String getUriFilePath(Uri uri) {\n+    @Nullable\n+    public static String getUriFilePathWithFragment(Uri uri) {\n         if (uri == null) return null;\n         String path = uri.getPath();\n         if (DataUtils.isNullOrEmpty(path)) return null;\n@@ -40,12 +42,13 @@ public static String getUriFilePath(Uri uri) {\n      * @param withFragment If the {@link Uri} fragment should be included in basename.\n      * @return Returns the file basename if found, otherwise {@code null}.\n      */\n+    @Nullable\n     public static String getUriFileBasename(Uri uri, boolean withFragment) {\n         if (uri == null) return null;\n \n         String path;\n         if (withFragment) {\n-            path = getUriFilePath(uri);\n+            path = getUriFilePathWithFragment(uri);\n         } else {\n             path = uri.getPath();\n             if (DataUtils.isNullOrEmpty(path)) return null;",
    "output": "Changed: Rename UriUtils getUriFilePath() to getUriFilePathWithFragment()"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/utils/PluginUtils.java b/app/src/main/java/com/termux/app/utils/PluginUtils.java\n--- a/app/src/main/java/com/termux/app/utils/PluginUtils.java\n+++ b/app/src/main/java/com/termux/app/utils/PluginUtils.java\n@@ -4,6 +4,7 @@\n import android.app.NotificationManager;\n import android.app.PendingIntent;\n import android.content.Context;\n+import android.os.Environment;\n \n import androidx.annotation.Nullable;\n ",
    "output": "Fixed: Add accidentally removed import in 5252fbbe"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/activities/ReportActivity.java b/termux-shared/src/main/java/com/termux/shared/activities/ReportActivity.java\n--- a/termux-shared/src/main/java/com/termux/shared/activities/ReportActivity.java\n+++ b/termux-shared/src/main/java/com/termux/shared/activities/ReportActivity.java\n@@ -21,7 +21,7 @@\n import com.termux.shared.file.FileUtils;\n import com.termux.shared.file.filesystem.FileType;\n import com.termux.shared.logger.Logger;\n-import com.termux.shared.models.errors.Error;\n+import com.termux.shared.errors.Error;\n import com.termux.shared.termux.TermuxConstants;\n import com.termux.shared.markdown.MarkdownUtils;\n import com.termux.shared.interact.ShareUtils;\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/models/ReportInfo.java b/termux-shared/src/main/java/com/termux/shared/models/ReportInfo.java\n--- a/termux-shared/src/main/java/com/termux/shared/models/ReportInfo.java\n+++ b/termux-shared/src/main/java/com/termux/shared/models/ReportInfo.java\n@@ -1,7 +1,7 @@\n package com.termux.shared.models;\n \n import com.termux.shared.markdown.MarkdownUtils;\n-import com.termux.shared.termux.AndroidUtils;\n+import com.termux.shared.android.AndroidUtils;\n \n import java.io.Serializable;\n \n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/shell/command/ShellCommandConstants.java b/termux-shared/src/main/java/com/termux/shared/shell/command/ShellCommandConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/shell/command/ShellCommandConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/shell/command/ShellCommandConstants.java\n@@ -0,0 +1,75 @@\n+package com.termux.shared.shell.command;\n+\n+import com.termux.shared.errors.Errno;\n+import com.termux.shared.shell.command.result.ResultConfig;\n+\n+import java.util.Formatter;\n+import java.util.IllegalFormatException;\n+\n+public class ShellCommandConstants {\n+\n+    /**\n+     * Class to send back results of commands to their callers like plugin or 3rd party apps.\n+     */\n+    public static final class RESULT_SENDER {\n+\n+        /*\n+         * The default `Formatter` format strings to use for `ResultConfig#resultFileBasename`\n+         * if `ResultConfig#resultSingleFile` is `true`.\n+         */\n+\n+        /** The {@link Formatter} format string for success if only `stdout` needs to be written to\n+         * {@link ResultConfig#resultFileBasename} where `stdout` maps to `%1$s`.\n+         * This is used when `err` equals {@link Errno#ERRNO_SUCCESS} (-1) and `stderr` is empty\n+         * and `exit_code` equals `0` and {@link ResultConfig#resultFileOutputFormat} is not passed. */\n+        public static final String FORMAT_SUCCESS_STDOUT = \"%1$s%n\";\n+        /** The {@link Formatter} format string for success if `stdout` and `exit_code` need to be written to\n+         * {@link ResultConfig#resultFileBasename} where `stdout` maps to `%1$s` and `exit_code` to `%2$s`.\n+         * This is used when `err` equals {@link Errno#ERRNO_SUCCESS} (-1) and `stderr` is empty\n+         * and `exit_code` does not equal `0` and {@link ResultConfig#resultFileOutputFormat} is not passed.\n+         * The exit code will be placed in a markdown inline code. */\n+        public static final String FORMAT_SUCCESS_STDOUT__EXIT_CODE = \"%1$s%n%n%n%nexit_code=%2$s%n\";\n+        /** The {@link Formatter} format string for success if `stdout`, `stderr` and `exit_code` need to be\n+         * written to {@link ResultConfig#resultFileBasename} where `stdout` maps to `%1$s`, `stderr`\n+         * maps to `%2$s` and `exit_code` to `%3$s`.\n+         * This is used when `err` equals {@link Errno#ERRNO_SUCCESS} (-1) and `stderr` is not empty\n+         * and {@link ResultConfig#resultFileOutputFormat} is not passed.\n+         * The stdout and stderr will be placed in a markdown code block. The exit code will be placed\n+         * in a markdown inline code. The surrounding backticks will be 3 more than the consecutive\n+         * backticks in any parameter itself for code blocks. */\n+        public static final String FORMAT_SUCCESS_STDOUT__STDERR__EXIT_CODE = \"stdout=%n%1$s%n%n%n%nstderr=%n%2$s%n%n%n%nexit_code=%3$s%n\";\n+        /** The {@link Formatter} format string for failure if `err`, `errmsg`(`error`), `stdout`,\n+         * `stderr` and `exit_code` need to be written to {@link ResultConfig#resultFileBasename} where\n+         * `err` maps to `%1$s`, `errmsg` maps to `%2$s`, `stdout` maps\n+         * to `%3$s`, `stderr` to `%4$s` and `exit_code` maps to `%5$s`.\n+         * Do not define an argument greater than `5`, like `%6$s` if you change this value since it will\n+         * raise {@link IllegalFormatException}.\n+         * This is used when `err` does not equal {@link Errno#ERRNO_SUCCESS} (-1) and\n+         * {@link ResultConfig#resultFileErrorFormat} is not passed.\n+         * The errmsg, stdout and stderr will be placed in a markdown code block. The err and exit code\n+         * will be placed in a markdown inline code. The surrounding backticks will be 3 more than\n+         * the consecutive backticks in any parameter itself for code blocks. The stdout, stderr\n+         * and exit code may be empty without any surrounding backticks if not set. */\n+        public static final String FORMAT_FAILED_ERR__ERRMSG__STDOUT__STDERR__EXIT_CODE = \"err=%1$s%n%n%n%nerrmsg=%n%2$s%n%n%n%nstdout=%n%3$s%n%n%n%nstderr=%n%4$s%n%n%n%nexit_code=%5$s%n\";\n+\n+\n+\n+        /*\n+         * The default prefixes to use for result files under `ResultConfig#resultDirectoryPath`\n+         * if `ResultConfig#resultSingleFile` is `false`.\n+         */\n+\n+        /** The prefix for the err result file. */\n+        public static final String RESULT_FILE_ERR_PREFIX = \"err\";\n+        /** The prefix for the errmsg result file. */\n+        public static final String RESULT_FILE_ERRMSG_PREFIX = \"errmsg\";\n+        /** The prefix for the stdout result file. */\n+        public static final String RESULT_FILE_STDOUT_PREFIX = \"stdout\";\n+        /** The prefix for the stderr result file. */\n+        public static final String RESULT_FILE_STDERR_PREFIX = \"stderr\";\n+        /** The prefix for the exitCode result file. */\n+        public static final String RESULT_FILE_EXIT_CODE_PREFIX = \"exit_code\";\n+\n+    }\n+\n+}",
    "output": "Changed: Add uncommitted changes from 361bfb39"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/termux/extrakeys/ExtraKeysView.java b/termux-shared/src/main/java/com/termux/shared/termux/extrakeys/ExtraKeysView.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/extrakeys/ExtraKeysView.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/extrakeys/ExtraKeysView.java\n@@ -25,13 +25,13 @@\n import android.view.View;\n import android.view.ViewConfiguration;\n import android.view.ViewGroup;\n-import android.widget.Button;\n import android.widget.GridLayout;\n import android.widget.PopupWindow;\n \n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n \n+import com.google.android.material.button.MaterialButton;\n import com.termux.shared.termux.terminal.io.TerminalExtraKeys;\n \n /**\n@@ -86,23 +86,23 @@ public interface IExtraKeysView {\n          * @param buttonInfo The {@link ExtraKeyButton} for the button that was clicked.\n          *                   The button may be a {@link ExtraKeyButton#KEY_MACRO} set which can be\n          *                   checked with a call to {@link ExtraKeyButton#isMacro()}.\n-         * @param button The {@link Button} that was clicked.\n+         * @param button The {@link MaterialButton} that was clicked.\n          */\n-        void onExtraKeyButtonClick(View view, ExtraKeyButton buttonInfo, Button button);\n+        void onExtraKeyButtonClick(View view, ExtraKeyButton buttonInfo, MaterialButton button);\n \n         /**\n          * This is called by {@link ExtraKeysView} when a button is clicked so that the client\n-         * can perform any hepatic feedback. This is only called in the {@link Button.OnClickListener}\n+         * can perform any hepatic feedback. This is only called in the {@link MaterialButton.OnClickListener}\n          * and not for every repeat. Its also called for {@link #mSpecialButtons}.\n          *\n          * @param view The view that was clicked.\n          * @param buttonInfo The {@link ExtraKeyButton} for the button that was clicked.\n-         * @param button The {@link Button} that was clicked.\n+         * @param button The {@link MaterialButton} that was clicked.\n          * @return Return {@code true} if the client handled the feedback, otherwise {@code false}\n-         * so that {@link ExtraKeysView#performExtraKeyButtonHapticFeedback(View, ExtraKeyButton, Button)}\n+         * so that {@link ExtraKeysView#performExtraKeyButtonHapticFeedback(View, ExtraKeyButton, MaterialButton)}\n          * can handle it depending on system settings.\n          */\n-        boolean performExtraKeyButtonHapticFeedback(View view, ExtraKeyButton buttonInfo, Button button);\n+        boolean performExtraKeyButtonHapticFeedback(View view, ExtraKeyButton buttonInfo, MaterialButton button);\n \n     }\n \n@@ -147,7 +147,7 @@ public interface IExtraKeysView {\n \n     /**\n      * The list of keys for which auto repeat of key should be triggered if its extra keys button\n-     * is long pressed. This is done by calling {@link IExtraKeysView#onExtraKeyButtonClick(View, ExtraKeyButton, Button)}\n+     * is long pressed. This is done by calling {@link IExtraKeysView#onExtraKeyButtonClick(View, ExtraKeyButton, MaterialButton)}\n      * every {@link #mLongPressRepeatDelay} seconds after {@link #mLongPressTimeout} has passed.\n      * The default keys are defined by {@link ExtraKeysConstants#PRIMARY_REPETITIVE_KEYS}.\n      */\n@@ -326,7 +326,7 @@ public void setLongPressTimeout(int longPressDuration) {\n         if (longPressDuration >= MIN_LONG_PRESS_DURATION && longPressDuration <= MAX_LONG_PRESS_DURATION) {\n             mLongPressTimeout = longPressDuration;\n         } else {\n-                mLongPressTimeout = FALLBACK_LONG_PRESS_DURATION;\n+            mLongPressTimeout = FALLBACK_LONG_PRESS_DURATION;\n         }\n     }\n \n@@ -382,12 +382,12 @@ public void reload(ExtraKeysInfo extraKeysInfo) {\n             for (int col = 0; col < buttons[row].length; col++) {\n                 final ExtraKeyButton buttonInfo = buttons[row][col];\n \n-                Button button;\n+                MaterialButton button;\n                 if (isSpecialButton(buttonInfo)) {\n                     button = createSpecialButton(buttonInfo.getKey(), true);\n                     if (button == null) return;\n                 } else {\n-                    button = new Button(getContext(), null, android.R.attr.buttonBarButtonStyle);\n+                    button = new MaterialButton(getContext(), null, android.R.attr.buttonBarButtonStyle);\n                 }\n \n                 button.setText(buttonInfo.getDisplay());\n@@ -566,12 +566,12 @@ public void run() {\n     void showPopup(View view, ExtraKeyButton extraButton) {\n         int width = view.getMeasuredWidth();\n         int height = view.getMeasuredHeight();\n-        Button button;\n+        MaterialButton button;\n         if (isSpecialButton(extraButton)) {\n             button = createSpecialButton(extraButton.getKey(), false);\n             if (button == null) return;\n         } else {\n-            button = new Button(getContext(), null, android.R.attr.buttonBarButtonStyle);\n+            button = new MaterialButton(getContext(), null, android.R.attr.buttonBarButtonStyle);\n             button.setTextColor(mButtonTextColor);\n         }\n         button.setText(extraButton.getDisplay());\n@@ -631,11 +631,11 @@ public Boolean readSpecialButton(SpecialButton specialButton, boolean autoSetInA\n         return true;\n     }\n \n-    public Button createSpecialButton(String buttonKey, boolean needUpdate) {\n+    public MaterialButton createSpecialButton(String buttonKey, boolean needUpdate) {\n         SpecialButtonState state = mSpecialButtons.get(SpecialButton.valueOf(buttonKey));\n         if (state == null) return null;\n         state.setIsCreated(true);\n-        Button button = new Button(getContext(), null, android.R.attr.buttonBarButtonStyle);\n+        MaterialButton button = new MaterialButton(getContext(), null, android.R.attr.buttonBarButtonStyle);\n         button.setTextColor(state.isActive ? mButtonActiveTextColor : mButtonTextColor);\n         if (needUpdate) {\n             state.buttons.add(button);\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/extrakeys/SpecialButtonState.java b/termux-shared/src/main/java/com/termux/shared/termux/extrakeys/SpecialButtonState.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/extrakeys/SpecialButtonState.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/extrakeys/SpecialButtonState.java\n@@ -1,6 +1,6 @@\n package com.termux.shared.termux.extrakeys;\n \n-import android.widget.Button;\n+import com.google.android.material.button.MaterialButton;\n \n import java.util.ArrayList;\n import java.util.List;\n@@ -16,7 +16,7 @@ public class SpecialButtonState {\n      * state is read. */\n     boolean isLocked = false;\n \n-    List<Button> buttons = new ArrayList<>();\n+    List<MaterialButton> buttons = new ArrayList<>();\n \n     ExtraKeysView mExtraKeysView;\n \n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/terminal/io/TerminalExtraKeys.java b/termux-shared/src/main/java/com/termux/shared/termux/terminal/io/TerminalExtraKeys.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/terminal/io/TerminalExtraKeys.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/terminal/io/TerminalExtraKeys.java\n@@ -2,10 +2,10 @@\n \n import android.view.KeyEvent;\n import android.view.View;\n-import android.widget.Button;\n \n import androidx.annotation.NonNull;\n \n+import com.google.android.material.button.MaterialButton;\n import com.termux.shared.termux.extrakeys.ExtraKeyButton;\n import com.termux.shared.termux.extrakeys.ExtraKeysView;\n import com.termux.shared.termux.extrakeys.SpecialButton;\n@@ -23,7 +23,7 @@ public TerminalExtraKeys(@NonNull TerminalView terminalView) {\n     }\n \n     @Override\n-    public void onExtraKeyButtonClick(View view, ExtraKeyButton buttonInfo, Button button) {\n+    public void onExtraKeyButtonClick(View view, ExtraKeyButton buttonInfo, MaterialButton button) {\n         if (buttonInfo.isMacro()) {\n             String[] keys = buttonInfo.getKey().split(\" \");\n             boolean ctrlDown = false;\n@@ -70,7 +70,7 @@ protected void onTerminalExtraKeyButtonClick(View view, String key, boolean ctrl\n     }\n \n     @Override\n-    public boolean performExtraKeyButtonHapticFeedback(View view, ExtraKeyButton buttonInfo, Button button) {\n+    public boolean performExtraKeyButtonHapticFeedback(View view, ExtraKeyButton buttonInfo, MaterialButton button) {\n         return false;\n     }\n ",
    "output": "Changed: Replace extra-keys Button with MaterialButton"
  },
  {
    "input": "diff --git a/terminal-view/src/main/java/com/termux/view/textselection/TextSelectionCursorController.java b/terminal-view/src/main/java/com/termux/view/textselection/TextSelectionCursorController.java\n--- a/terminal-view/src/main/java/com/termux/view/textselection/TextSelectionCursorController.java\n+++ b/terminal-view/src/main/java/com/termux/view/textselection/TextSelectionCursorController.java\n@@ -1,12 +1,10 @@\n package com.termux.view.textselection;\n \n-import android.content.ClipData;\n import android.content.ClipboardManager;\n import android.content.Context;\n import android.graphics.Rect;\n import android.text.TextUtils;\n import android.view.ActionMode;\n-import android.view.InputDevice;\n import android.view.Menu;\n import android.view.MenuItem;\n import android.view.MotionEvent;",
    "output": "Fixed: Remove unused imports"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/activity/ActivityErrno.java b/termux-shared/src/main/java/com/termux/shared/activity/ActivityErrno.java\n--- a/termux-shared/src/main/java/com/termux/shared/activity/ActivityErrno.java\n+++ b/termux-shared/src/main/java/com/termux/shared/activity/ActivityErrno.java\n@@ -2,9 +2,9 @@\n \n import com.termux.shared.errors.Errno;\n \n-public class ActivityUtilsErrno extends Errno {\n+public class ActivityErrno extends Errno {\n \n-    public static final String TYPE = \"ActivityUtils Error\";\n+    public static final String TYPE = \"Activity Error\";\n \n \n     /* Errors for starting activities (100-150) */\n@@ -13,7 +13,7 @@ public class ActivityUtilsErrno extends Errno {\n     public static final Errno ERRNO_STARTING_ACTIVITY_WITH_NULL_CONTEXT = new Errno(TYPE, 102, \"Cannot start \\\"%1$s\\\" activity with null Context\");\n \n \n-    ActivityUtilsErrno(final String type, final int code, final String message) {\n+    ActivityErrno(final String type, final int code, final String message) {\n         super(type, code, message);\n     }\n \n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/activity/ActivityUtils.java b/termux-shared/src/main/java/com/termux/shared/activity/ActivityUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/activity/ActivityUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/activity/ActivityUtils.java\n@@ -34,15 +34,14 @@ public static Error startActivity(@NonNull Context context, @NonNull Intent inte\n      *                         in addition to logging a message. The {@code context} must not be\n      *                         {@code null}.\n      * @return Returns the {@code error} if starting activity was not successful, otherwise {@code null}.\n-\n      */\n     public static Error startActivity(Context context, @NonNull Intent intent,\n                                       boolean logErrorMessage, boolean showErrorMessage) {\n         Error error;\n         String activityName = intent.getComponent() != null ? intent.getComponent().getClassName() : \"Unknown\";\n \n         if (context == null) {\n-            error = ActivityUtilsErrno.ERRNO_STARTING_ACTIVITY_WITH_NULL_CONTEXT.getError(activityName);\n+            error = ActivityErrno.ERRNO_STARTING_ACTIVITY_WITH_NULL_CONTEXT.getError(activityName);\n             if (logErrorMessage)\n                 error.logErrorAndShowToast(null, LOG_TAG);\n             return error;\n@@ -51,7 +50,7 @@ public static Error startActivity(Context context, @NonNull Intent intent,\n         try {\n             context.startActivity(intent);\n         } catch (Exception e) {\n-            error = ActivityUtilsErrno.ERRNO_START_ACTIVITY_FAILED_WITH_EXCEPTION.getError(e, activityName, e.getMessage());\n+            error = ActivityErrno.ERRNO_START_ACTIVITY_FAILED_WITH_EXCEPTION.getError(e, activityName, e.getMessage());\n             if (logErrorMessage)\n                 error.logErrorAndShowToast(showErrorMessage ? context : null, LOG_TAG);\n             return error;\n@@ -97,7 +96,6 @@ public static Error startActivityForResult(Context context, int requestCode, @No\n      *                               used instead.\n      *                               Note that later is deprecated.\n      * @return Returns the {@code error} if starting activity was not successful, otherwise {@code null}.\n-\n      */\n     public static Error startActivityForResult(Context context, int requestCode, @NonNull Intent intent,\n                                                boolean logErrorMessage, boolean showErrorMessage,\n@@ -109,7 +107,7 @@ public static Error startActivityForResult(Context context, int requestCode, @No\n                 activityResultLauncher.launch(intent);\n             } else {\n                 if (context == null) {\n-                    error = ActivityUtilsErrno.ERRNO_STARTING_ACTIVITY_WITH_NULL_CONTEXT.getError(activityName);\n+                    error = ActivityErrno.ERRNO_STARTING_ACTIVITY_WITH_NULL_CONTEXT.getError(activityName);\n                     if (logErrorMessage)\n                         error.logErrorAndShowToast(null, LOG_TAG);\n                     return error;\n@@ -127,7 +125,7 @@ else if (context instanceof Activity)\n                 }\n             }\n         } catch (Exception e) {\n-            error = ActivityUtilsErrno.ERRNO_START_ACTIVITY_FOR_RESULT_FAILED_WITH_EXCEPTION.getError(e, activityName, e.getMessage());\n+            error = ActivityErrno.ERRNO_START_ACTIVITY_FOR_RESULT_FAILED_WITH_EXCEPTION.getError(e, activityName, e.getMessage());\n             if (logErrorMessage)\n                 error.logErrorAndShowToast(showErrorMessage ? context : null, LOG_TAG);\n             return error;",
    "output": "Changed: Rename ActivityUtilsErrno to ActivityErrno"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/termux/extrakeys/ExtraKeysView.java b/termux-shared/src/main/java/com/termux/shared/termux/extrakeys/ExtraKeysView.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/extrakeys/ExtraKeysView.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/extrakeys/ExtraKeysView.java\n@@ -134,15 +134,15 @@ public interface IExtraKeysView {\n \n \n     /** The implementation of the {@link IExtraKeysView} that acts as a client for the {@link ExtraKeysView}. */\n-    private IExtraKeysView mExtraKeysViewClient;\n+    protected IExtraKeysView mExtraKeysViewClient;\n \n     /** The map for the {@link SpecialButton} and their {@link SpecialButtonState}. Defaults to\n      * the one returned by {@link #getDefaultSpecialButtons(ExtraKeysView)}. */\n-    private Map<SpecialButton, SpecialButtonState> mSpecialButtons;\n+    protected Map<SpecialButton, SpecialButtonState> mSpecialButtons;\n \n     /** The keys for the {@link SpecialButton} added to {@link #mSpecialButtons}. This is automatically\n      * set when the call to {@link #setSpecialButtons(Map)} is made. */\n-    private Set<String> mSpecialButtonsKeys;\n+    protected Set<String> mSpecialButtonsKeys;\n \n \n     /**\n@@ -151,22 +151,22 @@ public interface IExtraKeysView {\n      * every {@link #mLongPressRepeatDelay} seconds after {@link #mLongPressTimeout} has passed.\n      * The default keys are defined by {@link ExtraKeysConstants#PRIMARY_REPETITIVE_KEYS}.\n      */\n-    private List<String> mRepetitiveKeys;\n+    protected List<String> mRepetitiveKeys;\n \n \n     /** The text color for the extra keys button. Defaults to {@link #DEFAULT_BUTTON_TEXT_COLOR}. */\n-    private int mButtonTextColor;\n+    protected int mButtonTextColor;\n     /** The text color for the extra keys button when its active.\n      * Defaults to {@link #DEFAULT_BUTTON_ACTIVE_TEXT_COLOR}. */\n-    private int mButtonActiveTextColor;\n+    protected int mButtonActiveTextColor;\n     /** The background color for the extra keys button. Defaults to {@link #DEFAULT_BUTTON_BACKGROUND_COLOR}. */\n-    private int mButtonBackgroundColor;\n+    protected int mButtonBackgroundColor;\n     /** The background color for the extra keys button when its active. Defaults to\n      * {@link #DEFAULT_BUTTON_ACTIVE_BACKGROUND_COLOR}. */\n-    private int mButtonActiveBackgroundColor;\n+    protected int mButtonActiveBackgroundColor;\n \n     /** Defines whether text for the extra keys button should be all capitalized automatically. */\n-    private boolean mButtonTextAllCaps = true;\n+    protected boolean mButtonTextAllCaps = true;\n \n \n     /**\n@@ -176,25 +176,25 @@ public interface IExtraKeysView {\n      * The duration must be in between {@link #MIN_LONG_PRESS_DURATION} and {@link #MAX_LONG_PRESS_DURATION},\n      * otherwise {@link #FALLBACK_LONG_PRESS_DURATION} is used.\n      */\n-    private int mLongPressTimeout;\n+    protected int mLongPressTimeout;\n \n     /**\n      * Defines the duration in milliseconds for the delay between trigger of each repeat of\n      * {@link #mRepetitiveKeys}. The default value is defined by {@link #DEFAULT_LONG_PRESS_REPEAT_DELAY}.\n      * The duration must be in between {@link #MIN_LONG_PRESS__REPEAT_DELAY} and\n      * {@link #MAX_LONG_PRESS__REPEAT_DELAY}, otherwise {@link #DEFAULT_LONG_PRESS_REPEAT_DELAY} is used.\n      */\n-    private int mLongPressRepeatDelay;\n+    protected int mLongPressRepeatDelay;\n \n \n     /** The popup window shown if {@link ExtraKeyButton#getPopup()} returns a {@code non-null} value\n      * and a swipe up action is done on an extra key. */\n-    private PopupWindow mPopupWindow;\n+    protected PopupWindow mPopupWindow;\n \n-    private ScheduledExecutorService mScheduledExecutor;\n-    private Handler mHandler;\n-    private SpecialButtonsLongHoldRunnable mSpecialButtonsLongHoldRunnable;\n-    private int mLongPressCount;\n+    protected ScheduledExecutorService mScheduledExecutor;\n+    protected Handler mHandler;\n+    protected SpecialButtonsLongHoldRunnable mSpecialButtonsLongHoldRunnable;\n+    protected int mLongPressCount;\n \n \n     public ExtraKeysView(Context context, AttributeSet attrs) {\n@@ -465,12 +465,12 @@ public void reload(ExtraKeysInfo extraKeysInfo) {\n \n \n \n-    private void onExtraKeyButtonClick(View view, ExtraKeyButton buttonInfo, Button button) {\n+    public void onExtraKeyButtonClick(View view, ExtraKeyButton buttonInfo, MaterialButton button) {\n         if (mExtraKeysViewClient != null)\n             mExtraKeysViewClient.onExtraKeyButtonClick(view, buttonInfo, button);\n     }\n \n-    private void performExtraKeyButtonHapticFeedback(View view, ExtraKeyButton buttonInfo, Button button) {\n+    public void performExtraKeyButtonHapticFeedback(View view, ExtraKeyButton buttonInfo, MaterialButton button) {\n         if (mExtraKeysViewClient != null) {\n             // If client handled the feedback, then just return\n             if (mExtraKeysViewClient.performExtraKeyButtonHapticFeedback(view, buttonInfo, button))\n@@ -493,7 +493,7 @@ private void performExtraKeyButtonHapticFeedback(View view, ExtraKeyButton butto\n \n \n \n-    private void onAnyExtraKeyButtonClick(View view, @NonNull ExtraKeyButton buttonInfo, Button button) {\n+    public void onAnyExtraKeyButtonClick(View view, @NonNull ExtraKeyButton buttonInfo, MaterialButton button) {\n         if (isSpecialButton(buttonInfo)) {\n             if (mLongPressCount > 0) return;\n             SpecialButtonState state = mSpecialButtons.get(SpecialButton.valueOf(buttonInfo.getKey()));\n@@ -509,7 +509,7 @@ private void onAnyExtraKeyButtonClick(View view, @NonNull ExtraKeyButton buttonI\n     }\n \n \n-    private void startScheduledExecutors(View view, ExtraKeyButton buttonInfo, Button button) {\n+    public void startScheduledExecutors(View view, ExtraKeyButton buttonInfo, MaterialButton button) {\n         stopScheduledExecutors();\n         mLongPressCount = 0;\n         if (mRepetitiveKeys.contains(buttonInfo.getKey())) {\n@@ -534,7 +534,7 @@ private void startScheduledExecutors(View view, ExtraKeyButton buttonInfo, Butto\n         }\n     }\n \n-    private void stopScheduledExecutors() {\n+    public void stopScheduledExecutors() {\n         if (mScheduledExecutor != null) {\n             mScheduledExecutor.shutdownNow();\n             mScheduledExecutor = null;\n@@ -546,8 +546,8 @@ private void stopScheduledExecutors() {\n         }\n     }\n \n-    private class SpecialButtonsLongHoldRunnable implements Runnable {\n-        private final SpecialButtonState mState;\n+    public class SpecialButtonsLongHoldRunnable implements Runnable {\n+        public final SpecialButtonState mState;\n \n         public SpecialButtonsLongHoldRunnable(SpecialButtonState state) {\n             mState = state;\n@@ -593,7 +593,7 @@ void showPopup(View view, ExtraKeyButton extraButton) {\n         mPopupWindow.showAsDropDown(view, 0, -2 * height);\n     }\n \n-    private void dismissPopup() {\n+    public void dismissPopup() {\n         mPopupWindow.setContentView(null);\n         mPopupWindow.dismiss();\n         mPopupWindow = null;\n@@ -631,7 +631,7 @@ public Boolean readSpecialButton(SpecialButton specialButton, boolean autoSetInA\n         return true;\n     }\n \n-    private Button createSpecialButton(String buttonKey, boolean needUpdate) {\n+    public Button createSpecialButton(String buttonKey, boolean needUpdate) {\n         SpecialButtonState state = mSpecialButtons.get(SpecialButton.valueOf(buttonKey));\n         if (state == null) return null;\n         state.setIsCreated(true);\n@@ -648,7 +648,7 @@ private Button createSpecialButton(String buttonKey, boolean needUpdate) {\n     /**\n      * General util function to compute the longest column length in a matrix.\n      */\n-    static int maximumLength(Object[][] matrix) {\n+    public static int maximumLength(Object[][] matrix) {\n         int m = 0;\n         for (Object[] row : matrix)\n             m = Math.max(m, row.length);",
    "output": "Changed: Make ExtraKeysView private functions public and variables protected"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/logger/Logger.java b/termux-shared/src/main/java/com/termux/shared/logger/Logger.java\n--- a/termux-shared/src/main/java/com/termux/shared/logger/Logger.java\n+++ b/termux-shared/src/main/java/com/termux/shared/logger/Logger.java\n@@ -470,7 +470,9 @@ public static boolean isLogLevelValid(Integer logLevel) {\n     /** Check if custom log level is valid and >= {@link #CURRENT_LOG_LEVEL}. If custom log level is\n      * not valid then {@link #LOG_LEVEL_VERBOSE} must be >= {@link #CURRENT_LOG_LEVEL}. */\n     public static boolean shouldEnableLoggingForCustomLogLevel(Integer customLogLevel) {\n-        if (customLogLevel == null || CURRENT_LOG_LEVEL <= LOG_LEVEL_OFF || customLogLevel <= LOG_LEVEL_OFF) return false;\n+        if (CURRENT_LOG_LEVEL <= LOG_LEVEL_OFF) return false;\n+        if (customLogLevel == null) return CURRENT_LOG_LEVEL >= LOG_LEVEL_VERBOSE; // Use default app log level\n+        if (customLogLevel <= LOG_LEVEL_OFF) return false;\n         customLogLevel = Logger.isLogLevelValid(customLogLevel) ? customLogLevel: Logger.LOG_LEVEL_VERBOSE;\n         return (customLogLevel >= CURRENT_LOG_LEVEL);\n     }",
    "output": "Fixed: Fix termux background command logging at verbose level if CUSTOM_LOG_LEVEL was not passed"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/terminal/TermuxTerminalSessionClient.java b/app/src/main/java/com/termux/app/terminal/TermuxTerminalSessionClient.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxTerminalSessionClient.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxTerminalSessionClient.java\n@@ -79,7 +79,7 @@ public void onResume() {\n         // Just initialize the mBellSoundPool and load the sound, otherwise bell might not run\n         // the first time bell key is pressed and play() is called, since sound may not be loaded\n         // quickly enough before the call to play(). https://stackoverflow.com/questions/35435625\n-        getBellSoundPool();\n+        loadBellSoundPool();\n     }\n \n     /**\n@@ -202,7 +202,9 @@ public void onBell(TerminalSession session) {\n                 BellHandler.getInstance(mActivity).doBell();\n                 break;\n             case TermuxPropertyConstants.IVALUE_BELL_BEHAVIOUR_BEEP:\n-                getBellSoundPool().play(mBellSoundId, 1.f, 1.f, 1, 0, 1.f);\n+                loadBellSoundPool();\n+                if (mBellSoundPool != null)\n+                    mBellSoundPool.play(mBellSoundId, 1.f, 1.f, 1, 0, 1.f);\n                 break;\n             case TermuxPropertyConstants.IVALUE_BELL_BEHAVIOUR_IGNORE:\n                 // Ignore the bell character.\n@@ -247,17 +249,20 @@ public Integer getTerminalCursorStyle() {\n \n \n \n-    /** Initialize and get mBellSoundPool */\n-    private synchronized SoundPool getBellSoundPool() {\n+    /** Load mBellSoundPool */\n+    private synchronized void loadBellSoundPool() {\n         if (mBellSoundPool == null) {\n             mBellSoundPool = new SoundPool.Builder().setMaxStreams(1).setAudioAttributes(\n                 new AudioAttributes.Builder().setContentType(AudioAttributes.CONTENT_TYPE_SONIFICATION)\n                     .setUsage(AudioAttributes.USAGE_ASSISTANCE_SONIFICATION).build()).build();\n \n-            mBellSoundId = mBellSoundPool.load(mActivity, R.raw.bell, 1);\n+            try {\n+                mBellSoundId = mBellSoundPool.load(mActivity, R.raw.bell, 1);\n+            } catch (Exception e){\n+                // Catch java.lang.RuntimeException: Unable to resume activity {com.termux/com.termux.app.TermuxActivity}: android.content.res.Resources$NotFoundException: File res/raw/bell.ogg from drawable resource ID\n+                Logger.logStackTraceWithMessage(LOG_TAG, \"Failed to load bell sound pool\", e);\n+            }\n         }\n-\n-        return mBellSoundPool;\n     }\n \n     /** Release mBellSoundPool resources */",
    "output": "Fixed: Catch rare RuntimeException while loading bell\n\njava.lang.RuntimeException: Unable to resume activity {com.termux/com.termux.app.TermuxActivity}: android.content.res.Resources$NotFoundException: File res/raw/bell.ogg from drawable resource ID #0x7f0f0001\n        at android.app.ActivityThread.performResumeActivity(ActivityThread.java:3480)\n        at android.app.ActivityThread.handleResumeActivity(ActivityThread.java:3520)\n        at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1554)\n        at android.os.Handler.dispatchMessage(Handler.java:102)\n        at android.os.Looper.loop(Looper.java:154)\n        at android.app.ActivityThread.main(ActivityThread.java:6247)\n        at java.lang.reflect.Method.invoke(Native Method)\n        at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:872)\n        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:762)\n        at de.robv.android.xposed.XposedBridge.main(XposedBridge.java:107)\n     Caused by: android.content.res.Resources$NotFoundException: File res/raw/bell.ogg from drawable resource ID #0x7f0f0001\n        at android.content.res.ResourcesImpl.openRawResourceFd(ResourcesImpl.java:308)\n        at android.content.res.Resources.openRawResourceFd(Resources.java:1272)\n        at android.media.SoundPool.load(SoundPool.java:247)\n        at com.termux.app.terminal.TermuxTerminalSessionClient.getBellSoundPool(TermuxTerminalSessionClient.java:257)\n        at com.termux.app.terminal.TermuxTerminalSessionClient.onResume(TermuxTerminalSessionClient.java:82)\n        at com.termux.app.TermuxActivity.onResume(TermuxActivity.java:290)\n        at android.app.Instrumentation.callActivityOnResume(Instrumentation.java:1270)\n        at android.app.Activity.performResume(Activity.java:6861)\n        at android.app.ActivityThread.performResumeActivity(ActivityThread.java:3457)\n        at android.app.ActivityThread.handleResumeActivity(ActivityThread.java:3520)\n        at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1554)\n        at android.os.Handler.dispatchMessage(Handler.java:102)\n        at android.os.Looper.loop(Looper.java:154)\n        at android.app.ActivityThread.main(ActivityThread.java:6247)\n        at java.lang.reflect.Method.invoke(Native Method)\n        at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:872)\n        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:762)\n        at de.robv.android.xposed.XposedBridge.main(XposedBridge.java:107)\n     Caused by: java.io.FileNotFoundException: This file can not be opened as a file descriptor; it is probably compressed\n        at android.content.res.AssetManager.openNonAssetFdNative(Native Method)\n        at android.content.res.AssetManager.openNonAssetFd(AssetManager.java:467)\n        at android.content.res.ResourcesImpl.openRawResourceFd(ResourcesImpl.java:306)\n        at android.content.res.Resources.openRawResourceFd(Resources.java:1272)\n        at android.media.SoundPool.load(SoundPool.java:247)\n        at com.termux.app.terminal.TermuxTerminalSessionClient.getBellSoundPool(TermuxTerminalSessionClient.java:257)\n        at com.termux.app.terminal.TermuxTerminalSessionClient.onResume(TermuxTerminalSessionClient.java:82)\n        at com.termux.app.TermuxActivity.onResume(TermuxActivity.java:290)\n        at android.app.Instrumentation.callActivityOnResume(Instrumentation.java:1270)\n        at android.app.Activity.performResume(Activity.java:6861)\n        at android.app.ActivityThread.performResumeActivity(ActivityThread.java:3457)\n        at android.app.ActivityThread.handleResumeActivity(ActivityThread.java:3520)\n        at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1554)\n        at android.os.Handler.dispatchMessage(Handler.java:102)\n        at android.os.Looper.loop(Looper.java:154)\n        at android.app.ActivityThread.main(ActivityThread.java:6247)\n        at java.lang.reflect.Method.invoke(Native Method)\n        at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:872)\n        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:762)\n        at de.robv.android.xposed.XposedBridge.main(XposedBridge.java:107)"
  },
  {
    "input": "diff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalBuffer.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalBuffer.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalBuffer.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalBuffer.java\n@@ -449,8 +449,8 @@ public TerminalRow allocateFullLineIfNecessary(int row) {\n     }\n \n     public void setChar(int column, int row, int codePoint, long style) {\n-        if (row >= mScreenRows || column >= mColumns)\n-            throw new IllegalArgumentException(\"row=\" + row + \", column=\" + column + \", mScreenRows=\" + mScreenRows + \", mColumns=\" + mColumns);\n+        if (row  < 0 || row >= mScreenRows || column < 0 || column >= mColumns)\n+            throw new IllegalArgumentException(\"TerminalBuffer.setChar(): row=\" + row + \", column=\" + column + \", mScreenRows=\" + mScreenRows + \", mColumns=\" + mColumns);\n         row = externalToInternalRow(row);\n         allocateFullLineIfNecessary(row).setChar(column, codePoint, style);\n     }\n\ndiff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n@@ -2332,7 +2332,14 @@ private void emitCodePoint(int codePoint) {\n         }\n \n         int offsetDueToCombiningChar = ((displayWidth <= 0 && mCursorCol > 0 && !mAboutToAutoWrap) ? 1 : 0);\n-        mScreen.setChar(mCursorCol - offsetDueToCombiningChar, mCursorRow, codePoint, getStyle());\n+        int column = mCursorCol - offsetDueToCombiningChar;\n+\n+        // Fix TerminalRow.setChar() ArrayIndexOutOfBoundsException index=-1 exception reported\n+        // The offsetDueToCombiningChar would never be 1 if mCursorCol was 0 to get column/index=-1,\n+        // so was mCursorCol changed after the offsetDueToCombiningChar conditional by another thread?\n+        // TODO: Check if there are thread synchronization issues with mCursorCol and mCursorRow, possibly causing others bugs too.\n+        if (column < 0) column = 0;\n+        mScreen.setChar(column, mCursorRow, codePoint, getStyle());\n \n         if (autoWrap && displayWidth > 0)\n             mAboutToAutoWrap = (mCursorCol == mRightMargin - displayWidth);\n\ndiff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalRow.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalRow.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalRow.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalRow.java\n@@ -124,6 +124,9 @@ public void clear(long style) {\n \n     // https://github.com/steven676/Android-Terminal-Emulator/commit/9a47042620bec87617f0b4f5d50568535668fe26\n     public void setChar(int columnToSet, int codePoint, long style) {\n+        if (columnToSet  < 0 || columnToSet >= mStyle.length)\n+            throw new IllegalArgumentException(\"TerminalRow.setChar(): columnToSet=\" + columnToSet + \", codePoint=\" + codePoint + \", style=\" + style);\n+\n         mStyle[columnToSet] = style;\n \n         final int newCodePointDisplayWidth = WcWidth.width(codePoint);",
    "output": "Fixed: Fix ArrayIndexOutOfBoundsException when setting zero width terminal character\n\njava.lang.ArrayIndexOutOfBoundsException: length=64; index=-1\nat com.termux.terminal.TerminalRow.setChar(TerminalRow.java:127)\nat com.termux.terminal.TerminalBuffer.setChar(TerminalBuffer.java:413)\nat com.termux.terminal.TerminalEmulator.emitCodePoint(TerminalEmulator.java:2329)\nat com.termux.terminal.TerminalEmulator.processCodePoint(TerminalEmulator.java:617)\nat com.termux.terminal.TerminalEmulator.processByte(TerminalEmulator.java:513)\nat com.termux.terminal.TerminalEmulator.append(TerminalEmulator.java:480)\nat com.termux.terminal.TerminalSession$MainThreadHandler.handleMessage(TerminalSession.java:339)\nat android.os.Handler.dispatchMessage(Handler.java:110)\nat android.os.Looper.loop(Looper.java:219)\nat android.app.ActivityThread.main(ActivityThread.java:8349)\nat java.lang.reflect.Method.invoke(Native Method)\nat com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:513)\nat com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1055)"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -50,6 +50,8 @@\n import com.termux.shared.termux.interact.TextInputDialogUtils;\n import com.termux.shared.logger.Logger;\n import com.termux.shared.termux.TermuxUtils;\n+import com.termux.shared.termux.theme.TermuxThemeUtils;\n+import com.termux.shared.theme.NightMode;\n import com.termux.shared.theme.ThemeUtils;\n import com.termux.shared.view.ViewUtils;\n import com.termux.terminal.TerminalSession;\n@@ -408,15 +410,18 @@ public void onServiceDisconnected(ComponentName name) {\n \n \n     private void setActivityTheme() {\n-        if (ThemeUtils.shouldEnableDarkTheme(this, mProperties.getNightMode())) {\n+        // Update NightMode.APP_NIGHT_MODE\n+        TermuxThemeUtils.setAppNightMode(mProperties.getNightMode());\n+\n+        if (ThemeUtils.shouldEnableDarkTheme(this, NightMode.getAppNightMode().getName())) {\n             this.setTheme(R.style.Theme_Termux_Black);\n         } else {\n             this.setTheme(R.style.Theme_Termux);\n         }\n     }\n \n     private void setDrawerTheme() {\n-        if (ThemeUtils.shouldEnableDarkTheme(this, mProperties.getNightMode())) {\n+        if (ThemeUtils.shouldEnableDarkTheme(this, NightMode.getAppNightMode().getName())) {\n             findViewById(R.id.left_drawer).setBackgroundColor(ContextCompat.getColor(this,\n                 android.R.color.background_dark));\n             ((ImageButton) findViewById(R.id.settings_button)).setColorFilter(Color.WHITE);\n@@ -904,13 +909,16 @@ public void onReceive(Context context, Intent intent) {\n     }\n \n     private void reloadActivityStyling() {\n-        if (mProperties!= null) {\n+        if (mProperties != null) {\n             mProperties.loadTermuxPropertiesFromDisk();\n \n             if (mExtraKeysView != null) {\n                 mExtraKeysView.setButtonTextAllCaps(mProperties.shouldExtraKeysTextBeAllCaps());\n                 mExtraKeysView.reload(mProperties.getExtraKeysInfo());\n             }\n+\n+            // Update NightMode.APP_NIGHT_MODE\n+            TermuxThemeUtils.setAppNightMode(mProperties.getNightMode());\n         }\n \n         setMargins();\n\ndiff --git a/app/src/main/java/com/termux/app/TermuxApplication.java b/app/src/main/java/com/termux/app/TermuxApplication.java\n--- a/app/src/main/java/com/termux/app/TermuxApplication.java\n+++ b/app/src/main/java/com/termux/app/TermuxApplication.java\n@@ -7,19 +7,25 @@\n import com.termux.shared.termux.crash.TermuxCrashUtils;\n import com.termux.shared.termux.settings.preferences.TermuxAppSharedPreferences;\n import com.termux.shared.logger.Logger;\n+import com.termux.shared.termux.theme.TermuxThemeUtils;\n \n \n public class TermuxApplication extends Application {\n     public void onCreate() {\n         super.onCreate();\n \n+        Context context = getApplicationContext();\n+\n         // Set crash handler for the app\n         TermuxCrashUtils.setCrashHandler(this);\n \n         // Set log config for the app\n-        setLogConfig(getApplicationContext());\n+        setLogConfig(context);\n \n         Logger.logDebug(\"Starting Application\");\n+\n+        // Set NightMode.APP_NIGHT_MODE\n+        TermuxThemeUtils.setAppNightMode(context);\n     }\n \n     public static void setLogConfig(Context context) {\n\ndiff --git a/app/src/main/java/com/termux/app/terminal/TermuxSessionsListViewController.java b/app/src/main/java/com/termux/app/terminal/TermuxSessionsListViewController.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxSessionsListViewController.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxSessionsListViewController.java\n@@ -21,6 +21,7 @@\n import com.termux.R;\n import com.termux.app.TermuxActivity;\n import com.termux.shared.termux.shell.command.runner.terminal.TermuxSession;\n+import com.termux.shared.theme.NightMode;\n import com.termux.shared.theme.ThemeUtils;\n import com.termux.terminal.TerminalSession;\n \n@@ -56,7 +57,7 @@ public View getView(int position, View convertView, @NonNull ViewGroup parent) {\n             return sessionRowView;\n         }\n \n-        boolean shouldEnableDarkTheme = ThemeUtils.shouldEnableDarkTheme(mActivity, mActivity.getProperties().getNightMode());\n+        boolean shouldEnableDarkTheme = ThemeUtils.shouldEnableDarkTheme(mActivity, NightMode.getAppNightMode().getName());\n \n         if (shouldEnableDarkTheme) {\n             sessionTitleView.setBackground(\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/theme/TermuxThemeUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/theme/TermuxThemeUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/theme/TermuxThemeUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/theme/TermuxThemeUtils.java\n@@ -0,0 +1,25 @@\n+package com.termux.shared.termux.theme;\n+\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.termux.shared.termux.settings.properties.TermuxPropertyConstants;\n+import com.termux.shared.termux.settings.properties.TermuxSharedProperties;\n+import com.termux.shared.theme.NightMode;\n+\n+public class TermuxThemeUtils {\n+\n+    /** Get the {@link TermuxPropertyConstants#KEY_NIGHT_MODE} value from the properties file on disk\n+     * and set it to app wide night mode value. */\n+    public static void setAppNightMode(@NonNull Context context) {\n+        NightMode.setAppNightMode(TermuxSharedProperties.getNightMode(context));\n+    }\n+\n+    /** Set name as app wide night mode value. */\n+    public static void setAppNightMode(@Nullable String name) {\n+        NightMode.setAppNightMode(name);\n+    }\n+\n+}\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/theme/NightMode.java b/termux-shared/src/main/java/com/termux/shared/theme/NightMode.java\n--- a/termux-shared/src/main/java/com/termux/shared/theme/NightMode.java\n+++ b/termux-shared/src/main/java/com/termux/shared/theme/NightMode.java\n@@ -1,7 +1,11 @@\n package com.termux.shared.theme;\n \n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n import androidx.appcompat.app.AppCompatDelegate;\n \n+import com.termux.shared.logger.Logger;\n+\n /** The modes used by to decide night mode for themes. */\n public enum NightMode {\n \n@@ -17,6 +21,11 @@ public enum NightMode {\n      */\n     SYSTEM(\"system\", AppCompatDelegate.MODE_NIGHT_FOLLOW_SYSTEM);\n \n+    /** The current app wide night mode used by various libraries. Defaults to {@link #SYSTEM}. */\n+    private static NightMode APP_NIGHT_MODE;\n+\n+    private static final String LOG_TAG = \"NightMode\";\n+\n     private final String name;\n     private final int mode;\n \n@@ -33,16 +42,50 @@ public int getMode() {\n         return mode;\n     }\n \n-    public static Integer modeOf(String name) {\n-        if (TRUE.name.equals(name))\n-            return TRUE.mode;\n-        else if (FALSE.name.equals(name))\n-            return FALSE.mode;\n-        else if (SYSTEM.name.equals(name)) {\n-            return SYSTEM.mode;\n+\n+    /** Get {@link NightMode} for {@code name} if found, otherwise {@code null}. */\n+    @Nullable\n+    public static NightMode modeOf(String name) {\n+        for (NightMode v : NightMode.values()) {\n+            if (v.name.equals(name)) {\n+                return v;\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    /** Get {@link NightMode} for {@code name} if found, otherwise {@code def}. */\n+    @NonNull\n+    public static NightMode modeOf(@Nullable String name, @NonNull NightMode def) {\n+        NightMode nightMode = modeOf(name);\n+        return nightMode != null ? nightMode : def;\n+    }\n+\n+\n+    /** Set {@link #APP_NIGHT_MODE}. */\n+    public static void setAppNightMode(@Nullable String name) {\n+        if (name == null || name.isEmpty()) {\n+            APP_NIGHT_MODE = SYSTEM;\n         } else {\n-            return null;\n+            NightMode nightMode = NightMode.modeOf(name);\n+            if (nightMode == null) {\n+                Logger.logError(LOG_TAG, \"Invalid APP_NIGHT_MODE \\\"\" + name + \"\\\"\");\n+                return;\n+            }\n+            APP_NIGHT_MODE = nightMode;\n         }\n+\n+        Logger.logVerbose(LOG_TAG, \"Set APP_NIGHT_MODE to \\\"\" + APP_NIGHT_MODE.getName() + \"\\\"\");\n+    }\n+\n+    /** Get {@link #APP_NIGHT_MODE}. */\n+    @NonNull\n+    public static NightMode getAppNightMode() {\n+        if (APP_NIGHT_MODE == null)\n+            APP_NIGHT_MODE =  SYSTEM;\n+\n+        return APP_NIGHT_MODE;\n     }\n \n }",
    "output": "Changed: Store app wide night mode in NightMode.APP_NIGHT_MODE so that libraries can use it directly without having to load or get it from termux properties"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -302,18 +302,8 @@ private void actionAcquireWakeLock() {\n         mWifiLock = wm.createWifiLock(WifiManager.WIFI_MODE_FULL_HIGH_PERF, TermuxConstants.TERMUX_APP_NAME.toLowerCase());\n         mWifiLock.acquire();\n \n-        String packageName = getPackageName();\n-        if (!pm.isIgnoringBatteryOptimizations(packageName)) {\n-            Intent whitelist = new Intent();\n-            whitelist.setAction(Settings.ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS);\n-            whitelist.setData(Uri.parse(\"package:\" + packageName));\n-            whitelist.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n-\n-            try {\n-                startActivity(whitelist);\n-            } catch (ActivityNotFoundException e) {\n-                Logger.logStackTraceWithMessage(LOG_TAG, \"Failed to call ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS\", e);\n-            }\n+        if (!PermissionUtils.checkIfBatteryOptimizationsDisabled(this)) {\n+            PermissionUtils.requestDisableBatteryOptimizations(this);\n         }\n \n         updateNotification();",
    "output": "Changed: Use PermissionUtils to request disabling battery optimizations in TermuxService"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/android/PermissionUtils.java b/termux-shared/src/main/java/com/termux/shared/android/PermissionUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/android/PermissionUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/android/PermissionUtils.java\n@@ -3,6 +3,7 @@\n import android.Manifest;\n import android.annotation.SuppressLint;\n import android.app.Activity;\n+import android.app.Service;\n import android.content.Context;\n import android.content.Intent;\n import android.content.pm.PackageInfo;\n@@ -324,13 +325,20 @@ public static boolean requestLegacyStorageExternalPermission(@NonNull Context co\n         return requestPermission(context, Manifest.permission.WRITE_EXTERNAL_STORAGE, requestCode);\n     }\n \n+    /** Wrapper for {@link #requestManageStorageExternalPermission(Context, int)}. */\n+    public static Error requestManageStorageExternalPermission(@NonNull Context context) {\n+        return requestManageStorageExternalPermission(context, -1);\n+    }\n+\n     /**\n      * Request user to grant {@link Manifest.permission#MANAGE_EXTERNAL_STORAGE} permission to the app.\n      *\n-     * @param context The context for operations. It must be an instance of {@link Activity} or\n-     * {@link AppCompatActivity}.\n-     * @param requestCode The request code to use while asking for permission. It must be `>=0` or\n-     *                    will fail silently and will log an exception.\n+     * @param context The context for operations, like an {@link Activity} or {@link Service} context.\n+     *                It must be an instance of {@link Activity} or {@link AppCompatActivity} if\n+     *                result is required via the Activity#onActivityResult() callback and\n+     *                {@code requestCode} is `>=0`.\n+     * @param requestCode The request code to use while asking for permission. It must be `>=0` if\n+     *                    result it required.\n      * @return Returns the {@code error} if requesting the permission was not successful, otherwise {@code null}.\n      */\n     public static Error requestManageStorageExternalPermission(@NonNull Context context, int requestCode) {\n@@ -339,13 +347,22 @@ public static Error requestManageStorageExternalPermission(@NonNull Context cont\n         Intent intent = new Intent(Settings.ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION);\n         intent.addCategory(\"android.intent.category.DEFAULT\");\n         intent.setData(Uri.parse(\"package:\" + context.getPackageName()));\n-        Error error = ActivityUtils.startActivityForResult(context, requestCode, intent, true, false);\n+        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n+\n+        Error error;\n+        if (requestCode >=0)\n+            error = ActivityUtils.startActivityForResult(context, requestCode, intent, true, false);\n+        else\n+            error = ActivityUtils.startActivity(context, intent, true, false);\n \n         // Use fallback if matching Activity did not exist for ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION.\n         if (error != null) {\n             intent = new Intent();\n             intent.setAction(Settings.ACTION_MANAGE_ALL_FILES_ACCESS_PERMISSION);\n-            return ActivityUtils.startActivityForResult(context, requestCode, intent);\n+            if (requestCode >=0)\n+                return ActivityUtils.startActivityForResult(context, requestCode, intent);\n+            else\n+                return ActivityUtils.startActivity(context, intent);\n         }\n \n         return null;\n@@ -421,19 +438,33 @@ public static boolean checkDisplayOverOtherAppsPermission(@NonNull Context conte\n         return Settings.canDrawOverlays(context);\n     }\n \n+    /** Wrapper for {@link #requestDisplayOverOtherAppsPermission(Context, int)}. */\n+    public static Error requestDisplayOverOtherAppsPermission(@NonNull Context context) {\n+        return requestDisplayOverOtherAppsPermission(context, -1);\n+    }\n+\n     /**\n      * Request user to grant {@link Manifest.permission#SYSTEM_ALERT_WINDOW} permission to the app.\n      *\n-     * @param context The context for operations. It must be an instance of {@link Activity} or\n-     * {@link AppCompatActivity}.\n-     * @param requestCode The request code to use while asking for permission. It must be `>=0` or\n-     *                    will fail silently and will log an exception.\n+     * @param context The context for operations, like an {@link Activity} or {@link Service} context.\n+     *                It must be an instance of {@link Activity} or {@link AppCompatActivity} if\n+     *                result is required via the Activity#onActivityResult() callback and\n+     *                {@code requestCode} is `>=0`.\n+     * @param requestCode The request code to use while asking for permission. It must be `>=0` if\n+     *                    result it required.\n      * @return Returns the {@code error} if requesting the permission was not successful, otherwise {@code null}.\n      */\n     public static Error requestDisplayOverOtherAppsPermission(@NonNull Context context, int requestCode) {\n+        Logger.logInfo(LOG_TAG, \"Requesting display over apps permission\");\n+\n         Intent intent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION);\n         intent.setData(Uri.parse(\"package:\" + context.getPackageName()));\n-        return ActivityUtils.startActivityForResult(context, requestCode, intent);\n+        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n+\n+        if (requestCode >=0)\n+            return ActivityUtils.startActivityForResult(context, requestCode, intent);\n+        else\n+            return ActivityUtils.startActivity(context, intent);\n     }\n \n     /**\n@@ -475,21 +506,35 @@ public static boolean checkIfBatteryOptimizationsDisabled(@NonNull Context conte\n         return powerManager.isIgnoringBatteryOptimizations(context.getPackageName());\n     }\n \n+    /** Wrapper for {@link #requestDisableBatteryOptimizations(Context, int)}. */\n+    public static Error requestDisableBatteryOptimizations(@NonNull Context context) {\n+        return requestDisableBatteryOptimizations(context, -1);\n+    }\n+\n     /**\n      * Request user to grant {@link Manifest.permission#REQUEST_IGNORE_BATTERY_OPTIMIZATIONS}\n      * permission to the app.\n      *\n-     * @param context The context for operations. It must be an instance of {@link Activity} or\n-     * {@link AppCompatActivity}.\n-     * @param requestCode The request code to use while asking for permission. It must be `>=0` or\n-     *                    will fail silently and will log an exception.\n+     * @param context The context for operations, like an {@link Activity} or {@link Service} context.\n+     *                It must be an instance of {@link Activity} or {@link AppCompatActivity} if\n+     *                result is required via the Activity#onActivityResult() callback and\n+     *                {@code requestCode} is `>=0`.\n+     * @param requestCode The request code to use while asking for permission. It must be `>=0` if\n+     *                    result it required.\n      * @return Returns the {@code error} if requesting the permission was not successful, otherwise {@code null}.\n      */\n     @SuppressLint(\"BatteryLife\")\n     public static Error requestDisableBatteryOptimizations(@NonNull Context context, int requestCode) {\n+        Logger.logInfo(LOG_TAG, \"Requesting to disable battery optimizations\");\n+\n         Intent intent = new Intent(Settings.ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS);\n         intent.setData(Uri.parse(\"package:\" + context.getPackageName()));\n-        return ActivityUtils.startActivityForResult(context, requestCode, intent);\n+        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n+\n+        if (requestCode >=0)\n+            return ActivityUtils.startActivityForResult(context, requestCode, intent);\n+        else\n+            return ActivityUtils.startActivity(context, intent);\n     }\n \n }",
    "output": "Added: Add support to request Settings.ACTION* permissions to be requested via Service context"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxApplication.java b/app/src/main/java/com/termux/app/TermuxApplication.java\n--- a/app/src/main/java/com/termux/app/TermuxApplication.java\n+++ b/app/src/main/java/com/termux/app/TermuxApplication.java\n@@ -1,7 +1,9 @@\n package com.termux.app;\n \n import android.app.Application;\n+import android.content.Context;\n \n+import com.termux.shared.termux.TermuxConstants;\n import com.termux.shared.termux.crash.TermuxCrashUtils;\n import com.termux.shared.termux.settings.preferences.TermuxAppSharedPreferences;\n import com.termux.shared.logger.Logger;\n@@ -14,16 +16,19 @@ public void onCreate() {\n         // Set crash handler for the app\n         TermuxCrashUtils.setCrashHandler(this);\n \n-        // Set log level for the app\n-        setLogLevel();\n+        // Set log config for the app\n+        setLogConfig(getApplicationContext());\n+\n+        Logger.logDebug(\"Starting Application\");\n     }\n \n-    private void setLogLevel() {\n+    public static void setLogConfig(Context context) {\n+        Logger.setDefaultLogTag(TermuxConstants.TERMUX_APP_NAME);\n+\n         // Load the log level from shared preferences and set it to the {@link Logger.CURRENT_LOG_LEVEL}\n-        TermuxAppSharedPreferences preferences = TermuxAppSharedPreferences.build(getApplicationContext());\n+        TermuxAppSharedPreferences preferences = TermuxAppSharedPreferences.build(context);\n         if (preferences == null) return;\n         preferences.setLogLevel(null, preferences.getLogLevel());\n-        Logger.logDebug(\"Starting Application\");\n     }\n }\n \n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/logger/Logger.java b/termux-shared/src/main/java/com/termux/shared/logger/Logger.java\n--- a/termux-shared/src/main/java/com/termux/shared/logger/Logger.java\n+++ b/termux-shared/src/main/java/com/termux/shared/logger/Logger.java\n@@ -6,9 +6,10 @@\n import android.util.Log;\n import android.widget.Toast;\n \n+import androidx.annotation.NonNull;\n+\n import com.termux.shared.R;\n import com.termux.shared.data.DataUtils;\n-import com.termux.shared.termux.TermuxConstants;\n \n import java.io.IOException;\n import java.io.PrintWriter;\n@@ -19,7 +20,7 @@\n \n public class Logger {\n \n-    public static final String DEFAULT_LOG_TAG = TermuxConstants.TERMUX_APP_NAME;\n+    private static String DEFAULT_LOG_TAG = \"Logger\";\n \n     public static final int LOG_LEVEL_OFF = 0; // log nothing\n     public static final int LOG_LEVEL_NORMAL = 1; // start logging error, warn and info messages and stacktraces\n@@ -419,6 +420,20 @@ public static String getLogLevelLabel(final Context context, final int logLevel,\n \n \n \n+    @NonNull\n+    public static String getDefaultLogTag() {\n+        return DEFAULT_LOG_TAG;\n+    }\n+\n+    /**\n+     * IllegalArgumentException will be thrown if tag.length() > 23 for Nougat (7.0) and prior releases.\n+     * https://developer.android.com/reference/android/util/Log#isLoggable(java.lang.String,%20int) */\n+    public static void setDefaultLogTag(@NonNull String defaultLogTag) {\n+        DEFAULT_LOG_TAG = defaultLogTag.length() >= 23 ? defaultLogTag.substring(0, 22) : defaultLogTag;\n+    }\n+\n+\n+\n     public static int getLogLevel() {\n         return CURRENT_LOG_LEVEL;\n     }\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/shell/StreamGobbler.java b/termux-shared/src/main/java/com/termux/shared/shell/StreamGobbler.java\n--- a/termux-shared/src/main/java/com/termux/shared/shell/StreamGobbler.java\n+++ b/termux-shared/src/main/java/com/termux/shared/shell/StreamGobbler.java\n@@ -190,7 +190,7 @@ public StreamGobbler(@NonNull String shell, @NonNull InputStream inputStream,\n \n     @Override\n     public void run() {\n-        String defaultLogTag = Logger.DEFAULT_LOG_TAG;\n+        String defaultLogTag = Logger.getDefaultLogTag();\n         boolean loggingEnabled = Logger.shouldEnableLoggingForCustomLogLevel(mLogLevel);\n         if (loggingEnabled)\n             Logger.logVerbose(LOG_TAG, \"Using custom log level: \" + mLogLevel + \", current log level: \" + Logger.getLogLevel());",
    "output": "Changed!: Remove TermuxConstants reference from Logger and set DEFAULT_LOG_TAG at application startup\n\nPlugin apps must do the same"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxOpenReceiver.java b/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n--- a/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n+++ b/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n@@ -2,7 +2,6 @@\n \n import android.content.ActivityNotFoundException;\n import android.content.BroadcastReceiver;\n-import android.content.ContentResolver;\n import android.content.ContentValues;\n import android.content.Context;\n import android.content.Intent;\n@@ -16,8 +15,9 @@\n \n import com.termux.app.utils.PluginUtils;\n import com.termux.shared.data.IntentUtils;\n-import com.termux.shared.data.UriUtils;\n+import com.termux.shared.net.UriUtils;\n import com.termux.shared.logger.Logger;\n+import com.termux.shared.models.net.UriScheme;\n import com.termux.shared.termux.TermuxConstants;\n \n import java.io.File;\n@@ -55,7 +55,7 @@ public void onReceive(Context context, Intent intent) {\n         }\n \n         String scheme = data.getScheme();\n-        if (scheme != null && !ContentResolver.SCHEME_FILE.equals(scheme)) {\n+        if (scheme != null && !UriScheme.SCHEME_FILE.equals(scheme)) {\n             Intent urlIntent = new Intent(intentAction, data);\n             if (intentAction.equals(Intent.ACTION_SEND)) {\n                 urlIntent.putExtra(Intent.EXTRA_TEXT, data.toString());\n\ndiff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -26,7 +26,7 @@\n import com.termux.app.terminal.TermuxTerminalSessionClient;\n import com.termux.app.utils.PluginUtils;\n import com.termux.shared.data.IntentUtils;\n-import com.termux.shared.data.UriUtils;\n+import com.termux.shared.net.UriUtils;\n import com.termux.shared.models.errors.Errno;\n import com.termux.shared.shell.ShellUtils;\n import com.termux.shared.termux.shell.TermuxShellEnvironmentClient;\n\ndiff --git a/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java b/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java\n--- a/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java\n+++ b/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java\n@@ -1,7 +1,6 @@\n package com.termux.filepicker;\n \n import android.app.Activity;\n-import android.content.ContentResolver;\n import android.content.Intent;\n import android.database.Cursor;\n import android.net.Uri;\n@@ -13,8 +12,9 @@\n import com.termux.R;\n import com.termux.shared.data.DataUtils;\n import com.termux.shared.data.IntentUtils;\n-import com.termux.shared.data.UriUtils;\n+import com.termux.shared.net.UriUtils;\n import com.termux.shared.interact.MessageDialogUtils;\n+import com.termux.shared.models.net.UriScheme;\n import com.termux.shared.termux.interact.TextInputDialogUtils;\n import com.termux.shared.termux.TermuxConstants;\n import com.termux.shared.termux.TermuxConstants.TERMUX_APP.TERMUX_SERVICE;\n@@ -93,9 +93,9 @@ protected void onResume() {\n                 return;\n             }\n \n-            if (ContentResolver.SCHEME_CONTENT.equals(scheme)) {\n+            if (UriScheme.SCHEME_CONTENT.equals(scheme)) {\n                 handleContentUri(dataUri, sharedTitle);\n-            } else if (ContentResolver.SCHEME_FILE.equals(scheme)) {\n+            } else if (UriScheme.SCHEME_FILE.equals(scheme)) {\n                 Logger.logVerbose(LOG_TAG, \"uri: \\\"\" + dataUri + \"\\\", path: \\\"\" + dataUri.getPath() + \"\\\", fragment: \\\"\" + dataUri.getFragment() + \"\\\"\");\n \n                 // Get full path including fragment (anything after last \"#\")\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/models/net/UriScheme.java b/termux-shared/src/main/java/com/termux/shared/models/net/UriScheme.java\n--- a/termux-shared/src/main/java/com/termux/shared/models/net/UriScheme.java\n+++ b/termux-shared/src/main/java/com/termux/shared/models/net/UriScheme.java\n@@ -0,0 +1,28 @@\n+package com.termux.shared.models.net;\n+\n+import android.net.Uri;\n+\n+/**\n+ * The {@link Uri} schemes.\n+ *\n+ * https://www.iana.org/assignments/uri-schemes/uri-schemes.xhtml\n+ * https://en.wikipedia.org/wiki/List_of_URI_schemes\n+ */\n+public class UriScheme {\n+\n+    /** Android app resource. */\n+    public static final String SCHEME_ANDROID_RESOURCE = \"android.resource\";\n+\n+    /** Android content provider. https://www.iana.org/assignments/uri-schemes/prov/content. */\n+    public static final String SCHEME_CONTENT = \"content\";\n+\n+    /** Filesystem or android app asset. https://www.rfc-editor.org/rfc/rfc8089.html. */\n+    public static final String SCHEME_FILE = \"file\";\n+\n+    /* Hypertext Transfer Protocol. */\n+    public static final String SCHEME_HTTP = \"http\";\n+\n+    /* Hypertext Transfer Protocol Secure. */\n+    public static final String SCHEME_HTTPS = \"https\";\n+\n+}\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/net/UriUtils.java b/termux-shared/src/main/java/com/termux/shared/net/UriUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/net/UriUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/net/UriUtils.java\n@@ -1,25 +1,26 @@\n-package com.termux.shared.data;\n+package com.termux.shared.net;\n \n-import android.content.ContentResolver;\n import android.net.Uri;\n \n import androidx.annotation.NonNull;\n \n+import com.termux.shared.data.DataUtils;\n import com.termux.shared.file.FileUtils;\n+import com.termux.shared.models.net.UriScheme;\n \n public class UriUtils {\n \n     /**\n      * Get the full file path from a {@link Uri}.\n      *\n-     *  If the {@link Uri} was created from file path with {@link Uri#parse(String)}, like \"am\"\n-     *  command \"-d\" option does, and the path contained a \"#\", then anything after it would become\n-     *  the fragment and {@link Uri#getPath()} will only return the path before it, which would be\n-     *  invalid. The fragment must be manually appended to the path to get the full path.\n+     * If the {@link Uri} was created from file path with {@link Uri#parse(String)}, like \"am\"\n+     * command \"-d\" option does, and the path contained a \"#\", then anything after it would become\n+     * the fragment and {@link Uri#getPath()} will only return the path before it, which would be\n+     * invalid. The fragment must be manually appended to the path to get the full path.\n      *\n-     *  If the {@link Uri} was created with {@link Uri.Builder} and path was set\n-     *  with {@link Uri.Builder#path(String)}, then \"#\" will automatically be encoded to \"%23\"\n-     *  and separate fragment will not exist.\n+     * If the {@link Uri} was created with {@link Uri.Builder} and path was set\n+     * with {@link Uri.Builder#path(String)}, then \"#\" will automatically be encoded to \"%23\"\n+     * and separate fragment will not exist.\n      *\n      * @param uri The {@link Uri} to get basename from.\n      * @return Returns the file path if found, otherwise {@code null}.\n@@ -55,45 +56,45 @@ public static String getUriFileBasename(Uri uri, boolean withFragment) {\n     }\n \n     /**\n-     * Get {@link ContentResolver#SCHEME_FILE} {@link Uri} for path.\n+     * Get {@link UriScheme#SCHEME_FILE} {@link Uri} for path.\n      *\n      * @param path The path for the {@link Uri}.\n      * @return Returns the {@link Uri}.\n      */\n     public static Uri getFileUri(@NonNull String path) {\n-        return new Uri.Builder().scheme(ContentResolver.SCHEME_FILE).path(path).build();\n+        return new Uri.Builder().scheme(UriScheme.SCHEME_FILE).path(path).build();\n     }\n \n     /**\n-     * Get {@link ContentResolver#SCHEME_FILE} {@link Uri} for path.\n+     * Get {@link UriScheme#SCHEME_FILE} {@link Uri} for path.\n      *\n      * @param authority The authority for the {@link Uri}.\n      * @param path The path for the {@link Uri}.\n      * @return Returns the {@link Uri}.\n      */\n     public static Uri getFileUri(@NonNull String authority, @NonNull String path) {\n-        return new Uri.Builder().scheme(ContentResolver.SCHEME_FILE).authority(authority).path(path).build();\n+        return new Uri.Builder().scheme(UriScheme.SCHEME_FILE).authority(authority).path(path).build();\n     }\n \n     /**\n-     * Get {@link ContentResolver#SCHEME_CONTENT} {@link Uri} for path.\n+     * Get {@link UriScheme#SCHEME_CONTENT} {@link Uri} for path.\n      *\n      * @param path The path for the {@link Uri}.\n      * @return Returns the {@link Uri}.\n      */\n     public static Uri getContentUri(@NonNull String path) {\n-        return new Uri.Builder().scheme(ContentResolver.SCHEME_CONTENT).path(path).build();\n+        return new Uri.Builder().scheme(UriScheme.SCHEME_CONTENT).path(path).build();\n     }\n \n     /**\n-     * Get {@link ContentResolver#SCHEME_CONTENT} {@link Uri} for path.\n+     * Get {@link UriScheme#SCHEME_CONTENT} {@link Uri} for path.\n      *\n      * @param authority The authority for the {@link Uri}.\n      * @param path The path for the {@link Uri}.\n      * @return Returns the {@link Uri}.\n      */\n     public static Uri getContentUri(@NonNull String authority, @NonNull String path) {\n-        return new Uri.Builder().scheme(ContentResolver.SCHEME_CONTENT).authority(authority).path(path).build();\n+        return new Uri.Builder().scheme(UriScheme.SCHEME_CONTENT).authority(authority).path(path).build();\n     }\n \n }",
    "output": "Added: Add UriScheme and move UriUtils to com.termux.shared.net package"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java b/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java\n--- a/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java\n+++ b/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java\n@@ -142,6 +142,7 @@ void handleContentUri(@NonNull final Uri uri, String subjectFromIntent) {\n             }\n \n             if (attachmentFileName == null) attachmentFileName = subjectFromIntent;\n+            if (attachmentFileName == null) attachmentFileName = UriUtils.getUriFileBasename(uri, true);\n \n             InputStream in = getContentResolver().openInputStream(uri);\n             promptNameAndSave(in, attachmentFileName);\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/data/UriUtils.java b/termux-shared/src/main/java/com/termux/shared/data/UriUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/data/UriUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/data/UriUtils.java\n@@ -5,6 +5,8 @@\n \n import androidx.annotation.NonNull;\n \n+import com.termux.shared.file.FileUtils;\n+\n public class UriUtils {\n \n     /**\n@@ -30,6 +32,28 @@ public static String getUriFilePath(Uri uri) {\n         return path + (DataUtils.isNullOrEmpty(fragment) ? \"\" : \"#\" + fragment);\n     }\n \n+    /**\n+     * Get the file basename from a {@link Uri}. The file basename is anything after last forward\n+     * slash \"/\" in the path, or the path itself if its not found.\n+     *\n+     * @param uri The {@link Uri} to get basename from.\n+     * @param withFragment If the {@link Uri} fragment should be included in basename.\n+     * @return Returns the file basename if found, otherwise {@code null}.\n+     */\n+    public static String getUriFileBasename(Uri uri, boolean withFragment) {\n+        if (uri == null) return null;\n+\n+        String path;\n+        if (withFragment) {\n+            path = getUriFilePath(uri);\n+        } else {\n+            path = uri.getPath();\n+            if (DataUtils.isNullOrEmpty(path)) return null;\n+        }\n+\n+        return FileUtils.getFileBasename(path);\n+    }\n+\n     /**\n      * Get {@link ContentResolver#SCHEME_FILE} {@link Uri} for path.\n      *",
    "output": "Fixed: Get file basename from Uri path when opening files in termux if failed to get it ContentResolver and EXTRA_TITLE"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java b/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java\n--- a/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java\n+++ b/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java\n@@ -1,15 +1,19 @@\n package com.termux.filepicker;\n \n import android.app.Activity;\n+import android.content.ContentResolver;\n import android.content.Intent;\n import android.database.Cursor;\n import android.net.Uri;\n import android.provider.OpenableColumns;\n import android.util.Patterns;\n \n+import androidx.annotation.NonNull;\n+\n import com.termux.R;\n import com.termux.shared.data.DataUtils;\n import com.termux.shared.data.IntentUtils;\n+import com.termux.shared.data.UriUtils;\n import com.termux.shared.interact.MessageDialogUtils;\n import com.termux.shared.termux.interact.TextInputDialogUtils;\n import com.termux.shared.termux.TermuxConstants;\n@@ -89,11 +93,13 @@ protected void onResume() {\n                 return;\n             }\n \n-            if (\"content\".equals(scheme)) {\n+            if (ContentResolver.SCHEME_CONTENT.equals(scheme)) {\n                 handleContentUri(dataUri, sharedTitle);\n-            } else if (\"file\".equals(scheme)) {\n-                // When e.g. clicking on a downloaded apk:\n-                String path = dataUri.getPath();\n+            } else if (ContentResolver.SCHEME_FILE.equals(scheme)) {\n+                Logger.logVerbose(LOG_TAG, \"uri: \\\"\" + dataUri + \"\\\", path: \\\"\" + dataUri.getPath() + \"\\\", fragment: \\\"\" + dataUri.getFragment() + \"\\\"\");\n+\n+                // Get full path including fragment (anything after last \"#\")\n+                String path = UriUtils.getUriFilePath(dataUri);\n                 if (DataUtils.isNullOrEmpty(path)) {\n                     showErrorDialogAndQuit(\"File path from data uri is null, empty or invalid.\");\n                     return;\n@@ -121,8 +127,10 @@ void showErrorDialogAndQuit(String message) {\n             dialog -> finish());\n     }\n \n-    void handleContentUri(final Uri uri, String subjectFromIntent) {\n+    void handleContentUri(@NonNull final Uri uri, String subjectFromIntent) {\n         try {\n+            Logger.logVerbose(LOG_TAG, \"uri: \\\"\" + uri + \"\\\", path: \\\"\" + uri.getPath() + \"\\\", fragment: \\\"\" + uri.getFragment() + \"\\\"\");\n+\n             String attachmentFileName = null;\n \n             String[] projection = new String[]{OpenableColumns.DISPLAY_NAME};\n@@ -144,29 +152,30 @@ void handleContentUri(final Uri uri, String subjectFromIntent) {\n     }\n \n     void promptNameAndSave(final InputStream in, final String attachmentFileName) {\n-        TextInputDialogUtils.textInput(this, R.string.title_file_received, attachmentFileName, R.string.action_file_received_edit, text -> {\n-            File outFile = saveStreamWithName(in, text);\n-            if (outFile == null) return;\n-\n-            final File editorProgramFile = new File(EDITOR_PROGRAM);\n-            if (!editorProgramFile.isFile()) {\n-                showErrorDialogAndQuit(\"The following file does not exist:\\n$HOME/bin/termux-file-editor\\n\\n\"\n-                    + \"Create this file as a script or a symlink - it will be called with the received file as only argument.\");\n-                return;\n-            }\n+        TextInputDialogUtils.textInput(this, R.string.title_file_received, attachmentFileName,\n+            R.string.action_file_received_edit, text -> {\n+                File outFile = saveStreamWithName(in, text);\n+                if (outFile == null) return;\n+\n+                final File editorProgramFile = new File(EDITOR_PROGRAM);\n+                if (!editorProgramFile.isFile()) {\n+                    showErrorDialogAndQuit(\"The following file does not exist:\\n$HOME/bin/termux-file-editor\\n\\n\"\n+                        + \"Create this file as a script or a symlink - it will be called with the received file as only argument.\");\n+                    return;\n+                }\n \n-            // Do this for the user if necessary:\n-            //noinspection ResultOfMethodCallIgnored\n-            editorProgramFile.setExecutable(true);\n+                // Do this for the user if necessary:\n+                //noinspection ResultOfMethodCallIgnored\n+                editorProgramFile.setExecutable(true);\n \n-            final Uri scriptUri = new Uri.Builder().scheme(\"file\").path(EDITOR_PROGRAM).build();\n+                final Uri scriptUri = UriUtils.getFileUri(EDITOR_PROGRAM);\n \n-            Intent executeIntent = new Intent(TERMUX_SERVICE.ACTION_SERVICE_EXECUTE, scriptUri);\n-            executeIntent.setClass(TermuxFileReceiverActivity.this, TermuxService.class);\n-            executeIntent.putExtra(TERMUX_SERVICE.EXTRA_ARGUMENTS, new String[]{outFile.getAbsolutePath()});\n-            startService(executeIntent);\n-            finish();\n-        },\n+                Intent executeIntent = new Intent(TERMUX_SERVICE.ACTION_SERVICE_EXECUTE, scriptUri);\n+                executeIntent.setClass(TermuxFileReceiverActivity.this, TermuxService.class);\n+                executeIntent.putExtra(TERMUX_SERVICE.EXTRA_ARGUMENTS, new String[]{outFile.getAbsolutePath()});\n+                startService(executeIntent);\n+                finish();\n+            },\n             R.string.action_file_received_open_directory, text -> {\n                 if (saveStreamWithName(in, text) == null) return;\n \n@@ -223,7 +232,7 @@ void handleUrlAndFinish(final String url) {\n         //noinspection ResultOfMethodCallIgnored\n         urlOpenerProgramFile.setExecutable(true);\n \n-        final Uri urlOpenerProgramUri = new Uri.Builder().scheme(\"file\").path(URL_OPENER_PROGRAM).build();\n+        final Uri urlOpenerProgramUri = UriUtils.getFileUri(URL_OPENER_PROGRAM);\n \n         Intent executeIntent = new Intent(TERMUX_SERVICE.ACTION_SERVICE_EXECUTE, urlOpenerProgramUri);\n         executeIntent.setClass(TermuxFileReceiverActivity.this, TermuxService.class);",
    "output": "Fixed: Fix TermuxFileReceiverActivity failing to open files with \"#\" and remove hardcoded \"content\" and \"file\" strings and fix indentation\n\nam start -a android.intent.action.VIEW -n com.termux/.filepicker.TermuxFileReceiverActivity -d \"file:///data/data/com.termux/files/home/te#st.sh\""
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -26,6 +26,7 @@\n import com.termux.app.terminal.TermuxTerminalSessionClient;\n import com.termux.app.utils.PluginUtils;\n import com.termux.shared.data.IntentUtils;\n+import com.termux.shared.data.UriUtils;\n import com.termux.shared.models.errors.Errno;\n import com.termux.shared.shell.ShellUtils;\n import com.termux.shared.termux.shell.TermuxShellEnvironmentClient;\n@@ -360,7 +361,10 @@ private void actionServiceExecute(Intent intent) {\n         executionCommand.inBackground = intent.getBooleanExtra(TERMUX_SERVICE.EXTRA_BACKGROUND, false);\n \n         if (executionCommand.executableUri != null) {\n-            executionCommand.executable = executionCommand.executableUri.getPath();\n+            Logger.logVerbose(LOG_TAG, \"uri: \\\"\" + executionCommand.executableUri + \"\\\", path: \\\"\" + executionCommand.executableUri.getPath() + \"\\\", fragment: \\\"\" + executionCommand.executableUri.getFragment() + \"\\\"\");\n+\n+            // Get full path including fragment (anything after last \"#\")\n+            executionCommand.executable = UriUtils.getUriFilePath(executionCommand.executableUri);\n             executionCommand.arguments = IntentUtils.getStringArrayExtraIfSet(intent, TERMUX_SERVICE.EXTRA_ARGUMENTS, null);\n             if (executionCommand.inBackground)\n                 executionCommand.stdin = IntentUtils.getStringExtraIfSet(intent, TERMUX_SERVICE.EXTRA_STDIN, null);",
    "output": "Fixed: Fix TermuxService failing to execute files with \"#\"\n\nam startservice --user 0 -n com.termux/.app.TermuxService -a com.termux.service_execute -d \"file:///data/data/com.termux/files/home/te#st.sh\""
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxOpenReceiver.java b/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n--- a/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n+++ b/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n@@ -2,6 +2,7 @@\n \n import android.content.ActivityNotFoundException;\n import android.content.BroadcastReceiver;\n+import android.content.ContentResolver;\n import android.content.ContentValues;\n import android.content.Context;\n import android.content.Intent;\n@@ -15,6 +16,7 @@\n \n import com.termux.app.utils.PluginUtils;\n import com.termux.shared.data.IntentUtils;\n+import com.termux.shared.data.UriUtils;\n import com.termux.shared.logger.Logger;\n import com.termux.shared.termux.TermuxConstants;\n \n@@ -37,8 +39,8 @@ public void onReceive(Context context, Intent intent) {\n         }\n \n         Logger.logVerbose(LOG_TAG, \"Intent Received:\\n\" + IntentUtils.getIntentString(intent));\n+        Logger.logVerbose(LOG_TAG, \"uri: \\\"\" + data + \"\\\", path: \\\"\" + data.getPath() + \"\\\", fragment: \\\"\" + data.getFragment() + \"\\\"\");\n \n-        final String filePath = data.getPath();\n         final String contentTypeExtra = intent.getStringExtra(\"content-type\");\n         final boolean useChooser = intent.getBooleanExtra(\"chooser\", false);\n         final String intentAction = intent.getAction() == null ? Intent.ACTION_VIEW : intent.getAction();\n@@ -52,8 +54,8 @@ public void onReceive(Context context, Intent intent) {\n                 break;\n         }\n \n-        final boolean isExternalUrl = data.getScheme() != null && !data.getScheme().equals(\"file\");\n-        if (isExternalUrl) {\n+        String scheme = data.getScheme();\n+        if (scheme != null && !ContentResolver.SCHEME_FILE.equals(scheme)) {\n             Intent urlIntent = new Intent(intentAction, data);\n             if (intentAction.equals(Intent.ACTION_SEND)) {\n                 urlIntent.putExtra(Intent.EXTRA_TEXT, data.toString());\n@@ -70,6 +72,9 @@ public void onReceive(Context context, Intent intent) {\n             return;\n         }\n \n+        // Get full path including fragment (anything after last \"#\")\n+        String filePath = UriUtils.getUriFilePath(data);\n+\n         final File fileToShare = new File(filePath);\n         if (!(fileToShare.isFile() && fileToShare.canRead())) {\n             Logger.logError(LOG_TAG, \"termux-open: Not a readable file: '\" + fileToShare.getAbsolutePath() + \"'\");\n@@ -93,7 +98,8 @@ public void onReceive(Context context, Intent intent) {\n             contentTypeToUse = contentTypeExtra;\n         }\n \n-        Uri uriToShare = Uri.parse(\"content://\" + TermuxConstants.TERMUX_FILE_SHARE_URI_AUTHORITY + fileToShare.getAbsolutePath());\n+        // Do not create Uri with Uri.parse() and use Uri.Builder().path(), check UriUtils.getUriFilePath().\n+        Uri uriToShare = UriUtils.getContentUri(TermuxConstants.TERMUX_FILE_SHARE_URI_AUTHORITY, fileToShare.getAbsolutePath());\n \n         if (Intent.ACTION_SEND.equals(intentAction)) {\n             sendIntent.putExtra(Intent.EXTRA_STREAM, uriToShare);\n@@ -184,8 +190,8 @@ public ParcelFileDescriptor openFile(@NonNull Uri uri, @NonNull String mode) thr\n             File file = new File(uri.getPath());\n             try {\n                 String path = file.getCanonicalPath();\n-                String callingPackage = getCallingPackage();\n-                Logger.logDebug(LOG_TAG, \"Open file request received from \" + callingPackage + \" for \\\"\" + path + \"\\\" with mode \\\"\" + mode + \"\\\"\");\n+                String callingPackageName = getCallingPackage();\n+                Logger.logDebug(LOG_TAG, \"Open file request received from \" + callingPackageName + \" for \\\"\" + path + \"\\\" with mode \\\"\" + mode + \"\\\"\");\n                 String storagePath = Environment.getExternalStorageDirectory().getCanonicalPath();\n                 // See https://support.google.com/faqs/answer/7496913:\n                 if (!(path.startsWith(TermuxConstants.TERMUX_FILES_DIR_PATH) || path.startsWith(storagePath))) {\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/data/UriUtils.java b/termux-shared/src/main/java/com/termux/shared/data/UriUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/data/UriUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/data/UriUtils.java\n@@ -0,0 +1,75 @@\n+package com.termux.shared.data;\n+\n+import android.content.ContentResolver;\n+import android.net.Uri;\n+\n+import androidx.annotation.NonNull;\n+\n+public class UriUtils {\n+\n+    /**\n+     * Get the full file path from a {@link Uri}.\n+     *\n+     *  If the {@link Uri} was created from file path with {@link Uri#parse(String)}, like \"am\"\n+     *  command \"-d\" option does, and the path contained a \"#\", then anything after it would become\n+     *  the fragment and {@link Uri#getPath()} will only return the path before it, which would be\n+     *  invalid. The fragment must be manually appended to the path to get the full path.\n+     *\n+     *  If the {@link Uri} was created with {@link Uri.Builder} and path was set\n+     *  with {@link Uri.Builder#path(String)}, then \"#\" will automatically be encoded to \"%23\"\n+     *  and separate fragment will not exist.\n+     *\n+     * @param uri The {@link Uri} to get basename from.\n+     * @return Returns the file path if found, otherwise {@code null}.\n+     */\n+    public static String getUriFilePath(Uri uri) {\n+        if (uri == null) return null;\n+        String path = uri.getPath();\n+        if (DataUtils.isNullOrEmpty(path)) return null;\n+        String fragment = uri.getFragment();\n+        return path + (DataUtils.isNullOrEmpty(fragment) ? \"\" : \"#\" + fragment);\n+    }\n+\n+    /**\n+     * Get {@link ContentResolver#SCHEME_FILE} {@link Uri} for path.\n+     *\n+     * @param path The path for the {@link Uri}.\n+     * @return Returns the {@link Uri}.\n+     */\n+    public static Uri getFileUri(@NonNull String path) {\n+        return new Uri.Builder().scheme(ContentResolver.SCHEME_FILE).path(path).build();\n+    }\n+\n+    /**\n+     * Get {@link ContentResolver#SCHEME_FILE} {@link Uri} for path.\n+     *\n+     * @param authority The authority for the {@link Uri}.\n+     * @param path The path for the {@link Uri}.\n+     * @return Returns the {@link Uri}.\n+     */\n+    public static Uri getFileUri(@NonNull String authority, @NonNull String path) {\n+        return new Uri.Builder().scheme(ContentResolver.SCHEME_FILE).authority(authority).path(path).build();\n+    }\n+\n+    /**\n+     * Get {@link ContentResolver#SCHEME_CONTENT} {@link Uri} for path.\n+     *\n+     * @param path The path for the {@link Uri}.\n+     * @return Returns the {@link Uri}.\n+     */\n+    public static Uri getContentUri(@NonNull String path) {\n+        return new Uri.Builder().scheme(ContentResolver.SCHEME_CONTENT).path(path).build();\n+    }\n+\n+    /**\n+     * Get {@link ContentResolver#SCHEME_CONTENT} {@link Uri} for path.\n+     *\n+     * @param authority The authority for the {@link Uri}.\n+     * @param path The path for the {@link Uri}.\n+     * @return Returns the {@link Uri}.\n+     */\n+    public static Uri getContentUri(@NonNull String authority, @NonNull String path) {\n+        return new Uri.Builder().scheme(ContentResolver.SCHEME_CONTENT).authority(authority).path(path).build();\n+    }\n+\n+}",
    "output": "Fixed: Fix termux-open failing to open files with \"#\" and remove hardcoded \"content\" and \"file\" strings\n\ntermux-open \"/data/data/com.termux/files/home/te#st.sh\""
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/settings/properties/TermuxAppSharedProperties.java b/app/src/main/java/com/termux/app/settings/properties/TermuxAppSharedProperties.java\n--- a/app/src/main/java/com/termux/app/settings/properties/TermuxAppSharedProperties.java\n+++ b/app/src/main/java/com/termux/app/settings/properties/TermuxAppSharedProperties.java\n@@ -112,8 +112,8 @@ public ExtraKeysInfo getExtraKeysInfo() {\n      * Load the {@link TermuxPropertyConstants#KEY_TERMINAL_TRANSCRIPT_ROWS} value from termux properties file on disk.\n      */\n     public static int getTerminalTranscriptRows(Context context) {\n-        return  (int) TermuxSharedProperties.getInternalPropertyValue(context, TermuxPropertyConstants.getTermuxPropertiesFile(),\n-            TermuxPropertyConstants.KEY_TERMINAL_TRANSCRIPT_ROWS, new SharedPropertiesParserClient());\n+        return (int) TermuxSharedProperties.getTermuxInternalPropertyValue(context,\n+            TermuxPropertyConstants.KEY_TERMINAL_TRANSCRIPT_ROWS);\n     }\n \n }\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/settings/properties/TermuxSharedProperties.java b/termux-shared/src/main/java/com/termux/shared/termux/settings/properties/TermuxSharedProperties.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/settings/properties/TermuxSharedProperties.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/settings/properties/TermuxSharedProperties.java\n@@ -167,17 +167,16 @@ public Object getInternalPropertyValue(String key, boolean cached) {\n \n     /**\n      * Get the internal {@link Object} value for the key passed from the file returned by\n-     * {@code propertiesFile}. The {@link Properties} object is\n+     * {@link TermuxPropertyConstants#getTermuxPropertiesFile()}. The {@link Properties} object is\n      * read directly from the file and internal value is returned for the property value against the key.\n      *\n      * @param context The context for operations.\n      * @param key The key for which the internal object is required.\n      * @return Returns the {@link Object} object. This will be {@code null} if key is not found or\n      * the object stored against the key is {@code null}.\n      */\n-    public static Object getInternalPropertyValue(Context context, File propertiesFile, String key,\n-                                                  @NonNull SharedPropertiesParser sharedPropertiesParser) {\n-        return SharedProperties.getInternalProperty(context, propertiesFile, key, sharedPropertiesParser);\n+    public static Object getTermuxInternalPropertyValue(Context context, String key) {\n+        return SharedProperties.getInternalProperty(context, TermuxPropertyConstants.getTermuxPropertiesFile(), key, new SharedPropertiesParserClient());\n     }\n \n     /**",
    "output": "Changed: Automatically use default properties file and client for TermuxSharedProperties.getTermuxInternalPropertyValue()"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java b/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n@@ -220,6 +220,20 @@ public static boolean symlinkFileExists(final String filePath) {\n         return getFileType(filePath, false) == FileType.SYMLINK;\n     }\n \n+    /**\n+     * Checks whether a regular or directory file exists at {@code filePath}.\n+     *\n+     * @param filePath The {@code path} for regular file to check.\n+     * @param followLinks The {@code boolean} that decides if symlinks will be followed while\n+     *                       finding if file exists. Check {@link #getFileType(String, boolean)}\n+     *                       for details.\n+     * @return Returns {@code true} if regular or directory file exists, otherwise {@code false}.\n+     */\n+    public static boolean regularOrDirectoryFileExists(final String filePath, final boolean followLinks) {\n+        FileType fileType = getFileType(filePath, followLinks);\n+        return fileType == FileType.REGULAR || fileType == FileType.DIRECTORY;\n+    }\n+\n     /**\n      * Checks whether any file exists at {@code filePath}.\n      *",
    "output": "Added: Add FileUtils.regularOrDirectoryFileExists()"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java b/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n@@ -145,7 +145,7 @@ public static String sanitizeFileName(String fileName, boolean sanitizeWhitespac\n      * @return Returns {@code true} if path in {@code dirPath}, otherwise returns {@code false}.\n      */\n     public static boolean isPathInDirPath(String path, final String dirPath, final boolean ensureUnder) {\n-       return isPathInDirPaths(path, Collections.singletonList(dirPath), ensureUnder);\n+        return isPathInDirPaths(path, Collections.singletonList(dirPath), ensureUnder);\n     }\n \n     /**\n@@ -275,8 +275,8 @@ public static FileType getFileType(final String filePath, final boolean followLi\n      * failed, otherwise {@code null}.\n      */\n     public static Error validateRegularFileExistenceAndPermissions(String label, final String filePath, final String parentDirPath,\n-                                                                    final String permissionsToCheck, final boolean setPermissions, final boolean setMissingPermissionsOnly,\n-                                                                    final boolean ignoreErrorsIfPathIsUnderParentDirPath) {\n+                                                                   final String permissionsToCheck, final boolean setPermissions, final boolean setMissingPermissionsOnly,\n+                                                                   final boolean ignoreErrorsIfPathIsUnderParentDirPath) {\n         label = (label == null ? \"\" : label + \" \");\n         if (filePath == null || filePath.isEmpty()) return FunctionErrno.ERRNO_NULL_OR_EMPTY_PARAMETER.getError(label + \"regular file path\", \"validateRegularFileExistenceAndPermissions\");\n \n@@ -356,8 +356,8 @@ public static Error validateRegularFileExistenceAndPermissions(String label, fin\n      * or validating permissions failed, otherwise {@code null}.\n      */\n     public static Error validateDirectoryFileExistenceAndPermissions(String label, final String filePath, final String parentDirPath, final boolean createDirectoryIfMissing,\n-                                                                      final String permissionsToCheck, final boolean setPermissions, final boolean setMissingPermissionsOnly,\n-                                                                      final boolean ignoreErrorsIfPathIsInParentDirPath, final boolean ignoreIfNotExecutable) {\n+                                                                     final String permissionsToCheck, final boolean setPermissions, final boolean setMissingPermissionsOnly,\n+                                                                     final boolean ignoreErrorsIfPathIsInParentDirPath, final boolean ignoreIfNotExecutable) {\n         label = (label == null ? \"\" : label + \" \");\n         if (filePath == null || filePath.isEmpty()) return FunctionErrno.ERRNO_NULL_OR_EMPTY_PARAMETER.getError(label + \"directory file path\", \"validateDirectoryExistenceAndPermissions\");\n \n@@ -471,7 +471,7 @@ public static Error createRegularFile(final String label, final String filePath)\n      * or validating permissions failed, otherwise {@code null}.\n      */\n     public static Error createRegularFile(String label, final String filePath,\n-                                           final String permissionsToCheck, final boolean setPermissions, final boolean setMissingPermissionsOnly) {\n+                                          final String permissionsToCheck, final boolean setPermissions, final boolean setMissingPermissionsOnly) {\n         label = (label == null ? \"\" : label + \" \");\n         if (filePath == null || filePath.isEmpty()) return FunctionErrno.ERRNO_NULL_OR_EMPTY_PARAMETER.getError(label + \"file path\", \"createRegularFile\");\n \n@@ -583,7 +583,7 @@ public static Error createDirectoryFile(final String label, final String filePat\n      * or validating permissions failed, otherwise {@code null}.\n      */\n     public static Error createDirectoryFile(final String label, final String filePath,\n-                                             final String permissionsToCheck, final boolean setPermissions, final boolean setMissingPermissionsOnly) {\n+                                            final String permissionsToCheck, final boolean setPermissions, final boolean setMissingPermissionsOnly) {\n         return validateDirectoryFileExistenceAndPermissions(label, filePath,\n             null, true,\n             permissionsToCheck, setPermissions, setMissingPermissionsOnly,\n@@ -648,7 +648,7 @@ public static Error createSymlinkFile(String label, final String targetFilePath,\n      * or validating permissions failed, otherwise {@code null}.\n      */\n     public static Error createSymlinkFile(String label, final String targetFilePath, final String destFilePath,\n-                                           final boolean allowDangling, final boolean overwrite, final boolean overwriteOnlyIfDestIsASymlink) {\n+                                          final boolean allowDangling, final boolean overwrite, final boolean overwriteOnlyIfDestIsASymlink) {\n         label = (label == null ? \"\" : label + \" \");\n         if (targetFilePath == null || targetFilePath.isEmpty()) return FunctionErrno.ERRNO_NULL_OR_EMPTY_PARAMETER.getError(label + \"target file path\", \"createSymlinkFile\");\n         if (destFilePath == null || destFilePath.isEmpty()) return FunctionErrno.ERRNO_NULL_OR_EMPTY_PARAMETER.getError(label + \"destination file path\", \"createSymlinkFile\");\n@@ -920,8 +920,8 @@ public static Error moveFile(final String label, final String srcFilePath, final\n      * @return Returns the {@code error} if copy or move was not successful, otherwise {@code null}.\n      */\n     public static Error copyOrMoveFile(String label, final String srcFilePath, final String destFilePath,\n-                                        final boolean moveFile, final boolean ignoreNonExistentSrcFile, int allowedFileTypeFlags,\n-                                        final boolean overwrite, final boolean overwriteOnlyIfDestSameFileTypeAsSrc) {\n+                                       final boolean moveFile, final boolean ignoreNonExistentSrcFile, int allowedFileTypeFlags,\n+                                       final boolean overwrite, final boolean overwriteOnlyIfDestSameFileTypeAsSrc) {\n         label = (label == null ? \"\" : label + \" \");\n         if (srcFilePath == null || srcFilePath.isEmpty()) return FunctionErrno.ERRNO_NULL_OR_EMPTY_PARAMETER.getError(label + \"source file path\", \"copyOrMoveFile\");\n         if (destFilePath == null || destFilePath.isEmpty()) return FunctionErrno.ERRNO_NULL_OR_EMPTY_PARAMETER.getError(label + \"destination file path\", \"copyOrMoveFile\");\n@@ -1151,7 +1151,7 @@ public static Error deleteFile(String label, final String filePath, final boolea\n                 // If delete is to be ignored if file does not exist\n                 if (ignoreNonExistentFile)\n                     return null;\n-                // Else return with error\n+                    // Else return with error\n                 else {\n                     label += \"file meant to be deleted\";\n                     return FileUtilsErrno.ERRNO_FILE_NOT_FOUND_AT_PATH.getError(label, filePath).setLabel(label);\n@@ -1423,7 +1423,7 @@ public static Error readStringFromFile(String label, final String filePath, Char\n \n             Logger.logVerbose(LOG_TAG, Logger.getMultiLineLogStringEntry(\"String\", DataUtils.getTruncatedCommandOutput(dataStringBuilder.toString(), Logger.LOGGER_ENTRY_MAX_SAFE_PAYLOAD, true, false, true), \"-\"));\n         } catch (Exception e) {\n-            return FileUtilsErrno.ERRNO_READING_STRING_TO_FILE_FAILED_WITH_EXCEPTION.getError(e, label + \"file\", filePath, e.getMessage());\n+            return FileUtilsErrno.ERRNO_READING_STRING_FROM_FILE_FAILED_WITH_EXCEPTION.getError(e, label + \"file\", filePath, e.getMessage());\n         } finally {\n             closeCloseable(fileInputStream);\n             closeCloseable(bufferedReader);\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/models/errors/FileUtilsErrno.java b/termux-shared/src/main/java/com/termux/shared/models/errors/FileUtilsErrno.java\n--- a/termux-shared/src/main/java/com/termux/shared/models/errors/FileUtilsErrno.java\n+++ b/termux-shared/src/main/java/com/termux/shared/models/errors/FileUtilsErrno.java\n@@ -65,7 +65,7 @@ public class FileUtilsErrno extends Errno {\n \n \n     /* Errors for file reading and writing (350-400) */\n-    public static final Errno ERRNO_READING_STRING_TO_FILE_FAILED_WITH_EXCEPTION = new Errno(TYPE, 350, \"Reading string from %1$s at path \\\"%2$s\\\" failed.\\nException: %3$s\");\n+    public static final Errno ERRNO_READING_STRING_FROM_FILE_FAILED_WITH_EXCEPTION = new Errno(TYPE, 350, \"Reading string from %1$s at path \\\"%2$s\\\" failed.\\nException: %3$s\");\n     public static final Errno ERRNO_WRITING_STRING_TO_FILE_FAILED_WITH_EXCEPTION = new Errno(TYPE, 351, \"Writing string to %1$s at path \\\"%2$s\\\" failed.\\nException: %3$s\");\n     public static final Errno ERRNO_UNSUPPORTED_CHARSET = new Errno(TYPE, 352, \"Unsupported charset \\\"%1$s\\\"\");\n     public static final Errno ERRNO_CHECKING_IF_CHARSET_SUPPORTED_FAILED = new Errno(TYPE, 353, \"Checking if charset \\\"%1$s\\\" is supported failed.\\nException: %2$s\");",
    "output": "Changed: Fix minor typos in FileUtils and FileUtilsErrno"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java b/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n@@ -105,7 +105,7 @@ public static String normalizePath(String path) {\n         path = path.replaceAll(\"\\\\./\", \"\");\n \n         if (path.endsWith(\"/\")) {\n-            path = path.substring(0, path.length() - 1);\n+            path = path.replaceAll(\"/+$\", \"\");\n         }\n \n         return path;",
    "output": "Fixed: Remove all trailing slashes when normalizing path"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java b/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n@@ -117,7 +117,7 @@ public static String normalizePath(String path) {\n      * @param fileName The name to sanitize.\n      * @param sanitizeWhitespaces If set to {@code true}, then white space characters ` \\t\\n` will be\n      *                            converted.\n-     * @param sanitizeWhitespaces If set to {@code true}, then file name will be converted to lowe case.\n+     * @param toLower If set to {@code true}, then file name will be converted to lower case.\n      * @return Returns the {@code sanitized name}.\n      */\n     public static String sanitizeFileName(String fileName, boolean sanitizeWhitespaces, boolean toLower) {\n@@ -1855,4 +1855,42 @@ public static Error getShortFileUtilsError(final Error error) {\n             return shortErrno.getError(throwables, error.getLabel(), \"file\");\n     }\n \n+\n+    /**\n+     * Get file dirname for file at {@code filePath}.\n+     *\n+     * @param filePath The {@code path} for file.\n+     * @return Returns the file dirname if not {@code null}.\n+     */\n+    public static String getFileDirname(String filePath) {\n+        if (DataUtils.isNullOrEmpty(filePath)) return null;\n+        int lastSlash = filePath.lastIndexOf('/');\n+        return (lastSlash == -1) ? null : filePath.substring(0, lastSlash);\n+    }\n+\n+    /**\n+     * Get file basename for file at {@code filePath}.\n+     *\n+     * @param filePath The {@code path} for file.\n+     * @return Returns the file basename if not {@code null}.\n+     */\n+    public static String getFileBasename(String filePath) {\n+        if (DataUtils.isNullOrEmpty(filePath)) return null;\n+        int lastSlash = filePath.lastIndexOf('/');\n+        return (lastSlash == -1) ? filePath : filePath.substring(lastSlash + 1);\n+    }\n+\n+    /**\n+     * Get file basename for file at {@code filePath} without extension.\n+     *\n+     * @param filePath The {@code path} for file.\n+     * @return Returns the file basename without extension if not {@code null}.\n+     */\n+    public static String getFileBasenameWithoutExtension(String filePath) {\n+        String fileBasename = getFileBasename(filePath);\n+        if (DataUtils.isNullOrEmpty(fileBasename)) return null;\n+        int lastDot = fileBasename.lastIndexOf('.');\n+        return (lastDot == -1) ? fileBasename : fileBasename.substring(0, lastDot);\n+    }\n+\n }\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/shell/ShellUtils.java b/termux-shared/src/main/java/com/termux/shared/shell/ShellUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/shell/ShellUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/shell/ShellUtils.java\n@@ -1,5 +1,6 @@\n package com.termux.shared.shell;\n \n+import com.termux.shared.file.FileUtils;\n import com.termux.terminal.TerminalBuffer;\n import com.termux.terminal.TerminalEmulator;\n import com.termux.terminal.TerminalSession;\n@@ -23,9 +24,7 @@ public static int getPid(Process p) {\n     }\n \n     public static String getExecutableBasename(String executable) {\n-        if (executable == null) return null;\n-        int lastSlash = executable.lastIndexOf('/');\n-        return (lastSlash == -1) ? executable : executable.substring(lastSlash + 1);\n+        return FileUtils.getFileBasename(executable);\n     }\n \n     public static String getTerminalSessionTranscriptText(TerminalSession terminalSession, boolean linesJoined, boolean trim) {",
    "output": "Added: Add functions to get dirname and basename in FileUtils"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/models/errors/Error.java b/termux-shared/src/main/java/com/termux/shared/models/errors/Error.java\n--- a/termux-shared/src/main/java/com/termux/shared/models/errors/Error.java\n+++ b/termux-shared/src/main/java/com/termux/shared/models/errors/Error.java\n@@ -1,5 +1,7 @@\n package com.termux.shared.models.errors;\n \n+import android.content.Context;\n+\n import androidx.annotation.NonNull;\n \n import com.termux.shared.logger.Logger;\n@@ -171,6 +173,26 @@ public String toString() {\n         return getErrorLogString(this);\n     }\n \n+\n+\n+    /**\n+     * Log the {@link Error} and show a toast for the minimal {@link String} for the {@link Error}.\n+     *\n+     * @param context The {@link Context} for operations.\n+     * @param logTag The log tag to use for logging.\n+     * @param error The {@link Error} to convert.\n+     */\n+    public static void logErrorAndShowToast(Context context, String logTag, Error error) {\n+        if (error == null) return;\n+        error.logErrorAndShowToast(context, logTag);\n+    }\n+\n+    public void logErrorAndShowToast(Context context, String logTag) {\n+        Logger.logErrorExtended(logTag, getErrorLogString());\n+        Logger.showToast(context, getMinimalErrorLogString(), true);\n+    }\n+\n+\n     /**\n      * Get a log friendly {@link String} for {@link Error} error parameters.\n      *\n@@ -179,13 +201,16 @@ public String toString() {\n      */\n     public static String getErrorLogString(final Error error) {\n         if (error == null) return \"null\";\n+        return error.getErrorLogString();\n+    }\n \n+    public String getErrorLogString() {\n         StringBuilder logString = new StringBuilder();\n \n-        logString.append(error.getCodeString());\n-        logString.append(\"\\n\").append(error.getTypeAndMessageLogString());\n-        if (error.throwablesList != null)\n-            logString.append(\"\\n\").append(error.geStackTracesLogString());\n+        logString.append(getCodeString());\n+        logString.append(\"\\n\").append(getTypeAndMessageLogString());\n+        if (this.throwablesList != null)\n+            logString.append(\"\\n\").append(geStackTracesLogString());\n \n         return logString.toString();\n     }\n@@ -198,11 +223,14 @@ public static String getErrorLogString(final Error error) {\n      */\n     public static String getMinimalErrorLogString(final Error error) {\n         if (error == null) return \"null\";\n+        return error.getMinimalErrorLogString();\n+    }\n \n+    public String getMinimalErrorLogString() {\n         StringBuilder logString = new StringBuilder();\n \n-        logString.append(error.getCodeString());\n-        logString.append(error.getTypeAndMessageLogString());\n+        logString.append(getCodeString());\n+        logString.append(getTypeAndMessageLogString());\n \n         return logString.toString();\n     }\n@@ -215,11 +243,14 @@ public static String getMinimalErrorLogString(final Error error) {\n      */\n     public static String getMinimalErrorString(final Error error) {\n         if (error == null) return \"null\";\n+        return error.getMinimalErrorString();\n+    }\n \n+    public String getMinimalErrorString() {\n         StringBuilder logString = new StringBuilder();\n \n-        logString.append(\"(\").append(error.getCode()).append(\") \");\n-        logString.append(error.getType()).append(\": \").append(error.getMessage());\n+        logString.append(\"(\").append(getCode()).append(\") \");\n+        logString.append(getType()).append(\": \").append(getMessage());\n \n         return logString.toString();\n     }\n@@ -232,12 +263,16 @@ public static String getMinimalErrorString(final Error error) {\n      */\n     public static String getErrorMarkdownString(final Error error) {\n         if (error == null) return \"null\";\n+        return error.getErrorMarkdownString();\n+    }\n \n+    public String getErrorMarkdownString() {\n         StringBuilder markdownString = new StringBuilder();\n \n-        markdownString.append(MarkdownUtils.getSingleLineMarkdownStringEntry(\"Error Code\", error.getCode(), \"-\"));\n-        markdownString.append(\"\\n\").append(MarkdownUtils.getMultiLineMarkdownStringEntry((Errno.TYPE.equals(error.getType()) ? \"Error Message\" : \"Error Message (\" + error.getType() + \")\"), error.message, \"-\"));\n-        markdownString.append(\"\\n\\n\").append(error.geStackTracesMarkdownString());\n+        markdownString.append(MarkdownUtils.getSingleLineMarkdownStringEntry(\"Error Code\", getCode(), \"-\"));\n+        markdownString.append(\"\\n\").append(MarkdownUtils.getMultiLineMarkdownStringEntry(\n+            (Errno.TYPE.equals(getType()) ? \"Error Message\" : \"Error Message (\" + getType() + \")\"), message, \"-\"));\n+        markdownString.append(\"\\n\\n\").append(geStackTracesMarkdownString());\n \n         return markdownString.toString();\n     }",
    "output": "Added: Add Error.logErrorAndShowToast() and provide non-static logging functions to be used when Error may not be null"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/logger/Logger.java b/termux-shared/src/main/java/com/termux/shared/logger/Logger.java\n--- a/termux-shared/src/main/java/com/termux/shared/logger/Logger.java\n+++ b/termux-shared/src/main/java/com/termux/shared/logger/Logger.java\n@@ -195,9 +195,20 @@ public static void logVerboseForce(String tag, String message) {\n \n \n \n-    public static void logErrorAndShowToast(Context context, String tag, String message) {\n-        if (context == null) return;\n+    public static void logInfoAndShowToast(Context context, String tag, String message) {\n+        if (CURRENT_LOG_LEVEL >= LOG_LEVEL_NORMAL) {\n+            logInfo(tag, message);\n+            showToast(context, message, true);\n+        }\n+    }\n \n+    public static void logInfoAndShowToast(Context context, String message) {\n+        logInfoAndShowToast(context, DEFAULT_LOG_TAG, message);\n+    }\n+\n+\n+\n+    public static void logErrorAndShowToast(Context context, String tag, String message) {\n         if (CURRENT_LOG_LEVEL >= LOG_LEVEL_NORMAL) {\n             logError(tag, message);\n             showToast(context, message, true);\n@@ -211,8 +222,6 @@ public static void logErrorAndShowToast(Context context, String message) {\n \n \n     public static void logDebugAndShowToast(Context context, String tag, String message) {\n-        if (context == null) return;\n-\n         if (CURRENT_LOG_LEVEL >= LOG_LEVEL_DEBUG) {\n             logDebug(tag, message);\n             showToast(context, message, true);",
    "output": "Added: Add Logger.logInfoAndShowToast() and log messages even if not showing toast due to null Context"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/models/errors/FunctionErrno.java b/termux-shared/src/main/java/com/termux/shared/models/errors/FunctionErrno.java\n--- a/termux-shared/src/main/java/com/termux/shared/models/errors/FunctionErrno.java\n+++ b/termux-shared/src/main/java/com/termux/shared/models/errors/FunctionErrno.java\n@@ -12,6 +12,7 @@ public class FunctionErrno extends Errno {\n     public static final Errno ERRNO_UNSET_PARAMETER = new Errno(TYPE, 102, \"The %1$s parameter passed to \\\"%2$s\\\" must be set.\");\n     public static final Errno ERRNO_UNSET_PARAMETERS = new Errno(TYPE, 103, \"The %1$s parameters passed to \\\"%2$s\\\" must be set.\");\n     public static final Errno ERRNO_INVALID_PARAMETER = new Errno(TYPE, 104, \"The %1$s parameter passed to \\\"%2$s\\\" is invalid.\\\"%3$s\\\"\");\n+    public static final Errno ERRNO_PARAMETER_NOT_INSTANCE_OF = new Errno(TYPE, 104, \"The %1$s parameter passed to \\\"%2$s\\\" is not an instance of %3$s.\");\n \n \n     FunctionErrno(final String type, final int code, final String message) {\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/view/ActivityUtils.java b/termux-shared/src/main/java/com/termux/shared/view/ActivityUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/view/ActivityUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/view/ActivityUtils.java\n@@ -0,0 +1,86 @@\n+package com.termux.shared.view;\n+\n+import android.app.Activity;\n+import android.content.Context;\n+import android.content.Intent;\n+\n+import androidx.activity.result.ActivityResultLauncher;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.appcompat.app.AppCompatActivity;\n+\n+import com.termux.shared.R;\n+import com.termux.shared.logger.Logger;\n+import com.termux.shared.models.errors.Error;\n+import com.termux.shared.models.errors.FunctionErrno;\n+\n+\n+public class ActivityUtils {\n+\n+    private static final String LOG_TAG = \"ActivityUtils\";\n+\n+    /**\n+     * Wrapper for {@link #startActivityForResult(Context, int, Intent, boolean, boolean, ActivityResultLauncher)}.\n+     */\n+    public static boolean startActivityForResult(Context context, int requestCode, @NonNull Intent intent) {\n+        return startActivityForResult(context, requestCode, intent, true, true, null);\n+    }\n+\n+    /**\n+     * Wrapper for {@link #startActivityForResult(Context, int, Intent, boolean, boolean, ActivityResultLauncher)}.\n+     */\n+    public static boolean startActivityForResult(Context context, int requestCode, @NonNull Intent intent, boolean logErrorMessage, boolean showErrorMessage) {\n+        return startActivityForResult(context, requestCode, intent, logErrorMessage, showErrorMessage, null);\n+    }\n+\n+    /**\n+     * Start an {@link Activity} for result.\n+     *\n+     * @param context The context for operations. It must be an instance of {@link Activity} or\n+     *               {@link AppCompatActivity}. It is ignored if {@code activityResultLauncher}\n+     *                is not {@code null}.\n+     * @param requestCode The request code to use while sending intent. This must be >= 0, otherwise\n+     *                    exception will be raised. This is ignored if {@code activityResultLauncher}\n+     *                    is {@code null}.\n+     * @param intent The {@link Intent} to send to start the activity.\n+     * @param logErrorMessage If an error message should be logged if failed to start activity.\n+     * @param showErrorMessage If an error message toast should be shown if failed to start activity\n+     *                         in addition to logging a message.\n+     * @param activityResultLauncher The {@link ActivityResultLauncher<Intent>} to use for start the\n+     *                               activity. If this is {@code null}, then\n+     *                               {@link Activity#startActivity(Intent)} will be used instead.\n+     *                               Note that later is deprecated.\n+     * @return Returns {@code true} if starting activity was successful, otherwise {@code false}.\n+     */\n+    public static boolean startActivityForResult(@NonNull Context context, int requestCode, @NonNull Intent intent,\n+                                                 boolean logErrorMessage, boolean showErrorMessage, @Nullable ActivityResultLauncher<Intent> activityResultLauncher) {\n+        try {\n+            if (activityResultLauncher != null) {\n+                activityResultLauncher.launch(intent);\n+            } else {\n+                if (context instanceof AppCompatActivity)\n+                    ((AppCompatActivity) context).startActivityForResult(intent, requestCode);\n+                else if (context instanceof Activity)\n+                    ((Activity) context).startActivityForResult(intent, requestCode);\n+                else {\n+                    if (logErrorMessage)\n+                        Error.logErrorAndShowToast(showErrorMessage ? context : null, LOG_TAG,\n+                            FunctionErrno.ERRNO_PARAMETER_NOT_INSTANCE_OF.getError(\"context\", \"startActivityForResult\", \"Activity or AppCompatActivity\"));\n+                    return false;\n+                }\n+            }\n+        } catch (Exception e) {\n+            if (logErrorMessage) {\n+                String activityName = intent.getComponent() != null ? intent.getComponent().getShortClassName() : \"Unknown\";\n+                String errmsg = context.getString(R.string.error_failed_to_start_activity_for_result, activityName);\n+                Logger.logStackTraceWithMessage(LOG_TAG, errmsg, e);\n+                if (showErrorMessage)\n+                    Logger.showToast(context, errmsg + \": \" + e.getMessage(), true);\n+            }\n+            return false;\n+        }\n+\n+        return true;\n+    }\n+\n+}",
    "output": "Added: Add ActivityUtils with functions to start activities for result"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java b/termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java\n@@ -254,9 +254,9 @@ public static int getTargetSDKForPackage(@NonNull final ApplicationInfo applicat\n      * set.\n      *\n      * @param context The {@link Context} for the package.\n-     * @return Returns the {@code versionName}. This will be {@code null} if an exception is raised.\n+     * @return Returns {@code true} if app is debuggable, otherwise {@code false}.\n      */\n-    public static Boolean isAppForPackageADebuggableBuild(@NonNull final Context context) {\n+    public static boolean isAppForPackageADebuggableBuild(@NonNull final Context context) {\n         return isAppForPackageADebuggableBuild(context.getApplicationInfo());\n     }\n \n@@ -265,9 +265,9 @@ public static Boolean isAppForPackageADebuggableBuild(@NonNull final Context con\n      * set.\n      *\n      * @param applicationInfo The {@link ApplicationInfo} for the package.\n-     * @return Returns the {@code versionName}. This will be {@code null} if an exception is raised.\n+     * @return Returns {@code true} if app is debuggable, otherwise {@code false}.\n      */\n-    public static Boolean isAppForPackageADebuggableBuild(@NonNull final ApplicationInfo applicationInfo) {\n+    public static boolean isAppForPackageADebuggableBuild(@NonNull final ApplicationInfo applicationInfo) {\n         return ( 0 != ( applicationInfo.flags & ApplicationInfo.FLAG_DEBUGGABLE ) );\n     }\n \n@@ -278,9 +278,9 @@ public static Boolean isAppForPackageADebuggableBuild(@NonNull final Application\n      * set.\n      *\n      * @param context The {@link Context} for the package.\n-     * @return Returns the {@code versionName}. This will be {@code null} if an exception is raised.\n+     * @return Returns {@code true} if app is installed on external storage, otherwise {@code false}.\n      */\n-    public static Boolean isAppInstalledOnExternalStorage(@NonNull final Context context) {\n+    public static boolean isAppInstalledOnExternalStorage(@NonNull final Context context) {\n         return isAppInstalledOnExternalStorage(context.getApplicationInfo());\n     }\n \n@@ -289,9 +289,9 @@ public static Boolean isAppInstalledOnExternalStorage(@NonNull final Context con\n      * set.\n      *\n      * @param applicationInfo The {@link ApplicationInfo} for the package.\n-     * @return Returns the {@code versionName}. This will be {@code null} if an exception is raised.\n+     * @return Returns {@code true} if app is installed on external storage, otherwise {@code false}.\n      */\n-    public static Boolean isAppInstalledOnExternalStorage(@NonNull final ApplicationInfo applicationInfo) {\n+    public static boolean isAppInstalledOnExternalStorage(@NonNull final ApplicationInfo applicationInfo) {\n         return ( 0 != ( applicationInfo.flags & ApplicationInfo.FLAG_EXTERNAL_STORAGE ) );\n     }\n \n@@ -328,7 +328,7 @@ public static Integer getVersionCodeForPackage(@NonNull final Context context, @\n      */\n     @Nullable\n     public static Integer getVersionCodeForPackage(@Nullable final PackageInfo packageInfo) {\n-        return packageInfo != null? packageInfo.versionCode : null;\n+        return packageInfo != null ? packageInfo.versionCode : null;\n     }\n \n \n@@ -365,7 +365,7 @@ public static String getVersionNameForPackage(@NonNull final Context context, @N\n      */\n     @Nullable\n     public static String getVersionNameForPackage(@Nullable final PackageInfo packageInfo) {\n-        return packageInfo != null? packageInfo.versionName : null;\n+        return packageInfo != null ? packageInfo.versionName : null;\n     }\n \n ",
    "output": "Changed: Fix typos is PackageUtils"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/net/UrlUtils.java b/termux-shared/src/main/java/com/termux/shared/net/UrlUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/net/UrlUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/net/UrlUtils.java\n@@ -0,0 +1,113 @@\n+package com.termux.shared.net;\n+\n+import androidx.annotation.Nullable;\n+\n+import com.termux.shared.data.DataUtils;\n+import com.termux.shared.logger.Logger;\n+\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+\n+public class UrlUtils {\n+\n+    /** The parts of a {@link URL}. */\n+    public enum UrlPart {\n+        AUTHORITY,\n+        FILE,\n+        HOST,\n+        REF,\n+        FRAGMENT,\n+        PATH,\n+        PORT,\n+        PROTOCOL,\n+        QUERY,\n+        USER_INFO\n+    }\n+\n+    private static final String LOG_TAG = \"UrlUtils\";\n+\n+    /**\n+     * Join a url base and destination.\n+     *\n+     * @param base The base url to open.\n+     * @param destination The destination url to open.\n+     * @param logError If an error message should be logged.\n+     * @return Returns the joined {@link String} Url, otherwise {@code null}.\n+     */\n+    @Nullable\n+    public static String joinUrl(final String base, String destination, boolean logError) {\n+        if (DataUtils.isNullOrEmpty(base)) return null;\n+        try {\n+            return new URL(new URL(base), destination).toString();\n+        } catch (MalformedURLException e) {\n+            if (logError)\n+                Logger.logError(LOG_TAG, \"Failed to join url base \\\"\" + base + \"\\\" and destination \\\"\" + destination + \"\\\": \" + e.getMessage());\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Get {@link URL} from url string.\n+     *\n+     * @param urlString The urlString string.\n+     * @return Returns the {@link URL} if a valid urlString, otherwise {@code null}.\n+     */\n+    @Nullable\n+    public static URL getUrl(String urlString) {\n+        if (DataUtils.isNullOrEmpty(urlString)) return null;\n+        try {\n+            return new URL(urlString);\n+        } catch (MalformedURLException e) {\n+            return null;\n+        }\n+    }\n+\n+    /**\n+     * Get a {@link URL} part from url string.\n+     *\n+     * @param urlString The urlString string.\n+     * @param urlPart The part to get.\n+     * @return Returns the {@link URL} part if a valid urlString and part, otherwise {@code null}.\n+     */\n+    @Nullable\n+    public static String getUrlPart(String urlString, UrlPart urlPart) {\n+        URL url = getUrl(urlString);\n+        if (url == null) return null;\n+        switch (urlPart) {\n+            case AUTHORITY:\n+                return url.getAuthority();\n+            case FILE:\n+                return url.getFile();\n+            case HOST:\n+                return url.getHost();\n+            case REF:\n+            case FRAGMENT:\n+                return url.getRef();\n+            case PATH:\n+                return url.getPath();\n+            case PORT:\n+                return String.valueOf(url.getPort());\n+            case PROTOCOL:\n+                return url.getProtocol();\n+            case QUERY:\n+                return url.getQuery();\n+            case USER_INFO:\n+                return url.getUserInfo();\n+            default:\n+                return null;\n+        }\n+    }\n+\n+    /** Remove \"https://www.\", \"https://\", \"www.\", etc */\n+    public static String removeProtocol(String urlString) {\n+        if (urlString == null) return null;\n+        return urlString.replaceFirst(\"^(http[s]?://www\\\\.|http[s]?://|www\\\\.)\",\"\");\n+    }\n+\n+    public static boolean areUrlsEqual(String url1, String url2) {\n+        if (url1 == null && url2 == null) return true;\n+        if (url1 == null || url2 == null) return false;\n+        return UrlUtils.removeProtocol(url1).replaceAll(\"/+$\", \"\").equals(UrlUtils.removeProtocol(url2).replaceAll(\"/+$\", \"\"));\n+    }\n+\n+}",
    "output": "Added: Add UrlUtils"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java b/termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java\n@@ -8,6 +8,7 @@\n import android.content.pm.ApplicationInfo;\n import android.content.pm.PackageInfo;\n import android.content.pm.PackageManager;\n+import android.os.UserHandle;\n import android.os.UserManager;\n \n import androidx.annotation.NonNull;\n@@ -409,16 +410,16 @@ public static String getSigningCertificateSHA256DigestForPackage(@NonNull final\n \n \n     /**\n-     * Get the serial number for the current user.\n+     * Get the serial number for the user for the package associated with the {@code context}.\n      *\n-     * @param context The {@link Context} for operations.\n+     * @param context The {@link Context} for the package.\n      * @return Returns the serial number. This will be {@code null} if failed to get it.\n      */\n     @Nullable\n-    public static Long getSerialNumberForCurrentUser(@NonNull Context context) {\n+    public static Long getUserIdForPackage(@NonNull Context context) {\n         UserManager userManager = (UserManager) context.getSystemService(Context.USER_SERVICE);\n         if (userManager == null) return null;\n-        return userManager.getSerialNumberForUser(android.os.Process.myUserHandle());\n+        return userManager.getSerialNumberForUser(UserHandle.getUserHandleForUid(getUidForPackage(context)));\n     }\n \n     /**\n@@ -429,7 +430,7 @@ public static Long getSerialNumberForCurrentUser(@NonNull Context context) {\n      * @return Returns {@code true} if the current user is the primary user, otherwise [@code false}.\n      */\n     public static boolean isCurrentUserThePrimaryUser(@NonNull Context context) {\n-        Long userId = getSerialNumberForCurrentUser(context);\n+        Long userId = getUserIdForPackage(context);\n         return userId != null && userId == 0;\n     }\n \n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/AndroidUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/AndroidUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/AndroidUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/AndroidUtils.java\n@@ -49,7 +49,7 @@ public static String getAppInfoMarkdownString(@NonNull final Context context) {\n             !filesDir.equals(\"/data/data/\" + context.getPackageName() + \"/files\"))\n             AndroidUtils.appendPropertyToMarkdown(markdownString,\"FILES_DIR\", filesDir);\n \n-        Long userId = PackageUtils.getSerialNumberForCurrentUser(context);\n+        Long userId = PackageUtils.getUserIdForPackage(context);\n         if (userId == null || userId != 0)\n             AndroidUtils.appendPropertyToMarkdown(markdownString,\"USER_ID\", userId);\n ",
    "output": "Changed: Get user handle for package instead of process user handle when getting profile user serial number"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java b/termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java\n@@ -316,11 +316,18 @@ public static Integer getVersionCodeForPackage(@NonNull final Context context) {\n      */\n     @Nullable\n     public static Integer getVersionCodeForPackage(@NonNull final Context context, @NonNull final String packageName) {\n-        try {\n-            return getPackageInfoForPackage(context, packageName).versionCode;\n-        } catch (final Exception e) {\n-            return null;\n-        }\n+        return getVersionCodeForPackage(getPackageInfoForPackage(context, packageName));\n+    }\n+\n+    /**\n+     * Get the {@code versionCode} for the {@code packageName}.\n+     *\n+     * @param packageInfo The {@link PackageInfo} for the package.\n+     * @return Returns the {@code versionCode}. This will be {@code null} if an exception is raised.\n+     */\n+    @Nullable\n+    public static Integer getVersionCodeForPackage(@Nullable final PackageInfo packageInfo) {\n+        return packageInfo != null? packageInfo.versionCode : null;\n     }\n \n \n@@ -335,6 +342,7 @@ public static Integer getVersionCodeForPackage(@NonNull final Context context, @\n     public static String getVersionNameForPackage(@NonNull final Context context) {\n         return getVersionNameForPackage(context, context.getPackageName());\n     }\n+\n     /**\n      * Get the {@code versionName} for the {@code packageName}.\n      *\n@@ -344,11 +352,19 @@ public static String getVersionNameForPackage(@NonNull final Context context) {\n      */\n     @Nullable\n     public static String getVersionNameForPackage(@NonNull final Context context, @NonNull final String packageName) {\n-        try {\n-            return getPackageInfoForPackage(context, packageName).versionName;\n-        } catch (final Exception e) {\n-            return null;\n-        }\n+        return getVersionNameForPackage(getPackageInfoForPackage(context, packageName));\n+    }\n+\n+    /**\n+     * Get the {@code versionName} for the {@code packageName}.\n+     *\n+     * @param packageInfo The {@link PackageInfo} for the package.\n+     * @return Returns the {@code versionName}. This will be {@code null} if an {@code packageInfo}\n+     * is {@code null}.\n+     */\n+    @Nullable\n+    public static String getVersionNameForPackage(@Nullable final PackageInfo packageInfo) {\n+        return packageInfo != null? packageInfo.versionName : null;\n     }\n \n \n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/AndroidUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/AndroidUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/AndroidUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/AndroidUtils.java\n@@ -3,6 +3,7 @@\n import android.annotation.SuppressLint;\n import android.content.Context;\n import android.content.pm.ApplicationInfo;\n+import android.content.pm.PackageInfo;\n import android.os.Build;\n \n import androidx.annotation.NonNull;\n@@ -65,15 +66,17 @@ public static String getAppInfoMarkdownString(@NonNull final Context context) {\n      * @return Returns the markdown {@link String}.\n      */\n     public static String getAppInfoMarkdownString(@NonNull final Context context, @NonNull final String packageName) {\n+        PackageInfo packageInfo = PackageUtils.getPackageInfoForPackage(context, packageName);\n+        if (packageInfo == null) return null;\n         ApplicationInfo applicationInfo = PackageUtils.getApplicationInfoForPackage(context, packageName);\n         if (applicationInfo == null) return null;\n \n         StringBuilder markdownString = new StringBuilder();\n \n         AndroidUtils.appendPropertyToMarkdown(markdownString,\"APP_NAME\", PackageUtils.getAppNameForPackage(context, applicationInfo));\n         AndroidUtils.appendPropertyToMarkdown(markdownString,\"PACKAGE_NAME\", PackageUtils.getPackageNameForPackage(applicationInfo));\n-        AndroidUtils.appendPropertyToMarkdown(markdownString,\"VERSION_NAME\", PackageUtils.getVersionNameForPackage(context, packageName));\n-        AndroidUtils.appendPropertyToMarkdown(markdownString,\"VERSION_CODE\", PackageUtils.getVersionCodeForPackage(context, packageName));\n+        AndroidUtils.appendPropertyToMarkdown(markdownString,\"VERSION_NAME\", PackageUtils.getVersionNameForPackage(packageInfo));\n+        AndroidUtils.appendPropertyToMarkdown(markdownString,\"VERSION_CODE\", PackageUtils.getVersionCodeForPackage(packageInfo));\n         AndroidUtils.appendPropertyToMarkdown(markdownString,\"UID\", PackageUtils.getUidForPackage(applicationInfo));\n         AndroidUtils.appendPropertyToMarkdown(markdownString,\"TARGET_SDK\", PackageUtils.getTargetSDKForPackage(applicationInfo));\n         AndroidUtils.appendPropertyToMarkdown(markdownString,\"IS_DEBUGGABLE_BUILD\", PackageUtils.isAppForPackageADebuggableBuild(applicationInfo));",
    "output": "Changed: Use cached PackageInfo while getting version code and name for app"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java b/termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java\n@@ -204,6 +204,28 @@ public static String getPackageNameForPackage(@NonNull final ApplicationInfo app\n \n \n \n+    /**\n+     * Get the uid for the package associated with the {@code context}.\n+     *\n+     * @param context The {@link Context} for the package.\n+     * @return Returns the uid.\n+     */\n+    public static int getUidForPackage(@NonNull final Context context) {\n+        return getUidForPackage(context.getApplicationInfo());\n+    }\n+\n+    /**\n+     * Get the uid for the package associated with the {@code applicationInfo}.\n+     *\n+     * @param applicationInfo The {@link ApplicationInfo} for the package.\n+     * @return Returns the uid.\n+     */\n+    public static int getUidForPackage(@NonNull final ApplicationInfo applicationInfo) {\n+        return applicationInfo.uid;\n+    }\n+\n+\n+\n     /**\n      * Get the {@code targetSdkVersion} for the package associated with the {@code context}.\n      *\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/AndroidUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/AndroidUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/AndroidUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/AndroidUtils.java\n@@ -74,6 +74,7 @@ public static String getAppInfoMarkdownString(@NonNull final Context context, @N\n         AndroidUtils.appendPropertyToMarkdown(markdownString,\"PACKAGE_NAME\", PackageUtils.getPackageNameForPackage(applicationInfo));\n         AndroidUtils.appendPropertyToMarkdown(markdownString,\"VERSION_NAME\", PackageUtils.getVersionNameForPackage(context, packageName));\n         AndroidUtils.appendPropertyToMarkdown(markdownString,\"VERSION_CODE\", PackageUtils.getVersionCodeForPackage(context, packageName));\n+        AndroidUtils.appendPropertyToMarkdown(markdownString,\"UID\", PackageUtils.getUidForPackage(applicationInfo));\n         AndroidUtils.appendPropertyToMarkdown(markdownString,\"TARGET_SDK\", PackageUtils.getTargetSDKForPackage(applicationInfo));\n         AndroidUtils.appendPropertyToMarkdown(markdownString,\"IS_DEBUGGABLE_BUILD\", PackageUtils.isAppForPackageADebuggableBuild(applicationInfo));\n ",
    "output": "Added: Add uid to app info"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n@@ -2,13 +2,11 @@\n \n import android.annotation.SuppressLint;\n import android.app.AlertDialog;\n-import android.content.ActivityNotFoundException;\n import android.content.ClipData;\n import android.content.ClipboardManager;\n import android.content.Context;\n import android.content.Intent;\n import android.media.AudioManager;\n-import android.net.Uri;\n import android.os.Environment;\n import android.text.TextUtils;\n import android.view.Gravity;\n@@ -22,7 +20,6 @@\n \n import com.termux.R;\n import com.termux.app.TermuxActivity;\n-import com.termux.shared.data.UrlUtils;\n import com.termux.shared.file.FileUtils;\n import com.termux.shared.interact.MessageDialogUtils;\n import com.termux.shared.interact.ShareUtils;\n@@ -40,10 +37,10 @@\n import com.termux.shared.logger.Logger;\n import com.termux.shared.markdown.MarkdownUtils;\n import com.termux.shared.termux.TermuxUtils;\n+import com.termux.shared.termux.data.TermuxUrlUtils;\n import com.termux.shared.view.KeyboardUtils;\n import com.termux.shared.view.ViewUtils;\n import com.termux.terminal.KeyHandler;\n-import com.termux.terminal.TerminalBuffer;\n import com.termux.terminal.TerminalEmulator;\n import com.termux.terminal.TerminalSession;\n \n@@ -179,7 +176,7 @@ public void onSingleTapUp(MotionEvent e) {\n         if (mActivity.getProperties().shouldOpenTerminalTranscriptURLOnClick()) {\n             int[] columnAndRow = mActivity.getTerminalView().getColumnAndRow(e, true);\n             String wordAtTap = term.getScreen().getWordAtLocation(columnAndRow[0], columnAndRow[1]);\n-            LinkedHashSet<CharSequence> urlSet = UrlUtils.extractUrls(wordAtTap);\n+            LinkedHashSet<CharSequence> urlSet = TermuxUrlUtils.extractUrls(wordAtTap);\n \n             if (!urlSet.isEmpty()) {\n                 String url = (String) urlSet.iterator().next();\n@@ -665,7 +662,7 @@ public void showUrlSelection() {\n \n         String text = ShellUtils.getTerminalSessionTranscriptText(session, true, true);\n \n-        LinkedHashSet<CharSequence> urlSet = UrlUtils.extractUrls(text);\n+        LinkedHashSet<CharSequence> urlSet = TermuxUrlUtils.extractUrls(text);\n         if (urlSet.isEmpty()) {\n             new AlertDialog.Builder(mActivity).setMessage(R.string.title_select_url_none_found).show();\n             return;\n\ndiff --git a/app/src/test/java/com/termux/app/TermuxActivityTest.java b/app/src/test/java/com/termux/app/TermuxActivityTest.java\n--- a/app/src/test/java/com/termux/app/TermuxActivityTest.java\n+++ b/app/src/test/java/com/termux/app/TermuxActivityTest.java\n@@ -1,6 +1,6 @@\n package com.termux.app;\n \n-import com.termux.shared.data.UrlUtils;\n+import com.termux.shared.termux.data.TermuxUrlUtils;\n \n import org.junit.Assert;\n import org.junit.Test;\n@@ -13,7 +13,7 @@ public class TermuxActivityTest {\n     private void assertUrlsAre(String text, String... urls) {\n         LinkedHashSet<String> expected = new LinkedHashSet<>();\n         Collections.addAll(expected, urls);\n-        Assert.assertEquals(expected, UrlUtils.extractUrls(text));\n+        Assert.assertEquals(expected, TermuxUrlUtils.extractUrls(text));\n     }\n \n     @Test\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/data/TermuxUrlUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/data/TermuxUrlUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/data/TermuxUrlUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/data/TermuxUrlUtils.java\n@@ -1,10 +1,10 @@\n-package com.termux.shared.data;\n+package com.termux.shared.termux.data;\n \n import java.util.LinkedHashSet;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n-public class UrlUtils {\n+public class TermuxUrlUtils {\n \n     public static Pattern URL_MATCH_REGEX;\n ",
    "output": "Changed: Move UrlUtils to TermuxUrlUtils"
  },
  {
    "input": "diff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n@@ -935,10 +935,17 @@ private void doDeviceControl(int b) {\n                     for (String part : dcs.substring(2).split(\";\")) {\n                         if (part.length() % 2 == 0) {\n                             StringBuilder transBuffer = new StringBuilder();\n+                            char c;\n                             for (int i = 0; i < part.length(); i += 2) {\n-                                char c = (char) Long.decode(\"0x\" + part.charAt(i) + \"\" + part.charAt(i + 1)).longValue();\n+                                try {\n+                                    c = (char) Long.decode(\"0x\" + part.charAt(i) + \"\" + part.charAt(i + 1)).longValue();\n+                                } catch (NumberFormatException e) {\n+                                    Logger.logStackTraceWithMessage(mClient, LOG_TAG, \"Invalid device termcap/terminfo encoded name \\\"\" + part + \"\\\"\", e);\n+                                    continue;\n+                                }\n                                 transBuffer.append(c);\n                             }\n+\n                             String trans = transBuffer.toString();\n                             String responseValue;\n                             switch (trans) {",
    "output": "Fixed: Log exception instead of crashing app on NumberFormatException for invalid termcap/terminfo string requested\n\njava.lang.NumberFormatException: For input string: \" a\"\nat java.lang.Long.parseLong(Long.java:583)\nat java.lang.Long.valueOf(Long.java:781)\nat java.lang.Long.decode(Long.java:933)\nat com.termux.terminal.TerminalEmulator.doDeviceControl(TerminalEmulator.java:940)\nat com.termux.terminal.TerminalEmulator.processCodePoint(TerminalEmulator.java:813)"
  },
  {
    "input": "diff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n@@ -796,7 +796,6 @@ public void processCodePoint(int b) {\n                             int columnsToDelete = Math.min(getArg0(1), columnsAfterCursor);\n                             int columnsToMove = columnsAfterCursor - columnsToDelete;\n                             mScreen.blockCopy(mCursorCol + columnsToDelete, 0, columnsToMove, mRows, mCursorCol, 0);\n-                            blockClear(mCursorRow + columnsToMove, 0, columnsToDelete, mRows);\n                         } else {\n                             unknownSequence(b);\n                         }",
    "output": "Fixed: Fix CSI Delete Ps Column(s) (DECDC)\n\nFirstly, `TerminalBuffer.blockSet()` was throwing the exception since `sx + w > mColumns` which was technically passed by TerminalEmulator.blockClear()`. Actual value would be `mCursorRow + columnsToMove + columnsToDelete > mColumns`.\n\nSecondly, the call to `blockClear()` should not be needed since it the `blockCopy()` would overwrite the columns to be deleted on copy.\n\nRun `printf \"\\e['~\"` to delete 1 column and `printf \"\\e[3'~\"` to delete 3 columns. Run `printf \"\\e[3'}\"` to insert 2 columns.\n\njava.lang.IllegalArgumentException: Illegal arguments! blockSet(78, 0, 1, 30, 32, 56, 30)\nat com.termux.terminal.TerminalBuffer.blockSet(TerminalBuffer.java:397)\nat com.termux.terminal.TerminalEmulator.blockClear(TerminalEmulator.java:2035)\nat com.termux.terminal.TerminalEmulator.processCodePoint(TerminalEmulator.java:799)"
  },
  {
    "input": "diff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalBuffer.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalBuffer.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalBuffer.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalBuffer.java\n@@ -93,8 +93,11 @@ public String getSelectedText(int selX1, int selY1, int selX2, int selY2, boolea\n                     if (c != ' ') lastPrintingCharIndex = i;\n                 }\n             }\n-            if (lastPrintingCharIndex != -1)\n-                builder.append(line, x1Index, lastPrintingCharIndex - x1Index + 1);\n+\n+            int len = lastPrintingCharIndex - x1Index + 1;\n+            if (lastPrintingCharIndex != -1 && len > 0)\n+                builder.append(line, x1Index, len);\n+\n             boolean lineFillsWidth = lastPrintingCharIndex == x2Index - 1;\n             if ((!joinBackLines || !rowLineWrap) && (!joinFullLines || !lineFillsWidth)\n                 && row < selY2 && row < mScreenRows - 1) builder.append('\\n');",
    "output": "Fixed: Fix ArrayIndexOutOfBoundsException thrown because length was less than 0 when selecting text from terminal buffer\n\njava.lang.ArrayIndexOutOfBoundsException: src.length=132 srcPos=90 dst.length=16 dstPos=0 length=-2\nat java.lang.System.arraycopy(System.java:469)\nat java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:597)\nat java.lang.StringBuilder.append(StringBuilder.java:191)\nat com.termux.terminal.TerminalBuffer.getSelectedText(TerminalBuffer.java:97)\nat com.termux.terminal.TerminalBuffer.getSelectedText(TerminalBuffer.java:57)\nat com.termux.terminal.TerminalBuffer.getSelectedText(TerminalBuffer.java:53)\nat com.termux.terminal.TerminalEmulator.getSelectedText(TerminalEmulator.java:2401)\nat com.termux.view.textselection.TextSelectionCursorController$1.onActionItemClicked(TextSelectionCursorController.java:140)"
  },
  {
    "input": "diff --git a/terminal-view/src/main/java/com/termux/view/textselection/TextSelectionCursorController.java b/terminal-view/src/main/java/com/termux/view/textselection/TextSelectionCursorController.java\n--- a/terminal-view/src/main/java/com/termux/view/textselection/TextSelectionCursorController.java\n+++ b/terminal-view/src/main/java/com/termux/view/textselection/TextSelectionCursorController.java\n@@ -183,14 +183,19 @@ public void onGetContentRect(ActionMode mode, View view, Rect outRect) {\n                 int y1 = Math.round((mSelY1 - 1 - terminalView.getTopRow()) * terminalView.mRenderer.getFontLineSpacing());\n                 int y2 = Math.round((mSelY2 + 1 - terminalView.getTopRow()) * terminalView.mRenderer.getFontLineSpacing());\n \n-\n                 if (x1 > x2) {\n                     int tmp = x1;\n                     x1 = x2;\n                     x2 = tmp;\n                 }\n \n-                outRect.set(x1, y1 + mHandleHeight, x2, y2 + mHandleHeight);\n+                int terminalBottom = terminalView.getBottom();\n+                int top = y1 + mHandleHeight;\n+                int bottom = y2 + mHandleHeight;\n+                if (top > terminalBottom) top = terminalBottom;\n+                if (bottom > terminalBottom) bottom = terminalBottom;\n+\n+                outRect.set(x1, top, x2, bottom);\n             }\n         }, ActionMode.TYPE_FLOATING);\n     }",
    "output": "Fixed: Fix issue where menu wouldn't show when text on bottom row of terminal was selected\n\nCloses #2233"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxInstaller.java b/app/src/main/java/com/termux/app/TermuxInstaller.java\n--- a/app/src/main/java/com/termux/app/TermuxInstaller.java\n+++ b/app/src/main/java/com/termux/app/TermuxInstaller.java\n@@ -252,14 +252,19 @@ public static void showBootstrapErrorDialog(Activity activity, Runnable whenDone\n     }\n \n     private static void sendBootstrapCrashReportNotification(Activity activity, String message) {\n+        final String title = TermuxConstants.TERMUX_APP_NAME + \" Bootstrap Error\";\n+\n+        // Add info of all install Termux plugin apps as well since their target sdk or installation\n+        // on external/portable sd card can affect Termux app files directory access or exec.\n         CrashUtils.sendCrashReportNotification(activity, LOG_TAG,\n-            \"## Bootstrap Error\\n\\n\" + message + \"\\n\\n\" +\n+            title, null, \"## \" + title + \"\\n\\n\" + message + \"\\n\\n\" +\n                 TermuxUtils.getTermuxDebugMarkdownString(activity),\n-            true, true);\n+            true, false, TermuxUtils.AppInfoMode.TERMUX_AND_PLUGIN_PACKAGES, true);\n     }\n \n     static void setupStorageSymlinks(final Context context) {\n         final String LOG_TAG = \"termux-storage\";\n+        final String title = TermuxConstants.TERMUX_APP_NAME + \" Setup Storage Error\";\n \n         Logger.logInfo(LOG_TAG, \"Setting up storage symlinks.\");\n \n@@ -273,7 +278,9 @@ public void run() {\n                     if (error != null) {\n                         Logger.logErrorAndShowToast(context, LOG_TAG, error.getMessage());\n                         Logger.logErrorExtended(LOG_TAG, \"Setup Storage Error\\n\" + error.toString());\n-                        CrashUtils.sendCrashReportNotification(context, LOG_TAG, \"## Setup Storage Error\\n\\n\" + Error.getErrorMarkdownString(error), true, true);\n+                        CrashUtils.sendCrashReportNotification(context, LOG_TAG, title, null,\n+                            \"## \" + title + \"\\n\\n\" + Error.getErrorMarkdownString(error),\n+                            true, false, TermuxUtils.AppInfoMode.TERMUX_PACKAGE, true);\n                         return;\n                     }\n \n@@ -312,7 +319,9 @@ public void run() {\n                 } catch (Exception e) {\n                     Logger.logErrorAndShowToast(context, LOG_TAG, e.getMessage());\n                     Logger.logStackTraceWithMessage(LOG_TAG, \"Setup Storage Error: Error setting up link\", e);\n-                    CrashUtils.sendCrashReportNotification(context, LOG_TAG, \"## Setup Storage Error\\n\\n\" + Logger.getStackTracesMarkdownString(null, Logger.getStackTracesStringArray(e)), true, true);\n+                    CrashUtils.sendCrashReportNotification(context, LOG_TAG, title, null,\n+                        \"## \" + title + \"\\n\\n\" + Logger.getStackTracesMarkdownString(null, Logger.getStackTracesStringArray(e)),\n+                        true, false, TermuxUtils.AppInfoMode.TERMUX_PACKAGE, true);\n                 }\n             }\n         }.start();\n\ndiff --git a/app/src/main/java/com/termux/app/utils/CrashUtils.java b/app/src/main/java/com/termux/app/utils/CrashUtils.java\n--- a/app/src/main/java/com/termux/app/utils/CrashUtils.java\n+++ b/app/src/main/java/com/termux/app/utils/CrashUtils.java\n@@ -10,6 +10,7 @@\n \n import com.termux.R;\n import com.termux.shared.activities.ReportActivity;\n+import com.termux.shared.markdown.MarkdownUtils;\n import com.termux.shared.models.errors.Error;\n import com.termux.shared.notification.NotificationUtils;\n import com.termux.shared.file.FileUtils;\n@@ -87,7 +88,7 @@ public void run() {\n \n                 Logger.logDebug(logTag, \"A crash log file found at \\\"\" + TermuxConstants.TERMUX_CRASH_LOG_FILE_PATH +  \"\\\".\");\n \n-                sendCrashReportNotification(context, logTag, reportString, false, false);\n+                sendCrashReportNotification(context, logTag, null, null, reportString, false, false, null, false);\n             }\n         }.start();\n     }\n@@ -98,15 +99,25 @@ public void run() {\n      *\n      * @param context The {@link Context} for operations.\n      * @param logTag The log tag to use for logging.\n+     * @param title The title for the crash report and notification.\n+     * @param notificationTextString The text of the notification.\n      * @param message The message for the crash report.\n      * @param forceNotification If set to {@code true}, then a notification will be shown\n      *                          regardless of if pending intent is {@code null} or\n      *                          {@link TermuxPreferenceConstants.TERMUX_APP#KEY_CRASH_REPORT_NOTIFICATIONS_ENABLED}\n      *                          is {@code false}.\n-     * @param addAppAndDeviceInfo If set to {@code true}, then app and device info will be appended\n-     *                            to the message.\n+     * @param showToast If set to {@code true}, then a toast will be shown for {@code notificationTextString}.\n+     * @param appInfoMode The {@link TermuxUtils.AppInfoMode} to use to add app info to the message.\n+     *                    Set to {@code null} if app info should not be appended to the message.\n+     * @param addDeviceInfo If set to {@code true}, then device info should be appended to the message.\n      */\n-    public static void sendCrashReportNotification(final Context context, String logTag, String message, boolean forceNotification, boolean addAppAndDeviceInfo) {\n+    public static void sendCrashReportNotification(final Context context, String logTag,\n+                                                   CharSequence title,\n+                                                   String notificationTextString,\n+                                                   String message, boolean forceNotification,\n+                                                   boolean showToast,\n+                                                   TermuxUtils.AppInfoMode appInfoMode,\n+                                                   boolean addDeviceInfo) {\n         if (context == null) return;\n \n         TermuxAppSharedPreferences preferences = TermuxAppSharedPreferences.build(context);\n@@ -118,22 +129,27 @@ public static void sendCrashReportNotification(final Context context, String log\n \n         logTag = DataUtils.getDefaultIfNull(logTag, LOG_TAG);\n \n+        if (showToast)\n+            Logger.showToast(context, notificationTextString, true);\n+\n         // Send a notification to show the crash log which when clicked will open the {@link ReportActivity}\n         // to show the details of the crash\n-        String title = TermuxConstants.TERMUX_APP_NAME + \" Crash Report\";\n+        if (title == null || title.toString().isEmpty())\n+            title = TermuxConstants.TERMUX_APP_NAME + \" Crash Report\";\n \n         Logger.logDebug(logTag, \"Sending \\\"\" + title + \"\\\" notification.\");\n \n         StringBuilder reportString = new StringBuilder(message);\n \n-        if (addAppAndDeviceInfo) {\n-            reportString.append(\"\\n\\n\").append(TermuxUtils.getAppInfoMarkdownString(context, true));\n+        if (appInfoMode != null)\n+            reportString.append(\"\\n\\n\").append(TermuxUtils.getAppInfoMarkdownString(context, appInfoMode));\n+\n+        if (addDeviceInfo)\n             reportString.append(\"\\n\\n\").append(AndroidUtils.getDeviceInfoMarkdownString(context));\n-        }\n \n         String userActionName = UserAction.CRASH_REPORT.getName();\n         ReportActivity.NewInstanceResult result = ReportActivity.newInstance(context, new ReportInfo(userActionName,\n-            logTag, title, null, reportString.toString(),\n+            logTag, title.toString(), null, reportString.toString(),\n             \"\\n\\n\" + TermuxUtils.getReportIssueMarkdownString(context), true,\n             userActionName,\n             Environment.getExternalStorageDirectory() + \"/\" +\n@@ -152,9 +168,14 @@ public static void sendCrashReportNotification(final Context context, String log\n         // Setup the notification channel if not already set up\n         setupCrashReportsNotificationChannel(context);\n \n+        // Use markdown in notification\n+        CharSequence notificationTextCharSequence = MarkdownUtils.getSpannedMarkdownText(context, notificationTextString);\n+        //CharSequence notificationTextCharSequence = notificationTextString;\n+\n         // Build the notification\n-        Notification.Builder builder = getCrashReportsNotificationBuilder(context, title, null,\n-            null, contentIntent, deleteIntent, NotificationUtils.NOTIFICATION_MODE_VIBRATE);\n+        Notification.Builder builder = getCrashReportsNotificationBuilder(context, title,\n+            notificationTextCharSequence, notificationTextCharSequence, contentIntent, deleteIntent,\n+            NotificationUtils.NOTIFICATION_MODE_VIBRATE);\n         if (builder == null) return;\n \n         // Send the notification",
    "output": "Added: Add info of all Termux plugins in bootstrap error reports and refactor notification functions\n\nNow in case of bootstrap failure, the app info of all installed termux plugin apps will be added as well, including whether they are installed on external/portable sd card. Apparently, as per reports, installing termux app or even plugin apps on external/portable sd cards prevents termux apps from accessing its files directory `/data/data/com.termux/file` and bootstrap checks fail. This commit should provide more info or proof of it.\n\nMoreover, adding plugin info would be useful in future for diagnosing targetsdk mismatch between Termux and its plugins when sdk `30` is targeted by Termux app."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/utils/PluginUtils.java b/app/src/main/java/com/termux/app/utils/PluginUtils.java\n--- a/app/src/main/java/com/termux/app/utils/PluginUtils.java\n+++ b/app/src/main/java/com/termux/app/utils/PluginUtils.java\n@@ -18,6 +18,7 @@\n import com.termux.shared.models.errors.Error;\n import com.termux.shared.notification.NotificationUtils;\n import com.termux.shared.notification.TermuxNotificationUtils;\n+import com.termux.shared.settings.preferences.TermuxPreferenceConstants;\n import com.termux.shared.shell.ResultSender;\n import com.termux.shared.shell.ShellUtils;\n import com.termux.shared.termux.AndroidUtils;\n@@ -89,8 +90,12 @@ public static void processPluginExecutionCommandResult(final Context context, St\n                 Logger.logDebugExtended(logTag, ExecutionCommand.getExecutionOutputLogString(executionCommand, true, true, isExecutionCommandLoggingEnabled));\n \n                 // Flash and send notification for the error\n-                Logger.showToast(context, ResultData.getErrorsListMinimalString(resultData), true);\n-                sendPluginCommandErrorNotification(context, logTag, executionCommand, ResultData.getErrorsListMinimalString(resultData));\n+                sendPluginCommandErrorNotification(context, logTag, null,\n+                    ResultData.getErrorsListMinimalString(resultData),\n+                    ExecutionCommand.getExecutionCommandMarkdownString(executionCommand),\n+                    false, true, TermuxUtils.AppInfoMode.TERMUX_AND_CALLING_PACKAGE,\n+                    executionCommand.resultConfig.resultPendingIntent != null ? executionCommand.resultConfig.resultPendingIntent.getCreatorPackage(): null,\n+                    true);\n             }\n \n         }\n@@ -165,17 +170,13 @@ public static void processPluginExecutionCommandError(final Context context, Str\n             if (!forceNotification) return;\n         }\n \n-        TermuxAppSharedPreferences preferences = TermuxAppSharedPreferences.build(context);\n-        if (preferences == null) return;\n-\n-        // If user has disabled notifications for plugin commands, then just return\n-        if (!preferences.arePluginErrorNotificationsEnabled() && !forceNotification)\n-            return;\n-\n         // Flash and send notification for the error\n-        Logger.showToast(context, ResultData.getErrorsListMinimalString(resultData), true);\n-        sendPluginCommandErrorNotification(context, logTag, executionCommand, ResultData.getErrorsListMinimalString(resultData));\n-\n+        sendPluginCommandErrorNotification(context, logTag, null,\n+            ResultData.getErrorsListMinimalString(resultData),\n+            ExecutionCommand.getExecutionCommandMarkdownString(executionCommand),\n+            forceNotification, true, TermuxUtils.AppInfoMode.TERMUX_AND_CALLING_PACKAGE,\n+            executionCommand.resultConfig.resultPendingIntent != null ? executionCommand.resultConfig.resultPendingIntent.getCreatorPackage(): null,\n+            true);\n     }\n \n     /** Set variables which will be used by {@link ResultSender#sendCommandResultData(Context, String, String, ResultConfig, ResultData, boolean)}\n@@ -213,23 +214,60 @@ public static void setPluginResultDirectoryVariables(ExecutionCommand executionC\n      * and {@link TermuxConstants#TERMUX_PLUGIN_COMMAND_ERRORS_NOTIFICATION_CHANNEL_NAME}.\n      *\n      * @param context The {@link Context} for operations.\n-     * @param executionCommand The {@link ExecutionCommand} that failed.\n+     * @param title The title for the error report and notification.\n      * @param notificationTextString The text of the notification.\n+     * @param message The message for the error report.\n+     * @param forceNotification If set to {@code true}, then a notification will be shown\n+     *                          regardless of if pending intent is {@code null} or\n+     *                          {@link TermuxPreferenceConstants.TERMUX_APP#KEY_PLUGIN_ERROR_NOTIFICATIONS_ENABLED}\n+     *                          is {@code false}.\n+     * @param showToast If set to {@code true}, then a toast will be shown for {@code notificationTextString}.\n+     * @param appInfoMode The {@link TermuxUtils.AppInfoMode} to use to add app info to the message.\n+     *                    Set to {@code null} if app info should not be appended to the message.\n+     * @param callingPackageName The optional package name of the app for which the plugin command\n+     *                           was run.\n+     * @param addDeviceInfo If set to {@code true}, then device info should be appended to the message.\n      */\n-    public static void sendPluginCommandErrorNotification(Context context, String logTag, ExecutionCommand executionCommand, String notificationTextString) {\n+    public static void sendPluginCommandErrorNotification(Context context, String logTag,\n+                                                          CharSequence title,\n+                                                          String notificationTextString,\n+                                                          String message, boolean forceNotification,\n+                                                          boolean showToast,\n+                                                          TermuxUtils.AppInfoMode appInfoMode,\n+                                                          String callingPackageName,\n+                                                          boolean addDeviceInfo) {\n+        if (context == null) return;\n+\n+        TermuxAppSharedPreferences preferences = TermuxAppSharedPreferences.build(context);\n+        if (preferences == null) return;\n+\n+        // If user has disabled notifications for plugin commands, then just return\n+        if (!preferences.arePluginErrorNotificationsEnabled() && !forceNotification)\n+            return;\n+\n+        logTag = DataUtils.getDefaultIfNull(logTag, LOG_TAG);\n+\n+        if (showToast)\n+            Logger.showToast(context, notificationTextString, true);\n+\n         // Send a notification to show the error which when clicked will open the ReportActivity\n         // to show the details of the error\n-        String title = TermuxConstants.TERMUX_APP_NAME + \" Plugin Execution Command Error\";\n+        if (title == null || title.toString().isEmpty())\n+            title = TermuxConstants.TERMUX_APP_NAME + \" Plugin Execution Command Error\";\n+\n+        Logger.logDebug(logTag, \"Sending \\\"\" + title + \"\\\" notification.\");\n+\n+        StringBuilder reportString = new StringBuilder(message);\n \n-        StringBuilder reportString = new StringBuilder();\n+        if (appInfoMode != null)\n+            reportString.append(\"\\n\\n\").append(TermuxUtils.getAppInfoMarkdownString(context, appInfoMode, callingPackageName));\n \n-        reportString.append(ExecutionCommand.getExecutionCommandMarkdownString(executionCommand));\n-        reportString.append(\"\\n\\n\").append(TermuxUtils.getAppInfoMarkdownString(context, true));\n-        reportString.append(\"\\n\\n\").append(AndroidUtils.getDeviceInfoMarkdownString(context));\n+        if (addDeviceInfo)\n+            reportString.append(\"\\n\\n\").append(AndroidUtils.getDeviceInfoMarkdownString(context));\n \n         String userActionName = UserAction.PLUGIN_EXECUTION_COMMAND.getName();\n         ReportActivity.NewInstanceResult result = ReportActivity.newInstance(context,\n-            new ReportInfo(userActionName, logTag, title, null,\n+            new ReportInfo(userActionName, logTag, title.toString(), null,\n                 reportString.toString(), null,true,\n                 userActionName,\n                 Environment.getExternalStorageDirectory() + \"/\" +\n@@ -254,7 +292,8 @@ public static void sendPluginCommandErrorNotification(Context context, String lo\n \n         // Build the notification\n         Notification.Builder builder = getPluginCommandErrorsNotificationBuilder(context, title,\n-            notificationTextCharSequence, notificationTextCharSequence, contentIntent, deleteIntent, NotificationUtils.NOTIFICATION_MODE_VIBRATE);\n+            notificationTextCharSequence, notificationTextCharSequence, contentIntent, deleteIntent,\n+            NotificationUtils.NOTIFICATION_MODE_VIBRATE);\n         if (builder == null) return;\n \n         // Send the notification",
    "output": "Added: Add info of Termux API calling app in plugin command error reports and refactor notification functions\n\nNow when a Termux API command like `RUN_COMMAND` intent is called by an external app with PendingIntent, then the info of the app will be shown in error reports as well. This should provide more info about the caller which should be useful for debugging or in case a malicious app ran commands with `allow-external-app` disabled.\n\nMoreover, `PluginUtils.sendPluginCommandErrorNotification()` has been refactored to send generic messages instead of just for `ExecutionCommand`. This will allow usage with other Termux APIs as well."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n@@ -724,7 +724,12 @@ public void run() {\n                 reportString.append(\"\\n\").append(MarkdownUtils.getMarkdownCodeForString(transcriptText, true));\n                 reportString.append(\"\\n##\\n\");\n \n-                reportString.append(\"\\n\\n\").append(TermuxUtils.getAppInfoMarkdownString(mActivity, true));\n+                if (addTermuxDebugInfo) {\n+                    reportString.append(\"\\n\\n\").append(TermuxUtils.getAppInfoMarkdownString(mActivity, TermuxUtils.AppInfoMode.TERMUX_AND_PLUGIN_PACKAGES));\n+                } else {\n+                    reportString.append(\"\\n\\n\").append(TermuxUtils.getAppInfoMarkdownString(mActivity, TermuxUtils.AppInfoMode.TERMUX_PACKAGE));\n+                }\n+\n                 reportString.append(\"\\n\\n\").append(AndroidUtils.getDeviceInfoMarkdownString(mActivity));\n \n                 String termuxAptInfo = TermuxUtils.geAPTInfoMarkdownString(mActivity);",
    "output": "Added: Add info of installed plugin apps when report issue report is generated with debug mode enabled"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/activities/SettingsActivity.java b/app/src/main/java/com/termux/app/activities/SettingsActivity.java\n--- a/app/src/main/java/com/termux/app/activities/SettingsActivity.java\n+++ b/app/src/main/java/com/termux/app/activities/SettingsActivity.java\n@@ -112,12 +112,7 @@ public void run() {\n                             String title = \"About\";\n \n                             StringBuilder aboutString = new StringBuilder();\n-                            aboutString.append(TermuxUtils.getAppInfoMarkdownString(context, false));\n-\n-                            String termuxPluginAppsInfo =  TermuxUtils.getTermuxPluginAppsInfoMarkdownString(context);\n-                            if (termuxPluginAppsInfo != null)\n-                                aboutString.append(\"\\n\\n\").append(termuxPluginAppsInfo);\n-\n+                            aboutString.append(TermuxUtils.getAppInfoMarkdownString(context, TermuxUtils.AppInfoMode.TERMUX_AND_PLUGIN_PACKAGES));\n                             aboutString.append(\"\\n\\n\").append(AndroidUtils.getDeviceInfoMarkdownString(context));\n                             aboutString.append(\"\\n\\n\").append(TermuxUtils.getImportantLinksMarkdownString(context));\n \n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n@@ -8,8 +8,10 @@\n import android.content.pm.ResolveInfo;\n \n import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n \n import com.termux.shared.R;\n+import com.termux.shared.data.DataUtils;\n import com.termux.shared.file.FileUtils;\n import com.termux.shared.file.TermuxFileUtils;\n import com.termux.shared.logger.Logger;\n@@ -30,6 +32,18 @@\n \n public class TermuxUtils {\n \n+    /** The modes used by {@link #getAppInfoMarkdownString(Context, AppInfoMode, String)}. */\n+    public enum AppInfoMode {\n+        /** Get info for Termux app only. */\n+        TERMUX_PACKAGE,\n+        /** Get info for Termux app and its plugins listed in {@link TermuxConstants#TERMUX_PLUGIN_APP_PACKAGE_NAMES_LIST}. */\n+        TERMUX_AND_PLUGIN_PACKAGES,\n+        /* Get info for all the Termux app plugins listed in {@link TermuxConstants#TERMUX_PLUGIN_APP_PACKAGE_NAMES_LIST}. */\n+        TERMUX_PLUGIN_PACKAGES,\n+        /* Get info for Termux app and the calling package that called a Termux API. */\n+        TERMUX_AND_CALLING_PACKAGE,\n+    }\n+\n     private static final String LOG_TAG = \"TermuxUtils\";\n \n     /**\n@@ -157,7 +171,7 @@ public static String isTermuxAPIAppInstalled(@NonNull final Context context) {\n      *\n      * @param currentPackageContext The context of current package.\n      * @return Returns {@code errmsg} if failed to get termux package {@link Context} or\n-     *         {@link TermuxConstants#TERMUX_PREFIX_DIR_PATH} is accessible, otherwise {@code null}.\n+     * {@link TermuxConstants#TERMUX_PREFIX_DIR_PATH} is accessible, otherwise {@code null}.\n      */\n     public static String isTermuxAppAccessible(@NonNull final Context currentPackageContext) {\n         String errmsg = isTermuxAppInstalled(currentPackageContext);\n@@ -206,6 +220,82 @@ public static void sendTermuxOpenedBroadcast(@NonNull Context context) {\n         }\n     }\n \n+\n+\n+    /**\n+     * Wrapper for {@link #getAppInfoMarkdownString(Context, AppInfoMode, String)}.\n+     *\n+     * @param currentPackageContext The context of current package.\n+     * @param appInfoMode The {@link AppInfoMode} to decide the app info required.\n+     * @return Returns the markdown {@link String}.\n+     */\n+    public static String getAppInfoMarkdownString(final Context currentPackageContext, final AppInfoMode appInfoMode) {\n+        return getAppInfoMarkdownString(currentPackageContext, appInfoMode, null);\n+    }\n+\n+    /**\n+     * Get a markdown {@link String} for the apps info of termux app, its installed plugin apps or\n+     * external apps that called a Termux API depending on {@link AppInfoMode} passed.\n+     *\n+     * Also check {@link PackageUtils#isAppInstalled(Context, String, String) if targetting targeting\n+     * sdk `30` (android `11`) since {@link PackageManager.NameNotFoundException} may be thrown while\n+     * getting info of {@code callingPackageName} app.\n+     *\n+     * @param currentPackageContext The context of current package.\n+     * @param appInfoMode The {@link AppInfoMode} to decide the app info required.\n+     * @param callingPackageName The optional package name for a plugin or external app.\n+     * @return Returns the markdown {@link String}.\n+     */\n+    public static String getAppInfoMarkdownString(final Context currentPackageContext, final AppInfoMode appInfoMode, @Nullable String callingPackageName) {\n+        if (appInfoMode == null) return null;\n+\n+        StringBuilder appInfo = new StringBuilder();\n+        switch (appInfoMode) {\n+            case TERMUX_PACKAGE:\n+                return getAppInfoMarkdownString(currentPackageContext, false);\n+\n+            case TERMUX_AND_PLUGIN_PACKAGES:\n+                appInfo.append(TermuxUtils.getAppInfoMarkdownString(currentPackageContext, false));\n+\n+                String termuxPluginAppsInfo =  TermuxUtils.getTermuxPluginAppsInfoMarkdownString(currentPackageContext);\n+                if (termuxPluginAppsInfo != null)\n+                    appInfo.append(\"\\n\\n\").append(termuxPluginAppsInfo);\n+                return appInfo.toString();\n+\n+            case TERMUX_PLUGIN_PACKAGES:\n+                return TermuxUtils.getTermuxPluginAppsInfoMarkdownString(currentPackageContext);\n+\n+            case TERMUX_AND_CALLING_PACKAGE:\n+                appInfo.append(TermuxUtils.getAppInfoMarkdownString(currentPackageContext, false));\n+                if (!DataUtils.isNullOrEmpty(callingPackageName)) {\n+                    String callingPackageAppInfo;\n+                    if (TermuxConstants.TERMUX_PLUGIN_APP_PACKAGE_NAMES_LIST.contains(callingPackageName)) {\n+                        Context termuxPluginAppContext = PackageUtils.getContextForPackage(currentPackageContext, callingPackageName);\n+                        if (termuxPluginAppContext != null)\n+                            callingPackageAppInfo = getAppInfoMarkdownString(termuxPluginAppContext, false);\n+                        else\n+                            callingPackageAppInfo = AndroidUtils.getAppInfoMarkdownString(currentPackageContext, callingPackageName);\n+                    } else {\n+                        callingPackageAppInfo = AndroidUtils.getAppInfoMarkdownString(currentPackageContext, callingPackageName);\n+                    }\n+\n+                    if (callingPackageAppInfo != null) {\n+                        ApplicationInfo applicationInfo = PackageUtils.getApplicationInfoForPackage(currentPackageContext, callingPackageName);\n+                        if (applicationInfo != null) {\n+                            appInfo.append(\"\\n\\n## \").append(PackageUtils.getAppNameForPackage(currentPackageContext, applicationInfo)).append(\" App Info\\n\");\n+                            appInfo.append(callingPackageAppInfo);\n+                            appInfo.append(\"\\n##\\n\");\n+                        }\n+                    }\n+                }\n+                return appInfo.toString();\n+\n+            default:\n+                return null;\n+        }\n+\n+    }\n+\n     /**\n      * Get a markdown {@link String} for the apps info of all/any termux plugin apps installed.\n      *\n@@ -274,13 +364,14 @@ public static String getAppInfoMarkdownString(final Context currentPackageContex\n         else\n             markdownString.append(\"## \").append(currentAppName).append(\" App Info\\n\");\n         markdownString.append(getAppInfoMarkdownStringInner(currentPackageContext));\n+        markdownString.append(\"\\n##\\n\");\n \n         if (returnTermuxPackageInfoToo && termuxPackageContext != null && !isTermuxPackage) {\n             markdownString.append(\"\\n\\n## \").append(termuxAppName).append(\" App Info\\n\");\n             markdownString.append(getAppInfoMarkdownStringInner(termuxPackageContext));\n+            markdownString.append(\"\\n##\\n\");\n         }\n \n-        markdownString.append(\"\\n##\\n\");\n \n         return markdownString.toString();\n     }",
    "output": "Added: Add generic function TermuxUtils to get app info for termux app, its installed plugin apps and external apps"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/logger/Logger.java b/termux-shared/src/main/java/com/termux/shared/logger/Logger.java\n--- a/termux-shared/src/main/java/com/termux/shared/logger/Logger.java\n+++ b/termux-shared/src/main/java/com/termux/shared/logger/Logger.java\n@@ -7,6 +7,7 @@\n import android.widget.Toast;\n \n import com.termux.shared.R;\n+import com.termux.shared.data.DataUtils;\n import com.termux.shared.termux.TermuxConstants;\n \n import java.io.IOException;\n@@ -363,7 +364,7 @@ public static String getMultiLineLogStringEntry(String label, Object object, Str\n \n \n     public static void showToast(final Context context, final String toastText, boolean longDuration) {\n-        if (context == null) return;\n+        if (context == null || DataUtils.isNullOrEmpty(toastText)) return;\n \n         new Handler(Looper.getMainLooper()).post(() -> Toast.makeText(context, toastText, longDuration ? Toast.LENGTH_LONG : Toast.LENGTH_SHORT).show());\n     }",
    "output": "Changed: Do not show toast if text null or empty"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/markdown/MarkdownUtils.java b/termux-shared/src/main/java/com/termux/shared/markdown/MarkdownUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/markdown/MarkdownUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/markdown/MarkdownUtils.java\n@@ -191,9 +191,8 @@ public void configureSpansFactory(@NonNull MarkwonSpansFactory.Builder builder)\n     }\n \n     public static Spanned getSpannedMarkdownText(Context context, String string) {\n-\n+        if (context == null || string == null) return null;\n         final Markwon markwon = getSpannedMarkwonBuilder(context);\n-\n         return markwon.toMarkdown(string);\n     }\n ",
    "output": "Fixed: Fix NullPointerException when getting spanned markdown like for notification"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxSharedProperties.java b/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxSharedProperties.java\n--- a/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxSharedProperties.java\n+++ b/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxSharedProperties.java\n@@ -512,7 +512,7 @@ public static String getVolumeKeysBehaviourInternalPropertyValueFromValue(String\n \n \n     public boolean areHardwareKeyboardShortcutsDisabled() {\n-        return (boolean) getInternalPropertyValue(TermuxPropertyConstants.KEY_DISABLE_TERMINAL_SESSION_CHANGE_TOAST, true);\n+        return (boolean) getInternalPropertyValue(TermuxPropertyConstants.KEY_DISABLE_HARDWARE_KEYBOARD_SHORTCUTS, true);\n     }\n \n     public boolean areTerminalSessionChangeToastsDisabled() {",
    "output": "Fixed: Fix copy&paste error in areHardwareKeyboardShortcutsDisabled\n\nFixes 829cc3986831 (\"Allow users to disable hardware keyboard\nshortcuts\").\n\nReported-by: @amogusissofunnyhahalmaogenzhumorbelike"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/RunCommandService.java b/app/src/main/java/com/termux/app/RunCommandService.java\n--- a/app/src/main/java/com/termux/app/RunCommandService.java\n+++ b/app/src/main/java/com/termux/app/RunCommandService.java\n@@ -122,7 +122,7 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n         // user knows someone tried to run a command in termux context, since it may be malicious\n         // app or imported (tasker) plugin project and not the user himself. If a pending intent is\n         // also sent, then its creator is also logged and shown.\n-        errmsg = PluginUtils.checkIfRunCommandServiceAllowExternalAppsPolicyIsViolated(this);\n+        errmsg = PluginUtils.checkIfAllowExternalAppsPolicyIsViolated(this, LOG_TAG);\n         if (errmsg != null) {\n             executionCommand.setStateFailed(Errno.ERRNO_FAILED.getCode(), errmsg);\n             PluginUtils.processPluginExecutionCommandError(this, LOG_TAG, executionCommand, true);\n\ndiff --git a/app/src/main/java/com/termux/app/TermuxOpenReceiver.java b/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n--- a/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n+++ b/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n@@ -13,6 +13,7 @@\n import android.provider.MediaStore;\n import android.webkit.MimeTypeMap;\n \n+import com.termux.app.utils.PluginUtils;\n import com.termux.shared.data.IntentUtils;\n import com.termux.shared.logger.Logger;\n import com.termux.shared.termux.TermuxConstants;\n@@ -190,6 +191,12 @@ public ParcelFileDescriptor openFile(@NonNull Uri uri, @NonNull String mode) thr\n                     throw new IllegalArgumentException(\"Invalid path: \" + path);\n                 }\n \n+                // If \"allow-external-apps\" property to not set to \"true\", then throw exception\n+                String errmsg = PluginUtils.checkIfAllowExternalAppsPolicyIsViolated(getContext(), LOG_TAG);\n+                if (errmsg != null) {\n+                    throw new IllegalArgumentException(errmsg);\n+                }\n+\n                 // Do not allow apps with RUN_COMMAND permission to modify termux apps properties files,\n                 // including allow-external-apps\n                 if (TermuxConstants.TERMUX_PROPERTIES_PRIMARY_FILE_PATH.equals(path) ||\n\ndiff --git a/app/src/main/java/com/termux/app/utils/PluginUtils.java b/app/src/main/java/com/termux/app/utils/PluginUtils.java\n--- a/app/src/main/java/com/termux/app/utils/PluginUtils.java\n+++ b/app/src/main/java/com/termux/app/utils/PluginUtils.java\n@@ -321,10 +321,12 @@ public static void setupPluginCommandErrorsNotificationChannel(final Context con\n      * @param context The {@link Context} to get error string.\n      * @return Returns the {@code error} if policy is violated, otherwise {@code null}.\n      */\n-    public static String checkIfRunCommandServiceAllowExternalAppsPolicyIsViolated(final Context context) {\n+    public static String checkIfAllowExternalAppsPolicyIsViolated(final Context context, String apiName) {\n         String errmsg = null;\n-        if (!SharedProperties.isPropertyValueTrue(context, TermuxPropertyConstants.getTermuxPropertiesFile(), TermuxConstants.PROP_ALLOW_EXTERNAL_APPS, true)) {\n-            errmsg = context.getString(R.string.error_run_command_service_allow_external_apps_ungranted);\n+        if (!SharedProperties.isPropertyValueTrue(context, TermuxPropertyConstants.getTermuxPropertiesFile(),\n+            TermuxConstants.PROP_ALLOW_EXTERNAL_APPS, true)) {\n+            errmsg = context.getString(R.string.error_allow_external_apps_ungranted, apiName,\n+                TermuxFileUtils.getUnExpandedTermuxPath(TermuxConstants.TERMUX_PROPERTIES_PRIMARY_FILE_PATH));\n         }\n \n         return errmsg;",
    "output": "Changed: Only allow ContentProvider access if allow-external-apps is set to true"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxOpenReceiver.java b/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n--- a/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n+++ b/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n@@ -189,6 +189,16 @@ public ParcelFileDescriptor openFile(@NonNull Uri uri, @NonNull String mode) thr\n                 if (!(path.startsWith(TermuxConstants.TERMUX_FILES_DIR_PATH) || path.startsWith(storagePath))) {\n                     throw new IllegalArgumentException(\"Invalid path: \" + path);\n                 }\n+\n+                // Do not allow apps with RUN_COMMAND permission to modify termux apps properties files,\n+                // including allow-external-apps\n+                if (TermuxConstants.TERMUX_PROPERTIES_PRIMARY_FILE_PATH.equals(path) ||\n+                    TermuxConstants.TERMUX_PROPERTIES_SECONDARY_FILE_PATH.equals(path) ||\n+                    TermuxConstants.TERMUX_FLOAT_PROPERTIES_PRIMARY_FILE_PATH.equals(path) ||\n+                    TermuxConstants.TERMUX_FLOAT_PROPERTIES_SECONDARY_FILE_PATH.equals(path)) {\n+                    mode = \"r\";\n+                }\n+\n             } catch (IOException e) {\n                 throw new IllegalArgumentException(e);\n             }",
    "output": "Fixed: Do not allow external apps to modify termux properties files with ContentProvider"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/file/TermuxFileUtils.java b/termux-shared/src/main/java/com/termux/shared/file/TermuxFileUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/file/TermuxFileUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/file/TermuxFileUtils.java\n@@ -17,12 +17,31 @@\n import com.termux.shared.termux.TermuxUtils;\n \n import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.regex.Pattern;\n \n public class TermuxFileUtils {\n \n     private static final String LOG_TAG = \"TermuxFileUtils\";\n \n+    /**\n+     * Replace \"$PREFIX/\" or \"~/\" prefix with termux absolute paths.\n+     *\n+     * @param paths The {@code paths} to expand.\n+     * @return Returns the {@code expand paths}.\n+     */\n+    public static List<String> getExpandedTermuxPaths(List<String> paths) {\n+        if (paths == null) return null;\n+        List<String> expandedPaths = new ArrayList<>();\n+\n+        for (int i = 0; i < paths.size(); i++) {\n+            expandedPaths.add(getExpandedTermuxPath(paths.get(i)));\n+        }\n+\n+        return expandedPaths;\n+    }\n+\n     /**\n      * Replace \"$PREFIX/\" or \"~/\" prefix with termux absolute paths.\n      *\n@@ -40,6 +59,23 @@ public static String getExpandedTermuxPath(String path) {\n         return path;\n     }\n \n+    /**\n+     * Replace termux absolute paths with \"$PREFIX/\" or \"~/\" prefix.\n+     *\n+     * @param paths The {@code paths} to unexpand.\n+     * @return Returns the {@code unexpand paths}.\n+     */\n+    public static List<String> getUnExpandedTermuxPaths(List<String> paths) {\n+        if (paths == null) return null;\n+        List<String> unExpandedPaths = new ArrayList<>();\n+\n+        for (int i = 0; i < paths.size(); i++) {\n+            unExpandedPaths.add(getUnExpandedTermuxPath(paths.get(i)));\n+        }\n+\n+        return unExpandedPaths;\n+    }\n+\n     /**\n      * Replace termux absolute paths with \"$PREFIX/\" or \"~/\" prefix.\n      *",
    "output": "Added: Add TermuxFileUtils.getExpandedTermuxPaths() and TermuxFileUtils.getUnExpandedTermuxPaths()"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java b/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n@@ -34,6 +34,7 @@\n import java.nio.file.LinkOption;\n import java.nio.file.StandardCopyOption;\n import java.util.Calendar;\n+import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n import java.util.regex.Pattern;\n@@ -144,20 +145,42 @@ public static String sanitizeFileName(String fileName, boolean sanitizeWhitespac\n      * @return Returns {@code true} if path in {@code dirPath}, otherwise returns {@code false}.\n      */\n     public static boolean isPathInDirPath(String path, final String dirPath, final boolean ensureUnder) {\n-        if (path == null || dirPath == null) return false;\n+       return isPathInDirPaths(path, Collections.singletonList(dirPath), ensureUnder);\n+    }\n+\n+    /**\n+     * Determines whether path is in one of the {@code dirPaths}. The {@code dirPaths} are not\n+     * canonicalized and only normalized.\n+     *\n+     * @param path The {@code path} to check.\n+     * @param dirPaths The {@code directory paths} to check in.\n+     * @param ensureUnder If set to {@code true}, then it will be ensured that {@code path} is\n+     *                    under the directories and does not equal it.\n+     * @return Returns {@code true} if path in {@code dirPaths}, otherwise returns {@code false}.\n+     */\n+    public static boolean isPathInDirPaths(String path, final List<String> dirPaths, final boolean ensureUnder) {\n+        if (path == null || path.isEmpty() || dirPaths == null || dirPaths.size() < 1) return false;\n \n         try {\n             path = new File(path).getCanonicalPath();\n         } catch(Exception e) {\n             return false;\n         }\n \n-        String normalizedDirPath = normalizePath(dirPath);\n+        boolean isPathInDirPaths;\n \n-        if (ensureUnder)\n-            return !path.equals(normalizedDirPath) && path.startsWith(normalizedDirPath + \"/\");\n-        else\n-            return path.startsWith(normalizedDirPath + \"/\");\n+        for (String dirPath : dirPaths) {\n+            String normalizedDirPath = normalizePath(dirPath);\n+\n+            if (ensureUnder)\n+                isPathInDirPaths = !path.equals(normalizedDirPath) && path.startsWith(normalizedDirPath + \"/\");\n+            else\n+                isPathInDirPaths = path.startsWith(normalizedDirPath + \"/\");\n+\n+            if (isPathInDirPaths) return true;\n+        }\n+\n+        return false;\n     }\n \n ",
    "output": "Added: Add FileUtils.isPathInDirPaths()"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n@@ -12,7 +12,7 @@\n import java.util.List;\n \n /*\n- * Version: v0.31.0\n+ * Version: v0.32.0\n  *\n  * Changelog\n  *\n@@ -207,6 +207,10 @@\n  * - 0.31.0 (2021-09-09)\n  *      - Added following to `TERMUX_APP.TERMUX_SERVICE`:\n  *          `MIN_VALUE_EXTRA_SESSION_ACTION` and `MAX_VALUE_EXTRA_SESSION_ACTION`.\n+ *\n+ * - 0.32.0 (2021-09-23)\n+ *      - Added `TERMUX_API.TERMUX_API_ACTIVITY_NAME`, `TERMUX_TASKER.TERMUX_TASKER_ACTIVITY_NAME`\n+ *          and `TERMUX_WIDGET.TERMUX_WIDGET_ACTIVITY_NAME`.\n  */\n \n /**\n@@ -1123,6 +1127,20 @@ public static final class RESULT_SENDER {\n \n \n \n+    /**\n+     * Termux:API app constants.\n+     */\n+    public static final class TERMUX_API {\n+\n+        /** Termux:API app core activity name. */\n+        public static final String TERMUX_API_ACTIVITY_NAME = TERMUX_API_PACKAGE_NAME + \".activities.TermuxAPIActivity\"; // Default: \"com.termux.tasker.activities.TermuxAPIActivity\"\n+\n+    }\n+\n+\n+\n+\n+\n     /**\n      * Termux:Float app constants.\n      */\n@@ -1167,11 +1185,29 @@ public static final class TERMUX_STYLING {\n \n \n \n+    /**\n+     * Termux:Tasker app constants.\n+     */\n+    public static final class TERMUX_TASKER {\n+\n+        /** Termux:Tasker app core activity name. */\n+        public static final String TERMUX_TASKER_ACTIVITY_NAME = TERMUX_TASKER_PACKAGE_NAME + \".activities.TermuxTaskerActivity\"; // Default: \"com.termux.tasker.activities.TermuxTaskerActivity\"\n+\n+    }\n+\n+\n+\n+\n+\n     /**\n      * Termux:Widget app constants.\n      */\n     public static final class TERMUX_WIDGET {\n \n+        /** Termux:Widget app core activity name. */\n+        public static final String TERMUX_WIDGET_ACTIVITY_NAME = TERMUX_WIDGET_PACKAGE_NAME + \".activities.TermuxWidgetActivity\"; // Default: \"com.termux.widget.activities.TermuxWidgetActivity\"\n+\n+\n         /**  Intent {@code String} extra for the token of the Termux:Widget app shortcuts. */\n         public static final String EXTRA_TOKEN_NAME = TERMUX_PACKAGE_NAME + \".shortcut.token\"; // Default: \"com.termux.shortcut.token\"\n ",
    "output": "Added: Add constants for launcher activities of termux plugins"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java b/termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java\n@@ -4,6 +4,7 @@\n import android.app.admin.DevicePolicyManager;\n import android.content.ComponentName;\n import android.content.Context;\n+import android.content.Intent;\n import android.content.pm.ApplicationInfo;\n import android.content.pm.PackageInfo;\n import android.content.pm.PackageManager;\n@@ -249,6 +250,8 @@ public static String getProfileOwnerPackageNameForUser(@NonNull Context context)\n         return null;\n     }\n \n+\n+\n     /**\n      * Get the process id of the main app process of a package. This will work for sharedUserId. Note\n      * that some apps have multiple processes for the app like with `android:process=\":background\"`\n@@ -275,6 +278,8 @@ public static String getPackagePID(final Context context, String packageName) {\n         return null;\n     }\n \n+\n+\n     /**\n      * Check if app is installed and enabled. This can be used by external apps that don't\n      * share `sharedUserId` with the an app.\n@@ -318,4 +323,97 @@ public static String isAppInstalled(@NonNull final Context context, String appNa\n         return errmsg;\n     }\n \n+\n+\n+    /**\n+     * Enable or disable a {@link ComponentName} with a call to\n+     * {@link PackageManager#setComponentEnabledSetting(ComponentName, int, int)}.\n+     *\n+     * @param context The {@link Context} for operations.\n+     * @param packageName The package name of the component.\n+     * @param className The {@link Class} name of the component.\n+     * @param state If component should be enabled or disabled.\n+     * @param toastString If this is not {@code null} or empty, then a toast before setting state.\n+     * @param showErrorMessage If an error message toast should be shown.\n+     * @return Returns the errmsg if failed to set state, otherwise {@code null}.\n+     */\n+    @Nullable\n+    public static String setComponentState(@NonNull final Context context, @NonNull String packageName,\n+                                         @NonNull String className, boolean state, String toastString,\n+                                         boolean showErrorMessage) {\n+        try {\n+            PackageManager packageManager = context.getPackageManager();\n+            if (packageManager != null) {\n+                ComponentName componentName = new ComponentName(packageName, className);\n+                if (toastString != null) Logger.showToast(context, toastString, true);\n+                packageManager.setComponentEnabledSetting(componentName,\n+                    state ? PackageManager.COMPONENT_ENABLED_STATE_ENABLED : PackageManager.COMPONENT_ENABLED_STATE_DISABLED,\n+                    PackageManager.DONT_KILL_APP);\n+            }\n+            return null;\n+        } catch (final Exception e) {\n+            String errmsg = context.getString(\n+                state ? R.string.error_enable_component_failed : R.string.error_disable_component_failed,\n+                packageName, className) + \": \" + e.getMessage();\n+            if (showErrorMessage)\n+                Logger.showToast(context, errmsg, true);\n+            return errmsg;\n+        }\n+    }\n+\n+    /**\n+     * Check if state of a {@link ComponentName} is {@link PackageManager#COMPONENT_ENABLED_STATE_DISABLED}\n+     * with a call to {@link PackageManager#getComponentEnabledSetting(ComponentName)}.\n+     *\n+     * @param context The {@link Context} for operations.\n+     * @param packageName The package name of the component.\n+     * @param className The {@link Class} name of the component.\n+     * @param logErrorMessage If an error message should be logged.\n+     * @return Returns {@code true} if disabled, {@code false} if not and {@code null} if failed to\n+     * get the state.\n+     */\n+    public static Boolean isComponentDisabled(@NonNull final Context context, @NonNull String packageName,\n+                                           @NonNull String className, boolean logErrorMessage) {\n+        try {\n+            PackageManager packageManager = context.getPackageManager();\n+            if (packageManager != null) {\n+                ComponentName componentName = new ComponentName(packageName, className);\n+                // Will throw IllegalArgumentException: Unknown component: ComponentInfo{} if app\n+                // for context is not installed or component does not exist.\n+                return packageManager.getComponentEnabledSetting(componentName) == PackageManager.COMPONENT_ENABLED_STATE_DISABLED;\n+            }\n+        } catch (final Exception e) {\n+            if (logErrorMessage)\n+                Logger.logStackTraceWithMessage(LOG_TAG, context.getString(R.string.error_get_component_state_failed, packageName, className), e);\n+        }\n+\n+        return null;\n+    }\n+\n+    /**\n+     * Check if an {@link android.app.Activity} {@link ComponentName} can be called by calling\n+     * {@link PackageManager#queryIntentActivities(Intent, int)}.\n+     *\n+     * @param context The {@link Context} for operations.\n+     * @param packageName The package name of the component.\n+     * @param className The {@link Class} name of the component.\n+     * @param flags The flags to filter results.\n+     * @return Returns {@code true} if it exists, otherwise {@code false}.\n+     */\n+    public static boolean doesActivityComponentExist(@NonNull final Context context, @NonNull String packageName,\n+                                              @NonNull String className, int flags) {\n+        try {\n+            PackageManager packageManager = context.getPackageManager();\n+            if (packageManager != null) {\n+                Intent intent = new Intent();\n+                intent.setClassName(packageName, className);\n+                return packageManager.queryIntentActivities(intent, flags).size() > 0;\n+            }\n+        } catch (final Exception e) {\n+            // ignore\n+        }\n+\n+        return false;\n+    }\n+\n }",
    "output": "Added: Add functions to PackageUtils to check/modify app Component states\n\nThese can be used by Termux app and its plugin to disable launcher icons/activities if they are enabled at install time"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/settings/preferences/TermuxWidgetAppSharedPreferences.java b/termux-shared/src/main/java/com/termux/shared/settings/preferences/TermuxWidgetAppSharedPreferences.java\n--- a/termux-shared/src/main/java/com/termux/shared/settings/preferences/TermuxWidgetAppSharedPreferences.java\n+++ b/termux-shared/src/main/java/com/termux/shared/settings/preferences/TermuxWidgetAppSharedPreferences.java\n@@ -84,7 +84,7 @@ public String getGeneratedToken() {\n         String token =  SharedPreferenceUtils.getString(mSharedPreferences, TERMUX_WIDGET_APP.KEY_TOKEN, null, true);\n         if (token == null) {\n             token = UUID.randomUUID().toString();\n-            SharedPreferenceUtils.setString(mSharedPreferences, TERMUX_WIDGET_APP.KEY_TOKEN, token, false);\n+            SharedPreferenceUtils.setString(mSharedPreferences, TERMUX_WIDGET_APP.KEY_TOKEN, token, true);\n         }\n         return token;\n     }",
    "output": "Changed: Store termux-widget token synchronously to the SharedPreferences file on creation\n\nAttempt to solve termux/termux-widget#16"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n@@ -177,8 +177,8 @@ public void onSingleTapUp(MotionEvent e) {\n         TerminalEmulator term = mActivity.getCurrentSession().getEmulator();\n \n         if (mActivity.getProperties().shouldOpenTerminalTranscriptURLOnClick()) {\n-            int[] xAndY = mActivity.getTerminalView().getTextSelectionCursorController().getXAndYFromEvent(e);\n-            String wordAtTap = term.getScreen().getWordAtLocation(xAndY[0], xAndY[1]);\n+            int[] columnAndRow = mActivity.getTerminalView().getColumnAndRow(e, true);\n+            String wordAtTap = term.getScreen().getWordAtLocation(columnAndRow[0], columnAndRow[1]);\n             LinkedHashSet<CharSequence> urlSet = UrlUtils.extractUrls(wordAtTap);\n \n             if (!urlSet.isEmpty()) {\n\ndiff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -466,10 +466,31 @@ public boolean isOpaque() {\n         return true;\n     }\n \n+    /**\n+     * Get the zero indexed column and row of the terminal view for the\n+     * position of the event.\n+     *\n+     * @param event The event with the position to get the column and row for.\n+     * @param relativeToScroll If true the column number will take the scroll\n+     * position into account. E.g. if scrolled 3 lines up and the event\n+     * position is in the top left, column will be -3 if relativeToScroll is\n+     * true and 0 if relativeToScroll is false.\n+     * @return Array with the column and row.\n+     */\n+    public int[] getColumnAndRow(MotionEvent event, boolean relativeToScroll) {\n+        int column = (int) (event.getX() / mRenderer.mFontWidth);\n+        int row = (int) ((event.getY() - mRenderer.mFontLineSpacingAndAscent) / mRenderer.mFontLineSpacing);\n+        if (relativeToScroll) {\n+            row += mTopRow;\n+        }\n+        return new int[] { column, row };\n+    }\n+\n     /** Send a single mouse event code to the terminal. */\n     void sendMouseEventCode(MotionEvent e, int button, boolean pressed) {\n-        int x = (int) (e.getX() / mRenderer.mFontWidth) + 1;\n-        int y = (int) ((e.getY() - mRenderer.mFontLineSpacingAndAscent) / mRenderer.mFontLineSpacing) + 1;\n+        int[] columnAndRow = getColumnAndRow(e, false);\n+        int x = columnAndRow[0] + 1;\n+        int y = columnAndRow[1] + 1;\n         if (pressed && (button == TerminalEmulator.MOUSE_WHEELDOWN_BUTTON || button == TerminalEmulator.MOUSE_WHEELUP_BUTTON)) {\n             if (mMouseStartDownTime == e.getDownTime()) {\n                 x = mMouseScrollStartX;\n@@ -1129,7 +1150,7 @@ public void run() {\n     /**\n      * Define functions required for text selection and its handles.\n      */\n-    public TextSelectionCursorController getTextSelectionCursorController() {\n+    TextSelectionCursorController getTextSelectionCursorController() {\n         if (mTextSelectionCursorController == null) {\n             mTextSelectionCursorController = new TextSelectionCursorController(this);\n \n\ndiff --git a/terminal-view/src/main/java/com/termux/view/textselection/TextSelectionCursorController.java b/terminal-view/src/main/java/com/termux/view/textselection/TextSelectionCursorController.java\n--- a/terminal-view/src/main/java/com/termux/view/textselection/TextSelectionCursorController.java\n+++ b/terminal-view/src/main/java/com/termux/view/textselection/TextSelectionCursorController.java\n@@ -88,19 +88,10 @@ public void render() {\n         }\n     }\n \n-    public int[] getXAndYFromEvent(MotionEvent event) {\n-        int cx = (int) (event.getX() / terminalView.mRenderer.getFontWidth());\n-        final boolean eventFromMouse = event.isFromSource(InputDevice.SOURCE_MOUSE);\n-        // Offset for finger:\n-        final int SELECT_TEXT_OFFSET_Y = eventFromMouse ? 0 : -40;\n-        int cy = (int) ((event.getY() + SELECT_TEXT_OFFSET_Y) / terminalView.mRenderer.getFontLineSpacing()) + terminalView.getTopRow();\n-        return new int[] { cx, cy };\n-    }\n-\n     public void setInitialTextSelectionPosition(MotionEvent event) {\n-        int[] xAndY = getXAndYFromEvent(event);\n-        mSelX1 = mSelX2 = xAndY[0];\n-        mSelY1 = mSelY2 = xAndY[1];\n+        int[] columnAndRow = terminalView.getColumnAndRow(event, true);\n+        mSelX1 = mSelX2 = columnAndRow[0];\n+        mSelY1 = mSelY2 = columnAndRow[1];\n \n         TerminalBuffer screen = terminalView.mEmulator.getScreen();\n         if (!\" \".equals(screen.getSelectedText(mSelX1, mSelY1, mSelX1, mSelY1))) {",
    "output": "Fix calculation of row number for selection and URL clicking\n\nWhen calculating the row that is clicked, for mouse tracking\nmFontLineSpacingAndAscent was taken into account, but for selection and\nURL clicking it wasn't. This adds a common function for calculating the\ncolumn and row which does take it into account and use that for all\nthree.\n\nI'm not quite sure why it's necessary to subtract\nmFontLineSpacingAndAscent, but with this calculation the click location\nmatches the line that is acted on for me with both touch and mouse and\non different font sizes.\n\nIt also removes the offset for finger the selection/url used because I\ndon't think it's common for apps on Android to have such an offset, and\nbecause the mouse tracking did not use such an offset."
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/data/DataUtils.java b/termux-shared/src/main/java/com/termux/shared/data/DataUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/data/DataUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/data/DataUtils.java\n@@ -10,6 +10,8 @@\n \n public class DataUtils {\n \n+    /** Max safe limit of data size to prevent TransactionTooLargeException when transferring data\n+     * inside or to other apps via transactions. */\n     public static final int TRANSACTION_SIZE_LIMIT_IN_BYTES = 100 * 1024; // 100KB\n \n     private static final char[] HEX_ARRAY = \"0123456789ABCDEF\".toCharArray();\n@@ -171,6 +173,17 @@ public static <T> T getDefaultIfNull(@Nullable T object, @Nullable T def) {\n         return (object == null) ? def : object;\n     }\n \n+    /**\n+     * Get the {@link String} itself if it is not {@code null} or empty, otherwise default.\n+     *\n+     * @param value The {@link String} to check.\n+     * @param def The default {@link String}.\n+     * @return Returns {@code value} if it is not {@code null} or empty, otherwise returns {@code def}.\n+     */\n+    public static String getDefaultIfUnset(@Nullable String value, String def) {\n+        return (value == null || value.isEmpty()) ? def : value;\n+    }\n+\n     /** Check if a string is null or empty. */\n     public static boolean isNullOrEmpty(String string) {\n         return string == null || string.isEmpty();",
    "output": "Added: Add getDefaultIfUnset() to DataUtils and update comment"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n@@ -12,7 +12,7 @@\n import java.util.List;\n \n /*\n- * Version: v0.30.0\n+ * Version: v0.31.0\n  *\n  * Changelog\n  *\n@@ -203,6 +203,10 @@\n  *      - Changed `APK_RELEASE_GITHUB_DEBUG_BUILD`to `APK_RELEASE_GITHUB` and\n  *          `APK_RELEASE_GITHUB_DEBUG_BUILD_SIGNING_CERTIFICATE_SHA256_DIGEST` to\n  *          `APK_RELEASE_GITHUB_SIGNING_CERTIFICATE_SHA256_DIGEST`.\n+ *\n+ * - 0.31.0 (2021-09-09)\n+ *      - Added following to `TERMUX_APP.TERMUX_SERVICE`:\n+ *          `MIN_VALUE_EXTRA_SESSION_ACTION` and `MAX_VALUE_EXTRA_SESSION_ACTION`.\n  */\n \n /**\n@@ -948,6 +952,11 @@ public static final class TERMUX_SERVICE {\n              */\n             public static final int VALUE_EXTRA_SESSION_ACTION_KEEP_CURRENT_SESSION_AND_DONT_OPEN_ACTIVITY = 3;\n \n+            /** The minimum allowed value for {@link #EXTRA_SESSION_ACTION}. */\n+            public static final int MIN_VALUE_EXTRA_SESSION_ACTION = VALUE_EXTRA_SESSION_ACTION_SWITCH_TO_NEW_SESSION_AND_OPEN_ACTIVITY;\n+\n+            /** The maximum allowed value for {@link #EXTRA_SESSION_ACTION}. */\n+            public static final int MAX_VALUE_EXTRA_SESSION_ACTION = VALUE_EXTRA_SESSION_ACTION_KEEP_CURRENT_SESSION_AND_DONT_OPEN_ACTIVITY;\n \n \n             /** Intent {@code Bundle} extra to store result of execute command that is sent back for the",
    "output": "Added: Add MIN_VALUE_EXTRA_SESSION_ACTION and MAX_VALUE_EXTRA_SESSION_ACTION to TermuxConstants"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/terminal/TermuxTerminalSessionClient.java b/app/src/main/java/com/termux/app/terminal/TermuxTerminalSessionClient.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxTerminalSessionClient.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxTerminalSessionClient.java\n@@ -138,24 +138,36 @@ public void onSessionFinished(final TerminalSession finishedSession) {\n             return;\n         }\n \n+        int index = service.getIndexOfSession(finishedSession);\n+\n+        // For plugin commands that expect the result back, we should immediately close the session\n+        // and send the result back instead of waiting fo the user to press enter.\n+        // The plugin can handle/show errors itself.\n+        boolean isPluginExecutionCommandWithPendingResult = false;\n+        TermuxSession termuxSession = service.getTermuxSession(index);\n+        if (termuxSession != null) {\n+            isPluginExecutionCommandWithPendingResult = termuxSession.getExecutionCommand().isPluginExecutionCommandWithPendingResult();\n+            if (isPluginExecutionCommandWithPendingResult)\n+                Logger.logVerbose(LOG_TAG, \"The \\\"\" + finishedSession.mSessionName + \"\\\" session will be force finished automatically since result in pending.\");\n+        }\n+\n         if (mActivity.isVisible() && finishedSession != mActivity.getCurrentSession()) {\n             // Show toast for non-current sessions that exit.\n-            int indexOfSession = service.getIndexOfSession(finishedSession);\n             // Verify that session was not removed before we got told about it finishing:\n-            if (indexOfSession >= 0)\n+            if (index >= 0)\n                 mActivity.showToast(toToastTitle(finishedSession) + \" - exited\", true);\n         }\n \n         if (mActivity.getPackageManager().hasSystemFeature(PackageManager.FEATURE_LEANBACK)) {\n             // On Android TV devices we need to use older behaviour because we may\n             // not be able to have multiple launcher icons.\n-            if (service.getTermuxSessionsSize() > 1) {\n+            if (service.getTermuxSessionsSize() > 1 || isPluginExecutionCommandWithPendingResult) {\n                 removeFinishedSession(finishedSession);\n             }\n         } else {\n             // Once we have a separate launcher icon for the failsafe session, it\n             // should be safe to auto-close session on exit code '0' or '130'.\n-            if (finishedSession.getExitStatus() == 0 || finishedSession.getExitStatus() == 130) {\n+            if (finishedSession.getExitStatus() == 0 || finishedSession.getExitStatus() == 130 || isPluginExecutionCommandWithPendingResult) {\n                 removeFinishedSession(finishedSession);\n             }\n         }",
    "output": "Changed!: Do not wait for the user to press enter for failed terminal session commands if plugin expects the result back"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/shell/TermuxShellUtils.java b/termux-shared/src/main/java/com/termux/shared/shell/TermuxShellUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/shell/TermuxShellUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/shell/TermuxShellUtils.java\n@@ -25,6 +25,8 @@ public class TermuxShellUtils {\n     public static String TERMUX_APP_PID;\n     public static String TERMUX_APK_RELEASE;\n \n+    public static String TERMUX_API_VERSION_NAME;\n+\n     public static String getDefaultWorkingDirectoryPath() {\n         return TermuxConstants.TERMUX_HOME_DIR_PATH;\n     }\n@@ -52,6 +54,9 @@ public static String[] buildEnvironment(Context currentPackageContext, boolean i\n         if (TERMUX_APK_RELEASE != null)\n             environment.add(\"TERMUX_APK_RELEASE=\" + TERMUX_APK_RELEASE);\n \n+        if (TERMUX_API_VERSION_NAME != null)\n+            environment.add(\"TERMUX_API_VERSION=\" + TERMUX_API_VERSION_NAME);\n+\n         environment.add(\"TERM=xterm-256color\");\n         environment.add(\"COLORTERM=truecolor\");\n         environment.add(\"HOME=\" + TermuxConstants.TERMUX_HOME_DIR_PATH);\n@@ -180,6 +185,16 @@ public static void loadTermuxEnvVariables(Context currentPackageContext) {\n             }\n         }\n \n+\n+        TERMUX_API_VERSION_NAME = null;\n+\n+        // Check if Termux:API app is installed and not disabled\n+        if (TermuxUtils.isTermuxAPIAppInstalled(currentPackageContext) == null) {\n+            // This function may be called by a different package like a plugin, so we get version for Termux:API package via its context\n+            Context termuxAPIPackageContext = TermuxUtils.getTermuxAPIPackageContext(currentPackageContext);\n+            if (termuxAPIPackageContext != null)\n+                TERMUX_API_VERSION_NAME = PackageUtils.getVersionNameForPackage(termuxAPIPackageContext);\n+        }\n     }\n \n }\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n@@ -132,6 +132,18 @@ public static String isTermuxAppInstalled(@NonNull final Context context) {\n         return PackageUtils.isAppInstalled(context, TermuxConstants.TERMUX_APP_NAME, TermuxConstants.TERMUX_PACKAGE_NAME);\n     }\n \n+    /**\n+     * Check if Termux:API app is installed and enabled. This can be used by external apps that don't\n+     * share `sharedUserId` with the Termux:API app.\n+     *\n+     * @param context The context for operations.\n+     * @return Returns {@code errmsg} if {@link TermuxConstants#TERMUX_API_PACKAGE_NAME} is not installed\n+     * or disabled, otherwise {@code null}.\n+     */\n+    public static String isTermuxAPIAppInstalled(@NonNull final Context context) {\n+        return PackageUtils.isAppInstalled(context, TermuxConstants.TERMUX_API_APP_NAME, TermuxConstants.TERMUX_API_PACKAGE_NAME);\n+    }\n+\n     /**\n      * Check if Termux app is installed and accessible. This can only be used by apps that share\n      * `sharedUserId` with the Termux app.",
    "output": "Added: Add TERMUX_API_VERSION to termux shell environment\n\nThis can be used to check if `Termux:API` is installed and enabled for cases where users try to run `termux-api` commands and it hangs. The check can be added to start of each `termux-api` script during build time by replacing a placeholder with `sed`.\n\n```\nif dpkg --compare-versions \"$TERMUX_VERSION\" ge 0.118 && [ -z \"$TERMUX_API_VERSION\" ]; then\necho \"The Termux:API app is not installed or enabled which is required by termux-api commands to work.\" 1>&2\nexit 1\nfi\n\ncurrent_user=\"$(id -un)\"\ntermux_user=\"$(stat -c \"%U\" \"/data/data/com.termux/files/usr\")\"\nif [ \"$current_user\" != \"$termux_user\" ]; then\necho \"The termux-api commands must be run as the termux user \\\"$termux_user\\\" instead of as \\\"$current_user\\\".\" 1>&2\necho \"Trying to run with \\\"su $termux_user -c termux-api-command\\\" will fail as well.\" 1>&2\nexit 1\nfi\n```"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/interact/ShareUtils.java b/termux-shared/src/main/java/com/termux/shared/interact/ShareUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/interact/ShareUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/interact/ShareUtils.java\n@@ -2,6 +2,7 @@\n \n import android.Manifest;\n import android.app.Activity;\n+import android.content.ActivityNotFoundException;\n import android.content.ClipData;\n import android.content.ClipboardManager;\n import android.content.Context;\n@@ -97,9 +98,11 @@ public static void openURL(final Context context, final String url) {\n         Intent intent = new Intent(Intent.ACTION_VIEW, uri);\n         try {\n             context.startActivity(intent);\n-        } catch (Exception e) {\n+        } catch (ActivityNotFoundException e) {\n             // If no activity found to handle intent, show system chooser\n             openSystemAppChooser(context, intent, context.getString(R.string.title_open_url_with));\n+        } catch (Exception e) {\n+            Logger.logStackTraceWithMessage(LOG_TAG, \"Failed to open url \\\"\" + url + \"\\\"\", e);\n         }\n     }\n ",
    "output": "Changed: Only show system chooser if ActivityNotFoundException is thrown when opening url"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/interact/ShareUtils.java b/termux-shared/src/main/java/com/termux/shared/interact/ShareUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/interact/ShareUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/interact/ShareUtils.java\n@@ -14,6 +14,7 @@\n \n import com.termux.shared.R;\n import com.termux.shared.data.DataUtils;\n+import com.termux.shared.data.IntentUtils;\n import com.termux.shared.file.FileUtils;\n import com.termux.shared.logger.Logger;\n import com.termux.shared.models.errors.Error;\n@@ -39,7 +40,11 @@ private static void openSystemAppChooser(final Context context, final Intent int\n         chooserIntent.putExtra(Intent.EXTRA_INTENT, intent);\n         chooserIntent.putExtra(Intent.EXTRA_TITLE, title);\n         chooserIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n-        context.startActivity(chooserIntent);\n+        try {\n+            context.startActivity(chooserIntent);\n+        } catch (Exception e) {\n+            Logger.logStackTraceWithMessage(LOG_TAG, \"Failed to open system chooser for:\\n\" + IntentUtils.getIntentString(chooserIntent), e);\n+        }\n     }\n \n     /**\n@@ -88,12 +93,13 @@ public static void copyTextToClipboard(final Context context, final String text,\n      */\n     public static void openURL(final Context context, final String url) {\n         if (context == null || url == null || url.isEmpty()) return;\n+        Uri uri = Uri.parse(url);\n+        Intent intent = new Intent(Intent.ACTION_VIEW, uri);\n         try {\n-            Uri uri = Uri.parse(url);\n-            Intent intent = new Intent(Intent.ACTION_VIEW, uri);\n             context.startActivity(intent);\n         } catch (Exception e) {\n-            Logger.logStackTraceWithMessage(LOG_TAG, \"Failed to open the url \\\"\" + url + \"\\\"\", e);\n+            // If no activity found to handle intent, show system chooser\n+            openSystemAppChooser(context, intent, context.getString(R.string.title_open_url_with));\n         }\n     }\n ",
    "output": "Changed: Show system chooser if failed to find activity to handle url"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java b/termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java\n@@ -1,5 +1,6 @@\n package com.termux.shared.packages;\n \n+import android.app.ActivityManager;\n import android.app.admin.DevicePolicyManager;\n import android.content.ComponentName;\n import android.content.Context;\n@@ -248,4 +249,30 @@ public static String getProfileOwnerPackageNameForUser(@NonNull Context context)\n         return null;\n     }\n \n+    /**\n+     * Get the process id of the main app process of a package. This will work for sharedUserId. Note\n+     * that some apps have multiple processes for the app like with `android:process=\":background\"`\n+     * attribute in AndroidManifest.xml.\n+     *\n+     * @param context The {@link Context} for operations.\n+     * @param packageName The package name of the process.\n+     * @return Returns the process if found and running, otherwise {@code null}.\n+     */\n+    @Nullable\n+    public static String getPackagePID(final Context context, String packageName) {\n+        ActivityManager activityManager = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);\n+        if (activityManager != null) {\n+            List<ActivityManager.RunningAppProcessInfo> processInfos = activityManager.getRunningAppProcesses();\n+            if (processInfos != null) {\n+                ActivityManager.RunningAppProcessInfo processInfo;\n+                for (int i = 0; i < processInfos.size(); i++) {\n+                    processInfo = processInfos.get(i);\n+                    if (processInfo.processName.equals(packageName))\n+                        return String.valueOf(processInfo.pid);\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+\n }\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/shell/TermuxShellUtils.java b/termux-shared/src/main/java/com/termux/shared/shell/TermuxShellUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/shell/TermuxShellUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/shell/TermuxShellUtils.java\n@@ -20,6 +20,11 @@\n \n public class TermuxShellUtils {\n \n+    public static String TERMUX_VERSION_NAME;\n+    public static String TERMUX_IS_DEBUG_BUILD;\n+    public static String TERMUX_APK_RELEASE;\n+    public static String TERMUX_APP_PID;\n+\n     public static String getDefaultWorkingDirectoryPath() {\n         return TermuxConstants.TERMUX_HOME_DIR_PATH;\n     }\n@@ -36,13 +41,16 @@ public static String[] buildEnvironment(Context currentPackageContext, boolean i\n \n         List<String> environment = new ArrayList<>();\n \n-        // This function may be called by a different package like a plugin, so we get version for Termux package via its context\n-        Context termuxPackageContext = TermuxUtils.getTermuxPackageContext(currentPackageContext);\n-        if (termuxPackageContext != null) {\n-            String termuxVersionName = PackageUtils.getVersionNameForPackage(termuxPackageContext);\n-            if (termuxVersionName != null)\n-                environment.add(\"TERMUX_VERSION=\" + termuxVersionName);\n-        }\n+        loadTermuxEnvVariables(currentPackageContext);\n+\n+        if (TERMUX_VERSION_NAME != null)\n+            environment.add(\"TERMUX_VERSION=\" + TERMUX_VERSION_NAME);\n+        if (TERMUX_IS_DEBUG_BUILD != null)\n+            environment.add(\"TERMUX_IS_DEBUG_BUILD=\" + TERMUX_IS_DEBUG_BUILD);\n+        if (TERMUX_APK_RELEASE != null)\n+            environment.add(\"TERMUX_APK_RELEASE=\" + TERMUX_APK_RELEASE);\n+        if (TERMUX_APP_PID != null)\n+            environment.add(\"TERMUX_APP_PID=\" + TERMUX_APP_PID);\n \n         environment.add(\"TERM=xterm-256color\");\n         environment.add(\"COLORTERM=truecolor\");\n@@ -147,4 +155,21 @@ public static void clearTermuxTMPDIR(boolean onlyIfExists) {\n         }\n     }\n \n+    public static void loadTermuxEnvVariables(Context currentPackageContext) {\n+        TERMUX_VERSION_NAME = TERMUX_IS_DEBUG_BUILD = TERMUX_APK_RELEASE = TERMUX_APP_PID = null;\n+\n+        // This function may be called by a different package like a plugin, so we get version for Termux package via its context\n+        Context termuxPackageContext = TermuxUtils.getTermuxPackageContext(currentPackageContext);\n+        if (termuxPackageContext != null) {\n+            TERMUX_VERSION_NAME = PackageUtils.getVersionNameForPackage(termuxPackageContext);\n+            TERMUX_IS_DEBUG_BUILD = PackageUtils.isAppForPackageADebugBuild(termuxPackageContext) ? \"1\" : \"0\";\n+\n+            String signingCertificateSHA256Digest = PackageUtils.getSigningCertificateSHA256DigestForPackage(termuxPackageContext);\n+            if (signingCertificateSHA256Digest != null)\n+                TERMUX_APK_RELEASE = TermuxUtils.getAPKRelease(signingCertificateSHA256Digest).replaceAll(\"[^a-zA-Z]\", \"_\").toUpperCase();\n+\n+            TERMUX_APP_PID = TermuxUtils.getTermuxAppPID(currentPackageContext);\n+        }\n+    }\n+\n }\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n@@ -533,4 +533,16 @@ public static String getAPKRelease(String signingCertificateSHA256Digest) {\n         }\n     }\n \n+\n+    /**\n+     * Get a process id of the main app process of the {@link TermuxConstants#TERMUX_PACKAGE_NAME}\n+     * package.\n+     *\n+     * @param context The context for operations.\n+     * @return Returns the process if found and running, otherwise {@code null}.\n+     */\n+    public static String getTermuxAppPID(final Context context) {\n+        return PackageUtils.getPackagePID(context, TermuxConstants.TERMUX_PACKAGE_NAME);\n+    }\n+\n }",
    "output": "Added: Add TERMUX_IS_DEBUG_BUILD, TERMUX_APK_RELEASE and TERMUX_APP_PID to termux shell environment\n\nThe `TERMUX_IS_DEBUG_BUILD` env variable will be set to `1` if termux APK is a debuggable APK and `0` otherwise. Note that the `dev_keystore.jks` shipped with termux app and plugin source code can also be used to create a release APK even though its mainly used for Github Debug Builds, in which case value will be `0`.\n\nThe `TERMUX_APK_RELEASE` will be set to `GITHUB_DEBUG_BUILD`, `F_DROID` or `GOOGLE_PLAY_STORE` depending on release type. It will be set to `UNKNOWN` if signed with a custom key.\n\nThe `TERMUX_APP_PID` will be set to the process of the main app process of the termux app package (`com.termux`), assuming its running when shell is started, like for `termux-float`. This variable is included since `pidof com.termux` does not return anything for release builds. It does work for debug builds and over adb/root. However, you still won't be able to get additional process info with `ps`, like that of threads, even with the pid and will need to use adb/root. However, `kill $TERMUX_APP_PID` will work from `termux-app` and `termux-float`.\n\nThese variables can be used by termux devs and users for custom logic in future depending on release type."
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/logger/Logger.java b/termux-shared/src/main/java/com/termux/shared/logger/Logger.java\n--- a/termux-shared/src/main/java/com/termux/shared/logger/Logger.java\n+++ b/termux-shared/src/main/java/com/termux/shared/logger/Logger.java\n@@ -439,7 +439,7 @@ public static boolean isLogLevelValid(Integer logLevel) {\n     /** Check if custom log level is valid and >= {@link #CURRENT_LOG_LEVEL}. If custom log level is\n      * not valid then {@link #LOG_LEVEL_VERBOSE} must be >= {@link #CURRENT_LOG_LEVEL}. */\n     public static boolean shouldEnableLoggingForCustomLogLevel(Integer customLogLevel) {\n-        if (customLogLevel == null || CURRENT_LOG_LEVEL == LOG_LEVEL_OFF) return false;\n+        if (customLogLevel == null || CURRENT_LOG_LEVEL <= LOG_LEVEL_OFF || customLogLevel <= LOG_LEVEL_OFF) return false;\n         customLogLevel = Logger.isLogLevelValid(customLogLevel) ? customLogLevel: Logger.LOG_LEVEL_VERBOSE;\n         return (customLogLevel >= CURRENT_LOG_LEVEL);\n     }",
    "output": "Changed: Make allowed custom log level added in 60f37bde to be more restrictive"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/settings/preferences/TermuxPreferenceConstants.java b/termux-shared/src/main/java/com/termux/shared/settings/preferences/TermuxPreferenceConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/settings/preferences/TermuxPreferenceConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/settings/preferences/TermuxPreferenceConstants.java\n@@ -1,7 +1,7 @@\n package com.termux.shared.settings.preferences;\n \n /*\n- * Version: v0.14.0\n+ * Version: v0.15.0\n  *\n  * Changelog\n  *\n@@ -61,6 +61,10 @@\n  *\n  * - 0.14.0 (2021-09-04)\n  *      - Added `TERMUX_WIDGET_APP.KEY_TOKEN`.\n+ *\n+ * - 0.15.0 (2021-09-05)\n+ *      - Added following to `TERMUX_TASKER_APP`:\n+ *          `KEY_LAST_PENDING_INTENT_REQUEST_CODE` and `DEFAULT_VALUE_KEY_LAST_PENDING_INTENT_REQUEST_CODE`.\n  */\n \n /**\n@@ -259,6 +263,13 @@ public static final class TERMUX_TASKER_APP {\n          */\n         public static final String KEY_LOG_LEVEL = \"log_level\";\n \n+\n+        /**\n+         * Defines the key for last used PendingIntent request code.\n+         */\n+        public static final String KEY_LAST_PENDING_INTENT_REQUEST_CODE = \"last_pending_intent_request_code\";\n+        public static final int DEFAULT_VALUE_KEY_LAST_PENDING_INTENT_REQUEST_CODE = 0;\n+\n     }\n \n \n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/settings/preferences/TermuxTaskerAppSharedPreferences.java b/termux-shared/src/main/java/com/termux/shared/settings/preferences/TermuxTaskerAppSharedPreferences.java\n--- a/termux-shared/src/main/java/com/termux/shared/settings/preferences/TermuxTaskerAppSharedPreferences.java\n+++ b/termux-shared/src/main/java/com/termux/shared/settings/preferences/TermuxTaskerAppSharedPreferences.java\n@@ -84,4 +84,14 @@ public void setLogLevel(Context context, int logLevel, boolean commitToFile) {\n         SharedPreferenceUtils.setInt(mSharedPreferences, TERMUX_TASKER_APP.KEY_LOG_LEVEL, logLevel, commitToFile);\n     }\n \n+\n+\n+    public int getLastPendingIntentRequestCode() {\n+        return SharedPreferenceUtils.getInt(mSharedPreferences, TERMUX_TASKER_APP.KEY_LAST_PENDING_INTENT_REQUEST_CODE, TERMUX_TASKER_APP.DEFAULT_VALUE_KEY_LAST_PENDING_INTENT_REQUEST_CODE);\n+    }\n+\n+    public void setLastPendingIntentRequestCode(int lastPendingIntentRequestCode) {\n+        SharedPreferenceUtils.setInt(mSharedPreferences, TERMUX_TASKER_APP.KEY_LAST_PENDING_INTENT_REQUEST_CODE, lastPendingIntentRequestCode, false);\n+    }\n+\n }",
    "output": "Added: Add SharedPreferences KEY_LAST_PENDING_INTENT_REQUEST_CODE for termux-tasker"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/activities/SettingsActivity.java b/app/src/main/java/com/termux/app/activities/SettingsActivity.java\n--- a/app/src/main/java/com/termux/app/activities/SettingsActivity.java\n+++ b/app/src/main/java/com/termux/app/activities/SettingsActivity.java\n@@ -20,6 +20,7 @@\n import com.termux.shared.settings.preferences.TermuxAPIAppSharedPreferences;\n import com.termux.shared.settings.preferences.TermuxFloatAppSharedPreferences;\n import com.termux.shared.settings.preferences.TermuxTaskerAppSharedPreferences;\n+import com.termux.shared.settings.preferences.TermuxWidgetAppSharedPreferences;\n import com.termux.shared.termux.AndroidUtils;\n import com.termux.shared.termux.TermuxConstants;\n import com.termux.shared.termux.TermuxUtils;\n@@ -60,6 +61,7 @@ public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {\n             configureTermuxAPIPreference(context);\n             configureTermuxFloatPreference(context);\n             configureTermuxTaskerPreference(context);\n+            configureTermuxWidgetPreference(context);\n             configureAboutPreference(context);\n             configureDonatePreference(context);\n         }\n@@ -91,6 +93,15 @@ private void configureTermuxTaskerPreference(@NonNull Context context) {\n             }\n         }\n \n+        private void configureTermuxWidgetPreference(@NonNull Context context) {\n+            Preference termuxWidgetPreference = findPreference(\"termux_widget\");\n+            if (termuxWidgetPreference != null) {\n+                TermuxWidgetAppSharedPreferences preferences = TermuxWidgetAppSharedPreferences.build(context, false);\n+                // If failed to get app preferences, then likely app is not installed, so do not show its preference\n+                termuxWidgetPreference.setVisible(preferences != null);\n+            }\n+        }\n+\n         private void configureAboutPreference(@NonNull Context context) {\n             Preference aboutPreference = findPreference(\"about\");\n             if (aboutPreference != null) {\n\ndiff --git a/app/src/main/java/com/termux/app/fragments/settings/TermuxWidgetPreferencesFragment.java b/app/src/main/java/com/termux/app/fragments/settings/TermuxWidgetPreferencesFragment.java\n--- a/app/src/main/java/com/termux/app/fragments/settings/TermuxWidgetPreferencesFragment.java\n+++ b/app/src/main/java/com/termux/app/fragments/settings/TermuxWidgetPreferencesFragment.java\n@@ -0,0 +1,49 @@\n+package com.termux.app.fragments.settings;\n+\n+import android.content.Context;\n+import android.os.Bundle;\n+\n+import androidx.annotation.Keep;\n+import androidx.preference.PreferenceDataStore;\n+import androidx.preference.PreferenceFragmentCompat;\n+import androidx.preference.PreferenceManager;\n+\n+import com.termux.R;\n+import com.termux.shared.settings.preferences.TermuxWidgetAppSharedPreferences;\n+\n+@Keep\n+public class TermuxWidgetPreferencesFragment extends PreferenceFragmentCompat {\n+\n+    @Override\n+    public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {\n+        Context context = getContext();\n+        if (context == null) return;\n+\n+        PreferenceManager preferenceManager = getPreferenceManager();\n+        preferenceManager.setPreferenceDataStore(TermuxWidgetPreferencesDataStore.getInstance(context));\n+\n+        setPreferencesFromResource(R.xml.termux_widget_preferences, rootKey);\n+    }\n+\n+}\n+\n+class TermuxWidgetPreferencesDataStore extends PreferenceDataStore {\n+\n+    private final Context mContext;\n+    private final TermuxWidgetAppSharedPreferences mPreferences;\n+\n+    private static TermuxWidgetPreferencesDataStore mInstance;\n+\n+    private TermuxWidgetPreferencesDataStore(Context context) {\n+        mContext = context;\n+        mPreferences = TermuxWidgetAppSharedPreferences.build(context, true);\n+    }\n+\n+    public static synchronized TermuxWidgetPreferencesDataStore getInstance(Context context) {\n+        if (mInstance == null) {\n+            mInstance = new TermuxWidgetPreferencesDataStore(context);\n+        }\n+        return mInstance;\n+    }\n+\n+}\n\ndiff --git a/app/src/main/java/com/termux/app/fragments/settings/termux_widget/DebuggingPreferencesFragment.java b/app/src/main/java/com/termux/app/fragments/settings/termux_widget/DebuggingPreferencesFragment.java\n--- a/app/src/main/java/com/termux/app/fragments/settings/termux_widget/DebuggingPreferencesFragment.java\n+++ b/app/src/main/java/com/termux/app/fragments/settings/termux_widget/DebuggingPreferencesFragment.java\n@@ -0,0 +1,101 @@\n+package com.termux.app.fragments.settings.termux_widget;\n+\n+import android.content.Context;\n+import android.os.Bundle;\n+\n+import androidx.annotation.Keep;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.preference.ListPreference;\n+import androidx.preference.PreferenceCategory;\n+import androidx.preference.PreferenceDataStore;\n+import androidx.preference.PreferenceFragmentCompat;\n+import androidx.preference.PreferenceManager;\n+\n+import com.termux.R;\n+import com.termux.shared.settings.preferences.TermuxWidgetAppSharedPreferences;\n+\n+@Keep\n+public class DebuggingPreferencesFragment extends PreferenceFragmentCompat {\n+\n+    @Override\n+    public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {\n+        Context context = getContext();\n+        if (context == null) return;\n+\n+        PreferenceManager preferenceManager = getPreferenceManager();\n+        preferenceManager.setPreferenceDataStore(DebuggingPreferencesDataStore.getInstance(context));\n+\n+        setPreferencesFromResource(R.xml.termux_widget_debugging_preferences, rootKey);\n+\n+        configureLoggingPreferences(context);\n+    }\n+\n+    private void configureLoggingPreferences(@NonNull Context context) {\n+        PreferenceCategory loggingCategory = findPreference(\"logging\");\n+        if (loggingCategory == null) return;\n+\n+        ListPreference logLevelListPreference = findPreference(\"log_level\");\n+        if (logLevelListPreference != null) {\n+            TermuxWidgetAppSharedPreferences preferences = TermuxWidgetAppSharedPreferences.build(context, true);\n+            if (preferences == null) return;\n+\n+            com.termux.app.fragments.settings.termux.DebuggingPreferencesFragment.\n+                setLogLevelListPreferenceData(logLevelListPreference, context, preferences.getLogLevel(true));\n+            loggingCategory.addPreference(logLevelListPreference);\n+        }\n+    }\n+}\n+\n+class DebuggingPreferencesDataStore extends PreferenceDataStore {\n+\n+    private final Context mContext;\n+    private final TermuxWidgetAppSharedPreferences mPreferences;\n+\n+    private static DebuggingPreferencesDataStore mInstance;\n+\n+    private DebuggingPreferencesDataStore(Context context) {\n+        mContext = context;\n+        mPreferences = TermuxWidgetAppSharedPreferences.build(context, true);\n+    }\n+\n+    public static synchronized DebuggingPreferencesDataStore getInstance(Context context) {\n+        if (mInstance == null) {\n+            mInstance = new DebuggingPreferencesDataStore(context);\n+        }\n+        return mInstance;\n+    }\n+\n+\n+\n+    @Override\n+    @Nullable\n+    public String getString(String key, @Nullable String defValue) {\n+        if (mPreferences == null) return null;\n+        if (key == null) return null;\n+\n+        switch (key) {\n+            case \"log_level\":\n+                return String.valueOf(mPreferences.getLogLevel(true));\n+            default:\n+                return null;\n+        }\n+    }\n+\n+    @Override\n+    public void putString(String key, @Nullable String value) {\n+        if (mPreferences == null) return;\n+        if (key == null) return;\n+\n+        switch (key) {\n+            case \"log_level\":\n+                if (value != null) {\n+                    mPreferences.setLogLevel(mContext, Integer.parseInt(value), true);\n+                }\n+                break;\n+            default:\n+                break;\n+        }\n+    }\n+\n+}",
    "output": "Added: Add log level setting in Termux Settings for termux-widget"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n@@ -3,11 +3,14 @@\n import android.content.ComponentName;\n import android.content.Context;\n import android.content.Intent;\n+import android.content.pm.ApplicationInfo;\n+import android.content.pm.PackageManager;\n import android.content.pm.ResolveInfo;\n \n import androidx.annotation.NonNull;\n \n import com.termux.shared.R;\n+import com.termux.shared.file.FileUtils;\n import com.termux.shared.file.TermuxFileUtils;\n import com.termux.shared.logger.Logger;\n import com.termux.shared.markdown.MarkdownUtils;\n@@ -101,6 +104,90 @@ public static Context getTermuxWidgetPackageContext(@NonNull Context context) {\n \n \n \n+    /**\n+     * Check if Termux app is installed and enabled. This can be used by external apps that don't\n+     * share `sharedUserId` with the Termux app.\n+     *\n+     * If your third-party app is targeting sdk `30` (android `11`), then it needs to add `com.termux`\n+     * package to the `queries` element or request `QUERY_ALL_PACKAGES` permission in its\n+     * `AndroidManifest.xml`. Otherwise it will get `PackageSetting{...... com.termux/......} BLOCKED`\n+     * errors in `logcat` and `RUN_COMMAND` won't work.\n+     * Check [package-visibility](https://developer.android.com/training/basics/intents/package-visibility#package-name),\n+     * `QUERY_ALL_PACKAGES` [googleplay policy](https://support.google.com/googleplay/android-developer/answer/10158779\n+     * and this [article](https://medium.com/androiddevelopers/working-with-package-visibility-dc252829de2d) for more info.\n+     *\n+     * {@code\n+     * <manifest\n+     *     <queries>\n+     *         <package android:name=\"com.termux\" />\n+     *    </queries>\n+     * </manifest>\n+     * }\n+     *\n+     * @param currentPackageContext The context of current package.\n+     * @return Returns {@code errmsg} if termux package is not installed or disabled, otherwise {@code null}.\n+     */\n+    public static String isTermuxAppInstalled(@NonNull final Context currentPackageContext) {\n+        String errmsg = null;\n+\n+        PackageManager packageManager = currentPackageContext.getPackageManager();\n+\n+        ApplicationInfo applicationInfo;\n+        try {\n+            applicationInfo = packageManager.getApplicationInfo(TermuxConstants.TERMUX_PACKAGE_NAME, 0);\n+        } catch (final PackageManager.NameNotFoundException e) {\n+            applicationInfo = null;\n+        }\n+        boolean termuxAppEnabled = (applicationInfo != null && applicationInfo.enabled);\n+\n+        // If Termux app is not installed or is disabled\n+        if (!termuxAppEnabled)\n+            errmsg = currentPackageContext.getString(R.string.error_termux_app_not_installed_or_disabled_warning);\n+\n+        return errmsg;\n+    }\n+\n+    /**\n+     * Check if Termux app is installed and accessible. This can only be used by apps that share\n+     * `sharedUserId` with the Termux app.\n+     *\n+     * This is done by checking if first checking if app is installed and enabled and then if\n+     * {@code currentPackageContext} can be used to get the {@link Context} of the app with\n+     * {@link TermuxConstants#TERMUX_PACKAGE_NAME} and then if\n+     * {@link TermuxConstants#TERMUX_PREFIX_DIR_PATH} exists and has\n+     * {@link FileUtils#APP_WORKING_DIRECTORY_PERMISSIONS} permissions. The directory will not\n+     * be automatically created and neither the missing permissions automatically set.\n+     *\n+     * @param currentPackageContext The context of current package.\n+     * @return Returns {@code errmsg} if failed to get termux package {@link Context} or\n+     *         {@link TermuxConstants#TERMUX_PREFIX_DIR_PATH} is accessible, otherwise {@code null}.\n+     */\n+    public static String isTermuxAppAccessible(@NonNull final Context currentPackageContext) {\n+        String errmsg = isTermuxAppInstalled(currentPackageContext);\n+        if (errmsg == null) {\n+            Context termuxPackageContext = TermuxUtils.getTermuxPackageContext(currentPackageContext);\n+            // If failed to get Termux app package context\n+            if (termuxPackageContext == null)\n+                errmsg = currentPackageContext.getString(R.string.error_termux_app_package_context_not_accessible);\n+\n+            if (errmsg == null) {\n+                // If TermuxConstants.TERMUX_PREFIX_DIR_PATH is not a directory or does not have required permissions\n+                Error error = TermuxFileUtils.isTermuxPrefixDirectoryAccessible(false, false);\n+                if (error != null)\n+                    errmsg = currentPackageContext.getString(R.string.error_termux_prefix_dir_path_not_accessible,\n+                        PackageUtils.getAppNameForPackage(currentPackageContext));\n+            }\n+        }\n+\n+        if (errmsg != null)\n+            return errmsg + \" \" + currentPackageContext.getString(R.string.msg_termux_app_required_by_app,\n+                PackageUtils.getAppNameForPackage(currentPackageContext));\n+        else\n+            return null;\n+    }\n+\n+\n+\n     /**\n      * Send the {@link TermuxConstants#BROADCAST_TERMUX_OPENED} broadcast to notify apps that Termux\n      * app has been opened.",
    "output": "Added: Add isTermuxAppInstalled() and isTermuxAppAccessible() functions to TermuxUtils\n\nThe `TermuxUtils.isTermuxAppInstalled()` function can be used by external apps to check if termux app is installed and enabled.\n\nThe `TermuxUtils.isTermuxAppAccessible()` function can be used by termux plugin apps to check if termux app is installed, enabled, accessible as per `sharedUserId` and `TERMUX_PREFIX_DIR_PATH` is accessible and has read, write and execute permission."
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/settings/preferences/SharedPreferenceUtils.java b/termux-shared/src/main/java/com/termux/shared/settings/preferences/SharedPreferenceUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/settings/preferences/SharedPreferenceUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/settings/preferences/SharedPreferenceUtils.java\n@@ -245,17 +245,22 @@ public static void setLong(SharedPreferences sharedPreferences, String key, long\n      * @param sharedPreferences The {@link SharedPreferences} to get the value from.\n      * @param key The key for the value.\n      * @param def The default value if failed to read a valid value.\n+     * @param defIfEmpty If set to {@code true}, then {@code def} will be returned if value is empty.\n      * @return Returns the {@code String} value stored in {@link SharedPreferences}, otherwise returns\n      * default if failed to read a valid value, like in case of an exception.\n      */\n-    public static String getString(SharedPreferences sharedPreferences, String key, String def) {\n+    public static String getString(SharedPreferences sharedPreferences, String key, String def, boolean defIfEmpty) {\n         if (sharedPreferences == null) {\n             Logger.logError(LOG_TAG, \"Error getting String value for the \\\"\" + key + \"\\\" key from null shared preferences. Returning default value \\\"\" + def + \"\\\".\");\n             return def;\n         }\n \n         try {\n-            return sharedPreferences.getString(key, def);\n+            String value = sharedPreferences.getString(key, def);\n+            if (defIfEmpty && (value == null || value.isEmpty()))\n+                return def;\n+            else\n+                return value;\n         }\n         catch (ClassCastException e) {\n             Logger.logStackTraceWithMessage(LOG_TAG, \"Error getting String value for the \\\"\" + key + \"\\\" key from shared preferences. Returning default value \\\"\" + def + \"\\\".\", e);\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/settings/preferences/TermuxAppSharedPreferences.java b/termux-shared/src/main/java/com/termux/shared/settings/preferences/TermuxAppSharedPreferences.java\n--- a/termux-shared/src/main/java/com/termux/shared/settings/preferences/TermuxAppSharedPreferences.java\n+++ b/termux-shared/src/main/java/com/termux/shared/settings/preferences/TermuxAppSharedPreferences.java\n@@ -178,7 +178,7 @@ public void changeFontSize(boolean increase) {\n \n \n     public String getCurrentSession() {\n-        return SharedPreferenceUtils.getString(mSharedPreferences, TERMUX_APP.KEY_CURRENT_SESSION, null);\n+        return SharedPreferenceUtils.getString(mSharedPreferences, TERMUX_APP.KEY_CURRENT_SESSION, null, true);\n     }\n \n     public void setCurrentSession(String value) {",
    "output": "Added/Fixed: Add support to consider empty String values as null for SharedPreferences"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/logger/Logger.java b/termux-shared/src/main/java/com/termux/shared/logger/Logger.java\n--- a/termux-shared/src/main/java/com/termux/shared/logger/Logger.java\n+++ b/termux-shared/src/main/java/com/termux/shared/logger/Logger.java\n@@ -439,6 +439,7 @@ public static boolean isLogLevelValid(Integer logLevel) {\n     /** Check if custom log level is valid and >= {@link #CURRENT_LOG_LEVEL}. If custom log level is\n      * not valid then {@link #LOG_LEVEL_VERBOSE} must be >= {@link #CURRENT_LOG_LEVEL}. */\n     public static boolean shouldEnableLoggingForCustomLogLevel(Integer customLogLevel) {\n+        if (customLogLevel == null || CURRENT_LOG_LEVEL == LOG_LEVEL_OFF) return false;\n         customLogLevel = Logger.isLogLevelValid(customLogLevel) ? customLogLevel: Logger.LOG_LEVEL_VERBOSE;\n         return (customLogLevel >= CURRENT_LOG_LEVEL);\n     }",
    "output": "Fixed: Ensure custom log level doesn't log if its off or null"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/activities/SettingsActivity.java b/app/src/main/java/com/termux/app/activities/SettingsActivity.java\n--- a/app/src/main/java/com/termux/app/activities/SettingsActivity.java\n+++ b/app/src/main/java/com/termux/app/activities/SettingsActivity.java\n@@ -18,6 +18,7 @@\n import com.termux.shared.interact.ShareUtils;\n import com.termux.shared.packages.PackageUtils;\n import com.termux.shared.settings.preferences.TermuxAPIAppSharedPreferences;\n+import com.termux.shared.settings.preferences.TermuxFloatAppSharedPreferences;\n import com.termux.shared.settings.preferences.TermuxTaskerAppSharedPreferences;\n import com.termux.shared.termux.AndroidUtils;\n import com.termux.shared.termux.TermuxConstants;\n@@ -57,6 +58,7 @@ public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {\n             setPreferencesFromResource(R.xml.root_preferences, rootKey);\n \n             configureTermuxAPIPreference(context);\n+            configureTermuxFloatPreference(context);\n             configureTermuxTaskerPreference(context);\n             configureAboutPreference(context);\n             configureDonatePreference(context);\n@@ -71,6 +73,15 @@ private void configureTermuxAPIPreference(@NonNull Context context) {\n             }\n         }\n \n+        private void configureTermuxFloatPreference(@NonNull Context context) {\n+            Preference termuxFloatPreference = findPreference(\"termux_float\");\n+            if (termuxFloatPreference != null) {\n+                TermuxFloatAppSharedPreferences preferences = TermuxFloatAppSharedPreferences.build(context, false);\n+                // If failed to get app preferences, then likely app is not installed, so do not show its preference\n+                termuxFloatPreference.setVisible(preferences != null);\n+            }\n+        }\n+\n         private void configureTermuxTaskerPreference(@NonNull Context context) {\n             Preference termuxTaskerPreference = findPreference(\"termux_tasker\");\n             if (termuxTaskerPreference != null) {\n\ndiff --git a/app/src/main/java/com/termux/app/fragments/settings/TermuxFloatPreferencesFragment.java b/app/src/main/java/com/termux/app/fragments/settings/TermuxFloatPreferencesFragment.java\n--- a/app/src/main/java/com/termux/app/fragments/settings/TermuxFloatPreferencesFragment.java\n+++ b/app/src/main/java/com/termux/app/fragments/settings/TermuxFloatPreferencesFragment.java\n@@ -0,0 +1,49 @@\n+package com.termux.app.fragments.settings;\n+\n+import android.content.Context;\n+import android.os.Bundle;\n+\n+import androidx.annotation.Keep;\n+import androidx.preference.PreferenceDataStore;\n+import androidx.preference.PreferenceFragmentCompat;\n+import androidx.preference.PreferenceManager;\n+\n+import com.termux.R;\n+import com.termux.shared.settings.preferences.TermuxFloatAppSharedPreferences;\n+\n+@Keep\n+public class TermuxFloatPreferencesFragment extends PreferenceFragmentCompat {\n+\n+    @Override\n+    public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {\n+        Context context = getContext();\n+        if (context == null) return;\n+\n+        PreferenceManager preferenceManager = getPreferenceManager();\n+        preferenceManager.setPreferenceDataStore(TermuxFloatPreferencesDataStore.getInstance(context));\n+\n+        setPreferencesFromResource(R.xml.termux_float_preferences, rootKey);\n+    }\n+\n+}\n+\n+class TermuxFloatPreferencesDataStore extends PreferenceDataStore {\n+\n+    private final Context mContext;\n+    private final TermuxFloatAppSharedPreferences mPreferences;\n+\n+    private static TermuxFloatPreferencesDataStore mInstance;\n+\n+    private TermuxFloatPreferencesDataStore(Context context) {\n+        mContext = context;\n+        mPreferences = TermuxFloatAppSharedPreferences.build(context, true);\n+    }\n+\n+    public static synchronized TermuxFloatPreferencesDataStore getInstance(Context context) {\n+        if (mInstance == null) {\n+            mInstance = new TermuxFloatPreferencesDataStore(context);\n+        }\n+        return mInstance;\n+    }\n+\n+}\n\ndiff --git a/app/src/main/java/com/termux/app/fragments/settings/termux_float/DebuggingPreferencesFragment.java b/app/src/main/java/com/termux/app/fragments/settings/termux_float/DebuggingPreferencesFragment.java\n--- a/app/src/main/java/com/termux/app/fragments/settings/termux_float/DebuggingPreferencesFragment.java\n+++ b/app/src/main/java/com/termux/app/fragments/settings/termux_float/DebuggingPreferencesFragment.java\n@@ -0,0 +1,126 @@\n+package com.termux.app.fragments.settings.termux_float;\n+\n+import android.content.Context;\n+import android.os.Bundle;\n+\n+import androidx.annotation.Keep;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.preference.ListPreference;\n+import androidx.preference.PreferenceCategory;\n+import androidx.preference.PreferenceDataStore;\n+import androidx.preference.PreferenceFragmentCompat;\n+import androidx.preference.PreferenceManager;\n+\n+import com.termux.R;\n+import com.termux.shared.settings.preferences.TermuxFloatAppSharedPreferences;\n+\n+@Keep\n+public class DebuggingPreferencesFragment extends PreferenceFragmentCompat {\n+\n+    @Override\n+    public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {\n+        Context context = getContext();\n+        if (context == null) return;\n+\n+        PreferenceManager preferenceManager = getPreferenceManager();\n+        preferenceManager.setPreferenceDataStore(DebuggingPreferencesDataStore.getInstance(context));\n+\n+        setPreferencesFromResource(R.xml.termux_float_debugging_preferences, rootKey);\n+\n+        configureLoggingPreferences(context);\n+    }\n+\n+    private void configureLoggingPreferences(@NonNull Context context) {\n+        PreferenceCategory loggingCategory = findPreference(\"logging\");\n+        if (loggingCategory == null) return;\n+\n+        ListPreference logLevelListPreference = findPreference(\"log_level\");\n+        if (logLevelListPreference != null) {\n+            TermuxFloatAppSharedPreferences preferences = TermuxFloatAppSharedPreferences.build(context, true);\n+            if (preferences == null) return;\n+\n+            com.termux.app.fragments.settings.termux.DebuggingPreferencesFragment.\n+                setLogLevelListPreferenceData(logLevelListPreference, context, preferences.getLogLevel(true));\n+            loggingCategory.addPreference(logLevelListPreference);\n+        }\n+    }\n+}\n+\n+class DebuggingPreferencesDataStore extends PreferenceDataStore {\n+\n+    private final Context mContext;\n+    private final TermuxFloatAppSharedPreferences mPreferences;\n+\n+    private static DebuggingPreferencesDataStore mInstance;\n+\n+    private DebuggingPreferencesDataStore(Context context) {\n+        mContext = context;\n+        mPreferences = TermuxFloatAppSharedPreferences.build(context, true);\n+    }\n+\n+    public static synchronized DebuggingPreferencesDataStore getInstance(Context context) {\n+        if (mInstance == null) {\n+            mInstance = new DebuggingPreferencesDataStore(context);\n+        }\n+        return mInstance;\n+    }\n+\n+\n+\n+    @Override\n+    @Nullable\n+    public String getString(String key, @Nullable String defValue) {\n+        if (mPreferences == null) return null;\n+        if (key == null) return null;\n+\n+        switch (key) {\n+            case \"log_level\":\n+                return String.valueOf(mPreferences.getLogLevel(true));\n+            default:\n+                return null;\n+        }\n+    }\n+\n+    @Override\n+    public void putString(String key, @Nullable String value) {\n+        if (mPreferences == null) return;\n+        if (key == null) return;\n+\n+        switch (key) {\n+            case \"log_level\":\n+                if (value != null) {\n+                    mPreferences.setLogLevel(mContext, Integer.parseInt(value), true);\n+                }\n+                break;\n+            default:\n+                break;\n+        }\n+    }\n+\n+    @Override\n+    public void putBoolean(String key, boolean value) {\n+        if (mPreferences == null) return;\n+        if (key == null) return;\n+\n+        switch (key) {\n+            case \"terminal_view_key_logging_enabled\":\n+                mPreferences.setTerminalViewKeyLoggingEnabled(value, true);\n+                break;\n+            default:\n+                break;\n+        }\n+    }\n+\n+    @Override\n+    public boolean getBoolean(String key, boolean defValue) {\n+        if (mPreferences == null) return false;\n+        switch (key) {\n+            case \"terminal_view_key_logging_enabled\":\n+                return mPreferences.isTerminalViewKeyLoggingEnabled(true);\n+            default:\n+                return false;\n+        }\n+    }\n+\n+}",
    "output": "Added: Add termux-float log level settings in termux app settings"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n@@ -12,7 +12,7 @@\n import java.util.List;\n \n /*\n- * Version: v0.26.0\n+ * Version: v0.27.0\n  *\n  * Changelog\n  *\n@@ -182,6 +182,11 @@\n  * - 0.26.0 (2021-08-25)\n  *      - Changed `TERMUX_ACTIVITY.ACTION_FAILSAFE_SESSION` to `TERMUX_ACTIVITY.EXTRA_FAILSAFE_SESSION`.\n  *\n+ * - 0.27.0 (2021-09-02)\n+ *      - Added `TERMUX_FLOAT_APP_NOTIFICATION_CHANNEL_ID`, `TERMUX_FLOAT_APP_NOTIFICATION_CHANNEL_NAME`,\n+ *          `TERMUX_FLOAT_APP.TERMUX_FLOAT_SERVICE_NAME`.\n+ *      - Added following to `TERMUX_FLOAT_APP.TERMUX_FLOAT_SERVICE`:\n+ *          `ACTION_STOP_SERVICE`, `ACTION_SHOW`, `ACTION_HIDE`.\n  */\n \n /**\n@@ -719,6 +724,14 @@ public final class TermuxConstants {\n     public static final String TERMUX_CRASH_REPORTS_NOTIFICATION_CHANNEL_NAME = TermuxConstants.TERMUX_APP_NAME + \" Crash Reports\";\n \n \n+    /** Termux app notification channel id used by {@link TERMUX_FLOAT_APP.TERMUX_FLOAT_SERVICE} */\n+    public static final String TERMUX_FLOAT_APP_NOTIFICATION_CHANNEL_ID = \"termux_float_notification_channel\";\n+    /** Termux app notification channel name used by {@link TERMUX_FLOAT_APP.TERMUX_FLOAT_SERVICE} */\n+    public static final String TERMUX_FLOAT_APP_NOTIFICATION_CHANNEL_NAME = TermuxConstants.TERMUX_FLOAT_APP_NAME + \" App\";\n+    /** Termux app unique notification id used by {@link TERMUX_APP.TERMUX_SERVICE} */\n+    public static final int TERMUX_FLOAT_APP_NOTIFICATION_ID = 1339;\n+\n+\n \n \n \n@@ -1061,7 +1074,37 @@ public static final class RESULT_SENDER {\n \n \n     /**\n-     * Termux:Styling app constants.\n+     * Termux Float app constants.\n+     */\n+    public static final class TERMUX_FLOAT_APP {\n+\n+        /** Termux Float app core service name. */\n+        public static final String TERMUX_FLOAT_SERVICE_NAME = TERMUX_FLOAT_PACKAGE_NAME + \".TermuxFloatService\"; // Default: \"com.termux.window.TermuxFloatService\"\n+\n+        /**\n+         * Termux Float app core service.\n+         */\n+        public static final class TERMUX_FLOAT_SERVICE {\n+\n+            /** Intent action to stop TERMUX_FLOAT_SERVICE */\n+            public static final String ACTION_STOP_SERVICE = TERMUX_FLOAT_PACKAGE_NAME + \".stop_service\"; // Default: \"com.termux.window.stop_service\"\n+\n+            /** Intent action to show float window */\n+            public static final String ACTION_SHOW = TERMUX_FLOAT_PACKAGE_NAME + \".show\"; // Default: \"com.termux.window.show\"\n+\n+            /** Intent action to hide float window */\n+            public static final String ACTION_HIDE = TERMUX_FLOAT_PACKAGE_NAME + \".hide\"; // Default: \"com.termux.window.hide\"\n+\n+        }\n+\n+    }\n+\n+\n+\n+\n+\n+    /**\n+     * Termux Styling app constants.\n      */\n     public static final class TERMUX_STYLING {\n ",
    "output": "Added: Add constants for termux-float in TermuxConstants"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java b/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java\n--- a/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java\n+++ b/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java\n@@ -1,14 +1,16 @@\n package com.termux.filepicker;\n \n import android.app.Activity;\n-import android.app.AlertDialog;\n import android.content.Intent;\n import android.database.Cursor;\n import android.net.Uri;\n import android.provider.OpenableColumns;\n import android.util.Patterns;\n \n import com.termux.R;\n+import com.termux.shared.data.DataUtils;\n+import com.termux.shared.data.IntentUtils;\n+import com.termux.shared.interact.MessageDialogUtils;\n import com.termux.shared.interact.TextInputDialogUtils;\n import com.termux.shared.termux.TermuxConstants;\n import com.termux.shared.termux.TermuxConstants.TERMUX_APP.TERMUX_SERVICE;\n@@ -39,6 +41,8 @@ public class TermuxFileReceiverActivity extends Activity {\n      */\n     boolean mFinishOnDismissNameDialog = true;\n \n+    private static final String API_TAG = TermuxConstants.TERMUX_APP_NAME + \"FileReceiver\";\n+\n     private static final String LOG_TAG = \"TermuxFileReceiverActivity\";\n \n     static boolean isSharedTextAnUrl(String sharedText) {\n@@ -55,44 +59,66 @@ protected void onResume() {\n         final String type = intent.getType();\n         final String scheme = intent.getScheme();\n \n+        Logger.logVerbose(LOG_TAG, \"Intent Received:\\n\" + IntentUtils.getIntentString(intent));\n+\n+        final String sharedTitle = IntentUtils.getStringExtraIfSet(intent, Intent.EXTRA_TITLE, null);\n+\n         if (Intent.ACTION_SEND.equals(action) && type != null) {\n             final String sharedText = intent.getStringExtra(Intent.EXTRA_TEXT);\n             final Uri sharedUri = intent.getParcelableExtra(Intent.EXTRA_STREAM);\n \n-            if (sharedText != null) {\n+            if (sharedUri != null) {\n+                handleContentUri(sharedUri, sharedTitle);\n+            } else if (sharedText != null) {\n                 if (isSharedTextAnUrl(sharedText)) {\n                     handleUrlAndFinish(sharedText);\n                 } else {\n-                    String subject = intent.getStringExtra(Intent.EXTRA_SUBJECT);\n-                    if (subject == null) subject = intent.getStringExtra(Intent.EXTRA_TITLE);\n+                    String subject = IntentUtils.getStringExtraIfSet(intent, Intent.EXTRA_SUBJECT, null);\n+                    if (subject == null) subject = sharedTitle;\n                     if (subject != null) subject += \".txt\";\n                     promptNameAndSave(new ByteArrayInputStream(sharedText.getBytes(StandardCharsets.UTF_8)), subject);\n                 }\n-            } else if (sharedUri != null) {\n-                handleContentUri(sharedUri, intent.getStringExtra(Intent.EXTRA_TITLE));\n             } else {\n                 showErrorDialogAndQuit(\"Send action without content - nothing to save.\");\n             }\n-        } else if (\"content\".equals(scheme)) {\n-            handleContentUri(intent.getData(), intent.getStringExtra(Intent.EXTRA_TITLE));\n-        } else if (\"file\".equals(scheme)) {\n-            // When e.g. clicking on a downloaded apk:\n-            String path = intent.getData().getPath();\n-            File file = new File(path);\n-            try {\n-                FileInputStream in = new FileInputStream(file);\n-                promptNameAndSave(in, file.getName());\n-            } catch (FileNotFoundException e) {\n-                showErrorDialogAndQuit(\"Cannot open file: \" + e.getMessage() + \".\");\n-            }\n         } else {\n-            showErrorDialogAndQuit(\"Unable to receive any file or URL.\");\n+            Uri dataUri = intent.getData();\n+\n+            if (dataUri == null) {\n+                showErrorDialogAndQuit(\"Data uri not passed.\");\n+                return;\n+            }\n+\n+            if (\"content\".equals(scheme)) {\n+                handleContentUri(dataUri, sharedTitle);\n+            } else if (\"file\".equals(scheme)) {\n+                // When e.g. clicking on a downloaded apk:\n+                String path = dataUri.getPath();\n+                if (DataUtils.isNullOrEmpty(path)) {\n+                    showErrorDialogAndQuit(\"File path from data uri is null, empty or invalid.\");\n+                    return;\n+                }\n+\n+                File file = new File(path);\n+                try {\n+                    FileInputStream in = new FileInputStream(file);\n+                    promptNameAndSave(in, file.getName());\n+                } catch (FileNotFoundException e) {\n+                    showErrorDialogAndQuit(\"Cannot open file: \" + e.getMessage() + \".\");\n+                }\n+            } else {\n+                showErrorDialogAndQuit(\"Unable to receive any file or URL.\");\n+            }\n         }\n     }\n \n     void showErrorDialogAndQuit(String message) {\n         mFinishOnDismissNameDialog = false;\n-        new AlertDialog.Builder(this).setMessage(message).setOnDismissListener(dialog -> finish()).setPositiveButton(android.R.string.ok, (dialog, which) -> finish()).show();\n+        MessageDialogUtils.showMessage(this,\n+            API_TAG, message,\n+            null, (dialog, which) -> finish(),\n+            null, null,\n+            dialog -> finish());\n     }\n \n     void handleContentUri(final Uri uri, String subjectFromIntent) {\n@@ -157,10 +183,17 @@ void promptNameAndSave(final InputStream in, final String attachmentFileName) {\n \n     public File saveStreamWithName(InputStream in, String attachmentFileName) {\n         File receiveDir = new File(TERMUX_RECEIVEDIR);\n+\n+        if (DataUtils.isNullOrEmpty(attachmentFileName)) {\n+            showErrorDialogAndQuit(\"File name cannot be null or empty\");\n+            return null;\n+        }\n+\n         if (!receiveDir.isDirectory() && !receiveDir.mkdirs()) {\n             showErrorDialogAndQuit(\"Cannot create directory: \" + receiveDir.getAbsolutePath());\n             return null;\n         }\n+\n         try {\n             final File outFile = new File(receiveDir, attachmentFileName);\n             try (FileOutputStream f = new FileOutputStream(outFile)) {\n@@ -182,7 +215,7 @@ void handleUrlAndFinish(final String url) {\n         final File urlOpenerProgramFile = new File(URL_OPENER_PROGRAM);\n         if (!urlOpenerProgramFile.isFile()) {\n             showErrorDialogAndQuit(\"The following file does not exist:\\n$HOME/bin/termux-url-opener\\n\\n\"\n-                + \"Create this file as a script or a symlink - it will be called with the shared URL as only argument.\");\n+                + \"Create this file as a script or a symlink - it will be called with the shared URL as the first argument.\");\n             return;\n         }\n ",
    "output": "Fixed|Changed: Fix TermuxFileReceiverActivity incorrect handling of intent extras\n\n- If the `EXTRA_TEXT` value of the intent passed was empty instead of `null`, it was incorrectly assumed that text was passed, even though a valid `EXTRA_STREAM` may have been passed. Now `EXTRA_STREAM` will be checked first.\n- Added empty extra and empty/`null` filename checks before trying to create a file with an empty filename and failing.\n- Enable logging of intent passed at verbose log level.\n- Changed to a better error dialog.\n\nCloses #2247"
  },
  {
    "input": "diff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -764,6 +764,10 @@ public void inputCodePoint(int codePoint, boolean controlDownFromEvent, boolean\n \n         if (mTermSession == null) return;\n \n+        // Ensure cursor is shown when a key is pressed down like long hold on (arrow) keys\n+        if (mEmulator != null)\n+            mEmulator.setCursorBlinkState(true);\n+\n         final boolean controlDown = controlDownFromEvent || mClient.readControlKey();\n         final boolean altDown = leftAltDownFromEvent || mClient.readAltKey();\n ",
    "output": "Fixed: Fix terminal cursor blinker not stopping when typing a character in non-gboard keyboards"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n@@ -216,7 +216,8 @@ public boolean onKeyDown(int keyCode, KeyEvent e, TerminalSession currentSession\n         if (keyCode == KeyEvent.KEYCODE_ENTER && !currentSession.isRunning()) {\n             mTermuxTerminalSessionClient.removeFinishedSession(currentSession);\n             return true;\n-        } else if (e.isCtrlPressed() && e.isAltPressed()) {\n+        } else if (!mActivity.getProperties().areHardwareKeyboardShortcutsDisabled() &&\n+            e.isCtrlPressed() && e.isAltPressed()) {\n             // Get the unmodified code point:\n             int unicodeChar = e.getUnicodeChar(0);\n \n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxPropertyConstants.java b/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxPropertyConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxPropertyConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxPropertyConstants.java\n@@ -72,6 +72,10 @@ public final class TermuxPropertyConstants {\n \n     /* boolean */\n \n+    /** Defines the key for whether hardware keyboard shortcuts are enabled. */\n+    public static final String KEY_DISABLE_HARDWARE_KEYBOARD_SHORTCUTS =  \"disable-hardware-keyboard-shortcuts\"; // Default: \"disable-hardware-keyboard-shortcuts\"\n+\n+\n     /** Defines the key for whether a toast will be shown when user changes the terminal session */\n     public static final String KEY_DISABLE_TERMINAL_SESSION_CHANGE_TOAST =  \"disable-terminal-session-change-toast\"; // Default: \"disable-terminal-session-change-toast\"\n \n@@ -295,6 +299,7 @@ public final class TermuxPropertyConstants {\n      * */\n     public static final Set<String> TERMUX_PROPERTIES_LIST = new HashSet<>(Arrays.asList(\n         /* boolean */\n+        KEY_DISABLE_HARDWARE_KEYBOARD_SHORTCUTS,\n         KEY_DISABLE_TERMINAL_SESSION_CHANGE_TOAST,\n         KEY_ENFORCE_CHAR_BASED_INPUT,\n         KEY_HIDE_SOFT_KEYBOARD_ON_STARTUP,\n@@ -335,6 +340,7 @@ public final class TermuxPropertyConstants {\n      * default: false\n      * */\n     public static final Set<String> TERMUX_DEFAULT_BOOLEAN_BEHAVIOUR_PROPERTIES_LIST = new HashSet<>(Arrays.asList(\n+        KEY_DISABLE_HARDWARE_KEYBOARD_SHORTCUTS,\n         KEY_DISABLE_TERMINAL_SESSION_CHANGE_TOAST,\n         KEY_ENFORCE_CHAR_BASED_INPUT,\n         KEY_HIDE_SOFT_KEYBOARD_ON_STARTUP,\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxSharedProperties.java b/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxSharedProperties.java\n--- a/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxSharedProperties.java\n+++ b/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxSharedProperties.java\n@@ -460,6 +460,10 @@ public static String getVolumeKeysBehaviourInternalPropertyValueFromValue(String\n \n \n \n+    public boolean areHardwareKeyboardShortcutsDisabled() {\n+        return (boolean) getInternalPropertyValue(TermuxPropertyConstants.KEY_DISABLE_TERMINAL_SESSION_CHANGE_TOAST, true);\n+    }\n+\n     public boolean areTerminalSessionChangeToastsDisabled() {\n         return (boolean) getInternalPropertyValue(TermuxPropertyConstants.KEY_DISABLE_TERMINAL_SESSION_CHANGE_TOAST, true);\n     }",
    "output": "Added: Allow users to disable hardware keyboard shortcuts\n\nThe user can add `disable-hardware-keyboard-shortcuts=true` entry to `termux.properties` file to disable hardware keyboard shortcuts. The default value is `false`. Running `termux-reload-settings` command will also update the behaviour instantaneously if changed. Note that for `ctrl+alt+p` to work, you need to unset `shortcut.rename-session = ctrl + n`. https://wiki.termux.com/wiki/Terminal_Settings\n\nCloses #1825"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n@@ -75,6 +75,10 @@ public TermuxTerminalViewClient(TermuxActivity activity, TermuxTerminalSessionCl\n         this.mTermuxTerminalSessionClient = termuxTerminalSessionClient;\n     }\n \n+    public TermuxActivity getActivity() {\n+        return mActivity;\n+    }\n+\n     /**\n      * Should be called when mActivity.onCreate() is called\n      */\n\ndiff --git a/app/src/main/java/com/termux/app/terminal/io/TermuxTerminalExtraKeys.java b/app/src/main/java/com/termux/app/terminal/io/TermuxTerminalExtraKeys.java\n--- a/app/src/main/java/com/termux/app/terminal/io/TermuxTerminalExtraKeys.java\n+++ b/app/src/main/java/com/termux/app/terminal/io/TermuxTerminalExtraKeys.java\n@@ -7,7 +7,6 @@\n import androidx.annotation.NonNull;\n import androidx.drawerlayout.widget.DrawerLayout;\n \n-import com.termux.R;\n import com.termux.app.terminal.TermuxTerminalSessionClient;\n import com.termux.app.terminal.TermuxTerminalViewClient;\n import com.termux.shared.terminal.io.TerminalExtraKeys;\n@@ -34,8 +33,11 @@ public void onTerminalExtraKeyButtonClick(View view, String key, boolean ctrlDow\n             if(mTermuxTerminalViewClient != null)\n                 mTermuxTerminalViewClient.onToggleSoftKeyboardRequest();\n         } else if (\"DRAWER\".equals(key)) {\n-            DrawerLayout drawer = view.findViewById(R.id.drawer_layout);\n-            drawer.openDrawer(Gravity.LEFT);\n+            DrawerLayout drawerLayout = mTermuxTerminalViewClient.getActivity().getDrawer();\n+            if (drawerLayout.isDrawerOpen(Gravity.LEFT))\n+                drawerLayout.closeDrawer(Gravity.LEFT);\n+            else\n+                drawerLayout.openDrawer(Gravity.LEFT);\n         } else if (\"PASTE\".equals(key)) {\n             if(mTermuxTerminalSessionClient != null)\n                 mTermuxTerminalSessionClient.onPasteTextFromClipboard(null);",
    "output": "Changed|Fixed: Drawer extra-keys button will toggle instead of just opening\n\nAlso fixed NullPointerException due to changes in 2a74d43c"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/file/TermuxFileUtils.java b/termux-shared/src/main/java/com/termux/shared/file/TermuxFileUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/file/TermuxFileUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/file/TermuxFileUtils.java\n@@ -230,7 +230,7 @@ public static Error isTermuxFilesDirectoryAccessible(@NonNull final Context cont\n      * @param context The context for operations.\n      * @return Returns the markdown {@link String}.\n      */\n-    public static String getTermuxFilesDirStatMarkdownString(@NonNull final Context context) {\n+    public static String getTermuxFilesStatMarkdownString(@NonNull final Context context) {\n         Context termuxPackageContext = TermuxUtils.getTermuxPackageContext(context);\n         if (termuxPackageContext == null) return null;\n \n@@ -241,7 +241,7 @@ public static String getTermuxFilesDirStatMarkdownString(@NonNull final Context\n         StringBuilder statScript = new StringBuilder();\n         statScript\n             .append(\"echo 'ls info:'\\n\")\n-            .append(\"/system/bin/ls -lhd\")\n+            .append(\"/system/bin/ls -lhdZ\")\n             .append(\" '/data/data'\")\n             .append(\" '/data/user/0'\")\n             .append(\" '\" + TermuxConstants.TERMUX_INTERNAL_PRIVATE_APP_DATA_DIR_PATH + \"'\")\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n@@ -368,7 +368,7 @@ public static String geAPTInfoMarkdownString(@NonNull final Context context) {\n      * @return Returns the markdown {@link String}.\n      */\n     public static String getTermuxDebugMarkdownString(@NonNull final Context context) {\n-        String statInfo = TermuxFileUtils.getTermuxFilesDirStatMarkdownString(context);\n+        String statInfo = TermuxFileUtils.getTermuxFilesStatMarkdownString(context);\n         String logcatInfo = getLogcatDumpMarkdownString(context);\n \n         if (statInfo != null && logcatInfo != null)",
    "output": "Changed: Add selinux context info to termux files info of debug output"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n@@ -302,6 +302,11 @@ public boolean readShiftKey() {\n         return readExtraKeysSpecialButton(SpecialButton.SHIFT);\n     }\n \n+    @Override\n+    public boolean readFnKey() {\n+        return readExtraKeysSpecialButton(SpecialButton.FN);\n+    }\n+\n     public boolean readExtraKeysSpecialButton(SpecialButton specialButton) {\n         if (mActivity.getExtraKeysView() == null) return false;\n         Boolean state = mActivity.getExtraKeysView().readSpecialButton(specialButton, true);\n\ndiff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -599,14 +599,16 @@ public boolean onKeyDown(int keyCode, KeyEvent event) {\n         final boolean controlDown = event.isCtrlPressed() || mClient.readControlKey();\n         final boolean leftAltDown = (metaState & KeyEvent.META_ALT_LEFT_ON) != 0 || mClient.readAltKey();\n         final boolean shiftDown = event.isShiftPressed() || mClient.readShiftKey();\n+        final boolean fnDown = event.isFunctionPressed() || mClient.readFnKey();\n         final boolean rightAltDownFromEvent = (metaState & KeyEvent.META_ALT_RIGHT_ON) != 0;\n \n         int keyMod = 0;\n         if (controlDown) keyMod |= KeyHandler.KEYMOD_CTRL;\n         if (event.isAltPressed() || leftAltDown) keyMod |= KeyHandler.KEYMOD_ALT;\n         if (shiftDown) keyMod |= KeyHandler.KEYMOD_SHIFT;\n         if (event.isNumLockOn()) keyMod |= KeyHandler.KEYMOD_NUM_LOCK;\n-        if (!event.isFunctionPressed() && handleKeyCode(keyCode, keyMod)) {\n+        // https://github.com/termux/termux-app/issues/731\n+        if (!fnDown && handleKeyCode(keyCode, keyMod)) {\n             if (TERMINAL_VIEW_KEY_LOGGING_ENABLED) mClient.logInfo(LOG_TAG, \"handleKeyCode() took key event\");\n             return true;\n         }\n@@ -622,6 +624,7 @@ public boolean onKeyDown(int keyCode, KeyEvent event) {\n         int effectiveMetaState = event.getMetaState() & ~bitsToClear;\n \n         if (shiftDown) effectiveMetaState |= KeyEvent.META_SHIFT_ON | KeyEvent.META_SHIFT_LEFT_ON;\n+        if (fnDown) effectiveMetaState |= KeyEvent.META_FUNCTION_ON;\n \n         int result = event.getUnicodeChar(effectiveMetaState);\n         if (TERMINAL_VIEW_KEY_LOGGING_ENABLED)\n\ndiff --git a/terminal-view/src/main/java/com/termux/view/TerminalViewClient.java b/terminal-view/src/main/java/com/termux/view/TerminalViewClient.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalViewClient.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalViewClient.java\n@@ -56,6 +56,8 @@ public interface TerminalViewClient {\n \n     boolean readShiftKey();\n \n+    boolean readFnKey();\n+\n \n \n     boolean onCodePoint(int codePoint, boolean ctrlDown, TerminalSession session);\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/terminal/TermuxTerminalViewClientBase.java b/termux-shared/src/main/java/com/termux/shared/terminal/TermuxTerminalViewClientBase.java\n--- a/termux-shared/src/main/java/com/termux/shared/terminal/TermuxTerminalViewClientBase.java\n+++ b/termux-shared/src/main/java/com/termux/shared/terminal/TermuxTerminalViewClientBase.java\n@@ -67,10 +67,16 @@ public boolean readAltKey() {\n         return false;\n     }\n \n+    @Override\n     public boolean readShiftKey() {\n         return false;\n     }\n \n+    @Override\n+    public boolean readFnKey() {\n+        return false;\n+    }\n+\n \n \n     @Override",
    "output": "Fixed: Ensure `FN` extra key is read by the terminal\n\nCan't find info on why it wasn't being read before"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n@@ -297,6 +297,11 @@ public boolean readAltKey() {\n         return readExtraKeysSpecialButton(SpecialButton.ALT);\n     }\n \n+    @Override\n+    public boolean readShiftKey() {\n+        return readExtraKeysSpecialButton(SpecialButton.SHIFT);\n+    }\n+\n     public boolean readExtraKeysSpecialButton(SpecialButton specialButton) {\n         if (mActivity.getExtraKeysView() == null) return false;\n         Boolean state = mActivity.getExtraKeysView().readSpecialButton(specialButton, true);\n\ndiff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -598,12 +598,13 @@ public boolean onKeyDown(int keyCode, KeyEvent event) {\n         final int metaState = event.getMetaState();\n         final boolean controlDown = event.isCtrlPressed() || mClient.readControlKey();\n         final boolean leftAltDown = (metaState & KeyEvent.META_ALT_LEFT_ON) != 0 || mClient.readAltKey();\n+        final boolean shiftDown = event.isShiftPressed() || mClient.readShiftKey();\n         final boolean rightAltDownFromEvent = (metaState & KeyEvent.META_ALT_RIGHT_ON) != 0;\n \n         int keyMod = 0;\n         if (controlDown) keyMod |= KeyHandler.KEYMOD_CTRL;\n         if (event.isAltPressed() || leftAltDown) keyMod |= KeyHandler.KEYMOD_ALT;\n-        if (event.isShiftPressed()) keyMod |= KeyHandler.KEYMOD_SHIFT;\n+        if (shiftDown) keyMod |= KeyHandler.KEYMOD_SHIFT;\n         if (event.isNumLockOn()) keyMod |= KeyHandler.KEYMOD_NUM_LOCK;\n         if (!event.isFunctionPressed() && handleKeyCode(keyCode, keyMod)) {\n             if (TERMINAL_VIEW_KEY_LOGGING_ENABLED) mClient.logInfo(LOG_TAG, \"handleKeyCode() took key event\");\n@@ -620,6 +621,8 @@ public boolean onKeyDown(int keyCode, KeyEvent event) {\n         }\n         int effectiveMetaState = event.getMetaState() & ~bitsToClear;\n \n+        if (shiftDown) effectiveMetaState |= KeyEvent.META_SHIFT_ON | KeyEvent.META_SHIFT_LEFT_ON;\n+\n         int result = event.getUnicodeChar(effectiveMetaState);\n         if (TERMINAL_VIEW_KEY_LOGGING_ENABLED)\n             mClient.logInfo(LOG_TAG, \"KeyEvent#getUnicodeChar(\" + effectiveMetaState + \") returned: \" + result);\n\ndiff --git a/terminal-view/src/main/java/com/termux/view/TerminalViewClient.java b/terminal-view/src/main/java/com/termux/view/TerminalViewClient.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalViewClient.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalViewClient.java\n@@ -54,6 +54,9 @@ public interface TerminalViewClient {\n \n     boolean readAltKey();\n \n+    boolean readShiftKey();\n+\n+\n \n     boolean onCodePoint(int codePoint, boolean ctrlDown, TerminalSession session);\n \n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/terminal/TermuxTerminalViewClientBase.java b/termux-shared/src/main/java/com/termux/shared/terminal/TermuxTerminalViewClientBase.java\n--- a/termux-shared/src/main/java/com/termux/shared/terminal/TermuxTerminalViewClientBase.java\n+++ b/termux-shared/src/main/java/com/termux/shared/terminal/TermuxTerminalViewClientBase.java\n@@ -67,6 +67,12 @@ public boolean readAltKey() {\n         return false;\n     }\n \n+    public boolean readShiftKey() {\n+        return false;\n+    }\n+\n+\n+\n     @Override\n     public boolean onCodePoint(int codePoint, boolean ctrlDown, TerminalSession session) {\n         return false;\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/terminal/io/extrakeys/ExtraKeysConstants.java b/termux-shared/src/main/java/com/termux/shared/terminal/io/extrakeys/ExtraKeysConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/terminal/io/extrakeys/ExtraKeysConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/terminal/io/extrakeys/ExtraKeysConstants.java\n@@ -173,6 +173,7 @@ public static class EXTRA_KEY_DISPLAY_MAPS {\n     public static final ExtraKeyDisplayMap CONTROL_CHARS_ALIASES = new ExtraKeyDisplayMap() {{\n         put(\"ESCAPE\", \"ESC\");\n         put(\"CONTROL\", \"CTRL\");\n+        put(\"SHFT\", \"SHIFT\");\n         put(\"RETURN\", \"ENTER\"); // Technically different keys, but most applications won't see the difference\n         put(\"FUNCTION\", \"FN\");\n         // no alias for ALT",
    "output": "Added: Add shift key support in extra keys and terminal with `SHIFT` or `SHFT`\n\nCloses #1038"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/settings/properties/SharedProperties.java b/termux-shared/src/main/java/com/termux/shared/settings/properties/SharedProperties.java\n--- a/termux-shared/src/main/java/com/termux/shared/settings/properties/SharedProperties.java\n+++ b/termux-shared/src/main/java/com/termux/shared/settings/properties/SharedProperties.java\n@@ -553,6 +553,17 @@ public static <T> T getDefaultIfNull(@androidx.annotation.Nullable T object, @an\n         return (object == null) ? def : object;\n     }\n \n+    /**\n+     * Get the {@link String} object itself if it is not {@code null} or empty, otherwise default.\n+     *\n+     * @param object The {@link String} to check.\n+     * @param def The default {@link String}.\n+     * @return Returns {@code object} if it is not {@code null}, otherwise returns {@code def}.\n+     */\n+    public static String getDefaultIfNullOrEmpty(@androidx.annotation.Nullable String object, @androidx.annotation.Nullable String def) {\n+        return (object == null || object.isEmpty()) ? def : object;\n+    }\n+\n     /**\n      * Covert the {@link String} value to lowercase.\n      *\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxSharedProperties.java b/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxSharedProperties.java\n--- a/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxSharedProperties.java\n+++ b/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxSharedProperties.java\n@@ -423,7 +423,7 @@ public static String getDefaultWorkingDirectoryInternalPropertyValueFromValue(St\n      * @return Returns the internal value for value.\n      */\n     public static String getExtraKeysInternalPropertyValueFromValue(String value) {\n-        return SharedProperties.getDefaultIfNull(value, TermuxPropertyConstants.DEFAULT_IVALUE_EXTRA_KEYS);\n+        return SharedProperties.getDefaultIfNullOrEmpty(value, TermuxPropertyConstants.DEFAULT_IVALUE_EXTRA_KEYS);\n     }\n \n     /**\n@@ -433,7 +433,7 @@ public static String getExtraKeysInternalPropertyValueFromValue(String value) {\n      * @return Returns the internal value for value.\n      */\n     public static String getExtraKeysStyleInternalPropertyValueFromValue(String value) {\n-        return SharedProperties.getDefaultIfNull(value, TermuxPropertyConstants.DEFAULT_IVALUE_EXTRA_KEYS_STYLE);\n+        return SharedProperties.getDefaultIfNullOrEmpty(value, TermuxPropertyConstants.DEFAULT_IVALUE_EXTRA_KEYS_STYLE);\n     }\n \n     /**",
    "output": "Fixed: Use default values if extra-keys or extra-keys-style termux.properties values are empty"
  },
  {
    "input": "diff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalColorScheme.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalColorScheme.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalColorScheme.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalColorScheme.java\n@@ -57,7 +57,7 @@ public final class TerminalColorScheme {\n         0xff808080, 0xff8a8a8a, 0xff949494, 0xff9e9e9e, 0xffa8a8a8, 0xffb2b2b2, 0xffbcbcbc, 0xffc6c6c6, 0xffd0d0d0, 0xffdadada, 0xffe4e4e4, 0xffeeeeee,\n \n         // COLOR_INDEX_DEFAULT_FOREGROUND, COLOR_INDEX_DEFAULT_BACKGROUND and COLOR_INDEX_DEFAULT_CURSOR:\n-        0xffffffff, 0xff000000, 0xffA9AAA9};\n+        0xffffffff, 0xff000000, 0xffffffff};\n \n     public final int[] mDefaultColors = new int[TextStyle.NUM_INDEXED_COLORS];\n \n\ndiff --git a/terminal-view/src/main/java/com/termux/view/TerminalRenderer.java b/terminal-view/src/main/java/com/termux/view/TerminalRenderer.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalRenderer.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalRenderer.java\n@@ -118,9 +118,13 @@ public final void render(TerminalEmulator mEmulator, Canvas canvas, int topRow,\n                         final int columnWidthSinceLastRun = column - lastRunStartColumn;\n                         final int charsSinceLastRun = currentCharIndex - lastRunStartIndex;\n                         int cursorColor = lastRunInsideCursor ? mEmulator.mColors.mCurrentColors[TextStyle.COLOR_INDEX_CURSOR] : 0;\n+                        boolean invertCursorTextColor = false;\n+                        if (lastRunInsideCursor && cursorShape == TerminalEmulator.TERMINAL_CURSOR_STYLE_BLOCK) {\n+                            invertCursorTextColor = true;\n+                        }\n                         drawTextRun(canvas, line, palette, heightOffset, lastRunStartColumn, columnWidthSinceLastRun,\n                             lastRunStartIndex, charsSinceLastRun, measuredWidthForRun,\n-                            cursorColor, cursorShape, lastRunStyle, reverseVideo || lastRunInsideSelection);\n+                            cursorColor, cursorShape, lastRunStyle, reverseVideo || invertCursorTextColor || lastRunInsideSelection);\n                     }\n                     measuredWidthForRun = 0.f;\n                     lastRunStyle = style;\n@@ -143,8 +147,12 @@ public final void render(TerminalEmulator mEmulator, Canvas canvas, int topRow,\n             final int columnWidthSinceLastRun = columns - lastRunStartColumn;\n             final int charsSinceLastRun = currentCharIndex - lastRunStartIndex;\n             int cursorColor = lastRunInsideCursor ? mEmulator.mColors.mCurrentColors[TextStyle.COLOR_INDEX_CURSOR] : 0;\n+            boolean invertCursorTextColor = false;\n+            if (lastRunInsideCursor && cursorShape == TerminalEmulator.TERMINAL_CURSOR_STYLE_BLOCK) {\n+                invertCursorTextColor = true;\n+            }\n             drawTextRun(canvas, line, palette, heightOffset, lastRunStartColumn, columnWidthSinceLastRun, lastRunStartIndex, charsSinceLastRun,\n-                measuredWidthForRun, cursorColor, cursorShape, lastRunStyle, reverseVideo || lastRunInsideSelection);\n+                measuredWidthForRun, cursorColor, cursorShape, lastRunStyle, reverseVideo || invertCursorTextColor || lastRunInsideSelection);\n         }\n     }\n ",
    "output": "Merge pull request #2228 from termux/cursor-colors\n\nterminal: invert text color under block cursor"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/terminal/io/BellHandler.java b/app/src/main/java/com/termux/app/terminal/io/BellHandler.java\n--- a/app/src/main/java/com/termux/app/terminal/io/BellHandler.java\n+++ b/app/src/main/java/com/termux/app/terminal/io/BellHandler.java\n@@ -1,15 +1,21 @@\n package com.termux.app.terminal.io;\n \n import android.content.Context;\n+import android.os.Build;\n import android.os.Handler;\n import android.os.Looper;\n import android.os.SystemClock;\n+import android.os.VibrationEffect;\n import android.os.Vibrator;\n \n+import com.termux.shared.logger.Logger;\n+\n public class BellHandler {\n     private static BellHandler instance = null;\n     private static final Object lock = new Object();\n \n+    private static final String LOG_TAG = \"BellHandler\";\n+\n     public static BellHandler getInstance(Context context) {\n         if (instance == null) {\n             synchronized (lock) {\n@@ -34,7 +40,17 @@ private BellHandler(final Vibrator vibrator) {\n             @Override\n             public void run() {\n                 if (vibrator != null) {\n-                    vibrator.vibrate(DURATION);\n+                    try {\n+                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n+                            vibrator.vibrate(VibrationEffect.createOneShot(DURATION, VibrationEffect.DEFAULT_AMPLITUDE));\n+                        } else {\n+                            vibrator.vibrate(DURATION);\n+                        }\n+                    } catch (Exception e) {\n+                        // Issue on samsung devices on android 8\n+                        // java.lang.NullPointerException: Attempt to read from field 'android.os.VibrationEffect com.android.server.VibratorService$Vibration.mEffect' on a null object reference\n+                        Logger.logStackTraceWithMessage(LOG_TAG, \"Failed to run vibrator\", e);\n+                    }\n                 }\n             }\n         };",
    "output": "Fixed: Fix NullPointerException when running bell/vibrate on Samsung devices on android 8 and handled deprecated code\n\nApparently occurs on only Samsung android 8 devices and there is no fix for vibrator except catching the exception so that app doesn't crash.\n\nhttps://gitlab.com/juanitobananas/wave-up/-/issues/131\nhttps://github.com/overbound/SonicTimeTwisted/issues/131\nhttps://web.archive.org/web/20201114040257/https://www.badlogicgames.com/forum/viewtopic.php?t=28507\n\n```\njava.lang.NullPointerException: Attempt to read from field 'android.os.VibrationEffect com.android.server.VibratorService$Vibration.mEffect' on a null object reference\nat android.os.Parcel.readException(Parcel.java:2035)\nat android.os.Parcel.readException(Parcel.java:1975)\nat android.os.IVibratorService$Stub$Proxy.vibrate(IVibratorService.java:292)\nat android.os.SystemVibrator.vibrate(SystemVibrator.java:81)\nat android.os.Vibrator.vibrate(Vibrator.java:191)\nat android.os.Vibrator.vibrate(Vibrator.java:110)\nat android.os.Vibrator.vibrate(Vibrator.java:89)\nat com.termux.app.terminal.io.BellHandler$1.run(BellHandler.java:37)\nat com.termux.app.terminal.io.BellHandler.doBell(BellHandler.java:55)\nat com.termux.app.terminal.TermuxTerminalSessionClient.onBell(TermuxTerminalSessionClient.java:178)\nat com.termux.terminal.TerminalSession.onBell(TerminalSession.java:278)\n```"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/RunCommandService.java b/app/src/main/java/com/termux/app/RunCommandService.java\n--- a/app/src/main/java/com/termux/app/RunCommandService.java\n+++ b/app/src/main/java/com/termux/app/RunCommandService.java\n@@ -189,7 +189,7 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n \n         executionCommand.executableUri = new Uri.Builder().scheme(TERMUX_SERVICE.URI_SCHEME_SERVICE_EXECUTE).path(executionCommand.executable).build();\n \n-        Logger.logVerbose(LOG_TAG, executionCommand.toString());\n+        Logger.logVerboseExtended(LOG_TAG, executionCommand.toString());\n \n         // Create execution intent with the action TERMUX_SERVICE#ACTION_SERVICE_EXECUTE to be sent to the TERMUX_SERVICE\n         Intent execIntent = new Intent(TERMUX_SERVICE.ACTION_SERVICE_EXECUTE, executionCommand.executableUri);\n\ndiff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -427,7 +427,7 @@ public synchronized TermuxTask createTermuxTask(ExecutionCommand executionComman\n         }\n \n         if (Logger.getLogLevel() >= Logger.LOG_LEVEL_VERBOSE)\n-            Logger.logVerbose(LOG_TAG, executionCommand.toString());\n+            Logger.logVerboseExtended(LOG_TAG, executionCommand.toString());\n \n         TermuxTask newTermuxTask = TermuxTask.execute(this, executionCommand, this, new TermuxShellEnvironmentClient(), false);\n         if (newTermuxTask == null) {\n@@ -519,7 +519,7 @@ public synchronized TermuxSession createTermuxSession(ExecutionCommand execution\n         }\n \n         if (Logger.getLogLevel() >= Logger.LOG_LEVEL_VERBOSE)\n-            Logger.logVerbose(LOG_TAG, executionCommand.toString());\n+            Logger.logVerboseExtended(LOG_TAG, executionCommand.toString());\n \n         // If the execution command was started for a plugin, only then will the stdout be set\n         // Otherwise if command was manually started by the user like by adding a new terminal session,\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/file/TermuxFileUtils.java b/termux-shared/src/main/java/com/termux/shared/file/TermuxFileUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/file/TermuxFileUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/file/TermuxFileUtils.java\n@@ -264,7 +264,7 @@ public static String getTermuxFilesDirStatMarkdownString(@NonNull final Context\n         executionCommand.backgroundCustomLogLevel = Logger.LOG_LEVEL_OFF;\n         TermuxTask termuxTask = TermuxTask.execute(context, executionCommand, null, new TermuxShellEnvironmentClient(), true);\n         if (termuxTask == null || !executionCommand.isSuccessful()) {\n-            Logger.logError(LOG_TAG, executionCommand.toString());\n+            Logger.logErrorExtended(LOG_TAG, executionCommand.toString());\n             return null;\n         }\n \n@@ -275,7 +275,7 @@ public static String getTermuxFilesDirStatMarkdownString(@NonNull final Context\n \n         boolean stderrSet = !executionCommand.resultData.stderr.toString().isEmpty();\n         if (executionCommand.resultData.exitCode != 0 || stderrSet) {\n-            Logger.logError(LOG_TAG, executionCommand.toString());\n+            Logger.logErrorExtended(LOG_TAG, executionCommand.toString());\n             if (stderrSet)\n                 statOutput.append(\"\\n\").append(executionCommand.resultData.stderr.toString());\n             statOutput.append(\"\\n\").append(\"exit code: \").append(executionCommand.resultData.exitCode.toString());\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/shell/TermuxSession.java b/termux-shared/src/main/java/com/termux/shared/shell/TermuxSession.java\n--- a/termux-shared/src/main/java/com/termux/shared/shell/TermuxSession.java\n+++ b/termux-shared/src/main/java/com/termux/shared/shell/TermuxSession.java\n@@ -125,7 +125,7 @@ public static TermuxSession execute(@NonNull final Context context, @NonNull Exe\n             return null;\n         }\n \n-        Logger.logDebug(LOG_TAG, executionCommand.toString());\n+        Logger.logDebugExtended(LOG_TAG, executionCommand.toString());\n \n         Logger.logDebug(LOG_TAG, \"Running \\\"\" + executionCommand.getCommandIdAndLabelLogString() + \"\\\" TermuxSession\");\n         TerminalSession terminalSession = new TerminalSession(executionCommand.executable, executionCommand.workingDirectory, executionCommand.arguments, environment, executionCommand.terminalTranscriptRows, terminalSessionClient);\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/shell/TermuxTask.java b/termux-shared/src/main/java/com/termux/shared/shell/TermuxTask.java\n--- a/termux-shared/src/main/java/com/termux/shared/shell/TermuxTask.java\n+++ b/termux-shared/src/main/java/com/termux/shared/shell/TermuxTask.java\n@@ -83,7 +83,7 @@ public static TermuxTask execute(@NonNull final Context context, @NonNull Execut\n \n         // No need to log stdin if logging is disabled, like for app internal scripts\n         int customLogLevel = Logger.isLogLevelValid(executionCommand.backgroundCustomLogLevel) ? executionCommand.backgroundCustomLogLevel: Logger.LOG_LEVEL_VERBOSE;\n-        Logger.logDebug(LOG_TAG, ExecutionCommand.getExecutionInputLogString(executionCommand, true, customLogLevel >= Logger.getLogLevel()));\n+        Logger.logDebugExtended(LOG_TAG, ExecutionCommand.getExecutionInputLogString(executionCommand, true, customLogLevel >= Logger.getLogLevel()));\n \n         String taskName = ShellUtils.getExecutableBasename(executionCommand.executable);\n \n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n@@ -345,12 +345,12 @@ public static String geAPTInfoMarkdownString(@NonNull final Context context) {\n         executionCommand.backgroundCustomLogLevel = Logger.LOG_LEVEL_OFF;\n         TermuxTask termuxTask = TermuxTask.execute(context, executionCommand, null, new TermuxShellEnvironmentClient(), true);\n         if (termuxTask == null || !executionCommand.isSuccessful() || executionCommand.resultData.exitCode != 0) {\n-            Logger.logError(LOG_TAG, executionCommand.toString());\n+            Logger.logErrorExtended(LOG_TAG, executionCommand.toString());\n             return null;\n         }\n \n         if (!executionCommand.resultData.stderr.toString().isEmpty())\n-            Logger.logError(LOG_TAG, executionCommand.toString());\n+            Logger.logErrorExtended(LOG_TAG, executionCommand.toString());\n \n         StringBuilder markdownString = new StringBuilder();\n \n@@ -403,7 +403,7 @@ public static String getLogcatDumpMarkdownString(@NonNull final Context context)\n         executionCommand.backgroundCustomLogLevel = Logger.LOG_LEVEL_OFF;\n         TermuxTask termuxTask = TermuxTask.execute(context, executionCommand, null, new TermuxShellEnvironmentClient(), true);\n         if (termuxTask == null || !executionCommand.isSuccessful()) {\n-            Logger.logError(LOG_TAG, executionCommand.toString());\n+            Logger.logErrorExtended(LOG_TAG, executionCommand.toString());\n             return null;\n         }\n \n@@ -414,7 +414,7 @@ public static String getLogcatDumpMarkdownString(@NonNull final Context context)\n \n         boolean stderrSet = !executionCommand.resultData.stderr.toString().isEmpty();\n         if (executionCommand.resultData.exitCode != 0 || stderrSet) {\n-            Logger.logError(LOG_TAG, executionCommand.toString());\n+            Logger.logErrorExtended(LOG_TAG, executionCommand.toString());\n             if (stderrSet)\n                 logcatOutput.append(\"\\n\").append(executionCommand.resultData.stderr.toString());\n             logcatOutput.append(\"\\n\").append(\"exit code: \").append(executionCommand.resultData.exitCode.toString());",
    "output": "Changed: Use extended version of Logger functions for logging execution commands"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/file/TermuxFileUtils.java b/termux-shared/src/main/java/com/termux/shared/file/TermuxFileUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/file/TermuxFileUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/file/TermuxFileUtils.java\n@@ -260,6 +260,7 @@ public static String getTermuxFilesDirStatMarkdownString(@NonNull final Context\n \n         // Run script\n         ExecutionCommand executionCommand = new ExecutionCommand(1, \"/system/bin/sh\", null, statScript.toString() + \"\\n\", \"/\", true, true);\n+        executionCommand.commandLabel = TermuxConstants.TERMUX_APP_NAME + \" Files Stat Command\";\n         executionCommand.backgroundCustomLogLevel = Logger.LOG_LEVEL_OFF;\n         TermuxTask termuxTask = TermuxTask.execute(context, executionCommand, null, new TermuxShellEnvironmentClient(), true);\n         if (termuxTask == null || !executionCommand.isSuccessful()) {\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n@@ -341,6 +341,7 @@ public static String geAPTInfoMarkdownString(@NonNull final Context context) {\n         aptInfoScript = aptInfoScript.replaceAll(Pattern.quote(\"@TERMUX_PREFIX@\"), TermuxConstants.TERMUX_PREFIX_DIR_PATH);\n \n         ExecutionCommand executionCommand = new ExecutionCommand(1, TermuxConstants.TERMUX_BIN_PREFIX_DIR_PATH + \"/bash\", null, aptInfoScript, null, true, false);\n+        executionCommand.commandLabel = \"APT Info Command\";\n         executionCommand.backgroundCustomLogLevel = Logger.LOG_LEVEL_OFF;\n         TermuxTask termuxTask = TermuxTask.execute(context, executionCommand, null, new TermuxShellEnvironmentClient(), true);\n         if (termuxTask == null || !executionCommand.isSuccessful() || executionCommand.resultData.exitCode != 0) {\n@@ -398,6 +399,7 @@ public static String getLogcatDumpMarkdownString(@NonNull final Context context)\n         // Run script\n         // Logging must be disabled for output of logcat command itself in StreamGobbler\n         ExecutionCommand executionCommand = new ExecutionCommand(1, \"/system/bin/sh\", null, logcatScript + \"\\n\", \"/\", true, true);\n+        executionCommand.commandLabel = \"Logcat dump command\";\n         executionCommand.backgroundCustomLogLevel = Logger.LOG_LEVEL_OFF;\n         TermuxTask termuxTask = TermuxTask.execute(context, executionCommand, null, new TermuxShellEnvironmentClient(), true);\n         if (termuxTask == null || !executionCommand.isSuccessful()) {",
    "output": "Added: Add labels for ExecutionCommand for termux internal commands"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/logger/Logger.java b/termux-shared/src/main/java/com/termux/shared/logger/Logger.java\n--- a/termux-shared/src/main/java/com/termux/shared/logger/Logger.java\n+++ b/termux-shared/src/main/java/com/termux/shared/logger/Logger.java\n@@ -26,6 +26,7 @@ public class Logger {\n     public static final int LOG_LEVEL_VERBOSE = 3; // start logging verbose messages\n \n     public static final int DEFAULT_LOG_LEVEL = LOG_LEVEL_NORMAL;\n+    public static final int MAX_LOG_LEVEL = LOG_LEVEL_VERBOSE;\n     private static int CURRENT_LOG_LEVEL = DEFAULT_LOG_LEVEL;\n \n     /**\n@@ -413,7 +414,7 @@ public static int getLogLevel() {\n     }\n \n     public static int setLogLevel(Context context, int logLevel) {\n-        if (logLevel >= LOG_LEVEL_OFF && logLevel <= LOG_LEVEL_VERBOSE)\n+        if (isLogLevelValid(logLevel))\n             CURRENT_LOG_LEVEL = logLevel;\n         else\n             CURRENT_LOG_LEVEL = DEFAULT_LOG_LEVEL;\n@@ -431,4 +432,8 @@ public static String getFullTag(String tag) {\n             return DEFAULT_LOG_TAG + \":\" + tag;\n     }\n \n+    public static boolean isLogLevelValid(Integer logLevel) {\n+        return (logLevel != null && logLevel >= LOG_LEVEL_OFF && logLevel <= MAX_LOG_LEVEL);\n+    }\n+\n }\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/models/ExecutionCommand.java b/termux-shared/src/main/java/com/termux/shared/models/ExecutionCommand.java\n--- a/termux-shared/src/main/java/com/termux/shared/models/ExecutionCommand.java\n+++ b/termux-shared/src/main/java/com/termux/shared/models/ExecutionCommand.java\n@@ -240,7 +240,7 @@ public synchronized boolean isStateFailed() {\n     @Override\n     public String toString() {\n         if (!hasExecuted())\n-            return getExecutionInputLogString(this, true);\n+            return getExecutionInputLogString(this, true, true);\n         else {\n             return getExecutionOutputLogString(this, true, true);\n         }\n@@ -251,9 +251,10 @@ public String toString() {\n      *\n      * @param executionCommand The {@link ExecutionCommand} to convert.\n      * @param ignoreNull Set to {@code true} if non-critical {@code null} values are to be ignored.\n+     * @param logStdin Set to {@code true} if {@link #stdin} should be logged.\n      * @return Returns the log friendly {@link String}.\n      */\n-    public static String getExecutionInputLogString(final ExecutionCommand executionCommand, boolean ignoreNull) {\n+    public static String getExecutionInputLogString(final ExecutionCommand executionCommand, boolean ignoreNull, boolean logStdin) {\n         if (executionCommand == null) return \"null\";\n \n         StringBuilder logString = new StringBuilder();\n@@ -270,8 +271,13 @@ public static String getExecutionInputLogString(final ExecutionCommand execution\n         logString.append(\"\\n\").append(executionCommand.getInBackgroundLogString());\n         logString.append(\"\\n\").append(executionCommand.getIsFailsafeLogString());\n \n-        if (executionCommand.inBackground && (!ignoreNull || executionCommand.backgroundCustomLogLevel != null))\n-            logString.append(\"\\n\").append(executionCommand.getBackgroundCustomLogLevelLogString());\n+        if (executionCommand.inBackground) {\n+            if (logStdin && (!ignoreNull || !DataUtils.isNullOrEmpty(executionCommand.stdin)))\n+                logString.append(\"\\n\").append(executionCommand.getStdinLogString());\n+\n+            if (!ignoreNull || executionCommand.backgroundCustomLogLevel != null)\n+                logString.append(\"\\n\").append(executionCommand.getBackgroundCustomLogLevelLogString());\n+        }\n \n         if (!ignoreNull || executionCommand.sessionAction != null)\n             logString.append(\"\\n\").append(executionCommand.getSessionActionLogString());\n@@ -321,7 +327,7 @@ public static String getDetailedLogString(final ExecutionCommand executionComman\n \n         StringBuilder logString = new StringBuilder();\n \n-        logString.append(getExecutionInputLogString(executionCommand, false));\n+        logString.append(getExecutionInputLogString(executionCommand, false, true));\n         logString.append(getExecutionOutputLogString(executionCommand, false, true));\n \n         logString.append(\"\\n\").append(executionCommand.getCommandDescriptionLogString());\n@@ -356,8 +362,12 @@ public static String getExecutionCommandMarkdownString(final ExecutionCommand ex\n         markdownString.append(\"\\n\").append(MarkdownUtils.getSingleLineMarkdownStringEntry(\"inBackground\", executionCommand.inBackground, \"-\"));\n         markdownString.append(\"\\n\").append(MarkdownUtils.getSingleLineMarkdownStringEntry(\"isFailsafe\", executionCommand.isFailsafe, \"-\"));\n \n-        if (executionCommand.inBackground && executionCommand.backgroundCustomLogLevel != null)\n-            markdownString.append(\"\\n\").append(MarkdownUtils.getSingleLineMarkdownStringEntry(\"Background Custom Log Level\", executionCommand.backgroundCustomLogLevel, \"-\"));\n+        if (executionCommand.inBackground) {\n+            if (!DataUtils.isNullOrEmpty(executionCommand.stdin))\n+                markdownString.append(\"\\n\").append(MarkdownUtils.getMultiLineMarkdownStringEntry(\"Stdin\", executionCommand.stdin, \"-\"));\n+            if (executionCommand.backgroundCustomLogLevel != null)\n+                markdownString.append(\"\\n\").append(MarkdownUtils.getSingleLineMarkdownStringEntry(\"Background Custom Log Level\", executionCommand.backgroundCustomLogLevel, \"-\"));\n+        }\n \n         markdownString.append(\"\\n\").append(MarkdownUtils.getSingleLineMarkdownStringEntry(\"Session Action\", executionCommand.sessionAction, \"-\"));\n \n@@ -431,6 +441,13 @@ public String getIsFailsafeLogString() {\n         return \"isFailsafe: `\" + isFailsafe + \"`\";\n     }\n \n+    public String getStdinLogString() {\n+        if (DataUtils.isNullOrEmpty(stdin))\n+            return \"Stdin: -\";\n+        else\n+            return Logger.getMultiLineLogStringEntry(\"Stdin\", stdin, \"-\");\n+    }\n+\n     public String getBackgroundCustomLogLevelLogString() {\n         return \"Background Custom Log Level: `\" + backgroundCustomLogLevel + \"`\";\n     }\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/shell/StreamGobbler.java b/termux-shared/src/main/java/com/termux/shared/shell/StreamGobbler.java\n--- a/termux-shared/src/main/java/com/termux/shared/shell/StreamGobbler.java\n+++ b/termux-shared/src/main/java/com/termux/shared/shell/StreamGobbler.java\n@@ -194,7 +194,7 @@ public void run() {\n         int currentLogLevel = Logger.getLogLevel();\n \n         int customLogLevel;\n-        if (mLlogLevel != null && mLlogLevel >= Logger.LOG_LEVEL_OFF) {\n+        if (Logger.isLogLevelValid(mLlogLevel)) {\n             customLogLevel = mLlogLevel;\n             Logger.logVerbose(LOG_TAG, \"Using custom log level: \" + customLogLevel + \", current log level: \" + currentLogLevel);\n         } else {\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/shell/TermuxTask.java b/termux-shared/src/main/java/com/termux/shared/shell/TermuxTask.java\n--- a/termux-shared/src/main/java/com/termux/shared/shell/TermuxTask.java\n+++ b/termux-shared/src/main/java/com/termux/shared/shell/TermuxTask.java\n@@ -8,6 +8,7 @@\n import androidx.annotation.NonNull;\n \n import com.termux.shared.R;\n+import com.termux.shared.data.DataUtils;\n import com.termux.shared.models.ExecutionCommand;\n import com.termux.shared.models.ResultData;\n import com.termux.shared.models.errors.Errno;\n@@ -80,7 +81,9 @@ public static TermuxTask execute(@NonNull final Context context, @NonNull Execut\n             return null;\n         }\n \n-        Logger.logDebug(LOG_TAG, executionCommand.toString());\n+        // No need to log stdin if logging is disabled, like for app internal scripts\n+        int customLogLevel = Logger.isLogLevelValid(executionCommand.backgroundCustomLogLevel) ? executionCommand.backgroundCustomLogLevel: Logger.LOG_LEVEL_VERBOSE;\n+        Logger.logDebug(LOG_TAG, ExecutionCommand.getExecutionInputLogString(executionCommand, true, customLogLevel >= Logger.getLogLevel()));\n \n         String taskName = ShellUtils.getExecutableBasename(executionCommand.executable);\n \n@@ -146,7 +149,7 @@ private void executeInner(@NonNull final Context context) throws IllegalThreadSt\n         STDOUT.start();\n         STDERR.start();\n \n-        if (mExecutionCommand.stdin != null && !mExecutionCommand.stdin.isEmpty()) {\n+        if (!DataUtils.isNullOrEmpty(mExecutionCommand.stdin)) {\n             try {\n                 STDIN.write((mExecutionCommand.stdin + \"\\n\").getBytes(StandardCharsets.UTF_8));\n                 STDIN.flush();",
    "output": "Fixed: Stdin not being logged for background execution commands"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n@@ -241,7 +241,7 @@ public static String getReportIssueMarkdownString(@NonNull final Context context\n \n         markdownString.append(\"## Where To Report An Issue\");\n \n-        markdownString.append(\"\\n\\n\").append(context.getString(R.string.msg_report_issue)).append(\"\\n\");\n+        markdownString.append(\"\\n\\n\").append(context.getString(R.string.msg_report_issue, TermuxConstants.TERMUX_WIKI_URL)).append(\"\\n\");\n \n         markdownString.append(\"\\n\\n### Email\\n\");\n         markdownString.append(\"\\n\").append(MarkdownUtils.getLinkMarkdownString(TermuxConstants.TERMUX_SUPPORT_EMAIL_URL, TermuxConstants.TERMUX_SUPPORT_EMAIL_MAILTO_URL)).append(\"  \");",
    "output": "Added: Add warning that hax support is not provided and asking questions will likely result in issue automatically closed or even ban"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/utils/CrashUtils.java b/app/src/main/java/com/termux/app/utils/CrashUtils.java\n--- a/app/src/main/java/com/termux/app/utils/CrashUtils.java\n+++ b/app/src/main/java/com/termux/app/utils/CrashUtils.java\n@@ -132,7 +132,10 @@ public static void sendCrashReportNotification(final Context context, String log\n         }\n \n         Intent notificationIntent = ReportActivity.newInstance(context, new ReportInfo(UserAction.CRASH_REPORT.getName(), logTag, title, null, reportString.toString(), \"\\n\\n\" + TermuxUtils.getReportIssueMarkdownString(context), true));\n-        PendingIntent contentIntent = PendingIntent.getActivity(context, 0, notificationIntent, PendingIntent.FLAG_UPDATE_CURRENT);\n+\n+        // Must ensure result code for PendingIntents and id for notification are unique otherwise will override previous\n+        int nextNotificationId = TermuxNotificationUtils.getNextNotificationId(context);\n+        PendingIntent contentIntent = PendingIntent.getActivity(context, nextNotificationId, notificationIntent, PendingIntent.FLAG_UPDATE_CURRENT);\n         PendingIntent deleteIntent = null;\n \n         // Setup the notification channel if not already set up\n@@ -144,7 +147,6 @@ public static void sendCrashReportNotification(final Context context, String log\n         if (builder == null) return;\n \n         // Send the notification\n-        int nextNotificationId = TermuxNotificationUtils.getNextNotificationId(context);\n         NotificationManager notificationManager = NotificationUtils.getNotificationManager(context);\n         if (notificationManager != null)\n             notificationManager.notify(nextNotificationId, builder.build());\n\ndiff --git a/app/src/main/java/com/termux/app/utils/PluginUtils.java b/app/src/main/java/com/termux/app/utils/PluginUtils.java\n--- a/app/src/main/java/com/termux/app/utils/PluginUtils.java\n+++ b/app/src/main/java/com/termux/app/utils/PluginUtils.java\n@@ -220,7 +220,10 @@ public static void sendPluginCommandErrorNotification(Context context, String lo\n         reportString.append(\"\\n\\n\").append(AndroidUtils.getDeviceInfoMarkdownString(context));\n \n         Intent notificationIntent = ReportActivity.newInstance(context, new ReportInfo(UserAction.PLUGIN_EXECUTION_COMMAND.getName(), logTag, title, null, reportString.toString(), null,true));\n-        PendingIntent contentIntent = PendingIntent.getActivity(context, 0, notificationIntent, PendingIntent.FLAG_UPDATE_CURRENT);\n+\n+        // Must ensure result code for PendingIntents and id for notification are unique otherwise will override previous\n+        int nextNotificationId = TermuxNotificationUtils.getNextNotificationId(context);\n+        PendingIntent contentIntent = PendingIntent.getActivity(context, nextNotificationId, notificationIntent, PendingIntent.FLAG_UPDATE_CURRENT);\n         PendingIntent deleteIntent = null;\n \n         // Setup the notification channel if not already set up\n@@ -236,7 +239,6 @@ public static void sendPluginCommandErrorNotification(Context context, String lo\n         if (builder == null) return;\n \n         // Send the notification\n-        int nextNotificationId = TermuxNotificationUtils.getNextNotificationId(context);\n         NotificationManager notificationManager = NotificationUtils.getNotificationManager(context);\n         if (notificationManager != null)\n             notificationManager.notify(nextNotificationId, builder.build());",
    "output": "Fixed: New plugin error or crash notifications overriding content of old ones"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/packages/PermissionUtils.java b/termux-shared/src/main/java/com/termux/shared/packages/PermissionUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/packages/PermissionUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/packages/PermissionUtils.java\n@@ -63,7 +63,11 @@ public static void requestPermissions(Activity activity, String[] permissions, i\n             result = ContextCompat.checkSelfPermission(activity, permission);\n             if (result != PackageManager.PERMISSION_GRANTED) {\n                 Logger.logDebug(LOG_TAG, \"Requesting Permissions: \" + Arrays.toString(permissions));\n-                activity.requestPermissions(new String[]{permission}, requestCode);\n+                try {\n+                    activity.requestPermissions(new String[]{permission}, requestCode);\n+                } catch (Exception e) {\n+                    Logger.logStackTraceWithMessage(LOG_TAG, \"Failed to request permissions with request code \" + requestCode + \": \" + Arrays.toString(permissions), e);\n+                }\n             }\n         }\n     }",
    "output": "Fixed: Catch exception when requesting permissions, like if request code is negative"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/interact/MessageDialogUtils.java b/termux-shared/src/main/java/com/termux/shared/interact/MessageDialogUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/interact/MessageDialogUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/interact/MessageDialogUtils.java\n@@ -22,9 +22,33 @@ public class MessageDialogUtils {\n      * @param onDismiss The {@link DialogInterface.OnDismissListener} to run when dialog is dismissed.\n      */\n     public static void showMessage(Context context, String titleText, String messageText, final DialogInterface.OnDismissListener onDismiss) {\n+        showMessage(context, titleText, messageText, null, null, null, null, onDismiss);\n+    }\n \n-        AlertDialog.Builder builder = new AlertDialog.Builder(context, R.style.Theme_AppCompat_Light_Dialog)\n-            .setPositiveButton(android.R.string.ok, null);\n+    /**\n+     * Show a message in a dialog\n+     *\n+     * @param context The {@link Context} to use to start the dialog. An {@link Activity} {@link Context}\n+     *                must be passed, otherwise exceptions will be thrown.\n+     * @param titleText The title text of the dialog.\n+     * @param messageText The message text of the dialog.\n+     * @param positiveText The positive button text of the dialog.\n+     * @param onPositiveButton The {@link DialogInterface.OnClickListener} to run when positive button\n+     *                         is pressed.\n+     * @param negativeText The negative button text of the dialog. If this is {@code null}, then\n+     *                         negative button will not be shown.\n+     * @param onNegativeButton The {@link DialogInterface.OnClickListener} to run when negative button\n+     *                         is pressed.\n+     * @param onDismiss The {@link DialogInterface.OnDismissListener} to run when dialog is dismissed.\n+     */\n+    public static void showMessage(Context context, String titleText, String messageText,\n+                                   String positiveText,\n+                                   final DialogInterface.OnClickListener onPositiveButton,\n+                                   String negativeText,\n+                                   final DialogInterface.OnClickListener onNegativeButton,\n+                                   final DialogInterface.OnDismissListener onDismiss) {\n+\n+        AlertDialog.Builder builder = new AlertDialog.Builder(context, R.style.Theme_AppCompat_Light_Dialog);\n \n         LayoutInflater inflater = (LayoutInflater) context.getSystemService( Context.LAYOUT_INFLATER_SERVICE );\n         View view = inflater.inflate(R.layout.dialog_show_message, null);\n@@ -40,6 +64,13 @@ public static void showMessage(Context context, String titleText, String message\n                 messageView.setText(messageText);\n         }\n \n+        if (positiveText == null)\n+            positiveText = context.getString(android.R.string.ok);\n+        builder.setPositiveButton(positiveText, onPositiveButton);\n+\n+        if (negativeText != null)\n+            builder.setNegativeButton(negativeText, onNegativeButton);\n+\n         if (onDismiss != null)\n             builder.setOnDismissListener(onDismiss);\n ",
    "output": "Added: Support for MessageDialogUtils.showMessage() to receive positive and negative button OnClickListeners"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/RunCommandService.java b/app/src/main/java/com/termux/app/RunCommandService.java\n--- a/app/src/main/java/com/termux/app/RunCommandService.java\n+++ b/app/src/main/java/com/termux/app/RunCommandService.java\n@@ -73,7 +73,7 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n             errmsg = this.getString(R.string.error_run_command_service_invalid_intent_action, intent.getAction());\n             executionCommand.setStateFailed(Errno.ERRNO_FAILED.getCode(), errmsg);\n             PluginUtils.processPluginExecutionCommandError(this, LOG_TAG, executionCommand, false);\n-            return Service.START_NOT_STICKY;\n+            return stopService();\n         }\n \n         String executableExtra = executionCommand.executable = IntentUtils.getStringExtraIfSet(intent, RUN_COMMAND_SERVICE.EXTRA_COMMAND_PATH, null);\n@@ -125,7 +125,7 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n         if (errmsg != null) {\n             executionCommand.setStateFailed(Errno.ERRNO_FAILED.getCode(), errmsg);\n             PluginUtils.processPluginExecutionCommandError(this, LOG_TAG, executionCommand, true);\n-            return Service.START_NOT_STICKY;\n+            return stopService();\n         }\n \n \n@@ -135,7 +135,7 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n             errmsg  = this.getString(R.string.error_run_command_service_mandatory_extra_missing, RUN_COMMAND_SERVICE.EXTRA_COMMAND_PATH);\n             executionCommand.setStateFailed(Errno.ERRNO_FAILED.getCode(), errmsg);\n             PluginUtils.processPluginExecutionCommandError(this, LOG_TAG, executionCommand, false);\n-            return Service.START_NOT_STICKY;\n+            return stopService();\n         }\n \n         // Get canonical path of executable\n@@ -150,7 +150,7 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n             error.appendMessage(\"\\n\" + this.getString(R.string.msg_executable_absolute_path, executionCommand.executable));\n             executionCommand.setStateFailed(error);\n             PluginUtils.processPluginExecutionCommandError(this, LOG_TAG, executionCommand, false);\n-            return Service.START_NOT_STICKY;\n+            return stopService();\n         }\n \n \n@@ -172,7 +172,7 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n                 error.appendMessage(\"\\n\" + this.getString(R.string.msg_working_directory_absolute_path, executionCommand.workingDirectory));\n                 executionCommand.setStateFailed(error);\n                 PluginUtils.processPluginExecutionCommandError(this, LOG_TAG, executionCommand, false);\n-                return Service.START_NOT_STICKY;\n+                return stopService();\n             }\n         }\n \n@@ -219,8 +219,11 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n             this.startService(execIntent);\n         }\n \n-        runStopForeground();\n+        return stopService();\n+    }\n \n+    private int stopService() {\n+        runStopForeground();\n         return Service.START_NOT_STICKY;\n     }\n ",
    "output": "Fixed: RunCommandService notification was not being cleared if an error was raised"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/crash/CrashHandler.java b/termux-shared/src/main/java/com/termux/shared/crash/CrashHandler.java\n--- a/termux-shared/src/main/java/com/termux/shared/crash/CrashHandler.java\n+++ b/termux-shared/src/main/java/com/termux/shared/crash/CrashHandler.java\n@@ -56,7 +56,7 @@ public static void logCrash(@NonNull final Context context, @NonNull final Crash\n \n         reportString.append(\"## Crash Details\\n\");\n         reportString.append(\"\\n\").append(MarkdownUtils.getSingleLineMarkdownStringEntry(\"Crash Thread\", thread.toString(), \"-\"));\n-        reportString.append(\"\\n\").append(MarkdownUtils.getSingleLineMarkdownStringEntry(\"Crash Timestamp\", AndroidUtils.getCurrentTimeStamp(), \"-\"));\n+        reportString.append(\"\\n\").append(MarkdownUtils.getSingleLineMarkdownStringEntry(\"Crash Timestamp\", AndroidUtils.getCurrentMilliSecondUTCTimeStamp(), \"-\"));\n         reportString.append(\"\\n\\n\").append(MarkdownUtils.getMultiLineMarkdownStringEntry(\"Crash Message\", throwable.getMessage(), \"-\"));\n         reportString.append(\"\\n\\n\").append(Logger.getStackTracesMarkdownString(\"Stacktrace\", Logger.getStackTracesStringArray(throwable)));\n \n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/models/ReportInfo.java b/termux-shared/src/main/java/com/termux/shared/models/ReportInfo.java\n--- a/termux-shared/src/main/java/com/termux/shared/models/ReportInfo.java\n+++ b/termux-shared/src/main/java/com/termux/shared/models/ReportInfo.java\n@@ -34,7 +34,7 @@ public ReportInfo(String userAction, String sender, String reportTitle, String r\n         this.reportString = reportString;\n         this.reportStringSuffix = reportStringSuffix;\n         this.addReportInfoToMarkdown = addReportInfoToMarkdown;\n-        this.reportTimestamp = AndroidUtils.getCurrentTimeStamp();\n+        this.reportTimestamp = AndroidUtils.getCurrentMilliSecondUTCTimeStamp();\n     }\n \n     /**\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/AndroidUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/AndroidUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/AndroidUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/AndroidUtils.java\n@@ -182,6 +182,13 @@ public static String getCurrentTimeStamp() {\n         return df.format(new Date());\n     }\n \n+    public static String getCurrentMilliSecondUTCTimeStamp() {\n+        @SuppressLint(\"SimpleDateFormat\")\n+        final SimpleDateFormat df = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n+        df.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+        return df.format(new Date());\n+    }\n+\n     public static String getCurrentMilliSecondLocalTimeStamp() {\n         @SuppressLint(\"SimpleDateFormat\")\n         final SimpleDateFormat df = new SimpleDateFormat(\"yyyy-MM-dd_HH.mm.ss.SSS\");",
    "output": "Changed: Use millisecond timestamps for reports"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/markdown/MarkdownUtils.java b/termux-shared/src/main/java/com/termux/shared/markdown/MarkdownUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/markdown/MarkdownUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/markdown/MarkdownUtils.java\n@@ -119,9 +119,9 @@ public static String getMultiLineMarkdownStringEntry(String label, Object object\n             return \"**\" + label + \"**: \" + def + \"\\n\";\n     }\n \n-    public static String getLinkMarkdownString(String label, Object object) {\n-        if (object != null)\n-            return \"[\" + label + \"](\" + object +  \")\";\n+    public static String getLinkMarkdownString(String label, String url) {\n+        if (url != null)\n+            return \"[\" + label.replaceAll(\"]\", \"\\\\\\\\]\") + \"](\" + url.replaceAll(\"\\\\)\", \"\\\\\\\\)\") +  \")\";\n         else\n             return label;\n     }",
    "output": "Fixed: Fix markdown link generation\n\nThe `]` characters in label and `)` characters in url must be escaped."
  },
  {
    "input": "diff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalColorScheme.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalColorScheme.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalColorScheme.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalColorScheme.java\n@@ -57,7 +57,7 @@ public final class TerminalColorScheme {\n         0xff808080, 0xff8a8a8a, 0xff949494, 0xff9e9e9e, 0xffa8a8a8, 0xffb2b2b2, 0xffbcbcbc, 0xffc6c6c6, 0xffd0d0d0, 0xffdadada, 0xffe4e4e4, 0xffeeeeee,\n \n         // COLOR_INDEX_DEFAULT_FOREGROUND, COLOR_INDEX_DEFAULT_BACKGROUND and COLOR_INDEX_DEFAULT_CURSOR:\n-        0xffffffff, 0xff000000, 0xffA9AAA9};\n+        0xffffffff, 0xff000000, 0xffffffff};\n \n     public final int[] mDefaultColors = new int[TextStyle.NUM_INDEXED_COLORS];\n ",
    "output": "terminal: set default cursor color to white"
  },
  {
    "input": "diff --git a/terminal-view/src/main/java/com/termux/view/TerminalRenderer.java b/terminal-view/src/main/java/com/termux/view/TerminalRenderer.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalRenderer.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalRenderer.java\n@@ -118,9 +118,13 @@ public final void render(TerminalEmulator mEmulator, Canvas canvas, int topRow,\n                         final int columnWidthSinceLastRun = column - lastRunStartColumn;\n                         final int charsSinceLastRun = currentCharIndex - lastRunStartIndex;\n                         int cursorColor = lastRunInsideCursor ? mEmulator.mColors.mCurrentColors[TextStyle.COLOR_INDEX_CURSOR] : 0;\n+                        boolean invertCursorTextColor = false;\n+                        if (lastRunInsideCursor && cursorShape == TerminalEmulator.TERMINAL_CURSOR_STYLE_BLOCK) {\n+                            invertCursorTextColor = true;\n+                        }\n                         drawTextRun(canvas, line, palette, heightOffset, lastRunStartColumn, columnWidthSinceLastRun,\n                             lastRunStartIndex, charsSinceLastRun, measuredWidthForRun,\n-                            cursorColor, cursorShape, lastRunStyle, reverseVideo || lastRunInsideSelection);\n+                            cursorColor, cursorShape, lastRunStyle, reverseVideo || invertCursorTextColor || lastRunInsideSelection);\n                     }\n                     measuredWidthForRun = 0.f;\n                     lastRunStyle = style;\n@@ -143,8 +147,12 @@ public final void render(TerminalEmulator mEmulator, Canvas canvas, int topRow,\n             final int columnWidthSinceLastRun = columns - lastRunStartColumn;\n             final int charsSinceLastRun = currentCharIndex - lastRunStartIndex;\n             int cursorColor = lastRunInsideCursor ? mEmulator.mColors.mCurrentColors[TextStyle.COLOR_INDEX_CURSOR] : 0;\n+            boolean invertCursorTextColor = false;\n+            if (lastRunInsideCursor && cursorShape == TerminalEmulator.TERMINAL_CURSOR_STYLE_BLOCK) {\n+                invertCursorTextColor = true;\n+            }\n             drawTextRun(canvas, line, palette, heightOffset, lastRunStartColumn, columnWidthSinceLastRun, lastRunStartIndex, charsSinceLastRun,\n-                measuredWidthForRun, cursorColor, cursorShape, lastRunStyle, reverseVideo || lastRunInsideSelection);\n+                measuredWidthForRun, cursorColor, cursorShape, lastRunStyle, reverseVideo || invertCursorTextColor || lastRunInsideSelection);\n         }\n     }\n ",
    "output": "terminal: invert text color under block cursor\n\nIssue: https://github.com/termux/termux-app/issues/219"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/data/UrlUtils.java b/termux-shared/src/main/java/com/termux/shared/data/UrlUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/data/UrlUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/data/UrlUtils.java\n@@ -22,6 +22,7 @@ public static Pattern getUrlMatchRegex() {\n         regex_sb.append(\"finger|\");                 // The Finger proto.\n         regex_sb.append(\"ftp(?:s?)|\");              // The FTP proto.\n         regex_sb.append(\"git|\");                    // The Git proto.\n+        regex_sb.append(\"gemini|\");                 // The Gemini proto.\n         regex_sb.append(\"gopher|\");                 // The Gopher proto.\n         regex_sb.append(\"http(?:s?)|\");             // The HTTP proto.\n         regex_sb.append(\"imap(?:s?)|\");             // The IMAP proto.",
    "output": "Merge pull request #2217 from the-blank-x/supportgemini\n\nAdd gemini to the list of url regex protocols"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/data/UrlUtils.java b/termux-shared/src/main/java/com/termux/shared/data/UrlUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/data/UrlUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/data/UrlUtils.java\n@@ -22,6 +22,7 @@ public static Pattern getUrlMatchRegex() {\n         regex_sb.append(\"finger|\");                 // The Finger proto.\n         regex_sb.append(\"ftp(?:s?)|\");              // The FTP proto.\n         regex_sb.append(\"git|\");                    // The Git proto.\n+        regex_sb.append(\"gemini|\");                 // The Gemini proto.\n         regex_sb.append(\"gopher|\");                 // The Gopher proto.\n         regex_sb.append(\"http(?:s?)|\");             // The HTTP proto.\n         regex_sb.append(\"imap(?:s?)|\");             // The IMAP proto.",
    "output": "Add Gemini to the list of protocols"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -452,7 +452,7 @@ private void setTermuxSessionsListView() {\n \n \n     private void setTerminalToolbarView(Bundle savedInstanceState) {\n-        final ViewPager terminalToolbarViewPager = findViewById(R.id.terminal_toolbar_view_pager);\n+        final ViewPager terminalToolbarViewPager = getTerminalToolbarViewPager();\n         if (mPreferences.shouldShowTerminalToolbar()) terminalToolbarViewPager.setVisibility(View.VISIBLE);\n \n         ViewGroup.LayoutParams layoutParams = terminalToolbarViewPager.getLayoutParams();\n@@ -469,8 +469,9 @@ private void setTerminalToolbarView(Bundle savedInstanceState) {\n     }\n \n     private void setTerminalToolbarHeight() {\n-        final ViewPager terminalToolbarViewPager = findViewById(R.id.terminal_toolbar_view_pager);\n+        final ViewPager terminalToolbarViewPager = getTerminalToolbarViewPager();\n         if (terminalToolbarViewPager == null) return;\n+\n         ViewGroup.LayoutParams layoutParams = terminalToolbarViewPager.getLayoutParams();\n         layoutParams.height = (int) Math.round(mTerminalToolbarDefaultHeight *\n             (mProperties.getExtraKeysInfo() == null ? 0 : mProperties.getExtraKeysInfo().getMatrix().length) *\n@@ -479,13 +480,13 @@ private void setTerminalToolbarHeight() {\n     }\n \n     public void toggleTerminalToolbar() {\n-        final ViewPager terminalToolbarViewPager = findViewById(R.id.terminal_toolbar_view_pager);\n+        final ViewPager terminalToolbarViewPager = getTerminalToolbarViewPager();\n         if (terminalToolbarViewPager == null) return;\n \n         final boolean showNow = mPreferences.toogleShowTerminalToolbar();\n         Logger.showToast(this, (showNow ? getString(R.string.msg_enabling_terminal_toolbar) : getString(R.string.msg_disabling_terminal_toolbar)), true);\n         terminalToolbarViewPager.setVisibility(showNow ? View.VISIBLE : View.GONE);\n-        if (showNow && terminalToolbarViewPager.getCurrentItem() == 1) {\n+        if (showNow && isTerminalToolbarTextInputViewSelected()) {\n             // Focus the text input view if just revealed.\n             findViewById(R.id.terminal_toolbar_text_input).requestFocus();\n         }\n@@ -744,6 +745,20 @@ public DrawerLayout getDrawer() {\n         return (DrawerLayout) findViewById(R.id.drawer_layout);\n     }\n \n+\n+    public ViewPager getTerminalToolbarViewPager() {\n+        return (ViewPager) findViewById(R.id.terminal_toolbar_view_pager);\n+    }\n+\n+    public boolean isTerminalViewSelected() {\n+        return getTerminalToolbarViewPager().getCurrentItem() == 0;\n+    }\n+\n+    public boolean isTerminalToolbarTextInputViewSelected() {\n+        return getTerminalToolbarViewPager().getCurrentItem() == 1;\n+    }\n+\n+\n     public void termuxSessionListNotifyUpdated() {\n         mTermuxSessionListViewController.notifyDataSetChanged();\n     }\n\ndiff --git a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n@@ -186,6 +186,11 @@ public boolean shouldUseCtrlSpaceWorkaround() {\n         return mActivity.getProperties().isUsingCtrlSpaceWorkaround();\n     }\n \n+    @Override\n+    public boolean isTerminalViewSelected() {\n+        return mActivity.getTerminalToolbarViewPager() == null || mActivity.isTerminalViewSelected();\n+    }\n+\n \n \n     @Override\n\ndiff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -262,20 +262,29 @@ public boolean attachSession(TerminalSession session) {\n \n     @Override\n     public InputConnection onCreateInputConnection(EditorInfo outAttrs) {\n-        if (mClient.shouldEnforceCharBasedInput()) {\n-            // Some keyboards seems do not reset the internal state on TYPE_NULL.\n-            // Affects mostly Samsung stock keyboards.\n-            // https://github.com/termux/termux-app/issues/686\n-            outAttrs.inputType = InputType.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD | InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS;\n+        // Ensure that inputType is only set if TerminalView is selected view with the keyboard and\n+        // an alternate view is not selected, like an EditText. This is necessary if an activity is\n+        // initially started with the alternate view or if activity is returned to from another app\n+        // and the alternate view was the one selected the last time.\n+        if (mClient.isTerminalViewSelected()) {\n+            if (mClient.shouldEnforceCharBasedInput()) {\n+                // Some keyboards seems do not reset the internal state on TYPE_NULL.\n+                // Affects mostly Samsung stock keyboards.\n+                // https://github.com/termux/termux-app/issues/686\n+                outAttrs.inputType = InputType.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD | InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS;\n+            } else {\n+                // Using InputType.NULL is the most correct input type and avoids issues with other hacks.\n+                //\n+                // Previous keyboard issues:\n+                // https://github.com/termux/termux-packages/issues/25\n+                // https://github.com/termux/termux-app/issues/87.\n+                // https://github.com/termux/termux-app/issues/126.\n+                // https://github.com/termux/termux-app/issues/137 (japanese chars and TYPE_NULL).\n+                outAttrs.inputType = InputType.TYPE_NULL;\n+            }\n         } else {\n-            // Using InputType.NULL is the most correct input type and avoids issues with other hacks.\n-            //\n-            // Previous keyboard issues:\n-            // https://github.com/termux/termux-packages/issues/25\n-            // https://github.com/termux/termux-app/issues/87.\n-            // https://github.com/termux/termux-app/issues/126.\n-            // https://github.com/termux/termux-app/issues/137 (japanese chars and TYPE_NULL).\n-            outAttrs.inputType = InputType.TYPE_NULL;\n+            // Corresponds to android:inputType=\"text\"\n+            outAttrs.inputType =  InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_NORMAL;\n         }\n \n         // Note that IME_ACTION_NONE cannot be used as that makes it impossible to input newlines using the on-screen\n\ndiff --git a/terminal-view/src/main/java/com/termux/view/TerminalViewClient.java b/terminal-view/src/main/java/com/termux/view/TerminalViewClient.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalViewClient.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalViewClient.java\n@@ -34,6 +34,8 @@ public interface TerminalViewClient {\n \n     boolean shouldUseCtrlSpaceWorkaround();\n \n+    boolean isTerminalViewSelected();\n+\n \n \n     void copyModeChanged(boolean copyMode);\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/terminal/TermuxTerminalViewClientBase.java b/termux-shared/src/main/java/com/termux/shared/terminal/TermuxTerminalViewClientBase.java\n--- a/termux-shared/src/main/java/com/termux/shared/terminal/TermuxTerminalViewClientBase.java\n+++ b/termux-shared/src/main/java/com/termux/shared/terminal/TermuxTerminalViewClientBase.java\n@@ -33,6 +33,11 @@ public boolean shouldUseCtrlSpaceWorkaround() {\n         return false;\n     }\n \n+    @Override\n+    public boolean isTerminalViewSelected() {\n+        return true;\n+    }\n+\n     @Override\n     public void copyModeChanged(boolean copyMode) {\n     }",
    "output": "Fix issue where wrong IME inputType would be set if termux was returned to from another app with text input view mode selected"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/terminal/io/extrakeys/ExtraKeysInfo.java b/app/src/main/java/com/termux/app/terminal/io/extrakeys/ExtraKeysInfo.java\n--- a/app/src/main/java/com/termux/app/terminal/io/extrakeys/ExtraKeysInfo.java\n+++ b/app/src/main/java/com/termux/app/terminal/io/extrakeys/ExtraKeysInfo.java\n@@ -116,8 +116,7 @@ static class CharDisplayMap extends CleverMap<String, String> {}\n         put(\"DEL\", \"⌦\"); // U+2326 ⌦ ERASE TO THE RIGHT not well known but easy to understand\n         put(\"DRAWER\", \"☰\"); // U+2630 ☰ TRIGRAM FOR HEAVEN not well known but easy to understand\n         put(\"KEYBOARD\", \"⌨\"); // U+2328 ⌨ KEYBOARD not well known but easy to understand\n-        //put(\"PASTE\", \"📋\"); // U+2328 ⌨ KEYBOARD not well known but easy to understand\n-        put(\"PASTE\", \"⎘\"); // U+2328 ⌨ KEYBOARD not well known but easy to understand\n+        put(\"PASTE\", \"⎘\"); // U+2398\n     }};\n \n     static final CharDisplayMap lessKnownCharactersDisplay = new CharDisplayMap() {{",
    "output": "Fix comment"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/shell/ResultSender.java b/termux-shared/src/main/java/com/termux/shared/shell/ResultSender.java\n--- a/termux-shared/src/main/java/com/termux/shared/shell/ResultSender.java\n+++ b/termux-shared/src/main/java/com/termux/shared/shell/ResultSender.java\n@@ -8,6 +8,7 @@\n \n import com.termux.shared.R;\n import com.termux.shared.data.DataUtils;\n+import com.termux.shared.markdown.MarkdownUtils;\n import com.termux.shared.models.errors.Error;\n import com.termux.shared.file.FileUtils;\n import com.termux.shared.logger.Logger;\n@@ -206,7 +207,11 @@ public static Error sendCommandResultDataToDirectory(Context context, String log\n                 try {\n                     if (DataUtils.isNullOrEmpty(resultConfig.resultFileErrorFormat)) {\n                         error_or_output = String.format(RESULT_SENDER.FORMAT_FAILED_ERR__ERRMSG__STDOUT__STDERR__EXIT_CODE,\n-                            resultData.getErrCode(), resultDataErrmsg, resultDataStdout, resultDataStderr, resultDataExitCode);\n+                            MarkdownUtils.getMarkdownCodeForString(String.valueOf(resultData.getErrCode()), false),\n+                            MarkdownUtils.getMarkdownCodeForString(resultDataErrmsg, true),\n+                            MarkdownUtils.getMarkdownCodeForString(resultDataStdout, true),\n+                            MarkdownUtils.getMarkdownCodeForString(resultDataStderr, true),\n+                            MarkdownUtils.getMarkdownCodeForString(resultDataExitCode, false));\n                     } else {\n                         error_or_output = String.format(resultConfig.resultFileErrorFormat,\n                             resultData.getErrCode(), resultDataErrmsg, resultDataStdout, resultDataStderr, resultDataExitCode);\n@@ -221,11 +226,17 @@ public static Error sendCommandResultDataToDirectory(Context context, String log\n                         if (resultDataStderr.isEmpty() && resultDataExitCode.equals(\"0\"))\n                             error_or_output = String.format(RESULT_SENDER.FORMAT_SUCCESS_STDOUT, resultDataStdout);\n                         else if (resultDataStderr.isEmpty())\n-                            error_or_output = String.format(RESULT_SENDER.FORMAT_SUCCESS_STDOUT__EXIT_CODE, resultDataStdout, resultDataExitCode);\n+                            error_or_output = String.format(RESULT_SENDER.FORMAT_SUCCESS_STDOUT__EXIT_CODE,\n+                                resultDataStdout,\n+                                MarkdownUtils.getMarkdownCodeForString(resultDataExitCode, false));\n                         else\n-                            error_or_output = String.format(RESULT_SENDER.FORMAT_SUCCESS_STDOUT__STDERR__EXIT_CODE, resultDataStdout, resultDataStderr, resultDataExitCode);\n+                            error_or_output = String.format(RESULT_SENDER.FORMAT_SUCCESS_STDOUT__STDERR__EXIT_CODE,\n+                                MarkdownUtils.getMarkdownCodeForString(resultDataStdout, true),\n+                                MarkdownUtils.getMarkdownCodeForString(resultDataStderr, true),\n+                                MarkdownUtils.getMarkdownCodeForString(resultDataExitCode, false));\n                     } else {\n-                        error_or_output = String.format(resultConfig.resultFileOutputFormat, resultDataStdout, resultDataStderr, resultDataExitCode);\n+                        error_or_output = String.format(resultConfig.resultFileOutputFormat,\n+                            resultDataStdout, resultDataStderr, resultDataExitCode);\n                     }\n                 } catch (Exception e) {\n                     error = ResultSenderErrno.ERROR_FORMAT_RESULT_OUTPUT_FAILED_WITH_EXCEPTION.getError(e.getMessage());\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n@@ -996,23 +996,31 @@ public static final class RESULT_SENDER {\n         /** The {@link Formatter} format string for success if `stdout` and `exit_code` need to be written to\n          * {@link ResultConfig#resultFileBasename} where `stdout` maps to `%1$s` and `exit_code` to `%2$s`.\n          * This is used when `err` equals {@link Errno#ERRNO_SUCCESS} (-1) and `stderr` is empty\n-         * and `exit_code` does not equal `0` and {@link ResultConfig#resultFileOutputFormat} is not passed. */\n-        public static final String FORMAT_SUCCESS_STDOUT__EXIT_CODE = \"%1$s%n%n%n%nexit_code=`%2$s`%n\";\n+         * and `exit_code` does not equal `0` and {@link ResultConfig#resultFileOutputFormat} is not passed.\n+         * The exit code will be placed in a markdown inline code. */\n+        public static final String FORMAT_SUCCESS_STDOUT__EXIT_CODE = \"%1$s%n%n%n%nexit_code=%2$s%n\";\n         /** The {@link Formatter} format string for success if `stdout`, `stderr` and `exit_code` need to be\n          * written to {@link ResultConfig#resultFileBasename} where `stdout` maps to `%1$s`, `stderr`\n          * maps to `%2$s` and `exit_code` to `%3$s`.\n          * This is used when `err` equals {@link Errno#ERRNO_SUCCESS} (-1) and `stderr` is not empty\n-         * and {@link ResultConfig#resultFileOutputFormat} is not passed. */\n-        public static final String FORMAT_SUCCESS_STDOUT__STDERR__EXIT_CODE = \"stdout=%n```%n%1$s%n```%n%n%n%nstderr=%n```%n%2$s%n```%n%n%n%nexit_code=`%3$s`%n\";\n+         * and {@link ResultConfig#resultFileOutputFormat} is not passed.\n+         * The stdout and stderr will be placed in a markdown code block. The exit code will be placed\n+         * in a markdown inline code. The surrounding backticks will be 3 more than the consecutive\n+         * backticks in any parameter itself for code blocks. */\n+        public static final String FORMAT_SUCCESS_STDOUT__STDERR__EXIT_CODE = \"stdout=%n%1$s%n%n%n%nstderr=%n%2$s%n%n%n%nexit_code=%3$s%n\";\n         /** The {@link Formatter} format string for failure if `err`, `errmsg`(`error`), `stdout`,\n          * `stderr` and `exit_code` need to be written to {@link ResultConfig#resultFileBasename} where\n          * `err` maps to `%1$s`, `errmsg` maps to `%2$s`, `stdout` maps\n          * to `%3$s`, `stderr` to `%4$s` and `exit_code` maps to `%5$s`.\n          * Do not define an argument greater than `5`, like `%6$s` if you change this value since it will\n          * raise {@link IllegalFormatException}.\n          * This is used when `err` does not equal {@link Errno#ERRNO_SUCCESS} (-1) and\n-         * {@link ResultConfig#resultFileErrorFormat} is not passed. */\n-        public static final String FORMAT_FAILED_ERR__ERRMSG__STDOUT__STDERR__EXIT_CODE = \"err=`%1$s`%n%n%n%nerrmsg=%n```%n%2$s%n```%n%n%n%nstdout=%n```%n%3$s%n```%n%n%n%nstderr=%n```%n%4$s%n```%n%n%n%nexit_code=`%5$s`%n\";\n+         * {@link ResultConfig#resultFileErrorFormat} is not passed.\n+         * The errmsg, stdout and stderr will be placed in a markdown code block. The err and exit code\n+         * will be placed in a markdown inline code. The surrounding backticks will be 3 more than\n+         * the consecutive backticks in any parameter itself for code blocks. The stdout, stderr\n+         * and exit code may be empty without any surrounding backticks if not set. */\n+        public static final String FORMAT_FAILED_ERR__ERRMSG__STDOUT__STDERR__EXIT_CODE = \"err=%1$s%n%n%n%nerrmsg=%n%2$s%n%n%n%nstdout=%n%3$s%n%n%n%nstderr=%n%4$s%n%n%n%nexit_code=%5$s%n\";\n \n \n ",
    "output": "Ensure that markdown code formatting is not broken for ResultSender if data itself contains any backticks"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/terminal/io/extrakeys/ExtraKeysView.java b/app/src/main/java/com/termux/app/terminal/io/extrakeys/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/terminal/io/extrakeys/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/terminal/io/extrakeys/ExtraKeysView.java\n@@ -302,6 +302,10 @@ public void reload(ExtraKeysInfo infos) {\n                         case MotionEvent.ACTION_DOWN:\n                             longPressCount = 0;\n                             v.setBackgroundColor(BUTTON_PRESSED_COLOR);\n+                            if (scheduledExecutor != null) {\n+                                scheduledExecutor.shutdownNow();\n+                                scheduledExecutor = null;\n+                            }\n                             if (Arrays.asList(\"UP\", \"DOWN\", \"LEFT\", \"RIGHT\", \"BKSP\", \"DEL\").contains(buttonInfo.getKey())) {\n                                 // autorepeat\n                                 scheduledExecutor = Executors.newSingleThreadScheduledExecutor();",
    "output": "extra keys: avoid scheduled executor leak\n\nUnder certain cases scheduled executor may leak causing repeatable input to\nstuck.\n\nIssue: https://github.com/termux/termux-app/issues/2156"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxInstaller.java b/app/src/main/java/com/termux/app/TermuxInstaller.java\n--- a/app/src/main/java/com/termux/app/TermuxInstaller.java\n+++ b/app/src/main/java/com/termux/app/TermuxInstaller.java\n@@ -171,7 +171,8 @@ public void run() {\n                                         while ((readBytes = zipInput.read(buffer)) != -1)\n                                             outStream.write(buffer, 0, readBytes);\n                                     }\n-                                    if (zipEntryName.startsWith(\"bin/\") || zipEntryName.startsWith(\"libexec\") || zipEntryName.startsWith(\"lib/apt/methods\")) {\n+                                    if (zipEntryName.startsWith(\"bin/\") || zipEntryName.startsWith(\"libexec\") ||\n+                                        zipEntryName.startsWith(\"lib/apt/apt-helper\") || zipEntryName.startsWith(\"lib/apt/methods\")) {\n                                         //noinspection OctalInteger\n                                         Os.chmod(targetFile.getAbsolutePath(), 0700);\n                                     }",
    "output": "installer: fix permissions for lib/apt/apt-helper\n\nIt should have executable bit set, otherwise it won't be possible to use tools such as 'apt-file' without reinstalling 'apt'."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -259,7 +259,8 @@ public void onStart() {\n         if (mTermuxTerminalViewClient != null)\n             mTermuxTerminalViewClient.onStart();\n \n-        addTermuxActivityRootViewGlobalLayoutListener();\n+        if (mPreferences.isTerminalMarginAdjustmentEnabled())\n+            addTermuxActivityRootViewGlobalLayoutListener();\n \n         registerTermuxActivityBroadcastReceiver();\n     }\n\ndiff --git a/app/src/main/java/com/termux/app/fragments/settings/termux/TerminalViewPreferencesFragment.java b/app/src/main/java/com/termux/app/fragments/settings/termux/TerminalViewPreferencesFragment.java\n--- a/app/src/main/java/com/termux/app/fragments/settings/termux/TerminalViewPreferencesFragment.java\n+++ b/app/src/main/java/com/termux/app/fragments/settings/termux/TerminalViewPreferencesFragment.java\n@@ -0,0 +1,77 @@\n+package com.termux.app.fragments.settings.termux;\n+\n+import android.content.Context;\n+import android.os.Bundle;\n+\n+import androidx.annotation.Keep;\n+import androidx.preference.PreferenceDataStore;\n+import androidx.preference.PreferenceFragmentCompat;\n+import androidx.preference.PreferenceManager;\n+\n+import com.termux.R;\n+import com.termux.shared.settings.preferences.TermuxAppSharedPreferences;\n+\n+@Keep\n+public class TerminalViewPreferencesFragment extends PreferenceFragmentCompat {\n+\n+    @Override\n+    public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {\n+        Context context = getContext();\n+        if (context == null) return;\n+\n+        PreferenceManager preferenceManager = getPreferenceManager();\n+        preferenceManager.setPreferenceDataStore(TerminalViewPreferencesDataStore.getInstance(context));\n+\n+        setPreferencesFromResource(R.xml.termux_terminal_view_preferences, rootKey);\n+    }\n+\n+}\n+\n+class TerminalViewPreferencesDataStore extends PreferenceDataStore {\n+\n+    private final Context mContext;\n+    private final TermuxAppSharedPreferences mPreferences;\n+\n+    private static TerminalViewPreferencesDataStore mInstance;\n+\n+    private TerminalViewPreferencesDataStore(Context context) {\n+        mContext = context;\n+        mPreferences = TermuxAppSharedPreferences.build(context, true);\n+    }\n+\n+    public static synchronized TerminalViewPreferencesDataStore getInstance(Context context) {\n+        if (mInstance == null) {\n+            mInstance = new TerminalViewPreferencesDataStore(context);\n+        }\n+        return mInstance;\n+    }\n+\n+\n+\n+    @Override\n+    public void putBoolean(String key, boolean value) {\n+        if (mPreferences == null) return;\n+        if (key == null) return;\n+\n+        switch (key) {\n+            case \"terminal_margin_adjustment\":\n+                    mPreferences.setTerminalMarginAdjustment(value);\n+                break;\n+            default:\n+                break;\n+        }\n+    }\n+\n+    @Override\n+    public boolean getBoolean(String key, boolean defValue) {\n+        if (mPreferences == null) return false;\n+\n+        switch (key) {\n+            case \"terminal_margin_adjustment\":\n+                return mPreferences.isTerminalMarginAdjustmentEnabled();\n+            default:\n+                return false;\n+        }\n+    }\n+\n+}\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/settings/preferences/TermuxAppSharedPreferences.java b/termux-shared/src/main/java/com/termux/shared/settings/preferences/TermuxAppSharedPreferences.java\n--- a/termux-shared/src/main/java/com/termux/shared/settings/preferences/TermuxAppSharedPreferences.java\n+++ b/termux-shared/src/main/java/com/termux/shared/settings/preferences/TermuxAppSharedPreferences.java\n@@ -91,6 +91,16 @@ public boolean toogleShowTerminalToolbar() {\n \n \n \n+    public boolean isTerminalMarginAdjustmentEnabled() {\n+        return SharedPreferenceUtils.getBoolean(mSharedPreferences, TERMUX_APP.KEY_TERMINAL_MARGIN_ADJUSTMENT, TERMUX_APP.DEFAULT_TERMINAL_MARGIN_ADJUSTMENT);\n+    }\n+\n+    public void setTerminalMarginAdjustment(boolean value) {\n+        SharedPreferenceUtils.setBoolean(mSharedPreferences, TERMUX_APP.KEY_TERMINAL_MARGIN_ADJUSTMENT, value, false);\n+    }\n+\n+\n+\n     public boolean isSoftKeyboardEnabled() {\n         return SharedPreferenceUtils.getBoolean(mSharedPreferences, TERMUX_APP.KEY_SOFT_KEYBOARD_ENABLED, TERMUX_APP.DEFAULT_VALUE_KEY_SOFT_KEYBOARD_ENABLED);\n     }\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/settings/preferences/TermuxPreferenceConstants.java b/termux-shared/src/main/java/com/termux/shared/settings/preferences/TermuxPreferenceConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/settings/preferences/TermuxPreferenceConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/settings/preferences/TermuxPreferenceConstants.java\n@@ -1,7 +1,7 @@\n package com.termux.shared.settings.preferences;\n \n /*\n- * Version: v0.10.0\n+ * Version: v0.11.0\n  *\n  * Changelog\n  *\n@@ -44,6 +44,10 @@\n  * - 0.10.0 (2021-05-12)\n  *      - Added following to `TERMUX_APP`:\n  *          `KEY_SOFT_KEYBOARD_ENABLED_ONLY_IF_NO_HARDWARE` and `DEFAULT_VALUE_KEY_SOFT_KEYBOARD_ENABLED_ONLY_IF_NO_HARDWARE`.\n+ *\n+ * - 0.11.0 (2021-07-08)\n+ *      - Added following to `TERMUX_APP`:\n+ *          `KEY_DISABLE_TERMINAL_MARGIN_ADJUSTMENT`.\n  */\n \n /**\n@@ -60,6 +64,15 @@ public final class TermuxPreferenceConstants {\n      */\n     public static final class TERMUX_APP {\n \n+        /**\n+         * Defines the key for whether terminal view margin adjustment that is done to prevent soft\n+         * keyboard from covering bottom part of terminal view on some devices is enabled or not.\n+         * Margin adjustment may cause screen flickering on some devices and so should be disabled.\n+         */\n+        public static final String KEY_TERMINAL_MARGIN_ADJUSTMENT =  \"terminal_margin_adjustment\";\n+        public static final boolean DEFAULT_TERMINAL_MARGIN_ADJUSTMENT = true;\n+\n+\n         /**\n          * Defines the key for whether to show terminal toolbar containing extra keys and text input field.\n          */",
    "output": "Allow users to disable terminal margin adjustment from termux settings\n\nPreviously in (32135025) support was added with `disable-terminal-margin-adjustment` `termux.properties` property to disable terminal margin adjustment in case in causes screen flickering or other issues on some devices. It has now been removed in (7aefd943) and moved to Termux Settings since if it causes issues at startup and users can't access `termux.properties` file from the terminal, they will have to use SAF or root to access it, which will require an external app.\n\nUsers can set the value from the `Termux Settings` -> `Termux` -> `Terminal View` -> `Terminal Margin Adjustment` toggle. The `Termux Settings` can be accessed from left drawer in termux and from the android launcher shortcut for Termux Settings, usually accessible by long holding on Termux icon."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -259,8 +259,7 @@ public void onStart() {\n         if (mTermuxTerminalViewClient != null)\n             mTermuxTerminalViewClient.onStart();\n \n-        if (!mProperties.isTerminalMarginAdjustmentDisabled())\n-            addTermuxActivityRootViewGlobalLayoutListener();\n+        addTermuxActivityRootViewGlobalLayoutListener();\n \n         registerTermuxActivityBroadcastReceiver();\n     }\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxPropertyConstants.java b/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxPropertyConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxPropertyConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxPropertyConstants.java\n@@ -72,13 +72,6 @@ public final class TermuxPropertyConstants {\n \n     /* boolean */\n \n-    /** Defines the key for whether terminal view margin adjustment that is done to prevent soft\n-     * keyboard from covering bottom part of terminal view on some devices is disabled or not.\n-     * Margin adjustment may cause screen flickering on some devices and so should be disabled. */\n-    public static final String KEY_DISABLE_TERMINAL_MARGIN_ADJUSTMENT =  \"disable-terminal-margin-adjustment\"; // Default: \"disable-terminal-margin-adjustment\"\n-\n-\n-\n     /** Defines the key for whether a toast will be shown when user changes the terminal session */\n     public static final String KEY_DISABLE_TERMINAL_SESSION_CHANGE_TOAST =  \"disable-terminal-session-change-toast\"; // Default: \"disable-terminal-session-change-toast\"\n \n@@ -302,7 +295,6 @@ public final class TermuxPropertyConstants {\n      * */\n     public static final Set<String> TERMUX_PROPERTIES_LIST = new HashSet<>(Arrays.asList(\n         /* boolean */\n-        KEY_DISABLE_TERMINAL_MARGIN_ADJUSTMENT,\n         KEY_DISABLE_TERMINAL_SESSION_CHANGE_TOAST,\n         KEY_ENFORCE_CHAR_BASED_INPUT,\n         KEY_HIDE_SOFT_KEYBOARD_ON_STARTUP,\n@@ -343,7 +335,6 @@ public final class TermuxPropertyConstants {\n      * default: false\n      * */\n     public static final Set<String> TERMUX_DEFAULT_BOOLEAN_BEHAVIOUR_PROPERTIES_LIST = new HashSet<>(Arrays.asList(\n-        KEY_DISABLE_TERMINAL_MARGIN_ADJUSTMENT,\n         KEY_DISABLE_TERMINAL_SESSION_CHANGE_TOAST,\n         KEY_ENFORCE_CHAR_BASED_INPUT,\n         KEY_HIDE_SOFT_KEYBOARD_ON_STARTUP,\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxSharedProperties.java b/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxSharedProperties.java\n--- a/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxSharedProperties.java\n+++ b/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxSharedProperties.java\n@@ -460,10 +460,6 @@ public static String getVolumeKeysBehaviourInternalPropertyValueFromValue(String\n \n \n \n-    public boolean isTerminalMarginAdjustmentDisabled() {\n-        return (boolean) getInternalPropertyValue(TermuxPropertyConstants.KEY_DISABLE_TERMINAL_MARGIN_ADJUSTMENT, true);\n-    }\n-\n     public boolean areTerminalSessionChangeToastsDisabled() {\n         return (boolean) getInternalPropertyValue(TermuxPropertyConstants.KEY_DISABLE_TERMINAL_SESSION_CHANGE_TOAST, true);\n     }",
    "output": "Revert \"Allow users to disable terminal margin adjustment\"\n\nThis reverts commit 32135025"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java b/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/file/FileUtils.java\n@@ -326,9 +326,10 @@ public static Error validateDirectoryFileExistenceAndPermissions(String label, f\n                     if (createDirectoryIfMissing && fileType == FileType.NO_EXIST) {\n                         Logger.logVerbose(LOG_TAG, \"Creating \" + label + \"directory file at path \\\"\" + filePath + \"\\\"\");\n                         // Create directory and update fileType if successful, otherwise return with error\n-                        if (file.mkdirs())\n-                            fileType = getFileType(filePath, false);\n-                        else\n+                        // It \"might\" be possible that mkdirs returns false even though directory was created\n+                        boolean result = file.mkdirs();\n+                        fileType = getFileType(filePath, false);\n+                        if (!result && fileType != FileType.DIRECTORY)\n                             return FileUtilsErrno.ERRNO_CREATING_FILE_FAILED.getError(label + \"directory file\", filePath);\n                     }\n ",
    "output": "Attempt to fix bootstrap installation failure that may be caused by invalid mkdirs return value"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n@@ -484,15 +484,22 @@ public void onToggleSoftKeyboardRequest() {\n     }\n \n     public void setSoftKeyboardState(boolean isStartup, boolean isReloadTermuxProperties) {\n-        boolean noRequestFocus = false;\n+        boolean noShowKeyboard = false;\n+\n+        // Requesting terminal view focus is necessary regardless of if soft keyboard is to be\n+        // disabled or hidden at startup, otherwise if hardware keyboard is attached and user\n+        // starts typing on hardware keyboard without tapping on the terminal first, then a colour\n+        // tint will be added to the terminal as highlight for the focussed view. Test with a light\n+        // theme.\n \n         // If soft keyboard is disabled by user for Termux (check function docs for Termux behaviour info)\n         if (KeyboardUtils.shouldSoftKeyboardBeDisabled(mActivity,\n             mActivity.getPreferences().isSoftKeyboardEnabled(),\n             mActivity.getPreferences().isSoftKeyboardEnabledOnlyIfNoHardware())) {\n             Logger.logVerbose(LOG_TAG, \"Maintaining disabled soft keyboard\");\n             KeyboardUtils.disableSoftKeyboard(mActivity, mActivity.getTerminalView());\n-            noRequestFocus = true;\n+            mActivity.getTerminalView().requestFocus();\n+            noShowKeyboard = true;\n             // Delay is only required if onCreate() is called like when Termux app is exited with\n             // double back press, not when Termux app is switched back from another app and keyboard\n             // toggle is pressed to enable keyboard\n@@ -508,10 +515,12 @@ public void setSoftKeyboardState(boolean isStartup, boolean isReloadTermuxProper\n             // If soft keyboard is to be hidden on startup\n             if (isStartup && mActivity.getProperties().shouldSoftKeyboardBeHiddenOnStartup()) {\n                 Logger.logVerbose(LOG_TAG, \"Hiding soft keyboard on startup\");\n-                KeyboardUtils.hideSoftKeyboard(mActivity, mActivity.getTerminalView());\n                 // Required to keep keyboard hidden when Termux app is switched back from another app\n                 KeyboardUtils.setSoftKeyboardAlwaysHiddenFlags(mActivity);\n-                noRequestFocus = true;\n+\n+                KeyboardUtils.hideSoftKeyboard(mActivity, mActivity.getTerminalView());\n+                mActivity.getTerminalView().requestFocus();\n+                noShowKeyboard = true;\n                 // Required to keep keyboard hidden on app startup\n                 mShowSoftKeyboardIgnoreOnce = true;\n             }\n@@ -541,7 +550,7 @@ public void onFocusChange(View view, boolean hasFocus) {\n \n         // Do not force show soft keyboard if termux-reload-settings command was run with hardware keyboard\n         // or soft keyboard is to be hidden or is disabled\n-        if (!isReloadTermuxProperties && !noRequestFocus) {\n+        if (!isReloadTermuxProperties && !noShowKeyboard) {\n             // Request focus for TerminalView\n             // Also show the keyboard, since onFocusChange will not be called if TerminalView already\n             // had focus on startup to show the keyboard, like when opening url with context menu",
    "output": "Fix issue where a colour tint/highlight would be added to the terminal\n\nThis would happen when soft keyboard was to be disabled or hidden at startup and a hardware keyboard was attached and user started typing on hardware keyboard without tapping on the terminal first."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/RunCommandService.java b/app/src/main/java/com/termux/app/RunCommandService.java\n--- a/app/src/main/java/com/termux/app/RunCommandService.java\n+++ b/app/src/main/java/com/termux/app/RunCommandService.java\n@@ -13,6 +13,7 @@\n import com.termux.shared.data.DataUtils;\n import com.termux.shared.data.IntentUtils;\n import com.termux.shared.file.TermuxFileUtils;\n+import com.termux.shared.file.filesystem.FileType;\n import com.termux.shared.models.errors.Errno;\n import com.termux.shared.models.errors.Error;\n import com.termux.shared.termux.TermuxConstants;\n@@ -75,8 +76,7 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n             return Service.START_NOT_STICKY;\n         }\n \n-        executionCommand.executable = IntentUtils.getStringExtraIfSet(intent, RUN_COMMAND_SERVICE.EXTRA_COMMAND_PATH, null);\n-\n+        String executableExtra = executionCommand.executable = IntentUtils.getStringExtraIfSet(intent, RUN_COMMAND_SERVICE.EXTRA_COMMAND_PATH, null);\n         executionCommand.arguments = IntentUtils.getStringArrayExtraIfSet(intent, RUN_COMMAND_SERVICE.EXTRA_ARGUMENTS, null);\n \n         /*\n@@ -176,9 +176,17 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n             }\n         }\n \n+        // If the executable passed as the extra was an applet for coreutils/busybox, then we must\n+        // use it instead of the canonical path above since otherwise arguments would be passed to\n+        // coreutils/busybox instead and command would fail. Broken symlinks would already have been\n+        // validated so it should be fine to use it.\n+        executableExtra = TermuxFileUtils.getExpandedTermuxPath(executableExtra);\n+        if (FileUtils.getFileType(executableExtra, false) == FileType.SYMLINK) {\n+            Logger.logVerbose(LOG_TAG, \"The executableExtra path \\\"\" + executableExtra + \"\\\" is a symlink so using it instead of the canonical path \\\"\" + executionCommand.executable + \"\\\"\");\n+            executionCommand.executable = executableExtra;\n+        }\n \n-\n-        executionCommand.executableUri = new Uri.Builder().scheme(TERMUX_SERVICE.URI_SCHEME_SERVICE_EXECUTE).path(TermuxFileUtils.getExpandedTermuxPath(executionCommand.executable)).build();\n+        executionCommand.executableUri = new Uri.Builder().scheme(TERMUX_SERVICE.URI_SCHEME_SERVICE_EXECUTE).path(executionCommand.executable).build();\n \n         Logger.logVerbose(LOG_TAG, executionCommand.toString());\n ",
    "output": "Fix issue where RUN_COMMAND intent was failing for coreutils/busybox applets"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxInstaller.java b/app/src/main/java/com/termux/app/TermuxInstaller.java\n--- a/app/src/main/java/com/termux/app/TermuxInstaller.java\n+++ b/app/src/main/java/com/termux/app/TermuxInstaller.java\n@@ -196,7 +196,7 @@ public static void showBootstrapErrorDialog(Activity activity, String PREFIX_FIL\n         Logger.logErrorExtended(LOG_TAG, \"Bootstrap Error:\\n\" + message);\n \n         // Send a notification with the exception so that the user knows why bootstrap setup failed\n-        CrashUtils.sendCrashReportNotification(activity, LOG_TAG, \"## Bootstrap Error\\n\\n\" + message, true);\n+        CrashUtils.sendCrashReportNotification(activity, LOG_TAG, \"## Bootstrap Error\\n\\n\" + message, true, true);\n \n         activity.runOnUiThread(() -> {\n             try {\n@@ -231,7 +231,7 @@ public void run() {\n                     if (error != null) {\n                         Logger.logErrorAndShowToast(context, LOG_TAG, error.getMessage());\n                         Logger.logErrorExtended(LOG_TAG, \"Setup Storage Error\\n\" + error.toString());\n-                        CrashUtils.sendCrashReportNotification(context, LOG_TAG, \"## Setup Storage Error\\n\\n\" + Error.getErrorMarkdownString(error), true);\n+                        CrashUtils.sendCrashReportNotification(context, LOG_TAG, \"## Setup Storage Error\\n\\n\" + Error.getErrorMarkdownString(error), true, true);\n                         return;\n                     }\n \n@@ -270,7 +270,7 @@ public void run() {\n                 } catch (Exception e) {\n                     Logger.logErrorAndShowToast(context, LOG_TAG, e.getMessage());\n                     Logger.logStackTraceWithMessage(LOG_TAG, \"Setup Storage Error: Error setting up link\", e);\n-                    CrashUtils.sendCrashReportNotification(context, LOG_TAG, \"## Setup Storage Error\\n\\n\" + Logger.getStackTracesMarkdownString(null, Logger.getStackTracesStringArray(e)), true);\n+                    CrashUtils.sendCrashReportNotification(context, LOG_TAG, \"## Setup Storage Error\\n\\n\" + Logger.getStackTracesMarkdownString(null, Logger.getStackTracesStringArray(e)), true, true);\n                 }\n             }\n         }.start();\n\ndiff --git a/app/src/main/java/com/termux/app/utils/CrashUtils.java b/app/src/main/java/com/termux/app/utils/CrashUtils.java\n--- a/app/src/main/java/com/termux/app/utils/CrashUtils.java\n+++ b/app/src/main/java/com/termux/app/utils/CrashUtils.java\n@@ -20,6 +20,7 @@\n import com.termux.shared.settings.preferences.TermuxPreferenceConstants;\n import com.termux.shared.data.DataUtils;\n import com.termux.shared.logger.Logger;\n+import com.termux.shared.termux.AndroidUtils;\n import com.termux.shared.termux.TermuxUtils;\n \n import com.termux.shared.termux.TermuxConstants;\n@@ -86,7 +87,7 @@ public void run() {\n \n                 Logger.logDebug(logTag, \"A crash log file found at \\\"\" + TermuxConstants.TERMUX_CRASH_LOG_FILE_PATH +  \"\\\".\");\n \n-                sendCrashReportNotification(context, logTag, reportString, false);\n+                sendCrashReportNotification(context, logTag, reportString, false, false);\n             }\n         }.start();\n     }\n@@ -97,13 +98,15 @@ public void run() {\n      *\n      * @param context The {@link Context} for operations.\n      * @param logTag The log tag to use for logging.\n-     * @param reportString The text for the crash report.\n+     * @param message The message for the crash report.\n      * @param forceNotification If set to {@code true}, then a notification will be shown\n      *                          regardless of if pending intent is {@code null} or\n      *                          {@link TermuxPreferenceConstants.TERMUX_APP#KEY_CRASH_REPORT_NOTIFICATIONS_ENABLED}\n      *                          is {@code false}.\n+     * @param addAppAndDeviceInfo If set to {@code true}, then app and device info will be appended\n+     *                            to the message.\n      */\n-    public static void sendCrashReportNotification(final Context context, String logTag, String reportString, boolean forceNotification) {\n+    public static void sendCrashReportNotification(final Context context, String logTag, String message, boolean forceNotification, boolean addAppAndDeviceInfo) {\n         if (context == null) return;\n \n         TermuxAppSharedPreferences preferences = TermuxAppSharedPreferences.build(context);\n@@ -121,7 +124,14 @@ public static void sendCrashReportNotification(final Context context, String log\n \n         Logger.logDebug(logTag, \"Sending \\\"\" + title + \"\\\" notification.\");\n \n-        Intent notificationIntent = ReportActivity.newInstance(context, new ReportInfo(UserAction.CRASH_REPORT.getName(), logTag, title, null, reportString, \"\\n\\n\" + TermuxUtils.getReportIssueMarkdownString(context), true));\n+        StringBuilder reportString = new StringBuilder(message);\n+\n+        if (addAppAndDeviceInfo) {\n+            reportString.append(\"\\n\\n\").append(TermuxUtils.getAppInfoMarkdownString(context, true));\n+            reportString.append(\"\\n\\n\").append(AndroidUtils.getDeviceInfoMarkdownString(context));\n+        }\n+\n+        Intent notificationIntent = ReportActivity.newInstance(context, new ReportInfo(UserAction.CRASH_REPORT.getName(), logTag, title, null, reportString.toString(), \"\\n\\n\" + TermuxUtils.getReportIssueMarkdownString(context), true));\n         PendingIntent pendingIntent = PendingIntent.getActivity(context, 0, notificationIntent, PendingIntent.FLAG_UPDATE_CURRENT);\n \n         // Setup the notification channel if not already set up",
    "output": "Add app and device info too for crash notification shown when bootstrap installation or setup storage fails"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/logger/Logger.java b/termux-shared/src/main/java/com/termux/shared/logger/Logger.java\n--- a/termux-shared/src/main/java/com/termux/shared/logger/Logger.java\n+++ b/termux-shared/src/main/java/com/termux/shared/logger/Logger.java\n@@ -219,105 +219,54 @@ public static void logDebugAndShowToast(Context context, String message) {\n \n \n \n-    public static void logStackTraceWithMessage(String tag, String message, Throwable throwable, boolean getSuppressed) {\n-        Logger.logErrorExtended(tag, getMessageAndStackTraceString(message, throwable, getSuppressed));\n-    }\n-\n     public static void logStackTraceWithMessage(String tag, String message, Throwable throwable) {\n-        logStackTraceWithMessage(tag, message, throwable, true);\n-    }\n-\n-    public static void logStackTraceWithMessage(String message, Throwable throwable, boolean getSuppressed) {\n-        logStackTraceWithMessage(DEFAULT_LOG_TAG, message, throwable, getSuppressed);\n+        Logger.logErrorExtended(tag, getMessageAndStackTraceString(message, throwable));\n     }\n \n     public static void logStackTraceWithMessage(String message, Throwable throwable) {\n-        logStackTraceWithMessage(DEFAULT_LOG_TAG, message, throwable, true);\n-    }\n-\n-\n-    public static void logStackTrace(String tag, Throwable throwable, boolean getSuppressed) {\n-        logStackTraceWithMessage(tag, null, throwable, getSuppressed);\n+        logStackTraceWithMessage(DEFAULT_LOG_TAG, message, throwable);\n     }\n \n     public static void logStackTrace(String tag, Throwable throwable) {\n-        logStackTraceWithMessage(tag, null, throwable, true);\n-    }\n-\n-\n-    public static void logStackTrace(Throwable throwable, boolean getSuppressed) {\n-        logStackTraceWithMessage(DEFAULT_LOG_TAG, null, throwable, getSuppressed);\n+        logStackTraceWithMessage(tag, null, throwable);\n     }\n \n     public static void logStackTrace(Throwable throwable) {\n-        logStackTraceWithMessage(DEFAULT_LOG_TAG, null, throwable, true);\n+        logStackTraceWithMessage(DEFAULT_LOG_TAG, null, throwable);\n     }\n \n \n \n-    public static void logStackTracesWithMessage(String tag, String message, List<Throwable> throwablesList, boolean getSuppressed) {\n-        Logger.logErrorExtended(tag, getMessageAndStackTracesString(message, throwablesList, getSuppressed));\n-    }\n-\n     public static void logStackTracesWithMessage(String tag, String message, List<Throwable> throwablesList) {\n-        Logger.logErrorExtended(tag, getMessageAndStackTracesString(message, throwablesList, true));\n+        Logger.logErrorExtended(tag, getMessageAndStackTracesString(message, throwablesList));\n     }\n \n \n \n     public static String getMessageAndStackTraceString(String message, Throwable throwable) {\n-        return getMessageAndStackTraceString(message, throwable, true);\n-    }\n-\n-    public static String getMessageAndStackTraceString(String message, Throwable throwable, boolean getSuppressed) {\n         if (message == null && throwable == null)\n             return null;\n         else if (message != null && throwable != null)\n-            return message + \":\\n\" + getStackTraceString(throwable, getSuppressed);\n+            return message + \":\\n\" + getStackTraceString(throwable);\n         else if (throwable == null)\n             return message;\n         else\n-            return getStackTraceString(throwable, getSuppressed);\n+            return getStackTraceString(throwable);\n     }\n \n-\n-\n     public static String getMessageAndStackTracesString(String message, List<Throwable> throwablesList) {\n-        return getMessageAndStackTracesString(message, throwablesList, true);\n-    }\n-\n-    public static String getMessageAndStackTracesString(String message, List<Throwable> throwablesList, boolean getSuppressed) {\n         if (message == null && (throwablesList == null || throwablesList.size() == 0))\n             return null;\n         else if (message != null && (throwablesList != null && throwablesList.size() != 0))\n-            return message + \":\\n\" + getStackTracesString(null, getStackTracesStringArray(throwablesList, getSuppressed));\n+            return message + \":\\n\" + getStackTracesString(null, getStackTracesStringArray(throwablesList));\n         else if (throwablesList == null || throwablesList.size() == 0)\n             return message;\n         else\n-            return getStackTracesString(null, getStackTracesStringArray(throwablesList, getSuppressed));\n+            return getStackTracesString(null, getStackTracesStringArray(throwablesList));\n     }\n \n \n \n-    public static String getStackTraceString(Throwable throwable, boolean getSuppressed) {\n-        if (throwable == null) return null;\n-\n-        StringBuilder stackTraceString = new StringBuilder();\n-        stackTraceString.append(getStackTraceString(throwable));\n-\n-        if (getSuppressed) {\n-            Throwable[] suppressedThrowablesArray = throwable.getSuppressed();\n-            if (suppressedThrowablesArray != null && suppressedThrowablesArray.length > 0) {\n-                for (Throwable suppressedThrowable : suppressedThrowablesArray) {\n-                    if (suppressedThrowable == null) continue;\n-                    stackTraceString.append(\"\\n\\n\").append(getStackTraceString(suppressedThrowable));\n-                }\n-            }\n-        }\n-\n-        return stackTraceString.toString();\n-    }\n-\n     public static String getStackTraceString(Throwable throwable) {\n         if (throwable == null) return null;\n \n@@ -339,25 +288,15 @@ public static String getStackTraceString(Throwable throwable) {\n \n \n \n-    public static String[] getStackTracesStringArray(Throwable throwable, boolean getSuppressed) {\n-        return getStackTracesStringArray(Collections.singletonList(throwable), getSuppressed);\n-    }\n-\n     public static String[] getStackTracesStringArray(Throwable throwable) {\n-        return getStackTracesStringArray(Collections.singletonList(throwable), true);\n+        return getStackTracesStringArray(Collections.singletonList(throwable));\n     }\n \n     public static String[] getStackTracesStringArray(List<Throwable> throwablesList) {\n-        return getStackTracesStringArray(throwablesList, true);\n-\n-    }\n-\n-    public static String[] getStackTracesStringArray(List<Throwable> throwablesList, boolean getSuppressed) {\n         if (throwablesList == null) return null;\n-\n         final String[] stackTraceStringArray = new String[throwablesList.size()];\n         for (int i = 0; i < throwablesList.size(); i++) {\n-            stackTraceStringArray[i] = getStackTraceString(throwablesList.get(i), getSuppressed);\n+            stackTraceStringArray[i] = getStackTraceString(throwablesList.get(i));\n         }\n         return stackTraceStringArray;\n     }\n@@ -415,7 +354,7 @@ public static String getMultiLineLogStringEntry(String label, Object object, Str\n         else\n             return  label + \": \"  +  def;\n     }\n-    \n+\n \n \n     public static void showToast(final Context context, final String toastText, boolean longDuration) {\n@@ -444,7 +383,7 @@ public static CharSequence[] getLogLevelLabelsArray(Context context, CharSequenc\n             logLevelLabels[i] = getLogLevelLabel(context, Integer.parseInt(logLevels[i].toString()), addDefaultTag);\n         }\n \n-       return logLevelLabels;\n+        return logLevelLabels;\n     }\n \n     public static String getLogLevelLabel(final Context context, final int logLevel, final boolean addDefaultTag) {",
    "output": "Revert some unneeded changes to Logger done in 679e0de0\n\nLogger was updated to get suppressed exceptions by calling `Throwable[] getSuppressed()` but `printStackTrace()` would already log them, even though shortened stacktrace with `... n more` notation, but this should be enough for debugging since main throwable stacktrace should have enough class line info. Manually logging full suppressed stacktraces would likely trigger `LOGGER_ENTRY_MAX_PAYLOAD` and split the message into multiple log entries and also duplicate the suppressed stacktraces, so best revert this unless ever necessary."
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/crash/CrashHandler.java b/termux-shared/src/main/java/com/termux/shared/crash/CrashHandler.java\n--- a/termux-shared/src/main/java/com/termux/shared/crash/CrashHandler.java\n+++ b/termux-shared/src/main/java/com/termux/shared/crash/CrashHandler.java\n@@ -57,7 +57,7 @@ public static void logCrash(@NonNull final Context context, @NonNull final Crash\n         reportString.append(\"## Crash Details\\n\");\n         reportString.append(\"\\n\").append(MarkdownUtils.getSingleLineMarkdownStringEntry(\"Crash Thread\", thread.toString(), \"-\"));\n         reportString.append(\"\\n\").append(MarkdownUtils.getSingleLineMarkdownStringEntry(\"Crash Timestamp\", AndroidUtils.getCurrentTimeStamp(), \"-\"));\n-\n+        reportString.append(\"\\n\\n\").append(MarkdownUtils.getMultiLineMarkdownStringEntry(\"Crash Message\", throwable.getMessage(), \"-\"));\n         reportString.append(\"\\n\\n\").append(Logger.getStackTracesMarkdownString(\"Stacktrace\", Logger.getStackTracesStringArray(throwable)));\n \n         String appInfoMarkdownString = crashHandlerClient.getAppInfoMarkdownString(context);",
    "output": "Fx issues where crash throwable message wasn't been added to crash log"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxApplication.java b/app/src/main/java/com/termux/app/TermuxApplication.java\n--- a/app/src/main/java/com/termux/app/TermuxApplication.java\n+++ b/app/src/main/java/com/termux/app/TermuxApplication.java\n@@ -2,7 +2,7 @@\n \n import android.app.Application;\n \n-import com.termux.shared.crash.CrashHandler;\n+import com.termux.shared.crash.TermuxCrashUtils;\n import com.termux.shared.settings.preferences.TermuxAppSharedPreferences;\n import com.termux.shared.logger.Logger;\n \n@@ -12,7 +12,7 @@ public void onCreate() {\n         super.onCreate();\n \n         // Set crash handler for the app\n-        CrashHandler.setCrashHandler(this);\n+        TermuxCrashUtils.setCrashHandler(this);\n \n         // Set log level for the app\n         setLogLevel();\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/crash/CrashHandler.java b/termux-shared/src/main/java/com/termux/shared/crash/CrashHandler.java\n--- a/termux-shared/src/main/java/com/termux/shared/crash/CrashHandler.java\n+++ b/termux-shared/src/main/java/com/termux/shared/crash/CrashHandler.java\n@@ -9,8 +9,6 @@\n import com.termux.shared.markdown.MarkdownUtils;\n import com.termux.shared.models.errors.Error;\n import com.termux.shared.termux.AndroidUtils;\n-import com.termux.shared.termux.TermuxConstants;\n-import com.termux.shared.termux.TermuxUtils;\n \n import java.nio.charset.Charset;\n \n@@ -19,58 +17,85 @@\n  */\n public class CrashHandler implements Thread.UncaughtExceptionHandler {\n \n-    private final Context context;\n+    private final Context mContext;\n+    private final CrashHandlerClient mCrashHandlerClient;\n     private final Thread.UncaughtExceptionHandler defaultUEH;\n \n     private static final String LOG_TAG = \"CrashUtils\";\n \n-    private CrashHandler(final Context context) {\n-        this.context = context;\n+    private CrashHandler(@NonNull final Context context, @NonNull final CrashHandlerClient crashHandlerClient) {\n+        this.mContext = context;\n+        this.mCrashHandlerClient = crashHandlerClient;\n         this.defaultUEH = Thread.getDefaultUncaughtExceptionHandler();\n     }\n \n     public void uncaughtException(@NonNull Thread thread, @NonNull Throwable throwable) {\n-        logCrash(context,thread, throwable);\n+        logCrash(mContext, mCrashHandlerClient, thread, throwable);\n         defaultUEH.uncaughtException(thread, throwable);\n     }\n \n     /**\n      * Set default uncaught crash handler of current thread to {@link CrashHandler}.\n      */\n-    public static void setCrashHandler(final Context context) {\n+    public static void setCrashHandler(@NonNull final Context context, @NonNull final CrashHandlerClient crashHandlerClient) {\n         if (!(Thread.getDefaultUncaughtExceptionHandler() instanceof CrashHandler)) {\n-            Thread.setDefaultUncaughtExceptionHandler(new CrashHandler(context));\n+            Thread.setDefaultUncaughtExceptionHandler(new CrashHandler(context, crashHandlerClient));\n         }\n     }\n \n     /**\n-     * Log a crash in the crash log file at\n-     * {@link TermuxConstants#TERMUX_CRASH_LOG_FILE_PATH}.\n+     * Log a crash in the crash log file at {@code crashlogFilePath}.\n      *\n      * @param context The {@link Context} for operations.\n+     * @param crashHandlerClient The {@link CrashHandlerClient} implementation.\n      * @param thread The {@link Thread} in which the crash happened.\n      * @param throwable The {@link Throwable} thrown for the crash.\n      */\n-    public static void logCrash(final Context context, final Thread thread, final Throwable throwable) {\n-\n+    public static void logCrash(@NonNull final Context context, @NonNull final CrashHandlerClient crashHandlerClient, final Thread thread, final Throwable throwable) {\n         StringBuilder reportString = new StringBuilder();\n \n         reportString.append(\"## Crash Details\\n\");\n         reportString.append(\"\\n\").append(MarkdownUtils.getSingleLineMarkdownStringEntry(\"Crash Thread\", thread.toString(), \"-\"));\n         reportString.append(\"\\n\").append(MarkdownUtils.getSingleLineMarkdownStringEntry(\"Crash Timestamp\", AndroidUtils.getCurrentTimeStamp(), \"-\"));\n \n         reportString.append(\"\\n\\n\").append(Logger.getStackTracesMarkdownString(\"Stacktrace\", Logger.getStackTracesStringArray(throwable)));\n-        reportString.append(\"\\n\\n\").append(TermuxUtils.getAppInfoMarkdownString(context, true));\n+\n+        String appInfoMarkdownString = crashHandlerClient.getAppInfoMarkdownString(context);\n+        if (appInfoMarkdownString != null && !appInfoMarkdownString.isEmpty())\n+            reportString.append(\"\\n\\n\").append(appInfoMarkdownString);\n+\n         reportString.append(\"\\n\\n\").append(AndroidUtils.getDeviceInfoMarkdownString(context));\n \n         // Log report string to logcat\n         Logger.logError(reportString.toString());\n \n         // Write report string to crash log file\n-        Error error = FileUtils.writeStringToFile(\"crash log\", TermuxConstants.TERMUX_CRASH_LOG_FILE_PATH, Charset.defaultCharset(), reportString.toString(), false);\n+        Error error = FileUtils.writeStringToFile(\"crash log\", crashHandlerClient.getCrashLogFilePath(context),\n+                        Charset.defaultCharset(), reportString.toString(), false);\n         if (error != null) {\n             Logger.logErrorExtended(LOG_TAG, error.toString());\n         }\n     }\n \n+    public interface CrashHandlerClient {\n+\n+        /**\n+         * Get crash log file path.\n+         *\n+         * @param context The {@link Context} passed to {@link CrashHandler#CrashHandler(Context, CrashHandlerClient)}.\n+         * @return Should return the crash log file path.\n+         */\n+        @NonNull\n+        String getCrashLogFilePath(Context context);\n+\n+        /**\n+         * Get app info markdown string to add to crash log.\n+         *\n+         * @param context The {@link Context} passed to {@link CrashHandler#CrashHandler(Context, CrashHandlerClient)}.\n+         * @return Should return app info markdown string.\n+         */\n+        String getAppInfoMarkdownString(Context context);\n+\n+    }\n+\n }\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/crash/TermuxCrashUtils.java b/termux-shared/src/main/java/com/termux/shared/crash/TermuxCrashUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/crash/TermuxCrashUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/crash/TermuxCrashUtils.java\n@@ -0,0 +1,31 @@\n+package com.termux.shared.crash;\n+\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.termux.shared.termux.TermuxConstants;\n+import com.termux.shared.termux.TermuxUtils;\n+\n+public class TermuxCrashUtils implements CrashHandler.CrashHandlerClient {\n+\n+    /**\n+     * Set default uncaught crash handler of current thread to {@link CrashHandler} for Termux app\n+     * and its plugin to log crashes at {@link TermuxConstants#TERMUX_CRASH_LOG_FILE_PATH}.\n+     */\n+    public static void setCrashHandler(@NonNull final Context context) {\n+        CrashHandler.setCrashHandler(context, new TermuxCrashUtils());\n+    }\n+\n+    @NonNull\n+    @Override\n+    public String getCrashLogFilePath(Context context) {\n+        return TermuxConstants.TERMUX_CRASH_LOG_FILE_PATH;\n+    }\n+\n+    @Override\n+    public String getAppInfoMarkdownString(Context context) {\n+        return TermuxUtils.getAppInfoMarkdownString(context, true);\n+    }\n+\n+}",
    "output": "Move Termux app specific logic out of CrashHandler\n\nCreate the TermuxCrashUtils class that provides the default path and app for termux instead of hardcoding it in CrashHandler. TermuxCrashUtils can be used by termux plugins as well for their own usage or they can implement the CrashHandler.CrashHandlerClient if they want to log to different files or want custom logic."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/utils/CrashUtils.java b/app/src/main/java/com/termux/app/utils/CrashUtils.java\n--- a/app/src/main/java/com/termux/app/utils/CrashUtils.java\n+++ b/app/src/main/java/com/termux/app/utils/CrashUtils.java\n@@ -15,6 +15,7 @@\n import com.termux.shared.file.FileUtils;\n import com.termux.shared.models.ReportInfo;\n import com.termux.app.models.UserAction;\n+import com.termux.shared.notification.TermuxNotificationUtils;\n import com.termux.shared.settings.preferences.TermuxAppSharedPreferences;\n import com.termux.shared.settings.preferences.TermuxPreferenceConstants;\n import com.termux.shared.data.DataUtils;\n@@ -131,7 +132,7 @@ public static void sendCrashReportNotification(final Context context, String log\n         if (builder == null) return;\n \n         // Send the notification\n-        int nextNotificationId = NotificationUtils.getNextNotificationId(context);\n+        int nextNotificationId = TermuxNotificationUtils.getNextNotificationId(context);\n         NotificationManager notificationManager = NotificationUtils.getNotificationManager(context);\n         if (notificationManager != null)\n             notificationManager.notify(nextNotificationId, builder.build());\n\ndiff --git a/app/src/main/java/com/termux/app/utils/PluginUtils.java b/app/src/main/java/com/termux/app/utils/PluginUtils.java\n--- a/app/src/main/java/com/termux/app/utils/PluginUtils.java\n+++ b/app/src/main/java/com/termux/app/utils/PluginUtils.java\n@@ -16,6 +16,7 @@\n import com.termux.shared.models.errors.Errno;\n import com.termux.shared.models.errors.Error;\n import com.termux.shared.notification.NotificationUtils;\n+import com.termux.shared.notification.TermuxNotificationUtils;\n import com.termux.shared.shell.ResultSender;\n import com.termux.shared.shell.ShellUtils;\n import com.termux.shared.termux.AndroidUtils;\n@@ -233,7 +234,7 @@ public static void sendPluginCommandErrorNotification(Context context, String lo\n         if (builder == null) return;\n \n         // Send the notification\n-        int nextNotificationId = NotificationUtils.getNextNotificationId(context);\n+        int nextNotificationId = TermuxNotificationUtils.getNextNotificationId(context);\n         NotificationManager notificationManager = NotificationUtils.getNotificationManager(context);\n         if (notificationManager != null)\n             notificationManager.notify(nextNotificationId, builder.build());\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/notification/NotificationUtils.java b/termux-shared/src/main/java/com/termux/shared/notification/NotificationUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/notification/NotificationUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/notification/NotificationUtils.java\n@@ -10,9 +10,6 @@\n import androidx.annotation.Nullable;\n \n import com.termux.shared.logger.Logger;\n-import com.termux.shared.settings.preferences.TermuxAppSharedPreferences;\n-import com.termux.shared.settings.preferences.TermuxPreferenceConstants;\n-import com.termux.shared.termux.TermuxConstants;\n \n public class NotificationUtils {\n \n@@ -49,35 +46,6 @@ public static NotificationManager getNotificationManager(final Context context)\n         return (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);\n     }\n \n-    /**\n-     * Try to get the next unique notification id that isn't already being used by the app.\n-     *\n-     * Termux app and its plugin must use unique notification ids from the same pool due to usage of android:sharedUserId.\n-     * https://commonsware.com/blog/2017/06/07/jobscheduler-job-ids-libraries.html\n-     *\n-     * @param context The {@link Context} for operations.\n-     * @return Returns the notification id that should be safe to use.\n-     */\n-    public synchronized static int getNextNotificationId(final Context context) {\n-        if (context == null) return TermuxPreferenceConstants.TERMUX_APP.DEFAULT_VALUE_KEY_LAST_NOTIFICATION_ID;\n-\n-        TermuxAppSharedPreferences preferences = TermuxAppSharedPreferences.build(context);\n-        if (preferences == null) return TermuxPreferenceConstants.TERMUX_APP.DEFAULT_VALUE_KEY_LAST_NOTIFICATION_ID;\n-\n-        int lastNotificationId = preferences.getLastNotificationId();\n-\n-        int nextNotificationId = lastNotificationId + 1;\n-        while(nextNotificationId == TermuxConstants.TERMUX_APP_NOTIFICATION_ID || nextNotificationId == TermuxConstants.TERMUX_RUN_COMMAND_NOTIFICATION_ID) {\n-            nextNotificationId++;\n-        }\n-\n-        if (nextNotificationId == Integer.MAX_VALUE || nextNotificationId < 0)\n-            nextNotificationId = TermuxPreferenceConstants.TERMUX_APP.DEFAULT_VALUE_KEY_LAST_NOTIFICATION_ID;\n-\n-        preferences.setLastNotificationId(nextNotificationId);\n-        return nextNotificationId;\n-    }\n-\n     /**\n      * Get {@link Notification.Builder}.\n      *\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/notification/TermuxNotificationUtils.java b/termux-shared/src/main/java/com/termux/shared/notification/TermuxNotificationUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/notification/TermuxNotificationUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/notification/TermuxNotificationUtils.java\n@@ -0,0 +1,38 @@\n+package com.termux.shared.notification;\n+\n+import android.content.Context;\n+\n+import com.termux.shared.settings.preferences.TermuxAppSharedPreferences;\n+import com.termux.shared.settings.preferences.TermuxPreferenceConstants;\n+import com.termux.shared.termux.TermuxConstants;\n+\n+public class TermuxNotificationUtils {\n+    /**\n+     * Try to get the next unique notification id that isn't already being used by the app.\n+     *\n+     * Termux app and its plugin must use unique notification ids from the same pool due to usage of android:sharedUserId.\n+     * https://commonsware.com/blog/2017/06/07/jobscheduler-job-ids-libraries.html\n+     *\n+     * @param context The {@link Context} for operations.\n+     * @return Returns the notification id that should be safe to use.\n+     */\n+    public synchronized static int getNextNotificationId(final Context context) {\n+        if (context == null) return TermuxPreferenceConstants.TERMUX_APP.DEFAULT_VALUE_KEY_LAST_NOTIFICATION_ID;\n+\n+        TermuxAppSharedPreferences preferences = TermuxAppSharedPreferences.build(context);\n+        if (preferences == null) return TermuxPreferenceConstants.TERMUX_APP.DEFAULT_VALUE_KEY_LAST_NOTIFICATION_ID;\n+\n+        int lastNotificationId = preferences.getLastNotificationId();\n+\n+        int nextNotificationId = lastNotificationId + 1;\n+        while(nextNotificationId == TermuxConstants.TERMUX_APP_NOTIFICATION_ID || nextNotificationId == TermuxConstants.TERMUX_RUN_COMMAND_NOTIFICATION_ID) {\n+            nextNotificationId++;\n+        }\n+\n+        if (nextNotificationId == Integer.MAX_VALUE || nextNotificationId < 0)\n+            nextNotificationId = TermuxPreferenceConstants.TERMUX_APP.DEFAULT_VALUE_KEY_LAST_NOTIFICATION_ID;\n+\n+        preferences.setLastNotificationId(nextNotificationId);\n+        return nextNotificationId;\n+    }\n+}",
    "output": "Move Termux app specific logic out of NotificationUtils"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -640,8 +640,13 @@ private void startTermuxActivity() {\n         // For android >= 10, apps require Display over other apps permission to start foreground activities\n         // from background (services). If it is not granted, then TermuxSessions that are started will\n         // show in Termux notification but will not run until user manually clicks the notification.\n-        if (PermissionUtils.validateDisplayOverOtherAppsPermissionForPostAndroid10(this)) {\n+        if (PermissionUtils.validateDisplayOverOtherAppsPermissionForPostAndroid10(this, true)) {\n             TermuxActivity.startTermuxActivity(this);\n+        } else {\n+            TermuxAppSharedPreferences preferences = TermuxAppSharedPreferences.build(this);\n+            if (preferences == null) return;\n+            if (preferences.arePluginErrorNotificationsEnabled())\n+                Logger.showToast(this, this.getString(R.string.error_display_over_other_apps_permission_not_granted), true);\n         }\n     }\n \n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/packages/PermissionUtils.java b/termux-shared/src/main/java/com/termux/shared/packages/PermissionUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/packages/PermissionUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/packages/PermissionUtils.java\n@@ -13,9 +13,7 @@\n import androidx.core.content.ContextCompat;\n \n import com.termux.shared.R;\n-import com.termux.shared.termux.TermuxConstants;\n import com.termux.shared.logger.Logger;\n-import com.termux.shared.settings.preferences.TermuxAppSharedPreferences;\n \n import java.util.Arrays;\n \n@@ -81,20 +79,16 @@ public static void requestDisplayOverOtherAppsPermission(Activity context, int r\n         context.startActivityForResult(intent, requestCode);\n     }\n \n-    public static boolean validateDisplayOverOtherAppsPermissionForPostAndroid10(Context context) {\n+    public static boolean validateDisplayOverOtherAppsPermissionForPostAndroid10(Context context, boolean logResults) {\n         if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q) return true;\n         \n         if (!PermissionUtils.checkDisplayOverOtherAppsPermission(context)) {\n-            Logger.logWarn(LOG_TAG, TermuxConstants.TERMUX_APP_NAME + \" App does not have Display over other apps (SYSTEM_ALERT_WINDOW) permission\");\n-\n-            TermuxAppSharedPreferences preferences = TermuxAppSharedPreferences.build(context);\n-            if (preferences == null) return false;\n-\n-            if (preferences.arePluginErrorNotificationsEnabled())\n-                Logger.showToast(context, context.getString(R.string.error_display_over_other_apps_permission_not_granted), true);\n+            if (logResults)\n+                Logger.logWarn(LOG_TAG, context.getPackageName() + \" does not have Display over other apps (SYSTEM_ALERT_WINDOW) permission\");\n             return false;\n         } else {\n-            Logger.logDebug(LOG_TAG, TermuxConstants.TERMUX_APP_NAME + \" App already has Display over other apps (SYSTEM_ALERT_WINDOW) permission\");\n+            if (logResults)\n+                Logger.logDebug(LOG_TAG, context.getPackageName() + \" already has Display over other apps (SYSTEM_ALERT_WINDOW) permission\");\n             return true;\n         }\n     }",
    "output": "Move Termux app specific logic out of PermissionUtils"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/shell/TermuxSession.java b/termux-shared/src/main/java/com/termux/shared/shell/TermuxSession.java\n--- a/termux-shared/src/main/java/com/termux/shared/shell/TermuxSession.java\n+++ b/termux-shared/src/main/java/com/termux/shared/shell/TermuxSession.java\n@@ -91,9 +91,12 @@ public static TermuxSession execute(@NonNull final Context context, @NonNull Exe\n \n             if (executionCommand.executable == null) {\n                 // Fall back to system shell as last resort:\n+                // Do not start a login shell since $HOME/.profile, etc may cause startup failure if they are not valid\n                 executionCommand.executable = \"/system/bin/sh\";\n+            } else {\n+                isLoginShell = true;\n             }\n-            isLoginShell = true;\n+\n         }\n \n         String[] processArgs = shellEnvironmentClient.setupProcessArgs(executionCommand.executable, executionCommand.arguments);",
    "output": "Do not start login shell and load ~/.profile if starting a failsafe session\n\nThis is done by not starting arg `0` with `-`\n\nFixes #2150."
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxPropertyConstants.java b/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxPropertyConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxPropertyConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxPropertyConstants.java\n@@ -94,6 +94,11 @@ public final class TermuxPropertyConstants {\n \n \n \n+    /** Defines the key for whether url links in terminal transcript will automatically open on click or on tap */\n+    public static final String KEY_TERMINAL_ONCLICK_URL_OPEN =  \"terminal-onclick-url-open\"; // Default: \"terminal-onclick-url-open\"\n+\n+\n+\n     /** Defines the key for whether to use black UI */\n     public static final String KEY_USE_BLACK_UI =  \"use-black-ui\"; // Default: \"use-black-ui\"\n \n@@ -301,6 +306,7 @@ public final class TermuxPropertyConstants {\n         KEY_DISABLE_TERMINAL_SESSION_CHANGE_TOAST,\n         KEY_ENFORCE_CHAR_BASED_INPUT,\n         KEY_HIDE_SOFT_KEYBOARD_ON_STARTUP,\n+        KEY_TERMINAL_ONCLICK_URL_OPEN,\n         KEY_USE_BLACK_UI,\n         KEY_USE_CTRL_SPACE_WORKAROUND,\n         KEY_USE_FULLSCREEN,\n@@ -341,6 +347,7 @@ public final class TermuxPropertyConstants {\n         KEY_DISABLE_TERMINAL_SESSION_CHANGE_TOAST,\n         KEY_ENFORCE_CHAR_BASED_INPUT,\n         KEY_HIDE_SOFT_KEYBOARD_ON_STARTUP,\n+        KEY_TERMINAL_ONCLICK_URL_OPEN,\n         KEY_USE_CTRL_SPACE_WORKAROUND,\n         KEY_USE_FULLSCREEN,\n         KEY_USE_FULLSCREEN_WORKAROUND,\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxSharedProperties.java b/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxSharedProperties.java\n--- a/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxSharedProperties.java\n+++ b/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxSharedProperties.java\n@@ -476,6 +476,10 @@ public boolean shouldSoftKeyboardBeHiddenOnStartup() {\n         return (boolean) getInternalPropertyValue(TermuxPropertyConstants.KEY_HIDE_SOFT_KEYBOARD_ON_STARTUP, true);\n     }\n \n+    public boolean shouldOpenTerminalTranscriptURLOnClick() {\n+        return (boolean) getInternalPropertyValue(TermuxPropertyConstants.KEY_TERMINAL_ONCLICK_URL_OPEN, true);\n+    }\n+\n     public boolean isUsingBlackUI() {\n         return (boolean) getInternalPropertyValue(TermuxPropertyConstants.KEY_USE_BLACK_UI, true);\n     }",
    "output": "Add termux.properties property for opening terminal transcript urls on click\n\nThe user can add `terminal-onclick-url-open` entry to `termux.properties` file to enable opening url links in terminal transcript on click or on tap. The default value is `false`. So adding the entry `terminal-onclick-url-open=true` to `termux.properties` file will enable url opening. Running `termux-reload-settings` command will also update the behaviour instantaneously if changed.\n\nThis commit just adds the property and doesn't implement the functionality. That will later be merged from #2146."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -259,7 +259,8 @@ public void onStart() {\n         if (mTermuxTerminalViewClient != null)\n             mTermuxTerminalViewClient.onStart();\n \n-        addTermuxActivityRootViewGlobalLayoutListener();\n+        if (!mProperties.isTerminalMarginAdjustmentDisabled())\n+            addTermuxActivityRootViewGlobalLayoutListener();\n \n         registerTermuxActivityBroadcastReceiver();\n     }\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxPropertyConstants.java b/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxPropertyConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxPropertyConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxPropertyConstants.java\n@@ -72,6 +72,13 @@ public final class TermuxPropertyConstants {\n \n     /* boolean */\n \n+    /** Defines the key for whether terminal view margin adjustment that is done to prevent soft\n+     * keyboard from covering bottom part of terminal view on some devices is disabled or not.\n+     * Margin adjustment may cause screen flickering on some devices and so should be disabled. */\n+    public static final String KEY_DISABLE_TERMINAL_MARGIN_ADJUSTMENT =  \"disable-terminal-margin-adjustment\"; // Default: \"disable-terminal-margin-adjustment\"\n+\n+\n+\n     /** Defines the key for whether a toast will be shown when user changes the terminal session */\n     public static final String KEY_DISABLE_TERMINAL_SESSION_CHANGE_TOAST =  \"disable-terminal-session-change-toast\"; // Default: \"disable-terminal-session-change-toast\"\n \n@@ -290,6 +297,7 @@ public final class TermuxPropertyConstants {\n      * */\n     public static final Set<String> TERMUX_PROPERTIES_LIST = new HashSet<>(Arrays.asList(\n         /* boolean */\n+        KEY_DISABLE_TERMINAL_MARGIN_ADJUSTMENT,\n         KEY_DISABLE_TERMINAL_SESSION_CHANGE_TOAST,\n         KEY_ENFORCE_CHAR_BASED_INPUT,\n         KEY_HIDE_SOFT_KEYBOARD_ON_STARTUP,\n@@ -329,6 +337,7 @@ public final class TermuxPropertyConstants {\n      * default: false\n      * */\n     public static final Set<String> TERMUX_DEFAULT_BOOLEAN_BEHAVIOUR_PROPERTIES_LIST = new HashSet<>(Arrays.asList(\n+        KEY_DISABLE_TERMINAL_MARGIN_ADJUSTMENT,\n         KEY_DISABLE_TERMINAL_SESSION_CHANGE_TOAST,\n         KEY_ENFORCE_CHAR_BASED_INPUT,\n         KEY_HIDE_SOFT_KEYBOARD_ON_STARTUP,\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxSharedProperties.java b/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxSharedProperties.java\n--- a/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxSharedProperties.java\n+++ b/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxSharedProperties.java\n@@ -460,6 +460,10 @@ public static String getVolumeKeysBehaviourInternalPropertyValueFromValue(String\n \n \n \n+    public boolean isTerminalMarginAdjustmentDisabled() {\n+        return (boolean) getInternalPropertyValue(TermuxPropertyConstants.KEY_DISABLE_TERMINAL_MARGIN_ADJUSTMENT, true);\n+    }\n+\n     public boolean areTerminalSessionChangeToastsDisabled() {\n         return (boolean) getInternalPropertyValue(TermuxPropertyConstants.KEY_DISABLE_TERMINAL_SESSION_CHANGE_TOAST, true);\n     }",
    "output": "Allow users to disable terminal margin adjustment\n\nThe user can add `disable-terminal-margin-adjustment=true` entry to `termux.properties` file to disable terminal view margin adjustment that is done to prevent soft keyboard from covering bottom part of terminal view on some devices. Margin adjustment may cause screen flickering on some devices and so should be disabled. The default value is `false`. So adding the entry `disable-terminal-margin-adjustment=true` to `termux.properties` file will disable margin adjustment. Exit termux and restart for changes to take affect after updating value.\n\nIn case e5a9b99a did not fix screen flickering issues for #2127, then this can be used to disable it. Closes #2127."
  },
  {
    "input": "diff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -760,6 +760,10 @@ public void updateSize() {\n             mEmulator = mTermSession.getEmulator();\n             mClient.onEmulatorSet();\n \n+            // Update mTerminalCursorBlinkerRunnable inner class mEmulator on session change\n+            if (mTerminalCursorBlinkerRunnable != null)\n+                mTerminalCursorBlinkerRunnable.setEmulator(mEmulator);\n+\n             mTopRow = 0;\n             scrollTo(0, 0);\n             invalidate();\n@@ -966,7 +970,7 @@ private void stopTerminalCursorBlinker() {\n \n     private class TerminalCursorBlinkerRunnable implements Runnable {\n \n-        private final TerminalEmulator mEmulator;\n+        private TerminalEmulator mEmulator;\n         private final int mBlinkRate;\n \n         // Initialize with false so that initial blink state is visible after toggling\n@@ -977,6 +981,10 @@ public TerminalCursorBlinkerRunnable(TerminalEmulator emulator, int blinkRate) {\n             mBlinkRate = blinkRate;\n         }\n \n+        public void setEmulator(TerminalEmulator emulator) {\n+            mEmulator = emulator;\n+        }\n+\n         public void run() {\n             try {\n                 if (mEmulator != null) {",
    "output": "Fix issue where cursor blinker wouldn't automatically start after session change\n\nThe reason was that mTerminalCursorBlinkerRunnable inner class mEmulator wouldn't get updated to the new mEmulator on session change and would still be using the old session's."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -12,6 +12,7 @@\n import android.content.IntentFilter;\n import android.content.ServiceConnection;\n import android.content.pm.PackageManager;\n+import android.graphics.Color;\n import android.net.Uri;\n import android.os.Build;\n import android.os.Bundle;\n@@ -26,6 +27,7 @@\n import android.view.WindowManager;\n import android.view.autofill.AutofillManager;\n import android.widget.EditText;\n+import android.widget.ImageButton;\n import android.widget.ListView;\n import android.widget.Toast;\n \n@@ -218,6 +220,8 @@ public void onCreate(Bundle savedInstanceState) {\n \n         setTerminalToolbarView(savedInstanceState);\n \n+        setSettingsButtonView();\n+\n         setNewSessionButtonView();\n \n         setToggleKeyboardView();\n@@ -402,6 +406,7 @@ private void setDrawerTheme() {\n         if (mProperties.isUsingBlackUI()) {\n             findViewById(R.id.left_drawer).setBackgroundColor(ContextCompat.getColor(this,\n                 android.R.color.background_dark));\n+            ((ImageButton) findViewById(R.id.settings_button)).setColorFilter(Color.WHITE);\n         }\n     }\n \n@@ -496,6 +501,13 @@ private void saveTerminalToolbarTextInput(Bundle savedInstanceState) {\n \n \n \n+    private void setSettingsButtonView() {\n+        ImageButton settingsButton = findViewById(R.id.settings_button);\n+        settingsButton.setOnClickListener(v -> {\n+            startActivity(new Intent(this, SettingsActivity.class));\n+        });\n+    }\n+\n     private void setNewSessionButtonView() {\n         View newSessionButton = findViewById(R.id.new_session_button);\n         newSessionButton.setOnClickListener(v -> mTermuxTerminalSessionClient.addNewSession(false, null));",
    "output": "Add termux settings button to left drawer too since apparently people can't find the one in context menu"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n@@ -245,6 +245,13 @@ public boolean onKeyDown(int keyCode, KeyEvent e, TerminalSession currentSession\n \n     @Override\n     public boolean onKeyUp(int keyCode, KeyEvent e) {\n+        // If emulator is not set, like if bootstrap installation failed and user dismissed the error\n+        // dialog, then just exit the activity, otherwise they will be stuck in a broken state.\n+        if (keyCode == KeyEvent.KEYCODE_BACK && mActivity.getTerminalView().mEmulator == null) {\n+            mActivity.finishActivityIfNotFinishing();\n+            return true;\n+        }\n+\n         return handleVirtualKeys(keyCode, e, false);\n     }\n \n\ndiff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -720,7 +720,10 @@ public boolean handleKeyCode(int keyCode, int keyMod) {\n     public boolean onKeyUp(int keyCode, KeyEvent event) {\n         if (TERMINAL_VIEW_KEY_LOGGING_ENABLED)\n             mClient.logInfo(LOG_TAG, \"onKeyUp(keyCode=\" + keyCode + \", event=\" + event + \")\");\n-        if (mEmulator == null) return true;\n+\n+        // Do not return for KEYCODE_BACK and send it to the client since user may be trying\n+        // to exit the activity.\n+        if (mEmulator == null && keyCode != KeyEvent.KEYCODE_BACK) return true;\n \n         if (mClient.onKeyUp(keyCode, event)) {\n             invalidate();",
    "output": "Fixed issue where back button would not exit the activity if bootstrap installation failed and users dismissed the error dialog,"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/markdown/MarkdownUtils.java b/termux-shared/src/main/java/com/termux/shared/markdown/MarkdownUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/markdown/MarkdownUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/markdown/MarkdownUtils.java\n@@ -90,10 +90,12 @@ public static int getMaxConsecutiveBackTicksCount(String string) {\n \n         int maxCount = 0;\n         int matchCount;\n+        String match;\n \n         Matcher matcher = backticksPattern.matcher(string);\n         while(matcher.find()) {\n-            matchCount = matcher.group(1).length();\n+            match = matcher.group(1);\n+            matchCount = match != null ? match.length() : 0;\n             if (matchCount > maxCount)\n                 maxCount = matchCount;\n         }\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/notification/NotificationUtils.java b/termux-shared/src/main/java/com/termux/shared/notification/NotificationUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/notification/NotificationUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/notification/NotificationUtils.java\n@@ -83,7 +83,7 @@ public synchronized static int getNextNotificationId(final Context context) {\n      *\n      * @param context The {@link Context} for operations.\n      * @param title The title for the notification.\n-     * @param notifiationText The second line text of the notification.\n+     * @param notificationText The second line text of the notification.\n      * @param notificationBigText The full text of the notification that may optionally be styled.\n      * @param pendingIntent The {@link PendingIntent} which should be sent when notification is clicked.\n      * @param notificationMode The notification mode. It must be one of {@code NotificationUtils.NOTIFICATION_MODE_*}.\n@@ -92,11 +92,11 @@ public synchronized static int getNextNotificationId(final Context context) {\n      * @return Returns the {@link Notification.Builder}.\n      */\n     @Nullable\n-    public static Notification.Builder geNotificationBuilder(final Context context, final String channelId, final int priority, final CharSequence title, final CharSequence notifiationText, final CharSequence notificationBigText, final PendingIntent pendingIntent, final int notificationMode) {\n+    public static Notification.Builder geNotificationBuilder(final Context context, final String channelId, final int priority, final CharSequence title, final CharSequence notificationText, final CharSequence notificationBigText, final PendingIntent pendingIntent, final int notificationMode) {\n         if (context == null) return null;\n         Notification.Builder builder = new Notification.Builder(context);\n         builder.setContentTitle(title);\n-        builder.setContentText(notifiationText);\n+        builder.setContentText(notificationText);\n         builder.setStyle(new Notification.BigTextStyle().bigText(notificationBigText));\n         builder.setContentIntent(pendingIntent);\n ",
    "output": "Fix minor typos and potential errors"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -31,6 +31,7 @@\n \n import com.termux.R;\n import com.termux.app.terminal.TermuxActivityRootView;\n+import com.termux.shared.packages.PermissionUtils;\n import com.termux.shared.termux.TermuxConstants;\n import com.termux.shared.termux.TermuxConstants.TERMUX_APP.TERMUX_ACTIVITY;\n import com.termux.app.activities.HelpActivity;\n@@ -165,8 +166,6 @@ public final class TermuxActivity extends Activity implements ServiceConnection\n     private static final int CONTEXT_MENU_SETTINGS_ID = 8;\n     private static final int CONTEXT_MENU_REPORT_ID = 9;\n \n-    private static final int REQUESTCODE_PERMISSION_STORAGE = 1234;\n-\n     private static final String ARG_TERMINAL_TOOLBAR_TEXT_INPUT = \"terminal_toolbar_text_input\";\n \n     private static final String LOG_TAG = \"TermuxActivity\";\n@@ -683,22 +682,22 @@ private void requestAutoFill() {\n      * For processes to access shared internal storage (/sdcard) we need this permission.\n      */\n     public boolean ensureStoragePermissionGranted() {\n-        if (checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED) {\n+        if (PermissionUtils.checkPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE)) {\n             return true;\n         } else {\n-            Logger.logDebug(LOG_TAG, \"Storage permission not granted, requesting permission.\");\n-            requestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, REQUESTCODE_PERMISSION_STORAGE);\n+            Logger.logInfo(LOG_TAG, \"Storage permission not granted, requesting permission.\");\n+            PermissionUtils.requestPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE, PermissionUtils.REQUEST_GRANT_STORAGE_PERMISSION);\n             return false;\n         }\n     }\n \n     @Override\n     public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n-        if (requestCode == REQUESTCODE_PERMISSION_STORAGE && grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n-            Logger.logDebug(LOG_TAG, \"Storage permission granted by user on request.\");\n+        if (requestCode == PermissionUtils.REQUEST_GRANT_STORAGE_PERMISSION && grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n+            Logger.logInfo(LOG_TAG, \"Storage permission granted by user on request.\");\n             TermuxInstaller.setupStorageSymlinks(this);\n         } else {\n-            Logger.logDebug(LOG_TAG, \"Storage permission denied by user on request.\");\n+            Logger.logInfo(LOG_TAG, \"Storage permission denied by user on request.\");\n         }\n     }\n \n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/packages/PermissionUtils.java b/termux-shared/src/main/java/com/termux/shared/packages/PermissionUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/packages/PermissionUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/packages/PermissionUtils.java\n@@ -1,11 +1,13 @@\n package com.termux.shared.packages;\n \n+import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.content.Context;\n import android.content.Intent;\n import android.content.pm.PackageManager;\n import android.net.Uri;\n import android.os.Build;\n+import android.os.PowerManager;\n import android.provider.Settings;\n \n import androidx.core.content.ContextCompat;\n@@ -19,13 +21,23 @@\n \n public class PermissionUtils {\n \n-    public static final int ACTION_MANAGE_OVERLAY_PERMISSION_REQUEST_CODE = 0;\n+    public static final int REQUEST_GRANT_STORAGE_PERMISSION = 1000;\n+\n+    public static final int REQUEST_DISABLE_BATTERY_OPTIMIZATIONS = 2000;\n+    public static final int REQUEST_GRANT_DISPLAY_OVER_OTHER_APPS_PERMISSION = 2001;\n \n     private static final String LOG_TAG = \"PermissionUtils\";\n \n+\n+    public static boolean checkPermission(Context context, String permission) {\n+        if (permission == null) return false;\n+        return checkPermissions(context, new String[]{permission});\n+    }\n+\n     public static boolean checkPermissions(Context context, String[] permissions) {\n-        int result;\n+        if (permissions == null) return false;\n \n+        int result;\n         for (String p:permissions) {\n             result = ContextCompat.checkSelfPermission(context,p);\n             if (result != PackageManager.PERMISSION_GRANTED) {\n@@ -35,55 +47,70 @@ public static boolean checkPermissions(Context context, String[] permissions) {\n         return true;\n     }\n \n-    public static void askPermissions(Activity context, String[] permissions) {\n-        if (context == null || permissions == null) return;\n+\n+\n+    public static void requestPermission(Activity activity, String permission, int requestCode) {\n+        if (permission == null) return;\n+        requestPermissions(activity, new String[]{permission}, requestCode);\n+    }\n+\n+    public static void requestPermissions(Activity activity, String[] permissions, int requestCode) {\n+        if (activity == null || permissions == null) return;\n \n         int result;\n-        Logger.showToast(context, context.getString(R.string.message_sudo_please_grant_permissions), true);\n+        Logger.showToast(activity, activity.getString(R.string.message_sudo_please_grant_permissions), true);\n         try {Thread.sleep(1000);} catch (InterruptedException e) {e.printStackTrace();}\n \n         for (String permission:permissions) {\n-            result = ContextCompat.checkSelfPermission(context, permission);\n+            result = ContextCompat.checkSelfPermission(activity, permission);\n             if (result != PackageManager.PERMISSION_GRANTED) {\n                 Logger.logDebug(LOG_TAG, \"Requesting Permissions: \" + Arrays.toString(permissions));\n-                context.requestPermissions(new String[]{permission}, 0);\n+                activity.requestPermissions(new String[]{permission}, requestCode);\n             }\n         }\n     }\n \n \n \n     public static boolean checkDisplayOverOtherAppsPermission(Context context) {\n-        boolean permissionGranted;\n-\n-        permissionGranted = Settings.canDrawOverlays(context);\n-        if (!permissionGranted) {\n-            Logger.logWarn(LOG_TAG, TermuxConstants.TERMUX_APP_NAME + \" App does not have Display over other apps (SYSTEM_ALERT_WINDOW) permission\");\n-            return false;\n-        } else {\n-            Logger.logDebug(LOG_TAG, TermuxConstants.TERMUX_APP_NAME + \" App already has Display over other apps (SYSTEM_ALERT_WINDOW) permission\");\n-            return true;\n-        }\n+        return Settings.canDrawOverlays(context);\n     }\n \n-    public static void askDisplayOverOtherAppsPermission(Activity context) {\n+    public static void requestDisplayOverOtherAppsPermission(Activity context, int requestCode) {\n         Intent intent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION, Uri.parse(\"package:\" + context.getPackageName()));\n-        context.startActivityForResult(intent, ACTION_MANAGE_OVERLAY_PERMISSION_REQUEST_CODE);\n+        context.startActivityForResult(intent, requestCode);\n     }\n \n     public static boolean validateDisplayOverOtherAppsPermissionForPostAndroid10(Context context) {\n         if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q) return true;\n         \n         if (!PermissionUtils.checkDisplayOverOtherAppsPermission(context)) {\n+            Logger.logWarn(LOG_TAG, TermuxConstants.TERMUX_APP_NAME + \" App does not have Display over other apps (SYSTEM_ALERT_WINDOW) permission\");\n+\n             TermuxAppSharedPreferences preferences = TermuxAppSharedPreferences.build(context);\n             if (preferences == null) return false;\n \n             if (preferences.arePluginErrorNotificationsEnabled())\n                 Logger.showToast(context, context.getString(R.string.error_display_over_other_apps_permission_not_granted), true);\n             return false;\n         } else {\n+            Logger.logDebug(LOG_TAG, TermuxConstants.TERMUX_APP_NAME + \" App already has Display over other apps (SYSTEM_ALERT_WINDOW) permission\");\n             return true;\n         }\n     }\n \n+\n+\n+    public static boolean checkIfBatteryOptimizationsDisabled(Context context) {\n+        PowerManager powerManager = (PowerManager) context.getSystemService(Context.POWER_SERVICE);\n+        return powerManager.isIgnoringBatteryOptimizations(context.getPackageName());\n+    }\n+\n+    @SuppressLint(\"BatteryLife\")\n+    public static void requestDisableBatteryOptimizations(Activity activity, int requestCode) {\n+        Intent intent = new Intent(Settings.ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS);\n+        intent.setData(Uri.parse(\"package:\" + activity.getPackageName()));\n+        activity.startActivityForResult(intent, requestCode);\n+    }\n+\n }",
    "output": "Move storage permission logic to PermissionUtils and add disable battery optimizations code\n\nOption to disable battery optimizations will be added in termux settings later."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/activities/SettingsActivity.java b/app/src/main/java/com/termux/app/activities/SettingsActivity.java\n--- a/app/src/main/java/com/termux/app/activities/SettingsActivity.java\n+++ b/app/src/main/java/com/termux/app/activities/SettingsActivity.java\n@@ -10,7 +10,8 @@\n import androidx.preference.PreferenceFragmentCompat;\n \n import com.termux.R;\n-import com.termux.app.models.ReportInfo;\n+import com.termux.shared.activities.ReportActivity;\n+import com.termux.shared.models.ReportInfo;\n import com.termux.app.models.UserAction;\n import com.termux.shared.interact.ShareUtils;\n import com.termux.shared.packages.PackageUtils;\n@@ -84,7 +85,7 @@ public void run() {\n                             aboutString.append(\"\\n\\n\").append(TermuxUtils.getDeviceInfoMarkdownString(context));\n                             aboutString.append(\"\\n\\n\").append(TermuxUtils.getImportantLinksMarkdownString(context));\n \n-                            ReportActivity.startReportActivity(context, new ReportInfo(UserAction.ABOUT, TermuxConstants.TERMUX_APP.TERMUX_SETTINGS_ACTIVITY_NAME, title, null, aboutString.toString(), null, false));\n+                            ReportActivity.startReportActivity(context, new ReportInfo(UserAction.ABOUT.getName(), TermuxConstants.TERMUX_APP.TERMUX_SETTINGS_ACTIVITY_NAME, title, null, aboutString.toString(), null, false));\n                         }\n                     }.start();\n \n\ndiff --git a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n@@ -24,8 +24,8 @@\n import com.termux.shared.shell.ShellUtils;\n import com.termux.shared.terminal.TermuxTerminalViewClientBase;\n import com.termux.shared.termux.TermuxConstants;\n-import com.termux.app.activities.ReportActivity;\n-import com.termux.app.models.ReportInfo;\n+import com.termux.shared.activities.ReportActivity;\n+import com.termux.shared.models.ReportInfo;\n import com.termux.app.models.UserAction;\n import com.termux.app.terminal.io.KeyboardShortcut;\n import com.termux.app.terminal.io.extrakeys.ExtraKeysView;\n@@ -660,7 +660,7 @@ public void run() {\n                 if (termuxAptInfo != null)\n                     reportString.append(\"\\n\\n\").append(termuxAptInfo);\n \n-                ReportActivity.startReportActivity(mActivity, new ReportInfo(UserAction.REPORT_ISSUE_FROM_TRANSCRIPT, TermuxConstants.TERMUX_APP.TERMUX_ACTIVITY_NAME, title, null, reportString.toString(), \"\\n\\n\" + TermuxUtils.getReportIssueMarkdownString(mActivity), false));\n+                ReportActivity.startReportActivity(mActivity, new ReportInfo(UserAction.REPORT_ISSUE_FROM_TRANSCRIPT.getName(), TermuxConstants.TERMUX_APP.TERMUX_ACTIVITY_NAME, title, null, reportString.toString(), \"\\n\\n\" + TermuxUtils.getReportIssueMarkdownString(mActivity), false));\n             }\n         }.start();\n     }\n\ndiff --git a/app/src/main/java/com/termux/app/utils/CrashUtils.java b/app/src/main/java/com/termux/app/utils/CrashUtils.java\n--- a/app/src/main/java/com/termux/app/utils/CrashUtils.java\n+++ b/app/src/main/java/com/termux/app/utils/CrashUtils.java\n@@ -9,10 +9,10 @@\n import androidx.annotation.Nullable;\n \n import com.termux.R;\n-import com.termux.app.activities.ReportActivity;\n+import com.termux.shared.activities.ReportActivity;\n import com.termux.shared.notification.NotificationUtils;\n import com.termux.shared.file.FileUtils;\n-import com.termux.app.models.ReportInfo;\n+import com.termux.shared.models.ReportInfo;\n import com.termux.app.models.UserAction;\n import com.termux.shared.settings.preferences.TermuxAppSharedPreferences;\n import com.termux.shared.settings.preferences.TermuxPreferenceConstants;\n@@ -89,7 +89,7 @@ public void run() {\n \n                 Logger.logDebug(logTag, \"The crash log file at \\\"\" + TermuxConstants.TERMUX_CRASH_LOG_FILE_PATH +  \"\\\" found. Sending \\\"\" + title + \"\\\" notification.\");\n \n-                Intent notificationIntent = ReportActivity.newInstance(context, new ReportInfo(UserAction.CRASH_REPORT, logTag, title, null, reportString, \"\\n\\n\" + TermuxUtils.getReportIssueMarkdownString(context), true));\n+                Intent notificationIntent = ReportActivity.newInstance(context, new ReportInfo(UserAction.CRASH_REPORT.getName(), logTag, title, null, reportString, \"\\n\\n\" + TermuxUtils.getReportIssueMarkdownString(context), true));\n                 PendingIntent pendingIntent = PendingIntent.getActivity(context, 0, notificationIntent, PendingIntent.FLAG_UPDATE_CURRENT);\n \n                 // Setup the notification channel if not already set up\n\ndiff --git a/app/src/main/java/com/termux/app/utils/PluginUtils.java b/app/src/main/java/com/termux/app/utils/PluginUtils.java\n--- a/app/src/main/java/com/termux/app/utils/PluginUtils.java\n+++ b/app/src/main/java/com/termux/app/utils/PluginUtils.java\n@@ -11,16 +11,16 @@\n import androidx.annotation.Nullable;\n \n import com.termux.R;\n+import com.termux.shared.activities.ReportActivity;\n import com.termux.shared.notification.NotificationUtils;\n import com.termux.shared.termux.TermuxConstants;\n import com.termux.shared.termux.TermuxConstants.TERMUX_APP.TERMUX_SERVICE;\n-import com.termux.app.activities.ReportActivity;\n import com.termux.shared.logger.Logger;\n import com.termux.shared.settings.preferences.TermuxAppSharedPreferences;\n import com.termux.shared.settings.preferences.TermuxPreferenceConstants.TERMUX_APP;\n import com.termux.shared.settings.properties.SharedProperties;\n import com.termux.shared.settings.properties.TermuxPropertyConstants;\n-import com.termux.app.models.ReportInfo;\n+import com.termux.shared.models.ReportInfo;\n import com.termux.shared.models.ExecutionCommand;\n import com.termux.app.models.UserAction;\n import com.termux.shared.data.DataUtils;\n@@ -159,7 +159,7 @@ public static void processPluginExecutionCommandError(final Context context, Str\n         reportString.append(\"\\n\\n\").append(TermuxUtils.getAppInfoMarkdownString(context, true));\n         reportString.append(\"\\n\\n\").append(TermuxUtils.getDeviceInfoMarkdownString(context));\n \n-        Intent notificationIntent = ReportActivity.newInstance(context, new ReportInfo(UserAction.PLUGIN_EXECUTION_COMMAND, logTag, title, null, reportString.toString(), null,true));\n+        Intent notificationIntent = ReportActivity.newInstance(context, new ReportInfo(UserAction.PLUGIN_EXECUTION_COMMAND.getName(), logTag, title, null, reportString.toString(), null,true));\n         PendingIntent pendingIntent = PendingIntent.getActivity(context, 0, notificationIntent, PendingIntent.FLAG_UPDATE_CURRENT);\n \n         // Setup the notification channel if not already set up\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/activities/ReportActivity.java b/termux-shared/src/main/java/com/termux/shared/activities/ReportActivity.java\n--- a/termux-shared/src/main/java/com/termux/shared/activities/ReportActivity.java\n+++ b/termux-shared/src/main/java/com/termux/shared/activities/ReportActivity.java\n@@ -1,4 +1,4 @@\n-package com.termux.app.activities;\n+package com.termux.shared.activities;\n \n import androidx.annotation.NonNull;\n import androidx.appcompat.app.ActionBar;\n@@ -14,11 +14,11 @@\n import android.view.MenuInflater;\n import android.view.MenuItem;\n \n-import com.termux.R;\n+import com.termux.shared.R;\n import com.termux.shared.termux.TermuxConstants;\n import com.termux.shared.markdown.MarkdownUtils;\n import com.termux.shared.interact.ShareUtils;\n-import com.termux.app.models.ReportInfo;\n+import com.termux.shared.models.ReportInfo;\n \n import org.commonmark.node.FencedCodeBlock;\n \n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/models/ReportInfo.java b/termux-shared/src/main/java/com/termux/shared/models/ReportInfo.java\n--- a/termux-shared/src/main/java/com/termux/shared/models/ReportInfo.java\n+++ b/termux-shared/src/main/java/com/termux/shared/models/ReportInfo.java\n@@ -1,4 +1,4 @@\n-package com.termux.app.models;\n+package com.termux.shared.models;\n \n import com.termux.shared.markdown.MarkdownUtils;\n import com.termux.shared.termux.TermuxUtils;\n@@ -8,7 +8,7 @@\n public class ReportInfo implements Serializable {\n \n     /** The user action that was being processed for which the report was generated. */\n-    public final UserAction userAction;\n+    public final String userAction;\n     /** The internal app component that sent the report. */\n     public final String sender;\n     /** The report title. */\n@@ -26,7 +26,7 @@ public class ReportInfo implements Serializable {\n     /** The timestamp for the report. */\n     public final String reportTimestamp;\n \n-    public ReportInfo(UserAction userAction, String sender, String reportTitle, String reportStringPrefix, String reportString, String reportStringSuffix, boolean addReportInfoToMarkdown) {\n+    public ReportInfo(String userAction, String sender, String reportTitle, String reportStringPrefix, String reportString, String reportStringSuffix, boolean addReportInfoToMarkdown) {\n         this.userAction = userAction;\n         this.sender = sender;\n         this.reportTitle = reportTitle;",
    "output": "Move ReportActivity to termux-shared so that other termux plugins can use it too"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -419,6 +419,11 @@ public synchronized TermuxTask createTermuxTask(ExecutionCommand executionComman\n         TermuxTask newTermuxTask = TermuxTask.execute(this, executionCommand, this, false);\n         if (newTermuxTask == null) {\n             Logger.logError(LOG_TAG, \"Failed to execute new TermuxTask command for:\\n\" + executionCommand.getCommandIdAndLabelLogString());\n+            // If the execution command was started for a plugin, then process the error\n+            if (executionCommand.isPluginExecutionCommand)\n+                PluginUtils.processPluginExecutionCommandError(this, LOG_TAG, executionCommand, false);\n+            else\n+                Logger.logStackTracesWithMessage(LOG_TAG, \"(\" + executionCommand.errCode + \") \" + executionCommand.errmsg, executionCommand.throwableList);\n             return null;\n         }\n \n@@ -510,6 +515,11 @@ public synchronized TermuxSession createTermuxSession(ExecutionCommand execution\n         TermuxSession newTermuxSession = TermuxSession.execute(this, executionCommand, getTermuxTerminalSessionClient(), this, sessionName, executionCommand.isPluginExecutionCommand);\n         if (newTermuxSession == null) {\n             Logger.logError(LOG_TAG, \"Failed to execute new TermuxSession command for:\\n\" + executionCommand.getCommandIdAndLabelLogString());\n+            // If the execution command was started for a plugin, then process the error\n+            if (executionCommand.isPluginExecutionCommand)\n+                PluginUtils.processPluginExecutionCommandError(this, LOG_TAG, executionCommand, false);\n+            else\n+                Logger.logStackTracesWithMessage(LOG_TAG, \"(\" + executionCommand.errCode + \") \" + executionCommand.errmsg, executionCommand.throwableList);\n             return null;\n         }\n \n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/shell/TermuxTask.java b/termux-shared/src/main/java/com/termux/shared/shell/TermuxTask.java\n--- a/termux-shared/src/main/java/com/termux/shared/shell/TermuxTask.java\n+++ b/termux-shared/src/main/java/com/termux/shared/shell/TermuxTask.java\n@@ -70,8 +70,11 @@ public static TermuxTask execute(@NonNull final Context context, @NonNull Execut\n \n         final String[] commandArray = ShellUtils.setupProcessArgs(executionCommand.executable, executionCommand.arguments);\n \n-        if (!executionCommand.setState(ExecutionState.EXECUTING))\n+        if (!executionCommand.setState(ExecutionState.EXECUTING)) {\n+            executionCommand.setStateFailed(ExecutionCommand.RESULT_CODE_FAILED, context.getString(R.string.error_failed_to_execute_termux_task_command, executionCommand.getCommandIdAndLabelLogString()), null);\n+            TermuxTask.processTermuxTaskResult(null, executionCommand);\n             return null;\n+        }\n \n         Logger.logDebug(LOG_TAG, executionCommand.toString());\n ",
    "output": "Redo fix execution commands exceptions not being logged or sent back to plugins\n\nThe f62febbf commit mentioned that it solved \"the bug where Termux:Tasker would hang indefinitely if Runtime.getRuntime().exec raised an exception, like for invalid or missing interpreter errors and Termux:Tasker wasn't notified of it. Now the errmsg will be used to send any exceptions back to Termux:Tasker and other 3rd party calls.\"\n\nThis however was still broken due to local design changes made to TermuxTask after testing was already done. This commit should solve that problem. Moreover, now a notification will be shown if execution commands **fail to start** that are run by plugins that don't expect the result back, like with Termux:Widget or RUN_COMMAND intent. This should make it easier for users to debug problems, since otherwise logcat needs to be looked. But logcat would still need to be looked if commands/scripts fail after they have started due to internal errors. Notifications can be disabled from Termux Settings by disabling the \"Plugin Error Notifications\" toggle."
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n@@ -7,7 +7,7 @@\n import java.util.List;\n \n /*\n- * Version: v0.21.0\n+ * Version: v0.23.0\n  *\n  * Changelog\n  *\n@@ -150,6 +150,8 @@\n  * - 0.22.0 (2021-05-13)\n  *      - Added `TERMUX_DONATE_URL`.\n  *\n+ * - 0.23.0 (2021-06-12)\n+ *      - Rename `INTERNAL_PRIVATE_APP_DATA_DIR_PATH` to `TERMUX_INTERNAL_PRIVATE_APP_DATA_DIR_PATH`.\n  */\n \n /**\n@@ -464,14 +466,14 @@ public final class TermuxConstants {\n \n     /** Termux app internal private app data directory path */\n     @SuppressLint(\"SdCardPath\")\n-    public static final String INTERNAL_PRIVATE_APP_DATA_DIR_PATH = \"/data/data/\" + TERMUX_PACKAGE_NAME; // Default: \"/data/data/com.termux\"\n+    public static final String TERMUX_INTERNAL_PRIVATE_APP_DATA_DIR_PATH = \"/data/data/\" + TERMUX_PACKAGE_NAME; // Default: \"/data/data/com.termux\"\n     /** Termux app internal private app data directory */\n-    public static final File INTERNAL_PRIVATE_APP_DATA_DIR = new File(INTERNAL_PRIVATE_APP_DATA_DIR_PATH);\n+    public static final File TERMUX_INTERNAL_PRIVATE_APP_DATA_DIR = new File(TERMUX_INTERNAL_PRIVATE_APP_DATA_DIR_PATH);\n \n \n \n     /** Termux app Files directory path */\n-    public static final String TERMUX_FILES_DIR_PATH = INTERNAL_PRIVATE_APP_DATA_DIR_PATH + \"/files\"; // Default: \"/data/data/com.termux/files\"\n+    public static final String TERMUX_FILES_DIR_PATH = TERMUX_INTERNAL_PRIVATE_APP_DATA_DIR_PATH + \"/files\"; // Default: \"/data/data/com.termux/files\"\n     /** Termux app Files directory */\n     public static final File TERMUX_FILES_DIR = new File(TERMUX_FILES_DIR_PATH);\n ",
    "output": "Rename variable"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/terminal/TermuxTerminalSessionClient.java b/app/src/main/java/com/termux/app/terminal/TermuxTerminalSessionClient.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxTerminalSessionClient.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxTerminalSessionClient.java\n@@ -255,8 +255,10 @@ public void setCurrentSession(TerminalSession session) {\n     void notifyOfSessionChange() {\n         if (!mActivity.isVisible()) return;\n \n-        TerminalSession session = mActivity.getCurrentSession();\n-        mActivity.showToast(toToastTitle(session), false);\n+        if (!mActivity.getProperties().areTerminalSessionChangeToastsDisabled()) {\n+            TerminalSession session = mActivity.getCurrentSession();\n+            mActivity.showToast(toToastTitle(session), false);\n+        }\n     }\n \n     public void switchToSession(boolean forward) {\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxPropertyConstants.java b/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxPropertyConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxPropertyConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxPropertyConstants.java\n@@ -72,6 +72,11 @@ public final class TermuxPropertyConstants {\n \n     /* boolean */\n \n+    /** Defines the key for whether a toast will be shown when user changes the terminal session */\n+    public static final String KEY_DISABLE_TERMINAL_SESSION_CHANGE_TOAST =  \"disable-terminal-session-change-toast\"; // Default: \"disable-terminal-session-change-toast\"\n+\n+\n+\n     /** Defines the key for whether to enforce character based input to fix the issue where for some devices like Samsung, the letters might not appear until enter is pressed */\n     public static final String KEY_ENFORCE_CHAR_BASED_INPUT =  \"enforce-char-based-input\"; // Default: \"enforce-char-based-input\"\n \n@@ -285,6 +290,7 @@ public final class TermuxPropertyConstants {\n      * */\n     public static final Set<String> TERMUX_PROPERTIES_LIST = new HashSet<>(Arrays.asList(\n         /* boolean */\n+        KEY_DISABLE_TERMINAL_SESSION_CHANGE_TOAST,\n         KEY_ENFORCE_CHAR_BASED_INPUT,\n         KEY_HIDE_SOFT_KEYBOARD_ON_STARTUP,\n         KEY_USE_BLACK_UI,\n@@ -323,6 +329,7 @@ public final class TermuxPropertyConstants {\n      * default: false\n      * */\n     public static final Set<String> TERMUX_DEFAULT_BOOLEAN_BEHAVIOUR_PROPERTIES_LIST = new HashSet<>(Arrays.asList(\n+        KEY_DISABLE_TERMINAL_SESSION_CHANGE_TOAST,\n         KEY_ENFORCE_CHAR_BASED_INPUT,\n         KEY_HIDE_SOFT_KEYBOARD_ON_STARTUP,\n         KEY_USE_CTRL_SPACE_WORKAROUND,\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxSharedProperties.java b/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxSharedProperties.java\n--- a/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxSharedProperties.java\n+++ b/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxSharedProperties.java\n@@ -460,6 +460,10 @@ public static String getVolumeKeysBehaviourInternalPropertyValueFromValue(String\n \n \n \n+    public boolean areTerminalSessionChangeToastsDisabled() {\n+        return (boolean) getInternalPropertyValue(TermuxPropertyConstants.KEY_DISABLE_TERMINAL_SESSION_CHANGE_TOAST, true);\n+    }\n+\n     public boolean isEnforcingCharBasedInput() {\n         return (boolean) getInternalPropertyValue(TermuxPropertyConstants.KEY_ENFORCE_CHAR_BASED_INPUT, true);\n     }",
    "output": "Allow users to disable terminal session change toast\n\nThe user can add `disable-terminal-session-change-toast=true` entry to `termux.properties` file to disable terminal session change toast. The default value is `false`. Running `termux-reload-settings` command will also update the behaviour instantaneously if changed.\n\nCloses #2118"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxPropertyConstants.java b/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxPropertyConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxPropertyConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/settings/properties/TermuxPropertyConstants.java\n@@ -237,7 +237,8 @@ public final class TermuxPropertyConstants {\n \n     /** Defines the key for extra keys */\n     public static final String KEY_EXTRA_KEYS =  \"extra-keys\"; // Default: \"extra-keys\"\n-    public static final String DEFAULT_IVALUE_EXTRA_KEYS = \"[[ESC, TAB, CTRL, ALT, {key: '-', popup: '|'}, DOWN, UP]]\";\n+    //public static final String DEFAULT_IVALUE_EXTRA_KEYS = \"[[ESC, TAB, CTRL, ALT, {key: '-', popup: '|'}, DOWN, UP]]\"; // Single row\n+    public static final String DEFAULT_IVALUE_EXTRA_KEYS = \"[['ESC','/',{key: '-', popup: '|'},'HOME','UP','END','PGUP'], ['TAB','CTRL','ALT','LEFT','DOWN','RIGHT','PGDN']]\"; // Double row\n \n     /** Defines the key for extra keys style */\n     public static final String KEY_EXTRA_KEYS_STYLE =  \"extra-keys-style\"; // Default: \"extra-keys-style\"",
    "output": "Change default extra keys style\n\nIf a user does not define a custom value in termux.properties file, then by default 2 rows will be shown with all arrow keys (up/down/left/right) for ease of terminal use."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxInstaller.java b/app/src/main/java/com/termux/app/TermuxInstaller.java\n--- a/app/src/main/java/com/termux/app/TermuxInstaller.java\n+++ b/app/src/main/java/com/termux/app/TermuxInstaller.java\n@@ -173,6 +173,7 @@ public void run() {\n                                     activity.finish();\n                                 }).setPositiveButton(R.string.bootstrap_error_try_again, (dialog, which) -> {\n                                 dialog.dismiss();\n+                                FileUtils.deleteFile(activity, \"prefix directory\", PREFIX_FILE_PATH, true);\n                                 TermuxInstaller.setupBootstrapIfNeeded(activity, whenDone);\n                             }).show();\n                         } catch (WindowManager.BadTokenException e1) {",
    "output": "Fix issue where if termux installer failed with an exception after prefix directory was already created, then try again would load a broken environment."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/activities/HelpActivity.java b/app/src/main/java/com/termux/app/activities/HelpActivity.java\n--- a/app/src/main/java/com/termux/app/activities/HelpActivity.java\n+++ b/app/src/main/java/com/termux/app/activities/HelpActivity.java\n@@ -12,6 +12,8 @@\n import android.widget.ProgressBar;\n import android.widget.RelativeLayout;\n \n+import com.termux.shared.termux.TermuxConstants;\n+\n /** Basic embedded browser for viewing help pages. */\n public final class HelpActivity extends Activity {\n \n@@ -39,7 +41,7 @@ protected void onCreate(Bundle savedInstanceState) {\n         mWebView.setWebViewClient(new WebViewClient() {\n             @Override\n             public boolean shouldOverrideUrlLoading(WebView view, String url) {\n-                if (url.startsWith(\"https://wiki.termux.com\")) {\n+                if (url.equals(TermuxConstants.TERMUX_WIKI_URL) || url.startsWith(TermuxConstants.TERMUX_WIKI_URL + \"/\")) {\n                     // Inline help.\n                     setContentView(progressLayout);\n                     return false;\n@@ -60,7 +62,7 @@ public void onPageFinished(WebView view, String url) {\n                 setContentView(mWebView);\n             }\n         });\n-        mWebView.loadUrl(\"https://wiki.termux.com/wiki/Main_Page\");\n+        mWebView.loadUrl(TermuxConstants.TERMUX_WIKI_URL);\n     }\n \n     @Override",
    "output": "Remove hardcoded wiki.termux.com url from HelpActivity"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -129,6 +129,11 @@ public final class TermuxActivity extends Activity implements ServiceConnection\n      */\n     private boolean mIsVisible;\n \n+    /**\n+     * If onResume() was called after onCreate().\n+     */\n+    private boolean isOnResumeAfterOnCreate = false;\n+\n     /**\n      * The {@link TermuxActivity} is in an invalid state and must not be run.\n      */\n@@ -160,6 +165,7 @@ public final class TermuxActivity extends Activity implements ServiceConnection\n     public void onCreate(Bundle savedInstanceState) {\n \n         Logger.logDebug(LOG_TAG, \"onCreate\");\n+        isOnResumeAfterOnCreate = true;\n \n         // Check if a crash happened on last run of the app and show a\n         // notification with the crash details if it did\n@@ -251,6 +257,8 @@ public void onResume() {\n \n         if (mTermuxTerminalViewClient != null)\n             mTermuxTerminalViewClient.onResume();\n+\n+        isOnResumeAfterOnCreate = false;\n     }\n \n     @Override\n@@ -691,6 +699,10 @@ public boolean isVisible() {\n         return mIsVisible;\n     }\n \n+    public boolean isOnResumeAfterOnCreate() {\n+        return isOnResumeAfterOnCreate;\n+    }\n+\n \n \n     public TermuxService getTermuxService() {\n\ndiff --git a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n@@ -57,6 +57,9 @@ public class TermuxTerminalViewClient extends TermuxTerminalViewClientBase {\n \n     private Runnable mShowSoftKeyboardRunnable;\n \n+    private boolean mShowSoftKeyboardIgnoreOnce;\n+    private boolean mShowSoftKeyboardWithDelayOnce;\n+\n     private static final String LOG_TAG = \"TermuxTerminalViewClient\";\n \n     public TermuxTerminalViewClient(TermuxActivity activity, TermuxTerminalSessionClient termuxTerminalSessionClient) {\n@@ -410,10 +413,19 @@ public void onToggleSoftKeyboardRequest() {\n                 mActivity.getPreferences().setSoftKeyboardEnabled(false);\n                 KeyboardUtils.disableSoftKeyboard(mActivity, mActivity.getTerminalView());\n             } else {\n+                // Show with a delay, otherwise pressing keyboard toggle won't show the keyboard after\n+                // switching back from another app if keyboard was previously disabled by user.\n+                // Also request focus, since it wouldn't have been requested at startup by\n+                // setSoftKeyboardState if keyboard was disabled. #2112\n                 Logger.logVerbose(LOG_TAG, \"Enabling soft keyboard on toggle\");\n                 mActivity.getPreferences().setSoftKeyboardEnabled(true);\n                 KeyboardUtils.clearDisableSoftKeyboardFlags(mActivity);\n-                KeyboardUtils.showSoftKeyboard(mActivity, mActivity.getTerminalView());\n+                if(mShowSoftKeyboardWithDelayOnce) {\n+                    mShowSoftKeyboardWithDelayOnce = false;\n+                    mActivity.getTerminalView().postDelayed(getShowSoftKeyboardRunnable(), 500);\n+                    mActivity.getTerminalView().requestFocus();\n+                } else\n+                    KeyboardUtils.showSoftKeyboard(mActivity, mActivity.getTerminalView());\n             }\n         }\n         // If soft keyboard toggle behaviour is show/hide\n@@ -431,12 +443,20 @@ public void onToggleSoftKeyboardRequest() {\n     }\n \n     public void setSoftKeyboardState(boolean isStartup, boolean isReloadTermuxProperties) {\n+        boolean noRequestFocus = false;\n+\n         // If soft keyboard is disabled by user for Termux (check function docs for Termux behaviour info)\n         if (KeyboardUtils.shouldSoftKeyboardBeDisabled(mActivity,\n-                mActivity.getPreferences().isSoftKeyboardEnabled(),\n-                    mActivity.getPreferences().isSoftKeyboardEnabledOnlyIfNoHardware())) {\n+            mActivity.getPreferences().isSoftKeyboardEnabled(),\n+            mActivity.getPreferences().isSoftKeyboardEnabledOnlyIfNoHardware())) {\n             Logger.logVerbose(LOG_TAG, \"Maintaining disabled soft keyboard\");\n             KeyboardUtils.disableSoftKeyboard(mActivity, mActivity.getTerminalView());\n+            noRequestFocus = true;\n+            // Delay is only required if onCreate() is called like when Termux app is exited with\n+            // double back press, not when Termux app is switched back from another app and keyboard\n+            // toggle is pressed to enable keyboard\n+            if (isStartup && mActivity.isOnResumeAfterOnCreate())\n+                mShowSoftKeyboardWithDelayOnce = true;\n         } else {\n             // Set flag to automatically push up TerminalView when keyboard is opened instead of showing over it\n             KeyboardUtils.setResizeTerminalViewForSoftKeyboardFlags(mActivity);\n@@ -450,34 +470,55 @@ public void setSoftKeyboardState(boolean isStartup, boolean isReloadTermuxProper\n                 KeyboardUtils.hideSoftKeyboard(mActivity, mActivity.getTerminalView());\n                 // Required to keep keyboard hidden when Termux app is switched back from another app\n                 KeyboardUtils.setSoftKeyboardAlwaysHiddenFlags(mActivity);\n-            } else {\n-                // Do not force show soft keyboard if termux-reload-settings command was run with hardware keyboard\n-                if (isReloadTermuxProperties)\n-                    return;\n-\n-                if (mShowSoftKeyboardRunnable == null) {\n-                    mShowSoftKeyboardRunnable = () -> {\n-                        Logger.logVerbose(LOG_TAG, \"Showing soft keyboard on focus change\");\n-                        KeyboardUtils.showSoftKeyboard(mActivity, mActivity.getTerminalView());\n-                    };\n-                }\n+                noRequestFocus = true;\n+                // Required to keep keyboard hidden on app startup\n+                mShowSoftKeyboardIgnoreOnce = true;\n+            }\n+        }\n \n-                mActivity.getTerminalView().setOnFocusChangeListener(new View.OnFocusChangeListener() {\n-                    @Override\n-                    public void onFocusChange(View view, boolean hasFocus) {\n-                        // Force show soft keyboard if TerminalView or toolbar text input view has\n-                        // focus and close it if they don't\n-                        boolean textInputViewHasFocus = false;\n-                        final EditText textInputView =  mActivity.findViewById(R.id.terminal_toolbar_text_input);\n-                        if (textInputView != null) textInputViewHasFocus = textInputView.hasFocus();\n-                        KeyboardUtils.setSoftKeyboardVisibility(mShowSoftKeyboardRunnable, mActivity, mActivity.getTerminalView(), hasFocus || textInputViewHasFocus);\n+        mActivity.getTerminalView().setOnFocusChangeListener(new View.OnFocusChangeListener() {\n+            @Override\n+            public void onFocusChange(View view, boolean hasFocus) {\n+                // Force show soft keyboard if TerminalView or toolbar text input view has\n+                // focus and close it if they don't\n+                boolean textInputViewHasFocus = false;\n+                final EditText textInputView =  mActivity.findViewById(R.id.terminal_toolbar_text_input);\n+                if (textInputView != null) textInputViewHasFocus = textInputView.hasFocus();\n+\n+                if (hasFocus || textInputViewHasFocus) {\n+                    if (mShowSoftKeyboardIgnoreOnce) {\n+                        mShowSoftKeyboardIgnoreOnce = false; return;\n                     }\n-                });\n+                    Logger.logVerbose(LOG_TAG, \"Showing soft keyboard on focus change\");\n+                } else {\n+                    Logger.logVerbose(LOG_TAG, \"Hiding soft keyboard on focus change\");\n+                }\n \n-                // Request focus for TerminalView\n-                mActivity.getTerminalView().requestFocus();\n+                KeyboardUtils.setSoftKeyboardVisibility(getShowSoftKeyboardRunnable(), mActivity, mActivity.getTerminalView(), hasFocus || textInputViewHasFocus);\n             }\n+        });\n+\n+        // Do not force show soft keyboard if termux-reload-settings command was run with hardware keyboard\n+        // or soft keyboard is to be hidden or is disabled\n+        if (!isReloadTermuxProperties && !noRequestFocus) {\n+            // Request focus for TerminalView\n+            // Also show the keyboard, since onFocusChange will not be called if TerminalView already\n+            // had focus on startup to show the keyboard, like when opening url with context menu\n+            // \"Select URL\" long press and returning to Termux app with back button. This\n+            // will also show keyboard even if it was closed before opening url. #2111\n+            Logger.logVerbose(LOG_TAG, \"Requesting TerminalView focus and showing soft keyboard\");\n+            mActivity.getTerminalView().requestFocus();\n+            mActivity.getTerminalView().postDelayed(getShowSoftKeyboardRunnable(), 300);\n+        }\n+    }\n+\n+    private Runnable getShowSoftKeyboardRunnable() {\n+        if (mShowSoftKeyboardRunnable == null) {\n+            mShowSoftKeyboardRunnable = () -> {\n+                KeyboardUtils.showSoftKeyboard(mActivity, mActivity.getTerminalView());\n+            };\n         }\n+        return mShowSoftKeyboardRunnable;\n     }\n \n ",
    "output": "Merge pull request #2114 from agnostic-apollo/fix-soft-keyboard-not-showing-in-some-case\n\nFix issue where soft keyboard would not show in some cases"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -129,6 +129,11 @@ public final class TermuxActivity extends Activity implements ServiceConnection\n      */\n     private boolean mIsVisible;\n \n+    /**\n+     * If onResume() was called after onCreate().\n+     */\n+    private boolean isOnResumeAfterOnCreate = false;\n+\n     /**\n      * The {@link TermuxActivity} is in an invalid state and must not be run.\n      */\n@@ -160,6 +165,7 @@ public final class TermuxActivity extends Activity implements ServiceConnection\n     public void onCreate(Bundle savedInstanceState) {\n \n         Logger.logDebug(LOG_TAG, \"onCreate\");\n+        isOnResumeAfterOnCreate = true;\n \n         // Check if a crash happened on last run of the app and show a\n         // notification with the crash details if it did\n@@ -251,6 +257,8 @@ public void onResume() {\n \n         if (mTermuxTerminalViewClient != null)\n             mTermuxTerminalViewClient.onResume();\n+\n+        isOnResumeAfterOnCreate = false;\n     }\n \n     @Override\n@@ -691,6 +699,10 @@ public boolean isVisible() {\n         return mIsVisible;\n     }\n \n+    public boolean isOnResumeAfterOnCreate() {\n+        return isOnResumeAfterOnCreate;\n+    }\n+\n \n \n     public TermuxService getTermuxService() {\n\ndiff --git a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n@@ -57,6 +57,9 @@ public class TermuxTerminalViewClient extends TermuxTerminalViewClientBase {\n \n     private Runnable mShowSoftKeyboardRunnable;\n \n+    private boolean mShowSoftKeyboardIgnoreOnce;\n+    private boolean mShowSoftKeyboardWithDelayOnce;\n+\n     private static final String LOG_TAG = \"TermuxTerminalViewClient\";\n \n     public TermuxTerminalViewClient(TermuxActivity activity, TermuxTerminalSessionClient termuxTerminalSessionClient) {\n@@ -410,10 +413,19 @@ public void onToggleSoftKeyboardRequest() {\n                 mActivity.getPreferences().setSoftKeyboardEnabled(false);\n                 KeyboardUtils.disableSoftKeyboard(mActivity, mActivity.getTerminalView());\n             } else {\n+                // Show with a delay, otherwise pressing keyboard toggle won't show the keyboard after\n+                // switching back from another app if keyboard was previously disabled by user.\n+                // Also request focus, since it wouldn't have been requested at startup by\n+                // setSoftKeyboardState if keyboard was disabled. #2112\n                 Logger.logVerbose(LOG_TAG, \"Enabling soft keyboard on toggle\");\n                 mActivity.getPreferences().setSoftKeyboardEnabled(true);\n                 KeyboardUtils.clearDisableSoftKeyboardFlags(mActivity);\n-                KeyboardUtils.showSoftKeyboard(mActivity, mActivity.getTerminalView());\n+                if(mShowSoftKeyboardWithDelayOnce) {\n+                    mShowSoftKeyboardWithDelayOnce = false;\n+                    mActivity.getTerminalView().postDelayed(getShowSoftKeyboardRunnable(), 500);\n+                    mActivity.getTerminalView().requestFocus();\n+                } else\n+                    KeyboardUtils.showSoftKeyboard(mActivity, mActivity.getTerminalView());\n             }\n         }\n         // If soft keyboard toggle behaviour is show/hide\n@@ -431,12 +443,20 @@ public void onToggleSoftKeyboardRequest() {\n     }\n \n     public void setSoftKeyboardState(boolean isStartup, boolean isReloadTermuxProperties) {\n+        boolean noRequestFocus = false;\n+\n         // If soft keyboard is disabled by user for Termux (check function docs for Termux behaviour info)\n         if (KeyboardUtils.shouldSoftKeyboardBeDisabled(mActivity,\n-                mActivity.getPreferences().isSoftKeyboardEnabled(),\n-                    mActivity.getPreferences().isSoftKeyboardEnabledOnlyIfNoHardware())) {\n+            mActivity.getPreferences().isSoftKeyboardEnabled(),\n+            mActivity.getPreferences().isSoftKeyboardEnabledOnlyIfNoHardware())) {\n             Logger.logVerbose(LOG_TAG, \"Maintaining disabled soft keyboard\");\n             KeyboardUtils.disableSoftKeyboard(mActivity, mActivity.getTerminalView());\n+            noRequestFocus = true;\n+            // Delay is only required if onCreate() is called like when Termux app is exited with\n+            // double back press, not when Termux app is switched back from another app and keyboard\n+            // toggle is pressed to enable keyboard\n+            if (isStartup && mActivity.isOnResumeAfterOnCreate())\n+                mShowSoftKeyboardWithDelayOnce = true;\n         } else {\n             // Set flag to automatically push up TerminalView when keyboard is opened instead of showing over it\n             KeyboardUtils.setResizeTerminalViewForSoftKeyboardFlags(mActivity);\n@@ -450,34 +470,55 @@ public void setSoftKeyboardState(boolean isStartup, boolean isReloadTermuxProper\n                 KeyboardUtils.hideSoftKeyboard(mActivity, mActivity.getTerminalView());\n                 // Required to keep keyboard hidden when Termux app is switched back from another app\n                 KeyboardUtils.setSoftKeyboardAlwaysHiddenFlags(mActivity);\n-            } else {\n-                // Do not force show soft keyboard if termux-reload-settings command was run with hardware keyboard\n-                if (isReloadTermuxProperties)\n-                    return;\n-\n-                if (mShowSoftKeyboardRunnable == null) {\n-                    mShowSoftKeyboardRunnable = () -> {\n-                        Logger.logVerbose(LOG_TAG, \"Showing soft keyboard on focus change\");\n-                        KeyboardUtils.showSoftKeyboard(mActivity, mActivity.getTerminalView());\n-                    };\n-                }\n+                noRequestFocus = true;\n+                // Required to keep keyboard hidden on app startup\n+                mShowSoftKeyboardIgnoreOnce = true;\n+            }\n+        }\n \n-                mActivity.getTerminalView().setOnFocusChangeListener(new View.OnFocusChangeListener() {\n-                    @Override\n-                    public void onFocusChange(View view, boolean hasFocus) {\n-                        // Force show soft keyboard if TerminalView or toolbar text input view has\n-                        // focus and close it if they don't\n-                        boolean textInputViewHasFocus = false;\n-                        final EditText textInputView =  mActivity.findViewById(R.id.terminal_toolbar_text_input);\n-                        if (textInputView != null) textInputViewHasFocus = textInputView.hasFocus();\n-                        KeyboardUtils.setSoftKeyboardVisibility(mShowSoftKeyboardRunnable, mActivity, mActivity.getTerminalView(), hasFocus || textInputViewHasFocus);\n+        mActivity.getTerminalView().setOnFocusChangeListener(new View.OnFocusChangeListener() {\n+            @Override\n+            public void onFocusChange(View view, boolean hasFocus) {\n+                // Force show soft keyboard if TerminalView or toolbar text input view has\n+                // focus and close it if they don't\n+                boolean textInputViewHasFocus = false;\n+                final EditText textInputView =  mActivity.findViewById(R.id.terminal_toolbar_text_input);\n+                if (textInputView != null) textInputViewHasFocus = textInputView.hasFocus();\n+\n+                if (hasFocus || textInputViewHasFocus) {\n+                    if (mShowSoftKeyboardIgnoreOnce) {\n+                        mShowSoftKeyboardIgnoreOnce = false; return;\n                     }\n-                });\n+                    Logger.logVerbose(LOG_TAG, \"Showing soft keyboard on focus change\");\n+                } else {\n+                    Logger.logVerbose(LOG_TAG, \"Hiding soft keyboard on focus change\");\n+                }\n \n-                // Request focus for TerminalView\n-                mActivity.getTerminalView().requestFocus();\n+                KeyboardUtils.setSoftKeyboardVisibility(getShowSoftKeyboardRunnable(), mActivity, mActivity.getTerminalView(), hasFocus || textInputViewHasFocus);\n             }\n+        });\n+\n+        // Do not force show soft keyboard if termux-reload-settings command was run with hardware keyboard\n+        // or soft keyboard is to be hidden or is disabled\n+        if (!isReloadTermuxProperties && !noRequestFocus) {\n+            // Request focus for TerminalView\n+            // Also show the keyboard, since onFocusChange will not be called if TerminalView already\n+            // had focus on startup to show the keyboard, like when opening url with context menu\n+            // \"Select URL\" long press and returning to Termux app with back button. This\n+            // will also show keyboard even if it was closed before opening url. #2111\n+            Logger.logVerbose(LOG_TAG, \"Requesting TerminalView focus and showing soft keyboard\");\n+            mActivity.getTerminalView().requestFocus();\n+            mActivity.getTerminalView().postDelayed(getShowSoftKeyboardRunnable(), 300);\n+        }\n+    }\n+\n+    private Runnable getShowSoftKeyboardRunnable() {\n+        if (mShowSoftKeyboardRunnable == null) {\n+            mShowSoftKeyboardRunnable = () -> {\n+                KeyboardUtils.showSoftKeyboard(mActivity, mActivity.getTerminalView());\n+            };\n         }\n+        return mShowSoftKeyboardRunnable;\n     }\n \n ",
    "output": "Fix issue where soft keyboard would not show in some cases\n\n1. If `soft-keyboard-toggle-behaviour=enable/disable` was set, then pressing keyboard toggle wouldn't show the keyboard after switching back from another app if keyboard was previously disabled by user.\n2. If switching back from another app, like when opening url with context menu \"Select URL\" long press and returning to termux with back button, then soft keyboard wouldn't automatically open like it does on app startup.\n\nAlso fixed issue where OnFocusChangeListener wasn't being set up if keyboard had to be hidden or disabled on startup.\n\nFixes #2111, Fixes #2112"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/models/ExecutionCommand.java b/termux-shared/src/main/java/com/termux/shared/models/ExecutionCommand.java\n--- a/termux-shared/src/main/java/com/termux/shared/models/ExecutionCommand.java\n+++ b/termux-shared/src/main/java/com/termux/shared/models/ExecutionCommand.java\n@@ -2,6 +2,7 @@\n \n import android.app.Activity;\n import android.app.PendingIntent;\n+import android.content.Intent;\n import android.net.Uri;\n \n import androidx.annotation.NonNull;\n@@ -106,9 +107,10 @@ public int getValue() {\n \n \n     /** Defines if {@link ExecutionCommand} was started because of an external plugin request\n-     * like {@link TERMUX_SERVICE#ACTION_SERVICE_EXECUTE} intent or from within Termux app itself.\n-     */\n+     * like {@link TERMUX_SERVICE#ACTION_SERVICE_EXECUTE} intent or from within Termux app itself. */\n     public boolean isPluginExecutionCommand;\n+    /** Defines the {@link Intent} received from the external plugin which started the {@link ExecutionCommand}. */\n+    public Intent pluginIntent;\n     /** Defines {@link PendingIntent} that should be sent if an external plugin requested the execution. */\n     public PendingIntent pluginPendingIntent;\n ",
    "output": "Add pluginIntent field to ExecutionCommand"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n@@ -15,6 +15,7 @@\n import android.view.KeyEvent;\n import android.view.MotionEvent;\n import android.view.View;\n+import android.widget.EditText;\n import android.widget.ListView;\n import android.widget.Toast;\n \n@@ -464,8 +465,12 @@ public void setSoftKeyboardState(boolean isStartup, boolean isReloadTermuxProper\n                 mActivity.getTerminalView().setOnFocusChangeListener(new View.OnFocusChangeListener() {\n                     @Override\n                     public void onFocusChange(View view, boolean hasFocus) {\n-                        // Force show soft keyboard if TerminalView has focus and close it if it doesn't\n-                        KeyboardUtils.setSoftKeyboardVisibility(mShowSoftKeyboardRunnable, mActivity, mActivity.getTerminalView(), hasFocus);\n+                        // Force show soft keyboard if TerminalView or toolbar text input view has\n+                        // focus and close it if they don't\n+                        boolean textInputViewHasFocus = false;\n+                        final EditText textInputView =  mActivity.findViewById(R.id.terminal_toolbar_text_input);\n+                        if (textInputView != null) textInputViewHasFocus = textInputView.hasFocus();\n+                        KeyboardUtils.setSoftKeyboardVisibility(mShowSoftKeyboardRunnable, mActivity, mActivity.getTerminalView(), hasFocus || textInputViewHasFocus);\n                     }\n                 });\n ",
    "output": "Do not close soft keyboard when toolbar text input view is focused on\n\nThe TerminalToolbarViewPager EditText was requesting focus when it was selected. This called the TerminalView.onFocusChange() event with hasFocus=false, which closed the soft keyboard. Now soft keyboard will only be closed if both of them don't have focus.\n\nFixes #2077"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/terminal/TermuxTerminalSessionClient.java b/app/src/main/java/com/termux/app/terminal/TermuxTerminalSessionClient.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxTerminalSessionClient.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxTerminalSessionClient.java\n@@ -37,20 +37,39 @@ public class TermuxTerminalSessionClient extends TermuxTerminalSessionClientBase\n \n     private static final int MAX_SESSIONS = 8;\n \n-    private final SoundPool mBellSoundPool = new SoundPool.Builder().setMaxStreams(1).setAudioAttributes(\n-        new AudioAttributes.Builder().setContentType(AudioAttributes.CONTENT_TYPE_SONIFICATION)\n-            .setUsage(AudioAttributes.USAGE_ASSISTANCE_SONIFICATION).build()).build();\n+    private SoundPool mBellSoundPool;\n \n-    private final int mBellSoundId;\n+    private int mBellSoundId;\n \n     private static final String LOG_TAG = \"TermuxTerminalSessionClient\";\n \n     public TermuxTerminalSessionClient(TermuxActivity activity) {\n         this.mActivity = activity;\n+    }\n+\n+    /**\n+     * Should be called when mActivity.onResume() is called\n+     */\n+    public void onResume() {\n+        // Just initialize the mBellSoundPool and load the sound, otherwise bell might not run\n+        // the first time bell key is pressed and play() is called, since sound may not be loaded\n+        // quickly enough before the call to play(). https://stackoverflow.com/questions/35435625\n+        getBellSoundPool();\n+    }\n \n-        mBellSoundId = mBellSoundPool.load(activity, R.raw.bell, 1);\n+    /**\n+     * Should be called when mActivity.onStop() is called\n+     */\n+    public void onStop() {\n+        // Release mBellSoundPool resources, specially to prevent exceptions like the following to be thrown\n+        // java.util.concurrent.TimeoutException: android.media.SoundPool.finalize() timed out after 10 seconds\n+        // Bell is not played in background anyways\n+        // Related: https://stackoverflow.com/a/28708351/14686958\n+        releaseBellSoundPool();\n     }\n \n+\n+\n     @Override\n     public void onTextChanged(TerminalSession changedSession) {\n         if (!mActivity.isVisible()) return;\n@@ -122,13 +141,12 @@ public void onBell(TerminalSession session) {\n                 BellHandler.getInstance(mActivity).doBell();\n                 break;\n             case TermuxPropertyConstants.IVALUE_BELL_BEHAVIOUR_BEEP:\n-                mBellSoundPool.play(mBellSoundId, 1.f, 1.f, 1, 0, 1.f);\n+                getBellSoundPool().play(mBellSoundId, 1.f, 1.f, 1, 0, 1.f);\n                 break;\n             case TermuxPropertyConstants.IVALUE_BELL_BEHAVIOUR_IGNORE:\n                 // Ignore the bell character.\n                 break;\n         }\n-\n     }\n \n     @Override\n@@ -152,6 +170,29 @@ public void onTerminalCursorStateChange(boolean enabled) {\n \n \n \n+    /** Initialize and get mBellSoundPool */\n+    private synchronized SoundPool getBellSoundPool() {\n+        if (mBellSoundPool == null) {\n+            mBellSoundPool = new SoundPool.Builder().setMaxStreams(1).setAudioAttributes(\n+                new AudioAttributes.Builder().setContentType(AudioAttributes.CONTENT_TYPE_SONIFICATION)\n+                    .setUsage(AudioAttributes.USAGE_ASSISTANCE_SONIFICATION).build()).build();\n+\n+            mBellSoundId = mBellSoundPool.load(mActivity, R.raw.bell, 1);\n+        }\n+\n+        return mBellSoundPool;\n+    }\n+\n+    /** Release mBellSoundPool resources */\n+    private synchronized void releaseBellSoundPool() {\n+        if (mBellSoundPool != null) {\n+            mBellSoundPool.release();\n+            mBellSoundPool = null;\n+        }\n+    }\n+\n+\n+\n     /** Try switching to session. */\n     public void setCurrentSession(TerminalSession session) {\n         if (session == null) return;",
    "output": "Release terminal beep SoundPool resources on activity stop to attempt to prevent exception\n\nThe following exception may be thrown, likely because of unreleased resources.\n\nRelated https://stackoverflow.com/a/28708351/14686958\n\njava.util.concurrent.TimeoutException: android.media.SoundPool.finalize() timed out after 10 seconds\n  at android.media.SoundPool.native_release(Native Method)\n  at android.media.SoundPool.release(SoundPool.java:177)\n  at android.media.SoundPool.finalize(SoundPool.java:182)\n  at java.lang.Daemons$FinalizerDaemon.doFinalize(Daemons.java:250)\n  at java.lang.Daemons$FinalizerDaemon.runInternal(Daemons.java:237)\n  at java.lang.Daemons$Daemon.run(Daemons.java:103)\n  at java.lang.Thread.run(Thread.java:764)"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/activities/SettingsActivity.java b/app/src/main/java/com/termux/app/activities/SettingsActivity.java\n--- a/app/src/main/java/com/termux/app/activities/SettingsActivity.java\n+++ b/app/src/main/java/com/termux/app/activities/SettingsActivity.java\n@@ -69,19 +69,24 @@ private void configureAboutPreference(@NonNull Context context) {\n             Preference aboutPreference = findPreference(\"about\");\n             if (aboutPreference != null) {\n                 aboutPreference.setOnPreferenceClickListener(preference -> {\n-                    String title = \"About\";\n+                    new Thread() {\n+                        @Override\n+                        public void run() {\n+                            String title = \"About\";\n \n-                    StringBuilder aboutString = new StringBuilder();\n-                    aboutString.append(TermuxUtils.getAppInfoMarkdownString(context, false));\n+                            StringBuilder aboutString = new StringBuilder();\n+                            aboutString.append(TermuxUtils.getAppInfoMarkdownString(context, false));\n \n-                    String termuxPluginAppsInfo =  TermuxUtils.getTermuxPluginAppsInfoMarkdownString(context);\n-                    if (termuxPluginAppsInfo != null)\n-                        aboutString.append(\"\\n\\n\").append(termuxPluginAppsInfo);\n+                            String termuxPluginAppsInfo =  TermuxUtils.getTermuxPluginAppsInfoMarkdownString(context);\n+                            if (termuxPluginAppsInfo != null)\n+                                aboutString.append(\"\\n\\n\").append(termuxPluginAppsInfo);\n \n-                    aboutString.append(\"\\n\\n\").append(TermuxUtils.getDeviceInfoMarkdownString(context));\n-                    aboutString.append(\"\\n\\n\").append(TermuxUtils.getImportantLinksMarkdownString(context));\n+                            aboutString.append(\"\\n\\n\").append(TermuxUtils.getDeviceInfoMarkdownString(context));\n+                            aboutString.append(\"\\n\\n\").append(TermuxUtils.getImportantLinksMarkdownString(context));\n \n-                    ReportActivity.startReportActivity(context, new ReportInfo(UserAction.ABOUT, TermuxConstants.TERMUX_APP.TERMUX_SETTINGS_ACTIVITY_NAME, title, null, aboutString.toString(), null, false));\n+                            ReportActivity.startReportActivity(context, new ReportInfo(UserAction.ABOUT, TermuxConstants.TERMUX_APP.TERMUX_SETTINGS_ACTIVITY_NAME, title, null, aboutString.toString(), null, false));\n+                        }\n+                    }.start();\n \n                     return true;\n                 });\n\ndiff --git a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n@@ -494,26 +494,34 @@ public void reportIssueFromTranscript() {\n         TerminalSession session = mActivity.getCurrentSession();\n         if (session == null) return;\n \n-        String transcriptText = ShellUtils.getTerminalSessionTranscriptText(session, false, true);\n+        final String transcriptText = ShellUtils.getTerminalSessionTranscriptText(session, false, true);\n         if (transcriptText == null) return;\n \n-        transcriptText = DataUtils.getTruncatedCommandOutput(transcriptText, DataUtils.TRANSACTION_SIZE_LIMIT_IN_BYTES, false, true, false).trim();\n+        Logger.showToast(mActivity, mActivity.getString(R.string.msg_generating_report), true);\n+\n+        new Thread() {\n+            @Override\n+            public void run() {\n \n-        StringBuilder reportString = new StringBuilder();\n+                String transcriptTextTruncated = DataUtils.getTruncatedCommandOutput(transcriptText, DataUtils.TRANSACTION_SIZE_LIMIT_IN_BYTES, false, true, false).trim();\n \n-        String title = TermuxConstants.TERMUX_APP_NAME + \" Report Issue\";\n+                StringBuilder reportString = new StringBuilder();\n \n-        reportString.append(\"## Transcript\\n\");\n-        reportString.append(\"\\n\").append(MarkdownUtils.getMarkdownCodeForString(transcriptText, true));\n+                String title = TermuxConstants.TERMUX_APP_NAME + \" Report Issue\";\n \n-        reportString.append(\"\\n\\n\").append(TermuxUtils.getAppInfoMarkdownString(mActivity, true));\n-        reportString.append(\"\\n\\n\").append(TermuxUtils.getDeviceInfoMarkdownString(mActivity));\n+                reportString.append(\"## Transcript\\n\");\n+                reportString.append(\"\\n\").append(MarkdownUtils.getMarkdownCodeForString(transcriptTextTruncated, true));\n \n-        String termuxAptInfo = TermuxUtils.geAPTInfoMarkdownString(mActivity);\n-        if (termuxAptInfo != null)\n-            reportString.append(\"\\n\\n\").append(termuxAptInfo);\n+                reportString.append(\"\\n\\n\").append(TermuxUtils.getAppInfoMarkdownString(mActivity, true));\n+                reportString.append(\"\\n\\n\").append(TermuxUtils.getDeviceInfoMarkdownString(mActivity));\n \n-        ReportActivity.startReportActivity(mActivity, new ReportInfo(UserAction.REPORT_ISSUE_FROM_TRANSCRIPT, TermuxConstants.TERMUX_APP.TERMUX_ACTIVITY_NAME, title, null, reportString.toString(), \"\\n\\n\" + TermuxUtils.getReportIssueMarkdownString(mActivity), false));\n+                String termuxAptInfo = TermuxUtils.geAPTInfoMarkdownString(mActivity);\n+                if (termuxAptInfo != null)\n+                    reportString.append(\"\\n\\n\").append(termuxAptInfo);\n+\n+                ReportActivity.startReportActivity(mActivity, new ReportInfo(UserAction.REPORT_ISSUE_FROM_TRANSCRIPT, TermuxConstants.TERMUX_APP.TERMUX_ACTIVITY_NAME, title, null, reportString.toString(), \"\\n\\n\" + TermuxUtils.getReportIssueMarkdownString(mActivity), false));\n+            }\n+        }.start();\n     }\n \n     public void doPaste() {",
    "output": "Generate potentially long running reports in background threads instead of main UI thread"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/activities/SettingsActivity.java b/app/src/main/java/com/termux/app/activities/SettingsActivity.java\n--- a/app/src/main/java/com/termux/app/activities/SettingsActivity.java\n+++ b/app/src/main/java/com/termux/app/activities/SettingsActivity.java\n@@ -11,6 +11,8 @@\n import com.termux.R;\n import com.termux.app.models.ReportInfo;\n import com.termux.app.models.UserAction;\n+import com.termux.shared.interact.ShareUtils;\n+import com.termux.shared.packages.PackageUtils;\n import com.termux.shared.termux.TermuxConstants;\n import com.termux.shared.termux.TermuxUtils;\n \n@@ -44,10 +46,11 @@ public static class RootPreferencesFragment extends PreferenceFragmentCompat {\n         public void onCreatePreferences(Bundle savedInstanceState, String rootKey) {\n             setPreferencesFromResource(R.xml.root_preferences, rootKey);\n \n-            setAboutOnPreferenceClickListener();\n+            configureAboutPreference();\n+            configureDonatePreference();\n         }\n \n-        private void setAboutOnPreferenceClickListener() {\n+        private void configureAboutPreference() {\n             Context context = getContext();\n             Preference about = findPreference(\"about\");\n             if (context != null && about != null) {\n@@ -70,6 +73,31 @@ private void setAboutOnPreferenceClickListener() {\n                 });\n             }\n         }\n+\n+        private void configureDonatePreference() {\n+            Context context = getContext();\n+            Preference donate = findPreference(\"donate\");\n+            if (context != null && donate != null) {\n+                String signingCertificateSHA256Digest = PackageUtils.getSigningCertificateSHA256DigestForPackage(context);\n+                if (signingCertificateSHA256Digest != null) {\n+                    // If APK is a Google Playstore release, then do not show the donation link\n+                    // since Termux isn't exempted from the playstore policy donation links restriction\n+                    // Check Fund solicitations: https://pay.google.com/intl/en_in/about/policy/\n+                    String apkRelease = TermuxUtils.getAPKRelease(signingCertificateSHA256Digest);\n+                    if (apkRelease == null || apkRelease.equals(TermuxConstants.APK_RELEASE_GOOGLE_PLAYSTORE_SIGNING_CERTIFICATE_SHA256_DIGEST)) {\n+                        donate.setVisible(false);\n+                        return;\n+                    } else {\n+                        donate.setVisible(true);\n+                    }\n+                }\n+\n+                donate.setOnPreferenceClickListener(preference -> {\n+                    ShareUtils.openURL(context, TermuxConstants.TERMUX_DONATE_URL);\n+                    return true;\n+                });\n+            }\n+        }\n     }\n \n }\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/interact/ShareUtils.java b/termux-shared/src/main/java/com/termux/shared/interact/ShareUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/interact/ShareUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/interact/ShareUtils.java\n@@ -4,6 +4,7 @@\n import android.content.ClipboardManager;\n import android.content.Context;\n import android.content.Intent;\n+import android.net.Uri;\n \n import androidx.core.content.ContextCompat;\n \n@@ -13,6 +14,8 @@\n \n public class ShareUtils {\n \n+    private static final String LOG_TAG = \"ShareUtils\";\n+\n     /**\n      * Open the system app chooser that allows the user to select which app to send the intent.\n      *\n@@ -68,4 +71,21 @@ public static void copyTextToClipboard(final Context context, final String text,\n         }\n     }\n \n+    /**\n+     * Open a url.\n+     *\n+     * @param context The context for operations.\n+     * @param url The url to open.\n+     */\n+    public static void openURL(final Context context, final String url) {\n+        if (context == null || url == null || url.isEmpty()) return;\n+        try {\n+            Uri uri = Uri.parse(url);\n+            Intent intent = new Intent(Intent.ACTION_VIEW, uri);\n+            context.startActivity(intent);\n+        } catch (Exception e) {\n+            Logger.logStackTraceWithMessage(LOG_TAG, \"Failed to open the url \\\"\" + url + \"\\\"\", e);\n+        }\n+    }\n+\n }\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n@@ -144,8 +144,11 @@\n  *\n  * - 0.21.0 (2021-05-13)\n  *      - Added `APK_RELEASE_FDROID`, `APK_RELEASE_FDROID_SIGNING_CERTIFICATE_SHA256_DIGEST`,\n- *      - Added `APK_RELEASE_GITHUB_DEBUG_BUILD`, `APK_RELEASE_GITHUB_DEBUG_BUILD_SIGNING_CERTIFICATE_SHA256_DIGEST`,\n- *      - Added `APK_RELEASE_GOOGLE_PLAYSTORE`, `APK_RELEASE_GOOGLE_PLAYSTORE_SIGNING_CERTIFICATE_SHA256_DIGEST`.\n+ *          `APK_RELEASE_GITHUB_DEBUG_BUILD`, `APK_RELEASE_GITHUB_DEBUG_BUILD_SIGNING_CERTIFICATE_SHA256_DIGEST`,\n+ *          `APK_RELEASE_GOOGLE_PLAYSTORE`, `APK_RELEASE_GOOGLE_PLAYSTORE_SIGNING_CERTIFICATE_SHA256_DIGEST`.\n+ *\n+ * - 0.22.0 (2021-05-13)\n+ *      - Added `TERMUX_DONATE_URL`.\n  *\n  */\n \n@@ -200,24 +203,6 @@ public final class TermuxConstants {\n     /** Termux Github organization url */\n     public static final String TERMUX_GITHUB_ORGANIZATION_URL = \"https://github.com\" + \"/\" + TERMUX_GITHUB_ORGANIZATION_NAME; // Default: \"https://github.com/termux\"\n \n-    /** Termux support email url */\n-    public static final String TERMUX_SUPPORT_EMAIL_URL = \"termuxreports@groups.io\"; // Default: \"termuxreports@groups.io\"\n-\n-    /** Termux support email mailto url */\n-    public static final String TERMUX_SUPPORT_EMAIL_MAILTO_URL = \"mailto:\" + TERMUX_SUPPORT_EMAIL_URL; // Default: \"mailto:termuxreports@groups.io\"\n-\n-    /** Termux Wiki */\n-    public static final String TERMUX_WIKI = \"Termux Wiki\"; // Default: \"Termux Wiki\"\n-\n-    /** Termux Wiki url */\n-    public static final String TERMUX_WIKI_URL = \"https://wiki.termux.com\"; // Default: \"https://wiki.termux.com\"\n-\n-    /** Termux Reddit subreddit */\n-    public static final String TERMUX_REDDIT_SUBREDDIT = \"r/termux\"; // Default: \"r/termux\"\n-\n-    /** Termux Reddit subreddit url */\n-    public static final String TERMUX_REDDIT_SUBREDDIT_URL = \"https://www.reddit.com/r/termux\"; // Default: \"https://www.reddit.com/r/termux\"\n-\n     /** F-Droid packages base url */\n     public static final String FDROID_PACKAGES_BASE_URL = \"https://f-droid.org/en/packages\"; // Default: \"https://f-droid.org/en/packages\"\n \n@@ -239,8 +224,6 @@ public final class TermuxConstants {\n     public static final String TERMUX_GITHUB_REPO_URL = TERMUX_GITHUB_ORGANIZATION_URL + \"/\" + TERMUX_GITHUB_REPO_NAME; // Default: \"https://github.com/termux/termux-app\"\n     /** Termux Github issues repo url */\n     public static final String TERMUX_GITHUB_ISSUES_REPO_URL = TERMUX_GITHUB_REPO_URL + \"/issues\"; // Default: \"https://github.com/termux/termux-app/issues\"\n-    /** Termux Github wiki repo url */\n-    public static final String TERMUX_GITHUB_WIKI_REPO_URL = TERMUX_GITHUB_REPO_URL + \"/wiki\"; // Default: \"https://github.com/termux/termux-app/wiki\"\n     /** Termux F-Droid package url */\n     public static final String TERMUX_FDROID_PACKAGE_URL = FDROID_PACKAGES_BASE_URL + \"/\" + TERMUX_PACKAGE_NAME; // Default: \"https://f-droid.org/en/packages/com.termux\"\n \n@@ -392,8 +375,6 @@ public final class TermuxConstants {\n     public static final String TERMUX_PACKAGES_GITHUB_REPO_URL = TERMUX_GITHUB_ORGANIZATION_URL + \"/\" + TERMUX_PACKAGES_GITHUB_REPO_NAME; // Default: \"https://github.com/termux/termux-packages\"\n     /** Termux Packages Github issues repo url */\n     public static final String TERMUX_PACKAGES_GITHUB_ISSUES_REPO_URL = TERMUX_PACKAGES_GITHUB_REPO_URL + \"/issues\"; // Default: \"https://github.com/termux/termux-packages/issues\"\n-    /** Termux Packages wiki repo url */\n-    public static final String TERMUX_PACKAGES_GITHUB_WIKI_REPO_URL = TERMUX_PACKAGES_GITHUB_REPO_URL + \"/wiki\"; // Default: \"https://github.com/termux/termux-packages/wiki\"\n \n \n     /** Termux Game Packages Github repo name */\n@@ -439,6 +420,44 @@ public final class TermuxConstants {\n \n \n \n+    /*\n+     * Termux miscellaneous urls.\n+     */\n+\n+    /** Termux Wiki */\n+    public static final String TERMUX_WIKI = TERMUX_APP_NAME + \" Wiki\"; // Default: \"Termux Wiki\"\n+\n+    /** Termux Wiki url */\n+    public static final String TERMUX_WIKI_URL = \"https://wiki.termux.com\"; // Default: \"https://wiki.termux.com\"\n+\n+    /** Termux Github wiki repo url */\n+    public static final String TERMUX_GITHUB_WIKI_REPO_URL = TERMUX_GITHUB_REPO_URL + \"/wiki\"; // Default: \"https://github.com/termux/termux-app/wiki\"\n+\n+    /** Termux Packages wiki repo url */\n+    public static final String TERMUX_PACKAGES_GITHUB_WIKI_REPO_URL = TERMUX_PACKAGES_GITHUB_REPO_URL + \"/wiki\"; // Default: \"https://github.com/termux/termux-packages/wiki\"\n+\n+\n+    /** Termux support email url */\n+    public static final String TERMUX_SUPPORT_EMAIL_URL = \"termuxreports@groups.io\"; // Default: \"termuxreports@groups.io\"\n+\n+    /** Termux support email mailto url */\n+    public static final String TERMUX_SUPPORT_EMAIL_MAILTO_URL = \"mailto:\" + TERMUX_SUPPORT_EMAIL_URL; // Default: \"mailto:termuxreports@groups.io\"\n+\n+\n+    /** Termux Reddit subreddit */\n+    public static final String TERMUX_REDDIT_SUBREDDIT = \"r/termux\"; // Default: \"r/termux\"\n+\n+    /** Termux Reddit subreddit url */\n+    public static final String TERMUX_REDDIT_SUBREDDIT_URL = \"https://www.reddit.com/r/termux\"; // Default: \"https://www.reddit.com/r/termux\"\n+\n+\n+    /** Termux donate url */\n+    public static final String TERMUX_DONATE_URL = TERMUX_PACKAGES_GITHUB_REPO_URL + \"/wiki/Donate\"; // Default: \"https://github.com/termux/termux-packages/wiki/Donate\"\n+\n+\n+\n+\n+\n     /*\n      * Termux app core directory paths.\n      */",
    "output": "Add in-app Donation link in Termux Settings for non google playstore releases\n\nThe `TermuxConstants` class has been updated to `v0.22.0`. Check its Changelog sections for info on changes."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxInstaller.java b/app/src/main/java/com/termux/app/TermuxInstaller.java\n--- a/app/src/main/java/com/termux/app/TermuxInstaller.java\n+++ b/app/src/main/java/com/termux/app/TermuxInstaller.java\n@@ -12,6 +12,7 @@\n \n import com.termux.R;\n import com.termux.shared.file.FileUtils;\n+import com.termux.shared.interact.DialogUtils;\n import com.termux.shared.logger.Logger;\n import com.termux.shared.termux.TermuxConstants;\n \n@@ -57,8 +58,9 @@ static void setupBootstrapIfNeeded(final Activity activity, final Runnable whenD\n         if (!isPrimaryUser) {\n             String bootstrapErrorMessage = activity.getString(R.string.bootstrap_error_not_primary_user_message, TermuxConstants.TERMUX_PREFIX_DIR_PATH);\n             Logger.logError(LOG_TAG, bootstrapErrorMessage);\n-            new AlertDialog.Builder(activity).setTitle(R.string.bootstrap_error_title).setMessage(bootstrapErrorMessage)\n-                .setOnDismissListener(dialog -> System.exit(0)).setPositiveButton(android.R.string.ok, null).show();\n+            DialogUtils.exitAppWithErrorMessage(activity,\n+                activity.getString(R.string.bootstrap_error_title),\n+                bootstrapErrorMessage);\n             return;\n         }\n \n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/interact/DialogUtils.java b/termux-shared/src/main/java/com/termux/shared/interact/DialogUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/interact/DialogUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/interact/DialogUtils.java\n@@ -2,13 +2,19 @@\n \n import android.app.Activity;\n import android.app.AlertDialog;\n+import android.content.Context;\n import android.content.DialogInterface;\n import android.text.Selection;\n import android.util.TypedValue;\n import android.view.KeyEvent;\n+import android.view.LayoutInflater;\n+import android.view.View;\n import android.view.ViewGroup.LayoutParams;\n import android.widget.EditText;\n import android.widget.LinearLayout;\n+import android.widget.TextView;\n+\n+import com.termux.shared.R;\n \n public final class DialogUtils {\n \n@@ -61,11 +67,41 @@ public static void textInput(Activity activity, int titleText, String initialTex\n             builder.setNegativeButton(negativeButtonText, (dialog, which) -> onNegative.onTextSet(input.getText().toString()));\n         }\n \n-        if (onDismiss != null) builder.setOnDismissListener(onDismiss);\n+        if (onDismiss != null)\n+            builder.setOnDismissListener(onDismiss);\n \n         dialogHolder[0] = builder.create();\n         dialogHolder[0].setCanceledOnTouchOutside(false);\n         dialogHolder[0].show();\n     }\n \n+    public static void showMessage(Context context, String titleText, String messageText, final DialogInterface.OnDismissListener onDismiss) {\n+\n+        AlertDialog.Builder builder = new AlertDialog.Builder(context, R.style.Theme_AppCompat_Light_Dialog)\n+            .setPositiveButton(android.R.string.ok, null);\n+\n+        LayoutInflater inflater = (LayoutInflater) context.getSystemService( Context.LAYOUT_INFLATER_SERVICE );\n+        View view = inflater.inflate(R.layout.dialog_show_message, null);\n+        if (view != null) {\n+            builder.setView(view);\n+\n+            TextView titleView = view.findViewById(R.id.dialog_title);\n+            if (titleView != null)\n+                titleView.setText(titleText);\n+\n+            TextView messageView = view.findViewById(R.id.dialog_message);\n+            if (messageView != null)\n+                messageView.setText(messageText);\n+        }\n+\n+        if (onDismiss != null)\n+            builder.setOnDismissListener(onDismiss);\n+\n+        builder.show();\n+    }\n+\n+    public static void exitAppWithErrorMessage(Context context, String titleText, String messageText) {\n+        showMessage(context, titleText, messageText, dialog -> System.exit(0));\n+    }\n+\n }",
    "output": "Add generic functions to show a message in dialog and exit app with an error message"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/data/DataUtils.java b/termux-shared/src/main/java/com/termux/shared/data/DataUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/data/DataUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/data/DataUtils.java\n@@ -10,6 +10,8 @@ public class DataUtils {\n \n     public static final int TRANSACTION_SIZE_LIMIT_IN_BYTES = 100 * 1024; // 100KB\n \n+    private static final char[] HEX_ARRAY = \"0123456789ABCDEF\".toCharArray();\n+\n     public static String getTruncatedCommandOutput(String text, int maxLength, boolean fromEnd, boolean onNewline, boolean addPrefix) {\n         if (text == null) return null;\n \n@@ -43,7 +45,7 @@ public static String getTruncatedCommandOutput(String text, int maxLength, boole\n     /**\n      * Get the {@code float} from a {@link String}.\n      *\n-     * @param value The {@link String value.\n+     * @param value The {@link String} value.\n      * @param def The default value if failed to read a valid value.\n      * @return Returns the {@code float} value after parsing the {@link String} value, otherwise\n      * returns default if failed to read a valid value, like in case of an exception.\n@@ -62,7 +64,7 @@ public static float getFloatFromString(String value, float def) {\n     /**\n      * Get the {@code int} from a {@link String}.\n      *\n-     * @param value The {@link String value.\n+     * @param value The {@link String} value.\n      * @param def The default value if failed to read a valid value.\n      * @return Returns the {@code int} value after parsing the {@link String} value, otherwise\n      * returns default if failed to read a valid value, like in case of an exception.\n@@ -78,6 +80,22 @@ public static int getIntFromString(String value, int def) {\n         }\n     }\n \n+    /**\n+     * Get the {@code hex string} from a {@link byte[]}.\n+     *\n+     * @param bytes The {@link byte[]} value.\n+     * @return Returns the {@code hex string} value.\n+     */\n+    public static String bytesToHex(byte[] bytes) {\n+        char[] hexChars = new char[bytes.length * 2];\n+        for (int j = 0; j < bytes.length; j++) {\n+            int v = bytes[j] & 0xFF;\n+            hexChars[j * 2] = HEX_ARRAY[v >>> 4];\n+            hexChars[j * 2 + 1] = HEX_ARRAY[v & 0x0F];\n+        }\n+        return new String(hexChars);\n+    }\n+\n     /**\n      * Get an {@code int} from {@link Bundle} that is stored as a {@link String}.\n      *\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java b/termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/packages/PackageUtils.java\n@@ -3,11 +3,15 @@\n import android.content.Context;\n import android.content.pm.ApplicationInfo;\n import android.content.pm.PackageInfo;\n+import android.content.pm.PackageManager;\n \n import androidx.annotation.NonNull;\n \n+import com.termux.shared.data.DataUtils;\n import com.termux.shared.logger.Logger;\n \n+import java.security.MessageDigest;\n+\n public class PackageUtils {\n \n     /**\n@@ -32,8 +36,19 @@ public static Context getContextForPackage(@NonNull final Context context, Strin\n      * @return Returns the {@link PackageInfo}. This will be {@code null} if an exception is raised.\n      */\n     public static PackageInfo getPackageInfoForPackage(@NonNull final Context context) {\n+            return getPackageInfoForPackage(context, 0);\n+    }\n+\n+    /**\n+     * Get the {@link PackageInfo} for the package associated with the {@code context}.\n+     *\n+     * @param context The {@link Context} for the package.\n+     * @param flags The flags to pass to {@link PackageManager#getPackageInfo(String, int)}.\n+     * @return Returns the {@link PackageInfo}. This will be {@code null} if an exception is raised.\n+     */\n+    public static PackageInfo getPackageInfoForPackage(@NonNull final Context context, final int flags) {\n         try {\n-            return context.getPackageManager().getPackageInfo(context.getPackageName(), 0);\n+            return context.getPackageManager().getPackageInfo(context.getPackageName(), flags);\n         } catch (final Exception e) {\n             return null;\n         }\n@@ -107,4 +122,21 @@ public static String getVersionNameForPackage(@NonNull final Context context) {\n         }\n     }\n \n+\n+    /**\n+     * Get the {@code SHA-256 digest} of signing certificate for the package associated with the {@code context}.\n+     *\n+     * @param context The {@link Context} for the package.\n+     * @return Returns the{@code SHA-256 digest}. This will be {@code null} if an exception is raised.\n+     */\n+    public static String getSigningCertificateSHA256DigestForPackage(@NonNull final Context context) {\n+        try {\n+            PackageInfo packageInfo = getPackageInfoForPackage(context, PackageManager.GET_SIGNATURES);\n+            if (packageInfo == null) return null;\n+            return DataUtils.bytesToHex(MessageDigest.getInstance(\"SHA-256\").digest(packageInfo.signatures[0].toByteArray()));\n+        } catch (final Exception e) {\n+            return null;\n+        }\n+    }\n+\n }\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n@@ -7,7 +7,7 @@\n import java.util.List;\n \n /*\n- * Version: v0.20.0\n+ * Version: v0.21.0\n  *\n  * Changelog\n  *\n@@ -142,6 +142,11 @@\n  *      - Added `TERMUX_WIKI`, `TERMUX_WIKI_URL`, `TERMUX_PLUGIN_APP_NAMES_LIST`, `TERMUX_PLUGIN_APP_PACKAGE_NAMES_LIST`.\n  *      - Added `TERMUX_SETTINGS_ACTIVITY_NAME`.\n  *\n+ * - 0.21.0 (2021-05-13)\n+ *      - Added `APK_RELEASE_FDROID`, `APK_RELEASE_FDROID_SIGNING_CERTIFICATE_SHA256_DIGEST`,\n+ *      - Added `APK_RELEASE_GITHUB_DEBUG_BUILD`, `APK_RELEASE_GITHUB_DEBUG_BUILD_SIGNING_CERTIFICATE_SHA256_DIGEST`,\n+ *      - Added `APK_RELEASE_GOOGLE_PLAYSTORE`, `APK_RELEASE_GOOGLE_PLAYSTORE_SIGNING_CERTIFICATE_SHA256_DIGEST`.\n+ *\n  */\n \n /**\n@@ -351,6 +356,32 @@ public final class TermuxConstants {\n \n \n \n+    /*\n+     * Termux APK releases.\n+     */\n+\n+    /** F-Droid APK release */\n+    public static final String APK_RELEASE_FDROID = \"F-Droid\"; // Default: \"F-Droid\"\n+\n+    /** F-Droid APK release signing certificate SHA-256 digest */\n+    public static final String APK_RELEASE_FDROID_SIGNING_CERTIFICATE_SHA256_DIGEST = \"228FB2CFE90831C1499EC3CCAF61E96E8E1CE70766B9474672CE427334D41C42\"; // Default: \"228FB2CFE90831C1499EC3CCAF61E96E8E1CE70766B9474672CE427334D41C42\"\n+\n+    /** Github Debug Build APK release */\n+    public static final String APK_RELEASE_GITHUB_DEBUG_BUILD = \"Github Debug Build\"; // Default: \"Github Debug Build\"\n+\n+    /** Github Debug Build APK release signing certificate SHA-256 digest */\n+    public static final String APK_RELEASE_GITHUB_DEBUG_BUILD_SIGNING_CERTIFICATE_SHA256_DIGEST = \"B6DA01480EEFD5FBF2CD3771B8D1021EC791304BDD6C4BF41D3FAABAD48EE5E1\"; // Default: \"B6DA01480EEFD5FBF2CD3771B8D1021EC791304BDD6C4BF41D3FAABAD48EE5E1\"\n+\n+    /** Google Play Store APK release */\n+    public static final String APK_RELEASE_GOOGLE_PLAYSTORE = \"Google Play Store\"; // Default: \"Google Play Store\"\n+\n+    /** Google Play Store APK release signing certificate SHA-256 digest */\n+    public static final String APK_RELEASE_GOOGLE_PLAYSTORE_SIGNING_CERTIFICATE_SHA256_DIGEST = \"738F0A30A04D3C8A1BE304AF18D0779BCF3EA88FB60808F657A3521861C2EBF9\"; // Default: \"738F0A30A04D3C8A1BE304AF18D0779BCF3EA88FB60808F657A3521861C2EBF9\"\n+\n+\n+\n+\n+\n     /*\n      * Termux packages urls.\n      */\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n@@ -227,6 +227,13 @@ public static String getAppInfoMarkdownStringInner(@NonNull final Context contex\n         appendPropertyToMarkdown(markdownString,\"TARGET_SDK\", PackageUtils.getTargetSDKForPackage(context));\n         appendPropertyToMarkdown(markdownString,\"IS_DEBUG_BUILD\", PackageUtils.isAppForPackageADebugBuild(context));\n \n+        String signingCertificateSHA256Digest = PackageUtils.getSigningCertificateSHA256DigestForPackage(context);\n+        Logger.logError(\"'\" + signingCertificateSHA256Digest + \"'\");\n+        if (signingCertificateSHA256Digest != null) {\n+            appendPropertyToMarkdown(markdownString,\"APK_RELEASE\", getAPKRelease(signingCertificateSHA256Digest));\n+            appendPropertyToMarkdown(markdownString,\"SIGNING_CERTIFICATE_SHA256_DIGEST\", signingCertificateSHA256Digest);\n+        }\n+\n         return markdownString.toString();\n     }\n \n@@ -490,4 +497,19 @@ public static String getCurrentTimeStamp() {\n         return df.format(new Date());\n     }\n \n+    public static String getAPKRelease(String signingCertificateSHA256Digest) {\n+        if (signingCertificateSHA256Digest == null) return \"null\";\n+\n+        switch (signingCertificateSHA256Digest.toUpperCase()) {\n+            case TermuxConstants.APK_RELEASE_FDROID_SIGNING_CERTIFICATE_SHA256_DIGEST:\n+                return TermuxConstants.APK_RELEASE_FDROID;\n+            case TermuxConstants.APK_RELEASE_GITHUB_DEBUG_BUILD_SIGNING_CERTIFICATE_SHA256_DIGEST:\n+                return TermuxConstants.APK_RELEASE_GITHUB_DEBUG_BUILD;\n+            case TermuxConstants.APK_RELEASE_GOOGLE_PLAYSTORE_SIGNING_CERTIFICATE_SHA256_DIGEST:\n+                return TermuxConstants.APK_RELEASE_GOOGLE_PLAYSTORE;\n+            default:\n+                return \"Unknown\";\n+        }\n+    }\n+\n }",
    "output": "Add support for APK signing certificate SHA-256 digest and detecting APK release type and add them to App Info reports\n\nThe `TermuxConstants` class has been updated to `v0.21.0`. Check its Changelog sections for info on changes."
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/view/KeyboardUtils.java b/termux-shared/src/main/java/com/termux/shared/view/KeyboardUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/view/KeyboardUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/view/KeyboardUtils.java\n@@ -8,6 +8,7 @@\n import android.view.WindowManager;\n import android.view.inputmethod.InputMethodManager;\n \n+import androidx.annotation.NonNull;\n import androidx.core.view.WindowInsetsCompat;\n \n import com.termux.shared.logger.Logger;\n@@ -16,6 +17,15 @@ public class KeyboardUtils {\n \n     private static final String LOG_TAG = \"KeyboardUtils\";\n \n+    public static void setSoftKeyboardVisibility(@NonNull final Runnable showSoftKeyboardRunnable, final Activity activity, final View view, final boolean visible) {\n+        if (visible) {\n+            view.postDelayed(showSoftKeyboardRunnable, 1000);\n+        } else {\n+            view.removeCallbacks(showSoftKeyboardRunnable);\n+            hideSoftKeyboard(activity, view);\n+        }\n+    }\n+\n     /**\n      * Toggle the soft keyboard. The {@link InputMethodManager#SHOW_FORCED} is passed as\n      * {@code showFlags} so that keyboard is forcefully shown if it needs to be enabled.\n@@ -26,9 +36,11 @@ public class KeyboardUtils {\n      * default implementation of {@link InputMethodService#onEvaluateInputViewShown()} and returns\n      * {@code true}.\n      */\n-    public static void toggleSoftKeyboard(Context context) {\n+    public static void toggleSoftKeyboard(final Context context) {\n+        if (context == null) return;\n         InputMethodManager inputMethodManager = (InputMethodManager) context.getSystemService(Context.INPUT_METHOD_SERVICE);\n-        inputMethodManager.toggleSoftInput(InputMethodManager.SHOW_FORCED, 0);\n+        if (inputMethodManager != null)\n+            inputMethodManager.toggleSoftInput(InputMethodManager.SHOW_FORCED, 0);\n     }\n \n     /**\n@@ -47,50 +59,65 @@ public static void toggleSoftKeyboard(Context context) {\n      * check by passing {@code 0} as {@code flags}.\n      * https://cs.android.com/android/platform/superproject/+/android-11.0.0_r3:frameworks/base/core/java/android/inputmethodservice/InputMethodService.java;l=2022\n      */\n-    public static void showSoftKeyboard(Context context, View view) {\n+    public static void showSoftKeyboard(final Context context, final View view) {\n+        if (context == null || view == null) return;\n         InputMethodManager inputMethodManager = (InputMethodManager) context.getSystemService(Context.INPUT_METHOD_SERVICE);\n-        inputMethodManager.showSoftInput(view, 0);\n+        if (inputMethodManager != null)\n+            inputMethodManager.showSoftInput(view, 0);\n     }\n \n-    public static void hideSoftKeyboard(Context context, View view) {\n+    public static void hideSoftKeyboard(final Context context, final View view) {\n+        if (context == null || view == null) return;\n         InputMethodManager inputMethodManager = (InputMethodManager) context.getSystemService(Context.INPUT_METHOD_SERVICE);\n-        inputMethodManager.hideSoftInputFromWindow(view.getWindowToken(), 0);\n+        if (inputMethodManager != null)\n+            inputMethodManager.hideSoftInputFromWindow(view.getWindowToken(), 0);\n     }\n \n-    public static void disableSoftKeyboard(Activity activity, View view) {\n+    public static void disableSoftKeyboard(final Activity activity, final View view) {\n+        if (activity == null || view == null) return;\n         hideSoftKeyboard(activity, view);\n         setDisableSoftKeyboardFlags(activity);\n     }\n \n-    public static void setDisableSoftKeyboardFlags(Activity activity) {\n-        activity.getWindow().setFlags(WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM, WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM);\n+    public static void setDisableSoftKeyboardFlags(final Activity activity) {\n+        if (activity != null && activity.getWindow() != null)\n+            activity.getWindow().setFlags(WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM, WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM);\n     }\n \n-    public static void clearDisableSoftKeyboardFlags(Activity activity) {\n-        activity.getWindow().clearFlags(WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM);\n+    public static void clearDisableSoftKeyboardFlags(final Activity activity) {\n+        if (activity != null && activity.getWindow() != null)\n+            activity.getWindow().clearFlags(WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM);\n     }\n \n-    public static boolean areDisableSoftKeyboardFlagsSet(Activity activity) {\n+    public static boolean areDisableSoftKeyboardFlagsSet(final Activity activity) {\n+        if (activity == null ||  activity.getWindow() == null) return false;\n         return (activity.getWindow().getAttributes().flags & WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM) != 0;\n     }\n \n-    public static void setResizeTerminalViewForSoftKeyboardFlags(Activity activity) {\n+    public static void setSoftKeyboardAlwaysHiddenFlags(final Activity activity) {\n+        if (activity != null && activity.getWindow() != null)\n+            activity.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);\n+    }\n+\n+    public static void setResizeTerminalViewForSoftKeyboardFlags(final Activity activity) {\n         // TODO: The flag is deprecated for API 30 and WindowInset API should be used\n         // https://developer.android.com/reference/android/view/WindowManager.LayoutParams#SOFT_INPUT_ADJUST_RESIZE\n         // https://medium.com/androiddevelopers/animating-your-keyboard-fb776a8fb66d\n         // https://stackoverflow.com/a/65194077/14686958\n-        activity.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);\n+        if (activity != null && activity.getWindow() != null)\n+            activity.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE);\n     }\n \n     /** Check if keyboard visible. Does not work on android 7 but does on android 11 avd. */\n-    public static boolean isSoftKeyboardVisible(Activity activity) {\n-        WindowInsets insets = activity.getWindow().getDecorView().getRootWindowInsets();\n-\n-        if (insets != null) {\n-            WindowInsetsCompat insetsCompat = WindowInsetsCompat.toWindowInsetsCompat(insets);\n-            if (insetsCompat != null && insetsCompat.isVisible(WindowInsetsCompat.Type.ime())) {\n-                Logger.logVerbose(LOG_TAG, \"Keyboard visible\");\n-                return true;\n+    public static boolean isSoftKeyboardVisible(final Activity activity) {\n+        if (activity != null && activity.getWindow() != null) {\n+            WindowInsets insets = activity.getWindow().getDecorView().getRootWindowInsets();\n+            if (insets != null) {\n+                WindowInsetsCompat insetsCompat = WindowInsetsCompat.toWindowInsetsCompat(insets);\n+                if (insetsCompat != null && insetsCompat.isVisible(WindowInsetsCompat.Type.ime())) {\n+                    Logger.logVerbose(LOG_TAG, \"Keyboard visible\");\n+                    return true;\n+                }\n             }\n         }\n ",
    "output": "Update KeyboardUtils will null checks and add setSoftKeyboardVisibility()"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -237,7 +237,7 @@ public void onStart() {\n     public void onResume() {\n         super.onResume();\n \n-        setSoftKeyboardState();\n+        mTermuxTerminalViewClient.setSoftKeyboardState();\n     }\n \n     /**\n@@ -418,8 +418,7 @@ private void setNewSessionButtonView() {\n \n     private void setToggleKeyboardView() {\n         findViewById(R.id.toggle_keyboard_button).setOnClickListener(v -> {\n-            InputMethodManager inputMethodManager = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);\n-            inputMethodManager.toggleSoftInput(InputMethodManager.SHOW_IMPLICIT, 0);\n+            TermuxTerminalViewClient.toggleSoftKeyboard(this);\n             getDrawer().closeDrawers();\n         });\n \n@@ -429,19 +428,7 @@ private void setToggleKeyboardView() {\n         });\n     }\n \n-    private void setSoftKeyboardState() {\n-        // If soft keyboard is to disabled\n-        if (!mPreferences.getSoftKeyboardEnabled()) {\n-            getWindow().setFlags(WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM, WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM);\n-        } else {\n-            getWindow().clearFlags(WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM);\n-        }\n \n-        // If soft keyboard is to be hidden on startup\n-        if (mProperties.shouldSoftKeyboardBeHiddenOnStartup()) {\n-            getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);\n-        }\n-    }\n \n \n \n@@ -780,7 +767,7 @@ private void reloadTermuxActivityStyling() {\n \n         setTerminalToolbarHeight();\n \n-        setSoftKeyboardState();\n+        mTermuxTerminalViewClient.setSoftKeyboardState();\n \n         // To change the activity and drawer theme, activity needs to be recreated.\n         // But this will destroy the activity, and will call the onCreate() again.\n\ndiff --git a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n@@ -7,13 +7,15 @@\n import android.content.ClipboardManager;\n import android.content.Context;\n import android.content.Intent;\n+import android.inputmethodservice.InputMethodService;\n import android.media.AudioManager;\n import android.net.Uri;\n import android.text.TextUtils;\n import android.view.Gravity;\n import android.view.InputDevice;\n import android.view.KeyEvent;\n import android.view.MotionEvent;\n+import android.view.WindowManager;\n import android.view.inputmethod.InputMethodManager;\n import android.widget.ListView;\n import android.widget.Toast;\n@@ -36,6 +38,7 @@\n import com.termux.terminal.KeyHandler;\n import com.termux.terminal.TerminalEmulator;\n import com.termux.terminal.TerminalSession;\n+import com.termux.view.TerminalView;\n \n import java.util.Arrays;\n import java.util.Collections;\n@@ -122,8 +125,7 @@ public boolean onKeyDown(int keyCode, KeyEvent e, TerminalSession currentSession\n             } else if (keyCode == KeyEvent.KEYCODE_DPAD_LEFT) {\n                 mActivity.getDrawer().closeDrawers();\n             } else if (unicodeChar == 'k'/* keyboard */) {\n-                InputMethodManager imm = (InputMethodManager) mActivity.getSystemService(Context.INPUT_METHOD_SERVICE);\n-                imm.toggleSoftInput(InputMethodManager.SHOW_FORCED, 0);\n+                toggleSoftKeyboard(mActivity);\n             } else if (unicodeChar == 'm'/* menu */) {\n                 mActivity.getTerminalView().showContextMenu();\n             } else if (unicodeChar == 'r'/* rename */) {\n@@ -151,6 +153,8 @@ public boolean onKeyDown(int keyCode, KeyEvent e, TerminalSession currentSession\n \n     }\n \n+\n+\n     @Override\n     public boolean onKeyUp(int keyCode, KeyEvent e) {\n         return handleVirtualKeys(keyCode, e, false);\n@@ -337,6 +341,58 @@ public void changeFontSize(boolean increase) {\n     }\n \n \n+    /**\n+     * Toggle the soft keyboard. The {@link InputMethodManager#SHOW_FORCED} is passed as\n+     * {@code showFlags} so that keyboard is forcefully shown if it needs to be enabled.\n+     *\n+     * This is also important for soft keyboard to be shown when a hardware keyboard is attached, and\n+     * user has disabled the {@code Show on-screen keyboard while hardware keyboard is attached} toggle\n+     * in Android \"Language and Input\" settings but the current soft keyboard app overrides the\n+     * default implementation of {@link InputMethodService#onEvaluateInputViewShown()} and returns\n+     * {@code true}.\n+     */\n+    public static void toggleSoftKeyboard(Context context) {\n+        InputMethodManager inputMethodManager = (InputMethodManager) context.getSystemService(Context.INPUT_METHOD_SERVICE);\n+        inputMethodManager.toggleSoftInput(InputMethodManager.SHOW_FORCED, 0);\n+    }\n+\n+    /**\n+     * Show the soft keyboard. The {@code 0} value is passed as {@code flags} so that keyboard is\n+     * forcefully shown.\n+     *\n+     * This is also important for soft keyboard to be shown on app startup when a hardware keyboard\n+     * is attached, and user has disabled the {@code Show on-screen keyboard while hardware keyboard\n+     * is attached} toggle in Android \"Language and Input\" settings but the current soft keyboard app\n+     * overrides the default implementation of {@link InputMethodService#onEvaluateInputViewShown()}\n+     * and returns {@code true}.\n+     * https://cs.android.com/android/platform/superproject/+/android-11.0.0_r3:frameworks/base/core/java/android/inputmethodservice/InputMethodService.java;l=1751\n+     *\n+     * Also check {@link InputMethodService#onShowInputRequested(int, boolean)} which must return\n+     * {@code true}, which can be done by failing its {@code ((flags&InputMethod.SHOW_EXPLICIT) == 0)}\n+     * check by passing {@code 0} as {@code flags}.\n+     * https://cs.android.com/android/platform/superproject/+/android-11.0.0_r3:frameworks/base/core/java/android/inputmethodservice/InputMethodService.java;l=2022\n+     */\n+    public static void showSoftKeyboard(Context context, TerminalView terminalView) {\n+        InputMethodManager inputMethodManager = (InputMethodManager) context.getSystemService(Context.INPUT_METHOD_SERVICE);\n+        inputMethodManager.showSoftInput(terminalView, 0);\n+    }\n+\n+    public void setSoftKeyboardState() {\n+        // If soft keyboard is to disabled\n+        if (!mActivity.getPreferences().getSoftKeyboardEnabled()) {\n+            mActivity.getWindow().setFlags(WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM, WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM);\n+        } else {\n+            mActivity.getWindow().clearFlags(WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM);\n+            showSoftKeyboard(mActivity, mActivity.getTerminalView());\n+        }\n+\n+        // If soft keyboard is to be hidden on startup\n+        if (mActivity.getProperties().shouldSoftKeyboardBeHiddenOnStartup()) {\n+            mActivity.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);\n+        }\n+    }\n+\n+\n \n     public void shareSessionTranscript() {\n         TerminalSession session = mActivity.getCurrentSession();",
    "output": "Fix issues where soft keyboard was not shown in some cases when hardware keyboard was attached\n\nFor Termux app to be able to show a soft keyboard while a hardware keyboard is attached requires either of 2 cases:\n\n1. User has enabled \"Show on-screen keyboard while hardware keyboard is attached\" toggle in Android \"Language and Input\" settings.\n2. The toggle is disabled, but the soft keyboard app overrides the default implementation of `InputMethodService.onEvaluateInputViewShown()` and returns `true`. Some keyboard apps have a setting for this, like HackerKeyboard, but its not supported by all keyboard apps.\n\nhttps://cs.android.com/android/platform/superproject/+/android-11.0.0_r3:frameworks/base/core/java/android/inputmethodservice/InputMethodService.java;l=1751\n\nTermux previously didn't forcefully show a keyboard when the drawer \"KEYBOARD\" toggle button was pressed and only did that for the \"KEYBOARD\" extra keys toggle button. This prevented the keyboard to be shown for case 2 even when the user attempted to show the keyboard with the drawer \"KEYBOARD\" toggle. Now both buttons will forcefully show the keyboard.\n\nMoreover, previously at app startup for case 2, the keyboard wasn't being shown. Now it will automatically be shown without requiring a manual press of a \"KEYBOARD\" toggle button.\n\nThis may also solve the issue where the soft keyboard wouldn't show even when the toggle of case 1 was enabled."
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n@@ -223,6 +223,8 @@ public static String getDeviceInfoMarkdownString(@NonNull final Context context)\n             appendPropertyToMarkdown(markdownString, \"RELEASE\", Build.VERSION.RELEASE);\n         else\n             appendPropertyToMarkdown(markdownString, \"CODENAME\", Build.VERSION.CODENAME);\n+        appendPropertyToMarkdown(markdownString, \"ID\", Build.ID);\n+        appendPropertyToMarkdown(markdownString, \"DISPLAY\", Build.DISPLAY);\n         appendPropertyToMarkdown(markdownString, \"INCREMENTAL\", Build.VERSION.INCREMENTAL);\n         appendPropertyToMarkdownIfSet(markdownString, \"SECURITY_PATCH\", systemProperties.getProperty(\"ro.build.version.security_patch\"));\n         appendPropertyToMarkdownIfSet(markdownString, \"IS_DEBUGGABLE\", systemProperties.getProperty(\"ro.debuggable\"));\n@@ -236,8 +238,6 @@ public static String getDeviceInfoMarkdownString(@NonNull final Context context)\n         appendPropertyToMarkdown(markdownString, \"BRAND\", Build.BRAND);\n         appendPropertyToMarkdown(markdownString, \"MODEL\", Build.MODEL);\n         appendPropertyToMarkdown(markdownString, \"PRODUCT\", Build.PRODUCT);\n-        appendPropertyToMarkdown(markdownString, \"DISPLAY\", Build.DISPLAY);\n-        appendPropertyToMarkdown(markdownString, \"ID\", Build.ID);\n         appendPropertyToMarkdown(markdownString, \"BOARD\", Build.BOARD);\n         appendPropertyToMarkdown(markdownString, \"HARDWARE\", Build.HARDWARE);\n         appendPropertyToMarkdown(markdownString, \"DEVICE\", Build.DEVICE);",
    "output": "Move Build.ID and Build.DISPLAY to Software section of device info markdown"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/terminal/TermuxTerminalSessionClient.java b/app/src/main/java/com/termux/app/terminal/TermuxTerminalSessionClient.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxTerminalSessionClient.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxTerminalSessionClient.java\n@@ -74,15 +74,17 @@ public void onTitleChanged(TerminalSession updatedSession) {\n \n     @Override\n     public void onSessionFinished(final TerminalSession finishedSession) {\n-        if (mActivity.getTermuxService().wantsToStop()) {\n+        TermuxService service = mActivity.getTermuxService();\n+\n+        if (service == null || service.wantsToStop()) {\n             // The service wants to stop as soon as possible.\n             mActivity.finishActivityIfNotFinishing();\n             return;\n         }\n \n         if (mActivity.isVisible() && finishedSession != mActivity.getCurrentSession()) {\n             // Show toast for non-current sessions that exit.\n-            int indexOfSession = mActivity.getTermuxService().getIndexOfSession(finishedSession);\n+            int indexOfSession = service.getIndexOfSession(finishedSession);\n             // Verify that session was not removed before we got told about it finishing:\n             if (indexOfSession >= 0)\n                 mActivity.showToast(toToastTitle(finishedSession) + \" - exited\", true);\n@@ -91,7 +93,7 @@ public void onSessionFinished(final TerminalSession finishedSession) {\n         if (mActivity.getPackageManager().hasSystemFeature(PackageManager.FEATURE_LEANBACK)) {\n             // On Android TV devices we need to use older behaviour because we may\n             // not be able to have multiple launcher icons.\n-            if (mActivity.getTermuxService().getTermuxSessionsSize() > 1) {\n+            if (service.getTermuxSessionsSize() > 1) {\n                 removeFinishedSession(finishedSession);\n             }\n         } else {\n@@ -161,6 +163,7 @@ void notifyOfSessionChange() {\n \n     public void switchToSession(boolean forward) {\n         TermuxService service = mActivity.getTermuxService();\n+        if (service == null) return;\n \n         TerminalSession currentTerminalSession = mActivity.getCurrentSession();\n         int index = service.getIndexOfSession(currentTerminalSession);\n@@ -177,7 +180,10 @@ public void switchToSession(boolean forward) {\n     }\n \n     public void switchToSession(int index) {\n-        TermuxSession termuxSession = mActivity.getTermuxService().getTermuxSession(index);\n+        TermuxService service = mActivity.getTermuxService();\n+        if (service == null) return;\n+\n+        TermuxSession termuxSession = service.getTermuxSession(index);\n         if (termuxSession != null)\n             setCurrentSession(termuxSession.getTerminalSession());\n     }\n@@ -193,7 +199,10 @@ public void renameSession(final TerminalSession sessionToRename) {\n     }\n \n     public void addNewSession(boolean isFailSafe, String sessionName) {\n-        if (mActivity.getTermuxService().getTermuxSessionsSize() >= MAX_SESSIONS) {\n+        TermuxService service = mActivity.getTermuxService();\n+        if (service == null) return;\n+\n+        if (service.getTermuxSessionsSize() >= MAX_SESSIONS) {\n             new AlertDialog.Builder(mActivity).setTitle(R.string.title_max_terminals_reached).setMessage(R.string.msg_max_terminals_reached)\n                 .setPositiveButton(android.R.string.ok, null).show();\n         } else {\n@@ -206,7 +215,7 @@ public void addNewSession(boolean isFailSafe, String sessionName) {\n                 workingDirectory = currentSession.getCwd();\n             }\n \n-            TermuxSession newTermuxSession = mActivity.getTermuxService().createTermuxSession(null, null, null, workingDirectory, isFailSafe, sessionName);\n+            TermuxSession newTermuxSession = service.createTermuxSession(null, null, null, workingDirectory, isFailSafe, sessionName);\n             if (newTermuxSession == null) return;\n \n             TerminalSession newTerminalSession = newTermuxSession.getTerminalSession();\n@@ -226,39 +235,46 @@ public void setCurrentStoredSession() {\n \n     /** The current session as stored or the last one if that does not exist. */\n     public TerminalSession getCurrentStoredSessionOrLast() {\n-        TerminalSession stored = getCurrentStoredSession(mActivity);\n+        TerminalSession stored = getCurrentStoredSession();\n \n         if (stored != null) {\n             // If a stored session is in the list of currently running sessions, then return it\n             return stored;\n         } else {\n             // Else return the last session currently running\n-            TermuxSession termuxSession = mActivity.getTermuxService().getLastTermuxSession();\n+            TermuxService service = mActivity.getTermuxService();\n+            if (service == null) return null;\n+\n+            TermuxSession termuxSession = service.getLastTermuxSession();\n             if (termuxSession != null)\n                 return termuxSession.getTerminalSession();\n             else\n                 return null;\n         }\n     }\n \n-    private TerminalSession getCurrentStoredSession(TermuxActivity context) {\n+    private TerminalSession getCurrentStoredSession() {\n         String sessionHandle = mActivity.getPreferences().getCurrentSession();\n \n         // If no session is stored in shared preferences\n         if (sessionHandle == null)\n             return null;\n \n         // Check if the session handle found matches one of the currently running sessions\n-        return context.getTermuxService().getTerminalSessionForHandle(sessionHandle);\n+        TermuxService service = mActivity.getTermuxService();\n+        if (service == null) return null;\n+\n+        return service.getTerminalSessionForHandle(sessionHandle);\n     }\n \n     public void removeFinishedSession(TerminalSession finishedSession) {\n         // Return pressed with finished session - remove it.\n         TermuxService service = mActivity.getTermuxService();\n+        if (service == null) return;\n \n         int index = service.removeTermuxSession(finishedSession);\n \n-        int size = mActivity.getTermuxService().getTermuxSessionsSize();\n+        int size = service.getTermuxSessionsSize();\n         if (size == 0) {\n             // There are no sessions to show, so finish the activity.\n             mActivity.finishActivityIfNotFinishing();\n@@ -278,7 +294,10 @@ public void termuxSessionListNotifyUpdated() {\n \n     public void checkAndScrollToSession(TerminalSession session) {\n         if (!mActivity.isVisible()) return;\n-        final int indexOfSession = mActivity.getTermuxService().getIndexOfSession(session);\n+        TermuxService service = mActivity.getTermuxService();\n+        if (service == null) return;\n+\n+        final int indexOfSession = service.getIndexOfSession(session);\n         if (indexOfSession < 0) return;\n         final ListView termuxSessionsListView = mActivity.findViewById(R.id.terminal_sessions_list);\n         if (termuxSessionsListView == null) return;\n@@ -290,7 +309,10 @@ public void checkAndScrollToSession(TerminalSession session) {\n \n \n     String toToastTitle(TerminalSession session) {\n-        final int indexOfSession = mActivity.getTermuxService().getIndexOfSession(session);\n+        TermuxService service = mActivity.getTermuxService();\n+        if (service == null) return null;\n+\n+        final int indexOfSession = service.getIndexOfSession(session);\n         if (indexOfSession < 0) return null;\n         StringBuilder toastTitle = new StringBuilder(\"[\" + (indexOfSession + 1) + \"]\");\n         if (!TextUtils.isEmpty(session.mSessionName)) {",
    "output": "Fix NullPointerExceptions for cases when TermuxActivity tries to access TermuxService when it doesn't hold a reference\n\nFixes #2026"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/shell/ShellUtils.java b/termux-shared/src/main/java/com/termux/shared/shell/ShellUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/shell/ShellUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/shell/ShellUtils.java\n@@ -157,7 +157,7 @@ public static void clearTermuxTMPDIR(Context context, boolean onlyIfExists) {\n         String errmsg;\n         errmsg = FileUtils.clearDirectory(context, \"$TMPDIR\", FileUtils.getCanonicalPath(TermuxConstants.TERMUX_TMP_PREFIX_DIR_PATH, null, false));\n         if (errmsg != null) {\n-            Logger.logErrorAndShowToast(context, errmsg);\n+            Logger.logError(errmsg);\n         }\n     }\n ",
    "output": "Disable error flashes when clearing TMPDIR directory on termux app exit\n\nRooted users were getting `Clearing $TMPDIR directory at path \"/data/data/com.termux/files/usr/tmp\" failed` flash errors when they exited Termux if directories existed in TMPDIR that only had `root` user ownership, since they would fail to get cleared since clearing was being run as the termux app user instead of as the root user. Now errors will only be logged to logcat."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxInstaller.java b/app/src/main/java/com/termux/app/TermuxInstaller.java\n--- a/app/src/main/java/com/termux/app/TermuxInstaller.java\n+++ b/app/src/main/java/com/termux/app/TermuxInstaller.java\n@@ -65,8 +65,8 @@ static void setupBootstrapIfNeeded(final Activity activity, final Runnable whenD\n         final String PREFIX_FILE_PATH = TermuxConstants.TERMUX_PREFIX_DIR_PATH;\n         final File PREFIX_FILE = TermuxConstants.TERMUX_PREFIX_DIR;\n \n-        // If prefix directory exists\n-        if (FileUtils.directoryFileExists(PREFIX_FILE_PATH, false)) {\n+        // If prefix directory exists, even if its a symlink to a valid directory and symlink is not broken/dangling\n+        if (FileUtils.directoryFileExists(PREFIX_FILE_PATH, true)) {\n              File[] PREFIX_FILE_LIST =  PREFIX_FILE.listFiles();\n             // If prefix directory is empty or only contains the tmp directory\n              if(PREFIX_FILE_LIST == null || PREFIX_FILE_LIST.length == 0 || (PREFIX_FILE_LIST.length == 1 && TermuxConstants.TERMUX_TMP_PREFIX_DIR_PATH.equals(PREFIX_FILE_LIST[0].getAbsolutePath()))) {",
    "output": "Fix the bootstrap reinstallation logic for when PREFIX is a symlink\n\nChanges were made to bootstrap reinstallation logic in 107927f5, but it wasn't considering that PREFIX may be a symlink file to a directory instead of a directory file. With this commit, the previous behaviour of termux is restored where PREFIX can optionally be a symlink to a valid directory where the symlink isn't broken/dangling."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxInstaller.java b/app/src/main/java/com/termux/app/TermuxInstaller.java\n--- a/app/src/main/java/com/termux/app/TermuxInstaller.java\n+++ b/app/src/main/java/com/termux/app/TermuxInstaller.java\n@@ -62,10 +62,21 @@ static void setupBootstrapIfNeeded(final Activity activity, final Runnable whenD\n             return;\n         }\n \n+        final String PREFIX_FILE_PATH = TermuxConstants.TERMUX_PREFIX_DIR_PATH;\n         final File PREFIX_FILE = TermuxConstants.TERMUX_PREFIX_DIR;\n-        if (PREFIX_FILE.isDirectory()) {\n-            whenDone.run();\n-            return;\n+\n+        // If prefix directory exists\n+        if (FileUtils.directoryFileExists(PREFIX_FILE_PATH, false)) {\n+             File[] PREFIX_FILE_LIST =  PREFIX_FILE.listFiles();\n+            // If prefix directory is empty or only contains the tmp directory\n+             if(PREFIX_FILE_LIST == null || PREFIX_FILE_LIST.length == 0 || (PREFIX_FILE_LIST.length == 1 && TermuxConstants.TERMUX_TMP_PREFIX_DIR_PATH.equals(PREFIX_FILE_LIST[0].getAbsolutePath()))) {\n+                 Logger.logInfo(LOG_TAG, \"The prefix directory \\\"\" + PREFIX_FILE_PATH + \"\\\" exists but is empty or only contains the tmp directory.\");\n+             } else {\n+                 whenDone.run();\n+                 return;\n+             }\n+        } else if (FileUtils.fileExists(PREFIX_FILE_PATH, false)) {\n+            Logger.logInfo(LOG_TAG, \"The prefix directory \\\"\" + PREFIX_FILE_PATH + \"\\\" does not exist but another file exists at its destination.\");\n         }\n \n         final ProgressDialog progress = ProgressDialog.show(activity, null, activity.getString(R.string.bootstrap_installer_body), true, false);\n@@ -80,12 +91,19 @@ public void run() {\n                     final String STAGING_PREFIX_PATH = TermuxConstants.TERMUX_STAGING_PREFIX_DIR_PATH;\n                     final File STAGING_PREFIX_FILE = new File(STAGING_PREFIX_PATH);\n \n-                    errmsg = FileUtils.clearDirectory(activity, \"prefix staging directory\", STAGING_PREFIX_PATH);\n+                    // Delete prefix staging directory or any file at its destination\n+                    errmsg = FileUtils.deleteFile(activity, \"prefix staging directory\", STAGING_PREFIX_PATH, true);\n+                    if (errmsg != null) {\n+                        throw new RuntimeException(errmsg);\n+                    }\n+\n+                    // Delete prefix directory or any file at its destination\n+                    errmsg = FileUtils.deleteFile(activity, \"prefix directory\", PREFIX_FILE_PATH, true);\n                     if (errmsg != null) {\n                         throw new RuntimeException(errmsg);\n                     }\n \n-                    Logger.logInfo(LOG_TAG, \"Extracting bootstrap zip to prefix staging directory \\\"\" + TermuxConstants.TERMUX_STAGING_PREFIX_DIR_PATH + \"\\\".\");\n+                    Logger.logInfo(LOG_TAG, \"Extracting bootstrap zip to prefix staging directory \\\"\" + STAGING_PREFIX_PATH + \"\\\".\");\n \n                     final byte[] buffer = new byte[8096];\n                     final List<Pair<String, String>> symlinks = new ArrayList<>(50);",
    "output": "Fix cases where bootstrap was not reinstalled even if PREFIX was broken\n\nThe TermuxInstaller.setupBootstrapIfNeeded() previously only checked if PREFIX directory existed or not to decide whether to install bootstrap or not. Now it will also check if its empty or only contains the tmp directory, since in that case the PREFIX must be deleted and bootstrap reinstalled, otherwise a broken environment will be loaded since no termux binaries/libs would exist.\n\nIt will now also delete any file at the prefix or staging prefix path, even if its not a directory. If the user does not want the bootstrap to be installed for some reason, then any other file other than \"tmp\" can be created under PREFIX."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -157,7 +157,7 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n     public void onDestroy() {\n         Logger.logVerbose(LOG_TAG, \"onDestroy\");\n \n-        ShellUtils.clearTermuxTMPDIR(this);\n+        ShellUtils.clearTermuxTMPDIR(this, true);\n \n         actionReleaseWakeLock(false);\n         if (!mWantsToStop)\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/shell/ShellUtils.java b/termux-shared/src/main/java/com/termux/shared/shell/ShellUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/shell/ShellUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/shell/ShellUtils.java\n@@ -150,7 +150,10 @@ public static String getExecutableBasename(String executable) {\n         return (lastSlash == -1) ? executable : executable.substring(lastSlash + 1);\n     }\n \n-    public static void clearTermuxTMPDIR(Context context) {\n+    public static void clearTermuxTMPDIR(Context context, boolean onlyIfExists) {\n+        if(onlyIfExists && !FileUtils.directoryFileExists(TermuxConstants.TERMUX_TMP_PREFIX_DIR_PATH, false))\n+            return;\n+\n         String errmsg;\n         errmsg = FileUtils.clearDirectory(context, \"$TMPDIR\", FileUtils.getCanonicalPath(TermuxConstants.TERMUX_TMP_PREFIX_DIR_PATH, null, false));\n         if (errmsg != null) {",
    "output": "Fix termux-reset\n\nThe TMPDIR was being automatically cleared and recreated even if it didn't already exist when TermuxService was stopped. This left an empty TMPDIR in the PREFIX directory when termux-reset was run and on termux restart the bootstrap wasn't installed again because PREFIX directory already existed. This resulted in a broken environment since no binaries/libs existed under PREFIX and /system/bin/sh was loaded.\n\nThis issue was created due to v0.109."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/fragments/settings/DebuggingPreferencesFragment.java b/app/src/main/java/com/termux/app/fragments/settings/DebuggingPreferencesFragment.java\n--- a/app/src/main/java/com/termux/app/fragments/settings/DebuggingPreferencesFragment.java\n+++ b/app/src/main/java/com/termux/app/fragments/settings/DebuggingPreferencesFragment.java\n@@ -3,6 +3,7 @@\n import android.content.Context;\n import android.os.Bundle;\n \n+import androidx.annotation.Keep;\n import androidx.annotation.Nullable;\n import androidx.preference.ListPreference;\n import androidx.preference.PreferenceCategory;\n@@ -14,6 +15,7 @@\n import com.termux.shared.settings.preferences.TermuxAppSharedPreferences;\n import com.termux.shared.logger.Logger;\n \n+@Keep\n public class DebuggingPreferencesFragment extends PreferenceFragmentCompat {\n \n     @Override\n\ndiff --git a/app/src/main/java/com/termux/app/fragments/settings/TerminalIOPreferencesFragment.java b/app/src/main/java/com/termux/app/fragments/settings/TerminalIOPreferencesFragment.java\n--- a/app/src/main/java/com/termux/app/fragments/settings/TerminalIOPreferencesFragment.java\n+++ b/app/src/main/java/com/termux/app/fragments/settings/TerminalIOPreferencesFragment.java\n@@ -3,13 +3,15 @@\n import android.content.Context;\n import android.os.Bundle;\n \n+import androidx.annotation.Keep;\n import androidx.preference.PreferenceDataStore;\n import androidx.preference.PreferenceFragmentCompat;\n import androidx.preference.PreferenceManager;\n \n import com.termux.R;\n import com.termux.shared.settings.preferences.TermuxAppSharedPreferences;\n \n+@Keep\n public class TerminalIOPreferencesFragment extends PreferenceFragmentCompat {\n \n     @Override",
    "output": "Prevent DebuggingPreferencesFragment and TerminalIOPreferencesFragment from being removed during minification\n\nFixes #2005"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -27,7 +27,7 @@\n import com.termux.shared.termux.TermuxConstants.TERMUX_APP.TERMUX_SERVICE;\n import com.termux.shared.settings.preferences.TermuxAppSharedPreferences;\n import com.termux.shared.shell.TermuxSession;\n-import com.termux.shared.shell.TermuxTerminalSessionClientBase;\n+import com.termux.shared.terminal.TermuxTerminalSessionClientBase;\n import com.termux.shared.logger.Logger;\n import com.termux.shared.notification.NotificationUtils;\n import com.termux.shared.packages.PermissionUtils;\n\ndiff --git a/app/src/main/java/com/termux/app/terminal/TermuxTerminalSessionClient.java b/app/src/main/java/com/termux/app/terminal/TermuxTerminalSessionClient.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxTerminalSessionClient.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxTerminalSessionClient.java\n@@ -16,7 +16,7 @@\n import com.termux.shared.shell.TermuxSession;\n import com.termux.shared.interact.DialogUtils;\n import com.termux.app.TermuxActivity;\n-import com.termux.shared.shell.TermuxTerminalSessionClientBase;\n+import com.termux.shared.terminal.TermuxTerminalSessionClientBase;\n import com.termux.shared.termux.TermuxConstants;\n import com.termux.app.TermuxService;\n import com.termux.shared.settings.properties.TermuxPropertyConstants;\n\ndiff --git a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n@@ -21,6 +21,7 @@\n import com.termux.R;\n import com.termux.app.TermuxActivity;\n import com.termux.shared.shell.ShellUtils;\n+import com.termux.shared.terminal.TermuxTerminalViewClientBase;\n import com.termux.shared.termux.TermuxConstants;\n import com.termux.app.activities.ReportActivity;\n import com.termux.app.models.ReportInfo;\n@@ -35,7 +36,6 @@\n import com.termux.terminal.KeyHandler;\n import com.termux.terminal.TerminalEmulator;\n import com.termux.terminal.TerminalSession;\n-import com.termux.view.TerminalViewClient;\n \n import java.util.Arrays;\n import java.util.Collections;\n@@ -44,7 +44,7 @@\n \n import androidx.drawerlayout.widget.DrawerLayout;\n \n-public class TermuxTerminalViewClient implements TerminalViewClient {\n+public class TermuxTerminalViewClient extends TermuxTerminalViewClientBase {\n \n     final TermuxActivity mActivity;\n \n@@ -440,41 +440,4 @@ public void doPaste() {\n             session.getEmulator().paste(paste.toString());\n     }\n \n-\n-\n-    @Override\n-    public void logError(String tag, String message) {\n-        Logger.logError(tag, message);\n-    }\n-\n-    @Override\n-    public void logWarn(String tag, String message) {\n-        Logger.logWarn(tag, message);\n-    }\n-\n-    @Override\n-    public void logInfo(String tag, String message) {\n-        Logger.logInfo(tag, message);\n-    }\n-\n-    @Override\n-    public void logDebug(String tag, String message) {\n-        Logger.logDebug(tag, message);\n-    }\n-\n-    @Override\n-    public void logVerbose(String tag, String message) {\n-        Logger.logVerbose(tag, message);\n-    }\n-\n-    @Override\n-    public void logStackTraceWithMessage(String tag, String message, Exception e) {\n-        Logger.logStackTraceWithMessage(tag, message, e);\n-    }\n-\n-    @Override\n-    public void logStackTrace(String tag, Exception e) {\n-        Logger.logStackTrace(tag, e);\n-    }\n-\n }\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/terminal/TermuxTerminalSessionClientBase.java b/termux-shared/src/main/java/com/termux/shared/terminal/TermuxTerminalSessionClientBase.java\n--- a/termux-shared/src/main/java/com/termux/shared/terminal/TermuxTerminalSessionClientBase.java\n+++ b/termux-shared/src/main/java/com/termux/shared/terminal/TermuxTerminalSessionClientBase.java\n@@ -1,4 +1,4 @@\n-package com.termux.shared.shell;\n+package com.termux.shared.terminal;\n \n import com.termux.shared.logger.Logger;\n import com.termux.terminal.TerminalSession;\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/terminal/TermuxTerminalViewClientBase.java b/termux-shared/src/main/java/com/termux/shared/terminal/TermuxTerminalViewClientBase.java\n--- a/termux-shared/src/main/java/com/termux/shared/terminal/TermuxTerminalViewClientBase.java\n+++ b/termux-shared/src/main/java/com/termux/shared/terminal/TermuxTerminalViewClientBase.java\n@@ -0,0 +1,105 @@\n+package com.termux.shared.terminal;\n+\n+import android.view.KeyEvent;\n+import android.view.MotionEvent;\n+\n+import com.termux.shared.logger.Logger;\n+import com.termux.terminal.TerminalSession;\n+import com.termux.view.TerminalViewClient;\n+\n+public class TermuxTerminalViewClientBase implements TerminalViewClient {\n+\n+    public TermuxTerminalViewClientBase() {\n+    }\n+\n+    @Override\n+    public float onScale(float scale) {\n+        return 1.0f;\n+    }\n+\n+    @Override\n+    public void onSingleTapUp(MotionEvent e) {\n+    }\n+\n+    public boolean shouldBackButtonBeMappedToEscape() {\n+        return false;\n+    }\n+\n+    public boolean shouldEnforceCharBasedInput() {\n+        return false;\n+    }\n+\n+    public boolean shouldUseCtrlSpaceWorkaround() {\n+        return false;\n+    }\n+\n+    @Override\n+    public void copyModeChanged(boolean copyMode) {\n+    }\n+\n+    @Override\n+    public boolean onKeyDown(int keyCode, KeyEvent e, TerminalSession session) {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean onKeyUp(int keyCode, KeyEvent e) {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean onLongPress(MotionEvent event) {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean readControlKey() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean readAltKey() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean onCodePoint(int codePoint, boolean ctrlDown, TerminalSession session) {\n+        return false;\n+    }\n+\n+    @Override\n+    public void logError(String tag, String message) {\n+        Logger.logError(tag, message);\n+    }\n+\n+    @Override\n+    public void logWarn(String tag, String message) {\n+        Logger.logWarn(tag, message);\n+    }\n+\n+    @Override\n+    public void logInfo(String tag, String message) {\n+        Logger.logInfo(tag, message);\n+    }\n+\n+    @Override\n+    public void logDebug(String tag, String message) {\n+        Logger.logDebug(tag, message);\n+    }\n+\n+    @Override\n+    public void logVerbose(String tag, String message) {\n+        Logger.logVerbose(tag, message);\n+    }\n+\n+    @Override\n+    public void logStackTraceWithMessage(String tag, String message, Exception e) {\n+        Logger.logStackTraceWithMessage(tag, message, e);\n+    }\n+\n+    @Override\n+    public void logStackTrace(String tag, Exception e) {\n+        Logger.logStackTrace(tag, e);\n+    }\n+\n+}",
    "output": "Merge pull request #2002 from agnostic-apollo/termux-various-fixes-and-improvements"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n@@ -21,6 +21,7 @@\n import com.termux.R;\n import com.termux.app.TermuxActivity;\n import com.termux.shared.shell.ShellUtils;\n+import com.termux.shared.terminal.TermuxTerminalViewClientBase;\n import com.termux.shared.termux.TermuxConstants;\n import com.termux.app.activities.ReportActivity;\n import com.termux.app.models.ReportInfo;\n@@ -35,7 +36,6 @@\n import com.termux.terminal.KeyHandler;\n import com.termux.terminal.TerminalEmulator;\n import com.termux.terminal.TerminalSession;\n-import com.termux.view.TerminalViewClient;\n \n import java.util.Arrays;\n import java.util.Collections;\n@@ -44,7 +44,7 @@\n \n import androidx.drawerlayout.widget.DrawerLayout;\n \n-public class TermuxTerminalViewClient implements TerminalViewClient {\n+public class TermuxTerminalViewClient extends TermuxTerminalViewClientBase {\n \n     final TermuxActivity mActivity;\n \n@@ -440,41 +440,4 @@ public void doPaste() {\n             session.getEmulator().paste(paste.toString());\n     }\n \n-\n-\n-    @Override\n-    public void logError(String tag, String message) {\n-        Logger.logError(tag, message);\n-    }\n-\n-    @Override\n-    public void logWarn(String tag, String message) {\n-        Logger.logWarn(tag, message);\n-    }\n-\n-    @Override\n-    public void logInfo(String tag, String message) {\n-        Logger.logInfo(tag, message);\n-    }\n-\n-    @Override\n-    public void logDebug(String tag, String message) {\n-        Logger.logDebug(tag, message);\n-    }\n-\n-    @Override\n-    public void logVerbose(String tag, String message) {\n-        Logger.logVerbose(tag, message);\n-    }\n-\n-    @Override\n-    public void logStackTraceWithMessage(String tag, String message, Exception e) {\n-        Logger.logStackTraceWithMessage(tag, message, e);\n-    }\n-\n-    @Override\n-    public void logStackTrace(String tag, Exception e) {\n-        Logger.logStackTrace(tag, e);\n-    }\n-\n }\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/terminal/TermuxTerminalViewClientBase.java b/termux-shared/src/main/java/com/termux/shared/terminal/TermuxTerminalViewClientBase.java\n--- a/termux-shared/src/main/java/com/termux/shared/terminal/TermuxTerminalViewClientBase.java\n+++ b/termux-shared/src/main/java/com/termux/shared/terminal/TermuxTerminalViewClientBase.java\n@@ -0,0 +1,105 @@\n+package com.termux.shared.terminal;\n+\n+import android.view.KeyEvent;\n+import android.view.MotionEvent;\n+\n+import com.termux.shared.logger.Logger;\n+import com.termux.terminal.TerminalSession;\n+import com.termux.view.TerminalViewClient;\n+\n+public class TermuxTerminalViewClientBase implements TerminalViewClient {\n+\n+    public TermuxTerminalViewClientBase() {\n+    }\n+\n+    @Override\n+    public float onScale(float scale) {\n+        return 1.0f;\n+    }\n+\n+    @Override\n+    public void onSingleTapUp(MotionEvent e) {\n+    }\n+\n+    public boolean shouldBackButtonBeMappedToEscape() {\n+        return false;\n+    }\n+\n+    public boolean shouldEnforceCharBasedInput() {\n+        return false;\n+    }\n+\n+    public boolean shouldUseCtrlSpaceWorkaround() {\n+        return false;\n+    }\n+\n+    @Override\n+    public void copyModeChanged(boolean copyMode) {\n+    }\n+\n+    @Override\n+    public boolean onKeyDown(int keyCode, KeyEvent e, TerminalSession session) {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean onKeyUp(int keyCode, KeyEvent e) {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean onLongPress(MotionEvent event) {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean readControlKey() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean readAltKey() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean onCodePoint(int codePoint, boolean ctrlDown, TerminalSession session) {\n+        return false;\n+    }\n+\n+    @Override\n+    public void logError(String tag, String message) {\n+        Logger.logError(tag, message);\n+    }\n+\n+    @Override\n+    public void logWarn(String tag, String message) {\n+        Logger.logWarn(tag, message);\n+    }\n+\n+    @Override\n+    public void logInfo(String tag, String message) {\n+        Logger.logInfo(tag, message);\n+    }\n+\n+    @Override\n+    public void logDebug(String tag, String message) {\n+        Logger.logDebug(tag, message);\n+    }\n+\n+    @Override\n+    public void logVerbose(String tag, String message) {\n+        Logger.logVerbose(tag, message);\n+    }\n+\n+    @Override\n+    public void logStackTraceWithMessage(String tag, String message, Exception e) {\n+        Logger.logStackTraceWithMessage(tag, message, e);\n+    }\n+\n+    @Override\n+    public void logStackTrace(String tag, Exception e) {\n+        Logger.logStackTrace(tag, e);\n+    }\n+\n+}",
    "output": "Add TermuxTerminalViewClientBase to com.termux.shared.terminal package and extend that in TermuxTerminalViewClient"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -27,7 +27,7 @@\n import com.termux.shared.termux.TermuxConstants.TERMUX_APP.TERMUX_SERVICE;\n import com.termux.shared.settings.preferences.TermuxAppSharedPreferences;\n import com.termux.shared.shell.TermuxSession;\n-import com.termux.shared.shell.TermuxTerminalSessionClientBase;\n+import com.termux.shared.terminal.TermuxTerminalSessionClientBase;\n import com.termux.shared.logger.Logger;\n import com.termux.shared.notification.NotificationUtils;\n import com.termux.shared.packages.PermissionUtils;\n\ndiff --git a/app/src/main/java/com/termux/app/terminal/TermuxTerminalSessionClient.java b/app/src/main/java/com/termux/app/terminal/TermuxTerminalSessionClient.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxTerminalSessionClient.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxTerminalSessionClient.java\n@@ -16,7 +16,7 @@\n import com.termux.shared.shell.TermuxSession;\n import com.termux.shared.interact.DialogUtils;\n import com.termux.app.TermuxActivity;\n-import com.termux.shared.shell.TermuxTerminalSessionClientBase;\n+import com.termux.shared.terminal.TermuxTerminalSessionClientBase;\n import com.termux.shared.termux.TermuxConstants;\n import com.termux.app.TermuxService;\n import com.termux.shared.settings.properties.TermuxPropertyConstants;\n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/terminal/TermuxTerminalSessionClientBase.java b/termux-shared/src/main/java/com/termux/shared/terminal/TermuxTerminalSessionClientBase.java\n--- a/termux-shared/src/main/java/com/termux/shared/terminal/TermuxTerminalSessionClientBase.java\n+++ b/termux-shared/src/main/java/com/termux/shared/terminal/TermuxTerminalSessionClientBase.java\n@@ -1,4 +1,4 @@\n-package com.termux.shared.shell;\n+package com.termux.shared.terminal;\n \n import com.termux.shared.logger.Logger;\n import com.termux.terminal.TerminalSession;",
    "output": "Move TermuxTerminalSessionClientBase to com.termux.shared.terminal package"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxTerminalViewClient.java\n@@ -420,6 +420,10 @@ public void reportIssueFromTranscript() {\n         reportString.append(\"\\n\\n\").append(TermuxUtils.getAppInfoMarkdownString(mActivity, true));\n         reportString.append(\"\\n\\n\").append(TermuxUtils.getDeviceInfoMarkdownString(mActivity));\n \n+        String termuxAptInfo = TermuxUtils.geAPTInfoMarkdownString(mActivity);\n+        if (termuxAptInfo != null)\n+            reportString.append(\"\\n\\n\").append(termuxAptInfo);\n+\n         ReportActivity.startReportActivity(mActivity, new ReportInfo(UserAction.REPORT_ISSUE_FROM_TRANSCRIPT, TermuxConstants.TERMUX_APP.TERMUX_ACTIVITY_NAME, title, null, reportString.toString(), \"\\n\\n\" + TermuxUtils.getReportIssueMarkdownString(mActivity), false));\n     }\n \n\ndiff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n@@ -14,12 +14,17 @@\n import com.termux.shared.R;\n import com.termux.shared.logger.Logger;\n import com.termux.shared.markdown.MarkdownUtils;\n+import com.termux.shared.models.ExecutionCommand;\n import com.termux.shared.packages.PackageUtils;\n+import com.termux.shared.shell.TermuxTask;\n+\n+import org.apache.commons.io.IOUtils;\n \n import java.io.BufferedReader;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.InputStreamReader;\n+import java.nio.charset.Charset;\n import java.text.SimpleDateFormat;\n import java.util.Date;\n import java.util.List;\n@@ -30,6 +35,8 @@\n \n public class TermuxUtils {\n \n+    private static final String LOG_TAG = \"TermuxUtils\";\n+\n     /**\n      * Get the {@link Context} for {@link TermuxConstants#TERMUX_PACKAGE_NAME} package.\n      *\n@@ -286,6 +293,54 @@ public static String getReportIssueMarkdownString(@NonNull final Context context\n \n \n \n+    /**\n+     * Get a markdown {@link String} for APT info of the app.\n+     *\n+     * This will take a few seconds to run due to running {@code apt update} command.\n+     *\n+     * @param context The context for operations.\n+     * @return Returns the markdown {@link String}.\n+     */\n+    public static String geAPTInfoMarkdownString(@NonNull final Context context) {\n+\n+        String aptInfoScript = null;\n+        InputStream inputStream = context.getResources().openRawResource(com.termux.shared.R.raw.apt_info_script);\n+        try {\n+            aptInfoScript = IOUtils.toString(inputStream, Charset.defaultCharset());\n+        } catch (IOException e) {\n+            Logger.logError(LOG_TAG, \"Failed to get APT info script: \" + e.getMessage());\n+            return null;\n+        }\n+\n+        IOUtils.closeQuietly(inputStream);\n+\n+        if (aptInfoScript == null || aptInfoScript.isEmpty()) {\n+            Logger.logError(LOG_TAG, \"The APT info script is null or empty\");\n+            return null;\n+        }\n+\n+        aptInfoScript = aptInfoScript.replaceAll(Pattern.quote(\"@TERMUX_PREFIX@\"), TermuxConstants.TERMUX_PREFIX_DIR_PATH);\n+\n+        ExecutionCommand executionCommand = new ExecutionCommand(1, TermuxConstants.TERMUX_BIN_PREFIX_DIR_PATH + \"/bash\", null, aptInfoScript, null, true, false);\n+        TermuxTask termuxTask = TermuxTask.execute(context, executionCommand, null, true);\n+        if (termuxTask == null || !executionCommand.isSuccessful() || executionCommand.exitCode != 0) {\n+            Logger.logError(LOG_TAG, executionCommand.toString());\n+            return null;\n+        }\n+\n+        if (executionCommand.stderr != null && !executionCommand.stderr.isEmpty())\n+            Logger.logError(LOG_TAG, executionCommand.toString());\n+\n+        StringBuilder markdownString = new StringBuilder();\n+\n+        markdownString.append(\"## \").append(TermuxConstants.TERMUX_APP_NAME).append(\" APT Info\\n\\n\");\n+        markdownString.append(executionCommand.stdout);\n+\n+        return markdownString.toString();\n+    }\n+\n+\n+\n     public static Properties getSystemProperties() {\n         Properties systemProperties = new Properties();\n ",
    "output": "Added APT package info when generating \"Report Issue\" text\n\nThis will now take a few more seconds due to \"apt update\" command being run."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -117,7 +117,7 @@ public final class TermuxActivity extends Activity implements ServiceConnection\n     /**\n      * The {@link TermuxActivity} broadcast receiver for various things like terminal style configuration changes.\n      */\n-    private final BroadcastReceiver mTermuxActivityBroadcastReceiever = new TermuxActivityBroadcastReceiver();\n+    private final BroadcastReceiver mTermuxActivityBroadcastReceiver = new TermuxActivityBroadcastReceiver();\n \n     /**\n      * The last toast shown, used cancel current toast before showing new in {@link #showToast(String, boolean)}.\n@@ -222,7 +222,7 @@ public void onStart() {\n             termuxSessionListNotifyUpdated();\n         }\n \n-        registerReceiver(mTermuxActivityBroadcastReceiever, new IntentFilter(TERMUX_ACTIVITY.ACTION_RELOAD_STYLE));\n+        registerTermuxActivityBroadcastReceiver();\n \n         // If user changed the preference from {@link TermuxSettings} activity and returns, then\n         // update the {@link TerminalView#TERMINAL_VIEW_KEY_LOGGING_ENABLED} value.\n@@ -309,7 +309,7 @@ protected void onStop() {\n         // {@link #onStart} if needed.\n         mTermuxTerminalSessionClient.setCurrentStoredSession();\n \n-        unregisterReceiver(mTermuxActivityBroadcastReceiever);\n+        unregisterTermuxActivityBroadcastReceiever();\n         getDrawer().closeDrawers();\n     }\n \n@@ -716,47 +716,79 @@ public TermuxAppSharedProperties getProperties() {\n     public static void updateTermuxActivityStyling(Context context) {\n         // Make sure that terminal styling is always applied.\n         Intent stylingIntent = new Intent(TERMUX_ACTIVITY.ACTION_RELOAD_STYLE);\n-        stylingIntent.putExtra(TERMUX_ACTIVITY.EXTRA_RELOAD_STYLE, \"styling\");\n         context.sendBroadcast(stylingIntent);\n     }\n \n+    private void registerTermuxActivityBroadcastReceiver() {\n+        IntentFilter intentFilter = new IntentFilter();\n+        intentFilter.addAction(TERMUX_ACTIVITY.ACTION_REQUEST_PERMISSIONS);\n+        intentFilter.addAction(TERMUX_ACTIVITY.ACTION_RELOAD_STYLE);\n+\n+        registerReceiver(mTermuxActivityBroadcastReceiver, intentFilter);\n+    }\n+\n+    private void unregisterTermuxActivityBroadcastReceiever() {\n+        unregisterReceiver(mTermuxActivityBroadcastReceiver);\n+    }\n+\n+    private void fixTermuxActivityBroadcastReceieverIntent(Intent intent) {\n+        if (intent == null) return;\n+\n+        String extraReloadStyle = intent.getStringExtra(TERMUX_ACTIVITY.EXTRA_RELOAD_STYLE);\n+        if (\"storage\".equals(extraReloadStyle)) {\n+            intent.removeExtra(TERMUX_ACTIVITY.EXTRA_RELOAD_STYLE);\n+            intent.setAction(TERMUX_ACTIVITY.ACTION_REQUEST_PERMISSIONS);\n+        }\n+    }\n+\n     class TermuxActivityBroadcastReceiver extends BroadcastReceiver {\n         @Override\n         public void onReceive(Context context, Intent intent) {\n+            if (intent == null) return;\n+\n             if (mIsVisible) {\n-                String whatToReload = intent.getStringExtra(TERMUX_ACTIVITY.EXTRA_RELOAD_STYLE);\n-                Logger.logDebug(LOG_TAG, \"Reloading termux style for: \" + whatToReload);\n-                if (\"storage\".equals(whatToReload)) {\n-                    if (ensureStoragePermissionGranted())\n-                        TermuxInstaller.setupStorageSymlinks(TermuxActivity.this);\n-                    return;\n+                fixTermuxActivityBroadcastReceieverIntent(intent);\n+\n+                switch (intent.getAction()) {\n+                    case TERMUX_ACTIVITY.ACTION_REQUEST_PERMISSIONS:\n+                        Logger.logDebug(LOG_TAG, \"Received intent to request storage permissions\");\n+                        if (ensureStoragePermissionGranted())\n+                            TermuxInstaller.setupStorageSymlinks(TermuxActivity.this);\n+                        return;\n+                    case TERMUX_ACTIVITY.ACTION_RELOAD_STYLE:\n+                        Logger.logDebug(LOG_TAG, \"Received intent to reload styling\");\n+                        reloadTermuxActivityStyling();\n+                        return;\n+                    default:\n                 }\n+            }\n+        }\n+    }\n \n-                if(mTermuxTerminalSessionClient != null) {\n-                    mTermuxTerminalSessionClient.checkForFontAndColors();\n-                }\n+    private void reloadTermuxActivityStyling() {\n+        if(mTermuxTerminalSessionClient != null) {\n+            mTermuxTerminalSessionClient.checkForFontAndColors();\n+        }\n \n-                if(mProperties!= null) {\n-                    mProperties.loadTermuxPropertiesFromDisk();\n+        if(mProperties!= null) {\n+            mProperties.loadTermuxPropertiesFromDisk();\n \n-                    if (mExtraKeysView != null) {\n-                        mExtraKeysView.reload(mProperties.getExtraKeysInfo());\n-                    }\n-                }\n+            if (mExtraKeysView != null) {\n+                mExtraKeysView.reload(mProperties.getExtraKeysInfo());\n+            }\n+        }\n \n-                setTerminalToolbarHeight();\n+        setTerminalToolbarHeight();\n \n-                setSoftKeyboardState();\n+        setSoftKeyboardState();\n \n-                // To change the activity and drawer theme, activity needs to be recreated.\n-                // But this will destroy the activity, and will call the onCreate() again.\n-                // We need to investigate if enabling this is wise, since all stored variables and\n-                // views will be destroyed and bindService() will be called again. Extra keys input\n-                // text will we restored since that has already been implemented. Terminal sessions\n-                // and transcripts are also already preserved. Theme does change properly too.\n-                // TermuxActivity.this.recreate();\n-            }\n-        }\n+        // To change the activity and drawer theme, activity needs to be recreated.\n+        // But this will destroy the activity, and will call the onCreate() again.\n+        // We need to investigate if enabling this is wise, since all stored variables and\n+        // views will be destroyed and bindService() will be called again. Extra keys input\n+        // text will we restored since that has already been implemented. Terminal sessions\n+        // and transcripts are also already preserved. Theme does change properly too.\n+        // TermuxActivity.this.recreate();\n     }\n \n ",
    "output": "Fix TermuxActivityBroadcastReceiver wrongly designed intent actions and extras\n\nFrom now on\n- TERMUX_ACTIVITY.ACTION_REQUEST_PERMISSIONS should be used for requesting storage permissions.\n- TERMUX_ACTIVITY.ACTION_RELOAD_STYLE should be used for reloading styling.\n- TERMUX_ACTIVITY.EXTRA_RELOAD_STYLE which was previously used for requesting storage permissions if its value equaled \"storage\" has been deprecated.\n\nIf more actions need to be supported in future, add them to TermuxActivity.registerTermuxActivityBroadcastReceiver() IntentFilter."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/RunCommandService.java b/app/src/main/java/com/termux/app/RunCommandService.java\n--- a/app/src/main/java/com/termux/app/RunCommandService.java\n+++ b/app/src/main/java/com/termux/app/RunCommandService.java\n@@ -72,6 +72,7 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n \n         executionCommand.executable = intent.getStringExtra(RUN_COMMAND_SERVICE.EXTRA_COMMAND_PATH);\n         executionCommand.arguments = intent.getStringArrayExtra(RUN_COMMAND_SERVICE.EXTRA_ARGUMENTS);\n+        executionCommand.stdin = intent.getStringExtra(RUN_COMMAND_SERVICE.EXTRA_STDIN);\n         executionCommand.workingDirectory = intent.getStringExtra(RUN_COMMAND_SERVICE.EXTRA_WORKDIR);\n         executionCommand.inBackground = intent.getBooleanExtra(RUN_COMMAND_SERVICE.EXTRA_BACKGROUND, false);\n         executionCommand.sessionAction = intent.getStringExtra(RUN_COMMAND_SERVICE.EXTRA_SESSION_ACTION);\n@@ -153,6 +154,7 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n         Intent execIntent = new Intent(TERMUX_SERVICE.ACTION_SERVICE_EXECUTE, executionCommand.executableUri);\n         execIntent.setClass(this, TermuxService.class);\n         execIntent.putExtra(TERMUX_SERVICE.EXTRA_ARGUMENTS, executionCommand.arguments);\n+        execIntent.putExtra(TERMUX_SERVICE.EXTRA_STDIN, executionCommand.stdin);\n         if (executionCommand.workingDirectory != null && !executionCommand.workingDirectory.isEmpty()) execIntent.putExtra(TERMUX_SERVICE.EXTRA_WORKDIR, executionCommand.workingDirectory);\n         execIntent.putExtra(TERMUX_SERVICE.EXTRA_BACKGROUND, executionCommand.inBackground);\n         execIntent.putExtra(TERMUX_SERVICE.EXTRA_SESSION_ACTION, executionCommand.sessionAction);\n\ndiff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -350,14 +350,16 @@ private void actionServiceExecute(Intent intent) {\n         ExecutionCommand executionCommand = new ExecutionCommand(getNextExecutionId());\n \n         executionCommand.executableUri = intent.getData();\n+        executionCommand.inBackground = intent.getBooleanExtra(TERMUX_SERVICE.EXTRA_BACKGROUND, false);\n \n         if (executionCommand.executableUri != null) {\n             executionCommand.executable = executionCommand.executableUri.getPath();\n             executionCommand.arguments = intent.getStringArrayExtra(TERMUX_SERVICE.EXTRA_ARGUMENTS);\n+            if (executionCommand.inBackground)\n+                executionCommand.stdin = intent.getStringExtra(TERMUX_SERVICE.EXTRA_STDIN);\n         }\n \n         executionCommand.workingDirectory = intent.getStringExtra(TERMUX_SERVICE.EXTRA_WORKDIR);\n-        executionCommand.inBackground = intent.getBooleanExtra(TERMUX_SERVICE.EXTRA_BACKGROUND, false);\n         executionCommand.isFailsafe = intent.getBooleanExtra(TERMUX_ACTIVITY.ACTION_FAILSAFE_SESSION, false);\n         executionCommand.sessionAction = intent.getStringExtra(TERMUX_SERVICE.EXTRA_SESSION_ACTION);\n         executionCommand.commandLabel = DataUtils.getDefaultIfNull(intent.getStringExtra(TERMUX_SERVICE.EXTRA_COMMAND_LABEL), \"Execution Intent Command\");",
    "output": "Add support for stdin for background RUN_COMMAND intent and TERMUX_SERVICE.ACTION_SERVICE_EXECUTE commands"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n@@ -5,7 +5,7 @@\n import java.io.File;\n \n /*\n- * Version: v0.18.0\n+ * Version: v0.19.0\n  *\n  * Changelog\n  *\n@@ -129,6 +129,12 @@\n  * - 0.18.0 (2021-04-11)\n  *      - Updated `TERMUX_SUPPORT_EMAIL_URL` to a valid email.\n  *      - Removed `TERMUX_SUPPORT_EMAIL`.\n+ *\n+ * - 0.19.0 (2021-04-12)\n+ *      - Added `TERMUX_ACTIVITY.ACTION_REQUEST_PERMISSIONS`.\n+ *      - Added `TERMUX_SERVICE.EXTRA_STDIN`.\n+ *      - Added `RUN_COMMAND_SERVICE.EXTRA_STDIN`.\n+ *      - Deprecated `TERMUX_ACTIVITY.EXTRA_RELOAD_STYLE`.\n  */\n \n /**\n@@ -633,9 +639,13 @@ public static final class TERMUX_ACTIVITY {\n             public static final String ACTION_FAILSAFE_SESSION = TermuxConstants.TERMUX_PACKAGE_NAME + \".app.failsafe_session\"; // Default: \"com.termux.app.failsafe_session\"\n \n \n+            /** Intent action to make termux request storage permissions */\n+            public static final String ACTION_REQUEST_PERMISSIONS = TermuxConstants.TERMUX_PACKAGE_NAME + \".app.request_storage_permissions\"; // Default: \"com.termux.app.request_storage_permissions\"\n+\n             /** Intent action to make termux reload its termux session styling */\n             public static final String ACTION_RELOAD_STYLE = TermuxConstants.TERMUX_PACKAGE_NAME + \".app.reload_style\"; // Default: \"com.termux.app.reload_style\"\n-            /** Intent {@code String} extra for what to reload for the TERMUX_ACTIVITY.ACTION_RELOAD_STYLE intent */\n+            /** Intent {@code String} extra for what to reload for the TERMUX_ACTIVITY.ACTION_RELOAD_STYLE intent. This has been deperecated. */\n+            @Deprecated\n             public static final String EXTRA_RELOAD_STYLE = TermuxConstants.TERMUX_PACKAGE_NAME + \".app.reload_style\"; // Default: \"com.termux.app.reload_style\"\n \n         }\n@@ -668,8 +678,10 @@ public static final class TERMUX_SERVICE {\n             public static final String ACTION_SERVICE_EXECUTE = TERMUX_PACKAGE_NAME + \".service_execute\"; // Default: \"com.termux.service_execute\"\n             /** Uri scheme for paths sent via intent to TERMUX_SERVICE */\n             public static final String URI_SCHEME_SERVICE_EXECUTE = TERMUX_PACKAGE_NAME + \".file\"; // Default: \"com.termux.file\"\n-            /** Intent {@code String[]} extra for command arguments for the TERMUX_SERVICE.ACTION_SERVICE_EXECUTE intent */\n+            /** Intent {@code String[]} extra for arguments to the executable of the command for the TERMUX_SERVICE.ACTION_SERVICE_EXECUTE intent */\n             public static final String EXTRA_ARGUMENTS = TERMUX_PACKAGE_NAME + \".execute.arguments\"; // Default: \"com.termux.execute.arguments\"\n+            /** Intent {@code String} extra for stdin of the command for the TERMUX_SERVICE.ACTION_SERVICE_EXECUTE intent */\n+            public static final String EXTRA_STDIN = TERMUX_PACKAGE_NAME + \".execute.stdin\"; // Default: \"com.termux.execute.stdin\"\n             /** Intent {@code String} extra for command current working directory for the TERMUX_SERVICE.ACTION_SERVICE_EXECUTE intent */\n             public static final String EXTRA_WORKDIR = TERMUX_PACKAGE_NAME + \".execute.cwd\"; // Default: \"com.termux.execute.cwd\"\n             /** Intent {@code boolean} extra for command background mode for the TERMUX_SERVICE.ACTION_SERVICE_EXECUTE intent */\n@@ -760,8 +772,10 @@ public static final class RUN_COMMAND_SERVICE {\n             public static final String ACTION_RUN_COMMAND = TERMUX_PACKAGE_NAME + \".RUN_COMMAND\"; // Default: \"com.termux.RUN_COMMAND\"\n             /** Intent {@code String} extra for absolute path of command for the RUN_COMMAND_SERVICE.ACTION_RUN_COMMAND intent */\n             public static final String EXTRA_COMMAND_PATH = TERMUX_PACKAGE_NAME + \".RUN_COMMAND_PATH\"; // Default: \"com.termux.RUN_COMMAND_PATH\"\n-            /** Intent {@code String[]} extra for any arguments to pass to command for the RUN_COMMAND_SERVICE.ACTION_RUN_COMMAND intent */\n+            /** Intent {@code String[]} extra for arguments to the executable of the command for the RUN_COMMAND_SERVICE.ACTION_RUN_COMMAND intent */\n             public static final String EXTRA_ARGUMENTS = TERMUX_PACKAGE_NAME + \".RUN_COMMAND_ARGUMENTS\"; // Default: \"com.termux.RUN_COMMAND_ARGUMENTS\"\n+            /** Intent {@code String} extra for stdin of the command for the RUN_COMMAND_SERVICE.ACTION_RUN_COMMAND intent */\n+            public static final String EXTRA_STDIN = TERMUX_PACKAGE_NAME + \".RUN_COMMAND_STDIN\"; // Default: \"com.termux.RUN_COMMAND_STDIN\"\n             /** Intent {@code String} extra for current working directory of command for the RUN_COMMAND_SERVICE.ACTION_RUN_COMMAND intent */\n             public static final String EXTRA_WORKDIR = TERMUX_PACKAGE_NAME + \".RUN_COMMAND_WORKDIR\"; // Default: \"com.termux.RUN_COMMAND_WORKDIR\"\n             /** Intent {@code boolean} extra for whether to run command in background or foreground terminal session for the RUN_COMMAND_SERVICE.ACTION_RUN_COMMAND intent */",
    "output": "The `TermuxConstants` class has been updated to `v0.19.0`. Check its Changelog section for info on changes."
  },
  {
    "input": "diff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalSession.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalSession.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalSession.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalSession.java\n@@ -340,7 +340,6 @@ public void handleMessage(Message msg) {\n             if (msg.what == MSG_PROCESS_EXITED) {\n                 int exitCode = (Integer) msg.obj;\n                 cleanupResources(exitCode);\n-                mClient.onSessionFinished(TerminalSession.this);\n \n                 String exitDescription = \"\\r\\n[Process completed\";\n                 if (exitCode > 0) {\n@@ -355,6 +354,8 @@ public void handleMessage(Message msg) {\n                 byte[] bytesToWrite = exitDescription.getBytes(StandardCharsets.UTF_8);\n                 mEmulator.append(bytesToWrite, bytesToWrite.length);\n                 notifyScreenUpdate();\n+\n+                mClient.onSessionFinished(TerminalSession.this);\n             }\n         }\n ",
    "output": "Assure \"Process completed\" string is written to terminal before session is finished"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -555,13 +555,7 @@ public void onTermuxSessionExited(final TermuxSession termuxSession) {\n                 mTermuxSessionClient.termuxSessionListNotifyUpdated();\n         }\n \n-        if (mTermuxSessions.isEmpty() && mWakeLock == null) {\n-            // Finish if there are no TermuxSessions left and the wake lock is not held, otherwise keep the service alive if\n-            // holding wake lock since there may be daemon processes (e.g. sshd) running.\n-            requestStopService();\n-        } else {\n-            updateNotification();\n-        }\n+        updateNotification();\n     }\n \n ",
    "output": "Fix issue where TermuxService was stopped and Termux notification canceled, if background tasks were still running but all sessions had been closed."
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxUtils.java\n@@ -256,8 +256,8 @@ public static String getReportIssueMarkdownString(@NonNull final Context context\n \n         markdownString.append(\"\\n\\n\").append(context.getString(R.string.msg_report_issue)).append(\"\\n\");\n \n-        //markdownString.append(\"\\n\\n### Email\\n\");\n-        //markdownString.append(\"\\n\").append(MarkdownUtils.getLinkMarkdownString(TermuxConstants.TERMUX_SUPPORT_EMAIL, TermuxConstants.TERMUX_SUPPORT_EMAIL_MAILTO_URL)).append(\"  \");\n+        markdownString.append(\"\\n\\n### Email\\n\");\n+        markdownString.append(\"\\n\").append(MarkdownUtils.getLinkMarkdownString(TermuxConstants.TERMUX_SUPPORT_EMAIL_URL, TermuxConstants.TERMUX_SUPPORT_EMAIL_MAILTO_URL)).append(\"  \");\n \n         markdownString.append(\"\\n\\n### Reddit\\n\");\n         markdownString.append(\"\\n\").append(MarkdownUtils.getLinkMarkdownString(TermuxConstants.TERMUX_REDDIT_SUBREDDIT, TermuxConstants.TERMUX_REDDIT_SUBREDDIT_URL)).append(\"  \");",
    "output": "Add support for reporting issues to the termuxreports@groups.io email"
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n--- a/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n+++ b/termux-shared/src/main/java/com/termux/shared/termux/TermuxConstants.java\n@@ -5,7 +5,7 @@\n import java.io.File;\n \n /*\n- * Version: v0.17.0\n+ * Version: v0.18.0\n  *\n  * Changelog\n  *\n@@ -125,6 +125,10 @@\n  *          `TERMUX_PLUGIN_COMMAND_ERRORS_NOTIFICATION_CHANNEL_ID`, `TERMUX_PLUGIN_COMMAND_ERRORS_NOTIFICATION_CHANNEL_NAME`,\n  *          `TERMUX_CRASH_REPORTS_NOTIFICATION_CHANNEL_ID`, `TERMUX_CRASH_REPORTS_NOTIFICATION_CHANNEL_NAME`.\n  *      - Updated javadocs.\n+ *\n+ * - 0.18.0 (2021-04-11)\n+ *      - Updated `TERMUX_SUPPORT_EMAIL_URL` to a valid email.\n+ *      - Removed `TERMUX_SUPPORT_EMAIL`.\n  */\n \n /**\n@@ -178,14 +182,11 @@ public final class TermuxConstants {\n     /** Termux Github organization url */\n     public static final String TERMUX_GITHUB_ORGANIZATION_URL = \"https://github.com\" + \"/\" + TERMUX_GITHUB_ORGANIZATION_NAME; // Default: \"https://github.com/termux\"\n \n-    /** Termux support email */\n-    public static final String TERMUX_SUPPORT_EMAIL = \"support\"; // Default: \"support\"\n-\n     /** Termux support email url */\n-    public static final String TERMUX_SUPPORT_EMAIL_URL = \"email@example.com\"; // Default: \"email@example.com\"\n+    public static final String TERMUX_SUPPORT_EMAIL_URL = \"termuxreports@groups.io\"; // Default: \"termuxreports@groups.io\"\n \n     /** Termux support email mailto url */\n-    public static final String TERMUX_SUPPORT_EMAIL_MAILTO_URL = \"mailto:\" + TERMUX_SUPPORT_EMAIL_URL; // Default: \"mailto:email@example.com\"\n+    public static final String TERMUX_SUPPORT_EMAIL_MAILTO_URL = \"mailto:\" + TERMUX_SUPPORT_EMAIL_URL; // Default: \"mailto:termuxreports@groups.io\"\n \n     /** Termux Reddit subreddit */\n     public static final String TERMUX_REDDIT_SUBREDDIT = \"r/termux\"; // Default: \"r/termux\"",
    "output": "Update TermuxConstants\n\nThe `TermuxConstants` class has been updated to `v0.18.0`. Check its Changelog section for info on changes."
  },
  {
    "input": "diff --git a/termux-shared/src/main/java/com/termux/shared/shell/StreamGobbler.java b/termux-shared/src/main/java/com/termux/shared/shell/StreamGobbler.java\n--- a/termux-shared/src/main/java/com/termux/shared/shell/StreamGobbler.java\n+++ b/termux-shared/src/main/java/com/termux/shared/shell/StreamGobbler.java\n@@ -168,12 +168,13 @@ public StreamGobbler(@NonNull String shell, @NonNull InputStream inputStream, @N\n     public void run() {\n         // keep reading the InputStream until it ends (or an error occurs)\n         // optionally pausing when a command is executed that consumes the InputStream itself\n-        int logLevel = Logger.getLogLevel();\n+        int currentLogLevel = Logger.getLogLevel();\n+        int logLevelVerbose = Logger.LOG_LEVEL_VERBOSE;\n         try {\n             String line;\n             while ((line = reader.readLine()) != null) {\n \n-                if(logLevel >= Logger.LOG_LEVEL_VERBOSE)\n+                if(currentLogLevel >= logLevelVerbose)\n                     Logger.logVerbose(LOG_TAG, String.format(Locale.ENGLISH, \"[%s] %s\", shell, line)); // This will get truncated by LOGGER_ENTRY_MAX_LEN, likely 4KB\n \n                 if (stringWriter != null) stringWriter.append(line).append(\"\\n\");",
    "output": "Micro optimization for StreamGobbler"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/settings/preferences/TermuxTaskerAppSharedPreferences.java b/app/src/main/java/com/termux/app/settings/preferences/TermuxTaskerAppSharedPreferences.java\n--- a/app/src/main/java/com/termux/app/settings/preferences/TermuxTaskerAppSharedPreferences.java\n+++ b/app/src/main/java/com/termux/app/settings/preferences/TermuxTaskerAppSharedPreferences.java\n@@ -0,0 +1,52 @@\n+package com.termux.app.settings.preferences;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+\n+import com.termux.app.TermuxConstants;\n+import com.termux.app.settings.preferences.TermuxPreferenceConstants.TERMUX_TASKER_APP;\n+import com.termux.app.utils.DataUtils;\n+import com.termux.app.utils.Logger;\n+import com.termux.app.utils.TermuxUtils;\n+\n+import javax.annotation.Nonnull;\n+\n+public class TermuxTaskerAppSharedPreferences {\n+\n+    private final Context mContext;\n+    private final SharedPreferences mSharedPreferences;\n+    private final SharedPreferences mMultiProcessSharedPreferences;\n+\n+\n+    private static final String LOG_TAG = \"TermuxTaskerAppSharedPreferences\";\n+\n+    public TermuxTaskerAppSharedPreferences(@Nonnull Context context) {\n+        // We use the default context if failed to get termux-tasker package context\n+        mContext = DataUtils.getDefaultIfNull(TermuxUtils.getTermuxTaskerPackageContext(context), context);\n+        mSharedPreferences = getPrivateSharedPreferences(mContext);\n+        mMultiProcessSharedPreferences = getPrivateAndMultiProcessSharedPreferences(mContext);\n+    }\n+\n+    private static SharedPreferences getPrivateSharedPreferences(Context context) {\n+        return SharedPreferenceUtils.getPrivateSharedPreferences(context, TermuxConstants.TERMUX_TASKER_DEFAULT_PREFERENCES_FILE_BASENAME_WITHOUT_EXTENSION);\n+    }\n+\n+    private static SharedPreferences getPrivateAndMultiProcessSharedPreferences(Context context) {\n+        return SharedPreferenceUtils.getPrivateAndMultiProcessSharedPreferences(context, TermuxConstants.TERMUX_TASKER_DEFAULT_PREFERENCES_FILE_BASENAME_WITHOUT_EXTENSION);\n+    }\n+\n+\n+\n+    public int getLogLevel(boolean readFromFfile) {\n+        if(readFromFfile)\n+            return SharedPreferenceUtils.getInt(mMultiProcessSharedPreferences, TERMUX_TASKER_APP.KEY_LOG_LEVEL, Logger.DEFAULT_LOG_LEVEL);\n+        else\n+            return SharedPreferenceUtils.getInt(mSharedPreferences, TERMUX_TASKER_APP.KEY_LOG_LEVEL, Logger.DEFAULT_LOG_LEVEL);\n+    }\n+\n+    public void setLogLevel(Context context, int logLevel, boolean commitToFile) {\n+        logLevel = Logger.setLogLevel(context, logLevel);\n+        SharedPreferenceUtils.setInt(mSharedPreferences, TERMUX_TASKER_APP.KEY_LOG_LEVEL, logLevel, commitToFile);\n+    }\n+\n+}",
    "output": "Add TermuxTaskerAppSharedPreferences to handle termux-tasker shared preferences"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/utils/ShareUtils.java b/app/src/main/java/com/termux/app/utils/ShareUtils.java\n--- a/app/src/main/java/com/termux/app/utils/ShareUtils.java\n+++ b/app/src/main/java/com/termux/app/utils/ShareUtils.java\n@@ -41,7 +41,7 @@ public static void shareText(final Context context, final String subject, final\n         final Intent shareTextIntent = new Intent(Intent.ACTION_SEND);\n         shareTextIntent.setType(\"text/plain\");\n         shareTextIntent.putExtra(Intent.EXTRA_SUBJECT, subject);\n-        shareTextIntent.putExtra(Intent.EXTRA_TEXT, text);\n+        shareTextIntent.putExtra(Intent.EXTRA_TEXT, DataUtils.getTruncatedCommandOutput(text, DataUtils.TRANSACTION_SIZE_LIMIT_IN_BYTES, false, false, false));\n \n         openSystemAppChooser(context, shareTextIntent, context.getString(R.string.title_share_with));\n     }",
    "output": "Fix potential TransactionTooLargeException when sharing text"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -135,15 +135,14 @@ public final class TermuxActivity extends Activity implements ServiceConnection\n \n     private static final int CONTEXT_MENU_SELECT_URL_ID = 0;\n     private static final int CONTEXT_MENU_SHARE_TRANSCRIPT_ID = 1;\n-    private static final int CONTEXT_MENU_PASTE_ID = 3;\n+    private static final int CONTEXT_MENU_AUTOFILL_ID = 2;\n+    private static final int CONTEXT_MENU_RESET_TERMINAL_ID = 3;\n     private static final int CONTEXT_MENU_KILL_PROCESS_ID = 4;\n-    private static final int CONTEXT_MENU_RESET_TERMINAL_ID = 5;\n-    private static final int CONTEXT_MENU_STYLING_ID = 6;\n-    private static final int CONTEXT_MENU_HELP_ID = 8;\n-    private static final int CONTEXT_MENU_TOGGLE_KEEP_SCREEN_ON = 9;\n-    private static final int CONTEXT_MENU_AUTOFILL_ID = 10;\n-    private static final int CONTEXT_MENU_SETTINGS_ID = 11;\n-\n+    private static final int CONTEXT_MENU_STYLING_ID = 5;\n+    private static final int CONTEXT_MENU_TOGGLE_KEEP_SCREEN_ON = 6;\n+    private static final int CONTEXT_MENU_HELP_ID = 7;\n+    private static final int CONTEXT_MENU_SETTINGS_ID = 8;\n+    private static final int CONTEXT_MENU_REPORT_ID = 9;\n \n     private static final int REQUESTCODE_PERMISSION_STORAGE = 1234;\n \n@@ -526,6 +525,7 @@ public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuIn\n         menu.add(Menu.NONE, CONTEXT_MENU_TOGGLE_KEEP_SCREEN_ON, Menu.NONE, R.string.action_toggle_keep_screen_on).setCheckable(true).setChecked(mPreferences.getKeepScreenOn());\n         menu.add(Menu.NONE, CONTEXT_MENU_HELP_ID, Menu.NONE, R.string.action_open_help);\n         menu.add(Menu.NONE, CONTEXT_MENU_SETTINGS_ID, Menu.NONE, R.string.action_open_settings);\n+        menu.add(Menu.NONE, CONTEXT_MENU_REPORT_ID, Menu.NONE, R.string.action_report_issue);\n     }\n \n     /** Hook system menu to show context menu instead. */\n@@ -546,29 +546,29 @@ public boolean onContextItemSelected(MenuItem item) {\n             case CONTEXT_MENU_SHARE_TRANSCRIPT_ID:\n                 mTermuxViewClient.shareSessionTranscript();\n                 return true;\n-            case CONTEXT_MENU_PASTE_ID:\n-                mTermuxViewClient.doPaste();\n-                return true;\n-            case CONTEXT_MENU_KILL_PROCESS_ID:\n-                showKillSessionDialog(session);\n+            case CONTEXT_MENU_AUTOFILL_ID:\n+                requestAutoFill();\n                 return true;\n             case CONTEXT_MENU_RESET_TERMINAL_ID:\n                 resetSession(session);\n                 return true;\n+            case CONTEXT_MENU_KILL_PROCESS_ID:\n+                showKillSessionDialog(session);\n+                return true;\n             case CONTEXT_MENU_STYLING_ID:\n                 showStylingDialog();\n                 return true;\n+            case CONTEXT_MENU_TOGGLE_KEEP_SCREEN_ON:\n+                toggleKeepScreenOn();\n+                return true;\n             case CONTEXT_MENU_HELP_ID:\n                 startActivity(new Intent(this, HelpActivity.class));\n                 return true;\n             case CONTEXT_MENU_SETTINGS_ID:\n                 startActivity(new Intent(this, SettingsActivity.class));\n                 return true;\n-            case CONTEXT_MENU_TOGGLE_KEEP_SCREEN_ON:\n-                toggleKeepScreenOn();\n-                return true;\n-            case CONTEXT_MENU_AUTOFILL_ID:\n-                requestAutoFill();\n+            case CONTEXT_MENU_REPORT_ID:\n+                mTermuxViewClient.reportIssueFromTranscript();\n                 return true;\n             default:\n                 return super.onContextItemSelected(item);\n\ndiff --git a/app/src/main/java/com/termux/app/models/UserAction.java b/app/src/main/java/com/termux/app/models/UserAction.java\n--- a/app/src/main/java/com/termux/app/models/UserAction.java\n+++ b/app/src/main/java/com/termux/app/models/UserAction.java\n@@ -3,7 +3,8 @@\n public enum UserAction {\n \n     PLUGIN_EXECUTION_COMMAND(\"plugin execution command\"),\n-    CRASH_REPORT(\"crash report\");\n+    CRASH_REPORT(\"crash report\"),\n+    REPORT_ISSUE_FROM_TRANSCRIPT(\"report issue from transcript\");\n \n     private final String name;\n \n\ndiff --git a/app/src/main/java/com/termux/app/terminal/TermuxViewClient.java b/app/src/main/java/com/termux/app/terminal/TermuxViewClient.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxViewClient.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxViewClient.java\n@@ -20,11 +20,17 @@\n \n import com.termux.R;\n import com.termux.app.TermuxActivity;\n+import com.termux.app.TermuxConstants;\n+import com.termux.app.activities.ReportActivity;\n+import com.termux.app.models.ReportInfo;\n+import com.termux.app.models.UserAction;\n import com.termux.app.terminal.io.KeyboardShortcut;\n import com.termux.app.terminal.io.extrakeys.ExtraKeysView;\n import com.termux.app.settings.properties.TermuxPropertyConstants;\n import com.termux.app.utils.DataUtils;\n import com.termux.app.utils.Logger;\n+import com.termux.app.utils.MarkdownUtils;\n+import com.termux.app.utils.TermuxUtils;\n import com.termux.terminal.KeyHandler;\n import com.termux.terminal.TerminalEmulator;\n import com.termux.terminal.TerminalSession;\n@@ -394,6 +400,28 @@ public void showUrlSelection() {\n         dialog.show();\n     }\n \n+    public void reportIssueFromTranscript() {\n+        TerminalSession session = mActivity.getCurrentSession();\n+        if (session == null) return;\n+\n+        String transcriptText = session.getEmulator().getScreen().getTranscriptTextWithoutJoinedLines().trim();\n+        if (transcriptText == null) return;\n+\n+        transcriptText = DataUtils.getTruncatedCommandOutput(transcriptText, DataUtils.TRANSACTION_SIZE_LIMIT_IN_BYTES, false, true, false).trim();\n+\n+        StringBuilder reportString = new StringBuilder();\n+\n+        String title = TermuxConstants.TERMUX_APP_NAME + \" Report Issue\";\n+\n+        reportString.append(\"## Transcript\\n\");\n+        reportString.append(\"\\n\").append(MarkdownUtils.getMarkdownCodeForString(transcriptText, true));\n+\n+        reportString.append(\"\\n\\n\").append(TermuxUtils.getAppInfoMarkdownString(mActivity, true));\n+        reportString.append(\"\\n\\n\").append(TermuxUtils.getDeviceInfoMarkdownString(mActivity));\n+\n+        ReportActivity.startReportActivity(mActivity, new ReportInfo(UserAction.REPORT_ISSUE_FROM_TRANSCRIPT, TermuxConstants.TERMUX_APP.TERMUX_ACTIVITY_NAME, title, null, reportString.toString(), \"\\n\\n\" + TermuxUtils.getReportIssueMarkdownString(mActivity), false));\n+    }\n+\n     public void doPaste() {\n         TerminalSession session = mActivity.getCurrentSession();\n         if (session == null) return;\n\ndiff --git a/app/src/main/java/com/termux/app/utils/TermuxUtils.java b/app/src/main/java/com/termux/app/utils/TermuxUtils.java\n--- a/app/src/main/java/com/termux/app/utils/TermuxUtils.java\n+++ b/app/src/main/java/com/termux/app/utils/TermuxUtils.java\n@@ -250,7 +250,7 @@ public static String getReportIssueMarkdownString(@NonNull final Context context\n \n         StringBuilder markdownString = new StringBuilder();\n \n-        markdownString.append(\"## Report Issue\");\n+        markdownString.append(\"## Where To Report An Issue\");\n \n         markdownString.append(\"\\n\\n\").append(context.getString(R.string.msg_report_issue)).append(\"\\n\");\n ",
    "output": "Allow users to report an issue from terminal transcript by selection \"Report Issue\" from context menu"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxConstants.java b/app/src/main/java/com/termux/app/TermuxConstants.java\n--- a/app/src/main/java/com/termux/app/TermuxConstants.java\n+++ b/app/src/main/java/com/termux/app/TermuxConstants.java\n@@ -5,7 +5,7 @@\n import java.io.File;\n \n /*\n- * Version: v0.15.0\n+ * Version: v0.16.0\n  *\n  * Changelog\n  *\n@@ -113,6 +113,11 @@\n  *          `TERMUX_X11_PACKAGES_GITHUB_REPO_NAME`, `TERMUX_X11_PACKAGES_GITHUB_REPO_URL`, `TERMUX_X11_PACKAGES_GITHUB_ISSUES_REPO_URL`.\n  *      - Added following to `RUN_COMMAND_SERVICE`:\n  *          `RUN_COMMAND_API_HELP_URL`.\n+ *\n+ * - 0.16.0 (2021-04-06)\n+ *      - Added `TERMUX_SUPPORT_EMAIL`, `TERMUX_SUPPORT_EMAIL_URL`, `TERMUX_SUPPORT_EMAIL_MAILTO_URL`,\n+ *          `TERMUX_REDDIT_SUBREDDIT`, `TERMUX_REDDIT_SUBREDDIT_URL`.\n+ *      - The `TERMUX_SUPPORT_EMAIL_URL` value must be fixed later when email has been set up.\n  */\n \n /**\n@@ -163,11 +168,28 @@ public final class TermuxConstants {\n     /** Termux Github organization url */\n     public static final String TERMUX_GITHUB_ORGANIZATION_URL = \"https://github.com\" + \"/\" + TERMUX_GITHUB_ORGANIZATION_NAME; // Default: \"https://github.com/termux\"\n \n+    /** Termux support email */\n+    public static final String TERMUX_SUPPORT_EMAIL = \"support\"; // Default: \"support\"\n+\n+    /** Termux support email url */\n+    public static final String TERMUX_SUPPORT_EMAIL_URL = \"email@example.com\"; // Default: \"email@example.com\"\n+\n+    /** Termux support email mailto url */\n+    public static final String TERMUX_SUPPORT_EMAIL_MAILTO_URL = \"mailto:\" + TERMUX_SUPPORT_EMAIL_URL; // Default: \"mailto:email@example.com\"\n+\n+    /** Termux Reddit subreddit */\n+    public static final String TERMUX_REDDIT_SUBREDDIT = \"r/termux\"; // Default: \"r/termux\"\n+\n+    /** Termux Reddit subreddit url */\n+    public static final String TERMUX_REDDIT_SUBREDDIT_URL = \"https://www.reddit.com/r/termux\"; // Default: \"https://www.reddit.com/r/termux\"\n+\n     /** F-Droid packages base url */\n     public static final String FDROID_PACKAGES_BASE_URL = \"https://f-droid.org/en/packages\"; // Default: \"https://f-droid.org/en/packages\"\n \n \n \n+\n+\n     /*\n      * Termux and its plugin app and package names and urls.\n      */",
    "output": "Update TermuxConstants\n\nThe `TermuxConstants` classes has been updated to `v0.16.0`. Check its Changelog section for info on changes."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/fragments/settings/DebuggingPreferencesFragment.java b/app/src/main/java/com/termux/app/fragments/settings/DebuggingPreferencesFragment.java\n--- a/app/src/main/java/com/termux/app/fragments/settings/DebuggingPreferencesFragment.java\n+++ b/app/src/main/java/com/termux/app/fragments/settings/DebuggingPreferencesFragment.java\n@@ -111,6 +111,9 @@ public void putBoolean(String key, boolean value) {\n             case \"plugin_error_notifications_enabled\":\n                 mPreferences.setPluginErrorNotificationsEnabled(value);\n                 break;\n+            case \"crash_report_notifications_enabled\":\n+                mPreferences.setCrashReportNotificationsEnabled(value);\n+                break;\n             default:\n                 break;\n         }\n@@ -123,6 +126,8 @@ public boolean getBoolean(String key, boolean defValue) {\n                 return mPreferences.getTerminalViewKeyLoggingEnabled();\n             case \"plugin_error_notifications_enabled\":\n                 return mPreferences.getPluginErrorNotificationsEnabled();\n+            case \"crash_report_notifications_enabled\":\n+                return mPreferences.getCrashReportNotificationsEnabled();\n             default:\n                 return false;\n         }\n\ndiff --git a/app/src/main/java/com/termux/app/settings/preferences/TermuxAppSharedPreferences.java b/app/src/main/java/com/termux/app/settings/preferences/TermuxAppSharedPreferences.java\n--- a/app/src/main/java/com/termux/app/settings/preferences/TermuxAppSharedPreferences.java\n+++ b/app/src/main/java/com/termux/app/settings/preferences/TermuxAppSharedPreferences.java\n@@ -161,4 +161,14 @@ public void setPluginErrorNotificationsEnabled(boolean value) {\n         SharedPreferenceUtils.setBoolean(mSharedPreferences, TERMUX_APP.KEY_PLUGIN_ERROR_NOTIFICATIONS_ENABLED, value, false);\n     }\n \n+\n+\n+    public boolean getCrashReportNotificationsEnabled() {\n+        return SharedPreferenceUtils.getBoolean(mSharedPreferences, TERMUX_APP.KEY_CRASH_REPORT_NOTIFICATIONS_ENABLED, TERMUX_APP.DEFAULT_VALUE_CRASH_REPORT_NOTIFICATIONS_ENABLED);\n+    }\n+\n+    public void setCrashReportNotificationsEnabled(boolean value) {\n+        SharedPreferenceUtils.setBoolean(mSharedPreferences, TERMUX_APP.KEY_CRASH_REPORT_NOTIFICATIONS_ENABLED, value, false);\n+    }\n+\n }\n\ndiff --git a/app/src/main/java/com/termux/app/settings/preferences/TermuxPreferenceConstants.java b/app/src/main/java/com/termux/app/settings/preferences/TermuxPreferenceConstants.java\n--- a/app/src/main/java/com/termux/app/settings/preferences/TermuxPreferenceConstants.java\n+++ b/app/src/main/java/com/termux/app/settings/preferences/TermuxPreferenceConstants.java\n@@ -1,7 +1,7 @@\n package com.termux.app.settings.preferences;\n \n /*\n- * Version: v0.7.0\n+ * Version: v0.8.0\n  *\n  * Changelog\n  *\n@@ -33,6 +33,10 @@\n  * - 0.7.0 (2021-03-27)\n  *      - Added following to `TERMUX_APP`:\n  *          `KEY_SOFT_KEYBOARD_ENABLED` and `DEFAULT_VALUE_KEY_SOFT_KEYBOARD_ENABLED`.\n+ *\n+ * - 0.8.0 (2021-04-06)\n+ *      - Added following to `TERMUX_APP`:\n+ *          `KEY_CRASH_REPORT_NOTIFICATIONS_ENABLED` and `DEFAULT_VALUE_CRASH_REPORT_NOTIFICATIONS_ENABLED`.\n  */\n \n /**\n@@ -108,6 +112,12 @@ public static final class TERMUX_APP {\n         public static final String KEY_PLUGIN_ERROR_NOTIFICATIONS_ENABLED = \"plugin_error_notifications_enabled\";\n         public static final boolean DEFAULT_VALUE_PLUGIN_ERROR_NOTIFICATIONS_ENABLED = true;\n \n+        /**\n+         * Defines the key for whether notifications for crash reports are enabled or not.\n+         */\n+        public static final String KEY_CRASH_REPORT_NOTIFICATIONS_ENABLED = \"crash_report_notifications_enabled\";\n+        public static final boolean DEFAULT_VALUE_CRASH_REPORT_NOTIFICATIONS_ENABLED = true;\n+\n     }\n \n     /**",
    "output": "Add crash_report_notifications_enabled shared preferences\n\nThis will allow users to control if a notification should be shown with the crash info when app is restarted after a crash\n\nThe `TermuxPreferenceConstants` classes has been updated to `v0.8.0`. Check its Changelog section for info on changes."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/utils/Logger.java b/app/src/main/java/com/termux/app/utils/Logger.java\n--- a/app/src/main/java/com/termux/app/utils/Logger.java\n+++ b/app/src/main/java/com/termux/app/utils/Logger.java\n@@ -31,7 +31,7 @@ public class Logger {\n \n \n \n-    static public void logMesssage(int logLevel, String tag, String message) {\n+    public static void logMesssage(int logLevel, String tag, String message) {\n         if(logLevel == Log.ERROR && CURRENT_LOG_LEVEL >= LOG_LEVEL_NORMAL)\n             Log.e(getFullTag(tag), message);\n         else if(logLevel == Log.WARN && CURRENT_LOG_LEVEL >= LOG_LEVEL_NORMAL)\n@@ -46,57 +46,57 @@ else if(logLevel == Log.VERBOSE && CURRENT_LOG_LEVEL >= LOG_LEVEL_VERBOSE)\n \n \n \n-    static public void logError(String tag, String message) {\n+    public static void logError(String tag, String message) {\n         logMesssage(Log.ERROR, tag, message);\n     }\n \n-    static public void logError(String message) {\n+    public static void logError(String message) {\n         logMesssage(Log.ERROR, DEFAULT_LOG_TAG, message);\n     }\n \n \n \n-    static public void logWarn(String tag, String message) {\n+    public static void logWarn(String tag, String message) {\n         logMesssage(Log.WARN, tag, message);\n     }\n \n-    static public void logWarn(String message) {\n+    public static void logWarn(String message) {\n         logMesssage(Log.WARN, DEFAULT_LOG_TAG, message);\n     }\n \n \n \n-    static public void logInfo(String tag, String message) {\n+    public static void logInfo(String tag, String message) {\n         logMesssage(Log.INFO, tag, message);\n     }\n \n-    static public void logInfo(String message) {\n+    public static void logInfo(String message) {\n         logMesssage(Log.INFO, DEFAULT_LOG_TAG, message);\n     }\n \n \n \n-    static public void logDebug(String tag, String message) {\n+    public static void logDebug(String tag, String message) {\n         logMesssage(Log.DEBUG, tag, message);\n     }\n \n-    static public void logDebug(String message) {\n+    public static void logDebug(String message) {\n         logMesssage(Log.DEBUG, DEFAULT_LOG_TAG, message);\n     }\n \n \n \n-    static public void logVerbose(String tag, String message) {\n+    public static void logVerbose(String tag, String message) {\n         logMesssage(Log.VERBOSE, tag, message);\n     }\n \n-    static public void logVerbose(String message) {\n+    public static void logVerbose(String message) {\n         logMesssage(Log.VERBOSE, DEFAULT_LOG_TAG, message);\n     }\n \n \n \n-    static public void logErrorAndShowToast(Context context, String tag, String message) {\n+    public static void logErrorAndShowToast(Context context, String tag, String message) {\n         if (context == null) return;\n \n         if(CURRENT_LOG_LEVEL >= LOG_LEVEL_NORMAL) {\n@@ -105,13 +105,13 @@ static public void logErrorAndShowToast(Context context, String tag, String mess\n         }\n     }\n \n-    static public void logErrorAndShowToast(Context context, String message) {\n+    public static void logErrorAndShowToast(Context context, String message) {\n         logErrorAndShowToast(context, DEFAULT_LOG_TAG, message);\n     }\n \n \n \n-    static public void logDebugAndShowToast(Context context, String tag, String message) {\n+    public static void logDebugAndShowToast(Context context, String tag, String message) {\n         if (context == null) return;\n \n         if(CURRENT_LOG_LEVEL >= LOG_LEVEL_DEBUG) {\n@@ -120,35 +120,35 @@ static public void logDebugAndShowToast(Context context, String tag, String mess\n         }\n     }\n \n-    static public void logDebugAndShowToast(Context context, String message) {\n+    public static void logDebugAndShowToast(Context context, String message) {\n         logDebugAndShowToast(context, DEFAULT_LOG_TAG, message);\n     }\n \n \n \n-    static public void logStackTraceWithMessage(String tag, String message, Throwable throwable) {\n+    public static void logStackTraceWithMessage(String tag, String message, Throwable throwable) {\n         if(CURRENT_LOG_LEVEL >= LOG_LEVEL_NORMAL)\n             Log.e(getFullTag(tag), getMessageAndStackTraceString(message, throwable));\n     }\n \n-    static public void logStackTraceWithMessage(String message, Throwable throwable) {\n+    public static void logStackTraceWithMessage(String message, Throwable throwable) {\n         logStackTraceWithMessage(DEFAULT_LOG_TAG, message, throwable);\n     }\n \n-    static public void logStackTrace(String tag, Throwable throwable) {\n+    public static void logStackTrace(String tag, Throwable throwable) {\n         logStackTraceWithMessage(tag, null, throwable);\n     }\n \n-    static public void logStackTrace(Throwable throwable) {\n+    public static void logStackTrace(Throwable throwable) {\n         logStackTraceWithMessage(DEFAULT_LOG_TAG, null, throwable);\n     }\n \n-    static public void logStackTracesWithMessage(String tag, String message, List<Throwable> throwableList) {\n+    public static void logStackTracesWithMessage(String tag, String message, List<Throwable> throwableList) {\n         if(CURRENT_LOG_LEVEL >= LOG_LEVEL_NORMAL)\n             Log.e(getFullTag(tag), getMessageAndStackTracesString(message, throwableList));\n     }\n \n-    static public String getMessageAndStackTraceString(String message, Throwable throwable) {\n+    public static String getMessageAndStackTraceString(String message, Throwable throwable) {\n         if(message == null && throwable == null)\n             return null;\n         else if(message != null && throwable != null)\n@@ -159,7 +159,7 @@ else if(throwable == null)\n             return getStackTraceString(throwable);\n     }\n \n-    static public String getMessageAndStackTracesString(String message, List<Throwable> throwableList) {\n+    public static String getMessageAndStackTracesString(String message, List<Throwable> throwableList) {\n         if(message == null && (throwableList == null || throwableList.size() == 0))\n             return null;\n         else if(message != null && (throwableList != null && throwableList.size() != 0))\n@@ -170,7 +170,7 @@ else if(throwableList == null || throwableList.size() == 0)\n             return getStackTracesString(null, getStackTraceStringArray(throwableList));\n     }\n \n-    static public String getStackTraceString(Throwable throwable) {\n+    public static String getStackTraceString(Throwable throwable) {\n         if(throwable == null) return null;\n \n         String stackTraceString = null;\n@@ -188,7 +188,8 @@ static public String getStackTraceString(Throwable throwable) {\n \n         return stackTraceString;\n     }\n-    private static String[] getStackTraceStringArray(Throwable throwable) {\n+\n+    public static String[] getStackTraceStringArray(Throwable throwable) {\n         return getStackTraceStringArray(Collections.singletonList(throwable));\n     }\n \n@@ -210,22 +211,28 @@ public static String getStackTracesString(String label, String[] stackTraceStrin\n             stackTracesString.append(\" -\");\n         } else {\n             for (int i = 0; i != stackTraceStringArray.length; i++) {\n-                stackTracesString.append(\"\\n\\nStacktrace \").append(i + 1).append(\"\\n```\\n\").append(stackTraceStringArray[i]).append(\"\\n```\\n\");\n+                if(stackTraceStringArray.length > 1)\n+                    stackTracesString.append(\"\\n\\nStacktrace \").append(i + 1);\n+\n+                stackTracesString.append(\"\\n```\\n\").append(stackTraceStringArray[i]).append(\"\\n```\\n\");\n             }\n         }\n \n         return stackTracesString.toString();\n     }\n \n     public static String getStackTracesMarkdownString(String label, String[] stackTraceStringArray) {\n-        if(label == null) label = \"StackTraces:\";\n+        if(label == null) label = \"StackTraces\";\n         StringBuilder stackTracesString = new StringBuilder(\"### \" + label);\n \n         if (stackTraceStringArray == null || stackTraceStringArray.length == 0) {\n             stackTracesString.append(\"\\n\\n`-`\");\n         } else {\n             for (int i = 0; i != stackTraceStringArray.length; i++) {\n-                stackTracesString.append(\"\\n\\n\\n#### Stacktrace \").append(i + 1).append(\"\\n\\n```\\n\").append(stackTraceStringArray[i]).append(\"\\n```\");\n+                if(stackTraceStringArray.length > 1)\n+                    stackTracesString.append(\"\\n\\n\\n#### Stacktrace \").append(i + 1);\n+\n+                stackTracesString.append(\"\\n\\n```\\n\").append(stackTraceStringArray[i]).append(\"\\n```\");\n             }\n         }\n \n@@ -250,7 +257,7 @@ public static String getMultiLineLogStringEntry(String label, Object object, Str\n     \n \n \n-    static public void showToast(final Context context, final String toastText, boolean longDuration) {\n+    public static void showToast(final Context context, final String toastText, boolean longDuration) {\n         if (context == null) return;\n \n         new Handler(Looper.getMainLooper()).post(() -> Toast.makeText(context, toastText, longDuration ? Toast.LENGTH_LONG : Toast.LENGTH_SHORT).show());\n@@ -313,7 +320,7 @@ public static int setLogLevel(Context context, int logLevel) {\n         return CURRENT_LOG_LEVEL;\n     }\n \n-    static public String getFullTag(String tag) {\n+    public static String getFullTag(String tag) {\n         if(DEFAULT_LOG_TAG.equals(tag))\n             return tag;\n         else",
    "output": "Fix Logger function modifier order"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/RunCommandService.java b/app/src/main/java/com/termux/app/RunCommandService.java\n--- a/app/src/main/java/com/termux/app/RunCommandService.java\n+++ b/app/src/main/java/com/termux/app/RunCommandService.java\n@@ -302,7 +302,7 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n         runStartForeground();\n \n         ExecutionCommand executionCommand = new ExecutionCommand();\n-        executionCommand.pluginAPIHelp = this.getString(R.string.error_run_command_service_api_help, TermuxConstants.TERMUX_GITHUB_REPO_URL);\n+        executionCommand.pluginAPIHelp = this.getString(R.string.error_run_command_service_api_help, RUN_COMMAND_SERVICE.RUN_COMMAND_API_HELP_URL);\n \n         String errmsg;\n ",
    "output": "Fix RUN_COMMAND Intent plugin api url"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -154,17 +154,8 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n     @Override\n     public void onDestroy() {\n         Logger.logVerbose(LOG_TAG, \"onDestroy\");\n-        File termuxTmpDir = TermuxConstants.TERMUX_TMP_DIR;\n \n-        if (termuxTmpDir.exists()) {\n-            try {\n-                TermuxInstaller.deleteDirectory(termuxTmpDir.getCanonicalFile());\n-            } catch (Exception e) {\n-                Logger.logStackTraceWithMessage(LOG_TAG, \"Error while removing file at \" + termuxTmpDir.getAbsolutePath(), e);\n-            }\n-\n-            termuxTmpDir.mkdirs();\n-        }\n+        ShellUtils.clearTermuxTMPDIR(this);\n \n         actionReleaseWakeLock(false);\n         finishAllTermuxSessions();\n\ndiff --git a/app/src/main/java/com/termux/app/shell/ShellUtils.java b/app/src/main/java/com/termux/app/shell/ShellUtils.java\n--- a/app/src/main/java/com/termux/app/shell/ShellUtils.java\n+++ b/app/src/main/java/com/termux/app/shell/ShellUtils.java\n@@ -3,6 +3,8 @@\n import android.content.Context;\n \n import com.termux.app.TermuxConstants;\n+import com.termux.app.file.FileUtils;\n+import com.termux.app.utils.Logger;\n import com.termux.app.utils.PackageUtils;\n import com.termux.app.utils.TermuxUtils;\n \n@@ -143,4 +145,12 @@ public static String getExecutableBasename(String executable) {\n         return (lastSlash == -1) ? executable : executable.substring(lastSlash + 1);\n     }\n \n+    public static void clearTermuxTMPDIR(Context context) {\n+        String errmsg;\n+        errmsg = FileUtils.clearDirectory(context, \"$TMPDIR\", FileUtils.getCanonicalPath(TermuxConstants.TERMUX_TMP_PREFIX_DIR_PATH, null, false));\n+        if (errmsg != null) {\n+            Logger.logErrorAndShowToast(context, errmsg);\n+        }\n+    }\n+\n }",
    "output": "Use FileUtils for clearing TMPDIR and move clearing function to ShellUtils from TermuxService"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -251,7 +251,7 @@ public void onServiceConnected(ComponentName componentName, IBinder service) {\n \n         if (mTermuxService.isTermuxSessionsEmpty()) {\n             if (mIsVisible) {\n-                TermuxInstaller.setupIfNeeded(TermuxActivity.this, () -> {\n+                TermuxInstaller.setupBootstrapIfNeeded(TermuxActivity.this, () -> {\n                     if (mTermuxService == null) return; // Activity might have been destroyed.\n                     try {\n                         Bundle bundle = getIntent().getExtras();\n\ndiff --git a/app/src/main/java/com/termux/app/TermuxInstaller.java b/app/src/main/java/com/termux/app/TermuxInstaller.java\n--- a/app/src/main/java/com/termux/app/TermuxInstaller.java\n+++ b/app/src/main/java/com/termux/app/TermuxInstaller.java\n@@ -11,13 +11,13 @@\n import android.view.WindowManager;\n \n import com.termux.R;\n+import com.termux.app.file.FileUtils;\n import com.termux.app.utils.Logger;\n \n import java.io.BufferedReader;\n import java.io.ByteArrayInputStream;\n import java.io.File;\n import java.io.FileOutputStream;\n-import java.io.IOException;\n import java.io.InputStreamReader;\n import java.util.ArrayList;\n import java.util.List;\n@@ -32,7 +32,7 @@\n  * <p/>\n  * (2) A progress dialog is shown with \"Installing...\" message and a spinner.\n  * <p/>\n- * (3) A staging directory, $STAGING_PREFIX, is {@link #deleteDirectory(File)} if left over from broken installation below.\n+ * (3) A staging directory, $STAGING_PREFIX, is cleared if left over from broken installation below.\n  * <p/>\n  * (4) The zip file is loaded from a shared library.\n  * <p/>\n@@ -47,10 +47,8 @@ final class TermuxInstaller {\n \n     private static final String LOG_TAG = \"TermuxInstaller\";\n \n-    /** Performs setup if necessary. */\n-    static void setupIfNeeded(final Activity activity, final Runnable whenDone) {\n-        Logger.logInfo(LOG_TAG, \"Installing \" + TermuxConstants.TERMUX_APP_NAME + \" bootstrap packages.\");\n-\n+    /** Performs bootstrap setup if necessary. */\n+    static void setupBootstrapIfNeeded(final Activity activity, final Runnable whenDone) {\n         // Termux can only be run as the primary user (device owner) since only that\n         // account has the expected file system paths. Verify that:\n         UserManager um = (UserManager) activity.getSystemService(Context.USER_SERVICE);\n@@ -63,7 +61,6 @@ static void setupIfNeeded(final Activity activity, final Runnable whenDone) {\n             return;\n         }\n \n-        Logger.logInfo(LOG_TAG, \"Creating prefix directory \\\"\" + TermuxConstants.TERMUX_PREFIX_DIR_PATH + \"\\\".\");\n         final File PREFIX_FILE = TermuxConstants.TERMUX_PREFIX_DIR;\n         if (PREFIX_FILE.isDirectory()) {\n             whenDone.run();\n@@ -75,12 +72,16 @@ static void setupIfNeeded(final Activity activity, final Runnable whenDone) {\n             @Override\n             public void run() {\n                 try {\n+                    Logger.logInfo(LOG_TAG, \"Installing \" + TermuxConstants.TERMUX_APP_NAME + \" bootstrap packages.\");\n+\n+                    String errmsg;\n+\n                     final String STAGING_PREFIX_PATH = TermuxConstants.TERMUX_STAGING_PREFIX_DIR_PATH;\n                     final File STAGING_PREFIX_FILE = new File(STAGING_PREFIX_PATH);\n \n-                    if (STAGING_PREFIX_FILE.exists()) {\n-                        Logger.logInfo(LOG_TAG, \"Deleting prefix staging directory \\\"\" + TermuxConstants.TERMUX_STAGING_PREFIX_DIR_PATH + \"\\\".\");\n-                        deleteDirectory(STAGING_PREFIX_FILE);\n+                    errmsg = FileUtils.clearDirectory(activity, \"prefix staging directory\", STAGING_PREFIX_PATH);\n+                    if (errmsg != null) {\n+                        throw new RuntimeException(errmsg);\n                     }\n \n                     Logger.logInfo(LOG_TAG, \"Extracting bootstrap zip to prefix staging directory \\\"\" + TermuxConstants.TERMUX_STAGING_PREFIX_DIR_PATH + \"\\\".\");\n@@ -103,14 +104,14 @@ public void run() {\n                                     String newPath = STAGING_PREFIX_PATH + \"/\" + parts[1];\n                                     symlinks.add(Pair.create(oldPath, newPath));\n \n-                                    ensureDirectoryExists(new File(newPath).getParentFile());\n+                                    ensureDirectoryExists(activity, new File(newPath).getParentFile());\n                                 }\n                             } else {\n                                 String zipEntryName = zipEntry.getName();\n                                 File targetFile = new File(STAGING_PREFIX_PATH, zipEntryName);\n                                 boolean isDirectory = zipEntry.isDirectory();\n \n-                                ensureDirectoryExists(isDirectory ? targetFile : targetFile.getParentFile());\n+                                ensureDirectoryExists(activity, isDirectory ? targetFile : targetFile.getParentFile());\n \n                                 if (!isDirectory) {\n                                     try (FileOutputStream outStream = new FileOutputStream(targetFile)) {\n@@ -151,7 +152,7 @@ public void run() {\n                                     activity.finish();\n                                 }).setPositiveButton(R.string.bootstrap_error_try_again, (dialog, which) -> {\n                                 dialog.dismiss();\n-                                TermuxInstaller.setupIfNeeded(activity, whenDone);\n+                                TermuxInstaller.setupBootstrapIfNeeded(activity, whenDone);\n                             }).show();\n                         } catch (WindowManager.BadTokenException e1) {\n                             // Activity already dismissed - ignore.\n@@ -170,37 +171,6 @@ public void run() {\n         }.start();\n     }\n \n-    private static void ensureDirectoryExists(File directory) {\n-        if (!directory.isDirectory() && !directory.mkdirs()) {\n-            throw new RuntimeException(\"Unable to create directory: \" + directory.getAbsolutePath());\n-        }\n-    }\n-\n-    public static byte[] loadZipBytes() {\n-        // Only load the shared library when necessary to save memory usage.\n-        System.loadLibrary(\"termux-bootstrap\");\n-        return getZip();\n-    }\n-\n-    public static native byte[] getZip();\n-\n-    /** Delete a directory and all its content or throw. Don't follow symlinks. */\n-    static void deleteDirectory(File fileOrDirectory) throws IOException {\n-        if (fileOrDirectory.getCanonicalPath().equals(fileOrDirectory.getAbsolutePath()) && fileOrDirectory.isDirectory()) {\n-            File[] children = fileOrDirectory.listFiles();\n-\n-            if (children != null) {\n-                for (File child : children) {\n-                    deleteDirectory(child);\n-                }\n-            }\n-        }\n-\n-        if (!fileOrDirectory.delete()) {\n-            throw new RuntimeException(\"Unable to delete \" + (fileOrDirectory.isDirectory() ? \"directory \" : \"file \") + fileOrDirectory.getAbsolutePath());\n-        }\n-    }\n-\n     static void setupStorageSymlinks(final Context context) {\n         final String LOG_TAG = \"termux-storage\";\n \n@@ -209,19 +179,12 @@ static void setupStorageSymlinks(final Context context) {\n         new Thread() {\n             public void run() {\n                 try {\n+                    String errmsg;\n                     File storageDir = TermuxConstants.TERMUX_STORAGE_HOME_DIR;\n \n-                    if (storageDir.exists()) {\n-                        try {\n-                            deleteDirectory(storageDir);\n-                        } catch (IOException e) {\n-                            Logger.logStackTraceWithMessage(LOG_TAG, \"Failed to delete old ~/storage directory\", e);\n-                            return;\n-                        }\n-                    }\n-\n-                    if (!storageDir.mkdirs()) {\n-                        Logger.logError(LOG_TAG, \"Unable to create ~/storage directory.\");\n+                    errmsg = FileUtils.clearDirectory(context, \"~/storage\", storageDir.getAbsolutePath());\n+                    if (errmsg != null) {\n+                        Logger.logErrorAndShowToast(context, LOG_TAG, errmsg);\n                         return;\n                     }\n \n@@ -264,4 +227,21 @@ public void run() {\n         }.start();\n     }\n \n+    private static void ensureDirectoryExists(Context context, File directory) {\n+        String errmsg;\n+\n+        errmsg = FileUtils.createDirectoryFile(context, directory.getAbsolutePath());\n+        if (errmsg != null) {\n+            throw new RuntimeException(errmsg);\n+        }\n+    }\n+\n+    public static byte[] loadZipBytes() {\n+        // Only load the shared library when necessary to save memory usage.\n+        System.loadLibrary(\"termux-bootstrap\");\n+        return getZip();\n+    }\n+\n+    public static native byte[] getZip();\n+\n }",
    "output": "Use FileUtils for bootstrap and shared storage symlinks setup"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -29,7 +29,7 @@\n import com.termux.app.utils.Logger;\n import com.termux.app.utils.NotificationUtils;\n import com.termux.app.utils.PermissionUtils;\n-import com.termux.app.utils.ShellUtils;\n+import com.termux.app.shell.ShellUtils;\n import com.termux.app.utils.DataUtils;\n import com.termux.app.models.ExecutionCommand;\n import com.termux.app.models.ExecutionCommand.ExecutionState;\n\ndiff --git a/app/src/main/java/com/termux/app/shell/ShellUtils.java b/app/src/main/java/com/termux/app/shell/ShellUtils.java\n--- a/app/src/main/java/com/termux/app/shell/ShellUtils.java\n+++ b/app/src/main/java/com/termux/app/shell/ShellUtils.java\n@@ -1,8 +1,10 @@\n-package com.termux.app.utils;\n+package com.termux.app.shell;\n \n import android.content.Context;\n \n import com.termux.app.TermuxConstants;\n+import com.termux.app.utils.PackageUtils;\n+import com.termux.app.utils.TermuxUtils;\n \n import java.io.File;\n import java.io.FileInputStream;\n\ndiff --git a/app/src/main/java/com/termux/app/terminal/TermuxSession.java b/app/src/main/java/com/termux/app/terminal/TermuxSession.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxSession.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxSession.java\n@@ -7,7 +7,7 @@\n import com.termux.app.TermuxService;\n import com.termux.app.utils.Logger;\n import com.termux.app.utils.PluginUtils;\n-import com.termux.app.utils.ShellUtils;\n+import com.termux.app.shell.ShellUtils;\n import com.termux.app.models.ExecutionCommand;\n import com.termux.terminal.TerminalSession;\n \n\ndiff --git a/app/src/main/java/com/termux/app/terminal/TermuxTask.java b/app/src/main/java/com/termux/app/terminal/TermuxTask.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxTask.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxTask.java\n@@ -8,7 +8,7 @@\n import com.termux.app.shell.StreamGobbler;\n import com.termux.app.utils.Logger;\n import com.termux.app.utils.PluginUtils;\n-import com.termux.app.utils.ShellUtils;\n+import com.termux.app.shell.ShellUtils;\n import com.termux.app.models.ExecutionCommand;\n import com.termux.app.models.ExecutionCommand.ExecutionState;\n ",
    "output": "Move ShellUtils to shell package"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/models/ExecutionCommand.java b/app/src/main/java/com/termux/app/models/ExecutionCommand.java\n--- a/app/src/main/java/com/termux/app/models/ExecutionCommand.java\n+++ b/app/src/main/java/com/termux/app/models/ExecutionCommand.java\n@@ -368,7 +368,7 @@ public String getIsPluginExecutionCommandLogString() {\n     }\n \n     public String getSessionActionLogString() {\n-        return getSingleLineLogStringEntry(\"Session Action\", sessionAction, \"-\");\n+        return Logger.getSingleLineLogStringEntry(\"Session Action\", sessionAction, \"-\");\n     }\n \n     public String getPendingIntentCreatorLogString() {\n@@ -379,35 +379,35 @@ public String getPendingIntentCreatorLogString() {\n     }\n \n     public String getCommandDescriptionLogString() {\n-        return getSingleLineLogStringEntry(\"Command Description\", commandDescription, \"-\");\n+        return Logger.getSingleLineLogStringEntry(\"Command Description\", commandDescription, \"-\");\n     }\n \n     public String getCommandHelpLogString() {\n-        return getSingleLineLogStringEntry(\"Command Help\", commandHelp, \"-\");\n+        return Logger.getSingleLineLogStringEntry(\"Command Help\", commandHelp, \"-\");\n     }\n \n     public String getPluginAPIHelpLogString() {\n-        return getSingleLineLogStringEntry(\"Plugin API Help\", pluginAPIHelp, \"-\");\n+        return Logger.getSingleLineLogStringEntry(\"Plugin API Help\", pluginAPIHelp, \"-\");\n     }\n \n     public String getStdoutLogString() {\n-        return getMultiLineLogStringEntry(\"Stdout\", DataUtils.getTruncatedCommandOutput(stdout, DataUtils.LOGGER_ENTRY_SIZE_LIMIT_IN_BYTES / 5, false, false, true), \"-\");\n+        return Logger.getMultiLineLogStringEntry(\"Stdout\", DataUtils.getTruncatedCommandOutput(stdout, Logger.LOGGER_ENTRY_SIZE_LIMIT_IN_BYTES / 5, false, false, true), \"-\");\n     }\n \n     public String getStderrLogString() {\n-        return getMultiLineLogStringEntry(\"Stderr\", DataUtils.getTruncatedCommandOutput(stderr, DataUtils.LOGGER_ENTRY_SIZE_LIMIT_IN_BYTES / 5, false, false, true), \"-\");\n+        return Logger.getMultiLineLogStringEntry(\"Stderr\", DataUtils.getTruncatedCommandOutput(stderr, Logger.LOGGER_ENTRY_SIZE_LIMIT_IN_BYTES / 5, false, false, true), \"-\");\n     }\n \n     public String getExitCodeLogString() {\n-        return getSingleLineLogStringEntry(\"Exit Code\", exitCode, \"-\");\n+        return Logger.getSingleLineLogStringEntry(\"Exit Code\", exitCode, \"-\");\n     }\n \n     public String getErrCodeLogString() {\n-        return getSingleLineLogStringEntry(\"Err Code\", errCode, \"-\");\n+        return Logger.getSingleLineLogStringEntry(\"Err Code\", errCode, \"-\");\n     }\n \n     public String getErrmsgLogString() {\n-        return getMultiLineLogStringEntry(\"Errmsg\", errmsg, \"-\");\n+        return Logger.getMultiLineLogStringEntry(\"Errmsg\", errmsg, \"-\");\n     }\n \n     public String geStackTracesLogString() {\n@@ -475,8 +475,8 @@ public static String getArgumentsLogString(final String[] argumentsArray) {\n         if (argumentsArray != null && argumentsArray.length != 0) {\n             argumentsString.append(\"\\n```\\n\");\n             for (int i = 0; i != argumentsArray.length; i++) {\n-                argumentsString.append(getSingleLineLogStringEntry(\"Arg \" + (i + 1),\n-                    DataUtils.getTruncatedCommandOutput(argumentsArray[i], DataUtils.LOGGER_ENTRY_SIZE_LIMIT_IN_BYTES / 5, true, false, true),\n+                argumentsString.append(Logger.getSingleLineLogStringEntry(\"Arg \" + (i + 1),\n+                    DataUtils.getTruncatedCommandOutput(argumentsArray[i], Logger.LOGGER_ENTRY_SIZE_LIMIT_IN_BYTES / 5, true, false, true),\n                     \"-\")).append(\"`\\n\");\n             }\n             argumentsString.append(\"```\");\n@@ -488,23 +488,6 @@ public static String getArgumentsLogString(final String[] argumentsArray) {\n     }\n \n \n-\n-    public static String getSingleLineLogStringEntry(String label, Object object, String def) {\n-        if (object != null)\n-            return label + \": `\" + object + \"`\";\n-        else\n-            return  label + \": \"  +  def;\n-    }\n-\n-    public static String getMultiLineLogStringEntry( String label, Object object,String def) {\n-        if (object != null)\n-            return label + \":\\n```\\n\" + object + \"\\n```\\n\";\n-        else\n-            return  label + \": \"  +  def;\n-    }\n-\n-\n-\n     public synchronized boolean setState(ExecutionState newState) {\n         // The state transition cannot go back or change if already at {@link ExecutionState#SUCCESS}\n         if(newState.getValue() < currentState.getValue() || currentState == ExecutionState.SUCCESS) {\n\ndiff --git a/app/src/main/java/com/termux/app/utils/DataUtils.java b/app/src/main/java/com/termux/app/utils/DataUtils.java\n--- a/app/src/main/java/com/termux/app/utils/DataUtils.java\n+++ b/app/src/main/java/com/termux/app/utils/DataUtils.java\n@@ -9,7 +9,6 @@\n public class DataUtils {\n \n     public static final int TRANSACTION_SIZE_LIMIT_IN_BYTES = 100 * 1024; // 100KB\n-    public static final int LOGGER_ENTRY_SIZE_LIMIT_IN_BYTES = 4 * 1024; // 4KB\n \n     public static String getTruncatedCommandOutput(String text, int maxLength, boolean fromEnd, boolean onNewline, boolean addPrefix) {\n         if(text == null) return null;\n\ndiff --git a/app/src/main/java/com/termux/app/utils/Logger.java b/app/src/main/java/com/termux/app/utils/Logger.java\n--- a/app/src/main/java/com/termux/app/utils/Logger.java\n+++ b/app/src/main/java/com/termux/app/utils/Logger.java\n@@ -25,9 +25,12 @@ public class Logger {\n     public static final int LOG_LEVEL_VERBOSE = 3; // start logging verbose messages\n \n     public static final int DEFAULT_LOG_LEVEL = LOG_LEVEL_NORMAL;\n-\n     private static int CURRENT_LOG_LEVEL = DEFAULT_LOG_LEVEL;\n \n+    public static final int LOGGER_ENTRY_SIZE_LIMIT_IN_BYTES = 4 * 1024; // 4KB\n+\n+\n+\n     static public void logMesssage(int logLevel, String tag, String message) {\n         if(logLevel == Log.ERROR && CURRENT_LOG_LEVEL >= LOG_LEVEL_NORMAL)\n             Log.e(getFullTag(tag), message);\n@@ -230,6 +233,20 @@ public static String getStackTracesMarkdownString(String label, String[] stackTr\n \n         return stackTracesString.toString();\n     }\n+\n+    public static String getSingleLineLogStringEntry(String label, Object object, String def) {\n+        if (object != null)\n+            return label + \": `\" + object + \"`\";\n+        else\n+            return  label + \": \"  +  def;\n+    }\n+\n+    public static String getMultiLineLogStringEntry(String label, Object object, String def) {\n+        if (object != null)\n+            return label + \":\\n```\\n\" + object + \"\\n```\\n\";\n+        else\n+            return  label + \": \"  +  def;\n+    }\n     \n \n ",
    "output": "Move get*LogStringEntry() functions to logger class"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/shell/StreamGobbler.java b/app/src/main/java/com/termux/app/shell/StreamGobbler.java\n--- a/app/src/main/java/com/termux/app/shell/StreamGobbler.java\n+++ b/app/src/main/java/com/termux/app/shell/StreamGobbler.java\n@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package com.termux.app.terminal;\n+package com.termux.app.shell;\n \n import java.io.BufferedReader;\n import java.io.IOException;\n\ndiff --git a/app/src/main/java/com/termux/app/terminal/TermuxTask.java b/app/src/main/java/com/termux/app/terminal/TermuxTask.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxTask.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxTask.java\n@@ -5,6 +5,7 @@\n import com.termux.R;\n import com.termux.app.TermuxConstants;\n import com.termux.app.TermuxService;\n+import com.termux.app.shell.StreamGobbler;\n import com.termux.app.utils.Logger;\n import com.termux.app.utils.PluginUtils;\n import com.termux.app.utils.ShellUtils;",
    "output": "Move StreamGobbler to shell package"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/terminal/TermuxSession.java b/app/src/main/java/com/termux/app/terminal/TermuxSession.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxSession.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxSession.java\n@@ -33,7 +33,7 @@ private TermuxSession(TerminalSession terminalSession, ExecutionCommand executio\n     public static TermuxSession create(@NonNull final TermuxService service, @NonNull ExecutionCommand executionCommand, @NonNull TermuxSessionClientBase termuxSessionClient, String sessionName) {\n         if (executionCommand.workingDirectory == null || executionCommand.workingDirectory.isEmpty()) executionCommand.workingDirectory = TermuxConstants.TERMUX_HOME_DIR_PATH;\n \n-        String[] environment = ShellUtils.buildEnvironment(executionCommand.isFailsafe, executionCommand.workingDirectory);\n+        String[] environment = ShellUtils.buildEnvironment(service, executionCommand.isFailsafe, executionCommand.workingDirectory);\n \n         boolean isLoginShell = false;\n         if (executionCommand.executable == null) {\n\ndiff --git a/app/src/main/java/com/termux/app/terminal/TermuxTask.java b/app/src/main/java/com/termux/app/terminal/TermuxTask.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxTask.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxTask.java\n@@ -34,7 +34,7 @@ private TermuxTask(Process process, ExecutionCommand executionCommand) {\n     public static TermuxTask create(@NonNull final TermuxService service, @NonNull ExecutionCommand executionCommand) {\n         if (executionCommand.workingDirectory == null || executionCommand.workingDirectory.isEmpty()) executionCommand.workingDirectory = TermuxConstants.TERMUX_HOME_DIR_PATH;\n \n-        String[] env = ShellUtils.buildEnvironment(false, executionCommand.workingDirectory);\n+        String[] env = ShellUtils.buildEnvironment(service, false, executionCommand.workingDirectory);\n \n         final String[] commandArray = ShellUtils.setupProcessArgs(executionCommand.executable, executionCommand.arguments);\n         // final String commandDescription = Arrays.toString(commandArray);\n\ndiff --git a/app/src/main/java/com/termux/app/utils/ShellUtils.java b/app/src/main/java/com/termux/app/utils/ShellUtils.java\n--- a/app/src/main/java/com/termux/app/utils/ShellUtils.java\n+++ b/app/src/main/java/com/termux/app/utils/ShellUtils.java\n@@ -1,6 +1,7 @@\n package com.termux.app.utils;\n \n-import com.termux.BuildConfig;\n+import android.content.Context;\n+\n import com.termux.app.TermuxConstants;\n \n import java.io.File;\n@@ -13,14 +14,21 @@\n \n public class ShellUtils {\n \n-    public static String[] buildEnvironment(boolean isFailSafe, String workingDirectory) {\n+    public static String[] buildEnvironment(Context currentPackageContext, boolean isFailSafe, String workingDirectory) {\n         TermuxConstants.TERMUX_HOME_DIR.mkdirs();\n \n         if (workingDirectory == null || workingDirectory.isEmpty()) workingDirectory = TermuxConstants.TERMUX_HOME_DIR_PATH;\n \n         List<String> environment = new ArrayList<>();\n \n-        environment.add(\"TERMUX_VERSION=\" + BuildConfig.VERSION_NAME);\n+        // This function may be called by a different package like a plugin, so we get version for Termux package via its context\n+        Context termuxPackageContext = TermuxUtils.getTermuxPackageContext(currentPackageContext);\n+        if(termuxPackageContext != null) {\n+            String termuxVersionName = PackageUtils.getVersionNameForPackage(termuxPackageContext);\n+            if(termuxVersionName != null)\n+                environment.add(\"TERMUX_VERSION=\" + termuxVersionName);\n+        }\n+\n         environment.add(\"TERM=xterm-256color\");\n         environment.add(\"COLORTERM=truecolor\");\n         environment.add(\"HOME=\" + TermuxConstants.TERMUX_HOME_DIR_PATH);",
    "output": "Get TERMUX_VERSION while building shell environment via Termux package context"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/RunCommandService.java b/app/src/main/java/com/termux/app/RunCommandService.java\n--- a/app/src/main/java/com/termux/app/RunCommandService.java\n+++ b/app/src/main/java/com/termux/app/RunCommandService.java\n@@ -19,7 +19,7 @@\n import com.termux.app.utils.NotificationUtils;\n import com.termux.app.utils.PluginUtils;\n import com.termux.app.utils.TextDataUtils;\n-import com.termux.models.ExecutionCommand;\n+import com.termux.app.models.ExecutionCommand;\n \n /**\n  * Third-party apps that are not part of termux world can run commands in termux context by either\n\ndiff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -31,8 +31,8 @@\n import com.termux.app.utils.PermissionUtils;\n import com.termux.app.utils.ShellUtils;\n import com.termux.app.utils.TextDataUtils;\n-import com.termux.models.ExecutionCommand;\n-import com.termux.models.ExecutionCommand.ExecutionState;\n+import com.termux.app.models.ExecutionCommand;\n+import com.termux.app.models.ExecutionCommand.ExecutionState;\n import com.termux.app.terminal.TermuxTask;\n import com.termux.terminal.TerminalEmulator;\n import com.termux.terminal.TerminalSession;\n\ndiff --git a/app/src/main/java/com/termux/app/activities/ReportActivity.java b/app/src/main/java/com/termux/app/activities/ReportActivity.java\n--- a/app/src/main/java/com/termux/app/activities/ReportActivity.java\n+++ b/app/src/main/java/com/termux/app/activities/ReportActivity.java\n@@ -19,7 +19,7 @@\n import com.termux.app.utils.MarkdownUtils;\n import com.termux.app.utils.ShareUtils;\n import com.termux.app.utils.TermuxUtils;\n-import com.termux.models.ReportInfo;\n+import com.termux.app.models.ReportInfo;\n \n import org.commonmark.node.FencedCodeBlock;\n \n\ndiff --git a/app/src/main/java/com/termux/app/models/ExecutionCommand.java b/app/src/main/java/com/termux/app/models/ExecutionCommand.java\n--- a/app/src/main/java/com/termux/app/models/ExecutionCommand.java\n+++ b/app/src/main/java/com/termux/app/models/ExecutionCommand.java\n@@ -1,4 +1,4 @@\n-package com.termux.models;\n+package com.termux.app.models;\n \n import android.app.Activity;\n import android.app.PendingIntent;\n\ndiff --git a/app/src/main/java/com/termux/app/models/ReportInfo.java b/app/src/main/java/com/termux/app/models/ReportInfo.java\n--- a/app/src/main/java/com/termux/app/models/ReportInfo.java\n+++ b/app/src/main/java/com/termux/app/models/ReportInfo.java\n@@ -1,4 +1,4 @@\n-package com.termux.models;\n+package com.termux.app.models;\n \n import java.io.Serializable;\n \n\ndiff --git a/app/src/main/java/com/termux/app/models/UserAction.java b/app/src/main/java/com/termux/app/models/UserAction.java\n--- a/app/src/main/java/com/termux/app/models/UserAction.java\n+++ b/app/src/main/java/com/termux/app/models/UserAction.java\n@@ -1,4 +1,4 @@\n-package com.termux.models;\n+package com.termux.app.models;\n \n public enum UserAction {\n \n\ndiff --git a/app/src/main/java/com/termux/app/terminal/TermuxSession.java b/app/src/main/java/com/termux/app/terminal/TermuxSession.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxSession.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxSession.java\n@@ -8,7 +8,7 @@\n import com.termux.app.utils.Logger;\n import com.termux.app.utils.PluginUtils;\n import com.termux.app.utils.ShellUtils;\n-import com.termux.models.ExecutionCommand;\n+import com.termux.app.models.ExecutionCommand;\n import com.termux.terminal.TerminalSession;\n \n import java.io.File;\n\ndiff --git a/app/src/main/java/com/termux/app/terminal/TermuxTask.java b/app/src/main/java/com/termux/app/terminal/TermuxTask.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxTask.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxTask.java\n@@ -8,8 +8,8 @@\n import com.termux.app.utils.Logger;\n import com.termux.app.utils.PluginUtils;\n import com.termux.app.utils.ShellUtils;\n-import com.termux.models.ExecutionCommand;\n-import com.termux.models.ExecutionCommand.ExecutionState;\n+import com.termux.app.models.ExecutionCommand;\n+import com.termux.app.models.ExecutionCommand.ExecutionState;\n \n import java.io.File;\n import java.io.IOException;\n\ndiff --git a/app/src/main/java/com/termux/app/utils/PluginUtils.java b/app/src/main/java/com/termux/app/utils/PluginUtils.java\n--- a/app/src/main/java/com/termux/app/utils/PluginUtils.java\n+++ b/app/src/main/java/com/termux/app/utils/PluginUtils.java\n@@ -18,9 +18,9 @@\n import com.termux.app.settings.preferences.TermuxPreferenceConstants.TERMUX_APP;\n import com.termux.app.settings.properties.SharedProperties;\n import com.termux.app.settings.properties.TermuxPropertyConstants;\n-import com.termux.models.ReportInfo;\n-import com.termux.models.ExecutionCommand;\n-import com.termux.models.UserAction;\n+import com.termux.app.models.ReportInfo;\n+import com.termux.app.models.ExecutionCommand;\n+import com.termux.app.models.UserAction;\n \n public class PluginUtils {\n ",
    "output": "Move com.termux.models to com.termux.app.models package"
  },
  {
    "input": "diff --git a/terminal-emulator/src/test/java/com/termux/terminal/TerminalTestCase.java b/terminal-emulator/src/test/java/com/termux/terminal/TerminalTestCase.java\n--- a/terminal-emulator/src/test/java/com/termux/terminal/TerminalTestCase.java\n+++ b/terminal-emulator/src/test/java/com/termux/terminal/TerminalTestCase.java\n@@ -103,7 +103,8 @@ protected void setUp() throws Exception {\n \t}\n \n \tprotected TerminalTestCase withTerminalSized(int columns, int rows) {\n-\t\tmTerminal = new TerminalEmulator(mOutput, columns, rows, rows * 2);\n+\t    // The tests aren't currently using the client, so a null client will suffice, a dummy client should be implemented if needed\n+\t\tmTerminal = new TerminalEmulator(mOutput, columns, rows, rows * 2, null);\n \t\treturn this;\n \t}\n ",
    "output": "Fix terminal-emulator constructor used in tests"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/activities/ReportActivity.java b/app/src/main/java/com/termux/app/activities/ReportActivity.java\n--- a/app/src/main/java/com/termux/app/activities/ReportActivity.java\n+++ b/app/src/main/java/com/termux/app/activities/ReportActivity.java\n@@ -92,7 +92,7 @@ private void updateUI(Bundle bundle) {\n         final Markwon markwon = MarkdownUtils.getRecyclerMarkwonBuilder(this);\n \n         final MarkwonAdapter adapter = MarkwonAdapter.builderTextViewIsRoot(R.layout.activity_report_adapter_node_default)\n-            .include(FencedCodeBlock.class, SimpleEntry.create(R.layout.activity_report_adapter_node_code_block, R.id.text_view))\n+            .include(FencedCodeBlock.class, SimpleEntry.create(R.layout.activity_report_adapter_node_code_block, R.id.code_text_view))\n             .build();\n \n         recyclerView.setLayoutManager(new LinearLayoutManager(this));",
    "output": "Disable markdown text selection for now since it stops URL clicks from working"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/RunCommandService.java b/app/src/main/java/com/termux/app/RunCommandService.java\n--- a/app/src/main/java/com/termux/app/RunCommandService.java\n+++ b/app/src/main/java/com/termux/app/RunCommandService.java\n@@ -301,7 +301,7 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n         runStartForeground();\n \n         ExecutionCommand executionCommand = new ExecutionCommand();\n-        executionCommand.pluginAPIHelp = this.getString(R.string.error_run_command_service_api_help);\n+        executionCommand.pluginAPIHelp = this.getString(R.string.error_run_command_service_api_help, TermuxConstants.TERMUX_GITHUB_REPO_URL);\n \n         String errmsg;\n \n\ndiff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -584,7 +584,7 @@ private void showStylingDialog() {\n             // The startActivity() call is not documented to throw IllegalArgumentException.\n             // However, crash reporting shows that it sometimes does, so catch it here.\n             new AlertDialog.Builder(this).setMessage(getString(R.string.error_styling_not_installed))\n-                .setPositiveButton(R.string.action_styling_install, (dialog, which) -> startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(\"https://f-droid.org/en/packages/\" + TermuxConstants.TERMUX_STYLING_PACKAGE_NAME + \" /\")))).setNegativeButton(android.R.string.cancel, null).show();\n+                .setPositiveButton(R.string.action_styling_install, (dialog, which) -> startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(TermuxConstants.TERMUX_STYLING_FDROID_PACKAGE_URL)))).setNegativeButton(android.R.string.cancel, null).show();\n         }\n     }\n     private void toggleKeepScreenOn() {",
    "output": "Use TermuxConstants for getting urls instead of using hardcoded strings"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/terminal/TermuxSessionClient.java b/app/src/main/java/com/termux/app/terminal/TermuxSessionClient.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxSessionClient.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxSessionClient.java\n@@ -283,8 +283,6 @@ public void checkAndScrollToSession(TerminalSession session) {\n         termuxSessionsListView.setItemChecked(indexOfSession, true);\n         // Delay is necessary otherwise sometimes scroll to newly added session does not happen\n         termuxSessionsListView.postDelayed(() -> termuxSessionsListView.smoothScrollToPosition(indexOfSession), 1000);\n-\n-        Logger.logError(\"scrolled to \" + indexOfSession);\n     }\n \n ",
    "output": "Remove leftover log entry from TermuxSessionClient"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -405,15 +405,20 @@ private void setNewSessionButtonView() {\n \n     private void setToggleKeyboardView() {\n         findViewById(R.id.toggle_keyboard_button).setOnClickListener(v -> {\n-            InputMethodManager imm = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);\n-            imm.toggleSoftInput(InputMethodManager.SHOW_IMPLICIT, 0);\n+            InputMethodManager inputMethodManager = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);\n+            inputMethodManager.toggleSoftInput(InputMethodManager.SHOW_IMPLICIT, 0);\n             getDrawer().closeDrawers();\n         });\n \n         findViewById(R.id.toggle_keyboard_button).setOnLongClickListener(v -> {\n             toggleTerminalToolbar();\n             return true;\n         });\n+\n+        // If soft keyboard is to be hidden on startup\n+        if(mProperties.shouldSoftKeyboardBeHiddenOnStartup()) {\n+            getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN);\n+        }\n     }\n \n \n\ndiff --git a/app/src/main/java/com/termux/app/settings/properties/TermuxPropertyConstants.java b/app/src/main/java/com/termux/app/settings/properties/TermuxPropertyConstants.java\n--- a/app/src/main/java/com/termux/app/settings/properties/TermuxPropertyConstants.java\n+++ b/app/src/main/java/com/termux/app/settings/properties/TermuxPropertyConstants.java\n@@ -10,23 +10,26 @@\n import java.util.Set;\n \n /*\n- * Version: v0.4.0\n+ * Version: v0.5.0\n  *\n  * Changelog\n  *\n  * - 0.1.0 (2021-03-11)\n  *      - Initial Release.\n  *\n  * - 0.2.0 (2021-03-11)\n- *      - Renamed `HOME_PATH` to `TERMUX_HOME_DIR_PATH`\n- *      - Renamed `TERMUX_PROPERTIES_PRIMARY_PATH` to `TERMUX_PROPERTIES_PRIMARY_FILE_PATH`\n- *      - Renamed `TERMUX_PROPERTIES_SECONDARY_FILE_PATH` to `TERMUX_PROPERTIES_SECONDARY_FILE_PATH`\n+ *      - Renamed `HOME_PATH` to `TERMUX_HOME_DIR_PATH`.\n+ *      - Renamed `TERMUX_PROPERTIES_PRIMARY_PATH` to `TERMUX_PROPERTIES_PRIMARY_FILE_PATH`.\n+ *      - Renamed `TERMUX_PROPERTIES_SECONDARY_FILE_PATH` to `TERMUX_PROPERTIES_SECONDARY_FILE_PATH`.\n  *\n  * - 0.3.0 (2021-03-16)\n- *      - Add `*TERMINAL_TOOLBAR_HEIGHT_SCALE_FACTOR*`\n+ *      - Add `*TERMINAL_TOOLBAR_HEIGHT_SCALE_FACTOR*`.\n  *\n  * - 0.4.0 (2021-03-16)\n  *      - Removed `MAP_GENERIC_BOOLEAN` and `MAP_GENERIC_INVERTED_BOOLEAN`.\n+ *\n+ * - 0.5.0 (2021-03-25)\n+ *      - Add `KEY_HIDE_SOFT_KEYBOARD_ON_STARTUP`.\n  */\n \n /**\n@@ -55,6 +58,11 @@ public final class TermuxPropertyConstants {\n \n \n \n+    /** Defines the key for whether to hide soft keyboard when termux app is started */\n+    public static final String KEY_HIDE_SOFT_KEYBOARD_ON_STARTUP =  \"hide-soft-keyboard-on-startup\"; // Default: \"hide-soft-keyboard-on-startup\"\n+\n+\n+\n     /** Defines the key for whether to use black UI */\n     public static final String KEY_USE_BLACK_UI =  \"use-black-ui\"; // Default: \"use-black-ui\"\n \n@@ -163,6 +171,7 @@ public final class TermuxPropertyConstants {\n     public static final Set<String> TERMUX_PROPERTIES_LIST = new HashSet<>(Arrays.asList(\n         // boolean\n         KEY_ENFORCE_CHAR_BASED_INPUT,\n+        KEY_HIDE_SOFT_KEYBOARD_ON_STARTUP,\n         KEY_USE_BACK_KEY_AS_ESCAPE_KEY,\n         KEY_USE_BLACK_UI,\n         KEY_USE_CTRL_SPACE_WORKAROUND,\n@@ -196,6 +205,7 @@ public final class TermuxPropertyConstants {\n      * */\n     public static final Set<String> TERMUX_DEFAULT_BOOLEAN_BEHAVIOUR_PROPERTIES_LIST = new HashSet<>(Arrays.asList(\n         KEY_ENFORCE_CHAR_BASED_INPUT,\n+        KEY_HIDE_SOFT_KEYBOARD_ON_STARTUP,\n         KEY_USE_CTRL_SPACE_WORKAROUND,\n         KEY_USE_FULLSCREEN,\n         KEY_USE_FULLSCREEN_WORKAROUND,\n\ndiff --git a/app/src/main/java/com/termux/app/settings/properties/TermuxSharedProperties.java b/app/src/main/java/com/termux/app/settings/properties/TermuxSharedProperties.java\n--- a/app/src/main/java/com/termux/app/settings/properties/TermuxSharedProperties.java\n+++ b/app/src/main/java/com/termux/app/settings/properties/TermuxSharedProperties.java\n@@ -437,6 +437,10 @@ public boolean isEnforcingCharBasedInput() {\n         return (boolean) getInternalPropertyValue(TermuxPropertyConstants.KEY_ENFORCE_CHAR_BASED_INPUT, true);\n     }\n \n+    public boolean shouldSoftKeyboardBeHiddenOnStartup() {\n+        return (boolean) getInternalPropertyValue(TermuxPropertyConstants.KEY_HIDE_SOFT_KEYBOARD_ON_STARTUP, true);\n+    }\n+\n     public boolean isBackKeyTheEscapeKey() {\n         return (boolean) getInternalPropertyValue(TermuxPropertyConstants.KEY_USE_BACK_KEY_AS_ESCAPE_KEY, true);\n     }",
    "output": "Add hide-soft-keyboard-on-startup property\n\nIf its set to `true` in termux.properties file, then soft keyboard will automatically be hidden on Termux App start to solve issues for when users use hardware keyboard and soft keyboard is automatically opened and wastes terminal screen space.\n\nThe `TermuxPropertyConstants` classes has been updated to `v0.5.0`. Check its Changelog sections for info on changes.\n\nFixes #1978"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -28,6 +28,7 @@\n import com.termux.app.terminal.TermuxSessionClientBase;\n import com.termux.app.utils.Logger;\n import com.termux.app.utils.NotificationUtils;\n+import com.termux.app.utils.PermissionUtils;\n import com.termux.app.utils.ShellUtils;\n import com.termux.app.utils.TextDataUtils;\n import com.termux.models.ExecutionCommand;\n@@ -513,7 +514,12 @@ private void handleSessionAction(int sessionAction, TerminalSession newTerminalS\n \n     /** Launch the {@link }TermuxActivity} to bring it to foreground. */\n     private void startTermuxActivity() {\n-        TermuxActivity.startTermuxActivity(this);\n+        // For android >= 10, apps require Display over other apps permission to start foreground activities\n+        // from background (services). If it is not granted, then termux sessions that are started will\n+        // show in Termux notification but will not run until user manually clicks the notification.\n+        if(PermissionUtils.validateDisplayOverOtherAppsPermissionForPostAndroid10(this)) {\n+            TermuxActivity.startTermuxActivity(this);\n+        }\n     }\n \n \n\ndiff --git a/app/src/main/java/com/termux/app/utils/PermissionUtils.java b/app/src/main/java/com/termux/app/utils/PermissionUtils.java\n--- a/app/src/main/java/com/termux/app/utils/PermissionUtils.java\n+++ b/app/src/main/java/com/termux/app/utils/PermissionUtils.java\n@@ -0,0 +1,86 @@\n+package com.termux.app.utils;\n+\n+import android.app.Activity;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.content.pm.PackageManager;\n+import android.net.Uri;\n+import android.os.Build;\n+import android.provider.Settings;\n+\n+import androidx.core.content.ContextCompat;\n+\n+import com.termux.R;\n+import com.termux.app.TermuxConstants;\n+import com.termux.app.settings.preferences.TermuxAppSharedPreferences;\n+\n+import java.util.Arrays;\n+\n+public class PermissionUtils {\n+\n+    public static final int ACTION_MANAGE_OVERLAY_PERMISSION_REQUEST_CODE = 0;\n+\n+    private static final String LOG_TAG = \"PluginUtils\";\n+\n+    public static boolean checkPermissions(Context context, String[] permissions) {\n+        int result;\n+\n+        for (String p:permissions) {\n+            result = ContextCompat.checkSelfPermission(context,p);\n+            if (result != PackageManager.PERMISSION_GRANTED) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    public static void askPermissions(Activity context, String[] permissions) {\n+        if(context == null || permissions == null) return;\n+\n+        int result;\n+        Logger.showToast(context, context.getString(R.string.message_sudo_please_grant_permissions), true);\n+        try {Thread.sleep(1000);} catch (InterruptedException e) {e.printStackTrace();}\n+\n+        for (String permission:permissions) {\n+            result = ContextCompat.checkSelfPermission(context, permission);\n+            if (result != PackageManager.PERMISSION_GRANTED) {\n+                Logger.logDebug(LOG_TAG, \"Requesting Permissions: \" + Arrays.toString(permissions));\n+                context.requestPermissions(new String[]{permission}, 0);\n+            }\n+        }\n+    }\n+\n+\n+\n+    public static boolean checkDisplayOverOtherAppsPermission(Context context) {\n+        boolean permissionGranted;\n+\n+        permissionGranted = Settings.canDrawOverlays(context);\n+        if (!permissionGranted) {\n+            Logger.logWarn(LOG_TAG, TermuxConstants.TERMUX_APP_NAME + \" App does not have Display over other apps (SYSTEM_ALERT_WINDOW) permission\");\n+            return false;\n+        } else {\n+            Logger.logDebug(LOG_TAG, TermuxConstants.TERMUX_APP_NAME + \" App already has Display over other apps (SYSTEM_ALERT_WINDOW) permission\");\n+            return true;\n+        }\n+    }\n+\n+    public static void askDisplayOverOtherAppsPermission(Activity context) {\n+        Intent intent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION, Uri.parse(\"package:\" + context.getPackageName()));\n+        context.startActivityForResult(intent, ACTION_MANAGE_OVERLAY_PERMISSION_REQUEST_CODE);\n+    }\n+\n+    public static boolean validateDisplayOverOtherAppsPermissionForPostAndroid10(Context context) {\n+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q) return true;\n+        \n+        if(!PermissionUtils.checkDisplayOverOtherAppsPermission(context)) {\n+            TermuxAppSharedPreferences preferences = new TermuxAppSharedPreferences(context);\n+            if(preferences.getPluginErrorNotificationsEnabled())\n+                Logger.showToast(context, context.getString(R.string.error_display_over_other_apps_permission_not_granted), true);\n+            return false;\n+        } else {\n+            return true;\n+        }\n+    }\n+\n+}",
    "output": "Warn users if Draw over other apps permission is missing\n\nFor android version >= 10(Q), a flash will be shown to users requesting them to grant the permission if they attempt to start a foreground terminal session command from background, like with the RUN_COMMAND intent. The flash will only be shown if \"Plugin Error Notifications\" toggle is enabled in settings."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/models/ExecutionCommand.java b/app/src/main/java/com/termux/models/ExecutionCommand.java\n--- a/app/src/main/java/com/termux/models/ExecutionCommand.java\n+++ b/app/src/main/java/com/termux/models/ExecutionCommand.java\n@@ -446,7 +446,7 @@ public static String getArgumentsMarkdownString(String[] argumentsArray) {\n                 argumentsString.append(MarkdownUtils.getMultiLineMarkdownStringEntry(\"Arg \" + (i + 1), argumentsArray[i], \"-\")).append(\"\\n\");\n             }\n         } else{\n-            argumentsString.append(\" -\");\n+            argumentsString.append(\" -  \");\n         }\n \n         return argumentsString.toString();",
    "output": "Fix unintentional wordwrap of ExecutionCommand arguments markdown"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/RunCommandService.java b/app/src/main/java/com/termux/app/RunCommandService.java\n--- a/app/src/main/java/com/termux/app/RunCommandService.java\n+++ b/app/src/main/java/com/termux/app/RunCommandService.java\n@@ -210,6 +210,8 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n         if(!executionCommand.setState(ExecutionState.PRE_EXECUTION))\n             return Service.START_NOT_STICKY;\n \n+\n+\n         // If \"allow-external-apps\" property to not set to \"true\", then just return\n         errmsg = PluginUtils.checkIfRunCommandServiceAllowExternalAppsPolicyIsViolated(this);\n         if (errmsg != null) {\n@@ -218,6 +220,16 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n             return Service.START_NOT_STICKY;\n         }\n \n+\n+\n+        // If executable is null or empty, then exit here instead of getting canonical path which would expand to \"/\"\n+        if (executionCommand.executable == null || executionCommand.executable.isEmpty()) {\n+            errmsg  = this.getString(R.string.error_run_command_service_mandatory_extra_missing, RUN_COMMAND_SERVICE.EXTRA_COMMAND_PATH);\n+            executionCommand.setStateFailed(ExecutionCommand.RESULT_CODE_FAILED, errmsg, null);\n+            PluginUtils.processPluginExecutionCommandError(this, LOG_TAG, executionCommand);\n+            return Service.START_NOT_STICKY;\n+        }\n+\n         // Get canonical path of executable\n         executionCommand.executable = FileUtils.getCanonicalPath(executionCommand.executable, null, true);\n \n@@ -233,6 +245,8 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n             return Service.START_NOT_STICKY;\n         }\n \n+\n+\n         // If workingDirectory is not null or empty\n         if (executionCommand.workingDirectory != null && !executionCommand.workingDirectory.isEmpty()) {\n             // Get canonical path of workingDirectory\n@@ -255,6 +269,8 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n             }\n         }\n \n+\n+\n         executionCommand.executableUri = new Uri.Builder().scheme(TERMUX_SERVICE.URI_SCHEME_SERVICE_EXECUTE).path(FileUtils.getExpandedTermuxPath(executionCommand.executable)).build();\n \n         Logger.logVerbose(LOG_TAG, executionCommand.toString());",
    "output": "Provide better errmsg if executable passed to RunCommandService is null or empty\n\nPreviously, the null or empty executable would be expanded to the literal root \"/\" string path by FileUtils.getCanonicalPath and then FileUtils.validateRegularFileExistenceAndPermissions() validation would fail since path will not be a regular file. So a user will be shown that \"/\" is not a regular file. Now we show that executable was not even passed."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/terminal/TermuxViewClient.java b/app/src/main/java/com/termux/app/terminal/TermuxViewClient.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxViewClient.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxViewClient.java\n@@ -336,12 +336,13 @@ public void shareSessionTranscript() {\n         if (session == null) return;\n \n         String transcriptText = session.getEmulator().getScreen().getTranscriptTextWithoutJoinedLines().trim();\n+        if (transcriptText == null) return;\n \n         try {\n             // See https://github.com/termux/termux-app/issues/1166.\n             Intent intent = new Intent(Intent.ACTION_SEND);\n             intent.setType(\"text/plain\");\n-            transcriptText = TextDataUtils.getTruncatedCommandOutput(transcriptText, 100_000);\n+            transcriptText = TextDataUtils.getTruncatedCommandOutput(transcriptText, TextDataUtils.TRANSACTION_SIZE_LIMIT_IN_BYTES, false, true, false).trim();\n             intent.putExtra(Intent.EXTRA_TEXT, transcriptText);\n             intent.putExtra(Intent.EXTRA_SUBJECT, mActivity.getString(R.string.title_share_transcript));\n             mActivity.startActivity(Intent.createChooser(intent, mActivity.getString(R.string.title_share_transcript_with)));\n\ndiff --git a/app/src/main/java/com/termux/app/utils/TextDataUtils.java b/app/src/main/java/com/termux/app/utils/TextDataUtils.java\n--- a/app/src/main/java/com/termux/app/utils/TextDataUtils.java\n+++ b/app/src/main/java/com/termux/app/utils/TextDataUtils.java\n@@ -8,18 +8,36 @@\n \n public class TextDataUtils {\n \n-    // https://cs.android.com/androidx/platform/frameworks/support/+/androidx-main:media2/media2-session/src/main/java/androidx/media2/session/MediaUtils.java\n-    public static final int TRANSACTION_SIZE_LIMIT_IN_BYTES = 256 * 1024; // 256KB\n+    public static final int TRANSACTION_SIZE_LIMIT_IN_BYTES = 100 * 1024; // 100KB\n+    public static final int LOGGER_ENTRY_SIZE_LIMIT_IN_BYTES = 4 * 1024; // 4KB\n \n-    public static String getTruncatedCommandOutput(String text, int maxLength) {\n-        if (text.length() > maxLength) {\n+    public static String getTruncatedCommandOutput(String text, int maxLength, boolean fromEnd, boolean onNewline, boolean addPrefix) {\n+        if(text == null) return null;\n+\n+        String prefix = \"(truncated) \";\n+\n+        if(addPrefix)\n+            maxLength = maxLength - prefix.length();\n+\n+        if(maxLength < 0 || text.length() < maxLength) return text;\n+\n+        if (fromEnd) {\n+            text = text.substring(0, Math.min(text.length(), maxLength));\n+        } else {\n             int cutOffIndex = text.length() - maxLength;\n-            int nextNewlineIndex = text.indexOf('\\n', cutOffIndex);\n-            if (nextNewlineIndex != -1 && nextNewlineIndex != text.length() - 1) {\n-                cutOffIndex = nextNewlineIndex + 1;\n+\n+            if(onNewline) {\n+                int nextNewlineIndex = text.indexOf('\\n', cutOffIndex);\n+                if (nextNewlineIndex != -1 && nextNewlineIndex != text.length() - 1) {\n+                    cutOffIndex = nextNewlineIndex + 1;\n+                }\n             }\n-            text = text.substring(cutOffIndex).trim();\n+            text = text.substring(cutOffIndex);\n         }\n+\n+        if(addPrefix)\n+            text = prefix + text;\n+\n         return text;\n     }\n ",
    "output": "Update TextDataUtils.getTruncatedCommandOutput() to support truncation from start or end and for (truncated) prefix"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxConstants.java b/app/src/main/java/com/termux/app/TermuxConstants.java\n--- a/app/src/main/java/com/termux/app/TermuxConstants.java\n+++ b/app/src/main/java/com/termux/app/TermuxConstants.java\n@@ -5,7 +5,7 @@\n import java.io.File;\n \n /*\n- * Version: v0.11.0\n+ * Version: v0.12.0\n  *\n  * Changelog\n  *\n@@ -76,6 +76,11 @@\n  *      - Added following to `RUN_COMMAND_SERVICE`:\n  *          `EXTRA_COMMAND_LABEL`, `EXTRA_COMMAND_DESCRIPTION`, `EXTRA_COMMAND_HELP`.\n  *      - Updated `RESULT_BUNDLE` related extras with `PLUGIN_RESULT_BUNDLE` prefixes.\n+ *\n+ * - 0.12.0 (2021-03-25)\n+ *      - Added following to `TERMUX_SERVICE`:\n+ *          `EXTRA_PLUGIN_RESULT_BUNDLE_STDOUT_ORIGINAL_LENGTH`,\n+ *          `EXTRA_PLUGIN_RESULT_BUNDLE_STDERR_ORIGINAL_LENGTH`.\n  */\n \n /**\n@@ -486,8 +491,12 @@ public static final class TERMUX_SERVICE {\n             public static final String EXTRA_PLUGIN_RESULT_BUNDLE = \"result\"; // Default: \"result\"\n             /** Intent {@code String} extra for stdout value of execute command of the {@link #EXTRA_PLUGIN_RESULT_BUNDLE} */\n             public static final String EXTRA_PLUGIN_RESULT_BUNDLE_STDOUT = \"stdout\"; // Default: \"stdout\"\n+            /** Intent {@code String} extra for original length of stdout value of execute command of the {@link #EXTRA_PLUGIN_RESULT_BUNDLE} */\n+            public static final String EXTRA_PLUGIN_RESULT_BUNDLE_STDOUT_ORIGINAL_LENGTH = \"stdout_original_length\"; // Default: \"stdout_original_length\"\n             /** Intent {@code String} extra for stderr value of execute command of the {@link #EXTRA_PLUGIN_RESULT_BUNDLE} */\n             public static final String EXTRA_PLUGIN_RESULT_BUNDLE_STDERR = \"stderr\"; // Default: \"stderr\"\n+            /** Intent {@code String} extra for original length of stderr value of execute command of the {@link #EXTRA_PLUGIN_RESULT_BUNDLE} */\n+            public static final String EXTRA_PLUGIN_RESULT_BUNDLE_STDERR_ORIGINAL_LENGTH = \"stderr_original_length\"; // Default: \"stderr_original_length\"\n             /** Intent {@code int} extra for exit code value of execute command of the {@link #EXTRA_PLUGIN_RESULT_BUNDLE} */\n             public static final String EXTRA_PLUGIN_RESULT_BUNDLE_EXIT_CODE = \"exitCode\"; // Default: \"exitCode\"\n             /** Intent {@code int} extra for err value of execute command of the {@link #EXTRA_PLUGIN_RESULT_BUNDLE} */",
    "output": "Update TermuxConstants\n\nThe `TermuxConstants` classes has been updated to `v0.12.0`. Check its Changelog sections for info on changes."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/BackgroundJob.java b/app/src/main/java/com/termux/app/BackgroundJob.java\n--- a/app/src/main/java/com/termux/app/BackgroundJob.java\n+++ b/app/src/main/java/com/termux/app/BackgroundJob.java\n@@ -1,136 +0,0 @@\n-package com.termux.app;\n-\n-import android.app.Activity;\n-import android.app.PendingIntent;\n-import android.content.Intent;\n-import android.os.Bundle;\n-\n-import com.termux.app.utils.Logger;\n-import com.termux.app.utils.ShellUtils;\n-import com.termux.models.ExecutionCommand;\n-import com.termux.models.ExecutionCommand.ExecutionState;\n-\n-import java.io.BufferedReader;\n-import java.io.File;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.InputStreamReader;\n-import java.nio.charset.StandardCharsets;\n-import java.util.Arrays;\n-\n-/**\n- * A background job launched by Termux.\n- */\n-public final class BackgroundJob {\n-\n-    Process mProcess;\n-\n-    private static final String LOG_TAG = \"BackgroundJob\";\n-\n-    public BackgroundJob(String executable, final String[] arguments, String workingDirectory, final TermuxService service){\n-        this(new ExecutionCommand(TermuxService.getNextExecutionId(), executable, arguments, workingDirectory, false, false), service);\n-    }\n-\n-    public BackgroundJob(ExecutionCommand executionCommand, final TermuxService service) {\n-        String[] env = ShellUtils.buildEnvironment(false, executionCommand.workingDirectory);\n-\n-        if (executionCommand.workingDirectory == null || executionCommand.workingDirectory.isEmpty())\n-            executionCommand.workingDirectory = TermuxConstants.TERMUX_HOME_DIR_PATH;\n-\n-        final String[] commandArray = ShellUtils.setupProcessArgs(executionCommand.executable, executionCommand.arguments);\n-        final String commandDescription = Arrays.toString(commandArray);\n-\n-        if(!executionCommand.setState(ExecutionState.EXECUTING))\n-            return;\n-\n-        Process process;\n-        try {\n-            process = Runtime.getRuntime().exec(commandArray, env, new File(executionCommand.workingDirectory));\n-        } catch (IOException e) {\n-            mProcess = null;\n-            // TODO: Visible error message?\n-            Logger.logStackTraceWithMessage(LOG_TAG, \"Failed running background job: \" + commandDescription, e);\n-            return;\n-        }\n-\n-        mProcess = process;\n-        final int pid = ShellUtils.getPid(mProcess);\n-        final Bundle result = new Bundle();\n-        final StringBuilder outResult = new StringBuilder();\n-        final StringBuilder errResult = new StringBuilder();\n-\n-        Thread errThread = new Thread() {\n-            @Override\n-            public void run() {\n-                InputStream stderr = mProcess.getErrorStream();\n-                BufferedReader reader = new BufferedReader(new InputStreamReader(stderr, StandardCharsets.UTF_8));\n-                String line;\n-                try {\n-                    // FIXME: Long lines.\n-                    while ((line = reader.readLine()) != null) {\n-                        errResult.append(line).append('\\n');\n-                        Logger.logDebug(LOG_TAG, \"[\" + pid + \"] stderr: \" + line);\n-                    }\n-                } catch (IOException e) {\n-                    // Ignore.\n-                }\n-            }\n-        };\n-        errThread.start();\n-\n-        new Thread() {\n-            @Override\n-            public void run() {\n-                Logger.logDebug(LOG_TAG, \"[\" + pid + \"] starting: \" + commandDescription);\n-                InputStream stdout = mProcess.getInputStream();\n-                BufferedReader reader = new BufferedReader(new InputStreamReader(stdout, StandardCharsets.UTF_8));\n-\n-                String line;\n-                try {\n-                    // FIXME: Long lines.\n-                    while ((line = reader.readLine()) != null) {\n-                        Logger.logDebug(LOG_TAG, \"[\" + pid + \"] stdout: \" + line);\n-                        outResult.append(line).append('\\n');\n-                    }\n-                } catch (IOException e) {\n-                    Logger.logStackTraceWithMessage(LOG_TAG, \"Error reading output\", e);\n-                }\n-\n-                try {\n-                    int exitCode = mProcess.waitFor();\n-                    service.onBackgroundJobExited(BackgroundJob.this);\n-                    if (exitCode == 0) {\n-                        Logger.logDebug(LOG_TAG, \"[\" + pid + \"] exited normally\");\n-                    } else {\n-                        Logger.logDebug(LOG_TAG, \"[\" + pid + \"] exited with code: \" + exitCode);\n-                    }\n-\n-                    result.putString(\"stdout\", outResult.toString());\n-                    result.putInt(\"exitCode\", exitCode);\n-\n-                    errThread.join();\n-                    result.putString(\"stderr\", errResult.toString());\n-\n-                    if(!executionCommand.setState(ExecutionState.EXECUTED))\n-                        return;\n-\n-                    Intent data = new Intent();\n-                    data.putExtra(\"result\", result);\n-\n-                    if(executionCommand.pluginPendingIntent != null) {\n-                        try {\n-                            executionCommand.pluginPendingIntent.send(service.getApplicationContext(), Activity.RESULT_OK, data);\n-                        } catch (PendingIntent.CanceledException e) {\n-                            // The caller doesn't want the result? That's fine, just ignore\n-                        }\n-                    }\n-\n-                    executionCommand.setState(ExecutionState.SUCCESS);\n-                } catch (InterruptedException e) {\n-                    // Ignore\n-                }\n-            }\n-        }.start();\n-    }\n-\n-}",
    "output": "Remove BackgroundJob"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/settings/preferences/TermuxPreferenceConstants.java b/app/src/main/java/com/termux/app/settings/preferences/TermuxPreferenceConstants.java\n--- a/app/src/main/java/com/termux/app/settings/preferences/TermuxPreferenceConstants.java\n+++ b/app/src/main/java/com/termux/app/settings/preferences/TermuxPreferenceConstants.java\n@@ -1,7 +1,7 @@\n package com.termux.app.settings.preferences;\n \n /*\n- * Version: v0.5.0\n+ * Version: v0.6.0\n  *\n  * Changelog\n  *\n@@ -26,6 +26,9 @@\n  * - 0.5.0 (2021-03-24)\n  *      - Added following to `TERMUX_APP`:\n  *          `KEY_LAST_NOTIFICATION_ID` and `DEFAULT_VALUE_KEY_LAST_NOTIFICATION_ID`.\n+ *\n+ * - 0.6.0 (2021-03-24)\n+ *      - Change `DEFAULT_VALUE_KEEP_SCREEN_ON` value to `false` in `TERMUX_APP`.\n  */\n \n /**\n@@ -53,7 +56,7 @@ public static final class TERMUX_APP {\n          * Defines the key for whether to always keep screen on\n          */\n         public static final String KEY_KEEP_SCREEN_ON = \"screen_always_on\";\n-        public static final boolean DEFAULT_VALUE_KEEP_SCREEN_ON = true;\n+        public static final boolean DEFAULT_VALUE_KEEP_SCREEN_ON = false;\n \n \n         /**",
    "output": "Fixed keep screen on default value\n\nThe `TermuxPreferenceConstants` classes has been updated to `v0.6.0`. Check its Changelog sections for info on changes."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/activities/ReportActivity.java b/app/src/main/java/com/termux/app/activities/ReportActivity.java\n--- a/app/src/main/java/com/termux/app/activities/ReportActivity.java\n+++ b/app/src/main/java/com/termux/app/activities/ReportActivity.java\n@@ -29,7 +29,7 @@\n \n public class ReportActivity extends AppCompatActivity {\n \n-    private static final String ARG_REPORT_INFO = \"report_info\";\n+    private static final String EXTRA_REPORT_INFO = \"report_info\";\n \n     ReportInfo mReportInfo;\n \n@@ -70,7 +70,7 @@ private void updateUI(Bundle bundle) {\n             return;\n         }\n \n-        mReportInfo = (ReportInfo) bundle.getSerializable(ARG_REPORT_INFO);\n+        mReportInfo = (ReportInfo) bundle.getSerializable(EXTRA_REPORT_INFO);\n \n         if (mReportInfo == null) {\n             finish();\n@@ -108,7 +108,7 @@ private void updateUI(Bundle bundle) {\n     public void onSaveInstanceState(@NonNull Bundle outState) {\n         super.onSaveInstanceState(outState);\n \n-        outState.putSerializable(ARG_REPORT_INFO, mReportInfo);\n+        outState.putSerializable(EXTRA_REPORT_INFO, mReportInfo);\n     }\n \n     @Override\n@@ -176,7 +176,7 @@ public static Intent newInstance(@NonNull final Context context, @NonNull final\n \n         Intent intent = new Intent(context, ReportActivity.class);\n         Bundle bundle = new Bundle();\n-        bundle.putSerializable(ARG_REPORT_INFO, reportInfo);\n+        bundle.putSerializable(EXTRA_REPORT_INFO, reportInfo);\n         intent.putExtras(bundle);\n \n         // Note that ReportActivity task has documentLaunchMode=\"intoExisting\" set in AndroidManifest.xml",
    "output": "Fix variable prefix for intent extra"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -163,7 +163,7 @@ public void onCreate(Bundle savedInstanceState) {\n \n         super.onCreate(savedInstanceState);\n \n-        setContentView(R.layout.termux_activity);\n+        setContentView(R.layout.activity_termux);\n \n         View content = findViewById(android.R.id.content);\n         content.setOnApplyWindowInsetsListener((v, insets) -> {\n\ndiff --git a/app/src/main/java/com/termux/app/activities/SettingsActivity.java b/app/src/main/java/com/termux/app/activities/SettingsActivity.java\n--- a/app/src/main/java/com/termux/app/activities/SettingsActivity.java\n+++ b/app/src/main/java/com/termux/app/activities/SettingsActivity.java\n@@ -13,7 +13,7 @@ public class SettingsActivity extends AppCompatActivity {\n     @Override\n     protected void onCreate(Bundle savedInstanceState) {\n         super.onCreate(savedInstanceState);\n-        setContentView(R.layout.settings_activity);\n+        setContentView(R.layout.activity_settings);\n         if (savedInstanceState == null) {\n             getSupportFragmentManager()\n                 .beginTransaction()\n\ndiff --git a/app/src/main/java/com/termux/app/terminal/TermuxSessionsListViewController.java b/app/src/main/java/com/termux/app/terminal/TermuxSessionsListViewController.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxSessionsListViewController.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxSessionsListViewController.java\n@@ -32,7 +32,7 @@ public class TermuxSessionsListViewController extends ArrayAdapter<TerminalSessi\n     final StyleSpan italicSpan = new StyleSpan(Typeface.ITALIC);\n \n     public TermuxSessionsListViewController(TermuxActivity activity, List<TerminalSession> sessionList) {\n-        super(activity.getApplicationContext(), R.layout.terminal_sessions_list_item, sessionList);\n+        super(activity.getApplicationContext(), R.layout.item_terminal_sessions_list, sessionList);\n         this.mActivity = activity;\n     }\n \n@@ -43,7 +43,7 @@ public View getView(int position, View convertView, @NonNull ViewGroup parent) {\n         View sessionRowView = convertView;\n         if (sessionRowView == null) {\n             LayoutInflater inflater = mActivity.getLayoutInflater();\n-            sessionRowView = inflater.inflate(R.layout.terminal_sessions_list_item, parent, false);\n+            sessionRowView = inflater.inflate(R.layout.item_terminal_sessions_list, parent, false);\n         }\n \n         TextView sessionTitleView = sessionRowView.findViewById(R.id.session_title);\n@@ -58,7 +58,7 @@ public View getView(int position, View convertView, @NonNull ViewGroup parent) {\n \n         if (isUsingBlackUI) {\n             sessionTitleView.setBackground(\n-                ContextCompat.getDrawable(mActivity, R.drawable.selected_session_background_black)\n+                ContextCompat.getDrawable(mActivity, R.drawable.session_background_black_selected)\n             );\n         }\n \n\ndiff --git a/app/src/main/java/com/termux/app/terminal/io/TerminalToolbarViewPager.java b/app/src/main/java/com/termux/app/terminal/io/TerminalToolbarViewPager.java\n--- a/app/src/main/java/com/termux/app/terminal/io/TerminalToolbarViewPager.java\n+++ b/app/src/main/java/com/termux/app/terminal/io/TerminalToolbarViewPager.java\n@@ -42,7 +42,7 @@ public Object instantiateItem(@NonNull ViewGroup collection, int position) {\n             LayoutInflater inflater = LayoutInflater.from(mActivity);\n             View layout;\n             if (position == 0) {\n-                layout = inflater.inflate(R.layout.terminal_toolbar_extra_keys_view, collection, false);\n+                layout = inflater.inflate(R.layout.view_terminal_toolbar_extra_keys, collection, false);\n                 ExtraKeysView extraKeysView = (ExtraKeysView) layout;\n                 mActivity.setExtraKeysView(extraKeysView);\n                 extraKeysView.reload(mActivity.getProperties().getExtraKeysInfo());\n@@ -53,7 +53,7 @@ public Object instantiateItem(@NonNull ViewGroup collection, int position) {\n                 }\n \n             } else {\n-                layout = inflater.inflate(R.layout.terminal_toolbar_text_input_view, collection, false);\n+                layout = inflater.inflate(R.layout.view_terminal_toolbar_text_input, collection, false);\n                 final EditText editText = layout.findViewById(R.id.terminal_toolbar_text_input);\n \n                 if(mSavedTextInput != null) {",
    "output": "Fix xml files naming convention"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -32,6 +32,8 @@\n \n import com.termux.R;\n import com.termux.app.TermuxConstants.TERMUX_APP.TERMUX_ACTIVITY;\n+import com.termux.app.activities.HelpActivity;\n+import com.termux.app.activities.SettingsActivity;\n import com.termux.app.settings.preferences.TermuxAppSharedPreferences;\n import com.termux.app.terminal.TermuxSessionsListViewController;\n import com.termux.app.terminal.io.TerminalToolbarViewPager;\n@@ -529,10 +531,10 @@ public boolean onContextItemSelected(MenuItem item) {\n                 showStylingDialog();\n                 return true;\n             case CONTEXT_MENU_HELP_ID:\n-                startActivity(new Intent(this, TermuxHelpActivity.class));\n+                startActivity(new Intent(this, HelpActivity.class));\n                 return true;\n             case CONTEXT_MENU_SETTINGS_ID:\n-                startActivity(new Intent(this, TermuxSettingsActivity.class));\n+                startActivity(new Intent(this, SettingsActivity.class));\n                 return true;\n             case CONTEXT_MENU_TOGGLE_KEEP_SCREEN_ON:\n                 toggleKeepScreenOn();\n\ndiff --git a/app/src/main/java/com/termux/app/activities/HelpActivity.java b/app/src/main/java/com/termux/app/activities/HelpActivity.java\n--- a/app/src/main/java/com/termux/app/activities/HelpActivity.java\n+++ b/app/src/main/java/com/termux/app/activities/HelpActivity.java\n@@ -1,4 +1,4 @@\n-package com.termux.app;\n+package com.termux.app.activities;\n \n import android.app.Activity;\n import android.content.ActivityNotFoundException;\n@@ -13,7 +13,7 @@\n import android.widget.RelativeLayout;\n \n /** Basic embedded browser for viewing help pages. */\n-public final class TermuxHelpActivity extends Activity {\n+public final class HelpActivity extends Activity {\n \n     WebView mWebView;\n \n\ndiff --git a/app/src/main/java/com/termux/app/activities/SettingsActivity.java b/app/src/main/java/com/termux/app/activities/SettingsActivity.java\n--- a/app/src/main/java/com/termux/app/activities/SettingsActivity.java\n+++ b/app/src/main/java/com/termux/app/activities/SettingsActivity.java\n@@ -1,4 +1,4 @@\n-package com.termux.app;\n+package com.termux.app.activities;\n \n import android.os.Bundle;\n \n@@ -8,7 +8,7 @@\n \n import com.termux.R;\n \n-public class TermuxSettingsActivity extends AppCompatActivity {\n+public class SettingsActivity extends AppCompatActivity {\n \n     @Override\n     protected void onCreate(Bundle savedInstanceState) {\n\ndiff --git a/app/src/main/java/com/termux/app/fragments/settings/DebuggingPreferencesFragment.java b/app/src/main/java/com/termux/app/fragments/settings/DebuggingPreferencesFragment.java\n--- a/app/src/main/java/com/termux/app/fragments/settings/DebuggingPreferencesFragment.java\n+++ b/app/src/main/java/com/termux/app/fragments/settings/DebuggingPreferencesFragment.java\n@@ -1,4 +1,4 @@\n-package com.termux.app.settings;\n+package com.termux.app.fragments.settings;\n \n import android.content.Context;\n import android.os.Bundle;\n@@ -11,7 +11,6 @@\n import androidx.preference.PreferenceManager;\n \n import com.termux.R;\n-import com.termux.app.settings.preferences.TermuxPreferenceConstants;\n import com.termux.app.settings.preferences.TermuxAppSharedPreferences;\n import com.termux.app.utils.Logger;\n ",
    "output": "Move activities and fragments to respective packages\n\nMove com.termux.TermuxSettingsActivity to com.termux.app.activities.SettingsActivity\nMove com.termux.TermuxHepActivity to com.termux.app.activities.HelpActivity\nMove com.termux.settings.DebuggingPreferencesFragment to com.termux.app.fragments.settings.DebuggingPreferencesFragment"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/settings/properties/SharedProperties.java b/app/src/main/java/com/termux/app/settings/properties/SharedProperties.java\n--- a/app/src/main/java/com/termux/app/settings/properties/SharedProperties.java\n+++ b/app/src/main/java/com/termux/app/settings/properties/SharedProperties.java\n@@ -230,7 +230,7 @@ public static Properties getPropertiesFromFile(Context context, File propertiesF\n         Properties properties = new Properties();\n \n         if (propertiesFile == null) {\n-            Logger.logError(LOG_TAG, \"Not loading properties since file is null\");\n+            Logger.logWarn(LOG_TAG, \"Not loading properties since file is null\");\n             return properties;\n         }\n ",
    "output": "Change log level to warn from error when termux.properties file is missing"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxInstaller.java b/app/src/main/java/com/termux/app/TermuxInstaller.java\n--- a/app/src/main/java/com/termux/app/TermuxInstaller.java\n+++ b/app/src/main/java/com/termux/app/TermuxInstaller.java\n@@ -28,11 +28,11 @@\n  * Install the Termux bootstrap packages if necessary by following the below steps:\n  * <p/>\n  * (1) If $PREFIX already exist, assume that it is correct and be done. Note that this relies on that we do not create a\n- * broken $PREFIX folder below.\n+ * broken $PREFIX directory below.\n  * <p/>\n  * (2) A progress dialog is shown with \"Installing...\" message and a spinner.\n  * <p/>\n- * (3) A staging folder, $STAGING_PREFIX, is {@link #deleteFolder(File)} if left over from broken installation below.\n+ * (3) A staging directory, $STAGING_PREFIX, is {@link #deleteDirectory(File)} if left over from broken installation below.\n  * <p/>\n  * (4) The zip file is loaded from a shared library.\n  * <p/>\n@@ -49,16 +49,21 @@ final class TermuxInstaller {\n \n     /** Performs setup if necessary. */\n     static void setupIfNeeded(final Activity activity, final Runnable whenDone) {\n+        Logger.logInfo(LOG_TAG, \"Installing \" + TermuxConstants.TERMUX_APP_NAME + \" bootstrap packages.\");\n+\n         // Termux can only be run as the primary user (device owner) since only that\n         // account has the expected file system paths. Verify that:\n         UserManager um = (UserManager) activity.getSystemService(Context.USER_SERVICE);\n         boolean isPrimaryUser = um.getSerialNumberForUser(android.os.Process.myUserHandle()) == 0;\n         if (!isPrimaryUser) {\n-            new AlertDialog.Builder(activity).setTitle(R.string.bootstrap_error_title).setMessage(R.string.bootstrap_error_not_primary_user_message)\n+            String bootstrapErrorMessage = activity.getString(R.string.bootstrap_error_not_primary_user_message, TermuxConstants.TERMUX_PREFIX_DIR_PATH);\n+            Logger.logError(LOG_TAG, bootstrapErrorMessage);\n+            new AlertDialog.Builder(activity).setTitle(R.string.bootstrap_error_title).setMessage(bootstrapErrorMessage)\n                 .setOnDismissListener(dialog -> System.exit(0)).setPositiveButton(android.R.string.ok, null).show();\n             return;\n         }\n \n+        Logger.logInfo(LOG_TAG, \"Creating prefix directory \\\"\" + TermuxConstants.TERMUX_PREFIX_DIR_PATH + \"\\\".\");\n         final File PREFIX_FILE = TermuxConstants.TERMUX_PREFIX_DIR;\n         if (PREFIX_FILE.isDirectory()) {\n             whenDone.run();\n@@ -74,9 +79,12 @@ public void run() {\n                     final File STAGING_PREFIX_FILE = new File(STAGING_PREFIX_PATH);\n \n                     if (STAGING_PREFIX_FILE.exists()) {\n-                        deleteFolder(STAGING_PREFIX_FILE);\n+                        Logger.logInfo(LOG_TAG, \"Deleting prefix staging directory \\\"\" + TermuxConstants.TERMUX_STAGING_PREFIX_DIR_PATH + \"\\\".\");\n+                        deleteDirectory(STAGING_PREFIX_FILE);\n                     }\n \n+                    Logger.logInfo(LOG_TAG, \"Extracting bootstrap zip to prefix staging directory \\\"\" + TermuxConstants.TERMUX_STAGING_PREFIX_DIR_PATH + \"\\\".\");\n+\n                     final byte[] buffer = new byte[8096];\n                     final List<Pair<String, String>> symlinks = new ArrayList<>(50);\n \n@@ -125,10 +133,13 @@ public void run() {\n                         Os.symlink(symlink.first, symlink.second);\n                     }\n \n+                    Logger.logInfo(LOG_TAG, \"Moving prefix staging to prefix directory.\");\n+\n                     if (!STAGING_PREFIX_FILE.renameTo(PREFIX_FILE)) {\n-                        throw new RuntimeException(\"Unable to rename staging folder\");\n+                        throw new RuntimeException(\"Moving prefix staging to prefix directory failed\");\n                     }\n \n+                    Logger.logInfo(LOG_TAG, \"Bootstrap packages installed successfully.\");\n                     activity.runOnUiThread(whenDone);\n                 } catch (final Exception e) {\n                     Logger.logStackTraceWithMessage(LOG_TAG, \"Bootstrap error\", e);\n@@ -139,9 +150,9 @@ public void run() {\n                                     dialog.dismiss();\n                                     activity.finish();\n                                 }).setPositiveButton(R.string.bootstrap_error_try_again, (dialog, which) -> {\n-                                    dialog.dismiss();\n-                                    TermuxInstaller.setupIfNeeded(activity, whenDone);\n-                                }).show();\n+                                dialog.dismiss();\n+                                TermuxInstaller.setupIfNeeded(activity, whenDone);\n+                            }).show();\n                         } catch (WindowManager.BadTokenException e1) {\n                             // Activity already dismissed - ignore.\n                         }\n@@ -173,14 +184,14 @@ public static byte[] loadZipBytes() {\n \n     public static native byte[] getZip();\n \n-    /** Delete a folder and all its content or throw. Don't follow symlinks. */\n-    static void deleteFolder(File fileOrDirectory) throws IOException {\n+    /** Delete a directory and all its content or throw. Don't follow symlinks. */\n+    static void deleteDirectory(File fileOrDirectory) throws IOException {\n         if (fileOrDirectory.getCanonicalPath().equals(fileOrDirectory.getAbsolutePath()) && fileOrDirectory.isDirectory()) {\n             File[] children = fileOrDirectory.listFiles();\n \n             if (children != null) {\n                 for (File child : children) {\n-                    deleteFolder(child);\n+                    deleteDirectory(child);\n                 }\n             }\n         }\n@@ -192,25 +203,30 @@ static void deleteFolder(File fileOrDirectory) throws IOException {\n \n     static void setupStorageSymlinks(final Context context) {\n         final String LOG_TAG = \"termux-storage\";\n+\n+        Logger.logInfo(LOG_TAG, \"Setting up storage symlinks.\");\n+\n         new Thread() {\n             public void run() {\n                 try {\n                     File storageDir = TermuxConstants.TERMUX_STORAGE_HOME_DIR;\n \n                     if (storageDir.exists()) {\n                         try {\n-                            deleteFolder(storageDir);\n+                            deleteDirectory(storageDir);\n                         } catch (IOException e) {\n-                            Logger.logError(LOG_TAG, \"Could not delete old $HOME/storage, \" + e.getMessage());\n+                            Logger.logStackTraceWithMessage(LOG_TAG, \"Failed to delete old ~/storage directory\", e);\n                             return;\n                         }\n                     }\n \n                     if (!storageDir.mkdirs()) {\n-                        Logger.logError(LOG_TAG, \"Unable to mkdirs() for $HOME/storage\");\n+                        Logger.logError(LOG_TAG, \"Unable to create ~/storage directory.\");\n                         return;\n                     }\n \n+                    Logger.logInfo(LOG_TAG, \"Setting up storage symlinks at ~/storage/shared, ~/storage/downloads, ~/storage/dcim, ~/storage/pictures, ~/storage/music and ~/storage/movies for directories in \\\"\" + Environment.getExternalStorageDirectory().getAbsolutePath() + \"\\\".\");\n+\n                     File sharedDir = Environment.getExternalStorageDirectory();\n                     Os.symlink(sharedDir.getAbsolutePath(), new File(storageDir, \"shared\").getAbsolutePath());\n \n@@ -235,9 +251,12 @@ public void run() {\n                             File dir = dirs[i];\n                             if (dir == null) continue;\n                             String symlinkName = \"external-\" + i;\n+                            Logger.logInfo(LOG_TAG, \"Setting up storage symlinks at ~/storage/\" + symlinkName + \" for \\\"\" + dir.getAbsolutePath() + \"\\\".\");\n                             Os.symlink(dir.getAbsolutePath(), new File(storageDir, symlinkName).getAbsolutePath());\n                         }\n                     }\n+\n+                    Logger.logInfo(LOG_TAG, \"Storage symlinks created successfully.\");\n                 } catch (Exception e) {\n                     Logger.logStackTraceWithMessage(LOG_TAG, \"Error setting up link\", e);\n                 }\n\ndiff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -151,7 +151,7 @@ public void onDestroy() {\n \n         if (termuxTmpDir.exists()) {\n             try {\n-                TermuxInstaller.deleteFolder(termuxTmpDir.getCanonicalFile());\n+                TermuxInstaller.deleteDirectory(termuxTmpDir.getCanonicalFile());\n             } catch (Exception e) {\n                 Logger.logStackTraceWithMessage(LOG_TAG, \"Error while removing file at \" + termuxTmpDir.getAbsolutePath(), e);\n             }",
    "output": "Add logging for termux bootstrap package installation and setup of storage symlinks"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxConstants.java b/app/src/main/java/com/termux/app/TermuxConstants.java\n--- a/app/src/main/java/com/termux/app/TermuxConstants.java\n+++ b/app/src/main/java/com/termux/app/TermuxConstants.java\n@@ -5,7 +5,7 @@\n import java.io.File;\n \n /*\n- * Version: v0.10.0\n+ * Version: v0.11.0\n  *\n  * Changelog\n  *\n@@ -55,8 +55,7 @@\n  *      - Added following to `TERMUX_SERVICE`:\n  *          `EXTRA_PENDING_INTENT`, `EXTRA_RESULT_BUNDLE`,\n  *          `EXTRA_STDOUT`, `EXTRA_STDERR`, `EXTRA_EXIT_CODE`,\n- *          `EXTRA_ERR`, `EXTRA_ERRMSG`\n- *          .\n+ *          `EXTRA_ERR`, `EXTRA_ERRMSG`.\n  *\n  * - 0.9.0 (2021-03-18)\n  *      - Fixed javadocs.\n@@ -67,9 +66,16 @@\n  *          `VALUE_EXTRA_SESSION_ACTION_SWITCH_TO_NEW_SESSION_AND_OPEN_ACTIVITY`,\n  *          `VALUE_EXTRA_SESSION_ACTION_KEEP_CURRENT_SESSION_AND_OPEN_ACTIVITY`,\n  *          `VALUE_EXTRA_SESSION_ACTION_SWITCH_TO_NEW_SESSION_AND_DONT_OPEN_ACTIVITY`\n- *          `VALUE_EXTRA_SESSION_ACTION_KEEP_CURRENT_SESSION_AND_DONT_OPEN_ACTIVITY`\n+ *          `VALUE_EXTRA_SESSION_ACTION_KEEP_CURRENT_SESSION_AND_DONT_OPEN_ACTIVITY`.\n  *      - Added following to `RUN_COMMAND_SERVICE`:\n- *          `EXTRA_SESSION_ACTION`\n+ *          `EXTRA_SESSION_ACTION`.\n+ *\n+ * - 0.11.0 (2021-03-24)\n+ *      - Added following to `TERMUX_SERVICE`:\n+ *          `EXTRA_COMMAND_LABEL`, `EXTRA_COMMAND_DESCRIPTION`, `EXTRA_COMMAND_HELP`, `EXTRA_PLUGIN_API_HELP`.\n+ *      - Added following to `RUN_COMMAND_SERVICE`:\n+ *          `EXTRA_COMMAND_LABEL`, `EXTRA_COMMAND_DESCRIPTION`, `EXTRA_COMMAND_HELP`.\n+ *      - Updated `RESULT_BUNDLE` related extras with `PLUGIN_RESULT_BUNDLE` prefixes.\n  */\n \n /**\n@@ -432,6 +438,14 @@ public static final class TERMUX_SERVICE {\n             public static final String EXTRA_SESSION_ACTION = TERMUX_PACKAGE_NAME + \".execute.session_action\"; // Default: \"com.termux.execute.session_action\"\n             /** Intent {@code Parcelable} extra containing pending intent for the execute command caller */\n             public static final String EXTRA_PENDING_INTENT = \"pendingIntent\"; // Default: \"pendingIntent\"\n+            /** Intent {@code String} extra for label of the command for the TERMUX_SERVICE.ACTION_SERVICE_EXECUTE intent */\n+            public static final String EXTRA_COMMAND_LABEL = TERMUX_PACKAGE_NAME + \".execute.command_label\"; // Default: \"com.termux.execute.command_label\"\n+            /** Intent markdown {@code String} extra for description of the command for the TERMUX_SERVICE.ACTION_SERVICE_EXECUTE intent */\n+            public static final String EXTRA_COMMAND_DESCRIPTION = TERMUX_PACKAGE_NAME + \".execute.command_description\"; // Default: \"com.termux.execute.command_description\"\n+            /** Intent markdown {@code String} extra for help of the command for the TERMUX_SERVICE.ACTION_SERVICE_EXECUTE intent */\n+            public static final String EXTRA_COMMAND_HELP = TERMUX_PACKAGE_NAME + \".execute.command_help\"; // Default: \"com.termux.execute.command_help\"\n+            /** Intent markdown {@code String} extra for help of the plugin API for the TERMUX_SERVICE.ACTION_SERVICE_EXECUTE intent (Internal Use Only) */\n+            public static final String EXTRA_PLUGIN_API_HELP = TERMUX_PACKAGE_NAME + \".execute.plugin_api_help\"; // Default: \"com.termux.execute.plugin_help\"\n \n \n \n@@ -469,17 +483,17 @@ public static final class TERMUX_SERVICE {\n             /** Intent {@code Bundle} extra to store result of execute command that is sent back for the\n              * TERMUX_SERVICE.ACTION_SERVICE_EXECUTE intent if the {@link #EXTRA_PENDING_INTENT} is not\n              * {@code null} */\n-            public static final String EXTRA_RESULT_BUNDLE = \"result\"; // Default: \"result\"\n-            /** Intent {@code String} extra for stdout value of execute command of the {@link #EXTRA_RESULT_BUNDLE} */\n-            public static final String EXTRA_STDOUT = \"stdout\"; // Default: \"stdout\"\n-            /** Intent {@code String} extra for stderr value of execute command of the {@link #EXTRA_RESULT_BUNDLE} */\n-            public static final String EXTRA_STDERR = \"stderr\"; // Default: \"stderr\"\n-            /** Intent {@code int} extra for exit code value of execute command of the {@link #EXTRA_RESULT_BUNDLE} */\n-            public static final String EXTRA_EXIT_CODE = \"exitCode\"; // Default: \"exitCode\"\n-            /** Intent {@code int} extra for err value of execute command of the {@link #EXTRA_RESULT_BUNDLE} */\n-            public static final String EXTRA_ERR = \"err\"; // Default: \"err\"\n-            /** Intent {@code String} extra for errmsg value of execute command of the {@link #EXTRA_RESULT_BUNDLE} */\n-            public static final String EXTRA_ERRMSG = \"errmsg\"; // Default: \"errmsg\"\n+            public static final String EXTRA_PLUGIN_RESULT_BUNDLE = \"result\"; // Default: \"result\"\n+            /** Intent {@code String} extra for stdout value of execute command of the {@link #EXTRA_PLUGIN_RESULT_BUNDLE} */\n+            public static final String EXTRA_PLUGIN_RESULT_BUNDLE_STDOUT = \"stdout\"; // Default: \"stdout\"\n+            /** Intent {@code String} extra for stderr value of execute command of the {@link #EXTRA_PLUGIN_RESULT_BUNDLE} */\n+            public static final String EXTRA_PLUGIN_RESULT_BUNDLE_STDERR = \"stderr\"; // Default: \"stderr\"\n+            /** Intent {@code int} extra for exit code value of execute command of the {@link #EXTRA_PLUGIN_RESULT_BUNDLE} */\n+            public static final String EXTRA_PLUGIN_RESULT_BUNDLE_EXIT_CODE = \"exitCode\"; // Default: \"exitCode\"\n+            /** Intent {@code int} extra for err value of execute command of the {@link #EXTRA_PLUGIN_RESULT_BUNDLE} */\n+            public static final String EXTRA_PLUGIN_RESULT_BUNDLE_ERR = \"err\"; // Default: \"err\"\n+            /** Intent {@code String} extra for errmsg value of execute command of the {@link #EXTRA_PLUGIN_RESULT_BUNDLE} */\n+            public static final String EXTRA_PLUGIN_RESULT_BUNDLE_ERRMSG = \"errmsg\"; // Default: \"errmsg\"\n \n         }\n \n@@ -507,6 +521,12 @@ public static final class RUN_COMMAND_SERVICE {\n             public static final String EXTRA_BACKGROUND = TERMUX_PACKAGE_NAME + \".RUN_COMMAND_BACKGROUND\"; // Default: \"com.termux.RUN_COMMAND_BACKGROUND\"\n             /** Intent {@code String} extra for session action of foreground commands for the RUN_COMMAND_SERVICE.ACTION_RUN_COMMAND intent */\n             public static final String EXTRA_SESSION_ACTION = TERMUX_PACKAGE_NAME + \".RUN_COMMAND_SESSION_ACTION\"; // Default: \"com.termux.RUN_COMMAND_SESSION_ACTION\"\n+            /** Intent {@code String} extra for label of the command for the RUN_COMMAND_SERVICE.ACTION_RUN_COMMAND intent */\n+            public static final String EXTRA_COMMAND_LABEL = TERMUX_PACKAGE_NAME + \".RUN_COMMAND_COMMAND_LABEL\"; // Default: \"com.termux.RUN_COMMAND_COMMAND_LABEL\"\n+            /** Intent markdown {@code String} extra for description of the command for the RUN_COMMAND_SERVICE.ACTION_RUN_COMMAND intent */\n+            public static final String EXTRA_COMMAND_DESCRIPTION = TERMUX_PACKAGE_NAME + \".RUN_COMMAND_COMMAND_DESCRIPTION\"; // Default: \"com.termux.RUN_COMMAND_COMMAND_DESCRIPTION\"\n+            /** Intent markdown {@code String} extra for help of the command for the RUN_COMMAND_SERVICE.ACTION_RUN_COMMAND intent */\n+            public static final String EXTRA_COMMAND_HELP = TERMUX_PACKAGE_NAME + \".RUN_COMMAND_COMMAND_HELP\"; // Default: \"com.termux.RUN_COMMAND_COMMAND_HELP\"\n \n         }\n     }",
    "output": "Update TermuxConstants\n\nThe `TermuxConstants` classes has been updated to `v0.11.0`. Check its Changelog sections for info on changes."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/activities/ReportActivity.java b/app/src/main/java/com/termux/app/activities/ReportActivity.java\n--- a/app/src/main/java/com/termux/app/activities/ReportActivity.java\n+++ b/app/src/main/java/com/termux/app/activities/ReportActivity.java\n@@ -0,0 +1,190 @@\n+package com.termux.app.activities;\n+\n+import androidx.annotation.NonNull;\n+import androidx.appcompat.app.ActionBar;\n+import androidx.appcompat.app.AppCompatActivity;\n+import androidx.appcompat.widget.Toolbar;\n+import androidx.recyclerview.widget.LinearLayoutManager;\n+import androidx.recyclerview.widget.RecyclerView;\n+\n+import android.content.Context;\n+import android.content.Intent;\n+import android.os.Bundle;\n+import android.view.Menu;\n+import android.view.MenuInflater;\n+import android.view.MenuItem;\n+\n+import com.termux.R;\n+import com.termux.app.TermuxConstants;\n+import com.termux.app.utils.MarkdownUtils;\n+import com.termux.app.utils.ShareUtils;\n+import com.termux.app.utils.TermuxUtils;\n+import com.termux.models.ReportInfo;\n+\n+import org.commonmark.node.FencedCodeBlock;\n+\n+import io.noties.markwon.Markwon;\n+import io.noties.markwon.recycler.MarkwonAdapter;\n+import io.noties.markwon.recycler.SimpleEntry;\n+\n+public class ReportActivity extends AppCompatActivity {\n+\n+    private static final String ARG_REPORT_INFO = \"report_info\";\n+\n+    ReportInfo mReportInfo;\n+\n+    @Override\n+    protected void onCreate(Bundle savedInstanceState) {\n+        super.onCreate(savedInstanceState);\n+        setContentView(R.layout.activity_report);\n+\n+        Toolbar toolbar = findViewById(R.id.toolbar);\n+        if (toolbar != null) {\n+            setSupportActionBar(toolbar);\n+        }\n+\n+        Bundle bundle = null;\n+        Intent intent = getIntent();\n+        if(intent != null)\n+            bundle = intent.getExtras();\n+        else if(savedInstanceState != null)\n+            bundle = savedInstanceState;\n+\n+        updateUI(bundle);\n+\n+    }\n+\n+    @Override\n+    protected void onNewIntent(Intent intent) {\n+        super.onNewIntent(intent);\n+        setIntent(intent);\n+\n+        if(intent != null)\n+            updateUI(intent.getExtras());\n+    }\n+\n+    private void updateUI(Bundle bundle) {\n+\n+        if (bundle == null) {\n+            finish();\n+            return;\n+        }\n+\n+        mReportInfo = (ReportInfo) bundle.getSerializable(ARG_REPORT_INFO);\n+\n+        if (mReportInfo == null) {\n+            finish();\n+            return;\n+        }\n+\n+\n+        final ActionBar actionBar = getSupportActionBar();\n+        if (actionBar != null) {\n+            if (mReportInfo.reportTitle != null)\n+                actionBar.setTitle(mReportInfo.reportTitle);\n+            else\n+                actionBar.setTitle(TermuxConstants.TERMUX_APP_NAME + \" App Report\");\n+        }\n+\n+\n+        RecyclerView recyclerView = findViewById(R.id.recycler_view);\n+\n+        final Markwon markwon = MarkdownUtils.getRecyclerMarkwonBuilder(this);\n+\n+        final MarkwonAdapter adapter = MarkwonAdapter.builderTextViewIsRoot(R.layout.activity_report_adapter_node_default)\n+            .include(FencedCodeBlock.class, SimpleEntry.create(R.layout.activity_report_adapter_node_code_block, R.id.text_view))\n+            .build();\n+\n+        recyclerView.setLayoutManager(new LinearLayoutManager(this));\n+        recyclerView.setAdapter(adapter);\n+\n+        adapter.setMarkdown(markwon, mReportInfo.reportString + getReportAndDeviceDetailsMarkdownString());\n+        adapter.notifyDataSetChanged();\n+    }\n+\n+\n+\n+    @Override\n+    public void onSaveInstanceState(@NonNull Bundle outState) {\n+        super.onSaveInstanceState(outState);\n+\n+        outState.putSerializable(ARG_REPORT_INFO, mReportInfo);\n+    }\n+\n+    @Override\n+    public boolean onCreateOptionsMenu(final Menu menu) {\n+        final MenuInflater inflater = getMenuInflater();\n+        inflater.inflate(R.menu.menu_report, menu);\n+        return true;\n+    }\n+\n+    @Override\n+    public void onBackPressed() {\n+        // Remove activity from recents menu on back button press\n+        finishAndRemoveTask();\n+    }\n+\n+    @Override\n+    public boolean onOptionsItemSelected(final MenuItem item) {\n+        int id = item.getItemId();\n+        if (id == R.id.menu_item_share_report) {\n+            if (mReportInfo != null)\n+                ShareUtils.shareText(this, getString(R.string.report_text), mReportInfo.reportString);\n+        } else if (id == R.id.menu_item_copy_report) {\n+            if (mReportInfo != null)\n+                ShareUtils.copyTextToClipboard(this, mReportInfo.reportString, null);\n+        }\n+\n+        return false;\n+    }\n+\n+    /**\n+     * Get a markdown {@link String} for {@link #mReportInfo} and device details.\n+     *\n+     * @return Returns the markdown {@link String}.\n+     */\n+    private String getReportAndDeviceDetailsMarkdownString() {\n+        if(!mReportInfo.addReportAndDeviceDetails) return \"\";\n+\n+        StringBuilder markdownString = new StringBuilder();\n+\n+        markdownString.append(\"\\n\\n### Report And Device Details\\n\\n\");\n+\n+        if (mReportInfo != null) {\n+            markdownString.append(\"\\n\").append(MarkdownUtils.getSingleLineMarkdownStringEntry(\"User Action\", mReportInfo.userAction, \"-\"));\n+            markdownString.append(\"\\n\").append(MarkdownUtils.getSingleLineMarkdownStringEntry(\"Sender\", mReportInfo.sender, \"-\"));\n+        }\n+\n+        markdownString.append(\"\\n\").append(MarkdownUtils.getSingleLineMarkdownStringEntry(\"Timestamp\", TermuxUtils.getCurrentTimeStamp(), \"-\"));\n+\n+        markdownString.append(\"\\n\\n\").append(TermuxUtils.getDeviceDetailsMarkdownString(this));\n+\n+        markdownString.append(\"\\n##\\n\");\n+\n+        return markdownString.toString();\n+    }\n+\n+\n+\n+    public static void startReportActivity(@NonNull final Context context, @NonNull final ReportInfo reportInfo) {\n+        if(context == null) return;\n+        context.startActivity(newInstance(context, reportInfo));\n+    }\n+\n+    public static Intent newInstance(@NonNull final Context context, @NonNull final ReportInfo reportInfo) {\n+        if(context == null) return null;\n+\n+        Intent intent = new Intent(context, ReportActivity.class);\n+        Bundle bundle = new Bundle();\n+        bundle.putSerializable(ARG_REPORT_INFO, reportInfo);\n+        intent.putExtras(bundle);\n+\n+        // Note that ReportActivity task has documentLaunchMode=\"intoExisting\" set in AndroidManifest.xml\n+        // which has equivalent behaviour to the following. The following dynamic way doesn't seem to\n+        // work for notification pending intent, i.e separate task isn't created and activity is\n+        // launched in the same task as TermuxActivity.\n+        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK |  Intent.FLAG_ACTIVITY_NEW_DOCUMENT);\n+        return intent;\n+    }\n+\n+}\n\ndiff --git a/app/src/main/java/com/termux/models/ReportInfo.java b/app/src/main/java/com/termux/models/ReportInfo.java\n--- a/app/src/main/java/com/termux/models/ReportInfo.java\n+++ b/app/src/main/java/com/termux/models/ReportInfo.java\n@@ -0,0 +1,26 @@\n+package com.termux.models;\n+\n+import java.io.Serializable;\n+\n+public class ReportInfo implements Serializable {\n+\n+    /** The user action that was being processed for which the report was generated. */\n+    public UserAction userAction;\n+    /** The internal app component that sent the report. */\n+    public String sender;\n+    /** The report title. */\n+    public String reportTitle;\n+    /** The markdown text for the report. */\n+    public String reportString;\n+    /** If set to {@code true}, then report and device details will be added to the report. */\n+    public boolean addReportAndDeviceDetails;\n+\n+    public ReportInfo(UserAction userAction, String sender, String reportTitle, String reportString, boolean addReportAndDeviceDetails) {\n+        this.userAction = userAction;\n+        this.sender = sender;\n+        this.reportTitle = reportTitle;\n+        this.reportString = reportString;\n+        this.addReportAndDeviceDetails = addReportAndDeviceDetails;\n+    }\n+\n+}\n\ndiff --git a/app/src/main/java/com/termux/models/UserAction.java b/app/src/main/java/com/termux/models/UserAction.java\n--- a/app/src/main/java/com/termux/models/UserAction.java\n+++ b/app/src/main/java/com/termux/models/UserAction.java\n@@ -0,0 +1,17 @@\n+package com.termux.models;\n+\n+public enum UserAction {\n+\n+    PLUGIN_EXECUTION_COMMAND(\"plugin execution command\");\n+\n+    private final String name;\n+\n+    UserAction(final String name) {\n+        this.name = name;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+}",
    "output": "Add ReportActivity and ReportInfo\n\nThis implements the framework to report info to users. This may include reporting failure or result of commands or any exceptions that are raised.\n\nThe ReportInfo provides 5 fields:\n- userAction: The user action that was being processed for which the report was generated.\n- sender: The internal app component that sent the report.\n- title: The report title.\n- reportString: The markdown text for the report.\n- addReportAndDeviceDetails: If set to true, then report and device details will be added to the report.\n\nThis should provide the basics parameters for showing a report to the user. The ReportActivity also allows user to copy and share the report.\n\nIn future this can also be used to allow users to easily email or post crash reports to github for Termux app crashes instead of going through logcat."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/utils/TermuxUtils.java b/app/src/main/java/com/termux/app/utils/TermuxUtils.java\n--- a/app/src/main/java/com/termux/app/utils/TermuxUtils.java\n+++ b/app/src/main/java/com/termux/app/utils/TermuxUtils.java\n@@ -1,13 +1,30 @@\n package com.termux.app.utils;\n \n+import android.annotation.SuppressLint;\n import android.content.ComponentName;\n import android.content.Context;\n import android.content.Intent;\n import android.content.pm.ResolveInfo;\n+import android.os.Build;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.google.common.base.Joiner;\n+import com.termux.BuildConfig;\n \n import com.termux.app.TermuxConstants;\n \n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n import java.util.List;\n+import java.util.Properties;\n+import java.util.TimeZone;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n \n public class TermuxUtils {\n \n@@ -42,4 +59,144 @@ public static void sendTermuxOpenedBroadcast(Context context) {\n         }\n     }\n \n+    /**\n+     * Get a markdown {@link String} for the device details.\n+     *\n+     * @param context The context for operations.\n+     * @return Returns the markdown {@link String}.\n+     */\n+    public static String getDeviceDetailsMarkdownString(final Context context) {\n+        if (context == null) return \"null\";\n+\n+        // Some properties cannot be read with {@link System#getProperty(String)} but can be read\n+        // directly by running getprop command\n+        Properties systemProperties = getSystemProperties();\n+\n+        StringBuilder markdownString = new StringBuilder();\n+\n+        markdownString.append(\"#### Software\\n\");\n+        appendPropertyMarkdown(markdownString,\n+            TermuxConstants.TERMUX_APP_NAME.toUpperCase() + \"_VERSION\", getTermuxAppVersionName() + \"(\" + getTermuxAppVersionCode() + \")\");\n+        appendPropertyMarkdown(markdownString,TermuxConstants.TERMUX_APP_NAME.toUpperCase() + \"_DEBUG_BUILD\", isTermuxAppDebugBuild());\n+        appendPropertyMarkdown(markdownString,\"OS_VERSION\", getSystemPropertyWithAndroidAPI(\"os.version\"));\n+        appendPropertyMarkdown(markdownString, \"SDK_INT\", Build.VERSION.SDK_INT);\n+        // If its a release version\n+        if (\"REL\".equals(Build.VERSION.CODENAME))\n+            appendPropertyMarkdown(markdownString, \"RELEASE\", Build.VERSION.RELEASE);\n+        else\n+            appendPropertyMarkdown(markdownString, \"CODENAME\", Build.VERSION.CODENAME);\n+        appendPropertyMarkdown(markdownString, \"INCREMENTAL\", Build.VERSION.INCREMENTAL);\n+        appendPropertyMarkdownIfSet(markdownString, \"SECURITY_PATCH\", systemProperties.getProperty(\"ro.build.version.security_patch\"));\n+        appendPropertyMarkdownIfSet(markdownString, \"IS_DEBUGGABLE\", systemProperties.getProperty(\"ro.debuggable\"));\n+        appendPropertyMarkdownIfSet(markdownString, \"IS_EMULATOR\", systemProperties.getProperty(\"ro.boot.qemu\"));\n+        appendPropertyMarkdownIfSet(markdownString, \"IS_TREBLE_ENABLED\", systemProperties.getProperty(\"ro.treble.enabled\"));\n+        appendPropertyMarkdown(markdownString, \"TYPE\", Build.TYPE);\n+        appendPropertyMarkdown(markdownString, \"TAGS\", Build.TAGS);\n+\n+        markdownString.append(\"\\n\\n#### Hardware\\n\");\n+        appendPropertyMarkdown(markdownString, \"MANUFACTURER\", Build.MANUFACTURER);\n+        appendPropertyMarkdown(markdownString, \"BRAND\", Build.BRAND);\n+        appendPropertyMarkdown(markdownString, \"MODEL\", Build.MODEL);\n+        appendPropertyMarkdown(markdownString, \"PRODUCT\", Build.PRODUCT);\n+        appendPropertyMarkdown(markdownString, \"DISPLAY\", Build.DISPLAY);\n+        appendPropertyMarkdown(markdownString, \"ID\", Build.ID);\n+        appendPropertyMarkdown(markdownString, \"BOARD\", Build.BOARD);\n+        appendPropertyMarkdown(markdownString, \"HARDWARE\", Build.HARDWARE);\n+        appendPropertyMarkdown(markdownString, \"DEVICE\", Build.DEVICE);\n+        appendPropertyMarkdown(markdownString, \"SUPPORTED_ABIS\", Joiner.on(\", \").skipNulls().join(Build.SUPPORTED_ABIS));\n+\n+        return markdownString.toString();\n+    }\n+\n+    public static Properties getSystemProperties() {\n+        Properties systemProperties = new Properties();\n+\n+        // getprop commands returns values in the format `[key]: [value]`\n+        // Regex matches string starting with a literal `[`,\n+        // followed by one or more characters that do not match a closing square bracket as the key,\n+        // followed by a literal `]: [`,\n+        // followed by one or more characters as the value,\n+        // followed by string ending with literal `]`\n+        // multiline values will be ignored\n+        Pattern propertiesPattern = Pattern.compile(\"^\\\\[([^]]+)]: \\\\[(.+)]$\");\n+\n+        try {\n+            Process process = new ProcessBuilder()\n+                .command(\"/system/bin/getprop\")\n+                .redirectErrorStream(true)\n+                .start();\n+\n+            InputStream inputStream = process.getInputStream();\n+            BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));\n+            String line, key, value;\n+\n+            while ((line = bufferedReader.readLine()) != null) {\n+                Matcher matcher = propertiesPattern.matcher(line);\n+                if (matcher.matches()) {\n+                    key = matcher.group(1);\n+                    value = matcher.group(2);\n+                    if(key != null && value != null && !key.isEmpty() && !value.isEmpty())\n+                        systemProperties.put(key, value);\n+                }\n+            }\n+\n+            bufferedReader.close();\n+            process.destroy();\n+\n+        } catch (IOException e) {\n+            Logger.logStackTraceWithMessage(\"Failed to get run \\\"/system/bin/getprop\\\" to get system properties.\", e);\n+        }\n+\n+        //for (String key : systemProperties.stringPropertyNames()) {\n+        //    Logger.logVerbose(key + \": \" +  systemProperties.get(key));\n+        //}\n+\n+        return systemProperties;\n+    }\n+\n+    private static String getSystemPropertyWithAndroidAPI(@NonNull String property) {\n+        try {\n+            return System.getProperty(property);\n+        } catch (Exception e) {\n+            Logger.logVerbose(\"Failed to get system property \\\"\" + property + \"\\\":\" + e.getMessage());\n+            return null;\n+        }\n+    }\n+\n+    private static void appendPropertyMarkdownIfSet(StringBuilder markdownString, String label, Object value) {\n+        if(value == null) return;\n+        if(value instanceof String && (((String) value).isEmpty()) || \"REL\".equals(value)) return;\n+        markdownString.append(\"\\n\").append(getPropertyMarkdown(label, value));\n+    }\n+\n+    private static void appendPropertyMarkdown(StringBuilder markdownString, String label, Object value) {\n+        markdownString.append(\"\\n\").append(getPropertyMarkdown(label, value));\n+    }\n+\n+    private static String getPropertyMarkdown(String label, Object value) {\n+        return MarkdownUtils.getSingleLineMarkdownStringEntry(label, value, \"-\");\n+    }\n+\n+\n+\n+    public static int getTermuxAppVersionCode() {\n+        return BuildConfig.VERSION_CODE;\n+    }\n+\n+    public static String getTermuxAppVersionName() {\n+        return BuildConfig.VERSION_NAME;\n+    }\n+\n+    public static boolean isTermuxAppDebugBuild() {\n+        return BuildConfig.DEBUG;\n+    }\n+\n+    public static String getCurrentTimeStamp() {\n+        @SuppressLint(\"SimpleDateFormat\")\n+        final SimpleDateFormat df = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\");\n+        df.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n+        return df.format(new Date());\n+    }\n+\n+\n }",
    "output": "Update TermuxUtils to add support for getting device and termux info as markdown"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/utils/Logger.java b/app/src/main/java/com/termux/app/utils/Logger.java\n--- a/app/src/main/java/com/termux/app/utils/Logger.java\n+++ b/app/src/main/java/com/termux/app/utils/Logger.java\n@@ -6,14 +6,14 @@\n import android.util.Log;\n import android.widget.Toast;\n \n-import androidx.appcompat.app.AlertDialog;\n-\n import com.termux.R;\n import com.termux.app.TermuxConstants;\n \n import java.io.IOException;\n import java.io.PrintWriter;\n import java.io.StringWriter;\n+import java.util.Collections;\n+import java.util.List;\n \n public class Logger {\n \n@@ -123,36 +123,112 @@ static public void logDebugAndShowToast(Context context, String message) {\n \n \n \n-    static public void logStackTraceWithMessage(String tag, String message, Exception e) {\n+    static public void logStackTraceWithMessage(String tag, String message, Throwable throwable) {\n+        if(CURRENT_LOG_LEVEL >= LOG_LEVEL_NORMAL)\n+            Log.e(getFullTag(tag), getMessageAndStackTraceString(message, throwable));\n+    }\n+\n+    static public void logStackTraceWithMessage(String message, Throwable throwable) {\n+        logStackTraceWithMessage(DEFAULT_LOG_TAG, message, throwable);\n+    }\n+\n+    static public void logStackTrace(String tag, Throwable throwable) {\n+        logStackTraceWithMessage(tag, null, throwable);\n+    }\n+\n+    static public void logStackTrace(Throwable throwable) {\n+        logStackTraceWithMessage(DEFAULT_LOG_TAG, null, throwable);\n+    }\n \n+    static public void logStackTracesWithMessage(String tag, String message, List<Throwable> throwableList) {\n         if(CURRENT_LOG_LEVEL >= LOG_LEVEL_NORMAL)\n-        {\n-            try {\n-                StringWriter errors = new StringWriter();\n-                PrintWriter pw = new PrintWriter(errors);\n-                e.printStackTrace(pw);\n-                pw.close();\n-                if(message != null)\n-                    Log.e(getFullTag(tag), message + \":\\n\" + errors.toString());\n-                else\n-                    Log.e(getFullTag(tag), errors.toString());\n-                errors.close();\n-            } catch (IOException e1) {\n-                e1.printStackTrace();\n-            }\n+            Log.e(getFullTag(tag), getMessageAndStackTracesString(message, throwableList));\n+    }\n+\n+    static public String getMessageAndStackTraceString(String message, Throwable throwable) {\n+        if(message == null && throwable == null)\n+            return null;\n+        else if(message != null && throwable != null)\n+            return message + \":\\n\" + getStackTraceString(throwable);\n+        else if(throwable == null)\n+            return message;\n+        else\n+            return getStackTraceString(throwable);\n+    }\n+\n+    static public String getMessageAndStackTracesString(String message, List<Throwable> throwableList) {\n+        if(message == null && (throwableList == null || throwableList.size() == 0))\n+            return null;\n+        else if(message != null && (throwableList != null && throwableList.size() != 0))\n+            return message + \":\\n\" + getStackTracesString(null, getStackTraceStringArray(throwableList));\n+        else if(throwableList == null || throwableList.size() == 0)\n+            return message;\n+        else\n+            return getStackTracesString(null, getStackTraceStringArray(throwableList));\n+    }\n+\n+    static public String getStackTraceString(Throwable throwable) {\n+        if(throwable == null) return null;\n+\n+        String stackTraceString = null;\n+\n+        try {\n+            StringWriter errors = new StringWriter();\n+            PrintWriter pw = new PrintWriter(errors);\n+            throwable.printStackTrace(pw);\n+            pw.close();\n+            stackTraceString = errors.toString();\n+            errors.close();\n+        } catch (IOException e1) {\n+            e1.printStackTrace();\n         }\n+\n+        return stackTraceString;\n     }\n+    private static String[] getStackTraceStringArray(Throwable throwable) {\n+        return getStackTraceStringArray(Collections.singletonList(throwable));\n+    }\n+\n+    public static String[] getStackTraceStringArray(List<Throwable> throwableList) {\n+        if (throwableList == null) return null;\n \n-    static public void logStackTraceWithMessage(String message, Exception e) {\n-        logStackTraceWithMessage(DEFAULT_LOG_TAG, message, e);\n+        final String[] stackTraceStringArray = new String[throwableList.size()];\n+        for (int i = 0; i < throwableList.size(); i++) {\n+            stackTraceStringArray[i] = getStackTraceString(throwableList.get(i));\n+        }\n+        return stackTraceStringArray;\n     }\n \n-    static public void logStackTrace(String tag, Exception e) {\n-        logStackTraceWithMessage(tag, null, e);\n+    public static String getStackTracesString(String label, String[] stackTraceStringArray) {\n+        if(label == null) label = \"StackTraces:\";\n+        StringBuilder stackTracesString = new StringBuilder(label);\n+\n+        if (stackTraceStringArray == null || stackTraceStringArray.length == 0) {\n+            stackTracesString.append(\" -\");\n+        } else {\n+            for (int i = 0; i != stackTraceStringArray.length; i++) {\n+                stackTracesString.append(\"\\n\\nStacktrace \").append(i + 1).append(\"\\n```\\n\").append(stackTraceStringArray[i]).append(\"\\n```\\n\");\n+            }\n+        }\n+\n+        return stackTracesString.toString();\n     }\n \n-    static public void logStackTrace(Exception e) {\n-        logStackTraceWithMessage(DEFAULT_LOG_TAG, null, e);\n+    public static String getStackTracesMarkdownString(String label, String[] stackTraceStringArray) {\n+        if(label == null) label = \"StackTraces:\";\n+        StringBuilder stackTracesString = new StringBuilder(\"#### \" + label);\n+\n+        if (stackTraceStringArray == null || stackTraceStringArray.length == 0) {\n+            stackTracesString.append(\"\\n\\n`-`\");\n+        } else {\n+            for (int i = 0; i != stackTraceStringArray.length; i++) {\n+                stackTracesString.append(\"\\n\\n\\n##### Stacktrace \").append(i + 1).append(\"\\n\\n```\\n\").append(stackTraceStringArray[i]).append(\"\\n```\");\n+            }\n+        }\n+\n+        stackTracesString.append(\"\\n##\\n\");\n+\n+        return stackTracesString.toString();\n     }\n     \n ",
    "output": "Update Logger\n\n- Add support to log Throwables instead of just Exception class objects.\n- Adds utility functions to get Throwables as Strings and Markdown Strings."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/utils/ShareUtils.java b/app/src/main/java/com/termux/app/utils/ShareUtils.java\n--- a/app/src/main/java/com/termux/app/utils/ShareUtils.java\n+++ b/app/src/main/java/com/termux/app/utils/ShareUtils.java\n@@ -0,0 +1,69 @@\n+package com.termux.app.utils;\n+\n+import android.content.ClipData;\n+import android.content.ClipboardManager;\n+import android.content.Context;\n+import android.content.Intent;\n+\n+import androidx.core.content.ContextCompat;\n+\n+import com.termux.R;\n+\n+public class ShareUtils {\n+\n+    /**\n+     * Open the system app chooser that allows the user to select which app to send the intent.\n+     *\n+     * @param context The context for operations.\n+     * @param intent The intent that describes the choices that should be shown.\n+     * @param title The title for choose menu.\n+     */\n+    private static void openSystemAppChooser(final Context context, final Intent intent, final String title) {\n+        if(context == null) return;\n+\n+        final Intent chooserIntent = new Intent(Intent.ACTION_CHOOSER);\n+        chooserIntent.putExtra(Intent.EXTRA_INTENT, intent);\n+        chooserIntent.putExtra(Intent.EXTRA_TITLE, title);\n+        chooserIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n+        context.startActivity(chooserIntent);\n+    }\n+\n+    /**\n+     * Share text.\n+     *\n+     * @param context The context for operations.\n+     * @param subject The subject for sharing.\n+     * @param text The text to share.\n+     */\n+    public static void shareText(final Context context, final String subject, final String text) {\n+        if(context == null) return;\n+\n+        final Intent shareTextIntent = new Intent(Intent.ACTION_SEND);\n+        shareTextIntent.setType(\"text/plain\");\n+        shareTextIntent.putExtra(Intent.EXTRA_SUBJECT, subject);\n+        shareTextIntent.putExtra(Intent.EXTRA_TEXT, text);\n+\n+        openSystemAppChooser(context, shareTextIntent, context.getString(R.string.share_with));\n+    }\n+\n+    /**\n+     * Copy the text to clipboard.\n+     *\n+     * @param context The context for operations.\n+     * @param text The text to copy.\n+     * @param toastString If this is not {@code null} or empty, then a toast is shown if copying to\n+     *                    clipboard is successful.\n+     */\n+    public static void copyTextToClipboard(final Context context, final String text, final String toastString) {\n+        if(context == null) return;\n+\n+        final ClipboardManager clipboardManager = ContextCompat.getSystemService(context, ClipboardManager.class);\n+\n+        if (clipboardManager != null) {\n+            clipboardManager.setPrimaryClip(ClipData.newPlainText(null, text));\n+            if (toastString != null && !toastString.isEmpty())\n+                Logger.showToast(context, toastString, true);\n+        }\n+    }\n+\n+}",
    "output": "Add ShareUtils"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/utils/MarkdownUtils.java b/app/src/main/java/com/termux/app/utils/MarkdownUtils.java\n--- a/app/src/main/java/com/termux/app/utils/MarkdownUtils.java\n+++ b/app/src/main/java/com/termux/app/utils/MarkdownUtils.java\n@@ -0,0 +1,191 @@\n+package com.termux.app.utils;\n+\n+import android.content.Context;\n+import android.graphics.Typeface;\n+import android.text.Spanned;\n+import android.text.style.AbsoluteSizeSpan;\n+import android.text.style.BackgroundColorSpan;\n+import android.text.style.BulletSpan;\n+import android.text.style.QuoteSpan;\n+import android.text.style.StrikethroughSpan;\n+import android.text.style.StyleSpan;\n+import android.text.style.TypefaceSpan;\n+import android.text.util.Linkify;\n+\n+import androidx.annotation.NonNull;\n+import androidx.core.content.ContextCompat;\n+\n+import com.google.common.base.Strings;\n+import com.termux.R;\n+\n+import org.commonmark.ext.gfm.strikethrough.Strikethrough;\n+import org.commonmark.node.BlockQuote;\n+import org.commonmark.node.Code;\n+import org.commonmark.node.Emphasis;\n+import org.commonmark.node.FencedCodeBlock;\n+import org.commonmark.node.ListItem;\n+import org.commonmark.node.StrongEmphasis;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import io.noties.markwon.AbstractMarkwonPlugin;\n+import io.noties.markwon.Markwon;\n+import io.noties.markwon.MarkwonSpansFactory;\n+import io.noties.markwon.MarkwonVisitor;\n+import io.noties.markwon.ext.strikethrough.StrikethroughPlugin;\n+import io.noties.markwon.linkify.LinkifyPlugin;\n+\n+public class MarkdownUtils {\n+\n+    public static String backtick = \"`\";\n+    public static Pattern backticksPattern = Pattern.compile(\"(\" + backtick + \"+)\");\n+\n+    /**\n+     * Get the markdown code {@link String} for a {@link String}. This ensures all backticks \"`\" are\n+     * properly escaped so that markdown does not break.\n+     *\n+     * @param string The {@link String} to convert.\n+     * @param codeBlock If the {@link String} is to be converted to a code block or inline code.\n+     * @return Returns the markdown code {@link String}.\n+     */\n+    public static String getMarkdownCodeForString(String string, boolean codeBlock) {\n+        if(string == null) return null;\n+        if(string.isEmpty()) return \"\";\n+\n+        int maxConsecutiveBackTicksCount = getMaxConsecutiveBackTicksCount(string);\n+\n+        // markdown requires surrounding backticks count to be at least one more than the count\n+        // of consecutive ticks in the string itself\n+        int backticksCountToUse;\n+        if(codeBlock)\n+            backticksCountToUse = maxConsecutiveBackTicksCount + 3;\n+        else\n+            backticksCountToUse = maxConsecutiveBackTicksCount + 1;\n+\n+        // create a string with n backticks where n==backticksCountToUse\n+        String backticksToUse = Strings.repeat(backtick, backticksCountToUse);\n+\n+        if(codeBlock)\n+            return backticksToUse + \"\\n\" + string + \"\\n\" + backticksToUse;\n+        else {\n+            // add a space to any prefixed or suffixed backtick characters\n+            if(string.startsWith(backtick))\n+                string = \" \" + string;\n+            if(string.endsWith(backtick))\n+                string = string + \" \";\n+\n+            return backticksToUse + string + backticksToUse;\n+        }\n+    }\n+\n+    /**\n+     * Get the max consecutive backticks \"`\" in a {@link String}.\n+     *\n+     * @param string The {@link String} to check.\n+     * @return Returns the max consecutive backticks count.\n+     */\n+    public static int getMaxConsecutiveBackTicksCount(String string) {\n+        if(string == null || string.isEmpty()) return 0;\n+\n+        int maxCount = 0;\n+        int matchCount;\n+\n+        Matcher matcher = backticksPattern.matcher(string);\n+        while(matcher.find()) {\n+            matchCount = matcher.group(1).length();\n+            if(matchCount > maxCount)\n+                maxCount = matchCount;\n+        }\n+\n+        return maxCount;\n+    }\n+\n+\n+\n+    public static String getSingleLineMarkdownStringEntry(String label, Object object, String def) {\n+        if (object != null)\n+            return \"**\" + label + \"**: \" + getMarkdownCodeForString(object.toString(), false) +  \"  \";\n+        else\n+            return \"**\" + label + \"**: \" + def +  \"  \";\n+    }\n+\n+    public static String getMultiLineMarkdownStringEntry(String label, Object object, String def) {\n+        if (object != null)\n+            return \"**\" + label + \"**:\\n\" + getMarkdownCodeForString(object.toString(), true) + \"\\n\";\n+        else\n+            return \"**\" + label + \"**: \" + def + \"\\n\";\n+    }\n+\n+\n+    /** Check following for more info:\n+     * https://github.com/noties/Markwon/tree/v4.6.2/app-sample\n+     * https://noties.io/Markwon/docs/v4/recycler/\n+     * https://github.com/noties/Markwon/blob/v4.6.2/app-sample/src/main/java/io/noties/markwon/app/readme/ReadMeActivity.kt\n+     */\n+    public static Markwon getRecyclerMarkwonBuilder(Context context) {\n+        return Markwon.builder(context)\n+            .usePlugin(LinkifyPlugin.create(Linkify.EMAIL_ADDRESSES | Linkify.WEB_URLS))\n+            .usePlugin(new AbstractMarkwonPlugin() {\n+                @Override\n+                public void configureVisitor(@NonNull MarkwonVisitor.Builder builder) {\n+                    builder.on(FencedCodeBlock.class, (visitor, fencedCodeBlock) -> {\n+                        // we actually won't be applying code spans here, as our custom xml view will\n+                        // draw background and apply mono typeface\n+                        //\n+                        // NB the `trim` operation on literal (as code will have a new line at the end)\n+                        final CharSequence code = visitor.configuration()\n+                            .syntaxHighlight()\n+                            .highlight(fencedCodeBlock.getInfo(), fencedCodeBlock.getLiteral().trim());\n+                        visitor.builder().append(code);\n+                    });\n+                }\n+\n+                @Override\n+                public void configureSpansFactory(@NonNull MarkwonSpansFactory.Builder builder) {\n+                    builder\n+                        // set color for inline code\n+                        .setFactory(Code.class, (configuration, props) -> new Object[]{\n+                            new BackgroundColorSpan(ContextCompat.getColor(context, R.color.background_markdown_code_inline)),\n+                        });\n+                }\n+            })\n+            .build();\n+    }\n+\n+    /** Check following for more info:\n+     * https://github.com/noties/Markwon/tree/v4.6.2/app-sample\n+     * https://github.com/noties/Markwon/blob/v4.6.2/app-sample/src/main/java/io/noties/markwon/app/samples/notification/NotificationSample.java\n+     */\n+    public static Markwon getSpannedMarkwonBuilder(Context context) {\n+        return Markwon.builder(context)\n+                .usePlugin(StrikethroughPlugin.create())\n+                .usePlugin(new AbstractMarkwonPlugin() {\n+                    @Override\n+                    public void configureSpansFactory(@NonNull MarkwonSpansFactory.Builder builder) {\n+                        builder\n+                            .setFactory(Emphasis.class, (configuration, props) -> new StyleSpan(Typeface.ITALIC))\n+                            .setFactory(StrongEmphasis.class, (configuration, props) -> new StyleSpan(Typeface.BOLD))\n+                            .setFactory(BlockQuote.class, (configuration, props) -> new QuoteSpan())\n+                            .setFactory(Strikethrough.class, (configuration, props) -> new StrikethroughSpan())\n+                            // NB! notification does not handle background color\n+                            .setFactory(Code.class, (configuration, props) -> new Object[]{\n+                                new BackgroundColorSpan(ContextCompat.getColor(context, R.color.background_markdown_code_inline)),\n+                                new TypefaceSpan(\"monospace\"),\n+                                new AbsoluteSizeSpan(8)\n+                            })\n+                            // NB! both ordered and bullet list items\n+                            .setFactory(ListItem.class, (configuration, props) -> new BulletSpan());\n+                    }\n+                })\n+                .build();\n+    }\n+\n+    public static Spanned getSpannedMarkdownText(Context context, String string) {\n+\n+        final Markwon markwon = getSpannedMarkwonBuilder(context);\n+\n+        return markwon.toMarkdown(string);\n+    }\n+\n+}",
    "output": "Add commonmark-spec markdown support with markwon library\n\nAlso adds MarkdownUtitls to provide various utils for markdown processing."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/settings/properties/SharedProperties.java b/app/src/main/java/com/termux/app/settings/properties/SharedProperties.java\n--- a/app/src/main/java/com/termux/app/settings/properties/SharedProperties.java\n+++ b/app/src/main/java/com/termux/app/settings/properties/SharedProperties.java\n@@ -42,8 +42,8 @@ public class SharedProperties {\n \n     /**\n      * The {@link Properties} object that maintains an in-memory cache of values loaded from the\n-     * {@link #mPropertiesFile} file. The key/value pairs are of any keys defined by\n-     * {@link #mPropertiesList} that are found in the file against their literal values in the file.\n+     * {@link #mPropertiesFile} file. The key/value pairs are of any keys that are found in the file\n+     * against their literal values in the file.\n      */\n     private Properties mProperties;\n \n@@ -85,9 +85,11 @@ public class SharedProperties {\n      * @param context The Context for operations.\n      * @param propertiesFile The {@link File} object to load properties from.\n      * @param propertiesList The {@link Set<String>} object that defined which properties to load.\n+     *                       If this is set to {@code null}, then all properties that exist in\n+     *                       {@code propertiesFile} will be read by {@link #loadPropertiesFromDisk()}\n      * @param sharedPropertiesParser The implementation of the {@link SharedPropertiesParser} interface.\n      */\n-    public SharedProperties(@Nonnull Context context, @Nullable File propertiesFile, @Nonnull Set<String> propertiesList, @Nonnull SharedPropertiesParser sharedPropertiesParser) {\n+    public SharedProperties(@Nonnull Context context, @Nullable File propertiesFile, Set<String> propertiesList, @Nonnull SharedPropertiesParser sharedPropertiesParser) {\n         mContext = context;\n         mPropertiesFile = propertiesFile;\n         mPropertiesList = propertiesList;\n@@ -98,8 +100,9 @@ public SharedProperties(@Nonnull Context context, @Nullable File propertiesFile,\n     }\n \n     /**\n-     * Load the properties defined by {@link #mPropertiesList} from the {@link #mPropertiesFile} file\n-     * to update the {@link #mProperties} and {@link #mMap} in-memory cache.\n+     * Load the properties defined by {@link #mPropertiesList} or all properties if its {@code null}\n+     * from the {@link #mPropertiesFile} file to update the {@link #mProperties} and {@link #mMap}\n+     * in-memory cache.\n      * Properties are not loading automatically when constructor is called and must be manually called.\n      */\n     public void loadPropertiesFromDisk() {\n@@ -115,9 +118,13 @@ public void loadPropertiesFromDisk() {\n             HashMap<String, Object> map = new HashMap<String, Object>();\n             Properties newProperties = new Properties();\n \n+            Set<String> propertiesList = mPropertiesList;\n+            if(propertiesList == null)\n+                propertiesList = properties.stringPropertyNames();\n+\n             String value;\n             Object internalValue;\n-            for (String key : mPropertiesList) {\n+            for (String key : propertiesList) {\n                 value = properties.getProperty(key); // value will be null if key does not exist in propertiesFile\n                 Logger.logDebug(LOG_TAG, key + \" : \" + value);\n \n@@ -126,7 +133,7 @@ public void loadPropertiesFromDisk() {\n                 internalValue = mSharedPropertiesParser.getInternalPropertyValueFromValue(mContext, key, value);\n \n                 // If the internal value was successfully added to map, then also add value to newProperties\n-                // We only store values in-memory defined by {@link #mPropertiesList}\n+                // We only store values in-memory defined by propertiesList\n                 if (putToMap(map, key, internalValue)) { // null internalValue will be put into map\n                     putToProperties(newProperties, key, value); // null value will **not** be into properties\n                 }",
    "output": "Allow mPropertiesList to be null for SharedProperties\n\nThis will allow all keys that are read from file to be stored in mMap without knowing their names beforehand."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/settings/DebuggingPreferencesFragment.java b/app/src/main/java/com/termux/app/settings/DebuggingPreferencesFragment.java\n--- a/app/src/main/java/com/termux/app/settings/DebuggingPreferencesFragment.java\n+++ b/app/src/main/java/com/termux/app/settings/DebuggingPreferencesFragment.java\n@@ -108,6 +108,9 @@ public void putBoolean(String key, boolean value) {\n             case \"terminal_view_key_logging_enabled\":\n                     mPreferences.setTerminalViewKeyLoggingEnabled(value);\n                 break;\n+            case \"plugin_error_notifications_enabled\":\n+                mPreferences.setPluginErrorNotificationsEnabled(value);\n+                break;\n             default:\n                 break;\n         }\n@@ -118,6 +121,8 @@ public boolean getBoolean(String key, boolean defValue) {\n         switch (key) {\n             case \"terminal_view_key_logging_enabled\":\n                 return mPreferences.getTerminalViewKeyLoggingEnabled();\n+            case \"plugin_error_notifications_enabled\":\n+                return mPreferences.getPluginErrorNotificationsEnabled();\n             default:\n                 return false;\n         }\n\ndiff --git a/app/src/main/java/com/termux/app/settings/preferences/TermuxAppSharedPreferences.java b/app/src/main/java/com/termux/app/settings/preferences/TermuxAppSharedPreferences.java\n--- a/app/src/main/java/com/termux/app/settings/preferences/TermuxAppSharedPreferences.java\n+++ b/app/src/main/java/com/termux/app/settings/preferences/TermuxAppSharedPreferences.java\n@@ -130,4 +130,14 @@ public void setTerminalViewKeyLoggingEnabled(boolean value) {\n         SharedPreferenceUtils.setBoolean(mSharedPreferences, TERMUX_APP.KEY_TERMINAL_VIEW_KEY_LOGGING_ENABLED, value, false);\n     }\n \n+\n+\n+    public boolean getPluginErrorNotificationsEnabled() {\n+        return SharedPreferenceUtils.getBoolean(mSharedPreferences, TERMUX_APP.KEY_PLUGIN_ERROR_NOTIFICATIONS_ENABLED, TERMUX_APP.DEFAULT_VALUE_PLUGIN_ERROR_NOTIFICATIONS_ENABLED);\n+    }\n+\n+    public void setPluginErrorNotificationsEnabled(boolean value) {\n+        SharedPreferenceUtils.setBoolean(mSharedPreferences, TERMUX_APP.KEY_PLUGIN_ERROR_NOTIFICATIONS_ENABLED, value, false);\n+    }\n+\n }\n\ndiff --git a/app/src/main/java/com/termux/app/settings/preferences/TermuxPreferenceConstants.java b/app/src/main/java/com/termux/app/settings/preferences/TermuxPreferenceConstants.java\n--- a/app/src/main/java/com/termux/app/settings/preferences/TermuxPreferenceConstants.java\n+++ b/app/src/main/java/com/termux/app/settings/preferences/TermuxPreferenceConstants.java\n@@ -1,7 +1,7 @@\n package com.termux.app.settings.preferences;\n \n /*\n- * Version: v0.3.0\n+ * Version: v0.4.0\n  *\n  * Changelog\n  *\n@@ -16,7 +16,12 @@\n  *          Termux app and its plugins. This will allow {@link com.termux.app.TermuxSettings} to\n  *          manage preferences of plugins as well if they don't have launcher activity themselves\n  *          and also allow plugin apps to make changes to preferences from background.\n- *      - Added `KEY_LOG_LEVEL` to `TERMUX_TASKER_APP` scope.\n+ *      - Added following to `TERMUX_TASKER_APP`:\n+     *      `KEY_LOG_LEVEL`.\n+ *\n+ * - 0.4.0 (2021-03-13)\n+ *      - Added following to `TERMUX_APP`:\n+ *          `KEY_PLUGIN_ERROR_NOTIFICATIONS_ENABLED` and `DEFAULT_VALUE_PLUGIN_ERROR_NOTIFICATIONS_ENABLED`.\n  */\n \n /**\n@@ -71,6 +76,12 @@ public static final class TERMUX_APP {\n         public static final String KEY_TERMINAL_VIEW_KEY_LOGGING_ENABLED = \"terminal_view_key_logging_enabled\";\n         public static final boolean DEFAULT_VALUE_TERMINAL_VIEW_KEY_LOGGING_ENABLED = false;\n \n+        /**\n+         * Defines the key for whether flashes and notifications for plugin errors are enabled or not\n+         */\n+        public static final String KEY_PLUGIN_ERROR_NOTIFICATIONS_ENABLED = \"plugin_error_notifications_enabled\";\n+        public static final boolean DEFAULT_VALUE_PLUGIN_ERROR_NOTIFICATIONS_ENABLED = true;\n+\n     }\n \n     /**",
    "output": "Added plugin_error_notifications_enabled preference\n\nThis will allow user to control whether flashes and notifications for plugin errors are enabled or not.\n\nThe `TermuxPreferenceConstants` classes has been updated to `v0.4.0`. Check its Changelog sections for info on changes."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -212,38 +212,40 @@ private void actionStopService() {\n     /** Process action to acquire Power and Wi-Fi WakeLocks. */\n     @SuppressLint({\"WakelockTimeout\", \"BatteryLife\"})\n     private void actionAcquireWakeLock() {\n-        if (mWakeLock == null) {\n-            Logger.logDebug(LOG_TAG, \"Acquiring WakeLocks\");\n-\n-            PowerManager pm = (PowerManager) getSystemService(Context.POWER_SERVICE);\n-            mWakeLock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, TermuxConstants.TERMUX_APP_NAME.toLowerCase() + \":service-wakelock\");\n-            mWakeLock.acquire();\n-\n-            // http://tools.android.com/tech-docs/lint-in-studio-2-3#TOC-WifiManager-Leak\n-            WifiManager wm = (WifiManager) getApplicationContext().getSystemService(Context.WIFI_SERVICE);\n-            mWifiLock = wm.createWifiLock(WifiManager.WIFI_MODE_FULL_HIGH_PERF, TermuxConstants.TERMUX_APP_NAME.toLowerCase());\n-            mWifiLock.acquire();\n-\n-            String packageName = getPackageName();\n-            if (!pm.isIgnoringBatteryOptimizations(packageName)) {\n-                Intent whitelist = new Intent();\n-                whitelist.setAction(Settings.ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS);\n-                whitelist.setData(Uri.parse(\"package:\" + packageName));\n-                whitelist.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n-\n-                try {\n-                    startActivity(whitelist);\n-                } catch (ActivityNotFoundException e) {\n-                    Logger.logStackTraceWithMessage(LOG_TAG, \"Failed to call ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS\", e);\n-                }\n-            }\n+        if (mWakeLock != null) {\n+            Logger.logDebug(LOG_TAG, \"Ignoring acquiring WakeLocks since they are already held\");\n+            return;\n+        }\n \n-            updateNotification();\n+        Logger.logDebug(LOG_TAG, \"Acquiring WakeLocks\");\n \n-            Logger.logDebug(LOG_TAG, \"WakeLocks acquired successfully\");\n-        } else {\n-            Logger.logDebug(LOG_TAG, \"Ignoring acquiring WakeLocks since they are already held\");\n+        PowerManager pm = (PowerManager) getSystemService(Context.POWER_SERVICE);\n+        mWakeLock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, TermuxConstants.TERMUX_APP_NAME.toLowerCase() + \":service-wakelock\");\n+        mWakeLock.acquire();\n+\n+        // http://tools.android.com/tech-docs/lint-in-studio-2-3#TOC-WifiManager-Leak\n+        WifiManager wm = (WifiManager) getApplicationContext().getSystemService(Context.WIFI_SERVICE);\n+        mWifiLock = wm.createWifiLock(WifiManager.WIFI_MODE_FULL_HIGH_PERF, TermuxConstants.TERMUX_APP_NAME.toLowerCase());\n+        mWifiLock.acquire();\n+\n+        String packageName = getPackageName();\n+        if (!pm.isIgnoringBatteryOptimizations(packageName)) {\n+            Intent whitelist = new Intent();\n+            whitelist.setAction(Settings.ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS);\n+            whitelist.setData(Uri.parse(\"package:\" + packageName));\n+            whitelist.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n+\n+            try {\n+                startActivity(whitelist);\n+            } catch (ActivityNotFoundException e) {\n+                Logger.logStackTraceWithMessage(LOG_TAG, \"Failed to call ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS\", e);\n+            }\n         }\n+\n+        updateNotification();\n+\n+        Logger.logDebug(LOG_TAG, \"WakeLocks acquired successfully\");\n+\n     }\n \n     /** Process action to release Power and Wi-Fi WakeLocks. */",
    "output": "Reordered TermuxService.actionAcquireWakeLock()"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -18,6 +18,7 @@\n import android.os.IBinder;\n import android.os.PowerManager;\n import android.provider.Settings;\n+import android.util.Log;\n import android.widget.ArrayAdapter;\n \n import com.termux.R;\n@@ -27,13 +28,16 @@\n import com.termux.app.terminal.TermuxSessionClient;\n import com.termux.app.terminal.TermuxSessionClientBase;\n import com.termux.app.utils.Logger;\n+import com.termux.app.utils.PluginUtils;\n import com.termux.app.utils.TextDataUtils;\n import com.termux.terminal.TerminalEmulator;\n import com.termux.terminal.TerminalSession;\n import com.termux.terminal.TerminalSessionClient;\n \n import java.io.File;\n import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n import java.util.List;\n \n /**\n@@ -291,7 +295,15 @@ private void actionServiceExecute(Intent intent) {\n     private void executeBackgroundCommand(String executablePath, String[] arguments, String cwd, PendingIntent pendingIntent) {\n         Logger.logDebug(LOG_TAG, \"Starting background command\");\n \n+        final String pendingIntentCreator;\n+        if(pendingIntent != null) pendingIntentCreator = pendingIntent.getCreatorPackage(); else pendingIntentCreator = null;\n+\n+        PluginUtils.dumpExecutionIntentToLog(Log.DEBUG, LOG_TAG, null, executablePath, Arrays.asList(arguments), cwd, true, new HashMap<String, Object>() {{\n+            put(\"pendingIntentCreator\", pendingIntentCreator);\n+        }});\n+\n         BackgroundJob task = new BackgroundJob(cwd, executablePath, arguments, this, pendingIntent);\n+\n         mBackgroundTasks.add(task);\n         updateNotification();\n     }\n@@ -309,6 +321,12 @@ private void executeForegroundCommand(Intent intent, String executablePath, Stri\n         Logger.logDebug(LOG_TAG, \"Starting foreground command\");\n \n         boolean failsafe = intent.getBooleanExtra(TERMUX_ACTIVITY.ACTION_FAILSAFE_SESSION, false);\n+\n+        PluginUtils.dumpExecutionIntentToLog(Log.DEBUG, LOG_TAG, null, executablePath, Arrays.asList(arguments), cwd, false, new HashMap<String, Object>() {{\n+            put(\"sessionAction\", sessionAction);\n+            put(\"failsafe\", failsafe);\n+        }});\n+\n         TerminalSession newSession = createTerminalSession(executablePath, arguments, cwd, failsafe);\n \n         // Transform executable path to session name, e.g. \"/bin/do-something.sh\" => \"do something.sh\".",
    "output": "Added TERMUX_SERVICE#ACTION_SERVICE_EXECUTE Intent Logging"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxConstants.java b/app/src/main/java/com/termux/app/TermuxConstants.java\n--- a/app/src/main/java/com/termux/app/TermuxConstants.java\n+++ b/app/src/main/java/com/termux/app/TermuxConstants.java\n@@ -5,7 +5,7 @@\n import java.io.File;\n \n /*\n- * Version: v0.9.0\n+ * Version: v0.10.0\n  *\n  * Changelog\n  *\n@@ -52,11 +52,24 @@\n  *\n  * - 0.8.0 (2021-03-18)\n  *      - Fixed Intent extra types javadocs.\n- *      - Added `EXTRA_PENDING_INTENT`, `EXTRA_RESULT_BUNDLE`,\n- *          `EXTRA_STDOUT`, `EXTRA_STDERR`, `EXTRA_EXIT_CODE`, `EXTRA_ERR`, `EXTRA_ERRMSG`.\n+ *      - Added following to `TERMUX_SERVICE`:\n+ *          `EXTRA_PENDING_INTENT`, `EXTRA_RESULT_BUNDLE`,\n+ *          `EXTRA_STDOUT`, `EXTRA_STDERR`, `EXTRA_EXIT_CODE`,\n+ *          `EXTRA_ERR`, `EXTRA_ERRMSG`\n+ *          .\n  *\n  * - 0.9.0 (2021-03-18)\n  *      - Fixed javadocs.\n+ *\n+ * - 0.10.0 (2021-03-19)\n+ *      - Added following to `TERMUX_SERVICE`:\n+ *          `EXTRA_SESSION_ACTION`,\n+ *          `VALUE_EXTRA_SESSION_ACTION_SWITCH_TO_NEW_SESSION_AND_OPEN_ACTIVITY`,\n+ *          `VALUE_EXTRA_SESSION_ACTION_KEEP_CURRENT_SESSION_AND_OPEN_ACTIVITY`,\n+ *          `VALUE_EXTRA_SESSION_ACTION_SWITCH_TO_NEW_SESSION_AND_DONT_OPEN_ACTIVITY`\n+ *          `VALUE_EXTRA_SESSION_ACTION_KEEP_CURRENT_SESSION_AND_DONT_OPEN_ACTIVITY`\n+ *      - Added following to `RUN_COMMAND_SERVICE`:\n+ *          `EXTRA_SESSION_ACTION`\n  */\n \n /**\n@@ -415,10 +428,44 @@ public static final class TERMUX_SERVICE {\n             public static final String EXTRA_WORKDIR = TERMUX_PACKAGE_NAME + \".execute.cwd\"; // Default: \"com.termux.execute.cwd\"\n             /** Intent {@code boolean} extra for command background mode for the TERMUX_SERVICE.ACTION_SERVICE_EXECUTE intent */\n             public static final String EXTRA_BACKGROUND = TERMUX_PACKAGE_NAME + \".execute.background\"; // Default: \"com.termux.execute.background\"\n+            /** Intent {@code String} extra for session action for foreground commands for the TERMUX_SERVICE.ACTION_SERVICE_EXECUTE intent */\n+            public static final String EXTRA_SESSION_ACTION = TERMUX_PACKAGE_NAME + \".execute.session_action\"; // Default: \"com.termux.execute.session_action\"\n             /** Intent {@code Parcelable} extra containing pending intent for the execute command caller */\n             public static final String EXTRA_PENDING_INTENT = \"pendingIntent\"; // Default: \"pendingIntent\"\n \n \n+\n+            /** The value for {@link #EXTRA_SESSION_ACTION} extra that will set the new session as\n+             * the current session and will start {@link TermuxActivity} if its not running to bring\n+             * the new session to foreground.\n+             */\n+            public static final int VALUE_EXTRA_SESSION_ACTION_SWITCH_TO_NEW_SESSION_AND_OPEN_ACTIVITY = 0;\n+\n+            /** The value for {@link #EXTRA_SESSION_ACTION} extra that will keep any existing session\n+             * as the current session and will start {@link TermuxActivity} if its not running to\n+             * bring the existing session to foreground. The new session will be added to the left\n+             * sidebar in the sessions list.\n+             */\n+            public static final int VALUE_EXTRA_SESSION_ACTION_KEEP_CURRENT_SESSION_AND_OPEN_ACTIVITY = 1;\n+\n+            /** The value for {@link #EXTRA_SESSION_ACTION} extra that will set the new session as\n+             * the current session but will not start {@link TermuxActivity} if its not running\n+             * and session(s) will be seen in Termux notification and can be clicked to bring new\n+             * session to foreground. If the {@link TermuxActivity} is already running, then this\n+             * will behave like {@link #VALUE_EXTRA_SESSION_ACTION_KEEP_CURRENT_SESSION_AND_OPEN_ACTIVITY}.\n+             */\n+            public static final int VALUE_EXTRA_SESSION_ACTION_SWITCH_TO_NEW_SESSION_AND_DONT_OPEN_ACTIVITY = 2;\n+\n+            /** The value for {@link #EXTRA_SESSION_ACTION} extra that will keep any existing session\n+             * as the current session but will not start {@link TermuxActivity} if its not running\n+             * and session(s) will be seen in Termux notification and can be clicked to bring\n+             * existing session to foreground. If the {@link TermuxActivity} is already running,\n+             * then this will behave like {@link #VALUE_EXTRA_SESSION_ACTION_KEEP_CURRENT_SESSION_AND_OPEN_ACTIVITY}.\n+             */\n+            public static final int VALUE_EXTRA_SESSION_ACTION_KEEP_CURRENT_SESSION_AND_DONT_OPEN_ACTIVITY = 3;\n+\n+\n+\n             /** Intent {@code Bundle} extra to store result of execute command that is sent back for the\n              * TERMUX_SERVICE.ACTION_SERVICE_EXECUTE intent if the {@link #EXTRA_PENDING_INTENT} is not\n              * {@code null} */\n@@ -450,14 +497,16 @@ public static final class RUN_COMMAND_SERVICE {\n \n             /** Intent action to execute command with RUN_COMMAND_SERVICE */\n             public static final String ACTION_RUN_COMMAND = TERMUX_PACKAGE_NAME + \".RUN_COMMAND\"; // Default: \"com.termux.RUN_COMMAND\"\n-            /** Intent {@code String} extra for command path for the RUN_COMMAND_SERVICE.ACTION_RUN_COMMAND intent */\n+            /** Intent {@code String} extra for absolute path of command for the RUN_COMMAND_SERVICE.ACTION_RUN_COMMAND intent */\n             public static final String EXTRA_COMMAND_PATH = TERMUX_PACKAGE_NAME + \".RUN_COMMAND_PATH\"; // Default: \"com.termux.RUN_COMMAND_PATH\"\n-            /** Intent {@code String[]} extra for command arguments for the RUN_COMMAND_SERVICE.ACTION_RUN_COMMAND intent */\n+            /** Intent {@code String[]} extra for any arguments to pass to command for the RUN_COMMAND_SERVICE.ACTION_RUN_COMMAND intent */\n             public static final String EXTRA_ARGUMENTS = TERMUX_PACKAGE_NAME + \".RUN_COMMAND_ARGUMENTS\"; // Default: \"com.termux.RUN_COMMAND_ARGUMENTS\"\n-            /** Intent {@code String} extra for command current working directory for the RUN_COMMAND_SERVICE.ACTION_RUN_COMMAND intent */\n+            /** Intent {@code String} extra for current working directory of command for the RUN_COMMAND_SERVICE.ACTION_RUN_COMMAND intent */\n             public static final String EXTRA_WORKDIR = TERMUX_PACKAGE_NAME + \".RUN_COMMAND_WORKDIR\"; // Default: \"com.termux.RUN_COMMAND_WORKDIR\"\n-            /** Intent {@code boolean} extra for command background mode for the RUN_COMMAND_SERVICE.ACTION_RUN_COMMAND intent */\n+            /** Intent {@code boolean} extra for whether to run command in background or foreground terminal session for the RUN_COMMAND_SERVICE.ACTION_RUN_COMMAND intent */\n             public static final String EXTRA_BACKGROUND = TERMUX_PACKAGE_NAME + \".RUN_COMMAND_BACKGROUND\"; // Default: \"com.termux.RUN_COMMAND_BACKGROUND\"\n+            /** Intent {@code String} extra for session action of foreground commands for the RUN_COMMAND_SERVICE.ACTION_RUN_COMMAND intent */\n+            public static final String EXTRA_SESSION_ACTION = TERMUX_PACKAGE_NAME + \".RUN_COMMAND_SESSION_ACTION\"; // Default: \"com.termux.RUN_COMMAND_SESSION_ACTION\"\n \n         }\n     }",
    "output": "Update TermuxConstants\n\nThe `TermuxConstants` classes has been updated to `v0.10.0`. Check its Changelog sections for info on changes."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -319,6 +319,11 @@ private void executeForegroundCommand(Intent intent, String executablePath, Stri\n         TermuxAppSharedPreferences preferences = new TermuxAppSharedPreferences(this);\n         preferences.setCurrentSession(newSession.mHandle);\n \n+        // Notify {@link TermuxSessionsListViewController} that sessions list has been updated if\n+        // activity in is foreground\n+        if(mTermuxSessionClient != null)\n+            mTermuxSessionClient.terminalSessionListNotifyUpdated();\n+\n         // Launch the main Termux app, which will now show the current session:\n         startActivity(new Intent(this, TermuxActivity.class).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK));\n     }\n\ndiff --git a/app/src/main/java/com/termux/app/terminal/TermuxSessionClient.java b/app/src/main/java/com/termux/app/terminal/TermuxSessionClient.java\n--- a/app/src/main/java/com/termux/app/terminal/TermuxSessionClient.java\n+++ b/app/src/main/java/com/termux/app/terminal/TermuxSessionClient.java\n@@ -68,7 +68,7 @@ public void onTitleChanged(TerminalSession updatedSession) {\n             mActivity.showToast(toToastTitle(updatedSession), true);\n         }\n \n-        mActivity.terminalSessionListNotifyUpdated();\n+        terminalSessionListNotifyUpdated();\n     }\n \n     @Override\n@@ -101,7 +101,7 @@ public void onSessionFinished(final TerminalSession finishedSession) {\n             }\n         }\n \n-        mActivity.terminalSessionListNotifyUpdated();\n+        terminalSessionListNotifyUpdated();\n     }\n \n     @Override\n@@ -152,7 +152,7 @@ void noteSessionInfo() {\n         TerminalSession session = mActivity.getCurrentSession();\n         final int indexOfSession = mActivity.getTermuxService().getSessions().indexOf(session);\n         mActivity.showToast(toToastTitle(session), false);\n-        mActivity.terminalSessionListNotifyUpdated();\n+        terminalSessionListNotifyUpdated();\n \n         final ListView termuxSessionsListView = mActivity.findViewById(R.id.terminal_sessions_list);\n         termuxSessionsListView.setItemChecked(indexOfSession, true);\n@@ -178,7 +178,7 @@ public void renameSession(final TerminalSession sessionToRename) {\n \n         DialogUtils.textInput(mActivity, R.string.session_rename_title, sessionToRename.mSessionName, R.string.session_rename_positive_button, text -> {\n             sessionToRename.mSessionName = text;\n-            mActivity.terminalSessionListNotifyUpdated();\n+            terminalSessionListNotifyUpdated();\n         }, -1, null, -1, null, null);\n     }\n \n@@ -250,7 +250,7 @@ public void removeFinishedSession(TerminalSession finishedSession) {\n         TermuxService service = mActivity.getTermuxService();\n \n         int index = service.removeTerminalSession(finishedSession);\n-        mActivity.terminalSessionListNotifyUpdated();\n+        terminalSessionListNotifyUpdated();\n         if (mActivity.getTermuxService().getSessions().isEmpty()) {\n             // There are no sessions to show, so finish the activity.\n             mActivity.finishActivityIfNotFinishing();\n@@ -262,6 +262,10 @@ public void removeFinishedSession(TerminalSession finishedSession) {\n         }\n     }\n \n+    public void terminalSessionListNotifyUpdated() {\n+        mActivity.terminalSessionListNotifyUpdated();\n+    }\n+\n \n \n     String toToastTitle(TerminalSession session) {",
    "output": "Fix old bug where termux app would crash if sessions list ListView was not notified of new sessions\n\nTo reproduce:\n1. Create 2 sessions.\n2. From either session, run a random `RUN_COMMAND` intent command with `am` command and shift to the other session.\n\nTermux app would crash and throw the `The content of the adapter has changed but ListView did not receive a notification.` exception. TermuxService was previously not notifying the ListView of the sessions list that a new session has been added, if the activity was in foreground."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxConstants.java b/app/src/main/java/com/termux/app/TermuxConstants.java\n--- a/app/src/main/java/com/termux/app/TermuxConstants.java\n+++ b/app/src/main/java/com/termux/app/TermuxConstants.java\n@@ -5,7 +5,7 @@\n import java.io.File;\n \n /*\n- * Version: v0.7.0\n+ * Version: v0.8.0\n  *\n  * Changelog\n  *\n@@ -49,6 +49,11 @@\n  *\n  * - 0.7.0 (2021-03-17)\n  *      - Fixed javadocs.\n+ *\n+ * - 0.8.0 (2021-03-18)\n+ *      - Fixed Intent extra types javadocs.\n+ *      - Added `EXTRA_PENDING_INTENT`, `EXTRA_RESULT_BUNDLE`,\n+ *          `EXTRA_STDOUT`, `EXTRA_STDERR`, `EXTRA_EXIT_CODE`, `EXTRA_ERR`, `EXTRA_ERRMSG`.\n  */\n \n /**\n@@ -368,7 +373,7 @@ public static final class TERMUX_ACTIVITY {\n \n             /* Intent action to make termux reload its termux session styling */\n             public static final String ACTION_RELOAD_STYLE = TermuxConstants.TERMUX_PACKAGE_NAME + \".app.reload_style\"; // Default: \"com.termux.app.reload_style\"\n-            /* Intent extra for what to reload for the TERMUX_ACTIVITY.ACTION_RELOAD_STYLE intent */\n+            /* Intent {@code String} extra for what to reload for the TERMUX_ACTIVITY.ACTION_RELOAD_STYLE intent */\n             public static final String EXTRA_RELOAD_STYLE = TermuxConstants.TERMUX_PACKAGE_NAME + \".app.reload_style\"; // Default: \"com.termux.app.reload_style\"\n \n         }\n@@ -401,12 +406,30 @@ public static final class TERMUX_SERVICE {\n             public static final String ACTION_SERVICE_EXECUTE = TERMUX_PACKAGE_NAME + \".service_execute\"; // Default: \"com.termux.service_execute\"\n             /* Uri scheme for paths sent via intent to TERMUX_SERVICE */\n             public static final String URI_SCHEME_SERVICE_EXECUTE = TERMUX_PACKAGE_NAME + \".file\"; // Default: \"com.termux.file\"\n-            /* Intent extra for command arguments for the TERMUX_SERVICE.ACTION_SERVICE_EXECUTE intent */\n+            /* Intent {@code String[]} extra for command arguments for the TERMUX_SERVICE.ACTION_SERVICE_EXECUTE intent */\n             public static final String EXTRA_ARGUMENTS = TERMUX_PACKAGE_NAME + \".execute.arguments\"; // Default: \"com.termux.execute.arguments\"\n-            /* Intent extra for command current working directory for the TERMUX_SERVICE.ACTION_SERVICE_EXECUTE intent */\n+            /* Intent {@code String} extra for command current working directory for the TERMUX_SERVICE.ACTION_SERVICE_EXECUTE intent */\n             public static final String EXTRA_WORKDIR = TERMUX_PACKAGE_NAME + \".execute.cwd\"; // Default: \"com.termux.execute.cwd\"\n-            /* Intent extra for command background mode for the TERMUX_SERVICE.ACTION_SERVICE_EXECUTE intent */\n+            /* Intent {@code boolean} extra for command background mode for the TERMUX_SERVICE.ACTION_SERVICE_EXECUTE intent */\n             public static final String EXTRA_BACKGROUND = TERMUX_PACKAGE_NAME + \".execute.background\"; // Default: \"com.termux.execute.background\"\n+            /** Intent {@code Parcelable} extra containing pending intent for the execute command caller */\n+            public static final String EXTRA_PENDING_INTENT = \"pendingIntent\"; // Default: \"pendingIntent\"\n+\n+\n+            /** Intent {@code Bundle} extra to store result of execute command that is sent back for the\n+             * TERMUX_SERVICE.ACTION_SERVICE_EXECUTE intent if the {@link #EXTRA_PENDING_INTENT} is not\n+             * {@code null} */\n+            public static final String EXTRA_RESULT_BUNDLE = \"result\"; // Default: \"result\"\n+            /** Intent {@code String} extra for stdout value of execute command of the {@link #EXTRA_RESULT_BUNDLE} */\n+            public static final String EXTRA_STDOUT = \"stdout\"; // Default: \"stdout\"\n+            /** Intent {@code String} extra for stderr value of execute command of the {@link #EXTRA_RESULT_BUNDLE} */\n+            public static final String EXTRA_STDERR = \"stderr\"; // Default: \"stderr\"\n+            /** Intent {@code int} extra for exit code value of execute command of the {@link #EXTRA_RESULT_BUNDLE} */\n+            public static final String EXTRA_EXIT_CODE = \"exitCode\"; // Default: \"exitCode\"\n+            /** Intent {@code int} extra for err value of execute command of the {@link #EXTRA_RESULT_BUNDLE} */\n+            public static final String EXTRA_ERR = \"err\"; // Default: \"err\"\n+            /** Intent {@code String} extra for errmsg value of execute command of the {@link #EXTRA_RESULT_BUNDLE} */\n+            public static final String EXTRA_ERRMSG = \"errmsg\"; // Default: \"errmsg\"\n \n         }\n \n@@ -424,13 +447,13 @@ public static final class RUN_COMMAND_SERVICE {\n \n             /* Intent action to execute command with RUN_COMMAND_SERVICE */\n             public static final String ACTION_RUN_COMMAND = TERMUX_PACKAGE_NAME + \".RUN_COMMAND\"; // Default: \"com.termux.RUN_COMMAND\"\n-            /* Intent extra for command path for the RUN_COMMAND_SERVICE.ACTION_RUN_COMMAND intent */\n+            /* Intent {@code String} extra for command path for the RUN_COMMAND_SERVICE.ACTION_RUN_COMMAND intent */\n             public static final String EXTRA_COMMAND_PATH = TERMUX_PACKAGE_NAME + \".RUN_COMMAND_PATH\"; // Default: \"com.termux.RUN_COMMAND_PATH\"\n-            /* Intent extra for command arguments for the RUN_COMMAND_SERVICE.ACTION_RUN_COMMAND intent */\n+            /* Intent {@code String[]} extra for command arguments for the RUN_COMMAND_SERVICE.ACTION_RUN_COMMAND intent */\n             public static final String EXTRA_ARGUMENTS = TERMUX_PACKAGE_NAME + \".RUN_COMMAND_ARGUMENTS\"; // Default: \"com.termux.RUN_COMMAND_ARGUMENTS\"\n-            /* Intent extra for command current working directory for the RUN_COMMAND_SERVICE.ACTION_RUN_COMMAND intent */\n+            /* Intent {@code String} extra for command current working directory for the RUN_COMMAND_SERVICE.ACTION_RUN_COMMAND intent */\n             public static final String EXTRA_WORKDIR = TERMUX_PACKAGE_NAME + \".RUN_COMMAND_WORKDIR\"; // Default: \"com.termux.RUN_COMMAND_WORKDIR\"\n-            /* Intent extra for command background mode for the RUN_COMMAND_SERVICE.ACTION_RUN_COMMAND intent */\n+            /* Intent {@code boolean} extra for command background mode for the RUN_COMMAND_SERVICE.ACTION_RUN_COMMAND intent */\n             public static final String EXTRA_BACKGROUND = TERMUX_PACKAGE_NAME + \".RUN_COMMAND_BACKGROUND\"; // Default: \"com.termux.RUN_COMMAND_BACKGROUND\"\n \n         }",
    "output": "Update TermuxConstants\n\nThe `TermuxConstants` classes has been updated to `v0.8.0`. Check its Changelog sections for info on changes."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxConstants.java b/app/src/main/java/com/termux/app/TermuxConstants.java\n--- a/app/src/main/java/com/termux/app/TermuxConstants.java\n+++ b/app/src/main/java/com/termux/app/TermuxConstants.java\n@@ -5,7 +5,7 @@\n import java.io.File;\n \n /*\n- * Version: v0.5.0\n+ * Version: v0.6.0\n  *\n  * Changelog\n  *\n@@ -42,7 +42,10 @@\n  *          `TERMUX_WIDGET_DEFAULT_PREFERENCES_FILE_BASENAME_WITHOUT_EXTENSION`.\n  *\n  * - 0.5.0 (2021-03-16)\n- *      - Renamed \"Termux Plugin app\" to \"Termux Tasker app\"\n+ *      - Renamed \"Termux Plugin app\" labels to \"Termux Tasker app\"\n+ *\n+ * - 0.6.0 (2021-03-16)\n+ *      - Added `TERMUX_FILE_SHARE_URI_AUTHORITY`\n  */\n \n /**\n@@ -332,9 +335,13 @@ public final class TermuxConstants {\n     /* Default value for {@link #PROP_ALLOW_EXTERNAL_APPS} */\n     public static final String PROP_DEFAULT_VALUE_ALLOW_EXTERNAL_APPS = \"false\"; // Default: \"false\"\n \n-\n+    /* The broadcast action sent when Termux App opens */\n     public static final String BROADCAST_TERMUX_OPENED = TERMUX_PACKAGE_NAME + \".app.OPENED\";\n \n+    /* The Uri authority for Termux app file shares */\n+    public static final String TERMUX_FILE_SHARE_URI_AUTHORITY = TERMUX_PACKAGE_NAME + \".files\"; // Default: \"com.termux.files\"\n+\n+\n \n \n \n\ndiff --git a/app/src/main/java/com/termux/app/TermuxOpenReceiver.java b/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n--- a/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n+++ b/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n@@ -88,7 +88,7 @@ public void onReceive(Context context, Intent intent) {\n             contentTypeToUse = contentTypeExtra;\n         }\n \n-        Uri uriToShare = Uri.parse(\"content://com.termux.files\" + fileToShare.getAbsolutePath());\n+        Uri uriToShare = Uri.parse(\"content://\" + TermuxConstants.TERMUX_FILE_SHARE_URI_AUTHORITY + fileToShare.getAbsolutePath());\n \n         if (Intent.ACTION_SEND.equals(intentAction)) {\n             sendIntent.putExtra(Intent.EXTRA_STREAM, uriToShare);",
    "output": "Update TermuxConstants\n\nThe `TermuxConstants` classes has been updated to `v0.6.0`. Check its Changelog sections for info on changes."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/settings/preferences/TermuxPreferenceConstants.java b/app/src/main/java/com/termux/app/settings/preferences/TermuxPreferenceConstants.java\n--- a/app/src/main/java/com/termux/app/settings/preferences/TermuxPreferenceConstants.java\n+++ b/app/src/main/java/com/termux/app/settings/preferences/TermuxPreferenceConstants.java\n@@ -1,16 +1,22 @@\n package com.termux.app.settings.preferences;\n \n-import com.termux.app.TermuxConstants;\n-\n /*\n- * Version: v0.2.0\n+ * Version: v0.3.0\n  *\n  * Changelog\n  *\n  * - 0.1.0 (2021-03-12)\n  *      - Initial Release.\n+ *\n  * - 0.2.0 (2021-03-13)\n  *      - Added `KEY_LOG_LEVEL` and `KEY_TERMINAL_VIEW_LOGGING_ENABLED`\n+ * \n+ * - 0.3.0 (2021-03-16)\n+ *      - Changed to per app scoping of variables so that the same file can store all constants of\n+ *          Termux app and its plugins. This will allow {@link com.termux.app.TermuxSettings} to\n+ *          manage preferences of plugins as well if they don't have launcher activity themselves\n+ *          and also allow plugin apps to make changes to preferences from background.\n+ *      - Added `KEY_LOG_LEVEL` to `TERMUX_TASKER_APP` scope.\n  */\n \n /**\n@@ -19,42 +25,64 @@\n  * instead of copying constants to random classes. The 3rd party apps can also import it for\n  * interacting with termux apps. If changes are made to this file, increment the version number\n  * and add an entry in the Changelog section above.\n- *\n- * The properties are loaded from the first file found at\n- * {@link TermuxConstants#TERMUX_PROPERTIES_PRIMARY_FILE_PATH} or\n- * {@link TermuxConstants#TERMUX_PROPERTIES_SECONDARY_FILE_PATH}\n  */\n public final class TermuxPreferenceConstants {\n \n-    /** Defines the key for whether to show terminal toolbar containing extra keys and text input field */\n-    public static final String KEY_SHOW_TERMINAL_TOOLBAR = \"show_extra_keys\";\n-    public static final boolean DEFAULT_VALUE_SHOW_TERMINAL_TOOLBAR = true;\n+    /**\n+     * Termux app constants.\n+     */\n+    public static final class TERMUX_APP {\n \n+        /**\n+         * Defines the key for whether to show terminal toolbar containing extra keys and text input field\n+         */\n+        public static final String KEY_SHOW_TERMINAL_TOOLBAR = \"show_extra_keys\";\n+        public static final boolean DEFAULT_VALUE_SHOW_TERMINAL_TOOLBAR = true;\n \n \n-    /** Defines the key for whether to always keep screen on */\n-    public static final String KEY_KEEP_SCREEN_ON = \"screen_always_on\";\n-    public static final boolean DEFAULT_VALUE_KEEP_SCREEN_ON = true;\n+        /**\n+         * Defines the key for whether to always keep screen on\n+         */\n+        public static final String KEY_KEEP_SCREEN_ON = \"screen_always_on\";\n+        public static final boolean DEFAULT_VALUE_KEEP_SCREEN_ON = true;\n \n \n+        /**\n+         * Defines the key for font size of termux terminal view\n+         */\n+        public static final String KEY_FONTSIZE = \"fontsize\";\n \n-    /** Defines the key for font size of termux terminal view */\n-    public static final String KEY_FONTSIZE = \"fontsize\";\n \n+        /**\n+         * Defines the key for current termux terminal session\n+         */\n+        public static final String KEY_CURRENT_SESSION = \"current_session\";\n \n \n-    /** Defines the key for current termux terminal session */\n-    public static final String KEY_CURRENT_SESSION = \"current_session\";\n+        /**\n+         * Defines the key for current termux log level\n+         */\n+        public static final String KEY_LOG_LEVEL = \"log_level\";\n \n \n+        /**\n+         * Defines the key for whether termux terminal view key logging is enabled or not\n+         */\n+        public static final String KEY_TERMINAL_VIEW_KEY_LOGGING_ENABLED = \"terminal_view_key_logging_enabled\";\n+        public static final boolean DEFAULT_VALUE_TERMINAL_VIEW_KEY_LOGGING_ENABLED = false;\n \n-    /** Defines the key for current termux log level */\n-    public static final String KEY_LOG_LEVEL = \"log_level\";\n+    }\n \n+    /**\n+     * Termux Tasker app constants.\n+     */\n+    public static final class TERMUX_TASKER_APP {\n \n+        /**\n+         * Defines the key for current termux log level\n+         */\n+        public static final String KEY_LOG_LEVEL = \"log_level\";\n \n-    /** Defines the key for whether termux terminal view key logging is enabled or not */\n-    public static final String KEY_TERMINAL_VIEW_KEY_LOGGING_ENABLED = \"terminal_view_key_logging_enabled\";\n-    public static final boolean DEFAULT_VALUE_TERMINAL_VIEW_KEY_LOGGING_ENABLED = false;\n+    }\n \n }\n\ndiff --git a/app/src/main/java/com/termux/app/settings/preferences/TermuxSharedPreferences.java b/app/src/main/java/com/termux/app/settings/preferences/TermuxSharedPreferences.java\n--- a/app/src/main/java/com/termux/app/settings/preferences/TermuxSharedPreferences.java\n+++ b/app/src/main/java/com/termux/app/settings/preferences/TermuxSharedPreferences.java\n@@ -8,6 +8,7 @@\n import com.termux.app.utils.Logger;\n import com.termux.app.utils.TermuxUtils;\n import com.termux.app.utils.TextDataUtils;\n+import com.termux.app.settings.preferences.TermuxPreferenceConstants.TERMUX_APP;\n \n import javax.annotation.Nonnull;\n \n@@ -35,11 +36,11 @@ private static SharedPreferences getSharedPreferences(Context context) {\n \n \n     public boolean getShowTerminalToolbar() {\n-        return mSharedPreferences.getBoolean(TermuxPreferenceConstants.KEY_SHOW_TERMINAL_TOOLBAR, TermuxPreferenceConstants.DEFAULT_VALUE_SHOW_TERMINAL_TOOLBAR);\n+        return mSharedPreferences.getBoolean(TERMUX_APP.KEY_SHOW_TERMINAL_TOOLBAR, TERMUX_APP.DEFAULT_VALUE_SHOW_TERMINAL_TOOLBAR);\n     }\n \n     public void setShowTerminalToolbar(boolean value) {\n-        mSharedPreferences.edit().putBoolean(TermuxPreferenceConstants.KEY_SHOW_TERMINAL_TOOLBAR, value).apply();\n+        mSharedPreferences.edit().putBoolean(TERMUX_APP.KEY_SHOW_TERMINAL_TOOLBAR, value).apply();\n     }\n \n     public boolean toogleShowTerminalToolbar() {\n@@ -51,11 +52,11 @@ public boolean toogleShowTerminalToolbar() {\n \n \n     public boolean getKeepScreenOn() {\n-        return mSharedPreferences.getBoolean(TermuxPreferenceConstants.KEY_KEEP_SCREEN_ON, TermuxPreferenceConstants.DEFAULT_VALUE_KEEP_SCREEN_ON);\n+        return mSharedPreferences.getBoolean(TERMUX_APP.KEY_KEEP_SCREEN_ON, TERMUX_APP.DEFAULT_VALUE_KEEP_SCREEN_ON);\n     }\n \n     public void setKeepScreenOn(boolean value) {\n-        mSharedPreferences.edit().putBoolean(TermuxPreferenceConstants.KEY_KEEP_SCREEN_ON, value).apply();\n+        mSharedPreferences.edit().putBoolean(TERMUX_APP.KEY_KEEP_SCREEN_ON, value).apply();\n     }\n \n \n@@ -82,7 +83,7 @@ public int getFontSize() {\n         String fontString;\n \n         try {\n-            fontString = mSharedPreferences.getString(TermuxPreferenceConstants.KEY_FONTSIZE, Integer.toString(DEFAULT_FONTSIZE));\n+            fontString = mSharedPreferences.getString(TERMUX_APP.KEY_FONTSIZE, Integer.toString(DEFAULT_FONTSIZE));\n             if(fontString != null)\n                 fontSize =  Integer.parseInt(fontString);\n             else\n@@ -96,7 +97,7 @@ public int getFontSize() {\n     }\n \n     public void setFontSize(String value) {\n-        mSharedPreferences.edit().putString(TermuxPreferenceConstants.KEY_FONTSIZE, value).apply();\n+        mSharedPreferences.edit().putString(TERMUX_APP.KEY_FONTSIZE, value).apply();\n     }\n \n     public void changeFontSize(Context context, boolean increase) {\n@@ -112,42 +113,38 @@ public void changeFontSize(Context context, boolean increase) {\n \n \n     public String getCurrentSession() {\n-        return mSharedPreferences.getString(TermuxPreferenceConstants.KEY_CURRENT_SESSION, \"\");\n+        return mSharedPreferences.getString(TERMUX_APP.KEY_CURRENT_SESSION, \"\");\n     }\n \n     public void setCurrentSession(String value) {\n-        mSharedPreferences.edit().putString(TermuxPreferenceConstants.KEY_CURRENT_SESSION, value).apply();\n+        mSharedPreferences.edit().putString(TERMUX_APP.KEY_CURRENT_SESSION, value).apply();\n     }\n \n \n \n     public int getLogLevel() {\n         try {\n-            return mSharedPreferences.getInt(TermuxPreferenceConstants.KEY_LOG_LEVEL, Logger.DEFAULT_LOG_LEVEL);\n+            return mSharedPreferences.getInt(TERMUX_APP.KEY_LOG_LEVEL, Logger.DEFAULT_LOG_LEVEL);\n         }\n         catch (Exception e) {\n-            Logger.logStackTraceWithMessage(\"Error getting \\\"\" + TermuxPreferenceConstants.KEY_LOG_LEVEL + \"\\\" from shared preferences\", e);\n+            Logger.logStackTraceWithMessage(\"Error getting \\\"\" + TERMUX_APP.KEY_LOG_LEVEL + \"\\\" from shared preferences\", e);\n             return Logger.DEFAULT_LOG_LEVEL;\n         }\n     }\n \n     public void setLogLevel(Context context, int logLevel) {\n         logLevel = Logger.setLogLevel(context, logLevel);\n-        mSharedPreferences.edit().putInt(TermuxPreferenceConstants.KEY_LOG_LEVEL, logLevel).apply();\n+        mSharedPreferences.edit().putInt(TERMUX_APP.KEY_LOG_LEVEL, logLevel).apply();\n     }\n \n \n \n     public boolean getTerminalViewKeyLoggingEnabled() {\n-        return mSharedPreferences.getBoolean(TermuxPreferenceConstants.KEY_TERMINAL_VIEW_KEY_LOGGING_ENABLED, TermuxPreferenceConstants.DEFAULT_VALUE_TERMINAL_VIEW_KEY_LOGGING_ENABLED);\n+        return mSharedPreferences.getBoolean(TERMUX_APP.KEY_TERMINAL_VIEW_KEY_LOGGING_ENABLED, TERMUX_APP.DEFAULT_VALUE_TERMINAL_VIEW_KEY_LOGGING_ENABLED);\n     }\n \n     public void setTerminalViewKeyLoggingEnabled(boolean value) {\n-        mSharedPreferences.edit().putBoolean(TermuxPreferenceConstants.KEY_TERMINAL_VIEW_KEY_LOGGING_ENABLED, value).apply();\n+        mSharedPreferences.edit().putBoolean(TERMUX_APP.KEY_TERMINAL_VIEW_KEY_LOGGING_ENABLED, value).apply();\n     }\n \n-\n-\n-\n-\n }",
    "output": "Updated TermuxPreferenceConstants\n\nThe `TermuxPreferenceConstants` classes has been updated to `v0.3.0`. Check its Changelog sections for info on changes."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/utils/DialogUtils.java b/app/src/main/java/com/termux/app/utils/DialogUtils.java\n--- a/app/src/main/java/com/termux/app/utils/DialogUtils.java\n+++ b/app/src/main/java/com/termux/app/utils/DialogUtils.java\n@@ -0,0 +1,71 @@\n+package com.termux.app.utils;\n+\n+import android.app.Activity;\n+import android.app.AlertDialog;\n+import android.content.DialogInterface;\n+import android.text.Selection;\n+import android.util.TypedValue;\n+import android.view.KeyEvent;\n+import android.view.ViewGroup.LayoutParams;\n+import android.widget.EditText;\n+import android.widget.LinearLayout;\n+\n+public final class DialogUtils {\n+\n+    public interface TextSetListener {\n+        void onTextSet(String text);\n+    }\n+\n+    public static void textInput(Activity activity, int titleText, String initialText,\n+                                 int positiveButtonText, final TextSetListener onPositive,\n+                                 int neutralButtonText, final TextSetListener onNeutral,\n+                                 int negativeButtonText, final TextSetListener onNegative,\n+                                 final DialogInterface.OnDismissListener onDismiss) {\n+        final EditText input = new EditText(activity);\n+        input.setSingleLine();\n+        if (initialText != null) {\n+            input.setText(initialText);\n+            Selection.setSelection(input.getText(), initialText.length());\n+        }\n+\n+        final AlertDialog[] dialogHolder = new AlertDialog[1];\n+        input.setImeActionLabel(activity.getResources().getString(positiveButtonText), KeyEvent.KEYCODE_ENTER);\n+        input.setOnEditorActionListener((v, actionId, event) -> {\n+            onPositive.onTextSet(input.getText().toString());\n+            dialogHolder[0].dismiss();\n+            return true;\n+        });\n+\n+        float dipInPixels = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 1, activity.getResources().getDisplayMetrics());\n+        // https://www.google.com/design/spec/components/dialogs.html#dialogs-specs\n+        int paddingTopAndSides = Math.round(16 * dipInPixels);\n+        int paddingBottom = Math.round(24 * dipInPixels);\n+\n+        LinearLayout layout = new LinearLayout(activity);\n+        layout.setOrientation(LinearLayout.VERTICAL);\n+        layout.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));\n+        layout.setPadding(paddingTopAndSides, paddingTopAndSides, paddingTopAndSides, paddingBottom);\n+        layout.addView(input);\n+\n+        AlertDialog.Builder builder = new AlertDialog.Builder(activity)\n+            .setTitle(titleText).setView(layout)\n+            .setPositiveButton(positiveButtonText, (d, whichButton) -> onPositive.onTextSet(input.getText().toString()));\n+\n+        if (onNeutral != null) {\n+            builder.setNeutralButton(neutralButtonText, (dialog, which) -> onNeutral.onTextSet(input.getText().toString()));\n+        }\n+\n+        if (onNegative == null) {\n+            builder.setNegativeButton(android.R.string.cancel, null);\n+        } else {\n+            builder.setNegativeButton(negativeButtonText, (dialog, which) -> onNegative.onTextSet(input.getText().toString()));\n+        }\n+\n+        if (onDismiss != null) builder.setOnDismissListener(onDismiss);\n+\n+        dialogHolder[0] = builder.create();\n+        dialogHolder[0].setCanceledOnTouchOutside(false);\n+        dialogHolder[0].show();\n+    }\n+\n+}\n\ndiff --git a/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java b/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java\n--- a/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java\n+++ b/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java\n@@ -9,7 +9,7 @@\n import android.util.Patterns;\n \n import com.termux.R;\n-import com.termux.app.DialogUtils;\n+import com.termux.app.utils.DialogUtils;\n import com.termux.app.TermuxConstants;\n import com.termux.app.TermuxConstants.TERMUX_APP.TERMUX_SERVICE;\n import com.termux.app.TermuxService;",
    "output": "Move DialogUtils to com.termux.app.utils package"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxConstants.java b/app/src/main/java/com/termux/app/TermuxConstants.java\n--- a/app/src/main/java/com/termux/app/TermuxConstants.java\n+++ b/app/src/main/java/com/termux/app/TermuxConstants.java\n@@ -5,7 +5,7 @@\n import java.io.File;\n \n /*\n- * Version: v0.3.0\n+ * Version: v0.4.0\n  *\n  * Changelog\n  *\n@@ -14,23 +14,33 @@\n  *\n  * - 0.2.0 (2021-03-11)\n  *      - Added `_DIR` and `_FILE` substrings to paths.\n- *      - Add INTERNAL_PRIVATE_APP_DATA_DIR*, TERMUX_CACHE_DIR*, TERMUX_DATABASES_DIR*,\n- *          TERMUX_SHARED_PREFERENCES_DIR*, TERMUX_BIN_PREFIX_DIR*, TERMUX_ETC_DIR*, TERMUX_INCLUDE_DIR*,\n- *          TERMUX_LIB_DIR*, TERMUX_LIBEXEC_DIR*, TERMUX_SHARE_DIR*, TERMUX_TMP_DIR*, TERMUX_VAR_DIR*,\n- *          TERMUX_STAGING_PREFIX_DIR*, TERMUX_STORAGE_HOME_DIR*, TERMUX_DEFAULT_PREFERENCES_FILE_BASENAME*,\n- *          TERMUX_DEFAULT_PREFERENCES_FILE\n+ *      - Added `INTERNAL_PRIVATE_APP_DATA_DIR*`, `TERMUX_CACHE_DIR*`, `TERMUX_DATABASES_DIR*`,\n+ *          `TERMUX_SHARED_PREFERENCES_DIR*`, `TERMUX_BIN_PREFIX_DIR*`, `TERMUX_ETC_DIR*`,\n+ *          `TERMUX_INCLUDE_DIR*`, `TERMUX_LIB_DIR*`, `TERMUX_LIBEXEC_DIR*`, `TERMUX_SHARE_DIR*`,\n+ *          `TERMUX_TMP_DIR*`, `TERMUX_VAR_DIR*`, `TERMUX_STAGING_PREFIX_DIR*`,\n+ *          `TERMUX_STORAGE_HOME_DIR*`, `TERMUX_DEFAULT_PREFERENCES_FILE_BASENAME*`,\n+ *          `TERMUX_DEFAULT_PREFERENCES_FILE`.\n  *      - Renamed `DATA_HOME_PATH` to `TERMUX_DATA_HOME_DIR_PATH`.\n  *      - Renamed `CONFIG_HOME_PATH` to `TERMUX_CONFIG_HOME_DIR_PATH`.\n  *      - Updated javadocs and spacing.\n  *\n  * - 0.3.0 (2021-03-12)\n- *      - Remove TERMUX_CACHE_DIR_PATH*, TERMUX_DATABASES_DIR_PATH*, TERMUX_SHARED_PREFERENCES_DIR_PATH*\n- *          since they may not be consistent on all devices.\n+ *      - Remove `TERMUX_CACHE_DIR_PATH*`, `TERMUX_DATABASES_DIR_PATH*`,\n+ *          `TERMUX_SHARED_PREFERENCES_DIR_PATH*` since they may not be consistent on all devices.\n  *      - Renamed `TERMUX_DEFAULT_PREFERENCES_FILE_BASENAME` to\n  *          `TERMUX_DEFAULT_PREFERENCES_FILE_BASENAME_WITHOUT_EXTENSION`. This should be used for\n  *           accessing shared preferences between Termux app and its plugins if ever needed by first\n  *           getting shared package context with {@link Context.createPackageContext(String,int}).\n  *\n+ * - 0.4.0 (2021-03-16)\n+ *      - Added `BROADCAST_TERMUX_OPENED`,\n+ *          `TERMUX_API_DEFAULT_PREFERENCES_FILE_BASENAME_WITHOUT_EXTENSION`\n+ *          `TERMUX_BOOT_DEFAULT_PREFERENCES_FILE_BASENAME_WITHOUT_EXTENSION`,\n+ *          `TERMUX_FLOAT_DEFAULT_PREFERENCES_FILE_BASENAME_WITHOUT_EXTENSION`,\n+ *          `TERMUX_STYLING_DEFAULT_PREFERENCES_FILE_BASENAME_WITHOUT_EXTENSION`,\n+ *          `TERMUX_TASKER_DEFAULT_PREFERENCES_FILE_BASENAME_WITHOUT_EXTENSION`,\n+ *          `TERMUX_WIDGET_DEFAULT_PREFERENCES_FILE_BASENAME_WITHOUT_EXTENSION`.\n+ *\n  */\n \n /**\n@@ -227,12 +237,30 @@ public final class TermuxConstants {\n \n \n     /*\n-     * Termux app core file paths.\n+     * Termux app and plugin preferences and properties file paths.\n      */\n \n     /* Termux app default SharedPreferences file basename without extension */\n     public static final String TERMUX_DEFAULT_PREFERENCES_FILE_BASENAME_WITHOUT_EXTENSION = TERMUX_PACKAGE_NAME + \"_preferences\"; // Default: \"com.termux_preferences\"\n \n+    /* Termux API app default SharedPreferences file basename without extension */\n+    public static final String TERMUX_API_DEFAULT_PREFERENCES_FILE_BASENAME_WITHOUT_EXTENSION = TERMUX_API_PACKAGE_NAME + \"_preferences\"; // Default: \"com.termux.api_preferences\"\n+\n+    /* Termux Boot app default SharedPreferences file basename without extension */\n+    public static final String TERMUX_BOOT_DEFAULT_PREFERENCES_FILE_BASENAME_WITHOUT_EXTENSION = TERMUX_BOOT_PACKAGE_NAME + \"_preferences\"; // Default: \"com.termux.boot_preferences\"\n+\n+    /* Termux Float app default SharedPreferences file basename without extension */\n+    public static final String TERMUX_FLOAT_DEFAULT_PREFERENCES_FILE_BASENAME_WITHOUT_EXTENSION = TERMUX_FLOAT_PACKAGE_NAME + \"_preferences\"; // Default: \"com.termux.window_preferences\"\n+\n+    /* Termux Styling app default SharedPreferences file basename without extension */\n+    public static final String TERMUX_STYLING_DEFAULT_PREFERENCES_FILE_BASENAME_WITHOUT_EXTENSION = TERMUX_STYLING_PACKAGE_NAME + \"_preferences\"; // Default: \"com.termux.styling_preferences\"\n+\n+    /* Termux Plugin app default SharedPreferences file basename without extension */\n+    public static final String TERMUX_TASKER_DEFAULT_PREFERENCES_FILE_BASENAME_WITHOUT_EXTENSION = TERMUX_TASKER_PACKAGE_NAME + \"_preferences\"; // Default: \"com.termux.tasker_preferences\"\n+\n+    /* Termux Widget app default SharedPreferences file basename without extension */\n+    public static final String TERMUX_WIDGET_DEFAULT_PREFERENCES_FILE_BASENAME_WITHOUT_EXTENSION = TERMUX_WIDGET_PACKAGE_NAME + \"_preferences\"; // Default: \"com.termux.widget_preferences\"\n+\n \n     /* Termux app termux.properties primary file path */\n     public static final String TERMUX_PROPERTIES_PRIMARY_FILE_PATH = TERMUX_DATA_HOME_DIR_PATH + \"/termux.properties\"; // Default: \"/data/data/com.termux/files/home/.termux/termux.properties\"\n@@ -244,6 +272,7 @@ public final class TermuxConstants {\n     /* Termux app termux.properties secondary file */\n     public static final File TERMUX_PROPERTIES_SECONDARY_FILE = new File(TERMUX_PROPERTIES_SECONDARY_FILE_PATH);\n \n+\n     /* Termux app and Termux:Styling colors.properties file path */\n     public static final String TERMUX_COLOR_PROPERTIES_FILE_PATH = TERMUX_DATA_HOME_DIR_PATH + \"/colors.properties\"; // Default: \"/data/data/com.termux/files/home/.termux/colors.properties\"\n     /* Termux app and Termux:Styling colors.properties file */\n@@ -302,6 +331,7 @@ public final class TermuxConstants {\n     public static final String PROP_DEFAULT_VALUE_ALLOW_EXTERNAL_APPS = \"false\"; // Default: \"false\"\n \n \n+    public static final String BROADCAST_TERMUX_OPENED = TERMUX_PACKAGE_NAME + \".app.OPENED\";\n \n \n ",
    "output": "Update TermuxConstants\n\nThe `TermuxConstants` classes has been updated to `v0.4.0`. Check its Changelog sections for info on changes."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/utils/Logger.java b/app/src/main/java/com/termux/app/utils/Logger.java\n--- a/app/src/main/java/com/termux/app/utils/Logger.java\n+++ b/app/src/main/java/com/termux/app/utils/Logger.java\n@@ -30,15 +30,15 @@ public class Logger {\n \n     static public void logMesssage(int logLevel, String tag, String message) {\n         if(logLevel == Log.ERROR && CURRENT_LOG_LEVEL >= LOG_LEVEL_NORMAL)\n-            Log.e(tag, message);\n+            Log.e(getFullTag(tag), message);\n         else if(logLevel == Log.WARN && CURRENT_LOG_LEVEL >= LOG_LEVEL_NORMAL)\n-            Log.w(tag, message);\n+            Log.w(getFullTag(tag), message);\n         else if(logLevel == Log.INFO && CURRENT_LOG_LEVEL >= LOG_LEVEL_NORMAL)\n-            Log.i(tag, message);\n+            Log.i(getFullTag(tag), message);\n         else if(logLevel == Log.DEBUG && CURRENT_LOG_LEVEL >= LOG_LEVEL_DEBUG)\n-            Log.d(tag, message);\n+            Log.d(getFullTag(tag), message);\n         else if(logLevel == Log.VERBOSE && CURRENT_LOG_LEVEL >= LOG_LEVEL_VERBOSE)\n-            Log.v(tag, message);\n+            Log.v(getFullTag(tag), message);\n     }\n \n \n@@ -133,9 +133,9 @@ static public void logStackTraceWithMessage(String tag, String message, Exceptio\n                 e.printStackTrace(pw);\n                 pw.close();\n                 if(message != null)\n-                    Log.e(tag, message + \":\\n\" + errors.toString());\n+                    Log.e(getFullTag(tag), message + \":\\n\" + errors.toString());\n                 else\n-                    Log.e(tag, errors.toString());\n+                    Log.e(getFullTag(tag), errors.toString());\n                 errors.close();\n             } catch (IOException e1) {\n                 e1.printStackTrace();\n@@ -220,4 +220,11 @@ public static int setLogLevel(Context context, int logLevel) {\n         return CURRENT_LOG_LEVEL;\n     }\n \n+    static public String getFullTag(String tag) {\n+        if(DEFAULT_LOG_TAG.equals(tag))\n+            return tag;\n+        else\n+            return DEFAULT_LOG_TAG + \":\" + tag;\n+    }\n+\n }",
    "output": "Prefix DEFAULT_LOG_TAG even when a tag is passed while logging"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxViewClient.java b/app/src/main/java/com/termux/app/TermuxViewClient.java\n--- a/app/src/main/java/com/termux/app/TermuxViewClient.java\n+++ b/app/src/main/java/com/termux/app/TermuxViewClient.java\n@@ -52,6 +52,16 @@ public boolean shouldBackButtonBeMappedToEscape() {\n         return mActivity.mProperties.isBackKeyTheEscapeKey();\n     }\n \n+    @Override\n+    public boolean shouldEnforeCharBasedInput() {\n+        return mActivity.mProperties.isEnforcingCharBasedInput();\n+    }\n+\n+    @Override\n+    public boolean shouldUseCtrlSpaceWorkaround() {\n+        return mActivity.mProperties.isUsingCtrlSpaceWorkaround();\n+    }\n+\n     @Override\n     public void copyModeChanged(boolean copyMode) {\n         // Disable drawer while copying.\n\ndiff --git a/app/src/main/java/com/termux/app/settings/properties/TermuxPropertyConstants.java b/app/src/main/java/com/termux/app/settings/properties/TermuxPropertyConstants.java\n--- a/app/src/main/java/com/termux/app/settings/properties/TermuxPropertyConstants.java\n+++ b/app/src/main/java/com/termux/app/settings/properties/TermuxPropertyConstants.java\n@@ -61,11 +61,22 @@ public final class TermuxPropertyConstants {\n \n \n \n+    /** Defines the key for whether to enforce character based input to fix the issue where for some devices like Samsung, the letters might not appear until enter is pressed */\n+    public static final String KEY_ENFORCE_CHAR_BASED_INPUT =  \"enforce-char-based-input\"; // Default: \"enforce-char-based-input\"\n+\n+\n+\n+\n     /** Defines the key for whether to use black UI */\n     public static final String KEY_USE_BLACK_UI =  \"use-black-ui\"; // Default: \"use-black-ui\"\n \n \n \n+    /** Defines the key for whether to use ctrl space workaround to fix the issue where ctrl+space does not work on some ROMs */\n+    public static final String KEY_USE_CTRL_SPACE_WORKAROUND =  \"ctrl-space-workaround\"; // Default: \"ctrl-space-workaround\"\n+\n+\n+\n     /** Defines the key for whether to use fullscreen */\n     public static final String KEY_USE_FULLSCREEN =  \"fullscreen\"; // Default: \"fullscreen\"\n \n@@ -155,8 +166,10 @@ public final class TermuxPropertyConstants {\n      * */\n     public static final Set<String> TERMUX_PROPERTIES_LIST = new HashSet<>(Arrays.asList(\n         // boolean\n+        KEY_ENFORCE_CHAR_BASED_INPUT,\n         KEY_USE_BACK_KEY_AS_ESCAPE_KEY,\n         KEY_USE_BLACK_UI,\n+        KEY_USE_CTRL_SPACE_WORKAROUND,\n         KEY_USE_FULLSCREEN,\n         KEY_USE_FULLSCREEN_WORKAROUND,\n         KEY_VIRTUAL_VOLUME_KEYS_DISABLED,\n@@ -183,6 +196,8 @@ public final class TermuxPropertyConstants {\n      * default: false\n      * */\n     public static final Set<String> TERMUX_DEFAULT_BOOLEAN_BEHAVIOUR_PROPERTIES_LIST = new HashSet<>(Arrays.asList(\n+        KEY_ENFORCE_CHAR_BASED_INPUT,\n+        KEY_USE_CTRL_SPACE_WORKAROUND,\n         KEY_USE_FULLSCREEN,\n         KEY_USE_FULLSCREEN_WORKAROUND,\n         TermuxConstants.PROP_ALLOW_EXTERNAL_APPS\n\ndiff --git a/app/src/main/java/com/termux/app/settings/properties/TermuxSharedProperties.java b/app/src/main/java/com/termux/app/settings/properties/TermuxSharedProperties.java\n--- a/app/src/main/java/com/termux/app/settings/properties/TermuxSharedProperties.java\n+++ b/app/src/main/java/com/termux/app/settings/properties/TermuxSharedProperties.java\n@@ -485,6 +485,10 @@ public static String getExtraKeysStyleInternalPropertyValueFromValue(String valu\n \n \n \n+    public boolean isEnforcingCharBasedInput() {\n+        return (boolean) getInternalPropertyValue(TermuxPropertyConstants.KEY_ENFORCE_CHAR_BASED_INPUT, true);\n+    }\n+\n     public boolean isBackKeyTheEscapeKey() {\n         return (boolean) getInternalPropertyValue(TermuxPropertyConstants.KEY_USE_BACK_KEY_AS_ESCAPE_KEY, true);\n     }\n@@ -493,6 +497,10 @@ public boolean isUsingBlackUI() {\n         return (boolean) getInternalPropertyValue(TermuxPropertyConstants.KEY_USE_BLACK_UI, true);\n     }\n \n+    public boolean isUsingCtrlSpaceWorkaround() {\n+        return (boolean) getInternalPropertyValue(TermuxPropertyConstants.KEY_USE_CTRL_SPACE_WORKAROUND, true);\n+    }\n+\n     public boolean isUsingFullScreen() {\n         return (boolean) getInternalPropertyValue(TermuxPropertyConstants.KEY_USE_FULLSCREEN, true);\n     }\n\ndiff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -37,12 +37,6 @@\n import com.termux.terminal.TerminalSession;\n import com.termux.view.textselection.TextSelectionCursorController;\n \n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.InputStreamReader;\n-import java.nio.charset.StandardCharsets;\n-import java.util.Properties;\n-\n /** View displaying and interacting with a {@link TerminalSession}. */\n public final class TerminalView extends View {\n \n@@ -246,9 +240,7 @@ public boolean attachSession(TerminalSession session) {\n \n     @Override\n     public InputConnection onCreateInputConnection(EditorInfo outAttrs) {\n-        Properties props = getProperties();\n-\n-        if (props.getProperty(\"enforce-char-based-input\", \"false\").equals(\"true\")) {\n+        if (mClient.shouldEnforeCharBasedInput()) {\n             // Some keyboards seems do not reset the internal state on TYPE_NULL.\n             // Affects mostly Samsung stock keyboards.\n             // https://github.com/termux/termux-app/issues/686\n@@ -529,8 +521,6 @@ public boolean onTouchEvent(MotionEvent event) {\n \n     @Override\n     public boolean onKeyPreIme(int keyCode, KeyEvent event) {\n-        Properties props = getProperties();\n-\n         if (LOG_KEY_EVENTS)\n             Log.i(EmulatorDebug.LOG_TAG, \"onKeyPreIme(keyCode=\" + keyCode + \", event=\" + event + \")\");\n         if (keyCode == KeyEvent.KEYCODE_BACK) {\n@@ -546,9 +536,9 @@ public boolean onKeyPreIme(int keyCode, KeyEvent event) {\n                         return onKeyUp(keyCode, event);\n                 }\n             }\n-        } else if (props.getProperty(\"ctrl-space-workaround\", \"false\").equals(\"true\") &&\n+        } else if (mClient.shouldUseCtrlSpaceWorkaround() &&\n                    keyCode == KeyEvent.KEYCODE_SPACE && event.isCtrlPressed()) {\n-            /* ctrl + space does not work on some ROMs without this workaround.\n+            /* ctrl+space does not work on some ROMs without this workaround.\n                However, this breaks it on devices where it works out of the box. */\n             return onKeyDown(keyCode, event);\n         }\n@@ -961,36 +951,4 @@ public void updateFloatingToolbarVisibility(MotionEvent event) {\n         }\n     }\n \n-\n-\n-\n-\n-    private Properties getProperties() {\n-        File propsFile;\n-        Properties props = new Properties();\n-        String possiblePropLocations[] = {\n-            getContext().getFilesDir() + \"/home/.termux/termux.properties\",\n-            getContext().getFilesDir() + \"/home/.config/termux/termux.properties\"\n-        };\n-\n-        propsFile = new File(possiblePropLocations[0]);\n-        int i = 0;\n-        while (!propsFile.exists() && i < possiblePropLocations.length) {\n-            propsFile = new File(possiblePropLocations[i]);\n-            i += 1;\n-        }\n-\n-        try {\n-            if (propsFile.isFile() && propsFile.canRead()) {\n-                try (FileInputStream in = new FileInputStream(propsFile)) {\n-                    props.load(new InputStreamReader(in, StandardCharsets.UTF_8));\n-                }\n-            }\n-        } catch (Exception e) {\n-            Log.e(\"termux\", \"Error loading props\", e);\n-        }\n-\n-        return props;\n-    }\n-\n }\n\ndiff --git a/terminal-view/src/main/java/com/termux/view/TerminalViewClient.java b/terminal-view/src/main/java/com/termux/view/TerminalViewClient.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalViewClient.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalViewClient.java\n@@ -25,6 +25,10 @@ public interface TerminalViewClient {\n \n     boolean shouldBackButtonBeMappedToEscape();\n \n+    boolean shouldEnforeCharBasedInput();\n+\n+    boolean shouldUseCtrlSpaceWorkaround();\n+\n     void copyModeChanged(boolean copyMode);\n \n     boolean onKeyDown(int keyCode, KeyEvent e, TerminalSession session);",
    "output": "Make TerminalView agnostic of \"termux.properties\" files.\n\n`TerminalView` will use the `TerminalViewClient` interface implemented by `TermuxViewClient` in termux-app to get \"enforce-char-based-input\" and \"ctrl-space-workaround\" property values. It will also not read the file every time it needs to get the property value and will get it from the in-memory cache of `TermuxSharedProperties`."
  },
  {
    "input": "diff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -47,7 +47,7 @@\n public final class TerminalView extends View {\n \n     /** Log view key and IME events. */\n-    private static final boolean LOG_KEY_EVENTS = true;\n+    private static final boolean LOG_KEY_EVENTS = false;\n \n     /** The currently displayed terminal session, whose emulator is {@link #mEmulator}. */\n     public TerminalSession mTermSession;",
    "output": "Disable TerminalView logging."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/RunCommandService.java b/app/src/main/java/com/termux/app/RunCommandService.java\n--- a/app/src/main/java/com/termux/app/RunCommandService.java\n+++ b/app/src/main/java/com/termux/app/RunCommandService.java\n@@ -15,6 +15,8 @@\n import com.termux.R;\n import com.termux.app.TermuxConstants.TERMUX_APP.RUN_COMMAND_SERVICE;\n import com.termux.app.TermuxConstants.TERMUX_APP.TERMUX_SERVICE;\n+import com.termux.app.settings.properties.TermuxPropertyConstants;\n+import com.termux.app.settings.properties.TermuxSharedProperties;\n \n import java.io.File;\n import java.io.FileInputStream;\n@@ -109,9 +111,9 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n             return Service.START_NOT_STICKY;\n         }\n \n-        // If allow-external-apps property to not set to \"true\"\n-        if (!allowExternalApps()) {\n-            Log.e(\"termux\", \"RunCommandService requires allow-external-apps property to be set to \\\"true\\\" in ~/.termux/termux.properties file.\");\n+        // If allow-external-apps property is not set to \"true\"\n+        if (!TermuxSharedProperties.isPropertyValueTrue(this, TermuxPropertyConstants.getTermuxPropertiesFile(), TermuxConstants.PROP_ALLOW_EXTERNAL_APPS)) {\n+            Log.e(\"termux\", \"RunCommandService requires allow-external-apps property to be set to \\\"true\\\" in \\\"\" + TermuxConstants.TERMUX_PROPERTIES_PRIMARY_FILE_PATH + \"\\\" file\");\n             return Service.START_NOT_STICKY;\n         }\n \n@@ -183,25 +185,6 @@ private void setupNotificationChannel() {\n         manager.createNotificationChannel(channel);\n     }\n \n-    private boolean allowExternalApps() {\n-        File propsFile = new File(TermuxConstants.TERMUX_PROPERTIES_PRIMARY_FILE_PATH);\n-        if (!propsFile.exists())\n-            propsFile = new File(TermuxConstants.TERMUX_PROPERTIES_SECONDARY_FILE_PATH);\n-\n-        Properties props = new Properties();\n-        try {\n-            if (propsFile.isFile() && propsFile.canRead()) {\n-                try (FileInputStream in = new FileInputStream(propsFile)) {\n-                    props.load(new InputStreamReader(in, StandardCharsets.UTF_8));\n-                }\n-            }\n-        } catch (Exception e) {\n-            Log.e(\"termux\", \"Error loading props\", e);\n-        }\n-\n-        return props.getProperty(\"allow-external-apps\", \"false\").equals(\"true\");\n-    }\n-\n     /** Replace \"$PREFIX/\" or \"~/\" prefix with termux absolute paths */\n     public static String getExpandedTermuxPath(String path) {\n         if(path != null && !path.isEmpty()) {",
    "output": "Remove function that reads the \"termux.properties\" files from RunCommandService\n\nThe `RunCommandService` will now call the `TermuxSharedProperties` for getting current value of `allow-external-apps`, instead of using its own duplicated function to read \"termux.properties\" files."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -105,8 +105,6 @@ public final class TermuxActivity extends Activity implements ServiceConnection\n     private static final String BROADCAST_TERMUX_OPENED = TermuxConstants.TERMUX_PACKAGE_NAME + \".app.OPENED\";\n \n     /** The main view of the activity showing the terminal. Initialized in onCreate(). */\n-    @SuppressWarnings(\"NullableProblems\")\n-    @NonNull\n     TerminalView mTerminalView;\n \n     ExtraKeysView mExtraKeysView;\n@@ -366,7 +364,7 @@ void sendOpenedBroadcast() {\n         for (ResolveInfo info : matches) {\n             Intent explicitBroadcast = new Intent(broadcast);\n             ComponentName cname = new ComponentName(info.activityInfo.applicationInfo.packageName,\n-                                                    info.activityInfo.name);\n+                info.activityInfo.name);\n             explicitBroadcast.setComponent(cname);\n             sendBroadcast(explicitBroadcast);\n         }\n@@ -488,7 +486,10 @@ public View getView(int position, View convertView, @NonNull ViewGroup parent) {\n                 }\n \n                 TerminalSession sessionAtRow = getItem(position);\n-                boolean sessionRunning = sessionAtRow.isRunning();\n+                if (sessionAtRow == null) return row;\n+\n+                boolean sessionRunning = false;\n+                sessionRunning = sessionAtRow.isRunning();\n \n                 TextView firstLineView = row.findViewById(R.id.row_line);\n                 if (mIsUsingBlackUI) {\n@@ -577,6 +578,7 @@ public void switchToSession(boolean forward) {\n \n     @SuppressLint(\"InflateParams\")\n     void renameSession(final TerminalSession sessionToRename) {\n+        if (sessionToRename == null) return;\n         DialogUtils.textInput(this, R.string.session_rename_title, sessionToRename.mSessionName, R.string.session_rename_positive_button, text -> {\n             sessionToRename.mSessionName = text;\n             mListViewAdapter.notifyDataSetChanged();\n@@ -629,6 +631,7 @@ protected void onStop() {\n         getDrawer().closeDrawers();\n     }\n \n+    @SuppressLint(\"RtlHardcoded\")\n     @Override\n     public void onBackPressed() {\n         if (getDrawer().isDrawerOpen(Gravity.LEFT)) {\n@@ -825,7 +828,10 @@ static LinkedHashSet<CharSequence> extractUrls(String text) {\n     }\n \n     void showUrlSelection() {\n-        String text = getCurrentTermSession().getEmulator().getScreen().getTranscriptTextWithFullLinesJoined();\n+        String text = null;\n+        if (getCurrentTermSession() != null) {\n+            text = getCurrentTermSession().getEmulator().getScreen().getTranscriptTextWithFullLinesJoined();\n+        }\n         LinkedHashSet<CharSequence> urlSet = extractUrls(text);\n         if (urlSet.isEmpty()) {\n             new AlertDialog.Builder(this).setMessage(R.string.select_url_no_found).show();\n@@ -896,11 +902,14 @@ public boolean onContextItemSelected(MenuItem item) {\n                 return true;\n             case CONTEXTMENU_KILL_PROCESS_ID:\n                 final AlertDialog.Builder b = new AlertDialog.Builder(this);\n+                final TerminalSession terminalSession = getCurrentTermSession();\n+                if (terminalSession == null) return true;\n+\n                 b.setIcon(android.R.drawable.ic_dialog_alert);\n                 b.setMessage(R.string.confirm_kill_process);\n                 b.setPositiveButton(android.R.string.yes, (dialog, id) -> {\n                     dialog.dismiss();\n-                    getCurrentTermSession().finishIfRunning();\n+                    terminalSession.finishIfRunning();\n                 });\n                 b.setNegativeButton(android.R.string.no, null);\n                 b.show();\n@@ -952,7 +961,7 @@ public boolean onContextItemSelected(MenuItem item) {\n     }\n \n     @Override\n-    public void onRequestPermissionsResult(int requestCode, @NonNull String permissions[], @NonNull int[] grantResults) {\n+    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n         if (requestCode == REQUESTCODE_PERMISSION_STORAGE && grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n             TermuxInstaller.setupStorageSymlinks(this);\n         }\n@@ -969,7 +978,9 @@ void doPaste() {\n         if (clipData == null) return;\n         CharSequence paste = clipData.getItemAt(0).coerceToText(this);\n         if (!TextUtils.isEmpty(paste))\n-            getCurrentTermSession().getEmulator().paste(paste.toString());\n+            if (getCurrentTermSession() != null) {\n+                getCurrentTermSession().getEmulator().paste(paste.toString());\n+            }\n     }\n \n     /** The current session as stored or the last one if that does not exist. */\n\ndiff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalOutput.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalOutput.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalOutput.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalOutput.java\n@@ -7,6 +7,7 @@ public abstract class TerminalOutput {\n \n     /** Write a string using the UTF-8 encoding to the terminal client. */\n     public final void write(String data) {\n+        if (data == null) return;\n         byte[] bytes = data.getBytes(StandardCharsets.UTF_8);\n         write(bytes, 0, bytes.length);\n     }",
    "output": "Fix potential null exceptions"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxViewClient.java b/app/src/main/java/com/termux/app/TermuxViewClient.java\n--- a/app/src/main/java/com/termux/app/TermuxViewClient.java\n+++ b/app/src/main/java/com/termux/app/TermuxViewClient.java\n@@ -212,6 +212,7 @@ public boolean onCodePoint(final int codePoint, boolean ctrlDown, TerminalSessio\n                 case 'q':\n                 case 'k':\n                     mActivity.toggleShowExtraKeys();\n+                    mVirtualFnKeyDown=false; // force disable fn key down to restore keyboard input into terminal view, fixes termux/termux-app#1420\n                     break;\n             }\n ",
    "output": "Restore keyboard input into terminal view when toggling extra-keys slider input with VOL_UP+q\n\nCheck #1420 for details."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/BackgroundJob.java b/app/src/main/java/com/termux/app/BackgroundJob.java\n--- a/app/src/main/java/com/termux/app/BackgroundJob.java\n+++ b/app/src/main/java/com/termux/app/BackgroundJob.java\n@@ -36,7 +36,7 @@ public BackgroundJob(String cwd, String fileToExecute, final String[] args, fina\n \n     public BackgroundJob(String cwd, String fileToExecute, final String[] args, final TermuxService service, PendingIntent pendingIntent) {\n         String[] env = buildEnvironment(false, cwd);\n-        if (cwd == null) cwd = TermuxService.HOME_PATH;\n+        if (cwd == null || cwd.isEmpty()) cwd = TermuxService.HOME_PATH;\n \n         final String[] progArray = setupProcessArgs(fileToExecute, args);\n         final String processDescription = Arrays.toString(progArray);\n@@ -136,7 +136,7 @@ private static void addToEnvIfPresent(List<String> environment, String name) {\n     static String[] buildEnvironment(boolean failSafe, String cwd) {\n         new File(TermuxService.HOME_PATH).mkdirs();\n \n-        if (cwd == null) cwd = TermuxService.HOME_PATH;\n+        if (cwd == null || cwd.isEmpty()) cwd = TermuxService.HOME_PATH;\n \n         List<String> environment = new ArrayList<>();\n \n\ndiff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -282,7 +282,7 @@ public List<TerminalSession> getSessions() {\n     TerminalSession createTermSession(String executablePath, String[] arguments, String cwd, boolean failSafe) {\n         new File(HOME_PATH).mkdirs();\n \n-        if (cwd == null) cwd = HOME_PATH;\n+        if (cwd == null || cwd.isEmpty()) cwd = HOME_PATH;\n \n         String[] env = BackgroundJob.buildEnvironment(failSafe, cwd);\n         boolean isLoginShell = false;",
    "output": "Fix current working directory default value\n\nThis commit fixes the issue when `cwd` is empty and is passed to `Runtime.getRuntime().exec(progArray, env, new File(cwd));`, it raises the `No such file or directory` exceptions when targeting sdk `29`."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/RunCommandService.java b/app/src/main/java/com/termux/app/RunCommandService.java\n--- a/app/src/main/java/com/termux/app/RunCommandService.java\n+++ b/app/src/main/java/com/termux/app/RunCommandService.java\n@@ -104,14 +104,18 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n             return Service.START_NOT_STICKY;\n         }\n \n-         Uri programUri = new Uri.Builder().scheme(\"com.termux.file\").path(getExpandedTermuxPath(intent.getStringExtra(RUN_COMMAND_PATH))).build();\n+        Uri programUri = new Uri.Builder().scheme(\"com.termux.file\").path(getExpandedTermuxPath(intent.getStringExtra(RUN_COMMAND_PATH))).build();\n \n         Intent execIntent = new Intent(TermuxService.ACTION_EXECUTE, programUri);\n         execIntent.setClass(this, TermuxService.class);\n         execIntent.putExtra(TermuxService.EXTRA_ARGUMENTS, intent.getStringArrayExtra(RUN_COMMAND_ARGUMENTS));\n-        execIntent.putExtra(TermuxService.EXTRA_CURRENT_WORKING_DIRECTORY, getExpandedTermuxPath(intent.getStringExtra(RUN_COMMAND_WORKDIR)));\n         execIntent.putExtra(TermuxService.EXTRA_EXECUTE_IN_BACKGROUND, intent.getBooleanExtra(RUN_COMMAND_BACKGROUND, false));\n \n+        String workingDirectory = intent.getStringExtra(RUN_COMMAND_WORKDIR);\n+        if (workingDirectory != null && !workingDirectory.isEmpty()) {\n+            execIntent.putExtra(TermuxService.EXTRA_CURRENT_WORKING_DIRECTORY, getExpandedTermuxPath(workingDirectory));\n+        }\n+\n         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n             this.startForegroundService(execIntent);\n         } else {",
    "output": "Fix workdir logic in RunCommandService\n\nThis commit fixes the workdir logic to not send `EXTRA_CURRENT_WORKING_DIRECTORY` extra to `TermuxService` if workdir is empty, since that will raise `No such file or directory` exceptions if `cwd` is empty when targeting sdk `29`."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/RunCommandService.java b/app/src/main/java/com/termux/app/RunCommandService.java\n--- a/app/src/main/java/com/termux/app/RunCommandService.java\n+++ b/app/src/main/java/com/termux/app/RunCommandService.java\n@@ -104,12 +104,12 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n             return Service.START_NOT_STICKY;\n         }\n \n-         Uri programUri = new Uri.Builder().scheme(\"com.termux.file\").path(parsePath(intent.getStringExtra(RUN_COMMAND_PATH))).build();\n+         Uri programUri = new Uri.Builder().scheme(\"com.termux.file\").path(getExpandedTermuxPath(intent.getStringExtra(RUN_COMMAND_PATH))).build();\n \n         Intent execIntent = new Intent(TermuxService.ACTION_EXECUTE, programUri);\n         execIntent.setClass(this, TermuxService.class);\n         execIntent.putExtra(TermuxService.EXTRA_ARGUMENTS, intent.getStringArrayExtra(RUN_COMMAND_ARGUMENTS));\n-        execIntent.putExtra(TermuxService.EXTRA_CURRENT_WORKING_DIRECTORY, parsePath(intent.getStringExtra(RUN_COMMAND_WORKDIR)));\n+        execIntent.putExtra(TermuxService.EXTRA_CURRENT_WORKING_DIRECTORY, getExpandedTermuxPath(intent.getStringExtra(RUN_COMMAND_WORKDIR)));\n         execIntent.putExtra(TermuxService.EXTRA_EXECUTE_IN_BACKGROUND, intent.getBooleanExtra(RUN_COMMAND_BACKGROUND, false));\n \n         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n@@ -188,10 +188,12 @@ private boolean allowExternalApps() {\n     }\n \n     /** Replace \"$PREFIX/\" or \"~/\" prefix with termux absolute paths */\n-    private String parsePath(String path) {\n+    public static String getExpandedTermuxPath(String path) {\n         if(path != null && !path.isEmpty()) {\n-            path = path.replaceAll(\"^\\\\$PREFIX\\\\/\", TermuxService.PREFIX_PATH + \"/\");\n-            path = path.replaceAll(\"^~\\\\/\", TermuxService.HOME_PATH + \"/\");\n+            path = path.replaceAll(\"^\\\\$PREFIX$\", TermuxService.PREFIX_PATH);\n+            path = path.replaceAll(\"^\\\\$PREFIX/\", TermuxService.PREFIX_PATH + \"/\");\n+            path = path.replaceAll(\"^~/$\", TermuxService.HOME_PATH);\n+            path = path.replaceAll(\"^~/\", TermuxService.HOME_PATH + \"/\");\n         }\n \n         return path;",
    "output": "Fix path expansion in RunCommandService\n\nThis commit fixes `getExpandedTermuxPath()` (previously `parsePath()`) not expanding path if exactly `$PREFIX` is passed and addition of extra trailing slashes in some cases."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/RunCommandService.java b/app/src/main/java/com/termux/app/RunCommandService.java\n--- a/app/src/main/java/com/termux/app/RunCommandService.java\n+++ b/app/src/main/java/com/termux/app/RunCommandService.java\n@@ -92,20 +92,30 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n         // Run again in case service is already started and onCreate() is not called\n         runStartForeground();\n \n-        if (allowExternalApps() && RUN_COMMAND_ACTION.equals(intent.getAction())) {\n-            Uri programUri = new Uri.Builder().scheme(\"com.termux.file\").path(parsePath(intent.getStringExtra(RUN_COMMAND_PATH))).build();\n-\n-            Intent execIntent = new Intent(TermuxService.ACTION_EXECUTE, programUri);\n-            execIntent.setClass(this, TermuxService.class);\n-            execIntent.putExtra(TermuxService.EXTRA_ARGUMENTS, intent.getStringArrayExtra(RUN_COMMAND_ARGUMENTS));\n-            execIntent.putExtra(TermuxService.EXTRA_CURRENT_WORKING_DIRECTORY, parsePath(intent.getStringExtra(RUN_COMMAND_WORKDIR)));\n-            execIntent.putExtra(TermuxService.EXTRA_EXECUTE_IN_BACKGROUND, intent.getBooleanExtra(RUN_COMMAND_BACKGROUND, false));\n-\n-            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n-                this.startForegroundService(execIntent);\n-            } else {\n-                this.startService(execIntent);\n-            }\n+        // If wrong action passed, then just return\n+        if (!RUN_COMMAND_ACTION.equals(intent.getAction())) {\n+            Log.e(\"termux\", \"Unexpected intent action to RunCommandService: \" + intent.getAction());\n+            return Service.START_NOT_STICKY;\n+        }\n+\n+        // If allow-external-apps property to not set to \"true\"\n+        if (!allowExternalApps()) {\n+            Log.e(\"termux\", \"RunCommandService requires allow-external-apps property to be set to \\\"true\\\" in ~/.termux/termux.properties file.\");\n+            return Service.START_NOT_STICKY;\n+        }\n+\n+         Uri programUri = new Uri.Builder().scheme(\"com.termux.file\").path(parsePath(intent.getStringExtra(RUN_COMMAND_PATH))).build();\n+\n+        Intent execIntent = new Intent(TermuxService.ACTION_EXECUTE, programUri);\n+        execIntent.setClass(this, TermuxService.class);\n+        execIntent.putExtra(TermuxService.EXTRA_ARGUMENTS, intent.getStringArrayExtra(RUN_COMMAND_ARGUMENTS));\n+        execIntent.putExtra(TermuxService.EXTRA_CURRENT_WORKING_DIRECTORY, parsePath(intent.getStringExtra(RUN_COMMAND_WORKDIR)));\n+        execIntent.putExtra(TermuxService.EXTRA_EXECUTE_IN_BACKGROUND, intent.getBooleanExtra(RUN_COMMAND_BACKGROUND, false));\n+\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n+            this.startForegroundService(execIntent);\n+        } else {\n+            this.startService(execIntent);\n         }\n \n         runStopForeground();",
    "output": "Add logcat errors in RunCommandService\n\nThis commit adds `logcat` errors if an invalid intent action is passed or if `allow-external-apps` is not set to `true` while sending an intent to `RunCommandService`, so that users can detect issues."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -414,7 +414,7 @@ public void onTitleChanged(TerminalSession updatedSession) {\n             public void onSessionFinished(final TerminalSession finishedSession) {\n                 if (mTermService.mWantsToStop) {\n                     // The service wants to stop as soon as possible.\n-                    finish();\n+                    finishActivityIfNotFinishing();\n                     return;\n                 }\n                 if (mIsVisible && finishedSession != getCurrentTermSession()) {\n@@ -550,7 +550,7 @@ public View getView(int position, View convertView, @NonNull ViewGroup parent) {\n                 });\n             } else {\n                 // The service connected while not in foreground - just bail out.\n-                finish();\n+                finishActivityIfNotFinishing();\n             }\n         } else {\n             Intent i = getIntent();\n@@ -586,7 +586,14 @@ void renameSession(final TerminalSession sessionToRename) {\n     @Override\n     public void onServiceDisconnected(ComponentName name) {\n         // Respect being stopped from the TermuxService notification action.\n-        finish();\n+        finishActivityIfNotFinishing();\n+    }\n+\n+    public void finishActivityIfNotFinishing() {\n+        // prevent duplicate calls to finish() if called from multiple places\n+        if (!TermuxActivity.this.isFinishing()) {\n+            finish();\n+        }\n     }\n \n     @Nullable\n@@ -627,7 +634,7 @@ public void onBackPressed() {\n         if (getDrawer().isDrawerOpen(Gravity.LEFT)) {\n             getDrawer().closeDrawers();\n         } else {\n-            finish();\n+            finishActivityIfNotFinishing();\n         }\n     }\n \n@@ -989,7 +996,7 @@ public void removeFinishedSession(TerminalSession finishedSession) {\n         mListViewAdapter.notifyDataSetChanged();\n         if (mTermService.getSessions().isEmpty()) {\n             // There are no sessions to show, so finish the activity.\n-            finish();\n+            finishActivityIfNotFinishing();\n         } else {\n             if (index >= service.getSessions().size()) {\n                 index = service.getSessions().size() - 1;",
    "output": "Fix \"Duplicate finish request for ActivityRecord\" errors"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -27,7 +27,6 @@\n import android.widget.Button;\n import android.widget.GridLayout;\n import android.widget.PopupWindow;\n-import android.widget.ToggleButton;\n \n import com.termux.R;\n import com.termux.view.TerminalView;\n@@ -134,14 +133,11 @@ public enum SpecialButton {\n     private static class SpecialButtonState {\n         boolean isOn = false;\n         boolean isActive = false;\n-        List<ToggleButton> buttons = new ArrayList<>();\n+        List<Button> buttons = new ArrayList<>();\n \n-        void toggle(boolean value) {\n+        void setIsActive(boolean value) {\n             isActive = value;\n-            buttons.forEach(button -> {\n-                button.setChecked(value);\n-                button.setTextColor(value ? INTERESTING_COLOR : TEXT_COLOR);\n-            });\n+            buttons.forEach(button -> button.setTextColor(value ? INTERESTING_COLOR : TEXT_COLOR));\n         }\n     }\n \n@@ -166,27 +162,23 @@ public boolean readSpecialButton(SpecialButton name) {\n         if (state == null)\n             throw new RuntimeException(\"Must be a valid special button (see source)\");\n \n-        if (!state.isOn)\n-            return false;\n-\n-        if (!state.isActive) {\n+        if (!state.isOn || !state.isActive)\n             return false;\n-        }\n \n-        state.toggle(false);\n+        state.setIsActive(false);\n \n         return true;\n     }\n \n-    private ToggleButton createSpecialButton(String buttonKey, boolean needUpdate) {\n+    private Button createSpecialButton(String buttonKey, boolean needUpdate) {\n         SpecialButtonState state = specialButtons.get(SpecialButton.valueOf(buttonKey));\n         state.isOn = true;\n-        ToggleButton toggleButton = new ToggleButton(getContext(), null, android.R.attr.buttonBarButtonStyle);\n-        toggleButton.setTextColor(state.isActive ? INTERESTING_COLOR : TEXT_COLOR);\n+        Button button = new Button(getContext(), null, android.R.attr.buttonBarButtonStyle);\n+        button.setTextColor(state.isActive ? INTERESTING_COLOR : TEXT_COLOR);\n         if (needUpdate) {\n-            state.buttons.add(toggleButton);\n+            state.buttons.add(button);\n         }\n-        return toggleButton;\n+        return button;\n     }\n \n     void popup(View view, ExtraKeyButton extraButton) {\n@@ -264,7 +256,6 @@ void reload(ExtraKeysInfos infos) {\n                 Button button;\n                 if(isSpecialButton(buttonInfo)) {\n                     button = createSpecialButton(buttonInfo.getKey(), true);\n-                    button.setClickable(true);\n                 } else {\n                     button = new Button(getContext(), null, android.R.attr.buttonBarButtonStyle);\n                 }\n@@ -291,7 +282,7 @@ void reload(ExtraKeysInfos infos) {\n                     View root = getRootView();\n                     if (isSpecialButton(buttonInfo)) {\n                         SpecialButtonState state = specialButtons.get(SpecialButton.valueOf(buttonInfo.getKey()));\n-                        state.toggle(!state.isActive);\n+                        state.setIsActive(!state.isActive);\n                     } else {\n                         sendKey(root, buttonInfo);\n                     }\n@@ -352,7 +343,7 @@ void reload(ExtraKeysInfos infos) {\n                                     if (buttonInfo.getPopup() != null) {\n                                         if (isSpecialButton(buttonInfo.getPopup())) {\n                                             SpecialButtonState state = specialButtons.get(SpecialButton.valueOf(buttonInfo.getPopup().getKey()));\n-                                            state.toggle(!state.isActive);\n+                                            state.setIsActive(!state.isActive);\n                                         } else {\n                                             sendKey(root, buttonInfo.getPopup());\n                                         }",
    "output": "ExtraKeysView: SpecialButtons use Button instead of ToggleButton"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -8,6 +8,7 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Set;\n import java.util.concurrent.Executors;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.ScheduledExecutorService;\n@@ -150,7 +151,7 @@ void toggle(boolean value) {\n         put(SpecialButton.FN, new SpecialButtonState());\n     }};\n \n-    private final List<String> specialButtonsKeys = specialButtons.keySet().stream().map(Enum::name).collect(Collectors.toList());\n+    private final Set<String> specialButtonsKeys = specialButtons.keySet().stream().map(Enum::name).collect(Collectors.toSet());\n \n     private boolean isSpecialButton(ExtraKeyButton button) {\n         return specialButtonsKeys.contains(button.getKey());",
    "output": "ExtraKeysView: Use Set instead of List for special buttons keys"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -6,13 +6,16 @@\n import android.provider.Settings;\n import android.util.AttributeSet;\n \n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.concurrent.Executors;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.ScheduledExecutorService;\n \n import java.util.Map;\n import java.util.HashMap;\n import java.util.Arrays;\n+import java.util.stream.Collectors;\n \n import android.view.Gravity;\n import android.view.HapticFeedbackConstants;\n@@ -129,15 +132,30 @@ public enum SpecialButton {\n \n     private static class SpecialButtonState {\n         boolean isOn = false;\n-        ToggleButton button = null;\n+        boolean isActive = false;\n+        List<ToggleButton> buttons = new ArrayList<>();\n+\n+        void toggle(boolean value) {\n+            isActive = value;\n+            buttons.forEach(button -> {\n+                button.setChecked(value);\n+                button.setTextColor(value ? INTERESTING_COLOR : TEXT_COLOR);\n+            });\n+        }\n     }\n \n-    private Map<SpecialButton, SpecialButtonState> specialButtons = new HashMap<SpecialButton, SpecialButtonState>() {{\n+    private final Map<SpecialButton, SpecialButtonState> specialButtons = new HashMap<SpecialButton, SpecialButtonState>() {{\n         put(SpecialButton.CTRL, new SpecialButtonState());\n         put(SpecialButton.ALT, new SpecialButtonState());\n         put(SpecialButton.FN, new SpecialButtonState());\n     }};\n \n+    private final List<String> specialButtonsKeys = specialButtons.keySet().stream().map(Enum::name).collect(Collectors.toList());\n+\n+    private boolean isSpecialButton(ExtraKeyButton button) {\n+        return specialButtonsKeys.contains(button.getKey());\n+    }\n+\n     private ScheduledExecutorService scheduledExecutor;\n     private PopupWindow popupWindow;\n     private int longPressCount;\n@@ -147,30 +165,40 @@ public boolean readSpecialButton(SpecialButton name) {\n         if (state == null)\n             throw new RuntimeException(\"Must be a valid special button (see source)\");\n \n-        if (! state.isOn)\n+        if (!state.isOn)\n             return false;\n \n-        if (state.button == null) {\n+        if (!state.isActive) {\n             return false;\n         }\n \n-        if (state.button.isPressed())\n-            return true;\n-\n-        if (! state.button.isChecked())\n-            return false;\n+        state.toggle(false);\n \n-        state.button.setChecked(false);\n-        state.button.setTextColor(TEXT_COLOR);\n         return true;\n     }\n \n-    void popup(View view, String text) {\n+    private ToggleButton createSpecialButton(String buttonKey, boolean needUpdate) {\n+        SpecialButtonState state = specialButtons.get(SpecialButton.valueOf(buttonKey));\n+        state.isOn = true;\n+        ToggleButton toggleButton = new ToggleButton(getContext(), null, android.R.attr.buttonBarButtonStyle);\n+        toggleButton.setTextColor(state.isActive ? INTERESTING_COLOR : TEXT_COLOR);\n+        if (needUpdate) {\n+            state.buttons.add(toggleButton);\n+        }\n+        return toggleButton;\n+    }\n+\n+    void popup(View view, ExtraKeyButton extraButton) {\n         int width = view.getMeasuredWidth();\n         int height = view.getMeasuredHeight();\n-        Button button = new Button(getContext(), null, android.R.attr.buttonBarButtonStyle);\n-        button.setText(text);\n-        button.setTextColor(TEXT_COLOR);\n+        Button button;\n+        if(isSpecialButton(extraButton)) {\n+            button = createSpecialButton(extraButton.getKey(), false);\n+        } else {\n+            button = new Button(getContext(), null, android.R.attr.buttonBarButtonStyle);\n+            button.setTextColor(TEXT_COLOR);\n+        }\n+        button.setText(extraButton.getDisplay());\n         button.setPadding(0, 0, 0, 0);\n         button.setMinHeight(0);\n         button.setMinWidth(0);\n@@ -219,7 +247,7 @@ void reload(ExtraKeysInfos infos) {\n             return;\n \n         for(SpecialButtonState state : specialButtons.values())\n-            state.button = null;\n+            state.buttons = new ArrayList<>();\n \n         removeAllViews();\n \n@@ -233,10 +261,8 @@ void reload(ExtraKeysInfos infos) {\n                 final ExtraKeyButton buttonInfo = buttons[row][col];\n \n                 Button button;\n-                if(Arrays.asList(\"CTRL\", \"ALT\", \"FN\").contains(buttonInfo.getKey())) {\n-                    SpecialButtonState state = specialButtons.get(SpecialButton.valueOf(buttonInfo.getKey())); // for valueOf: https://stackoverflow.com/a/604426/1980630\n-                    state.isOn = true;\n-                    button = state.button = new ToggleButton(getContext(), null, android.R.attr.buttonBarButtonStyle);\n+                if(isSpecialButton(buttonInfo)) {\n+                    button = createSpecialButton(buttonInfo.getKey(), true);\n                     button.setClickable(true);\n                 } else {\n                     button = new Button(getContext(), null, android.R.attr.buttonBarButtonStyle);\n@@ -262,10 +288,9 @@ void reload(ExtraKeysInfos infos) {\n                     }\n \n                     View root = getRootView();\n-                    if (Arrays.asList(\"CTRL\", \"ALT\", \"FN\").contains(buttonInfo.getKey())) {\n-                        ToggleButton self = (ToggleButton) finalButton;\n-                        self.setChecked(self.isChecked());\n-                        self.setTextColor(self.isChecked() ? INTERESTING_COLOR : TEXT_COLOR);\n+                    if (isSpecialButton(buttonInfo)) {\n+                        SpecialButtonState state = specialButtons.get(SpecialButton.valueOf(buttonInfo.getKey()));\n+                        state.toggle(!state.isActive);\n                     } else {\n                         sendKey(root, buttonInfo);\n                     }\n@@ -295,8 +320,7 @@ void reload(ExtraKeysInfos infos) {\n                                         scheduledExecutor = null;\n                                     }\n                                     v.setBackgroundColor(BUTTON_COLOR);\n-                                    String extraButtonDisplayedText = buttonInfo.getPopup().getDisplay();\n-                                    popup(v, extraButtonDisplayedText);\n+                                    popup(v, buttonInfo.getPopup());\n                                 }\n                                 if (popupWindow != null && event.getY() > 0) {\n                                     v.setBackgroundColor(BUTTON_PRESSED_COLOR);\n@@ -325,7 +349,12 @@ void reload(ExtraKeysInfos infos) {\n                                     popupWindow.dismiss();\n                                     popupWindow = null;\n                                     if (buttonInfo.getPopup() != null) {\n-                                        sendKey(root, buttonInfo.getPopup());\n+                                        if (isSpecialButton(buttonInfo.getPopup())) {\n+                                            SpecialButtonState state = specialButtons.get(SpecialButton.valueOf(buttonInfo.getPopup().getKey()));\n+                                            state.toggle(!state.isActive);\n+                                        } else {\n+                                            sendKey(root, buttonInfo.getPopup());\n+                                        }\n                                     }\n                                 } else {\n                                     v.performClick();",
    "output": "ExtraKeysView: Handle multiple and popup SpecialButtons"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/BackgroundJob.java b/app/src/main/java/com/termux/app/BackgroundJob.java\n--- a/app/src/main/java/com/termux/app/BackgroundJob.java\n+++ b/app/src/main/java/com/termux/app/BackgroundJob.java\n@@ -6,6 +6,8 @@\n import android.os.Bundle;\n import android.util.Log;\n \n+import com.termux.BuildConfig;\n+\n import java.io.BufferedReader;\n import java.io.File;\n import java.io.FileInputStream;\n@@ -138,6 +140,7 @@ static String[] buildEnvironment(boolean failSafe, String cwd) {\n \n         List<String> environment = new ArrayList<>();\n \n+        environment.add(\"TERMUX_VERSION=\" + BuildConfig.VERSION_NAME);\n         environment.add(\"TERM=xterm-256color\");\n         environment.add(\"COLORTERM=truecolor\");\n         environment.add(\"HOME=\" + TermuxService.HOME_PATH);",
    "output": "export app version in environment variable"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxPreferences.java b/app/src/main/java/com/termux/app/TermuxPreferences.java\n--- a/app/src/main/java/com/termux/app/TermuxPreferences.java\n+++ b/app/src/main/java/com/termux/app/TermuxPreferences.java\n@@ -210,23 +210,8 @@ void reloadFromProperties(Context context) {\n                 mUseDarkUI = nightMode == Configuration.UI_MODE_NIGHT_YES;\n         }\n \n-        switch (props.getProperty(\"fullscreen\", \"\").toLowerCase()) {\n-            case \"true\":\n-                mUseFullScreen = true;\n-                break;\n-            case \"false\":\n-            default:\n-                mUseFullScreen = false;\n-        }\n-\n-        switch (props.getProperty(\"use-fullscreen-workaround\", \"\").toLowerCase()) {\n-            case \"true\":\n-                mUseFullScreenWorkAround = true;\n-                break;\n-            case \"false\":\n-            default:\n-                mUseFullScreenWorkAround = false;\n-        }\n+        mUseFullScreen = \"true\".equals(props.getProperty(\"fullscreen\", \"false\").toLowerCase());\n+        mUseFullScreenWorkAround = \"true\".equals(props.getProperty(\"use-fullscreen-workaround\", \"false\").toLowerCase());\n \n         mDefaultWorkingDir = props.getProperty(\"default-working-directory\", TermuxService.HOME_PATH);\n         File workDir = new File(mDefaultWorkingDir);",
    "output": "TermuxPreferences: get rid of unnecessary switch()'es"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -652,7 +652,14 @@ void addNewSession(boolean failSafe, String sessionName) {\n                 .setPositiveButton(android.R.string.ok, null).show();\n         } else {\n             TerminalSession currentSession = getCurrentTermSession();\n-            String workingDirectory = (currentSession == null) ? null : currentSession.getCwd();\n+\n+            String workingDirectory;\n+            if (currentSession == null) {\n+                workingDirectory = mSettings.mDefaultWorkingDir;\n+            } else {\n+                workingDirectory = currentSession.getCwd();\n+            }\n+\n             TerminalSession newSession = mTermService.createTermSession(null, null, workingDirectory, failSafe);\n             if (sessionName != null) {\n                 newSession.mSessionName = sessionName;\n\ndiff --git a/app/src/main/java/com/termux/app/TermuxPreferences.java b/app/src/main/java/com/termux/app/TermuxPreferences.java\n--- a/app/src/main/java/com/termux/app/TermuxPreferences.java\n+++ b/app/src/main/java/com/termux/app/TermuxPreferences.java\n@@ -78,6 +78,7 @@ final static class KeyboardShortcut {\n     boolean mBackIsEscape;\n     boolean mDisableVolumeVirtualKeys;\n     boolean mShowExtraKeys;\n+    String mDefaultWorkingDir;\n \n     ExtraKeysInfos mExtraKeys;\n \n@@ -113,7 +114,7 @@ static int clamp(int value, int min, int max) {\n         } catch (NumberFormatException | ClassCastException e) {\n             mFontSize = defaultFontSize;\n         }\n-        mFontSize = clamp(mFontSize, MIN_FONTSIZE, MAX_FONTSIZE); \n+        mFontSize = clamp(mFontSize, MIN_FONTSIZE, MAX_FONTSIZE);\n     }\n \n     boolean toggleShowExtraKeys(Context context) {\n@@ -227,6 +228,14 @@ void reloadFromProperties(Context context) {\n                 mUseFullScreenWorkAround = false;\n         }\n \n+        mDefaultWorkingDir = props.getProperty(\"default-working-directory\", TermuxService.HOME_PATH);\n+        File workDir = new File(mDefaultWorkingDir);\n+        if (!workDir.exists() || !workDir.isDirectory()) {\n+            // Fallback to home directory if user configured working directory is not exist\n+            // or is a regular file.\n+            mDefaultWorkingDir = TermuxService.HOME_PATH;\n+        }\n+\n         String defaultExtraKeys = \"[[ESC, TAB, CTRL, ALT, {key: '-', popup: '|'}, DOWN, UP]]\";\n \n         try {",
    "output": "introduce a property for configuring default working directory\n\nIssue https://github.com/termux/termux-app/issues/1192."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/filepicker/TermuxDocumentsProvider.java b/app/src/main/java/com/termux/filepicker/TermuxDocumentsProvider.java\n--- a/app/src/main/java/com/termux/filepicker/TermuxDocumentsProvider.java\n+++ b/app/src/main/java/com/termux/filepicker/TermuxDocumentsProvider.java\n@@ -75,7 +75,7 @@ public Cursor queryRoots(String[] projection) throws FileNotFoundException {\n         row.add(Root.COLUMN_TITLE, applicationName);\n         row.add(Root.COLUMN_MIME_TYPES, ALL_MIME_TYPES);\n         row.add(Root.COLUMN_AVAILABLE_BYTES, BASE_DIR.getFreeSpace());\n-        row.add(Root.COLUMN_ICON, R.drawable.ic_launcher);\n+        row.add(Root.COLUMN_ICON, R.mipmap.ic_launcher);\n         return result;\n     }\n \n@@ -262,7 +262,7 @@ private void includeFile(MatrixCursor result, String docId, File file)\n         row.add(Document.COLUMN_MIME_TYPE, mimeType);\n         row.add(Document.COLUMN_LAST_MODIFIED, file.lastModified());\n         row.add(Document.COLUMN_FLAGS, flags);\n-        row.add(Document.COLUMN_ICON, R.drawable.ic_launcher);\n+        row.add(Document.COLUMN_ICON, R.mipmap.ic_launcher);\n     }\n \n }",
    "output": "documents provider: fix application icon reference"
  },
  {
    "input": "diff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -1548,7 +1548,7 @@ private Properties getProperties() {\n         };\n \n         propsFile = new File(possiblePropLocations[0]);\n-        int i = 1;\n+        int i = 0;\n         while (!propsFile.exists() && i < possiblePropLocations.length) {\n             propsFile = new File(possiblePropLocations[i]);\n             i += 1;",
    "output": "Merge remote-tracking branch 'origin/master' into numpad_arrows\n\n# Conflicts:\n#\tterminal-view/src/main/java/com/termux/view/TerminalView.java"
  },
  {
    "input": "diff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -1547,8 +1547,8 @@ private Properties getProperties() {\n         };\n \n         propsFile = new File(possiblePropLocations[0]);\n-        int i = 1;\n-        while (!propsFile.exists() && i <= possiblePropLocations.length) {\n+        int i = 0;\n+        while (!propsFile.exists() && i < possiblePropLocations.length) {\n             propsFile = new File(possiblePropLocations[i]);\n             i += 1;\n         }",
    "output": "terminal-view: fix array indexing"
  },
  {
    "input": "diff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -1549,7 +1549,7 @@ private Properties getProperties() {\n \n         propsFile = new File(possiblePropLocations[0]);\n         int i = 1;\n-        while (!propsFile.exists() && i <= possiblePropLocations.length) {\n+        while (!propsFile.exists() && i < possiblePropLocations.length) {\n             propsFile = new File(possiblePropLocations[i]);\n             i += 1;\n         }",
    "output": "fix TerminalView possiblePropLocations IOBE"
  },
  {
    "input": "diff --git a/terminal-emulator/src/main/java/com/termux/terminal/KeyHandler.java b/terminal-emulator/src/main/java/com/termux/terminal/KeyHandler.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/KeyHandler.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/KeyHandler.java\n@@ -235,8 +235,11 @@ public static String getCode(int keyCode, int keyMode, boolean cursorApp, boolea\n                 // Just do what xterm and gnome-terminal does:\n                 return prefix + (((keyMode & KEYMOD_CTRL) == 0) ? \"\\u007F\" : \"\\u0008\");\n             case KEYCODE_NUM_LOCK:\n-                return \"\\033OP\";\n-\n+                if (keypadApplication) {\n+                    return \"\\033OP\";\n+                } else {\n+                    return null;\n+                }\n             case KEYCODE_SPACE:\n                 // If ctrl is not down, return null so that it goes through normal input processing (which may e.g. cause a\n                 // combining accent to be written):",
    "output": "only send PF1 for num lock when in application mode"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -15,6 +15,7 @@\n import android.content.IntentFilter;\n import android.content.ServiceConnection;\n import android.content.pm.PackageManager;\n+import android.content.pm.ResolveInfo;\n import android.graphics.Color;\n import android.graphics.Paint;\n import android.graphics.Typeface;\n@@ -101,6 +102,8 @@ public final class TermuxActivity extends Activity implements ServiceConnection\n \n     private static final String RELOAD_STYLE_ACTION = \"com.termux.app.reload_style\";\n \n+    private static final String BROADCAST_TERMUX_OPENED = \"com.termux.app.OPENED\";\n+\n     /** The main view of the activity showing the terminal. Initialized in onCreate(). */\n     @SuppressWarnings(\"NullableProblems\")\n     @NonNull\n@@ -324,6 +327,26 @@ public void onPageSelected(int position) {\n         checkForFontAndColors();\n \n         mBellSoundId = mBellSoundPool.load(this, R.raw.bell, 1);\n+\n+        sendOpenedBroadcast();\n+    }\n+\n+    /**\n+     * Send a broadcast notifying Termux app has been opened\n+     */\n+    void sendOpenedBroadcast() {\n+        Intent broadcast = new Intent(BROADCAST_TERMUX_OPENED);\n+        List<ResolveInfo> matches = getPackageManager().queryBroadcastReceivers(broadcast, 0);\n+\n+        // send broadcast to registered Termux receivers\n+        // this technique is needed to work around broadcast changes that Oreo introduced\n+        for (ResolveInfo info : matches) {\n+            Intent explicitBroadcast = new Intent(broadcast);\n+            ComponentName cname = new ComponentName(info.activityInfo.applicationInfo.packageName,\n+                                                    info.activityInfo.name);\n+            explicitBroadcast.setComponent(cname);\n+            sendBroadcast(explicitBroadcast);\n+        }\n     }\n \n     void toggleShowExtraKeys() {",
    "output": "Merge pull request #726 from dkramer95/OpenBroadcast\n\nSends broadcast on app open to notify addon termux receivers"
  },
  {
    "input": "diff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -255,20 +255,7 @@ public boolean attachSession(TerminalSession session) {\n \n     @Override\n     public InputConnection onCreateInputConnection(EditorInfo outAttrs) {\n-        File propsFile = new File(getContext().getFilesDir() + \"/home/.termux/termux.properties\");\n-        if (!propsFile.exists())\n-            propsFile = new File(getContext().getFilesDir() + \"/home/.config/termux/termux.properties\");\n-\n-        Properties props = new Properties();\n-        try {\n-            if (propsFile.isFile() && propsFile.canRead()) {\n-                try (FileInputStream in = new FileInputStream(propsFile)) {\n-                    props.load(new InputStreamReader(in, StandardCharsets.UTF_8));\n-                }\n-            }\n-        } catch (Exception e) {\n-            Log.e(\"termux\", \"Error loading props\", e);\n-        }\n+        Properties props = getProperties();\n \n         if (props.getProperty(\"enforce-char-based-input\", \"false\").equals(\"true\")) {\n             // Some keyboards seems do not reset the internal state on TYPE_NULL.\n@@ -552,6 +539,8 @@ public boolean onTouchEvent(MotionEvent ev) {\n \n     @Override\n     public boolean onKeyPreIme(int keyCode, KeyEvent event) {\n+        Properties props = getProperties();\n+\n         if (LOG_KEY_EVENTS)\n             Log.i(EmulatorDebug.LOG_TAG, \"onKeyPreIme(keyCode=\" + keyCode + \", event=\" + event + \")\");\n         if (keyCode == KeyEvent.KEYCODE_BACK) {\n@@ -567,6 +556,11 @@ public boolean onKeyPreIme(int keyCode, KeyEvent event) {\n                         return onKeyUp(keyCode, event);\n                 }\n             }\n+        } else if (props.getProperty(\"ctrl-space-workaround\", \"false\").equals(\"true\") &&\n+                   keyCode == KeyEvent.KEYCODE_SPACE && event.isCtrlPressed()) {\n+            /* ctrl + space does not work on some ROMs without this workaround.\n+               However, this breaks it on devices where it works out of the box. */\n+            return onKeyDown(keyCode, event);\n         }\n         return super.onKeyPreIme(keyCode, event);\n     }\n@@ -1544,6 +1538,34 @@ private void updateFloatingToolbarVisibility(MotionEvent event) {\n         }\n     }\n \n+    private Properties getProperties() {\n+        File propsFile;\n+        Properties props = new Properties();\n+        String possiblePropLocations[] = {\n+            getContext().getFilesDir() + \"/home/.termux/termux.properties\",\n+            getContext().getFilesDir() + \"/home/.config/termux/termux.properties\"\n+        };\n+\n+        propsFile = new File(possiblePropLocations[0]);\n+        int i = 1;\n+        while (!propsFile.exists() && i <= possiblePropLocations.length) {\n+            propsFile = new File(possiblePropLocations[i]);\n+            i += 1;\n+        }\n+\n+        try {\n+            if (propsFile.isFile() && propsFile.canRead()) {\n+                try (FileInputStream in = new FileInputStream(propsFile)) {\n+                    props.load(new InputStreamReader(in, StandardCharsets.UTF_8));\n+                }\n+            }\n+        } catch (Exception e) {\n+            Log.e(\"termux\", \"Error loading props\", e);\n+        }\n+\n+        return props;\n+    }\n+\n     @RequiresApi(api = Build.VERSION_CODES.O)\n     @Override\n     public void autofill(AutofillValue value) {",
    "output": "Merge pull request #1869 from termux/ctrlspace\n\nAdd workaround property to fix ctrl+space on devices where this does not work"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -861,7 +861,7 @@ public boolean onContextItemSelected(MenuItem item) {\n                     // The startActivity() call is not documented to throw IllegalArgumentException.\n                     // However, crash reporting shows that it sometimes does, so catch it here.\n                     new AlertDialog.Builder(this).setMessage(R.string.styling_not_installed)\n-                        .setPositiveButton(R.string.styling_install, (dialog, which) -> startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(\"http://play.google.com/store/apps/details?id=com.termux.styling\")))).setNegativeButton(android.R.string.cancel, null).show();\n+                        .setPositiveButton(R.string.styling_install, (dialog, which) -> startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(\"https://f-droid.org/en/packages/com.termux.styling/\")))).setNegativeButton(android.R.string.cancel, null).show();\n                 }\n                 return true;\n             }",
    "output": "F-Droid URL for Termux:Styling"
  },
  {
    "input": "diff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -539,6 +539,8 @@ public boolean onTouchEvent(MotionEvent ev) {\n \n     @Override\n     public boolean onKeyPreIme(int keyCode, KeyEvent event) {\n+        Properties props = getProperties();\n+\n         if (LOG_KEY_EVENTS)\n             Log.i(EmulatorDebug.LOG_TAG, \"onKeyPreIme(keyCode=\" + keyCode + \", event=\" + event + \")\");\n         if (keyCode == KeyEvent.KEYCODE_BACK) {\n@@ -554,6 +556,11 @@ public boolean onKeyPreIme(int keyCode, KeyEvent event) {\n                         return onKeyUp(keyCode, event);\n                 }\n             }\n+        } else if (props.getProperty(\"ctrl-space-workaround\", \"false\").equals(\"true\") &&\n+                   keyCode == KeyEvent.KEYCODE_SPACE && event.isCtrlPressed()) {\n+            /* ctrl + space does not work on some ROMs without this workaround.\n+               However, this breaks it on devices where it works out of the box. */\n+            return onKeyDown(keyCode, event);\n         }\n         return super.onKeyPreIme(keyCode, event);\n     }",
    "output": "terminal-view: add \"ctrl-space-workaround\" property\n\nMakes it possible to run ctrl+space with hardware keyboards on\ndevices/ROMs where it otherwise is broken. On devices where it already\nworks this workaround breaks ctrl+space though.\n\nWhere to add this fix was investigated and found by @5bodnar."
  },
  {
    "input": "diff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -255,20 +255,7 @@ public boolean attachSession(TerminalSession session) {\n \n     @Override\n     public InputConnection onCreateInputConnection(EditorInfo outAttrs) {\n-        File propsFile = new File(getContext().getFilesDir() + \"/home/.termux/termux.properties\");\n-        if (!propsFile.exists())\n-            propsFile = new File(getContext().getFilesDir() + \"/home/.config/termux/termux.properties\");\n-\n-        Properties props = new Properties();\n-        try {\n-            if (propsFile.isFile() && propsFile.canRead()) {\n-                try (FileInputStream in = new FileInputStream(propsFile)) {\n-                    props.load(new InputStreamReader(in, StandardCharsets.UTF_8));\n-                }\n-            }\n-        } catch (Exception e) {\n-            Log.e(\"termux\", \"Error loading props\", e);\n-        }\n+        Properties props = getProperties();\n \n         if (props.getProperty(\"enforce-char-based-input\", \"false\").equals(\"true\")) {\n             // Some keyboards seems do not reset the internal state on TYPE_NULL.\n@@ -1544,6 +1531,34 @@ private void updateFloatingToolbarVisibility(MotionEvent event) {\n         }\n     }\n \n+    private Properties getProperties() {\n+        File propsFile;\n+        Properties props = new Properties();\n+        String possiblePropLocations[] = {\n+            getContext().getFilesDir() + \"/home/.termux/termux.properties\",\n+            getContext().getFilesDir() + \"/home/.config/termux/termux.properties\"\n+        };\n+\n+        propsFile = new File(possiblePropLocations[0]);\n+        int i = 1;\n+        while (!propsFile.exists() && i <= possiblePropLocations.length) {\n+            propsFile = new File(possiblePropLocations[i]);\n+            i += 1;\n+        }\n+\n+        try {\n+            if (propsFile.isFile() && propsFile.canRead()) {\n+                try (FileInputStream in = new FileInputStream(propsFile)) {\n+                    props.load(new InputStreamReader(in, StandardCharsets.UTF_8));\n+                }\n+            }\n+        } catch (Exception e) {\n+            Log.e(\"termux\", \"Error loading props\", e);\n+        }\n+\n+        return props;\n+    }\n+\n     @RequiresApi(api = Build.VERSION_CODES.O)\n     @Override\n     public void autofill(AutofillValue value) {",
    "output": "terminal-view: mv code to get properties to its own function"
  },
  {
    "input": "diff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -1197,7 +1197,7 @@ public void show() {\n             final ActionMode.Callback callback = new ActionMode.Callback() {\n                 @Override\n                 public boolean onCreateActionMode(ActionMode mode, Menu menu) {\n-                    int show = MenuItem.SHOW_AS_ACTION_ALWAYS | MenuItem.SHOW_AS_ACTION_WITH_TEXT;\n+                    int show = MenuItem.SHOW_AS_ACTION_IF_ROOM | MenuItem.SHOW_AS_ACTION_WITH_TEXT;\n \n                     ClipboardManager clipboard = (ClipboardManager) getContext().getSystemService(Context.CLIPBOARD_SERVICE);\n                     menu.add(Menu.NONE, 1, Menu.NONE, R.string.copy_text).setShowAsAction(show);",
    "output": "terminal-view: silence warning from use of SHOW_AS_ACTION_ALWAYS\n\n```\nPrefer \"SHOW_AS_ACTION_IF_ROOM\" instead of \"SHOW_AS_ACTION_ALWAYS\"\n```"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/filepicker/TermuxDocumentsProvider.java b/app/src/main/java/com/termux/filepicker/TermuxDocumentsProvider.java\n--- a/app/src/main/java/com/termux/filepicker/TermuxDocumentsProvider.java\n+++ b/app/src/main/java/com/termux/filepicker/TermuxDocumentsProvider.java\n@@ -91,9 +91,7 @@ public Cursor queryChildDocuments(String parentDocumentId, String[] projection,\n         final MatrixCursor result = new MatrixCursor(projection != null ? projection : DEFAULT_DOCUMENT_PROJECTION);\n         final File parent = getFileForDocId(parentDocumentId);\n         for (File file : parent.listFiles()) {\n-            if (!file.getName().startsWith(\".\")) {\n-                includeFile(result, null, file);\n-            }\n+            includeFile(result, null, file);\n         }\n         return result;\n     }\n@@ -177,8 +175,7 @@ public Cursor querySearchDocuments(String rootId, String query, String[] project\n             } catch (IOException e) {\n                 isInsideHome = true;\n             }\n-            final boolean isHidden = file.getName().startsWith(\".\");\n-            if (isInsideHome && !isHidden) {\n+            if (isInsideHome) {\n                 if (file.isDirectory()) {\n                     Collections.addAll(pending, file.listFiles());\n                 } else {",
    "output": "Don't exclude hidden files from document provider (#1220)\n\nCredit to @johnmellor for requesting the document provider in the\nfirst place via #79, mentioning this limitation in a comment on\nthat issue, and creating a commit like this one to address it."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/BackgroundJob.java b/app/src/main/java/com/termux/app/BackgroundJob.java\n--- a/app/src/main/java/com/termux/app/BackgroundJob.java\n+++ b/app/src/main/java/com/termux/app/BackgroundJob.java\n@@ -161,7 +161,7 @@ static String[] buildEnvironment(boolean failSafe, String cwd) {\n             environment.add(\"PATH= \" + System.getenv(\"PATH\"));\n         } else {\n             environment.add(\"LANG=en_US.UTF-8\");\n-            environment.add(\"PATH=\" + TermuxService.PREFIX_PATH + \"/bin:\" + TermuxService.PREFIX_PATH + \"/bin/applets\");\n+            environment.add(\"PATH=\" + TermuxService.PREFIX_PATH + \"/bin\");\n             environment.add(\"PWD=\" + cwd);\n             environment.add(\"TMPDIR=\" + TermuxService.PREFIX_PATH + \"/tmp\");\n         }",
    "output": "don't add $PREFIX/bin/applets to $PATH\n\nbusybox doesn't use that folder anymore, and is deprecated anyway"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -38,6 +38,7 @@\n import android.view.View;\n import android.view.ViewGroup;\n import android.view.WindowManager;\n+import android.view.autofill.AutofillManager;\n import android.view.inputmethod.InputMethodManager;\n import android.widget.ArrayAdapter;\n import android.widget.EditText;\n@@ -92,6 +93,7 @@ public final class TermuxActivity extends Activity implements ServiceConnection\n     private static final int CONTEXTMENU_STYLING_ID = 6;\n     private static final int CONTEXTMENU_HELP_ID = 8;\n     private static final int CONTEXTMENU_TOGGLE_KEEP_SCREEN_ON = 9;\n+    private static final int CONTEXTMENU_AUTOFILL_ID = 10;\n \n     private static final int MAX_SESSIONS = 8;\n \n@@ -655,6 +657,12 @@ public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuIn\n \n         menu.add(Menu.NONE, CONTEXTMENU_SELECT_URL_ID, Menu.NONE, R.string.select_url);\n         menu.add(Menu.NONE, CONTEXTMENU_SHARE_TRANSCRIPT_ID, Menu.NONE, R.string.select_all_and_share);\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n+            AutofillManager autofillManager = getSystemService(AutofillManager.class);\n+            if (autofillManager != null && autofillManager.isEnabled()) {\n+                menu.add(Menu.NONE, CONTEXTMENU_AUTOFILL_ID, Menu.NONE, R.string.autofill_password);\n+            }\n+        }\n         menu.add(Menu.NONE, CONTEXTMENU_RESET_TERMINAL_ID, Menu.NONE, R.string.reset_terminal);\n         menu.add(Menu.NONE, CONTEXTMENU_KILL_PROCESS_ID, Menu.NONE, getResources().getString(R.string.kill_process, getCurrentTermSession().getPid())).setEnabled(currentSession.isRunning());\n         menu.add(Menu.NONE, CONTEXTMENU_STYLING_ID, Menu.NONE, R.string.style_terminal);\n@@ -870,6 +878,14 @@ public boolean onContextItemSelected(MenuItem item) {\n                 }\n                 return true;\n             }\n+            case CONTEXTMENU_AUTOFILL_ID: {\n+                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n+                    AutofillManager autofillManager = getSystemService(AutofillManager.class);\n+                    if (autofillManager != null && autofillManager.isEnabled()) {\n+                        autofillManager.requestAutofill(mTerminalView);\n+                    }\n+                }\n+            }\n             default:\n                 return super.onContextItemSelected(item);\n         }\n\ndiff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -31,12 +31,15 @@\n import android.view.ViewTreeObserver;\n import android.view.WindowManager;\n import android.view.accessibility.AccessibilityManager;\n+import android.view.autofill.AutofillValue;\n import android.view.inputmethod.BaseInputConnection;\n import android.view.inputmethod.EditorInfo;\n import android.view.inputmethod.InputConnection;\n import android.widget.PopupWindow;\n import android.widget.Scroller;\n \n+import androidx.annotation.RequiresApi;\n+\n import com.termux.terminal.EmulatorDebug;\n import com.termux.terminal.KeyHandler;\n import com.termux.terminal.TerminalBuffer;\n@@ -1540,4 +1543,24 @@ private void updateFloatingToolbarVisibility(MotionEvent event) {\n             }\n         }\n     }\n+\n+    @RequiresApi(api = Build.VERSION_CODES.O)\n+    @Override\n+    public void autofill(AutofillValue value) {\n+        if (value.isText()) {\n+            mTermSession.write(value.getTextValue().toString());\n+        }\n+    }\n+\n+    @RequiresApi(api = Build.VERSION_CODES.O)\n+    @Override\n+    public int getAutofillType() {\n+        return AUTOFILL_TYPE_TEXT;\n+    }\n+\n+    @RequiresApi(api = Build.VERSION_CODES.O)\n+    @Override\n+    public AutofillValue getAutofillValue() {\n+        return AutofillValue.forText(\"\");\n+    }\n }",
    "output": "Add an \"Autofill password\" context menu action"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/RunCommandService.java b/app/src/main/java/com/termux/app/RunCommandService.java\n--- a/app/src/main/java/com/termux/app/RunCommandService.java\n+++ b/app/src/main/java/com/termux/app/RunCommandService.java\n@@ -1,13 +1,19 @@\n package com.termux.app;\n \n+import android.app.Notification;\n+import android.app.NotificationChannel;\n+import android.app.NotificationManager;\n import android.app.Service;\n+import android.content.Context;\n import android.content.Intent;\n import android.net.Uri;\n import android.os.Binder;\n import android.os.Build;\n import android.os.IBinder;\n import android.util.Log;\n \n+import com.termux.R;\n+\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.InputStreamReader;\n@@ -20,9 +26,21 @@\n  *\n  * Third-party program must declare com.termux.permission.RUN_COMMAND permission and it should be\n  * granted by user.\n- * Full path of command or script must be given in \"RUN_COMMAND_PATH\" extra.\n+ *\n+ * Absolute path of command or script must be given in \"RUN_COMMAND_PATH\" extra.\n  * The \"RUN_COMMAND_ARGUMENTS\", \"RUN_COMMAND_WORKDIR\" and \"RUN_COMMAND_BACKGROUND\" extras are \n- * optional. The background mode defaults to false.\n+ * optional. The workdir defaults to termux home. The background mode defaults to \"false\".\n+ * The command path and workdir can optionally be prefixed with \"$PREFIX/\" or \"~/\" if an absolute\n+ * path is not to be given.\n+ *\n+ * To automatically bring to foreground and start termux commands that were started with\n+ * background mode \"false\" in android >= 10 without user having to click the notification manually,\n+ * requires termux to be granted draw over apps permission due to new restrictions\n+ * of starting activities from the background, this also applies to Termux:Tasker plugin.\n+ *\n+ * To reduce the chance of termux being killed by android even further due to violation of not\n+ * being able to call startForeground() within ~5s of service start in android >= 8, the user\n+ * may disable battery optimizations for termux.\n  *\n  * Sample code to run command \"top\" with java:\n  *   Intent intent = new Intent();\n@@ -50,6 +68,9 @@ public class RunCommandService extends Service {\n     public static final String RUN_COMMAND_WORKDIR = \"com.termux.RUN_COMMAND_WORKDIR\";\n     public static final String RUN_COMMAND_BACKGROUND = \"com.termux.RUN_COMMAND_BACKGROUND\";\n \n+    private static final String NOTIFICATION_CHANNEL_ID = \"termux_run_command_notification_channel\";\n+    private static final int NOTIFICATION_ID = 1338;\n+\n     class LocalBinder extends Binder {\n         public final RunCommandService service = RunCommandService.this;\n     }\n@@ -61,14 +82,23 @@ public IBinder onBind(Intent intent) {\n         return mBinder;\n     }\n \n+    @Override\n+    public void onCreate() {\n+        runStartForeground();\n+    }\n+\n+    @Override\n     public int onStartCommand(Intent intent, int flags, int startId) {\n+        // Run again in case service is already started and onCreate() is not called\n+        runStartForeground();\n+\n         if (allowExternalApps() && RUN_COMMAND_ACTION.equals(intent.getAction())) {\n-            Uri programUri = new Uri.Builder().scheme(\"com.termux.file\").path(intent.getStringExtra(RUN_COMMAND_PATH)).build();\n+            Uri programUri = new Uri.Builder().scheme(\"com.termux.file\").path(parsePath(intent.getStringExtra(RUN_COMMAND_PATH))).build();\n \n             Intent execIntent = new Intent(TermuxService.ACTION_EXECUTE, programUri);\n             execIntent.setClass(this, TermuxService.class);\n             execIntent.putExtra(TermuxService.EXTRA_ARGUMENTS, intent.getStringArrayExtra(RUN_COMMAND_ARGUMENTS));\n-            execIntent.putExtra(TermuxService.EXTRA_CURRENT_WORKING_DIRECTORY, intent.getStringExtra(RUN_COMMAND_WORKDIR));\n+            execIntent.putExtra(TermuxService.EXTRA_CURRENT_WORKING_DIRECTORY, parsePath(intent.getStringExtra(RUN_COMMAND_WORKDIR)));\n             execIntent.putExtra(TermuxService.EXTRA_EXECUTE_IN_BACKGROUND, intent.getBooleanExtra(RUN_COMMAND_BACKGROUND, false));\n \n             if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n@@ -78,9 +108,56 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n             }\n         }\n \n+        runStopForeground();\n+\n         return Service.START_NOT_STICKY;\n     }\n \n+    private void runStartForeground() {\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n+            setupNotificationChannel();\n+            startForeground(NOTIFICATION_ID, buildNotification());\n+        }\n+    }\n+\n+    private void runStopForeground() {\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n+            stopForeground(true);\n+        }\n+    }\n+\n+    private Notification buildNotification() {\n+        Notification.Builder builder = new Notification.Builder(this);\n+        builder.setContentTitle(getText(R.string.application_name) + \" Run Command\");\n+        builder.setSmallIcon(R.drawable.ic_service_notification);\n+\n+        // Use a low priority:\n+        builder.setPriority(Notification.PRIORITY_LOW);\n+\n+        // No need to show a timestamp:\n+        builder.setShowWhen(false);\n+\n+        // Background color for small notification icon:\n+        builder.setColor(0xFF607D8B);\n+\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n+            builder.setChannelId(NOTIFICATION_CHANNEL_ID);\n+        }\n+\n+        return builder.build();\n+    }\n+\n+    private void setupNotificationChannel() {\n+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) return;\n+\n+        String channelName = \"Termux Run Command\";\n+        int importance = NotificationManager.IMPORTANCE_LOW;\n+\n+        NotificationChannel channel = new NotificationChannel(NOTIFICATION_CHANNEL_ID, channelName, importance);\n+        NotificationManager manager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);\n+        manager.createNotificationChannel(channel);\n+    }\n+\n     private boolean allowExternalApps() {\n         File propsFile = new File(TermuxService.HOME_PATH + \"/.termux/termux.properties\");\n         if (!propsFile.exists())\n@@ -99,4 +176,14 @@ private boolean allowExternalApps() {\n \n         return props.getProperty(\"allow-external-apps\", \"false\").equals(\"true\");\n     }\n+\n+    /** Replace \"$PREFIX/\" or \"~/\" prefix with termux absolute paths */\n+    private String parsePath(String path) {\n+        if(path != null && !path.isEmpty()) {\n+            path = path.replaceAll(\"^\\\\$PREFIX\\\\/\", TermuxService.PREFIX_PATH + \"/\");\n+            path = path.replaceAll(\"^~\\\\/\", TermuxService.HOME_PATH + \"/\");\n+        }\n+\n+        return path;\n+    }\n }",
    "output": "Merge pull request #1764 from agnostic-apollo/termux-run-command-crash-and-foreground-patch\n\nFix RunCommandService crash and foreground issue"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/RunCommandService.java b/app/src/main/java/com/termux/app/RunCommandService.java\n--- a/app/src/main/java/com/termux/app/RunCommandService.java\n+++ b/app/src/main/java/com/termux/app/RunCommandService.java\n@@ -87,6 +87,7 @@ public void onCreate() {\n         runStartForeground();\n     }\n \n+    @Override\n     public int onStartCommand(Intent intent, int flags, int startId) {\n         // Run again in case service is already started and onCreate() is not called\n         runStartForeground();",
    "output": "Add @override annotation to onStartCommand() function of RunCommandService."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/RunCommandService.java b/app/src/main/java/com/termux/app/RunCommandService.java\n--- a/app/src/main/java/com/termux/app/RunCommandService.java\n+++ b/app/src/main/java/com/termux/app/RunCommandService.java\n@@ -80,12 +80,12 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n         runStartForeground();\n \n         if (allowExternalApps() && RUN_COMMAND_ACTION.equals(intent.getAction())) {\n-            Uri programUri = new Uri.Builder().scheme(\"com.termux.file\").path(intent.getStringExtra(RUN_COMMAND_PATH)).build();\n+            Uri programUri = new Uri.Builder().scheme(\"com.termux.file\").path(parsePath(intent.getStringExtra(RUN_COMMAND_PATH))).build();\n \n             Intent execIntent = new Intent(TermuxService.ACTION_EXECUTE, programUri);\n             execIntent.setClass(this, TermuxService.class);\n             execIntent.putExtra(TermuxService.EXTRA_ARGUMENTS, intent.getStringArrayExtra(RUN_COMMAND_ARGUMENTS));\n-            execIntent.putExtra(TermuxService.EXTRA_CURRENT_WORKING_DIRECTORY, intent.getStringExtra(RUN_COMMAND_WORKDIR));\n+            execIntent.putExtra(TermuxService.EXTRA_CURRENT_WORKING_DIRECTORY, parsePath(intent.getStringExtra(RUN_COMMAND_WORKDIR)));\n             execIntent.putExtra(TermuxService.EXTRA_EXECUTE_IN_BACKGROUND, intent.getBooleanExtra(RUN_COMMAND_BACKGROUND, false));\n \n             if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n@@ -163,4 +163,14 @@ private boolean allowExternalApps() {\n \n         return props.getProperty(\"allow-external-apps\", \"false\").equals(\"true\");\n     }\n+\n+    /** Replace \"$PREFIX/\" or \"~/\" prefix with termux absolute paths */\n+    private String parsePath(String path) {\n+        if(path != null && !path.isEmpty()) {\n+            path = path.replaceAll(\"^\\\\$PREFIX\\\\/\", TermuxService.PREFIX_PATH + \"/\");\n+            path = path.replaceAll(\"^~\\\\/\", TermuxService.HOME_PATH + \"/\");\n+        }\n+\n+        return path;\n+    }\n }",
    "output": "Add support for \"$PREFIX/\" and \"~/\" prefix in \"RUN_COMMAND\" intent extras for paths."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/RunCommandService.java b/app/src/main/java/com/termux/app/RunCommandService.java\n--- a/app/src/main/java/com/termux/app/RunCommandService.java\n+++ b/app/src/main/java/com/termux/app/RunCommandService.java\n@@ -1,13 +1,19 @@\n package com.termux.app;\n \n+import android.app.Notification;\n+import android.app.NotificationChannel;\n+import android.app.NotificationManager;\n import android.app.Service;\n+import android.content.Context;\n import android.content.Intent;\n import android.net.Uri;\n import android.os.Binder;\n import android.os.Build;\n import android.os.IBinder;\n import android.util.Log;\n \n+import com.termux.R;\n+\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.InputStreamReader;\n@@ -50,6 +56,9 @@ public class RunCommandService extends Service {\n     public static final String RUN_COMMAND_WORKDIR = \"com.termux.RUN_COMMAND_WORKDIR\";\n     public static final String RUN_COMMAND_BACKGROUND = \"com.termux.RUN_COMMAND_BACKGROUND\";\n \n+    private static final String NOTIFICATION_CHANNEL_ID = \"termux_run_command_notification_channel\";\n+    private static final int NOTIFICATION_ID = 1338;\n+\n     class LocalBinder extends Binder {\n         public final RunCommandService service = RunCommandService.this;\n     }\n@@ -61,7 +70,15 @@ public IBinder onBind(Intent intent) {\n         return mBinder;\n     }\n \n+    @Override\n+    public void onCreate() {\n+        runStartForeground();\n+    }\n+\n     public int onStartCommand(Intent intent, int flags, int startId) {\n+        // Run again in case service is already started and onCreate() is not called\n+        runStartForeground();\n+\n         if (allowExternalApps() && RUN_COMMAND_ACTION.equals(intent.getAction())) {\n             Uri programUri = new Uri.Builder().scheme(\"com.termux.file\").path(intent.getStringExtra(RUN_COMMAND_PATH)).build();\n \n@@ -78,9 +95,56 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n             }\n         }\n \n+        runStopForeground();\n+\n         return Service.START_NOT_STICKY;\n     }\n \n+    private void runStartForeground() {\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n+            setupNotificationChannel();\n+            startForeground(NOTIFICATION_ID, buildNotification());\n+        }\n+    }\n+\n+    private void runStopForeground() {\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n+            stopForeground(true);\n+        }\n+    }\n+\n+    private Notification buildNotification() {\n+        Notification.Builder builder = new Notification.Builder(this);\n+        builder.setContentTitle(getText(R.string.application_name) + \" Run Command\");\n+        builder.setSmallIcon(R.drawable.ic_service_notification);\n+\n+        // Use a low priority:\n+        builder.setPriority(Notification.PRIORITY_LOW);\n+\n+        // No need to show a timestamp:\n+        builder.setShowWhen(false);\n+\n+        // Background color for small notification icon:\n+        builder.setColor(0xFF607D8B);\n+\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n+            builder.setChannelId(NOTIFICATION_CHANNEL_ID);\n+        }\n+\n+        return builder.build();\n+    }\n+\n+    private void setupNotificationChannel() {\n+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) return;\n+\n+        String channelName = \"Termux Run Command\";\n+        int importance = NotificationManager.IMPORTANCE_LOW;\n+\n+        NotificationChannel channel = new NotificationChannel(NOTIFICATION_CHANNEL_ID, channelName, importance);\n+        NotificationManager manager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);\n+        manager.createNotificationChannel(channel);\n+    }\n+\n     private boolean allowExternalApps() {\n         File propsFile = new File(TermuxService.HOME_PATH + \"/.termux/termux.properties\");\n         if (!propsFile.exists())",
    "output": "Fix issue where termux crashes occasionally in android >= 8 because \"startForeground()\" function is not being called before running \"startForegroundService()\" in RunCommandService."
  },
  {
    "input": "diff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n@@ -748,7 +748,7 @@ public void processCodePoint(int b) {\n                                 value = (mScreen == mAltBuffer) ? 1 : 2;\n                             } else {\n                                 int internalBit = mapDecSetBitToInternalBit(mode);\n-                                if (internalBit == -1) {\n+                                if (internalBit != -1) {\n                                     value = isDecsetInternalBitSet(internalBit) ? 1 : 2; // 1=set, 2=reset.\n                                 } else {\n                                     Log.e(EmulatorDebug.LOG_TAG, \"Got DECRQM for unrecognized private DEC mode=\" + mode);",
    "output": "TerminalEmulator: fix bug in DECRQM handling\n\nReported in https://github.com/termux/termux-app/issues/1752"
  },
  {
    "input": "diff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -44,6 +44,12 @@\n import com.termux.terminal.TerminalSession;\n import com.termux.terminal.WcWidth;\n \n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Properties;\n+\n /** View displaying and interacting with a {@link TerminalSession}. */\n public final class TerminalView extends View {\n \n@@ -246,14 +252,36 @@ public boolean attachSession(TerminalSession session) {\n \n     @Override\n     public InputConnection onCreateInputConnection(EditorInfo outAttrs) {\n-        // Using InputType.NULL is the most correct input type and avoids issues with other hacks.\n-        //\n-        // Previous keyboard issues:\n-        // https://github.com/termux/termux-packages/issues/25\n-        // https://github.com/termux/termux-app/issues/87.\n-        // https://github.com/termux/termux-app/issues/126.\n-        // https://github.com/termux/termux-app/issues/137 (japanese chars and TYPE_NULL).\n-        outAttrs.inputType = InputType.TYPE_NULL;\n+        File propsFile = new File(getContext().getFilesDir() + \"/home/.termux/termux.properties\");\n+        if (!propsFile.exists())\n+            propsFile = new File(getContext().getFilesDir() + \"/home/.config/termux/termux.properties\");\n+\n+        Properties props = new Properties();\n+        try {\n+            if (propsFile.isFile() && propsFile.canRead()) {\n+                try (FileInputStream in = new FileInputStream(propsFile)) {\n+                    props.load(new InputStreamReader(in, StandardCharsets.UTF_8));\n+                }\n+            }\n+        } catch (Exception e) {\n+            Log.e(\"termux\", \"Error loading props\", e);\n+        }\n+\n+        if (props.getProperty(\"enforce-char-based-input\", \"false\").equals(\"true\")) {\n+            // Some keyboards seems do not reset the internal state on TYPE_NULL.\n+            // Affects mostly Samsung stock keyboards.\n+            // https://github.com/termux/termux-app/issues/686\n+            outAttrs.inputType = InputType.TYPE_TEXT_VARIATION_VISIBLE_PASSWORD | InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS;\n+        } else {\n+            // Using InputType.NULL is the most correct input type and avoids issues with other hacks.\n+            //\n+            // Previous keyboard issues:\n+            // https://github.com/termux/termux-packages/issues/25\n+            // https://github.com/termux/termux-app/issues/87.\n+            // https://github.com/termux/termux-app/issues/126.\n+            // https://github.com/termux/termux-app/issues/137 (japanese chars and TYPE_NULL).\n+            outAttrs.inputType = InputType.TYPE_NULL;\n+        }\n \n         // Note that IME_ACTION_NONE cannot be used as that makes it impossible to input newlines using the on-screen\n         // keyboard on Android TV (see https://github.com/termux/termux-app/issues/221).",
    "output": "terminal view: provide a workaroud for issue with some keyboards\n\nIssue https://github.com/termux/termux-app/issues/686.\n\nNote that there can be a better workaround which I don't know..."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysInfos.java b/app/src/main/java/com/termux/app/ExtraKeysInfos.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysInfos.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysInfos.java\n@@ -1,5 +1,7 @@\n package com.termux.app;\n \n+import android.text.TextUtils;\n+\n import androidx.annotation.Nullable;\n \n import org.json.JSONArray;\n@@ -305,7 +307,7 @@ public ExtraKeyButton(ExtraKeysInfos.CharDisplayMap charDisplayMap, JSONObject c\n             keys[i] = ExtraKeysInfos.replaceAlias(keys[i]);\n         }\n \n-        this.key = String.join(\" \", keys);\n+        this.key = TextUtils.join(\" \", keys);\n \n         String displayFromConfig = config.optString(\"display\", null);\n         if (displayFromConfig != null) {",
    "output": "extra keys: use TextUtils.join instead of String.join\n\nString.join() is available only on Android API 26+ but our current\nminimal is 24.\n\nSee https://github.com/termux/termux-app/issues/1670."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -106,7 +106,7 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n         } else if (ACTION_LOCK_WAKE.equals(action)) {\n             if (mWakeLock == null) {\n                 PowerManager pm = (PowerManager) getSystemService(Context.POWER_SERVICE);\n-                mWakeLock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, EmulatorDebug.LOG_TAG);\n+                mWakeLock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, EmulatorDebug.LOG_TAG + \":service-wakelock\");\n                 mWakeLock.acquire();\n \n                 // http://tools.android.com/tech-docs/lint-in-studio-2-3#TOC-WifiManager-Leak",
    "output": "linter: fix wakelock log tag\n\nSee https://github.com/termux/termux-app/issues/1670."
  },
  {
    "input": "diff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalSession.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalSession.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalSession.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalSession.java\n@@ -110,13 +110,13 @@ private static FileDescriptor wrapFileDescriptor(int fileDescriptor) {\n \n         @Override\n         public void handleMessage(Message msg) {\n-            if (msg.what == MSG_NEW_INPUT && isRunning()) {\n-                int bytesRead = mProcessToTerminalIOQueue.read(mReceiveBuffer, false);\n-                if (bytesRead > 0) {\n-                    mEmulator.append(mReceiveBuffer, bytesRead);\n-                    notifyScreenUpdate();\n-                }\n-            } else if (msg.what == MSG_PROCESS_EXITED) {\n+            int bytesRead = mProcessToTerminalIOQueue.read(mReceiveBuffer, false);\n+            if (bytesRead > 0) {\n+                mEmulator.append(mReceiveBuffer, bytesRead);\n+                notifyScreenUpdate();\n+            }\n+\n+            if (msg.what == MSG_PROCESS_EXITED) {\n                 int exitCode = (Integer) msg.obj;\n                 cleanupResources(exitCode);\n                 mChangeCallback.onSessionFinished(TerminalSession.this);",
    "output": "terminal emulator: flush remaining process output data when terminating session"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -63,7 +63,7 @@ public final class TermuxService extends Service implements SessionChangedCallba\n     public static final String EXTRA_ARGUMENTS = \"com.termux.execute.arguments\";\n \n     public static final String EXTRA_CURRENT_WORKING_DIRECTORY = \"com.termux.execute.cwd\";\n-    private static final String EXTRA_EXECUTE_IN_BACKGROUND = \"com.termux.execute.background\";\n+    public static final String EXTRA_EXECUTE_IN_BACKGROUND = \"com.termux.execute.background\";\n \n     /** This service is only bound from inside the same process and never uses IPC. */\n     class LocalBinder extends Binder {",
    "output": "Changed static string \"EXTRA_EXECUTE_IN_BACKGROUND\" access to public"
  },
  {
    "input": "diff --git a/terminal-view/src/main/java/com/termux/view/TerminalRenderer.java b/terminal-view/src/main/java/com/termux/view/TerminalRenderer.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalRenderer.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalRenderer.java\n@@ -117,11 +117,10 @@ public final void render(TerminalEmulator mEmulator, Canvas canvas, int topRow,\n                     } else {\n                         final int columnWidthSinceLastRun = column - lastRunStartColumn;\n                         final int charsSinceLastRun = currentCharIndex - lastRunStartIndex;\n-                        int cursorColor = (lastRunInsideCursor || lastRunInsideSelection) ? mEmulator.mColors.mCurrentColors[TextStyle.COLOR_INDEX_CURSOR] : 0;\n-                        int cursorStyle = lastRunInsideSelection ? TerminalEmulator.CURSOR_STYLE_BLOCK : cursorShape;\n+                        int cursorColor = lastRunInsideCursor ? mEmulator.mColors.mCurrentColors[TextStyle.COLOR_INDEX_CURSOR] : 0;\n                         drawTextRun(canvas, line, palette, heightOffset, lastRunStartColumn, columnWidthSinceLastRun,\n                             lastRunStartIndex, charsSinceLastRun, measuredWidthForRun,\n-                            cursorColor, cursorStyle, lastRunStyle, reverseVideo);\n+                            cursorColor, cursorShape, lastRunStyle, reverseVideo || lastRunInsideSelection);\n                     }\n                     measuredWidthForRun = 0.f;\n                     lastRunStyle = style;\n@@ -143,10 +142,9 @@ public final void render(TerminalEmulator mEmulator, Canvas canvas, int topRow,\n \n             final int columnWidthSinceLastRun = columns - lastRunStartColumn;\n             final int charsSinceLastRun = currentCharIndex - lastRunStartIndex;\n-            int cursorColor = (lastRunInsideCursor || lastRunInsideSelection) ? mEmulator.mColors.mCurrentColors[TextStyle.COLOR_INDEX_CURSOR] : 0;\n-            int cursorStyle = lastRunInsideSelection ? TerminalEmulator.CURSOR_STYLE_BLOCK : cursorShape;\n+            int cursorColor = lastRunInsideCursor ? mEmulator.mColors.mCurrentColors[TextStyle.COLOR_INDEX_CURSOR] : 0;\n             drawTextRun(canvas, line, palette, heightOffset, lastRunStartColumn, columnWidthSinceLastRun, lastRunStartIndex, charsSinceLastRun,\n-                measuredWidthForRun, cursorColor, cursorStyle, lastRunStyle, reverseVideo);\n+                measuredWidthForRun, cursorColor, cursorShape, lastRunStyle, reverseVideo || lastRunInsideSelection);\n         }\n     }\n ",
    "output": "Invert selected text instead of highlighting\n\nHighlighting text in the terminal often makes it hard to read, which\ncan be problematic for users who want to adjust or review selections\nbefore copying them. For example, the default theme makes white and\ngreen text hard to read on its light gray selection background, and\nthere are plenty of other themes where the choice of text and cursor\ncolors would hinder selection readability.\n\nTo fix this issue and make selected text more legible in nearly all\ncombinations of colors, invert selected text instead of highlighting it.\nThis is more common among terminal emulators anyway:\n    Invert:    xterm, fbcon, kitty, Konsole, Alacritty, Tilix,\n               gnome-terminal (7)\n    Highlight: Termux, Terminal.app, iTerm2, Windows Terminal (4)"
  },
  {
    "input": "diff --git a/terminal-view/src/main/java/com/termux/view/TerminalRenderer.java b/terminal-view/src/main/java/com/termux/view/TerminalRenderer.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalRenderer.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalRenderer.java\n@@ -86,6 +86,7 @@ public final void render(TerminalEmulator mEmulator, Canvas canvas, int topRow,\n \n             long lastRunStyle = 0;\n             boolean lastRunInsideCursor = false;\n+            boolean lastRunInsideSelection = false;\n             int lastRunStartColumn = -1;\n             int lastRunStartIndex = 0;\n             boolean lastRunFontWidthMismatch = false;\n@@ -98,7 +99,8 @@ public final void render(TerminalEmulator mEmulator, Canvas canvas, int topRow,\n                 final int charsForCodePoint = charIsHighsurrogate ? 2 : 1;\n                 final int codePoint = charIsHighsurrogate ? Character.toCodePoint(charAtIndex, line[currentCharIndex + 1]) : charAtIndex;\n                 final int codePointWcWidth = WcWidth.width(codePoint);\n-                final boolean insideCursor = (column >= selx1 && column <= selx2) || (cursorX == column || (codePointWcWidth == 2 && cursorX == column + 1));\n+                final boolean insideCursor = (cursorX == column || (codePointWcWidth == 2 && cursorX == column + 1));\n+                final boolean insideSelection = column >= selx1 && column <= selx2;\n                 final long style = lineObject.getStyle(column);\n \n                 // Check if the measured text width for this code point is not the same as that expected by wcwidth().\n@@ -109,20 +111,22 @@ public final void render(TerminalEmulator mEmulator, Canvas canvas, int topRow,\n                     currentCharIndex, charsForCodePoint);\n                 final boolean fontWidthMismatch = Math.abs(measuredCodePointWidth / mFontWidth - codePointWcWidth) > 0.01;\n \n-                if (style != lastRunStyle || insideCursor != lastRunInsideCursor || fontWidthMismatch || lastRunFontWidthMismatch) {\n+                if (style != lastRunStyle || insideCursor != lastRunInsideCursor || insideSelection != lastRunInsideSelection || fontWidthMismatch || lastRunFontWidthMismatch) {\n                     if (column == 0) {\n                         // Skip first column as there is nothing to draw, just record the current style.\n                     } else {\n                         final int columnWidthSinceLastRun = column - lastRunStartColumn;\n                         final int charsSinceLastRun = currentCharIndex - lastRunStartIndex;\n-                        int cursorColor = lastRunInsideCursor ? mEmulator.mColors.mCurrentColors[TextStyle.COLOR_INDEX_CURSOR] : 0;\n+                        int cursorColor = (lastRunInsideCursor || lastRunInsideSelection) ? mEmulator.mColors.mCurrentColors[TextStyle.COLOR_INDEX_CURSOR] : 0;\n+                        int cursorStyle = lastRunInsideSelection ? TerminalEmulator.CURSOR_STYLE_BLOCK : cursorShape;\n                         drawTextRun(canvas, line, palette, heightOffset, lastRunStartColumn, columnWidthSinceLastRun,\n                             lastRunStartIndex, charsSinceLastRun, measuredWidthForRun,\n-                            cursorColor, cursorShape, lastRunStyle, reverseVideo);\n+                            cursorColor, cursorStyle, lastRunStyle, reverseVideo);\n                     }\n                     measuredWidthForRun = 0.f;\n                     lastRunStyle = style;\n                     lastRunInsideCursor = insideCursor;\n+                    lastRunInsideSelection = insideSelection;\n                     lastRunStartColumn = column;\n                     lastRunStartIndex = currentCharIndex;\n                     lastRunFontWidthMismatch = fontWidthMismatch;\n@@ -139,9 +143,10 @@ public final void render(TerminalEmulator mEmulator, Canvas canvas, int topRow,\n \n             final int columnWidthSinceLastRun = columns - lastRunStartColumn;\n             final int charsSinceLastRun = currentCharIndex - lastRunStartIndex;\n-            int cursorColor = lastRunInsideCursor ? mEmulator.mColors.mCurrentColors[TextStyle.COLOR_INDEX_CURSOR] : 0;\n+            int cursorColor = (lastRunInsideCursor || lastRunInsideSelection) ? mEmulator.mColors.mCurrentColors[TextStyle.COLOR_INDEX_CURSOR] : 0;\n+            int cursorStyle = lastRunInsideSelection ? TerminalEmulator.CURSOR_STYLE_BLOCK : cursorShape;\n             drawTextRun(canvas, line, palette, heightOffset, lastRunStartColumn, columnWidthSinceLastRun, lastRunStartIndex, charsSinceLastRun,\n-                measuredWidthForRun, cursorColor, cursorShape, lastRunStyle, reverseVideo);\n+                measuredWidthForRun, cursorColor, cursorStyle, lastRunStyle, reverseVideo);\n         }\n     }\n ",
    "output": "Fix selection rendering with alternate cursor styles\n\nThere is currently a bug where selection rendering is broken if the\nactive cursor shape is anything other than the default solid box.\nSelected text is normally highlighted by effectively rendering a cursor\nover all of the characters in the selection region, but if the cursor is\na bar, the resulting selection highlight is too narrow to cover the full\nwidth of the selection. Similarly, if the cursor is an underline, all of\nthe selected text will be underlined instead of highlighted.\n\nTo fix this issue, treat selections different from cursors in the\nrendering logic and force the renderer to always use the block cursor\nstyle for rendering selections. That way, we get correct behavior\nregardless of what the current cursor shape is."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/BackgroundJob.java b/app/src/main/java/com/termux/app/BackgroundJob.java\n--- a/app/src/main/java/com/termux/app/BackgroundJob.java\n+++ b/app/src/main/java/com/termux/app/BackgroundJob.java\n@@ -139,6 +139,7 @@ static String[] buildEnvironment(boolean failSafe, String cwd) {\n         List<String> environment = new ArrayList<>();\n \n         environment.add(\"TERM=xterm-256color\");\n+        environment.add(\"COLORTERM=truecolor\");\n         environment.add(\"HOME=\" + TermuxService.HOME_PATH);\n         environment.add(\"PREFIX=\" + TermuxService.PREFIX_PATH);\n         environment.add(\"BOOTCLASSPATH=\" + System.getenv(\"BOOTCLASSPATH\"));",
    "output": "export COLORTERM=truecolor"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/BackgroundJob.java b/app/src/main/java/com/termux/app/BackgroundJob.java\n--- a/app/src/main/java/com/termux/app/BackgroundJob.java\n+++ b/app/src/main/java/com/termux/app/BackgroundJob.java\n@@ -150,6 +150,7 @@ static String[] buildEnvironment(boolean failSafe, String cwd) {\n \n         // These variables are needed if running on Android 10 and higher.\n         addToEnvIfPresent(environment, \"ANDROID_ART_ROOT\");\n+        addToEnvIfPresent(environment, \"DEX2OATBOOTCLASSPATH\");\n         addToEnvIfPresent(environment, \"ANDROID_I18N_ROOT\");\n         addToEnvIfPresent(environment, \"ANDROID_RUNTIME_ROOT\");\n         addToEnvIfPresent(environment, \"ANDROID_TZDATA_ROOT\");",
    "output": "add DEX2OATBOOTCLASSPATH environment variable"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/BackgroundJob.java b/app/src/main/java/com/termux/app/BackgroundJob.java\n--- a/app/src/main/java/com/termux/app/BackgroundJob.java\n+++ b/app/src/main/java/com/termux/app/BackgroundJob.java\n@@ -147,18 +147,17 @@ static String[] buildEnvironment(boolean failSafe, String cwd) {\n         // EXTERNAL_STORAGE is needed for /system/bin/am to work on at least\n         // Samsung S7 - see https://plus.google.com/110070148244138185604/posts/gp8Lk3aCGp3.\n         environment.add(\"EXTERNAL_STORAGE=\" + System.getenv(\"EXTERNAL_STORAGE\"));\n-        // ANDROID_RUNTIME_ROOT and ANDROID_TZDATA_ROOT are required for `am` to run on Android Q\n+\n+        // These variables are needed if running on Android 10 and higher.\n         addToEnvIfPresent(environment, \"ANDROID_ART_ROOT\");\n         addToEnvIfPresent(environment, \"ANDROID_I18N_ROOT\");\n         addToEnvIfPresent(environment, \"ANDROID_RUNTIME_ROOT\");\n         addToEnvIfPresent(environment, \"ANDROID_TZDATA_ROOT\");\n+\n         if (failSafe) {\n             // Keep the default path so that system binaries can be used in the failsafe session.\n             environment.add(\"PATH= \" + System.getenv(\"PATH\"));\n         } else {\n-            if (shouldAddLdLibraryPath()) {\n-                environment.add(\"LD_LIBRARY_PATH=\" + TermuxService.PREFIX_PATH + \"/lib\");\n-            }\n             environment.add(\"LANG=en_US.UTF-8\");\n             environment.add(\"PATH=\" + TermuxService.PREFIX_PATH + \"/bin:\" + TermuxService.PREFIX_PATH + \"/bin/applets\");\n             environment.add(\"PWD=\" + cwd);\n@@ -168,20 +167,6 @@ static String[] buildEnvironment(boolean failSafe, String cwd) {\n         return environment.toArray(new String[0]);\n     }\n \n-    private static boolean shouldAddLdLibraryPath() {\n-        try (BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(TermuxService.PREFIX_PATH + \"/etc/apt/sources.list\")))) {\n-            String line;\n-            while ((line = in.readLine()) != null) {\n-                if (!line.startsWith(\"#\") && line.contains(\"//termux.net stable\")) {\n-                    return true;\n-                }\n-            }\n-        } catch (IOException e) {\n-            Log.e(LOG_TAG, \"Error trying to read sources.list\", e);\n-        }\n-        return false;\n-    }\n-\n     public static int getPid(Process p) {\n         try {\n             Field f = p.getClass().getDeclaredField(\"pid\");",
    "output": "get rid of Android 5 legacy stuff\n\nWe don't need LD_LIBRARY_PATH as of Android 7.0."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/BackgroundJob.java b/app/src/main/java/com/termux/app/BackgroundJob.java\n--- a/app/src/main/java/com/termux/app/BackgroundJob.java\n+++ b/app/src/main/java/com/termux/app/BackgroundJob.java\n@@ -148,6 +148,8 @@ static String[] buildEnvironment(boolean failSafe, String cwd) {\n         // Samsung S7 - see https://plus.google.com/110070148244138185604/posts/gp8Lk3aCGp3.\n         environment.add(\"EXTERNAL_STORAGE=\" + System.getenv(\"EXTERNAL_STORAGE\"));\n         // ANDROID_RUNTIME_ROOT and ANDROID_TZDATA_ROOT are required for `am` to run on Android Q\n+        addToEnvIfPresent(environment, \"ANDROID_ART_ROOT\");\n+        addToEnvIfPresent(environment, \"ANDROID_I18N_ROOT\");\n         addToEnvIfPresent(environment, \"ANDROID_RUNTIME_ROOT\");\n         addToEnvIfPresent(environment, \"ANDROID_TZDATA_ROOT\");\n         if (failSafe) {",
    "output": "fix am on Android R"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -39,7 +39,7 @@ public final class ExtraKeysView extends GridLayout {\n     private static final int TEXT_COLOR = 0xFFFFFFFF;\n     private static final int BUTTON_COLOR = 0x00000000;\n     private static final int INTERESTING_COLOR = 0xFF80DEEA;\n-    private static final int BUTTON_PRESSED_COLOR = 0x7FFFFFFF;\n+    private static final int BUTTON_PRESSED_COLOR = 0xFF7F7F7F;\n \n     public ExtraKeysView(Context context, AttributeSet attrs) {\n         super(context, attrs);",
    "output": "extra keys: make popup & pressed button no longer transparent\n\nFixes visual issue when popup overlaps text of upper row."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/RunCommandService.java b/app/src/main/java/com/termux/app/RunCommandService.java\n--- a/app/src/main/java/com/termux/app/RunCommandService.java\n+++ b/app/src/main/java/com/termux/app/RunCommandService.java\n@@ -30,18 +30,18 @@\n  * Sample intent for launching program \"top\" in equivalent of ADB command:\n  * am startservice -a com.termux.RUN_COMMAND --es com.termux.RUN_COMMAND_PATH /data/data/com.termux/files/usr/bin/top\n  */\n-public class RunCommand extends Service {\n+public class RunCommandService extends Service {\n \n     public static final String RUN_COMMAND_ACTION = \"com.termux.RUN_COMMAND\";\n     public static final String RUN_COMMAND_PATH = \"com.termux.RUN_COMMAND_PATH\";\n     public static final String RUN_COMMAND_ARGUMENTS = \"com.termux.RUN_COMMAND_ARGUMENTS\";\n     public static final String RUN_COMMAND_WORKDIR = \"com.termux.RUN_COMMAND_WORKDIR\";\n \n     class LocalBinder extends Binder {\n-        public final RunCommand service = RunCommand.this;\n+        public final RunCommandService service = RunCommandService.this;\n     }\n \n-    private final IBinder mBinder = new RunCommand.LocalBinder();\n+    private final IBinder mBinder = new RunCommandService.LocalBinder();\n \n     @Override\n     public IBinder onBind(Intent intent) {",
    "output": "minor refactoring: RunCommand => RunCommandService"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/RunCommand.java b/app/src/main/java/com/termux/app/RunCommand.java\n--- a/app/src/main/java/com/termux/app/RunCommand.java\n+++ b/app/src/main/java/com/termux/app/RunCommand.java\n@@ -0,0 +1,88 @@\n+package com.termux.app;\n+\n+import android.app.Service;\n+import android.content.Intent;\n+import android.net.Uri;\n+import android.os.Binder;\n+import android.os.Build;\n+import android.os.IBinder;\n+import android.util.Log;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.InputStreamReader;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Properties;\n+\n+/**\n+ * When allow-external-apps property is set to \"true\", Termux is able to process execute intents\n+ * sent by third-party applications.\n+ *\n+ * Third-party program must declare com.termux.permission.RUN_COMMAND permission.\n+ *\n+ * Intent expects following configuration:\n+ *\n+ * Action: com.termux.RUN_COMMAND\n+ * Program/script path (string): com.termux.RUN_COMMAND_PATH\n+ * Program/script arguments (string): com.termux.RUN_COMMAND_ARGUMENTS\n+ * Session working directory (string): com.termux.RUN_COMMAND_WORKDIR\n+ *\n+ * Sample intent for launching program \"top\" in equivalent of ADB command:\n+ * am startservice -a com.termux.RUN_COMMAND --es com.termux.RUN_COMMAND_PATH /data/data/com.termux/files/usr/bin/top\n+ */\n+public class RunCommand extends Service {\n+\n+    public static final String RUN_COMMAND_ACTION = \"com.termux.RUN_COMMAND\";\n+    public static final String RUN_COMMAND_PATH = \"com.termux.RUN_COMMAND_PATH\";\n+    public static final String RUN_COMMAND_ARGUMENTS = \"com.termux.RUN_COMMAND_ARGUMENTS\";\n+    public static final String RUN_COMMAND_WORKDIR = \"com.termux.RUN_COMMAND_WORKDIR\";\n+\n+    class LocalBinder extends Binder {\n+        public final RunCommand service = RunCommand.this;\n+    }\n+\n+    private final IBinder mBinder = new RunCommand.LocalBinder();\n+\n+    @Override\n+    public IBinder onBind(Intent intent) {\n+        return mBinder;\n+    }\n+\n+    public int onStartCommand(Intent intent, int flags, int startId) {\n+        if (allowExternalApps() && RUN_COMMAND_ACTION.equals(intent.getAction())) {\n+            Uri programUri = new Uri.Builder().scheme(\"com.termux.file\").path(intent.getStringExtra(RUN_COMMAND_PATH)).build();\n+\n+            Intent execIntent = new Intent(TermuxService.ACTION_EXECUTE, programUri);\n+            execIntent.setClass(this, TermuxService.class);\n+            execIntent.putExtra(TermuxService.EXTRA_ARGUMENTS, intent.getStringExtra(RUN_COMMAND_ARGUMENTS));\n+            execIntent.putExtra(TermuxService.EXTRA_CURRENT_WORKING_DIRECTORY, intent.getStringExtra(RUN_COMMAND_WORKDIR));\n+\n+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n+                this.startForegroundService(execIntent);\n+            } else {\n+                this.startService(execIntent);\n+            }\n+        }\n+\n+        return Service.START_NOT_STICKY;\n+    }\n+\n+    private boolean allowExternalApps() {\n+        File propsFile = new File(TermuxService.HOME_PATH + \"/.termux/termux.properties\");\n+        if (!propsFile.exists())\n+            propsFile = new File(TermuxService.HOME_PATH + \"/.config/termux/termux.properties\");\n+\n+        Properties props = new Properties();\n+        try {\n+            if (propsFile.isFile() && propsFile.canRead()) {\n+                try (FileInputStream in = new FileInputStream(propsFile)) {\n+                    props.load(new InputStreamReader(in, StandardCharsets.UTF_8));\n+                }\n+            }\n+        } catch (Exception e) {\n+            Log.e(\"termux\", \"Error loading props\", e);\n+        }\n+\n+        return props.getProperty(\"allow-external-apps\", \"false\").equals(\"true\");\n+    }\n+}",
    "output": "Provide a service for executing commands by third-party applications\n\nRe-implementation of https://github.com/termux/termux-app/pull/1029.\n\nIf Termux has property \"allow-external-apps\" set to \"true\", a third-party\nprogram will be able to send intents for executing custom commands\nwithin Termux environment.\n\nThird-party program must declare permission \"com.termux.permission.RUN_COMMAND\"."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -757,7 +757,7 @@ static LinkedHashSet<CharSequence> extractUrls(String text) {\n     }\n \n     void showUrlSelection() {\n-        String text = getCurrentTermSession().getEmulator().getScreen().getTranscriptText();\n+        String text = getCurrentTermSession().getEmulator().getScreen().getTranscriptTextWithFullLinesJoined();\n         LinkedHashSet<CharSequence> urlSet = extractUrls(text);\n         if (urlSet.isEmpty()) {\n             new AlertDialog.Builder(this).setMessage(R.string.select_url_no_found).show();\n\ndiff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalBuffer.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalBuffer.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalBuffer.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalBuffer.java\n@@ -45,11 +45,19 @@ public String getTranscriptTextWithoutJoinedLines() {\n         return getSelectedText(0, -getActiveTranscriptRows(), mColumns, mScreenRows, false).trim();\n     }\n \n+    public String getTranscriptTextWithFullLinesJoined() {\n+        return getSelectedText(0, -getActiveTranscriptRows(), mColumns, mScreenRows, true, true).trim();\n+    }\n+\n     public String getSelectedText(int selX1, int selY1, int selX2, int selY2) {\n         return getSelectedText(selX1, selY1, selX2, selY2, true);\n     }\n \n     public String getSelectedText(int selX1, int selY1, int selX2, int selY2, boolean joinBackLines) {\n+        return getSelectedText(selX1, selY1, selX2, selY2, true, false);\n+    }\n+\n+    public String getSelectedText(int selX1, int selY1, int selX2, int selY2, boolean joinBackLines, boolean joinFullLines) {\n         final StringBuilder builder = new StringBuilder();\n         final int columns = mColumns;\n \n@@ -87,7 +95,8 @@ public String getSelectedText(int selX1, int selY1, int selX2, int selY2, boolea\n             }\n             if (lastPrintingCharIndex != -1)\n                 builder.append(line, x1Index, lastPrintingCharIndex - x1Index + 1);\n-            if ((!joinBackLines || !rowLineWrap)\n+            boolean lineFillsWidth = lastPrintingCharIndex == x2Index - 1;\n+            if ((!joinBackLines || !rowLineWrap) && (!joinFullLines || !lineFillsWidth)\n                 && row < selY2 && row < mScreenRows - 1) builder.append('\\n');\n         }\n         return builder.toString();\n\ndiff --git a/terminal-emulator/src/test/java/com/termux/terminal/ScreenBufferTest.java b/terminal-emulator/src/test/java/com/termux/terminal/ScreenBufferTest.java\n--- a/terminal-emulator/src/test/java/com/termux/terminal/ScreenBufferTest.java\n+++ b/terminal-emulator/src/test/java/com/termux/terminal/ScreenBufferTest.java\n@@ -37,4 +37,12 @@ public void testGetSelectedText() {\n \t\twithTerminalSized(5, 3).enterString(\"ABCDE\\r\\nFGHIJ\").assertLinesAre(\"ABCDE\", \"FGHIJ\", \"     \");\n \t\tassertEquals(\"ABCDE\\nFG\", mTerminal.getSelectedText(0, 0, 1, 1));\n \t}\n+\n+\tpublic void testGetSelectedTextJoinFullLines() {\n+\t\twithTerminalSized(5, 3).enterString(\"ABCDE\\r\\nFG\");\n+\t\tassertEquals(\"ABCDEFG\", mTerminal.getScreen().getSelectedText(0, 0, 1, 1, true, true));\n+\n+\t\twithTerminalSized(5, 3).enterString(\"ABC\\r\\nFG\");\n+\t\tassertEquals(\"ABC\\nFG\", mTerminal.getScreen().getSelectedText(0, 0, 1, 1, true, true));\n+\t}\n }",
    "output": "Join lines that fills the width when selecting urls\n\nSome terminal applications, like mutt and weechat, prints a newline at\nthe end of each line even if text is wrapped. This causes urls which are\nwrapped to not be selectable in full.\n\nBy ignoring newlines when the text fills the entire width of the screen,\nthose urls can be selected. Many other terminal emulators do this as\nwell.\n\nA drawback of this is that if a url happens to fill the width of the\nscreen, the url selection will include the first word of the next line,\nbut this doesn't happen that often so I think it's an okay tradeoff.\n\nFixes #313"
  },
  {
    "input": "diff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -973,12 +973,12 @@ public boolean isShowing() {\n             return mContainer.isShowing();\n         }\n \n-        private void checkChangedOrientation() {\n-            if (!mIsDragging) {\n+        private void checkChangedOrientation(int posX, boolean force) {\n+            if (!mIsDragging && !force) {\n                 return;\n             }\n             long millis = SystemClock.currentThreadTimeMillis();\n-            if (millis - mLastTime < 50) {\n+            if (millis - mLastTime < 50 && !force) {\n                 return;\n             }\n             mLastTime = millis;\n@@ -1003,10 +1003,7 @@ private void checkChangedOrientation() {\n                 return;\n             }\n \n-            final int[] coords = mTempCoords;\n-            hostView.getLocationInWindow(coords);\n-            final int posX = coords[0] + mPointX;\n-            if (posX < clip.left) {\n+            if (posX - mHandleWidth < clip.left) {\n                 changeOrientation(RIGHT);\n             } else if (posX + mHandleWidth > clip.right) {\n                 changeOrientation(LEFT);\n@@ -1050,13 +1047,14 @@ private boolean isPositionVisible() {\n                 posY >= clip.top && posY <= clip.bottom;\n         }\n \n-        private void moveTo(int x, int y) {\n-            mPointX = x;\n+        private void moveTo(int x, int y, boolean forceOrientationCheck) {\n+            float oldHotspotX = mHotspotX;\n+            checkChangedOrientation(x, forceOrientationCheck);\n+            mPointX = (int) (x - (isShowing() ? oldHotspotX : mHotspotX));\n             mPointY = y;\n-            checkChangedOrientation();\n             if (isPositionVisible()) {\n                 int[] coords = null;\n-                if (mContainer.isShowing()) {\n+                if (isShowing()) {\n                     coords = mTempCoords;\n                     TerminalView.this.getLocationInWindow(coords);\n                     int x1 = coords[0] + mPointX;\n@@ -1138,10 +1136,10 @@ public boolean isDragging() {\n             return mIsDragging;\n         }\n \n-        void positionAtCursor(final int cx, final int cy) {\n-            int left = (int) (getPointX(cx) - mHotspotX);\n+        void positionAtCursor(final int cx, final int cy, boolean forceOrientationCheck) {\n+            int left = getPointX(cx);\n             int bottom = getPointY(cy + 1);\n-            moveTo(left, bottom);\n+            moveTo(left, bottom, forceOrientationCheck);\n         }\n     }\n \n@@ -1162,9 +1160,8 @@ private class SelectionModifierCursorController implements CursorController {\n \n         public void show() {\n             mIsShowing = true;\n-            updatePosition();\n-            mStartHandle.show();\n-            mEndHandle.show();\n+            mStartHandle.positionAtCursor(mSelX1, mSelY1, true);\n+            mEndHandle.positionAtCursor(mSelX2 + 1, mSelY2, true);\n \n             final ActionMode.Callback callback = new ActionMode.Callback() {\n                 @Override\n@@ -1240,7 +1237,7 @@ public void onDestroyActionMode(ActionMode mode) {\n                 public void onGetContentRect(ActionMode mode, View view, Rect outRect) {\n                     int x1 = Math.round(mSelX1 * mRenderer.mFontWidth);\n                     int x2 = Math.round(mSelX2 * mRenderer.mFontWidth);\n-                    int y1 = Math.round((mSelY1 - mTopRow) * mRenderer.mFontLineSpacing);\n+                    int y1 = Math.round((mSelY1 - 1 - mTopRow) * mRenderer.mFontLineSpacing);\n                     int y2 = Math.round((mSelY2 + 1 - mTopRow) * mRenderer.mFontLineSpacing);\n \n \n@@ -1395,9 +1392,9 @@ public void updatePosition() {\n                 return;\n             }\n \n-            mStartHandle.positionAtCursor(mSelX1, mSelY1);\n+            mStartHandle.positionAtCursor(mSelX1, mSelY1, false);\n \n-            mEndHandle.positionAtCursor(mSelX2 + 1, mSelY2); //bug\n+            mEndHandle.positionAtCursor(mSelX2 + 1, mSelY2, false);\n \n             if (mActionMode != null) {\n                 mActionMode.invalidate();",
    "output": "Set orientation of HandleView in show (#1477)\n\n* Place long press menu above selection\r\n\r\nPreviously, the long press menu would cover the first line of the\r\nselection.\r\n\r\n* Flip selection handle at different positions depending on drag direction\r\n\r\nWhen the selection handle changes direction, the selection jumps to the\r\nnew point of the handle. When the handle changes direction at the same\r\nplace when you come from the left as from the right, that makes it\r\nimpossible to select the characters which are at the position where it\r\nchanges direction.\r\n\r\nWith this change the handle remains pointing towards the edge further\r\ninto the line when you drag it from the edge and against the center.\r\n\r\n* Set orientation of HandleView when showing it\r\n\r\nWhen you hold down on a word that starts or ends at the edge of the\r\nscreen, the handle will appear outside of the screen. This happens\r\nbecause the orientation was only switched when the handle is dragged, so\r\nwhen it is shown it just used the same orientation as it had for the\r\nlast selection.\r\n\r\nRelates to #334, but not sure if it fixes it completely."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxPreferences.java b/app/src/main/java/com/termux/app/TermuxPreferences.java\n--- a/app/src/main/java/com/termux/app/TermuxPreferences.java\n+++ b/app/src/main/java/com/termux/app/TermuxPreferences.java\n@@ -2,6 +2,7 @@\n \n import android.content.Context;\n import android.content.SharedPreferences;\n+import android.content.res.Configuration;\n import android.preference.PreferenceManager;\n import android.util.Log;\n import android.util.TypedValue;\n@@ -58,7 +59,7 @@ final static class KeyboardShortcut {\n     private static final String CURRENT_SESSION_KEY = \"current_session\";\n     private static final String SCREEN_ALWAYS_ON_KEY = \"screen_always_on\";\n \n-    private String mUseDarkUI;\n+    private boolean mUseDarkUI;\n     private boolean mScreenAlwaysOn;\n     private int mFontSize;\n \n@@ -129,7 +130,7 @@ boolean isScreenAlwaysOn() {\n     }\n \n     boolean isUsingBlackUI() {\n-        return mUseDarkUI.toLowerCase().equals(\"true\");\n+        return mUseDarkUI;\n     }\n \n     void setScreenAlwaysOn(Context context, boolean newValue) {\n@@ -179,7 +180,17 @@ void reloadFromProperties(Context context) {\n                 break;\n         }\n \n-        mUseDarkUI = props.getProperty(\"use-black-ui\", \"false\");\n+        switch (props.getProperty(\"use-black-ui\", \"\").toLowerCase()) {\n+            case \"true\":\n+                mUseDarkUI = true;\n+                break;\n+            case \"false\":\n+                mUseDarkUI = false;\n+                break;\n+            default:\n+                int nightMode = context.getResources().getConfiguration().uiMode & Configuration.UI_MODE_NIGHT_MASK;\n+                mUseDarkUI = nightMode == Configuration.UI_MODE_NIGHT_YES;\n+        }\n \n         try {\n             JSONArray arr = new JSONArray(props.getProperty(\"extra-keys\", \"[['ESC', 'TAB', 'CTRL', 'ALT', '-', 'DOWN', 'UP']]\"));",
    "output": "Support auto detection of dark theme\n\nBy default it uses the system setting. If use-black-ui is set to either\ntrue or false, that overrides it.\n\nFixes #1351 properly, fixes #1354"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxPreferences.java b/app/src/main/java/com/termux/app/TermuxPreferences.java\n--- a/app/src/main/java/com/termux/app/TermuxPreferences.java\n+++ b/app/src/main/java/com/termux/app/TermuxPreferences.java\n@@ -162,8 +162,8 @@ void reloadFromProperties(Context context) {\n                     props.load(new InputStreamReader(in, StandardCharsets.UTF_8));\n                 }\n             }\n-        } catch (IOException e) {\n-            Toast.makeText(context, \"Could not open properties file termux.properties.\", Toast.LENGTH_LONG).show();\n+        } catch (Exception e) {\n+            Toast.makeText(context, \"Could not open properties file termux.properties: \" + e.getMessage(), Toast.LENGTH_LONG).show();\n             Log.e(\"termux\", \"Error loading props\", e);\n         }\n ",
    "output": "Handle all exceptions when loading termux.properties (#1590)\n\n* Catch all exceptions which can occur.\r\n* Print short description in toast message about occurred exception."
  },
  {
    "input": "diff --git a/app/src/test/java/com/termux/app/TermuxActivityTest.java b/app/src/test/java/com/termux/app/TermuxActivityTest.java\n--- a/app/src/test/java/com/termux/app/TermuxActivityTest.java\n+++ b/app/src/test/java/com/termux/app/TermuxActivityTest.java\n@@ -22,6 +22,9 @@ public void testExtractUrls() {\n \n         assertUrlsAre(\"hello http://example.com world and http://more.example.com with secure https://more.example.com\",\n             \"http://example.com\", \"http://more.example.com\", \"https://more.example.com\");\n+\n+        assertUrlsAre(\"hello https://example.com/#bar https://example.com/foo#bar\",\n+            \"https://example.com/#bar\", \"https://example.com/foo#bar\");\n     }\n \n }",
    "output": "Add tests for URL fragment"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -733,6 +733,9 @@ static LinkedHashSet<CharSequence> extractUrls(String text) {\n         // Resource path with optional query string.\n         regex_sb.append(\"(?:/[a-zA-Z0-9:@%\\\\-._~!$&()*+,;=?/]*)?\");\n \n+        // Fragment.\n+        regex_sb.append(\"(?:#[a-zA-Z0-9:@%\\\\-._~!$&()*+,;=?/]*)?\");\n+\n         // End second matching group.\n         regex_sb.append(\")\");\n ",
    "output": "Grab fragment when extracting URLs for selection"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/filepicker/TermuxDocumentsProvider.java b/app/src/main/java/com/termux/filepicker/TermuxDocumentsProvider.java\n--- a/app/src/main/java/com/termux/filepicker/TermuxDocumentsProvider.java\n+++ b/app/src/main/java/com/termux/filepicker/TermuxDocumentsProvider.java\n@@ -248,10 +248,11 @@ private void includeFile(MatrixCursor result, String docId, File file)\n \n         int flags = 0;\n         if (file.isDirectory()) {\n-            if (file.isDirectory() && file.canWrite()) flags |= Document.FLAG_DIR_SUPPORTS_CREATE;\n+            if (file.canWrite()) flags |= Document.FLAG_DIR_SUPPORTS_CREATE;\n         } else if (file.canWrite()) {\n-            flags |= Document.FLAG_SUPPORTS_WRITE | Document.FLAG_SUPPORTS_DELETE;\n+            flags |= Document.FLAG_SUPPORTS_WRITE;\n         }\n+        if (file.getParentFile().canWrite()) flags |= Document.FLAG_SUPPORTS_DELETE;\n \n         final String displayName = file.getName();\n         final String mimeType = getMimeType(file);",
    "output": "Fix deletable flags in DocumentProvider\n\nA file is deletable if the _parent_ is writable, not the file itself."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/filepicker/TermuxDocumentsProvider.java b/app/src/main/java/com/termux/filepicker/TermuxDocumentsProvider.java\n--- a/app/src/main/java/com/termux/filepicker/TermuxDocumentsProvider.java\n+++ b/app/src/main/java/com/termux/filepicker/TermuxDocumentsProvider.java\n@@ -117,6 +117,29 @@ public boolean onCreate() {\n         return true;\n     }\n \n+    @Override\n+    public String createDocument(String parentDocumentId, String mimeType, String displayName) throws FileNotFoundException {\n+        File newFile = new File(parentDocumentId, displayName);\n+        int noConflictId = 2;\n+        while (newFile.exists()) {\n+            newFile = new File(parentDocumentId, displayName + \" (\" + noConflictId++ + \")\");\n+        }\n+        try {\n+            boolean succeeded;\n+            if (Document.MIME_TYPE_DIR.equals(mimeType)) {\n+                succeeded = newFile.mkdir();\n+            } else {\n+                succeeded = newFile.createNewFile();\n+            }\n+            if (!succeeded) {\n+                throw new FileNotFoundException(\"Failed to create document with id \" + newFile.getPath());\n+            }\n+        } catch (IOException e) {\n+            throw new FileNotFoundException(\"Failed to create document with id \" + newFile.getPath());\n+        }\n+        return newFile.getPath();\n+    }\n+\n     @Override\n     public void deleteDocument(String documentId) throws FileNotFoundException {\n         File file = getFileForDocId(documentId);",
    "output": "Fix #1350: Support createDocument(...)"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/filepicker/TermuxDocumentsProvider.java b/app/src/main/java/com/termux/filepicker/TermuxDocumentsProvider.java\n--- a/app/src/main/java/com/termux/filepicker/TermuxDocumentsProvider.java\n+++ b/app/src/main/java/com/termux/filepicker/TermuxDocumentsProvider.java\n@@ -71,7 +71,7 @@ public Cursor queryRoots(String[] projection) throws FileNotFoundException {\n         row.add(Root.COLUMN_ROOT_ID, getDocIdForFile(BASE_DIR));\n         row.add(Root.COLUMN_DOCUMENT_ID, getDocIdForFile(BASE_DIR));\n         row.add(Root.COLUMN_SUMMARY, null);\n-        row.add(Root.COLUMN_FLAGS, Root.FLAG_SUPPORTS_CREATE | Root.FLAG_SUPPORTS_SEARCH);\n+        row.add(Root.COLUMN_FLAGS, Root.FLAG_SUPPORTS_CREATE | Root.FLAG_SUPPORTS_SEARCH | Root.FLAG_SUPPORTS_IS_CHILD);\n         row.add(Root.COLUMN_TITLE, applicationName);\n         row.add(Root.COLUMN_MIME_TYPES, ALL_MIME_TYPES);\n         row.add(Root.COLUMN_AVAILABLE_BYTES, BASE_DIR.getFreeSpace());\n@@ -169,6 +169,11 @@ public Cursor querySearchDocuments(String rootId, String query, String[] project\n         return result;\n     }\n \n+    @Override\n+    public boolean isChildDocument(String parentDocumentId, String documentId) {\n+        return documentId.startsWith(parentDocumentId);\n+    }\n+\n     /**\n      * Get the document id given a file. This document id must be consistent across time as other\n      * applications may save the ID and use it to reference documents later.",
    "output": "Fix #1424: Support ACTION_OPEN_DOCUMENT_TREE"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxPreferences.java b/app/src/main/java/com/termux/app/TermuxPreferences.java\n--- a/app/src/main/java/com/termux/app/TermuxPreferences.java\n+++ b/app/src/main/java/com/termux/app/TermuxPreferences.java\n@@ -66,6 +66,7 @@ final static class KeyboardShortcut {\n     int mBellBehaviour = BELL_VIBRATE;\n \n     boolean mBackIsEscape;\n+    boolean mDisableVolumeVirtualKeys;\n     boolean mShowExtraKeys;\n \n     String[][] mExtraKeys;\n@@ -198,6 +199,7 @@ void reloadFromProperties(Context context) {\n         }\n \n         mBackIsEscape = \"escape\".equals(props.getProperty(\"back-key\", \"back\"));\n+        mDisableVolumeVirtualKeys = \"volume\".equals(props.getProperty(\"volume-keys\", \"virtual\"));\n \n         shortcuts.clear();\n         parseAction(\"shortcut.create-session\", SHORTCUT_ACTION_CREATE_SESSION, props);\n\ndiff --git a/app/src/main/java/com/termux/app/TermuxViewClient.java b/app/src/main/java/com/termux/app/TermuxViewClient.java\n--- a/app/src/main/java/com/termux/app/TermuxViewClient.java\n+++ b/app/src/main/java/com/termux/app/TermuxViewClient.java\n@@ -264,7 +264,9 @@ public boolean onLongPress(MotionEvent event) {\n     /** Handle dedicated volume buttons as virtual keys if applicable. */\n     private boolean handleVirtualKeys(int keyCode, KeyEvent event, boolean down) {\n         InputDevice inputDevice = event.getDevice();\n-        if (inputDevice != null && inputDevice.getKeyboardType() == InputDevice.KEYBOARD_TYPE_ALPHABETIC) {\n+        if (mActivity.mSettings.mDisableVolumeVirtualKeys) {\n+            return false;\n+        } else if (inputDevice != null && inputDevice.getKeyboardType() == InputDevice.KEYBOARD_TYPE_ALPHABETIC) {\n             // Do not steal dedicated buttons from a full external keyboard.\n             return false;\n         } else if (keyCode == KeyEvent.KEYCODE_VOLUME_DOWN) {",
    "output": "Allow the user to disable virtual key emulation.\n\nUse volume-keys=volume within termux.properties to disable."
  },
  {
    "input": "diff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalSession.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalSession.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalSession.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalSession.java\n@@ -348,10 +348,11 @@ public String getCwd() {\n         try {\n             final String cwdSymlink = String.format(\"/proc/%s/cwd/\", mShellPid);\n             String outputPath = new File(cwdSymlink).getCanonicalPath();\n+            String outputPathWithTrailingSlash = outputPath;\n             if (!outputPath.endsWith(\"/\")) {\n-                outputPath += '/';\n+                outputPathWithTrailingSlash += '/';\n             }\n-            if (!cwdSymlink.equals(outputPath)) {\n+            if (!cwdSymlink.equals(outputPathWithTrailingSlash)) {\n                 return outputPath;\n             }\n         } catch (IOException | SecurityException e) {",
    "output": "Avoid trailing slash in CWD (fixes #1413)"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -603,7 +603,9 @@ void addNewSession(boolean failSafe, String sessionName) {\n             new AlertDialog.Builder(this).setTitle(R.string.max_terminals_reached_title).setMessage(R.string.max_terminals_reached_message)\n                 .setPositiveButton(android.R.string.ok, null).show();\n         } else {\n-            TerminalSession newSession = mTermService.createTermSession(null, null, null, failSafe);\n+            TerminalSession currentSession = getCurrentTermSession();\n+            String workingDirectory = (currentSession == null) ? null : currentSession.getCwd();\n+            TerminalSession newSession = mTermService.createTermSession(null, null, workingDirectory, failSafe);\n             if (sessionName != null) {\n                 newSession.mSessionName = sessionName;\n             }\n\ndiff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalSession.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalSession.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalSession.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalSession.java\n@@ -8,6 +8,7 @@\n import android.system.OsConstants;\n import android.util.Log;\n \n+import java.io.File;\n import java.io.FileDescriptor;\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n@@ -339,4 +340,25 @@ public int getPid() {\n         return mShellPid;\n     }\n \n+    /** Returns the shell's working directory or null if it was unavailable. */\n+    public String getCwd() {\n+        if (mShellPid < 1) {\n+            return null;\n+        }\n+        try {\n+            final String cwdSymlink = String.format(\"/proc/%s/cwd/\", mShellPid);\n+            String outputPath = new File(cwdSymlink).getCanonicalPath();\n+            if (!outputPath.endsWith(\"/\")) {\n+                outputPath += '/';\n+            }\n+            if (!cwdSymlink.equals(outputPath)) {\n+                return outputPath;\n+            }\n+        } catch (IOException | SecurityException e) {\n+            Log.e(EmulatorDebug.LOG_TAG, \"Error getting current directory\", e);\n+        }\n+        return null;\n+    }\n+\n+\n }",
    "output": "Create new terminal sessions with directory of active session\n\nThis mimics the behaviour of most tabbed terminal emulators.\n\nFixes #1009."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/BackgroundJob.java b/app/src/main/java/com/termux/app/BackgroundJob.java\n--- a/app/src/main/java/com/termux/app/BackgroundJob.java\n+++ b/app/src/main/java/com/termux/app/BackgroundJob.java\n@@ -1,5 +1,9 @@\n package com.termux.app;\n \n+import android.app.Activity;\n+import android.app.PendingIntent;\n+import android.content.Intent;\n+import android.os.Bundle;\n import android.util.Log;\n \n import java.io.BufferedReader;\n@@ -24,7 +28,11 @@ public final class BackgroundJob {\n \n     final Process mProcess;\n \n-    public BackgroundJob(String cwd, String fileToExecute, final String[] args, final TermuxService service) {\n+    public BackgroundJob(String cwd, String fileToExecute, final String[] args, final TermuxService service){\n+        this(cwd, fileToExecute, args, service, null);\n+    }\n+\n+    public BackgroundJob(String cwd, String fileToExecute, final String[] args, final TermuxService service, PendingIntent pendingIntent) {\n         String[] env = buildEnvironment(false, cwd);\n         if (cwd == null) cwd = TermuxService.HOME_PATH;\n \n@@ -43,18 +51,42 @@ public BackgroundJob(String cwd, String fileToExecute, final String[] args, fina\n \n         mProcess = process;\n         final int pid = getPid(mProcess);\n+        final Bundle result = new Bundle();\n+        final StringBuilder outResult = new StringBuilder();\n+        final StringBuilder errResult = new StringBuilder();\n+\n+        Thread errThread = new Thread() {\n+            @Override\n+            public void run() {\n+                InputStream stderr = mProcess.getErrorStream();\n+                BufferedReader reader = new BufferedReader(new InputStreamReader(stderr, StandardCharsets.UTF_8));\n+                String line;\n+                try {\n+                    // FIXME: Long lines.\n+                    while ((line = reader.readLine()) != null) {\n+                        errResult.append(line).append('\\n');\n+                        Log.i(LOG_TAG, \"[\" + pid + \"] stderr: \" + line);\n+                    }\n+                } catch (IOException e) {\n+                    // Ignore.\n+                }\n+            }\n+        };\n+        errThread.start();\n \n         new Thread() {\n             @Override\n             public void run() {\n                 Log.i(LOG_TAG, \"[\" + pid + \"] starting: \" + processDescription);\n                 InputStream stdout = mProcess.getInputStream();\n                 BufferedReader reader = new BufferedReader(new InputStreamReader(stdout, StandardCharsets.UTF_8));\n+\n                 String line;\n                 try {\n                     // FIXME: Long lines.\n                     while ((line = reader.readLine()) != null) {\n                         Log.i(LOG_TAG, \"[\" + pid + \"] stdout: \" + line);\n+                        outResult.append(line).append('\\n');\n                     }\n                 } catch (IOException e) {\n                     Log.e(LOG_TAG, \"Error reading output\", e);\n@@ -68,26 +100,25 @@ public void run() {\n                     } else {\n                         Log.w(LOG_TAG, \"[\" + pid + \"] exited with code: \" + exitCode);\n                     }\n-                } catch (InterruptedException e) {\n-                    // Ignore.\n-                }\n-            }\n-        }.start();\n \n+                    result.putString(\"stdout\", outResult.toString());\n+                    result.putInt(\"exitCode\", exitCode);\n \n-        new Thread() {\n-            @Override\n-            public void run() {\n-                InputStream stderr = mProcess.getErrorStream();\n-                BufferedReader reader = new BufferedReader(new InputStreamReader(stderr, StandardCharsets.UTF_8));\n-                String line;\n-                try {\n-                    // FIXME: Long lines.\n-                    while ((line = reader.readLine()) != null) {\n-                        Log.i(LOG_TAG, \"[\" + pid + \"] stderr: \" + line);\n+                    errThread.join();\n+                    result.putString(\"stderr\", errResult.toString());\n+\n+                    Intent data = new Intent();\n+                    data.putExtra(\"result\", result);\n+\n+                    if(pendingIntent != null) {\n+                        try {\n+                            pendingIntent.send(service.getApplicationContext(), Activity.RESULT_OK, data);\n+                        } catch (PendingIntent.CanceledException e) {\n+                            // The caller doesn't want the result? That's fine, just ignore\n+                        }\n                     }\n-                } catch (IOException e) {\n-                    // Ignore.\n+                } catch (InterruptedException e) {\n+                    // Ignore\n                 }\n             }\n         }.start();\n\ndiff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -148,7 +148,7 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n             String cwd = intent.getStringExtra(EXTRA_CURRENT_WORKING_DIRECTORY);\n \n             if (intent.getBooleanExtra(EXTRA_EXECUTE_IN_BACKGROUND, false)) {\n-                BackgroundJob task = new BackgroundJob(cwd, executablePath, arguments, this);\n+                BackgroundJob task = new BackgroundJob(cwd, executablePath, arguments, this, intent.getParcelableExtra(\"pendingIntent\"));\n                 mBackgroundTasks.add(task);\n                 updateNotification();\n             } else {",
    "output": "Add PendingIntent in TermuxService to return data from execution\n\nThis commit adds an optional final argument to the BackgroundJob\nconstructor for a PendingIntent to return the results of its\nexecution to, and also attempts to pass an optional pendingIntent to\nit from the Service start intent"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/BackgroundJob.java b/app/src/main/java/com/termux/app/BackgroundJob.java\n--- a/app/src/main/java/com/termux/app/BackgroundJob.java\n+++ b/app/src/main/java/com/termux/app/BackgroundJob.java\n@@ -90,7 +90,7 @@ public void run() {\n                     // Ignore.\n                 }\n             }\n-        };\n+        }.start();\n     }\n \n     private static void addToEnvIfPresent(List<String> environment, String name) {",
    "output": "Start stderr BackgroundJob Thread"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java b/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java\n--- a/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java\n+++ b/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java\n@@ -21,6 +21,7 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.nio.charset.StandardCharsets;\n+import java.util.regex.Pattern;\n \n public class TermuxFileReceiverActivity extends Activity {\n \n@@ -36,6 +37,11 @@ public class TermuxFileReceiverActivity extends Activity {\n      */\n     boolean mFinishOnDismissNameDialog = true;\n \n+    static boolean isSharedTextAnUrl(String sharedText) {\n+        return Patterns.WEB_URL.matcher(sharedText).matches()\n+            || Pattern.matches(\"magnet:\\\\?xt=urn:btih:.*?\", sharedText);\n+    }\n+\n     @Override\n     protected void onResume() {\n         super.onResume();\n@@ -50,7 +56,7 @@ protected void onResume() {\n             final Uri sharedUri = intent.getParcelableExtra(Intent.EXTRA_STREAM);\n \n             if (sharedText != null) {\n-                if (Patterns.WEB_URL.matcher(sharedText).matches()) {\n+                if (isSharedTextAnUrl(sharedText)) {\n                     handleUrlAndFinish(sharedText);\n                 } else {\n                     String subject = intent.getStringExtra(Intent.EXTRA_SUBJECT);\n\ndiff --git a/app/src/test/java/com/termux/app/TermuxActivityTest.java b/app/src/test/java/com/termux/app/TermuxActivityTest.java\n--- a/app/src/test/java/com/termux/app/TermuxActivityTest.java\n+++ b/app/src/test/java/com/termux/app/TermuxActivityTest.java\n@@ -1,25 +1,27 @@\n package com.termux.app;\n \n-import junit.framework.TestCase;\n+import org.junit.Assert;\n+import org.junit.Test;\n \n import java.util.Collections;\n import java.util.LinkedHashSet;\n \n-public class TermuxActivityTest extends TestCase {\n+public class TermuxActivityTest {\n \n-\tprivate void assertUrlsAre(String text, String... urls) {\n-\t\tLinkedHashSet<String> expected = new LinkedHashSet<>();\n-\t\tCollections.addAll(expected, urls);\n-\t\tassertEquals(expected, TermuxActivity.extractUrls(text));\n-\t}\n+    private void assertUrlsAre(String text, String... urls) {\n+        LinkedHashSet<String> expected = new LinkedHashSet<>();\n+        Collections.addAll(expected, urls);\n+        Assert.assertEquals(expected, TermuxActivity.extractUrls(text));\n+    }\n \n-\tpublic void testExtractUrls() {\n-\t\tassertUrlsAre(\"hello http://example.com world\", \"http://example.com\");\n+    @Test\n+    public void testExtractUrls() {\n+        assertUrlsAre(\"hello http://example.com world\", \"http://example.com\");\n \n-\t\tassertUrlsAre(\"http://example.com\\nhttp://another.com\", \"http://example.com\", \"http://another.com\");\n+        assertUrlsAre(\"http://example.com\\nhttp://another.com\", \"http://example.com\", \"http://another.com\");\n \n-\t\tassertUrlsAre(\"hello http://example.com world and http://more.example.com with secure https://more.example.com\",\n-\t\t\t\t\"http://example.com\", \"http://more.example.com\", \"https://more.example.com\");\n-\t}\n+        assertUrlsAre(\"hello http://example.com world and http://more.example.com with secure https://more.example.com\",\n+            \"http://example.com\", \"http://more.example.com\", \"https://more.example.com\");\n+    }\n \n }\n\ndiff --git a/app/src/test/java/com/termux/filepicker/TermuxFileReceiverActivityTest.java b/app/src/test/java/com/termux/filepicker/TermuxFileReceiverActivityTest.java\n--- a/app/src/test/java/com/termux/filepicker/TermuxFileReceiverActivityTest.java\n+++ b/app/src/test/java/com/termux/filepicker/TermuxFileReceiverActivityTest.java\n@@ -0,0 +1,32 @@\n+package com.termux.filepicker;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class TermuxFileReceiverActivityTest {\n+\n+    @Test\n+    public void testIsSharedTextAnUrl() {\n+        List<String> validUrls = new ArrayList<>();\n+        validUrls.add(\"http://example.com\");\n+        validUrls.add(\"https://example.com\");\n+        validUrls.add(\"https://example.com/path/parameter=foo\");\n+        validUrls.add(\"magnet:?xt=urn:btih:d540fc48eb12f2833163eed6421d449dd8f1ce1f&dn=Ubuntu+desktop+19.04+%2864bit%29&tr=udp%3A%2F%2Ftracker.openbittorrent.com%3A80&tr=udp%3A%2F%2Ftracker.publicbt.com%3A80&tr=udp%3A%2F%2Ftracker.ccc.de%3A80\");\n+        for (String url : validUrls) {\n+            Assert.assertTrue(TermuxFileReceiverActivity.isSharedTextAnUrl(url));\n+        }\n+\n+        List<String> invalidUrls = new ArrayList<>();\n+        invalidUrls.add(\"a test with example.com\");\n+        for (String url : invalidUrls) {\n+            Assert.assertFalse(TermuxFileReceiverActivity.isSharedTextAnUrl(url));\n+        }\n+    }\n+\n+}",
    "output": "Handle magnet links with termux-url-opener\n\nFixes #1339 and #1382."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/BackgroundJob.java b/app/src/main/java/com/termux/app/BackgroundJob.java\n--- a/app/src/main/java/com/termux/app/BackgroundJob.java\n+++ b/app/src/main/java/com/termux/app/BackgroundJob.java\n@@ -110,7 +110,7 @@ static String[] buildEnvironment(boolean failSafe, String cwd) {\n         environment.add(\"TERM=xterm-256color\");\n         environment.add(\"HOME=\" + TermuxService.HOME_PATH);\n         environment.add(\"PREFIX=\" + TermuxService.PREFIX_PATH);\n-        environment.add(\"BOOTCLASSPATH\" + System.getenv(\"BOOTCLASSPATH\"));\n+        environment.add(\"BOOTCLASSPATH=\" + System.getenv(\"BOOTCLASSPATH\"));\n         environment.add(\"ANDROID_ROOT=\" + System.getenv(\"ANDROID_ROOT\"));\n         environment.add(\"ANDROID_DATA=\" + System.getenv(\"ANDROID_DATA\"));\n         // EXTERNAL_STORAGE is needed for /system/bin/am to work on at least",
    "output": "properly set bootclasspath environment variable"
  },
  {
    "input": "diff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n@@ -1267,6 +1267,7 @@ private void doEsc(int b) {\n                 break;\n             case 'c': // RIS - Reset to Initial State (http://vt100.net/docs/vt510-rm/RIS).\n                 reset();\n+                mMainBuffer.clearTranscript();\n                 blockClear(0, 0, mColumns, mRows);\n                 setCursorPosition(0, 0);\n                 break;",
    "output": "terminal emulator: clear scrollback buffer when resetting to initial state\n\nFixes utility 'reset' not being able to clear scrollback buffer."
  },
  {
    "input": "diff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n@@ -1267,6 +1267,7 @@ private void doEsc(int b) {\n                 break;\n             case 'c': // RIS - Reset to Initial State (http://vt100.net/docs/vt510-rm/RIS).\n                 reset();\n+                mMainBuffer.clearTranscript();\n                 blockClear(0, 0, mColumns, mRows);\n                 setCursorPosition(0, 0);\n                 break;",
    "output": "terminal emulator: clear scrollback buffer when resetting to initial state\n\nFixes utility 'reset' not being able to clear scrollback buffer."
  },
  {
    "input": "diff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -893,9 +893,7 @@ public HandleView(CursorController controller, int orientation) {\n                 android.R.attr.textSelectHandleWindowStyle);\n             mContainer.setSplitTouchEnabled(true);\n             mContainer.setClippingEnabled(false);\n-            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n-                mContainer.setWindowLayoutType(WindowManager.LayoutParams.TYPE_APPLICATION_SUB_PANEL);\n-            }\n+            mContainer.setWindowLayoutType(WindowManager.LayoutParams.TYPE_APPLICATION_SUB_PANEL);\n             mContainer.setWidth(ViewGroup.LayoutParams.WRAP_CONTENT);\n             mContainer.setHeight(ViewGroup.LayoutParams.WRAP_CONTENT);\n \n@@ -910,14 +908,8 @@ public void setOrientation(int orientation) {\n                 case LEFT: {\n                     if (mSelectHandleLeft == null) {\n \n-                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n                             mSelectHandleLeft = getContext().getDrawable(\n                                 R.drawable.text_select_handle_left_material);\n-                        } else {\n-                            mSelectHandleLeft = getContext().getResources().getDrawable(\n-                                R.drawable.text_select_handle_left_material);\n-\n-                        }\n                     }\n                     //\n                     mDrawable = mSelectHandleLeft;\n@@ -928,13 +920,8 @@ public void setOrientation(int orientation) {\n \n                 case RIGHT: {\n                     if (mSelectHandleRight == null) {\n-                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n                             mSelectHandleRight = getContext().getDrawable(\n                                 R.drawable.text_select_handle_right_material);\n-                        } else {\n-                            mSelectHandleRight = getContext().getResources().getDrawable(\n-                                R.drawable.text_select_handle_right_material);\n-                        }\n                     }\n                     mDrawable = mSelectHandleRight;\n                     handleWidth = mDrawable.getIntrinsicWidth();\n@@ -1228,48 +1215,45 @@ public void onDestroyActionMode(ActionMode mode) {\n                 }\n \n             };\n-            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n-                mActionMode = startActionMode(new ActionMode.Callback2() {\n-                    @Override\n-                    public boolean onCreateActionMode(ActionMode mode, Menu menu) {\n-                        return callback.onCreateActionMode(mode, menu);\n-                    }\n-\n-                    @Override\n-                    public boolean onPrepareActionMode(ActionMode mode, Menu menu) {\n-                        return false;\n-                    }\n+            mActionMode = startActionMode(new ActionMode.Callback2() {\n+                @Override\n+                public boolean onCreateActionMode(ActionMode mode, Menu menu) {\n+                    return callback.onCreateActionMode(mode, menu);\n+                }\n \n-                    @Override\n-                    public boolean onActionItemClicked(ActionMode mode, MenuItem item) {\n-                        return callback.onActionItemClicked(mode, item);\n-                    }\n+                @Override\n+                public boolean onPrepareActionMode(ActionMode mode, Menu menu) {\n+                    return false;\n+                }\n \n-                    @Override\n-                    public void onDestroyActionMode(ActionMode mode) {\n-                        // Ignore.\n-                    }\n+                @Override\n+                public boolean onActionItemClicked(ActionMode mode, MenuItem item) {\n+                    return callback.onActionItemClicked(mode, item);\n+                }\n \n-                    @Override\n-                    public void onGetContentRect(ActionMode mode, View view, Rect outRect) {\n-                        int x1 = Math.round(mSelX1 * mRenderer.mFontWidth);\n-                        int x2 = Math.round(mSelX2 * mRenderer.mFontWidth);\n-                        int y1 = Math.round((mSelY1 - mTopRow) * mRenderer.mFontLineSpacing);\n-                        int y2 = Math.round((mSelY2 + 1 - mTopRow) * mRenderer.mFontLineSpacing);\n+                @Override\n+                public void onDestroyActionMode(ActionMode mode) {\n+                    // Ignore.\n+                }\n \n+                @Override\n+                public void onGetContentRect(ActionMode mode, View view, Rect outRect) {\n+                    int x1 = Math.round(mSelX1 * mRenderer.mFontWidth);\n+                    int x2 = Math.round(mSelX2 * mRenderer.mFontWidth);\n+                    int y1 = Math.round((mSelY1 - mTopRow) * mRenderer.mFontLineSpacing);\n+                    int y2 = Math.round((mSelY2 + 1 - mTopRow) * mRenderer.mFontLineSpacing);\n \n-                        if (x1 > x2) {\n-                            int tmp = x1;\n-                            x1 = x2;\n-                            x2 = tmp;\n-                        }\n \n-                        outRect.set(x1, y1 + mHandleHeight, x2, y2 + mHandleHeight);\n+                    if (x1 > x2) {\n+                        int tmp = x1;\n+                        x1 = x2;\n+                        x2 = tmp;\n                     }\n-                }, ActionMode.TYPE_FLOATING);\n-            } else {\n-                mActionMode = startActionMode(callback);\n-            }\n+\n+                    outRect.set(x1, y1 + mHandleHeight, x2, y2 + mHandleHeight);\n+                }\n+            }, ActionMode.TYPE_FLOATING);\n+\n         }\n \n         public void hide() {\n@@ -1500,19 +1484,15 @@ private void stopTextSelectionMode() {\n         @Override\n         public void run() {\n             if (mActionMode != null) {\n-                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n-                    mActionMode.hide(0);  // hide off.\n-                }\n+                mActionMode.hide(0);  // hide off.\n             }\n         }\n     };\n \n     void hideFloatingToolbar(int duration) {\n         if (mActionMode != null) {\n             removeCallbacks(mShowFloatingToolbar);\n-            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n-                mActionMode.hide(duration);\n-            }\n+            mActionMode.hide(duration);\n         }\n     }\n ",
    "output": "confict"
  },
  {
    "input": "diff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -42,6 +42,7 @@\n import com.termux.terminal.TerminalBuffer;\n import com.termux.terminal.TerminalEmulator;\n import com.termux.terminal.TerminalSession;\n+import com.termux.terminal.WcWidth;\n \n /** View displaying and interacting with a {@link TerminalSession}. */\n public final class TerminalView extends View {\n@@ -986,6 +987,9 @@ public boolean isShowing() {\n         }\n \n         private void checkChangedOrientation() {\n+            if (!mIsDragging) {\n+                return;\n+            }\n             long millis = SystemClock.currentThreadTimeMillis();\n             if (millis - mLastTime < 50) {\n                 return;\n@@ -1283,43 +1287,59 @@ public boolean isActive() {\n             return mIsShowing;\n         }\n \n+\n         public void updatePosition(HandleView handle, int x, int y) {\n-            final int scrollRows = mEmulator.getScreen().getActiveRows() - mEmulator.mRows;\n-            if (y < mRenderer.mFontLineSpacing) {//up\n-                mTopRow--;\n-                if (mTopRow < -scrollRows) {\n-                    mTopRow = -scrollRows;\n-                }\n-            } else if (y + 2 * mRenderer.mFontLineSpacing > TerminalView.this.getHeight()) {//down\n-                mTopRow++;\n-                if (mTopRow > 0) {\n-                    mTopRow = 0;\n-                }\n-            }\n+\n+            TerminalBuffer screen = mEmulator.getScreen();\n+            final int scrollRows = screen.getActiveRows() - mEmulator.mRows;\n             if (handle == mStartHandle) {\n                 mSelX1 = getCursorX(x);\n                 mSelY1 = getCursorY(y);\n                 if (mSelX1 < 0) {\n                     mSelX1 = 0;\n                 }\n+\n                 if (mSelY1 < -scrollRows) {\n                     mSelY1 = -scrollRows;\n+\n                 } else if (mSelY1 > mEmulator.mRows - 1) {\n                     mSelY1 = mEmulator.mRows - 1;\n+\n                 }\n \n+\n                 if (mSelY1 > mSelY2) {\n                     mSelY1 = mSelY2;\n                 }\n                 if (mSelY1 == mSelY2 && mSelX1 > mSelX2) {\n                     mSelX1 = mSelX2;\n                 }\n+\n+                if (!mEmulator.isAlternateBufferActive()) {\n+                    if (mSelY1 <= mTopRow) {\n+                        mTopRow--;\n+                        if (mTopRow < -scrollRows) {\n+                            mTopRow = -scrollRows;\n+                        }\n+                    } else if (mSelY1 >= mTopRow + mEmulator.mRows) {\n+                        mTopRow++;\n+                        if (mTopRow > 0) {\n+                            mTopRow = 0;\n+                        }\n+                    }\n+                }\n+\n+\n+                mSelX1 = getValidCurX(screen, mSelY1, mSelX1);\n+\n             } else {\n                 mSelX2 = getCursorX(x);\n                 mSelY2 = getCursorY(y);\n                 if (mSelX2 < 0) {\n                     mSelX2 = 0;\n                 }\n+\n+\n                 if (mSelY2 < -scrollRows) {\n                     mSelY2 = -scrollRows;\n                 } else if (mSelY2 > mEmulator.mRows - 1) {\n@@ -1332,19 +1352,68 @@ public void updatePosition(HandleView handle, int x, int y) {\n                 if (mSelY1 == mSelY2 && mSelX1 > mSelX2) {\n                     mSelX2 = mSelX1;\n                 }\n+\n+                if (!mEmulator.isAlternateBufferActive()) {\n+                    if (mSelY2 <= mTopRow) {\n+                        mTopRow--;\n+                        if (mTopRow < -scrollRows) {\n+                            mTopRow = -scrollRows;\n+                        }\n+                    } else if (mSelY2 >= mTopRow + mEmulator.mRows) {\n+                        mTopRow++;\n+                        if (mTopRow > 0) {\n+                            mTopRow = 0;\n+                        }\n+                    }\n+                }\n+\n+                mSelX2 = getValidCurX(screen, mSelY2, mSelX2);\n             }\n \n             invalidate();\n         }\n \n+\n+        private int getValidCurX(TerminalBuffer screen, int cy, int cx) {\n+            String line = screen.getSelectedText(0, cy, cx, cy);\n+            if (!TextUtils.isEmpty(line)) {\n+                int col = 0;\n+                for (int i = 0, len = line.length(); i < len; i++) {\n+                    char ch1 = line.charAt(i);\n+                    if (ch1 == 0) {\n+                        break;\n+                    }\n+\n+\n+                    int wc;\n+                    if (Character.isHighSurrogate(ch1) && i + 1 < len) {\n+                        char ch2 = line.charAt(++i);\n+                        wc = WcWidth.width(Character.toCodePoint(ch1, ch2));\n+                    } else {\n+                        wc = WcWidth.width(ch1);\n+                    }\n+\n+                    final int cend = col + wc;\n+                    if (cx > col && cx < cend) {\n+                        return cend;\n+                    }\n+                    if (cend == col) {\n+                        return col;\n+                    }\n+                    col = cend;\n+                }\n+            }\n+            return cx;\n+        }\n+\n         public void updatePosition() {\n             if (!isActive()) {\n                 return;\n             }\n \n             mStartHandle.positionAtCursor(mSelX1, mSelY1);\n \n-            mEndHandle.positionAtCursor(mSelX2 + 1, mSelY2);\n+            mEndHandle.positionAtCursor(mSelX2 + 1, mSelY2); //bug\n \n             if (mActionMode != null) {\n                 mActionMode.invalidate();",
    "output": "Optimize handleView move."
  },
  {
    "input": "diff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -892,9 +892,7 @@ public HandleView(CursorController controller, int orientation) {\n                 android.R.attr.textSelectHandleWindowStyle);\n             mContainer.setSplitTouchEnabled(true);\n             mContainer.setClippingEnabled(false);\n-            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n-                mContainer.setWindowLayoutType(WindowManager.LayoutParams.TYPE_APPLICATION_SUB_PANEL);\n-            }\n+            mContainer.setWindowLayoutType(WindowManager.LayoutParams.TYPE_APPLICATION_SUB_PANEL);\n             mContainer.setWidth(ViewGroup.LayoutParams.WRAP_CONTENT);\n             mContainer.setHeight(ViewGroup.LayoutParams.WRAP_CONTENT);\n \n@@ -908,15 +906,8 @@ public void setOrientation(int orientation) {\n             switch (orientation) {\n                 case LEFT: {\n                     if (mSelectHandleLeft == null) {\n-\n-                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n-                            mSelectHandleLeft = getContext().getDrawable(\n-                                R.drawable.text_select_handle_left_material);\n-                        } else {\n-                            mSelectHandleLeft = getContext().getResources().getDrawable(\n-                                R.drawable.text_select_handle_left_material);\n-\n-                        }\n+                        mSelectHandleLeft = getContext().getDrawable(\n+                            R.drawable.text_select_handle_left_material);\n                     }\n                     //\n                     mDrawable = mSelectHandleLeft;\n@@ -927,13 +918,8 @@ public void setOrientation(int orientation) {\n \n                 case RIGHT: {\n                     if (mSelectHandleRight == null) {\n-                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {\n-                            mSelectHandleRight = getContext().getDrawable(\n-                                R.drawable.text_select_handle_right_material);\n-                        } else {\n-                            mSelectHandleRight = getContext().getResources().getDrawable(\n-                                R.drawable.text_select_handle_right_material);\n-                        }\n+                        mSelectHandleRight = getContext().getDrawable(\n+                            R.drawable.text_select_handle_right_material);\n                     }\n                     mDrawable = mSelectHandleRight;\n                     handleWidth = mDrawable.getIntrinsicWidth();\n@@ -1224,48 +1210,45 @@ public void onDestroyActionMode(ActionMode mode) {\n                 }\n \n             };\n-            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n-                mActionMode = startActionMode(new ActionMode.Callback2() {\n-                    @Override\n-                    public boolean onCreateActionMode(ActionMode mode, Menu menu) {\n-                        return callback.onCreateActionMode(mode, menu);\n-                    }\n \n-                    @Override\n-                    public boolean onPrepareActionMode(ActionMode mode, Menu menu) {\n-                        return false;\n-                    }\n+            mActionMode = startActionMode(new ActionMode.Callback2() {\n+                @Override\n+                public boolean onCreateActionMode(ActionMode mode, Menu menu) {\n+                    return callback.onCreateActionMode(mode, menu);\n+                }\n \n-                    @Override\n-                    public boolean onActionItemClicked(ActionMode mode, MenuItem item) {\n-                        return callback.onActionItemClicked(mode, item);\n-                    }\n+                @Override\n+                public boolean onPrepareActionMode(ActionMode mode, Menu menu) {\n+                    return false;\n+                }\n \n-                    @Override\n-                    public void onDestroyActionMode(ActionMode mode) {\n-                        // Ignore.\n-                    }\n+                @Override\n+                public boolean onActionItemClicked(ActionMode mode, MenuItem item) {\n+                    return callback.onActionItemClicked(mode, item);\n+                }\n \n-                    @Override\n-                    public void onGetContentRect(ActionMode mode, View view, Rect outRect) {\n-                        int x1 = Math.round(mSelX1 * mRenderer.mFontWidth);\n-                        int x2 = Math.round(mSelX2 * mRenderer.mFontWidth);\n-                        int y1 = Math.round((mSelY1 - mTopRow) * mRenderer.mFontLineSpacing);\n-                        int y2 = Math.round((mSelY2 + 1 - mTopRow) * mRenderer.mFontLineSpacing);\n+                @Override\n+                public void onDestroyActionMode(ActionMode mode) {\n+                    // Ignore.\n+                }\n \n+                @Override\n+                public void onGetContentRect(ActionMode mode, View view, Rect outRect) {\n+                    int x1 = Math.round(mSelX1 * mRenderer.mFontWidth);\n+                    int x2 = Math.round(mSelX2 * mRenderer.mFontWidth);\n+                    int y1 = Math.round((mSelY1 - mTopRow) * mRenderer.mFontLineSpacing);\n+                    int y2 = Math.round((mSelY2 + 1 - mTopRow) * mRenderer.mFontLineSpacing);\n \n-                        if (x1 > x2) {\n-                            int tmp = x1;\n-                            x1 = x2;\n-                            x2 = tmp;\n-                        }\n \n-                        outRect.set(x1, y1 + mHandleHeight, x2, y2 + mHandleHeight);\n+                    if (x1 > x2) {\n+                        int tmp = x1;\n+                        x1 = x2;\n+                        x2 = tmp;\n                     }\n-                }, ActionMode.TYPE_FLOATING);\n-            } else {\n-                mActionMode = startActionMode(callback);\n-            }\n+\n+                    outRect.set(x1, y1 + mHandleHeight, x2, y2 + mHandleHeight);\n+                }\n+            }, ActionMode.TYPE_FLOATING);\n         }\n \n         public void hide() {\n@@ -1431,19 +1414,15 @@ private void stopTextSelectionMode() {\n         @Override\n         public void run() {\n             if (mActionMode != null) {\n-                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n-                    mActionMode.hide(0);  // hide off.\n-                }\n+                mActionMode.hide(0);  // hide off.\n             }\n         }\n     };\n \n     void hideFloatingToolbar(int duration) {\n         if (mActionMode != null) {\n             removeCallbacks(mShowFloatingToolbar);\n-            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n-                mActionMode.hide(duration);\n-            }\n+            mActionMode.hide(duration);\n         }\n     }\n ",
    "output": "remove SDK_INT conditionals\n\nWe are targting on API 24, so conditionals for Android 5/6 compatibillity\nare useless now."
  },
  {
    "input": "diff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -10,6 +10,7 @@\n import android.graphics.Typeface;\n import android.graphics.drawable.Drawable;\n import android.os.Build;\n+import android.os.SystemClock;\n import android.text.Editable;\n import android.text.InputType;\n import android.text.TextUtils;\n@@ -882,6 +883,8 @@ private class HandleView extends View {\n         public static final int RIGHT = 2;\n         private int mHandleHeight;\n \n+        private long mLastTime;\n+\n         public HandleView(CursorController controller, int orientation) {\n             super(TerminalView.this.getContext());\n             mController = controller;\n@@ -983,6 +986,11 @@ public boolean isShowing() {\n         }\n \n         private void checkChangedOrientation() {\n+            long millis = SystemClock.currentThreadTimeMillis();\n+            if (millis - mLastTime < 50) {\n+                return;\n+            }\n+            mLastTime = millis;\n \n             final TerminalView hostView = TerminalView.this;\n             final int left = hostView.getLeft();\n@@ -1007,7 +1015,7 @@ private void checkChangedOrientation() {\n             final int[] coords = mTempCoords;\n             hostView.getLocationInWindow(coords);\n             final int posX = coords[0] + mPointX;\n-            if (posX + (int) mHotspotX < clip.left) {\n+            if (posX < clip.left) {\n                 changeOrientation(RIGHT);\n             } else if (posX + mHandleWidth > clip.right) {\n                 changeOrientation(LEFT);",
    "output": "Optimize handle view"
  },
  {
    "input": "diff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -296,6 +296,7 @@ public boolean deleteSurroundingText(int leftLength, int rightLength) {\n             }\n \n             void sendTextToTerminal(CharSequence text) {\n+                stopTextSelectionMode();\n                 final int textLengthInChars = text.length();\n                 for (int i = 0; i < textLengthInChars; i++) {\n                     char firstChar = text.charAt(i);\n@@ -542,6 +543,7 @@ public boolean onKeyDown(int keyCode, KeyEvent event) {\n         if (LOG_KEY_EVENTS)\n             Log.i(EmulatorDebug.LOG_TAG, \"onKeyDown(keyCode=\" + keyCode + \", isSystem()=\" + event.isSystem() + \", event=\" + event + \")\");\n         if (mEmulator == null) return true;\n+        stopTextSelectionMode();\n \n         if (mClient.onKeyDown(keyCode, event, mTermSession)) {\n             invalidate();",
    "output": "Stop selection mode on enter"
  },
  {
    "input": "diff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -153,7 +153,7 @@ public boolean onScale(float focusX, float focusY, float scale) {\n \n             @Override\n             public boolean onFling(final MotionEvent e2, float velocityX, float velocityY) {\n-                if (mEmulator == null || mIsSelectingText) return true;\n+                if (mEmulator == null) return true;\n                 // Do not start scrolling until last fling has been taken care of:\n                 if (!mScroller.isFinished()) return true;\n ",
    "output": "Selection mode fling"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -354,9 +354,13 @@ void reload(String[][] buttons, CharDisplayMap charDisplayMap) {\n                     if (Settings.System.getInt(getContext().getContentResolver(),\n                         Settings.System.HAPTIC_FEEDBACK_ENABLED, 0) != 0) {\n \n-                        // Depending on DnD settings, value can be >1 but 0 means \"disabled\".\n-                        if (Settings.Global.getInt(getContext().getContentResolver(), \"zen_mode\", 0) < 1) {\n+                        if (Build.VERSION.SDK_INT >= 28) {\n                             finalButton.performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP);\n+                        } else {\n+                            // Perform haptic feedback only if no total silence mode enabled.\n+                            if (Settings.Global.getInt(getContext().getContentResolver(), \"zen_mode\", 0) != 2) {\n+                                finalButton.performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP);\n+                            }\n                         }\n                     }\n ",
    "output": "extra keys: improve handling of DnD mode\n\nDo not disturb mode is now handled only for SDKs pre-28. Extra keys will\nnot vibrate only when total silence mode is used."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -401,8 +401,14 @@ void reload(String[][] buttons, CharDisplayMap charDisplayMap) {\n                             }\n                             return true;\n \n-                        case MotionEvent.ACTION_UP:\n                         case MotionEvent.ACTION_CANCEL:\n+                            v.setBackgroundColor(BUTTON_COLOR);\n+                            if (scheduledExecutor != null) {\n+                                scheduledExecutor.shutdownNow();\n+                                scheduledExecutor = null;\n+                            }\n+                            return true;\n+                        case MotionEvent.ACTION_UP:\n                             v.setBackgroundColor(BUTTON_COLOR);\n                             if (scheduledExecutor != null) {\n                                 scheduledExecutor.shutdownNow();",
    "output": "extra keys: handle actions UP & CANCEL separately\n\nRelated issue: https://github.com/termux/termux-app/issues/905"
  },
  {
    "input": "diff --git a/terminal-emulator/src/test/java/com/termux/terminal/CursorAndScreenTest.java b/terminal-emulator/src/test/java/com/termux/terminal/CursorAndScreenTest.java\n--- a/terminal-emulator/src/test/java/com/termux/terminal/CursorAndScreenTest.java\n+++ b/terminal-emulator/src/test/java/com/termux/terminal/CursorAndScreenTest.java\n@@ -133,8 +133,6 @@ public void testCursorUp() {\n \t\twithTerminalSized(3, 3).enterString(\"ABCDEFG\\033[2AH\").assertLinesAre(\"AHC\", \"DEF\", \"G  \");\n \t\t// If an attempt is made to move the cursor above the top margin, the cursor stops at the top margin:\n \t\twithTerminalSized(3, 3).enterString(\"ABCDEFG\\033[44AH\").assertLinesAre(\"AHC\", \"DEF\", \"G  \");\n-\t\t// Set top margin and validate that cursor does not go above it:\n-\t\twithTerminalSized(3, 3).enterString(\"\\033[2rABCDEFG\\033[44AH\").assertLinesAre(\"ABC\", \"DHF\", \"G  \");\n \t}\n \n \tpublic void testCursorDown() {\n@@ -143,8 +141,6 @@ public void testCursorDown() {\n \t\twithTerminalSized(3, 3).enterString(\"AB\\033[2BC\").assertLinesAre(\"AB \", \"   \", \"  C\");\n \t\t// If an attempt is made to move the cursor below the bottom margin, the cursor stops at the bottom margin:\n \t\twithTerminalSized(3, 3).enterString(\"AB\\033[44BC\").assertLinesAre(\"AB \", \"   \", \"  C\");\n-\t\t// Set bottom margin and validate that cursor does not go above it:\n-\t\twithTerminalSized(3, 3).enterString(\"\\033[1;2rAB\\033[44BC\").assertLinesAre(\"AB \", \"  C\", \"   \");\n \t}\n \n \tpublic void testReportCursorPosition() {",
    "output": "Remove outdated tests\n\nRemove tests that asserted that Cursor Down (CUD) and Cursor Up (CUU)\nescape sequences were affected by the scrolling region set by DECSTBM.\n\nThis was incorrect and recently fixed:\nhttps://github.com/termux/termux-app/issues/1340"
  },
  {
    "input": "diff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n@@ -1376,10 +1376,10 @@ private void doCsi(int b) {\n             }\n             break;\n             case 'A': // \"CSI${n}A\" - Cursor up (CUU) ${n} rows.\n-                setCursorRow(Math.max(mTopMargin, mCursorRow - getArg0(1)));\n+                setCursorRow(Math.max(0, mCursorRow - getArg0(1)));\n                 break;\n             case 'B': // \"CSI${n}B\" - Cursor down (CUD) ${n} rows.\n-                setCursorRow(Math.min(mBottomMargin - 1, mCursorRow + getArg0(1)));\n+                setCursorRow(Math.min(mRows - 1, mCursorRow + getArg0(1)));\n                 break;\n             case 'C': // \"CSI${n}C\" - Cursor forward (CUF).\n             case 'a': // \"CSI${n}a\" - Horizontal position relative (HPR). From ISO-6428/ECMA-48.\n\ndiff --git a/terminal-emulator/src/test/java/com/termux/terminal/ScrollRegionTest.java b/terminal-emulator/src/test/java/com/termux/terminal/ScrollRegionTest.java\n--- a/terminal-emulator/src/test/java/com/termux/terminal/ScrollRegionTest.java\n+++ b/terminal-emulator/src/test/java/com/termux/terminal/ScrollRegionTest.java\n@@ -107,4 +107,24 @@ public void testScrollDownBelowScrollRegion() {\n \t\tassertLinesAre(\"1 \", \"2 \", \"3 \", \"QQ\", \"YY\");\n \t}\n \n+    /** See https://github.com/termux/termux-app/issues/1340 */\n+    public void testScrollRegionDoesNotLimitCursorMovement() {\n+        withTerminalSized(6, 4)\n+            .enterString(\"\\033[4;7r\\033[3;1Haaa\\033[Axxx\")\n+            .assertLinesAre(\n+                \"      \",\n+                \"   xxx\",\n+                \"aaa   \",\n+                \"      \"\n+            );\n+\n+        withTerminalSized(6, 4)\n+            .enterString(\"\\033[1;3r\\033[3;1Haaa\\033[Bxxx\")\n+            .assertLinesAre(\n+                \"      \",\n+                \"      \",\n+                \"aaa   \",\n+                \"   xxx\"\n+            );\n+    }\n }",
    "output": "Do not limit cursor movement to scroll region\n\nThe scrolling region set by DECSTBM should not affect the\nCursor Down (CUD) and Cursor Up (CUU) escape sequences.\n\nFixes #1340."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -427,11 +427,7 @@ void reload(String[][] buttons, CharDisplayMap charDisplayMap) {\n \n                 LayoutParams param = new GridLayout.LayoutParams();\n                 param.width = 0;\n-                if(Build.VERSION.SDK_INT == Build.VERSION_CODES.LOLLIPOP) { // special handle api 21\n-                    param.height = (int)(37.5 * getResources().getDisplayMetrics().density + 0.5); // 37.5 equal to R.id.viewpager layout_height / rows in DP\n-                } else {\n-                    param.height = 0;\n-                }\n+                param.height = 0;\n                 param.setMargins(0, 0, 0, 0);\n                 param.columnSpec = GridLayout.spec(col, GridLayout.FILL, 1.f);\n                 param.rowSpec = GridLayout.spec(row, GridLayout.FILL, 1.f);\n\ndiff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -188,18 +188,12 @@ void updateBackgroundColor() {\n     }\n \n     /** For processes to access shared internal storage (/sdcard) we need this permission. */\n-    @TargetApi(Build.VERSION_CODES.M)\n     public boolean ensureStoragePermissionGranted() {\n-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n-            if (checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED) {\n-                return true;\n-            } else {\n-                requestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, REQUESTCODE_PERMISSION_STORAGE);\n-                return false;\n-            }\n-        } else {\n-            // Always granted before Android 6.0.\n+        if (checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED) {\n             return true;\n+        } else {\n+            requestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, REQUESTCODE_PERMISSION_STORAGE);\n+            return false;\n         }\n     }\n \n\ndiff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -114,19 +114,17 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n                 mWifiLock = wm.createWifiLock(WifiManager.WIFI_MODE_FULL_HIGH_PERF, EmulatorDebug.LOG_TAG);\n                 mWifiLock.acquire();\n \n-                if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n-                    String packageName = getPackageName();\n-                    if (!pm.isIgnoringBatteryOptimizations(packageName)) {\n-                        Intent whitelist = new Intent();\n-                        whitelist.setAction(Settings.ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS);\n-                        whitelist.setData(Uri.parse(\"package:\" + packageName));\n-                        whitelist.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n-\n-                        try {\n-                            startActivity(whitelist);\n-                        } catch (ActivityNotFoundException e) {\n-                            Log.e(EmulatorDebug.LOG_TAG, \"Failed to call ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS\", e);\n-                        }\n+                String packageName = getPackageName();\n+                if (!pm.isIgnoringBatteryOptimizations(packageName)) {\n+                    Intent whitelist = new Intent();\n+                    whitelist.setAction(Settings.ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS);\n+                    whitelist.setData(Uri.parse(\"package:\" + packageName));\n+                    whitelist.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n+\n+                    try {\n+                        startActivity(whitelist);\n+                    } catch (ActivityNotFoundException e) {\n+                        Log.e(EmulatorDebug.LOG_TAG, \"Failed to call ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS\", e);\n                     }\n                 }\n \n\ndiff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -518,8 +518,7 @@ public boolean onTouchEvent(MotionEvent ev) {\n                         mSelY2 = tmpY1;\n                     }\n \n-                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M)\n-                        mActionMode.invalidateContentRect();\n+                    mActionMode.invalidateContentRect();\n                     invalidate();\n                     break;\n                 default:\n@@ -875,41 +874,36 @@ public void onDestroyActionMode(ActionMode mode) {\n \n             };\n \n-            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n-                mActionMode = startActionMode(new ActionMode.Callback2() {\n-                    @Override\n-                    public boolean onCreateActionMode(ActionMode mode, Menu menu) {\n-                        return callback.onCreateActionMode(mode, menu);\n-                    }\n-\n-                    @Override\n-                    public boolean onPrepareActionMode(ActionMode mode, Menu menu) {\n-                        return false;\n-                    }\n+            mActionMode = startActionMode(new ActionMode.Callback2() {\n+                @Override\n+                public boolean onCreateActionMode(ActionMode mode, Menu menu) {\n+                    return callback.onCreateActionMode(mode, menu);\n+                }\n \n-                    @Override\n-                    public boolean onActionItemClicked(ActionMode mode, MenuItem item) {\n-                        return callback.onActionItemClicked(mode, item);\n-                    }\n+                @Override\n+                public boolean onPrepareActionMode(ActionMode mode, Menu menu) {\n+                    return false;\n+                }\n \n-                    @Override\n-                    public void onDestroyActionMode(ActionMode mode) {\n-                        // Ignore.\n-                    }\n+                @Override\n+                public boolean onActionItemClicked(ActionMode mode, MenuItem item) {\n+                    return callback.onActionItemClicked(mode, item);\n+                }\n \n-                    @Override\n-                    public void onGetContentRect(ActionMode mode, View view, Rect outRect) {\n-                        int x1 = Math.round(mSelX1 * mRenderer.mFontWidth);\n-                        int x2 = Math.round(mSelX2 * mRenderer.mFontWidth);\n-                        int y1 = Math.round((mSelY1 - mTopRow) * mRenderer.mFontLineSpacing);\n-                        int y2 = Math.round((mSelY2 + 1 - mTopRow) * mRenderer.mFontLineSpacing);\n-                        outRect.set(Math.min(x1, x2), y1, Math.max(x1, x2), y2);\n-                    }\n-                }, ActionMode.TYPE_FLOATING);\n-            } else {\n-                mActionMode = startActionMode(callback);\n-            }\n+                @Override\n+                public void onDestroyActionMode(ActionMode mode) {\n+                    // Ignore.\n+                }\n \n+                @Override\n+                public void onGetContentRect(ActionMode mode, View view, Rect outRect) {\n+                    int x1 = Math.round(mSelX1 * mRenderer.mFontWidth);\n+                    int x2 = Math.round(mSelX2 * mRenderer.mFontWidth);\n+                    int y1 = Math.round((mSelY1 - mTopRow) * mRenderer.mFontLineSpacing);\n+                    int y2 = Math.round((mSelY2 + 1 - mTopRow) * mRenderer.mFontLineSpacing);\n+                    outRect.set(Math.min(x1, x2), y1, Math.max(x1, x2), y2);\n+                }\n+            }, ActionMode.TYPE_FLOATING);\n \n             invalidate();\n         } else {",
    "output": "Cleanup after requiring Android 7.0"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/BackgroundJob.java b/app/src/main/java/com/termux/app/BackgroundJob.java\n--- a/app/src/main/java/com/termux/app/BackgroundJob.java\n+++ b/app/src/main/java/com/termux/app/BackgroundJob.java\n@@ -139,14 +139,14 @@ private static boolean shouldAddLdLibraryPath() {\n         try (BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(TermuxService.PREFIX_PATH + \"/etc/apt/sources.list\")))) {\n             String line;\n             while ((line = in.readLine()) != null) {\n-                if (!line.startsWith(\"#\") && line.contains(\"https://dl.bintray.com/termux/termux-packages-24\")) {\n-                    return false;\n+                if (!line.startsWith(\"#\") && line.contains(\"//termux.net stable\")) {\n+                    return true;\n                 }\n             }\n         } catch (IOException e) {\n             Log.e(LOG_TAG, \"Error trying to read sources.list\", e);\n         }\n-        return true;\n+        return false;\n     }\n \n     public static int getPid(Process p) {",
    "output": "Do not set LD_LIBRARY_PATH by default\n\nSee https://github.com/termux/termux-app/issues/1286"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxInstaller.java b/app/src/main/java/com/termux/app/TermuxInstaller.java\n--- a/app/src/main/java/com/termux/app/TermuxInstaller.java\n+++ b/app/src/main/java/com/termux/app/TermuxInstaller.java\n@@ -16,6 +16,7 @@\n import com.termux.terminal.EmulatorDebug;\n \n import java.io.BufferedReader;\n+import java.io.ByteArrayInputStream;\n import java.io.File;\n import java.io.FileOutputStream;\n import java.io.IOException;\n@@ -38,7 +39,7 @@\n  * <p/>\n  * (3) A staging folder, $STAGING_PREFIX, is {@link #deleteFolder(File)} if left over from broken installation below.\n  * <p/>\n- * (4) The architecture is determined and an appropriate bootstrap zip url is determined in {@link #determineZipUrl()}.\n+ * (4) The zip file is loaded from a shared library.\n  * <p/>\n  * (5) The zip, containing entries relative to the $PREFIX, is is downloaded and extracted by a zip input stream\n  * continuously encountering zip file entries:\n@@ -82,8 +83,8 @@ public void run() {\n                     final byte[] buffer = new byte[8096];\n                     final List<Pair<String, String>> symlinks = new ArrayList<>(50);\n \n-                    final URL zipUrl = determineZipUrl();\n-                    try (ZipInputStream zipInput = new ZipInputStream(zipUrl.openStream())) {\n+                    final byte[] zipBytes = loadZipBytes();\n+                    try (ZipInputStream zipInput = new ZipInputStream(new ByteArrayInputStream(zipBytes))) {\n                         ZipEntry zipEntry;\n                         while ((zipEntry = zipInput.getNextEntry()) != null) {\n                             if (zipEntry.getName().equals(\"SYMLINKS.txt\")) {\n@@ -167,34 +168,13 @@ private static void ensureDirectoryExists(File directory) {\n         }\n     }\n \n-    /** Get bootstrap zip url for this systems cpu architecture. */\n-    private static URL determineZipUrl() throws MalformedURLException {\n-        String archName = determineTermuxArchName();\n-        String url = Build.VERSION.SDK_INT >= Build.VERSION_CODES.N\n-            ? \"https://termux.org/bootstrap-\" + archName + \".zip\"\n-            : \"https://termux.net/bootstrap/bootstrap-\" + archName + \".zip\";\n-        return new URL(url);\n+    public static byte[] loadZipBytes() {\n+        // Only load the shared library when necessary to save memory usage.\n+        System.loadLibrary(\"termux-bootstrap\");\n+        return getZip();\n     }\n \n-    private static String determineTermuxArchName() {\n-        // Note that we cannot use System.getProperty(\"os.arch\") since that may give e.g. \"aarch64\"\n-        // while a 64-bit runtime may not be installed (like on the Samsung Galaxy S5 Neo).\n-        // Instead we search through the supported abi:s on the device, see:\n-        // http://developer.android.com/ndk/guides/abis.html\n-        // Note that we search for abi:s in preferred order (the ordering of the\n-        // Build.SUPPORTED_ABIS list) to avoid e.g. installing arm on an x86 system where arm\n-        // emulation is available.\n-        for (String androidArch : Build.SUPPORTED_ABIS) {\n-            switch (androidArch) {\n-                case \"arm64-v8a\": return \"aarch64\";\n-                case \"armeabi-v7a\": return \"arm\";\n-                case \"x86_64\": return \"x86_64\";\n-                case \"x86\": return \"i686\";\n-            }\n-        }\n-        throw new RuntimeException(\"Unable to determine arch from Build.SUPPORTED_ABIS =  \" +\n-            Arrays.toString(Build.SUPPORTED_ABIS));\n-    }\n+    public static native byte[] getZip();\n \n     /** Delete a folder and all its content or throw. Don't follow symlinks. */\n     static void deleteFolder(File fileOrDirectory) throws IOException {",
    "output": "Include bootstrap zips as shared libraries"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -127,6 +127,8 @@ public final class TermuxActivity extends Activity implements ServiceConnection\n      */\n     boolean mIsVisible;\n \n+    boolean mIsUsingBlackUI;\n+\n     final SoundPool mBellSoundPool = new SoundPool.Builder().setMaxStreams(1).setAudioAttributes(\n         new AudioAttributes.Builder().setContentType(AudioAttributes.CONTENT_TYPE_SONIFICATION)\n             .setUsage(AudioAttributes.USAGE_ASSISTANCE_SONIFICATION).build()).build();\n@@ -203,11 +205,24 @@ public boolean ensureStoragePermissionGranted() {\n \n     @Override\n     public void onCreate(Bundle bundle) {\n-        super.onCreate(bundle);\n-\n         mSettings = new TermuxPreferences(this);\n+        mIsUsingBlackUI = mSettings.isUsingBlackUI();\n+        if (mIsUsingBlackUI) {\n+            this.setTheme(R.style.Theme_Termux_Black);\n+        } else {\n+            this.setTheme(R.style.Theme_Termux);\n+        }\n+\n+        super.onCreate(bundle);\n \n         setContentView(R.layout.drawer_layout);\n+\n+        if (mIsUsingBlackUI) {\n+            findViewById(R.id.left_drawer).setBackgroundColor(\n+                getResources().getColor(android.R.color.background_dark)\n+            );\n+        }\n+\n         mTerminalView = findViewById(R.id.terminal_view);\n         mTerminalView.setOnKeyListener(new TermuxViewClient(this));\n \n@@ -434,7 +449,11 @@ public View getView(int position, View convertView, @NonNull ViewGroup parent) {\n                 boolean sessionRunning = sessionAtRow.isRunning();\n \n                 TextView firstLineView = row.findViewById(R.id.row_line);\n-\n+                if (mIsUsingBlackUI) {\n+                    firstLineView.setBackground(\n+                        getResources().getDrawable(R.drawable.selected_session_background_black)\n+                    );\n+                }\n                 String name = sessionAtRow.mSessionName;\n                 String sessionTitle = sessionAtRow.getTitle();\n \n@@ -454,7 +473,8 @@ public View getView(int position, View convertView, @NonNull ViewGroup parent) {\n                 } else {\n                     firstLineView.setPaintFlags(firstLineView.getPaintFlags() | Paint.STRIKE_THRU_TEXT_FLAG);\n                 }\n-                int color = sessionRunning || sessionAtRow.getExitStatus() == 0 ? Color.WHITE : Color.RED;\n+                int defaultColor = mIsUsingBlackUI ? Color.WHITE : Color.BLACK;\n+                int color = sessionRunning || sessionAtRow.getExitStatus() == 0 ? defaultColor : Color.RED;\n                 firstLineView.setTextColor(color);\n                 return row;\n             }\n\ndiff --git a/app/src/main/java/com/termux/app/TermuxPreferences.java b/app/src/main/java/com/termux/app/TermuxPreferences.java\n--- a/app/src/main/java/com/termux/app/TermuxPreferences.java\n+++ b/app/src/main/java/com/termux/app/TermuxPreferences.java\n@@ -58,6 +58,7 @@ final static class KeyboardShortcut {\n     private static final String CURRENT_SESSION_KEY = \"current_session\";\n     private static final String SCREEN_ALWAYS_ON_KEY = \"screen_always_on\";\n \n+    private String mUseDarkUI;\n     private boolean mScreenAlwaysOn;\n     private int mFontSize;\n \n@@ -126,6 +127,10 @@ boolean isScreenAlwaysOn() {\n         return mScreenAlwaysOn;\n     }\n \n+    boolean isUsingBlackUI() {\n+        return mUseDarkUI.toLowerCase().equals(\"true\");\n+    }\n+\n     void setScreenAlwaysOn(Context context, boolean newValue) {\n         mScreenAlwaysOn = newValue;\n         PreferenceManager.getDefaultSharedPreferences(context).edit().putBoolean(SCREEN_ALWAYS_ON_KEY, newValue).apply();\n@@ -173,6 +178,8 @@ void reloadFromProperties(Context context) {\n                 break;\n         }\n \n+        mUseDarkUI = props.getProperty(\"use-black-ui\", \"false\");\n+\n         try {\n             JSONArray arr = new JSONArray(props.getProperty(\"extra-keys\", \"[['ESC', 'TAB', 'CTRL', 'ALT', '-', 'DOWN', 'UP']]\"));\n ",
    "output": "Made Black UI an option to configure"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -454,7 +454,7 @@ public View getView(int position, View convertView, @NonNull ViewGroup parent) {\n                 } else {\n                     firstLineView.setPaintFlags(firstLineView.getPaintFlags() | Paint.STRIKE_THRU_TEXT_FLAG);\n                 }\n-                int color = sessionRunning || sessionAtRow.getExitStatus() == 0 ? Color.BLACK : Color.RED;\n+                int color = sessionRunning || sessionAtRow.getExitStatus() == 0 ? Color.WHITE : Color.RED;\n                 firstLineView.setTextColor(color);\n                 return row;\n             }",
    "output": "Unified UI colors across the app. Dark sidebar and dark app theme for\ndark Alert Dialogs"
  },
  {
    "input": "diff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -10,6 +10,7 @@\n import android.graphics.Typeface;\n import android.graphics.drawable.Drawable;\n import android.os.Build;\n+import android.os.SystemClock;\n import android.text.Editable;\n import android.text.InputType;\n import android.text.TextUtils;\n@@ -882,6 +883,8 @@ private class HandleView extends View {\n         public static final int RIGHT = 2;\n         private int mHandleHeight;\n \n+        private long mLastTime;\n+\n         public HandleView(CursorController controller, int orientation) {\n             super(TerminalView.this.getContext());\n             mController = controller;\n@@ -983,6 +986,11 @@ public boolean isShowing() {\n         }\n \n         private void checkChangedOrientation() {\n+            long millis = SystemClock.currentThreadTimeMillis();\n+            if (millis - mLastTime < 50) {\n+                return;\n+            }\n+            mLastTime = millis;\n \n             final TerminalView hostView = TerminalView.this;\n             final int left = hostView.getLeft();\n@@ -1007,7 +1015,7 @@ private void checkChangedOrientation() {\n             final int[] coords = mTempCoords;\n             hostView.getLocationInWindow(coords);\n             final int posX = coords[0] + mPointX;\n-            if (posX + (int) mHotspotX < clip.left) {\n+            if (posX < clip.left) {\n                 changeOrientation(RIGHT);\n             } else if (posX + mHandleWidth > clip.right) {\n                 changeOrientation(LEFT);",
    "output": "Optimize handle view"
  },
  {
    "input": "diff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -296,6 +296,7 @@ public boolean deleteSurroundingText(int leftLength, int rightLength) {\n             }\n \n             void sendTextToTerminal(CharSequence text) {\n+                stopTextSelectionMode();\n                 final int textLengthInChars = text.length();\n                 for (int i = 0; i < textLengthInChars; i++) {\n                     char firstChar = text.charAt(i);\n@@ -542,6 +543,7 @@ public boolean onKeyDown(int keyCode, KeyEvent event) {\n         if (LOG_KEY_EVENTS)\n             Log.i(EmulatorDebug.LOG_TAG, \"onKeyDown(keyCode=\" + keyCode + \", isSystem()=\" + event.isSystem() + \", event=\" + event + \")\");\n         if (mEmulator == null) return true;\n+        stopTextSelectionMode();\n \n         if (mClient.onKeyDown(keyCode, event, mTermSession)) {\n             invalidate();",
    "output": "Stop selection mode on enter"
  },
  {
    "input": "diff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -153,7 +153,7 @@ public boolean onScale(float focusX, float focusY, float scale) {\n \n             @Override\n             public boolean onFling(final MotionEvent e2, float velocityX, float velocityY) {\n-                if (mEmulator == null || mIsSelectingText) return true;\n+                if (mEmulator == null) return true;\n                 // Do not start scrolling until last fling has been taken care of:\n                 if (!mScroller.isFinished()) return true;\n ",
    "output": "Selection mode fling"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -654,19 +654,86 @@ public boolean onCreateOptionsMenu(Menu menu) {\n     }\n \n     static LinkedHashSet<CharSequence> extractUrls(String text) {\n-        // Pattern for recognizing a URL, based off RFC 3986\n-        // http://stackoverflow.com/questions/5713558/detect-and-extract-url-from-a-string\n+\n+        StringBuilder regex_sb = new StringBuilder();\n+\n+        regex_sb.append(\"(\");                       // Begin first matching group.\n+        regex_sb.append(\"(?:\");                     // Begin scheme group.\n+        regex_sb.append(\"dav|\");                    // The DAV proto.\n+        regex_sb.append(\"dict|\");                   // The DICT proto.\n+        regex_sb.append(\"dns|\");                    // The DNS proto.\n+        regex_sb.append(\"file|\");                   // File path.\n+        regex_sb.append(\"finger|\");                 // The Finger proto.\n+        regex_sb.append(\"ftp(?:s?)|\");              // The FTP proto.\n+        regex_sb.append(\"git|\");                    // The Git proto.\n+        regex_sb.append(\"gopher|\");                 // The Gopher proto.\n+        regex_sb.append(\"http(?:s?)|\");             // The HTTP proto.\n+        regex_sb.append(\"imap(?:s?)|\");             // The IMAP proto.\n+        regex_sb.append(\"irc(?:[6s]?)|\");           // The IRC proto.\n+        regex_sb.append(\"ip[fn]s|\");                // The IPFS proto.\n+        regex_sb.append(\"ldap(?:s?)|\");             // The LDAP proto.\n+        regex_sb.append(\"pop3(?:s?)|\");             // The POP3 proto.\n+        regex_sb.append(\"redis(?:s?)|\");            // The Redis proto.\n+        regex_sb.append(\"rsync|\");                  // The Rsync proto.\n+        regex_sb.append(\"rtsp(?:[su]?)|\");          // The RTSP proto.\n+        regex_sb.append(\"sftp|\");                   // The SFTP proto.\n+        regex_sb.append(\"smb(?:s?)|\");              // The SAMBA proto.\n+        regex_sb.append(\"smtp(?:s?)|\");             // The SMTP proto.\n+        regex_sb.append(\"svn(?:(?:\\\\+ssh)?)|\");     // The Subversion proto.\n+        regex_sb.append(\"tcp|\");                    // The TCP proto.\n+        regex_sb.append(\"telnet|\");                 // The Telnet proto.\n+        regex_sb.append(\"tftp|\");                   // The TFTP proto.\n+        regex_sb.append(\"udp|\");                    // The UDP proto.\n+        regex_sb.append(\"vnc|\");                    // The VNC proto.\n+        regex_sb.append(\"ws(?:s?)\");                // The Websocket proto.\n+        regex_sb.append(\")://\");                    // End scheme group.\n+        regex_sb.append(\")\");                       // End first matching group.\n+\n+\n+        // Begin second matching group.\n+        regex_sb.append(\"(\");\n+\n+        // User name and/or password in format 'user:pass@'.\n+        regex_sb.append(\"(?:\\\\S+(?::\\\\S*)?@)?\");\n+\n+        // Begin host group.\n+        regex_sb.append(\"(?:\");\n+\n+        // IP address (from http://www.regular-expressions.info/examples.html).\n+        regex_sb.append(\"(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)|\");\n+\n+        // Host name or domain.\n+        regex_sb.append(\"(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)(?:(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)*(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,})))?|\");\n+\n+        // Just path. Used in case of 'file://' scheme.\n+        regex_sb.append(\"/(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]-*)*[a-z\\\\u00a1-\\\\uffff0-9]+)\");\n+\n+        // End host group.\n+        regex_sb.append(\")\");\n+\n+        // Port number.\n+        regex_sb.append(\"(?::\\\\d{1,5})?\");\n+\n+        // Resource path with optional query string.\n+        regex_sb.append(\"(?:/[a-zA-Z0-9:@%\\\\-._~!$&()*+,;=?/]*)?\");\n+\n+        // End second matching group.\n+        regex_sb.append(\")\");\n+\n         final Pattern urlPattern = Pattern.compile(\n-            \"(?:^|[\\\\W])((ht|f)tp(s?)://|www\\\\.)\" + \"(([\\\\w\\\\-]+\\\\.)+?([\\\\w\\\\-.~]+/?)*\" + \"[\\\\p{Alnum}.,%_=?&#\\\\-+()\\\\[\\\\]*$~@!:/{};']*)\",\n+            regex_sb.toString(),\n             Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL);\n+\n         LinkedHashSet<CharSequence> urlSet = new LinkedHashSet<>();\n         Matcher matcher = urlPattern.matcher(text);\n+\n         while (matcher.find()) {\n             int matchStart = matcher.start(1);\n             int matchEnd = matcher.end();\n             String url = text.substring(matchStart, matchEnd);\n             urlSet.add(url);\n         }\n+\n         return urlSet;\n     }\n ",
    "output": "improve url matching regex\n\nNow it support complex URLs and some other schemes beyond just http/ftp."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -6,6 +6,7 @@\n import android.app.NotificationManager;\n import android.app.PendingIntent;\n import android.app.Service;\n+import android.content.ActivityNotFoundException;\n import android.content.Context;\n import android.content.Intent;\n import android.content.res.Resources;\n@@ -120,7 +121,12 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n                         whitelist.setAction(Settings.ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS);\n                         whitelist.setData(Uri.parse(\"package:\" + packageName));\n                         whitelist.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n-                        startActivity(whitelist);\n+\n+                        try {\n+                            startActivity(whitelist);\n+                        } catch (ActivityNotFoundException e) {\n+                            Log.e(EmulatorDebug.LOG_TAG, \"Failed to call ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS\", e);\n+                        }\n                     }\n                 }\n ",
    "output": "handle possible ActivityNotFoundException when requesting to disable battery optimizations\n\nRelated issue: https://github.com/termux/termux-app/issues/1224"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -2,6 +2,7 @@\n \n import android.content.Context;\n import android.os.Build;\n+import android.provider.Settings;\n import android.util.AttributeSet;\n \n import java.util.concurrent.Executors;\n@@ -350,7 +351,15 @@ void reload(String[][] buttons, CharDisplayMap charDisplayMap) {\n \n                 final Button finalButton = button;\n                 button.setOnClickListener(v -> {\n-                    finalButton.performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP);\n+                    if (Settings.System.getInt(getContext().getContentResolver(),\n+                        Settings.System.HAPTIC_FEEDBACK_ENABLED, 0) != 0) {\n+\n+                        // Depending on DnD settings, value can be >1 but 0 means \"disabled\".\n+                        if (Settings.Global.getInt(getContext().getContentResolver(), \"zen_mode\", 0) < 1) {\n+                            finalButton.performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP);\n+                        }\n+                    }\n+\n                     View root = getRootView();\n                     if(Arrays.asList(\"CTRL\", \"ALT\", \"FN\").contains(buttonText)) {\n                         ToggleButton self = (ToggleButton) finalButton;",
    "output": "extra keys: follow DnD mode and haptic feedback Android settings\n\nDo not vibrate when:\n\n * Do not disturb mode is on.\n\n * Haptic feedback is disabled in Android settings."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/BellUtil.java b/app/src/main/java/com/termux/app/BellUtil.java\n--- a/app/src/main/java/com/termux/app/BellUtil.java\n+++ b/app/src/main/java/com/termux/app/BellUtil.java\n@@ -10,7 +10,7 @@ public class BellUtil {\n     private static BellUtil instance = null;\n     private static final Object lock = new Object();\n \n-    public static BellUtil with(Context context) {\n+    public static BellUtil getInstance(Context context) {\n         if (instance == null) {\n             synchronized (lock) {\n                 if (instance == null) {\n\ndiff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -24,7 +24,6 @@\n import android.os.Build;\n import android.os.Bundle;\n import android.os.IBinder;\n-import android.os.Vibrator;\n import android.text.SpannableString;\n import android.text.Spanned;\n import android.text.TextUtils;\n@@ -402,7 +401,7 @@ public void onBell(TerminalSession session) {\n                         mBellSoundPool.play(mBellSoundId, 1.f, 1.f, 1, 0, 1.f);\n                         break;\n                     case TermuxPreferences.BELL_VIBRATE:\n-                        BellUtil.with(TermuxActivity.this).doBell();\n+                        BellUtil.getInstance(TermuxActivity.this).doBell();\n                         break;\n                     case TermuxPreferences.BELL_IGNORE:\n                         // Ignore the bell character.",
    "output": "Change method name 'with' to 'getInstance'"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -16,6 +16,7 @@\n import android.os.Handler;\n import android.os.IBinder;\n import android.os.PowerManager;\n+import android.provider.Settings;\n import android.util.Log;\n import android.widget.ArrayAdapter;\n \n@@ -112,6 +113,17 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n                 mWifiLock = wm.createWifiLock(WifiManager.WIFI_MODE_FULL_HIGH_PERF, EmulatorDebug.LOG_TAG);\n                 mWifiLock.acquire();\n \n+                if(Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n+                    String packageName = getPackageName();\n+                    if (!pm.isIgnoringBatteryOptimizations(packageName)) {\n+                        Intent whitelist = new Intent();\n+                        whitelist.setAction(Settings.ACTION_REQUEST_IGNORE_BATTERY_OPTIMIZATIONS);\n+                        whitelist.setData(Uri.parse(\"package:\" + packageName));\n+                        whitelist.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n+                        startActivity(whitelist);\n+                    }\n+                }\n+\n                 updateNotification();\n             }\n         } else if (ACTION_UNLOCK_WAKE.equals(action)) {",
    "output": "Ignore battery optimization settings to prevent suspension"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -722,7 +722,7 @@ public boolean onContextItemSelected(MenuItem item) {\n                 if (session != null) {\n                     Intent intent = new Intent(Intent.ACTION_SEND);\n                     intent.setType(\"text/plain\");\n-                    String transcriptText = session.getEmulator().getScreen().getTranscriptText().trim();\n+                    String transcriptText = session.getEmulator().getScreen().getTranscriptTextWithoutJoinedLines().trim();\n                     // See https://github.com/termux/termux-app/issues/1166.\n                     final int MAX_LENGTH = 100_000;\n                     if (transcriptText.length() > MAX_LENGTH) {\n\ndiff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalBuffer.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalBuffer.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalBuffer.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalBuffer.java\n@@ -41,7 +41,15 @@ public String getTranscriptText() {\n         return getSelectedText(0, -getActiveTranscriptRows(), mColumns, mScreenRows).trim();\n     }\n \n+    public String getTranscriptTextWithoutJoinedLines() {\n+        return getSelectedText(0, -getActiveTranscriptRows(), mColumns, mScreenRows, false).trim();\n+    }\n+\n     public String getSelectedText(int selX1, int selY1, int selX2, int selY2) {\n+        return getSelectedText(selX1, selY1, selX2, selY2, true);\n+    }\n+\n+    public String getSelectedText(int selX1, int selY1, int selX2, int selY2, boolean joinBackLines) {\n         final StringBuilder builder = new StringBuilder();\n         final int columns = mColumns;\n \n@@ -79,7 +87,8 @@ public String getSelectedText(int selX1, int selY1, int selX2, int selY2) {\n             }\n             if (lastPrintingCharIndex != -1)\n                 builder.append(line, x1Index, lastPrintingCharIndex - x1Index + 1);\n-            if (!rowLineWrap && row < selY2 && row < mScreenRows - 1) builder.append('\\n');\n+            if ((!joinBackLines || !rowLineWrap)\n+                && row < selY2 && row < mScreenRows - 1) builder.append('\\n');\n         }\n         return builder.toString();\n     }",
    "output": "Avoid joining lines for shared transcript (#1166)"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -722,7 +722,18 @@ public boolean onContextItemSelected(MenuItem item) {\n                 if (session != null) {\n                     Intent intent = new Intent(Intent.ACTION_SEND);\n                     intent.setType(\"text/plain\");\n-                    intent.putExtra(Intent.EXTRA_TEXT, session.getEmulator().getScreen().getTranscriptText().trim());\n+                    String transcriptText = session.getEmulator().getScreen().getTranscriptText().trim();\n+                    // See https://github.com/termux/termux-app/issues/1166.\n+                    final int MAX_LENGTH = 100_000;\n+                    if (transcriptText.length() > MAX_LENGTH) {\n+                        int cutOffIndex = transcriptText.length() - MAX_LENGTH;\n+                        int nextNewlineIndex = transcriptText.indexOf('\\n', cutOffIndex);\n+                        if (nextNewlineIndex != -1 && nextNewlineIndex != transcriptText.length() - 1) {\n+                            cutOffIndex = nextNewlineIndex + 1;\n+                        }\n+                        transcriptText = transcriptText.substring(cutOffIndex).trim();\n+                    }\n+                    intent.putExtra(Intent.EXTRA_TEXT, transcriptText);\n                     intent.putExtra(Intent.EXTRA_SUBJECT, getString(R.string.share_transcript_title));\n                     startActivity(Intent.createChooser(intent, getString(R.string.share_transcript_chooser_title)));\n                 }",
    "output": "Fix problem with sharing large terminal transcript\n\nFixes #1166."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -73,6 +73,18 @@ static class CharDisplayMap extends CleverMap<String, String> {}\n         put(\"RIGHT\", KeyEvent.KEYCODE_DPAD_RIGHT);\n         put(\"DOWN\", KeyEvent.KEYCODE_DPAD_DOWN);\n         put(\"ENTER\", KeyEvent.KEYCODE_ENTER);\n+        put(\"F1\", KeyEvent.KEYCODE_F1);\n+        put(\"F2\", KeyEvent.KEYCODE_F2);\n+        put(\"F3\", KeyEvent.KEYCODE_F3);\n+        put(\"F4\", KeyEvent.KEYCODE_F4);\n+        put(\"F5\", KeyEvent.KEYCODE_F5);\n+        put(\"F6\", KeyEvent.KEYCODE_F6);\n+        put(\"F7\", KeyEvent.KEYCODE_F7);\n+        put(\"F8\", KeyEvent.KEYCODE_F8);\n+        put(\"F9\", KeyEvent.KEYCODE_F9);\n+        put(\"F10\", KeyEvent.KEYCODE_F10);\n+        put(\"F11\", KeyEvent.KEYCODE_F11);\n+        put(\"F12\", KeyEvent.KEYCODE_F12);\n     }};\n     \n     static void sendKey(View view, String keyName) {",
    "output": "Add function keys F1 to F12 as keyboard options"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/BackgroundJob.java b/app/src/main/java/com/termux/app/BackgroundJob.java\n--- a/app/src/main/java/com/termux/app/BackgroundJob.java\n+++ b/app/src/main/java/com/termux/app/BackgroundJob.java\n@@ -93,6 +93,13 @@ public void run() {\n         };\n     }\n \n+    private static void addToEnvIfPresent(List<String> environment, String name) {\n+        String value = System.getenv(name);\n+        if (value != null) {\n+            environment.add(name + \"=\" + value);\n+        }\n+    }\n+\n     static String[] buildEnvironment(boolean failSafe, String cwd) {\n         new File(TermuxService.HOME_PATH).mkdirs();\n \n@@ -109,11 +116,9 @@ static String[] buildEnvironment(boolean failSafe, String cwd) {\n         // EXTERNAL_STORAGE is needed for /system/bin/am to work on at least\n         // Samsung S7 - see https://plus.google.com/110070148244138185604/posts/gp8Lk3aCGp3.\n         environment.add(\"EXTERNAL_STORAGE=\" + System.getenv(\"EXTERNAL_STORAGE\"));\n-        String androidRuntimeRoot = System.getenv(\"ANDROID_RUNTIME_ROOT\");\n-        // ANDROID_RUNTIME_ROOT is required for `am` to run on Android Q\n-        if (androidRuntimeRoot != null) {\n-            environment.add(\"ANDROID_RUNTIME_ROOT=\" + androidRuntimeRoot);\n-        }\n+        // ANDROID_RUNTIME_ROOT and ANDROID_TZDATA_ROOT are required for `am` to run on Android Q\n+        addToEnvIfPresent(environment, \"ANDROID_RUNTIME_ROOT\");\n+        addToEnvIfPresent(environment, \"ANDROID_TZDATA_ROOT\");\n         if (failSafe) {\n             // Keep the default path so that system binaries can be used in the failsafe session.\n             environment.add(\"PATH= \" + System.getenv(\"PATH\"));",
    "output": "Also export ANDROID_TZDATA_ROOT\n\nSince Android Q Beta 2 ANDROID_TZDATA_ROOT is required\nin addition to ANDROID_RUNTIME_ROOT in order to run\n`am` and `dalvikvm`"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -590,8 +590,7 @@ void addNewSession(boolean failSafe, String sessionName) {\n             new AlertDialog.Builder(this).setTitle(R.string.max_terminals_reached_title).setMessage(R.string.max_terminals_reached_message)\n                 .setPositiveButton(android.R.string.ok, null).show();\n         } else {\n-            String executablePath = (failSafe ? \"/system/bin/sh\" : null);\n-            TerminalSession newSession = mTermService.createTermSession(executablePath, null, null, failSafe);\n+            TerminalSession newSession = mTermService.createTermSession(null, null, null, failSafe);\n             if (sessionName != null) {\n                 newSession.mSessionName = sessionName;\n             }\n\ndiff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -136,7 +136,8 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n                 mBackgroundTasks.add(task);\n                 updateNotification();\n             } else {\n-                TerminalSession newSession = createTermSession(executablePath, arguments, cwd, false);\n+                boolean failsafe = intent.getBooleanExtra(TermuxActivity.TERMUX_FAILSAFE_SESSION_ACTION, false);\n+                TerminalSession newSession = createTermSession(executablePath, arguments, cwd, failsafe);\n \n                 // Transform executable path to session name, e.g. \"/bin/do-something.sh\" => \"do something.sh\".\n                 if (executablePath != null) {\n@@ -271,11 +272,13 @@ TerminalSession createTermSession(String executablePath, String[] arguments, Str\n         boolean isLoginShell = false;\n \n         if (executablePath == null) {\n-            for (String shellBinary : new String[]{\"login\", \"bash\", \"zsh\"}) {\n-                File shellFile = new File(PREFIX_PATH + \"/bin/\" + shellBinary);\n-                if (shellFile.canExecute()) {\n-                    executablePath = shellFile.getAbsolutePath();\n-                    break;\n+            if (!failSafe) {\n+                for (String shellBinary : new String[]{\"login\", \"bash\", \"zsh\"}) {\n+                    File shellFile = new File(PREFIX_PATH + \"/bin/\" + shellBinary);\n+                    if (shellFile.canExecute()) {\n+                        executablePath = shellFile.getAbsolutePath();\n+                        break;\n+                    }\n                 }\n             }\n ",
    "output": "Respect failsafe sessions in ACTION_EXECUTE"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -243,7 +243,7 @@ public void onDestroy() {\n             try {\n                 TermuxInstaller.deleteFolder(termuxTmpDir.getCanonicalFile());\n             } catch (Exception e) {\n-                Log.e(EmulatorDebug.LOG_TAG, \"Error while removing directory \" + termuxTmpDir.getAbsolutePath(), e);\n+                Log.e(EmulatorDebug.LOG_TAG, \"Error while removing file at \" + termuxTmpDir.getAbsolutePath(), e);\n             }\n \n             termuxTmpDir.mkdirs();",
    "output": "minor fix for log message while removing tmpdir"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/BackgroundJob.java b/app/src/main/java/com/termux/app/BackgroundJob.java\n--- a/app/src/main/java/com/termux/app/BackgroundJob.java\n+++ b/app/src/main/java/com/termux/app/BackgroundJob.java\n@@ -103,6 +103,7 @@ static String[] buildEnvironment(boolean failSafe, String cwd) {\n         environment.add(\"TERM=xterm-256color\");\n         environment.add(\"HOME=\" + TermuxService.HOME_PATH);\n         environment.add(\"PREFIX=\" + TermuxService.PREFIX_PATH);\n+        environment.add(\"BOOTCLASSPATH\" + System.getenv(\"BOOTCLASSPATH\"));\n         environment.add(\"ANDROID_ROOT=\" + System.getenv(\"ANDROID_ROOT\"));\n         environment.add(\"ANDROID_DATA=\" + System.getenv(\"ANDROID_DATA\"));\n         // EXTERNAL_STORAGE is needed for /system/bin/am to work on at least",
    "output": "set BOOTCLASSPATH environment variable\n\nRequired on at least Android 5. Otherwise utilities that use dalvikvm may fail.\n\nIssue happens on Nexus 7 with official 5.0/5.1 firmware and possibly other\nAOSP ROMs."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -237,6 +237,18 @@ private Notification buildNotification() {\n \n     @Override\n     public void onDestroy() {\n+        File termuxTmpDir = new File(TermuxService.PREFIX_PATH + \"/tmp\");\n+\n+        if (termuxTmpDir.exists()) {\n+            try {\n+                TermuxInstaller.deleteFolder(termuxTmpDir.getCanonicalFile());\n+            } catch (Exception e) {\n+                Log.e(EmulatorDebug.LOG_TAG, \"Error while removing directory \" + termuxTmpDir.getAbsolutePath(), e);\n+            }\n+\n+            termuxTmpDir.mkdirs();\n+        }\n+\n         if (mWakeLock != null) mWakeLock.release();\n         if (mWifiLock != null) mWifiLock.release();\n ",
    "output": "let $PREFIX/tmp be cleaned when TermuxService is going to be stopped"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -590,18 +590,6 @@ void addNewSession(boolean failSafe, String sessionName) {\n             new AlertDialog.Builder(this).setTitle(R.string.max_terminals_reached_title).setMessage(R.string.max_terminals_reached_message)\n                 .setPositiveButton(android.R.string.ok, null).show();\n         } else {\n-            if (mTermService.getSessions().size() == 0 && !mTermService.isWakelockEnabled()) {\n-                File termuxTmpDir = new File(TermuxService.PREFIX_PATH + \"/tmp\");\n-                if (termuxTmpDir.exists()) {\n-                    try {\n-                        TermuxInstaller.deleteFolder(termuxTmpDir);\n-                    } catch (Exception e) {\n-                        e.printStackTrace();\n-                    }\n-\n-                    termuxTmpDir.mkdirs();\n-                }\n-            }\n             String executablePath = (failSafe ? \"/system/bin/sh\" : null);\n             TerminalSession newSession = mTermService.createTermSession(executablePath, null, null, failSafe);\n             if (sessionName != null) {\n\ndiff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -250,14 +250,6 @@ public List<TerminalSession> getSessions() {\n         return mTerminalSessions;\n     }\n \n-    public boolean isWakelockEnabled() {\n-        if (mWakeLock == null) {\n-            return false;\n-        } else {\n-            return mWakeLock.isHeld();\n-        }\n-    }\n-\n     TerminalSession createTermSession(String executablePath, String[] arguments, String cwd, boolean failSafe) {\n         new File(HOME_PATH).mkdirs();\n ",
    "output": "Revert \"clean /tmp directory on cold start\"\n\nThis reverts commit beb8a004e6ea64e2b3795fc9320da8c8b2e0a871."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -482,7 +482,6 @@ public View getView(int position, View convertView, @NonNull ViewGroup parent) {\n                         if (bundle != null) {\n                             launchFailsafe = bundle.getBoolean(TERMUX_FAILSAFE_SESSION_ACTION, false);\n                         }\n-                        clearTemporaryDirectory();\n                         addNewSession(launchFailsafe, null);\n                     } catch (WindowManager.BadTokenException e) {\n                         // Activity finished - ignore.\n@@ -496,7 +495,6 @@ public View getView(int position, View convertView, @NonNull ViewGroup parent) {\n             Intent i = getIntent();\n             if (i != null && Intent.ACTION_RUN.equals(i.getAction())) {\n                 // Android 7.1 app shortcut from res/xml/shortcuts.xml.\n-                clearTemporaryDirectory();\n                 boolean failSafe = i.getBooleanExtra(TERMUX_FAILSAFE_SESSION_ACTION, false);\n                 addNewSession(failSafe, null);\n             } else {\n@@ -592,6 +590,18 @@ void addNewSession(boolean failSafe, String sessionName) {\n             new AlertDialog.Builder(this).setTitle(R.string.max_terminals_reached_title).setMessage(R.string.max_terminals_reached_message)\n                 .setPositiveButton(android.R.string.ok, null).show();\n         } else {\n+            if (mTermService.getSessions().size() == 0 && !mTermService.isWakelockEnabled()) {\n+                File termuxTmpDir = new File(TermuxService.PREFIX_PATH + \"/tmp\");\n+                if (termuxTmpDir.exists()) {\n+                    try {\n+                        TermuxInstaller.deleteFolder(termuxTmpDir);\n+                    } catch (Exception e) {\n+                        e.printStackTrace();\n+                    }\n+\n+                    termuxTmpDir.mkdirs();\n+                }\n+            }\n             String executablePath = (failSafe ? \"/system/bin/sh\" : null);\n             TerminalSession newSession = mTermService.createTermSession(executablePath, null, null, failSafe);\n             if (sessionName != null) {\n@@ -836,18 +846,4 @@ public void removeFinishedSession(TerminalSession finishedSession) {\n         }\n     }\n \n-    private void clearTemporaryDirectory() {\n-        if (mTermService.getSessions().size() == 0 && !mTermService.isWakelockEnabled()) {\n-            File termuxTmpDir = new File(TermuxService.PREFIX_PATH + \"/tmp\");\n-            if (termuxTmpDir.exists()) {\n-                try {\n-                    TermuxInstaller.deleteFolder(termuxTmpDir);\n-                } catch (Exception e) {\n-                    e.printStackTrace();\n-                }\n-\n-                termuxTmpDir.mkdirs();\n-            }\n-        }\n-    }\n }",
    "output": "Revert \"sessions: do not clear TMPDIR if application was not started\"\n\nThis reverts commit bd45837d9378b04a257bb875391a1d1192310b71."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -83,6 +83,8 @@\n  */\n public final class TermuxActivity extends Activity implements ServiceConnection {\n \n+    public static final String TERMUX_FAILSAFE_SESSION_ACTION = \"com.termux.app.failsafe_session\";\n+\n     private static final int CONTEXTMENU_SELECT_URL_ID = 0;\n     private static final int CONTEXTMENU_SHARE_TRANSCRIPT_ID = 1;\n     private static final int CONTEXTMENU_PASTE_ID = 3;\n@@ -478,7 +480,7 @@ public View getView(int position, View convertView, @NonNull ViewGroup parent) {\n                         Bundle bundle = getIntent().getExtras();\n                         boolean launchFailsafe = false;\n                         if (bundle != null) {\n-                            launchFailsafe = bundle.getBoolean(TermuxFailsafeActivity.TERMUX_FAILSAFE_SESSION_ACTION, false);\n+                            launchFailsafe = bundle.getBoolean(TERMUX_FAILSAFE_SESSION_ACTION, false);\n                         }\n                         clearTemporaryDirectory();\n                         addNewSession(launchFailsafe, null);\n@@ -495,7 +497,8 @@ public View getView(int position, View convertView, @NonNull ViewGroup parent) {\n             if (i != null && Intent.ACTION_RUN.equals(i.getAction())) {\n                 // Android 7.1 app shortcut from res/xml/shortcuts.xml.\n                 clearTemporaryDirectory();\n-                addNewSession(false, null);\n+                boolean failSafe = i.getBooleanExtra(TERMUX_FAILSAFE_SESSION_ACTION, false);\n+                addNewSession(failSafe, null);\n             } else {\n                 switchToSession(getStoredCurrentSessionOrLast());\n             }\n\ndiff --git a/app/src/main/java/com/termux/app/TermuxFailsafeActivity.java b/app/src/main/java/com/termux/app/TermuxFailsafeActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxFailsafeActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxFailsafeActivity.java\n@@ -1,19 +0,0 @@\n-package com.termux.app;\n-\n-import android.app.Activity;\n-import android.content.Intent;\n-import android.os.Bundle;\n-\n-public final class TermuxFailsafeActivity extends Activity {\n-\n-    public static final String TERMUX_FAILSAFE_SESSION_ACTION = \"com.termux.app.failsafe_session\";\n-\n-    @Override\n-    public void onCreate(Bundle bundle) {\n-        super.onCreate(bundle);\n-        Intent intent = new Intent(TermuxFailsafeActivity.this, TermuxActivity.class);\n-        intent.putExtra(TERMUX_FAILSAFE_SESSION_ACTION, true);\n-        startActivity(intent);\n-        finish();\n-    }\n-}",
    "output": "Remove the failsafe activity\n\nThe failsafe activity were infrequently used while confusing users.\n\nReplace it with an app shortcut on Android 7.1+ and a separate app on\nearlier versions."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -214,7 +214,7 @@ private Notification buildNotification() {\n         builder.setShowWhen(false);\n \n         // Background color for small notification icon:\n-        builder.setColor(0xFF000000);\n+        builder.setColor(0xFF607D8B);\n \n         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n             builder.setChannelId(NOTIFICATION_CHANNEL_ID);",
    "output": "Tweak notification icon color to make it work with dark notifcations\n\nAs the notification icon and text is set to black, ROMs like Samsung OneUI and themes that change notifications to have a dark background will have visibility issues with Termux notifications. This commit sets a neutral color which will be visible on both white and dark backgrounds."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/BellUtil.java b/app/src/main/java/com/termux/app/BellUtil.java\n--- a/app/src/main/java/com/termux/app/BellUtil.java\n+++ b/app/src/main/java/com/termux/app/BellUtil.java\n@@ -0,0 +1,63 @@\n+package com.termux.app;\n+\n+import android.content.Context;\n+import android.os.Handler;\n+import android.os.Looper;\n+import android.os.SystemClock;\n+import android.os.Vibrator;\n+\n+public class BellUtil {\n+    private static BellUtil instance = null;\n+    private static final Object lock = new Object();\n+\n+    public static BellUtil with(Context context) {\n+        if (instance == null) {\n+            synchronized (lock) {\n+                if (instance == null) {\n+                    instance = new BellUtil((Vibrator) context.getApplicationContext().getSystemService(Context.VIBRATOR_SERVICE));\n+                }\n+            }\n+        }\n+\n+        return instance;\n+    }\n+\n+    private static final long DURATION = 50;\n+    private static final long MIN_PAUSE = 3 * DURATION;\n+\n+    private final Handler handler = new Handler(Looper.getMainLooper());\n+    private long lastBell = 0;\n+    private final Runnable bellRunnable;\n+\n+    private BellUtil(final Vibrator vibrator) {\n+        bellRunnable = new Runnable() {\n+            @Override\n+            public void run() {\n+                if (vibrator != null) {\n+                    vibrator.vibrate(DURATION);\n+                }\n+            }\n+        };\n+    }\n+\n+    public synchronized void doBell() {\n+        long now = now();\n+        long timeSinceLastBell = now - lastBell;\n+\n+        if (timeSinceLastBell < 0) {\n+            // there is a next bell pending; don't schedule another one\n+        } else if (timeSinceLastBell < MIN_PAUSE) {\n+            // there was a bell recently, scheudle the next one\n+            handler.postDelayed(bellRunnable, MIN_PAUSE - timeSinceLastBell);\n+            lastBell = lastBell + MIN_PAUSE;\n+        } else {\n+            // the last bell was long ago, do it now\n+            bellRunnable.run();\n+            lastBell = now;\n+        }\n+    }\n+\n+    private long now() {\n+        return SystemClock.uptimeMillis();\n+    }\n+}\n\ndiff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -400,7 +400,7 @@ public void onBell(TerminalSession session) {\n                         mBellSoundPool.play(mBellSoundId, 1.f, 1.f, 1, 0, 1.f);\n                         break;\n                     case TermuxPreferences.BELL_VIBRATE:\n-                        ((Vibrator) getSystemService(VIBRATOR_SERVICE)).vibrate(50);\n+                        BellUtil.with(TermuxActivity.this).doBell();\n                         break;\n                     case TermuxPreferences.BELL_IGNORE:\n                         // Ignore the bell character.",
    "output": "Add limit for the bell (vibration)\n\nThis fixes https://github.com/termux/termux-app/issues/442"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/BackgroundJob.java b/app/src/main/java/com/termux/app/BackgroundJob.java\n--- a/app/src/main/java/com/termux/app/BackgroundJob.java\n+++ b/app/src/main/java/com/termux/app/BackgroundJob.java\n@@ -108,6 +108,11 @@ static String[] buildEnvironment(boolean failSafe, String cwd) {\n         // EXTERNAL_STORAGE is needed for /system/bin/am to work on at least\n         // Samsung S7 - see https://plus.google.com/110070148244138185604/posts/gp8Lk3aCGp3.\n         environment.add(\"EXTERNAL_STORAGE=\" + System.getenv(\"EXTERNAL_STORAGE\"));\n+        String androidRuntimeRoot = System.getenv(\"ANDROID_RUNTIME_ROOT\");\n+        // ANDROID_RUNTIME_ROOT is required for `am` to run on Android Q\n+        if (androidRuntimeRoot != null) {\n+            environment.add(\"ANDROID_RUNTIME_ROOT=\" + androidRuntimeRoot);\n+        }\n         if (failSafe) {\n             // Keep the default path so that system binaries can be used in the failsafe session.\n             environment.add(\"PATH= \" + System.getenv(\"PATH\"));",
    "output": "Make am work on Android Q"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -115,10 +115,14 @@ public boolean readSpecialButton(SpecialButton name) {\n         \n         if (! state.isOn)\n             return false;\n-        \n+\n+        if (state.button == null) {\n+            return false;\n+        }\n+\n         if (state.button.isPressed())\n             return true;\n-        \n+\n         if (! state.button.isChecked())\n             return false;\n ",
    "output": "extra keys view: fix crash in some cases\n\nAndroidRuntime: FATAL EXCEPTION: main\nAndroidRuntime: Process: com.termux, PID: 15799\nAndroidRuntime: java.lang.NullPointerException: Attempt to invoke virtual method 'boolean android.widget.ToggleButton.isPressed()' on a null object reference\nAndroidRuntime:        at com.termux.app.ExtraKeysView.readSpecialButton(ExtraKeysView.java:119)\nAndroidRuntime:        at com.termux.app.TermuxViewClient.readControlKey(TermuxViewClient.java:116)\nAndroidRuntime:        at com.termux.view.TerminalView.inputCodePoint(TerminalView.java:655)\nAndroidRuntime:        at com.termux.view.TerminalView$2.sendTextToTerminal(TerminalView.java:336)\nAndroidRuntime:        at com.termux.view.TerminalView$2.commitText(TerminalView.java:273)\nAndroidRuntime:        at com.android.internal.view.IInputConnectionWrapper.executeMessage(IInputConnectionWrapper.java:341)\nAndroidRuntime:        at com.android.internal.view.IInputConnectionWrapper$MyHandler.handleMessage(IInputConnectionWrapper.java:85)\nAndroidRuntime:        at android.os.Handler.dispatchMessage(Handler.java:105)\nAndroidRuntime:        at android.os.Looper.loop(Looper.java:164)\nAndroidRuntime:        at android.app.ActivityThread.main(ActivityThread.java:6944)\nAndroidRuntime:        at java.lang.reflect.Method.invoke(Native Method)\nAndroidRuntime:        at com.android.internal.os.Zygote$MethodAndArgsCaller.run(Zygote.java:327)\nAndroidRuntime:        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1374)"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxInstaller.java b/app/src/main/java/com/termux/app/TermuxInstaller.java\n--- a/app/src/main/java/com/termux/app/TermuxInstaller.java\n+++ b/app/src/main/java/com/termux/app/TermuxInstaller.java\n@@ -171,7 +171,7 @@ private static void ensureDirectoryExists(File directory) {\n     private static URL determineZipUrl() throws MalformedURLException {\n         String archName = determineTermuxArchName();\n         String url = Build.VERSION.SDK_INT >= Build.VERSION_CODES.N\n-            ? \"https://bintray.com/termux/bootstrap/download_file?file_path=bootstrap-\" + archName + \".zip\"\n+            ? \"https://termux.org/bootstrap-\" + archName + \".zip\"\n             : \"https://termux.net/bootstrap/bootstrap-\" + archName + \".zip\";\n         return new URL(url);\n     }",
    "output": "Use https://termux.org/bootstrap-${ARCH}.zip\n\nThis will redirect to the desired version of the bootstrap zip in\nbintray."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -295,6 +295,12 @@ TerminalSession createTermSession(String executablePath, String[] arguments, Str\n         TerminalSession session = new TerminalSession(executablePath, cwd, args, env, this);\n         mTerminalSessions.add(session);\n         updateNotification();\n+\n+        // Make sure that terminal styling is always applied.\n+        Intent stylingIntent = new Intent(\"com.termux.app.reload_style\");\n+        stylingIntent.putExtra(\"com.termux.app.reload_style\", \"styling\");\n+        sendBroadcast(stylingIntent);\n+\n         return session;\n     }\n ",
    "output": "termux service: make sure that styling is always applied whenever session starts"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -216,8 +216,8 @@ public void onCreate(Bundle bundle) {\n \n         final ViewPager viewPager = findViewById(R.id.viewpager);\n         if (mSettings.mShowExtraKeys) viewPager.setVisibility(View.VISIBLE);\n-        \n-        \n+\n+\n         ViewGroup.LayoutParams layoutParams = viewPager.getLayoutParams();\n         layoutParams.height = layoutParams.height * mSettings.mExtraKeys.length;\n         viewPager.setLayoutParams(layoutParams);\n@@ -367,8 +367,18 @@ public void onSessionFinished(final TerminalSession finishedSession) {\n                         showToast(toToastTitle(finishedSession) + \" - exited\", true);\n                 }\n \n-                if (mTermService.getSessions().size() > 1) {\n-                    removeFinishedSession(finishedSession);\n+                if (getPackageManager().hasSystemFeature(PackageManager.FEATURE_LEANBACK)) {\n+                    // On Android TV devices we need to use older behaviour because we may\n+                    // not be able to have multiple launcher icons.\n+                    if (mTermService.getSessions().size() > 1) {\n+                        removeFinishedSession(finishedSession);\n+                    }\n+                } else {\n+                    // Once we have a separate launcher icon for the failsafe session, it\n+                    // should be safe to auto-close session on exit code '0' or '130'.\n+                    if (finishedSession.getExitStatus() == 0 || finishedSession.getExitStatus() == 130) {\n+                        removeFinishedSession(finishedSession);\n+                    }\n                 }\n \n                 mListViewAdapter.notifyDataSetChanged();\n@@ -465,8 +475,13 @@ public View getView(int position, View convertView, @NonNull ViewGroup parent) {\n                 TermuxInstaller.setupIfNeeded(TermuxActivity.this, () -> {\n                     if (mTermService == null) return; // Activity might have been destroyed.\n                     try {\n+                        Bundle bundle = getIntent().getExtras();\n+                        boolean launchFailsafe = false;\n+                        if (bundle != null) {\n+                            launchFailsafe = bundle.getBoolean(TermuxFailsafeActivity.TERMUX_FAILSAFE_SESSION_ACTION, false);\n+                        }\n                         clearTemporaryDirectory();\n-                        addNewSession(false, null);\n+                        addNewSession(launchFailsafe, null);\n                     } catch (WindowManager.BadTokenException e) {\n                         // Activity finished - ignore.\n                     }\n\ndiff --git a/app/src/main/java/com/termux/app/TermuxFailsafeActivity.java b/app/src/main/java/com/termux/app/TermuxFailsafeActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxFailsafeActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxFailsafeActivity.java\n@@ -0,0 +1,19 @@\n+package com.termux.app;\n+\n+import android.app.Activity;\n+import android.content.Intent;\n+import android.os.Bundle;\n+\n+public final class TermuxFailsafeActivity extends Activity {\n+\n+    public static final String TERMUX_FAILSAFE_SESSION_ACTION = \"com.termux.app.failsafe_session\";\n+\n+    @Override\n+    public void onCreate(Bundle bundle) {\n+        super.onCreate(bundle);\n+        Intent intent = new Intent(TermuxFailsafeActivity.this, TermuxActivity.class);\n+        intent.putExtra(TERMUX_FAILSAFE_SESSION_ACTION, true);\n+        startActivity(intent);\n+        finish();\n+    }\n+}",
    "output": "sessions: failsafe session is now accessible via separate launcher icon\n\nAlso enables session autoclosing so no more \"annoying\" messages\nabout \"process completed - press enter\". There autoclosing will be\nperformed on exit codes '0' and '130'.\n\nOn Android TV devices old behaviour will be used - auto close enabled for all\nsessions when amount of running sessions >1."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/BackgroundJob.java b/app/src/main/java/com/termux/app/BackgroundJob.java\n--- a/app/src/main/java/com/termux/app/BackgroundJob.java\n+++ b/app/src/main/java/com/termux/app/BackgroundJob.java\n@@ -93,32 +93,49 @@ public void run() {\n         };\n     }\n \n-    public static String[] buildEnvironment(boolean failSafe, String cwd) {\n+    static String[] buildEnvironment(boolean failSafe, String cwd) {\n         new File(TermuxService.HOME_PATH).mkdirs();\n \n         if (cwd == null) cwd = TermuxService.HOME_PATH;\n \n-        final String termEnv = \"TERM=xterm-256color\";\n-        final String homeEnv = \"HOME=\" + TermuxService.HOME_PATH;\n-        final String prefixEnv = \"PREFIX=\" + TermuxService.PREFIX_PATH;\n-        final String androidRootEnv = \"ANDROID_ROOT=\" + System.getenv(\"ANDROID_ROOT\");\n-        final String androidDataEnv = \"ANDROID_DATA=\" + System.getenv(\"ANDROID_DATA\");\n+        List<String> environment = new ArrayList<>();\n+\n+        environment.add(\"TERM=xterm-256color\");\n+        environment.add(\"HOME=\" + TermuxService.HOME_PATH);\n+        environment.add(\"PREFIX=\" + TermuxService.PREFIX_PATH);\n+        environment.add(\"ANDROID_ROOT=\" + System.getenv(\"ANDROID_ROOT\"));\n+        environment.add(\"ANDROID_DATA=\" + System.getenv(\"ANDROID_DATA\"));\n         // EXTERNAL_STORAGE is needed for /system/bin/am to work on at least\n         // Samsung S7 - see https://plus.google.com/110070148244138185604/posts/gp8Lk3aCGp3.\n-        final String externalStorageEnv = \"EXTERNAL_STORAGE=\" + System.getenv(\"EXTERNAL_STORAGE\");\n+        environment.add(\"EXTERNAL_STORAGE=\" + System.getenv(\"EXTERNAL_STORAGE\"));\n         if (failSafe) {\n             // Keep the default path so that system binaries can be used in the failsafe session.\n-            final String pathEnv = \"PATH=\" + System.getenv(\"PATH\");\n-            return new String[]{termEnv, homeEnv, prefixEnv, androidRootEnv, androidDataEnv, pathEnv, externalStorageEnv};\n+            environment.add(\"PATH= \" + System.getenv(\"PATH\"));\n         } else {\n-            final String ldEnv = \"LD_LIBRARY_PATH=\" + TermuxService.PREFIX_PATH + \"/lib\";\n-            final String langEnv = \"LANG=en_US.UTF-8\";\n-            final String pathEnv = \"PATH=\" + TermuxService.PREFIX_PATH + \"/bin:\" + TermuxService.PREFIX_PATH + \"/bin/applets\";\n-            final String pwdEnv = \"PWD=\" + cwd;\n-            final String tmpdirEnv = \"TMPDIR=\" + TermuxService.PREFIX_PATH + \"/tmp\";\n+            if (shouldAddLdLibraryPath()) {\n+                environment.add(\"LD_LIBRARY_PATH=\" + TermuxService.PREFIX_PATH + \"/lib\");\n+            }\n+            environment.add(\"LANG=en_US.UTF-8\");\n+            environment.add(\"PATH=\" + TermuxService.PREFIX_PATH + \"/bin:\" + TermuxService.PREFIX_PATH + \"/bin/applets\");\n+            environment.add(\"PWD=\" + cwd);\n+            environment.add(\"TMPDIR=\" + TermuxService.PREFIX_PATH + \"/tmp\");\n+        }\n+\n+        return environment.toArray(new String[0]);\n+    }\n \n-            return new String[]{termEnv, homeEnv, prefixEnv, ldEnv, langEnv, pathEnv, pwdEnv, androidRootEnv, androidDataEnv, externalStorageEnv, tmpdirEnv};\n+    private static boolean shouldAddLdLibraryPath() {\n+        try (BufferedReader in = new BufferedReader(new InputStreamReader(new FileInputStream(TermuxService.PREFIX_PATH + \"/etc/apt/sources.list\")))) {\n+            String line;\n+            while ((line = in.readLine()) != null) {\n+                if (!line.startsWith(\"#\") && line.contains(\"https://dl.bintray.com/termux/termux-packages-24\")) {\n+                    return false;\n+                }\n+            }\n+        } catch (IOException e) {\n+            Log.e(LOG_TAG, \"Error trying to read sources.list\", e);\n         }\n+        return true;\n     }\n \n     public static int getPid(Process p) {",
    "output": "Do not export LD_LIBRARY_PATH if bintray is used"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxInstaller.java b/app/src/main/java/com/termux/app/TermuxInstaller.java\n--- a/app/src/main/java/com/termux/app/TermuxInstaller.java\n+++ b/app/src/main/java/com/termux/app/TermuxInstaller.java\n@@ -170,7 +170,10 @@ private static void ensureDirectoryExists(File directory) {\n     /** Get bootstrap zip url for this systems cpu architecture. */\n     private static URL determineZipUrl() throws MalformedURLException {\n         String archName = determineTermuxArchName();\n-        return new URL(\"https://termux.net/bootstrap/bootstrap-\" + archName + \".zip\");\n+        String url = Build.VERSION.SDK_INT >= Build.VERSION_CODES.N\n+            ? \"https://bintray.com/termux/bootstrap/download_file?file_path=bootstrap-\" + archName + \".zip\"\n+            : \"https://termux.net/bootstrap/bootstrap-\" + archName + \".zip\";\n+        return new URL(url);\n     }\n \n     private static String determineTermuxArchName() {",
    "output": "Install from bintray on Android 7 and later"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -465,6 +465,7 @@ public View getView(int position, View convertView, @NonNull ViewGroup parent) {\n                 TermuxInstaller.setupIfNeeded(TermuxActivity.this, () -> {\n                     if (mTermService == null) return; // Activity might have been destroyed.\n                     try {\n+                        clearTemporaryDirectory();\n                         addNewSession(false, null);\n                     } catch (WindowManager.BadTokenException e) {\n                         // Activity finished - ignore.\n@@ -478,6 +479,7 @@ public View getView(int position, View convertView, @NonNull ViewGroup parent) {\n             Intent i = getIntent();\n             if (i != null && Intent.ACTION_RUN.equals(i.getAction())) {\n                 // Android 7.1 app shortcut from res/xml/shortcuts.xml.\n+                clearTemporaryDirectory();\n                 addNewSession(false, null);\n             } else {\n                 switchToSession(getStoredCurrentSessionOrLast());\n@@ -572,18 +574,6 @@ void addNewSession(boolean failSafe, String sessionName) {\n             new AlertDialog.Builder(this).setTitle(R.string.max_terminals_reached_title).setMessage(R.string.max_terminals_reached_message)\n                 .setPositiveButton(android.R.string.ok, null).show();\n         } else {\n-            if (mTermService.getSessions().size() == 0 && !mTermService.isWakelockEnabled()) {\n-                File termuxTmpDir = new File(TermuxService.PREFIX_PATH + \"/tmp\");\n-                if (termuxTmpDir.exists()) {\n-                    try {\n-                        TermuxInstaller.deleteFolder(termuxTmpDir);\n-                    } catch (Exception e) {\n-                        e.printStackTrace();\n-                    }\n-\n-                    termuxTmpDir.mkdirs();\n-                }\n-            }\n             String executablePath = (failSafe ? \"/system/bin/sh\" : null);\n             TerminalSession newSession = mTermService.createTermSession(executablePath, null, null, failSafe);\n             if (sessionName != null) {\n@@ -828,4 +818,18 @@ public void removeFinishedSession(TerminalSession finishedSession) {\n         }\n     }\n \n+    private void clearTemporaryDirectory() {\n+        if (mTermService.getSessions().size() == 0 && !mTermService.isWakelockEnabled()) {\n+            File termuxTmpDir = new File(TermuxService.PREFIX_PATH + \"/tmp\");\n+            if (termuxTmpDir.exists()) {\n+                try {\n+                    TermuxInstaller.deleteFolder(termuxTmpDir);\n+                } catch (Exception e) {\n+                    e.printStackTrace();\n+                }\n+\n+                termuxTmpDir.mkdirs();\n+            }\n+        }\n+    }\n }",
    "output": "sessions: do not clear TMPDIR if application was not started"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxPreferences.java b/app/src/main/java/com/termux/app/TermuxPreferences.java\n--- a/app/src/main/java/com/termux/app/TermuxPreferences.java\n+++ b/app/src/main/java/com/termux/app/TermuxPreferences.java\n@@ -157,7 +157,7 @@ void reloadFromProperties(Context context) {\n                 }\n             }\n         } catch (IOException e) {\n-            Toast.makeText(context, \"Could not open the propertiey file termux.properties.\", Toast.LENGTH_LONG).show();\n+            Toast.makeText(context, \"Could not open properties file termux.properties.\", Toast.LENGTH_LONG).show();\n             Log.e(\"termux\", \"Error loading props\", e);\n         }\n ",
    "output": "termux-app: Fix a typo in TermuxPreferences"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxOpenReceiver.java b/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n--- a/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n+++ b/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n@@ -87,7 +87,7 @@ public void onReceive(Context context, Intent intent) {\n             contentTypeToUse = contentTypeExtra;\n         }\n \n-        Uri uriToShare = Uri.withAppendedPath(Uri.parse(\"content://com.termux.files/\"), filePath);\n+        Uri uriToShare = Uri.parse(\"content://com.termux.files\" + fileToShare.getAbsolutePath());\n \n         if (Intent.ACTION_SEND.equals(intentAction)) {\n             sendIntent.putExtra(Intent.EXTRA_STREAM, uriToShare);",
    "output": "fix termux/termux-app#995 on the java side"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -249,7 +249,7 @@ public Object instantiateItem(@NonNull ViewGroup collection, int position) {\n                         if (session != null) {\n                             if (session.isRunning()) {\n                                 String textToSend = editText.getText().toString();\n-                                if (textToSend.length() == 0) textToSend = \"\\n\";\n+                                if (textToSend.length() == 0) textToSend = \"\\r\";\n                                 session.write(textToSend);\n                             } else {\n                                 removeFinishedSession(session);",
    "output": "Send \\r instead of \\n from native input text view (fixes #1020)"
  },
  {
    "input": "diff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalBuffer.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalBuffer.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalBuffer.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalBuffer.java\n@@ -1,5 +1,7 @@\n package com.termux.terminal;\n \n+import java.util.Arrays;\n+\n /**\n  * A circular buffer of {@link TerminalRow}:s which keeps notes about what is visible on a logical screen and the scroll\n  * history.\n@@ -422,4 +424,14 @@ public void setOrClearEffect(int bits, boolean setOrClear, boolean reverse, bool\n         }\n     }\n \n+    public void clearTranscript() {\n+        if (mScreenFirstRow < mActiveTranscriptRows) {\n+            Arrays.fill(mLines, mTotalRows + mScreenFirstRow - mActiveTranscriptRows, mTotalRows, null);\n+            Arrays.fill(mLines, 0, mScreenFirstRow, null);\n+        } else {\n+            Arrays.fill(mLines, mScreenFirstRow - mActiveTranscriptRows, mScreenFirstRow, null);\n+        }\n+        mActiveTranscriptRows = 0;\n+    }\n+\n }\n\ndiff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n@@ -1404,7 +1404,7 @@ private void doCsi(int b) {\n             case 'I': // Cursor Horizontal Forward Tabulation (CHT). Move the active position n tabs forward.\n                 setCursorCol(nextTabStop(getArg0(1)));\n                 break;\n-            case 'J': // \"${CSI}${0,1,2}J\" - Erase in Display (ED)\n+            case 'J': // \"${CSI}${0,1,2,3}J\" - Erase in Display (ED)\n                 // ED ignores the scrolling margins.\n                 switch (getArg0(0)) {\n                     case 0: // Erase from the active position to the end of the screen, inclusive (default).\n@@ -1419,6 +1419,9 @@ private void doCsi(int b) {\n                         // move..\n                         blockClear(0, 0, mColumns, mRows);\n                         break;\n+                    case 3: // Delete all lines saved in the scrollback buffer (xterm etc)\n+                        mMainBuffer.clearTranscript();\n+                        break;\n                     default:\n                         unknownSequence(b);\n                         return;\n\ndiff --git a/terminal-emulator/src/test/java/com/termux/terminal/ControlSequenceIntroducerTest.java b/terminal-emulator/src/test/java/com/termux/terminal/ControlSequenceIntroducerTest.java\n--- a/terminal-emulator/src/test/java/com/termux/terminal/ControlSequenceIntroducerTest.java\n+++ b/terminal-emulator/src/test/java/com/termux/terminal/ControlSequenceIntroducerTest.java\n@@ -46,4 +46,20 @@ public void testRepeat() {\n         withTerminalSized(5, 2).enterString(\"abcde\\033[2G\\033[2b\\n\").assertLinesAre(\"aeede\", \"     \");\n     }\n \n+    /** CSI 3 J  Clear scrollback (xterm, libvte; non-standard). */\n+    public void testCsi3J() {\n+        withTerminalSized(3, 2).enterString(\"a\\r\\nb\\r\\nc\\r\\nd\");\n+        assertEquals(\"a\\nb\\nc\\nd\", mTerminal.getScreen().getTranscriptText());\n+        enterString(\"\\033[3J\");\n+        assertEquals(\"c\\nd\", mTerminal.getScreen().getTranscriptText());\n+\n+        withTerminalSized(3, 2).enterString(\"Lorem_ipsum\");\n+        assertEquals(\"Lorem_ipsum\", mTerminal.getScreen().getTranscriptText());\n+        enterString(\"\\033[3J\");\n+        assertEquals(\"ipsum\", mTerminal.getScreen().getTranscriptText());\n+\n+        withTerminalSized(3, 2).enterString(\"w\\r\\nx\\r\\ny\\r\\nz\\033[?1049h\\033[3J\\033[?1049l\");\n+        assertEquals(\"y\\nz\", mTerminal.getScreen().getTranscriptText());\n+    }\n+\n }\n\ndiff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -358,10 +358,12 @@ protected int computeVerticalScrollOffset() {\n     public void onScreenUpdated() {\n         if (mEmulator == null) return;\n \n+        int rowsInHistory = mEmulator.getScreen().getActiveTranscriptRows();\n+        if (mTopRow < -rowsInHistory) mTopRow = -rowsInHistory;\n+\n         boolean skipScrolling = false;\n         if (mIsSelectingText) {\n             // Do not scroll when selecting text.\n-            int rowsInHistory = mEmulator.getScreen().getActiveTranscriptRows();\n             int rowShift = mEmulator.getScrollCounter();\n             if (-mTopRow + rowShift > rowsInHistory) {\n                 // .. unless we're hitting the end of history transcript, in which",
    "output": "Implement CSI 3 J - Clear transcript"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -84,7 +84,7 @@ static void sendKey(View view, String keyName) {\n         } else {\n             // not a control char\n             TerminalSession session = terminalView.getCurrentSession();\n-            if (session != null)\n+            if (session != null && keyName.length() > 0)\n                 session.write(keyName);\n         }\n     }",
    "output": "extra keys: fix crash when clicking on \"empty\" (undefined) key"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxViewClient.java b/app/src/main/java/com/termux/app/TermuxViewClient.java\n--- a/app/src/main/java/com/termux/app/TermuxViewClient.java\n+++ b/app/src/main/java/com/termux/app/TermuxViewClient.java\n@@ -210,6 +210,7 @@ public boolean onCodePoint(final int codePoint, boolean ctrlDown, TerminalSessio\n \n                 // Writing mode:\n                 case 'q':\n+                case 'k':\n                     mActivity.toggleShowExtraKeys();\n                     break;\n             }",
    "output": "Toggle the extra keys view with VolumeUp+K\n\nUsing K as a shortcut for toggling extra Keyboard probably makes more\nsense than VolumeUp+Q, although we support both for now."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -638,8 +638,8 @@ public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuIn\n         menu.add(Menu.NONE, CONTEXTMENU_RESET_TERMINAL_ID, Menu.NONE, R.string.reset_terminal);\n         menu.add(Menu.NONE, CONTEXTMENU_KILL_PROCESS_ID, Menu.NONE, getResources().getString(R.string.kill_process, getCurrentTermSession().getPid())).setEnabled(currentSession.isRunning());\n         menu.add(Menu.NONE, CONTEXTMENU_STYLING_ID, Menu.NONE, R.string.style_terminal);\n-        menu.add(Menu.NONE, CONTEXTMENU_HELP_ID, Menu.NONE, R.string.help);\n         menu.add(Menu.NONE, CONTEXTMENU_TOGGLE_KEEP_SCREEN_ON, Menu.NONE, R.string.toggle_keep_screen_on).setCheckable(true).setChecked(mSettings.isScreenAlwaysOn());\n+        menu.add(Menu.NONE, CONTEXTMENU_HELP_ID, Menu.NONE, R.string.help);\n     }\n \n     /** Hook system menu to show context menu instead. */",
    "output": "Keep help context menu item as last item"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -215,7 +215,7 @@ public void onCreate(Bundle bundle) {\n         mTerminalView.requestFocus();\n \n         final ViewPager viewPager = findViewById(R.id.viewpager);\n-        if (mSettings.isShowExtraKeys()) viewPager.setVisibility(View.VISIBLE);\n+        if (mSettings.mShowExtraKeys) viewPager.setVisibility(View.VISIBLE);\n         \n         \n         ViewGroup.LayoutParams layoutParams = viewPager.getLayoutParams();\n\ndiff --git a/app/src/main/java/com/termux/app/TermuxPreferences.java b/app/src/main/java/com/termux/app/TermuxPreferences.java\n--- a/app/src/main/java/com/termux/app/TermuxPreferences.java\n+++ b/app/src/main/java/com/termux/app/TermuxPreferences.java\n@@ -27,9 +27,25 @@ final class TermuxPreferences {\n \n     @IntDef({BELL_VIBRATE, BELL_BEEP, BELL_IGNORE})\n     @Retention(RetentionPolicy.SOURCE)\n-    public @interface AsciiBellBehaviour {\n+    @interface AsciiBellBehaviour {\n     }\n \n+    final static class KeyboardShortcut {\n+\n+        KeyboardShortcut(int codePoint, int shortcutAction) {\n+            this.codePoint = codePoint;\n+            this.shortcutAction = shortcutAction;\n+        }\n+\n+        final int codePoint;\n+        final int shortcutAction;\n+    }\n+\n+    static final int SHORTCUT_ACTION_CREATE_SESSION = 1;\n+    static final int SHORTCUT_ACTION_NEXT_SESSION = 2;\n+    static final int SHORTCUT_ACTION_PREVIOUS_SESSION = 3;\n+    static final int SHORTCUT_ACTION_RENAME_SESSION = 4;\n+\n     static final int BELL_VIBRATE = 1;\n     static final int BELL_BEEP = 2;\n     static final int BELL_IGNORE = 3;\n@@ -50,7 +66,11 @@ final class TermuxPreferences {\n \n     boolean mBackIsEscape;\n     boolean mShowExtraKeys;\n-    \n+\n+    String[][] mExtraKeys;\n+\n+    final List<KeyboardShortcut> shortcuts = new ArrayList<>();\n+\n     /**\n      * If value is not in the range [min, max], set it to either min or max.\n      */\n@@ -84,10 +104,6 @@ static int clamp(int value, int min, int max) {\n         mFontSize = clamp(mFontSize, MIN_FONTSIZE, MAX_FONTSIZE); \n     }\n \n-    boolean isShowExtraKeys() {\n-        return mShowExtraKeys;\n-    }\n-\n     boolean toggleShowExtraKeys(Context context) {\n         mShowExtraKeys = !mShowExtraKeys;\n         PreferenceManager.getDefaultSharedPreferences(context).edit().putBoolean(SHOW_EXTRA_KEYS_KEY, mShowExtraKeys).apply();\n@@ -128,9 +144,7 @@ static TerminalSession getCurrentSession(TermuxActivity context) {\n         return null;\n     }\n     \n-    public String[][] mExtraKeys;\n-\n-    public void reloadFromProperties(Context context) {\n+    void reloadFromProperties(Context context) {\n         File propsFile = new File(TermuxService.HOME_PATH + \"/.termux/termux.properties\");\n         if (!propsFile.exists())\n             propsFile = new File(TermuxService.HOME_PATH + \"/.config/termux/termux.properties\");\n@@ -185,24 +199,6 @@ public void reloadFromProperties(Context context) {\n         parseAction(\"shortcut.rename-session\", SHORTCUT_ACTION_RENAME_SESSION, props);\n     }\n \n-    public static final int SHORTCUT_ACTION_CREATE_SESSION = 1;\n-    public static final int SHORTCUT_ACTION_NEXT_SESSION = 2;\n-    public static final int SHORTCUT_ACTION_PREVIOUS_SESSION = 3;\n-    public static final int SHORTCUT_ACTION_RENAME_SESSION = 4;\n-\n-    public final static class KeyboardShortcut {\n-\n-        public KeyboardShortcut(int codePoint, int shortcutAction) {\n-            this.codePoint = codePoint;\n-            this.shortcutAction = shortcutAction;\n-        }\n-\n-        final int codePoint;\n-        final int shortcutAction;\n-    }\n-\n-    final List<KeyboardShortcut> shortcuts = new ArrayList<>();\n-\n     private void parseAction(String name, int shortcutAction, Properties props) {\n         String value = props.getProperty(name);\n         if (value == null) return;",
    "output": "Minor restructuring of TermuxPreferences"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -90,6 +90,7 @@ public final class TermuxActivity extends Activity implements ServiceConnection\n     private static final int CONTEXTMENU_RESET_TERMINAL_ID = 5;\n     private static final int CONTEXTMENU_STYLING_ID = 6;\n     private static final int CONTEXTMENU_HELP_ID = 8;\n+    private static final int CONTEXTMENU_TOGGLE_KEEP_SCREEN_ON = 9;\n \n     private static final int MAX_SESSIONS = 8;\n \n@@ -210,6 +211,7 @@ public void onCreate(Bundle bundle) {\n         mTerminalView.setOnKeyListener(new TermuxViewClient(this));\n \n         mTerminalView.setTextSize(mSettings.getFontSize());\n+        mTerminalView.setKeepScreenOn(mSettings.isScreenAlwaysOn());\n         mTerminalView.requestFocus();\n \n         final ViewPager viewPager = findViewById(R.id.viewpager);\n@@ -637,6 +639,7 @@ public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuIn\n         menu.add(Menu.NONE, CONTEXTMENU_KILL_PROCESS_ID, Menu.NONE, getResources().getString(R.string.kill_process, getCurrentTermSession().getPid())).setEnabled(currentSession.isRunning());\n         menu.add(Menu.NONE, CONTEXTMENU_STYLING_ID, Menu.NONE, R.string.style_terminal);\n         menu.add(Menu.NONE, CONTEXTMENU_HELP_ID, Menu.NONE, R.string.help);\n+        menu.add(Menu.NONE, CONTEXTMENU_TOGGLE_KEEP_SCREEN_ON, Menu.NONE, R.string.toggle_keep_screen_on).setCheckable(true).setChecked(mSettings.isScreenAlwaysOn());\n     }\n \n     /** Hook system menu to show context menu instead. */\n@@ -756,6 +759,16 @@ public boolean onContextItemSelected(MenuItem item) {\n             case CONTEXTMENU_HELP_ID:\n                 startActivity(new Intent(this, TermuxHelpActivity.class));\n                 return true;\n+            case CONTEXTMENU_TOGGLE_KEEP_SCREEN_ON: {\n+                if(mTerminalView.getKeepScreenOn()) {\n+                    mTerminalView.setKeepScreenOn(false);\n+                    mSettings.setScreenAlwaysOn(this, false);\n+                } else {\n+                    mTerminalView.setKeepScreenOn(true);\n+                    mSettings.setScreenAlwaysOn(this, true);\n+                }\n+                return true;\n+            }\n             default:\n                 return super.onContextItemSelected(item);\n         }\n\ndiff --git a/app/src/main/java/com/termux/app/TermuxPreferences.java b/app/src/main/java/com/termux/app/TermuxPreferences.java\n--- a/app/src/main/java/com/termux/app/TermuxPreferences.java\n+++ b/app/src/main/java/com/termux/app/TermuxPreferences.java\n@@ -40,7 +40,9 @@ final class TermuxPreferences {\n     private static final String SHOW_EXTRA_KEYS_KEY = \"show_extra_keys\";\n     private static final String FONTSIZE_KEY = \"fontsize\";\n     private static final String CURRENT_SESSION_KEY = \"current_session\";\n+    private static final String SCREEN_ALWAYS_ON_KEY = \"screen_always_on\";\n \n+    private boolean mScreenAlwaysOn;\n     private int mFontSize;\n \n     @AsciiBellBehaviour\n@@ -67,6 +69,7 @@ static int clamp(int value, int min, int max) {\n         MIN_FONTSIZE = (int) (4f * dipInPixels);\n \n         mShowExtraKeys = prefs.getBoolean(SHOW_EXTRA_KEYS_KEY, true);\n+        mScreenAlwaysOn = prefs.getBoolean(SCREEN_ALWAYS_ON_KEY, false);\n \n         // http://www.google.com/design/spec/style/typography.html#typography-line-height\n         int defaultFontSize = Math.round(12 * dipInPixels);\n@@ -103,6 +106,15 @@ void changeFontSize(Context context, boolean increase) {\n         prefs.edit().putString(FONTSIZE_KEY, Integer.toString(mFontSize)).apply();\n     }\n \n+    boolean isScreenAlwaysOn() {\n+        return mScreenAlwaysOn;\n+    }\n+\n+    void setScreenAlwaysOn(Context context, boolean newValue) {\n+        mScreenAlwaysOn = newValue;\n+        PreferenceManager.getDefaultSharedPreferences(context).edit().putBoolean(SCREEN_ALWAYS_ON_KEY, newValue).apply();\n+    }\n+\n     static void storeCurrentSession(Context context, TerminalSession session) {\n         PreferenceManager.getDefaultSharedPreferences(context).edit().putString(TermuxPreferences.CURRENT_SESSION_KEY, session.mHandle).apply();\n     }",
    "output": "feature: allow to keep screen on"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -142,6 +142,10 @@ public void onReceive(Context context, Intent intent) {\n                 }\n                 checkForFontAndColors();\n                 mSettings.reloadFromProperties(TermuxActivity.this);\n+\n+                if (mExtraKeysView != null) {\n+                    mExtraKeysView.reload(mSettings.mExtraKeys, ExtraKeysView.defaultCharDisplay);\n+                }\n             }\n         }\n     };",
    "output": "Make termux-reload-settings reload the extra keys directly"
  },
  {
    "input": "diff --git a/terminal-emulator/src/test/java/com/termux/terminal/TerminalTestCase.java b/terminal-emulator/src/test/java/com/termux/terminal/TerminalTestCase.java\n--- a/terminal-emulator/src/test/java/com/termux/terminal/TerminalTestCase.java\n+++ b/terminal-emulator/src/test/java/com/termux/terminal/TerminalTestCase.java\n@@ -4,7 +4,6 @@\n import junit.framework.TestCase;\n \n import java.io.ByteArrayOutputStream;\n-import java.io.UnsupportedEncodingException;\n import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n import java.util.HashSet;\n@@ -27,14 +26,10 @@ public void write(byte[] data, int offset, int count) {\n \t\t}\n \n \t\tpublic String getOutputAndClear() {\n-\t\t\ttry {\n-\t\t\t\tString result = new String(baos.toByteArray(), \"UTF-8\");\n-\t\t\t\tbaos.reset();\n-\t\t\t\treturn result;\n-\t\t\t} catch (UnsupportedEncodingException e) {\n-\t\t\t\tthrow new RuntimeException(e);\n-\t\t\t}\n-\t\t}\n+            String result = new String(baos.toByteArray(), StandardCharsets.UTF_8);\n+            baos.reset();\n+            return result;\n+        }\n \n \t\t@Override\n \t\tpublic void titleChanged(String oldTitle, String newTitle) {",
    "output": "Use constant for utf-8 encoding"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxPreferences.java b/app/src/main/java/com/termux/app/TermuxPreferences.java\n--- a/app/src/main/java/com/termux/app/TermuxPreferences.java\n+++ b/app/src/main/java/com/termux/app/TermuxPreferences.java\n@@ -16,6 +16,7 @@\n import java.io.InputStreamReader;\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n+import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Properties;\n@@ -125,9 +126,8 @@ public void reloadFromProperties(Context context) {\n         Properties props = new Properties();\n         try {\n             if (propsFile.isFile() && propsFile.canRead()) {\n-                String encoding = \"utf-8\"; // most useful default nowadays\n                 try (FileInputStream in = new FileInputStream(propsFile)) {\n-                    props.load(new InputStreamReader(in, encoding));\n+                    props.load(new InputStreamReader(in, StandardCharsets.UTF_8));\n                 }\n             }\n         } catch (IOException e) {",
    "output": "Use constant for utf-8 encoding"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxOpenReceiver.java b/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n--- a/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n+++ b/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n@@ -78,7 +78,7 @@ public void onReceive(Context context, Intent intent) {\n         if (contentTypeExtra == null) {\n             String fileName = fileToShare.getName();\n             int lastDotIndex = fileName.lastIndexOf('.');\n-            String fileExtension = fileName.substring(lastDotIndex + 1, fileName.length());\n+            String fileExtension = fileName.substring(lastDotIndex + 1);\n             MimeTypeMap mimeTypes = MimeTypeMap.getSingleton();\n             // Lower casing makes it work with e.g. \"JPG\":\n             contentTypeToUse = mimeTypes.getMimeTypeFromExtension(fileExtension.toLowerCase());",
    "output": "Fix Android Studio lint warning"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -108,16 +108,6 @@ private static class SpecialButtonState {\n     private PopupWindow popupWindow;\n     private int longPressCount;\n     \n-    /** @deprecated call readSpecialButton(SpecialButton.CTRL); */\n-    public boolean readControlButton() {\n-        return readSpecialButton(SpecialButton.CTRL);\n-    }\n-    \n-    /** @deprecated call readSpecialButton(SpecialButton.ALT); */\n-    public boolean readAltButton() {\n-        return readSpecialButton(SpecialButton.ALT);\n-    }\n-    \n     public boolean readSpecialButton(SpecialButton name) {\n         SpecialButtonState state = specialButtons.get(name);\n         if (state == null)\n\ndiff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -25,11 +25,6 @@\n import android.os.Bundle;\n import android.os.IBinder;\n import android.os.Vibrator;\n-import android.support.annotation.NonNull;\n-import android.support.annotation.Nullable;\n-import android.support.v4.view.PagerAdapter;\n-import android.support.v4.view.ViewPager;\n-import android.support.v4.widget.DrawerLayout;\n import android.text.SpannableString;\n import android.text.Spanned;\n import android.text.TextUtils;\n@@ -70,6 +65,12 @@\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.drawerlayout.widget.DrawerLayout;\n+import androidx.viewpager.widget.PagerAdapter;\n+import androidx.viewpager.widget.ViewPager;\n+\n /**\n  * A terminal emulator activity.\n  * <p/>\n@@ -645,7 +646,7 @@ static LinkedHashSet<CharSequence> extractUrls(String text) {\n         // Pattern for recognizing a URL, based off RFC 3986\n         // http://stackoverflow.com/questions/5713558/detect-and-extract-url-from-a-string\n         final Pattern urlPattern = Pattern.compile(\n-            \"(?:^|[\\\\W])((ht|f)tp(s?)://|www\\\\.)\" + \"(([\\\\w\\\\-]+\\\\.)+?([\\\\w\\\\-.~]+/?)*\" + \"[\\\\p{Alnum}.,%_=?&#\\\\-+()\\\\[\\\\]\\\\*$~@!:/{};']*)\",\n+            \"(?:^|[\\\\W])((ht|f)tp(s?)://|www\\\\.)\" + \"(([\\\\w\\\\-]+\\\\.)+?([\\\\w\\\\-.~]+/?)*\" + \"[\\\\p{Alnum}.,%_=?&#\\\\-+()\\\\[\\\\]*$~@!:/{};']*)\",\n             Pattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL);\n         LinkedHashSet<CharSequence> urlSet = new LinkedHashSet<>();\n         Matcher matcher = urlPattern.matcher(text);\n\ndiff --git a/app/src/main/java/com/termux/app/TermuxOpenReceiver.java b/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n--- a/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n+++ b/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n@@ -11,7 +11,6 @@\n import android.os.Environment;\n import android.os.ParcelFileDescriptor;\n import android.provider.MediaStore;\n-import android.support.annotation.NonNull;\n import android.util.Log;\n import android.webkit.MimeTypeMap;\n \n@@ -21,6 +20,8 @@\n import java.io.FileNotFoundException;\n import java.io.IOException;\n \n+import androidx.annotation.NonNull;\n+\n public class TermuxOpenReceiver extends BroadcastReceiver {\n \n     @Override\n\ndiff --git a/app/src/main/java/com/termux/app/TermuxPreferences.java b/app/src/main/java/com/termux/app/TermuxPreferences.java\n--- a/app/src/main/java/com/termux/app/TermuxPreferences.java\n+++ b/app/src/main/java/com/termux/app/TermuxPreferences.java\n@@ -3,7 +3,6 @@\n import android.content.Context;\n import android.content.SharedPreferences;\n import android.preference.PreferenceManager;\n-import android.support.annotation.IntDef;\n import android.util.Log;\n import android.util.TypedValue;\n import android.widget.Toast;\n@@ -21,6 +20,8 @@\n import java.util.List;\n import java.util.Properties;\n \n+import androidx.annotation.IntDef;\n+\n final class TermuxPreferences {\n \n     @IntDef({BELL_VIBRATE, BELL_BEEP, BELL_IGNORE})\n\ndiff --git a/app/src/main/java/com/termux/app/TermuxViewClient.java b/app/src/main/java/com/termux/app/TermuxViewClient.java\n--- a/app/src/main/java/com/termux/app/TermuxViewClient.java\n+++ b/app/src/main/java/com/termux/app/TermuxViewClient.java\n@@ -2,7 +2,6 @@\n \n import android.content.Context;\n import android.media.AudioManager;\n-import android.support.v4.widget.DrawerLayout;\n import android.view.Gravity;\n import android.view.InputDevice;\n import android.view.KeyEvent;\n@@ -16,6 +15,8 @@\n \n import java.util.List;\n \n+import androidx.drawerlayout.widget.DrawerLayout;\n+\n public final class TermuxViewClient implements TerminalViewClient {\n \n     final TermuxActivity mActivity;\n@@ -112,12 +113,12 @@ public boolean onKeyUp(int keyCode, KeyEvent e) {\n \n     @Override\n     public boolean readControlKey() {\n-        return (mActivity.mExtraKeysView != null && mActivity.mExtraKeysView.readControlButton()) || mVirtualControlKeyDown;\n+        return (mActivity.mExtraKeysView != null && mActivity.mExtraKeysView.readSpecialButton(ExtraKeysView.SpecialButton.CTRL)) || mVirtualControlKeyDown;\n     }\n \n     @Override\n     public boolean readAltKey() {\n-        return (mActivity.mExtraKeysView != null && mActivity.mExtraKeysView.readAltButton());\n+        return (mActivity.mExtraKeysView != null && mActivity.mExtraKeysView.readSpecialButton(ExtraKeysView.SpecialButton.ALT));\n     }\n \n     @Override\n\ndiff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -200,7 +200,7 @@ public void onLongPress(MotionEvent e) {\n             }\n         });\n         mScroller = new Scroller(context);\n-        AccessibilityManager am = (AccessibilityManager) context.getSystemService(context.ACCESSIBILITY_SERVICE);\n+        AccessibilityManager am = (AccessibilityManager) context.getSystemService(Context.ACCESSIBILITY_SERVICE);\n         mAccessibilityEnabled = am.isEnabled();\n     }\n ",
    "output": "Migrate to AndroidX"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/filepicker/TermuxDocumentsProvider.java b/app/src/main/java/com/termux/filepicker/TermuxDocumentsProvider.java\n--- a/app/src/main/java/com/termux/filepicker/TermuxDocumentsProvider.java\n+++ b/app/src/main/java/com/termux/filepicker/TermuxDocumentsProvider.java\n@@ -75,7 +75,7 @@ public Cursor queryRoots(String[] projection) throws FileNotFoundException {\n         row.add(Root.COLUMN_TITLE, applicationName);\n         row.add(Root.COLUMN_MIME_TYPES, ALL_MIME_TYPES);\n         row.add(Root.COLUMN_AVAILABLE_BYTES, BASE_DIR.getFreeSpace());\n-        row.add(Root.COLUMN_ICON, R.mipmap.ic_launcher);\n+        row.add(Root.COLUMN_ICON, R.drawable.ic_launcher);\n         return result;\n     }\n \n@@ -236,7 +236,7 @@ private void includeFile(MatrixCursor result, String docId, File file)\n         row.add(Document.COLUMN_MIME_TYPE, mimeType);\n         row.add(Document.COLUMN_LAST_MODIFIED, file.lastModified());\n         row.add(Document.COLUMN_FLAGS, flags);\n-        row.add(Document.COLUMN_ICON, R.mipmap.ic_launcher);\n+        row.add(Document.COLUMN_ICON, R.drawable.ic_launcher);\n     }\n \n }",
    "output": "Move to vector icon also on pre-26"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxInstaller.java b/app/src/main/java/com/termux/app/TermuxInstaller.java\n--- a/app/src/main/java/com/termux/app/TermuxInstaller.java\n+++ b/app/src/main/java/com/termux/app/TermuxInstaller.java\n@@ -96,14 +96,17 @@ public void run() {\n                                     String oldPath = parts[0];\n                                     String newPath = STAGING_PREFIX_PATH + \"/\" + parts[1];\n                                     symlinks.add(Pair.create(oldPath, newPath));\n+\n+                                    ensureDirectoryExists(new File(newPath).getParentFile());\n                                 }\n                             } else {\n                                 String zipEntryName = zipEntry.getName();\n                                 File targetFile = new File(STAGING_PREFIX_PATH, zipEntryName);\n-                                if (zipEntry.isDirectory()) {\n-                                    if (!targetFile.mkdirs())\n-                                        throw new RuntimeException(\"Failed to create directory: \" + targetFile.getAbsolutePath());\n-                                } else {\n+                                boolean isDirectory = zipEntry.isDirectory();\n+\n+                                ensureDirectoryExists(isDirectory ? targetFile : targetFile.getParentFile());\n+\n+                                if (!isDirectory) {\n                                     try (FileOutputStream outStream = new FileOutputStream(targetFile)) {\n                                         int readBytes;\n                                         while ((readBytes = zipInput.read(buffer)) != -1)\n@@ -158,8 +161,14 @@ public void run() {\n         }.start();\n     }\n \n+    private static void ensureDirectoryExists(File directory) {\n+        if (!directory.isDirectory() && !directory.mkdirs()) {\n+            throw new RuntimeException(\"Unable to create directory: \" + directory.getAbsolutePath());\n+        }\n+    }\n+\n     /** Get bootstrap zip url for this systems cpu architecture. */\n-    static URL determineZipUrl() throws MalformedURLException {\n+    private static URL determineZipUrl() throws MalformedURLException {\n         String archName = determineTermuxArchName();\n         return new URL(\"https://termux.net/bootstrap/bootstrap-\" + archName + \".zip\");\n     }\n@@ -201,7 +210,7 @@ static void deleteFolder(File fileOrDirectory) throws IOException {\n         }\n     }\n \n-    public static void setupStorageSymlinks(final Context context) {\n+    static void setupStorageSymlinks(final Context context) {\n         final String LOG_TAG = \"termux-storage\";\n         new Thread() {\n             public void run() {",
    "output": "Let the installer create directories when necessary\n\nBy creating directories when necessary before trying to install files we\ndepend on less details in how the bootstrap zip is constructed."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/BackgroundJob.java b/app/src/main/java/com/termux/app/BackgroundJob.java\n--- a/app/src/main/java/com/termux/app/BackgroundJob.java\n+++ b/app/src/main/java/com/termux/app/BackgroundJob.java\n@@ -186,7 +186,7 @@ static String[] setupProcessArgs(String fileToExecute, String[] args) {\n         if (interpreter != null) result.add(interpreter);\n         result.add(fileToExecute);\n         if (args != null) Collections.addAll(result, args);\n-        return result.toArray(new String[result.size()]);\n+        return result.toArray(new String[0]);\n     }\n \n }\n\ndiff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -666,7 +666,7 @@ void showUrlSelection() {\n             return;\n         }\n \n-        final CharSequence[] urls = urlSet.toArray(new CharSequence[urlSet.size()]);\n+        final CharSequence[] urls = urlSet.toArray(new CharSequence[0]);\n         Collections.reverse(Arrays.asList(urls)); // Latest first.\n \n         // Click to copy url to clipboard:",
    "output": "Fix Android Studio lint warnings"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxPreferences.java b/app/src/main/java/com/termux/app/TermuxPreferences.java\n--- a/app/src/main/java/com/termux/app/TermuxPreferences.java\n+++ b/app/src/main/java/com/termux/app/TermuxPreferences.java\n@@ -7,18 +7,19 @@\n import android.util.Log;\n import android.util.TypedValue;\n import android.widget.Toast;\n-\n import com.termux.terminal.TerminalSession;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n \n import java.io.File;\n import java.io.FileInputStream;\n+import java.io.IOException;\n import java.io.InputStreamReader;\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Properties;\n-import org.json.JSONArray;\n \n final class TermuxPreferences {\n \n@@ -116,52 +117,59 @@ static TerminalSession getCurrentSession(TermuxActivity context) {\n     public String[][] mExtraKeys;\n \n     public void reloadFromProperties(Context context) {\n-        try {\n-            File propsFile = new File(TermuxService.HOME_PATH + \"/.termux/termux.properties\");\n-            if (!propsFile.exists())\n-                propsFile = new File(TermuxService.HOME_PATH + \"/.config/termux/termux.properties\");\n+        File propsFile = new File(TermuxService.HOME_PATH + \"/.termux/termux.properties\");\n+        if (!propsFile.exists())\n+            propsFile = new File(TermuxService.HOME_PATH + \"/.config/termux/termux.properties\");\n \n-            Properties props = new Properties();\n+        Properties props = new Properties();\n+        try {\n             if (propsFile.isFile() && propsFile.canRead()) {\n                 String encoding = \"utf-8\"; // most useful default nowadays\n                 try (FileInputStream in = new FileInputStream(propsFile)) {\n                     props.load(new InputStreamReader(in, encoding));\n                 }\n             }\n+        } catch (IOException e) {\n+            Toast.makeText(context, \"Could not open the propertiey file termux.properties.\", Toast.LENGTH_LONG).show();\n+            Log.e(\"termux\", \"Error loading props\", e);\n+        }\n \n-            switch (props.getProperty(\"bell-character\", \"vibrate\")) {\n-                case \"beep\":\n-                    mBellBehaviour = BELL_BEEP;\n-                    break;\n-                case \"ignore\":\n-                    mBellBehaviour = BELL_IGNORE;\n-                    break;\n-                default: // \"vibrate\".\n-                    mBellBehaviour = BELL_VIBRATE;\n-                    break;\n-            }\n-            \n+        switch (props.getProperty(\"bell-character\", \"vibrate\")) {\n+            case \"beep\":\n+                mBellBehaviour = BELL_BEEP;\n+                break;\n+            case \"ignore\":\n+                mBellBehaviour = BELL_IGNORE;\n+                break;\n+            default: // \"vibrate\".\n+                mBellBehaviour = BELL_VIBRATE;\n+                break;\n+        }\n+\n+        try {\n             JSONArray arr = new JSONArray(props.getProperty(\"extra-keys\", \"[['ESC', 'TAB', 'CTRL', 'ALT', '-', 'DOWN', 'UP']]\"));\n+\n             mExtraKeys = new String[arr.length()][];\n-            for(int i = 0; i < arr.length(); i++) {\n+            for (int i = 0; i < arr.length(); i++) {\n                 JSONArray line = arr.getJSONArray(i);\n                 mExtraKeys[i] = new String[line.length()];\n-                for(int j = 0; j < line.length(); j++) {\n+                for (int j = 0; j < line.length(); j++) {\n                     mExtraKeys[i][j] = line.getString(j);\n                 }\n             }\n-\n-            mBackIsEscape = \"escape\".equals(props.getProperty(\"back-key\", \"back\"));\n-\n-            shortcuts.clear();\n-            parseAction(\"shortcut.create-session\", SHORTCUT_ACTION_CREATE_SESSION, props);\n-            parseAction(\"shortcut.next-session\", SHORTCUT_ACTION_NEXT_SESSION, props);\n-            parseAction(\"shortcut.previous-session\", SHORTCUT_ACTION_PREVIOUS_SESSION, props);\n-            parseAction(\"shortcut.rename-session\", SHORTCUT_ACTION_RENAME_SESSION, props);\n-        } catch (Exception e) {\n-            Toast.makeText(context, \"Error loading properties: \" + e.getMessage(), Toast.LENGTH_LONG).show();\n+        } catch (JSONException e) {\n+            Toast.makeText(context, \"Could not load the extra-keys property from the config: \" + e.toString(), Toast.LENGTH_LONG).show();\n             Log.e(\"termux\", \"Error loading props\", e);\n+            mExtraKeys = new String[0][];\n         }\n+\n+        mBackIsEscape = \"escape\".equals(props.getProperty(\"back-key\", \"back\"));\n+\n+        shortcuts.clear();\n+        parseAction(\"shortcut.create-session\", SHORTCUT_ACTION_CREATE_SESSION, props);\n+        parseAction(\"shortcut.next-session\", SHORTCUT_ACTION_NEXT_SESSION, props);\n+        parseAction(\"shortcut.previous-session\", SHORTCUT_ACTION_PREVIOUS_SESSION, props);\n+        parseAction(\"shortcut.rename-session\", SHORTCUT_ACTION_RENAME_SESSION, props);\n     }\n \n     public static final int SHORTCUT_ACTION_CREATE_SESSION = 1;",
    "output": "Improve config parsing"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -35,7 +35,7 @@ public final class ExtraKeysView extends GridLayout {\n     private static final int BUTTON_COLOR = 0x00000000;\n     private static final int INTERESTING_COLOR = 0xFF80DEEA;\n     private static final int BUTTON_PRESSED_COLOR = 0x7FFFFFFF;\n-    \n+\n     public ExtraKeysView(Context context, AttributeSet attrs) {\n         super(context, attrs);\n     }\n@@ -118,11 +118,6 @@ public boolean readAltButton() {\n         return readSpecialButton(SpecialButton.ALT);\n     }\n     \n-    /** @deprecated call readSpecialButton(SpecialButton.FN); */\n-    public boolean readFnButton() {\n-        return readSpecialButton(SpecialButton.FN);\n-    }\n-    \n     public boolean readSpecialButton(SpecialButton name) {\n         SpecialButtonState state = specialButtons.get(name);\n         if (state == null)",
    "output": "Remove unused function"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -69,7 +69,6 @@\n \n import java.io.File;\n import java.io.FileInputStream;\n-import java.io.IOException;\n import java.io.InputStream;\n import java.util.Arrays;\n import java.util.Collections;",
    "output": "Remove unused import"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -69,6 +69,7 @@\n \n import java.io.File;\n import java.io.FileInputStream;\n+import java.io.IOException;\n import java.io.InputStream;\n import java.util.Arrays;\n import java.util.Collections;\n@@ -612,6 +613,18 @@ void addNewSession(boolean failSafe, String sessionName) {\n             new AlertDialog.Builder(this).setTitle(R.string.max_terminals_reached_title).setMessage(R.string.max_terminals_reached_message)\n                 .setPositiveButton(android.R.string.ok, null).show();\n         } else {\n+            if (mTermService.getSessions().size() == 0 && !mTermService.isWakelockEnabled()) {\n+                File termuxTmpDir = new File(TermuxService.PREFIX_PATH + \"/tmp\");\n+                if (termuxTmpDir.exists()) {\n+                    try {\n+                        TermuxInstaller.deleteFolder(termuxTmpDir);\n+                    } catch (Exception e) {\n+                        e.printStackTrace();\n+                    }\n+\n+                    termuxTmpDir.mkdirs();\n+                }\n+            }\n             String executablePath = (failSafe ? \"/system/bin/sh\" : null);\n             TerminalSession newSession = mTermService.createTermSession(executablePath, null, null, failSafe);\n             if (sessionName != null) {\n\ndiff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -250,6 +250,14 @@ public List<TerminalSession> getSessions() {\n         return mTerminalSessions;\n     }\n \n+    public boolean isWakelockEnabled() {\n+        if (mWakeLock == null) {\n+            return false;\n+        } else {\n+            return mWakeLock.isHeld();\n+        }\n+    }\n+\n     TerminalSession createTermSession(String executablePath, String[] arguments, String cwd, boolean failSafe) {\n         new File(HOME_PATH).mkdirs();\n ",
    "output": "clean /tmp directory on cold start"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxPreferences.java b/app/src/main/java/com/termux/app/TermuxPreferences.java\n--- a/app/src/main/java/com/termux/app/TermuxPreferences.java\n+++ b/app/src/main/java/com/termux/app/TermuxPreferences.java\n@@ -141,7 +141,7 @@ public void reloadFromProperties(Context context) {\n                     break;\n             }\n             \n-            JSONArray arr = new JSONArray(props.getProperty(\"extra-keys\", \"[['ESC','CTRL','ALT','TAB','-','/','|']]\"));\n+            JSONArray arr = new JSONArray(props.getProperty(\"extra-keys\", \"[['ESC', 'TAB', 'CTRL', 'ALT', '-', 'DOWN', 'UP']]\"));\n             mExtraKeys = new String[arr.length()][];\n             for(int i = 0; i < arr.length(); i++) {\n                 JSONArray line = arr.getJSONArray(i);",
    "output": "Default extra-keys has TAB after ESC and UP/DOWN arrow keys"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -257,7 +257,7 @@ void popup(View view, String text) {\n         put(\"LT\", \"LEFT\"); \n         put(\"RT\", \"RIGHT\");\n         put(\"DN\", \"DOWN\");\n-        // put(\"UP\", \"UP\"); well, the direction is already two letters\n+        // put(\"UP\", \"UP\"); well, \"UP\" is already two letters\n         \n         put(\"PAGEUP\", \"PGUP\");\n         put(\"PAGE_UP\", \"PGUP\");\n@@ -274,6 +274,11 @@ void popup(View view, String text) {\n         \n         put(\"DELETE\", \"DEL\");\n         put(\"BACKSPACE\", \"BKSP\");\n+        \n+        // easier for writing in termux.properties\n+        put(\"BACKSLASH\", \"\\\\\");\n+        put(\"QUOTE\", \"\\\"\");\n+        put(\"APOSTROPHE\", \"'\");\n     }};\n     \n     /**",
    "output": "Add aliases for BACKSLASH QUOTE and APOSTROPHE"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxPreferences.java b/app/src/main/java/com/termux/app/TermuxPreferences.java\n--- a/app/src/main/java/com/termux/app/TermuxPreferences.java\n+++ b/app/src/main/java/com/termux/app/TermuxPreferences.java\n@@ -141,7 +141,7 @@ public void reloadFromProperties(Context context) {\n                     break;\n             }\n             \n-            JSONArray arr = new JSONArray(props.getProperty(\"extra-keys\", \"[[\\\"ESC\\\",\\\"CTRL\\\",\\\"ALT\\\",\\\"TAB\\\",\\\"-\\\",\\\"/\\\",\\\"|\\\"]]\"));\n+            JSONArray arr = new JSONArray(props.getProperty(\"extra-keys\", \"[['ESC','CTRL','ALT','TAB','-','/','|']]\"));\n             mExtraKeys = new String[arr.length()][];\n             for(int i = 0; i < arr.length(); i++) {\n                 JSONArray line = arr.getJSONArray(i);",
    "output": "ExtraKeys: use ' instead of \\\" in default key string"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxPreferences.java b/app/src/main/java/com/termux/app/TermuxPreferences.java\n--- a/app/src/main/java/com/termux/app/TermuxPreferences.java\n+++ b/app/src/main/java/com/termux/app/TermuxPreferences.java\n@@ -45,6 +45,13 @@ final class TermuxPreferences {\n \n     boolean mBackIsEscape;\n     boolean mShowExtraKeys;\n+    \n+    /**\n+     * If value is not in the range [min, max], set it to either min or max.\n+     */\n+    static int clamp(int value, int min, int max) {\n+        return Math.min(Math.max(value, min), max);\n+    }\n \n     TermuxPreferences(Context context) {\n         reloadFromProperties(context);\n@@ -68,7 +75,7 @@ final class TermuxPreferences {\n         } catch (NumberFormatException | ClassCastException e) {\n             mFontSize = defaultFontSize;\n         }\n-        mFontSize = Math.max(MIN_FONTSIZE, Math.min(mFontSize, MAX_FONTSIZE));\n+        mFontSize = clamp(mFontSize, MIN_FONTSIZE, MAX_FONTSIZE); \n     }\n \n     boolean isShowExtraKeys() {\n@@ -134,7 +141,7 @@ public void reloadFromProperties(Context context) {\n                     break;\n             }\n             \n-            JSONArray arr = new JSONArray(props.getProperty(\"extrakeys\", \"[[\\\"ESC\\\",\\\"CTRL\\\",\\\"ALT\\\",\\\"TAB\\\",\\\"―\\\",\\\"/\\\",\\\"|\\\"]]\"));\n+            JSONArray arr = new JSONArray(props.getProperty(\"extra-keys\", \"[[\\\"ESC\\\",\\\"CTRL\\\",\\\"ALT\\\",\\\"TAB\\\",\\\"-\\\",\\\"/\\\",\\\"|\\\"]]\"));\n             mExtraKeys = new String[arr.length()][];\n             for(int i = 0; i < arr.length(); i++) {\n                 JSONArray line = arr.getJSONArray(i);",
    "output": "Use extra-keys spelling and correct default setting"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -326,7 +326,7 @@ void reload(String[][] buttons, CharDisplayMap charDisplayMap) {\n         setColumnCount(cols);\n \n         for (int row = 0; row < rows; row++) {\n-            for (int col = 0; col < cols; col++) {\n+            for (int col = 0; col < buttons[row].length; col++) {\n                 final String buttonText = buttons[row][col];\n                 \n                 Button button;",
    "output": "ExtraKeys: Prevent app crash if user specifies different row lengths"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -125,7 +125,7 @@ public boolean readFnButton() {\n     \n     public boolean readSpecialButton(SpecialButton name) {\n         SpecialButtonState state = specialButtons.get(name);\n-        if(state == null)\n+        if (state == null)\n             throw new RuntimeException(\"Must be a valid special button (see source)\");\n         \n         if (! state.isOn)\n@@ -134,12 +134,12 @@ public boolean readSpecialButton(SpecialButton name) {\n         if (state.button.isPressed())\n             return true;\n         \n-        if (state.button.isChecked()) {\n-            state.button.setChecked(false);\n-            state.button.setTextColor(TEXT_COLOR);\n-        }\n-        \n-        return state.button.isChecked();\n+        if (! state.button.isChecked())\n+            return false;\n+\n+        state.button.setChecked(false);\n+        state.button.setTextColor(TEXT_COLOR);\n+        return true;\n     }\n \n     void popup(View view, String text) {",
    "output": "Fix refactoring, Ctrl, Alt, Fn keys work again"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -331,7 +331,7 @@ void reload(String[][] buttons, CharDisplayMap charDisplayMap) {\n                 \n                 Button button;\n                 if(Arrays.asList(\"CTRL\", \"ALT\", \"FN\").contains(buttonText)) {\n-                    state = specialButtons.get(SpecialButton.valueOf(buttonText)); // for valueOf: https://stackoverflow.com/a/604426/1980630\n+                    SpecialButtonState state = specialButtons.get(SpecialButton.valueOf(buttonText)); // for valueOf: https://stackoverflow.com/a/604426/1980630\n                     state.isOn = true;\n                     button = state.button = new ToggleButton(getContext(), null, android.R.attr.buttonBarButtonStyle);\n                     button.setClickable(true);",
    "output": "state -> SpecialButtonState state"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -327,12 +327,7 @@ void reload(String[][] buttons, CharDisplayMap charDisplayMap) {\n \n         for (int row = 0; row < rows; row++) {\n             for (int col = 0; col < cols; col++) {\n-                String buttonText = buttons[row][col];\n-                \n-                if(buttonText == null) {\n-                    // The button will be an empty button outputting a space character, like s space bar\n-                    buttonText = \" \";\n-                }\n+                final String buttonText = buttons[row][col];\n                 \n                 Button button;\n                 if(Arrays.asList(\"CTRL\", \"ALT\", \"FN\").contains(buttonText)) {",
    "output": "Declare buttonText final String, dont't change value inside reload"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -98,7 +98,7 @@ private static class SpecialButtonState {\n         ToggleButton button = null;\n     }\n     \n-    private Map<String, Boolean> specialButtons = new HashMap<String, Boolean>() {{\n+    private Map<SpecialButton, SpecialButtonState> specialButtons = new HashMap<SpecialButton, SpecialButtonState>() {{\n         put(SpecialButton.CTRL, new SpecialButtonState());\n         put(SpecialButton.ALT, new SpecialButtonState());\n         put(SpecialButton.FN, new SpecialButtonState());\n@@ -110,12 +110,12 @@ private static class SpecialButtonState {\n     \n     /** @deprecated, call readSpecialButton(SpecialButton.CTRL); */\n     public boolean readControlButton() {\n-        return readSpecialButton(SpecialButton.FN);\n+        return readSpecialButton(SpecialButton.CTRL);\n     }\n     \n     /** @deprecated, call readSpecialButton(SpecialButton.ALT); */\n     public boolean readAltButton() {\n-        return readSpecialButton(SpecialButton.FN);\n+        return readSpecialButton(SpecialButton.ALT);\n     }\n     \n     /** @deprecated, call readSpecialButton(SpecialButton.FN); */\n@@ -126,7 +126,7 @@ public boolean readFnButton() {\n     public boolean readSpecialButton(SpecialButton name) {\n         SpecialButtonState state = specialButtons.get(name);\n         if(state == null)\n-            throw Exception(\"Must be a valid special button (see source)\");\n+            throw new RuntimeException(\"Must be a valid special button (see source)\");\n         \n         if (! state.isOn)\n             return false;\n@@ -172,14 +172,15 @@ void popup(View view, String text) {\n         put(\"UP\", \"↑\"); // U+2191 ↑ UPWARDS ARROW\n         put(\"DOWN\", \"↓\"); // U+2193 ↓ DOWNWARDS ARROW\n     }};\n-    \n+\n     static final CharDisplayMap wellKnownCharactersDisplay = new CharDisplayMap() {{\n         // well known characters // https://en.wikipedia.org/wiki/{Enter_key, Tab_key, Delete_key}\n         put(\"ENTER\", \"↲\"); // U+21B2 ↲ DOWNWARDS ARROW WITH TIP LEFTWARDS\n         put(\"TAB\", \"↹\"); // U+21B9 ↹ LEFTWARDS ARROW TO BAR OVER RIGHTWARDS ARROW TO BAR\n         put(\"BKSP\", \"⌫\"); // U+232B ⌫ ERASE TO THE LEFT sometimes seen and easy to understand\n         put(\"DEL\", \"⌦\"); // U+2326 ⌦ ERASE TO THE RIGHT not well known but easy to understand\n-        \n+    }};\n+\n     static final CharDisplayMap lessKnownCharactersDisplay = new CharDisplayMap() {{\n         // https://en.wikipedia.org/wiki/{Home_key, End_key, Page_Up_and_Page_Down_keys}\n         // home key can mean \"goto the beginning of line\" or \"goto first page\" depending on context, hence the diagonal",
    "output": "Fix typos and build errors"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -10,6 +10,7 @@\n \n import java.util.Map;\n import java.util.HashMap;\n+import java.util.Arrays;\n \n import android.view.HapticFeedbackConstants;\n import android.view.KeyEvent;\n@@ -52,7 +53,7 @@ V get(K key, V defaultValue) {\n         }\n     }\n     \n-    static CharDisplayMap extends CharDisplayMap {}\n+    static class CharDisplayMap extends CleverMap<String, String> {}\n     \n     /**\n      * Keys are displayed in a natural looking way, like \"→\" for \"RIGHT\"\n@@ -125,7 +126,7 @@ public boolean readFnButton() {\n     public boolean readSpecialButton(SpecialButton name) {\n         SpecialButtonState state = specialButtons.get(name);\n         if(state == null)\n-            throws Exception(\"Must be a valid special button (see source)\");\n+            throw Exception(\"Must be a valid special button (see source)\");\n         \n         if (! state.isOn)\n             return false;\n@@ -304,6 +305,7 @@ static int maximumLength(String[][] matrix) {\n      *\n      * Examples:\n      * \"ENTER\" will trigger the ENTER keycode\n+     * \"LEFT\" will trigger the LEFT keycode and be displayed as \"←\"\n      * \"→\" will input a \"→\" character\n      * \"−\" will input a \"−\" character\n      * \"-_-\" will input the string \"-_-\"\n@@ -385,7 +387,7 @@ public void run() {\n                             case MotionEvent.ACTION_MOVE:\n                                 // These two keys have a Move-Up button appearing\n                                 if (Arrays.asList(\"/\", \"-\").contains(buttonText)) {\n-                                    if (popupWindow == null &gfv& event.getY() < 0) {\n+                                    if (popupWindow == null && event.getY() < 0) {\n                                         v.setBackgroundColor(BUTTON_COLOR);\n                                         String text = \"-\".equals(buttonText) ? \"|\" : \"\\\\\";\n                                         popup(v, text);\n@@ -406,7 +408,7 @@ public void run() {\n                                     scheduledExecutor = null;\n                                 }\n                                 if (longPressCount == 0) {\n-                                    if (popupWindow != null && \"/-\".contains(buttonText)) {\n+                                    if (popupWindow != null && Arrays.asList(\"/\", \"-\").contains(buttonText)) {\n                                         popupWindow.setContentView(null);\n                                         popupWindow.dismiss();\n                                         popupWindow = null;\n\ndiff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -241,7 +241,7 @@ public Object instantiateItem(@NonNull ViewGroup collection, int position) {\n                 View layout;\n                 if (position == 0) {\n                     layout = mExtraKeysView = (ExtraKeysView) inflater.inflate(R.layout.extra_keys_main, collection, false);\n-                    mExtraKeysView.reload(mSettings.mExtraKeys);\n+                    mExtraKeysView.reload(mSettings.mExtraKeys, ExtraKeysView.defaultCharDisplay);\n                 } else {\n                     layout = inflater.inflate(R.layout.extra_keys_right, collection, false);\n                     final EditText editText = layout.findViewById(R.id.text_input);\n\ndiff --git a/app/src/main/java/com/termux/app/TermuxPreferences.java b/app/src/main/java/com/termux/app/TermuxPreferences.java\n--- a/app/src/main/java/com/termux/app/TermuxPreferences.java\n+++ b/app/src/main/java/com/termux/app/TermuxPreferences.java\n@@ -12,6 +12,7 @@\n \n import java.io.File;\n import java.io.FileInputStream;\n+import java.io.InputStreamReader;\n import java.lang.annotation.Retention;\n import java.lang.annotation.RetentionPolicy;\n import java.util.ArrayList;\n@@ -115,8 +116,9 @@ public void reloadFromProperties(Context context) {\n \n             Properties props = new Properties();\n             if (propsFile.isFile() && propsFile.canRead()) {\n+                String encoding = \"utf-8\"; // most useful default nowadays\n                 try (FileInputStream in = new FileInputStream(propsFile)) {\n-                    props.load(in);\n+                    props.load(new InputStreamReader(in, encoding));\n                 }\n             }\n ",
    "output": "Use utf-8 for config, Activate defaultCharDisplay, Fix Typo"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -66,7 +66,7 @@ V get(K key, V defaultValue) {\n         put(\"PGDN\", KeyEvent.KEYCODE_PAGE_DOWN);\n         put(\"INS\", KeyEvent.KEYCODE_INSERT);\n         put(\"DEL\", KeyEvent.KEYCODE_FORWARD_DEL);\n-        put(\"BKSP\", KeyEvent.KEYCODE_BACKWARD_DEL);\n+        put(\"BKSP\", KeyEvent.KEYCODE_DEL);\n         put(\"UP\", KeyEvent.KEYCODE_DPAD_UP);\n         put(\"LEFT\", KeyEvent.KEYCODE_DPAD_LEFT);\n         put(\"RIGHT\", KeyEvent.KEYCODE_DPAD_RIGHT);\n@@ -84,7 +84,7 @@ static void sendKey(View view, String keyName) {\n             // not a control char\n             TerminalSession session = terminalView.getCurrentSession();\n             if (session != null)\n-                session.write(KeyName);\n+                session.write(keyName);\n         }\n     }\n     \n@@ -381,6 +381,7 @@ public void run() {\n                                     }, 400, 80, TimeUnit.MILLISECONDS);\n                                 }\n                                 return true;\n+                            \n                             case MotionEvent.ACTION_MOVE:\n                                 // These two keys have a Move-Up button appearing\n                                 if (Arrays.asList(\"/\", \"-\").contains(buttonText)) {\n@@ -396,6 +397,7 @@ public void run() {\n                                     }\n                                 }\n                                 return true;\n+                            \n                             case MotionEvent.ACTION_UP:\n                             case MotionEvent.ACTION_CANCEL:\n                                 v.setBackgroundColor(BUTTON_COLOR);\n@@ -414,6 +416,7 @@ public void run() {\n                                     }\n                                 }\n                                 return true;\n+                            \n                             default:\n                                 return true;\n                         }\n@@ -422,7 +425,7 @@ public void run() {\n \n                 LayoutParams param = new GridLayout.LayoutParams();\n                 param.width = 0;\n-                if(Build.VERSION.SDK_INT == Build.VERSION_CODES.LOLLIPOP) {  //special handle api 21\n+                if(Build.VERSION.SDK_INT == Build.VERSION_CODES.LOLLIPOP) { // special handle api 21\n                     param.height = (int)(37.5 * getResources().getDisplayMetrics().density + 0.5); // 37.5 equal to R.id.viewpager layout_height / rows in DP\n                 } else {\n                     param.height = 0;",
    "output": "Fix Typo (KeyEvent.KEYCODE_DEL and others)"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -87,56 +87,58 @@ static void sendKey(View view, String keyName) {\n                 session.write(KeyName);\n         }\n     }\n-\n-    private ToggleButton controlButton;\n-    private ToggleButton altButton;\n-    private ToggleButton fnButton;\n     \n-    private boolean hasControlButton = false;\n-    private boolean hasAltButton = false;\n-    private boolean hasFnButton = false;\n+    public enum SpecialButton {\n+        CTRL, ALT, FN\n+    }\n+    \n+    private static class SpecialButtonState {\n+        boolean isOn = false;\n+        ToggleButton button = null;\n+    }\n+    \n+    private Map<String, Boolean> specialButtons = new HashMap<String, Boolean>() {{\n+        put(SpecialButton.CTRL, new SpecialButtonState());\n+        put(SpecialButton.ALT, new SpecialButtonState());\n+        put(SpecialButton.FN, new SpecialButtonState());\n+    }};\n     \n     private ScheduledExecutorService scheduledExecutor;\n     private PopupWindow popupWindow;\n     private int longPressCount;\n-\n+    \n+    /** @deprecated, call readSpecialButton(SpecialButton.CTRL); */\n     public boolean readControlButton() {\n-        boolean result = false;\n-        if (hasControlButton) {\n-            if (controlButton.isPressed()) return true;\n-            result = controlButton.isChecked();\n-            if (result) {\n-                controlButton.setChecked(false);\n-                controlButton.setTextColor(TEXT_COLOR);\n-            }\n-        }\n-        return result;\n+        return readSpecialButton(SpecialButton.FN);\n     }\n-\n+    \n+    /** @deprecated, call readSpecialButton(SpecialButton.ALT); */\n     public boolean readAltButton() {\n-        boolean result = false;\n-        if (hasAltButton) {\n-            if (altButton.isPressed()) return true;\n-            result = altButton.isChecked();\n-            if (result) {\n-                altButton.setChecked(false);\n-                altButton.setTextColor(TEXT_COLOR);\n-            }\n-        }\n-        return result;\n+        return readSpecialButton(SpecialButton.FN);\n     }\n-\n+    \n+    /** @deprecated, call readSpecialButton(SpecialButton.FN); */\n     public boolean readFnButton() {\n-        boolean result = false;\n-        if (hasFnButton) {\n-            if (fnButton.isPressed()) return true;\n-            result = fnButton.isChecked();\n-            if (result) {\n-                fnButton.setChecked(false);\n-                fnButton.setTextColor(TEXT_COLOR);\n-            }\n+        return readSpecialButton(SpecialButton.FN);\n+    }\n+    \n+    public boolean readSpecialButton(SpecialButton name) {\n+        SpecialButtonState state = specialButtons.get(name);\n+        if(state == null)\n+            throws Exception(\"Must be a valid special button (see source)\");\n+        \n+        if (! state.isOn)\n+            return false;\n+        \n+        if (state.button.isPressed())\n+            return true;\n+        \n+        if (state.button.isChecked()) {\n+            state.button.setChecked(false);\n+            state.button.setTextColor(TEXT_COLOR);\n         }\n-        return result;\n+        \n+        return state.button.isChecked();\n     }\n \n     void popup(View view, String text) {\n@@ -307,7 +309,9 @@ static int maximumLength(String[][] matrix) {\n      * \"-_-\" will input the string \"-_-\"\n      */\n     void reload(String[][] buttons, CharDisplayMap charDisplayMap) {\n-        altButton = controlButton = fnButton = null;\n+        for(SpecialButtonState state : specialButtons.values())\n+            state.button = null;\n+            \n         removeAllViews();\n         \n         replaceAliases(buttons); // modifies the array\n@@ -320,33 +324,24 @@ void reload(String[][] buttons, CharDisplayMap charDisplayMap) {\n \n         for (int row = 0; row < rows; row++) {\n             for (int col = 0; col < cols; col++) {\n-                final String buttonText = (buttons[row][col] == null ? \" \" : buttons[row][col]);\n-                // if (buttons[row][col] == null) then the button will be an empty button outputting a space character\n-\n+                String buttonText = buttons[row][col];\n+                \n+                if(buttonText == null) {\n+                    // The button will be an empty button outputting a space character, like s space bar\n+                    buttonText = \" \";\n+                }\n+                \n                 Button button;\n-                switch (buttonText) {\n-                    case \"CTRL\":\n-                        hasControlButton = true;\n-                        button = controlButton = new ToggleButton(getContext(), null, android.R.attr.buttonBarButtonStyle);\n-                        button.setClickable(true);\n-                        break;\n-                    case \"ALT\":\n-                        hasAltButton = true;\n-                        button = altButton = new ToggleButton(getContext(), null, android.R.attr.buttonBarButtonStyle);\n-                        button.setClickable(true);\n-                        break;\n-                    case \"FN\":\n-                        hasFnButton = true;\n-                        button = fnButton = new ToggleButton(getContext(), null, android.R.attr.buttonBarButtonStyle);\n-                        button.setClickable(true);\n-                        break;\n-                    default:\n-                        button = new Button(getContext(), null, android.R.attr.buttonBarButtonStyle);\n-                        break;\n+                if(Arrays.asList(\"CTRL\", \"ALT\", \"FN\").contains(buttonText)) {\n+                    state = specialButtons.get(SpecialButton.valueOf(buttonText)); // for valueOf: https://stackoverflow.com/a/604426/1980630\n+                    state.isOn = true;\n+                    button = state.button = new ToggleButton(getContext(), null, android.R.attr.buttonBarButtonStyle);\n+                    button.setClickable(true);\n+                } else {\n+                    button = new Button(getContext(), null, android.R.attr.buttonBarButtonStyle);\n                 }\n                 \n                 final String displayedText = charDisplayMap.get(buttonText, buttonText);\n-                \n                 button.setText(displayedText);\n                 button.setTextColor(TEXT_COLOR);\n                 button.setPadding(0, 0, 0, 0);\n@@ -357,17 +352,12 @@ void reload(String[][] buttons, CharDisplayMap charDisplayMap) {\n                     public void onClick(View v) {\n                         finalButton.performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP);\n                         View root = getRootView();\n-                        switch (buttonText) {\n-                            case \"CTRL\":\n-                            case \"ALT\":\n-                            case \"FN\":\n-                                ToggleButton self = (ToggleButton) finalButton;\n-                                self.setChecked(self.isChecked());\n-                                self.setTextColor(self.isChecked() ? INTERESTING_COLOR : TEXT_COLOR);\n-                                break;\n-                            default:\n-                                sendKey(root, buttonText);\n-                                break;\n+                        if(Arrays.asList(\"CTRL\", \"ALT\", \"FN\").contains(buttonText)) {\n+                            ToggleButton self = (ToggleButton) finalButton;\n+                            self.setChecked(self.isChecked());\n+                            self.setTextColor(self.isChecked() ? INTERESTING_COLOR : TEXT_COLOR);\n+                        } else {\n+                            sendKey(root, buttonText);\n                         }\n                     }\n                 });\n@@ -427,15 +417,14 @@ public void run() {\n                             default:\n                                 return true;\n                         }\n-\n                     }\n                 });\n \n                 LayoutParams param = new GridLayout.LayoutParams();\n                 param.width = 0;\n-                if(Build.VERSION.SDK_INT == Build.VERSION_CODES.LOLLIPOP){  //special handle api 21\n+                if(Build.VERSION.SDK_INT == Build.VERSION_CODES.LOLLIPOP) {  //special handle api 21\n                     param.height = (int)(37.5 * getResources().getDisplayMetrics().density + 0.5); // 37.5 equal to R.id.viewpager layout_height / rows in DP\n-                }else{\n+                } else {\n                     param.height = 0;\n                 }\n                 param.setMargins(0, 0, 0, 0);",
    "output": "Refactor Ctrl, Alt, Fn code"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -296,7 +296,7 @@ public void run() {\n                 LayoutParams param = new GridLayout.LayoutParams();\n                 param.width = 0;\n                 if(Build.VERSION.SDK_INT == Build.VERSION_CODES.LOLLIPOP){  //special handle api 21\n-                    param.height = (int)(37.5 * getResources().getDisplayMetrics().density + 0.5); // 37.5 equal to R.id.viewpager layout_heihgt / rows in DP\n+                    param.height = (int)(37.5 * getResources().getDisplayMetrics().density + 0.5); // 37.5 equal to R.id.viewpager layout_height / rows in DP\n                 }else{\n                     param.height = 0;\n                 }",
    "output": "Extrakeys: fix typo"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -255,7 +255,7 @@ public void run() {\n                                 }\n                                 return true;\n                             case MotionEvent.ACTION_MOVE:\n-                                if (\"―/\".contains(buttonText)) {\n+                                if (\"―/-\".contains(buttonText)) {\n                                     if (popupWindow == null && event.getY() < 0) {\n                                         v.setBackgroundColor(BUTTON_COLOR);\n                                         String text = \"―\".equals(buttonText) ? \"|\" : \"\\\\\";\n@@ -276,7 +276,7 @@ public void run() {\n                                     scheduledExecutor = null;\n                                 }\n                                 if (longPressCount == 0) {\n-                                    if (popupWindow != null && \"―/\".contains(buttonText)) {\n+                                    if (popupWindow != null && \"―/-\".contains(buttonText)) {\n                                         popupWindow.setContentView(null);\n                                         popupWindow.dismiss();\n                                         popupWindow = null;",
    "output": "Extrakeys: make ― the same as - in some more places"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -174,15 +174,15 @@ void reload(final String[][] buttons) {\n         altButton = controlButton = fnButton = null;\n         removeAllViews();\n \n+        final int rows = buttons.length;\n         int mx = 0;\n         for (int row = 0; row < rows; row++) {\n             if(buttons[row].length > mx) mx = buttons[row].length;\n         }\n-        final int rows = buttons.length;\n         final int cols = mx;\n \n         setRowCount(rows);\n-        setColumnCount(cols[0]);\n+        setColumnCount(cols);\n \n         for (int row = 0; row < rows; row++) {\n             for (int col = 0; col < cols; col++) {",
    "output": "Extrakeys: fix rebase error"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -101,36 +101,48 @@ static void sendKey(View view, String keyName) {\n     private ToggleButton controlButton;\n     private ToggleButton altButton;\n     private ToggleButton fnButton;\n+    private boolean hasControlButton = false;\n+    private boolean hasAltButton = false;\n+    private boolean hasFnButton = false;\n     private ScheduledExecutorService scheduledExecutor;\n     private PopupWindow popupWindow;\n     private int longPressCount;\n \n     public boolean readControlButton() {\n-        if (controlButton.isPressed()) return true;\n-        boolean result = controlButton.isChecked();\n-        if (result) {\n-            controlButton.setChecked(false);\n-            controlButton.setTextColor(TEXT_COLOR);\n+        boolean result = false;\n+        if (hasControlButton) {\n+            if (controlButton.isPressed()) return true;\n+            result = controlButton.isChecked();\n+            if (result) {\n+                controlButton.setChecked(false);\n+                controlButton.setTextColor(TEXT_COLOR);\n+            }\n         }\n         return result;\n     }\n \n     public boolean readAltButton() {\n-        if (altButton.isPressed()) return true;\n-        boolean result = altButton.isChecked();\n-        if (result) {\n-            altButton.setChecked(false);\n-            altButton.setTextColor(TEXT_COLOR);\n+        boolean result = false;\n+        if (hasAltButton) {\n+            if (altButton.isPressed()) return true;\n+            result = altButton.isChecked();\n+            if (result) {\n+                altButton.setChecked(false);\n+                altButton.setTextColor(TEXT_COLOR);\n+            }\n         }\n         return result;\n     }\n \n     public boolean readFnButton() {\n-        if (fnButton.isPressed()) return true;\n-        boolean result = fnButton.isChecked();\n-        if (result) {\n-            fnButton.setChecked(false);\n-            fnButton.setTextColor(TEXT_COLOR);\n+        boolean result = false;\n+        if (hasFnButton) {\n+            if (fnButton.isPressed()) return true;\n+            result = fnButton.isChecked();\n+            if (result) {\n+                fnButton.setChecked(false);\n+                fnButton.setTextColor(TEXT_COLOR);\n+            }\n         }\n         return result;\n     }\n@@ -159,7 +171,7 @@ void popup(View view, String text) {\n     }\n \n     void reload(final String[][] buttons) {\n-        altButton = controlButton = null;\n+        altButton = controlButton = fnButton = null;\n         removeAllViews();\n \n         int mx = 0;\n@@ -179,14 +191,17 @@ void reload(final String[][] buttons) {\n                 Button button;\n                 switch (buttonText) {\n                     case \"CTRL\":\n+                        hasControlButton = true;\n                         button = controlButton = new ToggleButton(getContext(), null, android.R.attr.buttonBarButtonStyle);\n                         button.setClickable(true);\n                         break;\n                     case \"ALT\":\n+                        hasAltButton = true;\n                         button = altButton = new ToggleButton(getContext(), null, android.R.attr.buttonBarButtonStyle);\n                         button.setClickable(true);\n                         break;\n                     case \"FN\":\n+                        hasFnButton = true;\n                         button = fnButton = new ToggleButton(getContext(), null, android.R.attr.buttonBarButtonStyle);\n                         button.setClickable(true);\n                         break;",
    "output": "ExtraKeys: fix so app doesn't crash if ctrl/alt aren't in extrakeys\n\nOtherwise we get:\nAndroidRuntime: java.lang.NullPointerException: Attempt to invoke virtual method 'boolean android.widget.CompoundButton.isChecked()' on a null object reference\nAndroidRuntime:        at com.termux.app.ExtraKeysView.b(SourceFile:128)"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxPreferences.java b/app/src/main/java/com/termux/app/TermuxPreferences.java\n--- a/app/src/main/java/com/termux/app/TermuxPreferences.java\n+++ b/app/src/main/java/com/termux/app/TermuxPreferences.java\n@@ -55,7 +55,7 @@ final class TermuxPreferences {\n         // to prevent invisible text due to zoom be mistake:\n         MIN_FONTSIZE = (int) (4f * dipInPixels);\n \n-        mShowExtraKeys = prefs.getBoolean(SHOW_EXTRA_KEYS_KEY, false);\n+        mShowExtraKeys = prefs.getBoolean(SHOW_EXTRA_KEYS_KEY, true);\n \n         // http://www.google.com/design/spec/style/typography.html#typography-line-height\n         int defaultFontSize = Math.round(12 * dipInPixels);",
    "output": "Extrakeys: show extra key row per default\n\nMight help new users."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -57,6 +57,12 @@ static void sendKey(View view, String keyName) {\n             case \"PGDN\":\n                 keyCode = KeyEvent.KEYCODE_PAGE_DOWN;\n                 break;\n+            case \"INS\":\n+                keyCode = KeyEvent.KEYCODE_INSERT;\n+                break;\n+            case \"DEL\":\n+                keyCode = KeyEvent.KEYCODE_FORWARD_DEL;\n+                break;\n             case \"↑\":\n                 keyCode = KeyEvent.KEYCODE_DPAD_UP;\n                 break;\n@@ -69,9 +75,15 @@ static void sendKey(View view, String keyName) {\n             case \"↓\":\n                 keyCode = KeyEvent.KEYCODE_DPAD_DOWN;\n                 break;\n+            case \"↲\":\n+                keyCode = KeyEvent.KEYCODE_ENTER;\n+                break;\n             case \"―\":\n                 chars = \"-\";\n                 break;\n+            case \"-\":\n+                chars = \"-\";\n+                break;\n             default:\n                 chars = keyName;\n         }",
    "output": "ExtraKeys: add possibility for insert, delete, enter and -"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -33,8 +33,6 @@ public final class ExtraKeysView extends GridLayout {\n \n     public ExtraKeysView(Context context, AttributeSet attrs) {\n         super(context, attrs);\n-\n-        reload();\n     }\n \n     static void sendKey(View view, String keyName) {\n@@ -148,24 +146,24 @@ void popup(View view, String text) {\n         popupWindow.showAsDropDown(view, 0, -2 * height);\n     }\n \n-    void reload() {\n+    void reload(final String[][] buttons) {\n         altButton = controlButton = null;\n         removeAllViews();\n \n-        String[][] buttons = {\n-            {\"ESC\", \"/\", \"―\", \"HOME\", \"↑\", \"END\", \"PGUP\"},\n-            {\"TAB\", \"CTRL\", \"ALT\", \"←\", \"↓\", \"→\", \"PGDN\"}\n-        };\n-\n+        int mx = 0;\n+        for (int row = 0; row < rows; row++) {\n+            if(buttons[row].length > mx) mx = buttons[row].length;\n+        }\n         final int rows = buttons.length;\n-        final int[] cols = {buttons[0].length, buttons[1].length};\n+        final int cols = mx;\n \n         setRowCount(rows);\n         setColumnCount(cols[0]);\n \n         for (int row = 0; row < rows; row++) {\n-            for (int col = 0; col < cols[row]; col++) {\n-                final String buttonText = buttons[row][col];\n+            for (int col = 0; col < cols; col++) {\n+                final String buttonText = (buttons[row][col] == null ? \" \" : buttons[row][col]);\n+\n                 Button button;\n                 switch (buttonText) {\n                     case \"CTRL\":\n\ndiff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -217,6 +217,11 @@ public void onCreate(Bundle bundle) {\n \n         final ViewPager viewPager = findViewById(R.id.viewpager);\n         if (mSettings.isShowExtraKeys()) viewPager.setVisibility(View.VISIBLE);\n+        \n+        \n+        ViewGroup.LayoutParams layoutParams = viewPager.getLayoutParams();\n+        layoutParams.height = layoutParams.height * mSettings.mExtraKeys.length;\n+        viewPager.setLayoutParams(layoutParams);\n \n         viewPager.setAdapter(new PagerAdapter() {\n             @Override\n@@ -236,6 +241,7 @@ public Object instantiateItem(@NonNull ViewGroup collection, int position) {\n                 View layout;\n                 if (position == 0) {\n                     layout = mExtraKeysView = (ExtraKeysView) inflater.inflate(R.layout.extra_keys_main, collection, false);\n+                    mExtraKeysView.reload(mSettings.mExtraKeys);\n                 } else {\n                     layout = inflater.inflate(R.layout.extra_keys_right, collection, false);\n                     final EditText editText = layout.findViewById(R.id.text_input);\n\ndiff --git a/app/src/main/java/com/termux/app/TermuxPreferences.java b/app/src/main/java/com/termux/app/TermuxPreferences.java\n--- a/app/src/main/java/com/termux/app/TermuxPreferences.java\n+++ b/app/src/main/java/com/termux/app/TermuxPreferences.java\n@@ -17,6 +17,7 @@\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Properties;\n+import org.json.JSONArray;\n \n final class TermuxPreferences {\n \n@@ -103,6 +104,8 @@ static TerminalSession getCurrentSession(TermuxActivity context) {\n         }\n         return null;\n     }\n+    \n+    public String[][] mExtraKeys;\n \n     public void reloadFromProperties(Context context) {\n         try {\n@@ -128,6 +131,16 @@ public void reloadFromProperties(Context context) {\n                     mBellBehaviour = BELL_VIBRATE;\n                     break;\n             }\n+            \n+            JSONArray arr = new JSONArray(props.getProperty(\"extrakeys\", \"[[\\\"ESC\\\",\\\"CTRL\\\",\\\"ALT\\\",\\\"TAB\\\",\\\"―\\\",\\\"/\\\",\\\"|\\\"]]\"));\n+            mExtraKeys = new String[arr.length()][];\n+            for(int i = 0; i < arr.length(); i++) {\n+                JSONArray line = arr.getJSONArray(i);\n+                mExtraKeys[i] = new String[line.length()];\n+                for(int j = 0; j < line.length(); j++) {\n+                    mExtraKeys[i][j] = line.getString(j);\n+                }\n+            }\n \n             mBackIsEscape = \"escape\".equals(props.getProperty(\"back-key\", \"back\"));\n ",
    "output": "add support of configurable extra keys"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -388,6 +388,11 @@ public void onSessionFinished(final TerminalSession finishedSession) {\n                     if (indexOfSession >= 0)\n                         showToast(toToastTitle(finishedSession) + \" - exited\", true);\n                 }\n+\n+                if (mTermService.getSessions().size() > 1) {\n+                    removeFinishedSession(finishedSession);\n+                }\n+\n                 mListViewAdapter.notifyDataSetChanged();\n             }\n ",
    "output": "close sessions without waiting for user input except the last one\n\nAn attempt to deal with these issues:\n\n * https://github.com/termux/termux-app/issues/627\n * https://github.com/termux/termux-app/issues/56"
  },
  {
    "input": "diff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -600,7 +600,7 @@ public boolean onKeyDown(int keyCode, KeyEvent event) {\n         if (controlDownFromEvent) keyMod |= KeyHandler.KEYMOD_CTRL;\n         if (event.isAltPressed()) keyMod |= KeyHandler.KEYMOD_ALT;\n         if (event.isShiftPressed()) keyMod |= KeyHandler.KEYMOD_SHIFT;\n-        if (handleKeyCode(keyCode, keyMod)) {\n+        if (!event.isFunctionPressed() && handleKeyCode(keyCode, keyMod)) {\n             if (LOG_KEY_EVENTS) Log.i(EmulatorDebug.LOG_TAG, \"handleKeyCode() took key event\");\n             return true;\n         }\n@@ -619,7 +619,7 @@ public boolean onKeyDown(int keyCode, KeyEvent event) {\n         if (LOG_KEY_EVENTS)\n             Log.i(EmulatorDebug.LOG_TAG, \"KeyEvent#getUnicodeChar(\" + effectiveMetaState + \") returned: \" + result);\n         if (result == 0) {\n-            return true;\n+            return false;\n         }\n \n         int oldCombiningAccent = mCombiningAccent;",
    "output": "- in onKeyDown() ignore keys when the Fn key is pressed\n\n- in onKeyDown() return false when the key is not handled.\n\nThe above two changes fix the handling of Fn-key combo's on devices with\na physical keyboard, allowing the android system defined fallbacks from\n`/system/usr/keychars/Generic.kcm` to be properly handled.\n\nFixes #731.\n\nOriginal diagnosis and fix by Konehaltia."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxInstaller.java b/app/src/main/java/com/termux/app/TermuxInstaller.java\n--- a/app/src/main/java/com/termux/app/TermuxInstaller.java\n+++ b/app/src/main/java/com/termux/app/TermuxInstaller.java\n@@ -209,18 +209,18 @@ private static String determineTermuxArchName() {\n             Arrays.toString(Build.SUPPORTED_ABIS));\n     }\n \n-    /** Delete a folder and all its content or throw. */\n+    /** Delete a folder and all its content or throw. Don't follow symlinks. */\n     static void deleteFolder(File fileOrDirectory) throws IOException {\n-        File[] children = fileOrDirectory.listFiles();\n-        if (children != null) {\n-            for (File child : children) {\n-                if (child.getCanonicalFile().equals(child.getAbsoluteFile())) {\n+        if (fileOrDirectory.getCanonicalPath().equals(fileOrDirectory.getAbsolutePath()) && fileOrDirectory.isDirectory()) {\n+            File[] children = fileOrDirectory.listFiles();\n+\n+            if (children != null) {\n+                for (File child : children) {\n                     deleteFolder(child);\n-                } else {\n-                    child.delete();\n                 }\n             }\n         }\n+\n         if (!fileOrDirectory.delete()) {\n             throw new RuntimeException(\"Unable to delete \" + (fileOrDirectory.isDirectory() ? \"directory \" : \"file \") + fileOrDirectory.getAbsolutePath());\n         }",
    "output": "deleteFolder(): check if passed argument is a symlink\n\nPrevents possible data loss when user replaced directory '~/storage' with\na symlink."
  },
  {
    "input": "diff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -15,6 +15,7 @@\n import android.text.TextUtils;\n import android.util.AttributeSet;\n import android.util.Log;\n+import android.view.accessibility.AccessibilityManager;\n import android.view.ActionMode;\n import android.view.HapticFeedbackConstants;\n import android.view.InputDevice;\n@@ -75,6 +76,8 @@ public final class TerminalView extends View {\n     /** If non-zero, this is the last unicode code point received if that was a combining character. */\n     int mCombiningAccent;\n \n+    private boolean mAccessibilityEnabled;\n+\n     public TerminalView(Context context, AttributeSet attributes) { // NO_UCD (unused code)\n         super(context, attributes);\n         mGestureRecognizer = new GestureAndScaleRecognizer(context, new GestureAndScaleRecognizer.Listener() {\n@@ -197,6 +200,8 @@ public void onLongPress(MotionEvent e) {\n             }\n         });\n         mScroller = new Scroller(context);\n+        AccessibilityManager am = (AccessibilityManager) context.getSystemService(context.ACCESSIBILITY_SERVICE);\n+        mAccessibilityEnabled = am.isEnabled();\n     }\n \n     /**\n@@ -384,7 +389,7 @@ public void onScreenUpdated() {\n         mEmulator.clearScrollCounter();\n \n         invalidate();\n-        setContentDescription(getText());\n+        if (mAccessibilityEnabled) setContentDescription(getText());\n     }\n \n     /**",
    "output": "TerminalView: only use accessibility features when accessibility is\nenabled when starting the view"
  },
  {
    "input": "diff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -384,6 +384,7 @@ public void onScreenUpdated() {\n         mEmulator.clearScrollCounter();\n \n         invalidate();\n+        setContentDescription(getText());\n     }\n \n     /**\n@@ -761,7 +762,6 @@ protected void onDraw(Canvas canvas) {\n         if (mEmulator == null) {\n             canvas.drawColor(0XFF000000);\n         } else {\n-            setContentDescription(getText());\n             mRenderer.render(mEmulator, canvas, mTopRow, mSelY1, mSelY2, mSelX1, mSelX2);\n \n             if (mIsSelectingText) {",
    "output": "Call setContentDescription in onScreenUpdated rather than in onDraw.\nThat will be much less expensive."
  },
  {
    "input": "diff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -761,6 +761,7 @@ protected void onDraw(Canvas canvas) {\n         if (mEmulator == null) {\n             canvas.drawColor(0XFF000000);\n         } else {\n+            setContentDescription(getText());\n             mRenderer.render(mEmulator, canvas, mTopRow, mSelY1, mSelY2, mSelX1, mSelX2);\n \n             if (mIsSelectingText) {\n@@ -915,4 +916,8 @@ public TerminalSession getCurrentSession() {\n         return mTermSession;\n     }\n \n+    private CharSequence getText() {\n+        return mEmulator.getScreen().getSelectedText(0, mTopRow, mEmulator.mColumns, mTopRow +mEmulator.mRows);\n+    }\n+\n }",
    "output": "terminalview: add contentDescription to the view so accessibility\nservices can get the text currently being shown."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -1,13 +1,13 @@\n package com.termux.app;\n \n import android.content.Context;\n+import android.os.Build;\n import android.util.AttributeSet;\n \n import java.util.concurrent.Executors;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.ScheduledExecutorService;\n \n-import android.view.Gravity;\n import android.view.HapticFeedbackConstants;\n import android.view.KeyEvent;\n import android.view.MotionEvent;\n@@ -28,8 +28,8 @@\n public final class ExtraKeysView extends GridLayout {\n \n     private static final int TEXT_COLOR = 0xFFFFFFFF;\n-    private static final int BUTTON_COLOR = 0xFF000000;\n-    private static final int BUTTON_PRESSED_COLOR = 0xFF888888;\n+    private static final int BUTTON_COLOR = 0x00000000;\n+    private static final int BUTTON_PRESSED_COLOR = 0x7FFFFFFF;\n \n     public ExtraKeysView(Context context, AttributeSet attrs) {\n         super(context, attrs);\n@@ -269,9 +269,13 @@ public void run() {\n                 });\n \n                 LayoutParams param = new GridLayout.LayoutParams();\n-                param.width = param.height = 0;\n+                param.width = 0;\n+                if(Build.VERSION.SDK_INT == Build.VERSION_CODES.LOLLIPOP){  //special handle api 21\n+                    param.height = (int)(37.5 * getResources().getDisplayMetrics().density + 0.5); // 37.5 equal to R.id.viewpager layout_heihgt / rows in DP\n+                }else{\n+                    param.height = 0;\n+                }\n                 param.setMargins(0, 0, 0, 0);\n-                param.setGravity(Gravity.LEFT);\n                 param.columnSpec = GridLayout.spec(col, GridLayout.FILL, 1.f);\n                 param.rowSpec = GridLayout.spec(row, GridLayout.FILL, 1.f);\n                 button.setLayoutParams(param);",
    "output": "fix button background and row height bug in api 21"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxInstaller.java b/app/src/main/java/com/termux/app/TermuxInstaller.java\n--- a/app/src/main/java/com/termux/app/TermuxInstaller.java\n+++ b/app/src/main/java/com/termux/app/TermuxInstaller.java\n@@ -21,6 +21,7 @@\n import java.io.BufferedReader;\n import java.io.File;\n import java.io.FileOutputStream;\n+import java.io.IOException;\n import java.io.InputStreamReader;\n import java.net.MalformedURLException;\n import java.net.URL;\n@@ -209,11 +210,15 @@ private static String determineTermuxArchName() {\n     }\n \n     /** Delete a folder and all its content or throw. */\n-    static void deleteFolder(File fileOrDirectory) {\n+    static void deleteFolder(File fileOrDirectory) throws IOException {\n         File[] children = fileOrDirectory.listFiles();\n         if (children != null) {\n             for (File child : children) {\n-                deleteFolder(child);\n+                if (child.getCanonicalFile().equals(child.getAbsoluteFile())) {\n+                    deleteFolder(child);\n+                } else {\n+                    child.delete();\n+                }\n             }\n         }\n         if (!fileOrDirectory.delete()) {\n@@ -231,7 +236,7 @@ public void run() {\n                     if (storageDir.exists()) {\n                         try {\n                             deleteFolder(storageDir);\n-                        } catch (Exception e) {\n+                        } catch (IOException e) {\n                             Log.e(LOG_TAG, \"Could not delete old $HOME/storage, \" + e.getMessage());\n                             return;\n                         }",
    "output": "deleteFolder(): don't treat symlinks as directory"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/BackgroundJob.java b/app/src/main/java/com/termux/app/BackgroundJob.java\n--- a/app/src/main/java/com/termux/app/BackgroundJob.java\n+++ b/app/src/main/java/com/termux/app/BackgroundJob.java\n@@ -111,14 +111,13 @@ public static String[] buildEnvironment(boolean failSafe, String cwd) {\n             final String pathEnv = \"PATH=\" + System.getenv(\"PATH\");\n             return new String[]{termEnv, homeEnv, prefixEnv, androidRootEnv, androidDataEnv, pathEnv, externalStorageEnv};\n         } else {\n-            final String ps1Env = \"PS1=$ \";\n             final String ldEnv = \"LD_LIBRARY_PATH=\" + TermuxService.PREFIX_PATH + \"/lib\";\n             final String langEnv = \"LANG=en_US.UTF-8\";\n             final String pathEnv = \"PATH=\" + TermuxService.PREFIX_PATH + \"/bin:\" + TermuxService.PREFIX_PATH + \"/bin/applets\";\n             final String pwdEnv = \"PWD=\" + cwd;\n             final String tmpdirEnv = \"TMPDIR=\" + TermuxService.PREFIX_PATH + \"/tmp\";\n \n-            return new String[]{termEnv, homeEnv, prefixEnv, ps1Env, ldEnv, langEnv, pathEnv, pwdEnv, androidRootEnv, androidDataEnv, externalStorageEnv, tmpdirEnv};\n+            return new String[]{termEnv, homeEnv, prefixEnv, ldEnv, langEnv, pathEnv, pwdEnv, androidRootEnv, androidDataEnv, externalStorageEnv, tmpdirEnv};\n         }\n     }\n ",
    "output": "Stop exporting PS1\n\nPS1 is not supposed to be an env var and should be shell-specific.\nWe will set it appropriately with the init files of the shells."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxInstaller.java b/app/src/main/java/com/termux/app/TermuxInstaller.java\n--- a/app/src/main/java/com/termux/app/TermuxInstaller.java\n+++ b/app/src/main/java/com/termux/app/TermuxInstaller.java\n@@ -229,12 +229,12 @@ public void run() {\n                     File storageDir = new File(TermuxService.HOME_PATH, \"storage\");\n \n                     if (storageDir.exists()) {\n-\t\t\t            try {\n-\t\t\t        \t    deleteFolder(storageDir);\n-\t\t\t            } catch (Exception e) {\n-\t\t        \t\t    Log.e(LOG_TAG, \"Could not delete old $HOME/storage, \" + e.getMessage());\n-\t\t\t        \t    return;\n-\t        \t\t    }\n+                        try {\n+                            deleteFolder(storageDir);\n+                        } catch (Exception e) {\n+                            Log.e(LOG_TAG, \"Could not delete old $HOME/storage, \" + e.getMessage());\n+                            return;\n+                        }\n                     }\n \n                     if (!storageDir.mkdirs()) {",
    "output": "fix indent with vim on termux\n\nweb interface would have worked, if I had deleted the tabs, first\nThis vim is adding tabs instead of matching the previous line's\nindentation. Looking into fixing that now..."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxInstaller.java b/app/src/main/java/com/termux/app/TermuxInstaller.java\n--- a/app/src/main/java/com/termux/app/TermuxInstaller.java\n+++ b/app/src/main/java/com/termux/app/TermuxInstaller.java\n@@ -229,12 +229,12 @@ public void run() {\n                     File storageDir = new File(TermuxService.HOME_PATH, \"storage\");\n \n                     if (storageDir.exists()) {\n-\t\t\t    try {\n-\t\t\t\t    deleteFolder(storageDir);\n-\t\t\t    } catch (Exception e) {\n-\t\t\t\t    Log.e(LOG_TAG, \"Could not delete old $HOME/storage, \" + e.getMessage());\n-\t\t\t\t    return;\n-\t\t\t    }\n+\t\t\t            try {\n+\t\t\t        \t    deleteFolder(storageDir);\n+\t\t\t            } catch (Exception e) {\n+\t\t        \t\t    Log.e(LOG_TAG, \"Could not delete old $HOME/storage, \" + e.getMessage());\n+\t\t\t        \t    return;\n+\t        \t\t    }\n                     }\n \n                     if (!storageDir.mkdirs()) {",
    "output": "fmt indentation"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxInstaller.java b/app/src/main/java/com/termux/app/TermuxInstaller.java\n--- a/app/src/main/java/com/termux/app/TermuxInstaller.java\n+++ b/app/src/main/java/com/termux/app/TermuxInstaller.java\n@@ -232,7 +232,7 @@ public void run() {\n \t\t\t    try {\n \t\t\t\t    deleteFolder(storageDir);\n \t\t\t    } catch (Exception e) {\n-\t\t\t\t    Log.e(LOG_TAG, \"Could not delete old $HOME/storage, \" + e.getMessage);\n+\t\t\t\t    Log.e(LOG_TAG, \"Could not delete old $HOME/storage, \" + e.getMessage());\n \t\t\t\t    return;\n \t\t\t    }\n                     }",
    "output": "I think this is it"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxInstaller.java b/app/src/main/java/com/termux/app/TermuxInstaller.java\n--- a/app/src/main/java/com/termux/app/TermuxInstaller.java\n+++ b/app/src/main/java/com/termux/app/TermuxInstaller.java\n@@ -231,7 +231,7 @@ public void run() {\n                     if (storageDir.exists()) {\n \t\t\t    try {\n \t\t\t\t    deleteFolder(storageDir);\n-\t\t\t    } catch (e) {\n+\t\t\t    } catch (Exception e) {\n \t\t\t\t    Log.e(LOG_TAG, \"Could not delete old $HOME/storage, \" + e.getMessage);\n \t\t\t\t    return;\n \t\t\t    }",
    "output": "oops, should have local Java"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxInstaller.java b/app/src/main/java/com/termux/app/TermuxInstaller.java\n--- a/app/src/main/java/com/termux/app/TermuxInstaller.java\n+++ b/app/src/main/java/com/termux/app/TermuxInstaller.java\n@@ -228,9 +228,13 @@ public void run() {\n                 try {\n                     File storageDir = new File(TermuxService.HOME_PATH, \"storage\");\n \n-                    if (storageDir.exists() && !storageDir.delete()) {\n-                        Log.e(LOG_TAG, \"Could not delete old $HOME/storage\");\n-                        return;\n+                    if (storageDir.exists()) {\n+\t\t\t    try {\n+\t\t\t\t    deleteFolder(storageDir);\n+\t\t\t    } catch (e) {\n+\t\t\t\t    Log.e(LOG_TAG, \"Could not delete old $HOME/storage, \" + e.getMessage);\n+\t\t\t\t    return;\n+\t\t\t    }\n                     }\n \n                     if (!storageDir.mkdirs()) {",
    "output": "Fix for #572 using recursive delete\n\nAlso see #578"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -226,7 +226,7 @@ public void run() {\n                                             longPressCount++;\n                                             sendKey(root, buttonText);\n                                         }\n-                                    }, 400, 100, TimeUnit.MILLISECONDS);\n+                                    }, 400, 80, TimeUnit.MILLISECONDS);\n                                 }\n                                 return true;\n                             case MotionEvent.ACTION_MOVE:",
    "output": "minify long press interval"
  },
  {
    "input": "diff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -586,8 +586,8 @@ public boolean onKeyDown(int keyCode, KeyEvent event) {\n         }\n \n         final int metaState = event.getMetaState();\n-        final boolean controlDownFromEvent = event.isCtrlPressed() || mClient.readControlKey();\n-        final boolean leftAltDownFromEvent = (metaState & KeyEvent.META_ALT_LEFT_ON) != 0 || mClient.readAltKey();\n+        final boolean controlDownFromEvent = event.isCtrlPressed();\n+        final boolean leftAltDownFromEvent = (metaState & KeyEvent.META_ALT_LEFT_ON) != 0;\n         final boolean rightAltDownFromEvent = (metaState & KeyEvent.META_ALT_RIGHT_ON) != 0;\n \n         int keyMod = 0;",
    "output": "restore terminalview"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -71,6 +71,9 @@ static void sendKey(View view, String keyName) {\n             case \"↓\":\n                 keyCode = KeyEvent.KEYCODE_DPAD_DOWN;\n                 break;\n+            case \"―\":\n+                chars = \"-\";\n+                break;\n             default:\n                 chars = keyName;\n         }\n@@ -150,7 +153,7 @@ void reload() {\n         removeAllViews();\n \n         String[][] buttons = {\n-            {\"ESC\", \"/\", \"-\", \"HOME\", \"↑\", \"END\", \"PGUP\"},\n+            {\"ESC\", \"/\", \"―\", \"HOME\", \"↑\", \"END\", \"PGUP\"},\n             {\"TAB\", \"CTRL\", \"ALT\", \"←\", \"↓\", \"→\", \"PGDN\"}\n         };\n \n@@ -227,10 +230,10 @@ public void run() {\n                                 }\n                                 return true;\n                             case MotionEvent.ACTION_MOVE:\n-                                if (\"-/\".contains(buttonText)) {\n+                                if (\"―/\".contains(buttonText)) {\n                                     if (popupWindow == null && event.getY() < 0) {\n                                         v.setBackgroundColor(BUTTON_COLOR);\n-                                        String text = \"-\".equals(buttonText) ? \"|\" : \"\\\\\";\n+                                        String text = \"―\".equals(buttonText) ? \"|\" : \"\\\\\";\n                                         popup(v, text);\n                                     }\n                                     if (popupWindow != null && event.getY() > 0) {\n@@ -248,11 +251,11 @@ public void run() {\n                                     scheduledExecutor = null;\n                                 }\n                                 if (longPressCount == 0) {\n-                                    if (popupWindow != null && \"-/\".contains(buttonText)) {\n+                                    if (popupWindow != null && \"―/\".contains(buttonText)) {\n                                         popupWindow.setContentView(null);\n                                         popupWindow.dismiss();\n                                         popupWindow = null;\n-                                        sendKey(root, \"-\".equals(buttonText) ? \"|\" : \"\\\\\");\n+                                        sendKey(root, \"―\".equals(buttonText) ? \"|\" : \"\\\\\");\n                                     } else {\n                                         v.performClick();\n                                     }",
    "output": "feat for - ―"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -1,7 +1,6 @@\n package com.termux.app;\n \n import android.content.Context;\n-import android.graphics.drawable.ColorDrawable;\n import android.util.AttributeSet;\n \n import java.util.concurrent.Executors;\n@@ -128,20 +127,19 @@ void popup(View view, String text) {\n         int height = view.getMeasuredHeight();\n         Button button = new Button(getContext(), null, android.R.attr.buttonBarButtonStyle);\n         button.setText(text);\n+        button.setTextColor(TEXT_COLOR);\n+        button.setPadding(0, 0, 0, 0);\n         button.setMinHeight(0);\n         button.setMinWidth(0);\n         button.setMinimumWidth(0);\n         button.setMinimumHeight(0);\n-        button.setPadding(0, 0, 0, 0);\n-        button.setTextColor(TEXT_COLOR);\n         button.setWidth(width);\n         button.setHeight(height);\n         button.setBackgroundColor(BUTTON_PRESSED_COLOR);\n         popupWindow = new PopupWindow(this);\n         popupWindow.setWidth(LayoutParams.WRAP_CONTENT);\n         popupWindow.setHeight(LayoutParams.WRAP_CONTENT);\n         popupWindow.setContentView(button);\n-        popupWindow.setBackgroundDrawable(new ColorDrawable(0x00000000));\n         popupWindow.setOutsideTouchable(true);\n         popupWindow.setFocusable(false);\n         popupWindow.showAsDropDown(view, 0, -2 * height);\n@@ -250,7 +248,7 @@ public void run() {\n                                     scheduledExecutor = null;\n                                 }\n                                 if (longPressCount == 0) {\n-                                    if (popupWindow != null) {\n+                                    if (popupWindow != null && \"-/\".contains(buttonText)) {\n                                         popupWindow.setContentView(null);\n                                         popupWindow.dismiss();\n                                         popupWindow = null;",
    "output": "fix popup bug"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -244,7 +244,6 @@ public void run() {\n                                 return true;\n                             case MotionEvent.ACTION_UP:\n                             case MotionEvent.ACTION_CANCEL:\n-                                performClick();\n                                 v.setBackgroundColor(BUTTON_COLOR);\n                                 if (scheduledExecutor != null) {\n                                     scheduledExecutor.shutdownNow();",
    "output": "delete unnecss code"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -1,6 +1,7 @@\n package com.termux.app;\n \n import android.content.Context;\n+import android.graphics.drawable.ColorDrawable;\n import android.util.AttributeSet;\n \n import java.util.concurrent.Executors;\n@@ -14,6 +15,7 @@\n import android.view.View;\n import android.widget.Button;\n import android.widget.GridLayout;\n+import android.widget.PopupWindow;\n import android.widget.ToggleButton;\n \n import com.termux.R;\n@@ -88,6 +90,7 @@ static void sendKey(View view, String keyName) {\n     private ToggleButton altButton;\n     private ToggleButton fnButton;\n     private ScheduledExecutorService scheduledExecutor;\n+    private PopupWindow popupWindow;\n     private int longPressCount;\n \n     public boolean readControlButton() {\n@@ -120,6 +123,30 @@ public boolean readFnButton() {\n         return result;\n     }\n \n+    void popup(View view, String text) {\n+        int width = view.getMeasuredWidth();\n+        int height = view.getMeasuredHeight();\n+        Button button = new Button(getContext(), null, android.R.attr.buttonBarButtonStyle);\n+        button.setText(text);\n+        button.setMinHeight(0);\n+        button.setMinWidth(0);\n+        button.setMinimumWidth(0);\n+        button.setMinimumHeight(0);\n+        button.setPadding(0, 0, 0, 0);\n+        button.setTextColor(TEXT_COLOR);\n+        button.setWidth(width);\n+        button.setHeight(height);\n+        button.setBackgroundColor(BUTTON_PRESSED_COLOR);\n+        popupWindow = new PopupWindow(this);\n+        popupWindow.setWidth(LayoutParams.WRAP_CONTENT);\n+        popupWindow.setHeight(LayoutParams.WRAP_CONTENT);\n+        popupWindow.setContentView(button);\n+        popupWindow.setBackgroundDrawable(new ColorDrawable(0x00000000));\n+        popupWindow.setOutsideTouchable(true);\n+        popupWindow.setFocusable(false);\n+        popupWindow.showAsDropDown(view, 0, -2 * height);\n+    }\n+\n     void reload() {\n         altButton = controlButton = null;\n         removeAllViews();\n@@ -190,7 +217,7 @@ public boolean onTouch(View v, MotionEvent event) {\n                             case MotionEvent.ACTION_DOWN:\n                                 longPressCount = 0;\n                                 v.setBackgroundColor(BUTTON_PRESSED_COLOR);\n-                                if (!\"CTRLALT\".contains(buttonText)) {\n+                                if (\"↑↓←→\".contains(buttonText)) {\n                                     scheduledExecutor = Executors.newSingleThreadScheduledExecutor();\n                                     scheduledExecutor.scheduleWithFixedDelay(new Runnable() {\n                                         @Override\n@@ -201,15 +228,37 @@ public void run() {\n                                     }, 400, 100, TimeUnit.MILLISECONDS);\n                                 }\n                                 return true;\n+                            case MotionEvent.ACTION_MOVE:\n+                                if (\"-/\".contains(buttonText)) {\n+                                    if (popupWindow == null && event.getY() < 0) {\n+                                        v.setBackgroundColor(BUTTON_COLOR);\n+                                        String text = \"-\".equals(buttonText) ? \"|\" : \"\\\\\";\n+                                        popup(v, text);\n+                                    }\n+                                    if (popupWindow != null && event.getY() > 0) {\n+                                        v.setBackgroundColor(BUTTON_PRESSED_COLOR);\n+                                        popupWindow.dismiss();\n+                                        popupWindow = null;\n+                                    }\n+                                }\n+                                return true;\n                             case MotionEvent.ACTION_UP:\n                             case MotionEvent.ACTION_CANCEL:\n+                                performClick();\n                                 v.setBackgroundColor(BUTTON_COLOR);\n                                 if (scheduledExecutor != null) {\n                                     scheduledExecutor.shutdownNow();\n                                     scheduledExecutor = null;\n                                 }\n                                 if (longPressCount == 0) {\n-                                    v.performClick();\n+                                    if (popupWindow != null) {\n+                                        popupWindow.setContentView(null);\n+                                        popupWindow.dismiss();\n+                                        popupWindow = null;\n+                                        sendKey(root, \"-\".equals(buttonText) ? \"|\" : \"\\\\\");\n+                                    } else {\n+                                        v.performClick();\n+                                    }\n                                 }\n                                 return true;\n                             default:",
    "output": "add symbol popup"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -203,7 +203,6 @@ public void run() {\n                                 return true;\n                             case MotionEvent.ACTION_UP:\n                             case MotionEvent.ACTION_CANCEL:\n-                                performClick();\n                                 v.setBackgroundColor(BUTTON_COLOR);\n                                 if (scheduledExecutor != null) {\n                                     scheduledExecutor.shutdownNow();",
    "output": "comment unnecss code"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -1,7 +1,6 @@\n package com.termux.app;\n \n import android.content.Context;\n-import android.graphics.Color;\n import android.util.AttributeSet;\n \n import java.util.concurrent.Executors;\n@@ -28,6 +27,8 @@\n public final class ExtraKeysView extends GridLayout {\n \n     private static final int TEXT_COLOR = 0xFFFFFFFF;\n+    private static final int BUTTON_COLOR = 0xFF000000;\n+    private static final int BUTTON_PRESSED_COLOR = 0xFF888888;\n \n     public ExtraKeysView(Context context, AttributeSet attrs) {\n         super(context, attrs);\n@@ -188,7 +189,7 @@ public boolean onTouch(View v, MotionEvent event) {\n                         switch (event.getAction()) {\n                             case MotionEvent.ACTION_DOWN:\n                                 longPressCount = 0;\n-                                v.setBackgroundColor(Color.GRAY);\n+                                v.setBackgroundColor(BUTTON_PRESSED_COLOR);\n                                 if (!\"CTRLALT\".contains(buttonText)) {\n                                     scheduledExecutor = Executors.newSingleThreadScheduledExecutor();\n                                     scheduledExecutor.scheduleWithFixedDelay(new Runnable() {\n@@ -203,7 +204,7 @@ public void run() {\n                             case MotionEvent.ACTION_UP:\n                             case MotionEvent.ACTION_CANCEL:\n                                 performClick();\n-                                v.setBackgroundColor(Color.BLACK);\n+                                v.setBackgroundColor(BUTTON_COLOR);\n                                 if (scheduledExecutor != null) {\n                                     scheduledExecutor.shutdownNow();\n                                     scheduledExecutor = null;",
    "output": "feat button color"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -1,10 +1,17 @@\n package com.termux.app;\n \n import android.content.Context;\n+import android.graphics.Color;\n import android.util.AttributeSet;\n+\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n import android.view.Gravity;\n import android.view.HapticFeedbackConstants;\n import android.view.KeyEvent;\n+import android.view.MotionEvent;\n import android.view.View;\n import android.widget.Button;\n import android.widget.GridLayout;\n@@ -38,30 +45,39 @@ static void sendKey(View view, String keyName) {\n             case \"TAB\":\n                 keyCode = KeyEvent.KEYCODE_TAB;\n                 break;\n-            case \"▲\":\n+            case \"HOME\":\n+                keyCode = KeyEvent.KEYCODE_MOVE_HOME;\n+                break;\n+            case \"END\":\n+                keyCode = KeyEvent.KEYCODE_MOVE_END;\n+                break;\n+            case \"PGUP\":\n+                keyCode = KeyEvent.KEYCODE_PAGE_UP;\n+                break;\n+            case \"PGDN\":\n+                keyCode = KeyEvent.KEYCODE_PAGE_DOWN;\n+                break;\n+            case \"↑\":\n                 keyCode = KeyEvent.KEYCODE_DPAD_UP;\n                 break;\n-            case \"◀\":\n+            case \"←\":\n                 keyCode = KeyEvent.KEYCODE_DPAD_LEFT;\n                 break;\n-            case \"▶\":\n+            case \"→\":\n                 keyCode = KeyEvent.KEYCODE_DPAD_RIGHT;\n                 break;\n-            case \"▼\":\n+            case \"↓\":\n                 keyCode = KeyEvent.KEYCODE_DPAD_DOWN;\n                 break;\n-            case \"―\":\n-                chars = \"-\";\n-                break;\n             default:\n                 chars = keyName;\n         }\n \n+        TerminalView terminalView = view.findViewById(R.id.terminal_view);\n         if (keyCode > 0) {\n-            view.dispatchKeyEvent(new KeyEvent(KeyEvent.ACTION_DOWN, keyCode));\n-            view.dispatchKeyEvent(new KeyEvent(KeyEvent.ACTION_UP, keyCode));\n+            terminalView.onKeyDown(keyCode, new KeyEvent(KeyEvent.ACTION_UP, keyCode));\n+//          view.dispatchKeyEvent(new KeyEvent(KeyEvent.ACTION_UP, keyCode));\n         } else {\n-            TerminalView terminalView = view.findViewById(R.id.terminal_view);\n             TerminalSession session = terminalView.getCurrentSession();\n             if (session != null) session.write(chars);\n         }\n@@ -70,6 +86,8 @@ static void sendKey(View view, String keyName) {\n     private ToggleButton controlButton;\n     private ToggleButton altButton;\n     private ToggleButton fnButton;\n+    private ScheduledExecutorService scheduledExecutor;\n+    private int longPressCount;\n \n     public boolean readControlButton() {\n         if (controlButton.isPressed()) return true;\n@@ -106,19 +124,19 @@ void reload() {\n         removeAllViews();\n \n         String[][] buttons = {\n-            {\"ESC\", \"CTRL\", \"ALT\", \"TAB\", \"―\", \"/\", \"|\"}\n+            {\"ESC\", \"/\", \"-\", \"HOME\", \"↑\", \"END\", \"PGUP\"},\n+            {\"TAB\", \"CTRL\", \"ALT\", \"←\", \"↓\", \"→\", \"PGDN\"}\n         };\n \n         final int rows = buttons.length;\n-        final int cols = buttons[0].length;\n+        final int[] cols = {buttons[0].length, buttons[1].length};\n \n         setRowCount(rows);\n-        setColumnCount(cols);\n+        setColumnCount(cols[0]);\n \n         for (int row = 0; row < rows; row++) {\n-            for (int col = 0; col < cols; col++) {\n+            for (int col = 0; col < cols[row]; col++) {\n                 final String buttonText = buttons[row][col];\n-\n                 Button button;\n                 switch (buttonText) {\n                     case \"CTRL\":\n@@ -140,6 +158,7 @@ void reload() {\n \n                 button.setText(buttonText);\n                 button.setTextColor(TEXT_COLOR);\n+                button.setPadding(0, 0, 0, 0);\n \n                 final Button finalButton = button;\n                 button.setOnClickListener(new OnClickListener() {\n@@ -162,12 +181,49 @@ public void onClick(View v) {\n                     }\n                 });\n \n-                GridLayout.LayoutParams param = new GridLayout.LayoutParams();\n-                param.height = param.width = 0;\n-                param.rightMargin = param.topMargin = 0;\n+                button.setOnTouchListener(new OnTouchListener() {\n+                    @Override\n+                    public boolean onTouch(View v, MotionEvent event) {\n+                        final View root = getRootView();\n+                        switch (event.getAction()) {\n+                            case MotionEvent.ACTION_DOWN:\n+                                longPressCount = 0;\n+                                v.setBackgroundColor(Color.GRAY);\n+                                if (!\"CTRLALT\".contains(buttonText)) {\n+                                    scheduledExecutor = Executors.newSingleThreadScheduledExecutor();\n+                                    scheduledExecutor.scheduleWithFixedDelay(new Runnable() {\n+                                        @Override\n+                                        public void run() {\n+                                            longPressCount++;\n+                                            sendKey(root, buttonText);\n+                                        }\n+                                    }, 400, 100, TimeUnit.MILLISECONDS);\n+                                }\n+                                return true;\n+                            case MotionEvent.ACTION_UP:\n+                            case MotionEvent.ACTION_CANCEL:\n+                                performClick();\n+                                v.setBackgroundColor(Color.BLACK);\n+                                if (scheduledExecutor != null) {\n+                                    scheduledExecutor.shutdownNow();\n+                                    scheduledExecutor = null;\n+                                }\n+                                if (longPressCount == 0) {\n+                                    v.performClick();\n+                                }\n+                                return true;\n+                            default:\n+                                return true;\n+                        }\n+\n+                    }\n+                });\n+\n+                LayoutParams param = new GridLayout.LayoutParams();\n+                param.width = param.height = 0;\n+                param.setMargins(0, 0, 0, 0);\n                 param.setGravity(Gravity.LEFT);\n-                float weight = \"▲▼◀▶\".contains(buttonText) ? 0.7f : 1.f;\n-                param.columnSpec = GridLayout.spec(col, GridLayout.FILL, weight);\n+                param.columnSpec = GridLayout.spec(col, GridLayout.FILL, 1.f);\n                 param.rowSpec = GridLayout.spec(row, GridLayout.FILL, 1.f);\n                 button.setLayoutParams(param);\n \n\ndiff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -586,8 +586,8 @@ public boolean onKeyDown(int keyCode, KeyEvent event) {\n         }\n \n         final int metaState = event.getMetaState();\n-        final boolean controlDownFromEvent = event.isCtrlPressed();\n-        final boolean leftAltDownFromEvent = (metaState & KeyEvent.META_ALT_LEFT_ON) != 0;\n+        final boolean controlDownFromEvent = event.isCtrlPressed() || mClient.readControlKey();\n+        final boolean leftAltDownFromEvent = (metaState & KeyEvent.META_ALT_LEFT_ON) != 0 || mClient.readAltKey();\n         final boolean rightAltDownFromEvent = (metaState & KeyEvent.META_ALT_RIGHT_ON) != 0;\n \n         int keyMod = 0;",
    "output": "add some functional keys"
  },
  {
    "input": "diff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalRow.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalRow.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalRow.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalRow.java\n@@ -21,6 +21,8 @@ public final class TerminalRow {\n     boolean mLineWrap;\n     /** The style bits of each cell in the row. See {@link TextStyle}. */\n     final long[] mStyle;\n+    /** If this row might contain chars with width != 1, used for deactivating fast path */\n+    boolean mHasNonOneWidthOrSurrogateChars;\n \n     /** Construct a blank row (containing only whitespace, ' ') with a specified style. */\n     public TerminalRow(int columns, long style) {\n@@ -32,6 +34,7 @@ public TerminalRow(int columns, long style) {\n \n     /** NOTE: The sourceX2 is exclusive. */\n     public void copyInterval(TerminalRow line, int sourceX1, int sourceX2, int destinationX) {\n+        mHasNonOneWidthOrSurrogateChars |= line.mHasNonOneWidthOrSurrogateChars;\n         final int x1 = line.findStartOfColumn(sourceX1);\n         final int x2 = line.findStartOfColumn(sourceX2);\n         boolean startingFromSecondHalfOfWideChar = (sourceX1 > 0 && line.wideDisplayCharacterStartingAt(sourceX1 - 1));\n@@ -116,13 +119,25 @@ public void clear(long style) {\n         Arrays.fill(mText, ' ');\n         Arrays.fill(mStyle, style);\n         mSpaceUsed = (short) mColumns;\n+        mHasNonOneWidthOrSurrogateChars = false;\n     }\n \n     // https://github.com/steven676/Android-Terminal-Emulator/commit/9a47042620bec87617f0b4f5d50568535668fe26\n     public void setChar(int columnToSet, int codePoint, long style) {\n         mStyle[columnToSet] = style;\n \n         final int newCodePointDisplayWidth = WcWidth.width(codePoint);\n+\n+        // Fast path when we don't have any chars with width != 1\n+        if (!mHasNonOneWidthOrSurrogateChars) {\n+            if (codePoint >= Character.MIN_SUPPLEMENTARY_CODE_POINT || newCodePointDisplayWidth != 1) {\n+                mHasNonOneWidthOrSurrogateChars = true;\n+            } else {\n+                mText[columnToSet] = (char) codePoint;\n+                return;\n+            }\n+        }\n+\n         final boolean newIsCombining = newCodePointDisplayWidth <= 0;\n \n         boolean wasExtraColForWideChar = (columnToSet > 0) && wideDisplayCharacterStartingAt(columnToSet - 1);",
    "output": "Add fast path for TerminalRow.setChar\n\ntermux/termux-app#603"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -17,6 +17,7 @@\n import android.content.IntentFilter;\n import android.content.ServiceConnection;\n import android.content.pm.PackageManager;\n+import android.content.pm.ResolveInfo;\n import android.graphics.Color;\n import android.graphics.Paint;\n import android.graphics.Typeface;\n@@ -104,6 +105,8 @@ public final class TermuxActivity extends Activity implements ServiceConnection\n \n     private static final String RELOAD_STYLE_ACTION = \"com.termux.app.reload_style\";\n \n+    private static final String BROADCAST_TERMUX_OPENED = \"com.termux.app.OPENED\";\n+\n     /** The main view of the activity showing the terminal. Initialized in onCreate(). */\n     @SuppressWarnings(\"NullableProblems\")\n     @NonNull\n@@ -334,6 +337,26 @@ public boolean onLongClick(View v) {\n         checkForFontAndColors();\n \n         mBellSoundId = mBellSoundPool.load(this, R.raw.bell, 1);\n+\n+        sendOpenedBroadcast();\n+    }\n+\n+    /**\n+     * Send a broadcast notifying Termux app has been opened\n+     */\n+    void sendOpenedBroadcast() {\n+        Intent broadcast = new Intent(BROADCAST_TERMUX_OPENED);\n+        List<ResolveInfo> matches = getPackageManager().queryBroadcastReceivers(broadcast, 0);\n+\n+        // send broadcast to registered Termux receivers\n+        // this technique is needed to work around broadcast changes that Oreo introduced\n+        for (ResolveInfo info : matches) {\n+            Intent explicitBroadcast = new Intent(broadcast);\n+            ComponentName cname = new ComponentName(info.activityInfo.applicationInfo.packageName,\n+                                                    info.activityInfo.name);\n+            explicitBroadcast.setComponent(cname);\n+            sendBroadcast(explicitBroadcast);\n+        }\n     }\n \n     void toggleShowExtraKeys() {",
    "output": "Sends broadcast on app open to notify addon termux receivers"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/filepicker/TermuxDocumentsProvider.java b/app/src/main/java/com/termux/filepicker/TermuxDocumentsProvider.java\n--- a/app/src/main/java/com/termux/filepicker/TermuxDocumentsProvider.java\n+++ b/app/src/main/java/com/termux/filepicker/TermuxDocumentsProvider.java\n@@ -195,7 +195,7 @@ private static String getMimeType(File file) {\n             final String name = file.getName();\n             final int lastDot = name.lastIndexOf('.');\n             if (lastDot >= 0) {\n-                final String extension = name.substring(lastDot + 1);\n+                final String extension = name.substring(lastDot + 1).toLowerCase();\n                 final String mime = MimeTypeMap.getSingleton().getMimeTypeFromExtension(extension);\n                 if (mime != null) return mime;\n             }",
    "output": "Use lower when looking up mime type from extension\n\nFixes #721."
  },
  {
    "input": "diff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n@@ -2338,8 +2338,8 @@ private void setTitle(String newTitle) {\n     public void paste(String text) {\n         // First: Always remove escape key and C1 control characters [0x80,0x9F]:\n         text = text.replaceAll(\"(\\u001B|[\\u0080-\\u009F])\", \"\");\n-        // Second: Replace all newlines (\\n) with carriage returns (\\r).\n-        text = text.replace('\\n', '\\r');\n+        // Second: Replace all newlines (\\n) or CRLF (\\r\\n) with carriage returns (\\r).\n+        text = text.replaceAll(\"\\r?\\n\", \"\\r\");\n \n         // Then: Implement bracketed paste mode if enabled:\n         boolean bracketed = isDecsetInternalBitSet(DECSET_BIT_BRACKETED_PASTE_MODE);",
    "output": "Replace CRLF with CR as well.\n\nThis should replace both \\r\\n and \\n with \\r now.\n\n\"\\r?\\n\" matches 0 or 1 \\r and one \\n, which should capture both\nescape sequences."
  },
  {
    "input": "diff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n@@ -2338,6 +2338,9 @@ private void setTitle(String newTitle) {\n     public void paste(String text) {\n         // First: Always remove escape key and C1 control characters [0x80,0x9F]:\n         text = text.replaceAll(\"(\\u001B|[\\u0080-\\u009F])\", \"\");\n+        // Second: Replace all newlines (\\n) with carriage returns (\\r).\n+        text = text.replace('\\n', '\\r');\n+\n         // Then: Implement bracketed paste mode if enabled:\n         boolean bracketed = isDecsetInternalBitSet(DECSET_BIT_BRACKETED_PASTE_MODE);\n         if (bracketed) mSession.write(\"\\033[200~\");",
    "output": "Replace \\n with \\r when pasting (Fixes #678)\n\nTermux will now properly send \\r to the terminal instead of \\n when pasting\nmultiline strings.\n\nThis fixes cat not repeating back lines and nano accidentally justifying\ntext (because \\n maps to ^J), as well as other potential issues.\n\nThis matches the behavior of other terminals, such as iTerm2 which explicitly\ndoes it here:\nhttps://github.com/gnachman/iTerm2/blob/f8a5930/sources/iTermPasteHelper.m#L113\n\nSigned-off-by: easyaspi314 (Devin) <easyaspi314@users.noreply.github.com>"
  },
  {
    "input": "diff --git a/terminal-view/src/main/java/com/termux/view/TerminalRenderer.java b/terminal-view/src/main/java/com/termux/view/TerminalRenderer.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalRenderer.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalRenderer.java\n@@ -16,7 +16,7 @@\n  * <p/>\n  * Saves font metrics, so needs to be recreated each time the typeface or font size changes.\n  */\n-final class TerminalRenderer {\n+public final class TerminalRenderer {\n \n     final int mTextSize;\n     final Typeface mTypeface;",
    "output": "Make TerminalRenderer public\n\nI want to use the renderer with a custom canvas without having to render to an Android View which requires a context and all sorts of stuff.\r\n\r\nCan't currently do that because the renderer is package-private"
  },
  {
    "input": "diff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n@@ -301,14 +301,19 @@ public boolean isAlternateBufferActive() {\n      * @param mouseButton one of the MOUSE_* constants of this class.\n      */\n     public void sendMouseEvent(int mouseButton, int column, int row, boolean pressed) {\n+        if (column < 1) column = 1;\n+        if (column > mColumns) column = mColumns;\n+        if (row < 1) row = 1;\n+        if (row > mRows) row = mRows;\n+\n         if (mouseButton == MOUSE_LEFT_BUTTON_MOVED && !isDecsetInternalBitSet(DECSET_BIT_MOUSE_TRACKING_BUTTON_EVENT)) {\n             // Do not send tracking.\n         } else if (isDecsetInternalBitSet(DECSET_BIT_MOUSE_PROTOCOL_SGR)) {\n             mSession.write(String.format(\"\\033[<%d;%d;%d\" + (pressed ? 'M' : 'm'), mouseButton, column, row));\n         } else {\n             mouseButton = pressed ? mouseButton : 3; // 3 for release of all buttons.\n             // Clip to screen, and clip to the limits of 8-bit data.\n-            boolean out_of_bounds = column < 1 || row < 1 || column > mColumns || row > mRows || column > 255 - 32 || row > 255 - 32;\n+            boolean out_of_bounds = column > 255 - 32 || row > 255 - 32;\n             if (!out_of_bounds) {\n                 byte[] data = {'\\033', '[', 'M', (byte) (32 + mouseButton), (byte) (32 + column), (byte) (32 + row)};\n                 mSession.write(data, 0, data.length);\n\ndiff --git a/terminal-emulator/src/test/java/com/termux/terminal/TerminalTest.java b/terminal-emulator/src/test/java/com/termux/terminal/TerminalTest.java\n--- a/terminal-emulator/src/test/java/com/termux/terminal/TerminalTest.java\n+++ b/terminal-emulator/src/test/java/com/termux/terminal/TerminalTest.java\n@@ -55,6 +55,14 @@ public void testMouseClick() throws Exception {\n \t\tassertEquals(\"\\033[<0;3;4M\", mOutput.getOutputAndClear());\n \t\tmTerminal.sendMouseEvent(TerminalEmulator.MOUSE_LEFT_BUTTON, 3, 4, false);\n \t\tassertEquals(\"\\033[<0;3;4m\", mOutput.getOutputAndClear());\n+\n+\t\t// When the client says that a click is outside (which could happen when pixels are outside\n+\t\t// the terminal area, see https://github.com/termux/termux-app/issues/501) the terminal\n+\t\t// sends a click at the edge.\n+\t\tmTerminal.sendMouseEvent(TerminalEmulator.MOUSE_LEFT_BUTTON, 0, 0, true);\n+\t\tassertEquals(\"\\033[<0;1;1M\", mOutput.getOutputAndClear());\n+\t\tmTerminal.sendMouseEvent(TerminalEmulator.MOUSE_LEFT_BUTTON, 11, 11, false);\n+\t\tassertEquals(\"\\033[<0;10;10m\", mOutput.getOutputAndClear());\n \t}\n \n \tpublic void testNormalization() throws UnsupportedEncodingException {",
    "output": "Do not send mouse clicks out of range (fixes #501)"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/FullScreenHelper.java b/app/src/main/java/com/termux/app/FullScreenHelper.java\n--- a/app/src/main/java/com/termux/app/FullScreenHelper.java\n+++ b/app/src/main/java/com/termux/app/FullScreenHelper.java\n@@ -1,67 +0,0 @@\n-package com.termux.app;\n-\n-import android.graphics.Color;\n-import android.graphics.drawable.ColorDrawable;\n-import android.os.Build;\n-import android.view.View;\n-\n-import com.termux.R;\n-\n-/**\n- * Utility to manage full screen immersive mode.\n- * <p/>\n- * See https://code.google.com/p/android/issues/detail?id=5497\n- */\n-final class FullScreenHelper {\n-\n-    private boolean mEnabled = false;\n-    final TermuxActivity mActivity;\n-\n-    public FullScreenHelper(TermuxActivity activity) {\n-        this.mActivity = activity;\n-    }\n-\n-    public void setImmersive(boolean enabled) {\n-        if (enabled == mEnabled) return;\n-        mEnabled = enabled;\n-\n-        View decorView = mActivity.getWindow().getDecorView();\n-\n-        if (enabled) {\n-            decorView.setOnSystemUiVisibilityChangeListener\n-                (new View.OnSystemUiVisibilityChangeListener() {\n-                    @Override\n-                    public void onSystemUiVisibilityChange(int visibility) {\n-                        if ((visibility & View.SYSTEM_UI_FLAG_FULLSCREEN) == 0) {\n-                            if (mActivity.mSettings.isShowExtraKeys()) {\n-                                mActivity.findViewById(R.id.viewpager).setVisibility(View.VISIBLE);\n-                            }\n-                            setImmersiveMode();\n-                        } else {\n-                            mActivity.findViewById(R.id.viewpager).setVisibility(View.GONE);\n-                        }\n-                    }\n-                });\n-            setImmersiveMode();\n-        } else {\n-            decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_VISIBLE);\n-            decorView.setOnSystemUiVisibilityChangeListener(null);\n-        }\n-    }\n-\n-    private static boolean isColorLight(int color) {\n-        double darkness = 1 - (0.299 * Color.red(color) + 0.587 * Color.green(color) + 0.114 * Color.blue(color)) / 255;\n-        return darkness < 0.5;\n-    }\n-\n-    void setImmersiveMode() {\n-        int flags = View.SYSTEM_UI_FLAG_HIDE_NAVIGATION\n-            | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY\n-            | View.SYSTEM_UI_FLAG_FULLSCREEN;\n-        int color = ((ColorDrawable) mActivity.getWindow().getDecorView().getBackground()).getColor();\n-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && isColorLight(color))\n-            flags |= View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR;\n-        mActivity.getWindow().getDecorView().setSystemUiVisibility(flags);\n-    }\n-\n-}\n\ndiff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -73,6 +73,7 @@\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.LinkedHashSet;\n+import java.util.List;\n import java.util.Properties;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n@@ -95,7 +96,6 @@ public final class TermuxActivity extends Activity implements ServiceConnection\n     private static final int CONTEXTMENU_KILL_PROCESS_ID = 4;\n     private static final int CONTEXTMENU_RESET_TERMINAL_ID = 5;\n     private static final int CONTEXTMENU_STYLING_ID = 6;\n-    private static final int CONTEXTMENU_TOGGLE_FULLSCREEN_ID = 7;\n     private static final int CONTEXTMENU_HELP_ID = 8;\n \n     private static final int MAX_SESSIONS = 8;\n@@ -111,8 +111,6 @@ public final class TermuxActivity extends Activity implements ServiceConnection\n \n     ExtraKeysView mExtraKeysView;\n \n-    final FullScreenHelper mFullScreenHelper = new FullScreenHelper(this);\n-\n     TermuxPreferences mSettings;\n \n     /**\n@@ -215,7 +213,6 @@ public void onCreate(Bundle bundle) {\n         mTerminalView.setOnKeyListener(new TermuxViewClient(this));\n \n         mTerminalView.setTextSize(mSettings.getFontSize());\n-        mFullScreenHelper.setImmersive(mSettings.isFullScreen());\n         mTerminalView.requestFocus();\n \n         final ViewPager viewPager = findViewById(R.id.viewpager);\n@@ -642,7 +639,7 @@ void noteSessionInfo() {\n         TerminalSession session = getCurrentTermSession();\n         final int indexOfSession = mTermService.getSessions().indexOf(session);\n         showToast(toToastTitle(session), false);\n-            mListViewAdapter.notifyDataSetChanged();\n+        mListViewAdapter.notifyDataSetChanged();\n         final ListView lv = findViewById(R.id.left_drawer_list);\n         lv.setItemChecked(indexOfSession, true);\n         lv.smoothScrollToPosition(indexOfSession);\n@@ -657,7 +654,6 @@ public void onCreateContextMenu(ContextMenu menu, View v, ContextMenuInfo menuIn\n         menu.add(Menu.NONE, CONTEXTMENU_SHARE_TRANSCRIPT_ID, Menu.NONE, R.string.select_all_and_share);\n         menu.add(Menu.NONE, CONTEXTMENU_RESET_TERMINAL_ID, Menu.NONE, R.string.reset_terminal);\n         menu.add(Menu.NONE, CONTEXTMENU_KILL_PROCESS_ID, Menu.NONE, getResources().getString(R.string.kill_process, getCurrentTermSession().getPid())).setEnabled(currentSession.isRunning());\n-        menu.add(Menu.NONE, CONTEXTMENU_TOGGLE_FULLSCREEN_ID, Menu.NONE, R.string.toggle_fullscreen).setCheckable(true).setChecked(mSettings.isFullScreen());\n         menu.add(Menu.NONE, CONTEXTMENU_STYLING_ID, Menu.NONE, R.string.style_terminal);\n         menu.add(Menu.NONE, CONTEXTMENU_HELP_ID, Menu.NONE, R.string.help);\n     }\n@@ -791,11 +787,8 @@ public void onClick(DialogInterface dialog, int which) {\n                             }\n                         }).setNegativeButton(android.R.string.cancel, null).show();\n                 }\n-            }\n-            return true;\n-            case CONTEXTMENU_TOGGLE_FULLSCREEN_ID:\n-                toggleImmersive();\n                 return true;\n+            }\n             case CONTEXTMENU_HELP_ID:\n                 startActivity(new Intent(this, TermuxHelpActivity.class));\n                 return true;\n@@ -811,12 +804,6 @@ public void onRequestPermissionsResult(int requestCode, @NonNull String permissi\n         }\n     }\n \n-    void toggleImmersive() {\n-        boolean newValue = !mSettings.isFullScreen();\n-        mSettings.setFullScreen(this, newValue);\n-        mFullScreenHelper.setImmersive(newValue);\n-    }\n-\n     void changeFontSize(boolean increase) {\n         mSettings.changeFontSize(this, increase);\n         mTerminalView.setTextSize(mSettings.getFontSize());\n@@ -835,9 +822,8 @@ void doPaste() {\n     public TerminalSession getStoredCurrentSessionOrLast() {\n         TerminalSession stored = TermuxPreferences.getCurrentSession(this);\n         if (stored != null) return stored;\n-        int numberOfSessions = mTermService.getSessions().size();\n-        if (numberOfSessions == 0) return null;\n-        return mTermService.getSessions().get(numberOfSessions - 1);\n+        List<TerminalSession> sessions = mTermService.getSessions();\n+        return sessions.isEmpty() ? null : sessions.get(sessions.size() - 1);\n     }\n \n     /** Show a toast and dismiss the last one if still visible. */\n\ndiff --git a/app/src/main/java/com/termux/app/TermuxPreferences.java b/app/src/main/java/com/termux/app/TermuxPreferences.java\n--- a/app/src/main/java/com/termux/app/TermuxPreferences.java\n+++ b/app/src/main/java/com/termux/app/TermuxPreferences.java\n@@ -32,12 +32,10 @@ final class TermuxPreferences {\n     private final int MIN_FONTSIZE;\n     private static final int MAX_FONTSIZE = 256;\n \n-    private static final String FULLSCREEN_KEY = \"fullscreen\";\n     private static final String SHOW_EXTRA_KEYS_KEY = \"show_extra_keys\";\n     private static final String FONTSIZE_KEY = \"fontsize\";\n     private static final String CURRENT_SESSION_KEY = \"current_session\";\n \n-    private boolean mFullScreen;\n     private int mFontSize;\n \n     @AsciiBellBehaviour\n@@ -56,7 +54,6 @@ final class TermuxPreferences {\n         // to prevent invisible text due to zoom be mistake:\n         MIN_FONTSIZE = (int) (4f * dipInPixels);\n \n-        mFullScreen = prefs.getBoolean(FULLSCREEN_KEY, false);\n         mShowExtraKeys = prefs.getBoolean(SHOW_EXTRA_KEYS_KEY, false);\n \n         // http://www.google.com/design/spec/style/typography.html#typography-line-height\n@@ -72,15 +69,6 @@ final class TermuxPreferences {\n         mFontSize = Math.max(MIN_FONTSIZE, Math.min(mFontSize, MAX_FONTSIZE));\n     }\n \n-    boolean isFullScreen() {\n-        return mFullScreen;\n-    }\n-\n-    void setFullScreen(Context context, boolean newValue) {\n-        mFullScreen = newValue;\n-        PreferenceManager.getDefaultSharedPreferences(context).edit().putBoolean(FULLSCREEN_KEY, newValue).apply();\n-    }\n-\n     boolean isShowExtraKeys() {\n         return mShowExtraKeys;\n     }\n\ndiff --git a/app/src/main/java/com/termux/app/TermuxViewClient.java b/app/src/main/java/com/termux/app/TermuxViewClient.java\n--- a/app/src/main/java/com/termux/app/TermuxViewClient.java\n+++ b/app/src/main/java/com/termux/app/TermuxViewClient.java\n@@ -73,8 +73,6 @@ public boolean onKeyDown(int keyCode, KeyEvent e, TerminalSession currentSession\n                 mActivity.getDrawer().openDrawer(Gravity.LEFT);\n             } else if (keyCode == KeyEvent.KEYCODE_DPAD_LEFT) {\n                 mActivity.getDrawer().closeDrawers();\n-            } else if (unicodeChar == 'f'/* full screen */) {\n-                mActivity.toggleImmersive();\n             } else if (unicodeChar == 'k'/* keyboard */) {\n                 InputMethodManager imm = (InputMethodManager) mActivity.getSystemService(Context.INPUT_METHOD_SERVICE);\n                 imm.toggleSoftInput(InputMethodManager.SHOW_FORCED, 0);",
    "output": "Remove the fullscreen setting\n\nTrying to use fullscreen doesn't work well in a multi-windowed world\nand makes using translucent navigation and status bars more complicated."
  },
  {
    "input": "diff --git a/terminal-view/src/main/java/com/termux/view/GestureAndScaleRecognizer.java b/terminal-view/src/main/java/com/termux/view/GestureAndScaleRecognizer.java\n--- a/terminal-view/src/main/java/com/termux/view/GestureAndScaleRecognizer.java\n+++ b/terminal-view/src/main/java/com/termux/view/GestureAndScaleRecognizer.java\n@@ -85,6 +85,7 @@ public boolean onScale(ScaleGestureDetector detector) {\n                 return mListener.onScale(detector.getFocusX(), detector.getFocusY(), detector.getScaleFactor());\n             }\n         });\n+        mScaleDetector.setQuickScaleEnabled(false);\n     }\n \n     public void onTouchEvent(MotionEvent event) {",
    "output": "Disable the \"quick scale\" gesture\n\nDisable the default android behaviour where a double tap followed by a\nswipe is interpreted as a zoom gesture. Most people seem not to know\nabout it and hit it by mistake, see #495 for an example."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -244,7 +244,6 @@ public void onDestroy() {\n \n         for (int i = 0; i < mTerminalSessions.size(); i++)\n             mTerminalSessions.get(i).finishIfRunning();\n-        mTerminalSessions.clear();\n     }\n \n     public List<TerminalSession> getSessions() {",
    "output": "Do not clear the sessions on ACTION_STOP_SERVICE\n\nThere is no point doing so and it may cause problems with the list\nadapter."
  },
  {
    "input": "diff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -642,6 +642,8 @@ void inputCodePoint(int codePoint, boolean controlDownFromEvent, boolean leftAlt\n                 + leftAltDownFromEvent + \")\");\n         }\n \n+        if (mTermSession == null) return;\n+\n         final boolean controlDown = controlDownFromEvent || mClient.readControlKey();\n         final boolean altDown = leftAltDownFromEvent || mClient.readAltKey();\n ",
    "output": "Check for null mTermSession in inputCodePoint()"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -61,7 +61,7 @@ static void sendKey(View view, String keyName) {\n             view.dispatchKeyEvent(new KeyEvent(KeyEvent.ACTION_DOWN, keyCode));\n             view.dispatchKeyEvent(new KeyEvent(KeyEvent.ACTION_UP, keyCode));\n         } else {\n-            TerminalView terminalView = (TerminalView) view.findViewById(R.id.terminal_view);\n+            TerminalView terminalView = view.findViewById(R.id.terminal_view);\n             TerminalSession session = terminalView.getCurrentSession();\n             if (session != null) session.write(chars);\n         }",
    "output": "Remove redundant cast"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -211,14 +211,14 @@ public void onCreate(Bundle bundle) {\n         mSettings = new TermuxPreferences(this);\n \n         setContentView(R.layout.drawer_layout);\n-        mTerminalView = (TerminalView) findViewById(R.id.terminal_view);\n+        mTerminalView = findViewById(R.id.terminal_view);\n         mTerminalView.setOnKeyListener(new TermuxViewClient(this));\n \n         mTerminalView.setTextSize(mSettings.getFontSize());\n         mFullScreenHelper.setImmersive(mSettings.isFullScreen());\n         mTerminalView.requestFocus();\n \n-        final ViewPager viewPager = (ViewPager) findViewById(R.id.viewpager);\n+        final ViewPager viewPager = findViewById(R.id.viewpager);\n         if (mSettings.isShowExtraKeys()) viewPager.setVisibility(View.VISIBLE);\n \n         viewPager.setAdapter(new PagerAdapter() {\n@@ -228,19 +228,20 @@ public int getCount() {\n             }\n \n             @Override\n-            public boolean isViewFromObject(View view, Object object) {\n+            public boolean isViewFromObject(@NonNull View view, @NonNull Object object) {\n                 return view == object;\n             }\n \n+            @NonNull\n             @Override\n-            public Object instantiateItem(ViewGroup collection, int position) {\n+            public Object instantiateItem(@NonNull ViewGroup collection, int position) {\n                 LayoutInflater inflater = LayoutInflater.from(TermuxActivity.this);\n                 View layout;\n                 if (position == 0) {\n                     layout = mExtraKeysView = (ExtraKeysView) inflater.inflate(R.layout.extra_keys_main, collection, false);\n                 } else {\n                     layout = inflater.inflate(R.layout.extra_keys_right, collection, false);\n-                    final EditText editText = (EditText) layout.findViewById(R.id.text_input);\n+                    final EditText editText = layout.findViewById(R.id.text_input);\n                     editText.setOnEditorActionListener(new TextView.OnEditorActionListener() {\n                         @Override\n                         public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {\n@@ -264,7 +265,7 @@ public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {\n             }\n \n             @Override\n-            public void destroyItem(ViewGroup collection, int position, Object view) {\n+            public void destroyItem(@NonNull ViewGroup collection, int position, @NonNull Object view) {\n                 collection.removeView((View) view);\n             }\n         });\n@@ -275,7 +276,7 @@ public void onPageSelected(int position) {\n                 if (position == 0) {\n                     mTerminalView.requestFocus();\n                 } else {\n-                    final EditText editText = (EditText) viewPager.findViewById(R.id.text_input);\n+                    final EditText editText = viewPager.findViewById(R.id.text_input);\n                     if (editText != null) editText.requestFocus();\n                 }\n             }\n@@ -339,7 +340,7 @@ public boolean onLongClick(View v) {\n     }\n \n     void toggleShowExtraKeys() {\n-        final ViewPager viewPager = (ViewPager) findViewById(R.id.viewpager);\n+        final ViewPager viewPager = findViewById(R.id.viewpager);\n         final boolean showNow = mSettings.toggleShowExtraKeys(TermuxActivity.this);\n         viewPager.setVisibility(showNow ? View.VISIBLE : View.GONE);\n         if (showNow && viewPager.getCurrentItem() == 1) {\n@@ -424,7 +425,7 @@ public void onColorsChanged(TerminalSession changedSession) {\n             }\n         };\n \n-        ListView listView = (ListView) findViewById(R.id.left_drawer_list);\n+        ListView listView = findViewById(R.id.left_drawer_list);\n         mListViewAdapter = new ArrayAdapter<TerminalSession>(getApplicationContext(), R.layout.line_in_drawer, mTermService.getSessions()) {\n             final StyleSpan boldSpan = new StyleSpan(Typeface.BOLD);\n             final StyleSpan italicSpan = new StyleSpan(Typeface.ITALIC);\n@@ -441,7 +442,7 @@ public View getView(int position, View convertView, @NonNull ViewGroup parent) {\n                 TerminalSession sessionAtRow = getItem(position);\n                 boolean sessionRunning = sessionAtRow.isRunning();\n \n-                TextView firstLineView = (TextView) row.findViewById(R.id.row_line);\n+                TextView firstLineView = row.findViewById(R.id.row_line);\n \n                 String name = sessionAtRow.mSessionName;\n                 String sessionTitle = sessionAtRow.getTitle();\n@@ -537,10 +538,8 @@ public void onTextSet(String text) {\n \n     @Override\n     public void onServiceDisconnected(ComponentName name) {\n-        if (mTermService != null) {\n-            // Respect being stopped from the TermuxService notification action.\n-            finish();\n-        }\n+        // Respect being stopped from the TermuxService notification action.\n+        finish();\n     }\n \n     @Nullable\n@@ -643,8 +642,8 @@ void noteSessionInfo() {\n         TerminalSession session = getCurrentTermSession();\n         final int indexOfSession = mTermService.getSessions().indexOf(session);\n         showToast(toToastTitle(session), false);\n-        mListViewAdapter.notifyDataSetChanged();\n-        final ListView lv = ((ListView) findViewById(R.id.left_drawer_list));\n+            mListViewAdapter.notifyDataSetChanged();\n+        final ListView lv = findViewById(R.id.left_drawer_list);\n         lv.setItemChecked(indexOfSession, true);\n         lv.smoothScrollToPosition(indexOfSession);\n     }",
    "output": "Remove some Android Studio warnings"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -207,8 +207,8 @@ private Notification buildNotification() {\n         builder.setOngoing(true);\n \n         // If holding a wake or wifi lock consider the notification of high priority since it's using power,\n-        // otherwise use a minimal priority since this is just a background service notification:\n-        builder.setPriority((wakeLockHeld) ? Notification.PRIORITY_HIGH : Notification.PRIORITY_MIN);\n+        // otherwise use a low priority\n+        builder.setPriority((wakeLockHeld) ? Notification.PRIORITY_HIGH : Notification.PRIORITY_LOW);\n \n         // No need to show a timestamp:\n         builder.setShowWhen(false);",
    "output": "set default notification priority to low\n\nsince we're a foreground service, in oreo we already get a higher\npriority; see\nhttps://developer.android.com/reference/android/app/NotificationManager.html#IMPORTANCE_MIN"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -157,7 +157,6 @@ public void onReceive(Context context, Intent intent) {\n \n     void checkForFontAndColors() {\n         try {\n-            // Hard-coded paths since this file is used also in Termux:Float.\n             @SuppressLint(\"SdCardPath\") File fontFile = new File(\"/data/data/com.termux/files/home/.termux/font.ttf\");\n             @SuppressLint(\"SdCardPath\") File colorsFile = new File(\"/data/data/com.termux/files/home/.termux/colors.properties\");\n ",
    "output": "Remove outdated comment"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -16,7 +16,6 @@\n import android.os.Handler;\n import android.os.IBinder;\n import android.os.PowerManager;\n-import android.support.v4.content.WakefulBroadcastReceiver;\n import android.util.Log;\n import android.widget.ArrayAdapter;\n \n@@ -157,11 +156,6 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n             Log.e(EmulatorDebug.LOG_TAG, \"Unknown TermuxService action: '\" + action + \"'\");\n         }\n \n-        if ((flags & START_FLAG_REDELIVERY) == 0) {\n-            // Service is started by WBR, not restarted by system, so release the WakeLock from WBR.\n-            WakefulBroadcastReceiver.completeWakefulIntent(intent);\n-        }\n-\n         // If this service really do get killed, there is no point restarting it automatically - let the user do on next\n         // start of {@link Term):\n         return Service.START_NOT_STICKY;",
    "output": "Remove WakefulBroadcastReceiver usage"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -2,6 +2,7 @@\n \n import android.annotation.SuppressLint;\n import android.app.Notification;\n+import android.app.NotificationChannel;\n import android.app.NotificationManager;\n import android.app.PendingIntent;\n import android.app.Service;\n@@ -11,6 +12,7 @@\n import android.net.Uri;\n import android.net.wifi.WifiManager;\n import android.os.Binder;\n+import android.os.Build;\n import android.os.Handler;\n import android.os.IBinder;\n import android.os.PowerManager;\n@@ -41,6 +43,8 @@\n  */\n public final class TermuxService extends Service implements SessionChangedCallback {\n \n+    private static final String NOTIFICATION_CHANNEL_ID = \"termux_notification_channel\";\n+\n     /** Note that this is a symlink on the Android M preview. */\n     @SuppressLint(\"SdCardPath\")\n     public static final String FILES_PATH = \"/data/data/com.termux/files\";\n@@ -170,6 +174,7 @@ public IBinder onBind(Intent intent) {\n \n     @Override\n     public void onCreate() {\n+        setupNotificationChannel();\n         startForeground(NOTIFICATION_ID, buildNotification());\n     }\n \n@@ -217,6 +222,10 @@ private Notification buildNotification() {\n         // Background color for small notification icon:\n         builder.setColor(0xFF000000);\n \n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\n+            builder.setChannelId(NOTIFICATION_CHANNEL_ID);\n+        }\n+\n         Resources res = getResources();\n         Intent exitIntent = new Intent(this, TermuxService.class).setAction(ACTION_STOP_SERVICE);\n         builder.addAction(android.R.drawable.ic_delete, res.getString(R.string.notification_action_exit), PendingIntent.getService(this, 0, exitIntent, 0));\n@@ -341,4 +350,17 @@ public void run() {\n             }\n         });\n     }\n+\n+    private void setupNotificationChannel() {\n+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) return;\n+\n+        String channelName = \"Termux\";\n+        String channelDescription = \"Notifications from Termux\";\n+        int importance = NotificationManager.IMPORTANCE_LOW;\n+\n+        NotificationChannel channel = new NotificationChannel(NOTIFICATION_CHANNEL_ID, channelName,importance);\n+        channel.setDescription(channelDescription);\n+        NotificationManager manager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);\n+        manager.createNotificationChannel(channel);\n+    }\n }",
    "output": "Use a notification channel on Android O"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxOpenReceiver.java b/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n--- a/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n+++ b/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n@@ -8,6 +8,7 @@\n import android.database.Cursor;\n import android.database.MatrixCursor;\n import android.net.Uri;\n+import android.os.Environment;\n import android.os.ParcelFileDescriptor;\n import android.provider.MediaStore;\n import android.support.annotation.NonNull;\n@@ -18,6 +19,7 @@\n \n import java.io.File;\n import java.io.FileNotFoundException;\n+import java.io.IOException;\n \n public class TermuxOpenReceiver extends BroadcastReceiver {\n \n@@ -171,6 +173,16 @@ public int update(@NonNull Uri uri, ContentValues values, String selection, Stri\n         @Override\n         public ParcelFileDescriptor openFile(@NonNull Uri uri, @NonNull String mode) throws FileNotFoundException {\n             File file = new File(uri.getPath());\n+            try {\n+                String path = file.getCanonicalPath();\n+                String storagePath = Environment.getExternalStorageDirectory().getCanonicalPath();\n+                // See https://support.google.com/faqs/answer/7496913:\n+                if (!(path.startsWith(TermuxService.FILES_PATH) || path.startsWith(storagePath))) {\n+                    throw new IllegalArgumentException(\"Invalid path: \" + path);\n+                }\n+            } catch (IOException e) {\n+                throw new IllegalArgumentException(e);\n+            }\n             return ParcelFileDescriptor.open(file, ParcelFileDescriptor.MODE_READ_ONLY);\n         }\n     }",
    "output": "Validate file path in TermuxOpenReceiver"
  },
  {
    "input": "diff --git a/terminal-emulator/src/test/java/com/termux/terminal/TerminalRowTest.java b/terminal-emulator/src/test/java/com/termux/terminal/TerminalRowTest.java\n--- a/terminal-emulator/src/test/java/com/termux/terminal/TerminalRowTest.java\n+++ b/terminal-emulator/src/test/java/com/termux/terminal/TerminalRowTest.java\n@@ -27,6 +27,7 @@ public class TerminalRowTest extends TestCase {\n \n \t@Override\n \tprotected void setUp() throws Exception {\n+\t\tsuper.setUp();\n \t\trow = new TerminalRow(COLUMNS, TextStyle.NORMAL);\n \t}\n \n\ndiff --git a/terminal-emulator/src/test/java/com/termux/terminal/TerminalTestCase.java b/terminal-emulator/src/test/java/com/termux/terminal/TerminalTestCase.java\n--- a/terminal-emulator/src/test/java/com/termux/terminal/TerminalTestCase.java\n+++ b/terminal-emulator/src/test/java/com/termux/terminal/TerminalTestCase.java\n@@ -103,6 +103,7 @@ public void assertEnteringStringGivesResponse(String input, String expectedRespo\n \n \t@Override\n \tprotected void setUp() throws Exception {\n+\t\tsuper.setUp();\n \t\tmOutput = new MockTerminalOutput();\n \t}\n ",
    "output": "Get rid of two android studio warnings"
  },
  {
    "input": "diff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n@@ -1192,12 +1192,20 @@ private void startEscapeSequence() {\n     }\n \n     private void doLinefeed() {\n+        boolean belowScrollingRegion = mCursorRow >= mBottomMargin;\n         int newCursorRow = mCursorRow + 1;\n-        if (newCursorRow >= mBottomMargin) {\n-            scrollDownOneLine();\n-            newCursorRow = mBottomMargin - 1;\n+        if (belowScrollingRegion) {\n+            // Move down (but not scroll) as long as we are above the last row.\n+            if (mCursorRow != mRows - 1) {\n+                setCursorRow(newCursorRow);\n+            }\n+        } else {\n+            if (newCursorRow == mBottomMargin) {\n+                scrollDownOneLine();\n+                newCursorRow = mBottomMargin - 1;\n+            }\n+            setCursorRow(newCursorRow);\n         }\n-        setCursorRow(newCursorRow);\n     }\n \n     private void continueSequence(int state) {\n@@ -1571,7 +1579,7 @@ private void doCsi(int b) {\n                 break;\n             case 'r': // \"CSI${top};${bottom}r\" - set top and bottom Margins (DECSTBM).\n             {\n-                // http://www.vt100.net/docs/vt510-rm/DECSTBM\n+                // https://vt100.net/docs/vt510-rm/DECSTBM.html\n                 // The top margin defaults to 1, the bottom margin defaults to mRows.\n                 // The escape sequence numbers top 1..23, but we number top 0..22.\n                 // The escape sequence numbers bottom 2..24, and so do we (because we use a zero based numbering\n\ndiff --git a/terminal-emulator/src/test/java/com/termux/terminal/ScrollRegionTest.java b/terminal-emulator/src/test/java/com/termux/terminal/ScrollRegionTest.java\n--- a/terminal-emulator/src/test/java/com/termux/terminal/ScrollRegionTest.java\n+++ b/terminal-emulator/src/test/java/com/termux/terminal/ScrollRegionTest.java\n@@ -98,4 +98,13 @@ public void testScrollDownWithScrollRegion() {\n \t\twithTerminalSized(2, 5).enterString(\"1\\r\\n2\\r\\n3\\r\\n4\\r\\n5\").assertLinesAre(\"1 \", \"2 \", \"3 \", \"4 \", \"5 \");\n \t\tenterString(\"\\033[3r\").enterString(\"\\033[2T\").assertLinesAre(\"1 \", \"2 \", \"  \", \"  \", \"3 \");\n \t}\n+\n+\tpublic void testScrollDownBelowScrollRegion() {\n+\t\twithTerminalSized(2, 5).enterString(\"1\\r\\n2\\r\\n3\\r\\n4\\r\\n5\").assertLinesAre(\"1 \", \"2 \", \"3 \", \"4 \", \"5 \");\n+\t\tenterString(\"\\033[1;3r\"); // DECSTBM margins.\n+\t\tenterString(\"\\033[4;1H\"); // Place cursor just below bottom margin.\n+\t\tenterString(\"QQ\\r\\nRR\\r\\n\\r\\n\\r\\nYY\");\n+\t\tassertLinesAre(\"1 \", \"2 \", \"3 \", \"QQ\", \"YY\");\n+\t}\n+\n }",
    "output": "Do not scroll when below bottom margin"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxHelpActivity.java b/app/src/main/java/com/termux/app/TermuxHelpActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxHelpActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxHelpActivity.java\n@@ -39,7 +39,7 @@ protected void onCreate(Bundle savedInstanceState) {\n         mWebView.setWebViewClient(new WebViewClient() {\n             @Override\n             public boolean shouldOverrideUrlLoading(WebView view, String url) {\n-                if (url.startsWith(\"https://termux.com\")) {\n+                if (url.startsWith(\"https://wiki.termux.com\")) {\n                     // Inline help.\n                     setContentView(progressLayout);\n                     return false;\n@@ -60,7 +60,7 @@ public void onPageFinished(WebView view, String url) {\n                 setContentView(mWebView);\n             }\n         });\n-        mWebView.loadUrl(\"https://termux.com/help.html\");\n+        mWebView.loadUrl(\"https://wiki.termux.com/wiki/Main_Page\");\n     }\n \n     @Override",
    "output": "replace help url with wiki url\n\nHELP page wiki changed to https://wiki.termux.com/wiki/Main_Page as it now has more info than http://termux.com/help.html"
  },
  {
    "input": "diff --git a/terminal-emulator/src/test/java/com/termux/terminal/ControlSequenceIntroducerTest.java b/terminal-emulator/src/test/java/com/termux/terminal/ControlSequenceIntroducerTest.java\n--- a/terminal-emulator/src/test/java/com/termux/terminal/ControlSequenceIntroducerTest.java\n+++ b/terminal-emulator/src/test/java/com/termux/terminal/ControlSequenceIntroducerTest.java\n@@ -41,6 +41,9 @@ public void testRepeat() {\n         withTerminalSized(3, 2).enterString(\"a\\033[2b\").assertLinesAre(\"aaa\", \"   \");\n         // When no char has been output we ignore REP:\n         withTerminalSized(3, 2).enterString(\"\\033[b\").assertLinesAre(\"   \", \"   \");\n+        // This shows that REP outputs the last emitted code point and not the one relative to the\n+        // current cursor position:\n+        withTerminalSized(5, 2).enterString(\"abcde\\033[2G\\033[2b\\n\").assertLinesAre(\"aeede\", \"     \");\n     }\n \n }",
    "output": "Additional REP test"
  },
  {
    "input": "diff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n@@ -223,6 +223,7 @@ public final class TerminalEmulator {\n \n     private byte mUtf8ToFollow, mUtf8Index;\n     private final byte[] mUtf8InputBuffer = new byte[4];\n+    private int mLastEmittedCodePoint = -1;\n \n     public final TerminalColors mColors = new TerminalColors();\n \n@@ -1509,6 +1510,11 @@ private void doCsi(int b) {\n             case '`': // Horizontal position absolute (HPA - http://www.vt100.net/docs/vt510-rm/HPA).\n                 setCursorColRespectingOriginMode(getArg0(1) - 1);\n                 break;\n+            case 'b': // Repeat the preceding graphic character Ps times (REP).\n+                if (mLastEmittedCodePoint == -1) break;\n+                final int numRepeat = getArg0(1);\n+                for (int i = 0; i < numRepeat; i++) emitCodePoint(mLastEmittedCodePoint);\n+                break;\n             case 'c': // Primary Device Attributes (http://www.vt100.net/docs/vt510-rm/DA1) if argument is missing or zero.\n                 // The important part that may still be used by some (tmux stores this value but does not currently use it)\n                 // is the first response parameter identifying the terminal service class, where we send 64 for \"vt420\".\n@@ -1574,6 +1580,7 @@ private void doCsi(int b) {\n                 // Also require that top + 2 <= bottom.\n                 mTopMargin = Math.max(0, Math.min(getArg0(1) - 1, mRows - 2));\n                 mBottomMargin = Math.max(mTopMargin + 2, Math.min(getArg1(mRows), mRows));\n+\n                 // DECSTBM moves the cursor to column 1, line 1 of the page respecting origin mode.\n                 setCursorPosition(0, 0);\n             }\n@@ -2091,6 +2098,7 @@ private void finishSequence() {\n      * @param codePoint The code point of the character to display\n      */\n     private void emitCodePoint(int codePoint) {\n+        mLastEmittedCodePoint = codePoint;\n         if (mUseLineDrawingUsesG0 ? mUseLineDrawingG0 : mUseLineDrawingG1) {\n             // http://www.vt100.net/docs/vt102-ug/table5-15.html.\n             switch (codePoint) {\n\ndiff --git a/terminal-emulator/src/test/java/com/termux/terminal/ControlSequenceIntroducerTest.java b/terminal-emulator/src/test/java/com/termux/terminal/ControlSequenceIntroducerTest.java\n--- a/terminal-emulator/src/test/java/com/termux/terminal/ControlSequenceIntroducerTest.java\n+++ b/terminal-emulator/src/test/java/com/termux/terminal/ControlSequenceIntroducerTest.java\n@@ -35,4 +35,12 @@ public void testCsiSGRParameters() {\n \t\twithTerminalSized(3, 2).enterString(\"\\033[0;38;2;255;255;255;48;2;0;0;0;1;2;3;4;5;7;8;9mabc\").assertLinesAre(\"abc\", \"   \");\n \t}\n \n+    /** CSI Ps b  Repeat the preceding graphic character Ps times (REP). */\n+    public void testRepeat() {\n+        withTerminalSized(3, 2).enterString(\"a\\033[b\").assertLinesAre(\"aa \", \"   \");\n+        withTerminalSized(3, 2).enterString(\"a\\033[2b\").assertLinesAre(\"aaa\", \"   \");\n+        // When no char has been output we ignore REP:\n+        withTerminalSized(3, 2).enterString(\"\\033[b\").assertLinesAre(\"   \", \"   \");\n+    }\n+\n }",
    "output": "Start supporting the REP escape sequence"
  },
  {
    "input": "diff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -834,6 +834,10 @@ public boolean onPrepareActionMode(ActionMode mode, Menu menu) {\n \n                 @Override\n                 public boolean onActionItemClicked(ActionMode mode, MenuItem item) {\n+                    if (!mIsSelectingText) {\n+                        // Fix issue where the dialog is pressed while being dismissed.\n+                        return true;\n+                    }\n                     switch (item.getItemId()) {\n                         case 1:\n                             String selectedText = mEmulator.getSelectedText(mSelX1, mSelY1, mSelX2, mSelY2).trim();",
    "output": "Fix possible crash in the copy/paste/more dialog"
  },
  {
    "input": "diff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n@@ -1310,6 +1310,8 @@ private void saveCursor() {\n         state.mSavedCursorRow = mCursorRow;\n         state.mSavedCursorCol = mCursorCol;\n         state.mSavedEffect = mEffect;\n+        state.mSavedForeColor = mForeColor;\n+        state.mSavedBackColor = mBackColor;\n         state.mSavedDecFlags = mCurrentDecSetFlags;\n         state.mUseLineDrawingG0 = mUseLineDrawingG0;\n         state.mUseLineDrawingG1 = mUseLineDrawingG1;\n@@ -1321,6 +1323,8 @@ private void restoreCursor() {\n         SavedScreenState state = (mScreen == mMainBuffer) ? mSavedStateMain : mSavedStateAlt;\n         setCursorRowCol(state.mSavedCursorRow, state.mSavedCursorCol);\n         mEffect = state.mSavedEffect;\n+        mForeColor = state.mSavedForeColor;\n+        mBackColor = state.mSavedBackColor;\n         int mask = (DECSET_BIT_AUTOWRAP | DECSET_BIT_ORIGIN_MODE);\n         mCurrentDecSetFlags = (mCurrentDecSetFlags & ~mask) | (state.mSavedDecFlags & mask);\n         mUseLineDrawingG0 = state.mUseLineDrawingG0;\n@@ -2268,8 +2272,8 @@ public void reset() {\n         mBottomMargin = mRows;\n         mRightMargin = mColumns;\n         mAboutToAutoWrap = false;\n-        mForeColor = TextStyle.COLOR_INDEX_FOREGROUND;\n-        mBackColor = TextStyle.COLOR_INDEX_BACKGROUND;\n+        mForeColor = mSavedStateMain.mSavedForeColor = mSavedStateAlt.mSavedForeColor = TextStyle.COLOR_INDEX_FOREGROUND;\n+        mBackColor = mSavedStateMain.mSavedBackColor = mSavedStateAlt.mSavedBackColor = TextStyle.COLOR_INDEX_BACKGROUND;\n         setDefaultTabStops();\n \n         mUseLineDrawingG0 = mUseLineDrawingG1 = false;\n@@ -2323,7 +2327,7 @@ public void paste(String text) {\n     static final class SavedScreenState {\n         /** Saved state of the cursor position, Used to implement the save/restore cursor position escape sequences. */\n         int mSavedCursorRow, mSavedCursorCol;\n-        int mSavedEffect;\n+        int mSavedEffect, mSavedForeColor, mSavedBackColor;\n         int mSavedDecFlags;\n         boolean mUseLineDrawingG0, mUseLineDrawingG1, mUseLineDrawingUsesG0 = true;\n     }\n\ndiff --git a/terminal-emulator/src/test/java/com/termux/terminal/CursorAndScreenTest.java b/terminal-emulator/src/test/java/com/termux/terminal/CursorAndScreenTest.java\n--- a/terminal-emulator/src/test/java/com/termux/terminal/CursorAndScreenTest.java\n+++ b/terminal-emulator/src/test/java/com/termux/terminal/CursorAndScreenTest.java\n@@ -227,4 +227,44 @@ public void testBackspaceAcrossWrappedLines() {\n         withTerminalSized(3, 3).enterString(\"\\b\\b\\b\\bhi\").assertLinesAre(\"hi \", \"   \", \"   \");\n     }\n \n+\tpublic void testCursorSaveRestoreLocation() {\n+\t\t// DEC save/restore\n+\t\twithTerminalSized(4, 2).enterString(\"t\\0337est\\r\\nme\\0338ry \").assertLinesAre(\"try \", \"me  \");\n+\t\t// ANSI.SYS save/restore\n+\t\twithTerminalSized(4, 2).enterString(\"t\\033[sest\\r\\nme\\033[ury \").assertLinesAre(\"try \", \"me  \");\n+\t\t// Alternate screen enter/exit\n+\t\twithTerminalSized(4, 2).enterString(\"t\\033[?1049h\\033[Hest\\r\\nme\").assertLinesAre(\"est \", \"me  \").enterString(\"\\033[?1049lry\").assertLinesAre(\"try \", \"    \");\n+\t}\n+\n+\tpublic void testCursorSaveRestoreTextStyle() {\n+\t\tlong s;\n+\n+\t\t// DEC save/restore\n+\t\twithTerminalSized(4, 2).enterString(\"\\033[31;42;4m..\\0337\\033[36;47;24m\\0338..\");\n+\t\ts = getStyleAt(0, 3);\n+\t\tAssert.assertEquals(1, TextStyle.decodeForeColor(s));\n+\t\tAssert.assertEquals(2, TextStyle.decodeBackColor(s));\n+\t\tAssert.assertEquals(TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE, TextStyle.decodeEffect(s));\n+\n+\t\t// ANSI.SYS save/restore\n+\t\twithTerminalSized(4, 2).enterString(\"\\033[31;42;4m..\\033[s\\033[36;47;24m\\033[u..\");\n+\t\ts = getStyleAt(0, 3);\n+\t\tAssert.assertEquals(1, TextStyle.decodeForeColor(s));\n+\t\tAssert.assertEquals(2, TextStyle.decodeBackColor(s));\n+\t\tAssert.assertEquals(TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE, TextStyle.decodeEffect(s));\n+\n+\t\t// Alternate screen enter/exit\n+\t\twithTerminalSized(4, 2);\n+\t\tenterString(\"\\033[31;42;4m..\\033[?1049h\\033[H\\033[36;47;24m.\");\n+\t\ts = getStyleAt(0, 0);\n+\t\tAssert.assertEquals(6, TextStyle.decodeForeColor(s));\n+\t\tAssert.assertEquals(7, TextStyle.decodeBackColor(s));\n+\t\tAssert.assertEquals(0, TextStyle.decodeEffect(s));\n+\t\tenterString(\"\\033[?1049l..\");\n+\t\ts = getStyleAt(0, 3);\n+\t\tAssert.assertEquals(1, TextStyle.decodeForeColor(s));\n+\t\tAssert.assertEquals(2, TextStyle.decodeBackColor(s));\n+\t\tAssert.assertEquals(TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE, TextStyle.decodeEffect(s));\n+\t}\n+\n }",
    "output": "Merge pull request #330 from whydoubt/cursor_preserve_color\n\nMake cursor save/restore affect color attributes"
  },
  {
    "input": "diff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n@@ -632,6 +632,7 @@ public void processCodePoint(int b) {\n                                 int bottom = Math.min(getArg(2, mRows, true) + 1, effectiveBottomMargin - 1) + effectiveTopMargin;\n                                 int right = Math.min(getArg(3, mColumns, true) + 1, effectiveRightMargin - 1) + effectiveLeftMargin;\n                                 if (mArgIndex >= 4) {\n+                                    if (mArgIndex >= mArgs.length) mArgIndex = mArgs.length - 1;\n                                     for (int i = 4; i <= mArgIndex; i++) {\n                                         int bits = 0;\n                                         boolean setOrClear = true; // True if setting, false if clearing.\n@@ -965,6 +966,7 @@ private void doCsiQuestionMark(int b) {\n                 break;\n             case 'h':\n             case 'l':\n+                if (mArgIndex >= mArgs.length) mArgIndex = mArgs.length - 1;\n                 for (int i = 0; i <= mArgIndex; i++)\n                     doDecSetOrReset(b == 'h', mArgs[i]);\n                 break;\n@@ -981,6 +983,7 @@ private void doCsiQuestionMark(int b) {\n                 break;\n             case 'r':\n             case 's':\n+                if (mArgIndex >= mArgs.length) mArgIndex = mArgs.length - 1;\n                 for (int i = 0; i <= mArgIndex; i++) {\n                     int externalBit = mArgs[i];\n                     int internalBit = mapDecSetBitToInternalBit(externalBit);\n@@ -1639,6 +1642,7 @@ private void doCsi(int b) {\n \n     /** Select Graphic Rendition (SGR) - see http://en.wikipedia.org/wiki/ANSI_escape_code#graphics. */\n     private void selectGraphicRendition() {\n+        if (mArgIndex >= mArgs.length) mArgIndex = mArgs.length - 1;\n         for (int i = 0; i <= mArgIndex; i++) {\n             int code = mArgs[i];\n             if (code < 0) {\n@@ -2049,6 +2053,7 @@ private void logError(String errorType) {\n             buf.append(\", escapeState=\");\n             buf.append(mEscapeState);\n             boolean firstArg = true;\n+            if (mArgIndex >= mArgs.length) mArgIndex = mArgs.length - 1;\n             for (int i = 0; i <= mArgIndex; i++) {\n                 int value = mArgs[i];\n                 if (value >= 0) {\n\ndiff --git a/terminal-emulator/src/test/java/com/termux/terminal/ControlSequenceIntroducerTest.java b/terminal-emulator/src/test/java/com/termux/terminal/ControlSequenceIntroducerTest.java\n--- a/terminal-emulator/src/test/java/com/termux/terminal/ControlSequenceIntroducerTest.java\n+++ b/terminal-emulator/src/test/java/com/termux/terminal/ControlSequenceIntroducerTest.java\n@@ -29,4 +29,10 @@ public void testCsiX() {\n \t\twithTerminalSized(13, 2).enterString(\"abcdefghijkl\\b\\b\\b\\b\\b\\033[20X\").assertLinesAre(\"abcdefg      \", \"             \");\n \t}\n \n+\t/** CSI Pm m  Set SGR parameter(s) from semicolon-separated list Pm. */\n+\tpublic void testCsiSGRParameters() {\n+\t\t// Set more parameters (19) than supported (16).  Additional parameters should be silently consumed.\n+\t\twithTerminalSized(3, 2).enterString(\"\\033[0;38;2;255;255;255;48;2;0;0;0;1;2;3;4;5;7;8;9mabc\").assertLinesAre(\"abc\", \"   \");\n+\t}\n+\n }",
    "output": "Merge pull request #331 from whydoubt/fix_parameter_fc\n\nFix FC from too many control code parameters"
  },
  {
    "input": "diff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n@@ -1307,6 +1307,8 @@ private void saveCursor() {\n         state.mSavedCursorRow = mCursorRow;\n         state.mSavedCursorCol = mCursorCol;\n         state.mSavedEffect = mEffect;\n+        state.mSavedForeColor = mForeColor;\n+        state.mSavedBackColor = mBackColor;\n         state.mSavedDecFlags = mCurrentDecSetFlags;\n         state.mUseLineDrawingG0 = mUseLineDrawingG0;\n         state.mUseLineDrawingG1 = mUseLineDrawingG1;\n@@ -1318,6 +1320,8 @@ private void restoreCursor() {\n         SavedScreenState state = (mScreen == mMainBuffer) ? mSavedStateMain : mSavedStateAlt;\n         setCursorRowCol(state.mSavedCursorRow, state.mSavedCursorCol);\n         mEffect = state.mSavedEffect;\n+        mForeColor = state.mSavedForeColor;\n+        mBackColor = state.mSavedBackColor;\n         int mask = (DECSET_BIT_AUTOWRAP | DECSET_BIT_ORIGIN_MODE);\n         mCurrentDecSetFlags = (mCurrentDecSetFlags & ~mask) | (state.mSavedDecFlags & mask);\n         mUseLineDrawingG0 = state.mUseLineDrawingG0;\n@@ -2263,8 +2267,8 @@ public void reset() {\n         mBottomMargin = mRows;\n         mRightMargin = mColumns;\n         mAboutToAutoWrap = false;\n-        mForeColor = TextStyle.COLOR_INDEX_FOREGROUND;\n-        mBackColor = TextStyle.COLOR_INDEX_BACKGROUND;\n+        mForeColor = mSavedStateMain.mSavedForeColor = mSavedStateAlt.mSavedForeColor = TextStyle.COLOR_INDEX_FOREGROUND;\n+        mBackColor = mSavedStateMain.mSavedBackColor = mSavedStateAlt.mSavedBackColor = TextStyle.COLOR_INDEX_BACKGROUND;\n         setDefaultTabStops();\n \n         mUseLineDrawingG0 = mUseLineDrawingG1 = false;\n@@ -2318,7 +2322,7 @@ public void paste(String text) {\n     static final class SavedScreenState {\n         /** Saved state of the cursor position, Used to implement the save/restore cursor position escape sequences. */\n         int mSavedCursorRow, mSavedCursorCol;\n-        int mSavedEffect;\n+        int mSavedEffect, mSavedForeColor, mSavedBackColor;\n         int mSavedDecFlags;\n         boolean mUseLineDrawingG0, mUseLineDrawingG1, mUseLineDrawingUsesG0 = true;\n     }",
    "output": "Make cursor save/restore affect color attributes\n\nSGR attributes are stored in three variables: mEffect, mForeColor, and\nmBackColor.  Saving/restoring the cursor only preserves mEffect.\n\nChange the cursor save/restore methods to additionally preserve\nmForeColor and mBackColor.  This affects both 'explit' saving/restoring\nthe cursor and switching to/from the alternate screen buffer."
  },
  {
    "input": "diff --git a/terminal-emulator/src/test/java/com/termux/terminal/CursorAndScreenTest.java b/terminal-emulator/src/test/java/com/termux/terminal/CursorAndScreenTest.java\n--- a/terminal-emulator/src/test/java/com/termux/terminal/CursorAndScreenTest.java\n+++ b/terminal-emulator/src/test/java/com/termux/terminal/CursorAndScreenTest.java\n@@ -227,4 +227,44 @@ public void testBackspaceAcrossWrappedLines() {\n         withTerminalSized(3, 3).enterString(\"\\b\\b\\b\\bhi\").assertLinesAre(\"hi \", \"   \", \"   \");\n     }\n \n+\tpublic void testCursorSaveRestoreLocation() {\n+\t\t// DEC save/restore\n+\t\twithTerminalSized(4, 2).enterString(\"t\\0337est\\r\\nme\\0338ry \").assertLinesAre(\"try \", \"me  \");\n+\t\t// ANSI.SYS save/restore\n+\t\twithTerminalSized(4, 2).enterString(\"t\\033[sest\\r\\nme\\033[ury \").assertLinesAre(\"try \", \"me  \");\n+\t\t// Alternate screen enter/exit\n+\t\twithTerminalSized(4, 2).enterString(\"t\\033[?1049h\\033[Hest\\r\\nme\").assertLinesAre(\"est \", \"me  \").enterString(\"\\033[?1049lry\").assertLinesAre(\"try \", \"    \");\n+\t}\n+\n+\tpublic void testCursorSaveRestoreTextStyle() {\n+\t\tlong s;\n+\n+\t\t// DEC save/restore\n+\t\twithTerminalSized(4, 2).enterString(\"\\033[31;42;4m..\\0337\\033[36;47;24m\\0338..\");\n+\t\ts = getStyleAt(0, 3);\n+\t\tAssert.assertEquals(1, TextStyle.decodeForeColor(s));\n+\t\tAssert.assertEquals(2, TextStyle.decodeBackColor(s));\n+\t\tAssert.assertEquals(TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE, TextStyle.decodeEffect(s));\n+\n+\t\t// ANSI.SYS save/restore\n+\t\twithTerminalSized(4, 2).enterString(\"\\033[31;42;4m..\\033[s\\033[36;47;24m\\033[u..\");\n+\t\ts = getStyleAt(0, 3);\n+\t\tAssert.assertEquals(1, TextStyle.decodeForeColor(s));\n+\t\tAssert.assertEquals(2, TextStyle.decodeBackColor(s));\n+\t\tAssert.assertEquals(TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE, TextStyle.decodeEffect(s));\n+\n+\t\t// Alternate screen enter/exit\n+\t\twithTerminalSized(4, 2);\n+\t\tenterString(\"\\033[31;42;4m..\\033[?1049h\\033[H\\033[36;47;24m.\");\n+\t\ts = getStyleAt(0, 0);\n+\t\tAssert.assertEquals(6, TextStyle.decodeForeColor(s));\n+\t\tAssert.assertEquals(7, TextStyle.decodeBackColor(s));\n+\t\tAssert.assertEquals(0, TextStyle.decodeEffect(s));\n+\t\tenterString(\"\\033[?1049l..\");\n+\t\ts = getStyleAt(0, 3);\n+\t\tAssert.assertEquals(1, TextStyle.decodeForeColor(s));\n+\t\tAssert.assertEquals(2, TextStyle.decodeBackColor(s));\n+\t\tAssert.assertEquals(TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE, TextStyle.decodeEffect(s));\n+\t}\n+\n }",
    "output": "Add tests for cursor save/restore"
  },
  {
    "input": "diff --git a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n--- a/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n+++ b/terminal-emulator/src/main/java/com/termux/terminal/TerminalEmulator.java\n@@ -632,6 +632,7 @@ public void processCodePoint(int b) {\n                                 int bottom = Math.min(getArg(2, mRows, true) + 1, effectiveBottomMargin - 1) + effectiveTopMargin;\n                                 int right = Math.min(getArg(3, mColumns, true) + 1, effectiveRightMargin - 1) + effectiveLeftMargin;\n                                 if (mArgIndex >= 4) {\n+                                    if (mArgIndex >= mArgs.length) mArgIndex = mArgs.length - 1;\n                                     for (int i = 4; i <= mArgIndex; i++) {\n                                         int bits = 0;\n                                         boolean setOrClear = true; // True if setting, false if clearing.\n@@ -965,6 +966,7 @@ private void doCsiQuestionMark(int b) {\n                 break;\n             case 'h':\n             case 'l':\n+                if (mArgIndex >= mArgs.length) mArgIndex = mArgs.length - 1;\n                 for (int i = 0; i <= mArgIndex; i++)\n                     doDecSetOrReset(b == 'h', mArgs[i]);\n                 break;\n@@ -981,6 +983,7 @@ private void doCsiQuestionMark(int b) {\n                 break;\n             case 'r':\n             case 's':\n+                if (mArgIndex >= mArgs.length) mArgIndex = mArgs.length - 1;\n                 for (int i = 0; i <= mArgIndex; i++) {\n                     int externalBit = mArgs[i];\n                     int internalBit = mapDecSetBitToInternalBit(externalBit);\n@@ -1639,6 +1642,7 @@ private void doCsi(int b) {\n \n     /** Select Graphic Rendition (SGR) - see http://en.wikipedia.org/wiki/ANSI_escape_code#graphics. */\n     private void selectGraphicRendition() {\n+        if (mArgIndex >= mArgs.length) mArgIndex = mArgs.length - 1;\n         for (int i = 0; i <= mArgIndex; i++) {\n             int code = mArgs[i];\n             if (code < 0) {\n@@ -2049,6 +2053,7 @@ private void logError(String errorType) {\n             buf.append(\", escapeState=\");\n             buf.append(mEscapeState);\n             boolean firstArg = true;\n+            if (mArgIndex >= mArgs.length) mArgIndex = mArgs.length - 1;\n             for (int i = 0; i <= mArgIndex; i++) {\n                 int value = mArgs[i];\n                 if (value >= 0) {",
    "output": "Fix FC from too many control code parameters\n\nWhen the number of parameters in a CSI control code exceeds the size of\nthe mArgs array, the code may attempt to read past the end of the array,\nresulting in a force close of the app.\n\nStop the index from moving past the last element of the mArgs array."
  },
  {
    "input": "diff --git a/terminal-emulator/src/test/java/com/termux/terminal/ControlSequenceIntroducerTest.java b/terminal-emulator/src/test/java/com/termux/terminal/ControlSequenceIntroducerTest.java\n--- a/terminal-emulator/src/test/java/com/termux/terminal/ControlSequenceIntroducerTest.java\n+++ b/terminal-emulator/src/test/java/com/termux/terminal/ControlSequenceIntroducerTest.java\n@@ -29,4 +29,10 @@ public void testCsiX() {\n \t\twithTerminalSized(13, 2).enterString(\"abcdefghijkl\\b\\b\\b\\b\\b\\033[20X\").assertLinesAre(\"abcdefg      \", \"             \");\n \t}\n \n+\t/** CSI Pm m  Set SGR parameter(s) from semicolon-separated list Pm. */\n+\tpublic void testCsiSGRParameters() {\n+\t\t// Set more parameters (19) than supported (16).  Additional parameters should be silently consumed.\n+\t\twithTerminalSized(3, 2).enterString(\"\\033[0;38;2;255;255;255;48;2;0;0;0;1;2;3;4;5;7;8;9mabc\").assertLinesAre(\"abc\", \"   \");\n+\t}\n+\n }",
    "output": "Add test for CSI followed by many parameters"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -397,7 +397,6 @@ public void onSessionFinished(final TerminalSession finishedSession) {\n             @Override\n             public void onClipboardText(TerminalSession session, String text) {\n                 if (!mIsVisible) return;\n-                showToast(\"Clipboard:\\n\\\"\" + text + \"\\\"\", false);\n                 ClipboardManager clipboard = (ClipboardManager) getSystemService(Context.CLIPBOARD_SERVICE);\n                 clipboard.setPrimaryClip(new ClipData(null, new String[]{\"text/plain\"}, new ClipData.Item(text)));\n             }",
    "output": "Do not show a Toast on clipboard text\n\nFixes https://github.com/termux/termux-app/issues/149."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/BackgroundJob.java b/app/src/main/java/com/termux/app/BackgroundJob.java\n--- a/app/src/main/java/com/termux/app/BackgroundJob.java\n+++ b/app/src/main/java/com/termux/app/BackgroundJob.java\n@@ -116,8 +116,9 @@ public static String[] buildEnvironment(boolean failSafe, String cwd) {\n             final String langEnv = \"LANG=en_US.UTF-8\";\n             final String pathEnv = \"PATH=\" + TermuxService.PREFIX_PATH + \"/bin:\" + TermuxService.PREFIX_PATH + \"/bin/applets\";\n             final String pwdEnv = \"PWD=\" + cwd;\n+            final String tmpdirEnv = \"TMPDIR=\" + TermuxService.PREFIX_PATH + \"/tmp\";\n \n-            return new String[]{termEnv, homeEnv, prefixEnv, ps1Env, ldEnv, langEnv, pathEnv, pwdEnv, androidRootEnv, androidDataEnv, externalStorageEnv};\n+            return new String[]{termEnv, homeEnv, prefixEnv, ps1Env, ldEnv, langEnv, pathEnv, pwdEnv, androidRootEnv, androidDataEnv, externalStorageEnv, tmpdirEnv};\n         }\n     }\n ",
    "output": "Export TMPDIR to $PREFIX/tmp\n\nFixes https://github.com/termux/termux-packages/issues/1010.\nFixes https://github.com/termux/termux-app/issues/306."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -3,6 +3,7 @@\n import android.content.Context;\n import android.util.AttributeSet;\n import android.view.Gravity;\n+import android.view.HapticFeedbackConstants;\n import android.view.KeyEvent;\n import android.view.View;\n import android.widget.Button;\n@@ -144,6 +145,7 @@ void reload() {\n                 button.setOnClickListener(new OnClickListener() {\n                     @Override\n                     public void onClick(View v) {\n+                        finalButton.performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP);\n                         View root = getRootView();\n                         switch (buttonText) {\n                             case \"CTRL\":",
    "output": "Perform haptic feedback on extra keys\n\nFixes #269."
  },
  {
    "input": "diff --git a/terminal-view/src/main/java/com/termux/view/GestureAndScaleRecognizer.java b/terminal-view/src/main/java/com/termux/view/GestureAndScaleRecognizer.java\n--- a/terminal-view/src/main/java/com/termux/view/GestureAndScaleRecognizer.java\n+++ b/terminal-view/src/main/java/com/termux/view/GestureAndScaleRecognizer.java\n@@ -6,7 +6,7 @@\n import android.view.ScaleGestureDetector;\n \n /** A combination of {@link GestureDetector} and {@link ScaleGestureDetector}. */\n-public final class GestureAndScaleRecognizer {\n+final class GestureAndScaleRecognizer {\n \n     public interface Listener {\n         boolean onSingleTapUp(MotionEvent e);",
    "output": "Make GestureAndScaleRecognizer non-public"
  },
  {
    "input": "diff --git a/float/src/main/java/com/termux/window/TermuxFloatView.java b/float/src/main/java/com/termux/window/TermuxFloatView.java\n--- a/float/src/main/java/com/termux/window/TermuxFloatView.java\n+++ b/float/src/main/java/com/termux/window/TermuxFloatView.java\n@@ -128,8 +128,8 @@ public boolean onInterceptTouchEvent(MotionEvent event) {\n         if (isInLongPressState) return true;\n \n         getLocationOnScreen(location);\n-        int x = layoutParams.x; // location[0];\n-        int y = layoutParams.y; // location[1];\n+        int x = location[0];\n+        int y = location[1];\n         float touchX = event.getRawX();\n         float touchY = event.getRawY();\n         boolean clickedInside = (touchX >= x) && (touchX <= (x + layoutParams.width)) && (touchY >= y) && (touchY <= (y + layoutParams.height));\n\ndiff --git a/float/src/main/java/com/termux/window/TermuxFloatViewClient.java b/float/src/main/java/com/termux/window/TermuxFloatViewClient.java\n--- a/float/src/main/java/com/termux/window/TermuxFloatViewClient.java\n+++ b/float/src/main/java/com/termux/window/TermuxFloatViewClient.java\n@@ -37,8 +37,9 @@ public float onScale(float scale) {\n     @Override\n     public boolean onLongPress(MotionEvent event) {\n         view.updateLongPressMode(true);\n-        view.initialX = view.layoutParams.x;\n-        view.initialY = view.layoutParams.y;\n+        view.getLocationOnScreen(view.location);\n+        view.initialX = view.location[0];\n+        view.initialY = view.location[1];\n         view.initialTouchX = event.getRawX();\n         view.initialTouchY = event.getRawY();\n         return true;",
    "output": "Use getLocationOnScreen() to calculate position\n\nThis avoids problem when the window has been prevented from scrolling\noutside of the screen, or when the touch keyboard has made it move."
  },
  {
    "input": "diff --git a/float/src/main/java/com/termux/window/TermuxFloatService.java b/float/src/main/java/com/termux/window/TermuxFloatService.java\n--- a/float/src/main/java/com/termux/window/TermuxFloatService.java\n+++ b/float/src/main/java/com/termux/window/TermuxFloatService.java\n@@ -124,13 +124,12 @@ private Notification buildNotification() {\n     public int onStartCommand(Intent intent, int flags, int startId) {\n         String action = intent.getAction();\n         if (ACTION_HIDE.equals(action)) {\n-            mVisibleWindow = false;\n-            mFloatingWindow.setVisibility(View.GONE);\n-            ((NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE)).notify(NOTIFICATION_ID, buildNotification());\n+            setVisible(false);\n         } else if (ACTION_SHOW.equals(action)) {\n-            mFloatingWindow.setVisibility(View.VISIBLE);\n-            mVisibleWindow = true;\n-            ((NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE)).notify(NOTIFICATION_ID, buildNotification());\n+            setVisible(true);\n+        } else if (!mVisibleWindow) {\n+            // Show window if hidden when launched through launcher icon.\n+            setVisible(true);\n         }\n         return Service.START_NOT_STICKY;\n     }\n@@ -141,6 +140,12 @@ public void onDestroy() {\n         if (mFloatingWindow != null) mFloatingWindow.closeFloatingWindow();\n     }\n \n+    private void setVisible(boolean newVisibility) {\n+        mVisibleWindow = newVisibility;\n+        mFloatingWindow.setVisibility(newVisibility ? View.VISIBLE : View.GONE);\n+        ((NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE)).notify(NOTIFICATION_ID, buildNotification());\n+    }\n+\n     public void changeFontSize(boolean increase) {\n         mFontSize += (increase ? 1 : -1) * 2;\n         mFontSize = Math.max(MIN_FONTSIZE, mFontSize);",
    "output": "Show window if launched when hidden"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -213,7 +213,7 @@ public void onCreate(Bundle bundle) {\n \n         setContentView(R.layout.drawer_layout);\n         mTerminalView = (TerminalView) findViewById(R.id.terminal_view);\n-        mTerminalView.setOnKeyListener(new TermuxKeyListener(this));\n+        mTerminalView.setOnKeyListener(new TermuxViewClient(this));\n \n         mTerminalView.setTextSize(mSettings.getFontSize());\n         mFullScreenHelper.setImmersive(mSettings.isFullScreen());\n\ndiff --git a/app/src/main/java/com/termux/app/TermuxViewClient.java b/app/src/main/java/com/termux/app/TermuxViewClient.java\n--- a/app/src/main/java/com/termux/app/TermuxViewClient.java\n+++ b/app/src/main/java/com/termux/app/TermuxViewClient.java\n@@ -12,18 +12,18 @@\n import com.termux.terminal.KeyHandler;\n import com.termux.terminal.TerminalEmulator;\n import com.termux.terminal.TerminalSession;\n-import com.termux.view.TerminalKeyListener;\n+import com.termux.view.TerminalViewClient;\n \n import java.util.List;\n \n-public final class TermuxKeyListener implements TerminalKeyListener {\n+public final class TermuxViewClient implements TerminalViewClient {\n \n     final TermuxActivity mActivity;\n \n     /** Keeping track of the special keys acting as Ctrl and Fn for the soft keyboard and other hardware keys. */\n     boolean mVirtualControlKeyDown, mVirtualFnKeyDown;\n \n-    public TermuxKeyListener(TermuxActivity activity) {\n+    public TermuxViewClient(TermuxActivity activity) {\n         this.mActivity = activity;\n     }\n \n\ndiff --git a/float/src/main/java/com/termux/window/TermuxFloatView.java b/float/src/main/java/com/termux/window/TermuxFloatView.java\n--- a/float/src/main/java/com/termux/window/TermuxFloatView.java\n+++ b/float/src/main/java/com/termux/window/TermuxFloatView.java\n@@ -87,7 +87,7 @@ private static int computeLayoutFlags(boolean withFocus) {\n \n     public void initializeFloatingWindow() {\n         mTerminalView = (TerminalView) findViewById(R.id.terminal_view);\n-        mTerminalView.setOnKeyListener(new TermuxFloatKeyListener(this));\n+        mTerminalView.setOnKeyListener(new TermuxFloatViewClient(this));\n     }\n \n     @Override\n\ndiff --git a/float/src/main/java/com/termux/window/TermuxFloatViewClient.java b/float/src/main/java/com/termux/window/TermuxFloatViewClient.java\n--- a/float/src/main/java/com/termux/window/TermuxFloatViewClient.java\n+++ b/float/src/main/java/com/termux/window/TermuxFloatViewClient.java\n@@ -10,17 +10,17 @@\n import com.termux.terminal.KeyHandler;\n import com.termux.terminal.TerminalEmulator;\n import com.termux.terminal.TerminalSession;\n-import com.termux.view.TerminalKeyListener;\n+import com.termux.view.TerminalViewClient;\n \n-public class TermuxFloatKeyListener implements TerminalKeyListener {\n+public class TermuxFloatViewClient implements TerminalViewClient {\n \n     private final TermuxFloatView view;\n     /**\n      * Keeping track of the special keys acting as Ctrl and Fn for the soft keyboard and other hardware keys.\n      */\n     boolean mVirtualControlKeyDown, mVirtualFnKeyDown;\n \n-    public TermuxFloatKeyListener(TermuxFloatView view) {\n+    public TermuxFloatViewClient(TermuxFloatView view) {\n         this.view = view;\n     }\n \n\ndiff --git a/terminal-view/src/main/java/com/termux/view/TerminalView.java b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalView.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalView.java\n@@ -48,7 +48,7 @@ public final class TerminalView extends View {\n \n     TerminalRenderer mRenderer;\n \n-    TerminalKeyListener mOnKeyListener;\n+    TerminalViewClient mClient;\n \n     /** The top row of text to display. Ranges from -activeTranscriptRows to 0. */\n     int mTopRow;\n@@ -105,7 +105,7 @@ public boolean onSingleTapUp(MotionEvent e) {\n                 requestFocus();\n                 if (!mEmulator.isMouseTrackingActive()) {\n                     if (!e.isFromSource(InputDevice.SOURCE_MOUSE)) {\n-                        mOnKeyListener.onSingleTapUp(e);\n+                        mClient.onSingleTapUp(e);\n                         return true;\n                     }\n                 }\n@@ -135,7 +135,7 @@ public boolean onScroll(MotionEvent e, float distanceX, float distanceY) {\n             public boolean onScale(float focusX, float focusY, float scale) {\n                 if (mEmulator == null || mIsSelectingText) return true;\n                 mScaleFactor *= scale;\n-                mScaleFactor = mOnKeyListener.onScale(mScaleFactor);\n+                mScaleFactor = mClient.onScale(mScaleFactor);\n                 return true;\n             }\n \n@@ -189,7 +189,7 @@ public boolean onDoubleTap(MotionEvent e) {\n             @Override\n             public void onLongPress(MotionEvent e) {\n                 if (mGestureRecognizer.isInProgress()) return;\n-                if (mOnKeyListener.onLongPress(e)) return;\n+                if (mClient.onLongPress(e)) return;\n                 if (!mIsSelectingText) {\n                     performHapticFeedback(HapticFeedbackConstants.LONG_PRESS);\n                     toggleSelectingText(e);\n@@ -203,8 +203,8 @@ public void onLongPress(MotionEvent e) {\n      * @param onKeyListener Listener for all kinds of key events, both hardware and IME (which makes it different from that\n      *                      available with {@link View#setOnKeyListener(OnKeyListener)}.\n      */\n-    public void setOnKeyListener(TerminalKeyListener onKeyListener) {\n-        this.mOnKeyListener = onKeyListener;\n+    public void setOnKeyListener(TerminalViewClient onKeyListener) {\n+        this.mClient = onKeyListener;\n     }\n \n     /**\n@@ -556,7 +556,7 @@ public boolean onKeyPreIme(int keyCode, KeyEvent event) {\n             if (mIsSelectingText) {\n                 toggleSelectingText(null);\n                 return true;\n-            } else if (mOnKeyListener.shouldBackButtonBeMappedToEscape()) {\n+            } else if (mClient.shouldBackButtonBeMappedToEscape()) {\n                 // Intercept back button to treat it as escape:\n                 switch (event.getAction()) {\n                     case KeyEvent.ACTION_DOWN:\n@@ -575,10 +575,10 @@ public boolean onKeyDown(int keyCode, KeyEvent event) {\n             Log.i(EmulatorDebug.LOG_TAG, \"onKeyDown(keyCode=\" + keyCode + \", isSystem()=\" + event.isSystem() + \", event=\" + event + \")\");\n         if (mEmulator == null) return true;\n \n-        if (mOnKeyListener.onKeyDown(keyCode, event, mTermSession)) {\n+        if (mClient.onKeyDown(keyCode, event, mTermSession)) {\n             invalidate();\n             return true;\n-        } else if (event.isSystem() && (!mOnKeyListener.shouldBackButtonBeMappedToEscape() || keyCode != KeyEvent.KEYCODE_BACK)) {\n+        } else if (event.isSystem() && (!mClient.shouldBackButtonBeMappedToEscape() || keyCode != KeyEvent.KEYCODE_BACK)) {\n             return super.onKeyDown(keyCode, event);\n         } else if (event.getAction() == KeyEvent.ACTION_MULTIPLE && keyCode == KeyEvent.KEYCODE_UNKNOWN) {\n             mTermSession.write(event.getCharacters());\n@@ -642,10 +642,10 @@ void inputCodePoint(int codePoint, boolean controlDownFromEvent, boolean leftAlt\n                 + leftAltDownFromEvent + \")\");\n         }\n \n-        final boolean controlDown = controlDownFromEvent || mOnKeyListener.readControlKey();\n-        final boolean altDown = leftAltDownFromEvent || mOnKeyListener.readAltKey();\n+        final boolean controlDown = controlDownFromEvent || mClient.readControlKey();\n+        final boolean altDown = leftAltDownFromEvent || mClient.readAltKey();\n \n-        if (mOnKeyListener.onCodePoint(codePoint, controlDown, mTermSession)) return;\n+        if (mClient.onCodePoint(codePoint, controlDown, mTermSession)) return;\n \n         if (controlDown) {\n             if (codePoint >= 'a' && codePoint <= 'z') {\n@@ -714,7 +714,7 @@ public boolean onKeyUp(int keyCode, KeyEvent event) {\n             Log.i(EmulatorDebug.LOG_TAG, \"onKeyUp(keyCode=\" + keyCode + \", event=\" + event + \")\");\n         if (mEmulator == null) return true;\n \n-        if (mOnKeyListener.onKeyUp(keyCode, event)) {\n+        if (mClient.onKeyUp(keyCode, event)) {\n             invalidate();\n             return true;\n         } else if (event.isSystem()) {\n@@ -782,7 +782,7 @@ protected void onDraw(Canvas canvas) {\n     @TargetApi(23)\n     public void toggleSelectingText(MotionEvent ev) {\n         mIsSelectingText = !mIsSelectingText;\n-        mOnKeyListener.copyModeChanged(mIsSelectingText);\n+        mClient.copyModeChanged(mIsSelectingText);\n \n         if (mIsSelectingText) {\n             if (mLeftSelectionHandle == null) {\n\ndiff --git a/terminal-view/src/main/java/com/termux/view/TerminalViewClient.java b/terminal-view/src/main/java/com/termux/view/TerminalViewClient.java\n--- a/terminal-view/src/main/java/com/termux/view/TerminalViewClient.java\n+++ b/terminal-view/src/main/java/com/termux/view/TerminalViewClient.java\n@@ -8,11 +8,10 @@\n \n /**\n  * Input and scale listener which may be set on a {@link TerminalView} through\n- * {@link TerminalView#setOnKeyListener(TerminalKeyListener)}.\n+ * {@link TerminalView#setOnKeyListener(TerminalViewClient)}.\n  * <p/>\n- * TODO: Rename to TerminalViewClient.\n  */\n-public interface TerminalKeyListener {\n+public interface TerminalViewClient {\n \n     /**\n      * Callback function on scale events according to {@link ScaleGestureDetector#getScaleFactor()}.",
    "output": "Rename TerminalKeyListener to TerminalViewClient"
  },
  {
    "input": "diff --git a/view/src/main/java/com/termux/view/TerminalView.java b/view/src/main/java/com/termux/view/TerminalView.java\n--- a/view/src/main/java/com/termux/view/TerminalView.java\n+++ b/view/src/main/java/com/termux/view/TerminalView.java\n@@ -188,8 +188,9 @@ public boolean onDoubleTap(MotionEvent e) {\n \n             @Override\n             public void onLongPress(MotionEvent e) {\n+                if (mGestureRecognizer.isInProgress()) return;\n                 if (mOnKeyListener.onLongPress(e)) return;\n-                if (!mGestureRecognizer.isInProgress() && !mIsSelectingText) {\n+                if (!mIsSelectingText) {\n                     performHapticFeedback(HapticFeedbackConstants.LONG_PRESS);\n                     toggleSelectingText(e);\n                 }",
    "output": "Do not call long press listener when scaling"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxOpenReceiver.java b/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n--- a/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n+++ b/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n@@ -29,23 +29,10 @@ public void onReceive(Context context, Intent intent) {\n             return;\n         }\n \n-        final boolean isExternalUrl = data.getScheme() != null && !data.getScheme().equals(\"file\");\n-        if (isExternalUrl) {\n-            Intent viewIntent = new Intent(Intent.ACTION_VIEW, data);\n-            viewIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n-            try {\n-                context.startActivity(viewIntent);\n-            } catch (ActivityNotFoundException e) {\n-                Log.e(EmulatorDebug.LOG_TAG, \"termux-open: No app handles the url \" + data);\n-            }\n-            return;\n-        }\n-\n         final String filePath = data.getPath();\n         final String contentTypeExtra = intent.getStringExtra(\"content-type\");\n         final boolean useChooser = intent.getBooleanExtra(\"chooser\", false);\n         final String intentAction = intent.getAction() == null ? Intent.ACTION_VIEW : intent.getAction();\n-\n         switch (intentAction) {\n             case Intent.ACTION_SEND:\n             case Intent.ACTION_VIEW:\n@@ -56,6 +43,24 @@ public void onReceive(Context context, Intent intent) {\n                 break;\n         }\n \n+        final boolean isExternalUrl = data.getScheme() != null && !data.getScheme().equals(\"file\");\n+        if (isExternalUrl) {\n+            Intent urlIntent = new Intent(intentAction, data);\n+            if (intentAction.equals(Intent.ACTION_SEND)) {\n+                urlIntent.putExtra(Intent.EXTRA_TEXT, data.toString());\n+                urlIntent.setData(null);\n+            } else if (contentTypeExtra != null) {\n+                urlIntent.setDataAndType(data, contentTypeExtra);\n+            }\n+            urlIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n+            try {\n+                context.startActivity(urlIntent);\n+            } catch (ActivityNotFoundException e) {\n+                Log.e(EmulatorDebug.LOG_TAG, \"termux-open: No app handles the url \" + data);\n+            }\n+            return;\n+        }\n+\n         final File fileToShare = new File(filePath);\n         if (!(fileToShare.isFile() && fileToShare.canRead())) {\n             Log.e(EmulatorDebug.LOG_TAG, \"termux-open: Not a readable file: '\" + fileToShare.getAbsolutePath() + \"'\");",
    "output": "Respect content type termux-open for url:s"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -174,7 +174,7 @@ public void onCreate() {\n     }\n \n     /** Update the shown foreground service notification after making any changes that affect it. */\n-    private void updateNotification() {\n+    void updateNotification() {\n         if (mWakeLock == null && mTerminalSessions.isEmpty() && mBackgroundTasks.isEmpty()) {\n             // Exit if we are updating after the user disabled all locks with no sessions or tasks running.\n             stopSelf();",
    "output": "Avoid synthetic accessor method"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxOpenReceiver.java b/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n--- a/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n+++ b/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n@@ -10,6 +10,7 @@\n import android.net.Uri;\n import android.os.ParcelFileDescriptor;\n import android.provider.MediaStore;\n+import android.support.annotation.NonNull;\n import android.util.Log;\n import android.webkit.MimeTypeMap;\n \n@@ -106,7 +107,7 @@ public boolean onCreate() {\n         }\n \n         @Override\n-        public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {\n+        public Cursor query(@NonNull Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {\n             File file = new File(uri.getPath());\n \n             if (projection == null) {\n@@ -143,27 +144,27 @@ public Cursor query(Uri uri, String[] projection, String selection, String[] sel\n         }\n \n         @Override\n-        public String getType(Uri uri) {\n+        public String getType(@NonNull Uri uri) {\n             return null;\n         }\n \n         @Override\n-        public Uri insert(Uri uri, ContentValues values) {\n+        public Uri insert(@NonNull Uri uri, ContentValues values) {\n             return null;\n         }\n \n         @Override\n-        public int delete(Uri uri, String selection, String[] selectionArgs) {\n+        public int delete(@NonNull Uri uri, String selection, String[] selectionArgs) {\n             return 0;\n         }\n \n         @Override\n-        public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) {\n+        public int update(@NonNull Uri uri, ContentValues values, String selection, String[] selectionArgs) {\n             return 0;\n         }\n \n         @Override\n-        public ParcelFileDescriptor openFile(Uri uri, String mode) throws FileNotFoundException {\n+        public ParcelFileDescriptor openFile(@NonNull Uri uri, @NonNull String mode) throws FileNotFoundException {\n             File file = new File(uri.getPath());\n             return ParcelFileDescriptor.open(file, ParcelFileDescriptor.MODE_READ_ONLY);\n         }",
    "output": "Fix some android studio lint warnings"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/BackgroundJob.java b/app/src/main/java/com/termux/app/BackgroundJob.java\n--- a/app/src/main/java/com/termux/app/BackgroundJob.java\n+++ b/app/src/main/java/com/termux/app/BackgroundJob.java\n@@ -158,7 +158,6 @@ static String[] setupProcessArgs(String fileToExecute, String[] args) {\n                             if (c == ' ' || c == '\\n') {\n                                 if (builder.length() == 0) {\n                                     // Skip whitespace after shebang.\n-                                    continue;\n                                 } else {\n                                     // End of shebang.\n                                     String executable = builder.toString();",
    "output": "Remove useless continue statement"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -49,8 +49,6 @@\n import android.view.View.OnLongClickListener;\n import android.view.ViewGroup;\n import android.view.WindowManager;\n-import android.view.animation.Animation;\n-import android.view.animation.AnimationUtils;\n import android.view.inputmethod.InputMethodManager;\n import android.widget.AdapterView;\n import android.widget.AdapterView.OnItemClickListener;\n\ndiff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -104,7 +104,8 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n                 mWakeLock = pm.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, EmulatorDebug.LOG_TAG);\n                 mWakeLock.acquire();\n \n-                WifiManager wm = (WifiManager) getSystemService(Context.WIFI_SERVICE);\n+                // http://tools.android.com/tech-docs/lint-in-studio-2-3#TOC-WifiManager-Leak\n+                WifiManager wm = (WifiManager) getApplicationContext().getSystemService(Context.WIFI_SERVICE);\n                 mWifiLock = wm.createWifiLock(WifiManager.WIFI_MODE_FULL_HIGH_PERF, EmulatorDebug.LOG_TAG);\n                 mWifiLock.acquire();\n \n\ndiff --git a/app/src/main/java/com/termux/terminal/TerminalEmulator.java b/app/src/main/java/com/termux/terminal/TerminalEmulator.java\n--- a/app/src/main/java/com/termux/terminal/TerminalEmulator.java\n+++ b/app/src/main/java/com/termux/terminal/TerminalEmulator.java\n@@ -56,8 +56,6 @@ public final class TerminalEmulator {\n     private static final int ESC_SELECT_LEFT_PAREN = 3;\n     /** Escape processing: Have seen ESC and a character-set-select ) char */\n     private static final int ESC_SELECT_RIGHT_PAREN = 4;\n-    /** Escape processing: Have seen ESC and a character-set-select + char */\n-    // private static final int ESC_SELECT_PLUS = 5;\n     /** Escape processing: \"ESC [\" or CSI (Control Sequence Introducer). */\n     private static final int ESC_CSI = 6;\n     /** Escape processing: ESC [ ? */",
    "output": "Work around Android < 7.0 wifi manager leak\n\nhttp://tools.android.com/tech-docs/lint-in-studio-2-3#TOC-WifiManager-Leak"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxOpenReceiver.java b/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n--- a/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n+++ b/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n@@ -31,6 +31,7 @@ public void onReceive(Context context, Intent intent) {\n         final boolean isExternalUrl = data.getScheme() != null && !data.getScheme().equals(\"file\");\n         if (isExternalUrl) {\n             Intent viewIntent = new Intent(Intent.ACTION_VIEW, data);\n+            viewIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n             try {\n                 context.startActivity(viewIntent);\n             } catch (ActivityNotFoundException e) {",
    "output": "Fix crash when opening URL:s in Android < 7.0\n\nIn versions of Android earlier than 7.0 the FLAG_ACTIVITY_NEW_TASK\nis needed when starting an activity from a non-activity context.\n\nThis was removed in Android 7.0 (possibly by mistake), see\nhttps://code.google.com/p/android/issues/detail?id=226647.\n\nFixes #802"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -250,7 +250,9 @@ public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {\n                             TerminalSession session = getCurrentTermSession();\n                             if (session != null) {\n                                 if (session.isRunning()) {\n-                                    session.write(editText.getText().toString() + \"\\n\");\n+                                    String textToSend = editText.getText().toString();\n+                                    if (textToSend.length() == 0) textToSend = \"\\n\";\n+                                    session.write(textToSend);\n                                 } else {\n                                     removeFinishedSession(session);\n                                 }",
    "output": "Extended keyboard: allow inline input\n\nFf the buffer is empty, send a newline, otherwise send the content of\nthe buffer with the newline stripped. This way <Enter><Enter> means\n\"insert the buffer content and send a newline\", while a single <Enter>\nmeans just \"insert the buffer content\". Fixes #261."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxOpenReceiver.java b/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n--- a/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n+++ b/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n@@ -42,26 +42,16 @@ public void onReceive(Context context, Intent intent) {\n         final String filePath = data.getPath();\n         final String contentTypeExtra = intent.getStringExtra(\"content-type\");\n         final boolean useChooser = intent.getBooleanExtra(\"chooser\", false);\n-        final String actionExtra = intent.getAction();\n-\n-        String intentAction = null;\n-        if (actionExtra == null) {\n-            intentAction = Intent.ACTION_VIEW;\n-        } else {\n-            switch (actionExtra) {\n-                case \"edit\":\n-                    intentAction = Intent.ACTION_EDIT;\n-                    break;\n-                case \"send\":\n-                    intentAction = Intent.ACTION_SEND;\n-                    break;\n-                case \"view\":\n-                    intentAction = Intent.ACTION_VIEW;\n-                    break;\n-                default:\n-                    Log.e(EmulatorDebug.LOG_TAG, \"Invalid action '\" + actionExtra + \"', using 'view'\");\n-                    break;\n-            }\n+        final String intentAction = intent.getAction() == null ? Intent.ACTION_VIEW : intent.getAction();\n+\n+        switch (intentAction) {\n+            case Intent.ACTION_SEND:\n+            case Intent.ACTION_VIEW:\n+                // Ok.\n+                break;\n+            default:\n+                Log.e(EmulatorDebug.LOG_TAG, \"Invalid action '\" + intentAction + \"', using 'view'\");\n+                break;\n         }\n \n         final File fileToShare = new File(filePath);\n@@ -72,7 +62,6 @@ public void onReceive(Context context, Intent intent) {\n \n         Intent sendIntent = new Intent();\n         sendIntent.setAction(intentAction);\n-        Uri uriToShare = Uri.withAppendedPath(Uri.parse(\"content://com.termux.files/\"), filePath);\n         sendIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_GRANT_READ_URI_PERMISSION);\n \n         String contentTypeToUse;\n@@ -88,7 +77,7 @@ public void onReceive(Context context, Intent intent) {\n             contentTypeToUse = contentTypeExtra;\n         }\n \n-        sendIntent.putExtra(Intent.EXTRA_SUBJECT, fileToShare.getName());\n+        Uri uriToShare = Uri.withAppendedPath(Uri.parse(\"content://com.termux.files/\"), filePath);\n \n         if (Intent.ACTION_SEND.equals(intentAction)) {\n             sendIntent.putExtra(Intent.EXTRA_STREAM, uriToShare);\n@@ -101,7 +90,11 @@ public void onReceive(Context context, Intent intent) {\n             sendIntent = Intent.createChooser(sendIntent, null).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n         }\n \n-        context.startActivity(sendIntent);\n+        try {\n+            context.startActivity(sendIntent);\n+        } catch (ActivityNotFoundException e) {\n+            Log.e(EmulatorDebug.LOG_TAG, \"termux-open: No app handles the url \" + data);\n+        }\n     }\n \n     public static class ContentProvider extends android.content.ContentProvider {\n@@ -114,7 +107,6 @@ public boolean onCreate() {\n         @Override\n         public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {\n             File file = new File(uri.getPath());\n-            String fileName = file.getName();\n \n             if (projection == null) {\n                 projection = new String[]{",
    "output": "Use standard actions"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -24,7 +24,6 @@\n import com.termux.terminal.TerminalSession.SessionChangedCallback;\n \n import java.io.File;\n-import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n \n@@ -257,28 +256,11 @@ TerminalSession createTermSession(String executablePath, String[] arguments, Str\n         boolean isLoginShell = false;\n \n         if (executablePath == null) {\n-            File shell = new File(HOME_PATH, \".termux/shell\");\n-            if (shell.exists()) {\n-                try {\n-                    File canonicalFile = shell.getCanonicalFile();\n-                    if (canonicalFile.isFile() && canonicalFile.canExecute()) {\n-                        executablePath = canonicalFile.getName().equals(\"busybox\") ? (PREFIX_PATH + \"/bin/ash\") : canonicalFile.getAbsolutePath();\n-                    } else {\n-                        Log.w(EmulatorDebug.LOG_TAG, \"$HOME/.termux/shell points to non-executable shell: \" + canonicalFile.getAbsolutePath());\n-                    }\n-                } catch (IOException e) {\n-                    Log.e(EmulatorDebug.LOG_TAG, \"Error checking $HOME/.termux/shell\", e);\n-                }\n-            }\n-\n-            if (executablePath == null) {\n-                // Try bash, zsh and ash in that order:\n-                for (String shellBinary : new String[]{\"bash\", \"zsh\", \"ash\"}) {\n-                    File shellFile = new File(PREFIX_PATH + \"/bin/\" + shellBinary);\n-                    if (shellFile.canExecute()) {\n-                        executablePath = shellFile.getAbsolutePath();\n-                        break;\n-                    }\n+            for (String shellBinary : new String[]{\"login\", \"bash\", \"zsh\"}) {\n+                File shellFile = new File(PREFIX_PATH + \"/bin/\" + shellBinary);\n+                if (shellFile.canExecute()) {\n+                    executablePath = shellFile.getAbsolutePath();\n+                    break;\n                 }\n             }\n ",
    "output": "Launch $PREFIX/bin/login by default\n\nThe login command takes care of both showing the etc/motd and\nlaunching the login shell."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxOpenReceiver.java b/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n--- a/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n+++ b/app/src/main/java/com/termux/app/TermuxOpenReceiver.java\n@@ -0,0 +1,179 @@\n+package com.termux.app;\n+\n+import android.content.ActivityNotFoundException;\n+import android.content.BroadcastReceiver;\n+import android.content.ContentValues;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.database.Cursor;\n+import android.database.MatrixCursor;\n+import android.net.Uri;\n+import android.os.ParcelFileDescriptor;\n+import android.provider.MediaStore;\n+import android.util.Log;\n+import android.webkit.MimeTypeMap;\n+\n+import com.termux.terminal.EmulatorDebug;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+\n+public class TermuxOpenReceiver extends BroadcastReceiver {\n+\n+    @Override\n+    public void onReceive(Context context, Intent intent) {\n+        final Uri data = intent.getData();\n+        if (data == null) {\n+            Log.e(EmulatorDebug.LOG_TAG, \"termux-open: Called without intent data\");\n+            return;\n+        }\n+\n+        final boolean isExternalUrl = data.getScheme() != null && !data.getScheme().equals(\"file\");\n+        if (isExternalUrl) {\n+            Intent viewIntent = new Intent(Intent.ACTION_VIEW, data);\n+            try {\n+                context.startActivity(viewIntent);\n+            } catch (ActivityNotFoundException e) {\n+                Log.e(EmulatorDebug.LOG_TAG, \"termux-open: No app handles the url \" + data);\n+            }\n+            return;\n+        }\n+\n+        final String filePath = data.getPath();\n+        final String contentTypeExtra = intent.getStringExtra(\"content-type\");\n+        final boolean useChooser = intent.getBooleanExtra(\"chooser\", false);\n+        final String actionExtra = intent.getAction();\n+\n+        String intentAction = null;\n+        if (actionExtra == null) {\n+            intentAction = Intent.ACTION_VIEW;\n+        } else {\n+            switch (actionExtra) {\n+                case \"edit\":\n+                    intentAction = Intent.ACTION_EDIT;\n+                    break;\n+                case \"send\":\n+                    intentAction = Intent.ACTION_SEND;\n+                    break;\n+                case \"view\":\n+                    intentAction = Intent.ACTION_VIEW;\n+                    break;\n+                default:\n+                    Log.e(EmulatorDebug.LOG_TAG, \"Invalid action '\" + actionExtra + \"', using 'view'\");\n+                    break;\n+            }\n+        }\n+\n+        final File fileToShare = new File(filePath);\n+        if (!(fileToShare.isFile() && fileToShare.canRead())) {\n+            Log.e(EmulatorDebug.LOG_TAG, \"termux-open: Not a readable file: '\" + fileToShare.getAbsolutePath() + \"'\");\n+            return;\n+        }\n+\n+        Intent sendIntent = new Intent();\n+        sendIntent.setAction(intentAction);\n+        Uri uriToShare = Uri.withAppendedPath(Uri.parse(\"content://com.termux.files/\"), filePath);\n+        sendIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_GRANT_READ_URI_PERMISSION);\n+\n+        String contentTypeToUse;\n+        if (contentTypeExtra == null) {\n+            String fileName = fileToShare.getName();\n+            int lastDotIndex = fileName.lastIndexOf('.');\n+            String fileExtension = fileName.substring(lastDotIndex + 1, fileName.length());\n+            MimeTypeMap mimeTypes = MimeTypeMap.getSingleton();\n+            // Lower casing makes it work with e.g. \"JPG\":\n+            contentTypeToUse = mimeTypes.getMimeTypeFromExtension(fileExtension.toLowerCase());\n+            if (contentTypeToUse == null) contentTypeToUse = \"application/octet-stream\";\n+        } else {\n+            contentTypeToUse = contentTypeExtra;\n+        }\n+\n+        sendIntent.putExtra(Intent.EXTRA_SUBJECT, fileToShare.getName());\n+\n+        if (Intent.ACTION_SEND.equals(intentAction)) {\n+            sendIntent.putExtra(Intent.EXTRA_STREAM, uriToShare);\n+            sendIntent.setType(contentTypeToUse);\n+        } else {\n+            sendIntent.setDataAndType(uriToShare, contentTypeToUse);\n+        }\n+\n+        if (useChooser) {\n+            sendIntent = Intent.createChooser(sendIntent, null).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n+        }\n+\n+        context.startActivity(sendIntent);\n+    }\n+\n+    public static class ContentProvider extends android.content.ContentProvider {\n+\n+        @Override\n+        public boolean onCreate() {\n+            return true;\n+        }\n+\n+        @Override\n+        public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {\n+            File file = new File(uri.getPath());\n+            String fileName = file.getName();\n+\n+            if (projection == null) {\n+                projection = new String[]{\n+                    MediaStore.MediaColumns.DISPLAY_NAME,\n+                    MediaStore.MediaColumns.SIZE,\n+                    MediaStore.MediaColumns._ID\n+                };\n+            }\n+\n+            Object[] row = new Object[projection.length];\n+            for (int i = 0; i < projection.length; i++) {\n+                String column = projection[i];\n+                Object value;\n+                switch (column) {\n+                    case MediaStore.MediaColumns.DISPLAY_NAME:\n+                        value = file.getName();\n+                        break;\n+                    case MediaStore.MediaColumns.SIZE:\n+                        value = (int) file.length();\n+                        break;\n+                    case MediaStore.MediaColumns._ID:\n+                        value = 1;\n+                        break;\n+                    default:\n+                        value = null;\n+                }\n+                row[i] = value;\n+            }\n+\n+            MatrixCursor cursor = new MatrixCursor(projection);\n+            cursor.addRow(row);\n+            return cursor;\n+        }\n+\n+        @Override\n+        public String getType(Uri uri) {\n+            return null;\n+        }\n+\n+        @Override\n+        public Uri insert(Uri uri, ContentValues values) {\n+            return null;\n+        }\n+\n+        @Override\n+        public int delete(Uri uri, String selection, String[] selectionArgs) {\n+            return 0;\n+        }\n+\n+        @Override\n+        public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) {\n+            return 0;\n+        }\n+\n+        @Override\n+        public ParcelFileDescriptor openFile(Uri uri, String mode) throws FileNotFoundException {\n+            File file = new File(uri.getPath());\n+            return ParcelFileDescriptor.open(file, ParcelFileDescriptor.MODE_READ_ONLY);\n+        }\n+    }\n+\n+}",
    "output": "Add built-in broadcast receiver to open files"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -494,17 +494,6 @@ public boolean onItemLongClick(AdapterView<?> parent, View view, final int posit\n                     public void run() {\n                         if (mTermService == null) return; // Activity might have been destroyed.\n                         try {\n-                            if (TermuxPreferences.isShowWelcomeDialog(TermuxActivity.this)) {\n-                                new AlertDialog.Builder(TermuxActivity.this).setTitle(R.string.welcome_dialog_title).setMessage(R.string.welcome_dialog_body)\n-                                    .setCancelable(false).setPositiveButton(android.R.string.ok, null)\n-                                    .setNegativeButton(R.string.welcome_dialog_dont_show_again_button, new DialogInterface.OnClickListener() {\n-                                        @Override\n-                                        public void onClick(DialogInterface dialog, int which) {\n-                                            TermuxPreferences.disableWelcomeDialog(TermuxActivity.this);\n-                                            dialog.dismiss();\n-                                        }\n-                                    }).show();\n-                            }\n                             addNewSession(false, null);\n                         } catch (WindowManager.BadTokenException e) {\n                             // Activity finished - ignore.\n\ndiff --git a/app/src/main/java/com/termux/app/TermuxPreferences.java b/app/src/main/java/com/termux/app/TermuxPreferences.java\n--- a/app/src/main/java/com/termux/app/TermuxPreferences.java\n+++ b/app/src/main/java/com/termux/app/TermuxPreferences.java\n@@ -36,7 +36,6 @@ final class TermuxPreferences {\n     private static final String SHOW_EXTRA_KEYS_KEY = \"show_extra_keys\";\n     private static final String FONTSIZE_KEY = \"fontsize\";\n     private static final String CURRENT_SESSION_KEY = \"current_session\";\n-    private static final String SHOW_WELCOME_DIALOG_KEY = \"intro_dialog\";\n \n     private boolean mFullScreen;\n     private int mFontSize;\n@@ -117,14 +116,6 @@ static TerminalSession getCurrentSession(TermuxActivity context) {\n         return null;\n     }\n \n-    public static boolean isShowWelcomeDialog(Context context) {\n-        return PreferenceManager.getDefaultSharedPreferences(context).getBoolean(SHOW_WELCOME_DIALOG_KEY, true);\n-    }\n-\n-    public static void disableWelcomeDialog(Context context) {\n-        PreferenceManager.getDefaultSharedPreferences(context).edit().putBoolean(SHOW_WELCOME_DIALOG_KEY, false).apply();\n-    }\n-\n     public void reloadFromProperties(Context context) {\n         try {\n             File propsFile = new File(TermuxService.HOME_PATH + \"/.termux/termux.properties\");",
    "output": "Remove the welcome dialog\n\nInstead of a modal dialog to be dismissed without any way to recall\nit, the initial information will be shown in the terminal itself."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -14,6 +14,7 @@\n import android.os.Handler;\n import android.os.IBinder;\n import android.os.PowerManager;\n+import android.support.v4.content.WakefulBroadcastReceiver;\n import android.util.Log;\n import android.widget.ArrayAdapter;\n \n@@ -152,6 +153,11 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n             Log.e(EmulatorDebug.LOG_TAG, \"Unknown TermuxService action: '\" + action + \"'\");\n         }\n \n+        if ((flags & START_FLAG_REDELIVERY) == 0) {\n+            // Service is started by WBR, not restarted by system, so release the WakeLock from WBR.\n+            WakefulBroadcastReceiver.completeWakefulIntent(intent);\n+        }\n+\n         // If this service really do get killed, there is no point restarting it automatically - let the user do on next\n         // start of {@link Term):\n         return Service.START_NOT_STICKY;",
    "output": "Call completeWakefulIntent() in Termux service"
  },
  {
    "input": "diff --git a/app/src/test/java/com/termux/terminal/WcWidthTest.java b/app/src/test/java/com/termux/terminal/WcWidthTest.java\n--- a/app/src/test/java/com/termux/terminal/WcWidthTest.java\n+++ b/app/src/test/java/com/termux/terminal/WcWidthTest.java\n@@ -19,6 +19,7 @@ public void testSomeWidthOne() {\n         assertWidthIs(1, 'å');\n         assertWidthIs(1, 'ä');\n         assertWidthIs(1, 'ö');\n+        assertWidthIs(1, 0x23F2);\n     }\n \n \tpublic void testSomeWide() {\n@@ -45,6 +46,7 @@ public void testSomeNonWide() {\n \tpublic void testCombining() {\n         assertWidthIs(0, 0x0302);\n         assertWidthIs(0, 0x0308);\n+        assertWidthIs(0, 0xFE0F);\n     }\n \n     public void testWordJoiner() {",
    "output": "Test wcwidth on two more code points"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/terminal/TerminalSession.java b/app/src/main/java/com/termux/terminal/TerminalSession.java\n--- a/app/src/main/java/com/termux/terminal/TerminalSession.java\n+++ b/app/src/main/java/com/termux/terminal/TerminalSession.java\n@@ -123,12 +123,12 @@ public void handleMessage(Message msg) {\n                 String exitDescription = \"\\r\\n[Process completed\";\n                 if (exitCode > 0) {\n                     // Non-zero process exit.\n-                    exitDescription += \" with code \" + exitCode;\n+                    exitDescription += \" (code \" + exitCode + \")\";\n                 } else if (exitCode < 0) {\n                     // Negated signal.\n-                    exitDescription += \" with signal \" + (-exitCode);\n+                    exitDescription += \" (signal \" + (-exitCode) + \")\";\n                 }\n-                exitDescription += \" - press Enter to close]\";\n+                exitDescription += \" - press Enter]\";\n \n                 byte[] bytesToWrite = exitDescription.getBytes(StandardCharsets.UTF_8);\n                 mEmulator.append(bytesToWrite, bytesToWrite.length);",
    "output": "Try with a bit shorter process completed messages"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -141,8 +141,6 @@ public final class TermuxActivity extends Activity implements ServiceConnection\n             .setUsage(AudioAttributes.USAGE_ASSISTANCE_SONIFICATION).build()).build();\n     int mBellSoundId;\n \n-    Animation mOnBellAnimation;\n-\n     private final BroadcastReceiver mBroadcastReceiever = new BroadcastReceiver() {\n         @Override\n         public void onReceive(Context context, Intent intent) {\n@@ -213,8 +211,6 @@ public boolean ensureStoragePermissionGranted() {\n     public void onCreate(Bundle bundle) {\n         super.onCreate(bundle);\n \n-        mOnBellAnimation = AnimationUtils.loadAnimation(this, R.anim.on_bell);\n-\n         mSettings = new TermuxPreferences(this);\n \n         setContentView(R.layout.drawer_layout);\n@@ -410,8 +406,6 @@ public void onClipboardText(TerminalSession session, String text) {\n             public void onBell(TerminalSession session) {\n                 if (!mIsVisible) return;\n \n-                mTerminalView.startAnimation(mOnBellAnimation);\n-\n                 switch (mSettings.mBellBehaviour) {\n                     case TermuxPreferences.BELL_BEEP:\n                         mBellSoundPool.play(mBellSoundId, 1.f, 1.f, 1, 0, 1.f);",
    "output": "Remove the bell shake animation\n\nFixes https://github.com/termux/termux-packages/issues/628\nFixes https://github.com/termux/termux-app/issues/222"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/view/TerminalView.java b/app/src/main/java/com/termux/view/TerminalView.java\n--- a/app/src/main/java/com/termux/view/TerminalView.java\n+++ b/app/src/main/java/com/termux/view/TerminalView.java\n@@ -238,9 +238,9 @@ public InputConnection onCreateInputConnection(EditorInfo outAttrs) {\n         // https://github.com/termux/termux-app/issues/137 (japanese chars and TYPE_NULL).\n         outAttrs.inputType = InputType.TYPE_NULL;\n \n-        outAttrs.imeOptions |= EditorInfo.IME_FLAG_NO_FULLSCREEN |\n-                               EditorInfo.IME_FLAG_NO_ENTER_ACTION |\n-                               EditorInfo.IME_ACTION_NONE;\n+        // Note that IME_ACTION_NONE cannot be used as that makes it impossible to input newlines using the on-screen\n+        // keyboard on Android TV (see https://github.com/termux/termux-app/issues/221).\n+        outAttrs.imeOptions = EditorInfo.IME_FLAG_NO_FULLSCREEN;\n \n         return new BaseInputConnection(this, true) {\n ",
    "output": "Do not use IME_ACTION_NONE in the inputconnection\n\nUsing IME_ACTION_NONE prevents enter key to be used with the stock\nAndroid TV keyboard.\n\nFixes #221."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/view/TerminalView.java b/app/src/main/java/com/termux/view/TerminalView.java\n--- a/app/src/main/java/com/termux/view/TerminalView.java\n+++ b/app/src/main/java/com/termux/view/TerminalView.java\n@@ -298,6 +298,14 @@ void sendTextToTerminal(CharSequence text) {\n \n                     boolean ctrlHeld = false;\n                     if (codePoint <= 31 && codePoint != 27) {\n+                        if (codePoint == '\\n') {\n+                            // The AOSP keyboard and descendants seems to send \\n as text when the enter key is pressed,\n+                            // instead of a key event like most other keyboard apps. A terminal expects \\r for the enter\n+                            // key (although when icrnl is enabled this doesn't make a difference - run 'stty -icrnl' to\n+                            // check the behaviour).\n+                            codePoint = '\\r';\n+                        }\n+\n                         // E.g. penti keyboard for ctrl input.\n                         ctrlHeld = true;\n                         switch (codePoint) {",
    "output": "Translate \\n to \\r when receiving text from an IME\n\nFixes issue with fzf and return using the stock cyanogenmod\nkeyboard reported by @mklein994 on gitter."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/BackgroundJob.java b/app/src/main/java/com/termux/app/BackgroundJob.java\n--- a/app/src/main/java/com/termux/app/BackgroundJob.java\n+++ b/app/src/main/java/com/termux/app/BackgroundJob.java\n@@ -12,6 +12,7 @@\n import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Collections;\n import java.util.List;\n \n /**\n@@ -105,7 +106,6 @@ public static String[] buildEnvironment(boolean failSafe, String cwd) {\n         // EXTERNAL_STORAGE is needed for /system/bin/am to work on at least\n         // Samsung S7 - see https://plus.google.com/110070148244138185604/posts/gp8Lk3aCGp3.\n         final String externalStorageEnv = \"EXTERNAL_STORAGE=\" + System.getenv(\"EXTERNAL_STORAGE\");\n-        String[] env;\n         if (failSafe) {\n             // Keep the default path so that system binaries can be used in the failsafe session.\n             final String pathEnv = \"PATH=\" + System.getenv(\"PATH\");\n@@ -186,9 +186,7 @@ static String[] setupProcessArgs(String fileToExecute, String[] args) {\n         List<String> result = new ArrayList<>();\n         if (interpreter != null) result.add(interpreter);\n         result.add(fileToExecute);\n-        if (args != null) {\n-            for (String arg : args) result.add(arg);\n-        }\n+        if (args != null) Collections.addAll(result, args);\n         return result.toArray(new String[result.size()]);\n     }\n ",
    "output": "Remove unused variable. Use Collections.addAll()"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -523,7 +523,7 @@ public void onClick(DialogInterface dialog, int which) {\n             }\n         } else {\n             Intent i = getIntent();\n-            if (i != null && i.getAction().equals(Intent.ACTION_RUN)) {\n+            if (i != null && Intent.ACTION_RUN.equals(i.getAction())) {\n                 // Android 7.1 app shortcut from res/xml/shortcuts.xml.\n                 addNewSession(false, null);\n             } else {",
    "output": "Fix NPE regression in version 0.44"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -522,7 +522,13 @@ public void onClick(DialogInterface dialog, int which) {\n                 finish();\n             }\n         } else {\n-            switchToSession(getStoredCurrentSessionOrLast());\n+            Intent i = getIntent();\n+            if (i != null && i.getAction().equals(Intent.ACTION_RUN)) {\n+                // Android 7.1 app shortcut from res/xml/shortcuts.xml.\n+                addNewSession(false, null);\n+            } else {\n+                switchToSession(getStoredCurrentSessionOrLast());\n+            }\n         }\n     }\n ",
    "output": "Add Android 7.1 launcher shortcut for new session"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -58,6 +58,7 @@ public final class TermuxService extends Service implements SessionChangedCallba\n     public static final String EXTRA_ARGUMENTS = \"com.termux.execute.arguments\";\n \n     public static final String EXTRA_CURRENT_WORKING_DIRECTORY = \"com.termux.execute.cwd\";\n+    private static final String EXTRA_EXECUTE_IN_BACKGROUND = \"com.termux.execute.background\";\n \n     /** This service is only bound from inside the same process and never uses IPC. */\n     class LocalBinder extends Binder {\n@@ -126,7 +127,7 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n             String[] arguments = (executableUri == null ? null : intent.getStringArrayExtra(EXTRA_ARGUMENTS));\n             String cwd = intent.getStringExtra(EXTRA_CURRENT_WORKING_DIRECTORY);\n \n-            if (intent.getBooleanExtra(\"com.termux.execute.background\", false)) {\n+            if (intent.getBooleanExtra(EXTRA_EXECUTE_IN_BACKGROUND, false)) {\n                 BackgroundJob task = new BackgroundJob(cwd, executablePath, arguments, this);\n                 mBackgroundTasks.add(task);\n                 updateNotification();",
    "output": "Use constant for intent extra key"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/filepicker/TermuxDocumentsProvider.java b/app/src/main/java/com/termux/filepicker/TermuxDocumentsProvider.java\n--- a/app/src/main/java/com/termux/filepicker/TermuxDocumentsProvider.java\n+++ b/app/src/main/java/com/termux/filepicker/TermuxDocumentsProvider.java\n@@ -75,7 +75,7 @@ public Cursor queryRoots(String[] projection) throws FileNotFoundException {\n         row.add(Root.COLUMN_TITLE, applicationName);\n         row.add(Root.COLUMN_MIME_TYPES, ALL_MIME_TYPES);\n         row.add(Root.COLUMN_AVAILABLE_BYTES, BASE_DIR.getFreeSpace());\n-        row.add(Root.COLUMN_ICON, R.drawable.ic_launcher);\n+        row.add(Root.COLUMN_ICON, R.mipmap.ic_launcher);\n         return result;\n     }\n \n@@ -236,7 +236,7 @@ private void includeFile(MatrixCursor result, String docId, File file)\n         row.add(Document.COLUMN_MIME_TYPE, mimeType);\n         row.add(Document.COLUMN_LAST_MODIFIED, file.lastModified());\n         row.add(Document.COLUMN_FLAGS, flags);\n-        row.add(Document.COLUMN_ICON, R.drawable.ic_launcher);\n+        row.add(Document.COLUMN_ICON, R.mipmap.ic_launcher);\n     }\n \n }",
    "output": "Give up on using vector drawables for launch icons\n\nInstead use svg files in art/ and a script to build the png files."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -106,7 +106,6 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n                 WifiManager wm = (WifiManager) getSystemService(Context.WIFI_SERVICE);\n                 mWifiLock = wm.createWifiLock(WifiManager.WIFI_MODE_FULL_HIGH_PERF, EmulatorDebug.LOG_TAG);\n                 mWifiLock.acquire();\n-                updateNotification();\n \n                 updateNotification();\n             }\n@@ -117,18 +116,19 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n \n                 mWifiLock.release();\n                 mWifiLock = null;\n-                updateNotification();\n \n                 updateNotification();\n             }\n         } else if (ACTION_EXECUTE.equals(action)) {\n             Uri executableUri = intent.getData();\n             String executablePath = (executableUri == null ? null : executableUri.getPath());\n+\n             String[] arguments = (executableUri == null ? null : intent.getStringArrayExtra(EXTRA_ARGUMENTS));\n             String cwd = intent.getStringExtra(EXTRA_CURRENT_WORKING_DIRECTORY);\n \n             if (intent.getBooleanExtra(\"com.termux.execute.background\", false)) {\n-                mBackgroundTasks.add(new BackgroundJob(cwd, executablePath, arguments, this));\n+                BackgroundJob task = new BackgroundJob(cwd, executablePath, arguments, this);\n+                mBackgroundTasks.add(task);\n                 updateNotification();\n             } else {\n                 TerminalSession newSession = createTermSession(executablePath, arguments, cwd, false);",
    "output": "Remove duplicate updateNotification() calls"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/view/TerminalView.java b/app/src/main/java/com/termux/view/TerminalView.java\n--- a/app/src/main/java/com/termux/view/TerminalView.java\n+++ b/app/src/main/java/com/termux/view/TerminalView.java\n@@ -238,8 +238,9 @@ public InputConnection onCreateInputConnection(EditorInfo outAttrs) {\n         // https://github.com/termux/termux-app/issues/137 (japanese chars and TYPE_NULL).\n         outAttrs.inputType = InputType.TYPE_NULL;\n \n-        // Let part of the application show behind when in landscape:\n-        outAttrs.imeOptions |= EditorInfo.IME_FLAG_NO_FULLSCREEN;\n+        outAttrs.imeOptions |= EditorInfo.IME_FLAG_NO_FULLSCREEN |\n+                               EditorInfo.IME_FLAG_NO_ENTER_ACTION |\n+                               EditorInfo.IME_ACTION_NONE;\n \n         return new BaseInputConnection(this, true) {\n ",
    "output": "Add flags to imeOptions\n\nAdd IME_FLAG_NO_ENTER_ACTION and IME_ACTION_NONE. I haven't\nencountered any issue without them, but specifying them is correct."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/terminal/TerminalColorScheme.java b/app/src/main/java/com/termux/terminal/TerminalColorScheme.java\n--- a/app/src/main/java/com/termux/terminal/TerminalColorScheme.java\n+++ b/app/src/main/java/com/termux/terminal/TerminalColorScheme.java\n@@ -57,7 +57,7 @@ public final class TerminalColorScheme {\n         0xff808080, 0xff8a8a8a, 0xff949494, 0xff9e9e9e, 0xffa8a8a8, 0xffb2b2b2, 0xffbcbcbc, 0xffc6c6c6, 0xffd0d0d0, 0xffdadada, 0xffe4e4e4, 0xffeeeeee,\n \n         // COLOR_INDEX_DEFAULT_FOREGROUND, COLOR_INDEX_DEFAULT_BACKGROUND and COLOR_INDEX_DEFAULT_CURSOR:\n-        0xffffffff, 0xff000000, 0xffffffff};\n+        0xffffffff, 0xff000000, 0xffA9AAA9};\n \n     public final int[] mDefaultColors = new int[TextStyle.NUM_INDEXED_COLORS];\n \n\ndiff --git a/app/src/main/java/com/termux/view/TerminalRenderer.java b/app/src/main/java/com/termux/view/TerminalRenderer.java\n--- a/app/src/main/java/com/termux/view/TerminalRenderer.java\n+++ b/app/src/main/java/com/termux/view/TerminalRenderer.java\n@@ -54,7 +54,8 @@ public TerminalRenderer(int textSize, Typeface typeface) {\n     }\n \n     /** Render the terminal to a canvas with at a specified row scroll, and an optional rectangular selection. */\n-    public final void render(TerminalEmulator mEmulator, Canvas canvas, int topRow, int selectionY1, int selectionY2, int selectionX1, int selectionX2) {\n+    public final void render(TerminalEmulator mEmulator, Canvas canvas, int topRow,\n+                             int selectionY1, int selectionY2, int selectionX1, int selectionX2) {\n         final boolean reverseVideo = mEmulator.isReverseVideo();\n         final int endRow = topRow + mEmulator.mRows;\n         final int columns = mEmulator.mColumns;\n@@ -63,6 +64,7 @@ public final void render(TerminalEmulator mEmulator, Canvas canvas, int topRow,\n         final boolean cursorVisible = mEmulator.isShowingCursor();\n         final TerminalBuffer screen = mEmulator.getScreen();\n         final int[] palette = mEmulator.mColors.mCurrentColors;\n+        final int cursorShape = mEmulator.getCursorStyle();\n \n         if (reverseVideo)\n             canvas.drawColor(palette[TextStyle.COLOR_INDEX_FOREGROUND], PorterDuff.Mode.SRC);\n@@ -113,8 +115,10 @@ public final void render(TerminalEmulator mEmulator, Canvas canvas, int topRow,\n                     } else {\n                         final int columnWidthSinceLastRun = column - lastRunStartColumn;\n                         final int charsSinceLastRun = currentCharIndex - lastRunStartIndex;\n-                        drawTextRun(canvas, line, palette, heightOffset, lastRunStartColumn, columnWidthSinceLastRun, lastRunStartIndex, charsSinceLastRun,\n-                            measuredWidthForRun, lastRunInsideCursor, lastRunStyle, reverseVideo);\n+                        int cursorColor = lastRunInsideCursor ? mEmulator.mColors.mCurrentColors[TextStyle.COLOR_INDEX_CURSOR] : 0;\n+                        drawTextRun(canvas, line, palette, heightOffset, lastRunStartColumn, columnWidthSinceLastRun,\n+                            lastRunStartIndex, charsSinceLastRun, measuredWidthForRun,\n+                            cursorColor, cursorShape, lastRunStyle, reverseVideo);\n                     }\n                     measuredWidthForRun = 0.f;\n                     lastRunStyle = style;\n@@ -135,37 +139,42 @@ public final void render(TerminalEmulator mEmulator, Canvas canvas, int topRow,\n \n             final int columnWidthSinceLastRun = columns - lastRunStartColumn;\n             final int charsSinceLastRun = currentCharIndex - lastRunStartIndex;\n+            int cursorColor = lastRunInsideCursor ? mEmulator.mColors.mCurrentColors[TextStyle.COLOR_INDEX_CURSOR] : 0;\n             drawTextRun(canvas, line, palette, heightOffset, lastRunStartColumn, columnWidthSinceLastRun, lastRunStartIndex, charsSinceLastRun,\n-                measuredWidthForRun, lastRunInsideCursor, lastRunStyle, reverseVideo);\n+                measuredWidthForRun, cursorColor, cursorShape, lastRunStyle, reverseVideo);\n         }\n     }\n \n-    /**\n-     * @param canvas          the canvas to render on\n-     * @param palette         the color palette to look up colors from textStyle\n-     * @param y               height offset into the canvas where to render the line: line * {@link #mFontLineSpacing}\n-     * @param startColumn     the run offset in columns\n-     * @param runWidthColumns the run width in columns - this is computed from wcwidth() and may not be what the font measures to\n-     * @param text            the java char array to render text from\n-     * @param startCharIndex  index into the text array where to start\n-     * @param runWidthChars   number of java characters from the text array to render\n-     * @param cursor          true if rendering a cursor or selection\n-     * @param textStyle       the background, foreground and effect encoded using {@link TextStyle}\n-     * @param reverseVideo    if the screen is rendered with the global reverse video flag set\n-     */\n-    private void drawTextRun(Canvas canvas, char[] text, int[] palette, float y, int startColumn, int runWidthColumns, int startCharIndex, int runWidthChars,\n-                             float mes, boolean cursor, long textStyle, boolean reverseVideo) {\n+    private void drawTextRun(Canvas canvas, char[] text, int[] palette, float y, int startColumn, int runWidthColumns,\n+                             int startCharIndex, int runWidthChars, float mes, int cursor, int cursorStyle,\n+                             long textStyle, boolean reverseVideo) {\n         int foreColor = TextStyle.decodeForeColor(textStyle);\n+        final int effect = TextStyle.decodeEffect(textStyle);\n         int backColor = TextStyle.decodeBackColor(textStyle);\n+        final boolean bold = (effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n+        final boolean underline = (effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n+        final boolean italic = (effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n+        final boolean strikeThrough = (effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n+        final boolean dim = (effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n \n-        int foreColorIndex = -1;\n         if ((foreColor & 0xff000000) != 0xff000000) {\n-            foreColorIndex = foreColor;\n+            // Let bold have bright colors if applicable (one of the first 8):\n+            if (bold && foreColor >= 0 && foreColor < 8) foreColor += 8;\n             foreColor = palette[foreColor];\n         }\n-        if ((backColor & 0xff000000) != 0xff000000) backColor = palette[backColor];\n \n-        final int effect = TextStyle.decodeEffect(textStyle);\n+        if ((backColor & 0xff000000) != 0xff000000) {\n+            backColor = palette[backColor];\n+        }\n+\n+        // Reverse video here if _one and only one_ of the reverse flags are set:\n+        final boolean reverseVideoHere = reverseVideo ^ (effect & (TextStyle.CHARACTER_ATTRIBUTE_INVERSE)) != 0;\n+        if (reverseVideoHere) {\n+            int tmp = foreColor;\n+            foreColor = backColor;\n+            backColor = tmp;\n+        }\n+\n         float left = startColumn * mFontWidth;\n         float right = left + runWidthColumns * mFontWidth;\n \n@@ -179,32 +188,21 @@ private void drawTextRun(Canvas canvas, char[] text, int[] palette, float y, int\n             savedMatrix = true;\n         }\n \n-        // Reverse video here if _one and only one_ of the reverse flags are set:\n-        boolean reverseVideoHere = reverseVideo ^ (effect & (TextStyle.CHARACTER_ATTRIBUTE_INVERSE)) != 0;\n-        // Switch if _one and only one_ of reverse video and cursor is set:\n-        if (reverseVideoHere ^ cursor) {\n-            int tmp = foreColor;\n-            foreColor = backColor;\n-            backColor = tmp;\n-        }\n-\n         if (backColor != palette[TextStyle.COLOR_INDEX_BACKGROUND]) {\n             // Only draw non-default background.\n             mTextPaint.setColor(backColor);\n             canvas.drawRect(left, y - mFontLineSpacingAndAscent + mFontAscent, right, y, mTextPaint);\n         }\n \n-        if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n-            // Treat blink as bold:\n-            final boolean bold = (effect & (TextStyle.CHARACTER_ATTRIBUTE_BOLD | TextStyle.CHARACTER_ATTRIBUTE_BLINK)) != 0;\n-            final boolean underline = (effect & TextStyle.CHARACTER_ATTRIBUTE_UNDERLINE) != 0;\n-            final boolean italic = (effect & TextStyle.CHARACTER_ATTRIBUTE_ITALIC) != 0;\n-            final boolean strikeThrough = (effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n-            final boolean dim = (effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n-\n-            // Let bold have bright colors if applicable (one of the first 8):\n-            if (bold && foreColorIndex >= 0 && foreColorIndex < 8) foreColor = palette[foreColorIndex + 8];\n+        if (cursor != 0) {\n+            mTextPaint.setColor(cursor);\n+            float cursorHeight = mFontLineSpacingAndAscent - mFontAscent;\n+            if (cursorStyle == TerminalEmulator.CURSOR_STYLE_UNDERLINE) cursorHeight /= 4.;\n+            else if (cursorStyle == TerminalEmulator.CURSOR_STYLE_BAR) right -= ((right - left) * 3) / 4.;\n+            canvas.drawRect(left, y - cursorHeight, right, y, mTextPaint);\n+        }\n \n+        if ((effect & TextStyle.CHARACTER_ATTRIBUTE_INVISIBLE) == 0) {\n             if (dim) {\n                 int red = (0xFF & (foreColor >> 16));\n                 int green = (0xFF & (foreColor >> 8));",
    "output": "Render cursor color&shapes (underline and ibeam)\n\nAllow the cursor to be colored by the theme, and support rendering\nunderline and ibeam cursor styles."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxInstaller.java b/app/src/main/java/com/termux/app/TermuxInstaller.java\n--- a/app/src/main/java/com/termux/app/TermuxInstaller.java\n+++ b/app/src/main/java/com/termux/app/TermuxInstaller.java\n@@ -257,9 +257,13 @@ public void run() {\n                     Os.symlink(moviesDir.getAbsolutePath(), new File(storageDir, \"movies\").getAbsolutePath());\n \n                     final File[] dirs = context.getExternalFilesDirs(null);\n-                    if (dirs != null && dirs.length >= 2) {\n-                        final File externalDir = dirs[1];\n-                        Os.symlink(externalDir.getAbsolutePath(), new File(storageDir, \"external\").getAbsolutePath());\n+                    if (dirs != null && dirs.length > 1) {\n+                        for (int i = 1; i < dirs.length; i++) {\n+                            File dir = dirs[i];\n+                            if (dir == null) continue;\n+                            String symlinkName = \"external-\" + i;\n+                            Os.symlink(dir.getAbsolutePath(), new File(storageDir, symlinkName).getAbsolutePath());\n+                        }\n                     }\n                 } catch (Exception e) {\n                     Log.e(LOG_TAG, \"Error setting up link\", e);",
    "output": "Improve setup of symlinks to external storage\n\nThe context.getExternalFilesDirs(null) call may return several\nelements, and some of them may be null."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/view/TerminalView.java b/app/src/main/java/com/termux/view/TerminalView.java\n--- a/app/src/main/java/com/termux/view/TerminalView.java\n+++ b/app/src/main/java/com/termux/view/TerminalView.java\n@@ -270,16 +270,15 @@ public boolean commitText(CharSequence text, int newCursorPosition) {\n \n             @Override\n             public boolean deleteSurroundingText(int leftLength, int rightLength) {\n-                if (LOG_KEY_EVENTS)\n+                if (LOG_KEY_EVENTS) {\n                     Log.i(EmulatorDebug.LOG_TAG, \"IME: deleteSurroundingText(\" + leftLength + \", \" + rightLength + \")\");\n-                // If leftLength=2 it may be due to a UTF-16 surrogate pair. So we cannot send\n-                // multiple key events for that. Let's just hope that keyboards don't use\n-                // leftLength > 1 for other purposes (such as holding down backspace for repeat).\n-                sendKeyEvent(new KeyEvent(KeyEvent.ACTION_DOWN, KeyEvent.KEYCODE_DEL));\n+                }\n+                // The stock Samsung keyboard with 'Auto check spelling' enabled sends leftLength > 1.\n+                KeyEvent deleteKey = new KeyEvent(KeyEvent.ACTION_DOWN, KeyEvent.KEYCODE_DEL);\n+                for (int i = 0; i < leftLength; i++) sendKeyEvent(deleteKey);\n                 return super.deleteSurroundingText(leftLength, rightLength);\n             }\n \n-\n             void sendTextToTerminal(CharSequence text) {\n                 final int textLengthInChars = text.length();\n                 for (int i = 0; i < textLengthInChars; i++) {",
    "output": "Try to handle Samsung keyboard better\n\nThe stock Samsung keyboard with 'Auto check spelling' enabled may\nsend multiple backspaces. Note that this auto-correction of\nspelling will not work good in general with a terminal, so should\nbe disabled (or another keyboard used) when using Termux."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -242,8 +242,8 @@ TerminalSession createTermSession(String executablePath, String[] arguments, Str\n         if (cwd == null) cwd = HOME_PATH;\n \n         String[] env = BackgroundJob.buildEnvironment(failSafe, cwd);\n+        boolean isLoginShell = false;\n \n-        String shellName;\n         if (executablePath == null) {\n             File shell = new File(HOME_PATH, \".termux/shell\");\n             if (shell.exists()) {\n@@ -274,23 +274,18 @@ TerminalSession createTermSession(String executablePath, String[] arguments, Str\n                 // Fall back to system shell as last resort:\n                 executablePath = \"/system/bin/sh\";\n             }\n-\n-            String[] parts = executablePath.split(\"/\");\n-            shellName = \"-\" + parts[parts.length - 1];\n-        } else {\n-            int lastSlashIndex = executablePath.lastIndexOf('/');\n-            shellName = lastSlashIndex == -1 ? executablePath : executablePath.substring(lastSlashIndex + 1);\n+            isLoginShell = true;\n         }\n \n-        String[] args;\n-        if (arguments == null) {\n-            args = new String[]{shellName};\n-        } else {\n-            args = new String[arguments.length + 1];\n-            args[0] = shellName;\n+        String[] processArgs = BackgroundJob.setupProcessArgs(executablePath, arguments);\n+        executablePath = processArgs[0];\n+        int lastSlashIndex = executablePath.lastIndexOf('/');\n+        String processName = (isLoginShell ? \"-\" : \"\") +\n+            (lastSlashIndex == -1 ? executablePath : executablePath.substring(lastSlashIndex + 1));\n \n-            System.arraycopy(arguments, 0, args, 1, arguments.length);\n-        }\n+        String[] args = new String[processArgs.length];\n+        args[0] = processName;\n+        if (processArgs.length > 1) System.arraycopy(processArgs, 1, args, 1, processArgs.length - 1);\n \n         TerminalSession session = new TerminalSession(executablePath, cwd, args, env, this);\n         mTerminalSessions.add(session);",
    "output": "Use BackgroundJob.setupProcessArgs for sessions"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/BackgroundJob.java b/app/src/main/java/com/termux/app/BackgroundJob.java\n--- a/app/src/main/java/com/termux/app/BackgroundJob.java\n+++ b/app/src/main/java/com/termux/app/BackgroundJob.java\n@@ -4,12 +4,15 @@\n \n import java.io.BufferedReader;\n import java.io.File;\n+import java.io.FileInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.InputStreamReader;\n import java.lang.reflect.Field;\n import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.List;\n \n /**\n  * A background job launched by Termux.\n@@ -24,16 +27,7 @@ public BackgroundJob(String cwd, String fileToExecute, final String[] args) {\n         String[] env = buildEnvironment(false, cwd);\n         if (cwd == null) cwd = TermuxService.HOME_PATH;\n \n-        String[] modifiedArgs;\n-        if (args == null) {\n-            modifiedArgs = new String[]{fileToExecute};\n-        } else {\n-            modifiedArgs = new String[args.length + 1];\n-            modifiedArgs[0] = fileToExecute;\n-            System.arraycopy(args, 0, modifiedArgs, 1, args.length);\n-        }\n-        final String[] progArray = modifiedArgs;\n-\n+        final String[] progArray = setupProcessArgs(fileToExecute, args);\n         final String processDescription = Arrays.toString(progArray);\n \n         Process process;\n@@ -45,6 +39,7 @@ public BackgroundJob(String cwd, String fileToExecute, final String[] args) {\n             Log.e(LOG_TAG, \"Failed running background job: \" + processDescription, e);\n             return;\n         }\n+\n         mProcess = process;\n         final int pid = getPid(mProcess);\n \n@@ -126,17 +121,74 @@ public static String[] buildEnvironment(boolean failSafe, String cwd) {\n     }\n \n     public static int getPid(Process p) {\n-        int pid = -1;\n-\n         try {\n             Field f = p.getClass().getDeclaredField(\"pid\");\n             f.setAccessible(true);\n-            pid = f.getInt(p);\n-            f.setAccessible(false);\n+            try {\n+                return f.getInt(p);\n+            } finally {\n+                f.setAccessible(false);\n+            }\n         } catch (Throwable e) {\n-            pid = -1;\n+            return -1;\n+        }\n+    }\n+\n+    static String[] setupProcessArgs(String fileToExecute, String[] args) {\n+        // The file to execute may either be:\n+        // - An elf file, in which we execute it directly.\n+        // - A script file without shebang, which we execute with our standard shell $PREFIX/bin/sh instead of the\n+        //   system /system/bin/sh. The system shell may vary and may not work at all due to LD_LIBRARY_PATH.\n+        // - A file with shebang, which we try to handle with e.g. /bin/foo -> $PREFIX/bin/foo.\n+        String interpreter = null;\n+        try {\n+            File file = new File(fileToExecute);\n+            try (FileInputStream in = new FileInputStream(file)) {\n+                byte[] buffer = new byte[256];\n+                int bytesRead = in.read(buffer);\n+                if (bytesRead > 4) {\n+                    if (buffer[0] == 0x7F && buffer[1] == 'E' && buffer[2] == 'L' && buffer[3] == 'F') {\n+                        // Elf file, do nothing.\n+                    } else if (buffer[0] == '#' && buffer[1] == '!') {\n+                        // Try to parse shebang.\n+                        StringBuilder builder = new StringBuilder();\n+                        for (int i = 2; i < bytesRead; i++) {\n+                            char c = (char) buffer[i];\n+                            if (c == ' ' || c == '\\n') {\n+                                if (builder.length() == 0) {\n+                                    // Skip whitespace after shebang.\n+                                    continue;\n+                                } else {\n+                                    // End of shebang.\n+                                    String executable = builder.toString();\n+                                    if (executable.startsWith(\"/usr\") || executable.startsWith(\"/bin\")) {\n+                                        String[] parts = executable.split(\"/\");\n+                                        String binary = parts[parts.length - 1];\n+                                        interpreter = TermuxService.PREFIX_PATH + \"/bin/\" + binary;\n+                                    }\n+                                    break;\n+                                }\n+                            } else {\n+                                builder.append(c);\n+                            }\n+                        }\n+                    } else {\n+                        // No shebang and no ELF, use standard shell.\n+                        interpreter = TermuxService.PREFIX_PATH + \"/bin/sh\";\n+                    }\n+                }\n+            }\n+        } catch (IOException e) {\n+            // Ignore.\n+        }\n+\n+        List<String> result = new ArrayList<>();\n+        if (interpreter != null) result.add(interpreter);\n+        result.add(fileToExecute);\n+        if (args != null) {\n+            for (String arg : args) result.add(arg);\n         }\n-        return pid;\n+        return result.toArray(new String[result.size()]);\n     }\n \n }",
    "output": "Use $PREFIX/bin/sh for script file without shebang\n\nAlso try to handle #!(/usr)/bin/foo shebangs."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -49,6 +49,8 @@\n import android.view.View.OnLongClickListener;\n import android.view.ViewGroup;\n import android.view.WindowManager;\n+import android.view.animation.Animation;\n+import android.view.animation.AnimationUtils;\n import android.view.inputmethod.InputMethodManager;\n import android.widget.AdapterView;\n import android.widget.AdapterView.OnItemClickListener;\n@@ -139,6 +141,8 @@ public final class TermuxActivity extends Activity implements ServiceConnection\n             .setUsage(AudioAttributes.USAGE_ASSISTANCE_SONIFICATION).build()).build();\n     int mBellSoundId;\n \n+    Animation mOnBellAnimation;\n+\n     private final BroadcastReceiver mBroadcastReceiever = new BroadcastReceiver() {\n         @Override\n         public void onReceive(Context context, Intent intent) {\n@@ -209,6 +213,8 @@ public boolean ensureStoragePermissionGranted() {\n     public void onCreate(Bundle bundle) {\n         super.onCreate(bundle);\n \n+        mOnBellAnimation = AnimationUtils.loadAnimation(this, R.anim.on_bell);\n+\n         mSettings = new TermuxPreferences(this);\n \n         setContentView(R.layout.drawer_layout);\n@@ -402,20 +408,22 @@ public void onClipboardText(TerminalSession session, String text) {\n \n             @Override\n             public void onBell(TerminalSession session) {\n-                if (mIsVisible) {\n-                    switch (mSettings.mBellBehaviour) {\n-                        case TermuxPreferences.BELL_BEEP:\n-                            mBellSoundPool.play(mBellSoundId, 1.f, 1.f, 1, 0, 1.f);\n-                            break;\n-                        case TermuxPreferences.BELL_VIBRATE:\n-                            ((Vibrator) getSystemService(VIBRATOR_SERVICE)).vibrate(50);\n-                            break;\n-                        case TermuxPreferences.BELL_IGNORE:\n-                            // Ignore the bell character.\n-                            break;\n-                    }\n+                if (!mIsVisible) return;\n \n+                mTerminalView.startAnimation(mOnBellAnimation);\n+\n+                switch (mSettings.mBellBehaviour) {\n+                    case TermuxPreferences.BELL_BEEP:\n+                        mBellSoundPool.play(mBellSoundId, 1.f, 1.f, 1, 0, 1.f);\n+                        break;\n+                    case TermuxPreferences.BELL_VIBRATE:\n+                        ((Vibrator) getSystemService(VIBRATOR_SERVICE)).vibrate(50);\n+                        break;\n+                    case TermuxPreferences.BELL_IGNORE:\n+                        // Ignore the bell character.\n+                        break;\n                 }\n+\n             }\n \n             @Override",
    "output": "Add a shake animation on a terminal bell"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/BackgroundJob.java b/app/src/main/java/com/termux/app/BackgroundJob.java\n--- a/app/src/main/java/com/termux/app/BackgroundJob.java\n+++ b/app/src/main/java/com/termux/app/BackgroundJob.java\n@@ -7,55 +7,71 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.InputStreamReader;\n+import java.lang.reflect.Field;\n import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n \n /**\n  * A background job launched by Termux.\n  */\n public final class BackgroundJob {\n \n-    private static final String LOG_TAG = \"termux-background\";\n+    private static final String LOG_TAG = \"termux-job\";\n \n     final Process mProcess;\n \n-    public BackgroundJob(File cwd, File fileToExecute, String[] args) throws IOException {\n-        String[] env = buildEnvironment(false, cwd.getAbsolutePath());\n-\n-        String[] progArray = new String[args.length + 1];\n-\n-        mProcess = Runtime.getRuntime().exec(progArray, env, cwd);\n+    public BackgroundJob(String cwd, String fileToExecute, final String[] args) {\n+        String[] env = buildEnvironment(false, cwd);\n+        if (cwd == null) cwd = TermuxService.HOME_PATH;\n \n-        new Thread() {\n-            @Override\n-            public void run() {\n-                while (true) {\n-                    try {\n-                        int exitCode = mProcess.waitFor();\n-                        if (exitCode == 0) {\n-                            Log.i(LOG_TAG, \"exited normally\");\n-                            return;\n-                        } else {\n-                            Log.i(LOG_TAG, \"exited with exit code: \" + exitCode);\n-                        }\n-                    } catch (InterruptedException e) {\n-                        // Ignore.\n-                    }\n-                }\n-            }\n-        }.start();\n+        String[] modifiedArgs;\n+        if (args == null) {\n+            modifiedArgs = new String[]{fileToExecute};\n+        } else {\n+            modifiedArgs = new String[args.length + 1];\n+            modifiedArgs[0] = fileToExecute;\n+            System.arraycopy(args, 0, modifiedArgs, 1, args.length);\n+        }\n+        final String[] progArray = modifiedArgs;\n+\n+        final String processDescription = Arrays.toString(progArray);\n+\n+        Process process;\n+        try {\n+            process = Runtime.getRuntime().exec(progArray, env, new File(cwd));\n+        } catch (IOException e) {\n+            mProcess = null;\n+            // TODO: Visible error message?\n+            Log.e(LOG_TAG, \"Failed running background job: \" + processDescription, e);\n+            return;\n+        }\n+        mProcess = process;\n+        final int pid = getPid(mProcess);\n \n         new Thread() {\n             @Override\n             public void run() {\n+                Log.i(LOG_TAG, \"[\" + pid + \"] starting: \" + processDescription);\n                 InputStream stdout = mProcess.getInputStream();\n                 BufferedReader reader = new BufferedReader(new InputStreamReader(stdout, StandardCharsets.UTF_8));\n                 String line;\n                 try {\n                     // FIXME: Long lines.\n                     while ((line = reader.readLine()) != null) {\n-                        Log.i(LOG_TAG, line);\n+                        Log.i(LOG_TAG, \"[\" + pid + \"] stdout: \" + line);\n                     }\n                 } catch (IOException e) {\n+                    Log.e(LOG_TAG, \"Error reading output\", e);\n+                }\n+\n+                try {\n+                    int exitCode = mProcess.waitFor();\n+                    if (exitCode == 0) {\n+                        Log.i(LOG_TAG, \"[\" + pid + \"] exited normally\");\n+                    } else {\n+                        Log.w(LOG_TAG, \"[\" + pid + \"] exited with code: \" + exitCode);\n+                    }\n+                } catch (InterruptedException e) {\n                     // Ignore.\n                 }\n             }\n@@ -71,7 +87,7 @@ public void run() {\n                 try {\n                     // FIXME: Long lines.\n                     while ((line = reader.readLine()) != null) {\n-                        Log.e(LOG_TAG, line);\n+                        Log.i(LOG_TAG, \"[\" + pid + \"] stderr: \" + line);\n                     }\n                 } catch (IOException e) {\n                     // Ignore.\n@@ -80,7 +96,7 @@ public void run() {\n         };\n     }\n \n-    public String[] buildEnvironment(boolean failSafe, String cwd) {\n+    public static String[] buildEnvironment(boolean failSafe, String cwd) {\n         new File(TermuxService.HOME_PATH).mkdirs();\n \n         if (cwd == null) cwd = TermuxService.HOME_PATH;\n@@ -109,4 +125,18 @@ public String[] buildEnvironment(boolean failSafe, String cwd) {\n         }\n     }\n \n+    public static int getPid(Process p) {\n+        int pid = -1;\n+\n+        try {\n+            Field f = p.getClass().getDeclaredField(\"pid\");\n+            f.setAccessible(true);\n+            pid = f.getInt(p);\n+            f.setAccessible(false);\n+        } catch (Throwable e) {\n+            pid = -1;\n+        }\n+        return pid;\n+    }\n+\n }\n\ndiff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -119,21 +119,26 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n             String executablePath = (executableUri == null ? null : executableUri.getPath());\n             String[] arguments = (executableUri == null ? null : intent.getStringArrayExtra(EXTRA_ARGUMENTS));\n             String cwd = intent.getStringExtra(EXTRA_CURRENT_WORKING_DIRECTORY);\n-            TerminalSession newSession = createTermSession(executablePath, arguments, cwd, false);\n-\n-            // Transform executable path to session name, e.g. \"/bin/do-something.sh\" => \"do something.sh\".\n-            if (executablePath != null) {\n-                int lastSlash = executablePath.lastIndexOf('/');\n-                String name = (lastSlash == -1) ? executablePath : executablePath.substring(lastSlash + 1);\n-                name = name.replace('-', ' ');\n-                newSession.mSessionName = name;\n-            }\n \n-            // Make the newly created session the current one to be displayed:\n-            TermuxPreferences.storeCurrentSession(this, newSession);\n+            if (intent.getBooleanExtra(\"com.termux.execute.background\", false)) {\n+                new BackgroundJob(cwd, executablePath, arguments);\n+            } else {\n+                TerminalSession newSession = createTermSession(executablePath, arguments, cwd, false);\n+\n+                // Transform executable path to session name, e.g. \"/bin/do-something.sh\" => \"do something.sh\".\n+                if (executablePath != null) {\n+                    int lastSlash = executablePath.lastIndexOf('/');\n+                    String name = (lastSlash == -1) ? executablePath : executablePath.substring(lastSlash + 1);\n+                    name = name.replace('-', ' ');\n+                    newSession.mSessionName = name;\n+                }\n+\n+                // Make the newly created session the current one to be displayed:\n+                TermuxPreferences.storeCurrentSession(this, newSession);\n \n-            // Launch the main Termux app, which will now show to current session:\n-            startActivity(new Intent(this, TermuxActivity.class).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK));\n+                // Launch the main Termux app, which will now show to current session:\n+                startActivity(new Intent(this, TermuxActivity.class).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK));\n+            }\n         } else if (action != null) {\n             Log.e(EmulatorDebug.LOG_TAG, \"Unknown TermuxService action: '\" + action + \"'\");\n         }\n@@ -236,28 +241,7 @@ TerminalSession createTermSession(String executablePath, String[] arguments, Str\n \n         if (cwd == null) cwd = HOME_PATH;\n \n-        final String termEnv = \"TERM=xterm-256color\";\n-        final String homeEnv = \"HOME=\" + HOME_PATH;\n-        final String prefixEnv = \"PREFIX=\" + PREFIX_PATH;\n-        final String androidRootEnv = \"ANDROID_ROOT=\" + System.getenv(\"ANDROID_ROOT\");\n-        final String androidDataEnv = \"ANDROID_DATA=\" + System.getenv(\"ANDROID_DATA\");\n-        // EXTERNAL_STORAGE is needed for /system/bin/am to work on at least\n-        // Samsung S7 - see https://plus.google.com/110070148244138185604/posts/gp8Lk3aCGp3.\n-        final String externalStorageEnv = \"EXTERNAL_STORAGE=\" + System.getenv(\"EXTERNAL_STORAGE\");\n-        String[] env;\n-        if (failSafe) {\n-            // Keep the default path so that system binaries can be used in the failsafe session.\n-            final String pathEnv = \"PATH=\" + System.getenv(\"PATH\");\n-            env = new String[]{termEnv, homeEnv, prefixEnv, androidRootEnv, androidDataEnv, pathEnv, externalStorageEnv};\n-        } else {\n-            final String ps1Env = \"PS1=$ \";\n-            final String ldEnv = \"LD_LIBRARY_PATH=\" + PREFIX_PATH + \"/lib\";\n-            final String langEnv = \"LANG=en_US.UTF-8\";\n-            final String pathEnv = \"PATH=\" + PREFIX_PATH + \"/bin:\" + PREFIX_PATH + \"/bin/applets\";\n-            final String pwdEnv = \"PWD=\" + cwd;\n-\n-            env = new String[]{termEnv, homeEnv, prefixEnv, ps1Env, ldEnv, langEnv, pathEnv, pwdEnv, androidRootEnv, androidDataEnv, externalStorageEnv};\n-        }\n+        String[] env = BackgroundJob.buildEnvironment(failSafe, cwd);\n \n         String shellName;\n         if (executablePath == null) {",
    "output": "Start work on background jobs"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxPreferences.java b/app/src/main/java/com/termux/app/TermuxPreferences.java\n--- a/app/src/main/java/com/termux/app/TermuxPreferences.java\n+++ b/app/src/main/java/com/termux/app/TermuxPreferences.java\n@@ -105,7 +105,7 @@ void changeFontSize(Context context, boolean increase) {\n     }\n \n     static void storeCurrentSession(Context context, TerminalSession session) {\n-        PreferenceManager.getDefaultSharedPreferences(context).edit().putString(TermuxPreferences.CURRENT_SESSION_KEY, session.mHandle).commit();\n+        PreferenceManager.getDefaultSharedPreferences(context).edit().putString(TermuxPreferences.CURRENT_SESSION_KEY, session.mHandle).apply();\n     }\n \n     static TerminalSession getCurrentSession(TermuxActivity context) {",
    "output": "Switch a commit() to apply() for shared prefs"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/terminal/TerminalEmulator.java b/app/src/main/java/com/termux/terminal/TerminalEmulator.java\n--- a/app/src/main/java/com/termux/terminal/TerminalEmulator.java\n+++ b/app/src/main/java/com/termux/terminal/TerminalEmulator.java\n@@ -722,7 +722,6 @@ public void processCodePoint(int b) {\n                         }\n                         break;\n                     case ESC_PERCENT:\n-                        Log.i(EmulatorDebug.LOG_TAG, \"Ignoring character set sequence 'ESC % \" + (char) b + \"'\");\n                         break;\n                     case ESC_OSC:\n                         doOsc(b);",
    "output": "Remove logging at info level"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -431,7 +431,7 @@ public void onColorsChanged(TerminalSession changedSession) {\n \n             @NonNull\n             @Override\n-            public View getView(int position, View convertView, ViewGroup parent) {\n+            public View getView(int position, View convertView, @NonNull ViewGroup parent) {\n                 View row = convertView;\n                 if (row == null) {\n                     LayoutInflater inflater = getLayoutInflater();",
    "output": "Add @NonNull annotation"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -429,6 +429,7 @@ public void onColorsChanged(TerminalSession changedSession) {\n             final StyleSpan boldSpan = new StyleSpan(Typeface.BOLD);\n             final StyleSpan italicSpan = new StyleSpan(Typeface.ITALIC);\n \n+            @NonNull\n             @Override\n             public View getView(int position, View convertView, ViewGroup parent) {\n                 View row = convertView;\n@@ -534,6 +535,7 @@ void renameSession(final TerminalSession sessionToRename) {\n             @Override\n             public void onTextSet(String text) {\n                 sessionToRename.mSessionName = text;\n+                mListViewAdapter.notifyDataSetChanged();\n             }\n         }, -1, null, -1, null, null);\n     }",
    "output": "Refresh listview after changing session name"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/terminal/TextStyle.java b/app/src/main/java/com/termux/terminal/TextStyle.java\n--- a/app/src/main/java/com/termux/terminal/TextStyle.java\n+++ b/app/src/main/java/com/termux/terminal/TextStyle.java\n@@ -46,17 +46,17 @@ static long encode(int foreColor, int backColor, int effect) {\n         long result = effect & 0b111111111;\n         if ((0xff000000 & foreColor) == 0xff000000) {\n             // 24-bit color.\n-            result |= CHARACTER_ATTRIBUTE_TRUECOLOR_FOREGROUND | (((long) foreColor & 0x00ffffffL) << 40L);\n+            result |= CHARACTER_ATTRIBUTE_TRUECOLOR_FOREGROUND | ((foreColor & 0x00ffffffL) << 40L);\n         } else {\n             // Indexed color.\n-            result |= (((long) foreColor) & 0b111111111L) << 40;\n+            result |= (foreColor & 0b111111111L) << 40;\n         }\n         if ((0xff000000 & backColor) == 0xff000000) {\n             // 24-bit color.\n-            result |= CHARACTER_ATTRIBUTE_TRUECOLOR_BACKGROUND | (((long) backColor & 0x00ffffffL) << 16L);\n+            result |= CHARACTER_ATTRIBUTE_TRUECOLOR_BACKGROUND | ((backColor & 0x00ffffffL) << 16L);\n         } else {\n             // Indexed color.\n-            result |= (((long) backColor) & 0b111111111L) << 16L;\n+            result |= (backColor & 0b111111111L) << 16L;\n         }\n \n         return result;",
    "output": "Remove useless casts"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxKeyListener.java b/app/src/main/java/com/termux/app/TermuxKeyListener.java\n--- a/app/src/main/java/com/termux/app/TermuxKeyListener.java\n+++ b/app/src/main/java/com/termux/app/TermuxKeyListener.java\n@@ -160,7 +160,7 @@ public boolean onCodePoint(final int codePoint, boolean ctrlDown, TerminalSessio\n                     resultingKeyCode = KeyEvent.KEYCODE_INSERT;\n                     break;\n                 case 'h':\n-                    resultingKeyCode = KeyEvent.KEYCODE_MOVE_HOME;\n+                    resultingCodePoint = '~';\n                     break;\n \n                 // Special characters to input.",
    "output": "Change VolumeUp+H to generate ~\n\nUsing VolumeUp+H to generate a tilde (~) is more useful than\nsending the home key.\n\nFixes #151."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxKeyListener.java b/app/src/main/java/com/termux/app/TermuxKeyListener.java\n--- a/app/src/main/java/com/termux/app/TermuxKeyListener.java\n+++ b/app/src/main/java/com/termux/app/TermuxKeyListener.java\n@@ -61,7 +61,7 @@ public boolean onKeyDown(int keyCode, KeyEvent e, TerminalSession currentSession\n         if (keyCode == KeyEvent.KEYCODE_ENTER && !currentSession.isRunning()) {\n             mActivity.removeFinishedSession(currentSession);\n             return true;\n-        } else if (e.isCtrlPressed() && e.isShiftPressed()) {\n+        } else if (e.isCtrlPressed() && e.isAltPressed()) {\n             // Get the unmodified code point:\n             int unicodeChar = e.getUnicodeChar(0);\n ",
    "output": "Change shortcuts from Ctrl+Shift to Ctrl+Alt\n\nThis works on more language layouts and devices.\n\nFixes #145."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/terminal/KeyHandler.java b/app/src/main/java/com/termux/terminal/KeyHandler.java\n--- a/app/src/main/java/com/termux/terminal/KeyHandler.java\n+++ b/app/src/main/java/com/termux/terminal/KeyHandler.java\n@@ -219,9 +219,6 @@ public static String getCode(int keyCode, int keyMode, boolean cursorApp, boolea\n             case KEYCODE_FORWARD_DEL:\n                 return transformForModifiers(\"\\033[3\", keyMode, '~');\n \n-            case KEYCODE_NUMPAD_DOT:\n-                return keypadApplication ? \"\\033On\" : \"\\033[3~\";\n-\n             case KEYCODE_PAGE_UP:\n                 return \"\\033[5~\";\n             case KEYCODE_PAGE_DOWN:\n@@ -251,12 +248,14 @@ public static String getCode(int keyCode, int keyMode, boolean cursorApp, boolea\n                 return keypadApplication ? transformForModifiers(\"\\033O\", keyMode, 'k') : \"+\";\n             case KEYCODE_NUMPAD_COMMA:\n                 return \",\";\n+            case KEYCODE_NUMPAD_DOT:\n+                return keypadApplication ? \"\\033On\" : \".\";\n             case KEYCODE_NUMPAD_SUBTRACT:\n                 return keypadApplication ? transformForModifiers(\"\\033O\", keyMode, 'm') : \"-\";\n             case KEYCODE_NUMPAD_DIVIDE:\n                 return keypadApplication ? transformForModifiers(\"\\033O\", keyMode, 'o') : \"/\";\n             case KEYCODE_NUMPAD_0:\n-                return keypadApplication ? transformForModifiers(\"\\033O\", keyMode, 'p') : \"1\";\n+                return keypadApplication ? transformForModifiers(\"\\033O\", keyMode, 'p') : \"0\";\n             case KEYCODE_NUMPAD_1:\n                 return keypadApplication ? transformForModifiers(\"\\033O\", keyMode, 'q') : \"1\";\n             case KEYCODE_NUMPAD_2:\n\ndiff --git a/app/src/test/java/com/termux/terminal/KeyHandlerTest.java b/app/src/test/java/com/termux/terminal/KeyHandlerTest.java\n--- a/app/src/test/java/com/termux/terminal/KeyHandlerTest.java\n+++ b/app/src/test/java/com/termux/terminal/KeyHandlerTest.java\n@@ -173,5 +173,19 @@ public void testKeyCodes() {\n \t\tassertKeysEquals(\"\\033[21;2~\", KeyHandler.getCode(KeyEvent.KEYCODE_F10, KeyHandler.KEYMOD_SHIFT, false, false));\n \t\tassertKeysEquals(\"\\033[23;2~\", KeyHandler.getCode(KeyEvent.KEYCODE_F11, KeyHandler.KEYMOD_SHIFT, false, false));\n \t\tassertKeysEquals(\"\\033[24;2~\", KeyHandler.getCode(KeyEvent.KEYCODE_F12, KeyHandler.KEYMOD_SHIFT, false, false));\n-\t}\n+\n+        assertKeysEquals(\"0\", KeyHandler.getCode(KeyEvent.KEYCODE_NUMPAD_0, 0, false, false));\n+        assertKeysEquals(\"1\", KeyHandler.getCode(KeyEvent.KEYCODE_NUMPAD_1, 0, false, false));\n+        assertKeysEquals(\"2\", KeyHandler.getCode(KeyEvent.KEYCODE_NUMPAD_2, 0, false, false));\n+        assertKeysEquals(\"3\", KeyHandler.getCode(KeyEvent.KEYCODE_NUMPAD_3, 0, false, false));\n+        assertKeysEquals(\"4\", KeyHandler.getCode(KeyEvent.KEYCODE_NUMPAD_4, 0, false, false));\n+        assertKeysEquals(\"5\", KeyHandler.getCode(KeyEvent.KEYCODE_NUMPAD_5, 0, false, false));\n+        assertKeysEquals(\"6\", KeyHandler.getCode(KeyEvent.KEYCODE_NUMPAD_6, 0, false, false));\n+        assertKeysEquals(\"7\", KeyHandler.getCode(KeyEvent.KEYCODE_NUMPAD_7, 0, false, false));\n+        assertKeysEquals(\"8\", KeyHandler.getCode(KeyEvent.KEYCODE_NUMPAD_8, 0, false, false));\n+        assertKeysEquals(\"9\", KeyHandler.getCode(KeyEvent.KEYCODE_NUMPAD_9, 0, false, false));\n+        assertKeysEquals(\",\", KeyHandler.getCode(KeyEvent.KEYCODE_NUMPAD_COMMA, 0, false, false));\n+        assertKeysEquals(\".\", KeyHandler.getCode(KeyEvent.KEYCODE_NUMPAD_DOT, 0, false, false));\n+    }\n+\n }",
    "output": "Fix numpad 0 and . key handling\n\nFixes #146."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/view/TerminalView.java b/app/src/main/java/com/termux/view/TerminalView.java\n--- a/app/src/main/java/com/termux/view/TerminalView.java\n+++ b/app/src/main/java/com/termux/view/TerminalView.java\n@@ -10,6 +10,7 @@\n import android.graphics.Typeface;\n import android.graphics.drawable.BitmapDrawable;\n import android.os.Build;\n+import android.text.Editable;\n import android.text.InputType;\n import android.text.TextUtils;\n import android.util.AttributeSet;\n@@ -233,7 +234,8 @@ public InputConnection onCreateInputConnection(EditorInfo outAttrs) {\n         // Previous keyboard issues:\n         // https://github.com/termux/termux-packages/issues/25\n         // https://github.com/termux/termux-app/issues/87.\n-        // https://github.com/termux/termux-app/issues/126 for breakage from that.\n+        // https://github.com/termux/termux-app/issues/126.\n+        // https://github.com/termux/termux-app/issues/137 (japanese chars and TYPE_NULL).\n         outAttrs.inputType = InputType.TYPE_NULL;\n \n         // Let part of the application show behind when in landscape:\n@@ -244,19 +246,41 @@ public InputConnection onCreateInputConnection(EditorInfo outAttrs) {\n             @Override\n             public boolean finishComposingText() {\n                 if (LOG_KEY_EVENTS) Log.i(EmulatorDebug.LOG_TAG, \"IME: finishComposingText()\");\n-                commitText(getEditable(), 0);\n+                super.finishComposingText();\n \n-                // Clear the editable.\n+                sendTextToTerminal(getEditable());\n                 getEditable().clear();\n-\n                 return true;\n             }\n \n             @Override\n             public boolean commitText(CharSequence text, int newCursorPosition) {\n-                if (LOG_KEY_EVENTS)\n+                if (LOG_KEY_EVENTS) {\n                     Log.i(EmulatorDebug.LOG_TAG, \"IME: commitText(\\\"\" + text + \"\\\", \" + newCursorPosition + \")\");\n+                }\n+                super.commitText(text, newCursorPosition);\n+\n                 if (mEmulator == null) return true;\n+\n+                Editable content = getEditable();\n+                sendTextToTerminal(content);\n+                content.clear();\n+                return true;\n+            }\n+\n+            @Override\n+            public boolean deleteSurroundingText(int leftLength, int rightLength) {\n+                if (LOG_KEY_EVENTS)\n+                    Log.i(EmulatorDebug.LOG_TAG, \"IME: deleteSurroundingText(\" + leftLength + \", \" + rightLength + \")\");\n+                // If leftLength=2 it may be due to a UTF-16 surrogate pair. So we cannot send\n+                // multiple key events for that. Let's just hope that keyboards don't use\n+                // leftLength > 1 for other purposes (such as holding down backspace for repeat).\n+                sendKeyEvent(new KeyEvent(KeyEvent.ACTION_DOWN, KeyEvent.KEYCODE_DEL));\n+                return super.deleteSurroundingText(leftLength, rightLength);\n+            }\n+\n+\n+            void sendTextToTerminal(CharSequence text) {\n                 final int textLengthInChars = text.length();\n                 for (int i = 0; i < textLengthInChars; i++) {\n                     char firstChar = text.charAt(i);\n@@ -297,35 +321,8 @@ public boolean commitText(CharSequence text, int newCursorPosition) {\n \n                     inputCodePoint(codePoint, ctrlHeld, false);\n                 }\n-\n-                return true;\n             }\n \n-            @Override\n-            public boolean deleteSurroundingText(int leftLength, int rightLength) {\n-                if (LOG_KEY_EVENTS)\n-                    Log.i(EmulatorDebug.LOG_TAG, \"IME: deleteSurroundingText(\" + leftLength + \", \" + rightLength + \")\");\n-                // If leftLength=2 it may be due to a UTF-16 surrogate pair. So we cannot send\n-                // multiple key events for that. Let's just hope that keyboards don't use\n-                // leftLength > 1 for other purposes (such as holding down backspace for repeat).\n-                sendKeyEvent(new KeyEvent(KeyEvent.ACTION_DOWN, KeyEvent.KEYCODE_DEL));\n-                return true;\n-            }\n-\n-            @Override\n-            public boolean setComposingText(CharSequence text, int newCursorPosition) {\n-                if (LOG_KEY_EVENTS)\n-                    Log.i(EmulatorDebug.LOG_TAG, \"IME: setComposingText(\\\"\" + text  + \"\\\", \" + newCursorPosition + \")\");\n-\n-                if (text.length() == 0) {\n-                    // Avoid log spam \"SpannableStringBuilder: SPAN_EXCLUSIVE_EXCLUSIVE spans cannot\n-                    // have a zero length\" when backspacing with the Google keyboard.\n-                    getEditable().clear();\n-                } else {\n-                    super.setComposingText(text, newCursorPosition);\n-                }\n-                return true;\n-            }\n         };\n     }\n ",
    "output": "Tweak InputConnection implementation"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxInstaller.java b/app/src/main/java/com/termux/app/TermuxInstaller.java\n--- a/app/src/main/java/com/termux/app/TermuxInstaller.java\n+++ b/app/src/main/java/com/termux/app/TermuxInstaller.java\n@@ -26,9 +26,7 @@\n import java.net.URL;\n import java.util.ArrayList;\n import java.util.Arrays;\n-import java.util.HashMap;\n import java.util.List;\n-import java.util.Map;\n import java.util.zip.ZipEntry;\n import java.util.zip.ZipInputStream;\n \n\ndiff --git a/app/src/main/java/com/termux/app/TermuxKeyListener.java b/app/src/main/java/com/termux/app/TermuxKeyListener.java\n--- a/app/src/main/java/com/termux/app/TermuxKeyListener.java\n+++ b/app/src/main/java/com/termux/app/TermuxKeyListener.java\n@@ -3,7 +3,6 @@\n import android.content.Context;\n import android.media.AudioManager;\n import android.support.v4.widget.DrawerLayout;\n-import android.util.Log;\n import android.view.Gravity;\n import android.view.InputDevice;\n import android.view.KeyEvent;",
    "output": "Remove unused imports"
  },
  {
    "input": "diff --git a/app/src/test/java/com/termux/terminal/KeyHandlerTest.java b/app/src/test/java/com/termux/terminal/KeyHandlerTest.java\n--- a/app/src/test/java/com/termux/terminal/KeyHandlerTest.java\n+++ b/app/src/test/java/com/termux/terminal/KeyHandlerTest.java\n@@ -141,10 +141,10 @@ public void testKeyCodes() {\n \t\tassertKeysEquals(\"\\033[1;6D\", KeyHandler.getCode(KeyEvent.KEYCODE_DPAD_LEFT, mod, false, false));\n \n \t\t// Home/end keys:\n-\t\tassertKeysEquals(\"\\033[H\", KeyHandler.getCode(KeyEvent.KEYCODE_HOME, 0, false, false));\n+\t\tassertKeysEquals(\"\\033[H\", KeyHandler.getCode(KeyEvent.KEYCODE_MOVE_HOME, 0, false, false));\n \t\tassertKeysEquals(\"\\033[F\", KeyHandler.getCode(KeyEvent.KEYCODE_MOVE_END, 0, false, false));\n \t\t// ... shifted:\n-\t\tassertKeysEquals(\"\\033[1;2H\", KeyHandler.getCode(KeyEvent.KEYCODE_HOME, KeyHandler.KEYMOD_SHIFT, false, false));\n+\t\tassertKeysEquals(\"\\033[1;2H\", KeyHandler.getCode(KeyEvent.KEYCODE_MOVE_HOME, KeyHandler.KEYMOD_SHIFT, false, false));\n \t\tassertKeysEquals(\"\\033[1;2F\", KeyHandler.getCode(KeyEvent.KEYCODE_MOVE_END, KeyHandler.KEYMOD_SHIFT, false, false));\n \n \t\t// Function keys F1-F12:",
    "output": "Switch KEYCODE_HOME -> KEYCODE_MOVE_HOME in tests"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/terminal/KeyHandler.java b/app/src/main/java/com/termux/terminal/KeyHandler.java\n--- a/app/src/main/java/com/termux/terminal/KeyHandler.java\n+++ b/app/src/main/java/com/termux/terminal/KeyHandler.java\n@@ -26,9 +26,9 @@\n import static android.view.KeyEvent.KEYCODE_F8;\n import static android.view.KeyEvent.KEYCODE_F9;\n import static android.view.KeyEvent.KEYCODE_FORWARD_DEL;\n-import static android.view.KeyEvent.KEYCODE_HOME;\n import static android.view.KeyEvent.KEYCODE_INSERT;\n import static android.view.KeyEvent.KEYCODE_MOVE_END;\n+import static android.view.KeyEvent.KEYCODE_MOVE_HOME;\n import static android.view.KeyEvent.KEYCODE_NUMPAD_0;\n import static android.view.KeyEvent.KEYCODE_NUMPAD_1;\n import static android.view.KeyEvent.KEYCODE_NUMPAD_2;\n@@ -66,7 +66,7 @@ public final class KeyHandler {\n         // terminfo: http://pubs.opengroup.org/onlinepubs/7990989799/xcurses/terminfo.html\n         // termcap: http://man7.org/linux/man-pages/man5/termcap.5.html\n         TERMCAP_TO_KEYCODE.put(\"%i\", KEYMOD_SHIFT | KEYCODE_DPAD_RIGHT);\n-        TERMCAP_TO_KEYCODE.put(\"#2\", KEYMOD_SHIFT | KEYCODE_HOME); // Shifted home\n+        TERMCAP_TO_KEYCODE.put(\"#2\", KEYMOD_SHIFT | KEYCODE_MOVE_HOME); // Shifted home\n         TERMCAP_TO_KEYCODE.put(\"#4\", KEYMOD_SHIFT | KEYCODE_DPAD_LEFT);\n         TERMCAP_TO_KEYCODE.put(\"*7\", KEYMOD_SHIFT | KEYCODE_MOVE_END); // Shifted end key\n \n@@ -98,7 +98,7 @@ public final class KeyHandler {\n         TERMCAP_TO_KEYCODE.put(\"kb\", KEYCODE_DEL); // backspace key\n \n         TERMCAP_TO_KEYCODE.put(\"kd\", KEYCODE_DPAD_DOWN); // terminfo=kcud1, down-arrow key\n-        TERMCAP_TO_KEYCODE.put(\"kh\", KEYCODE_HOME);\n+        TERMCAP_TO_KEYCODE.put(\"kh\", KEYCODE_MOVE_HOME);\n         TERMCAP_TO_KEYCODE.put(\"kl\", KEYCODE_DPAD_LEFT);\n         TERMCAP_TO_KEYCODE.put(\"kr\", KEYCODE_DPAD_RIGHT);\n \n@@ -107,7 +107,7 @@ public final class KeyHandler {\n         // t_K3 <kPageUp> keypad page-up key\n         // t_K4 <kEnd> keypad end key\n         // t_K5 <kPageDown> keypad page-down key\n-        TERMCAP_TO_KEYCODE.put(\"K1\", KEYCODE_HOME);\n+        TERMCAP_TO_KEYCODE.put(\"K1\", KEYCODE_MOVE_HOME);\n         TERMCAP_TO_KEYCODE.put(\"K3\", KEYCODE_PAGE_UP);\n         TERMCAP_TO_KEYCODE.put(\"K4\", KEYCODE_MOVE_END);\n         TERMCAP_TO_KEYCODE.put(\"K5\", KEYCODE_PAGE_DOWN);\n@@ -162,7 +162,9 @@ public static String getCode(int keyCode, int keyMode, boolean cursorApp, boolea\n             case KEYCODE_DPAD_LEFT:\n                 return (keyMode == 0) ? (cursorApp ? \"\\033OD\" : \"\\033[D\") : transformForModifiers(\"\\033[1\", keyMode, 'D');\n \n-            case KEYCODE_HOME:\n+            case KEYCODE_MOVE_HOME:\n+                // Note that KEYCODE_HOME is handled by the system and never delivered to applications.\n+                // On a Logitech k810 keyboard KEYCODE_MOVE_HOME is sent by FN+LeftArrow.\n                 return (keyMode == 0) ? (cursorApp ? \"\\033OH\" : \"\\033[H\") : transformForModifiers(\"\\033[1\", keyMode, 'H');\n             case KEYCODE_MOVE_END:\n                 return (keyMode == 0) ? (cursorApp ? \"\\033OF\" : \"\\033[F\") : transformForModifiers(\"\\033[1\", keyMode, 'F');",
    "output": "Catch KEYCODE_MOVE_HOME and not KEYCODE_HOME\n\nThe KEYCODE_HOME event is handled by the system and never delivered\nto applications, it's KEYCODE_MOVE_HOME (FN+LeftArrow) we want to\nhandle ourselves and send as an escape sequence.\n\nFixes #138."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxInstaller.java b/app/src/main/java/com/termux/app/TermuxInstaller.java\n--- a/app/src/main/java/com/termux/app/TermuxInstaller.java\n+++ b/app/src/main/java/com/termux/app/TermuxInstaller.java\n@@ -26,7 +26,9 @@\n import java.net.URL;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n import java.util.zip.ZipEntry;\n import java.util.zip.ZipInputStream;\n \n@@ -184,25 +186,28 @@ public void run() {\n \n     /** Get bootstrap zip url for this systems cpu architecture. */\n     static URL determineZipUrl() throws MalformedURLException {\n-        String termuxArch = null;\n+        String archName = determineTermuxArchName();\n+        return new URL(\"https://termux.net/bootstrap/bootstrap-\" + archName + \".zip\");\n+    }\n+\n+    private static String determineTermuxArchName() {\n         // Note that we cannot use System.getProperty(\"os.arch\") since that may give e.g. \"aarch64\"\n         // while a 64-bit runtime may not be installed (like on the Samsung Galaxy S5 Neo).\n         // Instead we search through the supported abi:s on the device, see:\n         // http://developer.android.com/ndk/guides/abis.html\n-        // Note that we search for abi:s in preferred order, and want to avoid installing arm on\n-        // an x86 system where arm emulation is available.\n-        final String[] androidArchNames = {\"arm64-v8a\", \"x86_64\", \"x86\", \"armeabi-v7a\"};\n-        final String[] termuxArchNames = {\"aarch64\", \"x86_64\", \"i686\", \"arm\"};\n-\n-        final List<String> supportedArches = Arrays.asList(Build.SUPPORTED_ABIS);\n-        for (int i = 0; i < termuxArchNames.length; i++) {\n-            if (supportedArches.contains(androidArchNames[i])) {\n-                termuxArch = termuxArchNames[i];\n-                break;\n+        // Note that we search for abi:s in preferred order (the ordering of the\n+        // Build.SUPPORTED_ABIS list) to avoid e.g. installing arm on an x86 system where arm\n+        // emulation is available.\n+        for (String androidArch : Build.SUPPORTED_ABIS) {\n+            switch (androidArch) {\n+                case \"arm64-v8a\": return \"aarch64\";\n+                case \"armeabi-v7a\": return \"arm\";\n+                case \"x86_64\": return \"x86_64\";\n+                case \"x86\": return \"i686\";\n             }\n         }\n-\n-        return new URL(\"https://termux.net/bootstrap/bootstrap-\" + termuxArch + \".zip\");\n+        throw new RuntimeException(\"Unable to determine arch from Build.SUPPORTED_ABIS =  \" +\n+            Arrays.toString(Build.SUPPORTED_ABIS));\n     }\n \n     /** Delete a folder and all its content or throw. */",
    "output": "Check arches in order of preference\n\nThe documentation for Build.SUPPORTED_ABIS says:\n\"An ordered list of ABIs supported by this device. The most preferred\nABI is the first element in the list.\"\n\nRespect that preference when checking for which arch to install\npackages for.\n\nFixes #131."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -165,8 +165,8 @@ public void onClick(View v) {\n                 param.rightMargin = param.topMargin = 0;\n                 param.setGravity(Gravity.LEFT);\n                 float weight = \"▲▼◀▶\".contains(buttonText) ? 0.7f : 1.f;\n-                param.columnSpec = GridLayout.spec(col, weight);\n-                param.rowSpec = GridLayout.spec(row, 1.f);\n+                param.columnSpec = GridLayout.spec(col, GridLayout.FILL, weight);\n+                param.rowSpec = GridLayout.spec(row, GridLayout.FILL, 1.f);\n                 button.setLayoutParams(param);\n \n                 addView(button);",
    "output": "Merge pull request #132 from michalbednarski/extrakeysview-alignment\n\nMake ExtraKeysView work on Android 5"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -165,8 +165,8 @@ public void onClick(View v) {\n                 param.rightMargin = param.topMargin = 0;\n                 param.setGravity(Gravity.LEFT);\n                 float weight = \"▲▼◀▶\".contains(buttonText) ? 0.7f : 1.f;\n-                param.columnSpec = GridLayout.spec(col, weight);\n-                param.rowSpec = GridLayout.spec(row, 1.f);\n+                param.columnSpec = GridLayout.spec(col, GridLayout.FILL, weight);\n+                param.rowSpec = GridLayout.spec(row, GridLayout.FILL, 1.f);\n                 button.setLayoutParams(param);\n \n                 addView(button);",
    "output": "Make ExtraKeysView work on Android 5\n\nThis is done by explicitly specifying alignment as GridLayout.FILL\nas I have figured out that this was fixed in Android 6 in commit\nhttps://android.googlesource.com/platform/frameworks/base/+/6dafd87fb4174447018b044bc67818d54fab57d8%5E%21/#F0\nwhich set default alignment to FILL if weight is nonzero"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/view/TerminalView.java b/app/src/main/java/com/termux/view/TerminalView.java\n--- a/app/src/main/java/com/termux/view/TerminalView.java\n+++ b/app/src/main/java/com/termux/view/TerminalView.java\n@@ -228,18 +228,13 @@ public boolean attachSession(TerminalSession session) {\n \n     @Override\n     public InputConnection onCreateInputConnection(EditorInfo outAttrs) {\n-        // Using InputType.TYPE_TEXT_VARIATION_URI avoids having an extra row of numbers on the\n-        // Google keyboard. https://github.com/termux/termux-app/issues/87.\n-        // It also makes the '/' keyboard more accessible, and makes some sense.\n+        // Using InputType.NULL is the most correct input type and avoids issues with other hacks.\n         //\n-        // If using just \"TYPE_NULL\", there is a problem with the \"Google Pinyin Input\" being in\n-        // word mode when used with the \"En\" tab available when the \"Show English keyboard\" option\n-        // is enabled - see https://github.com/termux/termux-packages/issues/25.\n-        // Adding TYPE_TEXT_FLAG_NO_SUGGESTIONS fixes Pinyin Input and removes the row of numbers\n-        // on the Google keyboard. . It also causes Swype to be put in\n-        // word mode, but using TYPE_TEXT_VARIATION_VISIBLE_PASSWORD would fix that. But for now\n-        // use InputType.TYPE_TEXT_VARIATION_URI as it makes more sense.\n-        outAttrs.inputType = InputType.TYPE_TEXT_VARIATION_URI;\n+        // Previous keyboard issues:\n+        // https://github.com/termux/termux-packages/issues/25\n+        // https://github.com/termux/termux-app/issues/87.\n+        // https://github.com/termux/termux-app/issues/126 for breakage from that.\n+        outAttrs.inputType = InputType.TYPE_NULL;\n \n         // Let part of the application show behind when in landscape:\n         outAttrs.imeOptions |= EditorInfo.IME_FLAG_NO_FULLSCREEN;\n@@ -310,17 +305,18 @@ public boolean commitText(CharSequence text, int newCursorPosition) {\n             public boolean deleteSurroundingText(int leftLength, int rightLength) {\n                 if (LOG_KEY_EVENTS)\n                     Log.i(EmulatorDebug.LOG_TAG, \"IME: deleteSurroundingText(\" + leftLength + \", \" + rightLength + \")\");\n-\n-                // Swype keyboard sometimes(?) sends this on backspace:\n-                if (leftLength == 0 && rightLength == 0) leftLength = 1;\n-\n-                for (int i = 0; i < leftLength; i++)\n-                    sendKeyEvent(new KeyEvent(KeyEvent.ACTION_DOWN, KeyEvent.KEYCODE_DEL));\n+                // If leftLength=2 it may be due to a UTF-16 surrogate pair. So we cannot send\n+                // multiple key events for that. Let's just hope that keyboards don't use\n+                // leftLength > 1 for other purposes (such as holding down backspace for repeat).\n+                sendKeyEvent(new KeyEvent(KeyEvent.ACTION_DOWN, KeyEvent.KEYCODE_DEL));\n                 return true;\n             }\n \n             @Override\n             public boolean setComposingText(CharSequence text, int newCursorPosition) {\n+                if (LOG_KEY_EVENTS)\n+                    Log.i(EmulatorDebug.LOG_TAG, \"IME: setComposingText(\\\"\" + text  + \"\\\", \" + newCursorPosition + \")\");\n+\n                 if (text.length() == 0) {\n                     // Avoid log spam \"SpannableStringBuilder: SPAN_EXCLUSIVE_EXCLUSIVE spans cannot\n                     // have a zero length\" when backspacing with the Google keyboard.",
    "output": "Switch to TYPE_NULL as input type\n\nThis fixes #126 where the previous input type put some keyboards into\nword mode (no direct echo). The workaround for Google Pinyin does not\nseem to be necessary no more.\n\nAlso fix backspace after entering emojis on some keyboards (Swype)."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -245,9 +245,15 @@ public Object instantiateItem(ViewGroup collection, int position) {\n                     editText.setOnEditorActionListener(new TextView.OnEditorActionListener() {\n                         @Override\n                         public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {\n-                            String s = editText.getText().toString() + \"\\n\";\n-                            getCurrentTermSession().write(s);\n-                            editText.setText(\"\");\n+                            TerminalSession session = getCurrentTermSession();\n+                            if (session != null) {\n+                                if (session.isRunning()) {\n+                                    session.write(editText.getText().toString() + \"\\n\");\n+                                } else {\n+                                    removeFinishedSession(session);\n+                                }\n+                                editText.setText(\"\");\n+                            }\n                             return true;\n                         }\n                     });\n@@ -846,4 +852,21 @@ void showToast(String text, boolean longDuration) {\n         mLastToast.show();\n     }\n \n+    public void removeFinishedSession(TerminalSession finishedSession) {\n+        // Return pressed with finished session - remove it.\n+        TermuxService service = mTermService;\n+\n+        int index = service.removeTermSession(finishedSession);\n+        mListViewAdapter.notifyDataSetChanged();\n+        if (mTermService.getSessions().isEmpty()) {\n+            // There are no sessions to show, so finish the activity.\n+            finish();\n+        } else {\n+            if (index >= service.getSessions().size()) {\n+                index = service.getSessions().size() - 1;\n+            }\n+            switchToSession(service.getSessions().get(index));\n+        }\n+    }\n+\n }\n\ndiff --git a/app/src/main/java/com/termux/app/TermuxKeyListener.java b/app/src/main/java/com/termux/app/TermuxKeyListener.java\n--- a/app/src/main/java/com/termux/app/TermuxKeyListener.java\n+++ b/app/src/main/java/com/termux/app/TermuxKeyListener.java\n@@ -55,31 +55,12 @@ public void copyModeChanged(boolean copyMode) {\n         mActivity.getDrawer().setDrawerLockMode(copyMode ? DrawerLayout.LOCK_MODE_LOCKED_CLOSED : DrawerLayout.LOCK_MODE_UNLOCKED);\n     }\n \n-    private void returnOnFinishedSession(TerminalSession currentSession) {\n-        // Return pressed with finished session - remove it.\n-        currentSession.finishIfRunning();\n-\n-        TermuxService service = mActivity.mTermService;\n-\n-        int index = service.removeTermSession(currentSession);\n-        mActivity.mListViewAdapter.notifyDataSetChanged();\n-        if (mActivity.mTermService.getSessions().isEmpty()) {\n-            // There are no sessions to show, so finish the activity.\n-            mActivity.finish();\n-        } else {\n-            if (index >= service.getSessions().size()) {\n-                index = service.getSessions().size() - 1;\n-            }\n-            mActivity.switchToSession(service.getSessions().get(index));\n-        }\n-    }\n-\n     @Override\n     public boolean onKeyDown(int keyCode, KeyEvent e, TerminalSession currentSession) {\n         if (handleVirtualKeys(keyCode, e, true)) return true;\n \n         if (keyCode == KeyEvent.KEYCODE_ENTER && !currentSession.isRunning()) {\n-            returnOnFinishedSession(currentSession);\n+            mActivity.removeFinishedSession(currentSession);\n             return true;\n         } else if (e.isCtrlPressed() && e.isShiftPressed()) {\n             // Get the unmodified code point:\n@@ -244,7 +225,7 @@ public boolean onCodePoint(final int codePoint, boolean ctrlDown, TerminalSessio\n             return true;\n         } else if (ctrlDown) {\n             if (codePoint == 106 /* Ctrl+j or \\n */ && !session.isRunning()) {\n-                returnOnFinishedSession(session);\n+                mActivity.removeFinishedSession(session);\n                 return true;\n             }\n ",
    "output": "Allow predictive text area input to remove session\n\nFixes #124"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxKeyListener.java b/app/src/main/java/com/termux/app/TermuxKeyListener.java\n--- a/app/src/main/java/com/termux/app/TermuxKeyListener.java\n+++ b/app/src/main/java/com/termux/app/TermuxKeyListener.java\n@@ -250,9 +250,10 @@ public boolean onCodePoint(final int codePoint, boolean ctrlDown, TerminalSessio\n \n             List<TermuxPreferences.KeyboardShortcut> shortcuts = mActivity.mSettings.shortcuts;\n             if (!shortcuts.isEmpty()) {\n+                int codePointLowerCase = Character.toLowerCase(codePoint);\n                 for (int i = shortcuts.size() - 1; i >= 0; i--) {\n                     TermuxPreferences.KeyboardShortcut shortcut = shortcuts.get(i);\n-                    if (codePoint == shortcut.codePoint) {\n+                    if (codePointLowerCase == shortcut.codePoint) {\n                         switch (shortcut.shortcutAction) {\n                             case TermuxPreferences.SHORTCUT_ACTION_CREATE_SESSION:\n                                 mActivity.addNewSession(false, null);\n\ndiff --git a/app/src/main/java/com/termux/app/TermuxPreferences.java b/app/src/main/java/com/termux/app/TermuxPreferences.java\n--- a/app/src/main/java/com/termux/app/TermuxPreferences.java\n+++ b/app/src/main/java/com/termux/app/TermuxPreferences.java\n@@ -184,9 +184,9 @@ public KeyboardShortcut(int codePoint, int shortcutAction) {\n     private void parseAction(String name, int shortcutAction, Properties props) {\n         String value = props.getProperty(name);\n         if (value == null) return;\n-        String[] parts = value.trim().split(\"\\\\+\");\n+        String[] parts = value.toLowerCase().trim().split(\"\\\\+\");\n         String input = parts.length == 2 ? parts[1].trim() : null;\n-        if (!(parts.length == 2 && parts[0].trim().equalsIgnoreCase(\"ctrl\")) || input.isEmpty() || input.length() > 2) {\n+        if (!(parts.length == 2 && parts[0].trim().equals(\"ctrl\")) || input.isEmpty() || input.length() > 2) {\n             Log.e(\"termux\", \"Keyboard shortcut '\" + name + \"' is not Ctrl+<something>\");\n             return;\n         }",
    "output": "Make user-configurable shortcuts case insensitive"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/DialogUtils.java b/app/src/main/java/com/termux/app/DialogUtils.java\n--- a/app/src/main/java/com/termux/app/DialogUtils.java\n+++ b/app/src/main/java/com/termux/app/DialogUtils.java\n@@ -11,8 +11,6 @@\n import android.widget.LinearLayout;\n import android.widget.TextView;\n \n-import android.R;\n-\n public final class DialogUtils {\n \n     public interface TextSetListener {\n@@ -72,7 +70,7 @@ public void onClick(DialogInterface dialog, int which) {\n         }\n \n         if (onNegative == null) {\n-            builder.setNegativeButton(R.string.cancel, null);\n+            builder.setNegativeButton(android.R.string.cancel, null);\n         } else {\n             builder.setNegativeButton(negativeButtonText, new DialogInterface.OnClickListener() {\n                 @Override",
    "output": "Use absolute reference for android.R (lint check)"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxKeyListener.java b/app/src/main/java/com/termux/app/TermuxKeyListener.java\n--- a/app/src/main/java/com/termux/app/TermuxKeyListener.java\n+++ b/app/src/main/java/com/termux/app/TermuxKeyListener.java\n@@ -3,6 +3,7 @@\n import android.content.Context;\n import android.media.AudioManager;\n import android.support.v4.widget.DrawerLayout;\n+import android.util.Log;\n import android.view.Gravity;\n import android.view.InputDevice;\n import android.view.KeyEvent;\n@@ -54,27 +55,31 @@ public void copyModeChanged(boolean copyMode) {\n         mActivity.getDrawer().setDrawerLockMode(copyMode ? DrawerLayout.LOCK_MODE_LOCKED_CLOSED : DrawerLayout.LOCK_MODE_UNLOCKED);\n     }\n \n+    private void returnOnFinishedSession(TerminalSession currentSession) {\n+        // Return pressed with finished session - remove it.\n+        currentSession.finishIfRunning();\n+\n+        TermuxService service = mActivity.mTermService;\n+\n+        int index = service.removeTermSession(currentSession);\n+        mActivity.mListViewAdapter.notifyDataSetChanged();\n+        if (mActivity.mTermService.getSessions().isEmpty()) {\n+            // There are no sessions to show, so finish the activity.\n+            mActivity.finish();\n+        } else {\n+            if (index >= service.getSessions().size()) {\n+                index = service.getSessions().size() - 1;\n+            }\n+            mActivity.switchToSession(service.getSessions().get(index));\n+        }\n+    }\n+\n     @Override\n     public boolean onKeyDown(int keyCode, KeyEvent e, TerminalSession currentSession) {\n         if (handleVirtualKeys(keyCode, e, true)) return true;\n \n-        TermuxService service = mActivity.mTermService;\n-\n         if (keyCode == KeyEvent.KEYCODE_ENTER && !currentSession.isRunning()) {\n-            // Return pressed with finished session - remove it.\n-            currentSession.finishIfRunning();\n-\n-            int index = service.removeTermSession(currentSession);\n-            mActivity.mListViewAdapter.notifyDataSetChanged();\n-            if (mActivity.mTermService.getSessions().isEmpty()) {\n-                // There are no sessions to show, so finish the activity.\n-                mActivity.finish();\n-            } else {\n-                if (index >= service.getSessions().size()) {\n-                    index = service.getSessions().size() - 1;\n-                }\n-                mActivity.switchToSession(service.getSessions().get(index));\n-            }\n+            returnOnFinishedSession(currentSession);\n             return true;\n         } else if (e.isCtrlPressed() && e.isShiftPressed()) {\n             // Get the unmodified code point:\n@@ -111,6 +116,7 @@ public boolean onKeyDown(int keyCode, KeyEvent e, TerminalSession currentSession\n                 mActivity.changeFontSize(false);\n             } else if (unicodeChar >= '1' && unicodeChar <= '9') {\n                 int num = unicodeChar - '1';\n+                TermuxService service = mActivity.mTermService;\n                 if (service.getSessions().size() > num)\n                     mActivity.switchToSession(service.getSessions().get(num));\n             }\n@@ -237,6 +243,11 @@ public boolean onCodePoint(final int codePoint, boolean ctrlDown, TerminalSessio\n             }\n             return true;\n         } else if (ctrlDown) {\n+            if (codePoint == 106 /* Ctrl+j or \\n */ && !session.isRunning()) {\n+                returnOnFinishedSession(session);\n+                return true;\n+            }\n+\n             List<TermuxPreferences.KeyboardShortcut> shortcuts = mActivity.mSettings.shortcuts;\n             if (!shortcuts.isEmpty()) {\n                 for (int i = shortcuts.size() - 1; i >= 0; i--) {",
    "output": "Fix Enter to finish session in more cases\n\nDetect the Enter key to finish a session not only on KeyEvent:s,\nbut also when the IME uses InputConnection.commitText() to send\n\\n. This seems to be triggered more after switching to the Uri\ninput type. Closes #124\n\nAlso bump app version for a quick release."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/view/TerminalView.java b/app/src/main/java/com/termux/view/TerminalView.java\n--- a/app/src/main/java/com/termux/view/TerminalView.java\n+++ b/app/src/main/java/com/termux/view/TerminalView.java\n@@ -5,7 +5,6 @@\n import android.content.ClipData;\n import android.content.ClipboardManager;\n import android.content.Context;\n-import android.content.res.TypedArray;\n import android.graphics.Canvas;\n import android.graphics.Rect;\n import android.graphics.Typeface;\n@@ -817,18 +816,12 @@ public void toggleSelectingText(MotionEvent ev) {\n             final ActionMode.Callback callback = new ActionMode.Callback() {\n                 @Override\n                 public boolean onCreateActionMode(ActionMode mode, Menu menu) {\n-                    final int[] ACTION_MODE_ATTRS = {android.R.attr.actionModeCopyDrawable, android.R.attr.actionModePasteDrawable,};\n-                    TypedArray styledAttributes = getContext().obtainStyledAttributes(ACTION_MODE_ATTRS);\n-                    try {\n-                        int show = MenuItem.SHOW_AS_ACTION_ALWAYS | MenuItem.SHOW_AS_ACTION_WITH_TEXT;\n-\n-                        ClipboardManager clipboard = (ClipboardManager) getContext().getSystemService(Context.CLIPBOARD_SERVICE);\n-                        menu.add(Menu.NONE, 1, Menu.NONE, R.string.copy_text).setIcon(styledAttributes.getResourceId(0, 0)).setShowAsAction(show);\n-                        menu.add(Menu.NONE, 2, Menu.NONE, R.string.paste_text).setIcon(styledAttributes.getResourceId(1, 0)).setEnabled(clipboard.hasPrimaryClip()).setShowAsAction(show);\n-                        menu.add(Menu.NONE, 3, Menu.NONE, R.string.text_selection_more);\n-                    } finally {\n-                        styledAttributes.recycle();\n-                    }\n+                    int show = MenuItem.SHOW_AS_ACTION_ALWAYS | MenuItem.SHOW_AS_ACTION_WITH_TEXT;\n+\n+                    ClipboardManager clipboard = (ClipboardManager) getContext().getSystemService(Context.CLIPBOARD_SERVICE);\n+                    menu.add(Menu.NONE, 1, Menu.NONE, R.string.copy_text).setShowAsAction(show);\n+                    menu.add(Menu.NONE, 2, Menu.NONE, R.string.paste_text).setEnabled(clipboard.hasPrimaryClip()).setShowAsAction(show);\n+                    menu.add(Menu.NONE, 3, Menu.NONE, R.string.text_selection_more);\n                     return true;\n                 }\n ",
    "output": "Remove attempt of icons at popup menu actions"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/DialogUtils.java b/app/src/main/java/com/termux/app/DialogUtils.java\n--- a/app/src/main/java/com/termux/app/DialogUtils.java\n+++ b/app/src/main/java/com/termux/app/DialogUtils.java\n@@ -11,6 +11,8 @@\n import android.widget.LinearLayout;\n import android.widget.TextView;\n \n+import android.R;\n+\n public final class DialogUtils {\n \n     public interface TextSetListener {\n@@ -70,7 +72,7 @@ public void onClick(DialogInterface dialog, int which) {\n         }\n \n         if (onNegative == null) {\n-            builder.setNegativeButton(android.R.string.cancel, null);\n+            builder.setNegativeButton(R.string.cancel, null);\n         } else {\n             builder.setNegativeButton(negativeButtonText, new DialogInterface.OnClickListener() {\n                 @Override\n\ndiff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -27,7 +27,7 @@ public ExtraKeysView(Context context, AttributeSet attrs) {\n         reload();\n     }\n \n-    private static void sendKey(View view, String keyName) {\n+    static void sendKey(View view, String keyName) {\n         int keyCode = 0;\n         String chars = null;\n         switch (keyName) {\n\ndiff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -134,10 +134,10 @@ public final class TermuxActivity extends Activity implements ServiceConnection\n      */\n     boolean mIsVisible;\n \n-    private final SoundPool mBellSoundPool = new SoundPool.Builder().setMaxStreams(1).setAudioAttributes(\n+    final SoundPool mBellSoundPool = new SoundPool.Builder().setMaxStreams(1).setAudioAttributes(\n         new AudioAttributes.Builder().setContentType(AudioAttributes.CONTENT_TYPE_SONIFICATION)\n             .setUsage(AudioAttributes.USAGE_ASSISTANCE_SONIFICATION).build()).build();\n-    private int mBellSoundId;\n+    int mBellSoundId;\n \n     private final BroadcastReceiver mBroadcastReceiever = new BroadcastReceiver() {\n         @Override\n@@ -193,7 +193,7 @@ void updateBackgroundColor() {\n     @TargetApi(Build.VERSION_CODES.M)\n     public boolean ensureStoragePermissionGranted() {\n         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n-            if (checkSelfPermission(android.Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED) {\n+            if (checkSelfPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED) {\n                 return true;\n             } else {\n                 requestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, REQUESTCODE_PERMISSION_STORAGE);\n@@ -782,7 +782,7 @@ public void onClick(DialogInterface dialog, int id) {\n                     // The startActivity() call is not documented to throw IllegalArgumentException.\n                     // However, crash reporting shows that it sometimes does, so catch it here.\n                     new AlertDialog.Builder(this).setMessage(R.string.styling_not_installed)\n-                        .setPositiveButton(R.string.styling_install, new android.content.DialogInterface.OnClickListener() {\n+                        .setPositiveButton(R.string.styling_install, new DialogInterface.OnClickListener() {\n                             @Override\n                             public void onClick(DialogInterface dialog, int which) {\n                                 startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(\"http://play.google.com/store/apps/details?id=com.termux.styling\")));\n\ndiff --git a/app/src/main/java/com/termux/app/TermuxHelpActivity.java b/app/src/main/java/com/termux/app/TermuxHelpActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxHelpActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxHelpActivity.java\n@@ -15,7 +15,7 @@\n /** Basic embedded browser for viewing help pages. */\n public final class TermuxHelpActivity extends Activity {\n \n-    private WebView mWebView;\n+    WebView mWebView;\n \n     @Override\n     protected void onCreate(Bundle savedInstanceState) {\n\ndiff --git a/app/src/main/java/com/termux/app/TermuxInstaller.java b/app/src/main/java/com/termux/app/TermuxInstaller.java\n--- a/app/src/main/java/com/termux/app/TermuxInstaller.java\n+++ b/app/src/main/java/com/termux/app/TermuxInstaller.java\n@@ -9,6 +9,7 @@\n import android.content.DialogInterface.OnDismissListener;\n import android.os.Build;\n import android.os.Environment;\n+import android.os.UserManager;\n import android.system.Os;\n import android.util.Log;\n import android.util.Pair;\n@@ -54,7 +55,7 @@ final class TermuxInstaller {\n     static void setupIfNeeded(final Activity activity, final Runnable whenDone) {\n         // Termux can only be run as the primary user (device owner) since only that\n         // account has the expected file system paths. Verify that:\n-        android.os.UserManager um = (android.os.UserManager) activity.getSystemService(Context.USER_SERVICE);\n+        UserManager um = (UserManager) activity.getSystemService(Context.USER_SERVICE);\n         boolean isPrimaryUser = um.getSerialNumberForUser(android.os.Process.myUserHandle()) == 0;\n         if (!isPrimaryUser) {\n             new AlertDialog.Builder(activity).setTitle(R.string.bootstrap_error_title).setMessage(R.string.bootstrap_error_not_primary_user_message)\n\ndiff --git a/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java b/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java\n--- a/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java\n+++ b/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java\n@@ -35,7 +35,7 @@ public class TermuxFileReceiverActivity extends Activity {\n      * name input dialog to be implicitly dismissed, and we do not want to finish the activity directly\n      * when showing the error dialog.\n      */\n-    private boolean mFinishOnDismissNameDialog = true;\n+    boolean mFinishOnDismissNameDialog = true;\n \n     @Override\n     protected void onResume() {",
    "output": "Some minor AS lint warnings tweaks"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/FullScreenHelper.java b/app/src/main/java/com/termux/app/FullScreenHelper.java\n--- a/app/src/main/java/com/termux/app/FullScreenHelper.java\n+++ b/app/src/main/java/com/termux/app/FullScreenHelper.java\n@@ -2,6 +2,7 @@\n \n import android.graphics.Color;\n import android.graphics.drawable.ColorDrawable;\n+import android.os.Build;\n import android.view.View;\n \n import com.termux.R;\n@@ -58,7 +59,8 @@ void setImmersiveMode() {\n             | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY\n             | View.SYSTEM_UI_FLAG_FULLSCREEN;\n         int color = ((ColorDrawable) mActivity.getWindow().getDecorView().getBackground()).getColor();\n-        if (isColorLight(color)) flags |= View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR;\n+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && isColorLight(color))\n+            flags |= View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR;\n         mActivity.getWindow().getDecorView().setSystemUiVisibility(flags);\n     }\n ",
    "output": "Add version check before field usage"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/terminal/KeyHandler.java b/app/src/main/java/com/termux/terminal/KeyHandler.java\n--- a/app/src/main/java/com/termux/terminal/KeyHandler.java\n+++ b/app/src/main/java/com/termux/terminal/KeyHandler.java\n@@ -225,8 +225,9 @@ public static String getCode(int keyCode, int keyMode, boolean cursorApp, boolea\n             case KEYCODE_PAGE_DOWN:\n                 return \"\\033[6~\";\n             case KEYCODE_DEL:\n-                // Yes, this needs to U+007F and not U+0008!\n-                return \"\\u007F\";\n+                String prefix = ((keyMode & KEYMOD_ALT) == 0) ? \"\" : \"\\033\";\n+                // Just do what xterm and gnome-terminal does:\n+                return prefix + (((keyMode & KEYMOD_CTRL) == 0) ? \"\\u007F\" : \"\\u0008\");\n             case KEYCODE_NUM_LOCK:\n                 return \"\\033OP\";\n ",
    "output": "Fix backspace in combination with Alt and Ctrl"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/view/TerminalView.java b/app/src/main/java/com/termux/view/TerminalView.java\n--- a/app/src/main/java/com/termux/view/TerminalView.java\n+++ b/app/src/main/java/com/termux/view/TerminalView.java\n@@ -664,7 +664,9 @@ void inputCodePoint(int codePoint, boolean controlDownFromEvent, boolean leftAlt\n                 codePoint = 29;\n             } else if (codePoint == '^' || codePoint == '6') {\n                 codePoint = 30; // control-^\n-            } else if (codePoint == '_' || codePoint == '7') {\n+            } else if (codePoint == '_' || codePoint == '7' || codePoint == '/') {\n+                // \"Ctrl-/ sends 0x1f which is equivalent of Ctrl-_ since the days of VT102\"\n+                // - http://apple.stackexchange.com/questions/24261/how-do-i-send-c-that-is-control-slash-to-the-terminal\n                 codePoint = 31;\n             } else if (codePoint == '8') {\n                 codePoint = 127; // DEL",
    "output": "Fix Ctrl+/ to send same as Ctrl+_"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/view/TerminalView.java b/app/src/main/java/com/termux/view/TerminalView.java\n--- a/app/src/main/java/com/termux/view/TerminalView.java\n+++ b/app/src/main/java/com/termux/view/TerminalView.java\n@@ -80,16 +80,19 @@ public TerminalView(Context context, AttributeSet attributes) { // NO_UCD (unuse\n         super(context, attributes);\n         mGestureRecognizer = new GestureAndScaleRecognizer(context, new GestureAndScaleRecognizer.Listener() {\n \n+            boolean scrolledWithFinger;\n+\n             @Override\n             public boolean onUp(MotionEvent e) {\n                 mScrollRemainder = 0.0f;\n-                if (mEmulator != null && mEmulator.isMouseTrackingActive() && !mIsSelectingText) {\n+                if (mEmulator != null && mEmulator.isMouseTrackingActive() && !mIsSelectingText && !scrolledWithFinger) {\n                     // Quick event processing when mouse tracking is active - do not wait for check of double tapping\n                     // for zooming.\n                     sendMouseEventCode(e, TerminalEmulator.MOUSE_LEFT_BUTTON, true);\n                     sendMouseEventCode(e, TerminalEmulator.MOUSE_LEFT_BUTTON, false);\n                     return true;\n                 }\n+                scrolledWithFinger = false;\n                 return false;\n             }\n \n@@ -111,19 +114,20 @@ public boolean onSingleTapUp(MotionEvent e) {\n             }\n \n             @Override\n-            public boolean onScroll(MotionEvent e2, float distanceX, float distanceY) {\n+            public boolean onScroll(MotionEvent e, float distanceX, float distanceY) {\n                 if (mEmulator == null || mIsSelectingText) return true;\n-                if (mEmulator.isMouseTrackingActive() && e2.isFromSource(InputDevice.SOURCE_MOUSE)) {\n+                if (mEmulator.isMouseTrackingActive() && e.isFromSource(InputDevice.SOURCE_MOUSE)) {\n                     // If moving with mouse pointer while pressing button, report that instead of scroll.\n                     // This means that we never report moving with button press-events for touch input,\n                     // since we cannot just start sending these events without a starting press event,\n                     // which we do not do for touch input, only mouse in onTouchEvent().\n-                    sendMouseEventCode(e2, TerminalEmulator.MOUSE_LEFT_BUTTON_MOVED, true);\n+                    sendMouseEventCode(e, TerminalEmulator.MOUSE_LEFT_BUTTON_MOVED, true);\n                 } else {\n+                    scrolledWithFinger = true;\n                     distanceY += mScrollRemainder;\n                     int deltaRows = (int) (distanceY / mRenderer.mFontLineSpacing);\n                     mScrollRemainder = distanceY - deltaRows * mRenderer.mFontLineSpacing;\n-                    doScroll(e2, deltaRows);\n+                    doScroll(e, deltaRows);\n                 }\n                 return true;\n             }",
    "output": "Do not send mouse up event after scrolling\n\nThis fixes an issue where e.g. in tmux, when pressing the finger\non an upper pane and dragging it down to scroll and releasing it\nfurther down on another pane, the upper pane lost focus to to a\nmouse click being sent to the pane below."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/terminal/KeyHandler.java b/app/src/main/java/com/termux/terminal/KeyHandler.java\n--- a/app/src/main/java/com/termux/terminal/KeyHandler.java\n+++ b/app/src/main/java/com/termux/terminal/KeyHandler.java\n@@ -1,10 +1,9 @@\n package com.termux.terminal;\n \n-import android.view.KeyEvent;\n-\n import java.util.HashMap;\n import java.util.Map;\n \n+import static android.view.KeyEvent.KEYCODE_BACK;\n import static android.view.KeyEvent.KEYCODE_BREAK;\n import static android.view.KeyEvent.KEYCODE_DEL;\n import static android.view.KeyEvent.KEYCODE_DPAD_CENTER;\n@@ -51,6 +50,7 @@\n import static android.view.KeyEvent.KEYCODE_NUM_LOCK;\n import static android.view.KeyEvent.KEYCODE_PAGE_DOWN;\n import static android.view.KeyEvent.KEYCODE_PAGE_UP;\n+import static android.view.KeyEvent.KEYCODE_SPACE;\n import static android.view.KeyEvent.KEYCODE_SYSRQ;\n import static android.view.KeyEvent.KEYCODE_TAB;\n \n@@ -98,7 +98,7 @@ public final class KeyHandler {\n         TERMCAP_TO_KEYCODE.put(\"kb\", KEYCODE_DEL); // backspace key\n \n         TERMCAP_TO_KEYCODE.put(\"kd\", KEYCODE_DPAD_DOWN); // terminfo=kcud1, down-arrow key\n-        TERMCAP_TO_KEYCODE.put(\"kh\", KeyEvent.KEYCODE_HOME);\n+        TERMCAP_TO_KEYCODE.put(\"kh\", KEYCODE_HOME);\n         TERMCAP_TO_KEYCODE.put(\"kl\", KEYCODE_DPAD_LEFT);\n         TERMCAP_TO_KEYCODE.put(\"kr\", KEYCODE_DPAD_RIGHT);\n \n@@ -107,10 +107,10 @@ public final class KeyHandler {\n         // t_K3 <kPageUp> keypad page-up key\n         // t_K4 <kEnd> keypad end key\n         // t_K5 <kPageDown> keypad page-down key\n-        TERMCAP_TO_KEYCODE.put(\"K1\", KeyEvent.KEYCODE_HOME);\n-        TERMCAP_TO_KEYCODE.put(\"K3\", KeyEvent.KEYCODE_PAGE_UP);\n-        TERMCAP_TO_KEYCODE.put(\"K4\", KeyEvent.KEYCODE_MOVE_END);\n-        TERMCAP_TO_KEYCODE.put(\"K5\", KeyEvent.KEYCODE_PAGE_DOWN);\n+        TERMCAP_TO_KEYCODE.put(\"K1\", KEYCODE_HOME);\n+        TERMCAP_TO_KEYCODE.put(\"K3\", KEYCODE_PAGE_UP);\n+        TERMCAP_TO_KEYCODE.put(\"K4\", KEYCODE_MOVE_END);\n+        TERMCAP_TO_KEYCODE.put(\"K5\", KEYCODE_PAGE_DOWN);\n \n         TERMCAP_TO_KEYCODE.put(\"ku\", KEYCODE_DPAD_UP);\n \n@@ -162,7 +162,7 @@ public static String getCode(int keyCode, int keyMode, boolean cursorApp, boolea\n             case KEYCODE_DPAD_LEFT:\n                 return (keyMode == 0) ? (cursorApp ? \"\\033OD\" : \"\\033[D\") : transformForModifiers(\"\\033[1\", keyMode, 'D');\n \n-            case KeyEvent.KEYCODE_HOME:\n+            case KEYCODE_HOME:\n                 return (keyMode == 0) ? (cursorApp ? \"\\033OH\" : \"\\033[H\") : transformForModifiers(\"\\033[1\", keyMode, 'H');\n             case KEYCODE_MOVE_END:\n                 return (keyMode == 0) ? (cursorApp ? \"\\033OF\" : \"\\033[F\") : transformForModifiers(\"\\033[1\", keyMode, 'F');\n@@ -209,7 +209,7 @@ public static String getCode(int keyCode, int keyMode, boolean cursorApp, boolea\n                 return \"\\033[34~\"; // Pause/Break\n \n             case KEYCODE_ESCAPE:\n-            case KeyEvent.KEYCODE_BACK:\n+            case KEYCODE_BACK:\n                 return \"\\033\";\n \n             case KEYCODE_INSERT:\n@@ -230,7 +230,7 @@ public static String getCode(int keyCode, int keyMode, boolean cursorApp, boolea\n             case KEYCODE_NUM_LOCK:\n                 return \"\\033OP\";\n \n-            case KeyEvent.KEYCODE_SPACE:\n+            case KEYCODE_SPACE:\n                 // If ctrl is not down, return null so that it goes through normal input processing (which may e.g. cause a\n                 // combining accent to be written):\n                 return ((keyMode & KEYMOD_CTRL) == 0) ? null : \"\\0\";",
    "output": "Use static imports throughout"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -1,9 +1,7 @@\n package com.termux.app;\n \n import android.content.Context;\n-import android.os.SystemClock;\n import android.util.AttributeSet;\n-import android.util.Log;\n import android.view.Gravity;\n import android.view.KeyEvent;\n import android.view.View;",
    "output": "Cleanup imports"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxInstaller.java b/app/src/main/java/com/termux/app/TermuxInstaller.java\n--- a/app/src/main/java/com/termux/app/TermuxInstaller.java\n+++ b/app/src/main/java/com/termux/app/TermuxInstaller.java\n@@ -187,8 +187,8 @@ static URL determineZipUrl() throws MalformedURLException {\n         // http://developer.android.com/ndk/guides/abis.html\n         // Note that we search for abi:s in preferred order, and want to avoid installing arm on\n         // an x86 system where arm emulation is available.\n-        final String[] androidArchNames = {\"arm64-v8a\", \"x86\", \"armeabi-v7a\"};\n-        final String[] termuxArchNames = {\"aarch64\", \"i686\", \"arm\"};\n+        final String[] androidArchNames = {\"arm64-v8a\", \"x86_64\", \"x86\", \"armeabi-v7a\"};\n+        final String[] termuxArchNames = {\"aarch64\", \"x86_64\", \"i686\", \"arm\"};\n \n         final List<String> supportedArches = Arrays.asList(Build.SUPPORTED_ABIS);\n         for (int i = 0; i < termuxArchNames.length; i++) {",
    "output": "Enable installation of x86-64 packages"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -19,7 +19,7 @@\n  * A view showing extra keys (such as Escape, Ctrl, Alt) not normally available on an Android soft\n  * keyboard.\n  */\n-public final class ExtraKeysView extends GridLayout implements TerminalView.KeyboardModifiers {\n+public final class ExtraKeysView extends GridLayout {\n \n     private static final int TEXT_COLOR = 0xFFFFFFFF;\n ",
    "output": "Remove KeyboardModifiers"
  },
  {
    "input": "diff --git a/app/src/test/java/com/termux/terminal/WcWidthTest.java b/app/src/test/java/com/termux/terminal/WcWidthTest.java\n--- a/app/src/test/java/com/termux/terminal/WcWidthTest.java\n+++ b/app/src/test/java/com/termux/terminal/WcWidthTest.java\n@@ -60,4 +60,8 @@ public void testHangul() {\n \t\tassertWidthIs(2, 0x11A3);\n \t}\n \n+    public void testKoala() {\n+        assertWidthIs(1, 0x1F428);\n+    }\n+\n }",
    "output": "Add a wcwidth test"
  },
  {
    "input": "diff --git a/app/src/test/java/com/termux/terminal/TerminalTestCase.java b/app/src/test/java/com/termux/terminal/TerminalTestCase.java\n--- a/app/src/test/java/com/termux/terminal/TerminalTestCase.java\n+++ b/app/src/test/java/com/termux/terminal/TerminalTestCase.java\n@@ -19,6 +19,7 @@ public static class MockTerminalOutput extends TerminalOutput {\n \t\tpublic final List<ChangedTitle> titleChanges = new ArrayList<>();\n \t\tpublic final List<String> clipboardPuts = new ArrayList<>();\n \t\tpublic int bellsRung = 0;\n+        public int colorsChanged = 0;\n \n \t\t@Override\n \t\tpublic void write(byte[] data, int offset, int count) {\n@@ -49,7 +50,12 @@ public void clipboardText(String text) {\n \t\tpublic void onBell() {\n \t\t\tbellsRung++;\n \t\t}\n-\t}\n+\n+        @Override\n+        public void onColorsChanged() {\n+            colorsChanged++;\n+        }\n+    }\n \n \tpublic TerminalEmulator mTerminal;\n \tpublic MockTerminalOutput mOutput;",
    "output": "Fix MockTerminalOutput to implement all methods"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/terminal/JNI.java b/app/src/main/java/com/termux/terminal/JNI.java\n--- a/app/src/main/java/com/termux/terminal/JNI.java\n+++ b/app/src/main/java/com/termux/terminal/JNI.java\n@@ -40,15 +40,6 @@ final class JNI {\n \t */\n \tpublic static native int waitFor(int processId);\n \n-\t/**\n-\t * Send SIGHUP to a process group.\n-\t * \n-\t * There exists a kill(2) system call wrapper in {@link android.os.Process#sendSignal(int, int)}, but that makes a\n-\t * \"if (pid > 0)\" check so cannot be used for sending to a process group:\n-\t * https://android.googlesource.com/platform/frameworks/base/+/donut-release/core/jni/android_util_Process.cpp\n-\t */\n-\tpublic static native void hangupProcessGroup(int processId);\n-\n \t/** Close a file descriptor through the close(2) system call. */\n \tpublic static native void close(int fileDescriptor);\n \n\ndiff --git a/app/src/main/java/com/termux/terminal/TerminalSession.java b/app/src/main/java/com/termux/terminal/TerminalSession.java\n--- a/app/src/main/java/com/termux/terminal/TerminalSession.java\n+++ b/app/src/main/java/com/termux/terminal/TerminalSession.java\n@@ -1,5 +1,13 @@\n package com.termux.terminal;\n \n+import android.annotation.SuppressLint;\n+import android.os.Handler;\n+import android.os.Message;\n+import android.system.ErrnoException;\n+import android.system.Os;\n+import android.system.OsConstants;\n+import android.util.Log;\n+\n import java.io.FileDescriptor;\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n@@ -9,11 +17,6 @@\n import java.nio.charset.StandardCharsets;\n import java.util.UUID;\n \n-import android.annotation.SuppressLint;\n-import android.os.Handler;\n-import android.os.Message;\n-import android.util.Log;\n-\n /**\n  * A terminal session, consisting of a process coupled to a terminal interface.\n  * <p>\n@@ -190,10 +193,6 @@ public void run() {\n \t\t\t\t\t}\n \t\t\t\t} catch (Exception e) {\n \t\t\t\t\t// Ignore, just shutting down.\n-\t\t\t\t} finally {\n-\t\t\t\t\t// Now wait for process exit:\n-\t\t\t\t\tint processExitCode = JNI.waitFor(mShellPid);\n-\t\t\t\t\tmMainThreadHandler.sendMessage(mMainThreadHandler.obtainMessage(MSG_PROCESS_EXITED, processExitCode));\n \t\t\t\t}\n \t\t\t}\n \t\t}.start();\n@@ -213,7 +212,16 @@ public void run() {\n \t\t\t\t}\n \t\t\t}\n \t\t}.start();\n-\t}\n+\n+        new Thread(\"TermSessionWaiter[pid=\" + mShellPid + \"]\") {\n+            @Override\n+            public void run() {\n+                int processExitCode = JNI.waitFor(mShellPid);\n+                mMainThreadHandler.sendMessage(mMainThreadHandler.obtainMessage(MSG_PROCESS_EXITED, processExitCode));\n+            }\n+        }.start();\n+\n+    }\n \n \t/** Write data to the shell process. */\n \t@Override\n@@ -273,20 +281,16 @@ public void reset() {\n \t\tnotifyScreenUpdate();\n \t}\n \n-\t/**\n-\t * Finish this terminal session. Frees resources used by the terminal emulator and closes the attached\n-\t * <code>InputStream</code> and <code>OutputStream</code>.\n-\t */\n-\tpublic void finishIfRunning() {\n-\t\tif (isRunning()) {\n-\t\t\tJNI.hangupProcessGroup(mShellPid);\n-\t\t\t// Stop the reader and writer threads, and close the I/O streams. Note that\n-\t\t\t// cleanupResources() will be run later.\n-\t\t\tmTerminalToProcessIOQueue.close();\n-\t\t\tmProcessToTerminalIOQueue.close();\n-\t\t\tJNI.close(mTerminalFileDescriptor);\n-\t\t}\n-\t}\n+    /** Finish this terminal session by sending SIGKILL to the shell. */\n+    public void finishIfRunning() {\n+        if (isRunning()) {\n+            try {\n+                Os.kill(mShellPid, OsConstants.SIGKILL);\n+            } catch (ErrnoException e) {\n+                Log.w(\"termux\", \"Failed sending SIGKILL: \" + e.getMessage());\n+            }\n+        }\n+    }\n \n \t/** Cleanup resources when the process exits. */\n \tvoid cleanupResources(int exitStatus) {",
    "output": "Change session exit detection\n\nPreviously we waited for all opened file descriptors to the terminal\nto be closed. This caused problem when e.g. running \"sleep 900 &\"\nand then exiting the shell, with sleep keeping the session alive and\nhad to be killed manually (killing the process group did not help -\nthe shell had already exited and was in zombie state). This is also\nwhat most other terminal emulators do.\n\nRelatedly, switch to sending SIGKILL to force quit a session instead\nof SIGHUP, since SIGHUP can be ignored."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -1,14 +1,18 @@\n package com.termux.app;\n \n import android.content.Context;\n+import android.os.SystemClock;\n import android.util.AttributeSet;\n+import android.util.Log;\n import android.view.Gravity;\n import android.view.KeyEvent;\n import android.view.View;\n import android.widget.Button;\n import android.widget.GridLayout;\n import android.widget.ToggleButton;\n \n+import com.termux.R;\n+import com.termux.terminal.TerminalSession;\n import com.termux.view.TerminalView;\n \n /**\n@@ -25,15 +29,27 @@ public ExtraKeysView(Context context, AttributeSet attrs) {\n         reload();\n     }\n \n-    private static int keyNameToKeyCode(String keyName) {\n+    private static void sendKey(View view, String keyName) {\n+        int keyCode = 0;\n+        String chars = null;\n         switch (keyName) {\n-            case \"ESC\": return KeyEvent.KEYCODE_ESCAPE;\n-            case \"TAB\": return KeyEvent.KEYCODE_TAB;\n-            case \"▲\": return KeyEvent.KEYCODE_DPAD_UP;\n-            case \"◀\": return KeyEvent.KEYCODE_DPAD_LEFT;\n-            case \"▶\": return KeyEvent.KEYCODE_DPAD_RIGHT;\n-            case \"▼\": return KeyEvent.KEYCODE_DPAD_DOWN;\n-            default: return -1;\n+            case \"ESC\": keyCode = KeyEvent.KEYCODE_ESCAPE; break;\n+            case \"TAB\": keyCode = KeyEvent.KEYCODE_TAB; break;\n+            case \"▲\": keyCode = KeyEvent.KEYCODE_DPAD_UP; break;\n+            case \"◀\": keyCode = KeyEvent.KEYCODE_DPAD_LEFT; break;\n+            case \"▶\": keyCode = KeyEvent.KEYCODE_DPAD_RIGHT; break;\n+            case \"▼\": keyCode = KeyEvent.KEYCODE_DPAD_DOWN; break;\n+            case \"―\": chars = \"-\"; break;\n+            default: chars = keyName;\n+        }\n+\n+        if (keyCode > 0) {\n+            view.dispatchKeyEvent(new KeyEvent(KeyEvent.ACTION_DOWN, keyCode));\n+            view.dispatchKeyEvent(new KeyEvent(KeyEvent.ACTION_UP, keyCode));\n+        } else {\n+            TerminalView terminalView = (TerminalView) view.findViewById(R.id.terminal_view);\n+            TerminalSession session = terminalView.getCurrentSession();\n+            if (session != null) session.write(chars);\n         }\n     }\n \n@@ -42,6 +58,7 @@ private static int keyNameToKeyCode(String keyName) {\n     private ToggleButton fnButton;\n \n     public boolean readControlButton() {\n+        if (controlButton.isPressed()) return true;\n         boolean result = controlButton.isChecked();\n         if (result) {\n             controlButton.setChecked(false);\n@@ -51,6 +68,7 @@ public boolean readControlButton() {\n     }\n \n     public boolean readAltButton() {\n+        if (altButton.isPressed()) return true;\n         boolean result = altButton.isChecked();\n         if (result) {\n             altButton.setChecked(false);\n@@ -60,6 +78,7 @@ public boolean readAltButton() {\n     }\n \n     public boolean readFnButton() {\n+        if (fnButton.isPressed()) return true;\n         boolean result = fnButton.isChecked();\n         if (result) {\n             fnButton.setChecked(false);\n@@ -73,7 +92,7 @@ void reload() {\n         removeAllViews();\n \n         String[][] buttons = {\n-            {\"ESC\", \"CTRL\", \"ALT\", \"▲\", \"▼\", \"◀\", \"▶\"}\n+            {\"ESC\", \"CTRL\", \"ALT\", \"TAB\", \"―\", \"/\", \"|\"}\n         };\n \n         final int rows = buttons.length;\n@@ -90,12 +109,15 @@ void reload() {\n                 switch (buttonText) {\n                     case \"CTRL\":\n                         button = controlButton = new ToggleButton(getContext(), null, android.R.attr.buttonBarButtonStyle);\n+                        button.setClickable(true);\n                         break;\n                     case \"ALT\":\n                         button = altButton = new ToggleButton(getContext(), null, android.R.attr.buttonBarButtonStyle);\n+                        button.setClickable(true);\n                         break;\n                     case \"FN\":\n                         button = fnButton = new ToggleButton(getContext(), null, android.R.attr.buttonBarButtonStyle);\n+                        button.setClickable(true);\n                         break;\n                     default:\n                         button = new Button(getContext(), null, android.R.attr.buttonBarButtonStyle);\n@@ -119,9 +141,7 @@ public void onClick(View v) {\n                                 self.setTextColor(self.isChecked() ? 0xFF80DEEA : TEXT_COLOR);\n                                 break;\n                             default:\n-                                int keyCode = keyNameToKeyCode(buttonText);\n-                                root.dispatchKeyEvent(new KeyEvent(KeyEvent.ACTION_DOWN, keyCode));\n-                                root.dispatchKeyEvent(new KeyEvent(KeyEvent.ACTION_UP, keyCode));\n+                                sendKey(root, buttonText);\n                                 break;\n                         }\n                     }",
    "output": "Extra keys view: Implement sending text"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -66,7 +66,6 @@\n import com.termux.view.TerminalKeyListener;\n import com.termux.view.TerminalView;\n \n-import java.nio.charset.StandardCharsets;\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.LinkedHashSet;\n\ndiff --git a/app/src/main/java/com/termux/view/TerminalView.java b/app/src/main/java/com/termux/view/TerminalView.java\n--- a/app/src/main/java/com/termux/view/TerminalView.java\n+++ b/app/src/main/java/com/termux/view/TerminalView.java\n@@ -49,9 +49,9 @@ public final class TerminalView extends View {\n     /** Log view key and IME events. */\n     private static final boolean LOG_KEY_EVENTS = false;\n \n-    public static interface KeyboardModifiers {\n-        public boolean readControlButton();\n-        public boolean readAltButton();\n+    public interface KeyboardModifiers {\n+        boolean readControlButton();\n+        boolean readAltButton();\n     }\n \n     public KeyboardModifiers mModifiers;\n@@ -219,7 +219,7 @@ public void setOnKeyListener(TerminalKeyListener onKeyListener) {\n \n \t/**\n \t * Attach a {@link TerminalSession} to this view.\n-\t * \n+\t *\n \t * @param session\n \t *            The {@link TerminalSession} this view will be displaying.\n \t */\n@@ -369,7 +369,7 @@ public void onScreenUpdated() {\n \n \t/**\n \t * Sets the text size, which in turn sets the number of rows and columns.\n-\t * \n+\t *\n \t * @param textSize\n \t *            the new font size, in density-independent pixels.\n \t */\n@@ -728,7 +728,7 @@ public boolean handleKeyCode(int keyCode, int keyMod) {\n \n \t/**\n \t * Called when a key is released in the view.\n-\t * \n+\t *\n \t * @param keyCode\n \t *            The keycode of the key which was released.\n \t * @param event",
    "output": "Remove some inspect code warnings"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/ExtraKeysView.java b/app/src/main/java/com/termux/app/ExtraKeysView.java\n--- a/app/src/main/java/com/termux/app/ExtraKeysView.java\n+++ b/app/src/main/java/com/termux/app/ExtraKeysView.java\n@@ -0,0 +1,144 @@\n+package com.termux.app;\n+\n+import android.content.Context;\n+import android.util.AttributeSet;\n+import android.view.Gravity;\n+import android.view.KeyEvent;\n+import android.view.View;\n+import android.widget.Button;\n+import android.widget.GridLayout;\n+import android.widget.ToggleButton;\n+\n+import com.termux.view.TerminalView;\n+\n+/**\n+ * A view showing extra keys (such as Escape, Ctrl, Alt) not normally available on an Android soft\n+ * keyboard.\n+ */\n+public final class ExtraKeysView extends GridLayout implements TerminalView.KeyboardModifiers {\n+\n+    private static final int TEXT_COLOR = 0xFFFFFFFF;\n+\n+    public ExtraKeysView(Context context, AttributeSet attrs) {\n+        super(context, attrs);\n+\n+        reload();\n+    }\n+\n+    private static int keyNameToKeyCode(String keyName) {\n+        switch (keyName) {\n+            case \"ESC\": return KeyEvent.KEYCODE_ESCAPE;\n+            case \"TAB\": return KeyEvent.KEYCODE_TAB;\n+            case \"▲\": return KeyEvent.KEYCODE_DPAD_UP;\n+            case \"◀\": return KeyEvent.KEYCODE_DPAD_LEFT;\n+            case \"▶\": return KeyEvent.KEYCODE_DPAD_RIGHT;\n+            case \"▼\": return KeyEvent.KEYCODE_DPAD_DOWN;\n+            default: return -1;\n+        }\n+    }\n+\n+    private ToggleButton controlButton;\n+    private ToggleButton altButton;\n+    private ToggleButton fnButton;\n+\n+    public boolean readControlButton() {\n+        boolean result = controlButton.isChecked();\n+        if (result) {\n+            controlButton.setChecked(false);\n+            controlButton.setTextColor(TEXT_COLOR);\n+        }\n+        return result;\n+    }\n+\n+    public boolean readAltButton() {\n+        boolean result = altButton.isChecked();\n+        if (result) {\n+            altButton.setChecked(false);\n+            altButton.setTextColor(TEXT_COLOR);\n+        }\n+        return result;\n+    }\n+\n+    public boolean readFnButton() {\n+        boolean result = fnButton.isChecked();\n+        if (result) {\n+            fnButton.setChecked(false);\n+            fnButton.setTextColor(TEXT_COLOR);\n+        }\n+        return result;\n+    }\n+\n+    void reload() {\n+        altButton = controlButton = null;\n+        removeAllViews();\n+\n+        String[][] buttons = {\n+            {\"ESC\", \"CTRL\", \"ALT\", \"▲\", \"▼\", \"◀\", \"▶\"}\n+        };\n+\n+        final int rows = buttons.length;\n+        final int cols = buttons[0].length;\n+\n+        setRowCount(rows);\n+        setColumnCount(cols);\n+\n+        for (int row = 0; row < rows; row++) {\n+            for (int col = 0; col < cols; col++) {\n+                final String buttonText = buttons[row][col];\n+\n+                Button button;\n+                switch (buttonText) {\n+                    case \"CTRL\":\n+                        button = controlButton = new ToggleButton(getContext(), null, android.R.attr.buttonBarButtonStyle);\n+                        break;\n+                    case \"ALT\":\n+                        button = altButton = new ToggleButton(getContext(), null, android.R.attr.buttonBarButtonStyle);\n+                        break;\n+                    case \"FN\":\n+                        button = fnButton = new ToggleButton(getContext(), null, android.R.attr.buttonBarButtonStyle);\n+                        break;\n+                    default:\n+                        button = new Button(getContext(), null, android.R.attr.buttonBarButtonStyle);\n+                        break;\n+                }\n+\n+                button.setText(buttonText);\n+                button.setTextColor(TEXT_COLOR);\n+\n+                final Button finalButton = button;\n+                button.setOnClickListener(new OnClickListener() {\n+                    @Override\n+                    public void onClick(View v) {\n+                        View root = getRootView();\n+                        switch (buttonText) {\n+                            case \"CTRL\":\n+                            case \"ALT\":\n+                            case \"FN\":\n+                                ToggleButton self = (ToggleButton) finalButton;\n+                                self.setChecked(self.isChecked());\n+                                self.setTextColor(self.isChecked() ? 0xFF80DEEA : TEXT_COLOR);\n+                                break;\n+                            default:\n+                                int keyCode = keyNameToKeyCode(buttonText);\n+                                root.dispatchKeyEvent(new KeyEvent(KeyEvent.ACTION_DOWN, keyCode));\n+                                root.dispatchKeyEvent(new KeyEvent(KeyEvent.ACTION_UP, keyCode));\n+                                break;\n+                        }\n+                    }\n+                });\n+\n+                GridLayout.LayoutParams param = new GridLayout.LayoutParams();\n+                param.height = param.width = 0;\n+                param.rightMargin = param.topMargin = 0;\n+                param.setGravity(Gravity.LEFT);\n+                float weight = \"▲▼◀▶\".contains(buttonText) ? 0.7f : 1.f;\n+                param.columnSpec = GridLayout.spec(col, weight);\n+                param.rowSpec = GridLayout.spec(row, 1.f);\n+                button.setLayoutParams(param);\n+\n+                addView(button);\n+            }\n+        }\n+    }\n+\n+}",
    "output": "Add an extra keys view"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/view/TerminalView.java b/app/src/main/java/com/termux/view/TerminalView.java\n--- a/app/src/main/java/com/termux/view/TerminalView.java\n+++ b/app/src/main/java/com/termux/view/TerminalView.java\n@@ -46,8 +46,15 @@\n /** View displaying and interacting with a {@link TerminalSession}. */\n public final class TerminalView extends View {\n \n-\t/** Log view key and IME events. */\n-\tprivate static final boolean LOG_KEY_EVENTS = false;\n+    /** Log view key and IME events. */\n+    private static final boolean LOG_KEY_EVENTS = false;\n+\n+    public static interface KeyboardModifiers {\n+        public boolean readControlButton();\n+        public boolean readAltButton();\n+    }\n+\n+    public KeyboardModifiers mModifiers;\n \n \t/** The currently displayed terminal session, whose emulator is {@link #mEmulator}. */\n \tTerminalSession mTermSession;\n@@ -601,8 +608,15 @@ void inputCodePoint(int codePoint, boolean controlDownFromEvent, boolean leftAlt\n \t\t\t\t\t+ leftAltDownFromEvent + \")\");\n \t\t}\n \n+        boolean controlDown = controlDownFromEvent || mVirtualControlKeyDown;\n+        boolean altDown = leftAltDownFromEvent;\n+        if (mModifiers != null) {\n+            if (mModifiers.readControlButton()) controlDown = true;\n+            if (mModifiers.readAltButton()) altDown = true;\n+        }\n+\n \t\tint resultingKeyCode = -1; // Set if virtual key causes this to be translated to key event.\n-\t\tif (controlDownFromEvent || mVirtualControlKeyDown) {\n+\t\tif (controlDown) {\n \t\t\tif (codePoint >= 'a' && codePoint <= 'z') {\n \t\t\t\tcodePoint = codePoint - 'a' + 1;\n \t\t\t} else if (codePoint >= 'A' && codePoint <= 'Z') {\n@@ -666,7 +680,7 @@ void inputCodePoint(int codePoint, boolean controlDownFromEvent, boolean leftAlt\n                 case 'f': // alf+f, jumping forward in readline.\n                 case 'x': // alt+x, common in emacs.\n                     codePoint = lowerCase;\n-                    leftAltDownFromEvent = true;\n+                    altDown = true;\n                     break;\n \n                 // Volume control.\n@@ -698,7 +712,7 @@ void inputCodePoint(int codePoint, boolean controlDownFromEvent, boolean leftAlt\n \t\t\t\t}\n \n \t\t\t\t// If left alt, send escape before the code point to make e.g. Alt+B and Alt+F work in readline:\n-\t\t\t\tmTermSession.writeCodePoint(leftAltDownFromEvent, codePoint);\n+\t\t\t\tmTermSession.writeCodePoint(altDown, codePoint);\n \t\t\t}\n \t\t}\n \t}\n@@ -770,7 +784,7 @@ public void checkForFontAndColors() {\n \t\t\tTerminalColors.COLOR_SCHEME.updateWith(props);\n \t\t\tif (mEmulator != null) mEmulator.mColors.reset();\n \n-\t\t\tfinal Typeface newTypeface = fontFile.exists() ? Typeface.createFromFile(fontFile) : Typeface.MONOSPACE;\n+\t\t\tfinal Typeface newTypeface = (fontFile.exists() && fontFile.length() > 0) ? Typeface.createFromFile(fontFile) : Typeface.MONOSPACE;\n \t\t\tmRenderer = new TerminalRenderer(mRenderer.mTextSize, newTypeface);\n \t\t\tupdateSize();\n ",
    "output": "TerminalView: Start support for extra keys"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxPreferences.java b/app/src/main/java/com/termux/app/TermuxPreferences.java\n--- a/app/src/main/java/com/termux/app/TermuxPreferences.java\n+++ b/app/src/main/java/com/termux/app/TermuxPreferences.java\n@@ -30,6 +30,7 @@ final class TermuxPreferences {\n \tprivate static final int MAX_FONTSIZE = 256;\n \n \tprivate static final String FULLSCREEN_KEY = \"fullscreen\";\n+    private static final String SHOW_EXTRA_KEYS_KEY = \"show_extra_keys\";\n \tprivate static final String FONTSIZE_KEY = \"fontsize\";\n \tprivate static final String CURRENT_SESSION_KEY = \"current_session\";\n \tprivate static final String SHOW_WELCOME_DIALOG_KEY = \"intro_dialog\";\n@@ -40,7 +41,8 @@ final class TermuxPreferences {\n \t@AsciiBellBehaviour\n \tint mBellBehaviour = BELL_VIBRATE;\n \n-\tboolean mBackIsEscape = true;\n+    boolean mBackIsEscape;\n+    boolean mShowExtraKeys;\n \n \tTermuxPreferences(Context context) {\n \t\treloadFromProperties(context);\n@@ -53,6 +55,7 @@ final class TermuxPreferences {\n \t\tMIN_FONTSIZE = (int) (4f * dipInPixels);\n \n \t\tmFullScreen = prefs.getBoolean(FULLSCREEN_KEY, false);\n+        mShowExtraKeys = prefs.getBoolean(SHOW_EXTRA_KEYS_KEY, false);\n \n \t\t// http://www.google.com/design/spec/style/typography.html#typography-line-height\n \t\tint defaultFontSize = Math.round(12 * dipInPixels);\n@@ -73,11 +76,19 @@ boolean isFullScreen() {\n \n \tvoid setFullScreen(Context context, boolean newValue) {\n \t\tmFullScreen = newValue;\n-\t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n-\t\tprefs.edit().putBoolean(FULLSCREEN_KEY, newValue).apply();\n+        PreferenceManager.getDefaultSharedPreferences(context).edit().putBoolean(FULLSCREEN_KEY, newValue).apply();\n \t}\n \n-\tint getFontSize() {\n+    boolean isShowExtraKeys() {\n+        return mShowExtraKeys;\n+    }\n+\n+    void toggleShowExtraKeys(Context context) {\n+        mShowExtraKeys = !mShowExtraKeys;\n+        PreferenceManager.getDefaultSharedPreferences(context).edit().putBoolean(SHOW_EXTRA_KEYS_KEY, mShowExtraKeys).apply();\n+    }\n+\n+    int getFontSize() {\n \t\treturn mFontSize;\n \t}\n ",
    "output": "Add pref for showing extra keys"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/view/TerminalView.java b/app/src/main/java/com/termux/view/TerminalView.java\n--- a/app/src/main/java/com/termux/view/TerminalView.java\n+++ b/app/src/main/java/com/termux/view/TerminalView.java\n@@ -258,43 +258,18 @@ public boolean beginBatchEdit() {\n \t\t\t\treturn true;\n \t\t\t}\n \n-\t\t\t@Override\n-\t\t\tpublic boolean clearMetaKeyStates(int states) {\n-\t\t\t\tif (LOG_KEY_EVENTS) Log.i(EmulatorDebug.LOG_TAG, \"IME: clearMetaKeyStates(\" + states + \")\");\n-\t\t\t\treturn true;\n-\t\t\t}\n-\n \t\t\t@Override\n \t\t\tpublic boolean endBatchEdit() {\n \t\t\t\tif (LOG_KEY_EVENTS) Log.i(EmulatorDebug.LOG_TAG, \"IME: endBatchEdit()\");\n \t\t\t\treturn false;\n \t\t\t}\n \n-\t\t\t@Override\n-\t\t\tpublic boolean finishComposingText() {\n-\t\t\t\tif (LOG_KEY_EVENTS) Log.i(EmulatorDebug.LOG_TAG, \"IME: finishComposingText()\");\n-\t\t\t\treturn true;\n-\t\t\t}\n-\n-\t\t\t@Override\n-\t\t\tpublic int getCursorCapsMode(int reqModes) {\n-\t\t\t\tif (LOG_KEY_EVENTS) Log.i(EmulatorDebug.LOG_TAG, \"IME: getCursorCapsMode(\" + reqModes + \")\");\n-\t\t\t\tint mode = 0;\n-\t\t\t\tif ((reqModes & TextUtils.CAP_MODE_CHARACTERS) != 0) {\n-\t\t\t\t\tmode |= TextUtils.CAP_MODE_CHARACTERS;\n-\t\t\t\t}\n-\t\t\t\treturn mode;\n-\t\t\t}\n-\n-\t\t\t@Override\n-\t\t\tpublic CharSequence getTextAfterCursor(int n, int flags) {\n-\t\t\t\treturn \"\";\n-\t\t\t}\n-\n-\t\t\t@Override\n-\t\t\tpublic CharSequence getTextBeforeCursor(int n, int flags) {\n-\t\t\t\treturn \"\";\n-\t\t\t}\n+            @Override\n+            public boolean finishComposingText() {\n+                if (LOG_KEY_EVENTS) Log.i(EmulatorDebug.LOG_TAG, \"IME: finishComposingText()\");\n+                commitText(getEditable(), 0);\n+                return true;\n+            }\n \n \t\t\t@Override\n \t\t\tpublic boolean commitText(CharSequence text, int newCursorPosition) {",
    "output": "Commit the text on finishComposingText()\n\nThis handles e.g. text written with hand writing input methods\nas mentioned in #91."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/view/TerminalView.java b/app/src/main/java/com/termux/view/TerminalView.java\n--- a/app/src/main/java/com/termux/view/TerminalView.java\n+++ b/app/src/main/java/com/termux/view/TerminalView.java\n@@ -821,8 +821,8 @@ public void updateSize() {\n \t\tif (viewWidth == 0 || viewHeight == 0 || mTermSession == null) return;\n \n \t\t// Set to 80 and 24 if you want to enable vttest.\n-\t\tint newColumns = Math.max(8, (int) (viewWidth / mRenderer.mFontWidth));\n-\t\tint newRows = Math.max(8, (viewHeight - mRenderer.mFontLineSpacingAndAscent) / mRenderer.mFontLineSpacing);\n+\t\tint newColumns = Math.max(4, (int) (viewWidth / mRenderer.mFontWidth));\n+\t\tint newRows = Math.max(4, (viewHeight - mRenderer.mFontLineSpacingAndAscent) / mRenderer.mFontLineSpacing);\n \n \t\tif (mEmulator == null || (newColumns != mEmulator.mColumns || newRows != mEmulator.mRows)) {\n \t\t\tmTermSession.updateSize(newColumns, newRows);",
    "output": "Change minimum cols&rows from 8 to 4\n\nThis avoids e.g. the keyboard overlapping the terminal in setups\nthat can actually happen. Closes #88."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/terminal/TerminalColorScheme.java b/app/src/main/java/com/termux/terminal/TerminalColorScheme.java\n--- a/app/src/main/java/com/termux/terminal/TerminalColorScheme.java\n+++ b/app/src/main/java/com/termux/terminal/TerminalColorScheme.java\n@@ -65,7 +65,7 @@ public TerminalColorScheme() {\n \t\treset();\n \t}\n \n-\tpublic void reset() {\n+\tprivate void reset() {\n \t\tSystem.arraycopy(DEFAULT_COLORSCHEME, 0, mDefaultColors, 0, TextStyle.NUM_INDEXED_COLORS);\n \t}\n ",
    "output": "Mark reset() private"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -389,6 +389,9 @@ public void onBell(TerminalSession session) {\n \t\t\t\t\t\tcase TermuxPreferences.BELL_VIBRATE:\n \t\t\t\t\t\t\t((Vibrator) getSystemService(VIBRATOR_SERVICE)).vibrate(50);\n \t\t\t\t\t\t\tbreak;\n+                        case TermuxPreferences.BELL_IGNORE:\n+                            // Ignore the bell character.\n+                            break;\n \t\t\t\t\t}\n \n \t\t\t\t}",
    "output": "Add explicit handling of switch constant"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/filepicker/TermuxDocumentsProvider.java b/app/src/main/java/com/termux/filepicker/TermuxDocumentsProvider.java\n--- a/app/src/main/java/com/termux/filepicker/TermuxDocumentsProvider.java\n+++ b/app/src/main/java/com/termux/filepicker/TermuxDocumentsProvider.java\n@@ -64,7 +64,7 @@ public Cursor queryRoots(String[] projection) throws FileNotFoundException {\n         row.add(Root.COLUMN_ROOT_ID, getDocIdForFile(BASE_DIR));\n         row.add(Root.COLUMN_DOCUMENT_ID, getDocIdForFile(BASE_DIR));\n         row.add(Root.COLUMN_SUMMARY, null);\n-        row.add(Root.COLUMN_FLAGS, Root.FLAG_SUPPORTS_CREATE | Root.FLAG_SUPPORTS_RECENTS | Root.FLAG_SUPPORTS_SEARCH);\n+        row.add(Root.COLUMN_FLAGS, Root.FLAG_SUPPORTS_CREATE | Root.FLAG_SUPPORTS_SEARCH);\n         row.add(Root.COLUMN_TITLE, applicationName);\n         row.add(Root.COLUMN_MIME_TYPES, ALL_MIME_TYPES);\n         row.add(Root.COLUMN_AVAILABLE_BYTES, BASE_DIR.getFreeSpace());",
    "output": "Documents provider: Remove FLAG_SUPPORTS_RECENTS"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/view/TerminalView.java b/app/src/main/java/com/termux/view/TerminalView.java\n--- a/app/src/main/java/com/termux/view/TerminalView.java\n+++ b/app/src/main/java/com/termux/view/TerminalView.java\n@@ -652,52 +652,55 @@ void inputCodePoint(int codePoint, boolean controlDownFromEvent, boolean leftAlt\n \t\t\t\tresultingKeyCode = KeyEvent.KEYCODE_F12;\n \t\t\t}\n \t\t} else if (mVirtualFnKeyDown) {\n-\t\t\tif (codePoint == 'w' || codePoint == 'W') {\n-\t\t\t\tresultingKeyCode = KeyEvent.KEYCODE_DPAD_UP;\n-\t\t\t} else if (codePoint == 'a' || codePoint == 'A') {\n-\t\t\t\tresultingKeyCode = KeyEvent.KEYCODE_DPAD_LEFT;\n-\t\t\t} else if (codePoint == 's' || codePoint == 'S') {\n-\t\t\t\tresultingKeyCode = KeyEvent.KEYCODE_DPAD_DOWN;\n-\t\t\t} else if (codePoint == 'd' || codePoint == 'D') {\n-\t\t\t\tresultingKeyCode = KeyEvent.KEYCODE_DPAD_RIGHT;\n-\t\t\t} else if (codePoint == 'p' || codePoint == 'P') {\n-\t\t\t\tresultingKeyCode = KeyEvent.KEYCODE_PAGE_UP;\n-\t\t\t} else if (codePoint == 'n' || codePoint == 'N') {\n-\t\t\t\tresultingKeyCode = KeyEvent.KEYCODE_PAGE_DOWN;\n-\t\t\t} else if (codePoint == 't' || codePoint == 'T') {\n-\t\t\t\tresultingKeyCode = KeyEvent.KEYCODE_TAB;\n-\t\t\t} else if (codePoint == 'l' || codePoint == 'L') {\n-\t\t\t\tcodePoint = '|';\n-\t\t\t} else if (codePoint == 'u' || codePoint == 'U') {\n-\t\t\t\tcodePoint = '_';\n-\t\t\t} else if (codePoint == 'e' || codePoint == 'E') {\n-\t\t\t\tcodePoint = 27; // ^[ (Esc)\n-\t\t\t} else if (codePoint == '.') {\n-\t\t\t\tcodePoint = 28; // ^\\\n-\t\t\t} else if (codePoint > '0' && codePoint <= '9') {\n-\t\t\t\t// F1-F9\n-\t\t\t\tresultingKeyCode = (codePoint - '1') + KeyEvent.KEYCODE_F1;\n-\t\t\t} else if (codePoint == '0') {\n-\t\t\t\tresultingKeyCode = KeyEvent.KEYCODE_F10;\n-\t\t\t} else if (codePoint == 'i' || codePoint == 'I') {\n-\t\t\t\tresultingKeyCode = KeyEvent.KEYCODE_INSERT;\n-\t\t\t} else if (codePoint == 'x' || codePoint == 'X') {\n-\t\t\t\tresultingKeyCode = KeyEvent.KEYCODE_FORWARD_DEL;\n-\t\t\t} else if (codePoint == 'h' || codePoint == 'H') {\n-\t\t\t\tresultingKeyCode = KeyEvent.KEYCODE_MOVE_HOME;\n-\t\t\t} else if (codePoint == 'f' || codePoint == 'F') {\n-\t\t\t\t// As left alt+f, jumping forward in readline:\n-\t\t\t\tcodePoint = 'f';\n-\t\t\t\tleftAltDownFromEvent = true;\n-\t\t\t} else if (codePoint == 'b' || codePoint == 'B') {\n-\t\t\t\t// As left alt+b, jumping forward in readline:\n-\t\t\t\tcodePoint = 'b';\n-\t\t\t\tleftAltDownFromEvent = true;\n-\t\t\t} else if (codePoint == 'v' || codePoint == 'V') {\n-\t\t\t\tcodePoint = -1;\n-\t\t\t\tAudioManager audio = (AudioManager) getContext().getSystemService(Context.AUDIO_SERVICE);\n-\t\t\t\taudio.adjustSuggestedStreamVolume(AudioManager.ADJUST_SAME, AudioManager.USE_DEFAULT_STREAM_TYPE, AudioManager.FLAG_SHOW_UI);\n-\t\t\t}\n+            int lowerCase = Character.toLowerCase(codePoint);\n+            switch (lowerCase) {\n+                // Arrow keys.\n+                case 'w': resultingKeyCode = KeyEvent.KEYCODE_DPAD_UP; break;\n+                case 'a': resultingKeyCode = KeyEvent.KEYCODE_DPAD_LEFT; break;\n+                case 's': resultingKeyCode = KeyEvent.KEYCODE_DPAD_DOWN; break;\n+                case 'd': resultingKeyCode = KeyEvent.KEYCODE_DPAD_RIGHT; break;\n+\n+                // Page up and down.\n+                case 'p': resultingKeyCode = KeyEvent.KEYCODE_PAGE_UP; break;\n+                case 'n': resultingKeyCode = KeyEvent.KEYCODE_PAGE_DOWN; break;\n+\n+                // Some special keys:\n+                case 't': resultingKeyCode = KeyEvent.KEYCODE_TAB; break;\n+                case 'i': resultingKeyCode = KeyEvent.KEYCODE_INSERT; break;\n+                case 'h': resultingKeyCode = KeyEvent.KEYCODE_MOVE_HOME; break;\n+\n+                // Special characters to input.\n+                case 'u': codePoint = '_'; break;\n+                case 'l': codePoint = '|'; break;\n+\n+                // Function keys.\n+                case '1': case '2': case '3':\n+                case '4': case '5': case '6':\n+                case '7': case '8': case '9':\n+                    resultingKeyCode = (codePoint - '1') + KeyEvent.KEYCODE_F1;\n+                    break;\n+                case '0':\n+                    resultingKeyCode = KeyEvent.KEYCODE_F10;\n+                    break;\n+\n+                // Other special keys.\n+                case 'e': codePoint = /*Escape*/ 27; break;\n+                case '.': codePoint = /*^.*/ 28; break;\n+\n+                case 'b': // alt+b, jumping backward in readline.\n+                case 'f': // alf+f, jumping forward in readline.\n+                case 'x': // alt+x, common in emacs.\n+                    codePoint = lowerCase;\n+                    leftAltDownFromEvent = true;\n+                    break;\n+\n+                // Volume control.\n+                case 'v':\n+                    codePoint = -1;\n+                    AudioManager audio = (AudioManager) getContext().getSystemService(Context.AUDIO_SERVICE);\n+                    audio.adjustSuggestedStreamVolume(AudioManager.ADJUST_SAME, AudioManager.USE_DEFAULT_STREAM_TYPE, AudioManager.FLAG_SHOW_UI);\n+                    break;\n+            }\n \t\t}\n \n \t\tif (codePoint > -1) {",
    "output": "Make VolumeUp+x send Alt+x"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -17,7 +17,6 @@\n import android.content.IntentFilter;\n import android.content.ServiceConnection;\n import android.content.pm.PackageManager;\n-import android.content.res.Resources;\n import android.graphics.Color;\n import android.graphics.Paint;\n import android.graphics.Typeface;\n@@ -34,7 +33,6 @@\n import android.text.Spanned;\n import android.text.TextUtils;\n import android.text.style.StyleSpan;\n-import android.util.Log;\n import android.view.ContextMenu;\n import android.view.ContextMenu.ContextMenuInfo;\n import android.view.Gravity;",
    "output": "Remove unused imports"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java b/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java\n--- a/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java\n+++ b/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java\n@@ -119,54 +119,54 @@ void handleContentUri(final Uri uri, String subjectFromIntent) {\n     }\n \n     void promptNameAndSave(final InputStream in, final String attachmentFileName) {\n-        DialogUtils.textInput(this, R.string.file_received_title, attachmentFileName\n-            , android.R.string.ok, new DialogUtils.TextSetListener() {\n-            @Override\n-            public void onTextSet(final String text) {\n-                if (saveStreamWithName(in, text) == null) return;\n-                finish();\n-            }\n-        }, R.string.file_received_open_folder_button, new DialogUtils.TextSetListener() {\n-            @Override\n-            public void onTextSet(String text) {\n-                if (saveStreamWithName(in, text) == null) return;\n-\n-                Intent executeIntent = new Intent(TermuxService.ACTION_EXECUTE);\n-                executeIntent.putExtra(TermuxService.EXTRA_CURRENT_WORKING_DIRECTORY, TERMUX_RECEIVEDIR);\n-                executeIntent.setClass(TermuxFileReceiverActivity.this, TermuxService.class);\n-                startService(executeIntent);\n-                finish();\n-            }\n-        }, R.string.file_received_edit_button, new DialogUtils.TextSetListener() {\n-            @Override\n-            public void onTextSet(String text) {\n-                File outFile = saveStreamWithName(in, text);\n-                if (outFile == null) return;\n-\n-                final File editorProgramFile = new File(EDITOR_PROGRAM);\n-                if (!editorProgramFile.isFile()) {\n-                    showErrorDialogAndQuit(\"The following file does not exist:\\n$HOME/bin/termux-file-editor\\n\\n\"\n-                        + \"Create this file as a script or a symlink - it will be called with the received file as only argument.\");\n-                    return;\n+        DialogUtils.textInput(this, R.string.file_received_title, attachmentFileName, R.string.file_received_edit_button, new DialogUtils.TextSetListener() {\n+                @Override\n+                public void onTextSet(String text) {\n+                    File outFile = saveStreamWithName(in, text);\n+                    if (outFile == null) return;\n+\n+                    final File editorProgramFile = new File(EDITOR_PROGRAM);\n+                    if (!editorProgramFile.isFile()) {\n+                        showErrorDialogAndQuit(\"The following file does not exist:\\n$HOME/bin/termux-file-editor\\n\\n\"\n+                            + \"Create this file as a script or a symlink - it will be called with the received file as only argument.\");\n+                        return;\n+                    }\n+\n+                    // Do this for the user if necessary:\n+                    editorProgramFile.setExecutable(true);\n+\n+                    final Uri scriptUri = new Uri.Builder().scheme(\"file\").path(EDITOR_PROGRAM).build();\n+\n+                    Intent executeIntent = new Intent(TermuxService.ACTION_EXECUTE, scriptUri);\n+                    executeIntent.setClass(TermuxFileReceiverActivity.this, TermuxService.class);\n+                    executeIntent.putExtra(TermuxService.EXTRA_ARGUMENTS, new String[]{outFile.getAbsolutePath()});\n+                    startService(executeIntent);\n+                    finish();\n                 }\n-\n-                // Do this for the user if necessary:\n-                editorProgramFile.setExecutable(true);\n-\n-                final Uri scriptUri = new Uri.Builder().scheme(\"file\").path(EDITOR_PROGRAM).build();\n-\n-                Intent executeIntent = new Intent(TermuxService.ACTION_EXECUTE, scriptUri);\n-                executeIntent.setClass(TermuxFileReceiverActivity.this, TermuxService.class);\n-                executeIntent.putExtra(TermuxService.EXTRA_ARGUMENTS, new String[]{outFile.getAbsolutePath()});\n-                startService(executeIntent);\n-                finish();\n-            }\n-        }, new DialogInterface.OnDismissListener() {\n-            @Override\n-            public void onDismiss(DialogInterface dialog) {\n-                if (mFinishOnDismissNameDialog) finish();\n-            }\n-        });\n+            },\n+            R.string.file_received_open_folder_button, new DialogUtils.TextSetListener() {\n+                @Override\n+                public void onTextSet(String text) {\n+                    if (saveStreamWithName(in, text) == null) return;\n+\n+                    Intent executeIntent = new Intent(TermuxService.ACTION_EXECUTE);\n+                    executeIntent.putExtra(TermuxService.EXTRA_CURRENT_WORKING_DIRECTORY, TERMUX_RECEIVEDIR);\n+                    executeIntent.setClass(TermuxFileReceiverActivity.this, TermuxService.class);\n+                    startService(executeIntent);\n+                    finish();\n+                }\n+            },\n+            android.R.string.cancel, new DialogUtils.TextSetListener() {\n+                @Override\n+                public void onTextSet(final String text) {\n+                    finish();\n+                }\n+            }, new DialogInterface.OnDismissListener() {\n+                @Override\n+                public void onDismiss(DialogInterface dialog) {\n+                    if (mFinishOnDismissNameDialog) finish();\n+                }\n+            });\n     }\n \n     public File saveStreamWithName(InputStream in, String attachmentFileName) {",
    "output": "Tweak button ordering on the file received dialog"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxInstaller.java b/app/src/main/java/com/termux/app/TermuxInstaller.java\n--- a/app/src/main/java/com/termux/app/TermuxInstaller.java\n+++ b/app/src/main/java/com/termux/app/TermuxInstaller.java\n@@ -7,6 +7,7 @@\n import android.content.DialogInterface;\n import android.content.DialogInterface.OnClickListener;\n import android.content.DialogInterface.OnDismissListener;\n+import android.os.Build;\n import android.os.Environment;\n import android.system.Os;\n import android.util.Log;\n@@ -23,6 +24,7 @@\n import java.net.MalformedURLException;\n import java.net.URL;\n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.List;\n import java.util.zip.ZipEntry;\n import java.util.zip.ZipInputStream;\n@@ -178,16 +180,25 @@ public void run() {\n \n     /** Get bootstrap zip url for this systems cpu architecture. */\n     static URL determineZipUrl() throws MalformedURLException {\n-        String arch = System.getProperty(\"os.arch\");\n-        if (arch.startsWith(\"armv8\")) {\n-            arch = \"aarch64\";\n-        } else if (arch.startsWith(\"arm\")) {\n-            // Handle different arm variants such as armv7l:\n-            arch = \"arm\";\n-        } else if (arch.startsWith(\"x86\")) { // \"x86\" on arcwelder, \"x86_64\" on 64-bit android.\n-            arch = \"i686\";\n+        String termuxArch = null;\n+        // Note that we cannot use System.getProperty(\"os.arch\") since that may give e.g. \"aarch64\"\n+        // while a 64-bit runtime may not be installed (like on the Samsung Galaxy S5 Neo).\n+        // Instead we search through the supported abi:s on the device, see:\n+        // http://developer.android.com/ndk/guides/abis.html\n+        // Note that we search for abi:s in preferred order, and want to avoid installing arm on\n+        // an x86 system where arm emulation is available.\n+        final String[] androidArchNames = {\"arm64-v8a\", \"x86\", \"armeabi-v7a\"};\n+        final String[] termuxArchNames = {\"aarch64\", \"i686\", \"arm\"};\n+\n+        final List<String> supportedArches = Arrays.asList(Build.SUPPORTED_ABIS);\n+        for (int i = 0; i < termuxArchNames.length; i++) {\n+            if (supportedArches.contains(androidArchNames[i])) {\n+                termuxArch = termuxArchNames[i];\n+                break;\n+            }\n         }\n-        return new URL(\"https://termux.net/bootstrap/bootstrap-\" + arch + \".zip\");\n+\n+        return new URL(\"https://termux.net/bootstrap/bootstrap-\" + termuxArch + \".zip\");\n     }\n \n \t/** Delete a folder and all its content or throw. */",
    "output": "Fix installer to check supported abi:s\n\nThis fixes installation on e.g. the Samsung Galaxy S5 Neo which has\na 64-bit cpu but no 64-bit runtime available (closes #69)."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/filepicker/TermuxFilePickerActivity.java b/app/src/main/java/com/termux/filepicker/TermuxFilePickerActivity.java\n--- a/app/src/main/java/com/termux/filepicker/TermuxFilePickerActivity.java\n+++ b/app/src/main/java/com/termux/filepicker/TermuxFilePickerActivity.java\n@@ -1,6 +1,5 @@\n package com.termux.filepicker;\n \n-import android.annotation.SuppressLint;\n import android.app.Activity;\n import android.app.ListActivity;\n import android.content.Intent;\n@@ -12,6 +11,7 @@\n import android.widget.ListView;\n \n import com.termux.R;\n+import com.termux.app.TermuxService;\n \n import java.io.File;\n import java.util.ArrayList;\n@@ -23,9 +23,6 @@\n /** Activity allowing picking files from the $HOME folder. */\n public class TermuxFilePickerActivity extends ListActivity {\n \n-    @SuppressLint(\"SdCardPath\")\n-    final String TERMUX_HOME = \"/data/data/com.termux/files/home\";\n-\n     private File mCurrentDirectory;\n     private final List<File> mFiles = new ArrayList<>();\n     private final List<String> mFileNames = new ArrayList<>();\n@@ -38,7 +35,7 @@ protected void onCreate(Bundle savedInstanceState) {\n \n         mAdapter = new ArrayAdapter<>(this, android.R.layout.simple_list_item_1, mFileNames);\n \n-        enterDirectory(new File(TERMUX_HOME));\n+        enterDirectory(new File(TermuxService.HOME_PATH));\n         setListAdapter(mAdapter);\n     }\n \n@@ -69,11 +66,11 @@ protected void onListItemClick(ListView l, View v, int position, long id) {\n     }\n \n     void enterDirectory(File directory) {\n-        getActionBar().setDisplayHomeAsUpEnabled(!directory.getAbsolutePath().equals(TERMUX_HOME));\n+        getActionBar().setDisplayHomeAsUpEnabled(!directory.getAbsolutePath().equals(TermuxService.HOME_PATH));\n \n         String title = directory.getAbsolutePath() + \"/\";\n-        if (title.startsWith(TERMUX_HOME)) {\n-            title = \"~\" + title.substring(TERMUX_HOME.length(), title.length());\n+        if (title.startsWith(TermuxService.HOME_PATH)) {\n+            title = \"~\" + title.substring(TermuxService.HOME_PATH.length(), title.length());\n         }\n         setTitle(title);\n ",
    "output": "Avoid repetition of home path constant"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -34,6 +34,7 @@\n import android.text.Spanned;\n import android.text.TextUtils;\n import android.text.style.StyleSpan;\n+import android.util.Log;\n import android.view.ContextMenu;\n import android.view.ContextMenu.ContextMenuInfo;\n import android.view.Gravity;\n@@ -678,7 +679,13 @@ public void onShow(DialogInterface di) {\n \t\t\t\t\tpublic boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {\n \t\t\t\t\t\tdialog.dismiss();\n \t\t\t\t\t\tString url = (String) urls[position];\n-\t\t\t\t\t\tstartActivity(Intent.createChooser(new Intent(Intent.ACTION_VIEW, Uri.parse(url)), null));\n+                        Intent i = new Intent(Intent.ACTION_VIEW, Uri.parse(url));\n+                        try {\n+                            startActivity(i, null);\n+                        } catch (ActivityNotFoundException e) {\n+                            // If no applications match, Android displays a system message.\n+                            startActivity(Intent.createChooser(i, null));\n+                        }\n \t\t\t\t\t\treturn true;\n \t\t\t\t\t}\n \t\t\t\t});",
    "output": "Do not force chooser when opening url"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java b/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java\n--- a/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java\n+++ b/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java\n@@ -46,16 +46,6 @@ protected void onResume() {\n         final String type = intent.getType();\n         final String scheme = intent.getScheme();\n \n-        if (intent.getExtras() == null) {\n-            Log.e(\"termux\", \"NULL EXTRAS\");\n-        } else {\n-            for (String key : intent.getExtras().keySet()) {\n-                Object value = intent.getExtras().get(key);\n-                Log.d(\"termux\", String.format(\"Extra %s %s (%s)\", key,\n-                    value.toString(), value.getClass().getName()));\n-            }\n-        }\n-\n         if (Intent.ACTION_SEND.equals(action) && type != null) {\n             final String sharedText = intent.getStringExtra(Intent.EXTRA_TEXT);\n             final Uri sharedUri = intent.getParcelableExtra(Intent.EXTRA_STREAM);\n@@ -74,9 +64,9 @@ protected void onResume() {\n             } else {\n                 showErrorDialogAndQuit(\"Send action without content - nothing to save.\");\n             }\n-        } else if (scheme.equals(\"content\")) {\n+        } else if (\"content\".equals(scheme)) {\n             handleContentUri(intent.getData(), intent.getStringExtra(Intent.EXTRA_TITLE));\n-        } else if (scheme.equals(\"file\")) {\n+        } else if (\"file\".equals(scheme)) {\n             // When e.g. clicking on a downloaded apk:\n             String path = intent.getData().getPath();\n             File file = new File(path);\n@@ -87,7 +77,7 @@ protected void onResume() {\n                 showErrorDialogAndQuit(\"Cannot open file: \" + e.getMessage() + \".\");\n             }\n         } else {\n-            showErrorDialogAndQuit(\"Unhandled scheme: \" + intent.getScheme() + \".\");\n+            showErrorDialogAndQuit(\"Unable to receive any file or URL.\");\n         }\n     }\n ",
    "output": "Do not fail with NPE when scheme is null\n\nAlso remove some debug logging left by mistake."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/DialogUtils.java b/app/src/main/java/com/termux/app/DialogUtils.java\n--- a/app/src/main/java/com/termux/app/DialogUtils.java\n+++ b/app/src/main/java/com/termux/app/DialogUtils.java\n@@ -3,12 +3,10 @@\n import android.app.Activity;\n import android.app.AlertDialog;\n import android.content.DialogInterface;\n-import android.content.res.Configuration;\n import android.text.Selection;\n import android.util.TypedValue;\n import android.view.KeyEvent;\n import android.view.ViewGroup.LayoutParams;\n-import android.view.WindowManager;\n import android.widget.EditText;\n import android.widget.LinearLayout;\n import android.widget.TextView;\n\ndiff --git a/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java b/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java\n--- a/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java\n+++ b/app/src/main/java/com/termux/filepicker/TermuxFileReceiverActivity.java\n@@ -8,7 +8,6 @@\n import android.net.Uri;\n import android.provider.OpenableColumns;\n import android.util.Log;\n-import android.util.MutableBoolean;\n import android.util.Patterns;\n \n import com.termux.R;",
    "output": "Remove unused imports"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -290,7 +290,6 @@ public void onClick(View v) {\n         newSessionButton.setOnLongClickListener(new OnLongClickListener() {\n             @Override\n             public boolean onLongClick(View v) {\n-                Resources res = getResources();\n                 DialogUtils.textInput(TermuxActivity.this, R.string.session_new_named_title, null, R.string.session_new_named_positive_button,\n                         new DialogUtils.TextSetListener() {\n                             @Override",
    "output": "Remove unused variable"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -241,19 +241,22 @@ TerminalSession createTermSession(String executablePath, String[] arguments, Str\n \t\tfinal String prefixEnv = \"PREFIX=\" + PREFIX_PATH;\n \t\tfinal String androidRootEnv = \"ANDROID_ROOT=\" + System.getenv(\"ANDROID_ROOT\");\n \t\tfinal String androidDataEnv = \"ANDROID_DATA=\" + System.getenv(\"ANDROID_DATA\");\n+        // EXTERNAL_STORAGE is needed for /system/bin/am to work on at least\n+        // Samsung S7 - see https://plus.google.com/110070148244138185604/posts/gp8Lk3aCGp3.\n+        final String externalStorageEnv = \"EXTERNAL_STORAGE=\" + System.getenv(\"EXTERNAL_STORAGE\");\n \t\tString[] env;\n \t\tif (failSafe) {\n             // Keep the default path so that system binaries can be used in the failsafe session.\n             final String pathEnv = \"PATH=\" + System.getenv(\"PATH\");\n-            env = new String[] { termEnv, homeEnv, prefixEnv, androidRootEnv, androidDataEnv, pathEnv };\n+            env = new String[] { termEnv, homeEnv, prefixEnv, androidRootEnv, androidDataEnv, pathEnv, externalStorageEnv };\n \t\t} else {\n \t\t\tfinal String ps1Env = \"PS1=$ \";\n \t\t\tfinal String ldEnv = \"LD_LIBRARY_PATH=\" + PREFIX_PATH + \"/lib\";\n \t\t\tfinal String langEnv = \"LANG=en_US.UTF-8\";\n \t\t\tfinal String pathEnv = \"PATH=\" + PREFIX_PATH + \"/bin:\" + PREFIX_PATH + \"/bin/applets\";\n \t\t\tfinal String pwdEnv = \"PWD=\" + cwd;\n \n-\t\t\tenv = new String[] { termEnv, homeEnv, prefixEnv, ps1Env, ldEnv, langEnv, pathEnv, pwdEnv, androidRootEnv, androidDataEnv };\n+\t\t\tenv = new String[] { termEnv, homeEnv, prefixEnv, ps1Env, ldEnv, langEnv, pathEnv, pwdEnv, androidRootEnv, androidDataEnv, externalStorageEnv };\n \t\t}\n \n \t\tString shellName;",
    "output": "Keep the EXTERNAL_STORAGE environment variable\n\nThe EXTERNAL_STORAGE environment variable is needed on at least the\nSamsung Galaxy S7 for /system/bin/am to function."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxInstaller.java b/app/src/main/java/com/termux/app/TermuxInstaller.java\n--- a/app/src/main/java/com/termux/app/TermuxInstaller.java\n+++ b/app/src/main/java/com/termux/app/TermuxInstaller.java\n@@ -176,17 +176,19 @@ public void run() {\n \t\t}.start();\n \t}\n \n-\t/** Get bootstrap zip url for this systems cpu architecture. */\n-\tstatic URL determineZipUrl() throws MalformedURLException {\n-\t\tString arch = System.getProperty(\"os.arch\");\n-\t\tif (arch.startsWith(\"arm\") || arch.equals(\"aarch64\")) {\n-\t\t\t// Handle different arm variants such as armv7l:\n-\t\t\tarch = \"arm\";\n-\t\t} else if (arch.startsWith(\"x86\")) { // \"x86\" on arcwelder, \"x86_64\" on 64-bit android.\n-\t\t\tarch = \"i686\";\n-\t\t}\n-\t\treturn new URL(\"https://termux.net/bootstrap/bootstrap-\" + arch + \".zip\");\n-\t}\n+    /** Get bootstrap zip url for this systems cpu architecture. */\n+    static URL determineZipUrl() throws MalformedURLException {\n+        String arch = System.getProperty(\"os.arch\");\n+        if (arch.startsWith(\"armv8\")) {\n+            arch = \"aarch64\";\n+        } else if (arch.startsWith(\"arm\")) {\n+            // Handle different arm variants such as armv7l:\n+            arch = \"arm\";\n+        } else if (arch.startsWith(\"x86\")) { // \"x86\" on arcwelder, \"x86_64\" on 64-bit android.\n+            arch = \"i686\";\n+        }\n+        return new URL(\"https://termux.net/bootstrap/bootstrap-\" + arch + \".zip\");\n+    }\n \n \t/** Delete a folder and all its content or throw. */\n \tstatic void deleteFolder(File fileOrDirectory) {",
    "output": "Install 64-bit arm packages on capable devices\n\nThis will only affect new installations. Existing users wishing to\ninstall 64-bit packages can re-install the app completely, or just\n'rm -Rf $PREFIX' and exit all sessions, which will cause Termux to\nre-install all packages at next startup."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -243,13 +243,14 @@ TerminalSession createTermSession(String executablePath, String[] arguments, Str\n \t\tfinal String androidDataEnv = \"ANDROID_DATA=\" + System.getenv(\"ANDROID_DATA\");\n \t\tString[] env;\n \t\tif (failSafe) {\n+            // Keep the default path so that system binaries can be used in the failsafe session.\n             final String pathEnv = \"PATH=\" + System.getenv(\"PATH\");\n             env = new String[] { termEnv, homeEnv, prefixEnv, androidRootEnv, androidDataEnv, pathEnv };\n \t\t} else {\n \t\t\tfinal String ps1Env = \"PS1=$ \";\n \t\t\tfinal String ldEnv = \"LD_LIBRARY_PATH=\" + PREFIX_PATH + \"/lib\";\n \t\t\tfinal String langEnv = \"LANG=en_US.UTF-8\";\n-\t\t\tfinal String pathEnv = \"PATH=\" + PREFIX_PATH + \"/bin:\" + PREFIX_PATH + \"/bin/applets:\" + System.getenv(\"PATH\");\n+\t\t\tfinal String pathEnv = \"PATH=\" + PREFIX_PATH + \"/bin:\" + PREFIX_PATH + \"/bin/applets\";\n \t\t\tfinal String pwdEnv = \"PWD=\" + cwd;\n \n \t\t\tenv = new String[] { termEnv, homeEnv, prefixEnv, ps1Env, ldEnv, langEnv, pathEnv, pwdEnv, androidRootEnv, androidDataEnv };",
    "output": "Do not have /system/bin in the PATH\n\nBy appending the old system PATH environment variable to the paths\nsetup by Termux system binaries are found as a fallback.\n\nThis causes problems with system binaries not working (due to\nLD_LIBRARY_PATH) and causing a lot of confusion for new users when\ne.g. an Android system provides a system version of e.g. curl, ssh\nand other programs. It's better for these users to be prompted to\ninstall the proper Termux package, and advanced users can still\nadd /system/bin to the PATH themselves.\n\nCertain programs such as 'am' and 'pm' are already setup in\n$PREFIX/bin to clear LD_LIBRARY_PATH and launch the binaries in\n/system/bin - if there are some more popular ones they could be\nadded in the same way."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/view/TerminalView.java b/app/src/main/java/com/termux/view/TerminalView.java\n--- a/app/src/main/java/com/termux/view/TerminalView.java\n+++ b/app/src/main/java/com/termux/view/TerminalView.java\n@@ -779,8 +779,9 @@ private boolean handleVirtualKeys(int keyCode, KeyEvent event, boolean down) {\n \n \tpublic void checkForFontAndColors() {\n \t\ttry {\n-\t\t\tFile fontFile = new File(\"/data/data/com.termux/files/home/.termux/font.ttf\");\n-\t\t\tFile colorsFile = new File(\"/data/data/com.termux/files/home/.termux/colors.properties\");\n+            // Hard-coded paths since this file is used also in Termux:Float.\n+            @SuppressLint(\"SdCardPath\") File fontFile = new File(\"/data/data/com.termux/files/home/.termux/font.ttf\");\n+            @SuppressLint(\"SdCardPath\") File colorsFile = new File(\"/data/data/com.termux/files/home/.termux/colors.properties\");\n \n \t\t\tfinal Properties props = new Properties();\n \t\t\tif (colorsFile.isFile()) {\n@@ -896,12 +897,16 @@ public void toggleSelectingText(MotionEvent ev) {\n \t\t\t\tpublic boolean onCreateActionMode(ActionMode mode, Menu menu) {\n \t\t\t\t\tfinal int[] ACTION_MODE_ATTRS = { android.R.attr.actionModeCopyDrawable, android.R.attr.actionModePasteDrawable, };\n \t\t\t\t\tTypedArray styledAttributes = getContext().obtainStyledAttributes(ACTION_MODE_ATTRS);\n-\t\t\t\t\tint show = MenuItem.SHOW_AS_ACTION_ALWAYS | MenuItem.SHOW_AS_ACTION_WITH_TEXT;\n-\n-\t\t\t\t\tClipboardManager clipboard = (ClipboardManager) getContext().getSystemService(Context.CLIPBOARD_SERVICE);\n-\t\t\t\t\tmenu.add(Menu.NONE, 1, Menu.NONE, R.string.copy_text).setIcon(styledAttributes.getResourceId(0, 0)).setShowAsAction(show);\n-\t\t\t\t\tmenu.add(Menu.NONE, 2, Menu.NONE, R.string.paste_text).setIcon(styledAttributes.getResourceId(1, 0)).setEnabled(clipboard.hasPrimaryClip()).setShowAsAction(show);\n-\t\t\t\t\tmenu.add(Menu.NONE, 3, Menu.NONE, R.string.text_selection_more);\n+                    try {\n+                        int show = MenuItem.SHOW_AS_ACTION_ALWAYS | MenuItem.SHOW_AS_ACTION_WITH_TEXT;\n+\n+                        ClipboardManager clipboard = (ClipboardManager) getContext().getSystemService(Context.CLIPBOARD_SERVICE);\n+                        menu.add(Menu.NONE, 1, Menu.NONE, R.string.copy_text).setIcon(styledAttributes.getResourceId(0, 0)).setShowAsAction(show);\n+                        menu.add(Menu.NONE, 2, Menu.NONE, R.string.paste_text).setIcon(styledAttributes.getResourceId(1, 0)).setEnabled(clipboard.hasPrimaryClip()).setShowAsAction(show);\n+                        menu.add(Menu.NONE, 3, Menu.NONE, R.string.text_selection_more);\n+                    } finally {\n+                        styledAttributes.recycle();\n+                    }\n \t\t\t\t\treturn true;\n \t\t\t\t}\n ",
    "output": "Recycle a TypedArray after usage\n\nAlso add two suppress lint annotations."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -57,6 +57,10 @@ public final class TermuxService extends Service implements SessionChangedCallba\n \t/** Intent action to launch a new terminal session. Executed from TermuxWidgetProvider. */\n \tpublic static final String ACTION_EXECUTE = \"com.termux.service_execute\";\n \n+    public static final String EXTRA_ARGUMENTS = \"com.termux.execute.arguments\";\n+\n+    public static final String EXTRA_CURRENT_WORKING_DIRECTORY = \"com.termux.execute.cwd\";\n+\n \t/** This service is only bound from inside the same process and never uses IPC. */\n \tclass LocalBinder extends Binder {\n \t\tpublic final TermuxService service = TermuxService.this;\n@@ -113,8 +117,8 @@ public int onStartCommand(Intent intent, int flags, int startId) {\n \t\t} else if (ACTION_EXECUTE.equals(action)) {\n \t\t\tUri executableUri = intent.getData();\n \t\t\tString executablePath = (executableUri == null ? null : executableUri.getPath());\n-\t\t\tString[] arguments = (executableUri == null ? null : intent.getStringArrayExtra(\"com.termux.execute.arguments\"));\n-\t\t\tString cwd = intent.getStringExtra(\"com.termux.execute.cwd\");\n+\t\t\tString[] arguments = (executableUri == null ? null : intent.getStringArrayExtra(EXTRA_ARGUMENTS));\n+\t\t\tString cwd = intent.getStringExtra(EXTRA_CURRENT_WORKING_DIRECTORY);\n \t\t\tTerminalSession newSession = createTermSession(executablePath, arguments, cwd, false);\n \n \t\t\t// Transform executable path to session name, e.g. \"/bin/do-something.sh\" => \"do something.sh\".",
    "output": "Extract constants"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxService.java b/app/src/main/java/com/termux/app/TermuxService.java\n--- a/app/src/main/java/com/termux/app/TermuxService.java\n+++ b/app/src/main/java/com/termux/app/TermuxService.java\n@@ -55,7 +55,7 @@ public final class TermuxService extends Service implements SessionChangedCallba\n \t/** Intent action to toggle the wifi lock, {@link #mWifiLock}, which this service may hold. */\n \tprivate static final String ACTION_LOCK_WIFI = \"com.termux.service_toggle_wifi_lock\";\n \t/** Intent action to launch a new terminal session. Executed from TermuxWidgetProvider. */\n-\tprivate static final String ACTION_EXECUTE = \"com.termux.service_execute\";\n+\tpublic static final String ACTION_EXECUTE = \"com.termux.service_execute\";\n \n \t/** This service is only bound from inside the same process and never uses IPC. */\n \tclass LocalBinder extends Binder {\n@@ -239,7 +239,8 @@ TerminalSession createTermSession(String executablePath, String[] arguments, Str\n \t\tfinal String androidDataEnv = \"ANDROID_DATA=\" + System.getenv(\"ANDROID_DATA\");\n \t\tString[] env;\n \t\tif (failSafe) {\n-\t\t\tenv = new String[] { termEnv, homeEnv, prefixEnv, androidRootEnv, androidDataEnv };\n+            final String pathEnv = \"PATH=\" + System.getenv(\"PATH\");\n+            env = new String[] { termEnv, homeEnv, prefixEnv, androidRootEnv, androidDataEnv, pathEnv };\n \t\t} else {\n \t\t\tfinal String ps1Env = \"PS1=$ \";\n \t\t\tfinal String ldEnv = \"LD_LIBRARY_PATH=\" + PREFIX_PATH + \"/lib\";",
    "output": "Add PATH environemnt variable in failsafe mode"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/terminal/TerminalEmulator.java b/app/src/main/java/com/termux/terminal/TerminalEmulator.java\n--- a/app/src/main/java/com/termux/terminal/TerminalEmulator.java\n+++ b/app/src/main/java/com/termux/terminal/TerminalEmulator.java\n@@ -477,9 +477,10 @@ public void processCodePoint(int b) {\n         case 8: // Backspace (BS, ^H).\n             if (mLeftMargin == mCursorCol) {\n                 // Jump to previous line if it was auto-wrapped.\n-                if (mCursorRow > 0 && mScreen.getLineWrap(mCursorRow-1)) {\n-                    mScreen.clearLineWrap(mCursorRow - 1);\n-                    setCursorRowCol(mCursorRow-1,mRightMargin-1);\n+                int previousRow = mCursorRow - 1;\n+                if (previousRow >= 0 && mScreen.getLineWrap(previousRow)) {\n+                    mScreen.clearLineWrap(previousRow);\n+                    setCursorRowCol(previousRow, mRightMargin - 1);\n                 }\n             } else {\n                 setCursorCol(mCursorCol - 1);",
    "output": "Extract variable for clarity"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/terminal/TerminalBuffer.java b/app/src/main/java/com/termux/terminal/TerminalBuffer.java\n--- a/app/src/main/java/com/termux/terminal/TerminalBuffer.java\n+++ b/app/src/main/java/com/termux/terminal/TerminalBuffer.java\n@@ -127,10 +127,14 @@ public void setLineWrap(int row) {\n \t\tmLines[externalToInternalRow(row)].mLineWrap = true;\n \t}\n \n-\tprivate boolean getLineWrap(int row) {\n+\tpublic boolean getLineWrap(int row) {\n \t\treturn mLines[externalToInternalRow(row)].mLineWrap;\n \t}\n \n+    public void clearLineWrap(int row) {\n+        mLines[externalToInternalRow(row)].mLineWrap = false;\n+    }\n+\n \t/**\n \t * Resize the screen which this transcript backs. Currently, this only works if the number of columns does not\n \t * change or the rows expand (that is, it only works when shrinking the number of rows).\n\ndiff --git a/app/src/main/java/com/termux/terminal/TerminalEmulator.java b/app/src/main/java/com/termux/terminal/TerminalEmulator.java\n--- a/app/src/main/java/com/termux/terminal/TerminalEmulator.java\n+++ b/app/src/main/java/com/termux/terminal/TerminalEmulator.java\n@@ -475,7 +475,15 @@ public void processCodePoint(int b) {\n \t\t\t\tmSession.onBell();\n \t\t\tbreak;\n         case 8: // Backspace (BS, ^H).\n-            setCursorCol(Math.max(mLeftMargin, mCursorCol - 1));\n+            if (mLeftMargin == mCursorCol) {\n+                // Jump to previous line if it was auto-wrapped.\n+                if (mCursorRow > 0 && mScreen.getLineWrap(mCursorRow-1)) {\n+                    mScreen.clearLineWrap(mCursorRow - 1);\n+                    setCursorRowCol(mCursorRow-1,mRightMargin-1);\n+                }\n+            } else {\n+                setCursorCol(mCursorCol - 1);\n+            }\n             break;\n         case 9: // Horizontal tab (HT, \\t) - move to next tab stop, but not past edge of screen\n \t\t    // XXX: Should perhaps use color if writing to new cells. Try with\n\ndiff --git a/app/src/test/java/com/termux/terminal/CursorAndScreenTest.java b/app/src/test/java/com/termux/terminal/CursorAndScreenTest.java\n--- a/app/src/test/java/com/termux/terminal/CursorAndScreenTest.java\n+++ b/app/src/test/java/com/termux/terminal/CursorAndScreenTest.java\n@@ -218,4 +218,13 @@ public void testClearingOfAutowrap() {\n \t\t\t\t\"              -\");\n \t}\n \n+    public void testBackspaceAcrossWrappedLines() {\n+        // Backspace should not go to previous line if not auto-wrapped:\n+        withTerminalSized(3, 3).enterString(\"hi\\r\\n\\b\\byou\").assertLinesAre(\"hi \", \"you\", \"   \");\n+        // Backspace should go to previous line if auto-wrapped:\n+        withTerminalSized(3, 3).enterString(\"hi y\").assertLinesAre(\"hi \", \"y  \", \"   \").enterString(\"\\b\\b#\").assertLinesAre(\"hi#\", \"y  \", \"   \");\n+        // Initial backspace should do nothing:\n+        withTerminalSized(3, 3).enterString(\"\\b\\b\\b\\bhi\").assertLinesAre(\"hi \", \"   \", \"   \");\n+    }\n+\n }",
    "output": "Handle backspace across wrapped lines (closes #59)"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -731,21 +731,23 @@ public void onClick(DialogInterface dialog, int id) {\n \t\t\t\t}\n \t\t\t\treturn true;\n \t\t\t}\n-\t\t\tcase CONTEXTMENU_STYLING_ID: {\n-\t\t\t\tIntent stylingIntent = new Intent();\n-\t\t\t\tstylingIntent.setClassName(\"com.termux.styling\", \"com.termux.styling.TermuxStyleActivity\");\n-\t\t\t\ttry {\n-\t\t\t\t\tstartActivity(stylingIntent);\n-\t\t\t\t} catch (ActivityNotFoundException e) {\n-\t\t\t\t\tnew AlertDialog.Builder(this).setMessage(R.string.styling_not_installed)\n-\t\t\t\t\t\t\t.setPositiveButton(R.string.styling_install, new android.content.DialogInterface.OnClickListener() {\n-\t\t\t\t\t\t\t\t@Override\n-\t\t\t\t\t\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n-\t\t\t\t\t\t\t\t\tstartActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(\"http://play.google.com/store/apps/details?id=com.termux.styling\")));\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t}).setNegativeButton(android.R.string.cancel, null).show();\n-\t\t\t\t}\n-\t\t\t}\n+            case CONTEXTMENU_STYLING_ID: {\n+                Intent stylingIntent = new Intent();\n+                stylingIntent.setClassName(\"com.termux.styling\", \"com.termux.styling.TermuxStyleActivity\");\n+                try {\n+                    startActivity(stylingIntent);\n+                } catch (ActivityNotFoundException | IllegalArgumentException e) {\n+                    // The startActivity() call is not documented to throw IllegalArgumentException.\n+                    // However, crash reporting shows that it sometimes does, so catch it here.\n+                    new AlertDialog.Builder(this).setMessage(R.string.styling_not_installed)\n+                        .setPositiveButton(R.string.styling_install, new android.content.DialogInterface.OnClickListener() {\n+                            @Override\n+                            public void onClick(DialogInterface dialog, int which) {\n+                                startActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(\"http://play.google.com/store/apps/details?id=com.termux.styling\")));\n+                            }\n+                        }).setNegativeButton(android.R.string.cancel, null).show();\n+                }\n+            }\n \t\t\treturn true;\n \t\t\tcase CONTEXTMENU_TOGGLE_FULLSCREEN_ID:\n \t\t\t\ttoggleImmersive();",
    "output": "Catch IllegalArgumentException from startActivity"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/filepicker/TermuxFilePickerProvider.java b/app/src/main/java/com/termux/filepicker/TermuxFilePickerProvider.java\n--- a/app/src/main/java/com/termux/filepicker/TermuxFilePickerProvider.java\n+++ b/app/src/main/java/com/termux/filepicker/TermuxFilePickerProvider.java\n@@ -7,6 +7,7 @@\n import android.net.Uri;\n import android.os.ParcelFileDescriptor;\n import android.support.annotation.NonNull;\n+import android.webkit.MimeTypeMap;\n \n import java.io.File;\n import java.io.FileNotFoundException;\n@@ -15,7 +16,7 @@\n public class TermuxFilePickerProvider extends ContentProvider {\n     @Override\n     public boolean onCreate() {\n-        return false;\n+        return true;\n     }\n \n     @Override\n@@ -25,7 +26,20 @@ public Cursor query(@NonNull Uri uri, String[] projection, String selection, Str\n \n     @Override\n     public String getType(@NonNull Uri uri) {\n-        return null;\n+\t\tString contentType = null;\n+\t\tString path = uri.getPath();\n+\t\tint lastDotIndex = path.lastIndexOf('.');\n+\t\tString possibleFileExtension = path.substring(lastDotIndex + 1, path.length());\n+\t\tif (possibleFileExtension.contains(\"/\")) {\n+\t\t\t// The dot was in the path, so not a file extension.\n+\t\t} else {\n+\t\t\tMimeTypeMap mimeTypes = MimeTypeMap.getSingleton();\n+\t\t\t// Lower casing makes it work with e.g. \"JPG\":\n+\t\t\tcontentType = mimeTypes.getMimeTypeFromExtension(possibleFileExtension.toLowerCase());\n+\t\t}\n+\n+\t\tif (contentType == null) contentType = \"application/octet-stream\";\n+\t\treturn contentType;\n     }\n \n     @Override",
    "output": "TermuxFilePickerProvider: Small improvements\n\n1. Return true from onCreate().\n2. Implement getType()."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -525,6 +525,10 @@ public void onStart() {\n \t\t}\n \n \t\tregisterReceiver(mBroadcastReceiever, new IntentFilter(RELOAD_STYLE_ACTION));\n+\n+\t\t// The current terminal session may have changed while being away, force\n+\t\t// a refresh of the displayed terminal:\n+\t\tmTerminalView.onScreenUpdated();\n \t}\n \n \t@Override",
    "output": "Force refresh when returning in onStart()\n\nThis makes sure that terminal session changes that has happened\nwhile away are visible when returning."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxInstaller.java b/app/src/main/java/com/termux/app/TermuxInstaller.java\n--- a/app/src/main/java/com/termux/app/TermuxInstaller.java\n+++ b/app/src/main/java/com/termux/app/TermuxInstaller.java\n@@ -182,7 +182,7 @@ static URL determineZipUrl() throws MalformedURLException {\n \t\tif (arch.startsWith(\"arm\") || arch.equals(\"aarch64\")) {\n \t\t\t// Handle different arm variants such as armv7l:\n \t\t\tarch = \"arm\";\n-\t\t} else if (arch.equals(\"x86_64\")) {\n+\t\t} else if (arch.startsWith(\"x86\")) { // \"x86\" on arcwelder, \"x86_64\" on 64-bit android.\n \t\t\tarch = \"i686\";\n \t\t}\n \t\treturn new URL(\"https://termux.net/bootstrap/bootstrap-\" + arch + \".zip\");",
    "output": "Map everything starting with x86 to i686\n\nThis fixes CPU detection for ARC welder which reports x86."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/view/TerminalView.java b/app/src/main/java/com/termux/view/TerminalView.java\n--- a/app/src/main/java/com/termux/view/TerminalView.java\n+++ b/app/src/main/java/com/termux/view/TerminalView.java\n@@ -47,7 +47,7 @@\n public final class TerminalView extends View {\n \n \t/** Log view key and IME events. */\n-\tprivate static final boolean LOG_KEY_EVENTS = true;\n+\tprivate static final boolean LOG_KEY_EVENTS = false;\n \n \t/** The currently displayed terminal session, whose emulator is {@link #mEmulator}. */\n \tTerminalSession mTermSession;",
    "output": "Fix LOG_KEY_EVENTS=true committed by mistake"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/terminal/JNI.java b/app/src/main/java/com/termux/terminal/JNI.java\n--- a/app/src/main/java/com/termux/terminal/JNI.java\n+++ b/app/src/main/java/com/termux/terminal/JNI.java\n@@ -28,7 +28,7 @@ final class JNI {\n \t * @return the file descriptor resulting from opening /dev/ptmx master device. The sub process will have opened the\n \t *         slave device counterpart (/dev/pts/$N) and have it as stdint, stdout and stderr.\n \t */\n-\tpublic static native int createSubprocess(String cmd, String cwd, String[] args, String[] envVars, int[] processId);\n+\tpublic static native int createSubprocess(String cmd, String cwd, String[] args, String[] envVars, int[] processId, int rows, int columns);\n \n \t/** Set the window size for a given pty, which allows connected programs to learn how large their screen is. */\n \tpublic static native void setPtyWindowSize(int fd, int rows, int cols);\n\ndiff --git a/app/src/main/java/com/termux/terminal/TerminalSession.java b/app/src/main/java/com/termux/terminal/TerminalSession.java\n--- a/app/src/main/java/com/termux/terminal/TerminalSession.java\n+++ b/app/src/main/java/com/termux/terminal/TerminalSession.java\n@@ -82,14 +82,17 @@ private static FileDescriptor wrapFileDescriptor(int fileDescriptor) {\n \t/** Callback which gets notified when a session finishes or changes title. */\n \tfinal SessionChangedCallback mChangeCallback;\n \n-\t/** The pid of the shell process or -1 if not running. */\n+\t/** The pid of the shell process. 0 if not started and -1 if finished running. */\n \tint mShellPid;\n-\tint mShellExitStatus = -1;\n+\n+\t/** The exit status of the shell process. Only valid if ${@link #mShellPid} is -1. */\n+\tint mShellExitStatus;\n+\n \t/**\n \t * The file descriptor referencing the master half of a pseudo-terminal pair, resulting from calling\n \t * {@link JNI#createSubprocess(String, String, String[], String[], int[])}.\n \t */\n-\tfinal int mTerminalFileDescriptor;\n+\tprivate int mTerminalFileDescriptor;\n \n \t/** Set by the application for user identification of session, not by terminal. */\n \tpublic String mSessionName;\n@@ -128,20 +131,26 @@ public void handleMessage(Message msg) {\n \t\t}\n \t};\n \n+\tprivate final String mShellPath;\n+\tprivate final String mCwd;\n+\tprivate final String[] mArgs;\n+\tprivate final String[] mEnv;\n+\n \tpublic TerminalSession(String shellPath, String cwd, String[] args, String[] env, SessionChangedCallback changeCallback) {\n \t\tmChangeCallback = changeCallback;\n \n-\t\tint[] processId = new int[1];\n-\t\tmTerminalFileDescriptor = JNI.createSubprocess(shellPath, cwd, args, env, processId);\n-\t\tmShellPid = processId[0];\n+\t\tthis.mShellPath = shellPath;\n+\t\tthis.mCwd = cwd;\n+\t\tthis.mArgs = args;\n+\t\tthis.mEnv = env;\n \t}\n \n \t/** Inform the attached pty of the new size and reflow or initialize the emulator. */\n \tpublic void updateSize(int columns, int rows) {\n-\t\tJNI.setPtyWindowSize(mTerminalFileDescriptor, rows, columns);\n \t\tif (mEmulator == null) {\n \t\t\tinitializeEmulator(columns, rows);\n \t\t} else {\n+\t\t\tJNI.setPtyWindowSize(mTerminalFileDescriptor, rows, columns);\n \t\t\tmEmulator.resize(columns, rows);\n \t\t}\n \t}\n@@ -161,6 +170,11 @@ public String getTitle() {\n \t */\n \tpublic void initializeEmulator(int columns, int rows) {\n \t\tmEmulator = new TerminalEmulator(this, columns, rows, /* transcript= */5000);\n+\n+\t\tint[] processId = new int[1];\n+\t\tmTerminalFileDescriptor = JNI.createSubprocess(mShellPath, mCwd, mArgs, mEnv, processId, rows, columns);\n+\t\tmShellPid = processId[0];\n+\n \t\tfinal FileDescriptor terminalFileDescriptorWrapped = wrapFileDescriptor(mTerminalFileDescriptor);\n \n \t\tnew Thread(\"TermSessionInputReader[pid=\" + mShellPid + \"]\") {\n@@ -204,7 +218,7 @@ public void run() {\n \t/** Write data to the shell process. */\n \t@Override\n \tpublic void write(byte[] data, int offset, int count) {\n-\t\tmTerminalToProcessIOQueue.write(data, offset, count);\n+\t\tif (mShellPid > 0) mTerminalToProcessIOQueue.write(data, offset, count);\n \t}\n \n \t/** Write the Unicode code point to the terminal encoded in UTF-8. */",
    "output": "Wait for terminal size before starting process\n\nThis fixes https://github.com/termux/termux-widget/issues/2, which\nwas caused by the terminal launching the terminal session process\nbefore the terminal size was known.\n\nAlso remove the built JNI libraries from source control."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/terminal/TerminalEmulator.java b/app/src/main/java/com/termux/terminal/TerminalEmulator.java\n--- a/app/src/main/java/com/termux/terminal/TerminalEmulator.java\n+++ b/app/src/main/java/com/termux/terminal/TerminalEmulator.java\n@@ -218,7 +218,7 @@ public final class TerminalEmulator {\n \t */\n \tprivate int mScrollCounter = 0;\n \n-\tprivate int mUtf8ToFollow, mUtf8Index;\n+\tprivate byte mUtf8ToFollow, mUtf8Index;\n \tprivate final byte[] mUtf8InputBuffer = new byte[4];\n \n \tpublic final TerminalColors mColors = new TerminalColors();\n@@ -424,7 +424,11 @@ private void processByte(byte byteToProcess) {\n \t\t\t\t\t\tprocessCodePoint(/* escape (hexadecimal=0x1B, octal=033): */27);\n \t\t\t\t\t\tprocessCodePoint((codePoint & 0x7F) + 0x40);\n \t\t\t\t\t} else {\n-\t\t\t\t\t\tif (Character.UNASSIGNED == Character.getType(codePoint)) codePoint = UNICODE_REPLACEMENT_CHAR;\n+\t\t\t\t\t\tswitch (Character.getType(codePoint)) {\n+\t\t\t\t\t\t\tcase Character.UNASSIGNED:\n+\t\t\t\t\t\t\tcase Character.SURROGATE:\n+\t\t\t\t\t\t\t\tcodePoint = UNICODE_REPLACEMENT_CHAR;\n+\t\t\t\t\t\t}\n \t\t\t\t\t\tprocessCodePoint(codePoint);\n \t\t\t\t\t}\n \t\t\t\t}\n\ndiff --git a/app/src/test/java/com/termux/terminal/UnicodeInputTest.java b/app/src/test/java/com/termux/terminal/UnicodeInputTest.java\n--- a/app/src/test/java/com/termux/terminal/UnicodeInputTest.java\n+++ b/app/src/test/java/com/termux/terminal/UnicodeInputTest.java\n@@ -12,6 +12,47 @@ public void testIllFormedUtf8SuccessorByteNotConsumed() throws Exception {\n \t\twithTerminalSized(5, 5);\n \t\tmTerminal.append(new byte[]{(byte) 0b11101111, (byte) 'a'}, 2);\n \t\tassertLineIs(0, ((char) TerminalEmulator.UNICODE_REPLACEMENT_CHAR) + \"a   \");\n+\n+\t\t// https://code.google.com/p/chromium/issues/detail?id=212704\n+\t\tbyte[] input = new byte[]{\n+\t\t\t\t(byte) 0x61, (byte) 0xF1,\n+\t\t\t\t(byte) 0x80, (byte) 0x80,\n+\t\t\t\t(byte) 0xe1, (byte) 0x80,\n+\t\t\t\t(byte) 0xc2, (byte) 0x62,\n+\t\t\t\t(byte) 0x80, (byte) 0x63,\n+\t\t\t\t(byte) 0x80, (byte) 0xbf,\n+\t\t\t\t(byte) 0x64\n+\t\t};\n+\t\twithTerminalSized(10, 2);\n+\t\tmTerminal.append(input, input.length);\n+\t\tassertLinesAre(\"a\\uFFFD\\uFFFD\\uFFFDb\\uFFFDc\\uFFFD\\uFFFDd\", \"          \");\n+\n+\t\t// Surrogate pairs.\n+\t\twithTerminalSized(5, 2);\n+\t\tinput = new byte[]{\n+\t\t\t\t(byte) 0xed, (byte) 0xa0,\n+\t\t\t\t(byte) 0x80, (byte) 0xed,\n+\t\t\t\t(byte) 0xad, (byte) 0xbf,\n+\t\t\t\t(byte) 0xed, (byte) 0xae,\n+\t\t\t\t(byte) 0x80, (byte) 0xed,\n+\t\t\t\t(byte) 0xbf, (byte) 0xbf\n+\t\t};\n+\t\tmTerminal.append(input, input.length);\n+\t\tassertLinesAre(\"\\uFFFD\\uFFFD\\uFFFD\\uFFFD \", \"     \");\n+\n+\t\t// https://bugzilla.mozilla.org/show_bug.cgi?id=746900: \"with this patch 0xe0 0x80 is decoded as two U+FFFDs,\n+\t\t// but 0xe0 0xa0 is decoded as a single U+FFFD, and this is correct according to the \"Best Practices\", but IE\n+\t\t// and Chrome (Version 22.0.1229.94) decode both of them as two U+FFFDs. Opera 12.11 decodes both of them as\n+\t\t// one U+FFFD\".\n+\t\twithTerminalSized(5, 2);\n+\t\tinput = new byte[]{(byte) 0xe0, (byte) 0xa0, ' '};\n+\t\tmTerminal.append(input, input.length);\n+\t\tassertLinesAre(\"\\uFFFD    \", \"     \");\n+\n+\t\t// withTerminalSized(5, 2);\n+\t\t// input = new byte[]{(byte) 0xe0, (byte) 0x80, 'a'};\n+\t\t// mTerminal.append(input, input.length);\n+\t\t// assertLinesAre(\"\\uFFFD\\uFFFDa  \", \"     \");\n \t}\n \n \tpublic void testUnassignedCodePoint() throws UnsupportedEncodingException {",
    "output": "Replace surrogate chars with U+FFFD\n\nAlso add some more unicode input tests."
  },
  {
    "input": "diff --git a/app/src/test/java/com/termux/terminal/WcWidthTest.java b/app/src/test/java/com/termux/terminal/WcWidthTest.java\n--- a/app/src/test/java/com/termux/terminal/WcWidthTest.java\n+++ b/app/src/test/java/com/termux/terminal/WcWidthTest.java\n@@ -39,6 +39,7 @@ public void testSomeNonWide() {\n \tpublic void testCombining() {\n \t\tassertWidthIs(0, 0x0302);\n \t\tassertWidthIs(0, 0x0308);\n+\t\tassertWidthIs(0, 0x2060);\n \t}\n \n \tpublic void testWatch() {",
    "output": "Add wcwidth test for U+2060"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/terminal/TerminalEmulator.java b/app/src/main/java/com/termux/terminal/TerminalEmulator.java\n--- a/app/src/main/java/com/termux/terminal/TerminalEmulator.java\n+++ b/app/src/main/java/com/termux/terminal/TerminalEmulator.java\n@@ -907,8 +907,9 @@ private int nextTabStop(int numTabs) {\n \t/** Process byte while in the {@link #ESC_CSI_QUESTIONMARK} escape state. */\n \tprivate void doCsiQuestionMark(int b) {\n \t\tswitch (b) {\n-\t\tcase 'J': // Selective erase in display (DECSED - http://www.vt100.net/docs/vt510-rm/DECSED).\n-\t\tcase 'K': // Selective erase in line (DECSEL - http://vt100.net/docs/vt510-rm/DECSEL).\n+\t\tcase 'J': // Selective erase in display (DECSED) - http://www.vt100.net/docs/vt510-rm/DECSED.\n+\t\tcase 'K': // Selective erase in line (DECSEL) - http://vt100.net/docs/vt510-rm/DECSEL.\n+\t\t\tmAboutToAutoWrap = false;\n \t\t\tint fillChar = ' ';\n \t\t\tint startCol = -1;\n \t\t\tint startRow = -1;\n@@ -1326,9 +1327,8 @@ private void doCsi(int b) {\n \t\t\tcontinueSequence(ESC_CSI_ARGS_ASTERIX);\n \t\t\tbreak;\n \t\tcase '@': {\n-\t\t\t// ESC [ Pn @ - ICH Insert Characters.\n-\t\t\t// \"This control function inserts one or more space (SP) characters starting at the cursor position.\"\n-\t\t\t// http://www.vt100.net/docs/vt510-rm/ICH\n+\t\t\t// \"CSI{n}@\" -  Insert ${n} space characters (ICH) - http://www.vt100.net/docs/vt510-rm/ICH.\n+\t\t\tmAboutToAutoWrap = false;\n \t\t\tint columnsAfterCursor = mColumns - mCursorCol;\n \t\t\tint spacesToInsert = Math.min(getArg0(1), columnsAfterCursor);\n \t\t\tint charsToMove = columnsAfterCursor - spacesToInsert;\n@@ -1365,7 +1365,7 @@ private void doCsi(int b) {\n \t\tcase 'I': // Cursor Horizontal Forward Tabulation (CHT). Move the active position n tabs forward.\n \t\t\tsetCursorCol(nextTabStop(getArg0(1)));\n \t\t\tbreak;\n-\t\tcase 'J': // ESC [ Pn J - ED - Erase in Display\n+\t\tcase 'J': // \"${CSI}${0,1,2}J\" - Erase in Display (ED)\n \t\t\t// ED ignores the scrolling margins.\n \t\t\tswitch (getArg0(0)) {\n \t\t\tcase 0: // Erase from the active position to the end of the screen, inclusive (default).\n@@ -1382,8 +1382,9 @@ private void doCsi(int b) {\n \t\t\t\tbreak;\n \t\t\tdefault:\n \t\t\t\tunknownSequence(b);\n-\t\t\t\tbreak;\n+\t\t\t\treturn;\n \t\t\t}\n+\t\t\tmAboutToAutoWrap = false;\n \t\t\tbreak;\n \t\tcase 'K': // \"CSI{n}K\" - Erase in line (EL).\n \t\t\tswitch (getArg0(0)) {\n@@ -1398,8 +1399,9 @@ private void doCsi(int b) {\n \t\t\t\tbreak;\n \t\t\tdefault:\n \t\t\t\tunknownSequence(b);\n-\t\t\t\tbreak;\n+\t\t\t\treturn;\n \t\t\t}\n+\t\t\tmAboutToAutoWrap = false;\n \t\t\tbreak;\n \t\tcase 'L': // \"${CSI}{N}L\" - insert ${N} lines (IL).\n \t\t{\n@@ -1412,6 +1414,7 @@ private void doCsi(int b) {\n \t\t\tbreak;\n \t\tcase 'M': // \"${CSI}${N}M\" - delete N lines (DL).\n \t\t{\n+\t\t\tmAboutToAutoWrap = false;\n \t\t\tint linesAfterCursor = mBottomMargin - mCursorRow;\n \t\t\tint linesToDelete = Math.min(getArg0(1), linesAfterCursor);\n \t\t\tint linesToMove = linesAfterCursor - linesToDelete;\n@@ -1426,6 +1429,7 @@ private void doCsi(int b) {\n \t\t\t// As characters are deleted, the remaining characters between the cursor and right margin move to the left.\n \t\t\t// Character attributes move with the characters. The terminal adds blank spaces with no visual character\n \t\t\t// attributes at the right margin. DCH has no effect outside the scrolling margins.\"\n+\t\t\tmAboutToAutoWrap = false;\n \t\t\tint cellsAfterCursor = mColumns - mCursorCol;\n \t\t\tint cellsToDelete = Math.min(getArg0(1), cellsAfterCursor);\n \t\t\tint cellsToMove = cellsAfterCursor - cellsToDelete;\n@@ -1456,6 +1460,7 @@ private void doCsi(int b) {\n \t\t\t}\n \t\t\tbreak;\n \t\tcase 'X': // \"${CSI}${N}X\" - Erase ${N:=1} character(s) (ECH). FIXME: Clears character attributes?\n+\t\t\tmAboutToAutoWrap = false;\n \t\t\tmScreen.blockSet(mCursorCol, mCursorRow, Math.min(getArg0(1), mColumns - mCursorCol), 1, ' ', getStyle());\n \t\t\tbreak;\n \t\tcase 'Z': // Cursor Backward Tabulation (CBT). Move the active position n tabs backward.\n\ndiff --git a/app/src/test/java/com/termux/terminal/CursorAndScreenTest.java b/app/src/test/java/com/termux/terminal/CursorAndScreenTest.java\n--- a/app/src/test/java/com/termux/terminal/CursorAndScreenTest.java\n+++ b/app/src/test/java/com/termux/terminal/CursorAndScreenTest.java\n@@ -172,4 +172,45 @@ public void testHorizontalTabColorsBackground() {\n \t\t}\n \t}\n \n+\t/**\n+\t * Test interactions between the cursor overflow bit and various escape sequences.\n+\t * <p/>\n+\t * Adapted from hterm:\n+\t * https://chromium.googlesource.com/chromiumos/platform/assets/+/2337afa5c063127d5ce40ec7fec9b602d096df86%5E%21/#F2\n+\t */\n+\tpublic void testClearingOfAutowrap() {\n+\t\t// Fill a row with the last hyphen wrong, then run a command that\n+\t\t// modifies the screen, then add a hyphen. The wrap bit should be\n+\t\t// cleared, so the extra hyphen can fix the row.\n+\t\twithTerminalSized(15, 6);\n+\n+\t\tenterString(\"-----  1  ----X\");\n+\t\tenterString(\"\\033[K-\");  // EL\n+\n+\t\tenterString(\"-----  2  ----X\");\n+\t\tenterString(\"\\033[J-\");  // ED\n+\n+\t\tenterString(\"-----  3  ----X\");\n+\t\tenterString(\"\\033[@-\");  // ICH\n+\n+\t\tenterString(\"-----  4  ----X\");\n+\t\tenterString(\"\\033[P-\");  // DCH\n+\n+\t\tenterString(\"-----  5  ----X\");\n+\t\tenterString(\"\\033[X-\");  // ECH\n+\n+\t\t// DL will delete the entire line but clear the wrap bit, so we\n+\t\t// expect a hyphen at the end and nothing else.\n+\t\tenterString(\"XXXXXXXXXXXXXXX\");\n+\t\tenterString(\"\\033[M-\");  // DL\n+\n+\t\tassertLinesAre(\n+\t\t\t\t\"-----  1  -----\",\n+\t\t\t\t\"-----  2  -----\",\n+\t\t\t\t\"-----  3  -----\",\n+\t\t\t\t\"-----  4  -----\",\n+\t\t\t\t\"-----  5  -----\",\n+\t\t\t\t\"              -\");\n+\t}\n+\n }",
    "output": "Clear autowrap bit at some escape sequences\n\nAdd test adapted from chromiums hterm."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxPreferences.java b/app/src/main/java/com/termux/app/TermuxPreferences.java\n--- a/app/src/main/java/com/termux/app/TermuxPreferences.java\n+++ b/app/src/main/java/com/termux/app/TermuxPreferences.java\n@@ -132,7 +132,7 @@ public void reloadFromProperties(Context context) {\n \t\t\t\t\tbreak;\n \t\t\t}\n \n-\t\t\tmBackIsEscape = \"escape\".equals(props.getProperty(\"back-key\", \"escape\"));\n+\t\t\tmBackIsEscape = \"escape\".equals(props.getProperty(\"back-key\", \"back\"));\n \t\t} catch (Exception e) {\n \t\t\tToast.makeText(context, \"Error loading properties: \" + e.getMessage(), Toast.LENGTH_LONG).show();\n \t\t\tLog.e(\"termux\", \"Error loading props\", e);",
    "output": "Change default behaviour of back key to back\n\nIt's still possible to set it to escape using configuration"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/view/TerminalView.java b/app/src/main/java/com/termux/view/TerminalView.java\n--- a/app/src/main/java/com/termux/view/TerminalView.java\n+++ b/app/src/main/java/com/termux/view/TerminalView.java\n@@ -10,6 +10,7 @@\n import android.graphics.Rect;\n import android.graphics.Typeface;\n import android.graphics.drawable.BitmapDrawable;\n+import android.media.AudioManager;\n import android.os.Build;\n import android.text.InputType;\n import android.text.TextUtils;\n@@ -692,6 +693,10 @@ void inputCodePoint(int codePoint, boolean controlDownFromEvent, boolean leftAlt\n \t\t\t\t// As left alt+b, jumping forward in readline:\n \t\t\t\tcodePoint = 'b';\n \t\t\t\tleftAltDownFromEvent = true;\n+\t\t\t} else if (codePoint == 'v' || codePoint == 'V') {\n+\t\t\t\tcodePoint = -1;\n+\t\t\t\tAudioManager audio = (AudioManager) getContext().getSystemService(Context.AUDIO_SERVICE);\n+\t\t\t\taudio.adjustSuggestedStreamVolume(AudioManager.ADJUST_SAME, AudioManager.USE_DEFAULT_STREAM_TYPE, AudioManager.FLAG_SHOW_UI);\n \t\t\t}\n \t\t}\n ",
    "output": "Add VolumeUp+V to show volume control"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/terminal/TerminalEmulator.java b/app/src/main/java/com/termux/terminal/TerminalEmulator.java\n--- a/app/src/main/java/com/termux/terminal/TerminalEmulator.java\n+++ b/app/src/main/java/com/termux/terminal/TerminalEmulator.java\n@@ -1229,6 +1229,11 @@ private void doEsc(int b) {\n \t\t\t\tmScreen.blockSet(mRightMargin - 1, mTopMargin, 1, rows, ' ', TextStyle.encode(mForeColor, mBackColor, 0));\n \t\t\t}\n \t\t\tbreak;\n+\t\tcase 'c': // RIS - Reset to Initial State (http://vt100.net/docs/vt510-rm/RIS).\n+\t\t\treset();\n+\t\t\tblockClear(0, 0, mColumns, mRows);\n+\t\t\tsetCursorPosition(0, 0);\n+\t\t\tbreak;\n \t\tcase 'D': // INDEX\n \t\t\tdoLinefeed();\n \t\t\tbreak;\n\ndiff --git a/app/src/test/java/com/termux/terminal/DecSetTest.java b/app/src/test/java/com/termux/terminal/DecSetTest.java\n--- a/app/src/test/java/com/termux/terminal/DecSetTest.java\n+++ b/app/src/test/java/com/termux/terminal/DecSetTest.java\n@@ -28,6 +28,11 @@ public void testShowHideCursor() {\n \t\tassertFalse(mTerminal.isShowingCursor());\n \t\tmTerminal.reset();\n \t\tassertTrue(\"Resetting the terminal should show the cursor\", mTerminal.isShowingCursor());\n+\n+\t\tenterString(\"\\033[?25l\");\n+\t\tassertFalse(mTerminal.isShowingCursor());\n+\t\tenterString(\"\\033c\"); // RIS resetting should reveal cursor.\n+\t\tassertTrue(mTerminal.isShowingCursor());\n \t}\n \n \t/** DECSET 2004, controls bracketed paste mode. */",
    "output": "Recognize '\\033c' - RIS, reset terminal state"
  },
  {
    "input": "diff --git a/app/src/test/java/com/termux/terminal/ControlSequenceIntroducerTest.java b/app/src/test/java/com/termux/terminal/ControlSequenceIntroducerTest.java\n--- a/app/src/test/java/com/termux/terminal/ControlSequenceIntroducerTest.java\n+++ b/app/src/test/java/com/termux/terminal/ControlSequenceIntroducerTest.java\n@@ -20,4 +20,13 @@ public void testCsiS() {\n \t\twithTerminalSized(3, 4).enterString(\"1\\r\\n2\\r\\n3\\r\\nhi\\033[Sy\").assertLinesAre(\"2  \", \"3  \", \"hi \", \"  y\");\n \t}\n \n+\t/** CSI Ps X  Erase Ps Character(s) (default = 1) (ECH). */\n+\tpublic void testCsiX() {\n+\t\t// See https://code.google.com/p/chromium/issues/detail?id=212712 where test was extraced from.\n+\t\twithTerminalSized(13, 2).enterString(\"abcdefghijkl\\b\\b\\b\\b\\b\\033[X\").assertLinesAre(\"abcdefg ijkl \", \"             \");\n+\t\twithTerminalSized(13, 2).enterString(\"abcdefghijkl\\b\\b\\b\\b\\b\\033[1X\").assertLinesAre(\"abcdefg ijkl \", \"             \");\n+\t\twithTerminalSized(13, 2).enterString(\"abcdefghijkl\\b\\b\\b\\b\\b\\033[2X\").assertLinesAre(\"abcdefg  jkl \", \"             \");\n+\t\twithTerminalSized(13, 2).enterString(\"abcdefghijkl\\b\\b\\b\\b\\b\\033[20X\").assertLinesAre(\"abcdefg      \", \"             \");\n+\t}\n+\n }",
    "output": "Terminal emulation: Test \"CSI X\"/ECH processing"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/DialogUtils.java b/app/src/main/java/com/termux/app/DialogUtils.java\n--- a/app/src/main/java/com/termux/app/DialogUtils.java\n+++ b/app/src/main/java/com/termux/app/DialogUtils.java\n@@ -3,6 +3,7 @@\n import android.app.Activity;\n import android.app.AlertDialog;\n import android.content.DialogInterface;\n+import android.content.res.Configuration;\n import android.text.Selection;\n import android.util.TypedValue;\n import android.view.KeyEvent;\n@@ -69,7 +70,10 @@ public void onClick(DialogInterface dialog, int which) {\n \t\t}\n \n \t\tdialogHolder[0] = builder.create();\n-\t\tdialogHolder[0].getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE);\n+\t\tif ((activity.getResources().getConfiguration().hardKeyboardHidden & Configuration.HARDKEYBOARDHIDDEN_YES) == 0) {\n+\t\t\t// Show soft keyboard unless hardware keyboard available.\n+\t\t\tdialogHolder[0].getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE);\n+\t\t}\n \t\tdialogHolder[0].show();\n \t}\n ",
    "output": "Do not force soft keyboard visible when hw exists"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/view/TerminalView.java b/app/src/main/java/com/termux/view/TerminalView.java\n--- a/app/src/main/java/com/termux/view/TerminalView.java\n+++ b/app/src/main/java/com/termux/view/TerminalView.java\n@@ -531,18 +531,11 @@ public boolean onTouchEvent(MotionEvent ev) {\n \t\t\t\t\t\tbreak;\n \t\t\t\t}\n \t\t\t\treturn true;\n-\t\t\t} else if (action == MotionEvent.ACTION_DOWN) {\n-\t\t\t\t// Start text selection with mouse. Note that the check against MotionEvent.ACTION_DOWN is\n-\t\t\t\t// important, since we otherwise would pick up secondary mouse button up actions.\n-\t\t\t\ttoggleSelectingText(ev);\n-\t\t\t\treturn true;\n \t\t\t}\n-\t\t} else {\n-\t\t\tmGestureRecognizer.onTouchEvent(ev);\n-\t\t\treturn true;\n \t\t}\n \n-\t\treturn false;\n+\t\tmGestureRecognizer.onTouchEvent(ev);\n+\t\treturn true;\n \t}\n \n \t@Override",
    "output": "Do not start text selection directly on LMB"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/view/TerminalView.java b/app/src/main/java/com/termux/view/TerminalView.java\n--- a/app/src/main/java/com/termux/view/TerminalView.java\n+++ b/app/src/main/java/com/termux/view/TerminalView.java\n@@ -5,6 +5,7 @@\n import android.content.ClipData;\n import android.content.ClipboardManager;\n import android.content.Context;\n+import android.content.res.TypedArray;\n import android.graphics.Canvas;\n import android.graphics.Rect;\n import android.graphics.Typeface;\n@@ -895,9 +896,13 @@ public void toggleSelectingText(MotionEvent ev) {\n \t\t\tfinal ActionMode.Callback callback = new ActionMode.Callback() {\n \t\t\t\t@Override\n \t\t\t\tpublic boolean onCreateActionMode(ActionMode mode, Menu menu) {\n+\t\t\t\t\tfinal int[] ACTION_MODE_ATTRS = { android.R.attr.actionModeCopyDrawable, android.R.attr.actionModePasteDrawable, };\n+\t\t\t\t\tTypedArray styledAttributes = getContext().obtainStyledAttributes(ACTION_MODE_ATTRS);\n+\t\t\t\t\tint show = MenuItem.SHOW_AS_ACTION_ALWAYS | MenuItem.SHOW_AS_ACTION_WITH_TEXT;\n+\n \t\t\t\t\tClipboardManager clipboard = (ClipboardManager) getContext().getSystemService(Context.CLIPBOARD_SERVICE);\n-\t\t\t\t\tmenu.add(Menu.NONE, 1, Menu.NONE, R.string.copy_text);\n-\t\t\t\t\tmenu.add(Menu.NONE, 2, Menu.NONE, R.string.paste_text).setEnabled(clipboard.hasPrimaryClip());\n+\t\t\t\t\tmenu.add(Menu.NONE, 1, Menu.NONE, R.string.copy_text).setIcon(styledAttributes.getResourceId(0, 0)).setShowAsAction(show);\n+\t\t\t\t\tmenu.add(Menu.NONE, 2, Menu.NONE, R.string.paste_text).setIcon(styledAttributes.getResourceId(1, 0)).setEnabled(clipboard.hasPrimaryClip()).setShowAsAction(show);\n \t\t\t\t\tmenu.add(Menu.NONE, 3, Menu.NONE, R.string.text_selection_more);\n \t\t\t\t\treturn true;\n \t\t\t\t}",
    "output": "Show icons for copy and paste menu items"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/view/TerminalView.java b/app/src/main/java/com/termux/view/TerminalView.java\n--- a/app/src/main/java/com/termux/view/TerminalView.java\n+++ b/app/src/main/java/com/termux/view/TerminalView.java\n@@ -117,7 +117,6 @@ public boolean onSingleTapUp(MotionEvent e) {\n \n \t\t\t@Override\n \t\t\tpublic boolean onScroll(MotionEvent e2, float distanceX, float distanceY) {\n-\t\t\t\tLog.e(\"termux\", \"onScroll=\" + e2 + \", mIsselection=\" + mIsSelectingText + \", mouse=\" + e2.isFromSource(InputDevice.SOURCE_MOUSE));\n \t\t\t\tif (mEmulator == null || mIsSelectingText) return true;\n \t\t\t\tif (mEmulator.isMouseTrackingActive() && e2.isFromSource(InputDevice.SOURCE_MOUSE)) {\n \t\t\t\t\t// If moving with mouse pointer while pressing button, report that instead of scroll.\n@@ -136,6 +135,7 @@ public boolean onScroll(MotionEvent e2, float distanceX, float distanceY) {\n \n \t\t\t@Override\n \t\t\tpublic boolean onScale(float focusX, float focusY, float scale) {\n+\t\t\t\tif (mEmulator == null || mIsSelectingText) return true;\n \t\t\t\tmScaleFactor *= scale;\n \t\t\t\tmScaleFactor = mOnKeyListener.onScale(mScaleFactor);\n \t\t\t\treturn true;\n@@ -502,8 +502,7 @@ public boolean onTouchEvent(MotionEvent ev) {\n \n \t\t\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) mActionMode.invalidateContentRect();\n \t\t\t\tinvalidate();\n-\t\t\t\t// Return to prevent gestures when moving while selecting text.\n-\t\t\t\treturn true;\n+\t\t\t\tbreak;\n \t\t\tdefault:\n \t\t\t\tbreak;\n \t\t\t}",
    "output": "Fix gesture handling while selecting text\n\nAlso remove stray debug logging."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/view/TerminalView.java b/app/src/main/java/com/termux/view/TerminalView.java\n--- a/app/src/main/java/com/termux/view/TerminalView.java\n+++ b/app/src/main/java/com/termux/view/TerminalView.java\n@@ -350,19 +350,36 @@ protected int computeVerticalScrollOffset() {\n \tpublic void onScreenUpdated() {\n \t\tif (mEmulator == null) return;\n \n+\t\tboolean skipScrolling = false;\n \t\tif (mIsSelectingText) {\n+\t\t\t// Do not scroll when selecting text.\n+\t\t\tint rowsInHistory = mEmulator.getScreen().getActiveTranscriptRows();\n \t\t\tint rowShift = mEmulator.getScrollCounter();\n-\t\t\tmSelY1 -= rowShift;\n-\t\t\tmSelY2 -= rowShift;\n+\t\t\tif (-mTopRow + rowShift > rowsInHistory) {\n+\t\t\t\t// .. unless we're hitting the end of history transcript, in which\n+\t\t\t\t// case we abort text selection and scroll to end.\n+\t\t\t\ttoggleSelectingText(null);\n+\t\t\t} else {\n+\t\t\t\tskipScrolling = true;\n+\t\t\t\tmTopRow -= rowShift;\n+\t\t\t\tmSelY1 -= rowShift;\n+\t\t\t\tmSelY2 -= rowShift;\n+\t\t\t}\n \t\t}\n-\t\tmEmulator.clearScrollCounter();\n \n-\t\tif (mTopRow != 0) {\n+\t\tif (!skipScrolling && mTopRow != 0) {\n \t\t\t// Scroll down if not already there.\n+\t\t\tif (mTopRow < -3) {\n+\t\t\t\t// Awaken scroll bars only if scrolling a noticeable amount\n+\t\t\t\t// - we do not want visible scroll bars during normal typing\n+\t\t\t\t// of one row at a time.\n+\t\t\t\tawakenScrollBars();\n+\t\t\t}\n \t\t\tmTopRow = 0;\n-\t\t\tscrollTo(0, 0);\n \t\t}\n \n+\t\tmEmulator.clearScrollCounter();\n+\n \t\tinvalidate();\n \t}\n ",
    "output": "Do not auto scroll when selecting text"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/DialogUtils.java b/app/src/main/java/com/termux/app/DialogUtils.java\n--- a/app/src/main/java/com/termux/app/DialogUtils.java\n+++ b/app/src/main/java/com/termux/app/DialogUtils.java\n@@ -3,10 +3,14 @@\n import android.app.Activity;\n import android.app.AlertDialog;\n import android.content.DialogInterface;\n+import android.text.Selection;\n import android.util.TypedValue;\n+import android.view.KeyEvent;\n import android.view.ViewGroup.LayoutParams;\n+import android.view.WindowManager;\n import android.widget.EditText;\n import android.widget.LinearLayout;\n+import android.widget.TextView;\n \n final class DialogUtils {\n \n@@ -18,7 +22,21 @@ static void textInput(Activity activity, int titleText, int positiveButtonText,\n \t\t\t\t\t\t\t\t\t\t int neutralButtonText, final TextSetListener onNeutral) {\n \t\tfinal EditText input = new EditText(activity);\n \t\tinput.setSingleLine();\n-\t\tif (initialText != null) input.setText(initialText);\n+\t\tif (initialText != null) {\n+\t\t\tinput.setText(initialText);\n+\t\t\tSelection.setSelection(input.getText(), initialText.length());\n+\t\t}\n+\n+\t\tfinal AlertDialog[] dialogHolder = new AlertDialog[1];\n+\t\tinput.setImeActionLabel(activity.getResources().getString(positiveButtonText), KeyEvent.KEYCODE_ENTER);\n+\t\tinput.setOnEditorActionListener(new TextView.OnEditorActionListener() {\n+\t\t\t@Override\n+\t\t\tpublic boolean onEditorAction(TextView v, int actionId, KeyEvent event) {\n+\t\t\t\tonPositive.onTextSet(input.getText().toString());\n+\t\t\t\tdialogHolder[0].dismiss();\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t});\n \n \t\tfloat dipInPixels = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 1, activity.getResources().getDisplayMetrics());\n \t\t// https://www.google.com/design/spec/components/dialogs.html#dialogs-specs\n@@ -28,19 +46,18 @@ static void textInput(Activity activity, int titleText, int positiveButtonText,\n \t\tLinearLayout layout = new LinearLayout(activity);\n \t\tlayout.setOrientation(LinearLayout.VERTICAL);\n \t\tlayout.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));\n-\t\t// layout.setGravity(Gravity.CLIP_VERTICAL);\n \t\tlayout.setPadding(paddingTopAndSides, paddingTopAndSides, paddingTopAndSides, paddingBottom);\n \t\tlayout.addView(input);\n \n \t\tAlertDialog.Builder builder = new AlertDialog.Builder(activity)\n-\t\t\t.setTitle(titleText).setView(layout)\n-\t\t\t.setPositiveButton(positiveButtonText, new DialogInterface.OnClickListener() {\n-\t\t\t\t@Override\n-\t\t\t\tpublic void onClick(DialogInterface d, int whichButton) {\n-\t\t\t\t\tonPositive.onTextSet(input.getText().toString());\n+\t\t\t\t.setTitle(titleText).setView(layout)\n+\t\t\t\t.setPositiveButton(positiveButtonText, new DialogInterface.OnClickListener() {\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic void onClick(DialogInterface d, int whichButton) {\n+\t\t\t\t\t\tonPositive.onTextSet(input.getText().toString());\n \t\t\t\t}\n \t\t\t})\n-\t\t\t.setNegativeButton(android.R.string.cancel, null);\n+\t\t\t\t.setNegativeButton(android.R.string.cancel, null);\n \n \t\tif (onNeutral != null) {\n \t\t\tbuilder.setNeutralButton(neutralButtonText, new DialogInterface.OnClickListener() {\n@@ -51,8 +68,9 @@ public void onClick(DialogInterface dialog, int which) {\n \t\t\t});\n \t\t}\n \n-\t\tbuilder.show();\n-\t\tinput.requestFocus();\n+\t\tdialogHolder[0] = builder.create();\n+\t\tdialogHolder[0].getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE);\n+\t\tdialogHolder[0].show();\n \t}\n \n }",
    "output": "Improve session name dialog\n\n- Show keyboard directly.\n- Let return create the session."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/view/TerminalView.java b/app/src/main/java/com/termux/view/TerminalView.java\n--- a/app/src/main/java/com/termux/view/TerminalView.java\n+++ b/app/src/main/java/com/termux/view/TerminalView.java\n@@ -190,7 +190,7 @@ public boolean onDoubleTap(MotionEvent e) {\n \n \t\t\t@Override\n \t\t\tpublic void onLongPress(MotionEvent e) {\n-\t\t\t\tif (!mGestureRecognizer.isInProgress()) {\n+\t\t\t\tif (!mGestureRecognizer.isInProgress() && !mIsSelectingText) {\n \t\t\t\t\tperformHapticFeedback(HapticFeedbackConstants.LONG_PRESS);\n \t\t\t\t\ttoggleSelectingText(e);\n \t\t\t\t}\n@@ -485,7 +485,8 @@ public boolean onTouchEvent(MotionEvent ev) {\n \n \t\t\t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) mActionMode.invalidateContentRect();\n \t\t\t\tinvalidate();\n-\t\t\t\tbreak;\n+\t\t\t\t// Return to prevent gestures when moving while selecting text.\n+\t\t\t\treturn true;\n \t\t\tdefault:\n \t\t\t\tbreak;\n \t\t\t}",
    "output": "Do not recognize gestures while selecting text"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/DialogUtils.java b/app/src/main/java/com/termux/app/DialogUtils.java\n--- a/app/src/main/java/com/termux/app/DialogUtils.java\n+++ b/app/src/main/java/com/termux/app/DialogUtils.java\n@@ -14,7 +14,8 @@ public interface TextSetListener {\n \t\tvoid onTextSet(String text);\n \t}\n \n-\tstatic void textInput(Activity activity, int titleText, int positiveButtonText, String initialText, final TextSetListener onPositive) {\n+\tstatic void textInput(Activity activity, int titleText, int positiveButtonText, String initialText, final TextSetListener onPositive,\n+\t\t\t\t\t\t\t\t\t\t int neutralButtonText, final TextSetListener onNeutral) {\n \t\tfinal EditText input = new EditText(activity);\n \t\tinput.setSingleLine();\n \t\tif (initialText != null) input.setText(initialText);\n@@ -31,12 +32,26 @@ static void textInput(Activity activity, int titleText, int positiveButtonText,\n \t\tlayout.setPadding(paddingTopAndSides, paddingTopAndSides, paddingTopAndSides, paddingBottom);\n \t\tlayout.addView(input);\n \n-\t\tnew AlertDialog.Builder(activity).setTitle(titleText).setView(layout).setPositiveButton(positiveButtonText, new DialogInterface.OnClickListener() {\n-\t\t\t@Override\n-\t\t\tpublic void onClick(DialogInterface d, int whichButton) {\n-\t\t\t\tonPositive.onTextSet(input.getText().toString());\n-\t\t\t}\n-\t\t}).setNegativeButton(android.R.string.cancel, null).show();\n+\t\tAlertDialog.Builder builder = new AlertDialog.Builder(activity)\n+\t\t\t.setTitle(titleText).setView(layout)\n+\t\t\t.setPositiveButton(positiveButtonText, new DialogInterface.OnClickListener() {\n+\t\t\t\t@Override\n+\t\t\t\tpublic void onClick(DialogInterface d, int whichButton) {\n+\t\t\t\t\tonPositive.onTextSet(input.getText().toString());\n+\t\t\t\t}\n+\t\t\t})\n+\t\t\t.setNegativeButton(android.R.string.cancel, null);\n+\n+\t\tif (onNeutral != null) {\n+\t\t\tbuilder.setNeutralButton(neutralButtonText, new DialogInterface.OnClickListener() {\n+\t\t\t\t@Override\n+\t\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n+\t\t\t\t\tonNeutral.onTextSet(input.getText().toString());\n+\t\t\t\t}\n+\t\t\t});\n+\t\t}\n+\n+\t\tbuilder.show();\n \t\tinput.requestFocus();\n \t}\n \n\ndiff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -291,30 +291,19 @@ public void onClick(View v) {\n \t\t\t@Override\n \t\t\tpublic boolean onLongClick(View v) {\n \t\t\t\tResources res = getResources();\n-\t\t\t\tnew AlertDialog.Builder(TermuxActivity.this).setTitle(R.string.new_session)\n-\t\t\t\t\t\t.setItems(new String[] { res.getString(R.string.new_session_normal_unnamed), res.getString(R.string.new_session_normal_named),\n-\t\t\t\t\t\t\t\tres.getString(R.string.new_session_failsafe) }, new DialogInterface.OnClickListener() {\n-\t\t\t\t\t@Override\n-\t\t\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n-\t\t\t\t\t\tswitch (which) {\n-\t\t\t\t\t\tcase 0:\n-\t\t\t\t\t\t\taddNewSession(false, null);\n-\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\tcase 1:\n-\t\t\t\t\t\t\tDialogUtils.textInput(TermuxActivity.this, R.string.session_new_named_title, R.string.session_new_named_positive_button, null,\n-\t\t\t\t\t\t\t\t\tnew DialogUtils.TextSetListener() {\n-\t\t\t\t\t\t\t\t@Override\n-\t\t\t\t\t\t\t\tpublic void onTextSet(String text) {\n-\t\t\t\t\t\t\t\t\taddNewSession(false, text);\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t});\n-\t\t\t\t\t\t\tbreak;\n-\t\t\t\t\t\tcase 2:\n-\t\t\t\t\t\t\taddNewSession(true, null);\n-\t\t\t\t\t\t\tbreak;\n+\t\t\t\tDialogUtils.textInput(TermuxActivity.this, R.string.session_new_named_title, R.string.session_new_named_positive_button, null,\n+\t\t\t\t\tnew DialogUtils.TextSetListener() {\n+\t\t\t\t\t\t@Override\n+\t\t\t\t\t\tpublic void onTextSet(String text) {\n+\t\t\t\t\t\t\taddNewSession(false, text);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}, R.string.new_session_failsafe, new DialogUtils.TextSetListener() {\n+\t\t\t\t\t\t@Override\n+\t\t\t\t\t\tpublic void onTextSet(String text) {\n+\t\t\t\t\t\t\taddNewSession(true, text);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\t}).show();\n+\t\t\t\t);\n \t\t\t\treturn true;\n \t\t\t}\n \t\t});\n@@ -509,7 +498,7 @@ void renameSession(final TerminalSession sessionToRename) {\n \t\t\t\t\tpublic void onTextSet(String text) {\n \t\t\t\t\t\tsessionToRename.mSessionName = text;\n \t\t\t\t\t}\n-\t\t\t\t});\n+\t\t\t\t}, -1, null);\n \t}\n \n \t@Override",
    "output": "Simplify long press on new session button"
  },
  {
    "input": "diff --git a/app/src/test/java/com/termux/terminal/KeyHandlerTest.java b/app/src/test/java/com/termux/terminal/KeyHandlerTest.java\n--- a/app/src/test/java/com/termux/terminal/KeyHandlerTest.java\n+++ b/app/src/test/java/com/termux/terminal/KeyHandlerTest.java\n@@ -111,6 +111,10 @@ public void testKeyCodes() {\n \t\t// Backspace.\n \t\tassertKeysEquals(\"\\u007f\", KeyHandler.getCode(KeyEvent.KEYCODE_DEL, 0, false, false));\n \n+\t\t// Space.\n+\t\tassertNull(KeyHandler.getCode(KeyEvent.KEYCODE_SPACE, 0, false, false));\n+\t\tassertKeysEquals(\"\\u0000\", KeyHandler.getCode(KeyEvent.KEYCODE_SPACE, KeyHandler.KEYMOD_CTRL, false, false));\n+\n \t\t// Back tab.\n \t\tassertKeysEquals(\"\\033[Z\", KeyHandler.getCode(KeyEvent.KEYCODE_TAB, KeyHandler.KEYMOD_SHIFT, false, false));\n ",
    "output": "Add test for space handling"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/drawer/DrawerLayout.java b/app/src/main/java/com/termux/drawer/DrawerLayout.java\n--- a/app/src/main/java/com/termux/drawer/DrawerLayout.java\n+++ b/app/src/main/java/com/termux/drawer/DrawerLayout.java\n@@ -16,8 +16,6 @@\n  * limitations under the License.\n  */\n \n-import java.util.List;\n-\n import android.annotation.SuppressLint;\n import android.content.Context;\n import android.content.res.TypedArray;\n@@ -27,8 +25,6 @@\n import android.graphics.drawable.ColorDrawable;\n import android.graphics.drawable.Drawable;\n import android.os.Build;\n-import android.os.Parcel;\n-import android.os.Parcelable;\n import android.os.SystemClock;\n import android.util.AttributeSet;\n import android.view.Gravity;\n@@ -39,6 +35,8 @@\n import android.view.accessibility.AccessibilityEvent;\n import android.view.accessibility.AccessibilityNodeInfo;\n \n+import java.util.List;\n+\n /**\n  * DrawerLayout acts as a top-level container for window content that allows for interactive \"drawer\" views to be pulled\n  * out from the edge of the window.\n@@ -1422,38 +1420,6 @@ public boolean onKeyUp(int keyCode, KeyEvent event) {\n \t\treturn super.onKeyUp(keyCode, event);\n \t}\n \n-\t@Override\n-\tprotected void onRestoreInstanceState(Parcelable state) {\n-\t\tfinal SavedState ss = (SavedState) state;\n-\t\tsuper.onRestoreInstanceState(ss.getSuperState());\n-\n-\t\tif (ss.openDrawerGravity != Gravity.NO_GRAVITY) {\n-\t\t\tfinal View toOpen = findDrawerWithGravity(ss.openDrawerGravity);\n-\t\t\tif (toOpen != null) {\n-\t\t\t\topenDrawer(toOpen);\n-\t\t\t}\n-\t\t}\n-\n-\t\tsetDrawerLockMode(ss.lockModeLeft, Gravity.LEFT);\n-\t\tsetDrawerLockMode(ss.lockModeRight, Gravity.RIGHT);\n-\t}\n-\n-\t@Override\n-\tprotected Parcelable onSaveInstanceState() {\n-\t\tfinal Parcelable superState = super.onSaveInstanceState();\n-\t\tfinal SavedState ss = new SavedState(superState);\n-\n-\t\tfinal View openDrawer = findOpenDrawer();\n-\t\tif (openDrawer != null) {\n-\t\t\tss.openDrawerGravity = ((LayoutParams) openDrawer.getLayoutParams()).gravity;\n-\t\t}\n-\n-\t\tss.lockModeLeft = mLockModeLeft;\n-\t\tss.lockModeRight = mLockModeRight;\n-\n-\t\treturn ss;\n-\t}\n-\n \t@Override\n \tpublic void addView(View child, int index, ViewGroup.LayoutParams params) {\n \t\tsuper.addView(child, index, params);\n@@ -1486,30 +1452,6 @@ static boolean includeChildForAccessibility(View child) {\n \t\t\t\t&& child.getImportantForAccessibility() != View.IMPORTANT_FOR_ACCESSIBILITY_NO;\n \t}\n \n-\t/**\n-\t * State persisted across instances\n-\t */\n-\tprotected static class SavedState extends BaseSavedState {\n-\t\tint openDrawerGravity = Gravity.NO_GRAVITY;\n-\t\tint lockModeLeft = LOCK_MODE_UNLOCKED;\n-\t\tint lockModeRight = LOCK_MODE_UNLOCKED;\n-\n-\t\tpublic SavedState(Parcel in) {\n-\t\t\tsuper(in);\n-\t\t\topenDrawerGravity = in.readInt();\n-\t\t}\n-\n-\t\tpublic SavedState(Parcelable superState) {\n-\t\t\tsuper(superState);\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic void writeToParcel(Parcel dest, int flags) {\n-\t\t\tsuper.writeToParcel(dest, flags);\n-\t\t\tdest.writeInt(openDrawerGravity);\n-\t\t}\n-\t}\n-\n \tprivate class ViewDragCallback extends ViewDragHelper.Callback {\n \t\tprivate final int mAbsGravity;\n \t\tprivate ViewDragHelper mDragger;",
    "output": "Do not save instance state in DrawerLayout\n\nThis was not needed, and due to missing CREATOR field caused a crash\nafter returning to the activity after it was evicted"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxHelpActivity.java b/app/src/main/java/com/termux/app/TermuxHelpActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxHelpActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxHelpActivity.java\n@@ -16,7 +16,6 @@\n public final class TermuxHelpActivity extends Activity {\n \n \tprivate WebView mWebView;\n-\tprivate ProgressBar mProgressBar;\n \n \t@Override\n \tprotected void onCreate(Bundle savedInstanceState) {\n@@ -25,10 +24,10 @@ protected void onCreate(Bundle savedInstanceState) {\n \t\tfinal RelativeLayout progressLayout = new RelativeLayout(this);\n \t\tRelativeLayout.LayoutParams lParams = new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);\n \t\tlParams.addRule(RelativeLayout.CENTER_IN_PARENT);\n-\t\tmProgressBar = new ProgressBar(this);\n-\t\tmProgressBar.setIndeterminate(true);\n-\t\tmProgressBar.setLayoutParams(lParams);\n-\t\tprogressLayout.addView(mProgressBar);\n+\t\tProgressBar progressBar = new ProgressBar(this);\n+\t\tprogressBar.setIndeterminate(true);\n+\t\tprogressBar.setLayoutParams(lParams);\n+\t\tprogressLayout.addView(progressBar);\n \n \t\tmWebView = new WebView(this);\n \t\tWebSettings settings = mWebView.getSettings();",
    "output": "Change member to local variable"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/view/TerminalView.java b/app/src/main/java/com/termux/view/TerminalView.java\n--- a/app/src/main/java/com/termux/view/TerminalView.java\n+++ b/app/src/main/java/com/termux/view/TerminalView.java\n@@ -644,13 +644,20 @@ void inputCodePoint(int codePoint, boolean controlDownFromEvent, boolean leftAlt\n \t\t\tif (resultingKeyCode > -1) {\n \t\t\t\thandleKeyCode(resultingKeyCode, 0);\n \t\t\t} else {\n-\t\t\t\t// The below two workarounds are needed on at least Logitech Keyboard k810 on Samsung Galaxy Tab Pro\n-\t\t\t\t// (Android 4.4) with the stock Samsung Keyboard. They should be harmless when not used since the need\n-\t\t\t\t// to input the original characters instead of the new ones using the keyboard should be low.\n-\t\t\t\t// Rewrite U+02DC 'SMALL TILDE' to U+007E 'TILDE' for ~ to work in shells:\n-\t\t\t\tif (codePoint == 0x02DC) codePoint = 0x07E;\n-\t\t\t\t// Rewrite U+02CB 'MODIFIER LETTER GRAVE ACCENT' to U+0060 'GRAVE ACCENT' for ` (backticks) to work:\n-\t\t\t\tif (codePoint == 0x02CB) codePoint = 0x60;\n+\t\t\t\t// Work around bluetooth keyboards sending funny unicode characters instead\n+\t\t\t\t// of the more normal ones from ASCII that terminal programs expect - the\n+\t\t\t\t// desire to input the original characters should be low.\n+\t\t\t\tswitch (codePoint) {\n+\t\t\t\t\tcase 0x02DC: // SMALL TILDE.\n+\t\t\t\t\t\tcodePoint = 0x007E; // TILDE (~).\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase 0x02CB: // MODIFIER LETTER GRAVE ACCENT.\n+\t\t\t\t\t\tcodePoint = 0x0060; // GRAVE ACCENT (`).\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase 0x02C6: // MODIFIER LETTER CIRCUMFLEX ACCENT.\n+\t\t\t\t\t\tcodePoint = 0x005E; // CIRCUMFLEX ACCENT (^).\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t}\n \n \t\t\t\t// If left alt, send escape before the code point to make e.g. Alt+B and Alt+F work in readline:\n \t\t\t\tmTermSession.writeCodePoint(leftAltDownFromEvent, codePoint);",
    "output": "Input normal ^ even on other unicode char input\n\nSome bluetooth keyboards [1] input U+02C6, the unicode character\nMODIFIER LETTER CIRCUMFLEX ACCENT instead of the more common ^\n(U+005E CIRCUMFLEX ACCENT). Remap it to the common caret since\nthat is what terminal programs expect.\n\n[1] https://plus.google.com/100972300636796512022/posts/f7PKpXWesgG"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/view/TerminalView.java b/app/src/main/java/com/termux/view/TerminalView.java\n--- a/app/src/main/java/com/termux/view/TerminalView.java\n+++ b/app/src/main/java/com/termux/view/TerminalView.java\n@@ -730,7 +730,7 @@ public void checkForFontAndColors() {\n \n \t\t\tinvalidate();\n \t\t} catch (Exception e) {\n-\t\t\tLog.e(EmulatorDebug.LOG_TAG, \"Error loading font\", e);\n+\t\t\tLog.e(EmulatorDebug.LOG_TAG, \"Error in checkForFontAndColors()\", e);\n \t\t}\n \t}\n ",
    "output": "Fix error message"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -136,9 +136,8 @@ public void onReceive(Context context, Intent intent) {\n \t\t\t\t\tif (ensureStoragePermissionGranted()) TermuxInstaller.setupStorageSymlinks(TermuxActivity.this);\n \t\t\t\t\treturn;\n \t\t\t\t}\n-\t\t\t\tif (whatToReload == null || \"colors\".equals(whatToReload)) mTerminalView.checkForColors();\n-\t\t\t\tif (whatToReload == null || \"font\".equals(whatToReload)) mTerminalView.checkForTypeface();\n-\t\t\t\tif (whatToReload == null || \"settings\".equals(whatToReload)) mSettings.reloadFromProperties(TermuxActivity.this);\n+\t\t\t\tmTerminalView.checkForFontAndColors();\n+\t\t\t\tmSettings.reloadFromProperties(TermuxActivity.this);\n \t\t\t}\n \t\t}\n \t};\n@@ -281,14 +280,16 @@ public boolean shouldBackButtonBeMappedToEscape() {\n \t\t\t}\n \t\t});\n \n-\t\tfindViewById(R.id.new_session_button).setOnClickListener(new OnClickListener() {\n+\t\tView newSessionButton = findViewById(R.id.new_session_button);\n+\n+\t\tnewSessionButton.setOnClickListener(new OnClickListener() {\n \t\t\t@Override\n \t\t\tpublic void onClick(View v) {\n \t\t\t\taddNewSession(false, null);\n \t\t\t}\n \t\t});\n \n-\t\tfindViewById(R.id.new_session_button).setOnLongClickListener(new OnLongClickListener() {\n+\t\tnewSessionButton.setOnLongClickListener(new OnLongClickListener() {\n \t\t\t@Override\n \t\t\tpublic boolean onLongClick(View v) {\n \t\t\t\tResources res = getResources();\n@@ -336,8 +337,7 @@ public void onClick(View v) {\n \t\tstartService(serviceIntent);\n \t\tif (!bindService(serviceIntent, this, 0)) throw new RuntimeException(\"bindService() failed\");\n \n-\t\tmTerminalView.checkForTypeface();\n-\t\tmTerminalView.checkForColors();\n+\t\tmTerminalView.checkForFontAndColors();\n \n \t\tmBellSoundId = mBellSoundPool.load(this, R.raw.bell, 1);\n \t}\n\ndiff --git a/app/src/main/java/com/termux/view/TerminalView.java b/app/src/main/java/com/termux/view/TerminalView.java\n--- a/app/src/main/java/com/termux/view/TerminalView.java\n+++ b/app/src/main/java/com/termux/view/TerminalView.java\n@@ -1,16 +1,5 @@\n package com.termux.view;\n \n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.InputStream;\n-import java.util.Properties;\n-\n-import com.termux.terminal.EmulatorDebug;\n-import com.termux.terminal.KeyHandler;\n-import com.termux.terminal.TerminalColors;\n-import com.termux.terminal.TerminalEmulator;\n-import com.termux.terminal.TerminalSession;\n-\n import android.annotation.SuppressLint;\n import android.content.Context;\n import android.graphics.Canvas;\n@@ -30,6 +19,17 @@\n import android.view.inputmethod.InputConnection;\n import android.widget.Scroller;\n \n+import com.termux.terminal.EmulatorDebug;\n+import com.termux.terminal.KeyHandler;\n+import com.termux.terminal.TerminalColors;\n+import com.termux.terminal.TerminalEmulator;\n+import com.termux.terminal.TerminalSession;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.InputStream;\n+import java.util.Properties;\n+\n /** View displaying and interacting with a {@link TerminalSession}. */\n public final class TerminalView extends View {\n \n@@ -710,67 +710,28 @@ private boolean handleVirtualKeys(int keyCode, KeyEvent event, boolean down) {\n \t\treturn false;\n \t}\n \n-\tpublic void checkForTypeface() {\n-\t\tnew Thread() {\n-\t\t\t@Override\n-\t\t\tpublic void run() {\n-\t\t\t\ttry {\n-\t\t\t\t\tFile fontFile = new File(\"/data/data/com.termux/files/home/.termux/font.ttf\");\n-\t\t\t\t\tfinal Typeface newTypeface = fontFile.exists() ? Typeface.createFromFile(fontFile) : Typeface.MONOSPACE;\n-\t\t\t\t\tif (newTypeface != mRenderer.mTypeface) {\n-\t\t\t\t\t\tpost(new Runnable() {\n-\t\t\t\t\t\t\t@Override\n-\t\t\t\t\t\t\tpublic void run() {\n-\t\t\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\t\t\tmRenderer = new TerminalRenderer(mRenderer.mTextSize, newTypeface);\n-\t\t\t\t\t\t\t\t\tupdateSize();\n-\t\t\t\t\t\t\t\t\tinvalidate();\n-\t\t\t\t\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\t\t\t\t\tLog.e(EmulatorDebug.LOG_TAG, \"Error loading font\", e);\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t});\n-\t\t\t\t\t}\n-\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\tLog.e(EmulatorDebug.LOG_TAG, \"Error loading font\", e);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}.start();\n-\t}\n+\tpublic void checkForFontAndColors() {\n+\t\ttry {\n+\t\t\tFile fontFile = new File(\"/data/data/com.termux/files/home/.termux/font.ttf\");\n+\t\t\tFile colorsFile = new File(\"/data/data/com.termux/files/home/.termux/colors.properties\");\n \n-\tpublic void checkForColors() {\n-\t\tnew Thread() {\n-\t\t\t@Override\n-\t\t\tpublic void run() {\n-\t\t\t\ttry {\n-\t\t\t\t\tFile colorsFile = new File(\"/data/data/com.termux/files/home/.termux/colors.properties\");\n-\t\t\t\t\tfinal Properties props = colorsFile.isFile() ? new Properties() : null;\n-\t\t\t\t\tif (props != null) {\n-\t\t\t\t\t\ttry (InputStream in = new FileInputStream(colorsFile)) {\n-\t\t\t\t\t\t\tprops.load(in);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t\tpost(new Runnable() {\n-\t\t\t\t\t\t@Override\n-\t\t\t\t\t\tpublic void run() {\n-\t\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\t\tif (props == null) {\n-\t\t\t\t\t\t\t\t\tTerminalColors.COLOR_SCHEME.reset();\n-\t\t\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\t\t\tTerminalColors.COLOR_SCHEME.updateWith(props);\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t\tif (mEmulator != null) mEmulator.mColors.reset();\n-\t\t\t\t\t\t\t\tinvalidate();\n-\t\t\t\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\t\t\t\tLog.e(EmulatorDebug.LOG_TAG, \"Setting colors failed: \" + e.getMessage());\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t});\n-\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\tLog.e(EmulatorDebug.LOG_TAG, \"Failed colors handling\", e);\n+\t\t\tfinal Properties props = new Properties();\n+\t\t\tif (colorsFile.isFile()) {\n+\t\t\t\ttry (InputStream in = new FileInputStream(colorsFile)) {\n+\t\t\t\t\tprops.load(in);\n \t\t\t\t}\n \t\t\t}\n-\t\t}.start();\n+\t\t\tTerminalColors.COLOR_SCHEME.updateWith(props);\n+\t\t\tif (mEmulator != null) mEmulator.mColors.reset();\n+\n+\t\t\tfinal Typeface newTypeface = fontFile.exists() ? Typeface.createFromFile(fontFile) : Typeface.MONOSPACE;\n+\t\t\tmRenderer = new TerminalRenderer(mRenderer.mTextSize, newTypeface);\n+\t\t\tupdateSize();\n+\n+\t\t\tinvalidate();\n+\t\t} catch (Exception e) {\n+\t\t\tLog.e(EmulatorDebug.LOG_TAG, \"Error loading font\", e);\n+\t\t}\n \t}\n \n \t/**",
    "output": "Fix problem with font and color loading at startup\n\nUsing View#post() does not work in onCreate()."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -92,6 +92,8 @@ public final class TermuxActivity extends Activity implements ServiceConnection\n \n \tprivate static final int MAX_SESSIONS = 8;\n \n+\tprivate static final int REQUESTCODE_PERMISSION_STORAGE = 1234;\n+\n \tprivate static final String RELOAD_STYLE_ACTION = \"com.termux.app.reload_style\";\n \n \t/** The main view of the activity showing the terminal. Initialized in onCreate(). */\n@@ -130,6 +132,10 @@ public final class TermuxActivity extends Activity implements ServiceConnection\n \t\tpublic void onReceive(Context context, Intent intent) {\n \t\t\tif (mIsVisible) {\n \t\t\t\tString whatToReload = intent.getStringExtra(RELOAD_STYLE_ACTION);\n+\t\t\t\tif (\"storage\".equals(whatToReload)) {\n+\t\t\t\t\tif (ensureStoragePermissionGranted()) TermuxInstaller.setupStorageSymlinks(TermuxActivity.this);\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n \t\t\t\tif (whatToReload == null || \"colors\".equals(whatToReload)) mTerminalView.checkForColors();\n \t\t\t\tif (whatToReload == null || \"font\".equals(whatToReload)) mTerminalView.checkForTypeface();\n \t\t\t\tif (whatToReload == null || \"settings\".equals(whatToReload)) mSettings.reloadFromProperties(TermuxActivity.this);\n@@ -139,11 +145,17 @@ public void onReceive(Context context, Intent intent) {\n \n \t/** For processes to access shared internal storage (/sdcard) we need this permission. */\n \t@TargetApi(Build.VERSION_CODES.M)\n-\tpublic void ensureStoragePermissionGranted() {\n+\tpublic boolean ensureStoragePermissionGranted() {\n \t\tif (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n-\t\t\tif (checkSelfPermission(android.Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {\n-\t\t\t\trequestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, 1234);\n+\t\t\tif (checkSelfPermission(android.Manifest.permission.WRITE_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED) {\n+\t\t\t\treturn true;\n+\t\t\t} else {\n+\t\t\t\trequestPermissions(new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, REQUESTCODE_PERMISSION_STORAGE);\n+\t\t\t\treturn false;\n \t\t\t}\n+\t\t} else {\n+\t\t\t// Always granted before Android 6.0.\n+\t\t\treturn true;\n \t\t}\n \t}\n \n@@ -327,8 +339,6 @@ public void onClick(View v) {\n \t\tmTerminalView.checkForTypeface();\n \t\tmTerminalView.checkForColors();\n \n-\t\tTermuxInstaller.setupStorageSymlinks(this);\n-\n \t\tmBellSoundId = mBellSoundPool.load(this, R.raw.bell, 1);\n \t}\n \n@@ -772,6 +782,13 @@ public void onClick(DialogInterface dialog, int which) {\n \t\t}\n \t}\n \n+\t@Override\n+\tpublic void onRequestPermissionsResult(int requestCode,  String permissions[], int[] grantResults) {\n+\t\tif (requestCode == REQUESTCODE_PERMISSION_STORAGE && grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n+\t\t\tTermuxInstaller.setupStorageSymlinks(this);\n+\t\t}\n+\t}\n+\n \tvoid toggleImmersive() {\n \t\tboolean newValue = !mSettings.isFullScreen();\n \t\tmSettings.setFullScreen(this, newValue);\n\ndiff --git a/app/src/main/java/com/termux/app/TermuxInstaller.java b/app/src/main/java/com/termux/app/TermuxInstaller.java\n--- a/app/src/main/java/com/termux/app/TermuxInstaller.java\n+++ b/app/src/main/java/com/termux/app/TermuxInstaller.java\n@@ -202,20 +202,21 @@ static void deleteFolder(File fileOrDirectory) {\n \t}\n \n \tpublic static void setupStorageSymlinks(final Context context) {\n+\t\tfinal String LOG_TAG = \"termux-storage\";\n \t\tnew Thread() {\n \t\t\tpublic void run() {\n \t\t\t\ttry {\n-\t\t\t\t\tFile storageDir = new File(TermuxService.FILES_PATH, \"storage\");\n+\t\t\t\t\tFile storageDir = new File(TermuxService.HOME_PATH, \"storage\");\n \n-\t\t\t\t\tif (storageDir.exists()) {\n-\t\t\t\t\t\tif (storageDir.isDirectory()) {\n-\t\t\t\t\t\t\treturn;\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\tstorageDir.delete();\n-\t\t\t\t\t\t}\n+\t\t\t\t\tif (storageDir.exists() && !storageDir.delete()) {\n+\t\t\t\t\t\tLog.e(LOG_TAG, \"Could not delete old $HOME/storage\");\n+\t\t\t\t\t\treturn;\n \t\t\t\t\t}\n \n-\t\t\t\t\tstorageDir.mkdirs();\n+\t\t\t\t\tif (!storageDir.mkdirs()) {\n+\t\t\t\t\t\tLog.e(LOG_TAG, \"Unable to mkdirs() for $HOME/storage\");\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n \n \t\t\t\t\tFile sharedDir = Environment.getExternalStorageDirectory();\n \t\t\t\t\tOs.symlink(sharedDir.getAbsolutePath(), new File(storageDir, \"shared\").getAbsolutePath());\n@@ -226,9 +227,6 @@ public void run() {\n \t\t\t\t\tFile dcimDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM);\n \t\t\t\t\tOs.symlink(dcimDir.getAbsolutePath(), new File(storageDir, \"dcim\").getAbsolutePath());\n \n-\t\t\t\t\tFile documentsDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOCUMENTS);\n-\t\t\t\t\tOs.symlink(documentsDir.getAbsolutePath(), new File(storageDir, \"documents\").getAbsolutePath());\n-\n \t\t\t\t\tFile picturesDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES);\n \t\t\t\t\tOs.symlink(picturesDir.getAbsolutePath(), new File(storageDir, \"pictures\").getAbsolutePath());\n \n@@ -244,7 +242,7 @@ public void run() {\n \t\t\t\t\t\tOs.symlink(externalDir.getAbsolutePath(), new File(storageDir, \"external\").getAbsolutePath());\n \t\t\t\t\t}\n \t\t\t\t} catch (Exception e) {\n-\t\t\t\t\tLog.e(\"termux\", \"Error setting up link\", e);\n+\t\t\t\t\tLog.e(LOG_TAG, \"Error setting up link\", e);\n \t\t\t\t}\n \t\t\t}\n \t\t}.start();",
    "output": "Updated storage handling\n\nLet the user run termux-setup-storage, which will ensure that storage\npermission has been granted and setup $HOME/storage/ folder with\nsymlinks to storage folders."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxHelpActivity.java b/app/src/main/java/com/termux/app/TermuxHelpActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxHelpActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxHelpActivity.java\n@@ -5,33 +5,63 @@\n import android.content.Intent;\n import android.net.Uri;\n import android.os.Bundle;\n+import android.view.ViewGroup;\n+import android.webkit.WebSettings;\n import android.webkit.WebView;\n import android.webkit.WebViewClient;\n+import android.widget.ProgressBar;\n+import android.widget.RelativeLayout;\n \n-/** Basic embedded browser for viewing the bundled help page. */\n+/** Basic embedded browser for viewing help pages. */\n public final class TermuxHelpActivity extends Activity {\n \n \tprivate WebView mWebView;\n+\tprivate ProgressBar mProgressBar;\n \n \t@Override\n \tprotected void onCreate(Bundle savedInstanceState) {\n \t\tsuper.onCreate(savedInstanceState);\n+\n+\t\tfinal RelativeLayout progressLayout = new RelativeLayout(this);\n+\t\tRelativeLayout.LayoutParams lParams = new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);\n+\t\tlParams.addRule(RelativeLayout.CENTER_IN_PARENT);\n+\t\tmProgressBar = new ProgressBar(this);\n+\t\tmProgressBar.setIndeterminate(true);\n+\t\tmProgressBar.setLayoutParams(lParams);\n+\t\tprogressLayout.addView(mProgressBar);\n+\n \t\tmWebView = new WebView(this);\n-\t\tsetContentView(mWebView);\n+\t\tWebSettings settings = mWebView.getSettings();\n+\t\tsettings.setCacheMode(WebSettings.LOAD_NO_CACHE);\n+\t\tsettings.setAppCacheEnabled(false);\n+\t\tsetContentView(progressLayout);\n+\t\tmWebView.clearCache(true);\n+\n \t\tmWebView.setWebViewClient(new WebViewClient() {\n \t\t\t@Override\n \t\t\tpublic boolean shouldOverrideUrlLoading(WebView view, String url) {\n+\t\t\t\tif (url.startsWith(\"https://termux.com\")) {\n+\t\t\t\t\t// Inline help.\n+\t\t\t\t\tsetContentView(progressLayout);\n+\t\t\t\t\treturn false;\n+\t\t\t\t}\n+\n \t\t\t\ttry {\n \t\t\t\t\tstartActivity(new Intent(Intent.ACTION_VIEW, Uri.parse(url)).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK));\n \t\t\t\t} catch (ActivityNotFoundException e) {\n-\t\t\t\t\t// TODO: Android TV does not have a system browser - but needs better method of getting back\n-\t\t\t\t\t// than navigating deep here.\n+\t\t\t\t\t// Android TV does not have a system browser.\n+\t\t\t\t\tsetContentView(progressLayout);\n \t\t\t\t\treturn false;\n \t\t\t\t}\n \t\t\t\treturn true;\n \t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void onPageFinished(WebView view, String url) {\n+\t\t\t\tsetContentView(mWebView);\n+\t\t\t}\n \t\t});\n-\t\tmWebView.loadUrl(\"file:///android_asset/help.html\");\n+\t\tmWebView.loadUrl(\"https://termux.com/help.html\");\n \t}\n \n \t@Override",
    "output": "Remove bundled help in favour of online help"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -132,6 +132,7 @@ public void onReceive(Context context, Intent intent) {\n \t\t\t\tString whatToReload = intent.getStringExtra(RELOAD_STYLE_ACTION);\n \t\t\t\tif (whatToReload == null || \"colors\".equals(whatToReload)) mTerminalView.checkForColors();\n \t\t\t\tif (whatToReload == null || \"font\".equals(whatToReload)) mTerminalView.checkForTypeface();\n+\t\t\t\tif (whatToReload == null || \"settings\".equals(whatToReload)) mSettings.reloadFromProperties(TermuxActivity.this);\n \t\t\t}\n \t\t}\n \t};",
    "output": "Make it possible to reload settings at runtime"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -94,8 +94,8 @@ public final class TermuxActivity extends Activity implements ServiceConnection\n \n \tprivate static final String RELOAD_STYLE_ACTION = \"com.termux.app.reload_style\";\n \n-\t/** The main view of the activity showing the terminal. */\n-\t@NonNull TerminalView mTerminalView;\n+\t/** The main view of the activity showing the terminal. Initialized in onCreate(). */\n+\t@SuppressWarnings(\"NullableProblems\") @NonNull TerminalView mTerminalView;\n \n \tfinal FullScreenHelper mFullScreenHelper = new FullScreenHelper(this);\n \n@@ -326,8 +326,6 @@ public void onClick(View v) {\n \t\tmTerminalView.checkForTypeface();\n \t\tmTerminalView.checkForColors();\n \n-\t\tensureStoragePermissionGranted();\n-\n \t\tTermuxInstaller.setupStorageSymlinks(this);\n \n \t\tmBellSoundId = mBellSoundPool.load(this, R.raw.bell, 1);",
    "output": "Avoid prompting for storage permission for now"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxInstaller.java b/app/src/main/java/com/termux/app/TermuxInstaller.java\n--- a/app/src/main/java/com/termux/app/TermuxInstaller.java\n+++ b/app/src/main/java/com/termux/app/TermuxInstaller.java\n@@ -185,7 +185,7 @@ static URL determineZipUrl() throws MalformedURLException {\n \t\t} else if (arch.equals(\"x86_64\")) {\n \t\t\tarch = \"i686\";\n \t\t}\n-\t\treturn new URL(\"http://apt.termux.com/bootstrap/bootstrap-\" + arch + \".zip\");\n+\t\treturn new URL(\"https://termux.net/bootstrap/bootstrap-\" + arch + \".zip\");\n \t}\n \n \t/** Delete a folder and all its content or throw. */",
    "output": "Transition to https://termux.net for bootstrap\n\nThe initial bootstrap zip was previously downloaded from\nhttp://apt.termux.com, which lacked security and was not behind a CDN.\n\nBy moving to https://termux.net we improve security (as it's https)\nand reliability (as it's using a CDN).\n\nFixes https://github.com/termux/termux-packages/issues/89."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/view/TerminalView.java b/app/src/main/java/com/termux/view/TerminalView.java\n--- a/app/src/main/java/com/termux/view/TerminalView.java\n+++ b/app/src/main/java/com/termux/view/TerminalView.java\n@@ -491,9 +491,8 @@ public boolean onTouchEvent(MotionEvent ev) {\n \t@Override\n \tpublic boolean onKeyPreIme(int keyCode, KeyEvent event) {\n \t\tif (LOG_KEY_EVENTS) Log.i(EmulatorDebug.LOG_TAG, \"onKeyPreIme(keyCode=\" + keyCode + \", event=\" + event + \")\");\n-\t\tif (keyCode == KeyEvent.KEYCODE_ESCAPE || (keyCode == KeyEvent.KEYCODE_BACK && mOnKeyListener.shouldBackButtonBeMappedToEscape())) {\n-\t\t\t// Handle the escape key ourselves to avoid the system from treating it as back key\n-\t\t\t// and e.g. close keyboard.\n+\t\tif (keyCode == KeyEvent.KEYCODE_BACK && mOnKeyListener.shouldBackButtonBeMappedToEscape()) {\n+\t\t\t// Intercept back button to treat it as escape:\n \t\t\tswitch (event.getAction()) {\n \t\t\tcase KeyEvent.ACTION_DOWN:\n \t\t\t\treturn onKeyDown(keyCode, event);",
    "output": "Do not eat escape key events in onKeyPreIme()\n\nThe original reason for intercepting the escape key in onKeyPreIme()\nwas to prevent the escape key as being treated as the Back key before\nreaching onKeyDown().\n\nThis seems no long necessary, and may mess up handling the ...+1\ncombination for escape on the Google Pixel C keyboard (see #27)."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxInstaller.java b/app/src/main/java/com/termux/app/TermuxInstaller.java\n--- a/app/src/main/java/com/termux/app/TermuxInstaller.java\n+++ b/app/src/main/java/com/termux/app/TermuxInstaller.java\n@@ -205,9 +205,7 @@ public static void setupStorageSymlinks(final Context context) {\n \t\tnew Thread() {\n \t\t\tpublic void run() {\n \t\t\t\ttry {\n-\t\t\t\t\tFile homeDir = new File(TermuxService.HOME_PATH);\n-\t\t\t\t\thomeDir.mkdirs();\n-\t\t\t\t\tFile storageDir = new File(homeDir, \"storage\");\n+\t\t\t\t\tFile storageDir = new File(TermuxService.FILES_PATH, \"storage\");\n \n \t\t\t\t\tif (storageDir.exists()) {\n \t\t\t\t\t\tif (storageDir.isDirectory()) {\n@@ -241,7 +239,7 @@ public void run() {\n \t\t\t\t\tOs.symlink(moviesDir.getAbsolutePath(), new File(storageDir, \"movies\").getAbsolutePath());\n \n \t\t\t\t\tfinal File[] dirs = context.getExternalFilesDirs(null);\n-\t\t\t\t\tif (dirs == null || dirs.length >= 2) {\n+\t\t\t\t\tif (dirs != null && dirs.length >= 2) {\n \t\t\t\t\t\tfinal File externalDir = dirs[1];\n \t\t\t\t\t\tOs.symlink(externalDir.getAbsolutePath(), new File(storageDir, \"external\").getAbsolutePath());\n \t\t\t\t\t}",
    "output": "Use $PREFIX/storage for symlinks. Rix null check."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxPreferences.java b/app/src/main/java/com/termux/app/TermuxPreferences.java\n--- a/app/src/main/java/com/termux/app/TermuxPreferences.java\n+++ b/app/src/main/java/com/termux/app/TermuxPreferences.java\n@@ -5,12 +5,38 @@\n import android.content.Context;\n import android.content.SharedPreferences;\n import android.preference.PreferenceManager;\n+import android.support.annotation.IntDef;\n+import android.util.Log;\n import android.util.TypedValue;\n+import android.widget.Toast;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.util.Properties;\n \n final class TermuxPreferences {\n \n+\t@IntDef({BELL_VIBRATE, BELL_BEEP, BELL_IGNORE})\n+\t@Retention(RetentionPolicy.SOURCE)\n+\tpublic @interface AsciiBellBehaviour {}\n+\n+\tstatic final int BELL_VIBRATE = 1;\n+\tstatic final int BELL_BEEP = 2;\n+\tstatic final int BELL_IGNORE = 3;\n+\n+\t@IntDef({TAP_TOGGLE_KEYBOARD, TAP_SHOW_MENU, TAP_IGNORE})\n+\t@Retention(RetentionPolicy.SOURCE)\n+\tpublic @interface TapTerminalBehaviour {}\n+\n+\tstatic final int TAP_TOGGLE_KEYBOARD = 1;\n+\tstatic final int TAP_SHOW_MENU = 2;\n+\tstatic final int TAP_IGNORE = 3;\n+\n \tprivate final int MIN_FONTSIZE;\n \tprivate static final int MAX_FONTSIZE = 256;\n+\n \tprivate static final String FULLSCREEN_KEY = \"fullscreen\";\n \tprivate static final String FONTSIZE_KEY = \"fontsize\";\n \tprivate static final String CURRENT_SESSION_KEY = \"current_session\";\n@@ -19,7 +45,16 @@ final class TermuxPreferences {\n \tprivate boolean mFullScreen;\n \tprivate int mFontSize;\n \n+\t@AsciiBellBehaviour\n+\tint mBellBehaviour = BELL_VIBRATE;\n+\n+\t@TapTerminalBehaviour\n+\tint mTapBehaviour = TAP_TOGGLE_KEYBOARD;\n+\n+\tboolean mBackIsEscape = true;\n+\n \tTermuxPreferences(Context context) {\n+\t\treloadFromProperties(context);\n \t\tSharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);\n \n \t\tfloat dipInPixels = TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 1, context.getResources().getDisplayMetrics());\n@@ -86,4 +121,49 @@ public static void disableWelcomeDialog(Context context) {\n \t\tPreferenceManager.getDefaultSharedPreferences(context).edit().putBoolean(SHOW_WELCOME_DIALOG_KEY, false).apply();\n \t}\n \n+\tpublic void reloadFromProperties(Context context) {\n+\t\ttry {\n+\t\t\tFile propsFile = new File(TermuxService.HOME_PATH + \"/.config/termux/termux.properties\");\n+\t\t\tif (propsFile.isFile() && propsFile.canRead()) {\n+\t\t\t\tProperties props = new Properties();\n+\t\t\t\ttry (FileInputStream in = new FileInputStream(propsFile)) {\n+\t\t\t\t\tprops.load(in);\n+\t\t\t\t}\n+\n+\t\t\t\tswitch (props.getProperty(\"bell-character\", \"vibrate\")) {\n+\t\t\t\t\tcase \"beep\":\n+\t\t\t\t\t\tmBellBehaviour = BELL_BEEP;\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase \"ignore\":\n+\t\t\t\t\t\tmBellBehaviour = BELL_IGNORE;\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tdefault: // \"vibrate\".\n+\t\t\t\t\t\tmBellBehaviour = BELL_VIBRATE;\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\n+\t\t\t\tswitch (props.getProperty(\"tap-screen\", \"toggle-keyboard\")) {\n+\t\t\t\t\tcase \"show-menu\":\n+\t\t\t\t\t\tmTapBehaviour = TAP_SHOW_MENU;\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tcase \"ignore\":\n+\t\t\t\t\t\tmTapBehaviour = TAP_IGNORE;\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\tdefault: // \"toggle-keyboard\".\n+\t\t\t\t\t\tmTapBehaviour = TAP_TOGGLE_KEYBOARD;\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\n+\t\t\t\tmBackIsEscape = !\"back\".equals(props.getProperty(\"back-key\", \"escape\"));\n+\t\t\t} else {\n+\t\t\t\tmBellBehaviour = BELL_VIBRATE;\n+\t\t\t\tmTapBehaviour = TAP_TOGGLE_KEYBOARD;\n+\t\t\t\tmBackIsEscape = true;\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\tToast.makeText(context, \"Error loading properties: \" + e.getMessage(), Toast.LENGTH_LONG).show();\n+\t\t\tLog.e(\"termux\", \"Error loading props\", e);\n+\t\t}\n+\t}\n+\n }",
    "output": "Read support for customizing through properties\n\nBy using the file $HOME/.config/termux/termux.properties it will\nbe possible to configure the behaviour of:\n\n- The bell character.\n- Tapping the terminal.\n- The back key."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/drawer/DrawerLayout.java b/app/src/main/java/com/termux/drawer/DrawerLayout.java\n--- a/app/src/main/java/com/termux/drawer/DrawerLayout.java\n+++ b/app/src/main/java/com/termux/drawer/DrawerLayout.java\n@@ -138,11 +138,11 @@ public class DrawerLayout extends ViewGroup {\n \n \tprivate final ChildAccessibilityDelegate mChildAccessibilityDelegate = new ChildAccessibilityDelegate();\n \n-\tprivate int mMinDrawerMargin;\n+\tprivate final int mMinDrawerMargin;\n \n \tprivate int mScrimColor = DEFAULT_SCRIM_COLOR;\n \tprivate float mScrimOpacity;\n-\tprivate Paint mScrimPaint = new Paint();\n+\tprivate final Paint mScrimPaint = new Paint();\n \n \tprivate final ViewDragHelper mLeftDragger;\n \tprivate final ViewDragHelper mRightDragger;\n\ndiff --git a/app/src/main/java/com/termux/drawer/ViewDragHelper.java b/app/src/main/java/com/termux/drawer/ViewDragHelper.java\n--- a/app/src/main/java/com/termux/drawer/ViewDragHelper.java\n+++ b/app/src/main/java/com/termux/drawer/ViewDragHelper.java\n@@ -57,7 +57,7 @@ public class ViewDragHelper {\n \t/**\n \t * Edge flag indicating that the left edge should be affected.\n \t */\n-\tpublic static final int EDGE_LEFT = 1 << 0;\n+\tpublic static final int EDGE_LEFT = 1 /*1 << 0*/;\n \n \t/**\n \t * Edge flag indicating that the right edge should be affected.\n@@ -82,7 +82,7 @@ public class ViewDragHelper {\n \t/**\n \t * Indicates that a check should occur along the horizontal axis\n \t */\n-\tpublic static final int DIRECTION_HORIZONTAL = 1 << 0;\n+\tpublic static final int DIRECTION_HORIZONTAL = 1 /*1 << 0*/;\n \n \t/**\n \t * Indicates that a check should occur along the vertical axis\n\ndiff --git a/app/src/main/java/com/termux/terminal/TerminalEmulator.java b/app/src/main/java/com/termux/terminal/TerminalEmulator.java\n--- a/app/src/main/java/com/termux/terminal/TerminalEmulator.java\n+++ b/app/src/main/java/com/termux/terminal/TerminalEmulator.java\n@@ -33,8 +33,7 @@ public final class TerminalEmulator {\n \tprivate static final boolean LOG_ESCAPE_SEQUENCES = false;\n \n \tpublic static final int MOUSE_LEFT_BUTTON = 0;\n-\tpublic static final int MOUSE_MIDDLE_BUTTON = 1;\n-\tpublic static final int MOUSE_RIGHT_BUTTON = 2;\n+\n \t/** Mouse moving while having left mouse button pressed. */\n \tpublic static final int MOUSE_LEFT_BUTTON_MOVED = 32;\n \tpublic static final int MOUSE_WHEELUP_BUTTON = 64;",
    "output": "Fix lint warnings"
  },
  {
    "input": "diff --git a/app/src/test/java/com/termux/terminal/OperatingSystemControlTest.java b/app/src/test/java/com/termux/terminal/OperatingSystemControlTest.java\n--- a/app/src/test/java/com/termux/terminal/OperatingSystemControlTest.java\n+++ b/app/src/test/java/com/termux/terminal/OperatingSystemControlTest.java\n@@ -15,7 +15,7 @@ public void testSetTitle() throws Exception {\n \t\twithTerminalSized(10, 10);\n \t\tenterString(\"\\033]0;Hello, world\\007\");\n \t\tassertEquals(\"Hello, world\", mTerminal.getTitle());\n-\t\texpectedTitleChanges.add(new ChangedTitle((String) null, \"Hello, world\"));\n+\t\texpectedTitleChanges.add(new ChangedTitle(null, \"Hello, world\"));\n \t\tassertEquals(expectedTitleChanges, mOutput.titleChanges);\n \n \t\tenterString(\"\\033]0;Goodbye, world\\007\");",
    "output": "Fix lint warning"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/view/TerminalView.java b/app/src/main/java/com/termux/view/TerminalView.java\n--- a/app/src/main/java/com/termux/view/TerminalView.java\n+++ b/app/src/main/java/com/termux/view/TerminalView.java\n@@ -717,10 +717,10 @@ public void checkForTypeface() {\n \t\t\t@Override\n \t\t\tpublic void run() {\n \t\t\t\ttry {\n-\t\t\t\t\tFile fontFile = new File(getContext().getFilesDir().getPath() + \"/home/.termux/font.ttf\");\n+\t\t\t\t\tFile fontFile = new File(\"/data/data/com.termux/files/home/.termux/font.ttf\");\n \t\t\t\t\tfinal Typeface newTypeface = fontFile.exists() ? Typeface.createFromFile(fontFile) : Typeface.MONOSPACE;\n \t\t\t\t\tif (newTypeface != mRenderer.mTypeface) {\n-\t\t\t\t\t\t((Activity) getContext()).runOnUiThread(new Runnable() {\n+\t\t\t\t\t\tpost(new Runnable() {\n \t\t\t\t\t\t\t@Override\n \t\t\t\t\t\t\tpublic void run() {\n \t\t\t\t\t\t\t\ttry {\n@@ -745,14 +745,14 @@ public void checkForColors() {\n \t\t\t@Override\n \t\t\tpublic void run() {\n \t\t\t\ttry {\n-\t\t\t\t\tFile colorsFile = new File(getContext().getFilesDir().getPath() + \"/home/.termux/colors.properties\");\n+\t\t\t\t\tFile colorsFile = new File(\"/data/data/com.termux/files/home/.termux/colors.properties\");\n \t\t\t\t\tfinal Properties props = colorsFile.isFile() ? new Properties() : null;\n \t\t\t\t\tif (props != null) {\n \t\t\t\t\t\ttry (InputStream in = new FileInputStream(colorsFile)) {\n \t\t\t\t\t\t\tprops.load(in);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\t\t((Activity) getContext()).runOnUiThread(new Runnable() {\n+\t\t\t\t\tpost(new Runnable() {\n \t\t\t\t\t\t@Override\n \t\t\t\t\t\tpublic void run() {\n \t\t\t\t\t\t\ttry {",
    "output": "TerminalView: Make theming work for non-activities"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -293,6 +293,8 @@ public void onClick(View v) {\n \n \t\tmTerminalView.checkForTypeface();\n \t\tmTerminalView.checkForColors();\n+\n+\t\tTermuxInstaller.setupStorageSymlink(this);\n \t}\n \n \t/**\n\ndiff --git a/app/src/main/java/com/termux/app/TermuxInstaller.java b/app/src/main/java/com/termux/app/TermuxInstaller.java\n--- a/app/src/main/java/com/termux/app/TermuxInstaller.java\n+++ b/app/src/main/java/com/termux/app/TermuxInstaller.java\n@@ -1,16 +1,5 @@\n package com.termux.app;\n \n-import java.io.BufferedReader;\n-import java.io.File;\n-import java.io.FileOutputStream;\n-import java.io.InputStreamReader;\n-import java.net.MalformedURLException;\n-import java.net.URL;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.zip.ZipEntry;\n-import java.util.zip.ZipInputStream;\n-\n import android.app.Activity;\n import android.app.AlertDialog;\n import android.app.ProgressDialog;\n@@ -26,6 +15,17 @@\n import com.termux.R;\n import com.termux.terminal.EmulatorDebug;\n \n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.InputStreamReader;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipInputStream;\n+\n /**\n  * Install the Termux bootstrap packages if necessary by following the below steps:\n  * \n@@ -200,4 +200,36 @@ static void deleteFolder(File fileOrDirectory) {\n \t\t}\n \t}\n \n+\tpublic static void setupStorageSymlink(final Context context) {\n+\t\tfinal File[] dirs = context.getExternalFilesDirs(null);\n+\t\tif (dirs == null || dirs.length < 2) return;\n+\t\tnew Thread() {\n+\t\t\tpublic void run() {\n+\t\t\t\ttry {\n+\t\t\t\t\tfinal File externalDir = dirs[1];\n+\t\t\t\t\tFile homeDir = new File(TermuxService.HOME_PATH);\n+\t\t\t\t\thomeDir.mkdirs();\n+\t\t\t\t\tFile externalLink = new File(homeDir, \"storage\");\n+\n+\t\t\t\t\tif (externalLink.exists()) {\n+\t\t\t\t\t\tif (externalLink.getCanonicalPath().equals(externalDir.getPath())) {\n+\t\t\t\t\t\t\t// Keeping existing link.\n+\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\t// Removing old link to give place to new.\n+\t\t\t\t\t\t\tif (!externalLink.delete()) {\n+\t\t\t\t\t\t\t\tLog.e(\"termux\", \"Unable to remove old $HOME/storage to give place for new\");\n+\t\t\t\t\t\t\t\treturn;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tOs.symlink(externalDir.getAbsolutePath(), externalLink.getAbsolutePath());\n+\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\tLog.e(\"termux\", \"Error setting up link\", e);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}.start();\n+\t}\n+\n }",
    "output": "Setup $HOME/storage symlink for external symlink\n\nAt startup Termux now checks if there is external storage available,\nand creates a private area on the external storage if one exists as\nwell as creating a symlink to the private are at $HOME/storage."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/terminal/TerminalEmulator.java b/app/src/main/java/com/termux/terminal/TerminalEmulator.java\n--- a/app/src/main/java/com/termux/terminal/TerminalEmulator.java\n+++ b/app/src/main/java/com/termux/terminal/TerminalEmulator.java\n@@ -1444,7 +1444,7 @@ private void doCsi(int b) {\n \t\t\t\tfinal int linesToScrollArg = getArg0(1);\n \t\t\t\tfinal int linesBetweenTopAndBottomMargins = mBottomMargin - mTopMargin;\n \t\t\t\tfinal int linesToScroll = Math.min(linesBetweenTopAndBottomMargins, linesToScrollArg);\n-\t\t\t\tmScreen.blockCopy(0, mTopMargin, mColumns, linesBetweenTopAndBottomMargins - linesToScroll, 0, linesToScroll);\n+\t\t\t\tmScreen.blockCopy(0, mTopMargin, mColumns, linesBetweenTopAndBottomMargins - linesToScroll, 0, mTopMargin + linesToScroll);\n \t\t\t\tblockClear(0, mTopMargin, mColumns, linesToScroll);\n \t\t\t} else {\n \t\t\t\t// \"${CSI}${func};${startx};${starty};${firstrow};${lastrow}T\" - initiate highlight mouse tracking.\n\ndiff --git a/app/src/test/java/com/termux/terminal/ScrollRegionTest.java b/app/src/test/java/com/termux/terminal/ScrollRegionTest.java\n--- a/app/src/test/java/com/termux/terminal/ScrollRegionTest.java\n+++ b/app/src/test/java/com/termux/terminal/ScrollRegionTest.java\n@@ -94,4 +94,8 @@ public void testForwardIndex() {\n \t\twithTerminalSized(3, 3).enterString(\"\\033[?69h\\033[0;2sABCD\\0339\").assertLinesAre(\"B  \", \"D  \", \"   \");\n \t}\n \n+\tpublic void testScrollDownWithScrollRegion() {\n+\t\twithTerminalSized(2, 5).enterString(\"1\\r\\n2\\r\\n3\\r\\n4\\r\\n5\").assertLinesAre(\"1 \", \"2 \", \"3 \", \"4 \", \"5 \");\n+\t\tenterString(\"\\033[3r\").enterString(\"\\033[2T\").assertLinesAre(\"1 \", \"2 \", \"  \", \"  \", \"3 \");\n+\t}\n }",
    "output": "Fix bug with scrolling down and top scroll margin\n\nThe Termux implementation of the ${CSI}${N}T escape sequence to scroll\ndown N lines (SD - Pan Up) did not take the top margin into account\nwhen figuring out where to place the scrolled rows.\n\nFixes #28."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/view/GestureAndScaleRecognizer.java b/app/src/main/java/com/termux/view/GestureAndScaleRecognizer.java\n--- a/app/src/main/java/com/termux/view/GestureAndScaleRecognizer.java\n+++ b/app/src/main/java/com/termux/view/GestureAndScaleRecognizer.java\n@@ -6,7 +6,7 @@\n import android.view.ScaleGestureDetector;\n \n /** A combination of {@link GestureDetector} and {@link ScaleGestureDetector}. */\n-public class GestureAndScaleRecognizer {\n+public final class GestureAndScaleRecognizer {\n \n \tpublic interface Listener {\n \t\tboolean onSingleTapUp(MotionEvent e);\n@@ -29,6 +29,7 @@ public interface Listener {\n \tprivate final GestureDetector mGestureDetector;\n \tprivate final ScaleGestureDetector mScaleDetector;\n \tfinal Listener mListener;\n+\tboolean isAfterLongPress;\n \n \tpublic GestureAndScaleRecognizer(Context context, Listener listener) {\n \t\tmListener = listener;\n@@ -52,6 +53,7 @@ public boolean onDown(MotionEvent e) {\n \t\t\t@Override\n \t\t\tpublic void onLongPress(MotionEvent e) {\n \t\t\t\tmListener.onLongPress(e);\n+\t\t\t\tisAfterLongPress = true;\n \t\t\t}\n \t\t}, null, true /* ignoreMultitouch */);\n \n@@ -88,13 +90,22 @@ public boolean onScale(ScaleGestureDetector detector) {\n \tpublic void onTouchEvent(MotionEvent event) {\n \t\tmGestureDetector.onTouchEvent(event);\n \t\tmScaleDetector.onTouchEvent(event);\n-\t\tif (event.getAction() == MotionEvent.ACTION_UP) {\n-\t\t\tmListener.onUp(event);\n+\t\tswitch (event.getAction()) {\n+\t\t\tcase MotionEvent.ACTION_DOWN:\n+\t\t\t\tisAfterLongPress = false;\n+\t\t\t\tbreak;\n+\t\t\tcase MotionEvent.ACTION_UP:\n+\t\t\t\tif (!isAfterLongPress) {\n+\t\t\t\t\t// This behaviour is desired when in e.g. vim with mouse events, where we do not\n+\t\t\t\t\t// want to move the cursor when lifting finger after a long press.\n+\t\t\t\t\tmListener.onUp(event);\n+\t\t\t\t}\n+\t\t\t\tbreak;\n \t\t}\n \t}\n \n \tpublic boolean isInProgress() {\n \t\treturn mScaleDetector.isInProgress();\n \t}\n \n-}\n\\ No newline at end of file\n+}",
    "output": "Improve motion event handling after long press\n\nWhen mouse reporting is enabled, do not send mouse events on up\nafter a long press, since that causes e.g. the cursor to move in\nvim when lifting the finger after long pressing for the menu."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/terminal/TerminalEmulator.java b/app/src/main/java/com/termux/terminal/TerminalEmulator.java\n--- a/app/src/main/java/com/termux/terminal/TerminalEmulator.java\n+++ b/app/src/main/java/com/termux/terminal/TerminalEmulator.java\n@@ -2156,15 +2156,22 @@ private void emitCodePoint(int codePoint) {\n \n \t\tfinal boolean autoWrap = isDecsetInternalBitSet(DECSET_BIT_AUTOWRAP);\n \t\tfinal int displayWidth = WcWidth.width(codePoint);\n-\n-\t\tif (autoWrap && (mCursorCol == mRightMargin - 1 && ((mAboutToAutoWrap && displayWidth == 1) || displayWidth == 2))) {\n-\t\t\tmScreen.setLineWrap(mCursorRow);\n-\t\t\tmCursorCol = mLeftMargin;\n-\t\t\tif (mCursorRow + 1 < mBottomMargin) {\n-\t\t\t\tmCursorRow++;\n-\t\t\t} else {\n-\t\t\t\tscrollDownOneLine();\n+\t\tfinal boolean cursorInLastColumn = mCursorCol == mRightMargin - 1;\n+\n+\t\tif (autoWrap) {\n+\t\t\tif (cursorInLastColumn && ((mAboutToAutoWrap && displayWidth == 1) || displayWidth == 2)) {\n+\t\t\t\tmScreen.setLineWrap(mCursorRow);\n+\t\t\t\tmCursorCol = mLeftMargin;\n+\t\t\t\tif (mCursorRow + 1 < mBottomMargin) {\n+\t\t\t\t\tmCursorRow++;\n+\t\t\t\t} else {\n+\t\t\t\t\tscrollDownOneLine();\n+\t\t\t\t}\n \t\t\t}\n+\t\t} else if (cursorInLastColumn && displayWidth == 2) {\n+\t\t\t// The behaviour when a wide character is output with cursor in the last column when\n+\t\t\t// autowrap is disabled is not obvious - it's ignored here.\n+\t\t\treturn;\n \t\t}\n \n \t\tif (mInsertMode && displayWidth > 0) {\n\ndiff --git a/app/src/test/java/com/termux/terminal/UnicodeInputTest.java b/app/src/test/java/com/termux/terminal/UnicodeInputTest.java\n--- a/app/src/test/java/com/termux/terminal/UnicodeInputTest.java\n+++ b/app/src/test/java/com/termux/terminal/UnicodeInputTest.java\n@@ -84,4 +84,12 @@ public void testOverlongUtf8Encoding() throws Exception {\n \t\tassertLineIs(0, \"\\uFFFDY   \");\n \t}\n \n+\tpublic void testWideCharacterWithoutWrapping() throws Exception {\n+\t\t// With wraparound disabled. The behaviour when a wide character is output with cursor in\n+\t\t// the last column when autowrap is disabled is not obvious, but we expect the wide\n+\t\t// character to be ignored here.\n+\t\twithTerminalSized(3, 3).enterString(\"\\033[?7l\").enterString(\"枝枝枝\").assertLinesAre(\"枝 \", \"   \", \"   \");\n+\t\tenterString(\"a枝\").assertLinesAre(\"枝a\", \"   \", \"   \");\n+\t}\n+\n }",
    "output": "Fix crash with wide character in last column\n\nIgnore wide character outputs instead of crashing when the cursor\nis in the last column with autowrap disabled."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/drawer/DrawerLayout.java b/app/src/main/java/com/termux/drawer/DrawerLayout.java\n--- a/app/src/main/java/com/termux/drawer/DrawerLayout.java\n+++ b/app/src/main/java/com/termux/drawer/DrawerLayout.java\n@@ -1105,7 +1105,6 @@ public boolean onTouchEvent(MotionEvent ev) {\n \t\tmRightDragger.processTouchEvent(ev);\n \n \t\tfinal int action = ev.getAction();\n-\t\tboolean wantTouchEvents = true;\n \n \t\tswitch (action & MotionEvent.ACTION_MASK) {\n \t\tcase MotionEvent.ACTION_DOWN: {\n@@ -1145,7 +1144,7 @@ public boolean onTouchEvent(MotionEvent ev) {\n \t\t}\n \t\t}\n \n-\t\treturn wantTouchEvents;\n+\t\treturn true;\n \t}\n \n \t@Override",
    "output": "Remove dead code"
  },
  {
    "input": "diff --git a/app/src/test/java/com/termux/terminal/DecSetTest.java b/app/src/test/java/com/termux/terminal/DecSetTest.java\n--- a/app/src/test/java/com/termux/terminal/DecSetTest.java\n+++ b/app/src/test/java/com/termux/terminal/DecSetTest.java\n@@ -59,4 +59,15 @@ public void testBracketedPasteMode() {\n \t\tassertEquals(\"Terminal reset() should disable bracketed paste mode\", \"a\", mOutput.getOutputAndClear());\n \t}\n \n+\t/** DECSET 7, DECAWM, controls wraparound mode. */\n+\tpublic void testWrapAroundMode() {\n+\t\t// Default with wraparound:\n+\t\twithTerminalSized(3, 3).enterString(\"abcd\").assertLinesAre(\"abc\", \"d  \", \"   \");\n+\t\t// With wraparound disabled:\n+\t\twithTerminalSized(3, 3).enterString(\"\\033[?7labcd\").assertLinesAre(\"abd\", \"   \", \"   \");\n+\t\tenterString(\"efg\").assertLinesAre(\"abg\", \"   \", \"   \");\n+\t\t// Re-enabling wraparound:\n+\t\tenterString(\"\\033[?7hhij\").assertLinesAre(\"abh\", \"ij \", \"   \");\n+\t}\n+\n }",
    "output": "Add screen wraparound test"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/drawer/DrawerLayout.java b/app/src/main/java/com/termux/drawer/DrawerLayout.java\n--- a/app/src/main/java/com/termux/drawer/DrawerLayout.java\n+++ b/app/src/main/java/com/termux/drawer/DrawerLayout.java\n@@ -768,16 +768,10 @@ protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n \t\t\t\t// or pick a magic number from thin air otherwise.\n \t\t\t\t// TODO Better communication with tools of this bogus state.\n \t\t\t\t// It will crash on a real device.\n-\t\t\t\tif (widthMode == MeasureSpec.AT_MOST) {\n-\t\t\t\t\twidthMode = MeasureSpec.EXACTLY;\n-\t\t\t\t} else if (widthMode == MeasureSpec.UNSPECIFIED) {\n-\t\t\t\t\twidthMode = MeasureSpec.EXACTLY;\n+\t\t\t\tif (widthMode == MeasureSpec.UNSPECIFIED) {\n \t\t\t\t\twidthSize = 300;\n \t\t\t\t}\n-\t\t\t\tif (heightMode == MeasureSpec.AT_MOST) {\n-\t\t\t\t\theightMode = MeasureSpec.EXACTLY;\n-\t\t\t\t} else if (heightMode == MeasureSpec.UNSPECIFIED) {\n-\t\t\t\t\theightMode = MeasureSpec.EXACTLY;\n+\t\t\t\tif (heightMode == MeasureSpec.UNSPECIFIED) {\n \t\t\t\t\theightSize = 300;\n \t\t\t\t}\n \t\t\t} else {\n\ndiff --git a/app/src/main/java/com/termux/filepicker/TermuxFilePickerActivity.java b/app/src/main/java/com/termux/filepicker/TermuxFilePickerActivity.java\n--- a/app/src/main/java/com/termux/filepicker/TermuxFilePickerActivity.java\n+++ b/app/src/main/java/com/termux/filepicker/TermuxFilePickerActivity.java\n@@ -42,11 +42,6 @@ protected void onCreate(Bundle savedInstanceState) {\n         setListAdapter(mAdapter);\n     }\n \n-    @Override\n-    protected void onResume() {\n-        super.onResume();\n-    }\n-\n     @Override\n     public boolean onOptionsItemSelected(MenuItem item) {\n         int id = item.getItemId();\n\ndiff --git a/app/src/test/java/com/termux/terminal/OperatingSystemControlTest.java b/app/src/test/java/com/termux/terminal/OperatingSystemControlTest.java\n--- a/app/src/test/java/com/termux/terminal/OperatingSystemControlTest.java\n+++ b/app/src/test/java/com/termux/terminal/OperatingSystemControlTest.java\n@@ -15,7 +15,7 @@ public void testSetTitle() throws Exception {\n \t\twithTerminalSized(10, 10);\n \t\tenterString(\"\\033]0;Hello, world\\007\");\n \t\tassertEquals(\"Hello, world\", mTerminal.getTitle());\n-\t\texpectedTitleChanges.add(new ChangedTitle(null, \"Hello, world\"));\n+\t\texpectedTitleChanges.add(new ChangedTitle((String) null, \"Hello, world\"));\n \t\tassertEquals(expectedTitleChanges, mOutput.titleChanges);\n \n \t\tenterString(\"\\033]0;Goodbye, world\\007\");",
    "output": "Remove some dead code"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -35,6 +35,8 @@\n import android.os.Bundle;\n import android.os.IBinder;\n import android.os.Vibrator;\n+import android.support.annotation.NonNull;\n+import android.support.annotation.Nullable;\n import android.text.SpannableString;\n import android.text.Spanned;\n import android.text.TextUtils;\n@@ -87,7 +89,7 @@ public final class TermuxActivity extends Activity implements ServiceConnection\n \tprivate static final String RELOAD_STYLE_ACTION = \"com.termux.app.reload_style\";\n \n \t/** The main view of the activity showing the terminal. */\n-\tTerminalView mTerminalView;\n+\t@NonNull TerminalView mTerminalView;\n \n \tfinal FullScreenHelper mFullScreenHelper = new FullScreenHelper(this);\n \n@@ -143,6 +145,7 @@ public boolean onKey(View v, int keyCode, KeyEvent event) {\n \t\t\t\tif (event.getAction() != KeyEvent.ACTION_DOWN) return false;\n \n \t\t\t\tfinal TerminalSession currentSession = getCurrentTermSession();\n+\t\t\t\tif (currentSession == null) return false;\n \n \t\t\t\tif (keyCode == KeyEvent.KEYCODE_ENTER && !currentSession.isRunning()) {\n \t\t\t\t\t// Return pressed with finished session - remove it.\n@@ -461,7 +464,7 @@ public void onServiceDisconnected(ComponentName name) {\n \t\t}\n \t}\n \n-\tTerminalSession getCurrentTermSession() {\n+\t@Nullable TerminalSession getCurrentTermSession() {\n \t\treturn mTerminalView.getCurrentSession();\n \t}\n ",
    "output": "Add missing null guard for no current session"
  },
  {
    "input": "diff --git a/app/src/test/java/com/termux/terminal/TextStyleTest.java b/app/src/test/java/com/termux/terminal/TextStyleTest.java\n--- a/app/src/test/java/com/termux/terminal/TextStyleTest.java\n+++ b/app/src/test/java/com/termux/terminal/TextStyleTest.java\n@@ -34,7 +34,7 @@ public void testEncodingCombinations() {\n \tpublic void testEncodingStrikeThrough() {\n \t\tint encoded = TextStyle.encode(TextStyle.COLOR_INDEX_FOREGROUND, TextStyle.COLOR_INDEX_BACKGROUND,\n \t\t\t\tTextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH);\n-\t\tassertTrue((TextStyle.decodeEffect(encoded) | TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0);\n+\t\tassertTrue((TextStyle.decodeEffect(encoded) & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0);\n \t}\n \n \tpublic void testEncodingProtected() {",
    "output": "Fix bitwise operation issue"
  },
  {
    "input": "diff --git a/app/src/test/java/com/termux/app/TermuxActivityTest.java b/app/src/test/java/com/termux/app/TermuxActivityTest.java\n--- a/app/src/test/java/com/termux/app/TermuxActivityTest.java\n+++ b/app/src/test/java/com/termux/app/TermuxActivityTest.java\n@@ -2,13 +2,14 @@\n \n import junit.framework.TestCase;\n \n+import java.util.Collections;\n import java.util.LinkedHashSet;\n \n public class TermuxActivityTest extends TestCase {\n \n     private void assertUrlsAre(String text, String... urls) {\n         LinkedHashSet<String> expected = new LinkedHashSet<>();\n-        for (String url : urls) expected.add(url);\n+        Collections.addAll(expected, urls);\n         assertEquals(expected, TermuxActivity.extractUrls(text));\n     }\n \n\ndiff --git a/app/src/test/java/com/termux/terminal/TerminalTestCase.java b/app/src/test/java/com/termux/terminal/TerminalTestCase.java\n--- a/app/src/test/java/com/termux/terminal/TerminalTestCase.java\n+++ b/app/src/test/java/com/termux/terminal/TerminalTestCase.java\n@@ -18,7 +18,7 @@\n public abstract class TerminalTestCase extends TestCase {\n \n \tpublic static class MockTerminalOutput extends TerminalOutput {\n-\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n+\t\tfinal ByteArrayOutputStream baos = new ByteArrayOutputStream();\n \t\tpublic final List<ChangedTitle> titleChanges = new ArrayList<>();\n \t\tpublic final List<String> clipboardPuts = new ArrayList<>();\n \t\tpublic int bellsRung = 0;\n@@ -117,7 +117,7 @@ public void assertHistoryStartsWith(String... rows) {\n \t}\n \n \tprivate static final class LineWrapper {\n-\t\tTerminalRow mLine;\n+\t\tfinal TerminalRow mLine;\n \n \t\tpublic LineWrapper(TerminalRow line) {\n \t\t\tmLine = line;",
    "output": "Fix inspect code warnings"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/filepicker/TermuxFilePickerActivity.java b/app/src/main/java/com/termux/filepicker/TermuxFilePickerActivity.java\n--- a/app/src/main/java/com/termux/filepicker/TermuxFilePickerActivity.java\n+++ b/app/src/main/java/com/termux/filepicker/TermuxFilePickerActivity.java\n@@ -36,7 +36,7 @@ protected void onCreate(Bundle savedInstanceState) {\n         super.onCreate(savedInstanceState);\n         setContentView(R.layout.file_picker);\n \n-        mAdapter = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, mFileNames);\n+        mAdapter = new ArrayAdapter<>(this, android.R.layout.simple_list_item_1, mFileNames);\n \n         enterDirectory(new File(TERMUX_HOME));\n         setListAdapter(mAdapter);\n\ndiff --git a/app/src/test/java/com/termux/terminal/TerminalRowTest.java b/app/src/test/java/com/termux/terminal/TerminalRowTest.java\n--- a/app/src/test/java/com/termux/terminal/TerminalRowTest.java\n+++ b/app/src/test/java/com/termux/terminal/TerminalRowTest.java\n@@ -377,9 +377,9 @@ public void testCrashATE145() {\n \t\t// int[] expected = new int[] { TerminalEmulator.UNICODE_REPLACEMENT_CHAR, 'a', '8', 0x73EE, 0x009F, 0x881F, 0x8324, 0xD4C9, 0xFFFD,\n \t\t// 'B', 0x009B, 0x61C9, 'Z' };\n \t\tint currentColumn = 0;\n-\t\tfor (int i = 0; i < points.length; i++) {\n-\t\t\trow.setChar(currentColumn, points[i], 0);\n-\t\t\tcurrentColumn += WcWidth.width(points[i]);\n+\t\tfor (int point : points) {\n+\t\t\trow.setChar(currentColumn, point, 0);\n+\t\t\tcurrentColumn += WcWidth.width(point);\n \t\t}\n \t\t// assertLineStartsWith(points);\n \t\t// assertEquals(Character.highSurrogate(0xC2541), line.mText[0]);",
    "output": "Fix two Android Studio inspect code warnings"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -580,12 +580,11 @@ public boolean onCreateOptionsMenu(Menu menu) {\n \t\treturn false;\n \t}\n \n-\tvoid showUrlSelection() {\n-\t\tString text = getCurrentTermSession().getEmulator().getScreen().getTranscriptText();\n+\tstatic LinkedHashSet<CharSequence> extractUrls(String text) {\n \t\t// Pattern for recognizing a URL, based off RFC 3986\n \t\t// http://stackoverflow.com/questions/5713558/detect-and-extract-url-from-a-string\n \t\tfinal Pattern urlPattern = Pattern.compile(\n-\t\t\t\t\"(?:^|[\\\\W])((ht|f)tp(s?):\\\\/\\\\/|www\\\\.)\" + \"(([\\\\w\\\\-]+\\\\.){1,}?([\\\\w\\\\-.~]+\\\\/?)*\" + \"[\\\\p{Alnum}.,%_=?&#\\\\-+()\\\\[\\\\]\\\\*$~@!:/{};']*)\",\n+\t\t\t\t\"(?:^|[\\\\W])((ht|f)tp(s?)://|www\\\\.)\" + \"(([\\\\w\\\\-]+\\\\.)+?([\\\\w\\\\-.~]+/?)*\" + \"[\\\\p{Alnum}.,%_=?&#\\\\-+()\\\\[\\\\]\\\\*$~@!:/{};']*)\",\n \t\t\t\tPattern.CASE_INSENSITIVE | Pattern.MULTILINE | Pattern.DOTALL);\n \t\tLinkedHashSet<CharSequence> urlSet = new LinkedHashSet<>();\n \t\tMatcher matcher = urlPattern.matcher(text);\n@@ -595,7 +594,12 @@ void showUrlSelection() {\n \t\t\tString url = text.substring(matchStart, matchEnd);\n \t\t\turlSet.add(url);\n \t\t}\n+\t\treturn urlSet;\n+\t}\n \n+\tvoid showUrlSelection() {\n+\t\tString text = getCurrentTermSession().getEmulator().getScreen().getTranscriptText();\n+\t\tLinkedHashSet<CharSequence> urlSet = extractUrls(text);\n \t\tif (urlSet.isEmpty()) {\n \t\t\tnew AlertDialog.Builder(this).setMessage(R.string.select_url_no_found).show();\n \t\t\treturn;\n\ndiff --git a/app/src/test/java/com/termux/app/TermuxActivityTest.java b/app/src/test/java/com/termux/app/TermuxActivityTest.java\n--- a/app/src/test/java/com/termux/app/TermuxActivityTest.java\n+++ b/app/src/test/java/com/termux/app/TermuxActivityTest.java\n@@ -0,0 +1,24 @@\n+package com.termux.app;\n+\n+import junit.framework.TestCase;\n+\n+import java.util.LinkedHashSet;\n+\n+public class TermuxActivityTest extends TestCase {\n+\n+    private void assertUrlsAre(String text, String... urls) {\n+        LinkedHashSet<String> expected = new LinkedHashSet<>();\n+        for (String url : urls) expected.add(url);\n+        assertEquals(expected, TermuxActivity.extractUrls(text));\n+    }\n+\n+    public void testExtractUrls() {\n+        assertUrlsAre(\"hello http://example.com world\", \"http://example.com\");\n+\n+        assertUrlsAre(\"http://example.com\\nhttp://another.com\", \"http://example.com\", \"http://another.com\");\n+\n+        assertUrlsAre(\"hello http://example.com world and http://more.example.com with secure https://more.example.com\",\n+                \"http://example.com\", \"http://more.example.com\", \"https://more.example.com\");\n+    }\n+\n+}",
    "output": "Url-regexp: Remove redundant escapes and add test"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/filepicker/TermuxFilePickerProvider.java b/app/src/main/java/com/termux/filepicker/TermuxFilePickerProvider.java\n--- a/app/src/main/java/com/termux/filepicker/TermuxFilePickerProvider.java\n+++ b/app/src/main/java/com/termux/filepicker/TermuxFilePickerProvider.java\n@@ -6,6 +6,7 @@\n import android.database.Cursor;\n import android.net.Uri;\n import android.os.ParcelFileDescriptor;\n+import android.support.annotation.NonNull;\n \n import java.io.File;\n import java.io.FileNotFoundException;\n@@ -18,32 +19,32 @@ public boolean onCreate() {\n     }\n \n     @Override\n-    public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {\n+    public Cursor query(@NonNull Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {\n         return null;\n     }\n \n     @Override\n-    public String getType(Uri uri) {\n+    public String getType(@NonNull Uri uri) {\n         return null;\n     }\n \n     @Override\n-    public Uri insert(Uri uri, ContentValues values) {\n+    public Uri insert(@NonNull Uri uri, ContentValues values) {\n         return null;\n     }\n \n     @Override\n-    public int delete(Uri uri, String selection, String[] selectionArgs) {\n+    public int delete(@NonNull Uri uri, String selection, String[] selectionArgs) {\n         return 0;\n     }\n \n     @Override\n-    public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) {\n+    public int update(@NonNull Uri uri, ContentValues values, String selection, String[] selectionArgs) {\n         return 0;\n     }\n \n     @Override\n-    public ParcelFileDescriptor openFile(Uri uri, String mode) throws FileNotFoundException {\n+    public ParcelFileDescriptor openFile(@NonNull Uri uri, @NonNull String mode) throws FileNotFoundException {\n         File file = new File(uri.getPath());\n         return ParcelFileDescriptor.open(file, ParcelFileDescriptor.MODE_READ_ONLY);\n     }",
    "output": "Update gradle config and add Support Annotations"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/drawer/DrawerLayout.java b/app/src/main/java/com/termux/drawer/DrawerLayout.java\n--- a/app/src/main/java/com/termux/drawer/DrawerLayout.java\n+++ b/app/src/main/java/com/termux/drawer/DrawerLayout.java\n@@ -934,10 +934,7 @@ public void computeScroll() {\n \n \tprivate static boolean hasOpaqueBackground(View v) {\n \t\tfinal Drawable bg = v.getBackground();\n-\t\tif (bg != null) {\n-\t\t\treturn bg.getOpacity() == PixelFormat.OPAQUE;\n-\t\t}\n-\t\treturn false;\n+\t\treturn bg != null && bg.getOpacity() == PixelFormat.OPAQUE;\n \t}\n \n \t/**\n@@ -1317,10 +1314,7 @@ public boolean isDrawerOpen(View drawer) {\n \t */\n \tpublic boolean isDrawerOpen(int drawerGravity) {\n \t\tfinal View drawerView = findDrawerWithGravity(drawerGravity);\n-\t\tif (drawerView != null) {\n-\t\t\treturn isDrawerOpen(drawerView);\n-\t\t}\n-\t\treturn false;\n+\t\treturn drawerView != null && isDrawerOpen(drawerView);\n \t}\n \n \t/**\n@@ -1350,10 +1344,7 @@ public boolean isDrawerVisible(View drawer) {\n \t */\n \tpublic boolean isDrawerVisible(int drawerGravity) {\n \t\tfinal View drawerView = findDrawerWithGravity(drawerGravity);\n-\t\tif (drawerView != null) {\n-\t\t\treturn isDrawerVisible(drawerView);\n-\t\t}\n-\t\treturn false;\n+\t\treturn drawerView != null && isDrawerVisible(drawerView);\n \t}\n \n \tprivate boolean hasPeekingDrawer() {\n@@ -1776,10 +1767,7 @@ public boolean dispatchPopulateAccessibilityEvent(View host, AccessibilityEvent\n \n \t\t@Override\n \t\tpublic boolean onRequestSendAccessibilityEvent(ViewGroup host, View child, AccessibilityEvent event) {\n-\t\t\tif (CAN_HIDE_DESCENDANTS || includeChildForAccessibility(child)) {\n-\t\t\t\treturn super.onRequestSendAccessibilityEvent(host, child, event);\n-\t\t\t}\n-\t\t\treturn false;\n+\t\t\treturn (CAN_HIDE_DESCENDANTS || includeChildForAccessibility(child)) && super.onRequestSendAccessibilityEvent(host, child, event);\n \t\t}\n \t}\n \n@@ -1796,4 +1784,4 @@ public void onInitializeAccessibilityNodeInfo(View child, AccessibilityNodeInfo\n \t\t\t}\n \t\t}\n \t}\n-}\n\\ No newline at end of file\n+}\n\ndiff --git a/app/src/main/java/com/termux/drawer/ViewDragHelper.java b/app/src/main/java/com/termux/drawer/ViewDragHelper.java\n--- a/app/src/main/java/com/termux/drawer/ViewDragHelper.java\n+++ b/app/src/main/java/com/termux/drawer/ViewDragHelper.java\n@@ -1485,10 +1485,7 @@ public boolean isCapturedViewUnder(int x, int y) {\n \t * @return true if the supplied view is under the given point, false otherwise\n \t */\n \tpublic boolean isViewUnder(View view, int x, int y) {\n-\t\tif (view == null) {\n-\t\t\treturn false;\n-\t\t}\n-\t\treturn x >= view.getLeft() && x < view.getRight() && y >= view.getTop() && y < view.getBottom();\n+\t\treturn view != null && x >= view.getLeft() && x < view.getRight() && y >= view.getTop() && y < view.getBottom();\n \t}\n \n \t/**\n@@ -1522,4 +1519,4 @@ private int getEdgesTouched(int x, int y) {\n \n \t\treturn result;\n \t}\n-}\n\\ No newline at end of file\n+}\n\ndiff --git a/app/src/test/java/com/termux/terminal/TerminalTestCase.java b/app/src/test/java/com/termux/terminal/TerminalTestCase.java\n--- a/app/src/test/java/com/termux/terminal/TerminalTestCase.java\n+++ b/app/src/test/java/com/termux/terminal/TerminalTestCase.java\n@@ -130,9 +130,8 @@ public int hashCode() {\n \n \t\t@Override\n \t\tpublic boolean equals(Object o) {\n-\t\t\tif (!(o instanceof LineWrapper)) return false;\n-\t\t\treturn ((LineWrapper) o).mLine == mLine;\n-\t\t}\n+            return o instanceof LineWrapper && ((LineWrapper) o).mLine == mLine;\n+        }\n \t}\n \n \tprotected TerminalTestCase assertInvariants() {",
    "output": "Code simplifications"
  },
  {
    "input": "diff --git a/app/src/test/java/com/termux/terminal/OperatingSystemControlTest.java b/app/src/test/java/com/termux/terminal/OperatingSystemControlTest.java\n--- a/app/src/test/java/com/termux/terminal/OperatingSystemControlTest.java\n+++ b/app/src/test/java/com/termux/terminal/OperatingSystemControlTest.java\n@@ -15,7 +15,7 @@ public void testSetTitle() throws Exception {\n \t\twithTerminalSized(10, 10);\n \t\tenterString(\"\\033]0;Hello, world\\007\");\n \t\tassertEquals(\"Hello, world\", mTerminal.getTitle());\n-\t\texpectedTitleChanges.add(new ChangedTitle((String) null, \"Hello, world\"));\n+\t\texpectedTitleChanges.add(new ChangedTitle(null, \"Hello, world\"));\n \t\tassertEquals(expectedTitleChanges, mOutput.titleChanges);\n \n \t\tenterString(\"\\033]0;Goodbye, world\\007\");\n\ndiff --git a/app/src/test/java/com/termux/terminal/TerminalTestCase.java b/app/src/test/java/com/termux/terminal/TerminalTestCase.java\n--- a/app/src/test/java/com/termux/terminal/TerminalTestCase.java\n+++ b/app/src/test/java/com/termux/terminal/TerminalTestCase.java\n@@ -57,7 +57,7 @@ public void onBell() {\n \tpublic TerminalEmulator mTerminal;\n \tpublic MockTerminalOutput mOutput;\n \n-\tpublic static class ChangedTitle {\n+\tpublic static final class ChangedTitle {\n \t\tfinal String oldTitle;\n \t\tfinal String newTitle;\n \n@@ -68,6 +68,7 @@ public ChangedTitle(String oldTitle, String newTitle) {\n \n \t\t@Override\n \t\tpublic boolean equals(Object o) {\n+\t\t\tif (!(o instanceof ChangedTitle)) return false;\n \t\t\tChangedTitle other = (ChangedTitle) o;\n \t\t\treturn Objects.equals(oldTitle, other.oldTitle) && Objects.equals(newTitle, other.newTitle);\n \t\t}\n@@ -115,7 +116,7 @@ public void assertHistoryStartsWith(String... rows) {\n \t\t}\n \t}\n \n-\tprivate static class LineWrapper {\n+\tprivate static final class LineWrapper {\n \t\tTerminalRow mLine;\n \n \t\tpublic LineWrapper(TerminalRow line) {\n@@ -129,6 +130,7 @@ public int hashCode() {\n \n \t\t@Override\n \t\tpublic boolean equals(Object o) {\n+\t\t\tif (!(o instanceof LineWrapper)) return false;\n \t\t\treturn ((LineWrapper) o).mLine == mLine;\n \t\t}\n \t}",
    "output": "Remove some warnings"
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/view/TerminalRenderer.java b/app/src/main/java/com/termux/view/TerminalRenderer.java\n--- a/app/src/main/java/com/termux/view/TerminalRenderer.java\n+++ b/app/src/main/java/com/termux/view/TerminalRenderer.java\n@@ -205,7 +205,10 @@ private void drawTextRun(Canvas canvas, char[] text, int[] palette, float y, int\n \t\t\tfinal boolean strikeThrough = (effect & TextStyle.CHARACTER_ATTRIBUTE_STRIKETHROUGH) != 0;\n \t\t\tfinal boolean dim = (effect & TextStyle.CHARACTER_ATTRIBUTE_DIM) != 0;\n \n-\t\t\tint foreColorARGB = palette[foreColor];\n+\t\t\t// Let bold have bright colors if applicable (one of the first 8):\n+\t\t\tfinal int actualForeColor = foreColor + (bold && foreColor < 8 ? 8 : 0);\n+\n+\t\t\tint foreColorARGB = palette[actualForeColor];\n \t\t\tif (dim) {\n \t\t\t\tint red = (0xFF & (foreColorARGB >> 16));\n \t\t\t\tint green = (0xFF & (foreColorARGB >> 8));",
    "output": "Show bold text in bright colors\n\nFixes 17. Could be made an option in the future if necessary."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/terminal/TerminalSession.java b/app/src/main/java/com/termux/terminal/TerminalSession.java\n--- a/app/src/main/java/com/termux/terminal/TerminalSession.java\n+++ b/app/src/main/java/com/termux/terminal/TerminalSession.java\n@@ -119,7 +119,7 @@ public void handleMessage(Message msg) {\n \t\t\t\t\t// Negated signal.\n \t\t\t\t\texitDescription += \" with signal \" + (-exitCode);\n \t\t\t\t}\n-\t\t\t\texitDescription += \"]\";\n+\t\t\t\texitDescription += \" - press Enter to close]\";\n \n \t\t\t\tbyte[] bytesToWrite = exitDescription.getBytes(StandardCharsets.UTF_8);\n \t\t\t\tmEmulator.append(bytesToWrite, bytesToWrite.length);",
    "output": "Show \"-press Enter to close\" at session exit\n\nThis makes it more clear how to close the session after finishing.\nFixes #15."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/view/TerminalRenderer.java b/app/src/main/java/com/termux/view/TerminalRenderer.java\n--- a/app/src/main/java/com/termux/view/TerminalRenderer.java\n+++ b/app/src/main/java/com/termux/view/TerminalRenderer.java\n@@ -80,6 +80,7 @@ public final void render(TerminalEmulator mEmulator, Canvas canvas, int topRow,\n \n \t\t\tTerminalRow lineObject = screen.allocateFullLineIfNecessary(screen.externalToInternalRow(row));\n \t\t\tfinal char[] line = lineObject.mText;\n+\t\t\tfinal int charsUsedInLine = lineObject.getSpaceUsed();\n \n \t\t\tint lastRunStyle = 0;\n \t\t\tboolean lastRunInsideCursor = false;\n@@ -125,7 +126,7 @@ public final void render(TerminalEmulator mEmulator, Canvas canvas, int topRow,\n \t\t\t\tmeasuredWidthForRun += measuredCodePointWidth;\n \t\t\t\tcolumn += codePointWcWidth;\n \t\t\t\tcurrentCharIndex += charsForCodePoint;\n-\t\t\t\twhile (WcWidth.width(line, currentCharIndex) <= 0) {\n+\t\t\t\twhile (currentCharIndex < charsUsedInLine && WcWidth.width(line, currentCharIndex) <= 0) {\n \t\t\t\t\t// Eat combining chars so that they are treated as part of the last non-combining code point,\n \t\t\t\t\t// instead of e.g. being considered inside the cursor in the next run.\n \t\t\t\t\tcurrentCharIndex += Character.isHighSurrogate(line[currentCharIndex]) ? 2 : 1;",
    "output": "Fix crash when using some unicode characters\n\nWe should never try to look at characters in a row after those\nactually used."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/app/TermuxActivity.java b/app/src/main/java/com/termux/app/TermuxActivity.java\n--- a/app/src/main/java/com/termux/app/TermuxActivity.java\n+++ b/app/src/main/java/com/termux/app/TermuxActivity.java\n@@ -52,6 +52,7 @@\n import android.view.View.OnKeyListener;\n import android.view.View.OnLongClickListener;\n import android.view.ViewGroup;\n+import android.view.WindowManager;\n import android.view.inputmethod.InputMethodManager;\n import android.widget.AdapterView;\n import android.widget.AdapterView.OnItemClickListener;\n@@ -414,18 +415,22 @@ public boolean onItemLongClick(AdapterView<?> parent, View view, final int posit\n \t\t\t\tTermuxInstaller.setupIfNeeded(TermuxActivity.this, new Runnable() {\n \t\t\t\t\t@Override\n \t\t\t\t\tpublic void run() {\n-\t\t\t\t\t\tif (TermuxPreferences.isShowWelcomeDialog(TermuxActivity.this)) {\n-\t\t\t\t\t\t\tnew AlertDialog.Builder(TermuxActivity.this).setTitle(R.string.welcome_dialog_title).setMessage(R.string.welcome_dialog_body)\n-\t\t\t\t\t\t\t\t\t.setCancelable(false).setPositiveButton(android.R.string.ok, null)\n-\t\t\t\t\t\t\t\t\t.setNegativeButton(R.string.welcome_dialog_dont_show_again_button, new DialogInterface.OnClickListener() {\n-\t\t\t\t\t\t\t\t@Override\n-\t\t\t\t\t\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n-\t\t\t\t\t\t\t\t\tTermuxPreferences.disableWelcomeDialog(TermuxActivity.this);\n-\t\t\t\t\t\t\t\t\tdialog.dismiss();\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t}).show();\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tif (TermuxPreferences.isShowWelcomeDialog(TermuxActivity.this)) {\n+\t\t\t\t\t\t\t\tnew AlertDialog.Builder(TermuxActivity.this).setTitle(R.string.welcome_dialog_title).setMessage(R.string.welcome_dialog_body)\n+\t\t\t\t\t\t\t\t\t\t.setCancelable(false).setPositiveButton(android.R.string.ok, null)\n+\t\t\t\t\t\t\t\t\t\t.setNegativeButton(R.string.welcome_dialog_dont_show_again_button, new DialogInterface.OnClickListener() {\n+\t\t\t\t\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\t\t\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n+\t\t\t\t\t\t\t\t\t\t\t\tTermuxPreferences.disableWelcomeDialog(TermuxActivity.this);\n+\t\t\t\t\t\t\t\t\t\t\t\tdialog.dismiss();\n+\t\t\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t\t\t}).show();\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\taddNewSession(false, null);\n+\t\t\t\t\t\t} catch (WindowManager.BadTokenException e) {\n+\t\t\t\t\t\t\t// Activity finished - ignore.\n \t\t\t\t\t\t}\n-\t\t\t\t\t\taddNewSession(false, null);\n \t\t\t\t\t}\n \t\t\t\t});\n \t\t\t} else {\n\ndiff --git a/app/src/main/java/com/termux/app/TermuxInstaller.java b/app/src/main/java/com/termux/app/TermuxInstaller.java\n--- a/app/src/main/java/com/termux/app/TermuxInstaller.java\n+++ b/app/src/main/java/com/termux/app/TermuxInstaller.java\n@@ -21,6 +21,7 @@\n import android.system.Os;\n import android.util.Log;\n import android.util.Pair;\n+import android.view.WindowManager;\n \n import com.termux.R;\n import com.termux.terminal.EmulatorDebug;\n@@ -138,27 +139,35 @@ public void run() {\n \t\t\t\t\tactivity.runOnUiThread(new Runnable() {\n \t\t\t\t\t\t@Override\n \t\t\t\t\t\tpublic void run() {\n-\t\t\t\t\t\t\tnew AlertDialog.Builder(activity).setTitle(R.string.bootstrap_error_title).setMessage(R.string.bootstrap_error_body)\n-\t\t\t\t\t\t\t\t\t.setNegativeButton(R.string.bootstrap_error_abort, new OnClickListener() {\n-\t\t\t\t\t\t\t\t@Override\n-\t\t\t\t\t\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n-\t\t\t\t\t\t\t\t\tdialog.dismiss();\n-\t\t\t\t\t\t\t\t\tactivity.finish();\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t}).setPositiveButton(R.string.bootstrap_error_try_again, new OnClickListener() {\n-\t\t\t\t\t\t\t\t@Override\n-\t\t\t\t\t\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n-\t\t\t\t\t\t\t\t\tdialog.dismiss();\n-\t\t\t\t\t\t\t\t\tTermuxInstaller.setupIfNeeded(activity, whenDone);\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t}).show();\n+\t\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t\tnew AlertDialog.Builder(activity).setTitle(R.string.bootstrap_error_title).setMessage(R.string.bootstrap_error_body)\n+\t\t\t\t\t\t\t\t\t\t.setNegativeButton(R.string.bootstrap_error_abort, new OnClickListener() {\n+\t\t\t\t\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\t\t\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n+\t\t\t\t\t\t\t\t\t\t\t\tdialog.dismiss();\n+\t\t\t\t\t\t\t\t\t\t\t\tactivity.finish();\n+\t\t\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t\t\t}).setPositiveButton(R.string.bootstrap_error_try_again, new OnClickListener() {\n+\t\t\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\t\t\tpublic void onClick(DialogInterface dialog, int which) {\n+\t\t\t\t\t\t\t\t\t\tdialog.dismiss();\n+\t\t\t\t\t\t\t\t\t\tTermuxInstaller.setupIfNeeded(activity, whenDone);\n+\t\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t\t}).show();\n+\t\t\t\t\t\t\t} catch (WindowManager.BadTokenException e) {\n+\t\t\t\t\t\t\t\t// Activity already dismissed - ignore.\n+\t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n \t\t\t\t\t});\n \t\t\t\t} finally {\n \t\t\t\t\tactivity.runOnUiThread(new Runnable() {\n \t\t\t\t\t\t@Override\n \t\t\t\t\t\tpublic void run() {\n-\t\t\t\t\t\t\tprogress.dismiss();\n+\t\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\t\tprogress.dismiss();\n+\t\t\t\t\t\t\t} catch (RuntimeException e) {\n+\t\t\t\t\t\t\t\t// Activity already dismissed - ignore.\n+\t\t\t\t\t\t\t}\n \t\t\t\t\t\t}\n \t\t\t\t\t});\n \t\t\t\t}",
    "output": "Fix crash on installation if activity destroyed\n\nIf the activity had been destroyed waiting for the installation to\nfinish the code would crash trying to display welcome dialogs (on\nsuccess) or error dialogs (on error)."
  },
  {
    "input": "diff --git a/app/src/main/java/com/termux/filepicker/TermuxFilePickerActivity.java b/app/src/main/java/com/termux/filepicker/TermuxFilePickerActivity.java\n--- a/app/src/main/java/com/termux/filepicker/TermuxFilePickerActivity.java\n+++ b/app/src/main/java/com/termux/filepicker/TermuxFilePickerActivity.java\n@@ -0,0 +1,111 @@\n+package com.termux.filepicker;\n+\n+import android.annotation.SuppressLint;\n+import android.app.Activity;\n+import android.app.ListActivity;\n+import android.content.Intent;\n+import android.net.Uri;\n+import android.os.Bundle;\n+import android.view.MenuItem;\n+import android.view.View;\n+import android.widget.ArrayAdapter;\n+import android.widget.ListView;\n+\n+import com.termux.R;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+\n+/** Activity allowing picking files from the $HOME folder. */\n+public class TermuxFilePickerActivity extends ListActivity {\n+\n+    @SuppressLint(\"SdCardPath\")\n+    final String TERMUX_HOME = \"/data/data/com.termux/files/home\";\n+\n+    private File mCurrentDirectory;\n+    private final List<File> mFiles = new ArrayList<>();\n+    private final List<String> mFileNames = new ArrayList<>();\n+    private ArrayAdapter mAdapter;\n+\n+    @Override\n+    protected void onCreate(Bundle savedInstanceState) {\n+        super.onCreate(savedInstanceState);\n+        setContentView(R.layout.file_picker);\n+\n+        mAdapter = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, mFileNames);\n+\n+        enterDirectory(new File(TERMUX_HOME));\n+        setListAdapter(mAdapter);\n+    }\n+\n+    @Override\n+    protected void onResume() {\n+        super.onResume();\n+    }\n+\n+    @Override\n+    public boolean onOptionsItemSelected(MenuItem item) {\n+        int id = item.getItemId();\n+        if (id == android.R.id.home) {\n+            enterDirectory(mCurrentDirectory.getParentFile());\n+            return true;\n+        } else {\n+            return super.onOptionsItemSelected(item);\n+        }\n+    }\n+\n+    @Override\n+    protected void onListItemClick(ListView l, View v, int position, long id) {\n+        super.onListItemClick(l, v, position, id);\n+        File requestFile = mFiles.get(position);\n+        if (requestFile.isDirectory()) {\n+            enterDirectory(requestFile);\n+        } else {\n+            Uri returnUri = Uri.withAppendedPath(Uri.parse(\"content://com.termux.filepicker.provider/\"), requestFile.getAbsolutePath());\n+            Intent returnIntent = new Intent().setData(returnUri);\n+            returnIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n+            setResult(Activity.RESULT_OK, returnIntent);\n+            finish();\n+        }\n+    }\n+\n+    void enterDirectory(File directory) {\n+        getActionBar().setDisplayHomeAsUpEnabled(!directory.getAbsolutePath().equals(TERMUX_HOME));\n+\n+        String title = directory.getAbsolutePath() + \"/\";\n+        if (title.startsWith(TERMUX_HOME)) {\n+            title = \"~\" + title.substring(TERMUX_HOME.length(), title.length());\n+        }\n+        setTitle(title);\n+\n+        mCurrentDirectory = directory;\n+        mFiles.clear();\n+        mFileNames.clear();\n+        mFiles.addAll(Arrays.asList(mCurrentDirectory.listFiles()));\n+\n+        Collections.sort(mFiles, new Comparator<File>() {\n+            @Override\n+            public int compare(File f1, File f2) {\n+                final String n1 = f1.getName();\n+                final String n2 = f2.getName();\n+                // Display dot folders last:\n+                if (n1.startsWith(\".\") && !n2.startsWith(\".\")) {\n+                    return 1;\n+                } else if (n2.startsWith(\".\") && !n1.startsWith(\".\")) {\n+                    return -1;\n+                }\n+                return n1.compareToIgnoreCase(n2);\n+            }\n+        });\n+\n+        for (File file : mFiles) {\n+            mFileNames.add(file.getName() + (file.isDirectory() ? \"/\" : \"\"));\n+        }\n+        mAdapter.notifyDataSetChanged();\n+    }\n+\n+}\n\ndiff --git a/app/src/main/java/com/termux/filepicker/TermuxFilePickerProvider.java b/app/src/main/java/com/termux/filepicker/TermuxFilePickerProvider.java\n--- a/app/src/main/java/com/termux/filepicker/TermuxFilePickerProvider.java\n+++ b/app/src/main/java/com/termux/filepicker/TermuxFilePickerProvider.java\n@@ -0,0 +1,50 @@\n+package com.termux.filepicker;\n+\n+\n+import android.content.ContentProvider;\n+import android.content.ContentValues;\n+import android.database.Cursor;\n+import android.net.Uri;\n+import android.os.ParcelFileDescriptor;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+\n+/** Provider of files content uris picked from {@link com.termux.filepicker.TermuxFilePickerActivity}. */\n+public class TermuxFilePickerProvider extends ContentProvider {\n+    @Override\n+    public boolean onCreate() {\n+        return false;\n+    }\n+\n+    @Override\n+    public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder) {\n+        return null;\n+    }\n+\n+    @Override\n+    public String getType(Uri uri) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Uri insert(Uri uri, ContentValues values) {\n+        return null;\n+    }\n+\n+    @Override\n+    public int delete(Uri uri, String selection, String[] selectionArgs) {\n+        return 0;\n+    }\n+\n+    @Override\n+    public int update(Uri uri, ContentValues values, String selection, String[] selectionArgs) {\n+        return 0;\n+    }\n+\n+    @Override\n+    public ParcelFileDescriptor openFile(Uri uri, String mode) throws FileNotFoundException {\n+        File file = new File(uri.getPath());\n+        return ParcelFileDescriptor.open(file, ParcelFileDescriptor.MODE_READ_ONLY);\n+    }\n+}",
    "output": "Add a file picker to pick files from $HOME\n\nThis allows e.g. files from the $HOME folder to be attached to emails\nor uploaded when in other apps.\n\nAlso bump version to 0.18."
  }
]